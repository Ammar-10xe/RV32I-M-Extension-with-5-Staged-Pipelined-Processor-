
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmabt instruction of the RISC-V RV64PZicsr extension for the kmabt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmabt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 == rd != rs2, rs1==x19, rs2==x5, rd==x19, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs2_h3_val == -9, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h0_val == -2049, rs1_h1_val == rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h2_val == -65, rs2_h2_val == 32767
// opcode: kmabt ; op1:x19; op2:x5; dest:x19; op1val:0xc000ffbf00068000;  op2val:0xfff77fff0006f7ff
TEST_PKRR_OP(kmabt, x19, x19, x5, 0x0000000000000000, 0xc000ffbf00068000, 0xfff77fff0006f7ff, x19, x4, 0, x17)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x20, rs2==x12, rd==x16, rs1_h3_val == rs2_h3_val, rs2_h3_val == -129, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h3_val == -129, rs1_h0_val == 4, rs2_h2_val == 512, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -129, rs2_h1_val == 64
// opcode: kmabt ; op1:x20; op2:x12; dest:x16; op1val:0xff7f0003ff7f0004;  op2val:0xff7f020000403fff
TEST_PKRR_OP(kmabt, x16, x20, x12, 0x0000000000000000, 0xff7f0003ff7f0004, 0xff7f020000403fff, x20, x4, 16, x17)

inst_2:
// rs1 == rs2 != rd, rs1==x10, rs2==x10, rd==x18, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h1_val == -1025, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == -5, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h3_val == -17, rs2_h3_val == 8, rs2_h2_val == 64, rs1_h2_val == -1025
// opcode: kmabt ; op1:x10; op2:x10; dest:x18; op1val:0xffeffbfffbff0009;  op2val:0x080040c000fffb
TEST_PKRR_OP(kmabt, x18, x10, x10, 0x0000000000000000, 0xffeffbfffbff0009, 0x080040c000fffb, x10, x4, 32, x17)

inst_3:
// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 4, rs2_h3_val == -2, rs1_h1_val == 256, rs2_h0_val == -1025, rs1_h0_val == 256, rs2_h2_val == 1
// opcode: kmabt ; op1:x7; op2:x7; dest:x7; op1val:0x043fff01000100;  op2val:0xfffe00013ffffbff
TEST_PKRR_OP(kmabt, x7, x7, x7, 0x0000000000000000, 0x043fff01000100, 0xfffe00013ffffbff, x7, x4, 48, x17)

inst_4:
// rs2 == rd != rs1, rs1==x25, rs2==x23, rd==x23, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h2_val == -1, rs1_h3_val == 32, rs2_h0_val == 32767, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h3_val == 4096, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -32768
// opcode: kmabt ; op1:x25; op2:x23; dest:x23; op1val:0x20ffbf00060004;  op2val:0x1000ffff80007fff
TEST_PKRR_OP(kmabt, x23, x25, x23, 0x0000000000000000, 0x20ffbf00060004, 0x1000ffff80007fff, x25, x4, 64, x17)

inst_5:
// rs1==x3, rs2==x13, rd==x28, rs1_h2_val == rs2_h2_val, rs2_h0_val == -21846, rs1_h2_val == 64, rs1_h0_val == 8192, rs1_h3_val == 16384, rs1_h1_val == -33
// opcode: kmabt ; op1:x3; op2:x13; dest:x28; op1val:0x40000040ffdf2000;  op2val:0xfff800400003aaaa
TEST_PKRR_OP(kmabt, x28, x3, x13, 0x0000000000000000, 0x40000040ffdf2000, 0xfff800400003aaaa, x3, x4, 80, x17)

inst_6:
// rs1==x13, rs2==x11, rd==x22, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h2_val == -1025, rs1_h1_val == 16384, rs2_h1_val == -129, rs2_h3_val == 512, rs2_h0_val == -32768, rs1_h0_val == -2049
// opcode: kmabt ; op1:x13; op2:x11; dest:x22; op1val:0xfffc00034000f7ff;  op2val:0x200fbffff7f8000
TEST_PKRR_OP(kmabt, x22, x13, x11, 0x0000000000000000, 0xfffc00034000f7ff, 0x200fbffff7f8000, x13, x4, 96, x17)

inst_7:
// rs1==x31, rs2==x8, rd==x15, rs1_h0_val == rs2_h0_val, rs2_h1_val == 4, rs2_h2_val == -4097, rs2_h0_val == -1, rs2_h3_val == 128, rs1_h1_val == 32767, rs1_h0_val == -1
// opcode: kmabt ; op1:x31; op2:x8; dest:x15; op1val:0xfffcfff97fffffff;  op2val:0x80efff0004ffff
TEST_PKRR_OP(kmabt, x15, x31, x8, 0x0000000000000000, 0xfffcfff97fffffff, 0x80efff0004ffff, x31, x4, 112, x17)

inst_8:
// rs1==x16, rs2==x28, rd==x9, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h3_val == 256, rs1_h0_val == -17, rs1_h1_val == 32, rs2_h3_val == 0, rs2_h2_val == 2, rs2_h0_val == 128
// opcode: kmabt ; op1:x16; op2:x28; dest:x9; op1val:0x10000060020ffef;  op2val:0x000002fff60080
TEST_PKRR_OP(kmabt, x9, x16, x28, 0x0000000000000000, 0x10000060020ffef, 0x000002fff60080, x16, x4, 128, x17)

inst_9:
// rs1==x22, rs2==x19, rd==x12, rs2_h3_val == -21846, rs2_h1_val == -21846, rs1_h1_val == -32768, rs2_h0_val == 0, rs1_h3_val == 2, rs1_h2_val == -16385, rs1_h0_val == 0
// opcode: kmabt ; op1:x22; op2:x19; dest:x12; op1val:0x02bfff80000000;  op2val:0xaaaa0040aaaa0000
TEST_PKRR_OP(kmabt, x12, x22, x19, 0x0000000000000000, 0x02bfff80000000, 0xaaaa0040aaaa0000, x22, x4, 144, x17)

inst_10:
// rs1==x23, rs2==x14, rd==x1, rs2_h3_val == 21845, rs1_h1_val == 128, rs1_h3_val == -16385, rs1_h2_val == 512, rs2_h2_val == -129
// opcode: kmabt ; op1:x23; op2:x14; dest:x1; op1val:0xbfff020000800007;  op2val:0x5555ff7f8000fff6
TEST_PKRR_OP(kmabt, x1, x23, x14, 0x0000000000000000, 0xbfff020000800007, 0x5555ff7f8000fff6, x23, x4, 160, x17)

inst_11:
// rs1==x24, rs2==x25, rd==x31, rs2_h3_val == 32767, rs1_h2_val == -1, rs1_h0_val == -9, rs2_h1_val == 4096
// opcode: kmabt ; op1:x24; op2:x25; dest:x31; op1val:0xfffaffff0003fff7;  op2val:0x7fff020010008000
TEST_PKRR_OP(kmabt, x31, x24, x25, 0x0000000000000000, 0xfffaffff0003fff7, 0x7fff020010008000, x24, x4, 176, x17)

inst_12:
// rs1==x18, rs2==x2, rd==x29, rs2_h3_val == -16385, rs2_h1_val == -513, rs1_h0_val == -21846, rs1_h2_val == -129
// opcode: kmabt ; op1:x18; op2:x2; dest:x29; op1val:0x100ff7f0003aaaa;  op2val:0xbfff0006fdfffffc
TEST_PKRR_OP(kmabt, x29, x18, x2, 0x0000000000000000, 0x100ff7f0003aaaa, 0xbfff0006fdfffffc, x18, x4, 192, x17)

inst_13:
// rs1==x28, rs2==x16, rd==x6, rs2_h3_val == -8193, rs1_h2_val == 256, rs1_h1_val == 512, rs1_h3_val == 0, rs2_h0_val == -2, rs2_h1_val == 256
// opcode: kmabt ; op1:x28; op2:x16; dest:x6; op1val:0x00010002000100;  op2val:0xdfffc0000100fffe
TEST_PKRR_OP(kmabt, x6, x28, x16, 0x0000000000000000, 0x00010002000100, 0xdfffc0000100fffe, x28, x4, 208, x17)

inst_14:
// rs1==x11, rs2==x9, rd==x26, rs2_h3_val == -4097, rs2_h2_val == 1024, rs1_h3_val == 16, rs1_h0_val == 512
// opcode: kmabt ; op1:x11; op2:x9; dest:x26; op1val:0x103fff3fff0200;  op2val:0xefff0400fffc8000
TEST_PKRR_OP(kmabt, x26, x11, x9, 0x0000000000000000, 0x103fff3fff0200, 0xefff0400fffc8000, x11, x4, 224, x17)

inst_15:
// rs1==x5, rs2==x20, rd==x11, rs2_h3_val == -2049, rs2_h1_val == -1025, rs2_h0_val == -4097, rs1_h2_val == 1024
// opcode: kmabt ; op1:x5; op2:x20; dest:x11; op1val:0xfffa0400ff7ffff8;  op2val:0xf7fffff6fbffefff
TEST_PKRR_OP(kmabt, x11, x5, x20, 0x0000000000000000, 0xfffa0400ff7ffff8, 0xf7fffff6fbffefff, x5, x4, 240, x16)

inst_16:
// rs1==x27, rs2==x31, rd==x3, rs2_h3_val == -1025, rs2_h2_val == -33, rs1_h3_val == -1, rs2_h0_val == -513, rs1_h0_val == -5
// opcode: kmabt ; op1:x27; op2:x31; dest:x3; op1val:0xffff00030006fffb;  op2val:0xfbffffdf0007fdff
TEST_PKRR_OP(kmabt, x3, x27, x31, 0x0000000000000000, 0xffff00030006fffb, 0xfbffffdf0007fdff, x27, x4, 256, x16)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_17:
// rs1==x29, rs2==x15, rd==x24, rs2_h3_val == -513, rs2_h0_val == -3, rs2_h1_val == 16
// opcode: kmabt ; op1:x29; op2:x15; dest:x24; op1val:0xfffa0003fffcfff9;  op2val:0xfdffc0000010fffd
TEST_PKRR_OP(kmabt, x24, x29, x15, 0x0000000000000000, 0xfffa0003fffcfff9, 0xfdffc0000010fffd, x29, x7, 0, x16)

inst_18:
// rs1==x14, rs2==x1, rd==x4, rs2_h3_val == -257, rs1_h3_val == 1024, rs1_h1_val == -257, rs2_h1_val == 32, rs2_h2_val == 128
// opcode: kmabt ; op1:x14; op2:x1; dest:x4; op1val:0x400bffffeff0000;  op2val:0xfeff00800020ffff
TEST_PKRR_OP(kmabt, x4, x14, x1, 0x0000000000000000, 0x400bffffeff0000, 0xfeff00800020ffff, x14, x7, 16, x16)

inst_19:
// rs1==x2, rs2==x27, rd==x30, rs2_h3_val == -65, rs2_h2_val == -17, rs1_h2_val == 8, rs1_h1_val == 16
// opcode: kmabt ; op1:x2; op2:x27; dest:x30; op1val:0xfff600080010fffb;  op2val:0xffbfffefaaaafffc
TEST_PKRR_OP(kmabt, x30, x2, x27, 0x0000000000000000, 0xfff600080010fffb, 0xffbfffefaaaafffc, x2, x7, 32, x16)

inst_20:
// rs1==x9, rs2==x6, rd==x27, rs2_h3_val == -33, rs2_h1_val == -257, rs1_h1_val == 21845, rs1_h0_val == 64
// opcode: kmabt ; op1:x9; op2:x6; dest:x27; op1val:0x09040055550040;  op2val:0xffdfffdffeff0080
TEST_PKRR_OP(kmabt, x27, x9, x6, 0x0000000000000000, 0x09040055550040, 0xffdfffdffeff0080, x9, x7, 48, x16)

inst_21:
// rs1==x0, rs2==x22, rd==x14, rs2_h3_val == -17, rs2_h2_val == -16385, rs2_h1_val == -3, rs2_h0_val == -17, rs1_h2_val == -2
// opcode: kmabt ; op1:x0; op2:x22; dest:x14; op1val:0x20fffec0008000;  op2val:0xffefbffffffdffef
TEST_PKRR_OP(kmabt, x14, x0, x22, 0x0000000000000000, 0x20fffec0008000, 0xffefbffffffdffef, x0, x7, 64, x16)

inst_22:
// rs1==x6, rs2==x4, rd==x0, rs2_h3_val == -5, rs1_h0_val == 16, rs1_h2_val == -21846, rs1_h3_val == 8
// opcode: kmabt ; op1:x6; op2:x4; dest:x0; op1val:0x08aaaa00090010;  op2val:0xfffbc000fffd3fff
TEST_PKRR_OP(kmabt, x0, x6, x4, 0x0000000000000000, 0x08aaaa00090010, 0xfffbc000fffd3fff, x6, x7, 80, x16)

inst_23:
// rs1==x26, rs2==x21, rd==x17, rs2_h3_val == -3, rs1_h3_val == -1025, rs1_h0_val == 4096, rs2_h0_val == 2048, rs1_h1_val == 2048
// opcode: kmabt ; op1:x26; op2:x21; dest:x17; op1val:0xfbffff7f08001000;  op2val:0xfffdefff00100800
TEST_PKRR_OP(kmabt, x17, x26, x21, 0x0000000000000000, 0xfbffff7f08001000, 0xfffdefff00100800, x26, x7, 96, x16)

inst_24:
// rs1==x17, rs2==x0, rd==x10, rs2_h3_val == -32768, rs2_h1_val == -5, rs1_h1_val == -5
// opcode: kmabt ; op1:x17; op2:x0; dest:x10; op1val:0xffefffbffffbffef;  op2val:0x8000ffdffffbfffe
TEST_PKRR_OP(kmabt, x10, x17, x0, 0x0000000000000000, 0xffefffbffffbffef, 0x8000ffdffffbfffe, x17, x7, 112, x16)

inst_25:
// rs1==x1, rs2==x26, rd==x2, rs2_h3_val == 16384, rs2_h1_val == -8193
// opcode: kmabt ; op1:x1; op2:x26; dest:x2; op1val:0x07aaaa00090003;  op2val:0x4000ffffdffffff8
TEST_PKRR_OP(kmabt, x2, x1, x26, 0x0000000000000000, 0x07aaaa00090003, 0x4000ffffdffffff8, x1, x7, 128, x16)

inst_26:
// rs1==x21, rs2==x29, rd==x20, rs2_h3_val == 8192, rs1_h1_val == -3
// opcode: kmabt ; op1:x21; op2:x29; dest:x20; op1val:0xff7f0008fffdfffa;  op2val:0x2000ffdf00047fff
TEST_PKRR_OP(kmabt, x20, x21, x29, 0x0000000000000000, 0xff7f0008fffdfffa, 0x2000ffdf00047fff, x21, x7, 144, x16)

inst_27:
// rs1==x30, rs2==x18, rd==x21, rs2_h3_val == 2048, rs1_h2_val == -4097, rs2_h2_val == 2048, rs1_h1_val == 64
// opcode: kmabt ; op1:x30; op2:x18; dest:x21; op1val:0xfbffefff00402000;  op2val:0x80008000040fffb
TEST_PKRR_OP(kmabt, x21, x30, x18, 0x0000000000000000, 0xfbffefff00402000, 0x80008000040fffb, x30, x7, 160, x16)

inst_28:
// rs1==x8, rs2==x17, rd==x13, rs2_h3_val == 1024, rs1_h0_val == -8193, rs2_h1_val == -4097, rs1_h1_val == 4096
// opcode: kmabt ; op1:x8; op2:x17; dest:x13; op1val:0x0500051000dfff;  op2val:0x400c000efff0005
TEST_PKRR_OP(kmabt, x13, x8, x17, 0x0000000000000000, 0x0500051000dfff, 0x400c000efff0005, x8, x7, 176, x16)

inst_29:
// rs1==x15, rs2==x24, rd==x25, rs2_h3_val == 256, rs1_h1_val == -2, rs1_h2_val == 128, rs2_h0_val == 16384, rs1_h3_val == -3, rs2_h1_val == 128
// opcode: kmabt ; op1:x15; op2:x24; dest:x25; op1val:0xfffd0080fffe0006;  op2val:0x1003fff00804000
TEST_PKRR_OP(kmabt, x25, x15, x24, 0x0000000000000000, 0xfffd0080fffe0006, 0x1003fff00804000, x15, x7, 192, x16)

inst_30:
// rs1==x4, rs2==x3, rd==x8, rs2_h3_val == 64, rs1_h1_val == 1024, rs2_h2_val == -2049, rs1_h3_val == 2048
// opcode: kmabt ; op1:x4; op2:x3; dest:x8; op1val:0x800c0000400ffef;  op2val:0x40f7ff00400080
TEST_PKRR_OP(kmabt, x8, x4, x3, 0x0000000000000000, 0x800c0000400ffef, 0x40f7ff00400080, x4, x7, 208, x16)

inst_31:
// rs1==x12, rs2==x30, rd==x5, rs2_h3_val == 32, rs1_h0_val == 8, rs2_h0_val == 8, rs1_h2_val == -513, rs2_h1_val == 2048
// opcode: kmabt ; op1:x12; op2:x30; dest:x5; op1val:0x05fdfffff80008;  op2val:0x20fbff08000008
TEST_PKRR_OP(kmabt, x5, x12, x30, 0x0000000000000000, 0x05fdfffff80008, 0x20fbff08000008, x12, x7, 224, x16)

inst_32:
// rs2_h3_val == 16, rs1_h0_val == -16385
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x02fbfffff6bfff;  op2val:0x100006fffd4000
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x02fbfffff6bfff, 0x100006fffd4000, x30, x7, 240, x1)

inst_33:
// rs2_h3_val == 4, rs1_h1_val == 8192, rs1_h0_val == -2, rs1_h3_val == -9
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff700052000fffe;  op2val:0x043ffffff60003
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfff700052000fffe, 0x043ffffff60003, x30, x7, 256, x1)

inst_34:
// rs2_h3_val == 2, rs2_h2_val == 16384, rs1_h2_val == -17, rs1_h0_val == -65, rs2_h0_val == 512
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffaffef5555ffbf;  op2val:0x024000efff0200
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfffaffef5555ffbf, 0x024000efff0200, x30, x7, 272, x1)

inst_35:
// rs2_h3_val == 1, rs2_h1_val == 2, rs1_h0_val == -33
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff73fff5555ffdf;  op2val:0x01fff60002aaaa
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfff73fff5555ffdf, 0x01fff60002aaaa, x30, x7, 288, x1)

inst_36:
// rs1_h1_val == 8, rs2_h0_val == -9, rs1_h3_val == -32768
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x80003fff0008aaaa;  op2val:0xfffd00070002fff7
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x80003fff0008aaaa, 0xfffd00070002fff7, x30, x7, 304, x1)

inst_37:
// rs1_h1_val == 4, rs1_h2_val == -9, rs1_h3_val == 64
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x40fff70004ffbf;  op2val:0x20ff7f3ffffbff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x40fff70004ffbf, 0x20ff7f3ffffbff, x30, x7, 320, x1)

inst_38:
// rs1_h1_val == 2, rs2_h2_val == -65, rs1_h2_val == 2, rs2_h0_val == 4096, rs1_h3_val == -33
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000200020040;  op2val:0xfffeffbffffa1000
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xffdf000200020040, 0xfffeffbffffa1000, x30, x7, 336, x1)

inst_39:
// rs1_h1_val == 1, rs1_h3_val == 128, rs1_h0_val == 1
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x803fff00010001;  op2val:0xffdfffdf00200008
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x803fff00010001, 0xffdfffdf00200008, x30, x7, 352, x1)

inst_40:
// rs1_h1_val == 0, rs1_h3_val == 512, rs2_h1_val == 16384, rs2_h2_val == -2, rs1_h2_val == -32768
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x20080000000f7ff;  op2val:0xdffffffe4000fdff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x20080000000f7ff, 0xdffffffe4000fdff, x30, x7, 368, x1)

inst_41:
// rs1_h1_val == -1, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x200fffcffff0001;  op2val:0xfffd7fff0010fffb
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x200fffcffff0001, 0xfffd7fff0010fffb, x30, x7, 384, x1)

inst_42:
// rs1_h0_val == 21845, rs2_h1_val == 0, rs2_h0_val == -129
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x05004010005555;  op2val:0x2000ffef0000ff7f
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x05004010005555, 0x2000ffef0000ff7f, x30, x7, 400, x1)

inst_43:
// rs1_h0_val == 32767, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x800ff7ffffe7fff;  op2val:0xfdff0040fffbfdff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x800ff7ffffe7fff, 0xfdff0040fffbfdff, x30, x7, 416, x1)

inst_44:
// rs1_h0_val == -4097, rs1_h2_val == -33, rs1_h3_val == 21845, rs2_h1_val == 32767, rs2_h2_val == -257
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffdffffcefff;  op2val:0xc000feff7ffffdff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x5555ffdffffcefff, 0xc000feff7ffffdff, x30, x7, 432, x1)

inst_45:
// rs1_h0_val == -1025, rs1_h3_val == -65, rs1_h1_val == -8193
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0009dffffbff;  op2val:0x7fff0002fefffff9
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xffbf0009dffffbff, 0x7fff0002fefffff9, x30, x7, 448, x1)

inst_46:
// rs1_h0_val == -513, rs2_h1_val == -2, rs1_h2_val == -257
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffeff0080fdff;  op2val:0xfffb0009fffefffd
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x3ffffeff0080fdff, 0xfffb0009fffefffd, x30, x7, 464, x1)

inst_47:
// rs1_h0_val == -257, rs1_h3_val == -5, rs2_h2_val == -513
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfff8fff9feff;  op2val:0x200fdfffff90200
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfffbfff8fff9feff, 0x200fdfffff90200, x30, x7, 480, x1)

inst_48:
// rs1_h0_val == -129, rs2_h0_val == 8192, rs1_h3_val == 1, rs2_h2_val == -3
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x01ffff0020ff7f;  op2val:0x02fffd08002000
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x01ffff0020ff7f, 0x02fffd08002000, x30, x7, 496, x1)

inst_49:
// rs1_h0_val == -3, rs2_h0_val == -16385, rs1_h2_val == 16384, rs2_h1_val == -16385
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff64000fefffffd;  op2val:0xfff90009bfffbfff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfff64000fefffffd, 0xfff90009bfffbfff, x30, x7, 512, x1)

inst_50:
// rs1_h0_val == 16384, rs2_h2_val == 4096, rs1_h2_val == 32767, rs1_h3_val == -2049
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff7fff00204000;  op2val:0x801000ff7f0005
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xf7ff7fff00204000, 0x801000ff7f0005, x30, x7, 528, x1)

inst_51:
// rs1_h0_val == 2048, rs1_h1_val == -513
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0080fdff0800;  op2val:0x20000001efff0006
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xffbf0080fdff0800, 0x20000001efff0006, x30, x7, 544, x1)

inst_52:
// rs1_h0_val == 1024, rs2_h0_val == 64, rs1_h3_val == -257
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfeff010055550400;  op2val:0xfffa004000070040
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfeff010055550400, 0xfffa004000070040, x30, x7, 560, x1)

inst_53:
// rs1_h0_val == 128, rs2_h2_val == 8192, rs2_h1_val == 8192
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x07fff600090080;  op2val:0x200020002000fff7
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x07fff600090080, 0x200020002000fff7, x30, x7, 576, x1)

inst_54:
// rs1_h0_val == 32, rs2_h0_val == -65, rs2_h1_val == -1
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x05400010000020;  op2val:0x10000003ffffffbf
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x05400010000020, 0x10000003ffffffbf, x30, x7, 592, x1)

inst_55:
// rs1_h0_val == 2, rs2_h1_val == -65, rs1_h2_val == 1
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x40000100070002;  op2val:0xdfffefffffbfc000
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x40000100070002, 0xdfffefffffbfc000, x30, x7, 608, x1)

inst_56:
// rs2_h1_val == 1, rs2_h2_val == -8193, rs1_h2_val == -2049
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x02f7fffbff0001;  op2val:0xfbffdfff00014000
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x02f7fffbff0001, 0xfbffdfff00014000, x30, x7, 624, x1)

inst_57:
// rs2_h0_val == 21845, rs1_h2_val == -8193, rs2_h3_val == -1, rs2_h2_val == 256
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff6dfffdffffffa;  op2val:0xffff0100efff5555
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfff6dfffdffffffa, 0xffff0100efff5555, x30, x7, 640, x1)

inst_58:
// rs1_h1_val == -9, rs2_h2_val == 8
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff6effffff70009;  op2val:0xfffd000800404000
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfff6effffff70009, 0xfffd000800404000, x30, x7, 656, x1)

inst_59:
// rs2_h0_val == -8193, rs1_h1_val == -21846, rs2_h1_val == -33
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff7c000aaaa4000;  op2val:0xc000efffffdfdfff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfff7c000aaaa4000, 0xc000efffffdfdfff, x30, x7, 672, x1)

inst_60:
// rs2_h0_val == -257, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffafdfffff98000;  op2val:0x40ff7ffffcfeff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfffafdfffff98000, 0x40ff7ffffcfeff, x30, x7, 688, x1)

inst_61:
// rs2_h0_val == -33, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x1000200fff60007;  op2val:0x7ffffffefff6ffdf
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x1000200fff60007, 0x7ffffffefff6ffdf, x30, x7, 704, x1)

inst_62:
// rs2_h0_val == 1024, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff7400000000400;  op2val:0x4000fffcff7f0400
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfff7400000000400, 0x4000fffcff7f0400, x30, x7, 720, x1)

inst_63:
// rs2_h0_val == 256, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x04fffa00080800;  op2val:0xfff8dffffff60100
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x04fffa00080800, 0xfff8dffffff60100, x30, x7, 736, x1)

inst_64:
// rs2_h0_val == 32, rs2_h1_val == -17
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x00effffff60006;  op2val:0xfff8c000ffef0020
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x00effffff60006, 0xfff8c000ffef0020, x30, x7, 752, x1)

inst_65:
// rs2_h0_val == 16, rs1_h2_val == -5
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffb0100ffdf;  op2val:0x40f7ff10000010
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xffbffffb0100ffdf, 0x40f7ff10000010, x30, x7, 768, x1)

inst_66:
// rs2_h0_val == 4, rs2_h1_val == -9, rs2_h2_val == 0
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfbff4000ff7f0009;  op2val:0xfbff0000fff70004
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfbff4000ff7f0009, 0xfbff0000fff70004, x30, x7, 784, x1)

inst_67:
// rs2_h0_val == 2, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0001fffa0004;  op2val:0x061000fff60002
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xffbf0001fffa0004, 0x061000fff60002, x30, x7, 800, x1)

inst_68:
// rs2_h0_val == 1, rs2_h2_val == 21845
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xc000000900400005;  op2val:0x4000555500800001
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xc000000900400005, 0x4000555500800001, x30, x7, 816, x1)

inst_69:
// rs1_h3_val == -21846, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0005ffdffff7;  op2val:0xff7fff7f00090008
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xaaaa0005ffdffff7, 0xff7fff7f00090008, x30, x7, 832, x1)

inst_70:
// rs1_h3_val == 32767, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffbfffff0001;  op2val:0xfffbfefffffc0004
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x7fffffbfffff0001, 0xfffbfefffffc0004, x30, x7, 848, x1)

inst_71:
// rs1_h3_val == -8193, rs2_h2_val == 16, rs1_h1_val == -2049
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0005f7ff0008;  op2val:0xfbff001000060040
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xdfff0005f7ff0008, 0xfbff001000060040, x30, x7, 864, x1)

inst_72:
// rs2_h2_val == -9, rs1_h2_val == 4096
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffff100000200080;  op2val:0xff7ffff70005fdff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xffff100000200080, 0xff7ffff70005fdff, x30, x7, 880, x1)

inst_73:
// rs2_h2_val == -5, rs2_h1_val == 8
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x40ffff00030200;  op2val:0x07fffb0008bfff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x40ffff00030200, 0x07fffb0008bfff, x30, x7, 896, x1)

inst_74:
// rs1_h2_val == 21845, rs2_h2_val == 32, rs1_h3_val == 4096
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x1000555500070100;  op2val:0x10000020fffaffdf
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x1000555500070100, 0x10000020fffaffdf, x30, x7, 912, x1)

inst_75:
// rs2_h2_val == -32768, rs2_h1_val == 1024
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x200ffffdfff0020;  op2val:0x0380000400efff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x200ffffdfff0020, 0x0380000400efff, x30, x7, 928, x1)

inst_76:
// rs2_h2_val == 4, rs1_h2_val == 0
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x20000000800006;  op2val:0xffef0004ffbfff7f
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x20000000800006, 0xffef0004ffbfff7f, x30, x7, 944, x1)

inst_77:
// rs1_h2_val == -3, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffdfffd8000;  op2val:0x7ffffeff0040fff8
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfff6fffdfffd8000, 0x7ffffeff0040fff8, x30, x7, 960, x1)

inst_78:
// rs1_h2_val == 8192, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfbff200000040400;  op2val:0x048000effffbff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfbff200000040400, 0x048000effffbff, x30, x7, 976, x1)

inst_79:
// rs2_h1_val == 21845, rs1_h3_val == -4097
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xefff00030009fffc;  op2val:0xffbf00065555ffff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xefff00030009fffc, 0xffbf00065555ffff, x30, x7, 992, x1)

inst_80:
// rs1_h2_val == 2048, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xefff080000060400;  op2val:0x8000fffaff7ffffb
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xefff080000060400, 0x8000fffaff7ffffb, x30, x7, 1008, x1)

inst_81:
// rs2_h1_val == -2049, rs1_h1_val == -16385, rs2_h2_val == -21846
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0005bfff5555;  op2val:0xc000aaaaf7ffbfff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xf7ff0005bfff5555, 0xc000aaaaf7ffbfff, x30, x7, 1024, x1)

inst_82:
// rs1_h2_val == 32, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffd002000800005;  op2val:0x40ffbf0100feff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfffd002000800005, 0x40ffbf0100feff, x30, x7, 1040, x1)

inst_83:
// rs1_h2_val == 16, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xff7f00103fff0040;  op2val:0xfff6efff0080f7ff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xff7f00103fff0040, 0xfff6efff0080f7ff, x30, x7, 1056, x1)

inst_84:
// rs1_h2_val == 4, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff8000400060002;  op2val:0x090002feff3fff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfff8000400060002, 0x090002feff3fff, x30, x7, 1072, x1)

inst_85:
// rs1_h3_val == -513, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffff60006fffd;  op2val:0x2000fbfffff9fbff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfdfffff60006fffd, 0x2000fbfffff9fbff, x30, x7, 1088, x1)

inst_86:
// rs1_h1_val == -4097, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff7efff0004;  op2val:0xefff400040003fff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xdffffff7efff0004, 0xefff400040003fff, x30, x7, 1104, x1)

inst_87:
// rs2_h1_val == 512, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafff60080;  op2val:0x013fff0200fffe
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfffffffafff60080, 0x013fff0200fffe, x30, x7, 1120, x1)

inst_88:
// rs1_h3_val == -2, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0009dfff7fff;  op2val:0xfffe0002fffd0080
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xfffe0009dfff7fff, 0xfffe0002fffd0080, x30, x7, 1136, x1)

inst_89:
// rs1_h1_val == -65, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x40003fffffbfffff;  op2val:0x061000fffa8000
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x40003fffffbfffff, 0x061000fffa8000, x30, x7, 1152, x1)

inst_90:
// rs1_h3_val == 8192, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffdffffa0020;  op2val:0xfffffffdff7faaaa
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x2000ffdffffa0020, 0xfffffffdff7faaaa, x30, x7, 1168, x1)

inst_91:
// rs1_h1_val == -17, 
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffbff7ffffefffdf;  op2val:0xf7ffc0003fff0004
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xffbff7ffffefffdf, 0xf7ffc0003fff0004, x30, x7, 1184, x1)

inst_92:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h1_val == -1025, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == -5, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h3_val == -17, rs2_h3_val == 8, rs2_h2_val == 64, rs1_h2_val == -1025
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffeffbfffbff0009;  op2val:0x080040c000fffb
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xffeffbfffbff0009, 0x080040c000fffb, x30, x7, 1200, x1)

inst_93:
// rs2_h3_val == -17, rs2_h2_val == -16385, rs2_h1_val == -3, rs2_h0_val == -17, rs1_h2_val == -2
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x20fffec0008000;  op2val:0xffefbffffffdffef
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x20fffec0008000, 0xffefbffffffdffef, x30, x7, 1216, x1)

inst_94:
// rs2_h3_val == -5, rs1_h0_val == 16, rs1_h2_val == -21846, rs1_h3_val == 8
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0x08aaaa00090010;  op2val:0xfffbc000fffd3fff
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0x08aaaa00090010, 0xfffbc000fffd3fff, x30, x7, 1232, x1)

inst_95:
// rs2_h3_val == -32768, rs2_h1_val == -5, rs1_h1_val == -5
// opcode: kmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffefffbffffbffef;  op2val:0x8000ffdffffbfffe
TEST_PKRR_OP(kmabt, x31, x30, x29, 0x0000000000000000, 0xffefffbffffbffef, 0x8000ffdffffbfffe, x30, x7, 1248, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 158*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
