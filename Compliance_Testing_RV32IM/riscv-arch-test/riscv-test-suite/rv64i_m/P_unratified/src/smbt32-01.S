
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smbt32 instruction of the RISC-V RV64PZicsr extension for the smbt32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smbt32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x15, rs2==x13, rd==x15, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w1_val == -4097, rs2_w1_val == -3
// opcode: smbt32 ; op1:x15; op2:x13; dest:x15; op1val:0xffffefff80000000;  op2val:0xfffffffdc0000000
TEST_RR_OP(smbt32, x15, x15, x13, 0x0000000000000000, 0xffffefff80000000, 0xfffffffdc0000000, x2, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x10, rs2==x14, rd==x31, rs1_w1_val == rs2_w1_val, rs1_w0_val == 1048576, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w1_val == -8388609, rs2_w0_val == -134217729, rs1_w1_val == -8388609
// opcode: smbt32 ; op1:x10; op2:x14; dest:x31; op1val:0xff7fffff00100000;  op2val:0xff7ffffff7ffffff
TEST_RR_OP(smbt32, x31, x10, x14, 0x0000000000000000, 0xff7fffff00100000, 0xff7ffffff7ffffff, x2, 8, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x17, rs2==x17, rd==x6, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w0_val == -513, rs1_w0_val == -1073741825
// opcode: smbt32 ; op1:x17; op2:x17; dest:x6; op1val:0xc0000000bfffffff;  op2val:0x000007fffffdff
TEST_RR_OP(smbt32, x6, x17, x17, 0x0000000000000000, 0xc0000000bfffffff, 0x000007fffffdff, x2, 16, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x27, rs2==x27, rd==x27, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val == -1048577, rs2_w0_val == 4096, rs2_w1_val == -33
// opcode: smbt32 ; op1:x27; op2:x27; dest:x27; op1val:0x000009ffefffff;  op2val:0xffffffdf00001000
TEST_RR_OP(smbt32, x27, x27, x27, 0x0000000000000000, 0x000009ffefffff, 0xffffffdf00001000, x2, 24, x3)

inst_4:
// rs2 == rd != rs1, rs1==x11, rs2==x18, rd==x18, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val == -8193
// opcode: smbt32 ; op1:x11; op2:x18; dest:x18; op1val:0x000006ffffdfff;  op2val:0x00000700001000
TEST_RR_OP(smbt32, x18, x11, x18, 0x0000000000000000, 0x000006ffffdfff, 0x00000700001000, x2, 32, x3)

inst_5:
// rs1==x18, rs2==x12, rd==x30, rs1_w0_val == rs2_w0_val, rs1_w0_val == 128, rs2_w0_val == 128, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == -2049
// opcode: smbt32 ; op1:x18; op2:x12; dest:x30; op1val:0xfffff7ff00000080;  op2val:0xfffffff600000080
TEST_RR_OP(smbt32, x30, x18, x12, 0x0000000000000000, 0xfffff7ff00000080, 0xfffffff600000080, x2, 40, x3)

inst_6:
// rs1==x21, rs2==x8, rd==x5, rs2_w1_val == -1431655766, rs2_w0_val == 262144, rs1_w0_val == 536870912, rs1_w1_val == -1073741825
// opcode: smbt32 ; op1:x21; op2:x8; dest:x5; op1val:0xbfffffff20000000;  op2val:0xaaaaaaaa00040000
TEST_RR_OP(smbt32, x5, x21, x8, 0x0000000000000000, 0xbfffffff20000000, 0xaaaaaaaa00040000, x2, 48, x3)

inst_7:
// rs1==x23, rs2==x11, rd==x13, rs2_w1_val == 1431655765, rs1_w1_val == -8193
// opcode: smbt32 ; op1:x23; op2:x11; dest:x13; op1val:0xffffdfffc0000000;  op2val:0x55555555fffffdff
TEST_RR_OP(smbt32, x13, x23, x11, 0x0000000000000000, 0xffffdfffc0000000, 0x55555555fffffdff, x2, 56, x3)

inst_8:
// rs1==x13, rs2==x28, rd==x1, rs2_w1_val == 2147483647, 
// opcode: smbt32 ; op1:x13; op2:x28; dest:x1; op1val:0xc0000000bfffffff;  op2val:0x7fffffff00040000
TEST_RR_OP(smbt32, x1, x13, x28, 0x0000000000000000, 0xc0000000bfffffff, 0x7fffffff00040000, x2, 64, x3)

inst_9:
// rs1==x30, rs2==x29, rd==x11, rs2_w1_val == -1073741825, rs1_w0_val == 33554432, rs2_w0_val == 65536, rs1_w1_val == 8
// opcode: smbt32 ; op1:x30; op2:x29; dest:x11; op1val:0x00000802000000;  op2val:0xbfffffff00010000
TEST_RR_OP(smbt32, x11, x30, x29, 0x0000000000000000, 0x00000802000000, 0xbfffffff00010000, x2, 72, x3)

inst_10:
// rs1==x28, rs2==x9, rd==x21, rs2_w1_val == -536870913, rs1_w0_val == -16777217, rs1_w1_val == -268435457, rs2_w0_val == -32769
// opcode: smbt32 ; op1:x28; op2:x9; dest:x21; op1val:0xeffffffffeffffff;  op2val:0xdfffffffffff7fff
TEST_RR_OP(smbt32, x21, x28, x9, 0x0000000000000000, 0xeffffffffeffffff, 0xdfffffffffff7fff, x2, 80, x3)

inst_11:
// rs1==x9, rs2==x6, rd==x23, rs2_w1_val == -268435457, rs2_w0_val == -2147483648
// opcode: smbt32 ; op1:x9; op2:x6; dest:x23; op1val:0x00000900000080;  op2val:0xefffffff80000000
TEST_RR_OP(smbt32, x23, x9, x6, 0x0000000000000000, 0x00000900000080, 0xefffffff80000000, x2, 88, x3)

inst_12:
// rs1==x12, rs2==x26, rd==x19, rs2_w1_val == -134217729, rs1_w1_val == 512, rs1_w0_val == 67108864
// opcode: smbt32 ; op1:x12; op2:x26; dest:x19; op1val:0x00020004000000;  op2val:0xf7ffffff00010000
TEST_RR_OP(smbt32, x19, x12, x26, 0x0000000000000000, 0x00020004000000, 0xf7ffffff00010000, x2, 96, x3)

inst_13:
// rs1==x8, rs2==x5, rd==x25, rs2_w1_val == -67108865, rs2_w0_val == 0, rs1_w1_val == -5
// opcode: smbt32 ; op1:x8; op2:x5; dest:x25; op1val:0xfffffffb80000000;  op2val:0xfbffffff00000000
TEST_RR_OP(smbt32, x25, x8, x5, 0x0000000000000000, 0xfffffffb80000000, 0xfbffffff00000000, x2, 104, x3)

inst_14:
// rs1==x5, rs2==x31, rd==x7, rs2_w1_val == -33554433, rs1_w1_val == 1048576, rs1_w0_val == -17
// opcode: smbt32 ; op1:x5; op2:x31; dest:x7; op1val:0x100000ffffffef;  op2val:0xfdfffffffffffffa
TEST_RR_OP(smbt32, x7, x5, x31, 0x0000000000000000, 0x100000ffffffef, 0xfdfffffffffffffa, x2, 112, x3)

inst_15:
// rs1==x24, rs2==x21, rd==x17, rs2_w1_val == -16777217, rs1_w0_val == -268435457, rs2_w0_val == 2048
// opcode: smbt32 ; op1:x24; op2:x21; dest:x17; op1val:0xffffdfffefffffff;  op2val:0xfeffffff00000800
TEST_RR_OP(smbt32, x17, x24, x21, 0x0000000000000000, 0xffffdfffefffffff, 0xfeffffff00000800, x2, 120, x3)

inst_16:
// rs1==x22, rs2==x10, rd==x16, rs2_w1_val == -4194305, rs2_w0_val == -131073, rs1_w0_val == -524289
// opcode: smbt32 ; op1:x22; op2:x10; dest:x16; op1val:0x3ffffffffff7ffff;  op2val:0xffbffffffffdffff
TEST_RR_OP(smbt32, x16, x22, x10, 0x0000000000000000, 0x3ffffffffff7ffff, 0xffbffffffffdffff, x2, 128, x3)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_17:
// rs1==x14, rs2==x2, rd==x22, rs2_w1_val == -2097153, rs1_w1_val == 4, rs1_w0_val == -16385, rs2_w0_val == -4097
// opcode: smbt32 ; op1:x14; op2:x2; dest:x22; op1val:0x000004ffffbfff;  op2val:0xffdfffffffffefff
TEST_RR_OP(smbt32, x22, x14, x2, 0x0000000000000000, 0x000004ffffbfff, 0xffdfffffffffefff, x5, 0, x11)

inst_18:
// rs1==x16, rs2==x25, rd==x28, rs2_w1_val == -1048577, rs2_w0_val == -129, rs1_w1_val == 134217728
// opcode: smbt32 ; op1:x16; op2:x25; dest:x28; op1val:0x800000000000003;  op2val:0xffefffffffffff7f
TEST_RR_OP(smbt32, x28, x16, x25, 0x0000000000000000, 0x800000000000003, 0xffefffffffffff7f, x5, 8, x11)

inst_19:
// rs1==x26, rs2==x7, rd==x20, rs2_w1_val == -524289, rs1_w1_val == 8192, rs1_w0_val == -33554433, rs2_w0_val == -268435457
// opcode: smbt32 ; op1:x26; op2:x7; dest:x20; op1val:0x002000fdffffff;  op2val:0xfff7ffffefffffff
TEST_RR_OP(smbt32, x20, x26, x7, 0x0000000000000000, 0x002000fdffffff, 0xfff7ffffefffffff, x5, 16, x11)

inst_20:
// rs1==x25, rs2==x4, rd==x3, rs2_w1_val == -262145, rs1_w1_val == -257
// opcode: smbt32 ; op1:x25; op2:x4; dest:x3; op1val:0xfffffefffff7ffff;  op2val:0xfffbffffefffffff
TEST_RR_OP(smbt32, x3, x25, x4, 0x0000000000000000, 0xfffffefffff7ffff, 0xfffbffffefffffff, x5, 24, x11)

inst_21:
// rs1==x6, rs2==x16, rd==x14, rs2_w1_val == -131073, rs1_w1_val == 16, rs2_w0_val == 2147483647, rs1_w0_val == 268435456
// opcode: smbt32 ; op1:x6; op2:x16; dest:x14; op1val:0x00001010000000;  op2val:0xfffdffff7fffffff
TEST_RR_OP(smbt32, x14, x6, x16, 0x0000000000000000, 0x00001010000000, 0xfffdffff7fffffff, x5, 32, x11)

inst_22:
// rs1==x2, rs2==x22, rd==x24, rs2_w1_val == -65537, rs2_w0_val == 2097152, rs1_w1_val == -2
// opcode: smbt32 ; op1:x2; op2:x22; dest:x24; op1val:0xfffffffefffffffa;  op2val:0xfffeffff00200000
TEST_RR_OP(smbt32, x24, x2, x22, 0x0000000000000000, 0xfffffffefffffffa, 0xfffeffff00200000, x5, 40, x11)

inst_23:
// rs1==x0, rs2==x20, rd==x8, rs2_w1_val == -32769, rs1_w0_val == 4194304
// opcode: smbt32 ; op1:x0; op2:x20; dest:x8; op1val:0x00001000400000;  op2val:0xffff7fffffffefff
TEST_RR_OP(smbt32, x8, x0, x20, 0x0000000000000000, 0x00001000400000, 0xffff7fffffffefff, x5, 48, x11)

inst_24:
// rs1==x7, rs2==x0, rd==x29, rs2_w1_val == -16385, rs2_w0_val == 67108864, rs1_w1_val == 33554432
// opcode: smbt32 ; op1:x7; op2:x0; dest:x29; op1val:0x2000000fffffffa;  op2val:0xffffbfff04000000
TEST_RR_OP(smbt32, x29, x7, x0, 0x0000000000000000, 0x2000000fffffffa, 0xffffbfff04000000, x5, 56, x11)

inst_25:
// rs1==x29, rs2==x3, rd==x12, rs2_w1_val == -8193, rs1_w0_val == 65536, rs2_w0_val == -2049
// opcode: smbt32 ; op1:x29; op2:x3; dest:x12; op1val:0x00000700010000;  op2val:0xffffdffffffff7ff
TEST_RR_OP(smbt32, x12, x29, x3, 0x0000000000000000, 0x00000700010000, 0xffffdffffffff7ff, x5, 64, x11)

inst_26:
// rs1==x4, rs2==x19, rd==x2, rs2_w1_val == -4097, rs1_w0_val == 1073741824, rs1_w1_val == 16777216
// opcode: smbt32 ; op1:x4; op2:x19; dest:x2; op1val:0x100000040000000;  op2val:0xffffefff00000009
TEST_RR_OP(smbt32, x2, x4, x19, 0x0000000000000000, 0x100000040000000, 0xffffefff00000009, x5, 72, x11)

inst_27:
// rs1==x3, rs2==x23, rd==x10, rs2_w1_val == -2049, rs2_w0_val == -33
// opcode: smbt32 ; op1:x3; op2:x23; dest:x10; op1val:0x00000800000005;  op2val:0xfffff7ffffffffdf
TEST_RR_OP(smbt32, x10, x3, x23, 0x0000000000000000, 0x00000800000005, 0xfffff7ffffffffdf, x5, 80, x11)

inst_28:
// rs1==x19, rs2==x1, rd==x0, rs2_w1_val == -1025, rs2_w0_val == 134217728
// opcode: smbt32 ; op1:x19; op2:x1; dest:x0; op1val:0xc0000000ffefffff;  op2val:0xfffffbff08000000
TEST_RR_OP(smbt32, x0, x19, x1, 0x0000000000000000, 0xc0000000ffefffff, 0xfffffbff08000000, x5, 88, x11)

inst_29:
// rs1==x1, rs2==x24, rd==x9, rs2_w1_val == -513, rs1_w0_val == 512, rs1_w1_val == 1
// opcode: smbt32 ; op1:x1; op2:x24; dest:x9; op1val:0x00000100000200;  op2val:0xfffffdff00000003
TEST_RR_OP(smbt32, x9, x1, x24, 0x0000000000000000, 0x00000100000200, 0xfffffdff00000003, x5, 96, x11)

inst_30:
// rs1==x31, rs2==x30, rd==x4, rs2_w1_val == -257, rs1_w1_val == 65536
// opcode: smbt32 ; op1:x31; op2:x30; dest:x4; op1val:0x01000000000007;  op2val:0xfffffeff00000007
TEST_RR_OP(smbt32, x4, x31, x30, 0x0000000000000000, 0x01000000000007, 0xfffffeff00000007, x5, 104, x11)

inst_31:
// rs1==x20, rs2==x15, rd==x26, rs2_w1_val == -129, rs1_w0_val == 2147483647, rs1_w1_val == 2147483647
// opcode: smbt32 ; op1:x20; op2:x15; dest:x26; op1val:0x7fffffff7fffffff;  op2val:0xffffff7f00200000
TEST_RR_OP(smbt32, x26, x20, x15, 0x0000000000000000, 0x7fffffff7fffffff, 0xffffff7f00200000, x5, 112, x11)

inst_32:
// rs2_w1_val == -65, rs1_w1_val == -16385, rs1_w0_val == -2
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffffe;  op2val:0xffffffbffffffff6
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffffe, 0xffffffbffffffff6, x5, 120, x11)

inst_33:
// rs2_w1_val == -17, rs2_w0_val == -1025
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffefffffff;  op2val:0xffffffeffffffbff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xefffffffefffffff, 0xffffffeffffffbff, x5, 128, x11)

inst_34:
// rs2_w1_val == -9, rs1_w0_val == 2097152, rs2_w0_val == 32, rs1_w1_val == -129
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00200000;  op2val:0xfffffff700000020
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00200000, 0xfffffff700000020, x5, 136, x11)

inst_35:
// rs2_w1_val == -5, rs1_w1_val == -2097153
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffffdfff;  op2val:0xfffffffb00000020
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xffdfffffffffdfff, 0xfffffffb00000020, x5, 144, x11)

inst_36:
// rs2_w1_val == -2, rs2_w0_val == -2
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000400000;  op2val:0xfffffffefffffffe
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x800000000400000, 0xfffffffefffffffe, x5, 152, x11)

inst_37:
// rs2_w1_val == -2147483648, rs2_w0_val == -262145, rs1_w1_val == 268435456, rs1_w0_val == -65
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000ffffffbf;  op2val:0x80000000fffbffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x10000000ffffffbf, 0x80000000fffbffff, x5, 160, x11)

inst_38:
// rs2_w1_val == 1073741824, rs2_w0_val == -1073741825
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005ffffffbf;  op2val:0x40000000bfffffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x000005ffffffbf, 0x40000000bfffffff, x5, 168, x11)

inst_39:
// rs2_w1_val == 536870912, rs1_w1_val == -536870913
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff3fffffff;  op2val:0x2000000000040000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xdfffffff3fffffff, 0x2000000000040000, x5, 176, x11)

inst_40:
// rs2_w1_val == 268435456, rs1_w0_val == -1025, rs2_w0_val == -536870913
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004fffffbff;  op2val:0x10000000dfffffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x000004fffffbff, 0x10000000dfffffff, x5, 184, x11)

inst_41:
// rs2_w1_val == 134217728, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff3fffffff;  op2val:0x800000000000003
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xff7fffff3fffffff, 0x800000000000003, x5, 192, x11)

inst_42:
// rs2_w1_val == 67108864, rs1_w0_val == -8388609, rs2_w0_val == -16385, rs1_w1_val == 256
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100ff7fffff;  op2val:0x4000000ffffbfff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x000100ff7fffff, 0x4000000ffffbfff, x5, 200, x11)

inst_43:
// rs2_w1_val == 33554432, rs2_w0_val == -67108865, rs1_w1_val == 2048
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000200000;  op2val:0x2000000fbffffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x00080000200000, 0x2000000fbffffff, x5, 208, x11)

inst_44:
// rs2_w1_val == 16777216, rs1_w1_val == 4194304, rs1_w0_val == 0
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000000;  op2val:0x100000004000000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x40000000000000, 0x100000004000000, x5, 216, x11)

inst_45:
// rs2_w1_val == 8388608, rs2_w0_val == -2097153, rs1_w1_val == -2147483648
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fff7ffff;  op2val:0x800000ffdfffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x80000000fff7ffff, 0x800000ffdfffff, x5, 224, x11)

inst_46:
// rs2_w1_val == 4194304, rs2_w0_val == 1048576, rs1_w0_val == 1024
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000400;  op2val:0x40000000100000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xefffffff00000400, 0x40000000100000, x5, 232, x11)

inst_47:
// rs2_w1_val == 2097152, rs1_w0_val == -5, rs2_w0_val == -16777217, rs1_w1_val == 1024
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffffffb;  op2val:0x200000feffffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x000400fffffffb, 0x200000feffffff, x5, 240, x11)

inst_48:
// rs2_w1_val == 1048576, rs2_w0_val == -5
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020004000000;  op2val:0x100000fffffffb
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x00020004000000, 0x100000fffffffb, x5, 248, x11)

inst_49:
// rs2_w1_val == 524288, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005fffffbff;  op2val:0x08000000000080
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x000005fffffbff, 0x08000000000080, x5, 256, x11)

inst_50:
// rs2_w1_val == 262144, rs1_w1_val == 16384, rs2_w0_val == 8388608, rs1_w0_val == -536870913
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000dfffffff;  op2val:0x04000000800000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x004000dfffffff, 0x04000000800000, x5, 264, x11)

inst_51:
// rs2_w1_val == 131072, rs1_w0_val == -513, rs1_w1_val == -16777217
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffdff;  op2val:0x02000000000009
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfefffffffffffdff, 0x02000000000009, x5, 272, x11)

inst_52:
// rs2_w1_val == 65536, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000400;  op2val:0x010000fffffffb
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000400, 0x010000fffffffb, x5, 280, x11)

inst_53:
// rs1_w0_val == 16777216, rs2_w1_val == 2, rs1_w1_val == 1431655765
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555501000000;  op2val:0x000002fffffffc
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x5555555501000000, 0x000002fffffffc, x5, 288, x11)

inst_54:
// rs1_w0_val == 8388608, rs2_w0_val == 33554432
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000800000;  op2val:0xfff7ffff02000000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x00040000800000, 0xfff7ffff02000000, x5, 296, x11)

inst_55:
// rs1_w0_val == 524288, rs2_w0_val == -1048577, rs2_w1_val == 256
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000080000;  op2val:0x000100ffefffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x200000000080000, 0x000100ffefffff, x5, 304, x11)

inst_56:
// rs1_w0_val == 262144, rs2_w0_val == -8388609
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900040000;  op2val:0x20000000ff7fffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfffffff900040000, 0x20000000ff7fffff, x5, 312, x11)

inst_57:
// rs1_w0_val == 131072, rs2_w0_val == -3, rs1_w1_val == -33
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00020000;  op2val:0xffffbffffffffffd
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00020000, 0xffffbffffffffffd, x5, 320, x11)

inst_58:
// rs1_w0_val == 32768, rs1_w1_val == 4096
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000008000;  op2val:0xfffffeff00001000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x00100000008000, 0xfffffeff00001000, x5, 328, x11)

inst_59:
// rs1_w0_val == 16384, rs2_w0_val == -257, rs1_w1_val == 32768
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000004000;  op2val:0x10000000fffffeff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x00800000004000, 0x10000000fffffeff, x5, 336, x11)

inst_60:
// rs1_w0_val == 8192, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000002000;  op2val:0x40000000010000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x00080000002000, 0x40000000010000, x5, 344, x11)

inst_61:
// rs1_w0_val == 4096, rs2_w0_val == 524288
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000001000;  op2val:0x00000700080000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x00080000001000, 0x00000700080000, x5, 352, x11)

inst_62:
// rs1_w0_val == 2048, rs2_w0_val == 64
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000800;  op2val:0x08000000000040
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xffffefff00000800, 0x08000000000040, x5, 360, x11)

inst_63:
// rs1_w0_val == 256, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000100;  op2val:0x00000200000040
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x1000000000000100, 0x00000200000040, x5, 368, x11)

inst_64:
// rs1_w0_val == 64, rs1_w1_val == -1025, rs2_w0_val == 16
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000040;  op2val:0xffbfffff00000010
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000040, 0xffbfffff00000010, x5, 376, x11)

inst_65:
// rs1_w0_val == 32, rs1_w1_val == 524288
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000020;  op2val:0xfffffbfffffffff9
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x08000000000020, 0xfffffbfffffffff9, x5, 384, x11)

inst_66:
// rs1_w0_val == 16, rs2_w1_val == 512
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000010;  op2val:0x000200ffff7fff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000010, 0x000200ffff7fff, x5, 392, x11)

inst_67:
// rs1_w0_val == 8, rs1_w1_val == -1431655766, rs2_w0_val == 268435456
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000008;  op2val:0xfffffdff10000000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000008, 0xfffffdff10000000, x5, 400, x11)

inst_68:
// rs1_w0_val == 4, rs2_w1_val == 32768
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000004;  op2val:0x00800000000005
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xffffefff00000004, 0x00800000000005, x5, 408, x11)

inst_69:
// rs1_w0_val == 2, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000002;  op2val:0xfffffff700000000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x00800000000002, 0xfffffff700000000, x5, 416, x11)

inst_70:
// rs1_w0_val == 1, rs2_w0_val == 4
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000001;  op2val:0xfffffffd00000004
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xc000000000000001, 0xfffffffd00000004, x5, 424, x11)

inst_71:
// rs1_w0_val == -1, rs1_w1_val == 131072
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000ffffffff;  op2val:0xaaaaaaaa00000003
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x020000ffffffff, 0xaaaaaaaa00000003, x5, 432, x11)

inst_72:
// rs2_w1_val == 16384, rs1_w1_val == 64
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000080;  op2val:0x004000fffffff6
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x00004000000080, 0x004000fffffff6, x5, 440, x11)

inst_73:
// rs2_w1_val == 8192, rs2_w0_val == -4194305
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000007;  op2val:0x002000ffbfffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x01000000000007, 0x002000ffbfffff, x5, 448, x11)

inst_74:
// rs2_w1_val == 4096, rs2_w0_val == -65
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040fdffffff;  op2val:0x001000ffffffbf
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x000040fdffffff, 0x001000ffffffbf, x5, 456, x11)

inst_75:
// rs2_w1_val == 2048, rs1_w0_val == -257, rs1_w1_val == 67108864
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffeff;  op2val:0x000800fffffff8
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x4000000fffffeff, 0x000800fffffff8, x5, 464, x11)

inst_76:
// rs2_w1_val == 1024, rs1_w1_val == -131073
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000800;  op2val:0x000400bfffffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000800, 0x000400bfffffff, x5, 472, x11)

inst_77:
// rs2_w1_val == 128, rs1_w0_val == -4194305, rs1_w1_val == 128
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080ffbfffff;  op2val:0x00008000000010
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x000080ffbfffff, 0x00008000000010, x5, 480, x11)

inst_78:
// rs2_w1_val == 64, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaff7fffff;  op2val:0x000040ff7fffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaff7fffff, 0x000040ff7fffff, x5, 488, x11)

inst_79:
// rs2_w1_val == 32, rs1_w0_val == -3
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080fffffffd;  op2val:0x00002000000004
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x000080fffffffd, 0x00002000000004, x5, 496, x11)

inst_80:
// rs2_w1_val == 16, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe02000000;  op2val:0x00001000000080
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfffffffe02000000, 0x00001000000080, x5, 504, x11)

inst_81:
// rs2_w1_val == 8, rs2_w0_val == -1431655766
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000400;  op2val:0x000008aaaaaaaa
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000400, 0x000008aaaaaaaa, x5, 512, x11)

inst_82:
// rs2_w1_val == 4, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000006;  op2val:0x0000043fffffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x00000100000006, 0x0000043fffffff, x5, 520, x11)

inst_83:
// rs2_w0_val == 131072, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffffffd;  op2val:0xfffffff700020000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x80000000fffffffd, 0xfffffff700020000, x5, 528, x11)

inst_84:
// rs2_w0_val == 32768, rs1_w1_val == 262144
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000002000;  op2val:0xfffffffa00008000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x04000000002000, 0xfffffffa00008000, x5, 536, x11)

inst_85:
// rs2_w0_val == 16384, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006c0000000;  op2val:0xffffffef00004000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x000006c0000000, 0xffffffef00004000, x5, 544, x11)

inst_86:
// rs2_w0_val == 8192, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000800;  op2val:0xfffffffb00002000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x5555555500000800, 0xfffffffb00002000, x5, 552, x11)

inst_87:
// rs2_w0_val == 1024, rs1_w0_val == -1431655766
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcaaaaaaaa;  op2val:0xfdffffff00000400
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfffffffcaaaaaaaa, 0xfdffffff00000400, x5, 560, x11)

inst_88:
// rs2_w0_val == 512, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000400;  op2val:0x200000000000200
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000400, 0x200000000000200, x5, 568, x11)

inst_89:
// rs2_w0_val == 256, rs1_w0_val == -33
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffffffdf;  op2val:0x10000000000100
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x008000ffffffdf, 0x10000000000100, x5, 576, x11)

inst_90:
// rs2_w0_val == 8, rs1_w1_val == -4194305
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffffffdf;  op2val:0x01000000000008
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xffbfffffffffffdf, 0x01000000000008, x5, 584, x11)

inst_91:
// rs2_w0_val == 2, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffefffff;  op2val:0x80000000000002
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xffffff7fffefffff, 0x80000000000002, x5, 592, x11)

inst_92:
// rs2_w0_val == 1, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000007;  op2val:0x00200000000001
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x00020000000007, 0x00200000000001, x5, 600, x11)

inst_93:
// rs2_w0_val == -1, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008bfffffff;  op2val:0x000010ffffffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x000008bfffffff, 0x000010ffffffff, x5, 608, x11)

inst_94:
// rs1_w1_val == -134217729, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00008000;  op2val:0x1000000fffff7ff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00008000, 0x1000000fffff7ff, x5, 616, x11)

inst_95:
// rs1_w1_val == -67108865, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000006;  op2val:0x00080080000000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000006, 0x00080080000000, x5, 624, x11)

inst_96:
// rs1_w1_val == -33554433, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000002;  op2val:0x00100000000006
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000002, 0x00100000000006, x5, 632, x11)

inst_97:
// rs1_w1_val == -1048577, rs2_w0_val == 1073741824
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffff7ffff;  op2val:0x00020040000000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xffeffffffff7ffff, 0x00020040000000, x5, 640, x11)

inst_98:
// rs1_w1_val == -524289, rs1_w0_val == -262145, rs2_w0_val == 1431655765
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffbffff;  op2val:0x20000055555555
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffbffff, 0x20000055555555, x5, 648, x11)

inst_99:
// rs1_w1_val == -262145, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000010;  op2val:0x000002fffffff9
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000010, 0x000002fffffff9, x5, 656, x11)

inst_100:
// rs1_w1_val == -65537, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffffdf;  op2val:0xaaaaaaaa00800000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffffdf, 0xaaaaaaaa00800000, x5, 664, x11)

inst_101:
// rs1_w1_val == -32769, rs1_w0_val == -67108865
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffbffffff;  op2val:0xbfffffffffffff7f
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xffff7ffffbffffff, 0xbfffffffffffff7f, x5, 672, x11)

inst_102:
// rs1_w1_val == -513, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffffffbff;  op2val:0x2000000ff7fffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfffffdfffffffbff, 0x2000000ff7fffff, x5, 680, x11)

inst_103:
// rs1_w1_val == -65, rs2_w0_val == -17, rs1_w0_val == 134217728
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf08000000;  op2val:0x2000000ffffffef
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xffffffbf08000000, 0x2000000ffffffef, x5, 688, x11)

inst_104:
// rs1_w1_val == -17, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffff7ffff;  op2val:0xff7fffff00000080
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xffffffeffff7ffff, 0xff7fffff00000080, x5, 696, x11)

inst_105:
// rs1_w1_val == 2097152, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000000;  op2val:0x000010fffdffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x20000000000000, 0x000010fffdffff, x5, 704, x11)

inst_106:
// rs2_w1_val == 1, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffdfffffff;  op2val:0x00000108000000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xff7fffffdfffffff, 0x00000108000000, x5, 712, x11)

inst_107:
// rs2_w1_val == 0, rs1_w1_val == -1
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff40000000;  op2val:0x00000000000009
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xffffffff40000000, 0x00000000000009, x5, 720, x11)

inst_108:
// rs2_w1_val == -1, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000100;  op2val:0xfffffffffffffff8
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x40000000000100, 0xfffffffffffffff8, x5, 728, x11)

inst_109:
// rs1_w1_val == 32, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000006;  op2val:0x00000800004000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x00002000000006, 0x00000800004000, x5, 736, x11)

inst_110:
// rs1_w1_val == 2, rs1_w0_val == -129
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002ffffff7f;  op2val:0x00800002000000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x000002ffffff7f, 0x00800002000000, x5, 744, x11)

inst_111:
// rs1_w1_val == 0, rs1_w0_val == 1431655765
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000055555555;  op2val:0xfffffff6ffff7fff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x00000055555555, 0xfffffff6ffff7fff, x5, 752, x11)

inst_112:
// rs2_w0_val == -33554433, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffdffffff;  op2val:0xfffffff9fdffffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xffdffffffdffffff, 0xfffffff9fdffffff, x5, 760, x11)

inst_113:
// rs2_w0_val == -524289, rs1_w0_val == -134217729
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffff7ffffff;  op2val:0x000040fff7ffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfefffffff7ffffff, 0x000040fff7ffff, x5, 768, x11)

inst_114:
// rs2_w0_val == -65537, rs1_w0_val == -65537
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffeffff;  op2val:0x000002fffeffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x000400fffeffff, 0x000002fffeffff, x5, 776, x11)

inst_115:
// rs2_w0_val == -8193, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000008;  op2val:0x002000ffffdfff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000008, 0x002000ffffdfff, x5, 784, x11)

inst_116:
// rs1_w0_val == -2097153, rs1_w1_val == -3
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffdfffff;  op2val:0xefffffffffffdfff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfffffffdffdfffff, 0xefffffffffffdfff, x5, 792, x11)

inst_117:
// rs1_w0_val == -131073, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffdffff;  op2val:0x00004000000008
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xffeffffffffdffff, 0x00004000000008, x5, 800, x11)

inst_118:
// rs1_w0_val == -32769, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffff7fff;  op2val:0x00008000000001
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfffffffbffff7fff, 0x00008000000001, x5, 808, x11)

inst_119:
// rs1_w0_val == -4097, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6ffffefff;  op2val:0xfdffffffefffffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfffffff6ffffefff, 0xfdffffffefffffff, x5, 816, x11)

inst_120:
// rs2_w0_val == -9, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00100000;  op2val:0xfffffff9fffffff7
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00100000, 0xfffffff9fffffff7, x5, 824, x11)

inst_121:
// rs1_w0_val == -2049, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffff7ff;  op2val:0x00020000800000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffff7ff, 0x00020000800000, x5, 832, x11)

inst_122:
// rs1_w1_val == -9, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fffffffb;  op2val:0x000010ff7fffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffffffb, 0x000010ff7fffff, x5, 840, x11)

inst_123:
// rs2_w0_val == 536870912, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100fffeffff;  op2val:0xfffffff820000000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x000100fffeffff, 0xfffffff820000000, x5, 848, x11)

inst_124:
// rs1_w0_val == -9, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffffff7;  op2val:0x80000000fffffff7
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x000008fffffff7, 0x80000000fffffff7, x5, 856, x11)

inst_125:
// rs1_w1_val == 1073741824, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffffefff;  op2val:0x00004000000100
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x40000000ffffefff, 0x00004000000100, x5, 864, x11)

inst_126:
// rs1_w1_val == 536870912, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffffbfff;  op2val:0x00040000000007
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x20000000ffffbfff, 0x00040000000007, x5, 872, x11)

inst_127:
// rs2_w0_val == 16777216, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff40000000;  op2val:0xf7ffffff01000000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xbfffffff40000000, 0xf7ffffff01000000, x5, 880, x11)

inst_128:
// rs2_w0_val == 4194304, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000002;  op2val:0xbfffffff00400000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000002, 0xbfffffff00400000, x5, 888, x11)

inst_129:
// rs1_w1_val == 8388608, 
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000008000;  op2val:0x3fffffffffbfffff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x80000000008000, 0x3fffffffffbfffff, x5, 896, x11)

inst_130:
// rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val == -1048577, rs2_w0_val == 4096, rs2_w1_val == -33
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009ffefffff;  op2val:0xffffffdf00001000
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x000009ffefffff, 0xffffffdf00001000, x5, 904, x11)

inst_131:
// rs2_w1_val == -32769, rs1_w0_val == 4194304
// opcode: smbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000400000;  op2val:0xffff7fffffffefff
TEST_RR_OP(smbt32, x31, x30, x29, 0x0000000000000000, 0x00001000400000, 0xffff7fffffffefff, x5, 912, x11)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 115*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
