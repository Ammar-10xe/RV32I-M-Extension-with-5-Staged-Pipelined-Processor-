
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rcrsa16 instruction of the RISC-V RV64PZicsr extension for the rcrsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",rcrsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:// rs1 == rd != rs2, rs1==x10, rs2==x25, rd==x10, rs1_h0_val == -32768, rs1_h1_val == -5, rs1_h3_val != rs2_h3_val, rs2_h1_val == -21846, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val != rs2_h1_val, rs2_h0_val == -513, rs2_h2_val == -32768, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val == -8193, rs1_h0_val != rs2_h0_val, rs1_h3_val == -33, rs1_h0_val < 0 and rs2_h0_val < 0
// opcode: rcrsa16 ; op1:x10; op2:x25; dest:x10; op1val:0xffdfdffffffb8000;  op2val:0xfffc8000aaaafdff
TEST_RR_OP(rcrsa16, x10, x10, x25, 0x0000000000000000, 0xffdfdffffffb8000, 0xfffc8000aaaafdff, x1, 0, x5)

inst_1:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x21, rs2==x14, rd==x3, rs1_h3_val == rs2_h3_val, rs2_h0_val == 64, rs2_h1_val == -4097, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h0_val == 1024, rs1_h3_val == -16385, rs1_h1_val == -65, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == -17, rs2_h3_val == -16385, rs2_h2_val == 2
// opcode: rcrsa16 ; op1:x21; op2:x14; dest:x3; op1val:0xbfffffefffbf0400;  op2val:0xbfff0002efff0040
TEST_RR_OP(rcrsa16, x3, x21, x14, 0x0000000000000000, 0xbfffffefffbf0400, 0xbfff0002efff0040, x1, 8, x5)

inst_2:// rs1 == rs2 != rd, rs1==x20, rs2==x20, rd==x18, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h0_val == 2048, rs1_h1_val == 8, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 128
// opcode: rcrsa16 ; op1:x20; op2:x20; dest:x18; op1val:0xfff6fffc00080800;  op2val:0x3ffffffa0080fff6
TEST_RR_OP(rcrsa16, x18, x20, x20, 0x0000000000000000, 0xfff6fffc00080800, 0x3ffffffa0080fff6, x1, 16, x5)

inst_3:// rs1 == rs2 == rd, rs1==x13, rs2==x13, rd==x13, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h2_val == -1, rs2_h1_val == 21845, rs1_h0_val == -17, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -129
// opcode: rcrsa16 ; op1:x13; op2:x13; dest:x13; op1val:0x060006ff7fffef;  op2val:0xfff8ffff55550006
TEST_RR_OP(rcrsa16, x13, x13, x13, 0x0000000000000000, 0x060006ff7fffef, 0xfff8ffff55550006, x1, 24, x5)

inst_4:// rs2 == rd != rs1, rs1==x29, rs2==x23, rd==x23, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 256, rs2_h1_val == 32767, rs1_h1_val == 1, rs2_h3_val == 32, rs2_h2_val == -21846, rs1_h0_val == -257, rs1_h2_val == -32768
// opcode: rcrsa16 ; op1:x29; op2:x23; dest:x23; op1val:0x10080000001feff;  op2val:0x20aaaa7ffffffc
TEST_RR_OP(rcrsa16, x23, x29, x23, 0x0000000000000000, 0x10080000001feff, 0x20aaaa7ffffffc, x1, 32, x5)

inst_5:// rs1==x7, rs2==x24, rd==x28, rs1_h2_val == rs2_h2_val, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h3_val == 8192, rs1_h2_val == 4, rs2_h0_val == -33, rs1_h3_val == -2, rs2_h2_val == 4
// opcode: rcrsa16 ; op1:x7; op2:x24; dest:x28; op1val:0xfffe0004ffbf0005;  op2val:0x200000040006ffdf
TEST_RR_OP(rcrsa16, x28, x7, x24, 0x0000000000000000, 0xfffe0004ffbf0005, 0x200000040006ffdf, x1, 40, x5)

inst_6:// rs1==x22, rs2==x12, rd==x14, rs1_h1_val == rs2_h1_val, rs2_h0_val == 32, rs2_h2_val == -33, rs1_h1_val == 256, rs2_h3_val == 2048, rs1_h3_val == -257, rs1_h2_val == -257, rs2_h1_val == 256
// opcode: rcrsa16 ; op1:x22; op2:x12; dest:x14; op1val:0xfefffeff0100fffc;  op2val:0x800ffdf01000020
TEST_RR_OP(rcrsa16, x14, x22, x12, 0x0000000000000000, 0xfefffeff0100fffc, 0x800ffdf01000020, x1, 48, x5)

inst_7:// rs1==x2, rs2==x15, rd==x9, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h2_val == -16385, rs1_h0_val == -5, rs1_h2_val == 128, rs2_h1_val == -5, rs2_h3_val == -1
// opcode: rcrsa16 ; op1:x2; op2:x15; dest:x9; op1val:0xfffc00800006fffb;  op2val:0xffffbffffffbfffa
TEST_RR_OP(rcrsa16, x9, x2, x15, 0x0000000000000000, 0xfffc00800006fffb, 0xffffbffffffbfffa, x1, 56, x5)

inst_8:// rs1==x28, rs2==x7, rd==x20, rs1_h0_val == rs2_h0_val, rs2_h0_val == -16385, rs2_h1_val == 2048, rs1_h0_val == -16385, rs2_h3_val == -8193, rs2_h2_val == 0
// opcode: rcrsa16 ; op1:x28; op2:x7; dest:x20; op1val:0xfffafff60100bfff;  op2val:0xdfff00000800bfff
TEST_RR_OP(rcrsa16, x20, x28, x7, 0x0000000000000000, 0xfffafff60100bfff, 0xdfff00000800bfff, x1, 64, x5)

inst_9:// rs1==x17, rs2==x27, rd==x11, rs2_h3_val == -21846, rs1_h2_val == 512, rs1_h1_val == 16, rs1_h3_val == 2048
// opcode: rcrsa16 ; op1:x17; op2:x27; dest:x11; op1val:0x800020000103fff;  op2val:0xaaaa000700050006
TEST_RR_OP(rcrsa16, x11, x17, x27, 0x0000000000000000, 0x800020000103fff, 0xaaaa000700050006, x1, 72, x5)

inst_10:// rs1==x25, rs2==x30, rd==x17, rs2_h3_val == 21845, rs2_h1_val == -3, rs1_h3_val == 32767, rs1_h0_val == -3
// opcode: rcrsa16 ; op1:x25; op2:x30; dest:x17; op1val:0x7fff0004fffafffd;  op2val:0x5555fff6fffd0040
TEST_RR_OP(rcrsa16, x17, x25, x30, 0x0000000000000000, 0x7fff0004fffafffd, 0x5555fff6fffd0040, x1, 80, x5)

inst_11:// rs1==x9, rs2==x26, rd==x22, rs2_h3_val == 32767, rs1_h3_val == 128, rs2_h1_val == -513, rs1_h0_val == 16, rs1_h2_val == -1025, rs2_h0_val == -32768
// opcode: rcrsa16 ; op1:x9; op2:x26; dest:x22; op1val:0x80fbff00080010;  op2val:0x7fffbffffdff8000
TEST_RR_OP(rcrsa16, x22, x9, x26, 0x0000000000000000, 0x80fbff00080010, 0x7fffbffffdff8000, x1, 88, x5)

inst_12:// rs1==x26, rs2==x28, rd==x25, rs2_h3_val == -4097, rs1_h1_val == -32768, rs2_h2_val == -5, rs1_h0_val == 4, rs1_h2_val == -513, rs2_h0_val == 8192
// opcode: rcrsa16 ; op1:x26; op2:x28; dest:x25; op1val:0x06fdff80000004;  op2val:0xeffffffb00062000
TEST_RR_OP(rcrsa16, x25, x26, x28, 0x0000000000000000, 0x06fdff80000004, 0xeffffffb00062000, x1, 96, x5)

inst_13:// rs1==x15, rs2==x3, rd==x29, rs2_h3_val == -2049, rs1_h1_val == -1025, rs2_h0_val == 4096, rs1_h3_val == -129, rs1_h0_val == -513
// opcode: rcrsa16 ; op1:x15; op2:x3; dest:x29; op1val:0xff7ffff6fbfffdff;  op2val:0xf7fffff900091000
TEST_RR_OP(rcrsa16, x29, x15, x3, 0x0000000000000000, 0xff7ffff6fbfffdff, 0xf7fffff900091000, x1, 104, x5)

inst_14:// rs1==x8, rs2==x11, rd==x19, rs2_h3_val == -1025, rs2_h2_val == 8, rs2_h0_val == -21846, rs1_h3_val == 16
// opcode: rcrsa16 ; op1:x8; op2:x11; dest:x19; op1val:0x10fdff0003fffd;  op2val:0xfbff00080080aaaa
TEST_RR_OP(rcrsa16, x19, x8, x11, 0x0000000000000000, 0x10fdff0003fffd, 0xfbff00080080aaaa, x1, 112, x5)

inst_15:// rs1==x6, rs2==x8, rd==x4, rs2_h3_val == -513, rs1_h0_val == 0, rs1_h2_val == -21846, rs2_h2_val == 1, rs1_h1_val == -4097
// opcode: rcrsa16 ; op1:x6; op2:x8; dest:x4; op1val:0xff7faaaaefff0000;  op2val:0xfdff000100030005
TEST_RR_OP(rcrsa16, x4, x6, x8, 0x0000000000000000, 0xff7faaaaefff0000, 0xfdff000100030005, x1, 120, x5)
RVTEST_SIGBASE(x13,signature_x13_0)

inst_16:// rs1==x12, rs2==x16, rd==x5, rs2_h3_val == -257, rs2_h0_val == -2049, rs1_h3_val == 4096, rs1_h2_val == -2, rs2_h2_val == 21845
// opcode: rcrsa16 ; op1:x12; op2:x16; dest:x5; op1val:0x1000fffe00100006;  op2val:0xfeff5555fffdf7ff
TEST_RR_OP(rcrsa16, x5, x12, x16, 0x0000000000000000, 0x1000fffe00100006, 0xfeff5555fffdf7ff, x13, 0, x20)

inst_17:// rs1==x4, rs2==x18, rd==x6, rs2_h3_val == -129, rs1_h0_val == 16384, rs1_h3_val == -21846, rs2_h0_val == -65, rs2_h2_val == 2048, rs2_h1_val == 16384, rs1_h2_val == -2049
// opcode: rcrsa16 ; op1:x4; op2:x18; dest:x6; op1val:0xaaaaf7fffff94000;  op2val:0xff7f08004000ffbf
TEST_RR_OP(rcrsa16, x6, x4, x18, 0x0000000000000000, 0xaaaaf7fffff94000, 0xff7f08004000ffbf, x13, 8, x20)

inst_18:// rs1==x16, rs2==x0, rd==x31, rs2_h3_val == -65, rs2_h2_val == -1025, rs1_h1_val == 4096, rs1_h3_val == -1025, rs1_h0_val == 2, rs2_h1_val == 1024
// opcode: rcrsa16 ; op1:x16; op2:x0; dest:x31; op1val:0xfbff800010000002;  op2val:0xffbffbff0400ffdf
TEST_RR_OP(rcrsa16, x31, x16, x0, 0x0000000000000000, 0xfbff800010000002, 0xffbffbff0400ffdf, x13, 16, x20)

inst_19:// rs1==x24, rs2==x22, rd==x1, rs2_h3_val == -33, rs1_h0_val == -65, rs1_h3_val == 0, rs2_h2_val == 4096, rs2_h0_val == -3, rs1_h1_val == -2049
// opcode: rcrsa16 ; op1:x24; op2:x22; dest:x1; op1val:0x00fbfff7ffffbf;  op2val:0xffdf10000006fffd
TEST_RR_OP(rcrsa16, x1, x24, x22, 0x0000000000000000, 0x00fbfff7ffffbf, 0xffdf10000006fffd, x13, 24, x20)

inst_20:// rs1==x23, rs2==x4, rd==x21, rs2_h3_val == -17, rs1_h0_val == 8192, rs2_h2_val == 8192, rs1_h3_val == -8193
// opcode: rcrsa16 ; op1:x23; op2:x4; dest:x21; op1val:0xdffffff6ffbf2000;  op2val:0xffef2000fdff8000
TEST_RR_OP(rcrsa16, x21, x23, x4, 0x0000000000000000, 0xdffffff6ffbf2000, 0xffef2000fdff8000, x13, 32, x20)

inst_21:// rs1==x18, rs2==x17, rd==x16, rs2_h3_val == -9, rs1_h3_val == 16384, rs1_h0_val == -1025, rs2_h0_val == 1
// opcode: rcrsa16 ; op1:x18; op2:x17; dest:x16; op1val:0x40000080fffafbff;  op2val:0xfff70000fffd0001
TEST_RR_OP(rcrsa16, x16, x18, x17, 0x0000000000000000, 0x40000080fffafbff, 0xfff70000fffd0001, x13, 40, x20)

inst_22:// rs1==x3, rs2==x21, rd==x26, rs2_h3_val == -5, rs1_h2_val == -33, rs1_h3_val == 21845, rs2_h0_val == -129
// opcode: rcrsa16 ; op1:x3; op2:x21; dest:x26; op1val:0x5555ffdfff7f0010;  op2val:0xfffb00060100ff7f
TEST_RR_OP(rcrsa16, x26, x3, x21, 0x0000000000000000, 0x5555ffdfff7f0010, 0xfffb00060100ff7f, x13, 48, x20)

inst_23:// rs1==x5, rs2==x2, rd==x27, rs2_h3_val == -3, rs2_h0_val == -5, rs2_h1_val == -65, rs2_h2_val == -129
// opcode: rcrsa16 ; op1:x5; op2:x2; dest:x27; op1val:0x07fbff0007fffd;  op2val:0xfffdff7fffbffffb
TEST_RR_OP(rcrsa16, x27, x5, x2, 0x0000000000000000, 0x07fbff0007fffd, 0xfffdff7fffbffffb, x13, 56, x20)

inst_24:// rs1==x19, rs2==x31, rd==x8, rs2_h3_val == -2, rs2_h1_val == -2, rs1_h2_val == 16
// opcode: rcrsa16 ; op1:x19; op2:x31; dest:x8; op1val:0xbfff00100007fff8;  op2val:0xfffefffbfffefffb
TEST_RR_OP(rcrsa16, x8, x19, x31, 0x0000000000000000, 0xbfff00100007fff8, 0xfffefffbfffefffb, x13, 64, x20)

inst_25:// rs1==x14, rs2==x5, rd==x15, rs2_h3_val == -32768, rs1_h2_val == -1, rs2_h2_val == -4097
// opcode: rcrsa16 ; op1:x14; op2:x5; dest:x15; op1val:0x800ffffff7f0005;  op2val:0x8000effffffd0001
TEST_RR_OP(rcrsa16, x15, x14, x5, 0x0000000000000000, 0x800ffffff7f0005, 0x8000effffffd0001, x13, 72, x20)

inst_26:// rs1==x27, rs2==x10, rd==x24, rs2_h3_val == 16384, rs1_h2_val == 8192, rs2_h0_val == 0, rs2_h2_val == -17, rs2_h1_val == -257, rs1_h1_val == -33
// opcode: rcrsa16 ; op1:x27; op2:x10; dest:x24; op1val:0x102000ffdf0002;  op2val:0x4000ffeffeff0000
TEST_RR_OP(rcrsa16, x24, x27, x10, 0x0000000000000000, 0x102000ffdf0002, 0x4000ffeffeff0000, x13, 80, x20)

inst_27:// rs1==x1, rs2==x19, rd==x12, rs2_h3_val == 4096, rs1_h1_val == 2
// opcode: rcrsa16 ; op1:x1; op2:x19; dest:x12; op1val:0x00fbff0002ffef;  op2val:0x1000fff60006fff6
TEST_RR_OP(rcrsa16, x12, x1, x19, 0x0000000000000000, 0x00fbff0002ffef, 0x1000fff60006fff6, x13, 88, x20)

inst_28:// rs1==x31, rs2==x6, rd==x2, rs2_h3_val == 1024, rs1_h2_val == 2048, rs2_h0_val == 256, rs2_h1_val == 8
// opcode: rcrsa16 ; op1:x31; op2:x6; dest:x2; op1val:0x1008003ffffff6;  op2val:0x400080000080100
TEST_RR_OP(rcrsa16, x2, x31, x6, 0x0000000000000000, 0x1008003ffffff6, 0x400080000080100, x13, 96, x20)

inst_29:// rs1==x11, rs2==x9, rd==x30, rs2_h3_val == 512, rs1_h3_val == -3, rs1_h1_val == -9, rs2_h2_val == 512, rs2_h1_val == -9
// opcode: rcrsa16 ; op1:x11; op2:x9; dest:x30; op1val:0xfffd0005fff7fdff;  op2val:0x2000200fff70007
TEST_RR_OP(rcrsa16, x30, x11, x9, 0x0000000000000000, 0xfffd0005fff7fdff, 0x2000200fff70007, x13, 104, x20)

inst_30:// rs1==x30, rs2==x1, rd==x0, rs2_h3_val == 256, rs1_h2_val == 32, rs2_h2_val == 16, rs2_h1_val == -32768
// opcode: rcrsa16 ; op1:x30; op2:x1; dest:x0; op1val:0x3fff0020ffdf0010;  op2val:0x10000108000f7ff
TEST_RR_OP(rcrsa16, x0, x30, x1, 0x0000000000000000, 0x3fff0020ffdf0010, 0x10000108000f7ff, x13, 112, x20)

inst_31:// rs1==x0, rs2==x29, rd==x7, rs2_h3_val == 128, rs1_h0_val == 512, rs1_h2_val == 21845, rs2_h1_val == -2049
// opcode: rcrsa16 ; op1:x0; op2:x29; dest:x7; op1val:0x40005555fffb0200;  op2val:0x80ffdff7ff1000
TEST_RR_OP(rcrsa16, x7, x0, x29, 0x0000000000000000, 0x40005555fffb0200, 0x80ffdff7ff1000, x13, 120, x20)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_32:// rs2_h3_val == 64, rs1_h1_val == -513, rs2_h0_val == -9, rs1_h0_val == -129
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000800fdffff7f;  op2val:0x40fff6effffff7
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x8000800fdffff7f, 0x40fff6effffff7, x1, 0, x2)

inst_33:// rs2_h3_val == 16, rs2_h2_val == 32, rs1_h3_val == 32, rs2_h1_val == 16
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x205555fff70002;  op2val:0x10002000100020
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x205555fff70002, 0x10002000100020, x1, 8, x2)

inst_34:// rs1_h1_val == -3, rs2_h0_val == 4
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60800fffd0002;  op2val:0x033fff00030004
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfff60800fffd0002, 0x033fff00030004, x1, 16, x2)

inst_35:// rs1_h1_val == -2, rs1_h2_val == 16384, rs2_h3_val == 2
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x054000fffefdff;  op2val:0x0200107fff0000
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x054000fffefdff, 0x0200107fff0000, x1, 24, x2)

inst_36:// rs1_h1_val == 16384, rs1_h2_val == 4096, rs1_h3_val == 8192, rs1_h0_val == 32767
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000100040007fff;  op2val:0xfffbfffb7ffffffa
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x2000100040007fff, 0xfffbfffb7ffffffa, x1, 32, x2)

inst_37:// rs1_h1_val == 8192, rs2_h0_val == -17, rs1_h0_val == -9, rs2_h2_val == 32767
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff640002000fff7;  op2val:0xbfff7ffffffaffef
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfff640002000fff7, 0xbfff7ffffffaffef, x1, 40, x2)

inst_38:// rs1_h1_val == 2048, rs2_h2_val == 64, rs2_h1_val == -1
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa000408000800;  op2val:0x55550040ffff0006
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffa000408000800, 0x55550040ffff0006, x1, 48, x2)

inst_39:// rs1_h1_val == 1024, rs1_h0_val == -33, rs2_h1_val == 512
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff655550400ffdf;  op2val:0xfffcfff802001000
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfff655550400ffdf, 0xfffcfff802001000, x1, 56, x2)

inst_40:// rs1_h1_val == 512, rs1_h3_val == 1024, rs2_h0_val == 16, rs2_h1_val == -8193
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400dfff02004000;  op2val:0x20000003dfff0010
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x400dfff02004000, 0x20000003dfff0010, x1, 64, x2)

inst_41:// rs1_h1_val == 128, rs1_h3_val == -513, rs1_h0_val == -4097, rs2_h2_val == -2049, rs2_h1_val == 1
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffdff0080efff;  op2val:0x09f7ff00010010
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfdfffdff0080efff, 0x09f7ff00010010, x1, 72, x2)

inst_42:// rs1_h1_val == 64, rs1_h0_val == 4096, rs1_h2_val == -9
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fff700401000;  op2val:0x800004fefffff7
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfff8fff700401000, 0x800004fefffff7, x1, 80, x2)

inst_43:// rs1_h1_val == 32, rs1_h0_val == 128
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffff700200080;  op2val:0xfeff3fffaaaa0006
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfefffff700200080, 0xfeff3fffaaaa0006, x1, 88, x2)

inst_44:// rs1_h1_val == 4, rs2_h2_val == -65
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x00feff00040003;  op2val:0xfffbffbffffeff7f
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x00feff00040003, 0xfffbffbffffeff7f, x1, 96, x2)

inst_45:// rs1_h1_val == 0, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9400000000000;  op2val:0x55558000fffe0003
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfff9400000000000, 0x55558000fffe0003, x1, 104, x2)

inst_46:// rs1_h1_val == -1, rs1_h3_val == 8
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x08c000fffffffd;  op2val:0xfffcbfff02008000
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x08c000fffffffd, 0xfffcbfff02008000, x1, 112, x2)

inst_47:// rs1_h0_val == -21846, rs2_h1_val == -1025, rs1_h3_val == 512, rs1_h1_val == 32767, rs1_h2_val == 1
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000017fffaaaa;  op2val:0x03fffafbff8000
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x20000017fffaaaa, 0x03fffafbff8000, x1, 120, x2)

inst_48:// rs1_h0_val == 21845, rs1_h1_val == -257, rs2_h2_val == -3, rs2_h0_val == 512
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x050800feff5555;  op2val:0x03fffdfffd0200
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x050800feff5555, 0x03fffdfffd0200, x1, 128, x2)

inst_49:// rs1_h0_val == -8193, rs1_h3_val == 64
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4010008000dfff;  op2val:0x400c00000030006
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x4010008000dfff, 0x400c00000030006, x1, 136, x2)

inst_50:// rs1_h0_val == -2049, rs2_h0_val == -4097
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x030020ff7ff7ff;  op2val:0xfff900088000efff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x030020ff7ff7ff, 0xfff900088000efff, x1, 144, x2)

inst_51:// rs1_h0_val == -2, rs1_h1_val == -16385, rs1_h3_val == -17
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffebffffffe;  op2val:0xf7fffbfffff7ffef
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xffeffffebffffffe, 0xf7fffbfffff7ffef, x1, 152, x2)

inst_52:// rs1_h0_val == 256, rs1_h1_val == 21845, rs1_h2_val == -5
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffb55550100;  op2val:0xfffd0004fff6ff7f
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfff9fffb55550100, 0xfffd0004fff6ff7f, x1, 160, x2)

inst_53:// rs1_h0_val == 64, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffdff80000040;  op2val:0x800fbffc0000020
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfbfffdff80000040, 0x800fbffc0000020, x1, 168, x2)

inst_54:// rs1_h0_val == 32, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdff7ffefff0020;  op2val:0xf7ff10007fff0006
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xffdff7ffefff0020, 0xf7ff10007fff0006, x1, 176, x2)

inst_55:// rs1_h0_val == 8, rs1_h3_val == 4, rs1_h2_val == -4097
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x04effffeff0008;  op2val:0xfffb0008f7fffffb
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x04effffeff0008, 0xfffb0008f7fffffb, x1, 184, x2)

inst_56:// rs1_h0_val == 1, rs2_h0_val == 1024
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9000720000001;  op2val:0x200fffbfffd0400
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfff9000720000001, 0x200fffbfffd0400, x1, 192, x2)

inst_57:// rs2_h1_val == 4, rs2_h2_val == -257
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x082000ffbfaaaa;  op2val:0x100feff0004fffa
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x082000ffbfaaaa, 0x100feff0004fffa, x1, 200, x2)

inst_58:// rs2_h1_val == 2, rs1_h1_val == -8193
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0010dfff5555;  op2val:0xfffffffd00020100
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfeff0010dfff5555, 0xfffffffd00020100, x1, 208, x2)

inst_59:// rs2_h1_val == 0, rs2_h0_val == -1
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x03ffdf0003fffe;  op2val:0xfff6fffa0000ffff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x03ffdf0003fffe, 0xfff6fffa0000ffff, x1, 216, x2)

inst_60:// rs2_h0_val == 21845, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x08000700000004;  op2val:0x7fff0008fff95555
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x08000700000004, 0x7fff0008fff95555, x1, 224, x2)

inst_61:// rs2_h0_val == 32767, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffa0080efff;  op2val:0x40ffbfefff7fff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x1000fffa0080efff, 0x40ffbfefff7fff, x1, 232, x2)

inst_62:// rs2_h0_val == -8193, rs2_h1_val == 64
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000400001000;  op2val:0xfffeff7f0040dfff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfbff000400001000, 0xfffeff7f0040dfff, x1, 240, x2)

inst_63:// rs2_h0_val == -1025, rs2_h1_val == -17
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x09ffef3ffffdff;  op2val:0xaaaabfffffeffbff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x09ffef3ffffdff, 0xaaaabfffffeffbff, x1, 248, x2)

inst_64:// rs2_h0_val == -257, rs1_h3_val == -5, rs1_h0_val == -1
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbf7fffbffffff;  op2val:0x7ffffffbfffdfeff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffbf7fffbffffff, 0x7ffffffbfffdfeff, x1, 256, x2)

inst_65:// rs2_h0_val == -2, rs1_h2_val == 2, rs2_h1_val == 4096
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0002fffdc000;  op2val:0x1002001000fffe
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xff7f0002fffdc000, 0x1002001000fffe, x1, 264, x2)

inst_66:// rs2_h0_val == 16384, rs1_h1_val == -21846, rs2_h2_val == -9
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400ffefaaaa3fff;  op2val:0xfffdfff700024000
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x400ffefaaaa3fff, 0xfffdfff700024000, x1, 272, x2)

inst_67:// rs2_h0_val == 2048, rs2_h1_val == -129, rs2_h3_val == 0, rs1_h3_val == -32768
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000c000fbffffef;  op2val:0x000006ff7f0800
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x8000c000fbffffef, 0x000006ff7f0800, x1, 280, x2)

inst_68:// rs2_h0_val == 128, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000ffef0100fffb;  op2val:0x06ffefff7f0080
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x4000ffef0100fffb, 0x06ffefff7f0080, x1, 288, x2)

inst_69:// rs2_h0_val == 8, rs2_h1_val == -33
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x05000600040004;  op2val:0xaaaa1000ffdf0008
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x05000600040004, 0xaaaa1000ffdf0008, x1, 296, x2)

inst_70:// rs2_h0_val == 2, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff100040008000;  op2val:0x1000000640000002
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xdfff100040008000, 0x1000000640000002, x1, 304, x2)

inst_71:// rs2_h2_val == -8193, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x202000bffffff9;  op2val:0x100dfff00070002
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x202000bffffff9, 0x100dfff00070002, x1, 312, x2)

inst_72:// rs2_h2_val == -513, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffb0008ffbf;  op2val:0x7ffffdfffdffffff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x4000fffb0008ffbf, 0x7ffffdfffdffffff, x1, 320, x2)

inst_73:// rs1_h3_val == 2, rs2_h2_val == 128
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x020800ffdf0010;  op2val:0x090080fffc0008
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x020800ffdf0010, 0x090080fffc0008, x1, 328, x2)

inst_74:// rs1_h3_val == 1, rs1_h2_val == -65, rs2_h1_val == 8192
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ffbffff80007;  op2val:0x800feff2000feff
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x01ffbffff80007, 0x800feff2000feff, x1, 336, x2)

inst_75:// rs1_h3_val == -1, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafff98000;  op2val:0xdfffffbffffffff7
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffffffafff98000, 0xdfffffbffffffff7, x1, 344, x2)

inst_76:// rs2_h2_val == -2, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffdf0020aaaa;  op2val:0xbffffffe3ffffffe
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfdffffdf0020aaaa, 0xbffffffe3ffffffe, x1, 352, x2)

inst_77:// rs1_h2_val == 32767, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2007fff3ffffffb;  op2val:0xfffdfffb00060003
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x2007fff3ffffffb, 0xfffdfffb00060003, x1, 360, x2)

inst_78:// rs2_h2_val == 16384, rs1_h1_val == -17
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60200ffeffeff;  op2val:0xfff9400002005555
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfff60200ffeffeff, 0xfff9400002005555, x1, 368, x2)

inst_79:// rs1_h2_val == -16385, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefbfff00060008;  op2val:0x100004ffdfffdf
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xffefbfff00060008, 0x100004ffdfffdf, x1, 376, x2)

inst_80:// rs2_h2_val == 1024, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400efff00020200;  op2val:0x05040000095555
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x400efff00020200, 0x05040000095555, x1, 384, x2)

inst_81:// rs2_h2_val == 256, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x402000fff90004;  op2val:0xfeff010000070008
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x402000fff90004, 0xfeff010000070008, x1, 392, x2)

inst_82:// rs2_h3_val == 8, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fffbffff0020;  op2val:0x080008fffc0009
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x200fffbffff0020, 0x080008fffc0009, x1, 400, x2)

inst_83:// rs2_h1_val == -16385, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x06feff0000ffbf;  op2val:0xffbff7ffbffffffc
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x06feff0000ffbf, 0xffbff7ffbffffffc, x1, 408, x2)

inst_84:// rs1_h2_val == 1024, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000400dfff0010;  op2val:0xfffa000700070002
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x20000400dfff0010, 0xfffa000700070002, x1, 416, x2)

inst_85:// rs1_h2_val == 256, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0100efffc000;  op2val:0xfeff7ffffdfffffa
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffd0100efffc000, 0xfeff7ffffdfffffa, x1, 424, x2)

inst_86:// rs1_h2_val == 64, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x070040fffdffff;  op2val:0x40000100001fff9
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x070040fffdffff, 0x40000100001fff9, x1, 432, x2)

inst_87:// rs1_h2_val == 8, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x800000080005ffff;  op2val:0xfffeff7f0400fff6
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x800000080005ffff, 0xfffeff7f0400fff6, x1, 440, x2)

inst_88:// rs1_h3_val == -4097, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff1000fff70800;  op2val:0x40003fffffef0005
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xefff1000fff70800, 0x40003fffffef0005, x1, 448, x2)

inst_89:// rs1_h3_val == -2049, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffeffefff0040;  op2val:0x10000000030080
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xf7fffeffefff0040, 0x10000000030080, x1, 456, x2)

inst_90:// rs1_h2_val == 0, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fff90005;  op2val:0x06fffdfffe0008
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x080000fff90005, 0x06fffdfffe0008, x1, 464, x2)

inst_91:// rs1_h3_val == -65, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffcfffac000;  op2val:0x080080aaaa1000
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xffbffffcfffac000, 0x080080aaaa1000, x1, 472, x2)

inst_92:// rs1_h2_val == -129, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfff7f40000007;  op2val:0x09fff8ffdf0003
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xffdfff7f40000007, 0x09fff8ffdf0003, x1, 480, x2)

inst_93:// rs1_h3_val == -9, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70002fffd0040;  op2val:0xffdf00050001ffdf
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfff70002fffd0040, 0xffdf00050001ffdf, x1, 488, x2)

inst_94:// rs2_h3_val == 4, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6800000045555;  op2val:0x042000ffeffffc
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfff6800000045555, 0x042000ffeffffc, x1, 496, x2)

inst_95:// rs1_h2_val == -3, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fffd0004fbff;  op2val:0xff7f7fffffef5555
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x10fffd0004fbff, 0xff7f7fffffef5555, x1, 504, x2)

inst_96:// rs2_h3_val == 1, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000002fff7fff9;  op2val:0x010004ffdfff7f
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x4000002fff7fff9, 0x010004ffdfff7f, x1, 512, x2)

inst_97:// rs2_h1_val == 32, 
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff90200ffef0009;  op2val:0xaaaafff800200004
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfff90200ffef0009, 0xaaaafff800200004, x1, 520, x2)

inst_98:// rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h2_val == -1, rs2_h1_val == 21845, rs1_h0_val == -17, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -129
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x060006ff7fffef;  op2val:0xfff8ffff55550006
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0x060006ff7fffef, 0xfff8ffff55550006, x1, 528, x2)

inst_99:// rs2_h3_val == -65, rs2_h2_val == -1025, rs1_h1_val == 4096, rs1_h3_val == -1025, rs1_h0_val == 2, rs2_h1_val == 1024
// opcode: rcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff800010000002;  op2val:0xffbffbff0400ffdf
TEST_RR_OP(rcrsa16, x31, x30, x29, 0x0000000000000000, 0xfbff800010000002, 0xffbffbff0400ffdf, x1, 536, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x13_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 68*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
