
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ursub8 instruction of the RISC-V RV64PZicsr extension for the ursub8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ursub8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rd != rs2, rs1==x14, rs2==x15, rd==x14, rs1_b0_val == 0, rs2_b7_val == 4, rs1_b7_val != rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b5_val == 251, rs1_b6_val != rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b2_val == 4, rs1_b5_val != rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b4_val != rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b6_val == 239, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b0_val == 255, rs1_b1_val == 247, rs1_b7_val == 127, rs1_b4_val == 64
// opcode: ursub8 ; op1:x14; op2:x15; dest:x14; op1val:0x7f1103400c04f700;  op2val:0x4effb0d0a0c12ff
TEST_RR_OP(ursub8, x14, x14, x15, 0x0000000000000000, 0x7f1103400c04f700, 0x4effb0d0a0c12ff, x3, 0, x4)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x27, rs2==x8, rd==x9, rs1_b7_val == rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b0_val == 239, rs2_b5_val == 1, rs2_b3_val == 128, rs1_b1_val == 127, rs2_b7_val == 127, rs2_b6_val == 4, rs2_b1_val == 32, rs1_b4_val == 254, rs2_b2_val == 128
// opcode: ursub8 ; op1:x27; op2:x8; dest:x9; op1val:0x7f0d0ffe09127f00;  op2val:0x7f04010c808020ef
TEST_RR_OP(ursub8, x9, x27, x8, 0x0000000000000000, 0x7f0d0ffe09127f00, 0x7f04010c808020ef, x3, 8, x4)

inst_2:
// rs1 == rs2 != rd, rs1==x7, rs2==x7, rd==x5, rs1_b6_val == rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b0_val == 191, rs1_b0_val == 223, rs2_b5_val == 4, rs2_b2_val == 0, rs1_b5_val == 255, rs2_b3_val == 16, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b4_val == 127, rs1_b3_val == 255, rs2_b4_val == 32, rs1_b7_val == 254, rs1_b1_val == 0
// opcode: ursub8 ; op1:x7; op2:x7; dest:x5; op1val:0xfe07ff7fff0b00df;  op2val:0x1307042010000bbf
TEST_RR_OP(ursub8, x5, x7, x7, 0x0000000000000000, 0xfe07ff7fff0b00df, 0x1307042010000bbf, x3, 16, x4)

inst_3:
// rs1 == rs2 == rd, rs1==x12, rs2==x12, rd==x12, rs1_b5_val == rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b0_val == 253, rs1_b2_val == 255, rs1_b0_val == 2, rs2_b3_val == 1, rs1_b6_val == 4, rs2_b7_val == 191, rs2_b6_val == 2, rs1_b1_val == 2
// opcode: ursub8 ; op1:x12; op2:x12; dest:x12; op1val:0x304077f0fff0202;  op2val:0xbf020706010a0afd
TEST_RR_OP(ursub8, x12, x12, x12, 0x0000000000000000, 0x304077f0fff0202, 0xbf020706010a0afd, x3, 24, x4)

inst_4:
// rs2 == rd != rs1, rs1==x30, rs2==x1, rd==x1, rs1_b4_val == rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b2_val == 64, rs1_b6_val == 239, rs2_b0_val == 0, rs1_b3_val == 2, rs2_b3_val == 255, rs1_b4_val == 4, rs1_b2_val == 127, rs2_b1_val == 4, rs2_b4_val == 4, rs1_b7_val == 16
// opcode: ursub8 ; op1:x30; op2:x1; dest:x1; op1val:0x10ef0c04027f0f12;  op2val:0x3020504ff400400
TEST_RR_OP(ursub8, x1, x30, x1, 0x0000000000000000, 0x10ef0c04027f0f12, 0x3020504ff400400, x3, 32, x4)

inst_5:
// rs1==x16, rs2==x0, rd==x22, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b6_val == 170, rs1_b0_val == 253, rs2_b5_val == 2, rs1_b3_val == 16, rs1_b5_val == 85, rs1_b4_val == 8
// opcode: ursub8 ; op1:x16; op2:x0; dest:x22; op1val:0x7115508100303fd;  op2val:0xcaa020e100a1312
TEST_RR_OP(ursub8, x22, x16, x0, 0x0000000000000000, 0x7115508100303fd, 0xcaa020e100a1312, x3, 40, x4)

inst_6:
// rs1==x25, rs2==x16, rd==x13, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b0_val == 239, rs2_b0_val == 247, rs2_b3_val == 32, rs1_b1_val == 239, rs1_b3_val == 8, rs2_b4_val == 223, rs2_b7_val == 170, rs2_b1_val == 254, rs2_b6_val == 1, rs1_b7_val == 64
// opcode: ursub8 ; op1:x25; op2:x16; dest:x13; op1val:0x400d060f080cefef;  op2val:0xaa0106df200cfef7
TEST_RR_OP(ursub8, x13, x25, x16, 0x0000000000000000, 0x400d060f080cefef, 0xaa0106df200cfef7, x3, 48, x4)

inst_7:
// rs1==x13, rs2==x28, rd==x21, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b0_val == 191, rs1_b4_val == 32, rs2_b6_val == 8, rs2_b5_val == 247
// opcode: ursub8 ; op1:x13; op2:x28; dest:x21; op1val:0x50605200d130ebf;  op2val:0xbf08f70f11110e11
TEST_RR_OP(ursub8, x21, x13, x28, 0x0000000000000000, 0x50605200d130ebf, 0xbf08f70f11110e11, x3, 56, x4)

inst_8:
// rs1==x26, rs2==x27, rd==x25, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b2_val == 32, rs2_b3_val == 127, rs2_b5_val == 32, rs1_b4_val == 223, rs1_b7_val == 191, rs2_b4_val == 253, rs1_b1_val == 64, rs2_b1_val == 255, rs2_b2_val == 251
// opcode: ursub8 ; op1:x26; op2:x27; dest:x25; op1val:0xbf0c0fdf0f2040ef;  op2val:0x110f20fd7ffbffef
TEST_RR_OP(ursub8, x25, x26, x27, 0x0000000000000000, 0xbf0c0fdf0f2040ef, 0x110f20fd7ffbffef, x3, 64, x4)

inst_9:
// rs1==x2, rs2==x31, rd==x29, rs2_b7_val == 85, rs2_b5_val == 128, rs2_b2_val == 2, rs1_b2_val == 1, rs1_b3_val == 253, rs2_b0_val == 4, rs2_b6_val == 128, rs1_b0_val == 170, rs1_b5_val == 239
// opcode: ursub8 ; op1:x2; op2:x31; dest:x29; op1val:0x100bef0ffd0106aa;  op2val:0x5580800b0e020e04
TEST_RR_OP(ursub8, x29, x2, x31, 0x0000000000000000, 0x100bef0ffd0106aa, 0x5580800b0e020e04, x3, 72, x4)

inst_10:
// rs1==x9, rs2==x13, rd==x20, rs2_b7_val == 223, rs1_b7_val == 255, rs1_b3_val == 239, rs2_b0_val == 32, rs1_b5_val == 1, rs2_b3_val == 4, rs2_b1_val == 253, rs1_b2_val == 128
// opcode: ursub8 ; op1:x9; op2:x13; dest:x20; op1val:0xff0c017fef800c13;  op2val:0xdfef07200400fd20
TEST_RR_OP(ursub8, x20, x9, x13, 0x0000000000000000, 0xff0c017fef800c13, 0xdfef07200400fd20, x3, 80, x4)

inst_11:
// rs1==x28, rs2==x9, rd==x27, rs2_b7_val == 239, rs2_b3_val == 223, rs2_b1_val == 191, rs2_b6_val == 254, rs1_b6_val == 128, rs1_b5_val == 170, rs1_b7_val == 128, rs2_b4_val == 255
// opcode: ursub8 ; op1:x28; op2:x9; dest:x27; op1val:0x8080aa110701efaa;  op2val:0xeffe0dffdf80bf04
TEST_RR_OP(ursub8, x27, x28, x9, 0x0000000000000000, 0x8080aa110701efaa, 0xeffe0dffdf80bf04, x3, 88, x4)

inst_12:
// rs1==x1, rs2==x29, rd==x28, rs2_b7_val == 247, rs1_b2_val == 8, rs1_b5_val == 32, rs1_b6_val == 85, rs1_b4_val == 191, rs2_b3_val == 2, rs1_b1_val == 8, rs2_b6_val == 0, rs1_b7_val == 251
// opcode: ursub8 ; op1:x1; op2:x29; dest:x28; op1val:0xfb5520bfff080807;  op2val:0xf70020df02fb1304
TEST_RR_OP(ursub8, x28, x1, x29, 0x0000000000000000, 0xfb5520bfff080807, 0xf70020df02fb1304, x3, 96, x4)

inst_13:
// rs1==x20, rs2==x24, rd==x18, rs2_b7_val == 251, rs2_b2_val == 255, rs2_b6_val == 191, rs1_b3_val == 32, rs1_b1_val == 253, rs2_b1_val == 64, rs1_b6_val == 1, rs1_b4_val == 16, rs2_b5_val == 127, rs1_b5_val == 191, rs1_b7_val == 32
// opcode: ursub8 ; op1:x20; op2:x24; dest:x18; op1val:0x2001bf102008fdbf;  op2val:0xfbbf7f0503ff400e
TEST_RR_OP(ursub8, x18, x20, x24, 0x0000000000000000, 0x2001bf102008fdbf, 0xfbbf7f0503ff400e, x3, 104, x4)

inst_14:
// rs1==x15, rs2==x25, rd==x16, rs2_b7_val == 253, rs1_b5_val == 251, rs2_b2_val == 32, rs1_b3_val == 127, rs2_b0_val == 128, rs2_b1_val == 85, rs1_b1_val == 255, rs2_b5_val == 170, rs2_b4_val == 8
// opcode: ursub8 ; op1:x15; op2:x25; dest:x16; op1val:0x130dfbbf7f0cff02;  op2val:0xfdbfaa0806205580
TEST_RR_OP(ursub8, x16, x15, x25, 0x0000000000000000, 0x130dfbbf7f0cff02, 0xfdbfaa0806205580, x3, 112, x4)

inst_15:
// rs1==x6, rs2==x14, rd==x31, rs2_b7_val == 254, rs1_b5_val == 253, rs2_b5_val == 255, rs1_b6_val == 32, rs1_b4_val == 128, rs2_b1_val == 1
// opcode: ursub8 ; op1:x6; op2:x14; dest:x31; op1val:0x720fd80030ff7ef;  op2val:0xfe08ff050d0a0112
TEST_RR_OP(ursub8, x31, x6, x14, 0x0000000000000000, 0x720fd80030ff7ef, 0xfe08ff050d0a0112, x3, 120, x4)

inst_16:
// rs1==x11, rs2==x10, rd==x2, rs2_b7_val == 128, rs2_b4_val == 64, rs1_b5_val == 2, rs1_b2_val == 2, rs2_b1_val == 16
// opcode: ursub8 ; op1:x11; op2:x10; dest:x2; op1val:0xd0e02130d020e11;  op2val:0x8011094001071004
TEST_RR_OP(ursub8, x2, x11, x10, 0x0000000000000000, 0xd0e02130d020e11, 0x8011094001071004, x3, 128, x4)

inst_17:
// rs1==x24, rs2==x19, rd==x23, rs2_b7_val == 64, rs1_b7_val == 253, rs1_b3_val == 191, rs2_b4_val == 170, rs2_b2_val == 254
// opcode: ursub8 ; op1:x24; op2:x19; dest:x23; op1val:0xfd0f020bbf1200df;  op2val:0x401205aa10fe550f
TEST_RR_OP(ursub8, x23, x24, x19, 0x0000000000000000, 0xfd0f020bbf1200df, 0x401205aa10fe550f, x3, 136, x9)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_18:
// rs1==x0, rs2==x20, rd==x24, rs2_b7_val == 32, rs1_b0_val == 128, rs2_b3_val == 64, rs2_b1_val == 8, rs1_b2_val == 239, rs1_b4_val == 1
// opcode: ursub8 ; op1:x0; op2:x20; dest:x24; op1val:0x40050f0111ef0d80;  op2val:0x20080f1240400800
TEST_RR_OP(ursub8, x24, x0, x20, 0x0000000000000000, 0x40050f0111ef0d80, 0x20080f1240400800, x1, 0, x9)

inst_19:
// rs1==x5, rs2==x4, rd==x10, rs2_b7_val == 16, rs1_b7_val == 4, rs2_b3_val == 85, rs2_b1_val == 247, rs2_b4_val == 191, rs1_b2_val == 253
// opcode: ursub8 ; op1:x5; op2:x4; dest:x10; op1val:0x4110f1311fd0b00;  op2val:0x10aa0cbf5509f700
TEST_RR_OP(ursub8, x10, x5, x4, 0x0000000000000000, 0x4110f1311fd0b00, 0x10aa0cbf5509f700, x1, 8, x9)

inst_20:
// rs1==x31, rs2==x21, rd==x7, rs2_b7_val == 8, rs2_b6_val == 64, rs1_b7_val == 170, rs2_b1_val == 128, rs1_b3_val == 251
// opcode: ursub8 ; op1:x31; op2:x21; dest:x7; op1val:0xaa0bff03fb130f13;  op2val:0x8400b0f5500800c
TEST_RR_OP(ursub8, x7, x31, x21, 0x0000000000000000, 0xaa0bff03fb130f13, 0x8400b0f5500800c, x1, 16, x9)

inst_21:
// rs1==x21, rs2==x11, rd==x30, rs2_b7_val == 2, rs1_b2_val == 64, rs1_b7_val == 2, rs2_b3_val == 239, rs1_b3_val == 247, rs2_b6_val == 85, rs2_b5_val == 8, rs1_b0_val == 16
// opcode: ursub8 ; op1:x21; op2:x11; dest:x30; op1val:0x25509dff7400b10;  op2val:0x255080def80070d
TEST_RR_OP(ursub8, x30, x21, x11, 0x0000000000000000, 0x25509dff7400b10, 0x255080def80070d, x1, 24, x9)

inst_22:
// rs1==x17, rs2==x23, rd==x0, rs2_b7_val == 1, rs2_b2_val == 191, rs1_b7_val == 1
// opcode: ursub8 ; op1:x17; op2:x23; dest:x0; op1val:0x105ef0e110b0606;  op2val:0x10c120b20bf09f7
TEST_RR_OP(ursub8, x0, x17, x23, 0x0000000000000000, 0x105ef0e110b0606, 0x10c120b20bf09f7, x1, 32, x9)

inst_23:
// rs1==x10, rs2==x6, rd==x8, rs2_b7_val == 255, rs2_b2_val == 16, rs1_b6_val == 127, rs1_b5_val == 0, rs2_b6_val == 253, rs1_b1_val == 254
// opcode: ursub8 ; op1:x10; op2:x6; dest:x8; op1val:0x127f00050f0cfe11;  op2val:0xfffd030d051004f7
TEST_RR_OP(ursub8, x8, x10, x6, 0x0000000000000000, 0x127f00050f0cfe11, 0xfffd030d051004f7, x1, 40, x9)

inst_24:
// rs1==x29, rs2==x18, rd==x19, rs2_b7_val == 0, rs2_b2_val == 1
// opcode: ursub8 ; op1:x29; op2:x18; dest:x19; op1val:0x20ef0e7f06020e0f;  op2val:0xaa020a0d010609
TEST_RR_OP(ursub8, x19, x29, x18, 0x0000000000000000, 0x20ef0e7f06020e0f, 0xaa020a0d010609, x1, 48, x9)

inst_25:
// rs1==x23, rs2==x17, rd==x26, rs2_b6_val == 127, rs1_b2_val == 191, rs2_b1_val == 239
// opcode: ursub8 ; op1:x23; op2:x17; dest:x26; op1val:0x7f120b06f7bf0213;  op2val:0xf7f08ffef12ef20
TEST_RR_OP(ursub8, x26, x23, x17, 0x0000000000000000, 0x7f120b06f7bf0213, 0xf7f08ffef12ef20, x1, 56, x9)

inst_26:
// rs1==x3, rs2==x2, rd==x11, rs2_b6_val == 223, rs2_b3_val == 170, rs1_b6_val == 223, rs1_b4_val == 85
// opcode: ursub8 ; op1:x3; op2:x2; dest:x11; op1val:0x3dfaa55bf20030b;  op2val:0xfdff7ffaa11ff12
TEST_RR_OP(ursub8, x11, x3, x2, 0x0000000000000000, 0x3dfaa55bf20030b, 0xfdff7ffaa11ff12, x1, 64, x9)

inst_27:
// rs1==x22, rs2==x30, rd==x4, rs2_b6_val == 247, rs1_b3_val == 64, rs1_b7_val == 247
// opcode: ursub8 ; op1:x22; op2:x30; dest:x4; op1val:0xf70f557f40061313;  op2val:0xfdf70b1255bf1205
TEST_RR_OP(ursub8, x4, x22, x30, 0x0000000000000000, 0xf70f557f40061313, 0xfdf70b1255bf1205, x1, 72, x9)

inst_28:
// rs1==x19, rs2==x3, rd==x15, rs2_b6_val == 251, rs1_b3_val == 4, rs1_b0_val == 8, rs2_b2_val == 8, rs2_b0_val == 2
// opcode: ursub8 ; op1:x19; op2:x3; dest:x15; op1val:0x4ef0e0f04130308;  op2val:0x11fb0c0d04080302
TEST_RR_OP(ursub8, x15, x19, x3, 0x0000000000000000, 0x4ef0e0f04130308, 0x11fb0c0d04080302, x1, 80, x9)

inst_29:
// rs1==x8, rs2==x26, rd==x3, rs1_b4_val == 0, rs2_b3_val == 0, rs1_b1_val == 85, rs1_b0_val == 4, rs2_b4_val == 127
// opcode: ursub8 ; op1:x8; op2:x26; dest:x3; op1val:0xf706550020095504;  op2val:0xfb7fff7f00200b0a
TEST_RR_OP(ursub8, x3, x8, x26, 0x0000000000000000, 0xf706550020095504, 0xfb7fff7f00200b0a, x1, 88, x9)

inst_30:
// rs1==x18, rs2==x5, rd==x6, rs1_b3_val == 170, rs2_b6_val == 32, rs2_b5_val == 254, rs2_b4_val == 16, rs2_b0_val == 170
// opcode: ursub8 ; op1:x18; op2:x5; dest:x6; op1val:0xf0b0006aaffff04;  op2val:0x720fe10200003aa
TEST_RR_OP(ursub8, x6, x18, x5, 0x0000000000000000, 0xf0b0006aaffff04, 0x720fe10200003aa, x1, 96, x9)

inst_31:
// rs1==x4, rs2==x22, rd==x17, rs1_b3_val == 85, rs1_b4_val == 247, rs1_b7_val == 239, rs1_b5_val == 8
// opcode: ursub8 ; op1:x4; op2:x22; dest:x17; op1val:0xef0508f75501050d;  op2val:0x220097f12fb0c0d
TEST_RR_OP(ursub8, x17, x4, x22, 0x0000000000000000, 0xef0508f75501050d, 0x220097f12fb0c0d, x1, 104, x9)

inst_32:
// rs1_b3_val == 223, rs1_b5_val == 254, rs2_b2_val == 239, rs1_b6_val == 191, rs1_b0_val == 1, rs1_b1_val == 1
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbbffe01df800101;  op2val:0x6127f0e80efbf02
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0xfbbffe01df800101, 0x6127f0e80efbf02, x1, 112, x9)

inst_33:
// rs1_b3_val == 254, rs2_b5_val == 253, rs2_b0_val == 223, rs1_b5_val == 16, rs2_b4_val == 239, rs1_b7_val == 85, rs1_b1_val == 4
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x55121011fe110404;  op2val:0xf707fdef090c12df
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x55121011fe110404, 0xf707fdef090c12df, x1, 120, x9)

inst_34:
// rs1_b3_val == 128, rs1_b0_val == 64, rs1_b5_val == 64, rs2_b0_val == 64, rs2_b3_val == 247
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x2011400980050640;  op2val:0x60daa7ff7021240
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x2011400980050640, 0x60daa7ff7021240, x1, 128, x9)

inst_35:
// rs1_b3_val == 1, rs1_b2_val == 223, rs2_b1_val == 2, rs2_b0_val == 127
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x380400001df0e02;  op2val:0xb0c030600ef027f
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x380400001df0e02, 0xb0c030600ef027f, x1, 136, x9)

inst_36:
// rs1_b3_val == 0, rs2_b4_val == 251, rs2_b0_val == 254, rs2_b3_val == 8
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x209130e000200bf;  op2val:0xbf77ffb080b0dfe
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x209130e000200bf, 0xbf77ffb080b0dfe, x1, 144, x9)

inst_37:
// rs1_b2_val == 170, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x411bffe80aa7f13;  op2val:0xf0606fd090b1240
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x411bffe80aa7f13, 0xf0606fd090b1240, x1, 152, x9)

inst_38:
// rs1_b2_val == 85, rs1_b6_val == 251, rs2_b3_val == 191, rs1_b0_val == 127
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x3fb0f7f01550c7f;  op2val:0x3aa0908bf000caa
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x3fb0f7f01550c7f, 0x3aa0908bf000caa, x1, 160, x9)

inst_39:
// rs1_b2_val == 247, rs2_b5_val == 191, rs1_b6_val == 253
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x20fd5520fef70b00;  op2val:0x1009bffd07fe06ef
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x20fd5520fef70b00, 0x1009bffd07fe06ef, x1, 168, x9)

inst_40:
// rs1_b2_val == 251, rs1_b6_val == 64, rs2_b4_val == 254, rs2_b0_val == 16, rs1_b0_val == 85
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf4040070dfb1255;  op2val:0xa040ffe06fe2010
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0xbf4040070dfb1255, 0xa040ffe06fe2010, x1, 176, x9)

inst_41:
// rs1_b2_val == 254, rs2_b1_val == 251, rs1_b6_val == 247, rs2_b4_val == 1, rs1_b5_val == 247
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x6f7f71080fe0940;  op2val:0xffaa0e010b20fb0b
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x6f7f71080fe0940, 0xffaa0e010b20fb0b, x1, 184, x9)

inst_42:
// rs1_b2_val == 16, rs2_b4_val == 247, rs1_b6_val == 0, rs2_b2_val == 223, rs2_b5_val == 85, rs1_b4_val == 2
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xb000d027f10020f;  op2val:0xd1255f7aadf0b11
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0xb000d027f10020f, 0xd1255f7aadf0b11, x1, 192, x9)

inst_43:
// rs1_b2_val == 0, rs2_b2_val == 253, rs2_b4_val == 85
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x1012ef1208000a07;  op2val:0x110afd550cfd5500
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x1012ef1208000a07, 0x110afd550cfd5500, x1, 200, x9)

inst_44:
// rs2_b2_val == 4, rs2_b5_val == 223
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x6fd060620121280;  op2val:0x8aadfaaff04fdff
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x6fd060620121280, 0x8aadfaaff04fdff, x1, 208, x9)

inst_45:
// rs2_b1_val == 170, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb130a0eef09f7ef;  op2val:0x805502f70d0faafe
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0xfb130a0eef09f7ef, 0x805502f70d0faafe, x1, 216, x9)

inst_46:
// rs2_b1_val == 127, rs2_b4_val == 2
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x5200f0620dffdef;  op2val:0x4fb060220fe7f40
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x5200f0620dffdef, 0x4fb060220fe7f40, x1, 224, x9)

inst_47:
// rs2_b1_val == 223, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x509fe0f7faa0610;  op2val:0xef0a02ef1310dffe
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x509fe0f7faa0610, 0xef0a02ef1310dffe, x1, 232, x9)

inst_48:
// rs2_b1_val == 0, rs2_b3_val == 251, rs1_b0_val == 255
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x6130f08130805ff;  op2val:0x4060eeffb0600aa
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x6130f08130805ff, 0x4060eeffb0600aa, x1, 240, x9)

inst_49:
// rs2_b0_val == 85, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe07067f13120f0c;  op2val:0xaa09200c10100b55
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0xfe07067f13120f0c, 0xaa09200c10100b55, x1, 248, x9)

inst_50:
// rs2_b0_val == 251, rs1_b1_val == 16
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x1130b130f0f1080;  op2val:0xefbf7fb012008fb
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x1130b130f0f1080, 0xefbf7fb012008fb, x1, 256, x9)

inst_51:
// rs1_b1_val == 170, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa2010120008aadf;  op2val:0xaa090f06bffd11fb
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0xaa2010120008aadf, 0xaa090f06bffd11fb, x1, 264, x9)

inst_52:
// rs2_b0_val == 8, rs1_b5_val == 128
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x1380800300800afd;  op2val:0x125506550e200f08
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x1380800300800afd, 0x125506550e200f08, x1, 272, x9)

inst_53:
// rs1_b1_val == 191, rs2_b4_val == 128
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x12ef060f0d09bf0f;  op2val:0xfd7f058010041109
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x12ef060f0d09bf0f, 0xfd7f058010041109, x1, 280, x9)

inst_54:
// rs1_b1_val == 223, rs1_b6_val == 254
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fe0c110efbdf0b;  op2val:0x40021205f702feff
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0xf7fe0c110efbdf0b, 0x40021205f702feff, x1, 288, x9)

inst_55:
// rs2_b0_val == 1, rs1_b4_val == 239, rs1_b6_val == 170
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xdaa40efeff7030d;  op2val:0x11207efdffe0901
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0xdaa40efeff7030d, 0x11207efdffe0901, x1, 296, x9)

inst_56:
// rs1_b1_val == 251, rs1_b7_val == 0
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x0a08017f80fb08;  op2val:0x8fbaaaa01fe0355
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x0a08017f80fb08, 0x8fbaaaa01fe0355, x1, 304, x9)

inst_57:
// rs2_b6_val == 16, rs1_b5_val == 223, rs2_b5_val == 16
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x200cdf80120b0408;  op2val:0xd1010050d80fe7f
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x200cdf80120b0408, 0xd1010050d80fe7f, x1, 312, x9)

inst_58:
// rs1_b0_val == 247, rs2_b2_val == 170, rs1_b7_val == 223, rs1_b6_val == 255
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0c407f1305f7;  op2val:0x2fb041111aa0d0b
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0xdfff0c407f1305f7, 0x2fb041111aa0d0b, x1, 320, x9)

inst_59:
// rs1_b7_val == 8, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x855ff070f11efef;  op2val:0xfb0d0b0804080cf7
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x855ff070f11efef, 0xfb0d0b0804080cf7, x1, 328, x9)

inst_60:
// rs2_b5_val == 64, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xa40550201120b03;  op2val:0x806400604fb0205
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0xa40550201120b03, 0x806400604fb0205, x1, 336, x9)

inst_61:
// rs1_b0_val == 251, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfedf07110c8002fb;  op2val:0xbf02400240fb000a
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0xfedf07110c8002fb, 0xbf02400240fb000a, x1, 344, x9)

inst_62:
// rs1_b0_val == 254, rs1_b4_val == 170
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf1355aa2009f7fe;  op2val:0xeffd0d0b11aa4040
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0xdf1355aa2009f7fe, 0xeffd0d0b11aa4040, x1, 352, x9)

inst_63:
// rs1_b0_val == 32, rs2_b3_val == 254, rs1_b4_val == 251
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x97ffbfb0e010920;  op2val:0x304fdf7fe40aafd
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x97ffbfb0e010920, 0x304fdf7fe40aafd, x1, 360, x9)

inst_64:
// rs2_b5_val == 0, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x20a120c80201380;  op2val:0xdfb0055fe08ffbf
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x20a120c80201380, 0xdfb0055fe08ffbf, x1, 368, x9)

inst_65:
// rs1_b6_val == 16, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x1110fe0e13dfff0d;  op2val:0x7f0bfd400103027f
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x1110fe0e13dfff0d, 0x7f0bfd400103027f, x1, 376, x9)

inst_66:
// rs2_b4_val == 0, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f030b020b13df;  op2val:0xaa55fe00090540df
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0xff7f030b020b13df, 0xaa55fe00090540df, x1, 384, x9)

inst_67:
// rs1_b5_val == 4, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x1140040f0d550a08;  op2val:0x2030dbf05070e7f
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x1140040f0d550a08, 0x2030dbf05070e7f, x1, 392, x9)

inst_68:
// rs2_b3_val == 253, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x900125500010920;  op2val:0x10130a7ffd0906aa
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x900125500010920, 0x10130a7ffd0906aa, x1, 400, x9)

inst_69:
// rs1_b5_val == 127, rs1_b4_val == 255
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x12097fff03f77f08;  op2val:0xfe80fb1020fb1340
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x12097fff03f77f08, 0xfe80fb1020fb1340, x1, 408, x9)

inst_70:
// rs1_b6_val == 8, rs2_b2_val == 127
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x08800413127f0b;  op2val:0xdf7f1004137f1313
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x08800413127f0b, 0xdf7f1004137f1313, x1, 416, x9)

inst_71:
// rs1_b1_val == 128, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff10bfbf0380fb;  op2val:0xd0edf01ff0b4006
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0xfeff10bfbf0380fb, 0xd0edf01ff0b4006, x1, 424, x9)

inst_72:
// rs1_b6_val == 2, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x1302fe0740aa400c;  op2val:0xaaaa01401201fdbf
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x1302fe0740aa400c, 0xaaaa01401201fdbf, x1, 432, x9)

inst_73:
// rs1_b1_val == 32, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x55400a13aaef2055;  op2val:0xf0afbaa13040d02
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x55400a13aaef2055, 0xf0afbaa13040d02, x1, 440, x9)

inst_74:
// rs1_b4_val == 253, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x4fd7ffdaa070c02;  op2val:0xfd0cfb03fd0808
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x4fd7ffdaa070c02, 0xfd0cfb03fd0808, x1, 448, x9)

inst_75:
// rs2_b5_val == 239, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x209200004400680;  op2val:0x803ef120d0c1055
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x209200004400680, 0x803ef120d0c1055, x1, 456, x9)

inst_76:
// rs2_b2_val == 247, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x55120f050e080b0d;  op2val:0x120455efbff7df05
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x55120f050e080b0d, 0x120455efbff7df05, x1, 464, x9)

inst_77:
// rs2_b2_val == 85, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xb11df040f0704ef;  op2val:0x9097fff055508f7
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0xb11df040f0704ef, 0x9097fff055508f7, x1, 472, x9)

inst_78:
// rs2_b6_val == 255, 
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf710400010800b05;  op2val:0xfeff13407fff0f55
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0xf710400010800b05, 0xfeff13407fff0f55, x1, 480, x9)

inst_79:
// rs1_b5_val == rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b0_val == 253, rs1_b2_val == 255, rs1_b0_val == 2, rs2_b3_val == 1, rs1_b6_val == 4, rs2_b7_val == 191, rs2_b6_val == 2, rs1_b1_val == 2
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x304077f0fff0202;  op2val:0xbf020706010a0afd
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x304077f0fff0202, 0xbf020706010a0afd, x1, 488, x9)

inst_80:
// rs2_b7_val == 32, rs1_b0_val == 128, rs2_b3_val == 64, rs2_b1_val == 8, rs1_b2_val == 239, rs1_b4_val == 1
// opcode: ursub8 ; op1:x30; op2:x29; dest:x31; op1val:0x40050f0111ef0d80;  op2val:0x20080f1240400800
TEST_RR_OP(ursub8, x31, x30, x29, 0x0000000000000000, 0x40050f0111ef0d80, 0x20080f1240400800, x1, 496, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 63*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
