
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smax16 instruction of the RISC-V RV64PZicsr extension for the smax16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smax16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rd != rs2, rs1==x10, rs2==x30, rd==x10, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h1_val == -21846, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 1024, rs1_h2_val != rs2_h2_val, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 1, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h2_val == 256
// opcode: smax16 ; op1:x10; op2:x30; dest:x10; op1val:0xfffc040000018000;  op2val:0x050100aaaa0005
TEST_RR_OP(smax16, x10, x10, x30, 0x0000000000000000, 0xfffc040000018000, 0x050100aaaa0005, x3, 0, x11)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x9, rs2==x24, rd==x20, rs1_h3_val == rs2_h3_val, rs2_h3_val == -513, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h0_val == 0, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h3_val == -513, rs2_h1_val == 8192, rs1_h0_val == -21846, rs1_h1_val == -1025, rs1_h2_val == -17, rs2_h2_val == 8
// opcode: smax16 ; op1:x9; op2:x24; dest:x20; op1val:0xfdffffeffbffaaaa;  op2val:0xfdff000820000000
TEST_RR_OP(smax16, x20, x9, x24, 0x0000000000000000, 0xfdffffeffbffaaaa, 0xfdff000820000000, x3, 8, x11)

inst_2:
// rs1 == rs2 != rd, rs1==x27, rs2==x27, rd==x17, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h2_val == -33, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h1_val == 0
// opcode: smax16 ; op1:x27; op2:x27; dest:x17; op1val:0x030005fbfffff8;  op2val:0xfdffffdf00000006
TEST_RR_OP(smax16, x17, x27, x27, 0x0000000000000000, 0x030005fbfffff8, 0xfdffffdf00000006, x3, 16, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h0_val == 16, rs1_h3_val == 256, rs1_h1_val == -32768, rs2_h1_val == -4097, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == 8, rs2_h2_val == 2048, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: smax16 ; op1:x1; op2:x1; dest:x1; op1val:0x100fff880000008;  op2val:0x090800efff0010
TEST_RR_OP(smax16, x1, x1, x1, 0x0000000000000000, 0x100fff880000008, 0x090800efff0010, x3, 24, x11)

inst_4:
// rs2 == rd != rs1, rs1==x13, rs2==x5, rd==x5, rs1_h2_val == rs2_h2_val, rs1_h3_val == 1024, rs2_h0_val == 8, rs1_h2_val == 32, rs1_h1_val == 64, rs1_h0_val == 2, rs2_h2_val == 32
// opcode: smax16 ; op1:x13; op2:x5; dest:x5; op1val:0x400002000400002;  op2val:0xfff80020fff60008
TEST_RR_OP(smax16, x5, x13, x5, 0x0000000000000000, 0x400002000400002, 0xfff80020fff60008, x3, 32, x11)

inst_5:
// rs1==x24, rs2==x2, rd==x29, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == 21845, rs2_h1_val == -2049, rs1_h0_val == -16385, rs1_h2_val == -33, rs2_h2_val == -21846, rs1_h3_val == 2048
// opcode: smax16 ; op1:x24; op2:x2; dest:x29; op1val:0x800ffdf0007bfff;  op2val:0xfff8aaaaf7ff5555
TEST_RR_OP(smax16, x29, x24, x2, 0x0000000000000000, 0x800ffdf0007bfff, 0xfff8aaaaf7ff5555, x3, 40, x11)

inst_6:
// rs1==x23, rs2==x26, rd==x6, rs1_h1_val == rs2_h1_val, rs1_h3_val == 1, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 16384, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: smax16 ; op1:x23; op2:x26; dest:x6; op1val:0x01000300050005;  op2val:0x4000aaaa0005fff8
TEST_RR_OP(smax16, x6, x23, x26, 0x0000000000000000, 0x01000300050005, 0x4000aaaa0005fff8, x3, 48, x11)

inst_7:
// rs1==x12, rs2==x13, rd==x9, rs1_h0_val == rs2_h0_val, rs2_h2_val == -1025, rs2_h0_val == -4097, rs1_h1_val == 16, rs1_h2_val == -2049, rs2_h3_val == 16, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h3_val == -5, rs1_h0_val == -4097
// opcode: smax16 ; op1:x12; op2:x13; dest:x9; op1val:0xfffbf7ff0010efff;  op2val:0x10fbffaaaaefff
TEST_RR_OP(smax16, x9, x12, x13, 0x0000000000000000, 0xfffbf7ff0010efff, 0x10fbffaaaaefff, x3, 56, x11)

inst_8:
// rs1==x21, rs2==x16, rd==x12, rs2_h3_val == -21846, rs1_h3_val == 512, rs2_h0_val == 2, rs1_h2_val == 32767, rs2_h2_val == 16384, rs1_h0_val == -257
// opcode: smax16 ; op1:x21; op2:x16; dest:x12; op1val:0x2007ffffff9feff;  op2val:0xaaaa4000fff60002
TEST_RR_OP(smax16, x12, x21, x16, 0x0000000000000000, 0x2007ffffff9feff, 0xaaaa4000fff60002, x3, 64, x11)

inst_9:
// rs1==x7, rs2==x23, rd==x8, rs2_h3_val == 21845, rs1_h3_val == 2, rs1_h1_val == 8, rs1_h0_val == 512, rs2_h1_val == 2048
// opcode: smax16 ; op1:x7; op2:x23; dest:x8; op1val:0x023fff00080200;  op2val:0x555500200800efff
TEST_RR_OP(smax16, x8, x7, x23, 0x0000000000000000, 0x023fff00080200, 0x555500200800efff, x3, 72, x11)

inst_10:
// rs1==x2, rs2==x21, rd==x30, rs2_h3_val == 32767, rs1_h0_val == -65, rs2_h2_val == -129, rs1_h2_val == 8, rs1_h3_val == -257, rs2_h1_val == 512
// opcode: smax16 ; op1:x2; op2:x21; dest:x30; op1val:0xfeff00080008ffbf;  op2val:0x7fffff7f0200c000
TEST_RR_OP(smax16, x30, x2, x21, 0x0000000000000000, 0xfeff00080008ffbf, 0x7fffff7f0200c000, x3, 80, x11)

inst_11:
// rs1==x26, rs2==x15, rd==x16, rs2_h3_val == -16385, rs1_h1_val == 128, rs2_h1_val == 256, rs2_h2_val == -9, rs2_h0_val == 4096
// opcode: smax16 ; op1:x26; op2:x15; dest:x16; op1val:0xfefffff80080c000;  op2val:0xbffffff701001000
TEST_RR_OP(smax16, x16, x26, x15, 0x0000000000000000, 0xfefffff80080c000, 0xbffffff701001000, x3, 88, x11)

inst_12:
// rs1==x18, rs2==x4, rd==x21, rs2_h3_val == -8193, rs2_h1_val == -1025, rs1_h1_val == -5, rs2_h2_val == 4, rs2_h0_val == 256
// opcode: smax16 ; op1:x18; op2:x4; dest:x21; op1val:0x4000006fffb0009;  op2val:0xdfff0004fbff0100
TEST_RR_OP(smax16, x21, x18, x4, 0x0000000000000000, 0x4000006fffb0009, 0xdfff0004fbff0100, x3, 96, x11)

inst_13:
// rs1==x28, rs2==x31, rd==x19, rs2_h3_val == -4097, rs2_h1_val == -8193, rs2_h0_val == -9, rs1_h0_val == 0, rs1_h2_val == -5, rs1_h1_val == -33, rs1_h3_val == 4096
// opcode: smax16 ; op1:x28; op2:x31; dest:x19; op1val:0x1000fffbffdf0000;  op2val:0xefff3fffdffffff7
TEST_RR_OP(smax16, x19, x28, x31, 0x0000000000000000, 0x1000fffbffdf0000, 0xefff3fffdffffff7, x3, 104, x11)

inst_14:
// rs1==x20, rs2==x17, rd==x13, rs2_h3_val == -2049, rs1_h0_val == 2048, rs1_h3_val == -8193, rs2_h1_val == 32, rs2_h0_val == -129
// opcode: smax16 ; op1:x20; op2:x17; dest:x13; op1val:0xdfff000800010800;  op2val:0xf7ff00080020ff7f
TEST_RR_OP(smax16, x13, x20, x17, 0x0000000000000000, 0xdfff000800010800, 0xf7ff00080020ff7f, x3, 112, x7)

inst_15:
// rs1==x15, rs2==x10, rd==x11, rs2_h3_val == -1025, rs2_h0_val == -1025, rs1_h3_val == -65, rs1_h2_val == 16, rs2_h1_val == -65
// opcode: smax16 ; op1:x15; op2:x10; dest:x11; op1val:0xffbf001000100009;  op2val:0xfbfffff7ffbffbff
TEST_RR_OP(smax16, x11, x15, x10, 0x0000000000000000, 0xffbf001000100009, 0xfbfffff7ffbffbff, x3, 120, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:
// rs1==x31, rs2==x0, rd==x4, rs2_h3_val == -257, rs1_h3_val == 16
// opcode: smax16 ; op1:x31; op2:x0; dest:x4; op1val:0x10f7fffffaefff;  op2val:0xfeff000600073fff
TEST_RR_OP(smax16, x4, x31, x0, 0x0000000000000000, 0x10f7fffffaefff, 0xfeff000600073fff, x1, 0, x7)

inst_17:
// rs1==x0, rs2==x12, rd==x28, rs2_h3_val == -129, rs2_h2_val == -257, rs1_h2_val == 1, rs2_h1_val == -32768, rs1_h1_val == -4097, rs2_h0_val == -32768
// opcode: smax16 ; op1:x0; op2:x12; dest:x28; op1val:0xdfff0001efffc000;  op2val:0xff7ffeff80008000
TEST_RR_OP(smax16, x28, x0, x12, 0x0000000000000000, 0xdfff0001efffc000, 0xff7ffeff80008000, x1, 8, x7)

inst_18:
// rs1==x6, rs2==x11, rd==x27, rs2_h3_val == -65, rs1_h2_val == -1, rs1_h0_val == 32767, rs1_h1_val == -129, rs2_h1_val == 16, rs2_h2_val == 0
// opcode: smax16 ; op1:x6; op2:x11; dest:x27; op1val:0xfffaffffff7f7fff;  op2val:0xffbf00000010fff6
TEST_RR_OP(smax16, x27, x6, x11, 0x0000000000000000, 0xfffaffffff7f7fff, 0xffbf00000010fff6, x1, 16, x7)

inst_19:
// rs1==x5, rs2==x8, rd==x22, rs2_h3_val == -33, rs2_h1_val == 4, rs1_h1_val == 1024, rs2_h0_val == -513, rs1_h2_val == -9, rs1_h0_val == -513, rs2_h2_val == 21845
// opcode: smax16 ; op1:x5; op2:x8; dest:x22; op1val:0x05fff70400fdff;  op2val:0xffdf55550004fdff
TEST_RR_OP(smax16, x22, x5, x8, 0x0000000000000000, 0x05fff70400fdff, 0xffdf55550004fdff, x1, 24, x7)

inst_20:
// rs1==x16, rs2==x19, rd==x26, rs2_h3_val == -17, rs2_h2_val == -8193, rs2_h1_val == 2, rs2_h0_val == 1, rs1_h1_val == 4096
// opcode: smax16 ; op1:x16; op2:x19; dest:x26; op1val:0xfffcfffb10000003;  op2val:0xffefdfff00020001
TEST_RR_OP(smax16, x26, x16, x19, 0x0000000000000000, 0xfffcfffb10000003, 0xffefdfff00020001, x1, 32, x7)

inst_21:
// rs1==x29, rs2==x28, rd==x14, rs2_h3_val == -9, rs2_h2_val == -16385, rs1_h3_val == 8, rs2_h1_val == -129, rs1_h2_val == -513, rs2_h0_val == -3
// opcode: smax16 ; op1:x29; op2:x28; dest:x14; op1val:0x08fdff00018000;  op2val:0xfff7bfffff7ffffd
TEST_RR_OP(smax16, x14, x29, x28, 0x0000000000000000, 0x08fdff00018000, 0xfff7bfffff7ffffd, x1, 40, x7)

inst_22:
// rs1==x8, rs2==x20, rd==x23, rs2_h3_val == -5, rs1_h2_val == 2048, rs1_h3_val == 16384
// opcode: smax16 ; op1:x8; op2:x20; dest:x23; op1val:0x400008003fff0200;  op2val:0xfffb3fff0010fff7
TEST_RR_OP(smax16, x23, x8, x20, 0x0000000000000000, 0x400008003fff0200, 0xfffb3fff0010fff7, x1, 48, x7)

inst_23:
// rs1==x25, rs2==x18, rd==x2, rs2_h3_val == -3, rs1_h2_val == -16385, rs1_h0_val == -2049, rs2_h0_val == 4, rs1_h1_val == -9
// opcode: smax16 ; op1:x25; op2:x18; dest:x2; op1val:0xfffabffffff7f7ff;  op2val:0xfffd0005fff80004
TEST_RR_OP(smax16, x2, x25, x18, 0x0000000000000000, 0xfffabffffff7f7ff, 0xfffd0005fff80004, x1, 56, x7)

inst_24:
// rs1==x22, rs2==x29, rd==x0, rs2_h3_val == -2, rs2_h0_val == 1024, rs1_h3_val == -33
// opcode: smax16 ; op1:x22; op2:x29; dest:x0; op1val:0xffdffff7fffb3fff;  op2val:0xfffebfff00020400
TEST_RR_OP(smax16, x0, x22, x29, 0x0000000000000000, 0xffdffff7fffb3fff, 0xfffebfff00020400, x1, 64, x7)

inst_25:
// rs1==x4, rs2==x14, rd==x3, rs2_h3_val == -32768, rs2_h2_val == 16, rs1_h2_val == 256, rs1_h0_val == -129
// opcode: smax16 ; op1:x4; op2:x14; dest:x3; op1val:0x0501000008ff7f;  op2val:0x8000001002005555
TEST_RR_OP(smax16, x3, x4, x14, 0x0000000000000000, 0x0501000008ff7f, 0x8000001002005555, x1, 72, x7)

inst_26:
// rs1==x11, rs2==x9, rd==x24, rs2_h3_val == 8192, 
// opcode: smax16 ; op1:x11; op2:x9; dest:x24; op1val:0x10003fff0009fffc;  op2val:0x2000fff600070007
TEST_RR_OP(smax16, x24, x11, x9, 0x0000000000000000, 0x10003fff0009fffc, 0x2000fff600070007, x1, 80, x7)

inst_27:
// rs1==x19, rs2==x3, rd==x31, rs2_h3_val == 4096, rs1_h1_val == 4, rs1_h2_val == -4097, rs1_h3_val == 21845, rs1_h0_val == 256
// opcode: smax16 ; op1:x19; op2:x3; dest:x31; op1val:0x5555efff00040100;  op2val:0x100000090005fff7
TEST_RR_OP(smax16, x31, x19, x3, 0x0000000000000000, 0x5555efff00040100, 0x100000090005fff7, x1, 88, x2)

inst_28:
// rs1==x3, rs2==x25, rd==x7, rs2_h3_val == 2048, rs1_h2_val == -8193, rs1_h0_val == 4, rs2_h2_val == 1, rs2_h0_val == 32767
// opcode: smax16 ; op1:x3; op2:x25; dest:x7; op1val:0x800dfffc0000004;  op2val:0x800000100207fff
TEST_RR_OP(smax16, x7, x3, x25, 0x0000000000000000, 0x800dfffc0000004, 0x800000100207fff, x1, 96, x2)

inst_29:
// rs1==x14, rs2==x7, rd==x15, rs2_h3_val == 1024, rs1_h1_val == -3, rs1_h3_val == 0
// opcode: smax16 ; op1:x14; op2:x7; dest:x15; op1val:0x00bffffffd0000;  op2val:0x4000005f7ffefff
TEST_RR_OP(smax16, x15, x14, x7, 0x0000000000000000, 0x00bffffffd0000, 0x4000005f7ffefff, x1, 104, x2)

inst_30:
// rs1==x30, rs2==x22, rd==x18, rs2_h3_val == 512, rs1_h0_val == 1024, rs1_h3_val == -16385
// opcode: smax16 ; op1:x30; op2:x22; dest:x18; op1val:0xbfffeffffbff0400;  op2val:0x200fffcffbf0000
TEST_RR_OP(smax16, x18, x30, x22, 0x0000000000000000, 0xbfffeffffbff0400, 0x200fffcffbf0000, x1, 112, x2)

inst_31:
// rs1==x17, rs2==x6, rd==x25, rs2_h3_val == 256, rs1_h2_val == 8192, rs1_h3_val == 128, rs1_h0_val == -8193, rs2_h2_val == 32767
// opcode: smax16 ; op1:x17; op2:x6; dest:x25; op1val:0x802000fffbdfff;  op2val:0x1007ffffffc0010
TEST_RR_OP(smax16, x25, x17, x6, 0x0000000000000000, 0x802000fffbdfff, 0x1007ffffffc0010, x1, 120, x2)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_32:
// rs2_h3_val == 128, rs2_h0_val == -1, rs1_h0_val == 4096, rs2_h1_val == 21845, rs1_h1_val == -16385
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x05ffefbfff1000;  op2val:0x80feff5555ffff
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x05ffefbfff1000, 0x80feff5555ffff, x1, 0, x2)

inst_33:
// rs2_h3_val == 64, rs1_h3_val == -1025, rs1_h2_val == 4, rs2_h1_val == -33
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000400050100;  op2val:0x400100ffdf0005
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfbff000400050100, 0x400100ffdf0005, x1, 8, x2)

inst_34:
// rs1_h1_val == -2, rs1_h3_val == -3, rs1_h2_val == -21846
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdaaaafffebfff;  op2val:0xc000fff8fbff0009
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfffdaaaafffebfff, 0xc000fff8fbff0009, x1, 16, x2)

inst_35:
// rs1_h1_val == 16384, rs1_h3_val == -129, rs1_h0_val == -1025, rs1_h2_val == -32768
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f80004000fbff;  op2val:0x2000000300050100
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xff7f80004000fbff, 0x2000000300050100, x1, 24, x2)

inst_36:
// rs1_h1_val == 8192, rs2_h3_val == 8
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fffb20000002;  op2val:0x0800200005fbff
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x80fffb20000002, 0x0800200005fbff, x1, 32, x2)

inst_37:
// rs1_h1_val == 2048, rs1_h0_val == -5, rs1_h2_val == 21845
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff55550800fffb;  op2val:0xfff900040020fff9
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfeff55550800fffb, 0xfff900040020fff9, x1, 40, x2)

inst_38:
// rs1_h1_val == 512, rs2_h2_val == 4096, rs2_h0_val == 2048
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffc00002000007;  op2val:0xffef100080000800
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfeffc00002000007, 0xffef100080000800, x1, 48, x2)

inst_39:
// rs1_h1_val == 256, rs2_h1_val == 1, rs2_h3_val == 32
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf000501000004;  op2val:0x20000100017fff
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xffbf000501000004, 0x20000100017fff, x1, 56, x2)

inst_40:
// rs1_h1_val == 32, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x083fff0020fdff;  op2val:0x050020dffffff8
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x083fff0020fdff, 0x050020dffffff8, x1, 64, x2)

inst_41:
// rs1_h1_val == 2, rs2_h1_val == -1, rs2_h3_val == -1, rs1_h3_val == 32, rs1_h2_val == -129
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x20ff7f0002f7ff;  op2val:0xffff0020fffffff6
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x20ff7f0002f7ff, 0xffff0020fffffff6, x1, 72, x2)

inst_42:
// rs1_h1_val == 0, rs2_h1_val == -513
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000300000400;  op2val:0xefffbffffdff0005
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x4000000300000400, 0xefffbffffdff0005, x1, 80, x2)

inst_43:
// rs1_h1_val == -1, rs2_h1_val == 128, rs1_h0_val == 64
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0007fffffff0040;  op2val:0xfeffc0000080fff6
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xc0007fffffff0040, 0xfeffc0000080fff6, x1, 88, x2)

inst_44:
// rs1_h0_val == 21845, rs2_h1_val == -9
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x050008fff85555;  op2val:0x070005fff71000
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x050008fff85555, 0x070005fff71000, x1, 96, x2)

inst_45:
// rs1_h0_val == -33, rs2_h1_val == -5, rs1_h2_val == -3
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffd0100ffdf;  op2val:0x80000004fffb0008
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfff8fffd0100ffdf, 0x80000004fffb0008, x1, 104, x2)

inst_46:
// rs1_h0_val == -17, rs2_h0_val == -33, rs2_h1_val == -257, rs2_h2_val == 512, rs1_h2_val == -257
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x80feff0007ffef;  op2val:0x8000200feffffdf
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x80feff0007ffef, 0x8000200feffffdf, x1, 112, x2)

inst_47:
// rs1_h0_val == -9, rs1_h2_val == 64, rs1_h1_val == -65
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60040ffbffff7;  op2val:0xfffa0010dfff0009
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfff60040ffbffff7, 0xfffa0010dfff0009, x1, 120, x2)

inst_48:
// rs1_h0_val == -3, rs1_h3_val == 8192
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000010fff8fffd;  op2val:0xf7fffff6ffff0000
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x20000010fff8fffd, 0xf7fffff6ffff0000, x1, 128, x2)

inst_49:
// rs1_h0_val == -2, rs2_h3_val == 0
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fffafffcfffe;  op2val:0x00fff900200003
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x05fffafffcfffe, 0x00fff900200003, x1, 136, x2)

inst_50:
// rs1_h0_val == 16384, rs2_h3_val == 1, rs1_h3_val == -1, rs2_h2_val == -4097, rs1_h2_val == 0
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0000fff94000;  op2val:0x01efffffdffff6
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xffff0000fff94000, 0x01efffffdffff6, x1, 144, x2)

inst_51:
// rs1_h0_val == 8192, rs2_h0_val == -65, rs1_h3_val == -21846
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000501002000;  op2val:0x03efff0003ffbf
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xaaaa000501002000, 0x03efff0003ffbf, x1, 152, x2)

inst_52:
// rs1_h0_val == 128, rs2_h2_val == -17
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfdffffffe0080;  op2val:0xfffbffef8000ff7f
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xffbfdffffffe0080, 0xfffbffef8000ff7f, x1, 160, x2)

inst_53:
// rs1_h0_val == 32, rs2_h3_val == 4, rs1_h3_val == 64, rs2_h1_val == 64
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x40fffffffe0020;  op2val:0x0400050040fffa
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x40fffffffe0020, 0x0400050040fffa, x1, 168, x2)

inst_54:
// rs1_h0_val == 16, rs2_h0_val == 64, rs2_h2_val == -32768
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff80003fffb0010;  op2val:0xffff8000ffbf0040
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfff80003fffb0010, 0xffff8000ffbf0040, x1, 176, x2)

inst_55:
// rs2_h0_val == -21846, rs1_h0_val == 1, rs1_h1_val == -2049
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfdfff7ff0001;  op2val:0x200001fffcaaaa
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfffcfdfff7ff0001, 0x200001fffcaaaa, x1, 184, x2)

inst_56:
// rs2_h0_val == -16385, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fffc0000fdff;  op2val:0xbfff3ffffffbbfff
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x05fffc0000fdff, 0xbfff3ffffffbbfff, x1, 192, x2)

inst_57:
// rs2_h0_val == -8193, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000fbfffdff;  op2val:0xfff8fffcfffadfff
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xc0000000fbfffdff, 0xfff8fffcfffadfff, x1, 200, x2)

inst_58:
// rs2_h0_val == -2049, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x03dfff00020002;  op2val:0xfff90005fdfff7ff
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x03dfff00020002, 0xfff90005fdfff7ff, x1, 208, x2)

inst_59:
// rs2_h0_val == -257, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0100fffc0008;  op2val:0xefff0003fff9feff
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xbfff0100fffc0008, 0xefff0003fff9feff, x1, 216, x2)

inst_60:
// rs2_h0_val == -17, rs2_h3_val == 2, rs1_h1_val == -513, rs1_h2_val == 128
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0080fdff0009;  op2val:0x027fff0005ffef
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfeff0080fdff0009, 0x027fff0005ffef, x1, 224, x2)

inst_61:
// rs2_h0_val == -5, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfefffefffaaaa;  op2val:0x20fff90002fffb
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xffdfefffefffaaaa, 0x20fff90002fffb, x1, 232, x2)

inst_62:
// rs2_h0_val == -2, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfaaaaffff0004;  op2val:0x03ffdf0010fffe
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xffdfaaaaffff0004, 0x03ffdf0010fffe, x1, 240, x2)

inst_63:
// rs2_h0_val == 16384, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x80aaaafff6fffc;  op2val:0x55557fff80004000
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x80aaaafff6fffc, 0x55557fff80004000, x1, 248, x2)

inst_64:
// rs2_h0_val == 8192, rs2_h2_val == -513
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x000040fffe7fff;  op2val:0xfffffdfffffc2000
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x000040fffe7fff, 0xfffffdfffffc2000, x1, 256, x2)

inst_65:
// rs2_h0_val == 512, rs2_h1_val == 4096
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffdffbfff0040;  op2val:0x7fff001010000200
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfefffdffbfff0040, 0x7fff001010000200, x1, 264, x2)

inst_66:
// rs2_h0_val == 128, rs1_h3_val == -2049
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0010fff9c000;  op2val:0x1000200ffdf0080
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xf7ff0010fff9c000, 0x1000200ffdf0080, x1, 272, x2)

inst_67:
// rs2_h0_val == 32, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000ffefefff0000;  op2val:0x00000600100020
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x4000ffefefff0000, 0x00000600100020, x1, 280, x2)

inst_68:
// rs1_h3_val == 32767, rs2_h2_val == -5
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0008c000ffef;  op2val:0x4000fffb02000020
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x7fff0008c000ffef, 0x4000fffb02000020, x1, 288, x2)

inst_69:
// rs1_h3_val == -4097, rs2_h1_val == 16384, rs1_h0_val == -1
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff00090010ffff;  op2val:0xfffd100040000020
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xefff00090010ffff, 0xfffd100040000020, x1, 296, x2)

inst_70:
// rs1_h3_val == -17, rs1_h2_val == 2
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef000200070003;  op2val:0x01effffffb0005
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xffef000200070003, 0x01effffffb0005, x1, 304, x2)

inst_71:
// rs1_h3_val == -9, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffef00081000;  op2val:0x1000fffb00090006
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfff7ffef00081000, 0x1000fffb00090006, x1, 312, x2)

inst_72:
// rs1_h3_val == -2, rs2_h1_val == -3, rs2_h2_val == 2
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefff6ffdf0800;  op2val:0x200002fffddfff
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfffefff6ffdf0800, 0x200002fffddfff, x1, 320, x2)

inst_73:
// rs2_h2_val == -2049, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0400fffbfffc;  op2val:0xfffbf7ff00032000
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfdff0400fffbfffc, 0xfffbf7ff00032000, x1, 328, x2)

inst_74:
// rs2_h2_val == -65, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa080020000002;  op2val:0xc000ffbffefffdff
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfffa080020000002, 0xc000ffbffefffdff, x1, 336, x2)

inst_75:
// rs1_h3_val == 4, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x04ffdf0001ffef;  op2val:0x7fff40008000c000
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x04ffdf0001ffef, 0x7fff40008000c000, x1, 344, x2)

inst_76:
// rs2_h2_val == -3, rs1_h3_val == -32768
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000ff7f0010dfff;  op2val:0xfefffffd0000ffbf
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x8000ff7f0010dfff, 0xfefffffd0000ffbf, x1, 352, x2)

inst_77:
// rs2_h2_val == -2, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaff7f4000fffc;  op2val:0xfefffffef7ff0080
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xaaaaff7f4000fffc, 0xfefffffef7ff0080, x1, 360, x2)

inst_78:
// rs2_h2_val == 8192, rs2_h1_val == -2
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555000480000005;  op2val:0xfeff2000fffeefff
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x5555000480000005, 0xfeff2000fffeefff, x1, 368, x2)

inst_79:
// rs2_h2_val == 1024, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffff8efffc000;  op2val:0xfff804000001c000
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfbfffff8efffc000, 0xfff804000001c000, x1, 376, x2)

inst_80:
// rs1_h2_val == -1025, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffbfffffe0007;  op2val:0x40f7ff00200008
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xbffffbfffffe0007, 0x40f7ff00200008, x1, 384, x2)

inst_81:
// rs2_h2_val == 128, rs1_h2_val == -65
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000ffbffdfff7ff;  op2val:0x020080fffffffb
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xc000ffbffdfff7ff, 0x020080fffffffb, x1, 392, x2)

inst_82:
// rs2_h2_val == 64, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x800fff7ff7ffffc;  op2val:0x1000401000fffd
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x800fff7ff7ffffc, 0x1000401000fffd, x1, 400, x2)

inst_83:
// rs1_h2_val == -2, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffebfff7fff;  op2val:0xffdfdffffeff4000
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfff6fffebfff7fff, 0xffdfdffffeff4000, x1, 408, x2)

inst_84:
// rs2_h2_val == -1, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x0800000040fff8;  op2val:0x7fffffffaaaaaaaa
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x0800000040fff8, 0x7fffffffaaaaaaaa, x1, 416, x2)

inst_85:
// rs1_h2_val == 16384, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8400080000000;  op2val:0x100fff8fffffff9
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfff8400080000000, 0x100fff8fffffff9, x1, 424, x2)

inst_86:
// rs1_h2_val == 4096, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff910000000f7ff;  op2val:0x5555fffd0007bfff
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfff910000000f7ff, 0x5555fffd0007bfff, x1, 432, x2)

inst_87:
// rs2_h1_val == 32767, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffdf2000ffbf;  op2val:0x1080007ffffeff
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xbfffffdf2000ffbf, 0x1080007ffffeff, x1, 440, x2)

inst_88:
// rs2_h1_val == -16385, rs1_h1_val == -21846
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0008aaaaffef;  op2val:0xfeff0003bfff0002
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfbff0008aaaaffef, 0xfeff0003bfff0002, x1, 448, x2)

inst_89:
// rs1_h2_val == 512, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x0502000800fffd;  op2val:0x20fff80040aaaa
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x0502000800fffd, 0x20fff80040aaaa, x1, 456, x2)

inst_90:
// rs2_h1_val == -17, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0006ffffffbf;  op2val:0x07fffeffeffffd
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xffef0006ffffffbf, 0x07fffeffeffffd, x1, 464, x2)

inst_91:
// rs1_h1_val == 21845, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000455553fff;  op2val:0x01fdff10003fff
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfffb000455553fff, 0x01fdff10003fff, x1, 472, x2)

inst_92:
// rs1_h1_val == 32767, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x0800047fff2000;  op2val:0xff7faaaa2000fff7
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x0800047fff2000, 0xff7faaaa2000fff7, x1, 480, x2)

inst_93:
// rs1_h1_val == -8193, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff90200dffffeff;  op2val:0xefffffff01005555
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfff90200dffffeff, 0xefffffff01005555, x1, 488, x2)

inst_94:
// rs2_h1_val == 1024, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fff8efff0020;  op2val:0x0500040400fbff
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x00fff8efff0020, 0x0500040400fbff, x1, 496, x2)

inst_95:
// rs1_h1_val == -257, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fefffefffffa;  op2val:0xffbf004001000004
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xfff7fefffefffffa, 0xffbf004001000004, x1, 504, x2)

inst_96:
// rs1_h1_val == -17, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fffcffef0010;  op2val:0x2000040020c000
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x10fffcffef0010, 0x2000040020c000, x1, 512, x2)

inst_97:
// rs2_h1_val == 8, 
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfefffffbf0020;  op2val:0x0500040008fff9
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xffbfefffffbf0020, 0x0500040008fff9, x1, 520, x2)

inst_98:
// rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h0_val == 16, rs1_h3_val == 256, rs1_h1_val == -32768, rs2_h1_val == -4097, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == 8, rs2_h2_val == 2048, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fff880000008;  op2val:0x090800efff0010
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0x100fff880000008, 0x090800efff0010, x1, 528, x2)

inst_99:
// rs2_h3_val == -129, rs2_h2_val == -257, rs1_h2_val == 1, rs2_h1_val == -32768, rs1_h1_val == -4097, rs2_h0_val == -32768
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0001efffc000;  op2val:0xff7ffeff80008000
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xdfff0001efffc000, 0xff7ffeff80008000, x1, 536, x2)

inst_100:
// rs2_h3_val == -2, rs2_h0_val == 1024, rs1_h3_val == -33
// opcode: smax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff7fffb3fff;  op2val:0xfffebfff00020400
TEST_RR_OP(smax16, x31, x30, x29, 0x0000000000000000, 0xffdffff7fffb3fff, 0xfffebfff00020400, x1, 544, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 69*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
