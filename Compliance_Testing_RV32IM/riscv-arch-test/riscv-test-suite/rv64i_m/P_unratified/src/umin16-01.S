
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umin16 instruction of the RISC-V RV64PZicsr extension for the umin16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umin16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x12,signature_x12_1)

inst_0:
// rs1 == rd != rs2, rs1==x21, rs2==x26, rd==x21, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 63487, rs2_h1_val == 128, rs1_h2_val == 65527, rs2_h0_val == 64, rs2_h2_val == 65279
// opcode: umin16 ; op1:x21; op2:x26; dest:x21; op1val:0x07fff7f7ff0000;  op2val:0x09feff00800040
TEST_RR_OP(umin16, x21, x21, x26, 0x0000000000000000, 0x07fff7f7ff0000, 0x09feff00800040, x12, 0, x6)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x3, rs2==x24, rd==x8, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val == 65279, rs2_h1_val == 2048, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 32767, rs2_h3_val == 61439, rs1_h1_val == 65519, rs1_h3_val == 61439, rs2_h2_val == 32768
// opcode: umin16 ; op1:x3; op2:x24; dest:x8; op1val:0xeffffeffffef7fff;  op2val:0xefff800008000040
TEST_RR_OP(umin16, x8, x3, x24, 0x0000000000000000, 0xeffffeffffef7fff, 0xefff800008000040, x12, 8, x6)

inst_2:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x4, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == 4, rs2_h3_val == 16384, rs1_h3_val == 65503, rs1_h0_val == 21845
// opcode: umin16 ; op1:x31; op2:x31; dest:x4; op1val:0xffdf000500095555;  op2val:0x400000050004000c
TEST_RR_OP(umin16, x4, x31, x31, 0x0000000000000000, 0xffdf000500095555, 0x400000050004000c, x12, 16, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 65503, rs1_h3_val == 16384, rs1_h0_val == 65533, rs2_h1_val == 63487
// opcode: umin16 ; op1:x28; op2:x28; dest:x28; op1val:0x4000fefff7fffffd;  op2val:0x0c000cf7ffffdf
TEST_RR_OP(umin16, x28, x28, x28, 0x0000000000000000, 0x4000fefff7fffffd, 0x0c000cf7ffffdf, x12, 24, x6)

inst_4:
// rs2 == rd != rs1, rs1==x19, rs2==x2, rd==x2, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h3_val == 64511, rs1_h1_val == 65534, rs2_h3_val == 32767, rs1_h2_val == 8
// opcode: umin16 ; op1:x19; op2:x2; dest:x2; op1val:0xfbff0008fffe0007;  op2val:0x7fff0013000c0007
TEST_RR_OP(umin16, x2, x19, x2, 0x0000000000000000, 0xfbff0008fffe0007, 0x7fff0013000c0007, x12, 32, x6)

inst_5:
// rs1==x1, rs2==x11, rd==x13, rs2_h3_val == 43690, rs1_h2_val == 65519, rs2_h2_val == 2048, rs2_h0_val == 65531, rs1_h3_val == 32768
// opcode: umin16 ; op1:x1; op2:x11; dest:x13; op1val:0x8000ffef000f0009;  op2val:0xaaaa08000003fffb
TEST_RR_OP(umin16, x13, x1, x11, 0x0000000000000000, 0x8000ffef000f0009, 0xaaaa08000003fffb, x12, 40, x6)

inst_6:
// rs1==x26, rs2==x15, rd==x3, rs2_h3_val == 21845, rs2_h0_val == 65527, rs2_h1_val == 16384, rs2_h2_val == 65535, rs1_h2_val == 2048, rs1_h3_val == 64, rs1_h0_val == 65531
// opcode: umin16 ; op1:x26; op2:x15; dest:x3; op1val:0x400800000dfffb;  op2val:0x5555ffff4000fff7
TEST_RR_OP(umin16, x3, x26, x15, 0x0000000000000000, 0x400800000dfffb, 0x5555ffff4000fff7, x12, 48, x6)

inst_7:
// rs1==x27, rs2==x1, rd==x18, rs2_h3_val == 49151, rs2_h1_val == 32768, rs1_h2_val == 64511, rs1_h0_val == 32768
// opcode: umin16 ; op1:x27; op2:x1; dest:x18; op1val:0x0bfbff000f8000;  op2val:0xbfff000c80000040
TEST_RR_OP(umin16, x18, x27, x1, 0x0000000000000000, 0x0bfbff000f8000, 0xbfff000c80000040, x12, 56, x6)

inst_8:
// rs1==x14, rs2==x7, rd==x1, rs2_h3_val == 57343, rs1_h1_val == 32767, rs2_h0_val == 65534, rs1_h3_val == 0, rs2_h1_val == 65527, rs1_h2_val == 32767
// opcode: umin16 ; op1:x14; op2:x7; dest:x1; op1val:0x007fff7fff0000;  op2val:0xdfff0012fff7fffe
TEST_RR_OP(umin16, x1, x14, x7, 0x0000000000000000, 0x007fff7fff0000, 0xdfff0012fff7fffe, x12, 64, x6)

inst_9:
// rs1==x2, rs2==x3, rd==x22, rs2_h3_val == 63487, rs2_h2_val == 256
// opcode: umin16 ; op1:x2; op2:x3; dest:x22; op1val:0x11fbff000c0013;  op2val:0xf7ff0100000efff7
TEST_RR_OP(umin16, x22, x2, x3, 0x0000000000000000, 0x11fbff000c0013, 0xf7ff0100000efff7, x12, 72, x6)

inst_10:
// rs1==x4, rs2==x10, rd==x27, rs2_h3_val == 64511, rs2_h2_val == 65534, rs1_h0_val == 65407
// opcode: umin16 ; op1:x4; op2:x10; dest:x27; op1val:0x11000f000bff7f;  op2val:0xfbfffffe000c000a
TEST_RR_OP(umin16, x27, x4, x10, 0x0000000000000000, 0x11000f000bff7f, 0xfbfffffe000c000a, x12, 80, x6)

inst_11:
// rs1==x20, rs2==x22, rd==x25, rs2_h3_val == 65023, rs1_h1_val == 64511, rs1_h3_val == 49151, rs2_h0_val == 65407, rs2_h2_val == 65407
// opcode: umin16 ; op1:x20; op2:x22; dest:x25; op1val:0xbfff0003fbfffffd;  op2val:0xfdffff7ffff7ff7f
TEST_RR_OP(umin16, x25, x20, x22, 0x0000000000000000, 0xbfff0003fbfffffd, 0xfdffff7ffff7ff7f, x12, 88, x6)

inst_12:
// rs1==x9, rs2==x30, rd==x11, rs2_h3_val == 65279, rs2_h1_val == 256, rs2_h0_val == 65023, rs1_h1_val == 4096
// opcode: umin16 ; op1:x9; op2:x30; dest:x11; op1val:0xefff001110007fff;  op2val:0xfeff000f0100fdff
TEST_RR_OP(umin16, x11, x9, x30, 0x0000000000000000, 0xefff001110007fff, 0xfeff000f0100fdff, x12, 96, x6)

inst_13:
// rs1==x18, rs2==x13, rd==x20, rs2_h3_val == 65407, rs1_h0_val == 2, rs2_h2_val == 16, rs2_h1_val == 32, rs1_h1_val == 1024, rs1_h3_val == 32767, rs1_h2_val == 21845
// opcode: umin16 ; op1:x18; op2:x13; dest:x20; op1val:0x7fff555504000002;  op2val:0xff7f00100020ffdf
TEST_RR_OP(umin16, x20, x18, x13, 0x0000000000000000, 0x7fff555504000002, 0xff7f00100020ffdf, x12, 104, x6)

inst_14:
// rs1==x7, rs2==x4, rd==x19, rs2_h3_val == 65471, rs1_h3_val == 65407, rs1_h1_val == 49151, rs2_h2_val == 57343, rs2_h1_val == 65407, rs1_h2_val == 1
// opcode: umin16 ; op1:x7; op2:x4; dest:x19; op1val:0xff7f0001bfff5555;  op2val:0xffbfdfffff7ffffe
TEST_RR_OP(umin16, x19, x7, x4, 0x0000000000000000, 0xff7f0001bfff5555, 0xffbfdfffff7ffffe, x12, 112, x6)

inst_15:
// rs1==x16, rs2==x5, rd==x15, rs2_h3_val == 65503, rs2_h2_val == 61439, rs1_h0_val == 61439, rs2_h0_val == 1024, rs1_h2_val == 65535
// opcode: umin16 ; op1:x16; op2:x5; dest:x15; op1val:0x8000ffff000aefff;  op2val:0xffdfefff00130400
TEST_RR_OP(umin16, x15, x16, x5, 0x0000000000000000, 0x8000ffff000aefff, 0xffdfefff00130400, x12, 120, x6)

inst_16:
// rs1==x6, rs2==x18, rd==x26, rs2_h3_val == 65519, rs2_h0_val == 57343, rs1_h3_val == 128, rs2_h2_val == 65531
// opcode: umin16 ; op1:x6; op2:x18; dest:x26; op1val:0x80000e000c0007;  op2val:0xffeffffb000edfff
TEST_RR_OP(umin16, x26, x6, x18, 0x0000000000000000, 0x80000e000c0007, 0xffeffffb000edfff, x12, 128, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_17:
// rs1==x0, rs2==x19, rd==x23, rs2_h3_val == 65527, rs1_h2_val == 512, rs2_h0_val == 1, rs2_h2_val == 128
// opcode: umin16 ; op1:x0; op2:x19; dest:x23; op1val:0x050200000f0012;  op2val:0xfff7008000070001
TEST_RR_OP(umin16, x23, x0, x19, 0x0000000000000000, 0x050200000f0012, 0xfff7008000070001, x1, 0, x2)

inst_18:
// rs1==x22, rs2==x12, rd==x5, rs2_h3_val == 65531, rs2_h0_val == 49151, rs1_h0_val == 65471, rs2_h1_val == 64
// opcode: umin16 ; op1:x22; op2:x12; dest:x5; op1val:0x03000f0009ffbf;  op2val:0xfffb00120040bfff
TEST_RR_OP(umin16, x5, x22, x12, 0x0000000000000000, 0x03000f0009ffbf, 0xfffb00120040bfff, x1, 8, x2)

inst_19:
// rs1==x11, rs2==x0, rd==x31, rs2_h3_val == 65533, rs1_h3_val == 65531, rs2_h2_val == 1024, rs1_h1_val == 65503, rs2_h0_val == 128
// opcode: umin16 ; op1:x11; op2:x0; dest:x31; op1val:0xfffb000bffdf000a;  op2val:0xfffd040040000080
TEST_RR_OP(umin16, x31, x11, x0, 0x0000000000000000, 0xfffb000bffdf000a, 0xfffd040040000080, x1, 16, x2)

inst_20:
// rs1==x15, rs2==x29, rd==x16, rs2_h3_val == 65534, rs1_h1_val == 61439, rs1_h0_val == 57343, rs2_h1_val == 65535, rs1_h2_val == 128, rs2_h0_val == 0
// opcode: umin16 ; op1:x15; op2:x29; dest:x16; op1val:0x7fff0080efffdfff;  op2val:0xfffe0800ffff0000
TEST_RR_OP(umin16, x16, x15, x29, 0x0000000000000000, 0x7fff0080efffdfff, 0xfffe0800ffff0000, x1, 24, x2)

inst_21:
// rs1==x24, rs2==x16, rd==x14, rs2_h3_val == 32768, rs2_h1_val == 65531, rs2_h2_val == 43690
// opcode: umin16 ; op1:x24; op2:x16; dest:x14; op1val:0x0e000e000e000e;  op2val:0x8000aaaafffbfffe
TEST_RR_OP(umin16, x14, x24, x16, 0x0000000000000000, 0x0e000e000e000e, 0x8000aaaafffbfffe, x1, 32, x2)

inst_22:
// rs1==x13, rs2==x9, rd==x30, rs2_h3_val == 8192, rs1_h1_val == 32768, rs2_h2_val == 65023, rs1_h2_val == 256
// opcode: umin16 ; op1:x13; op2:x9; dest:x30; op1val:0x800001008000fffd;  op2val:0x2000fdffff7f0003
TEST_RR_OP(umin16, x30, x13, x9, 0x0000000000000000, 0x800001008000fffd, 0x2000fdffff7f0003, x1, 40, x2)

inst_23:
// rs1==x25, rs2==x6, rd==x9, rs2_h3_val == 4096, rs2_h1_val == 1024
// opcode: umin16 ; op1:x25; op2:x6; dest:x9; op1val:0x0a0100000b0005;  op2val:0x1000dfff04000011
TEST_RR_OP(umin16, x9, x25, x6, 0x0000000000000000, 0x0a0100000b0005, 0x1000dfff04000011, x1, 48, x2)

inst_24:
// rs1==x23, rs2==x25, rd==x29, rs2_h3_val == 2048, 
// opcode: umin16 ; op1:x23; op2:x25; dest:x29; op1val:0xbfff000a00130013;  op2val:0x800010000110080
TEST_RR_OP(umin16, x29, x23, x25, 0x0000000000000000, 0xbfff000a00130013, 0x800010000110080, x1, 56, x2)

inst_25:
// rs1==x5, rs2==x20, rd==x12, rs2_h3_val == 1024, rs2_h2_val == 65519, rs1_h1_val == 65471, rs2_h1_val == 65279, rs1_h3_val == 2048
// opcode: umin16 ; op1:x5; op2:x20; dest:x12; op1val:0x800feffffbffffd;  op2val:0x400ffeffeffbfff
TEST_RR_OP(umin16, x12, x5, x20, 0x0000000000000000, 0x800feffffbffffd, 0x400ffeffeffbfff, x1, 64, x2)

inst_26:
// rs1==x29, rs2==x17, rd==x6, rs2_h3_val == 512, rs1_h3_val == 65471, rs2_h2_val == 64511
// opcode: umin16 ; op1:x29; op2:x17; dest:x6; op1val:0xffbf0080000f0005;  op2val:0x200fbff0020000b
TEST_RR_OP(umin16, x6, x29, x17, 0x0000000000000000, 0xffbf0080000f0005, 0x200fbff0020000b, x1, 72, x2)

inst_27:
// rs1==x8, rs2==x27, rd==x10, rs2_h3_val == 256, rs1_h3_val == 1024, rs2_h0_val == 65279, rs1_h2_val == 65471
// opcode: umin16 ; op1:x8; op2:x27; dest:x10; op1val:0x400ffbf0006dfff;  op2val:0x100000cfefffeff
TEST_RR_OP(umin16, x10, x8, x27, 0x0000000000000000, 0x400ffbf0006dfff, 0x100000cfefffeff, x1, 80, x2)

inst_28:
// rs1==x10, rs2==x8, rd==x17, rs2_h3_val == 128, rs1_h1_val == 65023, rs1_h2_val == 65534, rs1_h3_val == 65519
// opcode: umin16 ; op1:x10; op2:x8; dest:x17; op1val:0xffeffffefdff000e;  op2val:0x80aaaa00060011
TEST_RR_OP(umin16, x17, x10, x8, 0x0000000000000000, 0xffeffffefdff000e, 0x80aaaa00060011, x1, 88, x2)

inst_29:
// rs1==x12, rs2==x23, rd==x0, rs2_h3_val == 64, rs2_h1_val == 65534, rs1_h2_val == 2, rs1_h0_val == 128
// opcode: umin16 ; op1:x12; op2:x23; dest:x0; op1val:0x0b000200090080;  op2val:0x40fdfffffe000d
TEST_RR_OP(umin16, x0, x12, x23, 0x0000000000000000, 0x0b000200090080, 0x40fdfffffe000d, x1, 96, x2)

inst_30:
// rs1==x30, rs2==x14, rd==x24, rs2_h3_val == 32, rs1_h1_val == 1, rs2_h1_val == 65503, rs2_h0_val == 21845
// opcode: umin16 ; op1:x30; op2:x14; dest:x24; op1val:0x09000200010002;  op2val:0x200011ffdf5555
TEST_RR_OP(umin16, x24, x30, x14, 0x0000000000000000, 0x09000200010002, 0x200011ffdf5555, x1, 104, x2)

inst_31:
// rs1==x17, rs2==x21, rd==x7, rs2_h3_val == 16, rs1_h0_val == 49151, rs1_h3_val == 2, rs1_h2_val == 4096, rs2_h0_val == 43690
// opcode: umin16 ; op1:x17; op2:x21; dest:x7; op1val:0x021000ffefbfff;  op2val:0x1000800100aaaa
TEST_RR_OP(umin16, x7, x17, x21, 0x0000000000000000, 0x021000ffefbfff, 0x1000800100aaaa, x1, 112, x2)

inst_32:
// rs2_h3_val == 8, rs1_h3_val == 512, rs1_h1_val == 65535
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000080ffff000d;  op2val:0x08efff00095555
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x2000080ffff000d, 0x08efff00095555, x1, 120, x2)

inst_33:
// rs2_h3_val == 4, rs1_h1_val == 0, rs2_h0_val == 32768, rs1_h3_val == 4096, rs2_h2_val == 32767, rs1_h2_val == 64
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000400000fffb;  op2val:0x047fff000c8000
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x100000400000fffb, 0x047fff000c8000, x1, 128, x2)

inst_34:
// rs2_h3_val == 2, rs2_h1_val == 512, rs2_h0_val == 4096, rs2_h2_val == 2, rs1_h0_val == 8192
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00122000;  op2val:0x02000202001000
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xfbffffff00122000, 0x02000202001000, x1, 136, x2)

inst_35:
// rs2_h3_val == 1, rs1_h1_val == 43690, rs2_h2_val == 32, rs1_h3_val == 65533, rs2_h0_val == 2048, rs2_h1_val == 64511
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd000daaaadfff;  op2val:0x010020fbff0800
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xfffd000daaaadfff, 0x010020fbff0800, x1, 144, x2)

inst_36:
// rs2_h3_val == 65535, rs1_h1_val == 2, rs1_h0_val == 65519, rs2_h1_val == 61439
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000800002ffef;  op2val:0xffff000fefff0006
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x40000800002ffef, 0xffff000fefff0006, x1, 152, x2)

inst_37:
// rs1_h1_val == 4, rs1_h2_val == 0, rs2_h0_val == 2, rs2_h2_val == 1
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000040012;  op2val:0x010001000e0002
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x02000000040012, 0x010001000e0002, x1, 160, x2)

inst_38:
// rs1_h0_val == 43690, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f00010009aaaa;  op2val:0xaaaafffe0400ffdf
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xff7f00010009aaaa, 0xaaaafffe0400ffdf, x1, 168, x2)

inst_39:
// rs1_h0_val == 63487, rs1_h2_val == 1024, rs1_h1_val == 8192
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0204002000f7ff;  op2val:0xffbf000e0005dfff
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x0204002000f7ff, 0xffbf000e0005dfff, x1, 176, x2)

inst_40:
// rs1_h0_val == 64511, rs2_h2_val == 21845
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f00110000fbff;  op2val:0x80005555000cfeff
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xff7f00110000fbff, 0x80005555000cfeff, x1, 184, x2)

inst_41:
// rs1_h0_val == 65023, rs2_h0_val == 65519, rs1_h1_val == 16
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0a00010010fdff;  op2val:0x0700090011ffef
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x0a00010010fdff, 0x0700090011ffef, x1, 192, x2)

inst_42:
// rs1_h0_val == 65279, rs1_h2_val == 65531, rs2_h2_val == 65527, rs2_h0_val == 64511
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fffb000bfeff;  op2val:0x80fff70400fbff
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x02fffb000bfeff, 0x80fff70400fbff, x1, 200, x2)

inst_43:
// rs1_h0_val == 65503, rs1_h1_val == 65279
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x40ffeffeffffdf;  op2val:0xfbff0003000f0040
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x40ffeffeffffdf, 0xfbff0003000f0040, x1, 208, x2)

inst_44:
// rs1_h0_val == 65527, rs1_h2_val == 16384, rs2_h1_val == 65519
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd40000003fff7;  op2val:0x018000ffef0040
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xfffd40000003fff7, 0x018000ffef0040, x1, 216, x2)

inst_45:
// rs1_h0_val == 65534, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x13fff7fffefffe;  op2val:0xff7f040000200400
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x13fff7fffefffe, 0xff7f040000200400, x1, 224, x2)

inst_46:
// rs1_h0_val == 16384, rs1_h2_val == 65503
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffdf10004000;  op2val:0x0b00130005fdff
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x02ffdf10004000, 0x0b00130005fdff, x1, 232, x2)

inst_47:
// rs1_h0_val == 4096, rs2_h0_val == 8192, rs1_h3_val == 65535
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff001104001000;  op2val:0xfff7ffff80002000
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xffff001104001000, 0xfff7ffff80002000, x1, 240, x2)

inst_48:
// rs1_h0_val == 2048, rs2_h1_val == 2, rs1_h1_val == 128
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffb00800800;  op2val:0x08000600020001
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xffbffffb00800800, 0x08000600020001, x1, 248, x2)

inst_49:
// rs1_h0_val == 1024, rs2_h0_val == 65533, rs1_h1_val == 2048
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d000608000400;  op2val:0x11ffef0020fffd
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x0d000608000400, 0x11ffef0020fffd, x1, 256, x2)

inst_50:
// rs1_h0_val == 512, rs1_h2_val == 4
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f000400060200;  op2val:0x110011000cfffb
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xff7f000400060200, 0x110011000cfffb, x1, 264, x2)

inst_51:
// rs1_h0_val == 256, rs1_h3_val == 65279, rs2_h0_val == 4
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffb000b0100;  op2val:0x0d000e00800004
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xfefffffb000b0100, 0x0d000e00800004, x1, 272, x2)

inst_52:
// rs1_h0_val == 64, rs1_h1_val == 16384
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b000840000040;  op2val:0x09dfff0800dfff
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x0b000840000040, 0x09dfff0800dfff, x1, 280, x2)

inst_53:
// rs1_h0_val == 32, rs2_h2_val == 8192
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x057fff000d0020;  op2val:0x400020000080fffd
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x057fff000d0020, 0x400020000080fffd, x1, 288, x2)

inst_54:
// rs1_h0_val == 16, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x030800000c0010;  op2val:0x12000b000bfff7
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x030800000c0010, 0x12000b000bfff7, x1, 296, x2)

inst_55:
// rs1_h0_val == 8, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffdf00000008;  op2val:0x2000fff70005000b
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xffbfffdf00000008, 0x2000fff70005000b, x1, 304, x2)

inst_56:
// rs1_h0_val == 4, rs1_h3_val == 8
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x08555500130004;  op2val:0x80fffe0002fffe
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x08555500130004, 0x80fffe0002fffe, x1, 312, x2)

inst_57:
// rs1_h0_val == 1, rs1_h3_val == 256, rs2_h1_val == 8192, rs1_h2_val == 32768
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x1008000000d0001;  op2val:0x12fff72000aaaa
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x1008000000d0001, 0x12fff72000aaaa, x1, 320, x2)

inst_58:
// rs1_h0_val == 65535, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x400004000005ffff;  op2val:0x1200120007ffef
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x400004000005ffff, 0x1200120007ffef, x1, 328, x2)

inst_59:
// rs2_h3_val == 0, rs2_h1_val == 43690
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffff7bfff0012;  op2val:0x007fffaaaa0001
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xff7ffff7bfff0012, 0x007fffaaaa0001, x1, 336, x2)

inst_60:
// rs2_h2_val == 49151, rs2_h1_val == 57343, rs2_h0_val == 256
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x800000050002fffd;  op2val:0x0abfffdfff0100
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x800000050002fffd, 0x0abfffdfff0100, x1, 344, x2)

inst_61:
// rs2_h2_val == 63487, rs2_h1_val == 65471
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f80000007fff7;  op2val:0x20f7ffffbf0400
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xff7f80000007fff7, 0x20f7ffffbf0400, x1, 352, x2)

inst_62:
// rs2_h2_val == 65471, rs1_h3_val == 4
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x04ffff10000001;  op2val:0x05ffbf00060000
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x04ffff10000001, 0x05ffbf00060000, x1, 360, x2)

inst_63:
// rs2_h0_val == 65471, rs1_h1_val == 65531
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x090013fffb000a;  op2val:0x08f7ffaaaaffbf
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x090013fffb000a, 0x08f7ffaaaaffbf, x1, 368, x2)

inst_64:
// rs2_h0_val == 16384, rs1_h1_val == 65407, rs1_h2_val == 65533
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fffdff7f7fff;  op2val:0x80ffff00124000
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x100fffdff7f7fff, 0x80ffff00124000, x1, 376, x2)

inst_65:
// rs2_h0_val == 512, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0000400400efff;  op2val:0xdfff5555dfff0200
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x0000400400efff, 0xdfff5555dfff0200, x1, 384, x2)

inst_66:
// rs2_h0_val == 32, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x050011fffb0100;  op2val:0xdfff000500020020
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x050011fffb0100, 0xdfff000500020020, x1, 392, x2)

inst_67:
// rs2_h0_val == 16, rs1_h3_val == 16
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000042000fff7;  op2val:0x20000800f7ff0010
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x1000042000fff7, 0x20000800f7ff0010, x1, 400, x2)

inst_68:
// rs2_h0_val == 8, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x40fff7bfff0013;  op2val:0x11000500050008
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x40fff7bfff0013, 0x11000500050008, x1, 408, x2)

inst_69:
// rs2_h0_val == 65535, rs1_h3_val == 65534
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffb80000100;  op2val:0xffbf000af7ffffff
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xfffefffb80000100, 0xffbf000af7ffffff, x1, 416, x2)

inst_70:
// rs1_h3_val == 43690, rs2_h1_val == 65533, rs1_h2_val == 61439
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaeffffffbffef;  op2val:0xdfff2000fffd0080
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xaaaaeffffffbffef, 0xdfff2000fffd0080, x1, 424, x2)

inst_71:
// rs1_h3_val == 21845, rs1_h1_val == 65527
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffbffff7ffbf;  op2val:0x2000000f00400008
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x5555ffbffff7ffbf, 0x2000000f00400008, x1, 432, x2)

inst_72:
// rs1_h3_val == 57343, rs1_h1_val == 21845
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff755550000;  op2val:0x13ffeff7ffff7f
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xdffffff755550000, 0x13ffeff7ffff7f, x1, 440, x2)

inst_73:
// rs1_h3_val == 63487, rs2_h1_val == 1
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffdfffefffff;  op2val:0x097fff0001fff7
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xf7ffffdfffefffff, 0x097fff0001fff7, x1, 448, x2)

inst_74:
// rs1_h3_val == 65023, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0009ffefffdf;  op2val:0x060013fff70000
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xfdff0009ffefffdf, 0x060013fff70000, x1, 456, x2)

inst_75:
// rs1_h3_val == 65527, rs1_h1_val == 64
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7000800400011;  op2val:0xfff7feff08000010
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xfff7000800400011, 0xfff7feff08000010, x1, 464, x2)

inst_76:
// rs1_h3_val == 8192, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x20004000feffffef;  op2val:0xaaaa0005ffef0009
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x20004000feffffef, 0xaaaa0005ffef0009, x1, 472, x2)

inst_77:
// rs1_h3_val == 32, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x20010000040000;  op2val:0xfdff000600130002
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x20010000040000, 0xfdff000600130002, x1, 480, x2)

inst_78:
// rs2_h2_val == 65503, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff40002000ffff;  op2val:0x0affdf00050013
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x7fff40002000ffff, 0x0affdf00050013, x1, 488, x2)

inst_79:
// rs1_h3_val == 1, rs2_h2_val == 4, rs2_h1_val == 4096
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x01800080000012;  op2val:0x0a000410000005
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x01800080000012, 0x0a000410000005, x1, 496, x2)

inst_80:
// rs2_h2_val == 65533, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x077fff000dfffb;  op2val:0xeffffffdfffbdfff
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x077fff000dfffb, 0xeffffffdfffbdfff, x1, 504, x2)

inst_81:
// rs2_h2_val == 16384, rs1_h2_val == 32
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0020ffef8000;  op2val:0x104000f7ff4000
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xffef0020ffef8000, 0x104000f7ff4000, x1, 512, x2)

inst_82:
// rs1_h2_val == 49151, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0fbfffffdf0006;  op2val:0x0e00200020fbff
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x0fbfffffdf0006, 0x0e00200020fbff, x1, 520, x2)

inst_83:
// rs1_h2_val == 57343, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffdffffff70005;  op2val:0xfffb000420000001
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xfbffdffffff70005, 0xfffb000420000001, x1, 528, x2)

inst_84:
// rs2_h2_val == 4096, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x80010000110008;  op2val:0x0b100000070400
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x80010000110008, 0x0b100000070400, x1, 536, x2)

inst_85:
// rs1_h2_val == 63487, rs1_h1_val == 65533
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x04f7fffffdefff;  op2val:0x204000000e0005
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x04f7fffffdefff, 0x204000000e0005, x1, 544, x2)

inst_86:
// rs2_h2_val == 512, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff00120013fff7;  op2val:0x200020002000007
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xefff00120013fff7, 0x200020002000007, x1, 552, x2)

inst_87:
// rs1_h2_val == 65023, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0efdff2000000f;  op2val:0xfeff0800000f0040
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x0efdff2000000f, 0xfeff0800000f0040, x1, 560, x2)

inst_88:
// rs1_h2_val == 65407, rs1_h1_val == 8
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaff7f0008fffd;  op2val:0x407fffdfff0012
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xaaaaff7f0008fffd, 0x407fffdfff0012, x1, 568, x2)

inst_89:
// rs2_h2_val == 64, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x10400000040020;  op2val:0xffef004000078000
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x10400000040020, 0xffef004000078000, x1, 576, x2)

inst_90:
// rs2_h2_val == 8, rs1_h1_val == 512
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff001102000007;  op2val:0x040008fffbfffd
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xbfff001102000007, 0x040008fffbfffd, x1, 584, x2)

inst_91:
// rs2_h2_val == 0, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x400040000008fff7;  op2val:0x4000000012fffe
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x400040000008fff7, 0x4000000012fffe, x1, 592, x2)

inst_92:
// rs1_h2_val == 8192, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x1120000007fffe;  op2val:0x11aaaaffbf000e
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x1120000007fffe, 0x11aaaaffbf000e, x1, 600, x2)

inst_93:
// rs1_h1_val == 57343, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x200004dfff000b;  op2val:0x0f000f00800040
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x200004dfff000b, 0x0f000f00800040, x1, 608, x2)

inst_94:
// rs1_h2_val == 16, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x120010fff7fffd;  op2val:0xfffd7fffffdf8000
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x120010fff7fffd, 0xfffd7fffffdf8000, x1, 616, x2)

inst_95:
// rs2_h0_val == 61439, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b080000130020;  op2val:0x4000dfff000aefff
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x0b080000130020, 0x4000dfff000aefff, x1, 624, x2)

inst_96:
// rs2_h1_val == 16, rs2_h0_val == 63487
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff7fbff0009;  op2val:0x02ff7f0010f7ff
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x4000fff7fbff0009, 0x02ff7f0010f7ff, x1, 632, x2)

inst_97:
// rs2_h1_val == 8, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000640007fff;  op2val:0x13000a0008ff7f
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xf7ff000640007fff, 0x13000a0008ff7f, x1, 640, x2)

inst_98:
// rs2_h1_val == 21845, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffef0080000b;  op2val:0x1000001155550100
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x8000ffef0080000b, 0x1000001155550100, x1, 648, x2)

inst_99:
// rs2_h1_val == 32767, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffd10000400;  op2val:0xdfffffef7fff0004
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xffeffffd10000400, 0xdfffffef7fff0004, x1, 656, x2)

inst_100:
// rs2_h1_val == 49151, rs2_h0_val == 32767
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x1220000009fdff;  op2val:0xfffebfffbfff7fff
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x1220000009fdff, 0xfffebfffbfff7fff, x1, 664, x2)

inst_101:
// rs2_h1_val == 0, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000080f7ff0013;  op2val:0x2000000800000200
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x10000080f7ff0013, 0x2000000800000200, x1, 672, x2)

inst_102:
// rs2_h1_val == 65023, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d0002000d0800;  op2val:0xfdffdffffdffff7f
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x0d0002000d0800, 0xfdffdffffdffff7f, x1, 680, x2)

inst_103:
// rs1_h1_val == 32, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x400ffdf00200200;  op2val:0x7ffffbff20002000
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x400ffdf00200200, 0x7ffffbff20002000, x1, 688, x2)

inst_104:
// rs1_h1_val == 256, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffe0100000d;  op2val:0x120040ffff1000
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x5555fffe0100000d, 0x120040ffff1000, x1, 696, x2)

inst_105:
// rs1_h2_val == 43690, 
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x800aaaa2000000e;  op2val:0x2010004000ffef
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x800aaaa2000000e, 0x2010004000ffef, x1, 704, x2)

inst_106:
// rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == 4, rs2_h3_val == 16384, rs1_h3_val == 65503, rs1_h0_val == 21845
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000500095555;  op2val:0x400000050004000c
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xffdf000500095555, 0x400000050004000c, x1, 712, x2)

inst_107:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 65503, rs1_h3_val == 16384, rs1_h0_val == 65533, rs2_h1_val == 63487
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fefff7fffffd;  op2val:0x0c000cf7ffffdf
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x4000fefff7fffffd, 0x0c000cf7ffffdf, x1, 720, x2)

inst_108:
// rs2_h3_val == 65527, rs1_h2_val == 512, rs2_h0_val == 1, rs2_h2_val == 128
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x050200000f0012;  op2val:0xfff7008000070001
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x050200000f0012, 0xfff7008000070001, x1, 728, x2)

inst_109:
// rs2_h3_val == 65533, rs1_h3_val == 65531, rs2_h2_val == 1024, rs1_h1_val == 65503, rs2_h0_val == 128
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000bffdf000a;  op2val:0xfffd040040000080
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0xfffb000bffdf000a, 0xfffd040040000080, x1, 736, x2)

inst_110:
// rs2_h3_val == 64, rs2_h1_val == 65534, rs1_h2_val == 2, rs1_h0_val == 128
// opcode: umin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b000200090080;  op2val:0x40fdfffffe000d
TEST_RR_OP(umin16, x31, x30, x29, 0x0000000000000000, 0x0b000200090080, 0x40fdfffffe000d, x1, 744, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 94*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
