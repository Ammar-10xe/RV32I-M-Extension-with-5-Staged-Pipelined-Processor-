
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uradd8 instruction of the RISC-V RV64PZicsr extension for the uradd8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uradd8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:// rs1 == rd != rs2, rs1==x29, rs2==x1, rd==x29, rs1_b0_val == 0, rs1_b7_val != rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b3_val == 85, rs1_b6_val != rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b5_val != rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b4_val != rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b6_val == 223, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b1_val == 191, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b3_val == 32, rs2_b2_val == 127, rs1_b6_val == 255, rs1_b4_val == 4
// opcode: uradd8 ; op1:x29; op2:x1; dest:x29; op1val:0x11ff0b0455110a00;  op2val:0xddf050d207fbf11
TEST_RR_OP(uradd8, x29, x29, x1, 0x0000000000000000, 0x11ff0b0455110a00, 0xddf050d207fbf11, x5, 0, x6)

inst_1:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x15, rs2==x0, rd==x14, rs1_b7_val == rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b0_val == 191, rs2_b5_val == 16, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b4_val == 8, rs1_b7_val == 251, rs2_b7_val == 251, rs2_b1_val == 2, rs2_b2_val == 247, rs2_b4_val == 1, rs1_b6_val == 0
// opcode: uradd8 ; op1:x15; op2:x0; dest:x14; op1val:0xfb001308050913bf;  op2val:0xfb0a100103f7020e
TEST_RR_OP(uradd8, x14, x15, x0, 0x0000000000000000, 0xfb001308050913bf, 0xfb0a100103f7020e, x5, 8, x6)

inst_2:// rs1 == rs2 != rd, rs1==x19, rs2==x19, rd==x26, rs1_b6_val == rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b0_val == 223, rs1_b5_val == 128, rs1_b2_val == 2, rs1_b4_val == rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b3_val == 64, rs2_b1_val == 239, rs1_b7_val == 127, rs1_b1_val == 128, rs2_b5_val == 127
// opcode: uradd8 ; op1:x19; op2:x19; dest:x26; op1val:0x7f0680060602800f;  op2val:0x3067f064005efdf
TEST_RR_OP(uradd8, x26, x19, x19, 0x0000000000000000, 0x7f0680060602800f, 0x3067f064005efdf, x5, 16, x6)

inst_3:// rs1 == rs2 == rd, rs1==x31, rs2==x31, rd==x31, rs1_b5_val == rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b5_val == 251, rs1_b5_val == 251, rs2_b3_val == 223, rs2_b0_val == 253, rs1_b7_val == 191, rs1_b6_val == 1, rs1_b2_val == 85, rs1_b4_val == 32
// opcode: uradd8 ; op1:x31; op2:x31; dest:x31; op1val:0xbf01fb2007551306;  op2val:0x911fb0fdf1112fd
TEST_RR_OP(uradd8, x31, x31, x31, 0x0000000000000000, 0xbf01fb2007551306, 0x911fb0fdf1112fd, x5, 24, x6)

inst_4:// rs2 == rd != rs1, rs1==x3, rs2==x13, rd==x13, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b0_val == 251, rs1_b5_val == 64, rs1_b2_val == 255, rs2_b3_val == 253, rs1_b3_val == 253, rs2_b1_val == 223, rs1_b6_val == 8, rs2_b2_val == 170, rs1_b7_val == 128, rs1_b1_val == 0, rs2_b5_val == 223
// opcode: uradd8 ; op1:x3; op2:x13; dest:x13; op1val:0x80084004fdff00bf;  op2val:0xf0ddf03fdaadffb
TEST_RR_OP(uradd8, x13, x3, x13, 0x0000000000000000, 0x80084004fdff00bf, 0xf0ddf03fdaadffb, x5, 32, x6)

inst_5:// rs1==x12, rs2==x17, rd==x1, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b4_val == 0, rs2_b3_val == 170, rs1_b3_val == 2, rs2_b7_val == 85, rs1_b7_val == 85, rs1_b1_val == 2, rs1_b5_val == 191
// opcode: uradd8 ; op1:x12; op2:x17; dest:x1; op1val:0x5503bf130206020b;  op2val:0x550a0b00aa06df0c
TEST_RR_OP(uradd8, x1, x12, x17, 0x0000000000000000, 0x5503bf130206020b, 0x550a0b00aa06df0c, x5, 40, x6)

inst_6:// rs1==x11, rs2==x16, rd==x10, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b5_val == 253, rs1_b7_val == 1, rs2_b7_val == 0, rs1_b0_val == 253, rs2_b1_val == 85, rs1_b1_val == 85, rs1_b3_val == 16, rs1_b6_val == 2, rs1_b4_val == 16, rs2_b2_val == 251
// opcode: uradd8 ; op1:x11; op2:x16; dest:x10; op1val:0x1020e10100f55fd;  op2val:0x07fd1205fb5509
TEST_RR_OP(uradd8, x10, x11, x16, 0x0000000000000000, 0x1020e10100f55fd, 0x07fd1205fb5509, x5, 48, x6)

inst_7:// rs1==x28, rs2==x10, rd==x25, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b5_val == 4, rs1_b4_val == 85, rs1_b3_val == 8, rs2_b3_val == 2, rs2_b1_val == 254, rs1_b7_val == 223, rs1_b2_val == 128
// opcode: uradd8 ; op1:x28; op2:x10; dest:x25; op1val:0xdf11135508800706;  op2val:0x1205040e02aafe06
TEST_RR_OP(uradd8, x25, x28, x10, 0x0000000000000000, 0xdf11135508800706, 0x1205040e02aafe06, x5, 56, x6)

inst_8:// rs1==x8, rs2==x23, rd==x4, rs2_b7_val == 170, rs1_b2_val == 16, rs1_b0_val == 128, rs2_b6_val == 239, rs2_b1_val == 64, rs2_b4_val == 254, rs1_b7_val == 253, rs1_b5_val == 247
// opcode: uradd8 ; op1:x8; op2:x23; dest:x4; op1val:0xfd05f75511105580;  op2val:0xaaef0efe0e134006
TEST_RR_OP(uradd8, x4, x8, x23, 0x0000000000000000, 0xfd05f75511105580, 0xaaef0efe0e134006, x5, 64, x6)

inst_9:// rs1==x22, rs2==x18, rd==x2, rs2_b7_val == 127, rs2_b6_val == 85, rs1_b0_val == 64, rs1_b6_val == 223, rs1_b3_val == 254, rs1_b4_val == 127, rs2_b5_val == 85, rs2_b2_val == 254
// opcode: uradd8 ; op1:x22; op2:x18; dest:x2; op1val:0xcdf0c7ffe020940;  op2val:0x7f55551203fe1306
TEST_RR_OP(uradd8, x2, x22, x18, 0x0000000000000000, 0xcdf0c7ffe020940, 0x7f55551203fe1306, x5, 72, x6)

inst_10:// rs1==x21, rs2==x25, rd==x9, rs2_b7_val == 191, rs1_b0_val == 254, rs2_b2_val == 255, rs1_b6_val == 253, rs2_b0_val == 1, rs2_b6_val == 253, rs2_b4_val == 85, rs1_b1_val == 247
// opcode: uradd8 ; op1:x21; op2:x25; dest:x9; op1val:0x3fd1303070cf7fe;  op2val:0xbffd0a5511ff1101
TEST_RR_OP(uradd8, x9, x21, x25, 0x0000000000000000, 0x3fd1303070cf7fe, 0xbffd0a5511ff1101, x5, 80, x6)

inst_11:// rs1==x26, rs2==x30, rd==x11, rs2_b7_val == 223, rs2_b5_val == 64, rs2_b1_val == 170, rs1_b5_val == 1, rs1_b3_val == 128, rs2_b3_val == 8, rs1_b1_val == 8, rs2_b2_val == 223, rs1_b2_val == 239, rs2_b0_val == 127
// opcode: uradd8 ; op1:x26; op2:x30; dest:x11; op1val:0x5511010380ef08fe;  op2val:0xdf05400908dfaa7f
TEST_RR_OP(uradd8, x11, x26, x30, 0x0000000000000000, 0x5511010380ef08fe, 0xdf05400908dfaa7f, x5, 88, x6)

inst_12:// rs1==x24, rs2==x9, rd==x23, rs2_b7_val == 239, rs2_b5_val == 128, rs1_b7_val == 0, rs2_b4_val == 223, rs2_b6_val == 32, rs2_b2_val == 85, rs2_b1_val == 255, rs1_b4_val == 2
// opcode: uradd8 ; op1:x24; op2:x9; dest:x23; op1val:0x080602110c0c06;  op2val:0xef2080df0855fffd
TEST_RR_OP(uradd8, x23, x24, x9, 0x0000000000000000, 0x080602110c0c06, 0xef2080df0855fffd, x5, 96, x6)

inst_13:// rs1==x30, rs2==x8, rd==x19, rs2_b7_val == 247, rs2_b2_val == 2, rs1_b3_val == 64, rs1_b4_val == 239, rs1_b1_val == 32, rs1_b7_val == 8
// opcode: uradd8 ; op1:x30; op2:x8; dest:x19; op1val:0x80cfbef400c20fd;  op2val:0xf70e0c010b020f0f
TEST_RR_OP(uradd8, x19, x30, x8, 0x0000000000000000, 0x80cfbef400c20fd, 0xf70e0c010b020f0f, x5, 104, x9)

inst_14:// rs1==x6, rs2==x20, rd==x0, rs2_b7_val == 253, rs1_b1_val == 254, rs2_b5_val == 239, rs1_b5_val == 8
// opcode: uradd8 ; op1:x6; op2:x20; dest:x0; op1val:0x306080e1003febf;  op2val:0xfd0def55fd13bfdf
TEST_RR_OP(uradd8, x0, x6, x20, 0x0000000000000000, 0x306080e1003febf, 0xfd0def55fd13bfdf, x5, 112, x9)
RVTEST_SIGBASE(x19,signature_x19_0)

inst_15:// rs1==x2, rs2==x22, rd==x21, rs2_b7_val == 254, rs1_b4_val == 0, rs2_b3_val == 85, rs1_b3_val == 127, rs1_b5_val == 16, rs1_b6_val == 127, rs2_b2_val == 0, rs2_b1_val == 127, rs2_b4_val == 4
// opcode: uradd8 ; op1:x2; op2:x22; dest:x21; op1val:0xc7f10007f070009;  op2val:0xfe0b0b0455007f0c
TEST_RR_OP(uradd8, x21, x2, x22, 0x0000000000000000, 0xc7f10007f070009, 0xfe0b0b0455007f0c, x19, 0, x9)

inst_16:// rs1==x13, rs2==x12, rd==x5, rs2_b7_val == 128, rs2_b4_val == 16, rs2_b3_val == 247, rs2_b5_val == 8, rs1_b1_val == 127, rs1_b0_val == 255, rs1_b6_val == 32, rs1_b7_val == 254
// opcode: uradd8 ; op1:x13; op2:x12; dest:x5; op1val:0xfe20120d09037fff;  op2val:0x800d0810f77f030c
TEST_RR_OP(uradd8, x5, x13, x12, 0x0000000000000000, 0xfe20120d09037fff, 0x800d0810f77f030c, x19, 8, x9)

inst_17:// rs1==x4, rs2==x3, rd==x18, rs2_b7_val == 64, rs2_b2_val == 16, rs2_b3_val == 191, rs1_b2_val == 4, rs1_b6_val == 4, rs1_b0_val == 170
// opcode: uradd8 ; op1:x4; op2:x3; dest:x18; op1val:0x904010c120455aa;  op2val:0x40550d11bf101203
TEST_RR_OP(uradd8, x18, x4, x3, 0x0000000000000000, 0x904010c120455aa, 0x40550d11bf101203, x19, 16, x9)

inst_18:// rs1==x7, rs2==x11, rd==x17, rs2_b7_val == 32, rs2_b2_val == 191, rs2_b4_val == 170, rs2_b6_val == 2, rs2_b3_val == 16
// opcode: uradd8 ; op1:x7; op2:x11; dest:x17; op1val:0xfe0a0e05050c1212;  op2val:0x2002dfaa10bf0913
TEST_RR_OP(uradd8, x17, x7, x11, 0x0000000000000000, 0xfe0a0e05050c1212, 0x2002dfaa10bf0913, x19, 24, x9)

inst_19:// rs1==x5, rs2==x15, rd==x28, rs2_b7_val == 16, rs2_b1_val == 128
// opcode: uradd8 ; op1:x5; op2:x15; dest:x28; op1val:0x301070910057f0a;  op2val:0x1006060dbffb8005
TEST_RR_OP(uradd8, x28, x5, x15, 0x0000000000000000, 0x301070910057f0a, 0x1006060dbffb8005, x19, 32, x9)

inst_20:// rs1==x10, rs2==x29, rd==x8, rs2_b7_val == 8, rs2_b5_val == 2, rs2_b6_val == 16, rs1_b5_val == 0
// opcode: uradd8 ; op1:x10; op2:x29; dest:x8; op1val:0xa0d007f090f0abf;  op2val:0x8100255080905df
TEST_RR_OP(uradd8, x8, x10, x29, 0x0000000000000000, 0xa0d007f090f0abf, 0x8100255080905df, x19, 40, x9)

inst_21:// rs1==x1, rs2==x24, rd==x7, rs2_b7_val == 4, rs1_b6_val == 85, rs2_b1_val == 247, rs2_b0_val == 0, rs1_b1_val == 1, rs2_b2_val == 253, rs1_b5_val == 239, rs2_b5_val == 247
// opcode: uradd8 ; op1:x1; op2:x24; dest:x7; op1val:0x955ef110a04010a;  op2val:0x455f7100afdf700
TEST_RR_OP(uradd8, x7, x1, x24, 0x0000000000000000, 0x955ef110a04010a, 0x455f7100afdf700, x19, 48, x9)

inst_22:// rs1==x0, rs2==x6, rd==x15, rs2_b7_val == 2, rs2_b2_val == 64, rs2_b0_val == 247, rs2_b5_val == 32, rs1_b1_val == 239
// opcode: uradd8 ; op1:x0; op2:x6; dest:x15; op1val:0x13040f0cfd05efaa;  op2val:0x20220120e4013f7
TEST_RR_OP(uradd8, x15, x0, x6, 0x0000000000000000, 0x13040f0cfd05efaa, 0x20220120e4013f7, x19, 56, x9)

inst_23:// rs1==x16, rs2==x7, rd==x3, rs2_b7_val == 1, rs2_b0_val == 191, rs2_b5_val == 1, rs1_b4_val == 1
// opcode: uradd8 ; op1:x16; op2:x7; dest:x3; op1val:0x800bf01125520ff;  op2val:0x10a0112097f12bf
TEST_RR_OP(uradd8, x3, x16, x7, 0x0000000000000000, 0x800bf01125520ff, 0x10a0112097f12bf, x19, 64, x9)

inst_24:// rs1==x17, rs2==x21, rd==x6, rs2_b7_val == 255, rs2_b4_val == 251, rs1_b4_val == 253
// opcode: uradd8 ; op1:x17; op2:x21; dest:x6; op1val:0x120eeffd1011fe06;  op2val:0xff077ffb09aa407f
TEST_RR_OP(uradd8, x6, x17, x21, 0x0000000000000000, 0x120eeffd1011fe06, 0xff077ffb09aa407f, x19, 72, x9)

inst_25:// rs1==x27, rs2==x28, rd==x22, rs2_b6_val == 170, rs2_b0_val == 32, rs2_b5_val == 0, rs1_b4_val == 191, rs1_b7_val == 170, rs2_b4_val == 8
// opcode: uradd8 ; op1:x27; op2:x28; dest:x22; op1val:0xaa0d07bf100a0a03;  op2val:0xfdaa000810fbf720
TEST_RR_OP(uradd8, x22, x27, x28, 0x0000000000000000, 0xaa0d07bf100a0a03, 0xfdaa000810fbf720, x19, 80, x9)

inst_26:// rs1==x25, rs2==x27, rd==x12, rs2_b6_val == 127, rs1_b1_val == 253, rs2_b1_val == 32
// opcode: uradd8 ; op1:x25; op2:x27; dest:x12; op1val:0xfd090d081306fdbf;  op2val:0xf77f800b0afe2000
TEST_RR_OP(uradd8, x12, x25, x27, 0x0000000000000000, 0xfd090d081306fdbf, 0xf77f800b0afe2000, x19, 88, x9)

inst_27:// rs1==x14, rs2==x26, rd==x16, rs2_b6_val == 191, rs2_b3_val == 4, rs1_b7_val == 2, rs1_b0_val == 127, rs1_b3_val == 247
// opcode: uradd8 ; op1:x14; op2:x26; dest:x16; op1val:0x203effdf70f0e7f;  op2val:0xabf7f5504400d01
TEST_RR_OP(uradd8, x16, x14, x26, 0x0000000000000000, 0x203effdf70f0e7f, 0xabf7f5504400d01, x19, 96, x9)

inst_28:// rs1==x9, rs2==x2, rd==x27, rs2_b6_val == 247, rs1_b5_val == 4, rs1_b2_val == 0, rs2_b0_val == 16, rs1_b3_val == 32, rs2_b1_val == 251, rs1_b4_val == 247, rs2_b2_val == 128
// opcode: uradd8 ; op1:x9; op2:x2; dest:x27; op1val:0xbf0504f72000550a;  op2val:0x7f7070e0680fb10
TEST_RR_OP(uradd8, x27, x9, x2, 0x0000000000000000, 0xbf0504f72000550a, 0x7f7070e0680fb10, x19, 104, x3)

inst_29:// rs1==x18, rs2==x5, rd==x30, rs2_b6_val == 251, rs1_b4_val == 223
// opcode: uradd8 ; op1:x18; op2:x5; dest:x30; op1val:0x60e0edffd80fd0b;  op2val:0x6fb020613110d03
TEST_RR_OP(uradd8, x30, x18, x5, 0x0000000000000000, 0x60e0edffd80fd0b, 0x6fb020613110d03, x19, 112, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:// rs1==x23, rs2==x14, rd==x20, rs1_b3_val == 170, rs1_b4_val == 64, rs1_b6_val == 239, rs1_b0_val == 239, rs2_b3_val == 128
// opcode: uradd8 ; op1:x23; op2:x14; dest:x20; op1val:0x3ef0b40aa0fefef;  op2val:0x5507110780051110
TEST_RR_OP(uradd8, x20, x23, x14, 0x0000000000000000, 0x3ef0b40aa0fefef, 0x5507110780051110, x1, 0, x3)

inst_31:// rs1==x20, rs2==x4, rd==x24, rs1_b3_val == 191, rs1_b0_val == 223, rs1_b2_val == 32, rs2_b5_val == 254, rs2_b0_val == 128, rs1_b7_val == 239, rs2_b4_val == 32, rs1_b5_val == 127
// opcode: uradd8 ; op1:x20; op2:x4; dest:x24; op1val:0xef027ffdbf200edf;  op2val:0x105fe20f7aafb80
TEST_RR_OP(uradd8, x24, x20, x4, 0x0000000000000000, 0xef027ffdbf200edf, 0x105fe20f7aafb80, x1, 8, x3)

inst_32:// rs1_b3_val == 223, rs2_b1_val == 4, rs1_b4_val == 170
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xa0308aadf0b0a06;  op2val:0x7f0740100eaa04f7
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xa0308aadf0b0a06, 0x7f0740100eaa04f7, x1, 16, x3)

inst_33:// rs1_b3_val == 239, rs1_b0_val == 32, rs1_b5_val == 85, rs1_b2_val == 1
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0955f7ef010120;  op2val:0xa200e08f7fe5513
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xc0955f7ef010120, 0xa200e08f7fe5513, x1, 24, x3)

inst_34:// rs1_b3_val == 251, rs2_b6_val == 0
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x5080c05fb0c1305;  op2val:0x1000070e07df0480
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x5080c05fb0c1305, 0x1000070e07df0480, x1, 32, x3)

inst_35:// rs1_b3_val == 4, rs1_b2_val == 64, rs2_b3_val == 254, rs1_b5_val == 32
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd0e20aa04400506;  op2val:0xc55ef0ffefb7ff7
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xfd0e20aa04400506, 0xc55ef0ffefb7ff7, x1, 40, x3)

inst_36:// rs1_b3_val == 1, rs2_b3_val == 251, rs1_b0_val == 247, rs1_b7_val == 32, rs2_b4_val == 127
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x20080e13010f01f7;  op2val:0xff20107ffb00aa0a
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x20080e13010f01f7, 0xff20107ffb00aa0a, x1, 48, x3)

inst_37:// rs1_b3_val == 255, rs1_b0_val == 251, rs1_b1_val == 170, rs2_b3_val == 255, rs2_b4_val == 247, rs1_b2_val == 170
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf08bf11ffaaaafb;  op2val:0xb200ef7fffe0f0a
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xdf08bf11ffaaaafb, 0xb200ef7fffe0f0a, x1, 56, x3)

inst_38:// rs1_b3_val == 0, rs2_b6_val == 64
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xe0e0606000b0309;  op2val:0x740fb0105fdfbdf
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xe0e0606000b0309, 0x740fb0105fdfbdf, x1, 64, x3)

inst_39:// rs1_b2_val == 127, rs2_b3_val == 1, rs2_b1_val == 1
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xe13fb07fb7f0a05;  op2val:0xef0e0c0a017f0107
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xe13fb07fb7f0a05, 0xef0e0c0a017f0107, x1, 72, x3)

inst_40:// rs1_b2_val == 191, rs1_b6_val == 254, rs1_b1_val == 16
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfe080a40bf10fb;  op2val:0xfb021312fbfbfbdf
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xbfe080a40bf10fb, 0xfb021312fbfbfbdf, x1, 80, x3)

inst_41:// rs1_b2_val == 223, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x5200b0faadf0a7f;  op2val:0xef06091205060b01
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x5200b0faadf0a7f, 0xef06091205060b01, x1, 88, x3)

inst_42:// rs1_b2_val == 247, rs2_b0_val == 239, rs2_b5_val == 191, rs2_b1_val == 8
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x20b0e55dff70112;  op2val:0xdf0cbf0f101308ef
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x20b0e55dff70112, 0xdf0cbf0f101308ef, x1, 96, x3)

inst_43:// rs1_b2_val == 251, rs2_b1_val == 253, rs1_b7_val == 64
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x40040f40fffb200c;  op2val:0xb20df120b0cfd0d
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x40040f40fffb200c, 0xb20df120b0cfd0d, x1, 104, x3)

inst_44:// rs1_b2_val == 253, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xb0004fdfdfd110f;  op2val:0x209df1212070ef7
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xb0004fdfdfd110f, 0x209df1212070ef7, x1, 112, x3)

inst_45:// rs1_b2_val == 254, rs1_b7_val == 4, rs2_b2_val == 8, rs2_b0_val == 85
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x40cbfef0ffe080b;  op2val:0x7f02fd0e4008df55
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x40cbfef0ffe080b, 0x7f02fd0e4008df55, x1, 120, x3)

inst_46:// rs1_b2_val == 8, rs2_b1_val == 16, rs1_b4_val == 128
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x13df40800c08110e;  op2val:0xb137ff708101011
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x13df40800c08110e, 0xb137ff708101011, x1, 128, x3)

inst_47:// rs2_b2_val == 32, rs1_b0_val == 8, rs2_b0_val == 254, rs2_b6_val == 128
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x60ffb120b800708;  op2val:0x20800f0401200efe
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x60ffb120b800708, 0x20800f0401200efe, x1, 136, x3)

inst_48:// rs2_b2_val == 4, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa0e0b0c0ffd12ef;  op2val:0x401105fe10040f13
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xaa0e0b0c0ffd12ef, 0x401105fe10040f13, x1, 144, x3)

inst_49:// rs2_b2_val == 1, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x8005500fffefe80;  op2val:0x1255001204018011
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x8005500fffefe80, 0x1255001204018011, x1, 152, x3)

inst_50:// rs2_b1_val == 0, rs1_b0_val == 2, rs2_b0_val == 170
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x4003107f0b090002;  op2val:0x55060510070d00aa
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x4003107f0b090002, 0x55060510070d00aa, x1, 160, x3)

inst_51:// rs2_b0_val == 64, rs2_b4_val == 253
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xc06120d55fd0603;  op2val:0xf70bf7fd05557f40
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xc06120d55fd0603, 0xf70bf7fd05557f40, x1, 168, x3)

inst_52:// rs2_b0_val == 8, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x8120c20f7070d0e;  op2val:0x806800004800508
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x8120c20f7070d0e, 0x806800004800508, x1, 176, x3)

inst_53:// rs1_b1_val == 191, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd0bbf07010fbf09;  op2val:0xff1305050c037f07
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xfd0bbf07010fbf09, 0xff1305050c037f07, x1, 184, x3)

inst_54:// rs2_b0_val == 4, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x137feff7f702200a;  op2val:0x3ef05120cfbaa04
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x137feff7f702200a, 0x3ef05120cfbaa04, x1, 192, x3)

inst_55:// rs1_b1_val == 223, rs1_b4_val == 251
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x90412fbef05df20;  op2val:0xfd0f1011127f0105
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x90412fbef05df20, 0xfd0f1011127f0105, x1, 200, x3)

inst_56:// rs2_b0_val == 2, rs2_b5_val == 170
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa0c0d557f13060e;  op2val:0x520aa011202ef02
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xaa0c0d557f13060e, 0x520aa011202ef02, x1, 208, x3)

inst_57:// rs2_b6_val == 254, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f0d0f01f7fb0209;  op2val:0x3fe10f7fb408007
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x7f0d0f01f7fb0209, 0x3fe10f7fb408007, x1, 216, x3)

inst_58:// rs2_b0_val == 255, rs1_b1_val == 251
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x3090109fe55fb13;  op2val:0xb0d0afefd5505ff
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x3090109fe55fb13, 0xb0d0afefd5505ff, x1, 224, x3)

inst_59:// rs2_b6_val == 8, rs2_b2_val == 239
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xef020afb11120812;  op2val:0x1080b11f7efffdf
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xef020afb11120812, 0x1080b11f7efffdf, x1, 232, x3)

inst_60:// rs2_b6_val == 4, rs1_b0_val == 4, rs1_b4_val == 254
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x130b13fe0906fb04;  op2val:0x9042020fdff0f0f
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x130b13fe0906fb04, 0x9042020fdff0f0f, x1, 240, x3)

inst_61:// rs1_b1_val == 64, rs1_b6_val == 251
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x2fb1209067f400f;  op2val:0x55df0e0840030013
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x2fb1209067f400f, 0x55df0e0840030013, x1, 248, x3)

inst_62:// rs2_b6_val == 1, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x4fb00550e11207f;  op2val:0x101fe0e020a0f7f
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x4fb00550e11207f, 0x101fe0e020a0f7f, x1, 256, x3)

inst_63:// rs2_b6_val == 255, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x2010a0303201011;  op2val:0xaafffd0f1110077f
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x2010a0303201011, 0xaafffd0f1110077f, x1, 264, x3)

inst_64:// rs1_b7_val == 255, rs1_b6_val == 64
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xff40fb030afd0607;  op2val:0x202005fd20ff12f7
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xff40fb030afd0607, 0x202005fd20ff12f7, x1, 272, x3)

inst_65:// rs1_b0_val == 85, rs1_b6_val == 247
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbf720200911fe55;  op2val:0x4ef0a030efbfe02
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xfbf720200911fe55, 0x4ef0a030efbfe02, x1, 280, x3)

inst_66:// rs1_b6_val == 170, rs1_b5_val == 2
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfaa020f7f04067f;  op2val:0x5aa08111010020f
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xbfaa020f7f04067f, 0x5aa08111010020f, x1, 288, x3)

inst_67:// rs1_b6_val == 191, rs1_b5_val == 170, rs2_b4_val == 2
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x7fbfaa101003130b;  op2val:0xfd057f02aaffbf55
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x7fbfaa101003130b, 0xfd057f02aaffbf55, x1, 296, x3)

inst_68:// rs1_b0_val == 16, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x420070807aa4010;  op2val:0xbaafe130d051210
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x420070807aa4010, 0xbaafe130d051210, x1, 304, x3)

inst_69:// rs2_b5_val == 255, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x6061309fdfddf08;  op2val:0x6fbff55080fefdf
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x6061309fdfddf08, 0x6fbff55080fefdf, x1, 312, x3)

inst_70:// rs1_b0_val == 1, rs1_b6_val == 16
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xe100880550e0601;  op2val:0xbffd13050e0510bf
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xe100880550e0601, 0xbffd13050e0510bf, x1, 320, x3)

inst_71:// rs1_b6_val == 128, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf8005ef7f0d0980;  op2val:0x9fff7df20000a04
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xdf8005ef7f0d0980, 0x9fff7df20000a04, x1, 328, x3)

inst_72:// rs2_b4_val == 191, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf0e02010a130009;  op2val:0xfb0413bf40800c13
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xf0e02010a130009, 0xfb0413bf40800c13, x1, 336, x3)

inst_73:// rs2_b4_val == 239, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x9030f120001bf0b;  op2val:0x124004ef117f0d08
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x9030f120001bf0b, 0x124004ef117f0d08, x1, 344, x3)

inst_74:// rs1_b5_val == 253, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x130cfdfb060c7f04;  op2val:0xcfb12045511010a
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x130cfdfb060c7f04, 0xcfb12045511010a, x1, 352, x3)

inst_75:// rs1_b5_val == 254, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x55fefe010c020b0b;  op2val:0x12040fef0e03bf7f
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x55fefe010c020b0b, 0x12040fef0e03bf7f, x1, 360, x3)

inst_76:// rs2_b3_val == 127, rs2_b4_val == 255
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x13bf08aa0b050c;  op2val:0x2f713ff7f01080c
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x13bf08aa0b050c, 0x2f713ff7f01080c, x1, 368, x3)

inst_77:// rs1_b1_val == 4, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x13400beff70304fe;  op2val:0x40bf03f7030e0540
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x13400beff70304fe, 0x40bf03f7030e0540, x1, 376, x3)

inst_78:// rs2_b3_val == 239, rs1_b5_val == 255
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe01ff0120111007;  op2val:0x807fd00efef0a01
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xfe01ff0120111007, 0x807fd00efef0a01, x1, 384, x3)

inst_79:// rs2_b3_val == 0, rs2_b4_val == 128
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x7eff7130580080f;  op2val:0x7f55ef80007f2008
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x7eff7130580080f, 0x7f55ef80007f2008, x1, 392, x3)

inst_80:// rs1_b7_val == 247, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7041008fdef0513;  op2val:0x8007070c09bf1111
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xf7041008fdef0513, 0x8007070c09bf1111, x1, 400, x3)

inst_81:// rs2_b4_val == 64, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xc08bf11060d0c0a;  op2val:0x8013df400eff0f0e
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xc08bf11060d0c0a, 0x8013df400eff0f0e, x1, 408, x3)

inst_82:// rs1_b1_val == 255, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x60801400e20ff03;  op2val:0x1105aaaa050c080a
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x60801400e20ff03, 0x1105aaaa050c080a, x1, 416, x3)

inst_83:// rs1_b5_val == 223, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xe03df07050601fe;  op2val:0xfbfb100455030e80
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xe03df07050601fe, 0xfbfb100455030e80, x1, 424, x3)

inst_84:// rs1_b7_val == 16, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x10200c80bf200e00;  op2val:0x9aa8005060a0d11
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x10200c80bf200e00, 0x9aa8005060a0d11, x1, 432, x3)

inst_85:// rs1_b4_val == 255, 
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x2f709ff02fe0faa;  op2val:0xf0a0f06f7ef8008
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x2f709ff02fe0faa, 0xf0a0f06f7ef8008, x1, 440, x3)

inst_86:// rs1_b7_val == rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b0_val == 191, rs2_b5_val == 16, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b4_val == 8, rs1_b7_val == 251, rs2_b7_val == 251, rs2_b1_val == 2, rs2_b2_val == 247, rs2_b4_val == 1, rs1_b6_val == 0
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb001308050913bf;  op2val:0xfb0a100103f7020e
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xfb001308050913bf, 0xfb0a100103f7020e, x1, 448, x3)

inst_87:// rs1_b6_val == rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b0_val == 223, rs1_b5_val == 128, rs1_b2_val == 2, rs1_b4_val == rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b3_val == 64, rs2_b1_val == 239, rs1_b7_val == 127, rs1_b1_val == 128, rs2_b5_val == 127
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f0680060602800f;  op2val:0x3067f064005efdf
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0x7f0680060602800f, 0x3067f064005efdf, x1, 456, x3)

inst_88:// rs1_b5_val == rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b5_val == 251, rs1_b5_val == 251, rs2_b3_val == 223, rs2_b0_val == 253, rs1_b7_val == 191, rs1_b6_val == 1, rs1_b2_val == 85, rs1_b4_val == 32
// opcode: uradd8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf01fb2007551306;  op2val:0x911fb0fdf1112fd
TEST_RR_OP(uradd8, x31, x30, x29, 0x0000000000000000, 0xbf01fb2007551306, 0x911fb0fdf1112fd, x1, 464, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x19_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 59*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
