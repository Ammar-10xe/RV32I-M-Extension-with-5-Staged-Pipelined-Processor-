
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmmawb2.u instruction of the RISC-V RV64PZicsr extension for the kmmawb2.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmmawb2.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x24, rs2==x17, rd==x24, rs1_w0_val == -2147483648, rs2_h0_val == 16384, rs2_h1_val == 1, rs2_h2_val == 21845, rs1_w1_val == 262144
// opcode: kmmawb2.u ; op1:x24; op2:x17; dest:x24; op1val:0x04000080000000;  op2val:0xfff6555500014000
TEST_PKRR_OP(kmmawb2.u, x24, x24, x17, 0x0000000000000000, 0x04000080000000, 0xfff6555500014000, x24, x6, 0, x16)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x26, rs2==x13, rd==x5, rs2_h3_val == -21846, rs1_w0_val == 524288, rs2_h0_val == 32, rs1_w1_val == -33, rs2_h1_val == -1025, rs2_h2_val == -17
// opcode: kmmawb2.u ; op1:x26; op2:x13; dest:x5; op1val:0xffffffdf00080000;  op2val:0xaaaaffeffbff0020
TEST_PKRR_OP(kmmawb2.u, x5, x26, x13, 0x0000000000000000, 0xffffffdf00080000, 0xaaaaffeffbff0020, x26, x6, 16, x16)

inst_2:
// rs1 == rs2 != rd, rs1==x2, rs2==x2, rd==x9, rs2_h3_val == 21845, rs2_h2_val == 8192, rs1_w1_val == -1, rs1_w0_val == -129
// opcode: kmmawb2.u ; op1:x2; op2:x2; dest:x9; op1val:0xffffffffffffff7f;  op2val:0x5555200000050003
TEST_PKRR_OP(kmmawb2.u, x9, x2, x2, 0x0000000000000000, 0xffffffffffffff7f, 0x5555200000050003, x2, x6, 32, x16)

inst_3:
// rs1 == rs2 == rd, rs1==x22, rs2==x22, rd==x22, rs2_h3_val == 32767, rs2_h1_val == 512, rs1_w1_val == -4194305, rs2_h0_val == -1025, rs1_w0_val == -5, rs2_h2_val == 1024
// opcode: kmmawb2.u ; op1:x22; op2:x22; dest:x22; op1val:0xffbffffffffffffb;  op2val:0x7fff04000200fbff
TEST_PKRR_OP(kmmawb2.u, x22, x22, x22, 0x0000000000000000, 0xffbffffffffffffb, 0x7fff04000200fbff, x22, x6, 48, x16)

inst_4:
// rs2 == rd != rs1, rs1==x1, rs2==x18, rd==x18, rs2_h3_val == -16385, rs1_w0_val == -1048577, rs2_h0_val == 1
// opcode: kmmawb2.u ; op1:x1; op2:x18; dest:x18; op1val:0xffffffffffefffff;  op2val:0xbfff2000fbff0001
TEST_PKRR_OP(kmmawb2.u, x18, x1, x18, 0x0000000000000000, 0xffffffffffefffff, 0xbfff2000fbff0001, x1, x6, 64, x16)

inst_5:
// rs1==x13, rs2==x8, rd==x4, rs2_h3_val == -8193, rs1_w1_val == 524288, rs2_h1_val == -9, rs2_h2_val == 128
// opcode: kmmawb2.u ; op1:x13; op2:x8; dest:x4; op1val:0x08000000000005;  op2val:0xdfff0080fff74000
TEST_PKRR_OP(kmmawb2.u, x4, x13, x8, 0x0000000000000000, 0x08000000000005, 0xdfff0080fff74000, x13, x6, 80, x16)

inst_6:
// rs1==x15, rs2==x19, rd==x31, rs2_h3_val == -4097, rs2_h1_val == -3, rs1_w0_val == 65536, rs1_w1_val == -129, rs2_h2_val == -3
// opcode: kmmawb2.u ; op1:x15; op2:x19; dest:x31; op1val:0xffffff7f00010000;  op2val:0xeffffffdfffdfffa
TEST_PKRR_OP(kmmawb2.u, x31, x15, x19, 0x0000000000000000, 0xffffff7f00010000, 0xeffffffdfffdfffa, x15, x6, 96, x16)

inst_7:
// rs1==x7, rs2==x25, rd==x21, rs2_h3_val == -2049, rs2_h0_val == 512, rs1_w0_val == 32768, rs1_w1_val == -2, rs2_h2_val == -32768, rs2_h1_val == 8192
// opcode: kmmawb2.u ; op1:x7; op2:x25; dest:x21; op1val:0xfffffffe00008000;  op2val:0xf7ff800020000200
TEST_PKRR_OP(kmmawb2.u, x21, x7, x25, 0x0000000000000000, 0xfffffffe00008000, 0xf7ff800020000200, x7, x6, 112, x16)

inst_8:
// rs1==x27, rs2==x11, rd==x13, rs2_h3_val == -1025, rs2_h0_val == 2048, rs2_h2_val == 512, rs2_h1_val == 8
// opcode: kmmawb2.u ; op1:x27; op2:x11; dest:x13; op1val:0xc0000000fffffffc;  op2val:0xfbff020000080800
TEST_PKRR_OP(kmmawb2.u, x13, x27, x11, 0x0000000000000000, 0xc0000000fffffffc, 0xfbff020000080800, x27, x6, 128, x16)

inst_9:
// rs1==x21, rs2==x7, rd==x10, rs2_h3_val == -513, rs1_w0_val == 2097152, rs2_h0_val == -1, rs1_w1_val == 4, rs2_h2_val == 16384, rs2_h1_val == -2
// opcode: kmmawb2.u ; op1:x21; op2:x7; dest:x10; op1val:0x00000400200000;  op2val:0xfdff4000fffeffff
TEST_PKRR_OP(kmmawb2.u, x10, x21, x7, 0x0000000000000000, 0x00000400200000, 0xfdff4000fffeffff, x21, x6, 144, x16)

inst_10:
// rs1==x30, rs2==x0, rd==x1, rs2_h3_val == -257, rs2_h2_val == -16385, rs1_w0_val == -9
// opcode: kmmawb2.u ; op1:x30; op2:x0; dest:x1; op1val:0xffbffffffffffff7;  op2val:0xfeffbfff00070020
TEST_PKRR_OP(kmmawb2.u, x1, x30, x0, 0x0000000000000000, 0xffbffffffffffff7, 0xfeffbfff00070020, x30, x6, 160, x16)

inst_11:
// rs1==x10, rs2==x14, rd==x3, rs2_h3_val == -129, rs1_w1_val == -9, rs1_w0_val == -67108865, rs2_h1_val == 32, rs2_h0_val == -129
// opcode: kmmawb2.u ; op1:x10; op2:x14; dest:x3; op1val:0xfffffff7fbffffff;  op2val:0xff7ffff90020ff7f
TEST_PKRR_OP(kmmawb2.u, x3, x10, x14, 0x0000000000000000, 0xfffffff7fbffffff, 0xff7ffff90020ff7f, x10, x6, 176, x16)

inst_12:
// rs1==x9, rs2==x10, rd==x20, rs2_h3_val == -65, 
// opcode: kmmawb2.u ; op1:x9; op2:x10; dest:x20; op1val:0xfffffff900200000;  op2val:0xffbf00073ffffbff
TEST_PKRR_OP(kmmawb2.u, x20, x9, x10, 0x0000000000000000, 0xfffffff900200000, 0xffbf00073ffffbff, x9, x6, 192, x16)

inst_13:
// rs1==x4, rs2==x12, rd==x14, rs2_h3_val == -33, rs2_h0_val == -8193, rs2_h1_val == -257
// opcode: kmmawb2.u ; op1:x4; op2:x12; dest:x14; op1val:0x3ffffffffbffffff;  op2val:0xffdffff9feffdfff
TEST_PKRR_OP(kmmawb2.u, x14, x4, x12, 0x0000000000000000, 0x3ffffffffbffffff, 0xffdffff9feffdfff, x4, x6, 208, x16)

inst_14:
// rs1==x23, rs2==x29, rd==x2, rs2_h3_val == -17, rs2_h0_val == -33, rs1_w0_val == 512, rs2_h1_val == -33, rs1_w1_val == 268435456
// opcode: kmmawb2.u ; op1:x23; op2:x29; dest:x2; op1val:0x1000000000000200;  op2val:0xffef2000ffdfffdf
TEST_PKRR_OP(kmmawb2.u, x2, x23, x29, 0x0000000000000000, 0x1000000000000200, 0xffef2000ffdfffdf, x23, x6, 224, x7)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_15:
// rs1==x19, rs2==x21, rd==x15, rs2_h3_val == -9, rs1_w1_val == -32769
// opcode: kmmawb2.u ; op1:x19; op2:x21; dest:x15; op1val:0xffff7fff3fffffff;  op2val:0xfff7fffa00080005
TEST_PKRR_OP(kmmawb2.u, x15, x19, x21, 0x0000000000000000, 0xffff7fff3fffffff, 0xfff7fffa00080005, x19, x2, 0, x7)

inst_16:
// rs1==x17, rs2==x28, rd==x29, rs2_h3_val == -5, rs2_h2_val == 64, rs1_w1_val == -131073, rs1_w0_val == -2049, rs2_h1_val == 16
// opcode: kmmawb2.u ; op1:x17; op2:x28; dest:x29; op1val:0xfffdfffffffff7ff;  op2val:0xfffb00400010ffff
TEST_PKRR_OP(kmmawb2.u, x29, x17, x28, 0x0000000000000000, 0xfffdfffffffff7ff, 0xfffb00400010ffff, x17, x2, 16, x7)

inst_17:
// rs1==x28, rs2==x27, rd==x0, rs2_h3_val == -3, rs2_h1_val == 1024, rs2_h2_val == -8193, rs1_w1_val == 2147483647, rs1_w0_val == -2
// opcode: kmmawb2.u ; op1:x28; op2:x27; dest:x0; op1val:0x7ffffffffffffffe;  op2val:0xfffddfff04000007
TEST_PKRR_OP(kmmawb2.u, x0, x28, x27, 0x0000000000000000, 0x7ffffffffffffffe, 0xfffddfff04000007, x28, x2, 32, x7)

inst_18:
// rs1==x20, rs2==x9, rd==x16, rs2_h3_val == -2, rs2_h0_val == 128, rs2_h1_val == -129, rs2_h2_val == -129
// opcode: kmmawb2.u ; op1:x20; op2:x9; dest:x16; op1val:0xffbfffff00000009;  op2val:0xfffeff7fff7f0080
TEST_PKRR_OP(kmmawb2.u, x16, x20, x9, 0x0000000000000000, 0xffbfffff00000009, 0xfffeff7fff7f0080, x20, x2, 48, x7)

inst_19:
// rs1==x16, rs2==x1, rd==x6, rs2_h3_val == -32768, rs2_h0_val == -16385, rs2_h1_val == -1, rs1_w1_val == 67108864
// opcode: kmmawb2.u ; op1:x16; op2:x1; dest:x6; op1val:0x400000000200000;  op2val:0x80000080ffffbfff
TEST_PKRR_OP(kmmawb2.u, x6, x16, x1, 0x0000000000000000, 0x400000000200000, 0x80000080ffffbfff, x16, x2, 64, x7)

inst_20:
// rs1==x5, rs2==x15, rd==x26, rs2_h3_val == 16384, rs1_w0_val == -4097, rs1_w1_val == -8193
// opcode: kmmawb2.u ; op1:x5; op2:x15; dest:x26; op1val:0xffffdfffffffefff;  op2val:0x40004000fff80006
TEST_PKRR_OP(kmmawb2.u, x26, x5, x15, 0x0000000000000000, 0xffffdfffffffefff, 0x40004000fff80006, x5, x2, 80, x7)

inst_21:
// rs1==x12, rs2==x26, rd==x19, rs2_h3_val == 8192, rs2_h2_val == 32767, rs2_h0_val == -2049, rs1_w1_val == -67108865, rs2_h1_val == -32768, rs1_w0_val == -33554433
// opcode: kmmawb2.u ; op1:x12; op2:x26; dest:x19; op1val:0xfbfffffffdffffff;  op2val:0x20007fff8000f7ff
TEST_PKRR_OP(kmmawb2.u, x19, x12, x26, 0x0000000000000000, 0xfbfffffffdffffff, 0x20007fff8000f7ff, x12, x2, 96, x7)

inst_22:
// rs1==x8, rs2==x6, rd==x25, rs2_h3_val == 4096, rs2_h2_val == -1025, rs2_h0_val == -21846, rs1_w1_val == -3, rs1_w0_val == 33554432, rs2_h1_val == 2048
// opcode: kmmawb2.u ; op1:x8; op2:x6; dest:x25; op1val:0xfffffffd02000000;  op2val:0x1000fbff0800aaaa
TEST_PKRR_OP(kmmawb2.u, x25, x8, x6, 0x0000000000000000, 0xfffffffd02000000, 0x1000fbff0800aaaa, x8, x2, 112, x7)

inst_23:
// rs1==x0, rs2==x20, rd==x27, rs2_h3_val == 2048, rs2_h2_val == 2, rs2_h1_val == 4096
// opcode: kmmawb2.u ; op1:x0; op2:x20; dest:x27; op1val:0xfffffff6fffffffb;  op2val:0x800000210000003
TEST_PKRR_OP(kmmawb2.u, x27, x0, x20, 0x0000000000000000, 0xfffffff6fffffffb, 0x800000210000003, x0, x2, 128, x7)

inst_24:
// rs1==x18, rs2==x16, rd==x17, rs2_h3_val == 1024, rs1_w1_val == 512, rs2_h0_val == 21845, rs2_h2_val == 256, rs1_w0_val == 4194304
// opcode: kmmawb2.u ; op1:x18; op2:x16; dest:x17; op1val:0x00020000400000;  op2val:0x4000100fff65555
TEST_PKRR_OP(kmmawb2.u, x17, x18, x16, 0x0000000000000000, 0x00020000400000, 0x4000100fff65555, x18, x2, 144, x7)

inst_25:
// rs1==x31, rs2==x30, rd==x23, rs2_h3_val == 512, rs1_w1_val == 1, rs2_h1_val == 21845, rs2_h2_val == -257
// opcode: kmmawb2.u ; op1:x31; op2:x30; dest:x23; op1val:0x00000100200000;  op2val:0x200feff5555fffa
TEST_PKRR_OP(kmmawb2.u, x23, x31, x30, 0x0000000000000000, 0x00000100200000, 0x200feff5555fffa, x31, x2, 160, x7)

inst_26:
// rs1==x6, rs2==x4, rd==x28, rs2_h3_val == 256, rs2_h0_val == 64, rs1_w0_val == 67108864, rs1_w1_val == 64
// opcode: kmmawb2.u ; op1:x6; op2:x4; dest:x28; op1val:0x00004004000000;  op2val:0x100020000200040
TEST_PKRR_OP(kmmawb2.u, x28, x6, x4, 0x0000000000000000, 0x00004004000000, 0x100020000200040, x6, x2, 176, x7)

inst_27:
// rs1==x29, rs2==x24, rd==x11, rs2_h3_val == 128, rs2_h2_val == -1, rs1_w0_val == -524289, rs1_w1_val == 16384
// opcode: kmmawb2.u ; op1:x29; op2:x24; dest:x11; op1val:0x004000fff7ffff;  op2val:0x80fffffff60003
TEST_PKRR_OP(kmmawb2.u, x11, x29, x24, 0x0000000000000000, 0x004000fff7ffff, 0x80fffffff60003, x29, x2, 192, x7)

inst_28:
// rs1==x11, rs2==x5, rd==x8, rs2_h3_val == 64, rs2_h1_val == -21846, rs1_w1_val == 1431655765, rs2_h2_val == 4
// opcode: kmmawb2.u ; op1:x11; op2:x5; dest:x8; op1val:0x5555555500010000;  op2val:0x400004aaaa0200
TEST_PKRR_OP(kmmawb2.u, x8, x11, x5, 0x0000000000000000, 0x5555555500010000, 0x400004aaaa0200, x11, x2, 208, x7)

inst_29:
// rs1==x3, rs2==x31, rd==x12, rs2_h3_val == 32, rs2_h0_val == 8, rs1_w0_val == -262145
// opcode: kmmawb2.u ; op1:x3; op2:x31; dest:x12; op1val:0x000006fffbffff;  op2val:0x20fffffff80008
TEST_PKRR_OP(kmmawb2.u, x12, x3, x31, 0x0000000000000000, 0x000006fffbffff, 0x20fffffff80008, x3, x2, 224, x7)

inst_30:
// rs1==x14, rs2==x3, rd==x30, rs2_h3_val == 16, rs1_w0_val == -1
// opcode: kmmawb2.u ; op1:x14; op2:x3; dest:x30; op1val:0xffffffffffffffff;  op2val:0x100040fffe0040
TEST_PKRR_OP(kmmawb2.u, x30, x14, x3, 0x0000000000000000, 0xffffffffffffffff, 0x100040fffe0040, x14, x2, 240, x7)

inst_31:
// rs1==x25, rs2==x23, rd==x7, rs2_h3_val == 8, rs2_h1_val == 128, rs1_w0_val == 256
// opcode: kmmawb2.u ; op1:x25; op2:x23; dest:x7; op1val:0xfbffffff00000100;  op2val:0x08000600804000
TEST_PKRR_OP(kmmawb2.u, x7, x25, x23, 0x0000000000000000, 0xfbffffff00000100, 0x08000600804000, x25, x2, 256, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs2_h3_val == 4, rs1_w1_val == -1431655766, rs2_h2_val == 1
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffffffff;  op2val:0x04000104000006
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffffffff, 0x04000104000006, x30, x1, 0, x3)

inst_33:
// rs2_h3_val == 2, rs1_w0_val == 8, rs1_w1_val == 4194304
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000008;  op2val:0x02fefffffcdfff
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x40000000000008, 0x02fefffffcdfff, x30, x1, 16, x3)

inst_34:
// rs2_h3_val == 1, rs2_h1_val == -4097
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x080000ffefffff;  op2val:0x014000efff0200
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x080000ffefffff, 0x014000efff0200, x30, x1, 32, x3)

inst_35:
// rs2_h3_val == 0, rs2_h2_val == 8, rs1_w0_val == -131073
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffdffff;  op2val:0x000008fbffaaaa
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfffffffffffdffff, 0x000008fbffaaaa, x30, x1, 48, x3)

inst_36:
// rs2_h3_val == -1, rs2_h2_val == 4096
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcfffbffff;  op2val:0xffff1000fff8c000
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfffffffcfffbffff, 0xffff1000fff8c000, x30, x1, 64, x3)

inst_37:
// rs2_h2_val == -21846, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffff6;  op2val:0x200aaaa55550007
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x400000fffffff6, 0x200aaaa55550007, x30, x1, 80, x3)

inst_38:
// rs2_h2_val == -4097, rs2_h0_val == 16, rs2_h1_val == 0
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x400000000400000;  op2val:0x100efff00000010
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x400000000400000, 0x100efff00000010, x30, x1, 96, x3)

inst_39:
// rs2_h2_val == -2049, rs1_w0_val == 536870912, rs1_w1_val == 256
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00010020000000;  op2val:0x2000f7fffff60080
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x00010020000000, 0x2000f7fffff60080, x30, x1, 112, x3)

inst_40:
// rs2_h2_val == -513, rs1_w0_val == -33
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffffdf;  op2val:0xfffafdfffff80009
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfbffffffffffffdf, 0xfffafdfffff80009, x30, x1, 128, x3)

inst_41:
// rs1_w0_val == 1048576, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000900100000;  op2val:0xfffc000800050200
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x00000900100000, 0xfffc000800050200, x30, x1, 144, x3)

inst_42:
// rs1_w0_val == 262144, rs2_h0_val == -2, rs2_h2_val == 0
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00020000040000;  op2val:0x8000000006fffe
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x00020000040000, 0x8000000006fffe, x30, x1, 160, x3)

inst_43:
// rs1_w0_val == 131072, rs2_h0_val == 32767
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00010000020000;  op2val:0x400400ff7f7fff
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x00010000020000, 0x400400ff7f7fff, x30, x1, 176, x3)

inst_44:
// rs1_w0_val == 16384, rs2_h0_val == 8192, rs1_w1_val == -16385
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00004000;  op2val:0xffffffeffffa2000
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xffffbfff00004000, 0xffffffeffffa2000, x30, x1, 192, x3)

inst_45:
// rs1_w0_val == 8192, rs2_h2_val == 16, rs1_w1_val == -4097, rs2_h1_val == -17
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00002000;  op2val:0x10000010ffeffffa
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xffffefff00002000, 0x10000010ffeffffa, x30, x1, 208, x3)

inst_46:
// rs1_w0_val == 4096, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000500001000;  op2val:0xfdfffff9fffcdfff
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x00000500001000, 0xfdfffff9fffcdfff, x30, x1, 224, x3)

inst_47:
// rs1_w0_val == 2048, rs2_h0_val == -513
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000800;  op2val:0xfff90200effffdff
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000800, 0xfff90200effffdff, x30, x1, 240, x3)

inst_48:
// rs1_w0_val == 1024, rs1_w1_val == -524289
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000400;  op2val:0xeffff7fffbffbfff
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000400, 0xeffff7fffbffbfff, x30, x1, 256, x3)

inst_49:
// rs1_w0_val == 128, rs1_w1_val == 2
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000080;  op2val:0x0701000400ffdf
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x00000200000080, 0x0701000400ffdf, x30, x1, 272, x3)

inst_50:
// rs1_w0_val == 64, rs1_w1_val == -1073741825
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000040;  op2val:0x06fffcfff8c000
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000040, 0x06fffcfff8c000, x30, x1, 288, x3)

inst_51:
// rs1_w0_val == 32, rs2_h0_val == -65
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000020;  op2val:0xffef0009ffefffbf
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x40000000000020, 0xffef0009ffefffbf, x30, x1, 304, x3)

inst_52:
// rs1_w0_val == 16, rs2_h0_val == -3, rs1_w1_val == -2097153
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000010;  op2val:0x4007fff0008fffd
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000010, 0x4007fff0008fffd, x30, x1, 320, x3)

inst_53:
// rs1_w0_val == 4, rs1_w1_val == -1025, rs2_h2_val == 2048
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000004;  op2val:0x010800ffef0006
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000004, 0x010800ffef0006, x30, x1, 336, x3)

inst_54:
// rs1_w0_val == 2, rs1_w1_val == 8388608
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000002;  op2val:0xfffb3ffffff70800
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x80000000000002, 0xfffb3ffffff70800, x30, x1, 352, x3)

inst_55:
// rs1_w0_val == 1, rs2_h2_val == -2
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000001;  op2val:0x5555fffeffef0005
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000001, 0x5555fffeffef0005, x30, x1, 368, x3)

inst_56:
// rs1_w0_val == 0, rs1_w1_val == 131072
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000000;  op2val:0xfffcfff63ffffffa
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x02000000000000, 0xfffcfff63ffffffa, x30, x1, 384, x3)

inst_57:
// rs2_h2_val == -65, rs2_h1_val == 4, rs1_w1_val == 4096
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000001;  op2val:0xaaaaffbf0004fdff
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x00100000000001, 0xaaaaffbf0004fdff, x30, x1, 400, x3)

inst_58:
// rs2_h2_val == -33, rs1_w0_val == -1431655766
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffaaaaaaaa;  op2val:0x20ffdffeff0003
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xffff7fffaaaaaaaa, 0x20ffdffeff0003, x30, x1, 416, x3)

inst_59:
// rs2_h2_val == -9, rs2_h1_val == -513, rs1_w0_val == 16777216
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000001000000;  op2val:0xffdffff7fdffc000
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x40000001000000, 0xffdffff7fdffc000, x30, x1, 432, x3)

inst_60:
// rs2_h2_val == -5, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000009;  op2val:0x00fffbfdfffffc
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x400000000000009, 0x00fffbfdfffffc, x30, x1, 448, x3)

inst_61:
// rs2_h2_val == 32, rs1_w1_val == -33554433
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffbffffff;  op2val:0xefff00200400ffdf
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfdfffffffbffffff, 0xefff00200400ffdf, x30, x1, 464, x3)

inst_62:
// rs2_h1_val == 32767, rs1_w1_val == 1073741824, rs1_w0_val == 8388608
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000800000;  op2val:0x400ffbf7fffff7f
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x4000000000800000, 0x400ffbf7fffff7f, x30, x1, 480, x3)

inst_63:
// rs2_h1_val == -16385, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000001;  op2val:0x104000bfffc000
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000001, 0x104000bfffc000, x30, x1, 496, x3)

inst_64:
// rs2_h1_val == -8193, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x040000fbffffff;  op2val:0xfffa0007dfff5555
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x040000fbffffff, 0xfffa0007dfff5555, x30, x1, 512, x3)

inst_65:
// rs2_h1_val == -2049, rs1_w1_val == -8388609
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00010000;  op2val:0x10fdfff7ff0007
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xff7fffff00010000, 0x10fdfff7ff0007, x30, x1, 528, x3)

inst_66:
// rs2_h1_val == -65, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffbffff;  op2val:0x02f7ffffbf0001
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x000001fffbffff, 0x02f7ffffbf0001, x30, x1, 544, x3)

inst_67:
// rs2_h1_val == -5, rs2_h0_val == 2, rs1_w0_val == -257
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffffeff;  op2val:0xffdf0040fffb0002
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x004000fffffeff, 0xffdf0040fffb0002, x30, x1, 560, x3)

inst_68:
// rs2_h1_val == 16384, rs1_w0_val == -134217729
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffff7ffffff;  op2val:0xfdfffff840000800
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfbfffffff7ffffff, 0xfdfffff840000800, x30, x1, 576, x3)

inst_69:
// rs2_h1_val == 256, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000400020000;  op2val:0x00080001002000
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x00000400020000, 0x00080001002000, x30, x1, 592, x3)

inst_70:
// rs2_h1_val == 64, rs1_w1_val == 16777216
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x1000000ffffefff;  op2val:0xfbff010000400010
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x1000000ffffefff, 0xfbff010000400010, x30, x1, 608, x3)

inst_71:
// rs2_h0_val == 4096, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000100;  op2val:0x800fffa08001000
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000100, 0x800fffa08001000, x30, x1, 624, x3)

inst_72:
// rs2_h0_val == 1024, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000020000;  op2val:0x08ff7f20000400
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x4000000000020000, 0x08ff7f20000400, x30, x1, 640, x3)

inst_73:
// rs2_h0_val == 256, rs1_w0_val == 1073741824
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000140000000;  op2val:0x04000100400100
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x00000140000000, 0x04000100400100, x30, x1, 656, x3)

inst_74:
// rs2_h0_val == 4, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000004fffffeff;  op2val:0x8000c00000800004
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x000004fffffeff, 0x8000c00000800004, x30, x1, 672, x3)

inst_75:
// rs2_h0_val == 0, rs1_w0_val == -513
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000100fffffdff;  op2val:0xfdff0040dfff0000
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x000100fffffdff, 0xfdff0040dfff0000, x30, x1, 688, x3)

inst_76:
// rs1_w1_val == -536870913, rs1_w0_val == -16777217
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffeffffff;  op2val:0x7fff04000001ff7f
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xdffffffffeffffff, 0x7fff04000001ff7f, x30, x1, 704, x3)

inst_77:
// rs1_w1_val == -268435457, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000002;  op2val:0xfffa000400800004
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xefffffff00000002, 0xfffa000400800004, x30, x1, 720, x3)

inst_78:
// rs1_w1_val == -134217729, rs1_w0_val == 134217728
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff08000000;  op2val:0xfffd0400ff7f0009
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xf7ffffff08000000, 0xfffd0400ff7f0009, x30, x1, 736, x3)

inst_79:
// rs1_w1_val == -16777217, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00002000;  op2val:0x087fff0004f7ff
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfeffffff00002000, 0x087fff0004f7ff, x30, x1, 752, x3)

inst_80:
// rs1_w1_val == -1048577, rs1_w0_val == -65537
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffeffff;  op2val:0xfff7f7ff08000040
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xffeffffffffeffff, 0xfff7f7ff08000040, x30, x1, 768, x3)

inst_81:
// rs1_w1_val == -262145, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff40000000;  op2val:0xffbffff6fffd4000
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfffbffff40000000, 0xffbffff6fffd4000, x30, x1, 784, x3)

inst_82:
// rs1_w1_val == -65537, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff08000000;  op2val:0xfff8ffefc0000080
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfffeffff08000000, 0xfff8ffefc0000080, x30, x1, 800, x3)

inst_83:
// rs1_w1_val == -2049, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffefff;  op2val:0xffeffffe00050000
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffefff, 0xffeffffe00050000, x30, x1, 816, x3)

inst_84:
// rs1_w1_val == -513, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000004;  op2val:0x04f7fffffc0020
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000004, 0x04f7fffffc0020, x30, x1, 832, x3)

inst_85:
// rs1_w1_val == -257, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff04000000;  op2val:0xf7ffffff00807fff
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfffffeff04000000, 0xf7ffffff00807fff, x30, x1, 848, x3)

inst_86:
// rs1_w1_val == -65, rs1_w0_val == -32769
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffff7fff;  op2val:0x7ffffffa0010fffc
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xffffffbfffff7fff, 0x7ffffffa0010fffc, x30, x1, 864, x3)

inst_87:
// rs1_w1_val == -17, rs2_h0_val == -17
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffffffc;  op2val:0x000007c000ffef
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xffffffeffffffffc, 0x000007c000ffef, x30, x1, 880, x3)

inst_88:
// rs1_w1_val == -5, rs1_w0_val == -268435457
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbefffffff;  op2val:0xf7ffefffffef0001
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfffffffbefffffff, 0xf7ffefffffef0001, x30, x1, 896, x3)

inst_89:
// rs1_w1_val == -2147483648, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000009;  op2val:0x00effffdff5555
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x8000000000000009, 0x00effffdff5555, x30, x1, 912, x3)

inst_90:
// rs1_w1_val == 536870912, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000005;  op2val:0x09fdfffff6fffe
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x2000000000000005, 0x09fdfffff6fffe, x30, x1, 928, x3)

inst_91:
// rs1_w1_val == 134217728, rs2_h1_val == 2
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x800000000004000;  op2val:0xf7fffff70002dfff
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x800000000004000, 0xf7fffff70002dfff, x30, x1, 944, x3)

inst_92:
// rs1_w1_val == 33554432, rs1_w0_val == -536870913
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000dfffffff;  op2val:0xaaaa0040bffffbff
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x2000000dfffffff, 0xaaaa0040bffffbff, x30, x1, 960, x3)

inst_93:
// rs1_w1_val == 65536, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x01000000040000;  op2val:0xfffa000500004000
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x01000000040000, 0xfffa000500004000, x30, x1, 976, x3)

inst_94:
// rs1_w1_val == 32768, rs1_w0_val == -3
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffffffd;  op2val:0xefff00040006fffe
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x008000fffffffd, 0xefff00040006fffe, x30, x1, 992, x3)

inst_95:
// rs1_w1_val == 8192, rs1_w0_val == -1073741825
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x002000bfffffff;  op2val:0x03ffdffffefff9
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x002000bfffffff, 0x03ffdffffefff9, x30, x1, 1008, x3)

inst_96:
// rs1_w1_val == 2048, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffff7fff;  op2val:0x80000400006ffbf
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x000800ffff7fff, 0x80000400006ffbf, x30, x1, 1024, x3)

inst_97:
// rs1_w1_val == 1024, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000008;  op2val:0x09dfff00014000
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x00040000000008, 0x09dfff00014000, x30, x1, 1040, x3)

inst_98:
// rs1_w1_val == 128, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000080ffffefff;  op2val:0xeffffeff0100ffbf
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x000080ffffefff, 0xeffffeff0100ffbf, x30, x1, 1056, x3)

inst_99:
// rs1_w1_val == 32, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffffffb;  op2val:0x09000855550400
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x000020fffffffb, 0x09000855550400, x30, x1, 1072, x3)

inst_100:
// rs1_w1_val == 16, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000010fffff7ff;  op2val:0xc00008000004ffff
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x000010fffff7ff, 0xc00008000004ffff, x30, x1, 1088, x3)

inst_101:
// rs1_w1_val == 8, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffff7fff;  op2val:0x80ffbf0010fffa
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x000008ffff7fff, 0x80ffbf0010fffa, x30, x1, 1104, x3)

inst_102:
// rs1_w1_val == 0, rs1_w0_val == 268435456
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000010000000;  op2val:0xff7ffffa5555aaaa
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x00000010000000, 0xff7ffffa5555aaaa, x30, x1, 1120, x3)

inst_103:
// rs1_w0_val == 1431655765, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff55555555;  op2val:0xfff9fdffefff0007
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xffdfffff55555555, 0xfff9fdffefff0007, x30, x1, 1136, x3)

inst_104:
// rs1_w0_val == 2147483647, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf7fffffff;  op2val:0xffdfaaaa0100fffe
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xffffffdf7fffffff, 0xffdfaaaa0100fffe, x30, x1, 1152, x3)

inst_105:
// rs1_w0_val == -4194305, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffbfffff;  op2val:0x02040010000000
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x000008ffbfffff, 0x02040010000000, x30, x1, 1168, x3)

inst_106:
// rs1_w0_val == -2097153, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffffdfffff;  op2val:0xc000fff700200010
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x3fffffffffdfffff, 0xc000fff700200010, x30, x1, 1184, x3)

inst_107:
// rs1_w0_val == -16385, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffbfff;  op2val:0xfff9fffffbff0010
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffffbfff, 0xfff9fffffbff0010, x30, x1, 1200, x3)

inst_108:
// rs1_w0_val == -8388609, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000040ff7fffff;  op2val:0xffff010000100400
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x000040ff7fffff, 0xffff010000100400, x30, x1, 1216, x3)

inst_109:
// rs1_w0_val == -8193, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffdfff;  op2val:0xffbf00030020fff9
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffffdfff, 0xffbf00030020fff9, x30, x1, 1232, x3)

inst_110:
// rs1_w0_val == -1025, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffffbff;  op2val:0xfffefff600014000
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xffffeffffffffbff, 0xfffefff600014000, x30, x1, 1248, x3)

inst_111:
// rs1_w0_val == -65, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000080ffffffbf;  op2val:0xffdffff6fff6fffa
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x000080ffffffbf, 0xffdffff6fff6fffa, x30, x1, 1264, x3)

inst_112:
// rs2_h0_val == -4097, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000007;  op2val:0x200010fff9efff
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000007, 0x200010fff9efff, x30, x1, 1280, x3)

inst_113:
// rs1_w0_val == -17, rs2_h0_val == -32768
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffffffef;  op2val:0x200fbff02008000
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xffffbfffffffffef, 0x200fbff02008000, x30, x1, 1296, x3)

inst_114:
// rs2_h0_val == -257, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffaefffffff;  op2val:0xfdff0002aaaafeff
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfffffffaefffffff, 0xfdff0002aaaafeff, x30, x1, 1312, x3)

inst_115:
// rs2_h0_val == -9, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000300100000;  op2val:0x0208002000fff7
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x00000300100000, 0x0208002000fff7, x30, x1, 1328, x3)

inst_116:
// rs2_h0_val == -5, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffbffffff;  op2val:0xefffffdf2000fffb
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xfffdfffffbffffff, 0xefffffdf2000fffb, x30, x1, 1344, x3)

inst_117:
// rs1_w1_val == 2097152, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x20000000080000;  op2val:0xc000fbff00022000
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x20000000080000, 0xc000fbff00022000, x30, x1, 1360, x3)

inst_118:
// rs1_w1_val == 1048576, 
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x100000fdffffff;  op2val:0x4000fff70001dfff
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x100000fdffffff, 0x4000fff70001dfff, x30, x1, 1376, x3)

inst_119:
// rs2_h3_val == 21845, rs2_h2_val == 8192, rs1_w1_val == -1, rs1_w0_val == -129
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffff7f;  op2val:0x5555200000050003
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xffffffffffffff7f, 0x5555200000050003, x30, x1, 1392, x3)

inst_120:
// rs2_h3_val == -257, rs2_h2_val == -16385, rs1_w0_val == -9
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffffff7;  op2val:0xfeffbfff00070020
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0xffbffffffffffff7, 0xfeffbfff00070020, x30, x1, 1408, x3)

inst_121:
// rs2_h3_val == -3, rs2_h1_val == 1024, rs2_h2_val == -8193, rs1_w1_val == 2147483647, rs1_w0_val == -2
// opcode: kmmawb2.u ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffffffe;  op2val:0xfffddfff04000007
TEST_PKRR_OP(kmmawb2.u, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffffffe, 0xfffddfff04000007, x30, x1, 1424, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 180*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
