
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sub16 instruction of the RISC-V RV64PZicsr extension for the sub16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sub16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x18,signature_x18_1)

inst_0:
// rs1 == rd != rs2, rs1==x23, rs2==x6, rd==x23, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h0_val == 4, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h2_val == -16385, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 2048, rs1_h3_val == -2, rs2_h3_val == 0, rs2_h2_val == 1
// opcode: sub16 ; op1:x23; op2:x6; dest:x23; op1val:0xfffebfff00068000;  op2val:0x00000108000004
TEST_RR_OP(sub16, x23, x23, x6, 0x0000000000000000, 0xfffebfff00068000, 0x00000108000004, x18, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x10, rs2==x5, rd==x17, rs1_h3_val == rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -3, rs2_h2_val == -17, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 4, rs1_h1_val == 512, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -3, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h3_val == -3
// opcode: sub16 ; op1:x10; op2:x5; dest:x17; op1val:0xfffd000402000001;  op2val:0xfffdffefc000fffd
TEST_RR_OP(sub16, x17, x10, x5, 0x0000000000000000, 0xfffd000402000001, 0xfffdffefc000fffd, x18, 8, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x27, rs2==x27, rd==x11, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h0_val == -3, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h1_val == -5, rs2_h0_val == 16384, rs1_h3_val == -32768, rs1_h1_val == -9
// opcode: sub16 ; op1:x27; op2:x27; dest:x11; op1val:0x8000fff6fff7fffd;  op2val:0x06fffcfffb4000
TEST_RR_OP(sub16, x11, x27, x27, 0x0000000000000000, 0x8000fff6fff7fffd, 0x06fffcfffb4000, x18, 16, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x13, rs2==x13, rd==x13, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h1_val == 4096, rs1_h3_val == 8, rs1_h0_val == -2, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h2_val == 64, rs1_h2_val == -9, rs2_h1_val == 64
// opcode: sub16 ; op1:x13; op2:x13; dest:x13; op1val:0x08fff71000fffe;  op2val:0xfffd00400040fff6
TEST_RR_OP(sub16, x13, x13, x13, 0x0000000000000000, 0x08fff71000fffe, 0xfffd00400040fff6, x18, 24, x3)

inst_4:
// rs2 == rd != rs1, rs1==x31, rs2==x0, rd==x0, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h1_val == -513, rs2_h0_val == -8193, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h3_val == 8, rs2_h2_val == 16, rs1_h3_val == 8192
// opcode: sub16 ; op1:x31; op2:x0; dest:x0; op1val:0x20000009fff9fffe;  op2val:0x080010fdffdfff
TEST_RR_OP(sub16, x0, x31, x0, 0x0000000000000000, 0x20000009fff9fffe, 0x080010fdffdfff, x18, 32, x3)

inst_5:
// rs1==x25, rs2==x17, rd==x10, rs1_h2_val == rs2_h2_val, rs1_h0_val == 0, rs1_h2_val == -17, rs1_h3_val == 21845, rs2_h0_val == 256
// opcode: sub16 ; op1:x25; op2:x17; dest:x10; op1val:0x5555ffef00030000;  op2val:0x06ffeffffb0100
TEST_RR_OP(sub16, x10, x25, x17, 0x0000000000000000, 0x5555ffef00030000, 0x06ffeffffb0100, x18, 40, x3)

inst_6:
// rs1==x4, rs2==x9, rd==x30, rs1_h1_val == rs2_h1_val, rs2_h3_val == 4, rs2_h1_val == 512, rs1_h2_val == -2, rs1_h0_val == 64
// opcode: sub16 ; op1:x4; op2:x9; dest:x30; op1val:0x03fffe02000040;  op2val:0x0400030200fffd
TEST_RR_OP(sub16, x30, x4, x9, 0x0000000000000000, 0x03fffe02000040, 0x0400030200fffd, x18, 48, x3)

inst_7:
// rs1==x14, rs2==x16, rd==x20, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h3_val == 16384, rs2_h2_val == -2, rs2_h0_val == 8192, rs1_h1_val == -129, rs1_h2_val == -5, rs1_h3_val == 2048
// opcode: sub16 ; op1:x14; op2:x16; dest:x20; op1val:0x800fffbff7ffffc;  op2val:0x4000fffe00402000
TEST_RR_OP(sub16, x20, x14, x16, 0x0000000000000000, 0x800fffbff7ffffc, 0x4000fffe00402000, x18, 56, x3)

inst_8:
// rs1==x1, rs2==x7, rd==x5, rs1_h0_val == rs2_h0_val, rs2_h2_val == -16385, rs1_h3_val == 1024, rs1_h0_val == -17, rs1_h2_val == 32, rs1_h1_val == 8, rs2_h0_val == -17
// opcode: sub16 ; op1:x1; op2:x7; dest:x5; op1val:0x40000200008ffef;  op2val:0xfff9bfff0005ffef
TEST_RR_OP(sub16, x5, x1, x7, 0x0000000000000000, 0x40000200008ffef, 0xfff9bfff0005ffef, x18, 64, x3)

inst_9:
// rs1==x21, rs2==x1, rd==x15, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == -3, rs1_h3_val == 1, rs1_h2_val == 16, rs2_h0_val == 1024
// opcode: sub16 ; op1:x21; op2:x1; dest:x15; op1val:0x0100103fff0001;  op2val:0xc0000010fffd0400
TEST_RR_OP(sub16, x15, x21, x1, 0x0000000000000000, 0x0100103fff0001, 0xc0000010fffd0400, x18, 72, x3)

inst_10:
// rs1==x28, rs2==x19, rd==x22, rs2_h3_val == -21846, rs1_h0_val == -9, rs1_h3_val == -65
// opcode: sub16 ; op1:x28; op2:x19; dest:x22; op1val:0xffbf0020fff8fff7;  op2val:0xaaaac0003fff0009
TEST_RR_OP(sub16, x22, x28, x19, 0x0000000000000000, 0xffbf0020fff8fff7, 0xaaaac0003fff0009, x18, 80, x3)

inst_11:
// rs1==x5, rs2==x31, rd==x19, rs2_h3_val == 21845, rs1_h0_val == -5, rs2_h0_val == -2049, rs1_h1_val == 64, rs1_h3_val == -1025, rs2_h1_val == 4096
// opcode: sub16 ; op1:x5; op2:x31; dest:x19; op1val:0xfbff00200040fffb;  op2val:0x55553fff1000f7ff
TEST_RR_OP(sub16, x19, x5, x31, 0x0000000000000000, 0xfbff00200040fffb, 0x55553fff1000f7ff, x18, 88, x3)

inst_12:
// rs1==x9, rs2==x22, rd==x4, rs2_h3_val == 32767, rs1_h2_val == -257, rs2_h2_val == 21845
// opcode: sub16 ; op1:x9; op2:x22; dest:x4; op1val:0xc000feff3fff0003;  op2val:0x7fff555500060100
TEST_RR_OP(sub16, x4, x9, x22, 0x0000000000000000, 0xc000feff3fff0003, 0x7fff555500060100, x18, 96, x3)

inst_13:
// rs1==x2, rs2==x12, rd==x7, rs2_h3_val == -16385, rs2_h2_val == -1025, rs1_h2_val == 512, rs1_h1_val == 1024, rs2_h1_val == -129, rs1_h3_val == -8193, rs2_h0_val == -32768
// opcode: sub16 ; op1:x2; op2:x12; dest:x7; op1val:0xdfff020004008000;  op2val:0xbffffbffff7f8000
TEST_RR_OP(sub16, x7, x2, x12, 0x0000000000000000, 0xdfff020004008000, 0xbffffbffff7f8000, x18, 104, x3)

inst_14:
// rs1==x30, rs2==x8, rd==x31, rs2_h3_val == -8193, rs2_h1_val == -16385, rs1_h3_val == -17, rs1_h1_val == 2048
// opcode: sub16 ; op1:x30; op2:x8; dest:x31; op1val:0xffeffff908000040;  op2val:0xdfff5555bfff2000
TEST_RR_OP(sub16, x31, x30, x8, 0x0000000000000000, 0xffeffff908000040, 0xdfff5555bfff2000, x18, 112, x3)

inst_15:
// rs1==x29, rs2==x3, rd==x26, rs2_h3_val == -4097, rs1_h1_val == 16384, rs2_h0_val == 1, rs2_h2_val == -32768, rs1_h2_val == -129, rs1_h0_val == -4097
// opcode: sub16 ; op1:x29; op2:x3; dest:x26; op1val:0xfffcff7f4000efff;  op2val:0xefff800010000001
TEST_RR_OP(sub16, x26, x29, x3, 0x0000000000000000, 0xfffcff7f4000efff, 0xefff800010000001, x18, 120, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:
// rs1==x0, rs2==x30, rd==x28, rs2_h3_val == -2049, rs1_h2_val == 16384, rs1_h1_val == 256, rs2_h1_val == -17
// opcode: sub16 ; op1:x0; op2:x30; dest:x28; op1val:0xffef400001000003;  op2val:0xf7ff0040ffef0007
TEST_RR_OP(sub16, x28, x0, x30, 0x0000000000000000, 0xffef400001000003, 0xf7ff0040ffef0007, x1, 0, x5)

inst_17:
// rs1==x11, rs2==x23, rd==x18, rs2_h3_val == -1025, rs1_h0_val == 4, rs1_h2_val == 2, rs2_h0_val == -2, rs2_h1_val == -9
// opcode: sub16 ; op1:x11; op2:x23; dest:x18; op1val:0x070002fffa0004;  op2val:0xfbff0007fff7fffe
TEST_RR_OP(sub16, x18, x11, x23, 0x0000000000000000, 0x070002fffa0004, 0xfbff0007fff7fffe, x1, 8, x5)

inst_18:
// rs1==x17, rs2==x21, rd==x8, rs2_h3_val == -513, rs1_h1_val == -8193, rs2_h0_val == 128
// opcode: sub16 ; op1:x17; op2:x21; dest:x8; op1val:0xfff90005dffffffe;  op2val:0xfdffbffffffc0080
TEST_RR_OP(sub16, x8, x17, x21, 0x0000000000000000, 0xfff90005dffffffe, 0xfdffbffffffc0080, x1, 16, x5)

inst_19:
// rs1==x8, rs2==x10, rd==x12, rs2_h3_val == -257, rs2_h1_val == -8193, rs1_h2_val == 256, rs2_h0_val == 2, rs1_h0_val == 512, rs2_h2_val == 4096, rs1_h3_val == -9
// opcode: sub16 ; op1:x8; op2:x10; dest:x12; op1val:0xfff7010010000200;  op2val:0xfeff1000dfff0002
TEST_RR_OP(sub16, x12, x8, x10, 0x0000000000000000, 0xfff7010010000200, 0xfeff1000dfff0002, x1, 24, x5)

inst_20:
// rs1==x16, rs2==x28, rd==x29, rs2_h3_val == -129, rs2_h2_val == 8, rs1_h0_val == -1025
// opcode: sub16 ; op1:x16; op2:x28; dest:x29; op1val:0xffeffff8fff6fbff;  op2val:0xff7f0008dfff0100
TEST_RR_OP(sub16, x29, x16, x28, 0x0000000000000000, 0xffeffff8fff6fbff, 0xff7f0008dfff0100, x1, 32, x5)

inst_21:
// rs1==x18, rs2==x29, rd==x6, rs2_h3_val == -65, rs1_h2_val == 64, rs1_h1_val == -1, rs2_h0_val == -257, rs2_h1_val == -2049
// opcode: sub16 ; op1:x18; op2:x29; dest:x6; op1val:0xdfff0040fffffffb;  op2val:0xffbffbfff7fffeff
TEST_RR_OP(sub16, x6, x18, x29, 0x0000000000000000, 0xdfff0040fffffffb, 0xffbffbfff7fffeff, x1, 40, x5)

inst_22:
// rs1==x7, rs2==x18, rd==x2, rs2_h3_val == -33, rs2_h0_val == 64, rs1_h2_val == -1, rs1_h1_val == -513
// opcode: sub16 ; op1:x7; op2:x18; dest:x2; op1val:0x03fffffdff3fff;  op2val:0xffdf800010000040
TEST_RR_OP(sub16, x2, x7, x18, 0x0000000000000000, 0x03fffffdff3fff, 0xffdf800010000040, x1, 48, x5)

inst_23:
// rs1==x24, rs2==x26, rd==x16, rs2_h3_val == -17, rs2_h0_val == -65, rs2_h2_val == -8193, rs1_h1_val == 1, rs1_h3_val == -33
// opcode: sub16 ; op1:x24; op2:x26; dest:x16; op1val:0xffdf01000001fffd;  op2val:0xffefdfffff7fffbf
TEST_RR_OP(sub16, x16, x24, x26, 0x0000000000000000, 0xffdf01000001fffd, 0xffefdfffff7fffbf, x1, 56, x5)

inst_24:
// rs1==x12, rs2==x20, rd==x3, rs2_h3_val == -9, rs1_h0_val == -257, rs1_h2_val == 32767
// opcode: sub16 ; op1:x12; op2:x20; dest:x3; op1val:0x20007fff1000feff;  op2val:0xfff710003fff3fff
TEST_RR_OP(sub16, x3, x12, x20, 0x0000000000000000, 0x20007fff1000feff, 0xfff710003fff3fff, x1, 64, x5)

inst_25:
// rs1==x20, rs2==x14, rd==x21, rs2_h3_val == -5, rs2_h1_val == -1, rs2_h0_val == 32767, rs1_h1_val == 32, rs1_h2_val == 0, rs2_h2_val == 0
// opcode: sub16 ; op1:x20; op2:x14; dest:x21; op1val:0x0500000020efff;  op2val:0xfffb0000ffff7fff
TEST_RR_OP(sub16, x21, x20, x14, 0x0000000000000000, 0x0500000020efff, 0xfffb0000ffff7fff, x1, 72, x5)

inst_26:
// rs1==x26, rs2==x4, rd==x9, rs2_h3_val == -2, rs2_h2_val == 8192, rs2_h0_val == 16, rs1_h2_val == -32768
// opcode: sub16 ; op1:x26; op2:x4; dest:x9; op1val:0x4008000fff6feff;  op2val:0xfffe2000ffff0010
TEST_RR_OP(sub16, x9, x26, x4, 0x0000000000000000, 0x4008000fff6feff, 0xfffe2000ffff0010, x1, 80, x5)

inst_27:
// rs1==x22, rs2==x25, rd==x14, rs2_h3_val == -32768, rs2_h1_val == 4, rs1_h1_val == -16385, rs2_h2_val == 512, rs1_h0_val == 16384
// opcode: sub16 ; op1:x22; op2:x25; dest:x14; op1val:0xfffe0007bfff4000;  op2val:0x800002000004fffc
TEST_RR_OP(sub16, x14, x22, x25, 0x0000000000000000, 0xfffe0007bfff4000, 0x800002000004fffc, x1, 88, x5)

inst_28:
// rs1==x15, rs2==x11, rd==x27, rs2_h3_val == 8192, rs1_h0_val == -65, rs2_h1_val == 2, rs2_h0_val == -129, rs1_h1_val == -21846, rs1_h3_val == -5, rs2_h2_val == 32767
// opcode: sub16 ; op1:x15; op2:x11; dest:x27; op1val:0xfffbffffaaaaffbf;  op2val:0x20007fff0002ff7f
TEST_RR_OP(sub16, x27, x15, x11, 0x0000000000000000, 0xfffbffffaaaaffbf, 0x20007fff0002ff7f, x1, 96, x5)

inst_29:
// rs1==x19, rs2==x2, rd==x25, rs2_h3_val == 4096, rs2_h2_val == -4097
// opcode: sub16 ; op1:x19; op2:x2; dest:x25; op1val:0x5555c0000800fffe;  op2val:0x1000efff3fff0009
TEST_RR_OP(sub16, x25, x19, x2, 0x0000000000000000, 0x5555c0000800fffe, 0x1000efff3fff0009, x1, 104, x4)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_30:
// rs1==x3, rs2==x15, rd==x1, rs2_h3_val == 2048, rs1_h3_val == 32
// opcode: sub16 ; op1:x3; op2:x15; dest:x1; op1val:0x20fff9fffa0001;  op2val:0x8000000fdffc000
TEST_RR_OP(sub16, x1, x3, x15, 0x0000000000000000, 0x20fff9fffa0001, 0x8000000fdffc000, x2, 0, x4)

inst_31:
// rs1==x6, rs2_h3_val == 1024, rs1_h2_val == -1025
// opcode: sub16 ; op1:x6; op2:x25; dest:x0; op1val:0xffdffbffaaaafffe;  op2val:0x400fffe0009f7ff
TEST_RR_OP(sub16, x0, x6, x25, 0x0000000000000000, 0xffdffbffaaaafffe, 0x400fffe0009f7ff, x2, 8, x4)

inst_32:
// rs2==x24, rs2_h3_val == 512, rs1_h1_val == 4, rs1_h0_val == 32, rs2_h0_val == -5
// opcode: sub16 ; op1:x5; op2:x24; dest:x8; op1val:0x08fffe00040020;  op2val:0x200c000fff7fffb
TEST_RR_OP(sub16, x8, x5, x24, 0x0000000000000000, 0x08fffe00040020, 0x200c000fff7fffb, x2, 16, x4)

inst_33:
// rd==x24, rs2_h3_val == 256, rs2_h1_val == -21846, rs1_h2_val == 2048, rs1_h0_val == 2
// opcode: sub16 ; op1:x22; op2:x25; dest:x24; op1val:0xfffc080000200002;  op2val:0x1000003aaaadfff
TEST_RR_OP(sub16, x24, x22, x25, 0x0000000000000000, 0xfffc080000200002, 0x1000003aaaadfff, x2, 24, x4)

inst_34:
// rs2_h3_val == 128, rs2_h2_val == -3, rs1_h1_val == -4097, rs1_h0_val == -1
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x06fffcefffffff;  op2val:0x80fffdfff6fff9
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x06fffcefffffff, 0x80fffdfff6fff9, x2, 32, x4)

inst_35:
// rs2_h3_val == 64, rs2_h0_val == -4097
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fffe0800fbff;  op2val:0x40effffff9efff
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x20fffe0800fbff, 0x40effffff9efff, x2, 40, x4)

inst_36:
// rs1_h1_val == -5, rs2_h1_val == 21845, rs1_h0_val == -129
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0003fffbff7f;  op2val:0x8000015555feff
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xfffb0003fffbff7f, 0x8000015555feff, x2, 48, x4)

inst_37:
// rs1_h1_val == -3, rs1_h3_val == 2, rs2_h1_val == 0, rs1_h2_val == 8192
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x022000fffdfff7;  op2val:0x0400100000fffb
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x022000fffdfff7, 0x0400100000fffb, x2, 56, x4)

inst_38:
// rs1_h1_val == -2, rs2_h1_val == 128, rs2_h2_val == -21846, rs2_h0_val == -513
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffbfffe0009;  op2val:0xfffeaaaa0080fdff
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xdffffffbfffe0009, 0xfffeaaaa0080fdff, x2, 64, x4)

inst_39:
// rs1_h1_val == -32768, rs1_h3_val == -21846, rs2_h2_val == -9, rs1_h2_val == -513
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafdff80000040;  op2val:0x400fff7dfffff7f
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xaaaafdff80000040, 0x400fff7dfffff7f, x2, 72, x4)

inst_40:
// rs1_h1_val == 8192, rs2_h0_val == 8
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fff72000c000;  op2val:0xfdff0003aaaa0008
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x01fff72000c000, 0xfdff0003aaaa0008, x2, 80, x4)

inst_41:
// rs1_h1_val == 128, rs1_h3_val == 256, rs2_h1_val == 32767, rs1_h0_val == 128, rs2_h2_val == 128
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x100001000800080;  op2val:0xdfff00807ffffffa
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x100001000800080, 0xdfff00807ffffffa, x2, 88, x4)

inst_42:
// rs1_h1_val == 16, rs2_h3_val == 1, rs2_h0_val == 0
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef01000010fff8;  op2val:0x01fff900000000
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xffef01000010fff8, 0x01fff900000000, x2, 96, x4)

inst_43:
// rs1_h1_val == 2, rs1_h2_val == -4097, rs1_h3_val == 16384, rs2_h2_val == 1024, rs2_h3_val == 16
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000efff0002fffd;  op2val:0x100400c0000080
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x4000efff0002fffd, 0x100400c0000080, x2, 104, x4)

inst_44:
// rs1_h1_val == 0, rs2_h0_val == 32
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffe0000fff6;  op2val:0x4007fff00020020
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x4000fffe0000fff6, 0x4007fff00020020, x2, 112, x4)

inst_45:
// rs1_h0_val == -21846, rs2_h2_val == 32, rs2_h1_val == 16384, rs1_h2_val == -3
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fffdfff9aaaa;  op2val:0xffbf002040000007
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x01fffdfff9aaaa, 0xffbf002040000007, x2, 120, x4)

inst_46:
// rs1_h0_val == 21845, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffd00025555;  op2val:0x8000fffdaaaa0400
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x3ffffffd00025555, 0x8000fffdaaaa0400, x2, 128, x4)

inst_47:
// rs1_h0_val == 32767, rs1_h2_val == 1024, rs1_h3_val == -4097
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0400ffff7fff;  op2val:0x030008ffff0006
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xefff0400ffff7fff, 0x030008ffff0006, x2, 136, x4)

inst_48:
// rs1_h0_val == -16385, rs2_h1_val == 32
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000efff0009bfff;  op2val:0xf7ff020000200100
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xc000efff0009bfff, 0xf7ff020000200100, x2, 144, x4)

inst_49:
// rs1_h0_val == -8193, rs1_h2_val == -65, rs2_h1_val == 256
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaffbffffddfff;  op2val:0xaaaafff801000080
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xaaaaffbffffddfff, 0xaaaafff801000080, x2, 152, x4)

inst_50:
// rs1_h0_val == -2049, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000efff8000f7ff;  op2val:0x09fffdfffbfff9
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xc000efff8000f7ff, 0x09fffdfffbfff9, x2, 160, x4)

inst_51:
// rs1_h0_val == -513, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550002effffdff;  op2val:0xffbf0003fdfffffd
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x55550002effffdff, 0xffbf0003fdfffffd, x2, 168, x4)

inst_52:
// rs1_h0_val == -33, rs1_h3_val == 0
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x00feff3fffffdf;  op2val:0xfffebfffaaaa4000
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x00feff3fffffdf, 0xfffebfffaaaa4000, x2, 176, x4)

inst_53:
// rs1_h0_val == 8192, rs1_h3_val == -1, rs2_h2_val == -5
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00102000;  op2val:0xffdffffb01008000
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xfffffffa00102000, 0xffdffffb01008000, x2, 184, x4)

inst_54:
// rs1_h0_val == 4096, rs2_h0_val == -16385, rs2_h1_val == -4097
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff74000dfff1000;  op2val:0xfffd0200efffbfff
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xfff74000dfff1000, 0xfffd0200efffbfff, x2, 192, x4)

inst_55:
// rs1_h0_val == 2048, rs2_h1_val == 1024, rs1_h1_val == 21845
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x07fdff55550800;  op2val:0xf7ff3fff0400c000
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x07fdff55550800, 0xf7ff3fff0400c000, x2, 200, x4)

inst_56:
// rs1_h0_val == 1024, rs1_h3_val == -16385
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff800800400;  op2val:0xffbf0020ffef0001
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xbffffff800800400, 0xffbf0020ffef0001, x2, 208, x4)

inst_57:
// rs1_h0_val == 256, rs1_h2_val == -33, rs2_h1_val == 1, rs2_h0_val == -21846
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffdf00020100;  op2val:0xfff7c0000001aaaa
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xffdfffdf00020100, 0xfff7c0000001aaaa, x2, 216, x4)

inst_58:
// rs2_h0_val == 21845, rs2_h1_val == 16, rs2_h2_val == -257
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x07fdff8000fffc;  op2val:0xfff7feff00105555
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x07fdff8000fffc, 0xfff7feff00105555, x2, 224, x4)

inst_59:
// rs2_h0_val == -1025, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x070010fffafdff;  op2val:0xfffefffebffffbff
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x070010fffafdff, 0xfffefffebffffbff, x2, 232, x4)

inst_60:
// rs2_h0_val == -33, rs2_h2_val == -2049
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0100fff6fffa;  op2val:0xfbfff7ff0005ffdf
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xfffc0100fff6fffa, 0xfbfff7ff0005ffdf, x2, 240, x4)

inst_61:
// rs2_h0_val == -9, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000fff904000005;  op2val:0xffdffff9fff7fff7
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xc000fff904000005, 0xffdffff9fff7fff7, x2, 248, x4)

inst_62:
// rs2_h0_val == 4096, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd00023fff0004;  op2val:0x100fffb00071000
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xfffd00023fff0004, 0x100fffb00071000, x2, 256, x4)

inst_63:
// rs2_h0_val == 2048, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fffa0005fffc;  op2val:0x1001000fffd0800
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x20fffa0005fffc, 0x1001000fffd0800, x2, 264, x4)

inst_64:
// rs2_h0_val == 512, rs2_h2_val == -65
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff000300050001;  op2val:0xfbffffbffffa0200
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xdfff000300050001, 0xfbffffbffffa0200, x2, 272, x4)

inst_65:
// rs2_h0_val == -1, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfdff0800aaaa;  op2val:0x3fffffbffff7ffff
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xfffbfdff0800aaaa, 0x3fffffbffff7ffff, x2, 280, x4)

inst_66:
// rs1_h3_val == 32767, rs1_h0_val == 16
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffeff00030010;  op2val:0x800040000801000
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x7ffffeff00030010, 0x800040000801000, x2, 288, x4)

inst_67:
// rs1_h3_val == -2049, rs2_h2_val == -1
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0040fff7fff7;  op2val:0x00ffff00807fff
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xf7ff0040fff7fff7, 0x00ffff00807fff, x2, 296, x4)

inst_68:
// rs1_h3_val == -513, rs1_h2_val == 8
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff000800050002;  op2val:0xfffcfbff0004efff
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xfdff000800050002, 0xfffcfbff0004efff, x2, 304, x4)

inst_69:
// rs1_h0_val == 8, rs2_h3_val == 32
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x080000ffff0008;  op2val:0x20008000042000
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x080000ffff0008, 0x20008000042000, x2, 312, x4)

inst_70:
// rs1_h3_val == -257, rs2_h3_val == 2, rs2_h1_val == -32768
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff04000002fff9;  op2val:0x02feff8000ffef
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xfeff04000002fff9, 0x02feff8000ffef, x2, 320, x4)

inst_71:
// rs1_h3_val == -129, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffeff0005ff7f;  op2val:0x40007ffffffd0007
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xff7ffeff0005ff7f, 0x40007ffffffd0007, x2, 328, x4)

inst_72:
// rs2_h3_val == -1, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefbfffffcc000;  op2val:0xffff7fffc000fffa
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xfffefbfffffcc000, 0xffff7fffc000fffa, x2, 336, x4)

inst_73:
// rs1_h3_val == 4096, rs2_h2_val == 4, rs1_h1_val == -17
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fdffffef0002;  op2val:0x4000047fffffff
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x1000fdffffef0002, 0x4000047fffffff, x2, 344, x4)

inst_74:
// rs1_h3_val == 512, rs2_h2_val == 256
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x2004000aaaa0001;  op2val:0x100001000040dfff
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x2004000aaaa0001, 0x100001000040dfff, x2, 352, x4)

inst_75:
// rs1_h3_val == 128, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fff80009aaaa;  op2val:0x1000fffbfffffffb
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x80fff80009aaaa, 0x1000fffbfffffffb, x2, 360, x4)

inst_76:
// rs1_h3_val == 64, rs1_h2_val == 1
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000108000000;  op2val:0xdfff0009ff7fffef
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x40000108000000, 0xdfff0009ff7fffef, x2, 368, x4)

inst_77:
// rs2_h2_val == -513, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff2000bfffffdf;  op2val:0x05fdff00010800
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x3fff2000bfffffdf, 0x05fdff00010800, x2, 376, x4)

inst_78:
// rs1_h3_val == 16, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x102000fffd8000;  op2val:0x7ffffff800102000
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x102000fffd8000, 0x7ffffff800102000, x2, 384, x4)

inst_79:
// rs2_h2_val == -129, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffff60020fffa;  op2val:0x200ff7ffff6fffd
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xfefffff60020fffa, 0x200ff7ffff6fffd, x2, 392, x4)

inst_80:
// rs1_h3_val == 4, rs1_h1_val == -2049
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x040006f7fffbff;  op2val:0xfffc00407fffc000
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x040006f7fffbff, 0xfffc00407fffc000, x2, 400, x4)

inst_81:
// rs2_h2_val == -33, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x200009ffefffef;  op2val:0xff7fffdff7ff0010
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x200009ffefffef, 0xff7fffdff7ff0010, x2, 408, x4)

inst_82:
// rs1_h2_val == -21846, rs1_h1_val == -257
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffaaaafeffaaaa;  op2val:0x800000007fffffef
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xefffaaaafeffaaaa, 0x800000007fffffef, x2, 416, x4)

inst_83:
// rs1_h2_val == 21845, rs1_h1_val == -65, rs2_h2_val == 2
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x805555ffbffff6;  op2val:0xfff90002fffbfdff
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x805555ffbffff6, 0xfff90002fffbfdff, x2, 424, x4)

inst_84:
// rs2_h2_val == 16384, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff001001000005;  op2val:0x7fff40003fff0100
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xefff001001000005, 0x7fff40003fff0100, x2, 432, x4)

inst_85:
// rs1_h2_val == 4096, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x800010000009bfff;  op2val:0x00dffffffffeff
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x800010000009bfff, 0x00dffffffffeff, x2, 440, x4)

inst_86:
// rs1_h2_val == 128, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550080efff0020;  op2val:0xfff80010fffc0000
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x55550080efff0020, 0xfff80010fffc0000, x2, 448, x4)

inst_87:
// rs2_h1_val == -1025, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fffb1000ffdf;  op2val:0xff7f0003fbffdfff
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x04fffb1000ffdf, 0xff7f0003fbffdfff, x2, 456, x4)

inst_88:
// rs2_h1_val == -257, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xc00000014000fff9;  op2val:0xffdf0004feff0040
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xc00000014000fff9, 0xffdf0004feff0040, x2, 464, x4)

inst_89:
// rs2_h1_val == -65, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0001fdff1000;  op2val:0xfefffbffffbffffd
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xff7f0001fdff1000, 0xfefffbffffbffffd, x2, 472, x4)

inst_90:
// rs2_h1_val == -33, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70003fff8ffef;  op2val:0x070020ffdffff7
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xfff70003fff8ffef, 0x070020ffdffff7, x2, 480, x4)

inst_91:
// rs1_h2_val == -8193, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffedffffffd0005;  op2val:0xfbff01000007fff6
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xfffedffffffd0005, 0xfbff01000007fff6, x2, 488, x4)

inst_92:
// rs2_h1_val == -2, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x050040ffef0005;  op2val:0x20fffcfffefff9
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x050040ffef0005, 0x20fffcfffefff9, x2, 496, x4)

inst_93:
// rs2_h2_val == 2048, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x00ffdfffff0000;  op2val:0xffbf0800fff60000
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x00ffdfffff0000, 0xffbf0800fff60000, x2, 504, x4)

inst_94:
// rs1_h2_val == -2049, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8f7ffff7f0100;  op2val:0xfff7c0000007fffc
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xfff8f7ffff7f0100, 0xfff7c0000007fffc, x2, 512, x4)

inst_95:
// rs1_h1_val == 32767, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x07feff7fffffbf;  op2val:0x10fff7fffbfffb
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x07feff7fffffbf, 0x10fff7fffbfffb, x2, 520, x4)

inst_96:
// rs1_h1_val == -1025, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7f7fffbffaaaa;  op2val:0x0580000002fffc
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xfff7f7fffbffaaaa, 0x0580000002fffc, x2, 528, x4)

inst_97:
// rs2_h1_val == 8192, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000800002efff;  op2val:0xaaaa400020000000
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x20000800002efff, 0xaaaa400020000000, x2, 536, x4)

inst_98:
// rs1_h1_val == -33, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8efffffdffffc;  op2val:0x5555fff7f7ff2000
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0xfff8efffffdffffc, 0x5555fff7f7ff2000, x2, 544, x4)

inst_99:
// rs2_h1_val == 8, 
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500002000;  op2val:0x5555000800080008
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x5555555500002000, 0x5555000800080008, x2, 552, x4)

inst_100:
// rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h1_val == -513, rs2_h0_val == -8193, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h3_val == 8, rs2_h2_val == 16, rs1_h3_val == 8192
// opcode: sub16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000009fff9fffe;  op2val:0x080010fdffdfff
TEST_RR_OP(sub16, x31, x30, x29, 0x0000000000000000, 0x20000009fff9fffe, 0x080010fdffdfff, x2, 560, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x18_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x18_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 71*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
