
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pkbt32 instruction of the RISC-V RV64PZicsr extension for the pkbt32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pkbt32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x18, rs2==x2, rd==x18, rs1_w0_val == 0, rs2_w0_val == 4261412863, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0
// opcode: pkbt32 ; op1:x18; op2:x2; dest:x18; op1val:0x00000300000000;  op2val:0x000012fdffffff
TEST_RR_OP(pkbt32, x18, x18, x2, 0x0000000000000000, 0x00000300000000, 0x000012fdffffff, x6, 0, x7)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x9, rs2==x13, rd==x2, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 4194304, rs2_w1_val == 4294705151, rs1_w0_val == 4261412863, rs1_w1_val == 4294705151
// opcode: pkbt32 ; op1:x9; op2:x13; dest:x2; op1val:0xfffbfffffdffffff;  op2val:0xfffbffff00400000
TEST_RR_OP(pkbt32, x2, x9, x13, 0x0000000000000000, 0xfffbfffffdffffff, 0xfffbffff00400000, x6, 8, x7)

inst_2:
// rs1 == rs2 != rd, rs1==x11, rs2==x11, rd==x14, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 4294967167, rs1_w0_val == 4294967167
// opcode: pkbt32 ; op1:x11; op2:x11; dest:x14; op1val:0x000003ffffff7f;  op2val:0x000009ffffff7f
TEST_RR_OP(pkbt32, x14, x11, x11, 0x0000000000000000, 0x000003ffffff7f, 0x000009ffffff7f, x6, 16, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x23, rs2==x23, rd==x23, rs2_w1_val == 2863311530, rs1_w1_val == 65536, rs2_w0_val == 4096
// opcode: pkbt32 ; op1:x23; op2:x23; dest:x23; op1val:0x0100000000000b;  op2val:0xaaaaaaaa00001000
TEST_RR_OP(pkbt32, x23, x23, x23, 0x0000000000000000, 0x0100000000000b, 0xaaaaaaaa00001000, x6, 24, x7)

inst_4:
// rs2 == rd != rs1, rs1==x25, rs2==x22, rd==x22, rs2_w1_val == 1431655765, rs2_w0_val == 4286578687, rs1_w0_val == 3758096383, rs1_w1_val == 2048
// opcode: pkbt32 ; op1:x25; op2:x22; dest:x22; op1val:0x000800dfffffff;  op2val:0x55555555ff7fffff
TEST_RR_OP(pkbt32, x22, x25, x22, 0x0000000000000000, 0x000800dfffffff, 0x55555555ff7fffff, x6, 32, x7)

inst_5:
// rs1==x28, rs2==x21, rd==x8, rs2_w1_val == 2147483647, rs1_w1_val == 524288, rs1_w0_val == 1048576, rs2_w0_val == 4294965247
// opcode: pkbt32 ; op1:x28; op2:x21; dest:x8; op1val:0x08000000100000;  op2val:0x7ffffffffffff7ff
TEST_RR_OP(pkbt32, x8, x28, x21, 0x0000000000000000, 0x08000000100000, 0x7ffffffffffff7ff, x6, 40, x7)

inst_6:
// rs1==x15, rs2==x3, rd==x5, rs2_w1_val == 3221225471, rs1_w0_val == 4294836223, rs1_w1_val == 4294967279, rs2_w0_val == 524288
// opcode: pkbt32 ; op1:x15; op2:x3; dest:x5; op1val:0xffffffeffffdffff;  op2val:0xbfffffff00080000
TEST_RR_OP(pkbt32, x5, x15, x3, 0x0000000000000000, 0xffffffeffffdffff, 0xbfffffff00080000, x6, 48, x7)

inst_7:
// rs1==x19, rs2==x31, rd==x13, rs2_w1_val == 3758096383, rs2_w0_val == 256, rs1_w1_val == 4026531839
// opcode: pkbt32 ; op1:x19; op2:x31; dest:x13; op1val:0xefffffffffffff7f;  op2val:0xdfffffff00000100
TEST_RR_OP(pkbt32, x13, x19, x31, 0x0000000000000000, 0xefffffffffffff7f, 0xdfffffff00000100, x6, 56, x7)

inst_8:
// rs1==x17, rs2==x19, rd==x9, rs2_w1_val == 4026531839, rs1_w1_val == 1073741824, rs1_w0_val == 32768
// opcode: pkbt32 ; op1:x17; op2:x19; dest:x9; op1val:0x4000000000008000;  op2val:0xefffffffff7fffff
TEST_RR_OP(pkbt32, x9, x17, x19, 0x0000000000000000, 0x4000000000008000, 0xefffffffff7fffff, x6, 64, x7)

inst_9:
// rs1==x5, rs2==x15, rd==x3, rs2_w1_val == 4160749567, rs2_w0_val == 65536, rs1_w0_val == 4096
// opcode: pkbt32 ; op1:x5; op2:x15; dest:x3; op1val:0x00000600001000;  op2val:0xf7ffffff00010000
TEST_RR_OP(pkbt32, x3, x5, x15, 0x0000000000000000, 0x00000600001000, 0xf7ffffff00010000, x6, 72, x7)

inst_10:
// rs1==x21, rs2==x20, rd==x0, rs2_w1_val == 4227858431, rs2_w0_val == 3758096383, rs1_w0_val == 2048
// opcode: pkbt32 ; op1:x21; op2:x20; dest:x0; op1val:0x00000f00000800;  op2val:0xfbffffffdfffffff
TEST_RR_OP(pkbt32, x0, x21, x20, 0x0000000000000000, 0x00000f00000800, 0xfbffffffdfffffff, x6, 80, x7)

inst_11:
// rs1==x24, rs2==x4, rd==x16, rs2_w1_val == 4261412863, rs1_w1_val == 4294967291
// opcode: pkbt32 ; op1:x24; op2:x4; dest:x16; op1val:0xfffffffbfffdffff;  op2val:0xfdffffff00000009
TEST_RR_OP(pkbt32, x16, x24, x4, 0x0000000000000000, 0xfffffffbfffdffff, 0xfdffffff00000009, x6, 88, x7)

inst_12:
// rs1==x8, rs2==x27, rd==x30, rs2_w1_val == 4278190079, rs1_w0_val == 256, rs2_w0_val == 4026531839
// opcode: pkbt32 ; op1:x8; op2:x27; dest:x30; op1val:0x01000000000100;  op2val:0xfeffffffefffffff
TEST_RR_OP(pkbt32, x30, x8, x27, 0x0000000000000000, 0x01000000000100, 0xfeffffffefffffff, x6, 96, x7)

inst_13:
// rs1==x1, rs2==x26, rd==x19, rs2_w1_val == 4286578687, rs2_w0_val == 131072, rs1_w0_val == 4294934527, rs1_w1_val == 4294967039
// opcode: pkbt32 ; op1:x1; op2:x26; dest:x19; op1val:0xfffffeffffff7fff;  op2val:0xff7fffff00020000
TEST_RR_OP(pkbt32, x19, x1, x26, 0x0000000000000000, 0xfffffeffffff7fff, 0xff7fffff00020000, x6, 104, x7)

inst_14:
// rs1==x0, rs2==x17, rd==x15, rs2_w1_val == 4290772991, rs2_w0_val == 4294966783
// opcode: pkbt32 ; op1:x0; op2:x17; dest:x15; op1val:0xfffffffb0000000c;  op2val:0xffbffffffffffdff
TEST_RR_OP(pkbt32, x15, x0, x17, 0x0000000000000000, 0xfffffffb0000000c, 0xffbffffffffffdff, x6, 112, x4)

inst_15:
// rs1==x13, rs2==x28, rd==x12, rs2_w1_val == 4292870143, rs2_w0_val == 4294967295, rs1_w1_val == 4
// opcode: pkbt32 ; op1:x13; op2:x28; dest:x12; op1val:0x000004fffdffff;  op2val:0xffdfffffffffffff
TEST_RR_OP(pkbt32, x12, x13, x28, 0x0000000000000000, 0x000004fffdffff, 0xffdfffffffffffff, x6, 120, x4)
RVTEST_SIGBASE(x13,signature_x13_0)

inst_16:
// rs1==x10, rs2==x30, rd==x29, rs2_w1_val == 4293918719, 
// opcode: pkbt32 ; op1:x10; op2:x30; dest:x29; op1val:0x00001200000012;  op2val:0xffefffffffffffff
TEST_RR_OP(pkbt32, x29, x10, x30, 0x0000000000000000, 0x00001200000012, 0xffefffffffffffff, x13, 0, x4)

inst_17:
// rs1==x12, rs2==x24, rd==x25, rs2_w1_val == 4294443007, rs1_w0_val == 4194304
// opcode: pkbt32 ; op1:x12; op2:x24; dest:x25; op1val:0xefffffff00400000;  op2val:0xfff7fffffdffffff
TEST_RR_OP(pkbt32, x25, x12, x24, 0x0000000000000000, 0xefffffff00400000, 0xfff7fffffdffffff, x13, 8, x4)

inst_18:
// rs1==x20, rs2==x29, rd==x27, rs2_w1_val == 4294836223, rs2_w0_val == 4294967293, rs1_w0_val == 2097152
// opcode: pkbt32 ; op1:x20; op2:x29; dest:x27; op1val:0x01000000200000;  op2val:0xfffdfffffffffffd
TEST_RR_OP(pkbt32, x27, x20, x29, 0x0000000000000000, 0x01000000200000, 0xfffdfffffffffffd, x13, 16, x4)

inst_19:
// rs1==x14, rs2==x0, rd==x26, rs2_w1_val == 4294901759, rs1_w1_val == 4294967293, rs1_w0_val == 8
// opcode: pkbt32 ; op1:x14; op2:x0; dest:x26; op1val:0xfffffffd00000008;  op2val:0xfffeffff00000013
TEST_RR_OP(pkbt32, x26, x14, x0, 0x0000000000000000, 0xfffffffd00000008, 0xfffeffff00000013, x13, 24, x4)

inst_20:
// rs1==x22, rs2==x9, rd==x6, rs2_w1_val == 4294934527, rs1_w0_val == 33554432, rs1_w1_val == 256
// opcode: pkbt32 ; op1:x22; op2:x9; dest:x6; op1val:0x00010002000000;  op2val:0xffff7fff0000000d
TEST_RR_OP(pkbt32, x6, x22, x9, 0x0000000000000000, 0x00010002000000, 0xffff7fff0000000d, x13, 32, x4)

inst_21:
// rs1==x2, rs2==x10, rd==x24, rs2_w1_val == 4294950911, rs1_w1_val == 4290772991, rs1_w0_val == 3221225471
// opcode: pkbt32 ; op1:x2; op2:x10; dest:x24; op1val:0xffbfffffbfffffff;  op2val:0xffffbfff00000012
TEST_RR_OP(pkbt32, x24, x2, x10, 0x0000000000000000, 0xffbfffffbfffffff, 0xffffbfff00000012, x13, 40, x4)

inst_22:
// rs1==x27, rs2==x12, rd==x20, rs2_w1_val == 4294959103, rs1_w1_val == 2147483648
// opcode: pkbt32 ; op1:x27; op2:x12; dest:x20; op1val:0x80000000bfffffff;  op2val:0xffffdfff00010000
TEST_RR_OP(pkbt32, x20, x27, x12, 0x0000000000000000, 0x80000000bfffffff, 0xffffdfff00010000, x13, 48, x4)

inst_23:
// rs1==x3, rs2==x5, rd==x28, rs2_w1_val == 4294963199, rs2_w0_val == 16777216
// opcode: pkbt32 ; op1:x3; op2:x5; dest:x28; op1val:0xfffffffd00000009;  op2val:0xffffefff01000000
TEST_RR_OP(pkbt32, x28, x3, x5, 0x0000000000000000, 0xfffffffd00000009, 0xffffefff01000000, x13, 56, x4)

inst_24:
// rs1==x7, rs2==x1, rd==x21, rs2_w1_val == 4294965247, rs1_w1_val == 268435456, rs2_w0_val == 8388608, rs1_w0_val == 4294959103
// opcode: pkbt32 ; op1:x7; op2:x1; dest:x21; op1val:0x10000000ffffdfff;  op2val:0xfffff7ff00800000
TEST_RR_OP(pkbt32, x21, x7, x1, 0x0000000000000000, 0x10000000ffffdfff, 0xfffff7ff00800000, x13, 64, x4)

inst_25:
// rs1==x31, rs2==x25, rd==x11, rs2_w1_val == 4294966271, rs1_w1_val == 4294967231, rs2_w0_val == 128
// opcode: pkbt32 ; op1:x31; op2:x25; dest:x11; op1val:0xffffffbf0000000f;  op2val:0xfffffbff00000080
TEST_RR_OP(pkbt32, x11, x31, x25, 0x0000000000000000, 0xffffffbf0000000f, 0xfffffbff00000080, x13, 72, x4)

inst_26:
// rs1==x26, rs2==x7, rd==x17, rs2_w1_val == 4294966783, rs2_w0_val == 1, rs1_w0_val == 4294901759, rs1_w1_val == 2863311530
// opcode: pkbt32 ; op1:x26; op2:x7; dest:x17; op1val:0xaaaaaaaafffeffff;  op2val:0xfffffdff00000001
TEST_RR_OP(pkbt32, x17, x26, x7, 0x0000000000000000, 0xaaaaaaaafffeffff, 0xfffffdff00000001, x13, 80, x4)

inst_27:
// rs1==x6, rs2==x8, rd==x1, rs2_w1_val == 4294967039, rs1_w1_val == 4194304
// opcode: pkbt32 ; op1:x6; op2:x8; dest:x1; op1val:0x40000000000000;  op2val:0xfffffeff00001000
TEST_RR_OP(pkbt32, x1, x6, x8, 0x0000000000000000, 0x40000000000000, 0xfffffeff00001000, x13, 88, x4)

inst_28:
// rs1==x29, rs2==x16, rd==x7, rs2_w1_val == 4294967167, rs1_w1_val == 4160749567
// opcode: pkbt32 ; op1:x29; op2:x16; dest:x7; op1val:0xf7ffffffffff7fff;  op2val:0xffffff7f00000009
TEST_RR_OP(pkbt32, x7, x29, x16, 0x0000000000000000, 0xf7ffffffffff7fff, 0xffffff7f00000009, x13, 96, x4)

inst_29:
// rs1==x16, rs2==x6, rd==x4, rs2_w1_val == 4294967231, rs1_w0_val == 4278190079, rs1_w1_val == 16
// opcode: pkbt32 ; op1:x16; op2:x6; dest:x4; op1val:0x000010feffffff;  op2val:0xffffffbf00001000
TEST_RR_OP(pkbt32, x4, x16, x6, 0x0000000000000000, 0x000010feffffff, 0xffffffbf00001000, x13, 104, x2)

inst_30:
// rs1==x4, rs2==x18, rd==x10, rs2_w1_val == 4294967263, rs2_w0_val == 1048576
// opcode: pkbt32 ; op1:x4; op2:x18; dest:x10; op1val:0xffbfffff00000009;  op2val:0xffffffdf00100000
TEST_RR_OP(pkbt32, x10, x4, x18, 0x0000000000000000, 0xffbfffff00000009, 0xffffffdf00100000, x13, 112, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x30, rs2==x14, rd==x31, rs2_w1_val == 4294967279, rs1_w0_val == 4294966271, rs2_w0_val == 4290772991, rs1_w1_val == 1431655765
// opcode: pkbt32 ; op1:x30; op2:x14; dest:x31; op1val:0x55555555fffffbff;  op2val:0xffffffefffbfffff
TEST_RR_OP(pkbt32, x31, x30, x14, 0x0000000000000000, 0x55555555fffffbff, 0xffffffefffbfffff, x1, 0, x2)

inst_32:
// rs2_w1_val == 4294967287, rs1_w0_val == 4294967231, rs1_w1_val == 2147483647
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffffbf;  op2val:0xfffffff700001000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffffbf, 0xfffffff700001000, x1, 8, x2)

inst_33:
// rs2_w1_val == 4294967291, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000a;  op2val:0xfffffffb00800000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x4000000000000a, 0xfffffffb00800000, x1, 16, x2)

inst_34:
// rs2_w1_val == 4294967293, rs1_w0_val == 4294705151
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000011fffbffff;  op2val:0xfffffffd00020000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x000011fffbffff, 0xfffffffd00020000, x1, 24, x2)

inst_35:
// rs2_w1_val == 4294967294, rs1_w1_val == 4294836223, rs2_w0_val == 4294967279
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff0000000f;  op2val:0xfffffffeffffffef
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffdffff0000000f, 0xfffffffeffffffef, x1, 32, x2)

inst_36:
// rs2_w1_val == 2147483648, rs2_w0_val == 512, rs1_w1_val == 4293918719
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000006;  op2val:0x8000000000000200
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xffefffff00000006, 0x8000000000000200, x1, 40, x2)

inst_37:
// rs2_w1_val == 1073741824, rs2_w0_val == 4294836223, rs1_w1_val == 4294966271
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000007;  op2val:0x40000000fffdffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000007, 0x40000000fffdffff, x1, 48, x2)

inst_38:
// rs2_w1_val == 536870912, rs2_w0_val == 2147483647, rs1_w1_val == 4294901759, rs1_w0_val == 4294967287
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffffffff7;  op2val:0x200000007fffffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffefffffffffff7, 0x200000007fffffff, x1, 56, x2)

inst_39:
// rs2_w1_val == 268435456, rs1_w0_val == 32
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000020;  op2val:0x10000000efffffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x40000000000020, 0x10000000efffffff, x1, 64, x2)

inst_40:
// rs2_w1_val == 134217728, rs1_w1_val == 128
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080feffffff;  op2val:0x8000000fffdffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x000080feffffff, 0x8000000fffdffff, x1, 72, x2)

inst_41:
// rs2_w1_val == 67108864, rs2_w0_val == 4294705151, rs1_w0_val == 131072
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00020000;  op2val:0x4000000fffbffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00020000, 0x4000000fffbffff, x1, 80, x2)

inst_42:
// rs2_w1_val == 33554432, rs1_w1_val == 8
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffdffff;  op2val:0x2000000ffbfffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x000008fffdffff, 0x2000000ffbfffff, x1, 88, x2)

inst_43:
// rs2_w1_val == 16777216, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003bfffffff;  op2val:0x100000000000001
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x000003bfffffff, 0x100000000000001, x1, 96, x2)

inst_44:
// rs2_w1_val == 8388608, rs2_w0_val == 4294967291, rs1_w1_val == 4294963199
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00200000;  op2val:0x800000fffffffb
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xffffefff00200000, 0x800000fffffffb, x1, 104, x2)

inst_45:
// rs2_w1_val == 4194304, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffff7fff;  op2val:0x400000ffffffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x000010ffff7fff, 0x400000ffffffff, x1, 112, x2)

inst_46:
// rs2_w1_val == 2097152, rs1_w1_val == 536870912
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000400000;  op2val:0x200000fffffffb
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x2000000000400000, 0x200000fffffffb, x1, 120, x2)

inst_47:
// rs2_w1_val == 1048576, rs2_w0_val == 1024
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000006;  op2val:0x10000000000400
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x40000000000006, 0x10000000000400, x1, 128, x2)

inst_48:
// rs2_w1_val == 524288, rs2_w0_val == 3221225471, rs1_w1_val == 4286578687
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000100;  op2val:0x080000bfffffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000100, 0x080000bfffffff, x1, 136, x2)

inst_49:
// rs2_w1_val == 262144, rs1_w1_val == 262144, rs1_w0_val == 4026531839
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000efffffff;  op2val:0x040000dfffffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x040000efffffff, 0x040000dfffffff, x1, 144, x2)

inst_50:
// rs2_w1_val == 131072, rs2_w0_val == 4294901759, rs1_w0_val == 1
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000001;  op2val:0x020000fffeffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00000800000001, 0x020000fffeffff, x1, 152, x2)

inst_51:
// rs2_w1_val == 65536, rs2_w0_val == 33554432
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000e00000800;  op2val:0x01000002000000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00000e00000800, 0x01000002000000, x1, 160, x2)

inst_52:
// rs2_w1_val == 32768, rs1_w0_val == 1431655765
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000855555555;  op2val:0x0080000000000d
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00000855555555, 0x0080000000000d, x1, 168, x2)

inst_53:
// rs2_w1_val == 16384, rs2_w0_val == 268435456
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000006;  op2val:0x00400010000000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x4000000000000006, 0x00400010000000, x1, 176, x2)

inst_54:
// rs2_w1_val == 8192, rs1_w0_val == 128, rs1_w1_val == 32768
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000080;  op2val:0x002000fffeffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00800000000080, 0x002000fffeffff, x1, 184, x2)

inst_55:
// rs1_w0_val == 262144, rs2_w0_val == 2863311530, rs1_w1_val == 4292870143
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00040000;  op2val:0xdfffffffaaaaaaaa
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00040000, 0xdfffffffaaaaaaaa, x1, 192, x2)

inst_56:
// rs1_w0_val == 65536, rs2_w0_val == 4294967263
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800010000;  op2val:0x8000000ffffffdf
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00000800010000, 0x8000000ffffffdf, x1, 200, x2)

inst_57:
// rs1_w0_val == 16384, rs2_w0_val == 8192
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00004000;  op2val:0xbfffffff00002000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00004000, 0xbfffffff00002000, x1, 208, x2)

inst_58:
// rs1_w0_val == 8192, rs1_w1_val == 4096
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000002000;  op2val:0x00000d00000007
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00100000002000, 0x00000d00000007, x1, 216, x2)

inst_59:
// rs1_w0_val == 1024, rs1_w1_val == 2097152
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000400;  op2val:0x000013fffff7ff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x20000000000400, 0x000013fffff7ff, x1, 224, x2)

inst_60:
// rs1_w0_val == 512, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000200;  op2val:0x400000001000000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000200, 0x400000001000000, x1, 232, x2)

inst_61:
// rs1_w0_val == 64, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001300000040;  op2val:0x40000000000200
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00001300000040, 0x40000000000200, x1, 240, x2)

inst_62:
// rs1_w0_val == 16, rs1_w1_val == 4294967167
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000010;  op2val:0x20000000ffbfffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000010, 0x20000000ffbfffff, x1, 248, x2)

inst_63:
// rs1_w0_val == 4, rs1_w1_val == 4294950911
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000004;  op2val:0x1000000000400000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000004, 0x1000000000400000, x1, 256, x2)

inst_64:
// rs1_w0_val == 2, rs2_w0_val == 4294967294
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000f00000002;  op2val:0xfffbfffffffffffe
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00000f00000002, 0xfffbfffffffffffe, x1, 264, x2)

inst_65:
// rs1_w0_val == 4294967295, rs1_w1_val == 3758096383, rs2_w0_val == 32768
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffffff;  op2val:0x2000000000008000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffffff, 0x2000000000008000, x1, 272, x2)

inst_66:
// rs2_w1_val == 4096, rs1_w0_val == 4294967263
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffffffdf;  op2val:0x00100000008000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xffffbfffffffffdf, 0x00100000008000, x1, 280, x2)

inst_67:
// rs2_w1_val == 2048, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000013;  op2val:0x00080000080000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x01000000000013, 0x00080000080000, x1, 288, x2)

inst_68:
// rs2_w1_val == 1024, rs2_w0_val == 4294934527, rs1_w1_val == 4227858431
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000000;  op2val:0x000400ffff7fff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000000, 0x000400ffff7fff, x1, 296, x2)

inst_69:
// rs2_w1_val == 512, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005feffffff;  op2val:0x00020000020000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x000005feffffff, 0x00020000020000, x1, 304, x2)

inst_70:
// rs2_w1_val == 256, rs1_w0_val == 2147483648
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001280000000;  op2val:0x000100dfffffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00001280000000, 0x000100dfffffff, x1, 312, x2)

inst_71:
// rs2_w1_val == 128, rs1_w1_val == 3221225471, rs2_w0_val == 4294967287
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffbffff;  op2val:0x000080fffffff7
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xbffffffffffbffff, 0x000080fffffff7, x1, 320, x2)

inst_72:
// rs2_w1_val == 64, rs2_w0_val == 1073741824
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000d00000040;  op2val:0x00004040000000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00000d00000040, 0x00004040000000, x1, 328, x2)

inst_73:
// rs2_w1_val == 32, rs2_w0_val == 4278190079, rs1_w0_val == 536870912
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff20000000;  op2val:0x000020feffffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffdffff20000000, 0x000020feffffff, x1, 336, x2)

inst_74:
// rs2_w1_val == 16, rs1_w1_val == 4294967263, rs1_w0_val == 4160749567
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdff7ffffff;  op2val:0x000010fffbffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xffffffdff7ffffff, 0x000010fffbffff, x1, 344, x2)

inst_75:
// rs2_w1_val == 8, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000002000000;  op2val:0x00000800400000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x20000002000000, 0x00000800400000, x1, 352, x2)

inst_76:
// rs2_w1_val == 4, rs1_w0_val == 2863311530
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffaaaaaaaa;  op2val:0x000004ffffffef
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xffffbfffaaaaaaaa, 0x000004ffffffef, x1, 360, x2)

inst_77:
// rs2_w1_val == 2, rs1_w0_val == 16777216, rs1_w1_val == 4294443007
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff01000000;  op2val:0x000002dfffffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff01000000, 0x000002dfffffff, x1, 368, x2)

inst_78:
// rs2_w1_val == 1, rs2_w0_val == 4294950911, rs1_w0_val == 524288
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900080000;  op2val:0x000001ffffbfff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00000900080000, 0x000001ffffbfff, x1, 376, x2)

inst_79:
// rs2_w1_val == 4294967295, rs1_w0_val == 4227858431
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000fbffffff;  op2val:0xffffffff10000000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x008000fbffffff, 0xffffffff10000000, x1, 384, x2)

inst_80:
// rs2_w1_val == 0, rs2_w0_val == 2147483648, rs1_w1_val == 4294967295
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffbf;  op2val:0x00000080000000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffbf, 0x00000080000000, x1, 392, x2)

inst_81:
// rs2_w0_val == 1431655765, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000d0000000a;  op2val:0x00040055555555
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00000d0000000a, 0x00040055555555, x1, 400, x2)

inst_82:
// rs2_w0_val == 4160749567, rs1_w0_val == 4294967039
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffffffffeff;  op2val:0xffffffeff7ffffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffbfffffffffeff, 0xffffffeff7ffffff, x1, 408, x2)

inst_83:
// rs2_w0_val == 4227858431, rs1_w1_val == 4294967287
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffffdfff;  op2val:0x200000fbffffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffffdfff, 0x200000fbffffff, x1, 416, x2)

inst_84:
// rs2_w0_val == 4292870143, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800dfffffff;  op2val:0xfffffffdffdfffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x000800dfffffff, 0xfffffffdffdfffff, x1, 424, x2)

inst_85:
// rs2_w0_val == 64, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000a00000002;  op2val:0xffdfffff00000040
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00000a00000002, 0xffdfffff00000040, x1, 432, x2)

inst_86:
// rs2_w0_val == 32, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff70000000a;  op2val:0x00000500000020
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffffff70000000a, 0x00000500000020, x1, 440, x2)

inst_87:
// rs2_w0_val == 16, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000001000000;  op2val:0x00000a00000010
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x04000001000000, 0x00000a00000010, x1, 448, x2)

inst_88:
// rs2_w0_val == 8, rs1_w1_val == 0
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000dfffffff;  op2val:0x00000a00000008
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x000000dfffffff, 0x00000a00000008, x1, 456, x2)

inst_89:
// rs2_w0_val == 4, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000009;  op2val:0xaaaaaaaa00000004
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00000400000009, 0xaaaaaaaa00000004, x1, 464, x2)

inst_90:
// rs2_w0_val == 2, rs1_w1_val == 2
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200400000;  op2val:0x00000600000002
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00000200400000, 0x00000600000002, x1, 472, x2)

inst_91:
// rs2_w0_val == 0, rs1_w0_val == 4294967294, rs1_w1_val == 16777216
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffffe;  op2val:0xffbfffff00000000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x1000000fffffffe, 0xffbfffff00000000, x1, 480, x2)

inst_92:
// rs1_w1_val == 4261412863, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00200000;  op2val:0x00080000000011
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00200000, 0x00080000000011, x1, 488, x2)

inst_93:
// rs1_w1_val == 4278190079, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000040;  op2val:0x04000000000006
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000040, 0x04000000000006, x1, 496, x2)

inst_94:
// rs1_w1_val == 4294934527, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000100;  op2val:0x000100feffffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000100, 0x000100feffffff, x1, 504, x2)

inst_95:
// rs1_w1_val == 4294959103, rs2_w0_val == 4294966271, rs1_w0_val == 4294950911
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffbfff;  op2val:0x00000afffffbff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xffffdfffffffbfff, 0x00000afffffbff, x1, 512, x2)

inst_96:
// rs1_w1_val == 4294965247, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffaaaaaaaa;  op2val:0x00000b00000200
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffff7ffaaaaaaaa, 0x00000b00000200, x1, 520, x2)

inst_97:
// rs1_w1_val == 4294966783, rs1_w0_val == 4294966783
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffffffdff;  op2val:0x000100ffffffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffffdfffffffdff, 0x000100ffffffff, x1, 528, x2)

inst_98:
// rs1_w1_val == 4294967294, rs2_w0_val == 4293918719
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe20000000;  op2val:0x20000000ffefffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffffffe20000000, 0x20000000ffefffff, x1, 536, x2)

inst_99:
// rs1_w1_val == 134217728, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ffffbfff;  op2val:0xffbfffffaaaaaaaa
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x8000000ffffbfff, 0xffbfffffaaaaaaaa, x1, 544, x2)

inst_100:
// rs1_w1_val == 67108864, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffff7;  op2val:0xfbfffffffffffdff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x4000000fffffff7, 0xfbfffffffffffdff, x1, 552, x2)

inst_101:
// rs1_w1_val == 33554432, rs1_w0_val == 2147483647
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000007fffffff;  op2val:0xffffbfffffbfffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x20000007fffffff, 0xffffbfffffbfffff, x1, 560, x2)

inst_102:
// rs1_w1_val == 8388608, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000bfffffff;  op2val:0xfffeffff80000000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x800000bfffffff, 0xfffeffff80000000, x1, 568, x2)

inst_103:
// rs1_w1_val == 1048576, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000fdffffff;  op2val:0xfffefffffffffbff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x100000fdffffff, 0xfffefffffffffbff, x1, 576, x2)

inst_104:
// rs1_w1_val == 131072, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000002;  op2val:0xff7fffff40000000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x02000000000002, 0xff7fffff40000000, x1, 584, x2)

inst_105:
// rs1_w1_val == 16384, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000400000;  op2val:0x00000700000005
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00400000400000, 0x00000700000005, x1, 592, x2)

inst_106:
// rs1_w1_val == 8192, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000200000;  op2val:0x00001000000003
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00200000200000, 0x00001000000003, x1, 600, x2)

inst_107:
// rs1_w1_val == 1024, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000012;  op2val:0xfffffffd00800000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00040000000012, 0xfffffffd00800000, x1, 608, x2)

inst_108:
// rs1_w1_val == 512, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200fffffff7;  op2val:0x000006fffffffb
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x000200fffffff7, 0x000006fffffffb, x1, 616, x2)

inst_109:
// rs1_w1_val == 64, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040fffbffff;  op2val:0x00000600800000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x000040fffbffff, 0x00000600800000, x1, 624, x2)

inst_110:
// rs1_w1_val == 32, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002002000000;  op2val:0xfffffeff00000003
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00002002000000, 0xfffffeff00000003, x1, 632, x2)

inst_111:
// rs1_w1_val == 1, rs1_w0_val == 4294443007
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fff7ffff;  op2val:0x00010000080000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x000001fff7ffff, 0x00010000080000, x1, 640, x2)

inst_112:
// rs2_w0_val == 4294443007, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000400000;  op2val:0x7ffffffffff7ffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x80000000400000, 0x7ffffffffff7ffff, x1, 648, x2)

inst_113:
// rs1_w0_val == 4286578687, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fff7fffff;  op2val:0x8000000feffffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xffffff7fff7fffff, 0x8000000feffffff, x1, 656, x2)

inst_114:
// rs1_w0_val == 4290772991, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffbfffff;  op2val:0x00000c00000040
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x001000ffbfffff, 0x00000c00000040, x1, 664, x2)

inst_115:
// rs2_w0_val == 4294959103, rs1_w0_val == 268435456
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff10000000;  op2val:0x00000dffffdfff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffdffff10000000, 0x00000dffffdfff, x1, 672, x2)

inst_116:
// rs2_w0_val == 262144, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001100000011;  op2val:0xfeffffff00040000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00001100000011, 0xfeffffff00040000, x1, 680, x2)

inst_117:
// rs1_w0_val == 4292870143, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000cffdfffff;  op2val:0xfbffffff00000020
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00000cffdfffff, 0xfbffffff00000020, x1, 688, x2)

inst_118:
// rs2_w0_val == 4294963199, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000011fffffbff;  op2val:0x040000ffffefff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x000011fffffbff, 0x040000ffffefff, x1, 696, x2)

inst_119:
// rs1_w0_val == 4293918719, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffefffff;  op2val:0xfffffbffffffbfff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xffffffdfffefffff, 0xfffffbffffffbfff, x1, 704, x2)

inst_120:
// rs2_w0_val == 4294967039, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffff7fff;  op2val:0xfdfffffffffffeff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xffdfffffffff7fff, 0xfdfffffffffffeff, x1, 712, x2)

inst_121:
// rs2_w0_val == 4294967231, rs1_w0_val == 134217728
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe08000000;  op2val:0xffffffefffffffbf
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffffffe08000000, 0xffffffefffffffbf, x1, 720, x2)

inst_122:
// rs1_w0_val == 4294963199, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffefff;  op2val:0xfffffffd0000000f
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffefff, 0xfffffffd0000000f, x1, 728, x2)

inst_123:
// rs1_w0_val == 4294965247, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffff7ff;  op2val:0x55555555ffffbfff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x000002fffff7ff, 0x55555555ffffbfff, x1, 736, x2)

inst_124:
// rs2_w0_val == 536870912, rs1_w0_val == 4294967291
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffffffb;  op2val:0xfffff7ff20000000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x2000000fffffffb, 0xfffff7ff20000000, x1, 744, x2)

inst_125:
// rs1_w0_val == 4294967279, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffffffef;  op2val:0x00800000000009
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xffdfffffffffffef, 0x00800000000009, x1, 752, x2)

inst_126:
// rs2_w0_val == 134217728, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff0000000c;  op2val:0xffff7fff08000000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffffbff0000000c, 0xffff7fff08000000, x1, 760, x2)

inst_127:
// rs2_w0_val == 67108864, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000affffffff;  op2val:0x40000004000000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00000affffffff, 0x40000004000000, x1, 768, x2)

inst_128:
// rs1_w0_val == 4294967293, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffffffffffd;  op2val:0xff7fffff01000000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffbfffffffffffd, 0xff7fffff01000000, x1, 776, x2)

inst_129:
// rs1_w0_val == 1073741824, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe40000000;  op2val:0x02000000000400
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffffffe40000000, 0x02000000000400, x1, 784, x2)

inst_130:
// rs2_w0_val == 2097152, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00400000;  op2val:0xf7ffffff00200000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00400000, 0xf7ffffff00200000, x1, 792, x2)

inst_131:
// rs1_w0_val == 67108864, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff04000000;  op2val:0x02000000000010
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xbfffffff04000000, 0x02000000000010, x1, 800, x2)

inst_132:
// rs1_w0_val == 8388608, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400800000;  op2val:0xfffff7ffefffffff
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00000400800000, 0xfffff7ffefffffff, x1, 808, x2)

inst_133:
// rs2_w0_val == 16384, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000100000;  op2val:0x00008000004000
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00001000100000, 0x00008000004000, x1, 816, x2)

inst_134:
// rs2_w0_val == 2048, 
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000effffffff;  op2val:0xfffffeff00000800
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x00000effffffff, 0xfffffeff00000800, x1, 824, x2)

inst_135:
// rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 4294967167, rs1_w0_val == 4294967167
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003ffffff7f;  op2val:0x000009ffffff7f
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0x000003ffffff7f, 0x000009ffffff7f, x1, 832, x2)

inst_136:
// rs2_w1_val == 4294901759, rs1_w1_val == 4294967293, rs1_w0_val == 8
// opcode: pkbt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000008;  op2val:0xfffeffff00000013
TEST_RR_OP(pkbt32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000008, 0xfffeffff00000013, x1, 840, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x13_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 106*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
