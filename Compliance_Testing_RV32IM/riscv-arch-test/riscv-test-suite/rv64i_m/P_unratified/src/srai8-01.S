
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srai8 instruction of the RISC-V RV64PZicsr extension for the srai8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srai8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rd, rs1==x0, rd==x0, rs1_b0_val == -128, rs1_b3_val == 64, imm_val == 3, rs1_b7_val == -86, rs1_b4_val == 4, rs1_b2_val == 16
// opcode: srai8 ; op1:x0; dest:x0; op1val:0xaafafa044010f680;  immval:0x3
TEST_IMM_OP( srai8, x0, x0, 0x0000000000000000, 0xaafafa044010f680, 0x3, x3, 0, x15)

inst_1:
// rs1 != rd, rs1==x22, rd==x7, imm_val == 7, rs1_b3_val == -2, rs1_b1_val == -17, rs1_b6_val == 64, rs1_b4_val == -128, rs1_b5_val == -17
// opcode: srai8 ; op1:x22; dest:x7; op1val:0x540ef80fe05effc;  immval:0x7
TEST_IMM_OP( srai8, x7, x22, 0x0000000000000000, 0x540ef80fe05effc, 0x7, x3, 8, x15)

inst_2:
// rs1==x19, rd==x28, imm_val == 6, rs1_b1_val == -5, rs1_b7_val == 85, rs1_b2_val == 8
// opcode: srai8 ; op1:x19; dest:x28; op1val:0x5505fc03f608fbf8;  immval:0x6
TEST_IMM_OP( srai8, x28, x19, 0x0000000000000000, 0x5505fc03f608fbf8, 0x6, x3, 16, x15)

inst_3:
// rs1==x18, rd==x12, imm_val == 5, rs1_b0_val == 16, rs1_b5_val == 85, rs1_b1_val == 127
// opcode: srai8 ; op1:x18; dest:x12; op1val:0x705553ffe037f10;  immval:0x5
TEST_IMM_OP( srai8, x12, x18, 0x0000000000000000, 0x705553ffe037f10, 0x5, x3, 24, x15)

inst_4:
// rs1==x4, rd==x14, imm_val == 4, rs1_b1_val == 1, rs1_b5_val == -33, rs1_b2_val == 4, rs1_b7_val == 32
// opcode: srai8 ; op1:x4; dest:x14; op1val:0x20f9df04c0040106;  immval:0x4
TEST_IMM_OP( srai8, x14, x4, 0x0000000000000000, 0x20f9df04c0040106, 0x4, x3, 32, x15)

inst_5:
// rs1==x25, rd==x8, imm_val == 2, rs1_b5_val == 4, rs1_b3_val == -1, rs1_b4_val == 2, rs1_b2_val == 64, rs1_b0_val == -5
// opcode: srai8 ; op1:x25; dest:x8; op1val:0x5050402ff40f8fb;  immval:0x2
TEST_IMM_OP( srai8, x8, x25, 0x0000000000000000, 0x5050402ff40f8fb, 0x2, x3, 40, x15)

inst_6:
// rs1==x6, rd==x31, imm_val == 1, rs1_b4_val == 127, rs1_b6_val == 8, rs1_b2_val == -17, rs1_b5_val == 127, rs1_b7_val == 16
// opcode: srai8 ; op1:x6; dest:x31; op1val:0x10087f7ffeef0710;  immval:0x1
TEST_IMM_OP( srai8, x31, x6, 0x0000000000000000, 0x10087f7ffeef0710, 0x1, x3, 48, x15)

inst_7:
// rs1==x21, rd==x19, imm_val == 0, rs1_b3_val == -86, rs1_b4_val == 1, rs1_b2_val == 32
// opcode: srai8 ; op1:x21; dest:x19; op1val:0x9fc0601aa20fc06;  immval:0x0
TEST_IMM_OP( srai8, x19, x21, 0x0000000000000000, 0x9fc0601aa20fc06, 0x0, x3, 56, x15)

inst_8:
// rs1==x28, rd==x26, rs1_b7_val == 127, rs1_b0_val == 2, rs1_b3_val == 32, rs1_b6_val == 2, rs1_b1_val == 4, rs1_b4_val == 0
// opcode: srai8 ; op1:x28; dest:x26; op1val:0x7f02fc0020f60402;  immval:0x2
TEST_IMM_OP( srai8, x26, x28, 0x0000000000000000, 0x7f02fc0020f60402, 0x2, x3, 64, x15)

inst_9:
// rs1==x10, rd==x22, rs1_b7_val == -65, rs1_b3_val == 127, rs1_b5_val == -1, rs1_b0_val == 0, rs1_b6_val == -2
// opcode: srai8 ; op1:x10; dest:x22; op1val:0xbffeff027ff80500;  immval:0x2
TEST_IMM_OP( srai8, x22, x10, 0x0000000000000000, 0xbffeff027ff80500, 0x2, x3, 72, x15)

inst_10:
// rs1==x8, rd==x6, rs1_b7_val == -33, rs1_b1_val == 2, rs1_b6_val == -17, rs1_b2_val == -86, rs1_b5_val == -9
// opcode: srai8 ; op1:x8; dest:x6; op1val:0xdfeff703c0aa023f;  immval:0x3
TEST_IMM_OP( srai8, x6, x8, 0x0000000000000000, 0xdfeff703c0aa023f, 0x3, x3, 80, x15)

inst_11:
// rs1==x11, rd==x29, rs1_b7_val == -17, rs1_b1_val == -128, rs1_b6_val == -128
// opcode: srai8 ; op1:x11; dest:x29; op1val:0xef80078007fc8009;  immval:0x1
TEST_IMM_OP( srai8, x29, x11, 0x0000000000000000, 0xef80078007fc8009, 0x1, x3, 88, x15)

inst_12:
// rs1==x23, rd==x27, rs1_b7_val == -9, rs1_b5_val == -5
// opcode: srai8 ; op1:x23; dest:x27; op1val:0xf7c0fb060508c0fb;  immval:0x7
TEST_IMM_OP( srai8, x27, x23, 0x0000000000000000, 0xf7c0fb060508c0fb, 0x7, x3, 96, x15)

inst_13:
// rs1==x24, rd==x30, rs1_b7_val == -5, rs1_b0_val == 32, rs1_b3_val == -33, rs1_b2_val == 0
// opcode: srai8 ; op1:x24; dest:x30; op1val:0xfbfcfa3fdf000420;  immval:0x7
TEST_IMM_OP( srai8, x30, x24, 0x0000000000000000, 0xfbfcfa3fdf000420, 0x7, x3, 104, x15)

inst_14:
// rs1==x1, rd==x25, rs1_b7_val == -3, rs1_b3_val == -17
// opcode: srai8 ; op1:x1; dest:x25; op1val:0xfd09fa07ef050520;  immval:0x2
TEST_IMM_OP( srai8, x25, x1, 0x0000000000000000, 0xfd09fa07ef050520, 0x2, x3, 112, x15)

inst_15:
// rs1==x17, rd==x10, rs1_b7_val == -2, rs1_b2_val == -65, rs1_b4_val == -33, rs1_b0_val == 64
// opcode: srai8 ; op1:x17; dest:x10; op1val:0xfefcfbdf07bf0440;  immval:0x6
TEST_IMM_OP( srai8, x10, x17, 0x0000000000000000, 0xfefcfbdf07bf0440, 0x6, x3, 120, x15)

inst_16:
// rs1==x9, rd==x17, rs1_b7_val == -128, rs1_b0_val == 4
// opcode: srai8 ; op1:x9; dest:x17; op1val:0x800507f6f9000504;  immval:0x2
TEST_IMM_OP( srai8, x17, x9, 0x0000000000000000, 0x800507f6f9000504, 0x2, x3, 128, x15)

inst_17:
// rs1==x20, rd==x5, rs1_b7_val == 64, rs1_b1_val == -1, rs1_b2_val == -5
// opcode: srai8 ; op1:x20; dest:x5; op1val:0x4008fbdff8fbfff9;  immval:0x0
TEST_IMM_OP( srai8, x5, x20, 0x0000000000000000, 0x4008fbdff8fbfff9, 0x0, x3, 136, x15)

inst_18:
// rs1==x13, rd==x2, rs1_b7_val == 8, rs1_b6_val == -9
// opcode: srai8 ; op1:x13; dest:x2; op1val:0x8f70601ff0501f8;  immval:0x0
TEST_IMM_OP( srai8, x2, x13, 0x0000000000000000, 0x8f70601ff0501f8, 0x0, x3, 144, x15)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_19:
// rs1==x15, rd==x18, rs1_b7_val == 4, rs1_b6_val == 0
// opcode: srai8 ; op1:x15; dest:x18; op1val:0x400fc3ff6bfef40;  immval:0x2
TEST_IMM_OP( srai8, x18, x15, 0x0000000000000000, 0x400fc3ff6bfef40, 0x2, x6, 0, x8)

inst_20:
// rs1==x16, rd==x23, rs1_b7_val == 2, rs1_b0_val == -33, rs1_b3_val == 0, rs1_b2_val == 2
// opcode: srai8 ; op1:x16; dest:x23; op1val:0x2fafa7f0002f6df;  immval:0x3
TEST_IMM_OP( srai8, x23, x16, 0x0000000000000000, 0x2fafa7f0002f6df, 0x3, x6, 8, x8)

inst_21:
// rs1==x3, rd==x16, rs1_b7_val == 1, rs1_b5_val == -128, rs1_b6_val == 127
// opcode: srai8 ; op1:x3; dest:x16; op1val:0x17f80f9ff0005f8;  immval:0x0
TEST_IMM_OP( srai8, x16, x3, 0x0000000000000000, 0x17f80f9ff0005f8, 0x0, x6, 16, x8)

inst_22:
// rs1==x7, rd==x24, rs1_b7_val == 0, rs1_b4_val == -1, rs1_b5_val == -3, rs1_b0_val == -2
// opcode: srai8 ; op1:x7; dest:x24; op1val:0x03fdff0304f6fe;  immval:0x3
TEST_IMM_OP( srai8, x24, x7, 0x0000000000000000, 0x03fdff0304f6fe, 0x3, x6, 24, x8)

inst_23:
// rs1==x14, rd==x4, rs1_b7_val == -1, 
// opcode: srai8 ; op1:x14; dest:x4; op1val:0xff0709f8ffbf0905;  immval:0x7
TEST_IMM_OP( srai8, x4, x14, 0x0000000000000000, 0xff0709f8ffbf0905, 0x7, x6, 32, x8)

inst_24:
// rs1==x2, rd==x15, rs1_b6_val == -86, rs1_b5_val == 32
// opcode: srai8 ; op1:x2; dest:x15; op1val:0xfbaa203fc0c00202;  immval:0x1
TEST_IMM_OP( srai8, x15, x2, 0x0000000000000000, 0xfbaa203fc0c00202, 0x1, x6, 40, x8)

inst_25:
// rs1==x5, rd==x13, rs1_b6_val == 85, rs1_b2_val == -33, rs1_b3_val == 1, rs1_b1_val == -33, rs1_b0_val == -1
// opcode: srai8 ; op1:x5; dest:x13; op1val:0xf955f90901dfdfff;  immval:0x6
TEST_IMM_OP( srai8, x13, x5, 0x0000000000000000, 0xf955f90901dfdfff, 0x6, x6, 48, x8)

inst_26:
// rs1==x29, rd==x21, rs1_b6_val == -65, rs1_b0_val == 85, rs1_b4_val == -2
// opcode: srai8 ; op1:x29; dest:x21; op1val:0x8bffdfefa3f0655;  immval:0x7
TEST_IMM_OP( srai8, x21, x29, 0x0000000000000000, 0x8bffdfefa3f0655, 0x7, x6, 56, x8)

inst_27:
// rs1==x27, rd==x3, rs1_b6_val == -33, rs1_b3_val == 4, rs1_b2_val == -1, rs1_b1_val == 32, rs1_b5_val == 8
// opcode: srai8 ; op1:x27; dest:x3; op1val:0x20df08fc04ff20f8;  immval:0x5
TEST_IMM_OP( srai8, x3, x27, 0x0000000000000000, 0x20df08fc04ff20f8, 0x5, x6, 64, x8)

inst_28:
// rs1==x31, rd==x20, rs1_b6_val == -5, 
// opcode: srai8 ; op1:x31; dest:x20; op1val:0x5fb0701fef803f8;  immval:0x3
TEST_IMM_OP( srai8, x20, x31, 0x0000000000000000, 0x5fb0701fef803f8, 0x3, x6, 72, x8)

inst_29:
// rs1==x26, rd==x1, rs1_b1_val == -86, rs1_b4_val == 64, rs1_b2_val == 85
// opcode: srai8 ; op1:x26; dest:x1; op1val:0xfe04403f55aafb;  immval:0x5
TEST_IMM_OP( srai8, x1, x26, 0x0000000000000000, 0xfe04403f55aafb, 0x5, x6, 80, x8)

inst_30:
// rs1==x12, rd==x11, rs1_b1_val == 85, rs1_b6_val == 32, rs1_b5_val == -65, rs1_b2_val == -128
// opcode: srai8 ; op1:x12; dest:x11; op1val:0xfc20bffa7f805505;  immval:0x7
TEST_IMM_OP( srai8, x11, x12, 0x0000000000000000, 0xfc20bffa7f805505, 0x7, x6, 88, x8)

inst_31:
// rs1==x30, rd==x9, rs1_b1_val == -65, rs1_b4_val == -65, rs1_b6_val == 16, rs1_b5_val == -2, rs1_b3_val == 16
// opcode: srai8 ; op1:x30; dest:x9; op1val:0x1010febf1007bff8;  immval:0x4
TEST_IMM_OP( srai8, x9, x30, 0x0000000000000000, 0x1010febf1007bff8, 0x4, x6, 96, x8)

inst_32:
// rs1_b1_val == -9, rs1_b4_val == -9, rs1_b0_val == -9
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x3ffa09f701bff7f7;  immval:0x5
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x3ffa09f701bff7f7, 0x5, x6, 104, x8)

inst_33:
// rs1_b1_val == -3, rs1_b5_val == 0, rs1_b2_val == -2
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xf6fc00807ffefd09;  immval:0x2
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0xf6fc00807ffefd09, 0x2, x6, 112, x8)

inst_34:
// rs1_b1_val == -2, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x55fcfdf8effafe03;  immval:0x3
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x55fcfdf8effafe03, 0x3, x6, 120, x8)

inst_35:
// rs1_b1_val == 64, rs1_b3_val == 85, rs1_b4_val == 8
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x55f60408553f4007;  immval:0x0
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x55f60408553f4007, 0x0, x6, 128, x8)

inst_36:
// rs1_b1_val == 16, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x35506007f071020;  immval:0x3
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x35506007f071020, 0x3, x6, 136, x8)

inst_37:
// rs1_b1_val == 8, rs1_b4_val == 85
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x10ef055505090802;  immval:0x6
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x10ef055505090802, 0x6, x6, 144, x8)

inst_38:
// rs1_b1_val == 0, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xaa55c03f04ef00fb;  immval:0x3
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0xaa55c03f04ef00fb, 0x3, x6, 152, x8)

inst_39:
// rs1_b0_val == -86, rs1_b2_val == 1
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xfadffd00df013faa;  immval:0x3
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0xfadffd00df013faa, 0x3, x6, 160, x8)

inst_40:
// rs1_b0_val == 127, rs1_b2_val == 127
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xdf000500047ffc7f;  immval:0x2
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0xdf000500047ffc7f, 0x2, x6, 168, x8)

inst_41:
// rs1_b5_val == 2, rs1_b3_val == -65
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x3020201bf00aaf7;  immval:0x7
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x3020201bf00aaf7, 0x7, x6, 176, x8)

inst_42:
// rs1_b5_val == 1, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x23f01fac0f601fa;  immval:0x0
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x23f01fac0f601fa, 0x0, x6, 184, x8)

inst_43:
// rs1_b4_val == -86, rs1_b0_val == 1
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x5510fdaa03f8bf01;  immval:0x6
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x5510fdaa03f8bf01, 0x6, x6, 192, x8)

inst_44:
// rs1_b4_val == -17, rs1_b2_val == -9
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x103f02ef04f75502;  immval:0x3
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x103f02ef04f75502, 0x3, x6, 200, x8)

inst_45:
// rs1_b4_val == -5, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x7fef7fb2009fe40;  immval:0x4
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x7fef7fb2009fe40, 0x4, x6, 208, x8)

inst_46:
// rs1_b4_val == -3, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x1fafefd043fc040;  immval:0x2
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x1fafefd043fc040, 0x2, x6, 216, x8)

inst_47:
// rs1_b4_val == 32, rs1_b3_val == -3
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x105ff20fd030355;  immval:0x7
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x105ff20fd030355, 0x7, x6, 224, x8)

inst_48:
// rs1_b4_val == 16, rs1_b6_val == 1
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x201c0103f08f8f6;  immval:0x4
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x201c0103f08f8f6, 0x4, x6, 232, x8)

inst_49:
// rs1_b0_val == -65, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xdfc0f680fcc03fbf;  immval:0x7
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0xdfc0f680fcc03fbf, 0x7, x6, 240, x8)

inst_50:
// rs1_b3_val == -5, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xf92009aafb03fdfb;  immval:0x0
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0xf92009aafb03fdfb, 0x0, x6, 248, x8)

inst_51:
// rs1_b0_val == 8, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xfe060106c0f70408;  immval:0x6
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0xfe060106c0f70408, 0x6, x6, 256, x8)

inst_52:
// rs1_b3_val == -128, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x408febf8040f940;  immval:0x6
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x408febf8040f940, 0x6, x6, 264, x8)

inst_53:
// rs1_b6_val == -3, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xfcfd06000103fbf7;  immval:0x7
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0xfcfd06000103fbf7, 0x7, x6, 272, x8)

inst_54:
// rs1_b3_val == 8, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xfff655030810f8fc;  immval:0x2
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0xfff655030810f8fc, 0x2, x6, 280, x8)

inst_55:
// rs1_b3_val == 2, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xfdef20550210f7ff;  immval:0x1
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0xfdef20550210f7ff, 0x1, x6, 288, x8)

inst_56:
// rs1_b6_val == 4, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xef040600208080df;  immval:0x3
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0xef040600208080df, 0x3, x6, 296, x8)

inst_57:
// rs1_b6_val == -1, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xaafff607df404020;  immval:0x6
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0xaafff607df404020, 0x6, x6, 304, x8)

inst_58:
// rs1_b5_val == -86, rs1_b0_val == -17
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x6fdaafdf60110ef;  immval:0x3
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x6fdaafdf60110ef, 0x3, x6, 312, x8)

inst_59:
// rs1_b2_val == -3, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x3fc0740f9fd0105;  immval:0x5
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x3fc0740f9fd0105, 0x5, x6, 320, x8)

inst_60:
// rs1_b5_val == 64, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x5501400310ef05bf;  immval:0x0
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x5501400310ef05bf, 0x0, x6, 328, x8)

inst_61:
// rs1_b0_val == -3, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xfefa07f65555aafd;  immval:0x0
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0xfefa07f65555aafd, 0x0, x6, 336, x8)

inst_62:
// rs1_b5_val == 16, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x9fb1004080800ef;  immval:0x4
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x9fb1004080800ef, 0x4, x6, 344, x8)

inst_63:
// rs1_b3_val == -9, 
// opcode: srai8 ; op1:x30; dest:x31; op1val:0x7fd07eff740bf06;  immval:0x0
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0x7fd07eff740bf06, 0x0, x6, 352, x8)

inst_64:
// rs1_b0_val == -128, rs1_b3_val == 64, imm_val == 3, rs1_b7_val == -86, rs1_b4_val == 4, rs1_b2_val == 16
// opcode: srai8 ; op1:x30; dest:x31; op1val:0xaafafa044010f680;  immval:0x3
TEST_IMM_OP( srai8, x31, x30, 0x0000000000000000, 0xaafafa044010f680, 0x3, x6, 360, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 46*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
