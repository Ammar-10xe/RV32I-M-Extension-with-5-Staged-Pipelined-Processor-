
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the clz16 instruction of the RISC-V RV64PZicsr extension for the clz16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",clz16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1==x0, rd==x25, rs1_h0_val == 0, rs1_h2_val == 4096, rs1_h1_val == 32767, rs1_h3_val == 57343
// opcode: clz16 ; op1:x0; dest:x25; op1val:0xdfff10007fff0000;
TEST_RD_OP( clz16, x25, x0, 0x0000000000000000, 0xdfff10007fff0000, x5, 0, x4)

inst_1:
// rs1==x28, rd==x0, rs1_h3_val == 43690, rs1_h2_val == 1024, rs1_h1_val == 32, rs1_h0_val == 65534
// opcode: clz16 ; op1:x28; dest:x0; op1val:0xaaaa04000020fffe;
TEST_RD_OP( clz16, x0, x28, 0x0000000000000000, 0xaaaa04000020fffe, x5, 8, x4)

inst_2:
// rs1==x8, rd==x31, rs1_h3_val == 21845, rs1_h0_val == 65023, rs1_h1_val == 65407, rs1_h2_val == 65023
// opcode: clz16 ; op1:x8; dest:x31; op1val:0x5555fdffff7ffdff;
TEST_RD_OP( clz16, x31, x8, 0x0000000000000000, 0x5555fdffff7ffdff, x5, 16, x4)

inst_3:
// rs1==x21, rd==x19, rs1_h3_val == 32767, rs1_h0_val == 8192, rs1_h2_val == 4, rs1_h1_val == 65519
// opcode: clz16 ; op1:x21; dest:x19; op1val:0x7fff0004ffef2000;
TEST_RD_OP( clz16, x19, x21, 0x0000000000000000, 0x7fff0004ffef2000, x5, 24, x4)

inst_4:
// rs1==x12, rd==x21, rs1_h3_val == 49151, rs1_h2_val == 1
// opcode: clz16 ; op1:x12; dest:x21; op1val:0xbfff00010006fdff;
TEST_RD_OP( clz16, x21, x12, 0x0000000000000000, 0xbfff00010006fdff, x5, 32, x4)

inst_5:
// rs1==x25, rd==x3, rs1_h3_val == 61439, 
// opcode: clz16 ; op1:x25; dest:x3; op1val:0xefff0001000c000b;
TEST_RD_OP( clz16, x3, x25, 0x0000000000000000, 0xefff0001000c000b, x5, 40, x4)

inst_6:
// rs1==x18, rd==x29, rs1_h3_val == 63487, rs1_h1_val == 43690, rs1_h2_val == 65534
// opcode: clz16 ; op1:x18; dest:x29; op1val:0xf7fffffeaaaa000b;
TEST_RD_OP( clz16, x29, x18, 0x0000000000000000, 0xf7fffffeaaaa000b, x5, 48, x4)

inst_7:
// rs1==x1, rd==x9, rs1_h3_val == 64511, rs1_h2_val == 16384, rs1_h0_val == 65527, rs1_h1_val == 65503
// opcode: clz16 ; op1:x1; dest:x9; op1val:0xfbff4000ffdffff7;
TEST_RD_OP( clz16, x9, x1, 0x0000000000000000, 0xfbff4000ffdffff7, x5, 56, x4)

inst_8:
// rs1==x10, rd==x7, rs1_h3_val == 65023, rs1_h1_val == 4, rs1_h0_val == 57343
// opcode: clz16 ; op1:x10; dest:x7; op1val:0xfdff00130004dfff;
TEST_RD_OP( clz16, x7, x10, 0x0000000000000000, 0xfdff00130004dfff, x5, 64, x4)

inst_9:
// rs1==x7, rd==x2, rs1_h3_val == 65279, rs1_h0_val == 128, rs1_h1_val == 63487
// opcode: clz16 ; op1:x7; dest:x2; op1val:0xfeff0013f7ff0080;
TEST_RD_OP( clz16, x2, x7, 0x0000000000000000, 0xfeff0013f7ff0080, x5, 72, x4)

inst_10:
// rs1==x15, rd==x24, rs1_h3_val == 65407, rs1_h2_val == 8192, rs1_h0_val == 43690
// opcode: clz16 ; op1:x15; dest:x24; op1val:0xff7f20007fffaaaa;
TEST_RD_OP( clz16, x24, x15, 0x0000000000000000, 0xff7f20007fffaaaa, x5, 80, x4)

inst_11:
// rs1==x27, rd==x20, rs1_h3_val == 65471, rs1_h2_val == 32768
// opcode: clz16 ; op1:x27; dest:x20; op1val:0xffbf8000aaaa2000;
TEST_RD_OP( clz16, x20, x27, 0x0000000000000000, 0xffbf8000aaaa2000, x5, 88, x4)

inst_12:
// rs1==x29, rd==x10, rs1_h3_val == 65503, rs1_h0_val == 63487, rs1_h2_val == 65531
// opcode: clz16 ; op1:x29; dest:x10; op1val:0xffdffffb0007f7ff;
TEST_RD_OP( clz16, x10, x29, 0x0000000000000000, 0xffdffffb0007f7ff, x5, 96, x4)

inst_13:
// rs1==x11, rd==x30, rs1_h3_val == 65519, rs1_h2_val == 65519, rs1_h1_val == 8192
// opcode: clz16 ; op1:x11; dest:x30; op1val:0xffefffef20000007;
TEST_RD_OP( clz16, x30, x11, 0x0000000000000000, 0xffefffef20000007, x5, 104, x4)

inst_14:
// rs1==x3, rd==x8, rs1_h3_val == 65527, rs1_h1_val == 1024, rs1_h0_val == 32768
// opcode: clz16 ; op1:x3; dest:x8; op1val:0xfff7001304008000;
TEST_RD_OP( clz16, x8, x3, 0x0000000000000000, 0xfff7001304008000, x5, 112, x4)

inst_15:
// rs1==x9, rd==x13, rs1_h3_val == 65531, rs1_h0_val == 1
// opcode: clz16 ; op1:x9; dest:x13; op1val:0xfffb400000200001;
TEST_RD_OP( clz16, x13, x9, 0x0000000000000000, 0xfffb400000200001, x5, 120, x4)

inst_16:
// rs1==x2, rd==x17, rs1_h3_val == 65533, 
// opcode: clz16 ; op1:x2; dest:x17; op1val:0xfffd000f000d0080;
TEST_RD_OP( clz16, x17, x2, 0x0000000000000000, 0xfffd000f000d0080, x5, 128, x4)

inst_17:
// rs1==x13, rd==x12, rs1_h3_val == 65534, rs1_h2_val == 65503, rs1_h1_val == 512
// opcode: clz16 ; op1:x13; dest:x12; op1val:0xfffeffdf0200f7ff;
TEST_RD_OP( clz16, x12, x13, 0x0000000000000000, 0xfffeffdf0200f7ff, x5, 136, x4)

inst_18:
// rs1==x31, rd==x11, rs1_h3_val == 32768, rs1_h0_val == 16384
// opcode: clz16 ; op1:x31; dest:x11; op1val:0x8000fffeffdf4000;
TEST_RD_OP( clz16, x11, x31, 0x0000000000000000, 0x8000fffeffdf4000, x5, 144, x4)

inst_19:
// rs1==x22, rd==x6, rs1_h3_val == 16384, rs1_h1_val == 57343, rs1_h2_val == 43690
// opcode: clz16 ; op1:x22; dest:x6; op1val:0x4000aaaadfff0080;
TEST_RD_OP( clz16, x6, x22, 0x0000000000000000, 0x4000aaaadfff0080, x5, 152, x4)

inst_20:
// rs1==x23, rd==x26, rs1_h3_val == 8192, rs1_h0_val == 49151
// opcode: clz16 ; op1:x23; dest:x26; op1val:0x2000aaaa0004bfff;
TEST_RD_OP( clz16, x26, x23, 0x0000000000000000, 0x2000aaaa0004bfff, x5, 160, x4)

inst_21:
// rs1==x26, rd==x4, rs1_h3_val == 4096, 
// opcode: clz16 ; op1:x26; dest:x4; op1val:0x1000000fff7f000f;
TEST_RD_OP( clz16, x4, x26, 0x0000000000000000, 0x1000000fff7f000f, x5, 168, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_22:
// rs1==x19, rd==x16, rs1_h3_val == 2048, rs1_h1_val == 64, rs1_h0_val == 32767
// opcode: clz16 ; op1:x19; dest:x16; op1val:0x800000600407fff;
TEST_RD_OP( clz16, x16, x19, 0x0000000000000000, 0x800000600407fff, x2, 0, x3)

inst_23:
// rs1==x4, rd==x14, rs1_h3_val == 1024, rs1_h0_val == 65531, rs1_h2_val == 256
// opcode: clz16 ; op1:x4; dest:x14; op1val:0x40001002000fffb;
TEST_RD_OP( clz16, x14, x4, 0x0000000000000000, 0x40001002000fffb, x2, 8, x3)

inst_24:
// rs1==x24, rd==x23, rs1_h3_val == 512, 
// opcode: clz16 ; op1:x24; dest:x23; op1val:0x20010007fff000f;
TEST_RD_OP( clz16, x23, x24, 0x0000000000000000, 0x20010007fff000f, x2, 16, x3)

inst_25:
// rs1==x14, rd==x5, rs1_h3_val == 256, 
// opcode: clz16 ; op1:x14; dest:x5; op1val:0x10000077ffffff7;
TEST_RD_OP( clz16, x5, x14, 0x0000000000000000, 0x10000077ffffff7, x2, 24, x3)

inst_26:
// rs1==x20, rd==x27, rs1_h3_val == 128, rs1_h2_val == 57343, rs1_h1_val == 256
// opcode: clz16 ; op1:x20; dest:x27; op1val:0x80dfff01000080;
TEST_RD_OP( clz16, x27, x20, 0x0000000000000000, 0x80dfff01000080, x2, 32, x3)

inst_27:
// rs1==x30, rd==x1, rs1_h3_val == 64, 
// opcode: clz16 ; op1:x30; dest:x1; op1val:0x4000060020000e;
TEST_RD_OP( clz16, x1, x30, 0x0000000000000000, 0x4000060020000e, x2, 40, x3)

inst_28:
// rs1==x16, rd==x28, rs1_h3_val == 32, rs1_h2_val == 16
// opcode: clz16 ; op1:x16; dest:x28; op1val:0x200010aaaa000e;
TEST_RD_OP( clz16, x28, x16, 0x0000000000000000, 0x200010aaaa000e, x2, 48, x3)

inst_29:
// rs1==x5, rd==x15, rs1_h3_val == 16, 
// opcode: clz16 ; op1:x5; dest:x15; op1val:0x10dfff0013fff7;
TEST_RD_OP( clz16, x15, x5, 0x0000000000000000, 0x10dfff0013fff7, x2, 56, x3)

inst_30:
// rs1==x17, rd==x22, rs1_h3_val == 8, rs1_h0_val == 65407
// opcode: clz16 ; op1:x17; dest:x22; op1val:0x08ffef0013ff7f;
TEST_RD_OP( clz16, x22, x17, 0x0000000000000000, 0x08ffef0013ff7f, x2, 64, x3)

inst_31:
// rs1==x6, rd==x18, rs1_h3_val == 4, rs1_h0_val == 65471, rs1_h1_val == 128, rs1_h2_val == 65279
// opcode: clz16 ; op1:x6; dest:x18; op1val:0x04feff0080ffbf;
TEST_RD_OP( clz16, x18, x6, 0x0000000000000000, 0x04feff0080ffbf, x2, 72, x3)

inst_32:
// rs1_h3_val == 2, rs1_h0_val == 256
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x02ffdf00070100;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x02ffdf00070100, x2, 80, x3)

inst_33:
// rs1_h0_val == 4096, rs1_h2_val == 64, rs1_h1_val == 1
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x100004000011000;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x100004000011000, x2, 88, x3)

inst_34:
// rs1_h0_val == 2048, rs1_h2_val == 64511
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x0efbffaaaa0800;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x0efbffaaaa0800, x2, 96, x3)

inst_35:
// rs1_h0_val == 1024, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x0effdf00130400;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x0effdf00130400, x2, 104, x3)

inst_36:
// rs1_h0_val == 512, rs1_h1_val == 61439
// opcode: clz16 ; op1:x30; dest:x31; op1val:0xfffd0005efff0200;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0xfffd0005efff0200, x2, 112, x3)

inst_37:
// rs1_h0_val == 64, rs1_h2_val == 65535
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x13ffff02000040;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x13ffff02000040, x2, 120, x3)

inst_38:
// rs1_h0_val == 32, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x11feff000e0020;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x11feff000e0020, x2, 128, x3)

inst_39:
// rs1_h0_val == 16, rs1_h3_val == 65535
// opcode: clz16 ; op1:x30; dest:x31; op1val:0xfffffffb00090010;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0xfffffffb00090010, x2, 136, x3)

inst_40:
// rs1_h0_val == 8, rs1_h2_val == 32
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x020020000a0008;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x020020000a0008, x2, 144, x3)

inst_41:
// rs1_h0_val == 4, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x800000500090004;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x800000500090004, x2, 152, x3)

inst_42:
// rs1_h0_val == 2, rs1_h2_val == 21845
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x7fff555500070002;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x7fff555500070002, x2, 160, x3)

inst_43:
// rs1_h0_val == 65535, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0xaaaa0400000cffff;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0xaaaa0400000cffff, x2, 168, x3)

inst_44:
// rs1_h3_val == 1, rs1_h0_val == 65533
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x01ffff0004fffd;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x01ffff0004fffd, x2, 176, x3)

inst_45:
// rs1_h3_val == 0, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x00feff00200040;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x00feff00200040, x2, 184, x3)

inst_46:
// rs1_h2_val == 32767, rs1_h1_val == 49151
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x0f7fffbfff0200;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x0f7fffbfff0200, x2, 192, x3)

inst_47:
// rs1_h2_val == 49151, rs1_h1_val == 21845
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x03bfff5555bfff;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x03bfff5555bfff, x2, 200, x3)

inst_48:
// rs1_h2_val == 61439, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0xfbffefffffef0009;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0xfbffefffffef0009, x2, 208, x3)

inst_49:
// rs1_h2_val == 63487, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0xffbff7fff7ff0080;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0xffbff7fff7ff0080, x2, 216, x3)

inst_50:
// rs1_h2_val == 65407, rs1_h1_val == 64511
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x0bff7ffbff1000;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x0bff7ffbff1000, x2, 224, x3)

inst_51:
// rs1_h2_val == 65471, rs1_h1_val == 32768
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x05ffbf8000fffe;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x05ffbf8000fffe, x2, 232, x3)

inst_52:
// rs1_h2_val == 8, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0xfffe00080020fdff;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0xfffe00080020fdff, x2, 240, x3)

inst_53:
// rs1_h2_val == 2, rs1_h1_val == 2048
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x12000208007fff;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x12000208007fff, x2, 248, x3)

inst_54:
// rs1_h2_val == 0, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x12000001000200;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x12000001000200, x2, 256, x3)

inst_55:
// rs1_h1_val == 65023, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x80000007fdffff7f;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x80000007fdffff7f, x2, 264, x3)

inst_56:
// rs1_h1_val == 65279, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x2000007feffdfff;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x2000007feffdfff, x2, 272, x3)

inst_57:
// rs1_h1_val == 65471, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x40000001ffbfff7f;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x40000001ffbfff7f, x2, 280, x3)

inst_58:
// rs1_h1_val == 65527, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x040008fff7fffb;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x040008fff7fffb, x2, 288, x3)

inst_59:
// rs1_h1_val == 65531, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x4000fdfffffbffbf;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x4000fdfffffbffbf, x2, 296, x3)

inst_60:
// rs1_h1_val == 65533, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x050006fffdfffb;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x050006fffdfffb, x2, 304, x3)

inst_61:
// rs1_h1_val == 65534, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x7ffffffffffe0007;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x7ffffffffffe0007, x2, 312, x3)

inst_62:
// rs1_h1_val == 16384, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x80bfff40000020;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x80bfff40000020, x2, 320, x3)

inst_63:
// rs1_h1_val == 4096, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x09ffbf1000f7ff;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x09ffbf1000f7ff, x2, 328, x3)

inst_64:
// rs1_h1_val == 16, rs1_h2_val == 128
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x0c00800010ffff;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x0c00800010ffff, x2, 336, x3)

inst_65:
// rs1_h1_val == 8, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0xdfff001300080007;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0xdfff001300080007, x2, 344, x3)

inst_66:
// rs1_h1_val == 2, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x01fffe0002000f;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x01fffe0002000f, x2, 352, x3)

inst_67:
// rs1_h1_val == 65535, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x12dfffffff0400;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x12dfffffff0400, x2, 360, x3)

inst_68:
// rs1_h1_val == 0, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x8000ffbf00000008;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x8000ffbf00000008, x2, 368, x3)

inst_69:
// rs1_h0_val == 21845, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x00000fbfff5555;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x00000fbfff5555, x2, 376, x3)

inst_70:
// rs1_h0_val == 61439, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x0900000008efff;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x0900000008efff, x2, 384, x3)

inst_71:
// rs1_h2_val == 65527, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x4000fff700050011;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x4000fff700050011, x2, 392, x3)

inst_72:
// rs1_h0_val == 64511, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0xffdf0003ffdffbff;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0xffdf0003ffdffbff, x2, 400, x3)

inst_73:
// rs1_h2_val == 65533, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x1000fffd00090100;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x1000fffd00090100, x2, 408, x3)

inst_74:
// rs1_h0_val == 65279, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x0504000400feff;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x0504000400feff, x2, 416, x3)

inst_75:
// rs1_h0_val == 65503, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x200080000009ffdf;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x200080000009ffdf, x2, 424, x3)

inst_76:
// rs1_h0_val == 65519, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x0600400009ffef;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x0600400009ffef, x2, 432, x3)

inst_77:
// rs1_h2_val == 2048, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x09080000010080;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x09080000010080, x2, 440, x3)

inst_78:
// rs1_h2_val == 512, 
// opcode: clz16 ; op1:x30; dest:x31; op1val:0x7fff0200000c0004;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0x7fff0200000c0004, x2, 448, x3)

inst_79:
// rs1_h0_val == 0, rs1_h2_val == 4096, rs1_h1_val == 32767, rs1_h3_val == 57343
// opcode: clz16 ; op1:x30; dest:x31; op1val:0xdfff10007fff0000;
TEST_RD_OP( clz16, x31, x30, 0x0000000000000000, 0xdfff10007fff0000, x2, 456, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 58*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
