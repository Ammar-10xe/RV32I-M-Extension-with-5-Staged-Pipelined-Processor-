
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umsr64 instruction of the RISC-V RV64PZicsr extension for the umsr64 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umsr64)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x10, rs2==x21, rd==x10, rs1_w0_val == 0, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 4294967287, rs2_w0_val == 4292870143, rs1_w1_val == 4294901759
// opcode: umsr64 ; op1:x10; op2:x21; dest:x10; op1val:0xfffeffff00000000;  op2val:0xfffffff7ffdfffff
TEST_P64_PNN_OP(umsr64, x10, $rd_hi, x10, x21, 0x0000000000000000, $correctval_hi, 0xfffeffff00000000, 0xfffffff7ffdfffff, x7, 0, x19)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x15, rs2==x6, rd==x30, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val == 1431655765, rs2_w0_val == 65536, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0
// opcode: umsr64 ; op1:x15; op2:x6; dest:x30; op1val:0x0000000355555555;  op2val:0x0000000300010000
TEST_P64_PNN_OP(umsr64, x30, $rd_hi, x15, x6, 0x0000000000000000, $correctval_hi, 0x0000000355555555, 0x0000000300010000, x7, 16, x19)

inst_2:
// rs1 == rs2 != rd, rs1==x17, rs2==x17, rd==x28, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 16, rs1_w0_val == 4294443007, rs1_w1_val == 1431655765, rs2_w0_val == 4294443007
// opcode: umsr64 ; op1:x17; op2:x17; dest:x28; op1val:0x55555555fff7ffff;  op2val:0x00000010fff7ffff
TEST_P64_PNN_OP(umsr64, x28, $rd_hi, x17, x17, 0x0000000000000000, $correctval_hi, 0x55555555fff7ffff, 0x00000010fff7ffff, x7, 32, x19)

inst_3:
// rs1 == rs2 == rd, rs1==x8, rs2==x8, rd==x8, rs2_w1_val == 2863311530, rs1_w0_val == 4294967295, rs2_w0_val == 4294959103, rs1_w1_val == 2147483647
// opcode: umsr64 ; op1:x8; op2:x8; dest:x8; op1val:0x7fffffffffffffff;  op2val:0xaaaaaaaaffffdfff
TEST_P64_PNN_OP(umsr64, x8, $rd_hi, x8, x8, 0x0000000000000000, $correctval_hi, 0x7fffffffffffffff, 0xaaaaaaaaffffdfff, x7, 48, x19)

inst_4:
// rs2 == rd != rs1, rs1==x9, rs2==x22, rd==x22, rs2_w1_val == 1431655765, rs1_w1_val == 4294967263, rs1_w0_val == 4294963199, rs2_w0_val == 4294967287
// opcode: umsr64 ; op1:x9; op2:x22; dest:x22; op1val:0xffffffdfffffefff;  op2val:0x55555555fffffff7
TEST_P64_PNN_OP(umsr64, x22, $rd_hi, x9, x22, 0x0000000000000000, $correctval_hi, 0xffffffdfffffefff, 0x55555555fffffff7, x7, 64, x19)

inst_5:
// rs1==x6, rs2==x24, rd==x14, rs2_w1_val == 2147483647, rs1_w1_val == 8192, rs2_w0_val == 8388608, rs1_w0_val == 4194304
// opcode: umsr64 ; op1:x6; op2:x24; dest:x14; op1val:0x0000200000400000;  op2val:0x7fffffff00800000
TEST_P64_PNN_OP(umsr64, x14, $rd_hi, x6, x24, 0x0000000000000000, $correctval_hi, 0x0000200000400000, 0x7fffffff00800000, x7, 80, x19)

inst_6:
// rs1==x18, rs2==x11, rd==x16, rs2_w1_val == 3221225471, rs1_w1_val == 524288, rs2_w0_val == 4290772991, rs1_w0_val == 4294967279
// opcode: umsr64 ; op1:x18; op2:x11; dest:x16; op1val:0x00080000ffffffef;  op2val:0xbfffffffffbfffff
TEST_P64_PNN_OP(umsr64, x16, $rd_hi, x18, x11, 0x0000000000000000, $correctval_hi, 0x00080000ffffffef, 0xbfffffffffbfffff, x7, 96, x19)

inst_7:
// rs1==x27, rs2==x0, rd==x18, rs2_w1_val == 3758096383, rs1_w1_val == 4294705151, rs1_w0_val == 32768, rs2_w0_val == 4294967231
// opcode: umsr64 ; op1:x27; op2:x0; dest:x18; op1val:0xfffbffff00008000;  op2val:0xdfffffffffffffbf
TEST_P64_PNN_OP(umsr64, x18, $rd_hi, x27, x0, 0x0000000000000000, $correctval_hi, 0xfffbffff00008000, 0xdfffffffffffffbf, x7, 112, x19)

inst_8:
// rs1==x23, rs2==x1, rd==x26, rs2_w1_val == 4026531839, rs2_w0_val == 512, rs1_w1_val == 4292870143, rs1_w0_val == 32
// opcode: umsr64 ; op1:x23; op2:x1; dest:x26; op1val:0xffdfffff00000020;  op2val:0xefffffff00000200
TEST_P64_PNN_OP(umsr64, x26, $rd_hi, x23, x1, 0x0000000000000000, $correctval_hi, 0xffdfffff00000020, 0xefffffff00000200, x7, 128, x19)

inst_9:
// rs1==x28, rs2==x23, rd==x24, rs2_w1_val == 4160749567, rs1_w1_val == 4294967231, rs1_w0_val == 1073741824, rs2_w0_val == 4294963199
// opcode: umsr64 ; op1:x28; op2:x23; dest:x24; op1val:0xffffffbf40000000;  op2val:0xf7ffffffffffefff
TEST_P64_PNN_OP(umsr64, x24, $rd_hi, x28, x23, 0x0000000000000000, $correctval_hi, 0xffffffbf40000000, 0xf7ffffffffffefff, x7, 144, x19)

inst_10:
// rs1==x13, rs2==x9, rd==x2, rs2_w1_val == 4227858431, rs1_w0_val == 256, rs1_w1_val == 32768
// opcode: umsr64 ; op1:x13; op2:x9; dest:x2; op1val:0x0000800000000100;  op2val:0xfbffffff0000000f
TEST_P64_PNN_OP(umsr64, x2, $rd_hi, x13, x9, 0x0000000000000000, $correctval_hi, 0x0000800000000100, 0xfbffffff0000000f, x7, 160, x19)

inst_11:
// rs1==x1, rs2==x3, rd==x20, rs2_w1_val == 4261412863, rs1_w0_val == 1024, rs1_w1_val == 4294967039, rs2_w0_val == 524288
// opcode: umsr64 ; op1:x1; op2:x3; dest:x20; op1val:0xfffffeff00000400;  op2val:0xfdffffff00080000
TEST_P64_PNN_OP(umsr64, x20, $rd_hi, x1, x3, 0x0000000000000000, $correctval_hi, 0xfffffeff00000400, 0xfdffffff00080000, x7, 176, x19)

inst_12:
// rs1==x16, rs2==x10, rd==x4, rs2_w1_val == 4278190079, rs2_w0_val == 4261412863, rs1_w1_val == 268435456, rs1_w0_val == 4286578687
// opcode: umsr64 ; op1:x16; op2:x10; dest:x4; op1val:0x10000000ff7fffff;  op2val:0xfefffffffdffffff
TEST_P64_PNN_OP(umsr64, x4, $rd_hi, x16, x10, 0x0000000000000000, $correctval_hi, 0x10000000ff7fffff, 0xfefffffffdffffff, x7, 192, x19)

inst_13:
// rs1==x31, rs2==x5, rd==x12, rs2_w1_val == 4286578687, rs1_w0_val == 4293918719, rs1_w1_val == 4294934527
// opcode: umsr64 ; op1:x31; op2:x5; dest:x12; op1val:0xffff7fffffefffff;  op2val:0xff7fffff0000000f
TEST_P64_PNN_OP(umsr64, x12, $rd_hi, x31, x5, 0x0000000000000000, $correctval_hi, 0xffff7fffffefffff, 0xff7fffff0000000f, x7, 208, x19)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_14:
// rs1==x3, rs2==x20, rd==x6, rs2_w1_val == 4290772991, rs2_w0_val == 4294967294, rs1_w0_val == 134217728
// opcode: umsr64 ; op1:x3; op2:x20; dest:x6; op1val:0xffffffbf08000000;  op2val:0xffbffffffffffffe
TEST_P64_PNN_OP(umsr64, x6, $rd_hi, x3, x20, 0x0000000000000000, $correctval_hi, 0xffffffbf08000000, 0xffbffffffffffffe, x1, 0, x9)

inst_15:
// rs1==x29, rs2==x13, rs2_w1_val == 4292870143, rs1_w0_val == 4294967294, rs2_w0_val == 3758096383
// opcode: umsr64 ; op1:x29; op2:x13; dest:x3; op1val:0x00000012fffffffe;  op2val:0xffdfffffdfffffff
TEST_P64_PNN_OP(umsr64, x3, $rd_hi, x29, x13, 0x0000000000000000, $correctval_hi, 0x00000012fffffffe, 0xffdfffffdfffffff, x1, 16, x9)

inst_16:
// rs1==x30, rs2==x4, rs2_w1_val == 4293918719, rs1_w1_val == 1048576, rs2_w0_val == 4294967295, rs1_w0_val == 8192
// opcode: umsr64 ; op1:x30; op2:x4; dest:x29; op1val:0x0010000000002000;  op2val:0xffefffffffffffff
TEST_P64_PNN_OP(umsr64, x29, $rd_hi, x30, x4, 0x0000000000000000, $correctval_hi, 0x0010000000002000, 0xffefffffffffffff, x1, 32, x9)

inst_17:
// rs1==x11, rs2==x26, rs2_w1_val == 4294443007, rs1_w1_val == 4290772991, rs1_w0_val == 4294950911
// opcode: umsr64 ; op1:x11; op2:x26; dest:x10; op1val:0xffbfffffffffbfff;  op2val:0xfff7fffffdffffff
TEST_P64_PNN_OP(umsr64, x10, $rd_hi, x11, x26, 0x0000000000000000, $correctval_hi, 0xffbfffffffffbfff, 0xfff7fffffdffffff, x1, 48, x9)

inst_18:
// rs1==x12, rs2==x2, rs2_w1_val == 4294705151, rs1_w0_val == 4294967291, rs2_w0_val == 32768
// opcode: umsr64 ; op1:x12; op2:x2; dest:x24; op1val:0x00008000fffffffb;  op2val:0xfffbffff00008000
TEST_P64_PNN_OP(umsr64, x24, $rd_hi, x12, x2, 0x0000000000000000, $correctval_hi, 0x00008000fffffffb, 0xfffbffff00008000, x1, 64, x9)

inst_19:
// rs1==x25, rs2==x12, rs2_w1_val == 4294836223, rs1_w1_val == 4194304, rs1_w0_val == 262144
// opcode: umsr64 ; op1:x25; op2:x12; dest:x3; op1val:0x0040000000040000;  op2val:0xfffdffffffffffff
TEST_P64_PNN_OP(umsr64, x3, $rd_hi, x25, x12, 0x0000000000000000, $correctval_hi, 0x0040000000040000, 0xfffdffffffffffff, x1, 80, x9)

inst_20:
// rs1==x5, rs2==x16, rs2_w1_val == 4294901759, rs1_w1_val == 128
// opcode: umsr64 ; op1:x5; op2:x16; dest:x26; op1val:0x000000800000000b;  op2val:0xfffeffff0000000a
TEST_P64_PNN_OP(umsr64, x26, $rd_hi, x5, x16, 0x0000000000000000, $correctval_hi, 0x000000800000000b, 0xfffeffff0000000a, x1, 96, x9)

inst_21:
// rs1==x14, rs2==x30, rs2_w1_val == 4294934527, rs1_w0_val == 64
// opcode: umsr64 ; op1:x14; op2:x30; dest:x2; op1val:0x0000800000000040;  op2val:0xffff7fff0000000b
TEST_P64_PNN_OP(umsr64, x2, $rd_hi, x14, x30, 0x0000000000000000, $correctval_hi, 0x0000800000000040, 0xffff7fff0000000b, x1, 112, x9)

inst_22:
// rs1==x22, rs2==x7, rs2_w1_val == 4294950911, rs1_w1_val == 3221225471, rs1_w0_val == 268435456
// opcode: umsr64 ; op1:x22; op2:x7; dest:x17; op1val:0xbfffffff10000000;  op2val:0xffffbfff0000000b
TEST_P64_PNN_OP(umsr64, x17, $rd_hi, x22, x7, 0x0000000000000000, $correctval_hi, 0xbfffffff10000000, 0xffffbfff0000000b, x1, 128, x9)

inst_23:
// rs1==x24, rs2==x19, rs2_w1_val == 4294959103, rs2_w0_val == 256
// opcode: umsr64 ; op1:x24; op2:x19; dest:x31; op1val:0x1000000000000040;  op2val:0xffffdfff00000100
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x24, x19, 0x0000000000000000, $correctval_hi, 0x1000000000000040, 0xffffdfff00000100, x1, 144, x9)

inst_24:
// rs1==x26, rs2==x28, rs2_w1_val == 4294963199, rs2_w0_val == 4294966783
// opcode: umsr64 ; op1:x26; op2:x28; dest:x20; op1val:0x0000000700000012;  op2val:0xffffeffffffffdff
TEST_P64_PNN_OP(umsr64, x20, $rd_hi, x26, x28, 0x0000000000000000, $correctval_hi, 0x0000000700000012, 0xffffeffffffffdff, x1, 160, x9)

inst_25:
// rs1==x0, rs2==x25, rs2_w1_val == 4294965247, rs2_w0_val == 4026531839
// opcode: umsr64 ; op1:x0; op2:x25; dest:x6; op1val:0x000000090000000d;  op2val:0xfffff7ffefffffff
TEST_P64_PNN_OP(umsr64, x6, $rd_hi, x0, x25, 0x0000000000000000, $correctval_hi, 0x000000090000000d, 0xfffff7ffefffffff, x1, 176, x9)

inst_26:
// rs1==x4, rs2==x29, rs2_w1_val == 4294966271, rs1_w1_val == 4294950911, rs1_w0_val == 4294934527, rs2_w0_val == 8
// opcode: umsr64 ; op1:x4; op2:x29; dest:x14; op1val:0xffffbfffffff7fff;  op2val:0xfffffbff00000008
TEST_P64_PNN_OP(umsr64, x14, $rd_hi, x4, x29, 0x0000000000000000, $correctval_hi, 0xffffbfffffff7fff, 0xfffffbff00000008, x1, 192, x9)

inst_27:
// rs1==x20, rs2==x15, rs2_w1_val == 4294966783, rs1_w1_val == 1073741824
// opcode: umsr64 ; op1:x20; op2:x15; dest:x16; op1val:0x4000000000000020;  op2val:0xfffffdff00000003
TEST_P64_PNN_OP(umsr64, x16, $rd_hi, x20, x15, 0x0000000000000000, $correctval_hi, 0x4000000000000020, 0xfffffdff00000003, x1, 208, x9)

inst_28:
// rs1==x19, rs2==x31, rs2_w1_val == 4294967039, rs1_w0_val == 524288
// opcode: umsr64 ; op1:x19; op2:x31; dest:x10; op1val:0x0008000000080000;  op2val:0xfffffeffffbfffff
TEST_P64_PNN_OP(umsr64, x10, $rd_hi, x19, x31, 0x0000000000000000, $correctval_hi, 0x0008000000080000, 0xfffffeffffbfffff, x1, 224, x9)

inst_29:
// rs1==x7, rs2==x27, rs2_w1_val == 4294967167, rs2_w0_val == 1024, rs1_w0_val == 4294967293, rs1_w1_val == 2
// opcode: umsr64 ; op1:x7; op2:x27; dest:x31; op1val:0x00000002fffffffd;  op2val:0xffffff7f00000400
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x7, x27, 0x0000000000000000, $correctval_hi, 0x00000002fffffffd, 0xffffff7f00000400, x1, 240, x9)

inst_30:
// rs1==x2, rs2==x14, rs2_w1_val == 4294967231, rs1_w0_val == 2147483648, rs1_w1_val == 262144, rs2_w0_val == 1048576
// opcode: umsr64 ; op1:x2; op2:x14; dest:x16; op1val:0x0004000080000000;  op2val:0xffffffbf00100000
TEST_P64_PNN_OP(umsr64, x16, $rd_hi, x2, x14, 0x0000000000000000, $correctval_hi, 0x0004000080000000, 0xffffffbf00100000, x1, 256, x9)

inst_31:
// rs1==x21, rs2==x18, rs2_w1_val == 4294967263, rs1_w1_val == 536870912, rs1_w0_val == 128
// opcode: umsr64 ; op1:x21; op2:x18; dest:x8; op1val:0x2000000000000080;  op2val:0xffffffdf00800000
TEST_P64_PNN_OP(umsr64, x8, $rd_hi, x21, x18, 0x0000000000000000, $correctval_hi, 0x2000000000000080, 0xffffffdf00800000, x1, 272, x9)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_32:
// rs2_w1_val == 4294967279, rs2_w0_val == 16384
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000005;  op2val:0xffffffef00004000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x4000000000000005, 0xffffffef00004000, x1, 0, x2)

inst_33:
// rs2_w1_val == 4294967291, rs1_w0_val == 3221225471, rs1_w1_val == 134217728, rs2_w0_val == 4194304
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000bfffffff;  op2val:0xfffffffb00400000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x08000000bfffffff, 0xfffffffb00400000, x1, 16, x2)

inst_34:
// rs2_w1_val == 4294967293, rs1_w1_val == 16
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000001000000006;  op2val:0xfffffffd00000100
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000001000000006, 0xfffffffd00000100, x1, 32, x2)

inst_35:
// rs2_w1_val == 4294967294, rs1_w1_val == 4294967294
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffffef;  op2val:0xfffffffe00100000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffeffffffef, 0xfffffffe00100000, x1, 48, x2)

inst_36:
// rs2_w1_val == 2147483648, rs1_w0_val == 4294966783
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000fffffdff;  op2val:0x80000000fdffffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00008000fffffdff, 0x80000000fdffffff, x1, 64, x2)

inst_37:
// rs2_w1_val == 1073741824, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000011;  op2val:0x4000000000080000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7fff00000011, 0x4000000000080000, x1, 80, x2)

inst_38:
// rs2_w1_val == 536870912, rs1_w0_val == 4261412863, rs1_w1_val == 67108864
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000fdffffff;  op2val:0x2000000000010000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x04000000fdffffff, 0x2000000000010000, x1, 96, x2)

inst_39:
// rs2_w1_val == 268435456, rs1_w1_val == 4286578687
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00008000;  op2val:0x1000000000000200
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7fffff00008000, 0x1000000000000200, x1, 112, x2)

inst_40:
// rs2_w1_val == 134217728, rs1_w0_val == 4294967039, rs2_w0_val == 1, rs1_w1_val == 4294965247
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffffeff;  op2val:0x0800000000000001
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffff7fffffffeff, 0x0800000000000001, x1, 128, x2)

inst_41:
// rs2_w1_val == 67108864, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000500000400;  op2val:0x0400000000000005
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000500000400, 0x0400000000000005, x1, 144, x2)

inst_42:
// rs2_w1_val == 33554432, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000600000040;  op2val:0x02000000ffffffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000600000040, 0x02000000ffffffff, x1, 160, x2)

inst_43:
// rs2_w1_val == 16777216, rs1_w1_val == 4294967167
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000006;  op2val:0x0100000000000005
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffff7f00000006, 0x0100000000000005, x1, 176, x2)

inst_44:
// rs2_w1_val == 8388608, rs2_w0_val == 2048
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000007fffffdff;  op2val:0x0080000000000800
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000007fffffdff, 0x0080000000000800, x1, 192, x2)

inst_45:
// rs2_w1_val == 4194304, rs2_w0_val == 4294966271, rs1_w0_val == 4278190079
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffeffffff;  op2val:0x00400000fffffbff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbffffffffeffffff, 0x00400000fffffbff, x1, 208, x2)

inst_46:
// rs2_w1_val == 2097152, rs1_w0_val == 16, rs1_w1_val == 8388608
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0080000000000010;  op2val:0x0020000000004000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080000000000010, 0x0020000000004000, x1, 224, x2)

inst_47:
// rs2_w1_val == 1048576, rs1_w1_val == 64, rs1_w0_val == 33554432
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000004002000000;  op2val:0x00100000ffffffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000004002000000, 0x00100000ffffffff, x1, 240, x2)

inst_48:
// rs2_w1_val == 524288, rs1_w1_val == 4294966271, rs2_w0_val == 4096
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff0000000c;  op2val:0x0008000000001000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffbff0000000c, 0x0008000000001000, x1, 256, x2)

inst_49:
// rs2_w1_val == 262144, rs2_w0_val == 2147483647, rs1_w1_val == 256
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x000001000000000c;  op2val:0x000400007fffffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000001000000000c, 0x000400007fffffff, x1, 272, x2)

inst_50:
// rs2_w1_val == 131072, rs2_w0_val == 4
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ff7fffff;  op2val:0x0002000000000004
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x20000000ff7fffff, 0x0002000000000004, x1, 288, x2)

inst_51:
// rs1_w0_val == 131072, rs2_w0_val == 536870912, rs1_w1_val == 4294836223
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00020000;  op2val:0xffffffdf20000000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffdffff00020000, 0xffffffdf20000000, x1, 304, x2)

inst_52:
// rs1_w0_val == 65536, rs2_w0_val == 67108864
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0040000000010000;  op2val:0xffffdfff04000000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040000000010000, 0xffffdfff04000000, x1, 320, x2)

inst_53:
// rs1_w0_val == 16384, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000300004000;  op2val:0xfffffdff00001000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000300004000, 0xfffffdff00001000, x1, 336, x2)

inst_54:
// rs1_w0_val == 4096, rs1_w1_val == 4, rs2_w1_val == 1024
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000400001000;  op2val:0x000004000000000c
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000400001000, 0x000004000000000c, x1, 352, x2)

inst_55:
// rs1_w0_val == 2048, rs2_w1_val == 32, rs2_w0_val == 4294934527
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0400000000000800;  op2val:0x00000020ffff7fff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0400000000000800, 0x00000020ffff7fff, x1, 368, x2)

inst_56:
// rs1_w0_val == 512, rs1_w1_val == 4160749567, rs2_w0_val == 4293918719
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000200;  op2val:0xffffffefffefffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ffffff00000200, 0xffffffefffefffff, x1, 384, x2)

inst_57:
// rs1_w0_val == 8, rs2_w0_val == 4227858431
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000b00000008;  op2val:0x0000000cfbffffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000b00000008, 0x0000000cfbffffff, x1, 400, x2)

inst_58:
// rs1_w0_val == 4, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000400000004;  op2val:0xfffffffb00000007
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000400000004, 0xfffffffb00000007, x1, 416, x2)

inst_59:
// rs1_w0_val == 2, rs2_w0_val == 4294901759
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0040000000000002;  op2val:0x00400000fffeffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040000000000002, 0x00400000fffeffff, x1, 432, x2)

inst_60:
// rs1_w0_val == 1, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000700000001;  op2val:0x00080000ffffffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000700000001, 0x00080000ffffffff, x1, 448, x2)

inst_61:
// rs2_w1_val == 65536, rs1_w0_val == 4227858431, rs2_w0_val == 2863311530
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000013fbffffff;  op2val:0x00010000aaaaaaaa
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000013fbffffff, 0x00010000aaaaaaaa, x1, 464, x2)

inst_62:
// rs2_w1_val == 32768, rs1_w0_val == 2863311530, rs1_w1_val == 2863311530, rs2_w0_val == 4160749567
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x00008000f7ffffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaaaaaaaaaaaaaa, 0x00008000f7ffffff, x1, 480, x2)

inst_63:
// rs2_w1_val == 16384, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000001;  op2val:0x0000400000004000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffff7ff00000001, 0x0000400000004000, x1, 496, x2)

inst_64:
// rs2_w1_val == 8192, rs1_w0_val == 8388608, rs2_w0_val == 268435456
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500800000;  op2val:0x0000200010000000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x5555555500800000, 0x0000200010000000, x1, 512, x2)

inst_65:
// rs2_w1_val == 4096, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf0000000b;  op2val:0x00001000ffffffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdf0000000b, 0x00001000ffffffff, x1, 528, x2)

inst_66:
// rs2_w1_val == 2048, rs1_w1_val == 0, rs2_w0_val == 3221225471
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000fffffdff;  op2val:0x00000800bfffffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000000fffffdff, 0x00000800bfffffff, x1, 544, x2)

inst_67:
// rs2_w1_val == 512, rs2_w0_val == 4294967263, rs1_w0_val == 4294967287
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000fffffff7;  op2val:0x00000200ffffffdf
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00040000fffffff7, 0x00000200ffffffdf, x1, 560, x2)

inst_68:
// rs2_w1_val == 256, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000fffffff7;  op2val:0x0000010020000000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00080000fffffff7, 0x0000010020000000, x1, 576, x2)

inst_69:
// rs2_w1_val == 128, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x000000040000000d;  op2val:0x0000008000001000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000000040000000d, 0x0000008000001000, x1, 592, x2)

inst_70:
// rs2_w1_val == 64, rs1_w1_val == 3758096383, rs2_w0_val == 16777216
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffff7ffff;  op2val:0x0000004001000000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdffffffffff7ffff, 0x0000004001000000, x1, 608, x2)

inst_71:
// rs2_w1_val == 8, rs1_w1_val == 4294967279
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef80000000;  op2val:0x0000000800000800
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffef80000000, 0x0000000800000800, x1, 624, x2)

inst_72:
// rs2_w1_val == 4, rs2_w0_val == 4294705151, rs1_w0_val == 2147483647, rs1_w1_val == 4227858431
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff7fffffff;  op2val:0x00000004fffbffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffffff7fffffff, 0x00000004fffbffff, x1, 640, x2)

inst_73:
// rs2_w1_val == 2, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000800000000080;  op2val:0x0000000200000007
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000800000000080, 0x0000000200000007, x1, 656, x2)

inst_74:
// rs2_w1_val == 1, rs2_w0_val == 2147483648, rs1_w0_val == 3758096383
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000dfffffff;  op2val:0x0000000180000000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00080000dfffffff, 0x0000000180000000, x1, 672, x2)

inst_75:
// rs2_w1_val == 4294967295, rs1_w1_val == 4294967291, rs1_w0_val == 4294959103
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffdfff;  op2val:0xffffffff0000000d
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffbffffdfff, 0xffffffff0000000d, x1, 688, x2)

inst_76:
// rs2_w1_val == 0, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000ffffefff;  op2val:0x00000000ffffefff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x10000000ffffefff, 0x00000000ffffefff, x1, 704, x2)

inst_77:
// rs2_w0_val == 1431655765, rs1_w1_val == 1024
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400ff7fffff;  op2val:0x0000800055555555
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000400ff7fffff, 0x0000800055555555, x1, 720, x2)

inst_78:
// rs2_w0_val == 4278190079, rs1_w1_val == 33554432, rs1_w0_val == 1048576
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0200000000100000;  op2val:0x00000007feffffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200000000100000, 0x00000007feffffff, x1, 736, x2)

inst_79:
// rs2_w0_val == 128, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000001000001000;  op2val:0x0000000f00000080
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000001000001000, 0x0000000f00000080, x1, 752, x2)

inst_80:
// rs2_w0_val == 64, rs1_w1_val == 32
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000002000010000;  op2val:0x4000000000000040
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000002000010000, 0x4000000000000040, x1, 768, x2)

inst_81:
// rs2_w0_val == 32, rs1_w1_val == 8
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000800000100;  op2val:0x0000040000000020
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000800000100, 0x0000040000000020, x1, 784, x2)

inst_82:
// rs2_w0_val == 16, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000600000040;  op2val:0x4000000000000010
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000600000040, 0x4000000000000010, x1, 800, x2)

inst_83:
// rs2_w0_val == 2, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000feffffff;  op2val:0x0000000a00000002
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00080000feffffff, 0x0000000a00000002, x1, 816, x2)

inst_84:
// rs2_w0_val == 0, rs1_w0_val == 4160749567
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeff7ffffff;  op2val:0x2000000000000000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffeff7ffffff, 0x2000000000000000, x1, 832, x2)

inst_85:
// rs1_w1_val == 4026531839, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00008000;  op2val:0x0000000e00000080
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefffffff00008000, 0x0000000e00000080, x1, 848, x2)

inst_86:
// rs1_w1_val == 4261412863, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00800000;  op2val:0x00001000ffff7fff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdffffff00800000, 0x00001000ffff7fff, x1, 864, x2)

inst_87:
// rs1_w1_val == 4278190079, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffff7ffffff;  op2val:0xefffffff00000020
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfefffffff7ffffff, 0xefffffff00000020, x1, 880, x2)

inst_88:
// rs1_w1_val == 4293918719, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00004000;  op2val:0x0800000000100000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffefffff00004000, 0x0800000000100000, x1, 896, x2)

inst_89:
// rs1_w1_val == 4294443007, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000008;  op2val:0x0000001000000020
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7ffff00000008, 0x0000001000000020, x1, 912, x2)

inst_90:
// rs1_w1_val == 4294959103, rs2_w0_val == 4286578687, rs1_w0_val == 4294967263
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffffdf;  op2val:0x00000010ff7fffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffdfffffffffdf, 0x00000010ff7fffff, x1, 928, x2)

inst_91:
// rs1_w1_val == 4294963199, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffefffff;  op2val:0x00001000bfffffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffefffffefffff, 0x00001000bfffffff, x1, 944, x2)

inst_92:
// rs1_w1_val == 4294966783, rs2_w0_val == 4294967293
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffff7fffff;  op2val:0xffffbffffffffffd
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffdffff7fffff, 0xffffbffffffffffd, x1, 960, x2)

inst_93:
// rs1_w1_val == 4294967287, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000400;  op2val:0xffff7fff00000012
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff700000400, 0xffff7fff00000012, x1, 976, x2)

inst_94:
// rs1_w1_val == 4294967293, rs1_w0_val == 4026531839
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdefffffff;  op2val:0x0000000e00000008
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffdefffffff, 0x0000000e00000008, x1, 992, x2)

inst_95:
// rs1_w1_val == 2147483648, rs2_w0_val == 134217728
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000011;  op2val:0x0000000808000000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000000000000011, 0x0000000808000000, x1, 1008, x2)

inst_96:
// rs1_w1_val == 16777216, rs2_w0_val == 4294967039
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0100000000000006;  op2val:0xfffffffbfffffeff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0100000000000006, 0xfffffffbfffffeff, x1, 1024, x2)

inst_97:
// rs1_w1_val == 2097152, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0020000008000000;  op2val:0x000000050000000d
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020000008000000, 0x000000050000000d, x1, 1040, x2)

inst_98:
// rs1_w1_val == 131072, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000feffffff;  op2val:0xdfffffffbfffffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00020000feffffff, 0xdfffffffbfffffff, x1, 1056, x2)

inst_99:
// rs1_w1_val == 65536, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0001000002000000;  op2val:0xffbfffffffbfffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001000002000000, 0xffbfffffffbfffff, x1, 1072, x2)

inst_100:
// rs1_w1_val == 16384, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000ff7fffff;  op2val:0xffffff7f0000000d
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00004000ff7fffff, 0xffffff7f0000000d, x1, 1088, x2)

inst_101:
// rs1_w1_val == 4096, rs1_w0_val == 4290772991
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000ffbfffff;  op2val:0x0000080008000000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00001000ffbfffff, 0x0000080008000000, x1, 1104, x2)

inst_102:
// rs1_w1_val == 2048, rs2_w0_val == 2097152
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800ff7fffff;  op2val:0xfffffdff00200000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000800ff7fffff, 0xfffffdff00200000, x1, 1120, x2)

inst_103:
// rs1_w1_val == 512, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000020002000000;  op2val:0x0000010000000009
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000020002000000, 0x0000010000000009, x1, 1136, x2)

inst_104:
// rs1_w1_val == 1, rs1_w0_val == 4294705151
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000001fffbffff;  op2val:0x00000800efffffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000001fffbffff, 0x00000800efffffff, x1, 1152, x2)

inst_105:
// rs1_w1_val == 4294967295, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff0000000f;  op2val:0x000000117fffffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffff0000000f, 0x000000117fffffff, x1, 1168, x2)

inst_106:
// rs2_w0_val == 4294836223, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000700000100;  op2val:0x00001000fffdffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000700000100, 0x00001000fffdffff, x1, 1184, x2)

inst_107:
// rs2_w0_val == 4294950911, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000008000000013;  op2val:0x0000000effffbfff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000008000000013, 0x0000000effffbfff, x1, 1200, x2)

inst_108:
// rs2_w0_val == 262144, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffdff;  op2val:0xfffff7ff00040000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdffffffdff, 0xfffff7ff00040000, x1, 1216, x2)

inst_109:
// rs1_w0_val == 4292870143, rs2_w0_val == 4294967279
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000010ffdfffff;  op2val:0xffffffdfffffffef
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000010ffdfffff, 0xffffffdfffffffef, x1, 1232, x2)

inst_110:
// rs2_w0_val == 4294965247, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000e00000013;  op2val:0xfffff7fffffff7ff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000e00000013, 0xfffff7fffffff7ff, x1, 1248, x2)

inst_111:
// rs1_w0_val == 2097152, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000800200000;  op2val:0xffffffffffffffbf
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000800200000, 0xffffffffffffffbf, x1, 1264, x2)

inst_112:
// rs1_w0_val == 4294836223, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000fffdffff;  op2val:0xffbfffff00000011
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00100000fffdffff, 0xffbfffff00000011, x1, 1280, x2)

inst_113:
// rs1_w0_val == 4294901759, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000002fffeffff;  op2val:0xfffff7ff00000000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000002fffeffff, 0xfffff7ff00000000, x1, 1296, x2)

inst_114:
// rs2_w0_val == 4294967167, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0400000002000000;  op2val:0xffff7fffffffff7f
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0400000002000000, 0xffff7fffffffff7f, x1, 1312, x2)

inst_115:
// rs1_w0_val == 4294965247, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffff7ff;  op2val:0x0000000a00100000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffefffff7ff, 0x0000000a00100000, x1, 1328, x2)

inst_116:
// rs2_w0_val == 4294967291, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff0000000e;  op2val:0xfefffffffffffffb
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7ffff0000000e, 0xfefffffffffffffb, x1, 1344, x2)

inst_117:
// rs1_w0_val == 4294966271, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffffbff;  op2val:0x0000000b00000040
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x20000000fffffbff, 0x0000000b00000040, x1, 1360, x2)

inst_118:
// rs1_w0_val == 4294967167, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffffff7f;  op2val:0xffffff7f00000013
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaaaaaaffffff7f, 0xffffff7f00000013, x1, 1376, x2)

inst_119:
// rs2_w0_val == 1073741824, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000200;  op2val:0xfffbffff40000000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfffffff00000200, 0xfffbffff40000000, x1, 1392, x2)

inst_120:
// rs2_w0_val == 33554432, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffeffffff;  op2val:0x0002000002000000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffdfffeffffff, 0x0002000002000000, x1, 1408, x2)

inst_121:
// rs1_w0_val == 536870912, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0800000020000000;  op2val:0xfffffeff00000040
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800000020000000, 0xfffffeff00000040, x1, 1424, x2)

inst_122:
// rs1_w0_val == 67108864, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000a04000000;  op2val:0x0000000d0000000b
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000a04000000, 0x0000000d0000000b, x1, 1440, x2)

inst_123:
// rs2_w0_val == 131072, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000900000003;  op2val:0x0002000000020000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000900000003, 0x0002000000020000, x1, 1456, x2)

inst_124:
// rs1_w0_val == 16777216, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb01000000;  op2val:0x00000001ffffbfff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffb01000000, 0x00000001ffffbfff, x1, 1472, x2)

inst_125:
// rs1_w0_val == 4294967231, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000011ffffffbf;  op2val:0x00001000fdffffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000011ffffffbf, 0x00001000fdffffff, x1, 1488, x2)

inst_126:
// rs2_w0_val == 8192, 
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000200;  op2val:0xffffffff00002000
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x1000000000000200, 0xffffffff00002000, x1, 1504, x2)

inst_127:
// rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 16, rs1_w0_val == 4294443007, rs1_w1_val == 1431655765, rs2_w0_val == 4294443007
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fff7ffff;  op2val:0x00000010fff7ffff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x55555555fff7ffff, 0x00000010fff7ffff, x1, 1520, x2)

inst_128:
// rs2_w1_val == 2863311530, rs1_w0_val == 4294967295, rs2_w0_val == 4294959103, rs1_w1_val == 2147483647
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffffff;  op2val:0xaaaaaaaaffffdfff
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fffffffffffffff, 0xaaaaaaaaffffdfff, x1, 1536, x2)

inst_129:
// rs2_w1_val == 3758096383, rs1_w1_val == 4294705151, rs1_w0_val == 32768, rs2_w0_val == 4294967231
// opcode: umsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00008000;  op2val:0xdfffffffffffffbf
TEST_P64_PNN_OP(umsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffbffff00008000, 0xdfffffffffffffbf, x1, 1552, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 196*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
