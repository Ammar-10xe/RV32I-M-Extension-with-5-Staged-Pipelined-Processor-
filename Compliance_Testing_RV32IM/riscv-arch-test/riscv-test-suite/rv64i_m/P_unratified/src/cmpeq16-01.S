
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the cmpeq16 instruction of the RISC-V RV64PZicsr extension for the cmpeq16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",cmpeq16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 == rd != rs2, rs1==x15, rs2==x24, rd==x15, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs2_h2_val == 512, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -2, rs1_h2_val == -129, rs1_h1_val == -2049, rs1_h3_val == 8192
// opcode: cmpeq16 ; op1:x15; op2:x24; dest:x15; op1val:0x2000ff7ff7ff8000;  op2val:0xc00002000009fffe
TEST_RR_OP(cmpeq16, x15, x15, x24, 0x0000000000000000, 0x2000ff7ff7ff8000, 0xc00002000009fffe, x4, 0, x12)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x22, rs2==x7, rd==x21, rs1_h3_val == rs2_h3_val, rs1_h0_val == -3, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 2, rs2_h2_val == -9, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 2, rs2_h1_val == 4096, rs2_h3_val == 2
// opcode: cmpeq16 ; op1:x22; op2:x7; dest:x21; op1val:0x020002c000fffd;  op2val:0x02fff71000fff9
TEST_RR_OP(cmpeq16, x21, x22, x7, 0x0000000000000000, 0x020002c000fffd, 0x02fff71000fff9, x4, 8, x12)

inst_2:
// rs1 == rs2 != rd, rs1==x2, rs2==x2, rd==x5, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h0_val == 1, rs2_h1_val == -9, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h3_val == -129, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h3_val == 16, rs1_h0_val == -1, rs2_h2_val == 64, rs1_h1_val == -65
// opcode: cmpeq16 ; op1:x2; op2:x2; dest:x5; op1val:0xff7fff7fffbfffff;  op2val:0x100040fff70001
TEST_RR_OP(cmpeq16, x5, x2, x2, 0x0000000000000000, 0xff7fff7fffbfffff, 0x100040fff70001, x4, 16, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -513, rs2_h1_val == 32767, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h0_val == -1025, rs1_h2_val == 4, rs1_h1_val == 32, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 0, rs1_h3_val == -32768
// opcode: cmpeq16 ; op1:x28; op2:x28; dest:x28; op1val:0x8000000400200000;  op2val:0xfdff00407ffffbff
TEST_RR_OP(cmpeq16, x28, x28, x28, 0x0000000000000000, 0x8000000400200000, 0xfdff00407ffffbff, x4, 24, x12)

inst_4:
// rs2 == rd != rs1, rs1==x21, rs2==x26, rd==x26, rs1_h2_val == rs2_h2_val, rs2_h2_val == -1, rs1_h1_val == -32768, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h3_val == 8192, rs2_h0_val == -129, rs1_h2_val == -1, rs1_h0_val == 16, rs2_h1_val == 8192, rs1_h3_val == -33, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: cmpeq16 ; op1:x21; op2:x26; dest:x26; op1val:0xffdfffff80000010;  op2val:0x2000ffff2000ff7f
TEST_RR_OP(cmpeq16, x26, x21, x26, 0x0000000000000000, 0xffdfffff80000010, 0x2000ffff2000ff7f, x4, 32, x12)

inst_5:
// rs1==x19, rs2==x23, rd==x11, rs1_h1_val == rs2_h1_val, rs2_h1_val == 1, rs2_h3_val == -129, rs1_h2_val == 1024, rs1_h3_val == -21846, rs2_h0_val == -65, rs1_h1_val == 1, rs1_h0_val == 21845, rs2_h2_val == 21845
// opcode: cmpeq16 ; op1:x19; op2:x23; dest:x11; op1val:0xaaaa040000015555;  op2val:0xff7f55550001ffbf
TEST_RR_OP(cmpeq16, x11, x19, x23, 0x0000000000000000, 0xaaaa040000015555, 0xff7f55550001ffbf, x4, 40, x12)

inst_6:
// rs1==x31, rs2==x1, rd==x0, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val == 16384, rs2_h1_val == -1025, rs1_h1_val == 256, rs2_h0_val == -33, rs2_h2_val == 4096, rs1_h2_val == -257, rs2_h3_val == 32767
// opcode: cmpeq16 ; op1:x31; op2:x1; dest:x0; op1val:0x05feff01004000;  op2val:0x7fff1000fbffffdf
TEST_RR_OP(cmpeq16, x0, x31, x1, 0x0000000000000000, 0x05feff01004000, 0x7fff1000fbffffdf, x4, 48, x12)

inst_7:
// rs1==x11, rs2==x3, rd==x6, rs1_h0_val == rs2_h0_val, rs2_h0_val == 32, rs1_h1_val == -3, rs2_h2_val == -2049, rs1_h0_val == 32, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: cmpeq16 ; op1:x11; op2:x3; dest:x6; op1val:0x2000ff7ffffd0020;  op2val:0xfdfff7ff00010020
TEST_RR_OP(cmpeq16, x6, x11, x3, 0x0000000000000000, 0x2000ff7ffffd0020, 0xfdfff7ff00010020, x4, 56, x12)

inst_8:
// rs1==x18, rs2==x29, rd==x7, rs2_h3_val == -21846, rs2_h2_val == -33, rs2_h0_val == 2048, rs1_h2_val == 8
// opcode: cmpeq16 ; op1:x18; op2:x29; dest:x7; op1val:0x05000800030006;  op2val:0xaaaaffdffff90800
TEST_RR_OP(cmpeq16, x7, x18, x29, 0x0000000000000000, 0x05000800030006, 0xaaaaffdffff90800, x4, 64, x12)

inst_9:
// rs1==x20, rs2==x11, rd==x8, rs2_h3_val == 21845, rs2_h1_val == 21845, rs1_h3_val == 128, rs2_h0_val == 21845, rs1_h2_val == -65, rs2_h2_val == -21846
// opcode: cmpeq16 ; op1:x20; op2:x11; dest:x8; op1val:0x80ffbf00203fff;  op2val:0x5555aaaa55555555
TEST_RR_OP(cmpeq16, x8, x20, x11, 0x0000000000000000, 0x80ffbf00203fff, 0x5555aaaa55555555, x4, 72, x12)

inst_10:
// rs1==x27, rs2==x0, rd==x18, rs2_h3_val == -16385, rs2_h0_val == 32767, rs1_h2_val == -21846, rs2_h1_val == -32768, rs2_h2_val == 1024, rs1_h1_val == -129
// opcode: cmpeq16 ; op1:x27; op2:x0; dest:x18; op1val:0xff7faaaaff7f4000;  op2val:0xbfff040080007fff
TEST_RR_OP(cmpeq16, x18, x27, x0, 0x0000000000000000, 0xff7faaaaff7f4000, 0xbfff040080007fff, x4, 80, x12)

inst_11:
// rs1==x25, rs2==x9, rd==x1, rs2_h3_val == -8193, rs1_h0_val == 32767, rs2_h0_val == 0
// opcode: cmpeq16 ; op1:x25; op2:x9; dest:x1; op1val:0xff7ffff800077fff;  op2val:0xdfff0400fff80000
TEST_RR_OP(cmpeq16, x1, x25, x9, 0x0000000000000000, 0xff7ffff800077fff, 0xdfff0400fff80000, x4, 88, x12)

inst_12:
// rs1==x10, rs2==x15, rd==x30, rs2_h3_val == -4097, rs1_h3_val == 1024, rs2_h1_val == -129, rs2_h0_val == -257, rs1_h0_val == -129
// opcode: cmpeq16 ; op1:x10; op2:x15; dest:x30; op1val:0x400feff0007ff7f;  op2val:0xefff0040ff7ffeff
TEST_RR_OP(cmpeq16, x30, x10, x15, 0x0000000000000000, 0x400feff0007ff7f, 0xefff0040ff7ffeff, x4, 96, x12)

inst_13:
// rs1==x3, rs2==x14, rd==x23, rs2_h3_val == -2049, rs2_h0_val == -1, rs1_h0_val == -2, rs1_h2_val == -2
// opcode: cmpeq16 ; op1:x3; op2:x14; dest:x23; op1val:0x80fffe0007fffe;  op2val:0xf7ffffff2000ffff
TEST_RR_OP(cmpeq16, x23, x3, x14, 0x0000000000000000, 0x80fffe0007fffe, 0xf7ffffff2000ffff, x4, 104, x12)

inst_14:
// rs1==x6, rs2==x20, rd==x17, rs2_h3_val == -1025, rs2_h0_val == 64, rs2_h1_val == 512, rs2_h2_val == 256
// opcode: cmpeq16 ; op1:x6; op2:x20; dest:x17; op1val:0x400040080000010;  op2val:0xfbff010002000040
TEST_RR_OP(cmpeq16, x17, x6, x20, 0x0000000000000000, 0x400040080000010, 0xfbff010002000040, x4, 112, x12)
RVTEST_SIGBASE(x11,signature_x11_0)

inst_15:
// rs1==x23, rs2==x13, rd==x2, rs2_h3_val == -257, rs1_h1_val == 16384, rs1_h2_val == 0, rs2_h2_val == 8192, rs2_h1_val == -3, rs1_h3_val == -5, rs1_h0_val == -8193
// opcode: cmpeq16 ; op1:x23; op2:x13; dest:x2; op1val:0xfffb00004000dfff;  op2val:0xfeff2000fffd0003
TEST_RR_OP(cmpeq16, x2, x23, x13, 0x0000000000000000, 0xfffb00004000dfff, 0xfeff2000fffd0003, x11, 0, x12)

inst_16:
// rs1==x30, rs2==x10, rd==x29, rs2_h3_val == -65, rs1_h1_val == -1025, rs2_h2_val == -8193, rs1_h3_val == -513, rs2_h1_val == -1
// opcode: cmpeq16 ; op1:x30; op2:x10; dest:x29; op1val:0xfdfffff8fbfffff9;  op2val:0xffbfdfffffffffbf
TEST_RR_OP(cmpeq16, x29, x30, x10, 0x0000000000000000, 0xfdfffff8fbfffff9, 0xffbfdfffffffffbf, x11, 8, x12)

inst_17:
// rs1==x13, rs2==x17, rd==x10, rs2_h3_val == -33, rs1_h3_val == 256, rs2_h0_val == -513, rs2_h2_val == 8, rs1_h0_val == -1025, rs2_h1_val == 32, rs1_h1_val == -9
// opcode: cmpeq16 ; op1:x13; op2:x17; dest:x10; op1val:0x100fffafff7fbff;  op2val:0xffdf00080020fdff
TEST_RR_OP(cmpeq16, x10, x13, x17, 0x0000000000000000, 0x100fffafff7fbff, 0xffdf00080020fdff, x11, 16, x12)

inst_18:
// rs1==x8, rs2==x16, rd==x13, rs2_h3_val == -17, rs1_h2_val == -2049, rs1_h3_val == -16385, rs2_h2_val == 2, rs2_h1_val == -4097
// opcode: cmpeq16 ; op1:x8; op2:x16; dest:x13; op1val:0xbffff7fffbffff7f;  op2val:0xffef0002effffeff
TEST_RR_OP(cmpeq16, x13, x8, x16, 0x0000000000000000, 0xbffff7fffbffff7f, 0xffef0002effffeff, x11, 24, x12)

inst_19:
// rs1==x29, rs2==x21, rd==x16, rs2_h3_val == -9, rs1_h0_val == 8, rs1_h1_val == -16385, rs1_h2_val == -17, rs2_h2_val == 4, rs2_h0_val == 512, rs1_h3_val == 2048
// opcode: cmpeq16 ; op1:x29; op2:x21; dest:x16; op1val:0x800ffefbfff0008;  op2val:0xfff70004fff90200
TEST_RR_OP(cmpeq16, x16, x29, x21, 0x0000000000000000, 0x800ffefbfff0008, 0xfff70004fff90200, x11, 32, x12)

inst_20:
// rs1==x9, rs2==x5, rd==x4, rs2_h3_val == -5, rs2_h2_val == -65, rs1_h3_val == -257, rs2_h0_val == 4096
// opcode: cmpeq16 ; op1:x9; op2:x5; dest:x4; op1val:0xfefffff88000fffa;  op2val:0xfffbffbf7fff1000
TEST_RR_OP(cmpeq16, x4, x9, x5, 0x0000000000000000, 0xfefffff88000fffa, 0xfffbffbf7fff1000, x11, 40, x12)

inst_21:
// rs1==x1, rs2==x8, rd==x27, rs2_h3_val == -3, rs1_h2_val == 8192, rs1_h0_val == -513, rs2_h1_val == -8193
// opcode: cmpeq16 ; op1:x1; op2:x8; dest:x27; op1val:0xfff920000007fdff;  op2val:0xfffdaaaadffffbff
TEST_RR_OP(cmpeq16, x27, x1, x8, 0x0000000000000000, 0xfff920000007fdff, 0xfffdaaaadffffbff, x11, 48, x12)

inst_22:
// rs1==x0, rs2==x25, rd==x14, rs2_h3_val == -2, rs1_h0_val == -5, rs1_h3_val == 32, rs2_h1_val == -17, rs1_h2_val == 32767, rs2_h2_val == 128
// opcode: cmpeq16 ; op1:x0; op2:x25; dest:x14; op1val:0x207fff0001fffb;  op2val:0xfffe0080ffeffffc
TEST_RR_OP(cmpeq16, x14, x0, x25, 0x0000000000000000, 0x207fff0001fffb, 0xfffe0080ffeffffc, x11, 56, x12)

inst_23:
// rs1==x26, rs2==x18, rd==x24, rs2_h3_val == -32768, rs2_h2_val == -16385, rs1_h3_val == -1, rs2_h1_val == 8
// opcode: cmpeq16 ; op1:x26; op2:x18; dest:x24; op1val:0xfffff7ff40000006;  op2val:0x8000bfff0008ffdf
TEST_RR_OP(cmpeq16, x24, x26, x18, 0x0000000000000000, 0xfffff7ff40000006, 0x8000bfff0008ffdf, x11, 64, x12)

inst_24:
// rs1==x24, rs2==x19, rd==x31, rs2_h3_val == 16384, rs2_h1_val == 2, rs1_h1_val == -2, rs1_h2_val == 256, rs2_h2_val == -17, rs1_h0_val == 128
// opcode: cmpeq16 ; op1:x24; op2:x19; dest:x31; op1val:0x3fff0100fffe0080;  op2val:0x4000ffef0002c000
TEST_RR_OP(cmpeq16, x31, x24, x19, 0x0000000000000000, 0x3fff0100fffe0080, 0x4000ffef0002c000, x11, 72, x12)

inst_25:
// rs1==x7, rs2==x6, rd==x20, rs2_h3_val == 4096, rs1_h2_val == 2048, rs2_h0_val == 2, rs1_h3_val == -1025, rs1_h1_val == -21846, rs2_h2_val == 16
// opcode: cmpeq16 ; op1:x7; op2:x6; dest:x20; op1val:0xfbff0800aaaafdff;  op2val:0x10000010fbff0002
TEST_RR_OP(cmpeq16, x20, x7, x6, 0x0000000000000000, 0xfbff0800aaaafdff, 0x10000010fbff0002, x11, 80, x12)

inst_26:
// rs1==x17, rs2==x22, rd==x3, rs2_h3_val == 2048, rs2_h0_val == -9, rs1_h2_val == -1025, rs1_h0_val == -21846, rs1_h1_val == -257, rs2_h2_val == 32767
// opcode: cmpeq16 ; op1:x17; op2:x22; dest:x3; op1val:0x2000fbfffeffaaaa;  op2val:0x8007fff0008fff7
TEST_RR_OP(cmpeq16, x3, x17, x22, 0x0000000000000000, 0x2000fbfffeffaaaa, 0x8007fff0008fff7, x11, 88, x12)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_27:
// rs1==x14, rs2==x4, rd==x12, rs2_h3_val == 1024, rs2_h1_val == 256, rs1_h2_val == 21845, rs1_h1_val == -4097
// opcode: cmpeq16 ; op1:x14; op2:x4; dest:x12; op1val:0x3fff5555effffffb;  op2val:0x40000090100fffe
TEST_RR_OP(cmpeq16, x12, x14, x4, 0x0000000000000000, 0x3fff5555effffffb, 0x40000090100fffe, x1, 0, x2)

inst_28:
// rs1==x16, rs2==x31, rd==x19, rs2_h3_val == 512, rs2_h1_val == 4, rs1_h2_val == -3
// opcode: cmpeq16 ; op1:x16; op2:x31; dest:x19; op1val:0xff7ffffdf7ff0009;  op2val:0x200fffc00040007
TEST_RR_OP(cmpeq16, x19, x16, x31, 0x0000000000000000, 0xff7ffffdf7ff0009, 0x200fffc00040007, x1, 8, x2)

inst_29:
// rs1==x4, rs2==x27, rd==x22, rs2_h3_val == 256, rs1_h2_val == 16384, rs1_h1_val == 4, rs2_h1_val == 16384
// opcode: cmpeq16 ; op1:x4; op2:x27; dest:x22; op1val:0xfffc40000004fffb;  op2val:0x100ffef4000fffc
TEST_RR_OP(cmpeq16, x22, x4, x27, 0x0000000000000000, 0xfffc40000004fffb, 0x100ffef4000fffc, x1, 16, x2)

inst_30:
// rs1==x12, rs2==x30, rd==x25, rs2_h3_val == 128, rs2_h0_val == 8192
// opcode: cmpeq16 ; op1:x12; op2:x30; dest:x25; op1val:0xff7f7fff0004fff8;  op2val:0x80000600042000
TEST_RR_OP(cmpeq16, x25, x12, x30, 0x0000000000000000, 0xff7f7fff0004fff8, 0x80000600042000, x1, 24, x2)

inst_31:
// rs1==x5, rs2==x12, rd==x9, rs1_h1_val == -5, rs2_h2_val == -5, rs2_h1_val == 16
// opcode: cmpeq16 ; op1:x5; op2:x12; dest:x9; op1val:0x1000100fffbfffa;  op2val:0x100fffb00100005
TEST_RR_OP(cmpeq16, x9, x5, x12, 0x0000000000000000, 0x1000100fffbfffa, 0x100fffb00100005, x1, 32, x2)

inst_32:
// rs1_h1_val == 8192, rs1_h3_val == -2049, rs2_h0_val == -3, rs2_h2_val == -32768
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000220000080;  op2val:0x028000fffcfffd
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xf7ff000220000080, 0x028000fffcfffd, x1, 40, x2)

inst_33:
// rs1_h1_val == 4096, rs1_h3_val == 32767, rs1_h2_val == -5, rs2_h2_val == -257
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffb1000fff9;  op2val:0x07feff0006fff7
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x7ffffffb1000fff9, 0x07feff0006fff7, x1, 48, x2)

inst_34:
// rs1_h1_val == 2048, rs1_h3_val == 21845
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffb0800fff6;  op2val:0x2003fff00052000
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x5555fffb0800fff6, 0x2003fff00052000, x1, 56, x2)

inst_35:
// rs1_h1_val == 1024, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6f7ff04000009;  op2val:0x80003fff0200feff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xfff6f7ff04000009, 0x80003fff0200feff, x1, 64, x2)

inst_36:
// rs1_h1_val == 512, rs1_h2_val == -16385, rs2_h3_val == 8
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8bfff0200fffb;  op2val:0x081000efff3fff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xfff8bfff0200fffb, 0x081000efff3fff, x1, 72, x2)

inst_37:
// rs1_h1_val == 128, rs1_h3_val == 4096
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fbff00800010;  op2val:0xfff6fffa00040000
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x1000fbff00800010, 0xfff6fffa00040000, x1, 80, x2)

inst_38:
// rs1_h1_val == 64, rs1_h0_val == 256, rs1_h3_val == -8193
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff600400100;  op2val:0x40000100fbfffff6
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xdffffff600400100, 0x40000100fbfffff6, x1, 88, x2)

inst_39:
// rs1_h1_val == 16, rs1_h0_val == 1024, rs2_h3_val == -1, rs2_h2_val == 1
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffb00100400;  op2val:0xffff0001c000fff8
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xff7ffffb00100400, 0xffff0001c000fff8, x1, 96, x2)

inst_40:
// rs1_h1_val == 8, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb200000080080;  op2val:0xfffefeff40007fff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xfffb200000080080, 0xfffefeff40007fff, x1, 104, x2)

inst_41:
// rs1_h1_val == 2, rs1_h3_val == 512
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x200f7ff00020009;  op2val:0xfeff0400fff60040
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x200f7ff00020009, 0xfeff0400fff60040, x1, 112, x2)

inst_42:
// rs1_h1_val == 0, rs2_h0_val == -17, rs1_h3_val == -17
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffc0000fff8;  op2val:0xaaaa5555fff8ffef
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xffeffffc0000fff8, 0xaaaa5555fff8ffef, x1, 120, x2)

inst_43:
// rs1_h1_val == -1, rs1_h0_val == -65, rs2_h3_val == 4
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0006ffffffbf;  op2val:0x04fff73fffff7f
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xfffc0006ffffffbf, 0x04fff73fffff7f, x1, 128, x2)

inst_44:
// rs1_h0_val == -16385, rs2_h3_val == 64
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffcffffbfff;  op2val:0x4000020006ffdf
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xfffbfffcffffbfff, 0x4000020006ffdf, x1, 136, x2)

inst_45:
// rs1_h0_val == -4097, rs2_h2_val == 2048
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000050008efff;  op2val:0x2000080002000001
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x2000050008efff, 0x2000080002000001, x1, 144, x2)

inst_46:
// rs1_h0_val == -2049, rs1_h3_val == 16384
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000009c000f7ff;  op2val:0x2000040fffdffef
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x40000009c000f7ff, 0x2000040fffdffef, x1, 152, x2)

inst_47:
// rs1_h0_val == -257, rs2_h2_val == -2
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff3ffffeff;  op2val:0x5555fffe0004fff7
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xbfffffff3ffffeff, 0x5555fffe0004fff7, x1, 160, x2)

inst_48:
// rs1_h0_val == -33, rs1_h2_val == -9
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffff7ffffffdf;  op2val:0xffdf02000005fff7
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x3ffffff7ffffffdf, 0xffdf02000005fff7, x1, 168, x2)

inst_49:
// rs1_h0_val == -17, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff00070200ffef;  op2val:0xfffa00010006fff6
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xdfff00070200ffef, 0xfffa00010006fff6, x1, 176, x2)

inst_50:
// rs1_h0_val == -9, rs1_h1_val == -17, rs1_h3_val == 8
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x08feffffeffff7;  op2val:0x40fff600070009
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x08feffffeffff7, 0x40fff600070009, x1, 184, x2)

inst_51:
// rs1_h0_val == 8192, rs2_h0_val == 16
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffff7fffef2000;  op2val:0x80000180000010
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xbfffff7fffef2000, 0x80000180000010, x1, 192, x2)

inst_52:
// rs1_h0_val == 4096, rs1_h3_val == 1
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fffd00091000;  op2val:0x4000dfff00095555
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x01fffd00091000, 0x4000dfff00095555, x1, 200, x2)

inst_53:
// rs1_h0_val == 2048, rs1_h2_val == -513, rs2_h0_val == 256
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fdff00200800;  op2val:0xdfff200002000100
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x20fdff00200800, 0xdfff200002000100, x1, 208, x2)

inst_54:
// rs1_h0_val == 512, rs2_h0_val == -21846
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa7ffffff80200;  op2val:0x0800100008aaaa
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xaaaa7ffffff80200, 0x0800100008aaaa, x1, 216, x2)

inst_55:
// rs1_h0_val == 64, rs2_h3_val == 32
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x06fff700080040;  op2val:0x20ffdf0007ffbf
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x06fff700080040, 0x20ffdf0007ffbf, x1, 224, x2)

inst_56:
// rs1_h0_val == 4, rs1_h3_val == 16
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000500060004;  op2val:0x5555aaaa3fffc000
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x10000500060004, 0x5555aaaa3fffc000, x1, 232, x2)

inst_57:
// rs2_h1_val == 0, rs1_h2_val == -8193
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x01dfff0800aaaa;  op2val:0xfdff55550000c000
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x01dfff0800aaaa, 0xfdff55550000c000, x1, 240, x2)

inst_58:
// rs2_h0_val == -16385, rs2_h1_val == -513
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x03feff0008ffbf;  op2val:0xeffffff8fdffbfff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x03feff0008ffbf, 0xeffffff8fdffbfff, x1, 248, x2)

inst_59:
// rs2_h0_val == -8193, rs1_h1_val == 32767
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x09dfff7fff0040;  op2val:0xefff00107fffdfff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x09dfff7fff0040, 0xefff00107fffdfff, x1, 256, x2)

inst_60:
// rs2_h0_val == -4097, rs1_h2_val == -33
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffdfaaaafff6;  op2val:0xfff800104000efff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x8000ffdfaaaafff6, 0xfff800104000efff, x1, 264, x2)

inst_61:
// rs2_h0_val == -2049, rs1_h3_val == -4097, rs2_h1_val == 2048
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0009fffa0100;  op2val:0xfffff7ff0800f7ff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xefff0009fffa0100, 0xfffff7ff0800f7ff, x1, 272, x2)

inst_62:
// rs2_h0_val == -5, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fff900200003;  op2val:0xfff800037ffffffb
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xfff6fff900200003, 0xfff800037ffffffb, x1, 280, x2)

inst_63:
// rs2_h0_val == -32768, rs1_h2_val == -4097
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x100efff08000000;  op2val:0x400004008008000
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x100efff08000000, 0x400004008008000, x1, 288, x2)

inst_64:
// rs2_h0_val == 16384, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafff900100010;  op2val:0xfff9040000064000
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xaaaafff900100010, 0xfff9040000064000, x1, 296, x2)

inst_65:
// rs2_h0_val == 1024, rs1_h2_val == 16
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0010fffb8000;  op2val:0x100ffdf08000400
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xfffb0010fffb8000, 0x100ffdf08000400, x1, 304, x2)

inst_66:
// rs2_h0_val == 128, rs2_h1_val == -257, rs1_h3_val == -9
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff700060003fbff;  op2val:0xfffa2000feff0080
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xfff700060003fbff, 0xfffa2000feff0080, x1, 312, x2)

inst_67:
// rs2_h0_val == 8, rs2_h2_val == 16384, rs2_h1_val == -21846
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00010400;  op2val:0xfffa4000aaaa0008
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xffffffbf00010400, 0xfffa4000aaaa0008, x1, 320, x2)

inst_68:
// rs2_h0_val == 4, rs2_h1_val == -16385, rs2_h2_val == -1025
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff04000800fff9;  op2val:0xfff7fbffbfff0004
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xf7ff04000800fff9, 0xfff7fbffbfff0004, x1, 328, x2)

inst_69:
// rs1_h0_val == 2, rs2_h1_val == -33
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffefffe0002;  op2val:0x3fff1000ffdf0007
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xfff9fffefffe0002, 0x3fff1000ffdf0007, x1, 336, x2)

inst_70:
// rs1_h3_val == -65, rs2_h2_val == -4097
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff6fffcffff;  op2val:0xffbfefffff7f0800
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xffbffff6fffcffff, 0xffbfefffff7f0800, x1, 344, x2)

inst_71:
// rs1_h0_val == 1, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffaaaa7fff0001;  op2val:0xc000fff6fff60200
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xdfffaaaa7fff0001, 0xc000fff6fff60200, x1, 352, x2)

inst_72:
// rs1_h3_val == 64, rs2_h1_val == -2
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000070020;  op2val:0x80002000fffefff9
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x40000000070020, 0x80002000fffefff9, x1, 360, x2)

inst_73:
// rs2_h2_val == -513, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff640007fff0005;  op2val:0xaaaafdff80000008
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xfff640007fff0005, 0xaaaafdff80000008, x1, 368, x2)

inst_74:
// rs2_h2_val == -129, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000400fbff0010;  op2val:0x1000ff7f00060004
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x40000400fbff0010, 0x1000ff7f00060004, x1, 376, x2)

inst_75:
// rs1_h3_val == 4, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x04dfffffbff7ff;  op2val:0x20000803fff5555
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x04dfffffbff7ff, 0x20000803fff5555, x1, 384, x2)

inst_76:
// rs1_h3_val == 0, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffeefff;  op2val:0xfffeffefdffffffe
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x000000fffeefff, 0xfffeffefdffffffe, x1, 392, x2)

inst_77:
// rs2_h2_val == -3, rs2_h1_val == -5
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffabfff;  op2val:0xffbffffdfffbfff9
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x20000000fffabfff, 0xffbffffdfffbfff9, x1, 400, x2)

inst_78:
// rs2_h2_val == 32, rs1_h2_val == 4096, rs2_h1_val == 128
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x201000f7ff0100;  op2val:0xefff00200080c000
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x201000f7ff0100, 0xefff00200080c000, x1, 408, x2)

inst_79:
// rs2_h2_val == 0, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000027ffffff6;  op2val:0x1000008000c000
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x1000027ffffff6, 0x1000008000c000, x1, 416, x2)

inst_80:
// rs1_h2_val == -32768, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x8008000bfffffff;  op2val:0xfff6001001002000
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x8008000bfffffff, 0xfff6001001002000, x1, 424, x2)

inst_81:
// rs1_h3_val == -3, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd80004000fff7;  op2val:0x02200000010100
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xfffd80004000fff7, 0x02200000010100, x1, 432, x2)

inst_82:
// rs1_h2_val == 512, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x090200ffbf3fff;  op2val:0x1002000feffbfff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x090200ffbf3fff, 0x1002000feffbfff, x1, 440, x2)

inst_83:
// rs2_h3_val == 1, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x10ff7fffff5555;  op2val:0x01bfff0009ffdf
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x10ff7fffff5555, 0x01bfff0009ffdf, x1, 448, x2)

inst_84:
// rs2_h1_val == -2049, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000fff9fffa0005;  op2val:0xfbff0001f7fffffd
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xc000fff9fffa0005, 0xfbff0001f7fffffd, x1, 456, x2)

inst_85:
// rs1_h2_val == 128, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0080fff7fff9;  op2val:0x400000800014000
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xbfff0080fff7fff9, 0x400000800014000, x1, 464, x2)

inst_86:
// rs1_h2_val == 64, rs1_h1_val == -33
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000040ffdf7fff;  op2val:0xfffd00107fff0006
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x1000040ffdf7fff, 0xfffd00107fff0006, x1, 472, x2)

inst_87:
// rs1_h2_val == 32, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000200800fff6;  op2val:0xfffa04000000fffc
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x8000200800fff6, 0xfffa04000000fffc, x1, 480, x2)

inst_88:
// rs2_h1_val == -65, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fff9bfff5555;  op2val:0xfeffc000ffbffff8
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x80fff9bfff5555, 0xfeffc000ffbffff8, x1, 488, x2)

inst_89:
// rs1_h2_val == 1, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0001fbff0008;  op2val:0x05ffbffbffffbf
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xfffb0001fbff0008, 0x05ffbffbffffbf, x1, 496, x2)

inst_90:
// rs1_h1_val == 21845, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7f7ff5555ffff;  op2val:0x0400097fffdfff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xfff7f7ff5555ffff, 0x0400097fffdfff, x1, 504, x2)

inst_91:
// rs1_h1_val == -8193, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff7dfff2000;  op2val:0xffbf000600087fff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x4000fff7dfff2000, 0xffbf000600087fff, x1, 512, x2)

inst_92:
// rs2_h1_val == 1024, rs2_h3_val == 0
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x030009aaaafbff;  op2val:0x00800004000000
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x030009aaaafbff, 0x00800004000000, x1, 520, x2)

inst_93:
// rs1_h1_val == -513, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0040fdffefff;  op2val:0x001000fffe0009
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xfffb0040fdffefff, 0x001000fffe0009, x1, 528, x2)

inst_94:
// rs1_h3_val == -2, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffec0005555fff6;  op2val:0xff7ff7ffdffffff8
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xfffec0005555fff6, 0xff7ff7ffdffffff8, x1, 536, x2)

inst_95:
// rs2_h1_val == 64, 
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9555500028000;  op2val:0xc000fff90040ffff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xfff9555500028000, 0xc000fff90040ffff, x1, 544, x2)

inst_96:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h0_val == 1, rs2_h1_val == -9, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h3_val == -129, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h3_val == 16, rs1_h0_val == -1, rs2_h2_val == 64, rs1_h1_val == -65
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fff7fffbfffff;  op2val:0x100040fff70001
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xff7fff7fffbfffff, 0x100040fff70001, x1, 552, x2)

inst_97:
// rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -513, rs2_h1_val == 32767, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h0_val == -1025, rs1_h2_val == 4, rs1_h1_val == 32, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 0, rs1_h3_val == -32768
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000400200000;  op2val:0xfdff00407ffffbff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x8000000400200000, 0xfdff00407ffffbff, x1, 560, x2)

inst_98:
// rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val == 16384, rs2_h1_val == -1025, rs1_h1_val == 256, rs2_h0_val == -33, rs2_h2_val == 4096, rs1_h2_val == -257, rs2_h3_val == 32767
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x05feff01004000;  op2val:0x7fff1000fbffffdf
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x05feff01004000, 0x7fff1000fbffffdf, x1, 568, x2)

inst_99:
// rs2_h3_val == -16385, rs2_h0_val == 32767, rs1_h2_val == -21846, rs2_h1_val == -32768, rs2_h2_val == 1024, rs1_h1_val == -129
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7faaaaff7f4000;  op2val:0xbfff040080007fff
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0xff7faaaaff7f4000, 0xbfff040080007fff, x1, 576, x2)

inst_100:
// rs2_h3_val == -2, rs1_h0_val == -5, rs1_h3_val == 32, rs2_h1_val == -17, rs1_h2_val == 32767, rs2_h2_val == 128
// opcode: cmpeq16 ; op1:x30; op2:x29; dest:x31; op1val:0x207fff0001fffb;  op2val:0xfffe0080ffeffffc
TEST_RR_OP(cmpeq16, x31, x30, x29, 0x0000000000000000, 0x207fff0001fffb, 0xfffe0080ffeffffc, x1, 584, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x11_0:
    .fill 12*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 74*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
