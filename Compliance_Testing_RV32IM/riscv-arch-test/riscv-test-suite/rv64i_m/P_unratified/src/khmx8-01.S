
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the khmx8 instruction of the RISC-V RV64PZicsr extension for the khmx8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",khmx8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 == rd != rs2, rs1==x24, rs2==x15, rd==x24, rs1_b0_val == -128, rs1_b7_val != rs2_b7_val, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b6_val != rs2_b6_val, rs2_b3_val == -3, rs1_b6_val < 0 and rs2_b6_val < 0, rs1_b5_val != rs2_b5_val, rs1_b5_val > 0 and rs2_b5_val < 0, rs1_b4_val != rs2_b4_val, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b4_val == -128, rs1_b3_val != rs2_b3_val, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b2_val != rs2_b2_val, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val, rs2_b2_val == 1, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b0_val != rs2_b0_val, rs2_b1_val == -65, rs1_b0_val < 0 and rs2_b0_val > 0, rs2_b7_val == -128, rs2_b5_val == -128, rs1_b6_val == -17, rs2_b4_val == -17, rs1_b5_val == 127
// opcode: khmx8 ; op1:x24; op2:x15; dest:x24; op1val:0xf8ef7f80f9fa0980;  op2val:0x80fa80effd01bf05
TEST_PKRR_OP(khmx8, x24, x24, x15, 0x0000000000000000, 0xf8ef7f80f9fa0980, 0x80fa80effd01bf05, x24, x5, 0, x9)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x7, rs2==x13, rd==x12, rs1_b7_val == rs2_b7_val, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b0_val == 1, rs1_b3_val == 16, rs1_b1_val == -5, rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b4_val < 0 and rs2_b4_val > 0, rs1_b0_val == -86, rs1_b3_val > 0 and rs2_b3_val > 0
// opcode: khmx8 ; op1:x7; op2:x13; dest:x12; op1val:0xf80607fa10f8fbaa;  op2val:0xf8033f0909090301
TEST_PKRR_OP(khmx8, x12, x7, x13, 0x0000000000000000, 0xf80607fa10f8fbaa, 0xf8033f0909090301, x7, x5, 16, x9)

inst_2:
// rs1 == rs2 != rd, rs1==x12, rs2==x12, rd==x16, rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b3_val == 85, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b2_val == 2, rs2_b6_val == 127, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b6_val < 0 and rs2_b6_val > 0, rs2_b0_val == 32, rs1_b1_val == -65, rs1_b4_val == 85, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b7_val == -9, rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b2_val == -5, rs1_b3_val > 0 and rs2_b3_val < 0
// opcode: khmx8 ; op1:x12; op2:x12; dest:x16; op1val:0xf7f9fa555502bf06;  op2val:0x67f033fc0fbf820
TEST_PKRR_OP(khmx8, x16, x12, x12, 0x0000000000000000, 0xf7f9fa555502bf06, 0x67f033fc0fbf820, x12, x5, 32, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x3, rs2==x3, rd==x3, rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b2_val < 0 and rs2_b2_val < 0, rs2_b5_val == 64, rs2_b3_val == -5, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b6_val == 32, rs1_b1_val == -3, rs2_b6_val == 4, rs1_b4_val == -2, rs2_b7_val == -2, rs2_b0_val == -86
// opcode: khmx8 ; op1:x3; op2:x3; dest:x3; op1val:0x72009fe3fc0fd06;  op2val:0xfe044007fbfc03aa
TEST_PKRR_OP(khmx8, x3, x3, x3, 0x0000000000000000, 0x72009fe3fc0fd06, 0xfe044007fbfc03aa, x3, x5, 48, x9)

inst_4:
// rs2 == rd != rs1, rs1==x27, rs2==x7, rd==x7, rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b5_val == 4, rs1_b0_val == 16, rs2_b4_val == 85, rs2_b6_val == -2, rs1_b3_val == rs2_b3_val, rs1_b7_val == 16, rs2_b2_val == -2
// opcode: khmx8 ; op1:x27; op2:x7; dest:x7; op1val:0x10fc040903f63f10;  op2val:0x6fe095503fec007
TEST_PKRR_OP(khmx8, x7, x27, x7, 0x0000000000000000, 0x10fc040903f63f10, 0x6fe095503fec007, x27, x5, 64, x9)

inst_5:
// rs1==x10, rs2==x1, rd==x18, rs1_b6_val == rs2_b6_val, rs1_b7_val == 1, rs1_b3_val == -65, rs2_b3_val == -33, rs1_b5_val == 1, rs2_b1_val == 32, rs2_b7_val == -17, rs1_b4_val > 0 and rs2_b4_val < 0, rs1_b4_val == 64, rs1_b2_val == -86, rs1_b1_val == 0
// opcode: khmx8 ; op1:x10; op2:x1; dest:x18; op1val:0x1fa0140bfaa00aa;  op2val:0xeffaf8efdf3f2007
TEST_PKRR_OP(khmx8, x18, x10, x1, 0x0000000000000000, 0x1fa0140bfaa00aa, 0xeffaf8efdf3f2007, x10, x5, 80, x9)

inst_6:
// rs1==x6, rs2==x24, rd==x17, rs1_b6_val > 0 and rs2_b6_val < 0, rs2_b7_val == 4, rs2_b2_val == 4, rs2_b6_val == -86, rs1_b6_val == 127, rs2_b0_val == 0, rs2_b3_val == 1, rs2_b4_val == -9, rs1_b4_val == -3, rs2_b1_val == 1, rs1_b3_val < 0 and rs2_b3_val > 0
// opcode: khmx8 ; op1:x6; op2:x24; dest:x17; op1val:0x107f07fdc0f8f8fa;  op2val:0x4aaf8f701040100
TEST_PKRR_OP(khmx8, x17, x6, x24, 0x0000000000000000, 0x107f07fdc0f8f8fa, 0x4aaf8f701040100, x6, x5, 96, x9)

inst_7:
// rs1==x4, rs2==x31, rd==x15, rs1_b5_val == rs2_b5_val, rs2_b0_val == -17, rs1_b0_val == -9, rs1_b6_val == -33, rs2_b3_val == 32, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b7_val == 8
// opcode: khmx8 ; op1:x4; op2:x31; dest:x15; op1val:0x8df07fdc0f900f7;  op2val:0xf90907c0200106ef
TEST_PKRR_OP(khmx8, x15, x4, x31, 0x0000000000000000, 0x8df07fdc0f900f7, 0xf90907c0200106ef, x4, x5, 112, x9)

inst_8:
// rs1==x2, rs2==x11, rd==x8, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b5_val == -3, rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b2_val == 2, rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b0_val == 8, rs1_b3_val == 64, rs1_b1_val == 85, rs2_b6_val == 16, rs1_b7_val == -65, rs1_b2_val == 127, rs2_b5_val == -65
// opcode: khmx8 ; op1:x2; op2:x11; dest:x8; op1val:0xbf09fdfa407f55f8;  op2val:0xfa10bfeff8020708
TEST_PKRR_OP(khmx8, x8, x2, x11, 0x0000000000000000, 0xbf09fdfa407f55f8, 0xfa10bfeff8020708, x2, x5, 128, x9)

inst_9:
// rs1==x1, rs2==x14, rd==x2, rs1_b4_val == rs2_b4_val, rs2_b5_val == -2, rs1_b4_val == 0, rs1_b0_val == -2, rs2_b2_val == 0, rs2_b0_val == 2, rs1_b1_val == -17, rs2_b1_val == 2, rs2_b4_val == 0
// opcode: khmx8 ; op1:x1; op2:x14; dest:x2; op1val:0xf809f6000509effe;  op2val:0x6aafe00f8000202
TEST_PKRR_OP(khmx8, x2, x1, x14, 0x0000000000000000, 0xf809f6000509effe, 0x6aafe00f8000202, x1, x5, 144, x9)

inst_10:
// rs1==x22, rs2==x18, rd==x0, rs1_b2_val == rs2_b2_val, rs1_b4_val == -1, rs2_b2_val == 8, rs1_b2_val == 8, rs1_b5_val == 16, rs2_b3_val == -128, rs2_b0_val == 4, rs2_b6_val == 0, rs2_b4_val == 16, rs1_b7_val == -128, rs1_b1_val == -1
// opcode: khmx8 ; op1:x22; op2:x18; dest:x0; op1val:0x800910ffbf08fff7;  op2val:0x40005108008f804
TEST_PKRR_OP(khmx8, x0, x22, x18, 0x0000000000000000, 0x800910ffbf08fff7, 0x40005108008f804, x22, x5, 160, x9)

inst_11:
// rs1==x25, rs2==x10, rd==x20, rs1_b1_val == rs2_b1_val, rs2_b4_val == -1, rs1_b6_val == -128, rs1_b4_val == -65, rs2_b2_val == -9, rs1_b5_val == -65, rs2_b0_val == 127
// opcode: khmx8 ; op1:x25; op2:x10; dest:x20; op1val:0xc080bfbf03fcf803;  op2val:0x3c005fff8f7f87f
TEST_PKRR_OP(khmx8, x20, x25, x10, 0x0000000000000000, 0xc080bfbf03fcf803, 0x3c005fff8f7f87f, x25, x5, 176, x9)

inst_12:
// rs1==x8, rs2==x27, rd==x14, rs1_b0_val == rs2_b0_val, rs1_b3_val == -2, rs1_b0_val == 2, rs1_b6_val == 64, rs1_b7_val == -86, rs1_b1_val == 32, rs1_b5_val == -17
// opcode: khmx8 ; op1:x8; op2:x27; dest:x14; op1val:0xaa40eff8fe082002;  op2val:0xfe0740f7f801fc02
TEST_PKRR_OP(khmx8, x14, x8, x27, 0x0000000000000000, 0xaa40eff8fe082002, 0xfe0740f7f801fc02, x8, x5, 192, x9)

inst_13:
// rs1==x0, rs2==x21, rd==x27, rs2_b7_val == -86, rs2_b0_val == -33, rs2_b3_val == 85, rs1_b0_val == -3, rs2_b5_val == 8, rs1_b5_val == 0, rs2_b1_val == -9, rs1_b6_val == 2, rs1_b4_val == 32, rs1_b2_val == -5, rs2_b4_val == 1
// opcode: khmx8 ; op1:x0; op2:x21; dest:x27; op1val:0x102002040fbfcfd;  op2val:0xaafe080155f8f7df
TEST_PKRR_OP(khmx8, x27, x0, x21, 0x0000000000000000, 0x102002040fbfcfd, 0xaafe080155f8f7df, x0, x5, 208, x9)

inst_14:
// rs1==x18, rs2==x6, rd==x21, rs2_b7_val == 85, rs1_b5_val == -128, rs2_b5_val == 16, rs2_b6_val == -65, rs2_b0_val == -1, rs1_b3_val == 2, rs1_b1_val == 16, rs2_b2_val == 127
// opcode: khmx8 ; op1:x18; op2:x6; dest:x21; op1val:0x10c080fc020810f7;  op2val:0x55bf1001fc7f09ff
TEST_PKRR_OP(khmx8, x21, x18, x6, 0x0000000000000000, 0x10c080fc020810f7, 0x55bf1001fc7f09ff, x18, x5, 224, x9)

inst_15:
// rs1==x21, rs2==x8, rd==x19, rs2_b7_val == 127, rs1_b5_val == 64, rs2_b6_val == 64, rs1_b6_val == 1, rs1_b2_val == -9, rs1_b4_val == 1
// opcode: khmx8 ; op1:x21; op2:x8; dest:x19; op1val:0x3014001fcf7fff7;  op2val:0x7f40f6efdffb3f00
TEST_PKRR_OP(khmx8, x19, x21, x8, 0x0000000000000000, 0x3014001fcf7fff7, 0x7f40f6efdffb3f00, x21, x5, 240, x9)

inst_16:
// rs1==x26, rs2==x17, rd==x13, rs2_b7_val == -65, rs1_b0_val == 8, rs2_b1_val == -3, rs1_b2_val == 85, rs2_b4_val == 8, rs1_b4_val == 2, rs2_b2_val == -128
// opcode: khmx8 ; op1:x26; op2:x17; dest:x13; op1val:0xfa0280020255f908;  op2val:0xbf051008f980fd08
TEST_PKRR_OP(khmx8, x13, x26, x17, 0x0000000000000000, 0xfa0280020255f908, 0xbf051008f980fd08, x26, x5, 256, x9)

inst_17:
// rs1==x13, rs2==x26, rd==x22, rs2_b7_val == -33, rs1_b5_val == -5, rs2_b1_val == 85, rs1_b6_val == -9, rs2_b0_val == -128
// opcode: khmx8 ; op1:x13; op2:x26; dest:x22; op1val:0x5f7fbffc03f10fc;  op2val:0xdff6fa01f9095580
TEST_PKRR_OP(khmx8, x22, x13, x26, 0x0000000000000000, 0x5f7fbffc03f10fc, 0xdff6fa01f9095580, x13, x5, 272, x9)

inst_18:
// rs1==x14, rs2==x20, rd==x30, rs2_b7_val == -9, rs2_b5_val == 1, rs1_b3_val == -1, rs1_b7_val == -17
// opcode: khmx8 ; op1:x14; op2:x20; dest:x30; op1val:0xef02fa07ff07bf09;  op2val:0xf7f6010907f7f803
TEST_PKRR_OP(khmx8, x30, x14, x20, 0x0000000000000000, 0xef02fa07ff07bf09, 0xf7f6010907f7f803, x14, x5, 288, x9)

inst_19:
// rs1==x30, rs2==x19, rd==x26, rs2_b7_val == -5, rs2_b6_val == 85, rs2_b3_val == -9, rs2_b4_val == -33, rs2_b2_val == -86, rs1_b5_val == -33
// opcode: khmx8 ; op1:x30; op2:x19; dest:x26; op1val:0xfc01df0703aa0906;  op2val:0xfb5503dff7aaf7f9
TEST_PKRR_OP(khmx8, x26, x30, x19, 0x0000000000000000, 0xfc01df0703aa0906, 0xfb5503dff7aaf7f9, x30, x5, 304, x7)

inst_20:
// rs1==x15, rs2==x23, rd==x25, rs2_b7_val == -3, rs2_b0_val == -65, rs1_b0_val == -5, rs1_b6_val == 85, rs2_b5_val == 4, rs2_b6_val == -128, rs2_b2_val == -33
// opcode: khmx8 ; op1:x15; op2:x23; dest:x25; op1val:0xbf55f606f902fdfb;  op2val:0xfd8004f6f8dff8bf
TEST_PKRR_OP(khmx8, x25, x15, x23, 0x0000000000000000, 0xbf55f606f902fdfb, 0xfd8004f6f8dff8bf, x15, x5, 320, x7)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_21:
// rs1==x5, rs2==x28, rd==x10, rs2_b7_val == 64, rs1_b0_val == -33, rs1_b7_val == -1, rs2_b4_val == 127
// opcode: khmx8 ; op1:x5; op2:x28; dest:x10; op1val:0xfff8064007fbfbdf;  op2val:0x40fc067fc00602ef
TEST_PKRR_OP(khmx8, x10, x5, x28, 0x0000000000000000, 0xfff8064007fbfbdf, 0x40fc067fc00602ef, x5, x3, 0, x7)

inst_22:
// rs1==x23, rs2==x25, rd==x28, rs2_b7_val == 32, rs1_b5_val == 2, rs2_b0_val == 16, rs1_b0_val == -1
// opcode: khmx8 ; op1:x23; op2:x25; dest:x28; op1val:0xeffa020109aabfff;  op2val:0x20f8033ffbf90610
TEST_PKRR_OP(khmx8, x28, x23, x25, 0x0000000000000000, 0xeffa020109aabfff, 0x20f8033ffbf90610, x23, x3, 16, x7)

inst_23:
// rs1==x9, rs2==x29, rd==x6, rs2_b7_val == 16, rs2_b5_val == -3, rs2_b2_val == 32, rs1_b7_val == 2, rs1_b2_val == 4, rs1_b1_val == -86, rs1_b3_val == 32, rs2_b6_val == 1
// opcode: khmx8 ; op1:x9; op2:x29; dest:x6; op1val:0x2df07c02004aafe;  op2val:0x1001fd063f2009df
TEST_PKRR_OP(khmx8, x6, x9, x29, 0x0000000000000000, 0x2df07c02004aafe, 0x1001fd063f2009df, x9, x3, 32, x7)

inst_24:
// rs1==x19, rs2==x2, rd==x5, rs2_b7_val == 8, rs2_b3_val == 64, rs2_b1_val == 8
// opcode: khmx8 ; op1:x19; op2:x2; dest:x5; op1val:0x305f8f6ff03f8fa;  op2val:0x8fc3fff40aa08f9
TEST_PKRR_OP(khmx8, x5, x19, x2, 0x0000000000000000, 0x305f8f6ff03f8fa, 0x8fc3fff40aa08f9, x19, x3, 48, x7)

inst_25:
// rs1==x20, rs2==x5, rd==x29, rs2_b7_val == 2, rs1_b1_val == 4, rs1_b2_val == -17, rs2_b4_val == -3
// opcode: khmx8 ; op1:x20; op2:x5; dest:x29; op1val:0x8effd01feef0402;  op2val:0x2f804fd8080c0f6
TEST_PKRR_OP(khmx8, x29, x20, x5, 0x0000000000000000, 0x8effd01feef0402, 0x2f804fd8080c0f6, x20, x3, 64, x7)

inst_26:
// rs1==x31, rs2==x0, rd==x11, rs2_b7_val == 1, rs2_b3_val == 127, rs1_b3_val == -3, rs1_b4_val == -17, rs2_b1_val == -128, rs2_b5_val == -33, rs1_b6_val == 4, rs1_b7_val == -5, rs2_b4_val == 2, rs1_b0_val == 85
// opcode: khmx8 ; op1:x31; op2:x0; dest:x11; op1val:0xfb0404effdaafc55;  op2val:0x110df027f0180df
TEST_PKRR_OP(khmx8, x11, x31, x0, 0x0000000000000000, 0xfb0404effdaafc55, 0x110df027f0180df, x31, x3, 80, x7)

inst_27:
// rs1==x11, rs2==x16, rd==x9, rs2_b7_val == 0, rs1_b7_val == 4, rs1_b2_val == 32, rs2_b0_val == -9
// opcode: khmx8 ; op1:x11; op2:x16; dest:x9; op1val:0x47f40effc2003c0;  op2val:0xfe10ef03f9f9f7
TEST_PKRR_OP(khmx8, x9, x11, x16, 0x0000000000000000, 0x47f40effc2003c0, 0xfe10ef03f9f9f7, x11, x3, 96, x7)

inst_28:
// rs1==x28, rs2==x4, rd==x31, rs2_b7_val == -1, rs2_b2_val == -65, rs1_b1_val == -2, rs1_b2_val == 1, rs1_b0_val == 127
// opcode: khmx8 ; op1:x28; op2:x4; dest:x31; op1val:0xfc5540fef601fe7f;  op2val:0xff400909fabf09aa
TEST_PKRR_OP(khmx8, x31, x28, x4, 0x0000000000000000, 0xfc5540fef601fe7f, 0xff400909fabf09aa, x28, x3, 112, x7)

inst_29:
// rs1==x29, rs2==x9, rd==x4, rs2_b6_val == -33, rs1_b2_val == -33
// opcode: khmx8 ; op1:x29; op2:x9; dest:x4; op1val:0x3f017ff840df00fc;  op2val:0x40dfdff6dffc0620
TEST_PKRR_OP(khmx8, x4, x29, x9, 0x0000000000000000, 0x3f017ff840df00fc, 0x40dfdff6dffc0620, x29, x3, 128, x7)

inst_30:
// rs1==x17, rs2==x22, rd==x1, rs1_b5_val == -2, rs1_b0_val == 32, rs2_b5_val == 2, rs2_b6_val == -17, rs1_b3_val == 1, rs1_b7_val == 85, rs1_b4_val == 8, rs1_b2_val == -2
// opcode: khmx8 ; op1:x17; op2:x22; dest:x1; op1val:0x55fcfe0801fe2020;  op2val:0x10ef0255fbfafa08
TEST_PKRR_OP(khmx8, x1, x17, x22, 0x0000000000000000, 0x55fcfe0801fe2020, 0x10ef0255fbfafa08, x17, x3, 144, x7)

inst_31:
// rs1==x16, rs2==x30, rd==x23, rs1_b5_val == 32, rs2_b3_val == 4, rs2_b6_val == -5
// opcode: khmx8 ; op1:x16; op2:x30; dest:x23; op1val:0x100520f8f605f955;  op2val:0xfffbf6fa0406f8bf
TEST_PKRR_OP(khmx8, x23, x16, x30, 0x0000000000000000, 0x100520f8f605f955, 0xfffbf6fa0406f8bf, x16, x3, 160, x7)

inst_32:
// rs1_b5_val == 8, rs1_b3_val == 8, rs2_b3_val == 2, rs1_b6_val == 8, rs1_b4_val == -5, rs1_b7_val == -33, rs2_b6_val == -1, rs2_b2_val == -3
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf0808fb08fafe07;  op2val:0x9ff10c002fdfcf6
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xdf0808fb08fafe07, 0x9ff10c002fdfcf6, x30, x3, 176, x7)

inst_33:
// rs1_b5_val == -1, rs1_b7_val == -2, rs2_b0_val == -2, rs2_b1_val == -17, rs1_b6_val == 0
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe00fffa0755aac0;  op2val:0xef3f05ff0408effe
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xfe00fffa0755aac0, 0xef3f05ff0408effe, x30, x3, 192, x7)

inst_34:
// rs1_b4_val == -86, rs1_b7_val == 127, rs1_b2_val == -3, rs2_b4_val == -2
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f0505aa55fd00df;  op2val:0xc0ef07fe09f9f8ef
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x7f0505aa55fd00df, 0xc0ef07fe09f9f8ef, x30, x3, 208, x7)

inst_35:
// rs1_b4_val == 127, rs2_b5_val == -5, rs1_b6_val == -86, rs1_b3_val == -9, rs2_b3_val == -2, rs2_b6_val == 32
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x9aafd7ff7013ff6;  op2val:0x520fb01fef78008
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x9aafd7ff7013ff6, 0x520fb01fef78008, x30, x3, 224, x7)

inst_36:
// rs1_b4_val == -33, rs2_b4_val == -86, rs2_b6_val == -3
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfff608df07efeffd;  op2val:0x80fdfdaa0708f6df
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xfff608df07efeffd, 0x80fdfdaa0708f6df, x30, x3, 240, x7)

inst_37:
// rs1_b4_val == -9, rs1_b6_val == -1, rs2_b3_val == 16, rs1_b1_val == 8
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0fffff7ff0408fa;  op2val:0x7fc80f61007fa3f
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xc0fffff7ff0408fa, 0x7fc80f61007fa3f, x30, x3, 256, x7)

inst_38:
// rs1_b4_val == 16, rs2_b4_val == -65, rs1_b3_val == -33, rs1_b0_val == 64
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x9404010df040440;  op2val:0x90505bf0307f700
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x9404010df040440, 0x90505bf0307f700, x30, x3, 272, x7)

inst_39:
// rs1_b4_val == 4, rs1_b3_val == 0, rs2_b3_val == 8
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x6f67f040020bf08;  op2val:0xaa070707080302fa
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x6f67f040020bf08, 0xaa070707080302fa, x30, x3, 288, x7)

inst_40:
// rs1_b3_val == -86, rs1_b0_val == 4, rs2_b5_val == -17
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x604fa00aa01f904;  op2val:0x3f3fef07073ff801
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x604fa00aa01f904, 0x3f3fef07073ff801, x30, x3, 304, x7)

inst_41:
// rs1_b3_val == 127, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x1c0fe077f3f0804;  op2val:0x7ff805fe20c008f6
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x1c0fe077f3f0804, 0x7ff805fe20c008f6, x30, x3, 320, x7)

inst_42:
// rs1_b3_val == -17, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfef8fb20eff906aa;  op2val:0xef1080f61004f7c0
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xfef8fb20eff906aa, 0xef1080f61004f7c0, x30, x3, 336, x7)

inst_43:
// rs1_b3_val == -5, rs2_b5_val == 32, rs1_b5_val == -9
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfc08f710fb200009;  op2val:0x80f62008fe3f07f7
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xfc08f710fb200009, 0x80f62008fe3f07f7, x30, x3, 352, x7)

inst_44:
// rs1_b3_val == -128, rs2_b1_val == -33
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x55ff800080feefdf;  op2val:0xfffc8055fe20df08
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x55ff800080feefdf, 0xfffc8055fe20df08, x30, x3, 368, x7)

inst_45:
// rs1_b3_val == 4, rs2_b0_val == -5
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfcef803f0409aaf9;  op2val:0x7ff6047f207f09fb
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xfcef803f0409aaf9, 0x7ff6047f207f09fb, x30, x3, 384, x7)

inst_46:
// rs1_b2_val == -65, rs2_b5_val == 127, rs2_b6_val == -9
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x8f6fd0355bffc40;  op2val:0xf7f77fc07ffd20df
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x8f6fd0355bffc40, 0xf7f77fc07ffd20df, x30, x3, 400, x7)

inst_47:
// rs2_b3_val == -86, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x30507dffd203fdf;  op2val:0x6aa1008aaaa08ef
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x30507dffd203fdf, 0x6aa1008aaaa08ef, x30, x3, 416, x7)

inst_48:
// rs2_b3_val == -65, rs2_b1_val == 64, rs1_b1_val == -33
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x5f67f55fdaadf08;  op2val:0xfdfefdbf0940fe
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x5f67f55fdaadf08, 0xfdfefdbf0940fe, x30, x3, 432, x7)

inst_49:
// rs2_b3_val == -17, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa80fcc0f7df0320;  op2val:0xf9fcbf03ef8020df
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xaa80fcc0f7df0320, 0xf9fcbf03ef8020df, x30, x3, 448, x7)

inst_50:
// rs2_b3_val == 0, rs1_b2_val == 64, rs1_b7_val == 0
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x090109fe40fb20;  op2val:0xfdfe07fe007fbf7f
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x090109fe40fb20, 0xfdfe07fe007fbf7f, x30, x3, 464, x7)

inst_51:
// rs2_b3_val == -1, rs2_b5_val == 85
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa3ff8fefe09df04;  op2val:0x91055dfff7f05c0
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xfa3ff8fefe09df04, 0x91055dfff7f05c0, x30, x3, 480, x7)

inst_52:
// rs2_b2_val == 85, rs1_b7_val == -3
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdf706043ffaf9f8;  op2val:0x9f82008f755f8f7
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xfdf706043ffaf9f8, 0x9f82008f755f8f7, x30, x3, 496, x7)

inst_53:
// rs2_b2_val == -17, rs1_b2_val == -1, rs2_b1_val == 0
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8fadf7f09fffd09;  op2val:0x097ffafcef007f
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xf8fadf7f09fffd09, 0x097ffafcef007f, x30, x3, 512, x7)

inst_54:
// rs2_b2_val == 64, rs2_b4_val == 64
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x8000720fff83ff7;  op2val:0x2061040c040effc
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x8000720fff83ff7, 0x2061040c040effc, x30, x3, 528, x7)

inst_55:
// rs2_b2_val == 16, rs1_b2_val == 16, rs1_b7_val == 64, rs2_b1_val == -1
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x40dffdf9fb10fa40;  op2val:0xff7f063ff810ffaa
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x40dffdf9fb10fa40, 0xff7f063ff810ffaa, x30, x3, 544, x7)

inst_56:
// rs2_b2_val == -1, rs1_b0_val == 0
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xff020207f809c000;  op2val:0xbff6fc10ffffdf04
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xff020207f809c000, 0xbff6fc10ffffdf04, x30, x3, 560, x7)

inst_57:
// rs2_b1_val == -86, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x1f9053ff7bfff05;  op2val:0x2fc7ff707fbaa02
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x1f9053ff7bfff05, 0x2fc7ff707fbaa02, x30, x3, 576, x7)

inst_58:
// rs2_b1_val == 127, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa000508030704fa;  op2val:0x7fbf6df80047f3f
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xaa000508030704fa, 0x7fbf6df80047f3f, x30, x3, 592, x7)

inst_59:
// rs2_b1_val == -5, rs1_b0_val == -65, rs1_b1_val == 127, rs1_b6_val == -3
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x3fdfeaa03017fbf;  op2val:0x7f0901fffafcfb3f
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x3fdfeaa03017fbf, 0x7f0901fffafcfb3f, x30, x3, 608, x7)

inst_60:
// rs2_b1_val == -2, rs1_b6_val == 16
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xf810087ffafe20fa;  op2val:0x40000602dfdffeaa
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xf810087ffafe20fa, 0x40000602dfdffeaa, x30, x3, 624, x7)

inst_61:
// rs2_b0_val == -3, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa10fb2010f9eff7;  op2val:0xaa06fcfcfc2003fd
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xfa10fb2010f9eff7, 0xaa06fcfcfc2003fd, x30, x3, 640, x7)

inst_62:
// rs1_b2_val == 0, rs2_b4_val == 4
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa40ef3f3f0020aa;  op2val:0x6c0df04fefc0705
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xaa40ef3f3f0020aa, 0x6c0df04fefc0705, x30, x3, 656, x7)

inst_63:
// rs2_b0_val == 64, rs2_b4_val == 32, rs1_b5_val == 85, rs1_b0_val == 1
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xef805508fefcf601;  op2val:0xf700bf20fafcfa40
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xef805508fefcf601, 0xf700bf20fafcfa40, x30, x3, 672, x7)

inst_64:
// rs1_b1_val == -9, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x800309dfdf05f705;  op2val:0x47f103f05bf0506
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x800309dfdf05f705, 0x47f103f05bf0506, x30, x3, 688, x7)

inst_65:
// rs2_b6_val == 8, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xff55080502fa093f;  op2val:0x5508fa7ff60000f9
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xff55080502fa093f, 0x5508fa7ff60000f9, x30, x3, 704, x7)

inst_66:
// rs1_b1_val == -128, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffc40400180f8;  op2val:0xfafac0fefadfefef
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xf7fffc40400180f8, 0xfafac0fefadfefef, x30, x3, 720, x7)

inst_67:
// rs1_b1_val == 64, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x780fc207f054007;  op2val:0xfcff7f06c08020fc
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x780fc207f054007, 0xfcff7f06c08020fc, x30, x3, 736, x7)

inst_68:
// rs2_b6_val == 2, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd40bf807f3f0009;  op2val:0x902bf02aa08fff7
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xfd40bf807f3f0009, 0x902bf02aa08fff7, x30, x3, 752, x7)

inst_69:
// rs2_b5_val == -86, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x80f707fc3f7fbf09;  op2val:0x10ffaa0904aa06f6
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x80f707fc3f7fbf09, 0x10ffaa0904aa06f6, x30, x3, 768, x7)

inst_70:
// rs1_b1_val == 2, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x500050040fa02c0;  op2val:0x80f955fc02010009
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x500050040fa02c0, 0x80f955fc02010009, x30, x3, 784, x7)

inst_71:
// rs1_b1_val == 1, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x3fd02fe40f701fe;  op2val:0x3f10400007f70606
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x3fd02fe40f701fe, 0x3f10400007f70606, x30, x3, 800, x7)

inst_72:
// rs1_b0_val == -17, rs1_b5_val == -86
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xf620aabf0409dfef;  op2val:0x3f013f09f8aa2020
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xf620aabf0409dfef, 0x3f013f09f8aa2020, x30, x3, 816, x7)

inst_73:
// rs1_b6_val == -65, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x3fbff9ff3ff9df10;  op2val:0x2ff03020309f8f7
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x3fbff9ff3ff9df10, 0x2ff03020309f8f7, x30, x3, 832, x7)

inst_74:
// rs1_b2_val == -128, rs2_b4_val == -128
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xc00602efbf808006;  op2val:0x2f60480dfeffac0
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xc00602efbf808006, 0x2f60480dfeffac0, x30, x3, 848, x7)

inst_75:
// rs2_b5_val == 0, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x10efbf3f08aafb09;  op2val:0x8ef0004effac009
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x10efbf3f08aafb09, 0x8ef0004effac009, x30, x3, 864, x7)

inst_76:
// rs2_b5_val == -1, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfcaa3f00fc0440f6;  op2val:0x310ff0910f7fffe
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xfcaa3f00fc0440f6, 0x310ff0910f7fffe, x30, x3, 880, x7)

inst_77:
// rs1_b6_val == -5, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfcfb03df7f0409f8;  op2val:0x550100fdfa01aaaa
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xfcfb03df7f0409f8, 0x550100fdfa01aaaa, x30, x3, 896, x7)

inst_78:
// rs2_b4_val == -5, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xbffadffdfdf9fffa;  op2val:0x704aafb103f053f
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xbffadffdfdf9fffa, 0x704aafb103f053f, x30, x3, 912, x7)

inst_79:
// rs2_b1_val == 16, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe3f1008554040bf;  op2val:0xfdf60203093f10ff
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xfe3f1008554040bf, 0xfdf60203093f10ff, x30, x3, 928, x7)

inst_80:
// rs2_b1_val == 4, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x40610047f080700;  op2val:0xfd01ef017fbf04f8
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x40610047f080700, 0xfd01ef017fbf04f8, x30, x3, 944, x7)

inst_81:
// rs2_b5_val == -9, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x27ffa06aa0705f7;  op2val:0xeffef7fafd20fbfc
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x27ffa06aa0705f7, 0xeffef7fafd20fbfc, x30, x3, 960, x7)

inst_82:
// rs1_b7_val == 32, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x2002f708faf90708;  op2val:0x203028003c0f6f6
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x2002f708faf90708, 0x203028003c0f6f6, x30, x3, 976, x7)

inst_83:
// rs2_b0_val == 85, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x508fa01fcef0209;  op2val:0x7070105aafbf655
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x508fa01fcef0209, 0x7070105aafbf655, x30, x3, 992, x7)

inst_84:
// rs1_b6_val == -2, 
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0fef905085540c0;  op2val:0x520f8effff6057f
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xc0fef905085540c0, 0x520f8effff6057f, x30, x3, 1008, x7)

inst_85:
// rs2_b7_val == -86, rs2_b0_val == -33, rs2_b3_val == 85, rs1_b0_val == -3, rs2_b5_val == 8, rs1_b5_val == 0, rs2_b1_val == -9, rs1_b6_val == 2, rs1_b4_val == 32, rs1_b2_val == -5, rs2_b4_val == 1
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0x102002040fbfcfd;  op2val:0xaafe080155f8f7df
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0x102002040fbfcfd, 0xaafe080155f8f7df, x30, x3, 1024, x7)

inst_86:
// rs2_b7_val == 1, rs2_b3_val == 127, rs1_b3_val == -3, rs1_b4_val == -17, rs2_b1_val == -128, rs2_b5_val == -33, rs1_b6_val == 4, rs1_b7_val == -5, rs2_b4_val == 2, rs1_b0_val == 85
// opcode: khmx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb0404effdaafc55;  op2val:0x110df027f0180df
TEST_PKRR_OP(khmx8, x31, x30, x29, 0x0000000000000000, 0xfb0404effdaafc55, 0x110df027f0180df, x30, x3, 1040, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 42*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 132*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
