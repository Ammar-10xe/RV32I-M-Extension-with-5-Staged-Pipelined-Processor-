
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmaxda instruction of the RISC-V RV64PZicsr extension for the kmaxda covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmaxda)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x16,signature_x16_1)

inst_0:
// rs1 == rd != rs2, rs1==x14, rs2==x0, rd==x14, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 2048, rs2_h2_val == -513, rs1_h2_val != rs2_h2_val, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h3_val == -1, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0
// opcode: kmaxda ; op1:x14; op2:x0; dest:x14; op1val:0xffff0800fff88000;  op2val:0x06fdfffff6fff8
TEST_PKRR_OP(kmaxda, x14, x14, x0, 0x0000000000000000, 0xffff0800fff88000, 0x06fdfffff6fff8, x14, x16, 0, x21)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x13, rs2==x18, rd==x22, rs1_h3_val == rs2_h3_val, rs2_h0_val == 32, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val == 1024, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == -9, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -257, rs2_h2_val == 2
// opcode: kmaxda ; op1:x13; op2:x18; dest:x22; op1val:0xfff90400feffc000;  op2val:0xfff90002fff70020
TEST_PKRR_OP(kmaxda, x22, x13, x18, 0x0000000000000000, 0xfff90400feffc000, 0xfff90002fff70020, x13, x16, 16, x21)

inst_2:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x3, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val == 16384, rs2_h3_val == -257, rs2_h2_val == -4097, rs1_h3_val == 256, rs1_h1_val == 2048, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -17, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: kmaxda ; op1:x26; op2:x26; dest:x3; op1val:0x100400008000003;  op2val:0xfeffeffffff8ffef
TEST_PKRR_OP(kmaxda, x3, x26, x26, 0x0000000000000000, 0x100400008000003, 0xfeffeffffff8ffef, x26, x16, 32, x21)

inst_3:
// rs1 == rs2 == rd, rs1==x19, rs2==x19, rd==x19, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 8, rs2_h0_val == -16385, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val == 256, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 128
// opcode: kmaxda ; op1:x19; op2:x19; dest:x19; op1val:0x08fff801000007;  op2val:0x0500070080bfff
TEST_PKRR_OP(kmaxda, x19, x19, x19, 0x0000000000000000, 0x08fff801000007, 0x0500070080bfff, x19, x16, 48, x21)

inst_4:
// rs2 == rd != rs1, rs1==x10, rs2==x13, rd==x13, rs1_h2_val == rs2_h2_val, rs2_h0_val == 16, rs2_h3_val == -33, rs1_h3_val == 16, rs1_h1_val == 8192, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h2_val == -32768, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == -32768
// opcode: kmaxda ; op1:x10; op2:x13; dest:x13; op1val:0x10800020000006;  op2val:0xffdf80003fff0010
TEST_PKRR_OP(kmaxda, x13, x10, x13, 0x0000000000000000, 0x10800020000006, 0xffdf80003fff0010, x10, x16, 64, x21)

inst_5:
// rs1==x1, rs2==x23, rd==x4, rs1_h1_val == rs2_h1_val, rs2_h1_val == 2, rs2_h3_val == -3, rs2_h2_val == -2, rs1_h1_val == 2, rs1_h3_val == -3, rs1_h0_val == -257
// opcode: kmaxda ; op1:x1; op2:x23; dest:x4; op1val:0xfffdfff60002feff;  op2val:0xfffdfffe00020010
TEST_PKRR_OP(kmaxda, x4, x1, x23, 0x0000000000000000, 0xfffdfff60002feff, 0xfffdfffe00020010, x1, x16, 80, x21)

inst_6:
// rs1==x7, rs2==x8, rd==x6, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h1_val == 1024, rs1_h1_val == -513
// opcode: kmaxda ; op1:x7; op2:x8; dest:x6; op1val:0xfffa0009fdff0009;  op2val:0xc000000704003fff
TEST_PKRR_OP(kmaxda, x6, x7, x8, 0x0000000000000000, 0xfffa0009fdff0009, 0xc000000704003fff, x7, x16, 96, x21)

inst_7:
// rs1==x27, rs2==x28, rd==x17, rs1_h0_val == rs2_h0_val, rs1_h2_val == 128, rs1_h0_val == 1024, rs1_h1_val == 8, rs1_h3_val == -33, rs2_h3_val == 32767, rs2_h0_val == 1024, rs2_h1_val == 16
// opcode: kmaxda ; op1:x27; op2:x28; dest:x17; op1val:0xffdf008000080400;  op2val:0x7fff000600100400
TEST_PKRR_OP(kmaxda, x17, x27, x28, 0x0000000000000000, 0xffdf008000080400, 0x7fff000600100400, x27, x16, 112, x21)

inst_8:
// rs1==x28, rs2==x29, rd==x10, rs2_h3_val == -21846, rs1_h2_val == -65, rs1_h1_val == 0, rs2_h1_val == -129, rs1_h0_val == 512
// opcode: kmaxda ; op1:x28; op2:x29; dest:x10; op1val:0xffffffbf00000200;  op2val:0xaaaafffeff7f0400
TEST_PKRR_OP(kmaxda, x10, x28, x29, 0x0000000000000000, 0xffffffbf00000200, 0xaaaafffeff7f0400, x28, x16, 128, x21)

inst_9:
// rs1==x2, rs2==x5, rd==x20, rs2_h3_val == 21845, rs1_h0_val == 8192, rs2_h1_val == 0, rs1_h1_val == 64, rs1_h2_val == 0
// opcode: kmaxda ; op1:x2; op2:x5; dest:x20; op1val:0xfff9000000402000;  op2val:0x555500070000fffc
TEST_PKRR_OP(kmaxda, x20, x2, x5, 0x0000000000000000, 0xfff9000000402000, 0x555500070000fffc, x2, x16, 144, x21)

inst_10:
// rs1==x24, rs2==x15, rd==x7, rs2_h3_val == -16385, rs2_h2_val == -2049, rs2_h0_val == -1, rs1_h1_val == 1024, rs1_h0_val == -21846, rs1_h2_val == -9
// opcode: kmaxda ; op1:x24; op2:x15; dest:x7; op1val:0xc000fff70400aaaa;  op2val:0xbffff7ffc000ffff
TEST_PKRR_OP(kmaxda, x7, x24, x15, 0x0000000000000000, 0xc000fff70400aaaa, 0xbffff7ffc000ffff, x24, x16, 160, x21)

inst_11:
// rs1==x20, rs2==x12, rd==x0, rs2_h3_val == -8193, rs1_h3_val == -1025, rs1_h2_val == 64, rs1_h0_val == 256, rs2_h2_val == 1
// opcode: kmaxda ; op1:x20; op2:x12; dest:x0; op1val:0xfbff0040fff60100;  op2val:0xdfff0001fff73fff
TEST_PKRR_OP(kmaxda, x0, x20, x12, 0x0000000000000000, 0xfbff0040fff60100, 0xdfff0001fff73fff, x20, x16, 176, x21)

inst_12:
// rs1==x8, rs2==x2, rd==x25, rs2_h3_val == -4097, rs2_h1_val == -513, rs1_h2_val == -257, rs2_h0_val == 16384, rs1_h1_val == -33, rs1_h3_val == -5
// opcode: kmaxda ; op1:x8; op2:x2; dest:x25; op1val:0xfffbfeffffdffff8;  op2val:0xefff0006fdff4000
TEST_PKRR_OP(kmaxda, x25, x8, x2, 0x0000000000000000, 0xfffbfeffffdffff8, 0xefff0006fdff4000, x8, x16, 192, x21)

inst_13:
// rs1==x23, rs2==x9, rd==x11, rs2_h3_val == -2049, rs1_h3_val == 512, rs2_h1_val == 8192, rs1_h1_val == -2049
// opcode: kmaxda ; op1:x23; op2:x9; dest:x11; op1val:0x2000400f7fffff6;  op2val:0xf7ff00092000fff9
TEST_PKRR_OP(kmaxda, x11, x23, x9, 0x0000000000000000, 0x2000400f7fffff6, 0xf7ff00092000fff9, x23, x16, 208, x21)
RVTEST_SIGBASE(x13,signature_x13_0)

inst_14:
// rs1==x11, rs2==x7, rd==x9, rs2_h3_val == -1025, rs2_h2_val == -8193, rs1_h3_val == 64, rs1_h2_val == 32, rs1_h1_val == -16385, rs1_h0_val == -16385, rs2_h0_val == 512
// opcode: kmaxda ; op1:x11; op2:x7; dest:x9; op1val:0x400020bfffbfff;  op2val:0xfbffdfff00070200
TEST_PKRR_OP(kmaxda, x9, x11, x7, 0x0000000000000000, 0x400020bfffbfff, 0xfbffdfff00070200, x11, x13, 0, x14)

inst_15:
// rs1==x0, rs2==x22, rd==x27, rs2_h3_val == -513, rs1_h1_val == -32768, rs1_h0_val == -8193, rs2_h2_val == 2048
// opcode: kmaxda ; op1:x0; op2:x22; dest:x27; op1val:0xfffd40008000dfff;  op2val:0xfdff0800fff6fff6
TEST_PKRR_OP(kmaxda, x27, x0, x22, 0x0000000000000000, 0xfffd40008000dfff, 0xfdff0800fff6fff6, x0, x13, 16, x14)

inst_16:
// rs1==x22, rs2==x3, rd==x29, rs2_h3_val == -129, rs1_h2_val == 4096, rs1_h3_val == 128, rs2_h2_val == -65, rs2_h1_val == -17, rs2_h0_val == 8192, rs1_h1_val == -129, rs1_h0_val == -129
// opcode: kmaxda ; op1:x22; op2:x3; dest:x29; op1val:0x801000ff7fff7f;  op2val:0xff7fffbfffef2000
TEST_PKRR_OP(kmaxda, x29, x22, x3, 0x0000000000000000, 0x801000ff7fff7f, 0xff7fffbfffef2000, x22, x13, 32, x14)

inst_17:
// rs1==x12, rs2==x16, rd==x24, rs2_h3_val == -65, rs2_h0_val == -4097, rs1_h0_val == -3, rs1_h1_val == -17
// opcode: kmaxda ; op1:x12; op2:x16; dest:x24; op1val:0xc000fff7ffeffffd;  op2val:0xffbf00090010efff
TEST_PKRR_OP(kmaxda, x24, x12, x16, 0x0000000000000000, 0xc000fff7ffeffffd, 0xffbf00090010efff, x12, x13, 48, x14)

inst_18:
// rs1==x3, rs2==x17, rd==x1, rs2_h3_val == -17, rs1_h0_val == 32767, rs1_h3_val == -4097, rs2_h1_val == -3, rs1_h2_val == -4097, rs2_h0_val == -32768, rs1_h1_val == -65
// opcode: kmaxda ; op1:x3; op2:x17; dest:x1; op1val:0xefffefffffbf7fff;  op2val:0xffef0007fffd8000
TEST_PKRR_OP(kmaxda, x1, x3, x17, 0x0000000000000000, 0xefffefffffbf7fff, 0xffef0007fffd8000, x3, x13, 64, x14)

inst_19:
// rs1==x6, rs2==x4, rd==x8, rs2_h3_val == -9, rs1_h3_val == -21846, rs2_h1_val == 2048, rs1_h0_val == -1025, rs2_h2_val == 0
// opcode: kmaxda ; op1:x6; op2:x4; dest:x8; op1val:0xaaaa40008000fbff;  op2val:0xfff700000800ffff
TEST_PKRR_OP(kmaxda, x8, x6, x4, 0x0000000000000000, 0xaaaa40008000fbff, 0xfff700000800ffff, x6, x13, 80, x14)

inst_20:
// rs1==x18, rs2==x25, rd==x30, rs2_h3_val == -5, rs1_h0_val == 16, rs2_h2_val == -129
// opcode: kmaxda ; op1:x18; op2:x25; dest:x30; op1val:0x08fffcff7f0010;  op2val:0xfffbff7fff7f0003
TEST_PKRR_OP(kmaxda, x30, x18, x25, 0x0000000000000000, 0x08fffcff7f0010, 0xfffbff7fff7f0003, x18, x13, 96, x14)

inst_21:
// rs1==x15, rs2==x31, rd==x18, rs2_h3_val == -2, rs1_h1_val == -3, rs2_h1_val == -16385, rs2_h2_val == -5, rs1_h2_val == -16385, rs1_h0_val == 1, rs2_h0_val == 128
// opcode: kmaxda ; op1:x15; op2:x31; dest:x18; op1val:0xfff8bffffffd0001;  op2val:0xfffefffbbfff0080
TEST_PKRR_OP(kmaxda, x18, x15, x31, 0x0000000000000000, 0xfff8bffffffd0001, 0xfffefffbbfff0080, x15, x13, 112, x14)

inst_22:
// rs1==x21, rs2==x20, rd==x31, rs2_h3_val == -32768, rs2_h2_val == 64, rs1_h0_val == -4097, rs2_h1_val == 64, rs2_h0_val == 0
// opcode: kmaxda ; op1:x21; op2:x20; dest:x31; op1val:0xfbffc000ff7fefff;  op2val:0x8000004000400000
TEST_PKRR_OP(kmaxda, x31, x21, x20, 0x0000000000000000, 0xfbffc000ff7fefff, 0x8000004000400000, x21, x13, 128, x14)

inst_23:
// rs1==x31, rs2==x10, rd==x21, rs2_h3_val == 16384, rs1_h0_val == -65, rs1_h1_val == 16384
// opcode: kmaxda ; op1:x31; op2:x10; dest:x21; op1val:0x10000804000ffbf;  op2val:0x4000fdfffff64000
TEST_PKRR_OP(kmaxda, x21, x31, x10, 0x0000000000000000, 0x10000804000ffbf, 0x4000fdfffff64000, x31, x13, 144, x14)

inst_24:
// rs1==x16, rs2==x30, rd==x15, rs2_h3_val == 8192, rs1_h1_val == -1025, rs2_h1_val == 32767, rs2_h2_val == 4, rs1_h3_val == -17
// opcode: kmaxda ; op1:x16; op2:x30; dest:x15; op1val:0xffefc000fbffdfff;  op2val:0x200000047ffffffc
TEST_PKRR_OP(kmaxda, x15, x16, x30, 0x0000000000000000, 0xffefc000fbffdfff, 0x200000047ffffffc, x16, x13, 160, x14)

inst_25:
// rs1==x4, rs2==x1, rd==x16, rs2_h3_val == 4096, rs1_h0_val == 21845, rs1_h2_val == 1, rs1_h1_val == 16
// opcode: kmaxda ; op1:x4; op2:x1; dest:x16; op1val:0xffdf000100105555;  op2val:0x1000fffa08000400
TEST_PKRR_OP(kmaxda, x16, x4, x1, 0x0000000000000000, 0xffdf000100105555, 0x1000fffa08000400, x4, x13, 176, x14)

inst_26:
// rs1==x17, rs2==x24, rd==x28, rs2_h3_val == 2048, rs1_h0_val == 4, rs1_h1_val == -2, rs1_h3_val == -32768, rs2_h0_val == -257
// opcode: kmaxda ; op1:x17; op2:x24; dest:x28; op1val:0x8000fff8fffe0004;  op2val:0x800fff9fdfffeff
TEST_PKRR_OP(kmaxda, x28, x17, x24, 0x0000000000000000, 0x8000fff8fffe0004, 0x800fff9fdfffeff, x17, x13, 192, x14)

inst_27:
// rs1==x5, rs2==x21, rd==x2, rs2_h3_val == 1024, rs1_h3_val == 1024, rs2_h1_val == -21846, rs1_h1_val == 512, rs2_h0_val == -5, rs1_h0_val == -513
// opcode: kmaxda ; op1:x5; op2:x21; dest:x2; op1val:0x40000060200fdff;  op2val:0x400fffbaaaafffb
TEST_PKRR_OP(kmaxda, x2, x5, x21, 0x0000000000000000, 0x40000060200fdff, 0x400fffbaaaafffb, x5, x13, 208, x14)

inst_28:
// rs1==x25, rs2==x14, rd==x26, rs2_h3_val == 512, rs2_h1_val == -2049, rs2_h0_val == -8193, rs1_h3_val == 21845, rs2_h2_val == 512, rs1_h1_val == -4097
// opcode: kmaxda ; op1:x25; op2:x14; dest:x26; op1val:0x5555fffcefff7fff;  op2val:0x2000200f7ffdfff
TEST_PKRR_OP(kmaxda, x26, x25, x14, 0x0000000000000000, 0x5555fffcefff7fff, 0x2000200f7ffdfff, x25, x13, 224, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x9, rs2==x27, rd==x12, rs2_h3_val == 256, rs2_h1_val == 32
// opcode: kmaxda ; op1:x9; op2:x27; dest:x12; op1val:0xffdf3fff2000feff;  op2val:0x100fff80020ffff
TEST_PKRR_OP(kmaxda, x12, x9, x27, 0x0000000000000000, 0xffdf3fff2000feff, 0x100fff80020ffff, x9, x1, 0, x2)

inst_30:
// rs1==x30, rs2==x11, rd==x23, rs2_h3_val == 128, rs1_h1_val == 4, rs2_h2_val == 32, rs2_h1_val == -2, rs1_h3_val == 2048
// opcode: kmaxda ; op1:x30; op2:x11; dest:x23; op1val:0x800400000040001;  op2val:0x800020fffe0003
TEST_PKRR_OP(kmaxda, x23, x30, x11, 0x0000000000000000, 0x800400000040001, 0x800020fffe0003, x30, x1, 16, x2)

inst_31:
// rs1==x29, rs2==x6, rd==x5, rs2_h3_val == 64, rs1_h2_val == -513, rs2_h2_val == -21846, rs1_h3_val == 8192
// opcode: kmaxda ; op1:x29; op2:x6; dest:x5; op1val:0x2000fdffc0007fff;  op2val:0x40aaaafdffefff
TEST_PKRR_OP(kmaxda, x5, x29, x6, 0x0000000000000000, 0x2000fdffc0007fff, 0x40aaaafdffefff, x29, x1, 32, x2)

inst_32:
// rs2_h3_val == 32, rs2_h1_val == -1025, rs2_h0_val == -9, rs1_h3_val == -16385, rs1_h2_val == -3
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffdffbf0100;  op2val:0x20fff6fbfffff7
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xbffffffdffbf0100, 0x20fff6fbfffff7, x30, x1, 48, x2)

inst_33:
// rs1_h1_val == -5, rs2_h2_val == -33, rs1_h3_val == -65, rs1_h2_val == -129
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xffbfff7ffffb0005;  op2val:0xfff8ffdfff7f0200
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xffbfff7ffffb0005, 0xfff8ffdfff7f0200, x30, x1, 64, x2)

inst_34:
// rs1_h1_val == 4096, rs2_h2_val == 4096, rs1_h2_val == -2, rs2_h1_val == 8
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffe10000400;  op2val:0xbfff100000080003
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfffdfffe10000400, 0xbfff100000080003, x30, x1, 80, x2)

inst_35:
// rs1_h1_val == 128, rs2_h0_val == -2049, rs2_h1_val == -8193
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x800bfff00800003;  op2val:0x200aaaadffff7ff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x800bfff00800003, 0x200aaaadffff7ff, x30, x1, 96, x2)

inst_36:
// rs1_h1_val == 32, rs1_h0_val == 32, rs2_h2_val == 21845
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x40000100200020;  op2val:0xffbf55553fff3fff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x40000100200020, 0xffbf55553fff3fff, x30, x1, 112, x2)

inst_37:
// rs1_h1_val == 1, rs1_h2_val == 8192, rs2_h0_val == -21846, rs1_h3_val == -2049
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff200000010009;  op2val:0x5555ffdf0008aaaa
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xf7ff200000010009, 0x5555ffdf0008aaaa, x30, x1, 128, x2)

inst_38:
// rs1_h1_val == -1, rs2_h0_val == 64, rs1_h3_val == 0, rs1_h2_val == 512
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x000200fffffffc;  op2val:0xeffffff8ff7f0040
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x000200fffffffc, 0xeffffff8ff7f0040, x30, x1, 144, x2)

inst_39:
// rs1_h0_val == -2049, rs1_h2_val == -33, rs2_h1_val == 21845
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xffefffdffffcf7ff;  op2val:0xfff73fff55550200
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xffefffdffffcf7ff, 0xfff73fff55550200, x30, x1, 160, x2)

inst_40:
// rs1_h0_val == -33, rs1_h1_val == 21845, rs2_h0_val == 8
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa00205555ffdf;  op2val:0xfdfffdfffffe0008
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xaaaa00205555ffdf, 0xfdfffdfffffe0008, x30, x1, 176, x2)

inst_41:
// rs1_h0_val == -17, rs2_h2_val == 8192, rs1_h1_val == -21846, rs1_h2_val == 21845, rs2_h3_val == 16
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x105555aaaaffef;  op2val:0x102000fffc2000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x105555aaaaffef, 0x102000fffc2000, x30, x1, 192, x2)

inst_42:
// rs1_h0_val == -9, rs1_h3_val == 32767
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x7fffeffffff9fff7;  op2val:0xfff6fffcf7ff4000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x7fffeffffff9fff7, 0xfff6fffcf7ff4000, x30, x1, 208, x2)

inst_43:
// rs1_h0_val == -5, rs1_h3_val == 2
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x02bfffff7ffffb;  op2val:0xff7ffffbfff64000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x02bfffff7ffffb, 0xff7ffffbfff64000, x30, x1, 224, x2)

inst_44:
// rs1_h0_val == -2, rs1_h2_val == -17
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x800ffef3ffffffe;  op2val:0x8055550800ffff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x800ffef3ffffffe, 0x8055550800ffff, x30, x1, 240, x2)

inst_45:
// rs1_h0_val == 16384, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x3fffc00000044000;  op2val:0x5555fffc04000008
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x3fffc00000044000, 0x5555fffc04000008, x30, x1, 256, x2)

inst_46:
// rs1_h0_val == 4096, rs1_h3_val == -8193
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xdffffdfffffb1000;  op2val:0x06fffabfffffef
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xdffffdfffffb1000, 0x06fffabfffffef, x30, x1, 272, x2)

inst_47:
// rs1_h0_val == 2048, rs2_h3_val == 0, rs2_h0_val == 32767
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xffbf000504000800;  op2val:0x005555bfff7fff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xffbf000504000800, 0x005555bfff7fff, x30, x1, 288, x2)

inst_48:
// rs1_h0_val == 128, rs2_h0_val == -513
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffe10000080;  op2val:0xfffe00020003fdff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfff6fffe10000080, 0xfffe00020003fdff, x30, x1, 304, x2)

inst_49:
// rs1_h0_val == 64, rs1_h2_val == -1025, rs2_h1_val == -65
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x80fbffffff0040;  op2val:0xffbf0005ffbffffa
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x80fbffffff0040, 0xffbf0005ffbffffa, x30, x1, 320, x2)

inst_50:
// rs1_h0_val == 8, rs2_h2_val == 128
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x05fbff40000008;  op2val:0xffbf00805555c000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x05fbff40000008, 0xffbf00805555c000, x30, x1, 336, x2)

inst_51:
// rs1_h0_val == 2, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff008000060002;  op2val:0xfeff08000080efff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xf7ff008000060002, 0xfeff08000080efff, x30, x1, 352, x2)

inst_52:
// rs1_h0_val == 0, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffafeff0000;  op2val:0x1000c000ffbf0006
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfff8fffafeff0000, 0x1000c000ffbf0006, x30, x1, 368, x2)

inst_53:
// rs1_h0_val == -1, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x400c0000080ffff;  op2val:0xfff80007fff6feff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x400c0000080ffff, 0xfff80007fff6feff, x30, x1, 384, x2)

inst_54:
// rs2_h3_val == 8, rs2_h0_val == -65, rs2_h2_val == 256
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xffef00400001aaaa;  op2val:0x0801000020ffbf
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xffef00400001aaaa, 0x0801000020ffbf, x30, x1, 400, x2)

inst_55:
// rs2_h3_val == 4, rs2_h0_val == -33
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xbffffdff4000ffdf;  op2val:0x040004fff9ffdf
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xbffffdff4000ffdf, 0x040004fff9ffdf, x30, x1, 416, x2)

inst_56:
// rs2_h1_val == 4, rs2_h0_val == 4
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0020ffdf3fff;  op2val:0xffef020000040004
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfffc0020ffdf3fff, 0xffef020000040004, x30, x1, 432, x2)

inst_57:
// rs2_h1_val == 1, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffd2000fff6;  op2val:0xfdff000200010000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x8000fffd2000fff6, 0xfdff000200010000, x30, x1, 448, x2)

inst_58:
// rs2_h1_val == -1, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffafbff0040;  op2val:0xfff80000ffffaaaa
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x3ffffffafbff0040, 0xfff80000ffffaaaa, x30, x1, 464, x2)

inst_59:
// rs2_h0_val == 21845, rs2_h1_val == -257
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x03fffd02008000;  op2val:0x80ffdffeff5555
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x03fffd02008000, 0x80ffdffeff5555, x30, x1, 480, x2)

inst_60:
// rs2_h0_val == -1025, rs2_h1_val == 512
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xffdffbfffffddfff;  op2val:0xc000fffe0200fbff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xffdffbfffffddfff, 0xc000fffe0200fbff, x30, x1, 496, x2)

inst_61:
// rs2_h0_val == -129, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x02800020000002;  op2val:0x3fffc0000010ff7f
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x02800020000002, 0x3fffc0000010ff7f, x30, x1, 512, x2)

inst_62:
// rs2_h0_val == -3, rs2_h3_val == 2
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffdc000fff90005;  op2val:0x020020fffafffd
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfffdc000fff90005, 0x020020fffafffd, x30, x1, 528, x2)

inst_63:
// rs2_h0_val == -2, rs1_h3_val == -2
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffefeffbfff0003;  op2val:0xdfffdfffbffffffe
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfffefeffbfff0003, 0xdfffdfffbffffffe, x30, x1, 544, x2)

inst_64:
// rs2_h0_val == 4096, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffc5555ffdf0020;  op2val:0x2000007fff61000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfffc5555ffdf0020, 0x2000007fff61000, x30, x1, 560, x2)

inst_65:
// rs2_h0_val == 2048, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff80020fffd0008;  op2val:0x04fffb08000800
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfff80020fffd0008, 0x04fffb08000800, x30, x1, 576, x2)

inst_66:
// rs2_h0_val == 256, rs1_h2_val == 2
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0002f7fffff9;  op2val:0x40008055550100
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfffc0002f7fffff9, 0x40008055550100, x30, x1, 592, x2)

inst_67:
// rs2_h0_val == 2, rs1_h3_val == -9
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff78000fdfffbff;  op2val:0x04f7ff3fff0002
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfff78000fdfffbff, 0x04f7ff3fff0002, x30, x1, 608, x2)

inst_68:
// rs2_h0_val == 1, rs2_h2_val == -16385
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffafbff00023fff;  op2val:0x20bfffbfff0001
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfffafbff00023fff, 0x20bfffbfff0001, x30, x1, 624, x2)

inst_69:
// rs1_h3_val == -513, rs2_h2_val == 32767
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0000fffa0040;  op2val:0xc0007fff7fffffef
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfdff0000fffa0040, 0xc0007fff7fffffef, x30, x1, 640, x2)

inst_70:
// rs1_h3_val == -257, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0800ffffc000;  op2val:0xfff93ffffeff0002
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfeff0800ffffc000, 0xfff93ffffeff0002, x30, x1, 656, x2)

inst_71:
// rs1_h3_val == -129, rs1_h2_val == 32767
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xff7f7fff00040001;  op2val:0xfdffff7f00010009
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xff7f7fff00040001, 0xfdffff7f00010009, x30, x1, 672, x2)

inst_72:
// rs2_h3_val == 1, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xc000002000200400;  op2val:0x010009bfffdfff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xc000002000200400, 0x010009bfffdfff, x30, x1, 688, x2)

inst_73:
// rs2_h3_val == -1, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x3fff200000023fff;  op2val:0xffff0080fdff2000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x3fff200000023fff, 0xffff0080fdff2000, x30, x1, 704, x2)

inst_74:
// rs1_h3_val == 16384, rs1_h1_val == -9
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x4000bffffff70001;  op2val:0x100000403fff0020
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x4000bffffff70001, 0x100000403fff0020, x30, x1, 720, x2)

inst_75:
// rs1_h3_val == 4096, rs1_h2_val == 8
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x10000008fffdfff8;  op2val:0x800004fbfffffa
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x10000008fffdfff8, 0x800004fbfffffa, x30, x1, 736, x2)

inst_76:
// rs2_h2_val == -1025, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffd00030003fdff;  op2val:0x7ffffbff0009fffe
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfffd00030003fdff, 0x7ffffbff0009fffe, x30, x1, 752, x2)

inst_77:
// rs1_h3_val == 32, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x200007ffeffffe;  op2val:0xaaaaffbfdfff0005
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x200007ffeffffe, 0xaaaaffbfdfff0005, x30, x1, 768, x2)

inst_78:
// rs2_h2_val == -257, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000900400002;  op2val:0x2000fefffffe0000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xf7ff000900400002, 0x2000fefffffe0000, x30, x1, 784, x2)

inst_79:
// rs1_h3_val == 4, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x04000240000800;  op2val:0x7fff1000fffc0200
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x04000240000800, 0x7fff1000fffc0200, x30, x1, 800, x2)

inst_80:
// rs2_h2_val == -17, rs1_h1_val == 32767
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff9feff7ffffff8;  op2val:0xfffeffef5555fbff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfff9feff7ffffff8, 0xfffeffef5555fbff, x30, x1, 816, x2)

inst_81:
// rs1_h3_val == 1, rs1_h2_val == -2049
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x01f7ff7fffdfff;  op2val:0x030800fffc0080
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x01f7ff7fffdfff, 0x030800fffc0080, x30, x1, 832, x2)

inst_82:
// rs2_h2_val == -9, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0008fffeefff;  op2val:0xffbffff7fff8ffef
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfffb0008fffeefff, 0xffbffff7fff8ffef, x30, x1, 848, x2)

inst_83:
// rs2_h2_val == -3, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x200fffa00070002;  op2val:0x00fffd5555fffc
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x200fffa00070002, 0x00fffd5555fffc, x30, x1, 864, x2)

inst_84:
// rs1_h2_val == -21846, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xefffaaaafffcfdff;  op2val:0x100800feff0004
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xefffaaaafffcfdff, 0x100800feff0004, x30, x1, 880, x2)

inst_85:
// rs2_h2_val == 16384, rs1_h2_val == 4
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x00000400010400;  op2val:0x0340000001ff7f
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x00000400010400, 0x0340000001ff7f, x30, x1, 896, x2)

inst_86:
// rs1_h2_val == -8193, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x2000dfff0040c000;  op2val:0xc000feff00040003
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x2000dfff0040c000, 0xc000feff00040003, x30, x1, 912, x2)

inst_87:
// rs2_h2_val == 1024, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x10fff9c000ff7f;  op2val:0xfffd04003fff7fff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x10fff9c000ff7f, 0xfffd04003fff7fff, x30, x1, 928, x2)

inst_88:
// rs2_h2_val == -1, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xdfff00070005ffef;  op2val:0x02ffff0000c000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xdfff00070005ffef, 0x02ffff0000c000, x30, x1, 944, x2)

inst_89:
// rs2_h2_val == 16, rs1_h2_val == -1, rs2_h1_val == 256
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff3fff0080;  op2val:0x07001001000007
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xf7ffffff3fff0080, 0x07001001000007, x30, x1, 960, x2)

inst_90:
// rs2_h1_val == -4097, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x20000700400006;  op2val:0xfffdfff6efff0800
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x20000700400006, 0xfffdfff6efff0800, x30, x1, 976, x2)

inst_91:
// rs1_h2_val == 256, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x7fff01000004fffd;  op2val:0xfffe0002ffbf0000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x7fff01000004fffd, 0xfffe0002ffbf0000, x30, x1, 992, x2)

inst_92:
// rs1_h2_val == 16, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0010fffb0000;  op2val:0xfefffff9fff60008
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xdfff0010fffb0000, 0xfefffff9fff60008, x30, x1, 1008, x2)

inst_93:
// rs2_h1_val == -33, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x010007fbfffffb;  op2val:0xfffc1000ffdf0000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x010007fbfffffb, 0xfffc1000ffdf0000, x30, x1, 1024, x2)

inst_94:
// rs2_h1_val == -5, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffe2000ff7f0080;  op2val:0x20bffffffbfff9
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfffe2000ff7f0080, 0x20bffffffbfff9, x30, x1, 1040, x2)

inst_95:
// rs2_h1_val == -32768, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff9800020002000;  op2val:0x3fff3fff80002000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfff9800020002000, 0x3fff3fff80002000, x30, x1, 1056, x2)

inst_96:
// rs2_h1_val == 16384, rs1_h1_val == -8193
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0800dfff0007;  op2val:0x5555fbff40004000
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfffe0800dfff0007, 0x5555fbff40004000, x30, x1, 1072, x2)

inst_97:
// rs2_h2_val == 8, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x800c0004000fffb;  op2val:0xffef00080009bfff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x800c0004000fffb, 0xffef00080009bfff, x30, x1, 1088, x2)

inst_98:
// rs1_h2_val == -5, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffbfff9ffdf;  op2val:0x05ffbfff7ffff9
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfffefffbfff9ffdf, 0x05ffbfff7ffff9, x30, x1, 1104, x2)

inst_99:
// rs2_h1_val == 4096, 
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x1000fff880000800;  op2val:0xffdf40001000fff8
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x1000fff880000800, 0xffdf40001000fff8, x30, x1, 1120, x2)

inst_100:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val == 16384, rs2_h3_val == -257, rs2_h2_val == -4097, rs1_h3_val == 256, rs1_h1_val == 2048, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -17, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x100400008000003;  op2val:0xfeffeffffff8ffef
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x100400008000003, 0xfeffeffffff8ffef, x30, x1, 1136, x2)

inst_101:
// rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 8, rs2_h0_val == -16385, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val == 256, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 128
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0x08fff801000007;  op2val:0x0500070080bfff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0x08fff801000007, 0x0500070080bfff, x30, x1, 1152, x2)

inst_102:
// rs2_h3_val == -8193, rs1_h3_val == -1025, rs1_h2_val == 64, rs1_h0_val == 256, rs2_h2_val == 1
// opcode: kmaxda ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0040fff60100;  op2val:0xdfff0001fff73fff
TEST_PKRR_OP(kmaxda, x31, x30, x29, 0x0000000000000000, 0xfbff0040fff60100, 0xdfff0001fff73fff, x30, x1, 1168, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x16_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x16_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x13_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 148*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
