
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ucmple16 instruction of the RISC-V RV64PZicsr extension for the ucmple16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ucmple16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x3, rs2==x28, rd==x3, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 63487, rs1_h1_val == 16384, rs1_h3_val == 16, rs2_h2_val == 65407
// opcode: ucmple16 ; op1:x3; op2:x28; dest:x3; op1val:0x10000340000000;  op2val:0xf7ffff7f000a0003
TEST_RR_OP(ucmple16, x3, x3, x28, 0x0000000000000000, 0x10000340000000, 0xf7ffff7f000a0003, x6, 0, x7)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x13, rs2==x21, rd==x1, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h1_val == 65531, rs2_h0_val == 32768, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h3_val == 65533, rs1_h2_val == 2048, rs2_h3_val == 65533
// opcode: ucmple16 ; op1:x13; op2:x21; dest:x1; op1val:0xfffd080000120013;  op2val:0xfffdff7ffffb8000
TEST_RR_OP(ucmple16, x1, x13, x21, 0x0000000000000000, 0xfffd080000120013, 0xfffdff7ffffb8000, x6, 8, x7)

inst_2:
// rs1 == rs2 != rd, rs1==x19, rs2==x19, rd==x16, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 65023, rs2_h3_val == 16, rs1_h3_val == 512, rs2_h2_val == 65023, rs2_h0_val == 64511
// opcode: ucmple16 ; op1:x19; op2:x19; dest:x16; op1val:0x200fdff40000007;  op2val:0x10fdff000bfbff
TEST_RR_OP(ucmple16, x16, x19, x19, 0x0000000000000000, 0x200fdff40000007, 0x10fdff000bfbff, x6, 16, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x2, rs2==x2, rd==x2, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 8192, rs2_h1_val == 128, rs2_h3_val == 64511, rs1_h3_val == 64, rs1_h1_val == 128, rs1_h0_val == 1024
// opcode: ucmple16 ; op1:x2; op2:x2; dest:x2; op1val:0x40001300800400;  op2val:0xfbff000f00802000
TEST_RR_OP(ucmple16, x2, x2, x2, 0x0000000000000000, 0x40001300800400, 0xfbff000f00802000, x6, 24, x7)

inst_4:
// rs2 == rd != rs1, rs1==x31, rs2==x18, rd==x18, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 2048, rs1_h1_val == 65534, rs2_h0_val == 2048, rs2_h1_val == 0
// opcode: ucmple16 ; op1:x31; op2:x18; dest:x18; op1val:0x030009fffe0800;  op2val:0x05001100000800
TEST_RR_OP(ucmple16, x18, x31, x18, 0x0000000000000000, 0x030009fffe0800, 0x05001100000800, x6, 32, x7)

inst_5:
// rs1==x16, rs2==x25, rd==x11, rs2_h3_val == 43690, rs2_h2_val == 16384, rs1_h1_val == 65531, rs1_h2_val == 4, rs1_h3_val == 0
// opcode: ucmple16 ; op1:x16; op2:x25; dest:x11; op1val:0x000004fffb0006;  op2val:0xaaaa4000000e0012
TEST_RR_OP(ucmple16, x11, x16, x25, 0x0000000000000000, 0x000004fffb0006, 0xaaaa4000000e0012, x6, 40, x7)

inst_6:
// rs1==x0, rs2==x1, rd==x26, rs2_h3_val == 21845, rs1_h2_val == 32
// opcode: ucmple16 ; op1:x0; op2:x1; dest:x26; op1val:0x0d0020fffe000e;  op2val:0x5555000c000a0003
TEST_RR_OP(ucmple16, x26, x0, x1, 0x0000000000000000, 0x0d0020fffe000e, 0x5555000c000a0003, x6, 48, x7)

inst_7:
// rs1==x1, rs2==x9, rd==x24, rs2_h3_val == 32767, rs2_h0_val == 65471, rs2_h2_val == 1, rs2_h1_val == 63487, rs1_h3_val == 1, rs1_h2_val == 8
// opcode: ucmple16 ; op1:x1; op2:x9; dest:x24; op1val:0x0100080080000e;  op2val:0x7fff0001f7ffffbf
TEST_RR_OP(ucmple16, x24, x1, x9, 0x0000000000000000, 0x0100080080000e, 0x7fff0001f7ffffbf, x6, 56, x7)

inst_8:
// rs1==x30, rs2==x0, rd==x17, rs2_h3_val == 49151, rs1_h3_val == 65023, rs2_h1_val == 16384, rs1_h1_val == 32, rs1_h0_val == 57343
// opcode: ucmple16 ; op1:x30; op2:x0; dest:x17; op1val:0xfdff00090020dfff;  op2val:0xbfff00064000000b
TEST_RR_OP(ucmple16, x17, x30, x0, 0x0000000000000000, 0xfdff00090020dfff, 0xbfff00064000000b, x6, 64, x7)

inst_9:
// rs1==x15, rs2==x23, rd==x9, rs2_h3_val == 57343, rs1_h0_val == 61439, rs2_h0_val == 4, rs2_h2_val == 256
// opcode: ucmple16 ; op1:x15; op2:x23; dest:x9; op1val:0x1300110020efff;  op2val:0xdfff010000000004
TEST_RR_OP(ucmple16, x9, x15, x23, 0x0000000000000000, 0x1300110020efff, 0xdfff010000000004, x6, 72, x7)

inst_10:
// rs1==x10, rs2==x11, rd==x12, rs2_h3_val == 61439, rs1_h1_val == 0, rs2_h0_val == 65533, rs1_h2_val == 65407, rs2_h2_val == 65279, rs1_h0_val == 512
// opcode: ucmple16 ; op1:x10; op2:x11; dest:x12; op1val:0x0cff7f00000200;  op2val:0xeffffefff7fffffd
TEST_RR_OP(ucmple16, x12, x10, x11, 0x0000000000000000, 0x0cff7f00000200, 0xeffffefff7fffffd, x6, 80, x7)

inst_11:
// rs1==x14, rs2==x12, rd==x30, rs2_h3_val == 65023, rs2_h1_val == 4, rs1_h0_val == 65519, rs2_h2_val == 32767
// opcode: ucmple16 ; op1:x14; op2:x12; dest:x30; op1val:0x0f00120012ffef;  op2val:0xfdff7fff0004000c
TEST_RR_OP(ucmple16, x30, x14, x12, 0x0000000000000000, 0x0f00120012ffef, 0xfdff7fff0004000c, x6, 88, x7)

inst_12:
// rs1==x18, rs2==x5, rd==x29, rs2_h3_val == 65279, rs2_h0_val == 65534, rs1_h3_val == 2048, rs2_h2_val == 57343, rs1_h2_val == 512, rs2_h1_val == 65503
// opcode: ucmple16 ; op1:x18; op2:x5; dest:x29; op1val:0x80002000011000b;  op2val:0xfeffdfffffdffffe
TEST_RR_OP(ucmple16, x29, x18, x5, 0x0000000000000000, 0x80002000011000b, 0xfeffdfffffdffffe, x6, 96, x7)

inst_13:
// rs1==x12, rs2==x10, rd==x19, rs2_h3_val == 65407, rs1_h1_val == 65407, rs1_h0_val == 64511, rs2_h0_val == 256, rs2_h1_val == 21845, rs1_h2_val == 64
// opcode: ucmple16 ; op1:x12; op2:x10; dest:x19; op1val:0x0e0040ff7ffbff;  op2val:0xff7f000955550100
TEST_RR_OP(ucmple16, x19, x12, x10, 0x0000000000000000, 0x0e0040ff7ffbff, 0xff7f000955550100, x6, 104, x7)

inst_14:
// rs1==x22, rs2==x3, rd==x4, rs2_h3_val == 65471, rs1_h1_val == 65023, rs2_h1_val == 65279, rs2_h0_val == 8, rs1_h3_val == 21845
// opcode: ucmple16 ; op1:x22; op2:x3; dest:x4; op1val:0x55550200fdff0400;  op2val:0xffbf7ffffeff0008
TEST_RR_OP(ucmple16, x4, x22, x3, 0x0000000000000000, 0x55550200fdff0400, 0xffbf7ffffeff0008, x6, 112, x7)

inst_15:
// rs1==x23, rs2==x13, rd==x0, rs2_h3_val == 65503, rs1_h2_val == 1024, rs2_h2_val == 32768
// opcode: ucmple16 ; op1:x23; op2:x13; dest:x0; op1val:0x000400000b0012;  op2val:0xffdf80000000fbff
TEST_RR_OP(ucmple16, x0, x23, x13, 0x0000000000000000, 0x000400000b0012, 0xffdf80000000fbff, x6, 120, x2)

inst_16:
// rs1==x27, rs2==x29, rd==x5, rs2_h3_val == 65519, rs1_h1_val == 63487, rs1_h2_val == 65503, rs2_h1_val == 43690, rs2_h0_val == 1, rs2_h2_val == 65519
// opcode: ucmple16 ; op1:x27; op2:x29; dest:x5; op1val:0x0bffdff7ff0011;  op2val:0xffefffefaaaa0001
TEST_RR_OP(ucmple16, x5, x27, x29, 0x0000000000000000, 0x0bffdff7ff0011, 0xffefffefaaaa0001, x6, 128, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_17:
// rs1==x21, rs2==x24, rd==x14, rs2_h3_val == 65527, rs2_h1_val == 65533, rs1_h1_val == 21845, rs1_h0_val == 49151, rs1_h3_val == 32768, rs2_h2_val == 65535
// opcode: ucmple16 ; op1:x21; op2:x24; dest:x14; op1val:0x8000000d5555bfff;  op2val:0xfff7fffffffd2000
TEST_RR_OP(ucmple16, x14, x21, x24, 0x0000000000000000, 0x8000000d5555bfff, 0xfff7fffffffd2000, x1, 0, x2)

inst_18:
// rs1==x29, rs2==x30, rd==x28, rs2_h3_val == 65531, rs2_h1_val == 65534, rs1_h3_val == 65503, rs1_h2_val == 65527, rs2_h2_val == 64511, rs2_h0_val == 63487, rs1_h0_val == 256
// opcode: ucmple16 ; op1:x29; op2:x30; dest:x28; op1val:0xffdffff700120100;  op2val:0xfffbfbfffffef7ff
TEST_RR_OP(ucmple16, x28, x29, x30, 0x0000000000000000, 0xffdffff700120100, 0xfffbfbfffffef7ff, x1, 8, x2)

inst_19:
// rs1==x25, rs2==x22, rd==x20, rs2_h3_val == 65534, rs1_h3_val == 1024, rs2_h0_val == 65503, rs1_h0_val == 8192
// opcode: ucmple16 ; op1:x25; op2:x22; dest:x20; op1val:0x4000007000c2000;  op2val:0xfffe000c0000ffdf
TEST_RR_OP(ucmple16, x20, x25, x22, 0x0000000000000000, 0x4000007000c2000, 0xfffe000c0000ffdf, x1, 16, x2)

inst_20:
// rs1==x26, rs2==x20, rd==x22, rs2_h3_val == 32768, rs2_h0_val == 32, rs2_h2_val == 4096, rs1_h2_val == 64511, rs1_h1_val == 65519
// opcode: ucmple16 ; op1:x26; op2:x20; dest:x22; op1val:0x0bfbffffefefff;  op2val:0x8000100000040020
TEST_RR_OP(ucmple16, x22, x26, x20, 0x0000000000000000, 0x0bfbffffefefff, 0x8000100000040020, x1, 24, x2)

inst_21:
// rs1==x9, rs2==x8, rd==x21, rs2_h3_val == 16384, rs1_h2_val == 4096, rs1_h3_val == 8
// opcode: ucmple16 ; op1:x9; op2:x8; dest:x21; op1val:0x08100055550012;  op2val:0x4000ffeffffd000e
TEST_RR_OP(ucmple16, x21, x9, x8, 0x0000000000000000, 0x08100055550012, 0x4000ffeffffd000e, x1, 32, x2)

inst_22:
// rs1==x24, rs2==x17, rd==x25, rs2_h3_val == 8192, rs2_h1_val == 32767, rs1_h1_val == 49151, rs1_h0_val == 65533, rs1_h3_val == 61439
// opcode: ucmple16 ; op1:x24; op2:x17; dest:x25; op1val:0xefff0003bffffffd;  op2val:0x200000067fff0013
TEST_RR_OP(ucmple16, x25, x24, x17, 0x0000000000000000, 0xefff0003bffffffd, 0x200000067fff0013, x1, 40, x2)

inst_23:
// rs1==x8, rs2==x15, rd==x13, rs2_h3_val == 4096, rs2_h2_val == 8, rs1_h0_val == 65279, rs1_h2_val == 32768, rs2_h0_val == 64, rs1_h1_val == 8192, rs2_h1_val == 57343
// opcode: ucmple16 ; op1:x8; op2:x15; dest:x13; op1val:0x0d80002000feff;  op2val:0x10000008dfff0040
TEST_RR_OP(ucmple16, x13, x8, x15, 0x0000000000000000, 0x0d80002000feff, 0x10000008dfff0040, x1, 48, x2)

inst_24:
// rs1==x7, rs2==x27, rd==x8, rs2_h3_val == 2048, rs2_h2_val == 8192, rs2_h0_val == 2, rs1_h0_val == 128
// opcode: ucmple16 ; op1:x7; op2:x27; dest:x8; op1val:0x80000013000a0080;  op2val:0x8002000000e0002
TEST_RR_OP(ucmple16, x8, x7, x27, 0x0000000000000000, 0x80000013000a0080, 0x8002000000e0002, x1, 56, x2)

inst_25:
// rs1==x11, rs2==x16, rd==x6, rs2_h3_val == 1024, rs2_h1_val == 2, rs1_h0_val == 16, rs2_h0_val == 1024
// opcode: ucmple16 ; op1:x11; op2:x16; dest:x6; op1val:0x070040fffb0010;  op2val:0x400000600020400
TEST_RR_OP(ucmple16, x6, x11, x16, 0x0000000000000000, 0x070040fffb0010, 0x400000600020400, x1, 64, x2)

inst_26:
// rs1==x28, rs2==x31, rd==x27, rs2_h3_val == 512, rs1_h2_val == 0, rs1_h1_val == 1, rs1_h0_val == 21845, rs2_h1_val == 32, rs1_h3_val == 8192
// opcode: ucmple16 ; op1:x28; op2:x31; dest:x27; op1val:0x2000000000015555;  op2val:0x200ffef0020fbff
TEST_RR_OP(ucmple16, x27, x28, x31, 0x0000000000000000, 0x2000000000015555, 0x200ffef0020fbff, x1, 72, x2)

inst_27:
// rs1==x5, rs2==x7, rd==x15, rs2_h3_val == 256, rs2_h2_val == 4, rs1_h1_val == 61439, rs1_h2_val == 256, rs2_h0_val == 32767
// opcode: ucmple16 ; op1:x5; op2:x7; dest:x15; op1val:0x80000100efff000c;  op2val:0x100000400047fff
TEST_RR_OP(ucmple16, x15, x5, x7, 0x0000000000000000, 0x80000100efff000c, 0x100000400047fff, x1, 80, x2)

inst_28:
// rs1==x20, rs2==x26, rd==x10, rs2_h3_val == 128, rs1_h1_val == 65279, rs1_h3_val == 65407, rs2_h2_val == 65533, rs1_h2_val == 63487
// opcode: ucmple16 ; op1:x20; op2:x26; dest:x10; op1val:0xff7ff7fffeff5555;  op2val:0x80fffd00120006
TEST_RR_OP(ucmple16, x10, x20, x26, 0x0000000000000000, 0xff7ff7fffeff5555, 0x80fffd00120006, x1, 88, x2)

inst_29:
// rs1==x6, rs2==x14, rd==x31, rs2_h3_val == 64, rs1_h1_val == 32767, rs1_h3_val == 32
// opcode: ucmple16 ; op1:x6; op2:x14; dest:x31; op1val:0x2000057fff000a;  op2val:0x404000000b7fff
TEST_RR_OP(ucmple16, x31, x6, x14, 0x0000000000000000, 0x2000057fff000a, 0x404000000b7fff, x1, 96, x2)

inst_30:
// rs1==x4, rs2==x6, rd==x7, rs2_h3_val == 32, 
// opcode: ucmple16 ; op1:x4; op2:x6; dest:x7; op1val:0x010006fffb0011;  op2val:0x20feff0011f7ff
TEST_RR_OP(ucmple16, x7, x4, x6, 0x0000000000000000, 0x010006fffb0011, 0x20feff0011f7ff, x1, 104, x2)

inst_31:
// rs1==x17, rs2==x4, rd==x23, rs2_h3_val == 8, rs1_h2_val == 65531, rs1_h3_val == 4096
// opcode: ucmple16 ; op1:x17; op2:x4; dest:x23; op1val:0x1000fffb00075555;  op2val:0x08ffffffdf000e
TEST_RR_OP(ucmple16, x23, x17, x4, 0x0000000000000000, 0x1000fffb00075555, 0x08ffffffdf000e, x1, 112, x2)

inst_32:
// rs2_h3_val == 4, rs1_h0_val == 65503, rs2_h2_val == 1024, rs1_h2_val == 43690, rs1_h1_val == 16
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x00aaaa0010ffdf;  op2val:0x0404000003ffbf
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x00aaaa0010ffdf, 0x0404000003ffbf, x1, 120, x2)

inst_33:
// rs2_h3_val == 2, rs2_h2_val == 49151, rs2_h1_val == 1, rs1_h1_val == 32768
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x12000b8000dfff;  op2val:0x02bfff0001000f
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x12000b8000dfff, 0x02bfff0001000f, x1, 128, x2)

inst_34:
// rs2_h3_val == 1, rs1_h1_val == 1024, rs2_h1_val == 256, rs1_h2_val == 32767
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x407fff04000009;  op2val:0x01dfff01000008
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x407fff04000009, 0x01dfff01000008, x1, 136, x2)

inst_35:
// rs1_h1_val == 4, rs1_h2_val == 128, rs2_h1_val == 65519, rs1_h3_val == 63487
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff00800004ffef;  op2val:0x4000001ffeff7ff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xf7ff00800004ffef, 0x4000001ffeff7ff, x1, 144, x2)

inst_36:
// rs1_h1_val == 2, rs1_h2_val == 65471, rs1_h0_val == 32, rs2_h1_val == 65527
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x03ffbf00020020;  op2val:0x070001fff70003
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x03ffbf00020020, 0x070001fff70003, x1, 152, x2)

inst_37:
// rs1_h1_val == 65535, rs2_h2_val == 61439, rs1_h3_val == 65519, rs2_h1_val == 4096
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef8000ffff0007;  op2val:0x400efff1000fbff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xffef8000ffff0007, 0x400efff1000fbff, x1, 160, x2)

inst_38:
// rs1_h0_val == 43690, rs1_h3_val == 2, rs1_h1_val == 512, rs2_h1_val == 49151, rs1_h2_val == 65533
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fffd0200aaaa;  op2val:0x01ff7fbfff0100
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x02fffd0200aaaa, 0x01ff7fbfff0100, x1, 168, x2)

inst_39:
// rs1_h0_val == 32767, rs2_h2_val == 2048, rs2_h0_val == 65279, rs2_h1_val == 2048
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf800000057fff;  op2val:0xfdff08000800feff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xffdf800000057fff, 0xfdff08000800feff, x1, 176, x2)

inst_40:
// rs1_h0_val == 63487, rs1_h2_val == 16, rs2_h0_val == 61439, rs1_h3_val == 49151
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff00100400f7ff;  op2val:0x0a00080002efff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xbfff00100400f7ff, 0x0a00080002efff, x1, 184, x2)

inst_41:
// rs1_h0_val == 65023, rs1_h2_val == 21845, rs2_h0_val == 43690, rs2_h2_val == 21845
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d55550007fdff;  op2val:0xfeff5555000aaaaa
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x0d55550007fdff, 0xfeff5555000aaaaa, x1, 192, x2)

inst_42:
// rs1_h0_val == 65407, rs2_h2_val == 63487
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fbff0001ff7f;  op2val:0x12f7ffffdf0400
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x2000fbff0001ff7f, 0x12f7ffffdf0400, x1, 200, x2)

inst_43:
// rs1_h0_val == 65471, rs1_h3_val == 65531
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfff78000ffbf;  op2val:0x800000090000000f
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xfffbfff78000ffbf, 0x800000090000000f, x1, 208, x2)

inst_44:
// rs1_h0_val == 65527, rs2_h1_val == 512
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f00112000fff7;  op2val:0xfff7100002000040
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xff7f00112000fff7, 0xfff7100002000040, x1, 216, x2)

inst_45:
// rs1_h0_val == 65531, rs2_h2_val == 64, rs2_h1_val == 16, rs1_h1_val == 8
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x555500000008fffb;  op2val:0x100000400010feff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x555500000008fffb, 0x100000400010feff, x1, 224, x2)

inst_46:
// rs1_h0_val == 65534, rs1_h1_val == 43690
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffbffaaaafffe;  op2val:0x100efff0005000a
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xf7fffbffaaaafffe, 0x100efff0005000a, x1, 232, x2)

inst_47:
// rs1_h0_val == 32768, rs1_h3_val == 65471, rs2_h3_val == 0, rs2_h0_val == 512
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfaaaaffef8000;  op2val:0x00fdff000f0200
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xffbfaaaaffef8000, 0x00fdff000f0200, x1, 240, x2)

inst_48:
// rs1_h0_val == 16384, rs1_h3_val == 64511, rs1_h1_val == 64
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000a00404000;  op2val:0x55555555000d0001
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xfbff000a00404000, 0x55555555000d0001, x1, 248, x2)

inst_49:
// rs1_h0_val == 4096, rs1_h3_val == 65534, rs1_h2_val == 65535
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffaaaa1000;  op2val:0xfbff00120000ffdf
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xfffeffffaaaa1000, 0xfbff00120000ffdf, x1, 256, x2)

inst_50:
// rs1_h0_val == 64, rs1_h2_val == 61439, rs1_h3_val == 65527
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7efff000e0040;  op2val:0x5555fffdffef0009
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xfff7efff000e0040, 0x5555fffdffef0009, x1, 264, x2)

inst_51:
// rs1_h0_val == 8, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7aaaafeff0008;  op2val:0x00400010000040
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xfff7aaaafeff0008, 0x00400010000040, x1, 272, x2)

inst_52:
// rs1_h0_val == 4, rs2_h0_val == 0, rs2_h1_val == 65471
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x0dff7f20000004;  op2val:0x800008ffbf0000
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x0dff7f20000004, 0x800008ffbf0000, x1, 280, x2)

inst_53:
// rs1_h0_val == 2, rs1_h2_val == 16384, rs2_h0_val == 16
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000400080000002;  op2val:0x040013000d0010
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x1000400080000002, 0x040013000d0010, x1, 288, x2)

inst_54:
// rs1_h0_val == 1, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x555500067fff0001;  op2val:0x05000b000f000c
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x555500067fff0001, 0x05000b000f000c, x1, 296, x2)

inst_55:
// rs2_h0_val == 65519, rs2_h2_val == 16
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0003aaaa0400;  op2val:0x20000010ffefffef
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xfffb0003aaaa0400, 0x20000010ffefffef, x1, 304, x2)

inst_56:
// rs2_h0_val == 65527, rs1_h1_val == 65527
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x07aaaafff70012;  op2val:0xfbff20000003fff7
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x07aaaafff70012, 0xfbff20000003fff7, x1, 312, x2)

inst_57:
// rs2_h0_val == 65531, rs1_h1_val == 57343
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000008dfff000b;  op2val:0xfff7ffff0007fffb
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x8000008dfff000b, 0xfff7ffff0007fffb, x1, 320, x2)

inst_58:
// rs2_h0_val == 16384, rs2_h2_val == 65531
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550005dfff8000;  op2val:0xfffdfffbfffd4000
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x55550005dfff8000, 0xfffdfffbfffd4000, x1, 328, x2)

inst_59:
// rs2_h0_val == 4096, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff710002000000e;  op2val:0xefff001300011000
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xfff710002000000e, 0xefff001300011000, x1, 336, x2)

inst_60:
// rs2_h0_val == 128, rs1_h3_val == 65279
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff000400800009;  op2val:0xffbf000800110080
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xfeff000400800009, 0xffbf000800110080, x1, 344, x2)

inst_61:
// rs2_h0_val == 65535, rs1_h3_val == 256
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000011ffefffef;  op2val:0x040006000cffff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x1000011ffefffef, 0x040006000cffff, x1, 352, x2)

inst_62:
// rs1_h3_val == 43690, rs2_h2_val == 65503, rs1_h1_val == 256, rs2_h1_val == 32768
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000901000100;  op2val:0x0dffdf80008000
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xaaaa000901000100, 0x0dffdf80008000, x1, 360, x2)

inst_63:
// rs1_h3_val == 32767, rs2_h1_val == 64511
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff040000000009;  op2val:0xefffeffffbff0011
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x7fff040000000009, 0xefffeffffbff0011, x1, 368, x2)

inst_64:
// rs1_h3_val == 57343, rs2_h2_val == 65471, rs1_h2_val == 2
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0002efffffef;  op2val:0xf7ffffbf000d0020
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xdfff0002efffffef, 0xf7ffffbf000d0020, x1, 376, x2)

inst_65:
// rs1_h0_val == 65535, rs1_h1_val == 65471
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0009ffbfffff;  op2val:0x800feff0011000b
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xf7ff0009ffbfffff, 0x800feff0011000b, x1, 384, x2)

inst_66:
// rs2_h3_val == 65535, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x0908000006fffe;  op2val:0xffff00130000000a
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x0908000006fffe, 0xffff00130000000a, x1, 392, x2)

inst_67:
// rs1_h3_val == 16384, rs2_h2_val == 512
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000efffff7faaaa;  op2val:0x09020000200000
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x4000efffff7faaaa, 0x09020000200000, x1, 400, x2)

inst_68:
// rs2_h2_val == 43690, rs2_h1_val == 1024
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x0a000daaaa7fff;  op2val:0x12aaaa04007fff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x0a000daaaa7fff, 0x12aaaa04007fff, x1, 408, x2)

inst_69:
// rs1_h3_val == 128, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x800800ffbf4000;  op2val:0x0bdfff00010009
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x800800ffbf4000, 0x0bdfff00010009, x1, 416, x2)

inst_70:
// rs1_h3_val == 4, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fdffdfff7fff;  op2val:0xfffddfff40002000
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x04fdffdfff7fff, 0xfffddfff40002000, x1, 424, x2)

inst_71:
// rs1_h2_val == 49151, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x12bfff000c000a;  op2val:0x030004ffef000a
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x12bfff000c000a, 0x030004ffef000a, x1, 432, x2)

inst_72:
// rs1_h2_val == 57343, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffdfff04000020;  op2val:0x13ffef0003fffe
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xefffdfff04000020, 0x13ffef0003fffe, x1, 440, x2)

inst_73:
// rs1_h2_val == 65279, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000feff0200fff7;  op2val:0x1000f7ff0800000e
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x2000feff0200fff7, 0x1000f7ff0800000e, x1, 448, x2)

inst_74:
// rs2_h2_val == 128, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd8000ffff0009;  op2val:0xdfff0080000bffff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xfffd8000ffff0009, 0xdfff0080000bffff, x1, 456, x2)

inst_75:
// rs2_h2_val == 32, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f000effbf0011;  op2val:0xffbf0020fff7000c
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xff7f000effbf0011, 0xffbf0020fff7000c, x1, 464, x2)

inst_76:
// rs1_h2_val == 65519, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x11ffef00060008;  op2val:0x100001000fffdf
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x11ffef00060008, 0x100001000fffdf, x1, 472, x2)

inst_77:
// rs2_h2_val == 2, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ffbfffbfffbf;  op2val:0x09000202002000
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x01ffbfffbfffbf, 0x09000202002000, x1, 480, x2)

inst_78:
// rs1_h2_val == 65534, rs2_h1_val == 61439
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x400fffe0011efff;  op2val:0xfffeffefefff0007
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x400fffe0011efff, 0xfffeffefefff0007, x1, 488, x2)

inst_79:
// rs2_h2_val == 0, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x070007ffff000a;  op2val:0x2000000055550100
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x070007ffff000a, 0x2000000055550100, x1, 496, x2)

inst_80:
// rs1_h2_val == 8192, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb200000060009;  op2val:0x102000000c0010
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xfffb200000060009, 0x102000000c0010, x1, 504, x2)

inst_81:
// rs2_h1_val == 65023, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x0200100004efff;  op2val:0xff7f0013fdff0002
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x0200100004efff, 0xff7f0013fdff0002, x1, 512, x2)

inst_82:
// rs2_h1_val == 65407, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffb0012000c;  op2val:0x010004ff7ffeff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xfdfffffb0012000c, 0x010004ff7ffeff, x1, 520, x2)

inst_83:
// rs1_h2_val == 1, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00018000fff7;  op2val:0xffdf2000000c1000
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xffbf00018000fff7, 0xffdf2000000c1000, x1, 528, x2)

inst_84:
// rs2_h1_val == 8192, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff00090011ffff;  op2val:0x200000420000002
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xefff00090011ffff, 0x200000420000002, x1, 536, x2)

inst_85:
// rs1_h1_val == 64511, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd000efbff0012;  op2val:0x80000010000ef7ff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xfffd000efbff0012, 0x80000010000ef7ff, x1, 544, x2)

inst_86:
// rs2_h2_val == 65527, rs2_h0_val == 65023
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x10001000ffef0100;  op2val:0x200fff75555fdff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x10001000ffef0100, 0x200fff75555fdff, x1, 552, x2)

inst_87:
// rs2_h1_val == 64, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd1000fff78000;  op2val:0x07efff00400003
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xfffd1000fff78000, 0x07efff00400003, x1, 560, x2)

inst_88:
// rs1_h1_val == 65503, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000013ffdf0020;  op2val:0x0080000001000a
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x40000013ffdf0020, 0x0080000001000a, x1, 568, x2)

inst_89:
// rs2_h1_val == 8, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffefffe7fff;  op2val:0xffef000b00080000
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xfffdfffefffe7fff, 0xffef000b00080000, x1, 576, x2)

inst_90:
// rs1_h1_val == 65533, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x06000ffffd0013;  op2val:0x08aaaa00050008
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x06000ffffd0013, 0x08aaaa00050008, x1, 584, x2)

inst_91:
// rs2_h1_val == 65535, rs2_h0_val == 65407
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x12000100404000;  op2val:0x20ffffffffff7f
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x12000100404000, 0x20ffffffffff7f, x1, 592, x2)

inst_92:
// rs2_h0_val == 21845, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x0ceffffffd000c;  op2val:0x100aaaa01005555
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x0ceffffffd000c, 0x100aaaa01005555, x1, 600, x2)

inst_93:
// rs1_h1_val == 4096, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000f7ff10000003;  op2val:0x01001210000400
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x2000f7ff10000003, 0x01001210000400, x1, 608, x2)

inst_94:
// rs1_h1_val == 2048, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffef0800ff7f;  op2val:0xffbf800020008000
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x02ffef0800ff7f, 0xffbf800020008000, x1, 616, x2)

inst_95:
// rs2_h0_val == 49151, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd100000050013;  op2val:0x0704007fffbfff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xfffd100000050013, 0x0704007fffbfff, x1, 624, x2)

inst_96:
// rs2_h0_val == 57343, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x800fdff0400000f;  op2val:0x100055550040dfff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x800fdff0400000f, 0x100055550040dfff, x1, 632, x2)

inst_97:
// rs1_h3_val == 65535, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff000e5555ff7f;  op2val:0x05004000100040
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xffff000e5555ff7f, 0x05004000100040, x1, 640, x2)

inst_98:
// rs2_h2_val == 65534, 
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf002000060080;  op2val:0x13fffe0004bfff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xffdf002000060080, 0x13fffe0004bfff, x1, 648, x2)

inst_99:
// rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 65023, rs2_h3_val == 16, rs1_h3_val == 512, rs2_h2_val == 65023, rs2_h0_val == 64511
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fdff40000007;  op2val:0x10fdff000bfbff
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x200fdff40000007, 0x10fdff000bfbff, x1, 656, x2)

inst_100:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 8192, rs2_h1_val == 128, rs2_h3_val == 64511, rs1_h3_val == 64, rs1_h1_val == 128, rs1_h0_val == 1024
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0x40001300800400;  op2val:0xfbff000f00802000
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0x40001300800400, 0xfbff000f00802000, x1, 664, x2)

inst_101:
// rs2_h3_val == 49151, rs1_h3_val == 65023, rs2_h1_val == 16384, rs1_h1_val == 32, rs1_h0_val == 57343
// opcode: ucmple16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00090020dfff;  op2val:0xbfff00064000000b
TEST_RR_OP(ucmple16, x31, x30, x29, 0x0000000000000000, 0xfdff00090020dfff, 0xbfff00064000000b, x1, 672, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 85*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
