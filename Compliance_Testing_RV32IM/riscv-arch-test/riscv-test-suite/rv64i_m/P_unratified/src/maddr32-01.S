
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the maddr32 instruction of the RISC-V RV64PZicsr extension for the maddr32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",maddr32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x13,signature_x13_1)

inst_0:
// rs1 == rd != rs2, rs1==x8, rs2==x28, rd==x8, rs1_w0_val == -2147483648, rs2_w1_val == 2
// opcode: maddr32 ; op1:x8; dest:x8; op1val:0xc000000080000000;  immval:$imm_val
TEST_RR_OP(maddr32, x8, x8, x28, 0x0000000000000000, 0xc000000080000000, 0x000002aaaaaaab, x13, 0, x19)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x7, rs2==x6, rd==x11, rs2_w1_val == -1431655766, rs1_w0_val == -65537, rs2_w0_val == -16777217, rs1_w1_val == 134217728
// opcode: maddr32 ; op1:x7; dest:x11; op1val:0x8000000fffeffff;  immval:$imm_val
TEST_RR_OP(maddr32, x11, x7, x6, 0x0000000000000000, 0x8000000fffeffff, 0xaaaaaaaafeffffff, x13, 8, x19)

inst_2:
// rs1 == rs2 != rd, rs1==x9, rs2==x9, rd==x3, rs2_w1_val == 1431655765, rs1_w1_val == -2097153, rs1_w0_val == -129
// opcode: maddr32 ; op1:x9; dest:x3; op1val:0xffdfffffffffff7f;  immval:$imm_val
TEST_RR_OP(maddr32, x3, x9, x9, 0x0000000000000000, 0xffdfffffffffff7f, 0x55555555ffff4afc, x13, 16, x19)

inst_3:
// rs1 == rs2 == rd, rs1==x5, rs2==x5, rd==x5, rs2_w1_val == 2147483647, rs1_w1_val == -33554433, rs1_w0_val == 268435456
// opcode: maddr32 ; op1:x5; dest:x5; op1val:0xfdffffff10000000;  immval:$imm_val
TEST_RR_OP(maddr32, x5, x5, x5, 0x0000000000000000, 0xfdffffff10000000, 0x7fffffff0000b504, x13, 24, x19)

inst_4:
// rs2 == rd != rs1, rs1==x29, rs2==x12, rd==x12, rs2_w1_val == -1073741825, rs1_w0_val == -17
// opcode: maddr32 ; op1:x29; dest:x12; op1val:0x66666666ffffffef;  immval:$imm_val
TEST_RR_OP(maddr32, x12, x29, x12, 0x0000000000000000, 0x66666666ffffffef, 0xbffffffffeffffff, x13, 32, x19)

inst_5:
// rs1==x16, rs2==x22, rd==x14, rs2_w1_val == -536870913, rs1_w1_val == -1431655766
// opcode: maddr32 ; op1:x16; dest:x14; op1val:0xaaaaaaaa55555556;  immval:$imm_val
TEST_RR_OP(maddr32, x14, x16, x22, 0x0000000000000000, 0xaaaaaaaa55555556, 0xdfffffff00000003, x13, 40, x19)

inst_6:
// rs1==x0, rs2==x1, rd==x24, rs2_w1_val == -268435457, rs2_w0_val == -33, rs1_w0_val == 262144
// opcode: maddr32 ; op1:x0; dest:x24; op1val:0xfffffff600040000;  immval:$imm_val
TEST_RR_OP(maddr32, x24, x0, x1, 0x0000000000000000, 0xfffffff600040000, 0xefffffffffffffdf, x13, 48, x19)

inst_7:
// rs1==x24, rs2==x26, rd==x0, rs2_w1_val == -134217729, rs1_w0_val == -33554433, rs2_w0_val == -131073
// opcode: maddr32 ; op1:x24; dest:x0; op1val:0x33333334fdffffff;  immval:$imm_val
TEST_RR_OP(maddr32, x0, x24, x26, 0x0000000000000000, 0x33333334fdffffff, 0xf7fffffffffdffff, x13, 56, x19)

inst_8:
// rs1==x2, rs2==x4, rd==x23, rs2_w1_val == -67108865, rs1_w0_val == 4, rs1_w1_val == -268435457
// opcode: maddr32 ; op1:x2; dest:x23; op1val:0xefffffff00000004;  immval:$imm_val
TEST_RR_OP(maddr32, x23, x2, x4, 0x0000000000000000, 0xefffffff00000004, 0xfbffffff00000009, x13, 64, x19)

inst_9:
// rs1==x26, rs2==x29, rd==x30, rs2_w1_val == -33554433, rs2_w0_val == -268435457
// opcode: maddr32 ; op1:x26; dest:x30; op1val:0xffff4afdffff4afc;  immval:$imm_val
TEST_RR_OP(maddr32, x30, x26, x29, 0x0000000000000000, 0xffff4afdffff4afc, 0xfdffffffefffffff, x13, 72, x19)

inst_10:
// rs1==x17, rs2==x20, rd==x6, rs2_w1_val == -16777217, rs1_w1_val == 16384, rs1_w0_val == -8388609
// opcode: maddr32 ; op1:x17; dest:x6; op1val:0x004000ff7fffff;  immval:$imm_val
TEST_RR_OP(maddr32, x6, x17, x20, 0x0000000000000000, 0x004000ff7fffff, 0xfeffffff55555554, x13, 80, x19)

inst_11:
// rs1==x12, rs2==x3, rd==x22, rs2_w1_val == -8388609, rs1_w0_val == 32768, rs1_w1_val == -524289
// opcode: maddr32 ; op1:x12; dest:x22; op1val:0xfff7ffff00008000;  immval:$imm_val
TEST_RR_OP(maddr32, x22, x12, x3, 0x0000000000000000, 0xfff7ffff00008000, 0xff7fffffffff4afd, x13, 88, x19)

inst_12:
// rs1==x15, rs2==x2, rd==x21, rs2_w1_val == -4194305, rs1_w0_val == 64
// opcode: maddr32 ; op1:x15; dest:x21; op1val:0xfffffff600000040;  immval:$imm_val
TEST_RR_OP(maddr32, x21, x15, x2, 0x0000000000000000, 0xfffffff600000040, 0xffbfffff00000006, x13, 96, x19)

inst_13:
// rs1==x21, rs2==x27, rd==x29, rs2_w1_val == -2097153, rs1_w1_val == -131073, rs1_w0_val == 8388608
// opcode: maddr32 ; op1:x21; dest:x29; op1val:0xfffdffff00800000;  immval:$imm_val
TEST_RR_OP(maddr32, x29, x21, x27, 0x0000000000000000, 0xfffdffff00800000, 0xffdfffffaaaaaaab, x13, 104, x19)

inst_14:
// rs1==x18, rs2==x16, rd==x10, rs2_w1_val == -1048577, rs1_w0_val == -131073, rs2_w0_val == -2147483648
// opcode: maddr32 ; op1:x18; dest:x10; op1val:0x000005fffdffff;  immval:$imm_val
TEST_RR_OP(maddr32, x10, x18, x16, 0x0000000000000000, 0x000005fffdffff, 0xffefffff80000000, x13, 112, x19)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_15:
// rs1==x10, rs2==x24, rd==x28, rs2_w1_val == -524289, rs1_w0_val == -4097
// opcode: maddr32 ; op1:x10; dest:x28; op1val:0x8000000ffffefff;  immval:$imm_val
TEST_RR_OP(maddr32, x28, x10, x24, 0x0000000000000000, 0x8000000ffffefff, 0xfff7ffffffff4afd, x5, 0, x12)

inst_16:
// rs1==x23, rs2==x13, rd==x4, rs2_w1_val == -262145, rs1_w0_val == 32
// opcode: maddr32 ; op1:x23; dest:x4; op1val:0xfffffff600000020;  immval:$imm_val
TEST_RR_OP(maddr32, x4, x23, x13, 0x0000000000000000, 0xfffffff600000020, 0xfffbffff00000003, x5, 8, x12)

inst_17:
// rs1==x22, rs2==x19, rd==x31, rs2_w1_val == -131073, rs1_w1_val == 536870912, rs2_w0_val == -257
// opcode: maddr32 ; op1:x22; dest:x31; op1val:0x20000000fffffff9;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x22, x19, 0x0000000000000000, 0x20000000fffffff9, 0xfffdfffffffffeff, x5, 16, x12)

inst_18:
// rs1==x13, rs2==x15, rd==x27, rs2_w1_val == -65537, rs1_w0_val == 0
// opcode: maddr32 ; op1:x13; dest:x27; op1val:0x3333333300000000;  immval:$imm_val
TEST_RR_OP(maddr32, x27, x13, x15, 0x0000000000000000, 0x3333333300000000, 0xfffeffff66666665, x5, 24, x12)

inst_19:
// rs1==x6, rs2==x18, rd==x26, rs2_w1_val == -32769, rs1_w0_val == -4194305, rs1_w1_val == 1431655765, rs2_w0_val == 32768
// opcode: maddr32 ; op1:x6; dest:x26; op1val:0x55555555ffbfffff;  immval:$imm_val
TEST_RR_OP(maddr32, x26, x6, x18, 0x0000000000000000, 0x55555555ffbfffff, 0xffff7fff00008000, x5, 32, x12)

inst_20:
// rs1==x3, rs2==x11, rd==x25, rs2_w1_val == -16385, rs1_w0_val == 16, rs1_w1_val == -8193, rs2_w0_val == -2
// opcode: maddr32 ; op1:x3; dest:x25; op1val:0xffffdfff00000010;  immval:$imm_val
TEST_RR_OP(maddr32, x25, x3, x11, 0x0000000000000000, 0xffffdfff00000010, 0xffffbffffffffffe, x5, 40, x12)

inst_21:
// rs1==x14, rs2==x8, rd==x2, rs2_w1_val == -8193, rs1_w1_val == 0
// opcode: maddr32 ; op1:x14; dest:x2; op1val:0x00000000000000;  immval:$imm_val
TEST_RR_OP(maddr32, x2, x14, x8, 0x0000000000000000, 0x00000000000000, 0xffffdfff33333333, x5, 48, x12)

inst_22:
// rs1==x20, rs2==x30, rd==x1, rs2_w1_val == -4097, rs1_w1_val == -134217729, rs2_w0_val == 8388608
// opcode: maddr32 ; op1:x20; dest:x1; op1val:0xf7ffffff0000b503;  immval:$imm_val
TEST_RR_OP(maddr32, x1, x20, x30, 0x0000000000000000, 0xf7ffffff0000b503, 0xffffefff00800000, x5, 56, x12)

inst_23:
// rs1==x27, rs2==x0, rd==x16, rs2_w1_val == -2049, rs1_w0_val == 8192, rs2_w0_val == 128
// opcode: maddr32 ; op1:x27; dest:x16; op1val:0xaaaaaaaa00002000;  immval:$imm_val
TEST_RR_OP(maddr32, x16, x27, x0, 0x0000000000000000, 0xaaaaaaaa00002000, 0xfffff7ff00000080, x5, 64, x12)

inst_24:
// rs1==x25, rs2==x7, rd==x15, rs2_w1_val == -1025, rs2_w0_val == 0
// opcode: maddr32 ; op1:x25; dest:x15; op1val:0xc000000000000006;  immval:$imm_val
TEST_RR_OP(maddr32, x15, x25, x7, 0x0000000000000000, 0xc000000000000006, 0xfffffbff00000000, x5, 72, x12)

inst_25:
// rs1==x11, rs2==x14, rd==x13, rs2_w1_val == -513, rs1_w1_val == -5, rs2_w0_val == 67108864, rs1_w0_val == -3
// opcode: maddr32 ; op1:x11; dest:x13; op1val:0xfffffffbfffffffd;  immval:$imm_val
TEST_RR_OP(maddr32, x13, x11, x14, 0x0000000000000000, 0xfffffffbfffffffd, 0xfffffdff04000000, x5, 80, x12)

inst_26:
// rs1==x4, rs2==x31, rd==x9, rs2_w1_val == -257, rs2_w0_val == 4194304, rs1_w1_val == 1073741824, rs1_w0_val == 16384
// opcode: maddr32 ; op1:x4; dest:x9; op1val:0x4000000000004000;  immval:$imm_val
TEST_RR_OP(maddr32, x9, x4, x31, 0x0000000000000000, 0x4000000000004000, 0xfffffeff00400000, x5, 88, x12)

inst_27:
// rs1==x28, rs2==x17, rd==x19, rs2_w1_val == -129, rs2_w0_val == 536870912, rs1_w0_val == -1431655766, rs1_w1_val == -17
// opcode: maddr32 ; op1:x28; dest:x19; op1val:0xffffffefaaaaaaaa;  immval:$imm_val
TEST_RR_OP(maddr32, x19, x28, x17, 0x0000000000000000, 0xffffffefaaaaaaaa, 0xffffff7f20000000, x5, 96, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_28:
// rs1==x30, rs2==x21, rd==x17, rs2_w1_val == -65, rs2_w0_val == 524288, rs1_w1_val == -32769
// opcode: maddr32 ; op1:x30; dest:x17; op1val:0xffff7fff00008000;  immval:$imm_val
TEST_RR_OP(maddr32, x17, x30, x21, 0x0000000000000000, 0xffff7fff00008000, 0xffffffbf00080000, x2, 0, x3)

inst_29:
// rs1==x1, rs2==x25, rd==x18, rs2_w1_val == -33, 
// opcode: maddr32 ; op1:x1; dest:x18; op1val:0x0000033fffffff;  immval:$imm_val
TEST_RR_OP(maddr32, x18, x1, x25, 0x0000000000000000, 0x0000033fffffff, 0xffffffdf00080000, x2, 8, x3)

inst_30:
// rs1==x31, rs2==x23, rd==x7, rs2_w1_val == -17, rs1_w1_val == 67108864, rs2_w0_val == -17
// opcode: maddr32 ; op1:x31; dest:x7; op1val:0x40000000000b503;  immval:$imm_val
TEST_RR_OP(maddr32, x7, x31, x23, 0x0000000000000000, 0x40000000000b503, 0xffffffefffffffef, x2, 16, x3)

inst_31:
// rs1==x19, rs2==x10, rd==x20, rs2_w1_val == -9, rs2_w0_val == -1, rs1_w0_val == -536870913
// opcode: maddr32 ; op1:x19; dest:x20; op1val:0x66666667dfffffff;  immval:$imm_val
TEST_RR_OP(maddr32, x20, x19, x10, 0x0000000000000000, 0x66666667dfffffff, 0xfffffff7ffffffff, x2, 24, x3)

inst_32:
// rs2_w1_val == -5, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00000900000004;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00000900000004, 0xfffffffb20000000, x2, 32, x3)

inst_33:
// rs2_w1_val == -3, rs1_w0_val == -268435457, rs2_w0_val == 8
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x000000efffffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x000000efffffff, 0xfffffffd00000008, x2, 40, x3)

inst_34:
// rs2_w1_val == -2, rs2_w0_val == 16384, rs1_w0_val == 1431655765
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xffff4afc55555555;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xffff4afc55555555, 0xfffffffe00004000, x2, 48, x3)

inst_35:
// rs2_w1_val == -2147483648, rs2_w0_val == 32, rs1_w1_val == -1048577
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xffefffffaaaaaaab;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xffefffffaaaaaaab, 0x8000000000000020, x2, 56, x3)

inst_36:
// rs2_w1_val == 1073741824, rs1_w0_val == -1073741825, rs1_w1_val == -129
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xffffff7fbfffffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xffffff7fbfffffff, 0x40000000ffffffdf, x2, 64, x3)

inst_37:
// rs2_w1_val == 536870912, rs2_w0_val == -67108865
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x3fffffffff7fffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x3fffffffff7fffff, 0x20000000fbffffff, x2, 72, x3)

inst_38:
// rs2_w1_val == 268435456, rs1_w1_val == 16777216, rs1_w0_val == 33554432
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x100000002000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x100000002000000, 0x1000000000080000, x2, 80, x3)

inst_39:
// rs2_w1_val == 134217728, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfffffff800000004;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfffffff800000004, 0x800000000000005, x2, 88, x3)

inst_40:
// rs2_w1_val == 67108864, rs1_w1_val == 2097152
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x200000c0000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x200000c0000000, 0x4000000fffffffc, x2, 96, x3)

inst_41:
// rs2_w1_val == 33554432, rs2_w0_val == 2147483647
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfffffffc33333332;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfffffffc33333332, 0x20000007fffffff, x2, 104, x3)

inst_42:
// rs2_w1_val == 16777216, rs1_w1_val == 33554432, rs2_w0_val == -129
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x2000000fffeffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x2000000fffeffff, 0x1000000ffffff7f, x2, 112, x3)

inst_43:
// rs2_w1_val == 8388608, rs1_w0_val == 1, rs1_w1_val == 32, rs2_w0_val == -32769
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00002000000001;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00002000000001, 0x800000ffff7fff, x2, 120, x3)

inst_44:
// rs2_w1_val == 4194304, rs1_w0_val == 2
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00000300000002;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00000300000002, 0x400000ffffff7f, x2, 128, x3)

inst_45:
// rs2_w1_val == 2097152, rs1_w0_val == 8, rs2_w0_val == -524289
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00002000000008;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00002000000008, 0x200000fff7ffff, x2, 136, x3)

inst_46:
// rs2_w1_val == 1048576, rs2_w0_val == 2097152
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xffdfffff80000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xffdfffff80000000, 0x10000000200000, x2, 144, x3)

inst_47:
// rs2_w1_val == 524288, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x8000000fffffff6;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x8000000fffffff6, 0x0800000000b505, x2, 152, x3)

inst_48:
// rs2_w1_val == 262144, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x6666666600000005;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x6666666600000005, 0x04000000000008, x2, 160, x3)

inst_49:
// rs2_w1_val == 131072, rs1_w0_val == -257
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00b504fffffeff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00b504fffffeff, 0x02000000000000, x2, 168, x3)

inst_50:
// rs2_w1_val == 65536, rs2_w0_val == 8192
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x200000ffff4afc;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x200000ffff4afc, 0x01000000002000, x2, 176, x3)

inst_51:
// rs2_w1_val == 32768, rs1_w0_val == 65536
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x6666666700010000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x6666666700010000, 0x008000c0000000, x2, 184, x3)

inst_52:
// rs2_w1_val == 16384, rs1_w1_val == -8388609, rs1_w0_val == -67108865
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xff7ffffffbffffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xff7ffffffbffffff, 0x00400000000008, x2, 192, x3)

inst_53:
// rs2_w1_val == 8192, rs2_w0_val == -9, rs1_w0_val == -262145
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xaaaaaaaafffbffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffbffff, 0x002000fffffff7, x2, 200, x3)

inst_54:
// rs2_w1_val == 4096, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x000006fffbffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x000006fffbffff, 0x00100033333333, x2, 208, x3)

inst_55:
// rs2_w1_val == 2048, rs1_w0_val == -134217729
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfdfffffff7ffffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfdfffffff7ffffff, 0x000800fffffffc, x2, 216, x3)

inst_56:
// rs2_w1_val == 1024, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x000009fffffff9;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x000009fffffff9, 0x00040055555556, x2, 224, x3)

inst_57:
// rs1_w0_val == 4096, rs2_w0_val == 65536
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00b50300001000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00b50300001000, 0xaaaaaaaa00010000, x2, 232, x3)

inst_58:
// rs1_w0_val == 2048, rs1_w1_val == 4
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00000400000800;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00000400000800, 0xf7fffffffffdffff, x2, 240, x3)

inst_59:
// rs1_w0_val == 1024, rs2_w0_val == -134217729, rs1_w1_val == 4096
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00100000000400;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00100000000400, 0xffffffdff7ffffff, x2, 248, x3)

inst_60:
// rs1_w0_val == 512, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00000600000200;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00000600000200, 0x3fffffff00000000, x2, 256, x3)

inst_61:
// rs1_w0_val == 256, rs2_w1_val == 4, rs2_w0_val == 1431655765
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x2000000000000100;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x2000000000000100, 0x00000455555555, x2, 264, x3)

inst_62:
// rs1_w0_val == 128, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfffffffa00000080;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000080, 0x00000900000000, x2, 272, x3)

inst_63:
// rs1_w0_val == -1, rs1_w1_val == 4194304
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x400000ffffffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x400000ffffffff, 0xf7ffffff00200000, x2, 280, x3)

inst_64:
// rs2_w1_val == 512, rs1_w1_val == 256, rs2_w0_val == -8388609
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00010055555556;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00010055555556, 0x000200ff7fffff, x2, 288, x3)

inst_65:
// rs2_w1_val == 256, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00b50400800000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00b50400800000, 0x00010080000000, x2, 296, x3)

inst_66:
// rs2_w1_val == 128, rs2_w0_val == 16777216
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00000000000200;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00000000000200, 0x00008001000000, x2, 304, x3)

inst_67:
// rs2_w1_val == 64, rs1_w0_val == 67108864
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00000004000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00000004000000, 0x00004055555555, x2, 312, x3)

inst_68:
// rs2_w1_val == 32, rs2_w0_val == 256, rs1_w0_val == -2
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x3ffffffffffffffe;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x3ffffffffffffffe, 0x00002000000100, x2, 320, x3)

inst_69:
// rs2_w1_val == 16, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00000000000005;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00000000000005, 0x000010ffffffff, x2, 328, x3)

inst_70:
// rs2_w1_val == 8, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x000007ffff4afd;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x000007ffff4afd, 0x000008ffff4afd, x2, 336, x3)

inst_71:
// rs2_w1_val == 1, rs1_w1_val == -16777217
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfeffffff00000002;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000002, 0x000001fffffeff, x2, 344, x3)

inst_72:
// rs2_w1_val == 0, rs1_w1_val == 131072
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x020000aaaaaaab;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x020000aaaaaaab, 0x0000000000b504, x2, 352, x3)

inst_73:
// rs2_w1_val == -1, rs2_w0_val == -4097, rs1_w1_val == -65
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xffffffbffffffff8;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xffffffbffffffff8, 0xffffffffffffefff, x2, 360, x3)

inst_74:
// rs2_w0_val == -1431655766, rs1_w0_val == -9
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x000000fffffff7;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x000000fffffff7, 0x00b505aaaaaaaa, x2, 368, x3)

inst_75:
// rs2_w0_val == -1073741825, rs1_w0_val == -16777217
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xffffffeffeffffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xffffffeffeffffff, 0x33333334bfffffff, x2, 376, x3)

inst_76:
// rs2_w0_val == -536870913, rs1_w1_val == 2
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x000002feffffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x000002feffffff, 0xbfffffffdfffffff, x2, 384, x3)

inst_77:
// rs2_w0_val == -33554433, rs1_w0_val == 2097152, rs1_w1_val == 16
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00001000200000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00001000200000, 0x3ffffffffdffffff, x2, 392, x3)

inst_78:
// rs2_w0_val == -4194305, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x40000000feffffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x40000000feffffff, 0xfffffdffffbfffff, x2, 400, x3)

inst_79:
// rs2_w0_val == -2097153, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x000000fbffffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x000000fbffffff, 0x040000ffdfffff, x2, 408, x3)

inst_80:
// rs2_w0_val == -1048577, rs1_w0_val == -2049
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x000004fffff7ff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x000004fffff7ff, 0x66666665ffefffff, x2, 416, x3)

inst_81:
// rs2_w0_val == -262145, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xffffdfff00000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000000, 0x7ffffffffffbffff, x2, 424, x3)

inst_82:
// rs2_w0_val == -65537, rs1_w1_val == 8
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x000008fffff7ff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x000008fffff7ff, 0x000400fffeffff, x2, 432, x3)

inst_83:
// rs2_w0_val == -16385, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfff7ffff00000006;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000006, 0x66666665ffffbfff, x2, 440, x3)

inst_84:
// rs2_w0_val == -8193, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfffffff602000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfffffff602000000, 0xfbffffffffffdfff, x2, 448, x3)

inst_85:
// rs2_w0_val == -2049, rs1_w0_val == 536870912
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfffffffb20000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfffffffb20000000, 0x100000fffff7ff, x2, 456, x3)

inst_86:
// rs2_w0_val == -1025, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x5555555500000001;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x5555555500000001, 0x010000fffffbff, x2, 464, x3)

inst_87:
// rs2_w0_val == -513, rs1_w0_val == -16385
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x40000000ffffbfff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x40000000ffffbfff, 0x000004fffffdff, x2, 472, x3)

inst_88:
// rs2_w0_val == -65, rs1_w1_val == -513
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfffffdff02000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfffffdff02000000, 0x00b503ffffffbf, x2, 480, x3)

inst_89:
// rs2_w0_val == -5, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x4000000000000005;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x4000000000000005, 0x000100fffffffb, x2, 488, x3)

inst_90:
// rs2_w0_val == -3, rs1_w1_val == 524288
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x080000ffffefff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x080000ffffefff, 0x000007fffffffd, x2, 496, x3)

inst_91:
// rs2_w0_val == 1073741824, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00000000000008;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00000000000008, 0x00000140000000, x2, 504, x3)

inst_92:
// rs2_w0_val == 268435456, rs1_w0_val == 1073741824
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00000440000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00000440000000, 0xbfffffff10000000, x2, 512, x3)

inst_93:
// rs2_w0_val == 64, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x33333332fffdffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x33333332fffdffff, 0x00b50300000040, x2, 520, x3)

inst_94:
// rs2_w0_val == 16, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00001000000005;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00001000000005, 0x20000000000010, x2, 528, x3)

inst_95:
// rs2_w0_val == 4, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00000455555555;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00000455555555, 0xfffffff800000004, x2, 536, x3)

inst_96:
// rs2_w0_val == 2, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x000006dfffffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x000006dfffffff, 0x00000200000002, x2, 544, x3)

inst_97:
// rs2_w0_val == 1, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00000240000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00000240000000, 0x00001000000001, x2, 552, x3)

inst_98:
// rs1_w1_val == 2147483647, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x7fffffffffff4afd;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x7fffffffffff4afd, 0xfffdffff00000004, x2, 560, x3)

inst_99:
// rs1_w1_val == -1073741825, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xbfffffff0000b505;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xbfffffff0000b505, 0xfeffffffff7fffff, x2, 568, x3)

inst_100:
// rs1_w1_val == -536870913, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xdfffffff00000007;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000007, 0xfbffffffffffffdf, x2, 576, x3)

inst_101:
// rs1_w1_val == -67108865, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfbfffffffbffffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfbfffffffbffffff, 0xdfffffffff7fffff, x2, 584, x3)

inst_102:
// rs1_w1_val == -4194305, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xffbfffff10000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xffbfffff10000000, 0xfffdffff00200000, x2, 592, x3)

inst_103:
// rs1_w1_val == -262145, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfffbffff00004000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00004000, 0xfffffffcffff4afd, x2, 600, x3)

inst_104:
// rs1_w1_val == -65537, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfffeffff00000003;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000003, 0x00800080000000, x2, 608, x3)

inst_105:
// rs1_w1_val == -16385, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xffffbfff00010000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00010000, 0x4000000ffff4afd, x2, 616, x3)

inst_106:
// rs1_w1_val == -4097, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xffffefff66666665;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xffffefff66666665, 0x80000066666666, x2, 624, x3)

inst_107:
// rs1_w1_val == -2049, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfffff7ff02000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff02000000, 0xfffffff9fffffffe, x2, 632, x3)

inst_108:
// rs1_w1_val == -1025, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfffffbff00000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000000, 0xffffefff00000000, x2, 640, x3)

inst_109:
// rs1_w1_val == -257, rs1_w0_val == 131072
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfffffeff00020000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00020000, 0x0000033fffffff, x2, 648, x3)

inst_110:
// rs1_w1_val == -33, rs1_w0_val == -65
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xffffffdfffffffbf;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xffffffdfffffffbf, 0x000005ffff4afd, x2, 656, x3)

inst_111:
// rs1_w1_val == -9, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfffffff700000010;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfffffff700000010, 0xfffffffefeffffff, x2, 664, x3)

inst_112:
// rs1_w1_val == -3, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfffffffd00000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000000, 0x000040fffffeff, x2, 672, x3)

inst_113:
// rs1_w1_val == -2, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfffffffe00000100;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000100, 0x000006ffff4afc, x2, 680, x3)

inst_114:
// rs1_w1_val == -2147483648, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x8000000055555556;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x8000000055555556, 0x00000101000000, x2, 688, x3)

inst_115:
// rs1_w1_val == 268435456, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x1000000020000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x1000000020000000, 0xfffffeff33333334, x2, 696, x3)

inst_116:
// rs1_w1_val == 8388608, rs2_w0_val == 33554432
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x800000fffdffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x800000fffdffff, 0x5555555602000000, x2, 704, x3)

inst_117:
// rs1_w1_val == 1048576, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x100000ffffffef;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x100000ffffffef, 0xffbfffff55555555, x2, 712, x3)

inst_118:
// rs1_w1_val == 262144, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x04000000000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x04000000000000, 0x000020fffbffff, x2, 720, x3)

inst_119:
// rs1_w1_val == 65536, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x010000feffffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x010000feffffff, 0x00b50533333334, x2, 728, x3)

inst_120:
// rs1_w1_val == 32768, rs1_w0_val == 2147483647
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x0080007fffffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x0080007fffffff, 0xffffff7f00080000, x2, 736, x3)

inst_121:
// rs1_w1_val == 1024, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00040066666667;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00040066666667, 0x040000fffffeff, x2, 744, x3)

inst_122:
// rs1_w1_val == 512, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00020000000009;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00020000000009, 0xaaaaaaabaaaaaaab, x2, 752, x3)

inst_123:
// rs1_w1_val == 128, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00008055555555;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00008055555555, 0xffff7ffffffffeff, x2, 760, x3)

inst_124:
// rs1_w1_val == 64, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00004000800000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00004000800000, 0x000010ffffefff, x2, 768, x3)

inst_125:
// rs1_w1_val == 1, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00000100200000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00000100200000, 0x000005fffffff9, x2, 776, x3)

inst_126:
// rs1_w1_val == -1, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xffffffff55555556;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xffffffff55555556, 0xfffefffffffffffe, x2, 784, x3)

inst_127:
// rs1_w0_val == -2097153, rs2_w0_val == 512
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x000009ffdfffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x000009ffdfffff, 0xfffffffa00000200, x2, 792, x3)

inst_128:
// rs1_w1_val == 8192, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x002000fffffffe;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x002000fffffffe, 0x6666666700000020, x2, 800, x3)

inst_129:
// rs1_w0_val == -1048577, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x100000ffefffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x100000ffefffff, 0xfffffffbffffbfff, x2, 808, x3)

inst_130:
// rs1_w0_val == -524289, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x7ffffffffff7ffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x7ffffffffff7ffff, 0xbfffffff00400000, x2, 816, x3)

inst_131:
// rs1_w0_val == -32769, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x000009ffff7fff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x000009ffff7fff, 0x666666653fffffff, x2, 824, x3)

inst_132:
// rs1_w0_val == -8193, rs1_w1_val == 2048
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x000800ffffdfff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x000800ffffdfff, 0x04000004000000, x2, 832, x3)

inst_133:
// rs1_w0_val == -1025, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x000400fffffbff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x000400fffffbff, 0x00b5030000b504, x2, 840, x3)

inst_134:
// rs1_w0_val == -513, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x000000fffffdff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x000000fffffdff, 0xffff4afd00000006, x2, 848, x3)

inst_135:
// rs1_w0_val == -33, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x001000ffffffdf;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x001000ffffffdf, 0xfffffffd00000040, x2, 856, x3)

inst_136:
// rs2_w0_val == 4096, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00b50400000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00b50400000000, 0x01000000001000, x2, 864, x3)

inst_137:
// rs2_w0_val == 134217728, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x000004fffffffd;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x000004fffffffd, 0xfffffff608000000, x2, 872, x3)

inst_138:
// rs1_w0_val == -5, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x000003fffffffb;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x000003fffffffb, 0x0000070000b503, x2, 880, x3)

inst_139:
// rs2_w0_val == 1048576, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00100000000007;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00100000000007, 0xffffefff00100000, x2, 888, x3)

inst_140:
// rs1_w0_val == 134217728, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00000808000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00000808000000, 0x3ffffffffeffffff, x2, 896, x3)

inst_141:
// rs2_w0_val == 262144, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00000655555556;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00000655555556, 0xffffff7f00040000, x2, 904, x3)

inst_142:
// rs2_w0_val == 131072, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xaaaaaaaaffffdfff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffffdfff, 0xfffffffe00020000, x2, 912, x3)

inst_143:
// rs1_w0_val == 16777216, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00000601000000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00000601000000, 0xfffffff6fff7ffff, x2, 920, x3)

inst_144:
// rs1_w0_val == 4194304, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00000800400000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00000800400000, 0x00400000000002, x2, 928, x3)

inst_145:
// rs1_w0_val == 1048576, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x00b50500100000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x00b50500100000, 0xfffffffbf7ffffff, x2, 936, x3)

inst_146:
// rs1_w0_val == 524288, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xefffffff00080000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xefffffff00080000, 0x08000000008000, x2, 944, x3)

inst_147:
// rs2_w0_val == 2048, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x000002fffffff6;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x000002fffffff6, 0xefffffff00000800, x2, 952, x3)

inst_148:
// rs2_w0_val == 1024, 
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x002000ffff7fff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x002000ffff7fff, 0xfffffffb00000400, x2, 960, x3)

inst_149:
// rs2_w1_val == 1431655765, rs1_w1_val == -2097153, rs1_w0_val == -129
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xffdfffffffffff7f;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xffdfffffffffff7f, 0x55555555ffff4afc, x2, 968, x3)

inst_150:
// rs2_w1_val == -268435457, rs2_w0_val == -33, rs1_w0_val == 262144
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xfffffff600040000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xfffffff600040000, 0xefffffffffffffdf, x2, 976, x3)

inst_151:
// rs2_w1_val == -134217729, rs1_w0_val == -33554433, rs2_w0_val == -131073
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0x33333334fdffffff;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0x33333334fdffffff, 0xf7fffffffffdffff, x2, 984, x3)

inst_152:
// rs2_w1_val == -2049, rs1_w0_val == 8192, rs2_w0_val == 128
// opcode: maddr32 ; op1:x30; dest:x31; op1val:0xaaaaaaaa00002000;  immval:$imm_val
TEST_RR_OP(maddr32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00002000, 0xfffff7ff00000080, x2, 992, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 13*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 125*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
