
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kadd8 instruction of the RISC-V RV64PZicsr extension for the kadd8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kadd8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x0, rs2==x24, rd==x0, rs1_b0_val == -128, rs1_b7_val != rs2_b7_val, rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b5_val == -128, rs1_b6_val != rs2_b6_val, rs2_b3_val == -2, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b5_val != rs2_b5_val, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b4_val != rs2_b4_val, rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b3_val != rs2_b3_val, rs1_b4_val == 16, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b2_val != rs2_b2_val, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val > 0, rs2_b1_val == -1, rs1_b2_val == 64, rs2_b6_val == 85, rs1_b1_val == 0, rs2_b5_val == 8
// opcode: kadd8 ; op1:x0; op2:x24; dest:x0; op1val:0xc0038010fa400080;  op2val:0x3f550807fe07ff03
TEST_PKRR_OP(kadd8, x0, x0, x24, 0x0000000000000000, 0xc0038010fa400080, 0x3f550807fe07ff03, x0, x6, 0, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x18, rs2==x31, rd==x3, rs1_b7_val == rs2_b7_val, rs1_b2_val < 0 and rs2_b2_val < 0, rs2_b6_val == -86, rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b5_val == 4, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b6_val > 0 and rs2_b6_val < 0, rs1_b1_val == 85, rs1_b5_val > 0 and rs2_b5_val < 0, rs2_b7_val == 85, rs1_b7_val == 85, rs1_b4_val < 0 and rs2_b4_val > 0, rs2_b4_val == 4, rs1_b0_val == -86, rs2_b2_val == -2
// opcode: kadd8 ; op1:x18; op2:x31; dest:x3; op1val:0x553f04fcc0f655aa;  op2val:0x55aafc04f6fe0705
TEST_PKRR_OP(kadd8, x3, x18, x31, 0x0000000000000000, 0x553f04fcc0f655aa, 0x55aafc04f6fe0705, x18, x6, 16, x2)

inst_2:
// rs1 == rs2 != rd, rs1==x11, rs2==x11, rd==x23, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b0_val == -65, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b4_val == -17, rs2_b3_val == 0, rs2_b2_val == 127, rs2_b7_val == -5, rs2_b4_val == 32, rs2_b5_val == -33, rs1_b5_val == -17, rs1_b7_val == -5
// opcode: kadd8 ; op1:x11; op2:x11; dest:x23; op1val:0xfbfcefef3f05fabf;  op2val:0xfb07df20007f3f03
TEST_PKRR_OP(kadd8, x23, x11, x11, 0x0000000000000000, 0xfbfcefef3f05fabf, 0xfb07df20007f3f03, x11, x6, 32, x2)

inst_3:
// rs1 == rs2 == rd, rs1==x15, rs2==x15, rd==x15, rs1_b7_val > 0 and rs2_b7_val < 0, rs2_b4_val == -1, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b3_val == -86, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b0_val == -1, rs2_b6_val == 16, rs1_b1_val == -128, rs1_b3_val == -1, rs2_b7_val == -17, rs1_b4_val > 0 and rs2_b4_val < 0, rs1_b4_val == 32, rs1_b2_val == -17
// opcode: kadd8 ; op1:x15; op2:x15; dest:x15; op1val:0x609f820ffef80ff;  op2val:0xef1003ffaa0705f9
TEST_PKRR_OP(kadd8, x15, x15, x15, 0x0000000000000000, 0x609f820ffef80ff, 0xef1003ffaa0705f9, x15, x6, 48, x2)

inst_4:
// rs2 == rd != rs1, rs1==x12, rs2==x9, rd==x9, rs1_b6_val == rs2_b6_val, rs2_b5_val == -5, rs2_b2_val == 8, rs1_b0_val == -5, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b5_val == 2, rs2_b0_val == 16, rs1_b1_val == -65, rs2_b3_val == 32, rs2_b1_val == -2, rs2_b6_val == 8, rs1_b6_val == 8, rs1_b3_val < 0 and rs2_b3_val > 0
// opcode: kadd8 ; op1:x12; op2:x9; dest:x9; op1val:0xf908023fc0fabffb;  op2val:0x708fbc02008fe10
TEST_PKRR_OP(kadd8, x9, x12, x9, 0x0000000000000000, 0xf908023fc0fabffb, 0x708fbc02008fe10, x12, x6, 64, x2)

inst_5:
// rs1==x13, rs2==x26, rd==x29, rs1_b6_val < 0 and rs2_b6_val < 0, rs2_b0_val == -17, rs1_b6_val == -86, rs2_b2_val == 1, rs2_b5_val == 0, rs1_b5_val == 0, rs1_b5_val == rs2_b5_val, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b1_val == -17, rs2_b4_val == -5, rs1_b4_val < 0 and rs2_b4_val < 0, rs2_b6_val == -1, rs1_b7_val == 64, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b2_val == -2, rs1_b0_val == 127
// opcode: kadd8 ; op1:x13; op2:x26; dest:x29; op1val:0x40aa00f809feef7f;  op2val:0xfcff00fbf80105ef
TEST_PKRR_OP(kadd8, x29, x13, x26, 0x0000000000000000, 0x40aa00f809feef7f, 0xfcff00fbf80105ef, x13, x6, 80, x2)

inst_6:
// rs1==x20, rs2==x30, rd==x18, rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b2_val == 32, rs1_b5_val == 32, rs1_b0_val == -3, rs2_b5_val == 1, rs1_b6_val == -128, rs1_b3_val == 0, rs1_b4_val == rs2_b4_val, rs2_b1_val == 64, rs1_b2_val == -86, rs2_b7_val == 16, rs2_b4_val == 1, rs1_b4_val == 1
// opcode: kadd8 ; op1:x20; op2:x30; dest:x18; op1val:0x780200100aa80fd;  op2val:0x10090101f92040fa
TEST_PKRR_OP(kadd8, x18, x20, x30, 0x0000000000000000, 0x780200100aa80fd, 0x10090101f92040fa, x20, x6, 96, x2)

inst_7:
// rs1==x14, rs2==x4, rd==x1, rs1_b3_val == rs2_b3_val, rs1_b6_val == -1, rs1_b0_val == 32, rs2_b4_val == 127, rs2_b6_val == -128, rs1_b7_val == -65, rs2_b1_val == 4, rs1_b4_val == 8, rs1_b1_val == -1, rs2_b0_val == -86, rs1_b3_val > 0 and rs2_b3_val > 0
// opcode: kadd8 ; op1:x14; op2:x4; dest:x1; op1val:0xbfff800806c0ff20;  op2val:0x780007f063f04aa
TEST_PKRR_OP(kadd8, x1, x14, x4, 0x0000000000000000, 0xbfff800806c0ff20, 0x780007f063f04aa, x14, x6, 112, x2)

inst_8:
// rs1==x19, rs2==x5, rd==x28, rs1_b2_val == rs2_b2_val, rs1_b3_val == 127, rs1_b7_val == -3, rs1_b0_val == 64, rs1_b1_val > 0 and rs2_b1_val < 0, rs2_b6_val == -9, rs2_b4_val == -128, rs1_b4_val == 64, rs2_b5_val == -86, rs1_b1_val == 8
// opcode: kadd8 ; op1:x19; op2:x5; dest:x28; op1val:0xfdf980407f070840;  op2val:0x10f7aa800307fafc
TEST_PKRR_OP(kadd8, x28, x19, x5, 0x0000000000000000, 0xfdf980407f070840, 0x10f7aa800307fafc, x19, x6, 128, x2)

inst_9:
// rs1==x5, rs2==x20, rd==x13, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b5_val == -5, rs2_b5_val == -1, rs1_b3_val == 2, rs2_b1_val == 16, rs2_b2_val == -33
// opcode: kadd8 ; op1:x5; op2:x20; dest:x13; op1val:0x55fffbfc023fc0f8;  op2val:0xf8fcff7ffcdf103f
TEST_PKRR_OP(kadd8, x13, x5, x20, 0x0000000000000000, 0x55fffbfc023fc0f8, 0xf8fcff7ffcdf103f, x5, x6, 144, x2)

inst_10:
// rs1==x1, rs2==x21, rd==x5, rs1_b1_val == rs2_b1_val, rs2_b7_val == 2, rs1_b2_val == 16, rs1_b6_val == -65, rs2_b6_val == -33, rs2_b3_val == -3, rs2_b1_val == -86, rs1_b1_val == -86, rs1_b3_val == 32, rs2_b0_val == -1, rs1_b5_val == -33
// opcode: kadd8 ; op1:x1; op2:x21; dest:x5; op1val:0x40bfdf072010aaf9;  op2val:0x2df0809fdf6aaff
TEST_PKRR_OP(kadd8, x5, x1, x21, 0x0000000000000000, 0x40bfdf072010aaf9, 0x2df0809fdf6aaff, x1, x6, 160, x2)

inst_11:
// rs1==x21, rs2==x16, rd==x12, rs1_b0_val == rs2_b0_val, rs2_b3_val == -5, rs1_b5_val == 1, rs2_b6_val == 2, rs2_b5_val == 85, rs1_b2_val == -128
// opcode: kadd8 ; op1:x21; op2:x16; dest:x12; op1val:0xf90501060580aafc;  op2val:0xfb0255f9fb03f9fc
TEST_PKRR_OP(kadd8, x12, x21, x16, 0x0000000000000000, 0xf90501060580aafc, 0xfb0255f9fb03f9fc, x21, x6, 176, x2)

inst_12:
// rs1==x31, rs2==x8, rd==x25, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b7_val == 2, rs2_b7_val == 1, rs2_b3_val == -65, rs1_b3_val == -17, rs2_b0_val == 64, rs1_b0_val == 4, rs2_b1_val == 32
// opcode: kadd8 ; op1:x31; op2:x8; dest:x25; op1val:0x2050910efaabf04;  op2val:0x11000fabffe2040
TEST_PKRR_OP(kadd8, x25, x31, x8, 0x0000000000000000, 0x2050910efaabf04, 0x11000fabffe2040, x31, x6, 192, x2)

inst_13:
// rs1==x9, rs2==x0, rd==x17, rs2_b7_val == -86, rs1_b7_val == 1, rs2_b5_val == 32, rs1_b6_val == -17, rs1_b3_val == -128, rs2_b1_val == -33, rs2_b3_val == 8, rs2_b6_val == 4, rs1_b4_val == -5, rs1_b5_val == 127, rs1_b0_val == 85
// opcode: kadd8 ; op1:x9; op2:x0; dest:x17; op1val:0x1ef7ffb80050655;  op2val:0xaa042020087fdff6
TEST_PKRR_OP(kadd8, x17, x9, x0, 0x0000000000000000, 0x1ef7ffb80050655, 0xaa042020087fdff6, x9, x6, 208, x2)

inst_14:
// rs1==x26, rs2==x10, rd==x24, rs2_b7_val == 127, rs1_b2_val == 1, rs1_b6_val == 64, rs2_b4_val == -33, rs1_b1_val == -3, rs2_b6_val == 1, rs1_b4_val == 0
// opcode: kadd8 ; op1:x26; op2:x10; dest:x24; op1val:0x7400200fc01fdfd;  op2val:0x7f0105dfaaf9033f
TEST_PKRR_OP(kadd8, x24, x26, x10, 0x0000000000000000, 0x7400200fc01fdfd, 0x7f0105dfaaf9033f, x26, x6, 224, x2)

inst_15:
// rs1==x29, rs2==x1, rd==x2, rs2_b7_val == -65, rs1_b3_val == 85, rs1_b5_val == 64, rs2_b6_val == -5, rs1_b0_val == 2, rs1_b7_val == -17, rs2_b4_val == 2, rs2_b5_val == -17
// opcode: kadd8 ; op1:x29; op2:x1; dest:x2; op1val:0xef09400355c0f802;  op2val:0xbffbef020001fe09
TEST_PKRR_OP(kadd8, x2, x29, x1, 0x0000000000000000, 0xef09400355c0f802, 0xbffbef020001fe09, x29, x6, 240, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:
// rs1==x2, rs2==x3, rd==x20, rs2_b7_val == -33, rs1_b7_val == 0, rs2_b5_val == 64, rs2_b0_val == 32, rs2_b6_val == 64, rs1_b6_val == 32, rs1_b3_val == 4, rs1_b4_val == -2, rs1_b2_val == 127
// opcode: kadd8 ; op1:x2; op2:x3; dest:x20; op1val:0x2000fe047f0309;  op2val:0xdf40407f077f0320
TEST_PKRR_OP(kadd8, x20, x2, x3, 0x0000000000000000, 0x2000fe047f0309, 0xdf40407f077f0320, x2, x1, 0, x5)

inst_17:
// rs1==x7, rs2==x18, rd==x14, rs2_b7_val == -9, rs2_b3_val == 127, rs2_b0_val == 1, rs2_b4_val == 85, rs1_b1_val == 64, rs1_b6_val == 0, rs2_b2_val == -5
// opcode: kadd8 ; op1:x7; op2:x18; dest:x14; op1val:0xf900f9fc04f640aa;  op2val:0xf70655557ffb0601
TEST_PKRR_OP(kadd8, x14, x7, x18, 0x0000000000000000, 0xf900f9fc04f640aa, 0xf70655557ffb0601, x7, x1, 16, x5)

inst_18:
// rs1==x24, rs2==x7, rd==x10, rs2_b7_val == -3, rs2_b5_val == -3, rs1_b3_val == -65, rs2_b1_val == -65, rs2_b4_val == -2, rs1_b5_val == -86
// opcode: kadd8 ; op1:x24; op2:x7; dest:x10; op1val:0x109aaf8bf09c0ff;  op2val:0xfd3ffdfe3f05bff9
TEST_PKRR_OP(kadd8, x10, x24, x7, 0x0000000000000000, 0x109aaf8bf09c0ff, 0xfd3ffdfe3f05bff9, x24, x1, 32, x5)

inst_19:
// rs1==x25, rs2==x23, rd==x30, rs2_b7_val == -2, rs2_b3_val == 1, rs2_b1_val == 0, rs1_b5_val == -9
// opcode: kadd8 ; op1:x25; op2:x23; dest:x30; op1val:0xf609f7efbf09aa20;  op2val:0xfec0dffb01f80010
TEST_PKRR_OP(kadd8, x30, x25, x23, 0x0000000000000000, 0xf609f7efbf09aa20, 0xfec0dffb01f80010, x25, x1, 48, x5)

inst_20:
// rs1==x8, rs2==x29, rd==x16, rs2_b7_val == -128, rs2_b5_val == -2, rs1_b3_val == 8, rs1_b1_val == 32, rs1_b4_val == 4, rs1_b7_val == 16
// opcode: kadd8 ; op1:x8; op2:x29; dest:x16; op1val:0x103ff70408f920fa;  op2val:0x80fbfefac0fe05fa
TEST_PKRR_OP(kadd8, x16, x8, x29, 0x0000000000000000, 0x103ff70408f920fa, 0x80fbfefac0fe05fa, x8, x1, 64, x5)

inst_21:
// rs1==x22, rs2==x13, rd==x26, rs2_b7_val == 64, rs1_b4_val == -9, rs1_b3_val == 1, rs2_b0_val == -9, rs2_b2_val == 0
// opcode: kadd8 ; op1:x22; op2:x13; dest:x26; op1val:0x100607f701fef655;  op2val:0x400708090300aaf7
TEST_PKRR_OP(kadd8, x26, x22, x13, 0x0000000000000000, 0x100607f701fef655, 0x400708090300aaf7, x22, x1, 80, x5)

inst_22:
// rs1==x4, rs2==x28, rd==x19, rs2_b7_val == 32, rs2_b1_val == -128
// opcode: kadd8 ; op1:x4; op2:x28; dest:x19; op1val:0xf6fa0204f6f63ffd;  op2val:0x20fbaa80fbf98040
TEST_PKRR_OP(kadd8, x19, x4, x28, 0x0000000000000000, 0xf6fa0204f6f63ffd, 0x20fbaa80fbf98040, x4, x1, 96, x5)

inst_23:
// rs1==x30, rs2==x12, rd==x21, rs2_b7_val == 8, rs1_b6_val == 85
// opcode: kadd8 ; op1:x30; op2:x12; dest:x21; op1val:0xef55070709ef8080;  op2val:0x8c0fd05fa0910f7
TEST_PKRR_OP(kadd8, x21, x30, x12, 0x0000000000000000, 0xef55070709ef8080, 0x8c0fd05fa0910f7, x30, x1, 112, x5)

inst_24:
// rs1==x16, rs2==x6, rd==x11, rs2_b7_val == 4, rs2_b3_val == -9, rs1_b2_val == -1, rs1_b6_val == -9, rs2_b1_val == -17, rs2_b0_val == 0, rs1_b0_val == 0, rs2_b2_val == -86, rs2_b4_val == 8
// opcode: kadd8 ; op1:x16; op2:x6; dest:x11; op1val:0xfdf7800406ff0600;  op2val:0x43f5508f7aaef00
TEST_PKRR_OP(kadd8, x11, x16, x6, 0x0000000000000000, 0xfdf7800406ff0600, 0x43f5508f7aaef00, x16, x1, 128, x5)

inst_25:
// rs1==x27, rs2==x22, rd==x8, rs2_b7_val == 0, rs1_b4_val == -33, rs1_b1_val == 127, rs1_b2_val == -3, rs2_b0_val == -3
// opcode: kadd8 ; op1:x27; op2:x22; dest:x8; op1val:0xfc0304df08fd7f80;  op2val:0x0555fa06f905fd
TEST_PKRR_OP(kadd8, x8, x27, x22, 0x0000000000000000, 0xfc0304df08fd7f80, 0x0555fa06f905fd, x27, x1, 144, x5)

inst_26:
// rs1==x17, rs2==x19, rd==x22, rs2_b7_val == -1, rs1_b2_val == 8, rs1_b7_val == -1, rs2_b3_val == -33, rs2_b6_val == -17, rs1_b3_val == 64
// opcode: kadd8 ; op1:x17; op2:x19; dest:x22; op1val:0xfff7fb0640082006;  op2val:0xffeffe20dffbbf10
TEST_PKRR_OP(kadd8, x22, x17, x19, 0x0000000000000000, 0xfff7fb0640082006, 0xffeffe20dffbbf10, x17, x1, 160, x5)

inst_27:
// rs1==x6, rs2==x14, rd==x27, rs1_b5_val == -3, rs2_b0_val == -33, rs1_b3_val == -3, rs1_b7_val == -86, rs1_b6_val == 2, rs1_b2_val == -33
// opcode: kadd8 ; op1:x6; op2:x14; dest:x27; op1val:0xaa02fdf7fddffcfb;  op2val:0xdf06aa06fcc006df
TEST_PKRR_OP(kadd8, x27, x6, x14, 0x0000000000000000, 0xaa02fdf7fddffcfb, 0xdf06aa06fcc006df, x6, x1, 176, x5)

inst_28:
// rs1==x23, rs2==x17, rd==x31, rs1_b5_val == -2, rs1_b1_val == -5, rs2_b3_val == 85, rs1_b6_val == 4, rs2_b0_val == -128
// opcode: kadd8 ; op1:x23; op2:x17; dest:x31; op1val:0x304fefbff7ffb04;  op2val:0x4001053f55f63f80
TEST_PKRR_OP(kadd8, x31, x23, x17, 0x0000000000000000, 0x304fefbff7ffb04, 0x4001053f55f63f80, x23, x1, 192, x5)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_29:
// rs1==x10, rs2==x25, rd==x6, rs1_b5_val == 16, rs2_b0_val == -5, rs1_b0_val == 16, rs2_b4_val == -65, rs1_b2_val == 85, rs1_b7_val == 32
// opcode: kadd8 ; op1:x10; op2:x25; dest:x6; op1val:0x2040103f0155ef10;  op2val:0xbffafcbf090880fb
TEST_PKRR_OP(kadd8, x6, x10, x25, 0x0000000000000000, 0x2040103f0155ef10, 0xbffafcbf090880fb, x10, x1, 0, x5)

inst_30:
// rs1==x3, rs2==x27, rd==x7, rs1_b5_val == 8, rs1_b0_val == -2, rs1_b2_val == 0, rs2_b3_val == 2, rs1_b6_val == 16, rs2_b4_val == -9, rs1_b7_val == -128, rs2_b0_val == 127
// opcode: kadd8 ; op1:x3; op2:x27; dest:x7; op1val:0x801008df7f0000fe;  op2val:0xdf3f05f70208107f
TEST_PKRR_OP(kadd8, x7, x3, x27, 0x0000000000000000, 0x801008df7f0000fe, 0xdf3f05f70208107f, x3, x1, 16, x5)

inst_31:
// rs1==x28, rs2==x2, rd==x4, rs1_b5_val == -1, rs1_b0_val == 1
// opcode: kadd8 ; op1:x28; op2:x2; dest:x4; op1val:0xfd40ffc00007ff01;  op2val:0xaa0508fb070520f8
TEST_PKRR_OP(kadd8, x4, x28, x2, 0x0000000000000000, 0xfd40ffc00007ff01, 0xaa0508fb070520f8, x28, x1, 32, x5)

inst_32:
// rs1_b4_val == -86, rs1_b1_val == -33, rs2_b6_val == -3
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0027faa0510df04;  op2val:0xdffdaa09000004fc
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xc0027faa0510df04, 0xdffdaa09000004fc, x30, x1, 48, x5)

inst_33:
// rs1_b4_val == 85, rs1_b1_val == 4, rs1_b6_val == -2
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe005502550420;  op2val:0x7fc00f90320c0f9
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xfe005502550420, 0x7fc00f90320c0f9, x30, x1, 64, x5)

inst_34:
// rs1_b4_val == 127, rs1_b3_val == -86, rs1_b0_val == -33
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfafe047faa0909df;  op2val:0x20effc7f3f03aadf
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xfafe047faa0909df, 0x20effc7f3f03aadf, x30, x1, 80, x5)

inst_35:
// rs1_b4_val == -65, rs1_b7_val == -2, rs2_b4_val == 16, rs2_b5_val == -9
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff80bff9fabffa;  op2val:0xef03f710060109fa
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xfeff80bff9fabffa, 0xef03f710060109fa, x30, x1, 96, x5)

inst_36:
// rs1_b4_val == -3, rs2_b5_val == 16, rs2_b3_val == 4, rs2_b1_val == 8, rs2_b4_val == 64, rs1_b5_val == -65
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x55efbffdeffc3f01;  op2val:0x1005104004fe083f
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x55efbffdeffc3f01, 0x1005104004fe083f, x30, x1, 112, x5)

inst_37:
// rs1_b4_val == -128, rs1_b2_val == 32, rs2_b1_val == -3
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x955f9805520ef00;  op2val:0x09fb04fd08fdf7
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x955f9805520ef00, 0x09fb04fd08fdf7, x30, x1, 128, x5)

inst_38:
// rs1_b4_val == 2, rs2_b2_val == 4, rs1_b3_val == -2, rs2_b0_val == 4, rs1_b6_val == -5, rs2_b6_val == -2
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x2fb0002fe05fd10;  op2val:0xf7fec0bfdf04fe04
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x2fb0002fe05fd10, 0xf7fec0bfdf04fe04, x30, x1, 144, x5)

inst_39:
// rs1_b4_val == -1, rs2_b6_val == 0
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfc10bfff20dfeffb;  op2val:0xc000050902fc2010
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xfc10bfff20dfeffb, 0xc000050902fc2010, x30, x1, 160, x5)

inst_40:
// rs1_b3_val == -33, rs1_b0_val == -17, rs2_b2_val == -128
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa807f40dfef07ef;  op2val:0xc055ef4004800310
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xfa807f40dfef07ef, 0xc055ef4004800310, x30, x1, 176, x5)

inst_41:
// rs1_b3_val == -9, rs2_b5_val == 2, rs2_b3_val == -1
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x100001dff74006f8;  op2val:0xef020210fffcbf7f
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x100001dff74006f8, 0xef020210fffcbf7f, x30, x1, 192, x5)

inst_42:
// rs2_b3_val == -17, rs1_b7_val == 8, rs1_b1_val == 16, rs1_b2_val == -5, rs2_b2_val == -3, rs2_b4_val == 0
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x8f708fa3ffb1080;  op2val:0xeffefd00effdf904
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x8f708fa3ffb1080, 0xeffefd00effdf904, x30, x1, 208, x5)

inst_43:
// rs2_b3_val == -128, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xef40f7eff8fb40bf;  op2val:0x6f73fc080fa0780
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xef40f7eff8fb40bf, 0x6f73fc080fa0780, x30, x1, 224, x5)

inst_44:
// rs2_b3_val == 64, rs1_b2_val == -65, rs2_b1_val == 127
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0ef8004ffbf003f;  op2val:0x140f6c040807ff8
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xc0ef8004ffbf003f, 0x140f6c040807ff8, x30, x1, 240, x5)

inst_45:
// rs2_b3_val == 16, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x2f9fb01dfbfbff8;  op2val:0x1f6ef0910c0f9f7
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x2f9fb01dfbfbff8, 0x1f6ef0910c0f9f7, x30, x1, 256, x5)

inst_46:
// rs2_b2_val == 85, rs2_b0_val == -2
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf6bfc0df80f6bfff;  op2val:0xfaef08f8aa55f6fe
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xf6bfc0df80f6bfff, 0xfaef08f8aa55f6fe, x30, x1, 272, x5)

inst_47:
// rs2_b2_val == -65, rs2_b0_val == -65, rs1_b3_val == 16, rs2_b1_val == -9
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf83ffef610aa1020;  op2val:0xfb060308fdbff7bf
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xf83ffef610aa1020, 0xfb060308fdbff7bf, x30, x1, 288, x5)

inst_48:
// rs2_b2_val == -17, rs2_b1_val == 2, rs1_b2_val == -9
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70703dff7bf05;  op2val:0xef01aabffcef0205
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xfff70703dff7bf05, 0xef01aabffcef0205, x30, x1, 304, x5)

inst_49:
// rs2_b2_val == -9, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf61003f7f6107f01;  op2val:0x45520fa10f740f9
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xf61003f7f6107f01, 0x45520fa10f740f9, x30, x1, 320, x5)

inst_50:
// rs2_b2_val == 64, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfefc40f640f7bf07;  op2val:0xdfaa05070140fcfd
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xfefc40f640f7bf07, 0xdfaa05070140fcfd, x30, x1, 336, x5)

inst_51:
// rs2_b2_val == 16, rs1_b1_val == 2, rs1_b7_val == -33
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf0608ff09060240;  op2val:0xfdefdff7ff100904
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xdf0608ff09060240, 0xfdefdff7ff100904, x30, x1, 352, x5)

inst_52:
// rs2_b2_val == 2, rs2_b1_val == 85
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x8080c00101c0bf01;  op2val:0x05000809025580
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x8080c00101c0bf01, 0x05000809025580, x30, x1, 368, x5)

inst_53:
// rs1_b3_val == -5, rs1_b5_val == 85, rs2_b0_val == 85
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x1085540fb06f8ef;  op2val:0x3102009fef91055
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x1085540fb06f8ef, 0x3102009fef91055, x30, x1, 384, x5)

inst_54:
// rs1_b2_val == 4, rs1_b1_val == -2
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xc008fdfcfb04fefa;  op2val:0x20050602010508f7
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xc008fdfcfb04fefa, 0x20050602010508f7, x30, x1, 400, x5)

inst_55:
// rs1_b2_val == 2, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x9027ffffe021005;  op2val:0x40602fa0508ff05
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x9027ffffe021005, 0x40602fa0508ff05, x30, x1, 416, x5)

inst_56:
// rs2_b6_val == 127, rs2_b5_val == -65
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x2f6fffaf980fff6;  op2val:0x97fbffb10c0eff7
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x2f6fffaf980fff6, 0x97fbffb10c0eff7, x30, x1, 432, x5)

inst_57:
// rs2_b6_val == -65, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f06073f3fdf10fc;  op2val:0x55bf0206fa09dff9
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x3f06073f3fdf10fc, 0x55bf0206fa09dff9, x30, x1, 448, x5)

inst_58:
// rs2_b0_val == 8, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x3fbffb1009fffdfd;  op2val:0x40fafcf809f74008
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x3fbffb1009fffdfd, 0x40fafcf809f74008, x30, x1, 464, x5)

inst_59:
// rs2_b0_val == 2, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xff3fef7f0605fd07;  op2val:0x2006dff9aa3f1002
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xff3fef7f0605fd07, 0x2006dff9aa3f1002, x30, x1, 480, x5)

inst_60:
// rs1_b1_val == -9, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x55c0fe80bff9f709;  op2val:0x106fdf7ef3f7ff9
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x55c0fe80bff9f709, 0x106fdf7ef3f7ff9, x30, x1, 496, x5)

inst_61:
// rs2_b6_val == 32, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f3f04aafefc5520;  op2val:0x7f201020aa5504f9
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x3f3f04aafefc5520, 0x7f201020aa5504f9, x30, x1, 512, x5)

inst_62:
// rs1_b7_val == 127, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f4008f9c0bffb02;  op2val:0x1c003bff9c0fafd
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x7f4008f9c0bffb02, 0x1c003bff9c0fafd, x30, x1, 528, x5)

inst_63:
// rs1_b7_val == -9, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7550007037ff807;  op2val:0xf810f820090407fc
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xf7550007037ff807, 0xf810f820090407fc, x30, x1, 544, x5)

inst_64:
// rs1_b1_val == 1, rs1_b0_val == 8
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf06aa0410aa0108;  op2val:0xfd20084001fbff04
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xdf06aa0410aa0108, 0xfd20084001fbff04, x30, x1, 560, x5)

inst_65:
// rs2_b5_val == 127, rs1_b0_val == -9
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x30005f8ff80fcf7;  op2val:0xf9ef7ffe20fa05f9
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x30005f8ff80fcf7, 0xf9ef7ffe20fa05f9, x30, x1, 576, x5)

inst_66:
// rs1_b7_val == 4, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x4fb7f0710aa1005;  op2val:0x55205580f8fb5506
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x4fb7f0710aa1005, 0x55205580f8fb5506, x30, x1, 592, x5)

inst_67:
// rs2_b5_val == -128, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x33f20dff83f0906;  op2val:0x90680043f070303
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x33f20dff83f0906, 0x90680043f070303, x30, x1, 608, x5)

inst_68:
// rs1_b6_val == 127, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x207ffb7f55c02003;  op2val:0x2010020507fe0580
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x207ffb7f55c02003, 0x2010020507fe0580, x30, x1, 624, x5)

inst_69:
// rs2_b2_val == -1, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x40fb7fc0f8fcfef9;  op2val:0x5aaff0501ffbfc0
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x40fb7fc0f8fcfef9, 0x5aaff0501ffbfc0, x30, x1, 640, x5)

inst_70:
// rs2_b5_val == 4, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xdffc080703022005;  op2val:0x720041009090308
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xdffc080703022005, 0x720041009090308, x30, x1, 656, x5)

inst_71:
// rs1_b6_val == -33, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfddff602020505ff;  op2val:0x4efbffbf8fa4010
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xfddff602020505ff, 0x4efbffbf8fa4010, x30, x1, 672, x5)

inst_72:
// rs2_b1_val == -5, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf655fdf7fefb05aa;  op2val:0x7f400820dff6fb07
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xf655fdf7fefb05aa, 0x7f400820dff6fb07, x30, x1, 688, x5)

inst_73:
// rs2_b4_val == -17, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x2bf0007bf03f8fd;  op2val:0x405faef403faabf
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x2bf0007bf03f8fd, 0x405faef403faabf, x30, x1, 704, x5)

inst_74:
// rs2_b4_val == -3, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x2bfdf03fedf0255;  op2val:0x940f7fdfffe07f7
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x2bfdf03fedf0255, 0x940f7fdfffe07f7, x30, x1, 720, x5)

inst_75:
// rs2_b1_val == 1, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xff067f01fa202001;  op2val:0x5502fa55fc5501bf
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xff067f01fa202001, 0x5502fa55fc5501bf, x30, x1, 736, x5)

inst_76:
// rs1_b6_val == -3, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xbffd08aa3f1005ff;  op2val:0x200707ef10fe0806
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xbffd08aa3f1005ff, 0x200707ef10fe0806, x30, x1, 752, x5)

inst_77:
// rs2_b4_val == -86, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb058000fe00f8f7;  op2val:0xfaf640aafb0709f9
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0xfb058000fe00f8f7, 0xfaf640aafb0709f9, x30, x1, 768, x5)

inst_78:
// rs1_b6_val == 1, 
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x301f6fc02fb01fb;  op2val:0x5fe0801fb20f9f8
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x301f6fc02fb01fb, 0x5fe0801fb20f9f8, x30, x1, 784, x5)

inst_79:
// rs1_b7_val > 0 and rs2_b7_val < 0, rs2_b4_val == -1, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b3_val == -86, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b0_val == -1, rs2_b6_val == 16, rs1_b1_val == -128, rs1_b3_val == -1, rs2_b7_val == -17, rs1_b4_val > 0 and rs2_b4_val < 0, rs1_b4_val == 32, rs1_b2_val == -17
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x609f820ffef80ff;  op2val:0xef1003ffaa0705f9
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x609f820ffef80ff, 0xef1003ffaa0705f9, x30, x1, 800, x5)

inst_80:
// rs2_b7_val == -86, rs1_b7_val == 1, rs2_b5_val == 32, rs1_b6_val == -17, rs1_b3_val == -128, rs2_b1_val == -33, rs2_b3_val == 8, rs2_b6_val == 4, rs1_b4_val == -5, rs1_b5_val == 127, rs1_b0_val == 85
// opcode: kadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x1ef7ffb80050655;  op2val:0xaa042020087fdff6
TEST_PKRR_OP(kadd8, x31, x30, x29, 0x0000000000000000, 0x1ef7ffb80050655, 0xaa042020087fdff6, x30, x1, 816, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 104*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
