
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kdmbb instruction of the RISC-V RV64PZicsr extension for the kdmbb covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kdmbb)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 == rd != rs2, rs1==x8, rs2==x2, rd==x8, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs2_h0_val == 0, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val == 8, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs2_h2_val == 32, rs2_h3_val == -8193
// opcode: kdmbb ; op1:x8; op2:x2; dest:x8; op1val:0x08fffa00068000;  op2val:0xdfff0020fff80000
TEST_PKRR_OP(kdmbb, x8, x8, x2, 0x0000000000000000, 0x08fffa00068000, 0xdfff0020fff80000, x8, x11, 0, x1)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x3, rs2==x15, rd==x16, rs1_h3_val == rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -65, rs2_h1_val == -513, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val == -16385, rs1_h3_val == -65, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h2_val == -21846
// opcode: kdmbb ; op1:x3; op2:x15; dest:x16; op1val:0xffbfbffffff8fffc;  op2val:0xffbfaaaafdfffff8
TEST_PKRR_OP(kdmbb, x16, x3, x15, 0x0000000000000000, 0xffbfbffffff8fffc, 0xffbfaaaafdfffff8, x3, x11, 16, x1)

inst_2:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x19, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h0_val == -3, rs2_h0_val == -129, rs2_h1_val == -9, rs1_h1_val == 32767, rs1_h2_val == -129
// opcode: kdmbb ; op1:x26; op2:x26; dest:x19; op1val:0xfff9ff7f7ffffffd;  op2val:0x09aaaafff7ff7f
TEST_PKRR_OP(kdmbb, x19, x26, x26, 0x0000000000000000, 0xfff9ff7f7ffffffd, 0x09aaaafff7ff7f, x26, x11, 32, x1)

inst_3:
// rs1 == rs2 == rd, rs1==x14, rs2==x14, rd==x14, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h0_val == -5, rs1_h3_val == 32, rs2_h1_val == -17, rs2_h3_val == 512, rs2_h0_val == -17
// opcode: kdmbb ; op1:x14; op2:x14; dest:x14; op1val:0x20bfff0009fffb;  op2val:0x2000006ffefffef
TEST_PKRR_OP(kdmbb, x14, x14, x14, 0x0000000000000000, 0x20bfff0009fffb, 0x2000006ffefffef, x14, x11, 48, x1)

inst_4:
// rs2 == rd != rs1, rs1==x7, rs2==x6, rd==x6, rs1_h2_val == rs2_h2_val, rs1_h2_val == -21846, rs2_h3_val == -513, rs1_h3_val == -8193, rs1_h0_val == -1
// opcode: kdmbb ; op1:x7; op2:x6; dest:x6; op1val:0xdfffaaaafffcffff;  op2val:0xfdffaaaafff9ff7f
TEST_PKRR_OP(kdmbb, x6, x7, x6, 0x0000000000000000, 0xdfffaaaafffcffff, 0xfdffaaaafff9ff7f, x7, x11, 64, x1)

inst_5:
// rs1==x12, rs2==x8, rd==x31, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h0_val == 64, rs2_h1_val == -21846, rs2_h3_val == 8192, rs1_h0_val == 4, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -33
// opcode: kdmbb ; op1:x12; op2:x8; dest:x31; op1val:0xdfff3fffffdf0004;  op2val:0x2000fff8aaaa0040
TEST_PKRR_OP(kdmbb, x31, x12, x8, 0x0000000000000000, 0xdfff3fffffdf0004, 0x2000fff8aaaa0040, x12, x11, 80, x1)

inst_6:
// rs1==x15, rs2==x21, rd==x29, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h0_val == rs2_h0_val, rs2_h3_val == -16385, rs1_h3_val == -17, rs1_h1_val < 0 and rs2_h1_val > 0
// opcode: kdmbb ; op1:x15; op2:x21; dest:x29; op1val:0xffef3ffffff63fff;  op2val:0xbfff3fff3fff3fff
TEST_PKRR_OP(kdmbb, x29, x15, x21, 0x0000000000000000, 0xffef3ffffff63fff, 0xbfff3fff3fff3fff, x15, x11, 96, x1)

inst_7:
// rs1==x22, rs2==x9, rd==x13, rs1_h1_val == rs2_h1_val, rs2_h1_val == 21845, rs2_h2_val == -2049, rs2_h3_val == -32768, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 21845, rs2_h0_val == -2, rs1_h2_val == -257, rs1_h3_val == -3, rs1_h0_val == -1025
// opcode: kdmbb ; op1:x22; op2:x9; dest:x13; op1val:0xfffdfeff5555fbff;  op2val:0x8000f7ff5555fffe
TEST_PKRR_OP(kdmbb, x13, x22, x9, 0x0000000000000000, 0xfffdfeff5555fbff, 0x8000f7ff5555fffe, x22, x11, 112, x1)

inst_8:
// rs1==x31, rs2==x7, rd==x0, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == 4, rs2_h3_val == 2, rs1_h0_val == -9, rs2_h0_val == 1
// opcode: kdmbb ; op1:x31; op2:x7; dest:x0; op1val:0x20feff0004fff7;  op2val:0x02fff800060001
TEST_PKRR_OP(kdmbb, x0, x31, x7, 0x0000000000000000, 0x20feff0004fff7, 0x02fff800060001, x31, x11, 128, x1)

inst_9:
// rs1==x18, rs2==x29, rd==x17, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h2_val == 16, rs1_h3_val == -129, rs2_h2_val == 512, rs2_h0_val == -3, rs2_h3_val == 4
// opcode: kdmbb ; op1:x18; op2:x29; dest:x17; op1val:0xff7f001000070006;  op2val:0x0402000006fffd
TEST_PKRR_OP(kdmbb, x17, x18, x29, 0x0000000000000000, 0xff7f001000070006, 0x0402000006fffd, x18, x11, 144, x1)

inst_10:
// rs1==x9, rs2==x20, rd==x2, rs2_h3_val == -21846, rs1_h3_val == 256, rs2_h2_val == -257, rs2_h0_val == 32767, rs1_h0_val == 16384, rs1_h2_val == 0, rs1_h1_val == -16385
// opcode: kdmbb ; op1:x9; op2:x20; dest:x2; op1val:0x1000000bfff4000;  op2val:0xaaaafefffff67fff
TEST_PKRR_OP(kdmbb, x2, x9, x20, 0x0000000000000000, 0x1000000bfff4000, 0xaaaafefffff67fff, x9, x11, 160, x1)

inst_11:
// rs1==x30, rs2==x5, rd==x18, rs2_h3_val == 21845, rs1_h2_val == 4, rs1_h3_val == -4097, rs2_h1_val == -3, rs1_h0_val == 21845, rs2_h2_val == 1
// opcode: kdmbb ; op1:x30; op2:x5; dest:x18; op1val:0xefff000400035555;  op2val:0x55550001fffdfffe
TEST_PKRR_OP(kdmbb, x18, x30, x5, 0x0000000000000000, 0xefff000400035555, 0x55550001fffdfffe, x30, x11, 176, x1)

inst_12:
// rs1==x4, rs2==x10, rd==x21, rs2_h3_val == 32767, rs1_h0_val == -16385, rs1_h2_val == -32768, rs1_h3_val == 2048
// opcode: kdmbb ; op1:x4; op2:x10; dest:x21; op1val:0x8008000fff8bfff;  op2val:0x7fff0003fff73fff
TEST_PKRR_OP(kdmbb, x21, x4, x10, 0x0000000000000000, 0x8008000fff8bfff, 0x7fff0003fff73fff, x4, x11, 192, x1)

inst_13:
// rs1==x17, rs2==x19, rd==x28, rs2_h3_val == -4097, rs1_h2_val == 2048, rs2_h2_val == -1025, rs1_h1_val == 1024, rs1_h3_val == -16385, rs2_h1_val == 8192, rs1_h0_val == 0
// opcode: kdmbb ; op1:x17; op2:x19; dest:x28; op1val:0xbfff080004000000;  op2val:0xeffffbff2000fffe
TEST_PKRR_OP(kdmbb, x28, x17, x19, 0x0000000000000000, 0xbfff080004000000, 0xeffffbff2000fffe, x17, x11, 208, x1)

inst_14:
// rs1==x24, rs2==x28, rd==x20, rs2_h3_val == -2049, rs1_h2_val == -17, rs1_h1_val == -1, rs2_h0_val == -21846
// opcode: kdmbb ; op1:x24; op2:x28; dest:x20; op1val:0x06ffeffffffffb;  op2val:0xf7ff0200fffaaaaa
TEST_PKRR_OP(kdmbb, x20, x24, x28, 0x0000000000000000, 0x06ffeffffffffb, 0xf7ff0200fffaaaaa, x24, x11, 224, x1)

inst_15:
// rs1==x28, rs2==x1, rd==x22, rs2_h3_val == -1025, rs1_h2_val == 512, rs2_h1_val == -8193, rs2_h0_val == -2049, rs1_h0_val == 512, rs2_h2_val == 16384
// opcode: kdmbb ; op1:x28; op2:x1; dest:x22; op1val:0x100020000090200;  op2val:0xfbff4000dffff7ff
TEST_PKRR_OP(kdmbb, x22, x28, x1, 0x0000000000000000, 0x100020000090200, 0xfbff4000dffff7ff, x28, x11, 240, x14)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_16:
// rs1==x25, rs2==x23, rd==x30, rs2_h3_val == -257, rs2_h0_val == 16384, rs2_h1_val == -33, rs1_h1_val == 4096
// opcode: kdmbb ; op1:x25; op2:x23; dest:x30; op1val:0xfffd020010008000;  op2val:0xfeff0001ffdf4000
TEST_PKRR_OP(kdmbb, x30, x25, x23, 0x0000000000000000, 0xfffd020010008000, 0xfeff0001ffdf4000, x25, x8, 0, x14)

inst_17:
// rs1==x29, rs2==x22, rd==x7, rs2_h3_val == -129, rs2_h2_val == -16385, rs1_h2_val == 1
// opcode: kdmbb ; op1:x29; op2:x22; dest:x7; op1val:0x800000100035555;  op2val:0xff7fbfff20000001
TEST_PKRR_OP(kdmbb, x7, x29, x22, 0x0000000000000000, 0x800000100035555, 0xff7fbfff20000001, x29, x8, 16, x14)

inst_18:
// rs1==x2, rs2==x11, rd==x9, rs2_h3_val == -33, rs1_h1_val == 512, rs2_h2_val == 4096
// opcode: kdmbb ; op1:x2; op2:x11; dest:x9; op1val:0xffef000602000005;  op2val:0xffdf10003fff0009
TEST_PKRR_OP(kdmbb, x9, x2, x11, 0x0000000000000000, 0xffef000602000005, 0xffdf10003fff0009, x2, x8, 32, x14)

inst_19:
// rs1==x5, rs2==x27, rd==x3, rs2_h3_val == -17, rs2_h2_val == -8193, rs1_h1_val == 16384, rs1_h3_val == -9, rs2_h0_val == -32768
// opcode: kdmbb ; op1:x5; op2:x27; dest:x3; op1val:0xfff7fff64000fffc;  op2val:0xffefdfffffef8000
TEST_PKRR_OP(kdmbb, x3, x5, x27, 0x0000000000000000, 0xfff7fff64000fffc, 0xffefdfffffef8000, x5, x8, 48, x14)

inst_20:
// rs1==x1, rs2==x16, rd==x4, rs2_h3_val == -9, rs1_h2_val == -513, rs2_h2_val == -9, rs1_h3_val == 32767
// opcode: kdmbb ; op1:x1; op2:x16; dest:x4; op1val:0x7ffffdff0400fff9;  op2val:0xfff7fff75555fff8
TEST_PKRR_OP(kdmbb, x4, x1, x16, 0x0000000000000000, 0x7ffffdff0400fff9, 0xfff7fff75555fff8, x1, x8, 64, x14)

inst_21:
// rs1==x0, rs2==x12, rd==x27, rs2_h3_val == -5, rs1_h3_val == -5, rs1_h0_val == 8, rs2_h0_val == 8
// opcode: kdmbb ; op1:x0; op2:x12; dest:x27; op1val:0xfffb000900030008;  op2val:0xfffbc00055550008
TEST_PKRR_OP(kdmbb, x27, x0, x12, 0x0000000000000000, 0xfffb000900030008, 0xfffbc00055550008, x0, x8, 80, x14)

inst_22:
// rs1==x23, rs2==x4, rd==x11, rs2_h3_val == -3, rs1_h2_val == 256, rs2_h1_val == -1025, rs1_h0_val == 8192, rs1_h3_val == -257, rs1_h1_val == -4097
// opcode: kdmbb ; op1:x23; op2:x4; dest:x11; op1val:0xfeff0100efff2000;  op2val:0xfffdc000fbffff7f
TEST_PKRR_OP(kdmbb, x11, x23, x4, 0x0000000000000000, 0xfeff0100efff2000, 0xfffdc000fbffff7f, x23, x8, 96, x14)

inst_23:
// rs1==x20, rs2==x13, rd==x26, rs2_h3_val == -2, rs2_h1_val == 512, rs1_h1_val == -257, rs2_h0_val == 4, rs2_h2_val == -32768
// opcode: kdmbb ; op1:x20; op2:x13; dest:x26; op1val:0xfffbfdfffeffc000;  op2val:0xfffe800002000004
TEST_PKRR_OP(kdmbb, x26, x20, x13, 0x0000000000000000, 0xfffbfdfffeffc000, 0xfffe800002000004, x20, x8, 112, x14)

inst_24:
// rs1==x6, rs2==x3, rd==x12, rs2_h3_val == 16384, rs1_h0_val == 16, rs2_h2_val == 256
// opcode: kdmbb ; op1:x6; op2:x3; dest:x12; op1val:0x0300097fff0010;  op2val:0x40000100ffeffffd
TEST_PKRR_OP(kdmbb, x12, x6, x3, 0x0000000000000000, 0x0300097fff0010, 0x40000100ffeffffd, x6, x8, 128, x14)

inst_25:
// rs1==x11, rs2==x0, rd==x1, rs2_h3_val == 4096, rs2_h1_val == 2, rs1_h2_val == 8192, rs1_h3_val == 0, rs1_h0_val == -2049, rs2_h0_val == 128
// opcode: kdmbb ; op1:x11; op2:x0; dest:x1; op1val:0x0020003ffff7ff;  op2val:0x1000fffa00020080
TEST_PKRR_OP(kdmbb, x1, x11, x0, 0x0000000000000000, 0x0020003ffff7ff, 0x1000fffa00020080, x11, x8, 144, x14)

inst_26:
// rs1==x27, rs2==x17, rd==x25, rs2_h3_val == 2048, rs1_h2_val == 1024
// opcode: kdmbb ; op1:x27; op2:x17; dest:x25; op1val:0x100040010000004;  op2val:0x8000200fffa0001
TEST_PKRR_OP(kdmbb, x25, x27, x17, 0x0000000000000000, 0x100040010000004, 0x8000200fffa0001, x27, x8, 160, x14)

inst_27:
// rs1==x10, rs2==x24, rd==x5, rs2_h3_val == 1024, rs2_h2_val == 64, rs1_h3_val == -513, rs2_h1_val == -32768, rs1_h2_val == 2
// opcode: kdmbb ; op1:x10; op2:x24; dest:x5; op1val:0xfdff0002bfff0008;  op2val:0x400004080008000
TEST_PKRR_OP(kdmbb, x5, x10, x24, 0x0000000000000000, 0xfdff0002bfff0008, 0x400004080008000, x10, x8, 176, x14)

inst_28:
// rs1==x21, rs2==x30, rd==x15, rs2_h3_val == 256, rs1_h3_val == 1024, rs1_h0_val == -2, rs1_h1_val == 2, rs2_h1_val == 256, rs2_h0_val == 1024, rs2_h2_val == 32767
// opcode: kdmbb ; op1:x21; op2:x30; dest:x15; op1val:0x40080000002fffe;  op2val:0x1007fff01000400
TEST_PKRR_OP(kdmbb, x15, x21, x30, 0x0000000000000000, 0x40080000002fffe, 0x1007fff01000400, x21, x8, 192, x14)

inst_29:
// rs1==x16, rs2==x25, rd==x10, rs2_h3_val == 128, rs1_h3_val == -21846, rs2_h1_val == 8, rs1_h0_val == 256, rs2_h2_val == -129
// opcode: kdmbb ; op1:x16; op2:x25; dest:x10; op1val:0xaaaa0006fffa0100;  op2val:0x80ff7f00083fff
TEST_PKRR_OP(kdmbb, x10, x16, x25, 0x0000000000000000, 0xaaaa0006fffa0100, 0x80ff7f00083fff, x16, x8, 208, x2)

inst_30:
// rs1==x19, rs2==x31, rd==x23, rs2_h3_val == 64, rs2_h0_val == -513, rs1_h0_val == -21846, rs2_h1_val == 2048, rs1_h3_val == 16384, rs2_h2_val == 2
// opcode: kdmbb ; op1:x19; op2:x31; dest:x23; op1val:0x400080000400aaaa;  op2val:0x4000020800fdff
TEST_PKRR_OP(kdmbb, x23, x19, x31, 0x0000000000000000, 0x400080000400aaaa, 0x4000020800fdff, x19, x8, 224, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x13, rs2==x18, rd==x24, rs2_h3_val == 32, rs2_h0_val == -65, rs1_h2_val == 64, rs1_h0_val == -17, rs1_h1_val == -513
// opcode: kdmbb ; op1:x13; op2:x18; dest:x24; op1val:0xfff80040fdffffef;  op2val:0x200020ffefffbf
TEST_PKRR_OP(kdmbb, x24, x13, x18, 0x0000000000000000, 0xfff80040fdffffef, 0x200020ffefffbf, x13, x1, 0, x2)

inst_32:
// rs2_h3_val == 16, rs1_h2_val == 16384, rs2_h1_val == -2, rs1_h1_val == 1, rs1_h0_val == 2048
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xffef400000010800;  op2val:0x100040fffe0006
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xffef400000010800, 0x100040fffe0006, x30, x1, 16, x2)

inst_33:
// rs2_h3_val == 8, rs1_h2_val == -2049, rs2_h1_val == 32
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffbf7ff00030200;  op2val:0x08fff600203fff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xfffbf7ff00030200, 0x08fff600203fff, x30, x1, 32, x2)

inst_34:
// rs1_h1_val == -5, rs2_h0_val == -4097, rs2_h1_val == 32767
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x3fffbffffffbfffe;  op2val:0x20001007fffefff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x3fffbffffffbfffe, 0x20001007fffefff, x30, x1, 48, x2)

inst_35:
// rs1_h1_val == -3, rs2_h0_val == -1, rs1_h0_val == -8193, rs1_h3_val == 64
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x400001fffddfff;  op2val:0xfbff3fff5555ffff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x400001fffddfff, 0xfbff3fff5555ffff, x30, x1, 64, x2)

inst_36:
// rs1_h1_val == -2, rs2_h2_val == -65, rs2_h1_val == -4097
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x100fff6fffe0008;  op2val:0x03ffbfefff0080
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x100fff6fffe0008, 0x03ffbfefff0080, x30, x1, 80, x2)

inst_37:
// rs1_h1_val == -32768, rs1_h0_val == 1024, rs1_h3_val == 128
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x80004080000400;  op2val:0xfdfffbffffeffffe
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x80004080000400, 0xfdfffbffffeffffe, x30, x1, 96, x2)

inst_38:
// rs1_h1_val == 8192, rs2_h1_val == -129, rs2_h2_val == 4, rs2_h0_val == 256, rs1_h3_val == -2049
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff001020000400;  op2val:0x2000004ff7f0100
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xf7ff001020000400, 0x2000004ff7f0100, x30, x1, 112, x2)

inst_39:
// rs1_h1_val == 2048, rs1_h3_val == -1025, rs1_h2_val == -3
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffd08003fff;  op2val:0xfefffff63fff4000
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xfbfffffd08003fff, 0xfefffff63fff4000, x30, x1, 128, x2)

inst_40:
// rs1_h1_val == 256, rs1_h3_val == -32768, rs1_h2_val == -2, rs1_h0_val == 64
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffe01000040;  op2val:0xfffe0020fdff0005
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x8000fffe01000040, 0xfffe0020fdff0005, x30, x1, 144, x2)

inst_41:
// rs1_h1_val == 128, rs1_h0_val == -65
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x20bfff0080ffbf;  op2val:0x0900067ffffdff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x20bfff0080ffbf, 0x0900067ffffdff, x30, x1, 160, x2)

inst_42:
// rs1_h1_val == 64, rs1_h2_val == 8, rs2_h1_val == 4096
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x400000800402000;  op2val:0x1000020010000040
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x400000800402000, 0x1000020010000040, x30, x1, 176, x2)

inst_43:
// rs1_h1_val == 32, rs2_h2_val == -5, rs1_h3_val == 4096
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x1000001000200800;  op2val:0xfff8fffb0800c000
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x1000001000200800, 0xfff8fffb0800c000, x30, x1, 192, x2)

inst_44:
// rs1_h1_val == 16, rs2_h0_val == -16385, rs2_h2_val == -17
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffb08000010ffef;  op2val:0x5555ffefaaaabfff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xfffb08000010ffef, 0x5555ffefaaaabfff, x30, x1, 208, x2)

inst_45:
// rs1_h1_val == 8, rs1_h2_val == -1, rs2_h0_val == -8193
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff0008fff8;  op2val:0x800000060002dfff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xffbfffff0008fff8, 0x800000060002dfff, x30, x1, 224, x2)

inst_46:
// rs1_h1_val == 0, rs1_h0_val == -33, rs2_h0_val == 32, rs2_h1_val == 16384
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfdffaaaa0000ffdf;  op2val:0x08004040000020
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xfdffaaaa0000ffdf, 0x08004040000020, x30, x1, 240, x2)

inst_47:
// rs1_h0_val == 32767, rs2_h1_val == 1, rs2_h2_val == -513
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffa00207fff;  op2val:0xfdfffdff0001ff7f
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x1000fffa00207fff, 0xfdfffdff0001ff7f, x30, x1, 256, x2)

inst_48:
// rs1_h0_val == -4097, rs2_h1_val == 64
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x0500100007efff;  op2val:0x3fffffbf00400080
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x0500100007efff, 0x3fffffbf00400080, x30, x1, 272, x2)

inst_49:
// rs1_h0_val == -513, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffcff7f0100fdff;  op2val:0x80ffbf0001fffd
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xfffcff7f0100fdff, 0x80ffbf0001fffd, x30, x1, 288, x2)

inst_50:
// rs1_h0_val == -257, rs2_h0_val == -5, rs1_h2_val == 21845
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff85555fffefeff;  op2val:0x40aaaafffdfffb
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xfff85555fffefeff, 0x40aaaafffdfffb, x30, x1, 304, x2)

inst_51:
// rs1_h0_val == -129, rs2_h2_val == 8192, rs2_h0_val == 2048, rs1_h2_val == -5
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x400fffbfdffff7f;  op2val:0x082000fff70800
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x400fffbfdffff7f, 0x082000fff70800, x30, x1, 320, x2)

inst_52:
// rs1_h0_val == 4096, rs2_h1_val == 16, rs1_h3_val == 8192, rs2_h2_val == 21845
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x2000000300041000;  op2val:0xfdff555500100100
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x2000000300041000, 0xfdff555500100100, x30, x1, 336, x2)

inst_53:
// rs1_h0_val == 128, rs1_h2_val == 32, rs2_h1_val == 128, rs2_h2_val == -2
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x800002040000080;  op2val:0xffbffffe00800020
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x800002040000080, 0xffbffffe00800020, x30, x1, 352, x2)

inst_54:
// rs1_h0_val == 32, rs1_h3_val == -1
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xffff800080000020;  op2val:0xfff60005fff80003
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xffff800080000020, 0xfff60005fff80003, x30, x1, 368, x2)

inst_55:
// rs2_h1_val == 4, rs1_h3_val == 16
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x10000100800008;  op2val:0xfff9fdff00040000
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x10000100800008, 0xfff9fdff00040000, x30, x1, 384, x2)

inst_56:
// rs2_h1_val == 0, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x2000feff0005fdff;  op2val:0xfffd3fff0000bfff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x2000feff0005fdff, 0xfffd3fff0000bfff, x30, x1, 400, x2)

inst_57:
// rs2_h1_val == -1, rs2_h0_val == 2
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff80002fff9;  op2val:0x1000bfffffff0002
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xbffffff80002fff9, 0x1000bfffffff0002, x30, x1, 416, x2)

inst_58:
// rs2_h0_val == 21845, rs2_h2_val == -33
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff80040fff9ffdf;  op2val:0x1000ffdffdff5555
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xfff80040fff9ffdf, 0x1000ffdffdff5555, x30, x1, 432, x2)

inst_59:
// rs2_h0_val == -1025, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfff8ffffefff;  op2val:0xfbff00040200fbff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xfffcfff8ffffefff, 0xfbff00040200fbff, x30, x1, 448, x2)

inst_60:
// rs2_h0_val == -257, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xffef0010fffafdff;  op2val:0xffdf1000fffcfeff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xffef0010fffafdff, 0xffdf1000fffcfeff, x30, x1, 464, x2)

inst_61:
// rs2_h0_val == -33, rs2_h1_val == -257
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff8000080000005;  op2val:0xfffe4000feffffdf
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xfff8000080000005, 0xfffe4000feffffdf, x30, x1, 480, x2)

inst_62:
// rs2_h0_val == -9, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff60800fffa5555;  op2val:0xfff9fffc0009fff7
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xfff60800fffa5555, 0xfff9fffc0009fff7, x30, x1, 496, x2)

inst_63:
// rs2_h0_val == 8192, rs1_h3_val == 21845
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffd0400fffc;  op2val:0xfffcffef20002000
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x5555fffd0400fffc, 0xfffcffef20002000, x30, x1, 512, x2)

inst_64:
// rs2_h0_val == 4096, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x0001000100fff6;  op2val:0xefff020000081000
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x0001000100fff6, 0xefff020000081000, x30, x1, 528, x2)

inst_65:
// rs2_h0_val == 512, rs2_h2_val == -1, rs1_h2_val == 4096, rs1_h1_val == -17, rs2_h1_val == -2049
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x8001000ffeffff7;  op2val:0x3ffffffff7ff0200
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x8001000ffeffff7, 0x3ffffffff7ff0200, x30, x1, 544, x2)

inst_66:
// rs2_h0_val == 16, rs1_h3_val == -33
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xffdff7fffffeff7f;  op2val:0xfffcfffa80000010
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xffdff7fffffeff7f, 0xfffcfffa80000010, x30, x1, 560, x2)

inst_67:
// rs1_h0_val == 2, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000080002;  op2val:0x10fff7fbffc000
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x8000000000080002, 0x10fff7fbffc000, x30, x1, 576, x2)

inst_68:
// rs1_h0_val == 1, rs1_h1_val == -129, rs2_h3_val == -1
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0007ff7f0001;  op2val:0xffff00200200fffd
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xffdf0007ff7f0001, 0xffff00200200fffd, x30, x1, 592, x2)

inst_69:
// rs2_h3_val == 1, rs1_h3_val == 2, rs2_h2_val == 1024
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x0200040040ffdf;  op2val:0x010400f7fffbff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x0200040040ffdf, 0x010400f7fffbff, x30, x1, 608, x2)

inst_70:
// rs1_h3_val == -2, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffe00093fff1000;  op2val:0x093fff0003ffff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xfffe00093fff1000, 0x093fff0003ffff, x30, x1, 624, x2)

inst_71:
// rs1_h3_val == 512, rs1_h2_val == -65
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x200ffbf00028000;  op2val:0xbffffbfffffd0007
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x200ffbf00028000, 0xbffffbfffffd0007, x30, x1, 640, x2)

inst_72:
// rs2_h2_val == -4097, rs1_h3_val == 1
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x0110000200fffe;  op2val:0x8000efff80000006
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x0110000200fffe, 0x8000efff80000006, x30, x1, 656, x2)

inst_73:
// rs1_h3_val == 4, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x040001fff8ff7f;  op2val:0x01555500010003
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x040001fff8ff7f, 0x01555500010003, x30, x1, 672, x2)

inst_74:
// rs2_h2_val == -3, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffb0006fbff;  op2val:0x400fffdf7ff0200
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xdffffffb0006fbff, 0x400fffdf7ff0200, x30, x1, 688, x2)

inst_75:
// rs1_h2_val == 32767, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfdff7ffffffb0007;  op2val:0xffbffffe00200800
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xfdff7ffffffb0007, 0xffbffffe00200800, x30, x1, 704, x2)

inst_76:
// rs1_h2_val == -8193, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x09dfff0080f7ff;  op2val:0x06fff900080009
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x09dfff0080f7ff, 0x06fff900080009, x30, x1, 720, x2)

inst_77:
// rs1_h2_val == -4097, rs2_h2_val == 16
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x3fffefff0400feff;  op2val:0x200010fffaff7f
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x3fffefff0400feff, 0x200010fffaff7f, x30, x1, 736, x2)

inst_78:
// rs2_h2_val == 2048, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x100ffefffdffeff;  op2val:0x0608001000fffb
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x100ffefffdffeff, 0x0608001000fffb, x30, x1, 752, x2)

inst_79:
// rs1_h2_val == -1025, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x05fbff0002ffef;  op2val:0xfefffff80003ff7f
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x05fbff0002ffef, 0xfefffff80003ff7f, x30, x1, 768, x2)

inst_80:
// rs2_h2_val == 128, rs2_h1_val == -16385
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffddffffffbbfff;  op2val:0xfff80080bffff7ff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xfffddffffffbbfff, 0xfff80080bffff7ff, x30, x1, 784, x2)

inst_81:
// rs1_h2_val == -33, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffdf0800ff7f;  op2val:0x200effffff7dfff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xbfffffdf0800ff7f, 0x200effffff7dfff, x30, x1, 800, x2)

inst_82:
// rs1_h1_val == -9, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x04ffdffff70006;  op2val:0x070400fffa0007
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x04ffdffff70006, 0x070400fffa0007, x30, x1, 816, x2)

inst_83:
// rs1_h2_val == 128, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffb008000800005;  op2val:0xfffefdffff7f0000
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xfffb008000800005, 0xfffefdffff7f0000, x30, x1, 832, x2)

inst_84:
// rs1_h1_val == -1025, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x100ffeffbffdfff;  op2val:0x04000700100002
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x100ffeffbffdfff, 0x04000700100002, x30, x1, 848, x2)

inst_85:
// rs2_h2_val == 8, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff9c000fffeffff;  op2val:0xfff7000800030007
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xfff9c000fffeffff, 0xfff7000800030007, x30, x1, 864, x2)

inst_86:
// rs2_h3_val == 0, rs2_h2_val == 0
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x04fdfffffdfffa;  op2val:0x0000000020c000
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x04fdfffffdfffa, 0x0000000020c000, x30, x1, 880, x2)

inst_87:
// rs2_h1_val == -65, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x0308001000fff8;  op2val:0x05fffbffbf0800
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x0308001000fff8, 0x05fffbffbf0800, x30, x1, 896, x2)

inst_88:
// rs2_h1_val == -5, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x07fffbfffaff7f;  op2val:0xfff70003fffbfff6
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x07fffbfffaff7f, 0xfff70003fffbfff6, x30, x1, 912, x2)

inst_89:
// rs1_h1_val == -21846, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x058000aaaafff6;  op2val:0xfffd7fff0010dfff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x058000aaaafff6, 0xfffd7fff0010dfff, x30, x1, 928, x2)

inst_90:
// rs1_h1_val == -8193, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xc000fffcdffffffd;  op2val:0xf7ff0007dfff0100
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xc000fffcdffffffd, 0xf7ff0007dfff0100, x30, x1, 944, x2)

inst_91:
// rs2_h1_val == 1024, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x048000fff80100;  op2val:0x2000c00004003fff
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x048000fff80100, 0x2000c00004003fff, x30, x1, 960, x2)

inst_92:
// rs1_h2_val == -9, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff700070010;  op2val:0xc000000800095555
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xf7fffff700070010, 0xc000000800095555, x30, x1, 976, x2)

inst_93:
// rs1_h1_val == -65, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x094000ffbfc000;  op2val:0x2000fffffffb0100
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x094000ffbfc000, 0x2000fffffffb0100, x30, x1, 992, x2)

inst_94:
// rs1_h1_val == -2049, 
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffc7ffff7ff5555;  op2val:0xfff60020fffbffef
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xfffc7ffff7ff5555, 0xfff60020fffbffef, x30, x1, 1008, x2)

inst_95:
// rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == 4, rs2_h3_val == 2, rs1_h0_val == -9, rs2_h0_val == 1
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x20feff0004fff7;  op2val:0x02fff800060001
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x20feff0004fff7, 0x02fff800060001, x30, x1, 1024, x2)

inst_96:
// rs2_h3_val == -5, rs1_h3_val == -5, rs1_h0_val == 8, rs2_h0_val == 8
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000900030008;  op2val:0xfffbc00055550008
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0xfffb000900030008, 0xfffbc00055550008, x30, x1, 1040, x2)

inst_97:
// rs2_h3_val == 4096, rs2_h1_val == 2, rs1_h2_val == 8192, rs1_h3_val == 0, rs1_h0_val == -2049, rs2_h0_val == 128
// opcode: kdmbb ; op1:x30; op2:x29; dest:x31; op1val:0x0020003ffff7ff;  op2val:0x1000fffa00020080
TEST_PKRR_OP(kdmbb, x31, x30, x29, 0x0000000000000000, 0x0020003ffff7ff, 0x1000fffa00020080, x30, x1, 1056, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x8_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 134*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
