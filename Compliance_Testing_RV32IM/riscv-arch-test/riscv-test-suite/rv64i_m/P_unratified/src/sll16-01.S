
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sll16 instruction of the RISC-V RV64PZicsr extension for the sll16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sll16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x6, rs2==x22, rd==x6, rs2_val == 5, rs1_h1_val == 1, rs1_h3_val == 128
// opcode: sll16 ; op1:x6; op2:x22; dest:x6; op1val:0x80000b0001000d;  op2val:0x5
TEST_RR_OP(sll16, x6, x6, x22, 0x0000000000000000, 0x80000b0001000d, 0x5, x7, 0, x4)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x26, rs2==x2, rd==x18, rs2_val == 7, rs1_h3_val == 16384, rs1_h2_val == 2, rs1_h1_val == 61439
// opcode: sll16 ; op1:x26; op2:x2; dest:x18; op1val:0x40000002efff000e;  op2val:0x7
TEST_RR_OP(sll16, x18, x26, x2, 0x0000000000000000, 0x40000002efff000e, 0x7, x7, 8, x4)

inst_2:
// rs1 == rs2 != rd, rs1==x27, rs2==x27, rd==x21, rs2_val == 11, rs1_h1_val == 4, rs1_h0_val == 16384, rs1_h2_val == 512
// opcode: sll16 ; op1:x27; op2:x27; dest:x21; op1val:0x12020000044000;  op2val:0xb
TEST_RR_OP(sll16, x21, x27, x27, 0x0000000000000000, 0x12020000044000, 0xb, x7, 16, x4)

inst_3:
// rs1 == rs2 == rd, rs1==x3, rs2==x3, rd==x3, rs2_val == 13, rs1_h2_val == 16384, rs1_h3_val == 43690, rs1_h0_val == 32768
// opcode: sll16 ; op1:x3; op2:x3; dest:x3; op1val:0xaaaa4000000d8000;  op2val:0xd
TEST_RR_OP(sll16, x3, x3, x3, 0x0000000000000000, 0xaaaa4000000d8000, 0xd, x7, 24, x4)

inst_4:
// rs2 == rd != rs1, rs1==x19, rs2==x8, rd==x8, rs2_val == 14, rs1_h3_val == 256, rs1_h2_val == 43690, rs1_h0_val == 65534
// opcode: sll16 ; op1:x19; op2:x8; dest:x8; op1val:0x100aaaaeffffffe;  op2val:0xe
TEST_RR_OP(sll16, x8, x19, x8, 0x0000000000000000, 0x100aaaaeffffffe, 0xe, x7, 32, x4)

inst_5:
// rs1==x11, rs2==x28, rd==x27, rs2_val == 8, rs1_h3_val == 65531, rs1_h0_val == 65527, rs1_h1_val == 49151, rs1_h2_val == 21845
// opcode: sll16 ; op1:x11; op2:x28; dest:x27; op1val:0xfffb5555bffffff7;  op2val:0x8
TEST_RR_OP(sll16, x27, x11, x28, 0x0000000000000000, 0xfffb5555bffffff7, 0x8, x7, 40, x4)

inst_6:
// rs1==x17, rs2==x1, rd==x29, rs2_val == 4, rs1_h3_val == 4, rs1_h2_val == 65519, rs1_h1_val == 63487
// opcode: sll16 ; op1:x17; op2:x1; dest:x29; op1val:0x04ffeff7ff000b;  op2val:0x4
TEST_RR_OP(sll16, x29, x17, x1, 0x0000000000000000, 0x04ffeff7ff000b, 0x4, x7, 48, x4)

inst_7:
// rs1==x25, rs2==x23, rd==x11, rs2_val == 2, rs1_h3_val == 2, rs1_h0_val == 8192, rs1_h2_val == 65533, rs1_h1_val == 2048
// opcode: sll16 ; op1:x25; op2:x23; dest:x11; op1val:0x02fffd08002000;  op2val:0x2
TEST_RR_OP(sll16, x11, x25, x23, 0x0000000000000000, 0x02fffd08002000, 0x2, x7, 56, x4)

inst_8:
// rs1==x0, rs2==x24, rd==x16, rs2_val == 1, rs1_h1_val == 65533, rs1_h2_val == 4096, rs1_h0_val == 57343
// opcode: sll16 ; op1:x0; op2:x24; dest:x16; op1val:0x0d1000fffddfff;  op2val:0x1
TEST_RR_OP(sll16, x16, x0, x24, 0x0000000000000000, 0x0d1000fffddfff, 0x1, x7, 64, x4)

inst_9:
// rs1==x8, rs2==x20, rd==x25, rs1_h3_val == 21845, rs1_h1_val == 64511, rs1_h0_val == 65471
// opcode: sll16 ; op1:x8; op2:x20; dest:x25; op1val:0x5555000cfbffffbf;  op2val:0x1
TEST_RR_OP(sll16, x25, x8, x20, 0x0000000000000000, 0x5555000cfbffffbf, 0x1, x7, 72, x4)

inst_10:
// rs1==x16, rs2==x11, rd==x30, rs1_h3_val == 32767, rs1_h1_val == 64, rs1_h2_val == 65531
// opcode: sll16 ; op1:x16; op2:x11; dest:x30; op1val:0x7ffffffb0040000a;  op2val:0xd
TEST_RR_OP(sll16, x30, x16, x11, 0x0000000000000000, 0x7ffffffb0040000a, 0xd, x7, 80, x4)

inst_11:
// rs1==x29, rs2==x21, rd==x9, rs1_h3_val == 49151, rs1_h1_val == 2, rs1_h0_val == 1024
// opcode: sll16 ; op1:x29; op2:x21; dest:x9; op1val:0xbfff555500020400;  op2val:0x9
TEST_RR_OP(sll16, x9, x29, x21, 0x0000000000000000, 0xbfff555500020400, 0x9, x7, 88, x4)

inst_12:
// rs1==x18, rs2==x19, rd==x26, rs1_h3_val == 57343, rs1_h0_val == 65503, rs1_h1_val == 65407, rs1_h2_val == 1
// opcode: sll16 ; op1:x18; op2:x19; dest:x26; op1val:0xdfff0001ff7fffdf;  op2val:0xb
TEST_RR_OP(sll16, x26, x18, x19, 0x0000000000000000, 0xdfff0001ff7fffdf, 0xb, x7, 96, x4)

inst_13:
// rs1==x5, rs2==x29, rd==x22, rs1_h3_val == 61439, rs2_val == 10, rs1_h2_val == 16, rs1_h0_val == 65279
// opcode: sll16 ; op1:x5; op2:x29; dest:x22; op1val:0xefff00100013feff;  op2val:0xa
TEST_RR_OP(sll16, x22, x5, x29, 0x0000000000000000, 0xefff00100013feff, 0xa, x7, 104, x4)

inst_14:
// rs1==x14, rs2==x30, rd==x15, rs1_h3_val == 63487, rs1_h0_val == 16, rs1_h1_val == 128, rs1_h2_val == 128
// opcode: sll16 ; op1:x14; op2:x30; dest:x15; op1val:0xf7ff008000800010;  op2val:0x5
TEST_RR_OP(sll16, x15, x14, x30, 0x0000000000000000, 0xf7ff008000800010, 0x5, x7, 112, x4)

inst_15:
// rs1==x2, rs2==x14, rd==x12, rs1_h3_val == 64511, rs1_h0_val == 65407, rs1_h2_val == 32768
// opcode: sll16 ; op1:x2; op2:x14; dest:x12; op1val:0xfbff8000bfffff7f;  op2val:0xc
TEST_RR_OP(sll16, x12, x2, x14, 0x0000000000000000, 0xfbff8000bfffff7f, 0xc, x7, 120, x4)

inst_16:
// rs1==x1, rs2==x18, rd==x4, rs1_h3_val == 65023, 
// opcode: sll16 ; op1:x1; op2:x18; dest:x4; op1val:0xfdff000b000a2000;  op2val:0x9
TEST_RR_OP(sll16, x4, x1, x18, 0x0000000000000000, 0xfdff000b000a2000, 0x9, x7, 128, x8)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_17:
// rs1==x23, rs2==x25, rd==x17, rs1_h3_val == 65279, rs1_h1_val == 21845, rs1_h2_val == 8
// opcode: sll16 ; op1:x23; op2:x25; dest:x17; op1val:0xfeff000855550006;  op2val:0x13
TEST_RR_OP(sll16, x17, x23, x25, 0x0000000000000000, 0xfeff000855550006, 0x13, x3, 0, x8)

inst_18:
// rs1==x31, rs2==x0, rd==x20, rs1_h3_val == 65407, rs1_h2_val == 65471
// opcode: sll16 ; op1:x31; op2:x0; dest:x20; op1val:0xff7fffbf0080000d;  op2val:0x0
TEST_RR_OP(sll16, x20, x31, x0, 0x0000000000000000, 0xff7fffbf0080000d, 0x0, x3, 8, x8)

inst_19:
// rs1==x12, rs2==x31, rd==x19, rs1_h3_val == 65471, rs1_h1_val == 512, rs1_h0_val == 61439, rs1_h2_val == 65534
// opcode: sll16 ; op1:x12; op2:x31; dest:x19; op1val:0xffbffffe0200efff;  op2val:0x11
TEST_RR_OP(sll16, x19, x12, x31, 0x0000000000000000, 0xffbffffe0200efff, 0x11, x3, 16, x8)

inst_20:
// rs1==x15, rs2==x13, rd==x23, rs1_h3_val == 65503, rs1_h2_val == 32767
// opcode: sll16 ; op1:x15; op2:x13; dest:x23; op1val:0xffdf7fff0001dfff;  op2val:0xb
TEST_RR_OP(sll16, x23, x15, x13, 0x0000000000000000, 0xffdf7fff0001dfff, 0xb, x3, 24, x8)

inst_21:
// rs1==x28, rs2==x16, rd==x0, rs1_h3_val == 65519, rs1_h2_val == 256
// opcode: sll16 ; op1:x28; op2:x16; dest:x0; op1val:0xffef010000400010;  op2val:0x3
TEST_RR_OP(sll16, x0, x28, x16, 0x0000000000000000, 0xffef010000400010, 0x3, x3, 32, x8)

inst_22:
// rs1==x24, rs2==x6, rd==x10, rs1_h3_val == 65527, rs1_h0_val == 4, rs1_h2_val == 65279
// opcode: sll16 ; op1:x24; op2:x6; dest:x10; op1val:0xfff7feff00040004;  op2val:0x0
TEST_RR_OP(sll16, x10, x24, x6, 0x0000000000000000, 0xfff7feff00040004, 0x0, x3, 40, x8)

inst_23:
// rs1==x10, rs2==x15, rd==x1, rs1_h3_val == 65533, rs1_h0_val == 4096
// opcode: sll16 ; op1:x10; op2:x15; dest:x1; op1val:0xfffd000c00801000;  op2val:0xd
TEST_RR_OP(sll16, x1, x10, x15, 0x0000000000000000, 0xfffd000c00801000, 0xd, x3, 48, x8)

inst_24:
// rs1==x20, rs2==x5, rd==x24, rs1_h3_val == 65534, rs1_h2_val == 65503, rs1_h1_val == 4096
// opcode: sll16 ; op1:x20; op2:x5; dest:x24; op1val:0xfffeffdf1000000a;  op2val:0x6
TEST_RR_OP(sll16, x24, x20, x5, 0x0000000000000000, 0xfffeffdf1000000a, 0x6, x3, 56, x8)

inst_25:
// rs1==x22, rs2==x9, rd==x14, rs1_h3_val == 32768, rs1_h0_val == 65519, rs1_h1_val == 65503
// opcode: sll16 ; op1:x22; op2:x9; dest:x14; op1val:0x80000011ffdfffef;  op2val:0x9
TEST_RR_OP(sll16, x14, x22, x9, 0x0000000000000000, 0x80000011ffdfffef, 0x9, x3, 64, x8)

inst_26:
// rs1==x4, rs2==x12, rd==x7, rs1_h3_val == 8192, rs1_h0_val == 64511
// opcode: sll16 ; op1:x4; op2:x12; dest:x7; op1val:0x200002000200fbff;  op2val:0x1
TEST_RR_OP(sll16, x7, x4, x12, 0x0000000000000000, 0x200002000200fbff, 0x1, x3, 72, x8)

inst_27:
// rs1==x13, rs2==x26, rd==x28, rs1_h3_val == 4096, 
// opcode: sll16 ; op1:x13; op2:x26; dest:x28; op1val:0x10000008fffdffbf;  op2val:0x12
TEST_RR_OP(sll16, x28, x13, x26, 0x0000000000000000, 0x10000008fffdffbf, 0x12, x3, 80, x8)

inst_28:
// rs1==x7, rs2==x17, rd==x2, rs1_h3_val == 2048, rs1_h0_val == 63487
// opcode: sll16 ; op1:x7; op2:x17; dest:x2; op1val:0x800000f000af7ff;  op2val:0x2
TEST_RR_OP(sll16, x2, x7, x17, 0x0000000000000000, 0x800000f000af7ff, 0x2, x3, 88, x8)

inst_29:
// rs1==x21, rs2==x4, rd==x5, rs1_h3_val == 1024, rs1_h1_val == 32768
// opcode: sll16 ; op1:x21; op2:x4; dest:x5; op1val:0x400000b8000dfff;  op2val:0x9
TEST_RR_OP(sll16, x5, x21, x4, 0x0000000000000000, 0x400000b8000dfff, 0x9, x3, 96, x8)

inst_30:
// rs1==x30, rs2==x10, rd==x31, rs1_h0_val == 65531, 
// opcode: sll16 ; op1:x30; op2:x10; dest:x31; op1val:0x1000000b000ffffb;  op2val:0xe
TEST_RR_OP(sll16, x31, x30, x10, 0x0000000000000000, 0x1000000b000ffffb, 0xe, x3, 104, x8)

inst_31:
// rs1==x9, rs2==x7, rd==x13, rs1_h0_val == 65533, 
// opcode: sll16 ; op1:x9; op2:x7; dest:x13; op1val:0x0d0011000ffffd;  op2val:0xc
TEST_RR_OP(sll16, x13, x9, x7, 0x0000000000000000, 0x0d0011000ffffd, 0xc, x3, 112, x1)

inst_32:
// rs1_h0_val == 2048, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffaaaa00130800;  op2val:0x10
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xbfffaaaa00130800, 0x10, x3, 120, x1)

inst_33:
// rs1_h0_val == 512, rs1_h3_val == 16
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fffe000f0200;  op2val:0xb
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x10fffe000f0200, 0xb, x3, 128, x1)

inst_34:
// rs1_h0_val == 256, rs1_h3_val == 0
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000030100;  op2val:0x1
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x00400000030100, 0x1, x3, 136, x1)

inst_35:
// rs1_h0_val == 128, rs1_h2_val == 65407
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff7fefff0080;  op2val:0xa
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x7fffff7fefff0080, 0xa, x3, 144, x1)

inst_36:
// rs1_h0_val == 64, rs1_h1_val == 32
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff000c00200040;  op2val:0x6
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xbfff000c00200040, 0x6, x3, 152, x1)

inst_37:
// rs1_h0_val == 32, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000210000020;  op2val:0xd
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x80000210000020, 0xd, x3, 160, x1)

inst_38:
// rs1_h0_val == 8, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb7fff00200008;  op2val:0x8
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xfffb7fff00200008, 0x8, x3, 168, x1)

inst_39:
// rs1_h0_val == 2, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000c00130002;  op2val:0x10
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xfffb000c00130002, 0x10, x3, 176, x1)

inst_40:
// rs1_h0_val == 1, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe010055550001;  op2val:0xb
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xfffe010055550001, 0xb, x3, 184, x1)

inst_41:
// rs1_h0_val == 65535, rs1_h2_val == 2048
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x0608000005ffff;  op2val:0x11
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x0608000005ffff, 0x11, x3, 192, x1)

inst_42:
// rs1_h0_val == 0, rs1_h2_val == 0, rs1_h3_val == 65535
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0000000f0000;  op2val:0x11
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xffff0000000f0000, 0x11, x3, 200, x1)

inst_43:
// rs1_h3_val == 512, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x200000100040013;  op2val:0xe
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x200000100040013, 0xe, x3, 208, x1)

inst_44:
// rs1_h3_val == 64, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fbff0009;  op2val:0xb
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x400000fbff0009, 0xb, x3, 216, x1)

inst_45:
// rs1_h3_val == 32, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x208000fffd0002;  op2val:0xd
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x208000fffd0002, 0xd, x3, 224, x1)

inst_46:
// rs1_h3_val == 8, rs1_h1_val == 65471
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x080200ffbf4000;  op2val:0x9
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x080200ffbf4000, 0x9, x3, 232, x1)

inst_47:
// rs1_h3_val == 1, rs1_h1_val == 65531
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x010009fffb8000;  op2val:0x7
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x010009fffb8000, 0x7, x3, 240, x1)

inst_48:
// rs1_h2_val == 49151, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffbfff000fffbf;  op2val:0x8
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xfdffbfff000fffbf, 0x8, x3, 248, x1)

inst_49:
// rs1_h2_val == 57343, rs1_h1_val == 32767
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffddfff7fff0100;  op2val:0x5
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xfffddfff7fff0100, 0x5, x3, 256, x1)

inst_50:
// rs1_h2_val == 61439, rs1_h0_val == 32767
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffeffffffd7fff;  op2val:0x12
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xefffeffffffd7fff, 0x12, x3, 264, x1)

inst_51:
// rs1_h2_val == 8192, rs1_h1_val == 57343
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef2000dffffeff;  op2val:0x2
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xffef2000dffffeff, 0x2, x3, 272, x1)

inst_52:
// rs1_h2_val == 1024, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x09040000110080;  op2val:0xd
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x09040000110080, 0xd, x3, 280, x1)

inst_53:
// rs1_h2_val == 64, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x120040000b0003;  op2val:0xe
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x120040000b0003, 0xe, x3, 288, x1)

inst_54:
// rs1_h2_val == 32, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x800020000b0080;  op2val:0xf
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x800020000b0080, 0xf, x3, 296, x1)

inst_55:
// rs1_h2_val == 4, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x080004000a0080;  op2val:0x3
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x080004000a0080, 0x3, x3, 304, x1)

inst_56:
// rs1_h2_val == 65535, rs1_h1_val == 43690
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000ffffaaaa000e;  op2val:0x11
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x4000ffffaaaa000e, 0x11, x3, 312, x1)

inst_57:
// rs1_h1_val == 65023, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e000bfdfffffd;  op2val:0x2
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x0e000bfdfffffd, 0x2, x3, 320, x1)

inst_58:
// rs1_h1_val == 65279, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x120008feff0100;  op2val:0x7
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x120008feff0100, 0x7, x3, 328, x1)

inst_59:
// rs1_h1_val == 65519, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0040ffef0004;  op2val:0x9
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xaaaa0040ffef0004, 0x9, x3, 336, x1)

inst_60:
// rs1_h1_val == 65527, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffff70800;  op2val:0xe
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xdffffffffff70800, 0xe, x3, 344, x1)

inst_61:
// rs1_h1_val == 65534, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000005fffe0009;  op2val:0xf
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x20000005fffe0009, 0xf, x3, 352, x1)

inst_62:
// rs1_h1_val == 16384, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x0204004000000f;  op2val:0x5
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x0204004000000f, 0x5, x3, 360, x1)

inst_63:
// rs1_h1_val == 8192, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x07020020000006;  op2val:0xd
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x07020020000006, 0xd, x3, 368, x1)

inst_64:
// rs1_h1_val == 1024, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fffe04000002;  op2val:0x0
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x100fffe04000002, 0x0, x3, 376, x1)

inst_65:
// rs1_h1_val == 256, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x40efff0100ffbf;  op2val:0x1
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x40efff0100ffbf, 0x1, x3, 384, x1)

inst_66:
// rs1_h1_val == 16, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x1200110010ffef;  op2val:0x9
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x1200110010ffef, 0x9, x3, 392, x1)

inst_67:
// rs1_h1_val == 8, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe000a00080008;  op2val:0x12
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xfffe000a00080008, 0x12, x3, 400, x1)

inst_68:
// rs1_h2_val == 63487, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000f7ffffbf0009;  op2val:0x11
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x2000f7ffffbf0009, 0x11, x3, 408, x1)

inst_69:
// rs1_h1_val == 65535, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x025555fffffffe;  op2val:0x11
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x025555fffffffe, 0x11, x3, 416, x1)

inst_70:
// rs1_h2_val == 64511, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffbff00100020;  op2val:0x0
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xf7fffbff00100020, 0x0, x3, 424, x1)

inst_71:
// rs1_h1_val == 0, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f04000000fff7;  op2val:0x5
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xff7f04000000fff7, 0x5, x3, 432, x1)

inst_72:
// rs1_h2_val == 65023, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffdffeffffffb;  op2val:0x5
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xffdffdffeffffffb, 0x5, x3, 440, x1)

inst_73:
// rs1_h0_val == 43690, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf55550100aaaa;  op2val:0xa
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xffbf55550100aaaa, 0xa, x3, 448, x1)

inst_74:
// rs1_h0_val == 49151, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x13fbff7fffbfff;  op2val:0xa
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x13fbff7fffbfff, 0xa, x3, 456, x1)

inst_75:
// rs1_h2_val == 65527, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fff7ffdf0003;  op2val:0x12
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x05fff7ffdf0003, 0x12, x3, 464, x1)

inst_76:
// rs1_h0_val == 65023, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x200003dffffdff;  op2val:0x1
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x200003dffffdff, 0x1, x3, 472, x1)

inst_77:
// rs1_h0_val == 21845, 
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffbefff5555;  op2val:0x10
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xaaaafffbefff5555, 0x10, x3, 480, x1)

inst_78:
// rs2_val == 1, rs1_h1_val == 65533, rs1_h2_val == 4096, rs1_h0_val == 57343
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d1000fffddfff;  op2val:0x1
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0x0d1000fffddfff, 0x1, x3, 488, x1)

inst_79:
// rs1_h3_val == 65407, rs1_h2_val == 65471
// opcode: sll16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffbf0080000d;  op2val:0xd
TEST_RR_OP(sll16, x31, x30, x29, 0x0000000000000000, 0xff7fffbf0080000d, 0xd, x3, 496, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 63*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
