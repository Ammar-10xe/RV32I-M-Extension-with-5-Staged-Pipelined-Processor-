
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sra16 instruction of the RISC-V RV64PZicsr extension for the sra16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sra16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x10,signature_x10_1)

inst_0:
// rs1 == rd != rs2, rs1==x9, rs2==x1, rd==x9, rs2_val == 5, rs1_h0_val == 16384, rs1_h3_val == -21846, rs1_h2_val == 4096
// opcode: sra16 ; op1:x9; op2:x1; dest:x9; op1val:0xaaaa1000fff84000;  op2val:0x5
TEST_RR_OP(sra16, x9, x9, x1, 0x0000000000000000, 0xaaaa1000fff84000, 0x5, x10, 0, x21)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x4, rs2==x18, rd==x6, rs2_val == 7, rs1_h2_val == 2048, rs1_h1_val == -4097
// opcode: sra16 ; op1:x4; op2:x18; dest:x6; op1val:0xc0000800efff0007;  op2val:0x7
TEST_RR_OP(sra16, x6, x4, x18, 0x0000000000000000, 0xc0000800efff0007, 0x7, x10, 8, x21)

inst_2:
// rs1 == rs2 != rd, rs1==x12, rs2==x12, rd==x8, rs2_val == 11, rs1_h3_val == -1025, rs1_h1_val == -21846, rs1_h0_val == 4, rs1_h2_val == -21846
// opcode: sra16 ; op1:x12; op2:x12; dest:x8; op1val:0xfbffaaaaaaaa0004;  op2val:0xb
TEST_RR_OP(sra16, x8, x12, x12, 0x0000000000000000, 0xfbffaaaaaaaa0004, 0xb, x10, 16, x21)

inst_3:
// rs1 == rs2 == rd, rs1==x27, rs2==x27, rd==x27, rs2_val == 13, rs1_h2_val == -4097
// opcode: sra16 ; op1:x27; op2:x27; dest:x27; op1val:0xfff6efff3ffffff9;  op2val:0xd
TEST_RR_OP(sra16, x27, x27, x27, 0x0000000000000000, 0xfff6efff3ffffff9, 0xd, x10, 24, x21)

inst_4:
// rs2 == rd != rs1, rs1==x15, rs2==x14, rd==x14, rs2_val == 14, rs1_h0_val == -33, rs1_h2_val == 8
// opcode: sra16 ; op1:x15; op2:x14; dest:x14; op1val:0x070008fffaffdf;  op2val:0xe
TEST_RR_OP(sra16, x14, x15, x14, 0x0000000000000000, 0x070008fffaffdf, 0xe, x10, 32, x21)

inst_5:
// rs1==x20, rs2==x16, rd==x4, rs2_val == 8, rs1_h1_val == 0, rs1_h2_val == -5, rs1_h0_val == -9, rs1_h3_val == -2049
// opcode: sra16 ; op1:x20; op2:x16; dest:x4; op1val:0xf7fffffb0000fff7;  op2val:0x8
TEST_RR_OP(sra16, x4, x20, x16, 0x0000000000000000, 0xf7fffffb0000fff7, 0x8, x10, 40, x21)

inst_6:
// rs1==x29, rs2==x4, rd==x17, rs2_val == 4, rs1_h3_val == -129, rs1_h2_val == -3, rs1_h0_val == 21845
// opcode: sra16 ; op1:x29; op2:x4; dest:x17; op1val:0xff7ffffdaaaa5555;  op2val:0x4
TEST_RR_OP(sra16, x17, x29, x4, 0x0000000000000000, 0xff7ffffdaaaa5555, 0x4, x10, 48, x21)

inst_7:
// rs1==x11, rs2==x2, rd==x30, rs2_val == 2, rs1_h2_val == 16, rs1_h3_val == -16385, rs1_h1_val == -2
// opcode: sra16 ; op1:x11; op2:x2; dest:x30; op1val:0xbfff0010fffe0009;  op2val:0x2
TEST_RR_OP(sra16, x30, x11, x2, 0x0000000000000000, 0xbfff0010fffe0009, 0x2, x10, 56, x21)

inst_8:
// rs1==x26, rs2==x7, rd==x3, rs2_val == 1, rs1_h3_val == 4, rs1_h2_val == -32768
// opcode: sra16 ; op1:x26; op2:x7; dest:x3; op1val:0x04800000003fff;  op2val:0x1
TEST_RR_OP(sra16, x3, x26, x7, 0x0000000000000000, 0x04800000003fff, 0x1, x10, 64, x21)

inst_9:
// rs1==x24, rs2==x30, rd==x16, rs1_h3_val == 21845, rs1_h2_val == -16385
// opcode: sra16 ; op1:x24; op2:x30; dest:x16; op1val:0x5555bfff00033fff;  op2val:0x6
TEST_RR_OP(sra16, x16, x24, x30, 0x0000000000000000, 0x5555bfff00033fff, 0x6, x10, 72, x21)

inst_10:
// rs1==x19, rs2==x3, rd==x28, rs1_h3_val == 32767, rs1_h0_val == -16385, rs1_h2_val == -8193
// opcode: sra16 ; op1:x19; op2:x3; dest:x28; op1val:0x7fffdfffaaaabfff;  op2val:0xe
TEST_RR_OP(sra16, x28, x19, x3, 0x0000000000000000, 0x7fffdfffaaaabfff, 0xe, x10, 80, x21)

inst_11:
// rs1==x23, rs2==x5, rd==x13, rs1_h3_val == -8193, rs1_h1_val == 128
// opcode: sra16 ; op1:x23; op2:x5; dest:x13; op1val:0xdfff000800804000;  op2val:0x9
TEST_RR_OP(sra16, x13, x23, x5, 0x0000000000000000, 0xdfff000800804000, 0x9, x10, 88, x21)

inst_12:
// rs1==x0, rs2==x29, rd==x25, rs1_h3_val == -4097, rs1_h0_val == 8, rs1_h2_val == 256
// opcode: sra16 ; op1:x0; op2:x29; dest:x25; op1val:0xefff0100fffc0008;  op2val:0x4
TEST_RR_OP(sra16, x25, x0, x29, 0x0000000000000000, 0xefff0100fffc0008, 0x4, x10, 96, x4)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_13:
// rs1==x6, rs2==x23, rd==x31, rs1_h3_val == -513, rs1_h1_val == -129, rs1_h0_val == 1024
// opcode: sra16 ; op1:x6; op2:x23; dest:x31; op1val:0xfdffdfffff7f0400;  op2val:0x5
TEST_RR_OP(sra16, x31, x6, x23, 0x0000000000000000, 0xfdffdfffff7f0400, 0x5, x3, 0, x4)

inst_14:
// rs1==x5, rs2==x10, rd==x18, rs1_h3_val == -257, rs1_h0_val == -513
// opcode: sra16 ; op1:x5; op2:x10; dest:x18; op1val:0xfeff00100005fdff;  op2val:0x0
TEST_RR_OP(sra16, x18, x5, x10, 0x0000000000000000, 0xfeff00100005fdff, 0x0, x3, 8, x4)

inst_15:
// rs1==x14, rs2==x13, rd==x26, rs1_h3_val == -65, rs1_h2_val == 32, rs1_h0_val == 256, rs1_h1_val == 16
// opcode: sra16 ; op1:x14; op2:x13; dest:x26; op1val:0xffbf002000100100;  op2val:0xb
TEST_RR_OP(sra16, x26, x14, x13, 0x0000000000000000, 0xffbf002000100100, 0xb, x3, 16, x4)

inst_16:
// rs1==x25, rs2==x19, rd==x12, rs1_h3_val == -33, rs1_h0_val == -1025, rs1_h1_val == -2049
// opcode: sra16 ; op1:x25; op2:x19; dest:x12; op1val:0xffdf0006f7fffbff;  op2val:0x0
TEST_RR_OP(sra16, x12, x25, x19, 0x0000000000000000, 0xffdf0006f7fffbff, 0x0, x3, 24, x4)

inst_17:
// rs1==x10, rs2==x25, rd==x1, rs1_h3_val == -17, rs1_h0_val == 64, rs1_h1_val == 512
// opcode: sra16 ; op1:x10; op2:x25; dest:x1; op1val:0xffef000702000040;  op2val:0x10
TEST_RR_OP(sra16, x1, x10, x25, 0x0000000000000000, 0xffef000702000040, 0x10, x3, 32, x4)

inst_18:
// rs1==x2, rs2==x31, rd==x15, rs1_h3_val == -9, rs1_h1_val == 1, rs1_h0_val == -2
// opcode: sra16 ; op1:x2; op2:x31; dest:x15; op1val:0xfff7fffb0001fffe;  op2val:0x6
TEST_RR_OP(sra16, x15, x2, x31, 0x0000000000000000, 0xfff7fffb0001fffe, 0x6, x3, 40, x4)

inst_19:
// rs1==x18, rs2==x9, rd==x24, rs1_h3_val == -5, rs1_h1_val == -65, rs1_h0_val == -257
// opcode: sra16 ; op1:x18; op2:x9; dest:x24; op1val:0xfffb3fffffbffeff;  op2val:0x11
TEST_RR_OP(sra16, x24, x18, x9, 0x0000000000000000, 0xfffb3fffffbffeff, 0x11, x3, 48, x4)

inst_20:
// rs1==x1, rs2==x8, rd==x7, rs1_h3_val == -3, rs1_h2_val == 512
// opcode: sra16 ; op1:x1; op2:x8; dest:x7; op1val:0xfffd02000001fffc;  op2val:0x1
TEST_RR_OP(sra16, x7, x1, x8, 0x0000000000000000, 0xfffd02000001fffc, 0x1, x3, 56, x4)

inst_21:
// rs1==x31, rs2==x24, rd==x0, rs1_h3_val == -2, rs1_h1_val == 64
// opcode: sra16 ; op1:x31; op2:x24; dest:x0; op1val:0xfffe10000040ffdf;  op2val:0x4
TEST_RR_OP(sra16, x0, x31, x24, 0x0000000000000000, 0xfffe10000040ffdf, 0x4, x3, 64, x4)

inst_22:
// rs1==x7, rs2==x28, rd==x21, rs1_h3_val == -32768, rs1_h1_val == 4, rs1_h0_val == 32
// opcode: sra16 ; op1:x7; op2:x28; dest:x21; op1val:0x8000fff600040020;  op2val:0x9
TEST_RR_OP(sra16, x21, x7, x28, 0x0000000000000000, 0x8000fff600040020, 0x9, x3, 72, x4)

inst_23:
// rs1==x22, rs2==x6, rd==x20, rs1_h3_val == 16384, rs2_val == 10, rs1_h2_val == -17, rs1_h0_val == 16, rs1_h1_val == -9
// opcode: sra16 ; op1:x22; op2:x6; dest:x20; op1val:0x4000ffeffff70010;  op2val:0xa
TEST_RR_OP(sra16, x20, x22, x6, 0x0000000000000000, 0x4000ffeffff70010, 0xa, x3, 80, x4)

inst_24:
// rs1==x28, rs2==x20, rd==x23, rs1_h3_val == 8192, rs1_h2_val == 1, rs1_h0_val == 0
// opcode: sra16 ; op1:x28; op2:x20; dest:x23; op1val:0x2000000100100000;  op2val:0x5
TEST_RR_OP(sra16, x23, x28, x20, 0x0000000000000000, 0x2000000100100000, 0x5, x3, 88, x4)

inst_25:
// rs1==x30, rs2==x15, rd==x29, rs1_h3_val == 4096, rs1_h1_val == -513
// opcode: sra16 ; op1:x30; op2:x15; dest:x29; op1val:0x10000007fdff0009;  op2val:0xc
TEST_RR_OP(sra16, x29, x30, x15, 0x0000000000000000, 0x10000007fdff0009, 0xc, x3, 96, x4)

inst_26:
// rs1==x17, rs2==x22, rd==x2, rs1_h3_val == 2048, rs1_h2_val == 16384
// opcode: sra16 ; op1:x17; op2:x22; dest:x2; op1val:0x8004000efff0040;  op2val:0x4
TEST_RR_OP(sra16, x2, x17, x22, 0x0000000000000000, 0x8004000efff0040, 0x4, x3, 104, x4)

inst_27:
// rs1==x8, rs2==x26, rd==x10, rs1_h3_val == 1024, rs1_h1_val == 4096, rs1_h2_val == 21845
// opcode: sra16 ; op1:x8; op2:x26; dest:x10; op1val:0x400555510004000;  op2val:0x5
TEST_RR_OP(sra16, x10, x8, x26, 0x0000000000000000, 0x400555510004000, 0x5, x3, 112, x2)

inst_28:
// rs1==x13, rs2==x11, rd==x19, rs1_h3_val == 512, 
// opcode: sra16 ; op1:x13; op2:x11; dest:x19; op1val:0x20000090010bfff;  op2val:0x2
TEST_RR_OP(sra16, x19, x13, x11, 0x0000000000000000, 0x20000090010bfff, 0x2, x3, 120, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x16, rs2==x21, rd==x11, rs1_h3_val == 256, rs1_h1_val == -32768
// opcode: sra16 ; op1:x16; op2:x21; dest:x11; op1val:0x10001008000fff7;  op2val:0x9
TEST_RR_OP(sra16, x11, x16, x21, 0x0000000000000000, 0x10001008000fff7, 0x9, x1, 0, x2)

inst_30:
// rs1==x21, rs2==x0, rd==x5, rs1_h3_val == 128, rs1_h0_val == -4097
// opcode: sra16 ; op1:x21; op2:x0; dest:x5; op1val:0x8000070080efff;  op2val:0x0
TEST_RR_OP(sra16, x5, x21, x0, 0x0000000000000000, 0x8000070080efff, 0x0, x1, 8, x2)

inst_31:
// rs1==x3, rs2==x17, rd==x22, rs1_h3_val == 64, 
// opcode: sra16 ; op1:x3; op2:x17; dest:x22; op1val:0x400001fffabfff;  op2val:0xf
TEST_RR_OP(sra16, x22, x3, x17, 0x0000000000000000, 0x400001fffabfff, 0xf, x1, 16, x2)

inst_32:
// rs1_h0_val == -65, rs1_h2_val == -9
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfff7fff9ffbf;  op2val:0xf
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xfffcfff7fff9ffbf, 0xf, x1, 24, x2)

inst_33:
// rs1_h0_val == -17, rs1_h3_val == 2, rs1_h1_val == -33
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fff8ffdfffef;  op2val:0x5
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x02fff8ffdfffef, 0x5, x1, 32, x2)

inst_34:
// rs1_h0_val == -5, rs1_h2_val == -65
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffbffff6fffb;  op2val:0x13
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x1000ffbffff6fffb, 0x13, x1, 40, x2)

inst_35:
// rs1_h0_val == -3, rs1_h1_val == 8
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff73fff0008fffd;  op2val:0x13
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xfff73fff0008fffd, 0x13, x1, 48, x2)

inst_36:
// rs1_h0_val == -32768, rs1_h1_val == -16385
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000200bfff8000;  op2val:0x10
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x1000200bfff8000, 0x10, x1, 56, x2)

inst_37:
// rs1_h0_val == 8192, rs1_h1_val == 32767
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x0600207fff2000;  op2val:0xf
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x0600207fff2000, 0xf, x1, 64, x2)

inst_38:
// rs1_h0_val == 4096, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffb02001000;  op2val:0x9
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xfff7fffb02001000, 0x9, x1, 72, x2)

inst_39:
// rs1_h0_val == 2048, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff600060800;  op2val:0xf
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x4000fff600060800, 0xf, x1, 80, x2)

inst_40:
// rs1_h0_val == 512, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x06000900070200;  op2val:0x1
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x06000900070200, 0x1, x1, 88, x2)

inst_41:
// rs1_h0_val == 128, rs1_h2_val == 1024
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x09040000000080;  op2val:0x4
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x09040000000080, 0x4, x1, 96, x2)

inst_42:
// rs1_h0_val == 2, rs1_h3_val == 0, rs1_h1_val == -1
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x000100ffff0002;  op2val:0x11
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x000100ffff0002, 0x11, x1, 104, x2)

inst_43:
// rs1_h0_val == 1, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff3fff00070001;  op2val:0x2
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xefff3fff00070001, 0x2, x1, 112, x2)

inst_44:
// rs1_h0_val == -1, rs1_h1_val == 8192
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffd2000ffff;  op2val:0x4
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x1000fffd2000ffff, 0x4, x1, 120, x2)

inst_45:
// rs1_h3_val == 32, rs1_h0_val == -21846
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fffbc000aaaa;  op2val:0x11
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x20fffbc000aaaa, 0x11, x1, 128, x2)

inst_46:
// rs1_h3_val == 16, rs1_h2_val == -2
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fffefffac000;  op2val:0x3
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x10fffefffac000, 0x3, x1, 136, x2)

inst_47:
// rs1_h3_val == 8, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x08efff8000fff7;  op2val:0x0
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x08efff8000fff7, 0x0, x1, 144, x2)

inst_48:
// rs1_h3_val == 1, rs1_h2_val == 8192
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x012000fff80080;  op2val:0xd
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x012000fff80080, 0xd, x1, 152, x2)

inst_49:
// rs1_h3_val == -1, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00805555;  op2val:0xf
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xffffffef00805555, 0xf, x1, 160, x2)

inst_50:
// rs1_h2_val == 128, rs1_h1_val == -8193
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0080dfff5555;  op2val:0x7
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xffdf0080dfff5555, 0x7, x1, 168, x2)

inst_51:
// rs1_h2_val == 64, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff004000083fff;  op2val:0xc
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xfdff004000083fff, 0xc, x1, 176, x2)

inst_52:
// rs1_h2_val == 4, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x0000047fff0000;  op2val:0x2
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x0000047fff0000, 0x2, x1, 184, x2)

inst_53:
// rs1_h2_val == 2, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0002ffdf8000;  op2val:0xe
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xfbff0002ffdf8000, 0xe, x1, 192, x2)

inst_54:
// rs1_h2_val == 0, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe000000040004;  op2val:0x13
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xfffe000000040004, 0x13, x1, 200, x2)

inst_55:
// rs1_h2_val == -1, rs1_h0_val == -8193
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffff7fdfff;  op2val:0xc
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xff7fffffff7fdfff, 0xc, x1, 208, x2)

inst_56:
// rs1_h1_val == 21845, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc000755550080;  op2val:0x13
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xfffc000755550080, 0x13, x1, 216, x2)

inst_57:
// rs1_h2_val == -129, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000ff7f0040dfff;  op2val:0x9
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x2000ff7f0040dfff, 0x9, x1, 224, x2)

inst_58:
// rs1_h1_val == -1025, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff7fbff0040;  op2val:0xb
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xdffffff7fbff0040, 0xb, x1, 232, x2)

inst_59:
// rs1_h1_val == -257, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0080feff0009;  op2val:0x1
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xffdf0080feff0009, 0x1, x1, 240, x2)

inst_60:
// rs1_h1_val == -17, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0001ffef2000;  op2val:0xd
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xfbff0001ffef2000, 0xd, x1, 248, x2)

inst_61:
// rs1_h1_val == -5, rs1_h2_val == -257
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fefffffbfbff;  op2val:0xb
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x200fefffffbfbff, 0xb, x1, 256, x2)

inst_62:
// rs1_h1_val == -3, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0002fffdfff7;  op2val:0x3
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xfffb0002fffdfff7, 0x3, x1, 264, x2)

inst_63:
// rs1_h1_val == 16384, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000555540000040;  op2val:0x6
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xc000555540000040, 0x6, x1, 272, x2)

inst_64:
// rs1_h1_val == 2048, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffdfff08000800;  op2val:0x2
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xbfffdfff08000800, 0x2, x1, 280, x2)

inst_65:
// rs1_h1_val == 1024, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000404000009;  op2val:0x1
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x1000000404000009, 0x1, x1, 288, x2)

inst_66:
// rs1_h1_val == 256, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x08bfff01000005;  op2val:0x5
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x08bfff01000005, 0x5, x1, 296, x2)

inst_67:
// rs1_h1_val == 32, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000900201000;  op2val:0x8
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x100000900201000, 0x8, x1, 304, x2)

inst_68:
// rs1_h2_val == 32767, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x20007fff7fff8000;  op2val:0xa
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x20007fff7fff8000, 0xa, x1, 312, x2)

inst_69:
// rs1_h1_val == 2, rs1_h2_val == -1025
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffbff00020001;  op2val:0x11
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xffbffbff00020001, 0x11, x1, 320, x2)

inst_70:
// rs1_h2_val == -2049, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffff7fffffdffef;  op2val:0x4
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xbffff7fffffdffef, 0x4, x1, 328, x2)

inst_71:
// rs1_h2_val == -513, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfdfff7fffff6;  op2val:0xe
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xfffcfdfff7fffff6, 0xe, x1, 336, x2)

inst_72:
// rs1_h2_val == -33, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaffdffffedfff;  op2val:0x11
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xaaaaffdffffedfff, 0x11, x1, 344, x2)

inst_73:
// rs1_h0_val == -2049, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffeff0000f7ff;  op2val:0x1
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xff7ffeff0000f7ff, 0x1, x1, 352, x2)

inst_74:
// rs1_h0_val == -129, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000800feffff7f;  op2val:0x13
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x2000800feffff7f, 0x13, x1, 360, x2)

inst_75:
// rs1_h0_val == 32767, 
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x03efffffff7fff;  op2val:0x3
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x03efffffff7fff, 0x3, x1, 368, x2)

inst_76:
// rs2_val == 11, rs1_h3_val == -1025, rs1_h1_val == -21846, rs1_h0_val == 4, rs1_h2_val == -21846
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffaaaaaaaa0004;  op2val:0xb
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xfbffaaaaaaaa0004, 0xb, x1, 376, x2)

inst_77:
// rs1_h3_val == -4097, rs1_h0_val == 8, rs1_h2_val == 256
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0100fffc0008;  op2val:0x4
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0xefff0100fffc0008, 0x4, x1, 384, x2)

inst_78:
// rs1_h3_val == 128, rs1_h0_val == -4097
// opcode: sra16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000070080efff;  op2val:0x3
TEST_RR_OP(sra16, x31, x30, x29, 0x0000000000000000, 0x8000070080efff, 0x3, x1, 392, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 13*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 50*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
