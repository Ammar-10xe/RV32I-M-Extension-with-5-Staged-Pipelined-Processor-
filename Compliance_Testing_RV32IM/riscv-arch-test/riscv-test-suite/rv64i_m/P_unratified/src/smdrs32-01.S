
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smdrs32 instruction of the RISC-V RV64PZicsr extension for the smdrs32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smdrs32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x6, rs2==x9, rd==x6, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w1_val == -3, rs1_w1_val == -1073741825, rs2_w0_val == -33554433
// opcode: smdrs32 ; op1:x6; op2:x9; dest:x6; op1val:0xbfffffff80000000;  op2val:0xfffffffdfdffffff
TEST_RR_OP(smdrs32, x6, x6, x9, 0x0000000000000000, 0xbfffffff80000000, 0xfffffffdfdffffff, x1, 0, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x16, rs2==x28, rd==x2, rs1_w1_val == rs2_w1_val, rs2_w1_val == 1024, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w1_val == 1024, rs2_w0_val == -3
// opcode: smdrs32 ; op1:x16; op2:x28; dest:x2; op1val:0x00040000000003;  op2val:0x000400fffffffd
TEST_RR_OP(smdrs32, x2, x16, x28, 0x0000000000000000, 0x00040000000003, 0x000400fffffffd, x1, 8, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x0, rs2==x0, rd==x4, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w1_val == -524289, rs1_w0_val == rs2_w0_val, rs2_w0_val == -33, rs2_w1_val == 268435456, rs1_w0_val == -33
// opcode: smdrs32 ; op1:x0; op2:x0; dest:x4; op1val:0xfff7ffffffffffdf;  op2val:0x10000000ffffffdf
TEST_RR_OP(smdrs32, x4, x0, x0, 0x0000000000000000, 0xfff7ffffffffffdf, 0x10000000ffffffdf, x1, 16, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x29, rs2==x29, rd==x29, rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w1_val == -4194305, rs1_w0_val == 1, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 4
// opcode: smdrs32 ; op1:x29; op2:x29; dest:x29; op1val:0x00040000000001;  op2val:0xffbfffff00000004
TEST_RR_OP(smdrs32, x29, x29, x29, 0x0000000000000000, 0x00040000000001, 0xffbfffff00000004, x1, 24, x8)

inst_4:
// rs2 == rd != rs1, rs1==x31, rs2==x16, rd==x16, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val == -1025, rs2_w1_val == 16, rs2_w0_val == 65536
// opcode: smdrs32 ; op1:x31; op2:x16; dest:x16; op1val:0xfffffff8fffffbff;  op2val:0x00001000010000
TEST_RR_OP(smdrs32, x16, x31, x16, 0x0000000000000000, 0xfffffff8fffffbff, 0x00001000010000, x1, 32, x8)

inst_5:
// rs1==x17, rs2==x2, rd==x28, rs2_w1_val == -1431655766, rs1_w1_val == 2097152, rs1_w0_val == -4097
// opcode: smdrs32 ; op1:x17; op2:x2; dest:x28; op1val:0x200000ffffefff;  op2val:0xaaaaaaaa00000005
TEST_RR_OP(smdrs32, x28, x17, x2, 0x0000000000000000, 0x200000ffffefff, 0xaaaaaaaa00000005, x1, 40, x8)

inst_6:
// rs1==x7, rs2==x12, rd==x21, rs2_w1_val == 1431655765, rs1_w1_val == -1048577, rs1_w0_val == 16, rs2_w0_val == 2048
// opcode: smdrs32 ; op1:x7; op2:x12; dest:x21; op1val:0xffefffff00000010;  op2val:0x5555555500000800
TEST_RR_OP(smdrs32, x21, x7, x12, 0x0000000000000000, 0xffefffff00000010, 0x5555555500000800, x1, 48, x8)

inst_7:
// rs1==x19, rs2==x15, rd==x24, rs2_w1_val == 2147483647, rs1_w1_val == -513, rs2_w0_val == 134217728
// opcode: smdrs32 ; op1:x19; op2:x15; dest:x24; op1val:0xfffffdfffffffff6;  op2val:0x7fffffff08000000
TEST_RR_OP(smdrs32, x24, x19, x15, 0x0000000000000000, 0xfffffdfffffffff6, 0x7fffffff08000000, x1, 56, x8)

inst_8:
// rs1==x26, rs2==x20, rd==x3, rs2_w1_val == -1073741825, rs2_w0_val == -129, rs1_w1_val == -8388609
// opcode: smdrs32 ; op1:x26; op2:x20; dest:x3; op1val:0xff7fffff00000006;  op2val:0xbfffffffffffff7f
TEST_RR_OP(smdrs32, x3, x26, x20, 0x0000000000000000, 0xff7fffff00000006, 0xbfffffffffffff7f, x1, 64, x8)

inst_9:
// rs1==x25, rs2==x24, rd==x20, rs2_w1_val == -536870913, rs1_w1_val == 2147483647, rs1_w0_val == 2147483647, rs2_w0_val == -134217729
// opcode: smdrs32 ; op1:x25; op2:x24; dest:x20; op1val:0x7fffffff7fffffff;  op2val:0xdffffffff7ffffff
TEST_RR_OP(smdrs32, x20, x25, x24, 0x0000000000000000, 0x7fffffff7fffffff, 0xdffffffff7ffffff, x1, 72, x8)

inst_10:
// rs1==x27, rs2==x5, rd==x23, rs2_w1_val == -268435457, rs1_w0_val == -131073
// opcode: smdrs32 ; op1:x27; op2:x5; dest:x23; op1val:0xfffffdfffffdffff;  op2val:0xefffffff00000004
TEST_RR_OP(smdrs32, x23, x27, x5, 0x0000000000000000, 0xfffffdfffffdffff, 0xefffffff00000004, x1, 80, x8)

inst_11:
// rs1==x30, rs2==x11, rd==x22, rs2_w1_val == -134217729, rs2_w0_val == -262145, rs1_w1_val == 524288, rs1_w0_val == -1048577
// opcode: smdrs32 ; op1:x30; op2:x11; dest:x22; op1val:0x080000ffefffff;  op2val:0xf7fffffffffbffff
TEST_RR_OP(smdrs32, x22, x30, x11, 0x0000000000000000, 0x080000ffefffff, 0xf7fffffffffbffff, x1, 88, x8)

inst_12:
// rs1==x24, rs2==x26, rd==x12, rs2_w1_val == -67108865, rs1_w1_val == -1, rs2_w0_val == 512
// opcode: smdrs32 ; op1:x24; op2:x26; dest:x12; op1val:0xffffffff00000005;  op2val:0xfbffffff00000200
TEST_RR_OP(smdrs32, x12, x24, x26, 0x0000000000000000, 0xffffffff00000005, 0xfbffffff00000200, x1, 96, x8)

inst_13:
// rs1==x22, rs2==x25, rd==x18, rs2_w1_val == -33554433, rs1_w1_val == -268435457, rs2_w0_val == 536870912
// opcode: smdrs32 ; op1:x22; op2:x25; dest:x18; op1val:0xeffffffffffffbff;  op2val:0xfdffffff20000000
TEST_RR_OP(smdrs32, x18, x22, x25, 0x0000000000000000, 0xeffffffffffffbff, 0xfdffffff20000000, x1, 104, x8)

inst_14:
// rs1==x8, rs2==x27, rd==x15, rs2_w1_val == -16777217, rs1_w0_val == -67108865, rs1_w1_val == 8388608
// opcode: smdrs32 ; op1:x8; op2:x27; dest:x15; op1val:0x800000fbffffff;  op2val:0xfeffffff3fffffff
TEST_RR_OP(smdrs32, x15, x8, x27, 0x0000000000000000, 0x800000fbffffff, 0xfeffffff3fffffff, x1, 112, x6)
RVTEST_SIGBASE(x16,signature_x16_0)

inst_15:
// rs1==x5, rs2==x18, rd==x11, rs2_w1_val == -8388609, rs1_w1_val == -2097153, rs2_w0_val == -2, rs1_w0_val == 524288
// opcode: smdrs32 ; op1:x5; op2:x18; dest:x11; op1val:0xffdfffff00080000;  op2val:0xff7ffffffffffffe
TEST_RR_OP(smdrs32, x11, x5, x18, 0x0000000000000000, 0xffdfffff00080000, 0xff7ffffffffffffe, x16, 0, x6)

inst_16:
// rs1==x1, rs2==x23, rd==x25, rs2_w1_val == -2097153, rs2_w0_val == 67108864, rs1_w0_val == 256, rs1_w1_val == 8
// opcode: smdrs32 ; op1:x1; op2:x23; dest:x25; op1val:0x00000800000100;  op2val:0xffdfffff04000000
TEST_RR_OP(smdrs32, x25, x1, x23, 0x0000000000000000, 0x00000800000100, 0xffdfffff04000000, x16, 8, x6)

inst_17:
// rs1==x21, rs2==x22, rd==x8, rs2_w1_val == -1048577, rs2_w0_val == 8388608, rs1_w1_val == 262144
// opcode: smdrs32 ; op1:x21; op2:x22; dest:x8; op1val:0x04000000000100;  op2val:0xffefffff00800000
TEST_RR_OP(smdrs32, x8, x21, x22, 0x0000000000000000, 0x04000000000100, 0xffefffff00800000, x16, 16, x6)

inst_18:
// rs1==x3, rs2==x1, rd==x0, rs2_w1_val == -524289, rs2_w0_val == -67108865, rs1_w1_val == -257
// opcode: smdrs32 ; op1:x3; op2:x1; dest:x0; op1val:0xfffffefffbffffff;  op2val:0xfff7fffffbffffff
TEST_RR_OP(smdrs32, x0, x3, x1, 0x0000000000000000, 0xfffffefffbffffff, 0xfff7fffffbffffff, x16, 24, x6)

inst_19:
// rs1==x2, rs2==x13, rd==x7, rs2_w1_val == -262145, 
// opcode: smdrs32 ; op1:x2; op2:x13; dest:x7; op1val:0xff7ffffffbffffff;  op2val:0xfffbffff00000009
TEST_RR_OP(smdrs32, x7, x2, x13, 0x0000000000000000, 0xff7ffffffbffffff, 0xfffbffff00000009, x16, 32, x6)

inst_20:
// rs1==x28, rs2==x17, rd==x10, rs2_w1_val == -131073, rs1_w0_val == 1431655765, rs2_w0_val == -1
// opcode: smdrs32 ; op1:x28; op2:x17; dest:x10; op1val:0xfffffffc55555555;  op2val:0xfffdffffffffffff
TEST_RR_OP(smdrs32, x10, x28, x17, 0x0000000000000000, 0xfffffffc55555555, 0xfffdffffffffffff, x16, 40, x6)

inst_21:
// rs1==x9, rs2==x31, rd==x26, rs2_w1_val == -65537, rs1_w1_val == 32, rs2_w0_val == 4194304, rs1_w0_val == -2097153
// opcode: smdrs32 ; op1:x9; op2:x31; dest:x26; op1val:0x000020ffdfffff;  op2val:0xfffeffff00400000
TEST_RR_OP(smdrs32, x26, x9, x31, 0x0000000000000000, 0x000020ffdfffff, 0xfffeffff00400000, x16, 48, x6)

inst_22:
// rs1==x14, rs2==x10, rd==x5, rs2_w1_val == -32769, rs2_w0_val == 8192, rs1_w0_val == -2049
// opcode: smdrs32 ; op1:x14; op2:x10; dest:x5; op1val:0x000003fffff7ff;  op2val:0xffff7fff00002000
TEST_RR_OP(smdrs32, x5, x14, x10, 0x0000000000000000, 0x000003fffff7ff, 0xffff7fff00002000, x16, 56, x6)

inst_23:
// rs1==x12, rs2==x3, rd==x13, rs2_w1_val == -16385, rs2_w0_val == -4194305
// opcode: smdrs32 ; op1:x12; op2:x3; dest:x13; op1val:0xefffffff00000005;  op2val:0xffffbfffffbfffff
TEST_RR_OP(smdrs32, x13, x12, x3, 0x0000000000000000, 0xefffffff00000005, 0xffffbfffffbfffff, x16, 64, x6)

inst_24:
// rs1==x15, rs2==x14, rd==x1, rs2_w1_val == -8193, rs2_w0_val == 2
// opcode: smdrs32 ; op1:x15; op2:x14; dest:x1; op1val:0xc000000000000007;  op2val:0xffffdfff00000002
TEST_RR_OP(smdrs32, x1, x15, x14, 0x0000000000000000, 0xc000000000000007, 0xffffdfff00000002, x16, 72, x6)

inst_25:
// rs1==x10, rs2==x7, rd==x19, rs2_w1_val == -4097, rs1_w0_val == 1073741824, rs2_w0_val == 1048576, rs1_w1_val == 128
// opcode: smdrs32 ; op1:x10; op2:x7; dest:x19; op1val:0x00008040000000;  op2val:0xffffefff00100000
TEST_RR_OP(smdrs32, x19, x10, x7, 0x0000000000000000, 0x00008040000000, 0xffffefff00100000, x16, 80, x6)

inst_26:
// rs1==x13, rs2==x30, rd==x9, rs2_w1_val == -2049, rs1_w1_val == -5
// opcode: smdrs32 ; op1:x13; op2:x30; dest:x9; op1val:0xfffffffbfffffff8;  op2val:0xfffff7ff00000005
TEST_RR_OP(smdrs32, x9, x13, x30, 0x0000000000000000, 0xfffffffbfffffff8, 0xfffff7ff00000005, x16, 88, x6)

inst_27:
// rs1==x23, rs2==x4, rd==x27, rs2_w1_val == -1025, rs2_w0_val == 32768, rs1_w0_val == 536870912, rs1_w1_val == 1
// opcode: smdrs32 ; op1:x23; op2:x4; dest:x27; op1val:0x00000120000000;  op2val:0xfffffbff00008000
TEST_RR_OP(smdrs32, x27, x23, x4, 0x0000000000000000, 0x00000120000000, 0xfffffbff00008000, x16, 96, x6)

inst_28:
// rs1==x20, rs2==x6, rd==x17, rs2_w1_val == -513, rs1_w1_val == -262145
// opcode: smdrs32 ; op1:x20; op2:x6; dest:x17; op1val:0xfffbffff20000000;  op2val:0xfffffdff00000002
TEST_RR_OP(smdrs32, x17, x20, x6, 0x0000000000000000, 0xfffbffff20000000, 0xfffffdff00000002, x16, 104, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_29:
// rs1==x11, rs2==x8, rd==x14, rs2_w1_val == -257, rs1_w1_val == 4096, rs2_w0_val == 16, rs1_w0_val == 4
// opcode: smdrs32 ; op1:x11; op2:x8; dest:x14; op1val:0x00100000000004;  op2val:0xfffffeff00000010
TEST_RR_OP(smdrs32, x14, x11, x8, 0x0000000000000000, 0x00100000000004, 0xfffffeff00000010, x1, 0, x2)

inst_30:
// rs1==x18, rs2==x19, rd==x31, rs2_w1_val == -129, rs2_w0_val == 2147483647, rs1_w1_val == -131073, rs1_w0_val == 2048
// opcode: smdrs32 ; op1:x18; op2:x19; dest:x31; op1val:0xfffdffff00000800;  op2val:0xffffff7f7fffffff
TEST_RR_OP(smdrs32, x31, x18, x19, 0x0000000000000000, 0xfffdffff00000800, 0xffffff7f7fffffff, x1, 8, x2)

inst_31:
// rs1==x4, rs2==x21, rd==x30, rs2_w1_val == -65, rs2_w0_val == -1431655766
// opcode: smdrs32 ; op1:x4; op2:x21; dest:x30; op1val:0xfffffffb00000006;  op2val:0xffffffbfaaaaaaaa
TEST_RR_OP(smdrs32, x30, x4, x21, 0x0000000000000000, 0xfffffffb00000006, 0xffffffbfaaaaaaaa, x1, 16, x2)

inst_32:
// rs2_w1_val == -33, rs1_w0_val == 16777216, rs1_w1_val == -2
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe01000000;  op2val:0xffffffdffffffff6
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffe01000000, 0xffffffdffffffff6, x1, 24, x2)

inst_33:
// rs2_w1_val == -17, rs2_w0_val == 1024, rs1_w1_val == 67108864
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000100;  op2val:0xffffffef00000400
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x400000000000100, 0xffffffef00000400, x1, 32, x2)

inst_34:
// rs2_w1_val == -9, rs1_w0_val == 32
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000020;  op2val:0xfffffff700000003
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000020, 0xfffffff700000003, x1, 40, x2)

inst_35:
// rs2_w1_val == -5, rs1_w1_val == 512
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200fffffff9;  op2val:0xfffffffb00000002
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x000200fffffff9, 0xfffffffb00000002, x1, 48, x2)

inst_36:
// rs2_w1_val == -2, rs2_w0_val == -2049
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000007;  op2val:0xfffffffefffff7ff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x00040000000007, 0xfffffffefffff7ff, x1, 56, x2)

inst_37:
// rs2_w1_val == -2147483648, rs1_w1_val == -65537
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffc0000000;  op2val:0x8000000000002000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffeffffc0000000, 0x8000000000002000, x1, 64, x2)

inst_38:
// rs2_w1_val == 1073741824, rs1_w1_val == 268435456
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000040000000;  op2val:0x4000000000400000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x1000000040000000, 0x4000000000400000, x1, 72, x2)

inst_39:
// rs2_w1_val == 536870912, rs2_w0_val == -5, rs1_w0_val == -1431655766, rs1_w1_val == 131072
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000aaaaaaaa;  op2val:0x20000000fffffffb
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x020000aaaaaaaa, 0x20000000fffffffb, x1, 80, x2)

inst_40:
// rs2_w1_val == 134217728, rs1_w1_val == 64, rs2_w0_val == -268435457, rs1_w0_val == -17
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffffffef;  op2val:0x8000000efffffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x000040ffffffef, 0x8000000efffffff, x1, 88, x2)

inst_41:
// rs2_w1_val == 67108864, rs1_w1_val == -536870913, rs1_w0_val == 2097152
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00200000;  op2val:0x400000000000400
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00200000, 0x400000000000400, x1, 96, x2)

inst_42:
// rs2_w1_val == 33554432, rs1_w0_val == 2, rs1_w1_val == 536870912, rs2_w0_val == -1048577
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000002;  op2val:0x2000000ffefffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x2000000000000002, 0x2000000ffefffff, x1, 104, x2)

inst_43:
// rs2_w1_val == 16777216, rs1_w0_val == -129
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffff7f;  op2val:0x100000000400000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffff7f, 0x100000000400000, x1, 112, x2)

inst_44:
// rs2_w1_val == 8388608, rs2_w0_val == -1073741825, rs1_w1_val == -33554433
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffc0000000;  op2val:0x800000bfffffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfdffffffc0000000, 0x800000bfffffff, x1, 120, x2)

inst_45:
// rs2_w1_val == 4194304, rs1_w1_val == -1431655766
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000002;  op2val:0x400000c0000000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000002, 0x400000c0000000, x1, 128, x2)

inst_46:
// rs2_w1_val == 2097152, rs1_w0_val == 512
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000200;  op2val:0x20000000800000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000200, 0x20000000800000, x1, 136, x2)

inst_47:
// rs2_w1_val == 1048576, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x0200007fffffff;  op2val:0x10000000100000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x0200007fffffff, 0x10000000100000, x1, 144, x2)

inst_48:
// rs2_w1_val == 524288, rs2_w0_val == -1025, rs1_w0_val == 16384, rs1_w1_val == -9
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700004000;  op2val:0x080000fffffbff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffffff700004000, 0x080000fffffbff, x1, 152, x2)

inst_49:
// rs2_w1_val == 262144, rs2_w0_val == -16777217
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00004000;  op2val:0x040000feffffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00004000, 0x040000feffffff, x1, 160, x2)

inst_50:
// rs1_w0_val == 33554432, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000302000000;  op2val:0xfffffff800000003
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x00000302000000, 0xfffffff800000003, x1, 168, x2)

inst_51:
// rs1_w0_val == 8388608, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600800000;  op2val:0xfbffffff3fffffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffffff600800000, 0xfbffffff3fffffff, x1, 176, x2)

inst_52:
// rs1_w0_val == 4194304, rs1_w1_val == 8192
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000400000;  op2val:0xfffeffff00000005
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x00200000400000, 0xfffeffff00000005, x1, 184, x2)

inst_53:
// rs1_w0_val == 1048576, rs2_w1_val == 4096
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00100000;  op2val:0x001000efffffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00100000, 0x001000efffffff, x1, 192, x2)

inst_54:
// rs1_w0_val == 262144, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100040000;  op2val:0x5555555500000010
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x00000100040000, 0x5555555500000010, x1, 200, x2)

inst_55:
// rs1_w0_val == 131072, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00020000;  op2val:0x000010fffffffb
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00020000, 0x000010fffffffb, x1, 208, x2)

inst_56:
// rs1_w0_val == 65536, rs2_w0_val == 32
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000010000;  op2val:0x00100000000020
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x02000000010000, 0x00100000000020, x1, 216, x2)

inst_57:
// rs1_w0_val == 32768, rs2_w0_val == 0
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00008000;  op2val:0xfffffff900000000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffc00008000, 0xfffffff900000000, x1, 224, x2)

inst_58:
// rs1_w0_val == 8192, rs2_w0_val == -16385, rs1_w1_val == 32768
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000002000;  op2val:0xffffffbfffffbfff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x00800000002000, 0xffffffbfffffbfff, x1, 232, x2)

inst_59:
// rs1_w0_val == 4096, rs2_w1_val == 64, rs2_w0_val == -536870913, rs1_w1_val == 1431655765
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500001000;  op2val:0x000040dfffffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x5555555500001000, 0x000040dfffffff, x1, 240, x2)

inst_60:
// rs1_w0_val == 1024, rs2_w0_val == 16384
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000400;  op2val:0x00040000004000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000400, 0x00040000004000, x1, 248, x2)

inst_61:
// rs1_w0_val == 128, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000080;  op2val:0x10000000fffffbff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x00000700000080, 0x10000000fffffbff, x1, 256, x2)

inst_62:
// rs1_w0_val == 64, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000040;  op2val:0x00000500008000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x400000000000040, 0x00000500008000, x1, 264, x2)

inst_63:
// rs1_w0_val == 8, rs2_w1_val == 2, rs1_w1_val == 256, rs2_w0_val == -9
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000008;  op2val:0x000002fffffff7
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x00010000000008, 0x000002fffffff7, x1, 272, x2)

inst_64:
// rs1_w0_val == 0, rs2_w0_val == -65, rs2_w1_val == 4, rs1_w1_val == -32769
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000000;  op2val:0x000004ffffffbf
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000000, 0x000004ffffffbf, x1, 280, x2)

inst_65:
// rs1_w0_val == -1, rs2_w0_val == 1, rs1_w1_val == 4
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004ffffffff;  op2val:0x1000000000000001
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x000004ffffffff, 0x1000000000000001, x1, 288, x2)

inst_66:
// rs2_w1_val == 131072, rs1_w1_val == 2048, rs1_w0_val == -32769
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffff7fff;  op2val:0x02000000000400
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x000800ffff7fff, 0x02000000000400, x1, 296, x2)

inst_67:
// rs2_w1_val == 65536, rs1_w0_val == -65
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcffffffbf;  op2val:0x010000ffefffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffcffffffbf, 0x010000ffefffff, x1, 304, x2)

inst_68:
// rs2_w1_val == 32768, rs2_w0_val == -131073, rs1_w0_val == -134217729
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffff7ffffff;  op2val:0x008000fffdffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfff7fffff7ffffff, 0x008000fffdffff, x1, 312, x2)

inst_69:
// rs2_w1_val == 16384, rs1_w0_val == -268435457
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009efffffff;  op2val:0x00400000008000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x000009efffffff, 0x00400000008000, x1, 320, x2)

inst_70:
// rs2_w1_val == 8192, rs1_w0_val == -8193
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000ffffdfff;  op2val:0x00200000010000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x020000ffffdfff, 0x00200000010000, x1, 328, x2)

inst_71:
// rs2_w1_val == 2048, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000080000;  op2val:0x000800fffffffb
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x04000000080000, 0x000800fffffffb, x1, 336, x2)

inst_72:
// rs2_w1_val == 512, rs1_w1_val == -16777217
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff40000000;  op2val:0x000200ffffff7f
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfeffffff40000000, 0x000200ffffff7f, x1, 344, x2)

inst_73:
// rs2_w1_val == 256, rs1_w1_val == 134217728
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fbffffff;  op2val:0x00010004000000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x8000000fbffffff, 0x00010004000000, x1, 352, x2)

inst_74:
// rs2_w1_val == 128, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffffffc;  op2val:0x000080ffbfffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffffffc, 0x000080ffbfffff, x1, 360, x2)

inst_75:
// rs2_w1_val == 32, rs2_w0_val == -8388609
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00040000;  op2val:0x000020ff7fffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00040000, 0x000020ff7fffff, x1, 368, x2)

inst_76:
// rs2_w1_val == 8, rs1_w1_val == -65
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000006;  op2val:0x00000800004000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000006, 0x00000800004000, x1, 376, x2)

inst_77:
// rs2_w1_val == 1, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000100;  op2val:0x000001dfffffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x00010000000100, 0x000001dfffffff, x1, 384, x2)

inst_78:
// rs2_w1_val == 0, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff3fffffff;  op2val:0x00000000100000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xff7fffff3fffffff, 0x00000000100000, x1, 392, x2)

inst_79:
// rs2_w1_val == -1, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500000200;  op2val:0xffffffff04000000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x00000500000200, 0xffffffff04000000, x1, 400, x2)

inst_80:
// rs2_w0_val == 1431655765, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000006;  op2val:0xfffbffff55555555
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x00000800000006, 0xfffbffff55555555, x1, 408, x2)

inst_81:
// rs2_w0_val == -2097153, rs1_w0_val == -9
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffffff7;  op2val:0x000040ffdfffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x008000fffffff7, 0x000040ffdfffff, x1, 416, x2)

inst_82:
// rs2_w0_val == -524289, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00020000;  op2val:0x4000000fff7ffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffc00020000, 0x4000000fff7ffff, x1, 424, x2)

inst_83:
// rs2_w0_val == 262144, rs1_w1_val == -33, rs1_w0_val == 268435456
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf10000000;  op2val:0xfffffffe00040000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xffffffdf10000000, 0xfffffffe00040000, x1, 432, x2)

inst_84:
// rs2_w0_val == 131072, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000200000;  op2val:0xfffffff800020000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x00020000200000, 0xfffffff800020000, x1, 440, x2)

inst_85:
// rs1_w0_val == 67108864, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe04000000;  op2val:0x40000000800000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffe04000000, 0x40000000800000, x1, 448, x2)

inst_86:
// rs2_w0_val == 4096, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555ffefffff;  op2val:0x00000000001000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x55555555ffefffff, 0x00000000001000, x1, 456, x2)

inst_87:
// rs2_w0_val == 256, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00000001;  op2val:0x8000000000000100
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000001, 0x8000000000000100, x1, 464, x2)

inst_88:
// rs2_w0_val == 128, rs1_w0_val == -1073741825
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000bfffffff;  op2val:0xdfffffff00000080
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x008000bfffffff, 0xdfffffff00000080, x1, 472, x2)

inst_89:
// rs2_w0_val == 64, rs1_w0_val == -536870913
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffdfffffff;  op2val:0x00100000000040
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfff7ffffdfffffff, 0x00100000000040, x1, 480, x2)

inst_90:
// rs2_w0_val == 8, rs1_w0_val == -16777217
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000feffffff;  op2val:0xfffbffff00000008
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x001000feffffff, 0xfffbffff00000008, x1, 488, x2)

inst_91:
// rs1_w1_val == -134217729, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffffef;  op2val:0xffffdfff00000005
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffffef, 0xffffdfff00000005, x1, 496, x2)

inst_92:
// rs1_w1_val == -67108865, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000100;  op2val:0xfff7ffffffffbfff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000100, 0xfff7ffffffffbfff, x1, 504, x2)

inst_93:
// rs1_w1_val == -4194305, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffff7ffffff;  op2val:0x00000600000100
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xffbffffff7ffffff, 0x00000600000100, x1, 512, x2)

inst_94:
// rs1_w1_val == -16385, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00002000;  op2val:0x000005ffdfffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00002000, 0x000005ffdfffff, x1, 520, x2)

inst_95:
// rs1_w1_val == -8193, rs2_w0_val == 2097152
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000009;  op2val:0x00100000200000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000009, 0x00100000200000, x1, 528, x2)

inst_96:
// rs1_w1_val == -4097, rs2_w0_val == 524288
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00001000;  op2val:0x8000000000080000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xffffefff00001000, 0x8000000000080000, x1, 536, x2)

inst_97:
// rs1_w1_val == -2049, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000000;  op2val:0xfffffeffffdfffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000000, 0xfffffeffffdfffff, x1, 544, x2)

inst_98:
// rs1_w1_val == -1025, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000006;  op2val:0x00004000000040
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000006, 0x00004000000040, x1, 552, x2)

inst_99:
// rs1_w1_val == -129, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffffff8;  op2val:0x8000000fffffff9
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffff8, 0x8000000fffffff9, x1, 560, x2)

inst_100:
// rs1_w1_val == -17, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffffff7;  op2val:0x20000000fdffffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xffffffeffffffff7, 0x20000000fdffffff, x1, 568, x2)

inst_101:
// rs1_w1_val == -3, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffff7fff;  op2val:0xeffffffffeffffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffdffff7fff, 0xeffffffffeffffff, x1, 576, x2)

inst_102:
// rs1_w1_val == -2147483648, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffefff;  op2val:0x20000000000020
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x80000000ffffefff, 0x20000000000020, x1, 584, x2)

inst_103:
// rs1_w1_val == 1073741824, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000055555555;  op2val:0xffeffffffffff7ff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x4000000055555555, 0xffeffffffffff7ff, x1, 592, x2)

inst_104:
// rs1_w1_val == 33554432, rs2_w0_val == -65537
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000080;  op2val:0x800000fffeffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x200000000000080, 0x800000fffeffff, x1, 600, x2)

inst_105:
// rs1_w1_val == 16777216, rs2_w0_val == 1073741824
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffff8;  op2val:0xffbfffff40000000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x1000000fffffff8, 0xffbfffff40000000, x1, 608, x2)

inst_106:
// rs1_w1_val == 4194304, rs2_w0_val == -8193
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000ffffefff;  op2val:0xffffffdfffffdfff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x400000ffffefff, 0xffffffdfffffdfff, x1, 616, x2)

inst_107:
// rs1_w1_val == 1048576, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000002000;  op2val:0x200000000000000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x10000000002000, 0x200000000000000, x1, 624, x2)

inst_108:
// rs1_w1_val == 65536, rs1_w0_val == -513
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffffdff;  op2val:0xfffffbff20000000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x010000fffffdff, 0xfffffbff20000000, x1, 632, x2)

inst_109:
// rs1_w1_val == 16384, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000dfffffff;  op2val:0xffbfffff00200000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x004000dfffffff, 0xffbfffff00200000, x1, 640, x2)

inst_110:
// rs1_w1_val == 16, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010efffffff;  op2val:0xfffffffcff7fffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x000010efffffff, 0xfffffffcff7fffff, x1, 648, x2)

inst_111:
// rs1_w1_val == 2, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200080000;  op2val:0xfffffffd00010000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x00000200080000, 0xfffffffd00010000, x1, 656, x2)

inst_112:
// rs1_w1_val == 0, rs2_w0_val == -257
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000007fffffff;  op2val:0x7ffffffffffffeff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x0000007fffffff, 0x7ffffffffffffeff, x1, 664, x2)

inst_113:
// rs1_w0_val == -33554433, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffdffffff;  op2val:0x008000fffffffb
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xffffffeffdffffff, 0x008000fffffffb, x1, 672, x2)

inst_114:
// rs2_w0_val == -32769, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff7fffffff;  op2val:0x001000ffff7fff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffdffff7fffffff, 0x001000ffff7fff, x1, 680, x2)

inst_115:
// rs2_w0_val == 33554432, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffff7f;  op2val:0x00040002000000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffffff7f, 0x00040002000000, x1, 688, x2)

inst_116:
// rs1_w0_val == -8388609, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffff7fffff;  op2val:0xfffffff9fffff7ff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xffdfffffff7fffff, 0xfffffff9fffff7ff, x1, 696, x2)

inst_117:
// rs1_w0_val == -4194305, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000ffbfffff;  op2val:0x00000800400000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x200000ffbfffff, 0x00000800400000, x1, 704, x2)

inst_118:
// rs2_w0_val == -4097, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000ffffffef;  op2val:0x000100ffffefff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x200000ffffffef, 0x000100ffffefff, x1, 712, x2)

inst_119:
// rs1_w0_val == -524289, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafff7ffff;  op2val:0x400000fffffffb
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffafff7ffff, 0x400000fffffffb, x1, 720, x2)

inst_120:
// rs2_w0_val == 16777216, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000001000;  op2val:0xfffeffff01000000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x00200000001000, 0xfffeffff01000000, x1, 728, x2)

inst_121:
// rs1_w0_val == -262145, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafffbffff;  op2val:0x00010000001000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffafffbffff, 0x00010000001000, x1, 736, x2)

inst_122:
// rs2_w0_val == -513, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000aaaaaaaa;  op2val:0xc0000000fffffdff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x400000aaaaaaaa, 0xc0000000fffffdff, x1, 744, x2)

inst_123:
// rs1_w0_val == -65537, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafffeffff;  op2val:0x00008000000020
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffafffeffff, 0x00008000000020, x1, 752, x2)

inst_124:
// rs1_w0_val == -16385, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffffbfff;  op2val:0xdfffffff00200000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xffffbfffffffbfff, 0xdfffffff00200000, x1, 760, x2)

inst_125:
// rs2_w0_val == -17, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffffc;  op2val:0x200000ffffffef
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffffc, 0x200000ffffffef, x1, 768, x2)

inst_126:
// rs1_w0_val == -257, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffffeff;  op2val:0x800000ffffffdf
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x000020fffffeff, 0x800000ffffffdf, x1, 776, x2)

inst_127:
// rs2_w0_val == -2147483648, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffffff6;  op2val:0x00040080000000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x000800fffffff6, 0x00040080000000, x1, 784, x2)

inst_128:
// rs2_w0_val == 268435456, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000008;  op2val:0xffffff7f10000000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x800000000000008, 0xffffff7f10000000, x1, 792, x2)

inst_129:
// rs1_w0_val == -5, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040fffffffb;  op2val:0xfff7ffff00000400
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x000040fffffffb, 0xfff7ffff00000400, x1, 800, x2)

inst_130:
// rs1_w0_val == -3, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fffffffd;  op2val:0x00080004000000
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffffff6fffffffd, 0x00080004000000, x1, 808, x2)

inst_131:
// rs1_w0_val == -2, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffffe;  op2val:0x3fffffff00000040
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0x080000fffffffe, 0x3fffffff00000040, x1, 816, x2)

inst_132:
// rs1_w0_val == 134217728, 
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000008000000;  op2val:0xff7fffffffffbfff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xc000000008000000, 0xff7fffffffffbfff, x1, 824, x2)

inst_133:
// rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w1_val == -524289, rs1_w0_val == rs2_w0_val, rs2_w0_val == -33, rs2_w1_val == 268435456, rs1_w0_val == -33
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffffdf;  op2val:0x10000000ffffffdf
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffffffdf, 0x10000000ffffffdf, x1, 832, x2)

inst_134:
// rs2_w1_val == -524289, rs2_w0_val == -67108865, rs1_w1_val == -257
// opcode: smdrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffbffffff;  op2val:0xfff7fffffbffffff
TEST_RR_OP(smdrs32, x31, x30, x29, 0x0000000000000000, 0xfffffefffbffffff, 0xfff7fffffbffffff, x1, 840, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x16_0:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 106*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
