
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the cras32 instruction of the RISC-V RV64PZicsr extension for the cras32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",cras32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 == rd != rs2, rs1==x2, rs2==x9, rd==x2, rs1_w0_val == -2147483648, rs2_w1_val == -8193, rs1_w1_val == rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w1_val == -8193, rs2_w0_val == 16
// opcode: cras32 ; op1:x2; op2:x9; dest:x2; op1val:0xffffdfff80000000;  op2val:0xffffdfff00000010
TEST_RR_OP(cras32, x2, x2, x9, 0x0000000000000000, 0xffffdfff80000000, 0xffffdfff00000010, x4, 0, x26)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x20, rs2==x19, rd==x16, rs1_w1_val != rs2_w1_val, rs1_w1_val == 131072, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val == 262144, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == -2097153
// opcode: cras32 ; op1:x20; op2:x19; dest:x16; op1val:0x02000000040000;  op2val:0xffdfffff00000003
TEST_RR_OP(cras32, x16, x20, x19, 0x0000000000000000, 0x02000000040000, 0xffdfffff00000003, x4, 8, x26)

inst_2:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x9, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w1_val == 512, rs1_w0_val == -1048577, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w1_val == -1431655766, rs2_w0_val == -8388609
// opcode: cras32 ; op1:x30; op2:x30; dest:x9; op1val:0xaaaaaaaaffefffff;  op2val:0x000200ff7fffff
TEST_RR_OP(cras32, x9, x30, x30, 0x0000000000000000, 0xaaaaaaaaffefffff, 0x000200ff7fffff, x4, 16, x26)

inst_3:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 8192, rs2_w0_val == 2048
// opcode: cras32 ; op1:x28; op2:x28; dest:x28; op1val:0x00000500040000;  op2val:0x00200000000800
TEST_RR_OP(cras32, x28, x28, x28, 0x0000000000000000, 0x00000500040000, 0x00200000000800, x4, 24, x26)

inst_4:
// rs2 == rd != rs1, rs1==x22, rs2==x10, rd==x10, rs1_w0_val == rs2_w0_val, rs1_w1_val == -1, rs2_w1_val == -33554433
// opcode: cras32 ; op1:x22; op2:x10; dest:x10; op1val:0xfffffffffffffffa;  op2val:0xfdfffffffffffffa
TEST_RR_OP(cras32, x10, x22, x10, 0x0000000000000000, 0xfffffffffffffffa, 0xfdfffffffffffffa, x4, 32, x26)

inst_5:
// rs1==x24, rs2==x17, rd==x25, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w0_val == 64, rs1_w1_val == 4, rs2_w1_val == 131072, rs2_w0_val == -2049
// opcode: cras32 ; op1:x24; op2:x17; dest:x25; op1val:0x00000400000040;  op2val:0x020000fffff7ff
TEST_RR_OP(cras32, x25, x24, x17, 0x0000000000000000, 0x00000400000040, 0x020000fffff7ff, x4, 40, x26)

inst_6:
// rs1==x6, rs2==x22, rd==x20, rs2_w1_val == -1431655766, rs2_w0_val == -2147483648, rs1_w0_val == -16385, rs1_w1_val == -16777217
// opcode: cras32 ; op1:x6; op2:x22; dest:x20; op1val:0xfeffffffffffbfff;  op2val:0xaaaaaaaa80000000
TEST_RR_OP(cras32, x20, x6, x22, 0x0000000000000000, 0xfeffffffffffbfff, 0xaaaaaaaa80000000, x4, 48, x26)

inst_7:
// rs1==x5, rs2==x8, rd==x17, rs2_w1_val == 1431655765, rs1_w0_val == -2097153, rs2_w0_val == 1048576, rs1_w1_val == -32769
// opcode: cras32 ; op1:x5; op2:x8; dest:x17; op1val:0xffff7fffffdfffff;  op2val:0x5555555500100000
TEST_RR_OP(cras32, x17, x5, x8, 0x0000000000000000, 0xffff7fffffdfffff, 0x5555555500100000, x4, 56, x26)

inst_8:
// rs1==x17, rs2==x18, rd==x8, rs2_w1_val == 2147483647, rs1_w1_val == -262145, rs2_w0_val == 536870912
// opcode: cras32 ; op1:x17; op2:x18; dest:x8; op1val:0xfffbfffffffffff6;  op2val:0x7fffffff20000000
TEST_RR_OP(cras32, x8, x17, x18, 0x0000000000000000, 0xfffbfffffffffff6, 0x7fffffff20000000, x4, 64, x26)

inst_9:
// rs1==x8, rs2==x13, rd==x1, rs2_w1_val == -1073741825, rs1_w0_val == 128, rs1_w1_val == 8, rs2_w0_val == 8192
// opcode: cras32 ; op1:x8; op2:x13; dest:x1; op1val:0x00000800000080;  op2val:0xbfffffff00002000
TEST_RR_OP(cras32, x1, x8, x13, 0x0000000000000000, 0x00000800000080, 0xbfffffff00002000, x4, 72, x26)

inst_10:
// rs1==x7, rs2==x12, rd==x3, rs2_w1_val == -536870913, rs1_w1_val == 1048576, rs1_w0_val == -8193
// opcode: cras32 ; op1:x7; op2:x12; dest:x3; op1val:0x100000ffffdfff;  op2val:0xdfffffffc0000000
TEST_RR_OP(cras32, x3, x7, x12, 0x0000000000000000, 0x100000ffffdfff, 0xdfffffffc0000000, x4, 80, x26)

inst_11:
// rs1==x14, rs2==x23, rd==x21, rs2_w1_val == -268435457, rs2_w0_val == -16777217
// opcode: cras32 ; op1:x14; op2:x23; dest:x21; op1val:0x000004ffefffff;  op2val:0xeffffffffeffffff
TEST_RR_OP(cras32, x21, x14, x23, 0x0000000000000000, 0x000004ffefffff, 0xeffffffffeffffff, x4, 88, x26)

inst_12:
// rs1==x23, rs2==x21, rd==x6, rs2_w1_val == -134217729, rs1_w0_val == -3, rs2_w0_val == -4194305, rs1_w1_val == -513
// opcode: cras32 ; op1:x23; op2:x21; dest:x6; op1val:0xfffffdfffffffffd;  op2val:0xf7ffffffffbfffff
TEST_RR_OP(cras32, x6, x23, x21, 0x0000000000000000, 0xfffffdfffffffffd, 0xf7ffffffffbfffff, x4, 96, x26)

inst_13:
// rs1==x21, rs2==x15, rd==x7, rs2_w1_val == -67108865, rs1_w1_val == -17, rs2_w0_val == 134217728
// opcode: cras32 ; op1:x21; op2:x15; dest:x7; op1val:0xffffffeffffffff6;  op2val:0xfbffffff08000000
TEST_RR_OP(cras32, x7, x21, x15, 0x0000000000000000, 0xffffffeffffffff6, 0xfbffffff08000000, x4, 104, x26)

inst_14:
// rs1==x29, rs2==x6, rd==x11, rs2_w1_val == -16777217, rs1_w1_val == -524289
// opcode: cras32 ; op1:x29; op2:x6; dest:x11; op1val:0xfff7ffff00000040;  op2val:0xfeffffff00000800
TEST_RR_OP(cras32, x11, x29, x6, 0x0000000000000000, 0xfff7ffff00000040, 0xfeffffff00000800, x4, 112, x26)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_15:
// rs1==x1, rs2==x4, rd==x5, rs2_w1_val == -8388609, rs1_w0_val == 32768, rs2_w0_val == 128
// opcode: cras32 ; op1:x1; op2:x4; dest:x5; op1val:0x00000800008000;  op2val:0xff7fffff00000080
TEST_RR_OP(cras32, x5, x1, x4, 0x0000000000000000, 0x00000800008000, 0xff7fffff00000080, x6, 0, x8)

inst_16:
// rs1==x15, rs2==x20, rd==x22, rs2_w1_val == -4194305, rs1_w1_val == 1073741824, rs2_w0_val == -65
// opcode: cras32 ; op1:x15; op2:x20; dest:x22; op1val:0x4000000000000007;  op2val:0xffbfffffffffffbf
TEST_RR_OP(cras32, x22, x15, x20, 0x0000000000000000, 0x4000000000000007, 0xffbfffffffffffbf, x6, 8, x8)

inst_17:
// rs1==x18, rs2==x27, rd==x4, rs2_w1_val == -1048577, rs1_w0_val == -268435457
// opcode: cras32 ; op1:x18; op2:x27; dest:x4; op1val:0xffffdfffefffffff;  op2val:0xffefffffc0000000
TEST_RR_OP(cras32, x4, x18, x27, 0x0000000000000000, 0xffffdfffefffffff, 0xffefffffc0000000, x6, 16, x8)

inst_18:
// rs1==x4, rs2==x5, rd==x27, rs2_w1_val == -524289, rs2_w0_val == 512, rs1_w1_val == -67108865, rs1_w0_val == -4097
// opcode: cras32 ; op1:x4; op2:x5; dest:x27; op1val:0xfbffffffffffefff;  op2val:0xfff7ffff00000200
TEST_RR_OP(cras32, x27, x4, x5, 0x0000000000000000, 0xfbffffffffffefff, 0xfff7ffff00000200, x6, 24, x8)

inst_19:
// rs1==x11, rs2==x26, rd==x12, rs2_w1_val == -262145, rs1_w0_val == 16, rs2_w0_val == 268435456
// opcode: cras32 ; op1:x11; op2:x26; dest:x12; op1val:0x00000900000010;  op2val:0xfffbffff10000000
TEST_RR_OP(cras32, x12, x11, x26, 0x0000000000000000, 0x00000900000010, 0xfffbffff10000000, x6, 32, x8)

inst_20:
// rs1==x12, rs2==x31, rd==x29, rs2_w1_val == -131073, rs1_w0_val == -2, rs2_w0_val == 0
// opcode: cras32 ; op1:x12; op2:x31; dest:x29; op1val:0xfefffffffffffffe;  op2val:0xfffdffff00000000
TEST_RR_OP(cras32, x29, x12, x31, 0x0000000000000000, 0xfefffffffffffffe, 0xfffdffff00000000, x6, 40, x8)

inst_21:
// rs1==x3, rs2==x25, rd==x13, rs2_w1_val == -65537, rs1_w0_val == -129, rs1_w1_val == 1024
// opcode: cras32 ; op1:x3; op2:x25; dest:x13; op1val:0x000400ffffff7f;  op2val:0xfffeffff00000200
TEST_RR_OP(cras32, x13, x3, x25, 0x0000000000000000, 0x000400ffffff7f, 0xfffeffff00000200, x6, 48, x8)

inst_22:
// rs1==x26, rs2==x1, rd==x24, rs2_w1_val == -32769, rs1_w0_val == -513, rs1_w1_val == 4096, rs2_w0_val == 524288
// opcode: cras32 ; op1:x26; op2:x1; dest:x24; op1val:0x001000fffffdff;  op2val:0xffff7fff00080000
TEST_RR_OP(cras32, x24, x26, x1, 0x0000000000000000, 0x001000fffffdff, 0xffff7fff00080000, x6, 56, x8)

inst_23:
// rs1==x16, rs2==x29, rd==x18, rs2_w1_val == -16385, rs2_w0_val == -9
// opcode: cras32 ; op1:x16; op2:x29; dest:x18; op1val:0x000006ffffbfff;  op2val:0xffffbffffffffff7
TEST_RR_OP(cras32, x18, x16, x29, 0x0000000000000000, 0x000006ffffbfff, 0xffffbffffffffff7, x6, 64, x8)

inst_24:
// rs1==x9, rs2==x16, rd==x19, rs2_w1_val == -4097, rs2_w0_val == 4, rs1_w0_val == 1431655765, rs1_w1_val == -2
// opcode: cras32 ; op1:x9; op2:x16; dest:x19; op1val:0xfffffffe55555555;  op2val:0xffffefff00000004
TEST_RR_OP(cras32, x19, x9, x16, 0x0000000000000000, 0xfffffffe55555555, 0xffffefff00000004, x6, 72, x8)

inst_25:
// rs1==x27, rs2==x2, rd==x31, rs2_w1_val == -2049, rs2_w0_val == 1024, rs1_w1_val == 524288, rs1_w0_val == 8192
// opcode: cras32 ; op1:x27; op2:x2; dest:x31; op1val:0x08000000002000;  op2val:0xfffff7ff00000400
TEST_RR_OP(cras32, x31, x27, x2, 0x0000000000000000, 0x08000000002000, 0xfffff7ff00000400, x6, 80, x8)

inst_26:
// rs1==x19, rs2==x7, rd==x26, rs2_w1_val == -1025, rs2_w0_val == -257, rs1_w0_val == 4194304
// opcode: cras32 ; op1:x19; op2:x7; dest:x26; op1val:0x02000000400000;  op2val:0xfffffbfffffffeff
TEST_RR_OP(cras32, x26, x19, x7, 0x0000000000000000, 0x02000000400000, 0xfffffbfffffffeff, x6, 88, x8)

inst_27:
// rs1==x25, rs2==x24, rd==x14, rs2_w1_val == -513, rs1_w1_val == -65, rs1_w0_val == 2147483647, rs2_w0_val == -1073741825
// opcode: cras32 ; op1:x25; op2:x24; dest:x14; op1val:0xffffffbf7fffffff;  op2val:0xfffffdffbfffffff
TEST_RR_OP(cras32, x14, x25, x24, 0x0000000000000000, 0xffffffbf7fffffff, 0xfffffdffbfffffff, x6, 96, x8)

inst_28:
// rs1==x31, rs2==x14, rd==x23, rs2_w1_val == -257, rs1_w1_val == -9, rs2_w0_val == 64
// opcode: cras32 ; op1:x31; op2:x14; dest:x23; op1val:0xfffffff7fffffffe;  op2val:0xfffffeff00000040
TEST_RR_OP(cras32, x23, x31, x14, 0x0000000000000000, 0xfffffff7fffffffe, 0xfffffeff00000040, x6, 104, x8)

inst_29:
// rs1==x13, rs2==x3, rd==x30, rs2_w1_val == -129, rs1_w0_val == -33554433
// opcode: cras32 ; op1:x13; op2:x3; dest:x30; op1val:0xaaaaaaaafdffffff;  op2val:0xffffff7f3fffffff
TEST_RR_OP(cras32, x30, x13, x3, 0x0000000000000000, 0xaaaaaaaafdffffff, 0xffffff7f3fffffff, x6, 112, x8)

inst_30:
// rs1==x10, rs2==x0, rd==x15, rs2_w1_val == -65, rs1_w1_val == 262144, rs2_w0_val == -16385
// opcode: cras32 ; op1:x10; op2:x0; dest:x15; op1val:0x04000000000005;  op2val:0xffffffbfffffbfff
TEST_RR_OP(cras32, x15, x10, x0, 0x0000000000000000, 0x04000000000005, 0xffffffbfffffbfff, x6, 120, x8)

inst_31:
// rs1==x0, rs2_w1_val == -33, rs1_w0_val == 134217728
// opcode: cras32 ; op1:x0; op2:x14; dest:x12; op1val:0xfffffffc08000000;  op2val:0xffffffdf00000080
TEST_RR_OP(cras32, x12, x0, x14, 0x0000000000000000, 0xfffffffc08000000, 0xffffffdf00000080, x6, 128, x1)

inst_32:
// rs2==x11, rs2_w1_val == -17, rs1_w0_val == 512, rs1_w1_val == 2
// opcode: cras32 ; op1:x3; op2:x11; dest:x30; op1val:0x00000200000200;  op2val:0xffffffef00000080
TEST_RR_OP(cras32, x30, x3, x11, 0x0000000000000000, 0x00000200000200, 0xffffffef00000080, x6, 136, x1)

inst_33:
// rd==x0, rs2_w1_val == -9, rs1_w1_val == -1073741825
// opcode: cras32 ; op1:x23; op2:x27; dest:x0; op1val:0xbffffffffffffff9;  op2val:0xfffffff7bfffffff
TEST_RR_OP(cras32, x0, x23, x27, 0x0000000000000000, 0xbffffffffffffff9, 0xfffffff7bfffffff, x6, 144, x1)

inst_34:
// rs2_w1_val == -5, rs2_w0_val == -2, rs1_w1_val == 8388608
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffffa;  op2val:0xfffffffbfffffffe
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x800000fffffffa, 0xfffffffbfffffffe, x6, 152, x1)

inst_35:
// rs2_w1_val == -3, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000fffffffd;  op2val:0xfffffffd00000007
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xc0000000fffffffd, 0xfffffffd00000007, x6, 160, x1)

inst_36:
// rs2_w1_val == -2, rs1_w0_val == -5, rs2_w0_val == 32
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffffffb;  op2val:0xfffffffe00000020
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x40000000fffffffb, 0xfffffffe00000020, x6, 168, x1)

inst_37:
// rs2_w1_val == -2147483648, rs1_w1_val == 8192, rs2_w0_val == -4097
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000006;  op2val:0x80000000ffffefff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00200000000006, 0x80000000ffffefff, x6, 176, x1)

inst_38:
// rs2_w1_val == 1073741824, rs1_w1_val == -129, rs1_w0_val == -4194305, rs2_w0_val == -134217729
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffbfffff;  op2val:0x40000000f7ffffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xffffff7fffbfffff, 0x40000000f7ffffff, x6, 184, x1)

inst_39:
// rs2_w1_val == 536870912, rs1_w0_val == 2, rs1_w1_val == -2049
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000002;  op2val:0x20000000ffffffbf
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000002, 0x20000000ffffffbf, x6, 192, x1)

inst_40:
// rs2_w1_val == 268435456, rs1_w0_val == 2048
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000800;  op2val:0x1000000000000200
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00000200000800, 0x1000000000000200, x6, 200, x1)

inst_41:
// rs2_w1_val == 134217728, rs1_w1_val == -257
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000005;  op2val:0x800000020000000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000005, 0x800000020000000, x6, 208, x1)

inst_42:
// rs2_w1_val == 67108864, rs1_w1_val == 536870912
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000008000;  op2val:0x400000000000004
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x2000000000008000, 0x400000000000004, x6, 216, x1)

inst_43:
// rs2_w1_val == 33554432, rs1_w1_val == 64, rs1_w0_val == -9
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040fffffff7;  op2val:0x200000020000000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x000040fffffff7, 0x200000020000000, x6, 224, x1)

inst_44:
// rs2_w1_val == 16777216, rs1_w0_val == 131072
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00020000;  op2val:0x100000000000800
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00020000, 0x100000000000800, x6, 232, x1)

inst_45:
// rs2_w1_val == 8388608, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff80000000;  op2val:0x80000020000000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfffffdff80000000, 0x80000020000000, x6, 240, x1)

inst_46:
// rs2_w1_val == 4194304, rs1_w0_val == -1025, rs2_w0_val == 8
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffbff;  op2val:0x40000000000008
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfefffffffffffbff, 0x40000000000008, x6, 248, x1)

inst_47:
// rs2_w1_val == 2097152, rs1_w0_val == -65
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffffffbf;  op2val:0x20000000000005
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x800000ffffffbf, 0x20000000000005, x6, 256, x1)

inst_48:
// rs2_w1_val == 1048576, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f7fffffff;  op2val:0x10000000000008
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xffffff7f7fffffff, 0x10000000000008, x6, 264, x1)

inst_49:
// rs2_w1_val == 524288, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00400000;  op2val:0x080000fffffffe
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00400000, 0x080000fffffffe, x6, 272, x1)

inst_50:
// rs2_w1_val == 262144, rs2_w0_val == -524289
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffffff8;  op2val:0x040000fff7ffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x000002fffffff8, 0x040000fff7ffff, x6, 280, x1)

inst_51:
// rs2_w1_val == 65536, rs1_w1_val == -2097153, rs1_w0_val == 524288
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00080000;  op2val:0x0100003fffffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00080000, 0x0100003fffffff, x6, 288, x1)

inst_52:
// rs2_w1_val == 32768, rs1_w1_val == -33, rs2_w0_val == -8193
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00080000;  op2val:0x008000ffffdfff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00080000, 0x008000ffffdfff, x6, 296, x1)

inst_53:
// rs1_w0_val == 33554432, rs2_w0_val == 131072, rs2_w1_val == 16
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f02000000;  op2val:0x00001000020000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xffffff7f02000000, 0x00001000020000, x6, 304, x1)

inst_54:
// rs1_w0_val == 16777216, rs2_w0_val == 4194304
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff601000000;  op2val:0xffffff7f00400000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfffffff601000000, 0xffffff7f00400000, x6, 312, x1)

inst_55:
// rs1_w0_val == 8388608, rs2_w0_val == -2097153, rs1_w1_val == -8388609
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00800000;  op2val:0x008000ffdfffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00800000, 0x008000ffdfffff, x6, 320, x1)

inst_56:
// rs1_w0_val == 2097152, rs1_w1_val == -268435457
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00200000;  op2val:0xfffffff8c0000000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xefffffff00200000, 0xfffffff8c0000000, x6, 328, x1)

inst_57:
// rs1_w0_val == 1048576, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00100000;  op2val:0x010000fffffff8
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfffffffc00100000, 0x010000fffffff8, x6, 336, x1)

inst_58:
// rs1_w0_val == 65536, rs2_w0_val == 1431655765, rs1_w1_val == 512
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000010000;  op2val:0xfffff7ff55555555
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00020000010000, 0xfffff7ff55555555, x6, 344, x1)

inst_59:
// rs1_w0_val == 16384, rs1_w1_val == 128
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000004000;  op2val:0xefffffffffdfffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00008000004000, 0xefffffffffdfffff, x6, 352, x1)

inst_60:
// rs1_w0_val == 4096, rs1_w1_val == 268435456, rs2_w0_val == -536870913
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000001000;  op2val:0x000009dfffffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x1000000000001000, 0x000009dfffffff, x6, 360, x1)

inst_61:
// rs1_w0_val == 1024, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000400;  op2val:0xdfffffff00000004
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x1000000000000400, 0xdfffffff00000004, x6, 368, x1)

inst_62:
// rs1_w0_val == 256, rs2_w0_val == -131073, rs1_w1_val == 16
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000100;  op2val:0x40000000fffdffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00001000000100, 0x40000000fffdffff, x6, 376, x1)

inst_63:
// rs1_w0_val == 32, rs1_w1_val == 32, rs2_w0_val == -32769
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000020;  op2val:0x000005ffff7fff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00002000000020, 0x000005ffff7fff, x6, 384, x1)

inst_64:
// rs1_w0_val == 8, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000008;  op2val:0xc000000000020000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00004000000008, 0xc000000000020000, x6, 392, x1)

inst_65:
// rs1_w0_val == 4, rs2_w1_val == 256
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000004;  op2val:0x00010000400000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x04000000000004, 0x00010000400000, x6, 400, x1)

inst_66:
// rs1_w0_val == 1, rs1_w1_val == 0
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000001;  op2val:0x80000000fffffff9
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00000000000001, 0x80000000fffffff9, x6, 408, x1)

inst_67:
// rs1_w0_val == 0, rs2_w0_val == -67108865, rs2_w1_val == 1024
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000000;  op2val:0x000400fbffffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00001000000000, 0x000400fbffffff, x6, 416, x1)

inst_68:
// rs1_w0_val == -1, rs1_w1_val == 16384
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffffffff;  op2val:0xffefffffff7fffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x004000ffffffff, 0xffefffffff7fffff, x6, 424, x1)

inst_69:
// rs2_w1_val == 16384, rs2_w0_val == 1
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffffffb;  op2val:0x00400000000001
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x000003fffffffb, 0x00400000000001, x6, 432, x1)

inst_70:
// rs2_w1_val == 4096, rs2_w0_val == -65537
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009fffffff9;  op2val:0x001000fffeffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x000009fffffff9, 0x001000fffeffff, x6, 440, x1)

inst_71:
// rs2_w1_val == 2048, rs1_w0_val == -32769, rs2_w0_val == -1
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffff7fff;  op2val:0x000800ffffffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xff7fffffffff7fff, 0x000800ffffffff, x6, 448, x1)

inst_72:
// rs2_w1_val == 128, rs1_w1_val == -4097
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffffffe;  op2val:0x0000803fffffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xffffeffffffffffe, 0x0000803fffffff, x6, 456, x1)

inst_73:
// rs2_w1_val == 64, rs1_w0_val == -1073741825
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080bfffffff;  op2val:0x00004000000010
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x000080bfffffff, 0x00004000000010, x6, 464, x1)

inst_74:
// rs2_w1_val == 32, rs2_w0_val == -262145
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00002000;  op2val:0x000020fffbffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x3fffffff00002000, 0x000020fffbffff, x6, 472, x1)

inst_75:
// rs2_w1_val == 8, rs1_w0_val == 67108864
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000704000000;  op2val:0x000008fffffffa
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00000704000000, 0x000008fffffffa, x6, 480, x1)

inst_76:
// rs2_w1_val == 4, rs1_w1_val == -131073
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffffffdff;  op2val:0x00000400000008
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfffdfffffffffdff, 0x00000400000008, x6, 488, x1)

inst_77:
// rs2_w1_val == 2, rs2_w0_val == 16384, rs1_w0_val == 268435456
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000010000000;  op2val:0x00000200004000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x08000010000000, 0x00000200004000, x6, 496, x1)

inst_78:
// rs2_w1_val == 1, rs1_w1_val == 134217728
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000010000;  op2val:0x00000100000007
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x800000000010000, 0x00000100000007, x6, 504, x1)

inst_79:
// rs2_w1_val == 0, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffffefff;  op2val:0x00000000000400
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xffdfffffffffefff, 0x00000000000400, x6, 512, x1)

inst_80:
// rs2_w1_val == -1, rs2_w0_val == -5
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000002;  op2val:0xfffffffffffffffb
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00100000000002, 0xfffffffffffffffb, x6, 520, x1)

inst_81:
// rs2_w0_val == 262144, rs1_w1_val == 33554432
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffffffd;  op2val:0x02000000040000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x2000000fffffffd, 0x02000000040000, x6, 528, x1)

inst_82:
// rs2_w0_val == 65536, rs1_w1_val == -4194305
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffffffb;  op2val:0x00000900010000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xffbffffffffffffb, 0x00000900010000, x6, 536, x1)

inst_83:
// rs2_w0_val == 32768, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000bfffffff;  op2val:0x00002000008000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x100000bfffffff, 0x00002000008000, x6, 544, x1)

inst_84:
// rs2_w0_val == 4096, rs1_w1_val == -1048577
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff80000000;  op2val:0x40000000001000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xffefffff80000000, 0x40000000001000, x6, 552, x1)

inst_85:
// rs2_w0_val == 256, rs1_w1_val == 4194304, rs1_w0_val == -17
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000ffffffef;  op2val:0x00000100000100
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x400000ffffffef, 0x00000100000100, x6, 560, x1)

inst_86:
// rs2_w0_val == 2, rs1_w1_val == 32768
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000007;  op2val:0xfffdffff00000002
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00800000000007, 0xfffdffff00000002, x6, 568, x1)

inst_87:
// rs1_w1_val == 1431655765, rs1_w0_val == -67108865
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fbffffff;  op2val:0xffffdfff00000000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x55555555fbffffff, 0xffffdfff00000000, x6, 576, x1)

inst_88:
// rs1_w1_val == 2147483647, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffffff;  op2val:0x00000200000005
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffffff, 0x00000200000005, x6, 584, x1)

inst_89:
// rs1_w1_val == -536870913, rs1_w0_val == -16777217
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffeffffff;  op2val:0xfbffffff20000000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xdffffffffeffffff, 0xfbffffff20000000, x6, 592, x1)

inst_90:
// rs1_w1_val == -134217729, rs2_w0_val == 1073741824
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffffffc;  op2val:0x00000540000000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffffffc, 0x00000540000000, x6, 600, x1)

inst_91:
// rs1_w1_val == -33554433, rs1_w0_val == -131073
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffdffff;  op2val:0x000200fffffffc
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffdffff, 0x000200fffffffc, x6, 608, x1)

inst_92:
// rs1_w1_val == -65537, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffffef;  op2val:0x20000000000400
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffffef, 0x20000000000400, x6, 616, x1)

inst_93:
// rs1_w1_val == -16385, rs1_w0_val == -65537
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffeffff;  op2val:0xc000000040000000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xffffbffffffeffff, 0xc000000040000000, x6, 624, x1)

inst_94:
// rs1_w1_val == -1025, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff10000000;  op2val:0x000006fffffffa
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfffffbff10000000, 0x000006fffffffa, x6, 632, x1)

inst_95:
// rs1_w1_val == -5, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb55555555;  op2val:0xfffffefffffffff7
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfffffffb55555555, 0xfffffefffffffff7, x6, 640, x1)

inst_96:
// rs1_w1_val == -3, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000008;  op2val:0xf7ffffff00000006
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000008, 0xf7ffffff00000006, x6, 648, x1)

inst_97:
// rs1_w1_val == -2147483648, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000000;  op2val:0x100000c0000000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x8000000000000000, 0x100000c0000000, x6, 656, x1)

inst_98:
// rs1_w1_val == 67108864, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000002000000;  op2val:0x8000000000000200
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x400000002000000, 0x8000000000000200, x6, 664, x1)

inst_99:
// rs1_w1_val == 16777216, rs2_w0_val == -33554433
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffff8;  op2val:0x080000fdffffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x1000000fffffff8, 0x080000fdffffff, x6, 672, x1)

inst_100:
// rs1_w1_val == 2097152, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000ffffff7f;  op2val:0xffbffffffffffff8
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x200000ffffff7f, 0xffbffffffffffff8, x6, 680, x1)

inst_101:
// rs1_w1_val == 65536, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000800000;  op2val:0x00000800000006
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x01000000800000, 0x00000800000006, x6, 688, x1)

inst_102:
// rs1_w1_val == 2048, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000001000;  op2val:0xaaaaaaaa00000040
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00080000001000, 0xaaaaaaaa00000040, x6, 696, x1)

inst_103:
// rs1_w1_val == 256, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100bfffffff;  op2val:0xaaaaaaaaff7fffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x000100bfffffff, 0xaaaaaaaaff7fffff, x6, 704, x1)

inst_104:
// rs2_w0_val == -1431655766, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000910000000;  op2val:0x000100aaaaaaaa
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00000910000000, 0x000100aaaaaaaa, x6, 712, x1)

inst_105:
// rs2_w0_val == 2147483647, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000040;  op2val:0xffffffbf7fffffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000040, 0xffffffbf7fffffff, x6, 720, x1)

inst_106:
// rs2_w0_val == -268435457, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffff7f;  op2val:0x001000efffffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffff7f, 0x001000efffffff, x6, 728, x1)

inst_107:
// rs1_w1_val == 1, rs1_w0_val == 536870912
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000120000000;  op2val:0xffeffffffffffffb
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00000120000000, 0xffeffffffffffffb, x6, 736, x1)

inst_108:
// rs1_w0_val == -1431655766, rs2_w0_val == -17
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffaaaaaaaa;  op2val:0x40000000ffffffef
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfffbffffaaaaaaaa, 0x40000000ffffffef, x6, 744, x1)

inst_109:
// rs1_w0_val == -536870913, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffdfffffff;  op2val:0x800000fdffffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfdffffffdfffffff, 0x800000fdffffff, x6, 752, x1)

inst_110:
// rs2_w0_val == -1048577, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000007;  op2val:0x000100ffefffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x4000000000000007, 0x000100ffefffff, x6, 760, x1)

inst_111:
// rs1_w0_val == -134217729, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000f7ffffff;  op2val:0xff7fffff00400000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x400000f7ffffff, 0xff7fffff00400000, x6, 768, x1)

inst_112:
// rs1_w0_val == -8388609, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100ff7fffff;  op2val:0x01000000000080
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x000100ff7fffff, 0x01000000000080, x6, 776, x1)

inst_113:
// rs1_w0_val == -524289, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffff7ffff;  op2val:0x00800000010000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xffffffbffff7ffff, 0x00800000010000, x6, 784, x1)

inst_114:
// rs2_w0_val == -1025, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000002;  op2val:0x020000fffffbff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000002, 0x020000fffffbff, x6, 792, x1)

inst_115:
// rs1_w0_val == -262145, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000fffbffff;  op2val:0x000004ffff7fff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xc0000000fffbffff, 0x000004ffff7fff, x6, 800, x1)

inst_116:
// rs2_w0_val == -513, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200ffffffbf;  op2val:0xeffffffffffffdff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x000200ffffffbf, 0xeffffffffffffdff, x6, 808, x1)

inst_117:
// rs2_w0_val == -129, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000005;  op2val:0x000020ffffff7f
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00080000000005, 0x000020ffffff7f, x6, 816, x1)

inst_118:
// rs2_w0_val == 8388608, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100fffffff9;  op2val:0x00010000800000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x000100fffffff9, 0x00010000800000, x6, 824, x1)

inst_119:
// rs2_w0_val == -33, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020008000000;  op2val:0x7fffffffffffffdf
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00020008000000, 0x7fffffffffffffdf, x6, 832, x1)

inst_120:
// rs1_w0_val == -2049, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffff7ff;  op2val:0x00020000400000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffff7ff, 0x00020000400000, x6, 840, x1)

inst_121:
// rs2_w0_val == -3, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009fffffffb;  op2val:0xffffbffffffffffd
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x000009fffffffb, 0xffffbffffffffffd, x6, 848, x1)

inst_122:
// rs1_w0_val == -257, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffffeff;  op2val:0x7ffffffffffffffc
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffffeff, 0x7ffffffffffffffc, x6, 856, x1)

inst_123:
// rs1_w0_val == -33, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffffffdf;  op2val:0xfffff7ffbfffffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xffefffffffffffdf, 0xfffff7ffbfffffff, x6, 864, x1)

inst_124:
// rs2_w0_val == 67108864, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000380000000;  op2val:0xffefffff04000000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00000380000000, 0xffefffff04000000, x6, 872, x1)

inst_125:
// rs2_w0_val == 33554432, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffffffb;  op2val:0xfffffffb02000000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xffffffeffffffffb, 0xfffffffb02000000, x6, 880, x1)

inst_126:
// rs2_w0_val == 16777216, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00008000;  op2val:0x00000301000000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00008000, 0x00000301000000, x6, 888, x1)

inst_127:
// rs1_w0_val == 1073741824, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000040000000;  op2val:0xffffffdfffffdfff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x1000000040000000, 0xffffffdfffffdfff, x6, 896, x1)

inst_128:
// rs2_w0_val == 2097152, 
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffffffffd;  op2val:0x8000000000200000
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffffffd, 0x8000000000200000, x6, 904, x1)

inst_129:
// rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 8192, rs2_w0_val == 2048
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500040000;  op2val:0x00200000000800
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x00000500040000, 0x00200000000800, x6, 912, x1)

inst_130:
// rs2_w1_val == -65, rs1_w1_val == 262144, rs2_w0_val == -16385
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000005;  op2val:0xffffffbfffffbfff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0x04000000000005, 0xffffffbfffffbfff, x6, 920, x1)

inst_131:
// rs2_w1_val == -9, rs1_w1_val == -1073741825
// opcode: cras32 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffffff9;  op2val:0xfffffff7bfffffff
TEST_RR_OP(cras32, x31, x30, x29, 0x0000000000000000, 0xbffffffffffffff9, 0xfffffff7bfffffff, x6, 928, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 117*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
