
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmmwt2 instruction of the RISC-V RV64PZicsr extension for the kmmwt2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmmwt2)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x29, rs2==x16, rd==x29, rs1_w0_val == -2147483648, rs2_h2_val == 8192, rs2_h1_val == -32768, rs1_w1_val == 4096
// opcode: kmmwt2 ; op1:x29; op2:x16; dest:x29; op1val:0x00100080000000;  op2val:0x06200080000006
TEST_PKRR_OP(kmmwt2, x29, x29, x16, 0x0000000000000000, 0x00100080000000, 0x06200080000006, x29, x1, 0, x9)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x0, rs2==x4, rd==x22, rs2_h3_val == -21846, rs1_w1_val == 32, rs1_w0_val == -4194305, rs2_h0_val == 2, rs2_h2_val == 256
// opcode: kmmwt2 ; op1:x0; op2:x4; dest:x22; op1val:0x000020ffbfffff;  op2val:0xaaaa010000030002
TEST_PKRR_OP(kmmwt2, x22, x0, x4, 0x0000000000000000, 0x000020ffbfffff, 0xaaaa010000030002, x0, x1, 16, x9)

inst_2:
// rs1 == rs2 != rd, rs1==x21, rs2==x21, rd==x25, rs2_h3_val == 21845, rs2_h0_val == 1024, rs2_h2_val == 21845, rs2_h1_val == -513, rs1_w1_val == 1, rs1_w0_val == -3
// opcode: kmmwt2 ; op1:x21; op2:x21; dest:x25; op1val:0x000001fffffffd;  op2val:0x55555555fdff0400
TEST_PKRR_OP(kmmwt2, x25, x21, x21, 0x0000000000000000, 0x000001fffffffd, 0x55555555fdff0400, x21, x1, 32, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs2_h3_val == 32767, rs1_w1_val == 33554432, rs2_h0_val == -4097, rs2_h2_val == -2049
// opcode: kmmwt2 ; op1:x7; op2:x7; dest:x7; op1val:0x2000000fffffffa;  op2val:0x7ffff7fffff8efff
TEST_PKRR_OP(kmmwt2, x7, x7, x7, 0x0000000000000000, 0x2000000fffffffa, 0x7ffff7fffff8efff, x7, x1, 48, x9)

inst_4:
// rs2 == rd != rs1, rs1==x26, rs2==x13, rd==x13, rs2_h3_val == -16385, rs2_h1_val == -1025, rs1_w0_val == -131073, rs1_w1_val == -4097
// opcode: kmmwt2 ; op1:x26; op2:x13; dest:x13; op1val:0xffffeffffffdffff;  op2val:0xbfffc000fbff0002
TEST_PKRR_OP(kmmwt2, x13, x26, x13, 0x0000000000000000, 0xffffeffffffdffff, 0xbfffc000fbff0002, x26, x1, 64, x9)

inst_5:
// rs1==x8, rs2==x31, rd==x17, rs2_h3_val == -8193, rs2_h0_val == 16, rs1_w1_val == 16384, rs2_h1_val == -1, rs1_w0_val == -1025
// opcode: kmmwt2 ; op1:x8; op2:x31; dest:x17; op1val:0x004000fffffbff;  op2val:0xdfff2000ffff0010
TEST_PKRR_OP(kmmwt2, x17, x8, x31, 0x0000000000000000, 0x004000fffffbff, 0xdfff2000ffff0010, x8, x1, 80, x9)

inst_6:
// rs1==x4, rs2==x6, rd==x23, rs2_h3_val == -4097, rs2_h1_val == 512, rs1_w0_val == -268435457, rs1_w1_val == 134217728
// opcode: kmmwt2 ; op1:x4; op2:x6; dest:x23; op1val:0x8000000efffffff;  op2val:0xefff00030200efff
TEST_PKRR_OP(kmmwt2, x23, x4, x6, 0x0000000000000000, 0x8000000efffffff, 0xefff00030200efff, x4, x1, 96, x9)

inst_7:
// rs1==x2, rs2==x27, rd==x30, rs2_h3_val == -2049, rs2_h2_val == 16, rs2_h0_val == 2048, rs2_h1_val == 64
// opcode: kmmwt2 ; op1:x2; op2:x27; dest:x30; op1val:0x800000000000009;  op2val:0xf7ff001000400800
TEST_PKRR_OP(kmmwt2, x30, x2, x27, 0x0000000000000000, 0x800000000000009, 0xf7ff001000400800, x2, x1, 112, x9)

inst_8:
// rs1==x18, rs2==x19, rd==x16, rs2_h3_val == -1025, rs2_h1_val == 1024, rs1_w1_val == 1431655765, rs1_w0_val == 1024
// opcode: kmmwt2 ; op1:x18; op2:x19; dest:x16; op1val:0x5555555500000400;  op2val:0xfbff00050400fffa
TEST_PKRR_OP(kmmwt2, x16, x18, x19, 0x0000000000000000, 0x5555555500000400, 0xfbff00050400fffa, x18, x1, 128, x9)

inst_9:
// rs1==x12, rs2==x24, rd==x11, rs2_h3_val == -513, rs2_h0_val == 16384, rs1_w1_val == -17
// opcode: kmmwt2 ; op1:x12; op2:x24; dest:x11; op1val:0xffffffef00000006;  op2val:0xfdff000602004000
TEST_PKRR_OP(kmmwt2, x11, x12, x24, 0x0000000000000000, 0xffffffef00000006, 0xfdff000602004000, x12, x1, 144, x9)

inst_10:
// rs1==x5, rs2==x11, rd==x8, rs2_h3_val == -257, rs2_h2_val == -33, rs2_h1_val == 8
// opcode: kmmwt2 ; op1:x5; op2:x11; dest:x8; op1val:0x001000c0000000;  op2val:0xfeffffdf00080009
TEST_PKRR_OP(kmmwt2, x8, x5, x11, 0x0000000000000000, 0x001000c0000000, 0xfeffffdf00080009, x5, x1, 160, x9)

inst_11:
// rs1==x19, rs2==x26, rd==x12, rs2_h3_val == -129, rs2_h0_val == -65, rs1_w0_val == -1048577, rs2_h2_val == -4097, rs1_w1_val == 128
// opcode: kmmwt2 ; op1:x19; op2:x26; dest:x12; op1val:0x000080ffefffff;  op2val:0xff7feffffffcffbf
TEST_PKRR_OP(kmmwt2, x12, x19, x26, 0x0000000000000000, 0x000080ffefffff, 0xff7feffffffcffbf, x19, x1, 176, x9)

inst_12:
// rs1==x20, rs2==x15, rd==x18, rs2_h3_val == -65, rs2_h1_val == -21846, rs2_h0_val == 4096, rs1_w0_val == -513
// opcode: kmmwt2 ; op1:x20; op2:x15; dest:x18; op1val:0x3ffffffffffffdff;  op2val:0xffbffffaaaaa1000
TEST_PKRR_OP(kmmwt2, x18, x20, x15, 0x0000000000000000, 0x3ffffffffffffdff, 0xffbffffaaaaa1000, x20, x1, 192, x9)

inst_13:
// rs1==x16, rs2==x25, rd==x26, rs2_h3_val == -33, rs1_w0_val == -67108865, rs2_h0_val == -3
// opcode: kmmwt2 ; op1:x16; op2:x25; dest:x26; op1val:0x000080fbffffff;  op2val:0xffdfc0000006fffd
TEST_PKRR_OP(kmmwt2, x26, x16, x25, 0x0000000000000000, 0x000080fbffffff, 0xffdfc0000006fffd, x16, x1, 208, x9)

inst_14:
// rs1==x10, rs2==x28, rd==x3, rs2_h3_val == -17, rs1_w0_val == 536870912, rs2_h2_val == -8193, rs2_h0_val == -21846, rs1_w1_val == 16
// opcode: kmmwt2 ; op1:x10; op2:x28; dest:x3; op1val:0x00001020000000;  op2val:0xffefdfff0003aaaa
TEST_PKRR_OP(kmmwt2, x3, x10, x28, 0x0000000000000000, 0x00001020000000, 0xffefdfff0003aaaa, x10, x1, 224, x9)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_15:
// rs1==x3, rs2==x5, rd==x9, rs2_h3_val == -9, rs2_h2_val == -9, rs1_w0_val == 16777216, rs2_h1_val == -9
// opcode: kmmwt2 ; op1:x3; op2:x5; dest:x9; op1val:0x5555555501000000;  op2val:0xfff7fff7fff7fff8
TEST_PKRR_OP(kmmwt2, x9, x3, x5, 0x0000000000000000, 0x5555555501000000, 0xfff7fff7fff7fff8, x3, x7, 0, x13)

inst_16:
// rs1==x1, rs2==x3, rd==x15, rs2_h3_val == -5, rs1_w1_val == -268435457, rs2_h0_val == -129
// opcode: kmmwt2 ; op1:x1; op2:x3; dest:x15; op1val:0xefffffff00000006;  op2val:0xfffbfffc0005ff7f
TEST_PKRR_OP(kmmwt2, x15, x1, x3, 0x0000000000000000, 0xefffffff00000006, 0xfffbfffc0005ff7f, x1, x7, 16, x13)

inst_17:
// rs1==x14, rs2==x17, rd==x2, rs2_h3_val == -3, rs1_w0_val == 4194304, rs1_w1_val == 8192, rs2_h0_val == -32768
// opcode: kmmwt2 ; op1:x14; op2:x17; dest:x2; op1val:0x00200000400000;  op2val:0xfffd5555fff68000
TEST_PKRR_OP(kmmwt2, x2, x14, x17, 0x0000000000000000, 0x00200000400000, 0xfffd5555fff68000, x14, x7, 32, x13)

inst_18:
// rs1==x15, rs2==x22, rd==x19, rs2_h3_val == -2, rs2_h0_val == -1, rs1_w0_val == 32768, rs1_w1_val == -524289
// opcode: kmmwt2 ; op1:x15; op2:x22; dest:x19; op1val:0xfff7ffff00008000;  op2val:0xfffe00100009ffff
TEST_PKRR_OP(kmmwt2, x19, x15, x22, 0x0000000000000000, 0xfff7ffff00008000, 0xfffe00100009ffff, x15, x7, 48, x13)

inst_19:
// rs1==x11, rs2==x0, rd==x24, rs2_h3_val == -32768, rs2_h0_val == 512, rs1_w1_val == 524288
// opcode: kmmwt2 ; op1:x11; op2:x0; dest:x24; op1val:0x080000fffffff6;  op2val:0x80000007fdff0200
TEST_PKRR_OP(kmmwt2, x24, x11, x0, 0x0000000000000000, 0x080000fffffff6, 0x80000007fdff0200, x11, x7, 64, x13)

inst_20:
// rs1==x25, rs2==x10, rd==x20, rs2_h3_val == 16384, rs2_h2_val == -17, rs2_h0_val == -2, rs2_h1_val == -17
// opcode: kmmwt2 ; op1:x25; op2:x10; dest:x20; op1val:0x3ffffffffffffff6;  op2val:0x4000ffefffeffffe
TEST_PKRR_OP(kmmwt2, x20, x25, x10, 0x0000000000000000, 0x3ffffffffffffff6, 0x4000ffefffeffffe, x25, x7, 80, x13)

inst_21:
// rs1==x30, rs2==x23, rd==x0, rs2_h3_val == 8192, rs1_w1_val == 8388608, rs2_h1_val == 32, rs2_h2_val == 0
// opcode: kmmwt2 ; op1:x30; op2:x23; dest:x0; op1val:0x800000fffffffc;  op2val:0x200000000020efff
TEST_PKRR_OP(kmmwt2, x0, x30, x23, 0x0000000000000000, 0x800000fffffffc, 0x200000000020efff, x30, x7, 96, x13)

inst_22:
// rs1==x28, rs2==x1, rd==x4, rs2_h3_val == 4096, rs2_h0_val == 64, rs1_w0_val == -8193, rs1_w1_val == 2048
// opcode: kmmwt2 ; op1:x28; op2:x1; dest:x4; op1val:0x000800ffffdfff;  op2val:0x1000000300200040
TEST_PKRR_OP(kmmwt2, x4, x28, x1, 0x0000000000000000, 0x000800ffffdfff, 0x1000000300200040, x28, x7, 112, x13)

inst_23:
// rs1==x17, rs2==x8, rd==x1, rs2_h3_val == 2048, rs2_h0_val == 32, rs2_h1_val == 21845
// opcode: kmmwt2 ; op1:x17; op2:x8; dest:x1; op1val:0x2000000fffffff9;  op2val:0x800ffef55550020
TEST_PKRR_OP(kmmwt2, x1, x17, x8, 0x0000000000000000, 0x2000000fffffff9, 0x800ffef55550020, x17, x7, 128, x13)

inst_24:
// rs1==x27, rs2==x12, rd==x6, rs2_h3_val == 1024, rs2_h0_val == -2049, rs1_w1_val == -131073, rs2_h2_val == 8
// opcode: kmmwt2 ; op1:x27; op2:x12; dest:x6; op1val:0xfffdffff00000006;  op2val:0x40000080005f7ff
TEST_PKRR_OP(kmmwt2, x6, x27, x12, 0x0000000000000000, 0xfffdffff00000006, 0x40000080005f7ff, x27, x7, 144, x13)

inst_25:
// rs1==x31, rs2==x2, rd==x14, rs2_h3_val == 512, rs1_w0_val == 8192, rs1_w1_val == 131072, rs2_h2_val == -3
// opcode: kmmwt2 ; op1:x31; op2:x2; dest:x14; op1val:0x02000000002000;  op2val:0x200fffdfffc0010
TEST_PKRR_OP(kmmwt2, x14, x31, x2, 0x0000000000000000, 0x02000000002000, 0x200fffdfffc0010, x31, x7, 160, x13)

inst_26:
// rs1==x24, rs2==x9, rd==x21, rs2_h3_val == 256, rs1_w0_val == 256, rs2_h1_val == 16384, rs1_w1_val == -8193
// opcode: kmmwt2 ; op1:x24; op2:x9; dest:x21; op1val:0xffffdfff00000100;  op2val:0x10000094000ff7f
TEST_PKRR_OP(kmmwt2, x21, x24, x9, 0x0000000000000000, 0xffffdfff00000100, 0x10000094000ff7f, x24, x7, 176, x13)

inst_27:
// rs1==x23, rs2==x29, rd==x27, rs2_h3_val == 128, rs1_w1_val == 67108864, rs2_h0_val == 8, rs2_h2_val == 128
// opcode: kmmwt2 ; op1:x23; op2:x29; dest:x27; op1val:0x400000020000000;  op2val:0x800080ffef0008
TEST_PKRR_OP(kmmwt2, x27, x23, x29, 0x0000000000000000, 0x400000020000000, 0x800080ffef0008, x23, x7, 192, x13)

inst_28:
// rs1==x22, rs2==x18, rd==x5, rs2_h3_val == 64, rs2_h0_val == -33
// opcode: kmmwt2 ; op1:x22; op2:x18; dest:x5; op1val:0xfffffff9ffefffff;  op2val:0x40ffefffefffdf
TEST_PKRR_OP(kmmwt2, x5, x22, x18, 0x0000000000000000, 0xfffffff9ffefffff, 0x40ffefffefffdf, x22, x7, 208, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_29:
// rs1==x13, rs2==x14, rd==x31, rs2_h3_val == 32, rs2_h2_val == -1, rs1_w1_val == -33554433, rs1_w0_val == 512, rs2_h0_val == 1
// opcode: kmmwt2 ; op1:x13; op2:x14; dest:x31; op1val:0xfdffffff00000200;  op2val:0x20ffffc0000001
TEST_PKRR_OP(kmmwt2, x31, x13, x14, 0x0000000000000000, 0xfdffffff00000200, 0x20ffffc0000001, x13, x1, 0, x2)

inst_30:
// rs1==x6, rs2==x30, rd==x28, rs2_h3_val == 16, rs2_h2_val == 32, rs2_h1_val == -129, rs1_w1_val == 64, rs1_w0_val == -2097153
// opcode: kmmwt2 ; op1:x6; op2:x30; dest:x28; op1val:0x000040ffdfffff;  op2val:0x100020ff7ffffd
TEST_PKRR_OP(kmmwt2, x28, x6, x30, 0x0000000000000000, 0x000040ffdfffff, 0x100020ff7ffffd, x6, x1, 16, x2)

inst_31:
// rs1==x9, rs2==x20, rd==x10, rs2_h3_val == 8, rs1_w0_val == -262145, rs2_h1_val == 1, rs1_w1_val == -1431655766, rs2_h0_val == -513, rs2_h2_val == 1024
// opcode: kmmwt2 ; op1:x9; op2:x20; dest:x10; op1val:0xaaaaaaaafffbffff;  op2val:0x0804000001fdff
TEST_PKRR_OP(kmmwt2, x10, x9, x20, 0x0000000000000000, 0xaaaaaaaafffbffff, 0x0804000001fdff, x9, x1, 32, x2)

inst_32:
// rs2_h3_val == 4, rs2_h1_val == -2, rs1_w1_val == -8388609
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00002000;  op2val:0x040020fffe0800
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xff7fffff00002000, 0x040020fffe0800, x30, x1, 48, x2)

inst_33:
// rs2_h3_val == 2, rs2_h1_val == -3, rs1_w0_val == 131072
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00020000;  op2val:0x020400fffdc000
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00020000, 0x020400fffdc000, x30, x1, 64, x2)

inst_34:
// rs2_h3_val == 1, rs1_w1_val == -16385, rs2_h2_val == -1025
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00008000;  op2val:0x01fbfffff80007
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xffffbfff00008000, 0x01fbfffff80007, x30, x1, 80, x2)

inst_35:
// rs2_h3_val == 0, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000100;  op2val:0x00000702000002
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x08000000000100, 0x00000702000002, x30, x1, 96, x2)

inst_36:
// rs2_h3_val == -1, rs2_h0_val == -1025, rs2_h1_val == 4096
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00000200;  op2val:0xffff00101000fbff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffffffc00000200, 0xffff00101000fbff, x30, x1, 112, x2)

inst_37:
// rs2_h2_val == -21846, rs2_h0_val == -8193, rs1_w0_val == 8, rs2_h1_val == 32767, rs1_w1_val == 2
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000008;  op2val:0x7fffaaaa7fffdfff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x00000200000008, 0x7fffaaaa7fffdfff, x30, x1, 128, x2)

inst_38:
// rs2_h2_val == 32767, rs2_h1_val == -5, rs1_w1_val == -65
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffffffa;  op2val:0x057ffffffb0020
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xffffffbffffffffa, 0x057ffffffb0020, x30, x1, 144, x2)

inst_39:
// rs2_h2_val == -16385, rs1_w0_val == 67108864, rs2_h1_val == 2048
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff04000000;  op2val:0x08bfff08008000
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xffffefff04000000, 0x08bfff08008000, x30, x1, 160, x2)

inst_40:
// rs2_h2_val == -513, rs2_h1_val == 256, rs1_w1_val == -1, rs1_w0_val == 1431655765
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff55555555;  op2val:0xfff9fdff01000003
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xffffffff55555555, 0xfff9fdff01000003, x30, x1, 176, x2)

inst_41:
// rs1_w0_val == 2097152, rs2_h1_val == 128, rs2_h0_val == -5, rs1_w1_val == -2049
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00200000;  op2val:0x07ffdf0080fffb
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00200000, 0x07ffdf0080fffb, x30, x1, 192, x2)

inst_42:
// rs1_w0_val == 1048576, rs2_h1_val == -4097, rs2_h2_val == -257, rs2_h0_val == 128
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00000300100000;  op2val:0xfff7feffefff0080
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x00000300100000, 0xfff7feffefff0080, x30, x1, 208, x2)

inst_43:
// rs1_w0_val == 524288, rs2_h1_val == 2
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00080000;  op2val:0xfffefff70002fffd
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00080000, 0xfffefff70002fffd, x30, x1, 224, x2)

inst_44:
// rs1_w0_val == 262144, rs1_w1_val == 2097152
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000040000;  op2val:0xf7ffdffffff78000
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x20000000040000, 0xf7ffdffffff78000, x30, x1, 240, x2)

inst_45:
// rs1_w0_val == 65536, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000010000;  op2val:0x7ffffff90020dfff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x00200000010000, 0x7ffffff90020dfff, x30, x1, 256, x2)

inst_46:
// rs1_w0_val == 16384, rs1_w1_val == -536870913
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00004000;  op2val:0x80000080ffeffffa
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xdfffffff00004000, 0x80000080ffeffffa, x30, x1, 272, x2)

inst_47:
// rs1_w0_val == 4096, rs2_h0_val == 256
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00001000;  op2val:0x3fffffdf00400100
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xdfffffff00001000, 0x3fffffdf00400100, x30, x1, 288, x2)

inst_48:
// rs1_w0_val == 2048, rs2_h0_val == 8192, rs2_h2_val == 4096, rs2_h1_val == -65, rs1_w1_val == 1048576
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000800;  op2val:0x031000ffbf2000
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x10000000000800, 0x031000ffbf2000, x30, x1, 304, x2)

inst_49:
// rs1_w0_val == 128, rs1_w1_val == -2, rs2_h2_val == 512
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000080;  op2val:0x010200fffe0020
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000080, 0x010200fffe0020, x30, x1, 320, x2)

inst_50:
// rs1_w0_val == 64, rs2_h2_val == -32768
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00000040;  op2val:0x008000fff9fff9
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000040, 0x008000fff9fff9, x30, x1, 336, x2)

inst_51:
// rs1_w0_val == 32, rs2_h2_val == 2
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000020;  op2val:0xfff60002efff8000
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x00000100000020, 0xfff60002efff8000, x30, x1, 352, x2)

inst_52:
// rs1_w0_val == 16, rs1_w1_val == 262144
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000010;  op2val:0xf7ff00200020fffa
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x04000000000010, 0xf7ff00200020fffa, x30, x1, 368, x2)

inst_53:
// rs1_w0_val == 4, rs2_h0_val == -257
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000004;  op2val:0x0700200200feff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000004, 0x0700200200feff, x30, x1, 384, x2)

inst_54:
// rs1_w0_val == 2, rs2_h2_val == 2048, rs2_h1_val == -2049
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000002;  op2val:0x8000800f7ff0010
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000002, 0x8000800f7ff0010, x30, x1, 400, x2)

inst_55:
// rs1_w0_val == 1, rs1_w1_val == 2147483647
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000001;  op2val:0x027ffffffadfff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000001, 0x027ffffffadfff, x30, x1, 416, x2)

inst_56:
// rs1_w0_val == 0, rs2_h1_val == -16385
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000000;  op2val:0x20bfffbfffffdf
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000000, 0x20bfffbfffffdf, x30, x1, 432, x2)

inst_57:
// rs1_w0_val == -1, rs1_w1_val == -262145, rs2_h2_val == -2
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffffff;  op2val:0x07fffefff91000
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffffff, 0x07fffefff91000, x30, x1, 448, x2)

inst_58:
// rs2_h2_val == -129, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffffbff;  op2val:0xefffff7f5555ffff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffffbff, 0xefffff7f5555ffff, x30, x1, 464, x2)

inst_59:
// rs2_h2_val == -65, rs2_h0_val == -16385
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffdfff;  op2val:0x10ffbffffbbfff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffdfff, 0x10ffbffffbbfff, x30, x1, 480, x2)

inst_60:
// rs2_h2_val == -5, rs1_w0_val == -2049, rs1_w1_val == 4194304, rs2_h1_val == 8192
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffff7ff;  op2val:0x1000fffb20000800
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x400000fffff7ff, 0x1000fffb20000800, x30, x1, 496, x2)

inst_61:
// rs2_h2_val == 16384, rs1_w1_val == -1073741825
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000007;  op2val:0xffbf4000fffb0010
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000007, 0xffbf4000fffb0010, x30, x1, 512, x2)

inst_62:
// rs2_h2_val == 64, rs2_h0_val == 0
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x000002ffbfffff;  op2val:0x01004001000000
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x000002ffbfffff, 0x01004001000000, x30, x1, 528, x2)

inst_63:
// rs2_h2_val == 4, rs1_w0_val == -129
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffff7f;  op2val:0xc0000004ffff0009
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffff7f, 0xc0000004ffff0009, x30, x1, 544, x2)

inst_64:
// rs2_h2_val == 1, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffffffa;  op2val:0xefff0001fff60080
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xffffeffffffffffa, 0xefff0001fff60080, x30, x1, 560, x2)

inst_65:
// rs2_h1_val == -8193, rs1_w0_val == -524289
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x002000fff7ffff;  op2val:0xfffd3fffdfff0009
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x002000fff7ffff, 0xfffd3fffdfff0009, x30, x1, 576, x2)

inst_66:
// rs2_h1_val == -257, rs1_w1_val == 4
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x000004fbffffff;  op2val:0xffdf0040fefffffb
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x000004fbffffff, 0xffdf0040fefffffb, x30, x1, 592, x2)

inst_67:
// rs2_h0_val == 4, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x000020c0000000;  op2val:0x40fffafff70004
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x000020c0000000, 0x40fffafff70004, x30, x1, 608, x2)

inst_68:
// rs1_w1_val == -134217729, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffffffa;  op2val:0xfffaff7f08000200
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffffffa, 0xfffaff7f08000200, x30, x1, 624, x2)

inst_69:
// rs1_w1_val == -67108865, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00002000;  op2val:0x4000effffffd3fff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfbffffff00002000, 0x4000effffffd3fff, x30, x1, 640, x2)

inst_70:
// rs1_w1_val == -16777217, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00008000;  op2val:0x0900100007f7ff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfeffffff00008000, 0x0900100007f7ff, x30, x1, 656, x2)

inst_71:
// rs1_w1_val == -4194305, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff04000000;  op2val:0x1000000100010003
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xffbfffff04000000, 0x1000000100010003, x30, x1, 672, x2)

inst_72:
// rs1_w1_val == -2097153, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffdfffff;  op2val:0xf7ff0010ffbf0008
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xffdfffffffdfffff, 0xf7ff0010ffbf0008, x30, x1, 688, x2)

inst_73:
// rs1_w1_val == -1048577, rs1_w0_val == -32769
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffff7fff;  op2val:0xfffe00100003dfff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xffefffffffff7fff, 0xfffe00100003dfff, x30, x1, 704, x2)

inst_74:
// rs1_w1_val == -65537, rs2_h1_val == 4
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffc0000000;  op2val:0x10ff7f00040002
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffeffffc0000000, 0x10ff7f00040002, x30, x1, 720, x2)

inst_75:
// rs1_w1_val == -32769, rs1_w0_val == 2147483647
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff7fffffff;  op2val:0x2003ffffffb0400
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xffff7fff7fffffff, 0x2003ffffffb0400, x30, x1, 736, x2)

inst_76:
// rs1_w1_val == -1025, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff20000000;  op2val:0xf7fffffafff7fff9
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffffbff20000000, 0xf7fffffafff7fff9, x30, x1, 752, x2)

inst_77:
// rs1_w1_val == -513, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffc0000000;  op2val:0xaaaaffeffff60020
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffffdffc0000000, 0xaaaaffeffff60020, x30, x1, 768, x2)

inst_78:
// rs1_w1_val == -257, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffff9;  op2val:0x20555555550003
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffff9, 0x20555555550003, x30, x1, 784, x2)

inst_79:
// rs1_w1_val == -129, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000400;  op2val:0x20010000800ffdf
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000400, 0x20010000800ffdf, x30, x1, 800, x2)

inst_80:
// rs1_w1_val == -33, rs2_h0_val == -17
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf80000000;  op2val:0x4000800200ffef
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xffffffdf80000000, 0x4000800200ffef, x30, x1, 816, x2)

inst_81:
// rs1_w1_val == -9, rs2_h1_val == -33, rs1_w0_val == -257
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fffffeff;  op2val:0x100ffbfffdf2000
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffffeff, 0x100ffbfffdf2000, x30, x1, 832, x2)

inst_82:
// rs1_w1_val == -5, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffffffd;  op2val:0x20000100002fdff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffffffd, 0x20000100002fdff, x30, x1, 848, x2)

inst_83:
// rs1_w1_val == -3, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffffdfff;  op2val:0x8000fffc01000020
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffffffdffffdfff, 0x8000fffc01000020, x30, x1, 864, x2)

inst_84:
// rs1_w1_val == -2147483648, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffffff8;  op2val:0xfff88000fbffffdf
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x80000000fffffff8, 0xfff88000fbffffdf, x30, x1, 880, x2)

inst_85:
// rs1_w1_val == 1073741824, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000010;  op2val:0xffef00024000fff6
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x4000000000000010, 0xffef00024000fff6, x30, x1, 896, x2)

inst_86:
// rs1_w1_val == 536870912, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffdfffff;  op2val:0xfffb080002000004
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x20000000ffdfffff, 0xfffb080002000004, x30, x1, 912, x2)

inst_87:
// rs1_w1_val == 268435456, rs2_h0_val == 32767
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000400;  op2val:0xfff8ffbffffc7fff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x1000000000000400, 0xfff8ffbffffc7fff, x30, x1, 928, x2)

inst_88:
// rs1_w1_val == 16777216, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffff8;  op2val:0xfffb0002efff0005
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x1000000fffffff8, 0xfffb0002efff0005, x30, x1, 944, x2)

inst_89:
// rs1_w1_val == 65536, rs1_w0_val == -33, rs2_h1_val == 16
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffffffdf;  op2val:0xaaaafffd0010fff6
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x010000ffffffdf, 0xaaaafffd0010fff6, x30, x1, 960, x2)

inst_90:
// rs1_w1_val == 32768, rs1_w0_val == -65
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffffffbf;  op2val:0x050200ffffffff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x008000ffffffbf, 0x050200ffffffff, x30, x1, 976, x2)

inst_91:
// rs1_w1_val == 1024, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x0004007fffffff;  op2val:0x7fffeffffff9fdff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x0004007fffffff, 0x7fffeffffff9fdff, x30, x1, 992, x2)

inst_92:
// rs1_w1_val == 512, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000004000;  op2val:0xfbff5555ffef3fff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x00020000004000, 0xfbff5555ffef3fff, x30, x1, 1008, x2)

inst_93:
// rs1_w1_val == 256, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000400;  op2val:0x0900045555ff7f
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x00010000000400, 0x0900045555ff7f, x30, x1, 1024, x2)

inst_94:
// rs1_w1_val == 8, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000010;  op2val:0xfdff8000fffd0000
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x00000800000010, 0xfdff8000fffd0000, x30, x1, 1040, x2)

inst_95:
// rs1_w1_val == 0, rs1_w0_val == 1073741824
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00000040000000;  op2val:0x07bfffbfff0007
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x00000040000000, 0x07bfffbfff0007, x30, x1, 1056, x2)

inst_96:
// rs1_w0_val == -1431655766, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6aaaaaaaa;  op2val:0x400ffbf00100020
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffffff6aaaaaaaa, 0x400ffbf00100020, x30, x1, 1072, x2)

inst_97:
// rs1_w0_val == -1073741825, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x000008bfffffff;  op2val:0xfff61000dfff8000
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x000008bfffffff, 0xfff61000dfff8000, x30, x1, 1088, x2)

inst_98:
// rs1_w0_val == -536870913, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffdfffffff;  op2val:0x200000062000c000
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffbffffdfffffff, 0x200000062000c000, x30, x1, 1104, x2)

inst_99:
// rs1_w0_val == -134217729, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x000000f7ffffff;  op2val:0x01c00008003fff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x000000f7ffffff, 0x01c00008003fff, x30, x1, 1120, x2)

inst_100:
// rs1_w0_val == -33554433, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fdffffff;  op2val:0xfff9ffbffeffffdf
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x8000000fdffffff, 0xfff9ffbffeffffdf, x30, x1, 1136, x2)

inst_101:
// rs1_w0_val == -16777217, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffeffffff;  op2val:0x083fff0002c000
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffefffffeffffff, 0x083fff0002c000, x30, x1, 1152, x2)

inst_102:
// rs1_w0_val == -65537, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffeffff;  op2val:0x200fff9fff7fffc
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffffffffffeffff, 0x200fff9fff7fffc, x30, x1, 1168, x2)

inst_103:
// rs1_w0_val == -16385, rs2_h0_val == 21845
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffbfff;  op2val:0x03ffbf00025555
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffbfff, 0x03ffbf00025555, x30, x1, 1184, x2)

inst_104:
// rs1_w0_val == -4097, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffffefff;  op2val:0x040000ff7ffffb
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfeffffffffffefff, 0x040000ff7ffffb, x30, x1, 1200, x2)

inst_105:
// rs2_h1_val == 0, rs1_w0_val == -2
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffffffe;  op2val:0x2000400000feff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffffffe, 0x2000400000feff, x30, x1, 1216, x2)

inst_106:
// rs1_w0_val == -17, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffffef;  op2val:0xfff9080000028000
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffffef, 0xfff9080000028000, x30, x1, 1232, x2)

inst_107:
// rs1_w0_val == -9, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffffff7;  op2val:0x200000010004fffa
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x000000fffffff7, 0x200000010004fffa, x30, x1, 1248, x2)

inst_108:
// rs1_w0_val == -5, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffffffb;  op2val:0x20f7ffefff0001
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffffffb, 0x20f7ffefff0001, x30, x1, 1264, x2)

inst_109:
// rs1_w0_val == 268435456, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000010000000;  op2val:0x3fffdfff0004fffe
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xc000000010000000, 0x3fffdfff0004fffe, x30, x1, 1280, x2)

inst_110:
// rs1_w0_val == 134217728, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff08000000;  op2val:0xdfffffdffffafffd
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xdfffffff08000000, 0xdfffffdffffafffd, x30, x1, 1296, x2)

inst_111:
// rs2_h0_val == -9, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000001;  op2val:0xfff83ffffdfffff7
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000001, 0xfff83ffffdfffff7, x30, x1, 1312, x2)

inst_112:
// rs1_w0_val == 33554432, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff02000000;  op2val:0xc0000002fffffff9
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xffffffff02000000, 0xc0000002fffffff9, x30, x1, 1328, x2)

inst_113:
// rs1_w0_val == 8388608, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00800000;  op2val:0x20000700050200
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xffff7fff00800000, 0x20000700050200, x30, x1, 1344, x2)

inst_114:
// rs1_w0_val == -8388609, 
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffff7fffff;  op2val:0xfffc002000107fff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0xfffbffffff7fffff, 0xfffc002000107fff, x30, x1, 1360, x2)

inst_115:
// rs2_h3_val == -21846, rs1_w1_val == 32, rs1_w0_val == -4194305, rs2_h0_val == 2, rs2_h2_val == 256
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x000020ffbfffff;  op2val:0xaaaa010000030002
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x000020ffbfffff, 0xaaaa010000030002, x30, x1, 1376, x2)

inst_116:
// rs2_h3_val == 21845, rs2_h0_val == 1024, rs2_h2_val == 21845, rs2_h1_val == -513, rs1_w1_val == 1, rs1_w0_val == -3
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffffffd;  op2val:0x55555555fdff0400
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x000001fffffffd, 0x55555555fdff0400, x30, x1, 1392, x2)

inst_117:
// rs2_h3_val == 8192, rs1_w1_val == 8388608, rs2_h1_val == 32, rs2_h2_val == 0
// opcode: kmmwt2 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffffc;  op2val:0x200000000020efff
TEST_PKRR_OP(kmmwt2, x31, x30, x29, 0x0000000000000000, 0x800000fffffffc, 0x200000000020efff, x30, x1, 1408, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 178*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
