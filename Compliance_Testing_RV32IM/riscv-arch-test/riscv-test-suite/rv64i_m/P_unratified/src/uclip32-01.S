
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uclip32 instruction of the RISC-V RV64PZicsr extension for the uclip32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uclip32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rd, rs1==x8, rd==x8, rs1_w0_val == 0, imm_val == 11
// opcode: uclip32 ; op1:x8; dest:x8; op1val:0x00000f00000000;  immval:0xb
TEST_PKIMM_OP( uclip32, x8, x8, 0x0000000000000000, 0x00000f00000000, 0xb, x8, x15, 0, x12)

inst_1:
// rs1 != rd, rs1==x5, rd==x16, imm_val == 31, rs1_w0_val == 134217728
// opcode: uclip32 ; op1:x5; dest:x16; op1val:0x00001208000000;  immval:0x1f
TEST_PKIMM_OP( uclip32, x16, x5, 0x0000000000000000, 0x00001208000000, 0x1f, x5, x15, 16, x12)

inst_2:
// rs1==x21, rd==x27, imm_val == 30, rs1_w1_val == 4227858431, rs1_w0_val == 4294966271
// opcode: uclip32 ; op1:x21; dest:x27; op1val:0xfbfffffffffffbff;  immval:0x1e
TEST_PKIMM_OP( uclip32, x27, x21, 0x0000000000000000, 0xfbfffffffffffbff, 0x1e, x21, x15, 32, x12)

inst_3:
// rs1==x19, rd==x2, imm_val == 29, rs1_w1_val == 1431655765, rs1_w0_val == 33554432
// opcode: uclip32 ; op1:x19; dest:x2; op1val:0x5555555502000000;  immval:0x1d
TEST_PKIMM_OP( uclip32, x2, x19, 0x0000000000000000, 0x5555555502000000, 0x1d, x19, x15, 48, x12)

inst_4:
// rs1==x11, rd==x22, imm_val == 28, rs1_w1_val == 4294967039, rs1_w0_val == 4294965247
// opcode: uclip32 ; op1:x11; dest:x22; op1val:0xfffffefffffff7ff;  immval:0x1c
TEST_PKIMM_OP( uclip32, x22, x11, 0x0000000000000000, 0xfffffefffffff7ff, 0x1c, x11, x15, 64, x12)

inst_5:
// rs1==x10, rd==x14, imm_val == 27, rs1_w1_val == 4293918719
// opcode: uclip32 ; op1:x10; dest:x14; op1val:0xffefffff0000000d;  immval:0x1b
TEST_PKIMM_OP( uclip32, x14, x10, 0x0000000000000000, 0xffefffff0000000d, 0x1b, x10, x15, 80, x12)

inst_6:
// rs1==x29, rd==x25, imm_val == 26, rs1_w0_val == 4294963199, rs1_w1_val == 4294934527
// opcode: uclip32 ; op1:x29; dest:x25; op1val:0xffff7fffffffefff;  immval:0x1a
TEST_PKIMM_OP( uclip32, x25, x29, 0x0000000000000000, 0xffff7fffffffefff, 0x1a, x29, x15, 96, x12)

inst_7:
// rs1==x26, rd==x5, imm_val == 25, rs1_w1_val == 16777216, rs1_w0_val == 65536
// opcode: uclip32 ; op1:x26; dest:x5; op1val:0x100000000010000;  immval:0x19
TEST_PKIMM_OP( uclip32, x5, x26, 0x0000000000000000, 0x100000000010000, 0x19, x26, x15, 112, x12)

inst_8:
// rs1==x4, rd==x9, imm_val == 24, rs1_w1_val == 4294967291, rs1_w0_val == 3221225471
// opcode: uclip32 ; op1:x4; dest:x9; op1val:0xfffffffbbfffffff;  immval:0x18
TEST_PKIMM_OP( uclip32, x9, x4, 0x0000000000000000, 0xfffffffbbfffffff, 0x18, x4, x15, 128, x12)

inst_9:
// rs1==x3, rd==x23, imm_val == 23, rs1_w0_val == 16, rs1_w1_val == 32768
// opcode: uclip32 ; op1:x3; dest:x23; op1val:0x00800000000010;  immval:0x17
TEST_PKIMM_OP( uclip32, x23, x3, 0x0000000000000000, 0x00800000000010, 0x17, x3, x15, 144, x12)

inst_10:
// rs1==x2, rd==x1, imm_val == 22, rs1_w1_val == 4294967293, rs1_w0_val == 1024
// opcode: uclip32 ; op1:x2; dest:x1; op1val:0xfffffffd00000400;  immval:0x16
TEST_PKIMM_OP( uclip32, x1, x2, 0x0000000000000000, 0xfffffffd00000400, 0x16, x2, x15, 160, x12)

inst_11:
// rs1==x18, rd==x31, imm_val == 21, rs1_w0_val == 2147483647
// opcode: uclip32 ; op1:x18; dest:x31; op1val:0x0000137fffffff;  immval:0x15
TEST_PKIMM_OP( uclip32, x31, x18, 0x0000000000000000, 0x0000137fffffff, 0x15, x18, x15, 176, x12)

inst_12:
// rs1==x25, rd==x28, imm_val == 20, rs1_w1_val == 1
// opcode: uclip32 ; op1:x25; dest:x28; op1val:0x000001fffff7ff;  immval:0x14
TEST_PKIMM_OP( uclip32, x28, x25, 0x0000000000000000, 0x000001fffff7ff, 0x14, x25, x15, 192, x12)

inst_13:
// rs1==x28, rd==x7, imm_val == 19, rs1_w0_val == 4294950911, rs1_w1_val == 131072
// opcode: uclip32 ; op1:x28; dest:x7; op1val:0x020000ffffbfff;  immval:0x13
TEST_PKIMM_OP( uclip32, x7, x28, 0x0000000000000000, 0x020000ffffbfff, 0x13, x28, x15, 208, x12)

inst_14:
// rs1==x0, rd==x6, imm_val == 18, rs1_w0_val == 8388608, rs1_w1_val == 134217728
// opcode: uclip32 ; op1:x0; dest:x6; op1val:0x800000000800000;  immval:0x12
TEST_PKIMM_OP( uclip32, x6, x0, 0x0000000000000000, 0x800000000800000, 0x12, x0, x15, 224, x12)

inst_15:
// rs1==x1, rd==x21, imm_val == 17, rs1_w1_val == 512
// opcode: uclip32 ; op1:x1; dest:x21; op1val:0x00020002000000;  immval:0x11
TEST_PKIMM_OP( uclip32, x21, x1, 0x0000000000000000, 0x00020002000000, 0x11, x1, x15, 240, x12)

inst_16:
// rs1==x6, rd==x13, imm_val == 16, rs1_w1_val == 4294966271, rs1_w0_val == 32768
// opcode: uclip32 ; op1:x6; dest:x13; op1val:0xfffffbff00008000;  immval:0x10
TEST_PKIMM_OP( uclip32, x13, x6, 0x0000000000000000, 0xfffffbff00008000, 0x10, x6, x15, 256, x12)

inst_17:
// rs1==x13, rd==x18, imm_val == 15, rs1_w1_val == 4294966783, rs1_w0_val == 2863311530
// opcode: uclip32 ; op1:x13; dest:x18; op1val:0xfffffdffaaaaaaaa;  immval:0xf
TEST_PKIMM_OP( uclip32, x18, x13, 0x0000000000000000, 0xfffffdffaaaaaaaa, 0xf, x13, x15, 272, x12)

inst_18:
// rs1==x24, rd==x11, imm_val == 14, rs1_w0_val == 131072
// opcode: uclip32 ; op1:x24; dest:x11; op1val:0x00020000020000;  immval:0xe
TEST_PKIMM_OP( uclip32, x11, x24, 0x0000000000000000, 0x00020000020000, 0xe, x24, x15, 288, x12)

inst_19:
// rs1==x14, rd==x17, imm_val == 13, rs1_w1_val == 1024, rs1_w0_val == 32
// opcode: uclip32 ; op1:x14; dest:x17; op1val:0x00040000000020;  immval:0xd
TEST_PKIMM_OP( uclip32, x17, x14, 0x0000000000000000, 0x00040000000020, 0xd, x14, x15, 304, x12)

inst_20:
// rs1==x17, rd==x3, imm_val == 12, rs1_w1_val == 4294967263, rs1_w0_val == 4286578687
// opcode: uclip32 ; op1:x17; dest:x3; op1val:0xffffffdfff7fffff;  immval:0xc
TEST_PKIMM_OP( uclip32, x3, x17, 0x0000000000000000, 0xffffffdfff7fffff, 0xc, x17, x15, 320, x2)

inst_21:
// rs1==x12, rd==x19, imm_val == 10, rs1_w1_val == 4160749567
// opcode: uclip32 ; op1:x12; dest:x19; op1val:0xf7ffffff00020000;  immval:0xa
TEST_PKIMM_OP( uclip32, x19, x12, 0x0000000000000000, 0xf7ffffff00020000, 0xa, x12, x15, 336, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_22:
// rs1==x20, rd==x0, imm_val == 9, rs1_w1_val == 4026531839
// opcode: uclip32 ; op1:x20; dest:x0; op1val:0xefffffffffffefff;  immval:0x9
TEST_PKIMM_OP( uclip32, x0, x20, 0x0000000000000000, 0xefffffffffffefff, 0x9, x20, x1, 0, x2)

inst_23:
// rs1==x9, rd==x29, imm_val == 8, rs1_w1_val == 2147483647
// opcode: uclip32 ; op1:x9; dest:x29; op1val:0x7fffffff0000000b;  immval:0x8
TEST_PKIMM_OP( uclip32, x29, x9, 0x0000000000000000, 0x7fffffff0000000b, 0x8, x9, x1, 16, x2)

inst_24:
// rs1==x27, rd==x24, imm_val == 7, rs1_w1_val == 4286578687
// opcode: uclip32 ; op1:x27; dest:x24; op1val:0xff7fffff00000006;  immval:0x7
TEST_PKIMM_OP( uclip32, x24, x27, 0x0000000000000000, 0xff7fffff00000006, 0x7, x27, x1, 32, x2)

inst_25:
// rs1==x31, rd==x4, imm_val == 6, rs1_w1_val == 4278190079
// opcode: uclip32 ; op1:x31; dest:x4; op1val:0xfeffffff0000000e;  immval:0x6
TEST_PKIMM_OP( uclip32, x4, x31, 0x0000000000000000, 0xfeffffff0000000e, 0x6, x31, x1, 48, x2)

inst_26:
// rs1==x7, rd==x26, imm_val == 5, rs1_w0_val == 3758096383, rs1_w1_val == 4294950911
// opcode: uclip32 ; op1:x7; dest:x26; op1val:0xffffbfffdfffffff;  immval:0x5
TEST_PKIMM_OP( uclip32, x26, x7, 0x0000000000000000, 0xffffbfffdfffffff, 0x5, x7, x1, 64, x2)

inst_27:
// rs1==x22, rd==x20, imm_val == 4, rs1_w1_val == 32, rs1_w0_val == 4294967167
// opcode: uclip32 ; op1:x22; dest:x20; op1val:0x000020ffffff7f;  immval:0x4
TEST_PKIMM_OP( uclip32, x20, x22, 0x0000000000000000, 0x000020ffffff7f, 0x4, x22, x1, 80, x2)

inst_28:
// rs1==x23, rd==x12, imm_val == 3, 
// opcode: uclip32 ; op1:x23; dest:x12; op1val:0x7fffffff00010000;  immval:0x3
TEST_PKIMM_OP( uclip32, x12, x23, 0x0000000000000000, 0x7fffffff00010000, 0x3, x23, x1, 96, x2)

inst_29:
// rs1==x15, rd==x30, imm_val == 2, 
// opcode: uclip32 ; op1:x15; dest:x30; op1val:0x000011bfffffff;  immval:0x2
TEST_PKIMM_OP( uclip32, x30, x15, 0x0000000000000000, 0x000011bfffffff, 0x2, x15, x1, 112, x2)

inst_30:
// rs1==x16, rd==x10, imm_val == 1, rs1_w0_val == 16384, rs1_w1_val == 2
// opcode: uclip32 ; op1:x16; dest:x10; op1val:0x00000200004000;  immval:0x1
TEST_PKIMM_OP( uclip32, x10, x16, 0x0000000000000000, 0x00000200004000, 0x1, x16, x1, 128, x2)

inst_31:
// rs1==x30, rd==x15, imm_val == 0, rs1_w1_val == 3758096383
// opcode: uclip32 ; op1:x30; dest:x15; op1val:0xdfffffffffffff7f;  immval:0x0
TEST_PKIMM_OP( uclip32, x15, x30, 0x0000000000000000, 0xdfffffffffffff7f, 0x0, x30, x1, 144, x2)

inst_32:
// rs1_w1_val == 2863311530, rs1_w0_val == 16777216
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xaaaaaaaa01000000;  immval:0x12
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xaaaaaaaa01000000, 0x12, x30, x1, 160, x2)

inst_33:
// rs1_w1_val == 3221225471, rs1_w0_val == 4294705151
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xbffffffffffbffff;  immval:0x1d
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xbffffffffffbffff, 0x1d, x30, x1, 176, x2)

inst_34:
// rs1_w1_val == 4261412863, rs1_w0_val == 1431655765
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xfdffffff55555555;  immval:0x6
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xfdffffff55555555, 0x6, x30, x1, 192, x2)

inst_35:
// rs1_w1_val == 4290772991, rs1_w0_val == 4293918719
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xffbfffffffefffff;  immval:0x1c
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xffbfffffffefffff, 0x1c, x30, x1, 208, x2)

inst_36:
// rs1_w1_val == 4292870143, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xffdfffff0000000a;  immval:0x8
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xffdfffff0000000a, 0x8, x30, x1, 224, x2)

inst_37:
// rs1_w1_val == 4294443007, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xfff7ffff00000009;  immval:0xc
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xfff7ffff00000009, 0xc, x30, x1, 240, x2)

inst_38:
// rs1_w1_val == 4294705151, rs1_w0_val == 4294967263
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xfffbffffffffffdf;  immval:0x14
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xfffbffffffffffdf, 0x14, x30, x1, 256, x2)

inst_39:
// rs1_w1_val == 4294836223, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xfffdffff0000000e;  immval:0x10
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xfffdffff0000000e, 0x10, x30, x1, 272, x2)

inst_40:
// rs1_w1_val == 4294901759, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xfffeffff00000020;  immval:0x0
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xfffeffff00000020, 0x0, x30, x1, 288, x2)

inst_41:
// rs1_w1_val == 4294959103, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xffffdfff08000000;  immval:0x1a
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xffffdfff08000000, 0x1a, x30, x1, 304, x2)

inst_42:
// rs1_w1_val == 4294963199, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xffffefff0000000d;  immval:0x13
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xffffefff0000000d, 0x13, x30, x1, 320, x2)

inst_43:
// rs1_w1_val == 4294965247, rs1_w0_val == 4294967287
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xfffff7fffffffff7;  immval:0xd
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xfffff7fffffffff7, 0xd, x30, x1, 336, x2)

inst_44:
// rs1_w1_val == 4294967167, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xffffff7fffffbfff;  immval:0x1f
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xffffff7fffffbfff, 0x1f, x30, x1, 352, x2)

inst_45:
// rs1_w1_val == 4294967231, rs1_w0_val == 4292870143
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xffffffbfffdfffff;  immval:0x9
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xffffffbfffdfffff, 0x9, x30, x1, 368, x2)

inst_46:
// rs1_w1_val == 4294967279, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xffffffef00000012;  immval:0xd
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xffffffef00000012, 0xd, x30, x1, 384, x2)

inst_47:
// rs1_w1_val == 4294967287, rs1_w0_val == 4278190079
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xfffffff7feffffff;  immval:0x17
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xfffffff7feffffff, 0x17, x30, x1, 400, x2)

inst_48:
// rs1_w1_val == 4294967294, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xfffffffefeffffff;  immval:0x12
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xfffffffefeffffff, 0x12, x30, x1, 416, x2)

inst_49:
// rs1_w1_val == 2147483648, rs1_w0_val == 1
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x8000000000000001;  immval:0xc
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x8000000000000001, 0xc, x30, x1, 432, x2)

inst_50:
// rs1_w0_val == 4294967231, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xfffffeffffffffbf;  immval:0x16
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xfffffeffffffffbf, 0x16, x30, x1, 448, x2)

inst_51:
// rs1_w0_val == 4294967279, rs1_w1_val == 67108864
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x4000000ffffffef;  immval:0x11
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x4000000ffffffef, 0x11, x30, x1, 464, x2)

inst_52:
// rs1_w0_val == 4294967291, rs1_w1_val == 16
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x000010fffffffb;  immval:0x16
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x000010fffffffb, 0x16, x30, x1, 480, x2)

inst_53:
// rs1_w0_val == 4294967293, rs1_w1_val == 33554432
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x2000000fffffffd;  immval:0xb
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x2000000fffffffd, 0xb, x30, x1, 496, x2)

inst_54:
// rs1_w0_val == 4294967294, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x020000fffffffe;  immval:0x18
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x020000fffffffe, 0x18, x30, x1, 512, x2)

inst_55:
// rs1_w0_val == 2147483648, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xfffffffd80000000;  immval:0x17
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xfffffffd80000000, 0x17, x30, x1, 528, x2)

inst_56:
// rs1_w0_val == 1073741824, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x00000a40000000;  immval:0x18
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x00000a40000000, 0x18, x30, x1, 544, x2)

inst_57:
// rs1_w0_val == 536870912, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xffbfffff20000000;  immval:0xe
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xffbfffff20000000, 0xe, x30, x1, 560, x2)

inst_58:
// rs1_w0_val == 268435456, rs1_w1_val == 4194304
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x40000010000000;  immval:0x14
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x40000010000000, 0x14, x30, x1, 576, x2)

inst_59:
// rs1_w0_val == 67108864, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xfff7ffff04000000;  immval:0x16
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xfff7ffff04000000, 0x16, x30, x1, 592, x2)

inst_60:
// rs1_w0_val == 4194304, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x00800000400000;  immval:0x8
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x00800000400000, 0x8, x30, x1, 608, x2)

inst_61:
// rs1_w0_val == 2097152, rs1_w1_val == 524288
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x08000000200000;  immval:0xc
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x08000000200000, 0xc, x30, x1, 624, x2)

inst_62:
// rs1_w0_val == 1048576, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xfeffffff00100000;  immval:0x10
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xfeffffff00100000, 0x10, x30, x1, 640, x2)

inst_63:
// rs1_w0_val == 524288, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xfffffeff00080000;  immval:0x1
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xfffffeff00080000, 0x1, x30, x1, 656, x2)

inst_64:
// rs1_w0_val == 262144, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xffffdfff00040000;  immval:0x1d
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xffffdfff00040000, 0x1d, x30, x1, 672, x2)

inst_65:
// rs1_w0_val == 8192, rs1_w1_val == 16384
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x00400000002000;  immval:0x1c
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x00400000002000, 0x1c, x30, x1, 688, x2)

inst_66:
// rs1_w0_val == 4096, rs1_w1_val == 128
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x00008000001000;  immval:0xe
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x00008000001000, 0xe, x30, x1, 704, x2)

inst_67:
// rs1_w0_val == 2048, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xfffffff700000800;  immval:0x5
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xfffffff700000800, 0x5, x30, x1, 720, x2)

inst_68:
// rs1_w0_val == 512, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xfbffffff00000200;  immval:0xc
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xfbffffff00000200, 0xc, x30, x1, 736, x2)

inst_69:
// rs1_w0_val == 256, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x00001100000100;  immval:0x1a
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x00001100000100, 0x1a, x30, x1, 752, x2)

inst_70:
// rs1_w0_val == 128, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xfffffff700000080;  immval:0x2
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xfffffff700000080, 0x2, x30, x1, 768, x2)

inst_71:
// rs1_w0_val == 64, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xaaaaaaaa00000040;  immval:0xc
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xaaaaaaaa00000040, 0xc, x30, x1, 784, x2)

inst_72:
// rs1_w0_val == 8, rs1_w1_val == 536870912
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x2000000000000008;  immval:0x9
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x2000000000000008, 0x9, x30, x1, 800, x2)

inst_73:
// rs1_w0_val == 4, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x00000700000004;  immval:0x4
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x00000700000004, 0x4, x30, x1, 816, x2)

inst_74:
// rs1_w1_val == 1073741824, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x4000000000200000;  immval:0xd
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x4000000000200000, 0xd, x30, x1, 832, x2)

inst_75:
// rs1_w1_val == 268435456, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x10000000fffffffd;  immval:0x9
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x10000000fffffffd, 0x9, x30, x1, 848, x2)

inst_76:
// rs1_w1_val == 8388608, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x800000feffffff;  immval:0x7
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x800000feffffff, 0x7, x30, x1, 864, x2)

inst_77:
// rs1_w1_val == 2097152, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x20000010000000;  immval:0x5
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x20000010000000, 0x5, x30, x1, 880, x2)

inst_78:
// rs1_w1_val == 1048576, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x10000000008000;  immval:0x1f
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x10000000008000, 0x1f, x30, x1, 896, x2)

inst_79:
// rs1_w1_val == 262144, rs1_w0_val == 4227858431
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x040000fbffffff;  immval:0x1c
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x040000fbffffff, 0x1c, x30, x1, 912, x2)

inst_80:
// rs1_w1_val == 65536, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x01000000000009;  immval:0x13
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x01000000000009, 0x13, x30, x1, 928, x2)

inst_81:
// rs1_w1_val == 8192, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x00200000000007;  immval:0x9
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x00200000000007, 0x9, x30, x1, 944, x2)

inst_82:
// rs1_w1_val == 4096, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x00100000000010;  immval:0x6
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x00100000000010, 0x6, x30, x1, 960, x2)

inst_83:
// rs1_w1_val == 2048, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x000800ffffefff;  immval:0x1f
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x000800ffffefff, 0x1f, x30, x1, 976, x2)

inst_84:
// rs1_w1_val == 256, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x000100feffffff;  immval:0x10
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x000100feffffff, 0x10, x30, x1, 992, x2)

inst_85:
// rs1_w1_val == 64, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x00004055555555;  immval:0x1f
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x00004055555555, 0x1f, x30, x1, 1008, x2)

inst_86:
// rs1_w1_val == 8, rs1_w0_val == 4160749567
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x000008f7ffffff;  immval:0x14
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x000008f7ffffff, 0x14, x30, x1, 1024, x2)

inst_87:
// rs1_w1_val == 4, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x00000400000009;  immval:0x1d
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x00000400000009, 0x1d, x30, x1, 1040, x2)

inst_88:
// rs1_w1_val == 4294967295, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xffffffff00000004;  immval:0x1b
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xffffffff00000004, 0x1b, x30, x1, 1056, x2)

inst_89:
// rs1_w1_val == 0, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x0000000000000f;  immval:0x14
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x0000000000000f, 0x14, x30, x1, 1072, x2)

inst_90:
// rs1_w0_val == 2, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x80000000000002;  immval:0xb
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x80000000000002, 0xb, x30, x1, 1088, x2)

inst_91:
// rs1_w0_val == 4294967295, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x002000ffffffff;  immval:0x3
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x002000ffffffff, 0x3, x30, x1, 1104, x2)

inst_92:
// rs1_w0_val == 4026531839, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x000010efffffff;  immval:0x1a
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x000010efffffff, 0x1a, x30, x1, 1120, x2)

inst_93:
// rs1_w0_val == 4261412863, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x080000fdffffff;  immval:0x1d
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x080000fdffffff, 0x1d, x30, x1, 1136, x2)

inst_94:
// rs1_w0_val == 4290772991, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x000003ffbfffff;  immval:0x3
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x000003ffbfffff, 0x3, x30, x1, 1152, x2)

inst_95:
// rs1_w0_val == 4294443007, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x000003fff7ffff;  immval:0x11
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x000003fff7ffff, 0x11, x30, x1, 1168, x2)

inst_96:
// rs1_w0_val == 4294836223, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x80000000fffdffff;  immval:0x15
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x80000000fffdffff, 0x15, x30, x1, 1184, x2)

inst_97:
// rs1_w0_val == 4294901759, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x00000cfffeffff;  immval:0x12
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x00000cfffeffff, 0x12, x30, x1, 1200, x2)

inst_98:
// rs1_w0_val == 4294959103, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x000012ffffdfff;  immval:0x10
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x000012ffffdfff, 0x10, x30, x1, 1216, x2)

inst_99:
// rs1_w0_val == 4294966783, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x000013fffffdff;  immval:0x4
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x000013fffffdff, 0x4, x30, x1, 1232, x2)

inst_100:
// rs1_w0_val == 4294967039, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x000011fffffeff;  immval:0x11
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x000011fffffeff, 0x11, x30, x1, 1248, x2)

inst_101:
// rs1_w0_val == 4294934527, 
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xff7fffffffff7fff;  immval:0x3
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xff7fffffffff7fff, 0x3, x30, x1, 1264, x2)

inst_102:
// imm_val == 18, rs1_w0_val == 8388608, rs1_w1_val == 134217728
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0x800000000800000;  immval:0x12
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0x800000000800000, 0x12, x30, x1, 1280, x2)

inst_103:
// imm_val == 9, rs1_w1_val == 4026531839
// opcode: uclip32 ; op1:x30; dest:x31; op1val:0xefffffffffffefff;  immval:0x9
TEST_PKIMM_OP( uclip32, x31, x30, 0x0000000000000000, 0xefffffffffffefff, 0x9, x30, x1, 1296, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 44*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 164*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
