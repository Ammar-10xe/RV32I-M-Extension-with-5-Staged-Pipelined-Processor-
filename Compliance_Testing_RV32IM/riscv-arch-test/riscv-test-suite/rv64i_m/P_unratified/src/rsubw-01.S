
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rsubw instruction of the RISC-V RV64PZicsr extension for the rsubw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",rsubw)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x28, rs2==x12, rd==x28, rs1_w0_val == -2147483648, rs2_w1_val == -1073741825, rs1_w1_val == 4096
// opcode: rsubw ; op1:x28; dest:x28; op1val:0x00100080000000;  immval:$imm_val
TEST_RR_OP(rsubw, x28, x28, x12, 0x0000000000000000, 0x00100080000000, 0xbffffffffffffffc, x2, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x14, rs2==x9, rd==x15, rs2_w1_val == -1431655766, rs2_w0_val == 536870912, rs1_w1_val == 64
// opcode: rsubw ; op1:x14; dest:x15; op1val:0x000040fffffff8;  immval:$imm_val
TEST_RR_OP(rsubw, x15, x14, x9, 0x0000000000000000, 0x000040fffffff8, 0xaaaaaaaa20000000, x2, 8, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x5, rs2==x5, rd==x9, rs2_w1_val == 1431655765, rs1_w1_val == -3, rs1_w0_val == 524288, rs2_w0_val == 1
// opcode: rsubw ; op1:x5; dest:x9; op1val:0xfffffffd00080000;  immval:$imm_val
TEST_RR_OP(rsubw, x9, x5, x5, 0x0000000000000000, 0xfffffffd00080000, 0x5555555500000001, x2, 16, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs2_w1_val == 2147483647, rs1_w0_val == 1073741824, rs1_w1_val == 134217728
// opcode: rsubw ; op1:x6; dest:x6; op1val:0x800000040000000;  immval:$imm_val
TEST_RR_OP(rsubw, x6, x6, x6, 0x0000000000000000, 0x800000040000000, 0x7fffffff20000000, x2, 24, x3)

inst_4:
// rs2 == rd != rs1, rs1==x4, rs2==x31, rd==x31, rs2_w1_val == -536870913, rs1_w1_val == 512, rs2_w0_val == 262144, rs1_w0_val == 16777216
// opcode: rsubw ; op1:x4; dest:x31; op1val:0x00020001000000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x4, x31, 0x0000000000000000, 0x00020001000000, 0xdfffffff00040000, x2, 32, x3)

inst_5:
// rs1==x21, rs2==x13, rd==x11, rs2_w1_val == -268435457, rs2_w0_val == -9, rs1_w0_val == 262144
// opcode: rsubw ; op1:x21; dest:x11; op1val:0x800000000040000;  immval:$imm_val
TEST_RR_OP(rsubw, x11, x21, x13, 0x0000000000000000, 0x800000000040000, 0xeffffffffffffff7, x2, 40, x3)

inst_6:
// rs1==x19, rs2==x4, rd==x20, rs2_w1_val == -134217729, rs2_w0_val == -65, rs1_w0_val == 0, rs1_w1_val == -2049
// opcode: rsubw ; op1:x19; dest:x20; op1val:0xfffff7ff00000000;  immval:$imm_val
TEST_RR_OP(rsubw, x20, x19, x4, 0x0000000000000000, 0xfffff7ff00000000, 0xf7ffffffffffffbf, x2, 48, x3)

inst_7:
// rs1==x31, rs2==x16, rd==x18, rs2_w1_val == -67108865, rs1_w1_val == 1024, rs1_w0_val == -2097153, rs2_w0_val == -4097
// opcode: rsubw ; op1:x31; dest:x18; op1val:0x000400ffdfffff;  immval:$imm_val
TEST_RR_OP(rsubw, x18, x31, x16, 0x0000000000000000, 0x000400ffdfffff, 0xfbffffffffffefff, x2, 56, x3)

inst_8:
// rs1==x8, rs2==x19, rd==x23, rs2_w1_val == -33554433, rs1_w0_val == 134217728, rs2_w0_val == 128
// opcode: rsubw ; op1:x8; dest:x23; op1val:0xfffffffc08000000;  immval:$imm_val
TEST_RR_OP(rsubw, x23, x8, x19, 0x0000000000000000, 0xfffffffc08000000, 0xfdffffff00000080, x2, 64, x3)

inst_9:
// rs1==x1, rs2==x21, rd==x17, rs2_w1_val == -16777217, rs1_w1_val == -8193
// opcode: rsubw ; op1:x1; dest:x17; op1val:0xffffdfffffdfffff;  immval:$imm_val
TEST_RR_OP(rsubw, x17, x1, x21, 0x0000000000000000, 0xffffdfffffdfffff, 0xfeffffff00040000, x2, 72, x3)

inst_10:
// rs1==x24, rs2==x25, rd==x16, rs2_w1_val == -8388609, rs1_w1_val == 0, rs2_w0_val == -257, rs1_w0_val == -2049
// opcode: rsubw ; op1:x24; dest:x16; op1val:0x000000fffff7ff;  immval:$imm_val
TEST_RR_OP(rsubw, x16, x24, x25, 0x0000000000000000, 0x000000fffff7ff, 0xff7ffffffffffeff, x2, 80, x3)

inst_11:
// rs1==x27, rs2==x0, rd==x29, rs2_w1_val == -4194305, rs1_w1_val == -129
// opcode: rsubw ; op1:x27; dest:x29; op1val:0xffffff7f40000000;  immval:$imm_val
TEST_RR_OP(rsubw, x29, x27, x0, 0x0000000000000000, 0xffffff7f40000000, 0xffbffffffffffff7, x2, 88, x3)

inst_12:
// rs1==x12, rs2==x8, rd==x19, rs2_w1_val == -2097153, rs2_w0_val == -1073741825, rs1_w0_val == -536870913, rs1_w1_val == -257
// opcode: rsubw ; op1:x12; dest:x19; op1val:0xfffffeffdfffffff;  immval:$imm_val
TEST_RR_OP(rsubw, x19, x12, x8, 0x0000000000000000, 0xfffffeffdfffffff, 0xffdfffffbfffffff, x2, 96, x3)

inst_13:
// rs1==x20, rs2==x26, rd==x24, rs2_w1_val == -1048577, rs2_w0_val == 4096
// opcode: rsubw ; op1:x20; dest:x24; op1val:0x3ffffffffffff7ff;  immval:$imm_val
TEST_RR_OP(rsubw, x24, x20, x26, 0x0000000000000000, 0x3ffffffffffff7ff, 0xffefffff00001000, x2, 104, x3)

inst_14:
// rs1==x15, rs2==x29, rd==x12, rs2_w1_val == -524289, rs1_w1_val == 4, rs2_w0_val == -65537
// opcode: rsubw ; op1:x15; dest:x12; op1val:0x00000400000007;  immval:$imm_val
TEST_RR_OP(rsubw, x12, x15, x29, 0x0000000000000000, 0x00000400000007, 0xfff7fffffffeffff, x2, 112, x3)

inst_15:
// rs1==x13, rs2==x23, rd==x25, rs2_w1_val == -262145, rs1_w1_val == 16384, rs1_w0_val == -1025
// opcode: rsubw ; op1:x13; dest:x25; op1val:0x004000fffffbff;  immval:$imm_val
TEST_RR_OP(rsubw, x25, x13, x23, 0x0000000000000000, 0x004000fffffbff, 0xfffbfffffffffffa, x2, 120, x3)

inst_16:
// rs1==x17, rs2==x7, rd==x1, rs2_w1_val == -131073, rs1_w0_val == -65, rs1_w1_val == -8388609
// opcode: rsubw ; op1:x17; dest:x1; op1val:0xff7fffffffffffbf;  immval:$imm_val
TEST_RR_OP(rsubw, x1, x17, x7, 0x0000000000000000, 0xff7fffffffffffbf, 0xfffdfffffffffffc, x2, 128, x3)

inst_17:
// rs1==x9, rs2==x1, rd==x30, rs2_w1_val == -65537, rs1_w1_val == 268435456, rs1_w0_val == -129
// opcode: rsubw ; op1:x9; dest:x30; op1val:0x10000000ffffff7f;  immval:$imm_val
TEST_RR_OP(rsubw, x30, x9, x1, 0x0000000000000000, 0x10000000ffffff7f, 0xfffeffff00000006, x2, 136, x6)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_18:
// rs1==x0, rs2==x15, rd==x21, rs2_w1_val == -32769, rs1_w1_val == 2097152, rs2_w0_val == -2, rs1_w0_val == -257
// opcode: rsubw ; op1:x0; dest:x21; op1val:0x200000fffffeff;  immval:$imm_val
TEST_RR_OP(rsubw, x21, x0, x15, 0x0000000000000000, 0x200000fffffeff, 0xffff7ffffffffffe, x1, 0, x6)

inst_19:
// rs1==x11, rs2==x20, rd==x22, rs2_w1_val == -16385, rs1_w1_val == 16
// opcode: rsubw ; op1:x11; dest:x22; op1val:0x000010fffff7ff;  immval:$imm_val
TEST_RR_OP(rsubw, x22, x11, x20, 0x0000000000000000, 0x000010fffff7ff, 0xffffbfff20000000, x1, 8, x6)

inst_20:
// rs1==x30, rs2==x18, rd==x2, rs2_w1_val == -8193, rs2_w0_val == -536870913, rs1_w1_val == 1073741824
// opcode: rsubw ; op1:x30; dest:x2; op1val:0x4000000000000000;  immval:$imm_val
TEST_RR_OP(rsubw, x2, x30, x18, 0x0000000000000000, 0x4000000000000000, 0xffffdfffdfffffff, x1, 16, x6)

inst_21:
// rs1==x26, rs2==x17, rd==x13, rs2_w1_val == -4097, rs2_w0_val == -8193, rs1_w1_val == -33554433, rs1_w0_val == 67108864
// opcode: rsubw ; op1:x26; dest:x13; op1val:0xfdffffff04000000;  immval:$imm_val
TEST_RR_OP(rsubw, x13, x26, x17, 0x0000000000000000, 0xfdffffff04000000, 0xffffefffffffdfff, x1, 24, x6)

inst_22:
// rs1==x10, rs2==x2, rd==x26, rs2_w1_val == -2049, rs2_w0_val == -17
// opcode: rsubw ; op1:x10; dest:x26; op1val:0xc000000000000006;  immval:$imm_val
TEST_RR_OP(rsubw, x26, x10, x2, 0x0000000000000000, 0xc000000000000006, 0xfffff7ffffffffef, x1, 32, x6)

inst_23:
// rs1==x29, rs2==x24, rd==x7, rs2_w1_val == -1025, rs1_w0_val == -16385, rs2_w0_val == -134217729
// opcode: rsubw ; op1:x29; dest:x7; op1val:0x004000ffffbfff;  immval:$imm_val
TEST_RR_OP(rsubw, x7, x29, x24, 0x0000000000000000, 0x004000ffffbfff, 0xfffffbfff7ffffff, x1, 40, x6)

inst_24:
// rs1==x3, rs2==x30, rd==x0, rs2_w1_val == -513, 
// opcode: rsubw ; op1:x3; dest:x0; op1val:0x10000000fffff7ff;  immval:$imm_val
TEST_RR_OP(rsubw, x0, x3, x30, 0x0000000000000000, 0x10000000fffff7ff, 0xfffffdfffffffeff, x1, 48, x6)

inst_25:
// rs1==x16, rs2==x14, rd==x5, rs2_w1_val == -257, rs1_w0_val == 512, rs1_w1_val == 536870912
// opcode: rsubw ; op1:x16; dest:x5; op1val:0x2000000000000200;  immval:$imm_val
TEST_RR_OP(rsubw, x5, x16, x14, 0x0000000000000000, 0x2000000000000200, 0xfffffefffffffff7, x1, 56, x6)

inst_26:
// rs1==x22, rs2==x10, rd==x4, rs2_w1_val == -129, rs2_w0_val == 512, rs1_w0_val == -2, rs1_w1_val == -134217729
// opcode: rsubw ; op1:x22; dest:x4; op1val:0xf7fffffffffffffe;  immval:$imm_val
TEST_RR_OP(rsubw, x4, x22, x10, 0x0000000000000000, 0xf7fffffffffffffe, 0xffffff7f00000200, x1, 64, x6)

inst_27:
// rs1==x23, rs2==x22, rd==x10, rs2_w1_val == -65, 
// opcode: rsubw ; op1:x23; dest:x10; op1val:0x000010fffffffc;  immval:$imm_val
TEST_RR_OP(rsubw, x10, x23, x22, 0x0000000000000000, 0x000010fffffffc, 0xffffffbffffffff6, x1, 72, x6)

inst_28:
// rs1==x18, rs2==x27, rd==x3, rs2_w1_val == -33, rs2_w0_val == 8192, rs1_w0_val == -268435457, rs1_w1_val == 8
// opcode: rsubw ; op1:x18; dest:x3; op1val:0x000008efffffff;  immval:$imm_val
TEST_RR_OP(rsubw, x3, x18, x27, 0x0000000000000000, 0x000008efffffff, 0xffffffdf00002000, x1, 80, x6)

inst_29:
// rs1==x7, rs2==x11, rd==x14, rs2_w1_val == -17, rs2_w0_val == -33554433
// opcode: rsubw ; op1:x7; dest:x14; op1val:0x00020040000000;  immval:$imm_val
TEST_RR_OP(rsubw, x14, x7, x11, 0x0000000000000000, 0x00020040000000, 0xffffffeffdffffff, x1, 88, x6)

inst_30:
// rs1==x2, rs2==x3, rd==x27, rs2_w1_val == -9, rs2_w0_val == -131073
// opcode: rsubw ; op1:x2; dest:x27; op1val:0xffffdfff00040000;  immval:$imm_val
TEST_RR_OP(rsubw, x27, x2, x3, 0x0000000000000000, 0xffffdfff00040000, 0xfffffff7fffdffff, x1, 96, x6)

inst_31:
// rs1==x25, rs2==x28, rd==x8, rs2_w1_val == -5, rs1_w0_val == 256
// opcode: rsubw ; op1:x25; dest:x8; op1val:0x2000000000000100;  immval:$imm_val
TEST_RR_OP(rsubw, x8, x25, x28, 0x0000000000000000, 0x2000000000000100, 0xfffffffb00000200, x1, 104, x6)

inst_32:
// rs2_w1_val == -3, rs2_w0_val == -513, rs1_w1_val == -536870913
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xdffffffffffffff8;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffff8, 0xfffffffdfffffdff, x1, 112, x2)

inst_33:
// rs2_w1_val == -2, rs1_w1_val == 1
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x000001fffffff6;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x000001fffffff6, 0xfffffffe00000080, x1, 120, x2)

inst_34:
// rs2_w1_val == -2147483648, rs1_w0_val == 32, rs1_w1_val == -4194305, rs2_w0_val == 1024
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xffbfffff00000020;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000020, 0x8000000000000400, x1, 128, x2)

inst_35:
// rs2_w1_val == 1073741824, rs2_w0_val == 64, rs1_w0_val == 2097152, rs1_w1_val == 65536
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x01000000200000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x01000000200000, 0x4000000000000040, x1, 136, x2)

inst_36:
// rs2_w1_val == 536870912, rs1_w1_val == -33, rs1_w0_val == 64
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xffffffdf00000040;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000040, 0x20000000ffffffbf, x1, 144, x2)

inst_37:
// rs2_w1_val == 268435456, rs2_w0_val == -1, rs1_w0_val == 128
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffff7ff00000080;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000080, 0x10000000ffffffff, x1, 152, x2)

inst_38:
// rs2_w1_val == 134217728, rs1_w0_val == -1073741825, rs1_w1_val == -1431655766, rs2_w0_val == -5
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xaaaaaaaabfffffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaabfffffff, 0x8000000fffffffb, x1, 160, x2)

inst_39:
// rs2_w1_val == 67108864, rs1_w1_val == -65537, rs2_w0_val == 256
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffeffffefffffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffeffffefffffff, 0x400000000000100, x1, 168, x2)

inst_40:
// rs2_w1_val == 33554432, rs2_w0_val == 1048576, rs1_w0_val == -67108865
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x000001fbffffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x000001fbffffff, 0x200000000100000, x1, 176, x2)

inst_41:
// rs2_w1_val == 16777216, rs2_w0_val == -16385, rs1_w1_val == -67108865
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfbfffffffffffffa;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffffffa, 0x1000000ffffbfff, x1, 184, x2)

inst_42:
// rs2_w1_val == 8388608, rs1_w1_val == -2, rs1_w0_val == -9, rs2_w0_val == -32769
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffffffefffffff7;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffffffefffffff7, 0x800000ffff7fff, x1, 192, x2)

inst_43:
// rs2_w1_val == 4194304, rs1_w1_val == 8388608, rs1_w0_val == 33554432
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x80000002000000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x80000002000000, 0x400000fffffff8, x1, 200, x2)

inst_44:
// rs2_w1_val == 2097152, rs1_w0_val == 1431655765
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffff7ff55555555;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffff7ff55555555, 0x200000ffffbfff, x1, 208, x2)

inst_45:
// rs2_w1_val == 1048576, rs1_w0_val == 1
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x00040000000001;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x00040000000001, 0x10000000100000, x1, 216, x2)

inst_46:
// rs2_w1_val == 524288, rs1_w1_val == -524289
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfff7ffff00000100;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000100, 0x080000ffffdfff, x1, 224, x2)

inst_47:
// rs2_w1_val == 262144, rs2_w0_val == -2097153, rs1_w0_val == 2048
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffffff900000800;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffffff900000800, 0x040000ffdfffff, x1, 232, x2)

inst_48:
// rs2_w1_val == 131072, rs2_w0_val == 1073741824, rs1_w1_val == -1, rs1_w0_val == -16777217
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffffffffeffffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffffffffeffffff, 0x02000040000000, x1, 240, x2)

inst_49:
// rs2_w1_val == 65536, rs1_w1_val == 2147483647, rs2_w0_val == 2, rs1_w0_val == -8388609
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x7fffffffff7fffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x7fffffffff7fffff, 0x01000000000002, x1, 248, x2)

inst_50:
// rs1_w0_val == 8192, rs2_w0_val == 33554432, rs1_w1_val == -4097
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xffffefff00002000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xffffefff00002000, 0xc000000002000000, x1, 256, x2)

inst_51:
// rs1_w0_val == 4096, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x00000400001000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x00000400001000, 0xfffffdffffffdfff, x1, 264, x2)

inst_52:
// rs1_w0_val == 1024, rs2_w0_val == 4194304
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffffff800000400;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffffff800000400, 0xfffffff800400000, x1, 272, x2)

inst_53:
// rs1_w0_val == 16, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xc000000000000010;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xc000000000000010, 0x7ffffffffdffffff, x1, 280, x2)

inst_54:
// rs1_w0_val == 8, rs2_w0_val == -3
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x7fffffff00000008;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000008, 0xfffff7fffffffffd, x1, 288, x2)

inst_55:
// rs1_w0_val == 4, rs2_w1_val == 0, rs2_w0_val == 2147483647
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x1000000000000004;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x1000000000000004, 0x0000007fffffff, x1, 296, x2)

inst_56:
// rs1_w0_val == 2, rs2_w0_val == -524289
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x00000100000002;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x00000100000002, 0xfffffefffff7ffff, x1, 304, x2)

inst_57:
// rs1_w0_val == -1, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x000001ffffffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x000001ffffffff, 0x4000000000000080, x1, 312, x2)

inst_58:
// rs2_w1_val == 32768, rs1_w0_val == 16384
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x20000000004000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x20000000004000, 0x008000ffffffef, x1, 320, x2)

inst_59:
// rs2_w1_val == 16384, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x3fffffff00000005;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000005, 0x004000fffffdff, x1, 328, x2)

inst_60:
// rs2_w1_val == 8192, rs1_w1_val == 32
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x000020fffffff8;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x000020fffffff8, 0x002000ffffbfff, x1, 336, x2)

inst_61:
// rs2_w1_val == 4096, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x2000000000000800;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x2000000000000800, 0x001000ffffefff, x1, 344, x2)

inst_62:
// rs2_w1_val == 2048, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfff7ffff00000008;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000008, 0x00080000000007, x1, 352, x2)

inst_63:
// rs2_w1_val == 1024, rs2_w0_val == 2097152, rs1_w0_val == -5
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x800000fffffffb;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x800000fffffffb, 0x00040000200000, x1, 360, x2)

inst_64:
// rs2_w1_val == 512, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffffffe00000000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000000, 0x000200f7ffffff, x1, 368, x2)

inst_65:
// rs2_w1_val == 256, rs1_w1_val == 262144
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x040000fffffff6;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x040000fffffff6, 0x000100ffffbfff, x1, 376, x2)

inst_66:
// rs2_w1_val == 128, rs1_w0_val == -513, rs1_w1_val == -9
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffffff7fffffdff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffffdff, 0x000080bfffffff, x1, 384, x2)

inst_67:
// rs2_w1_val == 64, rs1_w0_val == -33554433
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xaaaaaaaafdffffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafdffffff, 0x000040fffffffc, x1, 392, x2)

inst_68:
// rs2_w1_val == 32, rs1_w1_val == -268435457
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xeffffffffffffffc;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xeffffffffffffffc, 0x00002000000400, x1, 400, x2)

inst_69:
// rs2_w1_val == 16, rs1_w1_val == -262145, rs1_w0_val == 1048576, rs2_w0_val == -262145
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffbffff00100000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffbffff00100000, 0x000010fffbffff, x1, 408, x2)

inst_70:
// rs2_w1_val == 8, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffefffffffff7ff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffefffffffff7ff, 0x000008fffffffe, x1, 416, x2)

inst_71:
// rs2_w1_val == 4, rs1_w0_val == 8388608
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffffffc00800000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffffffc00800000, 0x000004bfffffff, x1, 424, x2)

inst_72:
// rs2_w1_val == 2, rs2_w0_val == -4194305
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x00100000100000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x00100000100000, 0x000002ffbfffff, x1, 432, x2)

inst_73:
// rs2_w1_val == 1, rs2_w0_val == 16384
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x00000600100000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x00000600100000, 0x00000100004000, x1, 440, x2)

inst_74:
// rs2_w1_val == -1, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfbfffffffffffff6;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffffff6, 0xfffffffffffffffd, x1, 448, x2)

inst_75:
// rs2_w0_val == -1431655766, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x00004000000007;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x00004000000007, 0x7fffffffaaaaaaaa, x1, 456, x2)

inst_76:
// rs2_w0_val == 1431655765, rs1_w1_val == 524288
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x08000001000000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x08000001000000, 0xaaaaaaaa55555555, x1, 464, x2)

inst_77:
// rs2_w0_val == -268435457, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x040000fdffffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x040000fdffffff, 0x000200efffffff, x1, 472, x2)

inst_78:
// rs2_w0_val == -67108865, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x20000000fdffffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x20000000fdffffff, 0xc0000000fbffffff, x1, 480, x2)

inst_79:
// rs2_w0_val == -16777217, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xffffff7ffffffff9;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffff9, 0x800000feffffff, x1, 488, x2)

inst_80:
// rs2_w0_val == -8388609, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffffff700000800;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffffff700000800, 0xfffffff9ff7fffff, x1, 496, x2)

inst_81:
// rs2_w0_val == -1048577, rs1_w1_val == -513
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffffdff00000003;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000003, 0x000005ffefffff, x1, 504, x2)

inst_82:
// rs2_w0_val == -2049, rs1_w0_val == 2147483647
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffffff97fffffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffffff97fffffff, 0x000008fffff7ff, x1, 512, x2)

inst_83:
// rs2_w0_val == -1025, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xff7fffff55555555;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xff7fffff55555555, 0x000002fffffbff, x1, 520, x2)

inst_84:
// rs2_w0_val == 32, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xffffffdffffffffa;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffffa, 0xfffffffb00000020, x1, 528, x2)

inst_85:
// rs2_w0_val == 16, rs1_w0_val == -131073, rs1_w1_val == -1048577
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xffeffffffffdffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xffeffffffffdffff, 0xfffff7ff00000010, x1, 536, x2)

inst_86:
// rs2_w0_val == 8, rs1_w1_val == 32768
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x00800000004000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x00800000004000, 0x08000000000008, x1, 544, x2)

inst_87:
// rs2_w0_val == 4, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffffdff00000009;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000009, 0xffff7fff00000004, x1, 552, x2)

inst_88:
// rs2_w0_val == 0, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffffff800800000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffffff800800000, 0x00000600000000, x1, 560, x2)

inst_89:
// rs1_w1_val == 1431655765, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x5555555500800000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x5555555500800000, 0x1000000f7ffffff, x1, 568, x2)

inst_90:
// rs1_w1_val == -1073741825, rs1_w0_val == 131072
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xbfffffff00020000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xbfffffff00020000, 0x001000fffffffa, x1, 576, x2)

inst_91:
// rs1_w1_val == -16777217, rs1_w0_val == 536870912, rs2_w0_val == 65536
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfeffffff20000000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfeffffff20000000, 0x3fffffff00010000, x1, 584, x2)

inst_92:
// rs1_w1_val == -2097153, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xffdffffffdffffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xffdffffffdffffff, 0x8000000000000004, x1, 592, x2)

inst_93:
// rs1_w1_val == -131073, rs2_w0_val == 134217728
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffdffff40000000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffdffff40000000, 0x00000908000000, x1, 600, x2)

inst_94:
// rs1_w1_val == -32769, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xffff7fff40000000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xffff7fff40000000, 0x000009f7ffffff, x1, 608, x2)

inst_95:
// rs1_w1_val == -16385, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xffffbfff00000020;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000020, 0x00000100000002, x1, 616, x2)

inst_96:
// rs1_w1_val == -1025, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffffbff00000006;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000006, 0x00040000001000, x1, 624, x2)

inst_97:
// rs1_w1_val == -65, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xffffffbfffffffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xffffffbfffffffff, 0x1000000ffffffff, x1, 632, x2)

inst_98:
// rs1_w1_val == -17, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xffffffeffffff7ff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xffffffeffffff7ff, 0x000000fffffff6, x1, 640, x2)

inst_99:
// rs1_w1_val == -5, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffffffbfffdffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffdffff, 0x000001ffffdfff, x1, 648, x2)

inst_100:
// rs1_w1_val == -2147483648, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x80000000fffffdff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x80000000fffffdff, 0x7fffffffc0000000, x1, 656, x2)

inst_101:
// rs1_w1_val == 67108864, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x400000000020000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x400000000020000, 0xfffffbfffff7ffff, x1, 664, x2)

inst_102:
// rs1_w1_val == 33554432, rs2_w0_val == -33
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x200000000000080;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x200000000000080, 0x1000000ffffffdf, x1, 672, x2)

inst_103:
// rs1_w1_val == 16777216, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x100000000000020;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x100000000000020, 0xffffdfff3fffffff, x1, 680, x2)

inst_104:
// rs1_w1_val == 4194304, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x400000fffff7ff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x400000fffff7ff, 0xffffffdffdffffff, x1, 688, x2)

inst_105:
// rs1_w1_val == 1048576, rs2_w0_val == -2147483648
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x100000fffffffe;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x100000fffffffe, 0x00040080000000, x1, 696, x2)

inst_106:
// rs1_w1_val == 131072, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x020000feffffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x020000feffffff, 0x020000aaaaaaaa, x1, 704, x2)

inst_107:
// rs1_w1_val == 256, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x000100ffffffbf;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x000100ffffffbf, 0x40000000fffffffd, x1, 712, x2)

inst_108:
// rs1_w1_val == 128, rs1_w0_val == -8193
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x000080ffffdfff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x000080ffffdfff, 0xffeffffffff7ffff, x1, 720, x2)

inst_109:
// rs1_w1_val == 2, rs1_w0_val == -262145
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x000002fffbffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x000002fffbffff, 0xfffdffffffff7fff, x1, 728, x2)

inst_110:
// rs1_w0_val == -1431655766, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x000008aaaaaaaa;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x000008aaaaaaaa, 0x000020efffffff, x1, 736, x2)

inst_111:
// rs1_w0_val == -134217729, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xff7ffffff7ffffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xff7ffffff7ffffff, 0x55555555fffeffff, x1, 744, x2)

inst_112:
// rs1_w1_val == 8192, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x00200008000000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x00200008000000, 0x002000fffff7ff, x1, 752, x2)

inst_113:
// rs2_w0_val == 32768, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xf7ffffff08000000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xf7ffffff08000000, 0x00000800008000, x1, 760, x2)

inst_114:
// rs1_w0_val == -4194305, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x800000ffbfffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x800000ffbfffff, 0xc0000000fffffffd, x1, 768, x2)

inst_115:
// rs1_w0_val == -1048577, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x3fffffffffefffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x3fffffffffefffff, 0xeffffffffffffff8, x1, 776, x2)

inst_116:
// rs1_w0_val == -524289, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x800000fff7ffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x800000fff7ffff, 0x00008000000020, x1, 784, x2)

inst_117:
// rs1_w0_val == -65537, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x000007fffeffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x000007fffeffff, 0xfffffffeffbfffff, x1, 792, x2)

inst_118:
// rs2_w0_val == -129, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffff7fffffffbff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffffbff, 0xfeffffffffffff7f, x1, 800, x2)

inst_119:
// rs1_w0_val == -32769, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x8000000ffff7fff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x8000000ffff7fff, 0xfffffffe00200000, x1, 808, x2)

inst_120:
// rs1_w0_val == -4097, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x000100ffffefff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x000100ffffefff, 0xffdfffff7fffffff, x1, 816, x2)

inst_121:
// rs1_w0_val == -33, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xffffbfffffffffdf;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xffffbfffffffffdf, 0xfffffff9ffffffdf, x1, 824, x2)

inst_122:
// rs2_w0_val == 268435456, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x000020ff7fffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x000020ff7fffff, 0x00000410000000, x1, 832, x2)

inst_123:
// rs1_w0_val == -17, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x000100ffffffef;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x000100ffffffef, 0x40000000dfffffff, x1, 840, x2)

inst_124:
// rs2_w0_val == 67108864, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x000040aaaaaaaa;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x000040aaaaaaaa, 0x00001004000000, x1, 848, x2)

inst_125:
// rs1_w0_val == -3, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x000040fffffffd;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x000040fffffffd, 0xffffffdf00000005, x1, 856, x2)

inst_126:
// rs2_w0_val == 16777216, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfbfffffffffffffc;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffffffc, 0xffffff7f01000000, x1, 864, x2)

inst_127:
// rs2_w0_val == 8388608, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffffefffffffeff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffeff, 0xefffffff00800000, x1, 872, x2)

inst_128:
// rs1_w0_val == 268435456, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffdffff10000000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffdffff10000000, 0x8000000fffffff8, x1, 880, x2)

inst_129:
// rs2_w0_val == 524288, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x000003c0000000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x000003c0000000, 0x80000000080000, x1, 888, x2)

inst_130:
// rs2_w0_val == 131072, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x800000000000003;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x800000000000003, 0xffdfffff00020000, x1, 896, x2)

inst_131:
// rs1_w0_val == 4194304, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffffff900400000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffffff900400000, 0x000006fffffffe, x1, 904, x2)

inst_132:
// rs2_w0_val == 2048, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xffffefff7fffffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xffffefff7fffffff, 0xffffefff00000800, x1, 912, x2)

inst_133:
// rs1_w0_val == 65536, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfbffffff00010000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfbffffff00010000, 0x01000000000000, x1, 920, x2)

inst_134:
// rs1_w0_val == 32768, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x80000000008000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x80000000008000, 0xfbfffffffffffbff, x1, 928, x2)

inst_135:
// rs1_w1_val == 2048, 
// opcode: rsubw ; op1:x30; dest:x31; op1val:0x000800fdffffff;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0x000800fdffffff, 0xfffff7ff00008000, x1, 936, x2)

inst_136:
// rs2_w1_val == 1431655765, rs1_w1_val == -3, rs1_w0_val == 524288, rs2_w0_val == 1
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xfffffffd00080000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xfffffffd00080000, 0x5555555500000001, x1, 944, x2)

inst_137:
// rs2_w1_val == -4194305, rs1_w1_val == -129
// opcode: rsubw ; op1:x30; dest:x31; op1val:0xffffff7f40000000;  immval:$imm_val
TEST_RR_OP(rsubw, x31, x30, x29, 0x0000000000000000, 0xffffff7f40000000, 0xffbffffffffffff7, x1, 952, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 120*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
