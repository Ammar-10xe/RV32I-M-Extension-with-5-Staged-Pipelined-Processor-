
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kslra8 instruction of the RISC-V RV64PZicsr extension for the kslra8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kslra8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 == rd != rs2, rs1==x15, rs2==x9, rd==x15, rs2_val == 6148914691236517205, rs1_b3_val == -1, rs1_b1_val == 64, rs1_b2_val == -128, rs1_b7_val == 0, rs1_b5_val == 4, rs1_b6_val == -2
// opcode: kslra8 ; op1:x15; op2:x9; dest:x15; op1val:0xfe0405ff804009;  op2val:0x5555555555555555
TEST_PKRR_OP(kslra8, x15, x15, x9, 0x0000000000000000, 0xfe0405ff804009, 0x5555555555555555, x15, x4, 0, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x3, rs2==x1, rd==x23, rs2_val == 9223372036854775807, rs1_b4_val == -17, rs1_b1_val == 16, rs1_b2_val == -17, rs1_b5_val == -5, rs1_b3_val == -9, rs1_b0_val == 4
// opcode: kslra8 ; op1:x3; op2:x1; dest:x23; op1val:0xfa03fbeff7ef1004;  op2val:0x7fffffffffffffff
TEST_PKRR_OP(kslra8, x23, x3, x1, 0x0000000000000000, 0xfa03fbeff7ef1004, 0x7fffffffffffffff, x3, x4, 16, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x11, rs2==x11, rd==x6, rs2_val == -4611686018427387905, rs1_b5_val == -3, rs1_b1_val == -2, rs1_b6_val == -9, rs1_b0_val == 85
// opcode: kslra8 ; op1:x11; op2:x11; dest:x6; op1val:0xfaf7fdfcf6effe55;  op2val:0xbfffffffffffffff
TEST_PKRR_OP(kslra8, x6, x11, x11, 0x0000000000000000, 0xfaf7fdfcf6effe55, 0xbfffffffffffffff, x11, x4, 32, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x22, rs2==x22, rd==x22, rs2_val == -2305843009213693953, rs1_b6_val == 8, rs1_b7_val == -65, rs1_b2_val == -1, rs1_b5_val == 2, rs1_b3_val == -128, rs1_b4_val == 127
// opcode: kslra8 ; op1:x22; op2:x22; dest:x22; op1val:0xbf08027f80fffa09;  op2val:0xdfffffffffffffff
TEST_PKRR_OP(kslra8, x22, x22, x22, 0x0000000000000000, 0xbf08027f80fffa09, 0xdfffffffffffffff, x22, x4, 48, x8)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x31, rd==x31, rs2_val == -1152921504606846977, rs1_b5_val == 1, rs1_b1_val == -5, rs1_b6_val == -17, rs1_b0_val == -2
// opcode: kslra8 ; op1:x5; op2:x31; dest:x31; op1val:0xef017f0907fbfe;  op2val:0xefffffffffffffff
TEST_PKRR_OP(kslra8, x31, x5, x31, 0x0000000000000000, 0xef017f0907fbfe, 0xefffffffffffffff, x5, x4, 64, x8)

inst_5:
// rs1==x10, rs2==x15, rd==x12, rs2_val == -576460752303423489, rs1_b0_val == -65, rs1_b7_val == 2, rs1_b4_val == 1, rs1_b2_val == 127
// opcode: kslra8 ; op1:x10; op2:x15; dest:x12; op1val:0x2f93f01077ffcbf;  op2val:0xf7ffffffffffffff
TEST_PKRR_OP(kslra8, x12, x10, x15, 0x0000000000000000, 0x2f93f01077ffcbf, 0xf7ffffffffffffff, x10, x4, 80, x8)

inst_6:
// rs1==x12, rs2==x3, rd==x24, rs2_val == -288230376151711745, rs1_b1_val == 32, rs1_b7_val == -1, rs1_b0_val == 2, rs1_b6_val == -5, rs1_b4_val == -86, rs1_b3_val == 16
// opcode: kslra8 ; op1:x12; op2:x3; dest:x24; op1val:0xfffb09aa10062002;  op2val:0xfbffffffffffffff
TEST_PKRR_OP(kslra8, x24, x12, x3, 0x0000000000000000, 0xfffb09aa10062002, 0xfbffffffffffffff, x12, x4, 96, x8)

inst_7:
// rs1==x21, rs2==x12, rd==x14, rs2_val == -144115188075855873, rs1_b4_val == -2, rs1_b1_val == 4, rs1_b0_val == -86, rs1_b3_val == 127, rs1_b2_val == 1
// opcode: kslra8 ; op1:x21; op2:x12; dest:x14; op1val:0x60602fe7f0104aa;  op2val:0xfdffffffffffffff
TEST_PKRR_OP(kslra8, x14, x21, x12, 0x0000000000000000, 0x60602fe7f0104aa, 0xfdffffffffffffff, x21, x4, 112, x8)

inst_8:
// rs1==x13, rs2==x17, rd==x5, rs2_val == -72057594037927937, rs1_b2_val == -33, rs1_b7_val == -2, rs1_b4_val == 4, rs1_b5_val == 0, rs1_b1_val == -9
// opcode: kslra8 ; op1:x13; op2:x17; dest:x5; op1val:0xfe090004fadff7aa;  op2val:0xfeffffffffffffff
TEST_PKRR_OP(kslra8, x5, x13, x17, 0x0000000000000000, 0xfe090004fadff7aa, 0xfeffffffffffffff, x13, x4, 128, x8)

inst_9:
// rs1==x7, rs2==x16, rd==x19, rs2_val == -36028797018963969, rs1_b6_val == 64, rs1_b2_val == -5, rs1_b5_val == -9, rs1_b1_val == -65, rs1_b0_val == 0
// opcode: kslra8 ; op1:x7; op2:x16; dest:x19; op1val:0xf840f70110fbbf00;  op2val:0xff7fffffffffffff
TEST_PKRR_OP(kslra8, x19, x7, x16, 0x0000000000000000, 0xf840f70110fbbf00, 0xff7fffffffffffff, x7, x4, 144, x8)

inst_10:
// rs1==x28, rs2==x27, rd==x29, rs2_val == -18014398509481985, rs1_b4_val == -65, rs1_b7_val == -17, rs1_b1_val == 8, rs1_b5_val == 85, rs1_b2_val == 4, rs1_b0_val == 16
// opcode: kslra8 ; op1:x28; op2:x27; dest:x29; op1val:0xef0855bf07040810;  op2val:0xffbfffffffffffff
TEST_PKRR_OP(kslra8, x29, x28, x27, 0x0000000000000000, 0xef0855bf07040810, 0xffbfffffffffffff, x28, x4, 160, x8)

inst_11:
// rs1==x16, rs2==x25, rd==x10, rs2_val == -9007199254740993, rs1_b7_val == -5, rs1_b3_val == -2, rs1_b5_val == 16
// opcode: kslra8 ; op1:x16; op2:x25; dest:x10; op1val:0xfb3f1001fe09f73f;  op2val:0xffdfffffffffffff
TEST_PKRR_OP(kslra8, x10, x16, x25, 0x0000000000000000, 0xfb3f1001fe09f73f, 0xffdfffffffffffff, x16, x4, 176, x8)

inst_12:
// rs1==x2, rs2==x23, rd==x20, rs2_val == -4503599627370497, rs1_b7_val == 4, rs1_b2_val == 32
// opcode: kslra8 ; op1:x2; op2:x23; dest:x20; op1val:0x4f7f9077f200504;  op2val:0xffefffffffffffff
TEST_PKRR_OP(kslra8, x20, x2, x23, 0x0000000000000000, 0x4f7f9077f200504, 0xffefffffffffffff, x2, x4, 192, x8)

inst_13:
// rs1==x1, rs2==x26, rd==x16, rs2_val == -2251799813685249, rs1_b1_val == 85, rs1_b5_val == -17, rs1_b0_val == -128
// opcode: kslra8 ; op1:x1; op2:x26; dest:x16; op1val:0x07efaafe205580;  op2val:0xfff7ffffffffffff
TEST_PKRR_OP(kslra8, x16, x1, x26, 0x0000000000000000, 0x07efaafe205580, 0xfff7ffffffffffff, x1, x4, 208, x10)
RVTEST_SIGBASE(x12,signature_x12_0)

inst_14:
// rs1==x19, rs2==x6, rd==x8, rs2_val == -1125899906842625, rs1_b3_val == 2, rs1_b1_val == 1, rs1_b4_val == -5
// opcode: kslra8 ; op1:x19; op2:x6; dest:x8; op1val:0xc04006fb0205013f;  op2val:0xfffbffffffffffff
TEST_PKRR_OP(kslra8, x8, x19, x6, 0x0000000000000000, 0xc04006fb0205013f, 0xfffbffffffffffff, x19, x12, 0, x10)

inst_15:
// rs1==x8, rs2==x4, rd==x3, rs2_val == -562949953421313, rs1_b5_val == -86, rs1_b3_val == 64, rs1_b6_val == -3, rs1_b2_val == -3
// opcode: kslra8 ; op1:x8; op2:x4; dest:x3; op1val:0x4fdaaf940fdbfbf;  op2val:0xfffdffffffffffff
TEST_PKRR_OP(kslra8, x3, x8, x4, 0x0000000000000000, 0x4fdaaf940fdbfbf, 0xfffdffffffffffff, x8, x12, 16, x10)

inst_16:
// rs1==x30, rs2==x24, rd==x27, rs2_val == -281474976710657, rs1_b7_val == -86, rs1_b2_val == 85, rs1_b5_val == 127, rs1_b0_val == 127, rs1_b3_val == -86
// opcode: kslra8 ; op1:x30; op2:x24; dest:x27; op1val:0xaafd7ff6aa553f7f;  op2val:0xfffeffffffffffff
TEST_PKRR_OP(kslra8, x27, x30, x24, 0x0000000000000000, 0xaafd7ff6aa553f7f, 0xfffeffffffffffff, x30, x12, 32, x10)

inst_17:
// rs1==x26, rs2==x14, rd==x18, rs2_val == -140737488355329, rs1_b4_val == -9, rs1_b7_val == 8
// opcode: kslra8 ; op1:x26; op2:x14; dest:x18; op1val:0x80855f7fadfbffe;  op2val:0xffff7fffffffffff
TEST_PKRR_OP(kslra8, x18, x26, x14, 0x0000000000000000, 0x80855f7fadfbffe, 0xffff7fffffffffff, x26, x12, 48, x10)

inst_18:
// rs1==x14, rs2==x18, rd==x30, rs2_val == -70368744177665, rs1_b0_val == -5
// opcode: kslra8 ; op1:x14; op2:x18; dest:x30; op1val:0xc0081009f80906fb;  op2val:0xffffbfffffffffff
TEST_PKRR_OP(kslra8, x30, x14, x18, 0x0000000000000000, 0xc0081009f80906fb, 0xffffbfffffffffff, x14, x12, 64, x10)

inst_19:
// rs1==x0, rs2==x8, rd==x25, rs2_val == -35184372088833, 
// opcode: kslra8 ; op1:x0; op2:x8; dest:x25; op1val:0x54009efc0fb40f6;  op2val:0xffffdfffffffffff
TEST_PKRR_OP(kslra8, x25, x0, x8, 0x0000000000000000, 0x54009efc0fb40f6, 0xffffdfffffffffff, x0, x12, 80, x10)

inst_20:
// rs1==x6, rs2==x13, rd==x17, rs2_val == -17592186044417, rs1_b6_val == 32, rs1_b7_val == 85, rs1_b2_val == 16
// opcode: kslra8 ; op1:x6; op2:x13; dest:x17; op1val:0x5520060106100106;  op2val:0xffffefffffffffff
TEST_PKRR_OP(kslra8, x17, x6, x13, 0x0000000000000000, 0x5520060106100106, 0xffffefffffffffff, x6, x12, 96, x10)

inst_21:
// rs1==x25, rs2==x30, rd==x13, rs2_val == -8796093022209, rs1_b6_val == -1, rs1_b0_val == -3, rs1_b2_val == 0
// opcode: kslra8 ; op1:x25; op2:x30; dest:x13; op1val:0x2ff02aafe0001fd;  op2val:0xfffff7ffffffffff
TEST_PKRR_OP(kslra8, x13, x25, x30, 0x0000000000000000, 0x2ff02aafe0001fd, 0xfffff7ffffffffff, x25, x12, 112, x10)

inst_22:
// rs1==x23, rs2==x20, rd==x9, rs2_val == -4398046511105, rs1_b1_val == -86, rs1_b3_val == 85, rs1_b4_val == 0
// opcode: kslra8 ; op1:x23; op2:x20; dest:x9; op1val:0xf6c003005500aa07;  op2val:0xfffffbffffffffff
TEST_PKRR_OP(kslra8, x9, x23, x20, 0x0000000000000000, 0xf6c003005500aa07, 0xfffffbffffffffff, x23, x12, 128, x10)

inst_23:
// rs1==x4, rs2==x2, rd==x11, rs2_val == -2199023255553, rs1_b0_val == -33, rs1_b3_val == -33
// opcode: kslra8 ; op1:x4; op2:x2; dest:x11; op1val:0xefef0603dfc0fcdf;  op2val:0xfffffdffffffffff
TEST_PKRR_OP(kslra8, x11, x4, x2, 0x0000000000000000, 0xefef0603dfc0fcdf, 0xfffffdffffffffff, x4, x12, 144, x10)

inst_24:
// rs1==x17, rs2==x5, rd==x7, rs2_val == -1099511627777, 
// opcode: kslra8 ; op1:x17; op2:x5; dest:x7; op1val:0x720eff6f88010f8;  op2val:0xfffffeffffffffff
TEST_PKRR_OP(kslra8, x7, x17, x5, 0x0000000000000000, 0x720eff6f88010f8, 0xfffffeffffffffff, x17, x12, 160, x10)

inst_25:
// rs1==x27, rs2==x21, rd==x26, rs2_val == -549755813889, rs1_b4_val == 32
// opcode: kslra8 ; op1:x27; op2:x21; dest:x26; op1val:0x9fc0420aaf93fbf;  op2val:0xffffff7fffffffff
TEST_PKRR_OP(kslra8, x26, x27, x21, 0x0000000000000000, 0x9fc0420aaf93fbf, 0xffffff7fffffffff, x27, x12, 176, x10)

inst_26:
// rs1==x20, rs2==x0, rd==x2, rs2_val == -274877906945, rs1_b7_val == -3, rs1_b4_val == -3, rs1_b1_val == -3
// opcode: kslra8 ; op1:x20; op2:x0; dest:x2; op1val:0xfdff05fd8000fdfb;  op2val:0x0
TEST_PKRR_OP(kslra8, x2, x20, x0, 0x0000000000000000, 0xfdff05fd8000fdfb, 0x0, x20, x12, 192, x10)

inst_27:
// rs1==x29, rs2==x19, rd==x21, rs2_val == -137438953473, rs1_b1_val == 2, rs1_b5_val == -1, rs1_b6_val == 0
// opcode: kslra8 ; op1:x29; op2:x19; dest:x21; op1val:0xbf00ffaa10df0210;  op2val:0xffffffdfffffffff
TEST_PKRR_OP(kslra8, x21, x29, x19, 0x0000000000000000, 0xbf00ffaa10df0210, 0xffffffdfffffffff, x29, x12, 208, x10)

inst_28:
// rs1==x9, rs2==x29, rd==x0, rs2_val == -68719476737, rs1_b3_val == 0, rs1_b5_val == 8
// opcode: kslra8 ; op1:x9; op2:x29; dest:x0; op1val:0x3f0008f900fdf910;  op2val:0xffffffefffffffff
TEST_PKRR_OP(kslra8, x0, x9, x29, 0x0000000000000000, 0x3f0008f900fdf910, 0xffffffefffffffff, x9, x12, 224, x10)

inst_29:
// rs1==x18, rs2==x7, rd==x4, rs2_val == -34359738369, rs1_b4_val == -33, rs1_b3_val == -17
// opcode: kslra8 ; op1:x18; op2:x7; dest:x4; op1val:0x6ffc0dfef0404f8;  op2val:0xfffffff7ffffffff
TEST_PKRR_OP(kslra8, x4, x18, x7, 0x0000000000000000, 0x6ffc0dfef0404f8, 0xfffffff7ffffffff, x18, x12, 240, x10)

inst_30:
// rs1==x24, rs2==x28, rd==x1, rs2_val == -17179869185, rs1_b3_val == 4, rs1_b5_val == -128
// opcode: kslra8 ; op1:x24; op2:x28; dest:x1; op1val:0xfbfe80f7047f0805;  op2val:0xfffffffbffffffff
TEST_PKRR_OP(kslra8, x1, x24, x28, 0x0000000000000000, 0xfbfe80f7047f0805, 0xfffffffbffffffff, x24, x12, 256, x10)

inst_31:
// rs1==x31, rs2==x10, rd==x28, rs2_val == -8589934593, rs1_b1_val == 0, rs1_b0_val == -1, rs1_b7_val == 127, rs1_b6_val == 2
// opcode: kslra8 ; op1:x31; op2:x10; dest:x28; op1val:0x7f0209fd550600ff;  op2val:0xfffffffdffffffff
TEST_PKRR_OP(kslra8, x28, x31, x10, 0x0000000000000000, 0x7f0209fd550600ff, 0xfffffffdffffffff, x31, x12, 272, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs2_val == -4294967297, rs1_b0_val == 64, rs1_b5_val == 64, rs1_b7_val == 32, rs1_b3_val == 8
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x2005407f08ef0940;  op2val:0xfffffffeffffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x2005407f08ef0940, 0xfffffffeffffffff, x30, x1, 0, x2)

inst_33:
// rs2_val == -2147483649, rs1_b0_val == 8
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x9fc08c0c0802008;  op2val:0xffffffff7fffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x9fc08c0c0802008, 0xffffffff7fffffff, x30, x1, 16, x2)

inst_34:
// rs2_val == -1073741825, rs1_b5_val == -65, rs1_b7_val == 64, rs1_b6_val == -128
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x4080bf0500fd0007;  op2val:0xffffffffbfffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x4080bf0500fd0007, 0xffffffffbfffffff, x30, x1, 32, x2)

inst_35:
// rs2_val == -536870913, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa057fef407f0202;  op2val:0xffffffffdfffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xaa057fef407f0202, 0xffffffffdfffffff, x30, x1, 48, x2)

inst_36:
// rs2_val == -268435457, rs1_b2_val == 8, rs1_b6_val == -86
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbaafbfeef0802fa;  op2val:0xffffffffefffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xfbaafbfeef0802fa, 0xffffffffefffffff, x30, x1, 64, x2)

inst_37:
// rs2_val == -134217729, rs1_b7_val == -128, rs1_b5_val == -33, rs1_b6_val == 127
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x807fdfc0090855fb;  op2val:0xfffffffff7ffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x807fdfc0090855fb, 0xfffffffff7ffffff, x30, x1, 80, x2)

inst_38:
// rs2_val == -67108865, rs1_b1_val == -128
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x55f7fcf707f88006;  op2val:0xfffffffffbffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x55f7fcf707f88006, 0xfffffffffbffffff, x30, x1, 96, x2)

inst_39:
// rs2_val == -33554433, rs1_b4_val == 16
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfaa091003fbfc3f;  op2val:0xfffffffffdffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xbfaa091003fbfc3f, 0xfffffffffdffffff, x30, x1, 112, x2)

inst_40:
// rs2_val == -16777217, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf7f032010ff0980;  op2val:0xfffffffffeffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xbf7f032010ff0980, 0xfffffffffeffffff, x30, x1, 128, x2)

inst_41:
// rs1_b1_val == -1, rs1_b2_val == 2
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9f6f8f81002ff55;  op2val:0xffbfffffffffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xf9f6f8f81002ff55, 0xffbfffffffffffff, x30, x1, 144, x2)

inst_42:
// rs1_b0_val == -17, rs1_b4_val == -1, rs1_b6_val == 16, rs1_b3_val == -65
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x41010ffbf0380ef;  op2val:0x3
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x41010ffbf0380ef, 0x3, x30, x1, 160, x2)

inst_43:
// rs1_b0_val == -9, rs1_b2_val == 64
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9fc5504034040f7;  op2val:0xffffffffefffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xf9fc5504034040f7, 0xffffffffefffffff, x30, x1, 176, x2)

inst_44:
// rs1_b0_val == 32, rs1_b2_val == -86
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x30607fffcaaf720;  op2val:0xdfffffffffffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x30607fffcaaf720, 0xdfffffffffffffff, x30, x1, 192, x2)

inst_45:
// rs1_b0_val == 1, rs1_b7_val == -33, rs2_val == 33554432
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xdff6bf06f755ff01;  op2val:0x2000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xdff6bf06f755ff01, 0x2000000, x30, x1, 208, x2)

inst_46:
// rs2_val == -6148914691236517206, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xaaf8fafffafcfefe;  op2val:0xaaaaaaaaaaaaaaaa
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xaaf8fafffafcfefe, 0xaaaaaaaaaaaaaaaa, x30, x1, 224, x2)

inst_47:
// rs2_val == -8388609, rs1_b2_val == -9
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x2c010f600f70601;  op2val:0xffffffffff7fffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x2c010f600f70601, 0xffffffffff7fffff, x30, x1, 240, x2)

inst_48:
// rs2_val == -4194305, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe057ffc1020bf;  op2val:0xffffffffffbfffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xfe057ffc1020bf, 0xffffffffffbfffff, x30, x1, 256, x2)

inst_49:
// rs2_val == -2097153, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfcf6bffafa05fc3f;  op2val:0xffffffffffdfffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xfcf6bffafa05fc3f, 0xffffffffffdfffff, x30, x1, 272, x2)

inst_50:
// rs2_val == -1048577, rs1_b7_val == 1
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x107aa3ff67ff97f;  op2val:0xffffffffffefffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x107aa3ff67ff97f, 0xffffffffffefffff, x30, x1, 288, x2)

inst_51:
// rs2_val == -524289, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf4010f6bffaf6ef;  op2val:0xfffffffffff7ffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xbf4010f6bffaf6ef, 0xfffffffffff7ffff, x30, x1, 304, x2)

inst_52:
// rs2_val == -262145, rs1_b6_val == 85
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x555fcfa0440fa80;  op2val:0xfffffffffffbffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x555fcfa0440fa80, 0xfffffffffffbffff, x30, x1, 320, x2)

inst_53:
// rs2_val == -131073, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfc0c0f755fb0309;  op2val:0xfffffffffffdffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xbfc0c0f755fb0309, 0xfffffffffffdffff, x30, x1, 336, x2)

inst_54:
// rs2_val == -65537, rs1_b4_val == 8, rs1_b1_val == -17
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x17f3f08407feffc;  op2val:0xfffffffffffeffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x17f3f08407feffc, 0xfffffffffffeffff, x30, x1, 352, x2)

inst_55:
// rs2_val == -32769, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x80903fe03fd04fd;  op2val:0xffffffffffff7fff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x80903fe03fd04fd, 0xffffffffffff7fff, x30, x1, 368, x2)

inst_56:
// rs2_val == -16385, rs1_b6_val == 1
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf601040703f90040;  op2val:0xffffffffffffbfff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xf601040703f90040, 0xffffffffffffbfff, x30, x1, 384, x2)

inst_57:
// rs2_val == -8193, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf06f90880fb0800;  op2val:0xffffffffffffdfff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xbf06f90880fb0800, 0xffffffffffffdfff, x30, x1, 400, x2)

inst_58:
// rs2_val == -4097, rs1_b1_val == -33, rs1_b4_val == 2
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xff0340020906dff6;  op2val:0xffffffffffffefff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xff0340020906dff6, 0xffffffffffffefff, x30, x1, 416, x2)

inst_59:
// rs2_val == -2049, rs1_b7_val == 16
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x107ffdf9ef090440;  op2val:0xfffffffffffff7ff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x107ffdf9ef090440, 0xfffffffffffff7ff, x30, x1, 432, x2)

inst_60:
// rs2_val == -1025, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x0607f6ef09aa40;  op2val:0xfffffffffffffbff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x0607f6ef09aa40, 0xfffffffffffffbff, x30, x1, 448, x2)

inst_61:
// rs2_val == -513, rs1_b6_val == -65
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0bf55aabf7ff63f;  op2val:0xfffffffffffffdff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xc0bf55aabf7ff63f, 0xfffffffffffffdff, x30, x1, 464, x2)

inst_62:
// rs2_val == -257, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x9c0bffdf880fa01;  op2val:0xfffffffffffffeff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x9c0bffdf880fa01, 0xfffffffffffffeff, x30, x1, 480, x2)

inst_63:
// rs2_val == -129, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf6fdc0df0505c003;  op2val:0xffffffffffffff7f
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xf6fdc0df0505c003, 0xffffffffffffff7f, x30, x1, 496, x2)

inst_64:
// rs2_val == -65, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x207f013f4001dffd;  op2val:0xffffffffffffffbf
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x207f013f4001dffd, 0xffffffffffffffbf, x30, x1, 512, x2)

inst_65:
// rs2_val == -33, rs1_b3_val == -3
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf09aafcfd05fc01;  op2val:0xffffffffffffffdf
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xbf09aafcfd05fc01, 0xffffffffffffffdf, x30, x1, 528, x2)

inst_66:
// rs2_val == -17, rs1_b3_val == -5
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa070509fb02f710;  op2val:0xffffffffffffffef
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xaa070509fb02f710, 0xffffffffffffffef, x30, x1, 544, x2)

inst_67:
// rs2_val == -9, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0fcf9fe7f80fa10;  op2val:0xfffffffffffffff7
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xc0fcf9fe7f80fa10, 0xfffffffffffffff7, x30, x1, 560, x2)

inst_68:
// rs2_val == -5, rs1_b5_val == -2
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x557ffefe06f7f606;  op2val:0xfffffffffffffffb
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x557ffefe06f7f606, 0xfffffffffffffffb, x30, x1, 576, x2)

inst_69:
// rs2_val == -3, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x907bf03f7fafe02;  op2val:0xfffffffffffffffd
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x907bf03f7fafe02, 0xfffffffffffffffd, x30, x1, 592, x2)

inst_70:
// rs2_val == -2, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x55f80808f8012020;  op2val:0xfffffffffffffffe
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x55f80808f8012020, 0xfffffffffffffffe, x30, x1, 608, x2)

inst_71:
// rs2_val == -9223372036854775808, rs1_b3_val == 1
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x15506060107f8aa;  op2val:0x8000000000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x15506060107f8aa, 0x8000000000000000, x30, x1, 624, x2)

inst_72:
// rs2_val == 4611686018427387904, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfef01104040c009;  op2val:0x4000000000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xbfef01104040c009, 0x4000000000000000, x30, x1, 640, x2)

inst_73:
// rs2_val == 2305843009213693952, rs1_b6_val == 4
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf80406fef8f91001;  op2val:0x2000000000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xf80406fef8f91001, 0x2000000000000000, x30, x1, 656, x2)

inst_74:
// rs2_val == 1152921504606846976, rs1_b2_val == -65
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfeaa01fbbfc020;  op2val:0x1000000000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xfbfeaa01fbbfc020, 0x1000000000000000, x30, x1, 672, x2)

inst_75:
// rs2_val == 576460752303423488, rs1_b6_val == -33
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbdfefeffdf709aa;  op2val:0x800000000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xfbdfefeffdf709aa, 0x800000000000000, x30, x1, 688, x2)

inst_76:
// rs2_val == 288230376151711744, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f02043f7ffffc00;  op2val:0x400000000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x3f02043f7ffffc00, 0x400000000000000, x30, x1, 704, x2)

inst_77:
// rs2_val == 144115188075855872, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x3ef55f804f6aaf7;  op2val:0x200000000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x3ef55f804f6aaf7, 0x200000000000000, x30, x1, 720, x2)

inst_78:
// rs2_val == 72057594037927936, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfc08ff3ffdaa7f;  op2val:0x100000000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xfc08ff3ffdaa7f, 0x100000000000000, x30, x1, 736, x2)

inst_79:
// rs2_val == 1, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x97fefff09f85507;  op2val:0x1
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x97fefff09f85507, 0x1, x30, x1, 752, x2)

inst_80:
// rs1_b7_val == -9, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf709f800fb075509;  op2val:0xfeffffffffffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xf709f800fb075509, 0xfeffffffffffffff, x30, x1, 768, x2)

inst_81:
// rs2_val == 256, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfa03f6fdef007f;  op2val:0x100
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xfdfa03f6fdef007f, 0x100, x30, x1, 784, x2)

inst_82:
// rs2_val == 32, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf83f01ef01550820;  op2val:0x20
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xf83f01ef01550820, 0x20, x30, x1, 800, x2)

inst_83:
// rs1_b5_val == 32, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8032020fdfb4080;  op2val:0xfffffffffbffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xf8032020fdfb4080, 0xfffffffffbffffff, x30, x1, 816, x2)

inst_84:
// rs1_b4_val == 85, rs1_b1_val == 127, rs1_b3_val == 32
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa07055520407ff7;  op2val:0x7
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xaa07055520407ff7, 0x7, x30, x1, 832, x2)

inst_85:
// rs1_b4_val == -128, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf702558020fb0780;  op2val:0xffffff7fffffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xf702558020fb0780, 0xffffff7fffffffff, x30, x1, 848, x2)

inst_86:
// rs1_b4_val == 64, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x6fafd4004000904;  op2val:0xfffffffffffffffe
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x6fafd4004000904, 0xfffffffffffffffe, x30, x1, 864, x2)

inst_87:
// rs2_val == 36028797018963968, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x20104005bfeffd10;  op2val:0x80000000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x20104005bfeffd10, 0x80000000000000, x30, x1, 880, x2)

inst_88:
// rs2_val == 18014398509481984, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7017f010608f97f;  op2val:0x40000000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xf7017f010608f97f, 0x40000000000000, x30, x1, 896, x2)

inst_89:
// rs2_val == 9007199254740992, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x200102fcbf070707;  op2val:0x20000000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x200102fcbf070707, 0x20000000000000, x30, x1, 912, x2)

inst_90:
// rs2_val == 4503599627370496, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf6554004f7f8c0;  op2val:0x10000000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xf6554004f7f8c0, 0x10000000000000, x30, x1, 928, x2)

inst_91:
// rs2_val == 2251799813685248, rs1_b2_val == -2
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfc030703fbfe3ffe;  op2val:0x8000000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xfc030703fbfe3ffe, 0x8000000000000, x30, x1, 944, x2)

inst_92:
// rs2_val == 1125899906842624, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x9bf0706aafb55fc;  op2val:0x4000000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x9bf0706aafb55fc, 0x4000000000000, x30, x1, 960, x2)

inst_93:
// rs2_val == 562949953421312, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x80f840f60708803f;  op2val:0x2000000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x80f840f60708803f, 0x2000000000000, x30, x1, 976, x2)

inst_94:
// rs2_val == 281474976710656, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x901bf08dffa00f8;  op2val:0x1000000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x901bf08dffa00f8, 0x1000000000000, x30, x1, 992, x2)

inst_95:
// rs2_val == 140737488355328, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xef0502bffa20f8bf;  op2val:0x800000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xef0502bffa20f8bf, 0x800000000000, x30, x1, 1008, x2)

inst_96:
// rs2_val == 70368744177664, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xef10ff04faef0000;  op2val:0x400000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xef10ff04faef0000, 0x400000000000, x30, x1, 1024, x2)

inst_97:
// rs2_val == 35184372088832, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xdff640020007aa;  op2val:0x200000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xdff640020007aa, 0x200000000000, x30, x1, 1040, x2)

inst_98:
// rs2_val == 17592186044416, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xaaf8fc0705c0ef03;  op2val:0x100000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xaaf8fc0705c0ef03, 0x100000000000, x30, x1, 1056, x2)

inst_99:
// rs2_val == 8796093022208, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf05fcbf07f93f08;  op2val:0x80000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xbf05fcbf07f93f08, 0x80000000000, x30, x1, 1072, x2)

inst_100:
// rs2_val == 4398046511104, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffe011055fd00fa;  op2val:0x40000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x3ffe011055fd00fa, 0x40000000000, x30, x1, 1088, x2)

inst_101:
// rs2_val == 2199023255552, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x1033f03fc03fa02;  op2val:0x20000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x1033f03fc03fa02, 0x20000000000, x30, x1, 1104, x2)

inst_102:
// rs2_val == 1099511627776, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xdffb06df081040f9;  op2val:0x10000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xdffb06df081040f9, 0x10000000000, x30, x1, 1120, x2)

inst_103:
// rs2_val == 549755813888, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfafbf6eff9fb00f8;  op2val:0x8000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xfafbf6eff9fb00f8, 0x8000000000, x30, x1, 1136, x2)

inst_104:
// rs2_val == 274877906944, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x1faf71020f7f9f9;  op2val:0x4000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x1faf71020f7f9f9, 0x4000000000, x30, x1, 1152, x2)

inst_105:
// rs2_val == 137438953472, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xdffef7200308fa06;  op2val:0x2000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xdffef7200308fa06, 0x2000000000, x30, x1, 1168, x2)

inst_106:
// rs2_val == 68719476736, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x807ffc06f6800702;  op2val:0x1000000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x807ffc06f6800702, 0x1000000000, x30, x1, 1184, x2)

inst_107:
// rs2_val == 34359738368, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xef09eff810c0fa;  op2val:0x800000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xef09eff810c0fa, 0x800000000, x30, x1, 1200, x2)

inst_108:
// rs2_val == 17179869184, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x2010f67ff609fffb;  op2val:0x400000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x2010f67ff609fffb, 0x400000000, x30, x1, 1216, x2)

inst_109:
// rs2_val == 8589934592, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9dffaff5501f8;  op2val:0x200000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xf9dffaff5501f8, 0x200000000, x30, x1, 1232, x2)

inst_110:
// rs2_val == 4294967296, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x40000bff606f607;  op2val:0x100000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x40000bff606f607, 0x100000000, x30, x1, 1248, x2)

inst_111:
// rs2_val == 2147483648, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x9fafafcf6f8df7f;  op2val:0x80000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x9fafafcf6f8df7f, 0x80000000, x30, x1, 1264, x2)

inst_112:
// rs2_val == 1073741824, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x10f9df078004fd03;  op2val:0x40000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x10f9df078004fd03, 0x40000000, x30, x1, 1280, x2)

inst_113:
// rs2_val == 536870912, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xdff80140f7bff804;  op2val:0x20000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xdff80140f7bff804, 0x20000000, x30, x1, 1296, x2)

inst_114:
// rs2_val == 268435456, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x4002aa55bf3f10fa;  op2val:0x10000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x4002aa55bf3f10fa, 0x10000000, x30, x1, 1312, x2)

inst_115:
// rs2_val == 134217728, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xdff9fb0108fffe80;  op2val:0x8000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xdff9fb0108fffe80, 0x8000000, x30, x1, 1328, x2)

inst_116:
// rs2_val == 67108864, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfaf9effa7fbffd;  op2val:0x4000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xfbfaf9effa7fbffd, 0x4000000, x30, x1, 1344, x2)

inst_117:
// rs2_val == 16777216, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdaa08083f2006df;  op2val:0x1000000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xfdaa08083f2006df, 0x1000000, x30, x1, 1360, x2)

inst_118:
// rs2_val == 8388608, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x43f0504f70310f8;  op2val:0x800000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x43f0504f70310f8, 0x800000, x30, x1, 1376, x2)

inst_119:
// rs2_val == 4194304, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfb2040fb40f7fa;  op2val:0x400000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xfdfb2040fb40f7fa, 0x400000, x30, x1, 1392, x2)

inst_120:
// rs2_val == 2097152, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfef920807fdfef;  op2val:0x200000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xfdfef920807fdfef, 0x200000, x30, x1, 1408, x2)

inst_121:
// rs2_val == 1048576, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x9fdaa098002f9fe;  op2val:0x100000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x9fdaa098002f9fe, 0x100000, x30, x1, 1424, x2)

inst_122:
// rs2_val == 524288, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x4fe403ff97f03df;  op2val:0x80000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x4fe403ff97f03df, 0x80000, x30, x1, 1440, x2)

inst_123:
// rs2_val == 262144, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f40fd0903f90310;  op2val:0x40000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x3f40fd0903f90310, 0x40000, x30, x1, 1456, x2)

inst_124:
// rs2_val == 131072, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x200907f97fc0c0aa;  op2val:0x20000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x200907f97fc0c0aa, 0x20000, x30, x1, 1472, x2)

inst_125:
// rs2_val == 65536, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x08aaf7ff02f603;  op2val:0x10000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x08aaf7ff02f603, 0x10000, x30, x1, 1488, x2)

inst_126:
// rs2_val == 32768, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f6bffac0fbff09;  op2val:0x8000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x3f6bffac0fbff09, 0x8000, x30, x1, 1504, x2)

inst_127:
// rs2_val == 16384, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x20fa0100403ffd40;  op2val:0x4000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x20fa0100403ffd40, 0x4000, x30, x1, 1520, x2)

inst_128:
// rs2_val == 8192, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x1df027ff906fe04;  op2val:0x2000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x1df027ff906fe04, 0x2000, x30, x1, 1536, x2)

inst_129:
// rs2_val == 4096, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x40f7fa403f04fffc;  op2val:0x1000
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x40f7fa403f04fffc, 0x1000, x30, x1, 1552, x2)

inst_130:
// rs2_val == 2048, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x1aa803f06c005fc;  op2val:0x800
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x1aa803f06c005fc, 0x800, x30, x1, 1568, x2)

inst_131:
// rs2_val == 1024, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xeff6fa202003bf20;  op2val:0x400
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xeff6fa202003bf20, 0x400, x30, x1, 1584, x2)

inst_132:
// rs2_val == 512, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x7fc00904faefbff7;  op2val:0x200
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x7fc00904faefbff7, 0x200, x30, x1, 1600, x2)

inst_133:
// rs2_val == 128, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa05fbf8f7f70755;  op2val:0x80
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xaa05fbf8f7f70755, 0x80, x30, x1, 1616, x2)

inst_134:
// rs2_val == 64, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x80fefe09fa5500f8;  op2val:0x40
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x80fefe09fa5500f8, 0x40, x30, x1, 1632, x2)

inst_135:
// rs2_val == 16, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd00f9c0f9407f20;  op2val:0x10
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xfd00f9c0f9407f20, 0x10, x30, x1, 1648, x2)

inst_136:
// rs2_val == 8, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfc040030205ef;  op2val:0x8
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xbfc040030205ef, 0x8, x30, x1, 1664, x2)

inst_137:
// rs2_val == 4, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x70102fcdf04f709;  op2val:0x4
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x70102fcdf04f709, 0x4, x30, x1, 1680, x2)

inst_138:
// rs2_val == 2, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf955ff097ffe0406;  op2val:0x2
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xf955ff097ffe0406, 0x2, x30, x1, 1696, x2)

inst_139:
// rs2_val == -4611686018427387905, rs1_b5_val == -3, rs1_b1_val == -2, rs1_b6_val == -9, rs1_b0_val == 85
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfaf7fdfcf6effe55;  op2val:0xbfffffffffffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xfaf7fdfcf6effe55, 0xbfffffffffffffff, x30, x1, 1712, x2)

inst_140:
// rs2_val == -35184372088833, 
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x54009efc0fb40f6;  op2val:0xffffdfffffffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x54009efc0fb40f6, 0xffffdfffffffffff, x30, x1, 1728, x2)

inst_141:
// rs2_val == -274877906945, rs1_b7_val == -3, rs1_b4_val == -3, rs1_b1_val == -3
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff05fd8000fdfb;  op2val:0xffffffbfffffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0xfdff05fd8000fdfb, 0xffffffbfffffffff, x30, x1, 1744, x2)

inst_142:
// rs2_val == -68719476737, rs1_b3_val == 0, rs1_b5_val == 8
// opcode: kslra8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f0008f900fdf910;  op2val:0xffffffefffffffff
TEST_PKRR_OP(kslra8, x31, x30, x29, 0x0000000000000000, 0x3f0008f900fdf910, 0xffffffefffffffff, x30, x1, 1760, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x12_0:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 222*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
