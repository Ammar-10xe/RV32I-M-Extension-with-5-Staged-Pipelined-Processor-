
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uksub8 instruction of the RISC-V RV64PZicsr extension for the uksub8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uksub8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 == rd != rs2, rs1==x3, rs2==x0, rd==x3, rs1_b0_val == 0, rs2_b0_val == 191, rs1_b7_val != rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b4_val == 64, rs1_b6_val != rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b3_val == 127, rs1_b5_val != rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b4_val != rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b2_val == 255, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val == 223, rs2_b6_val == 4, rs2_b4_val == 253, rs2_b1_val == 16, rs1_b7_val == 247, rs2_b2_val == 191, rs2_b7_val == 254
// opcode: uksub8 ; op1:x3; op2:x0; dest:x3; op1val:0xf70b094007ffdf00;  op2val:0xfe0403fd7fbf10bf
TEST_PKRR_OP(uksub8, x3, x3, x0, 0x0000000000000000, 0xf70b094007ffdf00, 0xfe0403fd7fbf10bf, x3, x11, 0, x12)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x5, rs2==x29, rd==x19, rs1_b7_val == rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b6_val == 127, rs2_b6_val == 191, rs1_b0_val == 8, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b3_val == 4, rs1_b3_val == 2, rs1_b4_val == 253, rs2_b4_val == 64, rs2_b1_val == 255, rs1_b7_val == 16, rs2_b7_val == 16, rs2_b2_val == 128
// opcode: uksub8 ; op1:x5; op2:x29; dest:x19; op1val:0x107f06fd02050508;  op2val:0x10bf11400480ff0e
TEST_PKRR_OP(uksub8, x19, x5, x29, 0x0000000000000000, 0x107f06fd02050508, 0x10bf11400480ff0e, x5, x11, 16, x12)

inst_2:
// rs1 == rs2 != rd, rs1==x10, rs2==x10, rd==x28, rs1_b6_val == rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b7_val == 0, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b0_val == 2, rs1_b4_val == 127, rs2_b4_val == 239, rs2_b2_val == 247
// opcode: uksub8 ; op1:x10; op2:x10; dest:x28; op1val:0xb09057f090f110d;  op2val:0x0907ef09f70f02
TEST_PKRR_OP(uksub8, x28, x10, x10, 0x0000000000000000, 0xb09057f090f110d, 0x0907ef09f70f02, x10, x11, 32, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs1_b5_val == rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b5_val == 251, rs1_b5_val == 251, rs1_b4_val == 0, rs2_b2_val == 255, rs1_b3_val == 251, rs2_b3_val == 254, rs1_b0_val == 255, rs1_b1_val == 253, rs2_b7_val == 247, rs2_b6_val == 0
// opcode: uksub8 ; op1:x6; op2:x6; dest:x6; op1val:0xb03fb00fb0dfdff;  op2val:0xf700fb12feff0c0e
TEST_PKRR_OP(uksub8, x6, x6, x6, 0x0000000000000000, 0xb03fb00fb0dfdff, 0xf700fb12feff0c0e, x6, x11, 48, x12)

inst_4:
// rs2 == rd != rs1, rs1==x23, rs2==x8, rd==x8, rs1_b4_val == rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b0_val == 16, rs1_b3_val == 32, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val == 255, rs2_b7_val == 253, rs2_b2_val == 239, rs1_b2_val == 247
// opcode: uksub8 ; op1:x23; op2:x8; dest:x8; op1val:0xa0c0d0720f7ff10;  op2val:0xfdbf090707efff13
TEST_PKRR_OP(uksub8, x8, x23, x8, 0x0000000000000000, 0xa0c0d0720f7ff10, 0xfdbf090707efff13, x23, x11, 64, x12)

inst_5:
// rs1==x19, rs2==x31, rd==x20, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b7_val == 4, rs2_b0_val == 239, rs1_b7_val == 1, rs2_b5_val == 16, rs1_b5_val == 4, rs2_b1_val == 170, rs2_b3_val == 128, rs2_b6_val == 64, rs1_b4_val == 254
// opcode: uksub8 ; op1:x19; op2:x31; dest:x20; op1val:0x10704fe13131309;  op2val:0x440100a8013aaef
TEST_PKRR_OP(uksub8, x20, x19, x31, 0x0000000000000000, 0x10704fe13131309, 0x440100a8013aaef, x19, x11, 80, x12)

inst_6:
// rs1==x0, rs2==x23, rd==x24, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b5_val == 64, rs2_b5_val == 255, rs2_b0_val == 8, rs2_b1_val == 251, rs1_b4_val == 247, rs2_b4_val == 128, rs1_b7_val == 253
// opcode: uksub8 ; op1:x0; op2:x23; dest:x24; op1val:0xfd0d40f702f70908;  op2val:0xa0bff800780fb08
TEST_PKRR_OP(uksub8, x24, x0, x23, 0x0000000000000000, 0xfd0d40f702f70908, 0xa0bff800780fb08, x0, x11, 96, x12)

inst_7:
// rs1==x22, rs2==x9, rd==x7, rs2_b7_val == 170, rs1_b0_val == 4, rs1_b1_val == 251, rs2_b4_val == 223, rs2_b3_val == 1, rs2_b1_val == 128, rs1_b6_val == 2, rs1_b5_val == 170, rs1_b2_val == 239
// opcode: uksub8 ; op1:x22; op2:x9; dest:x7; op1val:0x302aa0e07effb04;  op2val:0xaa030edf01ff8005
TEST_PKRR_OP(uksub8, x7, x22, x9, 0x0000000000000000, 0x302aa0e07effb04, 0xaa030edf01ff8005, x22, x11, 112, x12)

inst_8:
// rs1==x30, rs2==x25, rd==x27, rs2_b7_val == 85, rs1_b2_val == 4, rs1_b3_val == 247, rs2_b5_val == 127, rs1_b5_val == 2, rs1_b6_val == 247, rs2_b2_val == 85, rs1_b1_val == 8, rs1_b4_val == 32, rs2_b4_val == 8, rs1_b7_val == 8
// opcode: uksub8 ; op1:x30; op2:x25; dest:x27; op1val:0x8f70220f7040810;  op2val:0x55047f080355100e
TEST_PKRR_OP(uksub8, x27, x30, x25, 0x0000000000000000, 0x8f70220f7040810, 0x55047f080355100e, x30, x11, 128, x12)

inst_9:
// rs1==x21, rs2==x2, rd==x4, rs2_b7_val == 127, rs1_b5_val == 253, rs2_b5_val == 254, rs2_b1_val == 223, rs1_b1_val == 247, rs1_b4_val == 191, rs2_b2_val == 127, rs1_b2_val == 127, rs2_b0_val == 127
// opcode: uksub8 ; op1:x21; op2:x2; dest:x4; op1val:0xf11fdbf137ff700;  op2val:0x7f0ffe0a067fdf7f
TEST_PKRR_OP(uksub8, x4, x21, x2, 0x0000000000000000, 0xf11fdbf137ff700, 0x7f0ffe0a067fdf7f, x21, x11, 144, x12)

inst_10:
// rs1==x27, rs2==x20, rd==x1, rs2_b7_val == 191, rs2_b4_val == 0, rs1_b2_val == 2, rs2_b3_val == 251, rs2_b0_val == 32, rs1_b0_val == 1, rs2_b5_val == 170, rs1_b5_val == 127, rs1_b7_val == 32
// opcode: uksub8 ; op1:x27; op2:x20; dest:x1; op1val:0x20037fbf0c020701;  op2val:0xbf40aa00fb071020
TEST_PKRR_OP(uksub8, x1, x27, x20, 0x0000000000000000, 0x20037fbf0c020701, 0xbf40aa00fb071020, x27, x11, 160, x12)

inst_11:
// rs1==x8, rs2==x7, rd==x17, rs2_b7_val == 223, rs2_b0_val == 64, rs1_b2_val == 0, rs2_b3_val == 16, rs1_b4_val == 223, rs2_b2_val == 170, rs1_b6_val == 255
// opcode: uksub8 ; op1:x8; op2:x7; dest:x17; op1val:0xfdff0adf0d000c0e;  op2val:0xdf120d0610aa8040
TEST_PKRR_OP(uksub8, x17, x8, x7, 0x0000000000000000, 0xfdff0adf0d000c0e, 0xdf120d0610aa8040, x8, x11, 176, x12)

inst_12:
// rs1==x18, rs2==x13, rd==x16, rs2_b7_val == 239, rs2_b6_val == 254, rs2_b0_val == 255, rs2_b4_val == 191, rs1_b6_val == 16, rs2_b1_val == 0, rs1_b2_val == 254
// opcode: uksub8 ; op1:x18; op2:x13; dest:x16; op1val:0x51002030dfeff04;  op2val:0xeffe09bf0e0700ff
TEST_PKRR_OP(uksub8, x16, x18, x13, 0x0000000000000000, 0x51002030dfeff04, 0xeffe09bf0e0700ff, x18, x11, 192, x12)

inst_13:
// rs1==x28, rs2==x17, rd==x10, rs2_b7_val == 251, rs2_b5_val == 253, rs1_b6_val == 191, rs1_b1_val == 64, rs2_b4_val == 32, rs1_b2_val == 253, rs2_b2_val == 253, rs2_b0_val == 85
// opcode: uksub8 ; op1:x28; op2:x17; dest:x10; op1val:0x12bf0cf702fd400c;  op2val:0xfb0bfd2001fd0955
TEST_PKRR_OP(uksub8, x10, x28, x17, 0x0000000000000000, 0x12bf0cf702fd400c, 0xfb0bfd2001fd0955, x28, x11, 208, x3)

inst_14:
// rs1==x26, rs2==x4, rd==x12, rs2_b7_val == 128, rs2_b0_val == 223, rs1_b5_val == 128, rs2_b6_val == 170, rs1_b6_val == 64, rs2_b3_val == 0, rs1_b2_val == 170, rs1_b7_val == 239
// opcode: uksub8 ; op1:x26; op2:x4; dest:x12; op1val:0xef4080f703aa0d11;  op2val:0x80aa0b06000affdf
TEST_PKRR_OP(uksub8, x12, x26, x4, 0x0000000000000000, 0xef4080f703aa0d11, 0x80aa0b06000affdf, x26, x11, 224, x3)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_15:
// rs1==x7, rs2==x1, rd==x23, rs2_b7_val == 64, rs2_b0_val == 253, rs1_b5_val == 0, rs1_b4_val == 170, rs1_b1_val == 239, rs1_b7_val == 191, rs1_b2_val == 85, rs2_b4_val == 16, rs2_b5_val == 223
// opcode: uksub8 ; op1:x7; op2:x1; dest:x23; op1val:0xbf0a00aa1355ef12;  op2val:0x4013df1003bf0bfd
TEST_PKRR_OP(uksub8, x23, x7, x1, 0x0000000000000000, 0xbf0a00aa1355ef12, 0x4013df1003bf0bfd, x7, x6, 0, x3)

inst_16:
// rs1==x9, rs2==x19, rd==x31, rs2_b7_val == 32, rs1_b3_val == 253, rs1_b7_val == 64, rs1_b1_val == 127, rs2_b2_val == 251
// opcode: uksub8 ; op1:x9; op2:x19; dest:x31; op1val:0x400a0909fd097f0f;  op2val:0x201113117ffb000d
TEST_PKRR_OP(uksub8, x31, x9, x19, 0x0000000000000000, 0x400a0909fd097f0f, 0x201113117ffb000d, x9, x6, 16, x3)

inst_17:
// rs1==x16, rs2==x24, rd==x18, rs2_b7_val == 8, rs2_b3_val == 85, rs2_b2_val == 4, rs1_b0_val == 251, rs2_b5_val == 8, rs2_b4_val == 170, rs2_b1_val == 239, rs1_b3_val == 0, rs1_b2_val == 223
// opcode: uksub8 ; op1:x16; op2:x24; dest:x18; op1val:0xef05aa0000df11fb;  op2val:0x8fe08aa5504ef0f
TEST_PKRR_OP(uksub8, x18, x16, x24, 0x0000000000000000, 0xef05aa0000df11fb, 0x8fe08aa5504ef0f, x16, x6, 32, x3)

inst_18:
// rs1==x29, rs2==x14, rd==x30, rs2_b7_val == 2, rs1_b2_val == 16, rs1_b6_val == 223, rs1_b3_val == 1, rs2_b2_val == 223, rs1_b5_val == 85
// opcode: uksub8 ; op1:x29; op2:x14; dest:x30; op1val:0xddf550501100dfb;  op2val:0x200110307dfefbf
TEST_PKRR_OP(uksub8, x30, x29, x14, 0x0000000000000000, 0xddf550501100dfb, 0x200110307dfefbf, x29, x6, 48, x3)

inst_19:
// rs1==x25, rs2==x12, rd==x11, rs2_b7_val == 1, rs1_b1_val == 16, rs2_b1_val == 85, rs1_b4_val == 239, rs2_b6_val == 1
// opcode: uksub8 ; op1:x25; op2:x12; dest:x11; op1val:0x131280ef0caa1004;  op2val:0x101060c0e045505
TEST_PKRR_OP(uksub8, x11, x25, x12, 0x0000000000000000, 0x131280ef0caa1004, 0x101060c0e045505, x25, x6, 64, x3)

inst_20:
// rs1==x2, rs2==x15, rd==x25, rs2_b7_val == 255, rs1_b7_val == 0, rs1_b6_val == 85, rs2_b3_val == 247, rs1_b0_val == 64, rs1_b3_val == 4, rs2_b6_val == 255
// opcode: uksub8 ; op1:x2; op2:x15; dest:x25; op1val:0x550d0f040d0540;  op2val:0xffff130af7551202
TEST_PKRR_OP(uksub8, x25, x2, x15, 0x0000000000000000, 0x550d0f040d0540, 0xffff130af7551202, x2, x6, 80, x3)

inst_21:
// rs1==x12, rs2==x16, rd==x22, rs2_b6_val == 85, rs1_b0_val == 223, rs1_b7_val == 2, rs1_b3_val == 191, rs2_b0_val == 170
// opcode: uksub8 ; op1:x12; op2:x16; dest:x22; op1val:0x20c0f0fbf0203df;  op2val:0xd550c120a1209aa
TEST_PKRR_OP(uksub8, x22, x12, x16, 0x0000000000000000, 0x20c0f0fbf0203df, 0xd550c120a1209aa, x12, x6, 96, x3)

inst_22:
// rs1==x11, rs2==x18, rd==x26, rs2_b6_val == 127, rs1_b2_val == 64, rs1_b3_val == 127, rs2_b0_val == 251, rs2_b1_val == 32, rs1_b6_val == 1
// opcode: uksub8 ; op1:x11; op2:x18; dest:x26; op1val:0x2001fd097f40f704;  op2val:0xbf7f12aa0f0720fb
TEST_PKRR_OP(uksub8, x26, x11, x18, 0x0000000000000000, 0x2001fd097f40f704, 0xbf7f12aa0f0720fb, x11, x6, 112, x3)

inst_23:
// rs1==x15, rs2==x26, rd==x5, rs2_b6_val == 223, rs1_b3_val == 223, rs1_b2_val == 1, rs2_b5_val == 191, rs1_b5_val == 191, rs1_b0_val == 127
// opcode: uksub8 ; op1:x15; op2:x26; dest:x5; op1val:0xd10bf00df01037f;  op2val:0x13dfbf00fb800655
TEST_PKRR_OP(uksub8, x5, x15, x26, 0x0000000000000000, 0xd10bf00df01037f, 0x13dfbf00fb800655, x15, x6, 128, x3)

inst_24:
// rs1==x4, rs2==x5, rd==x0, rs2_b6_val == 239, rs2_b5_val == 1, rs2_b0_val == 1, rs1_b6_val == 32, rs1_b1_val == 1, rs1_b0_val == 85
// opcode: uksub8 ; op1:x4; op2:x5; dest:x0; op1val:0x2200cef0fff0155;  op2val:0xf7ef01090b552001
TEST_PKRR_OP(uksub8, x0, x4, x5, 0x0000000000000000, 0x2200cef0fff0155, 0xf7ef01090b552001, x4, x6, 144, x3)

inst_25:
// rs1==x24, rs2==x28, rd==x21, rs2_b6_val == 247, rs1_b1_val == 254, rs2_b4_val == 255
// opcode: uksub8 ; op1:x24; op2:x28; dest:x21; op1val:0xef0307201302fe08;  op2val:0x6f7aaff0f050d0a
TEST_PKRR_OP(uksub8, x21, x24, x28, 0x0000000000000000, 0xef0307201302fe08, 0x6f7aaff0f050d0a, x24, x6, 160, x3)

inst_26:
// rs1==x31, rs2==x27, rd==x15, rs1_b3_val == 170, rs1_b6_val == 0, rs2_b1_val == 1, rs2_b3_val == 223
// opcode: uksub8 ; op1:x31; op2:x27; dest:x15; op1val:0xd00aa0aaa070955;  op2val:0xa130aefdffb0101
TEST_PKRR_OP(uksub8, x15, x31, x27, 0x0000000000000000, 0xd00aa0aaa070955, 0xa130aefdffb0101, x31, x6, 176, x3)

inst_27:
// rs1==x1, rs2==x3, rd==x14, rs1_b3_val == 85, rs1_b7_val == 4, rs1_b6_val == 239, rs1_b1_val == 0, rs2_b6_val == 2
// opcode: uksub8 ; op1:x1; op2:x3; dest:x14; op1val:0x4effb0f55020011;  op2val:0x1102060b09060def
TEST_PKRR_OP(uksub8, x14, x1, x3, 0x0000000000000000, 0x4effb0f55020011, 0x1102060b09060def, x1, x6, 192, x4)

inst_28:
// rs1==x13, rs2==x30, rd==x29, rs1_b3_val == 239, rs1_b1_val == 4, rs1_b0_val == 32, rs2_b4_val == 254
// opcode: uksub8 ; op1:x13; op2:x30; dest:x29; op1val:0x120a5509effd0420;  op2val:0xa0a0cfe0080800c
TEST_PKRR_OP(uksub8, x29, x13, x30, 0x0000000000000000, 0x120a5509effd0420, 0xa0a0cfe0080800c, x13, x6, 208, x4)

inst_29:
// rs1==x17, rs2==x11, rd==x13, rs1_b3_val == 254, rs2_b1_val == 253, rs1_b5_val == 254
// opcode: uksub8 ; op1:x17; op2:x11; dest:x13; op1val:0xf0afe7ffedf1209;  op2val:0xff09df06dff7fdef
TEST_PKRR_OP(uksub8, x13, x17, x11, 0x0000000000000000, 0xf0afe7ffedf1209, 0xff09df06dff7fdef, x17, x6, 224, x4)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x20, rs2==x21, rd==x2, rs1_b3_val == 128, rs1_b0_val == 191, rs2_b3_val == 170, rs2_b2_val == 0, rs1_b1_val == 32, rs1_b7_val == 223, rs1_b4_val == 16
// opcode: uksub8 ; op1:x20; op2:x21; dest:x2; op1val:0xdfbffb1080ef20bf;  op2val:0xd030a20aa001205
TEST_PKRR_OP(uksub8, x2, x20, x21, 0x0000000000000000, 0xdfbffb1080ef20bf, 0xd030a20aa001205, x20, x1, 0, x4)

inst_31:
// rs1==x14, rs2==x22, rd==x9, rs1_b3_val == 64, rs2_b2_val == 8
// opcode: uksub8 ; op1:x14; op2:x22; dest:x9; op1val:0x2ef13bf40070c05;  op2val:0xf1111087f08efff
TEST_PKRR_OP(uksub8, x9, x14, x22, 0x0000000000000000, 0x2ef13bf40070c05, 0xf1111087f08efff, x14, x1, 16, x4)

inst_32:
// rs1_b3_val == 16, rs2_b1_val == 191, rs1_b6_val == 253, rs2_b4_val == 127, rs1_b7_val == 254, rs1_b2_val == 251
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfefd060010fb4008;  op2val:0xbfdfdf7f01aabffb
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xfefd060010fb4008, 0xbfdfdf7f01aabffb, x30, x1, 32, x4)

inst_33:
// rs1_b3_val == 8, rs1_b7_val == 255, rs2_b2_val == 254
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xff060efd0812fd10;  op2val:0xb7f07ef10fe0305
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xff060efd0812fd10, 0xb7f07ef10fe0305, x30, x1, 48, x4)

inst_34:
// rs1_b3_val == 255, rs2_b5_val == 2
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x13f702dfff55fbdf;  op2val:0x9aa02df06aa06ef
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x13f702dfff55fbdf, 0x9aa02df06aa06ef, x30, x1, 64, x4)

inst_35:
// rs1_b2_val == 191, rs1_b0_val == 239
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x2040fb20dfbf03ef;  op2val:0xdf0612ef0cfd0a0f
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x2040fb20dfbf03ef, 0xdf0612ef0cfd0a0f, x30, x1, 80, x4)

inst_36:
// rs1_b2_val == 128, rs2_b6_val == 32, rs1_b0_val == 253, rs2_b3_val == 2
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x90dfbdf5580f7fd;  op2val:0xe2001ef020bbfff
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x90dfbdf5580f7fd, 0xe2001ef020bbfff, x30, x1, 96, x4)

inst_37:
// rs1_b2_val == 32, rs2_b1_val == 4, rs1_b4_val == 8, rs2_b3_val == 64, rs2_b2_val == 1
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x707130800200edf;  op2val:0x120efd1040010420
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x707130800200edf, 0x120efd1040010420, x30, x1, 112, x4)

inst_38:
// rs1_b2_val == 8, rs2_b0_val == 4, rs1_b5_val == 8
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xa20080a12080e0f;  op2val:0x40f7fbbf0507ff04
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xa20080a12080e0f, 0x40f7fbbf0507ff04, x30, x1, 128, x4)

inst_39:
// rs1_b1_val == 170, rs2_b2_val == 16
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf1103aa02aaaa01;  op2val:0x1155df0d0510df02
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xdf1103aa02aaaa01, 0x1155df0d0510df02, x30, x1, 144, x4)

inst_40:
// rs1_b1_val == 85, rs2_b0_val == 254
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf711dfff0c5501;  op2val:0xff00050ff7f710fe
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xbf711dfff0c5501, 0xff00050ff7f710fe, x30, x1, 160, x4)

inst_41:
// rs2_b6_val == 251, rs2_b1_val == 64, rs2_b4_val == 85
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xc40800d11fbfb0d;  op2val:0x3fbdf55070a4003
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xc40800d11fbfb0d, 0x3fbdf55070a4003, x30, x1, 176, x4)

inst_42:
// rs1_b1_val == 191, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0c800b5580bf03;  op2val:0xfdfb08200e081003
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xc0c800b5580bf03, 0xfdfb08200e081003, x30, x1, 192, x4)

inst_43:
// rs2_b6_val == 253, rs2_b3_val == 191, rs2_b5_val == 64, rs1_b6_val == 254, rs1_b4_val == 251, rs2_b4_val == 2
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x4fe0dfb0f077ffb;  op2val:0x8fd4002bf0def08
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x4fe0dfb0f077ffb, 0x8fd4002bf0def08, x30, x1, 208, x4)

inst_44:
// rs2_b6_val == 128, rs1_b6_val == 8
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd080c120204f713;  op2val:0xfd80131380f7ffaa
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xfd080c120204f713, 0xfd80131380f7ffaa, x30, x1, 224, x4)

inst_45:
// rs2_b2_val == 64, rs2_b5_val == 128, rs2_b4_val == 4
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xddffb0806020f55;  op2val:0xc0480040a401120
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xddffb0806020f55, 0xc0480040a401120, x30, x1, 240, x4)

inst_46:
// rs2_b2_val == 32, rs1_b4_val == 2, rs2_b5_val == 32, rs2_b0_val == 128
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xffff06020b04100d;  op2val:0x309200c5520ff80
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xffff06020b04100d, 0x309200c5520ff80, x30, x1, 256, x4)

inst_47:
// rs2_b2_val == 2, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x40d071255ff0f20;  op2val:0x1220fe0c00021040
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x40d071255ff0f20, 0x1220fe0c00021040, x30, x1, 272, x4)

inst_48:
// rs2_b1_val == 127, rs2_b6_val == 16, rs1_b4_val == 85
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xb1107550455f70e;  op2val:0xfe107faa110f7f0e
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xb1107550455f70e, 0xfe107faa110f7f0e, x30, x1, 288, x4)

inst_49:
// rs2_b1_val == 247, rs2_b4_val == 251
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe0c8055aa0ffbfd;  op2val:0x550603fb070ff713
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xfe0c8055aa0ffbfd, 0x550603fb070ff713, x30, x1, 304, x4)

inst_50:
// rs2_b1_val == 254, rs2_b5_val == 4
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x910040313fbfffb;  op2val:0xff0e04111255fe0b
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x910040313fbfffb, 0xff0e04111255fe0b, x30, x1, 320, x4)

inst_51:
// rs2_b1_val == 8, rs2_b0_val == 0, rs1_b0_val == 254
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x5100c557f0efefe;  op2val:0x120c05bf800c0800
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x5100c557f0efefe, 0x120c05bf800c0800, x30, x1, 336, x4)

inst_52:
// rs2_b1_val == 2, rs1_b1_val == 2, rs1_b7_val == 127, rs1_b6_val == 4
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f0405dfffdf020d;  op2val:0xfd55fe400a040212
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x7f0405dfffdf020d, 0xfd55fe400a040212, x30, x1, 352, x4)

inst_53:
// rs2_b0_val == 247, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x10118055aa0d04bf;  op2val:0xf0c0dff401302f7
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x10118055aa0d04bf, 0xf0c0dff401302f7, x30, x1, 368, x4)

inst_54:
// rs2_b0_val == 16, rs1_b6_val == 170
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfeaa00400e0adf04;  op2val:0x30d111304120910
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xfeaa00400e0adf04, 0x30d111304120910, x30, x1, 384, x4)

inst_55:
// rs1_b7_val == 170, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa078006fbff100d;  op2val:0x11110b40f7fe070f
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xaa078006fbff100d, 0x11110b40f7fe070f, x30, x1, 400, x4)

inst_56:
// rs1_b7_val == 85, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x550dfb0300fd0205;  op2val:0xbf09080f0a092080
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x550dfb0300fd0205, 0xbf09080f0a092080, x30, x1, 416, x4)

inst_57:
// rs2_b6_val == 8, rs2_b3_val == 255, rs1_b0_val == 2, rs1_b4_val == 255
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x90a09ff0f061102;  op2val:0x108110efffb0dbf
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x90a09ff0f061102, 0x108110efffb0dbf, x30, x1, 432, x4)

inst_58:
// rs1_b0_val == 247, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x9ff0c0205feaaf7;  op2val:0xc1313fd0c03fdaa
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x9ff0c0205feaaf7, 0xc1313fd0c03fdaa, x30, x1, 448, x4)

inst_59:
// rs1_b0_val == 128, rs2_b3_val == 8
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd0e08fb0a121080;  op2val:0x1220130808f70520
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xfd0e08fb0a121080, 0x1220130808f70520, x30, x1, 464, x4)

inst_60:
// rs2_b5_val == 0, rs2_b3_val == 32
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x80ffbfd0afb040c;  op2val:0x4000000a200e1220
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x80ffbfd0afb040c, 0x4000000a200e1220, x30, x1, 480, x4)

inst_61:
// rs1_b6_val == 251, rs2_b4_val == 247
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xeffb0d0e110411f7;  op2val:0x20ef0ef708f7097f
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xeffb0d0e110411f7, 0x20ef0ef708f7097f, x30, x1, 496, x4)

inst_62:
// rs1_b6_val == 128, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x1280fd5540000008;  op2val:0x40200afd11090ffe
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x1280fd5540000008, 0x40200afd11090ffe, x30, x1, 512, x4)

inst_63:
// rs2_b5_val == 239, rs1_b4_val == 4
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x802fe04ff0255ef;  op2val:0xb0cef0311107f03
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x802fe04ff0255ef, 0xb0cef0311107f03, x30, x1, 528, x4)

inst_64:
// rs1_b5_val == 223, rs2_b3_val == 253
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xef80df0c0bef0801;  op2val:0x3effdfffd12bf07
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xef80df0c0bef0801, 0x3effdfffd12bf07, x30, x1, 544, x4)

inst_65:
// rs2_b4_val == 1, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdaa08bf0202060f;  op2val:0x11fdfe0104fe7f03
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xfdaa08bf0202060f, 0x11fdfe0104fe7f03, x30, x1, 560, x4)

inst_66:
// rs1_b5_val == 32, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xd0f200b0c110af7;  op2val:0x20bf2006fb201203
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xd0f200b0c110af7, 0x20bf2006fb201203, x30, x1, 576, x4)

inst_67:
// rs1_b5_val == 247, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x1006f7bf0611100f;  op2val:0xfe0cfd090cff0212
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x1006f7bf0611100f, 0xfe0cfd090cff0212, x30, x1, 592, x4)

inst_68:
// rs2_b3_val == 239, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x2080d0e7ffe0a08;  op2val:0xf0304aaefaa0913
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x2080d0e7ffe0a08, 0xf0304aaefaa0913, x30, x1, 608, x4)

inst_69:
// rs1_b5_val == 16, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xb0310200b090b03;  op2val:0x313ff0f0ff7100e
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xb0310200b090b03, 0x313ff0f0ff7100e, x30, x1, 624, x4)

inst_70:
// rs1_b5_val == 1, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x40401eff710bf05;  op2val:0xfd0100fe400a7f03
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x40401eff710bf05, 0xfd0100fe400a7f03, x30, x1, 640, x4)

inst_71:
// rs1_b5_val == 255, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x8fbff094013fd00;  op2val:0x120d0adf0f55df0a
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x8fbff094013fd00, 0x120d0adf0f55df0a, x30, x1, 656, x4)

inst_72:
// rs1_b1_val == 128, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xb0d02bfbf05800b;  op2val:0x120fe0f0c0f4000
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xb0d02bfbf05800b, 0x120fe0f0c0f4000, x30, x1, 672, x4)

inst_73:
// rs1_b5_val == 239, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xd0cef04ef7faa7f;  op2val:0x3070e0813020e05
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xd0cef04ef7faa7f, 0x3070e0813020e05, x30, x1, 688, x4)

inst_74:
// rs1_b4_val == 128, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf712f7800b0df7fb;  op2val:0x811030408df0710
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xf712f7800b0df7fb, 0x811030408df0710, x30, x1, 704, x4)

inst_75:
// rs1_b7_val == 251, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb08800502fbaafe;  op2val:0xe0f0fdf0a1112fb
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xfb08800502fbaafe, 0xe0f0fdf0a1112fb, x30, x1, 720, x4)

inst_76:
// rs2_b5_val == 85, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x110af70d01fe0b0c;  op2val:0x3f75503ff207f08
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x110af70d01fe0b0c, 0x3f75503ff207f08, x30, x1, 736, x4)

inst_77:
// rs1_b7_val == 128, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x800b03aafd550501;  op2val:0xd0ddffe007f0401
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x800b03aafd550501, 0xd0ddffe007f0401, x30, x1, 752, x4)

inst_78:
// rs1_b0_val == 170, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa20800201f7fdaa;  op2val:0xcdf0c080007fb04
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xaa20800201f7fdaa, 0xcdf0c080007fb04, x30, x1, 768, x4)

inst_79:
// rs1_b4_val == 1, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xa8011015507aa05;  op2val:0x1305df05200bfb10
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xa8011015507aa05, 0x1305df05200bfb10, x30, x1, 784, x4)

inst_80:
// rs2_b5_val == 247, 
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x8020e0a0280f7bf;  op2val:0xc0cf706ef0bbf0a
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x8020e0a0280f7bf, 0xc0cf706ef0bbf0a, x30, x1, 800, x4)

inst_81:
// rs1_b6_val == rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b7_val == 0, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b0_val == 2, rs1_b4_val == 127, rs2_b4_val == 239, rs2_b2_val == 247
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xb09057f090f110d;  op2val:0x0907ef09f70f02
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xb09057f090f110d, 0x0907ef09f70f02, x30, x1, 816, x4)

inst_82:
// rs1_b5_val == rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b5_val == 251, rs1_b5_val == 251, rs1_b4_val == 0, rs2_b2_val == 255, rs1_b3_val == 251, rs2_b3_val == 254, rs1_b0_val == 255, rs1_b1_val == 253, rs2_b7_val == 247, rs2_b6_val == 0
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xb03fb00fb0dfdff;  op2val:0xf700fb12feff0c0e
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xb03fb00fb0dfdff, 0xf700fb12feff0c0e, x30, x1, 832, x4)

inst_83:
// rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b5_val == 64, rs2_b5_val == 255, rs2_b0_val == 8, rs2_b1_val == 251, rs1_b4_val == 247, rs2_b4_val == 128, rs1_b7_val == 253
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd0d40f702f70908;  op2val:0xa0bff800780fb08
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0xfd0d40f702f70908, 0xa0bff800780fb08, x30, x1, 848, x4)

inst_84:
// rs2_b6_val == 239, rs2_b5_val == 1, rs2_b0_val == 1, rs1_b6_val == 32, rs1_b1_val == 1, rs1_b0_val == 85
// opcode: uksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x2200cef0fff0155;  op2val:0xf7ef01090b552001
TEST_PKRR_OP(uksub8, x31, x30, x29, 0x0000000000000000, 0x2200cef0fff0155, 0xf7ef01090b552001, x30, x1, 864, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 110*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
