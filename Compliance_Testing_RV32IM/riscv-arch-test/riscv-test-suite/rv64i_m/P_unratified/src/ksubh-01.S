
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ksubh instruction of the RISC-V RV64PZicsr extension for the ksubh covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ksubh)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 == rd != rs2, rs1==x24, rs2==x12, rd==x24, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h3_val == -257, rs2_h1_val == 32767, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs1_h2_val == 128, rs2_h2_val == -33, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val == 64, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h3_val == -3
// opcode: ksubh ; op1:x24; op2:x12; dest:x24; op1val:0xfffd008000408000;  op2val:0xfeffffdf7fff0005
TEST_PKRR_OP(ksubh, x24, x24, x12, 0x0000000000000000, 0xfffd008000408000, 0xfeffffdf7fff0005, x24, x11, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x10, rs2==x1, rd==x12, rs1_h3_val == rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val == -1025, rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -33, rs2_h2_val == 8, rs2_h0_val == 16384
// opcode: ksubh ; op1:x10; op2:x1; dest:x12; op1val:0x06fbffffdf7fff;  op2val:0x06000800074000
TEST_PKRR_OP(ksubh, x12, x10, x1, 0x0000000000000000, 0x06fbffffdf7fff, 0x06000800074000, x10, x11, 16, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x29, rs2==x29, rd==x5, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 1024, rs1_h0_val == -5, rs2_h0_val == 32767, rs2_h2_val == -5, rs2_h3_val == 2048, rs1_h1_val == -16385, rs2_h1_val == 32
// opcode: ksubh ; op1:x29; op2:x29; dest:x5; op1val:0xfff80400bffffffb;  op2val:0x800fffb00207fff
TEST_PKRR_OP(ksubh, x5, x29, x29, 0x0000000000000000, 0xfff80400bffffffb, 0x800fffb00207fff, x29, x11, 32, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x19, rs2==x19, rd==x19, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h0_val == 16, rs1_h3_val == 128, rs2_h3_val == -65, rs2_h1_val == -65, rs1_h2_val == 4, rs1_h1_val > 0 and rs2_h1_val < 0
// opcode: ksubh ; op1:x19; op2:x19; dest:x19; op1val:0x8000043ffffff8;  op2val:0xffbffffcffbf0010
TEST_PKRR_OP(ksubh, x19, x19, x19, 0x0000000000000000, 0x8000043ffffff8, 0xffbffffcffbf0010, x19, x11, 48, x3)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x23, rd==x23, rs1_h2_val == rs2_h2_val, rs2_h1_val == -8193, rs1_h1_val == 1024, rs1_h2_val == 16, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h0_val == -65, rs1_h3_val == -129, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 1, rs2_h3_val == 8, rs2_h2_val == 16
// opcode: ksubh ; op1:x5; op2:x23; dest:x23; op1val:0xff7f001004000001;  op2val:0x080010dfffffbf
TEST_PKRR_OP(ksubh, x23, x5, x23, 0x0000000000000000, 0xff7f001004000001, 0x080010dfffffbf, x5, x11, 64, x3)

inst_5:
// rs1==x16, rs2==x9, rd==x20, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h2_val == -1, rs1_h0_val == 64, rs1_h1_val == -21846, rs1_h3_val == -2, rs1_h2_val == -9
// opcode: ksubh ; op1:x16; op2:x9; dest:x20; op1val:0xfffefff7aaaa0040;  op2val:0xfff9ffff0007fffc
TEST_PKRR_OP(ksubh, x20, x16, x9, 0x0000000000000000, 0xfffefff7aaaa0040, 0xfff9ffff0007fffc, x16, x11, 80, x3)

inst_6:
// rs1==x28, rs2==x26, rd==x21, rs1_h1_val == rs2_h1_val, rs1_h2_val == -3, rs1_h0_val == -2, rs1_h3_val == -2049
// opcode: ksubh ; op1:x28; op2:x26; dest:x21; op1val:0xf7fffffd0006fffe;  op2val:0xfffcc00000060010
TEST_PKRR_OP(ksubh, x21, x28, x26, 0x0000000000000000, 0xf7fffffd0006fffe, 0xfffcc00000060010, x28, x11, 96, x3)

inst_7:
// rs1==x0, rs2==x4, rd==x1, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == -8193, rs2_h1_val == -257, rs2_h3_val == 16384, rs1_h3_val == -17, rs1_h0_val < 0 and rs2_h0_val < 0
// opcode: ksubh ; op1:x0; op2:x4; dest:x1; op1val:0xffef0080fff6fff6;  op2val:0x4000dffffefffffa
TEST_PKRR_OP(ksubh, x1, x0, x4, 0x0000000000000000, 0xffef0080fff6fff6, 0x4000dffffefffffa, x0, x11, 112, x3)

inst_8:
// rs1==x27, rs2==x8, rd==x0, rs1_h0_val == rs2_h0_val, rs1_h2_val == 4096, rs2_h2_val == -65, rs2_h1_val == -33, rs2_h0_val == -5, rs2_h3_val == 2, rs1_h1_val == -257
// opcode: ksubh ; op1:x27; op2:x8; dest:x0; op1val:0xfff91000fefffffb;  op2val:0x02ffbfffdffffb
TEST_PKRR_OP(ksubh, x0, x27, x8, 0x0000000000000000, 0xfff91000fefffffb, 0x02ffbfffdffffb, x27, x11, 128, x3)

inst_9:
// rs1==x25, rs2==x14, rd==x29, rs2_h3_val == -21846, rs1_h0_val == 8, rs2_h1_val == 128, rs1_h2_val == 21845
// opcode: ksubh ; op1:x25; op2:x14; dest:x29; op1val:0xfff8555500030008;  op2val:0xaaaa000800803fff
TEST_PKRR_OP(ksubh, x29, x25, x14, 0x0000000000000000, 0xfff8555500030008, 0xaaaa000800803fff, x25, x11, 144, x3)

inst_10:
// rs1==x7, rs2==x24, rd==x15, rs2_h3_val == 21845, rs1_h3_val == 8, rs1_h1_val == 8, rs1_h2_val == -129, rs2_h0_val == 2048, rs2_h2_val == -21846
// opcode: ksubh ; op1:x7; op2:x24; dest:x15; op1val:0x08ff7f00080005;  op2val:0x5555aaaa00030800
TEST_PKRR_OP(ksubh, x15, x7, x24, 0x0000000000000000, 0x08ff7f00080005, 0x5555aaaa00030800, x7, x11, 160, x3)

inst_11:
// rs1==x8, rs2==x30, rd==x13, rs2_h3_val == 32767, rs2_h2_val == 1024, rs1_h0_val == 128, rs2_h1_val == 2048
// opcode: ksubh ; op1:x8; op2:x30; dest:x13; op1val:0x060003fff90080;  op2val:0x7fff04000800ffbf
TEST_PKRR_OP(ksubh, x13, x8, x30, 0x0000000000000000, 0x060003fff90080, 0x7fff04000800ffbf, x8, x11, 176, x3)

inst_12:
// rs1==x22, rs2==x2, rd==x8, rs2_h3_val == -16385, rs2_h1_val == -21846, rs1_h3_val == 512, rs2_h2_val == -1025, rs1_h0_val == 512, rs1_h2_val == 2, rs2_h0_val == -33, rs1_h1_val == -1
// opcode: ksubh ; op1:x22; op2:x2; dest:x8; op1val:0x2000002ffff0200;  op2val:0xbffffbffaaaaffdf
TEST_PKRR_OP(ksubh, x8, x22, x2, 0x0000000000000000, 0x2000002ffff0200, 0xbffffbffaaaaffdf, x22, x11, 192, x3)

inst_13:
// rs1==x6, rs2==x28, rd==x25, rs2_h3_val == -8193, rs2_h0_val == 0, rs1_h1_val == 512, rs2_h2_val == -3, rs1_h0_val == -257, rs2_h1_val == 8
// opcode: ksubh ; op1:x6; op2:x28; dest:x25; op1val:0x053fff0200feff;  op2val:0xdffffffd00080000
TEST_PKRR_OP(ksubh, x25, x6, x28, 0x0000000000000000, 0x053fff0200feff, 0xdffffffd00080000, x6, x11, 208, x3)

inst_14:
// rs1==x3, rs2==x15, rd==x22, rs2_h3_val == -4097, rs1_h0_val == 32, rs1_h2_val == 32, rs2_h0_val == -21846, rs1_h1_val == -9
// opcode: ksubh ; op1:x3; op2:x15; dest:x22; op1val:0x3fff0020fff70020;  op2val:0xeffffffb0080aaaa
TEST_PKRR_OP(ksubh, x22, x3, x15, 0x0000000000000000, 0x3fff0020fff70020, 0xeffffffb0080aaaa, x3, x11, 224, x12)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_15:
// rs1==x21, rs2==x11, rd==x27, rs2_h3_val == -2049, rs1_h1_val == -5, rs2_h0_val == 32, rs1_h3_val == 16, rs2_h2_val == -257, rs1_h0_val == 21845, rs1_h2_val == -65
// opcode: ksubh ; op1:x21; op2:x11; dest:x27; op1val:0x10ffbffffb5555;  op2val:0xf7fffefffffa0020
TEST_PKRR_OP(ksubh, x27, x21, x11, 0x0000000000000000, 0x10ffbffffb5555, 0xf7fffefffffa0020, x21, x8, 0, x12)

inst_16:
// rs1==x11, rs2==x6, rd==x10, rs2_h3_val == -1025, rs1_h1_val == 256, rs2_h2_val == 512, rs1_h3_val == -33, rs1_h0_val == -16385, rs2_h1_val == 16, rs2_h0_val == 256
// opcode: ksubh ; op1:x11; op2:x6; dest:x10; op1val:0xffdffffd0100bfff;  op2val:0xfbff020000100100
TEST_PKRR_OP(ksubh, x10, x11, x6, 0x0000000000000000, 0xffdffffd0100bfff, 0xfbff020000100100, x11, x8, 16, x12)

inst_17:
// rs1==x30, rs2==x16, rd==x17, rs2_h3_val == -513, rs1_h3_val == 64, rs2_h0_val == -17, rs2_h1_val == -32768, rs1_h0_val == -8193, rs1_h1_val == -65
// opcode: ksubh ; op1:x30; op2:x16; dest:x17; op1val:0x40fffaffbfdfff;  op2val:0xfdfffffa8000ffef
TEST_PKRR_OP(ksubh, x17, x30, x16, 0x0000000000000000, 0x40fffaffbfdfff, 0xfdfffffa8000ffef, x30, x8, 32, x12)

inst_18:
// rs1==x2, rs2==x3, rd==x7, rs2_h3_val == -129, rs1_h3_val == 4096, rs1_h0_val == -513, rs2_h0_val == -257
// opcode: ksubh ; op1:x2; op2:x3; dest:x7; op1val:0x1000c000fff7fdff;  op2val:0xff7ffff6fff6feff
TEST_PKRR_OP(ksubh, x7, x2, x3, 0x0000000000000000, 0x1000c000fff7fdff, 0xff7ffff6fff6feff, x2, x8, 48, x12)

inst_19:
// rs1==x26, rs2==x17, rd==x28, rs2_h3_val == -33, rs1_h3_val == 1024, rs2_h1_val == -129, rs1_h2_val == -257, rs1_h0_val == -1, rs2_h2_val == 1
// opcode: ksubh ; op1:x26; op2:x17; dest:x28; op1val:0x400feff0200ffff;  op2val:0xffdf0001ff7fffdf
TEST_PKRR_OP(ksubh, x28, x26, x17, 0x0000000000000000, 0x400feff0200ffff, 0xffdf0001ff7fffdf, x26, x8, 64, x12)

inst_20:
// rs1==x20, rs2==x25, rd==x30, rs2_h3_val == -17, rs1_h0_val == 4, rs1_h2_val == -4097, rs1_h1_val == 21845, rs2_h2_val == -129
// opcode: ksubh ; op1:x20; op2:x25; dest:x30; op1val:0x40efff55550004;  op2val:0xffefff7ffffafffc
TEST_PKRR_OP(ksubh, x30, x20, x25, 0x0000000000000000, 0x40efff55550004, 0xffefff7ffffafffc, x20, x8, 80, x12)

inst_21:
// rs1==x4, rs2==x7, rd==x9, rs2_h3_val == -9, rs1_h0_val == -33, rs1_h3_val == 0, rs2_h1_val == 64
// opcode: ksubh ; op1:x4; op2:x7; dest:x9; op1val:0x0055550009ffdf;  op2val:0xfff700090040ffbf
TEST_PKRR_OP(ksubh, x9, x4, x7, 0x0000000000000000, 0x0055550009ffdf, 0xfff700090040ffbf, x4, x8, 96, x12)

inst_22:
// rs1==x31, rs2==x18, rd==x14, rs2_h3_val == -5, rs2_h2_val == 32, rs1_h1_val == -2, rs2_h1_val == -2049
// opcode: ksubh ; op1:x31; op2:x18; dest:x14; op1val:0x3fff0010fffe0020;  op2val:0xfffb0020f7ffffdf
TEST_PKRR_OP(ksubh, x14, x31, x18, 0x0000000000000000, 0x3fff0010fffe0020, 0xfffb0020f7ffffdf, x31, x8, 112, x12)

inst_23:
// rs1==x14, rs2==x21, rd==x16, rs2_h3_val == -3, rs1_h1_val == 16384, rs1_h3_val == 4, rs2_h1_val == -513, rs2_h2_val == 2048, rs1_h2_val == -2049
// opcode: ksubh ; op1:x14; op2:x21; dest:x16; op1val:0x04f7ff40000040;  op2val:0xfffd0800fdff0003
TEST_PKRR_OP(ksubh, x16, x14, x21, 0x0000000000000000, 0x04f7ff40000040, 0xfffd0800fdff0003, x14, x8, 128, x12)

inst_24:
// rs1==x13, rs2==x10, rd==x11, rs2_h3_val == -2, rs2_h2_val == 4096, rs2_h0_val == -9, rs2_h1_val == -1, rs1_h2_val == 2048
// opcode: ksubh ; op1:x13; op2:x10; dest:x11; op1val:0x4008000040fffb;  op2val:0xfffe1000fffffff7
TEST_PKRR_OP(ksubh, x11, x13, x10, 0x0000000000000000, 0x4008000040fffb, 0xfffe1000fffffff7, x13, x8, 144, x12)

inst_25:
// rs1==x15, rs2==x5, rd==x6, rs2_h3_val == -32768, rs1_h1_val == -32768, rs2_h1_val == 16384
// opcode: ksubh ; op1:x15; op2:x5; dest:x6; op1val:0x093fff80000040;  op2val:0x8000fbff4000ffef
TEST_PKRR_OP(ksubh, x6, x15, x5, 0x0000000000000000, 0x093fff80000040, 0x8000fbff4000ffef, x15, x8, 160, x12)

inst_26:
// rs1==x9, rs2==x27, rd==x3, rs2_h3_val == 8192, rs1_h0_val == 8192, rs2_h1_val == 4096, rs1_h3_val == -9
// opcode: ksubh ; op1:x9; op2:x27; dest:x3; op1val:0xfff73fff00062000;  op2val:0x200010001000ffdf
TEST_PKRR_OP(ksubh, x3, x9, x27, 0x0000000000000000, 0xfff73fff00062000, 0x200010001000ffdf, x9, x8, 176, x12)

inst_27:
// rs1==x23, rs2==x0, rd==x31, rs2_h3_val == 4096, rs1_h3_val == -257, rs2_h0_val == 1024, rs1_h1_val == 8192, rs2_h2_val == 256
// opcode: ksubh ; op1:x23; op2:x0; dest:x31; op1val:0xfefff7ff20000003;  op2val:0x10000100dfff0400
TEST_PKRR_OP(ksubh, x31, x23, x0, 0x0000000000000000, 0xfefff7ff20000003, 0x10000100dfff0400, x23, x8, 192, x12)

inst_28:
// rs1==x18, rs2==x20, rd==x4, rs2_h3_val == 1024, rs1_h1_val == 128, rs2_h0_val == 128
// opcode: ksubh ; op1:x18; op2:x20; dest:x4; op1val:0xfeff00070080fdff;  op2val:0x400ffffc0000080
TEST_PKRR_OP(ksubh, x4, x18, x20, 0x0000000000000000, 0xfeff00070080fdff, 0x400ffffc0000080, x18, x8, 208, x12)

inst_29:
// rs1==x1, rs2==x13, rd==x26, rs2_h3_val == 512, rs2_h1_val == 256, rs1_h3_val == 8192, rs2_h0_val == 1
// opcode: ksubh ; op1:x1; op2:x13; dest:x26; op1val:0x2000fff880000009;  op2val:0x200010001000001
TEST_PKRR_OP(ksubh, x26, x1, x13, 0x0000000000000000, 0x2000fff880000009, 0x200010001000001, x1, x8, 224, x12)

inst_30:
// rs1==x17, rs2==x22, rd==x18, rs2_h3_val == 256, rs1_h3_val == -21846, rs2_h0_val == -129
// opcode: ksubh ; op1:x17; op2:x22; dest:x18; op1val:0xaaaaff7f04000006;  op2val:0x1000001fff8ff7f
TEST_PKRR_OP(ksubh, x18, x17, x22, 0x0000000000000000, 0xaaaaff7f04000006, 0x1000001fff8ff7f, x17, x8, 240, x3)

inst_31:
// rs1==x12, rs2==x31, rd==x2, rs2_h3_val == 128, rs2_h1_val == 21845, rs2_h0_val == 4, rs1_h2_val == -21846, rs1_h1_val == 4096
// opcode: ksubh ; op1:x12; op2:x31; dest:x2; op1val:0xc000aaaa10000080;  op2val:0x80080055550004
TEST_PKRR_OP(ksubh, x2, x12, x31, 0x0000000000000000, 0xc000aaaa10000080, 0x80080055550004, x12, x8, 256, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs2_h3_val == 64, rs2_h1_val == 2, rs2_h0_val == -2049
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x03c00010003fff;  op2val:0x4000050002f7ff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x03c00010003fff, 0x4000050002f7ff, x30, x1, 0, x3)

inst_33:
// rs1_h1_val == -3, rs2_h0_val == -1, rs1_h2_val == -1, rs2_h1_val == -2, rs1_h0_val == 0, rs2_h3_val == 16
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x200fffffffd0000;  op2val:0x100008fffeffff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x200fffffffd0000, 0x100008fffeffff, x30, x1, 16, x3)

inst_34:
// rs1_h1_val == 2048, rs1_h3_val == -1025, rs1_h0_val == 16, rs2_h0_val == -2, rs2_h1_val == -17
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfbffff7f08000010;  op2val:0x03ffffffeffffe
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xfbffff7f08000010, 0x03ffffffeffffe, x30, x1, 32, x3)

inst_35:
// rs1_h1_val == 32, rs1_h2_val == -8193, rs2_h2_val == 128
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x08dfff00200080;  op2val:0x8000080feff0100
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x08dfff00200080, 0x8000080feff0100, x30, x1, 48, x3)

inst_36:
// rs1_h1_val == 16, rs1_h3_val == 32, rs1_h0_val == -129
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x2000050010ff7f;  op2val:0x40010003fff0000
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x2000050010ff7f, 0x40010003fff0000, x30, x1, 64, x3)

inst_37:
// rs1_h1_val == 4, rs2_h2_val == 64, rs1_h2_val == 8192, rs2_h1_val == 0
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x400200000040009;  op2val:0xfeff00400000f7ff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x400200000040009, 0xfeff00400000f7ff, x30, x1, 80, x3)

inst_38:
// rs1_h1_val == 2, rs2_h1_val == -4097, rs1_h0_val == 16384, rs1_h3_val == -16385, rs2_h2_val == 4, rs2_h0_val == 512
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xbfff002000024000;  op2val:0x20000004efff0200
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xbfff002000024000, 0x20000004efff0200, x30, x1, 96, x3)

inst_39:
// rs1_h1_val == 1, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x80fff90001ffff;  op2val:0xc0000080fff6ffbf
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x80fff90001ffff, 0xc0000080fff6ffbf, x30, x1, 112, x3)

inst_40:
// rs1_h1_val == 0, rs2_h1_val == 1024, rs1_h0_val == 4096, rs1_h2_val == 1
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x20000100001000;  op2val:0x0600040400fff7
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x20000100001000, 0x0600040400fff7, x30, x1, 128, x3)

inst_41:
// rs1_h0_val == -21846, rs2_h1_val == -5, rs2_h2_val == -513, rs1_h3_val == -4097
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xefff0020bfffaaaa;  op2val:0xf7fffdfffffbfffc
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xefff0020bfffaaaa, 0xf7fffdfffffbfffc, x30, x1, 144, x3)

inst_42:
// rs1_h0_val == -4097, rs2_h2_val == 8192, rs2_h1_val == -3, rs1_h2_val == 256
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x3fff01000040efff;  op2val:0x102000fffd0000
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x3fff01000040efff, 0x102000fffd0000, x30, x1, 160, x3)

inst_43:
// rs1_h0_val == -2049, rs1_h3_val == 21845, rs2_h3_val == 32, rs1_h1_val == -2049
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x55552000f7fff7ff;  op2val:0x20ff7f00200200
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x55552000f7fff7ff, 0x20ff7f00200200, x30, x1, 176, x3)

inst_44:
// rs1_h0_val == -1025, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fff7fff6fbff;  op2val:0x400040000030003
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xfff8fff7fff6fbff, 0x400040000030003, x30, x1, 192, x3)

inst_45:
// rs1_h0_val == -65, rs2_h1_val == 1
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x55550020ffdfffbf;  op2val:0x400004000010004
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x55550020ffdfffbf, 0x400004000010004, x30, x1, 208, x3)

inst_46:
// rs1_h0_val == -17, rs2_h3_val == 0, rs1_h3_val == -65, rs1_h2_val == 512
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0200c000ffef;  op2val:0x00fffbfff60001
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xffbf0200c000ffef, 0x00fffbfff60001, x30, x1, 224, x3)

inst_47:
// rs1_h0_val == -9, rs1_h3_val == 256, rs2_h2_val == 21845
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x100feff0009fff7;  op2val:0xfffc55550040fffa
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x100feff0009fff7, 0xfffc55550040fffa, x30, x1, 240, x3)

inst_48:
// rs1_h0_val == -3, rs2_h1_val == 512
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xc000fffac000fffd;  op2val:0xfdff020002000000
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xc000fffac000fffd, 0xfdff020002000000, x30, x1, 256, x3)

inst_49:
// rs1_h0_val == 2048, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x400fffd00030800;  op2val:0xc000feff0003ffbf
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x400fffd00030800, 0xc000feff0003ffbf, x30, x1, 272, x3)

inst_50:
// rs1_h0_val == 1024, rs2_h1_val == -16385, rs2_h3_val == -1
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x803fff00030400;  op2val:0xfffffffcbfffffef
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x803fff00030400, 0xfffffffcbfffffef, x30, x1, 288, x3)

inst_51:
// rs2_h1_val == 4, rs2_h2_val == -32768
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffafffbf7ff;  op2val:0xfff6800000040000
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xfff7fffafffbf7ff, 0xfff6800000040000, x30, x1, 304, x3)

inst_52:
// rs2_h0_val == 21845, rs1_h0_val == 256
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffbf00020100;  op2val:0xffff000802005555
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x3fffffbf00020100, 0xffff000802005555, x30, x1, 320, x3)

inst_53:
// rs2_h0_val == -16385, rs2_h1_val == 8192
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff8fff98000;  op2val:0x40feff2000bfff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xffdffff8fff98000, 0x40feff2000bfff, x30, x1, 336, x3)

inst_54:
// rs2_h0_val == -8193, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x4000090200aaaa;  op2val:0xfeffaaaaf7ffdfff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x4000090200aaaa, 0xfeffaaaaf7ffdfff, x30, x1, 352, x3)

inst_55:
// rs2_h0_val == -4097, rs1_h2_val == -33, rs1_h1_val == -8193
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfff9ffdfdfff7fff;  op2val:0x800fdfffff8efff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xfff9ffdfdfff7fff, 0x800fdfffff8efff, x30, x1, 368, x3)

inst_56:
// rs2_h0_val == -1025, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x10000800000fff8;  op2val:0xfffb0005ff7ffbff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x10000800000fff8, 0xfffb0005ff7ffbff, x30, x1, 384, x3)

inst_57:
// rs2_h0_val == -513, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x200000050008bfff;  op2val:0x5555fffc0002fdff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x200000050008bfff, 0x5555fffc0002fdff, x30, x1, 400, x3)

inst_58:
// rs2_h0_val == -3, rs1_h2_val == -17
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x08ffeffffb0200;  op2val:0xc00000100100fffd
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x08ffeffffb0200, 0xc00000100100fffd, x30, x1, 416, x3)

inst_59:
// rs2_h0_val == -32768, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x03fbfffffc0000;  op2val:0x02fffafff98000
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x03fbfffffc0000, 0x02fffafff98000, x30, x1, 432, x3)

inst_60:
// rs2_h0_val == 8192, rs1_h2_val == -16385
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xffdfbffffffe2000;  op2val:0xefff0001ffef2000
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xffdfbffffffe2000, 0xefff0001ffef2000, x30, x1, 448, x3)

inst_61:
// rs2_h0_val == 4096, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x100ffff00090005;  op2val:0xfffe200055551000
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x100ffff00090005, 0xfffe200055551000, x30, x1, 464, x3)

inst_62:
// rs2_h0_val == 64, rs2_h2_val == -2049
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffbffffb0008;  op2val:0x80f7ffffef0040
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xfffeffbffffb0008, 0x80f7ffffef0040, x30, x1, 480, x3)

inst_63:
// rs2_h0_val == 8, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffceffffff60001;  op2val:0x8000fffb00060008
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xfffceffffff60001, 0x8000fffb00060008, x30, x1, 496, x3)

inst_64:
// rs2_h0_val == 2, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x100000600100200;  op2val:0xfffc000540000002
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x100000600100200, 0xfffc000540000002, x30, x1, 512, x3)

inst_65:
// rs1_h3_val == 32767, rs1_h2_val == -32768
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x7fff800000044000;  op2val:0x200fbff3ffffffb
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x7fff800000044000, 0x200fbff3ffffffb, x30, x1, 528, x3)

inst_66:
// rs1_h3_val == -8193, rs2_h2_val == -16385
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xdfff008000074000;  op2val:0xfdffbfff0400aaaa
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xdfff008000074000, 0xfdffbfff0400aaaa, x30, x1, 544, x3)

inst_67:
// rs1_h3_val == -513, rs1_h2_val == 0
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0000fff80005;  op2val:0x08bffffeff5555
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xfdff0000fff80005, 0x08bffffeff5555, x30, x1, 560, x3)

inst_68:
// rs1_h0_val == 2, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xffef0400fff90002;  op2val:0xff7f08000002aaaa
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xffef0400fff90002, 0xff7f08000002aaaa, x30, x1, 576, x3)

inst_69:
// rs2_h3_val == 4, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xdfff800000100400;  op2val:0x040010fffc5555
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xdfff800000100400, 0x040010fffc5555, x30, x1, 592, x3)

inst_70:
// rs1_h3_val == 2048, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x800fffd0080ffff;  op2val:0x55550003ffdf8000
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x800fffd0080ffff, 0x55550003ffdf8000, x30, x1, 608, x3)

inst_71:
// rs2_h2_val == -4097, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x8001000f7fffff8;  op2val:0xefffefff80000080
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x8001000f7fffff8, 0xefffefff80000080, x30, x1, 624, x3)

inst_72:
// rs1_h3_val == 2, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x02ffef00082000;  op2val:0xffef08000008aaaa
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x02ffef00082000, 0xffef08000008aaaa, x30, x1, 640, x3)

inst_73:
// rs2_h2_val == -17, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff8fffcc000;  op2val:0x08ffef00030100
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x7ffffff8fffcc000, 0x08ffef00030100, x30, x1, 656, x3)

inst_74:
// rs1_h3_val == 1, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x010009fff60010;  op2val:0x200000300107fff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x010009fff60010, 0x200000300107fff, x30, x1, 672, x3)

inst_75:
// rs2_h2_val == -9, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x10fff700081000;  op2val:0xf7fffff70008dfff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x10fff700081000, 0xf7fffff70008dfff, x30, x1, 688, x3)

inst_76:
// rs1_h3_val == -1, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xffff3fff10000009;  op2val:0xfffe80000006f7ff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xffff3fff10000009, 0xfffe80000006f7ff, x30, x1, 704, x3)

inst_77:
// rs2_h2_val == -2, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffa000955550002;  op2val:0x02fffe0800fffe
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xfffa000955550002, 0x02fffe0800fffe, x30, x1, 720, x3)

inst_78:
// rs1_h2_val == 32767, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x047fff4000ffef;  op2val:0xfff900010100ffdf
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x047fff4000ffef, 0xfff900010100ffdf, x30, x1, 736, x3)

inst_79:
// rs2_h2_val == 16384, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x200fffd00050400;  op2val:0xfffd4000bfff0400
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x200fffd00050400, 0xfffd4000bfff0400, x30, x1, 752, x3)

inst_80:
// rs1_h2_val == -513, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffefdffffbf0009;  op2val:0x80000040fdff3fff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xfffefdffffbf0009, 0x80000040fdff3fff, x30, x1, 768, x3)

inst_81:
// rs1_h2_val == -5, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffb00071000;  op2val:0x04000900000020
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x3ffffffb00071000, 0x04000900000020, x30, x1, 784, x3)

inst_82:
// rs2_h2_val == 2, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafbff4000ffbf;  op2val:0x800000028000feff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xaaaafbff4000ffbf, 0x800000028000feff, x30, x1, 800, x3)

inst_83:
// rs1_h2_val == -2, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xc000fffefffcfeff;  op2val:0x07fffdfff80001
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xc000fffefffcfeff, 0x07fffdfff80001, x30, x1, 816, x3)

inst_84:
// rs2_h2_val == 0, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x20fffbfff70400;  op2val:0x0000000040fff9
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x20fffbfff70400, 0x0000000040fff9, x30, x1, 832, x3)

inst_85:
// rs1_h3_val == -5, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff1000f7ff;  op2val:0x060010fffbfffe
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xfffbffff1000f7ff, 0x060010fffbfffe, x30, x1, 848, x3)

inst_86:
// rs1_h2_val == 16384, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffc400008000010;  op2val:0xc0000003fffefffa
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xfffc400008000010, 0xc0000003fffefffa, x30, x1, 864, x3)

inst_87:
// rs2_h1_val == -1025, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x08fff8fffe0001;  op2val:0x1001000fbfffdff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x08fff8fffe0001, 0x1001000fbfffdff, x30, x1, 880, x3)

inst_88:
// rs1_h2_val == 64, rs2_h3_val == 1
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffb00400010ffff;  op2val:0x0180000009fffa
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xfffb00400010ffff, 0x0180000009fffa, x30, x1, 896, x3)

inst_89:
// rs1_h2_val == 8, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfff70008dfff8000;  op2val:0x1000010fffe0009
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xfff70008dfff8000, 0x1000010fffe0009, x30, x1, 912, x3)

inst_90:
// rs2_h1_val == -9, rs1_h1_val == -17
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffaffeffff7;  op2val:0xaaaa2000fff7ffff
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xfffcfffaffeffff7, 0xaaaa2000fff7ffff, x30, x1, 928, x3)

inst_91:
// rs1_h3_val == -32768, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffdfffddfff;  op2val:0xfffcaaaa00040400
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x8000fffdfffddfff, 0xfffcaaaa00040400, x30, x1, 944, x3)

inst_92:
// rs1_h1_val == 32767, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xffff3fff7fff0005;  op2val:0x00fffb00094000
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xffff3fff7fff0005, 0x00fffb00094000, x30, x1, 960, x3)

inst_93:
// rs1_h1_val == -4097, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffff7fefff1000;  op2val:0x800080fff80000
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xf7ffff7fefff1000, 0x800080fff80000, x30, x1, 976, x3)

inst_94:
// rs1_h1_val == -1025, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffeffffbff0002;  op2val:0x2008000ff7f0001
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xf7ffeffffbff0002, 0x2008000ff7f0001, x30, x1, 992, x3)

inst_95:
// rs1_h1_val == -513, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x20c000fdff0006;  op2val:0xffff200020000040
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x20c000fdff0006, 0xffff200020000040, x30, x1, 1008, x3)

inst_96:
// rs1_h1_val == -129, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x80004000ff7f0400;  op2val:0xfffbfff9fffaffbf
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x80004000ff7f0400, 0xfffbfff9fffaffbf, x30, x1, 1024, x3)

inst_97:
// rs1_h3_val == 16384, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffcbffffffa;  op2val:0xfdfffff900060020
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x4000fffcbffffffa, 0xfdfffff900060020, x30, x1, 1040, x3)

inst_98:
// rs2_h2_val == 32767, 
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x2000010000003fff;  op2val:0x057ffff7fffff7
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x2000010000003fff, 0x057ffff7fffff7, x30, x1, 1056, x3)

inst_99:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h0_val == 16, rs1_h3_val == 128, rs2_h3_val == -65, rs2_h1_val == -65, rs1_h2_val == 4, rs1_h1_val > 0 and rs2_h1_val < 0
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0x8000043ffffff8;  op2val:0xffbffffcffbf0010
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0x8000043ffffff8, 0xffbffffcffbf0010, x30, x1, 1072, x3)

inst_100:
// rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == -8193, rs2_h1_val == -257, rs2_h3_val == 16384, rs1_h3_val == -17, rs1_h0_val < 0 and rs2_h0_val < 0
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xffef0080fff6fff6;  op2val:0x4000dffffefffffa
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xffef0080fff6fff6, 0x4000dffffefffffa, x30, x1, 1088, x3)

inst_101:
// rs1_h0_val == rs2_h0_val, rs1_h2_val == 4096, rs2_h2_val == -65, rs2_h1_val == -33, rs2_h0_val == -5, rs2_h3_val == 2, rs1_h1_val == -257
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfff91000fefffffb;  op2val:0x02ffbfffdffffb
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xfff91000fefffffb, 0x02ffbfffdffffb, x30, x1, 1104, x3)

inst_102:
// rs2_h3_val == 4096, rs1_h3_val == -257, rs2_h0_val == 1024, rs1_h1_val == 8192, rs2_h2_val == 256
// opcode: ksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfefff7ff20000003;  op2val:0x10000100dfff0400
TEST_PKRR_OP(ksubh, x31, x30, x29, 0x0000000000000000, 0xfefff7ff20000003, 0x10000100dfff0400, x30, x1, 1120, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x8_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 142*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
