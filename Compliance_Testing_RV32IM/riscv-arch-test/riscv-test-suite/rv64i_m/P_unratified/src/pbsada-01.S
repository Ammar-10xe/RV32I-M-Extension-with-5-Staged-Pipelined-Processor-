
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pbsada instruction of the RISC-V RV64PZicsr extension for the pbsada covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pbsada)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x8, rs2==x12, rd==x8, rs1_b0_val == 0, rs1_b7_val != rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b6_val != rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b5_val == 64, rs1_b5_val != rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b5_val == 16, rs1_b4_val != rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b3_val == 247, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b3_val == 8, rs1_b6_val == 8, rs2_b6_val == 4, rs1_b2_val == 223, rs2_b1_val == 1, rs1_b4_val == 2, rs2_b2_val == 128
// opcode: pbsada ; op1:x8; op2:x12; dest:x8; op1val:0x6084002f7df1200;  op2val:0xb04100d08800106
TEST_RR_OP(pbsada, x8, x8, x12, 0x0000000000000000, 0x6084002f7df1200, 0xb04100d08800106, x1, 0, x9)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x24, rs2==x5, rd==x30, rs1_b7_val == rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b2_val == 1, rs2_b3_val == 247, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b4_val == 223, rs2_b7_val == 191, rs1_b7_val == 191, rs1_b2_val == 85, rs1_b1_val == 8, rs1_b4_val == 64
// opcode: pbsada ; op1:x24; op2:x5; dest:x30; op1val:0xbf0909400355080a;  op2val:0xbf0305dff7010e06
TEST_RR_OP(pbsada, x30, x24, x5, 0x0000000000000000, 0xbf0909400355080a, 0xbf0305dff7010e06, x1, 8, x9)

inst_2:
// rs1 == rs2 != rd, rs1==x23, rs2==x23, rd==x2, rs1_b6_val == rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b7_val == 2, rs1_b3_val == 85, rs2_b0_val == 253, rs1_b5_val == 16, rs2_b2_val == 255, rs2_b6_val == 253, rs1_b6_val == 253, rs2_b1_val == 247, rs2_b7_val == 239, rs2_b5_val == 127
// opcode: pbsada ; op1:x23; op2:x23; dest:x2; op1val:0x2fd1009550d0f0d;  op2val:0xeffd7f110afff7fd
TEST_RR_OP(pbsada, x2, x23, x23, 0x0000000000000000, 0x2fd1009550d0f0d, 0xeffd7f110afff7fd, x1, 16, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x21, rs2==x21, rd==x21, rs1_b5_val == rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b0_val == 251, rs1_b6_val == 127, rs1_b0_val == 1, rs1_b4_val == 127, rs1_b1_val == 247, rs2_b6_val == 32, rs2_b3_val == 1, rs2_b1_val == 32, rs2_b4_val == 255
// opcode: pbsada ; op1:x21; op2:x21; dest:x21; op1val:0xe7f0d7f0909f701;  op2val:0x12200dff010a20fb
TEST_RR_OP(pbsada, x21, x21, x21, 0x0000000000000000, 0xe7f0d7f0909f701, 0x12200dff010a20fb, x1, 24, x9)

inst_4:
// rs2 == rd != rs1, rs1==x29, rs2==x28, rd==x28, rs1_b4_val == rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b2_val == 16, rs1_b3_val == 191, rs2_b5_val == 64, rs1_b5_val == 1, rs1_b1_val == 254, rs2_b2_val == 247, rs2_b7_val == 32
// opcode: pbsada ; op1:x29; op2:x28; dest:x28; op1val:0xa0d0111bf10fe00;  op2val:0x2009401106f7f705
TEST_RR_OP(pbsada, x28, x29, x28, 0x0000000000000000, 0xa0d0111bf10fe00, 0x2009401106f7f705, x1, 32, x9)

inst_5:
// rs1==x25, rs2==x17, rd==x7, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b7_val == 0, rs1_b2_val == 255, rs2_b3_val == 251, rs1_b3_val == 251, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b7_val == 239, rs1_b1_val == 16, rs1_b5_val == 127, rs2_b1_val == 0
// opcode: pbsada ; op1:x25; op2:x17; dest:x7; op1val:0xef7f7f7ffbff100c;  op2val:0x0c0a0ffbff000a
TEST_RR_OP(pbsada, x7, x25, x17, 0x0000000000000000, 0xef7f7f7ffbff100c, 0x0c0a0ffbff000a, x1, 40, x9)

inst_6:
// rs1==x28, rs2==x4, rd==x29, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b7_val == 1, rs2_b6_val == 247, rs2_b1_val == 223, rs2_b4_val == 85, rs1_b4_val == 85, rs1_b1_val == 223, rs2_b7_val == 127, rs2_b3_val == 0, rs1_b5_val == 191, rs1_b0_val == 85
// opcode: pbsada ; op1:x28; op2:x4; dest:x29; op1val:0x112bf550512df55;  op2val:0x7ff70b550003df0f
TEST_RR_OP(pbsada, x29, x28, x4, 0x0000000000000000, 0x112bf550512df55, 0x7ff70b550003df0f, x1, 48, x9)

inst_7:
// rs1==x20, rs2==x15, rd==x5, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b0_val == 223, rs2_b3_val == 85, rs1_b5_val == 254, rs1_b3_val == 170, rs1_b2_val == 4, rs2_b6_val == 85, rs1_b0_val == 223, rs1_b1_val == 127, rs2_b1_val == 239, rs2_b5_val == 239
// opcode: pbsada ; op1:x20; op2:x15; dest:x5; op1val:0x609fe11aa047fdf;  op2val:0x1355ef05550fefdf
TEST_RR_OP(pbsada, x5, x20, x15, 0x0000000000000000, 0x609fe11aa047fdf, 0x1355ef05550fefdf, x1, 56, x9)

inst_8:
// rs1==x26, rs2==x3, rd==x0, rs2_b7_val == 170, rs1_b5_val == 251, rs2_b2_val == 32, rs1_b0_val == 128, rs1_b6_val == 223, rs2_b6_val == 254, rs1_b3_val == 1, rs1_b1_val == 2, rs1_b4_val == 8
// opcode: pbsada ; op1:x26; op2:x3; dest:x0; op1val:0xbdffb08010d0280;  op2val:0xaafe060a0f200105
TEST_RR_OP(pbsada, x0, x26, x3, 0x0000000000000000, 0xbdffb08010d0280, 0xaafe060a0f200105, x1, 64, x9)

inst_9:
// rs1==x15, rs2==x30, rd==x31, rs2_b7_val == 85, rs2_b3_val == 170, rs1_b7_val == 0, rs1_b6_val == 85, rs1_b1_val == 191, rs1_b4_val == 32, rs1_b2_val == 239
// opcode: pbsada ; op1:x15; op2:x30; dest:x31; op1val:0x55fe200befbf0d;  op2val:0x55051005aa012006
TEST_RR_OP(pbsada, x31, x15, x30, 0x0000000000000000, 0x55fe200befbf0d, 0x55051005aa012006, x1, 72, x9)

inst_10:
// rs1==x4, rs2==x25, rd==x23, rs2_b7_val == 223, rs2_b3_val == 191, rs1_b6_val == 0, rs2_b4_val == 32, rs1_b2_val == 253, rs2_b2_val == 254
// opcode: pbsada ; op1:x4; op2:x25; dest:x23; op1val:0x3000f0d03fd0280;  op2val:0xdf0d7f20bffe0b0b
TEST_RR_OP(pbsada, x23, x4, x25, 0x0000000000000000, 0x3000f0d03fd0280, 0xdf0d7f20bffe0b0b, x1, 80, x9)

inst_11:
// rs1==x19, rs2==x0, rd==x22, rs2_b7_val == 247, rs2_b0_val == 8, rs1_b0_val == 8, rs1_b4_val == 170, rs2_b6_val == 64, rs2_b1_val == 254, rs1_b2_val == 191
// opcode: pbsada ; op1:x19; op2:x0; dest:x22; op1val:0xef05feaa06bf7f08;  op2val:0xf7400a030803fe08
TEST_RR_OP(pbsada, x22, x19, x0, 0x0000000000000000, 0xef05feaa06bf7f08, 0xf7400a030803fe08, x1, 88, x9)

inst_12:
// rs1==x18, rs2==x24, rd==x10, rs2_b7_val == 251, rs2_b3_val == 32, rs2_b0_val == 2, rs1_b4_val == 247, rs2_b4_val == 251, rs1_b7_val == 251, rs1_b5_val == 223
// opcode: pbsada ; op1:x18; op2:x24; dest:x10; op1val:0xfb0bdff70b10090c;  op2val:0xfb030efb200e0f02
TEST_RR_OP(pbsada, x10, x18, x24, 0x0000000000000000, 0xfb0bdff70b10090c, 0xfb030efb200e0f02, x1, 96, x9)

inst_13:
// rs1==x14, rs2==x18, rd==x4, rs2_b7_val == 253, rs1_b2_val == 247, rs2_b0_val == 85, rs2_b5_val == 8
// opcode: pbsada ; op1:x14; op2:x18; dest:x4; op1val:0x130e030801f71107;  op2val:0xfd04081311801155
TEST_RR_OP(pbsada, x4, x14, x18, 0x0000000000000000, 0x130e030801f71107, 0xfd04081311801155, x1, 104, x9)

inst_14:
// rs1==x30, rs2==x29, rd==x20, rs2_b7_val == 254, rs2_b5_val == 128, rs2_b1_val == 127, rs1_b4_val == 1, rs2_b6_val == 0, rs1_b5_val == 239, rs1_b2_val == 254
// opcode: pbsada ; op1:x30; op2:x29; dest:x20; op1val:0xfb00ef010bfedf80;  op2val:0xfe00800eaa0c7f0b
TEST_RR_OP(pbsada, x20, x30, x29, 0x0000000000000000, 0xfb00ef010bfedf80, 0xfe00800eaa0c7f0b, x1, 112, x9)

inst_15:
// rs1==x11, rs2==x10, rd==x17, rs2_b7_val == 128, rs2_b4_val == 0, rs1_b0_val == 191, rs2_b2_val == 0, rs2_b1_val == 85, rs2_b3_val == 255, rs1_b1_val == 0, rs2_b0_val == 170, rs1_b7_val == 16
// opcode: pbsada ; op1:x11; op2:x10; dest:x17; op1val:0x10080e0c0c1100bf;  op2val:0x80130b00ff0055aa
TEST_RR_OP(pbsada, x17, x11, x10, 0x0000000000000000, 0x10080e0c0c1100bf, 0x80130b00ff0055aa, x1, 120, x9)

inst_16:
// rs1==x6, rs2==x31, rd==x13, rs2_b7_val == 64, rs1_b0_val == 253, rs2_b6_val == 239, rs1_b7_val == 170, rs1_b4_val == 239, rs2_b0_val == 127
// opcode: pbsada ; op1:x6; op2:x31; dest:x13; op1val:0xaadf13ef01bf0ffd;  op2val:0x40ef0d0f550c0d7f
TEST_RR_OP(pbsada, x13, x6, x31, 0x0000000000000000, 0xaadf13ef01bf0ffd, 0x40ef0d0f550c0d7f, x1, 128, x9)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_17:
// rs1==x13, rs2==x8, rd==x25, rs2_b7_val == 16, rs2_b3_val == 2, rs1_b2_val == 8, rs2_b1_val == 191, rs1_b4_val == 251
// opcode: pbsada ; op1:x13; op2:x8; dest:x25; op1val:0x3090cfb0c080ffd;  op2val:0x10f7122002ffbf0c
TEST_RR_OP(pbsada, x25, x13, x8, 0x0000000000000000, 0x3090cfb0c080ffd, 0x10f7122002ffbf0c, x4, 0, x21)

inst_18:
// rs1==x12, rs2==x14, rd==x16, rs2_b7_val == 8, rs1_b2_val == 1, rs2_b0_val == 254, rs1_b5_val == 0, rs1_b7_val == 85, rs2_b4_val == 2
// opcode: pbsada ; op1:x12; op2:x14; dest:x16; op1val:0x550800fb1101febf;  op2val:0x8fe0a02bf1220fe
TEST_RR_OP(pbsada, x16, x12, x14, 0x0000000000000000, 0x550800fb1101febf, 0x8fe0a02bf1220fe, x4, 8, x21)

inst_19:
// rs1==x0, rs2==x20, rd==x6, rs2_b7_val == 4, rs1_b7_val == 4, rs2_b6_val == 251, rs2_b5_val == 223
// opcode: pbsada ; op1:x0; op2:x20; dest:x6; op1val:0x4fd117f030d0711;  op2val:0x4fbdf0c0107030c
TEST_RR_OP(pbsada, x6, x0, x20, 0x0000000000000000, 0x4fd117f030d0711, 0x4fbdf0c0107030c, x4, 16, x21)

inst_20:
// rs1==x3, rs2==x11, rd==x18, rs2_b7_val == 2, rs1_b2_val == 64, rs1_b3_val == 253, rs1_b1_val == 170, rs2_b0_val == 255, rs1_b7_val == 223, rs2_b1_val == 255
// opcode: pbsada ; op1:x3; op2:x11; dest:x18; op1val:0xdf7f0f0efd40aadf;  op2val:0x2120b090501ffff
TEST_RR_OP(pbsada, x18, x3, x11, 0x0000000000000000, 0xdf7f0f0efd40aadf, 0x2120b090501ffff, x4, 24, x21)

inst_21:
// rs1==x17, rs2==x6, rd==x26, rs2_b7_val == 1, rs2_b1_val == 251, rs1_b4_val == 223
// opcode: pbsada ; op1:x17; op2:x6; dest:x26; op1val:0x1313df1104f7bf;  op2val:0x10f08110909fbaa
TEST_RR_OP(pbsada, x26, x17, x6, 0x0000000000000000, 0x1313df1104f7bf, 0x10f08110909fbaa, x4, 32, x21)

inst_22:
// rs1==x7, rs2==x16, rd==x15, rs2_b7_val == 255, rs2_b4_val == 64, rs1_b3_val == 255, rs1_b2_val == 251, rs1_b6_val == 170
// opcode: pbsada ; op1:x7; op2:x16; dest:x15; op1val:0x3aafe02fffbf70f;  op2val:0xff550a400e07bf12
TEST_RR_OP(pbsada, x15, x7, x16, 0x0000000000000000, 0x3aafe02fffbf70f, 0xff550a400e07bf12, x4, 40, x21)

inst_23:
// rs1==x2, rs2==x22, rd==x12, rs2_b6_val == 170, rs2_b2_val == 223, rs2_b3_val == 223
// opcode: pbsada ; op1:x2; op2:x22; dest:x12; op1val:0x1307fe090604aa0d;  op2val:0xaa080ddfdf000e
TEST_RR_OP(pbsada, x12, x2, x22, 0x0000000000000000, 0x1307fe090604aa0d, 0xaa080ddfdf000e, x4, 48, x21)

inst_24:
// rs1==x27, rs2==x9, rd==x3, rs2_b6_val == 127, rs1_b0_val == 64, rs1_b5_val == 247
// opcode: pbsada ; op1:x27; op2:x9; dest:x3; op1val:0x911f72012fe0c40;  op2val:0x137fefdf0e0311ff
TEST_RR_OP(pbsada, x3, x27, x9, 0x0000000000000000, 0x911f72012fe0c40, 0x137fefdf0e0311ff, x4, 56, x21)

inst_25:
// rs1==x10, rs2==x7, rd==x24, rs2_b6_val == 191, rs2_b2_val == 64, rs2_b3_val == 127, rs1_b0_val == 251, rs1_b6_val == 255
// opcode: pbsada ; op1:x10; op2:x7; dest:x24; op1val:0x9ff0d0107febffb;  op2val:0x11bf10407f40efaa
TEST_RR_OP(pbsada, x24, x10, x7, 0x0000000000000000, 0x9ff0d0107febffb, 0x11bf10407f40efaa, x4, 64, x21)

inst_26:
// rs1==x31, rs2==x13, rd==x9, rs2_b6_val == 223, rs2_b0_val == 128, rs2_b5_val == 255, rs1_b6_val == 128, rs1_b1_val == 253, rs1_b7_val == 127, rs1_b2_val == 127, rs1_b5_val == 170
// opcode: pbsada ; op1:x31; op2:x13; dest:x9; op1val:0x7f80aaaa0e7ffdfb;  op2val:0xefdfff07010f0180
TEST_RR_OP(pbsada, x9, x31, x13, 0x0000000000000000, 0x7f80aaaa0e7ffdfb, 0xefdfff07010f0180, x4, 72, x21)

inst_27:
// rs1==x1, rs2==x2, rd==x14, rs2_b6_val == 128, rs2_b5_val == 254, rs1_b5_val == 8, rs1_b1_val == 85, rs2_b1_val == 64, rs2_b4_val == 253, rs1_b7_val == 8
// opcode: pbsada ; op1:x1; op2:x2; dest:x14; op1val:0x8ff0809010c550f;  op2val:0x80fefd090c4013
TEST_RR_OP(pbsada, x14, x1, x2, 0x0000000000000000, 0x8ff0809010c550f, 0x80fefd090c4013, x4, 80, x21)

inst_28:
// rs1==x9, rs2==x26, rd==x19, rs2_b6_val == 16, rs1_b5_val == 2, rs2_b3_val == 64, rs1_b6_val == 1
// opcode: pbsada ; op1:x9; op2:x26; dest:x19; op1val:0x70102020abf0305;  op2val:0x55100efd400abf03
TEST_RR_OP(pbsada, x19, x9, x26, 0x0000000000000000, 0x70102020abf0305, 0x55100efd400abf03, x4, 88, x21)

inst_29:
// rs1==x16, rs2==x19, rd==x11, rs2_b6_val == 8, rs1_b0_val == 16, rs2_b5_val == 32, rs1_b6_val == 254
// opcode: pbsada ; op1:x16; op2:x19; dest:x11; op1val:0x12fe1307070e0f10;  op2val:0x90820200fdf07ff
TEST_RR_OP(pbsada, x11, x16, x19, 0x0000000000000000, 0x12fe1307070e0f10, 0x90820200fdf07ff, x4, 96, x21)

inst_30:
// rs1==x22, rs2==x1, rd==x27, rs1_b4_val == 0, rs1_b0_val == 32, rs2_b5_val == 2, rs1_b3_val == 8, rs2_b1_val == 4, rs2_b2_val == 253
// opcode: pbsada ; op1:x22; op2:x1; dest:x27; op1val:0xf00ef00087f1320;  op2val:0x111302fd0cfd0405
TEST_RR_OP(pbsada, x27, x22, x1, 0x0000000000000000, 0xf00ef00087f1320, 0x111302fd0cfd0405, x4, 104, x21)

inst_31:
// rs1==x5, rs2==x27, rd==x1, rs1_b3_val == 127, rs1_b0_val == 247, rs1_b1_val == 239, rs1_b6_val == 2, rs2_b2_val == 85, rs2_b6_val == 255, rs2_b4_val == 16, rs1_b7_val == 64
// opcode: pbsada ; op1:x5; op2:x27; dest:x1; op1val:0x400205557fbfeff7;  op2val:0x12ffef10ff55f780
TEST_RR_OP(pbsada, x1, x5, x27, 0x0000000000000000, 0x400205557fbfeff7, 0x12ffef10ff55f780, x4, 112, x21)

inst_32:
// rs1_b3_val == 223, rs1_b6_val == 4, rs2_b3_val == 239, rs2_b1_val == 8
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xb040ff7df107f00;  op2val:0x80aa1111ef0d08ff
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xb040ff7df107f00, 0x80aa1111ef0d08ff, x4, 120, x21)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_33:
// rs1_b3_val == 239, rs2_b3_val == 16
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x55fd037fef0b1300;  op2val:0xaa03ff0a1005fe13
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x55fd037fef0b1300, 0xaa03ff0a1005fe13, x1, 0, x2)

inst_34:
// rs1_b3_val == 254, rs2_b5_val == 1, rs1_b5_val == 128
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xefff800efef70c08;  op2val:0x111010f062005aa
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xefff800efef70c08, 0x111010f062005aa, x1, 8, x2)

inst_35:
// rs1_b3_val == 128, rs1_b6_val == 251, rs2_b3_val == 128, rs1_b1_val == 64
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xcfbaa0c800140fd;  op2val:0xa0b1213800ffb12
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xcfbaa0c800140fd, 0xa0b1213800ffb12, x1, 16, x2)

inst_36:
// rs1_b3_val == 64, rs2_b4_val == 1
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x413ef034013aaf7;  op2val:0xffdffe010a000cff
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x413ef034013aaf7, 0xffdffe010a000cff, x1, 24, x2)

inst_37:
// rs1_b3_val == 32, rs1_b1_val == 4, rs1_b5_val == 85, rs2_b4_val == 254
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x100c55ef20010400;  op2val:0x1097ffe0cdf200c
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x100c55ef20010400, 0x1097ffe0cdf200c, x1, 32, x2)

inst_38:
// rs1_b3_val == 16, rs1_b1_val == 251, rs2_b2_val == 239, rs2_b0_val == 1
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x213fe07107ffbdf;  op2val:0x680060306ef1201
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x213fe07107ffbdf, 0x680060306ef1201, x1, 40, x2)

inst_39:
// rs1_b3_val == 4, rs2_b1_val == 170, rs1_b6_val == 16, rs1_b0_val == 170
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x551009fb04010caa;  op2val:0xfdf021306ffaafb
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x551009fb04010caa, 0xfdf021306ffaafb, x1, 48, x2)

inst_40:
// rs1_b3_val == 2, rs2_b5_val == 253, rs2_b4_val == 170, rs1_b7_val == 32
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x20050f0102107ff7;  op2val:0xf10fdaa070aef13
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x20050f0102107ff7, 0xf10fdaa070aef13, x1, 56, x2)

inst_41:
// rs1_b3_val == 0, rs2_b3_val == 4, rs2_b4_val == 128
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xa07fb7f000e0210;  op2val:0x127f1180040e0f01
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xa07fb7f000e0210, 0x127f1180040e0f01, x1, 64, x2)

inst_42:
// rs1_b2_val == 170, rs1_b7_val == 253, rs1_b4_val == 254
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xfd0611fe7faa120b;  op2val:0x87f0905110f0b13
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xfd0611fe7faa120b, 0x87f0905110f0b13, x1, 72, x2)

inst_43:
// rs1_b2_val == 128, rs2_b5_val == 85, rs1_b4_val == 253, rs2_b2_val == 127
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x4aaf7fdaa801212;  op2val:0xaa5580117f010b
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x4aaf7fdaa801212, 0xaa5580117f010b, x1, 80, x2)

inst_44:
// rs1_b2_val == 32, rs2_b5_val == 0, rs1_b7_val == 247
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xf70f10007f2008f7;  op2val:0xbffd0080050f0405
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xf70f10007f2008f7, 0xbffd0080050f0405, x1, 88, x2)

inst_45:
// rs1_b2_val == 2, rs1_b1_val == 1
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xdaa10f713020100;  op2val:0x612fe0540550009
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xdaa10f713020100, 0x612fe0540550009, x1, 96, x2)

inst_46:
// rs2_b2_val == 16, rs1_b2_val == 0, rs1_b4_val == 255
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x120b08ff13007f0b;  op2val:0xffddf0005100180
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x120b08ff13007f0b, 0xffddf0005100180, x1, 104, x2)

inst_47:
// rs2_b2_val == 8, rs1_b6_val == 247
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x13f7075506fbfe09;  op2val:0x90f0c0a0e080c80
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x13f7075506fbfe09, 0x90f0c0a0e080c80, x1, 112, x2)

inst_48:
// rs2_b2_val == 4, rs2_b0_val == 16, rs1_b4_val == 16, rs2_b6_val == 1
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x413df10ff001001;  op2val:0x400109aaf704df10
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x413df10ff001001, 0x400109aaf704df10, x1, 120, x2)

inst_49:
// rs2_b2_val == 2, rs1_b6_val == 32
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xbf201340060c09aa;  op2val:0x7f09df030e02080c
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xbf201340060c09aa, 0x7f09df030e02080c, x1, 128, x2)

inst_50:
// rs2_b1_val == 253, rs2_b0_val == 0, rs1_b4_val == 128
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xc000a80ef0c0e0a;  op2val:0xfd090fff00dffd00
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xc000a80ef0c0e0a, 0xfd090fff00dffd00, x1, 136, x2)

inst_51:
// rs2_b1_val == 128, rs2_b5_val == 247
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x13117f0c040b00aa;  op2val:0xf7fef7df05048006
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x13117f0c040b00aa, 0xf7fef7df05048006, x1, 144, x2)

inst_52:
// rs2_b1_val == 16, rs1_b5_val == 4, rs2_b4_val == 247, rs1_b1_val == 255, rs1_b7_val == 255
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xff03040900fbffaa;  op2val:0xefbf10f70d001007
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xff03040900fbffaa, 0xefbf10f70d001007, x1, 152, x2)

inst_53:
// rs2_b1_val == 2, rs2_b2_val == 170
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xef70e8009fd0f13;  op2val:0xfd0e104001aa020d
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xef70e8009fd0f13, 0xfd0e104001aa020d, x1, 160, x2)

inst_54:
// rs2_b0_val == 191, rs1_b4_val == 4
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x20013040f12400b;  op2val:0xbdfff02030c80bf
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x20013040f12400b, 0xbdfff02030c80bf, x1, 168, x2)

inst_55:
// rs2_b0_val == 239, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x503000b070403aa;  op2val:0xef070006070d13ef
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x503000b070403aa, 0xef070006070d13ef, x1, 176, x2)

inst_56:
// rs2_b0_val == 247, rs2_b6_val == 2
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xff130c03ef08ffaa;  op2val:0x12021112ffdf06f7
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xff130c03ef08ffaa, 0x12021112ffdf06f7, x1, 184, x2)

inst_57:
// rs2_b0_val == 64, rs1_b4_val == 191, rs2_b3_val == 254, rs2_b4_val == 8
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xcfb09bf09dfaa00;  op2val:0x5ffff08fe0baa40
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xcfb09bf09dfaa00, 0x5ffff08fe0baa40, x1, 192, x2)

inst_58:
// rs2_b0_val == 32, rs1_b1_val == 128
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x200e0712030f8080;  op2val:0x4f7df0def7f0120
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x200e0712030f8080, 0x4f7df0def7f0120, x1, 200, x2)

inst_59:
// rs2_b5_val == 251, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xff0c03097faa400f;  op2val:0xfb7ffb030e0c050e
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xff0c03097faa400f, 0xfb7ffb030e0c050e, x1, 208, x2)

inst_60:
// rs1_b0_val == 239, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x707fe0b041109ef;  op2val:0x20103fe0e100c12
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x707fe0b041109ef, 0x20103fe0e100c12, x1, 216, x2)

inst_61:
// rs1_b0_val == 254, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x513df80fb07fffe;  op2val:0x70110fe2040aa0b
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x513df80fb07fffe, 0x70110fe2040aa0b, x1, 224, x2)

inst_62:
// rs2_b5_val == 4, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x501dfaa5555fd80;  op2val:0x130c04aa030e40ef
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x501dfaa5555fd80, 0x130c04aa030e40ef, x1, 232, x2)

inst_63:
// rs1_b6_val == 191, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x13bf55fdaafd5508;  op2val:0xffff7f550403bf55
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x13bf55fdaafd5508, 0xffff7f550403bf55, x1, 240, x2)

inst_64:
// rs1_b6_val == 239, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x1ef0f0702071112;  op2val:0xeffe0a0def0e5505
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x1ef0f0702071112, 0xeffe0a0def0e5505, x1, 248, x2)

inst_65:
// rs1_b0_val == 4, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xdfdf08f700070604;  op2val:0xefaaef010dfe0cfe
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xdfdf08f700070604, 0xefaaef010dfe0cfe, x1, 256, x2)

inst_66:
// rs1_b0_val == 2, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x05feef02080b02;  op2val:0xf7801108fbefff13
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x05feef02080b02, 0xf7801108fbefff13, x1, 264, x2)

inst_67:
// rs2_b4_val == 127, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xf0daa07fd030a00;  op2val:0x80dff77f03060603
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xf0daa07fd030a00, 0x80dff77f03060603, x1, 272, x2)

inst_68:
// rs1_b0_val == 255, rs1_b7_val == 254, rs1_b5_val == 32
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xfedf20130512efff;  op2val:0xb13fd081010120d
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xfedf20130512efff, 0xb13fd081010120d, x1, 280, x2)

inst_69:
// rs2_b4_val == 191, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x501aa800d020c10;  op2val:0x11fbfbbf050ffb07
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x501aa800d020c10, 0x11fbfbbf050ffb07, x1, 288, x2)

inst_70:
// rs1_b5_val == 253, rs2_b5_val == 191
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x410fd400f050603;  op2val:0xa06bf011320fbfb
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x410fd400f050603, 0xa06bf011320fbfb, x1, 296, x2)

inst_71:
// rs2_b3_val == 253, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xb7f02fd05f7fbaa;  op2val:0xdfbf0e11fd0e1000
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xb7f02fd05f7fbaa, 0xdfbf0e11fd0e1000, x1, 304, x2)

inst_72:
// rs1_b5_val == 255, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0efe0f0c40;  op2val:0x9bfef8000032008
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xfeff0efe0f0c40, 0x9bfef8000032008, x1, 312, x2)

inst_73:
// rs2_b0_val == 4, rs2_b4_val == 239
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x20eff7fd55f70006;  op2val:0xfffd03ef08f70c04
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x20eff7fd55f70006, 0xfffd03ef08f70c04, x1, 320, x2)

inst_74:
// rs1_b6_val == 64, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xaa40091320ff0dfe;  op2val:0xf701dfef130d080f
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xaa40091320ff0dfe, 0xf701dfef130d080f, x1, 328, x2)

inst_75:
// rs1_b1_val == 32, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x107f200c01052008;  op2val:0x20fe08bf137f0103
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x107f200c01052008, 0x20fe08bf137f0103, x1, 336, x2)

inst_76:
// rs2_b2_val == 191, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xdefaaf7f707060f;  op2val:0xaa401280fbbf0dff
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xdefaaf7f707060f, 0xaa401280fbbf0dff, x1, 344, x2)

inst_77:
// rs1_b0_val == 127, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xef02ef8008ef087f;  op2val:0x10240fd090ddf12
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xef02ef8008ef087f, 0x10240fd090ddf12, x1, 352, x2)

inst_78:
// rs2_b5_val == 170, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x1208407f0b0adf05;  op2val:0x413aa130a070420
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x1208407f0b0adf05, 0x413aa130a070420, x1, 360, x2)

inst_79:
// rs1_b7_val == 128, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x800ddf0d0e00030f;  op2val:0xdfbf00017f0faa55
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x800ddf0d0e00030f, 0xdfbf00017f0faa55, x1, 368, x2)

inst_80:
// rs2_b2_val == 251, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xf0dbf09ffef0e05;  op2val:0xfb0ef70713fb1209
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xf0dbf09ffef0e05, 0xfb0ef70713fb1209, x1, 376, x2)

inst_81:
// rs2_b4_val == 4, 
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xfb7f0b0613100c05;  op2val:0xaafeef040d040304
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xfb7f0b0613100c05, 0xaafeef040d040304, x1, 384, x2)

inst_82:
// rs1_b6_val == rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b7_val == 2, rs1_b3_val == 85, rs2_b0_val == 253, rs1_b5_val == 16, rs2_b2_val == 255, rs2_b6_val == 253, rs1_b6_val == 253, rs2_b1_val == 247, rs2_b7_val == 239, rs2_b5_val == 127
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0x2fd1009550d0f0d;  op2val:0xeffd7f110afff7fd
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0x2fd1009550d0f0d, 0xeffd7f110afff7fd, x1, 392, x2)

inst_83:
// rs1_b5_val == rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b0_val == 251, rs1_b6_val == 127, rs1_b0_val == 1, rs1_b4_val == 127, rs1_b1_val == 247, rs2_b6_val == 32, rs2_b3_val == 1, rs2_b1_val == 32, rs2_b4_val == 255
// opcode: pbsada ; op1:x30; op2:x29; dest:x31; op1val:0xe7f0d7f0909f701;  op2val:0x12200dff010a20fb
TEST_RR_OP(pbsada, x31, x30, x29, 0x0000000000000000, 0xe7f0d7f0909f701, 0x12200dff010a20fb, x1, 400, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 51*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
