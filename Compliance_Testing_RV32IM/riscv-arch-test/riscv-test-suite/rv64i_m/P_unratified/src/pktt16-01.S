
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pktt16 instruction of the RISC-V RV64PZicsr extension for the pktt16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pktt16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x15, rs2==x29, rd==x15, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 1024, rs2_h3_val == 21845, rs1_h3_val == 16384, rs1_h1_val == 65471, rs1_h2_val == 256
// opcode: pktt16 ; op1:x15; op2:x29; dest:x15; op1val:0x40000100ffbf0000;  op2val:0x555500050400000d
TEST_RR_OP(pktt16, x15, x15, x29, 0x0000000000000000, 0x40000100ffbf0000, 0x555500050400000d, x6, 0, x12)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x17, rs2==x20, rd==x7, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h1_val == 8192, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h2_val == 63487, rs2_h0_val == 32767, rs1_h1_val == 2048, rs1_h0_val == 256
// opcode: pktt16 ; op1:x17; op2:x20; dest:x7; op1val:0x0e001208000100;  op2val:0x0ef7ff20007fff
TEST_RR_OP(pktt16, x7, x17, x20, 0x0000000000000000, 0x0e001208000100, 0x0ef7ff20007fff, x6, 8, x12)

inst_2:
// rs1 == rs2 != rd, rs1==x22, rs2==x22, rd==x8, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == 65533, rs1_h3_val == 2, rs1_h1_val == 8192, rs1_h0_val == 8192
// opcode: pktt16 ; op1:x22; op2:x22; dest:x8; op1val:0x02000d20002000;  op2val:0x11000dfffd000a
TEST_RR_OP(pktt16, x8, x22, x22, 0x0000000000000000, 0x02000d20002000, 0x11000dfffd000a, x6, 16, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 21845, rs1_h0_val == 61439, rs1_h3_val == 512, rs2_h1_val == 21845, rs1_h2_val == 4, rs2_h2_val == 32768
// opcode: pktt16 ; op1:x1; op2:x1; dest:x1; op1val:0x20000045555efff;  op2val:0x0e80005555000c
TEST_RR_OP(pktt16, x1, x1, x1, 0x0000000000000000, 0x20000045555efff, 0x0e80005555000c, x6, 24, x12)

inst_4:
// rs2 == rd != rs1, rs1==x20, rs2==x21, rd==x21, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == 65531, rs1_h1_val == 65407
// opcode: pktt16 ; op1:x20; op2:x21; dest:x21; op1val:0x0f000cff7f0013;  op2val:0xfffb000a04000013
TEST_RR_OP(pktt16, x21, x20, x21, 0x0000000000000000, 0x0f000cff7f0013, 0xfffb000a04000013, x6, 32, x12)

inst_5:
// rs1==x3, rs2==x9, rd==x24, rs2_h3_val == 43690, rs1_h0_val == 1, rs1_h2_val == 65527, rs2_h1_val == 65519, rs1_h3_val == 65527
// opcode: pktt16 ; op1:x3; op2:x9; dest:x24; op1val:0xfff7fff755550001;  op2val:0xaaaa0013ffef000c
TEST_RR_OP(pktt16, x24, x3, x9, 0x0000000000000000, 0xfff7fff755550001, 0xaaaa0013ffef000c, x6, 40, x12)

inst_6:
// rs1==x19, rs2==x4, rd==x10, rs2_h3_val == 32767, rs1_h0_val == 65503, rs1_h3_val == 256, rs2_h2_val == 2048
// opcode: pktt16 ; op1:x19; op2:x4; dest:x10; op1val:0x10001000012ffdf;  op2val:0x7fff080000120009
TEST_RR_OP(pktt16, x10, x19, x4, 0x0000000000000000, 0x10001000012ffdf, 0x7fff080000120009, x6, 48, x12)

inst_7:
// rs1==x2, rs2==x24, rd==x29, rs2_h3_val == 49151, rs1_h2_val == 57343, rs1_h1_val == 2, rs2_h2_val == 128, rs2_h1_val == 256, rs2_h0_val == 512, rs1_h0_val == 16384
// opcode: pktt16 ; op1:x2; op2:x24; dest:x29; op1val:0x09dfff00024000;  op2val:0xbfff008001000200
TEST_RR_OP(pktt16, x29, x2, x24, 0x0000000000000000, 0x09dfff00024000, 0xbfff008001000200, x6, 56, x12)

inst_8:
// rs1==x24, rs2==x0, rd==x14, rs2_h3_val == 57343, rs2_h2_val == 8, rs1_h1_val == 49151
// opcode: pktt16 ; op1:x24; op2:x0; dest:x14; op1val:0x1000009bfffefff;  op2val:0xdfff0008000d000e
TEST_RR_OP(pktt16, x14, x24, x0, 0x0000000000000000, 0x1000009bfffefff, 0xdfff0008000d000e, x6, 64, x12)

inst_9:
// rs1==x10, rs2==x5, rd==x3, rs2_h3_val == 61439, rs2_h1_val == 65023, rs2_h2_val == 4096, rs1_h1_val == 32768, rs1_h3_val == 64
// opcode: pktt16 ; op1:x10; op2:x5; dest:x3; op1val:0x4000098000000f;  op2val:0xefff1000fdff0006
TEST_RR_OP(pktt16, x3, x10, x5, 0x0000000000000000, 0x4000098000000f, 0xefff1000fdff0006, x6, 72, x12)

inst_10:
// rs1==x30, rs2==x13, rd==x28, rs2_h3_val == 63487, rs1_h3_val == 128, rs2_h1_val == 57343, rs1_h0_val == 32768
// opcode: pktt16 ; op1:x30; op2:x13; dest:x28; op1val:0x80dfffffbf8000;  op2val:0xf7ff0006dfff0012
TEST_RR_OP(pktt16, x28, x30, x13, 0x0000000000000000, 0x80dfffffbf8000, 0xf7ff0006dfff0012, x6, 80, x12)

inst_11:
// rs1==x9, rs2==x10, rd==x4, rs2_h3_val == 64511, rs2_h1_val == 65531, rs1_h3_val == 65534, rs1_h0_val == 43690, rs2_h2_val == 512
// opcode: pktt16 ; op1:x9; op2:x10; dest:x4; op1val:0xfffe00075555aaaa;  op2val:0xfbff0200fffb000b
TEST_RR_OP(pktt16, x4, x9, x10, 0x0000000000000000, 0xfffe00075555aaaa, 0xfbff0200fffb000b, x6, 88, x12)

inst_12:
// rs1==x14, rs2==x7, rd==x11, rs2_h3_val == 65023, rs1_h3_val == 65407, rs2_h0_val == 16384, rs2_h1_val == 43690, rs2_h2_val == 65534, rs1_h0_val == 1024, rs1_h2_val == 1
// opcode: pktt16 ; op1:x14; op2:x7; dest:x11; op1val:0xff7f0001000b0400;  op2val:0xfdfffffeaaaa4000
TEST_RR_OP(pktt16, x11, x14, x7, 0x0000000000000000, 0xff7f0001000b0400, 0xfdfffffeaaaa4000, x6, 96, x12)

inst_13:
// rs1==x4, rs2==x19, rd==x20, rs2_h3_val == 65279, rs1_h1_val == 256, rs2_h1_val == 32767, rs1_h0_val == 16
// opcode: pktt16 ; op1:x4; op2:x19; dest:x20; op1val:0x0d000c01000010;  op2val:0xfeff00037fff0012
TEST_RR_OP(pktt16, x20, x4, x19, 0x0000000000000000, 0x0d000c01000010, 0xfeff00037fff0012, x6, 104, x12)

inst_14:
// rs1==x27, rs2==x8, rd==x13, rs2_h3_val == 65407, rs1_h2_val == 0, rs1_h1_val == 32767, rs2_h1_val == 4096, rs2_h0_val == 2048, rs1_h3_val == 2048
// opcode: pktt16 ; op1:x27; op2:x8; dest:x13; op1val:0x80000007fff0001;  op2val:0xff7f000e10000800
TEST_RR_OP(pktt16, x13, x27, x8, 0x0000000000000000, 0x80000007fff0001, 0xff7f000e10000800, x6, 112, x12)

inst_15:
// rs1==x7, rs2==x23, rd==x9, rs2_h3_val == 65471, rs2_h2_val == 64, rs2_h0_val == 4, rs1_h2_val == 65533
// opcode: pktt16 ; op1:x7; op2:x23; dest:x9; op1val:0x02fffd8000aaaa;  op2val:0xffbf0040ffef0004
TEST_RR_OP(pktt16, x9, x7, x23, 0x0000000000000000, 0x02fffd8000aaaa, 0xffbf0040ffef0004, x6, 120, x12)

inst_16:
// rs1==x31, rs2==x18, rd==x16, rs2_h3_val == 65503, rs1_h2_val == 64511, rs1_h3_val == 8192, rs1_h0_val == 32767
// opcode: pktt16 ; op1:x31; op2:x18; dest:x16; op1val:0x2000fbff00067fff;  op2val:0xffdf800000030004
TEST_RR_OP(pktt16, x16, x31, x18, 0x0000000000000000, 0x2000fbff00067fff, 0xffdf800000030004, x6, 128, x12)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_17:
// rs1==x16, rs2==x28, rd==x12, rs2_h3_val == 65519, rs1_h2_val == 65023, rs1_h1_val == 65023, rs2_h2_val == 65023, rs1_h0_val == 65535
// opcode: pktt16 ; op1:x16; op2:x28; dest:x12; op1val:0x11fdfffdffffff;  op2val:0xffeffdffffef000b
TEST_RR_OP(pktt16, x12, x16, x28, 0x0000000000000000, 0x11fdfffdffffff, 0xffeffdffffef000b, x1, 0, x4)

inst_18:
// rs1==x8, rs2==x26, rd==x27, rs2_h3_val == 65527, rs1_h2_val == 65503, rs1_h0_val == 4, rs2_h2_val == 65533
// opcode: pktt16 ; op1:x8; op2:x26; dest:x27; op1val:0x03ffdf000e0004;  op2val:0xfff7fffd00110006
TEST_RR_OP(pktt16, x27, x8, x26, 0x0000000000000000, 0x03ffdf000e0004, 0xfff7fffd00110006, x1, 8, x4)

inst_19:
// rs1==x29, rs2==x17, rd==x5, rs2_h3_val == 65533, rs2_h0_val == 65519, rs1_h1_val == 1, rs2_h1_val == 16384, rs2_h2_val == 65535, rs1_h0_val == 65533, rs1_h3_val == 49151, rs1_h2_val == 32767
// opcode: pktt16 ; op1:x29; op2:x17; dest:x5; op1val:0xbfff7fff0001fffd;  op2val:0xfffdffff4000ffef
TEST_RR_OP(pktt16, x5, x29, x17, 0x0000000000000000, 0xbfff7fff0001fffd, 0xfffdffff4000ffef, x1, 16, x4)

inst_20:
// rs1==x0, rs2==x30, rd==x25, rs2_h3_val == 65534, rs2_h1_val == 65407, rs1_h2_val == 65534
// opcode: pktt16 ; op1:x0; op2:x30; dest:x25; op1val:0xbffffffe0003aaaa;  op2val:0xfffe0003ff7f0007
TEST_RR_OP(pktt16, x25, x0, x30, 0x0000000000000000, 0xbffffffe0003aaaa, 0xfffe0003ff7f0007, x1, 24, x4)

inst_21:
// rs1==x13, rs2==x31, rd==x0, rs2_h3_val == 32768, rs1_h0_val == 49151
// opcode: pktt16 ; op1:x13; op2:x31; dest:x0; op1val:0x40000000000fbfff;  op2val:0x8000f7ff000a0005
TEST_RR_OP(pktt16, x0, x13, x31, 0x0000000000000000, 0x40000000000fbfff, 0x8000f7ff000a0005, x1, 32, x4)

inst_22:
// rs1==x12, rs2==x2, rd==x26, rs2_h3_val == 16384, rs2_h0_val == 57343, rs1_h3_val == 65503
// opcode: pktt16 ; op1:x12; op2:x2; dest:x26; op1val:0xffdf00077fff0012;  op2val:0x4000000efffddfff
TEST_RR_OP(pktt16, x26, x12, x2, 0x0000000000000000, 0xffdf00077fff0012, 0x4000000efffddfff, x1, 40, x4)

inst_23:
// rs1==x28, rs2==x6, rd==x2, rs2_h3_val == 8192, rs1_h3_val == 8, rs1_h1_val == 65519, rs2_h0_val == 32768
// opcode: pktt16 ; op1:x28; op2:x6; dest:x2; op1val:0x080013ffef0004;  op2val:0x20000007000a8000
TEST_RR_OP(pktt16, x2, x28, x6, 0x0000000000000000, 0x080013ffef0004, 0x20000007000a8000, x1, 48, x4)

inst_24:
// rs1==x11, rs2==x3, rd==x6, rs2_h3_val == 4096, rs2_h0_val == 64, rs2_h1_val == 128, rs2_h2_val == 1024, rs1_h3_val == 65535
// opcode: pktt16 ; op1:x11; op2:x3; dest:x6; op1val:0xffff000f00030001;  op2val:0x1000040000800040
TEST_RR_OP(pktt16, x6, x11, x3, 0x0000000000000000, 0xffff000f00030001, 0x1000040000800040, x1, 56, x4)

inst_25:
// rs1==x23, rs2==x11, rd==x31, rs2_h3_val == 2048, rs1_h1_val == 65533, rs2_h0_val == 65279
// opcode: pktt16 ; op1:x23; op2:x11; dest:x31; op1val:0x0c000ffffdaaaa;  op2val:0x800000d0012feff
TEST_RR_OP(pktt16, x31, x23, x11, 0x0000000000000000, 0x0c000ffffdaaaa, 0x800000d0012feff, x1, 64, x4)

inst_26:
// rs1==x21, rs2==x12, rd==x23, rs2_h3_val == 1024, rs2_h2_val == 57343, rs2_h0_val == 65533, rs1_h0_val == 65279
// opcode: pktt16 ; op1:x21; op2:x12; dest:x23; op1val:0x05000d0009feff;  op2val:0x400dfff000bfffd
TEST_RR_OP(pktt16, x23, x21, x12, 0x0000000000000000, 0x05000d0009feff, 0x400dfff000bfffd, x1, 72, x4)

inst_27:
// rs1==x5, rs2==x14, rd==x17, rs2_h3_val == 512, rs2_h2_val == 0, rs1_h2_val == 21845, rs2_h1_val == 16, rs1_h3_val == 4
// opcode: pktt16 ; op1:x5; op2:x14; dest:x17; op1val:0x045555000c8000;  op2val:0x200000000108000
TEST_RR_OP(pktt16, x17, x5, x14, 0x0000000000000000, 0x045555000c8000, 0x200000000108000, x1, 80, x4)

inst_28:
// rs1==x18, rs2==x25, rd==x19, rs2_h3_val == 256, rs2_h0_val == 32
// opcode: pktt16 ; op1:x18; op2:x25; dest:x19; op1val:0xfffffff70002000c;  op2val:0x100000e000c0020
TEST_RR_OP(pktt16, x19, x18, x25, 0x0000000000000000, 0xfffffff70002000c, 0x100000e000c0020, x1, 88, x4)

inst_29:
// rs1==x6, rs2==x15, rd==x18, rs2_h3_val == 128, rs1_h0_val == 2048, rs2_h1_val == 32768, rs1_h3_val == 61439, rs1_h1_val == 61439
// opcode: pktt16 ; op1:x6; op2:x15; dest:x18; op1val:0xefff0006efff0800;  op2val:0x80ffff80000040
TEST_RR_OP(pktt16, x18, x6, x15, 0x0000000000000000, 0xefff0006efff0800, 0x80ffff80000040, x1, 96, x4)

inst_30:
// rs1==x26, rs2==x27, rd==x30, rs2_h3_val == 64, rs2_h2_val == 65471, rs2_h1_val == 2, rs2_h0_val == 1024
// opcode: pktt16 ; op1:x26; op2:x27; dest:x30; op1val:0xfff70006000f0100;  op2val:0x40ffbf00020400
TEST_RR_OP(pktt16, x30, x26, x27, 0x0000000000000000, 0xfff70006000f0100, 0x40ffbf00020400, x1, 104, x4)

inst_31:
// rs1==x25, rs2==x16, rd==x22, rs2_h3_val == 32, rs2_h0_val == 8192, rs1_h0_val == 8
// opcode: pktt16 ; op1:x25; op2:x16; dest:x22; op1val:0x03555555550008;  op2val:0x20000000132000
TEST_RR_OP(pktt16, x22, x25, x16, 0x0000000000000000, 0x03555555550008, 0x20000000132000, x1, 112, x4)

inst_32:
// rs2_h3_val == 16, rs1_h3_val == 32, rs1_h1_val == 8
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000300080800;  op2val:0x10000e10000011
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x20000300080800, 0x10000e10000011, x1, 120, x4)

inst_33:
// rs2_h3_val == 8, rs1_h0_val == 512, rs2_h1_val == 32
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff5555bfff0200;  op2val:0x0880000020dfff
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xffff5555bfff0200, 0x0880000020dfff, x1, 128, x4)

inst_34:
// rs2_h3_val == 4, rs1_h3_val == 65023, rs1_h2_val == 128
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00807fff0800;  op2val:0x040200000f0040
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xfdff00807fff0800, 0x040200000f0040, x1, 136, x4)

inst_35:
// rs2_h3_val == 2, rs2_h1_val == 512, rs1_h1_val == 32
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x05ffdf00200011;  op2val:0x02dfff02000020
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x05ffdf00200011, 0x02dfff02000020, x1, 144, x4)

inst_36:
// rs2_h3_val == 1, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000d0013000f;  op2val:0x01fffe00130009
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x40000d0013000f, 0x01fffe00130009, x1, 152, x4)

inst_37:
// rs2_h3_val == 65535, rs1_h0_val == 32
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0f000a55550020;  op2val:0xffff000fffef0004
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x0f000a55550020, 0xffff000fffef0004, x1, 160, x4)

inst_38:
// rs2_h3_val == 0, rs2_h2_val == 32, rs1_h1_val == 65503, rs1_h3_val == 4096
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000dffdf0001;  op2val:0x000020000e0003
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x1000000dffdf0001, 0x000020000e0003, x1, 168, x4)

inst_39:
// rs2_h2_val == 43690, rs2_h1_val == 64511
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x020080ffbf0009;  op2val:0x02aaaafbff0007
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x020080ffbf0009, 0x02aaaafbff0007, x1, 176, x4)

inst_40:
// rs1_h1_val == 4, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fffe00040100;  op2val:0x03ffff00800005
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x09fffe00040100, 0x03ffff00800005, x1, 184, x4)

inst_41:
// rs1_h1_val == 65535, rs2_h1_val == 1, rs1_h3_val == 65471, rs2_h0_val == 21845
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0100ffff0400;  op2val:0x80fffe00015555
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xffbf0100ffff0400, 0x80fffe00015555, x1, 192, x4)

inst_42:
// rs1_h1_val == 0, rs1_h0_val == 57343, rs1_h2_val == 43690, rs2_h0_val == 65407
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0faaaa0000dfff;  op2val:0x1000fffdfbffff7f
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x0faaaa0000dfff, 0x1000fffdfbffff7f, x1, 200, x4)

inst_43:
// rs1_h0_val == 21845, rs2_h2_val == 32767
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000001308005555;  op2val:0xffef7fff0007ffef
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x2000001308005555, 0xffef7fff0007ffef, x1, 208, x4)

inst_44:
// rs1_h0_val == 63487, rs2_h2_val == 16384, rs1_h2_val == 32, rs1_h1_val == 63487
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400020f7fff7ff;  op2val:0x0040008000000c
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x400020f7fff7ff, 0x0040008000000c, x1, 216, x4)

inst_45:
// rs1_h0_val == 64511, rs2_h2_val == 4, rs1_h1_val == 65534, rs2_h0_val == 61439, rs2_h1_val == 65527, rs1_h3_val == 63487
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000bfffefbff;  op2val:0x200004fff7efff
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xf7ff000bfffefbff, 0x200004fff7efff, x1, 224, x4)

inst_46:
// rs1_h0_val == 65023, rs2_h1_val == 0
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000080fdfffdff;  op2val:0x80000d00008000
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x40000080fdfffdff, 0x80000d00008000, x1, 232, x4)

inst_47:
// rs1_h0_val == 65407, rs1_h2_val == 8
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0a0008000cff7f;  op2val:0x0600090007000c
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x0a0008000cff7f, 0x0600090007000c, x1, 240, x4)

inst_48:
// rs1_h0_val == 65471, rs1_h3_val == 64511, rs1_h2_val == 64
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff00400012ffbf;  op2val:0xbfff1000ff7fffef
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xfbff00400012ffbf, 0xbfff1000ff7fffef, x1, 248, x4)

inst_49:
// rs1_h0_val == 65519, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffe0003ffef;  op2val:0x05000b0400000a
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xfbfffffe0003ffef, 0x05000b0400000a, x1, 256, x4)

inst_50:
// rs1_h0_val == 65527, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0005fffffff7;  op2val:0x0c040002000011
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xbfff0005fffffff7, 0x0c040002000011, x1, 264, x4)

inst_51:
// rs1_h0_val == 65531, rs2_h2_val == 61439, rs1_h2_val == 512
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x090200ffbffffb;  op2val:0x05efff000a0004
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x090200ffbffffb, 0x05efff000a0004, x1, 272, x4)

inst_52:
// rs1_h0_val == 65534, rs2_h1_val == 65279, rs2_h0_val == 8, rs1_h3_val == 57343
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0040000efffe;  op2val:0xffef000dfeff0008
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xdfff0040000efffe, 0xffef000dfeff0008, x1, 280, x4)

inst_53:
// rs1_h0_val == 4096, rs2_h0_val == 65527, rs1_h1_val == 128
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7000d00801000;  op2val:0xffff00070200fff7
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xfff7000d00801000, 0xffff00070200fff7, x1, 288, x4)

inst_54:
// rs1_h0_val == 128, rs1_h2_val == 61439, rs2_h2_val == 65527, rs1_h1_val == 16384
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff40000080;  op2val:0x07fff702008000
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xffffefff40000080, 0x07fff702008000, x1, 296, x4)

inst_55:
// rs1_h0_val == 64, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0005ffdf0040;  op2val:0x12000bfbfffff7
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xffff0005ffdf0040, 0x12000bfbfffff7, x1, 304, x4)

inst_56:
// rs1_h0_val == 2, rs1_h1_val == 64511
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x03effffbff0002;  op2val:0x5555aaaa80000011
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x03effffbff0002, 0x5555aaaa80000011, x1, 312, x4)

inst_57:
// rs2_h2_val == 21845, rs2_h1_val == 65471, rs2_h0_val == 65534
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x095555fffe0008;  op2val:0xffef5555ffbffffe
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x095555fffe0008, 0xffef5555ffbffffe, x1, 320, x4)

inst_58:
// rs2_h2_val == 49151, rs1_h3_val == 65531
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000b00020100;  op2val:0x07bfff00130006
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xfffb000b00020100, 0x07bfff00130006, x1, 328, x4)

inst_59:
// rs2_h2_val == 64511, rs1_h2_val == 65519
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x08ffef01000200;  op2val:0x0afbff00060200
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x08ffef01000200, 0x0afbff00060200, x1, 336, x4)

inst_60:
// rs2_h2_val == 65279, rs2_h0_val == 4096
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000f00070005;  op2val:0x08feffffbf1000
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x1000000f00070005, 0x08feffffbf1000, x1, 344, x4)

inst_61:
// rs2_h2_val == 65407, rs1_h2_val == 65407
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x11ff7f0080fffe;  op2val:0x12ff7ffbff0012
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x11ff7f0080fffe, 0x12ff7ffbff0012, x1, 352, x4)

inst_62:
// rs2_h2_val == 65503, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000dfff000bfffb;  op2val:0x8000ffdf00058000
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x4000dfff000bfffb, 0x8000ffdf00058000, x1, 360, x4)

inst_63:
// rs2_h2_val == 65519, rs2_h1_val == 4
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c0003000e0800;  op2val:0xaaaaffef0004feff
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x0c0003000e0800, 0xaaaaffef0004feff, x1, 368, x4)

inst_64:
// rs2_h2_val == 65531, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fff7ffffdfff;  op2val:0x800fffb02000006
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xfff7fff7ffffdfff, 0x800fffb02000006, x1, 376, x4)

inst_65:
// rs2_h2_val == 8192, rs2_h1_val == 65534, rs1_h3_val == 32768, rs1_h1_val == 57343
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000009dffffbff;  op2val:0x20002000fffe2000
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x80000009dffffbff, 0x20002000fffe2000, x1, 384, x4)

inst_66:
// rs2_h0_val == 65471, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff70002000c;  op2val:0x0e00120004ffbf
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xdffffff70002000c, 0x0e00120004ffbf, x1, 392, x4)

inst_67:
// rs2_h0_val == 65503, rs1_h3_val == 65519, rs1_h2_val == 32768
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef80007fff000e;  op2val:0x07fffb000effdf
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xffef80007fff000e, 0x07fffb000effdf, x1, 400, x4)

inst_68:
// rs2_h0_val == 65531, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000efffffeffffb;  op2val:0x2000fffe0000fffb
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x4000efffffeffffb, 0x2000fffe0000fffb, x1, 408, x4)

inst_69:
// rs2_h0_val == 256, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x03004000010080;  op2val:0xefff0020fffe0100
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x03004000010080, 0xefff0020fffe0100, x1, 416, x4)

inst_70:
// rs2_h0_val == 128, rs2_h1_val == 65503
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e008000040003;  op2val:0xffff000dffdf0080
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x0e008000040003, 0xffff000dffdf0080, x1, 424, x4)

inst_71:
// rs2_h0_val == 16, rs1_h2_val == 2
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x05000280000013;  op2val:0x130012ffdf0010
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x05000280000013, 0x130012ffdf0010, x1, 432, x4)

inst_72:
// rs2_h0_val == 2, rs1_h2_val == 16384, rs1_h1_val == 512
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20400002000000;  op2val:0x202000dfff0002
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x20400002000000, 0x202000dfff0002, x1, 440, x4)

inst_73:
// rs2_h0_val == 1, rs1_h1_val == 43690, rs2_h1_val == 61439
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000009aaaaffff;  op2val:0x4000040efff0001
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x8000009aaaaffff, 0x4000040efff0001, x1, 448, x4)

inst_74:
// rs2_h0_val == 65535, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x110013000cffef;  op2val:0xffef7fffffdfffff
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x110013000cffef, 0xffef7fffffdfffff, x1, 456, x4)

inst_75:
// rs2_h0_val == 0, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff000e0000fffb;  op2val:0xfbff001300020000
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xffff000e0000fffb, 0xfbff001300020000, x1, 464, x4)

inst_76:
// rs1_h3_val == 43690, rs2_h2_val == 2, rs2_h1_val == 63487
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000feffffdff;  op2val:0x80000002f7ff0005
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xaaaa000feffffdff, 0x80000002f7ff0005, x1, 472, x4)

inst_77:
// rs1_h3_val == 21845, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555aaaafffe0400;  op2val:0xfffbfbfffffe0400
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x5555aaaafffe0400, 0xfffbfbfffffe0400, x1, 480, x4)

inst_78:
// rs1_h3_val == 32767, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffd0800000b;  op2val:0xffef000f0020ffef
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x7ffffffd0800000b, 0xffef000f0020ffef, x1, 488, x4)

inst_79:
// rs1_h3_val == 65279, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffefff0009feff;  op2val:0x007fff01004000
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xfeffefff0009feff, 0x007fff01004000, x1, 496, x4)

inst_80:
// rs1_h3_val == 65533, rs1_h2_val == 16, rs2_h2_val == 256
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0010000dffff;  op2val:0x40010000130020
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xfffd0010000dffff, 0x40010000130020, x1, 504, x4)

inst_81:
// rs1_h3_val == 1024, rs2_h2_val == 1
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400fbffffbffffd;  op2val:0x11000100030000
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x400fbffffbffffd, 0x11000100030000, x1, 512, x4)

inst_82:
// rs1_h3_val == 16, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10008000800001;  op2val:0x100000800100009
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x10008000800001, 0x100000800100009, x1, 520, x4)

inst_83:
// rs1_h2_val == 49151, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555bfff00120200;  op2val:0x0b0020ffdf0013
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x5555bfff00120200, 0x0b0020ffdf0013, x1, 528, x4)

inst_84:
// rs1_h2_val == 63487, rs2_h2_val == 16
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10f7ff01000020;  op2val:0xfbff0010fbff0100
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x10f7ff01000020, 0xfbff0010fbff0100, x1, 536, x4)

inst_85:
// rs1_h2_val == 65279, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfeff00122000;  op2val:0xffbf000a000f8000
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xfffbfeff00122000, 0xffbf000a000f8000, x1, 544, x4)

inst_86:
// rs1_h2_val == 65471, rs1_h1_val == 64
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffbf0040f7ff;  op2val:0xf7ff00090012000a
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xfffeffbf0040f7ff, 0xf7ff00090012000a, x1, 552, x4)

inst_87:
// rs1_h2_val == 65531, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffb0011f7ff;  op2val:0xfffe000f2000fffd
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xdffffffb0011f7ff, 0xfffe000f2000fffd, x1, 560, x4)

inst_88:
// rs1_h2_val == 8192, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x04200000090020;  op2val:0x12fffeff7fffdf
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x04200000090020, 0x12fffeff7fffdf, x1, 568, x4)

inst_89:
// rs1_h2_val == 4096, rs1_h1_val == 65279
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef1000feffffdf;  op2val:0xfff740005555efff
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xffef1000feffffdf, 0xfff740005555efff, x1, 576, x4)

inst_90:
// rs1_h2_val == 2048, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d08005555dfff;  op2val:0x0b0006dfff0400
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x0d08005555dfff, 0x0b0006dfff0400, x1, 584, x4)

inst_91:
// rs2_h1_val == 49151, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff00060004efff;  op2val:0xfffff7ffbfff7fff
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x7fff00060004efff, 0xfffff7ffbfff7fff, x1, 592, x4)

inst_92:
// rs1_h2_val == 1024, rs2_h1_val == 2048
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000040000080013;  op2val:0x0900020800ffbf
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x1000040000080013, 0x0900020800ffbf, x1, 600, x4)

inst_93:
// rs2_h0_val == 49151, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800020000200011;  op2val:0x10005555000dbfff
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x800020000200011, 0x10005555000dbfff, x1, 608, x4)

inst_94:
// rs2_h1_val == 64, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d0100fdff000f;  op2val:0x08002000400006
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x0d0100fdff000f, 0x08002000400006, x1, 616, x4)

inst_95:
// rs2_h1_val == 8, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff001340001000;  op2val:0xfffe00110008efff
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xefff001340001000, 0xfffe00110008efff, x1, 624, x4)

inst_96:
// rs1_h1_val == 65527, rs2_h0_val == 43690
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff000dfff7fffb;  op2val:0xfffb02000000aaaa
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xffff000dfff7fffb, 0xfffb02000000aaaa, x1, 632, x4)

inst_97:
// rs1_h1_val == 65531, rs1_h3_val == 1
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x010400fffb0400;  op2val:0xefff400000044000
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x010400fffb0400, 0xefff400000044000, x1, 640, x4)

inst_98:
// rs1_h3_val == 0, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x007fff0004000e;  op2val:0xfffe000500020008
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x007fff0004000e, 0xfffe000500020008, x1, 648, x4)

inst_99:
// rs2_h1_val == 65535, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x00000401000005;  op2val:0x10ff7fffff000d
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x00000401000005, 0x10ff7fffff000d, x1, 656, x4)

inst_100:
// rs1_h1_val == 4096, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf000c10004000;  op2val:0xfffffffe00020100
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xffbf000c10004000, 0xfffffffe00020100, x1, 664, x4)

inst_101:
// rs1_h1_val == 1024, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0a000e0400000a;  op2val:0xffbf8000000d0003
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x0a000e0400000a, 0xffbf8000000d0003, x1, 672, x4)

inst_102:
// rs2_h0_val == 63487, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0200000ebfff;  op2val:0x04f7ffeffff7ff
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x7fff0200000ebfff, 0x04f7ffeffff7ff, x1, 680, x4)

inst_103:
// rs2_h0_val == 64511, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdbffffefffffd;  op2val:0xf7ffbfff000ffbff
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xfffdbffffefffffd, 0xf7ffbfff000ffbff, x1, 688, x4)

inst_104:
// rs2_h0_val == 65023, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0efff7f7ff000d;  op2val:0x010080ff7ffdff
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x0efff7f7ff000d, 0x010080ff7ffdff, x1, 696, x4)

inst_105:
// rs1_h1_val == 16, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fbff0010ffdf;  op2val:0x0600060800fdff
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x4000fbff0010ffdf, 0x0600060800fdff, x1, 704, x4)

inst_106:
// rs1_h2_val == 65535, 
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff08000007;  op2val:0x2007ffffffbffdf
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0xfff7ffff08000007, 0x2007ffffffbffdf, x1, 712, x4)

inst_107:
// rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == 65533, rs1_h3_val == 2, rs1_h1_val == 8192, rs1_h0_val == 8192
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x02000d20002000;  op2val:0x11000dfffd000a
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x02000d20002000, 0x11000dfffd000a, x1, 720, x4)

inst_108:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 21845, rs1_h0_val == 61439, rs1_h3_val == 512, rs2_h1_val == 21845, rs1_h2_val == 4, rs2_h2_val == 32768
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000045555efff;  op2val:0x0e80005555000c
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x20000045555efff, 0x0e80005555000c, x1, 728, x4)

inst_109:
// rs2_h3_val == 57343, rs2_h2_val == 8, rs1_h1_val == 49151
// opcode: pktt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000009bfffefff;  op2val:0xdfff0008000d000e
TEST_RR_OP(pktt16, x31, x30, x29, 0x0000000000000000, 0x1000009bfffefff, 0xdfff0008000d000e, x1, 736, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 93*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
