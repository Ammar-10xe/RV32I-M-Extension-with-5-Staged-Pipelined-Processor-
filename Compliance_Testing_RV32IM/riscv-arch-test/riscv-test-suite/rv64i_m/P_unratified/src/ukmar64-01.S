
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukmar64 instruction of the RISC-V RV64PZicsr extension for the ukmar64 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukmar64)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rd != rs2, rs1==x24, rs2==x7, rd==x24, rs1_w0_val == 0, rs1_w1_val == 4294934527, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 16777216, rs2_w0_val == 524288
// opcode: ukmar64 ; op1:x24; op2:x7; dest:x24; op1val:0xffff7fff00000000;  op2val:0x0100000000080000
TEST_PK64_PNN_OP(ukmar64, x24, $rd_hi, x24, x7, 0x0000000000000000, $correctval_hi, 0xffff7fff00000000, 0x0100000000080000, x24, x3, 0, x5)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x19, rs2==x20, rd==x26, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w0_val == 512, rs1_w0_val == 4294901759, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0
// opcode: ukmar64 ; op1:x19; op2:x20; dest:x26; op1val:0x00000003fffeffff;  op2val:0x0000000300000200
TEST_PK64_PNN_OP(ukmar64, x26, $rd_hi, x19, x20, 0x0000000000000000, $correctval_hi, 0x00000003fffeffff, 0x0000000300000200, x19, x3, 24, x5)

inst_2:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x22, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 4294950911, rs1_w1_val == 4292870143, rs2_w0_val == 4, rs1_w0_val == 4
// opcode: ukmar64 ; op1:x31; op2:x31; dest:x22; op1val:0xffdfffff00000004;  op2val:0xffffbfff00000004
TEST_PK64_PNN_OP(ukmar64, x22, $rd_hi, x31, x31, 0x0000000000000000, $correctval_hi, 0xffdfffff00000004, 0xffffbfff00000004, x31, x3, 48, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, rs2_w1_val == 2863311530, rs1_w0_val == 4294934527
// opcode: ukmar64 ; op1:x28; op2:x28; dest:x28; op1val:0x00000009ffff7fff;  op2val:0xaaaaaaaa00000009
TEST_PK64_PNN_OP(ukmar64, x28, $rd_hi, x28, x28, 0x0000000000000000, $correctval_hi, 0x00000009ffff7fff, 0xaaaaaaaa00000009, x28, x3, 72, x5)

inst_4:
// rs2 == rd != rs1, rs1==x16, rs2==x30, rd==x30, rs2_w1_val == 1431655765, rs1_w0_val == 4294966783
// opcode: ukmar64 ; op1:x16; op2:x30; dest:x30; op1val:0x0000000dfffffdff;  op2val:0x5555555500000011
TEST_PK64_PNN_OP(ukmar64, x30, $rd_hi, x16, x30, 0x0000000000000000, $correctval_hi, 0x0000000dfffffdff, 0x5555555500000011, x16, x3, 96, x5)

inst_5:
// rs1==x17, rs2==x15, rd==x6, rs2_w1_val == 2147483647, rs1_w1_val == 4290772991, rs1_w0_val == 128
// opcode: ukmar64 ; op1:x17; op2:x15; dest:x6; op1val:0xffbfffff00000080;  op2val:0x7fffffff00000006
TEST_PK64_PNN_OP(ukmar64, x6, $rd_hi, x17, x15, 0x0000000000000000, $correctval_hi, 0xffbfffff00000080, 0x7fffffff00000006, x17, x3, 120, x5)

inst_6:
// rs1==x0, rs2==x6, rd==x2, rs2_w1_val == 3221225471, rs2_w0_val == 64, rs1_w0_val == 4294950911
// opcode: ukmar64 ; op1:x0; op2:x6; dest:x2; op1val:0x00000013ffffbfff;  op2val:0xbfffffff00000040
TEST_PK64_PNN_OP(ukmar64, x2, $rd_hi, x0, x6, 0x0000000000000000, $correctval_hi, 0x00000013ffffbfff, 0xbfffffff00000040, x0, x3, 144, x5)

inst_7:
// rs1==x4, rs2==x27, rd==x20, rs2_w1_val == 3758096383, rs1_w1_val == 4, rs1_w0_val == 4026531839
// opcode: ukmar64 ; op1:x4; op2:x27; dest:x20; op1val:0x00000004efffffff;  op2val:0xdfffffff00000011
TEST_PK64_PNN_OP(ukmar64, x20, $rd_hi, x4, x27, 0x0000000000000000, $correctval_hi, 0x00000004efffffff, 0xdfffffff00000011, x4, x3, 168, x5)

inst_8:
// rs1==x18, rs2==x8, rd==x10, rs2_w1_val == 4026531839, rs2_w0_val == 4294967291, rs1_w1_val == 1431655765, rs1_w0_val == 134217728
// opcode: ukmar64 ; op1:x18; op2:x8; dest:x10; op1val:0x5555555508000000;  op2val:0xeffffffffffffffb
TEST_PK64_PNN_OP(ukmar64, x10, $rd_hi, x18, x8, 0x0000000000000000, $correctval_hi, 0x5555555508000000, 0xeffffffffffffffb, x18, x3, 192, x5)

inst_9:
// rs1==x9, rs2==x18, rd==x16, rs2_w1_val == 4160749567, rs2_w0_val == 4294967167, rs1_w1_val == 262144, rs1_w0_val == 4294963199
// opcode: ukmar64 ; op1:x9; op2:x18; dest:x16; op1val:0x00040000ffffefff;  op2val:0xf7ffffffffffff7f
TEST_PK64_PNN_OP(ukmar64, x16, $rd_hi, x9, x18, 0x0000000000000000, $correctval_hi, 0x00040000ffffefff, 0xf7ffffffffffff7f, x9, x3, 216, x5)

inst_10:
// rs1==x20, rs2==x1, rd==x8, rs2_w1_val == 4227858431, rs1_w1_val == 4294963199, rs2_w0_val == 4294967039
// opcode: ukmar64 ; op1:x20; op2:x1; dest:x8; op1val:0xffffefff00000006;  op2val:0xfbfffffffffffeff
TEST_PK64_PNN_OP(ukmar64, x8, $rd_hi, x20, x1, 0x0000000000000000, $correctval_hi, 0xffffefff00000006, 0xfbfffffffffffeff, x20, x3, 240, x5)

inst_11:
// rs1==x15, rs2==x22, rd==x18, rs2_w1_val == 4261412863, rs1_w0_val == 16777216
// opcode: ukmar64 ; op1:x15; op2:x22; dest:x18; op1val:0x5555555501000000;  op2val:0xfdffffff00000009
TEST_PK64_PNN_OP(ukmar64, x18, $rd_hi, x15, x22, 0x0000000000000000, $correctval_hi, 0x5555555501000000, 0xfdffffff00000009, x15, x3, 264, x5)

inst_12:
// rs1==x12, rs2==x29, rd==x4, rs2_w1_val == 4278190079, rs2_w0_val == 1024, rs1_w0_val == 1048576
// opcode: ukmar64 ; op1:x12; op2:x29; dest:x4; op1val:0x0000000e00100000;  op2val:0xfeffffff00000400
TEST_PK64_PNN_OP(ukmar64, x4, $rd_hi, x12, x29, 0x0000000000000000, $correctval_hi, 0x0000000e00100000, 0xfeffffff00000400, x12, x3, 288, x5)

inst_13:
// rs1==x10, rs2==x4, rd==x14, rs2_w1_val == 4286578687, rs1_w0_val == 4292870143, rs1_w1_val == 2863311530
// opcode: ukmar64 ; op1:x10; op2:x4; dest:x14; op1val:0xaaaaaaaaffdfffff;  op2val:0xff7fffff0000000d
TEST_PK64_PNN_OP(ukmar64, x14, $rd_hi, x10, x4, 0x0000000000000000, $correctval_hi, 0xaaaaaaaaffdfffff, 0xff7fffff0000000d, x10, x3, 312, x5)

inst_14:
// rs1==x11, rs2==x0, rd==x12, rs2_w1_val == 4290772991, rs2_w0_val == 1073741824, rs1_w1_val == 8388608
// opcode: ukmar64 ; op1:x11; op2:x0; dest:x12; op1val:0x00800000fffeffff;  op2val:0xffbfffff40000000
TEST_PK64_PNN_OP(ukmar64, x12, $rd_hi, x11, x0, 0x0000000000000000, $correctval_hi, 0x00800000fffeffff, 0xffbfffff40000000, x11, x3, 336, x5)

inst_15:
// rs1==x25, rs2==x13, rs2_w1_val == 4292870143, 
// opcode: ukmar64 ; op1:x25; op2:x13; dest:x7; op1val:0xaaaaaaaa00000007;  op2val:0xffdffffffffffffb
TEST_PK64_PNN_OP(ukmar64, x7, $rd_hi, x25, x13, 0x0000000000000000, $correctval_hi, 0xaaaaaaaa00000007, 0xffdffffffffffffb, x25, x3, 360, x5)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_16:
// rs1==x1, rs2==x26, rs2_w1_val == 4293918719, rs2_w0_val == 4294967263, rs1_w1_val == 65536
// opcode: ukmar64 ; op1:x1; op2:x26; dest:x2; op1val:0x0001000000000006;  op2val:0xffefffffffffffdf
TEST_PK64_PNN_OP(ukmar64, x2, $rd_hi, x1, x26, 0x0000000000000000, $correctval_hi, 0x0001000000000006, 0xffefffffffffffdf, x1, x4, 0, x15)

inst_17:
// rs1==x7, rs2==x11, rs2_w1_val == 4294443007, rs2_w0_val == 4294950911, rs1_w0_val == 4294443007
// opcode: ukmar64 ; op1:x7; op2:x11; dest:x10; op1val:0x0000000cfff7ffff;  op2val:0xfff7ffffffffbfff
TEST_PK64_PNN_OP(ukmar64, x10, $rd_hi, x7, x11, 0x0000000000000000, $correctval_hi, 0x0000000cfff7ffff, 0xfff7ffffffffbfff, x7, x4, 24, x15)

inst_18:
// rs1==x8, rs2==x14, rs2_w1_val == 4294705151, rs2_w0_val == 4294967279
// opcode: ukmar64 ; op1:x8; op2:x14; dest:x12; op1val:0x0000000f00000004;  op2val:0xfffbffffffffffef
TEST_PK64_PNN_OP(ukmar64, x12, $rd_hi, x8, x14, 0x0000000000000000, $correctval_hi, 0x0000000f00000004, 0xfffbffffffffffef, x8, x4, 48, x15)

inst_19:
// rs1==x5, rs2==x9, rs2_w1_val == 4294836223, rs2_w0_val == 4261412863
// opcode: ukmar64 ; op1:x5; op2:x9; dest:x28; op1val:0x008000000000000e;  op2val:0xfffdfffffdffffff
TEST_PK64_PNN_OP(ukmar64, x28, $rd_hi, x5, x9, 0x0000000000000000, $correctval_hi, 0x008000000000000e, 0xfffdfffffdffffff, x5, x4, 72, x15)

inst_20:
// rs1==x30, rs2==x12, rs2_w1_val == 4294901759, rs1_w0_val == 4294705151, rs2_w0_val == 3221225471
// opcode: ukmar64 ; op1:x30; op2:x12; dest:x13; op1val:0x00000004fffbffff;  op2val:0xfffeffffbfffffff
TEST_PK64_PNN_OP(ukmar64, x13, $rd_hi, x30, x12, 0x0000000000000000, $correctval_hi, 0x00000004fffbffff, 0xfffeffffbfffffff, x30, x4, 96, x15)

inst_21:
// rs1==x2, rs2==x21, rs2_w1_val == 4294934527, rs1_w0_val == 64, rs1_w1_val == 4278190079, rs2_w0_val == 4160749567
// opcode: ukmar64 ; op1:x2; op2:x21; dest:x22; op1val:0xfeffffff00000040;  op2val:0xffff7ffff7ffffff
TEST_PK64_PNN_OP(ukmar64, x22, $rd_hi, x2, x21, 0x0000000000000000, $correctval_hi, 0xfeffffff00000040, 0xffff7ffff7ffffff, x2, x4, 120, x15)

inst_22:
// rs1==x26, rs2==x16, rs2_w1_val == 4294959103, rs1_w0_val == 4290772991
// opcode: ukmar64 ; op1:x26; op2:x16; dest:x30; op1val:0x00000007ffbfffff;  op2val:0xffffdfff00000013
TEST_PK64_PNN_OP(ukmar64, x30, $rd_hi, x26, x16, 0x0000000000000000, $correctval_hi, 0x00000007ffbfffff, 0xffffdfff00000013, x26, x4, 144, x15)

inst_23:
// rs1==x3, rs2==x24, rs2_w1_val == 4294963199, rs2_w0_val == 67108864, rs1_w0_val == 524288
// opcode: ukmar64 ; op1:x3; op2:x24; dest:x20; op1val:0xffff7fff00080000;  op2val:0xffffefff04000000
TEST_PK64_PNN_OP(ukmar64, x20, $rd_hi, x3, x24, 0x0000000000000000, $correctval_hi, 0xffff7fff00080000, 0xffffefff04000000, x3, x4, 168, x15)

inst_24:
// rs1==x23, rs2==x2, rs2_w1_val == 4294965247, rs1_w0_val == 3221225471, rs2_w0_val == 268435456
// opcode: ukmar64 ; op1:x23; op2:x2; dest:x29; op1val:0x0000000ebfffffff;  op2val:0xfffff7ff10000000
TEST_PK64_PNN_OP(ukmar64, x29, $rd_hi, x23, x2, 0x0000000000000000, $correctval_hi, 0x0000000ebfffffff, 0xfffff7ff10000000, x23, x4, 192, x15)

inst_25:
// rs1==x21, rs2==x25, rs2_w1_val == 4294966271, rs1_w0_val == 65536, rs1_w1_val == 4294967293
// opcode: ukmar64 ; op1:x21; op2:x25; dest:x19; op1val:0xfffffffd00010000;  op2val:0xfffffbff00080000
TEST_PK64_PNN_OP(ukmar64, x19, $rd_hi, x21, x25, 0x0000000000000000, $correctval_hi, 0xfffffffd00010000, 0xfffffbff00080000, x21, x4, 216, x15)

inst_26:
// rs1==x6, rs2==x23, rs2_w1_val == 4294966783, rs2_w0_val == 65536, rs1_w1_val == 4294443007
// opcode: ukmar64 ; op1:x6; op2:x23; dest:x31; op1val:0xfff7ffff00000006;  op2val:0xfffffdff00010000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x6, x23, 0x0000000000000000, $correctval_hi, 0xfff7ffff00000006, 0xfffffdff00010000, x6, x4, 240, x15)

inst_27:
// rs1==x22, rs2==x3, rs2_w1_val == 4294967039, rs1_w1_val == 2048
// opcode: ukmar64 ; op1:x22; op2:x3; dest:x7; op1val:0x00000800bfffffff;  op2val:0xfffffeff40000000
TEST_PK64_PNN_OP(ukmar64, x7, $rd_hi, x22, x3, 0x0000000000000000, $correctval_hi, 0x00000800bfffffff, 0xfffffeff40000000, x22, x4, 264, x2)

inst_28:
// rs1==x13, rs2==x19, rs2_w1_val == 4294967167, rs1_w0_val == 8
// opcode: ukmar64 ; op1:x13; op2:x19; dest:x8; op1val:0x0080000000000008;  op2val:0xffffff7f0000000a
TEST_PK64_PNN_OP(ukmar64, x8, $rd_hi, x13, x19, 0x0000000000000000, $correctval_hi, 0x0080000000000008, 0xffffff7f0000000a, x13, x4, 288, x2)

inst_29:
// rs1==x27, rs2==x10, rs2_w1_val == 4294967231, rs2_w0_val == 4294901759, rs1_w0_val == 4294965247
// opcode: ukmar64 ; op1:x27; op2:x10; dest:x28; op1val:0x0000000ffffff7ff;  op2val:0xffffffbffffeffff
TEST_PK64_PNN_OP(ukmar64, x28, $rd_hi, x27, x10, 0x0000000000000000, $correctval_hi, 0x0000000ffffff7ff, 0xffffffbffffeffff, x27, x4, 312, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x14, rs2==x17, rs2_w1_val == 4294967263, rs1_w0_val == 4278190079, rs2_w0_val == 4194304, rs1_w1_val == 2147483647
// opcode: ukmar64 ; op1:x14; op2:x17; dest:x6; op1val:0x7ffffffffeffffff;  op2val:0xffffffdf00400000
TEST_PK64_PNN_OP(ukmar64, x6, $rd_hi, x14, x17, 0x0000000000000000, $correctval_hi, 0x7ffffffffeffffff, 0xffffffdf00400000, x14, x1, 0, x2)

inst_31:
// rs1==x29, rs2==x5, rs2_w1_val == 4294967279, rs1_w1_val == 4294967287
// opcode: ukmar64 ; op1:x29; op2:x5; dest:x13; op1val:0xfffffff7feffffff;  op2val:0xffffffeffffffffb
TEST_PK64_PNN_OP(ukmar64, x13, $rd_hi, x29, x5, 0x0000000000000000, $correctval_hi, 0xfffffff7feffffff, 0xffffffeffffffffb, x29, x1, 24, x2)

inst_32:
// rs2_w1_val == 4294967287, rs1_w1_val == 64, rs1_w0_val == 4294836223
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000040fffdffff;  op2val:0xfffffff700000004
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000040fffdffff, 0xfffffff700000004, x30, x1, 48, x2)

inst_33:
// rs2_w1_val == 4294967291, rs1_w1_val == 4026531839
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000009;  op2val:0xfffffffb00000005
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefffffff00000009, 0xfffffffb00000005, x30, x1, 72, x2)

inst_34:
// rs2_w1_val == 4294967293, rs2_w0_val == 2863311530, rs1_w0_val == 2048
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000900000800;  op2val:0xfffffffdaaaaaaaa
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000900000800, 0xfffffffdaaaaaaaa, x30, x1, 96, x2)

inst_35:
// rs2_w1_val == 4294967294, rs2_w0_val == 131072, rs1_w0_val == 4294959103
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000012ffffdfff;  op2val:0xfffffffe00020000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000012ffffdfff, 0xfffffffe00020000, x30, x1, 120, x2)

inst_36:
// rs2_w1_val == 2147483648, rs1_w0_val == 1
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000d00000001;  op2val:0x800000000000000b
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000d00000001, 0x800000000000000b, x30, x1, 144, x2)

inst_37:
// rs2_w1_val == 1073741824, rs1_w1_val == 4294966783
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00010000;  op2val:0x40000000fffffeff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffdff00010000, 0x40000000fffffeff, x30, x1, 168, x2)

inst_38:
// rs2_w1_val == 536870912, rs1_w0_val == 2147483647
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000f7fffffff;  op2val:0x20000000ffffffdf
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000f7fffffff, 0x20000000ffffffdf, x30, x1, 192, x2)

inst_39:
// rs2_w1_val == 268435456, rs1_w0_val == 4294967295
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000011ffffffff;  op2val:0x10000000fffeffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000011ffffffff, 0x10000000fffeffff, x30, x1, 216, x2)

inst_40:
// rs2_w1_val == 134217728, rs1_w0_val == 4294967263, rs2_w0_val == 8
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000012ffffffdf;  op2val:0x0800000000000008
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000012ffffffdf, 0x0800000000000008, x30, x1, 240, x2)

inst_41:
// rs2_w1_val == 67108864, rs1_w0_val == 1431655765
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0080000055555555;  op2val:0x0400000000000011
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080000055555555, 0x0400000000000011, x30, x1, 264, x2)

inst_42:
// rs2_w1_val == 33554432, rs1_w1_val == 4294967263, rs1_w0_val == 16384
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00004000;  op2val:0x0200000000000005
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdf00004000, 0x0200000000000005, x30, x1, 288, x2)

inst_43:
// rs2_w1_val == 8388608, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x000000077fffffff;  op2val:0x008000000000000f
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000000077fffffff, 0x008000000000000f, x30, x1, 312, x2)

inst_44:
// rs2_w1_val == 4194304, rs1_w1_val == 1024
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400ffffffdf;  op2val:0x004000000000000e
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000400ffffffdf, 0x004000000000000e, x30, x1, 336, x2)

inst_45:
// rs2_w1_val == 2097152, rs1_w0_val == 4194304
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00400000;  op2val:0x0020000000000003
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbfffff00400000, 0x0020000000000003, x30, x1, 360, x2)

inst_46:
// rs2_w1_val == 1048576, rs1_w1_val == 4096
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x000010007fffffff;  op2val:0x001000000000000f
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000010007fffffff, 0x001000000000000f, x30, x1, 384, x2)

inst_47:
// rs2_w1_val == 524288, rs2_w0_val == 128, rs1_w1_val == 8
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000800000013;  op2val:0x0008000000000080
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000800000013, 0x0008000000000080, x30, x1, 408, x2)

inst_48:
// rs2_w1_val == 262144, rs2_w0_val == 4294966783, rs1_w1_val == 33554432
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0200000000100000;  op2val:0x00040000fffffdff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200000000100000, 0x00040000fffffdff, x30, x1, 432, x2)

inst_49:
// rs2_w1_val == 131072, rs1_w1_val == 3221225471
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00004000;  op2val:0x0002000000010000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbfffffff00004000, 0x0002000000010000, x30, x1, 456, x2)

inst_50:
// rs2_w1_val == 65536, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffdffff;  op2val:0x0001000000000009
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffeffffffdffff, 0x0001000000000009, x30, x1, 480, x2)

inst_51:
// rs2_w1_val == 32768, rs2_w0_val == 4294836223, rs1_w1_val == 2147483648
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000010000;  op2val:0x00008000fffdffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000000000010000, 0x00008000fffdffff, x30, x1, 504, x2)

inst_52:
// rs2_w1_val == 16384, rs1_w1_val == 4294836223
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffffffdff;  op2val:0x0000400000020000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffdfffffffffdff, 0x0000400000020000, x30, x1, 528, x2)

inst_53:
// rs2_w1_val == 8192, rs2_w0_val == 2147483647, rs1_w0_val == 4096
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00001000;  op2val:0x000020007fffffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffdff00001000, 0x000020007fffffff, x30, x1, 552, x2)

inst_54:
// rs2_w1_val == 4096, rs1_w1_val == 2097152, rs1_w0_val == 4294967293
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000fffffffd;  op2val:0x00001000ffffff7f
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00200000fffffffd, 0x00001000ffffff7f, x30, x1, 576, x2)

inst_55:
// rs2_w1_val == 2048, rs1_w0_val == 262144
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000700040000;  op2val:0x0000080000000004
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000700040000, 0x0000080000000004, x30, x1, 600, x2)

inst_56:
// rs1_w0_val == 131072, rs1_w1_val == 4227858431
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00020000;  op2val:0x04000000ffffffdf
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffffff00020000, 0x04000000ffffffdf, x30, x1, 624, x2)

inst_57:
// rs1_w0_val == 32768, rs1_w1_val == 1048576, rs2_w0_val == 4294443007
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0010000000008000;  op2val:0xfffff7fffff7ffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0010000000008000, 0xfffff7fffff7ffff, x30, x1, 648, x2)

inst_58:
// rs1_w0_val == 8192, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00002000;  op2val:0x0000100000000003
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fffffff00002000, 0x0000100000000003, x30, x1, 672, x2)

inst_59:
// rs1_w0_val == 1024, rs1_w1_val == 4160749567, rs2_w0_val == 536870912
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000400;  op2val:0xffbfffff20000000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ffffff00000400, 0xffbfffff20000000, x30, x1, 696, x2)

inst_60:
// rs1_w0_val == 512, rs1_w1_val == 134217728
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0800000000000200;  op2val:0xffffffef00000400
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800000000000200, 0xffffffef00000400, x30, x1, 720, x2)

inst_61:
// rs1_w0_val == 256, rs2_w0_val == 1431655765
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000100;  op2val:0xfff7ffff55555555
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffefff00000100, 0xfff7ffff55555555, x30, x1, 744, x2)

inst_62:
// rs1_w0_val == 32, rs2_w0_val == 8192, rs1_w1_val == 4294967295
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000020;  op2val:0xff7fffff00002000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffff00000020, 0xff7fffff00002000, x30, x1, 768, x2)

inst_63:
// rs1_w0_val == 16, rs1_w1_val == 0
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000000000010;  op2val:0x0000800020000000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000000000010, 0x0000800020000000, x30, x1, 792, x2)

inst_64:
// rs1_w0_val == 2, rs1_w1_val == 32
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000002000000002;  op2val:0x00008000fffffffb
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000002000000002, 0x00008000fffffffb, x30, x1, 816, x2)

inst_65:
// rs2_w1_val == 1024, rs1_w0_val == 268435456, rs1_w1_val == 32768
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000800010000000;  op2val:0x0000040000000013
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000800010000000, 0x0000040000000013, x30, x1, 840, x2)

inst_66:
// rs2_w1_val == 512, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000012fffffdff;  op2val:0x0000020000000080
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000012fffffdff, 0x0000020000000080, x30, x1, 864, x2)

inst_67:
// rs2_w1_val == 256, rs1_w0_val == 2097152
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00200000;  op2val:0x0000010000000009
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbfffffff00200000, 0x0000010000000009, x30, x1, 888, x2)

inst_68:
// rs2_w1_val == 128, rs1_w0_val == 4160749567
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffff7ffffff;  op2val:0x0000008020000000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffff7ffffff, 0x0000008020000000, x30, x1, 912, x2)

inst_69:
// rs2_w1_val == 64, rs1_w1_val == 2
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000200100000;  op2val:0x000000400000000b
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000200100000, 0x000000400000000b, x30, x1, 936, x2)

inst_70:
// rs2_w1_val == 32, rs2_w0_val == 32768
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000effffffdf;  op2val:0x0000002000008000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000effffffdf, 0x0000002000008000, x30, x1, 960, x2)

inst_71:
// rs2_w1_val == 16, rs1_w0_val == 1073741824, rs1_w1_val == 4294967039
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff40000000;  op2val:0x000000100000000e
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffeff40000000, 0x000000100000000e, x30, x1, 984, x2)

inst_72:
// rs2_w1_val == 8, rs1_w0_val == 536870912
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000420000000;  op2val:0x000000080000000c
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000420000000, 0x000000080000000c, x30, x1, 1008, x2)

inst_73:
// rs2_w1_val == 4, rs1_w0_val == 2147483648
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000001280000000;  op2val:0x0000000400008000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000001280000000, 0x0000000400008000, x30, x1, 1032, x2)

inst_74:
// rs2_w1_val == 2, rs1_w0_val == 4294966271
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffffbff;  op2val:0x000000020000000c
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffeffffffffbff, 0x000000020000000c, x30, x1, 1056, x2)

inst_75:
// rs2_w1_val == 1, rs2_w0_val == 1
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0001000001000000;  op2val:0x0000000100000001
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001000001000000, 0x0000000100000001, x30, x1, 1080, x2)

inst_76:
// rs2_w1_val == 4294967295, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000c00020000;  op2val:0xffffffff0000000d
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000c00020000, 0xffffffff0000000d, x30, x1, 1104, x2)

inst_77:
// rs2_w1_val == 0, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa10000000;  op2val:0x00000000aaaaaaaa
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaaaaaa10000000, 0x00000000aaaaaaaa, x30, x1, 1128, x2)

inst_78:
// rs2_w0_val == 3758096383, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000020000;  op2val:0xffffbfffdfffffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000000000020000, 0xffffbfffdfffffff, x30, x1, 1152, x2)

inst_79:
// rs2_w0_val == 4026531839, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffbffff;  op2val:0xfffeffffefffffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7fffffffffbffff, 0xfffeffffefffffff, x30, x1, 1176, x2)

inst_80:
// rs2_w0_val == 4227858431, rs1_w1_val == 16
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000001000000004;  op2val:0xfffffff7fbffffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000001000000004, 0xfffffff7fbffffff, x30, x1, 1200, x2)

inst_81:
// rs2_w0_val == 4278190079, rs1_w1_val == 67108864
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0400000000020000;  op2val:0x00000002feffffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0400000000020000, 0x00000002feffffff, x30, x1, 1224, x2)

inst_82:
// rs2_w0_val == 4286578687, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000005fffffdff;  op2val:0x00000009ff7fffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000005fffffdff, 0x00000009ff7fffff, x30, x1, 1248, x2)

inst_83:
// rs2_w0_val == 4290772991, rs1_w1_val == 256
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x000001007fffffff;  op2val:0x00000800ffbfffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000001007fffffff, 0x00000800ffbfffff, x30, x1, 1272, x2)

inst_84:
// rs2_w0_val == 4292870143, rs1_w1_val == 16777216
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0100000000020000;  op2val:0x00800000ffdfffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0100000000020000, 0x00800000ffdfffff, x30, x1, 1296, x2)

inst_85:
// rs2_w0_val == 4293918719, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000bffffffdf;  op2val:0x08000000ffefffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000bffffffdf, 0x08000000ffefffff, x30, x1, 1320, x2)

inst_86:
// rs2_w0_val == 4294705151, rs1_w1_val == 4286578687
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000001;  op2val:0xfefffffffffbffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7fffff00000001, 0xfefffffffffbffff, x30, x1, 1344, x2)

inst_87:
// rs2_w0_val == 4294934527, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000010000000007;  op2val:0x00000002ffff7fff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000010000000007, 0x00000002ffff7fff, x30, x1, 1368, x2)

inst_88:
// rs2_w0_val == 4294959103, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0080000000000013;  op2val:0x00000008ffffdfff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080000000000013, 0x00000008ffffdfff, x30, x1, 1392, x2)

inst_89:
// rs2_w0_val == 4294963199, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0001000000000001;  op2val:0x00000008ffffefff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001000000000001, 0x00000008ffffefff, x30, x1, 1416, x2)

inst_90:
// rs2_w0_val == 4294965247, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000700000020;  op2val:0xfffffffbfffff7ff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000700000020, 0xfffffffbfffff7ff, x30, x1, 1440, x2)

inst_91:
// rs2_w0_val == 256, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000001300000040;  op2val:0xfff7ffff00000100
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000001300000040, 0xfff7ffff00000100, x30, x1, 1464, x2)

inst_92:
// rs2_w0_val == 32, rs1_w1_val == 128
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000080fffbffff;  op2val:0xfffffff700000020
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000080fffbffff, 0xfffffff700000020, x30, x1, 1488, x2)

inst_93:
// rs2_w0_val == 16, rs1_w0_val == 4293918719, rs1_w1_val == 4294967167
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffefffff;  op2val:0x0000080000000010
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffff7fffefffff, 0x0000080000000010, x30, x1, 1512, x2)

inst_94:
// rs2_w0_val == 2, rs1_w1_val == 4294959103
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000040;  op2val:0x0000000a00000002
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffdfff00000040, 0x0000000a00000002, x30, x1, 1536, x2)

inst_95:
// rs2_w0_val == 4294967295, rs1_w0_val == 8388608
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00800000;  op2val:0x00000012ffffffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ffffff00800000, 0x00000012ffffffff, x30, x1, 1560, x2)

inst_96:
// rs2_w0_val == 0, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x000000050000000d;  op2val:0xffefffff00000000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000000050000000d, 0xffefffff00000000, x30, x1, 1584, x2)

inst_97:
// rs1_w1_val == 3758096383, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff0000000d;  op2val:0x20000000f7ffffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfffffff0000000d, 0x20000000f7ffffff, x30, x1, 1608, x2)

inst_98:
// rs1_w1_val == 4261412863, rs1_w0_val == 4294967167
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffffff7f;  op2val:0x01000000dfffffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdffffffffffff7f, 0x01000000dfffffff, x30, x1, 1632, x2)

inst_99:
// rs1_w1_val == 4293918719, rs1_w0_val == 33554432
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff02000000;  op2val:0xfffbffffffffdfff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffefffff02000000, 0xfffbffffffffdfff, x30, x1, 1656, x2)

inst_100:
// rs1_w1_val == 4294705151, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000006;  op2val:0xfffffbff00000002
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffbffff00000006, 0xfffffbff00000002, x30, x1, 1680, x2)

inst_101:
// rs1_w1_val == 4294901759, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000200;  op2val:0x00001000ff7fffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffeffff00000200, 0x00001000ff7fffff, x30, x1, 1704, x2)

inst_102:
// rs1_w1_val == 4294950911, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00080000;  op2val:0xbfffffff00000012
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffbfff00080000, 0xbfffffff00000012, x30, x1, 1728, x2)

inst_103:
// rs1_w1_val == 4294965247, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00002000;  op2val:0xfffdffff00080000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffff7ff00002000, 0xfffdffff00080000, x30, x1, 1752, x2)

inst_104:
// rs1_w1_val == 4294966271, rs1_w0_val == 4294967231
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffffffbf;  op2val:0xffffff7ffffdffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffbffffffffbf, 0xffffff7ffffdffff, x30, x1, 1776, x2)

inst_105:
// rs1_w1_val == 4294967231, rs1_w0_val == 3758096383
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfdfffffff;  op2val:0x0100000000000011
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffbfdfffffff, 0x0100000000000011, x30, x1, 1800, x2)

inst_106:
// rs1_w1_val == 4294967279, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef0000000a;  op2val:0xff7fffff00000007
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffef0000000a, 0xff7fffff00000007, x30, x1, 1824, x2)

inst_107:
// rs1_w1_val == 4294967291, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffdfff;  op2val:0xfffffff700000000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffbffffdfff, 0xfffffff700000000, x30, x1, 1848, x2)

inst_108:
// rs1_w1_val == 4294967294, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000002;  op2val:0x0000000f00008000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffe00000002, 0x0000000f00008000, x30, x1, 1872, x2)

inst_109:
// rs1_w1_val == 1073741824, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x400000007fffffff;  op2val:0x0000000a00000012
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x400000007fffffff, 0x0000000a00000012, x30, x1, 1896, x2)

inst_110:
// rs1_w1_val == 536870912, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000020000;  op2val:0xefffffffaaaaaaaa
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000000000020000, 0xefffffffaaaaaaaa, x30, x1, 1920, x2)

inst_111:
// rs1_w1_val == 268435456, rs2_w0_val == 33554432
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000020000000;  op2val:0x1000000002000000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x1000000020000000, 0x1000000002000000, x30, x1, 1944, x2)

inst_112:
// rs1_w1_val == 4194304, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0040000000000400;  op2val:0x0000000df7ffffff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040000000000400, 0x0000000df7ffffff, x30, x1, 1968, x2)

inst_113:
// rs1_w1_val == 16384, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000fffffffd;  op2val:0x00400000ffff7fff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00004000fffffffd, 0x00400000ffff7fff, x30, x1, 1992, x2)

inst_114:
// rs1_w1_val == 8192, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000200080000000;  op2val:0xfffffbff55555555
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000200080000000, 0xfffffbff55555555, x30, x1, 2016, x2)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_115:
// rs1_w1_val == 512, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000020000000010;  op2val:0x00000000ffffffef
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000020000000010, 0x00000000ffffffef, x30, x1, 0, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_116:
// rs1_w1_val == 1, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000001fff7ffff;  op2val:0x0000010000000012
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000001fff7ffff, 0x0000010000000012, x30, x1, 0, x2)

inst_117:
// rs1_w0_val == 2863311530, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffaaaaaaaa;  op2val:0x0000000500000003
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffdffffaaaaaaaa, 0x0000000500000003, x30, x1, 24, x2)

inst_118:
// rs1_w0_val == 4227858431, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffbffffff;  op2val:0x0000200000080000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdffbffffff, 0x0000200000080000, x30, x1, 48, x2)

inst_119:
// rs1_w0_val == 4261412863, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffdffffff;  op2val:0xffbfffff10000000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7fffffffdffffff, 0xffbfffff10000000, x30, x1, 72, x2)

inst_120:
// rs1_w0_val == 4286578687, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000dff7fffff;  op2val:0xfeffffff04000000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000dff7fffff, 0xfeffffff04000000, x30, x1, 96, x2)

inst_121:
// rs2_w0_val == 4294966271, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00008000;  op2val:0x00000008fffffbff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdfffff00008000, 0x00000008fffffbff, x30, x1, 120, x2)

inst_122:
// rs2_w0_val == 262144, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0040000000000010;  op2val:0x4000000000040000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040000000000010, 0x4000000000040000, x30, x1, 144, x2)

inst_123:
// rs2_w0_val == 4294967231, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffdfffff;  op2val:0x0000000affffffbf
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x40000000ffdfffff, 0x0000000affffffbf, x30, x1, 168, x2)

inst_124:
// rs2_w0_val == 4294967287, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000010000000200;  op2val:0x04000000fffffff7
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000010000000200, 0x04000000fffffff7, x30, x1, 192, x2)

inst_125:
// rs2_w0_val == 4294967293, rs1_w0_val == 4294967287
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffffffffff7;  op2val:0x00040000fffffffd
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffbfffffffffff7, 0x00040000fffffffd, x30, x1, 216, x2)

inst_126:
// rs2_w0_val == 4294967294, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x000010000000000e;  op2val:0x00000007fffffffe
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000010000000000e, 0x00000007fffffffe, x30, x1, 240, x2)

inst_127:
// rs1_w0_val == 4294967039, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffeff;  op2val:0x0010000000000007
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffbffffffffeff, 0x0010000000000007, x30, x1, 264, x2)

inst_128:
// rs2_w0_val == 2147483648, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000800000100;  op2val:0xfeffffff80000000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000800000100, 0xfeffffff80000000, x30, x1, 288, x2)

inst_129:
// rs1_w0_val == 4294967279, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffffffef;  op2val:0xefffffff80000000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffdffffffef, 0xefffffff80000000, x30, x1, 312, x2)

inst_130:
// rs2_w0_val == 134217728, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffffffd;  op2val:0x0002000008000000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7ffffffffffffffd, 0x0002000008000000, x30, x1, 336, x2)

inst_131:
// rs1_w0_val == 4294967291, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000010fffffffb;  op2val:0x0000400000000009
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000010fffffffb, 0x0000400000000009, x30, x1, 360, x2)

inst_132:
// rs2_w0_val == 16777216, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000010;  op2val:0xffdfffff01000000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefffffff00000010, 0xffdfffff01000000, x30, x1, 384, x2)

inst_133:
// rs1_w0_val == 4294967294, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffffffe;  op2val:0xfffffefffffffbff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbfffffffffffffe, 0xfffffefffffffbff, x30, x1, 408, x2)

inst_134:
// rs2_w0_val == 8388608, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffff7fff;  op2val:0x0000000100800000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdfffffffff7fff, 0x0000000100800000, x30, x1, 432, x2)

inst_135:
// rs2_w0_val == 2097152, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fffffdff;  op2val:0xffffff7f00200000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x55555555fffffdff, 0xffffff7f00200000, x30, x1, 456, x2)

inst_136:
// rs2_w0_val == 1048576, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffbff;  op2val:0x0000000000100000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffbffffffffbff, 0x0000000000100000, x30, x1, 480, x2)

inst_137:
// rs1_w0_val == 67108864, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000004000000;  op2val:0x0002000000000010
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000000004000000, 0x0002000000000010, x30, x1, 504, x2)

inst_138:
// rs1_w1_val == 524288, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0008000000000002;  op2val:0x00000008ffffbfff
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0008000000000002, 0x00000008ffffbfff, x30, x1, 528, x2)

inst_139:
// rs2_w0_val == 16384, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000504000000;  op2val:0x0000000c00004000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000504000000, 0x0000000c00004000, x30, x1, 552, x2)

inst_140:
// rs1_w1_val == 131072, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000ffffff7f;  op2val:0x0000400008000000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00020000ffffff7f, 0x0000400008000000, x30, x1, 576, x2)

inst_141:
// rs2_w0_val == 4096, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffffffff;  op2val:0x0200000000001000
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7fffffffffff, 0x0200000000001000, x30, x1, 600, x2)

inst_142:
// rs2_w0_val == 2048, 
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000fffbffff;  op2val:0x0800000000000800
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000000fffbffff, 0x0800000000000800, x30, x1, 624, x2)

inst_143:
// rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 4294950911, rs1_w1_val == 4292870143, rs2_w0_val == 4, rs1_w0_val == 4
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000004;  op2val:0xffffbfff00000004
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdfffff00000004, 0xffffbfff00000004, x30, x1, 648, x2)

inst_144:
// rs2_w1_val == 2863311530, rs1_w0_val == 4294934527
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000009ffff7fff;  op2val:0xaaaaaaaa00000009
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000009ffff7fff, 0xaaaaaaaa00000009, x30, x1, 672, x2)

inst_145:
// rs2_w1_val == 3221225471, rs2_w0_val == 64, rs1_w0_val == 4294950911
// opcode: ukmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000013ffffbfff;  op2val:0xbfffffff00000040
TEST_PK64_PNN_OP(ukmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000013ffffbfff, 0xbfffffff00000040, x30, x1, 696, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 48*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 42*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 255*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 3*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 90*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
