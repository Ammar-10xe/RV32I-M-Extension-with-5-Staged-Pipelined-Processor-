
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smdrs instruction of the RISC-V RV64PZicsr extension for the smdrs covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smdrs)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x21,signature_x21_1)

inst_0:
// rs1 == rd != rs2, rs1==x5, rs2==x18, rd==x5, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val == 512, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h2_val == 8192, rs1_h0_val != rs2_h0_val, rs2_h1_val == 16384, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -2, rs1_h2_val == -257
// opcode: smdrs ; op1:x5; op2:x18; dest:x5; op1val:0x200fefffffa8000;  op2val:0xfff820004000fffe
TEST_RR_OP(smdrs, x5, x5, x18, 0x0000000000000000, 0x200fefffffa8000, 0xfff820004000fffe, x21, 0, x13)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x1, rs2==x31, rd==x0, rs1_h3_val == rs2_h3_val, rs2_h0_val == -21846, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h1_val == 2048, rs2_h1_val == -9, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h3_val == 512, rs1_h0_val == -1025, rs2_h2_val == 4
// opcode: smdrs ; op1:x1; op2:x31; dest:x0; op1val:0x200fff60800fbff;  op2val:0x2000004fff7aaaa
TEST_RR_OP(smdrs, x0, x1, x31, 0x0000000000000000, 0x200fff60800fbff, 0x2000004fff7aaaa, x21, 8, x13)

inst_2:
// rs1 == rs2 != rd, rs1==x12, rs2==x12, rd==x20, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h0_val == 4, rs1_h0_val == 2048, rs2_h2_val == 1024, rs1_h3_val == -33, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == 2, rs1_h2_val == -65
// opcode: smdrs ; op1:x12; op2:x12; dest:x20; op1val:0xffdfffbf3fff0800;  op2val:0x020400fffa0004
TEST_RR_OP(smdrs, x20, x12, x12, 0x0000000000000000, 0xffdfffbf3fff0800, 0x020400fffa0004, x21, 16, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x2, rs2==x2, rd==x2, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h0_val == -17, rs2_h3_val == -9, rs1_h3_val == -2049, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 2048, rs2_h2_val == 32, rs1_h2_val == -3, rs2_h0_val == 256
// opcode: smdrs ; op1:x2; op2:x2; dest:x2; op1val:0xf7fffffdfff8ffef;  op2val:0xfff7002008000100
TEST_RR_OP(smdrs, x2, x2, x2, 0x0000000000000000, 0xf7fffffdfff8ffef, 0xfff7002008000100, x21, 24, x13)

inst_4:
// rs2 == rd != rs1, rs1==x19, rs2==x24, rd==x24, rs1_h2_val == rs2_h2_val, rs1_h1_val == -3, rs2_h0_val == 1, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h3_val == 1024, rs1_h0_val == -513, rs1_h3_val == 8192, rs2_h1_val == 8
// opcode: smdrs ; op1:x19; op2:x24; dest:x24; op1val:0x20003ffffffdfdff;  op2val:0x4003fff00080001
TEST_RR_OP(smdrs, x24, x19, x24, 0x0000000000000000, 0x20003ffffffdfdff, 0x4003fff00080001, x21, 32, x13)

inst_5:
// rs1==x7, rs2==x10, rd==x30, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h1_val == 32767, rs2_h2_val == -17, rs1_h0_val == 8, rs1_h1_val == -16385, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h3_val == 16384, rs1_h2_val == -2, rs2_h3_val == -2049
// opcode: smdrs ; op1:x7; op2:x10; dest:x30; op1val:0x4000fffebfff0008;  op2val:0xf7ffffef7ffffffc
TEST_RR_OP(smdrs, x30, x7, x10, 0x0000000000000000, 0x4000fffebfff0008, 0xf7ffffef7ffffffc, x21, 40, x13)

inst_6:
// rs1==x11, rs2==x15, rd==x6, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h3_val == 64, rs2_h1_val == -8193, rs1_h2_val == 64, rs1_h1_val == 1024, rs2_h3_val == -32768, rs1_h0_val == 512, rs2_h0_val == 128
// opcode: smdrs ; op1:x11; op2:x15; dest:x6; op1val:0x40004004000200;  op2val:0x8000c000dfff0080
TEST_RR_OP(smdrs, x6, x11, x15, 0x0000000000000000, 0x40004004000200, 0x8000c000dfff0080, x21, 48, x13)

inst_7:
// rs1==x9, rs2==x29, rd==x8, rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val == -33
// opcode: smdrs ; op1:x9; op2:x29; dest:x8; op1val:0x3fffffdffffa0005;  op2val:0x80000003fffa0001
TEST_RR_OP(smdrs, x8, x9, x29, 0x0000000000000000, 0x3fffffdffffa0005, 0x80000003fffa0001, x21, 56, x13)

inst_8:
// rs1==x20, rs2==x1, rd==x7, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h2_val == -257, rs2_h0_val == -16385, rs1_h3_val == 32767, rs1_h2_val == -4097, rs2_h3_val == 16, rs2_h1_val == 16
// opcode: smdrs ; op1:x20; op2:x1; dest:x7; op1val:0x7fffefff00030200;  op2val:0x10feff0010bfff
TEST_RR_OP(smdrs, x7, x20, x1, 0x0000000000000000, 0x7fffefff00030200, 0x10feff0010bfff, x21, 64, x13)

inst_9:
// rs1==x15, rs2==x4, rd==x29, rs1_h0_val == rs2_h0_val, rs2_h2_val == -1, rs2_h0_val == 0, rs1_h3_val == -4097, rs2_h3_val == 128, rs1_h0_val == 0
// opcode: smdrs ; op1:x15; op2:x4; dest:x29; op1val:0xeffffffafff80000;  op2val:0x80ffff00070000
TEST_RR_OP(smdrs, x29, x15, x4, 0x0000000000000000, 0xeffffffafff80000, 0x80ffff00070000, x21, 72, x13)

inst_10:
// rs1==x22, rs2==x19, rd==x28, rs2_h3_val == -21846, rs2_h2_val == 2048, rs2_h1_val == 0, rs1_h3_val == 128, rs1_h0_val == -129
// opcode: smdrs ; op1:x22; op2:x19; dest:x28; op1val:0x803ffffffdff7f;  op2val:0xaaaa080000000080
TEST_RR_OP(smdrs, x28, x22, x19, 0x0000000000000000, 0x803ffffffdff7f, 0xaaaa080000000080, x21, 80, x13)

inst_11:
// rs1==x31, rs2==x5, rd==x1, rs2_h3_val == 21845, rs2_h1_val == 4, rs1_h2_val == 4096, rs2_h0_val == 8, rs1_h1_val == 512, rs2_h2_val == 16384, rs1_h0_val == -1
// opcode: smdrs ; op1:x31; op2:x5; dest:x1; op1val:0x0510000200ffff;  op2val:0x5555400000040008
TEST_RR_OP(smdrs, x1, x31, x5, 0x0000000000000000, 0x0510000200ffff, 0x5555400000040008, x21, 88, x13)

inst_12:
// rs1==x3, rs2==x8, rd==x14, rs2_h3_val == 32767, rs2_h2_val == -4097, rs2_h0_val == -8193, rs1_h0_val == 4096, rs1_h1_val == 64, rs2_h1_val == 32
// opcode: smdrs ; op1:x3; op2:x8; dest:x14; op1val:0x06000900401000;  op2val:0x7fffefff0020dfff
TEST_RR_OP(smdrs, x14, x3, x8, 0x0000000000000000, 0x06000900401000, 0x7fffefff0020dfff, x21, 96, x13)

inst_13:
// rs1==x6, rs2==x20, rd==x31, rs2_h3_val == -16385, rs2_h0_val == 64, rs1_h1_val == 8192, rs2_h2_val == -513, rs2_h1_val == -2049, rs1_h0_val == 128, rs1_h2_val == -8193
// opcode: smdrs ; op1:x6; op2:x20; dest:x31; op1val:0x200dfff20000080;  op2val:0xbffffdfff7ff0040
TEST_RR_OP(smdrs, x31, x6, x20, 0x0000000000000000, 0x200dfff20000080, 0xbffffdfff7ff0040, x21, 104, x13)

inst_14:
// rs1==x30, rs2==x7, rd==x4, rs2_h3_val == -8193, rs1_h3_val == 1, rs2_h2_val == -5, rs1_h2_val == 0, rs2_h1_val == -5, rs1_h1_val == 1
// opcode: smdrs ; op1:x30; op2:x7; dest:x4; op1val:0x0100000001fff6;  op2val:0xdffffffbfffb0001
TEST_RR_OP(smdrs, x4, x30, x7, 0x0000000000000000, 0x0100000001fff6, 0xdffffffbfffb0001, x21, 112, x13)

inst_15:
// rs1==x14, rs2==x23, rd==x3, rs2_h3_val == -4097, rs2_h2_val == -65, rs1_h2_val == -1025, rs2_h0_val == 21845
// opcode: smdrs ; op1:x14; op2:x23; dest:x3; op1val:0x01fbffc000fffa;  op2val:0xefffffbf00055555
TEST_RR_OP(smdrs, x3, x14, x23, 0x0000000000000000, 0x01fbffc000fffa, 0xefffffbf00055555, x21, 120, x13)

inst_16:
// rs1==x8, rs2==x17, rd==x19, rs2_h3_val == -1025, rs1_h2_val == 1024, rs2_h2_val == -32768
// opcode: smdrs ; op1:x8; op2:x17; dest:x19; op1val:0x030400c000c000;  op2val:0xfbff80000008dfff
TEST_RR_OP(smdrs, x19, x8, x17, 0x0000000000000000, 0x030400c000c000, 0xfbff80000008dfff, x21, 128, x13)

inst_17:
// rs1==x16, rs2==x30, rd==x17, rs2_h3_val == -513, rs2_h1_val == 1, rs1_h1_val == -32768, rs2_h0_val == -1, rs2_h2_val == -3, rs1_h3_val == -5
// opcode: smdrs ; op1:x16; op2:x30; dest:x17; op1val:0xfffb00098000fffc;  op2val:0xfdfffffd0001ffff
TEST_RR_OP(smdrs, x17, x16, x30, 0x0000000000000000, 0xfffb00098000fffc, 0xfdfffffd0001ffff, x21, 136, x13)

inst_18:
// rs1==x18, rs2==x26, rd==x13, rs2_h3_val == -257, rs1_h1_val == -2, rs1_h2_val == 4, rs2_h1_val == -17, rs1_h0_val == -21846, rs1_h3_val == -32768, rs2_h0_val == 1024
// opcode: smdrs ; op1:x18; op2:x26; dest:x13; op1val:0x80000004fffeaaaa;  op2val:0xfefffff8ffef0400
TEST_RR_OP(smdrs, x13, x18, x26, 0x0000000000000000, 0x80000004fffeaaaa, 0xfefffff8ffef0400, x21, 144, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_19:
// rs1==x13, rs2==x22, rd==x10, rs2_h3_val == -129, rs2_h0_val == -9, rs1_h1_val == 16384
// opcode: smdrs ; op1:x13; op2:x22; dest:x10; op1val:0xffdfc00040000006;  op2val:0xff7ffdff0008fff7
TEST_RR_OP(smdrs, x10, x13, x22, 0x0000000000000000, 0xffdfc00040000006, 0xff7ffdff0008fff7, x1, 0, x2)

inst_20:
// rs1==x21, rs2==x9, rd==x23, rs2_h3_val == -65, rs1_h2_val == 16384, rs2_h0_val == -32768
// opcode: smdrs ; op1:x21; op2:x9; dest:x23; op1val:0x06400020001000;  op2val:0xffbffff900048000
TEST_RR_OP(smdrs, x23, x21, x9, 0x0000000000000000, 0x06400020001000, 0xffbffff900048000, x1, 8, x2)

inst_21:
// rs1==x23, rs2==x6, rd==x18, rs2_h3_val == -33, rs2_h2_val == 16, rs2_h1_val == -65, rs1_h3_val == 8
// opcode: smdrs ; op1:x23; op2:x6; dest:x18; op1val:0x08effffff98000;  op2val:0xffdf0010ffbf8000
TEST_RR_OP(smdrs, x18, x23, x6, 0x0000000000000000, 0x08effffff98000, 0xffdf0010ffbf8000, x1, 16, x2)

inst_22:
// rs1==x24, rs2==x3, rd==x27, rs2_h3_val == -17, rs1_h3_val == 16, rs1_h0_val == 16384
// opcode: smdrs ; op1:x24; op2:x3; dest:x27; op1val:0x10fff8fffa4000;  op2val:0xffeffffb0003aaaa
TEST_RR_OP(smdrs, x27, x24, x3, 0x0000000000000000, 0x10fff8fffa4000, 0xffeffffb0003aaaa, x1, 24, x2)

inst_23:
// rs1==x29, rs2==x27, rd==x12, rs2_h3_val == -5, rs1_h0_val == -16385, rs1_h3_val == 0
// opcode: smdrs ; op1:x29; op2:x27; dest:x12; op1val:0x00fff6fffabfff;  op2val:0xfffb20003fffbfff
TEST_RR_OP(smdrs, x12, x29, x27, 0x0000000000000000, 0x00fff6fffabfff, 0xfffb20003fffbfff, x1, 32, x2)

inst_24:
// rs1==x4, rs2==x13, rd==x9, rs2_h3_val == -3, rs2_h1_val == -21846, rs2_h2_val == 256, rs1_h2_val == -32768
// opcode: smdrs ; op1:x4; op2:x13; dest:x9; op1val:0x0380000007bfff;  op2val:0xfffd0100aaaa0100
TEST_RR_OP(smdrs, x9, x4, x13, 0x0000000000000000, 0x0380000007bfff, 0xfffd0100aaaa0100, x1, 40, x2)

inst_25:
// rs1==x27, rs2==x21, rd==x26, rs2_h3_val == -2, rs1_h1_val == 4, rs1_h3_val == -3, rs1_h2_val == 32, rs2_h2_val == -21846
// opcode: smdrs ; op1:x27; op2:x21; dest:x26; op1val:0xfffd00200004ffef;  op2val:0xfffeaaaa7ffffff9
TEST_RR_OP(smdrs, x26, x27, x21, 0x0000000000000000, 0xfffd00200004ffef, 0xfffeaaaa7ffffff9, x1, 48, x2)

inst_26:
// rs1==x10, rs2==x11, rd==x15, rs2_h3_val == 16384, rs1_h1_val == 32, rs1_h3_val == -9
// opcode: smdrs ; op1:x10; op2:x11; dest:x15; op1val:0xfff7feff0020ffff;  op2val:0x4000ffeffff83fff
TEST_RR_OP(smdrs, x15, x10, x11, 0x0000000000000000, 0xfff7feff0020ffff, 0x4000ffeffff83fff, x1, 56, x2)

inst_27:
// rs1==x25, rs2==x0, rd==x21, rs2_h3_val == 8192, rs2_h2_val == -33, rs2_h0_val == 2048, rs1_h1_val == -4097, rs1_h0_val == -8193
// opcode: smdrs ; op1:x25; op2:x0; dest:x21; op1val:0x03fffeefffdfff;  op2val:0x2000ffdf00200800
TEST_RR_OP(smdrs, x21, x25, x0, 0x0000000000000000, 0x03fffeefffdfff, 0x2000ffdf00200800, x1, 64, x2)

inst_28:
// rs1==x17, rs2==x25, rd==x22, rs2_h3_val == 4096, rs2_h0_val == -129, rs1_h3_val == -2, rs2_h2_val == 128
// opcode: smdrs ; op1:x17; op2:x25; dest:x22; op1val:0xfffeffbf80000006;  op2val:0x100000800008ff7f
TEST_RR_OP(smdrs, x22, x17, x25, 0x0000000000000000, 0xfffeffbf80000006, 0x100000800008ff7f, x1, 72, x2)

inst_29:
// rs1==x28, rs2==x14, rd==x16, rs2_h3_val == 2048, rs1_h3_val == 1024
// opcode: smdrs ; op1:x28; op2:x14; dest:x16; op1val:0x4000009fffa3fff;  op2val:0x800ffeffff60080
TEST_RR_OP(smdrs, x16, x28, x14, 0x0000000000000000, 0x4000009fffa3fff, 0x800ffeffff60080, x1, 80, x2)

inst_30:
// rs1==x26, rs2==x16, rd==x25, rs2_h3_val == 256, rs1_h3_val == -513, rs1_h1_val == 256, rs1_h0_val == -2
// opcode: smdrs ; op1:x26; op2:x16; dest:x25; op1val:0xfdff00400100fffe;  op2val:0x10008000010aaaa
TEST_RR_OP(smdrs, x25, x26, x16, 0x0000000000000000, 0xfdff00400100fffe, 0x10008000010aaaa, x1, 88, x2)

inst_31:
// rs1==x0, rs2==x28, rd==x11, rs2_h3_val == 64, rs1_h2_val == -513
// opcode: smdrs ; op1:x0; op2:x28; dest:x11; op1val:0xfff7fdff04000006;  op2val:0x4040007fff0000
TEST_RR_OP(smdrs, x11, x0, x28, 0x0000000000000000, 0xfff7fdff04000006, 0x4040007fff0000, x1, 96, x2)

inst_32:
// rs2_h3_val == 32, rs1_h0_val == 21845, rs1_h1_val == -9
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x030005fff75555;  op2val:0x2000800001aaaa
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x030005fff75555, 0x2000800001aaaa, x1, 104, x2)

inst_33:
// rs2_h3_val == 8, rs1_h0_val == 4
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xefff000040000004;  op2val:0x08001000030080
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xefff000040000004, 0x08001000030080, x1, 112, x2)

inst_34:
// rs2_h3_val == 4, rs2_h2_val == 512
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x033ffffff60007;  op2val:0x04020000040100
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x033ffffff60007, 0x04020000040100, x1, 120, x2)

inst_35:
// rs2_h3_val == 1, rs1_h0_val == -3
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x2000005fff8fffd;  op2val:0x01fff6f7ffffff
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x2000005fff8fffd, 0x01fff6f7ffffff, x1, 128, x2)

inst_36:
// rs1_h1_val == -5, rs2_h1_val == -33, rs1_h3_val == -8193
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff9fffb0006;  op2val:0xfeff0006ffdfaaaa
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xdffffff9fffb0006, 0xfeff0006ffdfaaaa, x1, 136, x2)

inst_37:
// rs1_h1_val == 4096, rs1_h2_val == 256
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x0001001000bfff;  op2val:0xfff700060020dfff
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x0001001000bfff, 0xfff700060020dfff, x1, 144, x2)

inst_38:
// rs1_h1_val == 128, rs1_h3_val == 2048
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x800000300800003;  op2val:0x02ffdf4000dfff
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x800000300800003, 0x02ffdf4000dfff, x1, 152, x2)

inst_39:
// rs1_h1_val == 16, rs1_h3_val == 4, rs2_h1_val == 512, rs1_h2_val == -9
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x04fff700103fff;  op2val:0xbfffaaaa0200aaaa
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x04fff700103fff, 0xbfffaaaa0200aaaa, x1, 160, x2)

inst_40:
// rs1_h1_val == 8, rs1_h2_val == 16, rs1_h3_val == 4096
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x100000100008ff7f;  op2val:0x07fffbfff90800
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x100000100008ff7f, 0x07fffbfff90800, x1, 168, x2)

inst_41:
// rs1_h1_val == 2, rs2_h0_val == -17, rs1_h2_val == 2048, rs1_h3_val == 32, rs2_h2_val == 1
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x20080000028000;  op2val:0xffbf00010008ffef
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x20080000028000, 0xffbf00010008ffef, x1, 176, x2)

inst_42:
// rs1_h1_val == 0, rs1_h3_val == -129, rs2_h0_val == -5, rs2_h2_val == 32767
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xff7f40000000bfff;  op2val:0xfffc7fff0006fffb
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xff7f40000000bfff, 0xfffc7fff0006fffb, x1, 184, x2)

inst_43:
// rs1_h1_val == -1, rs2_h2_val == -9, rs1_h0_val == 32767
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffcffff7fff;  op2val:0xffbffff7ffefc000
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xff7ffffcffff7fff, 0xffbffff7ffefc000, x1, 192, x2)

inst_44:
// rs1_h0_val == -4097, rs2_h0_val == -513
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x20ffbf0020efff;  op2val:0x2000effffff6fdff
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x20ffbf0020efff, 0x2000effffff6fdff, x1, 200, x2)

inst_45:
// rs1_h0_val == -2049, rs1_h3_val == 2, rs1_h1_val == -8193
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x020020dffff7ff;  op2val:0x200fffa00090007
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x020020dffff7ff, 0x200fffa00090007, x1, 208, x2)

inst_46:
// rs1_h0_val == -257, rs2_h1_val == 4096
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x07fffc0009feff;  op2val:0xfffd40001000fdff
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x07fffc0009feff, 0xfffd40001000fdff, x1, 216, x2)

inst_47:
// rs1_h0_val == -65, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffefbff2000ffbf;  op2val:0x7fff0006fff80080
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xfffefbff2000ffbf, 0x7fff0006fff80080, x1, 224, x2)

inst_48:
// rs1_h0_val == -33, rs1_h2_val == -17, rs2_h2_val == 2
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffcffef3fffffdf;  op2val:0xffbf00020200fffe
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xfffcffef3fffffdf, 0xffbf00020200fffe, x1, 232, x2)

inst_49:
// rs1_h0_val == -9, rs2_h2_val == 8, rs1_h2_val == 1
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffd00010003fff7;  op2val:0xfeff00080800dfff
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xfffd00010003fff7, 0xfeff00080800dfff, x1, 240, x2)

inst_50:
// rs1_h0_val == -5, rs2_h2_val == -16385, rs2_h1_val == -3, rs2_h0_val == 512
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x08ffdffff7fffb;  op2val:0xfdffbffffffd0200
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x08ffdffff7fffb, 0xfdffbffffffd0200, x1, 248, x2)

inst_51:
// rs1_h0_val == 8192, rs2_h0_val == 16, rs2_h1_val == 256, rs2_h2_val == -2049
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffc3fff2000;  op2val:0xfff7f7ff01000010
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xff7ffffc3fff2000, 0xfff7f7ff01000010, x1, 256, x2)

inst_52:
// rs1_h0_val == 1024, rs1_h2_val == 8192, rs2_h0_val == -1025
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x7fff2000bfff0400;  op2val:0x8000034000fbff
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x7fff2000bfff0400, 0x8000034000fbff, x1, 264, x2)

inst_53:
// rs1_h0_val == 256, rs2_h1_val == 1024, rs1_h1_val == -21846, rs1_h3_val == -1, rs2_h0_val == -65
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xffffc000aaaa0100;  op2val:0xffbf20000400ffbf
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xffffc000aaaa0100, 0xffbf20000400ffbf, x1, 272, x2)

inst_54:
// rs1_h0_val == 64, rs1_h2_val == 128, rs1_h1_val == -129, rs2_h0_val == 32767
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0080ff7f0040;  op2val:0x060001ffef7fff
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xfdff0080ff7f0040, 0x060001ffef7fff, x1, 280, x2)

inst_55:
// rs1_h0_val == 32, rs1_h1_val == -65
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x3fffdfffffbf0020;  op2val:0xfbff0003fffafbff
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x3fffdfffffbf0020, 0xfbff0003fffafbff, x1, 288, x2)

inst_56:
// rs1_h0_val == 16, rs2_h0_val == 16384
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffc04000010;  op2val:0xfbff0001fffc4000
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xff7ffffc04000010, 0xfbff0001fffc4000, x1, 296, x2)

inst_57:
// rs2_h1_val == 2, rs2_h0_val == 2
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffbffff8fffd;  op2val:0xfff8000300020002
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xfffbffbffff8fffd, 0xfff8000300020002, x1, 304, x2)

inst_58:
// rs2_h1_val == -1, rs1_h3_val == 256
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x1000005ffff7fff;  op2val:0x1000005ffffffef
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x1000005ffff7fff, 0x1000005ffffffef, x1, 312, x2)

inst_59:
// rs2_h0_val == -4097, rs1_h2_val == 2
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0002ff7fffbf;  op2val:0xfffbfff9ffbfefff
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xfffb0002ff7fffbf, 0xfffbfff9ffbfefff, x1, 320, x2)

inst_60:
// rs2_h0_val == -2049, rs1_h3_val == -16385
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0006fffe3fff;  op2val:0x03ffbf0004f7ff
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xbfff0006fffe3fff, 0x03ffbf0004f7ff, x1, 328, x2)

inst_61:
// rs2_h0_val == -257, rs2_h1_val == -513
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x04ffbfbfff0080;  op2val:0x20fffbfdfffeff
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x04ffbfbfff0080, 0x20fffbfdfffeff, x1, 336, x2)

inst_62:
// rs2_h0_val == -33, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x01feff20000040;  op2val:0xfff60006aaaaffdf
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x01feff20000040, 0xfff60006aaaaffdf, x1, 344, x2)

inst_63:
// rs2_h0_val == -3, rs1_h3_val == -21846, rs2_h2_val == 21845
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaffef0006efff;  op2val:0xffbf5555ffdffffd
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xaaaaffef0006efff, 0xffbf5555ffdffffd, x1, 352, x2)

inst_64:
// rs2_h0_val == 8192, rs1_h3_val == -1025, rs1_h2_val == -129
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfbffff7f00075555;  op2val:0xfffd0001ffbf2000
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xfbffff7f00075555, 0xfffd0001ffbf2000, x1, 360, x2)

inst_65:
// rs2_h0_val == 4096, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffdff7f0400fff8;  op2val:0xefffffeff7ff1000
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xfffdff7f0400fff8, 0xefffffeff7ff1000, x1, 368, x2)

inst_66:
// rs2_h0_val == 32, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x00fff904000006;  op2val:0xfffe0010fdff0020
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x00fff904000006, 0xfffe0010fdff0020, x1, 376, x2)

inst_67:
// rs1_h3_val == 21845, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x5555efff10000009;  op2val:0xfbffaaaaffefffdf
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x5555efff10000009, 0xfbffaaaaffefffdf, x1, 384, x2)

inst_68:
// rs1_h3_val == -257, rs2_h1_val == -16385, rs1_h2_val == 32767
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfeff7fffc0000400;  op2val:0x8000200bfff2000
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xfeff7fffc0000400, 0x8000200bfff2000, x1, 392, x2)

inst_69:
// rs1_h0_val == 2, rs2_h1_val == -257
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0010dfff0002;  op2val:0x05fff6feffffef
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xaaaa0010dfff0002, 0x05fff6feffffef, x1, 400, x2)

inst_70:
// rs1_h3_val == -65, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xffbf04000004c000;  op2val:0x02fff808000080
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xffbf04000004c000, 0x02fff808000080, x1, 408, x2)

inst_71:
// rs1_h0_val == 1, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffcffff0001;  op2val:0x800008ffbfc000
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xfffbfffcffff0001, 0x800008ffbfc000, x1, 416, x2)

inst_72:
// rs1_h3_val == -17, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xffefffef00080100;  op2val:0x3ffffffd00063fff
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xffefffef00080100, 0x3ffffffd00063fff, x1, 424, x2)

inst_73:
// rs2_h3_val == 0, rs1_h1_val == -2049
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffff7f7ff0400;  op2val:0x00fff900062000
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xff7ffff7f7ff0400, 0x00fff900062000, x1, 432, x2)

inst_74:
// rs2_h3_val == -1, rs1_h2_val == -1
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff4000bfff;  op2val:0xffff800000200006
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xfffbffff4000bfff, 0xffff800000200006, x1, 440, x2)

inst_75:
// rs2_h2_val == -8193, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffdfefff4000;  op2val:0xffdfdfff00005555
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x8000ffdfefff4000, 0xffdfdfff00005555, x1, 448, x2)

inst_76:
// rs2_h2_val == -1025, rs2_h1_val == -2
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffd00402000;  op2val:0xfdfffbfffffeffff
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x1000fffd00402000, 0xfdfffbfffffeffff, x1, 456, x2)

inst_77:
// rs2_h2_val == -129, rs2_h1_val == -32768, rs1_h1_val == -17
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x08fff6ffefffbf;  op2val:0xefffff7f8000feff
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x08fff6ffefffbf, 0xefffff7f8000feff, x1, 464, x2)

inst_78:
// rs1_h2_val == -21846, rs1_h1_val == -257
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x7fffaaaafeffffef;  op2val:0x090100aaaafdff
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x7fffaaaafeffffef, 0x090100aaaafdff, x1, 472, x2)

inst_79:
// rs2_h2_val == -2, rs1_h1_val == 32767
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x01feff7fff0800;  op2val:0xffdffffefffb0200
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x01feff7fff0800, 0xffdffffefffb0200, x1, 480, x2)

inst_80:
// rs1_h2_val == 21845, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x100555500107fff;  op2val:0xffffeffffffe3fff
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x100555500107fff, 0xffffeffffffe3fff, x1, 488, x2)

inst_81:
// rs1_h2_val == -16385, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x07bfff08000100;  op2val:0x09aaaa0800fff6
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x07bfff08000100, 0x09aaaa0800fff6, x1, 496, x2)

inst_82:
// rs2_h2_val == 4096, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffc20001000;  op2val:0x041000fdfffbff
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xff7ffffc20001000, 0x041000fdfffbff, x1, 504, x2)

inst_83:
// rs1_h2_val == -2049, rs2_h1_val == 8192
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x05f7ff2000fff6;  op2val:0xfdff7fff20000001
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x05f7ff2000fff6, 0xfdff7fff20000001, x1, 512, x2)

inst_84:
// rs2_h2_val == 64, rs1_h1_val == -1025, rs2_h1_val == 128
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x3fffbffffbfff7ff;  op2val:0x7fff004000800010
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x3fffbffffbfff7ff, 0x7fff004000800010, x1, 520, x2)

inst_85:
// rs2_h1_val == 21845, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffb3fff0001fff9;  op2val:0x20feff5555ff7f
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xfffb3fff0001fff9, 0x20feff5555ff7f, x1, 528, x2)

inst_86:
// rs1_h2_val == 512, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x040200bfff4000;  op2val:0xffff0800bfffffbf
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x040200bfff4000, 0xffff0800bfffffbf, x1, 536, x2)

inst_87:
// rs2_h1_val == -4097, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffddfff3fff;  op2val:0x08ffffeffffffc
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xaaaafffddfff3fff, 0x08ffffeffffffc, x1, 544, x2)

inst_88:
// rs2_h1_val == -1025, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xefff7fff20000003;  op2val:0x1000003fbfffff6
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xefff7fff20000003, 0x1000003fbfffff6, x1, 552, x2)

inst_89:
// rs2_h1_val == -129, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa8000ffefffbf;  op2val:0x00c000ff7f0009
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xaaaa8000ffefffbf, 0x00c000ff7f0009, x1, 560, x2)

inst_90:
// rs1_h1_val == 21845, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fdff55550005;  op2val:0xff7f00094000fff8
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xfff9fdff55550005, 0xff7f00094000fff8, x1, 568, x2)

inst_91:
// rs2_h1_val == 64, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffbffff7aaaa;  op2val:0xffef00030040fff7
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x5555ffbffff7aaaa, 0xffef00030040fff7, x1, 576, x2)

inst_92:
// rs1_h1_val == -513, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff8effffdff0008;  op2val:0x80003ffffdfffff8
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xfff8effffdff0008, 0x80003ffffdfffff8, x1, 584, x2)

inst_93:
// rs1_h2_val == 8, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0008ff7f0001;  op2val:0x000020ffdffffc
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xfffe0008ff7f0001, 0x000020ffdffffc, x1, 592, x2)

inst_94:
// rs1_h2_val == -5, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffb0040fdff;  op2val:0xfff90080bfff0010
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x8000fffb0040fdff, 0xfff90080bfff0010, x1, 600, x2)

inst_95:
// rs1_h1_val == -33, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x060100ffdf0010;  op2val:0xfffff7ff80000009
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x060100ffdf0010, 0xfffff7ff80000009, x1, 608, x2)

inst_96:
// rs2_h2_val == 0, 
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x07000201000010;  op2val:0x050000fff72000
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x07000201000010, 0x050000fff72000, x1, 616, x2)

inst_97:
// rs1_h3_val == rs2_h3_val, rs2_h0_val == -21846, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h1_val == 2048, rs2_h1_val == -9, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h3_val == 512, rs1_h0_val == -1025, rs2_h2_val == 4
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x200fff60800fbff;  op2val:0x2000004fff7aaaa
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x200fff60800fbff, 0x2000004fff7aaaa, x1, 624, x2)

inst_98:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h0_val == 4, rs1_h0_val == 2048, rs2_h2_val == 1024, rs1_h3_val == -33, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == 2, rs1_h2_val == -65
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffbf3fff0800;  op2val:0x020400fffa0004
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xffdfffbf3fff0800, 0x020400fffa0004, x1, 632, x2)

inst_99:
// rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h0_val == -17, rs2_h3_val == -9, rs1_h3_val == -2049, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 2048, rs2_h2_val == 32, rs1_h2_val == -3, rs2_h0_val == 256
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffdfff8ffef;  op2val:0xfff7002008000100
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xf7fffffdfff8ffef, 0xfff7002008000100, x1, 640, x2)

inst_100:
// rs2_h3_val == 8192, rs2_h2_val == -33, rs2_h0_val == 2048, rs1_h1_val == -4097, rs1_h0_val == -8193
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0x03fffeefffdfff;  op2val:0x2000ffdf00200800
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0x03fffeefffdfff, 0x2000ffdf00200800, x1, 648, x2)

inst_101:
// rs2_h3_val == 64, rs1_h2_val == -513
// opcode: smdrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fdff04000006;  op2val:0x4040007fff0000
TEST_RR_OP(smdrs, x31, x30, x29, 0x0000000000000000, 0xfff7fdff04000006, 0x4040007fff0000, x1, 656, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x21_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x21_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 83*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
