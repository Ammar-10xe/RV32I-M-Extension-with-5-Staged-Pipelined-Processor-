
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmmawb2 instruction of the RISC-V RV64PZicsr extension for the kmmawb2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmmawb2)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x18, rs2==x3, rd==x18, rs1_w0_val == -2147483648, rs2_h0_val == -17, rs1_w1_val == -8388609, rs2_h1_val == -2049
// opcode: kmmawb2 ; op1:x18; op2:x3; dest:x18; op1val:0xff7fffff80000000;  op2val:0xfffa3ffff7ffffef
TEST_PKRR_OP(kmmawb2, x18, x18, x3, 0x0000000000000000, 0xff7fffff80000000, 0xfffa3ffff7ffffef, x18, x7, 0, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x15, rs2==x19, rd==x17, rs2_h3_val == -21846, rs1_w1_val == -16777217, rs2_h1_val == 0, rs1_w0_val == -67108865
// opcode: kmmawb2 ; op1:x15; op2:x19; dest:x17; op1val:0xfefffffffbffffff;  op2val:0xaaaa3fff00000009
TEST_PKRR_OP(kmmawb2, x17, x15, x19, 0x0000000000000000, 0xfefffffffbffffff, 0xaaaa3fff00000009, x15, x7, 16, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x21, rs2==x21, rd==x25, rs2_h3_val == 21845, rs2_h1_val == 1, rs2_h2_val == -513, rs1_w0_val == -33, rs2_h0_val == -5, rs1_w1_val == 2097152
// opcode: kmmawb2 ; op1:x21; op2:x21; dest:x25; op1val:0x200000ffffffdf;  op2val:0x5555fdff0001fffb
TEST_PKRR_OP(kmmawb2, x25, x21, x21, 0x0000000000000000, 0x200000ffffffdf, 0x5555fdff0001fffb, x21, x7, 32, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x16, rs2==x16, rd==x16, rs2_h3_val == 32767, rs2_h1_val == 8192, rs1_w0_val == 8388608
// opcode: kmmawb2 ; op1:x16; op2:x16; dest:x16; op1val:0x00000500800000;  op2val:0x7ffffff92000fffa
TEST_PKRR_OP(kmmawb2, x16, x16, x16, 0x0000000000000000, 0x00000500800000, 0x7ffffff92000fffa, x16, x7, 48, x8)

inst_4:
// rs2 == rd != rs1, rs1==x31, rs2==x6, rd==x6, rs2_h3_val == -16385, rs2_h2_val == -16385, rs1_w0_val == 268435456, rs2_h0_val == 21845, rs1_w1_val == -134217729
// opcode: kmmawb2 ; op1:x31; op2:x6; dest:x6; op1val:0xf7ffffff10000000;  op2val:0xbfffbfffc0005555
TEST_PKRR_OP(kmmawb2, x6, x31, x6, 0x0000000000000000, 0xf7ffffff10000000, 0xbfffbfffc0005555, x31, x7, 64, x8)

inst_5:
// rs1==x2, rs2==x13, rd==x9, rs2_h3_val == -8193, rs1_w1_val == -65537, rs1_w0_val == 134217728, rs2_h1_val == -5, rs2_h2_val == 4096, rs2_h0_val == -2
// opcode: kmmawb2 ; op1:x2; op2:x13; dest:x9; op1val:0xfffeffff08000000;  op2val:0xdfff1000fffbfffe
TEST_PKRR_OP(kmmawb2, x9, x2, x13, 0x0000000000000000, 0xfffeffff08000000, 0xdfff1000fffbfffe, x2, x7, 80, x8)

inst_6:
// rs1==x24, rs2==x15, rd==x1, rs2_h3_val == -4097, rs2_h1_val == -513, rs1_w0_val == 1431655765, rs1_w1_val == -524289
// opcode: kmmawb2 ; op1:x24; op2:x15; dest:x1; op1val:0xfff7ffff55555555;  op2val:0xefff0007fdff0006
TEST_PKRR_OP(kmmawb2, x1, x24, x15, 0x0000000000000000, 0xfff7ffff55555555, 0xefff0007fdff0006, x24, x7, 96, x8)

inst_7:
// rs1==x5, rs2==x14, rd==x22, rs2_h3_val == -2049, rs1_w1_val == -257, rs2_h2_val == 1024, rs2_h1_val == -17, rs1_w0_val == -2
// opcode: kmmawb2 ; op1:x5; op2:x14; dest:x22; op1val:0xfffffefffffffffe;  op2val:0xf7ff0400ffeffffc
TEST_PKRR_OP(kmmawb2, x22, x5, x14, 0x0000000000000000, 0xfffffefffffffffe, 0xf7ff0400ffeffffc, x5, x7, 112, x8)

inst_8:
// rs1==x28, rs2==x12, rd==x24, rs2_h3_val == -1025, rs1_w0_val == -268435457, rs1_w1_val == -4194305, rs2_h0_val == -3, rs2_h1_val == -4097
// opcode: kmmawb2 ; op1:x28; op2:x12; dest:x24; op1val:0xffbfffffefffffff;  op2val:0xfbff0006effffffd
TEST_PKRR_OP(kmmawb2, x24, x28, x12, 0x0000000000000000, 0xffbfffffefffffff, 0xfbff0006effffffd, x28, x7, 128, x8)

inst_9:
// rs1==x6, rs2==x2, rd==x31, rs2_h3_val == -513, rs2_h0_val == 8192, rs1_w1_val == -513, rs2_h2_val == -2
// opcode: kmmawb2 ; op1:x6; op2:x2; dest:x31; op1val:0xfffffdff55555555;  op2val:0xfdfffffefffb2000
TEST_PKRR_OP(kmmawb2, x31, x6, x2, 0x0000000000000000, 0xfffffdff55555555, 0xfdfffffefffb2000, x6, x7, 144, x8)

inst_10:
// rs1==x10, rs2==x26, rd==x5, rs2_h3_val == -257, rs2_h1_val == -32768, rs1_w0_val == 128
// opcode: kmmawb2 ; op1:x10; op2:x26; dest:x5; op1val:0x00000900000080;  op2val:0xfefffff680003fff
TEST_PKRR_OP(kmmawb2, x5, x10, x26, 0x0000000000000000, 0x00000900000080, 0xfefffff680003fff, x10, x7, 160, x8)

inst_11:
// rs1==x17, rs2==x18, rd==x28, rs2_h3_val == -129, rs2_h2_val == -8193, rs1_w0_val == 1
// opcode: kmmawb2 ; op1:x17; op2:x18; dest:x28; op1val:0xc000000000000001;  op2val:0xff7fdfff0003c000
TEST_PKRR_OP(kmmawb2, x28, x17, x18, 0x0000000000000000, 0xc000000000000001, 0xff7fdfff0003c000, x17, x7, 176, x8)

inst_12:
// rs1==x29, rs2==x4, rd==x0, rs2_h3_val == -65, rs2_h2_val == -1, rs1_w0_val == -134217729
// opcode: kmmawb2 ; op1:x29; op2:x4; dest:x0; op1val:0x200000f7ffffff;  op2val:0xffbffffffffaffef
TEST_PKRR_OP(kmmawb2, x0, x29, x4, 0x0000000000000000, 0x200000f7ffffff, 0xffbffffffffaffef, x29, x7, 192, x8)

inst_13:
// rs1==x23, rs2==x25, rd==x4, rs2_h3_val == -33, rs1_w0_val == -524289, rs2_h0_val == -21846
// opcode: kmmawb2 ; op1:x23; op2:x25; dest:x4; op1val:0xfffffdfffff7ffff;  op2val:0xffdfbffffffcaaaa
TEST_PKRR_OP(kmmawb2, x4, x23, x25, 0x0000000000000000, 0xfffffdfffff7ffff, 0xffdfbffffffcaaaa, x23, x7, 208, x8)

inst_14:
// rs1==x12, rs2==x22, rd==x20, rs2_h3_val == -17, rs2_h0_val == 16384, rs1_w0_val == -2097153, rs2_h1_val == -1
// opcode: kmmawb2 ; op1:x12; op2:x22; dest:x20; op1val:0xfffeffffffdfffff;  op2val:0xffeffff9ffff4000
TEST_PKRR_OP(kmmawb2, x20, x12, x22, 0x0000000000000000, 0xfffeffffffdfffff, 0xffeffff9ffff4000, x12, x7, 224, x8)

inst_15:
// rs1==x0, rs2==x9, rd==x13, rs2_h3_val == -9, rs1_w1_val == -5, rs2_h0_val == 1, rs2_h2_val == 128
// opcode: kmmawb2 ; op1:x0; op2:x9; dest:x13; op1val:0xfffffffb55555555;  op2val:0xfff70080ffef0001
TEST_PKRR_OP(kmmawb2, x13, x0, x9, 0x0000000000000000, 0xfffffffb55555555, 0xfff70080ffef0001, x0, x7, 240, x3)

inst_16:
// rs1==x25, rs2==x29, rd==x26, rs2_h3_val == -5, rs2_h1_val == 21845, rs2_h0_val == -32768, rs1_w0_val == -3, rs2_h2_val == -129
// opcode: kmmawb2 ; op1:x25; op2:x29; dest:x26; op1val:0x000007fffffffd;  op2val:0xfffbff7f55558000
TEST_PKRR_OP(kmmawb2, x26, x25, x29, 0x0000000000000000, 0x000007fffffffd, 0xfffbff7f55558000, x25, x7, 256, x3)

inst_17:
// rs1==x27, rs2==x1, rd==x14, rs2_h3_val == -3, rs2_h1_val == 32767, rs2_h0_val == -1025, rs1_w1_val == -17, rs2_h2_val == 1
// opcode: kmmawb2 ; op1:x27; op2:x1; dest:x14; op1val:0xffffffef10000000;  op2val:0xfffd00017ffffbff
TEST_PKRR_OP(kmmawb2, x14, x27, x1, 0x0000000000000000, 0xffffffef10000000, 0xfffd00017ffffbff, x27, x7, 272, x3)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_18:
// rs1==x4, rs2==x31, rd==x15, rs2_h3_val == -2, rs2_h0_val == 64, rs1_w1_val == 65536, rs2_h2_val == -17
// opcode: kmmawb2 ; op1:x4; op2:x31; dest:x15; op1val:0x01000000000003;  op2val:0xfffeffef00010040
TEST_PKRR_OP(kmmawb2, x15, x4, x31, 0x0000000000000000, 0x01000000000003, 0xfffeffef00010040, x4, x6, 0, x3)

inst_19:
// rs1==x26, rs2==x30, rd==x23, rs2_h3_val == -32768, rs1_w1_val == 4, rs2_h0_val == 8, rs1_w0_val == -1431655766
// opcode: kmmawb2 ; op1:x26; op2:x30; dest:x23; op1val:0x000004aaaaaaaa;  op2val:0x8000fffafff80008
TEST_PKRR_OP(kmmawb2, x23, x26, x30, 0x0000000000000000, 0x000004aaaaaaaa, 0x8000fffafff80008, x26, x6, 16, x3)

inst_20:
// rs1==x9, rs2==x28, rd==x12, rs2_h3_val == 16384, rs1_w1_val == 4096, rs2_h1_val == 16, rs1_w0_val == -8388609
// opcode: kmmawb2 ; op1:x9; op2:x28; dest:x12; op1val:0x001000ff7fffff;  op2val:0x4000fffe00102000
TEST_PKRR_OP(kmmawb2, x12, x9, x28, 0x0000000000000000, 0x001000ff7fffff, 0x4000fffe00102000, x9, x6, 32, x3)

inst_21:
// rs1==x30, rs2==x8, rd==x19, rs2_h3_val == 8192, rs1_w1_val == 262144, rs2_h0_val == 16, rs2_h2_val == 21845, rs1_w0_val == 16384
// opcode: kmmawb2 ; op1:x30; op2:x8; dest:x19; op1val:0x04000000004000;  op2val:0x2000555580000010
TEST_PKRR_OP(kmmawb2, x19, x30, x8, 0x0000000000000000, 0x04000000004000, 0x2000555580000010, x30, x6, 48, x3)

inst_22:
// rs1==x20, rs2==x24, rd==x2, rs2_h3_val == 4096, rs2_h2_val == -1025, rs1_w1_val == 536870912, rs1_w0_val == -32769
// opcode: kmmawb2 ; op1:x20; op2:x24; dest:x2; op1val:0x20000000ffff7fff;  op2val:0x1000fbff00010005
TEST_PKRR_OP(kmmawb2, x2, x20, x24, 0x0000000000000000, 0x20000000ffff7fff, 0x1000fbff00010005, x20, x6, 64, x3)

inst_23:
// rs1==x13, rs2==x23, rd==x21, rs2_h3_val == 2048, rs2_h1_val == -1025, rs1_w0_val == -65537
// opcode: kmmawb2 ; op1:x13; op2:x23; dest:x21; op1val:0xffbffffffffeffff;  op2val:0x800ff7ffbfffbff
TEST_PKRR_OP(kmmawb2, x21, x13, x23, 0x0000000000000000, 0xffbffffffffeffff, 0x800ff7ffbfffbff, x13, x6, 80, x3)

inst_24:
// rs1==x8, rs2==x7, rd==x29, rs2_h3_val == 1024, rs1_w1_val == -2
// opcode: kmmawb2 ; op1:x8; op2:x7; dest:x29; op1val:0xfffffffe55555555;  op2val:0x400c0007fff2000
TEST_PKRR_OP(kmmawb2, x29, x8, x7, 0x0000000000000000, 0xfffffffe55555555, 0x400c0007fff2000, x8, x6, 96, x3)

inst_25:
// rs1==x22, rs2==x17, rd==x11, rs2_h3_val == 512, rs2_h0_val == -4097, rs2_h2_val == -9, rs2_h1_val == 64
// opcode: kmmawb2 ; op1:x22; op2:x17; dest:x11; op1val:0x200000ffff7fff;  op2val:0x200fff70040efff
TEST_PKRR_OP(kmmawb2, x11, x22, x17, 0x0000000000000000, 0x200000ffff7fff, 0x200fff70040efff, x22, x6, 112, x3)

inst_26:
// rs1==x19, rs2==x20, rd==x30, rs2_h3_val == 256, rs1_w1_val == -1025, rs1_w0_val == 1024, rs2_h2_val == 32767
// opcode: kmmawb2 ; op1:x19; op2:x20; dest:x30; op1val:0xfffffbff00000400;  op2val:0x1007fffc0000006
TEST_PKRR_OP(kmmawb2, x30, x19, x20, 0x0000000000000000, 0xfffffbff00000400, 0x1007fffc0000006, x19, x6, 128, x3)

inst_27:
// rs1==x7, rs2==x27, rd==x10, rs2_h3_val == 128, rs2_h2_val == 8, rs1_w1_val == 4194304, rs2_h0_val == 32767
// opcode: kmmawb2 ; op1:x7; op2:x27; dest:x10; op1val:0x40000000000400;  op2val:0x80000800077fff
TEST_PKRR_OP(kmmawb2, x10, x7, x27, 0x0000000000000000, 0x40000000000400, 0x80000800077fff, x7, x6, 144, x3)

inst_28:
// rs1==x1, rs2==x11, rd==x7, rs2_h3_val == 64, rs2_h1_val == 4, rs1_w0_val == 8192, rs2_h2_val == -2049
// opcode: kmmawb2 ; op1:x1; op2:x11; dest:x7; op1val:0xc000000000002000;  op2val:0x40f7ff0004c000
TEST_PKRR_OP(kmmawb2, x7, x1, x11, 0x0000000000000000, 0xc000000000002000, 0x40f7ff0004c000, x1, x6, 160, x2)

inst_29:
// rs1==x3, rs2==x0, rd==x27, rs2_h3_val == 32, rs2_h0_val == -16385
// opcode: kmmawb2 ; op1:x3; op2:x0; dest:x27; op1val:0xfffffff655555555;  op2val:0x2000808000bfff
TEST_PKRR_OP(kmmawb2, x27, x3, x0, 0x0000000000000000, 0xfffffff655555555, 0x2000808000bfff, x3, x6, 176, x2)

inst_30:
// rs1==x14, rs2==x10, rd==x3, rs2_h3_val == 16, rs2_h1_val == 1024, rs1_w1_val == -536870913, rs1_w0_val == -1
// opcode: kmmawb2 ; op1:x14; op2:x10; dest:x3; op1val:0xdfffffffffffffff;  op2val:0x10040004000040
TEST_PKRR_OP(kmmawb2, x3, x14, x10, 0x0000000000000000, 0xdfffffffffffffff, 0x10040004000040, x14, x6, 192, x2)

inst_31:
// rs1==x11, rs2==x5, rd==x8, rs2_h3_val == 8, rs2_h0_val == -65, rs1_w0_val == -16777217
// opcode: kmmawb2 ; op1:x11; op2:x5; dest:x8; op1val:0x001000feffffff;  op2val:0x08fff6ffffffbf
TEST_PKRR_OP(kmmawb2, x8, x11, x5, 0x0000000000000000, 0x001000feffffff, 0x08fff6ffffffbf, x11, x6, 208, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs2_h3_val == 4, rs2_h0_val == -9, rs1_w0_val == 65536
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600010000;  op2val:0x04fff9fffffff7
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfffffff600010000, 0x04fff9fffffff7, x30, x1, 0, x2)

inst_33:
// rs2_h3_val == 2, rs2_h0_val == -513
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000007;  op2val:0x020007ffeffdff
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xffffffef00000007, 0x020007ffeffdff, x30, x1, 16, x2)

inst_34:
// rs2_h3_val == 1, rs2_h0_val == -1, rs1_w1_val == 512, rs1_w0_val == -8193, rs2_h1_val == 2048
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x000200ffffdfff;  op2val:0x0100060800ffff
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x000200ffffdfff, 0x0100060800ffff, x30, x1, 32, x2)

inst_35:
// rs2_h3_val == 0, rs2_h1_val == -3, rs1_w0_val == -513, rs1_w1_val == 268435456
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffdff;  op2val:0x00ff7ffffd2000
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x10000000fffffdff, 0x00ff7ffffd2000, x30, x1, 48, x2)

inst_36:
// rs2_h3_val == -1, rs2_h2_val == -65, rs1_w0_val == 32
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000020;  op2val:0xffffffbffffac000
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000020, 0xffffffbffffac000, x30, x1, 64, x2)

inst_37:
// rs2_h2_val == -21846, rs2_h0_val == 0, rs1_w1_val == -2049, rs2_h1_val == -9
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffffffd;  op2val:0x04aaaafff70000
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffffffd, 0x04aaaafff70000, x30, x1, 80, x2)

inst_38:
// rs2_h2_val == -4097, rs2_h0_val == -8193, rs1_w1_val == -2097153, rs1_w0_val == 16
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000010;  op2val:0x4000efff7fffdfff
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000010, 0x4000efff7fffdfff, x30, x1, 96, x2)

inst_39:
// rs2_h2_val == -257, rs1_w1_val == 16777216, rs2_h1_val == 128, rs2_h0_val == 4, rs1_w0_val == 1073741824
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x100000040000000;  op2val:0x08feff00800004
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x100000040000000, 0x08feff00800004, x30, x1, 112, x2)

inst_40:
// rs1_w0_val == 2097152, rs2_h2_val == 8192
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000200000;  op2val:0xffff2000fbfffffe
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x1000000000200000, 0xffff2000fbfffffe, x30, x1, 128, x2)

inst_41:
// rs1_w0_val == 1048576, rs2_h1_val == -129, rs1_w1_val == 128, rs2_h0_val == 128
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000100000;  op2val:0x8000aaaaff7f0080
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x00008000100000, 0x8000aaaaff7f0080, x30, x1, 144, x2)

inst_42:
// rs1_w0_val == 524288, rs1_w1_val == 1073741824, rs2_h1_val == -65
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000080000;  op2val:0x10fff8ffbffffe
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x4000000000080000, 0x10fff8ffbffffe, x30, x1, 160, x2)

inst_43:
// rs1_w0_val == 262144, rs1_w1_val == 256
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000040000;  op2val:0xfffa10007fff0000
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x00010000040000, 0xfffa10007fff0000, x30, x1, 176, x2)

inst_44:
// rs1_w0_val == 131072, rs2_h2_val == 16
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00020000;  op2val:0xefff0010c000fff6
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfffffdff00020000, 0xefff0010c000fff6, x30, x1, 192, x2)

inst_45:
// rs1_w0_val == 32768, rs1_w1_val == 67108864
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000008000;  op2val:0x40ffeffffffffd
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x400000000008000, 0x40ffeffffffffd, x30, x1, 208, x2)

inst_46:
// rs1_w0_val == 4096, rs2_h1_val == -21846
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900001000;  op2val:0xffbf5555aaaadfff
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x00000900001000, 0xffbf5555aaaadfff, x30, x1, 224, x2)

inst_47:
// rs1_w0_val == 2048, rs2_h1_val == 4096, rs1_w1_val == -2147483648, rs2_h2_val == 256
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000800;  op2val:0x20001001000bfff
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x8000000000000800, 0x20001001000bfff, x30, x1, 240, x2)

inst_48:
// rs1_w0_val == 512, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000200;  op2val:0x8000070007ffbf
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x00020000000200, 0x8000070007ffbf, x30, x1, 256, x2)

inst_49:
// rs1_w0_val == 256, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500000100;  op2val:0x05fff6fffc0001
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x00000500000100, 0x05fff6fffc0001, x30, x1, 272, x2)

inst_50:
// rs1_w0_val == 64, rs1_w1_val == -1073741825
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000040;  op2val:0xfff60006f7ff3fff
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000040, 0xfff60006f7ff3fff, x30, x1, 288, x2)

inst_51:
// rs1_w0_val == 8, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00000008;  op2val:0xfbff7fff0010fff7
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfffffffc00000008, 0xfbff7fff0010fff7, x30, x1, 304, x2)

inst_52:
// rs1_w0_val == 4, rs2_h1_val == -257, rs1_w1_val == -4097
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000004;  op2val:0xfff70005fefffdff
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xffffefff00000004, 0xfff70005fefffdff, x30, x1, 320, x2)

inst_53:
// rs1_w0_val == 2, rs2_h1_val == 32, rs1_w1_val == 8388608, rs2_h0_val == 1024, rs2_h2_val == 512
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000002;  op2val:0xfffb020000200400
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x80000000000002, 0xfffb020000200400, x30, x1, 336, x2)

inst_54:
// rs1_w0_val == 0, rs2_h1_val == 256
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000000;  op2val:0x2004000100fffe
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000000, 0x2004000100fffe, x30, x1, 352, x2)

inst_55:
// rs2_h2_val == -33, rs1_w0_val == 16777216, rs1_w1_val == -268435457
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff01000000;  op2val:0x1000ffdff7ffffef
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xefffffff01000000, 0x1000ffdff7ffffef, x30, x1, 368, x2)

inst_56:
// rs2_h2_val == -5, rs1_w0_val == -131073
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fffdffff;  op2val:0x5555fffb0080ffef
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfffffff6fffdffff, 0x5555fffb0080ffef, x30, x1, 384, x2)

inst_57:
// rs2_h2_val == -3, rs1_w0_val == -257
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffeff;  op2val:0x06fffd0040fff6
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x400000fffffeff, 0x06fffd0040fff6, x30, x1, 400, x2)

inst_58:
// rs2_h2_val == -32768, rs2_h0_val == 2
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00040000;  op2val:0xff7f800000000002
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfffffbff00040000, 0xff7f800000000002, x30, x1, 416, x2)

inst_59:
// rs2_h2_val == 16384, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x00000300000200;  op2val:0xfbff4000fff90040
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x00000300000200, 0xfbff4000fff90040, x30, x1, 432, x2)

inst_60:
// rs2_h2_val == 2048, rs2_h0_val == 512, rs1_w1_val == 134217728
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x800000080000000;  op2val:0x060800feff0200
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x800000080000000, 0x060800feff0200, x30, x1, 448, x2)

inst_61:
// rs2_h2_val == 64, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900000020;  op2val:0xbfff0040ffbfc000
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfffffff900000020, 0xbfff0040ffbfc000, x30, x1, 464, x2)

inst_62:
// rs2_h2_val == 32, rs1_w1_val == 64, rs1_w0_val == -33554433
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x000040fdffffff;  op2val:0xffef00200800fffb
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x000040fdffffff, 0xffef00200800fffb, x30, x1, 480, x2)

inst_63:
// rs2_h2_val == 4, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffffdfff;  op2val:0x3fff0004fbff0080
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x20000000ffffdfff, 0x3fff0004fbff0080, x30, x1, 496, x2)

inst_64:
// rs2_h2_val == 2, rs1_w1_val == -1, rs2_h1_val == -16385
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000020;  op2val:0xfff80002bfff2000
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xffffffff00000020, 0xfff80002bfff2000, x30, x1, 512, x2)

inst_65:
// rs2_h2_val == 0, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000aaaaaaaa;  op2val:0x40000000040004
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x10000000aaaaaaaa, 0x40000000040004, x30, x1, 528, x2)

inst_66:
// rs2_h1_val == -8193, rs2_h0_val == -257
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00100000;  op2val:0xc000ffffdffffeff
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00100000, 0xc000ffffdffffeff, x30, x1, 544, x2)

inst_67:
// rs2_h1_val == -33, rs2_h0_val == -129
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000000;  op2val:0x1000fffcffdfff7f
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000000, 0x1000fffcffdfff7f, x30, x1, 560, x2)

inst_68:
// rs2_h0_val == 4096, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffff7fffff;  op2val:0x10000100fffc1000
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xf7ffffffff7fffff, 0x10000100fffc1000, x30, x1, 576, x2)

inst_69:
// rs2_h0_val == 2048, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000020000;  op2val:0x200000104000800
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x00010000020000, 0x200000104000800, x30, x1, 592, x2)

inst_70:
// rs2_h0_val == 256, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefbffffff;  op2val:0x03fdff00010100
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfffffffefbffffff, 0x03fdff00010100, x30, x1, 608, x2)

inst_71:
// rs2_h0_val == 32, rs2_h1_val == 16384
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000ffffdfff;  op2val:0x05ffff40000020
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x10000000ffffdfff, 0x05ffff40000020, x30, x1, 624, x2)

inst_72:
// rs1_w1_val == -1431655766, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafeffffff;  op2val:0x07aaaa0005dfff
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafeffffff, 0x07aaaa0005dfff, x30, x1, 640, x2)

inst_73:
// rs1_w1_val == 1431655765, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500800000;  op2val:0x080007bfff0008
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x5555555500800000, 0x080007bfff0008, x30, x1, 656, x2)

inst_74:
// rs1_w1_val == 2147483647, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffdfffff;  op2val:0xfffa3ffffffdfff8
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x7fffffffffdfffff, 0xfffa3ffffffdfff8, x30, x1, 672, x2)

inst_75:
// rs1_w1_val == -67108865, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffffff;  op2val:0x060004ff7fffff
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfbffffffffffffff, 0x060004ff7fffff, x30, x1, 688, x2)

inst_76:
// rs1_w1_val == -33554433, rs1_w0_val == -4097
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffffefff;  op2val:0xfff7c000fffa0400
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfdffffffffffefff, 0xfff7c000fffa0400, x30, x1, 704, x2)

inst_77:
// rs1_w1_val == -1048577, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000002;  op2val:0x1000080ffbfffff
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xffefffff00000002, 0x1000080ffbfffff, x30, x1, 720, x2)

inst_78:
// rs1_w1_val == -262145, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffaaaaaaaa;  op2val:0xeffff7ff00800003
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfffbffffaaaaaaaa, 0xeffff7ff00800003, x30, x1, 736, x2)

inst_79:
// rs1_w1_val == -131073, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffaaaaaaaa;  op2val:0x040400fff80006
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfffdffffaaaaaaaa, 0x040400fff80006, x30, x1, 752, x2)

inst_80:
// rs1_w1_val == -32769, rs1_w0_val == -1025
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffffbff;  op2val:0xffdf10000010fffa
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffffbff, 0xffdf10000010fffa, x30, x1, 768, x2)

inst_81:
// rs1_w1_val == -16385, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff3fffffff;  op2val:0xffdffff9ffbfff7f
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xffffbfff3fffffff, 0xffdffff9ffbfff7f, x30, x1, 784, x2)

inst_82:
// rs1_w1_val == -8193, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffffffdff;  op2val:0xffbf1000fffc0001
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xffffdffffffffdff, 0xffbf1000fffc0001, x30, x1, 800, x2)

inst_83:
// rs1_w1_val == -129, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffffffd;  op2val:0xfffdeffffffafdff
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffffd, 0xfffdeffffffafdff, x30, x1, 816, x2)

inst_84:
// rs1_w1_val == -65, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffdffffff;  op2val:0xffdf08000040fff8
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xffffffbffdffffff, 0xffdf08000040fff8, x30, x1, 832, x2)

inst_85:
// rs1_w1_val == -33, rs1_w0_val == -1073741825
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfbfffffff;  op2val:0xfff8efff40000006
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xffffffdfbfffffff, 0xfff8efff40000006, x30, x1, 848, x2)

inst_86:
// rs1_w1_val == -9, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7aaaaaaaa;  op2val:0x7fffaaaa01000005
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfffffff7aaaaaaaa, 0x7fffaaaa01000005, x30, x1, 864, x2)

inst_87:
// rs1_w1_val == -3, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000100;  op2val:0xfff90040ffdf0005
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000100, 0xfff90040ffdf0005, x30, x1, 880, x2)

inst_88:
// rs1_w1_val == 33554432, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000005;  op2val:0xfffc0004dfff0006
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x200000000000005, 0xfffc0004dfff0006, x30, x1, 896, x2)

inst_89:
// rs1_w1_val == 1048576, rs2_h0_val == -33, rs1_w0_val == 2147483647
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x1000007fffffff;  op2val:0xffbf02000006ffdf
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x1000007fffffff, 0xffbf02000006ffdf, x30, x1, 912, x2)

inst_90:
// rs1_w1_val == 524288, rs1_w0_val == 536870912, rs2_h1_val == 512
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x08000020000000;  op2val:0x0701000200fff9
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x08000020000000, 0x0701000200fff9, x30, x1, 928, x2)

inst_91:
// rs1_w1_val == 131072, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000004000;  op2val:0xdfffffefffef0010
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x02000000004000, 0xdfffffefffef0010, x30, x1, 944, x2)

inst_92:
// rs1_w1_val == 32768, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x00800001000000;  op2val:0xc0000005fff90080
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x00800001000000, 0xc0000005fff90080, x30, x1, 960, x2)

inst_93:
// rs1_w1_val == 16384, rs1_w0_val == -4194305
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffbfffff;  op2val:0xbfffffef00068000
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x004000ffbfffff, 0xbfffffef00068000, x30, x1, 976, x2)

inst_94:
// rs1_w1_val == 8192, rs1_w0_val == 33554432
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x00200002000000;  op2val:0x06c000fbff0008
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x00200002000000, 0x06c000fbff0008, x30, x1, 992, x2)

inst_95:
// rs1_w1_val == 2048, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffbfffff;  op2val:0xfff9000500047fff
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x000800ffbfffff, 0xfff9000500047fff, x30, x1, 1008, x2)

inst_96:
// rs1_w1_val == 1024, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffffffdf;  op2val:0x7fff800010000100
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x000400ffffffdf, 0x7fff800010000100, x30, x1, 1024, x2)

inst_97:
// rs1_w1_val == 32, rs2_h1_val == 8
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000080000;  op2val:0x80000400008efff
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x00002000080000, 0x80000400008efff, x30, x1, 1040, x2)

inst_98:
// rs1_w1_val == 16, rs1_w0_val == -1048577
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffefffff;  op2val:0x200fffe0800fff9
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x000010ffefffff, 0x200fffe0800fff9, x30, x1, 1056, x2)

inst_99:
// rs1_w1_val == 8, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffffdfff;  op2val:0xfff9ffbf01003fff
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x000008ffffdfff, 0xfff9ffbf01003fff, x30, x1, 1072, x2)

inst_100:
// rs1_w1_val == 2, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200020000;  op2val:0xefff0040fdffaaaa
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x00000200020000, 0xefff0040fdffaaaa, x30, x1, 1088, x2)

inst_101:
// rs1_w1_val == 1, rs2_h0_val == -2049
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000010;  op2val:0x400004fffaf7ff
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x00000100000010, 0x400004fffaf7ff, x30, x1, 1104, x2)

inst_102:
// rs1_w0_val == -262145, rs1_w1_val == 0
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffbffff;  op2val:0xdfff00404000fffa
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x000000fffbffff, 0xdfff00404000fffa, x30, x1, 1120, x2)

inst_103:
// rs1_w0_val == -16385, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x200000ffffbfff;  op2val:0xfff8ffbf2000fffa
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x200000ffffbfff, 0xfff8ffbf2000fffa, x30, x1, 1136, x2)

inst_104:
// rs2_h1_val == 2, rs1_w0_val == -129
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8ffffff7f;  op2val:0x00000500020010
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfffffff8ffffff7f, 0x00000500020010, x30, x1, 1152, x2)

inst_105:
// rs1_w0_val == -2049, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffff7ff;  op2val:0xc0000001fff9fffa
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x1000000fffff7ff, 0xc0000001fff9fffa, x30, x1, 1168, x2)

inst_106:
// rs1_w0_val == -65, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffffffbf;  op2val:0x80001000007f7ff
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x004000ffffffbf, 0x80001000007f7ff, x30, x1, 1184, x2)

inst_107:
// rs1_w0_val == -17, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffffffef;  op2val:0x08fdffff7ffff6
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfffffffdffffffef, 0x08fdffff7ffff6, x30, x1, 1200, x2)

inst_108:
// rs1_w0_val == -9, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffffff7;  op2val:0xfbff10000020fff8
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfffffffefffffff7, 0xfbff10000020fff8, x30, x1, 1216, x2)

inst_109:
// rs1_w0_val == -5, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffffb;  op2val:0xfffdfff60008fff7
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x080000fffffffb, 0xfffdfff60008fff7, x30, x1, 1232, x2)

inst_110:
// rs1_w0_val == -536870913, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaadfffffff;  op2val:0x100fffcffffffdf
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaadfffffff, 0x100fffcffffffdf, x30, x1, 1248, x2)

inst_111:
// rs2_h1_val == -2, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x000006aaaaaaaa;  op2val:0x06fffdfffe0008
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x000006aaaaaaaa, 0x06fffdfffe0008, x30, x1, 1264, x2)

inst_112:
// rs1_w0_val == 67108864, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x00000804000000;  op2val:0xfffbfffffff70002
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x00000804000000, 0xfffbfffffff70002, x30, x1, 1280, x2)

inst_113:
// rs1_w0_val == 4194304, 
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00400000;  op2val:0x020400fefffff8
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0xfffffeff00400000, 0x020400fefffff8, x30, x1, 1296, x2)

inst_114:
// rs2_h3_val == -65, rs2_h2_val == -1, rs1_w0_val == -134217729
// opcode: kmmawb2 ; op1:x30; op2:x29; dest:x31; op1val:0x200000f7ffffff;  op2val:0xffbffffffffaffef
TEST_PKRR_OP(kmmawb2, x31, x30, x29, 0x0000000000000000, 0x200000f7ffffff, 0xffbffffffffaffef, x30, x1, 1312, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 166*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
