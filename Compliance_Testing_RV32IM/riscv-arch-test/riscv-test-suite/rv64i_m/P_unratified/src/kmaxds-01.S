
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmaxds instruction of the RISC-V RV64PZicsr extension for the kmaxds covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmaxds)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 == rd != rs2, rs1==x23, rs2==x27, rd==x23, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val == -257, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs2_h3_val == 64, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h2_val == 32, rs1_h3_val == -2
// opcode: kmaxds ; op1:x23; op2:x27; dest:x23; op1val:0xfffefff8feff8000;  op2val:0x400020fffc0009
TEST_PKRR_OP(kmaxds, x23, x23, x27, 0x0000000000000000, 0xfffefff8feff8000, 0x400020fffc0009, x23, x11, 0, x14)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x15, rs2==x4, rd==x3, rs1_h3_val == rs2_h3_val, rs1_h1_val == -9, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h2_val == -129, rs2_h1_val == 16, rs2_h2_val == 32767
// opcode: kmaxds ; op1:x15; op2:x4; dest:x3; op1val:0x09ff7ffff70007;  op2val:0x097fff0010fffa
TEST_PKRR_OP(kmaxds, x3, x15, x4, 0x0000000000000000, 0x09ff7ffff70007, 0x097fff0010fffa, x15, x11, 16, x14)

inst_2:
// rs1 == rs2 != rd, rs1==x2, rs2==x2, rd==x20, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h1_val == -5, rs1_h2_val == 64, rs1_h0_val == 2048, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h1_val == -9, rs1_h3_val == -257, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: kmaxds ; op1:x2; op2:x2; dest:x20; op1val:0xfeff0040fffb0800;  op2val:0xfff9c000fff70005
TEST_PKRR_OP(kmaxds, x20, x2, x2, 0x0000000000000000, 0xfeff0040fffb0800, 0xfff9c000fff70005, x2, x11, 32, x14)

inst_3:
// rs1 == rs2 == rd, rs1==x0, rs2==x0, rd==x0, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 32, rs2_h0_val == -257, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 1, rs1_h0_val == -21846, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h2_val == -9, rs2_h3_val == -8193
// opcode: kmaxds ; op1:x0; op2:x0; dest:x0; op1val:0x20fff70001aaaa;  op2val:0xdfff00093ffffeff
TEST_PKRR_OP(kmaxds, x0, x0, x0, 0x0000000000000000, 0x20fff70001aaaa, 0xdfff00093ffffeff, x0, x11, 48, x14)

inst_4:
// rs2 == rd != rs1, rs1==x28, rs2==x10, rd==x10, rs1_h2_val == rs2_h2_val, rs2_h1_val == -2049, rs1_h1_val == 512, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == -4097, rs2_h2_val == -2, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val == -2
// opcode: kmaxds ; op1:x28; op2:x10; dest:x10; op1val:0x05fffe02000800;  op2val:0xfffafffef7ffefff
TEST_PKRR_OP(kmaxds, x10, x28, x10, 0x0000000000000000, 0x05fffe02000800, 0xfffafffef7ffefff, x28, x11, 64, x14)

inst_5:
// rs1==x7, rs2==x20, rd==x29, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val == -3, rs2_h0_val == 16, rs1_h2_val == 8, rs2_h3_val == 16384, rs2_h1_val == -17, rs1_h3_val == -1025, rs2_h2_val == 4, rs1_h0_val == -257
// opcode: kmaxds ; op1:x7; op2:x20; dest:x29; op1val:0xfbff0008fffdfeff;  op2val:0x40000004ffef0010
TEST_PKRR_OP(kmaxds, x29, x7, x20, 0x0000000000000000, 0xfbff0008fffdfeff, 0x40000004ffef0010, x7, x11, 80, x14)

inst_6:
// rs1==x30, rs2==x18, rd==x17, rs1_h1_val == rs2_h1_val, rs1_h2_val == 1024, rs1_h1_val == 2048, rs2_h0_val == -5, rs1_h0_val == 1, rs2_h1_val == 2048
// opcode: kmaxds ; op1:x30; op2:x18; dest:x17; op1val:0x05040008000001;  op2val:0x400000090800fffb
TEST_PKRR_OP(kmaxds, x17, x30, x18, 0x0000000000000000, 0x05040008000001, 0x400000090800fffb, x30, x11, 96, x14)

inst_7:
// rs1==x10, rs2==x15, rd==x12, rs1_h0_val == rs2_h0_val, rs2_h2_val == -8193, rs1_h1_val == -21846, rs1_h3_val == -33, rs2_h3_val == 2, rs2_h1_val == 8
// opcode: kmaxds ; op1:x10; op2:x15; dest:x12; op1val:0xffdffffcaaaafffc;  op2val:0x02dfff0008fffc
TEST_PKRR_OP(kmaxds, x12, x10, x15, 0x0000000000000000, 0xffdffffcaaaafffc, 0x02dfff0008fffc, x10, x11, 112, x14)

inst_8:
// rs1==x18, rs2==x31, rd==x21, rs2_h3_val == -21846, rs1_h2_val == 2048, rs1_h0_val == -3, rs1_h3_val == -21846, rs2_h0_val == -65, rs1_h1_val == -2049, rs2_h2_val == 21845
// opcode: kmaxds ; op1:x18; op2:x31; dest:x21; op1val:0xaaaa0800f7fffffd;  op2val:0xaaaa5555fffcffbf
TEST_PKRR_OP(kmaxds, x21, x18, x31, 0x0000000000000000, 0xaaaa0800f7fffffd, 0xaaaa5555fffcffbf, x18, x11, 128, x14)

inst_9:
// rs1==x8, rs2==x1, rd==x7, rs2_h3_val == 21845, rs1_h2_val == 4
// opcode: kmaxds ; op1:x8; op2:x1; dest:x7; op1val:0x030004fffd0005;  op2val:0x5555c0000008efff
TEST_PKRR_OP(kmaxds, x7, x8, x1, 0x0000000000000000, 0x030004fffd0005, 0x5555c0000008efff, x8, x11, 144, x14)

inst_10:
// rs1==x27, rs2==x19, rd==x18, rs2_h3_val == 32767, rs1_h2_val == 1, rs2_h2_val == 8192, rs2_h0_val == -2, rs1_h0_val == 32767, rs1_h3_val == 4096
// opcode: kmaxds ; op1:x27; op2:x19; dest:x18; op1val:0x10000001fff97fff;  op2val:0x7fff2000fffafffe
TEST_PKRR_OP(kmaxds, x18, x27, x19, 0x0000000000000000, 0x10000001fff97fff, 0x7fff2000fffafffe, x27, x11, 160, x14)

inst_11:
// rs1==x6, rs2==x5, rd==x8, rs2_h3_val == -16385, rs2_h0_val == 64, rs2_h2_val == -257, rs1_h0_val == 1024, rs1_h1_val == 16, rs1_h2_val == 32767, rs2_h1_val == -32768, rs1_h3_val == 8192
// opcode: kmaxds ; op1:x6; op2:x5; dest:x8; op1val:0x20007fff00100400;  op2val:0xbffffeff80000040
TEST_PKRR_OP(kmaxds, x8, x6, x5, 0x0000000000000000, 0x20007fff00100400, 0xbffffeff80000040, x6, x11, 176, x14)

inst_12:
// rs1==x13, rs2==x12, rd==x1, rs2_h3_val == -4097, rs1_h0_val == -33, rs2_h0_val == 2, rs1_h3_val == -9, rs1_h2_val == -5, rs2_h1_val == 32
// opcode: kmaxds ; op1:x13; op2:x12; dest:x1; op1val:0xfff7fffbfff6ffdf;  op2val:0xefff555500200002
TEST_PKRR_OP(kmaxds, x1, x13, x12, 0x0000000000000000, 0xfff7fffbfff6ffdf, 0xefff555500200002, x13, x11, 192, x14)

inst_13:
// rs1==x25, rs2==x9, rd==x27, rs2_h3_val == -2049, rs1_h3_val == 64, rs2_h0_val == 2048, rs1_h2_val == -513, rs1_h0_val == -1, rs2_h1_val == 128
// opcode: kmaxds ; op1:x25; op2:x9; dest:x27; op1val:0x40fdff0010ffff;  op2val:0xf7ff7fff00800800
TEST_PKRR_OP(kmaxds, x27, x25, x9, 0x0000000000000000, 0x40fdff0010ffff, 0xf7ff7fff00800800, x25, x11, 208, x14)

inst_14:
// rs1==x26, rs2==x30, rd==x25, rs2_h3_val == -1025, rs2_h1_val == 2, rs1_h0_val == -2, rs1_h2_val == 128, rs1_h1_val == 64, rs1_h3_val == -129, rs2_h2_val == 1024
// opcode: kmaxds ; op1:x26; op2:x30; dest:x25; op1val:0xff7f00800040fffe;  op2val:0xfbff04000002fffc
TEST_PKRR_OP(kmaxds, x25, x26, x30, 0x0000000000000000, 0xff7f00800040fffe, 0xfbff04000002fffc, x26, x11, 224, x14)

inst_15:
// rs1==x21, rs2==x25, rd==x22, rs2_h3_val == -513, rs1_h1_val == 256, rs2_h1_val == -65, rs2_h2_val == 1, rs1_h0_val == 2
// opcode: kmaxds ; op1:x21; op2:x25; dest:x22; op1val:0x07fdff01000002;  op2val:0xfdff0001ffbf0002
TEST_PKRR_OP(kmaxds, x22, x21, x25, 0x0000000000000000, 0x07fdff01000002, 0xfdff0001ffbf0002, x21, x11, 240, x17)
RVTEST_SIGBASE(x10,signature_x10_0)

inst_16:
// rs1==x1, rs2==x7, rd==x11, rs2_h3_val == -257, rs1_h2_val == -17, rs1_h1_val == 128, rs2_h1_val == -33, rs2_h0_val == 512
// opcode: kmaxds ; op1:x1; op2:x7; dest:x11; op1val:0x20ffef00800400;  op2val:0xfeff0001ffdf0200
TEST_PKRR_OP(kmaxds, x11, x1, x7, 0x0000000000000000, 0x20ffef00800400, 0xfeff0001ffdf0200, x1, x10, 0, x17)

inst_17:
// rs1==x3, rs2==x21, rd==x15, rs2_h3_val == -129, rs1_h2_val == -65, rs2_h0_val == -33, rs2_h2_val == 16, rs1_h1_val == 16384
// opcode: kmaxds ; op1:x3; op2:x21; dest:x15; op1val:0xfbffffbf40000002;  op2val:0xff7f00100007ffdf
TEST_PKRR_OP(kmaxds, x15, x3, x21, 0x0000000000000000, 0xfbffffbf40000002, 0xff7f00100007ffdf, x3, x10, 16, x17)

inst_18:
// rs1==x16, rs2==x14, rd==x24, rs2_h3_val == -65, rs1_h2_val == 2, rs2_h0_val == 0
// opcode: kmaxds ; op1:x16; op2:x14; dest:x24; op1val:0x4000023ffffeff;  op2val:0xffbf000500050000
TEST_PKRR_OP(kmaxds, x24, x16, x14, 0x0000000000000000, 0x4000023ffffeff, 0xffbf000500050000, x16, x10, 32, x17)

inst_19:
// rs1==x12, rs2==x13, rd==x19, rs2_h3_val == -33, rs1_h0_val == 8192, rs2_h0_val == 128
// opcode: kmaxds ; op1:x12; op2:x13; dest:x19; op1val:0xfff90007fff82000;  op2val:0xffdf000100200080
TEST_PKRR_OP(kmaxds, x19, x12, x13, 0x0000000000000000, 0xfff90007fff82000, 0xffdf000100200080, x12, x10, 48, x17)

inst_20:
// rs1==x9, rs2==x28, rd==x31, rs2_h3_val == -17, rs2_h2_val == -1025, rs1_h1_val == 1024, rs2_h1_val == -5, rs1_h2_val == -3, rs1_h0_val == -513
// opcode: kmaxds ; op1:x9; op2:x28; dest:x31; op1val:0xaaaafffd0400fdff;  op2val:0xffeffbfffffbefff
TEST_PKRR_OP(kmaxds, x31, x9, x28, 0x0000000000000000, 0xaaaafffd0400fdff, 0xffeffbfffffbefff, x9, x10, 64, x17)

inst_21:
// rs1==x11, rs2==x26, rd==x30, rs2_h3_val == -9, rs1_h1_val == -2, rs2_h1_val == 1, rs2_h2_val == -129, rs1_h2_val == 0, rs1_h3_val == -65
// opcode: kmaxds ; op1:x11; op2:x26; dest:x30; op1val:0xffbf0000fffeffff;  op2val:0xfff7ff7f00010005
TEST_PKRR_OP(kmaxds, x30, x11, x26, 0x0000000000000000, 0xffbf0000fffeffff, 0xfff7ff7f00010005, x11, x10, 80, x17)

inst_22:
// rs1==x5, rs2==x16, rd==x14, rs2_h3_val == -5, rs1_h1_val == 4, rs1_h2_val == 16, rs2_h0_val == 21845
// opcode: kmaxds ; op1:x5; op2:x16; dest:x14; op1val:0xfffa00100004fff8;  op2val:0xfffbfbffffdf5555
TEST_PKRR_OP(kmaxds, x14, x5, x16, 0x0000000000000000, 0xfffa00100004fff8, 0xfffbfbffffdf5555, x5, x10, 96, x17)

inst_23:
// rs1==x19, rs2==x6, rd==x28, rs2_h3_val == -3, rs2_h2_val == -1, rs2_h0_val == 32767, rs1_h0_val == 128, rs1_h2_val == -2049, rs1_h1_val == 0, rs1_h3_val == -3
// opcode: kmaxds ; op1:x19; op2:x6; dest:x28; op1val:0xfffdf7ff00000080;  op2val:0xfffdffff00027fff
TEST_PKRR_OP(kmaxds, x28, x19, x6, 0x0000000000000000, 0xfffdf7ff00000080, 0xfffdffff00027fff, x19, x10, 112, x17)

inst_24:
// rs1==x24, rs2==x29, rd==x5, rs2_h3_val == -2, rs2_h0_val == 32, rs1_h3_val == 256, rs2_h2_val == -32768, rs1_h0_val == 64, rs2_h1_val == 8192, rs1_h1_val == -65
// opcode: kmaxds ; op1:x24; op2:x29; dest:x5; op1val:0x100fff8ffbf0040;  op2val:0xfffe800020000020
TEST_PKRR_OP(kmaxds, x5, x24, x29, 0x0000000000000000, 0x100fff8ffbf0040, 0xfffe800020000020, x24, x10, 128, x17)

inst_25:
// rs1==x20, rs2==x24, rd==x16, rs2_h3_val == -32768, rs1_h3_val == 512, rs1_h1_val == -32768, rs1_h0_val == -5, rs2_h0_val == -3, rs2_h2_val == 128
// opcode: kmaxds ; op1:x20; op2:x24; dest:x16; op1val:0x200ff7f8000fffb;  op2val:0x800000800006fffd
TEST_PKRR_OP(kmaxds, x16, x20, x24, 0x0000000000000000, 0x200ff7f8000fffb, 0x800000800006fffd, x20, x10, 144, x17)

inst_26:
// rs1==x4, rs2==x3, rd==x13, rs2_h3_val == 8192, rs2_h2_val == -5, rs1_h2_val == 21845, rs1_h3_val == -4097
// opcode: kmaxds ; op1:x4; op2:x3; dest:x13; op1val:0xefff55550009ffdf;  op2val:0x2000fffb80003fff
TEST_PKRR_OP(kmaxds, x13, x4, x3, 0x0000000000000000, 0xefff55550009ffdf, 0x2000fffb80003fff, x4, x10, 160, x17)

inst_27:
// rs1==x14, rs2==x8, rd==x9, rs2_h3_val == 4096, rs2_h1_val == 32767, rs1_h3_val == -16385, rs1_h2_val == 256
// opcode: kmaxds ; op1:x14; op2:x8; dest:x9; op1val:0xbfff01000200ffff;  op2val:0x1000c0007fff0006
TEST_PKRR_OP(kmaxds, x9, x14, x8, 0x0000000000000000, 0xbfff01000200ffff, 0x1000c0007fff0006, x14, x10, 176, x17)

inst_28:
// rs1==x29, rs2==x11, rd==x2, rs2_h3_val == 2048, rs2_h1_val == 1024, rs2_h0_val == -1025
// opcode: kmaxds ; op1:x29; op2:x11; dest:x2; op1val:0xaaaaf7ff8000ffdf;  op2val:0x800fff80400fbff
TEST_PKRR_OP(kmaxds, x2, x29, x11, 0x0000000000000000, 0xaaaaf7ff8000ffdf, 0x800fff80400fbff, x29, x10, 192, x17)

inst_29:
// rs1==x31, rs2==x17, rd==x26, rs2_h3_val == 1024, rs1_h1_val == -16385, rs2_h0_val == 1024, rs1_h3_val == -8193
// opcode: kmaxds ; op1:x31; op2:x17; dest:x26; op1val:0xdfff5555bfff8000;  op2val:0x400001004000400
TEST_PKRR_OP(kmaxds, x26, x31, x17, 0x0000000000000000, 0xdfff5555bfff8000, 0x400001004000400, x31, x10, 208, x2)

inst_30:
// rs1==x22, rs2==x23, rd==x6, rs2_h3_val == 512, rs2_h2_val == -16385, rs1_h2_val == -4097, rs2_h1_val == 16384, rs1_h0_val == 21845
// opcode: kmaxds ; op1:x22; op2:x23; dest:x6; op1val:0xfff9efff00045555;  op2val:0x200bfff40005555
TEST_PKRR_OP(kmaxds, x6, x22, x23, 0x0000000000000000, 0xfff9efff00045555, 0x200bfff40005555, x22, x10, 224, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x17, rs2==x22, rd==x4, rs2_h3_val == 256, rs1_h0_val == -65, rs2_h0_val == -9
// opcode: kmaxds ; op1:x17; op2:x22; dest:x4; op1val:0x400010fffbffbf;  op2val:0x1000080ffdffff7
TEST_PKRR_OP(kmaxds, x4, x17, x22, 0x0000000000000000, 0x400010fffbffbf, 0x1000080ffdffff7, x17, x1, 0, x2)

inst_32:
// rs1_h1_val == 8192, rs2_h0_val == -1, rs2_h1_val == -257, rs2_h2_val == -9, rs1_h3_val == -5
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffb00802000fffa;  op2val:0x2000fff7feffffff
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xfffb00802000fffa, 0x2000fff7feffffff, x30, x1, 16, x2)

inst_33:
// rs1_h1_val == 4096, rs1_h2_val == 8192
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xffdf200010005555;  op2val:0xaaaa3fff00020020
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xffdf200010005555, 0xaaaa3fff00020020, x30, x1, 32, x2)

inst_34:
// rs1_h1_val == 32, rs1_h3_val == 1024, rs2_h0_val == -17, rs2_h1_val == -129
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x400200000200007;  op2val:0xfefffffaff7fffef
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x400200000200007, 0xfefffffaff7fffef, x30, x1, 48, x2)

inst_35:
// rs1_h1_val == 8, rs1_h0_val == -9
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffa3fff0008fff7;  op2val:0xf7ff0005fffaffef
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xfffa3fff0008fff7, 0xf7ff0005fffaffef, x30, x1, 64, x2)

inst_36:
// rs1_h1_val == 2, rs1_h2_val == -32768
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x2000800000020006;  op2val:0x02008000080800
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x2000800000020006, 0x02008000080800, x30, x1, 80, x2)

inst_37:
// rs1_h1_val == -1, rs2_h1_val == -16385
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x050005ffffaaaa;  op2val:0x100ff7fbffffffa
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x050005ffffaaaa, 0x100ff7fbffffffa, x30, x1, 96, x2)

inst_38:
// rs1_h0_val == -16385, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x40000070020bfff;  op2val:0xefff0001ffdfffbf
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x40000070020bfff, 0xefff0001ffdfffbf, x30, x1, 112, x2)

inst_39:
// rs1_h0_val == -8193, rs1_h1_val == -129
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffcf7ffff7fdfff;  op2val:0x100fbff0006ffbf
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xfffcf7ffff7fdfff, 0x100fbff0006ffbf, x30, x1, 128, x2)

inst_40:
// rs1_h0_val == -4097, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffcff7ffffbefff;  op2val:0x8008000fffc0040
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xfffcff7ffffbefff, 0x8008000fffc0040, x30, x1, 144, x2)

inst_41:
// rs1_h0_val == -2049, rs2_h1_val == 21845, rs1_h3_val == -1
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff2000f7ff;  op2val:0xfffb555555550010
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xffffefff2000f7ff, 0xfffb555555550010, x30, x1, 160, x2)

inst_42:
// rs1_h0_val == -1025, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffa7ffffefffbff;  op2val:0xfffdfffeff7f0005
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xfffa7ffffefffbff, 0xfffdfffeff7f0005, x30, x1, 176, x2)

inst_43:
// rs1_h0_val == -129, rs1_h3_val == -513, rs1_h2_val == -33
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffdf0007ff7f;  op2val:0xfffafff600010003
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xfdffffdf0007ff7f, 0xfffafff600010003, x30, x1, 192, x2)

inst_44:
// rs1_h0_val == -17, rs1_h2_val == -16385
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xfff7bfff0200ffef;  op2val:0xffdf0001ffbf0040
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xfff7bfff0200ffef, 0xffdf0001ffbf0040, x30, x1, 208, x2)

inst_45:
// rs1_h0_val == 16384, rs2_h0_val == -8193, rs1_h3_val == -32768, rs1_h2_val == -21846
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x8000aaaa10004000;  op2val:0xffdf3fffffefdfff
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x8000aaaa10004000, 0xffdf3fffffefdfff, x30, x1, 224, x2)

inst_46:
// rs1_h0_val == 4096, rs2_h2_val == 16384, rs1_h1_val == -1025, rs1_h3_val == 16
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x10f7fffbff1000;  op2val:0x7fff40003ffffffb
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x10f7fffbff1000, 0x7fff40003ffffffb, x30, x1, 240, x2)

inst_47:
// rs1_h0_val == 512, rs2_h3_val == 1, rs2_h0_val == 1, rs2_h2_val == 256
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xfff9000040000200;  op2val:0x010100fffc0001
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xfff9000040000200, 0x010100fffc0001, x30, x1, 256, x2)

inst_48:
// rs1_h0_val == 256, rs1_h1_val == -513, rs2_h0_val == 4096, rs2_h2_val == -513
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x200ffdffdff0100;  op2val:0x40fdfffff71000
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x200ffdffdff0100, 0x40fdfffff71000, x30, x1, 272, x2)

inst_49:
// rs1_h0_val == 32, rs1_h2_val == 16384, rs2_h2_val == 2048, rs1_h3_val == 128
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x80400000010020;  op2val:0xfff80800f7ff0020
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x80400000010020, 0xfff80800f7ff0020, x30, x1, 288, x2)

inst_50:
// rs1_h0_val == 16, rs1_h3_val == 1, rs2_h1_val == -2, rs1_h2_val == 32, rs2_h2_val == 0
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x01002000200010;  op2val:0xfffc0000fffe0001
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x01002000200010, 0xfffc0000fffe0001, x30, x1, 304, x2)

inst_51:
// rs1_h0_val == 8, rs2_h1_val == -1
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffcc000f7ff0008;  op2val:0xf7ffffffffff0005
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xfffcc000f7ff0008, 0xf7ffffffffff0005, x30, x1, 320, x2)

inst_52:
// rs2_h3_val == 128, rs1_h3_val == 8
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x088000fffbfffc;  op2val:0x80ff7ffff7efff
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x088000fffbfffc, 0x80ff7ffff7efff, x30, x1, 336, x2)

inst_53:
// rs1_h0_val == 4, rs2_h3_val == 32
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x1040003fff0004;  op2val:0x20fff720000009
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x1040003fff0004, 0x20fff720000009, x30, x1, 352, x2)

inst_54:
// rs2_h1_val == 4, rs2_h2_val == -33
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x03000300200008;  op2val:0xf7ffffdf00040000
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x03000300200008, 0xf7ffffdf00040000, x30, x1, 368, x2)

inst_55:
// rs2_h1_val == 0, rs1_h2_val == -8193, rs2_h2_val == 2
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xfbffdffffff6bfff;  op2val:0x2000020000ffff
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xfbffdffffff6bfff, 0x2000020000ffff, x30, x1, 384, x2)

inst_56:
// rs2_h0_val == -21846, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffc000000012000;  op2val:0x3fff7fff0020aaaa
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xfffc000000012000, 0x3fff7fff0020aaaa, x30, x1, 400, x2)

inst_57:
// rs2_h0_val == -16385, rs2_h1_val == -4097, rs1_h1_val == -17
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xfff84000ffef0400;  op2val:0x03c000efffbfff
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xfff84000ffef0400, 0x03c000efffbfff, x30, x1, 416, x2)

inst_58:
// rs2_h0_val == -2049, rs1_h3_val == 2048
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x800fffc0004efff;  op2val:0xfefffffc0000f7ff
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x800fffc0004efff, 0xfefffffc0000f7ff, x30, x1, 432, x2)

inst_59:
// rs2_h0_val == -513, rs1_h1_val == 32767
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x20080007fff2000;  op2val:0xfeffdfff0004fdff
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x20080007fff2000, 0xfeffdfff0004fdff, x30, x1, 448, x2)

inst_60:
// rs2_h0_val == -129, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x2000008fffcc000;  op2val:0xfeff0003fffbff7f
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x2000008fffcc000, 0xfeff0003fffbff7f, x30, x1, 464, x2)

inst_61:
// rs2_h0_val == -32768, rs2_h1_val == 512
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x10004000006ff7f;  op2val:0xfdff000702008000
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x10004000006ff7f, 0xfdff000702008000, x30, x1, 480, x2)

inst_62:
// rs2_h0_val == 16384, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x080010fffc0002;  op2val:0x01555500084000
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x080010fffc0002, 0x01555500084000, x30, x1, 496, x2)

inst_63:
// rs2_h0_val == 8192, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xc000ffdf40008000;  op2val:0xfffcfffcfffe2000
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xc000ffdf40008000, 0xfffcfffcfffe2000, x30, x1, 512, x2)

inst_64:
// rs2_h0_val == 256, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x010003ffefffff;  op2val:0xc000fffafffb0100
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x010003ffefffff, 0xc000fffafffb0100, x30, x1, 528, x2)

inst_65:
// rs2_h0_val == 8, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x100040aaaa7fff;  op2val:0x06200020000008
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x100040aaaa7fff, 0x06200020000008, x30, x1, 544, x2)

inst_66:
// rs2_h0_val == 4, rs2_h1_val == 64, rs1_h2_val == -1025
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x80fbffaaaa0010;  op2val:0x100000700400004
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x80fbffaaaa0010, 0x100000700400004, x30, x1, 560, x2)

inst_67:
// rs1_h3_val == 21845, rs2_h1_val == -513, rs1_h2_val == 512
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x55550200fff8fdff;  op2val:0x403ffffdfffbff
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x55550200fff8fdff, 0x403ffffdfffbff, x30, x1, 576, x2)

inst_68:
// rs1_h3_val == 32767, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffdf0800fffe;  op2val:0x407fff0000ffdf
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x7fffffdf0800fffe, 0x407fff0000ffdf, x30, x1, 592, x2)

inst_69:
// rs1_h3_val == -2049, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffef2000fffa;  op2val:0x20fbffc0000000
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xf7ffffef2000fffa, 0x20fbffc0000000, x30, x1, 608, x2)

inst_70:
// rs2_h3_val == 16, rs2_h1_val == -1025
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x20000103fffffef;  op2val:0x100001fbff1000
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x20000103fffffef, 0x100001fbff1000, x30, x1, 624, x2)

inst_71:
// rs1_h0_val == 0, rs2_h2_val == -17, rs2_h3_val == -1
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xfff63ffffeff0000;  op2val:0xffffffeffff7aaaa
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xfff63ffffeff0000, 0xffffffeffff7aaaa, x30, x1, 640, x2)

inst_72:
// rs2_h2_val == -4097, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x09c00000060005;  op2val:0xfff6efff00040004
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x09c00000060005, 0xfff6efff00040004, x30, x1, 656, x2)

inst_73:
// rs2_h2_val == -2049, rs2_h1_val == -3, rs1_h1_val == -33
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xefff0008ffdfc000;  op2val:0xffdff7fffffdefff
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xefff0008ffdfc000, 0xffdff7fffffdefff, x30, x1, 672, x2)

inst_74:
// rs2_h2_val == -65, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x100000fdfffffe;  op2val:0xfff9ffbfffffffdf
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x100000fdfffffe, 0xfff9ffbfffffffdf, x30, x1, 688, x2)

inst_75:
// rs1_h3_val == 4, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x04fff6fbfffff9;  op2val:0xfbfffff9feff0008
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x04fff6fbfffff9, 0xfbfffff9feff0008, x30, x1, 704, x2)

inst_76:
// rs1_h3_val == 2, rs1_h1_val == -4097
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x02ff7feffffff7;  op2val:0xfbff0005fffd0200
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x02ff7feffffff7, 0xfbff0005fffd0200, x30, x1, 720, x2)

inst_77:
// rs1_h3_val == 0, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x000003fff9ffbf;  op2val:0xfffbefffc0000002
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x000003fff9ffbf, 0xfffbefffc0000002, x30, x1, 736, x2)

inst_78:
// rs2_h2_val == -3, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x1000dfff00000004;  op2val:0x03fffd0004fffe
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x1000dfff00000004, 0x03fffd0004fffe, x30, x1, 752, x2)

inst_79:
// rs2_h2_val == 4096, rs1_h1_val == -8193
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xffff4000dffffff9;  op2val:0x0710000005ffff
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xffff4000dffffff9, 0x0710000005ffff, x30, x1, 768, x2)

inst_80:
// rs2_h2_val == 512, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x2000bfffeffffeff;  op2val:0xffef020004002000
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x2000bfffeffffeff, 0xffef020004002000, x30, x1, 784, x2)

inst_81:
// rs1_h2_val == -257, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffefeff04001000;  op2val:0xc0000000ff7fff7f
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xfffefeff04001000, 0xc0000000ff7fff7f, x30, x1, 800, x2)

inst_82:
// rs2_h1_val == -21846, rs2_h3_val == 0
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x080000aaaaffef;  op2val:0x000080aaaabfff
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x080000aaaaffef, 0x000080aaaabfff, x30, x1, 816, x2)

inst_83:
// rs1_h2_val == 4096, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffe100000800040;  op2val:0x09f7fffffafff6
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xfffe100000800040, 0x09f7fffffafff6, x30, x1, 832, x2)

inst_84:
// rs2_h1_val == -8193, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x01000102000020;  op2val:0x090020dfffff7f
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x01000102000020, 0x090020dfffff7f, x30, x1, 848, x2)

inst_85:
// rs2_h1_val == 256, rs2_h2_val == -21846
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x3fff00032000ffef;  op2val:0xffffaaaa01000006
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x3fff00032000ffef, 0xffffaaaa01000006, x30, x1, 864, x2)

inst_86:
// rs1_h2_val == -1, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x06ffff00200009;  op2val:0x078000bfffff7f
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x06ffff00200009, 0x078000bfffff7f, x30, x1, 880, x2)

inst_87:
// rs1_h1_val == 21845, rs2_h1_val == 4096
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffe00105555feff;  op2val:0xfff601001000fff9
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xfffe00105555feff, 0xfff601001000fff9, x30, x1, 896, x2)

inst_88:
// rs1_h3_val == -17, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffdfff7fffb;  op2val:0x060007fff90010
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xffeffffdfff7fffb, 0x060007fff90010, x30, x1, 912, x2)

inst_89:
// rs2_h3_val == 8, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x400f7fff7ff8000;  op2val:0x0800010100bfff
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x400f7fff7ff8000, 0x0800010100bfff, x30, x1, 928, x2)

inst_90:
// rs2_h2_val == 64, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xfeff00050800fffb;  op2val:0x400000400002dfff
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xfeff00050800fffb, 0x400000400002dfff, x30, x1, 944, x2)

inst_91:
// rs2_h3_val == 4, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x20000100fffc0003;  op2val:0x04040000200008
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x20000100fffc0003, 0x04040000200008, x30, x1, 960, x2)

inst_92:
// rs2_h2_val == 8, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0xc000feff04000010;  op2val:0x2000081000fffb
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0xc000feff04000010, 0x2000081000fffb, x30, x1, 976, x2)

inst_93:
// rs1_h3_val == 16384, 
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x400055555555fffb;  op2val:0x08ff7fffbf0010
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x400055555555fffb, 0x08ff7fffbf0010, x30, x1, 992, x2)

inst_94:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 32, rs2_h0_val == -257, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 1, rs1_h0_val == -21846, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h2_val == -9, rs2_h3_val == -8193
// opcode: kmaxds ; op1:x30; op2:x29; dest:x31; op1val:0x20fff70001aaaa;  op2val:0xdfff00093ffffeff
TEST_PKRR_OP(kmaxds, x31, x30, x29, 0x0000000000000000, 0x20fff70001aaaa, 0xdfff00093ffffeff, x30, x1, 1008, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x10_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 128*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
