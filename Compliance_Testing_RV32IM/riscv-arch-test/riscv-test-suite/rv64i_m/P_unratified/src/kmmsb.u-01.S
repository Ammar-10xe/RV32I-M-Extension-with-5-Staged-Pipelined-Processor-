
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmmsb.u instruction of the RISC-V RV64PZicsr extension for the kmmsb.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmmsb.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 == rd != rs2, rs1==x2, rs2==x18, rd==x2, rs1_w0_val == -2147483648, rs1_w1_val == 64, rs2_w0_val == -131073, rs2_w1_val == 4096
// opcode: kmmsb.u ; op1:x2; dest:x2; op1val:0x00004080000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x2, x2, x18, 0x0000000000000000, 0x00004080000000, 0x001000fffdffff, x2, x4, 0, x14)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x9, rs2==x2, rd==x25, rs2_w1_val == -1431655766, rs2_w0_val == -2097153, rs1_w0_val == 32768
// opcode: kmmsb.u ; op1:x9; dest:x25; op1val:0xaaaaaaab00008000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x25, x9, x2, 0x0000000000000000, 0xaaaaaaab00008000, 0xaaaaaaaaffdfffff, x9, x4, 16, x14)

inst_2:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x30, rs2_w1_val == 1431655765, rs1_w1_val == 128
// opcode: kmmsb.u ; op1:x26; dest:x30; op1val:0x00008066666665;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x30, x26, x26, 0x0000000000000000, 0x00008066666665, 0x55555555ffff4afd, x26, x4, 32, x14)

inst_3:
// rs1 == rs2 == rd, rs1==x17, rs2==x17, rd==x17, rs2_w1_val == 2147483647, rs2_w0_val == 4
// opcode: kmmsb.u ; op1:x17; dest:x17; op1val:0x000040c0000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x17, x17, x17, 0x0000000000000000, 0x000040c0000000, 0x7fffffff00000004, x17, x4, 48, x14)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x6, rd==x6, rs2_w1_val == -1073741825, rs2_w0_val == 1431655765, rs1_w0_val == -257
// opcode: kmmsb.u ; op1:x5; dest:x6; op1val:0x000003fffffeff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x6, x5, x6, 0x0000000000000000, 0x000003fffffeff, 0xbfffffff55555555, x5, x4, 64, x14)

inst_5:
// rs1==x18, rs2==x7, rd==x26, rs2_w1_val == -536870913, rs1_w1_val == 0, rs1_w0_val == -262145, rs2_w0_val == -16777217
// opcode: kmmsb.u ; op1:x18; dest:x26; op1val:0x000000fffbffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x26, x18, x7, 0x0000000000000000, 0x000000fffbffff, 0xdffffffffeffffff, x18, x4, 80, x14)

inst_6:
// rs1==x12, rs2==x16, rd==x23, rs2_w1_val == -268435457, rs1_w1_val == -5, rs2_w0_val == -2, rs1_w0_val == -2
// opcode: kmmsb.u ; op1:x12; dest:x23; op1val:0xfffffffbfffffffe;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x23, x12, x16, 0x0000000000000000, 0xfffffffbfffffffe, 0xeffffffffffffffe, x12, x4, 96, x14)

inst_7:
// rs1==x20, rs2==x10, rd==x1, rs2_w1_val == -134217729, rs2_w0_val == 268435456, rs1_w0_val == 4194304
// opcode: kmmsb.u ; op1:x20; dest:x1; op1val:0x00000000400000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x1, x20, x10, 0x0000000000000000, 0x00000000400000, 0xf7ffffff10000000, x20, x4, 112, x14)

inst_8:
// rs1==x13, rs2==x8, rd==x21, rs2_w1_val == -67108865, rs1_w1_val == -131073, rs2_w0_val == -4097
// opcode: kmmsb.u ; op1:x13; dest:x21; op1val:0xfffdffff55555556;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x21, x13, x8, 0x0000000000000000, 0xfffdffff55555556, 0xfbffffffffffefff, x13, x4, 128, x14)

inst_9:
// rs1==x16, rs2==x29, rd==x20, rs2_w1_val == -33554433, rs1_w0_val == -4097, rs1_w1_val == 1073741824, rs2_w0_val == -1431655766
// opcode: kmmsb.u ; op1:x16; dest:x20; op1val:0x40000000ffffefff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x20, x16, x29, 0x0000000000000000, 0x40000000ffffefff, 0xfdffffffaaaaaaaa, x16, x4, 144, x14)

inst_10:
// rs1==x6, rs2==x22, rd==x31, rs2_w1_val == -16777217, rs1_w1_val == 4, rs2_w0_val == 0
// opcode: kmmsb.u ; op1:x6; dest:x31; op1val:0x00000466666667;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x6, x22, 0x0000000000000000, 0x00000466666667, 0xfeffffff00000000, x6, x4, 160, x14)

inst_11:
// rs1==x3, rs2==x25, rd==x28, rs2_w1_val == -8388609, rs1_w0_val == 65536, rs1_w1_val == -4097, rs2_w0_val == -2147483648
// opcode: kmmsb.u ; op1:x3; dest:x28; op1val:0xffffefff00010000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x28, x3, x25, 0x0000000000000000, 0xffffefff00010000, 0xff7fffff80000000, x3, x4, 176, x14)

inst_12:
// rs1==x7, rs2==x21, rd==x11, rs2_w1_val == -4194305, rs1_w1_val == -2147483648
// opcode: kmmsb.u ; op1:x7; dest:x11; op1val:0x8000000000000007;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x11, x7, x21, 0x0000000000000000, 0x8000000000000007, 0xffbfffff00000005, x7, x4, 192, x14)

inst_13:
// rs1==x21, rs2==x9, rd==x18, rs2_w1_val == -2097153, rs2_w0_val == 4096, rs1_w0_val == -524289, rs1_w1_val == 1431655765
// opcode: kmmsb.u ; op1:x21; dest:x18; op1val:0x55555555fff7ffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x18, x21, x9, 0x0000000000000000, 0x55555555fff7ffff, 0xffdfffff00001000, x21, x4, 208, x14)

inst_14:
// rs1==x27, rs2==x19, rd==x10, rs2_w1_val == -1048577, rs1_w1_val == 536870912
// opcode: kmmsb.u ; op1:x27; dest:x10; op1val:0x2000000000000006;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x10, x27, x19, 0x0000000000000000, 0x2000000000000006, 0xffefffff00000004, x27, x4, 224, x14)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_15:
// rs1==x31, rs2==x3, rd==x13, rs2_w1_val == -524289, rs1_w1_val == -134217729
// opcode: kmmsb.u ; op1:x31; dest:x13; op1val:0xf7ffffff00000006;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x13, x31, x3, 0x0000000000000000, 0xf7ffffff00000006, 0xfff7ffffffffefff, x31, x2, 0, x6)

inst_16:
// rs1==x1, rs2==x27, rd==x22, rs2_w1_val == -262145, rs1_w1_val == 131072, rs1_w0_val == -67108865
// opcode: kmmsb.u ; op1:x1; dest:x22; op1val:0x020000fbffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x22, x1, x27, 0x0000000000000000, 0x020000fbffffff, 0xfffbffff66666666, x1, x2, 16, x6)

inst_17:
// rs1==x0, rs2==x30, rd==x7, rs2_w1_val == -131073, rs2_w0_val == -4194305, rs1_w1_val == 134217728
// opcode: kmmsb.u ; op1:x0; dest:x7; op1val:0x8000000fffffffc;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x7, x0, x30, 0x0000000000000000, 0x8000000fffffffc, 0xfffdffffffbfffff, x0, x2, 32, x6)

inst_18:
// rs1==x23, rs2==x12, rd==x5, rs2_w1_val == -65537, rs1_w0_val == 67108864, rs2_w0_val == 2
// opcode: kmmsb.u ; op1:x23; dest:x5; op1val:0xfffdffff04000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x5, x23, x12, 0x0000000000000000, 0xfffdffff04000000, 0xfffeffff00000002, x23, x2, 48, x6)

inst_19:
// rs1==x14, rs2==x24, rd==x4, rs2_w1_val == -32769, 
// opcode: kmmsb.u ; op1:x14; dest:x4; op1val:0x3333333200000006;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x4, x14, x24, 0x0000000000000000, 0x3333333200000006, 0xffff7fff55555554, x14, x2, 64, x6)

inst_20:
// rs1==x25, rs2==x23, rd==x27, rs2_w1_val == -16385, rs1_w1_val == 16
// opcode: kmmsb.u ; op1:x25; dest:x27; op1val:0x00001000000006;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x27, x25, x23, 0x0000000000000000, 0x00001000000006, 0xffffbfffaaaaaaaa, x25, x2, 80, x6)

inst_21:
// rs1==x10, rs2==x13, rd==x16, rs2_w1_val == -8193, rs1_w0_val == 33554432
// opcode: kmmsb.u ; op1:x10; dest:x16; op1val:0x00000302000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x16, x10, x13, 0x0000000000000000, 0x00000302000000, 0xffffdfff00000002, x10, x2, 96, x6)

inst_22:
// rs1==x11, rs2==x14, rd==x0, rs2_w1_val == -4097, 
// opcode: kmmsb.u ; op1:x11; dest:x0; op1val:0x800000033333332;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x0, x11, x14, 0x0000000000000000, 0x800000033333332, 0xffffefffffffefff, x11, x2, 112, x6)

inst_23:
// rs1==x24, rs2==x31, rd==x12, rs2_w1_val == -2049, rs1_w0_val == 131072, rs1_w1_val == 1048576
// opcode: kmmsb.u ; op1:x24; dest:x12; op1val:0x10000000020000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x12, x24, x31, 0x0000000000000000, 0x10000000020000, 0xfffff7ff0000b504, x24, x2, 128, x6)

inst_24:
// rs1==x22, rs2==x4, rd==x15, rs2_w1_val == -1025, rs1_w0_val == 4096, rs2_w0_val == -262145
// opcode: kmmsb.u ; op1:x22; dest:x15; op1val:0x6666666700001000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x15, x22, x4, 0x0000000000000000, 0x6666666700001000, 0xfffffbfffffbffff, x22, x2, 144, x6)

inst_25:
// rs1==x28, rs2==x15, rd==x8, rs2_w1_val == -513, 
// opcode: kmmsb.u ; op1:x28; dest:x8; op1val:0xfffdffff66666665;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x8, x28, x15, 0x0000000000000000, 0xfffdffff66666665, 0xfffffdfffffffffa, x28, x2, 160, x6)

inst_26:
// rs1==x19, rs2==x0, rd==x24, rs2_w1_val == -257, rs1_w1_val == 65536, rs2_w0_val == 134217728
// opcode: kmmsb.u ; op1:x19; dest:x24; op1val:0x010000c0000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x24, x19, x0, 0x0000000000000000, 0x010000c0000000, 0xfffffeff08000000, x19, x2, 176, x6)

inst_27:
// rs1==x4, rs2==x1, rd==x14, rs2_w1_val == -129, rs1_w1_val == 4096
// opcode: kmmsb.u ; op1:x4; dest:x14; op1val:0x00100000400000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x14, x4, x1, 0x0000000000000000, 0x00100000400000, 0xffffff7ffffffffa, x4, x2, 192, x6)

inst_28:
// rs1==x15, rs2==x11, rd==x19, rs2_w1_val == -65, rs1_w0_val == 8388608
// opcode: kmmsb.u ; op1:x15; dest:x19; op1val:0x00000400800000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x19, x15, x11, 0x0000000000000000, 0x00000400800000, 0xffffffbf00000004, x15, x2, 208, x6)

inst_29:
// rs1==x29, rs2==x28, rd==x3, rs2_w1_val == -33, rs1_w0_val == 2097152, rs2_w0_val == 65536
// opcode: kmmsb.u ; op1:x29; dest:x3; op1val:0x00001000200000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x3, x29, x28, 0x0000000000000000, 0x00001000200000, 0xffffffdf00010000, x29, x2, 224, x6)

inst_30:
// rs1==x30, rs2==x5, rd==x9, rs2_w1_val == -17, rs1_w1_val == -2097153
// opcode: kmmsb.u ; op1:x30; dest:x9; op1val:0xffdfffff0000b505;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x9, x30, x5, 0x0000000000000000, 0xffdfffff0000b505, 0xffffffef00000005, x30, x2, 240, x6)

inst_31:
// rs1==x8, rs2==x20, rd==x29, rs2_w1_val == -9, rs2_w0_val == 1073741824, rs1_w1_val == -3, rs1_w0_val == -9
// opcode: kmmsb.u ; op1:x8; dest:x29; op1val:0xfffffffdfffffff7;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x29, x8, x20, 0x0000000000000000, 0xfffffffdfffffff7, 0xfffffff740000000, x8, x2, 256, x6)

inst_32:
// rs2_w1_val == -5, rs1_w1_val == -1431655766, rs1_w0_val == 2
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xaaaaaaaa00000002;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000002, 0xfffffffb00000000, x30, x2, 272, x6)

inst_33:
// rs2_w1_val == -3, rs2_w0_val == -1073741825, rs1_w1_val == -1025
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xfffffbff00010000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xfffffbff00010000, 0xfffffffdbfffffff, x30, x2, 288, x6)

inst_34:
// rs2_w1_val == -2, rs1_w0_val == -8193
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xfffffffaffffdfff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xfffffffaffffdfff, 0xfffffffeffff4afc, x30, x2, 304, x6)

inst_35:
// rs2_w1_val == -2147483648, rs2_w0_val == 16384
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xaaaaaaaa00000005;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000005, 0x8000000000004000, x30, x2, 320, x6)

inst_36:
// rs2_w1_val == 1073741824, rs1_w1_val == -2
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xfffffffefffffeff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xfffffffefffffeff, 0x4000000000000000, x30, x2, 336, x6)

inst_37:
// rs2_w1_val == 536870912, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x5555555504000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x5555555504000000, 0x2000000033333333, x30, x2, 352, x6)

inst_38:
// rs2_w1_val == 268435456, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x5555555500000005;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x5555555500000005, 0x1000000000001000, x30, x2, 368, x6)

inst_39:
// rs2_w1_val == 134217728, rs1_w0_val == 536870912
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x3333333220000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x3333333220000000, 0x800000000000004, x30, x2, 384, x6)

inst_40:
// rs2_w1_val == 67108864, rs2_w0_val == 512
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x3333333400001000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x3333333400001000, 0x400000000000200, x30, x2, 400, x6)

inst_41:
// rs2_w1_val == 33554432, rs2_w0_val == 1048576
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x020000fffbffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x020000fffbffff, 0x200000000100000, x30, x2, 416, x6)

inst_42:
// rs2_w1_val == 16777216, rs2_w0_val == -2049
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00000066666665;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00000066666665, 0x1000000fffff7ff, x30, x2, 432, x6)

inst_43:
// rs2_w1_val == 8388608, rs1_w0_val == -1048577
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x8000000ffefffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x8000000ffefffff, 0x800000feffffff, x30, x2, 448, x6)

inst_44:
// rs2_w1_val == 4194304, rs1_w0_val == 256
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffff4afd00000100;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffff4afd00000100, 0x400000fffffffc, x30, x2, 464, x6)

inst_45:
// rs2_w1_val == 2097152, rs1_w1_val == -33554433, rs1_w0_val == 16777216
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xfdffffff01000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xfdffffff01000000, 0x2000003fffffff, x30, x2, 480, x6)

inst_46:
// rs2_w1_val == 1048576, rs1_w0_val == -3
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffff4afcfffffffd;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffff4afcfffffffd, 0x10000000000000, x30, x2, 496, x6)

inst_47:
// rs2_w1_val == 524288, rs1_w0_val == 4, rs2_w0_val == 262144
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffff4afc00000004;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffff4afc00000004, 0x08000000040000, x30, x2, 512, x6)

inst_48:
// rs2_w1_val == 262144, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x3333333300000005;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x3333333300000005, 0x040000fffffffa, x30, x2, 528, x6)

inst_49:
// rs2_w1_val == 131072, rs1_w1_val == 268435456
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x10000000ffff4afd;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x10000000ffff4afd, 0x020000fffffff6, x30, x2, 544, x6)

inst_50:
// rs2_w1_val == 65536, rs2_w0_val == -1, rs1_w0_val == 8192
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x6666666700002000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x6666666700002000, 0x010000ffffffff, x30, x2, 560, x6)

inst_51:
// rs2_w1_val == 32768, rs1_w0_val == 1
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00000900000001;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00000900000001, 0x008000ffff4afd, x30, x2, 576, x6)

inst_52:
// rs2_w1_val == 16384, rs2_w0_val == 64, rs1_w1_val == 16384
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00400055555554;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00400055555554, 0x00400000000040, x30, x2, 592, x6)

inst_53:
// rs2_w1_val == 8192, rs2_w0_val == 32
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x5555555500000002;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x5555555500000002, 0x00200000000020, x30, x2, 608, x6)

inst_54:
// rs2_w1_val == 2048, rs1_w1_val == -262145, rs1_w0_val == 1024
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xfffbffff00000400;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000400, 0x00080040000000, x30, x2, 624, x6)

inst_55:
// rs2_w1_val == 1024, rs2_w0_val == -67108865
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x000006fffbffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x000006fffbffff, 0x000400fbffffff, x30, x2, 640, x6)

inst_56:
// rs2_w1_val == 512, rs1_w1_val == 2, rs2_w0_val == -65537
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00000200000009;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00000200000009, 0x000200fffeffff, x30, x2, 656, x6)

inst_57:
// rs2_w1_val == 256, rs1_w0_val == -1025
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffff4afcfffffbff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffff4afcfffffbff, 0x000100fffffffa, x30, x2, 672, x6)

inst_58:
// rs2_w1_val == 128, rs1_w1_val == -524289
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xfff7ffff55555554;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xfff7ffff55555554, 0x00008000000000, x30, x2, 688, x6)

inst_59:
// rs1_w0_val == 2048, rs2_w0_val == 524288
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xfffffffa00000800;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000800, 0x5555555500080000, x30, x2, 704, x6)

inst_60:
// rs1_w0_val == 512, rs2_w0_val == -1048577, rs1_w1_val == -2049
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xfffff7ff00000200;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000200, 0x000003ffefffff, x30, x2, 720, x6)

inst_61:
// rs1_w0_val == 128, rs2_w0_val == 8192, rs1_w1_val == -1073741825
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xbfffffff00000080;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000080, 0x00b50400002000, x30, x2, 736, x6)

inst_62:
// rs1_w0_val == 64, rs2_w0_val == 1
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x1000000000000040;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x1000000000000040, 0x00b50500000001, x30, x2, 752, x6)

inst_63:
// rs1_w0_val == 32, rs1_w1_val == 32
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00002000000020;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00002000000020, 0x000003aaaaaaab, x30, x2, 768, x6)

inst_64:
// rs1_w0_val == 16, rs1_w1_val == -67108865
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xfbffffff00000010;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000010, 0x80000003fffffff, x30, x2, 784, x6)

inst_65:
// rs1_w0_val == 8, rs2_w0_val == -8193, rs1_w1_val == 1
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00000100000008;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00000100000008, 0x55555554ffffdfff, x30, x2, 800, x6)

inst_66:
// rs1_w0_val == 0, rs2_w0_val == -33554433
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x02000000000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x02000000000000, 0x33333334fdffffff, x30, x2, 816, x6)

inst_67:
// rs1_w0_val == -1, rs1_w1_val == -257
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xfffffeffffffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xfffffeffffffffff, 0x5555555600000006, x30, x2, 832, x6)

inst_68:
// rs2_w1_val == 64, rs1_w0_val == -131073, rs2_w0_val == -8388609
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x20000000fffdffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x20000000fffdffff, 0x000040ff7fffff, x30, x2, 848, x6)

inst_69:
// rs2_w1_val == 32, rs1_w1_val == -8193
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffffdfff00008000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffffdfff00008000, 0x000020feffffff, x30, x2, 864, x6)

inst_70:
// rs2_w1_val == 16, rs2_w0_val == -513, rs1_w0_val == -8388609
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x000004ff7fffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x000004ff7fffff, 0x000010fffffdff, x30, x2, 880, x6)

inst_71:
// rs2_w1_val == 8, rs2_w0_val == 536870912, rs1_w1_val == 512, rs1_w0_val == -129
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x000200ffffff7f;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x000200ffffff7f, 0x00000820000000, x30, x2, 896, x6)

inst_72:
// rs2_w1_val == 4, rs2_w0_val == -134217729, rs1_w0_val == -5
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x55555555fffffffb;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x55555555fffffffb, 0x000004f7ffffff, x30, x2, 912, x6)

inst_73:
// rs2_w1_val == 2, rs1_w1_val == 2097152
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x20000055555556;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x20000055555556, 0x00000210000000, x30, x2, 928, x6)

inst_74:
// rs2_w1_val == 1, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x6666666700008000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x6666666700008000, 0x000001fffbffff, x30, x2, 944, x6)

inst_75:
// rs2_w1_val == 0, rs2_w0_val == -524289
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffff4afdffffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffff4afdffffffff, 0x000000fff7ffff, x30, x2, 960, x6)

inst_76:
// rs2_w1_val == -1, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xaaaaaaaa55555556;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa55555556, 0xfffffffffffdffff, x30, x2, 976, x6)

inst_77:
// rs2_w0_val == 2147483647, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00000400000008;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00000400000008, 0x0000047fffffff, x30, x2, 992, x6)

inst_78:
// rs2_w0_val == -536870913, rs1_w0_val == 268435456
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00100010000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00100010000000, 0xffffefffdfffffff, x30, x2, 1008, x6)

inst_79:
// rs2_w0_val == -268435457, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xfff7ffff00000003;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000003, 0xffffdfffefffffff, x30, x2, 1024, x6)

inst_80:
// rs2_w0_val == -32769, rs1_w0_val == -2049
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xfffffbfffffff7ff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffff7ff, 0xffdfffffffff7fff, x30, x2, 1040, x6)

inst_81:
// rs2_w0_val == -16385, rs1_w1_val == 1024
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00040000010000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00040000010000, 0x33333333ffffbfff, x30, x2, 1056, x6)

inst_82:
// rs2_w0_val == -1025, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00040001000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00040001000000, 0xff7ffffffffffbff, x30, x2, 1072, x6)

inst_83:
// rs2_w0_val == -257, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00020000000008;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00020000000008, 0xffff7ffffffffeff, x30, x2, 1088, x6)

inst_84:
// rs2_w0_val == -129, rs1_w0_val == 262144
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00000900040000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00000900040000, 0x100000ffffff7f, x30, x2, 1104, x6)

inst_85:
// rs2_w0_val == -65, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x4000000000000080;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x4000000000000080, 0x002000ffffffbf, x30, x2, 1120, x6)

inst_86:
// rs2_w0_val == -33, rs1_w1_val == -16385, rs1_w0_val == 1073741824
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffffbfff40000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffffbfff40000000, 0x40000000ffffffdf, x30, x2, 1136, x6)

inst_87:
// rs2_w0_val == -17, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00b50300000001;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00b50300000001, 0x000040ffffffef, x30, x2, 1152, x6)

inst_88:
// rs2_w0_val == -9, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x5555555400000004;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x5555555400000004, 0x000003fffffff7, x30, x2, 1168, x6)

inst_89:
// rs2_w0_val == -5, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00000200000100;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00000200000100, 0xffffeffffffffffb, x30, x2, 1184, x6)

inst_90:
// rs2_w0_val == -3, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x000003ffffefff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x000003ffffefff, 0x000005fffffffd, x30, x2, 1200, x6)

inst_91:
// rs2_w0_val == 67108864, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xfffffff800000040;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xfffffff800000040, 0xaaaaaaaa04000000, x30, x2, 1216, x6)

inst_92:
// rs2_w0_val == 16, rs1_w0_val == -1431655766, rs1_w1_val == -268435457
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xefffffffaaaaaaaa;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xefffffffaaaaaaaa, 0x2000000000000010, x30, x2, 1232, x6)

inst_93:
// rs2_w0_val == 8, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00000733333332;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00000733333332, 0x80000000000008, x30, x2, 1248, x6)

inst_94:
// rs1_w0_val == 16384, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xefffffff00004000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xefffffff00004000, 0x5555555400000010, x30, x2, 1264, x6)

inst_95:
// rs1_w1_val == 2147483647, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x7fffffff33333333;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x7fffffff33333333, 0xff7fffff0000b504, x30, x2, 1280, x6)

inst_96:
// rs1_w1_val == -536870913, rs1_w0_val == 134217728
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xdfffffff08000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xdfffffff08000000, 0xfdfffffffffdffff, x30, x2, 1296, x6)

inst_97:
// rs1_w1_val == -16777217, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xfeffffff00000400;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000400, 0x1000000055555556, x30, x2, 1312, x6)

inst_98:
// rs1_w1_val == -8388609, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xff7fffff00000010;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000010, 0x6666666600000002, x30, x2, 1328, x6)

inst_99:
// rs1_w1_val == -4194305, rs2_w0_val == 1024
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffbffffffffffff7;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffbffffffffffff7, 0x00000200000400, x30, x2, 1344, x6)

inst_100:
// rs1_w1_val == -1048577, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffefffff00000006;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffefffff00000006, 0xffffffef00000003, x30, x2, 1360, x6)

inst_101:
// rs1_w1_val == -65537, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xfffeffff0000b505;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xfffeffff0000b505, 0x00100008000000, x30, x2, 1376, x6)

inst_102:
// rs1_w1_val == -32769, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffff7ffffffffffc;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffffffc, 0xffffdfff00100000, x30, x2, 1392, x6)

inst_103:
// rs1_w1_val == -513, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xfffffdfffffffffd;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xfffffdfffffffffd, 0xfffffff8ffffffbf, x30, x2, 1408, x6)

inst_104:
// rs1_w1_val == -129, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffffff7fffff4afc;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffffff7fffff4afc, 0x5555555408000000, x30, x2, 1424, x6)

inst_105:
// rs1_w1_val == -65, rs2_w0_val == 2048
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffffffbf00800000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffffffbf00800000, 0xfffffff700000800, x30, x2, 1440, x6)

inst_106:
// rs1_w1_val == -33, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffffffdf33333334;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffffffdf33333334, 0x66666667feffffff, x30, x2, 1456, x6)

inst_107:
// rs1_w1_val == -17, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffffffef55555554;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffffffef55555554, 0xffffdfff0000b505, x30, x2, 1472, x6)

inst_108:
// rs1_w1_val == -9, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xfffffff7fff7ffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xfffffff7fff7ffff, 0x000800fffffbff, x30, x2, 1488, x6)

inst_109:
// rs1_w1_val == 67108864, rs1_w0_val == -16385
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x4000000ffffbfff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x4000000ffffbfff, 0xbffffffffdffffff, x30, x2, 1504, x6)

inst_110:
// rs1_w1_val == 33554432, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x200000000040000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x200000000040000, 0x000006fffbffff, x30, x2, 1520, x6)

inst_111:
// rs1_w1_val == 16777216, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x1000000ffff4afd;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x1000000ffff4afd, 0xff7fffff00000005, x30, x2, 1536, x6)

inst_112:
// rs1_w1_val == 8388608, rs1_w0_val == -513
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x800000fffffdff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x800000fffffdff, 0xffffbfffdfffffff, x30, x2, 1552, x6)

inst_113:
// rs1_w1_val == 4194304, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x40000000000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x40000000000000, 0x01000000000007, x30, x2, 1568, x6)

inst_114:
// rs1_w1_val == 524288, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x08000000000100;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x08000000000100, 0x00008000000000, x30, x2, 1584, x6)

inst_115:
// rs1_w1_val == 262144, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x04000000000020;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x04000000000020, 0x00000355555555, x30, x2, 1600, x6)

inst_116:
// rs1_w1_val == 32768, rs1_w0_val == 524288
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00800000080000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00800000080000, 0x00000955555556, x30, x2, 1616, x6)

inst_117:
// rs1_w1_val == 256, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00010000000001;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00010000000001, 0xfffffffe00000020, x30, x2, 1632, x6)

inst_118:
// rs1_w1_val == 2048, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00080080000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00080080000000, 0x00000480000000, x30, x2, 1648, x6)

inst_119:
// rs1_w1_val == 8, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00000800000005;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00000800000005, 0xdfffffff55555554, x30, x2, 1664, x6)

inst_120:
// rs1_w1_val == -1, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffffffff55555554;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffffffff55555554, 0x8000000000000800, x30, x2, 1680, x6)

inst_121:
// rs1_w0_val == 1431655765, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00000655555555;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00000655555555, 0xefffffff00000008, x30, x2, 1696, x6)

inst_122:
// rs1_w0_val == 2147483647, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xaaaaaaaa7fffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa7fffffff, 0xfffeffff00002000, x30, x2, 1712, x6)

inst_123:
// rs1_w0_val == -1073741825, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffffefffbfffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffffefffbfffffff, 0x000000ffffdfff, x30, x2, 1728, x6)

inst_124:
// rs1_w0_val == -536870913, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x33333332dfffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x33333332dfffffff, 0x66666667fffff7ff, x30, x2, 1744, x6)

inst_125:
// rs1_w0_val == -268435457, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x200000efffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x200000efffffff, 0xfbffffffffff4afc, x30, x2, 1760, x6)

inst_126:
// rs1_w0_val == -134217729, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x33333333f7ffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x33333333f7ffffff, 0x33333333fffdffff, x30, x2, 1776, x6)

inst_127:
// rs1_w0_val == -33554433, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00b503fdffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00b503fdffffff, 0x00b50355555556, x30, x2, 1792, x6)

inst_128:
// rs1_w0_val == -16777217, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x10000000feffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x10000000feffffff, 0xffefffffffff4afd, x30, x2, 1808, x6)

inst_129:
// rs1_w0_val == -4194305, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x2000000ffbfffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x2000000ffbfffff, 0x00000420000000, x30, x2, 1824, x6)

inst_130:
// rs1_w0_val == -2097153, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x40000000ffdfffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x40000000ffdfffff, 0x7fffffff3fffffff, x30, x2, 1840, x6)

inst_131:
// rs1_w0_val == -65537, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x000200fffeffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x000200fffeffff, 0xc0000000fffffff8, x30, x2, 1856, x6)

inst_132:
// rs1_w0_val == -65, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x400000ffffffbf;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x400000ffffffbf, 0xfffffff700000400, x30, x2, 1872, x6)

inst_133:
// rs1_w0_val == -32769, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffff4afdffff7fff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffff4afdffff7fff, 0xff7fffffffffdfff, x30, x2, 1888, x6)

inst_134:
// rs1_w0_val == -33, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x33333333ffffffdf;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x33333333ffffffdf, 0xffffffbffffffffb, x30, x2, 1904, x6)

inst_135:
// rs1_w0_val == -17, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x8000000ffffffef;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x8000000ffffffef, 0xffbfffffffffffff, x30, x2, 1920, x6)

inst_136:
// rs2_w0_val == 33554432, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffff4afd0000b505;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffff4afd0000b505, 0xfffffffa02000000, x30, x2, 1936, x6)

inst_137:
// rs2_w0_val == 16777216, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffffffef40000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffffffef40000000, 0x00008001000000, x30, x2, 1952, x6)

inst_138:
// rs2_w0_val == 8388608, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x000004ffefffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x000004ffefffff, 0xbfffffff00800000, x30, x2, 1968, x6)

inst_139:
// rs2_w0_val == 4194304, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x0000023fffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x0000023fffffff, 0x400000000400000, x30, x2, 1984, x6)

inst_140:
// rs2_w0_val == 2097152, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xffbfffff00040000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xffbfffff00040000, 0xfffffff700200000, x30, x2, 2000, x6)

inst_141:
// rs2_w0_val == 131072, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0xf7ffffffdfffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0xf7ffffffdfffffff, 0x00001000020000, x30, x2, 2016, x6)

inst_142:
// rs2_w0_val == 32768, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x200000efffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x200000efffffff, 0xffffffff00008000, x30, x2, 2032, x6)
RVTEST_SIGBASE(x2,signature_x2_1)

inst_143:
// rs1_w0_val == 1048576, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x200000000100000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x200000000100000, 0xf7fffffff7ffffff, x30, x2, 0, x6)
RVTEST_SIGBASE(x2,signature_x2_2)

inst_144:
// rs1_w1_val == 8192, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x002000fffffff6;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x002000fffffff6, 0xc000000000000008, x30, x2, 0, x6)

inst_145:
// rs2_w0_val == 256, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00000100100000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00000100100000, 0x00000000000100, x30, x2, 16, x6)

inst_146:
// rs2_w0_val == 128, 
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x3fffffff00000005;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000005, 0x00b50300000080, x30, x2, 32, x6)

inst_147:
// rs2_w1_val == 1431655765, rs1_w1_val == 128
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x00008066666665;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x00008066666665, 0x55555555ffff4afd, x30, x2, 48, x6)

inst_148:
// rs2_w1_val == -131073, rs2_w0_val == -4194305, rs1_w1_val == 134217728
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x8000000fffffffc;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x8000000fffffffc, 0xfffdffffffbfffff, x30, x2, 64, x6)

inst_149:
// rs2_w1_val == -257, rs1_w1_val == 65536, rs2_w0_val == 134217728
// opcode: kmmsb.u ; op1:x30; dest:x31; op1val:0x010000c0000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb.u, x31, x30, x29, 0x0000000000000000, 0x010000c0000000, 0xfffffeff08000000, x30, x2, 80, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x2_2:
    .fill 12*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
