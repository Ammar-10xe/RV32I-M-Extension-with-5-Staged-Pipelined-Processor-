
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ksll8 instruction of the RISC-V RV64PZicsr extension for the ksll8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ksll8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 == rd != rs2, rs1==x10, rs2==x13, rd==x10, rs2_val == 5, rs1_b1_val == 127, rs1_b5_val == 85, rs1_b7_val == 64, rs1_b0_val == -65, rs1_b2_val == -1
// opcode: ksll8 ; op1:x10; op2:x13; dest:x10; op1val:0x40fa5509f6ff7fbf;  op2val:0x5
TEST_PKRR_OP(ksll8, x10, x10, x13, 0x0000000000000000, 0x40fa5509f6ff7fbf, 0x5, x10, x5, 0, x14)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x15, rd==x0, rs2_val == 3, rs1_b3_val == -128, rs1_b7_val == -2, rs1_b4_val == 8, rs1_b5_val == -65, rs1_b6_val == -86
// opcode: ksll8 ; op1:x2; op2:x15; dest:x0; op1val:0xfeaabf08803f09fc;  op2val:0x3
TEST_PKRR_OP(ksll8, x0, x2, x15, 0x0000000000000000, 0xfeaabf08803f09fc, 0x3, x2, x5, 16, x14)

inst_2:
// rs1 == rs2 != rd, rs1==x27, rs2==x27, rd==x15, rs2_val == 6, rs1_b1_val == -3, rs1_b4_val == -33, rs1_b6_val == 16, rs1_b7_val == -17, rs1_b2_val == 4
// opcode: ksll8 ; op1:x27; op2:x27; dest:x15; op1val:0xef1055dff904fd09;  op2val:0x6
TEST_PKRR_OP(ksll8, x15, x27, x27, 0x0000000000000000, 0xef1055dff904fd09, 0x6, x27, x5, 32, x14)

inst_3:
// rs1 == rs2 == rd, rs1==x11, rs2==x11, rd==x11, rs2_val == 4, rs1_b5_val == 0, rs1_b6_val == -5, rs1_b1_val == -2, rs1_b4_val == -9, rs1_b7_val == -9, rs1_b2_val == -9, rs1_b3_val == -65, rs1_b0_val == -3
// opcode: ksll8 ; op1:x11; op2:x11; dest:x11; op1val:0xf7fb00f7bff7fefd;  op2val:0x4
TEST_PKRR_OP(ksll8, x11, x11, x11, 0x0000000000000000, 0xf7fb00f7bff7fefd, 0x4, x11, x5, 48, x14)

inst_4:
// rs2 == rd != rs1, rs1==x3, rs2==x8, rd==x8, rs2_val == 2, rs1_b2_val == 8, rs1_b4_val == 2, rs1_b6_val == -33, rs1_b3_val == -2
// opcode: ksll8 ; op1:x3; op2:x8; dest:x8; op1val:0xfedffa02fe08fafc;  op2val:0x2
TEST_PKRR_OP(ksll8, x8, x3, x8, 0x0000000000000000, 0xfedffa02fe08fafc, 0x2, x3, x5, 64, x14)

inst_5:
// rs1==x7, rs2==x24, rd==x17, rs2_val == 1, rs1_b0_val == 8, rs1_b3_val == 4, rs1_b2_val == -86, rs1_b4_val == 16, rs1_b1_val == 0
// opcode: ksll8 ; op1:x7; op2:x24; dest:x17; op1val:0xf93f061004aa0008;  op2val:0x1
TEST_PKRR_OP(ksll8, x17, x7, x24, 0x0000000000000000, 0xf93f061004aa0008, 0x1, x7, x5, 80, x14)

inst_6:
// rs1==x17, rs2==x26, rd==x9, rs1_b7_val == -86, rs1_b0_val == -128, rs1_b5_val == 16, rs1_b2_val == -128
// opcode: ksll8 ; op1:x17; op2:x26; dest:x9; op1val:0xaadf10df06800580;  op2val:0x4
TEST_PKRR_OP(ksll8, x9, x17, x26, 0x0000000000000000, 0xaadf10df06800580, 0x4, x17, x5, 96, x14)

inst_7:
// rs1==x25, rs2==x29, rd==x2, rs1_b7_val == 85, rs1_b4_val == -5, rs1_b6_val == 127
// opcode: ksll8 ; op1:x25; op2:x29; dest:x2; op1val:0x557ffafb09ff03fc;  op2val:0x8
TEST_PKRR_OP(ksll8, x2, x25, x29, 0x0000000000000000, 0x557ffafb09ff03fc, 0x8, x25, x5, 112, x14)

inst_8:
// rs1==x22, rs2==x6, rd==x7, rs1_b7_val == 127, rs1_b0_val == 2, rs1_b6_val == 4, rs1_b3_val == -33, rs1_b1_val == -86
// opcode: ksll8 ; op1:x22; op2:x6; dest:x7; op1val:0x7f0410f6df05aa02;  op2val:0xd
TEST_PKRR_OP(ksll8, x7, x22, x6, 0x0000000000000000, 0x7f0410f6df05aa02, 0xd, x22, x5, 128, x14)

inst_9:
// rs1==x29, rs2==x19, rd==x20, rs1_b7_val == -65, rs1_b1_val == 1, rs1_b3_val == -17, rs1_b4_val == 64, rs1_b5_val == 1
// opcode: ksll8 ; op1:x29; op2:x19; dest:x20; op1val:0xbf050140efc00109;  op2val:0x6
TEST_PKRR_OP(ksll8, x20, x29, x19, 0x0000000000000000, 0xbf050140efc00109, 0x6, x29, x5, 144, x14)

inst_10:
// rs1==x23, rs2==x2, rd==x19, rs1_b7_val == -33, rs1_b5_val == 64, rs1_b4_val == 127, rs1_b3_val == 85
// opcode: ksll8 ; op1:x23; op2:x2; dest:x19; op1val:0xdffb407f55c001c0;  op2val:0x9
TEST_PKRR_OP(ksll8, x19, x23, x2, 0x0000000000000000, 0xdffb407f55c001c0, 0x9, x23, x5, 160, x14)

inst_11:
// rs1==x1, rs2==x25, rd==x29, rs1_b7_val == -5, rs1_b4_val == 4, rs1_b3_val == 32, rs1_b2_val == 85
// opcode: ksll8 ; op1:x1; op2:x25; dest:x29; op1val:0xfbf6bf042055f902;  op2val:0x8
TEST_PKRR_OP(ksll8, x29, x1, x25, 0x0000000000000000, 0xfbf6bf042055f902, 0x8, x1, x5, 176, x14)

inst_12:
// rs1==x6, rs2==x16, rd==x3, rs1_b7_val == -3, rs1_b6_val == -9, rs1_b5_val == -128, rs1_b2_val == -33
// opcode: ksll8 ; op1:x6; op2:x16; dest:x3; op1val:0xfdf78002fadf07fd;  op2val:0xd
TEST_PKRR_OP(ksll8, x3, x6, x16, 0x0000000000000000, 0xfdf78002fadf07fd, 0xd, x6, x5, 192, x14)

inst_13:
// rs1==x4, rs2==x7, rd==x24, rs1_b7_val == -128, rs1_b0_val == 1
// opcode: ksll8 ; op1:x4; op2:x7; dest:x24; op1val:0x800300f9f855fc01;  op2val:0x2
TEST_PKRR_OP(ksll8, x24, x4, x7, 0x0000000000000000, 0x800300f9f855fc01, 0x2, x4, x5, 208, x14)

inst_14:
// rs1==x21, rs2==x22, rd==x13, rs1_b7_val == 32, rs1_b1_val == 64, rs1_b5_val == -17
// opcode: ksll8 ; op1:x21; op2:x22; dest:x13; op1val:0x20f8ef043f0840c0;  op2val:0xc
TEST_PKRR_OP(ksll8, x13, x21, x22, 0x0000000000000000, 0x20f8ef043f0840c0, 0xc, x21, x5, 224, x14)

inst_15:
// rs1==x30, rs2==x4, rd==x16, rs1_b7_val == 16, 
// opcode: ksll8 ; op1:x30; op2:x4; dest:x16; op1val:0x10fb030207f906c0;  op2val:0xa
TEST_PKRR_OP(ksll8, x16, x30, x4, 0x0000000000000000, 0x10fb030207f906c0, 0xa, x30, x5, 240, x14)

inst_16:
// rs1==x13, rs2==x12, rd==x4, rs1_b7_val == 8, rs1_b6_val == 32, rs1_b3_val == 0, rs1_b1_val == -128, rs1_b4_val == -3, rs1_b5_val == 127, rs1_b0_val == -5
// opcode: ksll8 ; op1:x13; op2:x12; dest:x4; op1val:0x8207ffd000780fb;  op2val:0x1
TEST_PKRR_OP(ksll8, x4, x13, x12, 0x0000000000000000, 0x8207ffd000780fb, 0x1, x13, x5, 256, x14)

inst_17:
// rs1==x18, rs2==x0, rd==x22, rs1_b7_val == 4, rs1_b1_val == 8
// opcode: ksll8 ; op1:x18; op2:x0; dest:x22; op1val:0x4fc0505df8008fa;  op2val:0x0
TEST_PKRR_OP(ksll8, x22, x18, x0, 0x0000000000000000, 0x4fc0505df8008fa, 0x0, x18, x5, 272, x4)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_18:
// rs1==x16, rs2==x5, rd==x6, rs1_b7_val == 2, rs1_b5_val == -5, rs1_b0_val == 32
// opcode: ksll8 ; op1:x16; op2:x5; dest:x6; op1val:0x2dffb03f9c00320;  op2val:0xa
TEST_PKRR_OP(ksll8, x6, x16, x5, 0x0000000000000000, 0x2dffb03f9c00320, 0xa, x16, x2, 0, x4)

inst_19:
// rs1==x5, rs2==x1, rd==x12, rs1_b7_val == 1, rs1_b3_val == -1
// opcode: ksll8 ; op1:x5; op2:x1; dest:x12; op1val:0x1df40f9fff8fd03;  op2val:0xf
TEST_PKRR_OP(ksll8, x12, x5, x1, 0x0000000000000000, 0x1df40f9fff8fd03, 0xf, x5, x2, 16, x4)

inst_20:
// rs1==x20, rs2==x23, rd==x26, rs1_b7_val == 0, rs1_b6_val == 85, rs1_b0_val == 0
// opcode: ksll8 ; op1:x20; op2:x23; dest:x26; op1val:0x5510fd3f060700;  op2val:0x4
TEST_PKRR_OP(ksll8, x26, x20, x23, 0x0000000000000000, 0x5510fd3f060700, 0x4, x20, x2, 32, x4)

inst_21:
// rs1==x0, rs2==x3, rd==x14, rs1_b7_val == -1, rs1_b3_val == -86
// opcode: ksll8 ; op1:x0; op2:x3; dest:x14; op1val:0xff3f00f8aafa7f01;  op2val:0x12
TEST_PKRR_OP(ksll8, x14, x0, x3, 0x0000000000000000, 0xff3f00f8aafa7f01, 0x12, x0, x2, 48, x4)

inst_22:
// rs1==x14, rs2==x28, rd==x1, rs1_b6_val == -65, rs1_b5_val == -1, rs1_b1_val == -33, rs1_b4_val == -1
// opcode: ksll8 ; op1:x14; op2:x28; dest:x1; op1val:0xf6bfffff2003df3f;  op2val:0x6
TEST_PKRR_OP(ksll8, x1, x14, x28, 0x0000000000000000, 0xf6bfffff2003df3f, 0x6, x14, x2, 64, x4)

inst_23:
// rs1==x12, rs2==x14, rd==x28, rs1_b6_val == -17, rs1_b2_val == 32
// opcode: ksll8 ; op1:x12; op2:x14; dest:x28; op1val:0xfbef0940072006fa;  op2val:0x13
TEST_PKRR_OP(ksll8, x28, x12, x14, 0x0000000000000000, 0xfbef0940072006fa, 0x13, x12, x2, 80, x4)

inst_24:
// rs1==x31, rs2==x10, rd==x27, rs1_b6_val == -3, rs1_b5_val == 32, rs1_b4_val == -65, rs1_b2_val == 16
// opcode: ksll8 ; op1:x31; op2:x10; dest:x27; op1val:0xeffd20bf04100102;  op2val:0x1
TEST_PKRR_OP(ksll8, x27, x31, x10, 0x0000000000000000, 0xeffd20bf04100102, 0x1, x31, x2, 96, x4)

inst_25:
// rs1==x8, rs2==x21, rd==x31, rs1_b6_val == -2, rs1_b4_val == -128, rs1_b2_val == -17, rs1_b5_val == -2
// opcode: ksll8 ; op1:x8; op2:x21; dest:x31; op1val:0xfdfefe8080effef9;  op2val:0xb
TEST_PKRR_OP(ksll8, x31, x8, x21, 0x0000000000000000, 0xfdfefe8080effef9, 0xb, x8, x2, 112, x4)

inst_26:
// rs1==x24, rs2==x9, rd==x25, rs1_b1_val == -65, 
// opcode: ksll8 ; op1:x24; op2:x9; dest:x25; op1val:0xf6ef20f90410bffb;  op2val:0x5
TEST_PKRR_OP(ksll8, x25, x24, x9, 0x0000000000000000, 0xf6ef20f90410bffb, 0x5, x24, x2, 128, x4)

inst_27:
// rs1==x26, rs2==x18, rd==x23, rs1_b1_val == -17, rs1_b2_val == 2
// opcode: ksll8 ; op1:x26; op2:x18; dest:x23; op1val:0xc0fafb10f802ef08;  op2val:0x10
TEST_PKRR_OP(ksll8, x23, x26, x18, 0x0000000000000000, 0xc0fafb10f802ef08, 0x10, x26, x2, 144, x4)

inst_28:
// rs1==x28, rs2==x30, rd==x21, rs1_b1_val == -9, rs1_b0_val == 16
// opcode: ksll8 ; op1:x28; op2:x30; dest:x21; op1val:0xf8fbfbff0020f710;  op2val:0xa
TEST_PKRR_OP(ksll8, x21, x28, x30, 0x0000000000000000, 0xf8fbfbff0020f710, 0xa, x28, x2, 160, x4)

inst_29:
// rs1==x15, rs2==x31, rd==x30, rs1_b1_val == -5, rs1_b0_val == -33
// opcode: ksll8 ; op1:x15; op2:x31; dest:x30; op1val:0x3ffbff3f20effbdf;  op2val:0xe
TEST_PKRR_OP(ksll8, x30, x15, x31, 0x0000000000000000, 0x3ffbff3f20effbdf, 0xe, x15, x2, 176, x4)

inst_30:
// rs1==x9, rs2==x20, rd==x5, rs1_b1_val == 32, 
// opcode: ksll8 ; op1:x9; op2:x20; dest:x5; op1val:0xfb1001f705ef2005;  op2val:0xa
TEST_PKRR_OP(ksll8, x5, x9, x20, 0x0000000000000000, 0xfb1001f705ef2005, 0xa, x9, x2, 192, x4)

inst_31:
// rs1==x19, rs2==x17, rd==x18, rs1_b1_val == 16, rs1_b3_val == 16, rs1_b4_val == 85, rs1_b2_val == -5, rs1_b5_val == -33, rs1_b0_val == 64
// opcode: ksll8 ; op1:x19; op2:x17; dest:x18; op1val:0xffaadf5510fb1040;  op2val:0x5
TEST_PKRR_OP(ksll8, x18, x19, x17, 0x0000000000000000, 0xffaadf5510fb1040, 0x5, x19, x2, 208, x4)

inst_32:
// rs1_b1_val == 4, rs1_b4_val == 1
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x4006ff01effc0408;  op2val:0xc
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0x4006ff01effc0408, 0xc, x30, x2, 224, x4)

inst_33:
// rs1_b1_val == 2, rs1_b0_val == 85, rs1_b3_val == 2
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x40f9bffc023f0255;  op2val:0xc
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0x40f9bffc023f0255, 0xc, x30, x2, 240, x1)

inst_34:
// rs1_b1_val == -1, rs1_b6_val == 8, rs1_b2_val == -2, rs1_b3_val == 127
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xf70806fc7ffefffb;  op2val:0x3
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0xf70806fc7ffefffb, 0x3, x30, x2, 256, x1)

inst_35:
// rs1_b0_val == -86, rs1_b6_val == 1, rs1_b2_val == 127
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x6010003ef7f05aa;  op2val:0xf
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0x6010003ef7f05aa, 0xf, x30, x2, 272, x1)

inst_36:
// rs1_b0_val == 127, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xefdff903fa02f87f;  op2val:0x3
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0xefdff903fa02f87f, 0x3, x30, x2, 288, x1)

inst_37:
// rs1_b0_val == -17, rs1_b3_val == -3, rs1_b5_val == -3
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xfcf7fd01fdf7feef;  op2val:0x12
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0xfcf7fd01fdf7feef, 0x12, x30, x2, 304, x1)

inst_38:
// rs1_b0_val == -9, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfef9408080dff7;  op2val:0x8
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0xfdfef9408080dff7, 0x8, x30, x2, 320, x1)

inst_39:
// rs1_b4_val == -86, rs1_b3_val == -9
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa5500aaf7080307;  op2val:0xf
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0xfa5500aaf7080307, 0xf, x30, x2, 336, x1)

inst_40:
// rs1_b4_val == -17, rs1_b1_val == 85
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x208c0ef80fe55aa;  op2val:0x4
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0x208c0ef80fe55aa, 0x4, x30, x2, 352, x1)

inst_41:
// rs1_b4_val == -2, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x81009feeff8097f;  op2val:0xc
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0x81009feeff8097f, 0xc, x30, x2, 368, x1)

inst_42:
// rs1_b4_val == 32, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x8060120df80ff3f;  op2val:0x3
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0x8060120df80ff3f, 0x3, x30, x2, 384, x1)

inst_43:
// rs1_b4_val == 0, rs1_b6_val == 2, rs1_b5_val == 4
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb02040080dffe08;  op2val:0x10
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0xfb02040080dffe08, 0x10, x30, x2, 400, x1)

inst_44:
// rs1_b0_val == -2, rs1_b5_val == -9
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x53ff7df80f9fffe;  op2val:0xa
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0x53ff7df80f9fffe, 0xa, x30, x2, 416, x1)

inst_45:
// rs1_b3_val == -5, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbef3ffbfbf6fef9;  op2val:0x8
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0xfbef3ffbfbf6fef9, 0x8, x30, x2, 432, x1)

inst_46:
// rs1_b0_val == 4, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xefef0980f8fcf604;  op2val:0xc
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0xefef0980f8fcf604, 0xc, x30, x2, 448, x1)

inst_47:
// rs1_b3_val == 64, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x5507fe0340fcaafa;  op2val:0x12
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0x5507fe0340fcaafa, 0x12, x30, x2, 464, x1)

inst_48:
// rs1_b6_val == -128, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf8003f83ff9fcdf;  op2val:0x0
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0xdf8003f83ff9fcdf, 0x0, x30, x2, 480, x1)

inst_49:
// rs1_b3_val == 8, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x2080fb3f08aa3ffd;  op2val:0xc
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0x2080fb3f08aa3ffd, 0xc, x30, x2, 496, x1)

inst_50:
// rs1_b6_val == 64, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa40ff7f04fef6f6;  op2val:0x9
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0xfa40ff7f04fef6f6, 0x9, x30, x2, 512, x1)

inst_51:
// rs1_b0_val == -1, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x8080fbf8eff810ff;  op2val:0x13
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0x8080fbf8eff810ff, 0x13, x30, x2, 528, x1)

inst_52:
// rs1_b3_val == 1, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8fb10fa01df0508;  op2val:0xd
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0xf8fb10fa01df0508, 0xd, x30, x2, 544, x1)

inst_53:
// rs1_b6_val == 0, rs1_b5_val == 2
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x400002f702c02000;  op2val:0xe
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0x400002f702c02000, 0xe, x30, x2, 560, x1)

inst_54:
// rs1_b6_val == -1, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x1fffb3ffbf9efef;  op2val:0x8
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0x1fffb3ffbf9efef, 0x8, x30, x2, 576, x1)

inst_55:
// rs1_b2_val == 0, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f8f8bf100005fc;  op2val:0x4
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0x3f8f8bf100005fc, 0x4, x30, x2, 592, x1)

inst_56:
// rs1_b2_val == -3, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x4ff400820fd0320;  op2val:0xe
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0x4ff400820fd0320, 0xe, x30, x2, 608, x1)

inst_57:
// rs1_b2_val == 64, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xf809fc80aa402040;  op2val:0x7
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0xf809fc80aa402040, 0x7, x30, x2, 624, x1)

inst_58:
// rs1_b2_val == 1, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x80fdfff9f901aac0;  op2val:0x2
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0x80fdfff9f901aac0, 0x2, x30, x2, 640, x1)

inst_59:
// rs1_b5_val == 8, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x20f8080240fdfa80;  op2val:0xb
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0x20f8080240fdfa80, 0xb, x30, x2, 656, x1)

inst_60:
// rs1_b2_val == -65, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa200403fbbf0306;  op2val:0x3
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0xfa200403fbbf0306, 0x3, x30, x2, 672, x1)

inst_61:
// rs1_b5_val == -86, 
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xf93faafbaa0340c0;  op2val:0xd
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0xf93faafbaa0340c0, 0xd, x30, x2, 688, x1)

inst_62:
// rs2_val == 6, rs1_b1_val == -3, rs1_b4_val == -33, rs1_b6_val == 16, rs1_b7_val == -17, rs1_b2_val == 4
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xef1055dff904fd09;  op2val:0x6
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0xef1055dff904fd09, 0x6, x30, x2, 704, x1)

inst_63:
// rs2_val == 4, rs1_b5_val == 0, rs1_b6_val == -5, rs1_b1_val == -2, rs1_b4_val == -9, rs1_b7_val == -9, rs1_b2_val == -9, rs1_b3_val == -65, rs1_b0_val == -3
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fb00f7bff7fefd;  op2val:0x4
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0xf7fb00f7bff7fefd, 0x4, x30, x2, 720, x1)

inst_64:
// rs1_b7_val == 4, rs1_b1_val == 8
// opcode: ksll8 ; op1:x30; op2:x29; dest:x31; op1val:0x4fc0505df8008fa;  op2val:0xf
TEST_PKRR_OP(ksll8, x31, x30, x29, 0x0000000000000000, 0x4fc0505df8008fa, 0xf, x30, x2, 736, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 94*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
