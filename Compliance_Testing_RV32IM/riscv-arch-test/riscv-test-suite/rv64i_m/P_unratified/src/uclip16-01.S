
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uclip16 instruction of the RISC-V RV64PZicsr extension for the uclip16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uclip16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x16,signature_x16_1)

inst_0:
// rs1 == rd, rs1==x9, rd==x9, rs1_h0_val == 0, imm_val == 8, rs1_h1_val == 16, rs1_h2_val == 32768, rs1_h3_val == 8
// opcode: uclip16 ; op1:x9; dest:x9; op1val:0x08800000100000;  immval:0x8
TEST_PKIMM_OP( uclip16, x9, x9, 0x0000000000000000, 0x08800000100000, 0x8, x9, x16, 0, x18)

inst_1:
// rs1 != rd, rs1==x12, rd==x0, imm_val == 15, rs1_h1_val == 0, rs1_h2_val == 65534
// opcode: uclip16 ; op1:x12; dest:x0; op1val:0x0ffffe0000000a;  immval:0xf
TEST_PKIMM_OP( uclip16, x0, x12, 0x0000000000000000, 0x0ffffe0000000a, 0xf, x12, x16, 16, x18)

inst_2:
// rs1==x7, rd==x14, imm_val == 14, rs1_h3_val == 65407, rs1_h1_val == 65519
// opcode: uclip16 ; op1:x7; dest:x14; op1val:0xff7f000cffef000a;  immval:0xe
TEST_PKIMM_OP( uclip16, x14, x7, 0x0000000000000000, 0xff7f000cffef000a, 0xe, x7, x16, 32, x18)

inst_3:
// rs1==x8, rd==x19, imm_val == 13, rs1_h0_val == 64, rs1_h3_val == 2048
// opcode: uclip16 ; op1:x8; dest:x19; op1val:0x800001100030040;  immval:0xd
TEST_PKIMM_OP( uclip16, x19, x8, 0x0000000000000000, 0x800001100030040, 0xd, x8, x16, 48, x18)

inst_4:
// rs1==x0, rd==x25, imm_val == 12, rs1_h3_val == 65533, rs1_h2_val == 65519, rs1_h0_val == 61439
// opcode: uclip16 ; op1:x0; dest:x25; op1val:0xfffdffef0006efff;  immval:0xc
TEST_PKIMM_OP( uclip16, x25, x0, 0x0000000000000000, 0xfffdffef0006efff, 0xc, x0, x16, 64, x18)

inst_5:
// rs1==x22, rd==x5, imm_val == 11, rs1_h1_val == 4, rs1_h2_val == 65407
// opcode: uclip16 ; op1:x22; dest:x5; op1val:0x05ff7f00040040;  immval:0xb
TEST_PKIMM_OP( uclip16, x5, x22, 0x0000000000000000, 0x05ff7f00040040, 0xb, x22, x16, 80, x18)

inst_6:
// rs1==x2, rd==x22, imm_val == 10, rs1_h0_val == 64511
// opcode: uclip16 ; op1:x2; dest:x22; op1val:0x80000030003fbff;  immval:0xa
TEST_PKIMM_OP( uclip16, x22, x2, 0x0000000000000000, 0x80000030003fbff, 0xa, x2, x16, 96, x18)

inst_7:
// rs1==x23, rd==x11, imm_val == 9, rs1_h3_val == 256
// opcode: uclip16 ; op1:x23; dest:x11; op1val:0x100000f000a0012;  immval:0x9
TEST_PKIMM_OP( uclip16, x11, x23, 0x0000000000000000, 0x100000f000a0012, 0x9, x23, x16, 112, x18)

inst_8:
// rs1==x3, rd==x10, imm_val == 7, rs1_h2_val == 16384, rs1_h1_val == 65535, rs1_h0_val == 65531
// opcode: uclip16 ; op1:x3; dest:x10; op1val:0x0c4000fffffffb;  immval:0x7
TEST_PKIMM_OP( uclip16, x10, x3, 0x0000000000000000, 0x0c4000fffffffb, 0x7, x3, x16, 128, x18)

inst_9:
// rs1==x21, rd==x29, imm_val == 6, rs1_h3_val == 4, rs1_h0_val == 4, rs1_h1_val == 2048, rs1_h2_val == 128
// opcode: uclip16 ; op1:x21; dest:x29; op1val:0x04008008000004;  immval:0x6
TEST_PKIMM_OP( uclip16, x29, x21, 0x0000000000000000, 0x04008008000004, 0x6, x21, x16, 144, x18)

inst_10:
// rs1==x15, rd==x13, imm_val == 5, rs1_h1_val == 65531, rs1_h2_val == 32767
// opcode: uclip16 ; op1:x15; dest:x13; op1val:0x057ffffffb0013;  immval:0x5
TEST_PKIMM_OP( uclip16, x13, x15, 0x0000000000000000, 0x057ffffffb0013, 0x5, x15, x16, 160, x18)

inst_11:
// rs1==x19, rd==x2, imm_val == 4, rs1_h3_val == 65023, rs1_h2_val == 4
// opcode: uclip16 ; op1:x19; dest:x2; op1val:0xfdff00040013000e;  immval:0x4
TEST_PKIMM_OP( uclip16, x2, x19, 0x0000000000000000, 0xfdff00040013000e, 0x4, x19, x16, 176, x18)

inst_12:
// rs1==x4, rd==x3, imm_val == 3, rs1_h1_val == 65471, rs1_h3_val == 16384
// opcode: uclip16 ; op1:x4; dest:x3; op1val:0x40000003ffbf0013;  immval:0x3
TEST_PKIMM_OP( uclip16, x3, x4, 0x0000000000000000, 0x40000003ffbf0013, 0x3, x4, x16, 192, x18)

inst_13:
// rs1==x29, rd==x21, imm_val == 2, rs1_h3_val == 65534, rs1_h2_val == 65531, rs1_h0_val == 65023
// opcode: uclip16 ; op1:x29; dest:x21; op1val:0xfffefffbfffbfdff;  immval:0x2
TEST_PKIMM_OP( uclip16, x21, x29, 0x0000000000000000, 0xfffefffbfffbfdff, 0x2, x29, x16, 208, x18)

inst_14:
// rs1==x26, rd==x1, imm_val == 1, rs1_h1_val == 65407
// opcode: uclip16 ; op1:x26; dest:x1; op1val:0x0aff7fff7f0012;  immval:0x1
TEST_PKIMM_OP( uclip16, x1, x26, 0x0000000000000000, 0x0aff7fff7f0012, 0x1, x26, x16, 224, x18)

inst_15:
// rs1==x20, rd==x31, imm_val == 0, rs1_h2_val == 63487, rs1_h3_val == 32767, rs1_h0_val == 128
// opcode: uclip16 ; op1:x20; dest:x31; op1val:0x7ffff7fffffb0080;  immval:0x0
TEST_PKIMM_OP( uclip16, x31, x20, 0x0000000000000000, 0x7ffff7fffffb0080, 0x0, x20, x16, 240, x18)

inst_16:
// rs1==x25, rd==x28, rs1_h3_val == 43690, 
// opcode: uclip16 ; op1:x25; dest:x28; op1val:0xaaaa7fff0005000d;  immval:0x0
TEST_PKIMM_OP( uclip16, x28, x25, 0x0000000000000000, 0xaaaa7fff0005000d, 0x0, x25, x16, 256, x18)

inst_17:
// rs1==x13, rd==x23, rs1_h3_val == 21845, rs1_h0_val == 1024
// opcode: uclip16 ; op1:x13; dest:x23; op1val:0x5555000600030400;  immval:0x5
TEST_PKIMM_OP( uclip16, x23, x13, 0x0000000000000000, 0x5555000600030400, 0x5, x13, x16, 272, x18)

inst_18:
// rs1==x5, rd==x4, rs1_h3_val == 49151, rs1_h1_val == 1024, rs1_h2_val == 64511
// opcode: uclip16 ; op1:x5; dest:x4; op1val:0xbffffbff0400000c;  immval:0xc
TEST_PKIMM_OP( uclip16, x4, x5, 0x0000000000000000, 0xbffffbff0400000c, 0xc, x5, x16, 288, x18)

inst_19:
// rs1==x31, rd==x15, rs1_h3_val == 57343, rs1_h0_val == 65527
// opcode: uclip16 ; op1:x31; dest:x15; op1val:0xdfff000d000ffff7;  immval:0xc
TEST_PKIMM_OP( uclip16, x15, x31, 0x0000000000000000, 0xdfff000d000ffff7, 0xc, x31, x16, 304, x18)

inst_20:
// rs1==x10, rd==x17, rs1_h3_val == 61439, 
// opcode: uclip16 ; op1:x10; dest:x17; op1val:0xeffffffb0010fbff;  immval:0xd
TEST_PKIMM_OP( uclip16, x17, x10, 0x0000000000000000, 0xeffffffb0010fbff, 0xd, x10, x16, 320, x18)

inst_21:
// rs1==x30, rd==x8, rs1_h3_val == 63487, rs1_h1_val == 21845, rs1_h0_val == 8
// opcode: uclip16 ; op1:x30; dest:x8; op1val:0xf7ff000955550008;  immval:0xe
TEST_PKIMM_OP( uclip16, x8, x30, 0x0000000000000000, 0xf7ff000955550008, 0xe, x30, x16, 336, x18)

inst_22:
// rs1==x6, rd==x24, rs1_h3_val == 64511, rs1_h2_val == 65023
// opcode: uclip16 ; op1:x6; dest:x24; op1val:0xfbfffdfffffffdff;  immval:0x0
TEST_PKIMM_OP( uclip16, x24, x6, 0x0000000000000000, 0xfbfffdfffffffdff, 0x0, x6, x16, 352, x18)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_23:
// rs1==x24, rd==x27, rs1_h3_val == 65279, 
// opcode: uclip16 ; op1:x24; dest:x27; op1val:0xfeff000300000011;  immval:0x8
TEST_PKIMM_OP( uclip16, x27, x24, 0x0000000000000000, 0xfeff000300000011, 0x8, x24, x2, 0, x3)

inst_24:
// rs1==x14, rd==x26, rs1_h3_val == 65471, rs1_h0_val == 4096, rs1_h2_val == 65535
// opcode: uclip16 ; op1:x14; dest:x26; op1val:0xffbfffff000c1000;  immval:0x4
TEST_PKIMM_OP( uclip16, x26, x14, 0x0000000000000000, 0xffbfffff000c1000, 0x4, x14, x2, 16, x3)

inst_25:
// rs1==x17, rd==x6, rs1_h3_val == 65503, rs1_h0_val == 65471
// opcode: uclip16 ; op1:x17; dest:x6; op1val:0xffdf00050003ffbf;  immval:0x1
TEST_PKIMM_OP( uclip16, x6, x17, 0x0000000000000000, 0xffdf00050003ffbf, 0x1, x17, x2, 32, x3)

inst_26:
// rs1==x11, rd==x30, rs1_h3_val == 65519, rs1_h2_val == 65503, rs1_h0_val == 1
// opcode: uclip16 ; op1:x11; dest:x30; op1val:0xffefffdf08000001;  immval:0x8
TEST_PKIMM_OP( uclip16, x30, x11, 0x0000000000000000, 0xffefffdf08000001, 0x8, x11, x2, 48, x3)

inst_27:
// rs1==x1, rd==x20, rs1_h3_val == 65527, rs1_h1_val == 64511, rs1_h2_val == 43690, rs1_h0_val == 32768
// opcode: uclip16 ; op1:x1; dest:x20; op1val:0xfff7aaaafbff8000;  immval:0x0
TEST_PKIMM_OP( uclip16, x20, x1, 0x0000000000000000, 0xfff7aaaafbff8000, 0x0, x1, x2, 64, x3)

inst_28:
// rs1==x27, rd==x16, rs1_h3_val == 65531, rs1_h0_val == 65407
// opcode: uclip16 ; op1:x27; dest:x16; op1val:0xfffbffdf000dff7f;  immval:0xe
TEST_PKIMM_OP( uclip16, x16, x27, 0x0000000000000000, 0xfffbffdf000dff7f, 0xe, x27, x2, 80, x3)

inst_29:
// rs1==x18, rd==x7, rs1_h3_val == 32768, rs1_h2_val == 0, rs1_h1_val == 32767
// opcode: uclip16 ; op1:x18; dest:x7; op1val:0x800000007fff000e;  immval:0xe
TEST_PKIMM_OP( uclip16, x7, x18, 0x0000000000000000, 0x800000007fff000e, 0xe, x18, x2, 96, x3)

inst_30:
// rs1==x16, rd==x12, rs1_h3_val == 8192, rs1_h2_val == 4096, rs1_h0_val == 63487, rs1_h1_val == 256
// opcode: uclip16 ; op1:x16; dest:x12; op1val:0x200010000100f7ff;  immval:0x7
TEST_PKIMM_OP( uclip16, x12, x16, 0x0000000000000000, 0x200010000100f7ff, 0x7, x16, x2, 112, x3)

inst_31:
// rs1==x28, rd==x18, rs1_h3_val == 4096, rs1_h2_val == 49151, rs1_h0_val == 65503
// opcode: uclip16 ; op1:x28; dest:x18; op1val:0x1000bffffffbffdf;  immval:0xf
TEST_PKIMM_OP( uclip16, x18, x28, 0x0000000000000000, 0x1000bffffffbffdf, 0xf, x28, x2, 128, x3)

inst_32:
// rs1_h3_val == 1024, rs1_h1_val == 65533, rs1_h2_val == 65279
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x400fefffffd0040;  immval:0x7
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x400fefffffd0040, 0x7, x30, x2, 144, x3)

inst_33:
// rs1_h3_val == 512, rs1_h2_val == 2, rs1_h1_val == 63487
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x2000002f7ff0080;  immval:0x7
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x2000002f7ff0080, 0x7, x30, x2, 160, x3)

inst_34:
// rs1_h3_val == 128, rs1_h0_val == 2
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x80000d00030002;  immval:0x9
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x80000d00030002, 0x9, x30, x2, 176, x3)

inst_35:
// rs1_h0_val == 49151, rs1_h1_val == 65534
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x200aaaafffebfff;  immval:0x0
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x200aaaafffebfff, 0x0, x30, x2, 192, x3)

inst_36:
// rs1_h0_val == 57343, rs1_h2_val == 16
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xfff700107fffdfff;  immval:0x4
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0xfff700107fffdfff, 0x4, x30, x2, 208, x3)

inst_37:
// rs1_h0_val == 65279, rs1_h1_val == 57343, rs1_h2_val == 256
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xf7ff0100dffffeff;  immval:0x5
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0xf7ff0100dffffeff, 0x5, x30, x2, 224, x3)

inst_38:
// rs1_h0_val == 65519, rs1_h2_val == 8
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xefff0008000effef;  immval:0x1
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0xefff0008000effef, 0x1, x30, x2, 240, x3)

inst_39:
// rs1_h0_val == 65533, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x110080dffffffd;  immval:0x9
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x110080dffffffd, 0x9, x30, x2, 256, x3)

inst_40:
// rs1_h0_val == 65534, rs1_h1_val == 1
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xdfff80000001fffe;  immval:0x5
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0xdfff80000001fffe, 0x5, x30, x2, 272, x3)

inst_41:
// rs1_h0_val == 16384, rs1_h3_val == 1
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x01001100014000;  immval:0x2
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x01001100014000, 0x2, x30, x2, 288, x3)

inst_42:
// rs1_h0_val == 8192, rs1_h2_val == 2048
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x4000800ffff2000;  immval:0x1
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x4000800ffff2000, 0x1, x30, x2, 304, x3)

inst_43:
// rs1_h0_val == 2048, rs1_h1_val == 8192
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x04fbff20000800;  immval:0x4
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x04fbff20000800, 0x4, x30, x2, 320, x3)

inst_44:
// rs1_h0_val == 512, rs1_h1_val == 8
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x08001200080200;  immval:0x2
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x08001200080200, 0x2, x30, x2, 336, x3)

inst_45:
// rs1_h0_val == 256, rs1_h2_val == 57343
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x08dfffff7f0100;  immval:0x1
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x08dfffff7f0100, 0x1, x30, x2, 352, x3)

inst_46:
// rs1_h0_val == 32, rs1_h2_val == 65533
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x800fffd55550020;  immval:0xf
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x800fffd55550020, 0xf, x30, x2, 368, x3)

inst_47:
// rs1_h0_val == 16, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x0effff00070010;  immval:0x1
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x0effff00070010, 0x1, x30, x2, 384, x3)

inst_48:
// rs1_h0_val == 65535, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xfffd000dffefffff;  immval:0x3
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0xfffd000dffefffff, 0x3, x30, x2, 400, x3)

inst_49:
// rs1_h3_val == 64, rs1_h2_val == 64, rs1_h1_val == 128, rs1_h0_val == 43690
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x4000400080aaaa;  immval:0x7
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x4000400080aaaa, 0x7, x30, x2, 416, x3)

inst_50:
// rs1_h3_val == 32, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x20fffb0000feff;  immval:0xc
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x20fffb0000feff, 0xc, x30, x2, 432, x3)

inst_51:
// rs1_h2_val == 65471, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xaaaaffbfffff0009;  immval:0x7
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0xaaaaffbfffff0009, 0x7, x30, x2, 448, x3)

inst_52:
// rs1_h2_val == 65527, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xaaaafff7ffbf0001;  immval:0x1
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0xaaaafff7ffbf0001, 0x1, x30, x2, 464, x3)

inst_53:
// rs1_h2_val == 8192, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xffbf2000ff7f0080;  immval:0x6
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0xffbf2000ff7f0080, 0x6, x30, x2, 480, x3)

inst_54:
// rs1_h2_val == 1024, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x1204000080000c;  immval:0x8
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x1204000080000c, 0x8, x30, x2, 496, x3)

inst_55:
// rs1_h2_val == 512, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x1302000006000a;  immval:0x1
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x1302000006000a, 0x1, x30, x2, 512, x3)

inst_56:
// rs1_h2_val == 32, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x0700207fff000a;  immval:0x0
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x0700207fff000a, 0x0, x30, x2, 528, x3)

inst_57:
// rs1_h2_val == 1, rs1_h1_val == 32768
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x0b00018000000b;  immval:0xd
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x0b00018000000b, 0xd, x30, x2, 544, x3)

inst_58:
// rs1_h1_val == 43690, rs1_h3_val == 16
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x10ffdfaaaa0012;  immval:0x6
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x10ffdfaaaa0012, 0x6, x30, x2, 560, x3)

inst_59:
// rs1_h1_val == 49151, rs1_h3_val == 0
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x004000bfff0001;  immval:0xe
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x004000bfff0001, 0xe, x30, x2, 576, x3)

inst_60:
// rs1_h1_val == 61439, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x20000fefff1000;  immval:0x3
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x20000fefff1000, 0x3, x30, x2, 592, x3)

inst_61:
// rs1_h1_val == 65023, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x130004fdff0000;  immval:0x7
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x130004fdff0000, 0x7, x30, x2, 608, x3)

inst_62:
// rs1_h1_val == 65279, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x101000fefffffb;  immval:0xa
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x101000fefffffb, 0xa, x30, x2, 624, x3)

inst_63:
// rs1_h1_val == 65503, rs1_h0_val == 21845
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x040100ffdf5555;  immval:0x7
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x040100ffdf5555, 0x7, x30, x2, 640, x3)

inst_64:
// rs1_h1_val == 65527, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xffef0200fff70004;  immval:0x5
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0xffef0200fff70004, 0x5, x30, x2, 656, x3)

inst_65:
// rs1_h1_val == 16384, rs1_h3_val == 2
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x02008040000013;  immval:0xd
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x02008040000013, 0xd, x30, x2, 672, x3)

inst_66:
// rs1_h1_val == 4096, rs1_h2_val == 61439
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x200efff10000010;  immval:0xe
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x200efff10000010, 0xe, x30, x2, 688, x3)

inst_67:
// rs1_h1_val == 512, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x0300400200feff;  immval:0x1
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x0300400200feff, 0x1, x30, x2, 704, x3)

inst_68:
// rs1_h3_val == 65535, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xffff0012fbffffef;  immval:0xb
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0xffff0012fbffffef, 0xb, x30, x2, 720, x3)

inst_69:
// rs1_h1_val == 64, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x05ff7f00401000;  immval:0xf
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x05ff7f00401000, 0xf, x30, x2, 736, x3)

inst_70:
// rs1_h1_val == 2, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xefff001300020013;  immval:0x4
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0xefff001300020013, 0x4, x30, x2, 752, x3)

inst_71:
// rs1_h1_val == 32, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xfeffffff0020fff7;  immval:0x8
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0xfeffffff0020fff7, 0x8, x30, x2, 768, x3)

inst_72:
// rs1_h2_val == 21845, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xffbf55555555fbff;  immval:0xb
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0xffbf55555555fbff, 0xb, x30, x2, 784, x3)

inst_73:
// rs1_h0_val == 32767, 
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xaaaafffffeff7fff;  immval:0x1
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0xaaaafffffeff7fff, 0x1, x30, x2, 800, x3)

inst_74:
// imm_val == 15, rs1_h1_val == 0, rs1_h2_val == 65534
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0x0ffffe0000000a;  immval:0xf
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0x0ffffe0000000a, 0xf, x30, x2, 816, x3)

inst_75:
// imm_val == 12, rs1_h3_val == 65533, rs1_h2_val == 65519, rs1_h0_val == 61439
// opcode: uclip16 ; op1:x30; dest:x31; op1val:0xfffdffef0006efff;  immval:0xc
TEST_PKIMM_OP( uclip16, x31, x30, 0x0000000000000000, 0xfffdffef0006efff, 0xc, x30, x2, 832, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x16_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x16_1:
    .fill 46*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 106*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
