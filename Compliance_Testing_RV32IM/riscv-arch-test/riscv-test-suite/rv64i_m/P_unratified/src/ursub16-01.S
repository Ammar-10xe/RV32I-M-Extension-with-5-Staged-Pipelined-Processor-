
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ursub16 instruction of the RISC-V RV64PZicsr extension for the ursub16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ursub16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x9, rs2==x15, rd==x9, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h2_val == 4, rs2_h0_val == 64511, rs2_h1_val == 21845, rs2_h3_val == 16384
// opcode: ursub16 ; op1:x9; op2:x15; dest:x9; op1val:0x11000500090000;  op2val:0x400000045555fbff
TEST_RR_OP(ursub16, x9, x9, x15, 0x0000000000000000, 0x11000500090000, 0x400000045555fbff, x7, 0, x4)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x14, rs2==x18, rd==x10, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h2_val == 64, rs1_h1_val == 65471, rs1_h0_val == 65279, rs1_h2_val == 32767
// opcode: ursub16 ; op1:x14; op2:x18; dest:x10; op1val:0x067fffffbffeff;  op2val:0x06004000030005
TEST_RR_OP(ursub16, x10, x14, x18, 0x0000000000000000, 0x067fffffbffeff, 0x06004000030005, x7, 8, x4)

inst_2:
// rs1 == rs2 != rd, rs1==x5, rs2==x5, rd==x1, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 63487, rs1_h0_val == 4, rs2_h3_val == 32, rs2_h2_val == 63487, rs1_h1_val == 4096
// opcode: ursub16 ; op1:x5; op2:x5; dest:x1; op1val:0x0ef7ff10000004;  op2val:0x20f7ff00030006
TEST_RR_OP(ursub16, x1, x5, x5, 0x0000000000000000, 0x0ef7ff10000004, 0x20f7ff00030006, x7, 16, x4)

inst_3:
// rs1 == rs2 == rd, rs1==x29, rs2==x29, rd==x29, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val == 64511, rs2_h0_val == 65533, rs1_h3_val == 65519, rs1_h0_val == 65535, rs2_h3_val == 0
// opcode: ursub16 ; op1:x29; op2:x29; dest:x29; op1val:0xffeffbff000dffff;  op2val:0x000005000dfffd
TEST_RR_OP(ursub16, x29, x29, x29, 0x0000000000000000, 0xffeffbff000dffff, 0x000005000dfffd, x7, 24, x4)

inst_4:
// rs2 == rd != rs1, rs1==x16, rs2==x17, rd==x17, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 16384, rs2_h2_val == 128, rs2_h3_val == 65535, rs1_h0_val == 65407, rs1_h2_val == 4, rs2_h0_val == 65407
// opcode: ursub16 ; op1:x16; op2:x17; dest:x17; op1val:0x0700040013ff7f;  op2val:0xffff00804000ff7f
TEST_RR_OP(ursub16, x17, x16, x17, 0x0000000000000000, 0x0700040013ff7f, 0xffff00804000ff7f, x7, 32, x4)

inst_5:
// rs1==x15, rs2==x10, rd==x12, rs2_h3_val == 43690, rs1_h1_val == 64511, rs1_h3_val == 128, rs2_h0_val == 21845, rs1_h0_val == 32768, rs2_h2_val == 32768
// opcode: ursub16 ; op1:x15; op2:x10; dest:x12; op1val:0x80000afbff8000;  op2val:0xaaaa800000075555
TEST_RR_OP(ursub16, x12, x15, x10, 0x0000000000000000, 0x80000afbff8000, 0xaaaa800000075555, x7, 40, x4)

inst_6:
// rs1==x24, rs2==x2, rd==x3, rs2_h3_val == 21845, rs1_h2_val == 8, rs1_h3_val == 512, rs1_h1_val == 32768, rs2_h2_val == 65519, rs2_h0_val == 63487
// opcode: ursub16 ; op1:x24; op2:x2; dest:x3; op1val:0x200000880000004;  op2val:0x5555ffef0007f7ff
TEST_RR_OP(ursub16, x3, x24, x2, 0x0000000000000000, 0x200000880000004, 0x5555ffef0007f7ff, x7, 48, x4)

inst_7:
// rs1==x30, rs2==x19, rd==x14, rs2_h3_val == 32767, rs1_h2_val == 16, rs1_h0_val == 1024, rs2_h0_val == 512
// opcode: ursub16 ; op1:x30; op2:x19; dest:x14; op1val:0x120010000a0400;  op2val:0x7fff000500120200
TEST_RR_OP(ursub16, x14, x30, x19, 0x0000000000000000, 0x120010000a0400, 0x7fff000500120200, x7, 56, x4)

inst_8:
// rs1==x17, rs2==x24, rd==x8, rs2_h3_val == 49151, rs1_h1_val == 1, rs1_h3_val == 65279, rs2_h0_val == 1, rs2_h2_val == 21845
// opcode: ursub16 ; op1:x17; op2:x24; dest:x8; op1val:0xfeff7fff0001ff7f;  op2val:0xbfff555540000001
TEST_RR_OP(ursub16, x8, x17, x24, 0x0000000000000000, 0xfeff7fff0001ff7f, 0xbfff555540000001, x7, 64, x4)

inst_9:
// rs1==x26, rs2==x9, rd==x22, rs2_h3_val == 57343, rs2_h0_val == 128, rs2_h1_val == 2, rs2_h2_val == 32767
// opcode: ursub16 ; op1:x26; op2:x9; dest:x22; op1val:0x0c0003000efeff;  op2val:0xdfff7fff00020080
TEST_RR_OP(ursub16, x22, x26, x9, 0x0000000000000000, 0x0c0003000efeff, 0xdfff7fff00020080, x7, 72, x4)

inst_10:
// rs1==x18, rs2==x28, rd==x27, rs2_h3_val == 61439, rs1_h1_val == 43690, rs1_h0_val == 49151, rs2_h0_val == 1024, rs1_h3_val == 256, rs2_h1_val == 32767, rs2_h2_val == 64511
// opcode: ursub16 ; op1:x18; op2:x28; dest:x27; op1val:0x100fbffaaaabfff;  op2val:0xeffffbff7fff0400
TEST_RR_OP(ursub16, x27, x18, x28, 0x0000000000000000, 0x100fbffaaaabfff, 0xeffffbff7fff0400, x7, 80, x4)

inst_11:
// rs1==x27, rs2==x16, rd==x30, rs2_h3_val == 63487, rs2_h0_val == 57343
// opcode: ursub16 ; op1:x27; op2:x16; dest:x30; op1val:0x07000e000f0005;  op2val:0xf7ff0004000cdfff
TEST_RR_OP(ursub16, x30, x27, x16, 0x0000000000000000, 0x07000e000f0005, 0xf7ff0004000cdfff, x7, 88, x4)

inst_12:
// rs1==x20, rs2==x27, rd==x11, rs2_h3_val == 64511, rs2_h0_val == 65279, rs1_h0_val == 64511, rs2_h2_val == 1
// opcode: ursub16 ; op1:x20; op2:x27; dest:x11; op1val:0x0f0003aaaafbff;  op2val:0xfbff00010006feff
TEST_RR_OP(ursub16, x11, x20, x27, 0x0000000000000000, 0x0f0003aaaafbff, 0xfbff00010006feff, x7, 96, x4)

inst_13:
// rs1==x6, rs2==x13, rd==x31, rs2_h3_val == 65023, rs1_h3_val == 65471, rs1_h2_val == 65534, rs2_h2_val == 65279
// opcode: ursub16 ; op1:x6; op2:x13; dest:x31; op1val:0xffbffffe10000011;  op2val:0xfdfffeff4000000f
TEST_RR_OP(ursub16, x31, x6, x13, 0x0000000000000000, 0xffbffffe10000011, 0xfdfffeff4000000f, x7, 104, x4)

inst_14:
// rs1==x19, rs2==x11, rd==x6, rs2_h3_val == 65279, rs1_h0_val == 512, rs2_h1_val == 57343, rs1_h3_val == 2048
// opcode: ursub16 ; op1:x19; op2:x11; dest:x6; op1val:0x8007fff80000200;  op2val:0xfeff000edfff0007
TEST_RR_OP(ursub16, x6, x19, x11, 0x0000000000000000, 0x8007fff80000200, 0xfeff000edfff0007, x7, 112, x9)

inst_15:
// rs1==x3, rs2==x26, rd==x28, rs2_h3_val == 65407, rs2_h2_val == 0, rs1_h1_val == 512, rs1_h0_val == 2048, rs1_h3_val == 0, rs1_h2_val == 65535
// opcode: ursub16 ; op1:x3; op2:x26; dest:x28; op1val:0x00ffff02000800;  op2val:0xff7f000000050400
TEST_RR_OP(ursub16, x28, x3, x26, 0x0000000000000000, 0x00ffff02000800, 0xff7f000000050400, x7, 120, x9)

inst_16:
// rs1==x31, rs2==x6, rd==x4, rs2_h3_val == 65471, rs1_h3_val == 1, rs2_h0_val == 65527, rs2_h1_val == 65527
// opcode: ursub16 ; op1:x31; op2:x6; dest:x4; op1val:0x01000c00090400;  op2val:0xffbf5555fff7fff7
TEST_RR_OP(ursub16, x4, x31, x6, 0x0000000000000000, 0x01000c00090400, 0xffbf5555fff7fff7, x7, 128, x9)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_17:
// rs1==x1, rs2==x12, rd==x23, rs2_h3_val == 65503, rs2_h2_val == 32, rs1_h3_val == 65534, rs2_h1_val == 32768, rs2_h0_val == 65023
// opcode: ursub16 ; op1:x1; op2:x12; dest:x23; op1val:0xfffe00100001000d;  op2val:0xffdf00208000fdff
TEST_RR_OP(ursub16, x23, x1, x12, 0x0000000000000000, 0xfffe00100001000d, 0xffdf00208000fdff, x6, 0, x9)

inst_18:
// rs1==x10, rs2==x0, rd==x21, rs2_h3_val == 65519, rs2_h1_val == 1, rs1_h1_val == 49151, rs2_h0_val == 2, rs1_h3_val == 63487
// opcode: ursub16 ; op1:x10; op2:x0; dest:x21; op1val:0xf7ff000fbfff0005;  op2val:0xffef000a00010002
TEST_RR_OP(ursub16, x21, x10, x0, 0x0000000000000000, 0xf7ff000fbfff0005, 0xffef000a00010002, x6, 8, x9)

inst_19:
// rs1==x12, rs2==x7, rd==x19, rs2_h3_val == 65527, rs1_h3_val == 64, rs2_h0_val == 65535
// opcode: ursub16 ; op1:x12; op2:x7; dest:x19; op1val:0x407fff0005fbff;  op2val:0xfff7000e000cffff
TEST_RR_OP(ursub16, x19, x12, x7, 0x0000000000000000, 0x407fff0005fbff, 0xfff7000e000cffff, x6, 16, x9)

inst_20:
// rs1==x11, rs2==x25, rd==x7, rs2_h3_val == 65531, rs1_h2_val == 65407, rs2_h1_val == 32, rs2_h2_val == 43690, rs1_h1_val == 65531, rs1_h3_val == 32767
// opcode: ursub16 ; op1:x11; op2:x25; dest:x7; op1val:0x7fffff7ffffb0200;  op2val:0xfffbaaaa00200012
TEST_RR_OP(ursub16, x7, x11, x25, 0x0000000000000000, 0x7fffff7ffffb0200, 0xfffbaaaa00200012, x6, 24, x9)

inst_21:
// rs1==x0, rs2==x22, rd==x15, rs2_h3_val == 65533, rs1_h2_val == 65503, rs1_h3_val == 32768, rs1_h0_val == 8, rs2_h1_val == 8
// opcode: ursub16 ; op1:x0; op2:x22; dest:x15; op1val:0x8000ffdf000b0008;  op2val:0xfffd00110008000a
TEST_RR_OP(ursub16, x15, x0, x22, 0x0000000000000000, 0x8000ffdf000b0008, 0xfffd00110008000a, x6, 32, x9)

inst_22:
// rs1==x8, rs2==x4, rd==x24, rs2_h3_val == 65534, rs2_h1_val == 64, rs2_h2_val == 65535
// opcode: ursub16 ; op1:x8; op2:x4; dest:x24; op1val:0xfeff000f0003ffff;  op2val:0xfffeffff0040f7ff
TEST_RR_OP(ursub16, x24, x8, x4, 0x0000000000000000, 0xfeff000f0003ffff, 0xfffeffff0040f7ff, x6, 40, x9)

inst_23:
// rs1==x13, rs2==x20, rd==x25, rs2_h3_val == 32768, rs2_h1_val == 4, rs1_h1_val == 0
// opcode: ursub16 ; op1:x13; op2:x20; dest:x25; op1val:0x80fffe0000ffff;  op2val:0x800000200004000e
TEST_RR_OP(ursub16, x25, x13, x20, 0x0000000000000000, 0x80fffe0000ffff, 0x800000200004000e, x6, 48, x9)

inst_24:
// rs1==x25, rs2==x31, rd==x16, rs2_h3_val == 8192, rs1_h0_val == 16384, rs2_h1_val == 128, rs1_h2_val == 65533, rs1_h1_val == 65519, rs2_h0_val == 49151
// opcode: ursub16 ; op1:x25; op2:x31; dest:x16; op1val:0xf7fffffdffef4000;  op2val:0x200000000080bfff
TEST_RR_OP(ursub16, x16, x25, x31, 0x0000000000000000, 0xf7fffffdffef4000, 0x200000000080bfff, x6, 56, x9)

inst_25:
// rs1==x4, rs2==x30, rd==x13, rs2_h3_val == 4096, rs1_h1_val == 65279, rs2_h1_val == 65471, rs1_h2_val == 65023, rs2_h2_val == 65407
// opcode: ursub16 ; op1:x4; op2:x30; dest:x13; op1val:0x0cfdfffeff0003;  op2val:0x1000ff7fffbf0009
TEST_RR_OP(ursub16, x13, x4, x30, 0x0000000000000000, 0x0cfdfffeff0003, 0x1000ff7fffbf0009, x6, 64, x9)

inst_26:
// rs1==x7, rs2==x23, rd==x20, rs2_h3_val == 2048, rs1_h2_val == 49151, rs1_h3_val == 8, rs2_h0_val == 32767
// opcode: ursub16 ; op1:x7; op2:x23; dest:x20; op1val:0x08bfff02000400;  op2val:0x8007fff00037fff
TEST_RR_OP(ursub16, x20, x7, x23, 0x0000000000000000, 0x08bfff02000400, 0x8007fff00037fff, x6, 72, x9)

inst_27:
// rs1==x21, rs2==x14, rd==x2, rs2_h3_val == 1024, rs2_h2_val == 16, rs2_h1_val == 65503, rs1_h0_val == 65534
// opcode: ursub16 ; op1:x21; op2:x14; dest:x2; op1val:0x070013000efffe;  op2val:0x4000010ffdf000b
TEST_RR_OP(ursub16, x2, x21, x14, 0x0000000000000000, 0x070013000efffe, 0x4000010ffdf000b, x6, 80, x9)

inst_28:
// rs1==x2, rs2==x21, rd==x26, rs2_h3_val == 512, rs2_h2_val == 65023
// opcode: ursub16 ; op1:x2; op2:x21; dest:x26; op1val:0xfffe000e00030004;  op2val:0x200fdff00110400
TEST_RR_OP(ursub16, x26, x2, x21, 0x0000000000000000, 0xfffe000e00030004, 0x200fdff00110400, x6, 88, x9)

inst_29:
// rs1==x22, rs2==x8, rd==x5, rs2_h3_val == 256, rs1_h3_val == 64511, rs1_h1_val == 21845, rs2_h1_val == 2048
// opcode: ursub16 ; op1:x22; op2:x8; dest:x5; op1val:0xfbfff7ff5555000d;  op2val:0x100000d0800dfff
TEST_RR_OP(ursub16, x5, x22, x8, 0x0000000000000000, 0xfbfff7ff5555000d, 0x100000d0800dfff, x6, 96, x9)

inst_30:
// rs1==x23, rs2==x1, rd==x0, rs2_h3_val == 128, rs1_h1_val == 65534, rs2_h2_val == 65527, rs1_h3_val == 65503
// opcode: ursub16 ; op1:x23; op2:x1; dest:x0; op1val:0xffdf0006fffe000c;  op2val:0x80fff700400006
TEST_RR_OP(ursub16, x0, x23, x1, 0x0000000000000000, 0xffdf0006fffe000c, 0x80fff700400006, x6, 104, x9)

inst_31:
// rs1==x28, rs2==x3, rd==x18, rs2_h3_val == 64, rs2_h2_val == 49151, rs2_h1_val == 65023, rs1_h3_val == 1024
// opcode: ursub16 ; op1:x28; op2:x3; dest:x18; op1val:0x4000011fbff0004;  op2val:0x40bffffdff000d
TEST_RR_OP(ursub16, x18, x28, x3, 0x0000000000000000, 0x4000011fbff0004, 0x40bffffdff000d, x6, 112, x9)

inst_32:
// rs2_h3_val == 16, rs1_h3_val == 61439
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff7fff0006000d;  op2val:0x10000d000d0013
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xefff7fff0006000d, 0x10000d000d0013, x6, 120, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs2_h3_val == 8, rs2_h1_val == 65531, rs1_h0_val == 43690, rs2_h2_val == 2, rs1_h3_val == 8192
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000012feffaaaa;  op2val:0x080002fffb000f
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x20000012feffaaaa, 0x080002fffb000f, x1, 0, x2)

inst_34:
// rs2_h3_val == 4, rs2_h1_val == 65533, rs1_h0_val == 65533, rs2_h0_val == 4, rs1_h2_val == 43690
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffaaaabffffffd;  op2val:0x04ffeffffd0004
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xf7ffaaaabffffffd, 0x04ffeffffd0004, x1, 8, x2)

inst_35:
// rs2_h3_val == 2, rs1_h0_val == 8192
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d001110002000;  op2val:0x0200100008000b
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x0d001110002000, 0x0200100008000b, x1, 16, x2)

inst_36:
// rs2_h3_val == 1, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffdf00070005;  op2val:0x01000900030011
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xffdfffdf00070005, 0x01000900030011, x1, 24, x2)

inst_37:
// rs2_h2_val == 57343, rs1_h2_val == 64, rs1_h1_val == 65023
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b0040fdff0800;  op2val:0xffffdfff4000fbff
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x0b0040fdff0800, 0xffffdfff4000fbff, x1, 32, x2)

inst_38:
// rs2_h2_val == 61439, rs1_h1_val == 65407, rs2_h1_val == 0, rs1_h2_val == 256, rs1_h0_val == 256
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0100ff7f0100;  op2val:0xfff7efff0000ffff
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x7fff0100ff7f0100, 0xfff7efff0000ffff, x1, 40, x2)

inst_39:
// rs1_h1_val == 4, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff001000040009;  op2val:0x0b000100000011
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xfeff001000040009, 0x0b000100000011, x1, 48, x2)

inst_40:
// rs1_h1_val == 2, rs2_h1_val == 512, rs2_h0_val == 16, rs1_h2_val == 65531
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffb0002000f;  op2val:0x10000002000010
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xeffffffb0002000f, 0x10000002000010, x1, 56, x2)

inst_41:
// rs1_h1_val == 65535, rs1_h3_val == 65535
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffaaaaffffbfff;  op2val:0xffbf8000fffb0400
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xffffaaaaffffbfff, 0xffbf8000fffb0400, x1, 64, x2)

inst_42:
// rs1_h0_val == 21845, rs2_h2_val == 2048, rs2_h0_val == 32768
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfbfff00065555;  op2val:0xfbff080080008000
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xffbfbfff00065555, 0xfbff080080008000, x1, 72, x2)

inst_43:
// rs1_h0_val == 32767, rs2_h1_val == 64511, rs1_h2_val == 1, rs1_h3_val == 4, rs1_h1_val == 65527
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x040001fff77fff;  op2val:0x02fff7fbff0012
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x040001fff77fff, 0x02fff7fbff0012, x1, 80, x2)

inst_44:
// rs1_h0_val == 57343, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000e0001dfff;  op2val:0xfffd00040012fbff
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xfbff000e0001dfff, 0xfffd00040012fbff, x1, 88, x2)

inst_45:
// rs1_h0_val == 61439, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffdffffefff;  op2val:0xfffe55557fff0400
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x2000fffdffffefff, 0xfffe55557fff0400, x1, 96, x2)

inst_46:
// rs1_h0_val == 63487, rs2_h0_val == 65531, rs1_h3_val == 65527
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7bffffdfff7ff;  op2val:0x090010000ffffb
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xfff7bffffdfff7ff, 0x090010000ffffb, x1, 104, x2)

inst_47:
// rs1_h0_val == 65023, rs1_h3_val == 21845
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555000b0005fdff;  op2val:0x02555500800001
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x5555000b0005fdff, 0x02555500800001, x1, 112, x2)

inst_48:
// rs1_h0_val == 65471, rs2_h0_val == 65534, rs2_h1_val == 16
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fffd000bffbf;  op2val:0x200000130010fffe
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x80fffd000bffbf, 0x200000130010fffe, x1, 120, x2)

inst_49:
// rs1_h0_val == 65503, rs2_h0_val == 65503, rs1_h1_val == 32
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000c0020ffdf;  op2val:0x050004000dffdf
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x80000c0020ffdf, 0x050004000dffdf, x1, 128, x2)

inst_50:
// rs1_h0_val == 65519, rs1_h1_val == 256, rs1_h2_val == 2
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff00020100ffef;  op2val:0x80000058000fffd
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xffff00020100ffef, 0x80000058000fffd, x1, 136, x2)

inst_51:
// rs1_h0_val == 65527, rs2_h2_val == 65531, rs1_h1_val == 2048
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff00130800fff7;  op2val:0xffbffffbfffb0010
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xffff00130800fff7, 0xffbffffbfffb0010, x1, 144, x2)

inst_52:
// rs1_h0_val == 65531, rs1_h2_val == 65519, rs2_h1_val == 8192, rs1_h1_val == 61439
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffefeffffffb;  op2val:0x11000b20005555
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xfbffffefeffffffb, 0x11000b20005555, x1, 152, x2)

inst_53:
// rs1_h0_val == 4096, rs1_h3_val == 65407, rs2_h1_val == 65519
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f000900111000;  op2val:0x8000007ffeffbff
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xff7f000900111000, 0x8000007ffeffbff, x1, 160, x2)

inst_54:
// rs1_h0_val == 128, rs2_h1_val == 49151
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffb000e0080;  op2val:0x0f0020bffffff7
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xfbfffffb000e0080, 0x0f0020bffffff7, x1, 168, x2)

inst_55:
// rs1_h0_val == 64, rs2_h0_val == 64, rs1_h3_val == 16
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000980000040;  op2val:0xf7ff0001000d0040
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x10000980000040, 0xf7ff0001000d0040, x1, 176, x2)

inst_56:
// rs1_h0_val == 32, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0afbff00050020;  op2val:0x0caaaa00200400
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x0afbff00050020, 0x0caaaa00200400, x1, 184, x2)

inst_57:
// rs1_h0_val == 16, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0002ffff0010;  op2val:0xfff70004fffd8000
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xfeff0002ffff0010, 0xfff70004fffd8000, x1, 192, x2)

inst_58:
// rs1_h0_val == 2, rs2_h0_val == 4096, rs2_h1_val == 65407, rs1_h1_val == 16384
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000c40000002;  op2val:0x08ffefff7f1000
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x40000c40000002, 0x08ffefff7f1000, x1, 200, x2)

inst_59:
// rs1_h0_val == 1, rs1_h3_val == 65533, rs2_h2_val == 512
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd000400070001;  op2val:0x0a0200000e000b
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xfffd000400070001, 0x0a0200000e000b, x1, 208, x2)

inst_60:
// rs2_h2_val == 65471, rs1_h2_val == 61439, rs2_h0_val == 65519
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfefff00130013;  op2val:0x00ffbf0080ffef
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xffbfefff00130013, 0x00ffbf0080ffef, x1, 216, x2)

inst_61:
// rs2_h2_val == 65503, rs1_h2_val == 0, rs1_h1_val == 128
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff00000080fffd;  op2val:0x2000ffdfffbf5555
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xfbff00000080fffd, 0x2000ffdfffbf5555, x1, 224, x2)

inst_62:
// rs2_h0_val == 65471, rs2_h2_val == 16384
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0012000d0009;  op2val:0x20040000040ffbf
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xfffe0012000d0009, 0x20040000040ffbf, x1, 232, x2)

inst_63:
// rs2_h0_val == 16384, rs2_h1_val == 1024, rs1_h1_val == 8192
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x1100012000ffbf;  op2val:0x02bfff04004000
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x1100012000ffbf, 0x02bfff04004000, x1, 240, x2)

inst_64:
// rs2_h0_val == 8192, rs1_h2_val == 65527
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfff700010020;  op2val:0x06000700122000
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xfffdfff700010020, 0x06000700122000, x1, 248, x2)

inst_65:
// rs2_h0_val == 2048, rs2_h1_val == 43690
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c000defffbfff;  op2val:0xfffd0003aaaa0800
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x0c000defffbfff, 0xfffd0003aaaa0800, x1, 256, x2)

inst_66:
// rs2_h0_val == 256, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d000cbfff0008;  op2val:0x10008000000b0100
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x0d000cbfff0008, 0x10008000000b0100, x1, 264, x2)

inst_67:
// rs2_h0_val == 32, rs1_h2_val == 16384, rs2_h2_val == 256
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x40400000050400;  op2val:0x800010000070020
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x40400000050400, 0x800010000070020, x1, 272, x2)

inst_68:
// rs2_h0_val == 8, rs2_h1_val == 65535, rs1_h3_val == 4096
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000f00110400;  op2val:0x4000ffdfffff0008
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x1000000f00110400, 0x4000ffdfffff0008, x1, 280, x2)

inst_69:
// rs2_h0_val == 0, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000befff0080;  op2val:0x0abfff40000000
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x40000befff0080, 0x0abfff40000000, x1, 288, x2)

inst_70:
// rs1_h3_val == 43690, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0009ffbf000c;  op2val:0x05020000085555
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xaaaa0009ffbf000c, 0x05020000085555, x1, 296, x2)

inst_71:
// rs1_h3_val == 49151, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff7fffb0012;  op2val:0x085555ff7f000d
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xbffffff7fffb0012, 0x085555ff7f000d, x1, 304, x2)

inst_72:
// rs1_h3_val == 57343, rs2_h2_val == 65534, rs1_h1_val == 8
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff700080005;  op2val:0x03fffe0400000d
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xdffffff700080005, 0x03fffe0400000d, x1, 312, x2)

inst_73:
// rs1_h3_val == 65023, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffdf02000800;  op2val:0xfbff000c00070200
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xfdffffdf02000800, 0xfbff000c00070200, x1, 320, x2)

inst_74:
// rs1_h3_val == 65531, rs2_h2_val == 8192
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb001300030003;  op2val:0xff7f200000200009
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xfffb001300030003, 0xff7f200000200009, x1, 328, x2)

inst_75:
// rs1_h3_val == 16384, rs1_h2_val == 65471
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000ffbf00000800;  op2val:0xff7f000720000005
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x4000ffbf00000800, 0xff7f000720000005, x1, 336, x2)

inst_76:
// rs1_h3_val == 32, rs2_h1_val == 65534, rs2_h0_val == 61439
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x20efff0009000a;  op2val:0x130100fffeefff
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x20efff0009000a, 0x130100fffeefff, x1, 344, x2)

inst_77:
// rs1_h3_val == 2, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x02000500050009;  op2val:0xfbffffef000b0200
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x02000500050009, 0xfbffffef000b0200, x1, 352, x2)

inst_78:
// rs1_h2_val == 57343, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffdfff0080000d;  op2val:0x10000090020ffdf
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xfdffdfff0080000d, 0x10000090020ffdf, x1, 360, x2)

inst_79:
// rs2_h2_val == 4096, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x03aaaafffbfdff;  op2val:0x10001000000eefff
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x03aaaafffbfdff, 0x10001000000eefff, x1, 368, x2)

inst_80:
// rs2_h2_val == 1024, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0006000e000a;  op2val:0x09040000090100
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xf7ff0006000e000a, 0x09040000090100, x1, 376, x2)

inst_81:
// rs1_h2_val == 65279, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffeff000afffb;  op2val:0x062000fbff0020
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xff7ffeff000afffb, 0x062000fbff0020, x1, 384, x2)

inst_82:
// rs2_h2_val == 8, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fff70080000d;  op2val:0x20000084000000e
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x80fff70080000d, 0x20000084000000e, x1, 392, x2)

inst_83:
// rs1_h2_val == 32768, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b80000800feff;  op2val:0x080004000d0007
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x0b80000800feff, 0x080004000d0007, x1, 400, x2)

inst_84:
// rs1_h2_val == 8192, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x05200000120010;  op2val:0x0e0009ffdf0006
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x05200000120010, 0x0e0009ffdf0006, x1, 408, x2)

inst_85:
// rs1_h2_val == 4096, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x001000000f000b;  op2val:0xeffff7ff000e5555
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x001000000f000b, 0xeffff7ff000e5555, x1, 416, x2)

inst_86:
// rs1_h2_val == 2048, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e0800ff7ffffe;  op2val:0x07feff00090006
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x0e0800ff7ffffe, 0x07feff00090006, x1, 424, x2)

inst_87:
// rs1_h2_val == 1024, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0400fefffffe;  op2val:0x07ffbffff70020
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xffef0400fefffffe, 0x07ffbffff70020, x1, 432, x2)

inst_88:
// rs1_h2_val == 512, rs1_h1_val == 65503
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x200200ffdf2000;  op2val:0x20fffb00100003
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x200200ffdf2000, 0x20fffb00100003, x1, 440, x2)

inst_89:
// rs2_h1_val == 61439, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000100122000;  op2val:0xfeff000befff000a
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x4000000100122000, 0xfeff000befff000a, x1, 448, x2)

inst_90:
// rs2_h1_val == 63487, rs1_h2_val == 21845
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x805555aaaafdff;  op2val:0xffbf0012f7ff1000
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x805555aaaafdff, 0xffbf0012f7ff1000, x1, 456, x2)

inst_91:
// rs1_h1_val == 32767, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d00407fff4000;  op2val:0x020005fffd0011
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x0d00407fff4000, 0x020005fffd0011, x1, 464, x2)

inst_92:
// rs1_h1_val == 57343, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0dfff7dfffefff;  op2val:0x08ffbf0012bfff
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x0dfff7dfffefff, 0x08ffbf0012bfff, x1, 472, x2)

inst_93:
// rs2_h1_val == 4096, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf00090008bfff;  op2val:0x555500801000000d
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xffdf00090008bfff, 0x555500801000000d, x1, 480, x2)

inst_94:
// rs1_h1_val == 63487, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x11fffff7ff7fff;  op2val:0xff7f555500045555
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x11fffff7ff7fff, 0xff7f555500045555, x1, 488, x2)

inst_95:
// rs2_h1_val == 256, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000cfbff000b;  op2val:0xfdff800001000400
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xf7ff000cfbff000b, 0xfdff800001000400, x1, 496, x2)

inst_96:
// rs1_h1_val == 65533, rs1_h2_val == 32
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000020fffd0013;  op2val:0xdffffeff00080008
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x20000020fffd0013, 0xdffffeff00080008, x1, 504, x2)

inst_97:
// rs2_h0_val == 43690, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffe000f5555;  op2val:0x0600080004aaaa
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xfff7fffe000f5555, 0x0600080004aaaa, x1, 512, x2)

inst_98:
// rs1_h2_val == 128, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x04008000038000;  op2val:0xfbff000a000e000c
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x04008000038000, 0xfbff000a000e000c, x1, 520, x2)

inst_99:
// rs1_h1_val == 1024, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffdf0400fff7;  op2val:0xffeffefffffe0008
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x02ffdf0400fff7, 0xffeffefffffe0008, x1, 528, x2)

inst_100:
// rs2_h1_val == 65279, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x05ffbfffdf0013;  op2val:0x015555feff000b
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x05ffbfffdf0013, 0x015555feff000b, x1, 536, x2)

inst_101:
// rs1_h1_val == 64, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0520000040dfff;  op2val:0xff7fdfffefff1000
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x0520000040dfff, 0xff7fdfffefff1000, x1, 544, x2)

inst_102:
// rs2_h2_val == 65533, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff700400040000c;  op2val:0x01fffd000e0013
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xfff700400040000c, 0x01fffd000e0013, x1, 552, x2)

inst_103:
// rs1_h1_val == 16, 
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f400000100400;  op2val:0x0100028000ffef
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xff7f400000100400, 0x0100028000ffef, x1, 560, x2)

inst_104:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val == 64511, rs2_h0_val == 65533, rs1_h3_val == 65519, rs1_h0_val == 65535, rs2_h3_val == 0
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffbff000dffff;  op2val:0x000005000dfffd
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xffeffbff000dffff, 0x000005000dfffd, x1, 568, x2)

inst_105:
// rs2_h3_val == 65519, rs2_h1_val == 1, rs1_h1_val == 49151, rs2_h0_val == 2, rs1_h3_val == 63487
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000fbfff0005;  op2val:0xffef000a00010002
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xf7ff000fbfff0005, 0xffef000a00010002, x1, 576, x2)

inst_106:
// rs2_h3_val == 65533, rs1_h2_val == 65503, rs1_h3_val == 32768, rs1_h0_val == 8, rs2_h1_val == 8
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffdf000b0008;  op2val:0xfffd00110008000a
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0x8000ffdf000b0008, 0xfffd00110008000a, x1, 584, x2)

inst_107:
// rs2_h3_val == 128, rs1_h1_val == 65534, rs2_h2_val == 65527, rs1_h3_val == 65503
// opcode: ursub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0006fffe000c;  op2val:0x80fff700400006
TEST_RR_OP(ursub16, x31, x30, x29, 0x0000000000000000, 0xffdf0006fffe000c, 0x80fff700400006, x1, 592, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 75*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
