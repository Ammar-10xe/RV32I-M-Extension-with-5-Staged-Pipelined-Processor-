
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smaltt instruction of the RISC-V RV64PZicsr extension for the smaltt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smaltt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x4, rs2==x8, rd==x4, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs2_h1_val == -1025, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h0_val == 0, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -21846, rs1_h0_val != rs2_h0_val, rs2_h2_val == 512
// opcode: smaltt ; op1:x4; op2:x8; dest:x4; op1val:0xfff9fff8aaaa8000;  op2val:0x3fff0200fbff0000
TEST_P64_PNN_OP(smaltt, x4, $rd_hi, x4, x8, 0x0000000000000000, $correctval_hi, 0xfff9fff8aaaa8000, 0x3fff0200fbff0000, x7, 0, x13)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x11, rs2==x10, rd==x20, rs1_h3_val == rs2_h3_val, rs1_h0_val == -33, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h1_val == 32, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 2048, rs2_h2_val == 1
// opcode: smaltt ; op1:x11; op2:x10; dest:x20; op1val:0x0009fffa0020ffdf;  op2val:0x0009000108000003
TEST_P64_PNN_OP(smaltt, x20, $rd_hi, x11, x10, 0x0000000000000000, $correctval_hi, 0x0009fffa0020ffdf, 0x0009000108000003, x7, 16, x13)

inst_2:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x6, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -5, rs2_h0_val == -16385, rs1_h3_val == -1025, rs1_h2_val == -16385, rs1_h1_val == -65, rs1_h0_val == -21846, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h2_val == 4
// opcode: smaltt ; op1:x31; op2:x31; dest:x6; op1val:0xfbffbfffffbfaaaa;  op2val:0xfffb0004fffcbfff
TEST_P64_PNN_OP(smaltt, x6, $rd_hi, x31, x31, 0x0000000000000000, $correctval_hi, 0xfbffbfffffbfaaaa, 0xfffb0004fffcbfff, x7, 32, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x22, rs2==x22, rd==x22, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 256, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h1_val == -9, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -33, rs1_h0_val == -1025, rs1_h2_val == -32768
// opcode: smaltt ; op1:x22; op2:x22; dest:x22; op1val:0x010080000007fbff;  op2val:0xfff6c000fff7ffdf
TEST_P64_PNN_OP(smaltt, x22, $rd_hi, x22, x22, 0x0000000000000000, $correctval_hi, 0x010080000007fbff, 0xfff6c000fff7ffdf, x7, 48, x13)

inst_4:
// rs2 == rd != rs1, rs1==x24, rs2==x18, rd==x18, rs1_h2_val == rs2_h2_val, rs2_h2_val == -4097, rs1_h1_val == 64, rs2_h3_val == 4096, rs1_h2_val == -4097, rs1_h0_val == 8, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 4096, rs2_h1_val == 8
// opcode: smaltt ; op1:x24; op2:x18; dest:x18; op1val:0x0003efff00400008;  op2val:0x1000efff00081000
TEST_P64_PNN_OP(smaltt, x18, $rd_hi, x24, x18, 0x0000000000000000, $correctval_hi, 0x0003efff00400008, 0x1000efff00081000, x7, 64, x13)

inst_5:
// rs1==x20, rs2==x24, rd==x28, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h2_val == -17, rs1_h2_val == 8, rs2_h3_val == 2048, rs1_h0_val == 4, rs1_h1_val == -1025, rs2_h0_val == 128
// opcode: smaltt ; op1:x20; op2:x24; dest:x28; op1val:0xfffa0008fbff0004;  op2val:0x0800ffefc0000080
TEST_P64_PNN_OP(smaltt, x28, $rd_hi, x20, x24, 0x0000000000000000, $correctval_hi, 0xfffa0008fbff0004, 0x0800ffefc0000080, x7, 80, x13)

inst_6:
// rs1==x0, rs2==x11, rd==x8, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h0_val == 256, rs1_h1_val == -1, rs1_h3_val == 8192, rs2_h2_val == 256
// opcode: smaltt ; op1:x0; op2:x11; dest:x8; op1val:0x20000009fffffff8;  op2val:0x00070100fffa0100
TEST_P64_PNN_OP(smaltt, x8, $rd_hi, x0, x11, 0x0000000000000000, $correctval_hi, 0x20000009fffffff8, 0x00070100fffa0100, x7, 96, x13)

inst_7:
// rs1==x28, rs2==x1, rd==x24, rs1_h1_val == rs2_h1_val, rs1_h3_val == 1024, rs2_h0_val == 32, rs2_h1_val == 0, rs2_h2_val == -257, rs1_h0_val == 16384, rs2_h3_val == 1024, rs1_h1_val == 0
// opcode: smaltt ; op1:x28; op2:x1; dest:x24; op1val:0x0400000800004000;  op2val:0x0400feff00000020
TEST_P64_PNN_OP(smaltt, x24, $rd_hi, x28, x1, 0x0000000000000000, $correctval_hi, 0x0400000800004000, 0x0400feff00000020, x7, 112, x13)

inst_8:
// rs1==x25, rs2==x26, rd==x14, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h1_val == 4, rs1_h2_val == -33, rs2_h3_val == -17, rs1_h3_val == -16385, rs2_h2_val == 4096, rs1_h1_val == -2049, rs2_h0_val == 8192
// opcode: smaltt ; op1:x25; op2:x26; dest:x14; op1val:0xbfffffdff7ff4000;  op2val:0xffef100000042000
TEST_P64_PNN_OP(smaltt, x14, $rd_hi, x25, x26, 0x0000000000000000, $correctval_hi, 0xbfffffdff7ff4000, 0xffef100000042000, x7, 128, x13)

inst_9:
// rs1==x29, rs2==x12, rd==x30, rs1_h0_val == rs2_h0_val, rs2_h0_val == -1, rs1_h2_val == 32767, rs2_h3_val == 128, rs2_h1_val == 8192, rs1_h0_val == -1
// opcode: smaltt ; op1:x29; op2:x12; dest:x30; op1val:0x04007fffffbfffff;  op2val:0x0080fffc2000ffff
TEST_P64_PNN_OP(smaltt, x30, $rd_hi, x29, x12, 0x0000000000000000, $correctval_hi, 0x04007fffffbfffff, 0x0080fffc2000ffff, x7, 144, x13)

inst_10:
// rs1==x5, rs2==x9, rd==x2, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h3_val == -65, rs2_h0_val == -257, rs1_h2_val == 0, rs1_h1_val == 4, rs1_h0_val == 2, rs2_h1_val == 4096
// opcode: smaltt ; op1:x5; op2:x9; dest:x2; op1val:0x0005000000040002;  op2val:0xffbffffc1000feff
TEST_P64_PNN_OP(smaltt, x2, $rd_hi, x5, x9, 0x0000000000000000, $correctval_hi, 0x0005000000040002, 0xffbffffc1000feff, x7, 160, x13)

inst_11:
// rs1==x16, rs2==x2, rd==x26, rs2_h3_val == -21846, rs2_h0_val == 16, rs1_h3_val == -4097, rs2_h2_val == -32768, rs1_h0_val == 128, rs1_h2_val == -257, rs1_h1_val == -257
// opcode: smaltt ; op1:x16; op2:x2; dest:x26; op1val:0xeffffefffeff0080;  op2val:0xaaaa800008000010
TEST_P64_PNN_OP(smaltt, x26, $rd_hi, x16, x2, 0x0000000000000000, $correctval_hi, 0xeffffefffeff0080, 0xaaaa800008000010, x7, 176, x13)

inst_12:
// rs1==x27, rs2==x17, rd==x12, rs2_h3_val == 21845, rs1_h1_val == 512, rs2_h0_val == -4097, rs1_h3_val == 8, rs2_h2_val == 128
// opcode: smaltt ; op1:x27; op2:x17; dest:x12; op1val:0x0008bfff0200fff8;  op2val:0x555500800800efff
TEST_P64_PNN_OP(smaltt, x12, $rd_hi, x27, x17, 0x0000000000000000, $correctval_hi, 0x0008bfff0200fff8, 0x555500800800efff, x7, 192, x13)

inst_13:
// rs1==x9, rs2==x29, rd==x16, rs2_h3_val == 32767, rs1_h3_val == 128, rs1_h1_val == 16384, rs2_h1_val == -2049, rs1_h2_val == 32, rs2_h2_val == 32767
// opcode: smaltt ; op1:x9; op2:x29; dest:x16; op1val:0x0080002040003fff;  op2val:0x7fff7ffff7fffffa
TEST_P64_PNN_OP(smaltt, x16, $rd_hi, x9, x29, 0x0000000000000000, $correctval_hi, 0x0080002040003fff, 0x7fff7ffff7fffffa, x7, 208, x13)

inst_14:
// rs1==x21, rs2==x3, rd==x10, rs2_h3_val == -16385, rs1_h0_val == -65, rs1_h1_val == 8192, rs1_h3_val == -513, rs2_h0_val == -3, rs2_h1_val == 512
// opcode: smaltt ; op1:x21; op2:x3; dest:x10; op1val:0xfdfffeff2000ffbf;  op2val:0xbfff00010200fffd
TEST_P64_PNN_OP(smaltt, x10, $rd_hi, x21, x3, 0x0000000000000000, $correctval_hi, 0xfdfffeff2000ffbf, 0xbfff00010200fffd, x7, 224, x13)

inst_15:
// rs1==x30, rs2==x23, rs2_h3_val == -8193, rs2_h2_val == -16385, rs1_h1_val == -3, rs1_h3_val == -1, rs1_h2_val == 256
// opcode: smaltt ; op1:x30; op2:x23; dest:x4; op1val:0xffff0100fffdaaaa;  op2val:0xdfffbffffff90009
TEST_P64_PNN_OP(smaltt, x4, $rd_hi, x30, x23, 0x0000000000000000, $correctval_hi, 0xffff0100fffdaaaa, 0xdfffbffffff90009, x7, 240, x11)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_16:
// rs1==x10, rs2==x21, rs2_h3_val == -4097, rs2_h2_val == -8193, rs2_h0_val == -8193, rs1_h2_val == -2049
// opcode: smaltt ; op1:x10; op2:x21; dest:x26; op1val:0x0100f7ff20004000;  op2val:0xefffdffffff9dfff
TEST_P64_PNN_OP(smaltt, x26, $rd_hi, x10, x21, 0x0000000000000000, $correctval_hi, 0x0100f7ff20004000, 0xefffdffffff9dfff, x9, 0, x11)

inst_17:
// rs1==x12, rs2==x27, rs2_h3_val == -2049, rs1_h1_val == -513, rs2_h1_val == -2, rs1_h3_val == -129, rs2_h0_val == -5
// opcode: smaltt ; op1:x12; op2:x27; dest:x21; op1val:0xff7f7ffffdffffdf;  op2val:0xf7ff7ffffffefffb
TEST_P64_PNN_OP(smaltt, x21, $rd_hi, x12, x27, 0x0000000000000000, $correctval_hi, 0xff7f7ffffdffffdf, 0xf7ff7ffffffefffb, x9, 16, x11)

inst_18:
// rs1==x19, rs2==x7, rs2_h3_val == -1025, rs1_h0_val == -5, rs2_h0_val == 1, rs1_h1_val == 2048, rs2_h1_val == -513, rs2_h2_val == -2, rs1_h3_val == -17
// opcode: smaltt ; op1:x19; op2:x7; dest:x3; op1val:0xffefc0000800fffb;  op2val:0xfbfffffefdff0001
TEST_P64_PNN_OP(smaltt, x3, $rd_hi, x19, x7, 0x0000000000000000, $correctval_hi, 0xffefc0000800fffb, 0xfbfffffefdff0001, x9, 32, x11)

inst_19:
// rs1==x2, rs2==x19, rs2_h3_val == -513, rs1_h2_val == 2, rs2_h1_val == -33, rs1_h1_val == -8193, rs1_h3_val == -9
// opcode: smaltt ; op1:x2; op2:x19; dest:x14; op1val:0xfff70002dfff0002;  op2val:0xfdff1000ffdf0007
TEST_P64_PNN_OP(smaltt, x14, $rd_hi, x2, x19, 0x0000000000000000, $correctval_hi, 0xfff70002dfff0002, 0xfdff1000ffdf0007, x9, 48, x11)

inst_20:
// rs1==x26, rs2==x0, rs2_h3_val == -257, rs1_h3_val == -21846, rs2_h1_val == 16384, rs1_h1_val == -4097
// opcode: smaltt ; op1:x26; op2:x0; dest:x15; op1val:0xaaaa7fffeffffffc;  op2val:0xfefffff840000005
TEST_P64_PNN_OP(smaltt, x15, $rd_hi, x26, x0, 0x0000000000000000, $correctval_hi, 0xaaaa7fffeffffffc, 0xfefffff840000005, x9, 64, x11)

inst_21:
// rs1==x23, rs2==x25, rs2_h3_val == -129, rs2_h1_val == -21846, rs1_h2_val == 4096
// opcode: smaltt ; op1:x23; op2:x25; dest:x5; op1val:0xc0001000fff83fff;  op2val:0xff7f8000aaaa0080
TEST_P64_PNN_OP(smaltt, x5, $rd_hi, x23, x25, 0x0000000000000000, $correctval_hi, 0xc0001000fff83fff, 0xff7f8000aaaa0080, x9, 80, x11)

inst_22:
// rs1==x1, rs2==x5, rs2_h3_val == -33, rs2_h1_val == 256, rs1_h3_val == 64, rs1_h0_val == -257
// opcode: smaltt ; op1:x1; op2:x5; dest:x27; op1val:0x00400008fefffeff;  op2val:0xffdffeff0100fff9
TEST_P64_PNN_OP(smaltt, x27, $rd_hi, x1, x5, 0x0000000000000000, $correctval_hi, 0x00400008fefffeff, 0xffdffeff0100fff9, x9, 96, x11)

inst_23:
// rs1==x7, rs2==x15, rs2_h3_val == -9, rs2_h1_val == -8193
// opcode: smaltt ; op1:x7; op2:x15; dest:x6; op1val:0x040080000004c000;  op2val:0xfff70006dfffdfff
TEST_P64_PNN_OP(smaltt, x6, $rd_hi, x7, x15, 0x0000000000000000, $correctval_hi, 0x040080000004c000, 0xfff70006dfffdfff, x9, 112, x11)

inst_24:
// rs1==x8, rs2==x6, rs2_h3_val == -3, rs2_h2_val == -2049, rs2_h0_val == 4, rs1_h1_val == -16385, rs1_h0_val == 512
// opcode: smaltt ; op1:x8; op2:x6; dest:x31; op1val:0xc000efffbfff0200;  op2val:0xfffdf7fffff60004
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x8, x6, 0x0000000000000000, $correctval_hi, 0xc000efffbfff0200, 0xfffdf7fffff60004, x9, 128, x11)

inst_25:
// rs1==x3, rs2==x30, rs2_h3_val == -2, rs1_h2_val == 64, rs1_h0_val == -513, rs2_h0_val == -129
// opcode: smaltt ; op1:x3; op2:x30; dest:x16; op1val:0x20000040fff6fdff;  op2val:0xfffe8000fff7ff7f
TEST_P64_PNN_OP(smaltt, x16, $rd_hi, x3, x30, 0x0000000000000000, $correctval_hi, 0x20000040fff6fdff, 0xfffe8000fff7ff7f, x9, 144, x11)

inst_26:
// rs1==x15, rs2==x4, rs2_h3_val == -32768, rs1_h1_val == 2
// opcode: smaltt ; op1:x15; op2:x4; dest:x10; op1val:0x010000060002aaaa;  op2val:0x80000080fff90004
TEST_P64_PNN_OP(smaltt, x10, $rd_hi, x15, x4, 0x0000000000000000, $correctval_hi, 0x010000060002aaaa, 0x80000080fff90004, x9, 160, x11)

inst_27:
// rs1==x13, rs2==x14, rs2_h3_val == 16384, rs2_h0_val == -2049, rs2_h2_val == -3
// opcode: smaltt ; op1:x13; op2:x14; dest:x28; op1val:0x3fffbfff00030008;  op2val:0x4000fffdc000f7ff
TEST_P64_PNN_OP(smaltt, x28, $rd_hi, x13, x14, 0x0000000000000000, $correctval_hi, 0x3fffbfff00030008, 0x4000fffdc000f7ff, x9, 176, x11)

inst_28:
// rs1==x17, rs2==x28, rs2_h3_val == 8192, rs2_h2_val == -65, rs1_h0_val == 1, rs1_h3_val == 16384, rs2_h0_val == 512
// opcode: smaltt ; op1:x17; op2:x28; dest:x7; op1val:0x4000fffc08000001;  op2val:0x2000ffbf00000200
TEST_P64_PNN_OP(smaltt, x7, $rd_hi, x17, x28, 0x0000000000000000, $correctval_hi, 0x4000fffc08000001, 0x2000ffbf00000200, x9, 192, x11)

inst_29:
// rs1==x18, rs2==x20, rs2_h3_val == 512, rs1_h2_val == -2, rs1_h3_val == 4096
// opcode: smaltt ; op1:x18; op2:x20; dest:x25; op1val:0x1000fffec0000005;  op2val:0x020080000003f7ff
TEST_P64_PNN_OP(smaltt, x25, $rd_hi, x18, x20, 0x0000000000000000, $correctval_hi, 0x1000fffec0000005, 0x020080000003f7ff, x9, 208, x11)

inst_30:
// rs1==x6, rs2==x13, rs2_h3_val == 256, rs1_h3_val == -5, rs2_h2_val == 8192, rs1_h2_val == 128
// opcode: smaltt ; op1:x6; op2:x13; dest:x30; op1val:0xfffb00800000fdff;  op2val:0x010020003ffffff8
TEST_P64_PNN_OP(smaltt, x30, $rd_hi, x6, x13, 0x0000000000000000, $correctval_hi, 0xfffb00800000fdff, 0x010020003ffffff8, x9, 224, x2)

inst_31:
// rs1==x14, rs2==x16, rs2_h3_val == 64, rs1_h1_val == -5, rs2_h1_val == 16, rs2_h2_val == -129
// opcode: smaltt ; op1:x14; op2:x16; dest:x17; op1val:0x00080000fffb0080;  op2val:0x0040ff7f00103fff
TEST_P64_PNN_OP(smaltt, x17, $rd_hi, x14, x16, 0x0000000000000000, $correctval_hi, 0x00080000fffb0080, 0x0040ff7f00103fff, x9, 240, x2)

inst_32:
// rs2_h3_val == 32, rs1_h3_val == 21845, rs2_h2_val == -1025, rs2_h1_val == 32, rs1_h1_val == 8
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x5555bfff0008fdff;  op2val:0x0020fbff0020bfff
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x5555bfff0008fdff, 0x0020fbff0020bfff, x9, 256, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs2_h3_val == 16, rs2_h0_val == 2048
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0009fffa0000fff8;  op2val:0x0010000902000800
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0009fffa0000fff8, 0x0010000902000800, x1, 0, x2)

inst_34:
// rs1_h1_val == -2, rs1_h2_val == -1
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0007fffffffe0080;  op2val:0xffef00090200f7ff
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0007fffffffe0080, 0xffef00090200f7ff, x1, 16, x2)

inst_35:
// rs1_h1_val == -32768, rs2_h0_val == 64
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf80000006;  op2val:0xfdff0001aaaa0040
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdf80000006, 0xfdff0001aaaa0040, x1, 32, x2)

inst_36:
// rs1_h1_val == 4096, rs2_h1_val == -4097
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfdffc0001000feff;  op2val:0xfeff0006efffefff
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdffc0001000feff, 0xfeff0006efffefff, x1, 48, x2)

inst_37:
// rs1_h1_val == 1024, rs1_h0_val == 8192, rs1_h2_val == 8192, rs2_h2_val == 16
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0005200004002000;  op2val:0xff7f001010000100
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0005200004002000, 0xff7f001010000100, x1, 64, x2)

inst_38:
// rs1_h1_val == 256, rs2_h2_val == 16384, rs2_h3_val == 0, rs1_h0_val == 0
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0080feff01000000;  op2val:0x000040000006fff9
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080feff01000000, 0x000040000006fff9, x1, 80, x2)

inst_39:
// rs1_h1_val == 128, rs2_h1_val == 2, rs2_h0_val == 1024, rs1_h0_val == 64
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffff900800040;  op2val:0xbfff7fff00020400
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3ffffff900800040, 0xbfff7fff00020400, x1, 96, x2)

inst_40:
// rs1_h1_val == 16, rs1_h2_val == -5
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0040fffb00100009;  op2val:0xffdf020000200080
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040fffb00100009, 0xffdf020000200080, x1, 112, x2)

inst_41:
// rs1_h1_val == 1, rs1_h2_val == 2048, rs1_h0_val == 4096, rs1_h3_val == -257, rs2_h1_val == -32768, rs2_h3_val == 4
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfeff080000011000;  op2val:0x0004f7ff80000005
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeff080000011000, 0x0004f7ff80000005, x1, 128, x2)

inst_42:
// rs1_h0_val == 21845, rs2_h1_val == 32767
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfff8f7ff01005555;  op2val:0x004000807fff0020
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff8f7ff01005555, 0x004000807fff0020, x1, 144, x2)

inst_43:
// rs1_h0_val == 32767, rs2_h2_val == -1, rs1_h2_val == 4
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x00050004f7ff7fff;  op2val:0x0006fffffff60000
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00050004f7ff7fff, 0x0006fffffff60000, x1, 160, x2)

inst_44:
// rs1_h0_val == -16385, rs2_h2_val == 32, rs1_h1_val == 32767, rs2_h0_val == -513
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfbffc0007fffbfff;  op2val:0xfeff0020fdfffdff
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffc0007fffbfff, 0xfeff0020fdfffdff, x1, 176, x2)

inst_45:
// rs1_h0_val == -8193, rs1_h3_val == 1
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x00010800fff6dfff;  op2val:0xfffc0010c000fffa
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00010800fff6dfff, 0xfffc0010c000fffa, x1, 192, x2)

inst_46:
// rs1_h0_val == -4097, rs2_h2_val == 1024
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfff80008fff8efff;  op2val:0x000504000000fffb
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff80008fff8efff, 0x000504000000fffb, x1, 208, x2)

inst_47:
// rs1_h0_val == -2049, rs2_h1_val == 1, rs1_h3_val == 32767, rs2_h2_val == 21845, rs1_h2_val == -9
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff70000f7ff;  op2val:0x0020555500010007
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7ffffff70000f7ff, 0x0020555500010007, x1, 224, x2)

inst_48:
// rs1_h0_val == -129, rs2_h1_val == 1024, rs1_h2_val == 512, rs2_h0_val == 16384
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x010002000800ff7f;  op2val:0xfffcfffa04004000
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x010002000800ff7f, 0xfffcfffa04004000, x1, 240, x2)

inst_49:
// rs1_h0_val == -17, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x7fff00200008ffef;  op2val:0x10000004fff8fff8
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fff00200008ffef, 0x10000004fff8fff8, x1, 256, x2)

inst_50:
// rs1_h0_val == -9, rs2_h0_val == -1025, rs1_h3_val == -33
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xffdf80000000fff7;  op2val:0x0005effffff8fbff
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdf80000000fff7, 0x0005effffff8fbff, x1, 272, x2)

inst_51:
// rs1_h0_val == -3, rs2_h0_val == -65, rs1_h2_val == 1024
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfff704000800fffd;  op2val:0x00044000ffdfffbf
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff704000800fffd, 0x00044000ffdfffbf, x1, 288, x2)

inst_52:
// rs1_h0_val == -2, rs2_h2_val == 0, rs2_h3_val == 8
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0003efff0005fffe;  op2val:0x0008000000031000
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0003efff0005fffe, 0x0008000000031000, x1, 304, x2)

inst_53:
// rs1_h0_val == 2048, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0001008001000800;  op2val:0x0800c000f7ff0006
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001008001000800, 0x0800c000f7ff0006, x1, 320, x2)

inst_54:
// rs1_h0_val == 1024, rs2_h2_val == 2048, rs1_h3_val == -2049
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffc00080400;  op2val:0xfffe08004000ffff
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7fffffc00080400, 0xfffe08004000ffff, x1, 336, x2)

inst_55:
// rs1_h0_val == 256, rs2_h1_val == -65
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x04000002ffff0100;  op2val:0xc0005555ffbf0010
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x04000002ffff0100, 0xc0005555ffbf0010, x1, 352, x2)

inst_56:
// rs2_h1_val == -1, rs2_h0_val == 8
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffc0020ffef;  op2val:0xfffbfbffffff0008
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3ffffffc0020ffef, 0xfffbfbffffff0008, x1, 368, x2)

inst_57:
// rs2_h0_val == -21846, rs1_h1_val == -9
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x00400006fff70007;  op2val:0xfffefffe0800aaaa
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00400006fff70007, 0xfffefffe0800aaaa, x1, 384, x2)

inst_58:
// rs2_h0_val == 21845, rs2_h1_val == -16385, rs1_h3_val == 32
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0020fefffff74000;  op2val:0x00000200bfff5555
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020fefffff74000, 0x00000200bfff5555, x1, 400, x2)

inst_59:
// rs2_h0_val == 32767, rs2_h1_val == -5, rs1_h3_val == -32768
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffcf7ffffef;  op2val:0xc0000001fffb7fff
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000fffcf7ffffef, 0xc0000001fffb7fff, x1, 416, x2)

inst_60:
// rs2_h0_val == -17, rs2_h2_val == -33, rs1_h1_val == -129, rs1_h3_val == 2
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0002fffbff7fff7f;  op2val:0xfeffffdf3fffffef
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0002fffbff7fff7f, 0xfeffffdf3fffffef, x1, 432, x2)

inst_61:
// rs2_h0_val == -9, rs2_h3_val == 1
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfff70006fffc4000;  op2val:0x000100038000fff7
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff70006fffc4000, 0x000100038000fff7, x1, 448, x2)

inst_62:
// rs2_h0_val == -2, rs1_h2_val == -1025
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfbffefffff7f;  op2val:0x10008000f7fffffe
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffbfbffefffff7f, 0x10008000f7fffffe, x1, 464, x2)

inst_63:
// rs2_h0_val == -32768, rs1_h2_val == 16384
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfff940000100f7ff;  op2val:0xeffffbff00068000
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff940000100f7ff, 0xeffffbff00068000, x1, 480, x2)

inst_64:
// rs2_h0_val == 2, rs1_h2_val == -513
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0100fdfffff9fbff;  op2val:0x0800008000060002
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0100fdfffff9fbff, 0x0800008000060002, x1, 496, x2)

inst_65:
// rs1_h3_val == -8193, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xdfff7fff20000002;  op2val:0x4000200000000010
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfff7fff20000002, 0x4000200000000010, x1, 512, x2)

inst_66:
// rs1_h0_val == 32, rs1_h2_val == 16, rs2_h2_val == -9
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0002001004000020;  op2val:0xfefffff7bfff0004
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0002001004000020, 0xfefffff7bfff0004, x1, 528, x2)

inst_67:
// rs1_h0_val == 16, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffc00000010;  op2val:0x200080000000fff9
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffcfffc00000010, 0x200080000000fff9, x1, 544, x2)

inst_68:
// rs1_h3_val == -65, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00100100dfff;  op2val:0xfdff0100fffedfff
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbf00100100dfff, 0xfdff0100fffedfff, x1, 560, x2)

inst_69:
// rs2_h3_val == 2, rs1_h3_val == 16
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0010c0003fffffff;  op2val:0x000200013ffffff6
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0010c0003fffffff, 0x000200013ffffff6, x1, 576, x2)

inst_70:
// rs1_h3_val == -3, rs2_h2_val == 64
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfffd100004002000;  op2val:0xfffe00404000fffa
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffd100004002000, 0xfffe00404000fffa, x1, 592, x2)

inst_71:
// rs1_h3_val == 512, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0200ffdf20000000;  op2val:0x3ffffff9fff71000
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200ffdf20000000, 0x3ffffff9fff71000, x1, 608, x2)

inst_72:
// rs2_h2_val == -513, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xbffffdffc000fff7;  op2val:0x0800fdff0002fffa
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbffffdffc000fff7, 0x0800fdff0002fffa, x1, 624, x2)

inst_73:
// rs1_h3_val == 4, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x00040040fffffffb;  op2val:0xff7ffbffc0001000
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00040040fffffffb, 0xff7ffbffc0001000, x1, 640, x2)

inst_74:
// rs1_h3_val == 0, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x00000009f7ff4000;  op2val:0x0007002008000020
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000009f7ff4000, 0x0007002008000020, x1, 656, x2)

inst_75:
// rs2_h2_val == -5, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x2000004000203fff;  op2val:0x0800fffbefff0100
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000004000203fff, 0x0800fffbefff0100, x1, 672, x2)

inst_76:
// rs1_h2_val == -21846, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfffbaaaafffa0400;  op2val:0x2000f7ff80000005
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffbaaaafffa0400, 0x2000f7ff80000005, x1, 688, x2)

inst_77:
// rs1_h2_val == 21845, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff555500010007;  op2val:0x3ffffff600200100
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ff555500010007, 0x3ffffff600200100, x1, 704, x2)

inst_78:
// rs1_h2_val == -8193, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0005dfff0007fdff;  op2val:0x1000200000004000
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0005dfff0007fdff, 0x1000200000004000, x1, 720, x2)

inst_79:
// rs1_h2_val == -129, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfdffff7f0010dfff;  op2val:0xfdff20008000fffd
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdffff7f0010dfff, 0xfdff20008000fffd, x1, 736, x2)

inst_80:
// rs1_h2_val == -65, rs2_h1_val == 21845
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0004ffbf10000100;  op2val:0x8000fff955550040
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0004ffbf10000100, 0x8000fff955550040, x1, 752, x2)

inst_81:
// rs1_h2_val == -17, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xc000ffeffff8c000;  op2val:0x0400bfff0100fbff
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xc000ffeffff8c000, 0x0400bfff0100fbff, x1, 768, x2)

inst_82:
// rs2_h2_val == 8, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfffa1000fff7fffc;  op2val:0x0007000800070800
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffa1000fff7fffc, 0x0007000800070800, x1, 784, x2)

inst_83:
// rs2_h2_val == 2, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xdfffc0000010dfff;  op2val:0x08000002fffff7ff
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfffc0000010dfff, 0x08000002fffff7ff, x1, 800, x2)

inst_84:
// rs2_h1_val == -257, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0008bffffbff;  op2val:0x0004fffafeffdfff
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffb0008bffffbff, 0x0004fffafeffdfff, x1, 816, x2)

inst_85:
// rs2_h1_val == -129, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x3fff400002000006;  op2val:0xfff73fffff7f5555
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3fff400002000006, 0xfff73fffff7f5555, x1, 832, x2)

inst_86:
// rs2_h1_val == -17, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0000fffcdfffffef;  op2val:0xf7fffff7ffef0100
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000fffcdfffffef, 0xf7fffff7ffef0100, x1, 848, x2)

inst_87:
// rs1_h2_val == 1, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x100000010002fff6;  op2val:0x0400f7ff08005555
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x100000010002fff6, 0x0400f7ff08005555, x1, 864, x2)

inst_88:
// rs2_h3_val == -1, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0080fff70400fbff;  op2val:0xffff002000090080
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080fff70400fbff, 0xffff002000090080, x1, 880, x2)

inst_89:
// rs2_h1_val == -3, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffc00028000;  op2val:0x0003ff7ffffdefff
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfefffffc00028000, 0x0003ff7ffffdefff, x1, 896, x2)

inst_90:
// rs1_h1_val == 21845, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0005fff955550020;  op2val:0xfeffc0003fff0004
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0005fff955550020, 0xfeffc0003fff0004, x1, 912, x2)

inst_91:
// rs1_h2_val == -3, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0200fffd4000bfff;  op2val:0xfffcff7ffdffbfff
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200fffd4000bfff, 0xfffcff7ffdffbfff, x1, 928, x2)

inst_92:
// rs2_h2_val == -21846, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x8000000200000100;  op2val:0x0006aaaa0020fff7
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000000200000100, 0x0006aaaa0020fff7, x1, 944, x2)

inst_93:
// rs1_h3_val == -2, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfffefff608000008;  op2val:0xfdffffbf40000004
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffefff608000008, 0xfdffffbf40000004, x1, 960, x2)

inst_94:
// rs2_h1_val == 128, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfdff000600090040;  op2val:0xfffb04000080fffe
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdff000600090040, 0xfffb04000080fffe, x1, 976, x2)

inst_95:
// rs2_h1_val == 64, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x010000007ffffffd;  op2val:0xfbfffffe0040c000
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x010000007ffffffd, 0xfbfffffe0040c000, x1, 992, x2)

inst_96:
// rs1_h1_val == -33, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x00040010ffdfffff;  op2val:0xdfff0100fefffffe
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00040010ffdfffff, 0xdfff0100fefffffe, x1, 1008, x2)

inst_97:
// rs1_h1_val == -17, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xfffe7fffffef0001;  op2val:0x8000000000040800
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffe7fffffef0001, 0x8000000000040800, x1, 1024, x2)

inst_98:
// rs1_h3_val == 2048, 
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x0800fff608004000;  op2val:0x0080ff7fff7f1000
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800fff608004000, 0x0080ff7fff7f1000, x1, 1040, x2)

inst_99:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 256, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h1_val == -9, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -33, rs1_h0_val == -1025, rs1_h2_val == -32768
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0x010080000007fbff;  op2val:0xfff6c000fff7ffdf
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x010080000007fbff, 0xfff6c000fff7ffdf, x1, 1056, x2)

inst_100:
// rs2_h3_val == -257, rs1_h3_val == -21846, rs2_h1_val == 16384, rs1_h1_val == -4097
// opcode: smaltt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa7fffeffffffc;  op2val:0xfefffff840000005
TEST_P64_PNN_OP(smaltt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaa7fffeffffffc, 0xfefffff840000005, x1, 1072, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x9_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 136*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
