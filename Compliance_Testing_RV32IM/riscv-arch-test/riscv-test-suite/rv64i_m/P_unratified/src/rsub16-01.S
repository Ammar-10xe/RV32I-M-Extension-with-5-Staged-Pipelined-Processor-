
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rsub16 instruction of the RISC-V RV64PZicsr extension for the rsub16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",rsub16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1 == rd != rs2, rs1==x29, rs2==x28, rd==x29, rs1_h0_val == -32768, rs1_h3_val == rs2_h3_val, rs2_h3_val == -257, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h3_val == -257, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 4096, rs2_h2_val == 21845
// opcode: rsub16 ; op1:x29; op2:x28; dest:x29; op1val:0xfeff000600038000;  op2val:0xfeff55551000fffa
TEST_RR_OP(rsub16, x29, x29, x28, 0x0000000000000000, 0xfeff000600038000, 0xfeff55551000fffa, x9, 0, x13)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x27, rs2==x18, rd==x24, rs1_h3_val != rs2_h3_val, rs2_h1_val == 2, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h0_val == 21845, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h3_val == 4096, rs1_h3_val == -513, rs2_h2_val == 1024, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val == -1025
// opcode: rsub16 ; op1:x27; op2:x18; dest:x24; op1val:0xfdfffffc3ffffbff;  op2val:0x1000040000025555
TEST_RR_OP(rsub16, x24, x27, x18, 0x0000000000000000, 0xfdfffffc3ffffbff, 0x1000040000025555, x9, 8, x13)

inst_2:
// rs1 == rs2 != rd, rs1==x24, rs2==x24, rd==x17, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h3_val == -1025, rs2_h1_val == 32767, rs1_h3_val == 4, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h2_val == -5, rs2_h0_val == -257, rs1_h1_val == 2, rs1_h2_val == -1025, rs1_h0_val == 0
// opcode: rsub16 ; op1:x24; op2:x24; dest:x17; op1val:0x04fbff00020000;  op2val:0xfbfffffb7ffffeff
TEST_RR_OP(rsub16, x17, x24, x24, 0x0000000000000000, 0x04fbff00020000, 0xfbfffffb7ffffeff, x9, 16, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x31, rs2==x31, rd==x31, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 128, rs1_h2_val == -21846, rs1_h1_val == 16, rs2_h2_val == 16384, rs2_h1_val == 8192, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: rsub16 ; op1:x31; op2:x31; dest:x31; op1val:0x80aaaa00100001;  op2val:0x0640002000fffa
TEST_RR_OP(rsub16, x31, x31, x31, 0x0000000000000000, 0x80aaaa00100001, 0x0640002000fffa, x9, 24, x13)

inst_4:
// rs2 == rd != rs1, rs1==x19, rs2==x21, rd==x21, rs1_h2_val == rs2_h2_val, rs2_h2_val == -129, rs1_h3_val == 0, rs1_h0_val == 256, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == -65, rs1_h2_val == -129, rs2_h3_val == -1, rs1_h1_val == -9
// opcode: rsub16 ; op1:x19; op2:x21; dest:x21; op1val:0x00ff7ffff70100;  op2val:0xffffff7ffffaffbf
TEST_RR_OP(rsub16, x21, x19, x21, 0x0000000000000000, 0x00ff7ffff70100, 0xffffff7ffffaffbf, x9, 32, x13)

inst_5:
// rs1==x3, rs2==x8, rd==x16, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h3_val == 16, rs2_h1_val == 256, rs2_h0_val == 0, rs1_h2_val == 21845, rs1_h1_val == 1, rs2_h3_val == 1
// opcode: rsub16 ; op1:x3; op2:x8; dest:x16; op1val:0x10555500013fff;  op2val:0x01fff901000000
TEST_RR_OP(rsub16, x16, x3, x8, 0x0000000000000000, 0x10555500013fff, 0x01fff901000000, x9, 40, x13)

inst_6:
// rs1==x11, rs2==x4, rd==x10, rs1_h1_val == rs2_h1_val, rs2_h0_val == 64, rs1_h3_val == 1024, rs1_h0_val == -3, rs1_h2_val == 0, rs2_h1_val == -9, rs2_h3_val == -4097
// opcode: rsub16 ; op1:x11; op2:x4; dest:x10; op1val:0x4000000fff7fffd;  op2val:0xefffc000fff70040
TEST_RR_OP(rsub16, x10, x11, x4, 0x0000000000000000, 0x4000000fff7fffd, 0xefffc000fff70040, x9, 48, x13)

inst_7:
// rs1==x8, rs2==x6, rd==x30, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h2_val == -1, rs1_h2_val == 1024, rs2_h3_val == -5, rs1_h3_val == 21845, rs2_h0_val == -17, rs1_h0_val == -4097
// opcode: rsub16 ; op1:x8; op2:x6; dest:x30; op1val:0x55550400c000efff;  op2val:0xfffbffff3fffffef
TEST_RR_OP(rsub16, x30, x8, x6, 0x0000000000000000, 0x55550400c000efff, 0xfffbffff3fffffef, x9, 56, x13)

inst_8:
// rs1==x23, rs2==x12, rd==x18, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -4097, rs1_h1_val == 512, rs1_h0_val == 16, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 1024
// opcode: rsub16 ; op1:x23; op2:x12; dest:x18; op1val:0x103fff02000010;  op2val:0x010009efff0400
TEST_RR_OP(rsub16, x18, x23, x12, 0x0000000000000000, 0x103fff02000010, 0x010009efff0400, x9, 64, x13)

inst_9:
// rs1==x0, rs2==x27, rd==x6, rs1_h0_val == rs2_h0_val, rs1_h2_val == 256, rs2_h1_val == -65, rs2_h0_val == -513, rs1_h3_val == -2049, rs2_h3_val == 8, rs1_h0_val == -513, rs2_h2_val == 2
// opcode: rsub16 ; op1:x0; op2:x27; dest:x6; op1val:0xf7ff01000007fdff;  op2val:0x080002ffbffdff
TEST_RR_OP(rsub16, x6, x0, x27, 0x0000000000000000, 0xf7ff01000007fdff, 0x080002ffbffdff, x9, 72, x13)

inst_10:
// rs1==x4, rs2==x20, rd==x5, rs2_h3_val == -21846, rs2_h2_val == -33, rs1_h3_val == 32
// opcode: rsub16 ; op1:x4; op2:x20; dest:x5; op1val:0x20fffc0002c000;  op2val:0xaaaaffdf00090006
TEST_RR_OP(rsub16, x5, x4, x20, 0x0000000000000000, 0x20fffc0002c000, 0xaaaaffdf00090006, x9, 80, x13)

inst_11:
// rs1==x16, rs2==x17, rd==x1, rs2_h3_val == 21845, rs2_h1_val == -21846, rs2_h0_val == 16, rs1_h3_val == 64, rs1_h2_val == 1, rs1_h1_val == 21845, rs1_h0_val == 2
// opcode: rsub16 ; op1:x16; op2:x17; dest:x1; op1val:0x40000155550002;  op2val:0x55553fffaaaa0010
TEST_RR_OP(rsub16, x1, x16, x17, 0x0000000000000000, 0x40000155550002, 0x55553fffaaaa0010, x9, 88, x13)

inst_12:
// rs1==x20, rs2==x19, rd==x2, rs2_h3_val == 32767, rs1_h0_val == -129, rs2_h1_val == -16385, rs1_h1_val == 16384, rs2_h2_val == -32768
// opcode: rsub16 ; op1:x20; op2:x19; dest:x2; op1val:0x05fbff4000ff7f;  op2val:0x7fff8000bfffffef
TEST_RR_OP(rsub16, x2, x20, x19, 0x0000000000000000, 0x05fbff4000ff7f, 0x7fff8000bfffffef, x9, 96, x13)

inst_13:
// rs1==x15, rs2==x0, rd==x23, rs2_h3_val == -16385, rs2_h2_val == 8192, rs2_h1_val == 1, rs2_h0_val == -33, rs1_h1_val == -21846
// opcode: rsub16 ; op1:x15; op2:x0; dest:x23; op1val:0x5555fff9aaaafffa;  op2val:0xbfff20000001ffdf
TEST_RR_OP(rsub16, x23, x15, x0, 0x0000000000000000, 0x5555fff9aaaafffa, 0xbfff20000001ffdf, x9, 104, x13)

inst_14:
// rs1==x2, rs2==x29, rd==x14, rs2_h3_val == -8193, rs1_h2_val == 4096, rs2_h0_val == -21846, rs2_h1_val == -17, rs1_h3_val == -65, rs1_h1_val == -16385, rs2_h2_val == 64
// opcode: rsub16 ; op1:x2; op2:x29; dest:x14; op1val:0xffbf1000bfff0010;  op2val:0xdfff0040ffefaaaa
TEST_RR_OP(rsub16, x14, x2, x29, 0x0000000000000000, 0xffbf1000bfff0010, 0xdfff0040ffefaaaa, x9, 112, x13)

inst_15:
// rs1==x17, rs2==x3, rd==x11, rs2_h3_val == -2049, rs2_h0_val == 8192, rs1_h2_val == 2048, rs2_h1_val == 2048
// opcode: rsub16 ; op1:x17; op2:x3; dest:x11; op1val:0x090800fffcff7f;  op2val:0xf7ff000508002000
TEST_RR_OP(rsub16, x11, x17, x3, 0x0000000000000000, 0x090800fffcff7f, 0xf7ff000508002000, x9, 120, x13)

inst_16:
// rs1==x7, rs2==x16, rd==x12, rs2_h3_val == -513, rs1_h1_val == -257, rs2_h2_val == 2048, rs1_h3_val == -9
// opcode: rsub16 ; op1:x7; op2:x16; dest:x12; op1val:0xfff7fffafeff0010;  op2val:0xfdff08000003fffc
TEST_RR_OP(rsub16, x12, x7, x16, 0x0000000000000000, 0xfff7fffafeff0010, 0xfdff08000003fffc, x9, 128, x13)

inst_17:
// rs1==x21, rs2==x26, rd==x28, rs2_h3_val == -129, rs1_h2_val == -32768, rs2_h0_val == -2049, rs1_h0_val == -257, rs1_h3_val == 2048
// opcode: rsub16 ; op1:x21; op2:x26; dest:x28; op1val:0x80080000005feff;  op2val:0xff7f00070005f7ff
TEST_RR_OP(rsub16, x28, x21, x26, 0x0000000000000000, 0x80080000005feff, 0xff7f00070005f7ff, x9, 136, x17)
RVTEST_SIGBASE(x16,signature_x16_0)

inst_18:
// rs1==x14, rs2==x1, rd==x27, rs2_h3_val == -65, rs2_h1_val == 4, rs2_h2_val == -4097, rs1_h3_val == 8, rs2_h0_val == -2, rs1_h2_val == -5
// opcode: rsub16 ; op1:x14; op2:x1; dest:x27; op1val:0x08fffb00010000;  op2val:0xffbfefff0004fffe
TEST_RR_OP(rsub16, x27, x14, x1, 0x0000000000000000, 0x08fffb00010000, 0xffbfefff0004fffe, x16, 0, x17)

inst_19:
// rs1==x5, rs2==x7, rd==x0, rs2_h3_val == -33, rs1_h2_val == 8192, rs1_h3_val == -2, rs1_h1_val == -129, rs1_h0_val == -17
// opcode: rsub16 ; op1:x5; op2:x7; dest:x0; op1val:0xfffe2000ff7fffef;  op2val:0xffdffff81000fdff
TEST_RR_OP(rsub16, x0, x5, x7, 0x0000000000000000, 0xfffe2000ff7fffef, 0xffdffff81000fdff, x16, 8, x17)

inst_20:
// rs1==x12, rs2==x2, rd==x9, rs2_h3_val == -17, rs2_h0_val == 8, rs2_h1_val == -257, rs1_h2_val == -1, rs2_h2_val == 512, rs1_h3_val == -3
// opcode: rsub16 ; op1:x12; op2:x2; dest:x9; op1val:0xfffdffffc000fffc;  op2val:0xffef0200feff0008
TEST_RR_OP(rsub16, x9, x12, x2, 0x0000000000000000, 0xfffdffffc000fffc, 0xffef0200feff0008, x16, 16, x17)

inst_21:
// rs1==x6, rs2==x23, rd==x7, rs2_h3_val == -9, rs2_h2_val == 4096
// opcode: rsub16 ; op1:x6; op2:x23; dest:x7; op1val:0xfeff0001fff7fdff;  op2val:0xfff71000c0000040
TEST_RR_OP(rsub16, x7, x6, x23, 0x0000000000000000, 0xfeff0001fff7fdff, 0xfff71000c0000040, x16, 24, x17)

inst_22:
// rs1==x13, rs2==x5, rd==x3, rs2_h3_val == -3, rs1_h1_val == -33, rs2_h0_val == -1025, rs1_h2_val == -513, rs1_h0_val == 21845
// opcode: rsub16 ; op1:x13; op2:x5; dest:x3; op1val:0xfefffdffffdf5555;  op2val:0xfffd5555ffbffbff
TEST_RR_OP(rsub16, x3, x13, x5, 0x0000000000000000, 0xfefffdffffdf5555, 0xfffd5555ffbffbff, x16, 32, x17)

inst_23:
// rs1==x26, rs2==x22, rd==x15, rs2_h3_val == -2, rs1_h1_val == -32768, rs2_h0_val == 32, rs2_h1_val == -129, rs1_h2_val == 128
// opcode: rsub16 ; op1:x26; op2:x22; dest:x15; op1val:0x1000808000efff;  op2val:0xfffe0800ff7f0020
TEST_RR_OP(rsub16, x15, x26, x22, 0x0000000000000000, 0x1000808000efff, 0xfffe0800ff7f0020, x16, 40, x17)

inst_24:
// rs1==x22, rs2==x9, rd==x4, rs2_h3_val == -32768, rs1_h3_val == 256, rs2_h2_val == -17, rs1_h0_val == -2049, rs1_h1_val == -65
// opcode: rsub16 ; op1:x22; op2:x9; dest:x4; op1val:0x100ff7fffbff7ff;  op2val:0x8000ffef0001c000
TEST_RR_OP(rsub16, x4, x22, x9, 0x0000000000000000, 0x100ff7fffbff7ff, 0x8000ffef0001c000, x16, 48, x17)

inst_25:
// rs1==x30, rs2==x25, rd==x13, rs2_h3_val == 16384, rs2_h1_val == -1025, rs1_h2_val == -4097, rs1_h1_val == -1, rs2_h2_val == -21846
// opcode: rsub16 ; op1:x30; op2:x25; dest:x13; op1val:0xfdffeffffffffff9;  op2val:0x4000aaaafbff0400
TEST_RR_OP(rsub16, x13, x30, x25, 0x0000000000000000, 0xfdffeffffffffff9, 0x4000aaaafbff0400, x16, 56, x17)

inst_26:
// rs1==x10, rs2==x14, rd==x25, rs2_h3_val == 8192, rs2_h0_val == 16384, rs2_h1_val == 512, rs1_h1_val == 128, rs1_h3_val == 2
// opcode: rsub16 ; op1:x10; op2:x14; dest:x25; op1val:0x02fffc0080fff8;  op2val:0x2000040002004000
TEST_RR_OP(rsub16, x25, x10, x14, 0x0000000000000000, 0x02fffc0080fff8, 0x2000040002004000, x16, 64, x17)

inst_27:
// rs1==x18, rs2==x30, rd==x19, rs2_h3_val == 2048, rs1_h3_val == 32767, rs2_h1_val == -5, rs1_h1_val == -4097, rs1_h0_val == -16385, rs2_h2_val == 32767
// opcode: rsub16 ; op1:x18; op2:x30; dest:x19; op1val:0x7ffffff8efffbfff;  op2val:0x8007ffffffbffdf
TEST_RR_OP(rsub16, x19, x18, x30, 0x0000000000000000, 0x7ffffff8efffbfff, 0x8007ffffffbffdf, x16, 72, x17)

inst_28:
// rs1==x9, rs2==x10, rd==x26, rs2_h3_val == 1024, rs2_h1_val == -3, rs1_h2_val == 4, rs1_h3_val == 4096, rs1_h0_val == -33
// opcode: rsub16 ; op1:x9; op2:x10; dest:x26; op1val:0x100000040002ffdf;  op2val:0x4005555fffd0400
TEST_RR_OP(rsub16, x26, x9, x10, 0x0000000000000000, 0x100000040002ffdf, 0x4005555fffd0400, x16, 80, x17)

inst_29:
// rs1==x25, rs2==x15, rd==x8, rs2_h3_val == 512, rs2_h2_val == 128
// opcode: rsub16 ; op1:x25; op2:x15; dest:x8; op1val:0xfffc00040200feff;  op2val:0x2000080fff8ffef
TEST_RR_OP(rsub16, x8, x25, x15, 0x0000000000000000, 0xfffc00040200feff, 0x2000080fff8ffef, x16, 88, x17)

inst_30:
// rs1==x1, rs2==x11, rd==x22, rs2_h3_val == 256, rs1_h1_val == -5, rs2_h2_val == 32, rs2_h0_val == -129
// opcode: rsub16 ; op1:x1; op2:x11; dest:x22; op1val:0x800fffbfffbfffc;  op2val:0x10000200006ff7f
TEST_RR_OP(rsub16, x22, x1, x11, 0x0000000000000000, 0x800fffbfffbfffc, 0x10000200006ff7f, x16, 96, x17)

inst_31:
// rs1==x28, rs2==x13, rd==x20, rs2_h3_val == 128, rs1_h3_val == -21846
// opcode: rsub16 ; op1:x28; op2:x13; dest:x20; op1val:0xaaaa8000fffa0010;  op2val:0x800200c000ffdf
TEST_RR_OP(rsub16, x20, x28, x13, 0x0000000000000000, 0xaaaa8000fffa0010, 0x800200c000ffdf, x16, 104, x17)

inst_32:
// rs1_h1_val == -3, rs2_h1_val == 0, rs2_h0_val == 32767
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff90006fffd0002;  op2val:0xffdfaaaa00007fff
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xfff90006fffd0002, 0xffdfaaaa00007fff, x16, 112, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs1_h1_val == -2, rs2_h2_val == -65, rs2_h0_val == -1, rs1_h2_val == -16385
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000bffffffe0001;  op2val:0x1000ffbffffbffff
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xc000bffffffe0001, 0x1000ffbffffbffff, x1, 0, x2)

inst_34:
// rs1_h1_val == 8192, rs1_h2_val == 16384, rs1_h0_val == 2048, rs2_h0_val == 2048, rs1_h3_val == -17
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef400020000800;  op2val:0xbfffffef00000800
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xffef400020000800, 0xbfffffef00000800, x1, 8, x2)

inst_35:
// rs1_h1_val == 4096, rs2_h1_val == -513, rs2_h0_val == -4097, rs2_h2_val == -9, rs1_h2_val == 32, rs1_h3_val == -4097
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff00201000fff9;  op2val:0xfff7fff7fdffefff
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xefff00201000fff9, 0xfff7fff7fdffefff, x1, 16, x2)

inst_36:
// rs1_h1_val == 2048, rs1_h0_val == -21846
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x093fff0800aaaa;  op2val:0x80fffafff90800
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x093fff0800aaaa, 0x80fffafff90800, x1, 24, x2)

inst_37:
// rs1_h1_val == 1024, rs2_h0_val == 256
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff40000400aaaa;  op2val:0x804000fff60100
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xfeff40000400aaaa, 0x804000fff60100, x1, 32, x2)

inst_38:
// rs1_h1_val == 256, rs1_h0_val == 32, rs2_h2_val == 8, rs2_h1_val == 16
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fbff01000020;  op2val:0x01000800100010
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xfff9fbff01000020, 0x01000800100010, x1, 40, x2)

inst_39:
// rs1_h1_val == 64, rs2_h2_val == -1025, rs1_h3_val == -8193, rs1_h2_val == 32767
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff7fff00400001;  op2val:0x06fbff10003fff
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xdfff7fff00400001, 0x06fbff10003fff, x1, 48, x2)

inst_40:
// rs1_h1_val == 32, rs2_h3_val == 2, rs2_h0_val == 128
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fff600200020;  op2val:0x02fffabfff0080
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x00fff600200020, 0x02fffabfff0080, x1, 56, x2)

inst_41:
// rs1_h1_val == 8, rs1_h2_val == -8193, rs2_h1_val == 8
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9dfff00080020;  op2val:0x4000555500080006
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xfff9dfff00080020, 0x4000555500080006, x1, 64, x2)

inst_42:
// rs1_h1_val == 4, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0720000004c000;  op2val:0xffbffff9bffffffe
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x0720000004c000, 0xffbffff9bffffffe, x1, 72, x2)

inst_43:
// rs1_h1_val == 0, rs1_h0_val == -9, rs1_h2_val == 512, rs2_h1_val == -2049, rs1_h3_val == 1, rs2_h0_val == 4096
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0102000000fff7;  op2val:0x3fff0007f7ff1000
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x0102000000fff7, 0x3fff0007f7ff1000, x1, 80, x2)

inst_44:
// rs1_h0_val == 32767, rs1_h2_val == -65
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffbf08007fff;  op2val:0xfffdffdffdff0080
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x5555ffbf08007fff, 0xfffdffdffdff0080, x1, 88, x2)

inst_45:
// rs1_h0_val == -8193, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x80004000009dfff;  op2val:0x081000fffa0010
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x80004000009dfff, 0x081000fffa0010, x1, 96, x2)

inst_46:
// rs1_h0_val == -65, rs2_h1_val == -32768, rs1_h3_val == -32768, rs2_h2_val == -257
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffff0009ffbf;  op2val:0xfbfffeff80005555
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x8000ffff0009ffbf, 0xfbfffeff80005555, x1, 104, x2)

inst_47:
// rs1_h0_val == -5, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x100dffffffafffb;  op2val:0xfffeffef2000fffa
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x100dffffffafffb, 0xfffeffef2000fffa, x1, 112, x2)

inst_48:
// rs1_h0_val == -2, rs2_h3_val == 32
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf55550010fffe;  op2val:0x200007fffa0040
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xffbf55550010fffe, 0x200007fffa0040, x1, 120, x2)

inst_49:
// rs1_h0_val == 16384, rs1_h2_val == -257
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x800feff00104000;  op2val:0xfff7fffbfff9ffdf
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x800feff00104000, 0xfff7fffbfff9ffdf, x1, 128, x2)

inst_50:
// rs1_h0_val == 8192, rs1_h1_val == -17
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff3fffffef2000;  op2val:0xfbffffff00100010
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xfdff3fffffef2000, 0xfbffffff00100010, x1, 136, x2)

inst_51:
// rs1_h0_val == 4096, rs1_h3_val == 16384, rs2_h2_val == 4
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000efff3fff1000;  op2val:0xfeff00047fff0100
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x4000efff3fff1000, 0xfeff00047fff0100, x1, 144, x2)

inst_52:
// rs1_h0_val == 1024, rs2_h0_val == 4
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000080000400;  op2val:0xc0000080fff70004
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x10000080000400, 0xc0000080fff70004, x1, 152, x2)

inst_53:
// rs2_h1_val == -1, rs1_h1_val == -1025, rs1_h3_val == -33
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0004fbff0000;  op2val:0x3fffffefffff7fff
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xffdf0004fbff0000, 0x3fffffefffff7fff, x1, 160, x2)

inst_54:
// rs2_h0_val == -16385, rs1_h2_val == 64, rs1_h0_val == 128
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x400040ffdf0080;  op2val:0x5555aaaa0800bfff
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x400040ffdf0080, 0x5555aaaa0800bfff, x1, 168, x2)

inst_55:
// rs2_h0_val == -8193, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x40003fffefff8000;  op2val:0xfffb00080200dfff
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x40003fffefff8000, 0xfffb00080200dfff, x1, 176, x2)

inst_56:
// rs2_h0_val == -9, rs2_h2_val == -3
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x400020000009fff6;  op2val:0xeffffffdfff6fff7
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x400020000009fff6, 0xeffffffdfff6fff7, x1, 184, x2)

inst_57:
// rs2_h0_val == -5, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0009fff8feff;  op2val:0xc00000080010fffb
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xffdf0009fff8feff, 0xc00000080010fffb, x1, 192, x2)

inst_58:
// rs2_h0_val == -3, rs2_h1_val == 1024
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffb0020dfff;  op2val:0x800000080400fffd
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xaaaafffb0020dfff, 0x800000080400fffd, x1, 200, x2)

inst_59:
// rs2_h0_val == -32768, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x051000fffa5555;  op2val:0x8000ffffefff8000
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x051000fffa5555, 0x8000ffffefff8000, x1, 208, x2)

inst_60:
// rs2_h0_val == 512, rs2_h2_val == -2049, rs1_h1_val == -2049
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa3ffff7ffdfff;  op2val:0xfffcf7fffffb0200
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xaaaa3ffff7ffdfff, 0xfffcf7fffffb0200, x1, 216, x2)

inst_61:
// rs2_h0_val == 2, rs1_h0_val == 512
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9aaaa00200200;  op2val:0x08ffdffffa0002
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xfff9aaaa00200200, 0x08ffdffffa0002, x1, 224, x2)

inst_62:
// rs2_h0_val == 1, rs2_h2_val == 256
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff10004000fffa;  op2val:0x8000010000080001
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xdfff10004000fffa, 0x8000010000080001, x1, 232, x2)

inst_63:
// rs1_h3_val == -16385, rs1_h0_val == 8, rs2_h1_val == 64
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff000640000008;  op2val:0x400000600405555
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xbfff000640000008, 0x400000600405555, x1, 240, x2)

inst_64:
// rs1_h0_val == 64, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffaaaa00040040;  op2val:0xfff7200000070040
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xbfffaaaa00040040, 0xfff7200000070040, x1, 248, x2)

inst_65:
// rs1_h3_val == -1025, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff3ffffffbfffe;  op2val:0xdfffffdf00400400
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xfbff3ffffffbfffe, 0xdfffffdf00400400, x1, 256, x2)

inst_66:
// rs1_h0_val == 4, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff72000ffbf0004;  op2val:0xffdfaaaa10000005
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xfff72000ffbf0004, 0xffdfaaaa10000005, x1, 264, x2)

inst_67:
// rs1_h3_val == -129, rs2_h3_val == 0, rs2_h2_val == -513
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffbfff6fffb;  op2val:0x00fdfff7ffffef
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xff7ffffbfff6fffb, 0x00fdfff7ffffef, x1, 272, x2)

inst_68:
// rs2_h3_val == 64, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff00200010fffd;  op2val:0x400800fff7efff
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xf7ff00200010fffd, 0x400800fff7efff, x1, 280, x2)

inst_69:
// rs2_h3_val == 16, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00400006;  op2val:0x10ffff08008000
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xfdffffff00400006, 0x10ffff08008000, x1, 288, x2)

inst_70:
// rs2_h2_val == -16385, rs1_h0_val == -1
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff00060005ffff;  op2val:0x800bffffdff7fff
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xfeff00060005ffff, 0x800bffffdff7fff, x1, 296, x2)

inst_71:
// rs2_h2_val == -8193, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffa00088000;  op2val:0xefffdfff00084000
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xfffafffa00088000, 0xefffdfff00084000, x1, 304, x2)

inst_72:
// rs1_h3_val == 512, rs2_h1_val == -33
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000007fff7fff7;  op2val:0x024000ffdfffef
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x2000007fff7fff7, 0x024000ffdfffef, x1, 312, x2)

inst_73:
// rs1_h3_val == -1, rs1_h2_val == 2
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff00023fff0008;  op2val:0x0800078000feff
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xffff00023fff0008, 0x0800078000feff, x1, 320, x2)

inst_74:
// rs2_h2_val == -2, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000fbff4000feff;  op2val:0xaaaafffe1000ffdf
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xc000fbff4000feff, 0xaaaafffe1000ffdf, x1, 328, x2)

inst_75:
// rs1_h2_val == -2049, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fff7ffff7f0040;  op2val:0x05fffeaaaa0200
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xf7fff7ffff7f0040, 0x05fffeaaaa0200, x1, 336, x2)

inst_76:
// rs1_h2_val == -33, rs1_h1_val == 32767
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffdf7ffffffa;  op2val:0x8000100ffdf0006
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xffbfffdf7ffffffa, 0x8000100ffdf0006, x1, 344, x2)

inst_77:
// rs2_h2_val == 16, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x020200fefffff6;  op2val:0xfffc00100007fffc
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x020200fefffff6, 0xfffc00100007fffc, x1, 352, x2)

inst_78:
// rs1_h2_val == -17, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x03ffefc000f7ff;  op2val:0x3fff0003ffff1000
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x03ffefc000f7ff, 0x3fff0003ffff1000, x1, 360, x2)

inst_79:
// rs2_h3_val == 4, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff000901000001;  op2val:0x04fff9fffa0001
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xfeff000901000001, 0x04fff9fffa0001, x1, 368, x2)

inst_80:
// rs1_h2_val == -9, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fff700070005;  op2val:0xffeff7fffffcfff9
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xfff9fff700070005, 0xffeff7fffffcfff9, x1, 376, x2)

inst_81:
// rs1_h2_val == -3, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x07fffd3fff0003;  op2val:0x400003ffef2000
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x07fffd3fff0003, 0x400003ffef2000, x1, 384, x2)

inst_82:
// rs2_h1_val == 21845, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffdffdf0100;  op2val:0xc00000105555bfff
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xffdffffdffdf0100, 0xc00000105555bfff, x1, 392, x2)

inst_83:
// rs2_h1_val == -8193, rs1_h1_val == -8193
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffcdfffffdf;  op2val:0x5555aaaadfff1000
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x3ffffffcdfffffdf, 0x5555aaaadfff1000, x1, 400, x2)

inst_84:
// rs1_h2_val == 16, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0010fff60009;  op2val:0xfeff00060009ffbf
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xfbff0010fff60009, 0xfeff00060009ffbf, x1, 408, x2)

inst_85:
// rs1_h2_val == 8, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x100008aaaabfff;  op2val:0xfffcfff60001fffc
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x100008aaaabfff, 0xfffcfff60001fffc, x1, 416, x2)

inst_86:
// rs2_h1_val == -2, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffff700203fff;  op2val:0xfffbaaaafffe0001
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xeffffff700203fff, 0xfffbaaaafffe0001, x1, 424, x2)

inst_87:
// rs2_h1_val == 16384, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x400008000800fff7;  op2val:0xfffb004040001000
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x400008000800fff7, 0xfffb004040001000, x1, 432, x2)

inst_88:
// rs1_h2_val == -2, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x07fffe0006fffb;  op2val:0xf7ffffdffffa0400
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x07fffe0006fffb, 0xf7ffffdffffa0400, x1, 440, x2)

inst_89:
// rs1_h3_val == 8192, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x200001000009fff9;  op2val:0x7fffffef0006c000
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x200001000009fff9, 0x7fffffef0006c000, x1, 448, x2)

inst_90:
// rs1_h3_val == -5, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb200080004000;  op2val:0x200fffc00040020
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xfffb200080004000, 0x200fffc00040020, x1, 456, x2)

inst_91:
// rs1_h1_val == -513, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0200fdfffffe;  op2val:0x2000004002000000
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x3fff0200fdfffffe, 0x2000004002000000, x1, 464, x2)

inst_92:
// rs2_h1_val == 128, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x20008000fff8fffa;  op2val:0x097fff0080ffff
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x20008000fff8fffa, 0x097fff0080ffff, x1, 472, x2)

inst_93:
// rs2_h1_val == 32, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x010008aaaa3fff;  op2val:0x800000800020fdff
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x010008aaaa3fff, 0x800000800020fdff, x1, 480, x2)

inst_94:
// rs2_h2_val == 1, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x400040020000200;  op2val:0xfff70001ffdff7ff
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x400040020000200, 0xfff70001ffdff7ff, x1, 488, x2)

inst_95:
// rs2_h2_val == 0, 
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x10ffbffffcfffe;  op2val:0xfeff00001000fffe
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x10ffbffffcfffe, 0xfeff00001000fffe, x1, 496, x2)

inst_96:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h3_val == -1025, rs2_h1_val == 32767, rs1_h3_val == 4, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h2_val == -5, rs2_h0_val == -257, rs1_h1_val == 2, rs1_h2_val == -1025, rs1_h0_val == 0
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fbff00020000;  op2val:0xfbfffffb7ffffeff
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x04fbff00020000, 0xfbfffffb7ffffeff, x1, 504, x2)

inst_97:
// rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 128, rs1_h2_val == -21846, rs1_h1_val == 16, rs2_h2_val == 16384, rs2_h1_val == 8192, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0x80aaaa00100001;  op2val:0x0640002000fffa
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0x80aaaa00100001, 0x0640002000fffa, x1, 512, x2)

inst_98:
// rs1_h0_val == rs2_h0_val, rs1_h2_val == 256, rs2_h1_val == -65, rs2_h0_val == -513, rs1_h3_val == -2049, rs2_h3_val == 8, rs1_h0_val == -513, rs2_h2_val == 2
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff01000007fdff;  op2val:0x080002ffbffdff
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xf7ff01000007fdff, 0x080002ffbffdff, x1, 520, x2)

inst_99:
// rs2_h3_val == -33, rs1_h2_val == 8192, rs1_h3_val == -2, rs1_h1_val == -129, rs1_h0_val == -17
// opcode: rsub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe2000ff7fffef;  op2val:0xffdffff81000fdff
TEST_RR_OP(rsub16, x31, x30, x29, 0x0000000000000000, 0xfffe2000ff7fffef, 0xffdffff81000fdff, x1, 528, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x16_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 67*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
