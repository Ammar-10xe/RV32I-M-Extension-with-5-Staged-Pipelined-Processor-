
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pkbt16 instruction of the RISC-V RV64PZicsr extension for the pkbt16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pkbt16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x3, rs2==x26, rd==x3, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 64511, rs2_h1_val == 512, rs2_h3_val == 49151, rs1_h2_val == 512
// opcode: pkbt16 ; op1:x3; op2:x26; dest:x3; op1val:0x0f0200fbff0000;  op2val:0xbfff000a02000006
TEST_RR_OP(pkbt16, x3, x3, x26, 0x0000000000000000, 0x0f0200fbff0000, 0xbfff000a02000006, x2, 0, x6)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x18, rs2==x17, rd==x12, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h3_val == 256, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h2_val == 4, rs1_h3_val == 256, rs1_h0_val == 65527, rs1_h2_val == 256, rs2_h0_val == 65279
// opcode: pkbt16 ; op1:x18; op2:x17; dest:x12; op1val:0x10001000013fff7;  op2val:0x1000004000bfeff
TEST_RR_OP(pkbt16, x12, x18, x17, 0x0000000000000000, 0x10001000013fff7, 0x1000004000bfeff, x2, 8, x6)

inst_2:
// rs1 == rs2 != rd, rs1==x19, rs2==x19, rd==x27, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val == 49151, rs2_h1_val == 128, rs1_h2_val == 65534, rs2_h3_val == 65407, rs2_h2_val == 65534, rs2_h0_val == 65023, rs1_h3_val == 61439
// opcode: pkbt16 ; op1:x19; op2:x19; dest:x27; op1val:0xeffffffebfff000e;  op2val:0xff7ffffe0080fdff
TEST_RR_OP(pkbt16, x27, x19, x19, 0x0000000000000000, 0xeffffffebfff000e, 0xff7ffffe0080fdff, x2, 16, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 1024, rs2_h1_val == 8192, rs1_h3_val == 65531, rs2_h0_val == 8192, rs1_h0_val == 65023, rs2_h2_val == 65023, rs1_h1_val == 8192, rs1_h2_val == 128
// opcode: pkbt16 ; op1:x1; op2:x1; dest:x1; op1val:0xfffb00802000fdff;  op2val:0x400fdff20002000
TEST_RR_OP(pkbt16, x1, x1, x1, 0x0000000000000000, 0xfffb00802000fdff, 0x400fdff20002000, x2, 24, x6)

inst_4:
// rs2 == rd != rs1, rs1==x14, rs2==x15, rd==x15, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == 65531, rs1_h1_val == 65407, rs1_h3_val == 16, rs2_h1_val == 63487
// opcode: pkbt16 ; op1:x14; op2:x15; dest:x15; op1val:0x100012ff7f0007;  op2val:0xfffb0011f7ff0007
TEST_RR_OP(pkbt16, x15, x14, x15, 0x0000000000000000, 0x100012ff7f0007, 0xfffb0011f7ff0007, x2, 32, x6)

inst_5:
// rs1==x22, rs2==x21, rd==x11, rs2_h3_val == 43690, rs1_h2_val == 61439, rs1_h0_val == 65535, rs2_h1_val == 21845, rs1_h3_val == 2, rs1_h1_val == 32
// opcode: pkbt16 ; op1:x22; op2:x21; dest:x11; op1val:0x02efff0020ffff;  op2val:0xaaaa00035555000c
TEST_RR_OP(pkbt16, x11, x22, x21, 0x0000000000000000, 0x02efff0020ffff, 0xaaaa00035555000c, x2, 40, x6)

inst_6:
// rs1==x24, rs2==x4, rd==x18, rs2_h3_val == 21845, rs1_h3_val == 65279, rs1_h0_val == 256
// opcode: pkbt16 ; op1:x24; op2:x4; dest:x18; op1val:0xfeff000a00030100;  op2val:0x55550006000b000d
TEST_RR_OP(pkbt16, x18, x24, x4, 0x0000000000000000, 0xfeff000a00030100, 0x55550006000b000d, x2, 48, x6)

inst_7:
// rs1==x7, rs2==x9, rd==x22, rs2_h3_val == 32767, rs1_h2_val == 57343, rs1_h1_val == 2, rs1_h0_val == 49151, rs2_h1_val == 2, rs2_h0_val == 32767
// opcode: pkbt16 ; op1:x7; op2:x9; dest:x22; op1val:0x12dfff0002bfff;  op2val:0x7fff000700027fff
TEST_RR_OP(pkbt16, x22, x7, x9, 0x0000000000000000, 0x12dfff0002bfff, 0x7fff000700027fff, x2, 56, x6)

inst_8:
// rs1==x21, rs2==x0, rd==x14, rs2_h3_val == 57343, rs1_h0_val == 43690, rs1_h2_val == 65519, rs2_h0_val == 57343, rs2_h1_val == 65407, rs2_h2_val == 32768
// opcode: pkbt16 ; op1:x21; op2:x0; dest:x14; op1val:0x0effef0005aaaa;  op2val:0xdfff8000ff7fdfff
TEST_RR_OP(pkbt16, x14, x21, x0, 0x0000000000000000, 0x0effef0005aaaa, 0xdfff8000ff7fdfff, x2, 64, x6)

inst_9:
// rs1==x29, rs2==x14, rd==x19, rs2_h3_val == 61439, rs2_h2_val == 57343, rs1_h1_val == 65519
// opcode: pkbt16 ; op1:x29; op2:x14; dest:x19; op1val:0x060080ffef000d;  op2val:0xefffdfff000c0012
TEST_RR_OP(pkbt16, x19, x29, x14, 0x0000000000000000, 0x060080ffef000d, 0xefffdfff000c0012, x2, 72, x6)

inst_10:
// rs1==x20, rs2==x27, rd==x5, rs2_h3_val == 63487, rs1_h1_val == 32767, rs1_h3_val == 65527, rs1_h0_val == 32767, rs2_h0_val == 43690, rs2_h2_val == 65471, rs1_h2_val == 32767
// opcode: pkbt16 ; op1:x20; op2:x27; dest:x5; op1val:0xfff77fff7fff7fff;  op2val:0xf7ffffbf0200aaaa
TEST_RR_OP(pkbt16, x5, x20, x27, 0x0000000000000000, 0xfff77fff7fff7fff, 0xf7ffffbf0200aaaa, x2, 80, x6)

inst_11:
// rs1==x23, rs2==x11, rd==x31, rs2_h3_val == 64511, rs2_h0_val == 65503, rs1_h3_val == 512, rs1_h1_val == 65534, rs2_h2_val == 63487, rs1_h0_val == 32768
// opcode: pkbt16 ; op1:x23; op2:x11; dest:x31; op1val:0x200000ffffe8000;  op2val:0xfbfff7ff0200ffdf
TEST_RR_OP(pkbt16, x31, x23, x11, 0x0000000000000000, 0x200000ffffe8000, 0xfbfff7ff0200ffdf, x2, 88, x6)

inst_12:
// rs1==x11, rs2==x24, rd==x20, rs2_h3_val == 65023, rs1_h3_val == 4, rs2_h2_val == 65503, rs2_h0_val == 64511, rs1_h0_val == 512
// opcode: pkbt16 ; op1:x11; op2:x24; dest:x20; op1val:0x04ffef00060200;  op2val:0xfdffffdf0005fbff
TEST_RR_OP(pkbt16, x20, x11, x24, 0x0000000000000000, 0x04ffef00060200, 0xfdffffdf0005fbff, x2, 96, x6)

inst_13:
// rs1==x27, rs2==x10, rd==x21, rs2_h3_val == 65279, rs2_h1_val == 1024, rs1_h1_val == 32768, rs2_h0_val == 21845, rs2_h2_val == 65407, rs1_h3_val == 1
// opcode: pkbt16 ; op1:x27; op2:x10; dest:x21; op1val:0x01000a80000200;  op2val:0xfeffff7f04005555
TEST_RR_OP(pkbt16, x21, x27, x10, 0x0000000000000000, 0x01000a80000200, 0xfeffff7f04005555, x2, 104, x6)

inst_14:
// rs1==x9, rs2==x7, rd==x26, rs2_h3_val == 65471, rs1_h2_val == 65471, rs2_h0_val == 61439, rs2_h2_val == 64511
// opcode: pkbt16 ; op1:x9; op2:x7; dest:x26; op1val:0xfffbffbf0006bfff;  op2val:0xffbffbff0012efff
TEST_RR_OP(pkbt16, x26, x9, x7, 0x0000000000000000, 0xfffbffbf0006bfff, 0xffbffbff0012efff, x2, 112, x6)

inst_15:
// rs1==x10, rs2==x18, rd==x7, rs2_h3_val == 65503, rs1_h2_val == 32768
// opcode: pkbt16 ; op1:x10; op2:x18; dest:x7; op1val:0x10800000060005;  op2val:0xffdf0004000b0012
TEST_RR_OP(pkbt16, x7, x10, x18, 0x0000000000000000, 0x10800000060005, 0xffdf0004000b0012, x2, 120, x6)

inst_16:
// rs1==x25, rs2==x12, rd==x17, rs2_h3_val == 65519, rs2_h0_val == 64, rs1_h1_val == 512, rs2_h1_val == 49151, rs1_h3_val == 64511
// opcode: pkbt16 ; op1:x25; op2:x12; dest:x17; op1val:0xfbff00050200bfff;  op2val:0xffeffbffbfff0040
TEST_RR_OP(pkbt16, x17, x25, x12, 0x0000000000000000, 0xfbff00050200bfff, 0xffeffbffbfff0040, x2, 128, x6)

inst_17:
// rs1==x28, rs2==x31, rd==x8, rs2_h3_val == 65527, rs2_h0_val == 32, rs1_h0_val == 65534, rs1_h1_val == 8
// opcode: pkbt16 ; op1:x28; op2:x31; dest:x8; op1val:0x0200030008fffe;  op2val:0xfff7000a20000020
TEST_RR_OP(pkbt16, x8, x28, x31, 0x0000000000000000, 0x0200030008fffe, 0xfff7000a20000020, x2, 136, x6)

inst_18:
// rs1==x5, rs2==x29, rd==x24, rs2_h3_val == 65533, rs1_h0_val == 8, rs2_h2_val == 128, rs1_h1_val == 65503, rs1_h3_val == 32, rs2_h1_val == 57343
// opcode: pkbt16 ; op1:x5; op2:x29; dest:x24; op1val:0x20000affdf0008;  op2val:0xfffd0080dfff0003
TEST_RR_OP(pkbt16, x24, x5, x29, 0x0000000000000000, 0x20000affdf0008, 0xfffd0080dfff0003, x2, 144, x7)

inst_19:
// rs1==x13, rs2==x5, rd==x9, rs2_h3_val == 65534, rs2_h2_val == 16, rs1_h1_val == 1, rs1_h3_val == 65519
// opcode: pkbt16 ; op1:x13; op2:x5; dest:x9; op1val:0xffef00060001aaaa;  op2val:0xfffe00100012fbff
TEST_RR_OP(pkbt16, x9, x13, x5, 0x0000000000000000, 0xffef00060001aaaa, 0xfffe00100012fbff, x2, 152, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_20:
// rs1==x0, rs2==x28, rd==x4, rs2_h3_val == 32768, rs1_h2_val == 0, rs2_h1_val == 65279, rs1_h1_val == 128
// opcode: pkbt16 ; op1:x0; op2:x28; dest:x4; op1val:0x0c00000080000a;  op2val:0x80000012feff0005
TEST_RR_OP(pkbt16, x4, x0, x28, 0x0000000000000000, 0x0c00000080000a, 0x80000012feff0005, x1, 0, x7)

inst_21:
// rs1==x8, rs2==x22, rd==x25, rs2_h3_val == 16384, rs2_h2_val == 512, rs1_h0_val == 65279, rs1_h2_val == 65535
// opcode: pkbt16 ; op1:x8; op2:x22; dest:x25; op1val:0x12ffff0020feff;  op2val:0x40000200000b000e
TEST_RR_OP(pkbt16, x25, x8, x22, 0x0000000000000000, 0x12ffff0020feff, 0x40000200000b000e, x1, 8, x7)

inst_22:
// rs1==x15, rs2==x8, rd==x2, rs2_h3_val == 8192, rs2_h1_val == 32768, rs1_h3_val == 64, rs2_h2_val == 65533, rs1_h0_val == 21845
// opcode: pkbt16 ; op1:x15; op2:x8; dest:x2; op1val:0x40000dffdf5555;  op2val:0x2000fffd80000011
TEST_RR_OP(pkbt16, x2, x15, x8, 0x0000000000000000, 0x40000dffdf5555, 0x2000fffd80000011, x1, 16, x7)

inst_23:
// rs1==x16, rs2==x25, rd==x13, rs2_h3_val == 4096, rs1_h1_val == 4, rs2_h0_val == 4, rs2_h2_val == 65535
// opcode: pkbt16 ; op1:x16; op2:x25; dest:x13; op1val:0x09000d0004fdff;  op2val:0x1000ffff00020004
TEST_RR_OP(pkbt16, x13, x16, x25, 0x0000000000000000, 0x09000d0004fdff, 0x1000ffff00020004, x1, 24, x7)

inst_24:
// rs1==x31, rs2==x2, rd==x0, rs2_h3_val == 2048, 
// opcode: pkbt16 ; op1:x31; op2:x2; dest:x0; op1val:0xfffb000500800013;  op2val:0x80080008000000b
TEST_RR_OP(pkbt16, x0, x31, x2, 0x0000000000000000, 0xfffb000500800013, 0x80080008000000b, x1, 32, x7)

inst_25:
// rs1==x4, rs2==x6, rd==x16, rs2_h3_val == 512, rs1_h0_val == 4096, rs2_h0_val == 8, rs1_h3_val == 49151
// opcode: pkbt16 ; op1:x4; op2:x6; dest:x16; op1val:0xbfff000b000f1000;  op2val:0x2008000feff0008
TEST_RR_OP(pkbt16, x16, x4, x6, 0x0000000000000000, 0xbfff000b000f1000, 0x2008000feff0008, x1, 40, x7)

inst_26:
// rs1==x30, rs2==x20, rd==x6, rs2_h3_val == 128, rs2_h1_val == 256, rs1_h3_val == 65535
// opcode: pkbt16 ; op1:x30; op2:x20; dest:x6; op1val:0xffffefff000f5555;  op2val:0x80fdff01000011
TEST_RR_OP(pkbt16, x6, x30, x20, 0x0000000000000000, 0xffffefff000f5555, 0x80fdff01000011, x1, 48, x7)

inst_27:
// rs1==x12, rs2==x13, rd==x28, rs2_h3_val == 64, rs1_h1_val == 64, rs2_h2_val == 256, rs2_h0_val == 65535
// opcode: pkbt16 ; op1:x12; op2:x13; dest:x28; op1val:0xffff800000400013;  op2val:0x400100f7ffffff
TEST_RR_OP(pkbt16, x28, x12, x13, 0x0000000000000000, 0xffff800000400013, 0x400100f7ffffff, x1, 56, x7)

inst_28:
// rs1==x6, rs2==x3, rd==x10, rs2_h3_val == 32, rs1_h3_val == 65023, rs1_h0_val == 1, rs1_h2_val == 65279, rs2_h1_val == 64, rs2_h2_val == 65279
// opcode: pkbt16 ; op1:x6; op2:x3; dest:x10; op1val:0xfdfffeff00040001;  op2val:0x20feff00400009
TEST_RR_OP(pkbt16, x10, x6, x3, 0x0000000000000000, 0xfdfffeff00040001, 0x20feff00400009, x1, 64, x7)

inst_29:
// rs1==x2, rs2==x30, rd==x29, rs2_h3_val == 16, rs2_h1_val == 65535, rs1_h2_val == 8
// opcode: pkbt16 ; op1:x2; op2:x30; dest:x29; op1val:0xffef00080011000b;  op2val:0x100200ffffffdf
TEST_RR_OP(pkbt16, x29, x2, x30, 0x0000000000000000, 0xffef00080011000b, 0x100200ffffffdf, x1, 72, x7)

inst_30:
// rs1==x26, rs2==x16, rd==x23, rs2_h3_val == 8, rs1_h3_val == 65534, rs2_h1_val == 4, rs1_h0_val == 65531, rs1_h1_val == 16384, rs2_h2_val == 65531
// opcode: pkbt16 ; op1:x26; op2:x16; dest:x23; op1val:0xfffe00054000fffb;  op2val:0x08fffb0004000e
TEST_RR_OP(pkbt16, x23, x26, x16, 0x0000000000000000, 0xfffe00054000fffb, 0x08fffb0004000e, x1, 80, x7)

inst_31:
// rs1==x17, rs2==x23, rd==x30, rs2_h3_val == 4, rs2_h1_val == 65533, rs2_h0_val == 65519, rs2_h2_val == 32, rs1_h2_val == 4096, rs1_h3_val == 32767
// opcode: pkbt16 ; op1:x17; op2:x23; dest:x30; op1val:0x7fff1000fbff0008;  op2val:0x040020fffdffef
TEST_RR_OP(pkbt16, x30, x17, x23, 0x0000000000000000, 0x7fff1000fbff0008, 0x040020fffdffef, x1, 88, x7)

inst_32:
// rs2_h3_val == 2, rs1_h1_val == 65531, rs2_h1_val == 43690, rs1_h2_val == 2048
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c0800fffbfffe;  op2val:0x02ffdfaaaa0009
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x0c0800fffbfffe, 0x02ffdfaaaa0009, x1, 96, x7)

inst_33:
// rs2_h3_val == 1, rs2_h1_val == 8, rs1_h0_val == 65407, rs1_h1_val == 16, rs2_h2_val == 32767
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b000d0010ff7f;  op2val:0x017fff0008aaaa
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x0b000d0010ff7f, 0x017fff0008aaaa, x1, 104, x7)

inst_34:
// rs2_h3_val == 65535, rs1_h3_val == 32768, rs1_h2_val == 63487, rs2_h1_val == 65527
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000f7ffff7f0012;  op2val:0xfffff7fffff7ffdf
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x8000f7ffff7f0012, 0xfffff7fffff7ffdf, x1, 112, x7)

inst_35:
// rs1_h1_val == 65535, rs2_h0_val == 0, rs1_h3_val == 65407
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0011ffff0013;  op2val:0xfeffdfff00800000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xff7f0011ffff0013, 0xfeffdfff00800000, x1, 120, x7)

inst_36:
// rs1_h1_val == 0, rs2_h2_val == 49151, rs1_h3_val == 8
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x08100000000200;  op2val:0x4000bffffff7ffff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x08100000000200, 0x4000bffffff7ffff, x1, 128, x7)

inst_37:
// rs1_h0_val == 57343, rs2_h2_val == 64, rs1_h1_val == 65279, rs2_h0_val == 2
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x040012feffdfff;  op2val:0x20000040feff0002
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x040012feffdfff, 0x20000040feff0002, x1, 136, x7)

inst_38:
// rs1_h0_val == 61439, rs2_h2_val == 65527, rs1_h2_val == 65023
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fdff0012efff;  op2val:0x07fff7fff70006
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x03fdff0012efff, 0x07fff7fff70006, x1, 144, x7)

inst_39:
// rs1_h0_val == 63487, rs2_h0_val == 32768
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0810000009f7ff;  op2val:0x0c0009000d8000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x0810000009f7ff, 0x0c0009000d8000, x1, 152, x7)

inst_40:
// rs1_h0_val == 64511, rs1_h3_val == 0, rs2_h0_val == 1
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x00ffffbffffbff;  op2val:0x20010000400001
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x00ffffbffffbff, 0x20010000400001, x1, 160, x7)

inst_41:
// rs1_h0_val == 65471, rs2_h2_val == 21845
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0700120005ffbf;  op2val:0x1055550008feff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x0700120005ffbf, 0x1055550008feff, x1, 168, x7)

inst_42:
// rs1_h0_val == 65503, rs1_h2_val == 65503, rs2_h0_val == 2048
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffdf0010ffdf;  op2val:0x0e010000110800
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xfff7ffdf0010ffdf, 0x0e010000110800, x1, 176, x7)

inst_43:
// rs1_h0_val == 65519, rs1_h2_val == 16384, rs1_h3_val == 57343
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff40000005ffef;  op2val:0x200040aaaa000a
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xdfff40000005ffef, 0x200040aaaa000a, x1, 184, x7)

inst_44:
// rs1_h0_val == 65533, rs1_h3_val == 63487
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff00062000fffd;  op2val:0x1000020000d0003
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xf7ff00062000fffd, 0x1000020000d0003, x1, 192, x7)

inst_45:
// rs1_h0_val == 16384, rs1_h3_val == 128
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80ffdf00084000;  op2val:0x11000c02000020
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x80ffdf00084000, 0x11000c02000020, x1, 200, x7)

inst_46:
// rs1_h0_val == 8192, rs2_h1_val == 65503
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff800000112000;  op2val:0x11000bffdf0007
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xf7ff800000112000, 0x11000bffdf0007, x1, 208, x7)

inst_47:
// rs1_h0_val == 2048, rs2_h0_val == 4096, rs1_h2_val == 65531
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0ffffb00090800;  op2val:0x40000012fffd1000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x0ffffb00090800, 0x40000012fffd1000, x1, 216, x7)

inst_48:
// rs1_h0_val == 1024, rs1_h1_val == 65023, rs1_h2_val == 64511, rs1_h3_val == 4096
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fbfffdff0400;  op2val:0xefff004000050011
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x1000fbfffdff0400, 0xefff004000050011, x1, 224, x7)

inst_49:
// rs1_h0_val == 128, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x000009000d0080;  op2val:0x020040fff7ffef
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x000009000d0080, 0x020040fff7ffef, x1, 232, x7)

inst_50:
// rs1_h0_val == 64, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0200ff7f0040;  op2val:0xf7ffbfffffff2000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xefff0200ff7f0040, 0xf7ffbfffffff2000, x1, 240, x7)

inst_51:
// rs1_h0_val == 32, rs1_h2_val == 8192, rs1_h3_val == 65503
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf200040000020;  op2val:0x0e000300098000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xffdf200040000020, 0x0e000300098000, x1, 248, x7)

inst_52:
// rs1_h0_val == 16, rs1_h2_val == 49151, rs2_h1_val == 2048
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20bffffeff0010;  op2val:0x10ff7f08000020
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x20bffffeff0010, 0x10ff7f08000020, x1, 256, x7)

inst_53:
// rs1_h0_val == 4, rs2_h1_val == 1
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x110200ffef0004;  op2val:0x5555ffdf00018000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x110200ffef0004, 0x5555ffdf00018000, x1, 264, x7)

inst_54:
// rs1_h0_val == 2, rs2_h1_val == 65531, rs1_h3_val == 21845, rs1_h2_val == 65527
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fff700030002;  op2val:0x800000bfffb000c
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x5555fff700030002, 0x800000bfffb000c, x1, 272, x7)

inst_55:
// rs2_h3_val == 0, rs1_h1_val == 2048
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09000008000080;  op2val:0x00ffff00800007
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x09000008000080, 0x00ffff00800007, x1, 280, x7)

inst_56:
// rs2_h2_val == 43690, rs2_h0_val == 65533
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff1000000e0800;  op2val:0x07aaaa000ffffd
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xbfff1000000e0800, 0x07aaaa000ffffd, x1, 288, x7)

inst_57:
// rs2_h2_val == 61439, rs2_h1_val == 32767
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10040000040ffbf;  op2val:0xfbffefff7fffffff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x10040000040ffbf, 0xfbffefff7fffffff, x1, 296, x7)

inst_58:
// rs2_h2_val == 65519, rs1_h2_val == 32
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x040020000baaaa;  op2val:0x20ffef5555000d
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x040020000baaaa, 0x20ffef5555000d, x1, 304, x7)

inst_59:
// rs2_h0_val == 65471, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000132000;  op2val:0x4000ffbf0100ffbf
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x00080000132000, 0x4000ffbf0100ffbf, x1, 312, x7)

inst_60:
// rs2_h0_val == 65527, rs1_h1_val == 43690
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x114000aaaa0010;  op2val:0x11fdff0002fff7
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x114000aaaa0010, 0x11fdff0002fff7, x1, 320, x7)

inst_61:
// rs2_h0_val == 65531, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf00060004fffe;  op2val:0x80ffef8000fffb
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xffdf00060004fffe, 0x80ffef8000fffb, x1, 328, x7)

inst_62:
// rs2_h0_val == 65534, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c002000080002;  op2val:0x400003fffbfffe
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x0c002000080002, 0x400003fffbfffe, x1, 336, x7)

inst_63:
// rs2_h0_val == 16384, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000100000eefff;  op2val:0xfffe001202004000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x1000100000eefff, 0xfffe001202004000, x1, 344, x7)

inst_64:
// rs2_h0_val == 1024, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00030004bfff;  op2val:0x12fdff04000400
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xfdff00030004bfff, 0x12fdff04000400, x1, 352, x7)

inst_65:
// rs2_h0_val == 512, rs1_h1_val == 4096
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d00801000ffbf;  op2val:0x11dfff20000200
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x0d00801000ffbf, 0x11dfff20000200, x1, 360, x7)

inst_66:
// rs2_h0_val == 256, rs1_h1_val == 21845
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff001355552000;  op2val:0x02000cdfff0100
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xbfff001355552000, 0x02000cdfff0100, x1, 368, x7)

inst_67:
// rs2_h0_val == 128, rs2_h2_val == 2
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0dfffe00120008;  op2val:0xfbff000208000080
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x0dfffe00120008, 0xfbff000208000080, x1, 376, x7)

inst_68:
// rs2_h0_val == 16, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef100000125555;  op2val:0x13fff780000010
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xffef100000125555, 0x13fff780000010, x1, 384, x7)

inst_69:
// rs1_h3_val == 43690, rs1_h2_val == 65533
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffd000b4000;  op2val:0xff7fbfff00020800
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xaaaafffd000b4000, 0xff7fbfff00020800, x1, 392, x7)

inst_70:
// rs1_h3_val == 65471, rs2_h2_val == 1
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf800020000008;  op2val:0xffbf00010008efff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xffbf800020000008, 0xffbf00010008efff, x1, 400, x7)

inst_71:
// rs1_h3_val == 65533, rs2_h1_val == 0, rs2_h2_val == 1024
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd00060000dfff;  op2val:0xffff040000000010
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xfffd00060000dfff, 0xffff040000000010, x1, 408, x7)

inst_72:
// rs1_h3_val == 16384, rs1_h1_val == 57343
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000feffdfff0001;  op2val:0xfffb7ffffffbefff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x4000feffdfff0001, 0xfffb7ffffffbefff, x1, 416, x7)

inst_73:
// rs1_h3_val == 8192, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x200080000010000b;  op2val:0xffdf7fff000ffffe
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x200080000010000b, 0xffdf7fff000ffffe, x1, 424, x7)

inst_74:
// rs1_h3_val == 2048, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80080002000dfff;  op2val:0x05000afff70010
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x80080002000dfff, 0x05000afff70010, x1, 432, x7)

inst_75:
// rs1_h3_val == 1024, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400200055550400;  op2val:0x09f7ff0400fffd
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x400200055550400, 0x09f7ff0400fffd, x1, 440, x7)

inst_76:
// rs1_h2_val == 43690, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffaaaa00040008;  op2val:0xfffbffff55550011
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x7fffaaaa00040008, 0xfffbffff55550011, x1, 448, x7)

inst_77:
// rs1_h2_val == 21845, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff555500070400;  op2val:0x05fffd00020800
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xfbff555500070400, 0x05fffd00020800, x1, 456, x7)

inst_78:
// rs2_h2_val == 16384, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400000500040800;  op2val:0x80004000fff7efff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x400000500040800, 0x80004000fff7efff, x1, 464, x7)

inst_79:
// rs2_h2_val == 8192, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff001180002000;  op2val:0x0f2000aaaa1000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xffff001180002000, 0x0f2000aaaa1000, x1, 472, x7)

inst_80:
// rs2_h2_val == 4096, rs1_h1_val == 65471
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20dfffffbf0000;  op2val:0x081000fff7000a
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x20dfffffbf0000, 0x081000fff7000a, x1, 480, x7)

inst_81:
// rs2_h2_val == 2048, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b000c000f0002;  op2val:0xf7ff0800feffffdf
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x0b000c000f0002, 0xf7ff0800feffffdf, x1, 488, x7)

inst_82:
// rs1_h2_val == 65407, rs2_h1_val == 65023
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeff7fdfffffff;  op2val:0x0f000cfdff1000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xfffeff7fdfffffff, 0x0f000cfdff1000, x1, 496, x7)

inst_83:
// rs2_h2_val == 8, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000dbffffff7;  op2val:0xffdf0008aaaa0400
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x7fff000dbffffff7, 0xffdf0008aaaa0400, x1, 504, x7)

inst_84:
// rs2_h2_val == 0, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefff700108000;  op2val:0x400000feff0200
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xfffefff700108000, 0x400000feff0200, x1, 512, x7)

inst_85:
// rs1_h2_val == 1024, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000040080000400;  op2val:0xff7f00130200fffd
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x4000040080000400, 0xff7f00130200fffd, x1, 520, x7)

inst_86:
// rs2_h1_val == 61439, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff40000013dfff;  op2val:0x200003efff0002
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xefff40000013dfff, 0x200003efff0002, x1, 528, x7)

inst_87:
// rs2_h1_val == 64511, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff08000005feff;  op2val:0xaaaa0007fbff1000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xbfff08000005feff, 0xaaaa0007fbff1000, x1, 536, x7)

inst_88:
// rs1_h2_val == 64, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff004000000004;  op2val:0x08000900138000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xfbff004000000004, 0x08000900138000, x1, 544, x7)

inst_89:
// rs1_h2_val == 16, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e0010fbff0005;  op2val:0xf7ff000900080200
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x0e0010fbff0005, 0xf7ff000900080200, x1, 552, x7)

inst_90:
// rs2_h1_val == 65471, rs1_h2_val == 1
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef000100200011;  op2val:0x200fff7ffbf5555
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xffef000100200011, 0x200fff7ffbf5555, x1, 560, x7)

inst_91:
// rs1_h2_val == 4, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000040005fbff;  op2val:0xfbff000200058000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x4000040005fbff, 0xfbff000200058000, x1, 568, x7)

inst_92:
// rs2_h0_val == 49151, rs1_h1_val == 256
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7080001000001;  op2val:0x08fbfffffdbfff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xfff7080001000001, 0x08fbfffffdbfff, x1, 576, x7)

inst_93:
// rs2_h1_val == 65534, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20bfff000f000f;  op2val:0xbfffaaaafffe0008
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x20bfff000f000f, 0xbfffaaaafffe0008, x1, 584, x7)

inst_94:
// rs2_h1_val == 16384, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000d0008f7ff;  op2val:0x12000f4000feff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x7fff000d0008f7ff, 0x12000f4000feff, x1, 592, x7)

inst_95:
// rs2_h1_val == 4096, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x06dfffffdf0100;  op2val:0xfff7dfff1000feff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x06dfffffdf0100, 0xfff7dfff1000feff, x1, 600, x7)

inst_96:
// rs1_h1_val == 61439, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffefff0020;  op2val:0x0dffff00110005
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xfffeffffefff0020, 0x0dffff00110005, x1, 608, x7)

inst_97:
// rs1_h1_val == 63487, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdf7fff7ff0000;  op2val:0xfffd0011000e0040
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xfffdf7fff7ff0000, 0xfffd0011000e0040, x1, 616, x7)

inst_98:
// rs2_h1_val == 32, rs1_h1_val == 1024
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09000504000006;  op2val:0x07000b00200006
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x09000504000006, 0x07000b00200006, x1, 624, x7)

inst_99:
// rs2_h1_val == 16, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffef7ffffefffbf;  op2val:0x06ff7f00100011
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xfffef7ffffefffbf, 0x06ff7f00100011, x1, 632, x7)

inst_100:
// rs1_h1_val == 65533, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x12000efffd0003;  op2val:0x0304000002fdff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x12000efffd0003, 0x0304000002fdff, x1, 640, x7)

inst_101:
// rs1_h1_val == 65527, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40ffdffff7efff;  op2val:0x01aaaa0080000e
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x40ffdffff7efff, 0x01aaaa0080000e, x1, 648, x7)

inst_102:
// rs2_h0_val == 63487, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c000f5555000d;  op2val:0xbfffffff0000f7ff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x0c000f5555000d, 0xbfffffff0000f7ff, x1, 656, x7)

inst_103:
// rs1_h2_val == 2, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x200000280008000;  op2val:0x20000017fffefff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x200000280008000, 0x20000017fffefff, x1, 664, x7)

inst_104:
// rs2_h1_val == 65519, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x070080000cffff;  op2val:0x7fff000fffefefff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x070080000cffff, 0x7fff000fffefefff, x1, 672, x7)

inst_105:
// rs2_h0_val == 65407, 
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0002fff70002;  op2val:0x800012bfffff7f
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xfffe0002fff70002, 0x800012bfffff7f, x1, 680, x7)

inst_106:
// rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val == 49151, rs2_h1_val == 128, rs1_h2_val == 65534, rs2_h3_val == 65407, rs2_h2_val == 65534, rs2_h0_val == 65023, rs1_h3_val == 61439
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffebfff000e;  op2val:0xff7ffffe0080fdff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xeffffffebfff000e, 0xff7ffffe0080fdff, x1, 688, x7)

inst_107:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 1024, rs2_h1_val == 8192, rs1_h3_val == 65531, rs2_h0_val == 8192, rs1_h0_val == 65023, rs2_h2_val == 65023, rs1_h1_val == 8192, rs1_h2_val == 128
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb00802000fdff;  op2val:0x400fdff20002000
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0xfffb00802000fdff, 0x400fdff20002000, x1, 696, x7)

inst_108:
// rs2_h3_val == 57343, rs1_h0_val == 43690, rs1_h2_val == 65519, rs2_h0_val == 57343, rs2_h1_val == 65407, rs2_h2_val == 32768
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0effef0005aaaa;  op2val:0xdfff8000ff7fdfff
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x0effef0005aaaa, 0xdfff8000ff7fdfff, x1, 704, x7)

inst_109:
// rs2_h3_val == 32768, rs1_h2_val == 0, rs2_h1_val == 65279, rs1_h1_val == 128
// opcode: pkbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c00000080000a;  op2val:0x80000012feff0005
TEST_RR_OP(pkbt16, x31, x30, x29, 0x0000000000000000, 0x0c00000080000a, 0x80000012feff0005, x1, 712, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 90*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
