
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ksll32 instruction of the RISC-V RV64PZicsr extension for the ksll32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ksll32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x26,signature_x26_1)

inst_0:
// rs1 == rd != rs2, rs1==x28, rs2==x16, rd==x28, rs2_val == 21, rs1_w1_val == -67108865, rs1_w0_val == -262145
// opcode: ksll32 ; op1:x28; op2:x16; dest:x28; op1val:0xfbfffffffffbffff;  op2val:0x15
TEST_PKRR_OP(ksll32, x28, x28, x16, 0x0000000000000000, 0xfbfffffffffbffff, 0x15, x28, x26, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x12, rs2==x2, rd==x4, rs2_val == 15, rs1_w0_val == -8193, rs1_w1_val == 128
// opcode: ksll32 ; op1:x12; op2:x2; dest:x4; op1val:0x000080ffffdfff;  op2val:0xf
TEST_PKRR_OP(ksll32, x4, x12, x2, 0x0000000000000000, 0x000080ffffdfff, 0xf, x12, x26, 16, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x21, rs2==x21, rd==x30, rs2_val == 23, rs1_w1_val == 262144
// opcode: ksll32 ; op1:x21; op2:x21; dest:x30; op1val:0x04000000000007;  op2val:0x17
TEST_PKRR_OP(ksll32, x30, x21, x21, 0x0000000000000000, 0x04000000000007, 0x17, x21, x26, 32, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x31, rs2==x31, rd==x31, rs2_val == 27, rs1_w1_val == -16385
// opcode: ksll32 ; op1:x31; op2:x31; dest:x31; op1val:0xffffbfff00000003;  op2val:0x1b
TEST_PKRR_OP(ksll32, x31, x31, x31, 0x0000000000000000, 0xffffbfff00000003, 0x1b, x31, x26, 48, x3)

inst_4:
// rs2 == rd != rs1, rs1==x14, rs2==x8, rd==x8, rs2_val == 29, rs1_w0_val == 2, rs1_w1_val == -8193
// opcode: ksll32 ; op1:x14; op2:x8; dest:x8; op1val:0xffffdfff00000002;  op2val:0x1d
TEST_PKRR_OP(ksll32, x8, x14, x8, 0x0000000000000000, 0xffffdfff00000002, 0x1d, x14, x26, 64, x3)

inst_5:
// rs1==x25, rs2==x20, rd==x9, rs2_val == 30, rs1_w1_val == 1048576, rs1_w0_val == -8388609
// opcode: ksll32 ; op1:x25; op2:x20; dest:x9; op1val:0x100000ff7fffff;  op2val:0x1e
TEST_PKRR_OP(ksll32, x9, x25, x20, 0x0000000000000000, 0x100000ff7fffff, 0x1e, x25, x26, 80, x3)

inst_6:
// rs1==x20, rs2==x30, rd==x6, rs2_val == 16, rs1_w1_val == 4096, rs1_w0_val == -134217729
// opcode: ksll32 ; op1:x20; op2:x30; dest:x6; op1val:0x001000f7ffffff;  op2val:0x10
TEST_PKRR_OP(ksll32, x6, x20, x30, 0x0000000000000000, 0x001000f7ffffff, 0x10, x20, x26, 96, x3)

inst_7:
// rs1==x4, rs2==x19, rd==x11, rs2_val == 8, rs1_w0_val == 268435456, rs1_w1_val == 8388608
// opcode: ksll32 ; op1:x4; op2:x19; dest:x11; op1val:0x80000010000000;  op2val:0x8
TEST_PKRR_OP(ksll32, x11, x4, x19, 0x0000000000000000, 0x80000010000000, 0x8, x4, x26, 112, x3)

inst_8:
// rs1==x6, rs2==x17, rd==x13, rs2_val == 4, rs1_w0_val == 0, rs1_w1_val == 16384
// opcode: ksll32 ; op1:x6; op2:x17; dest:x13; op1val:0x00400000000000;  op2val:0x4
TEST_PKRR_OP(ksll32, x13, x6, x17, 0x0000000000000000, 0x00400000000000, 0x4, x6, x26, 128, x3)

inst_9:
// rs1==x17, rs2==x0, rd==x23, rs2_val == 2, rs1_w0_val == -2
// opcode: ksll32 ; op1:x17; op2:x0; dest:x23; op1val:0x000006fffffffe;  op2val:0x0
TEST_PKRR_OP(ksll32, x23, x17, x0, 0x0000000000000000, 0x000006fffffffe, 0x0, x17, x26, 144, x3)

inst_10:
// rs1==x19, rs2==x12, rd==x5, rs2_val == 1, rs1_w1_val == -2049, rs1_w0_val == -1048577
// opcode: ksll32 ; op1:x19; op2:x12; dest:x5; op1val:0xfffff7ffffefffff;  op2val:0x1
TEST_PKRR_OP(ksll32, x5, x19, x12, 0x0000000000000000, 0xfffff7ffffefffff, 0x1, x19, x26, 160, x3)

inst_11:
// rs1==x23, rs2==x15, rd==x10, rs1_w1_val == -1431655766, 
// opcode: ksll32 ; op1:x23; op2:x15; dest:x10; op1val:0xaaaaaaaafffffff6;  op2val:0x1d
TEST_PKRR_OP(ksll32, x10, x23, x15, 0x0000000000000000, 0xaaaaaaaafffffff6, 0x1d, x23, x26, 176, x3)

inst_12:
// rs1==x11, rs2==x28, rd==x2, rs1_w1_val == 1431655765, rs1_w0_val == -5
// opcode: ksll32 ; op1:x11; op2:x28; dest:x2; op1val:0x55555555fffffffb;  op2val:0x7
TEST_PKRR_OP(ksll32, x2, x11, x28, 0x0000000000000000, 0x55555555fffffffb, 0x7, x11, x26, 192, x3)

inst_13:
// rs1==x5, rs2==x6, rd==x0, rs1_w1_val == 2147483647, rs1_w0_val == 4096
// opcode: ksll32 ; op1:x5; op2:x6; dest:x0; op1val:0x7fffffff00001000;  op2val:0x15
TEST_PKRR_OP(ksll32, x0, x5, x6, 0x0000000000000000, 0x7fffffff00001000, 0x15, x5, x26, 208, x3)

inst_14:
// rs1==x24, rs2==x13, rd==x22, rs1_w1_val == -1073741825, rs2_val == 10
// opcode: ksll32 ; op1:x24; op2:x13; dest:x22; op1val:0xbfffffff00000000;  op2val:0xa
TEST_PKRR_OP(ksll32, x22, x24, x13, 0x0000000000000000, 0xbfffffff00000000, 0xa, x24, x26, 224, x3)

inst_15:
// rs1==x7, rs2==x1, rd==x12, rs1_w1_val == -536870913, 
// opcode: ksll32 ; op1:x7; op2:x1; dest:x12; op1val:0xdffffffffffffffb;  op2val:0x3
TEST_PKRR_OP(ksll32, x12, x7, x1, 0x0000000000000000, 0xdffffffffffffffb, 0x3, x7, x26, 240, x3)

inst_16:
// rs1==x30, rs2==x4, rd==x17, rs1_w1_val == -268435457, rs1_w0_val == -257
// opcode: ksll32 ; op1:x30; op2:x4; dest:x17; op1val:0xeffffffffffffeff;  op2val:0x9
TEST_PKRR_OP(ksll32, x17, x30, x4, 0x0000000000000000, 0xeffffffffffffeff, 0x9, x30, x26, 256, x6)

inst_17:
// rs1==x18, rs2==x3, rd==x27, rs1_w1_val == -134217729, rs1_w0_val == 512
// opcode: ksll32 ; op1:x18; op2:x3; dest:x27; op1val:0xf7ffffff00000200;  op2val:0x7
TEST_PKRR_OP(ksll32, x27, x18, x3, 0x0000000000000000, 0xf7ffffff00000200, 0x7, x18, x26, 272, x6)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_18:
// rs1==x3, rs2==x7, rd==x20, rs1_w1_val == -33554433, rs1_w0_val == 16384
// opcode: ksll32 ; op1:x3; op2:x7; dest:x20; op1val:0xfdffffff00004000;  op2val:0xe
TEST_PKRR_OP(ksll32, x20, x3, x7, 0x0000000000000000, 0xfdffffff00004000, 0xe, x3, x4, 0, x6)

inst_19:
// rs1==x26, rs2==x29, rd==x24, rs1_w1_val == -16777217, 
// opcode: ksll32 ; op1:x26; op2:x29; dest:x24; op1val:0xfeffffff00000002;  op2val:0x10
TEST_PKRR_OP(ksll32, x24, x26, x29, 0x0000000000000000, 0xfeffffff00000002, 0x10, x26, x4, 16, x6)

inst_20:
// rs1==x1, rs2==x27, rd==x7, rs1_w1_val == -8388609, rs1_w0_val == 1048576
// opcode: ksll32 ; op1:x1; op2:x27; dest:x7; op1val:0xff7fffff00100000;  op2val:0x1
TEST_PKRR_OP(ksll32, x7, x1, x27, 0x0000000000000000, 0xff7fffff00100000, 0x1, x1, x4, 32, x6)

inst_21:
// rs1==x16, rs2==x18, rd==x1, rs1_w1_val == -4194305, rs1_w0_val == 4194304
// opcode: ksll32 ; op1:x16; op2:x18; dest:x1; op1val:0xffbfffff00400000;  op2val:0xe
TEST_PKRR_OP(ksll32, x1, x16, x18, 0x0000000000000000, 0xffbfffff00400000, 0xe, x16, x4, 48, x6)

inst_22:
// rs1==x10, rs2==x23, rd==x21, rs1_w1_val == -2097153, 
// opcode: ksll32 ; op1:x10; op2:x23; dest:x21; op1val:0xffdfffff00100000;  op2val:0x2
TEST_PKRR_OP(ksll32, x21, x10, x23, 0x0000000000000000, 0xffdfffff00100000, 0x2, x10, x4, 64, x6)

inst_23:
// rs1==x2, rs2==x25, rd==x16, rs1_w1_val == -1048577, 
// opcode: ksll32 ; op1:x2; op2:x25; dest:x16; op1val:0xffefffff00000003;  op2val:0x1d
TEST_PKRR_OP(ksll32, x16, x2, x25, 0x0000000000000000, 0xffefffff00000003, 0x1d, x2, x4, 80, x6)

inst_24:
// rs1==x13, rs2==x22, rd==x3, rs1_w1_val == -524289, 
// opcode: ksll32 ; op1:x13; op2:x22; dest:x3; op1val:0xfff7ffff00000005;  op2val:0x5
TEST_PKRR_OP(ksll32, x3, x13, x22, 0x0000000000000000, 0xfff7ffff00000005, 0x5, x13, x4, 96, x6)

inst_25:
// rs1==x8, rs2==x9, rd==x29, rs1_w1_val == -262145, 
// opcode: ksll32 ; op1:x8; op2:x9; dest:x29; op1val:0xfffbffff00000000;  op2val:0x11
TEST_PKRR_OP(ksll32, x29, x8, x9, 0x0000000000000000, 0xfffbffff00000000, 0x11, x8, x4, 112, x6)

inst_26:
// rs1==x9, rs2==x5, rd==x25, rs1_w1_val == -131073, rs1_w0_val == 8192
// opcode: ksll32 ; op1:x9; op2:x5; dest:x25; op1val:0xfffdffff00002000;  op2val:0x15
TEST_PKRR_OP(ksll32, x25, x9, x5, 0x0000000000000000, 0xfffdffff00002000, 0x15, x9, x4, 128, x6)

inst_27:
// rs1==x29, rs2==x11, rd==x26, rs1_w1_val == -65537, 
// opcode: ksll32 ; op1:x29; op2:x11; dest:x26; op1val:0xfffeffff00000000;  op2val:0x7
TEST_PKRR_OP(ksll32, x26, x29, x11, 0x0000000000000000, 0xfffeffff00000000, 0x7, x29, x4, 144, x6)

inst_28:
// rs1==x27, rs2==x10, rd==x18, rs1_w1_val == -32769, 
// opcode: ksll32 ; op1:x27; op2:x10; dest:x18; op1val:0xffff7ffffffffff6;  op2val:0xf
TEST_PKRR_OP(ksll32, x18, x27, x10, 0x0000000000000000, 0xffff7ffffffffff6, 0xf, x27, x4, 160, x6)

inst_29:
// rs1==x15, rs2==x14, rd==x19, rs1_w1_val == -4097, rs1_w0_val == 524288
// opcode: ksll32 ; op1:x15; op2:x14; dest:x19; op1val:0xffffefff00080000;  op2val:0xa
TEST_PKRR_OP(ksll32, x19, x15, x14, 0x0000000000000000, 0xffffefff00080000, 0xa, x15, x4, 176, x6)

inst_30:
// rs1==x22, rs2==x24, rd==x14, rs1_w1_val == -1025, rs1_w0_val == 33554432
// opcode: ksll32 ; op1:x22; op2:x24; dest:x14; op1val:0xfffffbff02000000;  op2val:0x4
TEST_PKRR_OP(ksll32, x14, x22, x24, 0x0000000000000000, 0xfffffbff02000000, 0x4, x22, x4, 192, x1)

inst_31:
// rs1==x0, rs2==x26, rd==x15, rs1_w1_val == -513, rs1_w0_val == -33554433
// opcode: ksll32 ; op1:x0; op2:x26; dest:x15; op1val:0xfffffdfffdffffff;  op2val:0x1b
TEST_PKRR_OP(ksll32, x15, x0, x26, 0x0000000000000000, 0xfffffdfffdffffff, 0x1b, x0, x4, 208, x1)

inst_32:
// rs1_w1_val == -257, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00004000;  op2val:0x1e
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00004000, 0x1e, x30, x4, 224, x1)

inst_33:
// rs1_w1_val == -129, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffffff9;  op2val:0xa
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffff9, 0xa, x30, x4, 240, x1)

inst_34:
// rs1_w1_val == -65, rs1_w0_val == -32769
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffff7fff;  op2val:0xf
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xffffffbfffff7fff, 0xf, x30, x4, 256, x1)

inst_35:
// rs1_w1_val == -33, rs1_w0_val == 134217728
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf08000000;  op2val:0x17
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xffffffdf08000000, 0x17, x30, x4, 272, x1)

inst_36:
// rs1_w1_val == -17, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00001000;  op2val:0xd
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xffffffef00001000, 0xd, x30, x4, 288, x1)

inst_37:
// rs1_w1_val == -9, rs1_w0_val == 1431655765
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff755555555;  op2val:0x1
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xfffffff755555555, 0x1, x30, x4, 304, x1)

inst_38:
// rs1_w1_val == -5, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000007;  op2val:0xf
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000007, 0xf, x30, x4, 320, x1)

inst_39:
// rs1_w1_val == -3, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd02000000;  op2val:0x1e
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xfffffffd02000000, 0x1e, x30, x4, 336, x1)

inst_40:
// rs1_w1_val == -2, rs1_w0_val == 131072
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00020000;  op2val:0xb
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00020000, 0xb, x30, x4, 352, x1)

inst_41:
// rs1_w1_val == -2147483648, rs1_w0_val == -2097153
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffdfffff;  op2val:0x1d
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x80000000ffdfffff, 0x1d, x30, x4, 368, x1)

inst_42:
// rs1_w1_val == 1073741824, rs1_w0_val == 2147483647
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000007fffffff;  op2val:0x12
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x400000007fffffff, 0x12, x30, x4, 384, x1)

inst_43:
// rs1_w1_val == 536870912, rs1_w0_val == -16385
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffffbfff;  op2val:0x11
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x20000000ffffbfff, 0x11, x30, x4, 400, x1)

inst_44:
// rs1_w1_val == 268435456, rs1_w0_val == 16777216
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000001000000;  op2val:0xa
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x1000000001000000, 0xa, x30, x4, 416, x1)

inst_45:
// rs1_w1_val == 134217728, rs1_w0_val == -17
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ffffffef;  op2val:0x1e
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x8000000ffffffef, 0x1e, x30, x4, 432, x1)

inst_46:
// rs1_w0_val == 65536, rs1_w1_val == 2048
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000010000;  op2val:0x9
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x00080000010000, 0x9, x30, x4, 448, x1)

inst_47:
// rs1_w0_val == 32768, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000008000;  op2val:0xb
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x04000000008000, 0xb, x30, x4, 464, x1)

inst_48:
// rs1_w0_val == 2048, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000800;  op2val:0x5
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x00080000000800, 0x5, x30, x4, 480, x1)

inst_49:
// rs1_w0_val == 1024, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000400;  op2val:0x1f
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x8000000000000400, 0x1f, x30, x4, 496, x1)

inst_50:
// rs1_w0_val == 256, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000100;  op2val:0x4
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000100, 0x4, x30, x4, 512, x1)

inst_51:
// rs1_w0_val == 128, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000080;  op2val:0x17
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000080, 0x17, x30, x4, 528, x1)

inst_52:
// rs1_w0_val == 64, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000040;  op2val:0x1b
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000040, 0x1b, x30, x4, 544, x1)

inst_53:
// rs1_w0_val == 32, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000020;  op2val:0x1b
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x5555555500000020, 0x1b, x30, x4, 560, x1)

inst_54:
// rs1_w0_val == 16, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000010;  op2val:0x3
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x00000700000010, 0x3, x30, x4, 576, x1)

inst_55:
// rs1_w0_val == 8, rs1_w1_val == 1024
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000008;  op2val:0x17
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x00040000000008, 0x17, x30, x4, 592, x1)

inst_56:
// rs1_w0_val == 4, rs1_w1_val == 67108864
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000004;  op2val:0x11
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x400000000000004, 0x11, x30, x4, 608, x1)

inst_57:
// rs1_w0_val == 1, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000001;  op2val:0x17
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000001, 0x17, x30, x4, 624, x1)

inst_58:
// rs1_w0_val == -1, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffffff;  op2val:0x5
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffffff, 0x5, x30, x4, 640, x1)

inst_59:
// rs1_w1_val == 33554432, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000002;  op2val:0x17
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x200000000000002, 0x17, x30, x4, 656, x1)

inst_60:
// rs1_w1_val == 16777216, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000010000;  op2val:0x1d
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x100000000010000, 0x1d, x30, x4, 672, x1)

inst_61:
// rs1_w1_val == 4194304, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000002000000;  op2val:0x2
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x40000002000000, 0x2, x30, x4, 688, x1)

inst_62:
// rs1_w1_val == 2097152, rs1_w0_val == 67108864
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000004000000;  op2val:0x1b
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x20000004000000, 0x1b, x30, x4, 704, x1)

inst_63:
// rs1_w1_val == 524288, rs1_w0_val == -2147483648
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000080000000;  op2val:0x0
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x08000080000000, 0x0, x30, x4, 720, x1)

inst_64:
// rs1_w1_val == 131072, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000ffefffff;  op2val:0x13
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x020000ffefffff, 0x13, x30, x4, 736, x1)

inst_65:
// rs1_w1_val == 65536, rs1_w0_val == -4194305
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffbfffff;  op2val:0x4
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x010000ffbfffff, 0x4, x30, x4, 752, x1)

inst_66:
// rs1_w1_val == 32768, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800055555555;  op2val:0x9
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x00800055555555, 0x9, x30, x4, 768, x1)

inst_67:
// rs1_w1_val == 8192, rs1_w0_val == -1073741825
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x002000bfffffff;  op2val:0xc
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x002000bfffffff, 0xc, x30, x4, 784, x1)

inst_68:
// rs1_w1_val == 512, rs1_w0_val == 8388608
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000800000;  op2val:0xb
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x00020000800000, 0xb, x30, x4, 800, x1)

inst_69:
// rs1_w1_val == 256, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100ffffffef;  op2val:0x1b
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x000100ffffffef, 0x1b, x30, x4, 816, x1)

inst_70:
// rs1_w1_val == 64, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000008000;  op2val:0x1
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x00004000008000, 0x1, x30, x4, 832, x1)

inst_71:
// rs1_w1_val == 32, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffffeff;  op2val:0xe
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x000020fffffeff, 0xe, x30, x4, 848, x1)

inst_72:
// rs1_w1_val == 16, rs1_w0_val == -65537
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010fffeffff;  op2val:0x4
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x000010fffeffff, 0x4, x30, x4, 864, x1)

inst_73:
// rs1_w1_val == 8, rs1_w0_val == -33
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffffffdf;  op2val:0x11
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x000008ffffffdf, 0x11, x30, x4, 880, x1)

inst_74:
// rs1_w1_val == 4, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000080;  op2val:0xf
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x00000400000080, 0xf, x30, x4, 896, x1)

inst_75:
// rs1_w1_val == 2, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffffffe;  op2val:0x6
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x000002fffffffe, 0x6, x30, x4, 912, x1)

inst_76:
// rs1_w1_val == 1, rs1_w0_val == 262144
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100040000;  op2val:0x1e
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x00000100040000, 0x1e, x30, x4, 928, x1)

inst_77:
// rs1_w1_val == 0, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000400000;  op2val:0x1d
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x00000000400000, 0x1d, x30, x4, 944, x1)

inst_78:
// rs1_w1_val == -1, rs1_w0_val == -1025
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xb
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xb, x30, x4, 960, x1)

inst_79:
// rs1_w0_val == -1431655766, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000aaaaaaaa;  op2val:0x5
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x004000aaaaaaaa, 0x5, x30, x4, 976, x1)

inst_80:
// rs1_w0_val == -536870913, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffdfffffff;  op2val:0x0
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xfffdffffdfffffff, 0x0, x30, x4, 992, x1)

inst_81:
// rs1_w0_val == -4097, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004ffffefff;  op2val:0x1d
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x000004ffffefff, 0x1d, x30, x4, 1008, x1)

inst_82:
// rs1_w0_val == -2049, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fffff7ff;  op2val:0x1
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xfffffff6fffff7ff, 0x1, x30, x4, 1024, x1)

inst_83:
// rs1_w0_val == -513, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffffdff;  op2val:0x11
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xbffffffffffffdff, 0x11, x30, x4, 1040, x1)

inst_84:
// rs1_w0_val == -129, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffffff7f;  op2val:0x17
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xfffffffdffffff7f, 0x17, x30, x4, 1056, x1)

inst_85:
// rs1_w0_val == -65, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffffffbf;  op2val:0x12
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xffdfffffffffffbf, 0x12, x30, x4, 1072, x1)

inst_86:
// rs1_w0_val == -9, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffff7;  op2val:0x10
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffff7, 0x10, x30, x4, 1088, x1)

inst_87:
// rs1_w0_val == -3, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffffffd;  op2val:0x15
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x8000000fffffffd, 0x15, x30, x4, 1104, x1)

inst_88:
// rs1_w0_val == 1073741824, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf40000000;  op2val:0x17
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xffffffbf40000000, 0x17, x30, x4, 1120, x1)

inst_89:
// rs1_w0_val == 536870912, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff20000000;  op2val:0x1f
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xffff7fff20000000, 0x1f, x30, x4, 1136, x1)

inst_90:
// rs1_w0_val == -268435457, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffefffffff;  op2val:0x12
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xffffefffefffffff, 0x12, x30, x4, 1152, x1)

inst_91:
// rs1_w0_val == -67108865, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004fbffffff;  op2val:0x1
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x000004fbffffff, 0x1, x30, x4, 1168, x1)

inst_92:
// rs1_w0_val == -16777217, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcfeffffff;  op2val:0x12
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xfffffffcfeffffff, 0x12, x30, x4, 1184, x1)

inst_93:
// rs1_w0_val == 2097152, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000200000;  op2val:0x5
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x04000000200000, 0x5, x30, x4, 1200, x1)

inst_94:
// rs1_w0_val == -524289, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003fff7ffff;  op2val:0xf
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x000003fff7ffff, 0xf, x30, x4, 1216, x1)

inst_95:
// rs1_w0_val == -131073, 
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fffdffff;  op2val:0x1f
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffdffff, 0x1f, x30, x4, 1232, x1)

inst_96:
// rs2_val == 27, rs1_w1_val == -16385
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000003;  op2val:0x1b
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000003, 0x1b, x30, x4, 1248, x1)

inst_97:
// rs1_w1_val == 2147483647, rs1_w0_val == 4096
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00001000;  op2val:0x15
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00001000, 0x15, x30, x4, 1264, x1)

inst_98:
// rs1_w1_val == -513, rs1_w0_val == -33554433
// opcode: ksll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffdffffff;  op2val:0x1b
TEST_PKRR_OP(ksll32, x31, x30, x29, 0x0000000000000000, 0xfffffdfffdffffff, 0x1b, x30, x4, 1280, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x26_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x26_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 162*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
