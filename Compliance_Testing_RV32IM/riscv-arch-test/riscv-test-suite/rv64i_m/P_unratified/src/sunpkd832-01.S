
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sunpkd832 instruction of the RISC-V RV64PZicsr extension for the sunpkd832 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sunpkd832)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x13,signature_x13_1)

inst_0:
// rs1==x29, rd==x11, rs1_b0_val == -128, rs1_b6_val == -17, rs1_b4_val == -9, rs1_b5_val == -65
// opcode: sunpkd832 ; op1:x29; dest:x11; op1val:0x5efbff7fc05f880;
TEST_RD_OP( sunpkd832, x11, x29, 0x0000000000000000, 0x5efbff7fc05f880, x13, 0, x7)

inst_1:
// rs1==x4, rd==x15, rs1_b7_val == -86, rs1_b1_val == -128, rs1_b4_val == 8, rs1_b2_val == -5, rs1_b3_val == -65, rs1_b6_val == 127
// opcode: sunpkd832 ; op1:x4; dest:x15; op1val:0xaa7ffa08bffb80c0;
TEST_RD_OP( sunpkd832, x15, x4, 0x0000000000000000, 0xaa7ffa08bffb80c0, x13, 8, x7)

inst_2:
// rs1==x8, rd==x16, rs1_b7_val == 85, rs1_b1_val == -3, rs1_b3_val == 0, rs1_b5_val == 64, rs1_b6_val == -5, rs1_b0_val == 1
// opcode: sunpkd832 ; op1:x8; dest:x16; op1val:0x55fb40c000c0fd01;
TEST_RD_OP( sunpkd832, x16, x8, 0x0000000000000000, 0x55fb40c000c0fd01, x13, 16, x7)

inst_3:
// rs1==x9, rd==x24, rs1_b7_val == 127, rs1_b4_val == -128, rs1_b1_val == -1, rs1_b2_val == 32, rs1_b0_val == -2, rs1_b6_val == -3
// opcode: sunpkd832 ; op1:x9; dest:x24; op1val:0x7ffdf680f920fffe;
TEST_RD_OP( sunpkd832, x24, x9, 0x0000000000000000, 0x7ffdf680f920fffe, x13, 24, x7)

inst_4:
// rs1==x11, rd==x10, rs1_b7_val == -65, rs1_b6_val == 32, rs1_b4_val == 16, rs1_b2_val == -128, rs1_b0_val == -9, rs1_b5_val == 8, rs1_b1_val == -33
// opcode: sunpkd832 ; op1:x11; dest:x10; op1val:0xbf2008103f80dff7;
TEST_RD_OP( sunpkd832, x10, x11, 0x0000000000000000, 0xbf2008103f80dff7, x13, 32, x7)

inst_5:
// rs1==x17, rd==x2, rs1_b7_val == -33, rs1_b0_val == 16
// opcode: sunpkd832 ; op1:x17; dest:x2; op1val:0xdfc0070806fb0910;
TEST_RD_OP( sunpkd832, x2, x17, 0x0000000000000000, 0xdfc0070806fb0910, x13, 40, x7)

inst_6:
// rs1==x28, rd==x6, rs1_b7_val == -17, rs1_b2_val == -86, rs1_b1_val == 8, rs1_b5_val == 127, rs1_b0_val == 4, rs1_b4_val == -86
// opcode: sunpkd832 ; op1:x28; dest:x6; op1val:0xef207faaf6aa0804;
TEST_RD_OP( sunpkd832, x6, x28, 0x0000000000000000, 0xef207faaf6aa0804, x13, 48, x7)

inst_7:
// rs1==x21, rd==x22, rs1_b7_val == -9, rs1_b4_val == 64, rs1_b5_val == -86
// opcode: sunpkd832 ; op1:x21; dest:x22; op1val:0xf720aa40c0f90509;
TEST_RD_OP( sunpkd832, x22, x21, 0x0000000000000000, 0xf720aa40c0f90509, x13, 56, x7)

inst_8:
// rs1==x10, rd==x25, rs1_b7_val == -5, rs1_b5_val == -5, rs1_b3_val == 2
// opcode: sunpkd832 ; op1:x10; dest:x25; op1val:0xfb20fbaa02aafa07;
TEST_RD_OP( sunpkd832, x25, x10, 0x0000000000000000, 0xfb20fbaa02aafa07, x13, 64, x7)

inst_9:
// rs1==x27, rd==x12, rs1_b7_val == -3, rs1_b6_val == 64, rs1_b3_val == 4
// opcode: sunpkd832 ; op1:x27; dest:x12; op1val:0xfd40030904f9f601;
TEST_RD_OP( sunpkd832, x12, x27, 0x0000000000000000, 0xfd40030904f9f601, x13, 72, x7)

inst_10:
// rs1==x20, rd==x1, rs1_b7_val == -2, rs1_b0_val == -33, rs1_b2_val == -2
// opcode: sunpkd832 ; op1:x20; dest:x1; op1val:0xfef60840fcfe07df;
TEST_RD_OP( sunpkd832, x1, x20, 0x0000000000000000, 0xfef60840fcfe07df, x13, 80, x7)

inst_11:
// rs1==x19, rd==x28, rs1_b7_val == -128, rs1_b4_val == -33, rs1_b6_val == 16, rs1_b1_val == -86, rs1_b2_val == 64, rs1_b3_val == -3
// opcode: sunpkd832 ; op1:x19; dest:x28; op1val:0x801005dffd40aa06;
TEST_RD_OP( sunpkd832, x28, x19, 0x0000000000000000, 0x801005dffd40aa06, x13, 88, x7)

inst_12:
// rs1==x25, rd==x18, rs1_b7_val == 64, rs1_b5_val == 4
// opcode: sunpkd832 ; op1:x25; dest:x18; op1val:0x404004f6fcfc07fc;
TEST_RD_OP( sunpkd832, x18, x25, 0x0000000000000000, 0x404004f6fcfc07fc, x13, 96, x7)

inst_13:
// rs1==x24, rd==x23, rs1_b7_val == 32, rs1_b6_val == 8, rs1_b0_val == 2, rs1_b4_val == 1
// opcode: sunpkd832 ; op1:x24; dest:x23; op1val:0x2008f60102f6fa02;
TEST_RD_OP( sunpkd832, x23, x24, 0x0000000000000000, 0x2008f60102f6fa02, x13, 104, x7)

inst_14:
// rs1==x18, rd==x3, rs1_b7_val == 16, rs1_b5_val == 1, rs1_b3_val == -1
// opcode: sunpkd832 ; op1:x18; dest:x3; op1val:0x10400140ffaa0980;
TEST_RD_OP( sunpkd832, x3, x18, 0x0000000000000000, 0x10400140ffaa0980, x13, 112, x7)

inst_15:
// rs1==x22, rd==x17, rs1_b7_val == 8, rs1_b2_val == -65, rs1_b0_val == 32, rs1_b5_val == -1, rs1_b6_val == -86
// opcode: sunpkd832 ; op1:x22; dest:x17; op1val:0x8aaff80fcbfff20;
TEST_RD_OP( sunpkd832, x17, x22, 0x0000000000000000, 0x8aaff80fcbfff20, x13, 120, x7)

inst_16:
// rs1==x16, rd==x29, rs1_b7_val == 4, rs1_b1_val == 2, rs1_b5_val == -2, rs1_b3_val == 1, rs1_b2_val == 16
// opcode: sunpkd832 ; op1:x16; dest:x29; op1val:0x403fef7011002fa;
TEST_RD_OP( sunpkd832, x29, x16, 0x0000000000000000, 0x403fef7011002fa, x13, 128, x7)

inst_17:
// rs1==x26, rd==x19, rs1_b7_val == 2, rs1_b0_val == -17, rs1_b3_val == -17
// opcode: sunpkd832 ; op1:x26; dest:x19; op1val:0x2fdfcf8ef07faef;
TEST_RD_OP( sunpkd832, x19, x26, 0x0000000000000000, 0x2fdfcf8ef07faef, x13, 136, x7)

inst_18:
// rs1==x6, rd==x14, rs1_b7_val == 1, rs1_b3_val == -5
// opcode: sunpkd832 ; op1:x6; dest:x14; op1val:0x1fdbf06fb40c0ef;
TEST_RD_OP( sunpkd832, x14, x6, 0x0000000000000000, 0x1fdbf06fb40c0ef, x13, 144, x7)

inst_19:
// rs1==x12, rd==x26, rs1_b7_val == 0, rs1_b6_val == -1, rs1_b3_val == -2
// opcode: sunpkd832 ; op1:x12; dest:x26; op1val:0xff05aafefbfdf9;
TEST_RD_OP( sunpkd832, x26, x12, 0x0000000000000000, 0xff05aafefbfdf9, x13, 152, x7)

inst_20:
// rs1==x3, rd==x8, rs1_b7_val == -1, rs1_b4_val == 4, rs1_b6_val == -128
// opcode: sunpkd832 ; op1:x3; dest:x8; op1val:0xff80ff0404aa3ffa;
TEST_RD_OP( sunpkd832, x8, x3, 0x0000000000000000, 0xff80ff0404aa3ffa, x13, 160, x7)

inst_21:
// rs1==x23, rd==x21, rs1_b6_val == 85, 
// opcode: sunpkd832 ; op1:x23; dest:x21; op1val:0x3f5508df3f06fc80;
TEST_RD_OP( sunpkd832, x21, x23, 0x0000000000000000, 0x3f5508df3f06fc80, x13, 168, x7)

inst_22:
// rs1==x5, rd==x27, rs1_b6_val == -65, rs1_b4_val == -65, rs1_b5_val == -9
// opcode: sunpkd832 ; op1:x5; dest:x27; op1val:0x4bff7bfc0f805fc;
TEST_RD_OP( sunpkd832, x27, x5, 0x0000000000000000, 0x4bff7bfc0f805fc, x13, 176, x7)

inst_23:
// rs1==x15, rd==x9, rs1_b6_val == -33, rs1_b2_val == -17
// opcode: sunpkd832 ; op1:x15; dest:x9; op1val:0x3dff6dffceffdf6;
TEST_RD_OP( sunpkd832, x9, x15, 0x0000000000000000, 0x3dff6dffceffdf6, x13, 184, x6)

inst_24:
// rs1==x7, rd==x0, rs1_b6_val == -9, rs1_b2_val == -1, rs1_b5_val == -3, rs1_b1_val == 1, rs1_b0_val == 8
// opcode: sunpkd832 ; op1:x7; dest:x0; op1val:0x1f7fd05f9ff0108;
TEST_RD_OP( sunpkd832, x0, x7, 0x0000000000000000, 0x1f7fd05f9ff0108, x13, 192, x6)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_25:
// rs1==x30, rd==x5, rs1_b6_val == -2, rs1_b2_val == -9, rs1_b1_val == 0, rs1_b4_val == 2, rs1_b0_val == 0
// opcode: sunpkd832 ; op1:x30; dest:x5; op1val:0xfffe040201f70000;
TEST_RD_OP( sunpkd832, x5, x30, 0x0000000000000000, 0xfffe040201f70000, x3, 0, x6)

inst_26:
// rs1==x0, rd==x7, rs1_b1_val == -5, rs1_b3_val == 8
// opcode: sunpkd832 ; op1:x0; dest:x7; op1val:0xf8ef06f708f8fb80;
TEST_RD_OP( sunpkd832, x7, x0, 0x0000000000000000, 0xf8ef06f708f8fb80, x3, 8, x6)

inst_27:
// rs1==x13, rd==x4, rs1_b1_val == -2, rs1_b2_val == 8, rs1_b0_val == -5, rs1_b3_val == 32
// opcode: sunpkd832 ; op1:x13; dest:x4; op1val:0x800703802008fefb;
TEST_RD_OP( sunpkd832, x4, x13, 0x0000000000000000, 0x800703802008fefb, x3, 16, x6)

inst_28:
// rs1==x1, rd==x30, rs1_b1_val == 64, 
// opcode: sunpkd832 ; op1:x1; dest:x30; op1val:0xfb800509f9404080;
TEST_RD_OP( sunpkd832, x30, x1, 0x0000000000000000, 0xfb800509f9404080, x3, 24, x6)

inst_29:
// rs1==x14, rd==x31, rs1_b1_val == 32, rs1_b2_val == 1
// opcode: sunpkd832 ; op1:x14; dest:x31; op1val:0x20fd01aa3f012010;
TEST_RD_OP( sunpkd832, x31, x14, 0x0000000000000000, 0x20fd01aa3f012010, x3, 32, x6)

inst_30:
// rs1==x31, rd==x20, rs1_b1_val == 16, 
// opcode: sunpkd832 ; op1:x31; dest:x20; op1val:0xf9fdffaaff0910f9;
TEST_RD_OP( sunpkd832, x20, x31, 0x0000000000000000, 0xf9fdffaaff0910f9, x3, 40, x6)

inst_31:
// rs1==x2, rd==x13, rs1_b1_val == 4, 
// opcode: sunpkd832 ; op1:x2; dest:x13; op1val:0x3feff0804fb0402;
TEST_RD_OP( sunpkd832, x13, x2, 0x0000000000000000, 0x3feff0804fb0402, x3, 48, x6)

inst_32:
// rs1_b0_val == -86, rs1_b4_val == -17
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xf6effbef0903feaa;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0xf6effbef0903feaa, x3, 56, x6)

inst_33:
// rs1_b0_val == 85, rs1_b5_val == 16
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x6fb10fc3ff9f655;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x6fb10fc3ff9f655, x3, 64, x6)

inst_34:
// rs1_b0_val == 127, rs1_b6_val == 2
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xaa02bffc0703077f;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0xaa02bffc0703077f, x3, 72, x6)

inst_35:
// rs1_b0_val == -65, rs1_b5_val == 85, rs1_b2_val == 127
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x40405540007ffabf;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x40405540007ffabf, x3, 80, x6)

inst_36:
// rs1_b0_val == -3, rs1_b4_val == -1, rs1_b5_val == 32, rs1_b2_val == 85
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x40320fffd5503fd;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x40320fffd5503fd, x3, 88, x6)

inst_37:
// rs1_b0_val == 64, rs1_b3_val == -86, rs1_b5_val == 2, rs1_b4_val == 0
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xf8f80200aa40ff40;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0xf8f80200aa40ff40, x3, 96, x6)

inst_38:
// rs1_b0_val == -1, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x80fcff073fc0fbff;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x80fcff073fc0fbff, x3, 104, x6)

inst_39:
// rs1_b4_val == -5, rs1_b1_val == 127
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xfff93ffbfb067f80;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0xfff93ffbfb067f80, x3, 112, x6)

inst_40:
// rs1_b4_val == -3, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x40207fdbf40aa06;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x40207fdbf40aa06, x3, 120, x6)

inst_41:
// rs1_b4_val == -2, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x805fdfe01effb10;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x805fdfe01effb10, x3, 128, x6)

inst_42:
// rs1_b4_val == 32, rs1_b2_val == 4, rs1_b6_val == 1
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x5501f920fd04f601;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x5501f920fd04f601, x3, 136, x6)

inst_43:
// rs1_b3_val == 85, rs1_b1_val == 85
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x8003fcf955805507;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x8003fcf955805507, x3, 144, x6)

inst_44:
// rs1_b3_val == 127, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x408f6fe7f0308fa;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x408f6fe7f0308fa, x3, 152, x6)

inst_45:
// rs1_b3_val == -33, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x207ff902df20c003;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x207ff902df20c003, x3, 160, x6)

inst_46:
// rs1_b3_val == -9, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xfe80f980f73f07fa;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0xfe80f980f73f07fa, x3, 168, x6)

inst_47:
// rs1_b3_val == -128, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x82008ff80f8dffe;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x82008ff80f8dffe, x3, 176, x6)

inst_48:
// rs1_b3_val == 64, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x06f60740f87faa;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x06f60740f87faa, x3, 184, x6)

inst_49:
// rs1_b3_val == 16, rs1_b5_val == -128
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x1aa800110fc01bf;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x1aa800110fc01bf, x3, 192, x6)

inst_50:
// rs1_b6_val == 4, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x104080302200806;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x104080302200806, x3, 200, x6)

inst_51:
// rs1_b6_val == 0, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xf900fffaf810fc04;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0xf900fffaf810fc04, x3, 208, x6)

inst_52:
// rs1_b2_val == -33, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xfafa05ff05df0820;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0xfafa05ff05df0820, x3, 216, x6)

inst_53:
// rs1_b5_val == -33, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x9aadfff07fc10f9;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x9aadfff07fc10f9, x3, 224, x6)

inst_54:
// rs1_b2_val == -3, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xf90406fe05fdf610;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0xf90406fe05fdf610, x3, 232, x6)

inst_55:
// rs1_b1_val == -9, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x7feff60620eff7bf;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x7feff60620eff7bf, x3, 240, x6)

inst_56:
// rs1_b5_val == -17, rs1_b4_val == 85
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xf902ef55f9060020;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0xf902ef55f9060020, x3, 248, x6)

inst_57:
// rs1_b2_val == 2, rs1_b4_val == 127
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x207f207f0202dfdf;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x207f207f0202dfdf, x3, 256, x6)

inst_58:
// rs1_b5_val == 0, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x3f0400f602f820ef;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x3f0400f602f820ef, x3, 264, x6)

inst_59:
// rs1_b1_val == -65, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xefff03df5504bf05;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0xefff03df5504bf05, x3, 272, x6)

inst_60:
// rs1_b1_val == -17, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xffff3f027faaef07;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0xffff3f027faaef07, x3, 280, x6)

inst_61:
// rs1_b2_val == 0, 
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xf9f80204fc00f93f;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0xf9f80204fc00f93f, x3, 288, x6)

inst_62:
// rs1_b6_val == -9, rs1_b2_val == -1, rs1_b5_val == -3, rs1_b1_val == 1, rs1_b0_val == 8
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0x1f7fd05f9ff0108;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0x1f7fd05f9ff0108, x3, 296, x6)

inst_63:
// rs1_b1_val == -5, rs1_b3_val == 8
// opcode: sunpkd832 ; op1:x30; dest:x31; op1val:0xf8ef06f708f8fb80;
TEST_RD_OP( sunpkd832, x31, x30, 0x0000000000000000, 0xf8ef06f708f8fb80, x3, 304, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 25*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 39*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
