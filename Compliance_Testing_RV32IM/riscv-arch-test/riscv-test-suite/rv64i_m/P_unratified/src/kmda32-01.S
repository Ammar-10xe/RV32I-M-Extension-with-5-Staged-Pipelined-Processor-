
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmda32 instruction of the RISC-V RV64PZicsr extension for the kmda32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmda32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x8, rs2==x19, rd==x8, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 128, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w1_val == 2147483647
// opcode: kmda32 ; op1:x8; op2:x19; dest:x8; op1val:0x7fffffff80000000;  op2val:0x00008000000005
TEST_PKRR_OP(kmda32, x8, x8, x19, 0x0000000000000000, 0x7fffffff80000000, 0x00008000000005, x8, x2, 0, x6)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x9, rs2==x31, rd==x0, rs1_w1_val == rs2_w1_val, rs1_w0_val == -33554433, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w1_val == -2147483648, rs1_w1_val == -2147483648
// opcode: kmda32 ; op1:x9; op2:x31; dest:x0; op1val:0x80000000fdffffff;  op2val:0x80000000fffffffa
TEST_PKRR_OP(kmda32, x0, x9, x31, 0x0000000000000000, 0x80000000fdffffff, 0x80000000fffffffa, x9, x2, 16, x6)

inst_2:
// rs1 == rs2 != rd, rs1==x16, rs2==x16, rd==x9, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w1_val == 524288, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 2097152
// opcode: kmda32 ; op1:x16; op2:x16; dest:x9; op1val:0xfffffff900200000;  op2val:0x08000000000005
TEST_PKRR_OP(kmda32, x9, x16, x16, 0x0000000000000000, 0xfffffff900200000, 0x08000000000005, x16, x2, 32, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x12, rs2==x12, rd==x12, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w1_val == 262144, rs1_w0_val == 262144, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w0_val == -1, rs2_w1_val == -524289
// opcode: kmda32 ; op1:x12; op2:x12; dest:x12; op1val:0x04000000040000;  op2val:0xfff7ffffffffffff
TEST_PKRR_OP(kmda32, x12, x12, x12, 0x0000000000000000, 0x04000000040000, 0xfff7ffffffffffff, x12, x2, 48, x6)

inst_4:
// rs2 == rd != rs1, rs1==x20, rs2==x25, rd==x25, rs1_w0_val == rs2_w0_val, rs1_w1_val == -9, rs2_w0_val == -4194305, rs1_w0_val == -4194305
// opcode: kmda32 ; op1:x20; op2:x25; dest:x25; op1val:0xfffffff7ffbfffff;  op2val:0x000080ffbfffff
TEST_PKRR_OP(kmda32, x25, x20, x25, 0x0000000000000000, 0xfffffff7ffbfffff, 0x000080ffbfffff, x20, x2, 64, x6)

inst_5:
// rs1==x28, rs2==x3, rd==x1, rs2_w1_val == -1431655766, rs1_w1_val == 256, rs2_w0_val == 16
// opcode: kmda32 ; op1:x28; op2:x3; dest:x1; op1val:0x000100fffffffc;  op2val:0xaaaaaaaa00000010
TEST_PKRR_OP(kmda32, x1, x28, x3, 0x0000000000000000, 0x000100fffffffc, 0xaaaaaaaa00000010, x28, x2, 80, x6)

inst_6:
// rs1==x18, rs2==x13, rd==x10, rs2_w1_val == 1431655765, rs2_w0_val == 4, rs1_w0_val == 128, rs1_w1_val == -1
// opcode: kmda32 ; op1:x18; op2:x13; dest:x10; op1val:0xffffffff00000080;  op2val:0x5555555500000004
TEST_PKRR_OP(kmda32, x10, x18, x13, 0x0000000000000000, 0xffffffff00000080, 0x5555555500000004, x18, x2, 96, x6)

inst_7:
// rs1==x13, rs2==x24, rd==x28, rs2_w1_val == 2147483647, rs2_w0_val == -16385
// opcode: kmda32 ; op1:x13; op2:x24; dest:x28; op1val:0x000007fdffffff;  op2val:0x7fffffffffffbfff
TEST_PKRR_OP(kmda32, x28, x13, x24, 0x0000000000000000, 0x000007fdffffff, 0x7fffffffffffbfff, x13, x2, 112, x6)

inst_8:
// rs1==x31, rs2==x29, rd==x22, rs2_w1_val == -1073741825, rs1_w0_val == 64, rs1_w1_val == 32768
// opcode: kmda32 ; op1:x31; op2:x29; dest:x22; op1val:0x00800000000040;  op2val:0xbfffffffffffffff
TEST_PKRR_OP(kmda32, x22, x31, x29, 0x0000000000000000, 0x00800000000040, 0xbfffffffffffffff, x31, x2, 128, x6)

inst_9:
// rs1==x5, rs2==x18, rd==x13, rs2_w1_val == -536870913, rs1_w1_val == -1048577, rs2_w0_val == -129
// opcode: kmda32 ; op1:x5; op2:x18; dest:x13; op1val:0xffefffff00000040;  op2val:0xdfffffffffffff7f
TEST_PKRR_OP(kmda32, x13, x5, x18, 0x0000000000000000, 0xffefffff00000040, 0xdfffffffffffff7f, x5, x2, 144, x6)

inst_10:
// rs1==x15, rs2==x22, rd==x7, rs2_w1_val == -268435457, rs1_w0_val == -131073, rs1_w1_val == 512
// opcode: kmda32 ; op1:x15; op2:x22; dest:x7; op1val:0x000200fffdffff;  op2val:0xeffffffffffffff9
TEST_PKRR_OP(kmda32, x7, x15, x22, 0x0000000000000000, 0x000200fffdffff, 0xeffffffffffffff9, x15, x2, 160, x6)

inst_11:
// rs1==x11, rs2==x8, rd==x24, rs2_w1_val == -134217729, rs2_w0_val == -2097153, rs1_w0_val == 524288
// opcode: kmda32 ; op1:x11; op2:x8; dest:x24; op1val:0xfffffff800080000;  op2val:0xf7ffffffffdfffff
TEST_PKRR_OP(kmda32, x24, x11, x8, 0x0000000000000000, 0xfffffff800080000, 0xf7ffffffffdfffff, x11, x2, 176, x6)

inst_12:
// rs1==x30, rs2==x17, rd==x3, rs2_w1_val == -67108865, rs1_w1_val == 4096, rs1_w0_val == 4194304, rs2_w0_val == 1048576
// opcode: kmda32 ; op1:x30; op2:x17; dest:x3; op1val:0x00100000400000;  op2val:0xfbffffff00100000
TEST_PKRR_OP(kmda32, x3, x30, x17, 0x0000000000000000, 0x00100000400000, 0xfbffffff00100000, x30, x2, 192, x6)

inst_13:
// rs1==x27, rs2==x21, rd==x16, rs2_w1_val == -33554433, rs2_w0_val == -1025, rs1_w0_val == -16777217, rs1_w1_val == 8388608
// opcode: kmda32 ; op1:x27; op2:x21; dest:x16; op1val:0x800000feffffff;  op2val:0xfdfffffffffffbff
TEST_PKRR_OP(kmda32, x16, x27, x21, 0x0000000000000000, 0x800000feffffff, 0xfdfffffffffffbff, x27, x2, 208, x6)

inst_14:
// rs1==x23, rs2==x4, rd==x20, rs2_w1_val == -16777217, rs1_w0_val == 65536, rs1_w1_val == 2048, rs2_w0_val == 2048
// opcode: kmda32 ; op1:x23; op2:x4; dest:x20; op1val:0x00080000010000;  op2val:0xfeffffff00000800
TEST_PKRR_OP(kmda32, x20, x23, x4, 0x0000000000000000, 0x00080000010000, 0xfeffffff00000800, x23, x2, 224, x6)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_15:
// rs1==x2, rs2==x15, rd==x17, rs2_w1_val == -8388609, rs1_w1_val == 32, rs2_w0_val == -16777217
// opcode: kmda32 ; op1:x2; op2:x15; dest:x17; op1val:0x000020fffffff6;  op2val:0xff7ffffffeffffff
TEST_PKRR_OP(kmda32, x17, x2, x15, 0x0000000000000000, 0x000020fffffff6, 0xff7ffffffeffffff, x2, x8, 0, x12)

inst_16:
// rs1==x1, rs2==x26, rd==x14, rs2_w1_val == -4194305, rs2_w0_val == 16777216, rs1_w0_val == 134217728
// opcode: kmda32 ; op1:x1; op2:x26; dest:x14; op1val:0x00000608000000;  op2val:0xffbfffff01000000
TEST_PKRR_OP(kmda32, x14, x1, x26, 0x0000000000000000, 0x00000608000000, 0xffbfffff01000000, x1, x8, 16, x12)

inst_17:
// rs1==x0, rs2==x9, rd==x31, rs2_w1_val == -2097153, rs1_w1_val == -268435457, rs2_w0_val == -33
// opcode: kmda32 ; op1:x0; op2:x9; dest:x31; op1val:0xeffffffffdffffff;  op2val:0xffdfffffffffffdf
TEST_PKRR_OP(kmda32, x31, x0, x9, 0x0000000000000000, 0xeffffffffdffffff, 0xffdfffffffffffdf, x0, x8, 32, x12)

inst_18:
// rs1==x17, rs2==x14, rd==x4, rs2_w1_val == -1048577, 
// opcode: kmda32 ; op1:x17; op2:x14; dest:x4; op1val:0x00800000080000;  op2val:0xffefffffffdfffff
TEST_PKRR_OP(kmda32, x4, x17, x14, 0x0000000000000000, 0x00800000080000, 0xffefffffffdfffff, x17, x8, 48, x12)

inst_19:
// rs1==x29, rs2==x5, rd==x11, rs2_w1_val == -262145, rs1_w0_val == -3, rs1_w1_val == 524288
// opcode: kmda32 ; op1:x29; op2:x5; dest:x11; op1val:0x080000fffffffd;  op2val:0xfffbffff00000003
TEST_PKRR_OP(kmda32, x11, x29, x5, 0x0000000000000000, 0x080000fffffffd, 0xfffbffff00000003, x29, x8, 64, x12)

inst_20:
// rs1==x4, rs2==x28, rd==x29, rs2_w1_val == -131073, rs2_w0_val == 524288
// opcode: kmda32 ; op1:x4; op2:x28; dest:x29; op1val:0x080000fffffffd;  op2val:0xfffdffff00080000
TEST_PKRR_OP(kmda32, x29, x4, x28, 0x0000000000000000, 0x080000fffffffd, 0xfffdffff00080000, x4, x8, 80, x12)

inst_21:
// rs1==x21, rs2==x20, rd==x23, rs2_w1_val == -65537, rs2_w0_val == -513, rs1_w1_val == 1
// opcode: kmda32 ; op1:x21; op2:x20; dest:x23; op1val:0x00000100010000;  op2val:0xfffefffffffffdff
TEST_PKRR_OP(kmda32, x23, x21, x20, 0x0000000000000000, 0x00000100010000, 0xfffefffffffffdff, x21, x8, 96, x12)

inst_22:
// rs1==x10, rs2==x30, rd==x2, rs2_w1_val == -32769, rs2_w0_val == -8388609, rs1_w1_val == 8
// opcode: kmda32 ; op1:x10; op2:x30; dest:x2; op1val:0x000008feffffff;  op2val:0xffff7fffff7fffff
TEST_PKRR_OP(kmda32, x2, x10, x30, 0x0000000000000000, 0x000008feffffff, 0xffff7fffff7fffff, x10, x8, 112, x12)

inst_23:
// rs1==x7, rs2==x2, rd==x6, rs2_w1_val == -16385, rs2_w0_val == 1024, rs1_w0_val == 8388608
// opcode: kmda32 ; op1:x7; op2:x2; dest:x6; op1val:0x00000800800000;  op2val:0xffffbfff00000400
TEST_PKRR_OP(kmda32, x6, x7, x2, 0x0000000000000000, 0x00000800800000, 0xffffbfff00000400, x7, x8, 128, x12)

inst_24:
// rs1==x22, rs2==x11, rd==x5, rs2_w1_val == -8193, rs2_w0_val == 2, rs1_w0_val == -9, rs1_w1_val == 128
// opcode: kmda32 ; op1:x22; op2:x11; dest:x5; op1val:0x000080fffffff7;  op2val:0xffffdfff00000002
TEST_PKRR_OP(kmda32, x5, x22, x11, 0x0000000000000000, 0x000080fffffff7, 0xffffdfff00000002, x22, x8, 144, x12)

inst_25:
// rs1==x24, rs2==x27, rd==x30, rs2_w1_val == -4097, rs1_w0_val == -33, rs2_w0_val == 8192
// opcode: kmda32 ; op1:x24; op2:x27; dest:x30; op1val:0xfffffffcffffffdf;  op2val:0xffffefff00002000
TEST_PKRR_OP(kmda32, x30, x24, x27, 0x0000000000000000, 0xfffffffcffffffdf, 0xffffefff00002000, x24, x8, 160, x12)

inst_26:
// rs1==x25, rs2==x1, rd==x18, rs2_w1_val == -2049, rs2_w0_val == -65
// opcode: kmda32 ; op1:x25; op2:x1; dest:x18; op1val:0xfffffff6ffffffdf;  op2val:0xfffff7ffffffffbf
TEST_PKRR_OP(kmda32, x18, x25, x1, 0x0000000000000000, 0xfffffff6ffffffdf, 0xfffff7ffffffffbf, x25, x8, 176, x12)

inst_27:
// rs1==x3, rs2==x0, rd==x26, rs2_w1_val == -1025, rs2_w0_val == 536870912
// opcode: kmda32 ; op1:x3; op2:x0; dest:x26; op1val:0x7fffffff00000040;  op2val:0xfffffbff20000000
TEST_PKRR_OP(kmda32, x26, x3, x0, 0x0000000000000000, 0x7fffffff00000040, 0xfffffbff20000000, x3, x8, 192, x12)

inst_28:
// rs1==x19, rs2==x23, rd==x15, rs2_w1_val == -513, rs1_w0_val == -16385, rs2_w0_val == -17
// opcode: kmda32 ; op1:x19; op2:x23; dest:x15; op1val:0x80000000ffffbfff;  op2val:0xfffffdffffffffef
TEST_PKRR_OP(kmda32, x15, x19, x23, 0x0000000000000000, 0x80000000ffffbfff, 0xfffffdffffffffef, x19, x8, 208, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x26, rs2==x6, rd==x21, rs2_w1_val == -257, rs1_w0_val == 33554432, rs2_w0_val == -257, rs1_w1_val == 134217728
// opcode: kmda32 ; op1:x26; op2:x6; dest:x21; op1val:0x800000002000000;  op2val:0xfffffefffffffeff
TEST_PKRR_OP(kmda32, x21, x26, x6, 0x0000000000000000, 0x800000002000000, 0xfffffefffffffeff, x26, x1, 0, x2)

inst_30:
// rs1==x6, rs2==x10, rd==x19, rs2_w1_val == -129, rs1_w1_val == -4097, rs1_w0_val == -524289
// opcode: kmda32 ; op1:x6; op2:x10; dest:x19; op1val:0xffffeffffff7ffff;  op2val:0xffffff7ffffffffc
TEST_PKRR_OP(kmda32, x19, x6, x10, 0x0000000000000000, 0xffffeffffff7ffff, 0xffffff7ffffffffc, x6, x1, 16, x2)

inst_31:
// rs1==x14, rs2==x7, rd==x27, rs2_w1_val == -65, 
// opcode: kmda32 ; op1:x14; op2:x7; dest:x27; op1val:0x000800fffffff6;  op2val:0xffffffbf01000000
TEST_PKRR_OP(kmda32, x27, x14, x7, 0x0000000000000000, 0x000800fffffff6, 0xffffffbf01000000, x14, x1, 32, x2)

inst_32:
// rs2_w1_val == -33, rs1_w1_val == -524289, rs2_w0_val == -536870913
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff80000000;  op2val:0xffffffdfdfffffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff80000000, 0xffffffdfdfffffff, x30, x1, 48, x2)

inst_33:
// rs2_w1_val == -17, rs1_w1_val == 4194304, rs1_w0_val == -1025
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffbff;  op2val:0xffffffef01000000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x400000fffffbff, 0xffffffef01000000, x30, x1, 64, x2)

inst_34:
// rs2_w1_val == -9, rs1_w0_val == -257
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffffeff;  op2val:0xfffffff700000006
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x000800fffffeff, 0xfffffff700000006, x30, x1, 80, x2)

inst_35:
// rs2_w1_val == -5, rs2_w0_val == 64, rs1_w1_val == -16777217
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffc0000000;  op2val:0xfffffffb00000040
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfeffffffc0000000, 0xfffffffb00000040, x30, x1, 96, x2)

inst_36:
// rs2_w1_val == -3, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff63fffffff;  op2val:0xfffffffdfffffff9
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffffff63fffffff, 0xfffffffdfffffff9, x30, x1, 112, x2)

inst_37:
// rs2_w1_val == -2, rs2_w0_val == 0, rs1_w0_val == -1048577
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005ffefffff;  op2val:0xfffffffe00000000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x000005ffefffff, 0xfffffffe00000000, x30, x1, 128, x2)

inst_38:
// rs2_w1_val == 1073741824, rs2_w0_val == 512, rs1_w0_val == 16384
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100004000;  op2val:0x4000000000000200
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x00000100004000, 0x4000000000000200, x30, x1, 144, x2)

inst_39:
// rs2_w1_val == 536870912, rs1_w1_val == -8193, rs2_w0_val == 32
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff80000000;  op2val:0x2000000000000020
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffffdfff80000000, 0x2000000000000020, x30, x1, 160, x2)

inst_40:
// rs2_w1_val == 268435456, rs2_w0_val == 33554432, rs1_w0_val == -1073741825
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffbfffffff;  op2val:0x1000000002000000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x7fffffffbfffffff, 0x1000000002000000, x30, x1, 176, x2)

inst_41:
// rs2_w1_val == 134217728, rs2_w0_val == -65537
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffffeff;  op2val:0x8000000fffeffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x000020fffffeff, 0x8000000fffeffff, x30, x1, 192, x2)

inst_42:
// rs2_w1_val == 67108864, rs1_w1_val == -4194305
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffbfffff;  op2val:0x4000000fffffff9
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffbfffffffbfffff, 0x4000000fffffff9, x30, x1, 208, x2)

inst_43:
// rs2_w1_val == 33554432, rs1_w0_val == -129, rs1_w1_val == 33554432
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000ffffff7f;  op2val:0x200000000000007
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x2000000ffffff7f, 0x200000000000007, x30, x1, 224, x2)

inst_44:
// rs2_w1_val == 16777216, rs1_w1_val == -1431655766
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa08000000;  op2val:0x100000000080000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa08000000, 0x100000000080000, x30, x1, 240, x2)

inst_45:
// rs2_w1_val == 8388608, rs1_w0_val == 131072, rs1_w1_val == -2
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00020000;  op2val:0x80000000000200
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00020000, 0x80000000000200, x30, x1, 256, x2)

inst_46:
// rs2_w1_val == 4194304, rs2_w0_val == 128
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffdffffff;  op2val:0x40000000000080
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffffeffffdffffff, 0x40000000000080, x30, x1, 272, x2)

inst_47:
// rs2_w1_val == 2097152, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800c0000000;  op2val:0x200000ffffbfff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x000800c0000000, 0x200000ffffbfff, x30, x1, 288, x2)

inst_48:
// rs2_w1_val == 1048576, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000003;  op2val:0x10000000000020
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x00000600000003, 0x10000000000020, x30, x1, 304, x2)

inst_49:
// rs2_w1_val == 262144, rs1_w1_val == -33
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffdffff;  op2val:0x04000000000080
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffffffdffffdffff, 0x04000000000080, x30, x1, 320, x2)

inst_50:
// rs2_w1_val == 131072, rs1_w1_val == -5, rs2_w0_val == 1073741824
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000003;  op2val:0x02000040000000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000003, 0x02000040000000, x30, x1, 336, x2)

inst_51:
// rs2_w1_val == 65536, rs1_w0_val == -8388609
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffff7fffff;  op2val:0x01000000000010
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x3fffffffff7fffff, 0x01000000000010, x30, x1, 352, x2)

inst_52:
// rs2_w1_val == 32768, rs2_w0_val == -3, rs1_w1_val == 2
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000006;  op2val:0x008000fffffffd
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x00000200000006, 0x008000fffffffd, x30, x1, 368, x2)

inst_53:
// rs2_w1_val == 16384, rs1_w1_val == 65536
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffffff7;  op2val:0x00400000000005
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x010000fffffff7, 0x00400000000005, x30, x1, 384, x2)

inst_54:
// rs1_w0_val == 16777216, rs1_w1_val == -131073
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff01000000;  op2val:0xdffffffffeffffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffdffff01000000, 0xdffffffffeffffff, x30, x1, 400, x2)

inst_55:
// rs1_w0_val == 1048576, rs1_w1_val == 67108864
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000100000;  op2val:0xffefffffffdfffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x400000000100000, 0xffefffffffdfffff, x30, x1, 416, x2)

inst_56:
// rs1_w0_val == 32768, rs1_w1_val == 2097152, rs2_w1_val == 16, rs2_w0_val == 16384
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000008000;  op2val:0x00001000004000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x20000000008000, 0x00001000004000, x30, x1, 432, x2)

inst_57:
// rs1_w0_val == 8192, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00002000;  op2val:0xbfffffff00000002
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00002000, 0xbfffffff00000002, x30, x1, 448, x2)

inst_58:
// rs1_w0_val == 4096, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700001000;  op2val:0xfffffbff00000005
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffffff700001000, 0xfffffbff00000005, x30, x1, 464, x2)

inst_59:
// rs1_w0_val == 2048, rs1_w1_val == -2097153
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000800;  op2val:0x3fffffffc0000000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000800, 0x3fffffffc0000000, x30, x1, 480, x2)

inst_60:
// rs1_w0_val == 1024, rs1_w1_val == 64
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000400;  op2val:0xffffff7f00000040
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x00004000000400, 0xffffff7f00000040, x30, x1, 496, x2)

inst_61:
// rs1_w0_val == 512, rs2_w0_val == 2097152
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000200;  op2val:0xfffffffb00200000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffffff700000200, 0xfffffffb00200000, x30, x1, 512, x2)

inst_62:
// rs1_w0_val == 256, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000100;  op2val:0x010000c0000000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x01000000000100, 0x010000c0000000, x30, x1, 528, x2)

inst_63:
// rs1_w0_val == 32, rs1_w1_val == 1073741824
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000020;  op2val:0xfffffff9ffffff7f
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x4000000000000020, 0xfffffff9ffffff7f, x30, x1, 544, x2)

inst_64:
// rs1_w0_val == 16, rs1_w1_val == 131072
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000010;  op2val:0x000080ffffffdf
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x02000000000010, 0x000080ffffffdf, x30, x1, 560, x2)

inst_65:
// rs1_w0_val == 8, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000008;  op2val:0xbfffffff00000006
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffefffff00000008, 0xbfffffff00000006, x30, x1, 576, x2)

inst_66:
// rs1_w0_val == 4, rs2_w0_val == 8388608
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000004;  op2val:0xffffbfff00800000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000004, 0xffffbfff00800000, x30, x1, 592, x2)

inst_67:
// rs1_w0_val == 2, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000002;  op2val:0x200000feffffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x40000000000002, 0x200000feffffff, x30, x1, 608, x2)

inst_68:
// rs1_w0_val == 1, rs2_w1_val == 256
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000001;  op2val:0x00010000800000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffffff800000001, 0x00010000800000, x30, x1, 624, x2)

inst_69:
// rs1_w0_val == 0, rs2_w1_val == 2048, rs2_w0_val == -524289
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000000;  op2val:0x000800fff7ffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffffefff00000000, 0x000800fff7ffff, x30, x1, 640, x2)

inst_70:
// rs1_w0_val == -1, rs1_w1_val == 1024
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffffffff;  op2val:0xfffffdff00000800
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x000400ffffffff, 0xfffffdff00000800, x30, x1, 656, x2)

inst_71:
// rs2_w1_val == 8192, rs1_w1_val == 268435456
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000c0000000;  op2val:0x002000fffffffd
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x10000000c0000000, 0x002000fffffffd, x30, x1, 672, x2)

inst_72:
// rs2_w1_val == 4096, rs2_w0_val == -5, rs1_w1_val == -17, rs1_w0_val == -65
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffffffbf;  op2val:0x001000fffffffb
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffffffefffffffbf, 0x001000fffffffb, x30, x1, 688, x2)

inst_73:
// rs2_w1_val == 1024, rs1_w0_val == -536870913
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040dfffffff;  op2val:0x00040000000004
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x000040dfffffff, 0x00040000000004, x30, x1, 704, x2)

inst_74:
// rs2_w1_val == 512, rs1_w1_val == -1073741825
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000006;  op2val:0x00020000000080
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000006, 0x00020000000080, x30, x1, 720, x2)

inst_75:
// rs2_w1_val == 64, rs1_w1_val == -129
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffffbf;  op2val:0x000040dfffffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffffbf, 0x000040dfffffff, x30, x1, 736, x2)

inst_76:
// rs2_w1_val == 32, rs1_w1_val == 0
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffffff8;  op2val:0x00002000000200
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x000000fffffff8, 0x00002000000200, x30, x1, 752, x2)

inst_77:
// rs2_w1_val == 8, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000008000000;  op2val:0x00000800000005
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x04000008000000, 0x00000800000005, x30, x1, 768, x2)

inst_78:
// rs2_w1_val == 4, rs1_w1_val == 16
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffffffbf;  op2val:0x00000400000800
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x000010ffffffbf, 0x00000400000800, x30, x1, 784, x2)

inst_79:
// rs2_w1_val == 2, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000ffffbfff;  op2val:0x000002ffffbfff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x080000ffffbfff, 0x000002ffffbfff, x30, x1, 800, x2)

inst_80:
// rs2_w1_val == 1, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ffffff7f;  op2val:0x00000102000000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x8000000ffffff7f, 0x00000102000000, x30, x1, 816, x2)

inst_81:
// rs2_w1_val == 0, rs1_w0_val == -67108865, rs1_w1_val == 4
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004fbffffff;  op2val:0x00000000002000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x000004fbffffff, 0x00000000002000, x30, x1, 832, x2)

inst_82:
// rs2_w1_val == -1, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8feffffff;  op2val:0xffffffff00000400
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffffff8feffffff, 0xffffffff00000400, x30, x1, 848, x2)

inst_83:
// rs2_w0_val == -1431655766, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000200;  op2val:0xfffff7ffaaaaaaaa
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xc000000000000200, 0xfffff7ffaaaaaaaa, x30, x1, 864, x2)

inst_84:
// rs2_w0_val == 1431655765, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffffffdf;  op2val:0x00000155555555
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffdfffffffffffdf, 0x00000155555555, x30, x1, 880, x2)

inst_85:
// rs2_w0_val == 2147483647, rs1_w0_val == -5
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffffffffb;  op2val:0xefffffff7fffffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffdfffffffffffb, 0xefffffff7fffffff, x30, x1, 896, x2)

inst_86:
// rs2_w0_val == -1073741825, rs1_w1_val == -65
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf01000000;  op2val:0x000400bfffffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffffffbf01000000, 0x000400bfffffff, x30, x1, 912, x2)

inst_87:
// rs2_w0_val == -268435457, rs1_w1_val == -65537
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffffbf;  op2val:0xfffffff6efffffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffffbf, 0xfffffff6efffffff, x30, x1, 928, x2)

inst_88:
// rs2_w0_val == -134217729, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff08000000;  op2val:0x100000f7ffffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffbfffff08000000, 0x100000f7ffffff, x30, x1, 944, x2)

inst_89:
// rs2_w0_val == 262144, rs1_w0_val == -1431655766
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9aaaaaaaa;  op2val:0xfffffff700040000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffffff9aaaaaaaa, 0xfffffff700040000, x30, x1, 960, x2)

inst_90:
// rs2_w0_val == 131072, rs1_w1_val == -262145
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000005;  op2val:0xfffff7ff00020000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000005, 0xfffff7ff00020000, x30, x1, 976, x2)

inst_91:
// rs2_w0_val == 65536, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffffdf;  op2val:0x00004000010000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffffdf, 0x00004000010000, x30, x1, 992, x2)

inst_92:
// rs2_w0_val == 32768, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000010;  op2val:0x00004000008000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x00000700000010, 0x00004000008000, x30, x1, 1008, x2)

inst_93:
// rs2_w0_val == 4096, rs1_w1_val == -134217729
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffff7fffff;  op2val:0x00020000001000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xf7ffffffff7fffff, 0x00020000001000, x30, x1, 1024, x2)

inst_94:
// rs2_w0_val == 256, rs1_w0_val == 536870912
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000620000000;  op2val:0x00000000000100
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x00000620000000, 0x00000000000100, x30, x1, 1040, x2)

inst_95:
// rs2_w0_val == 8, rs1_w0_val == -4097
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffefff;  op2val:0xfeffffff00000008
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x80000000ffffefff, 0xfeffffff00000008, x30, x1, 1056, x2)

inst_96:
// rs2_w0_val == 1, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000001000000;  op2val:0x00000400000001
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x200000001000000, 0x00000400000001, x30, x1, 1072, x2)

inst_97:
// rs1_w1_val == 1431655765, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000040;  op2val:0x2000000000002000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x5555555500000040, 0x2000000000002000, x30, x1, 1088, x2)

inst_98:
// rs1_w1_val == -536870913, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffeff;  op2val:0x00000300000007
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffeff, 0x00000300000007, x30, x1, 1104, x2)

inst_99:
// rs1_w1_val == -67108865, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00001000;  op2val:0xffbfffff55555555
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00001000, 0xffbfffff55555555, x30, x1, 1120, x2)

inst_100:
// rs1_w1_val == -33554433, rs2_w0_val == -4097
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffeffffff;  op2val:0x000400ffffefff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfdfffffffeffffff, 0x000400ffffefff, x30, x1, 1136, x2)

inst_101:
// rs1_w1_val == -8388609, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00008000;  op2val:0x08000000040000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00008000, 0x08000000040000, x30, x1, 1152, x2)

inst_102:
// rs1_w1_val == -32769, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffffff7;  op2val:0x200000fffffeff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffffff7, 0x200000fffffeff, x30, x1, 1168, x2)

inst_103:
// rs1_w1_val == -16385, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff08000000;  op2val:0xfffeffff00008000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffffbfff08000000, 0xfffeffff00008000, x30, x1, 1184, x2)

inst_104:
// rs1_w1_val == -2049, rs1_w0_val == 268435456
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff10000000;  op2val:0xfffefffffffffffa
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff10000000, 0xfffefffffffffffa, x30, x1, 1200, x2)

inst_105:
// rs1_w1_val == -1025, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000800;  op2val:0xffdfffff55555555
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000800, 0xffdfffff55555555, x30, x1, 1216, x2)

inst_106:
// rs1_w1_val == -513, rs2_w0_val == -9
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff20000000;  op2val:0x000200fffffff7
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffffdff20000000, 0x000200fffffff7, x30, x1, 1232, x2)

inst_107:
// rs1_w1_val == -257, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000009;  op2val:0x000020c0000000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000009, 0x000020c0000000, x30, x1, 1248, x2)

inst_108:
// rs1_w1_val == -3, rs2_w0_val == 4194304, rs1_w0_val == -268435457
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdefffffff;  op2val:0xff7fffff00400000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffffffdefffffff, 0xff7fffff00400000, x30, x1, 1264, x2)

inst_109:
// rs1_w1_val == 536870912, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000800;  op2val:0xffffffef00000007
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x2000000000000800, 0xffffffef00000007, x30, x1, 1280, x2)

inst_110:
// rs1_w1_val == 1048576, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffffffff;  op2val:0x00000600000006
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x100000ffffffff, 0x00000600000006, x30, x1, 1296, x2)

inst_111:
// rs1_w1_val == 16384, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000040000;  op2val:0xdfffffff00000007
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x00400000040000, 0xdfffffff00000007, x30, x1, 1312, x2)

inst_112:
// rs1_w1_val == 8192, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000000;  op2val:0xbfffffff00020000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x00200000000000, 0xbfffffff00020000, x30, x1, 1328, x2)

inst_113:
// rs2_w0_val == -67108865, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000004;  op2val:0x2000000fbffffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000004, 0x2000000fbffffff, x30, x1, 1344, x2)

inst_114:
// rs2_w0_val == -33554433, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000400;  op2val:0xffdffffffdffffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000400, 0xffdffffffdffffff, x30, x1, 1360, x2)

inst_115:
// rs1_w0_val == 1431655765, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000055555555;  op2val:0xffffffdffffffbff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x08000055555555, 0xffffffdffffffbff, x30, x1, 1376, x2)

inst_116:
// rs1_w0_val == 2147483647, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa7fffffff;  op2val:0x3fffffff00040000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa7fffffff, 0x3fffffff00040000, x30, x1, 1392, x2)

inst_117:
// rs2_w0_val == -1048577, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000ffffffdf;  op2val:0xfdffffffffefffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x2000000ffffffdf, 0xfdffffffffefffff, x30, x1, 1408, x2)

inst_118:
// rs1_w0_val == -134217729, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffff7ffffff;  op2val:0xfdffffff00040000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffbffffff7ffffff, 0xfdffffff00040000, x30, x1, 1424, x2)

inst_119:
// rs2_w0_val == -262145, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8fffffff9;  op2val:0xfffffff7fffbffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffffff8fffffff9, 0xfffffff7fffbffff, x30, x1, 1440, x2)

inst_120:
// rs2_w0_val == -131073, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000f7ffffff;  op2val:0x000100fffdffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x000000f7ffffff, 0x000100fffdffff, x30, x1, 1456, x2)

inst_121:
// rs2_w0_val == -32769, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600000002;  op2val:0x80000000ffff7fff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffffff600000002, 0x80000000ffff7fff, x30, x1, 1472, x2)

inst_122:
// rs2_w0_val == -8193, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00008000;  op2val:0x400000ffffdfff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffffefff00008000, 0x400000ffffdfff, x30, x1, 1488, x2)

inst_123:
// rs1_w0_val == -2097153, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffdfffff;  op2val:0xc0000000fffffdff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffffffefffdfffff, 0xc0000000fffffdff, x30, x1, 1504, x2)

inst_124:
// rs2_w0_val == -2049, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaadfffffff;  op2val:0x000005fffff7ff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaadfffffff, 0x000005fffff7ff, x30, x1, 1520, x2)

inst_125:
// rs1_w0_val == -262145, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000fffbffff;  op2val:0xfdfffffffffffff9
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xc0000000fffbffff, 0xfdfffffffffffff9, x30, x1, 1536, x2)

inst_126:
// rs1_w0_val == -65537, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffffffeffff;  op2val:0x002000bfffffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x3ffffffffffeffff, 0x002000bfffffff, x30, x1, 1552, x2)

inst_127:
// rs1_w0_val == -32769, rs1_w1_val == 16777216
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000ffff7fff;  op2val:0x55555555ffffbfff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x1000000ffff7fff, 0x55555555ffffbfff, x30, x1, 1568, x2)

inst_128:
// rs1_w0_val == -8193, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffdfff;  op2val:0x00080000000200
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffdfff, 0x00080000000200, x30, x1, 1584, x2)

inst_129:
// rs1_w0_val == -2049, rs2_w0_val == -2
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffff7ff;  op2val:0xfffffffcfffffffe
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfefffffffffff7ff, 0xfffffffcfffffffe, x30, x1, 1600, x2)

inst_130:
// rs1_w0_val == -513, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffffdff;  op2val:0x000001feffffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffdff, 0x000001feffffff, x30, x1, 1616, x2)

inst_131:
// rs2_w0_val == -2147483648, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffdffff;  op2val:0x400000080000000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffdffff, 0x400000080000000, x30, x1, 1632, x2)

inst_132:
// rs2_w0_val == 268435456, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000040;  op2val:0xfffeffff10000000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000040, 0xfffeffff10000000, x30, x1, 1648, x2)

inst_133:
// rs1_w0_val == -17, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffffffef;  op2val:0x000100fffffffc
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffffbffffffffef, 0x000100fffffffc, x30, x1, 1664, x2)

inst_134:
// rs2_w0_val == 134217728, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000010;  op2val:0xfdffffff08000000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000010, 0xfdffffff08000000, x30, x1, 1680, x2)

inst_135:
// rs2_w0_val == 67108864, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000800;  op2val:0xfffffdff04000000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x20000000000800, 0xfffffdff04000000, x30, x1, 1696, x2)

inst_136:
// rs1_w0_val == -2, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffffffe;  op2val:0xfffffbff02000000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xffdffffffffffffe, 0xfffffbff02000000, x30, x1, 1712, x2)

inst_137:
// rs1_w0_val == 1073741824, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc40000000;  op2val:0xffffffdf04000000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffffffc40000000, 0xffffffdf04000000, x30, x1, 1728, x2)

inst_138:
// rs1_w0_val == 67108864, 
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000004000000;  op2val:0xffffefff00000008
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x8000000004000000, 0xffffefff00000008, x30, x1, 1744, x2)

inst_139:
// rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w1_val == 524288, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 2097152
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900200000;  op2val:0x08000000000005
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xfffffff900200000, 0x08000000000005, x30, x1, 1760, x2)

inst_140:
// rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w1_val == 262144, rs1_w0_val == 262144, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w0_val == -1, rs2_w1_val == -524289
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000040000;  op2val:0xfff7ffffffffffff
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x04000000040000, 0xfff7ffffffffffff, x30, x1, 1776, x2)

inst_141:
// rs2_w1_val == -2097153, rs1_w1_val == -268435457, rs2_w0_val == -33
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffdffffff;  op2val:0xffdfffffffffffdf
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0xeffffffffdffffff, 0xffdfffffffffffdf, x30, x1, 1792, x2)

inst_142:
// rs2_w1_val == -1025, rs2_w0_val == 536870912
// opcode: kmda32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000040;  op2val:0xfffffbff20000000
TEST_PKRR_OP(kmda32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000040, 0xfffffbff20000000, x30, x1, 1808, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x8_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 228*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
