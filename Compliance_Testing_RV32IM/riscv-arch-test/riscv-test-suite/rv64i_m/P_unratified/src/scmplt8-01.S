
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the scmplt8 instruction of the RISC-V RV64PZicsr extension for the scmplt8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",scmplt8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1 == rd != rs2, rs1==x24, rs2==x25, rd==x24, rs1_b0_val == -128, rs1_b7_val != rs2_b7_val, rs1_b5_val == 64, rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b6_val != rs2_b6_val, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b5_val != rs2_b5_val, rs2_b3_val == 32, rs1_b4_val == 85, rs1_b5_val > 0 and rs2_b5_val < 0, rs1_b4_val != rs2_b4_val, rs1_b4_val > 0 and rs2_b4_val < 0, rs2_b2_val == -65, rs1_b3_val != rs2_b3_val, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b1_val != rs2_b1_val, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b0_val != rs2_b0_val, rs1_b3_val == 1, rs2_b1_val == 4, rs1_b1_val == 127, rs2_b0_val == 0, rs2_b6_val == 32, rs1_b7_val == 64, rs2_b5_val == -17, rs1_b6_val == 16, rs2_b4_val == -9
// opcode: scmplt8 ; op1:x24; op2:x25; dest:x24; op1val:0x4010405501097f80;  op2val:0xfc20eff720bf0400
TEST_RR_OP(scmplt8, x24, x24, x25, 0x0000000000000000, 0x4010405501097f80, 0xfc20eff720bf0400, x9, 0, x7)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x12, rs2==x23, rd==x8, rs1_b7_val == rs2_b7_val, rs2_b7_val == 4, rs1_b7_val == 4, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b2_val == 4, rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b1_val < 0 and rs2_b1_val > 0, rs2_b3_val == -9, rs1_b6_val < 0 and rs2_b6_val < 0, rs1_b6_val == -5, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b1_val == -17, rs1_b3_val == 8, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b4_val < 0 and rs2_b4_val < 0, rs2_b5_val == -86, rs1_b3_val > 0 and rs2_b3_val < 0
// opcode: scmplt8 ; op1:x12; op2:x23; dest:x8; op1val:0x4fbc0f60804ef80;  op2val:0x4faaafaf7070906
TEST_RR_OP(scmplt8, x8, x12, x23, 0x0000000000000000, 0x4fbc0f60804ef80, 0x4faaafaf7070906, x9, 8, x7)

inst_2:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x1, rs1_b7_val < 0 and rs2_b7_val > 0, rs2_b0_val == -65, rs1_b5_val == -128, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b3_val == 2, rs1_b1_val == -3, rs1_b7_val == -33, rs1_b4_val == -128, rs1_b6_val == -1, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b2_val == 127, rs2_b5_val == -9
// opcode: scmplt8 ; op1:x30; op2:x30; dest:x1; op1val:0xdfff8080f67ffd3f;  op2val:0x5c0f7f9020703bf
TEST_RR_OP(scmplt8, x1, x30, x30, 0x0000000000000000, 0xdfff8080f67ffd3f, 0x5c0f7f9020703bf, x9, 16, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x17, rs2==x17, rd==x17, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b3_val == -33, rs2_b6_val == 85, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b0_val < 0 and rs2_b0_val < 0, rs2_b4_val == 85, rs2_b1_val == -2, rs2_b7_val == -33, rs1_b4_val < 0 and rs2_b4_val > 0, rs2_b2_val == -86, rs1_b1_val == 4, rs2_b5_val == -65
// opcode: scmplt8 ; op1:x17; op2:x17; dest:x17; op1val:0xfc07f9f9dffc04c0;  op2val:0xdf55bf5507aafefc
TEST_RR_OP(scmplt8, x17, x17, x17, 0x0000000000000000, 0xfc07f9f9dffc04c0, 0xdf55bf5507aafefc, x9, 24, x7)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x20, rd==x20, rs1_b6_val == rs2_b6_val, rs1_b4_val == -1, rs1_b5_val == -2, rs2_b5_val == 32, rs1_b0_val == 4, rs2_b6_val == -2, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b6_val == -2, rs1_b1_val == -2, rs1_b7_val == 127, rs2_b1_val == 8, rs2_b2_val == -3, rs1_b2_val == -2
// opcode: scmplt8 ; op1:x5; op2:x20; dest:x20; op1val:0x7ffefefff9fefe04;  op2val:0xf6fe20fa20fd08bf
TEST_RR_OP(scmplt8, x20, x5, x20, 0x0000000000000000, 0x7ffefefff9fefe04, 0xf6fe20fa20fd08bf, x9, 32, x7)

inst_5:
// rs1==x20, rs2==x16, rd==x13, rs1_b6_val < 0 and rs2_b6_val > 0, rs2_b3_val == -17, rs2_b0_val == 64, rs1_b6_val == -17, rs1_b3_val == 16, rs1_b1_val == 16, rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b4_val == 8, rs2_b7_val == 64, rs1_b7_val == 32
// opcode: scmplt8 ; op1:x20; op2:x16; dest:x13; op1val:0x20ef0609100910f9;  op2val:0x4055bf08efbff940
TEST_RR_OP(scmplt8, x13, x20, x16, 0x0000000000000000, 0x20ef0609100910f9, 0x4055bf08efbff940, x9, 40, x7)

inst_6:
// rs1==x4, rs2==x5, rd==x27, rs1_b6_val > 0 and rs2_b6_val < 0, rs1_b7_val == 1, rs2_b6_val == -3, rs2_b7_val == 127, rs1_b3_val == 0, rs2_b5_val == 127, rs2_b2_val == -5, rs1_b4_val == 2, rs2_b4_val == 0
// opcode: scmplt8 ; op1:x4; op2:x5; dest:x27; op1val:0x106fe0200fc0480;  op2val:0x7ffd7f0003fbf93f
TEST_RR_OP(scmplt8, x27, x4, x5, 0x0000000000000000, 0x106fe0200fc0480, 0x7ffd7f0003fbf93f, x9, 48, x7)

inst_7:
// rs1==x23, rs2==x28, rd==x14, rs1_b5_val == rs2_b5_val, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b6_val == 127, rs1_b3_val == -5, rs2_b0_val == 32, rs2_b4_val == -33, rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b2_val == 85, rs1_b2_val == -17, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b7_val == 16
// opcode: scmplt8 ; op1:x23; op2:x28; dest:x14; op1val:0x10073ffafbef3fc0;  op2val:0xf87f3fdff655f620
TEST_RR_OP(scmplt8, x14, x23, x28, 0x0000000000000000, 0x10073ffafbef3fc0, 0xf87f3fdff655f620, x9, 56, x7)

inst_8:
// rs1==x29, rs2==x26, rd==x2, rs1_b4_val == rs2_b4_val, rs2_b4_val == 16, rs2_b5_val == 8, rs1_b4_val == 16, rs1_b3_val == 32, rs2_b0_val == 1, rs2_b6_val == 0, rs1_b1_val == 2, rs1_b3_val == rs2_b3_val, rs1_b2_val == -9, rs1_b7_val == 8
// opcode: scmplt8 ; op1:x29; op2:x26; dest:x2; op1val:0x807f81020f702f8;  op2val:0x40008102009fa01
TEST_RR_OP(scmplt8, x2, x29, x26, 0x0000000000000000, 0x807f81020f702f8, 0x40008102009fa01, x9, 64, x7)

inst_9:
// rs1==x8, rs2==x15, rd==x5, rs1_b2_val == rs2_b2_val, rs1_b6_val == 64, rs2_b4_val == -17, rs1_b3_val == -65, rs2_b7_val == -17
// opcode: scmplt8 ; op1:x8; op2:x15; dest:x5; op1val:0x540c0c0bf09c0fc;  op2val:0xef0908eff60903f6
TEST_RR_OP(scmplt8, x5, x8, x15, 0x0000000000000000, 0x540c0c0bf09c0fc, 0xef0908eff60903f6, x9, 72, x7)

inst_10:
// rs1==x28, rs2==x27, rd==x26, rs1_b1_val == rs2_b1_val, rs1_b0_val == -17, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b3_val == -3, rs2_b5_val == 1, rs2_b0_val == 8, rs1_b2_val == -86, rs2_b2_val == -33
// opcode: scmplt8 ; op1:x28; op2:x27; dest:x26; op1val:0xfc060655fdaafeef;  op2val:0x40c00110f7dffe08
TEST_RR_OP(scmplt8, x26, x28, x27, 0x0000000000000000, 0xfc060655fdaafeef, 0x40c00110f7dffe08, x9, 80, x7)

inst_11:
// rs1==x26, rs2==x14, rd==x0, rs1_b0_val == rs2_b0_val, rs1_b0_val == -65, rs1_b3_val == 85, rs2_b5_val == 64, rs1_b6_val == -86, rs2_b1_val == -86, rs2_b4_val == -5
// opcode: scmplt8 ; op1:x26; op2:x14; dest:x0; op1val:0x40aac0055506efbf;  op2val:0x60540fb3fbfaabf
TEST_RR_OP(scmplt8, x0, x26, x14, 0x0000000000000000, 0x40aac0055506efbf, 0x60540fb3fbfaabf, x9, 88, x7)

inst_12:
// rs1==x21, rs2==x19, rd==x6, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b2_val == 64, rs2_b7_val == 2, rs2_b3_val == -86, rs1_b5_val == -5, rs1_b6_val == 85, rs1_b1_val == -86, rs1_b7_val == -86, rs2_b1_val == 64, rs1_b2_val == -3
// opcode: scmplt8 ; op1:x21; op2:x19; dest:x6; op1val:0xaa55fb03bffdaa09;  op2val:0x2f9f9faaa404006
TEST_RR_OP(scmplt8, x6, x21, x19, 0x0000000000000000, 0xaa55fb03bffdaa09, 0x2f9f9faaa404006, x9, 96, x7)

inst_13:
// rs1==x15, rs2==x2, rd==x23, rs2_b7_val == -86, rs2_b0_val == -5, rs2_b3_val == 16, rs1_b4_val == -9, rs2_b2_val == -2, rs1_b2_val == -128
// opcode: scmplt8 ; op1:x15; op2:x2; dest:x23; op1val:0x1fa40f70780f907;  op2val:0xaa7f3ff810fefcfb
TEST_RR_OP(scmplt8, x23, x15, x2, 0x0000000000000000, 0x1fa40f70780f907, 0xaa7f3ff810fefcfb, x9, 104, x7)

inst_14:
// rs1==x11, rs2==x24, rd==x10, rs2_b7_val == 85, rs2_b6_val == -33, rs2_b5_val == 0, rs1_b6_val == -3, rs2_b1_val == -17, rs1_b1_val == -9, rs1_b4_val == -65, rs2_b0_val == -86
// opcode: scmplt8 ; op1:x11; op2:x24; dest:x10; op1val:0x5fd07bf1003f706;  op2val:0x55df00f620fcefaa
TEST_RR_OP(scmplt8, x10, x11, x24, 0x0000000000000000, 0x5fd07bf1003f706, 0x55df00f620fcefaa, x9, 112, x7)

inst_15:
// rs1==x3, rs2==x10, rd==x28, rs2_b7_val == -65, rs2_b2_val == 32, rs1_b0_val == -2, rs2_b5_val == 4, rs2_b1_val == 85, rs2_b6_val == -1
// opcode: scmplt8 ; op1:x3; op2:x10; dest:x28; op1val:0xc0aafe06fdfc3ffe;  op2val:0xbfff0409032055aa
TEST_RR_OP(scmplt8, x28, x3, x10, 0x0000000000000000, 0xc0aafe06fdfc3ffe, 0xbfff0409032055aa, x9, 120, x7)

inst_16:
// rs1==x16, rs2==x4, rd==x7, rs2_b7_val == -9, rs2_b6_val == -86, rs2_b2_val == -1, rs1_b0_val == 0, rs2_b3_val == 8, rs2_b1_val == -5, rs1_b4_val == -2, rs1_b5_val == -17
// opcode: scmplt8 ; op1:x16; op2:x4; dest:x7; op1val:0x340effe10fec000;  op2val:0xf7aaef0008fffbfc
TEST_RR_OP(scmplt8, x7, x16, x4, 0x0000000000000000, 0x340effe10fec000, 0xf7aaef0008fffbfc, x9, 128, x17)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_17:
// rs1==x9, rs2==x0, rd==x4, rs2_b7_val == -5, rs2_b1_val == -3, rs1_b2_val == 16, rs2_b0_val == 4, rs1_b4_val == -33
// opcode: scmplt8 ; op1:x9; op2:x0; dest:x4; op1val:0xaa07f9df06103f04;  op2val:0xfb09f7fc05bffd04
TEST_RR_OP(scmplt8, x4, x9, x0, 0x0000000000000000, 0xaa07f9df06103f04, 0xfb09f7fc05bffd04, x5, 0, x17)

inst_18:
// rs1==x2, rs2==x6, rd==x11, rs2_b7_val == -3, rs2_b0_val == -17, rs2_b3_val == 127, rs1_b0_val == -9, rs1_b6_val == 127, rs2_b4_val == 32, rs1_b5_val == 85, rs1_b7_val == -128
// opcode: scmplt8 ; op1:x2; op2:x6; dest:x11; op1val:0x807f55050707fef7;  op2val:0xfd05fa207ffbfcef
TEST_RR_OP(scmplt8, x11, x2, x6, 0x0000000000000000, 0x807f55050707fef7, 0xfd05fa207ffbfcef, x5, 8, x17)

inst_19:
// rs1==x14, rs2==x13, rd==x19, rs2_b7_val == -2, rs1_b7_val == -5, rs1_b5_val == 4, rs1_b2_val == 64, rs1_b3_val == -1
// opcode: scmplt8 ; op1:x14; op2:x13; dest:x19; op1val:0xfbf60410ff40f805;  op2val:0xfe097f00205540f9
TEST_RR_OP(scmplt8, x19, x14, x13, 0x0000000000000000, 0xfbf60410ff40f805, 0xfe097f00205540f9, x5, 16, x17)

inst_20:
// rs1==x27, rs2==x1, rd==x18, rs2_b7_val == -128, rs1_b5_val == -86, rs1_b7_val == 0, rs1_b1_val == -33, rs2_b3_val == -33
// opcode: scmplt8 ; op1:x27; op2:x1; dest:x18; op1val:0x55aaf909c0dff9;  op2val:0x80000007df3ff606
TEST_RR_OP(scmplt8, x18, x27, x1, 0x0000000000000000, 0x55aaf909c0dff9, 0x80000007df3ff606, x5, 24, x17)

inst_21:
// rs1==x31, rs2==x29, rd==x16, rs2_b7_val == 32, rs1_b2_val == 1, rs1_b0_val == 8, rs2_b3_val == -128, rs1_b7_val == -9, rs1_b5_val == -9
// opcode: scmplt8 ; op1:x31; op2:x29; dest:x16; op1val:0xf73ff755f801fe08;  op2val:0x207fbfdf80c05505
TEST_RR_OP(scmplt8, x16, x31, x29, 0x0000000000000000, 0xf73ff755f801fe08, 0x207fbfdf80c05505, x5, 32, x17)

inst_22:
// rs1==x22, rs2==x21, rd==x9, rs2_b7_val == 16, rs2_b4_val == -65, rs1_b2_val == 32, rs1_b7_val == -65
// opcode: scmplt8 ; op1:x22; op2:x21; dest:x9; op1val:0xbff9f9f70320f903;  op2val:0x10feaabf80bf0609
TEST_RR_OP(scmplt8, x9, x22, x21, 0x0000000000000000, 0xbff9f9f70320f903, 0x10feaabf80bf0609, x5, 40, x17)

inst_23:
// rs1==x10, rs2==x7, rd==x15, rs2_b7_val == 8, rs2_b5_val == -3, rs1_b7_val == -2, rs1_b6_val == 8, rs2_b4_val == 127
// opcode: scmplt8 ; op1:x10; op2:x7; dest:x15; op1val:0xfe080706073fc0f6;  op2val:0x8fefd7f0307f600
TEST_RR_OP(scmplt8, x15, x10, x7, 0x0000000000000000, 0xfe080706073fc0f6, 0x8fefd7f0307f600, x5, 48, x17)

inst_24:
// rs1==x25, rs2==x22, rd==x30, rs2_b7_val == 1, rs2_b2_val == 0, rs2_b3_val == -3, rs1_b3_val == -128, rs2_b0_val == 2, rs2_b1_val == 16, rs1_b5_val == -65
// opcode: scmplt8 ; op1:x25; op2:x22; dest:x30; op1val:0x7f40bf03807fdf05;  op2val:0x1feeff9fd001002
TEST_RR_OP(scmplt8, x30, x25, x22, 0x0000000000000000, 0x7f40bf03807fdf05, 0x1feeff9fd001002, x5, 56, x17)

inst_25:
// rs1==x0, rs2==x3, rd==x29, rs2_b7_val == 0, rs2_b4_val == -1, rs2_b1_val == 2, rs2_b5_val == -128, rs1_b4_val == 64
// opcode: scmplt8 ; op1:x0; op2:x3; dest:x29; op1val:0xbff9bf40fa80f780;  op2val:0x5580fff8060206
TEST_RR_OP(scmplt8, x29, x0, x3, 0x0000000000000000, 0xbff9bf40fa80f780, 0x5580fff8060206, x5, 64, x17)

inst_26:
// rs1==x19, rs2==x31, rd==x25, rs2_b7_val == -1, rs1_b5_val == -1, rs1_b1_val == -65, rs2_b1_val == -9, rs2_b6_val == 64, rs1_b6_val == 1
// opcode: scmplt8 ; op1:x19; op2:x31; dest:x25; op1val:0x701fff9f8fcbf06;  op2val:0xff40077ffa20f7fc
TEST_RR_OP(scmplt8, x25, x19, x31, 0x0000000000000000, 0x701fff9f8fcbf06, 0xff40077ffa20f7fc, x5, 72, x17)

inst_27:
// rs1==x1, rs2==x9, rd==x12, rs2_b6_val == -65, rs2_b3_val == 0, rs2_b4_val == -128, rs1_b2_val == -33, rs2_b1_val == 0, rs2_b2_val == -128
// opcode: scmplt8 ; op1:x1; op2:x9; dest:x12; op1val:0x3f3ff702fbdffcc0;  op2val:0xf9bf0480008000bf
TEST_RR_OP(scmplt8, x12, x1, x9, 0x0000000000000000, 0x3f3ff702fbdffcc0, 0xf9bf0480008000bf, x5, 80, x17)

inst_28:
// rs1==x13, rs2==x11, rd==x21, rs2_b6_val == -17, rs1_b5_val == 0, rs2_b0_val == 85
// opcode: scmplt8 ; op1:x13; op2:x11; dest:x21; op1val:0x9060009fc40f605;  op2val:0xdfefaa10efbffd55
TEST_RR_OP(scmplt8, x21, x13, x11, 0x0000000000000000, 0x9060009fc40f605, 0xdfefaa10efbffd55, x5, 88, x17)

inst_29:
// rs1==x18, rs2==x12, rd==x3, rs1_b5_val == -3, rs2_b1_val == 1, rs2_b6_val == -5, rs1_b0_val == 85
// opcode: scmplt8 ; op1:x18; op2:x12; dest:x3; op1val:0x8055fd5555f90955;  op2val:0xbffbeffaf78001f8
TEST_RR_OP(scmplt8, x3, x18, x12, 0x0000000000000000, 0x8055fd5555f90955, 0xbffbeffaf78001f8, x5, 96, x17)

inst_30:
// rs1==x6, rs2==x18, rd==x31, rs1_b5_val == 32, rs1_b0_val == -33, rs1_b7_val == 85, rs1_b2_val == 85, rs1_b6_val == 0, rs2_b2_val == -17
// opcode: scmplt8 ; op1:x6; op2:x18; dest:x31; op1val:0x550020f7fb55f6df;  op2val:0x1bffa2010ef003f
TEST_RR_OP(scmplt8, x31, x6, x18, 0x0000000000000000, 0x550020f7fb55f6df, 0x1bffa2010ef003f, x5, 104, x17)

inst_31:
// rs1==x7, rs2==x8, rd==x22, rs1_b5_val == 16, rs1_b3_val == 4, rs1_b6_val == 32
// opcode: scmplt8 ; op1:x7; op2:x8; dest:x22; op1val:0xfe2010f70407f780;  op2val:0x7ff9fd0920fb04f9
TEST_RR_OP(scmplt8, x22, x7, x8, 0x0000000000000000, 0xfe2010f70407f780, 0x7ff9fd0920fb04f9, x5, 112, x17)

inst_32:
// rs1_b5_val == 8, rs1_b0_val == 32, rs2_b6_val == 8
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xbff908df09faef20;  op2val:0xff0808ff20f8fa20
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xbff908df09faef20, 0xff0808ff20f8fa20, x5, 120, x17)

inst_33:
// rs1_b5_val == 2, rs1_b2_val == -1, rs1_b6_val == -65, rs2_b5_val == 85
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8bf028008ff0204;  op2val:0x9ef55eff820ef3f
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xf8bf028008ff0204, 0x9ef55eff820ef3f, x5, 128, x17)

inst_34:
// rs1_b5_val == 1, rs2_b4_val == 4, rs1_b1_val == 0, rs2_b6_val == 4
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x10801fe05c00020;  op2val:0xfb04fc0402aafefa
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0x10801fe05c00020, 0xfb04fc0402aafefa, x5, 136, x17)

inst_35:
// rs1_b4_val == -86, rs1_b0_val == 127
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f0808aa0410107f;  op2val:0x4005aaf6fa09f7f9
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0x7f0808aa0410107f, 0x4005aaf6fa09f7f9, x5, 144, x17)

inst_36:
// rs1_b4_val == 127, rs2_b3_val == -5, rs2_b0_val == -33, rs1_b1_val == 64, rs1_b7_val == -1
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xff03077f06804007;  op2val:0xf9fdc0dffb00efdf
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xff03077f06804007, 0xf9fdc0dffb00efdf, x5, 152, x17)

inst_37:
// rs1_b4_val == -17, rs1_b1_val == -5, rs2_b1_val == 127, rs2_b4_val == -3
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x40fb04effaf8fbfe;  op2val:0xf80304fd05057fbf
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0x40fb04effaf8fbfe, 0xf80304fd05057fbf, x5, 160, x17)

inst_38:
// rs1_b4_val == -5, rs1_b5_val == 127, rs2_b2_val == 2
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8557ffb043fbff9;  op2val:0xefbf00fb0302fb40
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xf8557ffb043fbff9, 0xefbf00fb0302fb40, x5, 168, x17)

inst_39:
// rs1_b4_val == -3, rs1_b3_val == -2
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7f8c0fdfe3f10c0;  op2val:0x4f60809c040f9fa
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xf7f8c0fdfe3f10c0, 0x4f60809c040f9fa, x5, 176, x17)

inst_40:
// rs1_b4_val == 32, rs1_b7_val == 2, rs2_b2_val == 1, rs2_b3_val == -2, rs2_b4_val == -2, rs1_b2_val == -65
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x2fbf62080bfaadf;  op2val:0xef08aafefe013f55
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0x2fbf62080bfaadf, 0xef08aafefe013f55, x5, 184, x17)

inst_41:
// rs1_b4_val == 8, rs2_b2_val == 16, rs2_b1_val == -128
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x100ff0806fa0703;  op2val:0x5f605f702108040
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0x100ff0806fa0703, 0x5f605f702108040, x5, 192, x17)

inst_42:
// rs1_b4_val == 4, rs1_b3_val == 2, rs2_b6_val == -9, rs2_b3_val == 64, rs1_b0_val == 16
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xfc0380040203fb10;  op2val:0xfbf7030540100601
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xfc0380040203fb10, 0xfbf7030540100601, x5, 200, x17)

inst_43:
// rs1_b4_val == 1, rs2_b4_val == 64, rs2_b1_val == -65
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xf67f0301bff8fcdf;  op2val:0xc0030340fb20bf08
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xf67f0301bff8fcdf, 0xc0030340fb20bf08, x5, 208, x17)

inst_44:
// rs1_b4_val == 0, rs2_b2_val == -9, rs1_b0_val == 1
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe080800fbbf0701;  op2val:0xfe07f85520f7bffa
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xfe080800fbbf0701, 0xfe07f85520f7bffa, x5, 216, x17)

inst_45:
// rs2_b3_val == 85, rs2_b6_val == 16
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xf606f8df55c0fe10;  op2val:0x710f8ff5503fa40
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xf606f8df55c0fe10, 0x710f8ff5503fa40, x5, 224, x17)

inst_46:
// rs2_b3_val == -65, rs1_b0_val == -3, rs2_b0_val == -128
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xfaef02093ffafdfd;  op2val:0x1fd0705bffafc80
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xfaef02093ffafdfd, 0x1fd0705bffafc80, x5, 232, x17)

inst_47:
// rs2_b3_val == 4, rs2_b1_val == -33
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf07053ff903fddf;  op2val:0x7f607400402df07
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xdf07053ff903fddf, 0x7f607400402df07, x5, 240, x17)

inst_48:
// rs2_b3_val == 1, rs2_b0_val == -2
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x8fbf9dff640fa01;  op2val:0x9ff3f0801ff04fe
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0x8fbf9dff640fa01, 0x9ff3f0801ff04fe, x5, 248, x17)

inst_49:
// rs2_b3_val == -1, rs2_b5_val == -2, rs1_b1_val == 8, rs2_b6_val == 1, rs2_b0_val == 127
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa10bf80fbfd08fc;  op2val:0xf801fe05fffeaa7f
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xfa10bf80fbfd08fc, 0xf801fe05fffeaa7f, x5, 256, x17)

inst_50:
// rs2_b2_val == 127, rs1_b3_val == -86
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xfefa0640aadff605;  op2val:0xfef809efaa7f0655
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xfefa0640aadff605, 0xfef809efaa7f0655, x5, 264, x17)

inst_51:
// rs1_b3_val == 127, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x4fa00107fff0910;  op2val:0x9fdc006aaf7f7bf
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0x4fa00107fff0910, 0x9fdc006aaf7f7bf, x5, 272, x17)

inst_52:
// rs2_b2_val == 8, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x320c0f820fec07f;  op2val:0xfbf8057ffc0810c0
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0x320c0f820fec07f, 0xfbf8057ffc0810c0, x5, 280, x17)

inst_53:
// rs2_b2_val == 4, rs1_b6_val == 4
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x30440ef7f400007;  op2val:0x83f40ff050408fa
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0x30440ef7f400007, 0x83f40ff050408fa, x5, 288, x17)

inst_54:
// rs1_b3_val == -17, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xf710067fef03fd08;  op2val:0x20fc3ffdfcfdfaf9
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xf710067fef03fd08, 0x20fc3ffdfcfdfaf9, x5, 296, x17)

inst_55:
// rs1_b3_val == -9, rs1_b6_val == -33
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xfedf0406f73f0400;  op2val:0x840204080aaaa05
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xfedf0406f73f0400, 0x840204080aaaa05, x5, 304, x17)

inst_56:
// rs1_b3_val == 64, rs1_b1_val == 1, rs2_b0_val == -3
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe03fa0840ef0100;  op2val:0x93fbfff108040fd
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xfe03fa0840ef0100, 0x93fbfff108040fd, x5, 312, x17)

inst_57:
// rs2_b1_val == 32, rs1_b2_val == 8, rs1_b6_val == -9
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x2f7fdbfef0804f7;  op2val:0xbf4005fa10092008
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0x2f7fdbfef0804f7, 0xbf4005fa10092008, x5, 320, x17)

inst_58:
// rs1_b2_val == -5, rs2_b6_val == -128
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf070455f6fbefdf;  op2val:0x3f80c00680efdf06
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xbf070455f6fbefdf, 0x3f80c00680efdf06, x5, 328, x17)

inst_59:
// rs2_b0_val == -9, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbf6fd0305fe06ef;  op2val:0xfe0704f8802001f7
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xfbf6fd0305fe06ef, 0xfe0704f8802001f7, x5, 336, x17)

inst_60:
// rs1_b2_val == 2, rs1_b0_val == -5
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xfcfc013fdf02f6fb;  op2val:0xfb000708fc800407
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xfcfc013fdf02f6fb, 0xfb000708fc800407, x5, 344, x17)

inst_61:
// rs1_b2_val == 0, rs2_b4_val == 2
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x55105580aa000201;  op2val:0xf806f802f60105ef
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0x55105580aa000201, 0xf806f802f60105ef, x5, 352, x17)

inst_62:
// rs1_b1_val == 85, rs1_b0_val == -86
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x2fd0440f80055aa;  op2val:0x3fff7f03f8f8fcf7
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0x2fd0440f80055aa, 0x3fff7f03f8f8fcf7, x5, 360, x17)

inst_63:
// rs2_b0_val == 16, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0f640400406fedf;  op2val:0xf9f6bf80dff9fc10
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xc0f640400406fedf, 0xf9f6bf80dff9fc10, x5, 368, x17)

inst_64:
// rs2_b0_val == -1, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xf903aafbc0df03df;  op2val:0x6fa20f755aaefff
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xf903aafbc0df03df, 0x6fa20f755aaefff, x5, 376, x17)

inst_65:
// rs1_b1_val == -128, rs1_b0_val == -1
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x8fd09f8050680ff;  op2val:0xdf558055ef55fafb
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0x8fd09f8050680ff, 0xdf558055ef55fafb, x5, 384, x17)

inst_66:
// rs2_b6_val == 2, rs2_b5_val == -5
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x20fc7ffefc7f0007;  op2val:0xff02fbfd07fcfdfe
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0x20fc7ffefc7f0007, 0xff02fbfd07fcfdfe, x5, 392, x17)

inst_67:
// rs1_b1_val == 32, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf050105f9f920ef;  op2val:0xaaaa06fc0020eff6
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xbf050105f9f920ef, 0xaaaa06fc0020eff6, x5, 400, x17)

inst_68:
// rs2_b5_val == 16, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbf800df097ffafd;  op2val:0xfc100280fd0109
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xfbf800df097ffafd, 0xfc100280fd0109, x5, 408, x17)

inst_69:
// rs1_b0_val == 64, rs2_b5_val == -33
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0005bf40f640;  op2val:0xf980df0603f70901
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xbfff0005bf40f640, 0xf980df0603f70901, x5, 416, x17)

inst_70:
// rs2_b5_val == 2, rs1_b0_val == 2
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xf708c0f6fddf0502;  op2val:0xaa02000510f6ef
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xf708c0f6fddf0502, 0xaa02000510f6ef, x5, 424, x17)

inst_71:
// rs2_b5_val == -1, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa09f7fd09f70955;  op2val:0x709ffc0aaf8bf20
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xaa09f7fd09f70955, 0x709ffc0aaf8bf20, x5, 432, x17)

inst_72:
// rs2_b4_val == -86, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0x2fa0780c00502c0;  op2val:0xfc03faaafbf6bf55
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0x2fa0780c00502c0, 0xfc03faaafbf6bf55, x5, 440, x17)

inst_73:
// rs1_b6_val == -128, rs2_b1_val == -1, rs2_b4_val == 1
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf80f6dff97ffd07;  op2val:0x90955018040ff09
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xbf80f6dff97ffd07, 0x90955018040ff09, x5, 448, x17)

inst_74:
// rs1_b6_val == 2, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf0201efff00fabf;  op2val:0xf6090409f806efbf
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xbf0201efff00fabf, 0xf6090409f806efbf, x5, 456, x17)

inst_75:
// rs1_b7_val == -3, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd20f7ef2003f8c0;  op2val:0x2080effbf9f705fa
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xfd20f7ef2003f8c0, 0x2080effbf9f705fa, x5, 464, x17)

inst_76:
// rs1_b1_val == -1, 
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffdfb01efffef;  op2val:0x3f00ffdf01f8c0fb
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xffeffdfb01efffef, 0x3f00ffdf01f8c0fb, x5, 472, x17)

inst_77:
// rs1_b5_val == -33, rs1_b7_val == -17
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xef40df08effafff8;  op2val:0x3f01aaf70455fcaa
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xef40df08effafff8, 0x3f01aaf70455fcaa, x5, 480, x17)

inst_78:
// rs1_b7_val < 0 and rs2_b7_val > 0, rs2_b0_val == -65, rs1_b5_val == -128, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b3_val == 2, rs1_b1_val == -3, rs1_b7_val == -33, rs1_b4_val == -128, rs1_b6_val == -1, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b2_val == 127, rs2_b5_val == -9
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff8080f67ffd3f;  op2val:0x5c0f7f9020703bf
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xdfff8080f67ffd3f, 0x5c0f7f9020703bf, x5, 488, x17)

inst_79:
// rs2_b7_val == -5, rs2_b1_val == -3, rs1_b2_val == 16, rs2_b0_val == 4, rs1_b4_val == -33
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa07f9df06103f04;  op2val:0xfb09f7fc05bffd04
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xaa07f9df06103f04, 0xfb09f7fc05bffd04, x5, 496, x17)

inst_80:
// rs2_b7_val == 0, rs2_b4_val == -1, rs2_b1_val == 2, rs2_b5_val == -128, rs1_b4_val == 64
// opcode: scmplt8 ; op1:x30; op2:x29; dest:x31; op1val:0xbff9bf40fa80f780;  op2val:0x5580fff8060206
TEST_RR_OP(scmplt8, x31, x30, x29, 0x0000000000000000, 0xbff9bf40fa80f780, 0x5580fff8060206, x5, 504, x17)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 64*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
