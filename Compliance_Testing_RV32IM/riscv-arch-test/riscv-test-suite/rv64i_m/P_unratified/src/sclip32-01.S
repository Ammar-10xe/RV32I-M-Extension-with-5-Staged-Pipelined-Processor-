
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sclip32 instruction of the RISC-V RV64PZicsr extension for the sclip32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sclip32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd, rs1==x31, rd==x31, rs1_w0_val == -2147483648, imm_val == 0, rs1_w1_val == -8193
// opcode: sclip32 ; op1:x31; dest:x31; op1val:0xffffdfff80000000;  immval:0x0
TEST_PKIMM_OP( sclip32, x31, x31, 0x0000000000000000, 0xffffdfff80000000, 0x0, x31, x7, 0, x11)

inst_1:
// rs1 != rd, rs1==x29, rd==x14, imm_val == 31, rs1_w0_val == -524289, rs1_w1_val == -524289
// opcode: sclip32 ; op1:x29; dest:x14; op1val:0xfff7fffffff7ffff;  immval:0x1f
TEST_PKIMM_OP( sclip32, x14, x29, 0x0000000000000000, 0xfff7fffffff7ffff, 0x1f, x29, x7, 16, x11)

inst_2:
// rs1==x23, rd==x4, imm_val == 30, rs1_w1_val == -67108865
// opcode: sclip32 ; op1:x23; dest:x4; op1val:0xfbffffff00000007;  immval:0x1e
TEST_PKIMM_OP( sclip32, x4, x23, 0x0000000000000000, 0xfbffffff00000007, 0x1e, x23, x7, 32, x11)

inst_3:
// rs1==x5, rd==x3, imm_val == 29, rs1_w0_val == -16777217, rs1_w1_val == 268435456
// opcode: sclip32 ; op1:x5; dest:x3; op1val:0x10000000feffffff;  immval:0x1d
TEST_PKIMM_OP( sclip32, x3, x5, 0x0000000000000000, 0x10000000feffffff, 0x1d, x5, x7, 48, x11)

inst_4:
// rs1==x1, rd==x15, imm_val == 28, rs1_w1_val == 1024, rs1_w0_val == 64
// opcode: sclip32 ; op1:x1; dest:x15; op1val:0x00040000000040;  immval:0x1c
TEST_PKIMM_OP( sclip32, x15, x1, 0x0000000000000000, 0x00040000000040, 0x1c, x1, x7, 64, x11)

inst_5:
// rs1==x30, rd==x29, imm_val == 27, rs1_w1_val == 33554432, rs1_w0_val == -2
// opcode: sclip32 ; op1:x30; dest:x29; op1val:0x2000000fffffffe;  immval:0x1b
TEST_PKIMM_OP( sclip32, x29, x30, 0x0000000000000000, 0x2000000fffffffe, 0x1b, x30, x7, 80, x11)

inst_6:
// rs1==x22, rd==x13, imm_val == 26, rs1_w1_val == -1073741825, rs1_w0_val == -8388609
// opcode: sclip32 ; op1:x22; dest:x13; op1val:0xbfffffffff7fffff;  immval:0x1a
TEST_PKIMM_OP( sclip32, x13, x22, 0x0000000000000000, 0xbfffffffff7fffff, 0x1a, x22, x7, 96, x11)

inst_7:
// rs1==x0, rd==x8, imm_val == 25, rs1_w1_val == 4194304, rs1_w0_val == 256
// opcode: sclip32 ; op1:x0; dest:x8; op1val:0x40000000000100;  immval:0x19
TEST_PKIMM_OP( sclip32, x8, x0, 0x0000000000000000, 0x40000000000100, 0x19, x0, x7, 112, x11)

inst_8:
// rs1==x8, rd==x0, imm_val == 24, rs1_w1_val == 32768, rs1_w0_val == 4
// opcode: sclip32 ; op1:x8; dest:x0; op1val:0x00800000000004;  immval:0x18
TEST_PKIMM_OP( sclip32, x0, x8, 0x0000000000000000, 0x00800000000004, 0x18, x8, x7, 128, x11)

inst_9:
// rs1==x18, rd==x12, imm_val == 23, rs1_w1_val == 1073741824
// opcode: sclip32 ; op1:x18; dest:x12; op1val:0x40000000ff7fffff;  immval:0x17
TEST_PKIMM_OP( sclip32, x12, x18, 0x0000000000000000, 0x40000000ff7fffff, 0x17, x18, x7, 144, x11)

inst_10:
// rs1==x24, rd==x5, imm_val == 22, rs1_w0_val == 8192, rs1_w1_val == -16385
// opcode: sclip32 ; op1:x24; dest:x5; op1val:0xffffbfff00002000;  immval:0x16
TEST_PKIMM_OP( sclip32, x5, x24, 0x0000000000000000, 0xffffbfff00002000, 0x16, x24, x7, 160, x11)

inst_11:
// rs1==x20, rd==x19, imm_val == 21, rs1_w0_val == 131072, rs1_w1_val == 4096
// opcode: sclip32 ; op1:x20; dest:x19; op1val:0x00100000020000;  immval:0x15
TEST_PKIMM_OP( sclip32, x19, x20, 0x0000000000000000, 0x00100000020000, 0x15, x20, x7, 176, x11)

inst_12:
// rs1==x16, rd==x25, imm_val == 20, rs1_w0_val == -32769
// opcode: sclip32 ; op1:x16; dest:x25; op1val:0xfffffffcffff7fff;  immval:0x14
TEST_PKIMM_OP( sclip32, x25, x16, 0x0000000000000000, 0xfffffffcffff7fff, 0x14, x16, x7, 192, x11)

inst_13:
// rs1==x17, rd==x2, imm_val == 19, rs1_w0_val == 1048576
// opcode: sclip32 ; op1:x17; dest:x2; op1val:0x00000900100000;  immval:0x13
TEST_PKIMM_OP( sclip32, x2, x17, 0x0000000000000000, 0x00000900100000, 0x13, x17, x7, 208, x11)

inst_14:
// rs1==x10, rd==x30, imm_val == 18, rs1_w1_val == -513, rs1_w0_val == 2
// opcode: sclip32 ; op1:x10; dest:x30; op1val:0xfffffdff00000002;  immval:0x12
TEST_PKIMM_OP( sclip32, x30, x10, 0x0000000000000000, 0xfffffdff00000002, 0x12, x10, x7, 224, x11)

inst_15:
// rs1==x9, rd==x28, imm_val == 17, rs1_w1_val == 2, rs1_w0_val == 33554432
// opcode: sclip32 ; op1:x9; dest:x28; op1val:0x00000202000000;  immval:0x11
TEST_PKIMM_OP( sclip32, x28, x9, 0x0000000000000000, 0x00000202000000, 0x11, x9, x7, 240, x11)

inst_16:
// rs1==x21, rd==x6, imm_val == 16, rs1_w1_val == 536870912
// opcode: sclip32 ; op1:x21; dest:x6; op1val:0x20000000fffffff8;  immval:0x10
TEST_PKIMM_OP( sclip32, x6, x21, 0x0000000000000000, 0x20000000fffffff8, 0x10, x21, x7, 256, x11)

inst_17:
// rs1==x27, rd==x23, imm_val == 15, rs1_w1_val == -16777217
// opcode: sclip32 ; op1:x27; dest:x23; op1val:0xfeffffff00000002;  immval:0xf
TEST_PKIMM_OP( sclip32, x23, x27, 0x0000000000000000, 0xfeffffff00000002, 0xf, x27, x7, 272, x8)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_18:
// rs1==x7, rd==x10, imm_val == 14, 
// opcode: sclip32 ; op1:x7; dest:x10; op1val:0xc000000000020000;  immval:0xe
TEST_PKIMM_OP( sclip32, x10, x7, 0x0000000000000000, 0xc000000000020000, 0xe, x7, x5, 0, x8)

inst_19:
// rs1==x28, rd==x17, imm_val == 13, 
// opcode: sclip32 ; op1:x28; dest:x17; op1val:0xc0000000ff7fffff;  immval:0xd
TEST_PKIMM_OP( sclip32, x17, x28, 0x0000000000000000, 0xc0000000ff7fffff, 0xd, x28, x5, 16, x8)

inst_20:
// rs1==x26, rd==x27, imm_val == 12, rs1_w0_val == 16384
// opcode: sclip32 ; op1:x26; dest:x27; op1val:0xfffffff900004000;  immval:0xc
TEST_PKIMM_OP( sclip32, x27, x26, 0x0000000000000000, 0xfffffff900004000, 0xc, x26, x5, 32, x8)

inst_21:
// rs1==x15, rd==x16, imm_val == 11, rs1_w1_val == -129
// opcode: sclip32 ; op1:x15; dest:x16; op1val:0xffffff7f00000005;  immval:0xb
TEST_PKIMM_OP( sclip32, x16, x15, 0x0000000000000000, 0xffffff7f00000005, 0xb, x15, x5, 48, x8)

inst_22:
// rs1==x6, rd==x18, imm_val == 10, rs1_w1_val == 64, rs1_w0_val == 32768
// opcode: sclip32 ; op1:x6; dest:x18; op1val:0x00004000008000;  immval:0xa
TEST_PKIMM_OP( sclip32, x18, x6, 0x0000000000000000, 0x00004000008000, 0xa, x6, x5, 64, x8)

inst_23:
// rs1==x25, rd==x9, imm_val == 9, 
// opcode: sclip32 ; op1:x25; dest:x9; op1val:0xffffff7f00020000;  immval:0x9
TEST_PKIMM_OP( sclip32, x9, x25, 0x0000000000000000, 0xffffff7f00020000, 0x9, x25, x5, 80, x8)

inst_24:
// rs1==x14, rd==x11, imm_val == 8, rs1_w1_val == -1025
// opcode: sclip32 ; op1:x14; dest:x11; op1val:0xfffffbff00000002;  immval:0x8
TEST_PKIMM_OP( sclip32, x11, x14, 0x0000000000000000, 0xfffffbff00000002, 0x8, x14, x5, 96, x8)

inst_25:
// rs1==x4, rd==x7, imm_val == 7, rs1_w0_val == 262144
// opcode: sclip32 ; op1:x4; dest:x7; op1val:0x2000000000040000;  immval:0x7
TEST_PKIMM_OP( sclip32, x7, x4, 0x0000000000000000, 0x2000000000040000, 0x7, x4, x5, 112, x8)

inst_26:
// rs1==x13, rd==x20, imm_val == 6, rs1_w0_val == 134217728, rs1_w1_val == 16
// opcode: sclip32 ; op1:x13; dest:x20; op1val:0x00001008000000;  immval:0x6
TEST_PKIMM_OP( sclip32, x20, x13, 0x0000000000000000, 0x00001008000000, 0x6, x13, x5, 128, x8)

inst_27:
// rs1==x3, rd==x24, imm_val == 5, rs1_w1_val == -33554433
// opcode: sclip32 ; op1:x3; dest:x24; op1val:0xfdffffff00000009;  immval:0x5
TEST_PKIMM_OP( sclip32, x24, x3, 0x0000000000000000, 0xfdffffff00000009, 0x5, x3, x5, 144, x8)

inst_28:
// rs1==x12, rd==x26, imm_val == 4, rs1_w0_val == 4096
// opcode: sclip32 ; op1:x12; dest:x26; op1val:0x00000200001000;  immval:0x4
TEST_PKIMM_OP( sclip32, x26, x12, 0x0000000000000000, 0x00000200001000, 0x4, x12, x5, 160, x8)

inst_29:
// rs1==x11, rd==x1, imm_val == 3, rs1_w0_val == -8193, rs1_w1_val == -2049
// opcode: sclip32 ; op1:x11; dest:x1; op1val:0xfffff7ffffffdfff;  immval:0x3
TEST_PKIMM_OP( sclip32, x1, x11, 0x0000000000000000, 0xfffff7ffffffdfff, 0x3, x11, x5, 176, x8)

inst_30:
// rs1==x19, rd==x22, imm_val == 2, rs1_w0_val == 536870912
// opcode: sclip32 ; op1:x19; dest:x22; op1val:0xc000000020000000;  immval:0x2
TEST_PKIMM_OP( sclip32, x22, x19, 0x0000000000000000, 0xc000000020000000, 0x2, x19, x5, 192, x8)

inst_31:
// rs1==x2, rd==x21, imm_val == 1, rs1_w0_val == 128
// opcode: sclip32 ; op1:x2; dest:x21; op1val:0x00004000000080;  immval:0x1
TEST_PKIMM_OP( sclip32, x21, x2, 0x0000000000000000, 0x00004000000080, 0x1, x2, x5, 208, x8)

inst_32:
// rs1_w1_val == -1431655766, rs1_w0_val == 1431655765
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xaaaaaaaa55555555;  immval:0x7
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xaaaaaaaa55555555, 0x7, x30, x5, 224, x8)

inst_33:
// rs1_w1_val == 1431655765, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x5555555580000000;  immval:0x17
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x5555555580000000, 0x17, x30, x5, 240, x1)

inst_34:
// rs1_w1_val == 2147483647, rs1_w0_val == -17
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x7fffffffffffffef;  immval:0x1d
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x7fffffffffffffef, 0x1d, x30, x5, 256, x1)

inst_35:
// rs1_w1_val == -536870913, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xdffffffffffffff8;  immval:0x13
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xdffffffffffffff8, 0x13, x30, x5, 272, x1)

inst_36:
// rs1_w1_val == -268435457, rs1_w0_val == -3
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xeffffffffffffffd;  immval:0x1
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xeffffffffffffffd, 0x1, x30, x5, 288, x1)

inst_37:
// rs1_w1_val == -134217729, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xf7ffffffff7fffff;  immval:0xb
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xf7ffffffff7fffff, 0xb, x30, x5, 304, x1)

inst_38:
// rs1_w1_val == -8388609, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xff7fffffffff7fff;  immval:0x9
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xff7fffffffff7fff, 0x9, x30, x5, 320, x1)

inst_39:
// rs1_w1_val == -4194305, rs1_w0_val == -4097
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xffbfffffffffefff;  immval:0x6
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xffbfffffffffefff, 0x6, x30, x5, 336, x1)

inst_40:
// rs1_w1_val == -2097153, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xffdfffffffffdfff;  immval:0x5
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xffdfffffffffdfff, 0x5, x30, x5, 352, x1)

inst_41:
// rs1_w1_val == -1048577, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xffefffff55555555;  immval:0x3
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xffefffff55555555, 0x3, x30, x5, 368, x1)

inst_42:
// rs1_w1_val == -262145, rs1_w0_val == 1
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffbffff00000001;  immval:0xd
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfffbffff00000001, 0xd, x30, x5, 384, x1)

inst_43:
// rs1_w1_val == -131073, rs1_w0_val == -9
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffdfffffffffff7;  immval:0xf
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfffdfffffffffff7, 0xf, x30, x5, 400, x1)

inst_44:
// rs1_w1_val == -65537, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffeffff3fffffff;  immval:0x1c
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfffeffff3fffffff, 0x1c, x30, x5, 416, x1)

inst_45:
// rs1_w1_val == -32769, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xffff7fff08000000;  immval:0x0
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xffff7fff08000000, 0x0, x30, x5, 432, x1)

inst_46:
// rs1_w1_val == -4097, rs1_w0_val == -65537
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xffffeffffffeffff;  immval:0x18
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xffffeffffffeffff, 0x18, x30, x5, 448, x1)

inst_47:
// rs1_w1_val == -257, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffffeff55555555;  immval:0xa
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfffffeff55555555, 0xa, x30, x5, 464, x1)

inst_48:
// rs1_w1_val == -65, rs1_w0_val == -262145
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xffffffbffffbffff;  immval:0x19
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xffffffbffffbffff, 0x19, x30, x5, 480, x1)

inst_49:
// rs1_w1_val == -33, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xffffffdf00008000;  immval:0x1e
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xffffffdf00008000, 0x1e, x30, x5, 496, x1)

inst_50:
// rs1_w1_val == -17, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xffffffef08000000;  immval:0x1c
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xffffffef08000000, 0x1c, x30, x5, 512, x1)

inst_51:
// rs1_w1_val == -9, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffffff700000001;  immval:0x10
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfffffff700000001, 0x10, x30, x5, 528, x1)

inst_52:
// rs1_w1_val == -5, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffffffb00000003;  immval:0x15
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfffffffb00000003, 0x15, x30, x5, 544, x1)

inst_53:
// rs1_w0_val == -65, rs1_w1_val == 131072
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x020000ffffffbf;  immval:0x17
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x020000ffffffbf, 0x17, x30, x5, 560, x1)

inst_54:
// rs1_w0_val == -33, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xffffffdfffffffdf;  immval:0x1a
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xffffffdfffffffdf, 0x1a, x30, x5, 576, x1)

inst_55:
// rs1_w0_val == -5, rs1_w1_val == 32
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x000020fffffffb;  immval:0xa
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x000020fffffffb, 0xa, x30, x5, 592, x1)

inst_56:
// rs1_w0_val == 1073741824, rs1_w1_val == 67108864
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x400000040000000;  immval:0x8
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x400000040000000, 0x8, x30, x5, 608, x1)

inst_57:
// rs1_w0_val == 268435456, rs1_w1_val == 16384
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x00400010000000;  immval:0x1e
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x00400010000000, 0x1e, x30, x5, 624, x1)

inst_58:
// rs1_w0_val == 67108864, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xffffdfff04000000;  immval:0xd
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xffffdfff04000000, 0xd, x30, x5, 640, x1)

inst_59:
// rs1_w0_val == 16777216, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xff7fffff01000000;  immval:0x12
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xff7fffff01000000, 0x12, x30, x5, 656, x1)

inst_60:
// rs1_w0_val == 8388608, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x00000300800000;  immval:0x7
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x00000300800000, 0x7, x30, x5, 672, x1)

inst_61:
// rs1_w0_val == 4194304, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x00100000400000;  immval:0x3
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x00100000400000, 0x3, x30, x5, 688, x1)

inst_62:
// rs1_w0_val == 2097152, rs1_w1_val == 262144
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x04000000200000;  immval:0x8
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x04000000200000, 0x8, x30, x5, 704, x1)

inst_63:
// rs1_w0_val == 524288, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffffffa00080000;  immval:0x1
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfffffffa00080000, 0x1, x30, x5, 720, x1)

inst_64:
// rs1_w0_val == 65536, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xc000000000010000;  immval:0xe
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xc000000000010000, 0xe, x30, x5, 736, x1)

inst_65:
// rs1_w0_val == 2048, rs1_w1_val == 134217728
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x800000000000800;  immval:0x10
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x800000000000800, 0x10, x30, x5, 752, x1)

inst_66:
// rs1_w0_val == 1024, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffff7ff00000400;  immval:0x8
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfffff7ff00000400, 0x8, x30, x5, 768, x1)

inst_67:
// rs1_w0_val == 512, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfeffffff00000200;  immval:0x6
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfeffffff00000200, 0x6, x30, x5, 784, x1)

inst_68:
// rs1_w0_val == 32, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffffdff00000020;  immval:0x10
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfffffdff00000020, 0x10, x30, x5, 800, x1)

inst_69:
// rs1_w0_val == 16, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xf7ffffff00000010;  immval:0xe
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xf7ffffff00000010, 0xe, x30, x5, 816, x1)

inst_70:
// rs1_w0_val == 8, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x00000900000008;  immval:0x1
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x00000900000008, 0x1, x30, x5, 832, x1)

inst_71:
// rs1_w0_val == 0, rs1_w1_val == 4
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x00000400000000;  immval:0x1b
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x00000400000000, 0x1b, x30, x5, 848, x1)

inst_72:
// rs1_w0_val == -1, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x000400ffffffff;  immval:0x15
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x000400ffffffff, 0x15, x30, x5, 864, x1)

inst_73:
// rs1_w1_val == -3, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffffffd00000080;  immval:0xa
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfffffffd00000080, 0xa, x30, x5, 880, x1)

inst_74:
// rs1_w1_val == -2, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffffffe00000020;  immval:0x10
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfffffffe00000020, 0x10, x30, x5, 896, x1)

inst_75:
// rs1_w1_val == -2147483648, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x8000000004000000;  immval:0x2
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x8000000004000000, 0x2, x30, x5, 912, x1)

inst_76:
// rs1_w1_val == 16777216, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x100000000000005;  immval:0x17
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x100000000000005, 0x17, x30, x5, 928, x1)

inst_77:
// rs1_w1_val == 8388608, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x800000ff7fffff;  immval:0xd
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x800000ff7fffff, 0xd, x30, x5, 944, x1)

inst_78:
// rs1_w1_val == 2097152, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x20000000000010;  immval:0x0
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x20000000000010, 0x0, x30, x5, 960, x1)

inst_79:
// rs1_w1_val == 1048576, rs1_w0_val == -536870913
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x100000dfffffff;  immval:0x14
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x100000dfffffff, 0x14, x30, x5, 976, x1)

inst_80:
// rs1_w1_val == 524288, rs1_w0_val == -67108865
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x080000fbffffff;  immval:0x15
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x080000fbffffff, 0x15, x30, x5, 992, x1)

inst_81:
// rs1_w1_val == 65536, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x01000040000000;  immval:0xd
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x01000040000000, 0xd, x30, x5, 1008, x1)

inst_82:
// rs1_w1_val == 8192, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x00200055555555;  immval:0x4
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x00200055555555, 0x4, x30, x5, 1024, x1)

inst_83:
// rs1_w1_val == 2048, rs1_w0_val == 2147483647
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x0008007fffffff;  immval:0x7
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x0008007fffffff, 0x7, x30, x5, 1040, x1)

inst_84:
// rs1_w1_val == 512, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x00020000000004;  immval:0x6
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x00020000000004, 0x6, x30, x5, 1056, x1)

inst_85:
// rs1_w1_val == 256, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x00010080000000;  immval:0x1d
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x00010080000000, 0x1d, x30, x5, 1072, x1)

inst_86:
// rs1_w1_val == 128, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x000080fffffff8;  immval:0x12
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x000080fffffff8, 0x12, x30, x5, 1088, x1)

inst_87:
// rs1_w1_val == 8, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x00000840000000;  immval:0x12
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x00000840000000, 0x12, x30, x5, 1104, x1)

inst_88:
// rs1_w1_val == 1, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x00000100800000;  immval:0x3
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x00000100800000, 0x3, x30, x5, 1120, x1)

inst_89:
// rs1_w1_val == 0, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x00000010000000;  immval:0x1
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x00000010000000, 0x1, x30, x5, 1136, x1)

inst_90:
// rs1_w1_val == -1, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffffffffffffffa;  immval:0x1a
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfffffffffffffffa, 0x1a, x30, x5, 1152, x1)

inst_91:
// rs1_w0_val == -1431655766, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffffffbaaaaaaaa;  immval:0x1b
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfffffffbaaaaaaaa, 0x1b, x30, x5, 1168, x1)

inst_92:
// rs1_w0_val == -1073741825, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffffffbbfffffff;  immval:0x10
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfffffffbbfffffff, 0x10, x30, x5, 1184, x1)

inst_93:
// rs1_w0_val == -268435457, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x20000000efffffff;  immval:0x11
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x20000000efffffff, 0x11, x30, x5, 1200, x1)

inst_94:
// rs1_w0_val == -134217729, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x400000f7ffffff;  immval:0x9
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x400000f7ffffff, 0x9, x30, x5, 1216, x1)

inst_95:
// rs1_w0_val == -33554433, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x004000fdffffff;  immval:0x5
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x004000fdffffff, 0x5, x30, x5, 1232, x1)

inst_96:
// rs1_w0_val == -4194305, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffffbffffbfffff;  immval:0x19
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfffffbffffbfffff, 0x19, x30, x5, 1248, x1)

inst_97:
// rs1_w0_val == -2097153, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x55555555ffdfffff;  immval:0xb
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x55555555ffdfffff, 0xb, x30, x5, 1264, x1)

inst_98:
// rs1_w0_val == -1048577, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x001000ffefffff;  immval:0x16
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x001000ffefffff, 0x16, x30, x5, 1280, x1)

inst_99:
// rs1_w0_val == -131073, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfefffffffffdffff;  immval:0x8
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfefffffffffdffff, 0x8, x30, x5, 1296, x1)

inst_100:
// rs1_w0_val == -16385, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffffeffffffbfff;  immval:0x5
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfffffeffffffbfff, 0x5, x30, x5, 1312, x1)

inst_101:
// rs1_w0_val == -2049, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffffffbfffff7ff;  immval:0x0
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfffffffbfffff7ff, 0x0, x30, x5, 1328, x1)

inst_102:
// rs1_w0_val == -1025, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfffffffbfffffbff;  immval:0x13
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfffffffbfffffbff, 0x13, x30, x5, 1344, x1)

inst_103:
// rs1_w0_val == -513, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xc0000000fffffdff;  immval:0x14
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xc0000000fffffdff, 0x14, x30, x5, 1360, x1)

inst_104:
// rs1_w0_val == -257, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xfdfffffffffffeff;  immval:0x2
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xfdfffffffffffeff, 0x2, x30, x5, 1376, x1)

inst_105:
// rs1_w0_val == -129, 
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0xffffffdfffffff7f;  immval:0x2
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0xffffffdfffffff7f, 0x2, x30, x5, 1392, x1)

inst_106:
// imm_val == 25, rs1_w1_val == 4194304, rs1_w0_val == 256
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x40000000000100;  immval:0x19
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x40000000000100, 0x19, x30, x5, 1408, x1)

inst_107:
// imm_val == 24, rs1_w1_val == 32768, rs1_w0_val == 4
// opcode: sclip32 ; op1:x30; dest:x31; op1val:0x00800000000004;  immval:0x18
TEST_PKIMM_OP( sclip32, x31, x30, 0x0000000000000000, 0x00800000000004, 0x18, x30, x5, 1424, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 180*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
