
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kslli8 instruction of the RISC-V RV64PZicsr extension for the kslli8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kslli8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x14,signature_x14_1)

inst_0:
// rs1 == rd, rs1==x8, rd==x8, rs1_b0_val == -128, imm_val == 7, rs1_b1_val == -5, rs1_b6_val == 8, rs1_b4_val == -3, rs1_b7_val == -5, rs1_b5_val == -86, rs1_b2_val == 0
// opcode: kslli8 ; op1:x8; dest:x8; op1val:0xfb08aafd3f00fb80;  immval:0x7
TEST_PKIMM_OP( kslli8, x8, x8, 0x0000000000000000, 0xfb08aafd3f00fb80, 0x7, x8, x14, 0, x6)

inst_1:
// rs1 != rd, rs1==x0, rd==x15, imm_val == 6, rs1_b5_val == 2, rs1_b6_val == -17, rs1_b4_val == -128, rs1_b2_val == -5, rs1_b7_val == 2
// opcode: kslli8 ; op1:x0; dest:x15; op1val:0x2ef028007fb3f05;  immval:0x6
TEST_PKIMM_OP( kslli8, x15, x0, 0x0000000000000000, 0x2ef028007fb3f05, 0x6, x0, x14, 16, x6)

inst_2:
// rs1==x24, rd==x3, imm_val == 5, rs1_b3_val == -5, rs1_b1_val == -86, rs1_b7_val == 85, rs1_b2_val == 127, rs1_b5_val == -2, rs1_b0_val == -3, rs1_b6_val == 127
// opcode: kslli8 ; op1:x24; dest:x3; op1val:0x557ffef9fb7faafd;  immval:0x5
TEST_PKIMM_OP( kslli8, x3, x24, 0x0000000000000000, 0x557ffef9fb7faafd, 0x5, x24, x14, 32, x6)

inst_3:
// rs1==x26, rd==x16, imm_val == 4, rs1_b3_val == -3, rs1_b6_val == -3, rs1_b4_val == 127, rs1_b1_val == -9, rs1_b2_val == -17, rs1_b7_val == -128, rs1_b5_val == -9, rs1_b0_val == -33
// opcode: kslli8 ; op1:x26; dest:x16; op1val:0x80fdf77ffdeff7df;  immval:0x4
TEST_PKIMM_OP( kslli8, x16, x26, 0x0000000000000000, 0x80fdf77ffdeff7df, 0x4, x26, x14, 48, x6)

inst_4:
// rs1==x20, rd==x7, imm_val == 3, rs1_b1_val == -128, rs1_b0_val == -9, rs1_b6_val == 85, rs1_b3_val == 8
// opcode: kslli8 ; op1:x20; dest:x7; op1val:0x8055c0f808fb80f7;  immval:0x3
TEST_PKIMM_OP( kslli8, x7, x20, 0x0000000000000000, 0x8055c0f808fb80f7, 0x3, x20, x14, 64, x6)

inst_5:
// rs1==x9, rd==x19, imm_val == 2, rs1_b5_val == 4, rs1_b1_val == 127
// opcode: kslli8 ; op1:x9; dest:x19; op1val:0x3fc004073ff87fdf;  immval:0x2
TEST_PKIMM_OP( kslli8, x19, x9, 0x0000000000000000, 0x3fc004073ff87fdf, 0x2, x9, x14, 80, x6)

inst_6:
// rs1==x13, rd==x23, imm_val == 1, rs1_b2_val == -33, rs1_b6_val == 16, rs1_b5_val == -17
// opcode: kslli8 ; op1:x13; dest:x23; op1val:0xc010ef03fddff8fc;  immval:0x1
TEST_PKIMM_OP( kslli8, x23, x13, 0x0000000000000000, 0xc010ef03fddff8fc, 0x1, x13, x14, 96, x6)

inst_7:
// rs1==x28, rd==x17, imm_val == 0, rs1_b6_val == -128, rs1_b4_val == -65, rs1_b1_val == -3, rs1_b3_val == -1, rs1_b7_val == 16, rs1_b5_val == -5
// opcode: kslli8 ; op1:x28; dest:x17; op1val:0x1080fbbffff9fddf;  immval:0x0
TEST_PKIMM_OP( kslli8, x17, x28, 0x0000000000000000, 0x1080fbbffff9fddf, 0x0, x28, x14, 112, x6)

inst_8:
// rs1==x10, rd==x25, rs1_b7_val == -86, rs1_b5_val == 64, rs1_b0_val == 85
// opcode: kslli8 ; op1:x10; dest:x25; op1val:0xaaf6408008ef0555;  immval:0x2
TEST_PKIMM_OP( kslli8, x25, x10, 0x0000000000000000, 0xaaf6408008ef0555, 0x2, x10, x14, 128, x6)

inst_9:
// rs1==x5, rd==x11, rs1_b7_val == 127, rs1_b1_val == -1, rs1_b3_val == -9
// opcode: kslli8 ; op1:x5; dest:x11; op1val:0x7f0903bff7dffffc;  immval:0x0
TEST_PKIMM_OP( kslli8, x11, x5, 0x0000000000000000, 0x7f0903bff7dffffc, 0x0, x5, x14, 144, x6)

inst_10:
// rs1==x3, rd==x1, rs1_b7_val == -65, 
// opcode: kslli8 ; op1:x3; dest:x1; op1val:0xbf0703800609f805;  immval:0x2
TEST_PKIMM_OP( kslli8, x1, x3, 0x0000000000000000, 0xbf0703800609f805, 0x2, x3, x14, 160, x6)

inst_11:
// rs1==x19, rd==x12, rs1_b7_val == -33, rs1_b4_val == -33, rs1_b5_val == -1, rs1_b6_val == -86
// opcode: kslli8 ; op1:x19; dest:x12; op1val:0xdfaaffdffdfc06f8;  immval:0x3
TEST_PKIMM_OP( kslli8, x12, x19, 0x0000000000000000, 0xdfaaffdffdfc06f8, 0x3, x19, x14, 176, x6)

inst_12:
// rs1==x17, rd==x22, rs1_b7_val == -17, rs1_b2_val == 1
// opcode: kslli8 ; op1:x17; dest:x22; op1val:0xef7ffffa0701f706;  immval:0x7
TEST_PKIMM_OP( kslli8, x22, x17, 0x0000000000000000, 0xef7ffffa0701f706, 0x7, x17, x14, 192, x6)

inst_13:
// rs1==x29, rd==x30, rs1_b7_val == -9, rs1_b0_val == -2, rs1_b6_val == -2
// opcode: kslli8 ; op1:x29; dest:x30; op1val:0xf7feff3f03c009fe;  immval:0x6
TEST_PKIMM_OP( kslli8, x30, x29, 0x0000000000000000, 0xf7feff3f03c009fe, 0x6, x29, x14, 208, x6)

inst_14:
// rs1==x11, rd==x13, rs1_b7_val == -3, rs1_b6_val == 64, rs1_b3_val == 4, rs1_b4_val == -5, rs1_b5_val == 85, rs1_b1_val == 0, rs1_b2_val == 32
// opcode: kslli8 ; op1:x11; dest:x13; op1val:0xfd4055fb042000fa;  immval:0x6
TEST_PKIMM_OP( kslli8, x13, x11, 0x0000000000000000, 0xfd4055fb042000fa, 0x6, x11, x14, 224, x6)

inst_15:
// rs1==x2, rd==x10, rs1_b7_val == -2, rs1_b0_val == 0
// opcode: kslli8 ; op1:x2; dest:x10; op1val:0xfe55effaf9fa7f00;  immval:0x6
TEST_PKIMM_OP( kslli8, x10, x2, 0x0000000000000000, 0xfe55effaf9fa7f00, 0x6, x2, x14, 240, x6)

inst_16:
// rs1==x18, rd==x31, rs1_b7_val == 64, rs1_b0_val == -17
// opcode: kslli8 ; op1:x18; dest:x31; op1val:0x4080400705fcfaef;  immval:0x6
TEST_PKIMM_OP( kslli8, x31, x18, 0x0000000000000000, 0x4080400705fcfaef, 0x6, x18, x14, 256, x6)

inst_17:
// rs1==x30, rd==x20, rs1_b7_val == 32, rs1_b2_val == -1, rs1_b5_val == 1, rs1_b1_val == 8, rs1_b4_val == 2, rs1_b3_val == -65
// opcode: kslli8 ; op1:x30; dest:x20; op1val:0x20100102bfff083f;  immval:0x6
TEST_PKIMM_OP( kslli8, x20, x30, 0x0000000000000000, 0x20100102bfff083f, 0x6, x30, x14, 272, x6)

inst_18:
// rs1==x4, rd==x29, rs1_b7_val == 8, rs1_b4_val == 8
// opcode: kslli8 ; op1:x4; dest:x29; op1val:0x8550708f8fc00f8;  immval:0x4
TEST_PKIMM_OP( kslli8, x29, x4, 0x0000000000000000, 0x8550708f8fc00f8, 0x4, x4, x14, 288, x6)

inst_19:
// rs1==x12, rd==x6, rs1_b7_val == 4, rs1_b1_val == 2, rs1_b6_val == -9
// opcode: kslli8 ; op1:x12; dest:x6; op1val:0x4f7c0c0fa0102df;  immval:0x7
TEST_PKIMM_OP( kslli8, x6, x12, 0x0000000000000000, 0x4f7c0c0fa0102df, 0x7, x12, x14, 304, x8)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_20:
// rs1==x14, rd==x21, rs1_b7_val == 1, rs1_b2_val == 16
// opcode: kslli8 ; op1:x14; dest:x21; op1val:0x110090809100307;  immval:0x7
TEST_PKIMM_OP( kslli8, x21, x14, 0x0000000000000000, 0x110090809100307, 0x7, x14, x3, 0, x8)

inst_21:
// rs1==x16, rd==x26, rs1_b7_val == 0, rs1_b3_val == -128, rs1_b4_val == 4, rs1_b6_val == 1
// opcode: kslli8 ; op1:x16; dest:x26; op1val:0x0140048010aac0;  immval:0x5
TEST_PKIMM_OP( kslli8, x26, x16, 0x0000000000000000, 0x0140048010aac0, 0x5, x16, x3, 16, x8)

inst_22:
// rs1==x22, rd==x18, rs1_b7_val == -1, rs1_b6_val == 32, rs1_b3_val == 0, rs1_b0_val == 1
// opcode: kslli8 ; op1:x22; dest:x18; op1val:0xff20fac000f90801;  immval:0x3
TEST_PKIMM_OP( kslli8, x18, x22, 0x0000000000000000, 0xff20fac000f90801, 0x3, x22, x3, 32, x8)

inst_23:
// rs1==x31, rd==x28, rs1_b6_val == -65, rs1_b1_val == -2, rs1_b5_val == -65, rs1_b3_val == 32
// opcode: kslli8 ; op1:x31; dest:x28; op1val:0x1bfbf0620dffe01;  immval:0x5
TEST_PKIMM_OP( kslli8, x28, x31, 0x0000000000000000, 0x1bfbf0620dffe01, 0x5, x31, x3, 48, x8)

inst_24:
// rs1==x25, rd==x14, rs1_b6_val == -33, rs1_b1_val == 4, rs1_b5_val == 127
// opcode: kslli8 ; op1:x25; dest:x14; op1val:0xffdf7f04f9ef043f;  immval:0x4
TEST_PKIMM_OP( kslli8, x14, x25, 0x0000000000000000, 0xffdf7f04f9ef043f, 0x4, x25, x3, 64, x8)

inst_25:
// rs1==x27, rd==x2, rs1_b6_val == -5, rs1_b5_val == -128, rs1_b2_val == -2
// opcode: kslli8 ; op1:x27; dest:x2; op1val:0x80fb80c0bffe093f;  immval:0x7
TEST_PKIMM_OP( kslli8, x2, x27, 0x0000000000000000, 0x80fb80c0bffe093f, 0x7, x27, x3, 80, x8)

inst_26:
// rs1==x6, rd==x24, rs1_b1_val == 85, rs1_b6_val == -1, rs1_b3_val == -86
// opcode: kslli8 ; op1:x6; dest:x24; op1val:0x4ffaa04aa3f55c0;  immval:0x4
TEST_PKIMM_OP( kslli8, x24, x6, 0x0000000000000000, 0x4ffaa04aa3f55c0, 0x4, x6, x3, 96, x8)

inst_27:
// rs1==x1, rd==x27, rs1_b1_val == -65, rs1_b5_val == -3
// opcode: kslli8 ; op1:x1; dest:x27; op1val:0x7ff8fdfdf700bfdf;  immval:0x4
TEST_PKIMM_OP( kslli8, x27, x1, 0x0000000000000000, 0x7ff8fdfdf700bfdf, 0x4, x1, x3, 112, x8)

inst_28:
// rs1==x23, rd==x4, rs1_b1_val == -33, rs1_b4_val == 64, rs1_b3_val == 2, rs1_b2_val == 64, rs1_b0_val == -86
// opcode: kslli8 ; op1:x23; dest:x4; op1val:0x80aaf6400240dfaa;  immval:0x6
TEST_PKIMM_OP( kslli8, x4, x23, 0x0000000000000000, 0x80aaf6400240dfaa, 0x6, x23, x3, 128, x8)

inst_29:
// rs1==x15, rd==x5, rs1_b1_val == -17, rs1_b0_val == 8, rs1_b2_val == -128
// opcode: kslli8 ; op1:x15; dest:x5; op1val:0xbff7f9053f80ef08;  immval:0x4
TEST_PKIMM_OP( kslli8, x5, x15, 0x0000000000000000, 0xbff7f9053f80ef08, 0x4, x15, x3, 144, x8)

inst_30:
// rs1==x7, rd==x9, rs1_b1_val == 64, rs1_b2_val == 85, rs1_b3_val == 16
// opcode: kslli8 ; op1:x7; dest:x9; op1val:0x9aa0603105540aa;  immval:0x5
TEST_PKIMM_OP( kslli8, x9, x7, 0x0000000000000000, 0x9aa0603105540aa, 0x5, x7, x3, 160, x8)

inst_31:
// rs1==x21, rd==x0, rs1_b1_val == 32, 
// opcode: kslli8 ; op1:x21; dest:x0; op1val:0x551007dfaafc2005;  immval:0x7
TEST_PKIMM_OP( kslli8, x0, x21, 0x0000000000000000, 0x551007dfaafc2005, 0x7, x21, x3, 176, x8)

inst_32:
// rs1_b1_val == 16, rs1_b0_val == -1
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0x7f0303f9c00310ff;  immval:0x4
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0x7f0303f9c00310ff, 0x4, x30, x3, 192, x8)

inst_33:
// rs1_b1_val == 1, 
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0xff10effcbf0901ff;  immval:0x7
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0xff10effcbf0901ff, 0x7, x30, x3, 208, x8)

inst_34:
// rs1_b0_val == 127, rs1_b4_val == 32
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0x8553f20c0f9047f;  immval:0x1
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0x8553f20c0f9047f, 0x1, x30, x3, 224, x8)

inst_35:
// rs1_b0_val == -65, 
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0xfc07f706fb5506bf;  immval:0x2
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0xfc07f706fb5506bf, 0x2, x30, x3, 240, x8)

inst_36:
// rs1_b0_val == -5, rs1_b4_val == -1, rs1_b5_val == 32
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0x7f620ff05fe08fb;  immval:0x3
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0x7f620ff05fe08fb, 0x3, x30, x3, 256, x8)

inst_37:
// rs1_b0_val == 64, 
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0x80df06fa3f55f840;  immval:0x2
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0x80df06fa3f55f840, 0x2, x30, x3, 272, x8)

inst_38:
// rs1_b0_val == 32, rs1_b5_val == 16
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0xaaf710bffbfef820;  immval:0x4
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0xaaf710bffbfef820, 0x4, x30, x3, 288, x8)

inst_39:
// rs1_b0_val == 16, rs1_b3_val == 1, rs1_b4_val == 1, rs1_b6_val == 0
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0xfc007f0101f84010;  immval:0x4
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0xfc007f0101f84010, 0x4, x30, x3, 304, x8)

inst_40:
// rs1_b5_val == 0, 
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0x1f6000220fc7f09;  immval:0x2
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0x1f6000220fc7f09, 0x2, x30, x3, 320, x8)

inst_41:
// rs1_b4_val == -86, rs1_b5_val == 8
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0xbf7f08aa3f003f40;  immval:0x6
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0xbf7f08aa3f003f40, 0x6, x30, x3, 336, x8)

inst_42:
// rs1_b4_val == 85, rs1_b2_val == -65
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0x8fffb553fbffc7f;  immval:0x3
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0x8fffb553fbffc7f, 0x3, x30, x3, 352, x8)

inst_43:
// rs1_b4_val == -17, rs1_b3_val == 64
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0x80fc40ef4005fa10;  immval:0x1
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0x80fc40ef4005fa10, 0x1, x30, x3, 368, x8)

inst_44:
// rs1_b4_val == -9, rs1_b2_val == 2
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0x3fefef7080255fe;  immval:0x7
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0x3fefef7080255fe, 0x7, x30, x3, 384, x8)

inst_45:
// rs1_b4_val == -2, 
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0x3fdf3ffe4055faef;  immval:0x4
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0x3fdf3ffe4055faef, 0x4, x30, x3, 400, x8)

inst_46:
// rs1_b4_val == 16, 
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0x40fb0910aa40fa55;  immval:0x0
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0x40fb0910aa40fa55, 0x0, x30, x3, 416, x8)

inst_47:
// rs1_b4_val == 0, rs1_b2_val == 4
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0xf6ef20000904dff7;  immval:0x7
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0xf6ef20000904dff7, 0x7, x30, x3, 432, x8)

inst_48:
// rs1_b3_val == -2, rs1_b2_val == 8
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0xfddf1040fe08807f;  immval:0x2
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0xfddf1040fe08807f, 0x2, x30, x3, 448, x8)

inst_49:
// rs1_b0_val == 4, 
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0xfc01bf0703f90104;  immval:0x5
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0xfc01bf0703f90104, 0x5, x30, x3, 464, x8)

inst_50:
// rs1_b0_val == 2, 
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0x8efc0c0f605fc02;  immval:0x5
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0x8efc0c0f605fc02, 0x5, x30, x3, 480, x8)

inst_51:
// rs1_b6_val == 4, 
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0xf804f70380fef8f7;  immval:0x0
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0xf804f70380fef8f7, 0x0, x30, x3, 496, x8)

inst_52:
// rs1_b6_val == 2, rs1_b3_val == 85
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0x302550855bf4080;  immval:0x0
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0x302550855bf4080, 0x0, x30, x3, 512, x8)

inst_53:
// rs1_b2_val == -86, 
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0x520fa10aaaa08fc;  immval:0x2
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0x520fa10aaaa08fc, 0x2, x30, x3, 528, x8)

inst_54:
// rs1_b2_val == -9, 
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0xeffb0520fbf707fa;  immval:0x5
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0xeffb0520fbf707fa, 0x5, x30, x3, 544, x8)

inst_55:
// rs1_b5_val == -33, 
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0x903dffe07f704ef;  immval:0x1
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0x903dffe07f704ef, 0x1, x30, x3, 560, x8)

inst_56:
// rs1_b3_val == 127, 
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0xaa0020047f55fe80;  immval:0x0
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0xaa0020047f55fe80, 0x0, x30, x3, 576, x8)

inst_57:
// rs1_b2_val == -3, 
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0xfa04c0f705fdff00;  immval:0x1
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0xfa04c0f705fdff00, 0x1, x30, x3, 592, x8)

inst_58:
// rs1_b3_val == -33, 
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0xfe01ff55dffe09fb;  immval:0x4
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0xfe01ff55dffe09fb, 0x4, x30, x3, 608, x8)

inst_59:
// rs1_b3_val == -17, 
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0xfa80fa01ef0720bf;  immval:0x4
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0xfa80fa01ef0720bf, 0x4, x30, x3, 624, x8)

inst_60:
// imm_val == 6, rs1_b5_val == 2, rs1_b6_val == -17, rs1_b4_val == -128, rs1_b2_val == -5, rs1_b7_val == 2
// opcode: kslli8 ; op1:x30; dest:x31; op1val:0x2ef028007fb3f05;  immval:0x6
TEST_PKIMM_OP( kslli8, x31, x30, 0x0000000000000000, 0x2ef028007fb3f05, 0x6, x30, x3, 640, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x14_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x14_1:
    .fill 40*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 82*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
