
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umulx8 instruction of the RISC-V RV64PZicsr extension for the umulx8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umulx8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x22, rs2==x10, rd==x22, rs1_b0_val == 0, rs1_b7_val != rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b6_val != rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b5_val != rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b4_val != rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b3_val == 254, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b1_val == 16, rs2_b7_val == 8, rs2_b0_val == 239, rs2_b6_val == 4, rs1_b1_val == 4, rs2_b5_val == 128, rs1_b6_val == 64, rs2_b4_val == 255, rs1_b5_val == 4, rs2_b3_val == 4, rs1_b4_val == 253
// opcode: umulx8 ; op1:x22; op2:x10; dest:x22; op1val:0x0c4004fdfe050400;  op2val:0x080480ff040b10ef
TEST_P64_PNN_OP(umulx8, x22, $rd_hi, x22, x10, 0x0000000000000000, $correctval_hi, 0x0c4004fdfe050400, 0x080480ff040b10ef, x7, 0, x15)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x21, rd==x12, rs1_b7_val == rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b5_val == 253, rs2_b3_val == 85, rs1_b2_val == 1, rs1_b6_val == 191, rs1_b0_val == 64, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b1_val == 254, rs1_b1_val == 16, rs1_b4_val == 4, rs2_b0_val == 170
// opcode: umulx8 ; op1:x28; op2:x21; dest:x12; op1val:0x0cbffd04fe011040;  op2val:0x0c0b0a115511feaa
TEST_P64_PNN_OP(umulx8, x12, $rd_hi, x28, x21, 0x0000000000000000, $correctval_hi, 0x0cbffd04fe011040, 0x0c0b0a115511feaa, x7, 16, x15)

inst_2:
// rs1 == rs2 != rd, rs1==x27, rs2==x27, rd==x10, rs1_b6_val == rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b1_val == 2, rs2_b3_val == 239, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b4_val == 191, rs2_b7_val == 127, rs2_b5_val == 170, rs1_b2_val == 253
// opcode: umulx8 ; op1:x27; op2:x27; dest:x10; op1val:0x110c0a1206fd0a07;  op2val:0x7f0caabfef060207
TEST_P64_PNN_OP(umulx8, x10, $rd_hi, x27, x27, 0x0000000000000000, $correctval_hi, 0x110c0a1206fd0a07, 0x7f0caabfef060207, x7, 32, x15)

inst_3:
// rs1 == rs2 == rd, rs1==x26, rs2==x26, rd==x26, rs1_b5_val == rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b2_val == 64, rs1_b3_val == 127, rs1_b1_val == 223, rs1_b4_val == 127, rs2_b6_val == 0, rs1_b5_val == 170, rs1_b2_val == 239
// opcode: umulx8 ; op1:x26; op2:x26; dest:x26; op1val:0x0bbfaa7f7fefdf0c;  op2val:0x0e00aa0c55400203
TEST_P64_PNN_OP(umulx8, x26, $rd_hi, x26, x26, 0x0000000000000000, $correctval_hi, 0x0bbfaa7f7fefdf0c, 0x0e00aa0c55400203, x7, 48, x15)

inst_4:
// rs2 == rd != rs1, rs1==x11, rs2==x24, rd==x24, rs1_b4_val == rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b5_val == 254, rs1_b6_val == 170, rs1_b3_val == 223, rs1_b1_val == 239, rs2_b2_val == 191, rs1_b5_val == 85, rs2_b1_val == 0
// opcode: umulx8 ; op1:x11; op2:x24; dest:x24; op1val:0x0aaa5511dffdef00;  op2val:0x090ffe1111bf000a
TEST_P64_PNN_OP(umulx8, x24, $rd_hi, x11, x24, 0x0000000000000000, $correctval_hi, 0x0aaa5511dffdef00, 0x090ffe1111bf000a, x7, 64, x15)

inst_5:
// rs1==x10, rs2==x14, rd==x28, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b4_val == 0, rs1_b3_val == 85, rs1_b2_val == 8, rs2_b6_val == 247, rs2_b0_val == 255, rs2_b1_val == 253, rs1_b6_val == 32, rs1_b1_val == 254, rs2_b5_val == 239, rs2_b2_val == 128
// opcode: umulx8 ; op1:x10; op2:x14; dest:x28; op1val:0x07200a005508fe13;  op2val:0x0ff7ef0a5580fdff
TEST_P64_PNN_OP(umulx8, x28, $rd_hi, x10, x14, 0x0000000000000000, $correctval_hi, 0x07200a005508fe13, 0x0ff7ef0a5580fdff, x7, 80, x15)

inst_6:
// rs1==x9, rs2==x20, rd==x8, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b5_val == 251, rs2_b6_val == 251, rs1_b3_val == 1, rs1_b6_val == 2, rs1_b7_val == 247, rs2_b2_val == 239, rs2_b4_val == 2
// opcode: umulx8 ; op1:x9; op2:x20; dest:x8; op1val:0xf7020f0e01ef0403;  op2val:0x05fbfb020cef02ff
TEST_P64_PNN_OP(umulx8, x8, $rd_hi, x9, x20, 0x0000000000000000, $correctval_hi, 0xf7020f0e01ef0403, 0x05fbfb020cef02ff, x7, 96, x15)

inst_7:
// rs1==x6, rs2==x16, rd==x18, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b7_val == 2, rs2_b3_val == 170, rs2_b2_val == 4, rs1_b2_val == 128, rs1_b0_val == 253, rs2_b6_val == 2, rs1_b7_val == 253, rs1_b5_val == 239, rs2_b5_val == 247
// opcode: umulx8 ; op1:x6; op2:x16; dest:x18; op1val:0xfd0eef04118006fd;  op2val:0x0202f703aa04060c
TEST_P64_PNN_OP(umulx8, x18, $rd_hi, x6, x16, 0x0000000000000000, $correctval_hi, 0xfd0eef04118006fd, 0x0202f703aa04060c, x7, 112, x15)

inst_8:
// rs1==x5, rs2==x19, rd==x2, rs2_b7_val == 170, rs1_b7_val == 251, rs2_b2_val == 8, rs2_b1_val == 127, rs2_b4_val == 85
// opcode: umulx8 ; op1:x5; op2:x19; dest:x2; op1val:0xfb0a120f0a091306;  op2val:0xaaf70b550a087f06
TEST_P64_PNN_OP(umulx8, x2, $rd_hi, x5, x19, 0x0000000000000000, $correctval_hi, 0xfb0a120f0a091306, 0xaaf70b550a087f06, x7, 128, x15)

inst_9:
// rs1==x31, rs2==x8, rd==x30, rs2_b7_val == 85, rs1_b5_val == 251, rs1_b2_val == 4, rs1_b3_val == 251, rs1_b1_val == 251, rs2_b4_val == 253, rs1_b7_val == 239, rs1_b6_val == 255
// opcode: umulx8 ; op1:x31; op2:x8; dest:x30; op1val:0xeffffb0ffb04fb06;  op2val:0x550e13fd0d0e0a05
TEST_P64_PNN_OP(umulx8, x30, $rd_hi, x31, x8, 0x0000000000000000, $correctval_hi, 0xeffffb0ffb04fb06, 0x550e13fd0d0e0a05, x7, 144, x15)

inst_10:
// rs1==x23, rs2==x18, rd==x4, rs2_b7_val == 191, rs1_b0_val == 191, rs2_b2_val == 32, rs2_b6_val == 127, rs2_b3_val == 251, rs2_b5_val == 1, rs1_b4_val == 170, rs1_b6_val == 128, rs1_b2_val == 223
// opcode: umulx8 ; op1:x23; op2:x18; dest:x4; op1val:0xfb80efaa09df09bf;  op2val:0xbf7f0103fb201311
TEST_P64_PNN_OP(umulx8, x4, $rd_hi, x23, x18, 0x0000000000000000, $correctval_hi, 0xfb80efaa09df09bf, 0xbf7f0103fb201311, x7, 160, x15)

inst_11:
// rs1==x18, rs2==x5, rd==x6, rs2_b7_val == 223, rs1_b3_val == 170, rs2_b5_val == 32, rs2_b0_val == 128, rs1_b6_val == 251, rs2_b6_val == 1, rs1_b1_val == 255
// opcode: umulx8 ; op1:x18; op2:x5; dest:x6; op1val:0xf7fb550faa0cff0d;  op2val:0xdf01200aef121180
TEST_P64_PNN_OP(umulx8, x6, $rd_hi, x18, x5, 0x0000000000000000, $correctval_hi, 0xf7fb550faa0cff0d, 0xdf01200aef121180, x7, 176, x15)

inst_12:
// rs1==x19, rs2==x13, rd==x16, rs2_b7_val == 239, rs1_b6_val == 85, rs1_b0_val == 1, rs2_b3_val == 8, rs2_b0_val == 0, rs2_b4_val == 247, rs1_b3_val == 255, rs1_b4_val == 64, rs1_b2_val == 251
// opcode: umulx8 ; op1:x19; op2:x13; dest:x16; op1val:0x11550a40fffb0a01;  op2val:0xef03fef708120e00
TEST_P64_PNN_OP(umulx8, x16, $rd_hi, x19, x13, 0x0000000000000000, $correctval_hi, 0x11550a40fffb0a01, 0xef03fef708120e00, x7, 192, x15)

inst_13:
// rs1==x16, rs2==x12, rd==x20, rs2_b7_val == 247, rs2_b3_val == 191, rs1_b1_val == 127, rs1_b0_val == 8, rs2_b4_val == 239, rs1_b7_val == 64, rs1_b6_val == 4, rs1_b5_val == 191
// opcode: umulx8 ; op1:x16; op2:x12; dest:x20; op1val:0x4004bf09aa047f08;  op2val:0xf70f11efbf111107
TEST_P64_PNN_OP(umulx8, x20, $rd_hi, x16, x12, 0x0000000000000000, $correctval_hi, 0x4004bf09aa047f08, 0xf70f11efbf111107, x7, 208, x15)

inst_14:
// rs1==x4, rs2==x1, rd==x14, rs2_b7_val == 251, rs2_b4_val == 4, rs1_b0_val == 255, rs2_b3_val == 16, rs1_b3_val == 247
// opcode: umulx8 ; op1:x4; op2:x1; dest:x14; op1val:0x0b090d0df70f10ff;  op2val:0xfb0c1104100d1213
TEST_P64_PNN_OP(umulx8, x14, $rd_hi, x4, x1, 0x0000000000000000, $correctval_hi, 0x0b090d0df70f10ff, 0xfb0c1104100d1213, x7, 224, x15)

inst_15:
// rs1==x1, rs2==x30, rs2_b7_val == 253, rs2_b1_val == 170, rs1_b3_val == 64, rs1_b4_val == 85, rs1_b1_val == 1, rs2_b0_val == 127
// opcode: umulx8 ; op1:x1; op2:x30; dest:x12; op1val:0x40020e55400d0113;  op2val:0xfd07fe060740aa7f
TEST_P64_PNN_OP(umulx8, x12, $rd_hi, x1, x30, 0x0000000000000000, $correctval_hi, 0x40020e55400d0113, 0xfd07fe060740aa7f, x7, 240, x15)

inst_16:
// rs1==x20, rs2==x28, rs2_b7_val == 254, rs1_b0_val == 223, rs1_b6_val == 239, rs1_b5_val == 254
// opcode: umulx8 ; op1:x20; op2:x28; dest:x14; op1val:0x12effe0e40137fdf;  op2val:0xfe0b06bf0707050d
TEST_P64_PNN_OP(umulx8, x14, $rd_hi, x20, x28, 0x0000000000000000, $correctval_hi, 0x12effe0e40137fdf, 0xfe0b06bf0707050d, x7, 256, x15)

inst_17:
// rs1==x2, rs2==x11, rs2_b7_val == 128, rs1_b0_val == 32, rs2_b0_val == 1, rs1_b4_val == 239, rs2_b1_val == 4, rs1_b7_val == 32
// opcode: umulx8 ; op1:x2; op2:x11; dest:x3; op1val:0x2055efef03130c20;  op2val:0x807f09bffb070401
TEST_P64_PNN_OP(umulx8, x3, $rd_hi, x2, x11, 0x0000000000000000, $correctval_hi, 0x2055efef03130c20, 0x807f09bffb070401, x7, 272, x15)

inst_18:
// rs1==x13, rs2==x31, rs2_b7_val == 64, rs2_b5_val == 253, rs1_b2_val == 2, rs2_b3_val == 1, rs2_b4_val == 251, rs1_b5_val == 127
// opcode: umulx8 ; op1:x13; op2:x31; dest:x24; op1val:0x0def7f09fb02040a;  op2val:0x4005fdfb010ffeef
TEST_P64_PNN_OP(umulx8, x24, $rd_hi, x13, x31, 0x0000000000000000, $correctval_hi, 0x0def7f09fb02040a, 0x4005fdfb010ffeef, x7, 288, x16)

inst_19:
// rs1==x25, rs2==x23, rs2_b7_val == 32, rs2_b3_val == 255, rs1_b3_val == 191, rs1_b6_val == 253, rs2_b4_val == 1
// opcode: umulx8 ; op1:x25; op2:x23; dest:x5; op1val:0xfdfdfd0abf13df09;  op2val:0x20040901ff110500
TEST_P64_PNN_OP(umulx8, x5, $rd_hi, x25, x23, 0x0000000000000000, $correctval_hi, 0xfdfdfd0abf13df09, 0x20040901ff110500, x7, 304, x16)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_20:
// rs1==x15, rs2==x17, rs2_b7_val == 16, rs1_b5_val == 2, rs2_b1_val == 223, rs1_b3_val == 2, rs2_b4_val == 128, rs1_b2_val == 191, rs2_b5_val == 191
// opcode: umulx8 ; op1:x15; op2:x17; dest:x9; op1val:0x130e020702bf0708;  op2val:0x1002bf800304df7f
TEST_P64_PNN_OP(umulx8, x9, $rd_hi, x15, x17, 0x0000000000000000, $correctval_hi, 0x130e020702bf0708, 0x1002bf800304df7f, x1, 0, x16)

inst_21:
// rs1==x17, rs2==x2, rs2_b7_val == 4, rs2_b0_val == 8, rs1_b7_val == 223, rs2_b2_val == 1
// opcode: umulx8 ; op1:x17; op2:x2; dest:x6; op1val:0xdf070c0d0580130c;  op2val:0x041106030b011108
TEST_P64_PNN_OP(umulx8, x6, $rd_hi, x17, x2, 0x0000000000000000, $correctval_hi, 0xdf070c0d0580130c, 0x041106030b011108, x1, 16, x16)

inst_22:
// rs1==x24, rs2==x29, rs2_b7_val == 1, rs2_b6_val == 223, rs1_b7_val == 127, rs2_b1_val == 64, rs1_b1_val == 191
// opcode: umulx8 ; op1:x24; op2:x29; dest:x20; op1val:0x7f0f55ef13efbffd;  op2val:0x01df0cf70d0f4012
TEST_P64_PNN_OP(umulx8, x20, $rd_hi, x24, x29, 0x0000000000000000, $correctval_hi, 0x7f0f55ef13efbffd, 0x01df0cf70d0f4012, x1, 32, x16)

inst_23:
// rs1==x30, rs2==x9, rs2_b7_val == 255, rs1_b3_val == 253, rs2_b3_val == 127
// opcode: umulx8 ; op1:x30; op2:x9; dest:x14; op1val:0xfb0dfd0afd0a0d20;  op2val:0xff0ebf137f0d40aa
TEST_P64_PNN_OP(umulx8, x14, $rd_hi, x30, x9, 0x0000000000000000, $correctval_hi, 0xfb0dfd0afd0a0d20, 0xff0ebf137f0d40aa, x1, 48, x16)

inst_24:
// rs1==x0, rs2==x25, rs2_b7_val == 0, rs2_b0_val == 254, rs1_b5_val == 16, rs2_b3_val == 64, rs2_b6_val == 8, rs1_b1_val == 128, rs1_b2_val == 247
// opcode: umulx8 ; op1:x0; op2:x25; dest:x9; op1val:0x070c1000fbf78012;  op2val:0x00080f07400d13fe
TEST_P64_PNN_OP(umulx8, x9, $rd_hi, x0, x25, 0x0000000000000000, $correctval_hi, 0x070c1000fbf78012, 0x00080f07400d13fe, x1, 64, x16)

inst_25:
// rs1==x21, rs2==x4, rs2_b6_val == 170, rs1_b6_val == 16, rs2_b5_val == 85, rs1_b1_val == 0, rs1_b4_val == 254
// opcode: umulx8 ; op1:x21; op2:x4; dest:x10; op1val:0x12100bfeaa120005;  op2val:0x04aa55110e0b40aa
TEST_P64_PNN_OP(umulx8, x10, $rd_hi, x21, x4, 0x0000000000000000, $correctval_hi, 0x12100bfeaa120005, 0x04aa55110e0b40aa, x1, 80, x16)

inst_26:
// rs1==x3, rs2==x7, rs2_b6_val == 85, rs1_b3_val == 4, rs2_b5_val == 0, rs1_b7_val == 16, rs1_b1_val == 8
// opcode: umulx8 ; op1:x3; op2:x7; dest:x9; op1val:0x10400aaa040308ff;  op2val:0x0f55000a0f080412
TEST_P64_PNN_OP(umulx8, x9, $rd_hi, x3, x7, 0x0000000000000000, $correctval_hi, 0x10400aaa040308ff, 0x0f55000a0f080412, x1, 96, x16)

inst_27:
// rs1==x29, rs2==x15, rs2_b6_val == 191, rs1_b7_val == 0, rs2_b3_val == 247, rs1_b1_val == 247, rs1_b2_val == 85, rs2_b1_val == 8, rs2_b4_val == 64, rs1_b4_val == 32
// opcode: umulx8 ; op1:x29; op2:x15; dest:x5; op1val:0x00407f20fe55f708;  op2val:0x0bbf0340f7010805
TEST_P64_PNN_OP(umulx8, x5, $rd_hi, x29, x15, 0x0000000000000000, $correctval_hi, 0x00407f20fe55f708, 0x0bbf0340f7010805, x1, 112, x16)

inst_28:
// rs1==x12, rs2==x3, rs2_b6_val == 239, rs1_b4_val == 223, rs2_b0_val == 251, rs2_b2_val == 170, rs1_b6_val == 127
// opcode: umulx8 ; op1:x12; op2:x3; dest:x15; op1val:0x0b7f12dfdf021206;  op2val:0x05efaaef12aa06fb
TEST_P64_PNN_OP(umulx8, x15, $rd_hi, x12, x3, 0x0000000000000000, $correctval_hi, 0x0b7f12dfdf021206, 0x05efaaef12aa06fb, x1, 128, x16)

inst_29:
// rs1==x7, rs2==x6, rs2_b6_val == 253, rs1_b7_val == 170, rs1_b2_val == 127, rs2_b5_val == 8
// opcode: umulx8 ; op1:x7; op2:x6; dest:x15; op1val:0xaa0a0709057ffe0d;  op2val:0x0bfd08130703127f
TEST_P64_PNN_OP(umulx8, x15, $rd_hi, x7, x6, 0x0000000000000000, $correctval_hi, 0xaa0a0709057ffe0d, 0x0bfd08130703127f, x1, 144, x16)

inst_30:
// rs1==x14, rs2==x0, rs1_b3_val == 239, rs1_b0_val == 247, rs2_b3_val == 0, rs2_b0_val == 247, rs1_b7_val == 8
// opcode: umulx8 ; op1:x14; op2:x0; dest:x11; op1val:0x080510dfef11fef7;  op2val:0xef05aa1200097ff7
TEST_P64_PNN_OP(umulx8, x11, $rd_hi, x14, x0, 0x0000000000000000, $correctval_hi, 0x080510dfef11fef7, 0xef05aa1200097ff7, x1, 160, x16)

inst_31:
// rs1==x8, rs2==x22, rs1_b3_val == 128, rs1_b6_val == 0, rs1_b1_val == 170, rs1_b7_val == 2, rs1_b2_val == 254
// opcode: umulx8 ; op1:x8; op2:x22; dest:x25; op1val:0x0200fe0b80feaa11;  op2val:0xdf040509aabf1108
TEST_P64_PNN_OP(umulx8, x25, $rd_hi, x8, x22, 0x0000000000000000, $correctval_hi, 0x0200fe0b80feaa11, 0xdf040509aabf1108, x1, 176, x16)

inst_32:
// rs1_b3_val == 32, rs1_b2_val == 16, rs1_b4_val == 128, rs2_b2_val == 2, rs2_b0_val == 2
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x06110d8020100ff7;  op2val:0x20090f0606020202
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x06110d8020100ff7, 0x20090f0606020202, x1, 192, x16)

inst_33:
// rs1_b3_val == 16, rs1_b6_val == 8, rs1_b1_val == 64
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb0812401007400e;  op2val:0x040daa0409011380
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfb0812401007400e, 0x040daa0409011380, x1, 208, x16)

inst_34:
// rs1_b3_val == 8, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xf710130908bf8040;  op2val:0x0b0ffe0b13407f03
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf710130908bf8040, 0x0b0ffe0b13407f03, x1, 224, x16)

inst_35:
// rs1_b3_val == 0, rs2_b6_val == 32, rs1_b7_val == 254, rs2_b3_val == 223
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe0dfe40000e0a40;  op2val:0x13200004df07fe06
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfe0dfe40000e0a40, 0x13200004df07fe06, x1, 240, x16)

inst_36:
// rs1_b2_val == 170, rs1_b5_val == 255, rs2_b0_val == 4, rs2_b1_val == 191, rs1_b7_val == 85, rs2_b6_val == 16
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x5505ff80f7aafbf7;  op2val:0x7f1003120712bf04
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x5505ff80f7aafbf7, 0x7f1003120712bf04, x1, 256, x16)

inst_37:
// rs1_b2_val == 64, rs2_b4_val == 32, rs1_b7_val == 255, rs2_b1_val == 32, rs1_b5_val == 247
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ff7ef07400e0b;  op2val:0x0e08082013802005
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7ff7ef07400e0b, 0x0e08082013802005, x1, 272, x16)

inst_38:
// rs1_b2_val == 32, rs2_b5_val == 127
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x00aa0b0620200a12;  op2val:0x08fd7f13fb07100c
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00aa0b0620200a12, 0x08fd7f13fb07100c, x1, 288, x16)

inst_39:
// rs1_b2_val == 255, rs2_b0_val == 16, rs1_b5_val == 1, rs1_b0_val == 254, rs1_b4_val == 8
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x09fd010811ffeffe;  op2val:0x800305fb400a0610
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x09fd010811ffeffe, 0x800305fb400a0610, x1, 304, x16)

inst_40:
// rs1_b2_val == 0, rs2_b0_val == 32
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x4012fe0b12000adf;  op2val:0x0c0720efbf09fe20
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x4012fe0b12000adf, 0x0c0720efbf09fe20, x1, 320, x16)

inst_41:
// rs1_b1_val == 85, rs1_b4_val == 247
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x08090cf7ff075500;  op2val:0x1255fd80ef05aa03
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x08090cf7ff075500, 0x1255fd80ef05aa03, x1, 336, x16)

inst_42:
// rs2_b6_val == 254, rs2_b4_val == 8, rs2_b2_val == 254
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x07aaf780ef00030f;  op2val:0xfbfe0b0806fe7faa
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x07aaf780ef00030f, 0xfbfe0b0806fe7faa, x1, 352, x16)

inst_43:
// rs2_b6_val == 128, rs2_b2_val == 247, rs2_b5_val == 255, rs1_b4_val == 1, rs1_b5_val == 128
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa0780011180f7bf;  op2val:0xdf80ff0613f700ff
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaa0780011180f7bf, 0xdf80ff0613f700ff, x1, 368, x16)

inst_44:
// rs2_b6_val == 64, rs2_b5_val == 64, rs1_b6_val == 254
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x0ffe0103ff030c03;  op2val:0x0a40401205401210
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0ffe0103ff030c03, 0x0a40401205401210, x1, 384, x16)

inst_45:
// rs1_b1_val == 253, rs2_b4_val == 0, rs2_b0_val == 191
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x7fbf07aadf06fddf;  op2val:0x090f0b00ef0a0cbf
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fbf07aadf06fddf, 0x090f0b00ef0a0cbf, x1, 400, x16)

inst_46:
// rs1_b1_val == 32, rs1_b6_val == 247, rs2_b3_val == 32, rs1_b0_val == 85, rs2_b4_val == 127
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x0ef7ef7f027f2055;  op2val:0xfe0d007f200bfd12
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0ef7ef7f027f2055, 0xfe0d007f200bfd12, x1, 416, x16)

inst_47:
// rs2_b2_val == 16, rs1_b4_val == 191, rs2_b4_val == 16
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x0c0cfebf4006ff01;  op2val:0x02fbaa100d100411
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0c0cfebf4006ff01, 0x02fbaa100d100411, x1, 432, x16)

inst_48:
// rs2_b2_val == 255, rs2_b4_val == 254, rs2_b1_val == 247
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfeaa0f11130e80fd;  op2val:0xdf5505fe0efff70e
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeaa0f11130e80fd, 0xdf5505fe0efff70e, x1, 448, x16)

inst_49:
// rs2_b2_val == 0, rs2_b5_val == 4
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdaa06df03ef2009;  op2val:0x0c1204080d000210
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdaa06df03ef2009, 0x0c1204080d000210, x1, 464, x16)

inst_50:
// rs2_b1_val == 85, rs2_b5_val == 2, rs2_b2_val == 251
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x0c137faa0780aa40;  op2val:0x1210020840fb55ef
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0c137faa0780aa40, 0x1210020840fb55ef, x1, 480, x16)

inst_51:
// rs2_b1_val == 239, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x0d08110010080409;  op2val:0x121101060f80ef0f
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0d08110010080409, 0x121101060f80ef0f, x1, 496, x16)

inst_52:
// rs2_b1_val == 251, rs2_b4_val == 223, rs2_b2_val == 253
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdbffd0f02fe0006;  op2val:0xfd020bdf0cfdfb05
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdbffd0f02fe0006, 0xfd020bdf0cfdfb05, x1, 512, x16)

inst_53:
// rs2_b1_val == 128, rs2_b3_val == 2
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x12040d0080107f40;  op2val:0x00030300020b807f
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x12040d0080107f40, 0x00030300020b807f, x1, 528, x16)

inst_54:
// rs2_b1_val == 1, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x20080606110f0540;  op2val:0x0d12fe8040080109
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x20080606110f0540, 0x0d12fe8040080109, x1, 544, x16)

inst_55:
// rs2_b1_val == 255, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f0709110e070bf7;  op2val:0x10aa00020404fffb
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7f0709110e070bf7, 0x10aa00020404fffb, x1, 560, x16)

inst_56:
// rs2_b0_val == 85, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xf704aa04ef40120c;  op2val:0x127fbf0a0cfb0655
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf704aa04ef40120c, 0x127fbf0a0cfb0655, x1, 576, x16)

inst_57:
// rs2_b0_val == 223, rs1_b7_val == 128, rs1_b4_val == 251
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x80040efb7f7f0a11;  op2val:0xf700ef00f70f05df
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x80040efb7f7f0a11, 0xf700ef00f70f05df, x1, 592, x16)

inst_58:
// rs2_b0_val == 253, rs1_b0_val == 251
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x0cff0f030c0df7fb;  op2val:0xdff7ff07fb0207fd
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0cff0f030c0df7fb, 0xdff7ff07fb0207fd, x1, 608, x16)

inst_59:
// rs2_b0_val == 64, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x100fef5520fd200c;  op2val:0x0afe80ffbf007f40
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x100fef5520fd200c, 0x0afe80ffbf007f40, x1, 624, x16)

inst_60:
// rs1_b7_val == 4, rs2_b2_val == 223
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x04037f13ef0f4006;  op2val:0x0b11ff7f0cdfaaf7
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x04037f13ef0f4006, 0x0b11ff7f0cdfaaf7, x1, 640, x16)

inst_61:
// rs1_b0_val == 239, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x0011f7ef551303ef;  op2val:0x020cbf0006070900
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0011f7ef551303ef, 0x020cbf0006070900, x1, 656, x16)

inst_62:
// rs1_b7_val == 1, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x011201010b00000d;  op2val:0x0efb04fe061302aa
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x011201010b00000d, 0x0efb04fe061302aa, x1, 672, x16)

inst_63:
// rs1_b0_val == 127, rs1_b5_val == 32
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x03002055080def7f;  op2val:0x0e09ef20130fff03
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x03002055080def7f, 0x0e09ef20130fff03, x1, 688, x16)

inst_64:
// rs2_b5_val == 16, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x07fe06fd20800e0f;  op2val:0x130f10ef06080d10
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x07fe06fd20800e0f, 0x130f10ef06080d10, x1, 704, x16)

inst_65:
// rs1_b0_val == 128, rs1_b4_val == 16
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x55fe071020135580;  op2val:0x0cfdf703ff0b1110
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x55fe071020135580, 0x0cfdf703ff0b1110, x1, 720, x16)

inst_66:
// rs1_b6_val == 223, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x0edf20fe7f040805;  op2val:0x0b01000bdfffdf0a
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0edf20fe7f040805, 0x0b01000bdfffdf0a, x1, 736, x16)

inst_67:
// rs1_b0_val == 16, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x100a04808080ef10;  op2val:0x02100408efefff10
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x100a04808080ef10, 0x02100408efefff10, x1, 752, x16)

inst_68:
// rs1_b0_val == 4, rs1_b6_val == 1
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x05010340f7070504;  op2val:0xaa7fff0a7ffd0706
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x05010340f7070504, 0xaa7fff0a7ffd0706, x1, 768, x16)

inst_69:
// rs2_b4_val == 170, rs1_b1_val == 2
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x038013fb050e020e;  op2val:0x0f11f7aaaa09090c
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x038013fb050e020e, 0x0f11f7aaaa09090c, x1, 784, x16)

inst_70:
// rs1_b0_val == 2, rs2_b3_val == 254
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x20fd0e087fbf0b02;  op2val:0x0510bf0bfe11550e
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x20fd0e087fbf0b02, 0x0510bf0bfe11550e, x1, 800, x16)

inst_71:
// rs1_b5_val == 64, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x0eaa40040e2001f7;  op2val:0xfe800d0100010abf
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0eaa40040e2001f7, 0xfe800d0100010abf, x1, 816, x16)

inst_72:
// rs1_b5_val == 8, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x01ff08ef40067f08;  op2val:0x0c07f7fb06fff7ff
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x01ff08ef40067f08, 0x0c07f7fb06fff7ff, x1, 832, x16)

inst_73:
// rs2_b3_val == 253, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x120b0b0380091020;  op2val:0xfef70f0dfd0c040d
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x120b0b0380091020, 0xfef70f0dfd0c040d, x1, 848, x16)

inst_74:
// rs2_b3_val == 128, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xf70a20eff7aa0b05;  op2val:0x1013bfef80aa05fd
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf70a20eff7aa0b05, 0x1013bfef80aa05fd, x1, 864, x16)

inst_75:
// rs1_b5_val == 0, rs1_b7_val == 191
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf1200df55401207;  op2val:0x0cf7100340efef09
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbf1200df55401207, 0x0cf7100340efef09, x1, 880, x16)

inst_76:
// rs2_b2_val == 127, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x400a1211060e0605;  op2val:0x0a0dfe11fd7fef02
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x400a1211060e0605, 0x0a0dfe11fd7fef02, x1, 896, x16)

inst_77:
// rs2_b5_val == 223, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x55057f0008bf0c80;  op2val:0xef12df13407f1101
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x55057f0008bf0c80, 0xef12df13407f1101, x1, 912, x16)

inst_78:
// rs2_b2_val == 85, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x06030adf2006040a;  op2val:0xaadf010a0b55fe01
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x06030adf2006040a, 0xaadf010a0b55fe01, x1, 928, x16)

inst_79:
// rs2_b6_val == 255, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb060a120c550c0c;  op2val:0x04ff08aa2080bf0f
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfb060a120c550c0c, 0x04ff08aa2080bf0f, x1, 944, x16)

inst_80:
// rs1_b5_val == 223, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x0209dffdaa010f55;  op2val:0x02aafe010c100f0d
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0209dffdaa010f55, 0x02aafe010c100f0d, x1, 960, x16)

inst_81:
// rs1_b4_val == 2, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x06f702020a020404;  op2val:0xfe4009121205df55
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x06f702020a020404, 0xfe4009121205df55, x1, 976, x16)

inst_82:
// rs1_b0_val == 170, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x100e1107bf0e7faa;  op2val:0x0b207f20df4009bf
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x100e1107bf0e7faa, 0x0b207f20df4009bf, x1, 992, x16)

inst_83:
// rs1_b4_val == 255, 
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x12050fff037f090a;  op2val:0x2008fd0e0d120320
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x12050fff037f090a, 0x2008fd0e0d120320, x1, 1008, x16)

inst_84:
// rs1_b6_val == rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b1_val == 2, rs2_b3_val == 239, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b4_val == 191, rs2_b7_val == 127, rs2_b5_val == 170, rs1_b2_val == 253
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x110c0a1206fd0a07;  op2val:0x7f0caabfef060207
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x110c0a1206fd0a07, 0x7f0caabfef060207, x1, 1024, x16)

inst_85:
// rs2_b7_val == 0, rs2_b0_val == 254, rs1_b5_val == 16, rs2_b3_val == 64, rs2_b6_val == 8, rs1_b1_val == 128, rs1_b2_val == 247
// opcode: umulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x070c1000fbf78012;  op2val:0x00080f07400d13fe
TEST_P64_PNN_OP(umulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x070c1000fbf78012, 0x00080f07400d13fe, x1, 1040, x16)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 40*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 132*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
