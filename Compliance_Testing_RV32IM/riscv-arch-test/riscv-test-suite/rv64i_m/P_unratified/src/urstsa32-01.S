
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the urstsa32 instruction of the RISC-V RV64PZicsr extension for the urstsa32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",urstsa32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 == rd != rs2, rs1==x26, rs2==x15, rd==x26, rs1_w0_val == 0, rs2_w1_val == 1073741824, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w0_val == 0, rs1_w1_val == 4294934527
// opcode: urstsa32 ; op1:x26; op2:x15; dest:x26; op1val:0xffff7fff00000000;  op2val:0x4000000000000000
TEST_RR_OP(urstsa32, x26, x26, x15, 0x0000000000000000, 0xffff7fff00000000, 0x4000000000000000, x5, 0, x9)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x27, rs2==x13, rd==x22, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 64, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 4294967263, rs1_w1_val == 64
// opcode: urstsa32 ; op1:x27; op2:x13; dest:x22; op1val:0x000040ffffffdf;  op2val:0x00004000000012
TEST_RR_OP(urstsa32, x22, x27, x13, 0x0000000000000000, 0x000040ffffffdf, 0x00004000000012, x5, 8, x9)

inst_2:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x28, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 4294950911, rs1_w1_val == 4294967039
// opcode: urstsa32 ; op1:x31; op2:x31; dest:x28; op1val:0xfffffeff0000000c;  op2val:0xffffbfff0000000c
TEST_RR_OP(urstsa32, x28, x31, x31, 0x0000000000000000, 0xfffffeff0000000c, 0xffffbfff0000000c, x5, 16, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x30, rs2==x30, rd==x30, rs2_w1_val == 2863311530, rs2_w0_val == 131072, rs1_w0_val == 2097152
// opcode: urstsa32 ; op1:x30; op2:x30; dest:x30; op1val:0x00000a00200000;  op2val:0xaaaaaaaa00020000
TEST_RR_OP(urstsa32, x30, x30, x30, 0x0000000000000000, 0x00000a00200000, 0xaaaaaaaa00020000, x5, 24, x9)

inst_4:
// rs2 == rd != rs1, rs1==x13, rs2==x2, rd==x2, rs2_w1_val == 1431655765, rs2_w0_val == 4294967293, rs1_w1_val == 2147483648
// opcode: urstsa32 ; op1:x13; op2:x2; dest:x2; op1val:0x800000000000000c;  op2val:0x55555555fffffffd
TEST_RR_OP(urstsa32, x2, x13, x2, 0x0000000000000000, 0x800000000000000c, 0x55555555fffffffd, x5, 32, x9)

inst_5:
// rs1==x19, rs2==x3, rd==x16, rs2_w1_val == 2147483647, rs2_w0_val == 262144, rs1_w1_val == 4261412863, rs1_w0_val == 4026531839
// opcode: urstsa32 ; op1:x19; op2:x3; dest:x16; op1val:0xfdffffffefffffff;  op2val:0x7fffffff00040000
TEST_RR_OP(urstsa32, x16, x19, x3, 0x0000000000000000, 0xfdffffffefffffff, 0x7fffffff00040000, x5, 40, x9)

inst_6:
// rs1==x4, rs2==x21, rd==x17, rs2_w1_val == 3221225471, rs2_w0_val == 4294967039, rs1_w1_val == 4294967291, rs1_w0_val == 268435456
// opcode: urstsa32 ; op1:x4; op2:x21; dest:x17; op1val:0xfffffffb10000000;  op2val:0xbffffffffffffeff
TEST_RR_OP(urstsa32, x17, x4, x21, 0x0000000000000000, 0xfffffffb10000000, 0xbffffffffffffeff, x5, 48, x9)

inst_7:
// rs1==x22, rs2==x1, rd==x20, rs2_w1_val == 3758096383, rs1_w1_val == 0, rs1_w0_val == 16777216, rs2_w0_val == 2147483647
// opcode: urstsa32 ; op1:x22; op2:x1; dest:x20; op1val:0x00000001000000;  op2val:0xdfffffff7fffffff
TEST_RR_OP(urstsa32, x20, x22, x1, 0x0000000000000000, 0x00000001000000, 0xdfffffff7fffffff, x5, 56, x9)

inst_8:
// rs1==x25, rs2==x19, rd==x18, rs2_w1_val == 4026531839, rs1_w1_val == 3758096383, rs2_w0_val == 16, rs1_w0_val == 2
// opcode: urstsa32 ; op1:x25; op2:x19; dest:x18; op1val:0xdfffffff00000002;  op2val:0xefffffff00000010
TEST_RR_OP(urstsa32, x18, x25, x19, 0x0000000000000000, 0xdfffffff00000002, 0xefffffff00000010, x5, 64, x9)

inst_9:
// rs1==x18, rs2==x24, rd==x14, rs2_w1_val == 4160749567, rs1_w0_val == 4294967293, rs1_w1_val == 4294967287, rs2_w0_val == 4160749567
// opcode: urstsa32 ; op1:x18; op2:x24; dest:x14; op1val:0xfffffff7fffffffd;  op2val:0xf7fffffff7ffffff
TEST_RR_OP(urstsa32, x14, x18, x24, 0x0000000000000000, 0xfffffff7fffffffd, 0xf7fffffff7ffffff, x5, 72, x9)

inst_10:
// rs1==x6, rs2==x25, rd==x8, rs2_w1_val == 4227858431, rs1_w1_val == 2, rs1_w0_val == 8
// opcode: urstsa32 ; op1:x6; op2:x25; dest:x8; op1val:0x00000200000008;  op2val:0xfbffffff00020000
TEST_RR_OP(urstsa32, x8, x6, x25, 0x0000000000000000, 0x00000200000008, 0xfbffffff00020000, x5, 80, x9)

inst_11:
// rs1==x0, rs2==x6, rd==x31, rs2_w1_val == 4261412863, rs2_w0_val == 4294967294, rs1_w0_val == 4293918719
// opcode: urstsa32 ; op1:x0; op2:x6; dest:x31; op1val:0xdfffffffffefffff;  op2val:0xfdfffffffffffffe
TEST_RR_OP(urstsa32, x31, x0, x6, 0x0000000000000000, 0xdfffffffffefffff, 0xfdfffffffffffffe, x5, 88, x9)

inst_12:
// rs1==x14, rs2==x7, rd==x11, rs2_w1_val == 4278190079, rs1_w0_val == 262144, rs1_w1_val == 4294963199
// opcode: urstsa32 ; op1:x14; op2:x7; dest:x11; op1val:0xffffefff00040000;  op2val:0xfeffffff0000000d
TEST_RR_OP(urstsa32, x11, x14, x7, 0x0000000000000000, 0xffffefff00040000, 0xfeffffff0000000d, x5, 96, x9)

inst_13:
// rs1==x15, rs2==x10, rd==x23, rs2_w1_val == 4286578687, rs1_w0_val == 4227858431, rs1_w1_val == 16777216
// opcode: urstsa32 ; op1:x15; op2:x10; dest:x23; op1val:0x1000000fbffffff;  op2val:0xff7fffff00000000
TEST_RR_OP(urstsa32, x23, x15, x10, 0x0000000000000000, 0x1000000fbffffff, 0xff7fffff00000000, x5, 104, x9)
RVTEST_SIGBASE(x26,signature_x26_0)

inst_14:
// rs1==x11, rs2==x12, rd==x10, rs2_w1_val == 4290772991, rs2_w0_val == 4261412863, rs1_w1_val == 4294967294
// opcode: urstsa32 ; op1:x11; op2:x12; dest:x10; op1val:0xfffffffe00000000;  op2val:0xffbffffffdffffff
TEST_RR_OP(urstsa32, x10, x11, x12, 0x0000000000000000, 0xfffffffe00000000, 0xffbffffffdffffff, x26, 0, x22)

inst_15:
// rs1==x7, rs2==x28, rd==x6, rs2_w1_val == 4292870143, rs2_w0_val == 4294967291, rs1_w0_val == 4290772991, rs1_w1_val == 4294950911
// opcode: urstsa32 ; op1:x7; op2:x28; dest:x6; op1val:0xffffbfffffbfffff;  op2val:0xffdffffffffffffb
TEST_RR_OP(urstsa32, x6, x7, x28, 0x0000000000000000, 0xffffbfffffbfffff, 0xffdffffffffffffb, x26, 8, x22)

inst_16:
// rs1==x28, rs2==x9, rd==x0, rs2_w1_val == 4293918719, rs1_w1_val == 1073741824
// opcode: urstsa32 ; op1:x28; op2:x9; dest:x0; op1val:0x40000000fbffffff;  op2val:0xffefffff0000000f
TEST_RR_OP(urstsa32, x0, x28, x9, 0x0000000000000000, 0x40000000fbffffff, 0xffefffff0000000f, x26, 16, x22)

inst_17:
// rs1==x1, rs2==x17, rd==x24, rs2_w1_val == 4294443007, rs1_w0_val == 4294967167, rs1_w1_val == 65536, rs2_w0_val == 524288
// opcode: urstsa32 ; op1:x1; op2:x17; dest:x24; op1val:0x010000ffffff7f;  op2val:0xfff7ffff00080000
TEST_RR_OP(urstsa32, x24, x1, x17, 0x0000000000000000, 0x010000ffffff7f, 0xfff7ffff00080000, x26, 24, x22)

inst_18:
// rs1==x3, rs2==x11, rd==x15, rs2_w1_val == 4294705151, rs1_w0_val == 4294705151, rs1_w1_val == 8192
// opcode: urstsa32 ; op1:x3; op2:x11; dest:x15; op1val:0x002000fffbffff;  op2val:0xfffbffff00000009
TEST_RR_OP(urstsa32, x15, x3, x11, 0x0000000000000000, 0x002000fffbffff, 0xfffbffff00000009, x26, 32, x22)

inst_19:
// rs1==x12, rs2==x18, rd==x21, rs2_w1_val == 4294836223, rs1_w0_val == 16384
// opcode: urstsa32 ; op1:x12; op2:x18; dest:x21; op1val:0x00000000004000;  op2val:0xfffdffff0000000d
TEST_RR_OP(urstsa32, x21, x12, x18, 0x0000000000000000, 0x00000000004000, 0xfffdffff0000000d, x26, 40, x22)

inst_20:
// rs1==x17, rs2==x20, rd==x3, rs2_w1_val == 4294901759, rs2_w0_val == 2, rs1_w1_val == 2048
// opcode: urstsa32 ; op1:x17; op2:x20; dest:x3; op1val:0x00080000000013;  op2val:0xfffeffff00000002
TEST_RR_OP(urstsa32, x3, x17, x20, 0x0000000000000000, 0x00080000000013, 0xfffeffff00000002, x26, 48, x22)

inst_21:
// rs1==x23, rs2==x8, rd==x5, rs2_w1_val == 4294934527, rs2_w0_val == 4294966783, rs1_w0_val == 3221225471, rs1_w1_val == 4294967295
// opcode: urstsa32 ; op1:x23; op2:x8; dest:x5; op1val:0xffffffffbfffffff;  op2val:0xffff7ffffffffdff
TEST_RR_OP(urstsa32, x5, x23, x8, 0x0000000000000000, 0xffffffffbfffffff, 0xffff7ffffffffdff, x26, 56, x22)

inst_22:
// rs1==x9, rs2==x16, rd==x12, rs2_w1_val == 4294959103, rs2_w0_val == 4096
// opcode: urstsa32 ; op1:x9; op2:x16; dest:x12; op1val:0xffff7fff0000000e;  op2val:0xffffdfff00001000
TEST_RR_OP(urstsa32, x12, x9, x16, 0x0000000000000000, 0xffff7fff0000000e, 0xffffdfff00001000, x26, 64, x22)

inst_23:
// rs1==x21, rs2==x27, rd==x4, rs2_w1_val == 4294963199, rs2_w0_val == 128, rs1_w0_val == 1048576
// opcode: urstsa32 ; op1:x21; op2:x27; dest:x4; op1val:0xfffffffe00100000;  op2val:0xffffefff00000080
TEST_RR_OP(urstsa32, x4, x21, x27, 0x0000000000000000, 0xfffffffe00100000, 0xffffefff00000080, x26, 72, x22)

inst_24:
// rs1==x5, rs2==x0, rd==x7, rs2_w1_val == 4294965247, rs1_w0_val == 4294967039, rs1_w1_val == 4294965247
// opcode: urstsa32 ; op1:x5; op2:x0; dest:x7; op1val:0xfffff7fffffffeff;  op2val:0xfffff7fffffffdff
TEST_RR_OP(urstsa32, x7, x5, x0, 0x0000000000000000, 0xfffff7fffffffeff, 0xfffff7fffffffdff, x26, 80, x22)

inst_25:
// rs1==x8, rs2==x23, rd==x29, rs2_w1_val == 4294966271, rs1_w0_val == 33554432, rs2_w0_val == 65536
// opcode: urstsa32 ; op1:x8; op2:x23; dest:x29; op1val:0xfffffeff02000000;  op2val:0xfffffbff00010000
TEST_RR_OP(urstsa32, x29, x8, x23, 0x0000000000000000, 0xfffffeff02000000, 0xfffffbff00010000, x26, 88, x22)

inst_26:
// rs1==x10, rs2==x5, rd==x13, rs2_w1_val == 4294966783, rs1_w0_val == 2147483647
// opcode: urstsa32 ; op1:x10; op2:x5; dest:x13; op1val:0x0100007fffffff;  op2val:0xfffffdfffffffeff
TEST_RR_OP(urstsa32, x13, x10, x5, 0x0000000000000000, 0x0100007fffffff, 0xfffffdfffffffeff, x26, 96, x22)

inst_27:
// rs1==x24, rs2==x14, rd==x9, rs2_w1_val == 4294967039, rs1_w0_val == 4294967294, rs2_w0_val == 8
// opcode: urstsa32 ; op1:x24; op2:x14; dest:x9; op1val:0x000040fffffffe;  op2val:0xfffffeff00000008
TEST_RR_OP(urstsa32, x9, x24, x14, 0x0000000000000000, 0x000040fffffffe, 0xfffffeff00000008, x26, 104, x22)

inst_28:
// rs1==x2, rs2==x29, rd==x1, rs2_w1_val == 4294967167, rs2_w0_val == 1024
// opcode: urstsa32 ; op1:x2; op2:x29; dest:x1; op1val:0xfffffffefbffffff;  op2val:0xffffff7f00000400
TEST_RR_OP(urstsa32, x1, x2, x29, 0x0000000000000000, 0xfffffffefbffffff, 0xffffff7f00000400, x26, 112, x22)

inst_29:
// rs1==x16, rs2==x4, rd==x19, rs2_w1_val == 4294967231, rs1_w0_val == 2147483648, rs2_w0_val == 1073741824, rs1_w1_val == 4294901759
// opcode: urstsa32 ; op1:x16; op2:x4; dest:x19; op1val:0xfffeffff80000000;  op2val:0xffffffbf40000000
TEST_RR_OP(urstsa32, x19, x16, x4, 0x0000000000000000, 0xfffeffff80000000, 0xffffffbf40000000, x26, 120, x22)

inst_30:
// rs1==x29, rs2==x22, rd==x25, rs2_w1_val == 4294967263, 
// opcode: urstsa32 ; op1:x29; op2:x22; dest:x25; op1val:0x00000cfffffffd;  op2val:0xffffffdf00000007
TEST_RR_OP(urstsa32, x25, x29, x22, 0x0000000000000000, 0x00000cfffffffd, 0xffffffdf00000007, x26, 128, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x20, rs2==x26, rd==x27, rs2_w1_val == 4294967279, rs2_w0_val == 4278190079, rs1_w1_val == 512
// opcode: urstsa32 ; op1:x20; op2:x26; dest:x27; op1val:0x00020000000000;  op2val:0xffffffeffeffffff
TEST_RR_OP(urstsa32, x27, x20, x26, 0x0000000000000000, 0x00020000000000, 0xffffffeffeffffff, x1, 0, x2)

inst_32:
// rs2_w1_val == 4294967287, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffffff7f;  op2val:0xfffffff700000080
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffeffffffff7f, 0xfffffff700000080, x1, 8, x2)

inst_33:
// rs2_w1_val == 4294967291, rs1_w0_val == 4292870143, rs2_w0_val == 2048
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000011ffdfffff;  op2val:0xfffffffb00000800
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x000011ffdfffff, 0xfffffffb00000800, x1, 16, x2)

inst_34:
// rs2_w1_val == 4294967293, rs1_w1_val == 4294966783, rs1_w0_val == 4096
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00001000;  op2val:0xfffffffd0000000c
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00001000, 0xfffffffd0000000c, x1, 24, x2)

inst_35:
// rs2_w1_val == 4294967294, rs1_w1_val == 4294705151, rs2_w0_val == 64
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffffffbffff;  op2val:0xfffffffe00000040
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfffbfffffffbffff, 0xfffffffe00000040, x1, 32, x2)

inst_36:
// rs2_w1_val == 2147483648, rs1_w1_val == 131072
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000100000;  op2val:0x8000000000000002
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x02000000100000, 0x8000000000000002, x1, 40, x2)

inst_37:
// rs2_w1_val == 536870912, rs2_w0_val == 4294967167, rs1_w1_val == 1431655765, rs1_w0_val == 4160749567
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555f7ffffff;  op2val:0x20000000ffffff7f
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x55555555f7ffffff, 0x20000000ffffff7f, x1, 48, x2)

inst_38:
// rs2_w1_val == 268435456, rs1_w1_val == 1
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000008;  op2val:0x100000000000000b
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00000100000008, 0x100000000000000b, x1, 56, x2)

inst_39:
// rs2_w1_val == 134217728, rs1_w1_val == 4293918719, rs2_w0_val == 268435456
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000000;  op2val:0x800000010000000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xffefffff00000000, 0x800000010000000, x1, 64, x2)

inst_40:
// rs2_w1_val == 67108864, rs2_w0_val == 67108864
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff7fffffff;  op2val:0x400000004000000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xffff7fff7fffffff, 0x400000004000000, x1, 72, x2)

inst_41:
// rs2_w1_val == 33554432, rs2_w0_val == 16777216, rs1_w1_val == 33554432
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000ffffff7f;  op2val:0x200000001000000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x2000000ffffff7f, 0x200000001000000, x1, 80, x2)

inst_42:
// rs2_w1_val == 16777216, rs1_w1_val == 536870912
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000005;  op2val:0x100000000000010
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x2000000000000005, 0x100000000000010, x1, 88, x2)

inst_43:
// rs2_w1_val == 8388608, rs1_w0_val == 4286578687
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffff7fffff;  op2val:0x80000000000003
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffeffff7fffff, 0x80000000000003, x1, 96, x2)

inst_44:
// rs2_w1_val == 4194304, rs1_w0_val == 4294901759
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffeffff;  op2val:0x40000000000006
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffffffeffff, 0x40000000000006, x1, 104, x2)

inst_45:
// rs2_w1_val == 2097152, rs1_w0_val == 32768, rs1_w1_val == 4278190079, rs2_w0_val == 4294967287
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00008000;  op2val:0x200000fffffff7
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00008000, 0x200000fffffff7, x1, 112, x2)

inst_46:
// rs2_w1_val == 1048576, rs1_w0_val == 131072, rs1_w1_val == 268435456
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000020000;  op2val:0x10000000001000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x1000000000020000, 0x10000000001000, x1, 120, x2)

inst_47:
// rs2_w1_val == 524288, rs1_w1_val == 4294966271
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff01000000;  op2val:0x080000fdffffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffbff01000000, 0x080000fdffffff, x1, 128, x2)

inst_48:
// rs2_w1_val == 262144, rs1_w0_val == 16
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000010;  op2val:0x04000000000800
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000010, 0x04000000000800, x1, 136, x2)

inst_49:
// rs2_w1_val == 131072, rs1_w1_val == 134217728, rs1_w0_val == 4294967279
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ffffffef;  op2val:0x020000fdffffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x8000000ffffffef, 0x020000fdffffff, x1, 144, x2)

inst_50:
// rs2_w1_val == 65536, rs2_w0_val == 2147483648
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000005;  op2val:0x01000080000000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x4000000000000005, 0x01000080000000, x1, 152, x2)

inst_51:
// rs1_w0_val == 65536, rs2_w0_val == 4294705151, rs1_w1_val == 2863311530
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00010000;  op2val:0x000011fffbffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00010000, 0x000011fffbffff, x1, 160, x2)

inst_52:
// rs1_w0_val == 8192, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000002000;  op2val:0xfffffeff00000040
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x4000000000002000, 0xfffffeff00000040, x1, 168, x2)

inst_53:
// rs1_w0_val == 2048, rs2_w1_val == 0
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000800;  op2val:0x000000feffffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00020000000800, 0x000000feffffff, x1, 176, x2)

inst_54:
// rs1_w0_val == 1024, rs1_w1_val == 4294959103
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000400;  op2val:0xffffff7f10000000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000400, 0xffffff7f10000000, x1, 184, x2)

inst_55:
// rs1_w0_val == 512, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000200;  op2val:0xfbffffff00000000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x2000000000000200, 0xfbffffff00000000, x1, 192, x2)

inst_56:
// rs1_w0_val == 256, rs2_w1_val == 2
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000100;  op2val:0x00000200000008
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x8000000000000100, 0x00000200000008, x1, 200, x2)

inst_57:
// rs1_w0_val == 128, rs2_w0_val == 4294934527
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000e00000080;  op2val:0x00000fffff7fff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00000e00000080, 0x00000fffff7fff, x1, 208, x2)

inst_58:
// rs1_w0_val == 64, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000040;  op2val:0x01000000000002
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x2000000000000040, 0x01000000000002, x1, 216, x2)

inst_59:
// rs1_w0_val == 32, rs1_w1_val == 3221225471
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000020;  op2val:0x8000000fffbffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000020, 0x8000000fffbffff, x1, 224, x2)

inst_60:
// rs1_w0_val == 4, rs1_w1_val == 4026531839, rs2_w0_val == 32768
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000004;  op2val:0xffff7fff00008000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xefffffff00000004, 0xffff7fff00008000, x1, 232, x2)

inst_61:
// rs1_w0_val == 1, rs2_w0_val == 512
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000001;  op2val:0xfffffffb00000200
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x4000000000000001, 0xfffffffb00000200, x1, 240, x2)

inst_62:
// rs1_w0_val == 4294967295, rs2_w1_val == 4294967295
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffffff;  op2val:0xffffffffffff7fff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffffff, 0xffffffffffff7fff, x1, 248, x2)

inst_63:
// rs2_w1_val == 32768, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000012;  op2val:0x00800004000000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xffffefff00000012, 0x00800004000000, x1, 256, x2)

inst_64:
// rs2_w1_val == 16384, rs1_w1_val == 4096
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000800;  op2val:0x00400000020000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00100000000800, 0x00400000020000, x1, 264, x2)

inst_65:
// rs2_w1_val == 8192, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffefffffff;  op2val:0x00200000010000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfffbffffefffffff, 0x00200000010000, x1, 272, x2)

inst_66:
// rs2_w1_val == 4096, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ffdfffff;  op2val:0x0010000000000b
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x8000000ffdfffff, 0x0010000000000b, x1, 280, x2)

inst_67:
// rs2_w1_val == 2048, rs1_w0_val == 4294836223, rs2_w0_val == 4293918719
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffdffff;  op2val:0x000800ffefffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xffeffffffffdffff, 0x000800ffefffff, x1, 288, x2)

inst_68:
// rs2_w1_val == 1024, rs1_w1_val == 4, rs2_w0_val == 536870912
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400008000;  op2val:0x00040020000000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00000400008000, 0x00040020000000, x1, 296, x2)

inst_69:
// rs2_w1_val == 512, rs1_w0_val == 8388608, rs2_w0_val == 4290772991, rs1_w1_val == 256
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000800000;  op2val:0x000200ffbfffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00010000800000, 0x000200ffbfffff, x1, 304, x2)

inst_70:
// rs2_w1_val == 256, rs2_w0_val == 4294967295
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff80000000;  op2val:0x000100ffffffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xffffefff80000000, 0x000100ffffffff, x1, 312, x2)

inst_71:
// rs2_w1_val == 128, rs2_w0_val == 33554432
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffffef;  op2val:0x00008002000000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffffef, 0x00008002000000, x1, 320, x2)

inst_72:
// rs2_w1_val == 32, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00008000;  op2val:0x000020ffffffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00008000, 0x000020ffffffff, x1, 328, x2)

inst_73:
// rs2_w1_val == 16, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffffffd;  op2val:0x00001040000000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x2000000fffffffd, 0x00001040000000, x1, 336, x2)

inst_74:
// rs2_w1_val == 8, rs1_w1_val == 262144, rs2_w0_val == 32, rs1_w0_val == 4294965247
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffff7ff;  op2val:0x00000800000020
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x040000fffff7ff, 0x00000800000020, x1, 344, x2)

inst_75:
// rs2_w1_val == 4, rs1_w1_val == 4294967231, rs1_w0_val == 4194304
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00400000;  op2val:0x00000420000000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00400000, 0x00000420000000, x1, 352, x2)

inst_76:
// rs2_w1_val == 1, rs2_w0_val == 4286578687, rs1_w0_val == 4294967231
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000ffffffbf;  op2val:0x000001ff7fffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x10000000ffffffbf, 0x000001ff7fffff, x1, 360, x2)

inst_77:
// rs2_w0_val == 2863311530, rs1_w1_val == 2097152, rs1_w0_val == 536870912
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000020000000;  op2val:0x000200aaaaaaaa
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x20000020000000, 0x000200aaaaaaaa, x1, 368, x2)

inst_78:
// rs2_w0_val == 1431655765, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000011;  op2val:0x1000000055555555
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x2000000000000011, 0x1000000055555555, x1, 376, x2)

inst_79:
// rs2_w0_val == 3221225471, rs1_w1_val == 4294967293
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffffffef;  op2val:0x000013bfffffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffdffffffef, 0x000013bfffffff, x1, 384, x2)

inst_80:
// rs2_w0_val == 3758096383, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000010;  op2val:0x000009dfffffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x8000000000000010, 0x000009dfffffff, x1, 392, x2)

inst_81:
// rs2_w0_val == 4026531839, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00020000;  op2val:0x80000000efffffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00020000, 0x80000000efffffff, x1, 400, x2)

inst_82:
// rs2_w0_val == 4227858431, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff80000000;  op2val:0x000012fbffffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffbff80000000, 0x000012fbffffff, x1, 408, x2)

inst_83:
// rs2_w0_val == 256, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000012;  op2val:0xdfffffff00000100
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000012, 0xdfffffff00000100, x1, 416, x2)

inst_84:
// rs2_w0_val == 4, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001100200000;  op2val:0x7fffffff00000004
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00001100200000, 0x7fffffff00000004, x1, 424, x2)

inst_85:
// rs2_w0_val == 1, rs1_w1_val == 4160749567
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00400000;  op2val:0x00000e00000001
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00400000, 0x00000e00000001, x1, 432, x2)

inst_86:
// rs1_w1_val == 2147483647, rs2_w0_val == 4294967279
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000008;  op2val:0xffffbfffffffffef
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000008, 0xffffbfffffffffef, x1, 440, x2)

inst_87:
// rs1_w1_val == 4227858431, rs1_w0_val == 4294966271
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffffbff;  op2val:0x00008000080000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffffbff, 0x00008000080000, x1, 448, x2)

inst_88:
// rs1_w1_val == 4286578687, rs1_w0_val == 4294443007
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffff7ffff;  op2val:0xffffffef04000000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xff7ffffffff7ffff, 0xffffffef04000000, x1, 456, x2)

inst_89:
// rs1_w1_val == 4290772991, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffff7ffff;  op2val:0x800000000040000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xffbffffffff7ffff, 0x800000000040000, x1, 464, x2)

inst_90:
// rs1_w1_val == 4292870143, rs1_w0_val == 134217728
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff08000000;  op2val:0x00000a00000009
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xffdfffff08000000, 0x00000a00000009, x1, 472, x2)

inst_91:
// rs1_w1_val == 4294443007, rs2_w0_val == 4294966271
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00100000;  op2val:0x000006fffffbff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00100000, 0x000006fffffbff, x1, 480, x2)

inst_92:
// rs1_w1_val == 4294836223, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00200000;  op2val:0x000013ffbfffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00200000, 0x000013ffbfffff, x1, 488, x2)

inst_93:
// rs1_w1_val == 4294967167, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00400000;  op2val:0xefffffff40000000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00400000, 0xefffffff40000000, x1, 496, x2)

inst_94:
// rs1_w1_val == 4294967263, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffbffff;  op2val:0xffefffffffbfffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffdffffbffff, 0xffefffffffbfffff, x1, 504, x2)

inst_95:
// rs1_w1_val == 4294967279, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef0000000f;  op2val:0xfffffefff7ffffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffef0000000f, 0xfffffefff7ffffff, x1, 512, x2)

inst_96:
// rs1_w1_val == 67108864, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffdffff;  op2val:0xffffffff00020000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x4000000fffdffff, 0xffffffff00020000, x1, 520, x2)

inst_97:
// rs1_w1_val == 8388608, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffbfffff;  op2val:0xfffffffb00000004
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x800000ffbfffff, 0xfffffffb00000004, x1, 528, x2)

inst_98:
// rs1_w1_val == 4194304, rs2_w0_val == 16384, rs1_w0_val == 4294959103
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000ffffdfff;  op2val:0x200000000004000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x400000ffffdfff, 0x200000000004000, x1, 536, x2)

inst_99:
// rs1_w1_val == 1048576, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000800;  op2val:0xffffffdfffffffef
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x10000000000800, 0xffffffdfffffffef, x1, 544, x2)

inst_100:
// rs1_w1_val == 524288, rs2_w0_val == 8388608
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000020000000;  op2val:0x00000b00800000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x08000020000000, 0x00000b00800000, x1, 552, x2)

inst_101:
// rs1_w1_val == 32768, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800010000000;  op2val:0xfffffffffffffffb
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00800010000000, 0xfffffffffffffffb, x1, 560, x2)

inst_102:
// rs1_w1_val == 16384, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000002000;  op2val:0xfff7ffff00000010
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00400000002000, 0xfff7ffff00000010, x1, 568, x2)

inst_103:
// rs1_w1_val == 1024, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffbffff;  op2val:0xfffeffff00000001
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x000400fffbffff, 0xfffeffff00000001, x1, 576, x2)

inst_104:
// rs1_w1_val == 128, rs1_w0_val == 4294934527
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080ffff7fff;  op2val:0xffffffbf00000012
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x000080ffff7fff, 0xffffffbf00000012, x1, 584, x2)

inst_105:
// rs1_w1_val == 32, rs1_w0_val == 1073741824
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002040000000;  op2val:0x080000fffffdff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00002040000000, 0x080000fffffdff, x1, 592, x2)

inst_106:
// rs1_w1_val == 16, rs1_w0_val == 4294966783
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010fffffdff;  op2val:0xfffeffff80000000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x000010fffffdff, 0xfffeffff80000000, x1, 600, x2)

inst_107:
// rs1_w1_val == 8, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000008;  op2val:0xdfffffff0000000f
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00000800000008, 0xdfffffff0000000f, x1, 608, x2)

inst_108:
// rs1_w0_val == 2863311530, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffaaaaaaaa;  op2val:0x00000200001000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfeffffffaaaaaaaa, 0x00000200001000, x1, 616, x2)

inst_109:
// rs1_w0_val == 1431655765, rs2_w0_val == 4294959103
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000f55555555;  op2val:0xfffdffffffffdfff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00000f55555555, 0xfffdffffffffdfff, x1, 624, x2)

inst_110:
// rs2_w0_val == 4292870143, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000010;  op2val:0xfffbffffffdfffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x40000000000010, 0xfffbffffffdfffff, x1, 632, x2)

inst_111:
// rs1_w0_val == 3758096383, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffdfffffff;  op2val:0x0000100000000d
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffdffdfffffff, 0x0000100000000d, x1, 640, x2)

inst_112:
// rs2_w0_val == 4294443007, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000200000;  op2val:0x000200fff7ffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00004000200000, 0x000200fff7ffff, x1, 648, x2)

inst_113:
// rs2_w0_val == 4294836223, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002008000000;  op2val:0x004000fffdffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00002008000000, 0x004000fffdffff, x1, 656, x2)

inst_114:
// rs1_w0_val == 4261412863, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffdffffff;  op2val:0x00000a00000008
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xffffff7ffdffffff, 0x00000a00000008, x1, 664, x2)

inst_115:
// rs2_w0_val == 4294901759, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00020000;  op2val:0x000001fffeffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00020000, 0x000001fffeffff, x1, 672, x2)

inst_116:
// rs1_w0_val == 4278190079, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffeffffff;  op2val:0xfbffffff00800000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xffeffffffeffffff, 0xfbffffff00800000, x1, 680, x2)

inst_117:
// rs2_w0_val == 4294950911, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000001000;  op2val:0x4000000ffffbfff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00000000001000, 0x4000000ffffbfff, x1, 688, x2)

inst_118:
// rs1_w0_val == 524288, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00080000;  op2val:0x800000fffeffff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00080000, 0x800000fffeffff, x1, 696, x2)

inst_119:
// rs2_w0_val == 4294967231, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff02000000;  op2val:0x2000000ffffffbf
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfffeffff02000000, 0x2000000ffffffbf, x1, 704, x2)

inst_120:
// rs1_w0_val == 4294950911, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffffbfff;  op2val:0x00000300000005
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffffbfff, 0x00000300000005, x1, 712, x2)

inst_121:
// rs2_w0_val == 4294967263, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000d00000012;  op2val:0xbfffffffffffffdf
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00000d00000012, 0xbfffffffffffffdf, x1, 720, x2)

inst_122:
// rs1_w0_val == 4294963199, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x002000ffffefff;  op2val:0xffffff7ffffffffd
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x002000ffffefff, 0xffffff7ffffffffd, x1, 728, x2)

inst_123:
// rs2_w0_val == 134217728, rs1_w0_val == 4294967291
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffffffb;  op2val:0xffff7fff08000000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x000003fffffffb, 0xffff7fff08000000, x1, 736, x2)

inst_124:
// rs1_w0_val == 4294967287, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffffff7;  op2val:0x040000fffffff7
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x001000fffffff7, 0x040000fffffff7, x1, 744, x2)

inst_125:
// rs2_w0_val == 4194304, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffffffb;  op2val:0x00004000400000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x000400fffffffb, 0x00004000400000, x1, 752, x2)

inst_126:
// rs2_w0_val == 2097152, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000020000000;  op2val:0x00000200200000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x20000020000000, 0x00000200200000, x1, 760, x2)

inst_127:
// rs2_w0_val == 1048576, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000840000000;  op2val:0x00008000100000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00000840000000, 0x00008000100000, x1, 768, x2)

inst_128:
// rs1_w0_val == 67108864, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff04000000;  op2val:0x00000201000000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff04000000, 0x00000201000000, x1, 776, x2)

inst_129:
// rs2_w0_val == 8192, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005fffff7ff;  op2val:0xfffffdff00002000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x000005fffff7ff, 0xfffffdff00002000, x1, 784, x2)

inst_130:
// rs2_w0_val == 4294963199, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000dfffff7ff;  op2val:0xfdffffffffffefff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00000dfffff7ff, 0xfdffffffffffefff, x1, 792, x2)

inst_131:
// rs2_w0_val == 4294965247, 
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffffefff;  op2val:0x010000fffff7ff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffffefff, 0x010000fffff7ff, x1, 800, x2)

inst_132:
// rs2_w1_val == 2863311530, rs2_w0_val == 131072, rs1_w0_val == 2097152
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000a00200000;  op2val:0xaaaaaaaa00020000
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0x00000a00200000, 0xaaaaaaaa00020000, x1, 808, x2)

inst_133:
// rs2_w1_val == 4261412863, rs2_w0_val == 4294967294, rs1_w0_val == 4293918719
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffefffff;  op2val:0xfdfffffffffffffe
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xdfffffffffefffff, 0xfdfffffffffffffe, x1, 816, x2)

inst_134:
// rs2_w1_val == 4294965247, rs1_w0_val == 4294967039, rs1_w1_val == 4294965247
// opcode: urstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffffeff;  op2val:0xfffff7fffffffdff
TEST_RR_OP(urstsa32, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffffeff, 0xfffff7fffffffdff, x1, 824, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x26_0:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 104*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
