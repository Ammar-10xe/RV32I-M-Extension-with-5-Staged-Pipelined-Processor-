
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smbb16 instruction of the RISC-V RV64PZicsr extension for the smbb16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smbb16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rd != rs2, rs1==x15, rs2==x5, rd==x15, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs2_h2_val == -65, rs1_h1_val == 1024, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val != rs2_h1_val, rs2_h1_val == -33, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h2_val == -5, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h3_val == -16385
// opcode: smbb16 ; op1:x15; op2:x5; dest:x15; op1val:0x3ffffffb04008000;  op2val:0xbfffffbfffdf0005
TEST_RR_OP(smbb16, x15, x15, x5, 0x0000000000000000, 0x3ffffffb04008000, 0xbfffffbfffdf0005, x8, 0, x12)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x10, rs2==x2, rd==x25, rs1_h3_val == rs2_h3_val, rs2_h2_val == -2049, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h1_val == -2049, rs1_h3_val == 16, rs1_h0_val == 256, rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val == -1, rs2_h3_val == 16, rs1_h1_val == -2049, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 128
// opcode: smbb16 ; op1:x10; op2:x2; dest:x25; op1val:0x10fffff7ff0100;  op2val:0x10f7fff7ff0080
TEST_RR_OP(smbb16, x25, x10, x2, 0x0000000000000000, 0x10fffff7ff0100, 0x10f7fff7ff0080, x8, 8, x12)

inst_2:
// rs1 == rs2 != rd, rs1==x3, rs2==x3, rd==x23, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 16384, rs2_h3_val == 32767, rs2_h1_val == -129, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h0_val == 2048, rs1_h3_val == -32768, rs2_h2_val == 8
// opcode: smbb16 ; op1:x3; op2:x3; dest:x23; op1val:0x800040000400fff6;  op2val:0x7fff0008ff7f0800
TEST_RR_OP(smbb16, x23, x3, x3, 0x0000000000000000, 0x800040000400fff6, 0x7fff0008ff7f0800, x8, 16, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x13, rs2==x13, rd==x13, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -129, rs2_h0_val == 32767, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val == -17, rs2_h1_val == 128, rs2_h2_val == 2, rs1_h1_val == -17
// opcode: smbb16 ; op1:x13; op2:x13; dest:x13; op1val:0x8000ffefffeffff9;  op2val:0xff7f000200807fff
TEST_RR_OP(smbb16, x13, x13, x13, 0x0000000000000000, 0x8000ffefffeffff9, 0xff7f000200807fff, x8, 24, x12)

inst_4:
// rs2 == rd != rs1, rs1==x28, rs2==x1, rd==x1, rs1_h2_val == rs2_h2_val, rs2_h0_val == -21846, rs1_h3_val == -17, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 1024, rs1_h1_val == -129
// opcode: smbb16 ; op1:x28; op2:x1; dest:x1; op1val:0xffef0006ff7f8000;  op2val:0xfff800060400aaaa
TEST_RR_OP(smbb16, x1, x28, x1, 0x0000000000000000, 0xffef0006ff7f8000, 0xfff800060400aaaa, x8, 32, x12)

inst_5:
// rs1==x16, rs2==x19, rd==x18, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h0_val == 64, rs2_h3_val == -32768, rs1_h2_val == 2, rs1_h3_val == -2049, rs2_h2_val == -32768, rs1_h0_val == -16385, rs1_h1_val == -257, rs2_h1_val == 64
// opcode: smbb16 ; op1:x16; op2:x19; dest:x18; op1val:0xf7ff0002feffbfff;  op2val:0x8000800000400040
TEST_RR_OP(smbb16, x18, x16, x19, 0x0000000000000000, 0xf7ff0002feffbfff, 0x8000800000400040, x8, 40, x12)

inst_6:
// rs1==x24, rs2==x0, rd==x26, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 2, rs2_h2_val == -4097, rs1_h1_val == 2048, rs2_h0_val == -1, rs2_h3_val == -2, rs1_h2_val == -9, rs1_h0_val == -513
// opcode: smbb16 ; op1:x24; op2:x0; dest:x26; op1val:0x06fff70800fdff;  op2val:0xfffeefff0002ffff
TEST_RR_OP(smbb16, x26, x24, x0, 0x0000000000000000, 0x06fff70800fdff, 0xfffeefff0002ffff, x8, 48, x12)

inst_7:
// rs1==x30, rs2==x9, rd==x29, rs1_h0_val == rs2_h0_val, rs1_h2_val == 4096, rs2_h0_val == -8193, rs2_h2_val == -9, rs1_h1_val == 8, rs2_h3_val == 8, rs1_h0_val == -8193
// opcode: smbb16 ; op1:x30; op2:x9; dest:x29; op1val:0xfffc10000008dfff;  op2val:0x08fff70040dfff
TEST_RR_OP(smbb16, x29, x30, x9, 0x0000000000000000, 0xfffc10000008dfff, 0x08fff70040dfff, x8, 56, x12)

inst_8:
// rs1==x7, rs2==x21, rd==x20, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h3_val == -5, rs1_h1_val == 256, rs2_h0_val == -257, rs2_h3_val == -17
// opcode: smbb16 ; op1:x7; op2:x21; dest:x20; op1val:0xfffb000901000006;  op2val:0xffef00030080feff
TEST_RR_OP(smbb16, x20, x7, x21, 0x0000000000000000, 0xfffb000901000006, 0xffef00030080feff, x8, 64, x12)

inst_9:
// rs1==x5, rs2==x29, rd==x3, rs2_h3_val == -21846, rs1_h3_val == 1024, rs1_h0_val == -17, rs2_h1_val == -65
// opcode: smbb16 ; op1:x5; op2:x29; dest:x3; op1val:0x4000003fff9ffef;  op2val:0xaaaaf7ffffbffff6
TEST_RR_OP(smbb16, x3, x5, x29, 0x0000000000000000, 0x4000003fff9ffef, 0xaaaaf7ffffbffff6, x8, 72, x12)

inst_10:
// rs1==x6, rs2==x22, rd==x2, rs2_h3_val == 21845, rs2_h2_val == 16384, rs1_h0_val == 32, rs2_h0_val == -9, rs1_h3_val == 32
// opcode: smbb16 ; op1:x6; op2:x22; dest:x2; op1val:0x20fff704000020;  op2val:0x55554000ffdffff7
TEST_RR_OP(smbb16, x2, x6, x22, 0x0000000000000000, 0x20fff704000020, 0x55554000ffdffff7, x8, 80, x12)

inst_11:
// rs1==x21, rs2==x16, rd==x17, rs2_h3_val == -8193, rs1_h3_val == 512, rs2_h2_val == 8192, rs2_h1_val == -2, rs1_h0_val == 4, rs1_h1_val == -9
// opcode: smbb16 ; op1:x21; op2:x16; dest:x17; op1val:0x200fff8fff70004;  op2val:0xdfff2000fffefffc
TEST_RR_OP(smbb16, x17, x21, x16, 0x0000000000000000, 0x200fff8fff70004, 0xdfff2000fffefffc, x8, 88, x12)

inst_12:
// rs1==x0, rs2==x4, rd==x6, rs2_h3_val == -4097, rs2_h1_val == 0, rs2_h2_val == -33, rs1_h1_val == 128, rs1_h2_val == -21846, rs2_h0_val == -17, rs1_h0_val == 0
// opcode: smbb16 ; op1:x0; op2:x4; dest:x6; op1val:0xc000aaaa00800000;  op2val:0xefffffdf0000ffef
TEST_RR_OP(smbb16, x6, x0, x4, 0x0000000000000000, 0xc000aaaa00800000, 0xefffffdf0000ffef, x8, 96, x12)

inst_13:
// rs1==x2, rs2==x20, rd==x11, rs2_h3_val == -2049, rs1_h0_val == -9, rs1_h3_val == -1, rs2_h2_val == 1, rs2_h0_val == -32768
// opcode: smbb16 ; op1:x2; op2:x20; dest:x11; op1val:0xfffffff70003fff7;  op2val:0xf7ff000100808000
TEST_RR_OP(smbb16, x11, x2, x20, 0x0000000000000000, 0xfffffff70003fff7, 0xf7ff000100808000, x8, 104, x12)

inst_14:
// rs1==x20, rs2==x30, rd==x16, rs2_h3_val == -1025, rs2_h2_val == 64, rs1_h0_val == 2048, rs1_h3_val == -9
// opcode: smbb16 ; op1:x20; op2:x30; dest:x16; op1val:0xfff7fff6fff70800;  op2val:0xfbff0040fff6dfff
TEST_RR_OP(smbb16, x16, x20, x30, 0x0000000000000000, 0xfff7fff6fff70800, 0xfbff0040fff6dfff, x8, 112, x3)

inst_15:
// rs1==x25, rs2==x24, rd==x12, rs2_h3_val == -513, rs2_h1_val == 4, rs2_h0_val == 32, rs1_h2_val == 32, rs1_h3_val == -1025, rs1_h1_val == 4
// opcode: smbb16 ; op1:x25; op2:x24; dest:x12; op1val:0xfbff00200004fff6;  op2val:0xfdff000500040020
TEST_RR_OP(smbb16, x12, x25, x24, 0x0000000000000000, 0xfbff00200004fff6, 0xfdff000500040020, x8, 120, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_16:
// rs1==x29, rs2==x26, rd==x27, rs2_h3_val == -257, rs1_h2_val == 2048, rs2_h2_val == -3, rs2_h1_val == -9, rs1_h1_val == -65, rs1_h0_val == 32767, rs1_h3_val == 16384, rs2_h0_val == 256
// opcode: smbb16 ; op1:x29; op2:x26; dest:x27; op1val:0x40000800ffbf7fff;  op2val:0xfefffffdfff70100
TEST_RR_OP(smbb16, x27, x29, x26, 0x0000000000000000, 0x40000800ffbf7fff, 0xfefffffdfff70100, x2, 0, x3)

inst_17:
// rs1==x18, rs2==x12, rd==x7, rs2_h3_val == -65, rs2_h0_val == 16384, rs2_h2_val == 16, rs1_h3_val == 32767, rs1_h0_val == -2
// opcode: smbb16 ; op1:x18; op2:x12; dest:x7; op1val:0x7fffaaaa0007fffe;  op2val:0xffbf001000024000
TEST_RR_OP(smbb16, x7, x18, x12, 0x0000000000000000, 0x7fffaaaa0007fffe, 0xffbf001000024000, x2, 8, x3)

inst_18:
// rs1==x19, rs2==x7, rd==x21, rs2_h3_val == -33, rs2_h0_val == -2049, rs1_h1_val == -4097
// opcode: smbb16 ; op1:x19; op2:x7; dest:x21; op1val:0xfff60006efffc000;  op2val:0xffdffffc0004f7ff
TEST_RR_OP(smbb16, x21, x19, x7, 0x0000000000000000, 0xfff60006efffc000, 0xffdffffc0004f7ff, x2, 16, x3)

inst_19:
// rs1==x23, rs2==x8, rd==x31, rs2_h3_val == -9, rs2_h2_val == -1, rs2_h1_val == -5, rs1_h2_val == 128
// opcode: smbb16 ; op1:x23; op2:x8; dest:x31; op1val:0x0300800006fff8;  op2val:0xfff7fffffffbf7ff
TEST_RR_OP(smbb16, x31, x23, x8, 0x0000000000000000, 0x0300800006fff8, 0xfff7fffffffbf7ff, x2, 24, x3)

inst_20:
// rs1==x14, rs2==x23, rd==x8, rs2_h3_val == -5, rs1_h2_val == -16385, rs1_h1_val == 8192, rs1_h3_val == -4097
// opcode: smbb16 ; op1:x14; op2:x23; dest:x8; op1val:0xefffbfff2000ffef;  op2val:0xfffbc000f7ff0040
TEST_RR_OP(smbb16, x8, x14, x23, 0x0000000000000000, 0xefffbfff2000ffef, 0xfffbc000f7ff0040, x2, 32, x3)

inst_21:
// rs1==x31, rs2==x14, rd==x24, rs2_h3_val == -3, rs1_h1_val == -2, rs1_h0_val == -129, rs1_h2_val == 256, rs2_h1_val == 2048
// opcode: smbb16 ; op1:x31; op2:x14; dest:x24; op1val:0x060100fffeff7f;  op2val:0xfffdfff608008000
TEST_RR_OP(smbb16, x24, x31, x14, 0x0000000000000000, 0x060100fffeff7f, 0xfffdfff608008000, x2, 40, x3)

inst_22:
// rs1==x1, rs2==x11, rd==x22, rs2_h3_val == 16384, rs2_h1_val == -3, rs1_h1_val == -33, rs1_h2_val == 21845
// opcode: smbb16 ; op1:x1; op2:x11; dest:x22; op1val:0xefff5555ffdffdff;  op2val:0x40000001fffd0080
TEST_RR_OP(smbb16, x22, x1, x11, 0x0000000000000000, 0xefff5555ffdffdff, 0x40000001fffd0080, x2, 48, x3)

inst_23:
// rs1==x12, rs2==x27, rd==x30, rs2_h3_val == 8192, rs2_h2_val == -1025
// opcode: smbb16 ; op1:x12; op2:x27; dest:x30; op1val:0x030005fff83fff;  op2val:0x2000fbfffff6aaaa
TEST_RR_OP(smbb16, x30, x12, x27, 0x0000000000000000, 0x030005fff83fff, 0x2000fbfffff6aaaa, x2, 56, x3)

inst_24:
// rs1==x4, rs2==x28, rd==x10, rs2_h3_val == 4096, rs2_h1_val == 512, rs2_h0_val == -1025, rs2_h2_val == 512
// opcode: smbb16 ; op1:x4; op2:x28; dest:x10; op1val:0xf7ff3fff0006ff7f;  op2val:0x100002000200fbff
TEST_RR_OP(smbb16, x10, x4, x28, 0x0000000000000000, 0xf7ff3fff0006ff7f, 0x100002000200fbff, x2, 64, x3)

inst_25:
// rs1==x22, rs2==x18, rd==x19, rs2_h3_val == 2048, rs1_h3_val == -257
// opcode: smbb16 ; op1:x22; op2:x18; dest:x19; op1val:0xfeff000904000005;  op2val:0x8000009fff90007
TEST_RR_OP(smbb16, x19, x22, x18, 0x0000000000000000, 0xfeff000904000005, 0x8000009fff90007, x2, 72, x3)

inst_26:
// rs1==x17, rs2==x31, rd==x9, rs2_h3_val == 1024, rs2_h2_val == 4096, rs2_h1_val == 32767, rs1_h3_val == -16385, rs1_h2_val == -129
// opcode: smbb16 ; op1:x17; op2:x31; dest:x9; op1val:0xbfffff7f3fff8000;  op2val:0x40010007ffffffc
TEST_RR_OP(smbb16, x9, x17, x31, 0x0000000000000000, 0xbfffff7f3fff8000, 0x40010007ffffffc, x2, 80, x3)

inst_27:
// rs1==x8, rs2==x10, rd==x4, rs2_h3_val == 512, rs1_h0_val == 8192, rs2_h1_val == 256, rs1_h2_val == -1025
// opcode: smbb16 ; op1:x8; op2:x10; dest:x4; op1val:0xfbfffbffffbf2000;  op2val:0x200fff601000080
TEST_RR_OP(smbb16, x4, x8, x10, 0x0000000000000000, 0xfbfffbffffbf2000, 0x200fff601000080, x2, 88, x3)

inst_28:
// rs1==x11, rs2==x17, rd==x5, rs2_h3_val == 256, rs2_h0_val == 1, rs1_h2_val == 32767
// opcode: smbb16 ; op1:x11; op2:x17; dest:x5; op1val:0x80007fff0100fffa;  op2val:0x1000007fff70001
TEST_RR_OP(smbb16, x5, x11, x17, 0x0000000000000000, 0x80007fff0100fffa, 0x1000007fff70001, x2, 96, x3)

inst_29:
// rs1==x27, rs2==x25, rd==x0, rs2_h3_val == 128, rs1_h1_val == 21845, rs2_h1_val == -32768, rs1_h3_val == -65, rs2_h2_val == 32, rs1_h0_val == -2049
// opcode: smbb16 ; op1:x27; op2:x25; dest:x0; op1val:0xffbf01005555f7ff;  op2val:0x8000208000f7ff
TEST_RR_OP(smbb16, x0, x27, x25, 0x0000000000000000, 0xffbf01005555f7ff, 0x8000208000f7ff, x2, 104, x1)

inst_30:
// rs1==x9, rs2==x6, rd==x14, rs2_h3_val == 64, rs2_h2_val == -513, rs1_h2_val == 0
// opcode: smbb16 ; op1:x9; op2:x6; dest:x14; op1val:0x060000f7fff7ff;  op2val:0x40fdff8000fff7
TEST_RR_OP(smbb16, x14, x9, x6, 0x0000000000000000, 0x060000f7fff7ff, 0x40fdff8000fff7, x2, 112, x1)

inst_31:
// rs1==x26, rs2==x15, rd==x28, rs2_h3_val == 32, rs2_h2_val == -8193, rs2_h0_val == 4, rs1_h3_val == 1, rs1_h0_val == 16, rs2_h1_val == 32
// opcode: smbb16 ; op1:x26; op2:x15; dest:x28; op1val:0x01080020000010;  op2val:0x20dfff00200004
TEST_RR_OP(smbb16, x28, x26, x15, 0x0000000000000000, 0x01080020000010, 0x20dfff00200004, x2, 120, x1)

inst_32:
// rs2_h3_val == 4, rs1_h1_val == -21846, rs1_h2_val == -2049, rs1_h3_val == -8193, rs1_h0_val == -257
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffff7ffaaaafeff;  op2val:0x04100000800001
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xdffff7ffaaaafeff, 0x04100000800001, x2, 128, x1)

inst_33:
// rs1_h1_val == -5, rs2_h1_val == -1025, rs1_h2_val == -4097
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffeffffffb0800;  op2val:0xbfff0200fbfffff6
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xbfffeffffffb0800, 0xbfff0200fbfffff6, x2, 136, x1)

inst_34:
// rs1_h1_val == -3, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff9fffdf7ff;  op2val:0x4000fffa0002aaaa
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x4000fff9fffdf7ff, 0x4000fffa0002aaaa, x2, 144, x1)

inst_35:
// rs1_h1_val == -32768, rs1_h3_val == 128, rs1_h2_val == 512
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x80020080000800;  op2val:0x05fffc00020020
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x80020080000800, 0x05fffc00020020, x2, 152, x1)

inst_36:
// rs1_h1_val == 16384, rs1_h0_val == 4096, rs2_h0_val == 8192, rs1_h3_val == -21846, rs2_h2_val == 1024
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaf7ff40001000;  op2val:0x100400fff82000
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xaaaaf7ff40001000, 0x100400fff82000, x2, 160, x1)

inst_37:
// rs1_h1_val == 4096, rs1_h3_val == -513, rs2_h2_val == -17, rs1_h0_val == 128
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffefff10000080;  op2val:0xc000ffeff7ff7fff
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xfdffefff10000080, 0xc000ffeff7ff7fff, x2, 168, x1)

inst_38:
// rs1_h1_val == 512, rs1_h0_val == -65, rs2_h1_val == 8
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfff90200ffbf;  op2val:0x03f7ff0008ffff
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xfffbfff90200ffbf, 0x03f7ff0008ffff, x2, 176, x1)

inst_39:
// rs1_h1_val == 64, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fbff0040fffe;  op2val:0xffbf0008fffd0005
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xfff9fbff0040fffe, 0xffbf0008fffd0005, x2, 184, x1)

inst_40:
// rs1_h1_val == 32, rs1_h3_val == 8192
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000002000203fff;  op2val:0x05fff93fff0009
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x2000002000203fff, 0x05fff93fff0009, x2, 192, x1)

inst_41:
// rs1_h1_val == 16, rs2_h2_val == -257, rs2_h0_val == -129
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff00050010fffc;  op2val:0x400feff0004ff7f
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xbfff00050010fffc, 0x400feff0004ff7f, x2, 200, x1)

inst_42:
// rs1_h1_val == 2, rs1_h2_val == 8
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x03000800027fff;  op2val:0x55550008fffdfff8
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x03000800027fff, 0x55550008fffdfff8, x2, 208, x1)

inst_43:
// rs1_h1_val == 1, rs1_h2_val == -2
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fffe00010800;  op2val:0x7fffdffffff8c000
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x05fffe00010800, 0x7fffdffffff8c000, x2, 216, x1)

inst_44:
// rs1_h1_val == 0, rs1_h2_val == -65, rs1_h3_val == -3
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffbf00000005;  op2val:0xfbff0009ffdf0800
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xfffdffbf00000005, 0xfbff0009ffdf0800, x2, 224, x1)

inst_45:
// rs1_h1_val == -1, rs2_h0_val == 4096
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffff6ffffc000;  op2val:0x40000002fffa1000
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xfefffff6ffffc000, 0x40000002fffa1000, x2, 232, x1)

inst_46:
// rs1_h0_val == -21846, rs1_h2_val == 8192, rs2_h0_val == 512
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xc00020000005aaaa;  op2val:0xff7f0200fffa0200
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xc00020000005aaaa, 0xff7f0200fffa0200, x2, 240, x1)

inst_47:
// rs1_h0_val == 21845, rs1_h1_val == -513, rs2_h0_val == -5
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffefdff5555;  op2val:0x030200fff6fffb
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xeffffffefdff5555, 0x030200fff6fffb, x2, 248, x1)

inst_48:
// rs1_h0_val == -4097, rs2_h1_val == 1, rs2_h2_val == -5
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000200001efff;  op2val:0x07fffb00010800
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x20000200001efff, 0x07fffb00010800, x2, 256, x1)

inst_49:
// rs1_h0_val == -1025, rs2_h0_val == -33, rs1_h3_val == 64, rs2_h1_val == 16
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000080007fbff;  op2val:0x200fff80010ffdf
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x4000080007fbff, 0x200fff80010ffdf, x2, 264, x1)

inst_50:
// rs1_h0_val == -33, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff902000006ffdf;  op2val:0x4000000600040100
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xfff902000006ffdf, 0x4000000600040100, x2, 272, x1)

inst_51:
// rs1_h0_val == -5, rs2_h2_val == -16385
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fff9c000fffb;  op2val:0x09bfffffdf0200
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x09fff9c000fffb, 0x09bfffffdf0200, x2, 280, x1)

inst_52:
// rs1_h0_val == -3, rs1_h3_val == 0
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x00f7fffefffffd;  op2val:0xff7ffff80400dfff
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x00f7fffefffffd, 0xff7ffff80400dfff, x2, 288, x1)

inst_53:
// rs1_h0_val == 16384, rs2_h3_val == -1
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb7fff04004000;  op2val:0xffffffdf3fffffdf
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xfffb7fff04004000, 0xffffffdf3fffffdf, x2, 296, x1)

inst_54:
// rs1_h0_val == 1024, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000208000400;  op2val:0xfffbc0000020fff7
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xf7ff000208000400, 0xfffbc0000020fff7, x2, 304, x1)

inst_55:
// rs1_h0_val == 512, rs2_h2_val == 21845
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffefff80200;  op2val:0x3fff55550003fffb
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xfff9fffefff80200, 0x3fff55550003fffb, x2, 312, x1)

inst_56:
// rs1_h0_val == 64, rs2_h0_val == 16, rs2_h1_val == 4096
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x09ff7fffbf0040;  op2val:0x05000510000010
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x09ff7fffbf0040, 0x05000510000010, x2, 320, x1)

inst_57:
// rs1_h0_val == 8, rs1_h1_val == 32767, rs1_h3_val == -33, rs1_h2_val == -32768
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf80007fff0008;  op2val:0x4000dfff00030005
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xffdf80007fff0008, 0x4000dfff00030005, x2, 328, x1)

inst_58:
// rs2_h1_val == -1, rs2_h3_val == 2, rs1_h3_val == 8
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fffafff6fffd;  op2val:0x020003ffffdfff
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x08fffafff6fffd, 0x020003ffffdfff, x2, 336, x1)

inst_59:
// rs2_h0_val == 21845, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fff9c000ffef;  op2val:0xaaaa8000fffc5555
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x10fff9c000ffef, 0xaaaa8000fffc5555, x2, 344, x1)

inst_60:
// rs2_h0_val == -16385, rs1_h2_val == -513, rs2_h2_val == 0
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fdff0007bfff;  op2val:0xfffd0000fff8bfff
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x09fdff0007bfff, 0xfffd0000fff8bfff, x2, 352, x1)

inst_61:
// rs2_h0_val == -4097, rs2_h1_val == -257
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff00003fff0007;  op2val:0xfffa2000feffefff
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xdfff00003fff0007, 0xfffa2000feffefff, x2, 360, x1)

inst_62:
// rs2_h0_val == -513, rs1_h1_val == -1025
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffafbff8000;  op2val:0xfff800000040fdff
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xaaaafffafbff8000, 0xfff800000040fdff, x2, 368, x1)

inst_63:
// rs2_h0_val == -65, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffe0000fff9;  op2val:0xaaaa0020f7ffffbf
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x2000fffe0000fff9, 0xaaaa0020f7ffffbf, x2, 376, x1)

inst_64:
// rs2_h0_val == -3, rs2_h1_val == -8193
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000200800100;  op2val:0x2000dfffdffffffd
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xffdf000200800100, 0x2000dfffdffffffd, x2, 384, x1)

inst_65:
// rs2_h0_val == -2, rs1_h3_val == -2
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe555504000008;  op2val:0xfff8ffdfffdffffe
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xfffe555504000008, 0xfff8ffdfffdffffe, x2, 392, x1)

inst_66:
// rs2_h0_val == 1024, rs1_h3_val == -129
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0009ffbf2000;  op2val:0x4000005ffff0400
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xff7f0009ffbf2000, 0x4000005ffff0400, x2, 400, x1)

inst_67:
// rs2_h0_val == 8, rs2_h1_val == -17
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff0004fff8;  op2val:0x06fbffffef0008
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xfffffdff0004fff8, 0x06fbffffef0008, x2, 408, x1)

inst_68:
// rs2_h0_val == 2, rs2_h2_val == -21846
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x070100c0000400;  op2val:0x100aaaa00090002
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x070100c0000400, 0x100aaaa00090002, x2, 416, x1)

inst_69:
// rs2_h0_val == 0, rs1_h3_val == 4, rs2_h1_val == -4097
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x04200040000200;  op2val:0x02f7ffefff0000
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x04200040000200, 0x02f7ffefff0000, x2, 424, x1)

inst_70:
// rs1_h3_val == 21845, rs1_h2_val == 16, rs2_h2_val == 256
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550010fff9fff6;  op2val:0x3fff01001000fff8
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x55550010fff9fff6, 0x3fff01001000fff8, x2, 432, x1)

inst_71:
// rs1_h0_val == 2, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x400200fffe0002;  op2val:0x7fff0100fffefff8
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x400200fffe0002, 0x7fff0100fffefff8, x2, 440, x1)

inst_72:
// rs1_h3_val == 2048, rs2_h3_val == 1
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x800bffffffbefff;  op2val:0x01ffeffff7bfff
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x800bffffffbefff, 0x01ffeffff7bfff, x2, 448, x1)

inst_73:
// rs1_h3_val == 256, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fff60001ffbf;  op2val:0x10000008f7fffff8
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x100fff60001ffbf, 0x10000008f7fffff8, x2, 456, x1)

inst_74:
// rs2_h2_val == -129, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fff7f7ff0002;  op2val:0x400ff7f0040fff7
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x09fff7f7ff0002, 0x400ff7f0040fff7, x2, 464, x1)

inst_75:
// rs1_h3_val == 2, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0200020200fff8;  op2val:0x3fff0002ffdffff9
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x0200020200fff8, 0x3fff0002ffdffff9, x2, 472, x1)

inst_76:
// rs2_h2_val == -2, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x400007effffffb;  op2val:0x5555fffefffe0006
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x400007effffffb, 0x5555fffefffe0006, x2, 480, x1)

inst_77:
// rs1_h2_val == -8193, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffdfffc0000008;  op2val:0x7fff0400fffcfffe
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xbfffdfffc0000008, 0x7fff0400fffcfffe, x2, 488, x1)

inst_78:
// rs2_h2_val == 2048, rs1_h2_val == 64
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa004004000009;  op2val:0xfffb08007fff0009
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xaaaa004004000009, 0xfffb08007fff0009, x2, 496, x1)

inst_79:
// rs1_h2_val == -257, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffefffeff3fff;  op2val:0x033fff0001ff7f
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xfdfffefffeff3fff, 0x033fff0001ff7f, x2, 504, x1)

inst_80:
// rs2_h2_val == 128, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fffaffdf1000;  op2val:0x070080fffc0001
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x20fffaffdf1000, 0x070080fffc0001, x2, 512, x1)

inst_81:
// rs1_h2_val == -33, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x400ffdf00400010;  op2val:0x200080ffbfffff
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x400ffdf00400010, 0x200080ffbfffff, x2, 520, x1)

inst_82:
// rs2_h2_val == 4, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00407fff0010;  op2val:0xf7ff000400072000
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xffbf00407fff0010, 0xf7ff000400072000, x2, 528, x1)

inst_83:
// rs1_h2_val == -3, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fffd4000c000;  op2val:0x050001fffe0005
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x02fffd4000c000, 0x050001fffe0005, x2, 536, x1)

inst_84:
// rs2_h1_val == -21846, rs1_h0_val == -1
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffff7f0010ffff;  op2val:0xfffd8000aaaa0008
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xbfffff7f0010ffff, 0xfffd8000aaaa0008, x2, 544, x1)

inst_85:
// rs2_h1_val == 21845, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000008ffdf3fff;  op2val:0xfbff00065555fff8
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x80000008ffdf3fff, 0xfbff00065555fff8, x2, 552, x1)

inst_86:
// rs2_h1_val == -16385, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0200ffbff7ff;  op2val:0xefff0005bfffffff
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xefff0200ffbff7ff, 0xefff0005bfffffff, x2, 560, x1)

inst_87:
// rs1_h2_val == 1024, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x040400c000fdff;  op2val:0x2000ff7f00080100
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x040400c000fdff, 0x2000ff7f00080100, x2, 568, x1)

inst_88:
// rs2_h1_val == -513, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffaaaaafffc;  op2val:0x09effffdffaaaa
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x8000fffaaaaafffc, 0x09effffdffaaaa, x2, 576, x1)

inst_89:
// rs1_h2_val == 4, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x040004fff90008;  op2val:0xfbff0007fff8fffd
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x040004fff90008, 0xfbff0007fff8fffd, x2, 584, x1)

inst_90:
// rs1_h2_val == 1, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff700012000ffff;  op2val:0x01aaaa0000fdff
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xfff700012000ffff, 0x01aaaa0000fdff, x2, 592, x1)

inst_91:
// rs2_h1_val == 16384, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fff8ffdf4000;  op2val:0x5555aaaa40001000
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x80fff8ffdf4000, 0x5555aaaa40001000, x2, 600, x1)

inst_92:
// rs1_h1_val == -16385, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff71000bfff0200;  op2val:0x3fffc000bfff0004
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xfff71000bfff0200, 0x3fffc000bfff0004, x2, 608, x1)

inst_93:
// rs1_h0_val == 1, rs1_h1_val == -8193, rs2_h1_val == 8192
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fbffdfff0001;  op2val:0xfff955552000fbff
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x09fbffdfff0001, 0xfff955552000fbff, x2, 616, x1)

inst_94:
// rs2_h3_val == 0, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x073fff02002000;  op2val:0x001000bfff4000
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x073fff02002000, 0x001000bfff4000, x2, 624, x1)

inst_95:
// rs1_h3_val == 4096, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x10003ffffffe0200;  op2val:0x0500200800feff
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x10003ffffffe0200, 0x0500200800feff, x2, 632, x1)

inst_96:
// rs2_h2_val == 32767, 
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fffdfff70020;  op2val:0x067fff0007fffb
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x100fffdfff70020, 0x067fff0007fffb, x2, 640, x1)

inst_97:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 16384, rs2_h3_val == 32767, rs2_h1_val == -129, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h0_val == 2048, rs1_h3_val == -32768, rs2_h2_val == 8
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x800040000400fff6;  op2val:0x7fff0008ff7f0800
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x800040000400fff6, 0x7fff0008ff7f0800, x2, 648, x1)

inst_98:
// rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -129, rs2_h0_val == 32767, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val == -17, rs2_h1_val == 128, rs2_h2_val == 2, rs1_h1_val == -17
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffefffeffff9;  op2val:0xff7f000200807fff
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x8000ffefffeffff9, 0xff7f000200807fff, x2, 656, x1)

inst_99:
// rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 2, rs2_h2_val == -4097, rs1_h1_val == 2048, rs2_h0_val == -1, rs2_h3_val == -2, rs1_h2_val == -9, rs1_h0_val == -513
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x06fff70800fdff;  op2val:0xfffeefff0002ffff
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0x06fff70800fdff, 0xfffeefff0002ffff, x2, 664, x1)

inst_100:
// rs2_h3_val == -4097, rs2_h1_val == 0, rs2_h2_val == -33, rs1_h1_val == 128, rs1_h2_val == -21846, rs2_h0_val == -17, rs1_h0_val == 0
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000aaaa00800000;  op2val:0xefffffdf0000ffef
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xc000aaaa00800000, 0xefffffdf0000ffef, x2, 672, x1)

inst_101:
// rs2_h3_val == 128, rs1_h1_val == 21845, rs2_h1_val == -32768, rs1_h3_val == -65, rs2_h2_val == 32, rs1_h0_val == -2049
// opcode: smbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf01005555f7ff;  op2val:0x8000208000f7ff
TEST_RR_OP(smbb16, x31, x30, x29, 0x0000000000000000, 0xffbf01005555f7ff, 0x8000208000f7ff, x2, 680, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 86*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
