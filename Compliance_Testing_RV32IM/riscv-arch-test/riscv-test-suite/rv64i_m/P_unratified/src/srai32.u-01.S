
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srai32.u instruction of the RISC-V RV64PZicsr extension for the srai32.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srai32.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rd, rs1==x12, rd==x12, rs1_w0_val == -2147483648, imm_val == 11
// opcode: srai32.u ; op1:x12; dest:x12; op1val:0x00000780000000;  immval:0xb
TEST_IMM_OP( srai32.u, x12, x12, 0x0000000000000000, 0x00000780000000, 0xb, x8, 0, x20)

inst_1:
// rs1 != rd, rs1==x13, rd==x10, imm_val == 31, rs1_w0_val == 131072, rs1_w1_val == 1073741824
// opcode: srai32.u ; op1:x13; dest:x10; op1val:0x4000000000020000;  immval:0x1f
TEST_IMM_OP( srai32.u, x10, x13, 0x0000000000000000, 0x4000000000020000, 0x1f, x8, 8, x20)

inst_2:
// rs1==x5, rd==x21, imm_val == 30, rs1_w0_val == -17, rs1_w1_val == -8193
// opcode: srai32.u ; op1:x5; dest:x21; op1val:0xffffdfffffffffef;  immval:0x1e
TEST_IMM_OP( srai32.u, x21, x5, 0x0000000000000000, 0xffffdfffffffffef, 0x1e, x8, 16, x20)

inst_3:
// rs1==x27, rd==x9, imm_val == 29, rs1_w0_val == 2097152, rs1_w1_val == 268435456
// opcode: srai32.u ; op1:x27; dest:x9; op1val:0x1000000000200000;  immval:0x1d
TEST_IMM_OP( srai32.u, x9, x27, 0x0000000000000000, 0x1000000000200000, 0x1d, x8, 24, x20)

inst_4:
// rs1==x1, rd==x22, imm_val == 28, rs1_w0_val == 0
// opcode: srai32.u ; op1:x1; dest:x22; op1val:0xfffffff600000000;  immval:0x1c
TEST_IMM_OP( srai32.u, x22, x1, 0x0000000000000000, 0xfffffff600000000, 0x1c, x8, 32, x20)

inst_5:
// rs1==x24, rd==x29, imm_val == 27, rs1_w1_val == -524289
// opcode: srai32.u ; op1:x24; dest:x29; op1val:0xfff7fffffffffff9;  immval:0x1b
TEST_IMM_OP( srai32.u, x29, x24, 0x0000000000000000, 0xfff7fffffffffff9, 0x1b, x8, 40, x20)

inst_6:
// rs1==x29, rd==x7, imm_val == 26, rs1_w0_val == 8192, rs1_w1_val == -1073741825
// opcode: srai32.u ; op1:x29; dest:x7; op1val:0xbfffffff00002000;  immval:0x1a
TEST_IMM_OP( srai32.u, x7, x29, 0x0000000000000000, 0xbfffffff00002000, 0x1a, x8, 48, x20)

inst_7:
// rs1==x2, rd==x1, imm_val == 25, rs1_w0_val == -1048577, rs1_w1_val == 1048576
// opcode: srai32.u ; op1:x2; dest:x1; op1val:0x100000ffefffff;  immval:0x19
TEST_IMM_OP( srai32.u, x1, x2, 0x0000000000000000, 0x100000ffefffff, 0x19, x8, 56, x20)

inst_8:
// rs1==x9, rd==x28, imm_val == 24, rs1_w0_val == 1024
// opcode: srai32.u ; op1:x9; dest:x28; op1val:0x00000300000400;  immval:0x18
TEST_IMM_OP( srai32.u, x28, x9, 0x0000000000000000, 0x00000300000400, 0x18, x8, 64, x20)

inst_9:
// rs1==x14, rd==x18, imm_val == 23, rs1_w0_val == -513
// opcode: srai32.u ; op1:x14; dest:x18; op1val:0x100000fffffdff;  immval:0x17
TEST_IMM_OP( srai32.u, x18, x14, 0x0000000000000000, 0x100000fffffdff, 0x17, x8, 72, x20)

inst_10:
// rs1==x17, rd==x5, imm_val == 22, rs1_w1_val == 2147483647, rs1_w0_val == -67108865
// opcode: srai32.u ; op1:x17; dest:x5; op1val:0x7ffffffffbffffff;  immval:0x16
TEST_IMM_OP( srai32.u, x5, x17, 0x0000000000000000, 0x7ffffffffbffffff, 0x16, x8, 80, x20)

inst_11:
// rs1==x19, rd==x25, imm_val == 21, rs1_w1_val == 1
// opcode: srai32.u ; op1:x19; dest:x25; op1val:0x00000100000005;  immval:0x15
TEST_IMM_OP( srai32.u, x25, x19, 0x0000000000000000, 0x00000100000005, 0x15, x8, 88, x20)

inst_12:
// rs1==x28, rd==x13, imm_val == 20, rs1_w0_val == -3, rs1_w1_val == 4096
// opcode: srai32.u ; op1:x28; dest:x13; op1val:0x001000fffffffd;  immval:0x14
TEST_IMM_OP( srai32.u, x13, x28, 0x0000000000000000, 0x001000fffffffd, 0x14, x8, 96, x20)

inst_13:
// rs1==x31, rd==x17, imm_val == 19, rs1_w0_val == 128
// opcode: srai32.u ; op1:x31; dest:x17; op1val:0x00000700000080;  immval:0x13
TEST_IMM_OP( srai32.u, x17, x31, 0x0000000000000000, 0x00000700000080, 0x13, x8, 104, x20)

inst_14:
// rs1==x26, rd==x11, imm_val == 18, rs1_w1_val == 131072, rs1_w0_val == 16
// opcode: srai32.u ; op1:x26; dest:x11; op1val:0x02000000000010;  immval:0x12
TEST_IMM_OP( srai32.u, x11, x26, 0x0000000000000000, 0x02000000000010, 0x12, x8, 112, x20)

inst_15:
// rs1==x3, rd==x4, imm_val == 17, rs1_w0_val == 134217728
// opcode: srai32.u ; op1:x3; dest:x4; op1val:0xfffffff608000000;  immval:0x11
TEST_IMM_OP( srai32.u, x4, x3, 0x0000000000000000, 0xfffffff608000000, 0x11, x8, 120, x20)

inst_16:
// rs1==x15, rd==x6, imm_val == 16, rs1_w0_val == -4194305, rs1_w1_val == 134217728
// opcode: srai32.u ; op1:x15; dest:x6; op1val:0x8000000ffbfffff;  immval:0x10
TEST_IMM_OP( srai32.u, x6, x15, 0x0000000000000000, 0x8000000ffbfffff, 0x10, x8, 128, x20)

inst_17:
// rs1==x16, rd==x14, imm_val == 15, rs1_w1_val == 1024, rs1_w0_val == -2
// opcode: srai32.u ; op1:x16; dest:x14; op1val:0x000400fffffffe;  immval:0xf
TEST_IMM_OP( srai32.u, x14, x16, 0x0000000000000000, 0x000400fffffffe, 0xf, x8, 136, x20)

inst_18:
// rs1==x30, rd==x2, imm_val == 14, rs1_w1_val == -1431655766
// opcode: srai32.u ; op1:x30; dest:x2; op1val:0xaaaaaaaafffffdff;  immval:0xe
TEST_IMM_OP( srai32.u, x2, x30, 0x0000000000000000, 0xaaaaaaaafffffdff, 0xe, x8, 144, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_19:
// rs1==x6, rd==x3, imm_val == 13, rs1_w1_val == -16385, rs1_w0_val == 32768
// opcode: srai32.u ; op1:x6; dest:x3; op1val:0xffffbfff00008000;  immval:0xd
TEST_IMM_OP( srai32.u, x3, x6, 0x0000000000000000, 0xffffbfff00008000, 0xd, x1, 0, x5)

inst_20:
// rs1==x18, rd==x15, imm_val == 12, rs1_w1_val == 64
// opcode: srai32.u ; op1:x18; dest:x15; op1val:0x000040ffffffef;  immval:0xc
TEST_IMM_OP( srai32.u, x15, x18, 0x0000000000000000, 0x000040ffffffef, 0xc, x1, 8, x5)

inst_21:
// rs1==x20, rd==x26, imm_val == 10, rs1_w0_val == -1073741825, rs1_w1_val == -129
// opcode: srai32.u ; op1:x20; dest:x26; op1val:0xffffff7fbfffffff;  immval:0xa
TEST_IMM_OP( srai32.u, x26, x20, 0x0000000000000000, 0xffffff7fbfffffff, 0xa, x1, 16, x5)

inst_22:
// rs1==x8, rd==x30, imm_val == 9, rs1_w0_val == 4
// opcode: srai32.u ; op1:x8; dest:x30; op1val:0x00000100000004;  immval:0x9
TEST_IMM_OP( srai32.u, x30, x8, 0x0000000000000000, 0x00000100000004, 0x9, x1, 24, x5)

inst_23:
// rs1==x11, rd==x19, imm_val == 8, rs1_w1_val == -257, rs1_w0_val == 2147483647
// opcode: srai32.u ; op1:x11; dest:x19; op1val:0xfffffeff7fffffff;  immval:0x8
TEST_IMM_OP( srai32.u, x19, x11, 0x0000000000000000, 0xfffffeff7fffffff, 0x8, x1, 32, x5)

inst_24:
// rs1==x10, rd==x0, imm_val == 7, 
// opcode: srai32.u ; op1:x10; dest:x0; op1val:0x00000100000005;  immval:0x7
TEST_IMM_OP( srai32.u, x0, x10, 0x0000000000000000, 0x00000100000005, 0x7, x1, 40, x5)

inst_25:
// rs1==x21, rd==x31, imm_val == 6, rs1_w0_val == -5
// opcode: srai32.u ; op1:x21; dest:x31; op1val:0x000007fffffffb;  immval:0x6
TEST_IMM_OP( srai32.u, x31, x21, 0x0000000000000000, 0x000007fffffffb, 0x6, x1, 48, x5)

inst_26:
// rs1==x0, rd==x27, imm_val == 5, rs1_w1_val == 256, rs1_w0_val == 67108864
// opcode: srai32.u ; op1:x0; dest:x27; op1val:0x00010004000000;  immval:0x5
TEST_IMM_OP( srai32.u, x27, x0, 0x0000000000000000, 0x00010004000000, 0x5, x1, 56, x5)

inst_27:
// rs1==x4, rd==x24, imm_val == 4, rs1_w0_val == -65
// opcode: srai32.u ; op1:x4; dest:x24; op1val:0xfffffff8ffffffbf;  immval:0x4
TEST_IMM_OP( srai32.u, x24, x4, 0x0000000000000000, 0xfffffff8ffffffbf, 0x4, x1, 64, x5)

inst_28:
// rs1==x22, rd==x20, imm_val == 3, rs1_w1_val == -32769, rs1_w0_val == -131073
// opcode: srai32.u ; op1:x22; dest:x20; op1val:0xffff7ffffffdffff;  immval:0x3
TEST_IMM_OP( srai32.u, x20, x22, 0x0000000000000000, 0xffff7ffffffdffff, 0x3, x1, 72, x5)

inst_29:
// rs1==x7, rd==x23, imm_val == 2, 
// opcode: srai32.u ; op1:x7; dest:x23; op1val:0x10000000fbffffff;  immval:0x2
TEST_IMM_OP( srai32.u, x23, x7, 0x0000000000000000, 0x10000000fbffffff, 0x2, x1, 80, x5)

inst_30:
// rs1==x23, rd==x8, imm_val == 1, rs1_w0_val == 4194304, rs1_w1_val == -9
// opcode: srai32.u ; op1:x23; dest:x8; op1val:0xfffffff700400000;  immval:0x1
TEST_IMM_OP( srai32.u, x8, x23, 0x0000000000000000, 0xfffffff700400000, 0x1, x1, 88, x5)

inst_31:
// rs1==x25, rd==x16, imm_val == 0, rs1_w0_val == -33, rs1_w1_val == 8
// opcode: srai32.u ; op1:x25; dest:x16; op1val:0x000008ffffffdf;  immval:0x0
TEST_IMM_OP( srai32.u, x16, x25, 0x0000000000000000, 0x000008ffffffdf, 0x0, x1, 96, x5)

inst_32:
// rs1_w1_val == 1431655765, rs1_w0_val == 1073741824
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x5555555540000000;  immval:0xf
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x5555555540000000, 0xf, x1, 104, x5)

inst_33:
// rs1_w1_val == -536870913, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xdffffffffffffffd;  immval:0xc
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xdffffffffffffffd, 0xc, x1, 112, x5)

inst_34:
// rs1_w1_val == -268435457, rs1_w0_val == 524288
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xefffffff00080000;  immval:0x3
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xefffffff00080000, 0x3, x1, 120, x5)

inst_35:
// rs1_w1_val == -134217729, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xf7ffffff00000005;  immval:0x7
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xf7ffffff00000005, 0x7, x1, 128, x5)

inst_36:
// rs1_w1_val == -67108865, rs1_w0_val == 32
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfbffffff00000020;  immval:0x0
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfbffffff00000020, 0x0, x1, 136, x5)

inst_37:
// rs1_w1_val == -33554433, rs1_w0_val == 8388608
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfdffffff00800000;  immval:0xe
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfdffffff00800000, 0xe, x1, 144, x5)

inst_38:
// rs1_w1_val == -16777217, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfeffffff40000000;  immval:0x8
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfeffffff40000000, 0x8, x1, 152, x5)

inst_39:
// rs1_w1_val == -8388609, rs1_w0_val == -268435457
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xff7fffffefffffff;  immval:0x13
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xff7fffffefffffff, 0x13, x1, 160, x5)

inst_40:
// rs1_w1_val == -4194305, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xffbfffff80000000;  immval:0x13
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xffbfffff80000000, 0x13, x1, 168, x5)

inst_41:
// rs1_w1_val == -2097153, rs1_w0_val == 16777216
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xffdfffff01000000;  immval:0x12
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xffdfffff01000000, 0x12, x1, 176, x5)

inst_42:
// rs1_w1_val == -1048577, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xffefffffbfffffff;  immval:0x1
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xffefffffbfffffff, 0x1, x1, 184, x5)

inst_43:
// rs1_w1_val == -262145, rs1_w0_val == -1431655766
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfffbffffaaaaaaaa;  immval:0x13
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfffbffffaaaaaaaa, 0x13, x1, 192, x5)

inst_44:
// rs1_w1_val == -131073, rs1_w0_val == -257
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfffdfffffffffeff;  immval:0xe
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfffdfffffffffeff, 0xe, x1, 200, x5)

inst_45:
// rs1_w1_val == -65537, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfffefffffffffff6;  immval:0x13
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfffefffffffffff6, 0x13, x1, 208, x5)

inst_46:
// rs1_w1_val == -4097, rs1_w0_val == -134217729
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xffffeffff7ffffff;  immval:0x1a
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xffffeffff7ffffff, 0x1a, x1, 216, x5)

inst_47:
// rs1_w1_val == -2049, rs1_w0_val == 16384
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfffff7ff00004000;  immval:0x5
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfffff7ff00004000, 0x5, x1, 224, x5)

inst_48:
// rs1_w1_val == -1025, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfffffbfffffffdff;  immval:0x11
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfffffbfffffffdff, 0x11, x1, 232, x5)

inst_49:
// rs1_w0_val == -9, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfdfffffffffffff7;  immval:0x1a
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfdfffffffffffff7, 0x1a, x1, 240, x5)

inst_50:
// rs1_w0_val == 536870912, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfffff7ff20000000;  immval:0x7
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfffff7ff20000000, 0x7, x1, 248, x5)

inst_51:
// rs1_w0_val == 268435456, rs1_w1_val == 67108864
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x400000010000000;  immval:0x4
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x400000010000000, 0x4, x1, 256, x5)

inst_52:
// rs1_w0_val == 33554432, rs1_w1_val == -3
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfffffffd02000000;  immval:0x14
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfffffffd02000000, 0x14, x1, 264, x5)

inst_53:
// rs1_w0_val == 1048576, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfff7ffff00100000;  immval:0x9
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfff7ffff00100000, 0x9, x1, 272, x5)

inst_54:
// rs1_w0_val == 262144, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfffffbff00040000;  immval:0x2
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfffffbff00040000, 0x2, x1, 280, x5)

inst_55:
// rs1_w0_val == 65536, rs1_w1_val == 32768
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x00800000010000;  immval:0x16
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x00800000010000, 0x16, x1, 288, x5)

inst_56:
// rs1_w0_val == 4096, rs1_w1_val == 32
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x00002000001000;  immval:0x1a
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x00002000001000, 0x1a, x1, 296, x5)

inst_57:
// rs1_w0_val == 2048, rs1_w1_val == 8388608
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x80000000000800;  immval:0x15
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x80000000000800, 0x15, x1, 304, x5)

inst_58:
// rs1_w0_val == 512, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xffffefff00000200;  immval:0x1d
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xffffefff00000200, 0x1d, x1, 312, x5)

inst_59:
// rs1_w0_val == 256, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xffffefff00000100;  immval:0x8
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xffffefff00000100, 0x8, x1, 320, x5)

inst_60:
// rs1_w0_val == 64, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xffefffff00000040;  immval:0x15
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xffefffff00000040, 0x15, x1, 328, x5)

inst_61:
// rs1_w0_val == 8, rs1_w1_val == 512
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x00020000000008;  immval:0x1b
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x00020000000008, 0x1b, x1, 336, x5)

inst_62:
// rs1_w0_val == 2, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfffdffff00000002;  immval:0x18
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfffdffff00000002, 0x18, x1, 344, x5)

inst_63:
// rs1_w0_val == 1, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xf7ffffff00000001;  immval:0xe
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xf7ffffff00000001, 0xe, x1, 352, x5)

inst_64:
// rs1_w0_val == -1, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xffff7fffffffffff;  immval:0x8
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xffff7fffffffffff, 0x8, x1, 360, x5)

inst_65:
// rs1_w1_val == -513, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfffffdff00080000;  immval:0x1e
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfffffdff00080000, 0x1e, x1, 368, x5)

inst_66:
// rs1_w1_val == -65, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xffffffbffffffffe;  immval:0x14
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xffffffbffffffffe, 0x14, x1, 376, x5)

inst_67:
// rs1_w1_val == -33, rs1_w0_val == -536870913
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xffffffdfdfffffff;  immval:0xe
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xffffffdfdfffffff, 0xe, x1, 384, x5)

inst_68:
// rs1_w1_val == -17, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xffffffef00100000;  immval:0x1b
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xffffffef00100000, 0x1b, x1, 392, x5)

inst_69:
// rs1_w1_val == -5, rs1_w0_val == -65537
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfffffffbfffeffff;  immval:0x4
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfffffffbfffeffff, 0x4, x1, 400, x5)

inst_70:
// rs1_w1_val == -2, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfffffffeefffffff;  immval:0x10
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfffffffeefffffff, 0x10, x1, 408, x5)

inst_71:
// rs1_w1_val == -2147483648, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x8000000000400000;  immval:0x0
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x8000000000400000, 0x0, x1, 416, x5)

inst_72:
// rs1_w1_val == 536870912, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x200000003fffffff;  immval:0xe
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x200000003fffffff, 0xe, x1, 424, x5)

inst_73:
// rs1_w1_val == 33554432, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x200000000008000;  immval:0x10
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x200000000008000, 0x10, x1, 432, x5)

inst_74:
// rs1_w1_val == 16777216, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x100000004000000;  immval:0x1
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x100000004000000, 0x1, x1, 440, x5)

inst_75:
// rs1_w1_val == 4194304, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x40000000000004;  immval:0xd
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x40000000000004, 0xd, x1, 448, x5)

inst_76:
// rs1_w1_val == 2097152, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x200000f7ffffff;  immval:0xb
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x200000f7ffffff, 0xb, x1, 456, x5)

inst_77:
// rs1_w1_val == 524288, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x08000001000000;  immval:0x16
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x08000001000000, 0x16, x1, 464, x5)

inst_78:
// rs1_w1_val == 262144, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x0400007fffffff;  immval:0x1e
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x0400007fffffff, 0x1e, x1, 472, x5)

inst_79:
// rs1_w1_val == 65536, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x01000020000000;  immval:0x1e
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x01000020000000, 0x1e, x1, 480, x5)

inst_80:
// rs1_w1_val == 16384, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x00400000001000;  immval:0x10
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x00400000001000, 0x10, x1, 488, x5)

inst_81:
// rs1_w1_val == 8192, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x00200000000800;  immval:0x1c
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x00200000000800, 0x1c, x1, 496, x5)

inst_82:
// rs1_w1_val == 2048, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x000800fffffffd;  immval:0x4
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x000800fffffffd, 0x4, x1, 504, x5)

inst_83:
// rs1_w1_val == 128, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x00008000400000;  immval:0x1f
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x00008000400000, 0x1f, x1, 512, x5)

inst_84:
// rs1_w1_val == 16, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x00001001000000;  immval:0x18
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x00001001000000, 0x18, x1, 520, x5)

inst_85:
// rs1_w1_val == 4, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x0000043fffffff;  immval:0x19
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x0000043fffffff, 0x19, x1, 528, x5)

inst_86:
// rs1_w1_val == 2, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x000002fbffffff;  immval:0x9
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x000002fbffffff, 0x9, x1, 536, x5)

inst_87:
// rs1_w1_val == 0, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x000000fffffff9;  immval:0x17
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x000000fffffff9, 0x17, x1, 544, x5)

inst_88:
// rs1_w1_val == -1, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xffffffff00001000;  immval:0x5
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xffffffff00001000, 0x5, x1, 552, x5)

inst_89:
// rs1_w0_val == 1431655765, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x00800055555555;  immval:0x1b
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x00800055555555, 0x1b, x1, 560, x5)

inst_90:
// rs1_w0_val == -33554433, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfffdfffffdffffff;  immval:0x14
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfffdfffffdffffff, 0x14, x1, 568, x5)

inst_91:
// rs1_w0_val == -16777217, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xffffff7ffeffffff;  immval:0x1f
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xffffff7ffeffffff, 0x1f, x1, 576, x5)

inst_92:
// rs1_w0_val == -8388609, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfffffff8ff7fffff;  immval:0x1c
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfffffff8ff7fffff, 0x1c, x1, 584, x5)

inst_93:
// rs1_w0_val == -2097153, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfffffbffffdfffff;  immval:0x12
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfffffbffffdfffff, 0x12, x1, 592, x5)

inst_94:
// rs1_w0_val == -524289, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x000080fff7ffff;  immval:0x1b
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x000080fff7ffff, 0x1b, x1, 600, x5)

inst_95:
// rs1_w0_val == -262145, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xffff7ffffffbffff;  immval:0x14
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xffff7ffffffbffff, 0x14, x1, 608, x5)

inst_96:
// rs1_w0_val == -32769, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfffffffaffff7fff;  immval:0x1f
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfffffffaffff7fff, 0x1f, x1, 616, x5)

inst_97:
// rs1_w0_val == -16385, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xffffffbfffffbfff;  immval:0x4
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xffffffbfffffbfff, 0x4, x1, 624, x5)

inst_98:
// rs1_w0_val == -8193, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x000080ffffdfff;  immval:0x1c
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x000080ffffdfff, 0x1c, x1, 632, x5)

inst_99:
// rs1_w0_val == -4097, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x000008ffffefff;  immval:0x8
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x000008ffffefff, 0x8, x1, 640, x5)

inst_100:
// rs1_w0_val == -2049, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfffffffffffff7ff;  immval:0x1
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfffffffffffff7ff, 0x1, x1, 648, x5)

inst_101:
// rs1_w0_val == -1025, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x400000fffffbff;  immval:0xf
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x400000fffffbff, 0xf, x1, 656, x5)

inst_102:
// rs1_w0_val == -129, 
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0xfffffffeffffff7f;  immval:0xa
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0xfffffffeffffff7f, 0xa, x1, 664, x5)

inst_103:
// imm_val == 5, rs1_w1_val == 256, rs1_w0_val == 67108864
// opcode: srai32.u ; op1:x30; dest:x31; op1val:0x00010004000000;  immval:0x5
TEST_IMM_OP( srai32.u, x31, x30, 0x0000000000000000, 0x00010004000000, 0x5, x1, 672, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 85*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
