
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmxda32 instruction of the RISC-V RV64PZicsr extension for the kmxda32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmxda32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x29, rs2==x17, rd==x29, rs1_w0_val == -2147483648, rs1_w1_val == 4194304, rs1_w1_val != rs2_w1_val, rs2_w1_val == 1024, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w0_val == -5
// opcode: kmxda32 ; op1:x29; op2:x17; dest:x29; op1val:0x40000080000000;  op2val:0x000400fffffffb
TEST_PKRR_OP(kmxda32, x29, x29, x17, 0x0000000000000000, 0x40000080000000, 0x000400fffffffb, x29, x1, 0, x10)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x15, rd==x7, rs1_w1_val == rs2_w1_val, rs2_w0_val == -131073, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w1_val == -131073, rs1_w0_val == -1073741825, rs2_w1_val == -131073
// opcode: kmxda32 ; op1:x2; op2:x15; dest:x7; op1val:0xfffdffffbfffffff;  op2val:0xfffdfffffffdffff
TEST_PKRR_OP(kmxda32, x7, x2, x15, 0x0000000000000000, 0xfffdffffbfffffff, 0xfffdfffffffdffff, x2, x1, 16, x10)

inst_2:
// rs1 == rs2 != rd, rs1==x20, rs2==x20, rd==x26, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w0_val == 128, rs2_w1_val == 4, rs1_w1_val == -513
// opcode: kmxda32 ; op1:x20; op2:x20; dest:x26; op1val:0xfffffdfffffffffa;  op2val:0x00000400000080
TEST_PKRR_OP(kmxda32, x26, x20, x20, 0x0000000000000000, 0xfffffdfffffffffa, 0x00000400000080, x20, x1, 32, x10)

inst_3:
// rs1 == rs2 == rd, rs1==x5, rs2==x5, rd==x5, rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w1_val == -1025, rs1_w0_val == 2097152, rs2_w0_val == -1025, rs1_w1_val == 16384, rs1_w0_val > 0 and rs2_w0_val < 0
// opcode: kmxda32 ; op1:x5; op2:x5; dest:x5; op1val:0x00400000200000;  op2val:0xfffffbfffffffbff
TEST_PKRR_OP(kmxda32, x5, x5, x5, 0x0000000000000000, 0x00400000200000, 0xfffffbfffffffbff, x5, x1, 48, x10)

inst_4:
// rs2 == rd != rs1, rs1==x0, rs2==x27, rd==x27, rs1_w0_val == rs2_w0_val, rs1_w1_val == 64, rs2_w0_val == -1073741825, rs2_w1_val == -129
// opcode: kmxda32 ; op1:x0; op2:x27; dest:x27; op1val:0x000040bfffffff;  op2val:0xffffff7fbfffffff
TEST_PKRR_OP(kmxda32, x27, x0, x27, 0x0000000000000000, 0x000040bfffffff, 0xffffff7fbfffffff, x0, x1, 64, x10)

inst_5:
// rs1==x8, rs2==x25, rd==x23, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 32768, rs1_w1_val == -1048577, rs2_w0_val == 32768, rs2_w1_val == -2
// opcode: kmxda32 ; op1:x8; op2:x25; dest:x23; op1val:0xffefffff00008000;  op2val:0xfffffffe00008000
TEST_PKRR_OP(kmxda32, x23, x8, x25, 0x0000000000000000, 0xffefffff00008000, 0xfffffffe00008000, x8, x1, 80, x10)

inst_6:
// rs1==x12, rs2==x13, rd==x8, rs2_w1_val == -1431655766, rs1_w0_val == -65, rs2_w0_val == -4097
// opcode: kmxda32 ; op1:x12; op2:x13; dest:x8; op1val:0x000007ffffffbf;  op2val:0xaaaaaaaaffffefff
TEST_PKRR_OP(kmxda32, x8, x12, x13, 0x0000000000000000, 0x000007ffffffbf, 0xaaaaaaaaffffefff, x12, x1, 96, x10)

inst_7:
// rs1==x21, rs2==x11, rd==x16, rs2_w1_val == 1431655765, rs2_w0_val == -16385, rs1_w0_val == 1048576
// opcode: kmxda32 ; op1:x21; op2:x11; dest:x16; op1val:0x00400000100000;  op2val:0x55555555ffffbfff
TEST_PKRR_OP(kmxda32, x16, x21, x11, 0x0000000000000000, 0x00400000100000, 0x55555555ffffbfff, x21, x1, 112, x10)

inst_8:
// rs1==x23, rs2==x24, rd==x15, rs2_w1_val == 2147483647, rs1_w1_val == -16385, rs1_w0_val == -32769, rs2_w0_val == 268435456
// opcode: kmxda32 ; op1:x23; op2:x24; dest:x15; op1val:0xffffbfffffff7fff;  op2val:0x7fffffff10000000
TEST_PKRR_OP(kmxda32, x15, x23, x24, 0x0000000000000000, 0xffffbfffffff7fff, 0x7fffffff10000000, x23, x1, 128, x10)

inst_9:
// rs1==x3, rs2==x9, rd==x21, rs2_w1_val == -1073741825, rs2_w0_val == 16, rs1_w1_val == -8388609
// opcode: kmxda32 ; op1:x3; op2:x9; dest:x21; op1val:0xff7fffff00000005;  op2val:0xbfffffff00000010
TEST_PKRR_OP(kmxda32, x21, x3, x9, 0x0000000000000000, 0xff7fffff00000005, 0xbfffffff00000010, x3, x1, 144, x10)

inst_10:
// rs1==x13, rs2==x3, rd==x0, rs2_w1_val == -536870913, rs2_w0_val == -1048577, rs1_w1_val == 0
// opcode: kmxda32 ; op1:x13; op2:x3; dest:x0; op1val:0x00000000100000;  op2val:0xdfffffffffefffff
TEST_PKRR_OP(kmxda32, x0, x13, x3, 0x0000000000000000, 0x00000000100000, 0xdfffffffffefffff, x13, x1, 160, x10)

inst_11:
// rs1==x6, rs2==x19, rd==x13, rs2_w1_val == -268435457, rs1_w0_val == 8, rs1_w1_val == -2, rs2_w0_val == 8
// opcode: kmxda32 ; op1:x6; op2:x19; dest:x13; op1val:0xfffffffe00000008;  op2val:0xefffffff00000008
TEST_PKRR_OP(kmxda32, x13, x6, x19, 0x0000000000000000, 0xfffffffe00000008, 0xefffffff00000008, x6, x1, 176, x10)

inst_12:
// rs1==x31, rs2==x29, rd==x19, rs2_w1_val == -134217729, rs2_w0_val == 0, rs1_w0_val == -524289
// opcode: kmxda32 ; op1:x31; op2:x29; dest:x19; op1val:0xffeffffffff7ffff;  op2val:0xf7ffffff00000000
TEST_PKRR_OP(kmxda32, x19, x31, x29, 0x0000000000000000, 0xffeffffffff7ffff, 0xf7ffffff00000000, x31, x1, 192, x10)

inst_13:
// rs1==x28, rs2==x23, rd==x6, rs2_w1_val == -67108865, rs1_w0_val == -9
// opcode: kmxda32 ; op1:x28; op2:x23; dest:x6; op1val:0x000003fffffff7;  op2val:0xfbffffff3fffffff
TEST_PKRR_OP(kmxda32, x6, x28, x23, 0x0000000000000000, 0x000003fffffff7, 0xfbffffff3fffffff, x28, x1, 208, x10)

inst_14:
// rs1==x19, rs2==x2, rd==x18, rs2_w1_val == -33554433, rs1_w1_val == -1073741825, rs1_w0_val == -3
// opcode: kmxda32 ; op1:x19; op2:x2; dest:x18; op1val:0xbffffffffffffffd;  op2val:0xfdffffff00000008
TEST_PKRR_OP(kmxda32, x18, x19, x2, 0x0000000000000000, 0xbffffffffffffffd, 0xfdffffff00000008, x19, x1, 224, x10)

inst_15:
// rs1==x22, rs2==x4, rd==x25, rs2_w1_val == -16777217, rs1_w1_val == 536870912
// opcode: kmxda32 ; op1:x22; op2:x4; dest:x25; op1val:0x20000000ffffffbf;  op2val:0xfeffffff00000006
TEST_PKRR_OP(kmxda32, x25, x22, x4, 0x0000000000000000, 0x20000000ffffffbf, 0xfeffffff00000006, x22, x1, 240, x10)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_16:
// rs1==x14, rs2==x28, rd==x24, rs2_w1_val == -8388609, rs1_w0_val == -16385, rs1_w1_val == 65536
// opcode: kmxda32 ; op1:x14; op2:x28; dest:x24; op1val:0x010000ffffbfff;  op2val:0xff7ffffffffdffff
TEST_PKRR_OP(kmxda32, x24, x14, x28, 0x0000000000000000, 0x010000ffffbfff, 0xff7ffffffffdffff, x14, x5, 0, x13)

inst_17:
// rs1==x4, rs2==x6, rd==x22, rs2_w1_val == -4194305, rs2_w0_val == -67108865, rs1_w0_val == -5, rs1_w1_val == 8
// opcode: kmxda32 ; op1:x4; op2:x6; dest:x22; op1val:0x000008fffffffb;  op2val:0xffbffffffbffffff
TEST_PKRR_OP(kmxda32, x22, x4, x6, 0x0000000000000000, 0x000008fffffffb, 0xffbffffffbffffff, x4, x5, 16, x13)

inst_18:
// rs1==x16, rs2==x7, rd==x20, rs2_w1_val == -2097153, rs1_w0_val == 131072, rs2_w0_val == -1431655766
// opcode: kmxda32 ; op1:x16; op2:x7; dest:x20; op1val:0xc000000000020000;  op2val:0xffdfffffaaaaaaaa
TEST_PKRR_OP(kmxda32, x20, x16, x7, 0x0000000000000000, 0xc000000000020000, 0xffdfffffaaaaaaaa, x16, x5, 32, x13)

inst_19:
// rs1==x18, rs2==x16, rd==x12, rs2_w1_val == -1048577, rs1_w0_val == 256, rs1_w1_val == 2048, rs2_w0_val == -33
// opcode: kmxda32 ; op1:x18; op2:x16; dest:x12; op1val:0x00080000000100;  op2val:0xffefffffffffffdf
TEST_PKRR_OP(kmxda32, x12, x18, x16, 0x0000000000000000, 0x00080000000100, 0xffefffffffffffdf, x18, x5, 48, x13)

inst_20:
// rs1==x11, rs2==x0, rd==x28, rs2_w1_val == -524289, 
// opcode: kmxda32 ; op1:x11; op2:x0; dest:x28; op1val:0xfffffffe3fffffff;  op2val:0xfff7ffff00000006
TEST_PKRR_OP(kmxda32, x28, x11, x0, 0x0000000000000000, 0xfffffffe3fffffff, 0xfff7ffff00000006, x11, x5, 64, x13)

inst_21:
// rs1==x1, rs2==x26, rd==x10, rs2_w1_val == -262145, rs1_w1_val == 32, rs1_w0_val == -1, rs2_w0_val == 1073741824
// opcode: kmxda32 ; op1:x1; op2:x26; dest:x10; op1val:0x000020ffffffff;  op2val:0xfffbffff40000000
TEST_PKRR_OP(kmxda32, x10, x1, x26, 0x0000000000000000, 0x000020ffffffff, 0xfffbffff40000000, x1, x5, 80, x13)

inst_22:
// rs1==x7, rs2==x10, rd==x14, rs2_w1_val == -65537, rs2_w0_val == -17
// opcode: kmxda32 ; op1:x7; op2:x10; dest:x14; op1val:0x3ffffffffffffffa;  op2val:0xfffeffffffffffef
TEST_PKRR_OP(kmxda32, x14, x7, x10, 0x0000000000000000, 0x3ffffffffffffffa, 0xfffeffffffffffef, x7, x5, 96, x13)

inst_23:
// rs1==x15, rs2==x8, rd==x30, rs2_w1_val == -32769, rs2_w0_val == 33554432, rs1_w1_val == -2097153, rs1_w0_val == 32
// opcode: kmxda32 ; op1:x15; op2:x8; dest:x30; op1val:0xffdfffff00000020;  op2val:0xffff7fff02000000
TEST_PKRR_OP(kmxda32, x30, x15, x8, 0x0000000000000000, 0xffdfffff00000020, 0xffff7fff02000000, x15, x5, 112, x13)

inst_24:
// rs1==x27, rs2==x22, rd==x4, rs2_w1_val == -16385, rs1_w0_val == -1025, rs1_w1_val == -67108865
// opcode: kmxda32 ; op1:x27; op2:x22; dest:x4; op1val:0xfbfffffffffffbff;  op2val:0xffffbffffffffffb
TEST_PKRR_OP(kmxda32, x4, x27, x22, 0x0000000000000000, 0xfbfffffffffffbff, 0xffffbffffffffffb, x27, x5, 128, x13)

inst_25:
// rs1==x9, rs2==x18, rd==x3, rs2_w1_val == -8193, rs1_w1_val == -8193, rs2_w0_val == 4194304
// opcode: kmxda32 ; op1:x9; op2:x18; dest:x3; op1val:0xffffdfff00000100;  op2val:0xffffdfff00400000
TEST_PKRR_OP(kmxda32, x3, x9, x18, 0x0000000000000000, 0xffffdfff00000100, 0xffffdfff00400000, x9, x5, 144, x13)

inst_26:
// rs1==x30, rs2==x14, rd==x1, rs2_w1_val == -4097, rs1_w0_val == 134217728
// opcode: kmxda32 ; op1:x30; op2:x14; dest:x1; op1val:0xffffdfff08000000;  op2val:0xffffefff00008000
TEST_PKRR_OP(kmxda32, x1, x30, x14, 0x0000000000000000, 0xffffdfff08000000, 0xffffefff00008000, x30, x5, 160, x13)

inst_27:
// rs1==x25, rs2==x12, rd==x9, rs2_w1_val == -2049, rs1_w1_val == -2049
// opcode: kmxda32 ; op1:x25; op2:x12; dest:x9; op1val:0xfffff7ffffffffbf;  op2val:0xfffff7fffffffff6
TEST_PKRR_OP(kmxda32, x9, x25, x12, 0x0000000000000000, 0xfffff7ffffffffbf, 0xfffff7fffffffff6, x25, x5, 176, x13)

inst_28:
// rs1==x24, rs2==x30, rd==x17, rs2_w1_val == -513, rs1_w0_val == 512, rs2_w0_val == -16777217, rs1_w1_val == -134217729
// opcode: kmxda32 ; op1:x24; op2:x30; dest:x17; op1val:0xf7ffffff00000200;  op2val:0xfffffdfffeffffff
TEST_PKRR_OP(kmxda32, x17, x24, x30, 0x0000000000000000, 0xf7ffffff00000200, 0xfffffdfffeffffff, x24, x5, 192, x13)

inst_29:
// rs1==x10, rs2==x1, rd==x31, rs2_w1_val == -257, rs1_w0_val == -268435457, rs2_w0_val == -524289
// opcode: kmxda32 ; op1:x10; op2:x1; dest:x31; op1val:0x3fffffffefffffff;  op2val:0xfffffefffff7ffff
TEST_PKRR_OP(kmxda32, x31, x10, x1, 0x0000000000000000, 0x3fffffffefffffff, 0xfffffefffff7ffff, x10, x5, 208, x13)

inst_30:
// rs1==x26, rs2==x21, rd==x2, rs2_w1_val == -65, rs1_w1_val == 524288, rs1_w0_val == -33
// opcode: kmxda32 ; op1:x26; op2:x21; dest:x2; op1val:0x080000ffffffdf;  op2val:0xffffffbfc0000000
TEST_PKRR_OP(kmxda32, x2, x26, x21, 0x0000000000000000, 0x080000ffffffdf, 0xffffffbfc0000000, x26, x5, 224, x13)

inst_31:
// rs1==x17, rs2==x31, rd==x11, rs2_w1_val == -33, rs1_w0_val == 2, rs2_w0_val == 16384, rs1_w1_val == 1
// opcode: kmxda32 ; op1:x17; op2:x31; dest:x11; op1val:0x00000100000002;  op2val:0xffffffdf00004000
TEST_PKRR_OP(kmxda32, x11, x17, x31, 0x0000000000000000, 0x00000100000002, 0xffffffdf00004000, x17, x5, 240, x2)

inst_32:
// rs2_w1_val == -17, rs2_w0_val == -262145, rs1_w0_val == 1073741824
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff40000000;  op2val:0xffffffeffffbffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffdffff40000000, 0xffffffeffffbffff, x30, x5, 256, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_33:
// rs2_w1_val == -9, rs2_w0_val == 2, rs1_w1_val == -32769
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00100000;  op2val:0xfffffff700000002
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00100000, 0xfffffff700000002, x30, x1, 0, x2)

inst_34:
// rs2_w1_val == -5, rs1_w0_val == 16384, rs1_w1_val == -9
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700004000;  op2val:0xfffffffb10000000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffffff700004000, 0xfffffffb10000000, x30, x1, 16, x2)

inst_35:
// rs2_w1_val == -3, rs1_w0_val == -4097, rs2_w0_val == 134217728
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffefff;  op2val:0xfffffffd08000000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffefff, 0xfffffffd08000000, x30, x1, 32, x2)

inst_36:
// rs2_w1_val == -2147483648, rs1_w0_val == 1431655765
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000055555555;  op2val:0x80000000ffffbfff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x08000055555555, 0x80000000ffffbfff, x30, x1, 48, x2)

inst_37:
// rs2_w1_val == 1073741824, rs2_w0_val == -3, rs1_w0_val == 16777216
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000001000000;  op2val:0x40000000fffffffd
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x2000000001000000, 0x40000000fffffffd, x30, x1, 64, x2)

inst_38:
// rs2_w1_val == 536870912, rs2_w0_val == 262144, rs1_w0_val == -8193, rs1_w1_val == 128
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080ffffdfff;  op2val:0x2000000000040000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x000080ffffdfff, 0x2000000000040000, x30, x1, 80, x2)

inst_39:
// rs2_w1_val == 268435456, rs1_w0_val == 2147483647
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff7fffffff;  op2val:0x10000000fffdffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xffffbfff7fffffff, 0x10000000fffdffff, x30, x1, 96, x2)

inst_40:
// rs2_w1_val == 134217728, rs1_w0_val == 536870912
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000120000000;  op2val:0x800000000040000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x00000120000000, 0x800000000040000, x30, x1, 112, x2)

inst_41:
// rs2_w1_val == 67108864, rs1_w1_val == 134217728, rs1_w0_val == 1024, rs2_w0_val == -9
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000400;  op2val:0x4000000fffffff7
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x800000000000400, 0x4000000fffffff7, x30, x1, 128, x2)

inst_42:
// rs2_w1_val == 33554432, rs1_w1_val == -524289
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff3fffffff;  op2val:0x2000000fff7ffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff3fffffff, 0x2000000fff7ffff, x30, x1, 144, x2)

inst_43:
// rs2_w1_val == 16777216, rs2_w0_val == -65
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005ffffbfff;  op2val:0x1000000ffffffbf
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x000005ffffbfff, 0x1000000ffffffbf, x30, x1, 160, x2)

inst_44:
// rs2_w1_val == 8388608, rs2_w0_val == 524288
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000002;  op2val:0x80000000080000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x00000100000002, 0x80000000080000, x30, x1, 176, x2)

inst_45:
// rs2_w1_val == 4194304, rs1_w0_val == -134217729
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffff7ffffff;  op2val:0x40000002000000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfff7fffff7ffffff, 0x40000002000000, x30, x1, 192, x2)

inst_46:
// rs2_w1_val == 2097152, rs2_w0_val == 4, rs1_w1_val == 2097152
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000020;  op2val:0x20000000000004
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x20000000000020, 0x20000000000004, x30, x1, 208, x2)

inst_47:
// rs2_w1_val == 1048576, rs2_w0_val == 1431655765
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00100000;  op2val:0x10000055555555
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00100000, 0x10000055555555, x30, x1, 224, x2)

inst_48:
// rs2_w1_val == 524288, rs2_w0_val == 512
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000005;  op2val:0x08000000000200
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000005, 0x08000000000200, x30, x1, 240, x2)

inst_49:
// rs2_w1_val == 262144, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000003fffffff;  op2val:0x04000000000008
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x200000003fffffff, 0x04000000000008, x30, x1, 256, x2)

inst_50:
// rs1_w0_val == 33554432, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff02000000;  op2val:0x200000c0000000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x3fffffff02000000, 0x200000c0000000, x30, x1, 272, x2)

inst_51:
// rs1_w0_val == 8388608, rs1_w1_val == -1
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00800000;  op2val:0x20000000000005
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xffffffff00800000, 0x20000000000005, x30, x1, 288, x2)

inst_52:
// rs1_w0_val == 4194304, rs1_w1_val == -536870913
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00400000;  op2val:0x00000902000000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00400000, 0x00000902000000, x30, x1, 304, x2)

inst_53:
// rs1_w0_val == 524288, rs2_w0_val == -8193, rs1_w1_val == -129
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00080000;  op2val:0xaaaaaaaaffffdfff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00080000, 0xaaaaaaaaffffdfff, x30, x1, 320, x2)

inst_54:
// rs1_w0_val == 262144, rs1_w1_val == 512, rs2_w1_val == 1
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000040000;  op2val:0x000001c0000000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x00020000040000, 0x000001c0000000, x30, x1, 336, x2)

inst_55:
// rs1_w0_val == 65536, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100010000;  op2val:0x8000000fff7ffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x00000100010000, 0x8000000fff7ffff, x30, x1, 352, x2)

inst_56:
// rs1_w0_val == 8192, rs1_w1_val == -65
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00002000;  op2val:0xbfffffff00000010
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00002000, 0xbfffffff00000010, x30, x1, 368, x2)

inst_57:
// rs1_w0_val == 4096, rs1_w1_val == 8192, rs2_w0_val == -2
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000001000;  op2val:0x080000fffffffe
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x00200000001000, 0x080000fffffffe, x30, x1, 384, x2)

inst_58:
// rs1_w0_val == 2048, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000800;  op2val:0xfffffdff08000000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000800, 0xfffffdff08000000, x30, x1, 400, x2)

inst_59:
// rs1_w0_val == 128, rs2_w1_val == 2048
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000080;  op2val:0x000800fffffffd
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000080, 0x000800fffffffd, x30, x1, 416, x2)

inst_60:
// rs1_w0_val == 64, rs2_w0_val == 67108864
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000040;  op2val:0xffff7fff04000000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x08000000000040, 0xffff7fff04000000, x30, x1, 432, x2)

inst_61:
// rs1_w0_val == 16, rs2_w0_val == -1
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000300000010;  op2val:0xffffffdfffffffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x00000300000010, 0xffffffdfffffffff, x30, x1, 448, x2)

inst_62:
// rs1_w0_val == 4, rs2_w0_val == -134217729
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000004;  op2val:0xfffbfffff7ffffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000004, 0xfffbfffff7ffffff, x30, x1, 464, x2)

inst_63:
// rs1_w0_val == 1, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000001;  op2val:0xfffffff83fffffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x2000000000000001, 0xfffffff83fffffff, x30, x1, 480, x2)

inst_64:
// rs1_w0_val == 0, rs2_w0_val == -4194305
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000000;  op2val:0xfffffffaffbfffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x00004000000000, 0xfffffffaffbfffff, x30, x1, 496, x2)

inst_65:
// rs2_w1_val == 131072, rs1_w1_val == -2147483648
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000020000000;  op2val:0x020000c0000000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x8000000020000000, 0x020000c0000000, x30, x1, 512, x2)

inst_66:
// rs2_w1_val == 65536, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffffbf;  op2val:0x010000ffffffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffffffbf, 0x010000ffffffff, x30, x1, 528, x2)

inst_67:
// rs2_w1_val == 32768, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff720000000;  op2val:0x008000ffffdfff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffffff720000000, 0x008000ffffdfff, x30, x1, 544, x2)

inst_68:
// rs2_w1_val == 16384, rs1_w1_val == 268435456
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000009;  op2val:0x004000fffffff8
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x1000000000000009, 0x004000fffffff8, x30, x1, 560, x2)

inst_69:
// rs2_w1_val == 8192, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000001000;  op2val:0x00200000000003
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x1000000000001000, 0x00200000000003, x30, x1, 576, x2)

inst_70:
// rs2_w1_val == 4096, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000002;  op2val:0x001000bfffffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000002, 0x001000bfffffff, x30, x1, 592, x2)

inst_71:
// rs2_w1_val == 512, rs1_w0_val == -67108865, rs1_w1_val == -257
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffbffffff;  op2val:0x000200ffffffef
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffffefffbffffff, 0x000200ffffffef, x30, x1, 608, x2)

inst_72:
// rs2_w1_val == 256, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffff7;  op2val:0x000100ffffdfff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffff7, 0x000100ffffdfff, x30, x1, 624, x2)

inst_73:
// rs2_w1_val == 128, rs1_w1_val == -33, rs2_w0_val == 2048
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000040;  op2val:0x00008000000800
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000040, 0x00008000000800, x30, x1, 640, x2)

inst_74:
// rs2_w1_val == 64, rs1_w1_val == -1025, rs1_w0_val == 268435456
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff10000000;  op2val:0x000040fffffbff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffffbff10000000, 0x000040fffffbff, x30, x1, 656, x2)

inst_75:
// rs2_w1_val == 32, rs2_w0_val == -2147483648
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffbfff;  op2val:0x00002080000000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffbfff, 0x00002080000000, x30, x1, 672, x2)

inst_76:
// rs2_w1_val == 16, rs2_w0_val == -32769
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000009;  op2val:0x000010ffff7fff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x00000700000009, 0x000010ffff7fff, x30, x1, 688, x2)

inst_77:
// rs2_w1_val == 8, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffffbf;  op2val:0x000008fffffffe
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffffbf, 0x000008fffffffe, x30, x1, 704, x2)

inst_78:
// rs2_w1_val == 2, rs1_w1_val == 32768
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffffffbf;  op2val:0x000002ffefffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x008000ffffffbf, 0x000002ffefffff, x30, x1, 720, x2)

inst_79:
// rs2_w1_val == 0, rs1_w1_val == 67108864
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffffb;  op2val:0x00000000000008
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x4000000fffffffb, 0x00000000000008, x30, x1, 736, x2)

inst_80:
// rs2_w1_val == -1, rs1_w1_val == -4097, rs2_w0_val == -129, rs1_w0_val == -4194305
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffbfffff;  op2val:0xffffffffffffff7f
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xffffefffffbfffff, 0xffffffffffffff7f, x30, x1, 752, x2)

inst_81:
// rs2_w0_val == 2147483647, rs1_w0_val == -131073
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040fffdffff;  op2val:0x8000007fffffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x000040fffdffff, 0x8000007fffffff, x30, x1, 768, x2)

inst_82:
// rs2_w0_val == -536870913, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfefffffff;  op2val:0x001000dfffffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xffffffdfefffffff, 0x001000dfffffff, x30, x1, 784, x2)

inst_83:
// rs2_w0_val == 131072, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00000001;  op2val:0x00100000020000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000001, 0x00100000020000, x30, x1, 800, x2)

inst_84:
// rs2_w0_val == 65536, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff7fffffff;  op2val:0xefffffff00010000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff7fffffff, 0xefffffff00010000, x30, x1, 816, x2)

inst_85:
// rs2_w0_val == 8192, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000100000;  op2val:0xffffffdf00002000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x8000000000100000, 0xffffffdf00002000, x30, x1, 832, x2)

inst_86:
// rs2_w0_val == 4096, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf02000000;  op2val:0xfffffffb00001000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xffffffdf02000000, 0xfffffffb00001000, x30, x1, 848, x2)

inst_87:
// rs2_w0_val == 1024, rs1_w1_val == 256
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100ffbfffff;  op2val:0x80000000000400
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x000100ffbfffff, 0x80000000000400, x30, x1, 864, x2)

inst_88:
// rs2_w0_val == 256, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafffffffa;  op2val:0xffffffff00000100
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffffffafffffffa, 0xffffffff00000100, x30, x1, 880, x2)

inst_89:
// rs2_w0_val == 64, rs1_w1_val == -16777217
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffbfffff;  op2val:0xffbfffff00000040
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfeffffffffbfffff, 0xffbfffff00000040, x30, x1, 896, x2)

inst_90:
// rs2_w0_val == 32, rs1_w0_val == -257
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffffeff;  op2val:0xffdfffff00000020
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x20000000fffffeff, 0xffdfffff00000020, x30, x1, 912, x2)

inst_91:
// rs2_w0_val == 1, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffffbf;  op2val:0x400000000000001
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xffffdfffffffffbf, 0x400000000000001, x30, x1, 928, x2)

inst_92:
// rs1_w1_val == -1431655766, rs1_w0_val == -262145
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffbffff;  op2val:0xffffffff08000000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffbffff, 0xffffffff08000000, x30, x1, 944, x2)

inst_93:
// rs1_w1_val == 1431655765, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555540000000;  op2val:0xaaaaaaaa00000100
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x5555555540000000, 0xaaaaaaaa00000100, x30, x1, 960, x2)

inst_94:
// rs1_w1_val == 2147483647, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffffffa;  op2val:0xfbffffffdfffffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffffffa, 0xfbffffffdfffffff, x30, x1, 976, x2)

inst_95:
// rs1_w1_val == -268435457, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00020000;  op2val:0x40000000008000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xefffffff00020000, 0x40000000008000, x30, x1, 992, x2)

inst_96:
// rs1_w1_val == -33554433, rs2_w0_val == 8388608
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000003;  op2val:0xffffffff00800000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000003, 0xffffffff00800000, x30, x1, 1008, x2)

inst_97:
// rs1_w1_val == -4194305, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff80000000;  op2val:0xfffdffff00000400
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xffbfffff80000000, 0xfffdffff00000400, x30, x1, 1024, x2)

inst_98:
// rs1_w1_val == -262145, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffff7fff;  op2val:0xfffffdff00000001
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffbffffffff7fff, 0xfffffdff00000001, x30, x1, 1040, x2)

inst_99:
// rs1_w1_val == -65537, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff20000000;  op2val:0x80000007fffffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffeffff20000000, 0x80000007fffffff, x30, x1, 1056, x2)

inst_100:
// rs1_w1_val == -17, rs1_w0_val == -513
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffffdff;  op2val:0x0000067fffffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xffffffeffffffdff, 0x0000067fffffff, x30, x1, 1072, x2)

inst_101:
// rs1_w1_val == -5, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000009;  op2val:0x800000fffffff7
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000009, 0x800000fffffff7, x30, x1, 1088, x2)

inst_102:
// rs1_w1_val == -3, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000200;  op2val:0x3fffffff00000003
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000200, 0x3fffffff00000003, x30, x1, 1104, x2)

inst_103:
// rs1_w1_val == 1073741824, rs2_w0_val == -268435457
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000020;  op2val:0xff7fffffefffffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x4000000000000020, 0xff7fffffefffffff, x30, x1, 1120, x2)

inst_104:
// rs1_w1_val == 33554432, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fbffffff;  op2val:0xffffffdf00000004
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x2000000fbffffff, 0xffffffdf00000004, x30, x1, 1136, x2)

inst_105:
// rs1_w1_val == 16777216, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000002000000;  op2val:0x40000000fffffffa
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x100000002000000, 0x40000000fffffffa, x30, x1, 1152, x2)

inst_106:
// rs1_w1_val == 8388608, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffffd;  op2val:0x00008000080000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x800000fffffffd, 0x00008000080000, x30, x1, 1168, x2)

inst_107:
// rs1_w1_val == 1048576, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000008000000;  op2val:0xffdfffffffffffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x10000008000000, 0xffdfffffffffffff, x30, x1, 1184, x2)

inst_108:
// rs1_w1_val == 262144, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000ffffffdf;  op2val:0xffffff7fffffffdf
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x040000ffffffdf, 0xffffff7fffffffdf, x30, x1, 1200, x2)

inst_109:
// rs1_w1_val == 131072, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000f7ffffff;  op2val:0xfffdffff08000000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x020000f7ffffff, 0xfffdffff08000000, x30, x1, 1216, x2)

inst_110:
// rs1_w1_val == 4096, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000400;  op2val:0xfdffffff00000007
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x00100000000400, 0xfdffffff00000007, x30, x1, 1232, x2)

inst_111:
// rs1_w1_val == 1024, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffff7fff;  op2val:0x8000000000000001
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x000400ffff7fff, 0x8000000000000001, x30, x1, 1248, x2)

inst_112:
// rs1_w1_val == 16, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001008000000;  op2val:0xff7fffff00000004
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x00001008000000, 0xff7fffff00000004, x30, x1, 1264, x2)

inst_113:
// rs1_w1_val == 4, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004fffffffc;  op2val:0xffffdfff00000400
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x000004fffffffc, 0xffffdfff00000400, x30, x1, 1280, x2)

inst_114:
// rs1_w1_val == 2, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffffff6;  op2val:0xffff7fff00000006
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x000002fffffff6, 0xffff7fff00000006, x30, x1, 1296, x2)

inst_115:
// rs2_w0_val == -33554433, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00001000;  op2val:0xffbffffffdffffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00001000, 0xffbffffffdffffff, x30, x1, 1312, x2)

inst_116:
// rs1_w0_val == -1431655766, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7faaaaaaaa;  op2val:0xff7fffff00000005
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xffffff7faaaaaaaa, 0xff7fffff00000005, x30, x1, 1328, x2)

inst_117:
// rs2_w0_val == -8388609, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000fffffeff;  op2val:0x000007ff7fffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x020000fffffeff, 0x000007ff7fffff, x30, x1, 1344, x2)

inst_118:
// rs2_w0_val == -2097153, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcf7ffffff;  op2val:0xfffffdffffdfffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffffffcf7ffffff, 0xfffffdffffdfffff, x30, x1, 1360, x2)

inst_119:
// rs1_w0_val == -536870913, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefdfffffff;  op2val:0xc000000008000000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xffffffefdfffffff, 0xc000000008000000, x30, x1, 1376, x2)

inst_120:
// rs1_w0_val == -33554433, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fdffffff;  op2val:0x10000000008000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x40000000fdffffff, 0x10000000008000, x30, x1, 1392, x2)

inst_121:
// rs2_w0_val == -65537, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff80000000;  op2val:0x001000fffeffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffbffff80000000, 0x001000fffeffff, x30, x1, 1408, x2)

inst_122:
// rs1_w0_val == -16777217, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffeffffff;  op2val:0xbffffffffffffff8
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xffffffeffeffffff, 0xbffffffffffffff8, x30, x1, 1424, x2)

inst_123:
// rs1_w0_val == -8388609, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffff7fffff;  op2val:0xc0000000fffffffc
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfbffffffff7fffff, 0xc0000000fffffffc, x30, x1, 1440, x2)

inst_124:
// rs1_w0_val == -2097153, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffdfffff;  op2val:0xfffff7ff00000004
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffdffffffdfffff, 0xfffff7ff00000004, x30, x1, 1456, x2)

inst_125:
// rs1_w0_val == -1048577, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffefffff;  op2val:0x00002000000200
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x80000000ffefffff, 0x00002000000200, x30, x1, 1472, x2)

inst_126:
// rs2_w0_val == 16777216, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000800;  op2val:0xffffff7f01000000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x2000000000000800, 0xffffff7f01000000, x30, x1, 1488, x2)

inst_127:
// rs2_w0_val == -2049, rs1_w0_val == -129
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffffff7f;  op2val:0x100000fffff7ff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x000010ffffff7f, 0x100000fffff7ff, x30, x1, 1504, x2)

inst_128:
// rs2_w0_val == -513, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100001000;  op2val:0x10000000fffffdff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x00000100001000, 0x10000000fffffdff, x30, x1, 1520, x2)

inst_129:
// rs2_w0_val == -257, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000000004;  op2val:0xfffffffbfffffeff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x00008000000004, 0xfffffffbfffffeff, x30, x1, 1536, x2)

inst_130:
// rs1_w0_val == -65537, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffeffff;  op2val:0xfffeffffffff7fff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffffffffffeffff, 0xfffeffffffff7fff, x30, x1, 1552, x2)

inst_131:
// rs1_w0_val == 67108864, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008004000000;  op2val:0xffff7fff00000004
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x00008004000000, 0xffff7fff00000004, x30, x1, 1568, x2)

inst_132:
// rs2_w0_val == 536870912, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffffeff;  op2val:0xff7fffff20000000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xffffeffffffffeff, 0xff7fffff20000000, x30, x1, 1584, x2)

inst_133:
// rs1_w0_val == -17, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002ffffffef;  op2val:0x00200004000000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x000002ffffffef, 0x00200004000000, x30, x1, 1600, x2)

inst_134:
// rs1_w0_val == -2, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffffffe;  op2val:0x000200ffffff7f
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x200000fffffffe, 0x000200ffffff7f, x30, x1, 1616, x2)

inst_135:
// rs2_w0_val == 2097152, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000020;  op2val:0xffffefff00200000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x10000000000020, 0xffffefff00200000, x30, x1, 1632, x2)

inst_136:
// rs2_w0_val == 1048576, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00020000;  op2val:0xffffffdf00100000
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00020000, 0xffffffdf00100000, x30, x1, 1648, x2)

inst_137:
// rs1_w0_val == -2049, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffffffff7ff;  op2val:0x400000000000010
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x3ffffffffffff7ff, 0x400000000000010, x30, x1, 1664, x2)

inst_138:
// rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w0_val == 128, rs2_w1_val == 4, rs1_w1_val == -513
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffffffffa;  op2val:0x00000400000080
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffffdfffffffffa, 0x00000400000080, x30, x1, 1680, x2)

inst_139:
// rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w1_val == -1025, rs1_w0_val == 2097152, rs2_w0_val == -1025, rs1_w1_val == 16384, rs1_w0_val > 0 and rs2_w0_val < 0
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000200000;  op2val:0xfffffbfffffffbff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x00400000200000, 0xfffffbfffffffbff, x30, x1, 1696, x2)

inst_140:
// rs2_w1_val == -536870913, rs2_w0_val == -1048577, rs1_w1_val == 0
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000100000;  op2val:0xdfffffffffefffff
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0x00000000100000, 0xdfffffffffefffff, x30, x1, 1712, x2)

inst_141:
// rs2_w1_val == -524289, 
// opcode: kmxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe3fffffff;  op2val:0xfff7ffff00000006
TEST_PKRR_OP(kmxda32, x31, x30, x29, 0x0000000000000000, 0xfffffffe3fffffff, 0xfff7ffff00000006, x30, x1, 1728, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 218*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
