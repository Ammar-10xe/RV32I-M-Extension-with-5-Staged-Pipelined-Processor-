
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the raddw instruction of the RISC-V RV64PZicsr extension for the raddw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",raddw)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x21,signature_x21_1)

inst_0:
// rs1 == rd != rs2, rs1==x13, rs2==x16, rd==x13, rs1_w0_val == -2147483648, rs2_w1_val == 8388608, rs1_w1_val == -1, rs2_w0_val == 131072
// opcode: raddw ; op1:x13; dest:x13; op1val:0xffffffff80000000;  immval:$imm_val
TEST_RR_OP(raddw, x13, x13, x16, 0x0000000000000000, 0xffffffff80000000, 0x80000000020000, x21, 0, x26)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x5, rs2==x22, rd==x29, rs2_w1_val == -1431655766, rs2_w0_val == 262144, rs1_w0_val == -257
// opcode: raddw ; op1:x5; dest:x29; op1val:0x000006fffffeff;  immval:$imm_val
TEST_RR_OP(raddw, x29, x5, x22, 0x0000000000000000, 0x000006fffffeff, 0xaaaaaaaa00040000, x21, 8, x26)

inst_2:
// rs1 == rs2 != rd, rs1==x4, rs2==x4, rd==x11, rs2_w1_val == 1431655765, rs1_w1_val == -5, rs1_w0_val == 16, rs2_w0_val == 1431655765
// opcode: raddw ; op1:x4; dest:x11; op1val:0xfffffffb00000010;  immval:$imm_val
TEST_RR_OP(raddw, x11, x4, x4, 0x0000000000000000, 0xfffffffb00000010, 0x5555555555555555, x21, 16, x26)

inst_3:
// rs1 == rs2 == rd, rs1==x25, rs2==x25, rd==x25, rs2_w1_val == 2147483647, rs1_w0_val == 2097152, rs1_w1_val == -33554433, rs2_w0_val == 67108864
// opcode: raddw ; op1:x25; dest:x25; op1val:0xfdffffff00200000;  immval:$imm_val
TEST_RR_OP(raddw, x25, x25, x25, 0x0000000000000000, 0xfdffffff00200000, 0x7fffffff04000000, x21, 24, x26)

inst_4:
// rs2 == rd != rs1, rs1==x14, rs2==x9, rd==x9, rs2_w1_val == -1073741825, rs1_w0_val == -33, rs1_w1_val == -8193, rs2_w0_val == -65537
// opcode: raddw ; op1:x14; dest:x9; op1val:0xffffdfffffffffdf;  immval:$imm_val
TEST_RR_OP(raddw, x9, x14, x9, 0x0000000000000000, 0xffffdfffffffffdf, 0xbffffffffffeffff, x21, 32, x26)

inst_5:
// rs1==x31, rs2==x15, rd==x12, rs2_w1_val == -536870913, rs2_w0_val == -524289, rs1_w1_val == 16, rs1_w0_val == -524289
// opcode: raddw ; op1:x31; dest:x12; op1val:0x000010fff7ffff;  immval:$imm_val
TEST_RR_OP(raddw, x12, x31, x15, 0x0000000000000000, 0x000010fff7ffff, 0xdffffffffff7ffff, x21, 40, x26)

inst_6:
// rs1==x16, rs2==x29, rd==x23, rs2_w1_val == -268435457, rs1_w0_val == -4194305, rs1_w1_val == -1431655766, rs2_w0_val == 4
// opcode: raddw ; op1:x16; dest:x23; op1val:0xaaaaaaaaffbfffff;  immval:$imm_val
TEST_RR_OP(raddw, x23, x16, x29, 0x0000000000000000, 0xaaaaaaaaffbfffff, 0xefffffff00000004, x21, 48, x26)

inst_7:
// rs1==x20, rs2==x3, rd==x31, rs2_w1_val == -134217729, rs1_w1_val == -1025, rs2_w0_val == 16777216
// opcode: raddw ; op1:x20; dest:x31; op1val:0xfffffbffffffffdf;  immval:$imm_val
TEST_RR_OP(raddw, x31, x20, x3, 0x0000000000000000, 0xfffffbffffffffdf, 0xf7ffffff01000000, x21, 56, x26)

inst_8:
// rs1==x15, rs2==x17, rd==x19, rs2_w1_val == -67108865, rs2_w0_val == 4194304, rs1_w0_val == -65537
// opcode: raddw ; op1:x15; dest:x19; op1val:0xfffffff6fffeffff;  immval:$imm_val
TEST_RR_OP(raddw, x19, x15, x17, 0x0000000000000000, 0xfffffff6fffeffff, 0xfbffffff00400000, x21, 64, x26)

inst_9:
// rs1==x18, rs2==x14, rd==x7, rs2_w1_val == -33554433, rs1_w1_val == 8388608, rs2_w0_val == -67108865
// opcode: raddw ; op1:x18; dest:x7; op1val:0x8000003fffffff;  immval:$imm_val
TEST_RR_OP(raddw, x7, x18, x14, 0x0000000000000000, 0x8000003fffffff, 0xfdfffffffbffffff, x21, 72, x26)

inst_10:
// rs1==x8, rs2==x23, rd==x1, rs2_w1_val == -16777217, rs1_w1_val == -3, rs1_w0_val == 65536
// opcode: raddw ; op1:x8; dest:x1; op1val:0xfffffffd00010000;  immval:$imm_val
TEST_RR_OP(raddw, x1, x8, x23, 0x0000000000000000, 0xfffffffd00010000, 0xfefffffffbffffff, x21, 80, x26)

inst_11:
// rs1==x11, rs2==x20, rd==x6, rs2_w1_val == -8388609, rs1_w0_val == 1
// opcode: raddw ; op1:x11; dest:x6; op1val:0xfdffffff00000001;  immval:$imm_val
TEST_RR_OP(raddw, x6, x11, x20, 0x0000000000000000, 0xfdffffff00000001, 0xff7ffffffff7ffff, x21, 88, x26)

inst_12:
// rs1==x19, rs2==x0, rd==x18, rs2_w1_val == -4194305, rs1_w1_val == -67108865, rs2_w0_val == 134217728, rs1_w0_val == -1025
// opcode: raddw ; op1:x19; dest:x18; op1val:0xfbfffffffffffbff;  immval:$imm_val
TEST_RR_OP(raddw, x18, x19, x0, 0x0000000000000000, 0xfbfffffffffffbff, 0xffbfffff08000000, x21, 96, x26)

inst_13:
// rs1==x7, rs2==x1, rd==x16, rs2_w1_val == -2097153, rs1_w0_val == -65
// opcode: raddw ; op1:x7; dest:x16; op1val:0x3fffffffffffffbf;  immval:$imm_val
TEST_RR_OP(raddw, x16, x7, x1, 0x0000000000000000, 0x3fffffffffffffbf, 0xffdffffffbffffff, x21, 104, x26)

inst_14:
// rs1==x17, rs2==x10, rd==x8, rs2_w1_val == -1048577, rs1_w1_val == 2048, rs1_w0_val == -16777217, rs2_w0_val == -32769
// opcode: raddw ; op1:x17; dest:x8; op1val:0x000800feffffff;  immval:$imm_val
TEST_RR_OP(raddw, x8, x17, x10, 0x0000000000000000, 0x000800feffffff, 0xffefffffffff7fff, x21, 112, x26)

inst_15:
// rs1==x0, rs2==x27, rd==x17, rs2_w1_val == -524289, rs1_w0_val == -1073741825, rs2_w0_val == -2097153, rs1_w1_val == -257
// opcode: raddw ; op1:x0; dest:x17; op1val:0xfffffeffbfffffff;  immval:$imm_val
TEST_RR_OP(raddw, x17, x0, x27, 0x0000000000000000, 0xfffffeffbfffffff, 0xfff7ffffffdfffff, x21, 120, x26)

inst_16:
// rs1==x23, rs2==x7, rd==x20, rs2_w1_val == -262145, rs1_w1_val == 65536, rs2_w0_val == -17
// opcode: raddw ; op1:x23; dest:x20; op1val:0x0100003fffffff;  immval:$imm_val
TEST_RR_OP(raddw, x20, x23, x7, 0x0000000000000000, 0x0100003fffffff, 0xfffbffffffffffef, x21, 128, x26)

inst_17:
// rs1==x27, rs2==x2, rd==x24, rs2_w1_val == -131073, rs1_w0_val == 32768
// opcode: raddw ; op1:x27; dest:x24; op1val:0xfffffffd00008000;  immval:$imm_val
TEST_RR_OP(raddw, x24, x27, x2, 0x0000000000000000, 0xfffffffd00008000, 0xfffdffff00000004, x21, 136, x26)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_18:
// rs1==x6, rs2==x8, rd==x0, rs2_w1_val == -65537, 
// opcode: raddw ; op1:x6; dest:x0; op1val:0xffffffff00200000;  immval:$imm_val
TEST_RR_OP(raddw, x0, x6, x8, 0x0000000000000000, 0xffffffff00200000, 0xfffeffff00000006, x7, 0, x16)

inst_19:
// rs1==x3, rs2==x21, rd==x15, rs2_w1_val == -32769, 
// opcode: raddw ; op1:x3; dest:x15; op1val:0xfffffffdffffffdf;  immval:$imm_val
TEST_RR_OP(raddw, x15, x3, x21, 0x0000000000000000, 0xfffffffdffffffdf, 0xffff7ffffffeffff, x7, 8, x16)

inst_20:
// rs1==x22, rs2==x30, rd==x28, rs2_w1_val == -16385, rs2_w0_val == -1
// opcode: raddw ; op1:x22; dest:x28; op1val:0xfffffffa00000006;  immval:$imm_val
TEST_RR_OP(raddw, x28, x22, x30, 0x0000000000000000, 0xfffffffa00000006, 0xffffbfffffffffff, x7, 16, x16)

inst_21:
// rs1==x21, rs2==x19, rd==x4, rs2_w1_val == -8193, rs1_w0_val == 64
// opcode: raddw ; op1:x21; dest:x4; op1val:0xfffffbff00000040;  immval:$imm_val
TEST_RR_OP(raddw, x4, x21, x19, 0x0000000000000000, 0xfffffbff00000040, 0xffffdffffffffff9, x7, 24, x16)

inst_22:
// rs1==x28, rs2==x26, rd==x5, rs2_w1_val == -4097, rs1_w1_val == -129
// opcode: raddw ; op1:x28; dest:x5; op1val:0xffffff7f00000001;  immval:$imm_val
TEST_RR_OP(raddw, x5, x28, x26, 0x0000000000000000, 0xffffff7f00000001, 0xffffefff55555555, x7, 32, x16)

inst_23:
// rs1==x9, rs2==x18, rd==x27, rs2_w1_val == -2049, rs1_w1_val == 1, rs2_w0_val == 1024
// opcode: raddw ; op1:x9; dest:x27; op1val:0x000001feffffff;  immval:$imm_val
TEST_RR_OP(raddw, x27, x9, x18, 0x0000000000000000, 0x000001feffffff, 0xfffff7ff00000400, x7, 40, x16)

inst_24:
// rs1==x26, rs2==x6, rd==x3, rs2_w1_val == -1025, rs1_w0_val == 512
// opcode: raddw ; op1:x26; dest:x3; op1val:0xc000000000000200;  immval:$imm_val
TEST_RR_OP(raddw, x3, x26, x6, 0x0000000000000000, 0xc000000000000200, 0xfffffbffffffffff, x7, 48, x16)

inst_25:
// rs1==x1, rs2==x5, rd==x10, rs2_w1_val == -513, rs1_w0_val == 131072, rs2_w0_val == -2147483648
// opcode: raddw ; op1:x1; dest:x10; op1val:0xfffffffd00020000;  immval:$imm_val
TEST_RR_OP(raddw, x10, x1, x5, 0x0000000000000000, 0xfffffffd00020000, 0xfffffdff80000000, x7, 56, x16)

inst_26:
// rs1==x30, rs2==x28, rd==x21, rs2_w1_val == -257, rs1_w1_val == 1024, rs2_w0_val == 16
// opcode: raddw ; op1:x30; dest:x21; op1val:0x00040000200000;  immval:$imm_val
TEST_RR_OP(raddw, x21, x30, x28, 0x0000000000000000, 0x00040000200000, 0xfffffeff00000010, x7, 64, x16)

inst_27:
// rs1==x29, rs2==x12, rd==x30, rs2_w1_val == -129, rs2_w0_val == -33554433, rs1_w1_val == 524288
// opcode: raddw ; op1:x29; dest:x30; op1val:0x080000ffffffdf;  immval:$imm_val
TEST_RR_OP(raddw, x30, x29, x12, 0x0000000000000000, 0x080000ffffffdf, 0xffffff7ffdffffff, x7, 72, x16)

inst_28:
// rs1==x12, rs2==x24, rd==x22, rs2_w1_val == -65, rs1_w1_val == 1431655765
// opcode: raddw ; op1:x12; dest:x22; op1val:0x55555555fffffeff;  immval:$imm_val
TEST_RR_OP(raddw, x22, x12, x24, 0x0000000000000000, 0x55555555fffffeff, 0xffffffbf00020000, x7, 80, x16)

inst_29:
// rs1==x24, rs2==x31, rd==x26, rs2_w1_val == -33, rs1_w1_val == -4097, rs1_w0_val == 128
// opcode: raddw ; op1:x24; dest:x26; op1val:0xffffefff00000080;  immval:$imm_val
TEST_RR_OP(raddw, x26, x24, x31, 0x0000000000000000, 0xffffefff00000080, 0xffffffdffff7ffff, x7, 88, x16)

inst_30:
// rs1==x10, rs2==x11, rd==x14, rs2_w1_val == -17, rs1_w1_val == -268435457, rs1_w0_val == -129
// opcode: raddw ; op1:x10; dest:x14; op1val:0xefffffffffffff7f;  immval:$imm_val
TEST_RR_OP(raddw, x14, x10, x11, 0x0000000000000000, 0xefffffffffffff7f, 0xffffffeffffffff8, x7, 96, x16)

inst_31:
// rs1==x2, rs2_w1_val == -9, rs2_w0_val == -2
// opcode: raddw ; op1:x2; dest:x25; op1val:0xfffffff63fffffff;  immval:$imm_val
TEST_RR_OP(raddw, x25, x2, x0, 0x0000000000000000, 0xfffffff63fffffff, 0xfffffff7fffffffe, x7, 104, x16)

inst_32:
// rs2==x13, rs2_w1_val == -5, rs1_w0_val == 4, rs2_w0_val == -3
// opcode: raddw ; op1:x10; dest:x21; op1val:0xfbffffff00000004;  immval:$imm_val
TEST_RR_OP(raddw, x21, x10, x13, 0x0000000000000000, 0xfbffffff00000004, 0xfffffffbfffffffd, x7, 112, x16)

inst_33:
// rd==x2, rs2_w1_val == -3, rs2_w0_val == -4194305
// opcode: raddw ; op1:x21; dest:x2; op1val:0xfffffbffbfffffff;  immval:$imm_val
TEST_RR_OP(raddw, x2, x21, x30, 0x0000000000000000, 0xfffffbffbfffffff, 0xfffffffdffbfffff, x7, 120, x1)

inst_34:
// rs2_w1_val == -2, rs2_w0_val == -2049
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfffffffb00000040;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000040, 0xfffffffefffff7ff, x7, 128, x1)

inst_35:
// rs2_w1_val == -2147483648, rs1_w0_val == 524288, rs2_w0_val == -5, rs1_w1_val == -524289
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfff7ffff00080000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00080000, 0x80000000fffffffb, x7, 136, x1)

inst_36:
// rs2_w1_val == 1073741824, rs1_w0_val == -1431655766, rs1_w1_val == 32
// opcode: raddw ; op1:x30; dest:x31; op1val:0x000020aaaaaaaa;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x000020aaaaaaaa, 0x4000000000000003, x7, 144, x1)

inst_37:
// rs2_w1_val == 536870912, rs1_w0_val == 256, rs2_w0_val == 2, rs1_w1_val == -9
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfffffff700000100;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfffffff700000100, 0x2000000000000002, x7, 152, x1)

inst_38:
// rs2_w1_val == 268435456, rs1_w0_val == 4096, rs2_w0_val == 65536
// opcode: raddw ; op1:x30; dest:x31; op1val:0x00000700001000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x00000700001000, 0x1000000000010000, x7, 160, x1)

inst_39:
// rs2_w1_val == 134217728, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x08000000020000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x08000000020000, 0x800000000000400, x7, 168, x1)

inst_40:
// rs2_w1_val == 67108864, rs2_w0_val == -536870913, rs1_w0_val == 262144, rs1_w1_val == 4096
// opcode: raddw ; op1:x30; dest:x31; op1val:0x00100000040000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x00100000040000, 0x4000000dfffffff, x7, 176, x1)

inst_41:
// rs2_w1_val == 33554432, rs1_w1_val == -16777217, rs1_w0_val == 67108864, rs2_w0_val == -513
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfeffffff04000000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfeffffff04000000, 0x2000000fffffdff, x7, 184, x1)

inst_42:
// rs2_w1_val == 16777216, rs1_w0_val == 32, rs2_w0_val == 1
// opcode: raddw ; op1:x30; dest:x31; op1val:0x00002000000020;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x00002000000020, 0x100000000000001, x7, 192, x1)

inst_43:
// rs2_w1_val == 4194304, rs2_w0_val == 536870912, rs1_w1_val == -513
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfffffdffffbfffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfffffdffffbfffff, 0x40000020000000, x7, 200, x1)

inst_44:
// rs2_w1_val == 2097152, rs1_w0_val == 1024
// opcode: raddw ; op1:x30; dest:x31; op1val:0x5555555500000400;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x5555555500000400, 0x20000008000000, x7, 208, x1)

inst_45:
// rs2_w1_val == 1048576, rs2_w0_val == -65
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfffffffcfffeffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfffffffcfffeffff, 0x100000ffffffbf, x7, 216, x1)

inst_46:
// rs2_w1_val == 524288, rs1_w1_val == 67108864
// opcode: raddw ; op1:x30; dest:x31; op1val:0x4000000fffffbff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x4000000fffffbff, 0x080000fffffffe, x7, 224, x1)

inst_47:
// rs2_w1_val == 262144, rs1_w0_val == -4097, rs1_w1_val == 1048576
// opcode: raddw ; op1:x30; dest:x31; op1val:0x100000ffffefff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x100000ffffefff, 0x04000000010000, x7, 232, x1)

inst_48:
// rs2_w1_val == 131072, rs1_w1_val == 2147483647, rs1_w0_val == -262145
// opcode: raddw ; op1:x30; dest:x31; op1val:0x7ffffffffffbffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffbffff, 0x02000008000000, x7, 240, x1)

inst_49:
// rs2_w1_val == 65536, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x000001fffffffa;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x000001fffffffa, 0x0100003fffffff, x7, 248, x1)

inst_50:
// rs2_w1_val == 32768, rs1_w1_val == 33554432, rs2_w0_val == -268435457
// opcode: raddw ; op1:x30; dest:x31; op1val:0x200000080000000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x200000080000000, 0x008000efffffff, x7, 256, x1)

inst_51:
// rs2_w1_val == 16384, rs1_w1_val == -65, rs1_w0_val == 2
// opcode: raddw ; op1:x30; dest:x31; op1val:0xffffffbf00000002;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000002, 0x00400000020000, x7, 264, x1)

inst_52:
// rs1_w0_val == 8192, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xffffffff00002000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xffffffff00002000, 0x80000000000002, x7, 272, x1)

inst_53:
// rs1_w0_val == 2048, rs2_w0_val == -9
// opcode: raddw ; op1:x30; dest:x31; op1val:0x00000900000800;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x00000900000800, 0xfdfffffffffffff7, x7, 280, x1)

inst_54:
// rs1_w0_val == 8, rs2_w0_val == -33, rs1_w1_val == 64
// opcode: raddw ; op1:x30; dest:x31; op1val:0x00004000000008;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x00004000000008, 0xfffdffffffffffdf, x7, 288, x1)

inst_55:
// rs1_w0_val == 0, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x00000700000000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x00000700000000, 0x100000000000005, x7, 296, x1)

inst_56:
// rs1_w0_val == -1, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x000010ffffffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x000010ffffffff, 0xffffefff04000000, x7, 304, x1)

inst_57:
// rs2_w1_val == 8192, rs2_w0_val == -1048577, rs1_w1_val == 32768
// opcode: raddw ; op1:x30; dest:x31; op1val:0x00800000000000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x00800000000000, 0x002000ffefffff, x7, 312, x1)

inst_58:
// rs2_w1_val == 4096, rs1_w1_val == 1073741824, rs2_w0_val == -257
// opcode: raddw ; op1:x30; dest:x31; op1val:0x4000000000040000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x4000000000040000, 0x001000fffffeff, x7, 320, x1)

inst_59:
// rs2_w1_val == 2048, rs1_w1_val == 16777216, rs1_w0_val == 8388608
// opcode: raddw ; op1:x30; dest:x31; op1val:0x100000000800000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x100000000800000, 0x00080000000005, x7, 328, x1)

inst_60:
// rs2_w1_val == 1024, rs1_w1_val == -131073
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfffdffff00000006;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000006, 0x000400ffefffff, x7, 336, x1)

inst_61:
// rs2_w1_val == 512, rs2_w0_val == -8193
// opcode: raddw ; op1:x30; dest:x31; op1val:0x000006ffffefff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x000006ffffefff, 0x000200ffffdfff, x7, 344, x1)

inst_62:
// rs2_w1_val == 256, rs1_w1_val == -32769, rs2_w0_val == 128
// opcode: raddw ; op1:x30; dest:x31; op1val:0xffff7fff00010000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xffff7fff00010000, 0x00010000000080, x7, 352, x1)

inst_63:
// rs2_w1_val == 128, rs1_w0_val == -16385, rs2_w0_val == 0
// opcode: raddw ; op1:x30; dest:x31; op1val:0x000040ffffbfff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x000040ffffbfff, 0x00008000000000, x7, 360, x1)

inst_64:
// rs2_w1_val == 64, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x00002000000007;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x00002000000007, 0x00004000000001, x7, 368, x1)

inst_65:
// rs2_w1_val == 32, rs2_w0_val == -262145
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfffffff700800000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfffffff700800000, 0x000020fffbffff, x7, 376, x1)

inst_66:
// rs2_w1_val == 16, rs1_w0_val == 33554432
// opcode: raddw ; op1:x30; dest:x31; op1val:0x400000002000000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x400000002000000, 0x000010ffdfffff, x7, 384, x1)

inst_67:
// rs2_w1_val == 8, rs1_w1_val == -16385
// opcode: raddw ; op1:x30; dest:x31; op1val:0xffffbfff00000040;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000040, 0x000008fbffffff, x7, 392, x1)

inst_68:
// rs2_w1_val == 4, rs2_w0_val == -129
// opcode: raddw ; op1:x30; dest:x31; op1val:0x00000900000100;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x00000900000100, 0x000004ffffff7f, x7, 400, x1)

inst_69:
// rs2_w1_val == 2, rs1_w1_val == 131072
// opcode: raddw ; op1:x30; dest:x31; op1val:0x020000ffffefff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x020000ffffefff, 0x000002fffbffff, x7, 408, x1)

inst_70:
// rs2_w1_val == 1, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xffffefff80000000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xffffefff80000000, 0x000001fffffdff, x7, 416, x1)

inst_71:
// rs2_w1_val == 0, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x008000ffffffdf;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x008000ffffffdf, 0x000000fffffffe, x7, 424, x1)

inst_72:
// rs2_w1_val == -1, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xffffffff80000000, x7, 432, x1)

inst_73:
// rs2_w0_val == -1431655766, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x80000000000100;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x80000000000100, 0x000040aaaaaaaa, x7, 440, x1)

inst_74:
// rs2_w0_val == 2147483647, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x100000000000009;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x100000000000009, 0xfffffff97fffffff, x7, 448, x1)

inst_75:
// rs2_w0_val == -1073741825, rs1_w1_val == -2097153
// opcode: raddw ; op1:x30; dest:x31; op1val:0xffdffffffffffff9;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xffdffffffffffff9, 0xff7fffffbfffffff, x7, 456, x1)

inst_76:
// rs2_w0_val == -134217729, rs1_w1_val == 16384
// opcode: raddw ; op1:x30; dest:x31; op1val:0x004000fffffff8;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x004000fffffff8, 0xfefffffff7ffffff, x7, 464, x1)

inst_77:
// rs2_w0_val == -16777217, rs1_w1_val == 134217728
// opcode: raddw ; op1:x30; dest:x31; op1val:0x800000004000000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x800000004000000, 0x010000feffffff, x7, 472, x1)

inst_78:
// rs2_w0_val == -8388609, rs1_w1_val == 0
// opcode: raddw ; op1:x30; dest:x31; op1val:0x000000fffffffc;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x000000fffffffc, 0x1000000ff7fffff, x7, 480, x1)

inst_79:
// rs2_w0_val == -131073, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x00000702000000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x00000702000000, 0xfff7fffffffdffff, x7, 488, x1)

inst_80:
// rs2_w0_val == -16385, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x08000000001000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x08000000001000, 0x000010ffffbfff, x7, 496, x1)

inst_81:
// rs2_w0_val == -4097, rs1_w1_val == 262144
// opcode: raddw ; op1:x30; dest:x31; op1val:0x04000002000000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x04000002000000, 0x000008ffffefff, x7, 504, x1)

inst_82:
// rs2_w0_val == -1025, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xaaaaaaaa00008000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00008000, 0xffffdffffffffbff, x7, 512, x1)

inst_83:
// rs2_w0_val == 1073741824, rs1_w0_val == -134217729
// opcode: raddw ; op1:x30; dest:x31; op1val:0x000000f7ffffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x000000f7ffffff, 0xfdffffff40000000, x7, 520, x1)

inst_84:
// rs2_w0_val == 268435456, rs1_w0_val == -8193, rs1_w1_val == -1073741825
// opcode: raddw ; op1:x30; dest:x31; op1val:0xbfffffffffffdfff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffdfff, 0xfff7ffff10000000, x7, 528, x1)

inst_85:
// rs2_w0_val == 33554432, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x020000fff7ffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x020000fff7ffff, 0x00000702000000, x7, 536, x1)

inst_86:
// rs2_w0_val == 64, rs1_w0_val == -1048577
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfffffffdffefffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfffffffdffefffff, 0x00010000000040, x7, 544, x1)

inst_87:
// rs2_w0_val == 32, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x08000000000006;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x08000000000006, 0x00000700000020, x7, 552, x1)

inst_88:
// rs2_w0_val == 8, rs1_w0_val == -8388609
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfffffdffff7fffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfffffdffff7fffff, 0xfffffff900000008, x7, 560, x1)

inst_89:
// rs1_w1_val == -536870913, rs1_w0_val == -33554433
// opcode: raddw ; op1:x30; dest:x31; op1val:0xdffffffffdffffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xdffffffffdffffff, 0x00001000000007, x7, 568, x1)

inst_90:
// rs1_w1_val == -134217729, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xf7ffffffffffefff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffefff, 0x80000000fff7ffff, x7, 576, x1)

inst_91:
// rs1_w1_val == -8388609, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xff7ffffffffffff8;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffffff8, 0xfffffff6fffffffb, x7, 584, x1)

inst_92:
// rs1_w1_val == -4194305, rs2_w0_val == 8388608
// opcode: raddw ; op1:x30; dest:x31; op1val:0xffbfffff00000004;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000004, 0x5555555500800000, x7, 592, x1)

inst_93:
// rs1_w1_val == -1048577, rs1_w0_val == -2049
// opcode: raddw ; op1:x30; dest:x31; op1val:0xffeffffffffff7ff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xffeffffffffff7ff, 0xfffdffffffffdfff, x7, 600, x1)

inst_94:
// rs1_w1_val == -262145, rs1_w0_val == 2147483647
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfffbffff7fffffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfffbffff7fffffff, 0xfffffff6fffff7ff, x7, 608, x1)

inst_95:
// rs1_w1_val == -65537, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfffeffff00010000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfffeffff00010000, 0xfffbfffffffffff6, x7, 616, x1)

inst_96:
// rs1_w1_val == -2049, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfffff7ff00000020;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000020, 0x000200fffffeff, x7, 624, x1)

inst_97:
// rs1_w1_val == -33, rs1_w0_val == 268435456, rs2_w0_val == 4096
// opcode: raddw ; op1:x30; dest:x31; op1val:0xffffffdf10000000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xffffffdf10000000, 0x10000000001000, x7, 632, x1)

inst_98:
// rs1_w1_val == -17, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xffffffeffffffff8;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xffffffeffffffff8, 0x800000000000008, x7, 640, x1)

inst_99:
// rs1_w1_val == -2, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfffffffe00000001;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000001, 0xfffffffb00800000, x7, 648, x1)

inst_100:
// rs1_w1_val == -2147483648, rs1_w0_val == -5
// opcode: raddw ; op1:x30; dest:x31; op1val:0x80000000fffffffb;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x80000000fffffffb, 0x40000000000080, x7, 656, x1)

inst_101:
// rs1_w1_val == 536870912, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x20000000ffffffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x20000000ffffffff, 0x08000002000000, x7, 664, x1)

inst_102:
// rs1_w1_val == 268435456, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x10000000ffffffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x10000000ffffffff, 0x000040fffffff7, x7, 672, x1)

inst_103:
// rs1_w1_val == 4194304, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x40000000000010;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x40000000000010, 0xfffffffdfffbffff, x7, 680, x1)

inst_104:
// rs1_w1_val == 2097152, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x20000000000005;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x20000000000005, 0xfffffff9fffffffe, x7, 688, x1)

inst_105:
// rs1_w1_val == 8192, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x002000ff7fffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x002000ff7fffff, 0x00008000010000, x7, 696, x1)

inst_106:
// rs1_w1_val == 512, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x000200ffbfffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x000200ffbfffff, 0xffffff7ffffffff6, x7, 704, x1)

inst_107:
// rs1_w1_val == 256, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x000100fffbffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x000100fffbffff, 0xffefffff00000004, x7, 712, x1)

inst_108:
// rs1_w1_val == 128, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x000080ffffffdf;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x000080ffffffdf, 0x000400fffffff8, x7, 720, x1)

inst_109:
// rs1_w1_val == 8, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x00000800000001;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x00000800000001, 0x3fffffff04000000, x7, 728, x1)

inst_110:
// rs1_w1_val == 4, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x00000400010000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x00000400010000, 0x000002fffffffb, x7, 736, x1)

inst_111:
// rs1_w1_val == 2, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x00000204000000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x00000204000000, 0x00200080000000, x7, 744, x1)

inst_112:
// rs1_w0_val == 1431655765, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfffffff755555555;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfffffff755555555, 0x040000fffdffff, x7, 752, x1)

inst_113:
// rs1_w0_val == -536870913, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x000100dfffffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x000100dfffffff, 0xfdfffffffffbffff, x7, 760, x1)

inst_114:
// rs1_w0_val == -268435457, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xffdfffffefffffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xffdfffffefffffff, 0x000001fffff7ff, x7, 768, x1)

inst_115:
// rs1_w0_val == -67108865, rs2_w0_val == 32768
// opcode: raddw ; op1:x30; dest:x31; op1val:0x000008fbffffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x000008fbffffff, 0xfffffeff00008000, x7, 776, x1)

inst_116:
// rs1_w0_val == -2097153, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x400000ffdfffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x400000ffdfffff, 0x080000ffdfffff, x7, 784, x1)

inst_117:
// rs1_w0_val == -131073, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x000080fffdffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x000080fffdffff, 0x10000000fff7ffff, x7, 792, x1)

inst_118:
// rs1_w0_val == -32769, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x40000000ffff7fff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x40000000ffff7fff, 0xfffffffdfff7ffff, x7, 800, x1)

inst_119:
// rs2_w0_val == 8192, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x3ffffffffffffeff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x3ffffffffffffeff, 0x00080000002000, x7, 808, x1)

inst_120:
// rs1_w0_val == -513, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfffffff9fffffdff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfffffff9fffffdff, 0x00000400000001, x7, 816, x1)

inst_121:
// rs1_w0_val == -17, rs2_w0_val == 16384
// opcode: raddw ; op1:x30; dest:x31; op1val:0xffefffffffffffef;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xffefffffffffffef, 0xdfffffff00004000, x7, 824, x1)

inst_122:
// rs1_w0_val == -9, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x100000fffffff7;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x100000fffffff7, 0xfffff7ff10000000, x7, 832, x1)

inst_123:
// rs1_w0_val == -3, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xffffbffffffffffd;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffffd, 0xffff7fff00001000, x7, 840, x1)

inst_124:
// rs1_w0_val == -2, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x7ffffffffffffffe;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffffffe, 0x400000000000003, x7, 848, x1)

inst_125:
// rs1_w0_val == 1073741824, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x00400040000000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x00400040000000, 0xbfffffff00000005, x7, 856, x1)

inst_126:
// rs1_w0_val == 536870912, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x08000020000000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x08000020000000, 0xfffffdffffffffef, x7, 864, x1)

inst_127:
// rs2_w0_val == 2097152, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xffffff7ffffffff9;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffff9, 0xefffffff00200000, x7, 872, x1)

inst_128:
// rs2_w0_val == 1048576, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xffffbffffffffeff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffeff, 0xffffffff00100000, x7, 880, x1)

inst_129:
// rs1_w0_val == 134217728, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x7fffffff08000000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x7fffffff08000000, 0x00400000200000, x7, 888, x1)

inst_130:
// rs2_w0_val == 524288, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfffffeff10000000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfffffeff10000000, 0x00020000080000, x7, 896, x1)

inst_131:
// rs1_w0_val == 16777216, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x00000601000000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x00000601000000, 0xfffffffe10000000, x7, 904, x1)

inst_132:
// rs1_w0_val == 4194304, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x2000000000400000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x2000000000400000, 0xfffffff600000020, x7, 912, x1)

inst_133:
// rs1_w0_val == 1048576, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xffffdfff00100000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xffffdfff00100000, 0x20000002000000, x7, 920, x1)

inst_134:
// rs2_w0_val == 2048, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x00000400000100;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x00000400000100, 0xfffffdff00000800, x7, 928, x1)

inst_135:
// rs2_w0_val == 512, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x040000fbffffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x040000fbffffff, 0xdfffffff00000200, x7, 936, x1)

inst_136:
// rs2_w0_val == 256, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xffffdfff00008000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xffffdfff00008000, 0xfffffffb00000100, x7, 944, x1)

inst_137:
// rs1_w0_val == 16384, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0x800000000004000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0x800000000004000, 0x00000500000008, x7, 952, x1)

inst_138:
// rs2_w1_val == 2147483647, rs1_w0_val == 2097152, rs1_w1_val == -33554433, rs2_w0_val == 67108864
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfdffffff00200000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfdffffff00200000, 0x7fffffff04000000, x7, 960, x1)

inst_139:
// rs2_w1_val == -4194305, rs1_w1_val == -67108865, rs2_w0_val == 134217728, rs1_w0_val == -1025
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfbfffffffffffbff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffffbff, 0xffbfffff08000000, x7, 968, x1)

inst_140:
// rs2_w1_val == -65537, 
// opcode: raddw ; op1:x30; dest:x31; op1val:0xffffffff00200000;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xffffffff00200000, 0xfffeffff00000006, x7, 976, x1)

inst_141:
// rs2_w1_val == -9, rs2_w0_val == -2
// opcode: raddw ; op1:x30; dest:x31; op1val:0xfffffff63fffffff;  immval:$imm_val
TEST_RR_OP(raddw, x31, x30, x29, 0x0000000000000000, 0xfffffff63fffffff, 0xfffffff7fffffffe, x7, 984, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x21_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x21_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 124*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
