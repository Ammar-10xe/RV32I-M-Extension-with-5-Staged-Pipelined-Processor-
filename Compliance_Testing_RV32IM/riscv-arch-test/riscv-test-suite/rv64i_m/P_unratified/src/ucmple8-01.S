
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ucmple8 instruction of the RISC-V RV64PZicsr extension for the ucmple8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ucmple8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x28, rs2==x24, rd==x28, rs1_b0_val == 0, rs2_b4_val == 0, rs1_b7_val != rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b6_val != rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b5_val == 128, rs1_b5_val != rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b2_val == 1, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b3_val == 0, rs2_b1_val == 32, rs2_b6_val == 1, rs1_b1_val == 4, rs1_b4_val == 32, rs2_b2_val == 251
// opcode: ucmple8 ; op1:x28; op2:x24; dest:x28; op1val:0x60a80200c010400;  op2val:0x1301090000fb200d
TEST_RR_OP(ucmple8, x28, x28, x24, 0x0000000000000000, 0x60a80200c010400, 0x1301090000fb200d, x7, 0, x16)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x5, rs2==x6, rd==x29, rs1_b7_val == rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b3_val == 85, rs2_b6_val == 85, rs1_b4_val != rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b5_val == 255, rs1_b3_val == 32, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b4_val == 191, rs2_b4_val == 251, rs1_b6_val == 1, rs2_b2_val == 127, rs1_b1_val == 16
// opcode: ucmple8 ; op1:x5; op2:x6; dest:x29; op1val:0xf01ffbf200a1007;  op2val:0xf550bfb557f2011
TEST_RR_OP(ucmple8, x29, x5, x6, 0x0000000000000000, 0xf01ffbf200a1007, 0xf550bfb557f2011, x7, 8, x16)

inst_2:
// rs1 == rs2 != rd, rs1==x14, rs2==x14, rd==x1, rs1_b6_val == rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b5_val == 253, rs2_b2_val == 4, rs2_b0_val == 251, rs2_b3_val == 239, rs2_b5_val == 8, rs2_b6_val == 127, rs1_b6_val == 127, rs2_b4_val == 127, rs1_b7_val == 223
// opcode: ucmple8 ; op1:x14; op2:x14; dest:x1; op1val:0xdf7ffd131306040e;  op2val:0xd7f087fef0407fb
TEST_RR_OP(ucmple8, x1, x14, x14, 0x0000000000000000, 0xdf7ffd131306040e, 0xd7f087fef0407fb, x7, 16, x16)

inst_3:
// rs1 == rs2 == rd, rs1==x27, rs2==x27, rd==x27, rs1_b5_val == rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b5_val == 170, rs1_b2_val == 2, rs1_b1_val == 239, rs1_b3_val == 2, rs1_b4_val == 239, rs1_b7_val == 251, rs2_b5_val == 170
// opcode: ucmple8 ; op1:x27; op2:x27; dest:x27; op1val:0xfb03aaef0202ef13;  op2val:0xe0faa0b0009200d
TEST_RR_OP(ucmple8, x27, x27, x27, 0x0000000000000000, 0xfb03aaef0202ef13, 0xe0faa0b0009200d, x7, 24, x16)

inst_4:
// rs2 == rd != rs1, rs1==x17, rs2==x0, rd==x0, rs1_b4_val == rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b7_val == 255, rs1_b2_val == 255, rs1_b3_val == 64, rs2_b1_val == 239, rs2_b6_val == 254, rs2_b4_val == 239, rs2_b3_val == 1, rs2_b2_val == 247
// opcode: ucmple8 ; op1:x17; op2:x0; dest:x0; op1val:0xff0313ef40ff0503;  op2val:0xffe06ef01f7ef0b
TEST_RR_OP(ucmple8, x0, x17, x0, 0x0000000000000000, 0xff0313ef40ff0503, 0xffe06ef01f7ef0b, x7, 32, x16)

inst_5:
// rs1==x9, rs2==x19, rd==x20, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b6_val == 170, rs1_b6_val == 32, rs1_b2_val == 85, rs1_b4_val == 16, rs2_b4_val == 8
// opcode: ucmple8 ; op1:x9; op2:x19; dest:x20; op1val:0xfb20061011550f03;  op2val:0x9aa130811f70a05
TEST_RR_OP(ucmple8, x20, x9, x19, 0x0000000000000000, 0xfb20061011550f03, 0x9aa130811f70a05, x7, 40, x16)

inst_6:
// rs1==x15, rs2==x31, rd==x11, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b7_val == 4, rs1_b0_val == 191, rs2_b2_val == 16, rs1_b2_val == 16, rs1_b7_val == 0, rs2_b0_val == 128, rs1_b4_val == 127, rs1_b3_val == 8, rs2_b5_val == 85, rs2_b4_val == 255
// opcode: ucmple8 ; op1:x15; op2:x31; dest:x11; op1val:0x06077f081012bf;  op2val:0x40c55ff0d100f80
TEST_RR_OP(ucmple8, x11, x15, x31, 0x0000000000000000, 0x06077f081012bf, 0x40c55ff0d100f80, x7, 48, x16)

inst_7:
// rs1==x10, rs2==x11, rd==x12, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b2_val == 8, rs1_b0_val == 253, rs1_b5_val == 16, rs1_b2_val == 223, rs2_b0_val == 32, rs2_b5_val == 2, rs2_b6_val == 247, rs1_b6_val == 251, rs1_b3_val == 254, rs1_b4_val == 247, rs1_b7_val == 253
// opcode: ucmple8 ; op1:x10; op2:x11; dest:x12; op1val:0xfdfb10f7fedf06fd;  op2val:0xaf7027f55080620
TEST_RR_OP(ucmple8, x12, x10, x11, 0x0000000000000000, 0xfdfb10f7fedf06fd, 0xaf7027f55080620, x7, 56, x16)

inst_8:
// rs1==x26, rs2==x13, rd==x8, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b5_val == 16, rs1_b1_val == 127, rs2_b3_val == 16, rs2_b7_val == 247, rs2_b4_val == 128, rs2_b1_val == 4, rs1_b5_val == 223
// opcode: ucmple8 ; op1:x26; op2:x13; dest:x8; op1val:0xcfbdf7f0b097f0f;  op2val:0xf70a10801006040f
TEST_RR_OP(ucmple8, x8, x26, x13, 0x0000000000000000, 0xcfbdf7f0b097f0f, 0xf70a10801006040f, x7, 64, x16)

inst_9:
// rs1==x2, rs2==x17, rd==x3, rs2_b7_val == 170, rs1_b0_val == 239, rs2_b2_val == 2, rs1_b2_val == 0, rs2_b6_val == 251, rs1_b4_val == 223, rs1_b6_val == 16, rs2_b1_val == 254, rs2_b4_val == 4
// opcode: ucmple8 ; op1:x2; op2:x17; dest:x3; op1val:0xa1011df0c000def;  op2val:0xaafb08040002fe0f
TEST_RR_OP(ucmple8, x3, x2, x17, 0x0000000000000000, 0xa1011df0c000def, 0xaafb08040002fe0f, x7, 72, x16)

inst_10:
// rs1==x3, rs2==x21, rd==x30, rs2_b7_val == 85, rs1_b6_val == 85, rs2_b3_val == 128, rs2_b1_val == 247, rs2_b6_val == 8, rs2_b5_val == 239, rs2_b0_val == 85
// opcode: ucmple8 ; op1:x3; op2:x21; dest:x30; op1val:0x1255070e0a11030a;  op2val:0x5508ef0c8010f755
TEST_RR_OP(ucmple8, x30, x3, x21, 0x0000000000000000, 0x1255070e0a11030a, 0x5508ef0c8010f755, x7, 80, x16)

inst_11:
// rs1==x1, rs2==x10, rd==x25, rs2_b7_val == 127, rs1_b4_val == 170, rs2_b2_val == 128
// opcode: ucmple8 ; op1:x1; op2:x10; dest:x25; op1val:0x50a0eaa0eff7f13;  op2val:0x7f13110c12800506
TEST_RR_OP(ucmple8, x25, x1, x10, 0x0000000000000000, 0x50a0eaa0eff7f13, 0x7f13110c12800506, x7, 88, x16)

inst_12:
// rs1==x13, rs2==x4, rd==x17, rs2_b7_val == 191, rs1_b5_val == 64, rs1_b0_val == 64, rs2_b4_val == 85, rs2_b0_val == 255, rs2_b6_val == 64, rs1_b1_val == 32
// opcode: ucmple8 ; op1:x13; op2:x4; dest:x17; op1val:0x130940aa12112040;  op2val:0xbf40055510020dff
TEST_RR_OP(ucmple8, x17, x13, x4, 0x0000000000000000, 0x130940aa12112040, 0xbf40055510020dff, x7, 96, x16)

inst_13:
// rs1==x18, rs2==x23, rd==x10, rs2_b7_val == 223, rs2_b5_val == 4, rs1_b4_val == 0, rs1_b2_val == 253, rs1_b6_val == 170
// opcode: ucmple8 ; op1:x18; op2:x23; dest:x10; op1val:0xfaa100009fd0d0b;  op2val:0xdf03040f80800a06
TEST_RR_OP(ucmple8, x10, x18, x23, 0x0000000000000000, 0xfaa100009fd0d0b, 0xdf03040f80800a06, x7, 104, x8)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_14:
// rs1==x7, rs2==x20, rd==x4, rs2_b7_val == 239, rs1_b3_val == 223, rs2_b6_val == 239, rs1_b1_val == 223, rs2_b3_val == 8, rs2_b2_val == 253, rs1_b0_val == 127
// opcode: ucmple8 ; op1:x7; op2:x20; dest:x4; op1val:0x320ff0bdf55df7f;  op2val:0xefef110b08fd1155
TEST_RR_OP(ucmple8, x4, x7, x20, 0x0000000000000000, 0x320ff0bdf55df7f, 0xefef110b08fd1155, x6, 0, x8)

inst_15:
// rs1==x12, rs2==x9, rd==x22, rs2_b7_val == 251, rs2_b2_val == 64, rs2_b4_val == 223, rs1_b7_val == 239, rs2_b6_val == 255, rs2_b5_val == 191
// opcode: ucmple8 ; op1:x12; op2:x9; dest:x22; op1val:0xef130c0307551200;  op2val:0xfbffbfdfef40f713
TEST_RR_OP(ucmple8, x22, x12, x9, 0x0000000000000000, 0xef130c0307551200, 0xfbffbfdfef40f713, x6, 8, x8)

inst_16:
// rs1==x4, rs2==x1, rd==x21, rs2_b7_val == 253, rs2_b0_val == 191, rs1_b2_val == 4, rs1_b3_val == 4, rs1_b4_val == 128, rs2_b6_val == 0, rs2_b1_val == 1
// opcode: ucmple8 ; op1:x4; op2:x1; dest:x21; op1val:0xd7fff8004040e0e;  op2val:0xfd001308120901bf
TEST_RR_OP(ucmple8, x21, x4, x1, 0x0000000000000000, 0xd7fff8004040e0e, 0xfd001308120901bf, x6, 16, x8)

inst_17:
// rs1==x16, rs2==x12, rd==x18, rs2_b7_val == 254, rs1_b3_val == 191, rs1_b5_val == 8, rs1_b6_val == 128, rs1_b1_val == 8, rs2_b2_val == 239, rs1_b2_val == 247, rs2_b5_val == 223
// opcode: ucmple8 ; op1:x16; op2:x12; dest:x18; op1val:0xc80080fbff7080d;  op2val:0xfe01df0612ef0eff
TEST_RR_OP(ucmple8, x18, x16, x12, 0x0000000000000000, 0xc80080fbff7080d, 0xfe01df0612ef0eff, x6, 24, x8)

inst_18:
// rs1==x30, rs2==x3, rd==x5, rs2_b7_val == 128, rs2_b0_val == 247, rs1_b5_val == 4, rs1_b1_val == 191, rs1_b6_val == 0, rs1_b7_val == 128, rs1_b4_val == 255
// opcode: ucmple8 ; op1:x30; op2:x3; dest:x5; op1val:0x800004ff07f7bf40;  op2val:0x800c0c13ef0304f7
TEST_RR_OP(ucmple8, x5, x30, x3, 0x0000000000000000, 0x800004ff07f7bf40, 0x800c0c13ef0304f7, x6, 32, x8)

inst_19:
// rs1==x22, rs2==x29, rd==x9, rs2_b7_val == 64, rs1_b6_val == 223
// opcode: ucmple8 ; op1:x22; op2:x29; dest:x9; op1val:0xcdf070c0655110b;  op2val:0x407f07070c02040e
TEST_RR_OP(ucmple8, x9, x22, x29, 0x0000000000000000, 0xcdf070c0655110b, 0x407f07070c02040e, x6, 40, x8)

inst_20:
// rs1==x31, rs2==x2, rd==x14, rs2_b7_val == 32, rs1_b7_val == 4, rs1_b3_val == 170, rs1_b0_val == 128, rs1_b6_val == 247, rs2_b3_val == 32, rs1_b5_val == 191, rs1_b2_val == 128
// opcode: ucmple8 ; op1:x31; op2:x2; dest:x14; op1val:0x4f7bfefaa801280;  op2val:0x2055aa032003090c
TEST_RR_OP(ucmple8, x14, x31, x2, 0x0000000000000000, 0x4f7bfefaa801280, 0x2055aa032003090c, x6, 48, x8)

inst_21:
// rs1==x0, rs2==x7, rd==x26, rs2_b7_val == 16, rs2_b5_val == 254, rs2_b1_val == 0, rs2_b4_val == 170
// opcode: ucmple8 ; op1:x0; op2:x7; dest:x26; op1val:0xfd09111206127f06;  op2val:0x1040feaa12ef0007
TEST_RR_OP(ucmple8, x26, x0, x7, 0x0000000000000000, 0xfd09111206127f06, 0x1040feaa12ef0007, x6, 56, x8)

inst_22:
// rs1==x24, rs2==x26, rd==x2, rs2_b7_val == 8, rs1_b3_val == 127, rs2_b3_val == 251, rs2_b0_val == 64, rs2_b6_val == 128, rs1_b1_val == 128, rs1_b7_val == 247, rs2_b1_val == 2
// opcode: ucmple8 ; op1:x24; op2:x26; dest:x2; op1val:0xf75510207f128005;  op2val:0x880fe13fb040240
TEST_RR_OP(ucmple8, x2, x24, x26, 0x0000000000000000, 0xf75510207f128005, 0x880fe13fb040240, x6, 64, x8)

inst_23:
// rs1==x21, rs2==x15, rd==x23, rs2_b7_val == 2, rs2_b0_val == 239, rs2_b3_val == 223, rs2_b2_val == 0, rs1_b7_val == 32, rs1_b0_val == 170
// opcode: ucmple8 ; op1:x21; op2:x15; dest:x23; op1val:0x20100b0fdf0708aa;  op2val:0x20cdf0fdf0020ef
TEST_RR_OP(ucmple8, x23, x21, x15, 0x0000000000000000, 0x20100b0fdf0708aa, 0x20cdf0fdf0020ef, x6, 72, x8)

inst_24:
// rs1==x11, rs2==x25, rd==x16, rs2_b7_val == 1, rs1_b0_val == 223, rs1_b5_val == 1
// opcode: ucmple8 ; op1:x11; op2:x25; dest:x16; op1val:0xfdfb010a05f710df;  op2val:0x10612fb010600f7
TEST_RR_OP(ucmple8, x16, x11, x25, 0x0000000000000000, 0xfdfb010a05f710df, 0x10612fb010600f7, x6, 80, x8)

inst_25:
// rs1==x23, rs2==x16, rd==x31, rs2_b7_val == 255, rs1_b4_val == 253, rs1_b7_val == 254, rs2_b3_val == 191, rs1_b5_val == 0
// opcode: ucmple8 ; op1:x23; op2:x16; dest:x31; op1val:0xfe0f00fdaa090ebf;  op2val:0xff130609bf13050b
TEST_RR_OP(ucmple8, x31, x23, x16, 0x0000000000000000, 0xfe0f00fdaa090ebf, 0xff130609bf13050b, x6, 88, x8)

inst_26:
// rs1==x25, rs2==x5, rd==x7, rs2_b7_val == 0, rs1_b5_val == 32, rs2_b0_val == 1, rs1_b6_val == 8, rs2_b1_val == 255, rs1_b0_val == 85
// opcode: ucmple8 ; op1:x25; op2:x5; dest:x7; op1val:0xb0820ff12010b55;  op2val:0x0b06131100ff01
TEST_RR_OP(ucmple8, x7, x25, x5, 0x0000000000000000, 0xb0820ff12010b55, 0x0b06131100ff01, x6, 96, x8)

inst_27:
// rs1==x20, rs2==x28, rd==x13, rs2_b6_val == 191, rs1_b7_val == 170, rs2_b1_val == 85, rs2_b5_val == 32, rs2_b3_val == 247
// opcode: ucmple8 ; op1:x20; op2:x28; dest:x13; op1val:0xaa1020061206ef0a;  op2val:0x7fbf200bf7055511
TEST_RR_OP(ucmple8, x13, x20, x28, 0x0000000000000000, 0xaa1020061206ef0a, 0x7fbf200bf7055511, x6, 104, x8)

inst_28:
// rs1==x29, rs2==x18, rd==x15, rs2_b6_val == 223, rs2_b0_val == 0, rs1_b1_val == 1
// opcode: ucmple8 ; op1:x29; op2:x18; dest:x15; op1val:0x608030b05100180;  op2val:0x20df0fdf11090b00
TEST_RR_OP(ucmple8, x15, x29, x18, 0x0000000000000000, 0x608030b05100180, 0x20df0fdf11090b00, x6, 112, x2)

inst_29:
// rs1==x19, rs2==x8, rd==x24, rs2_b6_val == 253, rs2_b3_val == 4, rs1_b3_val == 85, rs1_b1_val == 85, rs1_b0_val == 255
// opcode: ucmple8 ; op1:x19; op2:x8; dest:x24; op1val:0x20060003551155ff;  op2val:0x10fd5512040b1200
TEST_RR_OP(ucmple8, x24, x19, x8, 0x0000000000000000, 0x20060003551155ff, 0x10fd5512040b1200, x6, 120, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x8, rs2==x30, rd==x6, rs1_b3_val == 239, rs1_b5_val == 251, rs1_b1_val == 254, rs2_b5_val == 128, rs2_b2_val == 170
// opcode: ucmple8 ; op1:x8; op2:x30; dest:x6; op1val:0x607fbffeffdfe0f;  op2val:0x110780fb00aa0b01
TEST_RR_OP(ucmple8, x6, x8, x30, 0x0000000000000000, 0x607fbffeffdfe0f, 0x110780fb00aa0b01, x1, 0, x2)

inst_31:
// rs1==x6, rs2==x22, rd==x19, rs1_b3_val == 247, rs2_b3_val == 2, rs1_b0_val == 8, rs2_b5_val == 127, rs1_b5_val == 2
// opcode: ucmple8 ; op1:x6; op2:x22; dest:x19; op1val:0x20080212f7fd0d08;  op2val:0x10557f0802aa01ff
TEST_RR_OP(ucmple8, x19, x6, x22, 0x0000000000000000, 0x20080212f7fd0d08, 0x10557f0802aa01ff, x1, 8, x2)

inst_32:
// rs1_b3_val == 251, rs2_b2_val == 32, rs2_b6_val == 2, rs1_b6_val == 2, rs2_b1_val == 8, rs2_b5_val == 247
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x1302077ffbf7100d;  op2val:0x1102f70710200801
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x1302077ffbf7100d, 0x1102f70710200801, x1, 16, x2)

inst_33:
// rs1_b3_val == 253, rs1_b1_val == 253, rs2_b2_val == 85
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xef11aa0dfd09fd0c;  op2val:0xaabf55ff00550513
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xef11aa0dfd09fd0c, 0xaabf55ff00550513, x1, 24, x2)

inst_34:
// rs1_b3_val == 128, rs2_b4_val == 247, rs1_b4_val == 254
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd0f0bfe8009df0d;  op2val:0x50af7f7800b0600
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xfd0f0bfe8009df0d, 0x50af7f7800b0600, x1, 32, x2)

inst_35:
// rs1_b3_val == 16, rs1_b1_val == 255, rs2_b4_val == 1
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xaafb0f121010ff00;  op2val:0xbf0a0c011308000f
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xaafb0f121010ff00, 0xbf0a0c011308000f, x1, 40, x2)

inst_36:
// rs1_b3_val == 1, rs2_b3_val == 170
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe120480011104ff;  op2val:0xaafe0909aaef2055
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xfe120480011104ff, 0xaafe0909aaef2055, x1, 48, x2)

inst_37:
// rs1_b3_val == 255, rs1_b6_val == 253, rs1_b5_val == 239
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x13fdef80ff1007ef;  op2val:0xff110204120f0e00
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x13fdef80ff1007ef, 0xff110204120f0e00, x1, 56, x2)

inst_38:
// rs1_b3_val == 0, rs1_b2_val == 191, rs2_b4_val == 16, rs1_b5_val == 254
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x120cfeaa00bf1307;  op2val:0x7f0803100d12f700
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x120cfeaa00bf1307, 0x7f0803100d12f700, x1, 64, x2)

inst_39:
// rs1_b2_val == 170, rs2_b5_val == 251, rs2_b1_val == 253
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x110f80110daa1003;  op2val:0xbf05fbdfaa13fd09
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x110f80110daa1003, 0xbf05fbdfaa13fd09, x1, 72, x2)

inst_40:
// rs1_b2_val == 127, rs2_b1_val == 127, rs1_b6_val == 4
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xff040c000a7f03ff;  op2val:0x1df0e0b0baa7f0a
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xff040c000a7f03ff, 0x1df0e0b0baa7f0a, x1, 80, x2)

inst_41:
// rs1_b2_val == 239, rs2_b5_val == 253, rs2_b0_val == 16
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x7040f0612ef12fd;  op2val:0x3effd0d11030b10
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x7040f0612ef12fd, 0x3effd0d11030b10, x1, 88, x2)

inst_42:
// rs1_b2_val == 251, rs1_b0_val == 16
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xf77f0dfe13fb7f10;  op2val:0xb0b0812040e200f
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xf77f0dfe13fb7f10, 0xb0b0812040e200f, x1, 96, x2)

inst_43:
// rs1_b2_val == 254, rs2_b6_val == 16, rs1_b4_val == 85
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xa0a0d5513fefd08;  op2val:0x1010020811020803
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xa0a0d5513fefd08, 0x1010020811020803, x1, 104, x2)

inst_44:
// rs1_b2_val == 64, rs2_b3_val == 127, rs1_b7_val == 16, rs1_b5_val == 247
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x100ef7121240bf07;  op2val:0xb100c007faa0910
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x100ef7121240bf07, 0xb100c007faa0910, x1, 112, x2)

inst_45:
// rs1_b2_val == 32, rs1_b1_val == 251, rs2_b3_val == 64, rs2_b5_val == 64, rs2_b1_val == 223
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x120efb13fb20fbaa;  op2val:0xa11400d4006df0a
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x120efb13fb20fbaa, 0xa11400d4006df0a, x1, 120, x2)

inst_46:
// rs1_b2_val == 8, rs1_b0_val == 4
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x1213130e0d080e04;  op2val:0xff0980ff5540550a
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x1213130e0d080e04, 0xff0980ff5540550a, x1, 128, x2)

inst_47:
// rs1_b1_val == 170, rs2_b2_val == 223
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xff0d2000fd05aa13;  op2val:0xa10fe0409dfef11
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xff0d2000fd05aa13, 0xa10fe0409dfef11, x1, 136, x2)

inst_48:
// rs2_b2_val == 1, rs1_b6_val == 191, rs2_b4_val == 191
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x80bf0300fd020605;  op2val:0x50711bf0101080c
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x80bf0300fd020605, 0x50711bf0101080c, x1, 144, x2)

inst_49:
// rs2_b2_val == 255, rs1_b6_val == 64, rs2_b0_val == 8, rs1_b1_val == 64
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x1340032009f74003;  op2val:0x0a13f706ffff08
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x1340032009f74003, 0x0a13f706ffff08, x1, 152, x2)

inst_50:
// rs2_b1_val == 170, rs2_b0_val == 223
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x780fe20aa0e0f09;  op2val:0x2050a55df20aadf
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x780fe20aa0e0f09, 0x2050a55df20aadf, x1, 160, x2)

inst_51:
// rs2_b1_val == 191, rs2_b2_val == 191
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xe00050a04120407;  op2val:0xfd01050640bfbf10
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xe00050a04120407, 0xfd01050640bfbf10, x1, 168, x2)

inst_52:
// rs2_b1_val == 251, rs1_b0_val == 1, rs2_b0_val == 127
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf7f03060eff0e01;  op2val:0xffbfaa060e0bfb7f
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xdf7f03060eff0e01, 0xffbfaa060e0bfb7f, x1, 176, x2)

inst_53:
// rs2_b1_val == 128, rs2_b4_val == 32
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x306130dbf005580;  op2val:0x2010f7200c038012
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x306130dbf005580, 0x2010f7200c038012, x1, 184, x2)

inst_54:
// rs2_b1_val == 64, rs2_b0_val == 2
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa0f800b400c4040;  op2val:0x60204df000b4002
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xaa0f800b400c4040, 0x60204df000b4002, x1, 192, x2)

inst_55:
// rs2_b1_val == 16, rs1_b0_val == 32, rs1_b7_val == 191
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf2013100713bf20;  op2val:0xdf02800003100f
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xbf2013100713bf20, 0xdf02800003100f, x1, 200, x2)

inst_56:
// rs2_b0_val == 170, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xcaaffffbfbf1305;  op2val:0x10df0e200e107faa
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xcaaffffbfbf1305, 0x10df0e200e107faa, x1, 208, x2)

inst_57:
// rs2_b0_val == 253, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x207fef105508080d;  op2val:0xa06fef70412fbfd
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x207fef105508080d, 0xa06fef70412fbfd, x1, 216, x2)

inst_58:
// rs2_b0_val == 254, rs1_b1_val == 2, rs1_b7_val == 2
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x2090b05000402bf;  op2val:0x4ff112011effffe
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x2090b05000402bf, 0x4ff112011effffe, x1, 224, x2)

inst_59:
// rs2_b0_val == 4, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x6400920002006aa;  op2val:0x901df030bef7f04
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x6400920002006aa, 0x901df030bef7f04, x1, 232, x2)

inst_60:
// rs1_b1_val == 247, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x40d0f101000f711;  op2val:0xa0b0a08130c07ff
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x40d0f101000f711, 0xa0b0a08130c07ff, x1, 240, x2)

inst_61:
// rs2_b6_val == 32, rs1_b0_val == 254
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf1112fe7fefbffe;  op2val:0xc200b0980fb0200
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xbf1112fe7fefbffe, 0xc200b0980fb0200, x1, 248, x2)

inst_62:
// rs1_b7_val == 85, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x557f02ffaa131055;  op2val:0xbf1020aadf10f700
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x557f02ffaa131055, 0xbf1020aadf10f700, x1, 256, x2)

inst_63:
// rs1_b7_val == 1, rs1_b4_val == 8
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x10401080daafd0a;  op2val:0xff20050c03aa5507
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x10401080daafd0a, 0xff20050c03aa5507, x1, 264, x2)

inst_64:
// rs1_b0_val == 247, rs2_b5_val == 255
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x5800411fe0b0df7;  op2val:0x1000ff040bf70c07
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x5800411fe0b0df7, 0x1000ff040bf70c07, x1, 272, x2)

inst_65:
// rs1_b0_val == 251, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe0f0f208009effb;  op2val:0xff7020420fb1380
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xfe0f0f208009effb, 0xff7020420fb1380, x1, 280, x2)

inst_66:
// rs2_b5_val == 1, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xb02aa7fffefdfef;  op2val:0x12000105fb550afd
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xb02aa7fffefdfef, 0x12000105fb550afd, x1, 288, x2)

inst_67:
// rs1_b6_val == 239, rs2_b3_val == 254, rs1_b7_val == 64
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x40ef0c800daa0b01;  op2val:0xf77f0ffffeaa7f80
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x40ef0c800daa0b01, 0xf77f0ffffeaa7f80, x1, 296, x2)

inst_68:
// rs2_b5_val == 0, rs1_b4_val == 64
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xf550b400c0bdf10;  op2val:0xbf7f000f05100802
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xf550b400c0bdf10, 0xbf7f000f05100802, x1, 304, x2)

inst_69:
// rs1_b0_val == 2, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf13020c20200602;  op2val:0xdf0b13ef0c0e0809
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xbf13020c20200602, 0xdf0b13ef0c0e0809, x1, 312, x2)

inst_70:
// rs1_b6_val == 254, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfe0a80f740400b;  op2val:0x5aaef13fbbf050e
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xfbfe0a80f740400b, 0x5aaef13fbbf050e, x1, 320, x2)

inst_71:
// rs2_b4_val == 253, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x40fd110811ef0f05;  op2val:0x71002fd20090700
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x40fd110811ef0f05, 0x71002fd20090700, x1, 328, x2)

inst_72:
// rs1_b4_val == 1, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x20fbfd0103200506;  op2val:0xfefd04000b00400a
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x20fbfd0103200506, 0xfefd04000b00400a, x1, 336, x2)

inst_73:
// rs2_b4_val == 254, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x510df0f04001006;  op2val:0x206fefe7f07f707
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x510df0f04001006, 0x206fefe7f07f707, x1, 344, x2)

inst_74:
// rs2_b2_val == 254, rs2_b4_val == 64
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x5bffb10fd111307;  op2val:0x45500400efe01ef
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x5bffb10fd111307, 0x45500400efe01ef, x1, 352, x2)

inst_75:
// rs2_b3_val == 253, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x5550e8040fbfd00;  op2val:0xaa10017ffd0e8012
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x5550e8040fbfd00, 0xaa10017ffd0e8012, x1, 360, x2)

inst_76:
// rs1_b7_val == 127, rs1_b1_val == 0
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x7ff703030310000a;  op2val:0xf7110d120503000a
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x7ff703030310000a, 0xf7110d120503000a, x1, 368, x2)

inst_77:
// rs2_b3_val == 255, rs2_b4_val == 2
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa550f070412070b;  op2val:0x110f0e02fffb0d08
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xaa550f070412070b, 0x110f0e02fffb0d08, x1, 376, x2)

inst_78:
// rs2_b6_val == 4, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xd40008006fb0311;  op2val:0xfe0413070dfffbdf
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xd40008006fb0311, 0xfe0413070dfffbdf, x1, 384, x2)

inst_79:
// rs1_b4_val == 251, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x4010bffb02200dbf;  op2val:0x902550fdf045501
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x4010bffb02200dbf, 0x902550fdf045501, x1, 392, x2)

inst_80:
// rs1_b6_val == 255, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff00f7aa550dfb;  op2val:0x20fdfeaabf0f550f
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x7fff00f7aa550dfb, 0x20fdfeaabf0f550f, x1, 400, x2)

inst_81:
// rs1_b5_val == 85, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x4020550a05bf4011;  op2val:0x50ef7130f110306
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x4020550a05bf4011, 0x50ef7130f110306, x1, 408, x2)

inst_82:
// rs1_b5_val == 127, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xbffb7f000f0c0503;  op2val:0x9fe40012012fe00
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xbffb7f000f0c0503, 0x9fe40012012fe00, x1, 416, x2)

inst_83:
// rs1_b4_val == 4, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x120aff04800cef0d;  op2val:0xf720aa10bf020b00
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x120aff04800cef0d, 0xf720aa10bf020b00, x1, 424, x2)

inst_84:
// rs1_b4_val == 2, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xaabf03021302060e;  op2val:0xd030103120f0f09
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0xaabf03021302060e, 0xd030103120f0f09, x1, 432, x2)

inst_85:
// rs1_b7_val == 8, 
// opcode: ucmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x80d0955fe090520;  op2val:0x13400c020a0f08fb
TEST_RR_OP(ucmple8, x31, x30, x29, 0x0000000000000000, 0x80d0955fe090520, 0x13400c020a0f08fb, x1, 440, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 56*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
