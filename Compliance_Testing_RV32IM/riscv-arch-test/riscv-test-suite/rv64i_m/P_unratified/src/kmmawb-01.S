
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmmawb instruction of the RISC-V RV64PZicsr extension for the kmmawb covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmmawb)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x20, rs2==x27, rd==x20, rs1_w0_val == -2147483648, rs2_h1_val == -1, rs1_w1_val == 2048, rs2_h3_val == 64, rs2_h2_val == 128
// opcode: kmmawb ; op1:x20; op2:x27; dest:x20; op1val:0x00080080000000;  op2val:0x400080fffffffa
TEST_PKRR_OP(kmmawb, x20, x20, x27, 0x0000000000000000, 0x00080080000000, 0x400080fffffffa, x20, x7, 0, x4)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x30, rs2==x0, rd==x28, rs2_h3_val == -21846, rs1_w0_val == 4, rs2_h2_val == -33, rs2_h1_val == -129
// opcode: kmmawb ; op1:x30; op2:x0; dest:x28; op1val:0xfffffff600000004;  op2val:0xaaaaffdfff7f0007
TEST_PKRR_OP(kmmawb, x28, x30, x0, 0x0000000000000000, 0xfffffff600000004, 0xaaaaffdfff7f0007, x30, x7, 16, x4)

inst_2:
// rs1 == rs2 != rd, rs1==x2, rs2==x2, rd==x25, rs2_h3_val == 21845, rs2_h1_val == 4, rs1_w0_val == -8193, rs2_h0_val == 512, rs1_w1_val == 67108864
// opcode: kmmawb ; op1:x2; op2:x2; dest:x25; op1val:0x4000000ffffdfff;  op2val:0x5555008000040200
TEST_PKRR_OP(kmmawb, x25, x2, x2, 0x0000000000000000, 0x4000000ffffdfff, 0x5555008000040200, x2, x7, 32, x4)

inst_3:
// rs1 == rs2 == rd, rs1==x12, rs2==x12, rd==x12, rs2_h3_val == 32767, rs2_h1_val == -5, rs2_h2_val == 1024, rs1_w0_val == 128, rs1_w1_val == -524289
// opcode: kmmawb ; op1:x12; op2:x12; dest:x12; op1val:0xfff7ffff00000080;  op2val:0x7fff0400fffbc000
TEST_PKRR_OP(kmmawb, x12, x12, x12, 0x0000000000000000, 0xfff7ffff00000080, 0x7fff0400fffbc000, x12, x7, 48, x4)

inst_4:
// rs2 == rd != rs1, rs1==x31, rs2==x13, rd==x13, rs2_h3_val == -16385, rs2_h0_val == 32, rs2_h2_val == 4096, rs1_w0_val == -33554433, rs2_h1_val == -17
// opcode: kmmawb ; op1:x31; op2:x13; dest:x13; op1val:0x000007fdffffff;  op2val:0xbfff1000ffef0020
TEST_PKRR_OP(kmmawb, x13, x31, x13, 0x0000000000000000, 0x000007fdffffff, 0xbfff1000ffef0020, x31, x7, 64, x4)

inst_5:
// rs1==x19, rs2==x30, rd==x17, rs2_h3_val == -8193, rs1_w1_val == 16777216, rs1_w0_val == -9, rs2_h2_val == 21845
// opcode: kmmawb ; op1:x19; op2:x30; dest:x17; op1val:0x1000000fffffff7;  op2val:0xdfff5555fffa0003
TEST_PKRR_OP(kmmawb, x17, x19, x30, 0x0000000000000000, 0x1000000fffffff7, 0xdfff5555fffa0003, x19, x7, 80, x4)

inst_6:
// rs1==x6, rs2==x23, rd==x9, rs2_h3_val == -4097, rs1_w0_val == -1048577, rs2_h1_val == 32, rs1_w1_val == -2, rs2_h0_val == -4097, rs2_h2_val == 2048
// opcode: kmmawb ; op1:x6; op2:x23; dest:x9; op1val:0xfffffffeffefffff;  op2val:0xefff08000020efff
TEST_PKRR_OP(kmmawb, x9, x6, x23, 0x0000000000000000, 0xfffffffeffefffff, 0xefff08000020efff, x6, x7, 96, x4)

inst_7:
// rs1==x10, rs2==x3, rd==x0, rs2_h3_val == -2049, rs1_w0_val == -16385, rs2_h0_val == 2, rs2_h1_val == -1025, rs1_w1_val == 1073741824, rs2_h2_val == 256
// opcode: kmmawb ; op1:x10; op2:x3; dest:x0; op1val:0x40000000ffffbfff;  op2val:0xf7ff0100fbff0002
TEST_PKRR_OP(kmmawb, x0, x10, x3, 0x0000000000000000, 0x40000000ffffbfff, 0xf7ff0100fbff0002, x10, x7, 112, x4)

inst_8:
// rs1==x16, rs2==x22, rd==x14, rs2_h3_val == -1025, rs2_h1_val == 1024, rs2_h0_val == -17, rs2_h2_val == -21846, rs1_w1_val == -536870913
// opcode: kmmawb ; op1:x16; op2:x22; dest:x14; op1val:0xdfffffff00000009;  op2val:0xfbffaaaa0400ffef
TEST_PKRR_OP(kmmawb, x14, x16, x22, 0x0000000000000000, 0xdfffffff00000009, 0xfbffaaaa0400ffef, x16, x7, 128, x4)

inst_9:
// rs1==x14, rs2==x31, rd==x1, rs2_h3_val == -513, rs2_h0_val == 1024, rs2_h1_val == -21846, rs2_h2_val == -257, rs1_w0_val == -1073741825, rs1_w1_val == 524288
// opcode: kmmawb ; op1:x14; op2:x31; dest:x1; op1val:0x080000bfffffff;  op2val:0xfdfffeffaaaa0400
TEST_PKRR_OP(kmmawb, x1, x14, x31, 0x0000000000000000, 0x080000bfffffff, 0xfdfffeffaaaa0400, x14, x7, 144, x4)

inst_10:
// rs1==x11, rs2==x25, rd==x10, rs2_h3_val == -257, rs2_h2_val == -65, rs1_w1_val == -32769, rs1_w0_val == -134217729
// opcode: kmmawb ; op1:x11; op2:x25; dest:x10; op1val:0xffff7ffff7ffffff;  op2val:0xfeffffbffff9fff8
TEST_PKRR_OP(kmmawb, x10, x11, x25, 0x0000000000000000, 0xffff7ffff7ffffff, 0xfeffffbffff9fff8, x11, x7, 160, x4)

inst_11:
// rs1==x13, rs2==x18, rd==x16, rs2_h3_val == -129, rs2_h1_val == 64, rs2_h0_val == -8193, rs1_w0_val == 1431655765, rs1_w1_val == -2097153, rs2_h2_val == 512
// opcode: kmmawb ; op1:x13; op2:x18; dest:x16; op1val:0xffdfffff55555555;  op2val:0xff7f02000040dfff
TEST_PKRR_OP(kmmawb, x16, x13, x18, 0x0000000000000000, 0xffdfffff55555555, 0xff7f02000040dfff, x13, x7, 176, x4)

inst_12:
// rs1==x28, rs2==x1, rd==x21, rs2_h3_val == -65, rs2_h0_val == 16384, rs1_w1_val == -1073741825, rs1_w0_val == -16777217
// opcode: kmmawb ; op1:x28; op2:x1; dest:x21; op1val:0xbffffffffeffffff;  op2val:0xffbf3ffffff64000
TEST_PKRR_OP(kmmawb, x21, x28, x1, 0x0000000000000000, 0xbffffffffeffffff, 0xffbf3ffffff64000, x28, x7, 192, x4)

inst_13:
// rs1==x27, rs2==x17, rd==x5, rs2_h3_val == -33, rs2_h0_val == 128, rs2_h2_val == -129
// opcode: kmmawb ; op1:x27; op2:x17; dest:x5; op1val:0xfffffff6fffffffc;  op2val:0xffdfff7f00070080
TEST_PKRR_OP(kmmawb, x5, x27, x17, 0x0000000000000000, 0xfffffff6fffffffc, 0xffdfff7f00070080, x27, x7, 208, x4)

inst_14:
// rs1==x24, rs2==x8, rd==x3, rs2_h3_val == -17, rs1_w1_val == 33554432, rs1_w0_val == 4096
// opcode: kmmawb ; op1:x24; op2:x8; dest:x3; op1val:0x200000000001000;  op2val:0xffefc00004000080
TEST_PKRR_OP(kmmawb, x3, x24, x8, 0x0000000000000000, 0x200000000001000, 0xffefc00004000080, x24, x7, 224, x4)

inst_15:
// rs1==x4, rs2==x6, rd==x31, rs2_h3_val == -9, rs1_w0_val == -4194305, rs1_w1_val == -131073, rs2_h0_val == -3
// opcode: kmmawb ; op1:x4; op2:x6; dest:x31; op1val:0xfffdffffffbfffff;  op2val:0xfff71000fffcfffd
TEST_PKRR_OP(kmmawb, x31, x4, x6, 0x0000000000000000, 0xfffdffffffbfffff, 0xfff71000fffcfffd, x4, x7, 240, x1)
RVTEST_SIGBASE(x12,signature_x12_0)

inst_16:
// rs1==x5, rs2==x20, rd==x15, rs2_h3_val == -5, rs1_w0_val == 262144, rs2_h2_val == 1, rs2_h1_val == -3, rs2_h0_val == -9, rs1_w1_val == 4194304
// opcode: kmmawb ; op1:x5; op2:x20; dest:x15; op1val:0x40000000040000;  op2val:0xfffb0001fffdfff7
TEST_PKRR_OP(kmmawb, x15, x5, x20, 0x0000000000000000, 0x40000000040000, 0xfffb0001fffdfff7, x5, x12, 0, x1)

inst_17:
// rs1==x17, rs2==x7, rd==x4, rs2_h3_val == -3, rs1_w1_val == 16384, rs2_h0_val == -257
// opcode: kmmawb ; op1:x17; op2:x7; dest:x4; op1val:0x004000ffbfffff;  op2val:0xfffd00050005feff
TEST_PKRR_OP(kmmawb, x4, x17, x7, 0x0000000000000000, 0x004000ffbfffff, 0xfffd00050005feff, x17, x12, 16, x1)

inst_18:
// rs1==x23, rs2==x10, rd==x24, rs2_h3_val == -2, rs1_w0_val == 8, rs2_h2_val == -17, rs1_w1_val == 0, rs2_h0_val == 256
// opcode: kmmawb ; op1:x23; op2:x10; dest:x24; op1val:0x00000000000008;  op2val:0xfffeffeffffc0100
TEST_PKRR_OP(kmmawb, x24, x23, x10, 0x0000000000000000, 0x00000000000008, 0xfffeffeffffc0100, x23, x12, 32, x1)

inst_19:
// rs1==x18, rs2==x9, rd==x11, rs2_h3_val == -32768, rs1_w1_val == -17
// opcode: kmmawb ; op1:x18; op2:x9; dest:x11; op1val:0xffffffef00000004;  op2val:0x8000ffdfffff0009
TEST_PKRR_OP(kmmawb, x11, x18, x9, 0x0000000000000000, 0xffffffef00000004, 0x8000ffdfffff0009, x18, x12, 48, x1)

inst_20:
// rs1==x15, rs2==x21, rd==x2, rs2_h3_val == 16384, rs1_w0_val == 16, rs1_w1_val == -33, rs2_h1_val == -9
// opcode: kmmawb ; op1:x15; op2:x21; dest:x2; op1val:0xffffffdf00000010;  op2val:0x4000ffeffff7fff9
TEST_PKRR_OP(kmmawb, x2, x15, x21, 0x0000000000000000, 0xffffffdf00000010, 0x4000ffeffff7fff9, x15, x12, 64, x1)

inst_21:
// rs1==x29, rs2==x16, rd==x19, rs2_h3_val == 8192, rs2_h2_val == 8, rs1_w1_val == 16, rs1_w0_val == -32769
// opcode: kmmawb ; op1:x29; op2:x16; dest:x19; op1val:0x000010ffff7fff;  op2val:0x20000008fffb0080
TEST_PKRR_OP(kmmawb, x19, x29, x16, 0x0000000000000000, 0x000010ffff7fff, 0x20000008fffb0080, x29, x12, 80, x1)

inst_22:
// rs1==x25, rs2==x14, rd==x30, rs2_h3_val == 4096, rs1_w1_val == -5, rs1_w0_val == 4194304, rs2_h1_val == -32768, rs2_h0_val == -32768
// opcode: kmmawb ; op1:x25; op2:x14; dest:x30; op1val:0xfffffffb00400000;  op2val:0x1000000780008000
TEST_PKRR_OP(kmmawb, x30, x25, x14, 0x0000000000000000, 0xfffffffb00400000, 0x1000000780008000, x25, x12, 96, x1)

inst_23:
// rs1==x0, rs2==x28, rd==x7, rs2_h3_val == 2048, rs2_h1_val == -257, rs2_h2_val == -2049, rs1_w0_val == -5
// opcode: kmmawb ; op1:x0; op2:x28; dest:x7; op1val:0xdffffffffffffffb;  op2val:0x800f7fffefffff6
TEST_PKRR_OP(kmmawb, x7, x0, x28, 0x0000000000000000, 0xdffffffffffffffb, 0x800f7fffefffff6, x0, x12, 112, x1)

inst_24:
// rs1==x3, rs2==x19, rd==x22, rs2_h3_val == 1024, rs1_w1_val == 32768, rs1_w0_val == -3
// opcode: kmmawb ; op1:x3; op2:x19; dest:x22; op1val:0x008000fffffffd;  op2val:0x400c000fff83fff
TEST_PKRR_OP(kmmawb, x22, x3, x19, 0x0000000000000000, 0x008000fffffffd, 0x400c000fff83fff, x3, x12, 128, x1)

inst_25:
// rs1==x8, rs2==x29, rd==x26, rs2_h3_val == 512, rs1_w1_val == -67108865, rs2_h2_val == 2, rs1_w0_val == 0
// opcode: kmmawb ; op1:x8; op2:x29; dest:x26; op1val:0xfbffffff00000000;  op2val:0x20000020006ffef
TEST_PKRR_OP(kmmawb, x26, x8, x29, 0x0000000000000000, 0xfbffffff00000000, 0x20000020006ffef, x8, x12, 144, x1)

inst_26:
// rs1==x7, rs2==x4, rd==x8, rs2_h3_val == 256, rs1_w0_val == 1
// opcode: kmmawb ; op1:x7; op2:x4; dest:x8; op1val:0xdfffffff00000001;  op2val:0x100f7ff80000200
TEST_PKRR_OP(kmmawb, x8, x7, x4, 0x0000000000000000, 0xdfffffff00000001, 0x100f7ff80000200, x7, x12, 160, x2)

inst_27:
// rs1==x1, rs2==x26, rd==x6, rs2_h3_val == 128, rs1_w0_val == 256, rs2_h1_val == 2048
// opcode: kmmawb ; op1:x1; op2:x26; dest:x6; op1val:0xfffdffff00000100;  op2val:0x80aaaa08000200
TEST_PKRR_OP(kmmawb, x6, x1, x26, 0x0000000000000000, 0xfffdffff00000100, 0x80aaaa08000200, x1, x12, 176, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_28:
// rs1==x9, rs2==x15, rd==x29, rs2_h3_val == 32, rs1_w0_val == -65, rs2_h1_val == 0, rs1_w1_val == 134217728
// opcode: kmmawb ; op1:x9; op2:x15; dest:x29; op1val:0x8000000ffffffbf;  op2val:0x20000600004000
TEST_PKRR_OP(kmmawb, x29, x9, x15, 0x0000000000000000, 0x8000000ffffffbf, 0x20000600004000, x9, x1, 0, x2)

inst_29:
// rs1==x26, rs2==x11, rd==x18, rs2_h3_val == 16, rs2_h2_val == -1, rs1_w1_val == 512, rs1_w0_val == 8388608
// opcode: kmmawb ; op1:x26; op2:x11; dest:x18; op1val:0x00020000800000;  op2val:0x10ffff0004efff
TEST_PKRR_OP(kmmawb, x18, x26, x11, 0x0000000000000000, 0x00020000800000, 0x10ffff0004efff, x26, x1, 16, x2)

inst_30:
// rs1==x22, rs2==x5, rd==x27, rs2_h3_val == 8, rs1_w0_val == 2, rs2_h1_val == 8192, rs1_w1_val == -134217729
// opcode: kmmawb ; op1:x22; op2:x5; dest:x27; op1val:0xf7ffffff00000002;  op2val:0x08f7ff2000fff9
TEST_PKRR_OP(kmmawb, x27, x22, x5, 0x0000000000000000, 0xf7ffffff00000002, 0x08f7ff2000fff9, x22, x1, 32, x2)

inst_31:
// rs1==x21, rs2==x24, rd==x23, rs2_h3_val == 4, rs2_h2_val == -8193, rs1_w0_val == -4097, rs1_w1_val == -65
// opcode: kmmawb ; op1:x21; op2:x24; dest:x23; op1val:0xffffffbfffffefff;  op2val:0x04dfff08000003
TEST_PKRR_OP(kmmawb, x23, x21, x24, 0x0000000000000000, 0xffffffbfffffefff, 0x04dfff08000003, x21, x1, 48, x2)

inst_32:
// rs2_h3_val == 2, rs2_h2_val == -16385, rs2_h0_val == -65, rs1_w1_val == -1025, rs1_w0_val == 16384
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00004000;  op2val:0x02bfff0040ffbf
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffbff00004000, 0x02bfff0040ffbf, x30, x1, 64, x2)

inst_33:
// rs2_h3_val == 1, rs1_w1_val == 262144
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000100;  op2val:0x01020000000003
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x04000000000100, 0x01020000000003, x30, x1, 80, x2)

inst_34:
// rs2_h3_val == 0, rs2_h2_val == 8192
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00000005;  op2val:0x002000fff7ffbf
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000005, 0x002000fff7ffbf, x30, x1, 96, x2)

inst_35:
// rs2_h3_val == -1, rs1_w1_val == -16385, rs1_w0_val == 16777216
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff01000000;  op2val:0xffffffbf0000fffd
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xffffbfff01000000, 0xffffffbf0000fffd, x30, x1, 112, x2)

inst_36:
// rs2_h2_val == 32767, rs1_w1_val == -4194305, rs2_h1_val == 16, rs1_w0_val == -129
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffffff7f;  op2val:0x1007fff0010c000
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xffbfffffffffff7f, 0x1007fff0010c000, x30, x1, 128, x2)

inst_37:
// rs2_h2_val == -4097, rs1_w0_val == 8192, rs1_w1_val == 1431655765, rs2_h1_val == -33
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500002000;  op2val:0x2000efffffdf3fff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x5555555500002000, 0x2000efffffdf3fff, x30, x1, 144, x2)

inst_38:
// rs1_w0_val == 2097152, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00200000;  op2val:0xaaaa10002000fff6
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00200000, 0xaaaa10002000fff6, x30, x1, 160, x2)

inst_39:
// rs1_w0_val == 1048576, rs2_h0_val == 16
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00100000;  op2val:0xffbfefff00100010
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xffffffdf00100000, 0xffbfefff00100010, x30, x1, 176, x2)

inst_40:
// rs1_w0_val == 524288, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00080000;  op2val:0xbfffff7f0020fffd
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfbffffff00080000, 0xbfffff7f0020fffd, x30, x1, 192, x2)

inst_41:
// rs1_w0_val == 131072, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x00000600020000;  op2val:0x800000020400efff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x00000600020000, 0x800000020400efff, x30, x1, 208, x2)

inst_42:
// rs1_w0_val == 65536, rs2_h1_val == 512, rs2_h2_val == -5, rs2_h0_val == -21846
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x08000000010000;  op2val:0x04fffb0200aaaa
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x08000000010000, 0x04fffb0200aaaa, x30, x1, 224, x2)

inst_43:
// rs1_w0_val == 32768, rs2_h0_val == 2048, rs1_w1_val == 536870912
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000008000;  op2val:0x8000000300050800
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x2000000000008000, 0x8000000300050800, x30, x1, 240, x2)

inst_44:
// rs1_w0_val == 2048, rs1_w1_val == 8388608, rs2_h1_val == -8193
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000800;  op2val:0xf7fffff8dfff0080
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x80000000000800, 0xf7fffff8dfff0080, x30, x1, 256, x2)

inst_45:
// rs1_w0_val == 1024, rs1_w1_val == -257
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000400;  op2val:0x2000dfffffdffff7
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000400, 0x2000dfffffdffff7, x30, x1, 272, x2)

inst_46:
// rs1_w0_val == 512, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000200;  op2val:0xfffcfeff00040006
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000200, 0xfffcfeff00040006, x30, x1, 288, x2)

inst_47:
// rs1_w0_val == 64, rs1_w1_val == -513
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000040;  op2val:0x4010000005fff9
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000040, 0x4010000005fff9, x30, x1, 304, x2)

inst_48:
// rs1_w0_val == 32, rs2_h1_val == 2
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000020;  op2val:0x1000fffa00020100
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x00020000000020, 0x1000fffa00020100, x30, x1, 320, x2)

inst_49:
// rs1_w0_val == -1, rs2_h2_val == 64, rs2_h0_val == 1
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffffffff;  op2val:0x200040c0000001
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x800000ffffffff, 0x200040c0000001, x30, x1, 336, x2)

inst_50:
// rs2_h2_val == -1025, rs2_h0_val == -1
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff83fffffff;  op2val:0x03fbff0002ffff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffff83fffffff, 0x03fbff0002ffff, x30, x1, 352, x2)

inst_51:
// rs2_h2_val == -513, rs1_w1_val == 128, rs2_h0_val == -129
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x000080feffffff;  op2val:0x10fdffffdfff7f
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x000080feffffff, 0x10fdffffdfff7f, x30, x1, 368, x2)

inst_52:
// rs2_h2_val == -9, rs1_w1_val == -2049
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00010000;  op2val:0x00fff7fff80020
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00010000, 0x00fff7fff80020, x30, x1, 384, x2)

inst_53:
// rs2_h2_val == -3, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500100000;  op2val:0xeffffffd0005ff7f
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x5555555500100000, 0xeffffffd0005ff7f, x30, x1, 400, x2)

inst_54:
// rs2_h2_val == -2, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00002000;  op2val:0x10fffefffd0006
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x3fffffff00002000, 0x10fffefffd0006, x30, x1, 416, x2)

inst_55:
// rs2_h2_val == -32768, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800100000;  op2val:0xfffb8000ff7f0006
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffff800100000, 0xfffb8000ff7f0006, x30, x1, 432, x2)

inst_56:
// rs2_h2_val == 16384, rs1_w1_val == 131072, rs2_h1_val == 4096
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x020000fffffffd;  op2val:0xc000400010000003
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x020000fffffffd, 0xc000400010000003, x30, x1, 448, x2)

inst_57:
// rs2_h2_val == 32, rs2_h0_val == 64
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x080000f7ffffff;  op2val:0xfbff002080000040
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x080000f7ffffff, 0xfbff002080000040, x30, x1, 464, x2)

inst_58:
// rs2_h2_val == 16, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fffffff6;  op2val:0xdfff00100004aaaa
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffff6fffffff6, 0xdfff00100004aaaa, x30, x1, 480, x2)

inst_59:
// rs2_h2_val == 4, rs1_w1_val == 2147483647, rs2_h0_val == -513, rs2_h1_val == 8
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00020000;  op2val:0xfffd00040008fdff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x7fffffff00020000, 0xfffd00040008fdff, x30, x1, 496, x2)

inst_60:
// rs2_h2_val == 0, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000400;  op2val:0xdfff00000005fff9
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000400, 0xdfff00000005fff9, x30, x1, 512, x2)

inst_61:
// rs2_h1_val == 21845, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffac0000000;  op2val:0x03aaaa55550200
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffffac0000000, 0x03aaaa55550200, x30, x1, 528, x2)

inst_62:
// rs2_h1_val == 32767, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffff9;  op2val:0xfbffdfff7fffdfff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffff9, 0xfbffdfff7fffdfff, x30, x1, 544, x2)

inst_63:
// rs2_h1_val == -16385, rs1_w0_val == -2097153, rs1_w1_val == -8388609, rs2_h0_val == 4
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffdfffff;  op2val:0xefff0009bfff0004
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xff7fffffffdfffff, 0xefff0009bfff0004, x30, x1, 560, x2)

inst_64:
// rs2_h1_val == -4097, rs1_w0_val == -131073
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffdffff;  op2val:0xfdff0200efff0020
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x4000000fffdffff, 0xfdff0200efff0020, x30, x1, 576, x2)

inst_65:
// rs2_h1_val == -2049, rs1_w0_val == -17, rs2_h0_val == -2
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x4000000ffffffef;  op2val:0xfffefffdf7fffffe
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x4000000ffffffef, 0xfffefffdf7fffffe, x30, x1, 592, x2)

inst_66:
// rs2_h1_val == -513, rs1_w0_val == 536870912
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x00000520000000;  op2val:0xfbff5555fdff0001
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x00000520000000, 0xfbff5555fdff0001, x30, x1, 608, x2)

inst_67:
// rs2_h1_val == -65, rs1_w0_val == -262145
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcfffbffff;  op2val:0xfffb0040ffbf0800
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffffcfffbffff, 0xfffb0040ffbf0800, x30, x1, 624, x2)

inst_68:
// rs2_h1_val == -2, rs2_h0_val == -5
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe80000000;  op2val:0xfffc0004fffefffb
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffffe80000000, 0xfffc0004fffefffb, x30, x1, 640, x2)

inst_69:
// rs2_h0_val == 8192, rs1_w1_val == -4097
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00020000;  op2val:0xc000020010002000
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xffffefff00020000, 0xc000020010002000, x30, x1, 656, x2)

inst_70:
// rs2_h0_val == 4096, rs1_w0_val == 1073741824
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x00020040000000;  op2val:0xc000efff00021000
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x00020040000000, 0xc000efff00021000, x30, x1, 672, x2)

inst_71:
// rs2_h0_val == 8, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9fffffffa;  op2val:0x03ffef00070008
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffff9fffffffa, 0x03ffef00070008, x30, x1, 688, x2)

inst_72:
// rs2_h0_val == 0, rs1_w1_val == -33554433
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000006;  op2val:0x2003ffffffc0000
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000006, 0x2003ffffffc0000, x30, x1, 704, x2)

inst_73:
// rs1_w1_val == -1431655766, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00040000;  op2val:0x100fbff00103fff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00040000, 0x100fbff00103fff, x30, x1, 720, x2)

inst_74:
// rs1_w1_val == -268435457, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffffffff;  op2val:0xfeffff7f7fff0100
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xefffffffffffffff, 0xfeffff7f7fff0100, x30, x1, 736, x2)

inst_75:
// rs1_w1_val == -16777217, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000002;  op2val:0xbffffffd7fffffbf
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000002, 0xbffffffd7fffffbf, x30, x1, 752, x2)

inst_76:
// rs1_w1_val == -1048577, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffffefff;  op2val:0x4000dffff7ff0005
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xffefffffffffefff, 0x4000dffff7ff0005, x30, x1, 768, x2)

inst_77:
// rs1_w1_val == -262145, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff55555555;  op2val:0x050800ffff2000
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffbffff55555555, 0x050800ffff2000, x30, x1, 784, x2)

inst_78:
// rs1_w1_val == -65537, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000004;  op2val:0xff7ffff700070100
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000004, 0xff7ffff700070100, x30, x1, 800, x2)

inst_79:
// rs1_w1_val == -8193, rs1_w0_val == 2147483647
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff7fffffff;  op2val:0x2000aaaa00200100
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xffffdfff7fffffff, 0x2000aaaa00200100, x30, x1, 816, x2)

inst_80:
// rs1_w1_val == -129, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffffffa;  op2val:0xfff8ffdffbff0080
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffffa, 0xfff8ffdffbff0080, x30, x1, 832, x2)

inst_81:
// rs1_w1_val == -9, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff701000000;  op2val:0xfdfffefffff90200
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffff701000000, 0xfdfffefffff90200, x30, x1, 848, x2)

inst_82:
// rs1_w1_val == -3, rs1_w0_val == -67108865
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfbffffff;  op2val:0xfff8fffafffa3fff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffffdfbffffff, 0xfff8fffafffa3fff, x30, x1, 864, x2)

inst_83:
// rs1_w1_val == -2147483648, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fbffffff;  op2val:0x400fffef7ff0004
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x80000000fbffffff, 0x400fffef7ff0004, x30, x1, 880, x2)

inst_84:
// rs1_w1_val == 268435456, rs2_h1_val == 256
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffffa;  op2val:0xffefefff01003fff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x10000000fffffffa, 0xffefefff01003fff, x30, x1, 896, x2)

inst_85:
// rs1_w1_val == 2097152, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffbffff;  op2val:0x200efff0005aaaa
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x200000fffbffff, 0x200efff0005aaaa, x30, x1, 912, x2)

inst_86:
// rs1_w1_val == 1048576, rs2_h1_val == 128, rs1_w0_val == -524289
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x100000fff7ffff;  op2val:0xffeffff70080fff8
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x100000fff7ffff, 0xffeffff70080fff8, x30, x1, 928, x2)

inst_87:
// rs1_w1_val == 65536, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffffffef;  op2val:0x00fff80080ffff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x010000ffffffef, 0x00fff80080ffff, x30, x1, 944, x2)

inst_88:
// rs1_w1_val == 8192, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x002000fff7ffff;  op2val:0xffef0010ffffefff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x002000fff7ffff, 0xffef0010ffffefff, x30, x1, 960, x2)

inst_89:
// rs1_w1_val == 4096, rs1_w0_val == -65537
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffeffff;  op2val:0xffef00038000fdff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x001000fffeffff, 0xffef00038000fdff, x30, x1, 976, x2)

inst_90:
// rs1_w1_val == 1024, rs1_w0_val == 67108864
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x00040004000000;  op2val:0x10000010ffbffff6
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x00040004000000, 0x10000010ffbffff6, x30, x1, 992, x2)

inst_91:
// rs1_w1_val == 256, rs1_w0_val == -33
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x000100ffffffdf;  op2val:0xdfff0004fff93fff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x000100ffffffdf, 0xdfff0004fff93fff, x30, x1, 1008, x2)

inst_92:
// rs1_w1_val == 64, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x000040bfffffff;  op2val:0x03fdff0010feff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x000040bfffffff, 0x03fdff0010feff, x30, x1, 1024, x2)

inst_93:
// rs1_w1_val == 32, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x00002055555555;  op2val:0xffeffdff55550080
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x00002055555555, 0xffeffdff55550080, x30, x1, 1040, x2)

inst_94:
// rs1_w1_val == 8, rs2_h0_val == -1025, rs2_h1_val == 16384
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000006;  op2val:0x8000fffe4000fbff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x00000800000006, 0x8000fffe4000fbff, x30, x1, 1056, x2)

inst_95:
// rs1_w1_val == 4, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x000004fffffff6;  op2val:0xdfff0008fdff0001
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x000004fffffff6, 0xdfff0008fdff0001, x30, x1, 1072, x2)

inst_96:
// rs1_w1_val == 2, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffdffff;  op2val:0xffdffffe00000000
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x000002fffdffff, 0xffdffffe00000000, x30, x1, 1088, x2)

inst_97:
// rs1_w1_val == 1, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffffff6;  op2val:0x07ff7ffff8aaaa
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x000001fffffff6, 0x07ff7ffff8aaaa, x30, x1, 1104, x2)

inst_98:
// rs1_w1_val == -1, rs1_w0_val == -257
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffeff;  op2val:0x55553fffffef0000
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffeff, 0x55553fffffef0000, x30, x1, 1120, x2)

inst_99:
// rs1_w0_val == -1431655766, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffaaaaaaaa;  op2val:0xf7ffffbf0100fdff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffeffaaaaaaaa, 0xf7ffffbf0100fdff, x30, x1, 1136, x2)

inst_100:
// rs1_w0_val == -536870913, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffdfffffff;  op2val:0x20aaaafff80040
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xffffefffdfffffff, 0x20aaaafff80040, x30, x1, 1152, x2)

inst_101:
// rs1_w0_val == 268435456, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff10000000;  op2val:0x10fff9fbffffbf
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xefffffff10000000, 0x10fff9fbffffbf, x30, x1, 1168, x2)

inst_102:
// rs1_w0_val == -268435457, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcefffffff;  op2val:0x5555fff600100005
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffffcefffffff, 0x5555fff600100005, x30, x1, 1184, x2)

inst_103:
// rs2_h1_val == 1, rs2_h0_val == 21845
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x0001007fffffff;  op2val:0x8000001000015555
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x0001007fffffff, 0x8000001000015555, x30, x1, 1200, x2)

inst_104:
// rs1_w0_val == -2049, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffffff7ff;  op2val:0x083fff55553fff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xffffdffffffff7ff, 0x083fff55553fff, x30, x1, 1216, x2)

inst_105:
// rs1_w0_val == -1025, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffffbff;  op2val:0xf7ff00080000fff7
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x002000fffffbff, 0xf7ff00080000fff7, x30, x1, 1232, x2)

inst_106:
// rs1_w0_val == -513, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffffdff;  op2val:0x200200fffffdff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xffffffbffffffdff, 0x200200fffffdff, x30, x1, 1248, x2)

inst_107:
// rs2_h0_val == 32767, rs1_w0_val == 134217728
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x00800008000000;  op2val:0x4000080000047fff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x00800008000000, 0x4000080000047fff, x30, x1, 1264, x2)

inst_108:
// rs2_h0_val == -16385, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000400;  op2val:0x1000fff70800bfff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000400, 0x1000fff70800bfff, x30, x1, 1280, x2)

inst_109:
// rs2_h0_val == -2049, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffeffffff;  op2val:0xeffffffe0005f7ff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xffffffeffeffffff, 0xeffffffe0005f7ff, x30, x1, 1296, x2)

inst_110:
// rs2_h0_val == -33, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdefffffff;  op2val:0xefff7fff0001ffdf
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffffdefffffff, 0xefff7fff0001ffdf, x30, x1, 1312, x2)

inst_111:
// rs1_w0_val == 33554432, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa02000000;  op2val:0xbfff00070005bfff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfffffffa02000000, 0xbfff00070005bfff, x30, x1, 1328, x2)

inst_112:
// rs1_w0_val == -2, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffffffe;  op2val:0xfdffff7ffffef7ff
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xeffffffffffffffe, 0xfdffff7ffffef7ff, x30, x1, 1344, x2)

inst_113:
// rs1_w0_val == -8388609, 
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ff7fffff;  op2val:0xf7fffeffc0000020
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x20000000ff7fffff, 0xf7fffeffc0000020, x30, x1, 1360, x2)

inst_114:
// rs2_h3_val == 21845, rs2_h1_val == 4, rs1_w0_val == -8193, rs2_h0_val == 512, rs1_w1_val == 67108864
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x4000000ffffdfff;  op2val:0x5555008000040200
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x4000000ffffdfff, 0x5555008000040200, x30, x1, 1376, x2)

inst_115:
// rs2_h3_val == 32767, rs2_h1_val == -5, rs2_h2_val == 1024, rs1_w0_val == 128, rs1_w1_val == -524289
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000080;  op2val:0x7fff0400fffbc000
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000080, 0x7fff0400fffbc000, x30, x1, 1392, x2)

inst_116:
// rs2_h3_val == -2049, rs1_w0_val == -16385, rs2_h0_val == 2, rs2_h1_val == -1025, rs1_w1_val == 1073741824, rs2_h2_val == 256
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffffbfff;  op2val:0xf7ff0100fbff0002
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0x40000000ffffbfff, 0xf7ff0100fbff0002, x30, x1, 1408, x2)

inst_117:
// rs2_h3_val == 2048, rs2_h1_val == -257, rs2_h2_val == -2049, rs1_w0_val == -5
// opcode: kmmawb ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffffb;  op2val:0x800f7fffefffff6
TEST_PKRR_OP(kmmawb, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffffb, 0x800f7fffefffff6, x30, x1, 1424, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x12_0:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 180*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
