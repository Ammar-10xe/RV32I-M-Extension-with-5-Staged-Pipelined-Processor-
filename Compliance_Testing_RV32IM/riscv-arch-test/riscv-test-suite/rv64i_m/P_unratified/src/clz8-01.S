
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the clz8 instruction of the RISC-V RV64PZicsr extension for the clz8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",clz8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1==x16, rd==x18, rs1_b0_val == 0, rs1_b5_val == 223, rs1_b4_val == 254, rs1_b2_val == 128
// opcode: clz8 ; op1:x16; dest:x18; op1val:0x60cdffe07801200;
TEST_RD_OP( clz8, x18, x16, 0x0000000000000000, 0x60cdffe07801200, x3, 0, x21)

inst_1:
// rs1==x0, rd==x1, rs1_b7_val == 170, rs1_b2_val == 85, rs1_b0_val == 85, rs1_b3_val == 170, rs1_b5_val == 32, rs1_b1_val == 127
// opcode: clz8 ; op1:x0; dest:x1; op1val:0xaa092011aa557f55;
TEST_RD_OP( clz8, x1, x0, 0x0000000000000000, 0xaa092011aa557f55, x3, 8, x21)

inst_2:
// rs1==x12, rd==x8, rs1_b7_val == 85, rs1_b6_val == 32, rs1_b4_val == 64, rs1_b1_val == 191, rs1_b5_val == 255, rs1_b3_val == 64, rs1_b0_val == 2
// opcode: clz8 ; op1:x12; dest:x8; op1val:0x5520ff404003bf02;
TEST_RD_OP( clz8, x8, x12, 0x0000000000000000, 0x5520ff404003bf02, x3, 16, x21)

inst_3:
// rs1==x28, rd==x13, rs1_b7_val == 127, rs1_b2_val == 1, rs1_b5_val == 16, rs1_b1_val == 8
// opcode: clz8 ; op1:x28; dest:x13; op1val:0x7f13100c05010800;
TEST_RD_OP( clz8, x13, x28, 0x0000000000000000, 0x7f13100c05010800, x3, 24, x21)

inst_4:
// rs1==x2, rd==x6, rs1_b7_val == 191, rs1_b3_val == 4, rs1_b0_val == 247
// opcode: clz8 ; op1:x2; dest:x6; op1val:0xbf090f03040a07f7;
TEST_RD_OP( clz8, x6, x2, 0x0000000000000000, 0xbf090f03040a07f7, x3, 32, x21)

inst_5:
// rs1==x8, rd==x19, rs1_b7_val == 223, rs1_b6_val == 16, rs1_b0_val == 1
// opcode: clz8 ; op1:x8; dest:x19; op1val:0xdf10060a0b050501;
TEST_RD_OP( clz8, x19, x8, 0x0000000000000000, 0xdf10060a0b050501, x3, 40, x21)

inst_6:
// rs1==x5, rd==x14, rs1_b7_val == 239, rs1_b1_val == 254, rs1_b6_val == 251, rs1_b2_val == 127
// opcode: clz8 ; op1:x5; dest:x14; op1val:0xeffb100e057ffe07;
TEST_RD_OP( clz8, x14, x5, 0x0000000000000000, 0xeffb100e057ffe07, x3, 48, x21)

inst_7:
// rs1==x18, rd==x17, rs1_b7_val == 247, rs1_b5_val == 191
// opcode: clz8 ; op1:x18; dest:x17; op1val:0xf707bf0611130503;
TEST_RD_OP( clz8, x17, x18, 0x0000000000000000, 0xf707bf0611130503, x3, 56, x21)

inst_8:
// rs1==x9, rd==x27, rs1_b7_val == 251, 
// opcode: clz8 ; op1:x9; dest:x27; op1val:0xfb20df0f0f090309;
TEST_RD_OP( clz8, x27, x9, 0x0000000000000000, 0xfb20df0f0f090309, x3, 64, x21)

inst_9:
// rs1==x7, rd==x29, rs1_b7_val == 253, rs1_b2_val == 0, rs1_b0_val == 32, rs1_b6_val == 247, rs1_b4_val == 253
// opcode: clz8 ; op1:x7; dest:x29; op1val:0xfdf70dfd04000820;
TEST_RD_OP( clz8, x29, x7, 0x0000000000000000, 0xfdf70dfd04000820, x3, 72, x21)

inst_10:
// rs1==x25, rd==x23, rs1_b7_val == 254, rs1_b4_val == 191, rs1_b2_val == 170, rs1_b5_val == 170, rs1_b3_val == 127, rs1_b0_val == 64
// opcode: clz8 ; op1:x25; dest:x23; op1val:0xfe12aabf7faafe40;
TEST_RD_OP( clz8, x23, x25, 0x0000000000000000, 0xfe12aabf7faafe40, x3, 80, x21)

inst_11:
// rs1==x24, rd==x11, rs1_b7_val == 128, rs1_b3_val == 255, rs1_b1_val == 128, rs1_b4_val == 16, rs1_b2_val == 239, rs1_b5_val == 64
// opcode: clz8 ; op1:x24; dest:x11; op1val:0x80134010ffef800d;
TEST_RD_OP( clz8, x11, x24, 0x0000000000000000, 0x80134010ffef800d, x3, 88, x21)

inst_12:
// rs1==x23, rd==x10, rs1_b7_val == 64, rs1_b1_val == 64, rs1_b4_val == 32, rs1_b3_val == 247, rs1_b0_val == 128, rs1_b5_val == 0
// opcode: clz8 ; op1:x23; dest:x10; op1val:0x40f70020f7124080;
TEST_RD_OP( clz8, x10, x23, 0x0000000000000000, 0x40f70020f7124080, x3, 96, x21)

inst_13:
// rs1==x13, rd==x15, rs1_b7_val == 32, rs1_b6_val == 239, rs1_b5_val == 85, rs1_b3_val == 32, rs1_b1_val == 16
// opcode: clz8 ; op1:x13; dest:x15; op1val:0x20ef55bf2055100d;
TEST_RD_OP( clz8, x15, x13, 0x0000000000000000, 0x20ef55bf2055100d, x3, 104, x21)

inst_14:
// rs1==x29, rd==x26, rs1_b7_val == 16, rs1_b2_val == 247, rs1_b0_val == 253, rs1_b3_val == 8, rs1_b6_val == 127
// opcode: clz8 ; op1:x29; dest:x26; op1val:0x107f120d08f711fd;
TEST_RD_OP( clz8, x26, x29, 0x0000000000000000, 0x107f120d08f711fd, x3, 112, x21)

inst_15:
// rs1==x26, rd==x22, rs1_b7_val == 8, rs1_b1_val == 4, rs1_b0_val == 255
// opcode: clz8 ; op1:x26; dest:x22; op1val:0x80f0c0c0e0d04ff;
TEST_RD_OP( clz8, x22, x26, 0x0000000000000000, 0x80f0c0c0e0d04ff, x3, 120, x21)

inst_16:
// rs1==x17, rd==x4, rs1_b7_val == 4, rs1_b1_val == 251, rs1_b5_val == 254, rs1_b3_val == 191, rs1_b6_val == 1
// opcode: clz8 ; op1:x17; dest:x4; op1val:0x401fe0ebf0ffb0d;
TEST_RD_OP( clz8, x4, x17, 0x0000000000000000, 0x401fe0ebf0ffb0d, x3, 128, x21)

inst_17:
// rs1==x14, rd==x20, rs1_b7_val == 2, rs1_b3_val == 2, rs1_b4_val == 247, rs1_b5_val == 239, rs1_b0_val == 191, rs1_b1_val == 247
// opcode: clz8 ; op1:x14; dest:x20; op1val:0x212eff70201f7bf;
TEST_RD_OP( clz8, x20, x14, 0x0000000000000000, 0x212eff70201f7bf, x3, 136, x21)

inst_18:
// rs1==x4, rd==x12, rs1_b7_val == 1, rs1_b2_val == 223, rs1_b4_val == 8, rs1_b6_val == 128
// opcode: clz8 ; op1:x4; dest:x12; op1val:0x180200813df0709;
TEST_RD_OP( clz8, x12, x4, 0x0000000000000000, 0x180200813df0709, x3, 144, x8)

inst_19:
// rs1==x27, rd==x25, rs1_b7_val == 255, rs1_b6_val == 64, rs1_b5_val == 4, rs1_b4_val == 251, rs1_b2_val == 253
// opcode: clz8 ; op1:x27; dest:x25; op1val:0xff4004fb7ffdfb80;
TEST_RD_OP( clz8, x25, x27, 0x0000000000000000, 0xff4004fb7ffdfb80, x3, 152, x8)

inst_20:
// rs1==x20, rd==x9, rs1_b7_val == 0, rs1_b3_val == 16, rs1_b4_val == 127
// opcode: clz8 ; op1:x20; dest:x9; op1val:0x03007f100d800c;
TEST_RD_OP( clz8, x9, x20, 0x0000000000000000, 0x03007f100d800c, x3, 160, x8)

inst_21:
// rs1==x31, rd==x21, rs1_b6_val == 170, rs1_b2_val == 254
// opcode: clz8 ; op1:x31; dest:x21; op1val:0x40aa09fe7ffe1120;
TEST_RD_OP( clz8, x21, x31, 0x0000000000000000, 0x40aa09fe7ffe1120, x3, 168, x8)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_22:
// rs1==x30, rd==x0, rs1_b6_val == 85, rs1_b2_val == 64
// opcode: clz8 ; op1:x30; dest:x0; op1val:0x550cfb104009bf;
TEST_RD_OP( clz8, x0, x30, 0x0000000000000000, 0x550cfb104009bf, x4, 0, x8)

inst_23:
// rs1==x11, rd==x28, rs1_b6_val == 191, rs1_b1_val == 2, rs1_b3_val == 0, rs1_b4_val == 1
// opcode: clz8 ; op1:x11; dest:x28; op1val:0x5bf0f0100fd0209;
TEST_RD_OP( clz8, x28, x11, 0x0000000000000000, 0x5bf0f0100fd0209, x4, 8, x8)

inst_24:
// rs1==x1, rd==x16, rs1_b1_val == 253, 
// opcode: clz8 ; op1:x1; dest:x16; op1val:0x380550d000dfd02;
TEST_RD_OP( clz8, x16, x1, 0x0000000000000000, 0x380550d000dfd02, x4, 16, x8)

inst_25:
// rs1==x19, rd==x3, rs1_b1_val == 32, rs1_b3_val == 251, rs1_b2_val == 2
// opcode: clz8 ; op1:x19; dest:x3; op1val:0x120509fb022055;
TEST_RD_OP( clz8, x3, x19, 0x0000000000000000, 0x120509fb022055, x4, 24, x8)

inst_26:
// rs1==x6, rd==x30, rs1_b1_val == 1, rs1_b2_val == 8, rs1_b0_val == 127
// opcode: clz8 ; op1:x6; dest:x30; op1val:0xf713aa10bf08017f;
TEST_RD_OP( clz8, x30, x6, 0x0000000000000000, 0xf713aa10bf08017f, x4, 32, x8)

inst_27:
// rs1==x15, rd==x24, rs1_b1_val == 255, rs1_b5_val == 2
// opcode: clz8 ; op1:x15; dest:x24; op1val:0x809020f0703ff07;
TEST_RD_OP( clz8, x24, x15, 0x0000000000000000, 0x809020f0703ff07, x4, 40, x8)

inst_28:
// rs1==x10, rd==x5, rs1_b1_val == 0, 
// opcode: clz8 ; op1:x10; dest:x5; op1val:0xfd100607f7f7000f;
TEST_RD_OP( clz8, x5, x10, 0x0000000000000000, 0xfd100607f7f7000f, x4, 48, x8)

inst_29:
// rs1==x21, rd==x2, rs1_b0_val == 170, rs1_b2_val == 16
// opcode: clz8 ; op1:x21; dest:x2; op1val:0xaabf0e0a091013aa;
TEST_RD_OP( clz8, x2, x21, 0x0000000000000000, 0xaabf0e0a091013aa, x4, 56, x8)

inst_30:
// rs1==x3, rd==x31, rs1_b0_val == 223, rs1_b4_val == 128
// opcode: clz8 ; op1:x3; dest:x31; op1val:0xd0daa800aaa80df;
TEST_RD_OP( clz8, x31, x3, 0x0000000000000000, 0xd0daa800aaa80df, x4, 64, x8)

inst_31:
// rs1==x22, rd==x7, rs1_b0_val == 239, rs1_b6_val == 0, rs1_b5_val == 251, rs1_b3_val == 85
// opcode: clz8 ; op1:x22; dest:x7; op1val:0xdf00fb0e550120ef;
TEST_RD_OP( clz8, x7, x22, 0x0000000000000000, 0xdf00fb0e550120ef, x4, 72, x8)

inst_32:
// rs1_b0_val == 251, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0x80b10fe130cf7fb;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0x80b10fe130cf7fb, x4, 80, x8)

inst_33:
// rs1_b0_val == 254, rs1_b2_val == 4, rs1_b1_val == 239
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xf8009060a04effe;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0xf8009060a04effe, x4, 88, x8)

inst_34:
// rs1_b6_val == 223, rs1_b1_val == 170, rs1_b4_val == 170, rs1_b3_val == 239
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xadf55aaefdfaa07;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0xadf55aaefdfaa07, x4, 96, x8)

inst_35:
// rs1_b0_val == 16, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xef5540fe0d55aa10;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0xef5540fe0d55aa10, x4, 104, x8)

inst_36:
// rs1_b0_val == 8, rs1_b5_val == 253
// opcode: clz8 ; op1:x30; dest:x31; op1val:0x120afd80110e0108;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0x120afd80110e0108, x4, 112, x8)

inst_37:
// rs1_b4_val == 223, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xefefefdf0c1040bf;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0xefefefdf0c1040bf, x4, 120, x8)

inst_38:
// rs1_b4_val == 239, rs1_b3_val == 128, rs1_b6_val == 2
// opcode: clz8 ; op1:x30; dest:x31; op1val:0x4002ffef800c8040;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0x4002ffef800c8040, x4, 128, x8)

inst_39:
// rs1_b4_val == 4, rs1_b1_val == 223
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xd20fe04fb09df20;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0xd20fe04fb09df20, x4, 136, x8)

inst_40:
// rs1_b4_val == 2, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xd0eef02aa04fefe;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0xd0eef02aa04fefe, x4, 144, x8)

inst_41:
// rs1_b4_val == 255, rs1_b6_val == 8
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xa080dff7f098008;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0xa080dff7f098008, x4, 152, x8)

inst_42:
// rs1_b4_val == 0, rs1_b1_val == 85, rs1_b6_val == 4
// opcode: clz8 ; op1:x30; dest:x31; op1val:0x10440000cf7550d;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0x10440000cf7550d, x4, 160, x8)

inst_43:
// rs1_b3_val == 223, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0x090712df040307;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0x090712df040307, x4, 168, x8)

inst_44:
// rs1_b5_val == 8, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xbf708108001090b;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0xbf708108001090b, x4, 176, x8)

inst_45:
// rs1_b3_val == 253, rs1_b6_val == 255
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xbfff12fefd010405;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0xbfff12fefd010405, x4, 184, x8)

inst_46:
// rs1_b3_val == 1, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xa10407f010712fe;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0xa10407f010712fe, x4, 192, x8)

inst_47:
// rs1_b3_val == 254, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0x80015580fe050b06;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0x80015580fe050b06, x4, 200, x8)

inst_48:
// rs1_b2_val == 191, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xa070d0820bffd06;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0xa070d0820bffd06, x4, 208, x8)

inst_49:
// rs1_b5_val == 127, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xdf7f7f11df05070f;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0xdf7f7f11df05070f, x4, 216, x8)

inst_50:
// rs1_b2_val == 251, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xfeaafe0b00fb1200;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0xfeaafe0b00fb1200, x4, 224, x8)

inst_51:
// rs1_b5_val == 247, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xa07f70a0b0c01f7;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0xa07f70a0b0c01f7, x4, 232, x8)

inst_52:
// rs1_b2_val == 32, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0x30a001220205580;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0x30a001220205580, x4, 240, x8)

inst_53:
// rs1_b5_val == 128, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0x5208005bff7ff10;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0x5208005bff7ff10, x4, 248, x8)

inst_54:
// rs1_b2_val == 255, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0x12fb081102ff067f;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0x12fb081102ff067f, x4, 256, x8)

inst_55:
// rs1_b6_val == 254, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0x3fe114006bf0d40;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0x3fe114006bf0d40, x4, 264, x8)

inst_56:
// rs1_b5_val == 1, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0x20ef01aa800d070f;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0x20ef01aa800d070f, x4, 272, x8)

inst_57:
// rs1_b0_val == 4, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xef09fffd01200904;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0xef09fffd01200904, x4, 280, x8)

inst_58:
// rs1_b6_val == 253, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xfefd13bf07064004;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0xfefd13bf07064004, x4, 288, x8)

inst_59:
// rs1_b4_val == 85, 
// opcode: clz8 ; op1:x30; dest:x31; op1val:0x7ffffb55fdf7aa02;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0x7ffffb55fdf7aa02, x4, 296, x8)

inst_60:
// rs1_b7_val == 170, rs1_b2_val == 85, rs1_b0_val == 85, rs1_b3_val == 170, rs1_b5_val == 32, rs1_b1_val == 127
// opcode: clz8 ; op1:x30; dest:x31; op1val:0xaa092011aa557f55;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0xaa092011aa557f55, x4, 304, x8)

inst_61:
// rs1_b6_val == 85, rs1_b2_val == 64
// opcode: clz8 ; op1:x30; dest:x31; op1val:0x550cfb104009bf;
TEST_RD_OP( clz8, x31, x30, 0x0000000000000000, 0x550cfb104009bf, x4, 312, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 40*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
