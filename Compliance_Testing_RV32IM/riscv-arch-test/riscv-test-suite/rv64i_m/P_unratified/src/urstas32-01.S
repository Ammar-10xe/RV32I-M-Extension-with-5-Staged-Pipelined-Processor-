
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the urstas32 instruction of the RISC-V RV64PZicsr extension for the urstas32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",urstas32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x12, rs2==x24, rd==x12, rs1_w0_val == 0, rs2_w1_val == 0, rs1_w1_val == 536870912, rs2_w0_val == 4294966271
// opcode: urstas32 ; op1:x12; op2:x24; dest:x12; op1val:0x2000000000000000;  op2val:0x000000fffffbff
TEST_RR_OP(urstas32, x12, x12, x24, 0x0000000000000000, 0x2000000000000000, 0x000000fffffbff, x6, 0, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x4, rs2==x10, rd==x30, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 4294965247, rs1_w1_val == 32, rs2_w0_val == 4294967294, rs2_w1_val == 4294966271
// opcode: urstas32 ; op1:x4; op2:x10; dest:x30; op1val:0x000020fffff7ff;  op2val:0xfffffbfffffffffe
TEST_RR_OP(urstas32, x30, x4, x10, 0x0000000000000000, 0x000020fffff7ff, 0xfffffbfffffffffe, x6, 8, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x23, rs2==x23, rd==x19, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 4096, rs2_w1_val == 4096, rs2_w0_val == 4294967263, rs1_w0_val == 4294959103
// opcode: urstas32 ; op1:x23; op2:x23; dest:x19; op1val:0x001000ffffdfff;  op2val:0x001000ffffffdf
TEST_RR_OP(urstas32, x19, x23, x23, 0x0000000000000000, 0x001000ffffdfff, 0x001000ffffffdf, x6, 16, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 128, rs2_w0_val == 128, rs1_w1_val == 4294967294
// opcode: urstas32 ; op1:x1; op2:x1; dest:x1; op1val:0xfffffffe00000080;  op2val:0x00000600000080
TEST_RR_OP(urstas32, x1, x1, x1, 0x0000000000000000, 0xfffffffe00000080, 0x00000600000080, x6, 24, x8)

inst_4:
// rs2 == rd != rs1, rs1==x15, rs2==x17, rd==x17, rs2_w1_val == 2863311530, rs2_w0_val == 65536, rs1_w0_val == 4194304
// opcode: urstas32 ; op1:x15; op2:x17; dest:x17; op1val:0x00000f00400000;  op2val:0xaaaaaaaa00010000
TEST_RR_OP(urstas32, x17, x15, x17, 0x0000000000000000, 0x00000f00400000, 0xaaaaaaaa00010000, x6, 32, x8)

inst_5:
// rs1==x2, rs2==x26, rd==x25, rs2_w1_val == 1431655765, rs1_w0_val == 1, rs1_w1_val == 4, rs2_w0_val == 536870912
// opcode: urstas32 ; op1:x2; op2:x26; dest:x25; op1val:0x00000400000001;  op2val:0x5555555520000000
TEST_RR_OP(urstas32, x25, x2, x26, 0x0000000000000000, 0x00000400000001, 0x5555555520000000, x6, 40, x8)

inst_6:
// rs1==x26, rs2==x13, rd==x27, rs2_w1_val == 2147483647, rs1_w1_val == 4294967263, rs1_w0_val == 65536, rs2_w0_val == 0
// opcode: urstas32 ; op1:x26; op2:x13; dest:x27; op1val:0xffffffdf00010000;  op2val:0x7fffffff00000000
TEST_RR_OP(urstas32, x27, x26, x13, 0x0000000000000000, 0xffffffdf00010000, 0x7fffffff00000000, x6, 48, x8)

inst_7:
// rs1==x25, rs2==x15, rd==x7, rs2_w1_val == 3221225471, rs2_w0_val == 4, rs1_w0_val == 16777216, rs1_w1_val == 4227858431
// opcode: urstas32 ; op1:x25; op2:x15; dest:x7; op1val:0xfbffffff01000000;  op2val:0xbfffffff00000004
TEST_RR_OP(urstas32, x7, x25, x15, 0x0000000000000000, 0xfbffffff01000000, 0xbfffffff00000004, x6, 56, x8)

inst_8:
// rs1==x24, rs2==x25, rd==x26, rs2_w1_val == 3758096383, rs2_w0_val == 4278190079, rs1_w1_val == 2147483648
// opcode: urstas32 ; op1:x24; op2:x25; dest:x26; op1val:0x800000000000000b;  op2val:0xdffffffffeffffff
TEST_RR_OP(urstas32, x26, x24, x25, 0x0000000000000000, 0x800000000000000b, 0xdffffffffeffffff, x6, 64, x8)

inst_9:
// rs1==x29, rs2==x9, rd==x0, rs2_w1_val == 4026531839, rs1_w0_val == 512, rs2_w0_val == 64
// opcode: urstas32 ; op1:x29; op2:x9; dest:x0; op1val:0x8000000000000200;  op2val:0xefffffff00000040
TEST_RR_OP(urstas32, x0, x29, x9, 0x0000000000000000, 0x8000000000000200, 0xefffffff00000040, x6, 72, x8)

inst_10:
// rs1==x3, rs2==x29, rd==x21, rs2_w1_val == 4160749567, rs1_w0_val == 32, rs1_w1_val == 67108864, rs2_w0_val == 32
// opcode: urstas32 ; op1:x3; op2:x29; dest:x21; op1val:0x400000000000020;  op2val:0xf7ffffff00000020
TEST_RR_OP(urstas32, x21, x3, x29, 0x0000000000000000, 0x400000000000020, 0xf7ffffff00000020, x6, 80, x8)

inst_11:
// rs1==x10, rs2==x4, rd==x2, rs2_w1_val == 4227858431, rs1_w1_val == 16, rs2_w0_val == 16777216, rs1_w0_val == 4294901759
// opcode: urstas32 ; op1:x10; op2:x4; dest:x2; op1val:0x000010fffeffff;  op2val:0xfbffffff01000000
TEST_RR_OP(urstas32, x2, x10, x4, 0x0000000000000000, 0x000010fffeffff, 0xfbffffff01000000, x6, 88, x8)

inst_12:
// rs1==x17, rs2==x5, rd==x14, rs2_w1_val == 4261412863, rs1_w0_val == 4278190079, rs1_w1_val == 262144, rs2_w0_val == 16
// opcode: urstas32 ; op1:x17; op2:x5; dest:x14; op1val:0x040000feffffff;  op2val:0xfdffffff00000010
TEST_RR_OP(urstas32, x14, x17, x5, 0x0000000000000000, 0x040000feffffff, 0xfdffffff00000010, x6, 96, x8)

inst_13:
// rs1==x5, rs2==x31, rd==x3, rs2_w1_val == 4278190079, rs1_w0_val == 4294963199
// opcode: urstas32 ; op1:x5; op2:x31; dest:x3; op1val:0x000003ffffefff;  op2val:0xfeffffff00000013
TEST_RR_OP(urstas32, x3, x5, x31, 0x0000000000000000, 0x000003ffffefff, 0xfeffffff00000013, x6, 104, x8)

inst_14:
// rs1==x30, rs2==x28, rd==x4, rs2_w1_val == 4286578687, rs1_w1_val == 16384, rs2_w0_val == 2863311530, rs1_w0_val == 64
// opcode: urstas32 ; op1:x30; op2:x28; dest:x4; op1val:0x00400000000040;  op2val:0xff7fffffaaaaaaaa
TEST_RR_OP(urstas32, x4, x30, x28, 0x0000000000000000, 0x00400000000040, 0xff7fffffaaaaaaaa, x6, 112, x8)

inst_15:
// rs1==x16, rs2==x22, rd==x13, rs2_w1_val == 4290772991, rs2_w0_val == 8388608
// opcode: urstas32 ; op1:x16; op2:x22; dest:x13; op1val:0x00000e00000080;  op2val:0xffbfffff00800000
TEST_RR_OP(urstas32, x13, x16, x22, 0x0000000000000000, 0x00000e00000080, 0xffbfffff00800000, x6, 120, x8)

inst_16:
// rs1==x13, rs2==x11, rd==x28, rs2_w1_val == 4292870143, rs1_w0_val == 1431655765, rs1_w1_val == 524288
// opcode: urstas32 ; op1:x13; op2:x11; dest:x28; op1val:0x08000055555555;  op2val:0xffdffffffffffffe
TEST_RR_OP(urstas32, x28, x13, x11, 0x0000000000000000, 0x08000055555555, 0xffdffffffffffffe, x6, 128, x4)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_17:
// rs1==x0, rs2==x6, rd==x16, rs2_w1_val == 4293918719, rs1_w0_val == 4294967294, rs1_w1_val == 8388608
// opcode: urstas32 ; op1:x0; op2:x6; dest:x16; op1val:0x800000fffffffe;  op2val:0xffefffff01000000
TEST_RR_OP(urstas32, x16, x0, x6, 0x0000000000000000, 0x800000fffffffe, 0xffefffff01000000, x1, 0, x4)

inst_18:
// rs1==x27, rs2==x16, rd==x10, rs2_w1_val == 4294443007, rs1_w0_val == 4294967231, rs2_w0_val == 8192, rs1_w1_val == 4278190079
// opcode: urstas32 ; op1:x27; op2:x16; dest:x10; op1val:0xfeffffffffffffbf;  op2val:0xfff7ffff00002000
TEST_RR_OP(urstas32, x10, x27, x16, 0x0000000000000000, 0xfeffffffffffffbf, 0xfff7ffff00002000, x1, 8, x4)

inst_19:
// rs1==x20, rs2==x0, rd==x5, rs2_w1_val == 4294705151, rs1_w1_val == 268435456, rs1_w0_val == 524288
// opcode: urstas32 ; op1:x20; op2:x0; dest:x5; op1val:0x1000000000080000;  op2val:0xfffbffff00000010
TEST_RR_OP(urstas32, x5, x20, x0, 0x0000000000000000, 0x1000000000080000, 0xfffbffff00000010, x1, 16, x4)

inst_20:
// rs1==x21, rs2==x12, rd==x9, rs2_w1_val == 4294836223, rs1_w1_val == 4294967279, rs2_w0_val == 4294950911
// opcode: urstas32 ; op1:x21; op2:x12; dest:x9; op1val:0xffffffef00000001;  op2val:0xfffdffffffffbfff
TEST_RR_OP(urstas32, x9, x21, x12, 0x0000000000000000, 0xffffffef00000001, 0xfffdffffffffbfff, x1, 24, x4)

inst_21:
// rs1==x11, rs2==x3, rd==x18, rs2_w1_val == 4294901759, rs1_w0_val == 262144, rs2_w0_val == 2
// opcode: urstas32 ; op1:x11; op2:x3; dest:x18; op1val:0x00000d00040000;  op2val:0xfffeffff00000002
TEST_RR_OP(urstas32, x18, x11, x3, 0x0000000000000000, 0x00000d00040000, 0xfffeffff00000002, x1, 32, x4)

inst_22:
// rs1==x31, rs2==x19, rd==x29, rs2_w1_val == 4294934527, rs1_w0_val == 4294967039, rs1_w1_val == 4294966783
// opcode: urstas32 ; op1:x31; op2:x19; dest:x29; op1val:0xfffffdfffffffeff;  op2val:0xffff7fff00000003
TEST_RR_OP(urstas32, x29, x31, x19, 0x0000000000000000, 0xfffffdfffffffeff, 0xffff7fff00000003, x1, 40, x4)

inst_23:
// rs1==x18, rs2==x20, rd==x22, rs2_w1_val == 4294950911, rs1_w0_val == 4261412863, rs2_w0_val == 4294967039, rs1_w1_val == 512
// opcode: urstas32 ; op1:x18; op2:x20; dest:x22; op1val:0x000200fdffffff;  op2val:0xffffbffffffffeff
TEST_RR_OP(urstas32, x22, x18, x20, 0x0000000000000000, 0x000200fdffffff, 0xffffbffffffffeff, x1, 48, x4)

inst_24:
// rs1==x7, rs2==x21, rd==x24, rs2_w1_val == 4294959103, rs1_w0_val == 2048
// opcode: urstas32 ; op1:x7; op2:x21; dest:x24; op1val:0x80000000000800;  op2val:0xffffdffffffffffe
TEST_RR_OP(urstas32, x24, x7, x21, 0x0000000000000000, 0x80000000000800, 0xffffdffffffffffe, x1, 56, x4)

inst_25:
// rs1==x22, rs2==x30, rd==x31, rs2_w1_val == 4294963199, rs1_w0_val == 4294966271, rs1_w1_val == 4294901759
// opcode: urstas32 ; op1:x22; op2:x30; dest:x31; op1val:0xfffefffffffffbff;  op2val:0xffffefff0000000a
TEST_RR_OP(urstas32, x31, x22, x30, 0x0000000000000000, 0xfffefffffffffbff, 0xffffefff0000000a, x1, 64, x4)

inst_26:
// rs1==x9, rs2==x27, rd==x23, rs2_w1_val == 4294965247, rs2_w0_val == 131072, rs1_w0_val == 536870912
// opcode: urstas32 ; op1:x9; op2:x27; dest:x23; op1val:0xfffffdff20000000;  op2val:0xfffff7ff00020000
TEST_RR_OP(urstas32, x23, x9, x27, 0x0000000000000000, 0xfffffdff20000000, 0xfffff7ff00020000, x1, 72, x4)

inst_27:
// rs1==x19, rs2==x2, rd==x15, rs2_w1_val == 4294966783, 
// opcode: urstas32 ; op1:x19; op2:x2; dest:x15; op1val:0x1000000000000000;  op2val:0xfffffdff0000000e
TEST_RR_OP(urstas32, x15, x19, x2, 0x0000000000000000, 0x1000000000000000, 0xfffffdff0000000e, x1, 80, x4)

inst_28:
// rs1==x6, rs2==x8, rd==x11, rs2_w1_val == 4294967039, rs1_w1_val == 1073741824
// opcode: urstas32 ; op1:x6; op2:x8; dest:x11; op1val:0x4000000001000000;  op2val:0xfffffeff00000003
TEST_RR_OP(urstas32, x11, x6, x8, 0x0000000000000000, 0x4000000001000000, 0xfffffeff00000003, x1, 88, x4)

inst_29:
// rs1==x14, rs2==x18, rd==x8, rs2_w1_val == 4294967167, rs1_w1_val == 4160749567, rs1_w0_val == 2097152, rs2_w0_val == 4294967279
// opcode: urstas32 ; op1:x14; op2:x18; dest:x8; op1val:0xf7ffffff00200000;  op2val:0xffffff7fffffffef
TEST_RR_OP(urstas32, x8, x14, x18, 0x0000000000000000, 0xf7ffffff00200000, 0xffffff7fffffffef, x1, 96, x4)

inst_30:
// rs1==x8, rs2==x7, rd==x6, rs2_w1_val == 4294967231, rs2_w0_val == 4290772991, rs1_w1_val == 16777216
// opcode: urstas32 ; op1:x8; op2:x7; dest:x6; op1val:0x100000000000040;  op2val:0xffffffbfffbfffff
TEST_RR_OP(urstas32, x6, x8, x7, 0x0000000000000000, 0x100000000000040, 0xffffffbfffbfffff, x1, 104, x2)

inst_31:
// rs1==x28, rs2==x14, rd==x20, rs2_w1_val == 4294967263, rs1_w0_val == 4294967263, rs1_w1_val == 2863311530
// opcode: urstas32 ; op1:x28; op2:x14; dest:x20; op1val:0xaaaaaaaaffffffdf;  op2val:0xffffffdf00000013
TEST_RR_OP(urstas32, x20, x28, x14, 0x0000000000000000, 0xaaaaaaaaffffffdf, 0xffffffdf00000013, x1, 112, x2)

inst_32:
// rs2_w1_val == 4294967279, rs1_w0_val == 4292870143
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffdfffff;  op2val:0xffffffef00800000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x80000000ffdfffff, 0xffffffef00800000, x1, 120, x2)

inst_33:
// rs2_w1_val == 4294967287, rs1_w1_val == 4292870143, rs2_w0_val == 4294934527
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00080000;  op2val:0xfffffff7ffff7fff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00080000, 0xfffffff7ffff7fff, x1, 128, x2)

inst_34:
// rs2_w1_val == 4294967291, rs2_w0_val == 4026531839
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000200;  op2val:0xfffffffbefffffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x00020000000200, 0xfffffffbefffffff, x1, 136, x2)

inst_35:
// rs2_w1_val == 4294967293, rs1_w0_val == 4290772991, rs2_w0_val == 4292870143
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000011ffbfffff;  op2val:0xfffffffdffdfffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x000011ffbfffff, 0xfffffffdffdfffff, x1, 144, x2)

inst_36:
// rs2_w1_val == 4294967294, rs1_w1_val == 8
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000040;  op2val:0xfffffffe00000040
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x00000800000040, 0xfffffffe00000040, x1, 152, x2)

inst_37:
// rs2_w1_val == 2147483648, rs1_w0_val == 32768, rs1_w1_val == 4294836223
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00008000;  op2val:0x8000000000020000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00008000, 0x8000000000020000, x1, 160, x2)

inst_38:
// rs2_w1_val == 1073741824, rs1_w1_val == 1024, rs1_w0_val == 134217728
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040008000000;  op2val:0x40000000ffdfffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x00040008000000, 0x40000000ffdfffff, x1, 168, x2)

inst_39:
// rs2_w1_val == 536870912, rs1_w1_val == 3221225471
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffeffff;  op2val:0x20000000ffff7fff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xbffffffffffeffff, 0x20000000ffff7fff, x1, 176, x2)

inst_40:
// rs2_w1_val == 268435456, rs2_w0_val == 67108864, rs1_w0_val == 2863311530, rs1_w1_val == 4261412863
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffaaaaaaaa;  op2val:0x1000000004000000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfdffffffaaaaaaaa, 0x1000000004000000, x1, 184, x2)

inst_41:
// rs2_w1_val == 134217728, rs2_w0_val == 524288
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000200;  op2val:0x800000000080000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x8000000000000200, 0x800000000080000, x1, 192, x2)

inst_42:
// rs2_w1_val == 67108864, rs1_w0_val == 4227858431, rs1_w1_val == 4026531839, rs2_w0_val == 4294963199
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffbffffff;  op2val:0x4000000ffffefff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xeffffffffbffffff, 0x4000000ffffefff, x1, 200, x2)

inst_43:
// rs2_w1_val == 33554432, rs1_w0_val == 4160749567
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000f7ffffff;  op2val:0x200000000000040
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x4000000f7ffffff, 0x200000000000040, x1, 208, x2)

inst_44:
// rs2_w1_val == 16777216, rs2_w0_val == 2097152
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff55555555;  op2val:0x100000000200000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffdffff55555555, 0x100000000200000, x1, 216, x2)

inst_45:
// rs2_w1_val == 8388608, rs1_w0_val == 3221225471
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffbfffffff;  op2val:0x80000000000013
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xefffffffbfffffff, 0x80000000000013, x1, 224, x2)

inst_46:
// rs2_w1_val == 4194304, rs1_w1_val == 4294967291, rs1_w0_val == 1048576
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00100000;  op2val:0x4000000000000c
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00100000, 0x4000000000000c, x1, 232, x2)

inst_47:
// rs2_w1_val == 2097152, rs1_w1_val == 4294967039
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffffffdf;  op2val:0x20000000000020
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffffeffffffffdf, 0x20000000000020, x1, 240, x2)

inst_48:
// rs2_w1_val == 1048576, rs1_w0_val == 4294966783
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000013fffffdff;  op2val:0x100000efffffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x000013fffffdff, 0x100000efffffff, x1, 248, x2)

inst_49:
// rs1_w0_val == 131072, rs2_w0_val == 33554432
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000020000;  op2val:0xfffbffff02000000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x4000000000020000, 0xfffbffff02000000, x1, 256, x2)

inst_50:
// rs1_w0_val == 16384, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000004000;  op2val:0x000011ffffbfff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x8000000000004000, 0x000011ffffbfff, x1, 264, x2)

inst_51:
// rs1_w0_val == 8192, rs2_w0_val == 4286578687
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00002000;  op2val:0xefffffffff7fffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00002000, 0xefffffffff7fffff, x1, 272, x2)

inst_52:
// rs1_w0_val == 4096, rs2_w0_val == 4294901759
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00001000;  op2val:0xfffffbfffffeffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00001000, 0xfffffbfffffeffff, x1, 280, x2)

inst_53:
// rs1_w0_val == 1024, rs1_w1_val == 134217728
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000400;  op2val:0x1000000ffbfffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x800000000000400, 0x1000000ffbfffff, x1, 288, x2)

inst_54:
// rs1_w0_val == 256, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000100;  op2val:0x00000a00800000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x400000000000100, 0x00000a00800000, x1, 296, x2)

inst_55:
// rs1_w0_val == 16, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000010;  op2val:0x10000000000004
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000010, 0x10000000000004, x1, 304, x2)

inst_56:
// rs1_w0_val == 8, rs1_w1_val == 4294963199
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000008;  op2val:0xffffefffefffffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xffffefff00000008, 0xffffefffefffffff, x1, 312, x2)

inst_57:
// rs1_w0_val == 4, rs1_w1_val == 4294967231, rs2_w1_val == 1024
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000004;  op2val:0x0004000000000e
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000004, 0x0004000000000e, x1, 320, x2)

inst_58:
// rs1_w0_val == 2, rs1_w1_val == 0, rs2_w0_val == 2147483647
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000002;  op2val:0x400000007fffffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x00000000000002, 0x400000007fffffff, x1, 328, x2)

inst_59:
// rs1_w0_val == 4294967295, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000dffffffff;  op2val:0xfbffffff00000005
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x00000dffffffff, 0xfbffffff00000005, x1, 336, x2)

inst_60:
// rs2_w1_val == 524288, rs1_w0_val == 4293918719
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffefffff;  op2val:0x080000ffffffef
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x20000000ffefffff, 0x080000ffffffef, x1, 344, x2)

inst_61:
// rs2_w1_val == 262144, rs1_w0_val == 4294967167, rs2_w0_val == 2048
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005ffffff7f;  op2val:0x04000000000800
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x000005ffffff7f, 0x04000000000800, x1, 352, x2)

inst_62:
// rs2_w1_val == 131072, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000013;  op2val:0x02000002000000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000013, 0x02000002000000, x1, 360, x2)

inst_63:
// rs2_w1_val == 65536, rs1_w0_val == 8388608
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000800000;  op2val:0x01000000000013
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x4000000000800000, 0x01000000000013, x1, 368, x2)

inst_64:
// rs2_w1_val == 32768, rs2_w0_val == 4294959103
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00400000;  op2val:0x008000ffffdfff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00400000, 0x008000ffffdfff, x1, 376, x2)

inst_65:
// rs2_w1_val == 16384, rs1_w1_val == 4294966271, rs1_w0_val == 4294950911
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffffbfff;  op2val:0x00400000000013
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffffbffffffbfff, 0x00400000000013, x1, 384, x2)

inst_66:
// rs2_w1_val == 8192, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000005;  op2val:0x002000efffffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000005, 0x002000efffffff, x1, 392, x2)

inst_67:
// rs2_w1_val == 2048, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000100000000c;  op2val:0x000800fffffffe
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x0000100000000c, 0x000800fffffffe, x1, 400, x2)

inst_68:
// rs2_w1_val == 512, rs1_w1_val == 3758096383
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff08000000;  op2val:0x00020000000010
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xdfffffff08000000, 0x00020000000010, x1, 408, x2)

inst_69:
// rs2_w1_val == 256, rs2_w0_val == 2147483648, rs1_w1_val == 4294967295
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00080000;  op2val:0x00010080000000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xffffffff00080000, 0x00010080000000, x1, 416, x2)

inst_70:
// rs2_w1_val == 128, rs2_w0_val == 1048576
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000100;  op2val:0x00008000100000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000100, 0x00008000100000, x1, 424, x2)

inst_71:
// rs2_w1_val == 64, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000003;  op2val:0x00004000010000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xefffffff00000003, 0x00004000010000, x1, 432, x2)

inst_72:
// rs2_w1_val == 32, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000050000000e;  op2val:0x000020ffffdfff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x0000050000000e, 0x000020ffffdfff, x1, 440, x2)

inst_73:
// rs2_w1_val == 16, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000f00004000;  op2val:0x00001000000012
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x00000f00004000, 0x00001000000012, x1, 448, x2)

inst_74:
// rs2_w1_val == 8, rs1_w0_val == 1073741824, rs1_w1_val == 256
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010040000000;  op2val:0x00000880000000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x00010040000000, 0x00000880000000, x1, 456, x2)

inst_75:
// rs2_w1_val == 4, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffdfff;  op2val:0x0000040000000f
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfbffffffffffdfff, 0x0000040000000f, x1, 464, x2)

inst_76:
// rs2_w1_val == 2, rs1_w0_val == 4294967291, rs1_w1_val == 32768
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffffffb;  op2val:0x00000200000020
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x008000fffffffb, 0x00000200000020, x1, 472, x2)

inst_77:
// rs2_w1_val == 1, rs1_w0_val == 268435456, rs2_w0_val == 268435456, rs1_w1_val == 4294934527
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff10000000;  op2val:0x00000110000000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xffff7fff10000000, 0x00000110000000, x1, 480, x2)

inst_78:
// rs2_w1_val == 4294967295, rs1_w1_val == 4294950911
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff0000000b;  op2val:0xffffffff00000010
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xffffbfff0000000b, 0xffffffff00000010, x1, 488, x2)

inst_79:
// rs2_w0_val == 1431655765, rs1_w1_val == 4293918719
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffefffff;  op2val:0xffff7fff55555555
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xffefffffffefffff, 0xffff7fff55555555, x1, 496, x2)

inst_80:
// rs2_w0_val == 3221225471, rs1_w0_val == 4294967279, rs1_w1_val == 4294967167
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffffef;  op2val:0xefffffffbfffffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffffef, 0xefffffffbfffffff, x1, 504, x2)

inst_81:
// rs2_w0_val == 3758096383, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffeffff;  op2val:0x000100dfffffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xffffffeffffeffff, 0x000100dfffffff, x1, 512, x2)

inst_82:
// rs2_w0_val == 1024, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000013;  op2val:0x8000000000000400
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000013, 0x8000000000000400, x1, 520, x2)

inst_83:
// rs2_w0_val == 512, rs1_w1_val == 64
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040feffffff;  op2val:0x00080000000200
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x000040feffffff, 0x00080000000200, x1, 528, x2)

inst_84:
// rs2_w0_val == 256, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000aaaaaaaa;  op2val:0x8000000000000100
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x080000aaaaaaaa, 0x8000000000000100, x1, 536, x2)

inst_85:
// rs2_w0_val == 8, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffaaaaaaaa;  op2val:0xffffffbf00000008
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfbffffffaaaaaaaa, 0xffffffbf00000008, x1, 544, x2)

inst_86:
// rs2_w0_val == 1, rs1_w1_val == 1431655765
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000080;  op2val:0x00000b00000001
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x5555555500000080, 0x00000b00000001, x1, 552, x2)

inst_87:
// rs2_w0_val == 4294967295, rs1_w1_val == 33554432
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000aaaaaaaa;  op2val:0x200000ffffffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x2000000aaaaaaaa, 0x200000ffffffff, x1, 560, x2)

inst_88:
// rs1_w1_val == 2147483647, rs1_w0_val == 4286578687
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffff7fffff;  op2val:0x00020020000000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x7fffffffff7fffff, 0x00020020000000, x1, 568, x2)

inst_89:
// rs1_w1_val == 4286578687, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffdffffff;  op2val:0x40000000000040
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xff7ffffffdffffff, 0x40000000000040, x1, 576, x2)

inst_90:
// rs1_w1_val == 4290772991, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00400000;  op2val:0x1000000002000000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00400000, 0x1000000002000000, x1, 584, x2)

inst_91:
// rs1_w1_val == 4294443007, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffff7f;  op2val:0xefffffff00000013
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffffff7f, 0xefffffff00000013, x1, 592, x2)

inst_92:
// rs1_w1_val == 4294705151, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffffdffffff;  op2val:0x55555555ffff7fff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffbfffffdffffff, 0x55555555ffff7fff, x1, 600, x2)

inst_93:
// rs1_w1_val == 4294959103, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffbffffff;  op2val:0x00080000000003
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xffffdffffbffffff, 0x00080000000003, x1, 608, x2)

inst_94:
// rs1_w1_val == 4294965247, rs2_w0_val == 134217728
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffbffffff;  op2val:0x00100008000000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffff7fffbffffff, 0x00100008000000, x1, 616, x2)

inst_95:
// rs1_w1_val == 4294967287, rs2_w0_val == 4294966783
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700040000;  op2val:0x000200fffffdff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffffff700040000, 0x000200fffffdff, x1, 624, x2)

inst_96:
// rs1_w1_val == 4294967293, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdff7fffff;  op2val:0xffffbfffffffefff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffdff7fffff, 0xffffbfffffffefff, x1, 632, x2)

inst_97:
// rs1_w1_val == 4194304, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffdff;  op2val:0x80000000000400
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x400000fffffdff, 0x80000000000400, x1, 640, x2)

inst_98:
// rs1_w1_val == 2097152, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000800000;  op2val:0x00000f00200000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x20000000800000, 0x00000f00200000, x1, 648, x2)

inst_99:
// rs1_w1_val == 1048576, rs1_w0_val == 2147483647, rs2_w0_val == 4294967287
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000007fffffff;  op2val:0xfbfffffffffffff7
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x1000007fffffff, 0xfbfffffffffffff7, x1, 656, x2)

inst_100:
// rs1_w1_val == 131072, rs1_w0_val == 4294967287
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000fffffff7;  op2val:0x2000000000000800
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x020000fffffff7, 0x2000000000000800, x1, 664, x2)

inst_101:
// rs1_w1_val == 65536, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000002;  op2val:0x010000ffff7fff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x01000000000002, 0x010000ffff7fff, x1, 672, x2)

inst_102:
// rs1_w1_val == 8192, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000040;  op2val:0x000200ffffffef
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x00200000000040, 0x000200ffffffef, x1, 680, x2)

inst_103:
// rs1_w1_val == 2048, rs2_w0_val == 4293918719
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffffffff;  op2val:0x000011ffefffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x000800ffffffff, 0x000011ffefffff, x1, 688, x2)

inst_104:
// rs1_w1_val == 128, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000800000000a;  op2val:0xfffdffff00000010
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x0000800000000a, 0xfffdffff00000010, x1, 696, x2)

inst_105:
// rs1_w1_val == 2, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000208000000;  op2val:0xfdffffffffffffdf
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x00000208000000, 0xfdffffffffffffdf, x1, 704, x2)

inst_106:
// rs1_w1_val == 1, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000004;  op2val:0xffffefff20000000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x00000100000004, 0xffffefff20000000, x1, 712, x2)

inst_107:
// rs2_w0_val == 4160749567, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700400000;  op2val:0x010000f7ffffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffffff700400000, 0x010000f7ffffff, x1, 720, x2)

inst_108:
// rs2_w0_val == 4227858431, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000b55555555;  op2val:0x800000fbffffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x00000b55555555, 0x800000fbffffff, x1, 728, x2)

inst_109:
// rs2_w0_val == 4261412863, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffffffbff;  op2val:0xfffefffffdffffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xffffdffffffffbff, 0xfffefffffdffffff, x1, 736, x2)

inst_110:
// rs1_w0_val == 3758096383, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffdfffffff;  op2val:0x10000000020000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xffffffffdfffffff, 0x10000000020000, x1, 744, x2)

inst_111:
// rs1_w0_val == 4026531839, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffefffffff;  op2val:0x000000aaaaaaaa
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xffffdfffefffffff, 0x000000aaaaaaaa, x1, 752, x2)

inst_112:
// rs2_w0_val == 4294443007, rs1_w0_val == 4294705151
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000013fffbffff;  op2val:0x000020fff7ffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x000013fffbffff, 0x000020fff7ffff, x1, 760, x2)

inst_113:
// rs2_w0_val == 4294705151, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff55555555;  op2val:0x000200fffbffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffffbff55555555, 0x000200fffbffff, x1, 768, x2)

inst_114:
// rs2_w0_val == 4294836223, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000dffffdfff;  op2val:0x7ffffffffffdffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x00000dffffdfff, 0x7ffffffffffdffff, x1, 776, x2)

inst_115:
// rs2_w0_val == 262144, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000005;  op2val:0x00000000040000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000005, 0x00000000040000, x1, 784, x2)

inst_116:
// rs2_w0_val == 4294965247, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000001;  op2val:0xfffffdfffffff7ff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x00004000000001, 0xfffffdfffffff7ff, x1, 792, x2)

inst_117:
// rs1_w0_val == 4294443007, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffff7ffff;  op2val:0x7fffffff00040000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xffffffeffff7ffff, 0x7fffffff00040000, x1, 800, x2)

inst_118:
// rs1_w0_val == 4294836223, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffdffff;  op2val:0xffffffdfffff7fff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x000020fffdffff, 0xffffffdfffff7fff, x1, 808, x2)

inst_119:
// rs2_w0_val == 4294967167, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000060000000d;  op2val:0x002000ffffff7f
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x0000060000000d, 0x002000ffffff7f, x1, 816, x2)

inst_120:
// rs1_w0_val == 4294934527, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100ffff7fff;  op2val:0x2000000fff7ffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x000100ffff7fff, 0x2000000fff7ffff, x1, 824, x2)

inst_121:
// rs2_w0_val == 4294967231, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffffdfff;  op2val:0x200000ffffffbf
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xffefffffffffdfff, 0x200000ffffffbf, x1, 832, x2)

inst_122:
// rs2_w0_val == 4294967291, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffff7fff;  op2val:0xffffbffffffffffb
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x000040ffff7fff, 0xffffbffffffffffb, x1, 840, x2)

inst_123:
// rs2_w0_val == 4294967293, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffff7;  op2val:0xffffff7ffffffffd
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffff7, 0xffffff7ffffffffd, x1, 848, x2)

inst_124:
// rs2_w0_val == 1073741824, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffffff7;  op2val:0x00010040000000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x000008fffffff7, 0x00010040000000, x1, 856, x2)

inst_125:
// rs1_w0_val == 4294967293, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffffffd;  op2val:0xfffffffd10000000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffefffffffd, 0xfffffffd10000000, x1, 864, x2)

inst_126:
// rs1_w0_val == 2147483648, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff80000000;  op2val:0x55555555ff7fffff
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff80000000, 0x55555555ff7fffff, x1, 872, x2)

inst_127:
// rs2_w0_val == 4194304, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000080;  op2val:0xffffff7f00400000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x00040000000080, 0xffffff7f00400000, x1, 880, x2)

inst_128:
// rs1_w0_val == 67108864, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000004000000;  op2val:0x80000080000000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x08000004000000, 0x80000080000000, x1, 888, x2)

inst_129:
// rs1_w0_val == 33554432, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000502000000;  op2val:0xff7fffff00800000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x00000502000000, 0xff7fffff00800000, x1, 896, x2)

inst_130:
// rs2_w0_val == 32768, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000004000000;  op2val:0xffffffdf00008000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x80000004000000, 0xffffffdf00008000, x1, 904, x2)

inst_131:
// rs2_w0_val == 16384, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffff7ff;  op2val:0xfffffff700004000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x2000000fffff7ff, 0xfffffff700004000, x1, 912, x2)

inst_132:
// rs2_w0_val == 4096, 
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000007;  op2val:0xff7fffff00001000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000007, 0xff7fffff00001000, x1, 920, x2)

inst_133:
// rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 4096, rs2_w1_val == 4096, rs2_w0_val == 4294967263, rs1_w0_val == 4294959103
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffffdfff;  op2val:0x001000ffffffdf
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x001000ffffdfff, 0x001000ffffffdf, x1, 928, x2)

inst_134:
// rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 128, rs2_w0_val == 128, rs1_w1_val == 4294967294
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000080;  op2val:0x00000600000080
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000080, 0x00000600000080, x1, 936, x2)

inst_135:
// rs2_w1_val == 4293918719, rs1_w0_val == 4294967294, rs1_w1_val == 8388608
// opcode: urstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffffe;  op2val:0xffefffff01000000
TEST_RR_OP(urstas32, x31, x30, x29, 0x0000000000000000, 0x800000fffffffe, 0xffefffff01000000, x1, 944, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 119*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
