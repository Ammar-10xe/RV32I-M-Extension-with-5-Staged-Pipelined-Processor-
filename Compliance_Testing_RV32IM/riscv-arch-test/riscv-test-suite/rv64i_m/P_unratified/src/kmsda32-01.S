
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmsda32 instruction of the RISC-V RV64PZicsr extension for the kmsda32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmsda32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 == rd != rs2, rs1==x16, rs2==x1, rd==x16, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs2_w0_val == -16385, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w1_val == -1073741825
// opcode: kmsda32 ; op1:x16; op2:x1; dest:x16; op1val:0x00000580000000;  op2val:0xbfffffffffffbfff
TEST_PKRR_OP(kmsda32, x16, x16, x1, 0x0000000000000000, 0x00000580000000, 0xbfffffffffffbfff, x16, x4, 0, x10)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x13, rs2==x5, rd==x20, rs1_w1_val == rs2_w1_val, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val == -2049, rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w0_val == 2048
// opcode: kmsda32 ; op1:x13; op2:x5; dest:x20; op1val:0xfffffff6fffff7ff;  op2val:0xfffffff600000800
TEST_PKRR_OP(kmsda32, x20, x13, x5, 0x0000000000000000, 0xfffffff6fffff7ff, 0xfffffff600000800, x13, x4, 16, x10)

inst_2:
// rs1 == rs2 != rd, rs1==x21, rs2==x21, rd==x22, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == 128, rs2_w0_val == -2, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w1_val == 1024
// opcode: kmsda32 ; op1:x21; op2:x21; dest:x22; op1val:0xfffffffa00000080;  op2val:0x000400fffffffe
TEST_PKRR_OP(kmsda32, x22, x21, x21, 0x0000000000000000, 0xfffffffa00000080, 0x000400fffffffe, x21, x4, 32, x10)

inst_3:
// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val == 8192, rs1_w1_val == 512, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 33554432, rs2_w0_val == 1048576
// opcode: kmsda32 ; op1:x7; op2:x7; dest:x7; op1val:0x00020000002000;  op2val:0x200000000100000
TEST_PKRR_OP(kmsda32, x7, x7, x7, 0x0000000000000000, 0x00020000002000, 0x200000000100000, x7, x4, 48, x10)

inst_4:
// rs2 == rd != rs1, rs1==x31, rs2==x25, rd==x25, rs1_w0_val == rs2_w0_val, rs2_w1_val == -5, rs1_w0_val == 2048, rs1_w1_val == 2147483647
// opcode: kmsda32 ; op1:x31; op2:x25; dest:x25; op1val:0x7fffffff00000800;  op2val:0xfffffffb00000800
TEST_PKRR_OP(kmsda32, x25, x31, x25, 0x0000000000000000, 0x7fffffff00000800, 0xfffffffb00000800, x31, x4, 64, x10)

inst_5:
// rs1==x6, rs2==x30, rd==x11, rs2_w1_val == -1431655766, rs1_w1_val == -1048577, rs1_w0_val == -4097, rs2_w0_val == 8
// opcode: kmsda32 ; op1:x6; op2:x30; dest:x11; op1val:0xffefffffffffefff;  op2val:0xaaaaaaaa00000008
TEST_PKRR_OP(kmsda32, x11, x6, x30, 0x0000000000000000, 0xffefffffffffefff, 0xaaaaaaaa00000008, x6, x4, 80, x10)

inst_6:
// rs1==x3, rs2==x13, rd==x17, rs2_w1_val == 1431655765, rs2_w0_val == -1073741825, rs1_w0_val == -2097153, rs1_w1_val == -129
// opcode: kmsda32 ; op1:x3; op2:x13; dest:x17; op1val:0xffffff7fffdfffff;  op2val:0x55555555bfffffff
TEST_PKRR_OP(kmsda32, x17, x3, x13, 0x0000000000000000, 0xffffff7fffdfffff, 0x55555555bfffffff, x3, x4, 96, x10)

inst_7:
// rs1==x1, rs2==x27, rd==x13, rs2_w1_val == 2147483647, rs1_w0_val == -257, rs1_w1_val == 262144, rs2_w0_val == 536870912
// opcode: kmsda32 ; op1:x1; op2:x27; dest:x13; op1val:0x040000fffffeff;  op2val:0x7fffffff20000000
TEST_PKRR_OP(kmsda32, x13, x1, x27, 0x0000000000000000, 0x040000fffffeff, 0x7fffffff20000000, x1, x4, 112, x10)

inst_8:
// rs1==x24, rs2==x11, rd==x18, rs2_w1_val == -536870913, rs2_w0_val == 4, rs1_w0_val == -8193, rs1_w1_val == -1431655766
// opcode: kmsda32 ; op1:x24; op2:x11; dest:x18; op1val:0xaaaaaaaaffffdfff;  op2val:0xdfffffff00000004
TEST_PKRR_OP(kmsda32, x18, x24, x11, 0x0000000000000000, 0xaaaaaaaaffffdfff, 0xdfffffff00000004, x24, x4, 128, x10)

inst_9:
// rs1==x17, rs2==x18, rd==x23, rs2_w1_val == -268435457, rs2_w0_val == -33554433, rs1_w1_val == -2147483648
// opcode: kmsda32 ; op1:x17; op2:x18; dest:x23; op1val:0x80000000fffffffa;  op2val:0xeffffffffdffffff
TEST_PKRR_OP(kmsda32, x23, x17, x18, 0x0000000000000000, 0x80000000fffffffa, 0xeffffffffdffffff, x17, x4, 144, x10)

inst_10:
// rs1==x9, rs2==x14, rd==x8, rs2_w1_val == -134217729, rs1_w0_val == 536870912
// opcode: kmsda32 ; op1:x9; op2:x14; dest:x8; op1val:0x04000020000000;  op2val:0xf7fffffffffffffe
TEST_PKRR_OP(kmsda32, x8, x9, x14, 0x0000000000000000, 0x04000020000000, 0xf7fffffffffffffe, x9, x4, 160, x10)

inst_11:
// rs1==x0, rs2==x9, rd==x29, rs2_w1_val == -67108865, rs1_w1_val == -268435457, rs2_w0_val == 268435456
// opcode: kmsda32 ; op1:x0; op2:x9; dest:x29; op1val:0xefffffff00000005;  op2val:0xfbffffff10000000
TEST_PKRR_OP(kmsda32, x29, x0, x9, 0x0000000000000000, 0xefffffff00000005, 0xfbffffff10000000, x0, x4, 176, x10)

inst_12:
// rs1==x20, rs2==x8, rd==x19, rs2_w1_val == -33554433, rs1_w1_val == -131073, rs1_w0_val == 8
// opcode: kmsda32 ; op1:x20; op2:x8; dest:x19; op1val:0xfffdffff00000008;  op2val:0xfdffffff00000800
TEST_PKRR_OP(kmsda32, x19, x20, x8, 0x0000000000000000, 0xfffdffff00000008, 0xfdffffff00000800, x20, x4, 192, x10)

inst_13:
// rs1==x14, rs2==x6, rd==x0, rs2_w1_val == -16777217, rs1_w0_val == 32768, rs1_w1_val == 134217728, rs2_w0_val == 4096
// opcode: kmsda32 ; op1:x14; op2:x6; dest:x0; op1val:0x800000000008000;  op2val:0xfeffffff00001000
TEST_PKRR_OP(kmsda32, x0, x14, x6, 0x0000000000000000, 0x800000000008000, 0xfeffffff00001000, x14, x4, 208, x10)

inst_14:
// rs1==x5, rs2==x15, rd==x2, rs2_w1_val == -8388609, rs1_w0_val == -1, rs2_w0_val == 2147483647, rs1_w1_val == -9
// opcode: kmsda32 ; op1:x5; op2:x15; dest:x2; op1val:0xfffffff7ffffffff;  op2val:0xff7fffff7fffffff
TEST_PKRR_OP(kmsda32, x2, x5, x15, 0x0000000000000000, 0xfffffff7ffffffff, 0xff7fffff7fffffff, x5, x4, 224, x10)

inst_15:
// rs1==x10, rs2==x28, rd==x30, rs2_w1_val == -4194305, rs1_w0_val == -131073, rs1_w1_val == 0, rs2_w0_val == -2049
// opcode: kmsda32 ; op1:x10; op2:x28; dest:x30; op1val:0x000000fffdffff;  op2val:0xffbffffffffff7ff
TEST_PKRR_OP(kmsda32, x30, x10, x28, 0x0000000000000000, 0x000000fffdffff, 0xffbffffffffff7ff, x10, x4, 240, x8)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_16:
// rs1==x11, rs2==x3, rd==x9, rs2_w1_val == -2097153, rs2_w0_val == 0
// opcode: kmsda32 ; op1:x11; op2:x3; dest:x9; op1val:0xfffdffff20000000;  op2val:0xffdfffff00000000
TEST_PKRR_OP(kmsda32, x9, x11, x3, 0x0000000000000000, 0xfffdffff20000000, 0xffdfffff00000000, x11, x7, 0, x8)

inst_17:
// rs1==x25, rs2==x23, rd==x26, rs2_w1_val == -1048577, rs1_w1_val == -3
// opcode: kmsda32 ; op1:x25; op2:x23; dest:x26; op1val:0xfffffffdfffff7ff;  op2val:0xffefffff00000008
TEST_PKRR_OP(kmsda32, x26, x25, x23, 0x0000000000000000, 0xfffffffdfffff7ff, 0xffefffff00000008, x25, x7, 16, x8)

inst_18:
// rs1==x26, rs2==x17, rd==x3, rs2_w1_val == -524289, rs2_w0_val == 4194304
// opcode: kmsda32 ; op1:x26; op2:x17; dest:x3; op1val:0x000200ffffefff;  op2val:0xfff7ffff00400000
TEST_PKRR_OP(kmsda32, x3, x26, x17, 0x0000000000000000, 0x000200ffffefff, 0xfff7ffff00400000, x26, x7, 32, x8)

inst_19:
// rs1==x30, rs2==x24, rd==x12, rs2_w1_val == -262145, rs1_w1_val == -8193, rs2_w0_val == -32769, rs1_w0_val == 65536
// opcode: kmsda32 ; op1:x30; op2:x24; dest:x12; op1val:0xffffdfff00010000;  op2val:0xfffbffffffff7fff
TEST_PKRR_OP(kmsda32, x12, x30, x24, 0x0000000000000000, 0xffffdfff00010000, 0xfffbffffffff7fff, x30, x7, 48, x8)

inst_20:
// rs1==x18, rs2==x29, rd==x24, rs2_w1_val == -131073, rs1_w0_val == 16384, rs1_w1_val == 2048
// opcode: kmsda32 ; op1:x18; op2:x29; dest:x24; op1val:0x00080000004000;  op2val:0xfffdffff00000004
TEST_PKRR_OP(kmsda32, x24, x18, x29, 0x0000000000000000, 0x00080000004000, 0xfffdffff00000004, x18, x7, 64, x8)

inst_21:
// rs1==x27, rs2==x16, rd==x5, rs2_w1_val == -65537, rs2_w0_val == 128, rs1_w1_val == -1025, rs1_w0_val == -33
// opcode: kmsda32 ; op1:x27; op2:x16; dest:x5; op1val:0xfffffbffffffffdf;  op2val:0xfffeffff00000080
TEST_PKRR_OP(kmsda32, x5, x27, x16, 0x0000000000000000, 0xfffffbffffffffdf, 0xfffeffff00000080, x27, x7, 80, x8)

inst_22:
// rs1==x22, rs2==x10, rd==x14, rs2_w1_val == -32769, rs2_w0_val == -16777217, rs1_w0_val == 4096
// opcode: kmsda32 ; op1:x22; op2:x10; dest:x14; op1val:0x00080000001000;  op2val:0xffff7ffffeffffff
TEST_PKRR_OP(kmsda32, x14, x22, x10, 0x0000000000000000, 0x00080000001000, 0xffff7ffffeffffff, x22, x7, 96, x8)

inst_23:
// rs1==x29, rs2==x2, rd==x15, rs2_w1_val == -16385, rs2_w0_val == 1024, rs1_w1_val == 32768
// opcode: kmsda32 ; op1:x29; op2:x2; dest:x15; op1val:0x00800000000800;  op2val:0xffffbfff00000400
TEST_PKRR_OP(kmsda32, x15, x29, x2, 0x0000000000000000, 0x00800000000800, 0xffffbfff00000400, x29, x7, 112, x8)

inst_24:
// rs1==x12, rs2==x31, rd==x1, rs2_w1_val == -8193, rs2_w0_val == -1048577
// opcode: kmsda32 ; op1:x12; op2:x31; dest:x1; op1val:0xfffffbff00000005;  op2val:0xffffdfffffefffff
TEST_PKRR_OP(kmsda32, x1, x12, x31, 0x0000000000000000, 0xfffffbff00000005, 0xffffdfffffefffff, x12, x7, 128, x8)

inst_25:
// rs1==x2, rs2==x26, rd==x28, rs2_w1_val == -4097, rs1_w0_val == -2, rs1_w1_val == 128
// opcode: kmsda32 ; op1:x2; op2:x26; dest:x28; op1val:0x000080fffffffe;  op2val:0xffffeffffffffffa
TEST_PKRR_OP(kmsda32, x28, x2, x26, 0x0000000000000000, 0x000080fffffffe, 0xffffeffffffffffa, x2, x7, 144, x8)

inst_26:
// rs1==x19, rs2==x0, rd==x6, rs2_w1_val == -2049, rs1_w1_val == 4096, rs1_w0_val == -65537
// opcode: kmsda32 ; op1:x19; op2:x0; dest:x6; op1val:0x001000fffeffff;  op2val:0xfffff7ff00000000
TEST_PKRR_OP(kmsda32, x6, x19, x0, 0x0000000000000000, 0x001000fffeffff, 0xfffff7ff00000000, x19, x7, 160, x8)

inst_27:
// rs1==x4, rs2==x20, rd==x21, rs2_w1_val == -1025, rs1_w1_val == 536870912, rs2_w0_val == 32768, rs1_w0_val == 1024
// opcode: kmsda32 ; op1:x4; op2:x20; dest:x21; op1val:0x2000000000000400;  op2val:0xfffffbff00008000
TEST_PKRR_OP(kmsda32, x21, x4, x20, 0x0000000000000000, 0x2000000000000400, 0xfffffbff00008000, x4, x7, 176, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_28:
// rs1==x28, rs2==x22, rd==x31, rs2_w1_val == -513, rs1_w0_val == 2
// opcode: kmsda32 ; op1:x28; op2:x22; dest:x31; op1val:0x00000600000002;  op2val:0xfffffdff00000003
TEST_PKRR_OP(kmsda32, x31, x28, x22, 0x0000000000000000, 0x00000600000002, 0xfffffdff00000003, x28, x1, 0, x2)

inst_29:
// rs1==x23, rs2==x19, rd==x27, rs2_w1_val == -257, 
// opcode: kmsda32 ; op1:x23; op2:x19; dest:x27; op1val:0xfffffff7fffff7ff;  op2val:0xfffffefffffffff9
TEST_PKRR_OP(kmsda32, x27, x23, x19, 0x0000000000000000, 0xfffffff7fffff7ff, 0xfffffefffffffff9, x23, x1, 16, x2)

inst_30:
// rs1==x8, rs2==x12, rd==x4, rs2_w1_val == -129, rs1_w0_val == -134217729
// opcode: kmsda32 ; op1:x8; op2:x12; dest:x4; op1val:0x040000f7ffffff;  op2val:0xffffff7fc0000000
TEST_PKRR_OP(kmsda32, x4, x8, x12, 0x0000000000000000, 0x040000f7ffffff, 0xffffff7fc0000000, x8, x1, 32, x2)

inst_31:
// rs1==x15, rs2==x4, rd==x10, rs2_w1_val == -65, rs2_w0_val == 1431655765, rs1_w0_val == -1073741825, rs1_w1_val == -513
// opcode: kmsda32 ; op1:x15; op2:x4; dest:x10; op1val:0xfffffdffbfffffff;  op2val:0xffffffbf55555555
TEST_PKRR_OP(kmsda32, x10, x15, x4, 0x0000000000000000, 0xfffffdffbfffffff, 0xffffffbf55555555, x15, x1, 48, x2)

inst_32:
// rs2_w1_val == -33, rs1_w0_val == -262145
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009fffbffff;  op2val:0xffffffdf00000000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x000009fffbffff, 0xffffffdf00000000, x30, x1, 64, x2)

inst_33:
// rs2_w1_val == -17, rs2_w0_val == -67108865
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffefff;  op2val:0xffffffeffbffffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffefff, 0xffffffeffbffffff, x30, x1, 80, x2)

inst_34:
// rs2_w1_val == -9, rs1_w0_val == -5
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffffffb;  op2val:0xfffffff720000000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffffb, 0xfffffff720000000, x30, x1, 96, x2)

inst_35:
// rs2_w1_val == -3, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffffeff;  op2val:0xfffffffd00000008
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x000003fffffeff, 0xfffffffd00000008, x30, x1, 112, x2)

inst_36:
// rs2_w1_val == -2, rs1_w1_val == -4097, rs1_w0_val == 2147483647
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff7fffffff;  op2val:0xfffffffe00000006
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xffffefff7fffffff, 0xfffffffe00000006, x30, x1, 128, x2)

inst_37:
// rs2_w1_val == -2147483648, rs2_w0_val == -1025, rs1_w0_val == -513
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffffdff;  op2val:0x80000000fffffbff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x008000fffffdff, 0x80000000fffffbff, x30, x1, 144, x2)

inst_38:
// rs2_w1_val == 1073741824, rs1_w0_val == 2097152, rs1_w1_val == -32769
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00200000;  op2val:0x4000000000000080
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00200000, 0x4000000000000080, x30, x1, 160, x2)

inst_39:
// rs2_w1_val == 536870912, rs1_w0_val == -129
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffffff7f;  op2val:0x20000000feffffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x20000000ffffff7f, 0x20000000feffffff, x30, x1, 176, x2)

inst_40:
// rs2_w1_val == 268435456, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500000080;  op2val:0x10000000fbffffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x00000500000080, 0x10000000fbffffff, x30, x1, 192, x2)

inst_41:
// rs2_w1_val == 134217728, rs1_w1_val == 1073741824, rs2_w0_val == -8193, rs1_w0_val == 4
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000004;  op2val:0x8000000ffffdfff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x4000000000000004, 0x8000000ffffdfff, x30, x1, 208, x2)

inst_42:
// rs2_w1_val == 67108864, rs1_w1_val == 32, rs2_w0_val == 65536
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020bfffffff;  op2val:0x400000000010000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x000020bfffffff, 0x400000000010000, x30, x1, 224, x2)

inst_43:
// rs2_w1_val == 16777216, rs2_w0_val == 2097152, rs1_w1_val == -257
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000400;  op2val:0x100000000200000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000400, 0x100000000200000, x30, x1, 240, x2)

inst_44:
// rs2_w1_val == 8388608, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000400;  op2val:0x80000000000007
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000400, 0x80000000000007, x30, x1, 256, x2)

inst_45:
// rs2_w1_val == 4194304, rs1_w1_val == 8192, rs2_w0_val == -65
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000006;  op2val:0x400000ffffffbf
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x00200000000006, 0x400000ffffffbf, x30, x1, 272, x2)

inst_46:
// rs2_w1_val == 2097152, rs1_w0_val == 33554432
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000302000000;  op2val:0x20000000008000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x00000302000000, 0x20000000008000, x30, x1, 288, x2)

inst_47:
// rs2_w1_val == 1048576, rs1_w0_val == -1025
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffffffbff;  op2val:0x10000010000000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffffbff, 0x10000010000000, x30, x1, 304, x2)

inst_48:
// rs2_w1_val == 524288, rs1_w1_val == 1
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000006;  op2val:0x08000000001000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x00000100000006, 0x08000000001000, x30, x1, 320, x2)

inst_49:
// rs2_w1_val == 262144, rs1_w1_val == -262145
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000800;  op2val:0x040000fbffffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000800, 0x040000fbffffff, x30, x1, 336, x2)

inst_50:
// rs2_w1_val == 131072, rs2_w0_val == -9
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffdfffff;  op2val:0x020000fffffff7
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xffffff7fffdfffff, 0x020000fffffff7, x30, x1, 352, x2)

inst_51:
// rs2_w1_val == 65536, rs2_w0_val == 16
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00000008;  op2val:0x01000000000010
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffffffc00000008, 0x01000000000010, x30, x1, 368, x2)

inst_52:
// rs2_w1_val == 32768, rs1_w0_val == 67108864, rs2_w0_val == -524289
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000004000000;  op2val:0x008000fff7ffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x00000004000000, 0x008000fff7ffff, x30, x1, 384, x2)

inst_53:
// rs2_w1_val == 16384, rs2_w0_val == -8388609
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000f7ffffff;  op2val:0x004000ff7fffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x40000000f7ffffff, 0x004000ff7fffff, x30, x1, 400, x2)

inst_54:
// rs1_w0_val == 16777216, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008001000000;  op2val:0xdfffffffffff7fff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x00008001000000, 0xdfffffffffff7fff, x30, x1, 416, x2)

inst_55:
// rs1_w0_val == 8388608, rs2_w0_val == -2097153
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00800000;  op2val:0xffffdfffffdfffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffffffc00800000, 0xffffdfffffdfffff, x30, x1, 432, x2)

inst_56:
// rs1_w0_val == 4194304, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000400000;  op2val:0x04000000008000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x2000000000400000, 0x04000000008000, x30, x1, 448, x2)

inst_57:
// rs1_w0_val == 1048576, rs1_w1_val == 33554432
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000100000;  op2val:0xfffffffaffffbfff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x200000000100000, 0xfffffffaffffbfff, x30, x1, 464, x2)

inst_58:
// rs1_w0_val == 524288, rs1_w1_val == 16777216
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000080000;  op2val:0x7fffffffffdfffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x100000000080000, 0x7fffffffffdfffff, x30, x1, 480, x2)

inst_59:
// rs1_w0_val == 262144, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700040000;  op2val:0x02000000000400
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x00000700040000, 0x02000000000400, x30, x1, 496, x2)

inst_60:
// rs1_w0_val == 131072, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00020000;  op2val:0x400000ff7fffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00020000, 0x400000ff7fffff, x30, x1, 512, x2)

inst_61:
// rs1_w0_val == 512, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000200;  op2val:0x1000000fffffffe
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x04000000000200, 0x1000000fffffffe, x30, x1, 528, x2)

inst_62:
// rs1_w0_val == 256, rs2_w0_val == 262144, rs1_w1_val == -65537
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000100;  op2val:0xfbffffff00040000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000100, 0xfbffffff00040000, x30, x1, 544, x2)

inst_63:
// rs1_w0_val == 64, rs1_w1_val == -1073741825, rs2_w0_val == -513
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000040;  op2val:0xffffdffffffffdff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000040, 0xffffdffffffffdff, x30, x1, 560, x2)

inst_64:
// rs1_w0_val == 32, rs2_w0_val == -257
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000020;  op2val:0xfffffff9fffffeff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x00020000000020, 0xfffffff9fffffeff, x30, x1, 576, x2)

inst_65:
// rs1_w0_val == 16, rs2_w0_val == -129, rs1_w1_val == -33554433
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000010;  op2val:0x000005ffffff7f
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000010, 0x000005ffffff7f, x30, x1, 592, x2)

inst_66:
// rs1_w0_val == 1, rs1_w1_val == 4
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000001;  op2val:0xfffffff900040000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x00000400000001, 0xfffffff900040000, x30, x1, 608, x2)

inst_67:
// rs1_w0_val == 0, rs2_w0_val == -262145
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000000;  op2val:0xffffffeffffbffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000000, 0xffffffeffffbffff, x30, x1, 624, x2)

inst_68:
// rs2_w1_val == 8192, rs2_w0_val == -1431655766
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000009;  op2val:0x002000aaaaaaaa
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffffff700000009, 0x002000aaaaaaaa, x30, x1, 640, x2)

inst_69:
// rs2_w1_val == 4096, rs1_w1_val == -2049
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000400;  op2val:0x001000ffff7fff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000400, 0x001000ffff7fff, x30, x1, 656, x2)

inst_70:
// rs2_w1_val == 2048, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000008;  op2val:0x00080000000003
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x00200000000008, 0x00080000000003, x30, x1, 672, x2)

inst_71:
// rs2_w1_val == 512, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00100000;  op2val:0x00020000000080
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xffefffff00100000, 0x00020000000080, x30, x1, 688, x2)

inst_72:
// rs2_w1_val == 256, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffffeffff;  op2val:0x00010000000400
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffeffff, 0x00010000000400, x30, x1, 704, x2)

inst_73:
// rs2_w1_val == 128, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000020000;  op2val:0x00008000010000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x200000000020000, 0x00008000010000, x30, x1, 720, x2)

inst_74:
// rs2_w1_val == 64, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00200000;  op2val:0x000040fffffff9
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00200000, 0x000040fffffff9, x30, x1, 736, x2)

inst_75:
// rs2_w1_val == 32, rs1_w0_val == -16385
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcffffbfff;  op2val:0x00002000000400
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffffffcffffbfff, 0x00002000000400, x30, x1, 752, x2)

inst_76:
// rs2_w1_val == 16, rs1_w0_val == -268435457
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003efffffff;  op2val:0x000010ffefffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x000003efffffff, 0x000010ffefffff, x30, x1, 768, x2)

inst_77:
// rs2_w1_val == 8, rs1_w1_val == -17
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000020;  op2val:0x000008fffffdff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xffffffef00000020, 0x000008fffffdff, x30, x1, 784, x2)

inst_78:
// rs2_w1_val == 4, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200fffdffff;  op2val:0x000004c0000000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x000200fffdffff, 0x000004c0000000, x30, x1, 800, x2)

inst_79:
// rs2_w1_val == 2, rs1_w0_val == -4194305
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffbfffff;  op2val:0x000002ffffffbf
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xffffffefffbfffff, 0x000002ffffffbf, x30, x1, 816, x2)

inst_80:
// rs2_w1_val == 1, rs1_w1_val == -33
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000001;  op2val:0x00000100100000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000001, 0x00000100100000, x30, x1, 832, x2)

inst_81:
// rs2_w1_val == 0, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000080;  op2val:0x000000fffffffc
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000080, 0x000000fffffffc, x30, x1, 848, x2)

inst_82:
// rs2_w1_val == -1, rs2_w0_val == -134217729
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00000001;  op2val:0xfffffffff7ffffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000001, 0xfffffffff7ffffff, x30, x1, 864, x2)

inst_83:
// rs2_w0_val == -536870913, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00080000;  op2val:0x020000dfffffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xefffffff00080000, 0x020000dfffffff, x30, x1, 880, x2)

inst_84:
// rs2_w0_val == -268435457, rs1_w1_val == -16777217
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffff7ff;  op2val:0x000010efffffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfefffffffffff7ff, 0x000010efffffff, x30, x1, 896, x2)

inst_85:
// rs2_w0_val == -4194305, rs1_w0_val == -1431655766
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffaaaaaaaa;  op2val:0xfffffbffffbfffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xffffdfffaaaaaaaa, 0xfffffbffffbfffff, x30, x1, 912, x2)

inst_86:
// rs2_w0_val == -131073, rs1_w1_val == 256
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100ffffbfff;  op2val:0x040000fffdffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x000100ffffbfff, 0x040000fffdffff, x30, x1, 928, x2)

inst_87:
// rs2_w0_val == -65537, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffffdfff;  op2val:0x000001fffeffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffffffdffffdfff, 0x000001fffeffff, x30, x1, 944, x2)

inst_88:
// rs2_w0_val == -4097, rs1_w0_val == 1073741824, rs1_w1_val == 8388608
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000040000000;  op2val:0x20000000ffffefff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x80000040000000, 0x20000000ffffefff, x30, x1, 960, x2)

inst_89:
// rs2_w0_val == -33, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000007;  op2val:0xfffffff6ffffffdf
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x00000600000007, 0xfffffff6ffffffdf, x30, x1, 976, x2)

inst_90:
// rs2_w0_val == 131072, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003ffdfffff;  op2val:0xfffff7ff00020000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x000003ffdfffff, 0xfffff7ff00020000, x30, x1, 992, x2)

inst_91:
// rs2_w0_val == 16384, rs1_w1_val == 2097152
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000008000;  op2val:0x00100000004000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x20000000008000, 0x00100000004000, x30, x1, 1008, x2)

inst_92:
// rs2_w0_val == 8192, rs1_w1_val == -2
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00100000;  op2val:0x3fffffff00002000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00100000, 0x3fffffff00002000, x30, x1, 1024, x2)

inst_93:
// rs2_w0_val == 512, rs1_w1_val == -536870913
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000007;  op2val:0x10000000000200
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000007, 0x10000000000200, x30, x1, 1040, x2)

inst_94:
// rs2_w0_val == 256, rs1_w1_val == 4194304
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffff9;  op2val:0xfff7ffff00000100
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x400000fffffff9, 0xfff7ffff00000100, x30, x1, 1056, x2)

inst_95:
// rs2_w0_val == 64, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffff7ff;  op2val:0xfffffff700000040
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x001000fffff7ff, 0xfffffff700000040, x30, x1, 1072, x2)

inst_96:
// rs2_w0_val == 32, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000400000;  op2val:0x7fffffff00000020
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x00080000400000, 0x7fffffff00000020, x30, x1, 1088, x2)

inst_97:
// rs2_w0_val == 2, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200fffffffb;  op2val:0x200000000000002
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x000200fffffffb, 0x200000000000002, x30, x1, 1104, x2)

inst_98:
// rs2_w0_val == 1, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000020;  op2val:0xdfffffff00000001
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000020, 0xdfffffff00000001, x30, x1, 1120, x2)

inst_99:
// rs2_w0_val == -1, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffbfff;  op2val:0x010000ffffffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffbfff, 0x010000ffffffff, x30, x1, 1136, x2)

inst_100:
// rs1_w1_val == 1431655765, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fffffffb;  op2val:0x000001fffff7ff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x55555555fffffffb, 0x000001fffff7ff, x30, x1, 1152, x2)

inst_101:
// rs1_w1_val == -134217729, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffdfff;  op2val:0xffefffff00000001
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffdfff, 0xffefffff00000001, x30, x1, 1168, x2)

inst_102:
// rs1_w1_val == -67108865, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffdffff;  op2val:0xffffefff00000009
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffdffff, 0xffffefff00000009, x30, x1, 1184, x2)

inst_103:
// rs1_w1_val == -8388609, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffffffff;  op2val:0x01000000000002
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xff7fffffffffffff, 0x01000000000002, x30, x1, 1200, x2)

inst_104:
// rs1_w1_val == -4194305, rs2_w0_val == 33554432
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffffff8;  op2val:0xc000000002000000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xffbffffffffffff8, 0xc000000002000000, x30, x1, 1216, x2)

inst_105:
// rs1_w1_val == -2097153, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffffdff;  op2val:0xfffffffdfffffff6
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xffdffffffffffdff, 0xfffffffdfffffff6, x30, x1, 1232, x2)

inst_106:
// rs1_w1_val == -524289, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000007;  op2val:0x000020ffbfffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000007, 0x000020ffbfffff, x30, x1, 1248, x2)

inst_107:
// rs1_w1_val == -16385, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000005;  op2val:0xffffffefefffffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000005, 0xffffffefefffffff, x30, x1, 1264, x2)

inst_108:
// rs1_w1_val == -65, rs1_w0_val == -8388609
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfff7fffff;  op2val:0x000005fffffffa
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xffffffbfff7fffff, 0x000005fffffffa, x30, x1, 1280, x2)

inst_109:
// rs1_w1_val == -5, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffdfff;  op2val:0x080000ffffdfff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffdfff, 0x080000ffffdfff, x30, x1, 1296, x2)

inst_110:
// rs1_w1_val == 268435456, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000040000;  op2val:0x000010ffdfffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x1000000000040000, 0x000010ffdfffff, x30, x1, 1312, x2)

inst_111:
// rs1_w1_val == 67108864, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000ffffff7f;  op2val:0xfff7fffffffffffa
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x4000000ffffff7f, 0xfff7fffffffffffa, x30, x1, 1328, x2)

inst_112:
// rs1_w1_val == 1048576, rs2_w0_val == 16777216
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000007fffffff;  op2val:0xff7fffff01000000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x1000007fffffff, 0xff7fffff01000000, x30, x1, 1344, x2)

inst_113:
// rs1_w1_val == 524288, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000002000;  op2val:0x1000000000000005
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x08000000002000, 0x1000000000000005, x30, x1, 1360, x2)

inst_114:
// rs1_w1_val == 131072, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000fffffeff;  op2val:0x000002fffeffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x020000fffffeff, 0x000002fffeffff, x30, x1, 1376, x2)

inst_115:
// rs1_w1_val == 65536, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffbffff;  op2val:0xaaaaaaaaffbfffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x010000fffbffff, 0xaaaaaaaaffbfffff, x30, x1, 1392, x2)

inst_116:
// rs1_w1_val == 16384, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffffffdf;  op2val:0x00000000010000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x004000ffffffdf, 0x00000000010000, x30, x1, 1408, x2)

inst_117:
// rs1_w1_val == 1024, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffffff7f;  op2val:0x000080ffffffbf
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x000400ffffff7f, 0x000080ffffffbf, x30, x1, 1424, x2)

inst_118:
// rs1_w1_val == 64, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffffff7f;  op2val:0x00004000001000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x000040ffffff7f, 0x00004000001000, x30, x1, 1440, x2)

inst_119:
// rs1_w1_val == 16, rs1_w0_val == -524289
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010fff7ffff;  op2val:0x000006fffffffa
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x000010fff7ffff, 0x000006fffffffa, x30, x1, 1456, x2)

inst_120:
// rs1_w1_val == 8, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000006;  op2val:0x000040fffffffc
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x00000800000006, 0x000040fffffffc, x30, x1, 1472, x2)

inst_121:
// rs1_w1_val == 2, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000008;  op2val:0x2000000ffffefff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x00000200000008, 0x2000000ffffefff, x30, x1, 1488, x2)

inst_122:
// rs1_w1_val == -1, rs2_w0_val == 134217728
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff7fffffff;  op2val:0x00000208000000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xffffffff7fffffff, 0x00000208000000, x30, x1, 1504, x2)

inst_123:
// rs1_w0_val == 1431655765, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008055555555;  op2val:0xfffdfffffffffff6
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x00008055555555, 0xfffdfffffffffff6, x30, x1, 1520, x2)

inst_124:
// rs1_w0_val == -536870913, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffdfffffff;  op2val:0xffffffdfffbfffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfbffffffdfffffff, 0xffffffdfffbfffff, x30, x1, 1536, x2)

inst_125:
// rs1_w0_val == -67108865, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006fbffffff;  op2val:0xfffffff900000010
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x000006fbffffff, 0xfffffff900000010, x30, x1, 1552, x2)

inst_126:
// rs1_w0_val == -33554433, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffdffffff;  op2val:0x10000000ffffffbf
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xffffff7ffdffffff, 0x10000000ffffffbf, x30, x1, 1568, x2)

inst_127:
// rs1_w0_val == -16777217, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffeffffff;  op2val:0xfffffffeffffff7f
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xeffffffffeffffff, 0xfffffffeffffff7f, x30, x1, 1584, x2)

inst_128:
// rs1_w0_val == -1048577, rs2_w0_val == 67108864
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ffefffff;  op2val:0xfffffdff04000000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x8000000ffefffff, 0xfffffdff04000000, x30, x1, 1600, x2)

inst_129:
// rs1_w0_val == -32769, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffff7fff;  op2val:0x000007ffffffbf
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffffdffffff7fff, 0x000007ffffffbf, x30, x1, 1616, x2)

inst_130:
// rs2_w0_val == -17, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffffffe;  op2val:0x000008ffffffef
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffffffe, 0x000008ffffffef, x30, x1, 1632, x2)

inst_131:
// rs2_w0_val == -5, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffffffc;  op2val:0xf7fffffffffffffb
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xffffeffffffffffc, 0xf7fffffffffffffb, x30, x1, 1648, x2)

inst_132:
// rs2_w0_val == -3, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff04000000;  op2val:0xfffffefffffffffd
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffeffff04000000, 0xfffffefffffffffd, x30, x1, 1664, x2)

inst_133:
// rs2_w0_val == -2147483648, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000ffffffdf;  op2val:0xfbffffff80000000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x020000ffffffdf, 0xfbffffff80000000, x30, x1, 1680, x2)

inst_134:
// rs2_w0_val == 1073741824, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffbffffff;  op2val:0x20000040000000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffff7fffbffffff, 0x20000040000000, x30, x1, 1696, x2)

inst_135:
// rs1_w0_val == -65, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001ffffffbf;  op2val:0xffff7fffffff7fff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x000001ffffffbf, 0xffff7fffffff7fff, x30, x1, 1712, x2)

inst_136:
// rs1_w0_val == -17, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffffffef;  op2val:0x020000fffffff7
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffffffef, 0x020000fffffff7, x30, x1, 1728, x2)

inst_137:
// rs1_w0_val == -9, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffff7;  op2val:0xffefffff00000009
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x800000fffffff7, 0xffefffff00000009, x30, x1, 1744, x2)

inst_138:
// rs1_w0_val == -3, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffffd;  op2val:0x3fffffff00004000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x400000fffffffd, 0x3fffffff00004000, x30, x1, 1760, x2)

inst_139:
// rs2_w0_val == 8388608, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080f7ffffff;  op2val:0x00000100800000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x000080f7ffffff, 0x00000100800000, x30, x1, 1776, x2)

inst_140:
// rs1_w0_val == 268435456, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000710000000;  op2val:0xffffffdfbfffffff
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x00000710000000, 0xffffffdfbfffffff, x30, x1, 1792, x2)

inst_141:
// rs1_w0_val == 134217728, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000008000000;  op2val:0x00001000000008
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x4000000008000000, 0x00001000000008, x30, x1, 1808, x2)

inst_142:
// rs2_w0_val == 524288, 
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000100000;  op2val:0x00000700080000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x00008000100000, 0x00000700080000, x30, x1, 1824, x2)

inst_143:
// rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == 128, rs2_w0_val == -2, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w1_val == 1024
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00000080;  op2val:0x000400fffffffe
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000080, 0x000400fffffffe, x30, x1, 1840, x2)

inst_144:
// rs2_w1_val == -16777217, rs1_w0_val == 32768, rs1_w1_val == 134217728, rs2_w0_val == 4096
// opcode: kmsda32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000008000;  op2val:0xfeffffff00001000
TEST_PKRR_OP(kmsda32, x31, x30, x29, 0x0000000000000000, 0x800000000008000, 0xfeffffff00001000, x30, x1, 1856, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 234*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
