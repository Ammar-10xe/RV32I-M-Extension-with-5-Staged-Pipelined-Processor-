
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmaxds32 instruction of the RISC-V RV64PZicsr extension for the kmaxds32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmaxds32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x12,signature_x12_1)

inst_0:
// rs1 == rd != rs2, rs1==x5, rs2==x10, rd==x5, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w0_val == -65, rs2_w1_val == -536870913, rs1_w1_val == 1073741824
// opcode: kmaxds32 ; op1:x5; op2:x10; dest:x5; op1val:0x4000000080000000;  op2val:0xdfffffffffffffbf
TEST_PKRR_OP(kmaxds32, x5, x5, x10, 0x0000000000000000, 0x4000000080000000, 0xdfffffffffffffbf, x5, x12, 0, x13)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x11, rs2==x16, rd==x4, rs1_w1_val == rs2_w1_val, rs2_w1_val == 4096, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 4096, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w0_val == 16384, rs2_w0_val == -5
// opcode: kmaxds32 ; op1:x11; op2:x16; dest:x4; op1val:0x00100000004000;  op2val:0x001000fffffffb
TEST_PKRR_OP(kmaxds32, x4, x11, x16, 0x0000000000000000, 0x00100000004000, 0x001000fffffffb, x11, x12, 16, x13)

inst_2:
// rs1 == rs2 != rd, rs1==x15, rs2==x15, rd==x29, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w1_val == -8193, rs2_w0_val == -1, rs1_w0_val == -131073
// opcode: kmaxds32 ; op1:x15; op2:x15; dest:x29; op1val:0xffffdffffffdffff;  op2val:0x000006ffffffff
TEST_PKRR_OP(kmaxds32, x29, x15, x15, 0x0000000000000000, 0xffffdffffffdffff, 0x000006ffffffff, x15, x12, 32, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x0, rs2==x0, rd==x0, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w1_val == -536870913, rs2_w0_val == -257, rs1_w0_val == 1431655765
// opcode: kmaxds32 ; op1:x0; op2:x0; dest:x0; op1val:0xdfffffff55555555;  op2val:0xfffffff6fffffeff
TEST_PKRR_OP(kmaxds32, x0, x0, x0, 0x0000000000000000, 0xdfffffff55555555, 0xfffffff6fffffeff, x0, x12, 48, x13)

inst_4:
// rs2 == rd != rs1, rs1==x10, rs2==x7, rd==x7, rs1_w0_val == rs2_w0_val, rs1_w0_val == 0, rs2_w1_val == -17, rs2_w0_val == 0, rs1_w1_val == -32769
// opcode: kmaxds32 ; op1:x10; op2:x7; dest:x7; op1val:0xffff7fff00000000;  op2val:0xffffffef00000000
TEST_PKRR_OP(kmaxds32, x7, x10, x7, 0x0000000000000000, 0xffff7fff00000000, 0xffffffef00000000, x10, x12, 64, x13)

inst_5:
// rs1==x22, rs2==x19, rd==x18, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w0_val == 262144, rs1_w1_val == 8192, rs1_w0_val == -16385
// opcode: kmaxds32 ; op1:x22; op2:x19; dest:x18; op1val:0x002000ffffbfff;  op2val:0xfffffff900040000
TEST_PKRR_OP(kmaxds32, x18, x22, x19, 0x0000000000000000, 0x002000ffffbfff, 0xfffffff900040000, x22, x12, 80, x13)

inst_6:
// rs1==x16, rs2==x22, rd==x28, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == -16385, rs2_w1_val == -33, rs1_w0_val == 2147483647
// opcode: kmaxds32 ; op1:x16; op2:x22; dest:x28; op1val:0xffffbfff7fffffff;  op2val:0xffffffdf00000006
TEST_PKRR_OP(kmaxds32, x28, x16, x22, 0x0000000000000000, 0xffffbfff7fffffff, 0xffffffdf00000006, x16, x12, 96, x13)

inst_7:
// rs1==x28, rs2==x27, rd==x8, rs2_w1_val == -1431655766, rs1_w1_val == -67108865, rs1_w0_val == -524289
// opcode: kmaxds32 ; op1:x28; op2:x27; dest:x8; op1val:0xfbfffffffff7ffff;  op2val:0xaaaaaaaafffffff9
TEST_PKRR_OP(kmaxds32, x8, x28, x27, 0x0000000000000000, 0xfbfffffffff7ffff, 0xaaaaaaaafffffff9, x28, x12, 112, x13)

inst_8:
// rs1==x23, rs2==x6, rd==x14, rs2_w1_val == 1431655765, rs1_w0_val == -257, rs2_w0_val == 1073741824, rs1_w1_val == 128
// opcode: kmaxds32 ; op1:x23; op2:x6; dest:x14; op1val:0x000080fffffeff;  op2val:0x5555555540000000
TEST_PKRR_OP(kmaxds32, x14, x23, x6, 0x0000000000000000, 0x000080fffffeff, 0x5555555540000000, x23, x12, 128, x13)

inst_9:
// rs1==x24, rs2==x31, rd==x27, rs2_w1_val == 2147483647, rs2_w0_val == 4
// opcode: kmaxds32 ; op1:x24; op2:x31; dest:x27; op1val:0x0020007fffffff;  op2val:0x7fffffff00000004
TEST_PKRR_OP(kmaxds32, x27, x24, x31, 0x0000000000000000, 0x0020007fffffff, 0x7fffffff00000004, x24, x12, 144, x13)

inst_10:
// rs1==x17, rs2==x9, rd==x22, rs2_w1_val == -1073741825, rs1_w1_val == 67108864, rs2_w0_val == 16384
// opcode: kmaxds32 ; op1:x17; op2:x9; dest:x22; op1val:0x4000000ffffbfff;  op2val:0xbfffffff00004000
TEST_PKRR_OP(kmaxds32, x22, x17, x9, 0x0000000000000000, 0x4000000ffffbfff, 0xbfffffff00004000, x17, x12, 160, x13)

inst_11:
// rs1==x1, rs2==x2, rd==x19, rs2_w1_val == -268435457, rs2_w0_val == -1431655766, rs1_w0_val == 524288, rs1_w1_val == 2147483647
// opcode: kmaxds32 ; op1:x1; op2:x2; dest:x19; op1val:0x7fffffff00080000;  op2val:0xefffffffaaaaaaaa
TEST_PKRR_OP(kmaxds32, x19, x1, x2, 0x0000000000000000, 0x7fffffff00080000, 0xefffffffaaaaaaaa, x1, x12, 176, x13)

inst_12:
// rs1==x21, rs2==x29, rd==x10, rs2_w1_val == -134217729, rs1_w0_val == 1073741824, rs2_w0_val == -524289
// opcode: kmaxds32 ; op1:x21; op2:x29; dest:x10; op1val:0xfffffff940000000;  op2val:0xf7fffffffff7ffff
TEST_PKRR_OP(kmaxds32, x10, x21, x29, 0x0000000000000000, 0xfffffff940000000, 0xf7fffffffff7ffff, x21, x12, 192, x13)

inst_13:
// rs1==x3, rs2==x11, rd==x25, rs2_w1_val == -67108865, rs2_w0_val == 2
// opcode: kmaxds32 ; op1:x3; op2:x11; dest:x25; op1val:0x400000000000003;  op2val:0xfbffffff00000002
TEST_PKRR_OP(kmaxds32, x25, x3, x11, 0x0000000000000000, 0x400000000000003, 0xfbffffff00000002, x3, x12, 208, x13)

inst_14:
// rs1==x14, rs2==x13, rd==x20, rs2_w1_val == -33554433, rs1_w0_val == 1048576
// opcode: kmaxds32 ; op1:x14; op2:x13; dest:x20; op1val:0xfffffff900100000;  op2val:0xfdffffff00000006
TEST_PKRR_OP(kmaxds32, x20, x14, x13, 0x0000000000000000, 0xfffffff900100000, 0xfdffffff00000006, x14, x12, 224, x5)
RVTEST_SIGBASE(x10,signature_x10_0)

inst_15:
// rs1==x30, rs2==x8, rd==x11, rs2_w1_val == -16777217, rs1_w0_val == -536870913, rs1_w1_val == -65537, rs2_w0_val == 524288
// opcode: kmaxds32 ; op1:x30; op2:x8; dest:x11; op1val:0xfffeffffdfffffff;  op2val:0xfeffffff00080000
TEST_PKRR_OP(kmaxds32, x11, x30, x8, 0x0000000000000000, 0xfffeffffdfffffff, 0xfeffffff00080000, x30, x10, 0, x5)

inst_16:
// rs1==x20, rs2==x17, rd==x24, rs2_w1_val == -8388609, rs2_w0_val == -33554433, rs1_w1_val == -3
// opcode: kmaxds32 ; op1:x20; op2:x17; dest:x24; op1val:0xfffffffd00000005;  op2val:0xff7ffffffdffffff
TEST_PKRR_OP(kmaxds32, x24, x20, x17, 0x0000000000000000, 0xfffffffd00000005, 0xff7ffffffdffffff, x20, x10, 16, x5)

inst_17:
// rs1==x7, rs2==x4, rd==x21, rs2_w1_val == -4194305, rs1_w0_val == -2049
// opcode: kmaxds32 ; op1:x7; op2:x4; dest:x21; op1val:0xffff7ffffffff7ff;  op2val:0xffbfffff00000007
TEST_PKRR_OP(kmaxds32, x21, x7, x4, 0x0000000000000000, 0xffff7ffffffff7ff, 0xffbfffff00000007, x7, x10, 32, x5)

inst_18:
// rs1==x8, rs2==x26, rd==x31, rs2_w1_val == -2097153, rs2_w0_val == 131072, rs1_w1_val == -262145, rs1_w0_val == 32
// opcode: kmaxds32 ; op1:x8; op2:x26; dest:x31; op1val:0xfffbffff00000020;  op2val:0xffdfffff00020000
TEST_PKRR_OP(kmaxds32, x31, x8, x26, 0x0000000000000000, 0xfffbffff00000020, 0xffdfffff00020000, x8, x10, 48, x5)

inst_19:
// rs1==x29, rs2==x28, rd==x17, rs2_w1_val == -1048577, rs2_w0_val == 1431655765, rs1_w0_val == -65, rs1_w1_val == 2
// opcode: kmaxds32 ; op1:x29; op2:x28; dest:x17; op1val:0x000002ffffffbf;  op2val:0xffefffff55555555
TEST_PKRR_OP(kmaxds32, x17, x29, x28, 0x0000000000000000, 0x000002ffffffbf, 0xffefffff55555555, x29, x10, 64, x5)

inst_20:
// rs1==x19, rs2==x3, rd==x12, rs2_w1_val == -524289, rs1_w1_val == -268435457, rs1_w0_val == -4194305, rs2_w0_val == -17
// opcode: kmaxds32 ; op1:x19; op2:x3; dest:x12; op1val:0xefffffffffbfffff;  op2val:0xfff7ffffffffffef
TEST_PKRR_OP(kmaxds32, x12, x19, x3, 0x0000000000000000, 0xefffffffffbfffff, 0xfff7ffffffffffef, x19, x10, 80, x5)

inst_21:
// rs1==x12, rs2==x18, rd==x9, rs2_w1_val == -262145, rs2_w0_val == -513, rs1_w0_val == 268435456
// opcode: kmaxds32 ; op1:x12; op2:x18; dest:x9; op1val:0xffffbfff10000000;  op2val:0xfffbfffffffffdff
TEST_PKRR_OP(kmaxds32, x9, x12, x18, 0x0000000000000000, 0xffffbfff10000000, 0xfffbfffffffffdff, x12, x10, 96, x5)

inst_22:
// rs1==x31, rs2==x1, rd==x2, rs2_w1_val == -131073, rs2_w0_val == -131073, rs1_w0_val == -1048577
// opcode: kmaxds32 ; op1:x31; op2:x1; dest:x2; op1val:0xc0000000ffefffff;  op2val:0xfffdfffffffdffff
TEST_PKRR_OP(kmaxds32, x2, x31, x1, 0x0000000000000000, 0xc0000000ffefffff, 0xfffdfffffffdffff, x31, x10, 112, x5)

inst_23:
// rs1==x25, rs2==x12, rd==x16, rs2_w1_val == -65537, rs1_w0_val == 1, rs2_w0_val == -9
// opcode: kmaxds32 ; op1:x25; op2:x12; dest:x16; op1val:0x00000600000001;  op2val:0xfffefffffffffff7
TEST_PKRR_OP(kmaxds32, x16, x25, x12, 0x0000000000000000, 0x00000600000001, 0xfffefffffffffff7, x25, x10, 128, x5)

inst_24:
// rs1==x4, rs2==x30, rd==x13, rs2_w1_val == -32769, rs1_w0_val == -268435457
// opcode: kmaxds32 ; op1:x4; op2:x30; dest:x13; op1val:0xfffffff8efffffff;  op2val:0xffff7fff00004000
TEST_PKRR_OP(kmaxds32, x13, x4, x30, 0x0000000000000000, 0xfffffff8efffffff, 0xffff7fff00004000, x4, x10, 144, x5)

inst_25:
// rs1==x6, rs2==x23, rd==x3, rs2_w1_val == -16385, rs1_w0_val == -1073741825, rs2_w0_val == 16, rs1_w1_val == 0
// opcode: kmaxds32 ; op1:x6; op2:x23; dest:x3; op1val:0x000000bfffffff;  op2val:0xffffbfff00000010
TEST_PKRR_OP(kmaxds32, x3, x6, x23, 0x0000000000000000, 0x000000bfffffff, 0xffffbfff00000010, x6, x10, 160, x5)

inst_26:
// rs1==x26, rs2==x21, rd==x30, rs2_w1_val == -8193, rs1_w1_val == 32, rs2_w0_val == -65537
// opcode: kmaxds32 ; op1:x26; op2:x21; dest:x30; op1val:0x00002000000020;  op2val:0xffffdffffffeffff
TEST_PKRR_OP(kmaxds32, x30, x26, x21, 0x0000000000000000, 0x00002000000020, 0xffffdffffffeffff, x26, x10, 176, x3)

inst_27:
// rs1==x13, rs2==x5, rd==x6, rs2_w1_val == -4097, 
// opcode: kmaxds32 ; op1:x13; op2:x5; dest:x6; op1val:0x001000ffffbfff;  op2val:0xffffefffffffffef
TEST_PKRR_OP(kmaxds32, x6, x13, x5, 0x0000000000000000, 0x001000ffffbfff, 0xffffefffffffffef, x13, x10, 192, x3)

inst_28:
// rs1==x9, rs2==x14, rd==x1, rs2_w1_val == -2049, rs2_w0_val == 65536, rs1_w1_val == 524288
// opcode: kmaxds32 ; op1:x9; op2:x14; dest:x1; op1val:0x080000fffffffa;  op2val:0xfffff7ff00010000
TEST_PKRR_OP(kmaxds32, x1, x9, x14, 0x0000000000000000, 0x080000fffffffa, 0xfffff7ff00010000, x9, x10, 208, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x18, rs2==x25, rd==x23, rs2_w1_val == -1025, rs1_w1_val == 8
// opcode: kmaxds32 ; op1:x18; op2:x25; dest:x23; op1val:0x000008bfffffff;  op2val:0xfffffbfffffffff7
TEST_PKRR_OP(kmaxds32, x23, x18, x25, 0x0000000000000000, 0x000008bfffffff, 0xfffffbfffffffff7, x18, x1, 0, x3)

inst_30:
// rs1==x27, rs2==x20, rd==x26, rs2_w1_val == -513, rs1_w0_val == 8, rs2_w0_val == 2048
// opcode: kmaxds32 ; op1:x27; op2:x20; dest:x26; op1val:0x7fffffff00000008;  op2val:0xfffffdff00000800
TEST_PKRR_OP(kmaxds32, x26, x27, x20, 0x0000000000000000, 0x7fffffff00000008, 0xfffffdff00000800, x27, x1, 16, x3)

inst_31:
// rs1==x2, rs2==x24, rd==x15, rs2_w1_val == -257, rs2_w0_val == 16777216, rs1_w0_val == 8192
// opcode: kmaxds32 ; op1:x2; op2:x24; dest:x15; op1val:0xfffeffff00002000;  op2val:0xfffffeff01000000
TEST_PKRR_OP(kmaxds32, x15, x2, x24, 0x0000000000000000, 0xfffeffff00002000, 0xfffffeff01000000, x2, x1, 32, x3)

inst_32:
// rs2_w1_val == -129, rs1_w1_val == -1025, rs2_w0_val == 64
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000007;  op2val:0xffffff7f00000040
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000007, 0xffffff7f00000040, x30, x1, 48, x3)

inst_33:
// rs2_w1_val == -65, rs1_w1_val == -1048577, rs1_w0_val == 32768
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00008000;  op2val:0xffffffbf00020000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xffefffff00008000, 0xffffffbf00020000, x30, x1, 64, x3)

inst_34:
// rs2_w1_val == -9, rs2_w0_val == -536870913, rs1_w1_val == -257
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffdffff;  op2val:0xfffffff7dfffffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfffffefffffdffff, 0xfffffff7dfffffff, x30, x1, 80, x3)

inst_35:
// rs2_w1_val == -5, rs1_w0_val == -1025, rs1_w1_val == 131072
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000fffffbff;  op2val:0xfffffffbfffeffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x020000fffffbff, 0xfffffffbfffeffff, x30, x1, 96, x3)

inst_36:
// rs2_w1_val == -3, rs1_w1_val == 16777216
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000055555555;  op2val:0xfffffffd00010000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x100000055555555, 0xfffffffd00010000, x30, x1, 112, x3)

inst_37:
// rs2_w1_val == -2, rs1_w1_val == -1431655766
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa80000000;  op2val:0xfffffffefffffff7
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa80000000, 0xfffffffefffffff7, x30, x1, 128, x3)

inst_38:
// rs2_w1_val == -2147483648, rs2_w0_val == -2147483648
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff40000000;  op2val:0x8000000080000000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x7fffffff40000000, 0x8000000080000000, x30, x1, 144, x3)

inst_39:
// rs2_w1_val == 1073741824, rs1_w1_val == 2048
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000000;  op2val:0x4000000055555555
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x00080000000000, 0x4000000055555555, x30, x1, 160, x3)

inst_40:
// rs2_w1_val == 536870912, rs1_w0_val == -2, rs2_w0_val == 536870912
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffffffe;  op2val:0x2000000020000000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x001000fffffffe, 0x2000000020000000, x30, x1, 176, x3)

inst_41:
// rs2_w1_val == 268435456, rs1_w0_val == 8388608, rs1_w1_val == -5
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00800000;  op2val:0x1000000001000000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00800000, 0x1000000001000000, x30, x1, 192, x3)

inst_42:
// rs2_w1_val == 134217728, rs1_w0_val == -2097153
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcffdfffff;  op2val:0x800000000010000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfffffffcffdfffff, 0x800000000010000, x30, x1, 208, x3)

inst_43:
// rs2_w1_val == 67108864, rs1_w1_val == 2097152
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffffff6;  op2val:0x400000000000010
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x200000fffffff6, 0x400000000000010, x30, x1, 224, x3)

inst_44:
// rs2_w1_val == 33554432, rs1_w1_val == -2
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffffeff;  op2val:0x200000000000004
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfffffffefffffeff, 0x200000000000004, x30, x1, 240, x3)

inst_45:
// rs2_w1_val == 16777216, rs2_w0_val == 512, rs1_w0_val == 4194304
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000400000;  op2val:0x100000000000200
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xc000000000400000, 0x100000000000200, x30, x1, 256, x3)

inst_46:
// rs2_w1_val == 8388608, rs1_w0_val == -16777217, rs2_w0_val == 4096
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffeffffff;  op2val:0x80000000001000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfbfffffffeffffff, 0x80000000001000, x30, x1, 272, x3)

inst_47:
// rs2_w1_val == 4194304, rs2_w0_val == 2097152, rs1_w0_val == 2048, rs1_w1_val == -2147483648
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000800;  op2val:0x40000000200000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x8000000000000800, 0x40000000200000, x30, x1, 288, x3)

inst_48:
// rs2_w1_val == 2097152, rs2_w0_val == 67108864, rs1_w1_val == -513
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00100000;  op2val:0x20000004000000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00100000, 0x20000004000000, x30, x1, 304, x3)

inst_49:
// rs2_w1_val == 1048576, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffefffffff;  op2val:0x10000000000200
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x7fffffffefffffff, 0x10000000000200, x30, x1, 320, x3)

inst_50:
// rs2_w1_val == 524288, rs1_w0_val == 4096, rs2_w0_val == -1048577
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00001000;  op2val:0x080000ffefffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00001000, 0x080000ffefffff, x30, x1, 336, x3)

inst_51:
// rs1_w0_val == 33554432, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff02000000;  op2val:0xffffffdffffffff6
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xffff7fff02000000, 0xffffffdffffffff6, x30, x1, 352, x3)

inst_52:
// rs1_w0_val == 16777216, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000001000000;  op2val:0xffffeffffff7ffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x00000001000000, 0xffffeffffff7ffff, x30, x1, 368, x3)

inst_53:
// rs1_w0_val == 2097152, rs2_w1_val == 1, rs2_w0_val == 134217728
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00200000;  op2val:0x00000108000000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00200000, 0x00000108000000, x30, x1, 384, x3)

inst_54:
// rs1_w0_val == 262144, rs1_w1_val == 1431655765
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500040000;  op2val:0xfffffbff00000005
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x5555555500040000, 0xfffffbff00000005, x30, x1, 400, x3)

inst_55:
// rs1_w0_val == 131072, rs2_w0_val == -4194305, rs1_w1_val == 256
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000020000;  op2val:0x20000000ffbfffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x00010000020000, 0x20000000ffbfffff, x30, x1, 416, x3)

inst_56:
// rs1_w0_val == 65536, rs2_w1_val == 16, rs2_w0_val == -129
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000010000;  op2val:0x000010ffffff7f
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x20000000010000, 0x000010ffffff7f, x30, x1, 432, x3)

inst_57:
// rs1_w0_val == 1024, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000400;  op2val:0xffffbfff00000002
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000400, 0xffffbfff00000002, x30, x1, 448, x3)

inst_58:
// rs1_w0_val == 512, rs2_w0_val == 2147483647, rs1_w1_val == 8388608
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000200;  op2val:0xffffff7f7fffffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x80000000000200, 0xffffff7f7fffffff, x30, x1, 464, x3)

inst_59:
// rs1_w0_val == 256, rs1_w1_val == -2049, rs2_w1_val == 256
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000100;  op2val:0x00010000000004
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000100, 0x00010000000004, x30, x1, 480, x3)

inst_60:
// rs1_w0_val == 128, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000080;  op2val:0xffbfffff00020000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000080, 0xffbfffff00020000, x30, x1, 496, x3)

inst_61:
// rs1_w0_val == 64, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000040;  op2val:0x000007ffefffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xc000000000000040, 0x000007ffefffff, x30, x1, 512, x3)

inst_62:
// rs1_w0_val == 16, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000010;  op2val:0xfffff7ff00020000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x00000000000010, 0xfffff7ff00020000, x30, x1, 528, x3)

inst_63:
// rs1_w0_val == 4, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000004;  op2val:0xffff7ffffdffffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x00200000000004, 0xffff7ffffdffffff, x30, x1, 544, x3)

inst_64:
// rs1_w0_val == 2, rs2_w1_val == 64, rs1_w1_val == -33554433
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000002;  op2val:0x00004008000000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000002, 0x00004008000000, x30, x1, 560, x3)

inst_65:
// rs1_w0_val == -1, rs1_w1_val == 1024
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffffffff;  op2val:0xffdfffffffffffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x000400ffffffff, 0xffdfffffffffffff, x30, x1, 576, x3)

inst_66:
// rs2_w1_val == 262144, rs1_w0_val == -262145, rs1_w1_val == -134217729
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffbffff;  op2val:0x04000040000000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffbffff, 0x04000040000000, x30, x1, 592, x3)

inst_67:
// rs2_w1_val == 131072, rs1_w1_val == -4097, rs1_w0_val == 536870912
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff20000000;  op2val:0x020000ffefffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xffffefff20000000, 0x020000ffefffff, x30, x1, 608, x3)

inst_68:
// rs2_w1_val == 65536, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffffffc;  op2val:0x01000000080000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x40000000fffffffc, 0x01000000080000, x30, x1, 624, x3)

inst_69:
// rs2_w1_val == 32768, rs1_w1_val == -129
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000002;  op2val:0x00800000000007
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000002, 0x00800000000007, x30, x1, 640, x3)

inst_70:
// rs2_w1_val == 16384, rs1_w0_val == -67108865, rs1_w1_val == -33, rs2_w0_val == 8192
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffbffffff;  op2val:0x00400000002000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xffffffdffbffffff, 0x00400000002000, x30, x1, 656, x3)

inst_71:
// rs2_w1_val == 8192, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000008000;  op2val:0x002000fffffff7
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x00100000008000, 0x002000fffffff7, x30, x1, 672, x3)

inst_72:
// rs2_w1_val == 2048, rs1_w0_val == -129, rs1_w1_val == 262144
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000ffffff7f;  op2val:0x00080020000000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x040000ffffff7f, 0x00080020000000, x30, x1, 688, x3)

inst_73:
// rs2_w1_val == 1024, rs1_w1_val == 65536, rs2_w0_val == -2049
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffffffff;  op2val:0x000400fffff7ff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x010000ffffffff, 0x000400fffff7ff, x30, x1, 704, x3)

inst_74:
// rs2_w1_val == 512, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007dfffffff;  op2val:0x00020000004000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x000007dfffffff, 0x00020000004000, x30, x1, 720, x3)

inst_75:
// rs2_w1_val == 128, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000006;  op2val:0x00008000001000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000006, 0x00008000001000, x30, x1, 736, x3)

inst_76:
// rs2_w1_val == 32, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000540000000;  op2val:0x000020ffefffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x00000540000000, 0x000020ffefffff, x30, x1, 752, x3)

inst_77:
// rs2_w1_val == 8, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff40000000;  op2val:0x00000855555555
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfffbffff40000000, 0x00000855555555, x30, x1, 768, x3)

inst_78:
// rs2_w1_val == 4, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007ffdfffff;  op2val:0x00000400040000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x000007ffdfffff, 0x00000400040000, x30, x1, 784, x3)

inst_79:
// rs2_w1_val == 2, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000080000000;  op2val:0x0000023fffffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x100000080000000, 0x0000023fffffff, x30, x1, 800, x3)

inst_80:
// rs2_w1_val == 0, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000040;  op2val:0x000000fffffdff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x00000800000040, 0x000000fffffdff, x30, x1, 816, x3)

inst_81:
// rs2_w1_val == -1, rs1_w0_val == -32769
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffaffff7fff;  op2val:0xfffffffffffff7ff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfffffffaffff7fff, 0xfffffffffffff7ff, x30, x1, 832, x3)

inst_82:
// rs2_w0_val == -1073741825, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000020;  op2val:0x000003bfffffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xc000000000000020, 0x000003bfffffff, x30, x1, 848, x3)

inst_83:
// rs2_w0_val == -268435457, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff20000000;  op2val:0x200000efffffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x7fffffff20000000, 0x200000efffffff, x30, x1, 864, x3)

inst_84:
// rs2_w0_val == -134217729, rs1_w1_val == -17, rs1_w0_val == -4097
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffffefff;  op2val:0xfdfffffff7ffffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xffffffefffffefff, 0xfdfffffff7ffffff, x30, x1, 880, x3)

inst_85:
// rs2_w0_val == -67108865, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000010;  op2val:0xffffeffffbffffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x00002000000010, 0xffffeffffbffffff, x30, x1, 896, x3)

inst_86:
// rs2_w0_val == 32768, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafff7ffff;  op2val:0x10000000008000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfffffffafff7ffff, 0x10000000008000, x30, x1, 912, x3)

inst_87:
// rs2_w0_val == 1024, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000002;  op2val:0x80000000000400
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x00000600000002, 0x80000000000400, x30, x1, 928, x3)

inst_88:
// rs2_w0_val == 256, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000800;  op2val:0x00080000000100
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xefffffff00000800, 0x00080000000100, x30, x1, 944, x3)

inst_89:
// rs2_w0_val == 128, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000083fffffff;  op2val:0x00000100000080
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x0000083fffffff, 0x00000100000080, x30, x1, 960, x3)

inst_90:
// rs2_w0_val == 32, rs1_w0_val == -17
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffffffef;  op2val:0x00800000000020
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x000400ffffffef, 0x00800000000020, x30, x1, 976, x3)

inst_91:
// rs2_w0_val == 8, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00040000;  op2val:0x00000200000008
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xefffffff00040000, 0x00000200000008, x30, x1, 992, x3)

inst_92:
// rs2_w0_val == 1, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00001000;  op2val:0x00002000000001
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x3fffffff00001000, 0x00002000000001, x30, x1, 1008, x3)

inst_93:
// rs1_w1_val == -1073741825, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffffffa;  op2val:0xfffbffffffefffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xbffffffffffffffa, 0xfffbffffffefffff, x30, x1, 1024, x3)

inst_94:
// rs1_w1_val == -16777217, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000007;  op2val:0xffeffffffffffffc
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000007, 0xffeffffffffffffc, x30, x1, 1040, x3)

inst_95:
// rs1_w1_val == -8388609, rs2_w0_val == -1025
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffffffff6;  op2val:0x100000fffffbff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffffff6, 0x100000fffffbff, x30, x1, 1056, x3)

inst_96:
// rs1_w1_val == -4194305, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000008;  op2val:0x00004000000100
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000008, 0x00004000000100, x30, x1, 1072, x3)

inst_97:
// rs1_w1_val == -2097153, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00010000;  op2val:0x2000000fffffffc
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00010000, 0x2000000fffffffc, x30, x1, 1088, x3)

inst_98:
// rs1_w1_val == -524289, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffdfffff;  op2val:0x1000000fdffffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffdfffff, 0x1000000fdffffff, x30, x1, 1104, x3)

inst_99:
// rs1_w1_val == -131073, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000002;  op2val:0x00000700000007
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000002, 0x00000700000007, x30, x1, 1120, x3)

inst_100:
// rs1_w1_val == -65, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf3fffffff;  op2val:0xfff7ffffffffff7f
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xffffffbf3fffffff, 0xfff7ffffffffff7f, x30, x1, 1136, x3)

inst_101:
// rs1_w1_val == -9, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700200000;  op2val:0x400000001000000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfffffff700200000, 0x400000001000000, x30, x1, 1152, x3)

inst_102:
// rs1_w1_val == 536870912, rs1_w0_val == -65537
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffeffff;  op2val:0xfffbffffdfffffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x20000000fffeffff, 0xfffbffffdfffffff, x30, x1, 1168, x3)

inst_103:
// rs1_w1_val == 268435456, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000020;  op2val:0x00000600000200
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x1000000000000020, 0x00000600000200, x30, x1, 1184, x3)

inst_104:
// rs1_w1_val == 134217728, rs1_w0_val == -8388609
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ff7fffff;  op2val:0x00000404000000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x8000000ff7fffff, 0x00000404000000, x30, x1, 1200, x3)

inst_105:
// rs1_w1_val == 33554432, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000ffffffff;  op2val:0xdffffffffffff7ff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x2000000ffffffff, 0xdffffffffffff7ff, x30, x1, 1216, x3)

inst_106:
// rs1_w1_val == 4194304, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffff6;  op2val:0x2000000000000004
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x400000fffffff6, 0x2000000000000004, x30, x1, 1232, x3)

inst_107:
// rs1_w1_val == 1048576, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000100;  op2val:0x2000000000000200
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x10000000000100, 0x2000000000000200, x30, x1, 1248, x3)

inst_108:
// rs1_w1_val == 32768, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800002000000;  op2val:0x7ffffffffffffdff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x00800002000000, 0x7ffffffffffffdff, x30, x1, 1264, x3)

inst_109:
// rs1_w1_val == 16384, rs1_w0_val == -33554433
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000fdffffff;  op2val:0xfffffff6fff7ffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x004000fdffffff, 0xfffffff6fff7ffff, x30, x1, 1280, x3)

inst_110:
// rs1_w1_val == 512, rs2_w0_val == 1048576
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000080000;  op2val:0x00000100100000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x00020000080000, 0x00000100100000, x30, x1, 1296, x3)

inst_111:
// rs1_w1_val == 64, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000009;  op2val:0xfbfffffffffffff8
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x00004000000009, 0xfbfffffffffffff8, x30, x1, 1312, x3)

inst_112:
// rs1_w1_val == 16, rs1_w0_val == -8193
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffffdfff;  op2val:0x00000800080000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x000010ffffdfff, 0x00000800080000, x30, x1, 1328, x3)

inst_113:
// rs1_w1_val == 4, rs2_w0_val == -33
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004ffdfffff;  op2val:0xffffffffffffffdf
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x000004ffdfffff, 0xffffffffffffffdf, x30, x1, 1344, x3)

inst_114:
// rs1_w1_val == 1, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001bfffffff;  op2val:0xffeffffffdffffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x000001bfffffff, 0xffeffffffdffffff, x30, x1, 1360, x3)

inst_115:
// rs1_w1_val == -1, rs2_w0_val == -3
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00400000;  op2val:0x000080fffffffd
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xffffffff00400000, 0x000080fffffffd, x30, x1, 1376, x3)

inst_116:
// rs1_w0_val == -1431655766, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffaaaaaaaa;  op2val:0x02000000020000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfffdffffaaaaaaaa, 0x02000000020000, x30, x1, 1392, x3)

inst_117:
// rs2_w0_val == -16777217, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000800;  op2val:0xff7ffffffeffffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xffffffef00000800, 0xff7ffffffeffffff, x30, x1, 1408, x3)

inst_118:
// rs2_w0_val == -8388609, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000001;  op2val:0xfffffffdff7fffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x00040000000001, 0xfffffffdff7fffff, x30, x1, 1424, x3)

inst_119:
// rs2_w0_val == -2097153, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00040000;  op2val:0xfffffff6ffdfffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00040000, 0xfffffff6ffdfffff, x30, x1, 1440, x3)

inst_120:
// rs1_w0_val == -134217729, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007f7ffffff;  op2val:0x0000037fffffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x000007f7ffffff, 0x0000037fffffff, x30, x1, 1456, x3)

inst_121:
// rs2_w0_val == -262145, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff55555555;  op2val:0x000005fffbffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xefffffff55555555, 0x000005fffbffff, x30, x1, 1472, x3)

inst_122:
// rs2_w0_val == -32769, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003ffffefff;  op2val:0xffefffffffff7fff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x000003ffffefff, 0xffefffffffff7fff, x30, x1, 1488, x3)

inst_123:
// rs2_w0_val == 33554432, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000008;  op2val:0xfffff7ff02000000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000008, 0xfffff7ff02000000, x30, x1, 1504, x3)

inst_124:
// rs2_w0_val == -16385, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffbffff;  op2val:0xfffffbffffffbfff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x1000000fffbffff, 0xfffffbffffffbfff, x30, x1, 1520, x3)

inst_125:
// rs2_w0_val == -8193, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00200000;  op2val:0x020000ffffdfff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x3fffffff00200000, 0x020000ffffdfff, x30, x1, 1536, x3)

inst_126:
// rs2_w0_val == -4097, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffbffff;  op2val:0xffefffffffffefff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xffffffbffffbffff, 0xffefffffffffefff, x30, x1, 1552, x3)

inst_127:
// rs1_w0_val == -513, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffffdff;  op2val:0xffffbfff00000008
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xffdffffffffffdff, 0xffffbfff00000008, x30, x1, 1568, x3)

inst_128:
// rs2_w0_val == -2, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffbfffff;  op2val:0xffffff7ffffffffe
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x40000000ffbfffff, 0xffffff7ffffffffe, x30, x1, 1584, x3)

inst_129:
// rs1_w0_val == -33, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffffdf;  op2val:0x00000200000200
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xffffdfffffffffdf, 0x00000200000200, x30, x1, 1600, x3)

inst_130:
// rs2_w0_val == 268435456, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffffdff;  op2val:0xffffffff10000000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x200000fffffdff, 0xffffffff10000000, x30, x1, 1616, x3)

inst_131:
// rs1_w0_val == -9, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006fffffff7;  op2val:0xfffffeffffbfffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x000006fffffff7, 0xfffffeffffbfffff, x30, x1, 1632, x3)

inst_132:
// rs1_w0_val == -5, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffffffb;  op2val:0xffbfffff00000009
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xffffffbffffffffb, 0xffbfffff00000009, x30, x1, 1648, x3)

inst_133:
// rs1_w0_val == -3, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffffffd;  op2val:0xfffffdff80000000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffffffd, 0xfffffdff80000000, x30, x1, 1664, x3)

inst_134:
// rs2_w0_val == 8388608, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffefffff;  op2val:0x10000000800000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xffffffbfffefffff, 0x10000000800000, x30, x1, 1680, x3)

inst_135:
// rs2_w0_val == 4194304, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000c0000000;  op2val:0x00000700400000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x10000000c0000000, 0x00000700400000, x30, x1, 1696, x3)

inst_136:
// rs1_w0_val == 134217728, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000208000000;  op2val:0xefffffff01000000
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0x00000208000000, 0xefffffff01000000, x30, x1, 1712, x3)

inst_137:
// rs1_w0_val == 67108864, 
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff04000000;  op2val:0x000004fffbffff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xffffefff04000000, 0x000004fffbffff, x30, x1, 1728, x3)

inst_138:
// rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w1_val == -536870913, rs2_w0_val == -257, rs1_w0_val == 1431655765
// opcode: kmaxds32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff55555555;  op2val:0xfffffff6fffffeff
TEST_PKRR_OP(kmaxds32, x31, x30, x29, 0x0000000000000000, 0xdfffffff55555555, 0xfffffff6fffffeff, x30, x1, 1744, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x10_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 220*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
