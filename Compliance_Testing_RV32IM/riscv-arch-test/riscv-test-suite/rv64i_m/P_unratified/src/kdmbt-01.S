
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kdmbt instruction of the RISC-V RV64PZicsr extension for the kdmbt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kdmbt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x31, rs2==x18, rd==x31, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val == 256, rs1_h2_val != rs2_h2_val, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h3_val == -4097, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h1_val == 21845, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h2_val == 128, rs2_h3_val == -21846, rs2_h1_val == 128, rs2_h0_val == 256
// opcode: kdmbt ; op1:x31; op2:x18; dest:x31; op1val:0xefff010055558000;  op2val:0xaaaa008000800100
TEST_PKRR_OP(kdmbt, x31, x31, x18, 0x0000000000000000, 0xefff010055558000, 0xaaaa008000800100, x31, x2, 0, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x9, rs2==x23, rd==x22, rs1_h3_val == rs2_h3_val, rs1_h2_val == 4096, rs2_h1_val == 32767, rs1_h0_val == 2048, rs2_h3_val == -32768, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h2_val == -2, rs2_h0_val == -257, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h3_val == -32768
// opcode: kdmbt ; op1:x9; op2:x23; dest:x22; op1val:0x8000100000090800;  op2val:0x8000fffe7ffffeff
TEST_PKRR_OP(kdmbt, x22, x9, x23, 0x0000000000000000, 0x8000100000090800, 0x8000fffe7ffffeff, x9, x2, 16, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x28, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == -8193, rs1_h1_val == 2048, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h1_val == -33, rs2_h3_val == 4096, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -9, rs1_h2_val == -32768
// opcode: kdmbt ; op1:x30; op2:x30; dest:x28; op1val:0xefff800008000800;  op2val:0x1000dfffffdffff7
TEST_PKRR_OP(kdmbt, x28, x30, x30, 0x0000000000000000, 0xefff800008000800, 0x1000dfffffdffff7, x30, x2, 32, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x20, rs2==x20, rd==x20, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h3_val == -16385, rs2_h0_val == -513, rs2_h2_val == -32768, rs1_h1_val == 8, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == -4097, rs1_h3_val == 16384
// opcode: kdmbt ; op1:x20; op2:x20; dest:x20; op1val:0x4000fffc0008efff;  op2val:0xbfff80000007fdff
TEST_PKRR_OP(kdmbt, x20, x20, x20, 0x0000000000000000, 0x4000fffc0008efff, 0xbfff80000007fdff, x20, x2, 48, x8)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x26, rd==x26, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h0_val == 16384, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val == 256, rs1_h3_val == 32767, rs2_h1_val == 4096, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == 4
// opcode: kdmbt ; op1:x5; op2:x26; dest:x26; op1val:0x7ffffffc01004000;  op2val:0x04000910000003
TEST_PKRR_OP(kdmbt, x26, x5, x26, 0x0000000000000000, 0x7ffffffc01004000, 0x04000910000003, x5, x2, 64, x8)

inst_5:
// rs1==x26, rs2==x14, rd==x27, rs1_h2_val == rs2_h2_val, rs1_h2_val == 8192, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == 8192, rs2_h3_val == 1024, rs2_h1_val == -32768, rs1_h0_val == -21846, rs1_h1_val == -129
// opcode: kdmbt ; op1:x26; op2:x14; dest:x27; op1val:0x092000ff7faaaa;  op2val:0x40020008000fff7
TEST_PKRR_OP(kdmbt, x27, x26, x14, 0x0000000000000000, 0x092000ff7faaaa, 0x40020008000fff7, x26, x2, 80, x8)

inst_6:
// rs1==x7, rs2==x11, rd==x5, rs1_h1_val == rs2_h1_val, rs2_h0_val == -1, rs1_h3_val == -21846, rs1_h0_val == 4096, rs1_h2_val == -2049, rs2_h3_val == 2, rs1_h1_val == -33
// opcode: kdmbt ; op1:x7; op2:x11; dest:x5; op1val:0xaaaaf7ffffdf1000;  op2val:0x028000ffdfffff
TEST_PKRR_OP(kdmbt, x5, x7, x11, 0x0000000000000000, 0xaaaaf7ffffdf1000, 0x028000ffdfffff, x7, x2, 96, x8)

inst_7:
// rs1==x18, rs2==x6, rd==x21, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == 32, rs1_h3_val == 256, rs2_h2_val == -9, rs1_h0_val == 128
// opcode: kdmbt ; op1:x18; op2:x6; dest:x21; op1val:0x1000005c0000080;  op2val:0xaaaafff700060020
TEST_PKRR_OP(kdmbt, x21, x18, x6, 0x0000000000000000, 0x1000005c0000080, 0xaaaafff700060020, x18, x2, 112, x8)

inst_8:
// rs1==x17, rs2==x22, rd==x29, rs1_h0_val == rs2_h0_val, rs1_h2_val == -1025, rs2_h1_val == -65, rs1_h3_val == 32, rs2_h0_val == -32768
// opcode: kdmbt ; op1:x17; op2:x22; dest:x29; op1val:0x20fbfffffc8000;  op2val:0x80000005ffbf8000
TEST_PKRR_OP(kdmbt, x29, x17, x22, 0x0000000000000000, 0x20fbfffffc8000, 0x80000005ffbf8000, x17, x2, 128, x8)

inst_9:
// rs1==x1, rs2==x3, rd==x17, rs2_h3_val == 21845, rs1_h2_val == 2048, rs2_h1_val == 8192, rs1_h1_val == 32767
// opcode: kdmbt ; op1:x1; op2:x3; dest:x17; op1val:0xfffa08007ffffff6;  op2val:0x5555000920000100
TEST_PKRR_OP(kdmbt, x17, x1, x3, 0x0000000000000000, 0xfffa08007ffffff6, 0x5555000920000100, x1, x2, 144, x8)

inst_10:
// rs1==x11, rs2==x21, rd==x16, rs2_h3_val == 32767, rs1_h0_val == 8192, rs1_h3_val == 2048
// opcode: kdmbt ; op1:x11; op2:x21; dest:x16; op1val:0x800fff600072000;  op2val:0x7fff0009fff80006
TEST_PKRR_OP(kdmbt, x16, x11, x21, 0x0000000000000000, 0x800fff600072000, 0x7fff0009fff80006, x11, x2, 160, x8)

inst_11:
// rs1==x23, rs2==x27, rd==x24, rs2_h3_val == -8193, rs2_h2_val == -17, rs1_h0_val == 1024, rs2_h1_val == -257, rs1_h2_val == 32767, rs2_h0_val == -129
// opcode: kdmbt ; op1:x23; op2:x27; dest:x24; op1val:0xfffc7fff55550400;  op2val:0xdfffffeffeffff7f
TEST_PKRR_OP(kdmbt, x24, x23, x27, 0x0000000000000000, 0xfffc7fff55550400, 0xdfffffeffeffff7f, x23, x2, 176, x8)

inst_12:
// rs1==x27, rs2==x10, rd==x14, rs2_h3_val == -4097, rs2_h1_val == -513, rs1_h3_val == 2, rs1_h0_val == -8193
// opcode: kdmbt ; op1:x27; op2:x10; dest:x14; op1val:0x02f7fffffadfff;  op2val:0xefff0005fdfffff6
TEST_PKRR_OP(kdmbt, x14, x27, x10, 0x0000000000000000, 0x02f7fffffadfff, 0xefff0005fdfffff6, x27, x2, 192, x8)

inst_13:
// rs1==x24, rs2==x25, rd==x19, rs2_h3_val == -2049, rs2_h1_val == -3, rs2_h2_val == 256, rs1_h1_val == 512
// opcode: kdmbt ; op1:x24; op2:x25; dest:x19; op1val:0x10008000200efff;  op2val:0xf7ff0100fffdfff7
TEST_PKRR_OP(kdmbt, x19, x24, x25, 0x0000000000000000, 0x10008000200efff, 0xf7ff0100fffdfff7, x24, x2, 208, x8)

inst_14:
// rs1==x6, rs2==x4, rd==x18, rs2_h3_val == -1025, rs1_h3_val == 1, rs2_h0_val == -2049, rs2_h1_val == -5, rs1_h2_val == -1, rs1_h1_val == -21846, rs1_h0_val == 16
// opcode: kdmbt ; op1:x6; op2:x4; dest:x18; op1val:0x01ffffaaaa0010;  op2val:0xfbffffeffffbf7ff
TEST_PKRR_OP(kdmbt, x18, x6, x4, 0x0000000000000000, 0x01ffffaaaa0010, 0xfbffffeffffbf7ff, x6, x2, 224, x8)

inst_15:
// rs1==x28, rs2==x19, rd==x0, rs2_h3_val == -513, rs2_h0_val == -4097, rs1_h1_val == 8192
// opcode: kdmbt ; op1:x28; op2:x19; dest:x0; op1val:0x3fff7fff2000c000;  op2val:0xfdff00802000efff
TEST_PKRR_OP(kdmbt, x0, x28, x19, 0x0000000000000000, 0x3fff7fff2000c000, 0xfdff00802000efff, x28, x2, 240, x5)

inst_16:
// rs1==x3, rs2==x29, rd==x13, rs2_h3_val == -257, rs1_h3_val == -17, rs1_h0_val == 256, rs2_h1_val == 16, rs2_h0_val == 0
// opcode: kdmbt ; op1:x3; op2:x29; dest:x13; op1val:0xffef000300030100;  op2val:0xfeff200000100000
TEST_PKRR_OP(kdmbt, x13, x3, x29, 0x0000000000000000, 0xffef000300030100, 0xfeff200000100000, x3, x2, 256, x5)
RVTEST_SIGBASE(x18,signature_x18_0)

inst_17:
// rs1==x22, rs2==x0, rd==x3, rs2_h3_val == -129, rs1_h3_val == -257, rs2_h1_val == -1, rs1_h0_val == -3, rs1_h2_val == -257
// opcode: kdmbt ; op1:x22; op2:x0; dest:x3; op1val:0xfefffeff0200fffd;  op2val:0xff7fc000ffff0000
TEST_PKRR_OP(kdmbt, x3, x22, x0, 0x0000000000000000, 0xfefffeff0200fffd, 0xff7fc000ffff0000, x22, x18, 0, x5)

inst_18:
// rs1==x4, rs2==x28, rd==x10, rs2_h3_val == -65, rs2_h2_val == 8, rs1_h3_val == 128
// opcode: kdmbt ; op1:x4; op2:x28; dest:x10; op1val:0x800006ff7f1000;  op2val:0xffbf000800100006
TEST_PKRR_OP(kdmbt, x10, x4, x28, 0x0000000000000000, 0x800006ff7f1000, 0xffbf000800100006, x4, x18, 16, x5)

inst_19:
// rs1==x16, rs2==x8, rd==x25, rs2_h3_val == -33, rs1_h1_val == -1025, rs2_h1_val == 0, rs2_h0_val == 4, rs2_h2_val == 0
// opcode: kdmbt ; op1:x16; op2:x8; dest:x25; op1val:0xfff6fff6fbffdfff;  op2val:0xffdf000000000004
TEST_PKRR_OP(kdmbt, x25, x16, x8, 0x0000000000000000, 0xfff6fff6fbffdfff, 0xffdf000000000004, x16, x18, 32, x5)

inst_20:
// rs1==x19, rs2==x31, rd==x8, rs2_h3_val == -17, rs2_h0_val == 2
// opcode: kdmbt ; op1:x19; op2:x31; dest:x8; op1val:0x05000700080003;  op2val:0xffeffff800030002
TEST_PKRR_OP(kdmbt, x8, x19, x31, 0x0000000000000000, 0x05000700080003, 0xffeffff800030002, x19, x18, 48, x5)

inst_21:
// rs1==x14, rs2==x13, rd==x7, rs2_h3_val == -9, rs2_h0_val == 64, rs1_h3_val == 16, rs2_h1_val == -17, rs1_h1_val == -9
// opcode: kdmbt ; op1:x14; op2:x13; dest:x7; op1val:0x108000fff7efff;  op2val:0xfff7fffcffef0040
TEST_PKRR_OP(kdmbt, x7, x14, x13, 0x0000000000000000, 0x108000fff7efff, 0xfff7fffcffef0040, x14, x18, 64, x5)

inst_22:
// rs1==x8, rs2==x24, rd==x23, rs2_h3_val == -5, rs1_h2_val == -9, rs1_h3_val == 8192, rs1_h0_val == 64
// opcode: kdmbt ; op1:x8; op2:x24; dest:x23; op1val:0x2000fff7ff7f0040;  op2val:0xfffbfff6ffbffff7
TEST_PKRR_OP(kdmbt, x23, x8, x24, 0x0000000000000000, 0x2000fff7ff7f0040, 0xfffbfff6ffbffff7, x8, x18, 80, x5)

inst_23:
// rs1==x13, rs2==x16, rd==x15, rs2_h3_val == -3, rs1_h2_val == 64, rs1_h3_val == 512, rs1_h0_val == -65, rs2_h2_val == 4
// opcode: kdmbt ; op1:x13; op2:x16; dest:x15; op1val:0x20000402000ffbf;  op2val:0xfffd00041000fff7
TEST_PKRR_OP(kdmbt, x15, x13, x16, 0x0000000000000000, 0x20000402000ffbf, 0xfffd00041000fff7, x13, x18, 96, x5)

inst_24:
// rs1==x10, rs2==x1, rd==x4, rs2_h3_val == -2, rs2_h0_val == -8193, rs1_h2_val == 21845
// opcode: kdmbt ; op1:x10; op2:x1; dest:x4; op1val:0x3fff5555ffdf0080;  op2val:0xfffe0005fdffdfff
TEST_PKRR_OP(kdmbt, x4, x10, x1, 0x0000000000000000, 0x3fff5555ffdf0080, 0xfffe0005fdffdfff, x10, x18, 112, x5)

inst_25:
// rs1==x29, rs2==x17, rd==x2, rs2_h3_val == 16384, rs1_h2_val == -4097, rs2_h0_val == -5, rs1_h3_val == -33, rs1_h0_val == 21845
// opcode: kdmbt ; op1:x29; op2:x17; dest:x2; op1val:0xffdfefff20005555;  op2val:0x400000050080fffb
TEST_PKRR_OP(kdmbt, x2, x29, x17, 0x0000000000000000, 0xffdfefff20005555, 0x400000050080fffb, x29, x18, 128, x5)

inst_26:
// rs1==x21, rs2==x12, rd==x6, rs2_h3_val == 8192, rs2_h2_val == 32, rs1_h2_val == -8193, rs1_h1_val == -8193
// opcode: kdmbt ; op1:x21; op2:x12; dest:x6; op1val:0x03dfffdfff0040;  op2val:0x200000203ffffffc
TEST_PKRR_OP(kdmbt, x6, x21, x12, 0x0000000000000000, 0x03dfffdfff0040, 0x200000203ffffffc, x21, x18, 144, x5)

inst_27:
// rs1==x12, rs2==x9, rd==x1, rs2_h3_val == 2048, rs1_h2_val == -65, rs1_h3_val == 21845, rs2_h0_val == -1025
// opcode: kdmbt ; op1:x12; op2:x9; dest:x1; op1val:0x5555ffbf7fffefff;  op2val:0x8000004fffafbff
TEST_PKRR_OP(kdmbt, x1, x12, x9, 0x0000000000000000, 0x5555ffbf7fffefff, 0x8000004fffafbff, x12, x18, 160, x5)

inst_28:
// rs1==x2, rs2==x7, rd==x9, rs2_h3_val == 512, rs1_h1_val == 4, rs2_h0_val == 1
// opcode: kdmbt ; op1:x2; op2:x7; dest:x9; op1val:0x06feff00040040;  op2val:0x2000080fffd0001
TEST_PKRR_OP(kdmbt, x9, x2, x7, 0x0000000000000000, 0x06feff00040040, 0x2000080fffd0001, x2, x18, 176, x5)

inst_29:
// rs1==x0, rs2==x2, rd==x30, rs2_h3_val == 256, rs2_h2_val == -4097, rs2_h1_val == -2049, rs1_h3_val == -65, rs1_h1_val == -4097, rs1_h0_val == -1, rs2_h0_val == 16384
// opcode: kdmbt ; op1:x0; op2:x2; dest:x30; op1val:0xffbf5555efffffff;  op2val:0x100effff7ff4000
TEST_PKRR_OP(kdmbt, x30, x0, x2, 0x0000000000000000, 0xffbf5555efffffff, 0x100effff7ff4000, x0, x18, 192, x5)

inst_30:
// rs1==x25, rs2==x15, rd==x11, rs2_h3_val == 128, rs2_h1_val == 512, rs1_h1_val == -2, rs1_h0_val == -257
// opcode: kdmbt ; op1:x25; op2:x15; dest:x11; op1val:0xc000ffbffffefeff;  op2val:0x80fff902000003
TEST_PKRR_OP(kdmbt, x11, x25, x15, 0x0000000000000000, 0xc000ffbffffefeff, 0x80fff902000003, x25, x18, 208, x5)

inst_31:
// rs1==x15, rs2==x5, rd==x12, rs2_h3_val == 64, rs1_h1_val == -5, rs1_h3_val == -16385, rs2_h0_val == -33, rs2_h1_val == 1024, rs1_h2_val == -2
// opcode: kdmbt ; op1:x15; op2:x5; dest:x12; op1val:0xbffffffefffbfffc;  op2val:0x4000080400ffdf
TEST_PKRR_OP(kdmbt, x12, x15, x5, 0x0000000000000000, 0xbffffffefffbfffc, 0x4000080400ffdf, x15, x18, 224, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs2_h3_val == 32, rs1_h2_val == -16385, rs2_h1_val == 256, rs1_h1_val == -257, rs2_h0_val == 512
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaabffffeff3fff;  op2val:0x20000001000200
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xaaaabffffeff3fff, 0x20000001000200, x30, x1, 0, x2)

inst_33:
// rs2_h3_val == 16, rs1_h2_val == 512
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0200fffa2000;  op2val:0x103ffffffffffc
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xffbf0200fffa2000, 0x103ffffffffffc, x30, x1, 16, x2)

inst_34:
// rs2_h3_val == 8, rs1_h1_val == 16, rs2_h1_val == 2048
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x5555000300100010;  op2val:0x0800030800ff7f
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x5555000300100010, 0x0800030800ff7f, x30, x1, 32, x2)

inst_35:
// rs1_h1_val == -3, rs1_h3_val == -2, rs2_h1_val == 1, rs1_h0_val == -5
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffbffffdfffb;  op2val:0xfff920000001efff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfffeffbffffdfffb, 0xfff920000001efff, x30, x1, 48, x2)

inst_36:
// rs1_h1_val == -32768, rs1_h2_val == 0
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x0300008000efff;  op2val:0xfff6fff9fffafbff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x0300008000efff, 0xfff6fff9fffafbff, x30, x1, 64, x2)

inst_37:
// rs1_h1_val == 16384, rs2_h2_val == 2048, rs2_h0_val == 128
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x07efff4000fffc;  op2val:0xff7f0800ffff0080
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x07efff4000fffc, 0xff7f0800ffff0080, x30, x1, 80, x2)

inst_38:
// rs1_h1_val == 4096, rs1_h3_val == -1, rs2_h2_val == -3, rs1_h0_val == -513, rs1_h2_val == -5, rs2_h1_val == 32
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb1000fdff;  op2val:0x80fffd0020fffc
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfffffffb1000fdff, 0x80fffd0020fffc, x30, x1, 96, x2)

inst_39:
// rs1_h1_val == 1024, rs1_h2_val == 1024
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa04000400fffc;  op2val:0xaaaafff800800006
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xaaaa04000400fffc, 0xaaaafff800800006, x30, x1, 112, x2)

inst_40:
// rs1_h1_val == 128, rs2_h2_val == -33, rs2_h1_val == 2, rs2_h0_val == -2, rs1_h2_val == -129
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x800ff7f00808000;  op2val:0xfffbffdf0002fffe
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x800ff7f00808000, 0xfffbffdf0002fffe, x30, x1, 128, x2)

inst_41:
// rs1_h1_val == 64, rs2_h2_val == -257, rs1_h3_val == -2049
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffc00000400003;  op2val:0xffbffeff0080fffe
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xf7ffc00000400003, 0xffbffeff0080fffe, x30, x1, 144, x2)

inst_42:
// rs1_h1_val == 32, rs1_h2_val == -33, rs2_h0_val == 32767
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x800ffdf00203fff;  op2val:0x063ffffff87fff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x800ffdf00203fff, 0x063ffffff87fff, x30, x1, 160, x2)

inst_43:
// rs1_h1_val == 2, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x20fffc00020040;  op2val:0x5555feff00070080
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x20fffc00020040, 0x5555feff00070080, x30, x1, 176, x2)

inst_44:
// rs1_h1_val == 1, rs2_h2_val == -1, rs2_h0_val == -17, rs1_h2_val == -3, rs1_h0_val == 0
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x800fffd00010000;  op2val:0xaaaafffffff8ffef
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x800fffd00010000, 0xaaaafffffff8ffef, x30, x1, 192, x2)

inst_45:
// rs1_h1_val == 0, rs1_h3_val == -3, rs2_h2_val == 512
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffd000000000003;  op2val:0x020200fffa0100
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfffd000000000003, 0x020200fffa0100, x30, x1, 208, x2)

inst_46:
// rs1_h1_val == -1, rs1_h0_val == -17
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffd3fffffffffef;  op2val:0xfff6fff802003fff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfffd3fffffffffef, 0xfff6fff802003fff, x30, x1, 224, x2)

inst_47:
// rs1_h0_val == 32767, rs1_h3_val == -8193, rs1_h2_val == 128
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0080fff97fff;  op2val:0xf7ffdffffff68000
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xdfff0080fff97fff, 0xf7ffdffffff68000, x30, x1, 240, x2)

inst_48:
// rs1_h0_val == -16385, rs2_h2_val == -16385
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x400001000001bfff;  op2val:0xfff6bfff0001fbff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x400001000001bfff, 0xfff6bfff0001fbff, x30, x1, 256, x2)

inst_49:
// rs1_h0_val == -2049, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff60800ff7ff7ff;  op2val:0x400000807fff0040
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfff60800ff7ff7ff, 0x400000807fff0040, x30, x1, 272, x2)

inst_50:
// rs1_h0_val == -1025, rs2_h1_val == -2, rs2_h0_val == 8
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffdfffcfbff;  op2val:0x7ffffff8fffe0008
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x4000fffdfffcfbff, 0x7ffffff8fffe0008, x30, x1, 288, x2)

inst_51:
// rs1_h0_val == -129, rs2_h2_val == 2
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x02fffc0200ff7f;  op2val:0x0700020000ffdf
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x02fffc0200ff7f, 0x0700020000ffdf, x30, x1, 304, x2)

inst_52:
// rs1_h0_val == -33, rs2_h0_val == 2048, rs2_h2_val == 1024, rs1_h2_val == 8
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x0600080005ffdf;  op2val:0xffdf040010000800
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x0600080005ffdf, 0xffdf040010000800, x30, x1, 320, x2)

inst_53:
// rs1_h0_val == -9, rs2_h0_val == -3
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffcbffffffdfff7;  op2val:0x40fffffdfffffd
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfffcbffffffdfff7, 0x40fffffdfffffd, x30, x1, 336, x2)

inst_54:
// rs1_h0_val == -2, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x80055550007fffe;  op2val:0xfdfffffc0005dfff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x80055550007fffe, 0xfdfffffc0005dfff, x30, x1, 352, x2)

inst_55:
// rs1_h0_val == 512, rs2_h1_val == -9
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffe08000200;  op2val:0x070800fff7efff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfffefffe08000200, 0x070800fff7efff, x30, x1, 368, x2)

inst_56:
// rs1_h0_val == 32, rs2_h1_val == 4
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0400fffe0020;  op2val:0x0500090004c000
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x3fff0400fffe0020, 0x0500090004c000, x30, x1, 384, x2)

inst_57:
// rs1_h0_val == 8, rs2_h1_val == -8193
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xffff0008fff70008;  op2val:0xfeff0008dfff0200
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xffff0008fff70008, 0xfeff0008dfff0200, x30, x1, 400, x2)

inst_58:
// rs2_h0_val == -21846, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffefff9ff7f0007;  op2val:0xfff60007dfffaaaa
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfffefff9ff7f0007, 0xfff60007dfffaaaa, x30, x1, 416, x2)

inst_59:
// rs2_h0_val == 21845, rs1_h2_val == 2
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffa000280008000;  op2val:0xffef0009f7ff5555
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfffa000280008000, 0xffef0009f7ff5555, x30, x1, 432, x2)

inst_60:
// rs2_h0_val == -16385, rs2_h2_val == 1
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffdffff80007;  op2val:0x0300010010bfff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xffdfffdffff80007, 0x0300010010bfff, x30, x1, 448, x2)

inst_61:
// rs2_h0_val == -65, rs2_h2_val == -5
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffaff7f1000;  op2val:0xfffcfffbfff6ffbf
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfff9fffaff7f1000, 0xfffcfffbfff6ffbf, x30, x1, 464, x2)

inst_62:
// rs2_h0_val == 8192, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000900050200;  op2val:0x05080001002000
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x7fff000900050200, 0x05080001002000, x30, x1, 480, x2)

inst_63:
// rs2_h0_val == 4096, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xffdfdfff0020fffa;  op2val:0xdfff000600051000
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xffdfdfff0020fffa, 0xdfff000600051000, x30, x1, 496, x2)

inst_64:
// rs2_h0_val == 1024, rs2_h2_val == -1025
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff87ffffbfffff8;  op2val:0xc000fbff00030400
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfff87ffffbfffff8, 0xc000fbff00030400, x30, x1, 512, x2)

inst_65:
// rs2_h0_val == 16, rs1_h1_val == -17
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffbffeffbff;  op2val:0x05000600020010
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfff6fffbffeffbff, 0x05000600020010, x30, x1, 528, x2)

inst_66:
// rs1_h3_val == -1025, rs1_h2_val == -17, rs2_h1_val == -129
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffefdfffffbf;  op2val:0x02fffcff7fbfff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfbffffefdfffffbf, 0x02fffcff7fbfff, x30, x1, 544, x2)

inst_67:
// rs1_h3_val == -513, rs1_h1_val == -513, rs2_h1_val == 21845
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0800fdff0020;  op2val:0xffefffff5555ffef
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfdff0800fdff0020, 0xffefffff5555ffef, x30, x1, 560, x2)

inst_68:
// rs1_h0_val == 4, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00090004;  op2val:0x800002fffffff7
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfffffbff00090004, 0x800002fffffff7, x30, x1, 576, x2)

inst_69:
// rs1_h3_val == -129, rs1_h2_val == 32
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0020ffef0080;  op2val:0x20000500070004
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xff7f0020ffef0080, 0x20000500070004, x30, x1, 592, x2)

inst_70:
// rs1_h0_val == 2, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xdfffff7f00200002;  op2val:0x7ffffffafffc0800
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xdfffff7f00200002, 0x7ffffffafffc0800, x30, x1, 608, x2)

inst_71:
// rs1_h0_val == 1, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x02000800800001;  op2val:0x80001003fff0008
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x02000800800001, 0x80001003fff0008, x30, x1, 624, x2)

inst_72:
// rs1_h3_val == -9, rs2_h3_val == -1
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff70006fffa1000;  op2val:0xffff0020fff70100
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfff70006fffa1000, 0xffff0020fff70100, x30, x1, 640, x2)

inst_73:
// rs1_h3_val == -5, rs2_h3_val == 0
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffb100000040007;  op2val:0x000006ffef0007
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfffb100000040007, 0x000006ffef0007, x30, x1, 656, x2)

inst_74:
// rs2_h3_val == 1, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff8ff7f0010ffff;  op2val:0x010020ffdffbff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfff8ff7f0010ffff, 0x010020ffdffbff, x30, x1, 672, x2)

inst_75:
// rs2_h2_val == -21846, rs1_h1_val == -65
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x070003ffbf0008;  op2val:0xff7faaaafeff0400
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x070003ffbf0008, 0xff7faaaafeff0400, x30, x1, 688, x2)

inst_76:
// rs2_h2_val == 21845, rs1_h3_val == 4096
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x1000ff7f0008fff8;  op2val:0x800555500108000
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x1000ff7f0008fff8, 0x800555500108000, x30, x1, 704, x2)

inst_77:
// rs1_h3_val == 1024, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x400c0000003fdff;  op2val:0xffeffff60100ffdf
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x400c0000003fdff, 0xffeffff60100ffdf, x30, x1, 720, x2)

inst_78:
// rs2_h2_val == -2049, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff60004ffdf;  op2val:0xffbff7ff7fff0010
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfffffff60004ffdf, 0xffbff7ff7fff0010, x30, x1, 736, x2)

inst_79:
// rs1_h3_val == 64, rs2_h1_val == -1025
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x400020ffbf4000;  op2val:0x80dffffbff0080
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x400020ffbf4000, 0x80dffffbff0080, x30, x1, 752, x2)

inst_80:
// rs2_h2_val == -513, rs1_h2_val == 16
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff001008008000;  op2val:0xff7ffdff0009fdff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xf7ff001008008000, 0xff7ffdff0009fdff, x30, x1, 768, x2)

inst_81:
// rs2_h2_val == -129, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x5555ff7f0004dfff;  op2val:0xfff7ff7f00040004
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x5555ff7f0004dfff, 0xfff7ff7f00040004, x30, x1, 784, x2)

inst_82:
// rs1_h3_val == 8, rs2_h1_val == 8
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x08fff80005fffd;  op2val:0xf7ff000800088000
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x08fff80005fffd, 0xf7ff000800088000, x30, x1, 800, x2)

inst_83:
// rs2_h2_val == -65, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff9c0001000fbff;  op2val:0xfff9ffbf00100010
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfff9c0001000fbff, 0xfff9ffbf00100010, x30, x1, 816, x2)

inst_84:
// rs1_h3_val == 4, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x040800aaaabfff;  op2val:0x5555ffbffffafffa
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x040800aaaabfff, 0x5555ffbffffafffa, x30, x1, 832, x2)

inst_85:
// rs1_h3_val == 0, rs2_h1_val == -4097
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x003fff00080400;  op2val:0xfffffff9efff0001
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x003fff00080400, 0xfffffff9efff0001, x30, x1, 848, x2)

inst_86:
// rs1_h2_val == -21846, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfdffaaaaffbf0400;  op2val:0xfff9ffdffff6ffef
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfdffaaaaffbf0400, 0xfff9ffdffff6ffef, x30, x1, 864, x2)

inst_87:
// rs1_h2_val == 16384, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x4004000fffe7fff;  op2val:0xfffeefff0000fbff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x4004000fffe7fff, 0xfffeefff0000fbff, x30, x1, 880, x2)

inst_88:
// rs2_h1_val == -21846, rs1_h2_val == -513
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fdfffffa4000;  op2val:0x800003aaaafeff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfff9fdfffffa4000, 0x800003aaaafeff, x30, x1, 896, x2)

inst_89:
// rs2_h1_val == -16385, rs2_h2_val == 32767
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffeaaaa0006;  op2val:0xff7f7fffbfff1000
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfffefffeaaaa0006, 0xff7f7fffbfff1000, x30, x1, 912, x2)

inst_90:
// rs1_h2_val == 4, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x20000440000006;  op2val:0xaaaa000800020100
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x20000440000006, 0xaaaa000800020100, x30, x1, 928, x2)

inst_91:
// rs1_h2_val == 1, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff60001fff80800;  op2val:0xffbf2000fff60000
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfff60001fff80800, 0xffbf2000fff60000, x30, x1, 944, x2)

inst_92:
// rs2_h2_val == 16384, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffb20000005;  op2val:0x4004000dfff2000
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xffdffffb20000005, 0x4004000dfff2000, x30, x1, 960, x2)

inst_93:
// rs2_h2_val == 4096, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff8080000030006;  op2val:0x001000fffc7fff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfff8080000030006, 0x001000fffc7fff, x30, x1, 976, x2)

inst_94:
// rs2_h1_val == 16384, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfdff4000aaaadfff;  op2val:0xff7f00044000fdff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfdff4000aaaadfff, 0xff7f00044000fdff, x30, x1, 992, x2)

inst_95:
// rs1_h1_val == -16385, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffbbfffbfffefff;  op2val:0xfff8ffef00030008
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfffbbfffbfffefff, 0xfff8ffef00030008, x30, x1, 1008, x2)

inst_96:
// rs2_h2_val == 64, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x04fff92000fff8;  op2val:0xaaaa0040ff7f0008
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x04fff92000fff8, 0xaaaa0040ff7f0008, x30, x1, 1024, x2)

inst_97:
// rs2_h2_val == 16, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0001fefff7ff;  op2val:0xffdf0010ffbf0004
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfffa0001fefff7ff, 0xffdf0010ffbf0004, x30, x1, 1040, x2)

inst_98:
// rs2_h1_val == 64, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xdfffbfffffff0007;  op2val:0x200fdff0040bfff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xdfffbfffffff0007, 0x200fdff0040bfff, x30, x1, 1056, x2)

inst_99:
// rs1_h1_val == -2049, 
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff70040f7fffffb;  op2val:0xfbfffdfffff6ffff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfff70040f7fffffb, 0xfbfffdfffff6ffff, x30, x1, 1072, x2)

inst_100:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == -8193, rs1_h1_val == 2048, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h1_val == -33, rs2_h3_val == 4096, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -9, rs1_h2_val == -32768
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xefff800008000800;  op2val:0x1000dfffffdffff7
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xefff800008000800, 0x1000dfffffdffff7, x30, x1, 1088, x2)

inst_101:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h3_val == -16385, rs2_h0_val == -513, rs2_h2_val == -32768, rs1_h1_val == 8, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == -4097, rs1_h3_val == 16384
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffc0008efff;  op2val:0xbfff80000007fdff
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0x4000fffc0008efff, 0xbfff80000007fdff, x30, x1, 1104, x2)

inst_102:
// rs2_h3_val == -129, rs1_h3_val == -257, rs2_h1_val == -1, rs1_h0_val == -3, rs1_h2_val == -257
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xfefffeff0200fffd;  op2val:0xff7fc000ffff0000
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xfefffeff0200fffd, 0xff7fc000ffff0000, x30, x1, 1120, x2)

inst_103:
// rs2_h3_val == 256, rs2_h2_val == -4097, rs2_h1_val == -2049, rs1_h3_val == -65, rs1_h1_val == -4097, rs1_h0_val == -1, rs2_h0_val == 16384
// opcode: kdmbt ; op1:x30; op2:x29; dest:x31; op1val:0xffbf5555efffffff;  op2val:0x100effff7ff4000
TEST_PKRR_OP(kdmbt, x31, x30, x29, 0x0000000000000000, 0xffbf5555efffffff, 0x100effff7ff4000, x30, x1, 1136, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x18_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 144*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
