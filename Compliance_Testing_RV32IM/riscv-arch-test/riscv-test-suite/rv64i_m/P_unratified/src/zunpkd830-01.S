
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the zunpkd830 instruction of the RISC-V RV64PZicsr extension for the zunpkd830 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",zunpkd830)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1==x5, rd==x3, rs1_b0_val == 0, rs1_b7_val == 254, rs1_b1_val == 0, rs1_b4_val == 253, rs1_b6_val == 255
// opcode: zunpkd830 ; op1:x5; dest:x3; op1val:0xfeff07fd060b0000;
TEST_RD_OP( zunpkd830, x3, x5, 0x0000000000000000, 0xfeff07fd060b0000, x8, 0, x15)

inst_1:
// rs1==x30, rd==x28, rs1_b7_val == 170, rs1_b4_val == 2, rs1_b1_val == 255, rs1_b5_val == 0, rs1_b6_val == 253
// opcode: zunpkd830 ; op1:x30; dest:x28; op1val:0xaafd00020d09ff12;
TEST_RD_OP( zunpkd830, x28, x30, 0x0000000000000000, 0xaafd00020d09ff12, x8, 8, x15)

inst_2:
// rs1==x23, rd==x19, rs1_b7_val == 85, rs1_b5_val == 32, rs1_b0_val == 253
// opcode: zunpkd830 ; op1:x23; dest:x19; op1val:0x5507201307030afd;
TEST_RD_OP( zunpkd830, x19, x23, 0x0000000000000000, 0x5507201307030afd, x8, 16, x15)

inst_3:
// rs1==x2, rd==x0, rs1_b7_val == 127, rs1_b0_val == 170, rs1_b3_val == 32, rs1_b6_val == 1, rs1_b2_val == 255
// opcode: zunpkd830 ; op1:x2; dest:x0; op1val:0x7f010a0f20ff0baa;
TEST_RD_OP( zunpkd830, x0, x2, 0x0000000000000000, 0x7f010a0f20ff0baa, x8, 24, x15)

inst_4:
// rs1==x20, rd==x26, rs1_b7_val == 191, rs1_b6_val == 223, rs1_b2_val == 254, rs1_b0_val == 128
// opcode: zunpkd830 ; op1:x20; dest:x26; op1val:0xbfdf110507fe0380;
TEST_RD_OP( zunpkd830, x26, x20, 0x0000000000000000, 0xbfdf110507fe0380, x8, 32, x15)

inst_5:
// rs1==x22, rd==x10, rs1_b7_val == 223, rs1_b3_val == 255, rs1_b4_val == 128, rs1_b2_val == 223, rs1_b1_val == 2, rs1_b6_val == 127
// opcode: zunpkd830 ; op1:x22; dest:x10; op1val:0xdf7f0a80ffdf0206;
TEST_RD_OP( zunpkd830, x10, x22, 0x0000000000000000, 0xdf7f0a80ffdf0206, x8, 40, x15)

inst_6:
// rs1==x6, rd==x14, rs1_b7_val == 239, rs1_b2_val == 170
// opcode: zunpkd830 ; op1:x6; dest:x14; op1val:0xefdf0d0c12aa130b;
TEST_RD_OP( zunpkd830, x14, x6, 0x0000000000000000, 0xefdf0d0c12aa130b, x8, 48, x15)

inst_7:
// rs1==x4, rd==x6, rs1_b7_val == 247, rs1_b4_val == 254, rs1_b1_val == 4, rs1_b2_val == 247, rs1_b3_val == 85, rs1_b0_val == 239, rs1_b5_val == 4
// opcode: zunpkd830 ; op1:x4; dest:x6; op1val:0xf70f04fe55f704ef;
TEST_RD_OP( zunpkd830, x6, x4, 0x0000000000000000, 0xf70f04fe55f704ef, x8, 56, x15)

inst_8:
// rs1==x10, rd==x25, rs1_b7_val == 251, rs1_b3_val == 0, rs1_b0_val == 255
// opcode: zunpkd830 ; op1:x10; dest:x25; op1val:0xfb0b110f000f0cff;
TEST_RD_OP( zunpkd830, x25, x10, 0x0000000000000000, 0xfb0b110f000f0cff, x8, 64, x15)

inst_9:
// rs1==x29, rd==x24, rs1_b7_val == 253, rs1_b2_val == 1, rs1_b1_val == 128, rs1_b3_val == 16
// opcode: zunpkd830 ; op1:x29; dest:x24; op1val:0xfd06130f10018006;
TEST_RD_OP( zunpkd830, x24, x29, 0x0000000000000000, 0xfd06130f10018006, x8, 72, x15)

inst_10:
// rs1==x31, rd==x20, rs1_b7_val == 128, rs1_b3_val == 1, rs1_b1_val == 254, rs1_b5_val == 191, rs1_b0_val == 191, rs1_b2_val == 2
// opcode: zunpkd830 ; op1:x31; dest:x20; op1val:0x8013bf0e0102febf;
TEST_RD_OP( zunpkd830, x20, x31, 0x0000000000000000, 0x8013bf0e0102febf, x8, 80, x15)

inst_11:
// rs1==x21, rd==x23, rs1_b7_val == 64, rs1_b2_val == 253, rs1_b4_val == 170
// opcode: zunpkd830 ; op1:x21; dest:x23; op1val:0x40ff0eaa12fd07ff;
TEST_RD_OP( zunpkd830, x23, x21, 0x0000000000000000, 0x40ff0eaa12fd07ff, x8, 88, x15)

inst_12:
// rs1==x17, rd==x11, rs1_b7_val == 32, rs1_b3_val == 4, rs1_b0_val == 247, rs1_b2_val == 191, rs1_b1_val == 239
// opcode: zunpkd830 ; op1:x17; dest:x11; op1val:0x200d0ffe04bfeff7;
TEST_RD_OP( zunpkd830, x11, x17, 0x0000000000000000, 0x200d0ffe04bfeff7, x8, 96, x15)

inst_13:
// rs1==x19, rd==x22, rs1_b7_val == 16, rs1_b2_val == 0
// opcode: zunpkd830 ; op1:x19; dest:x22; op1val:0x10010012110080fd;
TEST_RD_OP( zunpkd830, x22, x19, 0x0000000000000000, 0x10010012110080fd, x8, 104, x15)

inst_14:
// rs1==x26, rd==x2, rs1_b7_val == 8, rs1_b0_val == 251, rs1_b3_val == 223, rs1_b4_val == 4, rs1_b5_val == 223
// opcode: zunpkd830 ; op1:x26; dest:x2; op1val:0x80bdf04dffd0efb;
TEST_RD_OP( zunpkd830, x2, x26, 0x0000000000000000, 0x80bdf04dffd0efb, x8, 112, x15)

inst_15:
// rs1==x25, rd==x29, rs1_b7_val == 4, rs1_b4_val == 64, rs1_b2_val == 251
// opcode: zunpkd830 ; op1:x25; dest:x29; op1val:0x407064000fb090d;
TEST_RD_OP( zunpkd830, x29, x25, 0x0000000000000000, 0x407064000fb090d, x8, 120, x15)

inst_16:
// rs1==x16, rd==x5, rs1_b7_val == 2, rs1_b6_val == 0, rs1_b1_val == 253
// opcode: zunpkd830 ; op1:x16; dest:x5; op1val:0x2000e0913fffdff;
TEST_RD_OP( zunpkd830, x5, x16, 0x0000000000000000, 0x2000e0913fffdff, x8, 128, x15)

inst_17:
// rs1==x13, rd==x31, rs1_b7_val == 1, rs1_b5_val == 251, rs1_b4_val == 239, rs1_b1_val == 127
// opcode: zunpkd830 ; op1:x13; dest:x31; op1val:0x101fbef13fd7f13;
TEST_RD_OP( zunpkd830, x31, x13, 0x0000000000000000, 0x101fbef13fd7f13, x8, 136, x15)

inst_18:
// rs1==x12, rd==x16, rs1_b7_val == 255, rs1_b3_val == 253, rs1_b5_val == 85
// opcode: zunpkd830 ; op1:x12; dest:x16; op1val:0xff015502fdbf12fd;
TEST_RD_OP( zunpkd830, x16, x12, 0x0000000000000000, 0xff015502fdbf12fd, x8, 144, x15)

inst_19:
// rs1==x18, rd==x1, rs1_b7_val == 0, rs1_b5_val == 128, rs1_b1_val == 191
// opcode: zunpkd830 ; op1:x18; dest:x1; op1val:0x0580111212bf0a;
TEST_RD_OP( zunpkd830, x1, x18, 0x0000000000000000, 0x0580111212bf0a, x8, 152, x15)

inst_20:
// rs1==x7, rd==x9, rs1_b6_val == 170, rs1_b5_val == 254, rs1_b1_val == 16, rs1_b3_val == 239
// opcode: zunpkd830 ; op1:x7; dest:x9; op1val:0xaaafe80effd100e;
TEST_RD_OP( zunpkd830, x9, x7, 0x0000000000000000, 0xaaafe80effd100e, x8, 160, x15)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_21:
// rs1==x1, rd==x15, rs1_b6_val == 85, rs1_b0_val == 254, rs1_b5_val == 16
// opcode: zunpkd830 ; op1:x1; dest:x15; op1val:0xbf55100bfd0513fe;
TEST_RD_OP( zunpkd830, x15, x1, 0x0000000000000000, 0xbf55100bfd0513fe, x2, 0, x5)

inst_22:
// rs1==x8, rd==x4, rs1_b6_val == 191, rs1_b5_val == 253, rs1_b2_val == 8, rs1_b4_val == 255
// opcode: zunpkd830 ; op1:x8; dest:x4; op1val:0xaabffdff110880fd;
TEST_RD_OP( zunpkd830, x4, x8, 0x0000000000000000, 0xaabffdff110880fd, x2, 8, x5)

inst_23:
// rs1==x0, rd==x30, rs1_b6_val == 239, 
// opcode: zunpkd830 ; op1:x0; dest:x30; op1val:0x7fef200a100e11fe;
TEST_RD_OP( zunpkd830, x30, x0, 0x0000000000000000, 0x7fef200a100e11fe, x2, 16, x5)

inst_24:
// rs1==x3, rd==x8, rs1_b6_val == 247, rs1_b2_val == 85
// opcode: zunpkd830 ; op1:x3; dest:x8; op1val:0x3f712061055bf11;
TEST_RD_OP( zunpkd830, x8, x3, 0x0000000000000000, 0x3f712061055bf11, x2, 24, x5)

inst_25:
// rs1==x15, rd==x13, rs1_b6_val == 251, rs1_b5_val == 64, rs1_b1_val == 32
// opcode: zunpkd830 ; op1:x15; dest:x13; op1val:0xbfb400b04552011;
TEST_RD_OP( zunpkd830, x13, x15, 0x0000000000000000, 0xbfb400b04552011, x2, 32, x5)

inst_26:
// rs1==x11, rd==x18, rs1_b6_val == 254, rs1_b1_val == 247
// opcode: zunpkd830 ; op1:x11; dest:x18; op1val:0xaafe1102fff7f70f;
TEST_RD_OP( zunpkd830, x18, x11, 0x0000000000000000, 0xaafe1102fff7f70f, x2, 40, x5)

inst_27:
// rs1==x24, rd==x27, rs1_b1_val == 251, rs1_b4_val == 0, rs1_b3_val == 247
// opcode: zunpkd830 ; op1:x24; dest:x27; op1val:0x0b0f00f70cfb03;
TEST_RD_OP( zunpkd830, x27, x24, 0x0000000000000000, 0x0b0f00f70cfb03, x2, 48, x5)

inst_28:
// rs1==x27, rd==x17, rs1_b1_val == 64, rs1_b4_val == 247, rs1_b6_val == 8
// opcode: zunpkd830 ; op1:x27; dest:x17; op1val:0x30809f70f034003;
TEST_RD_OP( zunpkd830, x17, x27, 0x0000000000000000, 0x30809f70f034003, x2, 56, x5)

inst_29:
// rs1==x14, rd==x21, rs1_b1_val == 8, rs1_b4_val == 16
// opcode: zunpkd830 ; op1:x14; dest:x21; op1val:0x80df051010080805;
TEST_RD_OP( zunpkd830, x21, x14, 0x0000000000000000, 0x80df051010080805, x2, 64, x5)

inst_30:
// rs1==x9, rd==x12, rs1_b1_val == 1, rs1_b5_val == 2
// opcode: zunpkd830 ; op1:x9; dest:x12; op1val:0x8060203ff09010d;
TEST_RD_OP( zunpkd830, x12, x9, 0x0000000000000000, 0x8060203ff09010d, x2, 72, x5)

inst_31:
// rs1==x28, rd==x7, rs1_b0_val == 85, 
// opcode: zunpkd830 ; op1:x28; dest:x7; op1val:0x907400420067f55;
TEST_RD_OP( zunpkd830, x7, x28, 0x0000000000000000, 0x907400420067f55, x2, 80, x5)

inst_32:
// rs1_b0_val == 127, rs1_b6_val == 64, rs1_b2_val == 128, rs1_b5_val == 247
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xfd40f70d10800a7f;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0xfd40f70d10800a7f, x2, 88, x5)

inst_33:
// rs1_b0_val == 223, rs1_b4_val == 223, rs1_b1_val == 85, rs1_b5_val == 127, rs1_b3_val == 64
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xbf067fdf400955df;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0xbf067fdf400955df, x2, 96, x5)

inst_34:
// rs1_b0_val == 64, rs1_b3_val == 170
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xa7f0505aa0d8040;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0xa7f0505aa0d8040, x2, 104, x5)

inst_35:
// rs1_b0_val == 32, rs1_b5_val == 1, rs1_b2_val == 4, rs1_b6_val == 2
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x90201fdef040720;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0x90201fdef040720, x2, 112, x5)

inst_36:
// rs1_b0_val == 16, rs1_b5_val == 255
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xfe02ff0e1012bf10;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0xfe02ff0e1012bf10, x2, 120, x5)

inst_37:
// rs1_b0_val == 8, rs1_b2_val == 64
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x80fe04aa4040fd08;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0x80fe04aa4040fd08, x2, 128, x5)

inst_38:
// rs1_b4_val == 191, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x80fffbf1207bf40;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0x80fffbf1207bf40, x2, 136, x5)

inst_39:
// rs1_b4_val == 251, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x40aa06fbf740ef7f;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0x40aa06fbf740ef7f, x2, 144, x5)

inst_40:
// rs1_b4_val == 32, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xef0e0220010dfffe;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0xef0e0220010dfffe, x2, 152, x5)

inst_41:
// rs1_b4_val == 8, rs1_b2_val == 127, rs1_b3_val == 8
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x7ffe0608087f13df;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0x7ffe0608087f13df, x2, 160, x5)

inst_42:
// rs1_b4_val == 1, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x80550b010c13fbdf;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0x80550b010c13fbdf, x2, 168, x5)

inst_43:
// rs1_b3_val == 127, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xb0f000d7f0e1100;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0xb0f000d7f0e1100, x2, 176, x5)

inst_44:
// rs1_b3_val == 191, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xaa0780bfbf011280;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0xaa0780bfbf011280, x2, 184, x5)

inst_45:
// rs1_b3_val == 251, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x7ef0011fb8020f7;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0x7ef0011fb8020f7, x2, 192, x5)

inst_46:
// rs1_b3_val == 254, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x4ff0cfbfe030803;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0x4ff0cfbfe030803, x2, 200, x5)

inst_47:
// rs1_b3_val == 128, rs1_b2_val == 16
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x12ff0d1080100813;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0x12ff0d1080100813, x2, 208, x5)

inst_48:
// rs1_b0_val == 4, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xaaef03efff550d04;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0xaaef03efff550d04, x2, 216, x5)

inst_49:
// rs1_b0_val == 2, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xc01feaa03fb8002;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0xc01feaa03fb8002, x2, 224, x5)

inst_50:
// rs1_b6_val == 32, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xf20bf080e551010;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0xf20bf080e551010, x2, 232, x5)

inst_51:
// rs1_b3_val == 2, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x80b0ef7020e13fb;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0x80b0ef7020e13fb, x2, 240, x5)

inst_52:
// rs1_b6_val == 16, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x10100eaa0a1305fb;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0x10100eaa0a1305fb, x2, 248, x5)

inst_53:
// rs1_b6_val == 4, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x204bf200f0fff08;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0x204bf200f0fff08, x2, 256, x5)

inst_54:
// rs1_b5_val == 170, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xdf13aa0f0c12130c;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0xdf13aa0f0c12130c, x2, 264, x5)

inst_55:
// rs1_b2_val == 239, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xbf0106ef07ef0efd;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0xbf0106ef07ef0efd, x2, 272, x5)

inst_56:
// rs1_b5_val == 239, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x703ef0210045580;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0x703ef0210045580, x2, 280, x5)

inst_57:
// rs1_b2_val == 32, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x10fd12fe202011aa;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0x10fd12fe202011aa, x2, 288, x5)

inst_58:
// rs1_b4_val == 127, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x55f7077f03010205;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0x55f7077f03010205, x2, 296, x5)

inst_59:
// rs1_b5_val == 8, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x401208df0d0d4020;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0x401208df0d0d4020, x2, 304, x5)

inst_60:
// rs1_b4_val == 85, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x60b8055aabf0e20;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0x60b8055aabf0e20, x2, 312, x5)

inst_61:
// rs1_b1_val == 170, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xf70902000080aadf;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0xf70902000080aadf, x2, 320, x5)

inst_62:
// rs1_b1_val == 223, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xef0d0efd0b0cdf80;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0xef0d0efd0b0cdf80, x2, 328, x5)

inst_63:
// rs1_b0_val == 1, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0x130912f704800301;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0x130912f704800301, x2, 336, x5)

inst_64:
// rs1_b6_val == 128, 
// opcode: zunpkd830 ; op1:x30; dest:x31; op1val:0xbf80200b0d13fd0d;
TEST_RD_OP( zunpkd830, x31, x30, 0x0000000000000000, 0xbf80200b0d13fd0d, x2, 344, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 44*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
