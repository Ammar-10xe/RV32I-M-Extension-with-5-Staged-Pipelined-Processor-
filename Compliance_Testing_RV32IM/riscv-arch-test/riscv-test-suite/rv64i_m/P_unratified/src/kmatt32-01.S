
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmatt32 instruction of the RISC-V RV64PZicsr extension for the kmatt32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmatt32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1 == rd != rs2, rs1==x7, rs2==x10, rd==x7, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w1_val == 536870912, rs2_w0_val == -3, rs1_w1_val == 1073741824
// opcode: kmatt32 ; op1:x7; op2:x10; dest:x7; op1val:0x4000000080000000;  op2val:0x20000000fffffffd
TEST_PKRR_OP(kmatt32, x7, x7, x10, 0x0000000000000000, 0x4000000080000000, 0x20000000fffffffd, x7, x9, 0, x4)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x8, rs2==x23, rd==x1, rs1_w1_val == rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w0_val == 512, rs2_w1_val == -134217729, rs1_w1_val == -134217729
// opcode: kmatt32 ; op1:x8; op2:x23; dest:x1; op1val:0xf7fffffffffffff6;  op2val:0xf7ffffff00000200
TEST_PKRR_OP(kmatt32, x1, x8, x23, 0x0000000000000000, 0xf7fffffffffffff6, 0xf7ffffff00000200, x8, x9, 16, x4)

inst_2:
// rs1 == rs2 != rd, rs1==x20, rs2==x20, rd==x3, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w1_val == -2097153, rs2_w0_val == 128, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 2097152, rs1_w0_val == 67108864
// opcode: kmatt32 ; op1:x20; op2:x20; dest:x3; op1val:0xffdfffff04000000;  op2val:0x20000000000080
TEST_PKRR_OP(kmatt32, x3, x20, x20, 0x0000000000000000, 0xffdfffff04000000, 0x20000000000080, x20, x9, 32, x4)

inst_3:
// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val == 256, rs2_w1_val == -1431655766, rs2_w0_val == 8192, rs1_w1_val == 33554432
// opcode: kmatt32 ; op1:x6; op2:x6; dest:x6; op1val:0x200000000000100;  op2val:0xaaaaaaaa00002000
TEST_PKRR_OP(kmatt32, x6, x6, x6, 0x0000000000000000, 0x200000000000100, 0xaaaaaaaa00002000, x6, x9, 48, x4)

inst_4:
// rs2 == rd != rs1, rs1==x11, rs2==x21, rd==x21, rs1_w0_val == rs2_w0_val, rs1_w0_val == 128, rs1_w1_val == -2049
// opcode: kmatt32 ; op1:x11; op2:x21; dest:x21; op1val:0xfffff7ff00000080;  op2val:0x00000500000080
TEST_PKRR_OP(kmatt32, x21, x11, x21, 0x0000000000000000, 0xfffff7ff00000080, 0x00000500000080, x11, x9, 64, x4)

inst_5:
// rs1==x25, rs2==x11, rd==x0, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w0_val == 1431655765, rs1_w1_val == 262144, rs2_w1_val == 8388608
// opcode: kmatt32 ; op1:x25; op2:x11; dest:x0; op1val:0x04000055555555;  op2val:0x800000fffffff8
TEST_PKRR_OP(kmatt32, x0, x25, x11, 0x0000000000000000, 0x04000055555555, 0x800000fffffff8, x25, x9, 80, x4)

inst_6:
// rs1==x19, rs2==x22, rd==x10, rs2_w1_val == 1431655765, rs1_w1_val == 2097152, rs2_w0_val == -2097153, rs1_w0_val == -268435457
// opcode: kmatt32 ; op1:x19; op2:x22; dest:x10; op1val:0x200000efffffff;  op2val:0x55555555ffdfffff
TEST_PKRR_OP(kmatt32, x10, x19, x22, 0x0000000000000000, 0x200000efffffff, 0x55555555ffdfffff, x19, x9, 96, x4)

inst_7:
// rs1==x24, rs2==x12, rd==x30, rs2_w1_val == 2147483647, rs1_w1_val == 8192, rs2_w0_val == -536870913
// opcode: kmatt32 ; op1:x24; op2:x12; dest:x30; op1val:0x00200000000006;  op2val:0x7fffffffdfffffff
TEST_PKRR_OP(kmatt32, x30, x24, x12, 0x0000000000000000, 0x00200000000006, 0x7fffffffdfffffff, x24, x9, 112, x4)

inst_8:
// rs1==x27, rs2==x2, rd==x31, rs2_w1_val == -1073741825, rs1_w0_val == -131073, rs1_w1_val == 1024, rs2_w0_val == -33
// opcode: kmatt32 ; op1:x27; op2:x2; dest:x31; op1val:0x000400fffdffff;  op2val:0xbfffffffffffffdf
TEST_PKRR_OP(kmatt32, x31, x27, x2, 0x0000000000000000, 0x000400fffdffff, 0xbfffffffffffffdf, x27, x9, 128, x4)

inst_9:
// rs1==x28, rs2==x13, rd==x12, rs2_w1_val == -536870913, rs2_w0_val == 262144, rs1_w0_val == 32768, rs1_w1_val == -16385
// opcode: kmatt32 ; op1:x28; op2:x13; dest:x12; op1val:0xffffbfff00008000;  op2val:0xdfffffff00040000
TEST_PKRR_OP(kmatt32, x12, x28, x13, 0x0000000000000000, 0xffffbfff00008000, 0xdfffffff00040000, x28, x9, 144, x4)

inst_10:
// rs1==x17, rs2==x27, rd==x23, rs2_w1_val == -268435457, rs1_w1_val == -1048577, rs2_w0_val == 2097152
// opcode: kmatt32 ; op1:x17; op2:x27; dest:x23; op1val:0xffeffffffffffffa;  op2val:0xefffffff00200000
TEST_PKRR_OP(kmatt32, x23, x17, x27, 0x0000000000000000, 0xffeffffffffffffa, 0xefffffff00200000, x17, x9, 160, x4)

inst_11:
// rs1==x29, rs2==x5, rd==x27, rs2_w1_val == -67108865, rs1_w1_val == -33, rs1_w0_val == -513, rs2_w0_val == 32
// opcode: kmatt32 ; op1:x29; op2:x5; dest:x27; op1val:0xffffffdffffffdff;  op2val:0xfbffffff00000020
TEST_PKRR_OP(kmatt32, x27, x29, x5, 0x0000000000000000, 0xffffffdffffffdff, 0xfbffffff00000020, x29, x9, 176, x4)

inst_12:
// rs1==x23, rs2==x1, rd==x20, rs2_w1_val == -33554433, rs2_w0_val == -2, rs1_w0_val == -1073741825
// opcode: kmatt32 ; op1:x23; op2:x1; dest:x20; op1val:0x200000bfffffff;  op2val:0xfdfffffffffffffe
TEST_PKRR_OP(kmatt32, x20, x23, x1, 0x0000000000000000, 0x200000bfffffff, 0xfdfffffffffffffe, x23, x9, 192, x4)

inst_13:
// rs1==x13, rs2==x26, rd==x28, rs2_w1_val == -16777217, rs1_w0_val == 16777216, rs2_w0_val == 256, rs1_w1_val == 134217728
// opcode: kmatt32 ; op1:x13; op2:x26; dest:x28; op1val:0x800000001000000;  op2val:0xfeffffff00000100
TEST_PKRR_OP(kmatt32, x28, x13, x26, 0x0000000000000000, 0x800000001000000, 0xfeffffff00000100, x13, x9, 208, x4)

inst_14:
// rs1==x31, rs2==x17, rd==x15, rs2_w1_val == -8388609, rs2_w0_val == 32768
// opcode: kmatt32 ; op1:x31; op2:x17; dest:x15; op1val:0xfffffffafffffff6;  op2val:0xff7fffff00008000
TEST_PKRR_OP(kmatt32, x15, x31, x17, 0x0000000000000000, 0xfffffffafffffff6, 0xff7fffff00008000, x31, x9, 224, x4)

inst_15:
// rs1==x22, rs2==x4, rd==x14, rs2_w1_val == -4194305, rs1_w1_val == 536870912, rs2_w0_val == -16777217, rs1_w0_val == 2097152
// opcode: kmatt32 ; op1:x22; op2:x4; dest:x14; op1val:0x2000000000200000;  op2val:0xffbffffffeffffff
TEST_PKRR_OP(kmatt32, x14, x22, x4, 0x0000000000000000, 0x2000000000200000, 0xffbffffffeffffff, x22, x9, 240, x12)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_16:
// rs1==x30, rs2==x24, rd==x9, rs2_w1_val == -2097153, rs2_w0_val == -129, rs1_w0_val == -1048577, rs1_w1_val == -2147483648
// opcode: kmatt32 ; op1:x30; op2:x24; dest:x9; op1val:0x80000000ffefffff;  op2val:0xffdfffffffffff7f
TEST_PKRR_OP(kmatt32, x9, x30, x24, 0x0000000000000000, 0x80000000ffefffff, 0xffdfffffffffff7f, x30, x6, 0, x12)

inst_17:
// rs1==x9, rs2==x14, rd==x18, rs2_w1_val == -1048577, rs1_w0_val == -1431655766, rs2_w0_val == 4194304, rs1_w1_val == 131072
// opcode: kmatt32 ; op1:x9; op2:x14; dest:x18; op1val:0x020000aaaaaaaa;  op2val:0xffefffff00400000
TEST_PKRR_OP(kmatt32, x18, x9, x14, 0x0000000000000000, 0x020000aaaaaaaa, 0xffefffff00400000, x9, x6, 16, x12)

inst_18:
// rs1==x3, rs2==x15, rd==x13, rs2_w1_val == -524289, rs1_w1_val == -4097, rs1_w0_val == 64
// opcode: kmatt32 ; op1:x3; op2:x15; dest:x13; op1val:0xffffefff00000040;  op2val:0xfff7ffff00400000
TEST_PKRR_OP(kmatt32, x13, x3, x15, 0x0000000000000000, 0xffffefff00000040, 0xfff7ffff00400000, x3, x6, 32, x12)

inst_19:
// rs1==x2, rs2==x7, rd==x5, rs2_w1_val == -262145, rs1_w0_val == 8388608, rs1_w1_val == -1431655766
// opcode: kmatt32 ; op1:x2; op2:x7; dest:x5; op1val:0xaaaaaaaa00800000;  op2val:0xfffbffff00000005
TEST_PKRR_OP(kmatt32, x5, x2, x7, 0x0000000000000000, 0xaaaaaaaa00800000, 0xfffbffff00000005, x2, x6, 48, x12)

inst_20:
// rs1==x0, rs2==x25, rd==x4, rs2_w1_val == -131073, rs1_w1_val == 0
// opcode: kmatt32 ; op1:x0; op2:x25; dest:x4; op1val:0x00000004000000;  op2val:0xfffdffff00000020
TEST_PKRR_OP(kmatt32, x4, x0, x25, 0x0000000000000000, 0x00000004000000, 0xfffdffff00000020, x0, x6, 64, x12)

inst_21:
// rs1==x26, rs2==x30, rd==x11, rs2_w1_val == -65537, rs1_w0_val == 512, rs1_w1_val == 268435456, rs2_w0_val == 16384
// opcode: kmatt32 ; op1:x26; op2:x30; dest:x11; op1val:0x1000000000000200;  op2val:0xfffeffff00004000
TEST_PKRR_OP(kmatt32, x11, x26, x30, 0x0000000000000000, 0x1000000000000200, 0xfffeffff00004000, x26, x6, 80, x12)

inst_22:
// rs1==x18, rs2==x3, rd==x29, rs2_w1_val == -32769, rs1_w1_val == 1431655765, rs1_w0_val == -4097
// opcode: kmatt32 ; op1:x18; op2:x3; dest:x29; op1val:0x55555555ffffefff;  op2val:0xffff7fff00400000
TEST_PKRR_OP(kmatt32, x29, x18, x3, 0x0000000000000000, 0x55555555ffffefff, 0xffff7fff00400000, x18, x6, 96, x12)

inst_23:
// rs1==x14, rs2==x16, rd==x25, rs2_w1_val == -16385, rs1_w1_val == 64, rs1_w0_val == -262145
// opcode: kmatt32 ; op1:x14; op2:x16; dest:x25; op1val:0x000040fffbffff;  op2val:0xffffbfff00000005
TEST_PKRR_OP(kmatt32, x25, x14, x16, 0x0000000000000000, 0x000040fffbffff, 0xffffbfff00000005, x14, x6, 112, x12)

inst_24:
// rs1==x16, rs2==x0, rd==x8, rs2_w1_val == -8193, rs1_w0_val == 16384, rs1_w1_val == 524288
// opcode: kmatt32 ; op1:x16; op2:x0; dest:x8; op1val:0x08000000004000;  op2val:0xffffdfff00002000
TEST_PKRR_OP(kmatt32, x8, x16, x0, 0x0000000000000000, 0x08000000004000, 0xffffdfff00002000, x16, x6, 128, x12)

inst_25:
// rs1==x1, rs2==x28, rd==x26, rs2_w1_val == -4097, rs2_w0_val == -513, rs1_w0_val == 268435456
// opcode: kmatt32 ; op1:x1; op2:x28; dest:x26; op1val:0xffefffff10000000;  op2val:0xffffeffffffffdff
TEST_PKRR_OP(kmatt32, x26, x1, x28, 0x0000000000000000, 0xffefffff10000000, 0xffffeffffffffdff, x1, x6, 144, x12)

inst_26:
// rs1==x21, rs2==x31, rd==x19, rs2_w1_val == -2049, rs1_w1_val == -1025, rs1_w0_val == 8192, rs2_w0_val == -134217729
// opcode: kmatt32 ; op1:x21; op2:x31; dest:x19; op1val:0xfffffbff00002000;  op2val:0xfffff7fff7ffffff
TEST_PKRR_OP(kmatt32, x19, x21, x31, 0x0000000000000000, 0xfffffbff00002000, 0xfffff7fff7ffffff, x21, x6, 160, x12)

inst_27:
// rs1==x10, rs2==x19, rd==x2, rs2_w1_val == -1025, rs1_w0_val == 65536, rs1_w1_val == 67108864, rs2_w0_val == -1048577
// opcode: kmatt32 ; op1:x10; op2:x19; dest:x2; op1val:0x400000000010000;  op2val:0xfffffbffffefffff
TEST_PKRR_OP(kmatt32, x2, x10, x19, 0x0000000000000000, 0x400000000010000, 0xfffffbffffefffff, x10, x6, 176, x12)

inst_28:
// rs1==x15, rs2==x9, rd==x17, rs2_w1_val == -513, 
// opcode: kmatt32 ; op1:x15; op2:x9; dest:x17; op1val:0xffffbffffffffdff;  op2val:0xfffffdff00000009
TEST_PKRR_OP(kmatt32, x17, x15, x9, 0x0000000000000000, 0xffffbffffffffdff, 0xfffffdff00000009, x15, x6, 192, x12)

inst_29:
// rs1==x4, rs2==x8, rd==x24, rs2_w1_val == -257, rs1_w1_val == -1073741825, rs1_w0_val == 1
// opcode: kmatt32 ; op1:x4; op2:x8; dest:x24; op1val:0xbfffffff00000001;  op2val:0xfffffeff00200000
TEST_PKRR_OP(kmatt32, x24, x4, x8, 0x0000000000000000, 0xbfffffff00000001, 0xfffffeff00200000, x4, x6, 208, x2)

inst_30:
// rs1==x12, rs2==x18, rd==x22, rs2_w1_val == -129, rs1_w1_val == 2
// opcode: kmatt32 ; op1:x12; op2:x18; dest:x22; op1val:0x00000200000100;  op2val:0xffffff7f00000005
TEST_PKRR_OP(kmatt32, x22, x12, x18, 0x0000000000000000, 0x00000200000100, 0xffffff7f00000005, x12, x6, 224, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x5, rs2==x29, rd==x16, rs2_w1_val == -65, rs2_w0_val == -1
// opcode: kmatt32 ; op1:x5; op2:x29; dest:x16; op1val:0xffeffffffffffff9;  op2val:0xffffffbfffffffff
TEST_PKRR_OP(kmatt32, x16, x5, x29, 0x0000000000000000, 0xffeffffffffffff9, 0xffffffbfffffffff, x5, x1, 0, x2)

inst_32:
// rs2_w1_val == -33, rs1_w0_val == -8388609
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfff7fffff;  op2val:0xffffffdffeffffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xffffffdfff7fffff, 0xffffffdffeffffff, x30, x1, 16, x2)

inst_33:
// rs2_w1_val == -17, rs1_w0_val == -3, rs2_w0_val == 268435456
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffffffd;  op2val:0xffffffef10000000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x040000fffffffd, 0xffffffef10000000, x30, x1, 32, x2)

inst_34:
// rs2_w1_val == -9, rs2_w0_val == -67108865
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffffffffffd;  op2val:0xfffffff7fbffffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x3ffffffffffffffd, 0xfffffff7fbffffff, x30, x1, 48, x2)

inst_35:
// rs2_w1_val == -5, rs1_w1_val == 8388608
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffdff;  op2val:0xfffffffb00002000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x800000fffffdff, 0xfffffffb00002000, x30, x1, 64, x2)

inst_36:
// rs2_w1_val == -3, rs1_w1_val == 32
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020efffffff;  op2val:0xfffffffdffffffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x000020efffffff, 0xfffffffdffffffff, x30, x1, 80, x2)

inst_37:
// rs2_w1_val == -2, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafffffff8;  op2val:0xfffffffefffffdff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffffffafffffff8, 0xfffffffefffffdff, x30, x1, 96, x2)

inst_38:
// rs2_w1_val == -2147483648, rs2_w0_val == -5
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x555555553fffffff;  op2val:0x80000000fffffffb
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x555555553fffffff, 0x80000000fffffffb, x30, x1, 112, x2)

inst_39:
// rs2_w1_val == 1073741824, rs2_w0_val == -1073741825
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000efffffff;  op2val:0x40000000bfffffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x2000000efffffff, 0x40000000bfffffff, x30, x1, 128, x2)

inst_40:
// rs2_w1_val == 268435456, rs1_w1_val == 512, rs2_w0_val == -8193, rs1_w0_val == -9
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200fffffff7;  op2val:0x10000000ffffdfff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x000200fffffff7, 0x10000000ffffdfff, x30, x1, 144, x2)

inst_41:
// rs2_w1_val == 134217728, rs2_w0_val == -131073, rs1_w1_val == -65537
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffffbffff;  op2val:0x8000000fffdffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffefffffffbffff, 0x8000000fffdffff, x30, x1, 160, x2)

inst_42:
// rs2_w1_val == 67108864, rs2_w0_val == -257
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffffffc;  op2val:0x4000000fffffeff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffffffc, 0x4000000fffffeff, x30, x1, 176, x2)

inst_43:
// rs2_w1_val == 33554432, rs1_w0_val == 131072, rs1_w1_val == -67108865, rs2_w0_val == -17
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00020000;  op2val:0x2000000ffffffef
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00020000, 0x2000000ffffffef, x30, x1, 192, x2)

inst_44:
// rs2_w1_val == 16777216, rs1_w0_val == -129
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffff7f;  op2val:0x1000000feffffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfbffffffffffff7f, 0x1000000feffffff, x30, x1, 208, x2)

inst_45:
// rs2_w1_val == 4194304, rs1_w0_val == -8193, rs1_w1_val == 32768
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffffdfff;  op2val:0x400000fffffffe
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x008000ffffdfff, 0x400000fffffffe, x30, x1, 224, x2)

inst_46:
// rs2_w1_val == 1048576, rs1_w0_val == 2, rs2_w0_val == -2147483648
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000002;  op2val:0x10000080000000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000002, 0x10000080000000, x30, x1, 240, x2)

inst_47:
// rs2_w1_val == 524288, rs1_w1_val == 1048576, rs1_w0_val == 2048, rs2_w0_val == 8
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000800;  op2val:0x08000000000008
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x10000000000800, 0x08000000000008, x30, x1, 256, x2)

inst_48:
// rs2_w1_val == 262144, rs2_w0_val == 67108864, rs1_w0_val == -257, rs1_w1_val == -129
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffffeff;  op2val:0x04000004000000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffeff, 0x04000004000000, x30, x1, 272, x2)

inst_49:
// rs1_w0_val == 33554432, rs1_w1_val == 256
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010002000000;  op2val:0x000005ffffff7f
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x00010002000000, 0x000005ffffff7f, x30, x1, 288, x2)

inst_50:
// rs1_w0_val == 4194304, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000400000;  op2val:0xffffdfffffefffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x10000000400000, 0xffffdfffffefffff, x30, x1, 304, x2)

inst_51:
// rs1_w0_val == 1048576, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00100000;  op2val:0xfffff7fffffffff8
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00100000, 0xfffff7fffffffff8, x30, x1, 320, x2)

inst_52:
// rs1_w0_val == 524288, rs1_w1_val == 65536
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000080000;  op2val:0x4000000ffefffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x01000000080000, 0x4000000ffefffff, x30, x1, 336, x2)

inst_53:
// rs1_w0_val == 262144, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00040000;  op2val:0x4000000ffdfffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00040000, 0x4000000ffdfffff, x30, x1, 352, x2)

inst_54:
// rs1_w0_val == 4096, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900001000;  op2val:0xffffdfff00200000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x00000900001000, 0xffffdfff00200000, x30, x1, 368, x2)

inst_55:
// rs1_w0_val == 1024, rs2_w0_val == 65536, rs2_w1_val == 2
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000400;  op2val:0x00000200010000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x8000000000000400, 0x00000200010000, x30, x1, 384, x2)

inst_56:
// rs1_w0_val == 32, rs2_w0_val == 536870912
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000020;  op2val:0xfdffffff20000000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000020, 0xfdffffff20000000, x30, x1, 400, x2)

inst_57:
// rs1_w0_val == 16, rs2_w0_val == -268435457
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000010;  op2val:0xfffffff9efffffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x5555555500000010, 0xfffffff9efffffff, x30, x1, 416, x2)

inst_58:
// rs1_w0_val == 8, rs1_w1_val == -65, rs2_w0_val == 524288
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000008;  op2val:0x200000000080000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000008, 0x200000000080000, x30, x1, 432, x2)

inst_59:
// rs1_w0_val == 4, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000004;  op2val:0xffdfffff00000003
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x00000000000004, 0xffdfffff00000003, x30, x1, 448, x2)

inst_60:
// rs1_w0_val == 0, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000000;  op2val:0xfffff7ffffefffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000000, 0xfffff7ffffefffff, x30, x1, 464, x2)

inst_61:
// rs1_w0_val == -1, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffffffff;  op2val:0x20000000fffdffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffffbffffffffff, 0x20000000fffdffff, x30, x1, 480, x2)

inst_62:
// rs2_w1_val == 131072, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00002000;  op2val:0x02000000000008
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00002000, 0x02000000000008, x30, x1, 496, x2)

inst_63:
// rs2_w1_val == 65536, rs1_w1_val == 4194304, rs1_w0_val == -5
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffffb;  op2val:0x010000fffffffb
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x400000fffffffb, 0x010000fffffffb, x30, x1, 512, x2)

inst_64:
// rs2_w1_val == 32768, rs1_w1_val == -524289
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffdfff;  op2val:0x008000ffdfffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffffdfff, 0x008000ffdfffff, x30, x1, 528, x2)

inst_65:
// rs2_w1_val == 16384, rs2_w0_val == -524289
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000007;  op2val:0x004000fff7ffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x04000000000007, 0x004000fff7ffff, x30, x1, 544, x2)

inst_66:
// rs2_w1_val == 8192, rs1_w1_val == 4
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000100;  op2val:0x00200080000000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x00000400000100, 0x00200080000000, x30, x1, 560, x2)

inst_67:
// rs2_w1_val == 4096, rs1_w0_val == -67108865, rs2_w0_val == -32769
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffbffffff;  op2val:0x001000ffff7fff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfbfffffffbffffff, 0x001000ffff7fff, x30, x1, 576, x2)

inst_68:
// rs2_w1_val == 2048, rs1_w0_val == -32769
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200ffff7fff;  op2val:0x00080000000200
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x000200ffff7fff, 0x00080000000200, x30, x1, 592, x2)

inst_69:
// rs2_w1_val == 1024, rs1_w1_val == -513
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00004000;  op2val:0x000400fffffffa
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00004000, 0x000400fffffffa, x30, x1, 608, x2)

inst_70:
// rs2_w1_val == 512, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffffffd;  op2val:0x000200dfffffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x010000fffffffd, 0x000200dfffffff, x30, x1, 624, x2)

inst_71:
// rs2_w1_val == 256, rs1_w0_val == -1025, rs1_w1_val == 1
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffffbff;  op2val:0x000100ffff7fff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x000001fffffbff, 0x000100ffff7fff, x30, x1, 640, x2)

inst_72:
// rs2_w1_val == 128, rs1_w0_val == -2097153
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006ffdfffff;  op2val:0x00008000000200
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x000006ffdfffff, 0x00008000000200, x30, x1, 656, x2)

inst_73:
// rs2_w1_val == 64, rs2_w0_val == 8388608
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004004000000;  op2val:0x00004000800000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x00004004000000, 0x00004000800000, x30, x1, 672, x2)

inst_74:
// rs2_w1_val == 32, rs2_w0_val == -1431655766
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000ff7fffff;  op2val:0x000020aaaaaaaa
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x020000ff7fffff, 0x000020aaaaaaaa, x30, x1, 688, x2)

inst_75:
// rs2_w1_val == 16, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500000006;  op2val:0x00001000800000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x00000500000006, 0x00001000800000, x30, x1, 704, x2)

inst_76:
// rs2_w1_val == 8, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900000006;  op2val:0x000008fffffffd
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffffff900000006, 0x000008fffffffd, x30, x1, 720, x2)

inst_77:
// rs2_w1_val == 4, rs2_w0_val == 16777216
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000006;  op2val:0x00000401000000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x00040000000006, 0x00000401000000, x30, x1, 736, x2)

inst_78:
// rs2_w1_val == 1, rs1_w1_val == 2147483647
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000001;  op2val:0x000001ffffffdf
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000001, 0x000001ffffffdf, x30, x1, 752, x2)

inst_79:
// rs2_w1_val == 0, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000040000;  op2val:0x000000c0000000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x80000000040000, 0x000000c0000000, x30, x1, 768, x2)

inst_80:
// rs2_w1_val == -1, rs1_w0_val == -16777217
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafeffffff;  op2val:0xffffffff00800000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafeffffff, 0xffffffff00800000, x30, x1, 784, x2)

inst_81:
// rs2_w0_val == 1431655765, rs1_w1_val == -536870913
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000008;  op2val:0x400000055555555
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000008, 0x400000055555555, x30, x1, 800, x2)

inst_82:
// rs2_w0_val == 2147483647, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8fffffeff;  op2val:0xfffffffb7fffffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffffff8fffffeff, 0xfffffffb7fffffff, x30, x1, 816, x2)

inst_83:
// rs2_w0_val == -33554433, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005fffffffa;  op2val:0xfffffff6fdffffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x000005fffffffa, 0xfffffff6fdffffff, x30, x1, 832, x2)

inst_84:
// rs2_w0_val == 131072, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff902000000;  op2val:0x00400000020000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffffff902000000, 0x00400000020000, x30, x1, 848, x2)

inst_85:
// rs2_w0_val == 4096, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffff7fff;  op2val:0xffffff7f00001000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x000040ffff7fff, 0xffffff7f00001000, x30, x1, 864, x2)

inst_86:
// rs2_w0_val == 2048, rs1_w1_val == -2
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000010;  op2val:0x00000900000800
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000010, 0x00000900000800, x30, x1, 880, x2)

inst_87:
// rs2_w0_val == 1024, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005feffffff;  op2val:0xfffffffd00000400
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x000005feffffff, 0xfffffffd00000400, x30, x1, 896, x2)

inst_88:
// rs2_w0_val == 64, rs1_w1_val == -257
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffbfffffff;  op2val:0xffffffbf00000040
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffffeffbfffffff, 0xffffffbf00000040, x30, x1, 912, x2)

inst_89:
// rs2_w0_val == 16, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000080;  op2val:0xffdfffff00000010
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000080, 0xffdfffff00000010, x30, x1, 928, x2)

inst_90:
// rs2_w0_val == 4, rs1_w1_val == -262145
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000080;  op2val:0x200000000000004
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000080, 0x200000000000004, x30, x1, 944, x2)

inst_91:
// rs2_w0_val == 2, rs1_w0_val == 134217728
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000008000000;  op2val:0xffffffff00000002
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x8000000008000000, 0xffffffff00000002, x30, x1, 960, x2)

inst_92:
// rs2_w0_val == 1, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000fffdffff;  op2val:0xfffffbff00000001
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x020000fffdffff, 0xfffffbff00000001, x30, x1, 976, x2)

inst_93:
// rs2_w0_val == 0, rs1_w1_val == -9
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff73fffffff;  op2val:0x08000000000000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffffff73fffffff, 0x08000000000000, x30, x1, 992, x2)

inst_94:
// rs1_w1_val == -268435457, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00010000;  op2val:0xfffffffd80000000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xefffffff00010000, 0xfffffffd80000000, x30, x1, 1008, x2)

inst_95:
// rs1_w1_val == -33554433, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000000;  op2val:0x0000407fffffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000000, 0x0000407fffffff, x30, x1, 1024, x2)

inst_96:
// rs1_w1_val == -16777217, rs1_w0_val == 1073741824
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff40000000;  op2val:0x002000fdffffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfeffffff40000000, 0x002000fdffffff, x30, x1, 1040, x2)

inst_97:
// rs1_w1_val == -8388609, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffffffeff;  op2val:0x04000000001000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffffeff, 0x04000000001000, x30, x1, 1056, x2)

inst_98:
// rs1_w1_val == -4194305, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff01000000;  op2val:0xaaaaaaaaffffffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xffbfffff01000000, 0xaaaaaaaaffffffff, x30, x1, 1072, x2)

inst_99:
// rs1_w1_val == -131073, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffffffff8;  op2val:0xfffffffefdffffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffdfffffffffff8, 0xfffffffefdffffff, x30, x1, 1088, x2)

inst_100:
// rs1_w1_val == -32769, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffffdff;  op2val:0x000001fffdffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffffdff, 0x000001fffdffff, x30, x1, 1104, x2)

inst_101:
// rs1_w1_val == -8193, rs2_w0_val == -65537
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffdfffff;  op2val:0xffdffffffffeffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xffffdfffffdfffff, 0xffdffffffffeffff, x30, x1, 1120, x2)

inst_102:
// rs1_w1_val == -17, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef10000000;  op2val:0xfffffff900000000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xffffffef10000000, 0xfffffff900000000, x30, x1, 1136, x2)

inst_103:
// rs1_w1_val == -5, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00004000;  op2val:0xfffffbff00800000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00004000, 0xfffffbff00800000, x30, x1, 1152, x2)

inst_104:
// rs1_w1_val == -3, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000002;  op2val:0xfffffffbfffffeff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000002, 0xfffffffbfffffeff, x30, x1, 1168, x2)

inst_105:
// rs1_w1_val == 16777216, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffffb;  op2val:0x00000500000020
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x1000000fffffffb, 0x00000500000020, x30, x1, 1184, x2)

inst_106:
// rs1_w1_val == 16384, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000200000;  op2val:0xfff7ffff00000001
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x00400000200000, 0xfff7ffff00000001, x30, x1, 1200, x2)

inst_107:
// rs1_w1_val == 4096, rs1_w0_val == -65537, rs2_w0_val == -16385
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffeffff;  op2val:0x400000ffffbfff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x001000fffeffff, 0x400000ffffbfff, x30, x1, 1216, x2)

inst_108:
// rs1_w1_val == 2048, rs2_w0_val == -65
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800bfffffff;  op2val:0x000001ffffffbf
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x000800bfffffff, 0x000001ffffffbf, x30, x1, 1232, x2)

inst_109:
// rs1_w1_val == 128, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000000005;  op2val:0xfffffff900000005
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x00008000000005, 0xfffffff900000005, x30, x1, 1248, x2)

inst_110:
// rs1_w1_val == 16, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000080;  op2val:0x000200fffffff8
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x00001000000080, 0x000200fffffff8, x30, x1, 1264, x2)

inst_111:
// rs1_w1_val == 8, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000880000000;  op2val:0x008000dfffffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x00000880000000, 0x008000dfffffff, x30, x1, 1280, x2)

inst_112:
// rs1_w1_val == -1, rs2_w0_val == -4194305
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff55555555;  op2val:0x000200ffbfffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xffffffff55555555, 0x000200ffbfffff, x30, x1, 1296, x2)

inst_113:
// rs2_w0_val == -8388609, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffbfffffff;  op2val:0xfffffffcff7fffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffeffffbfffffff, 0xfffffffcff7fffff, x30, x1, 1312, x2)

inst_114:
// rs1_w0_val == 2147483647, rs2_w0_val == 134217728
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff7fffffff;  op2val:0x400000008000000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xffff7fff7fffffff, 0x400000008000000, x30, x1, 1328, x2)

inst_115:
// rs1_w0_val == -536870913, rs2_w0_val == -262145
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffdfffffff;  op2val:0x080000fffbffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xff7fffffdfffffff, 0x080000fffbffff, x30, x1, 1344, x2)

inst_116:
// rs1_w0_val == -134217729, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffff7ffffff;  op2val:0x5555555500000004
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffffffff7ffffff, 0x5555555500000004, x30, x1, 1360, x2)

inst_117:
// rs1_w0_val == -33554433, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffdffffff;  op2val:0xffdfffff00000004
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffff7fffdffffff, 0xffdfffff00000004, x30, x1, 1376, x2)

inst_118:
// rs1_w0_val == -4194305, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003ffbfffff;  op2val:0xffdfffff00000020
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x000003ffbfffff, 0xffdfffff00000020, x30, x1, 1392, x2)

inst_119:
// rs2_w0_val == -4097, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000040;  op2val:0x000005ffffefff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000040, 0x000005ffffefff, x30, x1, 1408, x2)

inst_120:
// rs2_w0_val == -2049, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000008;  op2val:0xffffdffffffff7ff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000008, 0xffffdffffffff7ff, x30, x1, 1424, x2)

inst_121:
// rs1_w0_val == -524289, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000fff7ffff;  op2val:0xfffffefffffdffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x010000fff7ffff, 0xfffffefffffdffff, x30, x1, 1440, x2)

inst_122:
// rs2_w0_val == -1025, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fdffffff;  op2val:0x000000fffffbff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffffff7fdffffff, 0x000000fffffbff, x30, x1, 1456, x2)

inst_123:
// rs1_w0_val == -16385, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffbfff;  op2val:0x8000000fffffffc
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfbffffffffffbfff, 0x8000000fffffffc, x30, x1, 1472, x2)

inst_124:
// rs2_w0_val == -9, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000040;  op2val:0x000007fffffff7
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000040, 0x000007fffffff7, x30, x1, 1488, x2)

inst_125:
// rs1_w0_val == -2049, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffff7ff;  op2val:0x2000000000080000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x20000000fffff7ff, 0x2000000000080000, x30, x1, 1504, x2)

inst_126:
// rs2_w0_val == 1073741824, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000004;  op2val:0x2000000040000000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x00004000000004, 0x2000000040000000, x30, x1, 1520, x2)

inst_127:
// rs1_w0_val == -65, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffffffbf;  op2val:0xfffffff900000002
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xefffffffffffffbf, 0xfffffff900000002, x30, x1, 1536, x2)

inst_128:
// rs1_w0_val == -33, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffffffdf;  op2val:0x080000ffff7fff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffffffdf, 0x080000ffff7fff, x30, x1, 1552, x2)

inst_129:
// rs1_w0_val == -17, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffffffef;  op2val:0xfffffff7fffffeff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x008000ffffffef, 0xfffffff7fffffeff, x30, x1, 1568, x2)

inst_130:
// rs2_w0_val == 33554432, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000001;  op2val:0x800000002000000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000001, 0x800000002000000, x30, x1, 1584, x2)

inst_131:
// rs1_w0_val == -2, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffffe;  op2val:0x000020ffdfffff
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x800000fffffffe, 0x000020ffdfffff, x30, x1, 1600, x2)

inst_132:
// rs1_w0_val == 536870912, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff20000000;  op2val:0xfffffeff40000000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xefffffff20000000, 0xfffffeff40000000, x30, x1, 1616, x2)

inst_133:
// rs2_w0_val == 1048576, 
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffffffffdff;  op2val:0xfffffffe00100000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x3ffffffffffffdff, 0xfffffffe00100000, x30, x1, 1632, x2)

inst_134:
// rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w1_val == -2097153, rs2_w0_val == 128, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 2097152, rs1_w0_val == 67108864
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff04000000;  op2val:0x20000000000080
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0xffdfffff04000000, 0x20000000000080, x30, x1, 1648, x2)

inst_135:
// rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w0_val == 1431655765, rs1_w1_val == 262144, rs2_w1_val == 8388608
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000055555555;  op2val:0x800000fffffff8
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x04000055555555, 0x800000fffffff8, x30, x1, 1664, x2)

inst_136:
// rs2_w1_val == -131073, rs1_w1_val == 0
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000004000000;  op2val:0xfffdffff00000020
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x00000004000000, 0xfffdffff00000020, x30, x1, 1680, x2)

inst_137:
// rs2_w1_val == -8193, rs1_w0_val == 16384, rs1_w1_val == 524288
// opcode: kmatt32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000004000;  op2val:0xffffdfff00002000
TEST_PKRR_OP(kmatt32, x31, x30, x29, 0x0000000000000000, 0x08000000004000, 0xffffdfff00002000, x30, x1, 1696, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 214*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
