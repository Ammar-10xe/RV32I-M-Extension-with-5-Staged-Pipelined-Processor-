
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the zunpkd810 instruction of the RISC-V RV64PZicsr extension for the zunpkd810 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",zunpkd810)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1==x7, rd==x14, rs1_b0_val == 0, rs1_b7_val == 0, rs1_b6_val == 85, rs1_b4_val == 128
// opcode: zunpkd810 ; op1:x7; dest:x14; op1val:0x5511800e051200;
TEST_RD_OP( zunpkd810, x14, x7, 0x0000000000000000, 0x5511800e051200, x3, 0, x8)

inst_1:
// rs1==x24, rd==x5, rs1_b7_val == 170, rs1_b0_val == 64, rs1_b3_val == 254, rs1_b6_val == 247, rs1_b5_val == 32
// opcode: zunpkd810 ; op1:x24; dest:x5; op1val:0xaaf72012fe0e0740;
TEST_RD_OP( zunpkd810, x5, x24, 0x0000000000000000, 0xaaf72012fe0e0740, x3, 8, x8)

inst_2:
// rs1==x10, rd==x1, rs1_b7_val == 85, rs1_b0_val == 128, rs1_b2_val == 1, rs1_b6_val == 254, rs1_b1_val == 85
// opcode: zunpkd810 ; op1:x10; dest:x1; op1val:0x55fe0e0b11015580;
TEST_RD_OP( zunpkd810, x1, x10, 0x0000000000000000, 0x55fe0e0b11015580, x3, 16, x8)

inst_3:
// rs1==x27, rd==x9, rs1_b7_val == 127, rs1_b1_val == 0, rs1_b2_val == 2, rs1_b5_val == 247
// opcode: zunpkd810 ; op1:x27; dest:x9; op1val:0x7f0bf70f0a020040;
TEST_RD_OP( zunpkd810, x9, x27, 0x0000000000000000, 0x7f0bf70f0a020040, x3, 24, x8)

inst_4:
// rs1==x13, rd==x24, rs1_b7_val == 191, rs1_b2_val == 0, rs1_b5_val == 1
// opcode: zunpkd810 ; op1:x13; dest:x24; op1val:0xbf55010b11000703;
TEST_RD_OP( zunpkd810, x24, x13, 0x0000000000000000, 0xbf55010b11000703, x3, 32, x8)

inst_5:
// rs1==x23, rd==x18, rs1_b7_val == 223, rs1_b6_val == 64, rs1_b4_val == 251, rs1_b1_val == 1, rs1_b3_val == 127, rs1_b0_val == 251
// opcode: zunpkd810 ; op1:x23; dest:x18; op1val:0xdf400efb7f1301fb;
TEST_RD_OP( zunpkd810, x18, x23, 0x0000000000000000, 0xdf400efb7f1301fb, x3, 40, x8)

inst_6:
// rs1==x18, rd==x6, rs1_b7_val == 239, rs1_b3_val == 85, rs1_b6_val == 8, rs1_b1_val == 254
// opcode: zunpkd810 ; op1:x18; dest:x6; op1val:0xef0806805501fe0a;
TEST_RD_OP( zunpkd810, x6, x18, 0x0000000000000000, 0xef0806805501fe0a, x3, 48, x8)

inst_7:
// rs1==x0, rd==x16, rs1_b7_val == 247, rs1_b4_val == 254, rs1_b6_val == 1, rs1_b2_val == 253, rs1_b3_val == 251, rs1_b0_val == 8, rs1_b1_val == 239
// opcode: zunpkd810 ; op1:x0; dest:x16; op1val:0xf7010afefbfdef08;
TEST_RD_OP( zunpkd810, x16, x0, 0x0000000000000000, 0xf7010afefbfdef08, x3, 56, x8)

inst_8:
// rs1==x30, rd==x12, rs1_b7_val == 251, rs1_b1_val == 170, rs1_b2_val == 85
// opcode: zunpkd810 ; op1:x30; dest:x12; op1val:0xfb40060d0955aa0c;
TEST_RD_OP( zunpkd810, x12, x30, 0x0000000000000000, 0xfb40060d0955aa0c, x3, 64, x8)

inst_9:
// rs1==x19, rd==x4, rs1_b7_val == 253, rs1_b3_val == 253, rs1_b0_val == 239, rs1_b1_val == 64, rs1_b4_val == 170
// opcode: zunpkd810 ; op1:x19; dest:x4; op1val:0xfd400aaafd0240ef;
TEST_RD_OP( zunpkd810, x4, x19, 0x0000000000000000, 0xfd400aaafd0240ef, x3, 72, x8)

inst_10:
// rs1==x2, rd==x28, rs1_b7_val == 254, rs1_b1_val == 128, rs1_b6_val == 2, rs1_b2_val == 127, rs1_b5_val == 253, rs1_b3_val == 8
// opcode: zunpkd810 ; op1:x2; dest:x28; op1val:0xfe02fd0d087f800a;
TEST_RD_OP( zunpkd810, x28, x2, 0x0000000000000000, 0xfe02fd0d087f800a, x3, 80, x8)

inst_11:
// rs1==x31, rd==x0, rs1_b7_val == 128, rs1_b3_val == 16
// opcode: zunpkd810 ; op1:x31; dest:x0; op1val:0x8005050610090a0c;
TEST_RD_OP( zunpkd810, x0, x31, 0x0000000000000000, 0x8005050610090a0c, x3, 88, x8)

inst_12:
// rs1==x29, rd==x25, rs1_b7_val == 64, rs1_b0_val == 223, rs1_b5_val == 254
// opcode: zunpkd810 ; op1:x29; dest:x25; op1val:0x4040fe07091303df;
TEST_RD_OP( zunpkd810, x25, x29, 0x0000000000000000, 0x4040fe07091303df, x3, 96, x8)

inst_13:
// rs1==x20, rd==x7, rs1_b7_val == 32, rs1_b3_val == 4, rs1_b5_val == 128, rs1_b1_val == 4, rs1_b0_val == 1
// opcode: zunpkd810 ; op1:x20; dest:x7; op1val:0x200180fe04090401;
TEST_RD_OP( zunpkd810, x7, x20, 0x0000000000000000, 0x200180fe04090401, x3, 104, x8)

inst_14:
// rs1==x1, rd==x29, rs1_b7_val == 16, rs1_b5_val == 127, rs1_b4_val == 85, rs1_b2_val == 255
// opcode: zunpkd810 ; op1:x1; dest:x29; op1val:0x10087f550cff0911;
TEST_RD_OP( zunpkd810, x29, x1, 0x0000000000000000, 0x10087f550cff0911, x3, 112, x8)

inst_15:
// rs1==x22, rd==x11, rs1_b7_val == 8, rs1_b1_val == 16, rs1_b5_val == 239, rs1_b4_val == 0, rs1_b2_val == 16, rs1_b3_val == 32
// opcode: zunpkd810 ; op1:x22; dest:x11; op1val:0x8f7ef0020101008;
TEST_RD_OP( zunpkd810, x11, x22, 0x0000000000000000, 0x8f7ef0020101008, x3, 120, x8)

inst_16:
// rs1==x21, rd==x30, rs1_b7_val == 4, rs1_b4_val == 32, rs1_b5_val == 170, rs1_b6_val == 127
// opcode: zunpkd810 ; op1:x21; dest:x30; op1val:0x47faa20130b0080;
TEST_RD_OP( zunpkd810, x30, x21, 0x0000000000000000, 0x47faa20130b0080, x3, 128, x8)

inst_17:
// rs1==x16, rd==x17, rs1_b7_val == 2, rs1_b4_val == 253, rs1_b2_val == 128, rs1_b3_val == 170, rs1_b6_val == 170, rs1_b0_val == 16
// opcode: zunpkd810 ; op1:x16; dest:x17; op1val:0x2aa0ffdaa800610;
TEST_RD_OP( zunpkd810, x17, x16, 0x0000000000000000, 0x2aa0ffdaa800610, x3, 136, x8)

inst_18:
// rs1==x5, rd==x22, rs1_b7_val == 1, rs1_b0_val == 247
// opcode: zunpkd810 ; op1:x5; dest:x22; op1val:0x1090306120912f7;
TEST_RD_OP( zunpkd810, x22, x5, 0x0000000000000000, 0x1090306120912f7, x3, 144, x7)

inst_19:
// rs1==x8, rd==x10, rs1_b7_val == 255, rs1_b2_val == 64
// opcode: zunpkd810 ; op1:x8; dest:x10; op1val:0xffaa7f0afd400a09;
TEST_RD_OP( zunpkd810, x10, x8, 0x0000000000000000, 0xffaa7f0afd400a09, x3, 152, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_20:
// rs1==x15, rd==x2, rs1_b6_val == 191, rs1_b2_val == 170
// opcode: zunpkd810 ; op1:x15; dest:x2; op1val:0xfbf12070faa0c05;
TEST_RD_OP( zunpkd810, x2, x15, 0x0000000000000000, 0xfbf12070faa0c05, x1, 0, x7)

inst_21:
// rs1==x3, rd==x31, rs1_b6_val == 223, rs1_b2_val == 32, rs1_b5_val == 8
// opcode: zunpkd810 ; op1:x3; dest:x31; op1val:0xbfdf082003200e01;
TEST_RD_OP( zunpkd810, x31, x3, 0x0000000000000000, 0xbfdf082003200e01, x1, 8, x7)

inst_22:
// rs1==x4, rd==x8, rs1_b6_val == 239, rs1_b5_val == 251, rs1_b4_val == 239, rs1_b0_val == 127
// opcode: zunpkd810 ; op1:x4; dest:x8; op1val:0x6effbef080d0f7f;
TEST_RD_OP( zunpkd810, x8, x4, 0x0000000000000000, 0x6effbef080d0f7f, x1, 16, x7)

inst_23:
// rs1==x14, rd==x21, rs1_b6_val == 251, rs1_b3_val == 0
// opcode: zunpkd810 ; op1:x14; dest:x21; op1val:0xfb0803000f0003;
TEST_RD_OP( zunpkd810, x21, x14, 0x0000000000000000, 0xfb0803000f0003, x1, 24, x7)

inst_24:
// rs1==x12, rd==x23, rs1_b6_val == 253, rs1_b2_val == 4, rs1_b4_val == 223, rs1_b5_val == 0
// opcode: zunpkd810 ; op1:x12; dest:x23; op1val:0x2fd00df08041303;
TEST_RD_OP( zunpkd810, x23, x12, 0x0000000000000000, 0x2fd00df08041303, x1, 32, x7)

inst_25:
// rs1==x11, rd==x3, rs1_b1_val == 251, rs1_b0_val == 2, rs1_b4_val == 127
// opcode: zunpkd810 ; op1:x11; dest:x3; op1val:0x209aa7f550bfb02;
TEST_RD_OP( zunpkd810, x3, x11, 0x0000000000000000, 0x209aa7f550bfb02, x1, 40, x7)

inst_26:
// rs1==x17, rd==x15, rs1_b1_val == 253, rs1_b4_val == 8
// opcode: zunpkd810 ; op1:x17; dest:x15; op1val:0x200308080d20fd02;
TEST_RD_OP( zunpkd810, x15, x17, 0x0000000000000000, 0x200308080d20fd02, x1, 48, x7)

inst_27:
// rs1==x28, rd==x26, rs1_b1_val == 32, 
// opcode: zunpkd810 ; op1:x28; dest:x26; op1val:0xfd0d0d20107f2001;
TEST_RD_OP( zunpkd810, x26, x28, 0x0000000000000000, 0xfd0d0d20107f2001, x1, 56, x7)

inst_28:
// rs1==x9, rd==x13, rs1_b1_val == 8, rs1_b6_val == 0, rs1_b0_val == 253
// opcode: zunpkd810 ; op1:x9; dest:x13; op1val:0x10008013030208fd;
TEST_RD_OP( zunpkd810, x13, x9, 0x0000000000000000, 0x10008013030208fd, x1, 64, x7)

inst_29:
// rs1==x26, rd==x20, rs1_b1_val == 2, rs1_b4_val == 16
// opcode: zunpkd810 ; op1:x26; dest:x20; op1val:0x11fd0e1013fd0211;
TEST_RD_OP( zunpkd810, x20, x26, 0x0000000000000000, 0x11fd0e1013fd0211, x1, 72, x7)

inst_30:
// rs1==x25, rd==x27, rs1_b1_val == 255, rs1_b2_val == 239, rs1_b3_val == 223
// opcode: zunpkd810 ; op1:x25; dest:x27; op1val:0x13aa077fdfeffffb;
TEST_RD_OP( zunpkd810, x27, x25, 0x0000000000000000, 0x13aa077fdfeffffb, x1, 80, x7)

inst_31:
// rs1==x6, rd==x19, rs1_b0_val == 170, rs1_b4_val == 1
// opcode: zunpkd810 ; op1:x6; dest:x19; op1val:0x602200103000daa;
TEST_RD_OP( zunpkd810, x19, x6, 0x0000000000000000, 0x602200103000daa, x1, 88, x7)

inst_32:
// rs1_b0_val == 85, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x7ef06fe0d091355;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0x7ef06fe0d091355, x1, 96, x7)

inst_33:
// rs1_b0_val == 191, rs1_b5_val == 85, rs1_b4_val == 247
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xeff755f70a1111bf;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0xeff755f70a1111bf, x1, 104, x7)

inst_34:
// rs1_b0_val == 254, rs1_b5_val == 2, rs1_b2_val == 8, rs1_b4_val == 4
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xbf090204df0810fe;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0xbf090204df0810fe, x1, 112, x7)

inst_35:
// rs1_b0_val == 32, rs1_b3_val == 2
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x30208fb0211fd20;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0x30208fb0211fd20, x1, 120, x7)

inst_36:
// rs1_b0_val == 4, rs1_b2_val == 223, rs1_b1_val == 127, rs1_b3_val == 64
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x2006201240df7f04;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0x2006201240df7f04, x1, 128, x7)

inst_37:
// rs1_b6_val == 128, rs1_b2_val == 247
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x28000ef06f70daa;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0x28000ef06f70daa, x1, 136, x7)

inst_38:
// rs1_b4_val == 191, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xfb0912bf0f55fe80;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0xfb0912bf0f55fe80, x1, 144, x7)

inst_39:
// rs1_b4_val == 64, rs1_b1_val == 191
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x355aa4000efbfaa;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0x355aa4000efbfaa, x1, 152, x7)

inst_40:
// rs1_b4_val == 2, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xb0205025504800d;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0xb0205025504800d, x1, 160, x7)

inst_41:
// rs1_b4_val == 255, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x200880ff02000008;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0x200880ff02000008, x1, 168, x7)

inst_42:
// rs1_b3_val == 191, rs1_b6_val == 32
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x11200302bfff0406;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0x11200302bfff0406, x1, 176, x7)

inst_43:
// rs1_b3_val == 239, rs1_b6_val == 16
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xfd10ef40eff7fd55;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0xfd10ef40eff7fd55, x1, 184, x7)

inst_44:
// rs1_b3_val == 247, rs1_b2_val == 254, rs1_b6_val == 255
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x9ff0b0af7fe000b;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0x9ff0b0af7fe000b, x1, 192, x7)

inst_45:
// rs1_b3_val == 128, rs1_b0_val == 255
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xfe01130780aa08ff;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0xfe01130780aa08ff, x1, 200, x7)

inst_46:
// rs1_b3_val == 1, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xbf800cff010155fb;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0xbf800cff010155fb, x1, 208, x7)

inst_47:
// rs1_b3_val == 255, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xfe060010ff050740;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0xfe060010ff050740, x1, 216, x7)

inst_48:
// rs1_b6_val == 4, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xb040d11200cfbfb;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0xb040d11200cfbfb, x1, 224, x7)

inst_49:
// rs1_b2_val == 191, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xa04550adfbf0b13;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0xa04550adfbf0b13, x1, 232, x7)

inst_50:
// rs1_b5_val == 191, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x80fbbf0902040608;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0x80fbbf0902040608, x1, 240, x7)

inst_51:
// rs1_b2_val == 251, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x6df060bdffb1206;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0x6df060bdffb1206, x1, 248, x7)

inst_52:
// rs1_b5_val == 64, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x104407f120a7f55;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0x104407f120a7f55, x1, 256, x7)

inst_53:
// rs1_b5_val == 223, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xfb06dffd550102aa;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0xfb06dffd550102aa, x1, 264, x7)

inst_54:
// rs1_b5_val == 16, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x7ffe10120bf7200c;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0x7ffe10120bf7200c, x1, 272, x7)

inst_55:
// rs1_b5_val == 4, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xf7aa040a200309fd;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0xf7aa040a200309fd, x1, 280, x7)

inst_56:
// rs1_b5_val == 255, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x20ff0c4011ef0f;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0x20ff0c4011ef0f, x1, 288, x7)

inst_57:
// rs1_b1_val == 223, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xdff03800c04df0a;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0xdff03800c04df0a, x1, 296, x7)

inst_58:
// rs1_b1_val == 247, 
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0x200bfffb110bf70f;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0x200bfffb110bf70f, x1, 304, x7)

inst_59:
// rs1_b7_val == 247, rs1_b4_val == 254, rs1_b6_val == 1, rs1_b2_val == 253, rs1_b3_val == 251, rs1_b0_val == 8, rs1_b1_val == 239
// opcode: zunpkd810 ; op1:x30; dest:x31; op1val:0xf7010afefbfdef08;
TEST_RD_OP( zunpkd810, x31, x30, 0x0000000000000000, 0xf7010afefbfdef08, x1, 312, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 40*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
