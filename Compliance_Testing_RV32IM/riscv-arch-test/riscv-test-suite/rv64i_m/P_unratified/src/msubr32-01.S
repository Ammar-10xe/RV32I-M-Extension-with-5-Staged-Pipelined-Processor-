
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the msubr32 instruction of the RISC-V RV64PZicsr extension for the msubr32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",msubr32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x20,signature_x20_1)

inst_0:
// rs1 == rd != rs2, rs1==x24, rs2==x19, rd==x24, rs1_w0_val == -2147483648, rs2_w1_val == 2, rs2_w0_val == 65536, rs1_w1_val == -134217729
// opcode: msubr32 ; op1:x24; dest:x24; op1val:0xf7ffffff80000000;  immval:$imm_val
TEST_RR_OP(msubr32, x24, x24, x19, 0x0000000000000000, 0xf7ffffff80000000, 0x00000200010000, x20, 0, x1)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x6, rs2==x26, rd==x12, rs2_w1_val == -1431655766, rs1_w0_val == 134217728, rs2_w0_val == 1431655765
// opcode: msubr32 ; op1:x6; dest:x12; op1val:0xfffffffa08000000;  immval:$imm_val
TEST_RR_OP(msubr32, x12, x6, x26, 0x0000000000000000, 0xfffffffa08000000, 0xaaaaaaaa55555555, x20, 8, x1)

inst_2:
// rs1 == rs2 != rd, rs1==x29, rs2==x29, rd==x6, rs2_w1_val == 1431655765, rs2_w0_val == -3, rs1_w1_val == 524288
// opcode: msubr32 ; op1:x29; dest:x6; op1val:0x080000fffffffa;  immval:$imm_val
TEST_RR_OP(msubr32, x6, x29, x29, 0x0000000000000000, 0x080000fffffffa, 0x55555555fffffffd, x20, 16, x1)

inst_3:
// rs1 == rs2 == rd, rs1==x11, rs2==x11, rd==x11, rs2_w1_val == 2147483647, rs1_w1_val == -1073741825, rs2_w0_val == -8388609
// opcode: msubr32 ; op1:x11; dest:x11; op1val:0xbfffffff3fffffff;  immval:$imm_val
TEST_RR_OP(msubr32, x11, x11, x11, 0x0000000000000000, 0xbfffffff3fffffff, 0x7fffffffff7fffff, x20, 24, x1)

inst_4:
// rs2 == rd != rs1, rs1==x14, rs2==x7, rd==x7, rs2_w1_val == -1073741825, rs2_w0_val == 134217728, rs1_w0_val == -1025
// opcode: msubr32 ; op1:x14; dest:x7; op1val:0xf7fffffffffffbff;  immval:$imm_val
TEST_RR_OP(msubr32, x7, x14, x7, 0x0000000000000000, 0xf7fffffffffffbff, 0xbfffffff08000000, x20, 32, x1)

inst_5:
// rs1==x5, rs2==x14, rd==x31, rs2_w1_val == -536870913, rs1_w1_val == -1431655766, rs2_w0_val == -9, rs1_w0_val == -16777217
// opcode: msubr32 ; op1:x5; dest:x31; op1val:0xaaaaaaaafeffffff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x5, x14, 0x0000000000000000, 0xaaaaaaaafeffffff, 0xdffffffffffffff7, x20, 40, x1)

inst_6:
// rs1==x2, rs2==x22, rd==x28, rs2_w1_val == -268435457, rs1_w1_val == -4097, rs2_w0_val == 256, rs1_w0_val == 8388608
// opcode: msubr32 ; op1:x2; dest:x28; op1val:0xffffefff00800000;  immval:$imm_val
TEST_RR_OP(msubr32, x28, x2, x22, 0x0000000000000000, 0xffffefff00800000, 0xefffffff00000100, x20, 48, x1)

inst_7:
// rs1==x17, rs2==x15, rd==x25, rs2_w1_val == -134217729, rs1_w1_val == 16777216, rs2_w0_val == 268435456
// opcode: msubr32 ; op1:x17; dest:x25; op1val:0x1000000fffffff8;  immval:$imm_val
TEST_RR_OP(msubr32, x25, x17, x15, 0x0000000000000000, 0x1000000fffffff8, 0xf7ffffff10000000, x20, 56, x1)

inst_8:
// rs1==x0, rs2==x25, rd==x2, rs2_w1_val == -67108865, rs1_w1_val == -5, rs2_w0_val == -8193, rs1_w0_val == -2097153
// opcode: msubr32 ; op1:x0; dest:x2; op1val:0xfffffffbffdfffff;  immval:$imm_val
TEST_RR_OP(msubr32, x2, x0, x25, 0x0000000000000000, 0xfffffffbffdfffff, 0xfbffffffffffdfff, x20, 64, x1)

inst_9:
// rs1==x16, rs2==x18, rd==x21, rs2_w1_val == -33554433, rs1_w0_val == 2147483647, rs2_w0_val == 262144, rs1_w1_val == 134217728
// opcode: msubr32 ; op1:x16; dest:x21; op1val:0x80000007fffffff;  immval:$imm_val
TEST_RR_OP(msubr32, x21, x16, x18, 0x0000000000000000, 0x80000007fffffff, 0xfdffffff00040000, x20, 72, x1)

inst_10:
// rs1==x12, rs2==x9, rd==x5, rs2_w1_val == -16777217, rs1_w0_val == -1048577, rs1_w1_val == -16777217, rs2_w0_val == -16777217
// opcode: msubr32 ; op1:x12; dest:x5; op1val:0xfeffffffffefffff;  immval:$imm_val
TEST_RR_OP(msubr32, x5, x12, x9, 0x0000000000000000, 0xfeffffffffefffff, 0xfefffffffeffffff, x20, 80, x1)

inst_11:
// rs1==x19, rs2==x0, rd==x26, rs2_w1_val == -8388609, rs1_w1_val == 1, rs2_w0_val == -32769
// opcode: msubr32 ; op1:x19; dest:x26; op1val:0x00000108000000;  immval:$imm_val
TEST_RR_OP(msubr32, x26, x19, x0, 0x0000000000000000, 0x00000108000000, 0xff7fffffffff7fff, x20, 88, x1)

inst_12:
// rs1==x26, rs2==x6, rd==x8, rs2_w1_val == -4194305, rs1_w0_val == 1024, rs1_w1_val == 268435456
// opcode: msubr32 ; op1:x26; dest:x8; op1val:0x1000000000000400;  immval:$imm_val
TEST_RR_OP(msubr32, x8, x26, x6, 0x0000000000000000, 0x1000000000000400, 0xffbfffff00000003, x20, 96, x1)

inst_13:
// rs1==x7, rs2==x10, rd==x19, rs2_w1_val == -2097153, rs2_w0_val == -17, rs1_w1_val == 0, rs1_w0_val == -1431655766
// opcode: msubr32 ; op1:x7; dest:x19; op1val:0x000000aaaaaaaa;  immval:$imm_val
TEST_RR_OP(msubr32, x19, x7, x10, 0x0000000000000000, 0x000000aaaaaaaa, 0xffdfffffffffffef, x20, 104, x1)

inst_14:
// rs1==x18, rs2==x3, rd==x13, rs2_w1_val == -1048577, rs1_w0_val == -65, rs2_w0_val == 1
// opcode: msubr32 ; op1:x18; dest:x13; op1val:0x000003ffffffbf;  immval:$imm_val
TEST_RR_OP(msubr32, x13, x18, x3, 0x0000000000000000, 0x000003ffffffbf, 0xffefffff00000001, x20, 112, x1)

inst_15:
// rs1==x9, rs2==x2, rd==x10, rs2_w1_val == -524289, rs1_w0_val == -2049, rs1_w1_val == -1, rs2_w0_val == -65537
// opcode: msubr32 ; op1:x9; dest:x10; op1val:0xfffffffffffff7ff;  immval:$imm_val
TEST_RR_OP(msubr32, x10, x9, x2, 0x0000000000000000, 0xfffffffffffff7ff, 0xfff7fffffffeffff, x20, 120, x1)

inst_16:
// rs1==x4, rs2==x24, rd==x3, rs2_w1_val == -262145, rs1_w0_val == -513, rs2_w0_val == -2
// opcode: msubr32 ; op1:x4; dest:x3; op1val:0xfffffffbfffffdff;  immval:$imm_val
TEST_RR_OP(msubr32, x3, x4, x24, 0x0000000000000000, 0xfffffffbfffffdff, 0xfffbfffffffffffe, x20, 128, x1)

inst_17:
// rs1==x22, rs2==x1, rd==x4, rs2_w1_val == -131073, rs1_w0_val == 16777216, rs2_w0_val == -513
// opcode: msubr32 ; op1:x22; dest:x4; op1val:0x00000101000000;  immval:$imm_val
TEST_RR_OP(msubr32, x4, x22, x1, 0x0000000000000000, 0x00000101000000, 0xfffdfffffffffdff, x20, 136, x6)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_18:
// rs1==x28, rs2==x30, rd==x22, rs2_w1_val == -65537, rs2_w0_val == 536870912, rs1_w0_val == -4097
// opcode: msubr32 ; op1:x28; dest:x22; op1val:0x000006ffffefff;  immval:$imm_val
TEST_RR_OP(msubr32, x22, x28, x30, 0x0000000000000000, 0x000006ffffefff, 0xfffeffff20000000, x2, 0, x6)

inst_19:
// rs1==x1, rs2==x4, rd==x30, rs2_w1_val == -32769, rs1_w1_val == -3, rs1_w0_val == -268435457, rs2_w0_val == -524289
// opcode: msubr32 ; op1:x1; dest:x30; op1val:0xfffffffdefffffff;  immval:$imm_val
TEST_RR_OP(msubr32, x30, x1, x4, 0x0000000000000000, 0xfffffffdefffffff, 0xffff7ffffff7ffff, x2, 8, x6)

inst_20:
// rs1==x30, rs2==x12, rd==x20, rs2_w1_val == -16385, rs1_w1_val == 8
// opcode: msubr32 ; op1:x30; dest:x20; op1val:0x000008fffffff8;  immval:$imm_val
TEST_RR_OP(msubr32, x20, x30, x12, 0x0000000000000000, 0x000008fffffff8, 0xffffbfffc0000000, x2, 16, x6)

inst_21:
// rs1==x3, rs2==x16, rd==x9, rs2_w1_val == -8193, rs1_w1_val == 1431655765, rs2_w0_val == -2049, rs1_w0_val == 16384
// opcode: msubr32 ; op1:x3; dest:x9; op1val:0x5555555500004000;  immval:$imm_val
TEST_RR_OP(msubr32, x9, x3, x16, 0x0000000000000000, 0x5555555500004000, 0xffffdffffffff7ff, x2, 24, x6)

inst_22:
// rs1==x8, rs2==x31, rd==x0, rs2_w1_val == -4097, rs1_w1_val == 33554432
// opcode: msubr32 ; op1:x8; dest:x0; op1val:0x200000000000003;  immval:$imm_val
TEST_RR_OP(msubr32, x0, x8, x31, 0x0000000000000000, 0x200000000000003, 0xffffeffffffffffe, x2, 32, x6)

inst_23:
// rs1==x15, rs2==x23, rd==x14, rs2_w1_val == -2049, rs1_w0_val == -9, rs2_w0_val == -2147483648
// opcode: msubr32 ; op1:x15; dest:x14; op1val:0xbffffffffffffff7;  immval:$imm_val
TEST_RR_OP(msubr32, x14, x15, x23, 0x0000000000000000, 0xbffffffffffffff7, 0xfffff7ff80000000, x2, 40, x6)

inst_24:
// rs1==x25, rs2==x21, rd==x1, rs2_w1_val == -1025, rs2_w0_val == -536870913, rs1_w1_val == 536870912, rs1_w0_val == 4096
// opcode: msubr32 ; op1:x25; dest:x1; op1val:0x2000000000001000;  immval:$imm_val
TEST_RR_OP(msubr32, x1, x25, x21, 0x0000000000000000, 0x2000000000001000, 0xfffffbffdfffffff, x2, 48, x6)

inst_25:
// rs1==x13, rs2==x20, rd==x18, rs2_w1_val == -513, rs2_w0_val == -33, rs1_w1_val == 32768
// opcode: msubr32 ; op1:x13; dest:x18; op1val:0x008000feffffff;  immval:$imm_val
TEST_RR_OP(msubr32, x18, x13, x20, 0x0000000000000000, 0x008000feffffff, 0xfffffdffffffffdf, x2, 56, x6)

inst_26:
// rs1==x23, rs2==x27, rd==x17, rs2_w1_val == -257, rs1_w0_val == 8, rs1_w1_val == 8192
// opcode: msubr32 ; op1:x23; dest:x17; op1val:0x00200000000008;  immval:$imm_val
TEST_RR_OP(msubr32, x17, x23, x27, 0x0000000000000000, 0x00200000000008, 0xfffffeff00040000, x2, 64, x6)

inst_27:
// rs1==x20, rs2==x13, rd==x15, rs2_w1_val == -129, 
// opcode: msubr32 ; op1:x20; dest:x15; op1val:0x000003c0000000;  immval:$imm_val
TEST_RR_OP(msubr32, x15, x20, x13, 0x0000000000000000, 0x000003c0000000, 0xffffff7f08000000, x2, 72, x6)

inst_28:
// rs1==x31, rs2==x8, rd==x29, rs2_w1_val == -65, rs2_w0_val == 4096, rs1_w0_val == -65537
// opcode: msubr32 ; op1:x31; dest:x29; op1val:0x000003fffeffff;  immval:$imm_val
TEST_RR_OP(msubr32, x29, x31, x8, 0x0000000000000000, 0x000003fffeffff, 0xffffffbf00001000, x2, 80, x6)

inst_29:
// rs1==x21, rs2==x28, rd==x23, rs2_w1_val == -33, rs2_w0_val == 524288
// opcode: msubr32 ; op1:x21; dest:x23; op1val:0xfffffff6efffffff;  immval:$imm_val
TEST_RR_OP(msubr32, x23, x21, x28, 0x0000000000000000, 0xfffffff6efffffff, 0xffffffdf00080000, x2, 88, x6)

inst_30:
// rs1==x10, rs2==x17, rd==x16, rs2_w1_val == -17, rs2_w0_val == -1025
// opcode: msubr32 ; op1:x10; dest:x16; op1val:0xaaaaaaaafffffff6;  immval:$imm_val
TEST_RR_OP(msubr32, x16, x10, x17, 0x0000000000000000, 0xaaaaaaaafffffff6, 0xffffffeffffffbff, x2, 96, x6)

inst_31:
// rs1==x27, rs2_w1_val == -9, rs1_w0_val == -33554433, rs2_w0_val == 128
// opcode: msubr32 ; op1:x27; dest:x14; op1val:0x080000fdffffff;  immval:$imm_val
TEST_RR_OP(msubr32, x14, x27, x1, 0x0000000000000000, 0x080000fdffffff, 0xfffffff700000080, x2, 104, x6)

inst_32:
// rs2==x5, rs2_w1_val == -5, rs2_w0_val == 16, rs1_w0_val == -8388609
// opcode: msubr32 ; op1:x21; dest:x3; op1val:0xaaaaaaaaff7fffff;  immval:$imm_val
TEST_RR_OP(msubr32, x3, x21, x5, 0x0000000000000000, 0xaaaaaaaaff7fffff, 0xfffffffb00000010, x2, 112, x6)

inst_33:
// rd==x27, rs2_w1_val == -3, 
// opcode: msubr32 ; op1:x12; dest:x27; op1val:0x10000000efffffff;  immval:$imm_val
TEST_RR_OP(msubr32, x27, x12, x10, 0x0000000000000000, 0x10000000efffffff, 0xfffffffdfffffff8, x2, 120, x6)

inst_34:
// rs2_w1_val == -2, rs2_w0_val == 131072, rs1_w0_val == -257
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x000003fffffeff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x000003fffffeff, 0xfffffffe00020000, x2, 128, x6)

inst_35:
// rs2_w1_val == -2147483648, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x008000fffffffa;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x008000fffffffa, 0x80000000ff7fffff, x2, 136, x6)

inst_36:
// rs2_w1_val == 1073741824, rs1_w1_val == 1024, rs2_w0_val == 32
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x000400aaaaaaaa;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x000400aaaaaaaa, 0x4000000000000020, x2, 144, x6)

inst_37:
// rs2_w1_val == 536870912, rs2_w0_val == 2048
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x1000000000800000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x1000000000800000, 0x2000000000000800, x2, 152, x6)

inst_38:
// rs2_w1_val == 268435456, rs1_w1_val == -513
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfffffdff08000000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfffffdff08000000, 0x1000000000000006, x2, 160, x6)

inst_39:
// rs2_w1_val == 134217728, rs1_w0_val == -16385, rs1_w1_val == -33554433
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfdffffffffffbfff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfdffffffffffbfff, 0x8000000fffffff9, x2, 168, x6)

inst_40:
// rs2_w1_val == 67108864, rs1_w0_val == -524289, rs2_w0_val == -257
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xf7fffffffff7ffff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xf7fffffffff7ffff, 0x4000000fffffeff, x2, 176, x6)

inst_41:
// rs2_w1_val == 33554432, rs2_w0_val == -268435457, rs1_w1_val == 64
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x0000403fffffff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x0000403fffffff, 0x2000000efffffff, x2, 184, x6)

inst_42:
// rs2_w1_val == 16777216, rs2_w0_val == -67108865
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfffffff6ffffefff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfffffff6ffffefff, 0x1000000fbffffff, x2, 192, x6)

inst_43:
// rs2_w1_val == 8388608, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfffffff8ffffefff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfffffff8ffffefff, 0x80000000000007, x2, 200, x6)

inst_44:
// rs2_w1_val == 4194304, rs1_w1_val == 262144
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x040000fffffffa;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x040000fffffffa, 0x400000fff7ffff, x2, 208, x6)

inst_45:
// rs2_w1_val == 2097152, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xc000000000000007;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xc000000000000007, 0x200000fffffff9, x2, 216, x6)

inst_46:
// rs2_w1_val == 1048576, rs1_w0_val == -131073, rs1_w1_val == -33, rs2_w0_val == 16777216
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xffffffdffffdffff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xffffffdffffdffff, 0x10000001000000, x2, 224, x6)

inst_47:
// rs2_w1_val == 524288, rs1_w1_val == -67108865, rs2_w0_val == -1048577
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfbffffff00000400;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000400, 0x080000ffefffff, x2, 232, x6)

inst_48:
// rs2_w1_val == 262144, rs2_w0_val == 0
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x000009fffff7ff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x000009fffff7ff, 0x04000000000000, x2, 240, x6)

inst_49:
// rs2_w1_val == 131072, rs1_w0_val == 512
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x200000000000200;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x200000000000200, 0x02000055555555, x2, 248, x6)

inst_50:
// rs2_w1_val == 65536, rs1_w1_val == 67108864, rs2_w0_val == 8192
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x4000000fffffffc;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x4000000fffffffc, 0x01000000002000, x2, 256, x6)

inst_51:
// rs2_w1_val == 32768, rs1_w1_val == 2097152, rs2_w0_val == 8388608
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x2000007fffffff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x2000007fffffff, 0x00800000800000, x2, 264, x6)

inst_52:
// rs1_w0_val == 8192, rs1_w1_val == 4
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x00000400002000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x00000400002000, 0xfffdfffffffffff7, x2, 272, x6)

inst_53:
// rs1_w0_val == 2048, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x00000100000800;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x00000100000800, 0x8000000000000003, x2, 280, x6)

inst_54:
// rs1_w0_val == 256, rs2_w0_val == -134217729
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x2000000000000100;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x2000000000000100, 0xfbfffffff7ffffff, x2, 288, x6)

inst_55:
// rs1_w0_val == 128, rs1_w1_val == 2
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x00000200000080;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x00000200000080, 0xffffffdf00000000, x2, 296, x6)

inst_56:
// rs1_w0_val == 64, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xffffffdf00000040;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000040, 0xfffffff901000000, x2, 304, x6)

inst_57:
// rs1_w0_val == 32, rs2_w0_val == 2, rs1_w1_val == -2049
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfffff7ff00000020;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000020, 0xffffffdf00000002, x2, 312, x6)

inst_58:
// rs1_w0_val == 16, rs2_w1_val == 8192
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x00004000000010;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x00004000000010, 0x002000ffff7fff, x2, 320, x6)

inst_59:
// rs1_w0_val == 4, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfeffffff00000004;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000004, 0xffffff7f00000001, x2, 328, x6)

inst_60:
// rs1_w0_val == 2, rs2_w1_val == 32, rs1_w1_val == -9
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfffffff700000002;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfffffff700000002, 0x00002000000080, x2, 336, x6)

inst_61:
// rs1_w0_val == 1, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x00000800000001;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x00000800000001, 0xfffffffd00040000, x2, 344, x6)

inst_62:
// rs1_w0_val == 0, rs2_w0_val == -4097, rs1_w1_val == -1048577
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xffefffff00000000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xffefffff00000000, 0x1000000ffffefff, x2, 352, x6)

inst_63:
// rs1_w0_val == -1, rs2_w1_val == 1024
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfdffffffffffffff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfdffffffffffffff, 0x00040000080000, x2, 360, x6)

inst_64:
// rs2_w1_val == 16384, rs1_w1_val == 8388608
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x800000ffffffbf;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x800000ffffffbf, 0x004000fffffffd, x2, 368, x6)

inst_65:
// rs2_w1_val == 4096, rs1_w1_val == -129, rs2_w0_val == 33554432
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xffffff7f00800000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00800000, 0x00100002000000, x2, 376, x6)

inst_66:
// rs2_w1_val == 2048, rs2_w0_val == 4194304, rs1_w0_val == 262144, rs1_w1_val == -262145
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfffbffff00040000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00040000, 0x00080000400000, x2, 384, x6)

inst_67:
// rs2_w1_val == 512, rs1_w1_val == 2147483647, rs1_w0_val == -3
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x7ffffffffffffffd;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffffffd, 0x000200ffffefff, x2, 392, x6)

inst_68:
// rs2_w1_val == 256, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xffffeffffffffff8;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xffffeffffffffff8, 0x00010010000000, x2, 400, x6)

inst_69:
// rs2_w1_val == 128, rs1_w0_val == 1048576
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x00000500100000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x00000500100000, 0x00008080000000, x2, 408, x6)

inst_70:
// rs2_w1_val == 64, rs1_w1_val == -257
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfffffeff08000000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfffffeff08000000, 0x00004000002000, x2, 416, x6)

inst_71:
// rs2_w1_val == 16, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x0000003fffffff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x0000003fffffff, 0x000010ffff7fff, x2, 424, x6)

inst_72:
// rs2_w1_val == 8, rs1_w1_val == 2048
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x000800c0000000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x000800c0000000, 0x000008ffffffef, x2, 432, x6)

inst_73:
// rs2_w1_val == 4, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xc000000000000008;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xc000000000000008, 0x00000480000000, x2, 440, x6)

inst_74:
// rs2_w1_val == 1, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfbfffffffffdffff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffdffff, 0x00000100000100, x2, 448, x6)

inst_75:
// rs2_w1_val == 0, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x000040fffffdff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x000040fffffdff, 0x00000000000080, x2, 456, x6)

inst_76:
// rs2_w1_val == -1, rs2_w0_val == 1048576, rs1_w1_val == -65, rs1_w0_val == 131072
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xffffffbf00020000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00020000, 0xffffffff00100000, x2, 464, x6)

inst_77:
// rs2_w0_val == -1431655766, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfdffffff00040000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00040000, 0xffffffffaaaaaaaa, x2, 472, x6)

inst_78:
// rs2_w0_val == 2147483647, rs1_w1_val == -268435457
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xefffffff00100000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xefffffff00100000, 0x7fffffff7fffffff, x2, 480, x6)

inst_79:
// rs2_w0_val == -1073741825, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x5555555500000007;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x5555555500000007, 0x000001bfffffff, x2, 488, x6)

inst_80:
// rs2_w0_val == -33554433, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x7fffffff00000400;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000400, 0xeffffffffdffffff, x2, 496, x6)

inst_81:
// rs2_w0_val == -4194305, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfdffffff80000000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfdffffff80000000, 0x000001ffbfffff, x2, 504, x6)

inst_82:
// rs2_w0_val == -2097153, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfffffff600000003;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfffffff600000003, 0x000002ffdfffff, x2, 512, x6)

inst_83:
// rs2_w0_val == -262145, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x000001fffffff8;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x000001fffffff8, 0xff7ffffffffbffff, x2, 520, x6)

inst_84:
// rs2_w0_val == -131073, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfffff7ff00000800;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000800, 0xfffffffffffdffff, x2, 528, x6)

inst_85:
// rs2_w0_val == -16385, rs1_w1_val == 16384
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x004000ff7fffff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x004000ff7fffff, 0xfffffff6ffffbfff, x2, 536, x6)

inst_86:
// rs2_w0_val == -129, rs1_w1_val == 512
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x000200aaaaaaaa;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x000200aaaaaaaa, 0x000000ffffff7f, x2, 544, x6)

inst_87:
// rs2_w0_val == 64, rs1_w0_val == -134217729, rs1_w1_val == -4194305
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xffbffffff7ffffff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xffbffffff7ffffff, 0x800000000000040, x2, 552, x6)

inst_88:
// rs2_w0_val == 8, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x00000900000400;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x00000900000400, 0xfffffbff00000008, x2, 560, x6)

inst_89:
// rs2_w0_val == 4, rs1_w1_val == -1025
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfffffbff00000000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000000, 0xf7ffffff00000004, x2, 568, x6)

inst_90:
// rs2_w0_val == -1, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x3fffffff00800000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x3fffffff00800000, 0x000200ffffffff, x2, 576, x6)

inst_91:
// rs1_w1_val == -536870913, rs2_w0_val == 1073741824
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xdfffffff00020000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00020000, 0x00200040000000, x2, 584, x6)

inst_92:
// rs1_w1_val == -8388609, rs1_w0_val == -129
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xff7fffffffffff7f;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xff7fffffffffff7f, 0xffbfffff00000002, x2, 592, x6)

inst_93:
// rs1_w1_val == -2097153, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xffdfffff00100000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00100000, 0xffffffdf02000000, x2, 600, x6)

inst_94:
// rs1_w1_val == -524289, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfff7ffffc0000000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfff7ffffc0000000, 0xfffeffff00400000, x2, 608, x6)

inst_95:
// rs1_w1_val == -131073, rs1_w0_val == -8193
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfffdffffffffdfff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffdfff, 0xfffffffe00000009, x2, 616, x6)

inst_96:
// rs1_w1_val == -65537, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfffeffff00020000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00020000, 0x4000000c0000000, x2, 624, x6)

inst_97:
// rs1_w1_val == -32769, rs1_w0_val == 67108864, rs2_w0_val == -5
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xffff7fff04000000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xffff7fff04000000, 0xffeffffffffffffb, x2, 632, x6)

inst_98:
// rs1_w1_val == -16385, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xffffbffffffffeff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffeff, 0xffefffff00400000, x2, 640, x6)

inst_99:
// rs1_w1_val == -8193, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xffffdfff00000004;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000004, 0x00000800080000, x2, 648, x6)

inst_100:
// rs1_w1_val == -17, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xffffffef00000200;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xffffffef00000200, 0xdffffffffffdffff, x2, 656, x6)

inst_101:
// rs1_w1_val == -2, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfffffffeaaaaaaaa;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfffffffeaaaaaaaa, 0xfffffff608000000, x2, 664, x6)

inst_102:
// rs1_w1_val == -2147483648, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x8000000008000000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x8000000008000000, 0xeffffffffffffbff, x2, 672, x6)

inst_103:
// rs1_w1_val == 1073741824, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x4000000000000080;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x4000000000000080, 0x1000000ffffff7f, x2, 680, x6)

inst_104:
// rs1_w1_val == 4194304, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x400000fffffff8;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x400000fffffff8, 0xffffffbffffffffd, x2, 688, x6)

inst_105:
// rs1_w1_val == 1048576, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x100000efffffff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x100000efffffff, 0xfffbfffffffffffb, x2, 696, x6)

inst_106:
// rs1_w1_val == 131072, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x02000001000000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x02000001000000, 0xffbffffffffffff9, x2, 704, x6)

inst_107:
// rs1_w1_val == 65536, rs1_w0_val == 524288
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x01000000080000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x01000000080000, 0x2000000ffffdfff, x2, 712, x6)

inst_108:
// rs1_w1_val == 4096, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x00100000000008;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x00100000000008, 0xfffff7ff10000000, x2, 720, x6)

inst_109:
// rs1_w1_val == 256, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x000100fffffff8;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x000100fffffff8, 0xfffbfffffeffffff, x2, 728, x6)

inst_110:
// rs1_w1_val == 128, rs1_w0_val == -1073741825
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x000080bfffffff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x000080bfffffff, 0x00000900000006, x2, 736, x6)

inst_111:
// rs1_w1_val == 32, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x00002000800000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x00002000800000, 0x000007fffffffe, x2, 744, x6)

inst_112:
// rs1_w1_val == 16, rs1_w0_val == -17
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x000010ffffffef;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x000010ffffffef, 0x200000010000000, x2, 752, x6)

inst_113:
// rs1_w0_val == 1431655765, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xffbfffff55555555;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xffbfffff55555555, 0xfffffffffffdffff, x2, 760, x6)

inst_114:
// rs1_w0_val == -536870913, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x010000dfffffff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x010000dfffffff, 0x8000000fffffbff, x2, 768, x6)

inst_115:
// rs1_w0_val == -67108865, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfffffff6fbffffff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfffffff6fbffffff, 0xfffffffafffffffe, x2, 776, x6)

inst_116:
// rs2_w0_val == 32768, rs1_w0_val == 65536
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x00000700010000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x00000700010000, 0xfffffff600008000, x2, 784, x6)

inst_117:
// rs1_w0_val == -4194305, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x008000ffbfffff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x008000ffbfffff, 0xfffffdff00002000, x2, 792, x6)

inst_118:
// rs1_w0_val == -262145, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x000006fffbffff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x000006fffbffff, 0x3ffffffffffffff8, x2, 800, x6)

inst_119:
// rs1_w0_val == -32769, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfffffffaffff7fff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfffffffaffff7fff, 0xff7fffff3fffffff, x2, 808, x6)

inst_120:
// rs2_w0_val == 16384, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xffffff7f00000020;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000020, 0xdfffffff00004000, x2, 816, x6)

inst_121:
// rs2_w0_val == -65, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x000040fffffdff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x000040fffffdff, 0xfffffff6ffffffbf, x2, 824, x6)

inst_122:
// rs1_w0_val == -33, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x001000ffffffdf;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x001000ffffffdf, 0x000000fffffffc, x2, 832, x6)

inst_123:
// rs2_w0_val == 67108864, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x4000000000002000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x4000000000002000, 0xc000000004000000, x2, 840, x6)

inst_124:
// rs1_w0_val == -5, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xffffffdffffffffb;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffffb, 0x2000000000000006, x2, 848, x6)

inst_125:
// rs1_w0_val == -2, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x000010fffffffe;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x000010fffffffe, 0xfbffffff08000000, x2, 856, x6)

inst_126:
// rs1_w0_val == 1073741824, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x00010040000000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x00010040000000, 0x000003f7ffffff, x2, 864, x6)

inst_127:
// rs1_w0_val == 536870912, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfffffbff20000000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfffffbff20000000, 0xffffffdf00000000, x2, 872, x6)

inst_128:
// rs2_w0_val == 2097152, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x000001ff7fffff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x000001ff7fffff, 0x00008000200000, x2, 880, x6)

inst_129:
// rs1_w0_val == 268435456, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xffffdfff10000000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xffffdfff10000000, 0x00200004000000, x2, 888, x6)

inst_130:
// rs1_w0_val == 33554432, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xffdfffff02000000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xffdfffff02000000, 0x00000001000000, x2, 896, x6)

inst_131:
// rs1_w0_val == 4194304, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfff7ffff00400000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00400000, 0xfbffffff00080000, x2, 904, x6)

inst_132:
// rs1_w0_val == 2097152, rs2_w0_val == 1024
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x00020000200000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x00020000200000, 0xfffffeff00000400, x2, 912, x6)

inst_133:
// rs2_w0_val == 512, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x000020ffffff7f;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x000020ffffff7f, 0x00008000000200, x2, 920, x6)

inst_134:
// rs1_w0_val == 32768, 
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x8000000000008000;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x8000000000008000, 0x00080010000000, x2, 928, x6)

inst_135:
// rs2_w1_val == 1431655765, rs2_w0_val == -3, rs1_w1_val == 524288
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x080000fffffffa;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x080000fffffffa, 0x55555555fffffffd, x2, 936, x6)

inst_136:
// rs2_w1_val == -67108865, rs1_w1_val == -5, rs2_w0_val == -8193, rs1_w0_val == -2097153
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0xfffffffbffdfffff;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0xfffffffbffdfffff, 0xfbffffffffffdfff, x2, 944, x6)

inst_137:
// rs2_w1_val == -4097, rs1_w1_val == 33554432
// opcode: msubr32 ; op1:x30; dest:x31; op1val:0x200000000000003;  immval:$imm_val
TEST_RR_OP(msubr32, x31, x30, x29, 0x0000000000000000, 0x200000000000003, 0xffffeffffffffffe, x2, 952, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x20_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x20_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 120*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
