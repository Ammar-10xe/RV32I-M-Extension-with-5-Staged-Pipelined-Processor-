
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the add8 instruction of the RISC-V RV64PZicsr extension for the add8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",add8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:// rs1 == rd != rs2, rs1==x31, rs2==x4, rd==x31, rs1_b0_val == -128, rs1_b7_val == rs2_b7_val, rs1_b5_val == -2, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b6_val != rs2_b6_val, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b5_val != rs2_b5_val, rs2_b3_val == 16, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b4_val != rs2_b4_val, rs2_b2_val == -86, rs1_b4_val > 0 and rs2_b4_val < 0, rs1_b3_val != rs2_b3_val, rs1_b2_val != rs2_b2_val, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b1_val != rs2_b1_val, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b0_val != rs2_b0_val, rs2_b1_val == 127, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b3_val == 0, rs1_b2_val == -9, rs2_b6_val == 16, rs1_b1_val == -1, rs2_b5_val == -1, rs1_b6_val == -1
// opcode: add8 ; op1:x31; op2:x4; dest:x31; op1val:0xfcfffe0600f7ff80;  op2val:0xfc10fffa10aa7ff8
TEST_RR_OP(add8, x31, x31, x4, 0x0000000000000000, 0xfcfffe0600f7ff80, 0xfc10fffa10aa7ff8, x2, 0, x5)

inst_1:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x7, rs2==x16, rd==x24, rs1_b7_val != rs2_b7_val, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b0_val == -17, rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b6_val == 85, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b6_val > 0 and rs2_b6_val < 0, rs2_b6_val == -5, rs1_b0_val < 0 and rs2_b0_val > 0, rs2_b0_val == 2, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b3_val == 16, rs2_b3_val == 2, rs1_b4_val == rs2_b4_val, rs1_b7_val == -65, rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b1_val == 2, rs1_b5_val == -33, rs1_b3_val > 0 and rs2_b3_val > 0
// opcode: add8 ; op1:x7; op2:x16; dest:x24; op1val:0xbf55df0910f802ef;  op2val:0x7fb3f0902037f02
TEST_RR_OP(add8, x24, x7, x16, 0x0000000000000000, 0xbf55df0910f802ef, 0x7fb3f0902037f02, x2, 8, x5)

inst_2:// rs1 == rs2 != rd, rs1==x11, rs2==x11, rd==x26, rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b0_val == -65, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b3_val == -65, rs1_b6_val == rs2_b6_val, rs1_b1_val < 0 and rs2_b1_val < 0, rs2_b3_val == -5, rs1_b5_val == 2, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b5_val > 0 and rs2_b5_val < 0, rs2_b4_val == 16, rs1_b4_val == 8, rs1_b3_val < 0 and rs2_b3_val < 0, rs2_b5_val == -33, rs1_b7_val == 16
// opcode: add8 ; op1:x11; op2:x11; dest:x26; op1val:0x10070208bf05f8bf;  op2val:0xc007df10fbaaf907
TEST_RR_OP(add8, x26, x11, x11, 0x0000000000000000, 0x10070208bf05f8bf, 0xc007df10fbaaf907, x2, 16, x5)

inst_3:// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b4_val == -1, rs1_b2_val == 4, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b6_val < 0 and rs2_b6_val < 0, rs2_b6_val == -17, rs2_b3_val == -2, rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b1_val == -128, rs2_b5_val == 85, rs2_b2_val == -9, rs2_b0_val == 85
// opcode: add8 ; op1:x6; op2:x6; dest:x6; op1val:0x9c00208fc0403ef;  op2val:0x9ef55fffef78055
TEST_RR_OP(add8, x6, x6, x6, 0x0000000000000000, 0x9c00208fc0403ef, 0x9ef55fffef78055, x2, 24, x5)

inst_4:// rs2 == rd != rs1, rs1==x3, rs2==x17, rd==x17, rs1_b5_val == rs2_b5_val, rs1_b3_val == -86, rs1_b2_val == 16, rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b4_val == 85, rs2_b6_val == -128, rs2_b3_val == 8, rs1_b1_val == -3, rs1_b4_val < 0 and rs2_b4_val > 0, rs2_b7_val == -17, rs2_b1_val == 2, rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b0_val == 127
// opcode: add8 ; op1:x3; op2:x17; dest:x17; op1val:0x9c0dff8aa10fdbf;  op2val:0xef80df550805027f
TEST_RR_OP(add8, x17, x3, x17, 0x0000000000000000, 0x9c0dff8aa10fdbf, 0xef80df550805027f, x2, 32, x5)

inst_5:// rs1==x19, rs2==x26, rd==x10, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b7_val == 1, rs2_b2_val == 8, rs2_b5_val == 0, rs2_b0_val == 8, rs1_b3_val == -128, rs2_b1_val == -17, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b4_val == -65, rs1_b6_val == 8, rs1_b5_val == -17, rs2_b4_val == -128, rs2_b7_val == 16
// opcode: add8 ; op1:x19; op2:x26; dest:x10; op1val:0x108efbf8010f603;  op2val:0x10ef0080fe08ef08
TEST_RR_OP(add8, x10, x19, x26, 0x0000000000000000, 0x108efbf8010f603, 0x10ef0080fe08ef08, x2, 40, x5)

inst_6:// rs1==x23, rs2==x28, rd==x30, rs1_b3_val == rs2_b3_val, rs1_b0_val == -9, rs1_b2_val == 1, rs2_b0_val == -128, rs2_b3_val == -9, rs1_b3_val == -9, rs2_b5_val == 1, rs2_b1_val == -3, rs1_b1_val == -2, rs1_b7_val == -9, rs1_b4_val == 2
// opcode: add8 ; op1:x23; op2:x28; dest:x30; op1val:0xf7f90302f701fef7;  op2val:0xc0050107f7f9fd80
TEST_RR_OP(add8, x30, x23, x28, 0x0000000000000000, 0xf7f90302f701fef7, 0xc0050107f7f9fd80, x2, 48, x5)

inst_7:// rs1==x14, rs2==x30, rd==x16, rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b5_val == -3, rs2_b3_val == -3, rs1_b1_val == -86, rs1_b5_val == 0, rs1_b3_val == 8, rs2_b4_val == 32, rs1_b7_val == 32
// opcode: add8 ; op1:x14; op2:x30; dest:x16; op1val:0x200300090809aaef;  op2val:0x63ffd20fd053ffc
TEST_RR_OP(add8, x16, x14, x30, 0x0000000000000000, 0x200300090809aaef, 0x63ffd20fd053ffc, x2, 56, x5)

inst_8:// rs1==x15, rs2==x25, rd==x0, rs1_b2_val == rs2_b2_val, rs1_b3_val == 127, rs2_b2_val == 4, rs1_b1_val == 85, rs2_b6_val == -9, rs1_b0_val == 4, rs2_b4_val == -9
// opcode: add8 ; op1:x15; op2:x25; dest:x0; op1val:0x555f8fa7f045504;  op2val:0x9f7f6f7f7048002
TEST_RR_OP(add8, x0, x15, x25, 0x0000000000000000, 0x555f8fa7f045504, 0x9f7f6f7f7048002, x2, 64, x5)

inst_9:// rs1==x29, rs2==x24, rd==x14, rs1_b1_val == rs2_b1_val, rs1_b7_val == 4, rs2_b0_val == -17, rs2_b3_val == -33, rs2_b4_val == -86, rs2_b1_val == -9, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b1_val == -9
// opcode: add8 ; op1:x29; op2:x24; dest:x14; op1val:0x4083ff8f906f706;  op2val:0x9faf8aadff9f7ef
TEST_RR_OP(add8, x14, x29, x24, 0x0000000000000000, 0x4083ff8f906f706, 0x9faf8aadff9f7ef, x2, 72, x5)

inst_10:// rs1==x24, rs2==x12, rd==x1, rs1_b0_val == rs2_b0_val, rs1_b5_val == 16, rs1_b0_val == 64, rs2_b0_val == 64, rs2_b5_val == 2, rs1_b1_val == 127, rs1_b6_val == 64, rs1_b7_val == 85, rs2_b4_val == 64
// opcode: add8 ; op1:x24; op2:x12; dest:x1; op1val:0x554010f907047f40;  op2val:0x93f0240063f0640
TEST_RR_OP(add8, x1, x24, x12, 0x0000000000000000, 0x554010f907047f40, 0x93f0240063f0640, x2, 80, x5)

inst_11:// rs1==x0, rs2==x29, rd==x4, rs2_b7_val == -86, rs1_b6_val == -65, rs1_b2_val == -1, rs2_b0_val == 16, rs1_b3_val == -3, rs1_b0_val == 8, rs2_b1_val == -2
// opcode: add8 ; op1:x0; op2:x29; dest:x4; op1val:0xbfbff808fdffaa08;  op2val:0xaa060107fdc0fe10
TEST_RR_OP(add8, x4, x0, x29, 0x0000000000000000, 0xbfbff808fdffaa08, 0xaa060107fdc0fe10, x2, 88, x5)

inst_12:// rs1==x13, rs2==x21, rd==x11, rs2_b7_val == 85, rs2_b2_val == 16, rs2_b3_val == 127, rs1_b2_val == 0, rs1_b0_val == 2, rs1_b3_val == 32, rs2_b4_val == -33, rs1_b4_val == -33, rs2_b5_val == -65
// opcode: add8 ; op1:x13; op2:x21; dest:x11; op1val:0x55f610df20000302;  op2val:0x55f7bfdf7f10f610
TEST_RR_OP(add8, x11, x13, x21, 0x0000000000000000, 0x55f610df20000302, 0x55f7bfdf7f10f610, x2, 96, x5)

inst_13:// rs1==x4, rs2==x15, rd==x9, rs2_b7_val == 127, rs2_b3_val == 1, rs2_b6_val == 2, rs1_b7_val == -17, rs2_b1_val == 16, rs2_b4_val == -2, rs1_b0_val == 85
// opcode: add8 ; op1:x4; op2:x15; dest:x9; op1val:0xefc0f9c00706fd55;  op2val:0x7f02dffe01aa1003
TEST_RR_OP(add8, x9, x4, x15, 0x0000000000000000, 0xefc0f9c00706fd55, 0x7f02dffe01aa1003, x2, 104, x5)

inst_14:// rs1==x27, rs2==x23, rd==x22, rs2_b7_val == -65, rs1_b0_val == -33, rs2_b2_val == 1, rs1_b5_val == 1, rs2_b3_val == -128, rs1_b2_val == -86, rs2_b4_val == -3
// opcode: add8 ; op1:x27; op2:x23; dest:x22; op1val:0x607010603aaffdf;  op2val:0xbf3ffafd8001fd55
TEST_RR_OP(add8, x22, x27, x23, 0x0000000000000000, 0x607010603aaffdf, 0xbf3ffafd8001fd55, x2, 112, x5)

inst_15:// rs1==x10, rs2==x19, rd==x15, rs2_b7_val == -33, rs2_b5_val == 64, rs1_b0_val == -2, rs1_b6_val == -3, rs2_b1_val == 1, rs2_b4_val == 8, rs1_b2_val == -3
// opcode: add8 ; op1:x10; op2:x19; dest:x15; op1val:0xc0fd07bf7ffdfefe;  op2val:0xdff6400810030109
TEST_RR_OP(add8, x15, x10, x19, 0x0000000000000000, 0xc0fd07bf7ffdfefe, 0xdff6400810030109, x2, 120, x6)

inst_16:// rs1==x20, rs2==x13, rd==x12, rs2_b7_val == -9, rs1_b5_val == -5, rs1_b4_val == -1, rs2_b6_val == 4, rs2_b2_val == 0
// opcode: add8 ; op1:x20; op2:x13; dest:x12; op1val:0xc055fbff1005c080;  op2val:0xf70400f703000105
TEST_RR_OP(add8, x12, x20, x13, 0x0000000000000000, 0xc055fbff1005c080, 0xf70400f703000105, x2, 128, x6)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_17:// rs1==x8, rs2==x9, rd==x23, rs2_b7_val == -5, rs2_b0_val == 32, rs1_b5_val == 127, rs1_b6_val == 0
// opcode: add8 ; op1:x8; op2:x9; dest:x23; op1val:0xbf007ff603f602bf;  op2val:0xfb07f655f93ff620
TEST_RR_OP(add8, x23, x8, x9, 0x0000000000000000, 0xbf007ff603f602bf, 0xfb07f655f93ff620, x4, 0, x6)

inst_18:// rs1==x26, rs2==x18, rd==x20, rs2_b7_val == -3, rs2_b5_val == 8, rs1_b1_val == 32, rs1_b7_val == -2, rs2_b4_val == 1, rs1_b4_val == 0
// opcode: add8 ; op1:x26; op2:x18; dest:x20; op1val:0xfef906003ffc2004;  op2val:0xfd06080101f60606
TEST_RR_OP(add8, x20, x26, x18, 0x0000000000000000, 0xfef906003ffc2004, 0xfd06080101f60606, x4, 8, x6)

inst_19:// rs1==x21, rs2==x20, rd==x28, rs2_b7_val == -2, rs2_b3_val == -86, rs1_b3_val == -33, rs1_b2_val == -128, rs1_b4_val == 127, rs2_b6_val == 0, rs2_b1_val == -1, rs2_b2_val == -128
// opcode: add8 ; op1:x21; op2:x20; dest:x28; op1val:0x4f9097fdf80f804;  op2val:0xfe00f83faa80fff6
TEST_RR_OP(add8, x28, x21, x20, 0x0000000000000000, 0x4f9097fdf80f804, 0xfe00f83faa80fff6, x4, 16, x6)

inst_20:// rs1==x30, rs2==x5, rd==x25, rs2_b7_val == -128, rs1_b7_val == -86, rs2_b2_val == -5, rs1_b6_val == -5
// opcode: add8 ; op1:x30; op2:x5; dest:x25; op1val:0xaafbf6dffc10c0f6;  op2val:0x80fa050903fbf640
TEST_RR_OP(add8, x25, x30, x5, 0x0000000000000000, 0xaafbf6dffc10c0f6, 0x80fa050903fbf640, x4, 24, x6)

inst_21:// rs1==x28, rs2==x7, rd==x18, rs2_b7_val == 64, rs1_b5_val == 64, rs2_b5_val == 32, rs1_b3_val == -2, rs1_b1_val == -33, rs2_b6_val == 64, rs1_b4_val == -17, rs1_b2_val == 127
// opcode: add8 ; op1:x28; op2:x7; dest:x18; op1val:0x7fa40effe7fdffe;  op2val:0x404020fa06080509
TEST_RR_OP(add8, x18, x28, x7, 0x0000000000000000, 0x7fa40effe7fdffe, 0x404020fa06080509, x4, 32, x6)

inst_22:// rs1==x22, rs2==x14, rd==x3, rs2_b7_val == 32, rs1_b5_val == 4, rs2_b2_val == -33, rs2_b1_val == 85, rs1_b1_val == -128
// opcode: add8 ; op1:x22; op2:x14; dest:x3; op1val:0x55fc043ffd0780fe;  op2val:0x20fbbf807fdf5510
TEST_RR_OP(add8, x3, x22, x14, 0x0000000000000000, 0x55fc043ffd0780fe, 0x20fbbf807fdf5510, x4, 40, x6)

inst_23:// rs1==x17, rs2==x3, rd==x2, rs2_b7_val == 8, rs1_b5_val == -3, rs2_b2_val == -2, rs1_b2_val == 2, rs2_b6_val == 1
// opcode: add8 ; op1:x17; op2:x3; dest:x2; op1val:0xf9fffdfcbf02f9f7;  op2val:0x801c0c0fcfe0709
TEST_RR_OP(add8, x2, x17, x3, 0x0000000000000000, 0xf9fffdfcbf02f9f7, 0x801c0c0fcfe0709, x4, 48, x6)

inst_24:// rs1==x9, rs2==x10, rd==x21, rs2_b7_val == 4, rs1_b0_val == 1, rs1_b6_val == -86
// opcode: add8 ; op1:x9; op2:x10; dest:x21; op1val:0xfaaa10f90303ff01;  op2val:0x440fa09aaf93f55
TEST_RR_OP(add8, x21, x9, x10, 0x0000000000000000, 0xfaaa10f90303ff01, 0x440fa09aaf93f55, x4, 56, x6)

inst_25:// rs1==x12, rs2==x31, rd==x27, rs2_b7_val == 2, rs1_b4_val == -9, rs1_b0_val == -3, rs1_b2_val == 85, rs2_b4_val == 127
// opcode: add8 ; op1:x12; op2:x31; dest:x27; op1val:0x705faf70655fefd;  op2val:0x201f87ffc090720
TEST_RR_OP(add8, x27, x12, x31, 0x0000000000000000, 0x705faf70655fefd, 0x201f87ffc090720, x4, 64, x6)

inst_26:// rs1==x2, rs2==x8, rd==x5, rs2_b7_val == 1, rs2_b3_val == -17, rs2_b1_val == -86, rs2_b0_val == 1, rs1_b6_val == 2, rs2_b2_val == 127
// opcode: add8 ; op1:x2; op2:x8; dest:x5; op1val:0xf80207ef00100305;  op2val:0x1074008ef7faa01
TEST_RR_OP(add8, x5, x2, x8, 0x0000000000000000, 0xf80207ef00100305, 0x1074008ef7faa01, x4, 72, x6)

inst_27:// rs1==x25, rs2==x2, rd==x13, rs2_b7_val == 0, rs1_b6_val == 127
// opcode: add8 ; op1:x25; op2:x2; dest:x13; op1val:0xaa7f7fffaac0f6fc;  op2val:0x40f606fafe0180
TEST_RR_OP(add8, x13, x25, x2, 0x0000000000000000, 0xaa7f7fffaac0f6fc, 0x40f606fafe0180, x4, 80, x6)

inst_28:// rs1==x5, rs2==x1, rd==x7, rs2_b7_val == -1, rs2_b4_val == -65, rs2_b2_val == -17, rs2_b0_val == -65
// opcode: add8 ; op1:x5; op2:x1; dest:x7; op1val:0xfa55f60520002001;  op2val:0xffeffdbff8ef01bf
TEST_RR_OP(add8, x7, x5, x1, 0x0000000000000000, 0xfa55f60520002001, 0xffeffdbff8ef01bf, x4, 88, x6)

inst_29:// rs1==x1, rs2==x27, rd==x8, rs2_b6_val == -86, rs1_b2_val == 8, rs2_b5_val == -128, rs2_b3_val == 64, rs1_b1_val == 8, rs1_b7_val == -5
// opcode: add8 ; op1:x1; op2:x27; dest:x8; op1val:0xfb063ff6c00808fc;  op2val:0x8aa80f840fe8005
TEST_RR_OP(add8, x8, x1, x27, 0x0000000000000000, 0xfb063ff6c00808fc, 0x8aa80f840fe8005, x4, 96, x6)

inst_30:// rs1==x18, rs2==x22, rd==x19, rs1_b5_val == -128, rs1_b7_val == -1, rs2_b6_val == -3, rs1_b0_val == -1, rs1_b1_val == 4, rs2_b5_val == 127
// opcode: add8 ; op1:x18; op2:x22; dest:x19; op1val:0xfffd807f065504ff;  op2val:0x7fd7f3f80fe0701
TEST_RR_OP(add8, x19, x18, x22, 0x0000000000000000, 0xfffd807f065504ff, 0x7fd7f3f80fe0701, x4, 104, x6)

inst_31:// rs1==x16, rs2==x0, rd==x29, rs1_b5_val == 32, rs1_b1_val == -17, rs2_b2_val == 2, rs1_b4_val == -2
// opcode: add8 ; op1:x16; op2:x0; dest:x29; op1val:0xc05520fe7f08eff9;  op2val:0x7f02fd4002028010
TEST_RR_OP(add8, x29, x16, x0, 0x0000000000000000, 0xc05520fe7f08eff9, 0x7f02fd4002028010, x4, 112, x6)

inst_32:// rs1_b5_val == 8, rs2_b6_val == -2
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff08f700aaf606;  op2val:0x80fe55df0301fcfa
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xfbff08f700aaf606, 0x80fe55df0301fcfa, x4, 120, x1)

inst_33:// rs1_b5_val == -1, rs1_b3_val == -1, rs1_b0_val == -86
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa09ff08ff02f6aa;  op2val:0xc00920fe0210f740
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xfa09ff08ff02f6aa, 0xc00920fe0210f740, x4, 128, x1)

inst_34:// rs1_b4_val == -86, rs1_b0_val == 32, rs2_b3_val == 0, rs2_b4_val == 2
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffefaadff70420;  op2val:0x6f6c00200f6f8f6
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xf7ffefaadff70420, 0x6f6c00200f6f8f6, x4, 136, x1)

inst_35:// rs1_b4_val == 85, rs1_b3_val == 4, rs2_b4_val == 4, rs1_b7_val == -128, rs1_b1_val == -65
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x80fc7f550400bf07;  op2val:0xfb09020409f6faf9
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x80fc7f550400bf07, 0xfb09020409f6faf9, x4, 144, x1)

inst_36:// rs1_b4_val == -5, rs1_b3_val == -17, rs1_b0_val == 16, rs2_b0_val == 0, rs2_b1_val == -5, rs1_b1_val == 0
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xffaa06fbef7f0010;  op2val:0xfe06087ff707fb00
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xffaa06fbef7f0010, 0xfe06087ff707fb00, x4, 152, x1)

inst_37:// rs1_b4_val == -3, rs1_b7_val == 2, rs1_b6_val == -9, rs2_b3_val == -1
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x2f708fdbffff8f8;  op2val:0xf8fdbf40ff00c008
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x2f708fdbffff8f8, 0xf8fdbf40ff00c008, x4, 160, x1)

inst_38:// rs1_b4_val == -128, rs2_b2_val == -65, rs2_b1_val == 0, rs1_b0_val == -5
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x20f70080203f06fb;  op2val:0xff1080f9fabf0080
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x20f70080203f06fb, 0xff1080f9fabf0080, x4, 168, x1)

inst_39:// rs1_b4_val == 64, rs2_b6_val == -65, rs2_b0_val == -1
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x4f60340f9093faa;  op2val:0x10bff820fbef03ff
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x4f60340f9093faa, 0x10bff820fbef03ff, x4, 176, x1)

inst_40:// rs1_b4_val == 32, rs2_b4_val == -5, rs2_b0_val == -86
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xef03fa20ff01bf40;  op2val:0xf83fc0fbdff9c0aa
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xef03fa20ff01bf40, 0xf83fc0fbdff9c0aa, x4, 184, x1)

inst_41:// rs1_b4_val == 16, rs2_b1_val == 64
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x306f610ff1005fb;  op2val:0x3f06fdfc05f94001
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x306f610ff1005fb, 0x3f06fdfc05f94001, x4, 192, x1)

inst_42:// rs1_b4_val == 4, rs2_b5_val == 4, rs2_b2_val == -1
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x5540ef04f8aaaac0;  op2val:0x7020410fdfff93f
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x5540ef04f8aaaac0, 0x7020410fdfff93f, x4, 200, x1)

inst_43:// rs1_b4_val == 1, rs1_b1_val == -5
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x550803010804fbdf;  op2val:0x55fddf80ffbf1001
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x550803010804fbdf, 0x55fddf80ffbf1001, x4, 208, x1)

inst_44:// rs1_b3_val == 85, rs2_b2_val == 64
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x9550303555505c0;  op2val:0x801003ff6400020
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x9550303555505c0, 0x801003ff6400020, x4, 216, x1)

inst_45:// rs1_b3_val == -5, rs1_b2_val == -65, rs1_b5_val == -86, rs2_b2_val == 85
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffdaa05fbbf55f8;  op2val:0xf70355fd0655aaaa
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x3ffdaa05fbbf55f8, 0xf70355fd0655aaaa, x4, 224, x1)

inst_46:// rs1_b3_val == 64, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xeff908004009fd03;  op2val:0xf706f807fe08ffc0
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xeff908004009fd03, 0xf706f807fe08ffc0, x4, 232, x1)

inst_47:// rs2_b3_val == 85, rs2_b6_val == 32, rs1_b5_val == 85, rs2_b1_val == -33
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xfc0255fb7f0309fa;  op2val:0x8020fd07553fdfff
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xfc0255fb7f0309fa, 0x8020fd07553fdfff, x4, 240, x1)

inst_48:// rs2_b3_val == -65, rs2_b5_val == -2, rs2_b0_val == -3
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8f87f0655f9fc09;  op2val:0xf804fef6bffe3ffd
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xf8f87f0655f9fc09, 0xf804fef6bffe3ffd, x4, 248, x1)

inst_49:// rs1_b5_val == -9, rs2_b6_val == -1, rs2_b2_val == 32, rs2_b4_val == -17
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xf855f702ef0104f8;  op2val:0x4ff3feffe20f6c0
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xf855f702ef0104f8, 0x4ff3feffe20f6c0, x4, 256, x1)

inst_50:// rs2_b3_val == 32, rs2_b1_val == 8
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xc006fffafefa07df;  op2val:0x2002feef20fe08fa
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xc006fffafefa07df, 0x2002feef20fe08fa, x4, 264, x1)

inst_51:// rs2_b3_val == 4, rs1_b2_val == -2
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9f7053ff9fe0801;  op2val:0x3f0607f704df0100
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xf9f7053ff9fe0801, 0x3f0607f704df0100, x4, 272, x1)

inst_52:// rs2_b2_val == -3, rs1_b3_val == 1, rs1_b2_val == -17, rs1_b6_val == 4, rs1_b1_val == 64
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xef0406bf01ef4003;  op2val:0xaa8020c000fdfe20
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xef0406bf01ef4003, 0xaa8020c000fdfe20, x4, 280, x1)

inst_53:// rs2_b1_val == -65, rs2_b0_val == -33, rs1_b0_val == 0
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f6fb55fe7ffa00;  op2val:0xf6faf8aa08bfdf
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x3f6fb55fe7ffa00, 0xf6faf8aa08bfdf, x4, 288, x1)

inst_54:// rs1_b3_val == 2, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xef09df8002ff0240;  op2val:0x5040520ff8003bf
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xef09df8002ff0240, 0x5040520ff8003bf, x4, 296, x1)

inst_55:// rs2_b1_val == 32, rs2_b0_val == -5
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xc000ef01f8f60400;  op2val:0xfafc09fe808020fb
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xc000ef01f8f60400, 0xfafc09fe808020fb, x4, 304, x1)

inst_56:// rs2_b1_val == 4, rs1_b2_val == -33, rs2_b5_val == -17, rs1_b6_val == -2
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9fe20dfaadf07aa;  op2val:0x220ef40002004bf
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xf9fe20dfaadf07aa, 0x220ef40002004bf, x4, 312, x1)

inst_57:// rs1_b2_val == -5, rs2_b5_val == -86, rs2_b6_val == 85
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x403efbf04fbf9f6;  op2val:0xfa55aa08fd08bf00
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x403efbf04fbf9f6, 0xfa55aa08fd08bf00, x4, 320, x1)

inst_58:// rs1_b2_val == 64, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x305aa0300404001;  op2val:0x30404bf0520f9aa
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x305aa0300404001, 0x30404bf0520f9aa, x4, 328, x1)

inst_59:// rs1_b2_val == 32, rs1_b6_val == -17
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xaaeffdf6f620fa40;  op2val:0x9fa05df0208feff
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xaaeffdf6f620fa40, 0x9fa05df0208feff, x4, 336, x1)

inst_60:// rs2_b0_val == -9, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb080320f7f8073f;  op2val:0xfefbdfc0f7fdf7f7
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xfb080320f7f8073f, 0xfefbdfc0f7fdf7f7, x4, 344, x1)

inst_61:// rs2_b0_val == -2, rs1_b7_val == 0
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xf95503f7fbfd40;  op2val:0xfbfffa04f80701fe
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xf95503f7fbfd40, 0xfbfffa04f80701fe, x4, 352, x1)

inst_62:// rs2_b6_val == 127, rs1_b7_val == 8
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x800fff9f6fa80f6;  op2val:0xf97f00bf0704ff08
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x800fff9f6fa80f6, 0xf97f00bf0704ff08, x4, 360, x1)

inst_63:// rs2_b6_val == -33, rs1_b7_val == -33
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xdfaafafe00104006;  op2val:0x7fdf024010800205
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xdfaafafe00104006, 0x7fdf024010800205, x4, 368, x1)

inst_64:// rs2_b0_val == 4, rs2_b6_val == 8
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x1bfff0304f9fdf7;  op2val:0xdf08fc0101404004
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x1bfff0304f9fdf7, 0xdf08fc0101404004, x4, 376, x1)

inst_65:// rs1_b7_val == 127, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffb09f7001040f9;  op2val:0xf910aa40014009fa
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x7ffb09f7001040f9, 0xf910aa40014009fa, x4, 384, x1)

inst_66:// rs2_b5_val == -5, rs1_b1_val == 1
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xfc0408fefb01ef;  op2val:0x4dffbf70040f9df
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xfc0408fefb01ef, 0x4dffbf70040f9df, x4, 392, x1)

inst_67:// rs2_b5_val == 16, rs1_b6_val == -128
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x380024006040640;  op2val:0x910100708aabffe
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x380024006040640, 0x910100708aabffe, x4, 400, x1)

inst_68:// rs1_b0_val == 127, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xeffb0507fb02f97f;  op2val:0x5bffe7fdff9fc55
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xeffb0507fb02f97f, 0x5bffe7fdff9fc55, x4, 408, x1)

inst_69:// rs1_b6_val == -33, rs1_b5_val == -65
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7dfbf06fc10bf02;  op2val:0xaadfef03ffef2006
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xf7dfbf06fc10bf02, 0xaadfef03ffef2006, x4, 416, x1)

inst_70:// rs1_b6_val == 32, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x820fb107f03fcef;  op2val:0xaa55fffe0110fefd
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x820fb107f03fcef, 0xaa55fffe0110fefd, x4, 424, x1)

inst_71:// rs1_b6_val == 16, rs2_b5_val == -9
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x4103fefff09aafc;  op2val:0x3f05f706f710f9fb
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x4103fefff09aafc, 0x3f05f706f710f9fb, x4, 432, x1)

inst_72:// rs1_b1_val == 16, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x55fcbf4009801020;  op2val:0x7f20807f02fb7f09
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x55fcbf4009801020, 0x7f20807f02fb7f09, x4, 440, x1)

inst_73:// rs1_b7_val == -3, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdc0f7fd0920f940;  op2val:0x805bfbffff95505
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xfdc0f7fd0920f940, 0x805bfbffff95505, x4, 448, x1)

inst_74:// rs1_b7_val == 64, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x40ef01fd00090009;  op2val:0xf6fff8fa0520ef07
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x40ef01fd00090009, 0xf6fff8fa0520ef07, x4, 456, x1)

inst_75:// rs1_b6_val == 1, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf01f60640aa7f10;  op2val:0xc0aa0903f980fc7f
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xbf01f60640aa7f10, 0xc0aa0903f980fc7f, x4, 464, x1)

inst_76:// rs2_b4_val == 0, 
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x20bffe2000ffef04;  op2val:0xc0aa0600f8aa0207
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x20bffe2000ffef04, 0xc0aa0600f8aa0207, x4, 472, x1)

inst_77:// rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b0_val == -65, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b3_val == -65, rs1_b6_val == rs2_b6_val, rs1_b1_val < 0 and rs2_b1_val < 0, rs2_b3_val == -5, rs1_b5_val == 2, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b5_val > 0 and rs2_b5_val < 0, rs2_b4_val == 16, rs1_b4_val == 8, rs1_b3_val < 0 and rs2_b3_val < 0, rs2_b5_val == -33, rs1_b7_val == 16
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x10070208bf05f8bf;  op2val:0xc007df10fbaaf907
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x10070208bf05f8bf, 0xc007df10fbaaf907, x4, 480, x1)

inst_78:// rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b4_val == -1, rs1_b2_val == 4, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b6_val < 0 and rs2_b6_val < 0, rs2_b6_val == -17, rs2_b3_val == -2, rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b1_val == -128, rs2_b5_val == 85, rs2_b2_val == -9, rs2_b0_val == 85
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0x9c00208fc0403ef;  op2val:0x9ef55fffef78055
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0x9c00208fc0403ef, 0x9ef55fffef78055, x4, 488, x1)

inst_79:// rs2_b7_val == -86, rs1_b6_val == -65, rs1_b2_val == -1, rs2_b0_val == 16, rs1_b3_val == -3, rs1_b0_val == 8, rs2_b1_val == -2
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfbff808fdffaa08;  op2val:0xaa060107fdc0fe10
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xbfbff808fdffaa08, 0xaa060107fdc0fe10, x4, 496, x1)

inst_80:// rs1_b5_val == 32, rs1_b1_val == -17, rs2_b2_val == 2, rs1_b4_val == -2
// opcode: add8 ; op1:x30; op2:x29; dest:x31; op1val:0xc05520fe7f08eff9;  op2val:0x7f02fd4002028010
TEST_RR_OP(add8, x31, x30, x29, 0x0000000000000000, 0xc05520fe7f08eff9, 0x7f02fd4002028010, x4, 504, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 64*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
