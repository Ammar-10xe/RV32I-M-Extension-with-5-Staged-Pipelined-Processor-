
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the stsa32 instruction of the RISC-V RV64PZicsr extension for the stsa32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",stsa32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x13,signature_x13_1)

inst_0:
// rs1 == rd != rs2, rs1==x0, rs2==x30, rd==x0, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val, rs1_w1_val == 4096, rs2_w0_val == 0
// opcode: stsa32 ; op1:x0; op2:x30; dest:x0; op1val:0x00100080000000;  op2val:0x00000600000000
TEST_RR_OP(stsa32, x0, x0, x30, 0x0000000000000000, 0x00100080000000, 0x00000600000000, x13, 0, x17)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x1, rs2==x3, rd==x7, rs1_w1_val == rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w1_val == -1025, rs2_w0_val == 512, rs1_w1_val == -1025, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 268435456
// opcode: stsa32 ; op1:x1; op2:x3; dest:x7; op1val:0xfffffbff10000000;  op2val:0xfffffbff00000200
TEST_RR_OP(stsa32, x7, x1, x3, 0x0000000000000000, 0xfffffbff10000000, 0xfffffbff00000200, x13, 8, x17)

inst_2:
// rs1 == rs2 != rd, rs1==x22, rs2==x22, rd==x26, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w1_val == 4194304, rs2_w0_val == 128, rs1_w0_val == 2048, rs1_w1_val == -1
// opcode: stsa32 ; op1:x22; op2:x22; dest:x26; op1val:0xffffffff00000800;  op2val:0x40000000000080
TEST_RR_OP(stsa32, x26, x22, x22, 0x0000000000000000, 0xffffffff00000800, 0x40000000000080, x13, 16, x17)

inst_3:
// rs1 == rs2 == rd, rs1==x5, rs2==x5, rd==x5, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w0_val == -8388609, rs2_w0_val == -536870913, rs1_w1_val == 2147483647
// opcode: stsa32 ; op1:x5; op2:x5; dest:x5; op1val:0x7fffffffff7fffff;  op2val:0xfffffffadfffffff
TEST_RR_OP(stsa32, x5, x5, x5, 0x0000000000000000, 0x7fffffffff7fffff, 0xfffffffadfffffff, x13, 24, x17)

inst_4:
// rs2 == rd != rs1, rs1==x15, rs2==x9, rd==x9, rs1_w0_val == rs2_w0_val, rs2_w0_val == 268435456, rs2_w1_val == -257
// opcode: stsa32 ; op1:x15; op2:x9; dest:x9; op1val:0xc000000010000000;  op2val:0xfffffeff10000000
TEST_RR_OP(stsa32, x9, x15, x9, 0x0000000000000000, 0xc000000010000000, 0xfffffeff10000000, x13, 32, x17)

inst_5:
// rs1==x8, rs2==x20, rd==x2, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w0_val == 131072, rs2_w1_val == -2049, rs1_w0_val == -524289
// opcode: stsa32 ; op1:x8; op2:x20; dest:x2; op1val:0xc0000000fff7ffff;  op2val:0xfffff7ff00020000
TEST_RR_OP(stsa32, x2, x8, x20, 0x0000000000000000, 0xc0000000fff7ffff, 0xfffff7ff00020000, x13, 40, x17)

inst_6:
// rs1==x16, rs2==x21, rd==x23, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w0_val == 16777216, rs1_w1_val == -268435457, rs2_w0_val == -4194305
// opcode: stsa32 ; op1:x16; op2:x21; dest:x23; op1val:0xefffffff01000000;  op2val:0xfffffff8ffbfffff
TEST_RR_OP(stsa32, x23, x16, x21, 0x0000000000000000, 0xefffffff01000000, 0xfffffff8ffbfffff, x13, 48, x17)

inst_7:
// rs1==x20, rs2==x28, rd==x12, rs2_w1_val == -1431655766, rs2_w0_val == -268435457
// opcode: stsa32 ; op1:x20; op2:x28; dest:x12; op1val:0x001000fffffff9;  op2val:0xaaaaaaaaefffffff
TEST_RR_OP(stsa32, x12, x20, x28, 0x0000000000000000, 0x001000fffffff9, 0xaaaaaaaaefffffff, x13, 56, x17)

inst_8:
// rs1==x24, rs2==x16, rd==x15, rs2_w1_val == 1431655765, rs1_w0_val == 536870912, rs2_w0_val == -8193, rs1_w1_val == 0
// opcode: stsa32 ; op1:x24; op2:x16; dest:x15; op1val:0x00000020000000;  op2val:0x55555555ffffdfff
TEST_RR_OP(stsa32, x15, x24, x16, 0x0000000000000000, 0x00000020000000, 0x55555555ffffdfff, x13, 64, x17)

inst_9:
// rs1==x2, rs2==x10, rd==x20, rs2_w1_val == 2147483647, rs1_w1_val == 256, rs1_w0_val == -1048577
// opcode: stsa32 ; op1:x2; op2:x10; dest:x20; op1val:0x000100ffefffff;  op2val:0x7fffffff10000000
TEST_RR_OP(stsa32, x20, x2, x10, 0x0000000000000000, 0x000100ffefffff, 0x7fffffff10000000, x13, 72, x17)

inst_10:
// rs1==x29, rs2==x12, rd==x1, rs2_w1_val == -1073741825, rs1_w1_val == -513
// opcode: stsa32 ; op1:x29; op2:x12; dest:x1; op1val:0xfffffdfffffffff9;  op2val:0xbfffffffdfffffff
TEST_RR_OP(stsa32, x1, x29, x12, 0x0000000000000000, 0xfffffdfffffffff9, 0xbfffffffdfffffff, x13, 80, x17)

inst_11:
// rs1==x27, rs2==x23, rd==x16, rs2_w1_val == -536870913, rs1_w0_val == -1073741825, rs2_w0_val == 4194304, rs1_w1_val == -2
// opcode: stsa32 ; op1:x27; op2:x23; dest:x16; op1val:0xfffffffebfffffff;  op2val:0xdfffffff00400000
TEST_RR_OP(stsa32, x16, x27, x23, 0x0000000000000000, 0xfffffffebfffffff, 0xdfffffff00400000, x13, 88, x17)

inst_12:
// rs1==x11, rs2==x15, rd==x14, rs2_w1_val == -268435457, rs1_w1_val == 16384, rs1_w0_val == 32768, rs2_w0_val == 4096
// opcode: stsa32 ; op1:x11; op2:x15; dest:x14; op1val:0x00400000008000;  op2val:0xefffffff00001000
TEST_RR_OP(stsa32, x14, x11, x15, 0x0000000000000000, 0x00400000008000, 0xefffffff00001000, x13, 96, x17)

inst_13:
// rs1==x12, rs2==x8, rd==x19, rs2_w1_val == -134217729, rs1_w1_val == 16, rs2_w0_val == 1073741824, rs1_w0_val == 67108864
// opcode: stsa32 ; op1:x12; op2:x8; dest:x19; op1val:0x00001004000000;  op2val:0xf7ffffff40000000
TEST_RR_OP(stsa32, x19, x12, x8, 0x0000000000000000, 0x00001004000000, 0xf7ffffff40000000, x13, 104, x17)

inst_14:
// rs1==x26, rs2==x27, rd==x6, rs2_w1_val == -67108865, rs1_w1_val == 268435456, rs2_w0_val == 65536
// opcode: stsa32 ; op1:x26; op2:x27; dest:x6; op1val:0x10000000bfffffff;  op2val:0xfbffffff00010000
TEST_RR_OP(stsa32, x6, x26, x27, 0x0000000000000000, 0x10000000bfffffff, 0xfbffffff00010000, x13, 112, x17)

inst_15:
// rs1==x23, rs2==x2, rd==x29, rs2_w1_val == -33554433, rs2_w0_val == -1431655766
// opcode: stsa32 ; op1:x23; op2:x2; dest:x29; op1val:0x000000ff7fffff;  op2val:0xfdffffffaaaaaaaa
TEST_RR_OP(stsa32, x29, x23, x2, 0x0000000000000000, 0x000000ff7fffff, 0xfdffffffaaaaaaaa, x13, 120, x17)

inst_16:
// rs1==x4, rs2==x1, rd==x8, rs2_w1_val == -16777217, rs1_w1_val == -134217729
// opcode: stsa32 ; op1:x4; op2:x1; dest:x8; op1val:0xf7ffffff00000800;  op2val:0xfeffffffefffffff
TEST_RR_OP(stsa32, x8, x4, x1, 0x0000000000000000, 0xf7ffffff00000800, 0xfeffffffefffffff, x13, 128, x17)

inst_17:
// rs1==x25, rs2==x24, rd==x30, rs2_w1_val == -8388609, rs1_w1_val == 67108864
// opcode: stsa32 ; op1:x25; op2:x24; dest:x30; op1val:0x400000000000009;  op2val:0xff7fffff00010000
TEST_RR_OP(stsa32, x30, x25, x24, 0x0000000000000000, 0x400000000000009, 0xff7fffff00010000, x13, 136, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_18:
// rs1==x28, rs2==x4, rd==x21, rs2_w1_val == -4194305, rs1_w0_val == -5, rs1_w1_val == 1431655765
// opcode: stsa32 ; op1:x28; op2:x4; dest:x21; op1val:0x55555555fffffffb;  op2val:0xffbfffff00000080
TEST_RR_OP(stsa32, x21, x28, x4, 0x0000000000000000, 0x55555555fffffffb, 0xffbfffff00000080, x1, 0, x2)

inst_19:
// rs1==x7, rs2==x6, rd==x4, rs2_w1_val == -2097153, rs2_w0_val == -5, rs1_w0_val == 256, rs1_w1_val == 512
// opcode: stsa32 ; op1:x7; op2:x6; dest:x4; op1val:0x00020000000100;  op2val:0xffdffffffffffffb
TEST_RR_OP(stsa32, x4, x7, x6, 0x0000000000000000, 0x00020000000100, 0xffdffffffffffffb, x1, 8, x2)

inst_20:
// rs1==x21, rs2==x19, rd==x11, rs2_w1_val == -1048577, rs2_w0_val == 1024, rs1_w0_val == -16777217
// opcode: stsa32 ; op1:x21; op2:x19; dest:x11; op1val:0x000009feffffff;  op2val:0xffefffff00000400
TEST_RR_OP(stsa32, x11, x21, x19, 0x0000000000000000, 0x000009feffffff, 0xffefffff00000400, x1, 16, x2)

inst_21:
// rs1==x10, rs2==x31, rd==x13, rs2_w1_val == -524289, rs1_w0_val == 33554432
// opcode: stsa32 ; op1:x10; op2:x31; dest:x13; op1val:0xefffffff02000000;  op2val:0xfff7ffffffffdfff
TEST_RR_OP(stsa32, x13, x10, x31, 0x0000000000000000, 0xefffffff02000000, 0xfff7ffffffffdfff, x1, 24, x2)

inst_22:
// rs1==x13, rs2==x14, rd==x22, rs2_w1_val == -262145, rs1_w1_val == 1073741824, rs1_w0_val == 8388608
// opcode: stsa32 ; op1:x13; op2:x14; dest:x22; op1val:0x4000000000800000;  op2val:0xfffbffffffffdfff
TEST_RR_OP(stsa32, x22, x13, x14, 0x0000000000000000, 0x4000000000800000, 0xfffbffffffffdfff, x1, 32, x2)

inst_23:
// rs1==x9, rs2==x25, rd==x31, rs2_w1_val == -131073, 
// opcode: stsa32 ; op1:x9; op2:x25; dest:x31; op1val:0x000000fffffffb;  op2val:0xfffdfffffffffff8
TEST_RR_OP(stsa32, x31, x9, x25, 0x0000000000000000, 0x000000fffffffb, 0xfffdfffffffffff8, x1, 40, x2)

inst_24:
// rs1==x31, rs2==x18, rd==x27, rs2_w1_val == -65537, rs1_w1_val == -33, rs2_w0_val == -2147483648, rs1_w0_val == -3
// opcode: stsa32 ; op1:x31; op2:x18; dest:x27; op1val:0xffffffdffffffffd;  op2val:0xfffeffff80000000
TEST_RR_OP(stsa32, x27, x31, x18, 0x0000000000000000, 0xffffffdffffffffd, 0xfffeffff80000000, x1, 48, x2)

inst_25:
// rs1==x30, rs2==x13, rd==x18, rs2_w1_val == -32769, rs1_w1_val == -65, rs1_w0_val == 262144
// opcode: stsa32 ; op1:x30; op2:x13; dest:x18; op1val:0xffffffbf00040000;  op2val:0xffff7fff00020000
TEST_RR_OP(stsa32, x18, x30, x13, 0x0000000000000000, 0xffffffbf00040000, 0xffff7fff00020000, x1, 56, x2)

inst_26:
// rs1==x18, rs2==x0, rd==x25, rs2_w1_val == -16385, rs2_w0_val == 256, rs1_w0_val == -4097, rs1_w1_val == 8388608
// opcode: stsa32 ; op1:x18; op2:x0; dest:x25; op1val:0x800000ffffefff;  op2val:0xffffbfff00000100
TEST_RR_OP(stsa32, x25, x18, x0, 0x0000000000000000, 0x800000ffffefff, 0xffffbfff00000100, x1, 64, x2)

inst_27:
// rs1==x6, rs2==x29, rd==x28, rs2_w1_val == -8193, rs1_w1_val == -1048577, rs1_w0_val == 4194304
// opcode: stsa32 ; op1:x6; op2:x29; dest:x28; op1val:0xffefffff00400000;  op2val:0xffffdfff00000007
TEST_RR_OP(stsa32, x28, x6, x29, 0x0000000000000000, 0xffefffff00400000, 0xffffdfff00000007, x1, 72, x2)

inst_28:
// rs1==x17, rs2==x7, rd==x3, rs2_w1_val == -4097, rs1_w0_val == 512, rs1_w1_val == 2097152
// opcode: stsa32 ; op1:x17; op2:x7; dest:x3; op1val:0x20000000000200;  op2val:0xffffefffaaaaaaaa
TEST_RR_OP(stsa32, x3, x17, x7, 0x0000000000000000, 0x20000000000200, 0xffffefffaaaaaaaa, x1, 80, x2)

inst_29:
// rs1==x3, rs2==x17, rd==x24, rs2_w1_val == -513, rs1_w1_val == 8192, rs1_w0_val == 8192
// opcode: stsa32 ; op1:x3; op2:x17; dest:x24; op1val:0x00200000002000;  op2val:0xfffffdff00020000
TEST_RR_OP(stsa32, x24, x3, x17, 0x0000000000000000, 0x00200000002000, 0xfffffdff00020000, x1, 88, x2)

inst_30:
// rs1==x14, rs2==x11, rd==x10, rs2_w1_val == -129, 
// opcode: stsa32 ; op1:x14; op2:x11; dest:x10; op1val:0x000009ffefffff;  op2val:0xffffff7f00000100
TEST_RR_OP(stsa32, x10, x14, x11, 0x0000000000000000, 0x000009ffefffff, 0xffffff7f00000100, x1, 96, x2)

inst_31:
// rs1==x19, rs2==x26, rd==x17, rs2_w1_val == -65, rs1_w0_val == 64, rs1_w1_val == -9
// opcode: stsa32 ; op1:x19; op2:x26; dest:x17; op1val:0xfffffff700000040;  op2val:0xffffffbf00000400
TEST_RR_OP(stsa32, x17, x19, x26, 0x0000000000000000, 0xfffffff700000040, 0xffffffbf00000400, x1, 104, x2)

inst_32:
// rs2_w1_val == -33, rs2_w0_val == -131073, rs1_w0_val == 2147483647, rs1_w1_val == -8388609
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff7fffffff;  op2val:0xffffffdffffdffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xff7fffff7fffffff, 0xffffffdffffdffff, x1, 112, x2)

inst_33:
// rs2_w1_val == -17, rs2_w0_val == -257, rs1_w0_val == -2049
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcfffff7ff;  op2val:0xffffffeffffffeff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffcfffff7ff, 0xffffffeffffffeff, x1, 120, x2)

inst_34:
// rs2_w1_val == -9, rs2_w0_val == -2049
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555504000000;  op2val:0xfffffff7fffff7ff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x5555555504000000, 0xfffffff7fffff7ff, x1, 128, x2)

inst_35:
// rs2_w1_val == -5, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff20000000;  op2val:0xfffffffb80000000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffffffff20000000, 0xfffffffb80000000, x1, 136, x2)

inst_36:
// rs2_w1_val == -3, rs2_w0_val == 16777216, rs1_w1_val == -129
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000006;  op2val:0xfffffffd01000000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000006, 0xfffffffd01000000, x1, 144, x2)

inst_37:
// rs2_w1_val == -2, rs1_w0_val == 32, rs2_w0_val == 2048
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000020;  op2val:0xfffffffe00000800
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xefffffff00000020, 0xfffffffe00000800, x1, 152, x2)

inst_38:
// rs2_w1_val == -2147483648, rs1_w1_val == 64, rs2_w0_val == 8388608
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000800000;  op2val:0x8000000000800000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x00004000800000, 0x8000000000800000, x1, 160, x2)

inst_39:
// rs2_w1_val == 1073741824, rs2_w0_val == 1431655765, rs1_w0_val == -32769, rs1_w1_val == -32769
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffff7fff;  op2val:0x4000000055555555
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffff7fffffff7fff, 0x4000000055555555, x1, 168, x2)

inst_40:
// rs2_w1_val == 536870912, rs1_w1_val == 16777216
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000009;  op2val:0x2000000000400000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x100000000000009, 0x2000000000400000, x1, 176, x2)

inst_41:
// rs2_w1_val == 268435456, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000010000000;  op2val:0x1000000000000005
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x400000010000000, 0x1000000000000005, x1, 184, x2)

inst_42:
// rs2_w1_val == 134217728, rs1_w0_val == 2
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000002;  op2val:0x8000000fffffff8
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000002, 0x8000000fffffff8, x1, 192, x2)

inst_43:
// rs2_w1_val == 67108864, rs1_w0_val == -257
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafffffeff;  op2val:0x4000000fffffffc
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffafffffeff, 0x4000000fffffffc, x1, 200, x2)

inst_44:
// rs2_w1_val == 33554432, rs1_w1_val == -524289, rs2_w0_val == -16385, rs1_w0_val == -2097153
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffdfffff;  op2val:0x2000000ffffbfff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffdfffff, 0x2000000ffffbfff, x1, 208, x2)

inst_45:
// rs2_w1_val == 16777216, rs1_w1_val == -4097, rs2_w0_val == 64
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff02000000;  op2val:0x100000000000040
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffffefff02000000, 0x100000000000040, x1, 216, x2)

inst_46:
// rs2_w1_val == 8388608, rs2_w0_val == -8388609, rs1_w0_val == 2097152
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00200000;  op2val:0x800000ff7fffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffffefff00200000, 0x800000ff7fffff, x1, 224, x2)

inst_47:
// rs2_w1_val == 2097152, rs2_w0_val == -65537
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00800000;  op2val:0x200000fffeffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00800000, 0x200000fffeffff, x1, 232, x2)

inst_48:
// rs2_w1_val == 1048576, rs2_w0_val == 536870912
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000980000000;  op2val:0x10000020000000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x00000980000000, 0x10000020000000, x1, 240, x2)

inst_49:
// rs2_w1_val == 524288, rs2_w0_val == -33554433, rs1_w1_val == -1431655766
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffff7ff;  op2val:0x080000fdffffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffff7ff, 0x080000fdffffff, x1, 248, x2)

inst_50:
// rs2_w1_val == 262144, rs2_w0_val == 2
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00002000;  op2val:0x04000000000002
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00002000, 0x04000000000002, x1, 256, x2)

inst_51:
// rs2_w1_val == 131072, rs1_w0_val == -1025, rs2_w0_val == 33554432, rs1_w1_val == -536870913
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffbff;  op2val:0x02000002000000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffbff, 0x02000002000000, x1, 264, x2)

inst_52:
// rs2_w1_val == 65536, rs1_w0_val == 134217728
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc08000000;  op2val:0x01000000000005
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffc08000000, 0x01000000000005, x1, 272, x2)

inst_53:
// rs1_w0_val == 1048576, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00100000;  op2val:0xffffffeffffffffb
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xefffffff00100000, 0xffffffeffffffffb, x1, 280, x2)

inst_54:
// rs1_w0_val == 524288, rs1_w1_val == 134217728
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000080000;  op2val:0xffffdfff00000040
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x800000000080000, 0xffffdfff00000040, x1, 288, x2)

inst_55:
// rs1_w0_val == 131072, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00020000;  op2val:0xfffdffffffffdfff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00020000, 0xfffdffffffffdfff, x1, 296, x2)

inst_56:
// rs1_w0_val == 65536, rs1_w1_val == 2048, rs2_w0_val == -524289
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000010000;  op2val:0x100000fff7ffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x00080000010000, 0x100000fff7ffff, x1, 304, x2)

inst_57:
// rs1_w0_val == 16384, rs2_w0_val == 2147483647, rs1_w1_val == -262145
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00004000;  op2val:0xf7ffffff7fffffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00004000, 0xf7ffffff7fffffff, x1, 312, x2)

inst_58:
// rs1_w0_val == 4096, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000001000;  op2val:0x000003ffffbfff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x800000000001000, 0x000003ffffbfff, x1, 320, x2)

inst_59:
// rs1_w0_val == 1024, rs1_w1_val == 4194304
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000400;  op2val:0xfffffff940000000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x40000000000400, 0xfffffff940000000, x1, 328, x2)

inst_60:
// rs1_w0_val == 128, rs2_w1_val == 128
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000080;  op2val:0x000080ff7fffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x00200000000080, 0x000080ff7fffff, x1, 336, x2)

inst_61:
// rs1_w0_val == 16, rs2_w0_val == -67108865, rs1_w1_val == 1
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000010;  op2val:0xfffffffdfbffffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x00000100000010, 0xfffffffdfbffffff, x1, 344, x2)

inst_62:
// rs1_w0_val == 8, rs2_w1_val == 16384
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000008;  op2val:0x00400000000003
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x00000600000008, 0x00400000000003, x1, 352, x2)

inst_63:
// rs1_w0_val == 4, rs2_w1_val == 64, rs2_w0_val == -134217729
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000004;  op2val:0x000040f7ffffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x00000700000004, 0x000040f7ffffff, x1, 360, x2)

inst_64:
// rs1_w0_val == 1, rs2_w0_val == -1073741825
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000001;  op2val:0xdfffffffbfffffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x100000000000001, 0xdfffffffbfffffff, x1, 368, x2)

inst_65:
// rs1_w0_val == 0, rs1_w1_val == -2097153, rs2_w0_val == 32768
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000000;  op2val:0x200000000008000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000000, 0x200000000008000, x1, 376, x2)

inst_66:
// rs1_w0_val == -1, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffffff;  op2val:0xffffdfffffffbfff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffffff, 0xffffdfffffffbfff, x1, 384, x2)

inst_67:
// rs2_w1_val == 32768, rs1_w1_val == 65536
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000040000;  op2val:0x008000bfffffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x01000000040000, 0x008000bfffffff, x1, 392, x2)

inst_68:
// rs2_w1_val == 8192, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500400000;  op2val:0x002000fffffff6
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x00000500400000, 0x002000fffffff6, x1, 400, x2)

inst_69:
// rs2_w1_val == 4096, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000800;  op2val:0x00100040000000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x800000000000800, 0x00100040000000, x1, 408, x2)

inst_70:
// rs2_w1_val == 2048, rs1_w1_val == 32, rs2_w0_val == -32769, rs1_w0_val == -129
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020ffffff7f;  op2val:0x000800ffff7fff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x000020ffffff7f, 0x000800ffff7fff, x1, 416, x2)

inst_71:
// rs2_w1_val == 1024, rs1_w0_val == -4194305, rs2_w0_val == -2097153
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffbfffff;  op2val:0x000400ffdfffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x000800ffbfffff, 0x000400ffdfffff, x1, 424, x2)

inst_72:
// rs2_w1_val == 512, rs2_w0_val == 262144, rs1_w1_val == -2049
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000007;  op2val:0x00020000040000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000007, 0x00020000040000, x1, 432, x2)

inst_73:
// rs2_w1_val == 256, rs2_w0_val == 8
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000400000;  op2val:0x00010000000008
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x40000000400000, 0x00010000000008, x1, 440, x2)

inst_74:
// rs2_w1_val == 32, rs2_w0_val == 16384
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fffffffb;  op2val:0x00002000004000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff6fffffffb, 0x00002000004000, x1, 448, x2)

inst_75:
// rs2_w1_val == 16, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000010;  op2val:0x00001000000080
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x00100000000010, 0x00001000000080, x1, 456, x2)

inst_76:
// rs2_w1_val == 8, rs1_w0_val == -33
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffffffdf;  op2val:0x00000800400000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x000800ffffffdf, 0x00000800400000, x1, 464, x2)

inst_77:
// rs2_w1_val == 4, rs1_w1_val == -17
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00040000;  op2val:0x00000400000003
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffffffef00040000, 0x00000400000003, x1, 472, x2)

inst_78:
// rs2_w1_val == 2, rs2_w0_val == -513
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500000080;  op2val:0x000002fffffdff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x00000500000080, 0x000002fffffdff, x1, 480, x2)

inst_79:
// rs2_w1_val == 1, rs1_w1_val == 33554432
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000400;  op2val:0x00000120000000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x200000000000400, 0x00000120000000, x1, 488, x2)

inst_80:
// rs2_w1_val == 0, rs1_w1_val == -65537
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffffdf;  op2val:0x000000fffffff6
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffffdf, 0x000000fffffff6, x1, 496, x2)

inst_81:
// rs2_w1_val == -1, rs2_w0_val == 1, rs1_w0_val == -536870913
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffdfffffff;  op2val:0xffffffff00000001
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffffdffdfffffff, 0xffffffff00000001, x1, 504, x2)

inst_82:
// rs2_w0_val == -16777217, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000004;  op2val:0x000003feffffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xefffffff00000004, 0x000003feffffff, x1, 512, x2)

inst_83:
// rs2_w0_val == 8192, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700080000;  op2val:0xffffffef00002000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff700080000, 0xffffffef00002000, x1, 520, x2)

inst_84:
// rs2_w0_val == 32, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000008;  op2val:0x00010000000020
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x00002000000008, 0x00010000000020, x1, 528, x2)

inst_85:
// rs2_w0_val == 16, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00001000;  op2val:0xffefffff00000010
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffffefff00001000, 0xffefffff00000010, x1, 536, x2)

inst_86:
// rs2_w0_val == 4, rs1_w0_val == -33554433, rs1_w1_val == 1024
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400fdffffff;  op2val:0x01000000000004
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x000400fdffffff, 0x01000000000004, x1, 544, x2)

inst_87:
// rs2_w0_val == -1, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffdffffff;  op2val:0xfffffdffffffffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffffbfffdffffff, 0xfffffdffffffffff, x1, 552, x2)

inst_88:
// rs1_w1_val == -1073741825, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000004;  op2val:0x10000000000003
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000004, 0x10000000000003, x1, 560, x2)

inst_89:
// rs1_w1_val == -67108865, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffefff;  op2val:0x4000000ffff7fff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfbffffffffffefff, 0x4000000ffff7fff, x1, 568, x2)

inst_90:
// rs1_w1_val == -33554433, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffff7ff;  op2val:0x200000ffbfffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffff7ff, 0x200000ffbfffff, x1, 576, x2)

inst_91:
// rs1_w1_val == -16777217, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00001000;  op2val:0xfdffffff40000000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00001000, 0xfdffffff40000000, x1, 584, x2)

inst_92:
// rs1_w1_val == -4194305, rs1_w0_val == -1431655766, rs2_w0_val == 524288
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffaaaaaaaa;  op2val:0x00000400080000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffbfffffaaaaaaaa, 0x00000400080000, x1, 592, x2)

inst_93:
// rs1_w1_val == -131073, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffffffffb;  op2val:0xc0000000aaaaaaaa
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffdfffffffffffb, 0xc0000000aaaaaaaa, x1, 600, x2)

inst_94:
// rs1_w1_val == -16385, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffffb;  op2val:0x10000002000000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffffb, 0x10000002000000, x1, 608, x2)

inst_95:
// rs1_w1_val == -8193, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000400;  op2val:0xfffffffb40000000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000400, 0xfffffffb40000000, x1, 616, x2)

inst_96:
// rs1_w1_val == -257, rs2_w0_val == -4097
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000005;  op2val:0x010000ffffefff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000005, 0x010000ffffefff, x1, 624, x2)

inst_97:
// rs1_w1_val == -5, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00020000;  op2val:0x00080055555555
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00020000, 0x00080055555555, x1, 632, x2)

inst_98:
// rs1_w1_val == -3, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffff7ff;  op2val:0xfffffff9feffffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffff7ff, 0xfffffff9feffffff, x1, 640, x2)

inst_99:
// rs1_w1_val == -2147483648, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000010000;  op2val:0xfbfffffff7ffffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x8000000000010000, 0xfbfffffff7ffffff, x1, 648, x2)

inst_100:
// rs1_w1_val == 536870912, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000020;  op2val:0x800000000000400
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x2000000000000020, 0x800000000000400, x1, 656, x2)

inst_101:
// rs1_w1_val == 1048576, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000006;  op2val:0x10000000ffffefff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x10000000000006, 0x10000000ffffefff, x1, 664, x2)

inst_102:
// rs1_w1_val == 524288, rs1_w0_val == -17
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000ffffffef;  op2val:0x2000000000000005
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x080000ffffffef, 0x2000000000000005, x1, 672, x2)

inst_103:
// rs1_w1_val == 262144, rs1_w0_val == 1073741824
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000040000000;  op2val:0x1000000ffdfffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x04000040000000, 0x1000000ffdfffff, x1, 680, x2)

inst_104:
// rs1_w1_val == 131072, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000aaaaaaaa;  op2val:0xfffffdfffffffeff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x020000aaaaaaaa, 0xfffffdfffffffeff, x1, 688, x2)

inst_105:
// rs1_w1_val == 32768, rs1_w0_val == -9
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffffff7;  op2val:0xfffffeffff7fffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x008000fffffff7, 0xfffffeffff7fffff, x1, 696, x2)

inst_106:
// rs1_w1_val == 128, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080ffffffff;  op2val:0x080000fbffffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x000080ffffffff, 0x080000fbffffff, x1, 704, x2)

inst_107:
// rs1_w1_val == 8, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800002000;  op2val:0xffffdfff00000100
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x00000800002000, 0xffffdfff00000100, x1, 712, x2)

inst_108:
// rs1_w1_val == 4, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400400000;  op2val:0xfffffff900000009
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x00000400400000, 0xfffffff900000009, x1, 720, x2)

inst_109:
// rs1_w1_val == 2, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000009;  op2val:0xffffffbffffffffb
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x00000200000009, 0xffffffbffffffffb, x1, 728, x2)

inst_110:
// rs1_w0_val == 1431655765, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff55555555;  op2val:0x004000fffffeff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffffdff55555555, 0x004000fffffeff, x1, 736, x2)

inst_111:
// rs2_w0_val == -1048577, rs1_w0_val == -131073
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffdffff;  op2val:0x000040ffefffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffdffff, 0x000040ffefffff, x1, 744, x2)

inst_112:
// rs1_w0_val == -268435457, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001efffffff;  op2val:0x3fffffff00000400
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x000001efffffff, 0x3fffffff00000400, x1, 752, x2)

inst_113:
// rs1_w0_val == -134217729, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbff7ffffff;  op2val:0x08000000004000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffffffbff7ffffff, 0x08000000004000, x1, 760, x2)

inst_114:
// rs2_w0_val == -262145, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000004;  op2val:0x000009fffbffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000004, 0x000009fffbffff, x1, 768, x2)

inst_115:
// rs1_w0_val == -67108865, rs2_w0_val == -129
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffbffffff;  op2val:0x004000ffffff7f
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffbffffffbffffff, 0x004000ffffff7f, x1, 776, x2)

inst_116:
// rs2_w0_val == -1025, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffffff6;  op2val:0xffffeffffffffbff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x000020fffffff6, 0xffffeffffffffbff, x1, 784, x2)

inst_117:
// rs1_w0_val == -262145, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffbffff;  op2val:0x00000100000006
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffeffffffffbffff, 0x00000100000006, x1, 792, x2)

inst_118:
// rs1_w0_val == -65537, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005fffeffff;  op2val:0x400000bfffffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x000005fffeffff, 0x400000bfffffff, x1, 800, x2)

inst_119:
// rs2_w0_val == -65, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff04000000;  op2val:0xffffdfffffffffbf
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffbffff04000000, 0xffffdfffffffffbf, x1, 808, x2)

inst_120:
// rs1_w0_val == -16385, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000ffffbfff;  op2val:0x008000fff7ffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x000000ffffbfff, 0x008000fff7ffff, x1, 816, x2)

inst_121:
// rs2_w0_val == -33, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffff7;  op2val:0x10000000ffffffdf
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfefffffffffffff7, 0x10000000ffffffdf, x1, 824, x2)

inst_122:
// rs1_w0_val == -8193, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200ffffdfff;  op2val:0xfffffff8ffffffbf
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x000200ffffdfff, 0xfffffff8ffffffbf, x1, 832, x2)

inst_123:
// rs2_w0_val == -17, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfaaaaaaaa;  op2val:0x000800ffffffef
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffffffbfaaaaaaaa, 0x000800ffffffef, x1, 840, x2)

inst_124:
// rs2_w0_val == -9, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffdffffff;  op2val:0xfffefffffffffff7
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffffdfffdffffff, 0xfffefffffffffff7, x1, 848, x2)

inst_125:
// rs2_w0_val == -3, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefdffffff;  op2val:0x020000fffffffd
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffefdffffff, 0x020000fffffffd, x1, 856, x2)

inst_126:
// rs1_w0_val == -513, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080fffffdff;  op2val:0xf7ffffff40000000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x000080fffffdff, 0xf7ffffff40000000, x1, 864, x2)

inst_127:
// rs2_w0_val == -2, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000002000000;  op2val:0x008000fffffffe
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x4000000002000000, 0x008000fffffffe, x1, 872, x2)

inst_128:
// rs1_w0_val == -65, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffffffbf;  op2val:0x400000000002000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffffffefffffffbf, 0x400000000002000, x1, 880, x2)

inst_129:
// rs2_w0_val == 134217728, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff02000000;  op2val:0xffffff7f08000000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffffdfff02000000, 0xffffff7f08000000, x1, 888, x2)

inst_130:
// rs2_w0_val == 67108864, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffffdffff;  op2val:0x5555555504000000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffffdffffffdffff, 0x5555555504000000, x1, 896, x2)

inst_131:
// rs1_w0_val == -2, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffffffe;  op2val:0xfffffffdffbfffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffffeffffffffffe, 0xfffffffdffbfffff, x1, 904, x2)

inst_132:
// rs2_w0_val == 2097152, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00400000;  op2val:0x20000000200000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00400000, 0x20000000200000, x1, 912, x2)

inst_133:
// rs2_w0_val == 1048576, 
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fffffffb;  op2val:0x00100000100000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x55555555fffffffb, 0x00100000100000, x1, 920, x2)

inst_134:
// rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val, rs1_w1_val == 4096, rs2_w0_val == 0
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100080000000;  op2val:0x00000600000000
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x00100080000000, 0x00000600000000, x1, 928, x2)

inst_135:
// rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w0_val == -8388609, rs2_w0_val == -536870913, rs1_w1_val == 2147483647
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffff7fffff;  op2val:0xfffffffadfffffff
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x7fffffffff7fffff, 0xfffffffadfffffff, x1, 936, x2)

inst_136:
// rs2_w1_val == -16385, rs2_w0_val == 256, rs1_w0_val == -4097, rs1_w1_val == 8388608
// opcode: stsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffffefff;  op2val:0xffffbfff00000100
TEST_RR_OP(stsa32, x31, x30, x29, 0x0000000000000000, 0x800000ffffefff, 0xffffbfff00000100, x1, 944, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 119*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
