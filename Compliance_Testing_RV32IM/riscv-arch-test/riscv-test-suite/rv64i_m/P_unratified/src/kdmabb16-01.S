
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kdmabb16 instruction of the RISC-V RV64PZicsr extension for the kdmabb16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kdmabb16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 == rd != rs2, rs1==x10, rs2==x8, rd==x10, rs1_h0_val == -32768, rs1_h3_val == 1024, rs1_h3_val != rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h3_val == 16384, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val == -4097, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -2, rs2_h1_val == 8
// opcode: kdmabb16 ; op1:x10; op2:x8; dest:x10; op1val:0x400effffffc8000;  op2val:0x4000c0000008fffe
TEST_PKRR_OP(kdmabb16, x10, x10, x8, 0x0000000000000000, 0x400effffffc8000, 0x4000c0000008fffe, x10, x11, 0, x13)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x16, rd==x25, rs1_h3_val == rs2_h3_val, rs2_h2_val == -1, rs2_h1_val == -1, rs2_h0_val == -21846, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == 8, rs1_h1_val == -4097, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h2_val == -5
// opcode: kdmabb16 ; op1:x28; op2:x16; dest:x25; op1val:0x09fffbefff0008;  op2val:0x09ffffffffaaaa
TEST_PKRR_OP(kdmabb16, x25, x28, x16, 0x0000000000000000, 0x09fffbefff0008, 0x09ffffffffaaaa, x28, x11, 16, x13)

inst_2:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x28, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h1_val == -1025, rs2_h0_val == 4, rs1_h0_val == -5, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h3_val == -5, rs2_h1_val == 128, rs2_h2_val == 2
// opcode: kdmabb16 ; op1:x30; op2:x30; dest:x28; op1val:0xfffbfff8fbfffffb;  op2val:0x3fff000200800004
TEST_PKRR_OP(kdmabb16, x28, x30, x30, 0x0000000000000000, 0xfffbfff8fbfffffb, 0x3fff000200800004, x30, x11, 32, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x19, rs2==x19, rd==x19, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -33, rs1_h1_val == 128, rs1_h2_val == -21846, rs2_h2_val == -32768, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -32768, rs1_h3_val == -9, rs2_h0_val == 512, rs1_h0_val == -257
// opcode: kdmabb16 ; op1:x19; op2:x19; dest:x19; op1val:0xfff7aaaa0080feff;  op2val:0xffdf800080000200
TEST_PKRR_OP(kdmabb16, x19, x19, x19, 0x0000000000000000, 0xfff7aaaa0080feff, 0xffdf800080000200, x19, x11, 48, x13)

inst_4:
// rs2 == rd != rs1, rs1==x16, rs2==x6, rd==x6, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h0_val == 1024, rs2_h0_val == -1025, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 21845, rs1_h1_val == -8193, rs2_h3_val == -4097
// opcode: kdmabb16 ; op1:x16; op2:x6; dest:x6; op1val:0x3fff5555dfff0400;  op2val:0xefff0009fff9fbff
TEST_PKRR_OP(kdmabb16, x6, x16, x6, 0x0000000000000000, 0x3fff5555dfff0400, 0xefff0009fff9fbff, x16, x11, 64, x13)

inst_5:
// rs1==x9, rs2==x23, rd==x7, rs1_h2_val == rs2_h2_val, rs2_h2_val == -129, rs2_h1_val == -257, rs1_h1_val == 32767, rs2_h0_val == -3, rs2_h3_val == 8, rs1_h2_val == -129, rs1_h0_val == -129
// opcode: kdmabb16 ; op1:x9; op2:x23; dest:x7; op1val:0xfffcff7f7fffff7f;  op2val:0x08ff7ffefffffd
TEST_PKRR_OP(kdmabb16, x7, x9, x23, 0x0000000000000000, 0xfffcff7f7fffff7f, 0x08ff7ffefffffd, x9, x11, 80, x13)

inst_6:
// rs1==x7, rs2==x5, rd==x3, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h3_val == 128, rs1_h1_val == 2048, rs2_h2_val == -65, rs1_h2_val == 32, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 0, rs2_h3_val == 2, rs2_h0_val == 4096
// opcode: kdmabb16 ; op1:x7; op2:x5; dest:x3; op1val:0x80002008000000;  op2val:0x02ffbf00071000
TEST_PKRR_OP(kdmabb16, x3, x7, x5, 0x0000000000000000, 0x80002008000000, 0x02ffbf00071000, x7, x11, 96, x13)

inst_7:
// rs1==x23, rs2==x2, rd==x0, rs1_h1_val == rs2_h1_val, rs2_h2_val == -8193, rs2_h1_val == -16385, rs1_h3_val == -129, rs1_h1_val == -16385, rs1_h0_val == -21846
// opcode: kdmabb16 ; op1:x23; op2:x2; dest:x0; op1val:0xff7ffffcbfffaaaa;  op2val:0xfffcdfffbfff3fff
TEST_PKRR_OP(kdmabb16, x0, x23, x2, 0x0000000000000000, 0xff7ffffcbfffaaaa, 0xfffcdfffbfff3fff, x23, x11, 112, x13)

inst_8:
// rs1==x25, rs2==x0, rd==x12, rs1_h0_val == rs2_h0_val, rs1_h2_val == 16384, rs2_h0_val == 16, rs2_h1_val == 32767, rs1_h1_val == 32, rs1_h0_val == 16, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == 32767, rs1_h3_val == 16384
// opcode: kdmabb16 ; op1:x25; op2:x0; dest:x12; op1val:0x4000400000200010;  op2val:0x7ffffffa7fff0010
TEST_PKRR_OP(kdmabb16, x12, x25, x0, 0x0000000000000000, 0x4000400000200010, 0x7ffffffa7fff0010, x25, x11, 128, x13)

inst_9:
// rs1==x3, rs2==x22, rd==x8, rs2_h3_val == -21846, rs2_h1_val == -2, rs1_h2_val == -513, rs1_h3_val == 16, rs1_h0_val == 64
// opcode: kdmabb16 ; op1:x3; op2:x22; dest:x8; op1val:0x10fdfffff60040;  op2val:0xaaaadffffffefff8
TEST_PKRR_OP(kdmabb16, x8, x3, x22, 0x0000000000000000, 0x10fdfffff60040, 0xaaaadffffffefff8, x3, x11, 144, x13)

inst_10:
// rs1==x6, rs2==x20, rd==x18, rs2_h3_val == 21845, rs2_h2_val == 2048, rs2_h0_val == -129
// opcode: kdmabb16 ; op1:x6; op2:x20; dest:x18; op1val:0xfffa5555dfff0003;  op2val:0x555508007fffff7f
TEST_PKRR_OP(kdmabb16, x18, x6, x20, 0x0000000000000000, 0xfffa5555dfff0003, 0x555508007fffff7f, x6, x11, 160, x13)

inst_11:
// rs1==x4, rs2==x14, rd==x17, rs2_h3_val == -16385, rs1_h0_val == 32, rs1_h2_val == 4096, rs2_h0_val == -2049, rs2_h1_val == -65
// opcode: kdmabb16 ; op1:x4; op2:x14; dest:x17; op1val:0x40001000bfff0020;  op2val:0xbfff0002ffbff7ff
TEST_PKRR_OP(kdmabb16, x17, x4, x14, 0x0000000000000000, 0x40001000bfff0020, 0xbfff0002ffbff7ff, x4, x11, 176, x13)

inst_12:
// rs1==x14, rs2==x10, rd==x1, rs2_h3_val == -8193, rs1_h3_val == 32, rs2_h2_val == -257, rs1_h0_val == 4096, rs1_h1_val == 2, rs2_h0_val == 2048
// opcode: kdmabb16 ; op1:x14; op2:x10; dest:x1; op1val:0x20fffb00021000;  op2val:0xdffffeffbfff0800
TEST_PKRR_OP(kdmabb16, x1, x14, x10, 0x0000000000000000, 0x20fffb00021000, 0xdffffeffbfff0800, x14, x11, 192, x13)

inst_13:
// rs1==x24, rs2==x18, rd==x31, rs2_h3_val == -2049, rs1_h1_val == 4, rs2_h0_val == -33, rs1_h3_val == -33, rs2_h2_val == 32767
// opcode: kdmabb16 ; op1:x24; op2:x18; dest:x31; op1val:0xffdf55550004fffa;  op2val:0xf7ff7fff8000ffdf
TEST_PKRR_OP(kdmabb16, x31, x24, x18, 0x0000000000000000, 0xffdf55550004fffa, 0xf7ff7fff8000ffdf, x24, x11, 208, x13)

inst_14:
// rs1==x0, rs2==x17, rd==x26, rs2_h3_val == -1025, rs1_h2_val == 2048, rs2_h1_val == -8193
// opcode: kdmabb16 ; op1:x0; op2:x17; dest:x26; op1val:0xfffa0800c0001000;  op2val:0xfbff0002dfff1000
TEST_PKRR_OP(kdmabb16, x26, x0, x17, 0x0000000000000000, 0xfffa0800c0001000, 0xfbff0002dfff1000, x0, x11, 224, x13)

inst_15:
// rs1==x15, rs2==x24, rd==x2, rs2_h3_val == -513, rs1_h1_val == 1, rs2_h2_val == -21846
// opcode: kdmabb16 ; op1:x15; op2:x24; dest:x2; op1val:0x400fffa0001fffc;  op2val:0xfdffaaaafff80007
TEST_PKRR_OP(kdmabb16, x2, x15, x24, 0x0000000000000000, 0x400fffa0001fffc, 0xfdffaaaafff80007, x15, x11, 240, x13)

inst_16:
// rs1==x5, rs2==x29, rd==x4, rs2_h3_val == -257, rs2_h0_val == 21845, rs2_h2_val == -5, rs1_h2_val == -9, rs1_h1_val == 16, rs1_h0_val == -2049
// opcode: kdmabb16 ; op1:x5; op2:x29; dest:x4; op1val:0xff7ffff70010f7ff;  op2val:0xfefffffbfff85555
TEST_PKRR_OP(kdmabb16, x4, x5, x29, 0x0000000000000000, 0xff7ffff70010f7ff, 0xfefffffbfff85555, x5, x11, 256, x10)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_17:
// rs1==x8, rs2==x11, rd==x13, rs2_h3_val == -129, rs2_h1_val == 21845, rs1_h1_val == -2
// opcode: kdmabb16 ; op1:x8; op2:x11; dest:x13; op1val:0x05fff8fffefff6;  op2val:0xff7f000255550010
TEST_PKRR_OP(kdmabb16, x13, x8, x11, 0x0000000000000000, 0x05fff8fffefff6, 0xff7f000255550010, x8, x6, 0, x10)

inst_18:
// rs1==x21, rs2==x26, rd==x20, rs2_h3_val == -65, rs2_h2_val == 64, rs1_h0_val == 32767, rs1_h1_val == 8
// opcode: kdmabb16 ; op1:x21; op2:x26; dest:x20; op1val:0xfffa400000087fff;  op2val:0xffbf0040dfff0009
TEST_PKRR_OP(kdmabb16, x20, x21, x26, 0x0000000000000000, 0xfffa400000087fff, 0xffbf0040dfff0009, x21, x6, 16, x10)

inst_19:
// rs1==x1, rs2==x7, rd==x9, rs2_h3_val == -17, rs1_h3_val == 256, rs2_h0_val == 1, rs1_h0_val == 16384, rs2_h1_val == 256, rs1_h1_val == -17
// opcode: kdmabb16 ; op1:x1; op2:x7; dest:x9; op1val:0x1000020ffef4000;  op2val:0xffeffff901000001
TEST_PKRR_OP(kdmabb16, x9, x1, x7, 0x0000000000000000, 0x1000020ffef4000, 0xffeffff901000001, x1, x6, 32, x10)

inst_20:
// rs1==x18, rs2==x13, rd==x11, rs2_h3_val == -9, rs2_h2_val == 8192, rs2_h1_val == -513, rs1_h2_val == 32767
// opcode: kdmabb16 ; op1:x18; op2:x13; dest:x11; op1val:0xfff77fff0002c000;  op2val:0xfff72000fdff0010
TEST_PKRR_OP(kdmabb16, x11, x18, x13, 0x0000000000000000, 0xfff77fff0002c000, 0xfff72000fdff0010, x18, x6, 48, x10)

inst_21:
// rs1==x17, rs2==x21, rd==x24, rs2_h3_val == -5, rs1_h3_val == 1, rs2_h2_val == -3, rs1_h0_val == -2, rs1_h2_val == -32768
// opcode: kdmabb16 ; op1:x17; op2:x21; dest:x24; op1val:0x018000effffffe;  op2val:0xfffbfffd01003fff
TEST_PKRR_OP(kdmabb16, x24, x17, x21, 0x0000000000000000, 0x018000effffffe, 0xfffbfffd01003fff, x17, x6, 64, x10)

inst_22:
// rs1==x20, rs2==x1, rd==x16, rs2_h3_val == -3, rs1_h3_val == -32768
// opcode: kdmabb16 ; op1:x20; op2:x1; dest:x16; op1val:0x800000030020fffa;  op2val:0xfffd2000ffbffffa
TEST_PKRR_OP(kdmabb16, x16, x20, x1, 0x0000000000000000, 0x800000030020fffa, 0xfffd2000ffbffffa, x20, x6, 80, x10)

inst_23:
// rs1==x26, rs2==x31, rd==x27, rs2_h3_val == -2, rs1_h0_val == -1, rs2_h1_val == 2048
// opcode: kdmabb16 ; op1:x26; op2:x31; dest:x27; op1val:0x3fff7fffefffffff;  op2val:0xfffe3fff0800fffd
TEST_PKRR_OP(kdmabb16, x27, x26, x31, 0x0000000000000000, 0x3fff7fffefffffff, 0xfffe3fff0800fffd, x26, x6, 96, x10)

inst_24:
// rs1==x11, rs2==x15, rd==x23, rs2_h3_val == -32768, rs1_h1_val == 256
// opcode: kdmabb16 ; op1:x11; op2:x15; dest:x23; op1val:0x09000301000400;  op2val:0x80007ffffdfff7ff
TEST_PKRR_OP(kdmabb16, x23, x11, x15, 0x0000000000000000, 0x09000301000400, 0x80007ffffdfff7ff, x11, x6, 112, x10)

inst_25:
// rs1==x31, rs2==x9, rd==x15, rs2_h3_val == 8192, rs1_h1_val == 16384, rs1_h0_val == -3, rs1_h3_val == -257, rs2_h2_val == 4, rs2_h1_val == 32
// opcode: kdmabb16 ; op1:x31; op2:x9; dest:x15; op1val:0xfeff80004000fffd;  op2val:0x2000000400200009
TEST_PKRR_OP(kdmabb16, x15, x31, x9, 0x0000000000000000, 0xfeff80004000fffd, 0x2000000400200009, x31, x6, 128, x10)

inst_26:
// rs1==x13, rs2==x3, rd==x5, rs2_h3_val == 4096, rs2_h0_val == -1, rs1_h2_val == 1, rs1_h1_val == -129, rs1_h0_val == -1025, rs1_h3_val == 4096
// opcode: kdmabb16 ; op1:x13; op2:x3; dest:x5; op1val:0x10000001ff7ffbff;  op2val:0x10003fffdfffffff
TEST_PKRR_OP(kdmabb16, x5, x13, x3, 0x0000000000000000, 0x10000001ff7ffbff, 0x10003fffdfffffff, x13, x6, 144, x10)

inst_27:
// rs1==x22, rs2==x27, rd==x29, rs2_h3_val == 2048, rs1_h0_val == -33, rs1_h3_val == 0, rs1_h1_val == -65
// opcode: kdmabb16 ; op1:x22; op2:x27; dest:x29; op1val:0x00fff8ffbfffdf;  op2val:0x800000200800003
TEST_PKRR_OP(kdmabb16, x29, x22, x27, 0x0000000000000000, 0x00fff8ffbfffdf, 0x800000200800003, x22, x6, 160, x10)

inst_28:
// rs1==x12, rs2==x4, rd==x14, rs2_h3_val == 1024, rs2_h0_val == -65, rs2_h2_val == 32
// opcode: kdmabb16 ; op1:x12; op2:x4; dest:x14; op1val:0x100020fffafff6;  op2val:0x40000208000ffbf
TEST_PKRR_OP(kdmabb16, x14, x12, x4, 0x0000000000000000, 0x100020fffafff6, 0x40000208000ffbf, x12, x6, 176, x10)

inst_29:
// rs1==x2, rs2==x25, rd==x21, rs2_h3_val == 512, rs1_h3_val == -65, rs1_h0_val == 1, rs2_h2_val == 256
// opcode: kdmabb16 ; op1:x2; op2:x25; dest:x21; op1val:0xffbfefff3fff0001;  op2val:0x200010055550006
TEST_PKRR_OP(kdmabb16, x21, x2, x25, 0x0000000000000000, 0xffbfefff3fff0001, 0x200010055550006, x2, x6, 192, x10)

inst_30:
// rs1==x29, rs2==x28, rd==x22, rs2_h3_val == 256, rs1_h2_val == -33, rs2_h2_val == -17, rs1_h0_val == -513, rs2_h0_val == -4097
// opcode: kdmabb16 ; op1:x29; op2:x28; dest:x22; op1val:0xfffbffdf0003fdff;  op2val:0x100ffef3fffefff
TEST_PKRR_OP(kdmabb16, x22, x29, x28, 0x0000000000000000, 0xfffbffdf0003fdff, 0x100ffef3fffefff, x29, x6, 208, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x27, rs2==x12, rd==x30, rs2_h3_val == 128, rs1_h3_val == -3, rs1_h0_val == -9, rs1_h2_val == -8193, rs2_h2_val == 0
// opcode: kdmabb16 ; op1:x27; op2:x12; dest:x30; op1val:0xfffddffffffefff7;  op2val:0x800000fffcfbff
TEST_PKRR_OP(kdmabb16, x30, x27, x12, 0x0000000000000000, 0xfffddffffffefff7, 0x800000fffcfbff, x27, x1, 0, x2)

inst_32:
// rs2_h3_val == 64, rs2_h1_val == -3, rs1_h3_val == -513, rs1_h1_val == 4096, rs1_h0_val == 4
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff800010000004;  op2val:0x400800fffdefff
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xfdff800010000004, 0x400800fffdefff, x30, x1, 16, x2)

inst_33:
// rs2_h3_val == 32, rs2_h0_val == -17, rs2_h1_val == 0, rs1_h3_val == 32767, rs1_h1_val == -9
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff8000fff7ffdf;  op2val:0x2000090000ffef
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x7fff8000fff7ffdf, 0x2000090000ffef, x30, x1, 32, x2)

inst_34:
// rs1_h1_val == -5, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x000005fffbf7ff;  op2val:0xffbffeff0007fffd
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x000005fffbf7ff, 0xffbffeff0007fffd, x30, x1, 48, x2)

inst_35:
// rs1_h1_val == -3, rs2_h2_val == -9, rs1_h3_val == 64
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x400009fffd0400;  op2val:0x05fff7fffdefff
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x400009fffd0400, 0x05fff7fffdefff, x30, x1, 64, x2)

inst_36:
// rs1_h1_val == -32768, rs2_h2_val == -33, rs2_h1_val == 16384
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff55558000fff9;  op2val:0x800ffdf4000c000
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x7fff55558000fff9, 0x800ffdf4000c000, x30, x1, 80, x2)

inst_37:
// rs1_h1_val == 8192, rs1_h2_val == 64, rs1_h0_val == 2048, rs2_h3_val == 0, rs2_h0_val == -257
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x00004020000800;  op2val:0x00ff7ffff9feff
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x00004020000800, 0x00ff7ffff9feff, x30, x1, 96, x2)

inst_38:
// rs1_h1_val == 1024, rs1_h3_val == -21846, rs2_h2_val == 512, rs2_h1_val == 4096, rs1_h2_val == 128
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa00800400feff;  op2val:0x4002001000fffd
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xaaaa00800400feff, 0x4002001000fffd, x30, x1, 112, x2)

inst_39:
// rs1_h1_val == 512, rs2_h2_val == 4096, rs1_h0_val == 2
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x10555502000002;  op2val:0xfbff1000feffffbf
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x10555502000002, 0xfbff1000feffffbf, x30, x1, 128, x2)

inst_40:
// rs1_h1_val == 64, rs1_h3_val == 21845, rs1_h2_val == -3, rs2_h1_val == -2049
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffd0040fffc;  op2val:0x030200f7ff3fff
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x5555fffd0040fffc, 0x030200f7ff3fff, x30, x1, 144, x2)

inst_41:
// rs1_h1_val == 0, rs1_h3_val == 4
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x04aaaa0000fff9;  op2val:0x007ffff7fff7ff
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x04aaaa0000fff9, 0x007ffff7fff7ff, x30, x1, 160, x2)

inst_42:
// rs1_h1_val == -1, rs1_h2_val == 8192, rs2_h1_val == 16
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff92000fffffeff;  op2val:0xfffbffff00100009
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xfff92000fffffeff, 0xfffbffff00100009, x30, x1, 176, x2)

inst_43:
// rs1_h0_val == 21845, rs1_h2_val == -16385, rs2_h1_val == -129, rs2_h0_val == 128
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000bfff01005555;  op2val:0x020007ff7f0080
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x4000bfff01005555, 0x020007ff7f0080, x30, x1, 192, x2)

inst_44:
// rs1_h0_val == -16385, rs2_h0_val == 32
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x062000fffabfff;  op2val:0xaaaac0003fff0020
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x062000fffabfff, 0xaaaac0003fff0020, x30, x1, 208, x2)

inst_45:
// rs1_h0_val == -8193, rs1_h2_val == -1025
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fbfffffadfff;  op2val:0xfff80009fffa0010
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xfff7fbfffffadfff, 0xfff80009fffa0010, x30, x1, 224, x2)

inst_46:
// rs1_h0_val == -4097, rs2_h1_val == 1
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffbfffffaefff;  op2val:0x09ffef0001ffff
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xff7ffbfffffaefff, 0x09ffef0001ffff, x30, x1, 240, x2)

inst_47:
// rs1_h0_val == -65, rs2_h2_val == -4097, rs2_h0_val == -5
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0000070003ffbf;  op2val:0x40efff0009fffb
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x0000070003ffbf, 0x40efff0009fffb, x30, x1, 256, x2)

inst_48:
// rs1_h0_val == -17, rs2_h2_val == -2049
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x4001000dfffffef;  op2val:0xfffdf7ff0100fbff
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x4001000dfffffef, 0xfffdf7ff0100fbff, x30, x1, 272, x2)

inst_49:
// rs1_h0_val == 8192, rs1_h3_val == -1, rs2_h2_val == 128
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6ffbf2000;  op2val:0x0200800003fffd
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xfffffff6ffbf2000, 0x0200800003fffd, x30, x1, 288, x2)

inst_50:
// rs1_h0_val == 512, rs1_h1_val == -513, rs2_h2_val == 1024
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x030007fdff0200;  op2val:0x555504000006ffdf
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x030007fdff0200, 0x555504000006ffdf, x30, x1, 304, x2)

inst_51:
// rs1_h0_val == 256, rs1_h2_val == 512, rs2_h0_val == 32767
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x040200fffb0100;  op2val:0x03fff600037fff
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x040200fffb0100, 0x03fff600037fff, x30, x1, 320, x2)

inst_52:
// rs1_h0_val == 128, rs1_h2_val == 16, rs2_h2_val == -513, rs2_h0_val == 256
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000010fff60080;  op2val:0xfffefdff00800100
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x80000010fff60080, 0xfffefdff00800100, x30, x1, 336, x2)

inst_53:
// rs2_h3_val == 16, rs2_h0_val == 64, rs2_h2_val == -2, rs1_h2_val == -65
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x04ffbffff8fffc;  op2val:0x10fffefff80040
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x04ffbffff8fffc, 0x10fffefff80040, x30, x1, 352, x2)

inst_54:
// rs2_h3_val == 4, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffbfff80040;  op2val:0x04fffe0010fffc
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xfdfffffbfff80040, 0x04fffe0010fffc, x30, x1, 368, x2)

inst_55:
// rs2_h1_val == 4, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcc00001000000;  op2val:0x05feff0004fff8
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xfffcc00001000000, 0x05feff0004fff8, x30, x1, 384, x2)

inst_56:
// rs2_h1_val == 2, rs1_h1_val == 21845
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0480005555aaaa;  op2val:0xfffe02000002fff8
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x0480005555aaaa, 0xfffe02000002fff8, x30, x1, 400, x2)

inst_57:
// rs2_h0_val == -16385, rs2_h1_val == 512, rs1_h2_val == -257
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafeffff7fffbf;  op2val:0x200c0000200bfff
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xaaaafeffff7fffbf, 0x200c0000200bfff, x30, x1, 416, x2)

inst_58:
// rs2_h0_val == -8193, rs2_h1_val == 1024
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff80007ff7f0006;  op2val:0x7fff08000400dfff
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xfff80007ff7f0006, 0x7fff08000400dfff, x30, x1, 432, x2)

inst_59:
// rs2_h0_val == -513, rs1_h3_val == -1025, rs2_h1_val == -4097
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000900000200;  op2val:0xffdffeffeffffdff
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xfbff000900000200, 0xffdffeffeffffdff, x30, x1, 448, x2)

inst_60:
// rs2_h0_val == -9, rs1_h2_val == 8
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff700083fff1000;  op2val:0x7ffffffbfffffff7
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xfff700083fff1000, 0x7ffffffbfffffff7, x30, x1, 464, x2)

inst_61:
// rs2_h0_val == -32768, rs1_h2_val == 4, rs1_h1_val == -33
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x040004ffdf0040;  op2val:0x04ff7f00808000
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x040004ffdf0040, 0x04ff7f00808000, x30, x1, 480, x2)

inst_62:
// rs2_h0_val == 16384, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc3fff00020800;  op2val:0x1000fffe00094000
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xfffc3fff00020800, 0x1000fffe00094000, x30, x1, 496, x2)

inst_63:
// rs2_h0_val == 8192, rs1_h2_val == 1024
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa040000037fff;  op2val:0x3ffffff63fff2000
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xfffa040000037fff, 0x3ffffff63fff2000, x30, x1, 512, x2)

inst_64:
// rs2_h0_val == 1024, rs2_h2_val == 16
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fff70100fff6;  op2val:0x030010c0000400
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x10fff70100fff6, 0x030010c0000400, x30, x1, 528, x2)

inst_65:
// rs2_h0_val == 8, rs1_h1_val == -257, rs1_h3_val == -2049
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff2000fefffdff;  op2val:0x100fffafffd0008
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xf7ff2000fefffdff, 0x100fffafffd0008, x30, x1, 544, x2)

inst_66:
// rs2_h0_val == 2, rs2_h3_val == -1
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x400000010080f7ff;  op2val:0xfffffff910000002
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x400000010080f7ff, 0xfffffff910000002, x30, x1, 560, x2)

inst_67:
// rs2_h0_val == 0, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa00075555fffa;  op2val:0x078000fff80000
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xaaaa00075555fffa, 0x078000fff80000, x30, x1, 576, x2)

inst_68:
// rs1_h3_val == -16385, rs2_h3_val == 1
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffaaaabfff2000;  op2val:0x0180000800fffb
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xbfffaaaabfff2000, 0x0180000800fffb, x30, x1, 592, x2)

inst_69:
// rs1_h3_val == -8193, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffbf2000fdff;  op2val:0xdfff7fff00090001
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xdfffffbf2000fdff, 0xdfff7fff00090001, x30, x1, 608, x2)

inst_70:
// rs2_h2_val == -16385, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000effffeff0800;  op2val:0xfffbbfff00094000
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x1000effffeff0800, 0xfffbbfff00094000, x30, x1, 624, x2)

inst_71:
// rs1_h3_val == 512, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x200100080000002;  op2val:0xfffdfff700200040
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x200100080000002, 0xfffdfff700200040, x30, x1, 640, x2)

inst_72:
// rs2_h2_val == -1025, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x090009ffdfbfff;  op2val:0x04fbff0006fff9
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x090009ffdfbfff, 0x04fbff0006fff9, x30, x1, 656, x2)

inst_73:
// rs1_h3_val == 8, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fbffffdf0100;  op2val:0xf7ff00090009feff
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x08fbffffdf0100, 0xf7ff00090009feff, x30, x1, 672, x2)

inst_74:
// rs1_h3_val == 2, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x020009ff7f0002;  op2val:0xfdffc0004000ff7f
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x020009ff7f0002, 0xfdffc0004000ff7f, x30, x1, 688, x2)

inst_75:
// rs2_h2_val == 16384, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fdff0003fff6;  op2val:0x200400000800001
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x100fdff0003fff6, 0x200400000800001, x30, x1, 704, x2)

inst_76:
// rs1_h2_val == -2049, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x80f7ff00000005;  op2val:0xfeff0003fffafff8
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x80f7ff00000005, 0xfeff0003fffafff8, x30, x1, 720, x2)

inst_77:
// rs1_h2_val == -17, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x08ffef0040fff7;  op2val:0x2000004fffc3fff
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x08ffef0040fff7, 0x2000004fffc3fff, x30, x1, 736, x2)

inst_78:
// rs2_h2_val == 8, rs2_h1_val == -21846
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0008ffdffff6;  op2val:0x070008aaaaffbf
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x7fff0008ffdffff6, 0x070008aaaaffbf, x30, x1, 752, x2)

inst_79:
// rs2_h2_val == 1, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc40003fff0040;  op2val:0x555500013fffbfff
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xfffc40003fff0040, 0x555500013fffbfff, x30, x1, 768, x2)

inst_80:
// rs1_h2_val == -2, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffeff7ffff7;  op2val:0xfff84000fefffff9
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xbffffffeff7ffff7, 0xfff84000fefffff9, x30, x1, 784, x2)

inst_81:
// rs1_h2_val == 256, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0100c000fff6;  op2val:0x80ffef00074000
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xfffa0100c000fff6, 0x80ffef00074000, x30, x1, 800, x2)

inst_82:
// rs2_h1_val == -1025, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fff60200fff6;  op2val:0x8000effffbfffffa
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x08fff60200fff6, 0x8000effffbfffffa, x30, x1, 816, x2)

inst_83:
// rs2_h1_val == -33, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555002020005555;  op2val:0x400fff9ffdf2000
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x5555002020005555, 0x400fff9ffdf2000, x30, x1, 832, x2)

inst_84:
// rs1_h2_val == 2, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000020100fdff;  op2val:0x04feffeffffbff
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x20000020100fdff, 0x04feffeffffbff, x30, x1, 848, x2)

inst_85:
// rs1_h3_val == -4097, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0007fffc0009;  op2val:0x03c0004000ff7f
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xefff0007fffc0009, 0x03c0004000ff7f, x30, x1, 864, x2)

inst_86:
// rs2_h1_val == -17, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff800000092000;  op2val:0xc000ffdfffef0003
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xefff800000092000, 0xc000ffdfffef0003, x30, x1, 880, x2)

inst_87:
// rs2_h1_val == -9, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffaaaafffcefff;  op2val:0x55557ffffff7ffdf
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x7fffaaaafffcefff, 0x55557ffffff7ffdf, x30, x1, 896, x2)

inst_88:
// rs1_h2_val == 0, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000001fffb;  op2val:0xfff6fffddfff0400
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x0000000001fffb, 0xfff6fffddfff0400, x30, x1, 912, x2)

inst_89:
// rs2_h1_val == -5, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x081000fdff0004;  op2val:0x200effffffb7fff
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x081000fdff0004, 0x200effffffb7fff, x30, x1, 928, x2)

inst_90:
// rs1_h2_val == -1, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x03ffff00800004;  op2val:0x5555fff8fffe0009
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x03ffff00800004, 0x5555fff8fffe0009, x30, x1, 944, x2)

inst_91:
// rs1_h1_val == -21846, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff7fffaaaa3fff;  op2val:0x10000080000aaaa
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xf7ff7fffaaaa3fff, 0x10000080000aaaa, x30, x1, 960, x2)

inst_92:
// rs2_h1_val == 8192, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x200800fff7fffc;  op2val:0xefff000320003fff
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x200800fff7fffc, 0xefff000320003fff, x30, x1, 976, x2)

inst_93:
// rs1_h3_val == -17, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0003fff70020;  op2val:0x00fffa0003fffb
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xffef0003fff70020, 0x00fffa0003fffb, x30, x1, 992, x2)

inst_94:
// rs1_h1_val == -2049, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff8000f7ff0200;  op2val:0x7fff00070002fff7
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xfeff8000f7ff0200, 0x7fff00070002fff7, x30, x1, 1008, x2)

inst_95:
// rs1_h3_val == -2, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffcfff80800;  op2val:0x200010effffffc
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xfffefffcfff80800, 0x200010effffffc, x30, x1, 1024, x2)

inst_96:
// rs2_h1_val == 64, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fff900800005;  op2val:0x8000000300400008
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xfff6fff900800005, 0x8000000300400008, x30, x1, 1040, x2)

inst_97:
// rs1_h3_val == 8192, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000020000408000;  op2val:0xfffa3fff00010800
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x2000020000408000, 0xfffa3fff00010800, x30, x1, 1056, x2)

inst_98:
// rs2_h2_val == 21845, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x05ffbf0400ffff;  op2val:0x2005555ffef0040
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x05ffbf0400ffff, 0x2005555ffef0040, x30, x1, 1072, x2)

inst_99:
// rs1_h3_val == 2048, 
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x800010000400020;  op2val:0xff7f00010008feff
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x800010000400020, 0xff7f00010008feff, x30, x1, 1088, x2)

inst_100:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h1_val == -1025, rs2_h0_val == 4, rs1_h0_val == -5, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h3_val == -5, rs2_h1_val == 128, rs2_h2_val == 2
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfff8fbfffffb;  op2val:0x3fff000200800004
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xfffbfff8fbfffffb, 0x3fff000200800004, x30, x1, 1104, x2)

inst_101:
// rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -33, rs1_h1_val == 128, rs1_h2_val == -21846, rs2_h2_val == -32768, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -32768, rs1_h3_val == -9, rs2_h0_val == 512, rs1_h0_val == -257
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7aaaa0080feff;  op2val:0xffdf800080000200
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0xfff7aaaa0080feff, 0xffdf800080000200, x30, x1, 1120, x2)

inst_102:
// rs1_h0_val == rs2_h0_val, rs1_h2_val == 16384, rs2_h0_val == 16, rs2_h1_val == 32767, rs1_h1_val == 32, rs1_h0_val == 16, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == 32767, rs1_h3_val == 16384
// opcode: kdmabb16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000400000200010;  op2val:0x7ffffffa7fff0010
TEST_PKRR_OP(kdmabb16, x31, x30, x29, 0x0000000000000000, 0x4000400000200010, 0x7ffffffa7fff0010, x30, x1, 1136, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 144*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
