
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kaddw instruction of the RISC-V RV64PZicsr extension for the kaddw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kaddw)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1 == rd != rs2, rs1==x30, rs2==x10, rd==x30, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w0_val == -5, rs1_w1_val == 16777216, rs2_w1_val == 65536
// opcode: kaddw ; op1:x30; op2:x10; dest:x30; op1val:0x100000080000000;  op2val:0x010000fffffffb
TEST_PKRR_OP(kaddw, x30, x30, x10, 0x0000000000000000, 0x100000080000000, 0x010000fffffffb, x30, x9, 0, x16)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x29, rs2==x26, rd==x13, rs1_w1_val == rs2_w1_val, rs1_w0_val == -1025, rs2_w0_val == -513, rs2_w1_val == 1048576, rs1_w1_val == 1048576
// opcode: kaddw ; op1:x29; op2:x26; dest:x13; op1val:0x100000fffffbff;  op2val:0x100000fffffdff
TEST_PKRR_OP(kaddw, x13, x29, x26, 0x0000000000000000, 0x100000fffffbff, 0x100000fffffdff, x29, x9, 16, x16)

inst_2:
// rs1 == rs2 != rd, rs1==x1, rs2==x1, rd==x20, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w1_val == -1073741825, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w0_val == 8192
// opcode: kaddw ; op1:x1; op2:x1; dest:x20; op1val:0xbfffffffc0000000;  op2val:0x3fffffff00002000
TEST_PKRR_OP(kaddw, x20, x1, x1, 0x0000000000000000, 0xbfffffffc0000000, 0x3fffffff00002000, x1, x9, 32, x16)

inst_3:
// rs1 == rs2 == rd, rs1==x11, rs2==x11, rd==x11, rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w0_val == -131073, rs2_w1_val == -524289, rs1_w0_val == -33, rs1_w1_val == -16777217
// opcode: kaddw ; op1:x11; op2:x11; dest:x11; op1val:0xfeffffffffffffdf;  op2val:0xfff7fffffffdffff
TEST_PKRR_OP(kaddw, x11, x11, x11, 0x0000000000000000, 0xfeffffffffffffdf, 0xfff7fffffffdffff, x11, x9, 48, x16)

inst_4:
// rs2 == rd != rs1, rs1==x27, rs2==x14, rd==x14, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val == 512, rs2_w1_val == -8193, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w1_val == 262144
// opcode: kaddw ; op1:x27; op2:x14; dest:x14; op1val:0x04000000000200;  op2val:0xffffdffffffffff9
TEST_PKRR_OP(kaddw, x14, x27, x14, 0x0000000000000000, 0x04000000000200, 0xffffdffffffffff9, x27, x9, 64, x16)

inst_5:
// rs1==x24, rs2==x4, rd==x29, rs1_w0_val == rs2_w0_val, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 1431655765, rs1_w1_val == -3, rs2_w1_val == 4194304, rs1_w0_val == 1431655765
// opcode: kaddw ; op1:x24; op2:x4; dest:x29; op1val:0xfffffffd55555555;  op2val:0x40000055555555
TEST_PKRR_OP(kaddw, x29, x24, x4, 0x0000000000000000, 0xfffffffd55555555, 0x40000055555555, x24, x9, 80, x16)

inst_6:
// rs1==x7, rs2==x29, rd==x6, rs2_w1_val == -1431655766, rs1_w0_val == 33554432, rs2_w0_val == -32769, rs1_w1_val == -67108865
// opcode: kaddw ; op1:x7; op2:x29; dest:x6; op1val:0xfbffffff02000000;  op2val:0xaaaaaaaaffff7fff
TEST_PKRR_OP(kaddw, x6, x7, x29, 0x0000000000000000, 0xfbffffff02000000, 0xaaaaaaaaffff7fff, x7, x9, 96, x16)

inst_7:
// rs1==x26, rs2==x13, rd==x5, rs2_w1_val == 1431655765, rs1_w1_val == 2048
// opcode: kaddw ; op1:x26; op2:x13; dest:x5; op1val:0x000800ffffffdf;  op2val:0x5555555500000009
TEST_PKRR_OP(kaddw, x5, x26, x13, 0x0000000000000000, 0x000800ffffffdf, 0x5555555500000009, x26, x9, 112, x16)

inst_8:
// rs1==x23, rs2==x31, rd==x24, rs2_w1_val == 2147483647, rs1_w0_val == -524289
// opcode: kaddw ; op1:x23; op2:x31; dest:x24; op1val:0x000003fff7ffff;  op2val:0x7fffffff00000007
TEST_PKRR_OP(kaddw, x24, x23, x31, 0x0000000000000000, 0x000003fff7ffff, 0x7fffffff00000007, x23, x9, 128, x16)

inst_9:
// rs1==x14, rs2==x15, rd==x22, rs2_w1_val == -1073741825, rs1_w1_val == 0, rs1_w0_val == 268435456, rs2_w0_val == -524289
// opcode: kaddw ; op1:x14; op2:x15; dest:x22; op1val:0x00000010000000;  op2val:0xbffffffffff7ffff
TEST_PKRR_OP(kaddw, x22, x14, x15, 0x0000000000000000, 0x00000010000000, 0xbffffffffff7ffff, x14, x9, 144, x16)

inst_10:
// rs1==x10, rs2==x2, rd==x8, rs2_w1_val == -536870913, rs1_w0_val == 2097152, rs2_w0_val == 524288
// opcode: kaddw ; op1:x10; op2:x2; dest:x8; op1val:0x00000300200000;  op2val:0xdfffffff00080000
TEST_PKRR_OP(kaddw, x8, x10, x2, 0x0000000000000000, 0x00000300200000, 0xdfffffff00080000, x10, x9, 160, x16)

inst_11:
// rs1==x0, rs2==x23, rd==x10, rs2_w1_val == -268435457, rs2_w0_val == -134217729
// opcode: kaddw ; op1:x0; op2:x23; dest:x10; op1val:0xbffffffffffffbff;  op2val:0xeffffffff7ffffff
TEST_PKRR_OP(kaddw, x10, x0, x23, 0x0000000000000000, 0xbffffffffffffbff, 0xeffffffff7ffffff, x0, x9, 176, x16)

inst_12:
// rs1==x2, rs2==x27, rd==x21, rs2_w1_val == -134217729, rs1_w1_val == 268435456, rs1_w0_val == 4194304, rs2_w0_val == 64
// opcode: kaddw ; op1:x2; op2:x27; dest:x21; op1val:0x1000000000400000;  op2val:0xf7ffffff00000040
TEST_PKRR_OP(kaddw, x21, x2, x27, 0x0000000000000000, 0x1000000000400000, 0xf7ffffff00000040, x2, x9, 192, x16)

inst_13:
// rs1==x25, rs2==x5, rd==x31, rs2_w1_val == -67108865, rs2_w0_val == -262145, rs1_w1_val == -65, rs1_w0_val == 2048
// opcode: kaddw ; op1:x25; op2:x5; dest:x31; op1val:0xffffffbf00000800;  op2val:0xfbfffffffffbffff
TEST_PKRR_OP(kaddw, x31, x25, x5, 0x0000000000000000, 0xffffffbf00000800, 0xfbfffffffffbffff, x25, x9, 208, x16)

inst_14:
// rs1==x21, rs2==x3, rd==x18, rs2_w1_val == -33554433, 
// opcode: kaddw ; op1:x21; op2:x3; dest:x18; op1val:0x000006fffffbff;  op2val:0xfdffffff00000005
TEST_PKRR_OP(kaddw, x18, x21, x3, 0x0000000000000000, 0x000006fffffbff, 0xfdffffff00000005, x21, x9, 224, x16)

inst_15:
// rs1==x12, rs2==x17, rd==x15, rs2_w1_val == -16777217, rs1_w0_val == 65536, rs2_w0_val == 4096, rs1_w1_val == -8388609
// opcode: kaddw ; op1:x12; op2:x17; dest:x15; op1val:0xff7fffff00010000;  op2val:0xfeffffff00001000
TEST_PKRR_OP(kaddw, x15, x12, x17, 0x0000000000000000, 0xff7fffff00010000, 0xfeffffff00001000, x12, x9, 240, x16)
RVTEST_SIGBASE(x10,signature_x10_0)

inst_16:
// rs1==x19, rs2==x6, rd==x1, rs2_w1_val == -8388609, rs2_w0_val == -67108865, rs1_w1_val == -536870913, rs1_w0_val == -1048577
// opcode: kaddw ; op1:x19; op2:x6; dest:x1; op1val:0xdfffffffffefffff;  op2val:0xff7ffffffbffffff
TEST_PKRR_OP(kaddw, x1, x19, x6, 0x0000000000000000, 0xdfffffffffefffff, 0xff7ffffffbffffff, x19, x10, 0, x11)

inst_17:
// rs1==x8, rs2==x9, rd==x17, rs2_w1_val == -4194305, rs1_w1_val == 2, rs2_w0_val == 16
// opcode: kaddw ; op1:x8; op2:x9; dest:x17; op1val:0x000002fffffffa;  op2val:0xffbfffff00000010
TEST_PKRR_OP(kaddw, x17, x8, x9, 0x0000000000000000, 0x000002fffffffa, 0xffbfffff00000010, x8, x10, 16, x11)

inst_18:
// rs1==x5, rs2==x24, rd==x26, rs2_w1_val == -2097153, rs1_w1_val == -1, rs2_w0_val == -16777217
// opcode: kaddw ; op1:x5; op2:x24; dest:x26; op1val:0xfffffffffffffffc;  op2val:0xffdffffffeffffff
TEST_PKRR_OP(kaddw, x26, x5, x24, 0x0000000000000000, 0xfffffffffffffffc, 0xffdffffffeffffff, x5, x10, 32, x11)

inst_19:
// rs1==x31, rs2==x16, rd==x25, rs2_w1_val == -1048577, rs1_w1_val == -2097153, rs1_w0_val == -16777217, rs2_w0_val == 8388608
// opcode: kaddw ; op1:x31; op2:x16; dest:x25; op1val:0xffdffffffeffffff;  op2val:0xffefffff00800000
TEST_PKRR_OP(kaddw, x25, x31, x16, 0x0000000000000000, 0xffdffffffeffffff, 0xffefffff00800000, x31, x10, 48, x11)

inst_20:
// rs1==x6, rs2==x25, rd==x0, rs2_w1_val == -262145, rs1_w1_val == -17, rs2_w0_val == 65536
// opcode: kaddw ; op1:x6; op2:x25; dest:x0; op1val:0xffffffef80000000;  op2val:0xfffbffff00010000
TEST_PKRR_OP(kaddw, x0, x6, x25, 0x0000000000000000, 0xffffffef80000000, 0xfffbffff00010000, x6, x10, 64, x11)

inst_21:
// rs1==x17, rs2==x12, rd==x27, rs2_w1_val == -131073, rs1_w0_val == 134217728
// opcode: kaddw ; op1:x17; op2:x12; dest:x27; op1val:0xff7fffff08000000;  op2val:0xfffdfffffffffdff
TEST_PKRR_OP(kaddw, x27, x17, x12, 0x0000000000000000, 0xff7fffff08000000, 0xfffdfffffffffdff, x17, x10, 80, x11)

inst_22:
// rs1==x22, rs2==x18, rd==x2, rs2_w1_val == -65537, rs1_w0_val == 2
// opcode: kaddw ; op1:x22; op2:x18; dest:x2; op1val:0x1000000000000002;  op2val:0xfffeffff00000003
TEST_PKRR_OP(kaddw, x2, x22, x18, 0x0000000000000000, 0x1000000000000002, 0xfffeffff00000003, x22, x10, 96, x11)

inst_23:
// rs1==x16, rs2==x19, rd==x4, rs2_w1_val == -32769, rs1_w0_val == -65537, rs2_w0_val == -2147483648
// opcode: kaddw ; op1:x16; op2:x19; dest:x4; op1val:0x000002fffeffff;  op2val:0xffff7fff80000000
TEST_PKRR_OP(kaddw, x4, x16, x19, 0x0000000000000000, 0x000002fffeffff, 0xffff7fff80000000, x16, x10, 112, x11)

inst_24:
// rs1==x4, rs2==x20, rd==x3, rs2_w1_val == -16385, rs2_w0_val == 131072, rs1_w1_val == -524289, rs1_w0_val == 1073741824
// opcode: kaddw ; op1:x4; op2:x20; dest:x3; op1val:0xfff7ffff40000000;  op2val:0xffffbfff00020000
TEST_PKRR_OP(kaddw, x3, x4, x20, 0x0000000000000000, 0xfff7ffff40000000, 0xffffbfff00020000, x4, x10, 128, x11)

inst_25:
// rs1==x13, rs2==x0, rd==x7, rs2_w1_val == -4097, rs1_w0_val == -129, rs2_w0_val == 134217728
// opcode: kaddw ; op1:x13; op2:x0; dest:x7; op1val:0xffffffbfffffff7f;  op2val:0xffffefff08000000
TEST_PKRR_OP(kaddw, x7, x13, x0, 0x0000000000000000, 0xffffffbfffffff7f, 0xffffefff08000000, x13, x10, 144, x11)

inst_26:
// rs1==x9, rs2==x21, rd==x19, rs2_w1_val == -2049, rs1_w0_val == 16384, rs2_w0_val == -1, rs1_w1_val == -257
// opcode: kaddw ; op1:x9; op2:x21; dest:x19; op1val:0xfffffeff00004000;  op2val:0xfffff7ffffffffff
TEST_PKRR_OP(kaddw, x19, x9, x21, 0x0000000000000000, 0xfffffeff00004000, 0xfffff7ffffffffff, x9, x10, 160, x11)

inst_27:
// rs1==x15, rs2==x30, rd==x23, rs2_w1_val == -1025, rs1_w0_val == -33554433, rs2_w0_val == -2049
// opcode: kaddw ; op1:x15; op2:x30; dest:x23; op1val:0xc0000000fdffffff;  op2val:0xfffffbfffffff7ff
TEST_PKRR_OP(kaddw, x23, x15, x30, 0x0000000000000000, 0xc0000000fdffffff, 0xfffffbfffffff7ff, x15, x10, 176, x11)

inst_28:
// rs1==x20, rs2==x7, rd==x16, rs2_w1_val == -513, rs1_w0_val == 131072, rs1_w1_val == 256, rs2_w0_val == 8
// opcode: kaddw ; op1:x20; op2:x7; dest:x16; op1val:0x00010000020000;  op2val:0xfffffdff00000008
TEST_PKRR_OP(kaddw, x16, x20, x7, 0x0000000000000000, 0x00010000020000, 0xfffffdff00000008, x20, x10, 192, x4)

inst_29:
// rs1==x18, rs2==x22, rd==x12, rs2_w1_val == -257, rs1_w1_val == 524288
// opcode: kaddw ; op1:x18; op2:x22; dest:x12; op1val:0x080000fffeffff;  op2val:0xfffffeff00000010
TEST_PKRR_OP(kaddw, x12, x18, x22, 0x0000000000000000, 0x080000fffeffff, 0xfffffeff00000010, x18, x10, 208, x4)

inst_30:
// rs1==x28, rs2==x8, rd==x9, rs2_w1_val == -129, rs1_w0_val == -268435457, rs2_w0_val == -2097153, rs1_w1_val == -2
// opcode: kaddw ; op1:x28; op2:x8; dest:x9; op1val:0xfffffffeefffffff;  op2val:0xffffff7fffdfffff
TEST_PKRR_OP(kaddw, x9, x28, x8, 0x0000000000000000, 0xfffffffeefffffff, 0xffffff7fffdfffff, x28, x10, 224, x4)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_31:
// rs1==x3, rs2_w1_val == -65, rs1_w0_val == 8388608, rs2_w0_val == 1048576
// opcode: kaddw ; op1:x3; op2:x17; dest:x14; op1val:0x00000000800000;  op2val:0xffffffbf00100000
TEST_PKRR_OP(kaddw, x14, x3, x17, 0x0000000000000000, 0x00000000800000, 0xffffffbf00100000, x3, x2, 0, x4)

inst_32:
// rs2==x28, rs2_w1_val == -33, 
// opcode: kaddw ; op1:x10; op2:x28; dest:x20; op1val:0x00000255555555;  op2val:0xffffffdf00000003
TEST_PKRR_OP(kaddw, x20, x10, x28, 0x0000000000000000, 0x00000255555555, 0xffffffdf00000003, x10, x2, 16, x4)

inst_33:
// rd==x28, rs2_w1_val == -17, rs1_w0_val == -5, rs2_w0_val == -536870913, rs1_w1_val == 128
// opcode: kaddw ; op1:x18; op2:x1; dest:x28; op1val:0x000080fffffffb;  op2val:0xffffffefdfffffff
TEST_PKRR_OP(kaddw, x28, x18, x1, 0x0000000000000000, 0x000080fffffffb, 0xffffffefdfffffff, x18, x2, 32, x4)

inst_34:
// rs2_w1_val == -9, rs1_w1_val == 4194304, rs1_w0_val == -262145
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffbffff;  op2val:0xfffffff7fffbffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x400000fffbffff, 0xfffffff7fffbffff, x30, x2, 48, x4)

inst_35:
// rs2_w1_val == -5, rs1_w1_val == -8193, rs2_w0_val == -9
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00020000;  op2val:0xfffffffbfffffff7
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xffffdfff00020000, 0xfffffffbfffffff7, x30, x2, 64, x4)

inst_36:
// rs2_w1_val == -3, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00200000;  op2val:0xfffffffd00080000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfbffffff00200000, 0xfffffffd00080000, x30, x2, 80, x4)

inst_37:
// rs2_w1_val == -2, rs1_w1_val == -1048577, rs1_w0_val == -65
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffffffbf;  op2val:0xfffffffe00010000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xffefffffffffffbf, 0xfffffffe00010000, x30, x2, 96, x4)

inst_38:
// rs2_w1_val == -2147483648, rs1_w0_val == 1024
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000400;  op2val:0x80000000c0000000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000400, 0x80000000c0000000, x30, x2, 112, x4)

inst_39:
// rs2_w1_val == 1073741824, rs1_w1_val == -262145
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000009;  op2val:0x4000000000100000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000009, 0x4000000000100000, x30, x2, 128, x4)

inst_40:
// rs2_w1_val == 536870912, rs1_w1_val == 4
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000004fffbffff;  op2val:0x20000000fffff7ff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x000004fffbffff, 0x20000000fffff7ff, x30, x2, 144, x4)

inst_41:
// rs2_w1_val == 268435456, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000007;  op2val:0x10000000ffff7fff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x40000000000007, 0x10000000ffff7fff, x30, x2, 160, x4)

inst_42:
// rs2_w1_val == 134217728, rs1_w0_val == 256, rs2_w0_val == 2097152
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000100;  op2val:0x800000000200000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x00000400000100, 0x800000000200000, x30, x2, 176, x4)

inst_43:
// rs2_w1_val == 67108864, rs1_w1_val == 16384, rs2_w0_val == 1073741824
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffffffdf;  op2val:0x400000040000000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x004000ffffffdf, 0x400000040000000, x30, x2, 192, x4)

inst_44:
// rs2_w1_val == 33554432, rs1_w1_val == -1431655766
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00020000;  op2val:0x200000000000007
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00020000, 0x200000000000007, x30, x2, 208, x4)

inst_45:
// rs2_w1_val == 16777216, rs2_w0_val == -257
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff3fffffff;  op2val:0x1000000fffffeff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xbfffffff3fffffff, 0x1000000fffffeff, x30, x2, 224, x4)

inst_46:
// rs2_w1_val == 8388608, rs1_w1_val == 536870912, rs2_w0_val == 1, rs1_w0_val == -32769
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffff7fff;  op2val:0x80000000000001
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x20000000ffff7fff, 0x80000000000001, x30, x2, 240, x4)

inst_47:
// rs2_w1_val == 2097152, rs2_w0_val == -1025, rs1_w0_val == 32768
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800008000;  op2val:0x200000fffffbff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfffffff800008000, 0x200000fffffbff, x30, x2, 256, x4)

inst_48:
// rs2_w1_val == 524288, rs1_w1_val == 65536
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x01000000200000;  op2val:0x080000f7ffffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x01000000200000, 0x080000f7ffffff, x30, x2, 272, x4)

inst_49:
// rs2_w1_val == 262144, rs1_w1_val == -33554433
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffff7fff;  op2val:0x040000fffffff8
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfdffffffffff7fff, 0x040000fffffff8, x30, x2, 288, x4)

inst_50:
// rs2_w1_val == 131072, rs1_w0_val == -1, rs2_w0_val == -129
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000005ffffffff;  op2val:0x020000ffffff7f
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x000005ffffffff, 0x020000ffffff7f, x30, x2, 304, x4)

inst_51:
// rs1_w0_val == 16777216, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc01000000;  op2val:0x7fffffff00800000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfffffffc01000000, 0x7fffffff00800000, x30, x2, 320, x4)

inst_52:
// rs1_w0_val == 1048576, rs2_w1_val == 1
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00100000;  op2val:0x000001fffffbff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xffefffff00100000, 0x000001fffffbff, x30, x2, 336, x4)

inst_53:
// rs1_w0_val == 524288, rs1_w1_val == 64, rs2_w0_val == 2147483647
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00004000080000;  op2val:0xfeffffff7fffffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x00004000080000, 0xfeffffff7fffffff, x30, x2, 352, x4)

inst_54:
// rs1_w0_val == 262144, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00010000040000;  op2val:0xfffff7ff00000007
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x00010000040000, 0xfffff7ff00000007, x30, x2, 368, x4)

inst_55:
// rs1_w0_val == 8192, rs1_w1_val == 4096
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00100000002000;  op2val:0xfffdffff00020000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x00100000002000, 0xfffdffff00020000, x30, x2, 384, x4)

inst_56:
// rs1_w0_val == 4096, rs1_w1_val == 8192
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00200000001000;  op2val:0xfdffffff00000001
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x00200000001000, 0xfdffffff00000001, x30, x2, 400, x4)

inst_57:
// rs1_w0_val == 128, rs2_w0_val == -2, rs2_w1_val == 0
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000080;  op2val:0x000000fffffffe
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x01000000000080, 0x000000fffffffe, x30, x2, 416, x4)

inst_58:
// rs1_w0_val == 64, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000040;  op2val:0xfdfffffffeffffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x1000000000000040, 0xfdfffffffeffffff, x30, x2, 432, x4)

inst_59:
// rs1_w0_val == 32, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000020;  op2val:0xffffbfffffdfffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000020, 0xffffbfffffdfffff, x30, x2, 448, x4)

inst_60:
// rs1_w0_val == 16, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000010;  op2val:0xfffbfffffbffffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfffffff800000010, 0xfffbfffffbffffff, x30, x2, 464, x4)

inst_61:
// rs1_w0_val == 8, rs1_w1_val == 1073741824
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000008;  op2val:0xf7fffffffffffffa
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x4000000000000008, 0xf7fffffffffffffa, x30, x2, 480, x4)

inst_62:
// rs1_w0_val == 4, rs1_w1_val == -1025
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000004;  op2val:0xffffbfff00200000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000004, 0xffffbfff00200000, x30, x2, 496, x4)

inst_63:
// rs1_w0_val == 1, rs2_w0_val == -8193
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000001;  op2val:0x040000ffffdfff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000001, 0x040000ffffdfff, x30, x2, 512, x4)

inst_64:
// rs1_w0_val == 0, rs2_w0_val == 128
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000000;  op2val:0xfffff7ff00000080
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000000, 0xfffff7ff00000080, x30, x2, 528, x4)

inst_65:
// rs2_w1_val == 32768, rs1_w1_val == -134217729
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000008;  op2val:0x00800000010000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000008, 0x00800000010000, x30, x2, 544, x4)

inst_66:
// rs2_w1_val == 16384, rs1_w1_val == -513, rs1_w0_val == 67108864
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff04000000;  op2val:0x004000fffffff9
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfffffdff04000000, 0x004000fffffff9, x30, x2, 560, x4)

inst_67:
// rs2_w1_val == 8192, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000005;  op2val:0x00200008000000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x2000000000000005, 0x00200008000000, x30, x2, 576, x4)

inst_68:
// rs2_w1_val == 4096, rs1_w0_val == -2097153, rs2_w0_val == -268435457
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000000ffdfffff;  op2val:0x001000efffffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x000000ffdfffff, 0x001000efffffff, x30, x2, 592, x4)

inst_69:
// rs2_w1_val == 2048, rs1_w0_val == -8388609, rs1_w1_val == -131073
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffff7fffff;  op2val:0x000800ffdfffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfffdffffff7fffff, 0x000800ffdfffff, x30, x2, 608, x4)

inst_70:
// rs2_w1_val == 1024, rs2_w0_val == -1431655766
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000040;  op2val:0x000400aaaaaaaa
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x00000000000040, 0x000400aaaaaaaa, x30, x2, 624, x4)

inst_71:
// rs2_w1_val == 512, rs2_w0_val == 67108864
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000100ff7fffff;  op2val:0x00020004000000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x000100ff7fffff, 0x00020004000000, x30, x2, 640, x4)

inst_72:
// rs2_w1_val == 256, rs1_w1_val == -16385
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff80000000;  op2val:0x000100fffffff8
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xffffbfff80000000, 0x000100fffffff8, x30, x2, 656, x4)

inst_73:
// rs2_w1_val == 128, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000020;  op2val:0x00008008000000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x00000200000020, 0x00008008000000, x30, x2, 672, x4)

inst_74:
// rs2_w1_val == 64, rs2_w0_val == 4
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000080;  op2val:0x00004000000004
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000080, 0x00004000000004, x30, x2, 688, x4)

inst_75:
// rs2_w1_val == 32, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffffff6;  op2val:0x00002080000000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x000800fffffff6, 0x00002080000000, x30, x2, 704, x4)

inst_76:
// rs2_w1_val == 16, rs1_w1_val == 1
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffffffb;  op2val:0x00001000200000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x000001fffffffb, 0x00001000200000, x30, x2, 720, x4)

inst_77:
// rs2_w1_val == 8, rs2_w0_val == -33
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000005;  op2val:0x000008ffffffdf
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x40000000000005, 0x000008ffffffdf, x30, x2, 736, x4)

inst_78:
// rs2_w1_val == 4, rs2_w0_val == 512, rs1_w1_val == 1024
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffffffbf;  op2val:0x00000400000200
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x000400ffffffbf, 0x00000400000200, x30, x2, 752, x4)

inst_79:
// rs2_w1_val == 2, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffffffff;  op2val:0x00000200002000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xffffbfffffffffff, 0x00000200002000, x30, x2, 768, x4)

inst_80:
// rs2_w1_val == -1, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffffc;  op2val:0xffffffff00800000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffffc, 0xffffffff00800000, x30, x2, 784, x4)

inst_81:
// rs2_w0_val == -1073741825, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffffffa;  op2val:0xefffffffbfffffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x000001fffffffa, 0xefffffffbfffffff, x30, x2, 800, x4)

inst_82:
// rs2_w0_val == -33554433, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000010;  op2val:0xfffffffefdffffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x00004000000010, 0xfffffffefdffffff, x30, x2, 816, x4)

inst_83:
// rs2_w0_val == -8388609, rs1_w1_val == -4097
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffeffff;  op2val:0xffffefffff7fffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xffffeffffffeffff, 0xffffefffff7fffff, x30, x2, 832, x4)

inst_84:
// rs2_w0_val == -4194305, rs1_w0_val == 2147483647
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x4000007fffffff;  op2val:0xfeffffffffbfffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x4000007fffffff, 0xfeffffffffbfffff, x30, x2, 848, x4)

inst_85:
// rs2_w0_val == 262144, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00080000;  op2val:0xffffff7f00040000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xffffffbf00080000, 0xffffff7f00040000, x30, x2, 864, x4)

inst_86:
// rs2_w0_val == 32768, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffefffffff;  op2val:0x00000000008000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xbfffffffefffffff, 0x00000000008000, x30, x2, 880, x4)

inst_87:
// rs2_w0_val == 16384, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000200;  op2val:0x02000000004000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000200, 0x02000000004000, x30, x2, 896, x4)

inst_88:
// rs2_w0_val == 2048, rs1_w1_val == -32769
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000009;  op2val:0xefffffff00000800
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000009, 0xefffffff00000800, x30, x2, 912, x4)

inst_89:
// rs2_w0_val == 1024, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00000555555555;  op2val:0x1000000000000400
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x00000555555555, 0x1000000000000400, x30, x2, 928, x4)

inst_90:
// rs2_w0_val == 256, rs1_w1_val == 32
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000002;  op2val:0x8000000000000100
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x00002000000002, 0x8000000000000100, x30, x2, 944, x4)

inst_91:
// rs2_w0_val == 32, rs1_w1_val == -2049
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffefffffff;  op2val:0xefffffff00000020
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfffff7ffefffffff, 0xefffffff00000020, x30, x2, 960, x4)

inst_92:
// rs2_w0_val == 2, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x001000feffffff;  op2val:0x01000000000002
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x001000feffffff, 0x01000000000002, x30, x2, 976, x4)

inst_93:
// rs2_w0_val == 0, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00002000400000;  op2val:0x00000700000000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x00002000400000, 0x00000700000000, x30, x2, 992, x4)

inst_94:
// rs1_w1_val == 1431655765, rs2_w0_val == -65
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x5555555502000000;  op2val:0xbfffffffffffffbf
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x5555555502000000, 0xbfffffffffffffbf, x30, x2, 1008, x4)

inst_95:
// rs1_w1_val == 2147483647, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff08000000;  op2val:0xfff7ffff00000002
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x7fffffff08000000, 0xfff7ffff00000002, x30, x2, 1024, x4)

inst_96:
// rs1_w1_val == -268435457, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00400000;  op2val:0x00004000000008
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xefffffff00400000, 0x00004000000008, x30, x2, 1040, x4)

inst_97:
// rs1_w1_val == -4194305, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff04000000;  op2val:0xc0000000ffdfffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xffbfffff04000000, 0xc0000000ffdfffff, x30, x2, 1056, x4)

inst_98:
// rs1_w1_val == -65537, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff10000000;  op2val:0x10000000dfffffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfffeffff10000000, 0x10000000dfffffff, x30, x2, 1072, x4)

inst_99:
// rs1_w1_val == -129, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f10000000;  op2val:0x00800000000080
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xffffff7f10000000, 0x00800000000080, x30, x2, 1088, x4)

inst_100:
// rs1_w1_val == -33, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfefffffff;  op2val:0xffffffdf00000200
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xffffffdfefffffff, 0xffffffdf00000200, x30, x2, 1104, x4)

inst_101:
// rs1_w1_val == -9, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000100;  op2val:0xffefffff00100000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfffffff700000100, 0xffefffff00100000, x30, x2, 1120, x4)

inst_102:
// rs1_w1_val == -5, rs1_w0_val == 536870912, rs2_w0_val == -1048577
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb20000000;  op2val:0xfdffffffffefffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfffffffb20000000, 0xfdffffffffefffff, x30, x2, 1136, x4)

inst_103:
// rs1_w1_val == -2147483648, rs2_w0_val == -16385, rs1_w0_val == -4097
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffefff;  op2val:0x10000000ffffbfff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x80000000ffffefff, 0x10000000ffffbfff, x30, x2, 1152, x4)

inst_104:
// rs1_w1_val == 134217728, rs2_w0_val == 4194304
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x800000000002000;  op2val:0x00400000400000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x800000000002000, 0x00400000400000, x30, x2, 1168, x4)

inst_105:
// rs1_w1_val == 67108864, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000007;  op2val:0xfffffffddfffffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x400000000000007, 0xfffffffddfffffff, x30, x2, 1184, x4)

inst_106:
// rs1_w1_val == 33554432, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x2000000ffffff7f;  op2val:0x1000000fffffff8
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x2000000ffffff7f, 0x1000000fffffff8, x30, x2, 1200, x4)

inst_107:
// rs1_w1_val == 2097152, rs1_w0_val == -16385
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x200000ffffbfff;  op2val:0xfffffffcaaaaaaaa
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x200000ffffbfff, 0xfffffffcaaaaaaaa, x30, x2, 1216, x4)

inst_108:
// rs1_w1_val == 131072, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x02000004000000;  op2val:0xff7ffffffffff7ff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x02000004000000, 0xff7ffffffffff7ff, x30, x2, 1232, x4)

inst_109:
// rs1_w1_val == 32768, rs1_w0_val == -2049
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffff7ff;  op2val:0xfffffff600000005
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x008000fffff7ff, 0xfffffff600000005, x30, x2, 1248, x4)

inst_110:
// rs1_w1_val == 512, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000200ff7fffff;  op2val:0xffbfffff00000002
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x000200ff7fffff, 0xffbfffff00000002, x30, x2, 1264, x4)

inst_111:
// rs1_w1_val == 16, rs2_w0_val == -3
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000009;  op2val:0x080000fffffffd
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x00001000000009, 0x080000fffffffd, x30, x2, 1280, x4)

inst_112:
// rs1_w1_val == 8, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffdfffff;  op2val:0x01000000000005
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x000008ffdfffff, 0x01000000000005, x30, x2, 1296, x4)

inst_113:
// rs1_w0_val == -1431655766, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000080aaaaaaaa;  op2val:0xfffffff800004000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x000080aaaaaaaa, 0xfffffff800004000, x30, x2, 1312, x4)

inst_114:
// rs1_w0_val == -1073741825, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000080bfffffff;  op2val:0xffffdffffffffffa
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x000080bfffffff, 0xffffdffffffffffa, x30, x2, 1328, x4)

inst_115:
// rs1_w0_val == -536870913, rs2_w0_val == 16777216
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x80000000dfffffff;  op2val:0xfffffffd01000000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x80000000dfffffff, 0xfffffffd01000000, x30, x2, 1344, x4)

inst_116:
// rs1_w0_val == -134217729, rs1_w1_val == 8388608
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x800000f7ffffff;  op2val:0x00000700000000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x800000f7ffffff, 0x00000700000000, x30, x2, 1360, x4)

inst_117:
// rs1_w0_val == -67108865, rs2_w0_val == -65537
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000100fbffffff;  op2val:0x8000000fffeffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x000100fbffffff, 0x8000000fffeffff, x30, x2, 1376, x4)

inst_118:
// rs2_w0_val == 33554432, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffefff;  op2val:0xfffffff902000000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffefff, 0xfffffff902000000, x30, x2, 1392, x4)

inst_119:
// rs1_w0_val == -4194305, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffbfffff;  op2val:0xfffffffb80000000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x004000ffbfffff, 0xfffffffb80000000, x30, x2, 1408, x4)

inst_120:
// rs2_w0_val == -4097, rs1_w0_val == -9
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000040fffffff7;  op2val:0xfffffffcffffefff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x000040fffffff7, 0xfffffffcffffefff, x30, x2, 1424, x4)

inst_121:
// rs1_w0_val == -131073, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000080fffdffff;  op2val:0x000020efffffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x000080fffdffff, 0x000020efffffff, x30, x2, 1440, x4)

inst_122:
// rs1_w0_val == -8193, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9ffffdfff;  op2val:0x2000000fff7ffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfffffff9ffffdfff, 0x2000000fff7ffff, x30, x2, 1456, x4)

inst_123:
// rs2_w0_val == -17, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffdfffff;  op2val:0x000800ffffffef
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x000400ffdfffff, 0x000800ffffffef, x30, x2, 1472, x4)

inst_124:
// rs1_w0_val == -513, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffffdff;  op2val:0xfffffeff7fffffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x200000fffffdff, 0xfffffeff7fffffff, x30, x2, 1488, x4)

inst_125:
// rs1_w0_val == -257, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffffeff;  op2val:0x20000000040000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffffeff, 0x20000000040000, x30, x2, 1504, x4)

inst_126:
// rs2_w0_val == 536870912, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x8000000feffffff;  op2val:0xfffffff820000000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x8000000feffffff, 0xfffffff820000000, x30, x2, 1520, x4)

inst_127:
// rs1_w0_val == -3, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffffffd;  op2val:0xfffffff804000000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xffffffbffffffffd, 0xfffffff804000000, x30, x2, 1536, x4)

inst_128:
// rs1_w0_val == -2, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffffffe;  op2val:0xfffffefff7ffffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x80000000fffffffe, 0xfffffefff7ffffff, x30, x2, 1552, x4)

inst_129:
// rs2_w0_val == 268435456, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00080000;  op2val:0x80000010000000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfffffbff00080000, 0x80000010000000, x30, x2, 1568, x4)

inst_130:
// rs1_w0_val == -17, 
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffffffef;  op2val:0xffbfffff00000005
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0x008000ffffffef, 0xffbfffff00000005, x30, x2, 1584, x4)

inst_131:
// rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w0_val == -131073, rs2_w1_val == -524289, rs1_w0_val == -33, rs1_w1_val == -16777217
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffffffdf;  op2val:0xfff7fffffffdffff
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xfeffffffffffffdf, 0xfff7fffffffdffff, x30, x2, 1600, x4)

inst_132:
// rs2_w1_val == -262145, rs1_w1_val == -17, rs2_w0_val == 65536
// opcode: kaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef80000000;  op2val:0xfffbffff00010000
TEST_PKRR_OP(kaddw, x31, x30, x29, 0x0000000000000000, 0xffffffef80000000, 0xfffbffff00010000, x30, x2, 1616, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x10_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 204*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
