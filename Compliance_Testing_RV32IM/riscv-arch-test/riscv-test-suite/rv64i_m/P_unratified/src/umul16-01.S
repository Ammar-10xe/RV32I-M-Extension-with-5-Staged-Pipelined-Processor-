
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umul16 instruction of the RISC-V RV64PZicsr extension for the umul16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umul16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x12, rs2==x28, rd==x12, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h2_val == 1, rs2_h3_val == 65407, rs2_h0_val == 8, rs1_h2_val == 64
// opcode: umul16 ; op1:x12; op2:x28; dest:x12; op1val:0x000d0040000b0000;  op2val:0xff7f000100030008
TEST_P64_PNN_OP(umul16, x12, $rd_hi, x12, x28, 0x0000000000000000, $correctval_hi, 0x000d0040000b0000, 0xff7f000100030008, x7, 0, x1)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x3, rs2==x24, rd==x30, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 49151, rs2_h3_val == 49151, rs2_h0_val == 2, rs2_h2_val == 65519, rs1_h3_val == 49151, rs2_h1_val == 65519
// opcode: umul16 ; op1:x3; op2:x24; dest:x30; op1val:0xbfff000d000cbfff;  op2val:0xbfffffefffef0002
TEST_P64_PNN_OP(umul16, x30, $rd_hi, x3, x24, 0x0000000000000000, $correctval_hi, 0xbfff000d000cbfff, 0xbfffffefffef0002, x7, 16, x1)

inst_2:
// rs1 == rs2 != rd, rs1==x14, rs2==x14, rd==x18, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h0_val == 64, rs2_h3_val == 21845, rs1_h1_val == 49151
// opcode: umul16 ; op1:x14; op2:x14; dest:x18; op1val:0x000c000dbfff0006;  op2val:0x5555000d000e0040
TEST_P64_PNN_OP(umul16, x18, $rd_hi, x14, x14, 0x0000000000000000, $correctval_hi, 0x000c000dbfff0006, 0x5555000d000e0040, x7, 32, x1)

inst_3:
// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val == 0, rs1_h3_val == 65533, rs2_h2_val == 65534, rs1_h0_val == 57343
// opcode: umul16 ; op1:x6; op2:x6; dest:x6; op1val:0xfffd00000009dfff;  op2val:0x5555fffe00090011
TEST_P64_PNN_OP(umul16, x6, $rd_hi, x6, x6, 0x0000000000000000, $correctval_hi, 0xfffd00000009dfff, 0x5555fffe00090011, x7, 48, x1)

inst_4:
// rs2 == rd != rs1, rs1==x26, rs2==x20, rd==x20, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h2_val == 65471, rs1_h3_val == 21845, rs2_h0_val == 49151, rs1_h2_val == 21845
// opcode: umul16 ; op1:x26; op2:x20; dest:x20; op1val:0x55555555000dbfff;  op2val:0xff7fffbf0007bfff
TEST_P64_PNN_OP(umul16, x20, $rd_hi, x26, x20, 0x0000000000000000, $correctval_hi, 0x55555555000dbfff, 0xff7fffbf0007bfff, x7, 64, x1)

inst_5:
// rs1==x29, rs2==x17, rd==x10, rs2_h3_val == 43690, rs1_h0_val == 65471, rs2_h2_val == 2, rs1_h2_val == 65279, rs1_h3_val == 2048
// opcode: umul16 ; op1:x29; op2:x17; dest:x10; op1val:0x0800feff0007ffbf;  op2val:0xaaaa0002000a0007
TEST_P64_PNN_OP(umul16, x10, $rd_hi, x29, x17, 0x0000000000000000, $correctval_hi, 0x0800feff0007ffbf, 0xaaaa0002000a0007, x7, 80, x1)

inst_6:
// rs1==x13, rs2==x3, rd==x4, rs2_h3_val == 32767, rs1_h2_val == 43690, rs2_h0_val == 21845, rs1_h1_val == 4096
// opcode: umul16 ; op1:x13; op2:x3; dest:x4; op1val:0x000daaaa1000ffbf;  op2val:0x7fff0013000d5555
TEST_P64_PNN_OP(umul16, x4, $rd_hi, x13, x3, 0x0000000000000000, $correctval_hi, 0x000daaaa1000ffbf, 0x7fff0013000d5555, x7, 96, x1)

inst_7:
// rs1==x5, rs2==x10, rd==x28, rs2_h3_val == 57343, rs1_h1_val == 4, rs1_h3_val == 63487, rs1_h0_val == 1, rs2_h0_val == 4096, rs1_h2_val == 32767
// opcode: umul16 ; op1:x5; op2:x10; dest:x28; op1val:0xf7ff7fff00040001;  op2val:0xdfff000c000b1000
TEST_P64_PNN_OP(umul16, x28, $rd_hi, x5, x10, 0x0000000000000000, $correctval_hi, 0xf7ff7fff00040001, 0xdfff000c000b1000, x7, 112, x1)

inst_8:
// rs1==x21, rs2==x25, rd==x26, rs2_h3_val == 61439, rs2_h0_val == 65527, rs2_h1_val == 8192, rs1_h3_val == 65534, rs1_h0_val == 64511, rs1_h2_val == 32
// opcode: umul16 ; op1:x21; op2:x25; dest:x26; op1val:0xfffe00200003fbff;  op2val:0xefff000e2000fff7
TEST_P64_PNN_OP(umul16, x26, $rd_hi, x21, x25, 0x0000000000000000, $correctval_hi, 0xfffe00200003fbff, 0xefff000e2000fff7, x7, 128, x1)

inst_9:
// rs1==x18, rs2==x26, rd==x2, rs2_h3_val == 63487, rs1_h1_val == 1, rs2_h0_val == 65533, rs1_h2_val == 65519, rs1_h0_val == 65279, rs2_h1_val == 65023, rs2_h2_val == 65527
// opcode: umul16 ; op1:x18; op2:x26; dest:x2; op1val:0x000fffef0001feff;  op2val:0xf7fffff7fdfffffd
TEST_P64_PNN_OP(umul16, x2, $rd_hi, x18, x26, 0x0000000000000000, $correctval_hi, 0x000fffef0001feff, 0xf7fffff7fdfffffd, x7, 144, x1)

inst_10:
// rs1==x31, rs2==x19, rd==x24, rs2_h3_val == 64511, rs1_h2_val == 65503, rs1_h1_val == 65533, rs2_h2_val == 2048, rs2_h0_val == 65023
// opcode: umul16 ; op1:x31; op2:x19; dest:x24; op1val:0xfffdffdffffd0012;  op2val:0xfbff08002000fdff
TEST_P64_PNN_OP(umul16, x24, $rd_hi, x31, x19, 0x0000000000000000, $correctval_hi, 0xfffdffdffffd0012, 0xfbff08002000fdff, x7, 160, x1)

inst_11:
// rs1==x10, rs2==x16, rd==x14, rs2_h3_val == 65023, rs2_h2_val == 8192, rs1_h2_val == 64511, rs1_h3_val == 65527, rs2_h0_val == 1, rs2_h1_val == 65471
// opcode: umul16 ; op1:x10; op2:x16; dest:x14; op1val:0xfff7fbff0003000d;  op2val:0xfdff2000ffbf0001
TEST_P64_PNN_OP(umul16, x14, $rd_hi, x10, x16, 0x0000000000000000, $correctval_hi, 0xfff7fbff0003000d, 0xfdff2000ffbf0001, x7, 176, x1)

inst_12:
// rs1==x27, rs2==x18, rd==x22, rs2_h3_val == 65279, rs1_h1_val == 256, rs1_h2_val == 65527, rs2_h1_val == 57343
// opcode: umul16 ; op1:x27; op2:x18; dest:x22; op1val:0x0800fff701000012;  op2val:0xfeff0009dfff000b
TEST_P64_PNN_OP(umul16, x22, $rd_hi, x27, x18, 0x0000000000000000, $correctval_hi, 0x0800fff701000012, 0xfeff0009dfff000b, x7, 192, x1)

inst_13:
// rs1==x9, rs2==x4, rd==x8, rs2_h3_val == 65471, rs2_h0_val == 65503, rs2_h2_val == 4096, rs1_h2_val == 1024, rs1_h3_val == 32, rs1_h1_val == 1024
// opcode: umul16 ; op1:x9; op2:x4; dest:x8; op1val:0x0020040004000009;  op2val:0xffbf10000012ffdf
TEST_P64_PNN_OP(umul16, x8, $rd_hi, x9, x4, 0x0000000000000000, $correctval_hi, 0x0020040004000009, 0xffbf10000012ffdf, x7, 208, x1)

inst_14:
// rs1==x0, rs2==x1, rd==x16, rs2_h3_val == 65503, rs1_h3_val == 8192, rs1_h1_val == 65503, rs2_h2_val == 65279, rs2_h1_val == 64511, rs1_h2_val == 2
// opcode: umul16 ; op1:x0; op2:x1; dest:x16; op1val:0x20000002ffdf0007;  op2val:0xffdffefffbff0012
TEST_P64_PNN_OP(umul16, x16, $rd_hi, x0, x1, 0x0000000000000000, $correctval_hi, 0x20000002ffdf0007, 0xffdffefffbff0012, x7, 224, x6)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_15:
// rs1==x22, rs2==x29, rs2_h3_val == 65519, rs2_h0_val == 65279
// opcode: umul16 ; op1:x22; op2:x29; dest:x31; op1val:0x000900020011000c;  op2val:0xffef00050005feff
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x22, x29, 0x0000000000000000, $correctval_hi, 0x000900020011000c, 0xffef00050005feff, x3, 0, x6)

inst_16:
// rs1==x15, rs2==x12, rs2_h3_val == 65527, rs2_h1_val == 32767, rs2_h2_val == 4, rs1_h0_val == 65533, rs1_h1_val == 63487
// opcode: umul16 ; op1:x15; op2:x12; dest:x16; op1val:0x00127ffff7fffffd;  op2val:0xfff700047fff000d
TEST_P64_PNN_OP(umul16, x16, $rd_hi, x15, x12, 0x0000000000000000, $correctval_hi, 0x00127ffff7fffffd, 0xfff700047fff000d, x3, 16, x6)

inst_17:
// rs1==x20, rs2==x30, rs2_h3_val == 65531, rs1_h2_val == 8192, rs1_h3_val == 4096
// opcode: umul16 ; op1:x20; op2:x30; dest:x18; op1val:0x10002000000a0000;  op2val:0xfffb0005fbff000f
TEST_P64_PNN_OP(umul16, x18, $rd_hi, x20, x30, 0x0000000000000000, $correctval_hi, 0x10002000000a0000, 0xfffb0005fbff000f, x3, 32, x6)

inst_18:
// rs1==x16, rs2==x9, rs2_h3_val == 65533, rs1_h0_val == 8192, rs1_h1_val == 32768, rs1_h3_val == 64, rs2_h0_val == 43690
// opcode: umul16 ; op1:x16; op2:x9; dest:x10; op1val:0x0040ffdf80002000;  op2val:0xfffd000d0012aaaa
TEST_P64_PNN_OP(umul16, x10, $rd_hi, x16, x9, 0x0000000000000000, $correctval_hi, 0x0040ffdf80002000, 0xfffd000d0012aaaa, x3, 48, x6)

inst_19:
// rs1==x24, rs2==x11, rs2_h3_val == 65534, rs2_h1_val == 65531, rs1_h1_val == 16384, rs1_h3_val == 64511
// opcode: umul16 ; op1:x24; op2:x11; dest:x5; op1val:0xfbff00074000000b;  op2val:0xfffe000bfffb0002
TEST_P64_PNN_OP(umul16, x5, $rd_hi, x24, x11, 0x0000000000000000, $correctval_hi, 0xfbff00074000000b, 0xfffe000bfffb0002, x3, 64, x6)

inst_20:
// rs1==x23, rs2==x0, rs2_h3_val == 32768, rs2_h2_val == 57343, rs2_h1_val == 1, rs1_h1_val == 61439
// opcode: umul16 ; op1:x23; op2:x0; dest:x30; op1val:0x00120040efff0005;  op2val:0x8000dfff0001fdff
TEST_P64_PNN_OP(umul16, x30, $rd_hi, x23, x0, 0x0000000000000000, $correctval_hi, 0x00120040efff0005, 0x8000dfff0001fdff, x3, 80, x6)

inst_21:
// rs1==x17, rs2==x7, rs2_h3_val == 16384, rs1_h3_val == 256, rs1_h0_val == 512
// opcode: umul16 ; op1:x17; op2:x7; dest:x9; op1val:0x01000000f7ff0200;  op2val:0x40002000000f0011
TEST_P64_PNN_OP(umul16, x9, $rd_hi, x17, x7, 0x0000000000000000, $correctval_hi, 0x01000000f7ff0200, 0x40002000000f0011, x3, 96, x6)

inst_22:
// rs1==x25, rs2==x13, rs2_h3_val == 8192, rs1_h2_val == 65531
// opcode: umul16 ; op1:x25; op2:x13; dest:x22; op1val:0x5555fffb0004000a;  op2val:0x20002000000f0005
TEST_P64_PNN_OP(umul16, x22, $rd_hi, x25, x13, 0x0000000000000000, $correctval_hi, 0x5555fffb0004000a, 0x20002000000f0005, x3, 112, x6)

inst_23:
// rs1==x1, rs2==x23, rs2_h3_val == 4096, rs1_h3_val == 43690, rs2_h1_val == 256
// opcode: umul16 ; op1:x1; op2:x23; dest:x31; op1val:0xaaaa000c0007000a;  op2val:0x100008000100feff
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x1, x23, 0x0000000000000000, $correctval_hi, 0xaaaa000c0007000a, 0x100008000100feff, x3, 128, x6)

inst_24:
// rs1==x19, rs2==x31, rs2_h3_val == 2048, rs1_h1_val == 2, rs1_h0_val == 32, rs2_h1_val == 16, rs2_h0_val == 32767
// opcode: umul16 ; op1:x19; op2:x31; dest:x28; op1val:0x0009feff00020020;  op2val:0x0800000b00107fff
TEST_P64_PNN_OP(umul16, x28, $rd_hi, x19, x31, 0x0000000000000000, $correctval_hi, 0x0009feff00020020, 0x0800000b00107fff, x3, 144, x6)

inst_25:
// rs1==x7, rs2==x5, rs2_h3_val == 1024, rs2_h0_val == 8192, rs2_h2_val == 16, rs2_h1_val == 128, rs1_h2_val == 128
// opcode: umul16 ; op1:x7; op2:x5; dest:x24; op1val:0x00070080bfff0006;  op2val:0x0400001000802000
TEST_P64_PNN_OP(umul16, x24, $rd_hi, x7, x5, 0x0000000000000000, $correctval_hi, 0x00070080bfff0006, 0x0400001000802000, x3, 160, x6)

inst_26:
// rs1==x11, rs2==x15, rs2_h3_val == 512, rs1_h0_val == 16384, rs2_h0_val == 63487, rs1_h2_val == 65533
// opcode: umul16 ; op1:x11; op2:x15; dest:x28; op1val:0x1000fffdffdf4000;  op2val:0x02002000fdfff7ff
TEST_P64_PNN_OP(umul16, x28, $rd_hi, x11, x15, 0x0000000000000000, $correctval_hi, 0x1000fffdffdf4000, 0x02002000fdfff7ff, x3, 176, x6)

inst_27:
// rs1==x2, rs2==x21, rs2_h3_val == 256, rs1_h3_val == 65519, rs1_h0_val == 128
// opcode: umul16 ; op1:x2; op2:x21; dest:x26; op1val:0xffef0005efff0080;  op2val:0x01000002000ffffd
TEST_P64_PNN_OP(umul16, x26, $rd_hi, x2, x21, 0x0000000000000000, $correctval_hi, 0xffef0005efff0080, 0x01000002000ffffd, x3, 192, x6)

inst_28:
// rs1==x4, rs2==x27, rs2_h3_val == 128, rs2_h0_val == 65519, rs2_h2_val == 8
// opcode: umul16 ; op1:x4; op2:x27; dest:x30; op1val:0xffef0007000b0007;  op2val:0x00800008000fffef
TEST_P64_PNN_OP(umul16, x30, $rd_hi, x4, x27, 0x0000000000000000, $correctval_hi, 0xffef0007000b0007, 0x00800008000fffef, x3, 208, x6)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x28, rs2==x2, rs2_h3_val == 64, rs1_h2_val == 65471, rs2_h0_val == 57343, rs1_h3_val == 512
// opcode: umul16 ; op1:x28; op2:x2; dest:x15; op1val:0x0200ffbf8000fbff;  op2val:0x0040dfff000edfff
TEST_P64_PNN_OP(umul16, x15, $rd_hi, x28, x2, 0x0000000000000000, $correctval_hi, 0x0200ffbf8000fbff, 0x0040dfff000edfff, x1, 0, x3)

inst_30:
// rs1==x30, rs2==x8, rs2_h3_val == 32, rs2_h1_val == 32
// opcode: umul16 ; op1:x30; op2:x8; dest:x26; op1val:0xfffeffbf4000feff;  op2val:0x0020000e00200002
TEST_P64_PNN_OP(umul16, x26, $rd_hi, x30, x8, 0x0000000000000000, $correctval_hi, 0xfffeffbf4000feff, 0x0020000e00200002, x1, 16, x3)

inst_31:
// rs1==x8, rs2==x22, rs2_h3_val == 16, rs1_h3_val == 8, rs1_h2_val == 65535, rs1_h0_val == 65023, rs2_h2_val == 65535
// opcode: umul16 ; op1:x8; op2:x22; dest:x21; op1val:0x0008ffff000bfdff;  op2val:0x0010ffff20000008
TEST_P64_PNN_OP(umul16, x21, $rd_hi, x8, x22, 0x0000000000000000, $correctval_hi, 0x0008ffff000bfdff, 0x0010ffff20000008, x1, 32, x3)

inst_32:
// rs2_h3_val == 8, rs1_h0_val == 2048, rs2_h2_val == 63487
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x0013001240000800;  op2val:0x0008f7ff00110040
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0013001240000800, 0x0008f7ff00110040, x1, 48, x3)

inst_33:
// rs2_h3_val == 4, rs1_h0_val == 8, rs1_h2_val == 8, rs2_h2_val == 65533
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x00130008ffdf0008;  op2val:0x0004fffd000ebfff
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00130008ffdf0008, 0x0004fffd000ebfff, x1, 64, x3)

inst_34:
// rs2_h3_val == 2, rs1_h2_val == 49151
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000bfff0009000c;  op2val:0x000200110003ffef
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000bfff0009000c, 0x000200110003ffef, x1, 80, x3)

inst_35:
// rs2_h3_val == 1, rs1_h3_val == 2, rs1_h1_val == 65534
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x00020400fffe0080;  op2val:0x00010013fdff0003
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00020400fffe0080, 0x00010013fdff0003, x1, 96, x3)

inst_36:
// rs2_h3_val == 65535, rs1_h0_val == 65527, rs2_h0_val == 4, rs1_h1_val == 8
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x000afffb0008fff7;  op2val:0xffff0004000a0004
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000afffb0008fff7, 0xffff0004000a0004, x1, 112, x3)

inst_37:
// rs2_h3_val == 0, rs1_h1_val == 65531, rs1_h3_val == 32768, rs2_h2_val == 32768
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000080fffb0005;  op2val:0x0000800001000013
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x80000080fffb0005, 0x0000800001000013, x1, 128, x3)

inst_38:
// rs2_h2_val == 43690, rs2_h1_val == 65534, rs1_h2_val == 65023, rs1_h1_val == 57343, rs1_h3_val == 65503, rs2_h0_val == 61439
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffdffdfff000f;  op2val:0xff7faaaafffeefff
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdffdffdfff000f, 0xff7faaaafffeefff, x1, 144, x3)

inst_39:
// rs2_h2_val == 21845, rs1_h3_val == 65023, rs2_h1_val == 32768, rs1_h0_val == 32767, rs1_h1_val == 65527
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffdfff77fff;  op2val:0xfff7555580000011
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdfffffdfff77fff, 0xfff7555580000011, x1, 160, x3)

inst_40:
// rs1_h1_val == 65535, rs2_h0_val == 64511, rs2_h2_val == 512, rs1_h3_val == 57343
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff000fffff000b;  op2val:0xffef0200000efbff
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfff000fffff000b, 0xffef0200000efbff, x1, 176, x3)

inst_41:
// rs1_h1_val == 0, rs1_h3_val == 16384
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000ffbf00000001;  op2val:0x0400feff0080000f
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x4000ffbf00000001, 0x0400feff0080000f, x1, 192, x3)

inst_42:
// rs1_h0_val == 43690, rs2_h0_val == 16, rs1_h2_val == 256
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x000801001000aaaa;  op2val:0xffff2000ffef0010
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000801001000aaaa, 0xffff2000ffef0010, x1, 208, x3)

inst_43:
// rs1_h0_val == 21845, rs1_h1_val == 128
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x0020200000805555;  op2val:0xfbff5555000efff7
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020200000805555, 0xfbff5555000efff7, x1, 224, x3)

inst_44:
// rs1_h0_val == 61439, rs2_h2_val == 256
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x001220000011efff;  op2val:0xfdff01000003aaaa
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x001220000011efff, 0xfdff01000003aaaa, x1, 240, x3)

inst_45:
// rs1_h0_val == 63487, rs2_h1_val == 4, rs1_h1_val == 32767
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff700087ffff7ff;  op2val:0x7fff000e00041000
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff700087ffff7ff, 0x7fff000e00041000, x1, 256, x3)

inst_46:
// rs1_h0_val == 65407, rs2_h2_val == 65503, rs2_h1_val == 49151, rs1_h1_val == 16
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x000f00800010ff7f;  op2val:0x1000ffdfbffffdff
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000f00800010ff7f, 0x1000ffdfbffffdff, x1, 272, x3)

inst_47:
// rs1_h0_val == 65503, rs1_h2_val == 16384, rs1_h1_val == 8192
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x004040002000ffdf;  op2val:0x7fff000b00800009
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x004040002000ffdf, 0x7fff000b00800009, x1, 288, x3)

inst_48:
// rs1_h0_val == 65519, rs1_h3_val == 65279, rs2_h1_val == 65535, rs2_h2_val == 32767
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffff7f7ffffef;  op2val:0x40007ffffffffbff
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfefffff7f7ffffef, 0x40007ffffffffbff, x1, 304, x3)

inst_49:
// rs1_h0_val == 65531, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x0012000d1000fffb;  op2val:0x000dfff700031000
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0012000d1000fffb, 0x000dfff700031000, x1, 320, x3)

inst_50:
// rs1_h0_val == 65534, rs1_h3_val == 1024
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x04000020f7fffffe;  op2val:0x0007ffbffffbffdf
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x04000020f7fffffe, 0x0007ffbffffbffdf, x1, 336, x3)

inst_51:
// rs1_h0_val == 32768, rs1_h2_val == 65407, rs2_h2_val == 128
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000ff7fdfff8000;  op2val:0x001000807fffffdf
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x4000ff7fdfff8000, 0x001000807fffffdf, x1, 352, x3)

inst_52:
// rs1_h0_val == 4096, rs1_h3_val == 65535
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0080ffdf1000;  op2val:0xf7ff0009ffef0012
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff0080ffdf1000, 0xf7ff0009ffef0012, x1, 368, x3)

inst_53:
// rs1_h0_val == 1024, rs2_h2_val == 32, rs1_h3_val == 0
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x0000ffdf00060400;  op2val:0xffdf00207fffefff
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000ffdf00060400, 0xffdf00207fffefff, x1, 384, x3)

inst_54:
// rs1_h0_val == 256, rs2_h1_val == 64
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fdffffff0100;  op2val:0x000900010040feff
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x1000fdffffff0100, 0x000900010040feff, x1, 400, x3)

inst_55:
// rs1_h0_val == 64, rs2_h2_val == 49151, rs2_h1_val == 2048
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x08000009000b0040;  op2val:0x0006bfff08000009
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x08000009000b0040, 0x0006bfff08000009, x1, 416, x3)

inst_56:
// rs1_h0_val == 16, rs2_h1_val == 1024, rs2_h2_val == 65531
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x00200400bfff0010;  op2val:0x5555fffb0400ffdf
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00200400bfff0010, 0x5555fffb0400ffdf, x1, 432, x3)

inst_57:
// rs1_h0_val == 4, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x000a0011fffd0004;  op2val:0x000fffef08000011
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000a0011fffd0004, 0x000fffef08000011, x1, 448, x3)

inst_58:
// rs1_h0_val == 2, rs2_h0_val == 16384, rs2_h1_val == 2
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x0003fffdefff0002;  op2val:0x0080001000024000
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0003fffdefff0002, 0x0080001000024000, x1, 464, x3)

inst_59:
// rs1_h0_val == 65535, rs1_h1_val == 65519
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7feffffefffff;  op2val:0x0002ffdf00800005
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7feffffefffff, 0x0002ffdf00800005, x1, 480, x3)

inst_60:
// rs2_h2_val == 61439, rs1_h2_val == 57343, rs2_h1_val == 65503
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x0003dfff00130006;  op2val:0x0002efffffdffeff
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0003dfff00130006, 0x0002efffffdffeff, x1, 496, x3)

inst_61:
// rs2_h2_val == 64511, rs1_h2_val == 65534
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x0002fffedfff0009;  op2val:0x0006fbff000e0005
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0002fffedfff0009, 0x0006fbff000e0005, x1, 512, x3)

inst_62:
// rs2_h0_val == 65471, rs2_h2_val == 0
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x000efffd0007ffdf;  op2val:0x00070000000dffbf
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000efffd0007ffdf, 0x00070000000dffbf, x1, 528, x3)

inst_63:
// rs2_h0_val == 65531, rs1_h3_val == 61439
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffd40000000;  op2val:0xfbfffbffffbffffb
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xeffffffd40000000, 0xfbfffbffffbffffb, x1, 544, x3)

inst_64:
// rs2_h0_val == 65534, rs1_h1_val == 65407
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000003ff7f0800;  op2val:0x80000012000efffe
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x80000003ff7f0800, 0x80000012000efffe, x1, 560, x3)

inst_65:
// rs2_h0_val == 32768, rs1_h3_val == 32767
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff7f01000012;  op2val:0x000bffff00108000
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fffff7f01000012, 0x000bffff00108000, x1, 576, x3)

inst_66:
// rs2_h0_val == 2048, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x000c7fff0003fffb;  op2val:0x020000047fff0800
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000c7fff0003fffb, 0x020000047fff0800, x1, 592, x3)

inst_67:
// rs2_h0_val == 1024, rs1_h3_val == 65407
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffb00120012;  op2val:0x0003f7ff00060400
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7ffffb00120012, 0x0003f7ff00060400, x1, 608, x3)

inst_68:
// rs2_h0_val == 512, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfaaaafffbdfff;  op2val:0x0002aaaa00010200
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdfaaaafffbdfff, 0x0002aaaa00010200, x1, 624, x3)

inst_69:
// rs2_h0_val == 256, rs1_h2_val == 16, rs1_h1_val == 32
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x0400001000200009;  op2val:0xfffefffe00120100
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0400001000200009, 0xfffefffe00120100, x1, 640, x3)

inst_70:
// rs2_h0_val == 128, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000080000800;  op2val:0xffbf0000000e0080
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaa000080000800, 0xffbf0000000e0080, x1, 656, x3)

inst_71:
// rs2_h0_val == 32, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe000200130012;  op2val:0x0012fbffdfff0020
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffe000200130012, 0x0012fbffdfff0020, x1, 672, x3)

inst_72:
// rs2_h0_val == 65535, rs2_h1_val == 65533, rs1_h1_val == 64
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x000755550040ffdf;  op2val:0x0011000afffdffff
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000755550040ffdf, 0x0011000afffdffff, x1, 688, x3)

inst_73:
// rs2_h0_val == 0, rs2_h1_val == 65407
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x000ddffff7ff000e;  op2val:0x0008feffff7f0000
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000ddffff7ff000e, 0x0008feffff7f0000, x1, 704, x3)

inst_74:
// rs1_h3_val == 65471, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf000040000400;  op2val:0x0002fefffffeffbf
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbf000040000400, 0x0002fefffffeffbf, x1, 720, x3)

inst_75:
// rs1_h3_val == 65531, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0080000dbfff;  op2val:0x0000020000070002
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffb0080000dbfff, 0x0000020000070002, x1, 736, x3)

inst_76:
// rs1_h3_val == 128, rs1_h1_val == 2048
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x0080fffb08000040;  op2val:0x0008ffbffffd0010
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080fffb08000040, 0x0008ffbffffd0010, x1, 752, x3)

inst_77:
// rs2_h2_val == 65023, rs1_h2_val == 512
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x0040020000110001;  op2val:0xaaaafdffdfff0800
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040020000110001, 0xaaaafdffdfff0800, x1, 768, x3)

inst_78:
// rs1_h3_val == 16, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x001000097fff0003;  op2val:0x0003efff0400000b
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x001000097fff0003, 0x0003efff0400000b, x1, 784, x3)

inst_79:
// rs2_h2_val == 65407, rs1_h1_val == 65279
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x0100fefffeffdfff;  op2val:0x0005ff7f00400003
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0100fefffeffdfff, 0x0005ff7f00400003, x1, 800, x3)

inst_80:
// rs2_h2_val == 16384, rs2_h1_val == 4096
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000001000104000;  op2val:0x400040001000ffdf
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x4000001000104000, 0x400040001000ffdf, x1, 816, x3)

inst_81:
// rs1_h2_val == 61439, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000efff00400800;  op2val:0x0100fbff000a0012
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000efff00400800, 0x0100fbff000a0012, x1, 832, x3)

inst_82:
// rs1_h2_val == 63487, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaf7ff00200012;  op2val:0xfffbfffbfffffeff
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaaf7ff00200012, 0xfffbfffbfffffeff, x1, 848, x3)

inst_83:
// rs2_h2_val == 1024, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf000f08000001;  op2val:0x7fff04000001000c
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbf000f08000001, 0x7fff04000001000c, x1, 864, x3)

inst_84:
// rs2_h2_val == 64, rs2_h1_val == 21845
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x0006f7ff04000200;  op2val:0x555500405555fffe
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0006f7ff04000200, 0x555500405555fffe, x1, 880, x3)

inst_85:
// rs1_h2_val == 32768, rs2_h1_val == 43690
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x00808000fff7000b;  op2val:0xbfff0000aaaafffe
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00808000fff7000b, 0xbfff0000aaaafffe, x1, 896, x3)

inst_86:
// rs1_h2_val == 4096, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb1000ffef000b;  op2val:0x00200002ff7f0100
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffb1000ffef000b, 0x00200002ff7f0100, x1, 912, x3)

inst_87:
// rs1_h2_val == 2048, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x00120800000f0002;  op2val:0x0011fffb000f0008
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00120800000f0002, 0x0011fffb000f0008, x1, 928, x3)

inst_88:
// rs2_h1_val == 61439, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffdff000a000b;  op2val:0xaaaa0001efff000d
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbffdff000a000b, 0xaaaa0001efff000d, x1, 944, x3)

inst_89:
// rs2_h1_val == 63487, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x0013000608000080;  op2val:0x00000012f7ff000c
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0013000608000080, 0x00000012f7ff000c, x1, 960, x3)

inst_90:
// rs2_h1_val == 65279, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x000fffff7fff0020;  op2val:0x00028000feff0004
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000fffff7fff0020, 0x00028000feff0004, x1, 976, x3)

inst_91:
// rs1_h2_val == 4, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000400110100;  op2val:0x40000011ff7f000b
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fff000400110100, 0x40000011ff7f000b, x1, 992, x3)

inst_92:
// rs1_h1_val == 43690, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x0200feffaaaa000d;  op2val:0x004004000012efff
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200feffaaaa000d, 0x004004000012efff, x1, 1008, x3)

inst_93:
// rs1_h1_val == 21845, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f001155558000;  op2val:0x0011ffff5555ffff
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7f001155558000, 0x0011ffff5555ffff, x1, 1024, x3)

inst_94:
// rs2_h1_val == 16384, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x000aefffff7fffdf;  op2val:0x0200001040000012
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000aefffff7fffdf, 0x0200001040000012, x1, 1040, x3)

inst_95:
// rs1_h1_val == 64511, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa1000fbff0002;  op2val:0xff7ffff70007ffff
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaa1000fbff0002, 0xff7ffff70007ffff, x1, 1056, x3)

inst_96:
// rs2_h1_val == 512, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x00110011fffffbff;  op2val:0xbfff00800200000e
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00110011fffffbff, 0xbfff00800200000e, x1, 1072, x3)

inst_97:
// rs1_h1_val == 65023, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x000d000dfdff0800;  op2val:0x0008dfff20000200
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000d000dfdff0800, 0x0008dfff20000200, x1, 1088, x3)

inst_98:
// rs1_h1_val == 65471, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000affbf0005;  op2val:0x01000006fffdfffe
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fff000affbf0005, 0x01000006fffdfffe, x1, 1104, x3)

inst_99:
// rs2_h1_val == 8, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x0080000d000e0003;  op2val:0xdffffff700080002
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080000d000e0003, 0xdffffff700080002, x1, 1120, x3)

inst_100:
// rs2_h1_val == 0, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe008001000080;  op2val:0xff7fdfff0000000f
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffe008001000080, 0xff7fdfff0000000f, x1, 1136, x3)

inst_101:
// rs2_h1_val == 65527, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0400ff7fdfff;  op2val:0x000f1000fff7000b
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffd0400ff7fdfff, 0x000f1000fff7000b, x1, 1152, x3)

inst_102:
// rs1_h3_val == 4, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x0004000eaaaa0010;  op2val:0x5555000402000013
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0004000eaaaa0010, 0x5555000402000013, x1, 1168, x3)

inst_103:
// rs1_h1_val == 512, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x0004ffdf0200fffb;  op2val:0x04000100fffe0040
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0004ffdf0200fffb, 0x04000100fffe0040, x1, 1184, x3)

inst_104:
// rs1_h3_val == 1, 
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x0001fff700084000;  op2val:0x000500060002fbff
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001fff700084000, 0x000500060002fbff, x1, 1200, x3)

inst_105:
// rs1_h2_val == 1, rs2_h0_val == 65407
// opcode: umul16 ; op1:x30; op2:x29; dest:x31; op1val:0x000500010012efff;  op2val:0xffdf7fff0004ff7f
TEST_P64_PNN_OP(umul16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000500010012efff, 0xffdf7fff0004ff7f, x1, 1216, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 154*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
