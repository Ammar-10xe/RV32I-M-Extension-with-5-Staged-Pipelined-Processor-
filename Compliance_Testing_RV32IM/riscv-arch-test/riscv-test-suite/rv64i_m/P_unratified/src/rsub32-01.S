
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rsub32 instruction of the RISC-V RV64PZicsr extension for the rsub32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",rsub32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 == rd != rs2, rs1==x16, rs2==x21, rd==x16, rs1_w0_val == -2147483648, rs1_w1_val == -4194305, rs1_w1_val != rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w0_val == 536870912, rs2_w1_val == 65536
// opcode: rsub32 ; op1:x16; op2:x21; dest:x16; op1val:0xffbfffff80000000;  op2val:0x01000020000000
TEST_RR_OP(rsub32, x16, x16, x21, 0x0000000000000000, 0xffbfffff80000000, 0x01000020000000, x5, 0, x7)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x22, rs2==x27, rd==x17, rs1_w1_val == rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == -1, rs2_w0_val == 1, rs1_w1_val == -1, rs1_w0_val == 1431655765
// opcode: rsub32 ; op1:x22; op2:x27; dest:x17; op1val:0xffffffff55555555;  op2val:0xffffffff00000001
TEST_RR_OP(rsub32, x17, x22, x27, 0x0000000000000000, 0xffffffff55555555, 0xffffffff00000001, x5, 8, x7)

inst_2:
// rs1 == rs2 != rd, rs1==x14, rs2==x14, rd==x13, rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w0_val == -131073, rs1_w1_val == 2097152, rs2_w1_val == -513, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w0_val == -8193
// opcode: rsub32 ; op1:x14; op2:x14; dest:x13; op1val:0x200000ffffdfff;  op2val:0xfffffdfffffdffff
TEST_RR_OP(rsub32, x13, x14, x14, 0x0000000000000000, 0x200000ffffdfff, 0xfffffdfffffdffff, x5, 16, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x26, rs2==x26, rd==x26, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val == 256, rs1_w1_val == 2, rs2_w1_val == 32768
// opcode: rsub32 ; op1:x26; op2:x26; dest:x26; op1val:0x00000200000100;  op2val:0x0080003fffffff
TEST_RR_OP(rsub32, x26, x26, x26, 0x0000000000000000, 0x00000200000100, 0x0080003fffffff, x5, 24, x7)

inst_4:
// rs2 == rd != rs1, rs1==x3, rs2==x12, rd==x12, rs1_w0_val == rs2_w0_val, rs1_w1_val == 1073741824, rs2_w1_val == -8193, rs1_w0_val == -134217729, rs2_w0_val == -134217729
// opcode: rsub32 ; op1:x3; op2:x12; dest:x12; op1val:0x40000000f7ffffff;  op2val:0xffffdffff7ffffff
TEST_RR_OP(rsub32, x12, x3, x12, 0x0000000000000000, 0x40000000f7ffffff, 0xffffdffff7ffffff, x5, 32, x7)

inst_5:
// rs1==x0, rs2==x13, rd==x9, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w1_val == -16385, rs2_w0_val == -65
// opcode: rsub32 ; op1:x0; op2:x13; dest:x9; op1val:0xffffbfff00000007;  op2val:0xffffdfffffffffbf
TEST_RR_OP(rsub32, x9, x0, x13, 0x0000000000000000, 0xffffbfff00000007, 0xffffdfffffffffbf, x5, 40, x7)

inst_6:
// rs1==x15, rs2==x29, rd==x8, rs2_w1_val == -1431655766, rs1_w1_val == 64, rs2_w0_val == 131072, rs1_w0_val == -1048577
// opcode: rsub32 ; op1:x15; op2:x29; dest:x8; op1val:0x000040ffefffff;  op2val:0xaaaaaaaa00020000
TEST_RR_OP(rsub32, x8, x15, x29, 0x0000000000000000, 0x000040ffefffff, 0xaaaaaaaa00020000, x5, 48, x7)

inst_7:
// rs1==x12, rs2==x3, rd==x0, rs2_w1_val == 1431655765, rs2_w0_val == -32769, rs1_w1_val == -257
// opcode: rsub32 ; op1:x12; op2:x3; dest:x0; op1val:0xfffffeff00000003;  op2val:0x55555555ffff7fff
TEST_RR_OP(rsub32, x0, x12, x3, 0x0000000000000000, 0xfffffeff00000003, 0x55555555ffff7fff, x5, 56, x7)

inst_8:
// rs1==x17, rs2==x11, rd==x20, rs2_w1_val == 2147483647, rs1_w0_val == -16777217, rs2_w0_val == -1073741825
// opcode: rsub32 ; op1:x17; op2:x11; dest:x20; op1val:0xffffbffffeffffff;  op2val:0x7fffffffbfffffff
TEST_RR_OP(rsub32, x20, x17, x11, 0x0000000000000000, 0xffffbffffeffffff, 0x7fffffffbfffffff, x5, 64, x7)

inst_9:
// rs1==x4, rs2==x30, rd==x25, rs2_w1_val == -1073741825, rs1_w0_val == -33554433, rs2_w0_val == 0, rs1_w1_val == 134217728
// opcode: rsub32 ; op1:x4; op2:x30; dest:x25; op1val:0x8000000fdffffff;  op2val:0xbfffffff00000000
TEST_RR_OP(rsub32, x25, x4, x30, 0x0000000000000000, 0x8000000fdffffff, 0xbfffffff00000000, x5, 72, x7)

inst_10:
// rs1==x1, rs2==x10, rd==x22, rs2_w1_val == -536870913, rs2_w0_val == -33554433, rs1_w0_val == 134217728
// opcode: rsub32 ; op1:x1; op2:x10; dest:x22; op1val:0x00000608000000;  op2val:0xdffffffffdffffff
TEST_RR_OP(rsub32, x22, x1, x10, 0x0000000000000000, 0x00000608000000, 0xdffffffffdffffff, x5, 80, x7)

inst_11:
// rs1==x2, rs2==x6, rd==x19, rs2_w1_val == -268435457, rs2_w0_val == 33554432, rs1_w0_val == -65537, rs1_w1_val == 1024
// opcode: rsub32 ; op1:x2; op2:x6; dest:x19; op1val:0x000400fffeffff;  op2val:0xefffffff02000000
TEST_RR_OP(rsub32, x19, x2, x6, 0x0000000000000000, 0x000400fffeffff, 0xefffffff02000000, x5, 88, x7)

inst_12:
// rs1==x11, rs2==x24, rd==x18, rs2_w1_val == -134217729, rs1_w0_val == 4194304
// opcode: rsub32 ; op1:x11; op2:x24; dest:x18; op1val:0x00000900400000;  op2val:0xf7fffffffffffff9
TEST_RR_OP(rsub32, x18, x11, x24, 0x0000000000000000, 0x00000900400000, 0xf7fffffffffffff9, x5, 96, x7)

inst_13:
// rs1==x10, rs2==x8, rd==x21, rs2_w1_val == -67108865, rs2_w0_val == -8193
// opcode: rsub32 ; op1:x10; op2:x8; dest:x21; op1val:0x000006fdffffff;  op2val:0xfbffffffffffdfff
TEST_RR_OP(rsub32, x21, x10, x8, 0x0000000000000000, 0x000006fdffffff, 0xfbffffffffffdfff, x5, 104, x7)

inst_14:
// rs1==x27, rs2==x18, rd==x14, rs2_w1_val == -33554433, rs2_w0_val == -5, rs1_w0_val == 1, rs1_w1_val == 8
// opcode: rsub32 ; op1:x27; op2:x18; dest:x14; op1val:0x00000800000001;  op2val:0xfdfffffffffffffb
TEST_RR_OP(rsub32, x14, x27, x18, 0x0000000000000000, 0x00000800000001, 0xfdfffffffffffffb, x5, 112, x7)

inst_15:
// rs1==x9, rs2==x16, rd==x11, rs2_w1_val == -16777217, rs1_w1_val == -1048577, rs2_w0_val == -33, rs1_w0_val == -4097
// opcode: rsub32 ; op1:x9; op2:x16; dest:x11; op1val:0xffefffffffffefff;  op2val:0xfeffffffffffffdf
TEST_RR_OP(rsub32, x11, x9, x16, 0x0000000000000000, 0xffefffffffffefff, 0xfeffffffffffffdf, x5, 120, x7)

inst_16:
// rs1==x31, rs2==x28, rd==x4, rs2_w1_val == -8388609, rs2_w0_val == -1431655766, rs1_w1_val == 1431655765
// opcode: rsub32 ; op1:x31; op2:x28; dest:x4; op1val:0x55555555fdffffff;  op2val:0xff7fffffaaaaaaaa
TEST_RR_OP(rsub32, x4, x31, x28, 0x0000000000000000, 0x55555555fdffffff, 0xff7fffffaaaaaaaa, x5, 128, x7)
RVTEST_SIGBASE(x11,signature_x11_0)

inst_17:
// rs1==x6, rs2==x22, rd==x27, rs2_w1_val == -4194305, rs2_w0_val == 65536, rs1_w1_val == 128
// opcode: rsub32 ; op1:x6; op2:x22; dest:x27; op1val:0x000080fffffff6;  op2val:0xffbfffff00010000
TEST_RR_OP(rsub32, x27, x6, x22, 0x0000000000000000, 0x000080fffffff6, 0xffbfffff00010000, x11, 0, x7)

inst_18:
// rs1==x28, rs2==x2, rd==x3, rs2_w1_val == -2097153, rs1_w0_val == -513, rs2_w0_val == 1048576, rs1_w1_val == 8388608
// opcode: rsub32 ; op1:x28; op2:x2; dest:x3; op1val:0x800000fffffdff;  op2val:0xffdfffff00100000
TEST_RR_OP(rsub32, x3, x28, x2, 0x0000000000000000, 0x800000fffffdff, 0xffdfffff00100000, x11, 8, x7)

inst_19:
// rs1==x23, rs2==x5, rd==x30, rs2_w1_val == -1048577, rs2_w0_val == -262145, rs1_w1_val == -536870913, rs1_w0_val == 32768
// opcode: rsub32 ; op1:x23; op2:x5; dest:x30; op1val:0xdfffffff00008000;  op2val:0xffeffffffffbffff
TEST_RR_OP(rsub32, x30, x23, x5, 0x0000000000000000, 0xdfffffff00008000, 0xffeffffffffbffff, x11, 16, x7)

inst_20:
// rs1==x30, rs2==x1, rd==x15, rs2_w1_val == -524289, rs1_w1_val == -8193, rs2_w0_val == -129, rs1_w0_val == 65536
// opcode: rsub32 ; op1:x30; op2:x1; dest:x15; op1val:0xffffdfff00010000;  op2val:0xfff7ffffffffff7f
TEST_RR_OP(rsub32, x15, x30, x1, 0x0000000000000000, 0xffffdfff00010000, 0xfff7ffffffffff7f, x11, 24, x7)

inst_21:
// rs1==x8, rs2==x31, rd==x29, rs2_w1_val == -262145, rs1_w0_val == 2048, rs2_w0_val == 134217728
// opcode: rsub32 ; op1:x8; op2:x31; dest:x29; op1val:0xdfffffff00000800;  op2val:0xfffbffff08000000
TEST_RR_OP(rsub32, x29, x8, x31, 0x0000000000000000, 0xdfffffff00000800, 0xfffbffff08000000, x11, 32, x7)

inst_22:
// rs1==x24, rs2==x25, rd==x10, rs2_w1_val == -131073, rs1_w1_val == -4097
// opcode: rsub32 ; op1:x24; op2:x25; dest:x10; op1val:0xffffefff00000100;  op2val:0xfffdfffffffdffff
TEST_RR_OP(rsub32, x10, x24, x25, 0x0000000000000000, 0xffffefff00000100, 0xfffdfffffffdffff, x11, 40, x7)

inst_23:
// rs1==x13, rs2==x9, rd==x23, rs2_w1_val == -65537, rs1_w0_val == 2, rs1_w1_val == -32769
// opcode: rsub32 ; op1:x13; op2:x9; dest:x23; op1val:0xffff7fff00000002;  op2val:0xfffeffff20000000
TEST_RR_OP(rsub32, x23, x13, x9, 0x0000000000000000, 0xffff7fff00000002, 0xfffeffff20000000, x11, 48, x7)

inst_24:
// rs1==x20, rs2==x17, rd==x31, rs2_w1_val == -32769, rs2_w0_val == 16777216, rs1_w1_val == -1431655766
// opcode: rsub32 ; op1:x20; op2:x17; dest:x31; op1val:0xaaaaaaaa00000800;  op2val:0xffff7fff01000000
TEST_RR_OP(rsub32, x31, x20, x17, 0x0000000000000000, 0xaaaaaaaa00000800, 0xffff7fff01000000, x11, 56, x7)

inst_25:
// rs1==x7, rs2==x19, rd==x24, rs2_w1_val == -16385, rs1_w0_val == -131073, rs1_w1_val == -129
// opcode: rsub32 ; op1:x7; op2:x19; dest:x24; op1val:0xffffff7ffffdffff;  op2val:0xffffbffffffffff6
TEST_RR_OP(rsub32, x24, x7, x19, 0x0000000000000000, 0xffffff7ffffdffff, 0xffffbffffffffff6, x11, 64, x3)

inst_26:
// rs1==x21, rs2==x7, rd==x6, rs2_w1_val == -4097, rs1_w1_val == -65, rs2_w0_val == -257
// opcode: rsub32 ; op1:x21; op2:x7; dest:x6; op1val:0xffffffbf00000001;  op2val:0xffffeffffffffeff
TEST_RR_OP(rsub32, x6, x21, x7, 0x0000000000000000, 0xffffffbf00000001, 0xffffeffffffffeff, x11, 72, x3)

inst_27:
// rs1==x5, rs2==x23, rd==x7, rs2_w1_val == -2049, rs1_w0_val == -4194305
// opcode: rsub32 ; op1:x5; op2:x23; dest:x7; op1val:0x000040ffbfffff;  op2val:0xfffff7ff08000000
TEST_RR_OP(rsub32, x7, x5, x23, 0x0000000000000000, 0x000040ffbfffff, 0xfffff7ff08000000, x11, 80, x3)

inst_28:
// rs1==x29, rs2==x0, rd==x5, rs2_w1_val == -1025, rs2_w0_val == -2097153, rs1_w1_val == 16777216
// opcode: rsub32 ; op1:x29; op2:x0; dest:x5; op1val:0x100000080000000;  op2val:0xfffffbffffdfffff
TEST_RR_OP(rsub32, x5, x29, x0, 0x0000000000000000, 0x100000080000000, 0xfffffbffffdfffff, x11, 88, x3)

inst_29:
// rs1==x25, rs2==x15, rd==x2, rs2_w1_val == -257, rs1_w1_val == -2, rs1_w0_val == 4
// opcode: rsub32 ; op1:x25; op2:x15; dest:x2; op1val:0xfffffffe00000004;  op2val:0xfffffefffffdffff
TEST_RR_OP(rsub32, x2, x25, x15, 0x0000000000000000, 0xfffffffe00000004, 0xfffffefffffdffff, x11, 96, x3)

inst_30:
// rs1==x18, rs2==x20, rd==x28, rs2_w1_val == -129, rs2_w0_val == -1025, rs1_w1_val == 524288, rs1_w0_val == -32769
// opcode: rsub32 ; op1:x18; op2:x20; dest:x28; op1val:0x080000ffff7fff;  op2val:0xffffff7ffffffbff
TEST_RR_OP(rsub32, x28, x18, x20, 0x0000000000000000, 0x080000ffff7fff, 0xffffff7ffffffbff, x11, 104, x3)

inst_31:
// rs1==x19, rs2==x4, rd==x1, rs2_w1_val == -65, rs1_w0_val == 1048576
// opcode: rsub32 ; op1:x19; op2:x4; dest:x1; op1val:0xffff7fff00100000;  op2val:0xffffffbfbfffffff
TEST_RR_OP(rsub32, x1, x19, x4, 0x0000000000000000, 0xffff7fff00100000, 0xffffffbfbfffffff, x11, 112, x3)

inst_32:
// rs2_w1_val == -33, rs2_w0_val == 8
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080c0000000;  op2val:0xffffffdf00000008
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x000080c0000000, 0xffffffdf00000008, x11, 120, x3)

inst_33:
// rs2_w1_val == -17, rs1_w1_val == -134217729
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00100000;  op2val:0xffffffef00000007
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00100000, 0xffffffef00000007, x11, 128, x3)

inst_34:
// rs2_w1_val == -9, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000ffff7fff;  op2val:0xfffffff7ffff7fff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x080000ffff7fff, 0xfffffff7ffff7fff, x11, 136, x3)

inst_35:
// rs2_w1_val == -5, rs1_w1_val == 33554432, rs2_w0_val == 2048
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000010000;  op2val:0xfffffffb00000800
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x200000000010000, 0xfffffffb00000800, x11, 144, x3)

inst_36:
// rs2_w1_val == -3, rs1_w1_val == -131073, rs2_w0_val == 4096
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00010000;  op2val:0xfffffffd00001000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00010000, 0xfffffffd00001000, x11, 152, x3)

inst_37:
// rs2_w1_val == -2, rs1_w0_val == -67108865, rs1_w1_val == 4096
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fbffffff;  op2val:0xfffffffefffffbff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x001000fbffffff, 0xfffffffefffffbff, x11, 160, x3)

inst_38:
// rs2_w1_val == -2147483648, rs1_w1_val == -524289, rs2_w0_val == -16385, rs1_w0_val == -268435457
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffefffffff;  op2val:0x80000000ffffbfff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfff7ffffefffffff, 0x80000000ffffbfff, x11, 168, x3)

inst_39:
// rs2_w1_val == 1073741824, rs2_w0_val == -1, rs1_w1_val == 32768
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x0080003fffffff;  op2val:0x40000000ffffffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x0080003fffffff, 0x40000000ffffffff, x11, 176, x3)

inst_40:
// rs2_w1_val == 536870912, rs1_w0_val == 4096
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600001000;  op2val:0x2000000000001000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x00000600001000, 0x2000000000001000, x11, 184, x3)

inst_41:
// rs2_w1_val == 268435456, rs2_w0_val == 4, rs1_w1_val == -17
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef08000000;  op2val:0x1000000000000004
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xffffffef08000000, 0x1000000000000004, x11, 192, x3)

inst_42:
// rs2_w1_val == 134217728, rs1_w1_val == -268435457
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00008000;  op2val:0x8000000fffffffb
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xefffffff00008000, 0x8000000fffffffb, x11, 200, x3)

inst_43:
// rs2_w1_val == 67108864, rs2_w0_val == -17
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000002;  op2val:0x4000000ffffffef
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x4000000000000002, 0x4000000ffffffef, x11, 208, x3)

inst_44:
// rs2_w1_val == 33554432, rs1_w0_val == -536870913, rs1_w1_val == 512
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200dfffffff;  op2val:0x200000000020000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x000200dfffffff, 0x200000000020000, x11, 216, x3)

inst_45:
// rs2_w1_val == 16777216, rs1_w0_val == 1024
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000400;  op2val:0x100000000001000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x00000600000400, 0x100000000001000, x11, 224, x3)

inst_46:
// rs2_w1_val == 8388608, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff08000000;  op2val:0x800000ffffffef
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfffdffff08000000, 0x800000ffffffef, x11, 232, x3)

inst_47:
// rs2_w1_val == 4194304, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00100000;  op2val:0x400000fffffeff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfffffffc00100000, 0x400000fffffeff, x11, 240, x3)

inst_48:
// rs2_w1_val == 2097152, rs1_w1_val == 16384, rs1_w0_val == 128
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000000080;  op2val:0x200000ffffff7f
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x00400000000080, 0x200000ffffff7f, x11, 248, x3)

inst_49:
// rs2_w1_val == 1048576, rs2_w0_val == -67108865, rs1_w0_val == -257
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005fffffeff;  op2val:0x100000fbffffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x000005fffffeff, 0x100000fbffffff, x11, 256, x3)

inst_50:
// rs2_w1_val == 524288, rs2_w0_val == 32768, rs1_w1_val == -8388609
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000005;  op2val:0x08000000008000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000005, 0x08000000008000, x11, 264, x3)

inst_51:
// rs1_w0_val == 33554432, rs2_w0_val == 1431655765
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff02000000;  op2val:0xfff7ffff55555555
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xffff7fff02000000, 0xfff7ffff55555555, x11, 272, x3)

inst_52:
// rs1_w0_val == 16777216, rs1_w1_val == -16777217
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff01000000;  op2val:0x200000fffffff9
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfeffffff01000000, 0x200000fffffff9, x11, 280, x3)

inst_53:
// rs1_w0_val == 8388608, rs2_w1_val == 4096, rs1_w1_val == 256
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000800000;  op2val:0x00100008000000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x00010000800000, 0x00100008000000, x11, 288, x3)

inst_54:
// rs1_w0_val == 2097152, rs1_w1_val == -33554433
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00200000;  op2val:0x010000c0000000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00200000, 0x010000c0000000, x11, 296, x3)

inst_55:
// rs1_w0_val == 524288, rs2_w0_val == 262144
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00080000;  op2val:0xfffffeff00040000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00080000, 0xfffffeff00040000, x11, 304, x3)

inst_56:
// rs1_w0_val == 262144, rs2_w0_val == 268435456
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000040000;  op2val:0xfffffffa10000000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x20000000040000, 0xfffffffa10000000, x11, 312, x3)

inst_57:
// rs1_w0_val == 131072, rs2_w0_val == 512
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00020000;  op2val:0xfffffffb00000200
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00020000, 0xfffffffb00000200, x11, 320, x3)

inst_58:
// rs1_w0_val == 16384, rs2_w1_val == 16384
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00004000;  op2val:0x004000fffffbff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00004000, 0x004000fffffbff, x11, 328, x3)

inst_59:
// rs1_w0_val == 8192, rs2_w0_val == 8388608
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000002000;  op2val:0x00000600800000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x00400000002000, 0x00000600800000, x11, 336, x3)

inst_60:
// rs1_w0_val == 512, rs1_w1_val == 1048576, rs2_w0_val == -8388609
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000200;  op2val:0x7fffffffff7fffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x10000000000200, 0x7fffffffff7fffff, x11, 344, x3)

inst_61:
// rs1_w0_val == 64, rs1_w1_val == 268435456, rs2_w0_val == 128
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000040;  op2val:0x3fffffff00000080
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x1000000000000040, 0x3fffffff00000080, x11, 352, x3)

inst_62:
// rs1_w0_val == 32, rs1_w1_val == -1025, rs2_w0_val == 1073741824
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000020;  op2val:0xffdfffff40000000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000020, 0xffdfffff40000000, x11, 360, x3)

inst_63:
// rs1_w0_val == 16, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000010;  op2val:0x40000000ffffff7f
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x00040000000010, 0x40000000ffffff7f, x11, 368, x3)

inst_64:
// rs1_w0_val == 8, rs2_w0_val == -536870913
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000008;  op2val:0xff7fffffdfffffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x08000000000008, 0xff7fffffdfffffff, x11, 376, x3)

inst_65:
// rs1_w0_val == 0, rs1_w1_val == 8192
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000000;  op2val:0xfffffdffbfffffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x00200000000000, 0xfffffdffbfffffff, x11, 384, x3)

inst_66:
// rs1_w0_val == -1, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffffff;  op2val:0xfffffefffffbffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffffff, 0xfffffefffffbffff, x11, 392, x3)

inst_67:
// rs2_w1_val == 262144, rs1_w1_val == 2147483647
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffdffffff;  op2val:0x04000002000000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x7ffffffffdffffff, 0x04000002000000, x11, 400, x3)

inst_68:
// rs2_w1_val == 131072, rs1_w0_val == 536870912
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000920000000;  op2val:0x02000000000003
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x00000920000000, 0x02000000000003, x11, 408, x3)

inst_69:
// rs2_w1_val == 8192, rs1_w0_val == -2, rs1_w1_val == -67108865, rs2_w0_val == -2049
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffffffe;  op2val:0x002000fffff7ff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffffffe, 0x002000fffff7ff, x11, 416, x3)

inst_70:
// rs2_w1_val == 2048, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffffffffff8;  op2val:0x00080000000007
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x3ffffffffffffff8, 0x00080000000007, x11, 424, x3)

inst_71:
// rs2_w1_val == 1024, rs1_w0_val == 67108864
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff904000000;  op2val:0x00040000020000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfffffff904000000, 0x00040000020000, x11, 432, x3)

inst_72:
// rs2_w1_val == 512, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000001000;  op2val:0x00020000040000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x100000000001000, 0x00020000040000, x11, 440, x3)

inst_73:
// rs2_w1_val == 256, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000009;  op2val:0x00010000000800
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000009, 0x00010000000800, x11, 448, x3)

inst_74:
// rs2_w1_val == 128, rs1_w1_val == -3
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdf7ffffff;  op2val:0x000080fffffffb
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfffffffdf7ffffff, 0x000080fffffffb, x11, 456, x3)

inst_75:
// rs2_w1_val == 64, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000007;  op2val:0x000040ff7fffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xc000000000000007, 0x000040ff7fffff, x11, 464, x3)

inst_76:
// rs2_w1_val == 32, rs1_w0_val == -33, rs1_w1_val == -513
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffffdf;  op2val:0x00002000000001
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffffdf, 0x00002000000001, x11, 472, x3)

inst_77:
// rs2_w1_val == 16, rs2_w0_val == -65537
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00400000;  op2val:0x000010fffeffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00400000, 0x000010fffeffff, x11, 480, x3)

inst_78:
// rs2_w1_val == 8, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffffffe;  op2val:0x00000800010000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x001000fffffffe, 0x00000800010000, x11, 488, x3)

inst_79:
// rs2_w1_val == 4, rs1_w0_val == 268435456
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000010000000;  op2val:0x000004dfffffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x800000010000000, 0x000004dfffffff, x11, 496, x3)

inst_80:
// rs2_w1_val == 2, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000007;  op2val:0x00000200040000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000007, 0x00000200040000, x11, 504, x3)

inst_81:
// rs2_w1_val == 1, rs2_w0_val == 32
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006c0000000;  op2val:0x00000100000020
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x000006c0000000, 0x00000100000020, x11, 512, x3)

inst_82:
// rs2_w0_val == 16384, rs1_w1_val == 16, rs1_w0_val == -2097153
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffdfffff;  op2val:0xfff7ffff00004000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x000010ffdfffff, 0xfff7ffff00004000, x11, 520, x3)

inst_83:
// rs2_w0_val == 8192, rs1_w0_val == -16385
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcffffbfff;  op2val:0xfffffbff00002000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfffffffcffffbfff, 0xfffffbff00002000, x11, 528, x3)

inst_84:
// rs2_w0_val == 1024, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffefff;  op2val:0x5555555500000400
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffefff, 0x5555555500000400, x11, 536, x3)

inst_85:
// rs2_w0_val == 256, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000dfffffff;  op2val:0x00004000000100
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x001000dfffffff, 0x00004000000100, x11, 544, x3)

inst_86:
// rs2_w0_val == 64, rs1_w0_val == -5
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffffb;  op2val:0x00800000000040
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x1000000fffffffb, 0x00800000000040, x11, 552, x3)

inst_87:
// rs2_w0_val == 16, rs1_w1_val == 131072
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x0200003fffffff;  op2val:0x00002000000010
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x0200003fffffff, 0x00002000000010, x11, 560, x3)

inst_88:
// rs2_w0_val == 2, rs1_w1_val == 1
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffffffa;  op2val:0xfdffffff00000002
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x000001fffffffa, 0xfdffffff00000002, x11, 568, x3)

inst_89:
// rs1_w1_val == -1073741825, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffffff;  op2val:0x010000fffffffb
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffffff, 0x010000fffffffb, x11, 576, x3)

inst_90:
// rs1_w1_val == -2097153, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00200000;  op2val:0xfffffffc00000040
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00200000, 0xfffffffc00000040, x11, 584, x3)

inst_91:
// rs1_w1_val == -262145, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00200000;  op2val:0xfffffffc00008000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00200000, 0xfffffffc00008000, x11, 592, x3)

inst_92:
// rs1_w1_val == -65537, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffdfffffff;  op2val:0xffeffffffffffffa
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfffeffffdfffffff, 0xffeffffffffffffa, x11, 600, x3)

inst_93:
// rs1_w1_val == -2049, rs1_w0_val == -262145, rs2_w0_val == 2097152
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffbffff;  op2val:0xfffffff900200000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffbffff, 0xfffffff900200000, x11, 608, x3)

inst_94:
// rs1_w1_val == -33, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00004000;  op2val:0x00040000000080
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00004000, 0x00040000000080, x11, 616, x3)

inst_95:
// rs1_w1_val == -9, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700100000;  op2val:0x010000ff7fffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfffffff700100000, 0x010000ff7fffff, x11, 624, x3)

inst_96:
// rs1_w1_val == -5, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffffdf;  op2val:0x02000000000100
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffffdf, 0x02000000000100, x11, 632, x3)

inst_97:
// rs1_w1_val == -2147483648, rs2_w1_val == 0
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000080000;  op2val:0x000000fffbffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x8000000000080000, 0x000000fffbffff, x11, 640, x3)

inst_98:
// rs1_w1_val == 536870912, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000004000000;  op2val:0x2000000c0000000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x2000000004000000, 0x2000000c0000000, x11, 648, x3)

inst_99:
// rs1_w1_val == 67108864, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000004000;  op2val:0x800000ffffbfff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x400000000004000, 0x800000ffffbfff, x11, 656, x3)

inst_100:
// rs1_w1_val == 4194304, rs2_w0_val == 4194304
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000040000;  op2val:0xfbffffff00400000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x40000000040000, 0xfbffffff00400000, x11, 664, x3)

inst_101:
// rs1_w1_val == 262144, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000ffbfffff;  op2val:0xfffefffffffeffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x040000ffbfffff, 0xfffefffffffeffff, x11, 672, x3)

inst_102:
// rs1_w1_val == 65536, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000fdffffff;  op2val:0x020000fffffffb
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x010000fdffffff, 0x020000fffffffb, x11, 680, x3)

inst_103:
// rs1_w1_val == 2048, rs2_w0_val == 67108864
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000002000;  op2val:0x5555555504000000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x00080000002000, 0x5555555504000000, x11, 688, x3)

inst_104:
// rs1_w1_val == 32, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000800000;  op2val:0x400000000000400
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x00002000800000, 0x400000000000400, x11, 696, x3)

inst_105:
// rs2_w0_val == 2147483647, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffffbffff;  op2val:0xfffffffb7fffffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffbffff, 0xfffffffb7fffffff, x11, 704, x3)

inst_106:
// rs1_w1_val == 4, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000001;  op2val:0xc0000000aaaaaaaa
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x00000400000001, 0xc0000000aaaaaaaa, x11, 712, x3)

inst_107:
// rs2_w0_val == -268435457, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000ffff7fff;  op2val:0x000020efffffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x400000ffff7fff, 0x000020efffffff, x11, 720, x3)

inst_108:
// rs1_w1_val == 0, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffffeff;  op2val:0x00200000000003
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x000000fffffeff, 0x00200000000003, x11, 728, x3)

inst_109:
// rs1_w0_val == -1431655766, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfaaaaaaaa;  op2val:0x00000000000002
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xffffffbfaaaaaaaa, 0x00000000000002, x11, 736, x3)

inst_110:
// rs2_w0_val == -16777217, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004aaaaaaaa;  op2val:0x000006feffffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x000004aaaaaaaa, 0x000006feffffff, x11, 744, x3)

inst_111:
// rs1_w0_val == 2147483647, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000007fffffff;  op2val:0x000002aaaaaaaa
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x4000007fffffff, 0x000002aaaaaaaa, x11, 752, x3)

inst_112:
// rs2_w0_val == -4194305, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005fffffffb;  op2val:0x020000ffbfffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x000005fffffffb, 0x020000ffbfffff, x11, 760, x3)

inst_113:
// rs1_w0_val == -1073741825, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005bfffffff;  op2val:0x00100000000009
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x000005bfffffff, 0x00100000000009, x11, 768, x3)

inst_114:
// rs2_w0_val == -1048577, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffffffdfff;  op2val:0x004000ffefffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x3fffffffffffdfff, 0x004000ffefffff, x11, 776, x3)

inst_115:
// rs2_w0_val == -524289, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffefffffff;  op2val:0x080000fff7ffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xffffefffefffffff, 0x080000fff7ffff, x11, 784, x3)

inst_116:
// rs1_w0_val == -8388609, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080ff7fffff;  op2val:0x00010000008000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x000080ff7fffff, 0x00010000008000, x11, 792, x3)

inst_117:
// rs2_w0_val == -4097, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00020000;  op2val:0x004000ffffefff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x3fffffff00020000, 0x004000ffffefff, x11, 800, x3)

inst_118:
// rs1_w0_val == -524289, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003fff7ffff;  op2val:0xfbfffffffffdffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x000003fff7ffff, 0xfbfffffffffdffff, x11, 808, x3)

inst_119:
// rs2_w0_val == -513, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcfffffffe;  op2val:0x000004fffffdff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfffffffcfffffffe, 0x000004fffffdff, x11, 816, x3)

inst_120:
// rs2_w0_val == -9, rs1_w0_val == -17
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100ffffffef;  op2val:0xffdffffffffffff7
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x000100ffffffef, 0xffdffffffffffff7, x11, 824, x3)

inst_121:
// rs1_w0_val == -2049, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffff7ff;  op2val:0xfffff7ff00100000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x000003fffff7ff, 0xfffff7ff00100000, x11, 832, x3)

inst_122:
// rs1_w0_val == -1025, rs2_w0_val == -2
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffffbff;  op2val:0x000010fffffffe
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x001000fffffbff, 0x000010fffffffe, x11, 840, x3)

inst_123:
// rs2_w0_val == -3, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00020000;  op2val:0xfffffefffffffffd
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00020000, 0xfffffefffffffffd, x11, 848, x3)

inst_124:
// rs2_w0_val == -2147483648, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000004000;  op2val:0x20000080000000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x00008000004000, 0x20000080000000, x11, 856, x3)

inst_125:
// rs1_w0_val == -129, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffff7f;  op2val:0xffffffdf00008000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xffffdfffffffff7f, 0xffffffdf00008000, x11, 864, x3)

inst_126:
// rs1_w0_val == -65, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffffbf;  op2val:0xffffdfff00000001
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffffbf, 0xffffdfff00000001, x11, 872, x3)

inst_127:
// rs1_w0_val == -3, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8fffffffd;  op2val:0x00200000000005
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfffffff8fffffffd, 0x00200000000005, x11, 880, x3)

inst_128:
// rs1_w0_val == -9, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffffff7;  op2val:0x00000500000100
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x010000fffffff7, 0x00000500000100, x11, 888, x3)

inst_129:
// rs1_w0_val == 1073741824, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555540000000;  op2val:0x000003fdffffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x5555555540000000, 0x000003fdffffff, x11, 896, x3)

inst_130:
// rs2_w0_val == 524288, 
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000005;  op2val:0xffffefff00080000
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000005, 0xffffefff00080000, x11, 904, x3)

inst_131:
// rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val == 256, rs1_w1_val == 2, rs2_w1_val == 32768
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000100;  op2val:0x0080003fffffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x00000200000100, 0x0080003fffffff, x11, 912, x3)

inst_132:
// rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w1_val == -16385, rs2_w0_val == -65
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000007;  op2val:0xffffdfffffffffbf
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000007, 0xffffdfffffffffbf, x11, 920, x3)

inst_133:
// rs2_w1_val == 1431655765, rs2_w0_val == -32769, rs1_w1_val == -257
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000003;  op2val:0x55555555ffff7fff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000003, 0x55555555ffff7fff, x11, 928, x3)

inst_134:
// rs2_w1_val == -1025, rs2_w0_val == -2097153, rs1_w1_val == 16777216
// opcode: rsub32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000080000000;  op2val:0xfffffbffffdfffff
TEST_RR_OP(rsub32, x31, x30, x29, 0x0000000000000000, 0x100000080000000, 0xfffffbffffdfffff, x11, 936, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x11_0:
    .fill 118*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
