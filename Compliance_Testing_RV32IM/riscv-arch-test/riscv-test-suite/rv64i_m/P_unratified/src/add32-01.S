
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the add32 instruction of the RISC-V RV64PZicsr extension for the add32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",add32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x10,signature_x10_1)

inst_0:
// rs1 == rd != rs2, rs1==x6, rs2==x24, rd==x6, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w1_val == -129
// opcode: add32 ; op1:x6; op2:x24; dest:x6; op1val:0xffffff7f80000000;  op2val:0xfffffff8fffffff9
TEST_RR_OP(add32, x6, x6, x24, 0x0000000000000000, 0xffffff7f80000000, 0xfffffff8fffffff9, x10, 0, x12)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x7, rs2==x30, rd==x19, rs1_w1_val == rs2_w1_val, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val == -536870913, rs2_w0_val == 16
// opcode: add32 ; op1:x7; op2:x30; dest:x19; op1val:0xc0000000dfffffff;  op2val:0xc000000000000010
TEST_RR_OP(add32, x19, x7, x30, 0x0000000000000000, 0xc0000000dfffffff, 0xc000000000000010, x10, 8, x12)

inst_2:
// rs1 == rs2 != rd, rs1==x19, rs2==x19, rd==x4, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == 2, rs2_w1_val == 8, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w0_val == -33, rs1_w1_val == -1073741825
// opcode: add32 ; op1:x19; op2:x19; dest:x4; op1val:0xbfffffff00000002;  op2val:0x000008ffffffdf
TEST_RR_OP(add32, x4, x19, x19, 0x0000000000000000, 0xbfffffff00000002, 0x000008ffffffdf, x10, 16, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x31, rs2==x31, rd==x31, rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w0_val == -3, rs1_w0_val == 32, rs1_w1_val == 4, rs2_w1_val == -513
// opcode: add32 ; op1:x31; op2:x31; dest:x31; op1val:0x00000400000020;  op2val:0xfffffdfffffffffd
TEST_RR_OP(add32, x31, x31, x31, 0x0000000000000000, 0x00000400000020, 0xfffffdfffffffffd, x10, 24, x12)

inst_4:
// rs2 == rd != rs1, rs1==x25, rs2==x22, rd==x22, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val == -8193, rs2_w0_val == 16777216, rs2_w1_val == 1024, rs1_w1_val == 131072
// opcode: add32 ; op1:x25; op2:x22; dest:x22; op1val:0x020000ffffdfff;  op2val:0x00040001000000
TEST_RR_OP(add32, x22, x25, x22, 0x0000000000000000, 0x020000ffffdfff, 0x00040001000000, x10, 32, x12)

inst_5:
// rs1==x23, rs2==x5, rd==x15, rs1_w0_val == rs2_w0_val, rs1_w0_val == 0, rs2_w0_val == 0, rs1_w1_val == -257, rs2_w1_val == 256
// opcode: add32 ; op1:x23; op2:x5; dest:x15; op1val:0xfffffeff00000000;  op2val:0x00010000000000
TEST_RR_OP(add32, x15, x23, x5, 0x0000000000000000, 0xfffffeff00000000, 0x00010000000000, x10, 40, x12)

inst_6:
// rs1==x8, rs2==x27, rd==x7, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 1, rs1_w0_val == 2147483647, rs1_w1_val == -8388609
// opcode: add32 ; op1:x8; op2:x27; dest:x7; op1val:0xff7fffff7fffffff;  op2val:0xfffffdff00000001
TEST_RR_OP(add32, x7, x8, x27, 0x0000000000000000, 0xff7fffff7fffffff, 0xfffffdff00000001, x10, 48, x12)

inst_7:
// rs1==x28, rs2==x29, rd==x25, rs2_w1_val == -1431655766, rs2_w0_val == 67108864, rs1_w0_val == 16384, rs1_w1_val == -4194305
// opcode: add32 ; op1:x28; op2:x29; dest:x25; op1val:0xffbfffff00004000;  op2val:0xaaaaaaaa04000000
TEST_RR_OP(add32, x25, x28, x29, 0x0000000000000000, 0xffbfffff00004000, 0xaaaaaaaa04000000, x10, 56, x12)

inst_8:
// rs1==x27, rs2==x17, rd==x11, rs2_w1_val == 1431655765, rs1_w1_val == 16384
// opcode: add32 ; op1:x27; op2:x17; dest:x11; op1val:0x004000dfffffff;  op2val:0x5555555500000010
TEST_RR_OP(add32, x11, x27, x17, 0x0000000000000000, 0x004000dfffffff, 0x5555555500000010, x10, 64, x12)

inst_9:
// rs1==x16, rs2==x26, rd==x0, rs2_w1_val == 2147483647, rs1_w0_val == -16777217, rs2_w0_val == 4096, rs1_w1_val == 8388608
// opcode: add32 ; op1:x16; op2:x26; dest:x0; op1val:0x800000feffffff;  op2val:0x7fffffff00001000
TEST_RR_OP(add32, x0, x16, x26, 0x0000000000000000, 0x800000feffffff, 0x7fffffff00001000, x10, 72, x12)

inst_10:
// rs1==x3, rs2==x13, rd==x9, rs2_w1_val == -1073741825, rs1_w0_val == 32768, rs2_w0_val == -1, rs1_w1_val == 1431655765
// opcode: add32 ; op1:x3; op2:x13; dest:x9; op1val:0x5555555500008000;  op2val:0xbfffffffffffffff
TEST_RR_OP(add32, x9, x3, x13, 0x0000000000000000, 0x5555555500008000, 0xbfffffffffffffff, x10, 80, x12)

inst_11:
// rs1==x17, rs2==x2, rd==x28, rs2_w1_val == -536870913, rs2_w0_val == 8192, rs1_w1_val == -131073
// opcode: add32 ; op1:x17; op2:x2; dest:x28; op1val:0xfffdffff7fffffff;  op2val:0xdfffffff00002000
TEST_RR_OP(add32, x28, x17, x2, 0x0000000000000000, 0xfffdffff7fffffff, 0xdfffffff00002000, x10, 88, x12)

inst_12:
// rs1==x14, rs2==x8, rd==x1, rs2_w1_val == -268435457, rs1_w0_val == 65536, rs2_w0_val == 536870912
// opcode: add32 ; op1:x14; op2:x8; dest:x1; op1val:0x00000700010000;  op2val:0xefffffff20000000
TEST_RR_OP(add32, x1, x14, x8, 0x0000000000000000, 0x00000700010000, 0xefffffff20000000, x10, 96, x12)

inst_13:
// rs1==x20, rs2==x14, rd==x26, rs2_w1_val == -134217729, rs2_w0_val == 65536, rs1_w1_val == -262145
// opcode: add32 ; op1:x20; op2:x14; dest:x26; op1val:0xfffbffff00000007;  op2val:0xf7ffffff00010000
TEST_RR_OP(add32, x26, x20, x14, 0x0000000000000000, 0xfffbffff00000007, 0xf7ffffff00010000, x10, 104, x19)
RVTEST_SIGBASE(x17,signature_x17_0)

inst_14:
// rs1==x18, rs2==x9, rd==x10, rs2_w1_val == -67108865, rs1_w1_val == 1048576, rs2_w0_val == -1073741825
// opcode: add32 ; op1:x18; op2:x9; dest:x10; op1val:0x100000feffffff;  op2val:0xfbffffffbfffffff
TEST_RR_OP(add32, x10, x18, x9, 0x0000000000000000, 0x100000feffffff, 0xfbffffffbfffffff, x17, 0, x19)

inst_15:
// rs1==x11, rs2==x6, rd==x3, rs2_w1_val == -33554433, rs2_w0_val == 4194304, rs1_w0_val == 8192
// opcode: add32 ; op1:x11; op2:x6; dest:x3; op1val:0x80000000002000;  op2val:0xfdffffff00400000
TEST_RR_OP(add32, x3, x11, x6, 0x0000000000000000, 0x80000000002000, 0xfdffffff00400000, x17, 8, x19)

inst_16:
// rs1==x21, rs2==x4, rd==x30, rs2_w1_val == -16777217, rs2_w0_val == -32769, rs1_w0_val == -524289
// opcode: add32 ; op1:x21; op2:x4; dest:x30; op1val:0xfffffffafff7ffff;  op2val:0xfeffffffffff7fff
TEST_RR_OP(add32, x30, x21, x4, 0x0000000000000000, 0xfffffffafff7ffff, 0xfeffffffffff7fff, x17, 16, x19)

inst_17:
// rs1==x30, rs2==x20, rd==x29, rs2_w1_val == -8388609, rs1_w1_val == -268435457, rs1_w0_val == 128, rs2_w0_val == -8193
// opcode: add32 ; op1:x30; op2:x20; dest:x29; op1val:0xefffffff00000080;  op2val:0xff7fffffffffdfff
TEST_RR_OP(add32, x29, x30, x20, 0x0000000000000000, 0xefffffff00000080, 0xff7fffffffffdfff, x17, 24, x19)

inst_18:
// rs1==x9, rs2==x3, rd==x21, rs2_w1_val == -4194305, 
// opcode: add32 ; op1:x9; op2:x3; dest:x21; op1val:0xfffbffff7fffffff;  op2val:0xffbfffff00000003
TEST_RR_OP(add32, x21, x9, x3, 0x0000000000000000, 0xfffbffff7fffffff, 0xffbfffff00000003, x17, 32, x19)

inst_19:
// rs1==x2, rs2==x7, rd==x23, rs2_w1_val == -2097153, rs1_w1_val == -1, rs2_w0_val == -536870913, rs1_w0_val == -9
// opcode: add32 ; op1:x2; op2:x7; dest:x23; op1val:0xfffffffffffffff7;  op2val:0xffdfffffdfffffff
TEST_RR_OP(add32, x23, x2, x7, 0x0000000000000000, 0xfffffffffffffff7, 0xffdfffffdfffffff, x17, 40, x19)

inst_20:
// rs1==x22, rs2==x18, rd==x20, rs2_w1_val == -1048577, rs2_w0_val == -257, rs1_w1_val == 1024
// opcode: add32 ; op1:x22; op2:x18; dest:x20; op1val:0x000400fffffffa;  op2val:0xffeffffffffffeff
TEST_RR_OP(add32, x20, x22, x18, 0x0000000000000000, 0x000400fffffffa, 0xffeffffffffffeff, x17, 48, x19)

inst_21:
// rs1==x26, rs2==x1, rd==x12, rs2_w1_val == -524289, rs1_w0_val == 1431655765, rs2_w0_val == 1048576, rs1_w1_val == -2147483648
// opcode: add32 ; op1:x26; op2:x1; dest:x12; op1val:0x8000000055555555;  op2val:0xfff7ffff00100000
TEST_RR_OP(add32, x12, x26, x1, 0x0000000000000000, 0x8000000055555555, 0xfff7ffff00100000, x17, 56, x19)

inst_22:
// rs1==x5, rs2==x16, rd==x2, rs2_w1_val == -262145, rs1_w0_val == -65537, rs1_w1_val == -513, rs2_w0_val == 134217728
// opcode: add32 ; op1:x5; op2:x16; dest:x2; op1val:0xfffffdfffffeffff;  op2val:0xfffbffff08000000
TEST_RR_OP(add32, x2, x5, x16, 0x0000000000000000, 0xfffffdfffffeffff, 0xfffbffff08000000, x17, 64, x19)

inst_23:
// rs1==x12, rs2==x15, rd==x27, rs2_w1_val == -131073, rs2_w0_val == -67108865, rs1_w1_val == 2048, rs1_w0_val == -33
// opcode: add32 ; op1:x12; op2:x15; dest:x27; op1val:0x000800ffffffdf;  op2val:0xfffdfffffbffffff
TEST_RR_OP(add32, x27, x12, x15, 0x0000000000000000, 0x000800ffffffdf, 0xfffdfffffbffffff, x17, 72, x19)

inst_24:
// rs1==x4, rs2==x25, rd==x14, rs2_w1_val == -65537, rs1_w1_val == -2097153, rs1_w0_val == 256
// opcode: add32 ; op1:x4; op2:x25; dest:x14; op1val:0xffdfffff00000100;  op2val:0xfffeffff20000000
TEST_RR_OP(add32, x14, x4, x25, 0x0000000000000000, 0xffdfffff00000100, 0xfffeffff20000000, x17, 80, x19)

inst_25:
// rs1==x15, rs2==x23, rd==x16, rs2_w1_val == -32769, rs1_w1_val == -17, rs1_w0_val == 67108864
// opcode: add32 ; op1:x15; op2:x23; dest:x16; op1val:0xffffffef04000000;  op2val:0xffff7fff00000010
TEST_RR_OP(add32, x16, x15, x23, 0x0000000000000000, 0xffffffef04000000, 0xffff7fff00000010, x17, 88, x19)

inst_26:
// rs1==x13, rs2==x10, rd==x8, rs2_w1_val == -16385, rs1_w1_val == 32, rs2_w0_val == -8388609
// opcode: add32 ; op1:x13; op2:x10; dest:x8; op1val:0x000020fffffff6;  op2val:0xffffbfffff7fffff
TEST_RR_OP(add32, x8, x13, x10, 0x0000000000000000, 0x000020fffffff6, 0xffffbfffff7fffff, x17, 96, x19)

inst_27:
// rs1==x1, rs2==x28, rd==x13, rs2_w1_val == -8193, 
// opcode: add32 ; op1:x1; op2:x28; dest:x13; op1val:0xffdfffff80000000;  op2val:0xffffdfff00010000
TEST_RR_OP(add32, x13, x1, x28, 0x0000000000000000, 0xffdfffff80000000, 0xffffdfff00010000, x17, 104, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_28:
// rs1==x10, rs2==x11, rd==x5, rs2_w1_val == -4097, rs2_w0_val == 262144, rs1_w1_val == -67108865
// opcode: add32 ; op1:x10; op2:x11; dest:x5; op1val:0xfbffffff00000020;  op2val:0xffffefff00040000
TEST_RR_OP(add32, x5, x10, x11, 0x0000000000000000, 0xfbffffff00000020, 0xffffefff00040000, x1, 0, x2)

inst_29:
// rs1==x24, rs2==x12, rd==x17, rs2_w1_val == -2049, rs1_w0_val == 268435456
// opcode: add32 ; op1:x24; op2:x12; dest:x17; op1val:0x00000310000000;  op2val:0xfffff7ffffffffdf
TEST_RR_OP(add32, x17, x24, x12, 0x0000000000000000, 0x00000310000000, 0xfffff7ffffffffdf, x1, 8, x2)

inst_30:
// rs1==x0, rs2==x21, rd==x24, rs2_w1_val == -1025, rs1_w1_val == 8192
// opcode: add32 ; op1:x0; op2:x21; dest:x24; op1val:0x0020007fffffff;  op2val:0xfffffbffffffffdf
TEST_RR_OP(add32, x24, x0, x21, 0x0000000000000000, 0x0020007fffffff, 0xfffffbffffffffdf, x1, 16, x2)

inst_31:
// rs1==x29, rs2==x0, rd==x18, rs2_w1_val == -257, rs2_w0_val == 131072, rs1_w1_val == 4096, rs1_w0_val == -1431655766
// opcode: add32 ; op1:x29; op2:x0; dest:x18; op1val:0x001000aaaaaaaa;  op2val:0xfffffeff00020000
TEST_RR_OP(add32, x18, x29, x0, 0x0000000000000000, 0x001000aaaaaaaa, 0xfffffeff00020000, x1, 24, x2)

inst_32:
// rs2_w1_val == -129, rs1_w0_val == -2097153, rs2_w0_val == -2049
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffdfffff;  op2val:0xffffff7ffffff7ff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x80000000ffdfffff, 0xffffff7ffffff7ff, x1, 32, x2)

inst_33:
// rs2_w1_val == -65, rs1_w0_val == -268435457
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6efffffff;  op2val:0xffffffbf00010000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfffffff6efffffff, 0xffffffbf00010000, x1, 40, x2)

inst_34:
// rs2_w1_val == -33, rs1_w0_val == 1, rs2_w0_val == 8
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000001;  op2val:0xffffffdf00000008
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xc000000000000001, 0xffffffdf00000008, x1, 48, x2)

inst_35:
// rs2_w1_val == -17, rs2_w0_val == -513
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fff7ffff;  op2val:0xffffffeffffffdff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x000020fff7ffff, 0xffffffeffffffdff, x1, 56, x2)

inst_36:
// rs2_w1_val == -9, rs1_w0_val == -4097, rs2_w0_val == 524288
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffefff;  op2val:0xfffffff700080000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffefff, 0xfffffff700080000, x1, 64, x2)

inst_37:
// rs2_w1_val == -5, rs1_w0_val == 512, rs2_w0_val == 2097152
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000200;  op2val:0xfffffffb00200000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x00000900000200, 0xfffffffb00200000, x1, 72, x2)

inst_38:
// rs2_w1_val == -3, rs2_w0_val == 512
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff55555555;  op2val:0xfffffffd00000200
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfffffdff55555555, 0xfffffffd00000200, x1, 80, x2)

inst_39:
// rs2_w1_val == -2, rs1_w1_val == 1
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000180000000;  op2val:0xfffffffe00000007
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x00000180000000, 0xfffffffe00000007, x1, 88, x2)

inst_40:
// rs2_w1_val == -2147483648, rs1_w0_val == -1025, rs1_w1_val == -1431655766
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffffbff;  op2val:0x80000000fffffdff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffffbff, 0x80000000fffffdff, x1, 96, x2)

inst_41:
// rs2_w1_val == 1073741824, rs2_w0_val == 32, rs1_w1_val == -3
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffffdfff;  op2val:0x4000000000000020
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfffffffdffffdfff, 0x4000000000000020, x1, 104, x2)

inst_42:
// rs2_w1_val == 536870912, rs2_w0_val == -2, rs1_w0_val == -134217729
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400f7ffffff;  op2val:0x20000000fffffffe
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x000400f7ffffff, 0x20000000fffffffe, x1, 112, x2)

inst_43:
// rs2_w1_val == 268435456, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000300000007;  op2val:0x10000000ffffffdf
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x00000300000007, 0x10000000ffffffdf, x1, 120, x2)

inst_44:
// rs2_w1_val == 134217728, rs1_w1_val == 524288, rs2_w0_val == -268435457, rs1_w0_val == 524288
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000080000;  op2val:0x8000000efffffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x08000000080000, 0x8000000efffffff, x1, 128, x2)

inst_45:
// rs2_w1_val == 67108864, rs2_w0_val == -4097
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9f7ffffff;  op2val:0x4000000ffffefff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfffffff9f7ffffff, 0x4000000ffffefff, x1, 136, x2)

inst_46:
// rs2_w1_val == 33554432, rs2_w0_val == -129
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000200;  op2val:0x2000000ffffff7f
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000200, 0x2000000ffffff7f, x1, 144, x2)

inst_47:
// rs2_w1_val == 16777216, rs2_w0_val == -33554433, rs1_w0_val == 1048576
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000100000;  op2val:0x1000000fdffffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xc000000000100000, 0x1000000fdffffff, x1, 152, x2)

inst_48:
// rs2_w1_val == 8388608, rs1_w0_val == -1073741825
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800bfffffff;  op2val:0x800000fffffffa
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x000800bfffffff, 0x800000fffffffa, x1, 160, x2)

inst_49:
// rs2_w1_val == 4194304, rs1_w0_val == 64, rs1_w1_val == 128
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000000040;  op2val:0x400000fffffffa
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x00008000000040, 0x400000fffffffa, x1, 168, x2)

inst_50:
// rs2_w1_val == 2097152, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000000;  op2val:0x20000004000000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x00000100000000, 0x20000004000000, x1, 176, x2)

inst_51:
// rs1_w0_val == 33554432, rs1_w1_val == -134217729
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff02000000;  op2val:0x7fffffff00100000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff02000000, 0x7fffffff00100000, x1, 184, x2)

inst_52:
// rs1_w0_val == 16777216, rs1_w1_val == -2
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe01000000;  op2val:0xffdffffffffffffe
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfffffffe01000000, 0xffdffffffffffffe, x1, 192, x2)

inst_53:
// rs1_w0_val == 8388608, rs1_w1_val == -536870913
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00800000;  op2val:0xeffffffffffffeff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00800000, 0xeffffffffffffeff, x1, 200, x2)

inst_54:
// rs1_w0_val == 4194304, rs1_w1_val == -9
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700400000;  op2val:0xffbfffff00100000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfffffff700400000, 0xffbfffff00100000, x1, 208, x2)

inst_55:
// rs1_w0_val == 2097152, rs1_w1_val == -32769, rs2_w0_val == 268435456, rs2_w1_val == 32768
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00200000;  op2val:0x00800010000000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00200000, 0x00800010000000, x1, 216, x2)

inst_56:
// rs1_w0_val == 262144, rs2_w0_val == -262145, rs1_w1_val == -65
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00040000;  op2val:0x7ffffffffffbffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00040000, 0x7ffffffffffbffff, x1, 224, x2)

inst_57:
// rs1_w0_val == 131072, rs2_w0_val == 32768, rs1_w1_val == -2049
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00020000;  op2val:0xffdfffff00008000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00020000, 0xffdfffff00008000, x1, 232, x2)

inst_58:
// rs1_w0_val == 4096, rs1_w1_val == 256
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000001000;  op2val:0x100000000000008
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x00010000001000, 0x100000000000008, x1, 240, x2)

inst_59:
// rs1_w0_val == 2048, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000800;  op2val:0xdfffffff00008000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000800, 0xdfffffff00008000, x1, 248, x2)

inst_60:
// rs1_w0_val == 1024, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000400;  op2val:0xfffffffc00000010
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000400, 0xfffffffc00000010, x1, 256, x2)

inst_61:
// rs1_w0_val == 16, rs1_w1_val == 32768, rs2_w0_val == -524289
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000010;  op2val:0xfffffff8fff7ffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x00800000000010, 0xfffffff8fff7ffff, x1, 264, x2)

inst_62:
// rs1_w0_val == 8, rs2_w0_val == 1024, rs1_w1_val == 2
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000008;  op2val:0xffffefff00000400
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x00000200000008, 0xffffefff00000400, x1, 272, x2)

inst_63:
// rs1_w0_val == 4, rs2_w0_val == 4, rs1_w1_val == -16385
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000004;  op2val:0xffdfffff00000004
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000004, 0xffdfffff00000004, x1, 280, x2)

inst_64:
// rs1_w0_val == -1, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffffff;  op2val:0xff7fffff00200000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffffff, 0xff7fffff00200000, x1, 288, x2)

inst_65:
// rs2_w1_val == 1048576, rs1_w1_val == 268435456
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000800000;  op2val:0x100000dfffffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x1000000000800000, 0x100000dfffffff, x1, 296, x2)

inst_66:
// rs2_w1_val == 524288, rs1_w0_val == -131073
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffdffff;  op2val:0x080000dfffffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xffffbffffffdffff, 0x080000dfffffff, x1, 304, x2)

inst_67:
// rs2_w1_val == 262144, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffeffff;  op2val:0x040000ffffefff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xffffffbffffeffff, 0x040000ffffefff, x1, 312, x2)

inst_68:
// rs2_w1_val == 131072, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007fff7ffff;  op2val:0x02000000080000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x000007fff7ffff, 0x02000000080000, x1, 320, x2)

inst_69:
// rs2_w1_val == 65536, rs1_w1_val == 536870912, rs2_w0_val == -1048577
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000004;  op2val:0x010000ffefffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x2000000000000004, 0x010000ffefffff, x1, 328, x2)

inst_70:
// rs2_w1_val == 16384, rs1_w1_val == -33554433, rs1_w0_val == 134217728
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff08000000;  op2val:0x004000fbffffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfdffffff08000000, 0x004000fbffffff, x1, 336, x2)

inst_71:
// rs2_w1_val == 8192, rs1_w0_val == -3
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffffffd;  op2val:0x002000ffffdfff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x000020fffffffd, 0x002000ffffdfff, x1, 344, x2)

inst_72:
// rs2_w1_val == 4096, rs1_w1_val == 134217728
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000200000;  op2val:0x001000fff7ffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x800000000200000, 0x001000fff7ffff, x1, 352, x2)

inst_73:
// rs2_w1_val == 2048, rs1_w1_val == 8, rs1_w0_val == -129
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffffff7f;  op2val:0x00080000000004
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x000008ffffff7f, 0x00080000000004, x1, 360, x2)

inst_74:
// rs2_w1_val == 512, rs1_w0_val == -2049
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffff7ff;  op2val:0x00020000008000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffff7ff, 0x00020000008000, x1, 368, x2)

inst_75:
// rs2_w1_val == 128, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600200000;  op2val:0x00008001000000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x00000600200000, 0x00008001000000, x1, 376, x2)

inst_76:
// rs2_w1_val == 64, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff55555555;  op2val:0x000040ff7fffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xffff7fff55555555, 0x000040ff7fffff, x1, 384, x2)

inst_77:
// rs2_w1_val == 32, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000007;  op2val:0x000020fffffff9
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000007, 0x000020fffffff9, x1, 392, x2)

inst_78:
// rs2_w1_val == 16, rs2_w0_val == -16385
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000002;  op2val:0x000010ffffbfff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x00100000000002, 0x000010ffffbfff, x1, 400, x2)

inst_79:
// rs2_w1_val == 4, rs1_w1_val == 16
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000010000;  op2val:0x00000400000200
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x00001000010000, 0x00000400000200, x1, 408, x2)

inst_80:
// rs2_w1_val == 2, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff3fffffff;  op2val:0x00000200000003
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xffbfffff3fffffff, 0x00000200000003, x1, 416, x2)

inst_81:
// rs2_w1_val == 1, rs2_w0_val == -65
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffaaaaaaaa;  op2val:0x000001ffffffbf
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x3fffffffaaaaaaaa, 0x000001ffffffbf, x1, 424, x2)

inst_82:
// rs2_w0_val == 16384, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000020;  op2val:0xffffbfff00004000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x02000000000020, 0xffffbfff00004000, x1, 432, x2)

inst_83:
// rs2_w0_val == 2048, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000400;  op2val:0x00000400000800
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x00000700000400, 0x00000400000800, x1, 440, x2)

inst_84:
// rs2_w0_val == 256, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000608000000;  op2val:0x800000000000100
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x00000608000000, 0x800000000000100, x1, 448, x2)

inst_85:
// rs2_w0_val == 128, rs1_w1_val == 1073741824, rs1_w0_val == -67108865
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fbffffff;  op2val:0x00000500000080
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x40000000fbffffff, 0x00000500000080, x1, 456, x2)

inst_86:
// rs2_w0_val == 64, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000bfffffff;  op2val:0x02000000000040
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x080000bfffffff, 0x02000000000040, x1, 464, x2)

inst_87:
// rs2_w0_val == 2, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9f7ffffff;  op2val:0xbfffffff00000002
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfffffff9f7ffffff, 0xbfffffff00000002, x1, 472, x2)

inst_88:
// rs1_w1_val == 2147483647, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000000;  op2val:0x001000ffffffdf
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000000, 0x001000ffffffdf, x1, 480, x2)

inst_89:
// rs1_w1_val == -16777217, rs2_w0_val == -4194305
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff01000000;  op2val:0x000200ffbfffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfeffffff01000000, 0x000200ffbfffff, x1, 488, x2)

inst_90:
// rs1_w1_val == -1048577, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffffc;  op2val:0x00020000000020
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffffc, 0x00020000000020, x1, 496, x2)

inst_91:
// rs1_w1_val == -524289, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffffffa;  op2val:0x00000300000006
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffffffa, 0x00000300000006, x1, 504, x2)

inst_92:
// rs1_w1_val == -65537, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffffffff9;  op2val:0xfffff7ff00000009
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfffefffffffffff9, 0xfffff7ff00000009, x1, 512, x2)

inst_93:
// rs1_w1_val == -8193, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000400;  op2val:0x00100000008000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000400, 0x00100000008000, x1, 520, x2)

inst_94:
// rs1_w1_val == -4097, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000003;  op2val:0xffffff7f00001000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xffffefff00000003, 0xffffff7f00001000, x1, 528, x2)

inst_95:
// rs1_w1_val == -1025, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000020;  op2val:0x000040fffffffc
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000020, 0x000040fffffffc, x1, 536, x2)

inst_96:
// rs1_w1_val == -33, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00010000;  op2val:0x400000fffffffc
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00010000, 0x400000fffffffc, x1, 544, x2)

inst_97:
// rs1_w1_val == -5, rs1_w0_val == -5
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffffffb;  op2val:0x2000000fff7ffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffffffb, 0x2000000fff7ffff, x1, 552, x2)

inst_98:
// rs1_w1_val == 67108864, rs2_w0_val == -1025
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000ffffff7f;  op2val:0xfffffdfffffffbff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x4000000ffffff7f, 0xfffffdfffffffbff, x1, 560, x2)

inst_99:
// rs1_w1_val == 33554432, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffffff7;  op2val:0xbfffffff00400000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x2000000fffffff7, 0xbfffffff00400000, x1, 568, x2)

inst_100:
// rs1_w1_val == 16777216, rs1_w0_val == -257
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffeff;  op2val:0x00000900200000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x1000000fffffeff, 0x00000900200000, x1, 576, x2)

inst_101:
// rs1_w1_val == 4194304, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffff8;  op2val:0xfffbfffffffffffc
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x400000fffffff8, 0xfffbfffffffffffc, x1, 584, x2)

inst_102:
// rs1_w1_val == 2097152, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000400;  op2val:0x00020000040000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x20000000000400, 0x00020000040000, x1, 592, x2)

inst_103:
// rs1_w1_val == 262144, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000001;  op2val:0x00004000000200
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x04000000000001, 0x00004000000200, x1, 600, x2)

inst_104:
// rs1_w1_val == 65536, rs1_w0_val == -262145
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffbffff;  op2val:0x004000dfffffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x010000fffbffff, 0x004000dfffffff, x1, 608, x2)

inst_105:
// rs1_w1_val == 512, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000006;  op2val:0xfffffff8c0000000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x00020000000006, 0xfffffff8c0000000, x1, 616, x2)

inst_106:
// rs2_w1_val == 0, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff04000000;  op2val:0x00000000000008
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xff7fffff04000000, 0x00000000000008, x1, 624, x2)

inst_107:
// rs2_w1_val == -1, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00080000;  op2val:0xfffffffffff7ffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00080000, 0xfffffffffff7ffff, x1, 632, x2)

inst_108:
// rs1_w1_val == 64, rs1_w0_val == -16385
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffffbfff;  op2val:0x40000000ffffff7f
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x000040ffffbfff, 0x40000000ffffff7f, x1, 640, x2)

inst_109:
// rs2_w0_val == -1431655766, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffeff;  op2val:0xfffeffffaaaaaaaa
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x1000000fffffeff, 0xfffeffffaaaaaaaa, x1, 648, x2)

inst_110:
// rs2_w0_val == 1431655765, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000400;  op2val:0x00001055555555
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfffffff800000400, 0x00001055555555, x1, 656, x2)

inst_111:
// rs2_w0_val == 2147483647, rs1_w0_val == -33554433
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafdffffff;  op2val:0xff7fffff7fffffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafdffffff, 0xff7fffff7fffffff, x1, 664, x2)

inst_112:
// rs2_w0_val == -134217729, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000001;  op2val:0x80000000f7ffffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000001, 0x80000000f7ffffff, x1, 672, x2)

inst_113:
// rs1_w1_val == 0, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000ffffffff;  op2val:0xfffffff820000000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x000000ffffffff, 0xfffffff820000000, x1, 680, x2)

inst_114:
// rs2_w0_val == -16777217, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000008;  op2val:0x7ffffffffeffffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x5555555500000008, 0x7ffffffffeffffff, x1, 688, x2)

inst_115:
// rs2_w0_val == -2097153, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffd;  op2val:0x000005ffdfffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffffd, 0x000005ffdfffff, x1, 696, x2)

inst_116:
// rs2_w0_val == -131073, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00040000;  op2val:0xfffffffafffdffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00040000, 0xfffffffafffdffff, x1, 704, x2)

inst_117:
// rs2_w0_val == -65537, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000004000000;  op2val:0x7ffffffffffeffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x100000004000000, 0x7ffffffffffeffff, x1, 712, x2)

inst_118:
// rs1_w0_val == -8388609, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000ff7fffff;  op2val:0x000006fffdffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x2000000ff7fffff, 0x000006fffdffff, x1, 720, x2)

inst_119:
// rs1_w0_val == -4194305, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8ffbfffff;  op2val:0x01000000400000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfffffff8ffbfffff, 0x01000000400000, x1, 728, x2)

inst_120:
// rs1_w0_val == -1048577, rs2_w0_val == -9
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffefffff;  op2val:0x000002fffffff7
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfffeffffffefffff, 0x000002fffffff7, x1, 736, x2)

inst_121:
// rs1_w0_val == -32769, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000ffff7fff;  op2val:0x000007fffffff7
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x040000ffff7fff, 0x000007fffffff7, x1, 744, x2)

inst_122:
// rs2_w0_val == -17, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000100;  op2val:0xc0000000ffffffef
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x400000000000100, 0xc0000000ffffffef, x1, 752, x2)

inst_123:
// rs2_w0_val == 8388608, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002ffffbfff;  op2val:0x200000000800000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x000002ffffbfff, 0x200000000800000, x1, 760, x2)

inst_124:
// rs2_w0_val == -5, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000100000;  op2val:0x000020fffffffb
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x00100000100000, 0x000020fffffffb, x1, 768, x2)

inst_125:
// rs1_w0_val == -513, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffffdff;  op2val:0x004000fffffff6
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x000800fffffdff, 0x004000fffffff6, x1, 776, x2)

inst_126:
// rs2_w0_val == -2147483648, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffffd;  op2val:0x00004080000000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x080000fffffffd, 0x00004080000000, x1, 784, x2)

inst_127:
// rs2_w0_val == 1073741824, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000001000;  op2val:0xffffdfff40000000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x02000000001000, 0xffffdfff40000000, x1, 792, x2)

inst_128:
// rs1_w0_val == -65, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006ffffffbf;  op2val:0x000006f7ffffff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x000006ffffffbf, 0x000006f7ffffff, x1, 800, x2)

inst_129:
// rs1_w0_val == -17, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffffffef;  op2val:0xffffff7f01000000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x010000ffffffef, 0xffffff7f01000000, x1, 808, x2)

inst_130:
// rs2_w0_val == 33554432, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffff6;  op2val:0x04000002000000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfefffffffffffff6, 0x04000002000000, x1, 816, x2)

inst_131:
// rs1_w0_val == -2, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffffe;  op2val:0xfffff7fffffffeff
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xfefffffffffffffe, 0xfffff7fffffffeff, x1, 824, x2)

inst_132:
// rs1_w0_val == 1073741824, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100040000000;  op2val:0xfffeffff00000005
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x00100040000000, 0xfffeffff00000005, x1, 832, x2)

inst_133:
// rs1_w0_val == 536870912, 
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080020000000;  op2val:0xffffffef00200000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x00080020000000, 0xffffffef00200000, x1, 840, x2)

inst_134:
// rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == 2, rs2_w1_val == 8, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w0_val == -33, rs1_w1_val == -1073741825
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000002;  op2val:0x000008ffffffdf
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000002, 0x000008ffffffdf, x1, 848, x2)

inst_135:
// rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w0_val == -3, rs1_w0_val == 32, rs1_w1_val == 4, rs2_w1_val == -513
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000020;  op2val:0xfffffdfffffffffd
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x00000400000020, 0xfffffdfffffffffd, x1, 856, x2)

inst_136:
// rs2_w1_val == -1025, rs1_w1_val == 8192
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x0020007fffffff;  op2val:0xfffffbffffffffdf
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x0020007fffffff, 0xfffffbffffffffdf, x1, 864, x2)

inst_137:
// rs2_w1_val == -257, rs2_w0_val == 131072, rs1_w1_val == 4096, rs1_w0_val == -1431655766
// opcode: add32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000aaaaaaaa;  op2val:0xfffffeff00020000
TEST_RR_OP(add32, x31, x30, x29, 0x0000000000000000, 0x001000aaaaaaaa, 0xfffffeff00020000, x1, 872, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x17_0:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 110*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
