
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uksubw instruction of the RISC-V RV64PZicsr extension for the uksubw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uksubw)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x19,signature_x19_1)

inst_0:
// rs1 == rd != rs2, rs1==x16, rs2==x21, rd==x16, rs1_w0_val == 0, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w0_val == 4294934527, rs1_w1_val == 33554432
// opcode: uksubw ; op1:x16; op2:x21; dest:x16; op1val:0x200000000000000;  op2val:0x00000cffff7fff
TEST_PKRR_OP(uksubw, x16, x16, x21, 0x0000000000000000, 0x200000000000000, 0x00000cffff7fff, x16, x19, 0, x11)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x7, rs2==x1, rd==x17, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 4294959103, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 4294950911, rs2_w0_val == 1431655765, rs2_w1_val == 4294959103
// opcode: uksubw ; op1:x7; op2:x1; dest:x17; op1val:0xffffdfffffffbfff;  op2val:0xffffdfff55555555
TEST_PKRR_OP(uksubw, x17, x7, x1, 0x0000000000000000, 0xffffdfffffffbfff, 0xffffdfff55555555, x7, x19, 16, x11)

inst_2:
// rs1 == rs2 != rd, rs1==x22, rs2==x22, rd==x6, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 4294934527, rs1_w1_val == 16777216, rs2_w1_val == 4294934527
// opcode: uksubw ; op1:x22; op2:x22; dest:x6; op1val:0x1000000ffff7fff;  op2val:0xffff7fffffff7fff
TEST_PKRR_OP(uksubw, x6, x22, x22, 0x0000000000000000, 0x1000000ffff7fff, 0xffff7fffffff7fff, x22, x19, 32, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x12, rs2==x12, rd==x12, rs2_w1_val == 2863311530, rs1_w1_val == 1073741824
// opcode: uksubw ; op1:x12; op2:x12; dest:x12; op1val:0x40000000ffffbfff;  op2val:0xaaaaaaaa00000012
TEST_PKRR_OP(uksubw, x12, x12, x12, 0x0000000000000000, 0x40000000ffffbfff, 0xaaaaaaaa00000012, x12, x19, 48, x11)

inst_4:
// rs2 == rd != rs1, rs1==x14, rs2==x7, rd==x7, rs2_w1_val == 1431655765, rs1_w1_val == 8192, rs1_w0_val == 4294967039, rs2_w0_val == 4194304
// opcode: uksubw ; op1:x14; op2:x7; dest:x7; op1val:0x002000fffffeff;  op2val:0x5555555500400000
TEST_PKRR_OP(uksubw, x7, x14, x7, 0x0000000000000000, 0x002000fffffeff, 0x5555555500400000, x14, x19, 64, x11)

inst_5:
// rs1==x24, rs2==x6, rd==x27, rs2_w1_val == 2147483647, rs1_w0_val == 4294705151, rs1_w1_val == 1, rs2_w0_val == 4293918719
// opcode: uksubw ; op1:x24; op2:x6; dest:x27; op1val:0x000001fffbffff;  op2val:0x7fffffffffefffff
TEST_PKRR_OP(uksubw, x27, x24, x6, 0x0000000000000000, 0x000001fffbffff, 0x7fffffffffefffff, x24, x19, 80, x11)

inst_6:
// rs1==x13, rs2==x2, rd==x8, rs2_w1_val == 3221225471, rs1_w0_val == 4096
// opcode: uksubw ; op1:x13; op2:x2; dest:x8; op1val:0x00000100001000;  op2val:0xbfffffff0000000b
TEST_PKRR_OP(uksubw, x8, x13, x2, 0x0000000000000000, 0x00000100001000, 0xbfffffff0000000b, x13, x19, 96, x11)

inst_7:
// rs1==x4, rs2==x14, rd==x25, rs2_w1_val == 3758096383, rs2_w0_val == 4294967167, rs1_w0_val == 4294963199
// opcode: uksubw ; op1:x4; op2:x14; dest:x25; op1val:0xffffdfffffffefff;  op2val:0xdfffffffffffff7f
TEST_PKRR_OP(uksubw, x25, x4, x14, 0x0000000000000000, 0xffffdfffffffefff, 0xdfffffffffffff7f, x4, x19, 112, x11)

inst_8:
// rs1==x21, rs2==x27, rd==x29, rs2_w1_val == 4026531839, rs1_w0_val == 4294901759, rs1_w1_val == 4294967293, rs2_w0_val == 8
// opcode: uksubw ; op1:x21; op2:x27; dest:x29; op1val:0xfffffffdfffeffff;  op2val:0xefffffff00000008
TEST_PKRR_OP(uksubw, x29, x21, x27, 0x0000000000000000, 0xfffffffdfffeffff, 0xefffffff00000008, x21, x19, 128, x11)

inst_9:
// rs1==x1, rs2==x10, rd==x4, rs2_w1_val == 4160749567, rs1_w0_val == 32768, rs2_w0_val == 4294950911, rs1_w1_val == 2863311530
// opcode: uksubw ; op1:x1; op2:x10; dest:x4; op1val:0xaaaaaaaa00008000;  op2val:0xf7ffffffffffbfff
TEST_PKRR_OP(uksubw, x4, x1, x10, 0x0000000000000000, 0xaaaaaaaa00008000, 0xf7ffffffffffbfff, x1, x19, 144, x11)

inst_10:
// rs1==x30, rs2==x9, rd==x10, rs2_w1_val == 4227858431, rs2_w0_val == 2863311530, rs1_w0_val == 4261412863
// opcode: uksubw ; op1:x30; op2:x9; dest:x10; op1val:0xffffdffffdffffff;  op2val:0xfbffffffaaaaaaaa
TEST_PKRR_OP(uksubw, x10, x30, x9, 0x0000000000000000, 0xffffdffffdffffff, 0xfbffffffaaaaaaaa, x30, x19, 160, x11)

inst_11:
// rs1==x20, rs2==x24, rd==x18, rs2_w1_val == 4261412863, rs1_w0_val == 2048, rs2_w0_val == 4160749567
// opcode: uksubw ; op1:x20; op2:x24; dest:x18; op1val:0x00000a00000800;  op2val:0xfdfffffff7ffffff
TEST_PKRR_OP(uksubw, x18, x20, x24, 0x0000000000000000, 0x00000a00000800, 0xfdfffffff7ffffff, x20, x19, 176, x11)

inst_12:
// rs1==x5, rs2==x13, rd==x23, rs2_w1_val == 4278190079, rs1_w0_val == 4294967293, rs2_w0_val == 4294959103, rs1_w1_val == 4294967039
// opcode: uksubw ; op1:x5; op2:x13; dest:x23; op1val:0xfffffefffffffffd;  op2val:0xfeffffffffffdfff
TEST_PKRR_OP(uksubw, x23, x5, x13, 0x0000000000000000, 0xfffffefffffffffd, 0xfeffffffffffdfff, x5, x19, 192, x11)

inst_13:
// rs1==x18, rs2==x25, rd==x9, rs2_w1_val == 4286578687, rs1_w1_val == 524288
// opcode: uksubw ; op1:x18; op2:x25; dest:x9; op1val:0x08000000001000;  op2val:0xff7fffff0000000a
TEST_PKRR_OP(uksubw, x9, x18, x25, 0x0000000000000000, 0x08000000001000, 0xff7fffff0000000a, x18, x19, 208, x11)

inst_14:
// rs1==x6, rs2==x15, rd==x22, rs2_w1_val == 4290772991, rs1_w1_val == 0, rs1_w0_val == 512, rs2_w0_val == 32768
// opcode: uksubw ; op1:x6; op2:x15; dest:x22; op1val:0x00000000000200;  op2val:0xffbfffff00008000
TEST_PKRR_OP(uksubw, x22, x6, x15, 0x0000000000000000, 0x00000000000200, 0xffbfffff00008000, x6, x19, 224, x11)

inst_15:
// rs1==x17, rs2==x3, rd==x13, rs2_w1_val == 4292870143, rs1_w0_val == 33554432, rs1_w1_val == 4294901759
// opcode: uksubw ; op1:x17; op2:x3; dest:x13; op1val:0xfffeffff02000000;  op2val:0xffdfffffffffdfff
TEST_PKRR_OP(uksubw, x13, x17, x3, 0x0000000000000000, 0xfffeffff02000000, 0xffdfffffffffdfff, x17, x19, 240, x11)

inst_16:
// rs1==x25, rs2==x11, rd==x24, rs2_w1_val == 4293918719, rs2_w0_val == 262144, rs1_w1_val == 4096
// opcode: uksubw ; op1:x25; op2:x11; dest:x24; op1val:0x00100000000800;  op2val:0xffefffff00040000
TEST_PKRR_OP(uksubw, x24, x25, x11, 0x0000000000000000, 0x00100000000800, 0xffefffff00040000, x25, x19, 256, x7)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_17:
// rs1==x31, rs2==x20, rd==x19, rs2_w1_val == 4294443007, rs1_w1_val == 1048576, rs2_w0_val == 1
// opcode: uksubw ; op1:x31; op2:x20; dest:x19; op1val:0x100000ffffefff;  op2val:0xfff7ffff00000001
TEST_PKRR_OP(uksubw, x19, x31, x20, 0x0000000000000000, 0x100000ffffefff, 0xfff7ffff00000001, x31, x6, 0, x7)

inst_18:
// rs1==x28, rs2==x18, rd==x31, rs2_w1_val == 4294705151, 
// opcode: uksubw ; op1:x28; op2:x18; dest:x31; op1val:0x00000000000003;  op2val:0xfffbffff0000000b
TEST_PKRR_OP(uksubw, x31, x28, x18, 0x0000000000000000, 0x00000000000003, 0xfffbffff0000000b, x28, x6, 16, x7)

inst_19:
// rs1==x23, rs2==x29, rd==x3, rs2_w1_val == 4294836223, rs2_w0_val == 131072, rs1_w1_val == 2147483647
// opcode: uksubw ; op1:x23; op2:x29; dest:x3; op1val:0x7fffffff00000009;  op2val:0xfffdffff00020000
TEST_PKRR_OP(uksubw, x3, x23, x29, 0x0000000000000000, 0x7fffffff00000009, 0xfffdffff00020000, x23, x6, 32, x7)

inst_20:
// rs1==x27, rs2==x31, rd==x20, rs2_w1_val == 4294901759, rs1_w1_val == 4294443007, rs2_w0_val == 4294967231, rs1_w0_val == 64
// opcode: uksubw ; op1:x27; op2:x31; dest:x20; op1val:0xfff7ffff00000040;  op2val:0xfffeffffffffffbf
TEST_PKRR_OP(uksubw, x20, x27, x31, 0x0000000000000000, 0xfff7ffff00000040, 0xfffeffffffffffbf, x27, x6, 48, x7)

inst_21:
// rs1==x8, rs2==x30, rd==x1, rs2_w1_val == 4294950911, rs1_w0_val == 8192
// opcode: uksubw ; op1:x8; op2:x30; dest:x1; op1val:0x4000000000002000;  op2val:0xffffbfffffffdfff
TEST_PKRR_OP(uksubw, x1, x8, x30, 0x0000000000000000, 0x4000000000002000, 0xffffbfffffffdfff, x8, x6, 64, x7)

inst_22:
// rs1==x3, rs2==x17, rd==x5, rs2_w1_val == 4294963199, rs1_w0_val == 4294967294, rs2_w0_val == 268435456, rs1_w1_val == 32768
// opcode: uksubw ; op1:x3; op2:x17; dest:x5; op1val:0x008000fffffffe;  op2val:0xffffefff10000000
TEST_PKRR_OP(uksubw, x5, x3, x17, 0x0000000000000000, 0x008000fffffffe, 0xffffefff10000000, x3, x6, 80, x7)

inst_23:
// rs1==x11, rs2==x5, rd==x28, rs2_w1_val == 4294965247, rs2_w0_val == 512, rs1_w1_val == 4294963199, rs1_w0_val == 4294967287
// opcode: uksubw ; op1:x11; op2:x5; dest:x28; op1val:0xffffeffffffffff7;  op2val:0xfffff7ff00000200
TEST_PKRR_OP(uksubw, x28, x11, x5, 0x0000000000000000, 0xffffeffffffffff7, 0xfffff7ff00000200, x11, x6, 96, x7)

inst_24:
// rs1==x2, rs2==x16, rd==x11, rs2_w1_val == 4294966271, rs2_w0_val == 4227858431, rs1_w0_val == 131072, rs1_w1_val == 4293918719
// opcode: uksubw ; op1:x2; op2:x16; dest:x11; op1val:0xffefffff00020000;  op2val:0xfffffbfffbffffff
TEST_PKRR_OP(uksubw, x11, x2, x16, 0x0000000000000000, 0xffefffff00020000, 0xfffffbfffbffffff, x2, x6, 112, x7)

inst_25:
// rs1==x29, rs2==x8, rd==x30, rs2_w1_val == 4294966783, 
// opcode: uksubw ; op1:x29; op2:x8; dest:x30; op1val:0xffffefff0000000a;  op2val:0xfffffdff0000000f
TEST_PKRR_OP(uksubw, x30, x29, x8, 0x0000000000000000, 0xffffefff0000000a, 0xfffffdff0000000f, x29, x6, 128, x7)

inst_26:
// rs1==x10, rs2==x0, rd==x21, rs2_w1_val == 4294967039, rs1_w1_val == 4160749567
// opcode: uksubw ; op1:x10; op2:x0; dest:x21; op1val:0xf7ffffff00000006;  op2val:0xfffffeff00000003
TEST_PKRR_OP(uksubw, x21, x10, x0, 0x0000000000000000, 0xf7ffffff00000006, 0xfffffeff00000003, x10, x6, 144, x7)

inst_27:
// rs1==x9, rs2==x26, rd==x15, rs2_w1_val == 4294967167, rs1_w0_val == 67108864
// opcode: uksubw ; op1:x9; op2:x26; dest:x15; op1val:0xfffeffff04000000;  op2val:0xffffff7f00020000
TEST_PKRR_OP(uksubw, x15, x9, x26, 0x0000000000000000, 0xfffeffff04000000, 0xffffff7f00020000, x9, x6, 160, x7)

inst_28:
// rs1==x15, rs2==x4, rd==x2, rs2_w1_val == 4294967231, rs1_w1_val == 4290772991, rs1_w0_val == 32
// opcode: uksubw ; op1:x15; op2:x4; dest:x2; op1val:0xffbfffff00000020;  op2val:0xffffffbfffffbfff
TEST_PKRR_OP(uksubw, x2, x15, x4, 0x0000000000000000, 0xffbfffff00000020, 0xffffffbfffffbfff, x15, x6, 176, x7)

inst_29:
// rs1==x19, rs2==x28, rd==x0, rs2_w1_val == 4294967263, 
// opcode: uksubw ; op1:x19; op2:x28; dest:x0; op1val:0x100000000000011;  op2val:0xffffffdf10000000
TEST_PKRR_OP(uksubw, x0, x19, x28, 0x0000000000000000, 0x100000000000011, 0xffffffdf10000000, x19, x6, 192, x7)

inst_30:
// rs1==x0, rs2==x23, rd==x26, rs2_w1_val == 4294967279, rs2_w0_val == 4294967039, rs1_w1_val == 4294967167
// opcode: uksubw ; op1:x0; op2:x23; dest:x26; op1val:0xffffff7ffffbffff;  op2val:0xffffffeffffffeff
TEST_PKRR_OP(uksubw, x26, x0, x23, 0x0000000000000000, 0xffffff7ffffbffff, 0xffffffeffffffeff, x0, x6, 208, x7)

inst_31:
// rs1==x26, rs2==x19, rd==x14, rs2_w1_val == 4294967287, rs1_w0_val == 4294967291, rs2_w0_val == 4286578687, rs1_w1_val == 4294965247
// opcode: uksubw ; op1:x26; op2:x19; dest:x14; op1val:0xfffff7fffffffffb;  op2val:0xfffffff7ff7fffff
TEST_PKRR_OP(uksubw, x14, x26, x19, 0x0000000000000000, 0xfffff7fffffffffb, 0xfffffff7ff7fffff, x26, x6, 224, x7)

inst_32:
// rs2_w1_val == 4294967291, rs1_w1_val == 134217728
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffbffff;  op2val:0xfffffffb00000013
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x8000000fffbffff, 0xfffffffb00000013, x30, x6, 240, x1)

inst_33:
// rs2_w1_val == 4294967293, rs1_w1_val == 2
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffbffff;  op2val:0xfffffffd00008000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x000002fffbffff, 0xfffffffd00008000, x30, x6, 256, x1)

inst_34:
// rs2_w1_val == 4294967294, rs1_w0_val == 4294967263, rs1_w1_val == 128
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000080ffffffdf;  op2val:0xfffffffe00000006
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x000080ffffffdf, 0xfffffffe00000006, x30, x6, 272, x1)

inst_35:
// rs2_w1_val == 2147483648, rs1_w1_val == 4294967263, rs1_w0_val == 2863311530, rs2_w0_val == 4294967263
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfaaaaaaaa;  op2val:0x80000000ffffffdf
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xffffffdfaaaaaaaa, 0x80000000ffffffdf, x30, x6, 288, x1)

inst_36:
// rs2_w1_val == 1073741824, rs2_w0_val == 4096
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffdffffff;  op2val:0x4000000000001000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x7ffffffffdffffff, 0x4000000000001000, x30, x6, 304, x1)

inst_37:
// rs2_w1_val == 536870912, rs1_w1_val == 16, rs2_w0_val == 0, rs1_w0_val == 4194304
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00001000400000;  op2val:0x2000000000000000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00001000400000, 0x2000000000000000, x30, x6, 320, x1)

inst_38:
// rs2_w1_val == 268435456, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffffefff;  op2val:0x10000000aaaaaaaa
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xffbfffffffffefff, 0x10000000aaaaaaaa, x30, x6, 336, x1)

inst_39:
// rs2_w1_val == 134217728, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffffffffe;  op2val:0x8000000f7ffffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfffefffffffffffe, 0x8000000f7ffffff, x30, x6, 352, x1)

inst_40:
// rs2_w1_val == 67108864, rs1_w1_val == 4227858431, rs1_w0_val == 4294967231, rs2_w0_val == 4026531839
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffffbf;  op2val:0x4000000efffffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfbffffffffffffbf, 0x4000000efffffff, x30, x6, 368, x1)

inst_41:
// rs2_w1_val == 33554432, rs1_w0_val == 2147483647, rs2_w0_val == 64
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff7fffffff;  op2val:0x200000000000040
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfff7ffff7fffffff, 0x200000000000040, x30, x6, 384, x1)

inst_42:
// rs2_w1_val == 16777216, rs1_w1_val == 3221225471, rs2_w0_val == 65536, rs1_w0_val == 4293918719
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffefffff;  op2val:0x100000000010000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xbfffffffffefffff, 0x100000000010000, x30, x6, 400, x1)

inst_43:
// rs2_w1_val == 8388608, rs1_w1_val == 4294934527
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00001000;  op2val:0x80000000000006
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xffff7fff00001000, 0x80000000000006, x30, x6, 416, x1)

inst_44:
// rs2_w1_val == 4194304, rs1_w1_val == 262144, rs2_w0_val == 536870912
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x04000000008000;  op2val:0x40000020000000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x04000000008000, 0x40000020000000, x30, x6, 432, x1)

inst_45:
// rs2_w1_val == 2097152, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x0000120000000c;  op2val:0x20000000000009
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x0000120000000c, 0x20000000000009, x30, x6, 448, x1)

inst_46:
// rs2_w1_val == 1048576, rs2_w0_val == 128, rs1_w0_val == 8
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000008;  op2val:0x10000000000080
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00000900000008, 0x10000000000080, x30, x6, 464, x1)

inst_47:
// rs2_w1_val == 524288, rs1_w1_val == 1024, rs2_w0_val == 4294965247
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffffffe;  op2val:0x080000fffff7ff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x000400fffffffe, 0x080000fffff7ff, x30, x6, 480, x1)

inst_48:
// rs2_w1_val == 262144, rs1_w0_val == 536870912, rs1_w1_val == 4261412863, rs2_w0_val == 4294967287
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff20000000;  op2val:0x040000fffffff7
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfdffffff20000000, 0x040000fffffff7, x30, x6, 496, x1)

inst_49:
// rs2_w1_val == 131072, rs1_w1_val == 4294967231
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf0000000e;  op2val:0x020000fffff7ff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xffffffbf0000000e, 0x020000fffff7ff, x30, x6, 512, x1)

inst_50:
// rs2_w1_val == 65536, rs1_w1_val == 536870912, rs2_w0_val == 256
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffffefff;  op2val:0x01000000000100
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x20000000ffffefff, 0x01000000000100, x30, x6, 528, x1)

inst_51:
// rs1_w0_val == 262144, rs2_w1_val == 0
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00040000;  op2val:0x0000000000000d
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xffff7fff00040000, 0x0000000000000d, x30, x6, 544, x1)

inst_52:
// rs1_w0_val == 65536, rs1_w1_val == 4294967287
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700010000;  op2val:0xaaaaaaaa00000009
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfffffff700010000, 0xaaaaaaaa00000009, x30, x6, 560, x1)

inst_53:
// rs1_w0_val == 16384, rs2_w0_val == 4294967295, rs1_w1_val == 8
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00000800004000;  op2val:0x00000effffffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00000800004000, 0x00000effffffff, x30, x6, 576, x1)

inst_54:
// rs1_w0_val == 1024, rs2_w0_val == 4294967293
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00001100000400;  op2val:0x020000fffffffd
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00001100000400, 0x020000fffffffd, x30, x6, 592, x1)

inst_55:
// rs1_w0_val == 256, rs1_w1_val == 16384
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00400000000100;  op2val:0xfffffff700000007
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00400000000100, 0xfffffff700000007, x30, x6, 608, x1)

inst_56:
// rs1_w0_val == 128, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00001300000080;  op2val:0xffffff7f00000005
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00001300000080, 0xffffff7f00000005, x30, x6, 624, x1)

inst_57:
// rs1_w0_val == 16, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00001300000010;  op2val:0xdffffffffffffeff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00001300000010, 0xdffffffffffffeff, x30, x6, 640, x1)

inst_58:
// rs1_w0_val == 4, rs2_w1_val == 1
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000004;  op2val:0x0000010000000e
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00000200000004, 0x0000010000000e, x30, x6, 656, x1)

inst_59:
// rs1_w0_val == 2, rs2_w1_val == 128
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000002;  op2val:0x0000800000000d
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x04000000000002, 0x0000800000000d, x30, x6, 672, x1)

inst_60:
// rs1_w0_val == 1, rs1_w1_val == 2147483648
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000001;  op2val:0xdfffffff00000100
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x8000000000000001, 0xdfffffff00000100, x30, x6, 688, x1)

inst_61:
// rs1_w0_val == 4294967295, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00000affffffff;  op2val:0xffffdfff00010000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00000affffffff, 0xffffdfff00010000, x30, x6, 704, x1)

inst_62:
// rs2_w1_val == 32768, rs1_w1_val == 32
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000020ffffffdf;  op2val:0x008000ffffbfff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x000020ffffffdf, 0x008000ffffbfff, x30, x6, 720, x1)

inst_63:
// rs2_w1_val == 16384, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00000e00004000;  op2val:0x00400000000009
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00000e00004000, 0x00400000000009, x30, x6, 736, x1)

inst_64:
// rs2_w1_val == 8192, rs1_w1_val == 4294967291
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb7fffffff;  op2val:0x00200000020000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfffffffb7fffffff, 0x00200000020000, x30, x6, 752, x1)

inst_65:
// rs2_w1_val == 4096, rs2_w0_val == 2, rs1_w1_val == 4294966783
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffdffffff;  op2val:0x00100000000002
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfffffdfffdffffff, 0x00100000000002, x30, x6, 768, x1)

inst_66:
// rs2_w1_val == 2048, rs2_w0_val == 4294705151, rs1_w1_val == 256, rs1_w0_val == 4160749567
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000100f7ffffff;  op2val:0x000800fffbffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x000100f7ffffff, 0x000800fffbffff, x30, x6, 784, x1)

inst_67:
// rs2_w1_val == 1024, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffbffff;  op2val:0x00040000008000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffbffff, 0x00040000008000, x30, x6, 800, x1)

inst_68:
// rs2_w1_val == 512, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00000300000007;  op2val:0x000200aaaaaaaa
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00000300000007, 0x000200aaaaaaaa, x30, x6, 816, x1)

inst_69:
// rs2_w1_val == 256, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x0004000000000e;  op2val:0x000100ffffbfff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x0004000000000e, 0x000100ffffbfff, x30, x6, 832, x1)

inst_70:
// rs2_w1_val == 64, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00000300000012;  op2val:0x0000400000000a
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00000300000012, 0x0000400000000a, x30, x6, 848, x1)

inst_71:
// rs2_w1_val == 32, rs1_w1_val == 64, rs1_w0_val == 4294959103
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffffdfff;  op2val:0x00002000020000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x000040ffffdfff, 0x00002000020000, x30, x6, 864, x1)

inst_72:
// rs2_w1_val == 16, rs1_w0_val == 8388608
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00000700800000;  op2val:0x00001000010000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00000700800000, 0x00001000010000, x30, x6, 880, x1)

inst_73:
// rs2_w1_val == 8, rs2_w0_val == 16
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffffffd;  op2val:0x00000800000010
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffffffd, 0x00000800000010, x30, x6, 896, x1)

inst_74:
// rs2_w1_val == 4, rs1_w1_val == 512, rs2_w0_val == 4294967279
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000020;  op2val:0x000004ffffffef
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00020000000020, 0x000004ffffffef, x30, x6, 912, x1)

inst_75:
// rs2_w1_val == 2, rs1_w0_val == 1431655765
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00020055555555;  op2val:0x00000200000100
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00020055555555, 0x00000200000100, x30, x6, 928, x1)

inst_76:
// rs2_w1_val == 4294967295, rs2_w0_val == 4278190079
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00000cffffffdf;  op2val:0xfffffffffeffffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00000cffffffdf, 0xfffffffffeffffff, x30, x6, 944, x1)

inst_77:
// rs2_w0_val == 2147483647, rs1_w0_val == 2147483648
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff80000000;  op2val:0xffffffbf7fffffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xffffdfff80000000, 0xffffffbf7fffffff, x30, x6, 960, x1)

inst_78:
// rs2_w0_val == 3221225471, rs1_w1_val == 4
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000004ffffffbf;  op2val:0xfffffffebfffffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x000004ffffffbf, 0xfffffffebfffffff, x30, x6, 976, x1)

inst_79:
// rs2_w0_val == 3758096383, rs1_w0_val == 524288
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00002000080000;  op2val:0xffffefffdfffffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00002000080000, 0xffffefffdfffffff, x30, x6, 992, x1)

inst_80:
// rs2_w0_val == 4261412863, rs1_w0_val == 4294965247
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffff7ff;  op2val:0xffffffdffdffffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x2000000fffff7ff, 0xffffffdffdffffff, x30, x6, 1008, x1)

inst_81:
// rs2_w0_val == 4290772991, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff0000000b;  op2val:0x000007ffbfffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xbfffffff0000000b, 0x000007ffbfffff, x30, x6, 1024, x1)

inst_82:
// rs2_w0_val == 4292870143, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x001000f7ffffff;  op2val:0x400000ffdfffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x001000f7ffffff, 0x400000ffdfffff, x30, x6, 1040, x1)

inst_83:
// rs2_w0_val == 4294443007, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x0001000000000e;  op2val:0x200000fff7ffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x0001000000000e, 0x200000fff7ffff, x30, x6, 1056, x1)

inst_84:
// rs2_w0_val == 4294836223, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fffffffd;  op2val:0xfffefffffffdffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffffffd, 0xfffefffffffdffff, x30, x6, 1072, x1)

inst_85:
// rs2_w0_val == 1024, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00000a00080000;  op2val:0x00400000000400
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00000a00080000, 0x00400000000400, x30, x6, 1088, x1)

inst_86:
// rs2_w0_val == 32, rs1_w0_val == 2097152
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00020000200000;  op2val:0x00010000000020
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00020000200000, 0x00010000000020, x30, x6, 1104, x1)

inst_87:
// rs2_w0_val == 4, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff04000000;  op2val:0xbfffffff00000004
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xbfffffff04000000, 0xbfffffff00000004, x30, x6, 1120, x1)

inst_88:
// rs1_w1_val == 1431655765, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fffffeff;  op2val:0xffffbfff0000000d
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x55555555fffffeff, 0xffffbfff0000000d, x30, x6, 1136, x1)

inst_89:
// rs1_w1_val == 3758096383, rs1_w0_val == 4294836223
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffdffff;  op2val:0xfff7ffffffffff7f
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xdffffffffffdffff, 0xfff7ffffffffff7f, x30, x6, 1152, x1)

inst_90:
// rs1_w1_val == 4026531839, rs2_w0_val == 4294967294, rs1_w0_val == 4026531839
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffefffffff;  op2val:0x000004fffffffe
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xefffffffefffffff, 0x000004fffffffe, x30, x6, 1168, x1)

inst_91:
// rs1_w1_val == 4278190079, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffffbfff;  op2val:0xfff7fffffeffffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfeffffffffffbfff, 0xfff7fffffeffffff, x30, x6, 1184, x1)

inst_92:
// rs1_w1_val == 4286578687, rs2_w0_val == 8388608
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000400;  op2val:0xfffffff700800000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000400, 0xfffffff700800000, x30, x6, 1200, x1)

inst_93:
// rs1_w1_val == 4292870143, rs1_w0_val == 1073741824, rs2_w0_val == 2048
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff40000000;  op2val:0x00000f00000800
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xffdfffff40000000, 0x00000f00000800, x30, x6, 1216, x1)

inst_94:
// rs1_w1_val == 4294705151, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000001;  op2val:0x000010fffdffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000001, 0x000010fffdffff, x30, x6, 1232, x1)

inst_95:
// rs1_w1_val == 4294836223, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffefffffff;  op2val:0x55555555fdffffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfffdffffefffffff, 0x55555555fdffffff, x30, x6, 1248, x1)

inst_96:
// rs1_w1_val == 4294950911, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000005;  op2val:0xfffdffffbfffffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000005, 0xfffdffffbfffffff, x30, x6, 1264, x1)

inst_97:
// rs1_w1_val == 4294966271, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffffffffe;  op2val:0x4000000fffffff7
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffffffe, 0x4000000fffffff7, x30, x6, 1280, x1)

inst_98:
// rs1_w1_val == 4294967279, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00800000;  op2val:0x2000000ffffff7f
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xffffffef00800000, 0x2000000ffffff7f, x30, x6, 1296, x1)

inst_99:
// rs1_w1_val == 4294967294, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe20000000;  op2val:0x1000000fff7ffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfffffffe20000000, 0x1000000fff7ffff, x30, x6, 1312, x1)

inst_100:
// rs1_w1_val == 268435456, rs1_w0_val == 4294966271, rs2_w0_val == 4294901759
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffbff;  op2val:0x000004fffeffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x10000000fffffbff, 0x000004fffeffff, x30, x6, 1328, x1)

inst_101:
// rs1_w1_val == 67108864, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x4000000ffffffff;  op2val:0xfffffffd0000000e
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x4000000ffffffff, 0xfffffffd0000000e, x30, x6, 1344, x1)

inst_102:
// rs1_w1_val == 8388608, rs2_w0_val == 33554432
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x8000007fffffff;  op2val:0x00001102000000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x8000007fffffff, 0x00001102000000, x30, x6, 1360, x1)

inst_103:
// rs1_w1_val == 4194304, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000100;  op2val:0x000000dfffffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x40000000000100, 0x000000dfffffff, x30, x6, 1376, x1)

inst_104:
// rs1_w1_val == 2097152, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x200000ffffffff;  op2val:0x00000cfffff7ff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x200000ffffffff, 0x00000cfffff7ff, x30, x6, 1392, x1)

inst_105:
// rs1_w1_val == 131072, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x02000000001000;  op2val:0xffffff7f00000020
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x02000000001000, 0xffffff7f00000020, x30, x6, 1408, x1)

inst_106:
// rs1_w1_val == 65536, rs2_w0_val == 4294967291
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x01000004000000;  op2val:0x000004fffffffb
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x01000004000000, 0x000004fffffffb, x30, x6, 1424, x1)

inst_107:
// rs1_w1_val == 2048, rs1_w0_val == 4286578687
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000800ff7fffff;  op2val:0x000013fffff7ff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x000800ff7fffff, 0x000013fffff7ff, x30, x6, 1440, x1)

inst_108:
// rs1_w1_val == 4294967295, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00080000;  op2val:0x080000aaaaaaaa
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xffffffff00080000, 0x080000aaaaaaaa, x30, x6, 1456, x1)

inst_109:
// rs1_w0_val == 3221225471, rs2_w0_val == 2097152
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffbfffffff;  op2val:0xffffbfff00200000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xf7ffffffbfffffff, 0xffffbfff00200000, x30, x6, 1472, x1)

inst_110:
// rs1_w0_val == 3758096383, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x080000dfffffff;  op2val:0x000010ffdfffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x080000dfffffff, 0x000010ffdfffff, x30, x6, 1488, x1)

inst_111:
// rs1_w0_val == 4227858431, rs2_w0_val == 16777216
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffbffffff;  op2val:0x00040001000000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xffffff7ffbffffff, 0x00040001000000, x30, x6, 1504, x1)

inst_112:
// rs2_w0_val == 524288, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700020000;  op2val:0x4000000000080000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfffffff700020000, 0x4000000000080000, x30, x6, 1520, x1)

inst_113:
// rs1_w0_val == 4278190079, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffeffffff;  op2val:0x00020000000020
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xff7ffffffeffffff, 0x00020000000020, x30, x6, 1536, x1)

inst_114:
// rs1_w0_val == 4290772991, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000000ffbfffff;  op2val:0x00400000000007
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x000000ffbfffff, 0x00400000000007, x30, x6, 1552, x1)

inst_115:
// rs1_w0_val == 4292870143, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffdfffff;  op2val:0x0000047fffffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x000008ffdfffff, 0x0000047fffffff, x30, x6, 1568, x1)

inst_116:
// rs2_w0_val == 4294963199, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf0000000c;  op2val:0xfffffffdffffefff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xffffffdf0000000c, 0xfffffffdffffefff, x30, x6, 1584, x1)

inst_117:
// rs1_w0_val == 4294443007, rs2_w0_val == 134217728
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x001000fff7ffff;  op2val:0x400000008000000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x001000fff7ffff, 0x400000008000000, x30, x6, 1600, x1)

inst_118:
// rs2_w0_val == 4294966271, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000003;  op2val:0x4000000fffffbff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xefffffff00000003, 0x4000000fffffbff, x30, x6, 1616, x1)

inst_119:
// rs2_w0_val == 4294966783, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00001355555555;  op2val:0xdffffffffffffdff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00001355555555, 0xdffffffffffffdff, x30, x6, 1632, x1)

inst_120:
// rs1_w0_val == 4294966783, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffffdff;  op2val:0x000004fff7ffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x010000fffffdff, 0x000004fff7ffff, x30, x6, 1648, x1)

inst_121:
// rs2_w0_val == 2147483648, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00200004000000;  op2val:0xfffffffd80000000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00200004000000, 0xfffffffd80000000, x30, x6, 1664, x1)

inst_122:
// rs1_w0_val == 4294967167, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffffff7f;  op2val:0x00002000008000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x40000000ffffff7f, 0x00002000008000, x30, x6, 1680, x1)

inst_123:
// rs2_w0_val == 1073741824, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffffff7;  op2val:0xdfffffff40000000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x000400fffffff7, 0xdfffffff40000000, x30, x6, 1696, x1)

inst_124:
// rs1_w0_val == 4294967279, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffffffef;  op2val:0xfffffdffffffffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xffff7fffffffffef, 0xfffffdffffffffff, x30, x6, 1712, x1)

inst_125:
// rs2_w0_val == 67108864, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000004;  op2val:0xfbffffff04000000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000004, 0xfbffffff04000000, x30, x6, 1728, x1)

inst_126:
// rs2_w0_val == 1048576, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00000dfffbffff;  op2val:0xfffffffb00100000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00000dfffbffff, 0xfffffffb00100000, x30, x6, 1744, x1)

inst_127:
// rs1_w0_val == 268435456, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00400010000000;  op2val:0xffffff7f0000000b
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00400010000000, 0xffffff7f0000000b, x30, x6, 1760, x1)

inst_128:
// rs1_w0_val == 134217728, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00010008000000;  op2val:0xfffffffbfffffbff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x00010008000000, 0xfffffffbfffffbff, x30, x6, 1776, x1)

inst_129:
// rs1_w0_val == 16777216, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf01000000;  op2val:0x1000000000000004
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xffffffdf01000000, 0x1000000000000004, x30, x6, 1792, x1)

inst_130:
// rs2_w0_val == 16384, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000003;  op2val:0x00000300004000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000003, 0x00000300004000, x30, x6, 1808, x1)

inst_131:
// rs2_w0_val == 8192, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000002ffffdfff;  op2val:0xfffffffe00002000
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x000002ffffdfff, 0xfffffffe00002000, x30, x6, 1824, x1)

inst_132:
// rs1_w0_val == 1048576, 
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700100000;  op2val:0x000080fbffffff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xfffffff700100000, 0x000080fbffffff, x30, x6, 1840, x1)

inst_133:
// rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 4294934527, rs1_w1_val == 16777216, rs2_w1_val == 4294934527
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0x1000000ffff7fff;  op2val:0xffff7fffffff7fff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0x1000000ffff7fff, 0xffff7fffffff7fff, x30, x6, 1856, x1)

inst_134:
// rs2_w1_val == 4294967039, rs1_w1_val == 4160749567
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000006;  op2val:0xfffffeff00000003
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000006, 0xfffffeff00000003, x30, x6, 1872, x1)

inst_135:
// rs2_w1_val == 4294967279, rs2_w0_val == 4294967039, rs1_w1_val == 4294967167
// opcode: uksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffbffff;  op2val:0xffffffeffffffeff
TEST_PKRR_OP(uksubw, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffbffff, 0xffffffeffffffeff, x30, x6, 1888, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x19_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x19_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 238*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
