
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ksub8 instruction of the RISC-V RV64PZicsr extension for the ksub8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ksub8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:// rs1 == rd != rs2, rs1==x24, rs2==x10, rd==x24, rs1_b0_val == -128, rs1_b7_val != rs2_b7_val, rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b6_val != rs2_b6_val, rs1_b6_val > 0 and rs2_b6_val < 0, rs1_b5_val != rs2_b5_val, rs1_b5_val < 0 and rs2_b5_val < 0, rs2_b3_val == 2, rs1_b4_val != rs2_b4_val, rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b3_val != rs2_b3_val, rs1_b4_val == 4, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val, rs1_b3_val == 85, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val, rs1_b1_val > 0 and rs2_b1_val < 0, rs2_b1_val == -86, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b2_val == 127, rs2_b7_val == -3, rs2_b0_val == -65, rs2_b6_val == -1, rs1_b7_val == 8, rs2_b4_val == 85, rs1_b5_val == -65
// opcode: ksub8 ; op1:x24; op2:x10; dest:x24; op1val:0x83fbf04557f0980;  op2val:0xfdfff8550203aabf
TEST_RR_OP(ksub8, x24, x24, x10, 0x0000000000000000, 0x83fbf04557f0980, 0xfdfff8550203aabf, x1, 0, x27)

inst_1:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x21, rs2==x31, rd==x26, rs1_b7_val == rs2_b7_val, rs2_b3_val == -86, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b5_val == -1, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b2_val == rs2_b2_val, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b3_val == -3, rs2_b1_val == -33, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b7_val == -65, rs2_b0_val == -9, rs1_b7_val == -65, rs1_b1_val == 32, rs2_b5_val == 127, rs1_b0_val == 4, rs2_b4_val == -17, rs1_b6_val == 1
// opcode: ksub8 ; op1:x21; op2:x31; dest:x26; op1val:0xbf01fff8fdc02004;  op2val:0xbf037fefaac0dff7
TEST_RR_OP(ksub8, x26, x21, x31, 0x0000000000000000, 0xbf01fff8fdc02004, 0xbf037fefaac0dff7, x1, 16, x27)

inst_2:// rs1 == rs2 != rd, rs1==x23, rs2==x23, rd==x8, rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b2_val == 32, rs1_b3_val == 127, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b1_val == -86, rs1_b0_val == 32, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b4_val == -33, rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b1_val == -128, rs1_b4_val > 0 and rs2_b4_val < 0, rs2_b5_val == 85, rs1_b4_val == 2
// opcode: ksub8 ; op1:x23; op2:x23; dest:x8; op1val:0xf90603027f20aa20;  op2val:0x50555df03058007
TEST_RR_OP(ksub8, x8, x23, x23, 0x0000000000000000, 0xf90603027f20aa20, 0x50555df03058007, x1, 32, x27)

inst_3:// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b3_val == -86, rs1_b2_val > 0 and rs2_b2_val < 0, rs2_b3_val == -9, rs2_b6_val == -33, rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b0_val == -1, rs1_b5_val > 0 and rs2_b5_val < 0, rs2_b7_val == 85, rs1_b7_val == 127, rs1_b6_val == 64, rs1_b4_val == 8, rs1_b2_val == 85, rs1_b1_val == 16, rs2_b4_val == 64, rs1_b5_val == 127, rs2_b5_val == -65, rs2_b2_val == -65
// opcode: ksub8 ; op1:x7; op2:x7; dest:x7; op1val:0x7f407f08aa551009;  op2val:0x55dfbf40f7bf07ff
TEST_RR_OP(ksub8, x7, x7, x7, 0x0000000000000000, 0x7f407f08aa551009, 0x55dfbf40f7bf07ff, x1, 48, x27)

inst_4:// rs2 == rd != rs1, rs1==x0, rs2==x3, rd==x3, rs1_b6_val == rs2_b6_val, rs2_b5_val == 16, rs1_b2_val == -33, rs2_b0_val == 32, rs2_b3_val == -2, rs2_b4_val == -86, rs2_b2_val == -86, rs2_b6_val == 1, rs1_b4_val == -128, rs2_b1_val == 2, rs1_b1_val == 1
// opcode: ksub8 ; op1:x0; op2:x3; dest:x3; op1val:0x7f01fc80fadf0103;  op2val:0x50110aafeaa0220
TEST_RR_OP(ksub8, x3, x0, x3, 0x0000000000000000, 0x7f01fc80fadf0103, 0x50110aafeaa0220, x1, 64, x27)

inst_5:// rs1==x2, rs2==x16, rd==x20, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b7_val == 4, rs2_b0_val == -3, rs1_b2_val == 0, rs2_b5_val == 2, rs2_b3_val == 64, rs2_b7_val == 64, rs1_b0_val == -1, rs2_b1_val == -1
// opcode: ksub8 ; op1:x2; op2:x16; dest:x20; op1val:0x4fcff03030001ff;  op2val:0x400702f94003fffd
TEST_RR_OP(ksub8, x20, x2, x16, 0x0000000000000000, 0x4fcff03030001ff, 0x400702f94003fffd, x1, 80, x27)

inst_6:// rs1==x26, rs2==x11, rd==x9, rs1_b6_val < 0 and rs2_b6_val < 0, rs2_b7_val == 4, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b0_val == 16, rs1_b1_val == 85, rs2_b6_val == -3, rs1_b4_val == 127, rs2_b1_val == 64, rs1_b2_val == -9
// opcode: ksub8 ; op1:x26; op2:x11; dest:x9; op1val:0x6f8057ffaf75509;  op2val:0x4fd5509aa3f4010
TEST_RR_OP(ksub8, x9, x26, x11, 0x0000000000000000, 0x6f8057ffaf75509, 0x4fd5509aa3f4010, x1, 96, x27)

inst_7:// rs1==x9, rs2==x5, rd==x6, rs1_b5_val == rs2_b5_val, rs2_b7_val == 2, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b1_val == -3, rs2_b6_val == 8, rs1_b4_val == -5, rs1_b4_val < 0 and rs2_b4_val > 0, rs1_b7_val == -2, rs2_b4_val == 1
// opcode: ksub8 ; op1:x9; op2:x5; dest:x6; op1val:0xfe4003fbfd07fdfa;  op2val:0x2080301f6bf0907
TEST_RR_OP(ksub8, x6, x9, x5, 0x0000000000000000, 0xfe4003fbfd07fdfa, 0x2080301f6bf0907, x1, 112, x27)

inst_8:// rs1==x12, rs2==x25, rd==x13, rs1_b4_val == rs2_b4_val, rs1_b3_val == -5, rs2_b2_val == -9, rs1_b7_val == -17, rs2_b7_val == -5, rs1_b5_val == -33, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b2_val == -5, rs2_b5_val == -33, rs1_b0_val == 85
// opcode: ksub8 ; op1:x12; op2:x25; dest:x13; op1val:0xef09dfc0fbfbfd55;  op2val:0xfbc0dfc005f780c0
TEST_RR_OP(ksub8, x13, x12, x25, 0x0000000000000000, 0xef09dfc0fbfbfd55, 0xfbc0dfc005f780c0, x1, 128, x27)

inst_9:// rs1==x11, rs2==x24, rd==x12, rs1_b3_val == rs2_b3_val, rs1_b0_val == -17, rs1_b5_val == 2, rs1_b3_val == -2, rs1_b6_val == 2, rs2_b5_val == -17, rs2_b4_val == 0
// opcode: ksub8 ; op1:x11; op2:x24; dest:x12; op1val:0xf80202f6fef9fdef;  op2val:0x209ef00fe050310
TEST_RR_OP(ksub8, x12, x11, x24, 0x0000000000000000, 0xf80202f6fef9fdef, 0x209ef00fe050310, x1, 144, x27)

inst_10:// rs1==x14, rs2==x8, rd==x30, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b7_val == 2, rs1_b0_val == -2, rs2_b1_val == 85, rs1_b1_val == 127, rs2_b4_val == 127, rs1_b4_val == -2, rs2_b5_val == -9
// opcode: ksub8 ; op1:x14; op2:x8; dest:x30; op1val:0x20209fe03057ffe;  op2val:0x3f9f77ff80955f8
TEST_RR_OP(ksub8, x30, x14, x8, 0x0000000000000000, 0x20209fe03057ffe, 0x3f9f77ff80955f8, x1, 160, x27)

inst_11:// rs1==x3, rs2==x28, rd==x15, rs1_b1_val == rs2_b1_val, rs2_b5_val == -5, rs1_b1_val == 4, rs1_b3_val == -9, rs1_b0_val == 64, rs2_b2_val == 127, rs2_b1_val == 4, rs2_b4_val == 16
// opcode: ksub8 ; op1:x3; op2:x28; dest:x15; op1val:0x207c007f7fc0440;  op2val:0x5f6fb10fc7f04bf
TEST_RR_OP(ksub8, x15, x3, x28, 0x0000000000000000, 0x207c007f7fc0440, 0x5f6fb10fc7f04bf, x1, 176, x27)

inst_12:// rs1==x28, rs2==x9, rd==x16, rs1_b0_val == rs2_b0_val, rs1_b7_val == 0, rs1_b5_val == 8, rs1_b6_val == -17, rs2_b0_val == 4, rs2_b1_val == -2, rs2_b6_val == 2
// opcode: ksub8 ; op1:x28; op2:x9; dest:x16; op1val:0xef08fb06c00704;  op2val:0xfb02093f03bffe04
TEST_RR_OP(ksub8, x16, x28, x9, 0x0000000000000000, 0xef08fb06c00704, 0xfb02093f03bffe04, x1, 192, x27)

inst_13:// rs1==x6, rs2==x26, rd==x31, rs2_b7_val == -86, rs2_b2_val == 16, rs1_b4_val == 32, rs1_b5_val == 0, rs1_b0_val == 0, rs1_b6_val == 32, rs2_b1_val == -3, rs2_b5_val == -86, rs1_b1_val == -1, rs2_b4_val == 2
// opcode: ksub8 ; op1:x6; op2:x26; dest:x31; op1val:0x920002009f9ff00;  op2val:0xaa02aa020310fdfd
TEST_RR_OP(ksub8, x31, x6, x26, 0x0000000000000000, 0x920002009f9ff00, 0xaa02aa020310fdfd, x1, 208, x27)

inst_14:// rs1==x4, rs2==x2, rd==x10, rs2_b7_val == 127, rs1_b2_val == 2, rs1_b5_val == 1, rs2_b3_val == -128, rs1_b4_val == -17, rs1_b7_val == 32
// opcode: ksub8 ; op1:x4; op2:x2; dest:x10; op1val:0x204001ef0602ff07;  op2val:0x7f09550380f606f8
TEST_RR_OP(ksub8, x10, x4, x2, 0x0000000000000000, 0x204001ef0602ff07, 0x7f09550380f606f8, x1, 224, x27)

inst_15:// rs1==x15, rs2==x21, rd==x0, rs2_b7_val == -33, rs2_b0_val == -5, rs1_b2_val == -65, rs1_b1_val == 2, rs1_b4_val == 16, rs1_b7_val == 64
// opcode: ksub8 ; op1:x15; op2:x21; dest:x0; op1val:0x40407f1006bf0255;  op2val:0xdff6f903fa09dffb
TEST_RR_OP(ksub8, x0, x15, x21, 0x0000000000000000, 0x40407f1006bf0255, 0xdff6f903fa09dffb, x1, 240, x27)

inst_16:// rs1==x19, rs2==x12, rd==x25, rs2_b7_val == -17, rs2_b1_val == 1, rs2_b3_val == -33, rs1_b5_val == 16
// opcode: ksub8 ; op1:x19; op2:x12; dest:x25; op1val:0x43f100909f6f8f8;  op2val:0xeffdaa3fdff901f9
TEST_RR_OP(ksub8, x25, x19, x12, 0x0000000000000000, 0x43f100909f6f8f8, 0xeffdaa3fdff901f9, x1, 256, x27)

inst_17:// rs1==x22, rs2==x18, rd==x17, rs2_b7_val == -9, rs1_b6_val == 0, rs2_b6_val == -5, rs1_b2_val == 1, rs2_b2_val == 0
// opcode: ksub8 ; op1:x22; op2:x18; dest:x17; op1val:0x300bfc0fa010505;  op2val:0xf7fbc0f8f9000409
TEST_RR_OP(ksub8, x17, x22, x18, 0x0000000000000000, 0x300bfc0fa010505, 0xf7fbc0f8f9000409, x1, 272, x27)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_18:// rs1==x29, rs2==x0, rd==x4, rs2_b7_val == -2, rs2_b6_val == -86, rs1_b6_val == -33, rs1_b0_val == 2, rs1_b4_val == 85, rs1_b3_val == 8, rs2_b1_val == 16, rs2_b4_val == -128, rs2_b2_val == -5
// opcode: ksub8 ; op1:x29; op2:x0; dest:x4; op1val:0xfadf095508f6ff02;  op2val:0xfeaafa80f8fb1003
TEST_RR_OP(ksub8, x4, x29, x0, 0x0000000000000000, 0xfadf095508f6ff02, 0xfeaafa80f8fb1003, x3, 0, x7)

inst_19:// rs1==x10, rs2==x14, rd==x1, rs2_b7_val == -128, rs2_b2_val == -3, rs2_b0_val == -2, rs1_b1_val == -9
// opcode: ksub8 ; op1:x10; op2:x14; dest:x1; op1val:0xc0200605f903f707;  op2val:0x80fd55f680fdaafe
TEST_RR_OP(ksub8, x1, x10, x14, 0x0000000000000000, 0xc0200605f903f707, 0x80fd55f680fdaafe, x3, 16, x7)

inst_20:// rs1==x16, rs2==x4, rd==x19, rs2_b7_val == 32, rs2_b3_val == 127, rs2_b2_val == 4, rs1_b6_val == 16, rs1_b4_val == -9, rs1_b3_val == 0, rs1_b1_val == 64, rs1_b7_val == -5, rs1_b0_val == -86, rs1_b5_val == -17
// opcode: ksub8 ; op1:x16; op2:x4; dest:x19; op1val:0xfb10eff7000640aa;  op2val:0x20c003df7f044004
TEST_RR_OP(ksub8, x19, x16, x4, 0x0000000000000000, 0xfb10eff7000640aa, 0x20c003df7f044004, x3, 32, x7)

inst_21:// rs1==x27, rs2==x13, rd==x2, rs2_b7_val == 16, rs1_b0_val == -9, rs2_b5_val == 64, rs1_b3_val == -33, rs2_b2_val == 1, rs1_b4_val == -33
// opcode: ksub8 ; op1:x27; op2:x13; dest:x2; op1val:0xc0207fdfdf07fdf7;  op2val:0x10c040f8fa0109f9
TEST_RR_OP(ksub8, x2, x27, x13, 0x0000000000000000, 0xc0207fdfdf07fdf7, 0x10c040f8fa0109f9, x3, 48, x7)

inst_22:// rs1==x5, rs2==x15, rd==x22, rs2_b7_val == 8, rs1_b7_val == 85, rs2_b1_val == -65, rs2_b3_val == -65
// opcode: ksub8 ; op1:x5; op2:x15; dest:x22; op1val:0x55eff8fbfef8053f;  op2val:0x808fc00bf05bf3f
TEST_RR_OP(ksub8, x22, x5, x15, 0x0000000000000000, 0x55eff8fbfef8053f, 0x808fc00bf05bf3f, x3, 64, x7)

inst_23:// rs1==x8, rs2==x29, rd==x23, rs2_b7_val == 1, rs2_b6_val == 64, rs2_b5_val == -3, rs1_b2_val == -3, rs1_b4_val == 64
// opcode: ksub8 ; op1:x8; op2:x29; dest:x23; op1val:0xfcfa0540fbfd7f3f;  op2val:0x140fddf80f70606
TEST_RR_OP(ksub8, x23, x8, x29, 0x0000000000000000, 0xfcfa0540fbfd7f3f, 0x140fddf80f70606, x3, 80, x7)

inst_24:// rs1==x25, rs2==x22, rd==x14, rs2_b7_val == 0, rs2_b5_val == 4, rs1_b5_val == -2, rs1_b6_val == -9, rs1_b2_val == -128
// opcode: ksub8 ; op1:x25; op2:x22; dest:x14; op1val:0xfbf7fefa7f800520;  op2val:0xf904f605fd0520
TEST_RR_OP(ksub8, x14, x25, x22, 0x0000000000000000, 0xfbf7fefa7f800520, 0xf904f605fd0520, x3, 96, x7)

inst_25:// rs1==x17, rs2==x19, rd==x28, rs2_b7_val == -1, rs2_b0_val == -17, rs2_b6_val == -9, rs1_b5_val == 64, rs1_b3_val == 1
// opcode: ksub8 ; op1:x17; op2:x19; dest:x28; op1val:0xf920403f013f0407;  op2val:0xfff71001f9aafaef
TEST_RR_OP(ksub8, x28, x17, x19, 0x0000000000000000, 0xf920403f013f0407, 0xfff71001f9aafaef, x3, 112, x7)

inst_26:// rs1==x30, rs2==x20, rd==x21, rs2_b6_val == 85, rs1_b3_val == -17, rs2_b0_val == 0
// opcode: ksub8 ; op1:x30; op2:x20; dest:x21; op1val:0x20400504ef80c003;  op2val:0xf855aafc3ff60700
TEST_RR_OP(ksub8, x21, x30, x20, 0x0000000000000000, 0x20400504ef80c003, 0xf855aafc3ff60700, x3, 128, x7)

inst_27:// rs1==x18, rs2==x17, rd==x11, rs2_b6_val == 127, rs1_b2_val == -17, rs1_b4_val == -3, rs2_b0_val == 1
// opcode: ksub8 ; op1:x18; op2:x17; dest:x11; op1val:0x3fcf8fdfeef2080;  op2val:0x47f03effafbfd01
TEST_RR_OP(ksub8, x11, x18, x17, 0x0000000000000000, 0x3fcf8fdfeef2080, 0x47f03effafbfd01, x3, 144, x7)

inst_28:// rs1==x20, rs2==x6, rd==x18, rs1_b5_val == -5, rs1_b0_val == 16, rs1_b2_val == 8, rs2_b5_val == 32, rs2_b1_val == -17
// opcode: ksub8 ; op1:x20; op2:x6; dest:x18; op1val:0x01fbf80808fd10;  op2val:0x4ff2055c001eff6
TEST_RR_OP(ksub8, x18, x20, x6, 0x0000000000000000, 0x01fbf80808fd10, 0x4ff2055c001eff6, x3, 160, x7)

inst_29:// rs1==x1, rs2==x30, rd==x27, rs1_b5_val == -3, rs2_b2_val == 2, rs2_b1_val == 127, rs1_b4_val == -86, rs2_b4_val == 8, rs1_b2_val == -2
// opcode: ksub8 ; op1:x1; op2:x30; dest:x27; op1val:0xfcfafdaa55fe3ffe;  op2val:0xfffcf708f6027ffc
TEST_RR_OP(ksub8, x27, x1, x30, 0x0000000000000000, 0xfcfafdaa55fe3ffe, 0xfffcf708f6027ffc, x3, 176, x7)

inst_30:// rs1==x13, rs2==x1, rd==x5, rs1_b5_val == -128, rs1_b1_val == -5, rs1_b3_val == -65, rs2_b2_val == -128
// opcode: ksub8 ; op1:x13; op2:x1; dest:x5; op1val:0x71080f6bf09fb02;  op2val:0x509efc0038006fe
TEST_RR_OP(ksub8, x5, x13, x1, 0x0000000000000000, 0x71080f6bf09fb02, 0x509efc0038006fe, x3, 192, x7)

inst_31:// rs1==x31, rs2==x27, rd==x29, rs1_b5_val == 32, rs1_b2_val == 64, rs1_b6_val == -65, rs2_b3_val == -3, rs1_b3_val == 32, rs2_b1_val == 0
// opcode: ksub8 ; op1:x31; op2:x27; dest:x29; op1val:0x5bf20402040fb04;  op2val:0x2095580fdf600c0
TEST_RR_OP(ksub8, x29, x31, x27, 0x0000000000000000, 0x5bf20402040fb04, 0x2095580fdf600c0, x3, 208, x7)

inst_32:// rs1_b5_val == 4, rs2_b5_val == -1, rs1_b0_val == 1
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f70420fdc0aa01;  op2val:0x3ff6fff6f7f8aafd
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x3f70420fdc0aa01, 0x3ff6fff6f7f8aafd, x3, 224, x7)

inst_33:// rs1_b4_val == -65, rs2_b5_val == -128, rs1_b0_val == -5, rs2_b0_val == 64, rs2_b6_val == -17, rs2_b3_val == 0
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x7ff9fbbf07f9c0fb;  op2val:0x80ef800700014040
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x7ff9fbbf07f9c0fb, 0x80ef800700014040, x3, 240, x7)

inst_34:// rs1_b4_val == 1, rs2_b0_val == -33, rs1_b1_val == -128, rs2_b1_val == 32
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x403f2001ef0780aa;  op2val:0xefff0609bff620df
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x403f2001ef0780aa, 0xefff0609bff620df, x3, 256, x7)

inst_35:// rs1_b4_val == 0, rs1_b3_val == 4
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfc0708000405fafc;  op2val:0xf75555ef030503f7
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xfc0708000405fafc, 0xf75555ef030503f7, x3, 272, x7)

inst_36:// rs1_b4_val == -1, rs2_b4_val == 32, rs2_b0_val == 8, rs1_b6_val == 85
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f5507fff8fcfd06;  op2val:0x10c04020dff8aa08
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x7f5507fff8fcfd06, 0x10c04020dff8aa08, x3, 288, x7)

inst_37:// rs1_b3_val == -128, rs1_b0_val == -33
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x5509f97f8080f7df;  op2val:0x3070501bff9bf40
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x5509f97f8080f7df, 0x3070501bff9bf40, x3, 304, x7)

inst_38:// rs1_b3_val == 64, rs1_b2_val == 16
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x550309df401009aa;  op2val:0x3021005bf0909f6
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x550309df401009aa, 0x3021005bf0909f6, x3, 320, x7)

inst_39:// rs1_b3_val == 16, rs1_b7_val == -3, rs2_b3_val == 1
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd3ffcf810fcfbf7;  op2val:0xf70603fc01aafac0
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xfd3ffcf810fcfbf7, 0xf70603fc01aafac0, x3, 336, x7)

inst_40:// rs1_b3_val == 2, rs1_b7_val == -33
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf07070302fd09f7;  op2val:0x10fb3f3f3fc003ff
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xdf07070302fd09f7, 0x10fb3f3f3fc003ff, x3, 352, x7)

inst_41:// rs1_b3_val == -1, rs2_b2_val == 8
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x5fc8000ff40aaf7;  op2val:0xaa0307fc020809fc
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x5fc8000ff40aaf7, 0xaa0307fc020809fc, x3, 368, x7)

inst_42:// rs1_b2_val == -86, rs1_b7_val == -9, rs1_b6_val == -128, rs2_b3_val == 16, rs2_b6_val == -128
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf780bffdbfaaf8c0;  op2val:0xfc80bfef1003fff7
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xf780bffdbfaaf8c0, 0xfc80bfef1003fff7, x3, 384, x7)

inst_43:// rs1_b2_val == 4, rs1_b1_val == 0
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x8ef3f107f040055;  op2val:0x40c0fafcaafd0310
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x8ef3f107f040055, 0x40c0fafcaafd0310, x3, 400, x7)

inst_44:// rs2_b6_val == -65, rs2_b5_val == -2, rs1_b6_val == -2, rs2_b0_val == 127
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x40fe02f83ffd07aa;  op2val:0xc0bffe208080fd7f
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x40fe02f83ffd07aa, 0xc0bffe208080fd7f, x3, 416, x7)

inst_45:// rs1_b2_val == -1, rs2_b4_val == -2
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x6fa060655fff9fe;  op2val:0x3aafffe06f9fc09
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x6fa060655fff9fe, 0x3aafffe06f9fc09, x3, 432, x7)

inst_46:// rs2_b4_val == -1, rs2_b2_val == 32, rs1_b0_val == 127
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ef40075509097f;  op2val:0xf9c0fbffc0205506
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xf7ef40075509097f, 0xf9c0fbffc0205506, x3, 448, x7)

inst_47:// rs2_b3_val == 85, rs1_b7_val == -86, rs2_b5_val == 8
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa4000fdc0103f40;  op2val:0x7f70806550855fb
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xaa4000fdc0103f40, 0x7f70806550855fb, x3, 464, x7)

inst_48:// rs2_b3_val == -17, rs2_b4_val == 4, rs2_b0_val == 85
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xaaf6fef705f900ff;  op2val:0x9077f04effdff55
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xaaf6fef705f900ff, 0x9077f04effdff55, x3, 480, x7)

inst_49:// rs2_b3_val == -5, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xefdf0300fbf77f40;  op2val:0xfdf8073ffb0380f8
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xefdf0300fbf77f40, 0xfdf8073ffb0380f8, x3, 496, x7)

inst_50:// rs2_b3_val == 32, rs2_b2_val == -2
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x203fc006eff7207f;  op2val:0xfbaa550420feaafd
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x203fc006eff7207f, 0xfbaa550420feaafd, x3, 512, x7)

inst_51:// rs2_b3_val == 8, rs1_b6_val == -1, rs2_b5_val == 0, rs2_b4_val == -5, rs2_b6_val == -2
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff06fbfa06403f;  op2val:0xfbfe00fb080302df
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x3fff06fbfa06403f, 0xfbfe00fb080302df, x3, 528, x7)

inst_52:// rs2_b3_val == 4, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf3fffbff6fa067f;  op2val:0xf9df203f04bffafc
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xbf3fffbff6fa067f, 0xf9df203f04bffafc, x3, 544, x7)

inst_53:// rs2_b3_val == -1, rs2_b1_val == 8
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe05fdfdf780fc03;  op2val:0x3f3f8040fffe08f6
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xfe05fdfdf780fc03, 0x3f3f8040fffe08f6, x3, 560, x7)

inst_54:// rs2_b2_val == 85, rs1_b1_val == -33
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x9fc060606f9df07;  op2val:0xfbef02c0fb55bff8
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x9fc060606f9df07, 0xfbef02c0fb55bff8, x3, 576, x7)

inst_55:// rs2_b2_val == -33, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf6df01fafefbf907;  op2val:0x3ff8fc1005df02f7
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xf6df01fafefbf907, 0x3ff8fc1005df02f7, x3, 592, x7)

inst_56:// rs2_b2_val == -17, rs1_b0_val == -65, rs1_b6_val == -5
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffb04dffefb7fbf;  op2val:0xf6fd2008f7efdf40
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x7ffb04dffefb7fbf, 0xf6fd2008f7efdf40, x3, 608, x7)

inst_57:// rs2_b2_val == 64, rs1_b6_val == 127, rs1_b1_val == 8
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf97f04fe1002087f;  op2val:0xfffaaafcf64007f7
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xf97f04fe1002087f, 0xfffaaafcf64007f7, x3, 624, x7)

inst_58:// rs2_b2_val == -1, rs1_b7_val == -128, rs1_b6_val == 4, rs2_b4_val == -3
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x80040106f7aa1004;  op2val:0x2002fafd40fff800
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x80040106f7aa1004, 0x2002fafd40fff800, x3, 640, x7)

inst_59:// rs2_b0_val == -128, rs1_b7_val == 16
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x10fa05fdff03aac0;  op2val:0x50810faaaaafa80
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x10fa05fdff03aac0, 0x50810faaaaafa80, x3, 656, x7)

inst_60:// rs1_b1_val == -65, rs2_b4_val == -65, rs1_b5_val == -9
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x2020f755fa40bf02;  op2val:0x43f08bf4006df20
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x2020f755fa40bf02, 0x43f08bf4006df20, x3, 672, x7)

inst_61:// rs2_b0_val == 2, rs2_b4_val == -9, rs1_b6_val == -3
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x6fdfbefffbffff9;  op2val:0xfffdeff7fd030502
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x6fdfbefffbffff9, 0xfffdeff7fd030502, x3, 688, x7)

inst_62:// rs1_b1_val == -17, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x6effbef09fcef80;  op2val:0xdf083f7f40dffebf
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x6effbef09fcef80, 0xdf083f7f40dffebf, x3, 704, x7)

inst_63:// rs2_b6_val == 32, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa80041008ff0220;  op2val:0x72007fbefdffe06
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xfa80041008ff0220, 0x72007fbefdffe06, x3, 720, x7)

inst_64:// rs2_b6_val == 16, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xaaf8ef03fec0df07;  op2val:0xfa10dffafdfa3ffe
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xaaf8ef03fec0df07, 0xfa10dffafdfa3ffe, x3, 736, x7)

inst_65:// rs1_b7_val == 1, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x1f8f9fd8007fabf;  op2val:0xfc10803f3fbf7ffc
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x1f8f9fd8007fabf, 0xfc10803f3fbf7ffc, x3, 752, x7)

inst_66:// rs1_b7_val == -1, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xff3f0101dffa07bf;  op2val:0x340ff00bfbf09df
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xff3f0101dffa07bf, 0x340ff00bfbf09df, x3, 768, x7)

inst_67:// rs1_b0_val == -3, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x2803fc07ffd06fd;  op2val:0xf97f023f05400307
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x2803fc07ffd06fd, 0xf97f023f05400307, x3, 784, x7)

inst_68:// rs1_b6_val == -86, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x10aa072080effffd;  op2val:0x5200806020701f7
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x10aa072080effffd, 0x5200806020701f7, x3, 800, x7)

inst_69:// rs2_b5_val == 1, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xbffa05aaffbff803;  op2val:0x20701f6f97fdf01
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xbffa05aaffbff803, 0x20701f6f97fdf01, x3, 816, x7)

inst_70:// rs1_b0_val == 8, rs1_b5_val == 85
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x40655f7fe06aa08;  op2val:0x5ef02aaf680dff7
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x40655f7fe06aa08, 0x5ef02aaf680dff7, x3, 832, x7)

inst_71:// rs2_b1_val == -9, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa550202bf050305;  op2val:0x67fff00aa3ff77f
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xfa550202bf050305, 0x67fff00aa3ff77f, x3, 848, x7)

inst_72:// rs2_b1_val == -5, rs1_b5_val == -86
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x1010aafd55bf0506;  op2val:0x57f06dfc055fb06
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x1010aafd55bf0506, 0x57f06dfc055fb06, x3, 864, x7)

inst_73:// rs1_b1_val == -2, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x20fec009dffdfef6;  op2val:0xf8fdfcf700bffe55
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x20fec009dffdfef6, 0xf8fdfcf700bffe55, x3, 880, x7)

inst_74:// rs1_b6_val == 8, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe08f980dfaaaac0;  op2val:0x2005ef10043fc0f6
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xfe08f980dfaaaac0, 0x2005ef10043fc0f6, x3, 896, x7)

inst_75:// rs2_b6_val == 4, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa0009fd00064004;  op2val:0x204f901f908f9fd
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xaa0009fd00064004, 0x204f901f908f9fd, x3, 912, x7)

inst_76:// rs2_b0_val == -86, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x809faf804050306;  op2val:0xc0024006eff820aa
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x809faf804050306, 0xc0024006eff820aa, x3, 928, x7)

inst_77:// rs2_b6_val == 0, 
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf720bfbf20effa02;  op2val:0xdf00bf7ffa800905
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xf720bfbf20effa02, 0xdf00bf7ffa800905, x3, 944, x7)

inst_78:// rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b2_val == 32, rs1_b3_val == 127, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b1_val == -86, rs1_b0_val == 32, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b4_val == -33, rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b1_val == -128, rs1_b4_val > 0 and rs2_b4_val < 0, rs2_b5_val == 85, rs1_b4_val == 2
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf90603027f20aa20;  op2val:0x50555df03058007
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xf90603027f20aa20, 0x50555df03058007, x3, 960, x7)

inst_79:// rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b3_val == -86, rs1_b2_val > 0 and rs2_b2_val < 0, rs2_b3_val == -9, rs2_b6_val == -33, rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b0_val == -1, rs1_b5_val > 0 and rs2_b5_val < 0, rs2_b7_val == 85, rs1_b7_val == 127, rs1_b6_val == 64, rs1_b4_val == 8, rs1_b2_val == 85, rs1_b1_val == 16, rs2_b4_val == 64, rs1_b5_val == 127, rs2_b5_val == -65, rs2_b2_val == -65
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f407f08aa551009;  op2val:0x55dfbf40f7bf07ff
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x7f407f08aa551009, 0x55dfbf40f7bf07ff, x3, 976, x7)

inst_80:// rs1_b6_val == rs2_b6_val, rs2_b5_val == 16, rs1_b2_val == -33, rs2_b0_val == 32, rs2_b3_val == -2, rs2_b4_val == -86, rs2_b2_val == -86, rs2_b6_val == 1, rs1_b4_val == -128, rs2_b1_val == 2, rs1_b1_val == 1
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f01fc80fadf0103;  op2val:0x50110aafeaa0220
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0x7f01fc80fadf0103, 0x50110aafeaa0220, x3, 992, x7)

inst_81:// rs2_b7_val == -2, rs2_b6_val == -86, rs1_b6_val == -33, rs1_b0_val == 2, rs1_b4_val == 85, rs1_b3_val == 8, rs2_b1_val == 16, rs2_b4_val == -128, rs2_b2_val == -5
// opcode: ksub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfadf095508f6ff02;  op2val:0xfeaafa80f8fb1003
TEST_RR_OP(ksub8, x31, x30, x29, 0x0000000000000000, 0xfadf095508f6ff02, 0xfeaafa80f8fb1003, x3, 1008, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 128*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
