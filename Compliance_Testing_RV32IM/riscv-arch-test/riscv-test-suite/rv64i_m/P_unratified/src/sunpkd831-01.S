
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sunpkd831 instruction of the RISC-V RV64PZicsr extension for the sunpkd831 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sunpkd831)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1==x27, rd==x3, rs1_b0_val == -128, rs1_b6_val == 4, rs1_b2_val == -33, rs1_b4_val == 8, rs1_b1_val == -65, rs1_b3_val == 8
// opcode: sunpkd831 ; op1:x27; dest:x3; op1val:0x3f04c00808dfbf80;
TEST_RD_OP( sunpkd831, x3, x27, 0x0000000000000000, 0x3f04c00808dfbf80, x6, 0, x4)

inst_1:
// rs1==x25, rd==x15, rs1_b7_val == -86, rs1_b4_val == -33, rs1_b3_val == 1, rs1_b1_val == 64
// opcode: sunpkd831 ; op1:x25; dest:x15; op1val:0xaac0fadf013f40f8;
TEST_RD_OP( sunpkd831, x15, x25, 0x0000000000000000, 0xaac0fadf013f40f8, x6, 8, x4)

inst_2:
// rs1==x31, rd==x10, rs1_b7_val == 85, rs1_b6_val == 64, rs1_b0_val == -33, rs1_b1_val == 16
// opcode: sunpkd831 ; op1:x31; dest:x10; op1val:0x5540fcf909f810df;
TEST_RD_OP( sunpkd831, x10, x31, 0x0000000000000000, 0x5540fcf909f810df, x6, 16, x4)

inst_3:
// rs1==x3, rd==x30, rs1_b7_val == 127, rs1_b6_val == 0, rs1_b5_val == 127, rs1_b2_val == 64, rs1_b3_val == -128, rs1_b1_val == -9
// opcode: sunpkd831 ; op1:x3; dest:x30; op1val:0x7f007f038040f7f8;
TEST_RD_OP( sunpkd831, x30, x3, 0x0000000000000000, 0x7f007f038040f7f8, x6, 24, x4)

inst_4:
// rs1==x13, rd==x23, rs1_b7_val == -65, rs1_b6_val == 85, rs1_b5_val == 8
// opcode: sunpkd831 ; op1:x13; dest:x23; op1val:0xbf5508fcf840bf05;
TEST_RD_OP( sunpkd831, x23, x13, 0x0000000000000000, 0xbf5508fcf840bf05, x6, 32, x4)

inst_5:
// rs1==x30, rd==x18, rs1_b7_val == -33, rs1_b4_val == -65, rs1_b1_val == 8, rs1_b2_val == -65, rs1_b3_val == -65, rs1_b0_val == 4
// opcode: sunpkd831 ; op1:x30; dest:x18; op1val:0xdff803bfbfbf0804;
TEST_RD_OP( sunpkd831, x18, x30, 0x0000000000000000, 0xdff803bfbfbf0804, x6, 40, x4)

inst_6:
// rs1==x8, rd==x22, rs1_b7_val == -17, rs1_b0_val == -1
// opcode: sunpkd831 ; op1:x8; dest:x22; op1val:0xef00fa0703c007ff;
TEST_RD_OP( sunpkd831, x22, x8, 0x0000000000000000, 0xef00fa0703c007ff, x6, 48, x4)

inst_7:
// rs1==x10, rd==x12, rs1_b7_val == -9, rs1_b1_val == 127, rs1_b3_val == 0, rs1_b2_val == -86, rs1_b4_val == 1
// opcode: sunpkd831 ; op1:x10; dest:x12; op1val:0xf706070100aa7ff6;
TEST_RD_OP( sunpkd831, x12, x10, 0x0000000000000000, 0xf706070100aa7ff6, x6, 56, x4)

inst_8:
// rs1==x5, rd==x29, rs1_b7_val == -5, rs1_b5_val == -5, rs1_b0_val == 8, rs1_b3_val == -5, rs1_b4_val == 2
// opcode: sunpkd831 ; op1:x5; dest:x29; op1val:0xfb04fb02fbc01008;
TEST_RD_OP( sunpkd831, x29, x5, 0x0000000000000000, 0xfb04fb02fbc01008, x6, 64, x4)

inst_9:
// rs1==x14, rd==x16, rs1_b7_val == -3, rs1_b5_val == -65, rs1_b2_val == 32, rs1_b3_val == -17, rs1_b6_val == -5, rs1_b4_val == -86
// opcode: sunpkd831 ; op1:x14; dest:x16; op1val:0xfdfbbfaaef20c0c0;
TEST_RD_OP( sunpkd831, x16, x14, 0x0000000000000000, 0xfdfbbfaaef20c0c0, x6, 72, x4)

inst_10:
// rs1==x29, rd==x21, rs1_b7_val == -2, rs1_b4_val == -5, rs1_b6_val == 2, rs1_b3_val == 127, rs1_b2_val == 4, rs1_b5_val == 2
// opcode: sunpkd831 ; op1:x29; dest:x21; op1val:0xfe0202fb7f04083f;
TEST_RD_OP( sunpkd831, x21, x29, 0x0000000000000000, 0xfe0202fb7f04083f, x6, 80, x4)

inst_11:
// rs1==x26, rd==x27, rs1_b7_val == -128, rs1_b6_val == -1, rs1_b0_val == -5, rs1_b2_val == -2
// opcode: sunpkd831 ; op1:x26; dest:x27; op1val:0x80ff07c001fef6fb;
TEST_RD_OP( sunpkd831, x27, x26, 0x0000000000000000, 0x80ff07c001fef6fb, x6, 88, x4)

inst_12:
// rs1==x21, rd==x24, rs1_b7_val == 64, rs1_b6_val == -17, rs1_b3_val == 64, rs1_b4_val == 0
// opcode: sunpkd831 ; op1:x21; dest:x24; op1val:0x40ef090040f6fac0;
TEST_RD_OP( sunpkd831, x24, x21, 0x0000000000000000, 0x40ef090040f6fac0, x6, 96, x4)

inst_13:
// rs1==x1, rd==x17, rs1_b7_val == 32, rs1_b1_val == -86, rs1_b0_val == 2
// opcode: sunpkd831 ; op1:x1; dest:x17; op1val:0x20fc0907f63faa02;
TEST_RD_OP( sunpkd831, x17, x1, 0x0000000000000000, 0x20fc0907f63faa02, x6, 104, x4)

inst_14:
// rs1==x11, rd==x2, rs1_b7_val == 16, rs1_b2_val == 2, rs1_b0_val == -2, rs1_b6_val == 127
// opcode: sunpkd831 ; op1:x11; dest:x2; op1val:0x107f0708fc02fcfe;
TEST_RD_OP( sunpkd831, x2, x11, 0x0000000000000000, 0x107f0708fc02fcfe, x6, 112, x4)

inst_15:
// rs1==x15, rd==x5, rs1_b7_val == 8, rs1_b4_val == -128, rs1_b1_val == 0, rs1_b2_val == -128, rs1_b3_val == -3, rs1_b6_val == -3
// opcode: sunpkd831 ; op1:x15; dest:x5; op1val:0x8fd0280fd800003;
TEST_RD_OP( sunpkd831, x5, x15, 0x0000000000000000, 0x8fd0280fd800003, x6, 120, x4)

inst_16:
// rs1==x23, rd==x19, rs1_b7_val == 4, rs1_b3_val == -2, rs1_b6_val == 8, rs1_b1_val == -128, rs1_b0_val == -3
// opcode: sunpkd831 ; op1:x23; dest:x19; op1val:0x40806f8fe0680fd;
TEST_RD_OP( sunpkd831, x19, x23, 0x0000000000000000, 0x40806f8fe0680fd, x6, 128, x4)

inst_17:
// rs1==x17, rd==x31, rs1_b7_val == 2, rs1_b3_val == 2, rs1_b5_val == 16
// opcode: sunpkd831 ; op1:x17; dest:x31; op1val:0x20610bf02f9f9c0;
TEST_RD_OP( sunpkd831, x31, x17, 0x0000000000000000, 0x20610bf02f9f9c0, x6, 136, x4)

inst_18:
// rs1==x18, rd==x26, rs1_b7_val == 1, rs1_b2_val == -17, rs1_b1_val == -17, rs1_b4_val == 4, rs1_b6_val == 1
// opcode: sunpkd831 ; op1:x18; dest:x26; op1val:0x101070406efef02;
TEST_RD_OP( sunpkd831, x26, x18, 0x0000000000000000, 0x101070406efef02, x6, 144, x4)

inst_19:
// rs1==x20, rd==x1, rs1_b7_val == 0, 
// opcode: sunpkd831 ; op1:x20; dest:x1; op1val:0xff10013faa08fc;
TEST_RD_OP( sunpkd831, x1, x20, 0x0000000000000000, 0xff10013faa08fc, x6, 152, x4)

inst_20:
// rs1==x9, rd==x0, rs1_b7_val == -1, rs1_b3_val == 4, rs1_b5_val == -1
// opcode: sunpkd831 ; op1:x9; dest:x0; op1val:0xff07fff6043fc002;
TEST_RD_OP( sunpkd831, x0, x9, 0x0000000000000000, 0xff07fff6043fc002, x6, 160, x4)

inst_21:
// rs1==x4, rd==x25, rs1_b6_val == -86, rs1_b4_val == 64, rs1_b5_val == -86, rs1_b0_val == -17, rs1_b2_val == 85
// opcode: sunpkd831 ; op1:x4; dest:x25; op1val:0xfeaaaa400655c0ef;
TEST_RD_OP( sunpkd831, x25, x4, 0x0000000000000000, 0xfeaaaa400655c0ef, x6, 168, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_22:
// rs1==x6, rd==x8, rs1_b6_val == -65, rs1_b0_val == 32
// opcode: sunpkd831 ; op1:x6; dest:x8; op1val:0xffbf03c001ef0720;
TEST_RD_OP( sunpkd831, x8, x6, 0x0000000000000000, 0xffbf03c001ef0720, x1, 0, x3)

inst_23:
// rs1==x22, rd==x7, rs1_b1_val == -5, rs1_b2_val == -1, rs1_b6_val == -9, rs1_b4_val == -2, rs1_b0_val == 64
// opcode: sunpkd831 ; op1:x22; dest:x7; op1val:0xfcf7fafe06fffb40;
TEST_RD_OP( sunpkd831, x7, x22, 0x0000000000000000, 0xfcf7fafe06fffb40, x1, 8, x3)

inst_24:
// rs1==x19, rd==x9, rs1_b1_val == -3, rs1_b5_val == -3, rs1_b4_val == 127
// opcode: sunpkd831 ; op1:x19; dest:x9; op1val:0x5540fd7f00f9fdf6;
TEST_RD_OP( sunpkd831, x9, x19, 0x0000000000000000, 0x5540fd7f00f9fdf6, x1, 16, x3)

inst_25:
// rs1==x7, rd==x6, rs1_b1_val == -2, rs1_b4_val == 85
// opcode: sunpkd831 ; op1:x7; dest:x6; op1val:0xdfaa03550909fe40;
TEST_RD_OP( sunpkd831, x6, x7, 0x0000000000000000, 0xdfaa03550909fe40, x1, 24, x3)

inst_26:
// rs1==x0, rd==x20, rs1_b1_val == 32, rs1_b5_val == -128, rs1_b2_val == -5, rs1_b6_val == -2
// opcode: sunpkd831 ; op1:x0; dest:x20; op1val:0xfdfe80fcfbfb20df;
TEST_RD_OP( sunpkd831, x20, x0, 0x0000000000000000, 0xfdfe80fcfbfb20df, x1, 32, x3)

inst_27:
// rs1==x24, rd==x11, rs1_b1_val == 4, rs1_b3_val == -9
// opcode: sunpkd831 ; op1:x24; dest:x11; op1val:0xff3f0606f7df0440;
TEST_RD_OP( sunpkd831, x11, x24, 0x0000000000000000, 0xff3f0606f7df0440, x1, 40, x3)

inst_28:
// rs1==x28, rd==x13, rs1_b1_val == 2, rs1_b5_val == -33
// opcode: sunpkd831 ; op1:x28; dest:x13; op1val:0x3f07df40fcfb0220;
TEST_RD_OP( sunpkd831, x13, x28, 0x0000000000000000, 0x3f07df40fcfb0220, x1, 48, x3)

inst_29:
// rs1==x16, rd==x4, rs1_b1_val == 1, rs1_b4_val == 16, rs1_b3_val == 85
// opcode: sunpkd831 ; op1:x16; dest:x4; op1val:0xfe07df1055fa01fc;
TEST_RD_OP( sunpkd831, x4, x16, 0x0000000000000000, 0xfe07df1055fa01fc, x1, 56, x3)

inst_30:
// rs1==x12, rd==x14, rs1_b1_val == -1, rs1_b4_val == 32, rs1_b6_val == 16, rs1_b0_val == -9, rs1_b2_val == 1
// opcode: sunpkd831 ; op1:x12; dest:x14; op1val:0x9107f200001fff7;
TEST_RD_OP( sunpkd831, x14, x12, 0x0000000000000000, 0x9107f200001fff7, x1, 64, x3)

inst_31:
// rs1==x2, rd==x28, rs1_b0_val == -86, rs1_b5_val == -17
// opcode: sunpkd831 ; op1:x2; dest:x28; op1val:0x4009efbff7f604aa;
TEST_RD_OP( sunpkd831, x28, x2, 0x0000000000000000, 0x4009efbff7f604aa, x1, 72, x3)

inst_32:
// rs1_b0_val == 85, rs1_b5_val == 1
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x65501fb0055fb55;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0x65501fb0055fb55, x1, 80, x3)

inst_33:
// rs1_b0_val == 127, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xfc7fc0f85503fd7f;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0xfc7fc0f85503fd7f, x1, 88, x3)

inst_34:
// rs1_b4_val == -17, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x1040c0ef80bffe02;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0x1040c0ef80bffe02, x1, 96, x3)

inst_35:
// rs1_b4_val == -9, rs1_b5_val == 85
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xfff855f7f7df103f;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0xfff855f7f7df103f, x1, 104, x3)

inst_36:
// rs1_b4_val == -3, rs1_b2_val == 127
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xef55fdfb7f0207;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0xef55fdfb7f0207, x1, 112, x3)

inst_37:
// rs1_b0_val == -65, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x057f02012040bf;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0x057f02012040bf, x1, 120, x3)

inst_38:
// rs1_b4_val == -1, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x3efffff07df0508;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0x3efffff07df0508, x1, 128, x3)

inst_39:
// rs1_b3_val == -86, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x55580feaafe20f6;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0x55580feaafe20f6, x1, 136, x3)

inst_40:
// rs1_b3_val == -33, rs1_b5_val == 0, rs1_b6_val == -128
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x3800005df04fec0;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0x3800005df04fec0, x1, 144, x3)

inst_41:
// rs1_b6_val == -33, rs1_b2_val == -3
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x55df0901effdc07f;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0x55df0901effdc07f, x1, 152, x3)

inst_42:
// rs1_b0_val == 16, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xc0efdfef00f60110;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0xc0efdfef00f60110, x1, 160, x3)

inst_43:
// rs1_b0_val == 1, rs1_b5_val == -2, rs1_b2_val == 16
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xc001fef906103f01;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0xc001fef906103f01, x1, 168, x3)

inst_44:
// rs1_b3_val == 32, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x3fef01f920effcaa;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0x3fef01f920effcaa, x1, 176, x3)

inst_45:
// rs1_b6_val == 32, rs1_b5_val == 4
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xf9200407ef04fffb;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0xf9200407ef04fffb, x1, 184, x3)

inst_46:
// rs1_b3_val == -1, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x20f63f05ffc03f05;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0x20f63f05ffc03f05, x1, 192, x3)

inst_47:
// rs1_b2_val == -9, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xf7fcfe0855f7ffc0;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0xf7fcfe0855f7ffc0, x1, 200, x3)

inst_48:
// rs1_b5_val == -9, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x207f7fc05f703f7;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0x207f7fc05f703f7, x1, 208, x3)

inst_49:
// rs1_b2_val == 8, rs1_b3_val == 16
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xdf09f8001008c0ef;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0xdf09f8001008c0ef, x1, 216, x3)

inst_50:
// rs1_b5_val == 64, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x7ffd40fe02200720;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0x7ffd40fe02200720, x1, 224, x3)

inst_51:
// rs1_b5_val == 32, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xdf1020df0305f6f8;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0xdf1020df0305f6f8, x1, 232, x3)

inst_52:
// rs1_b1_val == 85, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x6c00206fd085505;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0x6c00206fd085505, x1, 240, x3)

inst_53:
// rs1_b1_val == -33, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x40f900f70005df05;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0x40f900f70005df05, x1, 248, x3)

inst_54:
// rs1_b0_val == 0, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xfa04dffcf9aac000;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0xfa04dffcf9aac000, x1, 256, x3)

inst_55:
// rs1_b2_val == 0, 
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0x3f55fe000500f7f9;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0x3f55fe000500f7f9, x1, 264, x3)

inst_56:
// rs1_b7_val == -1, rs1_b3_val == 4, rs1_b5_val == -1
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xff07fff6043fc002;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0xff07fff6043fc002, x1, 272, x3)

inst_57:
// rs1_b1_val == 32, rs1_b5_val == -128, rs1_b2_val == -5, rs1_b6_val == -2
// opcode: sunpkd831 ; op1:x30; dest:x31; op1val:0xfdfe80fcfbfb20df;
TEST_RD_OP( sunpkd831, x31, x30, 0x0000000000000000, 0xfdfe80fcfbfb20df, x1, 280, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 36*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
