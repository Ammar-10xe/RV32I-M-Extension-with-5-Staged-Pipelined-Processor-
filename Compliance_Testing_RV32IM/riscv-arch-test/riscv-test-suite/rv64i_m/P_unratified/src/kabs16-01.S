
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kabs16 instruction of the RISC-V RV64PZicsr extension for the kabs16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kabs16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1==x0, rd==x29, rs1_h0_val == -32768, rs1_h2_val == -32768
// opcode: kabs16 ; op1:x0; dest:x29; op1val:0xfff88000c0008000;
TEST_PKR_OP( kabs16, x29, x0, 0x0000000000000000, 0xfff88000c0008000, x0, x7, 0, x12)

inst_1:
// rs1==x14, rd==x10, rs1_h3_val == -21846, rs1_h0_val == -33, rs1_h2_val == -3, rs1_h1_val == -4097
// opcode: kabs16 ; op1:x14; dest:x10; op1val:0xaaaafffdefffffdf;
TEST_PKR_OP( kabs16, x10, x14, 0x0000000000000000, 0xaaaafffdefffffdf, x14, x7, 16, x12)

inst_2:
// rs1==x31, rd==x25, rs1_h3_val == 21845, rs1_h2_val == -33, rs1_h1_val == 2048
// opcode: kabs16 ; op1:x31; dest:x25; op1val:0x5555ffdf08000005;
TEST_PKR_OP( kabs16, x25, x31, 0x0000000000000000, 0x5555ffdf08000005, x31, x7, 32, x12)

inst_3:
// rs1==x15, rd==x14, rs1_h3_val == 32767, rs1_h0_val == -16385
// opcode: kabs16 ; op1:x15; dest:x14; op1val:0x7fff0005efffbfff;
TEST_PKR_OP( kabs16, x14, x15, 0x0000000000000000, 0x7fff0005efffbfff, x15, x7, 48, x12)

inst_4:
// rs1==x29, rd==x18, rs1_h3_val == -16385, rs1_h0_val == 64, rs1_h1_val == -8193, rs1_h2_val == 32767
// opcode: kabs16 ; op1:x29; dest:x18; op1val:0xbfff7fffdfff0040;
TEST_PKR_OP( kabs16, x18, x29, 0x0000000000000000, 0xbfff7fffdfff0040, x29, x7, 64, x12)

inst_5:
// rs1==x17, rd==x21, rs1_h3_val == -8193, rs1_h1_val == -5, rs1_h0_val == 2
// opcode: kabs16 ; op1:x17; dest:x21; op1val:0xdfff8000fffb0002;
TEST_PKR_OP( kabs16, x21, x17, 0x0000000000000000, 0xdfff8000fffb0002, x17, x7, 80, x12)

inst_6:
// rs1==x16, rd==x4, rs1_h3_val == -4097, rs1_h2_val == 8192, rs1_h0_val == 4
// opcode: kabs16 ; op1:x16; dest:x4; op1val:0xefff2000fff80004;
TEST_PKR_OP( kabs16, x4, x16, 0x0000000000000000, 0xefff2000fff80004, x16, x7, 96, x12)

inst_7:
// rs1==x24, rd==x27, rs1_h3_val == -2049, rs1_h1_val == -1, rs1_h0_val == -3
// opcode: kabs16 ; op1:x24; dest:x27; op1val:0xf7ff0007fffffffd;
TEST_PKR_OP( kabs16, x27, x24, 0x0000000000000000, 0xf7ff0007fffffffd, x24, x7, 112, x12)

inst_8:
// rs1==x5, rd==x13, rs1_h3_val == -1025, rs1_h2_val == 32, rs1_h1_val == 64
// opcode: kabs16 ; op1:x5; dest:x13; op1val:0xfbff00200040fff8;
TEST_PKR_OP( kabs16, x13, x5, 0x0000000000000000, 0xfbff00200040fff8, x5, x7, 128, x12)

inst_9:
// rs1==x23, rd==x9, rs1_h3_val == -513, rs1_h0_val == -5, rs1_h2_val == -1025, rs1_h1_val == -65
// opcode: kabs16 ; op1:x23; dest:x9; op1val:0xfdfffbffffbffffb;
TEST_PKR_OP( kabs16, x9, x23, 0x0000000000000000, 0xfdfffbffffbffffb, x23, x7, 144, x12)

inst_10:
// rs1==x6, rd==x8, rs1_h3_val == -257, rs1_h2_val == 21845
// opcode: kabs16 ; op1:x6; dest:x8; op1val:0xfeff5555fffafffc;
TEST_PKR_OP( kabs16, x8, x6, 0x0000000000000000, 0xfeff5555fffafffc, x6, x7, 160, x12)

inst_11:
// rs1==x8, rd==x24, rs1_h3_val == -129, rs1_h2_val == -1, rs1_h1_val == -3
// opcode: kabs16 ; op1:x8; dest:x24; op1val:0xff7ffffffffdfffd;
TEST_PKR_OP( kabs16, x24, x8, 0x0000000000000000, 0xff7ffffffffdfffd, x8, x7, 176, x12)

inst_12:
// rs1==x20, rd==x16, rs1_h3_val == -65, rs1_h2_val == 512
// opcode: kabs16 ; op1:x20; dest:x16; op1val:0xffbf02000800fffa;
TEST_PKR_OP( kabs16, x16, x20, 0x0000000000000000, 0xffbf02000800fffa, x20, x7, 192, x12)

inst_13:
// rs1==x10, rd==x6, rs1_h3_val == -33, rs1_h1_val == -9
// opcode: kabs16 ; op1:x10; dest:x6; op1val:0xffdf2000fff70009;
TEST_PKR_OP( kabs16, x6, x10, 0x0000000000000000, 0xffdf2000fff70009, x10, x7, 208, x12)

inst_14:
// rs1==x2, rd==x30, rs1_h3_val == -17, rs1_h2_val == 16384, rs1_h0_val == -9
// opcode: kabs16 ; op1:x2; dest:x30; op1val:0xffef40000006fff7;
TEST_PKR_OP( kabs16, x30, x2, 0x0000000000000000, 0xffef40000006fff7, x2, x7, 224, x12)

inst_15:
// rs1==x22, rd==x11, rs1_h3_val == -9, rs1_h0_val == -1
// opcode: kabs16 ; op1:x22; dest:x11; op1val:0xfff720003fffffff;
TEST_PKR_OP( kabs16, x11, x22, 0x0000000000000000, 0xfff720003fffffff, x22, x7, 240, x12)

inst_16:
// rs1==x13, rd==x17, rs1_h3_val == -5, rs1_h1_val == 16384, rs1_h2_val == -2
// opcode: kabs16 ; op1:x13; dest:x17; op1val:0xfffbfffe40000007;
TEST_PKR_OP( kabs16, x17, x13, 0x0000000000000000, 0xfffbfffe40000007, x13, x7, 256, x12)

inst_17:
// rs1==x3, rd==x26, rs1_h3_val == -3, rs1_h2_val == -8193, rs1_h1_val == -257
// opcode: kabs16 ; op1:x3; dest:x26; op1val:0xfffddffffeff0009;
TEST_PKR_OP( kabs16, x26, x3, 0x0000000000000000, 0xfffddffffeff0009, x3, x7, 272, x12)

inst_18:
// rs1==x4, rd==x1, rs1_h3_val == -2, rs1_h2_val == -9
// opcode: kabs16 ; op1:x4; dest:x1; op1val:0xfffefff73ffffffb;
TEST_PKR_OP( kabs16, x1, x4, 0x0000000000000000, 0xfffefff73ffffffb, x4, x7, 288, x12)

inst_19:
// rs1==x11, rd==x3, rs1_h3_val == -32768, rs1_h1_val == -2
// opcode: kabs16 ; op1:x11; dest:x3; op1val:0x8000fffffffe8000;
TEST_PKR_OP( kabs16, x3, x11, 0x0000000000000000, 0x8000fffffffe8000, x11, x7, 304, x4)

inst_20:
// rs1==x28, rd==x22, rs1_h3_val == 16384, rs1_h0_val == -1025
// opcode: kabs16 ; op1:x28; dest:x22; op1val:0x4000fff8c000fbff;
TEST_PKR_OP( kabs16, x22, x28, 0x0000000000000000, 0x4000fff8c000fbff, x28, x7, 320, x4)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_21:
// rs1==x19, rd==x12, rs1_h3_val == 8192, rs1_h0_val == 8192, rs1_h1_val == -32768
// opcode: kabs16 ; op1:x19; dest:x12; op1val:0x20007fff80002000;
TEST_PKR_OP( kabs16, x12, x19, 0x0000000000000000, 0x20007fff80002000, x19, x3, 0, x4)

inst_22:
// rs1==x25, rd==x15, rs1_h3_val == 4096, rs1_h1_val == -33
// opcode: kabs16 ; op1:x25; dest:x15; op1val:0x10004000ffdf8000;
TEST_PKR_OP( kabs16, x15, x25, 0x0000000000000000, 0x10004000ffdf8000, x25, x3, 16, x4)

inst_23:
// rs1==x26, rd==x31, rs1_h3_val == 2048, rs1_h0_val == 32
// opcode: kabs16 ; op1:x26; dest:x31; op1val:0x8003ffffffa0020;
TEST_PKR_OP( kabs16, x31, x26, 0x0000000000000000, 0x8003ffffffa0020, x26, x3, 32, x4)

inst_24:
// rs1==x12, rd==x2, rs1_h3_val == 1024, 
// opcode: kabs16 ; op1:x12; dest:x2; op1val:0x40002004000fffb;
TEST_PKR_OP( kabs16, x2, x12, 0x0000000000000000, 0x40002004000fffb, x12, x3, 48, x4)

inst_25:
// rs1==x9, rd==x23, rs1_h3_val == 512, rs1_h0_val == 1
// opcode: kabs16 ; op1:x9; dest:x23; op1val:0x200fff600030001;
TEST_PKR_OP( kabs16, x23, x9, 0x0000000000000000, 0x200fff600030001, x9, x3, 64, x4)

inst_26:
// rs1==x21, rd==x28, rs1_h3_val == 256, rs1_h0_val == -17, rs1_h2_val == 2
// opcode: kabs16 ; op1:x21; dest:x28; op1val:0x10000020006ffef;
TEST_PKR_OP( kabs16, x28, x21, 0x0000000000000000, 0x10000020006ffef, x21, x3, 80, x4)

inst_27:
// rs1==x30, rd==x7, rs1_h3_val == 128, rs1_h0_val == 1024
// opcode: kabs16 ; op1:x30; dest:x7; op1val:0x80fffec0000400;
TEST_PKR_OP( kabs16, x7, x30, 0x0000000000000000, 0x80fffec0000400, x30, x3, 96, x4)

inst_28:
// rs1==x7, rd==x5, rs1_h3_val == 64, rs1_h0_val == 512
// opcode: kabs16 ; op1:x7; dest:x5; op1val:0x400003fff80200;
TEST_PKR_OP( kabs16, x5, x7, 0x0000000000000000, 0x400003fff80200, x7, x3, 112, x4)

inst_29:
// rs1==x18, rd==x19, rs1_h3_val == 32, rs1_h0_val == -8193
// opcode: kabs16 ; op1:x18; dest:x19; op1val:0x2055550007dfff;
TEST_PKR_OP( kabs16, x19, x18, 0x0000000000000000, 0x2055550007dfff, x18, x3, 128, x4)

inst_30:
// rs1==x27, rd==x20, rs1_h3_val == 16, rs1_h1_val == 128
// opcode: kabs16 ; op1:x27; dest:x20; op1val:0x103fff0080fff6;
TEST_PKR_OP( kabs16, x20, x27, 0x0000000000000000, 0x103fff0080fff6, x27, x3, 144, x4)

inst_31:
// rs1==x1, rd==x0, rs1_h3_val == 8, rs1_h0_val == -4097, rs1_h1_val == 0
// opcode: kabs16 ; op1:x1; dest:x0; op1val:0x08fffa0000efff;
TEST_PKR_OP( kabs16, x0, x1, 0x0000000000000000, 0x08fffa0000efff, x1, x3, 160, x4)

inst_32:
// rs1_h3_val == 4, rs1_h1_val == 2
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x04800000020007;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x04800000020007, x30, x3, 176, x4)

inst_33:
// rs1_h0_val == 4096, rs1_h1_val == -513, rs1_h2_val == 2048
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xfff60800fdff1000;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xfff60800fdff1000, x30, x3, 192, x4)

inst_34:
// rs1_h0_val == 2048, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xffdffff680000800;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xffdffff680000800, x30, x3, 208, x4)

inst_35:
// rs1_h0_val == 256, rs1_h1_val == 1
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x55553fff00010100;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x55553fff00010100, x30, x3, 224, x4)

inst_36:
// rs1_h0_val == 128, rs1_h1_val == 8
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xfffafffe00080080;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xfffafffe00080080, x30, x3, 240, x4)

inst_37:
// rs1_h0_val == 16, rs1_h1_val == -129
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xaaaa8000ff7f0010;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xaaaa8000ff7f0010, x30, x3, 256, x4)

inst_38:
// rs1_h0_val == 8, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x5555800000020008;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x5555800000020008, x30, x3, 272, x4)

inst_39:
// rs1_h0_val == 0, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xbfff0007fff80000;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xbfff0007fff80000, x30, x3, 288, x4)

inst_40:
// rs1_h3_val == 2, rs1_h0_val == -2
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x020200effffffe;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x020200effffffe, x30, x3, 304, x4)

inst_41:
// rs1_h3_val == 1, rs1_h2_val == 4, rs1_h0_val == 21845
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x01000408005555;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x01000408005555, x30, x3, 320, x4)

inst_42:
// rs1_h3_val == 0, rs1_h2_val == 64
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x0000403fff0040;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x0000403fff0040, x30, x3, 336, x4)

inst_43:
// rs1_h3_val == -1, rs1_h1_val == -2049
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xffff0005f7fffff8;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xffff0005f7fffff8, x30, x3, 352, x4)

inst_44:
// rs1_h2_val == -21846, rs1_h0_val == -21846
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xfffaaaaafffeaaaa;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xfffaaaaafffeaaaa, x30, x3, 368, x4)

inst_45:
// rs1_h2_val == -16385, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xfffabfffffdf0007;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xfffabfffffdf0007, x30, x3, 384, x4)

inst_46:
// rs1_h2_val == -4097, rs1_h0_val == 32767
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x3fffefff00407fff;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x3fffefff00407fff, x30, x3, 400, x4)

inst_47:
// rs1_h2_val == -2049, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x400f7ffc000ffdf;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x400f7ffc000ffdf, x30, x3, 416, x4)

inst_48:
// rs1_h2_val == -513, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x5555fdffffdf7fff;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x5555fdffffdf7fff, x30, x3, 432, x4)

inst_49:
// rs1_h2_val == -257, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x2000fefffff70002;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x2000fefffff70002, x30, x3, 448, x4)

inst_50:
// rs1_h2_val == -129, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x04ff7fdffffff8;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x04ff7fdffffff8, x30, x3, 464, x4)

inst_51:
// rs1_h2_val == 16, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xfdff001000050009;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xfdff001000050009, x30, x3, 480, x4)

inst_52:
// rs1_h2_val == 8, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xfff80008feff8000;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xfff80008feff8000, x30, x3, 496, x4)

inst_53:
// rs1_h2_val == 1, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xfeff000100060001;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xfeff000100060001, x30, x3, 512, x4)

inst_54:
// rs1_h2_val == 0, rs1_h1_val == -16385
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x10000000bfff0020;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x10000000bfff0020, x30, x3, 528, x4)

inst_55:
// rs1_h1_val == -21846, rs1_h0_val == -513
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xfff80000aaaafdff;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xfff80000aaaafdff, x30, x3, 544, x4)

inst_56:
// rs1_h1_val == 21845, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xfff9000655553fff;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xfff9000655553fff, x30, x3, 560, x4)

inst_57:
// rs1_h1_val == 32767, rs1_h2_val == -17
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x40ffef7fffffef;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x40ffef7fffffef, x30, x3, 576, x4)

inst_58:
// rs1_h1_val == -1025, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xfffc3ffffbffffef;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xfffc3ffffbffffef, x30, x3, 592, x4)

inst_59:
// rs1_h1_val == -17, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xc000f7ffffef0000;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xc000f7ffffef0000, x30, x3, 608, x4)

inst_60:
// rs1_h1_val == 8192, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xffeffffe20002000;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xffeffffe20002000, x30, x3, 624, x4)

inst_61:
// rs1_h1_val == 4096, rs1_h2_val == 1024
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xffdf04001000ffdf;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xffdf04001000ffdf, x30, x3, 640, x4)

inst_62:
// rs1_h1_val == 1024, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x3ffffff60400ffdf;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x3ffffff60400ffdf, x30, x3, 656, x4)

inst_63:
// rs1_h1_val == 512, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xfff6f7ff02000010;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xfff6f7ff02000010, x30, x3, 672, x4)

inst_64:
// rs1_h1_val == 256, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x403fff01005555;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x403fff01005555, x30, x3, 688, x4)

inst_65:
// rs1_h1_val == 32, rs1_h0_val == -257
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x100bfff0020feff;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x100bfff0020feff, x30, x3, 704, x4)

inst_66:
// rs1_h1_val == 16, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x800fff80010fffa;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x800fff80010fffa, x30, x3, 720, x4)

inst_67:
// rs1_h1_val == 4, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xfffa00200004ffdf;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xfffa00200004ffdf, x30, x3, 736, x4)

inst_68:
// rs1_h2_val == -65, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x3fffffbffeff0003;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x3fffffbffeff0003, x30, x3, 752, x4)

inst_69:
// rs1_h0_val == -2049, rs1_h2_val == 128
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xdfff00800003f7ff;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xdfff00800003f7ff, x30, x3, 768, x4)

inst_70:
// rs1_h2_val == -5, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x10fffb20000080;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x10fffb20000080, x30, x3, 784, x4)

inst_71:
// rs1_h0_val == -129, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x400bfff0001ff7f;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x400bfff0001ff7f, x30, x3, 800, x4)

inst_72:
// rs1_h0_val == -65, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xfff7ffefaaaaffbf;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xfff7ffefaaaaffbf, x30, x3, 816, x4)

inst_73:
// rs1_h2_val == 4096, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xffdf100000050000;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xffdf100000050000, x30, x3, 832, x4)

inst_74:
// rs1_h2_val == 256, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x40000100ff7fbfff;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x40000100ff7fbfff, x30, x3, 848, x4)

inst_75:
// rs1_h0_val == 16384, 
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0xfffac000fffe4000;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0xfffac000fffe4000, x30, x3, 864, x4)

inst_76:
// rs1_h3_val == 8, rs1_h0_val == -4097, rs1_h1_val == 0
// opcode: kabs16 ; op1:x30; dest:x31; op1val:0x08fffa0000efff;
TEST_PKR_OP( kabs16, x31, x30, 0x0000000000000000, 0x08fffa0000efff, x30, x3, 880, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 42*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 112*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
