
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukmsr64 instruction of the RISC-V RV64PZicsr extension for the ukmsr64 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukmsr64)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x6, rs2==x19, rd==x6, rs1_w0_val == 0, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 4096, rs2_w1_val == 512
// opcode: ukmsr64 ; op1:x6; op2:x19; dest:x6; op1val:0x0000100000000000;  op2val:0x0000020000000009
TEST_PK64_PNN_OP(ukmsr64, x6, $rd_hi, x6, x19, 0x0000000000000000, $correctval_hi, 0x0000100000000000, 0x0000020000000009, x6, x1, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x30, rs2==x27, rd==x24, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 4294443007, rs1_w0_val == 134217728, rs1_w1_val == 4294443007, rs2_w0_val == 4294963199
// opcode: ukmsr64 ; op1:x30; op2:x27; dest:x24; op1val:0xfff7ffff08000000;  op2val:0xfff7ffffffffefff
TEST_PK64_PNN_OP(ukmsr64, x24, $rd_hi, x30, x27, 0x0000000000000000, $correctval_hi, 0xfff7ffff08000000, 0xfff7ffffffffefff, x30, x1, 24, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x4, rs2==x4, rd==x8, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 4294950911, rs1_w0_val == 4278190079, rs2_w1_val == 268435456, rs2_w0_val == 4278190079
// opcode: ukmsr64 ; op1:x4; op2:x4; dest:x8; op1val:0xffffbffffeffffff;  op2val:0x10000000feffffff
TEST_PK64_PNN_OP(ukmsr64, x8, $rd_hi, x4, x4, 0x0000000000000000, $correctval_hi, 0xffffbffffeffffff, 0x10000000feffffff, x4, x1, 48, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x16, rs2==x16, rd==x16, rs2_w1_val == 2863311530, rs2_w0_val == 4294836223, rs1_w1_val == 4294966783
// opcode: ukmsr64 ; op1:x16; op2:x16; dest:x16; op1val:0xfffffdff00000000;  op2val:0xaaaaaaaafffdffff
TEST_PK64_PNN_OP(ukmsr64, x16, $rd_hi, x16, x16, 0x0000000000000000, $correctval_hi, 0xfffffdff00000000, 0xaaaaaaaafffdffff, x16, x1, 72, x3)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x18, rd==x18, rs2_w1_val == 1431655765, rs1_w0_val == 3221225471, rs2_w0_val == 268435456, rs1_w1_val == 2147483647
// opcode: ukmsr64 ; op1:x5; op2:x18; dest:x18; op1val:0x7fffffffbfffffff;  op2val:0x5555555510000000
TEST_PK64_PNN_OP(ukmsr64, x18, $rd_hi, x5, x18, 0x0000000000000000, $correctval_hi, 0x7fffffffbfffffff, 0x5555555510000000, x5, x1, 96, x3)

inst_5:
// rs1==x10, rs2==x14, rd==x22, rs2_w1_val == 2147483647, rs1_w1_val == 4294959103, rs2_w0_val == 256, rs1_w0_val == 4294967295
// opcode: ukmsr64 ; op1:x10; op2:x14; dest:x22; op1val:0xffffdfffffffffff;  op2val:0x7fffffff00000100
TEST_PK64_PNN_OP(ukmsr64, x22, $rd_hi, x10, x14, 0x0000000000000000, $correctval_hi, 0xffffdfffffffffff, 0x7fffffff00000100, x10, x1, 120, x3)

inst_6:
// rs1==x13, rs2==x31, rd==x20, rs2_w1_val == 3221225471, rs2_w0_val == 1431655765, rs1_w1_val == 4294836223
// opcode: ukmsr64 ; op1:x13; op2:x31; dest:x20; op1val:0xfffdffffffffffff;  op2val:0xbfffffff55555555
TEST_PK64_PNN_OP(ukmsr64, x20, $rd_hi, x13, x31, 0x0000000000000000, $correctval_hi, 0xfffdffffffffffff, 0xbfffffff55555555, x13, x1, 144, x3)

inst_7:
// rs1==x29, rs2==x20, rd==x30, rs2_w1_val == 3758096383, rs2_w0_val == 131072, rs1_w1_val == 4294967291, rs1_w0_val == 268435456
// opcode: ukmsr64 ; op1:x29; op2:x20; dest:x30; op1val:0xfffffffb10000000;  op2val:0xdfffffff00020000
TEST_PK64_PNN_OP(ukmsr64, x30, $rd_hi, x29, x20, 0x0000000000000000, $correctval_hi, 0xfffffffb10000000, 0xdfffffff00020000, x29, x1, 168, x3)

inst_8:
// rs1==x0, rs2==x29, rd==x14, rs2_w1_val == 4026531839, rs2_w0_val == 4294967293, rs1_w1_val == 4294967294
// opcode: ukmsr64 ; op1:x0; op2:x29; dest:x14; op1val:0xfffffffe10000000;  op2val:0xeffffffffffffffd
TEST_PK64_PNN_OP(ukmsr64, x14, $rd_hi, x0, x29, 0x0000000000000000, $correctval_hi, 0xfffffffe10000000, 0xeffffffffffffffd, x0, x1, 192, x3)

inst_9:
// rs1==x25, rs2==x24, rd==x2, rs2_w1_val == 4160749567, 
// opcode: ukmsr64 ; op1:x25; op2:x24; dest:x2; op1val:0x0000001300000006;  op2val:0xf7ffffff10000000
TEST_PK64_PNN_OP(ukmsr64, x2, $rd_hi, x25, x24, 0x0000000000000000, $correctval_hi, 0x0000001300000006, 0xf7ffffff10000000, x25, x1, 216, x3)

inst_10:
// rs1==x15, rs2==x12, rd==x10, rs2_w1_val == 4227858431, rs1_w0_val == 67108864, rs1_w1_val == 3758096383, rs2_w0_val == 8192
// opcode: ukmsr64 ; op1:x15; op2:x12; dest:x10; op1val:0xdfffffff04000000;  op2val:0xfbffffff00002000
TEST_PK64_PNN_OP(ukmsr64, x10, $rd_hi, x15, x12, 0x0000000000000000, $correctval_hi, 0xdfffffff04000000, 0xfbffffff00002000, x15, x1, 240, x3)

inst_11:
// rs1==x31, rs2==x6, rd==x4, rs2_w1_val == 4261412863, rs1_w0_val == 4294967039, rs1_w1_val == 262144
// opcode: ukmsr64 ; op1:x31; op2:x6; dest:x4; op1val:0x00040000fffffeff;  op2val:0xfdffffffffffefff
TEST_PK64_PNN_OP(ukmsr64, x4, $rd_hi, x31, x6, 0x0000000000000000, $correctval_hi, 0x00040000fffffeff, 0xfdffffffffffefff, x31, x1, 264, x3)

inst_12:
// rs1==x11, rs2==x17, rd==x26, rs2_w1_val == 4278190079, rs1_w1_val == 1
// opcode: ukmsr64 ; op1:x11; op2:x17; dest:x26; op1val:0x0000000100000009;  op2val:0xfeffffff10000000
TEST_PK64_PNN_OP(ukmsr64, x26, $rd_hi, x11, x17, 0x0000000000000000, $correctval_hi, 0x0000000100000009, 0xfeffffff10000000, x11, x1, 288, x3)

inst_13:
// rs1==x27, rs2==x28, rd==x12, rs2_w1_val == 4286578687, rs2_w0_val == 32
// opcode: ukmsr64 ; op1:x27; op2:x28; dest:x12; op1val:0x0000000600000000;  op2val:0xff7fffff00000020
TEST_PK64_PNN_OP(ukmsr64, x12, $rd_hi, x27, x28, 0x0000000000000000, $correctval_hi, 0x0000000600000000, 0xff7fffff00000020, x27, x1, 312, x3)

inst_14:
// rs1==x22, rs2==x9, rd==x28, rs2_w1_val == 4290772991, rs2_w0_val == 4294966783, rs1_w0_val == 8388608
// opcode: ukmsr64 ; op1:x22; op2:x9; dest:x28; op1val:0xfff7ffff00800000;  op2val:0xffbffffffffffdff
TEST_PK64_PNN_OP(ukmsr64, x28, $rd_hi, x22, x9, 0x0000000000000000, $correctval_hi, 0xfff7ffff00800000, 0xffbffffffffffdff, x22, x1, 336, x3)

inst_15:
// rs1==x20, rs2==x10, rs2_w1_val == 4292870143, rs1_w1_val == 16777216, rs1_w0_val == 8192, rs2_w0_val == 4026531839
// opcode: ukmsr64 ; op1:x20; op2:x10; dest:x4; op1val:0x0100000000002000;  op2val:0xffdfffffefffffff
TEST_PK64_PNN_OP(ukmsr64, x4, $rd_hi, x20, x10, 0x0000000000000000, $correctval_hi, 0x0100000000002000, 0xffdfffffefffffff, x20, x1, 360, x15)

inst_16:
// rs1==x2, rs2==x3, rs2_w1_val == 4293918719, rs1_w0_val == 512, rs1_w1_val == 1048576, rs2_w0_val == 4160749567
// opcode: ukmsr64 ; op1:x2; op2:x3; dest:x13; op1val:0x0010000000000200;  op2val:0xffeffffff7ffffff
TEST_PK64_PNN_OP(ukmsr64, x13, $rd_hi, x2, x3, 0x0000000000000000, $correctval_hi, 0x0010000000000200, 0xffeffffff7ffffff, x2, x1, 384, x15)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_17:
// rs1==x17, rs2==x22, rs2_w1_val == 4294705151, rs1_w1_val == 4294934527, rs1_w0_val == 4286578687, rs2_w0_val == 4294967287
// opcode: ukmsr64 ; op1:x17; op2:x22; dest:x29; op1val:0xffff7fffff7fffff;  op2val:0xfffbfffffffffff7
TEST_PK64_PNN_OP(ukmsr64, x29, $rd_hi, x17, x22, 0x0000000000000000, $correctval_hi, 0xffff7fffff7fffff, 0xfffbfffffffffff7, x17, x4, 0, x15)

inst_18:
// rs1==x19, rs2==x23, rs2_w1_val == 4294836223, 
// opcode: ukmsr64 ; op1:x19; op2:x23; dest:x28; op1val:0x0000000f0000000d;  op2val:0xfffdffff0000000c
TEST_PK64_PNN_OP(ukmsr64, x28, $rd_hi, x19, x23, 0x0000000000000000, $correctval_hi, 0x0000000f0000000d, 0xfffdffff0000000c, x19, x4, 24, x15)

inst_19:
// rs1==x14, rs2==x26, rs2_w1_val == 4294901759, rs1_w0_val == 2097152
// opcode: ukmsr64 ; op1:x14; op2:x26; dest:x9; op1val:0x0000001300200000;  op2val:0xfffeffff10000000
TEST_PK64_PNN_OP(ukmsr64, x9, $rd_hi, x14, x26, 0x0000000000000000, $correctval_hi, 0x0000001300200000, 0xfffeffff10000000, x14, x4, 48, x15)

inst_20:
// rs1==x1, rs2==x2, rs2_w1_val == 4294934527, rs1_w1_val == 16, rs1_w0_val == 4294967294
// opcode: ukmsr64 ; op1:x1; op2:x2; dest:x26; op1val:0x00000010fffffffe;  op2val:0xffff7fff00000006
TEST_PK64_PNN_OP(ukmsr64, x26, $rd_hi, x1, x2, 0x0000000000000000, $correctval_hi, 0x00000010fffffffe, 0xffff7fff00000006, x1, x4, 72, x15)

inst_21:
// rs1==x26, rs2==x13, rs2_w1_val == 4294950911, rs2_w0_val == 4294967291, rs1_w0_val == 64, rs1_w1_val == 16384
// opcode: ukmsr64 ; op1:x26; op2:x13; dest:x6; op1val:0x0000400000000040;  op2val:0xffffbffffffffffb
TEST_PK64_PNN_OP(ukmsr64, x6, $rd_hi, x26, x13, 0x0000000000000000, $correctval_hi, 0x0000400000000040, 0xffffbffffffffffb, x26, x4, 96, x15)

inst_22:
// rs1==x3, rs2==x8, rs2_w1_val == 4294959103, rs1_w0_val == 4227858431, rs1_w1_val == 8, rs2_w0_val == 0
// opcode: ukmsr64 ; op1:x3; op2:x8; dest:x30; op1val:0x00000008fbffffff;  op2val:0xffffdfff00000000
TEST_PK64_PNN_OP(ukmsr64, x30, $rd_hi, x3, x8, 0x0000000000000000, $correctval_hi, 0x00000008fbffffff, 0xffffdfff00000000, x3, x4, 120, x15)

inst_23:
// rs1==x28, rs2==x7, rs2_w1_val == 4294963199, rs1_w1_val == 4290772991
// opcode: ukmsr64 ; op1:x28; op2:x7; dest:x10; op1val:0xffbfffff0000000f;  op2val:0xffffefffefffffff
TEST_PK64_PNN_OP(ukmsr64, x10, $rd_hi, x28, x7, 0x0000000000000000, $correctval_hi, 0xffbfffff0000000f, 0xffffefffefffffff, x28, x4, 144, x15)

inst_24:
// rs1==x7, rs2==x21, rs2_w1_val == 4294965247, 
// opcode: ukmsr64 ; op1:x7; op2:x21; dest:x6; op1val:0x0000000b00800000;  op2val:0xfffff7ff00000100
TEST_PK64_PNN_OP(ukmsr64, x6, $rd_hi, x7, x21, 0x0000000000000000, $correctval_hi, 0x0000000b00800000, 0xfffff7ff00000100, x7, x4, 168, x15)

inst_25:
// rs1==x12, rs2==x5, rs2_w1_val == 4294966271, rs2_w0_val == 2147483647, rs1_w0_val == 2048, rs1_w1_val == 128
// opcode: ukmsr64 ; op1:x12; op2:x5; dest:x29; op1val:0x0000008000000800;  op2val:0xfffffbff7fffffff
TEST_PK64_PNN_OP(ukmsr64, x29, $rd_hi, x12, x5, 0x0000000000000000, $correctval_hi, 0x0000008000000800, 0xfffffbff7fffffff, x12, x4, 192, x15)

inst_26:
// rs1==x23, rs2==x11, rs2_w1_val == 4294966783, rs1_w0_val == 4294967231, rs1_w1_val == 4294967293
// opcode: ukmsr64 ; op1:x23; op2:x11; dest:x25; op1val:0xfffffffdffffffbf;  op2val:0xfffffdff0000000e
TEST_PK64_PNN_OP(ukmsr64, x25, $rd_hi, x23, x11, 0x0000000000000000, $correctval_hi, 0xfffffffdffffffbf, 0xfffffdff0000000e, x23, x4, 216, x15)

inst_27:
// rs1==x18, rs2==x1, rs2_w1_val == 4294967039, rs1_w1_val == 4294705151
// opcode: ukmsr64 ; op1:x18; op2:x1; dest:x26; op1val:0xfffbffff00000009;  op2val:0xfffffeff00000013
TEST_PK64_PNN_OP(ukmsr64, x26, $rd_hi, x18, x1, 0x0000000000000000, $correctval_hi, 0xfffbffff00000009, 0xfffffeff00000013, x18, x4, 240, x15)

inst_28:
// rs1==x24, rs2==x25, rs2_w1_val == 4294967167, rs2_w0_val == 3221225471
// opcode: ukmsr64 ; op1:x24; op2:x25; dest:x21; op1val:0x0000000804000000;  op2val:0xffffff7fbfffffff
TEST_PK64_PNN_OP(ukmsr64, x21, $rd_hi, x24, x25, 0x0000000000000000, $correctval_hi, 0x0000000804000000, 0xffffff7fbfffffff, x24, x4, 264, x15)

inst_29:
// rs1==x9, rs2==x0, rs2_w1_val == 4294967231, rs1_w1_val == 268435456, rs2_w0_val == 4294959103
// opcode: ukmsr64 ; op1:x9; op2:x0; dest:x16; op1val:0x1000000000000200;  op2val:0xffffffbfffffdfff
TEST_PK64_PNN_OP(ukmsr64, x16, $rd_hi, x9, x0, 0x0000000000000000, $correctval_hi, 0x1000000000000200, 0xffffffbfffffdfff, x9, x4, 288, x2)

inst_30:
// rs1==x8, rs2==x30, rs2_w1_val == 4294967263, rs2_w0_val == 8
// opcode: ukmsr64 ; op1:x8; op2:x30; dest:x27; op1val:0x0000001000002000;  op2val:0xffffffdf00000008
TEST_PK64_PNN_OP(ukmsr64, x27, $rd_hi, x8, x30, 0x0000000000000000, $correctval_hi, 0x0000001000002000, 0xffffffdf00000008, x8, x4, 312, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_31:
// rs1==x21, rs2==x15, rs2_w1_val == 4294967279, rs1_w1_val == 4294967287
// opcode: ukmsr64 ; op1:x21; op2:x15; dest:x18; op1val:0xfffffff7fffffeff;  op2val:0xffffffefffffdfff
TEST_PK64_PNN_OP(ukmsr64, x18, $rd_hi, x21, x15, 0x0000000000000000, $correctval_hi, 0xfffffff7fffffeff, 0xffffffefffffdfff, x21, x1, 0, x2)

inst_32:
// rs2_w1_val == 4294967287, rs2_w0_val == 4294705151, rs1_w1_val == 4160749567
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000040;  op2val:0xfffffff7fffbffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ffffff00000040, 0xfffffff7fffbffff, x30, x1, 24, x2)

inst_33:
// rs2_w1_val == 4294967291, rs1_w1_val == 3221225471, rs1_w0_val == 4294967293, rs2_w0_val == 4294967167
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffffffd;  op2val:0xfffffffbffffff7f
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbffffffffffffffd, 0xfffffffbffffff7f, x30, x1, 48, x2)

inst_34:
// rs2_w1_val == 4294967293, rs2_w0_val == 4294967294
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000b00000013;  op2val:0xfffffffdfffffffe
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000b00000013, 0xfffffffdfffffffe, x30, x1, 72, x2)

inst_35:
// rs2_w1_val == 4294967294, rs1_w0_val == 16384, rs1_w1_val == 256
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000010000004000;  op2val:0xfffffffeffffdfff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000010000004000, 0xfffffffeffffdfff, x30, x1, 96, x2)

inst_36:
// rs2_w1_val == 2147483648, rs1_w1_val == 4227858431, rs1_w0_val == 4294443007
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffff7ffff;  op2val:0x80000000feffffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbfffffffff7ffff, 0x80000000feffffff, x30, x1, 120, x2)

inst_37:
// rs2_w1_val == 1073741824, rs2_w0_val == 536870912, rs1_w1_val == 4294967295
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff0000000a;  op2val:0x4000000020000000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffff0000000a, 0x4000000020000000, x30, x1, 144, x2)

inst_38:
// rs2_w1_val == 536870912, rs2_w0_val == 4294967295, rs1_w0_val == 524288
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000001000080000;  op2val:0x20000000ffffffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000001000080000, 0x20000000ffffffff, x30, x1, 168, x2)

inst_39:
// rs2_w1_val == 134217728, rs1_w1_val == 536870912
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000011;  op2val:0x08000000f7ffffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000000000000011, 0x08000000f7ffffff, x30, x1, 192, x2)

inst_40:
// rs2_w1_val == 67108864, rs2_w0_val == 32768, rs1_w0_val == 3758096383
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000dfffffff;  op2val:0x0400000000008000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00100000dfffffff, 0x0400000000008000, x30, x1, 216, x2)

inst_41:
// rs2_w1_val == 33554432, rs1_w0_val == 4096, rs2_w0_val == 4294443007
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00001000;  op2val:0x02000000fff7ffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffe00001000, 0x02000000fff7ffff, x30, x1, 240, x2)

inst_42:
// rs2_w1_val == 16777216, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000013;  op2val:0x01000000fffffffe
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffffff00000013, 0x01000000fffffffe, x30, x1, 264, x2)

inst_43:
// rs2_w1_val == 8388608, rs1_w0_val == 262144
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00040000;  op2val:0x0080000000002000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7ffff00040000, 0x0080000000002000, x30, x1, 288, x2)

inst_44:
// rs2_w1_val == 4194304, rs2_w0_val == 4294966271, rs1_w1_val == 134217728, rs1_w0_val == 4026531839
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000efffffff;  op2val:0x00400000fffffbff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x08000000efffffff, 0x00400000fffffbff, x30, x1, 312, x2)

inst_45:
// rs2_w1_val == 2097152, rs1_w0_val == 4293918719, rs1_w1_val == 4294967167
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffefffff;  op2val:0x0020000000000007
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffff7fffefffff, 0x0020000000000007, x30, x1, 336, x2)

inst_46:
// rs2_w1_val == 1048576, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff0000000e;  op2val:0x001000000000000e
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffdffff0000000e, 0x001000000000000e, x30, x1, 360, x2)

inst_47:
// rs2_w1_val == 524288, rs1_w0_val == 1431655765
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff755555555;  op2val:0x0008000000000003
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff755555555, 0x0008000000000003, x30, x1, 384, x2)

inst_48:
// rs2_w1_val == 262144, rs1_w0_val == 4294966783, rs2_w0_val == 2097152
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000cfffffdff;  op2val:0x0004000000200000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000cfffffdff, 0x0004000000200000, x30, x1, 408, x2)

inst_49:
// rs2_w1_val == 131072, rs2_w0_val == 2863311530
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x000000120000000c;  op2val:0x00020000aaaaaaaa
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000000120000000c, 0x00020000aaaaaaaa, x30, x1, 432, x2)

inst_50:
// rs2_w1_val == 65536, rs1_w0_val == 4290772991, rs2_w0_val == 4292870143
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000cffbfffff;  op2val:0x00010000ffdfffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000cffbfffff, 0x00010000ffdfffff, x30, x1, 456, x2)

inst_51:
// rs2_w1_val == 32768, rs1_w1_val == 4294967231
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000009;  op2val:0x000080000000000e
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffbf00000009, 0x000080000000000e, x30, x1, 480, x2)

inst_52:
// rs1_w0_val == 131072, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000001100020000;  op2val:0x0000001200008000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000001100020000, 0x0000001200008000, x30, x1, 504, x2)

inst_53:
// rs1_w0_val == 65536, rs2_w1_val == 64
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000300010000;  op2val:0x00000040bfffffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000300010000, 0x00000040bfffffff, x30, x1, 528, x2)

inst_54:
// rs1_w0_val == 32768, rs1_w1_val == 33554432
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0200000000008000;  op2val:0x0200000000000000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200000000008000, 0x0200000000000000, x30, x1, 552, x2)

inst_55:
// rs1_w0_val == 1024, rs2_w0_val == 262144
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000001300000400;  op2val:0xfffffffd00040000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000001300000400, 0xfffffffd00040000, x30, x1, 576, x2)

inst_56:
// rs1_w0_val == 256, rs2_w0_val == 67108864, rs1_w1_val == 4294967263, rs2_w1_val == 4294967295
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000100;  op2val:0xffffffff04000000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdf00000100, 0xffffffff04000000, x30, x1, 600, x2)

inst_57:
// rs1_w0_val == 128, rs2_w0_val == 3758096383, rs1_w1_val == 4278190079
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000080;  op2val:0xffffff7fdfffffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeffffff00000080, 0xffffff7fdfffffff, x30, x1, 624, x2)

inst_58:
// rs1_w0_val == 32, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000020;  op2val:0xffffbfff00000003
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffff7f00000020, 0xffffbfff00000003, x30, x1, 648, x2)

inst_59:
// rs1_w0_val == 16, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000010;  op2val:0xff7fffff00000007
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffdff00000010, 0xff7fffff00000007, x30, x1, 672, x2)

inst_60:
// rs1_w0_val == 8, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000600000008;  op2val:0xfffffeff00000100
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000600000008, 0xfffffeff00000100, x30, x1, 696, x2)

inst_61:
// rs1_w0_val == 4, rs1_w1_val == 4294967279, rs2_w0_val == 4290772991
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000004;  op2val:0xffffffbfffbfffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffef00000004, 0xffffffbfffbfffff, x30, x1, 720, x2)

inst_62:
// rs1_w0_val == 2, rs2_w1_val == 32
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000100000002;  op2val:0x00000020feffffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000100000002, 0x00000020feffffff, x30, x1, 744, x2)

inst_63:
// rs1_w0_val == 1, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000500000001;  op2val:0xffffffdf00000008
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000500000001, 0xffffffdf00000008, x30, x1, 768, x2)

inst_64:
// rs2_w1_val == 16384, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffffffd;  op2val:0x0000400010000000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbffffffffffffffd, 0x0000400010000000, x30, x1, 792, x2)

inst_65:
// rs2_w1_val == 8192, rs1_w0_val == 4294967263
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000011ffffffdf;  op2val:0x00002000ffffff7f
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000011ffffffdf, 0x00002000ffffff7f, x30, x1, 816, x2)

inst_66:
// rs2_w1_val == 4096, rs1_w1_val == 4294965247, rs2_w0_val == 1048576
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffffdff;  op2val:0x0000100000100000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffff7fffffffdff, 0x0000100000100000, x30, x1, 840, x2)

inst_67:
// rs2_w1_val == 2048, rs1_w0_val == 4294705151, rs1_w1_val == 512
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200fffbffff;  op2val:0x00000800fffffffe
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000200fffbffff, 0x00000800fffffffe, x30, x1, 864, x2)

inst_68:
// rs2_w1_val == 1024, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000009ff7fffff;  op2val:0x0000040055555555
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000009ff7fffff, 0x0000040055555555, x30, x1, 888, x2)

inst_69:
// rs2_w1_val == 256, rs1_w1_val == 64
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000004000000011;  op2val:0x0000010000020000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000004000000011, 0x0000010000020000, x30, x1, 912, x2)

inst_70:
// rs2_w1_val == 128, rs2_w0_val == 4, rs1_w0_val == 4294967279
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100ffffffef;  op2val:0x0000008000000004
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000100ffffffef, 0x0000008000000004, x30, x1, 936, x2)

inst_71:
// rs2_w1_val == 16, rs1_w1_val == 4194304
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0040000000200000;  op2val:0x00000010fffdffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040000000200000, 0x00000010fffdffff, x30, x1, 960, x2)

inst_72:
// rs2_w1_val == 8, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000001;  op2val:0x00000008dfffffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffff00000001, 0x00000008dfffffff, x30, x1, 984, x2)

inst_73:
// rs2_w1_val == 4, rs2_w0_val == 16384
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000010;  op2val:0x0000000400004000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffdff00000010, 0x0000000400004000, x30, x1, 1008, x2)

inst_74:
// rs2_w1_val == 2, rs1_w1_val == 1431655765
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500004000;  op2val:0x00000002fffbffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x5555555500004000, 0x00000002fffbffff, x30, x1, 1032, x2)

inst_75:
// rs2_w1_val == 1, rs2_w0_val == 4294967263, rs1_w1_val == 4286578687
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000000;  op2val:0x00000001ffffffdf
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7fffff00000000, 0x00000001ffffffdf, x30, x1, 1056, x2)

inst_76:
// rs2_w1_val == 0, rs1_w1_val == 4292870143, rs1_w0_val == 4294934527
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffff7fff;  op2val:0x00000000ffffdfff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdfffffffff7fff, 0x00000000ffffdfff, x30, x1, 1080, x2)

inst_77:
// rs2_w0_val == 4227858431, rs1_w0_val == 4294836223
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffdffff;  op2val:0xfffff7fffbffffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffff7fffffdffff, 0xfffff7fffbffffff, x30, x1, 1104, x2)

inst_78:
// rs2_w0_val == 4261412863, rs1_w0_val == 2147483647
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb7fffffff;  op2val:0xffeffffffdffffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffb7fffffff, 0xffeffffffdffffff, x30, x1, 1128, x2)

inst_79:
// rs2_w0_val == 4286578687, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00040000;  op2val:0xfffff7ffff7fffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffdff00040000, 0xfffff7ffff7fffff, x30, x1, 1152, x2)

inst_80:
// rs2_w0_val == 4293918719, rs1_w0_val == 33554432
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff02000000;  op2val:0xffffff7fffefffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffdff02000000, 0xffffff7fffefffff, x30, x1, 1176, x2)

inst_81:
// rs2_w0_val == 4294901759, rs1_w1_val == 4294966271
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000013;  op2val:0x00000009fffeffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffbff00000013, 0x00000009fffeffff, x30, x1, 1200, x2)

inst_82:
// rs2_w0_val == 4294934527, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000fffffffd;  op2val:0xfeffffffffff7fff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00100000fffffffd, 0xfeffffffffff7fff, x30, x1, 1224, x2)

inst_83:
// rs2_w0_val == 4294950911, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000bfffffff;  op2val:0x00000006ffffbfff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00040000bfffffff, 0x00000006ffffbfff, x30, x1, 1248, x2)

inst_84:
// rs2_w0_val == 4294965247, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00004000;  op2val:0xfffbfffffffff7ff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfffffff00004000, 0xfffbfffffffff7ff, x30, x1, 1272, x2)

inst_85:
// rs2_w0_val == 1024, rs1_w1_val == 2097152
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0020000000000003;  op2val:0xfffffbff00000400
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020000000000003, 0xfffffbff00000400, x30, x1, 1296, x2)

inst_86:
// rs2_w0_val == 512, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000500000010;  op2val:0x0004000000000200
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000500000010, 0x0004000000000200, x30, x1, 1320, x2)

inst_87:
// rs2_w0_val == 128, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x000000030000000f;  op2val:0x0000000100000080
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000000030000000f, 0x0000000100000080, x30, x1, 1344, x2)

inst_88:
// rs2_w0_val == 64, rs1_w1_val == 32768
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000800000000040;  op2val:0xfffffdff00000040
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000800000000040, 0xfffffdff00000040, x30, x1, 1368, x2)

inst_89:
// rs2_w0_val == 16, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000400;  op2val:0x7fffffff00000010
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff700000400, 0x7fffffff00000010, x30, x1, 1392, x2)

inst_90:
// rs2_w0_val == 2, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000005fffdffff;  op2val:0x4000000000000002
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000005fffdffff, 0x4000000000000002, x30, x1, 1416, x2)

inst_91:
// rs2_w0_val == 1, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf7fffffff;  op2val:0x0000000400000001
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffbf7fffffff, 0x0000000400000001, x30, x1, 1440, x2)

inst_92:
// rs1_w1_val == 2863311530, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffffffbf;  op2val:0xffffffefffff7fff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaaaaaaffffffbf, 0xffffffefffff7fff, x30, x1, 1464, x2)

inst_93:
// rs1_w1_val == 4026531839, rs1_w0_val == 4294966271
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffffbff;  op2val:0x00001000ffffff7f
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xeffffffffffffbff, 0x00001000ffffff7f, x30, x1, 1488, x2)

inst_94:
// rs1_w1_val == 4261412863, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffbfffff;  op2val:0xffffefffffffbfff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdffffffffbfffff, 0xffffefffffffbfff, x30, x1, 1512, x2)

inst_95:
// rs1_w1_val == 4293918719, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffdfffffff;  op2val:0x0000100000020000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffefffffdfffffff, 0x0000100000020000, x30, x1, 1536, x2)

inst_96:
// rs1_w1_val == 4294901759, rs2_w0_val == 4294967039
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00080000;  op2val:0xffffffbffffffeff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffeffff00080000, 0xffffffbffffffeff, x30, x1, 1560, x2)

inst_97:
// rs1_w1_val == 4294963199, rs1_w0_val == 4294901759
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffeffff;  op2val:0x0000000affffefff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffeffffffeffff, 0x0000000affffefff, x30, x1, 1584, x2)

inst_98:
// rs1_w1_val == 4294967039, rs2_w0_val == 1073741824, rs1_w0_val == 536870912
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff20000000;  op2val:0x0000000d40000000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffeff20000000, 0x0000000d40000000, x30, x1, 1608, x2)

inst_99:
// rs1_w1_val == 2147483648, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000001000;  op2val:0x01000000fff7ffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000000000001000, 0x01000000fff7ffff, x30, x1, 1632, x2)

inst_100:
// rs1_w1_val == 1073741824, rs2_w0_val == 65536
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffffffd;  op2val:0x0002000000010000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x40000000fffffffd, 0x0002000000010000, x30, x1, 1656, x2)

inst_101:
// rs1_w1_val == 67108864, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000ff7fffff;  op2val:0x0000000000000010
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x04000000ff7fffff, 0x0000000000000010, x30, x1, 1680, x2)

inst_102:
// rs1_w1_val == 8388608, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0080000008000000;  op2val:0x4000000000000080
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080000008000000, 0x4000000000000080, x30, x1, 1704, x2)

inst_103:
// rs1_w1_val == 524288, rs2_w0_val == 524288
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000fffffffe;  op2val:0xffffff7f00080000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00080000fffffffe, 0xffffff7f00080000, x30, x1, 1728, x2)

inst_104:
// rs1_w1_val == 131072, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0002000000000400;  op2val:0xfff7fffffff7ffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0002000000000400, 0xfff7fffffff7ffff, x30, x1, 1752, x2)

inst_105:
// rs1_w1_val == 65536, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0001000000000040;  op2val:0x0000200000080000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001000000000040, 0x0000200000080000, x30, x1, 1776, x2)

inst_106:
// rs1_w1_val == 8192, rs1_w0_val == 2863311530, rs2_w0_val == 33554432
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000aaaaaaaa;  op2val:0xffffffdf02000000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00002000aaaaaaaa, 0xffffffdf02000000, x30, x1, 1800, x2)

inst_107:
// rs1_w1_val == 2048, rs1_w0_val == 4294959103
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800ffffdfff;  op2val:0x0000000d00010000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000800ffffdfff, 0x0000000d00010000, x30, x1, 1824, x2)

inst_108:
// rs1_w1_val == 1024, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x000004007fffffff;  op2val:0xfffffffe00000001
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000004007fffffff, 0xfffffffe00000001, x30, x1, 1848, x2)

inst_109:
// rs1_w1_val == 32, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000020fbffffff;  op2val:0x0000020000000013
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000020fbffffff, 0x0000020000000013, x30, x1, 1872, x2)

inst_110:
// rs1_w1_val == 4, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000004ffefffff;  op2val:0xfffffeff00000009
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000004ffefffff, 0xfffffeff00000009, x30, x1, 1896, x2)

inst_111:
// rs1_w1_val == 2, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000002ffffdfff;  op2val:0xfeffffff00010000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000002ffffdfff, 0xfeffffff00010000, x30, x1, 1920, x2)

inst_112:
// rs1_w1_val == 0, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000002000000;  op2val:0x02000000bfffffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000002000000, 0x02000000bfffffff, x30, x1, 1944, x2)

inst_113:
// rs1_w0_val == 4160749567, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000f7ffffff;  op2val:0xfffeffff00000002
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x40000000f7ffffff, 0xfffeffff00000002, x30, x1, 1968, x2)

inst_114:
// rs1_w0_val == 4261412863, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffdffffff;  op2val:0xfffbfffffffffdff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffeffdffffff, 0xfffbfffffffffdff, x30, x1, 1992, x2)

inst_115:
// rs1_w0_val == 4292870143, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400ffdfffff;  op2val:0x0000000400008000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000400ffdfffff, 0x0000000400008000, x30, x1, 2016, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_116:
// rs2_w0_val == 4096, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000dfffdffff;  op2val:0x0000001100001000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000dfffdffff, 0x0000001100001000, x30, x1, 0, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_117:
// rs2_w0_val == 4294967231, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000001ffffffbf;  op2val:0x00004000ffffffbf
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000001ffffffbf, 0x00004000ffffffbf, x30, x1, 0, x2)

inst_118:
// rs1_w0_val == 4294950911, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000ffffbfff;  op2val:0x0000000600200000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00004000ffffbfff, 0x0000000600200000, x30, x1, 24, x2)

inst_119:
// rs2_w0_val == 4294967279, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000500010000;  op2val:0x00040000ffffffef
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000500010000, 0x00040000ffffffef, x30, x1, 48, x2)

inst_120:
// rs1_w0_val == 4294963199, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000020ffffefff;  op2val:0xdffffffffffff7ff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000020ffffefff, 0xdffffffffffff7ff, x30, x1, 72, x2)

inst_121:
// rs1_w0_val == 4294965247, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400fffff7ff;  op2val:0xffffff7f00000080
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000400fffff7ff, 0xffffff7f00000080, x30, x1, 96, x2)

inst_122:
// rs2_w0_val == 2147483648, rs1_w0_val == 4294967287
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000fffffff7;  op2val:0xfffff7ff80000000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00002000fffffff7, 0xfffff7ff80000000, x30, x1, 120, x2)

inst_123:
// rs1_w0_val == 4294967167, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffff7f;  op2val:0x0010000000000005
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffdfffffffff7f, 0x0010000000000005, x30, x1, 144, x2)

inst_124:
// rs2_w0_val == 134217728, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000011fffffffd;  op2val:0x0000000008000000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000011fffffffd, 0x0000000008000000, x30, x1, 168, x2)

inst_125:
// rs1_w0_val == 4294967291, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffffffb;  op2val:0xfbffffffffdfffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7fffffffffffffb, 0xfbffffffffdfffff, x30, x1, 192, x2)

inst_126:
// rs2_w0_val == 16777216, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x555555550000000c;  op2val:0x0002000001000000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x555555550000000c, 0x0002000001000000, x30, x1, 216, x2)

inst_127:
// rs2_w0_val == 8388608, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffffdfff;  op2val:0xfff7ffff00800000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffefffffdfff, 0xfff7ffff00800000, x30, x1, 240, x2)

inst_128:
// rs1_w0_val == 2147483648, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff80000000;  op2val:0x000000100000000f
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffff7ff80000000, 0x000000100000000f, x30, x1, 264, x2)

inst_129:
// rs2_w0_val == 4194304, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555dfffffff;  op2val:0xf7ffffff00400000
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x55555555dfffffff, 0xf7ffffff00400000, x30, x1, 288, x2)

inst_130:
// rs1_w0_val == 1073741824, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff40000000;  op2val:0x0000000555555555
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdffffff40000000, 0x0000000555555555, x30, x1, 312, x2)

inst_131:
// rs1_w0_val == 16777216, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff01000000;  op2val:0x0000000a00000400
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffeffff01000000, 0x0000000a00000400, x30, x1, 336, x2)

inst_132:
// rs1_w0_val == 4194304, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0400000000400000;  op2val:0xbfffffffffffbfff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0400000000400000, 0xbfffffffffffbfff, x30, x1, 360, x2)

inst_133:
// rs1_w0_val == 1048576, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000020000100000;  op2val:0x0000200000000012
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000020000100000, 0x0000200000000012, x30, x1, 384, x2)

inst_134:
// rs2_w0_val == 2048, 
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0004000000000012;  op2val:0x0000000400000800
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0004000000000012, 0x0000000400000800, x30, x1, 408, x2)

inst_135:
// rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 4294950911, rs1_w0_val == 4278190079, rs2_w1_val == 268435456, rs2_w0_val == 4278190079
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffeffffff;  op2val:0x10000000feffffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffbffffeffffff, 0x10000000feffffff, x30, x1, 432, x2)

inst_136:
// rs2_w1_val == 2863311530, rs2_w0_val == 4294836223, rs1_w1_val == 4294966783
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000000;  op2val:0xaaaaaaaafffdffff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffdff00000000, 0xaaaaaaaafffdffff, x30, x1, 456, x2)

inst_137:
// rs2_w1_val == 4026531839, rs2_w0_val == 4294967293, rs1_w1_val == 4294967294
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe10000000;  op2val:0xeffffffffffffffd
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffe10000000, 0xeffffffffffffffd, x30, x1, 480, x2)

inst_138:
// rs2_w1_val == 4294967231, rs1_w1_val == 268435456, rs2_w0_val == 4294959103
// opcode: ukmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000200;  op2val:0xffffffbfffffdfff
TEST_PK64_PNN_OP(ukmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x1000000000000200, 0xffffffbfffffdfff, x30, x1, 504, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 51*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 42*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 255*(XLEN/32),4,0xdeadbeef


signature_x1_3:
    .fill 3*(XLEN/32),4,0xdeadbeef


signature_x1_4:
    .fill 66*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
