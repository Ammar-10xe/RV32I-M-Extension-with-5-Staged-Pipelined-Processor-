
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmabt32 instruction of the RISC-V RV64PZicsr extension for the kmabt32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmabt32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 == rd != rs2, rs1==x2, rs2==x27, rd==x2, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w0_val == 128, rs1_w1_val == -1025
// opcode: kmabt32 ; op1:x2; op2:x27; dest:x2; op1val:0xfffffbff80000000;  op2val:0xfffffffc00000080
TEST_PKRR_OP(kmabt32, x2, x2, x27, 0x0000000000000000, 0xfffffbff80000000, 0xfffffffc00000080, x2, x4, 0, x16)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x26, rs2==x3, rd==x5, rs1_w1_val == rs2_w1_val, rs1_w0_val == 16777216, rs2_w1_val == -65, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w1_val == -65, rs2_w0_val == -8388609
// opcode: kmabt32 ; op1:x26; op2:x3; dest:x5; op1val:0xffffffbf01000000;  op2val:0xffffffbfff7fffff
TEST_PKRR_OP(kmabt32, x5, x26, x3, 0x0000000000000000, 0xffffffbf01000000, 0xffffffbfff7fffff, x26, x4, 16, x16)

inst_2:
// rs1 == rs2 != rd, rs1==x8, rs2==x8, rd==x26, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w0_val == 1, rs1_w1_val == -5, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 65536
// opcode: kmabt32 ; op1:x8; op2:x8; dest:x26; op1val:0xfffffffb3fffffff;  op2val:0x01000000000001
TEST_PKRR_OP(kmabt32, x26, x8, x8, 0x0000000000000000, 0xfffffffb3fffffff, 0x01000000000001, x8, x4, 32, x16)

inst_3:
// rs1 == rs2 == rd, rs1==x21, rs2==x21, rd==x21, rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w1_val == -1025, rs1_w0_val == -4194305, rs2_w0_val == -2049, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w1_val == 268435456
// opcode: kmabt32 ; op1:x21; op2:x21; dest:x21; op1val:0x10000000ffbfffff;  op2val:0xfffffbfffffff7ff
TEST_PKRR_OP(kmabt32, x21, x21, x21, 0x0000000000000000, 0x10000000ffbfffff, 0xfffffbfffffff7ff, x21, x4, 48, x16)

inst_4:
// rs2 == rd != rs1, rs1==x12, rs2==x19, rd==x19, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val == 16384, rs2_w0_val == 134217728, rs2_w1_val == 8388608
// opcode: kmabt32 ; op1:x12; op2:x19; dest:x19; op1val:0x00000600004000;  op2val:0x80000008000000
TEST_PKRR_OP(kmabt32, x19, x12, x19, 0x0000000000000000, 0x00000600004000, 0x80000008000000, x12, x4, 64, x16)

inst_5:
// rs1==x22, rs2==x28, rd==x7, rs1_w0_val == rs2_w0_val, rs2_w1_val == 2048, rs1_w1_val == -131073, rs2_w0_val == -4097, rs1_w0_val == -4097
// opcode: kmabt32 ; op1:x22; op2:x28; dest:x7; op1val:0xfffdffffffffefff;  op2val:0x000800ffffefff
TEST_PKRR_OP(kmabt32, x7, x22, x28, 0x0000000000000000, 0xfffdffffffffefff, 0x000800ffffefff, x22, x4, 80, x16)

inst_6:
// rs1==x31, rs2==x18, rd==x14, rs2_w1_val == -1431655766, rs1_w1_val == -268435457, rs2_w0_val == -1
// opcode: kmabt32 ; op1:x31; op2:x18; dest:x14; op1val:0xefffffff80000000;  op2val:0xaaaaaaaaffffffff
TEST_PKRR_OP(kmabt32, x14, x31, x18, 0x0000000000000000, 0xefffffff80000000, 0xaaaaaaaaffffffff, x31, x4, 96, x16)

inst_7:
// rs1==x1, rs2==x9, rd==x0, rs2_w1_val == 1431655765, rs1_w1_val == -2097153, rs1_w0_val == 8192
// opcode: kmabt32 ; op1:x1; op2:x9; dest:x0; op1val:0xffdfffff00002000;  op2val:0x5555555508000000
TEST_PKRR_OP(kmabt32, x0, x1, x9, 0x0000000000000000, 0xffdfffff00002000, 0x5555555508000000, x1, x4, 112, x16)

inst_8:
// rs1==x30, rs2==x29, rd==x15, rs2_w1_val == 2147483647, rs1_w1_val == 32, rs1_w0_val == -1073741825, rs2_w0_val == 8192
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x15; op1val:0x000020bfffffff;  op2val:0x7fffffff00002000
TEST_PKRR_OP(kmabt32, x15, x30, x29, 0x0000000000000000, 0x000020bfffffff, 0x7fffffff00002000, x30, x4, 128, x16)

inst_9:
// rs1==x6, rs2==x1, rd==x29, rs2_w1_val == -1073741825, rs2_w0_val == 262144, rs1_w0_val == -65537, rs1_w1_val == 4
// opcode: kmabt32 ; op1:x6; op2:x1; dest:x29; op1val:0x000004fffeffff;  op2val:0xbfffffff00040000
TEST_PKRR_OP(kmabt32, x29, x6, x1, 0x0000000000000000, 0x000004fffeffff, 0xbfffffff00040000, x6, x4, 144, x16)

inst_10:
// rs1==x9, rs2==x6, rd==x13, rs2_w1_val == -536870913, rs1_w1_val == -33, rs2_w0_val == 2097152
// opcode: kmabt32 ; op1:x9; op2:x6; dest:x13; op1val:0xffffffdf00004000;  op2val:0xdfffffff00200000
TEST_PKRR_OP(kmabt32, x13, x9, x6, 0x0000000000000000, 0xffffffdf00004000, 0xdfffffff00200000, x9, x4, 160, x16)

inst_11:
// rs1==x20, rs2==x31, rd==x10, rs2_w1_val == -268435457, rs1_w1_val == 1073741824, rs1_w0_val == -2, rs2_w0_val == -8193
// opcode: kmabt32 ; op1:x20; op2:x31; dest:x10; op1val:0x40000000fffffffe;  op2val:0xefffffffffffdfff
TEST_PKRR_OP(kmabt32, x10, x20, x31, 0x0000000000000000, 0x40000000fffffffe, 0xefffffffffffdfff, x20, x4, 176, x16)

inst_12:
// rs1==x0, rs2==x2, rd==x31, rs2_w1_val == -134217729, rs2_w0_val == 256
// opcode: kmabt32 ; op1:x0; op2:x2; dest:x31; op1val:0x100000003fffffff;  op2val:0xf7ffffff00000100
TEST_PKRR_OP(kmabt32, x31, x0, x2, 0x0000000000000000, 0x100000003fffffff, 0xf7ffffff00000100, x0, x4, 192, x16)

inst_13:
// rs1==x23, rs2==x15, rd==x27, rs2_w1_val == -67108865, rs2_w0_val == -262145, rs1_w0_val == -257
// opcode: kmabt32 ; op1:x23; op2:x15; dest:x27; op1val:0x10000000fffffeff;  op2val:0xfbfffffffffbffff
TEST_PKRR_OP(kmabt32, x27, x23, x15, 0x0000000000000000, 0x10000000fffffeff, 0xfbfffffffffbffff, x23, x4, 208, x16)

inst_14:
// rs1==x27, rs2==x12, rd==x23, rs2_w1_val == -33554433, rs1_w0_val == 512, rs2_w0_val == -3
// opcode: kmabt32 ; op1:x27; op2:x12; dest:x23; op1val:0xfffffffb00000200;  op2val:0xfdfffffffffffffd
TEST_PKRR_OP(kmabt32, x23, x27, x12, 0x0000000000000000, 0xfffffffb00000200, 0xfdfffffffffffffd, x27, x4, 224, x16)

inst_15:
// rs1==x11, rs2==x26, rd==x3, rs2_w1_val == -16777217, rs2_w0_val == 1024
// opcode: kmabt32 ; op1:x11; op2:x26; dest:x3; op1val:0x000020c0000000;  op2val:0xfeffffff00000400
TEST_PKRR_OP(kmabt32, x3, x11, x26, 0x0000000000000000, 0x000020c0000000, 0xfeffffff00000400, x11, x4, 240, x16)

inst_16:
// rs1==x25, rs2==x17, rd==x6, rs2_w1_val == -8388609, rs2_w0_val == -1048577, rs1_w1_val == 32768
// opcode: kmabt32 ; op1:x25; op2:x17; dest:x6; op1val:0x00800000000006;  op2val:0xff7fffffffefffff
TEST_PKRR_OP(kmabt32, x6, x25, x17, 0x0000000000000000, 0x00800000000006, 0xff7fffffffefffff, x25, x4, 256, x21)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_17:
// rs1==x13, rs2==x22, rd==x25, rs2_w1_val == -4194305, rs1_w1_val == 65536
// opcode: kmabt32 ; op1:x13; op2:x22; dest:x25; op1val:0x01000000000007;  op2val:0xffbfffff00000400
TEST_PKRR_OP(kmabt32, x25, x13, x22, 0x0000000000000000, 0x01000000000007, 0xffbfffff00000400, x13, x2, 0, x21)

inst_18:
// rs1==x7, rs2==x14, rd==x9, rs2_w1_val == -2097153, rs1_w0_val == 2, rs1_w1_val == -524289, rs2_w0_val == 4096
// opcode: kmabt32 ; op1:x7; op2:x14; dest:x9; op1val:0xfff7ffff00000002;  op2val:0xffdfffff00001000
TEST_PKRR_OP(kmabt32, x9, x7, x14, 0x0000000000000000, 0xfff7ffff00000002, 0xffdfffff00001000, x7, x2, 16, x21)

inst_19:
// rs1==x5, rs2==x30, rd==x22, rs2_w1_val == -1048577, rs2_w0_val == -67108865, rs1_w0_val == 536870912
// opcode: kmabt32 ; op1:x5; op2:x30; dest:x22; op1val:0x01000020000000;  op2val:0xffeffffffbffffff
TEST_PKRR_OP(kmabt32, x22, x5, x30, 0x0000000000000000, 0x01000020000000, 0xffeffffffbffffff, x5, x2, 32, x21)

inst_20:
// rs1==x14, rs2==x16, rd==x12, rs2_w1_val == -524289, rs2_w0_val == -16777217, rs1_w1_val == -33554433
// opcode: kmabt32 ; op1:x14; op2:x16; dest:x12; op1val:0xfdffffffffbfffff;  op2val:0xfff7fffffeffffff
TEST_PKRR_OP(kmabt32, x12, x14, x16, 0x0000000000000000, 0xfdffffffffbfffff, 0xfff7fffffeffffff, x14, x2, 48, x21)

inst_21:
// rs1==x4, rs2==x5, rd==x1, rs2_w1_val == -262145, rs1_w0_val == -16777217, rs1_w1_val == 67108864
// opcode: kmabt32 ; op1:x4; op2:x5; dest:x1; op1val:0x4000000feffffff;  op2val:0xfffbffff00040000
TEST_PKRR_OP(kmabt32, x1, x4, x5, 0x0000000000000000, 0x4000000feffffff, 0xfffbffff00040000, x4, x2, 64, x21)

inst_22:
// rs1==x3, rs2==x4, rd==x28, rs2_w1_val == -131073, rs2_w0_val == -134217729
// opcode: kmabt32 ; op1:x3; op2:x4; dest:x28; op1val:0x00002000000200;  op2val:0xfffdfffff7ffffff
TEST_PKRR_OP(kmabt32, x28, x3, x4, 0x0000000000000000, 0x00002000000200, 0xfffdfffff7ffffff, x3, x2, 80, x21)

inst_23:
// rs1==x28, rs2==x25, rd==x11, rs2_w1_val == -65537, rs1_w0_val == -1025
// opcode: kmabt32 ; op1:x28; op2:x25; dest:x11; op1val:0xfffffff6fffffbff;  op2val:0xfffeffffffefffff
TEST_PKRR_OP(kmabt32, x11, x28, x25, 0x0000000000000000, 0xfffffff6fffffbff, 0xfffeffffffefffff, x28, x2, 96, x21)

inst_24:
// rs1==x19, rs2==x23, rd==x30, rs2_w1_val == -32769, rs2_w0_val == 0, rs1_w0_val == -65
// opcode: kmabt32 ; op1:x19; op2:x23; dest:x30; op1val:0x3fffffffffffffbf;  op2val:0xffff7fff00000000
TEST_PKRR_OP(kmabt32, x30, x19, x23, 0x0000000000000000, 0x3fffffffffffffbf, 0xffff7fff00000000, x19, x2, 112, x21)

inst_25:
// rs1==x16, rs2==x10, rd==x18, rs2_w1_val == -16385, rs2_w0_val == -2147483648, rs1_w1_val == 16777216
// opcode: kmabt32 ; op1:x16; op2:x10; dest:x18; op1val:0x1000000ffbfffff;  op2val:0xffffbfff80000000
TEST_PKRR_OP(kmabt32, x18, x16, x10, 0x0000000000000000, 0x1000000ffbfffff, 0xffffbfff80000000, x16, x2, 128, x21)

inst_26:
// rs1==x29, rs2==x20, rd==x17, rs2_w1_val == -8193, rs1_w0_val == -16385, rs1_w1_val == 256, rs2_w0_val == -268435457
// opcode: kmabt32 ; op1:x29; op2:x20; dest:x17; op1val:0x000100ffffbfff;  op2val:0xffffdfffefffffff
TEST_PKRR_OP(kmabt32, x17, x29, x20, 0x0000000000000000, 0x000100ffffbfff, 0xffffdfffefffffff, x29, x2, 144, x21)

inst_27:
// rs1==x24, rs2==x7, rd==x20, rs2_w1_val == -4097, rs2_w0_val == 16777216, rs1_w0_val == 134217728
// opcode: kmabt32 ; op1:x24; op2:x7; dest:x20; op1val:0x3fffffff08000000;  op2val:0xffffefff01000000
TEST_PKRR_OP(kmabt32, x20, x24, x7, 0x0000000000000000, 0x3fffffff08000000, 0xffffefff01000000, x24, x2, 160, x21)

inst_28:
// rs1==x18, rs2==x13, rd==x4, rs2_w1_val == -2049, rs2_w0_val == 8
// opcode: kmabt32 ; op1:x18; op2:x13; dest:x4; op1val:0xffffffbf00000007;  op2val:0xfffff7ff00000008
TEST_PKRR_OP(kmabt32, x4, x18, x13, 0x0000000000000000, 0xffffffbf00000007, 0xfffff7ff00000008, x18, x2, 176, x21)

inst_29:
// rs1==x15, rs2==x24, rd==x16, rs2_w1_val == -513, rs1_w1_val == 1024, rs1_w0_val == -524289
// opcode: kmabt32 ; op1:x15; op2:x24; dest:x16; op1val:0x000400fff7ffff;  op2val:0xfffffdff3fffffff
TEST_PKRR_OP(kmabt32, x16, x15, x24, 0x0000000000000000, 0x000400fff7ffff, 0xfffffdff3fffffff, x15, x2, 192, x21)

inst_30:
// rs1==x10, rs2==x11, rd==x8, rs2_w1_val == -257, rs1_w0_val == 67108864
// opcode: kmabt32 ; op1:x10; op2:x11; dest:x8; op1val:0x01000004000000;  op2val:0xfffffeffffffdfff
TEST_PKRR_OP(kmabt32, x8, x10, x11, 0x0000000000000000, 0x01000004000000, 0xfffffeffffffdfff, x10, x2, 208, x21)

inst_31:
// rs1==x17, rs2==x0, rd==x24, rs2_w1_val == -129, rs1_w1_val == 2097152
// opcode: kmabt32 ; op1:x17; op2:x0; dest:x24; op1val:0x200000fffffffc;  op2val:0xffffff7ffffffff9
TEST_PKRR_OP(kmabt32, x24, x17, x0, 0x0000000000000000, 0x200000fffffffc, 0xffffff7ffffffff9, x17, x2, 224, x1)

inst_32:
// rs2_w1_val == -33, rs2_w0_val == 1073741824, rs1_w1_val == 1, rs1_w0_val == 1024
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000400;  op2val:0xffffffdf40000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x00000100000400, 0xffffffdf40000000, x30, x2, 240, x1)

inst_33:
// rs2_w1_val == -17, rs1_w0_val == -8193
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffaffffdfff;  op2val:0xffffffeffffffffc
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffffffaffffdfff, 0xffffffeffffffffc, x30, x2, 256, x1)

inst_34:
// rs2_w1_val == -9, rs2_w0_val == 131072, rs1_w1_val == -4097, rs1_w0_val == -3
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffffffd;  op2val:0xfffffff700020000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xffffeffffffffffd, 0xfffffff700020000, x30, x2, 272, x1)

inst_35:
// rs2_w1_val == -5, rs2_w0_val == -513
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000009;  op2val:0xfffffffbfffffdff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffffff800000009, 0xfffffffbfffffdff, x30, x2, 288, x1)

inst_36:
// rs2_w1_val == -3, rs2_w0_val == 268435456
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000007;  op2val:0xfffffffd10000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x400000000000007, 0xfffffffd10000000, x30, x2, 304, x1)

inst_37:
// rs2_w1_val == -2, rs1_w1_val == -1431655766
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000200;  op2val:0xfffffffe10000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000200, 0xfffffffe10000000, x30, x2, 320, x1)

inst_38:
// rs2_w1_val == -2147483648, rs1_w1_val == 4194304, rs1_w0_val == 131072
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000020000;  op2val:0x80000000fbffffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x40000000020000, 0x80000000fbffffff, x30, x2, 336, x1)

inst_39:
// rs2_w1_val == 1073741824, rs2_w0_val == 65536
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000002;  op2val:0x4000000000010000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000002, 0x4000000000010000, x30, x2, 352, x1)

inst_40:
// rs2_w1_val == 536870912, rs1_w1_val == -513, rs2_w0_val == 1048576
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00002000;  op2val:0x2000000000100000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00002000, 0x2000000000100000, x30, x2, 368, x1)

inst_41:
// rs2_w1_val == 268435456, rs1_w0_val == -513, rs1_w1_val == -67108865
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffffdff;  op2val:0x1000000001000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffffdff, 0x1000000001000000, x30, x2, 384, x1)

inst_42:
// rs2_w1_val == 134217728, rs1_w1_val == 16384
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffbfffff;  op2val:0x8000000fffff7ff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x004000ffbfffff, 0x8000000fffff7ff, x30, x2, 400, x1)

inst_43:
// rs2_w1_val == 67108864, rs1_w0_val == -134217729
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000f7ffffff;  op2val:0x400000000000100
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xc0000000f7ffffff, 0x400000000000100, x30, x2, 416, x1)

inst_44:
// rs2_w1_val == 33554432, rs1_w1_val == 8192, rs1_w0_val == 1048576
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000100000;  op2val:0x2000000fffffffc
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x00200000100000, 0x2000000fffffffc, x30, x2, 432, x1)

inst_45:
// rs2_w1_val == 16777216, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffffffbff;  op2val:0x1000000ffefffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffffbff, 0x1000000ffefffff, x30, x2, 448, x1)

inst_46:
// rs2_w1_val == 4194304, rs1_w1_val == -1
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffbfffff;  op2val:0x40000008000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xffffffffffbfffff, 0x40000008000000, x30, x2, 464, x1)

inst_47:
// rs2_w1_val == 2097152, rs1_w1_val == -262145
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff04000000;  op2val:0x200000ff7fffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffbffff04000000, 0x200000ff7fffff, x30, x2, 480, x1)

inst_48:
// rs2_w1_val == 1048576, rs2_w0_val == -524289
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004c0000000;  op2val:0x100000fff7ffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x000004c0000000, 0x100000fff7ffff, x30, x2, 496, x1)

inst_49:
// rs2_w1_val == 524288, rs1_w0_val == 2048
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000800;  op2val:0x08000000040000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000800, 0x08000000040000, x30, x2, 512, x1)

inst_50:
// rs2_w1_val == 262144, rs1_w1_val == -4194305, rs2_w0_val == -16385
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00002000;  op2val:0x040000ffffbfff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00002000, 0x040000ffffbfff, x30, x2, 528, x1)

inst_51:
// rs2_w1_val == 131072, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffff7ffffff;  op2val:0x02000010000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffdfffff7ffffff, 0x02000010000000, x30, x2, 544, x1)

inst_52:
// rs2_w1_val == 32768, rs1_w0_val == 32768
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000008000;  op2val:0x008000fffffff8
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x4000000000008000, 0x008000fffffff8, x30, x2, 560, x1)

inst_53:
// rs2_w1_val == 16384, rs1_w1_val == 131072, rs1_w0_val == -2049
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000fffff7ff;  op2val:0x00400000010000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x020000fffff7ff, 0x00400000010000, x30, x2, 576, x1)

inst_54:
// rs1_w0_val == 33554432, rs1_w1_val == -134217729
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff02000000;  op2val:0xfffffff600001000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff02000000, 0xfffffff600001000, x30, x2, 592, x1)

inst_55:
// rs1_w0_val == 8388608, rs2_w1_val == 8192
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000800000;  op2val:0x00200000000100
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x00800000800000, 0x00200000000100, x30, x2, 608, x1)

inst_56:
// rs1_w0_val == 4194304, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00400000;  op2val:0xfffffff9fffffdff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00400000, 0xfffffff9fffffdff, x30, x2, 624, x1)

inst_57:
// rs1_w0_val == 2097152, rs2_w0_val == 2048, rs2_w1_val == 0
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000200000;  op2val:0x00000000000800
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x20000000200000, 0x00000000000800, x30, x2, 640, x1)

inst_58:
// rs1_w0_val == 524288, rs2_w0_val == 1431655765, rs1_w1_val == 2, rs2_w1_val == 128
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200080000;  op2val:0x00008055555555
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x00000200080000, 0x00008055555555, x30, x2, 656, x1)

inst_59:
// rs1_w0_val == 262144, rs2_w0_val == 33554432, rs1_w1_val == 1048576
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000040000;  op2val:0xc000000002000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x10000000040000, 0xc000000002000000, x30, x2, 672, x1)

inst_60:
// rs1_w0_val == 65536, rs2_w0_val == -1025
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00010000;  op2val:0x800000fffffbff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00010000, 0x800000fffffbff, x30, x2, 688, x1)

inst_61:
// rs1_w0_val == 4096, rs1_w1_val == -17, rs2_w0_val == -17
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00001000;  op2val:0xf7ffffffffffffef
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xffffffef00001000, 0xf7ffffffffffffef, x30, x2, 704, x1)

inst_62:
// rs1_w0_val == 256, rs2_w0_val == 512
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000100;  op2val:0x00000600000200
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffffff800000100, 0x00000600000200, x30, x2, 720, x1)

inst_63:
// rs1_w0_val == 128, rs2_w0_val == -2097153
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000080;  op2val:0xfffffffbffdfffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x00000100000080, 0xfffffffbffdfffff, x30, x2, 736, x1)

inst_64:
// rs1_w0_val == 64, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000040;  op2val:0xfffffff800000800
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xc000000000000040, 0xfffffff800000800, x30, x2, 752, x1)

inst_65:
// rs1_w0_val == 32, rs2_w0_val == -1073741825
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000020;  op2val:0x100000bfffffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x20000000000020, 0x100000bfffffff, x30, x2, 768, x1)

inst_66:
// rs1_w0_val == 16, rs1_w1_val == -9
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000010;  op2val:0x1000000ffefffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffffff700000010, 0x1000000ffefffff, x30, x2, 784, x1)

inst_67:
// rs1_w0_val == 8, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000008;  op2val:0x000000fffffdff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffffff800000008, 0x000000fffffdff, x30, x2, 800, x1)

inst_68:
// rs1_w0_val == 4, rs2_w0_val == 67108864
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000004;  op2val:0xff7fffff04000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x00000900000004, 0xff7fffff04000000, x30, x2, 816, x1)

inst_69:
// rs1_w0_val == 1, rs2_w0_val == 64, rs1_w1_val == -65537
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000001;  op2val:0xffffffef00000040
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000001, 0xffffffef00000040, x30, x2, 832, x1)

inst_70:
// rs1_w0_val == 0, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500000000;  op2val:0x01000010000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x00000500000000, 0x01000010000000, x30, x2, 848, x1)

inst_71:
// rs1_w0_val == -1, rs1_w1_val == 536870912
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffffffff;  op2val:0x400000000000040
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x20000000ffffffff, 0x400000000000040, x30, x2, 864, x1)

inst_72:
// rs2_w1_val == 4096, rs1_w1_val == -129
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00004000;  op2val:0x00100000000003
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00004000, 0x00100000000003, x30, x2, 880, x1)

inst_73:
// rs2_w1_val == 1024, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000002;  op2val:0x000400ffffffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000002, 0x000400ffffffff, x30, x2, 896, x1)

inst_74:
// rs2_w1_val == 512, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000020000000;  op2val:0x00020040000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x4000000020000000, 0x00020040000000, x30, x2, 912, x1)

inst_75:
// rs2_w1_val == 256, rs2_w0_val == -131073
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000800;  op2val:0x000100fffdffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000800, 0x000100fffdffff, x30, x2, 928, x1)

inst_76:
// rs2_w1_val == 64, rs1_w1_val == -2147483648
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000f7ffffff;  op2val:0x00004010000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x80000000f7ffffff, 0x00004010000000, x30, x2, 944, x1)

inst_77:
// rs2_w1_val == 32, rs1_w0_val == 1431655765, rs2_w0_val == 524288
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000055555555;  op2val:0x00002000080000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x100000055555555, 0x00002000080000, x30, x2, 960, x1)

inst_78:
// rs2_w1_val == 16, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004f7ffffff;  op2val:0x000010fffffdff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x000004f7ffffff, 0x000010fffffdff, x30, x2, 976, x1)

inst_79:
// rs2_w1_val == 8, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000040000;  op2val:0x00000855555555
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x8000000000040000, 0x00000855555555, x30, x2, 992, x1)

inst_80:
// rs2_w1_val == 4, rs1_w1_val == 16
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000010000;  op2val:0x00000402000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x00001000010000, 0x00000402000000, x30, x2, 1008, x1)

inst_81:
// rs2_w1_val == 2, rs2_w0_val == -32769
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000fffffdff;  op2val:0x000002ffff7fff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x020000fffffdff, 0x000002ffff7fff, x30, x2, 1024, x1)

inst_82:
// rs2_w1_val == 1, rs1_w1_val == -3
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd08000000;  op2val:0x000001fffffdff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffffffd08000000, 0x000001fffffdff, x30, x2, 1040, x1)

inst_83:
// rs2_w1_val == -1, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900008000;  op2val:0xffffffff00002000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x00000900008000, 0xffffffff00002000, x30, x2, 1056, x1)

inst_84:
// rs2_w0_val == -1431655766, rs1_w1_val == 4096
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000100;  op2val:0xffffffdfaaaaaaaa
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x00100000000100, 0xffffffdfaaaaaaaa, x30, x2, 1072, x1)

inst_85:
// rs2_w0_val == 2147483647, rs1_w0_val == -17
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffffffef;  op2val:0xfffffdff7fffffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x20000000ffffffef, 0xfffffdff7fffffff, x30, x2, 1088, x1)

inst_86:
// rs2_w0_val == 32768, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000004;  op2val:0xff7fffff00008000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x00040000000004, 0xff7fffff00008000, x30, x2, 1104, x1)

inst_87:
// rs2_w0_val == 16384, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00100000;  op2val:0x200000000004000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00100000, 0x200000000004000, x30, x2, 1120, x1)

inst_88:
// rs2_w0_val == 32, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbbfffffff;  op2val:0x00001000000020
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffffffbbfffffff, 0x00001000000020, x30, x2, 1136, x1)

inst_89:
// rs2_w0_val == 16, rs1_w0_val == -131073
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005fffdffff;  op2val:0xfffffff600000010
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x000005fffdffff, 0xfffffff600000010, x30, x2, 1152, x1)

inst_90:
// rs2_w0_val == 4, rs1_w1_val == 33554432
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffffffc;  op2val:0x2000000000000004
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x2000000fffffffc, 0x2000000000000004, x30, x2, 1168, x1)

inst_91:
// rs2_w0_val == 2, rs1_w0_val == -2097153, rs1_w1_val == -257
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffdfffff;  op2val:0xdfffffff00000002
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffffeffffdfffff, 0xdfffffff00000002, x30, x2, 1184, x1)

inst_92:
// rs1_w1_val == 1431655765, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000003;  op2val:0xffbfffff00000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x5555555500000003, 0xffbfffff00000000, x30, x2, 1200, x1)

inst_93:
// rs1_w1_val == 2147483647, rs2_w0_val == 8388608
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffffffd;  op2val:0x00800000800000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffffffd, 0x00800000800000, x30, x2, 1216, x1)

inst_94:
// rs1_w1_val == -1073741825, rs2_w0_val == -33554433, rs1_w0_val == -33554433
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffdffffff;  op2val:0xfffffdfffdffffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xbffffffffdffffff, 0xfffffdfffdffffff, x30, x2, 1232, x1)

inst_95:
// rs1_w1_val == -536870913, rs1_w0_val == 1073741824
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff40000000;  op2val:0x000100efffffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xdfffffff40000000, 0x000100efffffff, x30, x2, 1248, x1)

inst_96:
// rs1_w1_val == -16777217, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000005;  op2val:0xfffffbfffffffbff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000005, 0xfffffbfffffffbff, x30, x2, 1264, x1)

inst_97:
// rs1_w1_val == -8388609, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00080000;  op2val:0xf7ffffff10000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00080000, 0xf7ffffff10000000, x30, x2, 1280, x1)

inst_98:
// rs1_w1_val == -1048577, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000010;  op2val:0x000040fffffbff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xffefffff00000010, 0x000040fffffbff, x30, x2, 1296, x1)

inst_99:
// rs1_w1_val == -32769, rs2_w0_val == -5
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffffffff;  op2val:0x040000fffffffb
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xffff7fffffffffff, 0x040000fffffffb, x30, x2, 1312, x1)

inst_100:
// rs1_w1_val == -16385, rs2_w0_val == -536870913
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000800;  op2val:0xffffffdfdfffffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000800, 0xffffffdfdfffffff, x30, x2, 1328, x1)

inst_101:
// rs1_w1_val == -8193, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffffff;  op2val:0x400000ffdfffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xffffdfffffffffff, 0x400000ffdfffff, x30, x2, 1344, x1)

inst_102:
// rs1_w1_val == -2049, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff55555555;  op2val:0x00000500001000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff55555555, 0x00000500001000, x30, x2, 1360, x1)

inst_103:
// rs1_w1_val == -2, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00040000;  op2val:0xfffffdffffffffef
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00040000, 0xfffffdffffffffef, x30, x2, 1376, x1)

inst_104:
// rs1_w1_val == 134217728, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000001000000;  op2val:0xfffff7ff00000007
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x800000001000000, 0xfffff7ff00000007, x30, x2, 1392, x1)

inst_105:
// rs1_w1_val == 8388608, rs1_w0_val == 268435456
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000010000000;  op2val:0x3fffffff00000200
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x80000010000000, 0x3fffffff00000200, x30, x2, 1408, x1)

inst_106:
// rs1_w1_val == 524288, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000001000;  op2val:0x200000fffffffb
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x08000000001000, 0x200000fffffffb, x30, x2, 1424, x1)

inst_107:
// rs1_w1_val == 262144, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffffff9;  op2val:0xfbffffff04000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x040000fffffff9, 0xfbffffff04000000, x30, x2, 1440, x1)

inst_108:
// rs1_w1_val == 2048, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000010;  op2val:0x800000ffffffef
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x00080000000010, 0x800000ffffffef, x30, x2, 1456, x1)

inst_109:
// rs1_w1_val == 512, rs2_w0_val == -9
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020001000000;  op2val:0xffffffbffffffff7
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x00020001000000, 0xffffffbffffffff7, x30, x2, 1472, x1)

inst_110:
// rs1_w1_val == 128, rs1_w0_val == 2147483647
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000807fffffff;  op2val:0xfffffff700008000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x0000807fffffff, 0xfffffff700008000, x30, x2, 1488, x1)

inst_111:
// rs1_w1_val == 64, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000008000;  op2val:0xfffeffff00000009
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x00004000008000, 0xfffeffff00000009, x30, x2, 1504, x1)

inst_112:
// rs1_w1_val == 8, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffdfffff;  op2val:0x04000004000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x000008ffdfffff, 0x04000004000000, x30, x2, 1520, x1)

inst_113:
// rs1_w1_val == 0, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000080;  op2val:0xffffffeffeffffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x00000000000080, 0xffffffeffeffffff, x30, x2, 1536, x1)

inst_114:
// rs1_w0_val == -1431655766, rs2_w0_val == -257
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffaaaaaaaa;  op2val:0x000100fffffeff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xffffffffaaaaaaaa, 0x000100fffffeff, x30, x2, 1552, x1)

inst_115:
// rs2_w0_val == -4194305, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000200;  op2val:0x000100ffbfffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x04000000000200, 0x000100ffbfffff, x30, x2, 1568, x1)

inst_116:
// rs1_w0_val == -536870913, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffdfffffff;  op2val:0x002000fffffffa
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xff7fffffdfffffff, 0x002000fffffffa, x30, x2, 1584, x1)

inst_117:
// rs1_w0_val == -268435457, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000efffffff;  op2val:0xfffffdff08000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x010000efffffff, 0xfffffdff08000000, x30, x2, 1600, x1)

inst_118:
// rs1_w0_val == -67108865, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000fbffffff;  op2val:0xbfffffff00000020
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x020000fbffffff, 0xbfffffff00000020, x30, x2, 1616, x1)

inst_119:
// rs2_w0_val == -65537, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200fffffffd;  op2val:0x000007fffeffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x000200fffffffd, 0x000007fffeffff, x30, x2, 1632, x1)

inst_120:
// rs1_w0_val == -8388609, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffff7fffff;  op2val:0xffffeffffffffff8
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffeffffff7fffff, 0xffffeffffffffff8, x30, x2, 1648, x1)

inst_121:
// rs1_w0_val == -1048577, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffefffff;  op2val:0xfeffffff00004000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x000040ffefffff, 0xfeffffff00004000, x30, x2, 1664, x1)

inst_122:
// rs1_w0_val == -262145, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffbffff;  op2val:0xfffffffdffdfffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x008000fffbffff, 0xfffffffdffdfffff, x30, x2, 1680, x1)

inst_123:
// rs2_w0_val == -129, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080020000000;  op2val:0xfffffff7ffffff7f
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x00080020000000, 0xfffffff7ffffff7f, x30, x2, 1696, x1)

inst_124:
// rs1_w0_val == -32769, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009ffff7fff;  op2val:0xfffbffff00000001
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x000009ffff7fff, 0xfffbffff00000001, x30, x2, 1712, x1)

inst_125:
// rs2_w0_val == -65, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffeffff;  op2val:0xfff7ffffffffffbf
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xffbffffffffeffff, 0xfff7ffffffffffbf, x30, x2, 1728, x1)

inst_126:
// rs2_w0_val == -33, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00400000;  op2val:0x3fffffffffffffdf
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00400000, 0x3fffffffffffffdf, x30, x2, 1744, x1)

inst_127:
// rs2_w0_val == -2, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000007;  op2val:0xfffffffdfffffffe
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x100000000000007, 0xfffffffdfffffffe, x30, x2, 1760, x1)

inst_128:
// rs1_w0_val == -129, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffffff7f;  op2val:0xfffdffffffefffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xffffffbfffffff7f, 0xfffdffffffefffff, x30, x2, 1776, x1)

inst_129:
// rs2_w0_val == 536870912, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555c0000000;  op2val:0x04000020000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x55555555c0000000, 0x04000020000000, x30, x2, 1792, x1)

inst_130:
// rs1_w0_val == -5, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8fffffffb;  op2val:0x7fffffff00000009
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffffff8fffffffb, 0x7fffffff00000009, x30, x2, 1808, x1)

inst_131:
// rs2_w0_val == 4194304, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800080000;  op2val:0xffffffbf00400000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfffffff800080000, 0xffffffbf00400000, x30, x2, 1824, x1)

inst_132:
// rs1_w0_val == -33, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffffdf;  op2val:0xfefffffffbffffff
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xffffdfffffffffdf, 0xfefffffffbffffff, x30, x2, 1840, x1)

inst_133:
// rs1_w0_val == -9, 
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffff7;  op2val:0x7fffffff00400000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xfefffffffffffff7, 0x7fffffff00400000, x30, x2, 1856, x1)

inst_134:
// rs2_w1_val == 1431655765, rs1_w1_val == -2097153, rs1_w0_val == 8192
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00002000;  op2val:0x5555555508000000
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00002000, 0x5555555508000000, x30, x2, 1872, x1)

inst_135:
// rs2_w1_val == -129, rs1_w1_val == 2097152
// opcode: kmabt32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffffffc;  op2val:0xffffff7ffffffff9
TEST_PKRR_OP(kmabt32, x31, x30, x29, 0x0000000000000000, 0x200000fffffffc, 0xffffff7ffffffff9, x30, x2, 1888, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 238*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
