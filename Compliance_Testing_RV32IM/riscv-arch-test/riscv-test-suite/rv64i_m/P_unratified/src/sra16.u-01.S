
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sra16.u instruction of the RISC-V RV64PZicsr extension for the sra16.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sra16.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x28, rs2==x22, rd==x28, rs2_val == 5, rs1_h1_val == 0, rs1_h3_val == 16, rs1_h2_val == 128
// opcode: sra16.u ; op1:x28; op2:x22; dest:x28; op1val:0x1000800000fff6;  op2val:0x5
TEST_RR_OP(sra16.u, x28, x28, x22, 0x0000000000000000, 0x1000800000fff6, 0x5, x1, 0, x12)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x25, rs2==x26, rd==x19, rs2_val == 7, rs1_h0_val == 8192, rs1_h1_val == -2, rs1_h2_val == -9
// opcode: sra16.u ; op1:x25; op2:x26; dest:x19; op1val:0x09fff7fffe2000;  op2val:0x7
TEST_RR_OP(sra16.u, x19, x25, x26, 0x0000000000000000, 0x09fff7fffe2000, 0x7, x1, 8, x12)

inst_2:
// rs1 == rs2 != rd, rs1==x18, rs2==x18, rd==x14, rs2_val == 11, rs1_h3_val == 128, rs1_h2_val == -257, rs1_h1_val == -2049
// opcode: sra16.u ; op1:x18; op2:x18; dest:x14; op1val:0x80fefff7ff0009;  op2val:0xb
TEST_RR_OP(sra16.u, x14, x18, x18, 0x0000000000000000, 0x80fefff7ff0009, 0xb, x1, 16, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x16, rs2==x16, rd==x16, rs2_val == 13, rs1_h0_val == -32768, rs1_h2_val == 21845, rs1_h1_val == 8
// opcode: sra16.u ; op1:x16; op2:x16; dest:x16; op1val:0x03555500088000;  op2val:0xd
TEST_RR_OP(sra16.u, x16, x16, x16, 0x0000000000000000, 0x03555500088000, 0xd, x1, 24, x12)

inst_4:
// rs2 == rd != rs1, rs1==x31, rs2==x5, rd==x5, rs2_val == 14, rs1_h0_val == 2048, rs1_h2_val == 512, rs1_h3_val == 8
// opcode: sra16.u ; op1:x31; op2:x5; dest:x5; op1val:0x080200fffc0800;  op2val:0xe
TEST_RR_OP(sra16.u, x5, x31, x5, 0x0000000000000000, 0x080200fffc0800, 0xe, x1, 32, x12)

inst_5:
// rs1==x19, rs2==x11, rd==x17, rs2_val == 8, rs1_h0_val == -3
// opcode: sra16.u ; op1:x19; op2:x11; dest:x17; op1val:0xfff6fffcfffafffd;  op2val:0x8
TEST_RR_OP(sra16.u, x17, x19, x11, 0x0000000000000000, 0xfff6fffcfffafffd, 0x8, x1, 40, x12)

inst_6:
// rs1==x7, rs2==x21, rd==x0, rs2_val == 4, rs1_h3_val == 512, rs1_h0_val == 32, rs1_h1_val == 128, rs1_h2_val == -129
// opcode: sra16.u ; op1:x7; op2:x21; dest:x0; op1val:0x200ff7f00800020;  op2val:0x4
TEST_RR_OP(sra16.u, x0, x7, x21, 0x0000000000000000, 0x200ff7f00800020, 0x4, x1, 48, x12)

inst_7:
// rs1==x0, rs2==x30, rd==x2, rs2_val == 2, rs1_h1_val == 2048, rs1_h3_val == -2049
// opcode: sra16.u ; op1:x0; op2:x30; dest:x2; op1val:0xf7fffffa0800fffc;  op2val:0x2
TEST_RR_OP(sra16.u, x2, x0, x30, 0x0000000000000000, 0xf7fffffa0800fffc, 0x2, x1, 56, x12)

inst_8:
// rs1==x8, rs2==x31, rd==x18, rs2_val == 1, rs1_h0_val == 16384, rs1_h1_val == 21845, rs1_h2_val == -2
// opcode: sra16.u ; op1:x8; op2:x31; dest:x18; op1val:0x07fffe55554000;  op2val:0x1
TEST_RR_OP(sra16.u, x18, x8, x31, 0x0000000000000000, 0x07fffe55554000, 0x1, x1, 64, x12)

inst_9:
// rs1==x14, rs2==x6, rd==x13, rs1_h3_val == -21846, rs1_h2_val == 64, rs1_h0_val == 2
// opcode: sra16.u ; op1:x14; op2:x6; dest:x13; op1val:0xaaaa004000050002;  op2val:0x2
TEST_RR_OP(sra16.u, x13, x14, x6, 0x0000000000000000, 0xaaaa004000050002, 0x2, x1, 72, x12)

inst_10:
// rs1==x6, rs2==x19, rd==x29, rs1_h3_val == 21845, rs1_h2_val == -16385, rs1_h1_val == -16385
// opcode: sra16.u ; op1:x6; op2:x19; dest:x29; op1val:0x5555bfffbffffff8;  op2val:0x5
TEST_RR_OP(sra16.u, x29, x6, x19, 0x0000000000000000, 0x5555bfffbffffff8, 0x5, x1, 80, x12)

inst_11:
// rs1==x3, rs2==x15, rd==x11, rs1_h3_val == 32767, rs1_h0_val == -16385, rs1_h1_val == -17, rs1_h2_val == 1
// opcode: sra16.u ; op1:x3; op2:x15; dest:x11; op1val:0x7fff0001ffefbfff;  op2val:0x8
TEST_RR_OP(sra16.u, x11, x3, x15, 0x0000000000000000, 0x7fff0001ffefbfff, 0x8, x1, 88, x12)

inst_12:
// rs1==x29, rs2==x4, rd==x24, rs1_h3_val == -16385, rs1_h2_val == -4097, rs1_h1_val == -32768, rs1_h0_val == 21845
// opcode: sra16.u ; op1:x29; op2:x4; dest:x24; op1val:0xbfffefff80005555;  op2val:0x0
TEST_RR_OP(sra16.u, x24, x29, x4, 0x0000000000000000, 0xbfffefff80005555, 0x0, x1, 96, x12)

inst_13:
// rs1==x9, rs2==x0, rd==x10, rs1_h3_val == -8193, rs1_h0_val == -5, rs1_h1_val == 32
// opcode: sra16.u ; op1:x9; op2:x0; dest:x10; op1val:0xdffffff90020fffb;  op2val:0x0
TEST_RR_OP(sra16.u, x10, x9, x0, 0x0000000000000000, 0xdffffff90020fffb, 0x0, x1, 104, x12)

inst_14:
// rs1==x23, rs2==x9, rd==x25, rs1_h3_val == -4097, rs1_h2_val == 16
// opcode: sra16.u ; op1:x23; op2:x9; dest:x25; op1val:0xefff001055550020;  op2val:0x2
TEST_RR_OP(sra16.u, x25, x23, x9, 0x0000000000000000, 0xefff001055550020, 0x2, x1, 112, x5)
RVTEST_SIGBASE(x16,signature_x16_0)

inst_15:
// rs1==x4, rs2==x13, rd==x1, rs1_h3_val == -1025, rs1_h1_val == 16384, rs1_h2_val == 256
// opcode: sra16.u ; op1:x4; op2:x13; dest:x1; op1val:0xfbff010040000007;  op2val:0x5
TEST_RR_OP(sra16.u, x1, x4, x13, 0x0000000000000000, 0xfbff010040000007, 0x5, x16, 0, x5)

inst_16:
// rs1==x22, rs2==x24, rd==x3, rs1_h3_val == -513, rs1_h1_val == -33, rs1_h2_val == -32768
// opcode: sra16.u ; op1:x22; op2:x24; dest:x3; op1val:0xfdff8000ffdf0002;  op2val:0xb
TEST_RR_OP(sra16.u, x3, x22, x24, 0x0000000000000000, 0xfdff8000ffdf0002, 0xb, x16, 8, x5)

inst_17:
// rs1==x26, rs2==x10, rd==x7, rs1_h3_val == -257, rs1_h1_val == -257, rs1_h0_val == -257
// opcode: sra16.u ; op1:x26; op2:x10; dest:x7; op1val:0xfefffffcfefffeff;  op2val:0x2
TEST_RR_OP(sra16.u, x7, x26, x10, 0x0000000000000000, 0xfefffffcfefffeff, 0x2, x16, 16, x5)

inst_18:
// rs1==x30, rs2==x3, rd==x15, rs1_h3_val == -129, rs1_h0_val == 8
// opcode: sra16.u ; op1:x30; op2:x3; dest:x15; op1val:0xff7f0100f7ff0008;  op2val:0xe
TEST_RR_OP(sra16.u, x15, x30, x3, 0x0000000000000000, 0xff7f0100f7ff0008, 0xe, x16, 24, x5)

inst_19:
// rs1==x21, rs2==x29, rd==x4, rs1_h3_val == -65, rs1_h2_val == -65, rs1_h1_val == 64, rs1_h0_val == -129
// opcode: sra16.u ; op1:x21; op2:x29; dest:x4; op1val:0xffbfffbf0040ff7f;  op2val:0x2
TEST_RR_OP(sra16.u, x4, x21, x29, 0x0000000000000000, 0xffbfffbf0040ff7f, 0x2, x16, 32, x5)

inst_20:
// rs1==x10, rs2==x17, rd==x20, rs1_h3_val == -33, rs1_h0_val == 4
// opcode: sra16.u ; op1:x10; op2:x17; dest:x20; op1val:0xffdf0005fffc0004;  op2val:0x12
TEST_RR_OP(sra16.u, x20, x10, x17, 0x0000000000000000, 0xffdf0005fffc0004, 0x12, x16, 40, x5)

inst_21:
// rs1==x13, rs2==x25, rd==x8, rs1_h3_val == -17, 
// opcode: sra16.u ; op1:x13; op2:x25; dest:x8; op1val:0xffef0080fff90004;  op2val:0x7
TEST_RR_OP(sra16.u, x8, x13, x25, 0x0000000000000000, 0xffef0080fff90004, 0x7, x16, 48, x5)

inst_22:
// rs1==x15, rs2==x14, rd==x12, rs1_h3_val == -9, rs1_h1_val == -5, rs1_h0_val == -513, rs1_h2_val == 32767
// opcode: sra16.u ; op1:x15; op2:x14; dest:x12; op1val:0xfff77ffffffbfdff;  op2val:0xf
TEST_RR_OP(sra16.u, x12, x15, x14, 0x0000000000000000, 0xfff77ffffffbfdff, 0xf, x16, 56, x5)

inst_23:
// rs1==x17, rs2==x12, rd==x9, rs1_h3_val == -5, rs1_h0_val == 256, rs1_h2_val == -2049, rs1_h1_val == -4097
// opcode: sra16.u ; op1:x17; op2:x12; dest:x9; op1val:0xfffbf7ffefff0100;  op2val:0x6
TEST_RR_OP(sra16.u, x9, x17, x12, 0x0000000000000000, 0xfffbf7ffefff0100, 0x6, x16, 64, x5)

inst_24:
// rs1==x11, rs2==x28, rd==x21, rs1_h3_val == -3, 
// opcode: sra16.u ; op1:x11; op2:x28; dest:x21; op1val:0xfffd0200c0005555;  op2val:0x12
TEST_RR_OP(sra16.u, x21, x11, x28, 0x0000000000000000, 0xfffd0200c0005555, 0x12, x16, 72, x5)

inst_25:
// rs1==x1, rs2==x7, rd==x23, rs1_h3_val == -2, rs1_h1_val == 4
// opcode: sra16.u ; op1:x1; op2:x7; dest:x23; op1val:0xfffebfff0004fff8;  op2val:0x3
TEST_RR_OP(sra16.u, x23, x1, x7, 0x0000000000000000, 0xfffebfff0004fff8, 0x3, x16, 80, x5)

inst_26:
// rs1==x24, rs2==x8, rd==x6, rs1_h3_val == -32768, rs1_h0_val == 1
// opcode: sra16.u ; op1:x24; op2:x8; dest:x6; op1val:0x80000001fffa0001;  op2val:0x7
TEST_RR_OP(sra16.u, x6, x24, x8, 0x0000000000000000, 0x80000001fffa0001, 0x7, x16, 88, x5)

inst_27:
// rs1==x12, rs2==x23, rd==x30, rs1_h3_val == 16384, 
// opcode: sra16.u ; op1:x12; op2:x23; dest:x30; op1val:0x4000ffbff7ff0008;  op2val:0x13
TEST_RR_OP(sra16.u, x30, x12, x23, 0x0000000000000000, 0x4000ffbff7ff0008, 0x13, x16, 96, x5)

inst_28:
// rs1==x27, rs2==x2, rd==x22, rs1_h3_val == 8192, 
// opcode: sra16.u ; op1:x27; op2:x2; dest:x22; op1val:0x20000007fffe0008;  op2val:0x12
TEST_RR_OP(sra16.u, x22, x27, x2, 0x0000000000000000, 0x20000007fffe0008, 0x12, x16, 104, x5)

inst_29:
// rs1==x5, rs2==x1, rd==x26, rs1_h3_val == 4096, 
// opcode: sra16.u ; op1:x5; op2:x1; dest:x26; op1val:0x100000070006ff7f;  op2val:0x10
TEST_RR_OP(sra16.u, x26, x5, x1, 0x0000000000000000, 0x100000070006ff7f, 0x10, x16, 112, x3)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_30:
// rs1==x2, rs2==x20, rd==x27, rs1_h3_val == 2048, rs2_val == 10
// opcode: sra16.u ; op1:x2; op2:x20; dest:x27; op1val:0x800fff6ffdf0100;  op2val:0xa
TEST_RR_OP(sra16.u, x27, x2, x20, 0x0000000000000000, 0x800fff6ffdf0100, 0xa, x1, 0, x3)

inst_31:
// rs1==x20, rs2==x27, rd==x31, rs1_h3_val == 1024, rs1_h1_val == -1025, rs1_h2_val == -17
// opcode: sra16.u ; op1:x20; op2:x27; dest:x31; op1val:0x400ffeffbff5555;  op2val:0xb
TEST_RR_OP(sra16.u, x31, x20, x27, 0x0000000000000000, 0x400ffeffbff5555, 0xb, x1, 8, x3)

inst_32:
// rs1_h3_val == 256, rs1_h0_val == 64
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x1000003bfff0040;  op2val:0x3
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x1000003bfff0040, 0x3, x1, 16, x3)

inst_33:
// rs1_h0_val == -65, rs1_h1_val == -3
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff6fffdffbf;  op2val:0x5
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0xbffffff6fffdffbf, 0x5, x1, 24, x3)

inst_34:
// rs1_h0_val == -33, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff90040fffaffdf;  op2val:0x8
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0xfff90040fffaffdf, 0x8, x1, 32, x3)

inst_35:
// rs1_h0_val == -17, rs1_h2_val == -5
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffbefffffef;  op2val:0x0
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0xfffafffbefffffef, 0x0, x1, 40, x3)

inst_36:
// rs1_h0_val == -9, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffbfffdfff7;  op2val:0x3
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0xfbfffffbfffdfff7, 0x3, x1, 48, x3)

inst_37:
// rs1_h0_val == -2, rs1_h3_val == 32
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000030008fffe;  op2val:0x11
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x2000030008fffe, 0x11, x1, 56, x3)

inst_38:
// rs1_h0_val == 4096, rs1_h1_val == 32767, rs1_h2_val == 4
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x7fff00047fff1000;  op2val:0xf
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x7fff00047fff1000, 0xf, x1, 64, x3)

inst_39:
// rs1_h0_val == 1024, rs1_h2_val == 4096
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffe100080000400;  op2val:0x1
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0xfffe100080000400, 0x1, x1, 72, x3)

inst_40:
// rs1_h0_val == 512, rs1_h3_val == 2
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x020100fffb0200;  op2val:0x4
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x020100fffb0200, 0x4, x1, 80, x3)

inst_41:
// rs1_h0_val == 128, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0200fff80080;  op2val:0xc
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0xdfff0200fff80080, 0xc, x1, 88, x3)

inst_42:
// rs1_h0_val == 16, rs1_h1_val == -129
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x200feffff7f0010;  op2val:0x10
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x200feffff7f0010, 0x10, x1, 96, x3)

inst_43:
// rs1_h0_val == 0, rs1_h3_val == -1
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xffff0007fffb0000;  op2val:0x6
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0xffff0007fffb0000, 0x6, x1, 104, x3)

inst_44:
// rs1_h0_val == -1, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x7fffbffffffaffff;  op2val:0x1
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x7fffbffffffaffff, 0x1, x1, 112, x3)

inst_45:
// rs1_h3_val == 64, rs1_h0_val == -1025
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x40ff7f0009fbff;  op2val:0x11
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x40ff7f0009fbff, 0x11, x1, 120, x3)

inst_46:
// rs1_h3_val == 4, rs1_h1_val == -21846
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x04fff8aaaa0040;  op2val:0x9
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x04fff8aaaa0040, 0x9, x1, 128, x3)

inst_47:
// rs1_h3_val == 1, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x01feffff7ffffb;  op2val:0x4
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x01feffff7ffffb, 0x4, x1, 136, x3)

inst_48:
// rs1_h3_val == 0, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000100080010;  op2val:0x3
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x00000100080010, 0x3, x1, 144, x3)

inst_49:
// rs1_h2_val == -21846, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffbaaaac000fff7;  op2val:0xd
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0xfffbaaaac000fff7, 0xd, x1, 152, x3)

inst_50:
// rs1_h2_val == -8193, rs1_h0_val == -21846
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xbfffdfff5555aaaa;  op2val:0x0
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0xbfffdfff5555aaaa, 0x0, x1, 160, x3)

inst_51:
// rs1_h2_val == 16384, rs1_h1_val == 2
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0740000002ffef;  op2val:0x12
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x0740000002ffef, 0x12, x1, 168, x3)

inst_52:
// rs1_h2_val == 8192, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbff2000effffffd;  op2val:0x7
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0xfbff2000effffffd, 0x7, x1, 176, x3)

inst_53:
// rs1_h2_val == 2048, rs1_h1_val == 8192
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x10080020005555;  op2val:0x13
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x10080020005555, 0x13, x1, 184, x3)

inst_54:
// rs1_h2_val == 1024, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0004003fff0100;  op2val:0x6
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x0004003fff0100, 0x6, x1, 192, x3)

inst_55:
// rs1_h2_val == 32, rs1_h1_val == -9
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff80020fff7ffff;  op2val:0xe
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0xfff80020fff7ffff, 0xe, x1, 200, x3)

inst_56:
// rs1_h2_val == 8, rs1_h0_val == -8193
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xefff0008feffdfff;  op2val:0x8
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0xefff0008feffdfff, 0x8, x1, 208, x3)

inst_57:
// rs1_h2_val == 2, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x200000025555fff9;  op2val:0xf
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x200000025555fff9, 0xf, x1, 216, x3)

inst_58:
// rs1_h2_val == 0, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff80000fff7dfff;  op2val:0x10
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0xfff80000fff7dfff, 0x10, x1, 224, x3)

inst_59:
// rs1_h2_val == -1, rs1_h1_val == -513, rs1_h0_val == -4097
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x06fffffdffefff;  op2val:0x12
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x06fffffdffefff, 0x12, x1, 232, x3)

inst_60:
// rs1_h1_val == -8193, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xffff0002dfff0400;  op2val:0xe
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0xffff0002dfff0400, 0xe, x1, 240, x3)

inst_61:
// rs1_h1_val == 4096, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x100000210000100;  op2val:0x7
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x100000210000100, 0x7, x1, 248, x3)

inst_62:
// rs1_h1_val == 1024, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x20080004001000;  op2val:0x3
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x20080004001000, 0x3, x1, 256, x3)

inst_63:
// rs1_h1_val == 512, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000302000200;  op2val:0x2
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0xf7ff000302000200, 0x2, x1, 264, x3)

inst_64:
// rs1_h1_val == 256, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000efff01000020;  op2val:0x8
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x2000efff01000020, 0x8, x1, 272, x3)

inst_65:
// rs1_h1_val == 16, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x200ffef00100001;  op2val:0x6
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x200ffef00100001, 0x6, x1, 280, x3)

inst_66:
// rs1_h1_val == 1, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x02000300010010;  op2val:0x7
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x02000300010010, 0x7, x1, 288, x3)

inst_67:
// rs1_h2_val == -1025, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x09fbfffff60002;  op2val:0xe
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x09fbfffff60002, 0xe, x1, 296, x3)

inst_68:
// rs1_h1_val == -1, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x080020ffff0006;  op2val:0xf
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x080020ffff0006, 0xf, x1, 304, x3)

inst_69:
// rs1_h2_val == -513, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000fdfffffd0008;  op2val:0xf
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x4000fdfffffd0008, 0xf, x1, 312, x3)

inst_70:
// rs1_h0_val == 32767, rs1_h2_val == -33
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x07ffdf00107fff;  op2val:0xe
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x07ffdf00107fff, 0xe, x1, 320, x3)

inst_71:
// rs1_h0_val == -2049, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x801000fff8f7ff;  op2val:0x1
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x801000fff8f7ff, 0x1, x1, 328, x3)

inst_72:
// rs1_h1_val == -65, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xefff1000ffbfefff;  op2val:0xc
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0xefff1000ffbfefff, 0xc, x1, 336, x3)

inst_73:
// rs1_h2_val == -3, 
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x08fffdff7f3fff;  op2val:0x6
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x08fffdff7f3fff, 0x6, x1, 344, x3)

inst_74:
// rs2_val == 13, rs1_h0_val == -32768, rs1_h2_val == 21845, rs1_h1_val == 8
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x03555500088000;  op2val:0xd
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x03555500088000, 0xd, x1, 352, x3)

inst_75:
// rs2_val == 4, rs1_h3_val == 512, rs1_h0_val == 32, rs1_h1_val == 128, rs1_h2_val == -129
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x200ff7f00800020;  op2val:0x4
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0x200ff7f00800020, 0x4, x1, 360, x3)

inst_76:
// rs2_val == 2, rs1_h1_val == 2048, rs1_h3_val == -2049
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffa0800fffc;  op2val:0x2
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0xf7fffffa0800fffc, 0x2, x1, 368, x3)

inst_77:
// rs1_h3_val == -8193, rs1_h0_val == -5, rs1_h1_val == 32
// opcode: sra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff90020fffb;  op2val:0xe
TEST_RR_OP(sra16.u, x31, x30, x29, 0x0000000000000000, 0xdffffff90020fffb, 0xe, x1, 376, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x16_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 48*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
