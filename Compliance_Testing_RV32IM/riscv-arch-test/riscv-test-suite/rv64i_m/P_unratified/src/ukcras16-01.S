
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukcras16 instruction of the RISC-V RV64PZicsr extension for the ukcras16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukcras16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:// rs1 == rd != rs2, rs1==x9, rs2==x7, rd==x9, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h2_val == 512, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 16, rs2_h0_val == 128, rs1_h1_val == 65533, rs1_h3_val == 1, rs1_h2_val == 32767
// opcode: ukcras16 ; op1:x9; op2:x7; dest:x9; op1val:0x017ffffffd0000;  op2val:0x100200000d0080
TEST_RR_OP(ukcras16, x9, x9, x7, 0x0000000000000000, 0x017ffffffd0000, 0x100200000d0080, x2, 0, x10) 

inst_1:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x8, rs2==x13, rd==x18, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h3_val == 32, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h2_val == 8, rs1_h1_val == 65519, rs1_h3_val == 32, rs2_h1_val == 61439, rs1_h2_val == 256, rs1_h0_val == 65533
// opcode: ukcras16 ; op1:x8; op2:x13; dest:x18; op1val:0x200100ffeffffd;  op2val:0x200008efff000b
TEST_RR_OP(ukcras16, x18, x8, x13, 0x0000000000000000, 0x200100ffeffffd, 0x200008efff000b, x2, 16, x10) 

inst_2:// rs1 == rs2 != rd, rs1==x0, rs2==x0, rd==x30, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val == 43690, rs2_h0_val == 65519, rs1_h3_val == 4096, rs2_h1_val == 65407, rs2_h3_val == 2048
// opcode: ukcras16 ; op1:x0; op2:x0; dest:x30; op1val:0x10000003aaaa0006;  op2val:0x8000003ff7fffef
TEST_RR_OP(ukcras16, x30, x0, x0, 0x0000000000000000, 0x10000003aaaa0006, 0x8000003ff7fffef, x2, 32, x10) 

inst_3:// rs1 == rs2 == rd, rs1==x17, rs2==x17, rd==x17, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 1024, rs2_h3_val == 21845, rs1_h0_val == 61439, rs1_h1_val == 1024, rs2_h0_val == 57343
// opcode: ukcras16 ; op1:x17; op2:x17; dest:x17; op1val:0x100000120400efff;  op2val:0x555500050400dfff
TEST_RR_OP(ukcras16, x17, x17, x17, 0x0000000000000000, 0x100000120400efff, 0x555500050400dfff, x2, 48, x10) 

inst_4:// rs2 == rd != rs1, rs1==x12, rs2==x5, rd==x5, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == 57343, rs2_h2_val == 65527, rs2_h0_val == 65533
// opcode: ukcras16 ; op1:x12; op2:x5; dest:x5; op1val:0x03dfff000afffd;  op2val:0x20fff7effffffd
TEST_RR_OP(ukcras16, x5, x12, x5, 0x0000000000000000, 0x03dfff000afffd, 0x20fff7effffffd, x2, 64, x10) 

inst_5:// rs1==x16, rs2==x1, rd==x20, rs2_h3_val == 43690, rs2_h0_val == 65503, rs1_h0_val == 65535, rs1_h3_val == 512, rs1_h1_val == 8192, rs2_h1_val == 65471
// opcode: ukcras16 ; op1:x16; op2:x1; dest:x20; op1val:0x200000a2000ffff;  op2val:0xaaaa0013ffbfffdf
TEST_RR_OP(ukcras16, x20, x16, x1, 0x0000000000000000, 0x200000a2000ffff, 0xaaaa0013ffbfffdf, x2, 80, x10) 

inst_6:// rs1==x27, rs2==x6, rd==x21, rs2_h3_val == 32767, rs1_h1_val == 57343, rs1_h0_val == 32767, rs2_h0_val == 1024, rs1_h3_val == 4, rs2_h1_val == 65023
// opcode: ukcras16 ; op1:x27; op2:x6; dest:x21; op1val:0x04000bdfff7fff;  op2val:0x7fff0200fdff0400
TEST_RR_OP(ukcras16, x21, x27, x6, 0x0000000000000000, 0x04000bdfff7fff, 0x7fff0200fdff0400, x2, 96, x10) 

inst_7:// rs1==x6, rs2==x18, rd==x23, rs2_h3_val == 49151, rs1_h0_val == 32, rs2_h1_val == 128, rs2_h2_val == 43690
// opcode: ukcras16 ; op1:x6; op2:x18; dest:x23; op1val:0x10000007ffef0020;  op2val:0xbfffaaaa00800013
TEST_RR_OP(ukcras16, x23, x6, x18, 0x0000000000000000, 0x10000007ffef0020, 0xbfffaaaa00800013, x2, 112, x10) 

inst_8:// rs1==x15, rs2==x4, rd==x31, rs2_h3_val == 57343, rs1_h1_val == 128, rs1_h3_val == 8192
// opcode: ukcras16 ; op1:x15; op2:x4; dest:x31; op1val:0x2000000e0080000b;  op2val:0xdfff00090080fffd
TEST_RR_OP(ukcras16, x31, x15, x4, 0x0000000000000000, 0x2000000e0080000b, 0xdfff00090080fffd, x2, 128, x10) 

inst_9:// rs1==x11, rs2==x29, rd==x22, rs2_h3_val == 61439, rs1_h3_val == 21845, rs1_h2_val == 4, rs2_h1_val == 0, rs1_h1_val == 65503
// opcode: ukcras16 ; op1:x11; op2:x29; dest:x22; op1val:0x55550004ffdf0012;  op2val:0xefff000e0000000c
TEST_RR_OP(ukcras16, x22, x11, x29, 0x0000000000000000, 0x55550004ffdf0012, 0xefff000e0000000c, x2, 144, x10) 

inst_10:// rs1==x4, rs2==x15, rd==x6, rs2_h3_val == 63487, rs1_h0_val == 21845, rs2_h1_val == 8
// opcode: ukcras16 ; op1:x4; op2:x15; dest:x6; op1val:0x200000300135555;  op2val:0xf7ff000600080006
TEST_RR_OP(ukcras16, x6, x4, x15, 0x0000000000000000, 0x200000300135555, 0xf7ff000600080006, x2, 160, x10) 

inst_11:// rs1==x26, rs2==x23, rd==x1, rs2_h3_val == 64511, rs2_h1_val == 2, rs2_h2_val == 2048, rs1_h0_val == 1024
// opcode: ukcras16 ; op1:x26; op2:x23; dest:x1; op1val:0x12000ddfff0400;  op2val:0xfbff08000002000f
TEST_RR_OP(ukcras16, x1, x26, x23, 0x0000000000000000, 0x12000ddfff0400, 0xfbff08000002000f, x2, 176, x10) 

inst_12:// rs1==x14, rs2==x27, rd==x15, rs2_h3_val == 65023, rs2_h2_val == 49151, rs2_h0_val == 8192, rs1_h2_val == 65531, rs2_h1_val == 2048
// opcode: ukcras16 ; op1:x14; op2:x27; dest:x15; op1val:0x0afffb0400ffff;  op2val:0xfdffbfff08002000
TEST_RR_OP(ukcras16, x15, x14, x27, 0x0000000000000000, 0x0afffb0400ffff, 0xfdffbfff08002000, x2, 192, x10) 

inst_13:// rs1==x31, rs2==x11, rd==x3, rs2_h3_val == 65279, rs1_h1_val == 65531, rs1_h0_val == 65471, rs2_h0_val == 65279
// opcode: ukcras16 ; op1:x31; op2:x11; dest:x3; op1val:0x0e0004fffbffbf;  op2val:0xfefffff70800feff
TEST_RR_OP(ukcras16, x3, x31, x11, 0x0000000000000000, 0x0e0004fffbffbf, 0xfefffff70800feff, x2, 208, x10) 

inst_14:// rs1==x3, rs2==x8, rd==x28, rs2_h3_val == 65407, rs2_h1_val == 65531, rs1_h3_val == 65023, rs2_h0_val == 65023, rs2_h2_val == 21845
// opcode: ukcras16 ; op1:x3; op2:x8; dest:x28; op1val:0xfdffdffffffd0013;  op2val:0xff7f5555fffbfdff
TEST_RR_OP(ukcras16, x28, x3, x8, 0x0000000000000000, 0xfdffdffffffd0013, 0xff7f5555fffbfdff, x2, 224, x10) 

inst_15:// rs1==x21, rs2==x22, rd==x29, rs2_h3_val == 65471, rs1_h0_val == 65503, rs2_h2_val == 2
// opcode: ukcras16 ; op1:x21; op2:x22; dest:x29; op1val:0x555501000009ffdf;  op2val:0xffbf00020800000e
TEST_RR_OP(ukcras16, x29, x21, x22, 0x0000000000000000, 0x555501000009ffdf, 0xffbf00020800000e, x2, 240, x9) 

inst_16:// rs1==x30, rs2==x20, rd==x13, rs2_h3_val == 65503, rs1_h0_val == 64, rs2_h1_val == 4096, rs1_h2_val == 32768, rs2_h0_val == 65535, rs1_h3_val == 61439
// opcode: ukcras16 ; op1:x30; op2:x20; dest:x13; op1val:0xefff8000dfff0040;  op2val:0xffdffff71000ffff
TEST_RR_OP(ukcras16, x13, x30, x20, 0x0000000000000000, 0xefff8000dfff0040, 0xffdffff71000ffff, x2, 256, x9) 

inst_17:// rs1==x28, rs2==x25, rd==x26, rs2_h3_val == 65519, rs1_h1_val == 49151, rs2_h0_val == 64, rs2_h1_val == 32767, rs1_h3_val == 64, rs1_h2_val == 8
// opcode: ukcras16 ; op1:x28; op2:x25; dest:x26; op1val:0x400008bfff0007;  op2val:0xffef000d7fff0040
TEST_RR_OP(ukcras16, x26, x28, x25, 0x0000000000000000, 0x400008bfff0007, 0xffef000d7fff0040, x2, 272, x9) 
RVTEST_SIGBASE(x6,signature_x6_0)

inst_18:// rs1==x13, rs2==x16, rd==x25, rs2_h3_val == 65527, rs1_h3_val == 0, rs1_h1_val == 65535, rs2_h0_val == 65531, rs2_h2_val == 128
// opcode: ukcras16 ; op1:x13; op2:x16; dest:x25; op1val:0x00dfffffff0013;  op2val:0xfff70080fffbfffb
TEST_RR_OP(ukcras16, x25, x13, x16, 0x0000000000000000, 0x00dfffffff0013, 0xfff70080fffbfffb, x6, 0, x9) 

inst_19:// rs1==x24, rs2==x19, rd==x8, rs2_h3_val == 65531, rs1_h2_val == 8192, rs1_h0_val == 43690, rs2_h1_val == 64, rs2_h2_val == 65533
// opcode: ukcras16 ; op1:x24; op2:x19; dest:x8; op1val:0xefff20000006aaaa;  op2val:0xfffbfffd00400011
TEST_RR_OP(ukcras16, x8, x24, x19, 0x0000000000000000, 0xefff20000006aaaa, 0xfffbfffd00400011, x6, 16, x9) 

inst_20:// rs1==x2, rs2==x14, rd==x24, rs2_h3_val == 65533, rs2_h2_val == 65503, rs2_h1_val == 1, rs1_h1_val == 21845, rs1_h2_val == 4096
// opcode: ukcras16 ; op1:x2; op2:x14; dest:x24; op1val:0x0d100055550007;  op2val:0xfffdffdf00010005
TEST_RR_OP(ukcras16, x24, x2, x14, 0x0000000000000000, 0x0d100055550007, 0xfffdffdf00010005, x6, 32, x9) 

inst_21:// rs1==x20, rs2==x26, rd==x10, rs2_h3_val == 65534, rs1_h2_val == 21845
// opcode: ukcras16 ; op1:x20; op2:x26; dest:x10; op1val:0x40555500120011;  op2val:0xfffe080008002000
TEST_RR_OP(ukcras16, x10, x20, x26, 0x0000000000000000, 0x40555500120011, 0xfffe080008002000, x6, 48, x9) 

inst_22:// rs1==x25, rs2==x21, rd==x4, rs2_h3_val == 32768, rs1_h1_val == 8, rs1_h0_val == 256, rs1_h2_val == 65407
// opcode: ukcras16 ; op1:x25; op2:x21; dest:x4; op1val:0x13ff7f00080100;  op2val:0x8000000a000affef
TEST_RR_OP(ukcras16, x4, x25, x21, 0x0000000000000000, 0x13ff7f00080100, 0x8000000a000affef, x6, 64, x9) 

inst_23:// rs1==x1, rs2==x2, rd==x27, rs2_h3_val == 16384, rs2_h1_val == 65279, rs1_h0_val == 64511, rs1_h1_val == 16
// opcode: ukcras16 ; op1:x1; op2:x2; dest:x27; op1val:0x09000a0010fbff;  op2val:0x40000005feff0011
TEST_RR_OP(ukcras16, x27, x1, x2, 0x0000000000000000, 0x09000a0010fbff, 0x40000005feff0011, x6, 80, x9) 

inst_24:// rs1==x19, rs2==x30, rd==x0, rs2_h3_val == 8192, rs1_h3_val == 65531, rs2_h1_val == 43690, rs1_h2_val == 65534, rs2_h0_val == 21845
// opcode: ukcras16 ; op1:x19; op2:x30; dest:x0; op1val:0xfffbfffe55550012;  op2val:0x20005555aaaa5555
TEST_RR_OP(ukcras16, x0, x19, x30, 0x0000000000000000, 0xfffbfffe55550012, 0x20005555aaaa5555, x6, 96, x9) 

inst_25:// rs1==x22, rs2==x10, rd==x11, rs2_h3_val == 4096, rs1_h3_val == 64511, rs1_h2_val == 65503, rs2_h0_val == 8, rs1_h1_val == 16384
// opcode: ukcras16 ; op1:x22; op2:x10; dest:x11; op1val:0xfbffffdf4000000d;  op2val:0x1000aaaa00080008
TEST_RR_OP(ukcras16, x11, x22, x10, 0x0000000000000000, 0xfbffffdf4000000d, 0x1000aaaa00080008, x6, 112, x9) 

inst_26:// rs1==x7, rs2==x31, rd==x14, rs2_h3_val == 1024, rs2_h2_val == 64, rs1_h0_val == 65519, rs1_h3_val == 65407, rs2_h0_val == 49151
// opcode: ukcras16 ; op1:x7; op2:x31; dest:x14; op1val:0xff7f10000011ffef;  op2val:0x40000400006bfff
TEST_RR_OP(ukcras16, x14, x7, x31, 0x0000000000000000, 0xff7f10000011ffef, 0x40000400006bfff, x6, 128, x9) 

inst_27:// rs1==x23, rs2==x12, rd==x16, rs2_h3_val == 512, 
// opcode: ukcras16 ; op1:x23; op2:x12; dest:x16; op1val:0x0f0007000bfbff;  op2val:0x20000400013000a
TEST_RR_OP(ukcras16, x16, x23, x12, 0x0000000000000000, 0x0f0007000bfbff, 0x20000400013000a, x6, 144, x9) 

inst_28:// rs1==x5, rs2==x28, rd==x7, rs2_h3_val == 256, rs1_h1_val == 32768, rs2_h0_val == 64511, rs2_h1_val == 57343
// opcode: ukcras16 ; op1:x5; op2:x28; dest:x7; op1val:0x0f000680000006;  op2val:0x1000005dffffbff
TEST_RR_OP(ukcras16, x7, x5, x28, 0x0000000000000000, 0x0f000680000006, 0x1000005dffffbff, x6, 160, x9) 

inst_29:// rs1==x10, rs2==x3, rd==x12, rs2_h3_val == 128, rs1_h3_val == 128, rs2_h0_val == 4, rs2_h2_val == 65023, rs1_h0_val == 65279
// opcode: ukcras16 ; op1:x10; op2:x3; dest:x12; op1val:0x800011ffdffeff;  op2val:0x80fdff00080004
TEST_RR_OP(ukcras16, x12, x10, x3, 0x0000000000000000, 0x800011ffdffeff, 0x80fdff00080004, x6, 176, x9) 

inst_30:// rs1==x18, rs2==x24, rd==x19, rs2_h3_val == 64, rs2_h0_val == 16384, rs2_h1_val == 63487
// opcode: ukcras16 ; op1:x18; op2:x24; dest:x19; op1val:0x01ff7fbfffffbf;  op2val:0x400080f7ff4000
TEST_RR_OP(ukcras16, x19, x18, x24, 0x0000000000000000, 0x01ff7fbfffffbf, 0x400080f7ff4000, x6, 192, x3) 

inst_31:// rs1==x29, rs2==x9, rd==x2, rs2_h3_val == 8, rs2_h2_val == 1, rs1_h0_val == 32768
// opcode: ukcras16 ; op1:x29; op2:x9; dest:x2; op1val:0x01000400038000;  op2val:0x08000100405555
TEST_RR_OP(ukcras16, x2, x29, x9, 0x0000000000000000, 0x01000400038000, 0x08000100405555, x6, 208, x3) 
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:// rs2_h3_val == 4, rs2_h0_val == 65471, rs1_h1_val == 512, rs2_h1_val == 32768
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x1100040200ffdf;  op2val:0x0400088000ffbf
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x1100040200ffdf, 0x0400088000ffbf, x1, 0, x3) 

inst_33:// rs2_h3_val == 2, rs1_h3_val == 49151, rs1_h2_val == 2, rs1_h1_val == 65527
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0002fff70013;  op2val:0x020006ff7f000c
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xbfff0002fff70013, 0x020006ff7f000c, x1, 16, x3) 

inst_34:// rs2_h3_val == 1, rs1_h1_val == 0, rs2_h0_val == 65534, rs1_h3_val == 65534, rs2_h2_val == 65535, rs2_h1_val == 65535
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe000600000000;  op2val:0x01fffffffffffe
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xfffe000600000000, 0x01fffffffffffe, x1, 32, x3) 

inst_35:// rs2_h3_val == 65535, rs1_h2_val == 16384, rs1_h0_val == 57343, rs2_h2_val == 64511, rs1_h1_val == 65471
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x404000ffbfdfff;  op2val:0xfffffbfffeff0003
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x404000ffbfdfff, 0xfffffbfffeff0003, x1, 48, x3) 

inst_36:// rs2_h3_val == 0, rs2_h0_val == 32
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe000500030012;  op2val:0x00000300120020
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xfffe000500030012, 0x00000300120020, x1, 64, x3) 

inst_37:// rs1_h1_val == 4, rs2_h1_val == 512
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f000700040005;  op2val:0xfeff004002002000
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xff7f000700040005, 0xfeff004002002000, x1, 80, x3) 

inst_38:// rs1_h1_val == 2, rs2_h2_val == 65519, rs1_h2_val == 65527, rs1_h3_val == 16, rs2_h0_val == 32768
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fff700020040;  op2val:0xffdfffeffeff8000
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x10fff700020040, 0xffdfffeffeff8000, x1, 96, x3) 

inst_39:// rs1_h1_val == 1, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffe0001000a;  op2val:0x07008000060004
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xbffffffe0001000a, 0x07008000060004, x1, 112, x3) 

inst_40:// rs1_h0_val == 49151, rs1_h2_val == 65533, rs2_h0_val == 1
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x13fffd0010bfff;  op2val:0x11001300060001
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x13fffd0010bfff, 0x11001300060001, x1, 128, x3) 

inst_41:// rs1_h0_val == 63487, rs2_h2_val == 4096
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e000b000bf7ff;  op2val:0x0c1000000bfffe
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x0e000b000bf7ff, 0x0c1000000bfffe, x1, 144, x3) 

inst_42:// rs1_h0_val == 65023, rs2_h1_val == 4
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb00080013fdff;  op2val:0xffef00110004000d
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xfffb00080013fdff, 0xffef00110004000d, x1, 160, x3) 

inst_43:// rs1_h0_val == 65407, rs1_h3_val == 2, rs1_h1_val == 65534, rs2_h0_val == 65527, rs2_h2_val == 65531
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x020100fffeff7f;  op2val:0xffeffffbffbffff7
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x020100fffeff7f, 0xffeffffbffbffff7, x1, 176, x3) 

inst_44:// rs1_h0_val == 65527, rs2_h2_val == 4
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x040012ffeffff7;  op2val:0xffbf00040011dfff
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x040012ffeffff7, 0xffbf00040011dfff, x1, 192, x3) 

inst_45:// rs1_h0_val == 65531, rs2_h2_val == 32768
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c01000006fffb;  op2val:0x1008000000a0005
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x0c01000006fffb, 0x1008000000a0005, x1, 208, x3) 

inst_46:// rs1_h0_val == 65534, rs2_h1_val == 49151, rs2_h0_val == 256
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x010008fffbfffe;  op2val:0x0efdffbfff0100
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x010008fffbfffe, 0x0efdffbfff0100, x1, 224, x3) 

inst_47:// rs1_h0_val == 16384, rs1_h1_val == 65023, rs1_h2_val == 2048, rs2_h0_val == 32767
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x090800fdff4000;  op2val:0x2000013efff7fff
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x090800fdff4000, 0x2000013efff7fff, x1, 240, x3) 

inst_48:// rs1_h0_val == 8192, rs2_h2_val == 61439, rs1_h3_val == 65535, rs2_h1_val == 256
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff000e00032000;  op2val:0xfff7efff01000012
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xffff000e00032000, 0xfff7efff01000012, x1, 256, x3) 

inst_49:// rs1_h0_val == 4096, rs2_h1_val == 65534, rs2_h0_val == 512, rs1_h3_val == 57343
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0100000b1000;  op2val:0x0aeffffffe0200
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xdfff0100000b1000, 0x0aeffffffe0200, x1, 272, x3) 

inst_50:// rs1_h0_val == 2048, rs1_h3_val == 65279, rs2_h1_val == 32
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffdffbf0800;  op2val:0xfdffffef0020fdff
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xfefffffdffbf0800, 0xfdffffef0020fdff, x1, 288, x3) 

inst_51:// rs1_h0_val == 512, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000080200;  op2val:0x100efff00070020
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x00010000080200, 0x100efff00070020, x1, 304, x3) 

inst_52:// rs1_h0_val == 128, rs2_h0_val == 2
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000bfff70080;  op2val:0x0befff00000002
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x2000000bfff70080, 0x0befff00000002, x1, 320, x3) 

inst_53:// rs1_h0_val == 16, rs1_h2_val == 32, rs2_h2_val == 65534
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x04002002000010;  op2val:0x12fffeffff000f
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x04002002000010, 0x12fffeffff000f, x1, 336, x3) 

inst_54:// rs1_h0_val == 8, rs2_h2_val == 0, rs1_h2_val == 65471, rs1_h3_val == 63487
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffbfdfff0008;  op2val:0x10000000fffb0040
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xf7ffffbfdfff0008, 0x10000000fffb0040, x1, 352, x3) 

inst_55:// rs1_h0_val == 4, rs1_h2_val == 65279
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffeff000d0004;  op2val:0xfffb0001fffe000f
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xfbfffeff000d0004, 0xfffb0001fffe000f, x1, 368, x3) 

inst_56:// rs1_h0_val == 2, rs2_h0_val == 61439, rs1_h2_val == 1, rs2_h2_val == 65407
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0001ffdf0002;  op2val:0x80ff7f1000efff
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xffff0001ffdf0002, 0x80ff7f1000efff, x1, 384, x3) 

inst_57:// rs1_h0_val == 1, rs2_h2_val == 16384
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff002000010001;  op2val:0x8004000fffefffe
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xbfff002000010001, 0x8004000fffefffe, x1, 400, x3) 

inst_58:// rs2_h2_val == 32767, rs1_h1_val == 61439
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x12000fefff000a;  op2val:0x097fffbffffff7
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x12000fefff000a, 0x097fffbffffff7, x1, 416, x3) 

inst_59:// rs2_h0_val == 4096, rs2_h1_val == 21845, rs1_h3_val == 65519
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef7fff000a0005;  op2val:0x02100055551000
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xffef7fff000a0005, 0x02100055551000, x1, 432, x3) 

inst_60:// rs2_h0_val == 2048, rs2_h2_val == 8192, rs1_h3_val == 8
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x080005fdff0080;  op2val:0x032000000d0800
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x080005fdff0080, 0x032000000d0800, x1, 448, x3) 

inst_61:// rs2_h0_val == 16, rs1_h3_val == 43690, rs1_h2_val == 512, rs2_h1_val == 65527, rs2_h2_val == 57343
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0200000a000d;  op2val:0x5555dffffff70010
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xaaaa0200000a000d, 0x5555dffffff70010, x1, 464, x3) 

inst_62:// rs2_h0_val == 0, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff000afdff0006;  op2val:0x12fffe00070000
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xbfff000afdff0006, 0x12fffe00070000, x1, 480, x3) 

inst_63:// rs1_h3_val == 32767, rs1_h2_val == 65519
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffef0000ffef;  op2val:0x0f00050200000b
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x7fffffef0000ffef, 0x0f00050200000b, x1, 496, x3) 

inst_64:// rs1_h3_val == 65471, rs1_h1_val == 65279
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0800feff0012;  op2val:0x4000400000120005
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xffbf0800feff0012, 0x4000400000120005, x1, 512, x3) 

inst_65:// rs1_h3_val == 65503, rs1_h2_val == 64
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0040dfff0008;  op2val:0x030001000f0000
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xffdf0040dfff0008, 0x030001000f0000, x1, 528, x3) 

inst_66:// rs1_h3_val == 65527, rs2_h1_val == 65533
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7002000010005;  op2val:0x2000fff7fffd2000
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xfff7002000010005, 0x2000fff7fffd2000, x1, 544, x3) 

inst_67:// rs1_h3_val == 65533, rs2_h2_val == 63487
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0001feffaaaa;  op2val:0x4000f7ff00400800
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xfffd0001feffaaaa, 0x4000f7ff00400800, x1, 560, x3) 

inst_68:// rs1_h3_val == 32768, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000b00000010;  op2val:0x11000dbfff0005
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x8000000b00000010, 0x11000dbfff0005, x1, 576, x3) 

inst_69:// rs1_h3_val == 16384, rs1_h1_val == 64511, rs1_h2_val == 128
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000080fbff0001;  op2val:0x13000010000009
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x40000080fbff0001, 0x13000010000009, x1, 592, x3) 

inst_70:// rs1_h3_val == 2048, rs1_h1_val == 32
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x800ffef0020ffdf;  op2val:0xffff0008000d4000
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x800ffef0020ffdf, 0xffff0008000d4000, x1, 608, x3) 

inst_71:// rs1_h3_val == 1024, rs1_h2_val == 0
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000090004;  op2val:0x100555500095555
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x400000000090004, 0x100555500095555, x1, 624, x3) 

inst_72:// rs1_h3_val == 256, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000100aaaa8000;  op2val:0x100080000006ffef
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x1000100aaaa8000, 0x100080000006ffef, x1, 640, x3) 

inst_73:// rs1_h2_val == 49151, rs1_h1_val == 64
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x40bfff0040ffff;  op2val:0x080009ffbffffb
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x40bfff0040ffff, 0x080009ffbffffb, x1, 656, x3) 

inst_74:// rs1_h2_val == 61439, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeefff0400fbff;  op2val:0xfdff000a00040013
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xfffeefff0400fbff, 0xfdff000a00040013, x1, 672, x3) 

inst_75:// rs1_h2_val == 63487, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfff7ffbfffefff;  op2val:0xdfff8000fff7fdff
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xfdfff7ffbfffefff, 0xdfff8000fff7fdff, x1, 688, x3) 

inst_76:// rs2_h2_val == 1024, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0100feff0001;  op2val:0xfdff0400f7ffefff
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xfeff0100feff0001, 0xfdff0400f7ffefff, x1, 704, x3) 

inst_77:// rs1_h2_val == 64511, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x11fbff00200200;  op2val:0x090002000f0002
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x11fbff00200200, 0x090002000f0002, x1, 720, x3) 

inst_78:// rs1_h2_val == 65023, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fdffefff0006;  op2val:0x0900060004000d
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x09fdffefff0006, 0x0900060004000d, x1, 736, x3) 

inst_79:// rs2_h2_val == 256, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000cffef0007;  op2val:0x130100000fffef
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x2000000cffef0007, 0x130100000fffef, x1, 752, x3) 

inst_80:// rs2_h2_val == 32, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x05000efffefeff;  op2val:0xfeff00200008fffe
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x05000efffefeff, 0xfeff00200008fffe, x1, 768, x3) 

inst_81:// rs2_h2_val == 16, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0adfff0400dfff;  op2val:0x55550010fffbfffd
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x0adfff0400dfff, 0x55550010fffbfffd, x1, 784, x3) 

inst_82:// rs1_h2_val == 1024, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000040040000004;  op2val:0xffbf0080f7ff0800
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x4000040040000004, 0xffbf0080f7ff0800, x1, 800, x3) 

inst_83:// rs2_h1_val == 64511, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf020000080080;  op2val:0x0e0100fbffffef
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xffbf020000080080, 0x0e0100fbffffef, x1, 816, x3) 

inst_84:// rs1_h2_val == 16, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0700100001ffff;  op2val:0x020013fffd7fff
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x0700100001ffff, 0x020013fffd7fff, x1, 832, x3) 

inst_85:// rs2_h1_val == 65503, rs2_h2_val == 65279
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0009ffbf000b;  op2val:0x1000feffffdf0007
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xfffd0009ffbf000b, 0x1000feffffdf0007, x1, 848, x3) 

inst_86:// rs2_h1_val == 65519, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0efffb4000000c;  op2val:0x80fff7ffef0008
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x0efffb4000000c, 0x80fff7ffef0008, x1, 864, x3) 

inst_87:// rs1_h1_val == 32767, rs1_h2_val == 43690
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x03aaaa7ffffff7;  op2val:0xfffdaaaa00120040
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x03aaaa7ffffff7, 0xfffdaaaa00120040, x1, 880, x3) 

inst_88:// rs1_h2_val == 65535, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffdffdff;  op2val:0x030020000b0009
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffdffdff, 0x030020000b0009, x1, 896, x3) 

inst_89:// rs2_h1_val == 16384, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff00000004000a;  op2val:0x12000640000400
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xbfff00000004000a, 0x12000640000400, x1, 912, x3) 

inst_90:// rs2_h1_val == 8192, rs1_h1_val == 4096
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x09ffef10008000;  op2val:0x4007fff20000012
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x09ffef10008000, 0x4007fff20000012, x1, 928, x3) 

inst_91:// rs1_h1_val == 63487, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x13ffeff7ff0008;  op2val:0x06fffb02000009
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x13ffeff7ff0008, 0x06fffb02000009, x1, 944, x3) 

inst_92:// rs1_h1_val == 65407, rs2_h1_val == 16
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffdff7f5555;  op2val:0x05000f0010ffff
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xfdfffffdff7f5555, 0x05000f0010ffff, x1, 960, x3) 

inst_93:// rs2_h0_val == 43690, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x03000900200012;  op2val:0x10002000011aaaa
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x03000900200012, 0x10002000011aaaa, x1, 976, x3) 

inst_94:// rs1_h1_val == 2048, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x07000d08000007;  op2val:0x0e00010020fffe
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x07000d08000007, 0x0e00010020fffe, x1, 992, x3) 

inst_95:// rs2_h2_val == 65471, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffff7ff0080000a;  op2val:0xff7fffbf00130200
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xbffff7ff0080000a, 0xff7fffbf00130200, x1, 1008, x3) 

inst_96:// rs1_h1_val == 256, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fdfff0100fffd;  op2val:0xefff0003fbffefff
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xff7fdfff0100fffd, 0xefff0003fbffefff, x1, 1024, x3) 

inst_97:// rs2_h0_val == 63487, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0f0004fdff0004;  op2val:0x400000dfffbf7ff
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x0f0004fdff0004, 0x400000dfffbf7ff, x1, 1040, x3) 

inst_98:// rs2_h0_val == 65407, 
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x12dfff0800000c;  op2val:0x01fff7dfffff7f
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x12dfff0800000c, 0x01fff7dfffff7f, x1, 1056, x3) 

inst_99:// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 1024, rs2_h3_val == 21845, rs1_h0_val == 61439, rs1_h1_val == 1024, rs2_h0_val == 57343
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000120400efff;  op2val:0x555500050400dfff
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0x100000120400efff, 0x555500050400dfff, x1, 1072, x3) 

inst_100:// rs2_h3_val == 8192, rs1_h3_val == 65531, rs2_h1_val == 43690, rs1_h2_val == 65534, rs2_h0_val == 21845
// opcode: ukcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffe55550012;  op2val:0x20005555aaaa5555
TEST_RR_OP(ukcras16, x31, x30, x29, 0x0000000000000000, 0xfffbfffe55550012, 0x20005555aaaa5555, x1, 1088, x3) 
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 138*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
