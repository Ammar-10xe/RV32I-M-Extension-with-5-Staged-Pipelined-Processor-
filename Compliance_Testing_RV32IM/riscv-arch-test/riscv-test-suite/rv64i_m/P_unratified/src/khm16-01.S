
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the khm16 instruction of the RISC-V RV64PZicsr extension for the khm16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",khm16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 == rd != rs2, rs1==x7, rs2==x4, rd==x7, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs2_h0_val == -1025, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val == 4, rs1_h3_val == -513, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == -129, rs2_h3_val == -8193
// opcode: khm16 ; op1:x7; op2:x4; dest:x7; op1val:0xfdff0004ff7f8000;  op2val:0xdfff00070005fbff
TEST_PKRR_OP(khm16, x7, x7, x4, 0x0000000000000000, 0xfdff0004ff7f8000, 0xdfff00070005fbff, x7, x5, 0, x16)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x6, rs2==x0, rd==x30, rs1_h3_val == rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val == 1, rs1_h1_val == 16, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h3_val == 1, rs1_h2_val == -9, rs2_h2_val == 2
// opcode: khm16 ; op1:x6; op2:x0; dest:x30; op1val:0x01fff70010fff6;  op2val:0x010002fff6fff8
TEST_PKRR_OP(khm16, x30, x6, x0, 0x0000000000000000, 0x01fff70010fff6, 0x010002fff6fff8, x6, x5, 16, x16)

inst_2:
// rs1 == rs2 != rd, rs1==x9, rs2==x9, rd==x0, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h1_val == -513, rs1_h0_val == -3, rs1_h3_val == -4097, rs2_h2_val == 4096, rs2_h0_val == -9, rs1_h2_val == -2049, rs2_h3_val == 2, rs2_h1_val == 32
// opcode: khm16 ; op1:x9; op2:x9; dest:x0; op1val:0xeffff7fffdfffffd;  op2val:0x0210000020fff7
TEST_PKRR_OP(khm16, x0, x9, x9, 0x0000000000000000, 0xeffff7fffdfffffd, 0x0210000020fff7, x9, x5, 32, x16)

inst_3:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h1_val == -3, rs1_h3_val == 256, rs2_h1_val == -16385, rs2_h3_val == -65, rs2_h0_val == -8193, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == 1024, rs1_h2_val == -2
// opcode: khm16 ; op1:x28; op2:x28; dest:x28; op1val:0x100fffefffdfffc;  op2val:0xffbf0400bfffdfff
TEST_PKRR_OP(khm16, x28, x28, x28, 0x0000000000000000, 0x100fffefffdfffc, 0xffbf0400bfffdfff, x28, x5, 48, x16)

inst_4:
// rs2 == rd != rs1, rs1==x1, rs2==x26, rd==x26, rs1_h2_val == rs2_h2_val, rs1_h2_val == 4096, rs1_h1_val == 32, rs2_h0_val == -257, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h3_val == -17, rs2_h1_val == 2048, rs2_h3_val == -1
// opcode: khm16 ; op1:x1; op2:x26; dest:x26; op1val:0xffef10000020fffc;  op2val:0xffff10000800feff
TEST_PKRR_OP(khm16, x26, x1, x26, 0x0000000000000000, 0xffef10000020fffc, 0xffff10000800feff, x1, x5, 64, x16)

inst_5:
// rs1==x20, rs2==x2, rd==x14, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val == 512, rs1_h0_val == 4096, rs2_h2_val == -9, rs2_h1_val == -65, rs2_h0_val == -513, rs1_h3_val == -8193, rs2_h3_val == 128, rs1_h2_val == -513, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: khm16 ; op1:x20; op2:x2; dest:x14; op1val:0xdffffdff02001000;  op2val:0x80fff7ffbffdff
TEST_PKRR_OP(khm16, x14, x20, x2, 0x0000000000000000, 0xdffffdff02001000, 0x80fff7ffbffdff, x20, x5, 80, x16)

inst_6:
// rs1==x0, rs2==x13, rd==x2, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h2_val == -4097, rs1_h0_val == -5, rs1_h3_val == 16, rs2_h1_val == -3, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -1025
// opcode: khm16 ; op1:x0; op2:x13; dest:x2; op1val:0x100007fbfffffb;  op2val:0x80effffffd0005
TEST_PKRR_OP(khm16, x2, x0, x13, 0x0000000000000000, 0x100007fbfffffb, 0x80effffffd0005, x0, x5, 96, x16)

inst_7:
// rs1==x26, rs2==x11, rd==x21, rs1_h1_val == rs2_h1_val, rs1_h3_val == 32767, rs1_h2_val == 2, rs1_h0_val == 16384
// opcode: khm16 ; op1:x26; op2:x11; dest:x21; op1val:0x7fff000200094000;  op2val:0xfff800020009fff7
TEST_PKRR_OP(khm16, x21, x26, x11, 0x0000000000000000, 0x7fff000200094000, 0xfff800020009fff7, x26, x5, 112, x16)

inst_8:
// rs1==x23, rs2==x14, rd==x22, rs1_h0_val == rs2_h0_val, rs2_h1_val == -21846, rs1_h0_val == -33, rs1_h3_val == -21846, rs2_h0_val == -33, rs2_h3_val == 256, rs2_h2_val == 32767
// opcode: khm16 ; op1:x23; op2:x14; dest:x22; op1val:0xaaaafffefff6ffdf;  op2val:0x1007fffaaaaffdf
TEST_PKRR_OP(khm16, x22, x23, x14, 0x0000000000000000, 0xaaaafffefff6ffdf, 0x1007fffaaaaffdf, x23, x5, 128, x16)

inst_9:
// rs1==x4, rs2==x7, rd==x10, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == -513, rs1_h2_val == 2048, rs2_h2_val == -1025, rs2_h0_val == 2, rs2_h1_val == -4097, rs1_h1_val == 16384, rs1_h0_val == 8192, rs1_h3_val == 0
// opcode: khm16 ; op1:x4; op2:x7; dest:x10; op1val:0x00080040002000;  op2val:0xfdfffbffefff0002
TEST_PKRR_OP(khm16, x10, x4, x7, 0x0000000000000000, 0x00080040002000, 0xfdfffbffefff0002, x4, x5, 144, x16)

inst_10:
// rs1==x30, rs2==x18, rd==x15, rs2_h3_val == -21846, rs2_h1_val == 32767, rs1_h2_val == 1024, rs2_h2_val == 4, rs2_h0_val == -5, rs1_h0_val == -1025
// opcode: khm16 ; op1:x30; op2:x18; dest:x15; op1val:0x030400fffdfbff;  op2val:0xaaaa00047ffffffb
TEST_PKRR_OP(khm16, x15, x30, x18, 0x0000000000000000, 0x030400fffdfbff, 0xaaaa00047ffffffb, x30, x5, 160, x16)

inst_11:
// rs1==x21, rs2==x8, rd==x13, rs2_h3_val == 21845, rs2_h2_val == -1, rs1_h0_val == -9, rs1_h3_val == 4096, rs2_h0_val == 128
// opcode: khm16 ; op1:x21; op2:x8; dest:x13; op1val:0x1000fffafffafff7;  op2val:0x5555fffffffd0080
TEST_PKRR_OP(khm16, x13, x21, x8, 0x0000000000000000, 0x1000fffafffafff7, 0x5555fffffffd0080, x21, x5, 176, x16)

inst_12:
// rs1==x24, rs2==x30, rd==x3, rs2_h3_val == 32767, rs1_h3_val == -257, rs1_h1_val == -257, rs2_h1_val == 8
// opcode: khm16 ; op1:x24; op2:x30; dest:x3; op1val:0xfeff0006feff3fff;  op2val:0x7fff04000008fffb
TEST_PKRR_OP(khm16, x3, x24, x30, 0x0000000000000000, 0xfeff0006feff3fff, 0x7fff04000008fffb, x24, x5, 192, x16)

inst_13:
// rs1==x17, rs2==x12, rd==x31, rs2_h3_val == -16385, rs2_h0_val == -65, rs2_h2_val == -5, rs1_h0_val == 512
// opcode: khm16 ; op1:x17; op2:x12; dest:x31; op1val:0xefffc000c0000200;  op2val:0xbffffffb0008ffbf
TEST_PKRR_OP(khm16, x31, x17, x12, 0x0000000000000000, 0xefffc000c0000200, 0xbffffffb0008ffbf, x17, x5, 208, x16)

inst_14:
// rs1==x2, rs2==x27, rd==x29, rs2_h3_val == -4097, rs2_h2_val == 2048, rs2_h1_val == -33, rs2_h0_val == 1, rs1_h3_val == -2049
// opcode: khm16 ; op1:x2; op2:x27; dest:x29; op1val:0xf7ff000340003fff;  op2val:0xefff0800ffdf0001
TEST_PKRR_OP(khm16, x29, x2, x27, 0x0000000000000000, 0xf7ff000340003fff, 0xefff0800ffdf0001, x2, x5, 224, x16)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_15:
// rs1==x3, rs2==x5, rd==x12, rs2_h3_val == -2049, rs1_h2_val == 8192, rs1_h1_val == -16385, rs1_h3_val == -9
// opcode: khm16 ; op1:x3; op2:x5; dest:x12; op1val:0xfff72000bfff3fff;  op2val:0xf7fffbffffdffff7
TEST_PKRR_OP(khm16, x12, x3, x5, 0x0000000000000000, 0xfff72000bfff3fff, 0xf7fffbffffdffff7, x3, x2, 0, x7)

inst_16:
// rs1==x5, rs2==x15, rd==x9, rs2_h3_val == -1025, rs2_h1_val == -257, rs2_h0_val == -2049
// opcode: khm16 ; op1:x5; op2:x15; dest:x9; op1val:0xfff9fff9fffcfff9;  op2val:0xfbff0007fefff7ff
TEST_PKRR_OP(khm16, x9, x5, x15, 0x0000000000000000, 0xfff9fff9fffcfff9, 0xfbff0007fefff7ff, x5, x2, 16, x7)

inst_17:
// rs1==x15, rs2==x20, rd==x19, rs2_h3_val == -257, rs2_h1_val == 2, rs1_h0_val == -17, rs2_h2_val == -3, rs2_h0_val == 256
// opcode: khm16 ; op1:x15; op2:x20; dest:x19; op1val:0xc000fff60020ffef;  op2val:0xfefffffd00020100
TEST_PKRR_OP(khm16, x19, x15, x20, 0x0000000000000000, 0xc000fff60020ffef, 0xfefffffd00020100, x15, x2, 32, x7)

inst_18:
// rs1==x27, rs2==x10, rd==x8, rs2_h3_val == -129, rs2_h2_val == -65, rs1_h3_val == -3, rs2_h0_val == -129
// opcode: khm16 ; op1:x27; op2:x10; dest:x8; op1val:0xfffdfff6fffcfffd;  op2val:0xff7fffbf0003ff7f
TEST_PKRR_OP(khm16, x8, x27, x10, 0x0000000000000000, 0xfffdfff6fffcfffd, 0xff7fffbf0003ff7f, x27, x2, 48, x7)

inst_19:
// rs1==x29, rs2==x31, rd==x6, rs2_h3_val == -33, rs1_h0_val == -8193, rs2_h1_val == 0, rs1_h1_val == 8192
// opcode: khm16 ; op1:x29; op2:x31; dest:x6; op1val:0x10020002000dfff;  op2val:0xffdffff600000002
TEST_PKRR_OP(khm16, x6, x29, x31, 0x0000000000000000, 0x10020002000dfff, 0xffdffff600000002, x29, x2, 64, x7)

inst_20:
// rs1==x25, rs2==x6, rd==x23, rs2_h3_val == -17, rs2_h2_val == 32, rs2_h1_val == -9
// opcode: khm16 ; op1:x25; op2:x6; dest:x23; op1val:0x05fff90009fff6;  op2val:0xffef0020fff7f7ff
TEST_PKRR_OP(khm16, x23, x25, x6, 0x0000000000000000, 0x05fff90009fff6, 0xffef0020fff7f7ff, x25, x2, 80, x7)

inst_21:
// rs1==x13, rs2==x1, rd==x16, rs2_h3_val == -9, rs2_h0_val == 16384, rs2_h1_val == 16384
// opcode: khm16 ; op1:x13; op2:x1; dest:x16; op1val:0x03fffefeffc000;  op2val:0xfff77fff40004000
TEST_PKRR_OP(khm16, x16, x13, x1, 0x0000000000000000, 0x03fffefeffc000, 0xfff77fff40004000, x13, x2, 96, x7)

inst_22:
// rs1==x31, rs2==x3, rd==x11, rs2_h3_val == -5, rs1_h2_val == 64, rs2_h0_val == -17, rs1_h0_val == 8
// opcode: khm16 ; op1:x31; op2:x3; dest:x11; op1val:0x01004000070008;  op2val:0xfffbfff90008ffef
TEST_PKRR_OP(khm16, x11, x31, x3, 0x0000000000000000, 0x01004000070008, 0xfffbfff90008ffef, x31, x2, 112, x7)

inst_23:
// rs1==x22, rs2==x23, rd==x25, rs2_h3_val == -3, rs1_h1_val == -2
// opcode: khm16 ; op1:x22; op2:x23; dest:x25; op1val:0xfffafff9fffe0003;  op2val:0xfffdfff6fff90002
TEST_PKRR_OP(khm16, x25, x22, x23, 0x0000000000000000, 0xfffafff9fffe0003, 0xfffdfff6fff90002, x22, x2, 128, x7)

inst_24:
// rs1==x11, rs2==x22, rd==x20, rs2_h3_val == -2, rs1_h1_val == 21845, rs2_h1_val == 4096, rs2_h0_val == 8, rs2_h2_val == 21845
// opcode: khm16 ; op1:x11; op2:x22; dest:x20; op1val:0xfff7000955554000;  op2val:0xfffe555510000008
TEST_PKRR_OP(khm16, x20, x11, x22, 0x0000000000000000, 0xfff7000955554000, 0xfffe555510000008, x11, x2, 144, x7)

inst_25:
// rs1==x18, rs2==x25, rd==x27, rs2_h3_val == -32768, rs1_h1_val == 2, rs1_h2_val == -21846, rs2_h1_val == -17
// opcode: khm16 ; op1:x18; op2:x25; dest:x27; op1val:0x1000aaaa00020005;  op2val:0x80007fffffefff7f
TEST_PKRR_OP(khm16, x27, x18, x25, 0x0000000000000000, 0x1000aaaa00020005, 0x80007fffffefff7f, x18, x2, 160, x7)

inst_26:
// rs1==x10, rs2==x29, rd==x17, rs2_h3_val == 16384, rs2_h1_val == -2, rs2_h2_val == 512
// opcode: khm16 ; op1:x10; op2:x29; dest:x17; op1val:0xf7ff0004bffffffa;  op2val:0x40000200fffefff8
TEST_PKRR_OP(khm16, x17, x10, x29, 0x0000000000000000, 0xf7ff0004bffffffa, 0x40000200fffefff8, x10, x2, 176, x7)

inst_27:
// rs1==x14, rs2==x16, rd==x1, rs2_h3_val == 8192, rs2_h2_val == -32768
// opcode: khm16 ; op1:x14; op2:x16; dest:x1; op1val:0xfffcfff64000ffdf;  op2val:0x20008000ffbfff7f
TEST_PKRR_OP(khm16, x1, x14, x16, 0x0000000000000000, 0xfffcfff64000ffdf, 0x20008000ffbfff7f, x14, x2, 192, x7)

inst_28:
// rs1==x8, rs2==x21, rd==x18, rs2_h3_val == 4096, rs1_h2_val == 16, rs1_h3_val == 16384, rs1_h1_val == -4097, rs2_h0_val == 32767
// opcode: khm16 ; op1:x8; op2:x21; dest:x18; op1val:0x40000010effffffa;  op2val:0x10000020feff7fff
TEST_PKRR_OP(khm16, x18, x8, x21, 0x0000000000000000, 0x40000010effffffa, 0x10000020feff7fff, x8, x2, 208, x7)

inst_29:
// rs1==x12, rs2==x17, rd==x4, rs2_h3_val == 2048, rs1_h3_val == -1, rs1_h0_val == -513
// opcode: khm16 ; op1:x12; op2:x17; dest:x4; op1val:0xffff00020200fdff;  op2val:0x80008000800fff9
TEST_PKRR_OP(khm16, x4, x12, x17, 0x0000000000000000, 0xffff00020200fdff, 0x80008000800fff9, x12, x2, 224, x7)

inst_30:
// rs1==x19, rs2==x24, rd==x5, rs2_h3_val == 1024, rs1_h2_val == -16385, rs1_h3_val == 128, rs2_h1_val == -8193, rs1_h1_val == 8
// opcode: khm16 ; op1:x19; op2:x24; dest:x5; op1val:0x80bfff0008fff7;  op2val:0x4000800dfffffdf
TEST_PKRR_OP(khm16, x5, x19, x24, 0x0000000000000000, 0x80bfff0008fff7, 0x4000800dfffffdf, x19, x2, 240, x7)

inst_31:
// rs1==x16, rs2==x19, rd==x24, rs2_h3_val == 512, 
// opcode: khm16 ; op1:x16; op2:x19; dest:x24; op1val:0x100fdff02002000;  op2val:0x200effffffcfdff
TEST_PKRR_OP(khm16, x24, x16, x19, 0x0000000000000000, 0x100fdff02002000, 0x200effffffcfdff, x16, x2, 256, x3)

inst_32:
// rs2_h3_val == 64, rs1_h2_val == 32, rs2_h1_val == 256, rs1_h1_val == 128
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff600200080fffb;  op2val:0x4010000100fffa
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xfff600200080fffb, 0x4010000100fffa, x30, x2, 272, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs2_h3_val == 32, rs1_h3_val == 1024, rs1_h2_val == 512, rs1_h1_val == 4096, rs2_h2_val == -129, rs1_h0_val == 21845
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x400020010005555;  op2val:0x20ff7f0000fff7
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x400020010005555, 0x20ff7f0000fff7, x30, x1, 0, x3)

inst_34:
// rs2_h3_val == 16, rs1_h3_val == -2, rs2_h1_val == -32768, rs1_h0_val == 2, rs1_h1_val == -2049
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefff6f7ff0002;  op2val:0x1055558000ffdf
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xfffefff6f7ff0002, 0x1055558000ffdf, x30, x1, 16, x3)

inst_35:
// rs2_h3_val == 8, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffdff00200200;  op2val:0x08fff9fff7ff7f
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xffeffdff00200200, 0x08fff9fff7ff7f, x30, x1, 32, x3)

inst_36:
// rs1_h1_val == -5, rs1_h2_val == -4097, rs2_h0_val == -4097, rs2_h2_val == -513
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffeffffffb0200;  op2val:0x01fdffdfffefff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x7fffeffffffb0200, 0x01fdffdfffefff, x30, x1, 48, x3)

inst_37:
// rs1_h1_val == -32768, rs2_h2_val == 8, rs1_h3_val == 8
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x08000480000005;  op2val:0x4000008fff9fffc
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x08000480000005, 0x4000008fff9fffc, x30, x1, 64, x3)

inst_38:
// rs1_h1_val == 2048, rs2_h0_val == 64, rs1_h2_val == -257, rs2_h1_val == 16, rs1_h0_val == 32767
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7feff08007fff;  op2val:0xf7fffff900100040
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xfff7feff08007fff, 0xf7fffff900100040, x30, x1, 80, x3)

inst_39:
// rs1_h1_val == 1024, rs2_h2_val == -8193, rs1_h2_val == -3, rs1_h0_val == 0
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffd04000000;  op2val:0xbfffdfff7fff0001
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xfffcfffd04000000, 0xbfffdfff7fff0001, x30, x1, 96, x3)

inst_40:
// rs1_h1_val == 256, rs1_h3_val == -5, rs1_h0_val == 256, rs1_h2_val == 21845, rs2_h1_val == -2049
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb555501000100;  op2val:0x7fff0008f7fffbff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xfffb555501000100, 0x7fff0008f7fffbff, x30, x1, 112, x3)

inst_41:
// rs1_h1_val == 64, rs1_h3_val == -1025, rs2_h2_val == -33, rs2_h0_val == 16, rs1_h2_val == 16384
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff400000407fff;  op2val:0xc000ffdf01000010
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xfbff400000407fff, 0xc000ffdf01000010, x30, x1, 128, x3)

inst_42:
// rs1_h1_val == 4, rs2_h0_val == -2, rs1_h0_val == 128, rs1_h2_val == 128
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa008000040080;  op2val:0xbfff0200f7fffffe
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xaaaa008000040080, 0xbfff0200f7fffffe, x30, x1, 144, x3)

inst_43:
// rs1_h1_val == 1, rs2_h2_val == 1
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe000700010100;  op2val:0xffdf00011000fffb
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xfffe000700010100, 0xffdf00011000fffb, x30, x1, 160, x3)

inst_44:
// rs1_h1_val == 0, rs1_h2_val == -1025
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffbff0000fdff;  op2val:0x03fffdfff60006
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x3ffffbff0000fdff, 0x03fffdfff60006, x30, x1, 176, x3)

inst_45:
// rs1_h1_val == -1, rs1_h0_val == -21846, rs2_h2_val == 0
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffaffffaaaa;  op2val:0x55550000efffffbf
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x3ffffffaffffaaaa, 0x55550000efffffbf, x30, x1, 192, x3)

inst_46:
// rs1_h0_val == -16385, rs1_h3_val == 64, rs2_h1_val == 8192, rs2_h2_val == -257, rs2_h0_val == -32768
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000400009bfff;  op2val:0xfffffeff20008000
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x4000400009bfff, 0xfffffeff20008000, x30, x1, 208, x3)

inst_47:
// rs1_h0_val == -4097, rs2_h0_val == 4096
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fff90004efff;  op2val:0x10000120001000
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x09fff90004efff, 0x10000120001000, x30, x1, 224, x3)

inst_48:
// rs1_h0_val == -2049, rs2_h1_val == -1025, rs1_h1_val == -8193
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc4000dffff7ff;  op2val:0x55551000fbfffffb
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xfffc4000dffff7ff, 0x55551000fbfffffb, x30, x1, 240, x3)

inst_49:
// rs1_h0_val == -257, rs2_h2_val == 64, rs1_h3_val == 512
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x2003fff0400feff;  op2val:0x8000040fff60040
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x2003fff0400feff, 0x8000040fff60040, x30, x1, 256, x3)

inst_50:
// rs1_h0_val == -129, rs2_h1_val == 1024, rs1_h2_val == -32768
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff780000000ff7f;  op2val:0x07000004003fff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xfff780000000ff7f, 0x07000004003fff, x30, x1, 272, x3)

inst_51:
// rs1_h0_val == -65, rs2_h1_val == -513, rs2_h0_val == 8192, rs1_h2_val == 0
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff00000008ffbf;  op2val:0x060009fdff2000
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x3fff00000008ffbf, 0x060009fdff2000, x30, x1, 288, x3)

inst_52:
// rs1_h0_val == -2, rs1_h2_val == -1, rs1_h1_val == -33
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x03ffffffdffffe;  op2val:0xfeffffbf3fffefff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x03ffffffdffffe, 0xfeffffbf3fffefff, x30, x1, 304, x3)

inst_53:
// rs1_h0_val == 2048, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x400ffff10000800;  op2val:0xff7feffffbff8000
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x400ffff10000800, 0xff7feffffbff8000, x30, x1, 320, x3)

inst_54:
// rs1_h0_val == 1024, rs2_h1_val == 21845
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x05000400080400;  op2val:0xdfff000455550001
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x05000400080400, 0xdfff000455550001, x30, x1, 336, x3)

inst_55:
// rs1_h0_val == 64, rs1_h3_val == 8192, rs1_h2_val == 1
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000102000040;  op2val:0xffef0006feff2000
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x2000000102000040, 0xffef0006feff2000, x30, x1, 352, x3)

inst_56:
// rs2_h1_val == 4, rs1_h0_val == -1
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x4008003fffffff;  op2val:0xffdf002000040040
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x4008003fffffff, 0xffdf002000040040, x30, x1, 368, x3)

inst_57:
// rs2_h1_val == 1, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x03080010000002;  op2val:0x2000090001fffe
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x03080010000002, 0x2000090001fffe, x30, x1, 384, x3)

inst_58:
// rs2_h1_val == -1, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff001000050100;  op2val:0xefffdfffffffffbf
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xffff001000050100, 0xefffdfffffffffbf, x30, x1, 400, x3)

inst_59:
// rs2_h0_val == -21846, rs1_h3_val == 2048
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x8004000fff80100;  op2val:0xfffb55550008aaaa
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x8004000fff80100, 0xfffb55550008aaaa, x30, x1, 416, x3)

inst_60:
// rs2_h0_val == 21845, rs1_h3_val == 2, rs2_h1_val == 64
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x02000100400007;  op2val:0x07c00000405555
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x02000100400007, 0x07c00000405555, x30, x1, 432, x3)

inst_61:
// rs2_h0_val == -16385, rs2_h2_val == -21846
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fbfffffdc000;  op2val:0xfff6aaaa0003bfff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xfff7fbfffffdc000, 0xfff6aaaa0003bfff, x30, x1, 448, x3)

inst_62:
// rs2_h0_val == -3, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef80000008fffb;  op2val:0xfffafffa5555fffd
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xffef80000008fffb, 0xfffafffa5555fffd, x30, x1, 464, x3)

inst_63:
// rs2_h0_val == 2048, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfff600200000;  op2val:0xdfffff7ffff60800
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xfffbfff600200000, 0xdfffff7ffff60800, x30, x1, 480, x3)

inst_64:
// rs2_h0_val == 1024, rs2_h1_val == -129, rs1_h0_val == 1
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000400000070001;  op2val:0x080009ff7f0400
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x1000400000070001, 0x080009ff7f0400, x30, x1, 496, x3)

inst_65:
// rs2_h0_val == 512, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x804000efffffdf;  op2val:0x7ffffffb00020200
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x804000efffffdf, 0x7ffffffb00020200, x30, x1, 512, x3)

inst_66:
// rs2_h0_val == 32, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x100020004001000;  op2val:0x800c00000400020
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x100020004001000, 0x800c00000400020, x30, x1, 528, x3)

inst_67:
// rs2_h0_val == 4, rs1_h3_val == -65, rs1_h2_val == -129
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfff7f0040fffe;  op2val:0xfff8fbfffffc0004
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xffbfff7f0040fffe, 0xfff8fbfffffc0004, x30, x1, 544, x3)

inst_68:
// rs2_h0_val == 0, rs2_h2_val == -2
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff6ff7f8000;  op2val:0x03fffeffdf0000
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x4000fff6ff7f8000, 0x03fffeffdf0000, x30, x1, 560, x3)

inst_69:
// rs2_h0_val == -1, rs1_h3_val == -33
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf2000fdffaaaa;  op2val:0x09ffbffffcffff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xffdf2000fdffaaaa, 0x09ffbffffcffff, x30, x1, 576, x3)

inst_70:
// rs1_h3_val == 21845, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555feffff7f1000;  op2val:0xaaaa0004fff60009
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x5555feffff7f1000, 0xaaaa0004fff60009, x30, x1, 592, x3)

inst_71:
// rs1_h3_val == -16385, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffbffffff0005;  op2val:0xaaaa7fffff7f0002
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xbffffbffffff0005, 0xaaaa7fffff7f0002, x30, x1, 608, x3)

inst_72:
// rs1_h0_val == 32, rs1_h2_val == 8
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0008f7ff0020;  op2val:0x40fff73fff0001
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xfbff0008f7ff0020, 0x40fff73fff0001, x30, x1, 624, x3)

inst_73:
// rs1_h0_val == 16, rs2_h3_val == 4, rs2_h2_val == 16
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf1000ffff0010;  op2val:0x0400100020bfff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xffdf1000ffff0010, 0x0400100020bfff, x30, x1, 640, x3)

inst_74:
// rs2_h2_val == -16385, rs2_h3_val == 0
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffd0002fdff;  op2val:0x00bffffff9ff7f
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x3ffffffd0002fdff, 0x00bffffff9ff7f, x30, x1, 656, x3)

inst_75:
// rs2_h2_val == -2049, rs1_h0_val == 4
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fff608000004;  op2val:0xfff7f7ff55550040
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x2000fff608000004, 0xfff7f7ff55550040, x30, x1, 672, x3)

inst_76:
// rs1_h3_val == 32, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000400020800;  op2val:0x3fff080000090005
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x20000400020800, 0x3fff080000090005, x30, x1, 688, x3)

inst_77:
// rs1_h3_val == 4, rs1_h2_val == -5
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fffb00800010;  op2val:0x200ffdf7ffffeff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x04fffb00800010, 0x200ffdf7ffffeff, x30, x1, 704, x3)

inst_78:
// rs2_h2_val == -17, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffd0003ffdf;  op2val:0x03ffeffbfffffa
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x4000fffd0003ffdf, 0x03ffeffbfffffa, x30, x1, 720, x3)

inst_79:
// rs1_h2_val == 32767, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff97fffefff0010;  op2val:0x2080000006fbff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xfff97fffefff0010, 0x2080000006fbff, x30, x1, 736, x3)

inst_80:
// rs2_h2_val == 16384, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffff7fffdf0006;  op2val:0x3fff4000bffffffb
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xf7ffff7fffdf0006, 0x3fff4000bffffffb, x30, x1, 752, x3)

inst_81:
// rs2_h2_val == 8192, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x555500073ffffff6;  op2val:0x042000fffefff6
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x555500073ffffff6, 0x042000fffefff6, x30, x1, 768, x3)

inst_82:
// rs1_h2_val == -8193, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x20dfff00070400;  op2val:0x80000004fffeffdf
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x20dfff00070400, 0x80000004fffeffdf, x30, x1, 784, x3)

inst_83:
// rs2_h2_val == 256, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fff84000ffef;  op2val:0xff7f0100fff70010
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x03fff84000ffef, 0xff7f0100fff70010, x30, x1, 800, x3)

inst_84:
// rs2_h1_val == 512, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x04000401000080;  op2val:0xfffe000902000400
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x04000401000080, 0xfffe000902000400, x30, x1, 816, x3)

inst_85:
// rs1_h2_val == 256, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x200100fffc0003;  op2val:0x03000955550001
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x200100fffc0003, 0x03000955550001, x30, x1, 832, x3)

inst_86:
// rs2_h1_val == 128, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x06fffd00090009;  op2val:0x400080000080fff9
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x06fffd00090009, 0x400080000080fff9, x30, x1, 848, x3)

inst_87:
// rs2_h1_val == -5, rs1_h1_val == -65
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x05f7ffffbffff6;  op2val:0x200200fffbffbf
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x05f7ffffbffff6, 0x200200fffbffbf, x30, x1, 864, x3)

inst_88:
// rs1_h1_val == -21846, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x051000aaaafbff;  op2val:0xfff6fffa0400fdff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x051000aaaafbff, 0xfff6fffa0400fdff, x30, x1, 880, x3)

inst_89:
// rs1_h3_val == -129, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0003bfff0008;  op2val:0xaaaa00090003fffe
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xff7f0003bfff0008, 0xaaaa00090003fffe, x30, x1, 896, x3)

inst_90:
// rs1_h1_val == 32767, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff00007ffffff7;  op2val:0x03c000fbff0400
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xffff00007ffffff7, 0x03c000fbff0400, x30, x1, 912, x3)

inst_91:
// rs2_h2_val == 128, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000100008ffef;  op2val:0xfffa0080ff7f8000
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x20000100008ffef, 0xfffa0080ff7f8000, x30, x1, 928, x3)

inst_92:
// rs1_h2_val == -65, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffbf0010ffff;  op2val:0x107fff2000ff7f
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x7fffffbf0010ffff, 0x107fff2000ff7f, x30, x1, 944, x3)

inst_93:
// rs1_h2_val == -33, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x40ffdf0800fffd;  op2val:0xfbffffff0010fbff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x40ffdf0800fffd, 0xfbffffff0010fbff, x30, x1, 960, x3)

inst_94:
// rs1_h2_val == -17, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x80ffef5555fdff;  op2val:0xfffcfbffffef0008
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x80ffef5555fdff, 0xfffcfbffffef0008, x30, x1, 976, x3)

inst_95:
// rs1_h3_val == -32768, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x80002000ff7ffffe;  op2val:0x09fff60100fff6
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x80002000ff7ffffe, 0x09fff60100fff6, x30, x1, 992, x3)

inst_96:
// rs1_h1_val == -17, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0020ffef0040;  op2val:0xffeffffc0200fff9
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xaaaa0020ffef0040, 0xffeffffc0200fff9, x30, x1, 1008, x3)

inst_97:
// rs1_h1_val == -9, 
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000200fff7feff;  op2val:0xfffdfffa4000aaaa
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x8000200fff7feff, 0xfffdfffa4000aaaa, x30, x1, 1024, x3)

inst_98:
// rs1_h3_val == rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val == 1, rs1_h1_val == 16, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h3_val == 1, rs1_h2_val == -9, rs2_h2_val == 2
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fff70010fff6;  op2val:0x010002fff6fff8
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x01fff70010fff6, 0x010002fff6fff8, x30, x1, 1040, x3)

inst_99:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h1_val == -513, rs1_h0_val == -3, rs1_h3_val == -4097, rs2_h2_val == 4096, rs2_h0_val == -9, rs1_h2_val == -2049, rs2_h3_val == 2, rs2_h1_val == 32
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffff7fffdfffffd;  op2val:0x0210000020fff7
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0xeffff7fffdfffffd, 0x0210000020fff7, x30, x1, 1056, x3)

inst_100:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h1_val == -3, rs1_h3_val == 256, rs2_h1_val == -16385, rs2_h3_val == -65, rs2_h0_val == -8193, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == 1024, rs1_h2_val == -2
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fffefffdfffc;  op2val:0xffbf0400bfffdfff
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x100fffefffdfffc, 0xffbf0400bfffdfff, x30, x1, 1072, x3)

inst_101:
// rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h2_val == -4097, rs1_h0_val == -5, rs1_h3_val == 16, rs2_h1_val == -3, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -1025
// opcode: khm16 ; op1:x30; op2:x29; dest:x31; op1val:0x100007fbfffffb;  op2val:0x80effffffd0005
TEST_PKRR_OP(khm16, x31, x30, x29, 0x0000000000000000, 0x100007fbfffffb, 0x80effffffd0005, x30, x1, 1088, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 138*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
