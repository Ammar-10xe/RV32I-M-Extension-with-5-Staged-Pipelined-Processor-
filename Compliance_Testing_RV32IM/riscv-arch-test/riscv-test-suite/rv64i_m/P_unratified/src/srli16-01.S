
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srli16 instruction of the RISC-V RV64PZicsr extension for the srli16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srli16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rd, rs1==x20, rd==x20, rs1_h0_val == 0, imm_val == 0, rs1_h3_val == 8192, rs1_h2_val == 128
// opcode: srli16 ; op1:x20; dest:x20; op1val:0x2000008000110000;  immval:0x0
TEST_IMM_OP( srli16, x20, x20, 0x0000000000000000, 0x2000008000110000, 0x0, x8, 0, x9)

inst_1:
// rs1 != rd, rs1==x0, rd==x21, imm_val == 15, rs1_h1_val == 65407, rs1_h0_val == 1024, rs1_h2_val == 21845
// opcode: srli16 ; op1:x0; dest:x21; op1val:0x055555ff7f0400;  immval:0xf
TEST_IMM_OP( srli16, x21, x0, 0x0000000000000000, 0x055555ff7f0400, 0xf, x8, 8, x9)

inst_2:
// rs1==x13, rd==x11, imm_val == 14, rs1_h3_val == 65023, rs1_h1_val == 16384
// opcode: srli16 ; op1:x13; dest:x11; op1val:0xfdff00124000000f;  immval:0xe
TEST_IMM_OP( srli16, x11, x13, 0x0000000000000000, 0xfdff00124000000f, 0xe, x8, 16, x9)

inst_3:
// rs1==x1, rd==x30, imm_val == 13, rs1_h3_val == 65534, rs1_h0_val == 65407
// opcode: srli16 ; op1:x1; dest:x30; op1val:0xfffe00030012ff7f;  immval:0xd
TEST_IMM_OP( srli16, x30, x1, 0x0000000000000000, 0xfffe00030012ff7f, 0xd, x8, 24, x9)

inst_4:
// rs1==x29, rd==x18, imm_val == 12, rs1_h1_val == 0, rs1_h2_val == 256, rs1_h3_val == 2048
// opcode: srli16 ; op1:x29; dest:x18; op1val:0x80001000000000e;  immval:0xc
TEST_IMM_OP( srli16, x18, x29, 0x0000000000000000, 0x80001000000000e, 0xc, x8, 32, x9)

inst_5:
// rs1==x31, rd==x4, imm_val == 11, rs1_h3_val == 32767, rs1_h2_val == 43690, rs1_h1_val == 61439
// opcode: srli16 ; op1:x31; dest:x4; op1val:0x7fffaaaaefff0003;  immval:0xb
TEST_IMM_OP( srli16, x4, x31, 0x0000000000000000, 0x7fffaaaaefff0003, 0xb, x8, 40, x9)

inst_6:
// rs1==x6, rd==x16, imm_val == 10, rs1_h2_val == 16, rs1_h1_val == 21845
// opcode: srli16 ; op1:x6; dest:x16; op1val:0x03001055550400;  immval:0xa
TEST_IMM_OP( srli16, x16, x6, 0x0000000000000000, 0x03001055550400, 0xa, x8, 48, x9)

inst_7:
// rs1==x5, rd==x23, imm_val == 9, rs1_h2_val == 1024, rs1_h0_val == 2, rs1_h1_val == 16
// opcode: srli16 ; op1:x5; dest:x23; op1val:0x7fff040000100002;  immval:0x9
TEST_IMM_OP( srli16, x23, x5, 0x0000000000000000, 0x7fff040000100002, 0x9, x8, 56, x9)

inst_8:
// rs1==x27, rd==x15, imm_val == 8, rs1_h3_val == 128, rs1_h0_val == 65279, rs1_h2_val == 32768
// opcode: srli16 ; op1:x27; dest:x15; op1val:0x8080000003feff;  immval:0x8
TEST_IMM_OP( srli16, x15, x27, 0x0000000000000000, 0x8080000003feff, 0x8, x8, 64, x9)

inst_9:
// rs1==x22, rd==x25, imm_val == 7, rs1_h3_val == 64511, rs1_h0_val == 65023, rs1_h2_val == 65407
// opcode: srli16 ; op1:x22; dest:x25; op1val:0xfbffff7feffffdff;  immval:0x7
TEST_IMM_OP( srli16, x25, x22, 0x0000000000000000, 0xfbffff7feffffdff, 0x7, x8, 72, x9)

inst_10:
// rs1==x16, rd==x12, imm_val == 6, rs1_h2_val == 57343, rs1_h0_val == 65519
// opcode: srli16 ; op1:x16; dest:x12; op1val:0x03dfff0007ffef;  immval:0x6
TEST_IMM_OP( srli16, x12, x16, 0x0000000000000000, 0x03dfff0007ffef, 0x6, x8, 80, x9)

inst_11:
// rs1==x17, rd==x3, imm_val == 5, rs1_h1_val == 1, rs1_h0_val == 16
// opcode: srli16 ; op1:x17; dest:x3; op1val:0x06555500010010;  immval:0x5
TEST_IMM_OP( srli16, x3, x17, 0x0000000000000000, 0x06555500010010, 0x5, x8, 88, x9)

inst_12:
// rs1==x28, rd==x29, imm_val == 4, rs1_h2_val == 61439, rs1_h0_val == 43690, rs1_h1_val == 65503
// opcode: srli16 ; op1:x28; dest:x29; op1val:0x07efffffdfaaaa;  immval:0x4
TEST_IMM_OP( srli16, x29, x28, 0x0000000000000000, 0x07efffffdfaaaa, 0x4, x8, 96, x9)

inst_13:
// rs1==x21, rd==x2, imm_val == 3, rs1_h1_val == 512, rs1_h2_val == 63487
// opcode: srli16 ; op1:x21; dest:x2; op1val:0x12f7ff0200000c;  immval:0x3
TEST_IMM_OP( srli16, x2, x21, 0x0000000000000000, 0x12f7ff0200000c, 0x3, x8, 104, x9)

inst_14:
// rs1==x2, rd==x27, imm_val == 2, rs1_h1_val == 1024, rs1_h2_val == 65534, rs1_h0_val == 65533, rs1_h3_val == 4096
// opcode: srli16 ; op1:x2; dest:x27; op1val:0x1000fffe0400fffd;  immval:0x2
TEST_IMM_OP( srli16, x27, x2, 0x0000000000000000, 0x1000fffe0400fffd, 0x2, x8, 112, x9)

inst_15:
// rs1==x30, rd==x7, imm_val == 1, rs1_h3_val == 65471, rs1_h0_val == 512
// opcode: srli16 ; op1:x30; dest:x7; op1val:0xffbf010000110200;  immval:0x1
TEST_IMM_OP( srli16, x7, x30, 0x0000000000000000, 0xffbf010000110200, 0x1, x8, 120, x9)

inst_16:
// rs1==x18, rd==x31, rs1_h3_val == 43690, rs1_h2_val == 64
// opcode: srli16 ; op1:x18; dest:x31; op1val:0xaaaa0040ffdf0200;  immval:0x6
TEST_IMM_OP( srli16, x31, x18, 0x0000000000000000, 0xaaaa0040ffdf0200, 0x6, x8, 128, x9)

inst_17:
// rs1==x11, rd==x26, rs1_h3_val == 21845, 
// opcode: srli16 ; op1:x11; dest:x26; op1val:0x5555000c00030006;  immval:0x4
TEST_IMM_OP( srli16, x26, x11, 0x0000000000000000, 0x5555000c00030006, 0x4, x8, 136, x9)

inst_18:
// rs1==x23, rd==x14, rs1_h3_val == 49151, rs1_h0_val == 65527, rs1_h2_val == 65531
// opcode: srli16 ; op1:x23; dest:x14; op1val:0xbffffffb0200fff7;  immval:0x9
TEST_IMM_OP( srli16, x14, x23, 0x0000000000000000, 0xbffffffb0200fff7, 0x9, x8, 144, x9)

inst_19:
// rs1==x25, rd==x24, rs1_h3_val == 57343, rs1_h2_val == 4096
// opcode: srli16 ; op1:x25; dest:x24; op1val:0xdfff10000010fdff;  immval:0xb
TEST_IMM_OP( srli16, x24, x25, 0x0000000000000000, 0xdfff10000010fdff, 0xb, x8, 152, x9)

inst_20:
// rs1==x24, rd==x22, rs1_h3_val == 61439, rs1_h0_val == 21845
// opcode: srli16 ; op1:x24; dest:x22; op1val:0xefff000700135555;  immval:0x0
TEST_IMM_OP( srli16, x22, x24, 0x0000000000000000, 0xefff000700135555, 0x0, x8, 160, x11)

inst_21:
// rs1==x26, rd==x0, rs1_h3_val == 63487, rs1_h1_val == 64511, rs1_h0_val == 65471, rs1_h2_val == 32767
// opcode: srli16 ; op1:x26; dest:x0; op1val:0xf7ff7ffffbffffbf;  immval:0x2
TEST_IMM_OP( srli16, x0, x26, 0x0000000000000000, 0xf7ff7ffffbffffbf, 0x2, x8, 168, x11)

inst_22:
// rs1==x15, rd==x10, rs1_h3_val == 65279, rs1_h0_val == 2048, rs1_h2_val == 512
// opcode: srli16 ; op1:x15; dest:x10; op1val:0xfeff020040000800;  immval:0xc
TEST_IMM_OP( srli16, x10, x15, 0x0000000000000000, 0xfeff020040000800, 0xc, x8, 176, x11)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_23:
// rs1==x3, rd==x8, rs1_h3_val == 65407, rs1_h2_val == 65503, rs1_h1_val == 32767
// opcode: srli16 ; op1:x3; dest:x8; op1val:0xff7fffdf7ffffff7;  immval:0xb
TEST_IMM_OP( srli16, x8, x3, 0x0000000000000000, 0xff7fffdf7ffffff7, 0xb, x2, 0, x11)

inst_24:
// rs1==x4, rd==x28, rs1_h3_val == 65503, rs1_h0_val == 1
// opcode: srli16 ; op1:x4; dest:x28; op1val:0xffdf001000100001;  immval:0x3
TEST_IMM_OP( srli16, x28, x4, 0x0000000000000000, 0xffdf001000100001, 0x3, x2, 8, x11)

inst_25:
// rs1==x10, rd==x19, rs1_h3_val == 65519, rs1_h0_val == 65503, rs1_h2_val == 4
// opcode: srli16 ; op1:x10; dest:x19; op1val:0xffef00040011ffdf;  immval:0x1
TEST_IMM_OP( srli16, x19, x10, 0x0000000000000000, 0xffef00040011ffdf, 0x1, x2, 16, x11)

inst_26:
// rs1==x8, rd==x1, rs1_h3_val == 65527, 
// opcode: srli16 ; op1:x8; dest:x1; op1val:0xfff70006fbff0013;  immval:0x2
TEST_IMM_OP( srli16, x1, x8, 0x0000000000000000, 0xfff70006fbff0013, 0x2, x2, 24, x11)

inst_27:
// rs1==x19, rd==x17, rs1_h3_val == 65531, rs1_h2_val == 2048, rs1_h0_val == 63487, rs1_h1_val == 8192
// opcode: srli16 ; op1:x19; dest:x17; op1val:0xfffb08002000f7ff;  immval:0xe
TEST_IMM_OP( srli16, x17, x19, 0x0000000000000000, 0xfffb08002000f7ff, 0xe, x2, 32, x11)

inst_28:
// rs1==x12, rd==x6, rs1_h3_val == 65533, rs1_h1_val == 65534
// opcode: srli16 ; op1:x12; dest:x6; op1val:0xfffd0200fffeff7f;  immval:0x0
TEST_IMM_OP( srli16, x6, x12, 0x0000000000000000, 0xfffd0200fffeff7f, 0x0, x2, 40, x11)

inst_29:
// rs1==x7, rd==x13, rs1_h3_val == 32768, rs1_h1_val == 57343
// opcode: srli16 ; op1:x7; dest:x13; op1val:0x8000aaaadfff0010;  immval:0x5
TEST_IMM_OP( srli16, x13, x7, 0x0000000000000000, 0x8000aaaadfff0010, 0x5, x2, 48, x11)

inst_30:
// rs1==x9, rd==x5, rs1_h3_val == 16384, 
// opcode: srli16 ; op1:x9; dest:x5; op1val:0x4000ffdfdfff0011;  immval:0xf
TEST_IMM_OP( srli16, x5, x9, 0x0000000000000000, 0x4000ffdfdfff0011, 0xf, x2, 56, x11)

inst_31:
// rs1==x14, rd==x9, rs1_h3_val == 1024, rs1_h2_val == 16384, rs1_h1_val == 2048
// opcode: srli16 ; op1:x14; dest:x9; op1val:0x40040000800000f;  immval:0x9
TEST_IMM_OP( srli16, x9, x14, 0x0000000000000000, 0x40040000800000f, 0x9, x2, 64, x11)

inst_32:
// rs1_h3_val == 512, rs1_h1_val == 256, rs1_h0_val == 65535
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x200aaaa0100ffff;  immval:0x8
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x200aaaa0100ffff, 0x8, x2, 72, x11)

inst_33:
// rs1_h0_val == 49151, rs1_h3_val == 256
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x10000130800bfff;  immval:0xa
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x10000130800bfff, 0xa, x2, 80, x11)

inst_34:
// rs1_h0_val == 57343, rs1_h3_val == 4, rs1_h2_val == 65471
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x04ffbf0007dfff;  immval:0xb
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x04ffbf0007dfff, 0xb, x2, 88, x11)

inst_35:
// rs1_h0_val == 61439, rs1_h2_val == 65533
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x1000fffd0010efff;  immval:0x9
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x1000fffd0010efff, 0x9, x2, 96, x11)

inst_36:
// rs1_h0_val == 64511, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xdfff80000100fbff;  immval:0x1
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0xdfff80000100fbff, 0x1, x2, 104, x11)

inst_37:
// rs1_h0_val == 65531, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xdfffffbf0013fffb;  immval:0xe
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0xdfffffbf0013fffb, 0xe, x2, 112, x11)

inst_38:
// rs1_h0_val == 65534, rs1_h3_val == 32
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x200010fffefffe;  immval:0xc
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x200010fffefffe, 0xc, x2, 120, x11)

inst_39:
// rs1_h0_val == 32768, rs1_h2_val == 8192
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x20200040008000;  immval:0x6
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x20200040008000, 0x6, x2, 128, x11)

inst_40:
// rs1_h0_val == 16384, rs1_h1_val == 64, rs1_h2_val == 1
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x800000100404000;  immval:0x7
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x800000100404000, 0x7, x2, 136, x11)

inst_41:
// rs1_h0_val == 8192, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xff7ffffd00102000;  immval:0xc
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0xff7ffffd00102000, 0xc, x2, 144, x11)

inst_42:
// rs1_h0_val == 4096, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x07555500121000;  immval:0xc
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x07555500121000, 0xc, x2, 152, x11)

inst_43:
// rs1_h0_val == 256, rs1_h1_val == 65535
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x0c0012ffff0100;  immval:0xd
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x0c0012ffff0100, 0xd, x2, 160, x11)

inst_44:
// rs1_h0_val == 128, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x200000b08000080;  immval:0xa
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x200000b08000080, 0xa, x2, 168, x11)

inst_45:
// rs1_h0_val == 64, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xbfff000c00050040;  immval:0x7
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0xbfff000c00050040, 0x7, x2, 176, x11)

inst_46:
// rs1_h0_val == 32, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xfdff001100100020;  immval:0x6
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0xfdff001100100020, 0x6, x2, 184, x11)

inst_47:
// rs1_h0_val == 8, rs1_h1_val == 63487
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x7fff0011f7ff0008;  immval:0x2
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x7fff0011f7ff0008, 0x2, x2, 192, x11)

inst_48:
// rs1_h0_val == 4, rs1_h3_val == 16
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x10000c00130004;  immval:0xe
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x10000c00130004, 0xe, x2, 200, x11)

inst_49:
// rs1_h3_val == 64, rs1_h1_val == 43690
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x40fffbaaaa0004;  immval:0x7
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x40fffbaaaa0004, 0x7, x2, 208, x11)

inst_50:
// rs1_h3_val == 8, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x080011dffffffe;  immval:0x9
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x080011dffffffe, 0x9, x2, 216, x11)

inst_51:
// rs1_h2_val == 65519, rs1_h3_val == 1
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x01ffef00050000;  immval:0x9
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x01ffef00050000, 0x9, x2, 224, x11)

inst_52:
// rs1_h2_val == 65527, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x12fff7000d000c;  immval:0x9
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x12fff7000d000c, 0x9, x2, 232, x11)

inst_53:
// rs1_h2_val == 32, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x80000200012000b;  immval:0x3
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x80000200012000b, 0x3, x2, 240, x11)

inst_54:
// rs1_h2_val == 8, rs1_h1_val == 8
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x0d00080008fbff;  immval:0xf
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x0d00080008fbff, 0xf, x2, 248, x11)

inst_55:
// rs1_h2_val == 2, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xfffb0002efff000d;  immval:0x8
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0xfffb0002efff000d, 0x8, x2, 256, x11)

inst_56:
// rs1_h2_val == 65535, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xfdffffff00018000;  immval:0x5
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0xfdffffff00018000, 0x5, x2, 264, x11)

inst_57:
// rs1_h2_val == 0, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xffbf00000200feff;  immval:0x7
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0xffbf00000200feff, 0x7, x2, 272, x11)

inst_58:
// rs1_h2_val == 49151, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x400bfff000efff7;  immval:0x7
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x400bfff000efff7, 0x7, x2, 280, x11)

inst_59:
// rs1_h1_val == 49151, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xdffffffbbfff0009;  immval:0xe
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0xdffffffbbfff0009, 0xe, x2, 288, x11)

inst_60:
// rs1_h1_val == 65023, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x2000000bfdff0400;  immval:0xf
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x2000000bfdff0400, 0xf, x2, 296, x11)

inst_61:
// rs1_h1_val == 65279, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x55550008feff000c;  immval:0xf
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x55550008feff000c, 0xf, x2, 304, x11)

inst_62:
// rs1_h1_val == 65471, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x08ffefffbf0006;  immval:0xd
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x08ffefffbf0006, 0xd, x2, 312, x11)

inst_63:
// rs1_h1_val == 65519, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xffef000effeffff7;  immval:0x3
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0xffef000effeffff7, 0x3, x2, 320, x11)

inst_64:
// rs1_h1_val == 65527, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x0b0000fff70004;  immval:0x8
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x0b0000fff70004, 0x8, x2, 328, x11)

inst_65:
// rs1_h1_val == 65531, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x070100fffb0011;  immval:0x1
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x070100fffb0011, 0x1, x2, 336, x11)

inst_66:
// rs1_h1_val == 65533, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x5555ffdffffd0001;  immval:0x7
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x5555ffdffffd0001, 0x7, x2, 344, x11)

inst_67:
// rs1_h1_val == 32768, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x4000dfff80001000;  immval:0xa
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x4000dfff80001000, 0xa, x2, 352, x11)

inst_68:
// rs1_h1_val == 4096, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x20000c1000efff;  immval:0x9
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x20000c1000efff, 0x9, x2, 360, x11)

inst_69:
// rs1_h3_val == 2, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x02000880000400;  immval:0x2
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x02000880000400, 0x2, x2, 368, x11)

inst_70:
// rs1_h3_val == 65535, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xffff000a5555000b;  immval:0x8
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0xffff000a5555000b, 0x8, x2, 376, x11)

inst_71:
// rs1_h1_val == 128, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x200ffbf00805555;  immval:0x0
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x200ffbf00805555, 0x0, x2, 384, x11)

inst_72:
// rs1_h3_val == 0, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x00ffbf00000011;  immval:0x2
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x00ffbf00000011, 0x2, x2, 392, x11)

inst_73:
// rs1_h1_val == 32, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x2000200000200012;  immval:0xc
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x2000200000200012, 0xc, x2, 400, x11)

inst_74:
// rs1_h1_val == 4, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xefffffef0004fffd;  immval:0x1
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0xefffffef0004fffd, 0x1, x2, 408, x11)

inst_75:
// rs1_h1_val == 2, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x40000800002000a;  immval:0x9
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x40000800002000a, 0x9, x2, 416, x11)

inst_76:
// rs1_h2_val == 64511, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xdffffbff000d0011;  immval:0xe
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0xdffffbff000d0011, 0xe, x2, 424, x11)

inst_77:
// rs1_h2_val == 65023, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x7ffffdff0004fffe;  immval:0x8
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x7ffffdff0004fffe, 0x8, x2, 432, x11)

inst_78:
// rs1_h2_val == 65279, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0x80feffff7f0040;  immval:0x2
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0x80feffff7f0040, 0x2, x2, 440, x11)

inst_79:
// rs1_h0_val == 32767, 
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xfeff7fff00097fff;  immval:0xb
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0xfeff7fff00097fff, 0xb, x2, 448, x11)

inst_80:
// rs1_h3_val == 63487, rs1_h1_val == 64511, rs1_h0_val == 65471, rs1_h2_val == 32767
// opcode: srli16 ; op1:x30; dest:x31; op1val:0xf7ff7ffffbffffbf;  immval:0x2
TEST_IMM_OP( srli16, x31, x30, 0x0000000000000000, 0xf7ff7ffffbffffbf, 0x2, x2, 456, x11)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 58*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
