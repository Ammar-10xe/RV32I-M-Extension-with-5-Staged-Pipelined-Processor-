
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smxds instruction of the RISC-V RV64PZicsr extension for the smxds covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smxds)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 == rd != rs2, rs1==x6, rs2==x0, rd==x6, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h1_val == -21846, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h1_val == 4096, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs2_h3_val == 2048, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h3_val == -513, rs1_h0_val != rs2_h0_val, rs1_h2_val == -4097, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h2_val == 64, rs2_h0_val == 16384
// opcode: smxds ; op1:x6; op2:x0; dest:x6; op1val:0xfdffefff10008000;  op2val:0x8000040aaaa4000
TEST_RR_OP(smxds, x6, x6, x0, 0x0000000000000000, 0xfdffefff10008000, 0x8000040aaaa4000, x5, 0, x9)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x12, rd==x16, rs1_h3_val == rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 16, rs1_h2_val == 128, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val == 4, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 1, rs2_h3_val == 16, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 128
// opcode: smxds ; op1:x23; op2:x12; dest:x16; op1val:0x10008000040001;  op2val:0x103fff0080fffc
TEST_RR_OP(smxds, x16, x23, x12, 0x0000000000000000, 0x10008000040001, 0x103fff0080fffc, x5, 8, x9)

inst_2:
// rs1 == rs2 != rd, rs1==x2, rs2==x2, rd==x15, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h2_val == -8193, rs1_h2_val == 8192, rs2_h0_val == 1, rs1_h3_val == -21846, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h0_val == 1024, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h1_val == -5, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: smxds ; op1:x2; op2:x2; dest:x15; op1val:0xaaaa2000fff90400;  op2val:0xfff6dffffffb0001
TEST_RR_OP(smxds, x15, x2, x2, 0x0000000000000000, 0xaaaa2000fff90400, 0xfff6dffffffb0001, x5, 16, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 4, rs2_h3_val == -32768, rs2_h1_val == -2, rs1_h1_val == -1, rs2_h0_val == -2
// opcode: smxds ; op1:x1; op2:x1; dest:x1; op1val:0x040005ffff0003;  op2val:0x80000006fffefffe
TEST_RR_OP(smxds, x1, x1, x1, 0x0000000000000000, 0x040005ffff0003, 0x80000006fffefffe, x5, 24, x9)

inst_4:
// rs2 == rd != rs1, rs1==x28, rs2==x3, rd==x3, rs1_h2_val == rs2_h2_val, rs2_h3_val == -513, rs1_h1_val == -2, rs2_h1_val == 0, rs2_h2_val == -33, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == -513, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h2_val == -33
// opcode: smxds ; op1:x28; op2:x3; dest:x3; op1val:0x10ffdffffefffa;  op2val:0xfdffffdf0000fdff
TEST_RR_OP(smxds, x3, x28, x3, 0x0000000000000000, 0x10ffdffffefffa, 0xfdffffdf0000fdff, x5, 32, x9)

inst_5:
// rs1==x26, rs2==x23, rd==x25, rs1_h1_val == rs2_h1_val, rs1_h0_val == -129, rs1_h3_val == -4097, rs1_h2_val == -129
// opcode: smxds ; op1:x26; op2:x23; dest:x25; op1val:0xefffff7ffff8ff7f;  op2val:0xfdfffffafff8fffa
TEST_RR_OP(smxds, x25, x26, x23, 0x0000000000000000, 0xefffff7ffff8ff7f, 0xfdfffffafff8fffa, x5, 40, x9)

inst_6:
// rs1==x13, rs2==x21, rd==x24, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h3_val == 4, rs2_h1_val == 1024, rs1_h2_val == -21846, rs2_h2_val == 32767
// opcode: smxds ; op1:x13; op2:x21; dest:x24; op1val:0x10aaaafffe3fff;  op2val:0x047fff0400fff9
TEST_RR_OP(smxds, x24, x13, x21, 0x0000000000000000, 0x10aaaafffe3fff, 0x047fff0400fff9, x5, 48, x9)

inst_7:
// rs1==x25, rs2==x20, rd==x11, rs1_h0_val == rs2_h0_val, rs2_h0_val == -8193, rs1_h3_val == -33, rs2_h2_val == -2, rs1_h0_val == -8193
// opcode: smxds ; op1:x25; op2:x20; dest:x11; op1val:0xffdffffc1000dfff;  op2val:0x04fffeaaaadfff
TEST_RR_OP(smxds, x11, x25, x20, 0x0000000000000000, 0xffdffffc1000dfff, 0x04fffeaaaadfff, x5, 56, x9)

inst_8:
// rs1==x27, rs2==x31, rd==x2, rs2_h3_val == -21846, rs2_h2_val == -2049, rs1_h2_val == 256, rs1_h3_val == 21845, rs1_h0_val == 0, rs2_h1_val == 32
// opcode: smxds ; op1:x27; op2:x31; dest:x2; op1val:0x5555010000040000;  op2val:0xaaaaf7ff0020fff9
TEST_RR_OP(smxds, x2, x27, x31, 0x0000000000000000, 0x5555010000040000, 0xaaaaf7ff0020fff9, x5, 64, x9)

inst_9:
// rs1==x21, rs2==x10, rd==x31, rs2_h3_val == 21845, rs1_h1_val == -513, rs2_h2_val == -21846, rs1_h2_val == -2
// opcode: smxds ; op1:x21; op2:x10; dest:x31; op1val:0xc000fffefdfffff8;  op2val:0x5555aaaa0080c000
TEST_RR_OP(smxds, x31, x21, x10, 0x0000000000000000, 0xc000fffefdfffff8, 0x5555aaaa0080c000, x5, 72, x9)

inst_10:
// rs1==x19, rs2==x17, rd==x26, rs2_h3_val == 32767, rs2_h0_val == 16, rs2_h1_val == 21845, rs1_h3_val == 64, rs2_h2_val == -1025, rs1_h2_val == -2049
// opcode: smxds ; op1:x19; op2:x17; dest:x26; op1val:0x40f7fffffa3fff;  op2val:0x7ffffbff55550010
TEST_RR_OP(smxds, x26, x19, x17, 0x0000000000000000, 0x40f7fffffa3fff, 0x7ffffbff55550010, x5, 80, x9)

inst_11:
// rs1==x7, rs2==x13, rd==x8, rs2_h3_val == -16385, rs1_h0_val == -65, rs2_h1_val == 2048
// opcode: smxds ; op1:x7; op2:x13; dest:x8; op1val:0xfffcf7ff0007ffbf;  op2val:0xbffffffa0800fffc
TEST_RR_OP(smxds, x8, x7, x13, 0x0000000000000000, 0xfffcf7ff0007ffbf, 0xbffffffa0800fffc, x5, 88, x9)

inst_12:
// rs1==x18, rs2==x29, rd==x0, rs2_h3_val == -8193, rs2_h2_val == -257, rs2_h0_val == 0, rs1_h0_val == 2048, rs1_h1_val == -8193, rs1_h2_val == -5
// opcode: smxds ; op1:x18; op2:x29; dest:x0; op1val:0xfffafffbdfff0800;  op2val:0xdffffeff00030000
TEST_RR_OP(smxds, x0, x18, x29, 0x0000000000000000, 0xfffafffbdfff0800, 0xdffffeff00030000, x5, 96, x9)

inst_13:
// rs1==x24, rs2==x4, rd==x22, rs2_h3_val == -4097, rs1_h1_val == 64, rs1_h0_val == -3, rs1_h2_val == -32768
// opcode: smxds ; op1:x24; op2:x4; dest:x22; op1val:0xaaaa80000040fffd;  op2val:0xefff0040fffe3fff
TEST_RR_OP(smxds, x22, x24, x4, 0x0000000000000000, 0xaaaa80000040fffd, 0xefff0040fffe3fff, x5, 104, x9)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_14:
// rs1==x31, rs2==x27, rd==x28, rs2_h3_val == -2049, rs1_h3_val == 1, rs1_h1_val == -21846, rs1_h2_val == -513, rs2_h0_val == 8192, rs2_h1_val == 64
// opcode: smxds ; op1:x31; op2:x27; dest:x28; op1val:0x01fdffaaaa0007;  op2val:0xf7fffeff00402000
TEST_RR_OP(smxds, x28, x31, x27, 0x0000000000000000, 0x01fdffaaaa0007, 0xf7fffeff00402000, x1, 0, x2)

inst_15:
// rs1==x3, rs2==x26, rd==x30, rs2_h3_val == -1025, rs2_h1_val == -1025, rs1_h3_val == 256, rs1_h0_val == 8, rs2_h2_val == 2
// opcode: smxds ; op1:x3; op2:x26; dest:x30; op1val:0x1000003fffa0008;  op2val:0xfbff0002fbff0001
TEST_RR_OP(smxds, x30, x3, x26, 0x0000000000000000, 0x1000003fffa0008, 0xfbff0002fbff0001, x1, 8, x2)

inst_16:
// rs1==x11, rs2==x16, rd==x19, rs2_h3_val == -257, rs1_h3_val == -1025, rs2_h2_val == 16, rs2_h0_val == -21846, rs1_h1_val == -17
// opcode: smxds ; op1:x11; op2:x16; dest:x19; op1val:0xfbfffffbffef0007;  op2val:0xfeff0010fff8aaaa
TEST_RR_OP(smxds, x19, x11, x16, 0x0000000000000000, 0xfbfffffbffef0007, 0xfeff0010fff8aaaa, x1, 16, x2)

inst_17:
// rs1==x20, rs2==x11, rd==x29, rs2_h3_val == -129, rs2_h2_val == -65, rs1_h2_val == -17, rs2_h0_val == -9, rs2_h1_val == 8192
// opcode: smxds ; op1:x20; op2:x11; dest:x29; op1val:0xfffcffef00070006;  op2val:0xff7fffbf2000fff7
TEST_RR_OP(smxds, x29, x20, x11, 0x0000000000000000, 0xfffcffef00070006, 0xff7fffbf2000fff7, x1, 24, x2)

inst_18:
// rs1==x8, rs2==x22, rd==x9, rs2_h3_val == -65, rs2_h0_val == 2, rs2_h2_val == 21845
// opcode: smxds ; op1:x8; op2:x22; dest:x9; op1val:0x07fff6fdfffff6;  op2val:0xffbf555500050002
TEST_RR_OP(smxds, x9, x8, x22, 0x0000000000000000, 0x07fff6fdfffff6, 0xffbf555500050002, x1, 32, x2)

inst_19:
// rs1==x0, rs2==x19, rd==x21, rs2_h3_val == -33, rs1_h2_val == -65
// opcode: smxds ; op1:x0; op2:x19; dest:x21; op1val:0x100ffbf0006fff9;  op2val:0xffdf7fff04000002
TEST_RR_OP(smxds, x21, x0, x19, 0x0000000000000000, 0x100ffbf0006fff9, 0xffdf7fff04000002, x1, 40, x2)

inst_20:
// rs1==x17, rs2==x18, rd==x14, rs2_h3_val == -17, rs2_h0_val == 8, rs1_h0_val == -21846, rs1_h2_val == 21845, rs2_h1_val == 8
// opcode: smxds ; op1:x17; op2:x18; dest:x14; op1val:0x0455550005aaaa;  op2val:0xffeffffe00080008
TEST_RR_OP(smxds, x14, x17, x18, 0x0000000000000000, 0x0455550005aaaa, 0xffeffffe00080008, x1, 48, x2)

inst_21:
// rs1==x29, rs2==x25, rd==x7, rs2_h3_val == -9, rs1_h0_val == -17, rs1_h1_val == -32768, rs2_h1_val == -129, rs2_h2_val == 2048, rs1_h2_val == -3
// opcode: smxds ; op1:x29; op2:x25; dest:x7; op1val:0x100fffd8000ffef;  op2val:0xfff70800ff7f0001
TEST_RR_OP(smxds, x7, x29, x25, 0x0000000000000000, 0x100fffd8000ffef, 0xfff70800ff7f0001, x1, 56, x2)

inst_22:
// rs1==x9, rs2==x30, rd==x17, rs2_h3_val == -5, rs2_h2_val == -513, rs1_h1_val == 2048, rs2_h1_val == -257, rs1_h0_val == -4097, rs2_h0_val == 2048
// opcode: smxds ; op1:x9; op2:x30; dest:x17; op1val:0xfffafffa0800efff;  op2val:0xfffbfdfffeff0800
TEST_RR_OP(smxds, x17, x9, x30, 0x0000000000000000, 0xfffafffa0800efff, 0xfffbfdfffeff0800, x1, 64, x2)

inst_23:
// rs1==x12, rs2==x15, rd==x27, rs2_h3_val == -3, rs1_h0_val == 8192, rs1_h3_val == 32767, rs1_h2_val == -16385, rs2_h2_val == 8192, rs2_h0_val == 4096
// opcode: smxds ; op1:x12; op2:x15; dest:x27; op1val:0x7fffbfffaaaa2000;  op2val:0xfffd200000081000
TEST_RR_OP(smxds, x27, x12, x15, 0x0000000000000000, 0x7fffbfffaaaa2000, 0xfffd200000081000, x1, 72, x2)

inst_24:
// rs1==x4, rs2==x28, rd==x5, rs2_h3_val == -2, rs2_h2_val == 4096, rs2_h1_val == -2049
// opcode: smxds ; op1:x4; op2:x28; dest:x5; op1val:0x4000091000dfff;  op2val:0xfffe1000f7ff0003
TEST_RR_OP(smxds, x5, x4, x28, 0x0000000000000000, 0x4000091000dfff, 0xfffe1000f7ff0003, x1, 80, x2)

inst_25:
// rs1==x16, rs2==x7, rd==x12, rs2_h3_val == 16384, rs2_h2_val == -9, rs1_h3_val == 32, rs1_h2_val == 32767
// opcode: smxds ; op1:x16; op2:x7; dest:x12; op1val:0x207fff0009fffa;  op2val:0x4000fff7fbfffffc
TEST_RR_OP(smxds, x12, x16, x7, 0x0000000000000000, 0x207fff0009fffa, 0x4000fff7fbfffffc, x1, 88, x2)

inst_26:
// rs1==x14, rs2==x24, rd==x20, rs2_h3_val == 8192, rs1_h2_val == -1, rs1_h1_val == 256, rs2_h0_val == 512
// opcode: smxds ; op1:x14; op2:x24; dest:x20; op1val:0x5555ffff01000005;  op2val:0x2000200020000200
TEST_RR_OP(smxds, x20, x14, x24, 0x0000000000000000, 0x5555ffff01000005, 0x2000200020000200, x1, 96, x2)

inst_27:
// rs1==x15, rs2==x8, rd==x18, rs2_h3_val == 4096, rs2_h1_val == -16385, rs1_h1_val == 16
// opcode: smxds ; op1:x15; op2:x8; dest:x18; op1val:0xeffffdff00100006;  op2val:0x1000fffebfff4000
TEST_RR_OP(smxds, x18, x15, x8, 0x0000000000000000, 0xeffffdff00100006, 0x1000fffebfff4000, x1, 104, x2)

inst_28:
// rs1==x30, rs2==x5, rd==x10, rs2_h3_val == 1024, rs1_h1_val == -1025, rs2_h1_val == 256, rs1_h0_val == -2049, rs2_h0_val == -257
// opcode: smxds ; op1:x30; op2:x5; dest:x10; op1val:0xfffafff9fbfff7ff;  op2val:0x40020000100feff
TEST_RR_OP(smxds, x10, x30, x5, 0x0000000000000000, 0xfffafff9fbfff7ff, 0x40020000100feff, x1, 112, x2)

inst_29:
// rs1==x10, rs2==x6, rd==x23, rs2_h3_val == 512, rs2_h0_val == 4, rs1_h3_val == 128, rs2_h2_val == 1024, rs1_h0_val == -5
// opcode: smxds ; op1:x10; op2:x6; dest:x23; op1val:0x800007dffffffb;  op2val:0x2000400aaaa0004
TEST_RR_OP(smxds, x23, x10, x6, 0x0000000000000000, 0x800007dffffffb, 0x2000400aaaa0004, x1, 120, x2)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_30:
// rs1==x22, rs2==x9, rd==x13, rs2_h3_val == 256, rs1_h0_val == -513, rs1_h1_val == 8, rs1_h2_val == 2, rs2_h2_val == -32768
// opcode: smxds ; op1:x22; op2:x9; dest:x13; op1val:0xfffa00020008fdff;  op2val:0x100800055551000
TEST_RR_OP(smxds, x13, x22, x9, 0x0000000000000000, 0xfffa00020008fdff, 0x100800055551000, x1, 0, x2)

inst_31:
// rs1==x5, rs2==x14, rd==x4, rs2_h3_val == 128, rs2_h2_val == -16385, rs1_h0_val == 4096
// opcode: smxds ; op1:x5; op2:x14; dest:x4; op1val:0x402000c0001000;  op2val:0x80bfff55551000
TEST_RR_OP(smxds, x4, x5, x14, 0x0000000000000000, 0x402000c0001000, 0x80bfff55551000, x1, 8, x2)

inst_32:
// rs2_h3_val == 64, rs1_h1_val == -33
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfbff7fffffdf0000;  op2val:0x40fff8fff9dfff
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xfbff7fffffdf0000, 0x40fff8fff9dfff, x1, 16, x2)

inst_33:
// rs2_h3_val == 32, rs1_h3_val == -16385, rs1_h0_val == -1025
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xbfff3fff3ffffbff;  op2val:0x20bfff00801000
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xbfff3fff3ffffbff, 0x20bfff00801000, x1, 24, x2)

inst_34:
// rs2_h3_val == 8, rs1_h0_val == 32, rs1_h1_val == 2
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000300020020;  op2val:0x08200055550000
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x7fff000300020020, 0x08200055550000, x1, 32, x2)

inst_35:
// rs2_h3_val == 2, rs1_h3_val == 1024
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x400fff6aaaa1000;  op2val:0x02ffdf00030003
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x400fff6aaaa1000, 0x02ffdf00030003, x1, 40, x2)

inst_36:
// rs1_h1_val == -5, rs2_h2_val == 32, rs1_h0_val == 2, rs1_h2_val == 512
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x030200fffb0002;  op2val:0xfeff00200100c000
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x030200fffb0002, 0xfeff00200100c000, x1, 48, x2)

inst_37:
// rs1_h1_val == -3, rs2_h1_val == 32767, rs2_h2_val == -3, rs2_h0_val == 256
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0100fffd2000;  op2val:0x08fffd7fff0100
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x7fff0100fffd2000, 0x08fffd7fff0100, x1, 56, x2)

inst_38:
// rs1_h1_val == 16384, rs2_h1_val == 512, rs2_h2_val == -17, rs1_h2_val == 4096, rs1_h3_val == -1
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xffff10004000ffef;  op2val:0xfbffffef0200dfff
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xffff10004000ffef, 0xfbffffef0200dfff, x1, 64, x2)

inst_39:
// rs1_h1_val == 8192, rs1_h2_val == -9, rs1_h0_val == 512, rs2_h1_val == -8193, rs1_h3_val == -8193
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff720000200;  op2val:0x02fff9dfff0005
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xdffffff720000200, 0x02fff9dfff0005, x1, 72, x2)

inst_40:
// rs1_h1_val == 1024, rs1_h3_val == -5, rs2_h2_val == 8, rs2_h0_val == -1025
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffa0400fff6;  op2val:0x0400080080fbff
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xfffbfffa0400fff6, 0x0400080080fbff, x1, 80, x2)

inst_41:
// rs1_h1_val == 512, rs1_h3_val == 512, rs1_h2_val == 4, rs2_h2_val == -129
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x20000040200fffb;  op2val:0xaaaaff7f00400006
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x20000040200fffb, 0xaaaaff7f00400006, x1, 88, x2)

inst_42:
// rs1_h1_val == 128, rs1_h0_val == -16385, rs2_h1_val == 16, rs2_h0_val == -32768
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x03ff7f0080bfff;  op2val:0xfffe200000108000
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x03ff7f0080bfff, 0xfffe200000108000, x1, 96, x2)

inst_43:
// rs1_h1_val == 32, rs1_h2_val == 64, rs1_h3_val == 0, rs2_h1_val == -9
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x0000400020fff6;  op2val:0x1000800fff7c000
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x0000400020fff6, 0x1000800fff7c000, x1, 104, x2)

inst_44:
// rs1_h1_val == 1, rs2_h2_val == 16384, rs1_h2_val == 0
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x07000000010007;  op2val:0x0940000003fff6
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x07000000010007, 0x0940000003fff6, x1, 112, x2)

inst_45:
// rs1_h1_val == 0, rs2_h0_val == 64, rs1_h0_val == 64
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffc00000040;  op2val:0x800fffd00800040
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xfdfffffc00000040, 0x800fffd00800040, x1, 120, x2)

inst_46:
// rs1_h0_val == 21845, rs1_h2_val == 32, rs1_h3_val == 16384
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x4000002000095555;  op2val:0x3fff00030005fffa
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x4000002000095555, 0x3fff00030005fffa, x1, 128, x2)

inst_47:
// rs1_h0_val == 32767, rs1_h3_val == -2, rs2_h0_val == 32767
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffe000000067fff;  op2val:0x80fdff00107fff
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xfffe000000067fff, 0x80fdff00107fff, x1, 136, x2)

inst_48:
// rs1_h0_val == -257, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x40fffe0010feff;  op2val:0xc000fff600080002
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x40fffe0010feff, 0xc000fff600080002, x1, 144, x2)

inst_49:
// rs1_h0_val == -33, rs1_h2_val == 2048, rs2_h1_val == 16384
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffe08000006ffdf;  op2val:0x1000040040000040
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xfffe08000006ffdf, 0x1000040040000040, x1, 152, x2)

inst_50:
// rs1_h0_val == -9, rs1_h2_val == 8, rs1_h3_val == -17
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xffef00080003fff7;  op2val:0xfffbfffdfbfffff9
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xffef00080003fff7, 0xfffbfffdfbfffff9, x1, 160, x2)

inst_51:
// rs1_h0_val == -2, rs2_h1_val == -3
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x400008004000fffe;  op2val:0x09fffafffd0010
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x400008004000fffe, 0x09fffafffd0010, x1, 168, x2)

inst_52:
// rs1_h0_val == 16384, rs1_h2_val == 1, rs1_h1_val == -2049
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0001f7ff4000;  op2val:0x80004000ff7ffff9
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xaaaa0001f7ff4000, 0x80004000ff7ffff9, x1, 176, x2)

inst_53:
// rs1_h0_val == 256, rs1_h2_val == 16384
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x3fff4000c0000100;  op2val:0xeffffbffaaaafeff
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x3fff4000c0000100, 0xeffffbffaaaafeff, x1, 184, x2)

inst_54:
// rs1_h0_val == 128, rs1_h3_val == -3
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfdff3fff0080;  op2val:0x3fff1000dffffff6
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xfffdfdff3fff0080, 0x3fff1000dffffff6, x1, 192, x2)

inst_55:
// rs1_h0_val == 16, rs1_h1_val == -129, rs2_h3_val == -1, rs1_h3_val == 8192
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffcff7f0010;  op2val:0xffff3ffffffd7fff
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x2000fffcff7f0010, 0xffff3ffffffd7fff, x1, 200, x2)

inst_56:
// rs2_h1_val == 4, rs2_h0_val == -5, rs2_h2_val == 256
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x555500040009fffb;  op2val:0x3fff01000004fffb
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x555500040009fffb, 0x3fff01000004fffb, x1, 208, x2)

inst_57:
// rs2_h1_val == 2, rs1_h3_val == -65, rs1_h0_val == -1
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xffbfeffffffdffff;  op2val:0x2000040000024000
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xffbfeffffffdffff, 0x2000040000024000, x1, 216, x2)

inst_58:
// rs2_h1_val == 1, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x09000300050009;  op2val:0xffdfffbf00014000
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x09000300050009, 0xffdfffbf00014000, x1, 224, x2)

inst_59:
// rs2_h1_val == -1, rs1_h1_val == -257, rs1_h3_val == -129
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xff7f2000feff5555;  op2val:0x400003ffff7fff
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xff7f2000feff5555, 0x400003ffff7fff, x1, 232, x2)

inst_60:
// rs2_h0_val == 21845, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x200fff60005fffc;  op2val:0x05000300205555
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x200fff60005fffc, 0x05000300205555, x1, 240, x2)

inst_61:
// rs2_h0_val == -16385, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x06f7ffc000fff6;  op2val:0xdfff00035555bfff
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x06f7ffc000fff6, 0xdfff00035555bfff, x1, 248, x2)

inst_62:
// rs2_h0_val == -4097, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0001fffeffdf;  op2val:0xeffffdff0000efff
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xfffa0001fffeffdf, 0xeffffdff0000efff, x1, 256, x2)

inst_63:
// rs2_h0_val == -2049, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff7f7fffffe;  op2val:0x06fffcfffcf7ff
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x4000fff7f7fffffe, 0x06fffcfffcf7ff, x1, 264, x2)

inst_64:
// rs2_h0_val == -129, rs1_h1_val == -16385
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfff8bfffbfff0005;  op2val:0x05fffdfff6ff7f
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xfff8bfffbfff0005, 0x05fffdfff6ff7f, x1, 272, x2)

inst_65:
// rs2_h0_val == -65, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xbfffaaaafff85555;  op2val:0xfbffffdf7fffffbf
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xbfffaaaafff85555, 0xfbffffdf7fffffbf, x1, 280, x2)

inst_66:
// rs2_h0_val == -33, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffcfffaffdf;  op2val:0xfffb08000080ffdf
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xfbfffffcfffaffdf, 0xfffb08000080ffdf, x1, 288, x2)

inst_67:
// rs2_h0_val == -17, rs2_h1_val == -65, rs2_h2_val == 128
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x0380000000ffbf;  op2val:0xfffb0080ffbfffef
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x0380000000ffbf, 0xfffb0080ffbfffef, x1, 296, x2)

inst_68:
// rs2_h0_val == -3, rs1_h2_val == -1025, rs2_h2_val == 512
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffbffffdffff8;  op2val:0xaaaa02002000fffd
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x3ffffbffffdffff8, 0xaaaa02002000fffd, x1, 304, x2)

inst_69:
// rs2_h0_val == 1024, rs1_h3_val == 2
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x020004aaaa0800;  op2val:0x2000000755550400
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x020004aaaa0800, 0x2000000755550400, x1, 312, x2)

inst_70:
// rs2_h0_val == 128, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xff7fff7f3fff7fff;  op2val:0xff7f008004000080
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xff7fff7f3fff7fff, 0xff7f008004000080, x1, 320, x2)

inst_71:
// rs2_h0_val == 32, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x1000007ffeffffb;  op2val:0xf7fffff6fff80020
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x1000007ffeffffb, 0xf7fffff6fff80020, x1, 328, x2)

inst_72:
// rs2_h0_val == -1, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xffef02000040c000;  op2val:0x10fff80400ffff
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xffef02000040c000, 0x10fff80400ffff, x1, 336, x2)

inst_73:
// rs2_h2_val == -4097, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xffefffbf00010007;  op2val:0x1000effffffa1000
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xffefffbf00010007, 0x1000effffffa1000, x1, 344, x2)

inst_74:
// rs1_h3_val == 2048, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x800fffbdfffff7f;  op2val:0x8003fff00030005
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x800fffbdfffff7f, 0x8003fff00030005, x1, 352, x2)

inst_75:
// rs1_h3_val == 8, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x083fff00012000;  op2val:0xffbfaaaa08005555
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x083fff00012000, 0xffbfaaaa08005555, x1, 360, x2)

inst_76:
// rs2_h2_val == -5, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x00c00000080002;  op2val:0xeffffffb00058000
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x00c00000080002, 0xeffffffb00058000, x1, 368, x2)

inst_77:
// rs1_h2_val == -8193, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x400dfff0005fff8;  op2val:0x200000072000ffef
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x400dfff0005fff8, 0x200000072000ffef, x1, 376, x2)

inst_78:
// rs1_h2_val == -257, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fefffffe4000;  op2val:0x07fffbfff60005
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xfff8fefffffe4000, 0x07fffbfff60005, x1, 384, x2)

inst_79:
// rs2_h2_val == 4, rs1_h2_val == 1024
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x0604000000fffb;  op2val:0xfffd0004aaaafff9
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x0604000000fffb, 0xfffd0004aaaafff9, x1, 392, x2)

inst_80:
// rs2_h2_val == 1, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xefff555500040010;  op2val:0x10000001fffa8000
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xefff555500040010, 0x10000001fffa8000, x1, 400, x2)

inst_81:
// rs2_h2_val == 0, rs1_h1_val == -4097
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffefff0002;  op2val:0xffbf0000dfff7fff
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xfffff7ffefff0002, 0xffbf0000dfff7fff, x1, 408, x2)

inst_82:
// rs2_h2_val == -1, rs2_h1_val == -4097
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0003dfff7fff;  op2val:0xfdffffffefff7fff
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xbfff0003dfff7fff, 0xfdffffffefff7fff, x1, 416, x2)

inst_83:
// rs2_h1_val == -513, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xefffc00080005555;  op2val:0x040400fdff4000
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xefffc00080005555, 0x040400fdff4000, x1, 424, x2)

inst_84:
// rs2_h3_val == 0, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x00ffef00040008;  op2val:0x000400fffb1000
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x00ffef00040008, 0x000400fffb1000, x1, 432, x2)

inst_85:
// rs1_h2_val == 16, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00100040fffb;  op2val:0x070800fff8fff7
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xfdff00100040fffb, 0x070800fff8fff7, x1, 440, x2)

inst_86:
// rs2_h1_val == -33, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x0101000004fffd;  op2val:0xfffcc000ffdff7ff
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x0101000004fffd, 0xfffcc000ffdff7ff, x1, 448, x2)

inst_87:
// rs2_h1_val == -17, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffaff7ffdff;  op2val:0xfdff0010ffefff7f
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xeffffffaff7ffdff, 0xfdff0010ffefff7f, x1, 456, x2)

inst_88:
// rs1_h3_val == -2049, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xf7fff7fffff60040;  op2val:0xfffe7fff0007feff
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xf7fff7fffff60040, 0xfffe7fff0007feff, x1, 464, x2)

inst_89:
// rs1_h3_val == -257, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfeff100004003fff;  op2val:0x4000fff600080000
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xfeff100004003fff, 0x4000fff600080000, x1, 472, x2)

inst_90:
// rs1_h1_val == 21845, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x10fffe55550020;  op2val:0xfffd010000018000
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x10fffe55550020, 0xfffd010000018000, x1, 480, x2)

inst_91:
// rs1_h0_val == 4, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffcefffffff0004;  op2val:0x00fff8f7ffc000
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xfffcefffffff0004, 0x00fff8f7ffc000, x1, 488, x2)

inst_92:
// rs2_h1_val == -32768, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x020008fff6f7ff;  op2val:0x200fdff8000feff
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x020008fff6f7ff, 0x200fdff8000feff, x1, 496, x2)

inst_93:
// rs1_h1_val == 32767, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfeff00037fff3fff;  op2val:0xfffb4000fffb0003
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xfeff00037fff3fff, 0xfffb4000fffb0003, x1, 504, x2)

inst_94:
// rs2_h1_val == 4096, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x027ffffff91000;  op2val:0x400ff7f10000007
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x027ffffff91000, 0x400ff7f10000007, x1, 512, x2)

inst_95:
// rs1_h3_val == -9, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfff70007ffdf0001;  op2val:0xf7ffbfff00804000
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xfff70007ffdf0001, 0xf7ffbfff00804000, x1, 520, x2)

inst_96:
// rs2_h3_val == 1, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x00f7ff00020009;  op2val:0x013fff00013fff
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x00f7ff00020009, 0x013fff00013fff, x1, 528, x2)

inst_97:
// rs1_h3_val == -32768, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffafff6fdff;  op2val:0x400f7fffffe0001
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x8000fffafff6fdff, 0x400f7fffffe0001, x1, 536, x2)

inst_98:
// rs1_h1_val == -65, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffdefffffbf5555;  op2val:0xffef3fff00000000
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xfffdefffffbf5555, 0xffef3fff00000000, x1, 544, x2)

inst_99:
// rs1_h3_val == 4096, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x1000aaaa0006fff6;  op2val:0xfbff3fff00100100
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x1000aaaa0006fff6, 0xfbff3fff00100100, x1, 552, x2)

inst_100:
// rs1_h1_val == -9, 
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x015555fff7ffdf;  op2val:0x0710000007fffb
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x015555fff7ffdf, 0x0710000007fffb, x1, 560, x2)

inst_101:
// rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h1_val == -21846, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h1_val == 4096, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs2_h3_val == 2048, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h3_val == -513, rs1_h0_val != rs2_h0_val, rs1_h2_val == -4097, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h2_val == 64, rs2_h0_val == 16384
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xfdffefff10008000;  op2val:0x8000040aaaa4000
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xfdffefff10008000, 0x8000040aaaa4000, x1, 568, x2)

inst_102:
// rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h2_val == -8193, rs1_h2_val == 8192, rs2_h0_val == 1, rs1_h3_val == -21846, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h0_val == 1024, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h1_val == -5, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa2000fff90400;  op2val:0xfff6dffffffb0001
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0xaaaa2000fff90400, 0xfff6dffffffb0001, x1, 576, x2)

inst_103:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 4, rs2_h3_val == -32768, rs2_h1_val == -2, rs1_h1_val == -1, rs2_h0_val == -2
// opcode: smxds ; op1:x30; op2:x29; dest:x31; op1val:0x040005ffff0003;  op2val:0x80000006fffefffe
TEST_RR_OP(smxds, x31, x30, x29, 0x0000000000000000, 0x040005ffff0003, 0x80000006fffefffe, x1, 584, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 74*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
