
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umin32 instruction of the RISC-V RV64PZicsr extension for the umin32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umin32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x28, rs2==x15, rd==x28, rs1_w0_val == 0, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 536870912, rs2_w0_val == 32, rs2_w1_val == 3758096383
// opcode: umin32 ; op1:x28; op2:x15; dest:x28; op1val:0x2000000000000000;  op2val:0xdfffffff00000020
TEST_RR_OP(umin32, x28, x28, x15, 0x0000000000000000, 0x2000000000000000, 0xdfffffff00000020, x1, 0, x7)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x15, rs2==x11, rd==x27, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val == 131072, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 2147483648, rs2_w1_val == 4194304, rs1_w1_val == 4194304
// opcode: umin32 ; op1:x15; op2:x11; dest:x27; op1val:0x40000000020000;  op2val:0x40000080000000
TEST_RR_OP(umin32, x27, x15, x11, 0x0000000000000000, 0x40000000020000, 0x40000080000000, x1, 8, x7)

inst_2:
// rs1 == rs2 != rd, rs1==x3, rs2==x3, rd==x10, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 4227858431, rs2_w1_val == 524288, rs1_w0_val == 4227858431, rs1_w1_val == 2147483647
// opcode: umin32 ; op1:x3; op2:x3; dest:x10; op1val:0x7ffffffffbffffff;  op2val:0x080000fbffffff
TEST_RR_OP(umin32, x10, x3, x3, 0x0000000000000000, 0x7ffffffffbffffff, 0x080000fbffffff, x1, 16, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x19, rs2==x19, rd==x19, rs2_w1_val == 2863311530, rs2_w0_val == 4294705151, rs1_w1_val == 1024
// opcode: umin32 ; op1:x19; op2:x19; dest:x19; op1val:0x0004000000000c;  op2val:0xaaaaaaaafffbffff
TEST_RR_OP(umin32, x19, x19, x19, 0x0000000000000000, 0x0004000000000c, 0xaaaaaaaafffbffff, x1, 24, x7)

inst_4:
// rs2 == rd != rs1, rs1==x30, rs2==x26, rd==x26, rs2_w1_val == 1431655765, rs1_w0_val == 4294966271, rs1_w1_val == 4294967287
// opcode: umin32 ; op1:x30; op2:x26; dest:x26; op1val:0xfffffff7fffffbff;  op2val:0x5555555500000013
TEST_RR_OP(umin32, x26, x30, x26, 0x0000000000000000, 0xfffffff7fffffbff, 0x5555555500000013, x1, 32, x7)

inst_5:
// rs1==x17, rs2==x21, rd==x12, rs2_w1_val == 2147483647, rs1_w1_val == 4294950911, rs2_w0_val == 8388608, rs1_w0_val == 2147483648
// opcode: umin32 ; op1:x17; op2:x21; dest:x12; op1val:0xffffbfff80000000;  op2val:0x7fffffff00800000
TEST_RR_OP(umin32, x12, x17, x21, 0x0000000000000000, 0xffffbfff80000000, 0x7fffffff00800000, x1, 40, x7)

inst_6:
// rs1==x0, rs2==x6, rd==x31, rs2_w1_val == 3221225471, rs2_w0_val == 4294934527, rs1_w0_val == 1073741824, rs1_w1_val == 4294967167
// opcode: umin32 ; op1:x0; op2:x6; dest:x31; op1val:0xffffff7f40000000;  op2val:0xbfffffffffff7fff
TEST_RR_OP(umin32, x31, x0, x6, 0x0000000000000000, 0xffffff7f40000000, 0xbfffffffffff7fff, x1, 48, x7)

inst_7:
// rs1==x25, rs2==x12, rd==x5, rs2_w1_val == 4026531839, rs1_w0_val == 8192, rs2_w0_val == 4194304, rs1_w1_val == 4294967293
// opcode: umin32 ; op1:x25; op2:x12; dest:x5; op1val:0xfffffffd00002000;  op2val:0xefffffff00400000
TEST_RR_OP(umin32, x5, x25, x12, 0x0000000000000000, 0xfffffffd00002000, 0xefffffff00400000, x1, 56, x7)

inst_8:
// rs1==x4, rs2==x29, rd==x24, rs2_w1_val == 4160749567, rs1_w1_val == 3221225471, rs1_w0_val == 2147483647, rs2_w0_val == 3758096383
// opcode: umin32 ; op1:x4; op2:x29; dest:x24; op1val:0xbfffffff7fffffff;  op2val:0xf7ffffffdfffffff
TEST_RR_OP(umin32, x24, x4, x29, 0x0000000000000000, 0xbfffffff7fffffff, 0xf7ffffffdfffffff, x1, 64, x7)

inst_9:
// rs1==x22, rs2==x13, rd==x6, rs2_w1_val == 4227858431, rs1_w1_val == 4286578687, rs2_w0_val == 8
// opcode: umin32 ; op1:x22; op2:x13; dest:x6; op1val:0xff7fffff80000000;  op2val:0xfbffffff00000008
TEST_RR_OP(umin32, x6, x22, x13, 0x0000000000000000, 0xff7fffff80000000, 0xfbffffff00000008, x1, 72, x7)

inst_10:
// rs1==x11, rs2==x9, rd==x3, rs2_w1_val == 4261412863, rs1_w0_val == 16777216
// opcode: umin32 ; op1:x11; op2:x9; dest:x3; op1val:0x00000a01000000;  op2val:0xfdffffff00000009
TEST_RR_OP(umin32, x3, x11, x9, 0x0000000000000000, 0x00000a01000000, 0xfdffffff00000009, x1, 80, x7)

inst_11:
// rs1==x10, rs2==x16, rd==x8, rs2_w1_val == 4278190079, rs1_w1_val == 268435456
// opcode: umin32 ; op1:x10; op2:x16; dest:x8; op1val:0x1000000000000005;  op2val:0xfeffffff00000008
TEST_RR_OP(umin32, x8, x10, x16, 0x0000000000000000, 0x1000000000000005, 0xfeffffff00000008, x1, 88, x7)

inst_12:
// rs1==x13, rs2==x2, rd==x30, rs2_w1_val == 4286578687, rs2_w0_val == 67108864, rs1_w0_val == 4294967287
// opcode: umin32 ; op1:x13; op2:x2; dest:x30; op1val:0xffffbffffffffff7;  op2val:0xff7fffff04000000
TEST_RR_OP(umin32, x30, x13, x2, 0x0000000000000000, 0xffffbffffffffff7, 0xff7fffff04000000, x1, 96, x7)

inst_13:
// rs1==x14, rs2==x27, rd==x13, rs2_w1_val == 4290772991, rs1_w1_val == 4294705151, rs2_w0_val == 2097152
// opcode: umin32 ; op1:x14; op2:x27; dest:x13; op1val:0xfffbffff7fffffff;  op2val:0xffbfffff00200000
TEST_RR_OP(umin32, x13, x14, x27, 0x0000000000000000, 0xfffbffff7fffffff, 0xffbfffff00200000, x1, 104, x7)

inst_14:
// rs1==x27, rs2==x31, rd==x25, rs2_w1_val == 4292870143, rs1_w1_val == 4294966271
// opcode: umin32 ; op1:x27; op2:x31; dest:x25; op1val:0xfffffbff00000007;  op2val:0xffdfffffdfffffff
TEST_RR_OP(umin32, x25, x27, x31, 0x0000000000000000, 0xfffffbff00000007, 0xffdfffffdfffffff, x1, 112, x5)

inst_15:
// rs1==x2, rs2==x0, rd==x9, rs2_w1_val == 4293918719, rs1_w1_val == 1048576, rs2_w0_val == 4294967287
// opcode: umin32 ; op1:x2; op2:x0; dest:x9; op1val:0x10000000000006;  op2val:0xffeffffffffffff7
TEST_RR_OP(umin32, x9, x2, x0, 0x0000000000000000, 0x10000000000006, 0xffeffffffffffff7, x1, 120, x5)

inst_16:
// rs1==x12, rs2==x23, rd==x0, rs2_w1_val == 4294443007, rs1_w0_val == 4294966783, rs2_w0_val == 4294950911, rs1_w1_val == 128
// opcode: umin32 ; op1:x12; op2:x23; dest:x0; op1val:0x000080fffffdff;  op2val:0xfff7ffffffffbfff
TEST_RR_OP(umin32, x0, x12, x23, 0x0000000000000000, 0x000080fffffdff, 0xfff7ffffffffbfff, x1, 128, x5)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_17:
// rs1==x18, rs2==x25, rd==x17, rs2_w1_val == 4294705151, rs2_w0_val == 262144, rs1_w0_val == 4096, rs1_w1_val == 16384
// opcode: umin32 ; op1:x18; op2:x25; dest:x17; op1val:0x00400000001000;  op2val:0xfffbffff00040000
TEST_RR_OP(umin32, x17, x18, x25, 0x0000000000000000, 0x00400000001000, 0xfffbffff00040000, x3, 0, x5)

inst_18:
// rs1==x1, rs2==x10, rd==x23, rs2_w1_val == 4294836223, rs1_w1_val == 3758096383, rs1_w0_val == 65536
// opcode: umin32 ; op1:x1; op2:x10; dest:x23; op1val:0xdfffffff00010000;  op2val:0xfffdffff00000020
TEST_RR_OP(umin32, x23, x1, x10, 0x0000000000000000, 0xdfffffff00010000, 0xfffdffff00000020, x3, 8, x5)

inst_19:
// rs1==x29, rs2==x14, rd==x11, rs2_w1_val == 4294901759, rs1_w1_val == 134217728
// opcode: umin32 ; op1:x29; op2:x14; dest:x11; op1val:0x800000001000000;  op2val:0xfffeffff00000008
TEST_RR_OP(umin32, x11, x29, x14, 0x0000000000000000, 0x800000001000000, 0xfffeffff00000008, x3, 16, x5)

inst_20:
// rs1==x26, rs2==x8, rd==x14, rs2_w1_val == 4294934527, rs1_w1_val == 64
// opcode: umin32 ; op1:x26; op2:x8; dest:x14; op1val:0x00004080000000;  op2val:0xffff7fff0000000b
TEST_RR_OP(umin32, x14, x26, x8, 0x0000000000000000, 0x00004080000000, 0xffff7fff0000000b, x3, 24, x5)

inst_21:
// rs1==x7, rs2==x1, rd==x4, rs2_w1_val == 4294950911, rs2_w0_val == 4294967294, rs1_w0_val == 4026531839
// opcode: umin32 ; op1:x7; op2:x1; dest:x4; op1val:0x000080efffffff;  op2val:0xffffbffffffffffe
TEST_RR_OP(umin32, x4, x7, x1, 0x0000000000000000, 0x000080efffffff, 0xffffbffffffffffe, x3, 32, x5)

inst_22:
// rs1==x21, rs2==x17, rd==x29, rs2_w1_val == 4294959103, 
// opcode: umin32 ; op1:x21; op2:x17; dest:x29; op1val:0xfffffffdfbffffff;  op2val:0xffffdfff00800000
TEST_RR_OP(umin32, x29, x21, x17, 0x0000000000000000, 0xfffffffdfbffffff, 0xffffdfff00800000, x3, 40, x5)

inst_23:
// rs1==x24, rs2==x20, rd==x21, rs2_w1_val == 4294963199, rs1_w1_val == 4290772991, rs1_w0_val == 4286578687
// opcode: umin32 ; op1:x24; op2:x20; dest:x21; op1val:0xffbfffffff7fffff;  op2val:0xffffefff00000007
TEST_RR_OP(umin32, x21, x24, x20, 0x0000000000000000, 0xffbfffffff7fffff, 0xffffefff00000007, x3, 48, x5)

inst_24:
// rs1==x9, rs2==x30, rd==x15, rs2_w1_val == 4294965247, rs1_w1_val == 16777216
// opcode: umin32 ; op1:x9; op2:x30; dest:x15; op1val:0x10000000000000a;  op2val:0xfffff7ff00040000
TEST_RR_OP(umin32, x15, x9, x30, 0x0000000000000000, 0x10000000000000a, 0xfffff7ff00040000, x3, 56, x5)

inst_25:
// rs1==x16, rs2==x7, rd==x22, rs2_w1_val == 4294966271, rs1_w0_val == 4294705151
// opcode: umin32 ; op1:x16; op2:x7; dest:x22; op1val:0x000006fffbffff;  op2val:0xfffffbffffffbfff
TEST_RR_OP(umin32, x22, x16, x7, 0x0000000000000000, 0x000006fffbffff, 0xfffffbffffffbfff, x3, 64, x5)

inst_26:
// rs1==x23, rs2==x28, rd==x20, rs2_w1_val == 4294966783, rs1_w0_val == 4294934527, rs2_w0_val == 524288
// opcode: umin32 ; op1:x23; op2:x28; dest:x20; op1val:0x000003ffff7fff;  op2val:0xfffffdff00080000
TEST_RR_OP(umin32, x20, x23, x28, 0x0000000000000000, 0x000003ffff7fff, 0xfffffdff00080000, x3, 72, x5)

inst_27:
// rs1==x31, rs2==x22, rd==x2, rs2_w1_val == 4294967039, rs1_w1_val == 4294934527
// opcode: umin32 ; op1:x31; op2:x22; dest:x2; op1val:0xffff7ffffffbffff;  op2val:0xfffffeff00000008
TEST_RR_OP(umin32, x2, x31, x22, 0x0000000000000000, 0xffff7ffffffbffff, 0xfffffeff00000008, x3, 80, x9)

inst_28:
// rs1==x8, rs2==x5, rd==x18, rs2_w1_val == 4294967167, rs1_w0_val == 3758096383, rs2_w0_val == 4293918719
// opcode: umin32 ; op1:x8; op2:x5; dest:x18; op1val:0x000012dfffffff;  op2val:0xffffff7fffefffff
TEST_RR_OP(umin32, x18, x8, x5, 0x0000000000000000, 0x000012dfffffff, 0xffffff7fffefffff, x3, 88, x9)

inst_29:
// rs1==x5, rs2==x4, rd==x1, rs2_w1_val == 4294967231, rs1_w1_val == 131072
// opcode: umin32 ; op1:x5; op2:x4; dest:x1; op1val:0x02000000020000;  op2val:0xffffffbf04000000
TEST_RR_OP(umin32, x1, x5, x4, 0x0000000000000000, 0x02000000020000, 0xffffffbf04000000, x3, 96, x9)

inst_30:
// rs1==x6, rs2==x24, rd==x16, rs2_w1_val == 4294967263, rs2_w0_val == 4294967293, rs1_w0_val == 4160749567
// opcode: umin32 ; op1:x6; op2:x24; dest:x16; op1val:0x400000f7ffffff;  op2val:0xffffffdffffffffd
TEST_RR_OP(umin32, x16, x6, x24, 0x0000000000000000, 0x400000f7ffffff, 0xffffffdffffffffd, x3, 104, x9)

inst_31:
// rs1==x20, rs2==x18, rd==x7, rs2_w1_val == 4294967279, rs2_w0_val == 2863311530, rs1_w0_val == 4294967293, rs1_w1_val == 256
// opcode: umin32 ; op1:x20; op2:x18; dest:x7; op1val:0x000100fffffffd;  op2val:0xffffffefaaaaaaaa
TEST_RR_OP(umin32, x7, x20, x18, 0x0000000000000000, 0x000100fffffffd, 0xffffffefaaaaaaaa, x3, 112, x9)

inst_32:
// rs2_w1_val == 4294967287, rs1_w1_val == 8192, rs1_w0_val == 4294836223
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffdffff;  op2val:0xfffffff704000000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x002000fffdffff, 0xfffffff704000000, x3, 120, x9)

inst_33:
// rs2_w1_val == 4294967291, rs1_w0_val == 4294967294
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffffffe;  op2val:0xfffffffbfffffff7
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x002000fffffffe, 0xfffffffbfffffff7, x3, 128, x9)

inst_34:
// rs2_w1_val == 4294967293, rs1_w0_val == 33554432, rs2_w0_val == 4294967295, rs1_w1_val == 4294967039
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff02000000;  op2val:0xfffffffdffffffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfffffeff02000000, 0xfffffffdffffffff, x3, 136, x9)

inst_35:
// rs2_w1_val == 4294967294, rs1_w1_val == 4278190079
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000005;  op2val:0xfffffffe00000011
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000005, 0xfffffffe00000011, x3, 144, x9)

inst_36:
// rs2_w1_val == 2147483648, rs1_w0_val == 256, rs1_w1_val == 4160749567, rs2_w0_val == 4294959103
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000100;  op2val:0x80000000ffffdfff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000100, 0x80000000ffffdfff, x3, 152, x9)

inst_37:
// rs2_w1_val == 1073741824, rs1_w0_val == 2097152, rs2_w0_val == 268435456
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000e00200000;  op2val:0x4000000010000000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00000e00200000, 0x4000000010000000, x3, 160, x9)

inst_38:
// rs2_w1_val == 536870912, rs1_w1_val == 4026531839, rs1_w0_val == 4294967279
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffffffef;  op2val:0x20000000ffffbfff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xefffffffffffffef, 0x20000000ffffbfff, x3, 168, x9)

inst_39:
// rs2_w1_val == 268435456, rs2_w0_val == 64
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffefffffff;  op2val:0x1000000000000040
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xf7ffffffefffffff, 0x1000000000000040, x3, 176, x9)

inst_40:
// rs2_w1_val == 134217728, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffffff7;  op2val:0x80000000000000a
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x000400fffffff7, 0x80000000000000a, x3, 184, x9)

inst_41:
// rs2_w1_val == 67108864, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffffd;  op2val:0x400000000000008
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x1000000fffffffd, 0x400000000000008, x3, 192, x9)

inst_42:
// rs2_w1_val == 33554432, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000003;  op2val:0x2000000ffffffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000003, 0x2000000ffffffff, x3, 200, x9)

inst_43:
// rs2_w1_val == 16777216, rs2_w0_val == 131072, rs1_w0_val == 4294967263
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x000013ffffffdf;  op2val:0x100000000020000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x000013ffffffdf, 0x100000000020000, x3, 208, x9)

inst_44:
// rs2_w1_val == 8388608, rs2_w0_val == 16777216
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff70000000b;  op2val:0x80000001000000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfffffff70000000b, 0x80000001000000, x3, 216, x9)

inst_45:
// rs2_w1_val == 2097152, rs1_w1_val == 4294967263
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffffe;  op2val:0x20000000200000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffffe, 0x20000000200000, x3, 224, x9)

inst_46:
// rs2_w1_val == 1048576, rs1_w1_val == 4294967279, rs2_w0_val == 65536, rs1_w0_val == 536870912
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef20000000;  op2val:0x10000000010000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffffffef20000000, 0x10000000010000, x3, 232, x9)

inst_47:
// rs2_w1_val == 262144, rs1_w0_val == 524288
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00080000;  op2val:0x04000000000009
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00080000, 0x04000000000009, x3, 240, x9)

inst_48:
// rs2_w1_val == 131072, rs2_w0_val == 2147483647
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000002000;  op2val:0x0200007fffffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00400000002000, 0x0200007fffffff, x3, 248, x9)

inst_49:
// rs2_w1_val == 65536, rs1_w1_val == 0, rs1_w0_val == 4294950911, rs2_w0_val == 536870912
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000ffffbfff;  op2val:0x01000020000000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x000000ffffbfff, 0x01000020000000, x3, 256, x9)

inst_50:
// rs2_w1_val == 32768, rs2_w0_val == 8192, rs1_w1_val == 4294966783
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffbfff;  op2val:0x00800000002000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffbfff, 0x00800000002000, x3, 264, x9)

inst_51:
// rs2_w1_val == 16384, rs2_w0_val == 256
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00002000;  op2val:0x00400000000100
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00002000, 0x00400000000100, x3, 272, x9)

inst_52:
// rs2_w1_val == 8192, rs1_w0_val == 4294959103
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ffffdfff;  op2val:0x002000fffffffd
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x8000000ffffdfff, 0x002000fffffffd, x3, 280, x9)

inst_53:
// rs1_w0_val == 262144, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000040000;  op2val:0xfeffffff20000000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x100000000040000, 0xfeffffff20000000, x3, 288, x9)

inst_54:
// rs1_w0_val == 32768, rs2_w0_val == 4294967263
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00008000;  op2val:0x020000ffffffdf
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00008000, 0x020000ffffffdf, x3, 296, x9)

inst_55:
// rs1_w0_val == 16384, rs2_w0_val == 4294967279
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000004000;  op2val:0x000013ffffffef
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x02000000004000, 0x000013ffffffef, x3, 304, x9)

inst_56:
// rs1_w0_val == 2048, rs2_w0_val == 1024
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000800;  op2val:0xfff7ffff00000400
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000800, 0xfff7ffff00000400, x3, 312, x9)

inst_57:
// rs1_w0_val == 1024, rs2_w0_val == 4278190079
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500000400;  op2val:0x10000000feffffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00000500000400, 0x10000000feffffff, x3, 320, x9)

inst_58:
// rs1_w0_val == 512, rs1_w1_val == 4294967231, rs2_w0_val == 4294967231
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000200;  op2val:0xfffffffeffffffbf
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000200, 0xfffffffeffffffbf, x3, 328, x9)

inst_59:
// rs1_w0_val == 128, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001300000080;  op2val:0xfffffff700000012
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00001300000080, 0xfffffff700000012, x3, 336, x9)

inst_60:
// rs1_w0_val == 64, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000040;  op2val:0xffffff7ffffffff7
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000040, 0xffffff7ffffffff7, x3, 344, x9)

inst_61:
// rs1_w0_val == 32, rs2_w0_val == 2048
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000020;  op2val:0xffffffbf00000800
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfffffff700000020, 0xffffffbf00000800, x3, 352, x9)

inst_62:
// rs1_w0_val == 16, rs2_w0_val == 16
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000b00000010;  op2val:0xffffdfff00000010
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00000b00000010, 0xffffdfff00000010, x3, 360, x9)

inst_63:
// rs1_w0_val == 8, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000008;  op2val:0xf7ffffff0000000d
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000008, 0xf7ffffff0000000d, x3, 368, x9)

inst_64:
// rs1_w0_val == 4, rs1_w1_val == 4227858431, rs2_w0_val == 4294965247
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000004;  op2val:0xfff7fffffffff7ff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000004, 0xfff7fffffffff7ff, x3, 376, x9)

inst_65:
// rs1_w0_val == 2, rs2_w0_val == 2, rs1_w1_val == 32768
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000002;  op2val:0xfeffffff00000002
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00800000000002, 0xfeffffff00000002, x3, 384, x9)

inst_66:
// rs1_w0_val == 1, rs2_w1_val == 4
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000001;  op2val:0x000004ffffffbf
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00040000000001, 0x000004ffffffbf, x3, 392, x9)

inst_67:
// rs1_w0_val == 4294967295, rs2_w0_val == 4294967291
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffffffff;  op2val:0xffffffdffffffffb
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffffffff, 0xffffffdffffffffb, x3, 400, x9)

inst_68:
// rs2_w1_val == 4096, rs1_w0_val == 4261412863
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fdffffff;  op2val:0x00100000000013
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x10000000fdffffff, 0x00100000000013, x3, 408, x9)

inst_69:
// rs2_w1_val == 2048, rs2_w0_val == 0
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500000009;  op2val:0x00080000000000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00000500000009, 0x00080000000000, x3, 416, x9)

inst_70:
// rs2_w1_val == 1024, rs1_w0_val == 4294967291
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffffffb;  op2val:0x00040000000800
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x002000fffffffb, 0x00040000000800, x3, 424, x9)

inst_71:
// rs2_w1_val == 512, rs2_w0_val == 128, rs1_w1_val == 4294967294
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeff7fffff;  op2val:0x00020000000080
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfffffffeff7fffff, 0x00020000000080, x3, 432, x9)

inst_72:
// rs2_w1_val == 256, rs2_w0_val == 1048576
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000000;  op2val:0x00010000100000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00000600000000, 0x00010000100000, x3, 440, x9)

inst_73:
// rs2_w1_val == 128, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000e00200000;  op2val:0x00008000010000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00000e00200000, 0x00008000010000, x3, 448, x9)

inst_74:
// rs2_w1_val == 64, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000b00200000;  op2val:0x00004000000006
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00000b00200000, 0x00004000000006, x3, 456, x9)

inst_75:
// rs2_w1_val == 32, rs1_w0_val == 4294967039
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffeff;  op2val:0x00002000800000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x400000fffffeff, 0x00002000800000, x3, 464, x9)

inst_76:
// rs2_w1_val == 16, rs1_w0_val == 4294901759, rs2_w0_val == 4294967167
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x000011fffeffff;  op2val:0x000010ffffff7f
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x000011fffeffff, 0x000010ffffff7f, x3, 472, x9)

inst_77:
// rs2_w1_val == 8, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000009;  op2val:0x00000800000012
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00000600000009, 0x00000800000012, x3, 480, x9)

inst_78:
// rs2_w1_val == 2, rs1_w0_val == 4194304
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00400000;  op2val:0x000002ffffffdf
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00400000, 0x000002ffffffdf, x3, 488, x9)

inst_79:
// rs2_w1_val == 1, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000003;  op2val:0x0000010000000a
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000003, 0x0000010000000a, x3, 496, x9)

inst_80:
// rs2_w1_val == 4294967295, rs1_w1_val == 16
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001002000000;  op2val:0xffffffff0000000c
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00001002000000, 0xffffffff0000000c, x3, 504, x9)

inst_81:
// rs2_w1_val == 0, rs1_w0_val == 67108864
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff04000000;  op2val:0x000000fffffffe
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xdfffffff04000000, 0x000000fffffffe, x3, 512, x9)

inst_82:
// rs2_w0_val == 1431655765, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000012;  op2val:0x00000755555555
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00000700000012, 0x00000755555555, x3, 520, x9)

inst_83:
// rs2_w0_val == 3221225471, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffffffd;  op2val:0x040000bfffffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffffffd, 0x040000bfffffff, x3, 528, x9)

inst_84:
// rs2_w0_val == 4026531839, rs1_w0_val == 134217728
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001208000000;  op2val:0x000000efffffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00001208000000, 0x000000efffffff, x3, 536, x9)

inst_85:
// rs2_w0_val == 4160749567, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff01000000;  op2val:0x000400f7ffffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfffbffff01000000, 0x000400f7ffffff, x3, 544, x9)

inst_86:
// rs2_w0_val == 4261412863, rs1_w0_val == 3221225471
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffbfffffff;  op2val:0x100000fdffffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfffffeffbfffffff, 0x100000fdffffff, x3, 552, x9)

inst_87:
// rs2_w0_val == 4286578687, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000d00000002;  op2val:0xaaaaaaaaff7fffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00000d00000002, 0xaaaaaaaaff7fffff, x3, 560, x9)

inst_88:
// rs2_w0_val == 512, rs1_w1_val == 2863311530
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000100;  op2val:0xfffeffff00000200
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000100, 0xfffeffff00000200, x3, 568, x9)

inst_89:
// rs2_w0_val == 4, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000000e;  op2val:0x4000000000000004
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x100000000000000e, 0x4000000000000004, x3, 576, x9)

inst_90:
// rs2_w0_val == 1, rs1_w1_val == 4294443007
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff20000000;  op2val:0x00000200000001
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff20000000, 0x00000200000001, x3, 584, x9)

inst_91:
// rs1_w1_val == 1431655765, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000000;  op2val:0xffffffbf00080000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x5555555500000000, 0xffffffbf00080000, x3, 592, x9)

inst_92:
// rs1_w1_val == 4261412863, rs1_w0_val == 4278190079
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffeffffff;  op2val:0x00000000000012
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfdfffffffeffffff, 0x00000000000012, x3, 600, x9)

inst_93:
// rs1_w1_val == 4292870143, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffffdff;  op2val:0xfbffffffffffbfff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffdffffffffffdff, 0xfbffffffffffbfff, x3, 608, x9)

inst_94:
// rs1_w1_val == 4293918719, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffbff;  op2val:0x00000600000000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffbff, 0x00000600000000, x3, 616, x9)

inst_95:
// rs1_w1_val == 4294836223, rs1_w0_val == 4294443007
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffff7ffff;  op2val:0x00001100000011
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfffdfffffff7ffff, 0x00001100000011, x3, 624, x9)

inst_96:
// rs1_w1_val == 4294901759, rs2_w0_val == 4294967039
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00001000;  op2val:0xffffbffffffffeff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00001000, 0xffffbffffffffeff, x3, 632, x9)

inst_97:
// rs1_w1_val == 4294959103, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff0000000b;  op2val:0x000080fffbffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffffdfff0000000b, 0x000080fffbffff, x3, 640, x9)

inst_98:
// rs1_w1_val == 4294963199, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff20000000;  op2val:0x000010fdffffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffffefff20000000, 0x000010fdffffff, x3, 648, x9)

inst_99:
// rs1_w1_val == 4294965247, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffffdf;  op2val:0x000800ffffffdf
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffffdf, 0x000800ffffffdf, x3, 656, x9)

inst_100:
// rs1_w1_val == 4294967291, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000010;  op2val:0x10000000000007
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000010, 0x10000000000007, x3, 664, x9)

inst_101:
// rs1_w1_val == 2147483648, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000000e;  op2val:0x0080000000000b
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x800000000000000e, 0x0080000000000b, x3, 672, x9)

inst_102:
// rs1_w1_val == 1073741824, rs1_w0_val == 1431655765
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000055555555;  op2val:0xffdffffffffffffd
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x4000000055555555, 0xffdffffffffffffd, x3, 680, x9)

inst_103:
// rs1_w1_val == 67108864, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffeff;  op2val:0xffffbfff00000003
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x4000000fffffeff, 0xffffbfff00000003, x3, 688, x9)

inst_104:
// rs1_w1_val == 33554432, rs2_w0_val == 4290772991
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000000a;  op2val:0xfffdffffffbfffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x20000000000000a, 0xfffdffffffbfffff, x3, 696, x9)

inst_105:
// rs1_w1_val == 8388608, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffdffff;  op2val:0x00000f00800000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x800000fffdffff, 0x00000f00800000, x3, 704, x9)

inst_106:
// rs1_w1_val == 2097152, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000004000;  op2val:0x02000000000007
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x20000000004000, 0x02000000000007, x3, 712, x9)

inst_107:
// rs1_w1_val == 524288, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000002;  op2val:0x00800000000400
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x08000000000002, 0x00800000000400, x3, 720, x9)

inst_108:
// rs1_w1_val == 262144, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000008000000;  op2val:0x00000120000000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x04000008000000, 0x00000120000000, x3, 728, x9)

inst_109:
// rs1_w1_val == 65536, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000008000000;  op2val:0xfffffffefbffffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x01000008000000, 0xfffffffefbffffff, x3, 736, x9)

inst_110:
// rs1_w1_val == 4096, rs1_w0_val == 4292870143
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffdfffff;  op2val:0x200000fffff7ff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x001000ffdfffff, 0x200000fffff7ff, x3, 744, x9)

inst_111:
// rs1_w1_val == 2048, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000005;  op2val:0xffefffff00000080
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00080000000005, 0xffefffff00000080, x3, 752, x9)

inst_112:
// rs1_w1_val == 512, rs2_w0_val == 4292870143
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000200;  op2val:0x000009ffdfffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00020000000200, 0x000009ffdfffff, x3, 760, x9)

inst_113:
// rs1_w1_val == 32, rs2_w0_val == 134217728
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002008000000;  op2val:0x00000208000000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00002008000000, 0x00000208000000, x3, 768, x9)

inst_114:
// rs1_w1_val == 8, rs2_w0_val == 1073741824
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffffeff;  op2val:0x00000b40000000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x000008fffffeff, 0x00000b40000000, x3, 776, x9)

inst_115:
// rs1_w1_val == 4, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000040000000d;  op2val:0xffffffeffeffffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x0000040000000d, 0xffffffeffeffffff, x3, 784, x9)

inst_116:
// rs1_w1_val == 2, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000020000000b;  op2val:0x00000dfffffff7
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x0000020000000b, 0x00000dfffffff7, x3, 792, x9)

inst_117:
// rs1_w1_val == 1, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100001000;  op2val:0x008000fffbffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00000100001000, 0x008000fffbffff, x3, 800, x9)

inst_118:
// rs1_w1_val == 4294967295, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffdfff;  op2val:0x00010000000012
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffffffffffffdfff, 0x00010000000012, x3, 808, x9)

inst_119:
// rs1_w0_val == 2863311530, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7aaaaaaaa;  op2val:0xffdfffff0000000e
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfffffff7aaaaaaaa, 0xffdfffff0000000e, x3, 816, x9)

inst_120:
// rs2_w0_val == 4294443007, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000010;  op2val:0xfffffffdfff7ffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffffefff00000010, 0xfffffffdfff7ffff, x3, 824, x9)

inst_121:
// rs2_w0_val == 4294836223, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffdfffff;  op2val:0xfffffff7fffdffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffffefffffdfffff, 0xfffffff7fffdffff, x3, 832, x9)

inst_122:
// rs2_w0_val == 4294901759, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00008000;  op2val:0x000010fffeffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00008000, 0x000010fffeffff, x3, 840, x9)

inst_123:
// rs1_w0_val == 4290772991, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x000013ffbfffff;  op2val:0x000001fffeffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x000013ffbfffff, 0x000001fffeffff, x3, 848, x9)

inst_124:
// rs2_w0_val == 4294966271, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000fffbfffff;  op2val:0xffffffeffffffbff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00000fffbfffff, 0xffffffeffffffbff, x3, 856, x9)

inst_125:
// rs2_w0_val == 4294966783, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000400;  op2val:0x20000000fffffdff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00000800000400, 0x20000000fffffdff, x3, 864, x9)

inst_126:
// rs1_w0_val == 4294963199, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffefff;  op2val:0x8000000fffffdff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffefff, 0x8000000fffffdff, x3, 872, x9)

inst_127:
// rs1_w0_val == 4294965247, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffff7ff;  op2val:0x2000000000000013
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffeffffffffff7ff, 0x2000000000000013, x3, 880, x9)

inst_128:
// rs1_w0_val == 4294967167, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x000011ffffff7f;  op2val:0x00008080000000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x000011ffffff7f, 0x00008080000000, x3, 888, x9)

inst_129:
// rs2_w0_val == 32768, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffffffff;  op2val:0xffffffef00008000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffffffdfffffffff, 0xffffffef00008000, x3, 896, x9)

inst_130:
// rs1_w0_val == 4294967231, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffffffbf;  op2val:0x00002000800000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffffffbf, 0x00002000800000, x3, 904, x9)

inst_131:
// rs2_w0_val == 33554432, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800080000;  op2val:0xbfffffff02000000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00000800080000, 0xbfffffff02000000, x3, 912, x9)

inst_132:
// rs1_w0_val == 268435456, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001010000000;  op2val:0xfffdffff00000002
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00001010000000, 0xfffdffff00000002, x3, 920, x9)

inst_133:
// rs2_w0_val == 4294963199, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000077fffffff;  op2val:0x2000000ffffefff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x0000077fffffff, 0x2000000ffffefff, x3, 928, x9)

inst_134:
// rs1_w0_val == 1048576, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000100000;  op2val:0x000001ff7fffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00004000100000, 0x000001ff7fffff, x3, 936, x9)

inst_135:
// rs2_w0_val == 4096, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefff7ffff;  op2val:0x00000700001000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xfffffffefff7ffff, 0x00000700001000, x3, 944, x9)

inst_136:
// rs1_w0_val == 8388608, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000800000;  op2val:0x00000710000000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x20000000800000, 0x00000710000000, x3, 952, x9)

inst_137:
// rs2_w0_val == 16384, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000d08000000;  op2val:0x20000000004000
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x00000d08000000, 0x20000000004000, x3, 960, x9)

inst_138:
// rs1_w0_val == 4293918719, 
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005ffefffff;  op2val:0x00002000000006
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x000005ffefffff, 0x00002000000006, x3, 968, x9)

inst_139:
// rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 4227858431, rs2_w1_val == 524288, rs1_w0_val == 4227858431, rs1_w1_val == 2147483647
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffbffffff;  op2val:0x080000fbffffff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x7ffffffffbffffff, 0x080000fbffffff, x3, 976, x9)

inst_140:
// rs2_w1_val == 3221225471, rs2_w0_val == 4294934527, rs1_w0_val == 1073741824, rs1_w1_val == 4294967167
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f40000000;  op2val:0xbfffffffffff7fff
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0xffffff7f40000000, 0xbfffffffffff7fff, x3, 984, x9)

inst_141:
// rs2_w1_val == 4293918719, rs1_w1_val == 1048576, rs2_w0_val == 4294967287
// opcode: umin32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000006;  op2val:0xffeffffffffffff7
TEST_RR_OP(umin32, x31, x30, x29, 0x0000000000000000, 0x10000000000006, 0xffeffffffffffff7, x3, 992, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 125*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
