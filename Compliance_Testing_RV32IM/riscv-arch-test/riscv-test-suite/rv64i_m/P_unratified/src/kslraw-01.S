
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kslraw instruction of the RISC-V RV64PZicsr extension for the kslraw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kslraw)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x21,signature_x21_1)

inst_0:
// rs1 == rd != rs2, rs1==x17, rs2==x20, rd==x17, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w1_val == 67108864
// opcode: kslraw ; op1:x17; op2:x20; dest:x17; op1val:0xc000000080000000;  op2val:0x40000003fffffff
TEST_PKRR_OP(kslraw, x17, x17, x20, 0x0000000000000000, 0xc000000080000000, 0x40000003fffffff, x17, x21, 0, x22)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x29, rs2==x1, rd==x0, rs1_w1_val == rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val == -65537, rs2_w1_val == 4, rs2_w0_val == 2147483647, rs1_w1_val == 4
// opcode: kslraw ; op1:x29; op2:x1; dest:x0; op1val:0x000004fffeffff;  op2val:0x0000047fffffff
TEST_PKRR_OP(kslraw, x0, x29, x1, 0x0000000000000000, 0x000004fffeffff, 0x0000047fffffff, x29, x21, 16, x22)

inst_2:
// rs1 == rs2 != rd, rs1==x7, rs2==x7, rd==x11, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w1_val == -2097153, rs1_w0_val == rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w0_val == -1073741825, rs2_w0_val == -1073741825, rs2_w1_val == -262145
// opcode: kslraw ; op1:x7; op2:x7; dest:x11; op1val:0xffdfffffbfffffff;  op2val:0xfffbffffbfffffff
TEST_PKRR_OP(kslraw, x11, x7, x7, 0x0000000000000000, 0xffdfffffbfffffff, 0xfffbffffbfffffff, x7, x21, 32, x22)

inst_3:
// rs1 == rs2 == rd, rs1==x16, rs2==x16, rd==x16, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val == -5, rs1_w1_val == 4096
// opcode: kslraw ; op1:x16; op2:x16; dest:x16; op1val:0x001000fffffffb;  op2val:0xfffffff6c0000000
TEST_PKRR_OP(kslraw, x16, x16, x16, 0x0000000000000000, 0x001000fffffffb, 0xfffffff6c0000000, x16, x21, 48, x22)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x23, rd==x23, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w1_val == -16385, rs1_w0_val == 256, rs2_w0_val == -16777217
// opcode: kslraw ; op1:x5; op2:x23; dest:x23; op1val:0x00000600000100;  op2val:0xffffbffffeffffff
TEST_PKRR_OP(kslraw, x23, x5, x23, 0x0000000000000000, 0x00000600000100, 0xffffbffffeffffff, x5, x21, 64, x22)

inst_5:
// rs1==x1, rs2==x4, rd==x15, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 4, rs2_w1_val == 4096, rs1_w0_val == 8388608, rs1_w1_val == 512
// opcode: kslraw ; op1:x1; op2:x4; dest:x15; op1val:0x00020000800000;  op2val:0x00100000000004
TEST_PKRR_OP(kslraw, x15, x1, x4, 0x0000000000000000, 0x00020000800000, 0x00100000000004, x1, x21, 80, x22)

inst_6:
// rs1==x8, rs2==x15, rd==x7, rs2_w1_val == -1431655766, rs1_w0_val == 512, rs2_w0_val == -4097
// opcode: kslraw ; op1:x8; op2:x15; dest:x7; op1val:0xfffffff800000200;  op2val:0xaaaaaaaaffffefff
TEST_PKRR_OP(kslraw, x7, x8, x15, 0x0000000000000000, 0xfffffff800000200, 0xaaaaaaaaffffefff, x8, x21, 96, x22)

inst_7:
// rs1==x28, rs2==x0, rd==x29, rs2_w1_val == 1431655765, rs1_w1_val == -33, rs2_w0_val == 8388608
// opcode: kslraw ; op1:x28; op2:x0; dest:x29; op1val:0xffffffdf00000003;  op2val:0x5555555500800000
TEST_PKRR_OP(kslraw, x29, x28, x0, 0x0000000000000000, 0xffffffdf00000003, 0x5555555500800000, x28, x21, 112, x22)

inst_8:
// rs1==x24, rs2==x2, rd==x14, rs2_w1_val == 2147483647, rs1_w0_val == 1073741824, rs2_w0_val == 4096, rs1_w1_val == 128
// opcode: kslraw ; op1:x24; op2:x2; dest:x14; op1val:0x00008040000000;  op2val:0x7fffffff00001000
TEST_PKRR_OP(kslraw, x14, x24, x2, 0x0000000000000000, 0x00008040000000, 0x7fffffff00001000, x24, x21, 128, x22)

inst_9:
// rs1==x27, rs2==x28, rd==x18, rs2_w1_val == -1073741825, rs2_w0_val == 512, rs1_w1_val == -257, rs1_w0_val == 16777216
// opcode: kslraw ; op1:x27; op2:x28; dest:x18; op1val:0xfffffeff01000000;  op2val:0xbfffffff00000200
TEST_PKRR_OP(kslraw, x18, x27, x28, 0x0000000000000000, 0xfffffeff01000000, 0xbfffffff00000200, x27, x21, 144, x22)

inst_10:
// rs1==x9, rs2==x27, rd==x26, rs2_w1_val == -536870913, rs1_w0_val == 1024, rs1_w1_val == -1431655766, rs2_w0_val == -2049
// opcode: kslraw ; op1:x9; op2:x27; dest:x26; op1val:0xaaaaaaaa00000400;  op2val:0xdffffffffffff7ff
TEST_PKRR_OP(kslraw, x26, x9, x27, 0x0000000000000000, 0xaaaaaaaa00000400, 0xdffffffffffff7ff, x9, x21, 160, x22)

inst_11:
// rs1==x30, rs2==x26, rd==x5, rs2_w1_val == -268435457, rs1_w0_val == -3, rs2_w0_val == 8192
// opcode: kslraw ; op1:x30; op2:x26; dest:x5; op1val:0x000200fffffffd;  op2val:0xefffffff00002000
TEST_PKRR_OP(kslraw, x5, x30, x26, 0x0000000000000000, 0x000200fffffffd, 0xefffffff00002000, x30, x21, 176, x22)

inst_12:
// rs1==x31, rs2==x18, rd==x13, rs2_w1_val == -134217729, rs2_w0_val == 2, rs1_w1_val == -3
// opcode: kslraw ; op1:x31; op2:x18; dest:x13; op1val:0xfffffffd00000007;  op2val:0xf7ffffff00000002
TEST_PKRR_OP(kslraw, x13, x31, x18, 0x0000000000000000, 0xfffffffd00000007, 0xf7ffffff00000002, x31, x21, 192, x22)

inst_13:
// rs1==x6, rs2==x3, rd==x1, rs2_w1_val == -67108865, rs1_w1_val == 2147483647, rs1_w0_val == -1025, rs2_w0_val == -134217729
// opcode: kslraw ; op1:x6; op2:x3; dest:x1; op1val:0x7ffffffffffffbff;  op2val:0xfbfffffff7ffffff
TEST_PKRR_OP(kslraw, x1, x6, x3, 0x0000000000000000, 0x7ffffffffffffbff, 0xfbfffffff7ffffff, x6, x21, 208, x22)

inst_14:
// rs1==x10, rs2==x19, rd==x12, rs2_w1_val == -33554433, rs2_w0_val == 128, rs1_w1_val == -524289, rs1_w0_val == 67108864
// opcode: kslraw ; op1:x10; op2:x19; dest:x12; op1val:0xfff7ffff04000000;  op2val:0xfdffffff00000080
TEST_PKRR_OP(kslraw, x12, x10, x19, 0x0000000000000000, 0xfff7ffff04000000, 0xfdffffff00000080, x10, x21, 224, x22)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_15:
// rs1==x2, rs2==x29, rd==x21, rs2_w1_val == -16777217, rs1_w0_val == -33554433, rs1_w1_val == -2049, rs2_w0_val == -17
// opcode: kslraw ; op1:x2; op2:x29; dest:x21; op1val:0xfffff7fffdffffff;  op2val:0xfeffffffffffffef
TEST_PKRR_OP(kslraw, x21, x2, x29, 0x0000000000000000, 0xfffff7fffdffffff, 0xfeffffffffffffef, x2, x1, 0, x7)

inst_16:
// rs1==x21, rs2==x10, rd==x25, rs2_w1_val == -8388609, rs2_w0_val == -1431655766, rs1_w1_val == 1024, rs1_w0_val == 1048576
// opcode: kslraw ; op1:x21; op2:x10; dest:x25; op1val:0x00040000100000;  op2val:0xff7fffffaaaaaaaa
TEST_PKRR_OP(kslraw, x25, x21, x10, 0x0000000000000000, 0x00040000100000, 0xff7fffffaaaaaaaa, x21, x1, 16, x7)

inst_17:
// rs1==x19, rs2==x25, rd==x20, rs2_w1_val == -4194305, rs1_w1_val == 32, rs2_w0_val == -2097153
// opcode: kslraw ; op1:x19; op2:x25; dest:x20; op1val:0x0000203fffffff;  op2val:0xffbfffffffdfffff
TEST_PKRR_OP(kslraw, x20, x19, x25, 0x0000000000000000, 0x0000203fffffff, 0xffbfffffffdfffff, x19, x1, 32, x7)

inst_18:
// rs1==x11, rs2==x9, rd==x4, rs2_w1_val == -2097153, rs1_w1_val == -536870913
// opcode: kslraw ; op1:x11; op2:x9; dest:x4; op1val:0xdffffffffffffff6;  op2val:0xffdfffffffdfffff
TEST_PKRR_OP(kslraw, x4, x11, x9, 0x0000000000000000, 0xdffffffffffffff6, 0xffdfffffffdfffff, x11, x1, 48, x7)

inst_19:
// rs1==x0, rs2==x14, rd==x10, rs2_w1_val == -1048577, rs2_w0_val == 0
// opcode: kslraw ; op1:x0; op2:x14; dest:x10; op1val:0x3fffffff3fffffff;  op2val:0xffefffff00000000
TEST_PKRR_OP(kslraw, x10, x0, x14, 0x0000000000000000, 0x3fffffff3fffffff, 0xffefffff00000000, x0, x1, 64, x7)

inst_20:
// rs1==x4, rs2==x6, rd==x3, rs2_w1_val == -524289, rs1_w1_val == -268435457, rs1_w0_val == -2097153
// opcode: kslraw ; op1:x4; op2:x6; dest:x3; op1val:0xefffffffffdfffff;  op2val:0xfff7fffffffffff9
TEST_PKRR_OP(kslraw, x3, x4, x6, 0x0000000000000000, 0xefffffffffdfffff, 0xfff7fffffffffff9, x4, x1, 80, x7)

inst_21:
// rs1==x12, rs2==x17, rd==x8, rs2_w1_val == -131073, rs1_w1_val == 64, rs2_w0_val == -33554433
// opcode: kslraw ; op1:x12; op2:x17; dest:x8; op1val:0x00004004000000;  op2val:0xfffdfffffdffffff
TEST_PKRR_OP(kslraw, x8, x12, x17, 0x0000000000000000, 0x00004004000000, 0xfffdfffffdffffff, x12, x1, 96, x7)

inst_22:
// rs1==x20, rs2==x30, rd==x28, rs2_w1_val == -65537, rs1_w0_val == 64, rs2_w0_val == -32769
// opcode: kslraw ; op1:x20; op2:x30; dest:x28; op1val:0x00008000000040;  op2val:0xfffeffffffff7fff
TEST_PKRR_OP(kslraw, x28, x20, x30, 0x0000000000000000, 0x00008000000040, 0xfffeffffffff7fff, x20, x1, 112, x7)

inst_23:
// rs1==x18, rs2==x31, rd==x9, rs2_w1_val == -32769, rs1_w1_val == -8193, rs1_w0_val == -268435457
// opcode: kslraw ; op1:x18; op2:x31; dest:x9; op1val:0xffffdfffefffffff;  op2val:0xffff7ffffeffffff
TEST_PKRR_OP(kslraw, x9, x18, x31, 0x0000000000000000, 0xffffdfffefffffff, 0xffff7ffffeffffff, x18, x1, 128, x7)

inst_24:
// rs1==x25, rs2==x21, rd==x27, rs2_w1_val == -8193, rs1_w0_val == -8193
// opcode: kslraw ; op1:x25; op2:x21; dest:x27; op1val:0x000003ffffdfff;  op2val:0xffffdffffffffff6
TEST_PKRR_OP(kslraw, x27, x25, x21, 0x0000000000000000, 0x000003ffffdfff, 0xffffdffffffffff6, x25, x1, 144, x7)

inst_25:
// rs1==x26, rs2==x5, rd==x22, rs2_w1_val == -4097, rs1_w1_val == 65536, rs1_w0_val == 2048
// opcode: kslraw ; op1:x26; op2:x5; dest:x22; op1val:0x01000000000800;  op2val:0xffffefff00000002
TEST_PKRR_OP(kslraw, x22, x26, x5, 0x0000000000000000, 0x01000000000800, 0xffffefff00000002, x26, x1, 160, x7)

inst_26:
// rs1==x14, rs2==x13, rd==x19, rs2_w1_val == -2049, rs1_w0_val == 268435456
// opcode: kslraw ; op1:x14; op2:x13; dest:x19; op1val:0xdfffffff10000000;  op2val:0xfffff7ff00000003
TEST_PKRR_OP(kslraw, x19, x14, x13, 0x0000000000000000, 0xdfffffff10000000, 0xfffff7ff00000003, x14, x1, 176, x7)

inst_27:
// rs1==x13, rs2==x11, rd==x24, rs2_w1_val == -1025, rs2_w0_val == 4194304, rs1_w0_val == -2049
// opcode: kslraw ; op1:x13; op2:x11; dest:x24; op1val:0x000003fffff7ff;  op2val:0xfffffbff00400000
TEST_PKRR_OP(kslraw, x24, x13, x11, 0x0000000000000000, 0x000003fffff7ff, 0xfffffbff00400000, x13, x1, 192, x7)

inst_28:
// rs1==x3, rs2==x22, rd==x2, rs2_w1_val == -513, rs2_w0_val == -33, rs1_w1_val == -129
// opcode: kslraw ; op1:x3; op2:x22; dest:x2; op1val:0xffffff7fbfffffff;  op2val:0xfffffdffffffffdf
TEST_PKRR_OP(kslraw, x2, x3, x22, 0x0000000000000000, 0xffffff7fbfffffff, 0xfffffdffffffffdf, x3, x1, 208, x4)

inst_29:
// rs1==x22, rs2==x24, rd==x31, rs2_w1_val == -257, rs1_w1_val == 8, rs2_w0_val == 536870912, rs1_w0_val == -17
// opcode: kslraw ; op1:x22; op2:x24; dest:x31; op1val:0x000008ffffffef;  op2val:0xfffffeff20000000
TEST_PKRR_OP(kslraw, x31, x22, x24, 0x0000000000000000, 0x000008ffffffef, 0xfffffeff20000000, x22, x1, 224, x4)

inst_30:
// rs1==x15, rs2==x12, rd==x30, rs2_w1_val == -129, rs2_w0_val == -1025, rs1_w1_val == 1073741824
// opcode: kslraw ; op1:x15; op2:x12; dest:x30; op1val:0x40000000ffffffef;  op2val:0xffffff7ffffffbff
TEST_PKRR_OP(kslraw, x30, x15, x12, 0x0000000000000000, 0x40000000ffffffef, 0xffffff7ffffffbff, x15, x1, 240, x4)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_31:
// rs1==x23, rs2==x8, rd==x6, rs2_w1_val == -65, rs1_w1_val == -33554433
// opcode: kslraw ; op1:x23; op2:x8; dest:x6; op1val:0xfdffffff00000007;  op2val:0xffffffbfffff7fff
TEST_PKRR_OP(kslraw, x6, x23, x8, 0x0000000000000000, 0xfdffffff00000007, 0xffffffbfffff7fff, x23, x1, 0, x4)

inst_32:
// rs2_w1_val == -33, rs1_w1_val == 8192, rs2_w0_val == 1073741824
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000040;  op2val:0xffffffdf40000000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x00200000000040, 0xffffffdf40000000, x30, x1, 16, x4)

inst_33:
// rs2_w1_val == -17, rs1_w1_val == 16
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x00001010000000;  op2val:0xffffffef00000002
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x00001010000000, 0xffffffef00000002, x30, x1, 32, x4)

inst_34:
// rs2_w1_val == -9, rs1_w0_val == -1431655766, rs1_w1_val == -67108865
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffaaaaaaaa;  op2val:0xfffffff7ffffefff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfbffffffaaaaaaaa, 0xfffffff7ffffefff, x30, x1, 48, x4)

inst_35:
// rs2_w1_val == -5, rs1_w0_val == 65536
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000010000;  op2val:0xfffffffbfffffff8
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xc000000000010000, 0xfffffffbfffffff8, x30, x1, 64, x4)

inst_36:
// rs2_w1_val == -3, rs1_w1_val == 4194304, rs1_w0_val == 524288
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x40000000080000;  op2val:0xfffffffd20000000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x40000000080000, 0xfffffffd20000000, x30, x1, 80, x4)

inst_37:
// rs2_w1_val == -2, rs2_w0_val == 16777216, rs1_w1_val == -513
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000040;  op2val:0xfffffffe01000000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000040, 0xfffffffe01000000, x30, x1, 96, x4)

inst_38:
// rs2_w1_val == -2147483648, rs2_w0_val == -257, rs1_w1_val == 256, rs1_w0_val == 134217728
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x00010008000000;  op2val:0x80000000fffffeff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x00010008000000, 0x80000000fffffeff, x30, x1, 112, x4)

inst_39:
// rs2_w1_val == 1073741824, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfdffffff;  op2val:0x4000000000000005
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfffffffdfdffffff, 0x4000000000000005, x30, x1, 128, x4)

inst_40:
// rs2_w1_val == 536870912, rs1_w1_val == -1
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffff8;  op2val:0x2000000000000080
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffff8, 0x2000000000000080, x30, x1, 144, x4)

inst_41:
// rs2_w1_val == 268435456, rs1_w1_val == 16777216
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffffd;  op2val:0x10000000fffffffa
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x1000000fffffffd, 0x10000000fffffffa, x30, x1, 160, x4)

inst_42:
// rs2_w1_val == 134217728, rs2_w0_val == 33554432, rs1_w1_val == -9
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7efffffff;  op2val:0x800000002000000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfffffff7efffffff, 0x800000002000000, x30, x1, 176, x4)

inst_43:
// rs2_w1_val == 33554432, rs1_w0_val == 0, rs2_w0_val == 2097152
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000000;  op2val:0x200000000200000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x01000000000000, 0x200000000200000, x30, x1, 192, x4)

inst_44:
// rs2_w1_val == 16777216, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffdfffff;  op2val:0x1000000fffffffc
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xdfffffffffdfffff, 0x1000000fffffffc, x30, x1, 208, x4)

inst_45:
// rs2_w1_val == 8388608, rs1_w0_val == 32768
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x00000400008000;  op2val:0x800000fffffbff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x00000400008000, 0x800000fffffbff, x30, x1, 224, x4)

inst_46:
// rs2_w1_val == 4194304, rs1_w0_val == -16777217, rs2_w0_val == -524289
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffeffffff;  op2val:0x400000fff7ffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xdffffffffeffffff, 0x400000fff7ffff, x30, x1, 240, x4)

inst_47:
// rs2_w1_val == 2097152, rs1_w1_val == 67108864
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000100;  op2val:0x20000020000000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x400000000000100, 0x20000020000000, x30, x1, 256, x4)

inst_48:
// rs2_w1_val == 1048576, rs1_w1_val == -17, rs2_w0_val == -129
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000100;  op2val:0x100000ffffff7f
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xffffffef00000100, 0x100000ffffff7f, x30, x1, 272, x4)

inst_49:
// rs2_w1_val == 524288, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffffffb;  op2val:0x0800007fffffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x000008fffffffb, 0x0800007fffffff, x30, x1, 288, x4)

inst_50:
// rs2_w1_val == 262144, rs1_w0_val == 33554432
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x00200002000000;  op2val:0x04000000000005
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x00200002000000, 0x04000000000005, x30, x1, 304, x4)

inst_51:
// rs2_w1_val == 131072, rs1_w1_val == 2048, rs2_w0_val == 2048
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffffffa;  op2val:0x02000000000800
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x000800fffffffa, 0x02000000000800, x30, x1, 320, x4)

inst_52:
// rs1_w0_val == 4194304, rs2_w0_val == -8193
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x00008000400000;  op2val:0xbfffffffffffdfff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x00008000400000, 0xbfffffffffffdfff, x30, x1, 336, x4)

inst_53:
// rs1_w0_val == 2097152, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x400000000200000;  op2val:0x080000aaaaaaaa
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x400000000200000, 0x080000aaaaaaaa, x30, x1, 352, x4)

inst_54:
// rs1_w0_val == 262144, rs2_w0_val == 1024, rs1_w1_val == -32769
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00040000;  op2val:0xfffffff900000400
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xffff7fff00040000, 0xfffffff900000400, x30, x1, 368, x4)

inst_55:
// rs1_w0_val == 131072, rs2_w1_val == -1, rs1_w1_val == 16384, rs2_w0_val == 524288
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x00400000020000;  op2val:0xffffffff00080000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x00400000020000, 0xffffffff00080000, x30, x1, 384, x4)

inst_56:
// rs1_w0_val == 16384, rs1_w1_val == -1025
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00004000;  op2val:0x100000fffffeff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfffffbff00004000, 0x100000fffffeff, x30, x1, 400, x4)

inst_57:
// rs1_w0_val == 8192, rs2_w0_val == -268435457
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00002000;  op2val:0x4000000efffffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x7fffffff00002000, 0x4000000efffffff, x30, x1, 416, x4)

inst_58:
// rs1_w0_val == 4096, rs2_w1_val == 64, rs1_w1_val == -1048577
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00001000;  op2val:0x000040fff7ffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xffefffff00001000, 0x000040fff7ffff, x30, x1, 432, x4)

inst_59:
// rs1_w0_val == 128, rs2_w0_val == -131073
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000080;  op2val:0xfffffffafffdffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000080, 0xfffffffafffdffff, x30, x1, 448, x4)

inst_60:
// rs1_w0_val == 32, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000020;  op2val:0x1000000fffffff9
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000020, 0x1000000fffffff9, x30, x1, 464, x4)

inst_61:
// rs1_w0_val == 16, rs2_w0_val == -1, rs2_w1_val == 32768
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000010;  op2val:0x008000ffffffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfffffff800000010, 0x008000ffffffff, x30, x1, 480, x4)

inst_62:
// rs1_w0_val == 8, rs1_w1_val == -262145
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000008;  op2val:0x2000000000000003
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000008, 0x2000000000000003, x30, x1, 496, x4)

inst_63:
// rs1_w0_val == 4, rs1_w1_val == -4097
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000004;  op2val:0xfffffbfffffffff9
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xffffefff00000004, 0xfffffbfffffffff9, x30, x1, 512, x4)

inst_64:
// rs1_w0_val == 2, rs2_w0_val == 64
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000002;  op2val:0xfffffffd00000040
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xc000000000000002, 0xfffffffd00000040, x30, x1, 528, x4)

inst_65:
// rs1_w0_val == 1, rs1_w1_val == 0, rs2_w1_val == 0
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000001;  op2val:0x00000000000004
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x00000000000001, 0x00000000000004, x30, x1, 544, x4)

inst_66:
// rs1_w0_val == -1, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x000200ffffffff;  op2val:0xfffffffdf7ffffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x000200ffffffff, 0xfffffffdf7ffffff, x30, x1, 560, x4)

inst_67:
// rs2_w1_val == 65536, rs2_w0_val == 8
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffffff9;  op2val:0x01000000000008
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x001000fffffff9, 0x01000000000008, x30, x1, 576, x4)

inst_68:
// rs2_w1_val == 16384, rs1_w1_val == -16385, rs2_w0_val == -9
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00040000;  op2val:0x004000fffffff7
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xffffbfff00040000, 0x004000fffffff7, x30, x1, 592, x4)

inst_69:
// rs2_w1_val == 8192, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800008000;  op2val:0x002000fffffffc
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfffffff800008000, 0x002000fffffffc, x30, x1, 608, x4)

inst_70:
// rs2_w1_val == 2048, rs2_w0_val == -262145
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000008;  op2val:0x000800fffbffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x00200000000008, 0x000800fffbffff, x30, x1, 624, x4)

inst_71:
// rs2_w1_val == 1024, rs1_w1_val == 536870912
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000040000;  op2val:0x000400fffffffc
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x2000000000040000, 0x000400fffffffc, x30, x1, 640, x4)

inst_72:
// rs2_w1_val == 512, rs2_w0_val == 32768
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00001000;  op2val:0x00020000008000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xdfffffff00001000, 0x00020000008000, x30, x1, 656, x4)

inst_73:
// rs2_w1_val == 256, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000800;  op2val:0x000100fffffff8
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x00200000000800, 0x000100fffffff8, x30, x1, 672, x4)

inst_74:
// rs2_w1_val == 128, rs2_w0_val == 32
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00040000;  op2val:0x00008000000020
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xffefffff00040000, 0x00008000000020, x30, x1, 688, x4)

inst_75:
// rs2_w1_val == 32, rs2_w0_val == 16384, rs1_w1_val == 8388608
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x80000010000000;  op2val:0x00002000004000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x80000010000000, 0x00002000004000, x30, x1, 704, x4)

inst_76:
// rs2_w1_val == 16, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffffffc;  op2val:0x000010ffffffef
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffffffc, 0x000010ffffffef, x30, x1, 720, x4)

inst_77:
// rs2_w1_val == 8, rs2_w0_val == -65537
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000006;  op2val:0x000008fffeffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x00002000000006, 0x000008fffeffff, x30, x1, 736, x4)

inst_78:
// rs2_w1_val == 2, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000007;  op2val:0x00000200001000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x4000000000000007, 0x00000200001000, x30, x1, 752, x4)

inst_79:
// rs2_w1_val == 1, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fdffffff;  op2val:0x00000100200000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x20000000fdffffff, 0x00000100200000, x30, x1, 768, x4)

inst_80:
// rs2_w0_val == 1431655765, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff3fffffff;  op2val:0x8000000055555555
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xffdfffff3fffffff, 0x8000000055555555, x30, x1, 784, x4)

inst_81:
// rs2_w0_val == -536870913, rs1_w0_val == -8388609, rs1_w1_val == 262144
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x040000ff7fffff;  op2val:0xfffffff8dfffffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x040000ff7fffff, 0xfffffff8dfffffff, x30, x1, 800, x4)

inst_82:
// rs2_w0_val == -67108865, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffffbff;  op2val:0x000001fbffffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffbff, 0x000001fbffffff, x30, x1, 816, x4)

inst_83:
// rs2_w0_val == 262144, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000007;  op2val:0x2000000000040000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000007, 0x2000000000040000, x30, x1, 832, x4)

inst_84:
// rs2_w0_val == 131072, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x00400000000002;  op2val:0x02000000020000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x00400000000002, 0x02000000020000, x30, x1, 848, x4)

inst_85:
// rs2_w0_val == 65536, rs1_w0_val == -65
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffffbf;  op2val:0xbfffffff00010000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffffbf, 0xbfffffff00010000, x30, x1, 864, x4)

inst_86:
// rs2_w0_val == 256, rs1_w1_val == 134217728
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000040;  op2val:0x2000000000000100
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x800000000000040, 0x2000000000000100, x30, x1, 880, x4)

inst_87:
// rs2_w0_val == 16, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00004000;  op2val:0x02000000000010
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xffffdfff00004000, 0x02000000000010, x30, x1, 896, x4)

inst_88:
// rs2_w0_val == 1, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x00400000001000;  op2val:0x00800000000001
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x00400000001000, 0x00800000000001, x30, x1, 912, x4)

inst_89:
// rs1_w1_val == 1431655765, rs2_w0_val == -5, rs1_w0_val == -9
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fffffff7;  op2val:0x40000000fffffffb
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x55555555fffffff7, 0x40000000fffffffb, x30, x1, 928, x4)

inst_90:
// rs1_w1_val == -1073741825, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00010000;  op2val:0x2000000ffffffdf
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xbfffffff00010000, 0x2000000ffffffdf, x30, x1, 944, x4)

inst_91:
// rs1_w1_val == -134217729, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00020000;  op2val:0xffff7fff00000009
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00020000, 0xffff7fff00000009, x30, x1, 960, x4)

inst_92:
// rs1_w1_val == -16777217, rs2_w0_val == -2, rs1_w0_val == -4194305
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffbfffff;  op2val:0x000000fffffffe
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfeffffffffbfffff, 0x000000fffffffe, x30, x1, 976, x4)

inst_93:
// rs1_w1_val == -8388609, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffefffffff;  op2val:0xfffdffff01000000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xff7fffffefffffff, 0xfffdffff01000000, x30, x1, 992, x4)

inst_94:
// rs1_w1_val == -4194305, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000040;  op2val:0x2000000fffeffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000040, 0x2000000fffeffff, x30, x1, 1008, x4)

inst_95:
// rs1_w1_val == -131073, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff04000000;  op2val:0xefffffff00040000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfffdffff04000000, 0xefffffff00040000, x30, x1, 1024, x4)

inst_96:
// rs1_w1_val == -65537, rs1_w0_val == -257
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffffffeff;  op2val:0xffbfffff00000080
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfffefffffffffeff, 0xffbfffff00000080, x30, x1, 1040, x4)

inst_97:
// rs1_w1_val == -65, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000080;  op2val:0xffeffffffffffeff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000080, 0xffeffffffffffeff, x30, x1, 1056, x4)

inst_98:
// rs1_w1_val == -5, rs1_w0_val == -536870913
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbdfffffff;  op2val:0x000008fffffffb
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfffffffbdfffffff, 0x000008fffffffb, x30, x1, 1072, x4)

inst_99:
// rs1_w1_val == -2, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe80000000;  op2val:0x2000000ffffff7f
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfffffffe80000000, 0x2000000ffffff7f, x30, x1, 1088, x4)

inst_100:
// rs1_w1_val == -2147483648, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x8000000040000000;  op2val:0xffffefffffdfffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x8000000040000000, 0xffffefffffdfffff, x30, x1, 1104, x4)

inst_101:
// rs1_w1_val == 268435456, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x10000000ffffffbf;  op2val:0x000040efffffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x10000000ffffffbf, 0x000040efffffff, x30, x1, 1120, x4)

inst_102:
// rs1_w1_val == 33554432, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x200000000020000;  op2val:0x00200000002000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x200000000020000, 0x00200000002000, x30, x1, 1136, x4)

inst_103:
// rs1_w1_val == 2097152, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000006;  op2val:0xbffffffffffdffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x20000000000006, 0xbffffffffffdffff, x30, x1, 1152, x4)

inst_104:
// rs1_w1_val == 1048576, rs2_w0_val == -1048577
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x10000004000000;  op2val:0xfffeffffffefffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x10000004000000, 0xfffeffffffefffff, x30, x1, 1168, x4)

inst_105:
// rs1_w1_val == 524288, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x08000080000000;  op2val:0x00400000000008
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x08000080000000, 0x00400000000008, x30, x1, 1184, x4)

inst_106:
// rs1_w1_val == 131072, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x0200003fffffff;  op2val:0xfffffefffffffffc
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x0200003fffffff, 0xfffffefffffffffc, x30, x1, 1200, x4)

inst_107:
// rs1_w1_val == 32768, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x00800002000000;  op2val:0xfffffffe00000006
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x00800002000000, 0xfffffffe00000006, x30, x1, 1216, x4)

inst_108:
// rs1_w1_val == 2, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x00000200200000;  op2val:0xffffffffffefffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x00000200200000, 0xffffffffffefffff, x30, x1, 1232, x4)

inst_109:
// rs1_w1_val == 1, rs1_w0_val == -134217729
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x000001f7ffffff;  op2val:0xfffffffdfffffff9
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x000001f7ffffff, 0xfffffffdfffffff9, x30, x1, 1248, x4)

inst_110:
// rs1_w0_val == 1431655765, rs2_w0_val == -3
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff955555555;  op2val:0xffffffeffffffffd
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfffffff955555555, 0xffffffeffffffffd, x30, x1, 1264, x4)

inst_111:
// rs2_w0_val == -8388609, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000008;  op2val:0xffff7fffff7fffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000008, 0xffff7fffff7fffff, x30, x1, 1280, x4)

inst_112:
// rs1_w0_val == 2147483647, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x4000007fffffff;  op2val:0xfffffff900080000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x4000007fffffff, 0xfffffff900080000, x30, x1, 1296, x4)

inst_113:
// rs2_w0_val == -4194305, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000100;  op2val:0xefffffffffbfffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000100, 0xefffffffffbfffff, x30, x1, 1312, x4)

inst_114:
// rs1_w0_val == -67108865, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x000008fbffffff;  op2val:0xbffffffffffffff7
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x000008fbffffff, 0xbffffffffffffff7, x30, x1, 1328, x4)

inst_115:
// rs2_w0_val == -16385, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffffffbf;  op2val:0x400000ffffbfff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfeffffffffffffbf, 0x400000ffffbfff, x30, x1, 1344, x4)

inst_116:
// rs1_w0_val == -1048577, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffefffff;  op2val:0xfeffffffbfffffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfffffdffffefffff, 0xfeffffffbfffffff, x30, x1, 1360, x4)

inst_117:
// rs1_w0_val == -524289, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x010000fff7ffff;  op2val:0xffdfffffffffdfff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x010000fff7ffff, 0xffdfffffffffdfff, x30, x1, 1376, x4)

inst_118:
// rs1_w0_val == -262145, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffbffff;  op2val:0xfffffefffffffffc
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x1000000fffbffff, 0xfffffefffffffffc, x30, x1, 1392, x4)

inst_119:
// rs2_w0_val == -513, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffffffa;  op2val:0x2000000fffffdff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x000800fffffffa, 0x2000000fffffdff, x30, x1, 1408, x4)

inst_120:
// rs1_w0_val == -131073, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffdffff;  op2val:0x100000000000006
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xeffffffffffdffff, 0x100000000000006, x30, x1, 1424, x4)

inst_121:
// rs1_w0_val == -32769, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffff7fff;  op2val:0x3fffffff02000000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfdffffffffff7fff, 0x3fffffff02000000, x30, x1, 1440, x4)

inst_122:
// rs2_w0_val == -65, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x20000000080000;  op2val:0x000003ffffffbf
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x20000000080000, 0x000003ffffffbf, x30, x1, 1456, x4)

inst_123:
// rs1_w0_val == -16385, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffffbfff;  op2val:0x00400000800000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x40000000ffffbfff, 0x00400000800000, x30, x1, 1472, x4)

inst_124:
// rs1_w0_val == -4097, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffefff;  op2val:0x000000ffefffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x80000000ffffefff, 0x000000ffefffff, x30, x1, 1488, x4)

inst_125:
// rs1_w0_val == -513, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffdff;  op2val:0x00008000000007
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x10000000fffffdff, 0x00008000000007, x30, x1, 1504, x4)

inst_126:
// rs2_w0_val == -2147483648, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffffdfff;  op2val:0x08000080000000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x40000000ffffdfff, 0x08000080000000, x30, x1, 1520, x4)

inst_127:
// rs1_w0_val == -129, rs2_w0_val == 1048576
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x000001ffffff7f;  op2val:0xfffdffff00100000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x000001ffffff7f, 0xfffdffff00100000, x30, x1, 1536, x4)

inst_128:
// rs1_w0_val == -33, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffffdf;  op2val:0xfefffffffffffff9
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffffdf, 0xfefffffffffffff9, x30, x1, 1552, x4)

inst_129:
// rs2_w0_val == 268435456, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000003;  op2val:0xfffbffff10000000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x00100000000003, 0xfffbffff10000000, x30, x1, 1568, x4)

inst_130:
// rs2_w0_val == 67108864, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x000800f7ffffff;  op2val:0x00010004000000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x000800f7ffffff, 0x00010004000000, x30, x1, 1584, x4)

inst_131:
// rs1_w0_val == -2, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x000100fffffffe;  op2val:0x00000900080000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x000100fffffffe, 0x00000900080000, x30, x1, 1600, x4)

inst_132:
// rs1_w0_val == 536870912, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x08000020000000;  op2val:0xfffffbff00000003
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x08000020000000, 0xfffffbff00000003, x30, x1, 1616, x4)

inst_133:
// rs2_w0_val == 134217728, 
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffffd;  op2val:0x100000008000000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x4000000fffffffd, 0x100000008000000, x30, x1, 1632, x4)

inst_134:
// rs1_w1_val == rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val == -65537, rs2_w1_val == 4, rs2_w0_val == 2147483647, rs1_w1_val == 4
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x000004fffeffff;  op2val:0x0000047fffffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x000004fffeffff, 0x0000047fffffff, x30, x1, 1648, x4)

inst_135:
// rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w1_val == -2097153, rs1_w0_val == rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w0_val == -1073741825, rs2_w0_val == -1073741825, rs2_w1_val == -262145
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffbfffffff;  op2val:0xfffbffffbfffffff
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xffdfffffbfffffff, 0xfffbffffbfffffff, x30, x1, 1664, x4)

inst_136:
// rs2_w1_val == 1431655765, rs1_w1_val == -33, rs2_w0_val == 8388608
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000003;  op2val:0x5555555500800000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000003, 0x5555555500800000, x30, x1, 1680, x4)

inst_137:
// rs2_w1_val == -1048577, rs2_w0_val == 0
// opcode: kslraw ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff3fffffff;  op2val:0xffefffff00000000
TEST_PKRR_OP(kslraw, x31, x30, x29, 0x0000000000000000, 0x3fffffff3fffffff, 0xffefffff00000000, x30, x1, 1696, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x21_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x21_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 214*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
