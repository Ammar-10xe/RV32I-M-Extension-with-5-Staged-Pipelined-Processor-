
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ksubw instruction of the RISC-V RV64PZicsr extension for the ksubw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ksubw)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1 == rd != rs2, rs1==x1, rs2==x25, rd==x1, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w0_val == -8193, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w1_val == -33554433
// opcode: ksubw ; op1:x1; op2:x25; dest:x1; op1val:0xfdffffff80000000;  op2val:0xfffffffcffffdfff
TEST_PKRR_OP(ksubw, x1, x1, x25, 0x0000000000000000, 0xfdffffff80000000, 0xfffffffcffffdfff, x1, x9, 0, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x13, rs2==x3, rd==x5, rs1_w1_val == rs2_w1_val, rs2_w1_val == -524289, rs1_w0_val == 1431655765, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w1_val == -524289
// opcode: ksubw ; op1:x13; op2:x3; dest:x5; op1val:0xfff7ffff55555555;  op2val:0xfff7ffffc0000000
TEST_PKRR_OP(ksubw, x5, x13, x3, 0x0000000000000000, 0xfff7ffff55555555, 0xfff7ffffc0000000, x13, x9, 16, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x27, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w0_val == -16777217, rs1_w0_val == 2097152, rs2_w1_val == 1431655765, rs1_w1_val == -32769
// opcode: ksubw ; op1:x31; op2:x31; dest:x27; op1val:0xffff7fff00200000;  op2val:0x55555555feffffff
TEST_PKRR_OP(ksubw, x27, x31, x31, 0x0000000000000000, 0xffff7fff00200000, 0x55555555feffffff, x31, x9, 32, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x10, rs2==x10, rd==x10, rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w0_val == 67108864, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w1_val == -1431655766, rs1_w1_val == 131072
// opcode: ksubw ; op1:x10; op2:x10; dest:x10; op1val:0x020000fffffffc;  op2val:0xaaaaaaaa04000000
TEST_PKRR_OP(ksubw, x10, x10, x10, 0x0000000000000000, 0x020000fffffffc, 0xaaaaaaaa04000000, x10, x9, 48, x8)

inst_4:
// rs2 == rd != rs1, rs1==x0, rs2==x24, rd==x24, rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w0_val == -1, rs1_w0_val == -2097153, rs1_w1_val == 16777216, rs2_w1_val == 8388608
// opcode: ksubw ; op1:x0; op2:x24; dest:x24; op1val:0x1000000ffdfffff;  op2val:0x800000ffffffff
TEST_PKRR_OP(ksubw, x24, x0, x24, 0x0000000000000000, 0x1000000ffdfffff, 0x800000ffffffff, x0, x9, 64, x8)

inst_5:
// rs1==x12, rs2==x6, rd==x23, rs1_w0_val == rs2_w0_val, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == -1073741825, rs2_w0_val == 2147483647, rs1_w1_val == -536870913, rs1_w0_val == 2147483647
// opcode: ksubw ; op1:x12; op2:x6; dest:x23; op1val:0xdfffffff7fffffff;  op2val:0xbfffffff7fffffff
TEST_PKRR_OP(ksubw, x23, x12, x6, 0x0000000000000000, 0xdfffffff7fffffff, 0xbfffffff7fffffff, x12, x9, 80, x8)

inst_6:
// rs1==x20, rs2==x7, rd==x4, rs2_w1_val == 2147483647, rs2_w0_val == 65536, rs1_w0_val == -33, rs1_w1_val == 1
// opcode: ksubw ; op1:x20; op2:x7; dest:x4; op1val:0x000001ffffffdf;  op2val:0x7fffffff00010000
TEST_PKRR_OP(ksubw, x4, x20, x7, 0x0000000000000000, 0x000001ffffffdf, 0x7fffffff00010000, x20, x9, 96, x8)

inst_7:
// rs1==x24, rs2==x11, rd==x29, rs2_w1_val == -536870913, rs1_w0_val == 8, rs1_w1_val == 128
// opcode: ksubw ; op1:x24; op2:x11; dest:x29; op1val:0x00008000000008;  op2val:0xdffffffffffffff8
TEST_PKRR_OP(ksubw, x29, x24, x11, 0x0000000000000000, 0x00008000000008, 0xdffffffffffffff8, x24, x9, 112, x8)

inst_8:
// rs1==x17, rs2==x29, rd==x2, rs2_w1_val == -268435457, rs1_w1_val == 536870912, rs2_w0_val == -4194305, rs1_w0_val == 4
// opcode: ksubw ; op1:x17; op2:x29; dest:x2; op1val:0x2000000000000004;  op2val:0xefffffffffbfffff
TEST_PKRR_OP(ksubw, x2, x17, x29, 0x0000000000000000, 0x2000000000000004, 0xefffffffffbfffff, x17, x9, 128, x8)

inst_9:
// rs1==x11, rs2==x1, rd==x14, rs2_w1_val == -134217729, rs1_w0_val == 8388608, rs2_w0_val == 1073741824, rs1_w1_val == 256
// opcode: ksubw ; op1:x11; op2:x1; dest:x14; op1val:0x00010000800000;  op2val:0xf7ffffff40000000
TEST_PKRR_OP(ksubw, x14, x11, x1, 0x0000000000000000, 0x00010000800000, 0xf7ffffff40000000, x11, x9, 144, x8)

inst_10:
// rs1==x4, rs2==x28, rd==x6, rs2_w1_val == -67108865, rs2_w0_val == 8388608, rs1_w0_val == -65, rs1_w1_val == 134217728
// opcode: ksubw ; op1:x4; op2:x28; dest:x6; op1val:0x8000000ffffffbf;  op2val:0xfbffffff00800000
TEST_PKRR_OP(ksubw, x6, x4, x28, 0x0000000000000000, 0x8000000ffffffbf, 0xfbffffff00800000, x4, x9, 160, x8)

inst_11:
// rs1==x19, rs2==x13, rd==x16, rs2_w1_val == -33554433, rs1_w0_val == -4097, rs2_w0_val == 268435456, rs1_w1_val == 8388608
// opcode: ksubw ; op1:x19; op2:x13; dest:x16; op1val:0x800000ffffefff;  op2val:0xfdffffff10000000
TEST_PKRR_OP(ksubw, x16, x19, x13, 0x0000000000000000, 0x800000ffffefff, 0xfdffffff10000000, x19, x9, 176, x8)

inst_12:
// rs1==x30, rs2==x15, rd==x20, rs2_w1_val == -16777217, rs1_w0_val == 33554432, rs2_w0_val == 4194304
// opcode: ksubw ; op1:x30; op2:x15; dest:x20; op1val:0xc000000002000000;  op2val:0xfeffffff00400000
TEST_PKRR_OP(ksubw, x20, x30, x15, 0x0000000000000000, 0xc000000002000000, 0xfeffffff00400000, x30, x9, 192, x8)

inst_13:
// rs1==x29, rs2==x22, rd==x17, rs2_w1_val == -8388609, rs1_w0_val == 268435456, rs1_w1_val == -16777217
// opcode: ksubw ; op1:x29; op2:x22; dest:x17; op1val:0xfeffffff10000000;  op2val:0xff7fffff00000003
TEST_PKRR_OP(ksubw, x17, x29, x22, 0x0000000000000000, 0xfeffffff10000000, 0xff7fffff00000003, x29, x9, 208, x8)

inst_14:
// rs1==x3, rs2==x16, rd==x13, rs2_w1_val == -4194305, rs1_w1_val == 8, rs1_w0_val == -268435457
// opcode: ksubw ; op1:x3; op2:x16; dest:x13; op1val:0x000008efffffff;  op2val:0xffbfffffffffffff
TEST_PKRR_OP(ksubw, x13, x3, x16, 0x0000000000000000, 0x000008efffffff, 0xffbfffffffffffff, x3, x9, 224, x6)

inst_15:
// rs1==x25, rs2==x19, rd==x31, rs2_w1_val == -2097153, rs1_w1_val == -2049, rs2_w0_val == -1048577
// opcode: ksubw ; op1:x25; op2:x19; dest:x31; op1val:0xfffff7fffffffff6;  op2val:0xffdfffffffefffff
TEST_PKRR_OP(ksubw, x31, x25, x19, 0x0000000000000000, 0xfffff7fffffffff6, 0xffdfffffffefffff, x25, x9, 240, x6)

inst_16:
// rs1==x2, rs2==x17, rd==x22, rs2_w1_val == -1048577, rs1_w1_val == 16, rs2_w0_val == -8388609
// opcode: ksubw ; op1:x2; op2:x17; dest:x22; op1val:0x0000103fffffff;  op2val:0xffefffffff7fffff
TEST_PKRR_OP(ksubw, x22, x2, x17, 0x0000000000000000, 0x0000103fffffff, 0xffefffffff7fffff, x2, x9, 256, x6)

inst_17:
// rs1==x5, rs2==x8, rd==x18, rs2_w1_val == -262145, rs1_w0_val == -257, rs1_w1_val == -513
// opcode: ksubw ; op1:x5; op2:x8; dest:x18; op1val:0xfffffdfffffffeff;  op2val:0xfffbffff00010000
TEST_PKRR_OP(ksubw, x18, x5, x8, 0x0000000000000000, 0xfffffdfffffffeff, 0xfffbffff00010000, x5, x9, 272, x6)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_18:
// rs1==x16, rs2==x23, rd==x3, rs2_w1_val == -131073, rs1_w0_val == -262145
// opcode: ksubw ; op1:x16; op2:x23; dest:x3; op1val:0xc0000000fffbffff;  op2val:0xfffdffff00000006
TEST_PKRR_OP(ksubw, x3, x16, x23, 0x0000000000000000, 0xc0000000fffbffff, 0xfffdffff00000006, x16, x1, 0, x6)

inst_19:
// rs1==x8, rs2==x2, rd==x26, rs2_w1_val == -65537, rs1_w0_val == -16777217, rs2_w0_val == 0, rs1_w1_val == 2
// opcode: ksubw ; op1:x8; op2:x2; dest:x26; op1val:0x000002feffffff;  op2val:0xfffeffff00000000
TEST_PKRR_OP(ksubw, x26, x8, x2, 0x0000000000000000, 0x000002feffffff, 0xfffeffff00000000, x8, x1, 16, x6)

inst_20:
// rs1==x9, rs2==x0, rd==x25, rs2_w1_val == -32769, rs2_w0_val == -5, rs1_w1_val == 32
// opcode: ksubw ; op1:x9; op2:x0; dest:x25; op1val:0x00002000200000;  op2val:0xffff7ffffffffffb
TEST_PKRR_OP(ksubw, x25, x9, x0, 0x0000000000000000, 0x00002000200000, 0xffff7ffffffffffb, x9, x1, 32, x6)

inst_21:
// rs1==x21, rs2==x18, rd==x30, rs2_w1_val == -16385, rs2_w0_val == -2147483648
// opcode: ksubw ; op1:x21; op2:x18; dest:x30; op1val:0x800000fffffff8;  op2val:0xffffbfff80000000
TEST_PKRR_OP(ksubw, x30, x21, x18, 0x0000000000000000, 0x800000fffffff8, 0xffffbfff80000000, x21, x1, 48, x6)

inst_22:
// rs1==x18, rs2==x30, rd==x19, rs2_w1_val == -8193, rs1_w1_val == -1, rs1_w0_val == -4194305, rs2_w0_val == 2097152
// opcode: ksubw ; op1:x18; op2:x30; dest:x19; op1val:0xffffffffffbfffff;  op2val:0xffffdfff00200000
TEST_PKRR_OP(ksubw, x19, x18, x30, 0x0000000000000000, 0xffffffffffbfffff, 0xffffdfff00200000, x18, x1, 64, x6)

inst_23:
// rs1==x22, rs2==x26, rd==x28, rs2_w1_val == -4097, rs1_w1_val == -2097153
// opcode: ksubw ; op1:x22; op2:x26; dest:x28; op1val:0xffdfffff00000008;  op2val:0xffffefffffffdfff
TEST_PKRR_OP(ksubw, x28, x22, x26, 0x0000000000000000, 0xffdfffff00000008, 0xffffefffffffdfff, x22, x1, 80, x6)

inst_24:
// rs1==x14, rs2==x20, rd==x7, rs2_w1_val == -2049, rs2_w0_val == 16384, rs1_w0_val == -17
// opcode: ksubw ; op1:x14; op2:x20; dest:x7; op1val:0xfffffffcffffffef;  op2val:0xfffff7ff00004000
TEST_PKRR_OP(ksubw, x7, x14, x20, 0x0000000000000000, 0xfffffffcffffffef, 0xfffff7ff00004000, x14, x1, 96, x6)

inst_25:
// rs1==x7, rs2==x4, rd==x11, rs2_w1_val == -1025, rs1_w0_val == -1431655766, rs2_w0_val == -1073741825
// opcode: ksubw ; op1:x7; op2:x4; dest:x11; op1val:0x000006aaaaaaaa;  op2val:0xfffffbffbfffffff
TEST_PKRR_OP(ksubw, x11, x7, x4, 0x0000000000000000, 0x000006aaaaaaaa, 0xfffffbffbfffffff, x7, x1, 112, x6)

inst_26:
// rs1==x27, rs2==x14, rd==x9, rs2_w1_val == -513, 
// opcode: ksubw ; op1:x27; op2:x14; dest:x9; op1val:0xdfffffff00000008;  op2val:0xfffffdff80000000
TEST_PKRR_OP(ksubw, x9, x27, x14, 0x0000000000000000, 0xdfffffff00000008, 0xfffffdff80000000, x27, x1, 128, x6)

inst_27:
// rs1==x15, rs2==x27, rd==x12, rs2_w1_val == -257, rs1_w1_val == 16384, rs2_w0_val == 64
// opcode: ksubw ; op1:x15; op2:x27; dest:x12; op1val:0x004000ffffffef;  op2val:0xfffffeff00000040
TEST_PKRR_OP(ksubw, x12, x15, x27, 0x0000000000000000, 0x004000ffffffef, 0xfffffeff00000040, x15, x1, 144, x6)

inst_28:
// rs1==x6, rs2==x21, rd==x0, rs2_w1_val == -129, rs1_w1_val == 32768, rs1_w0_val == 4194304, rs2_w0_val == -524289
// opcode: ksubw ; op1:x6; op2:x21; dest:x0; op1val:0x00800000400000;  op2val:0xffffff7ffff7ffff
TEST_PKRR_OP(ksubw, x0, x6, x21, 0x0000000000000000, 0x00800000400000, 0xffffff7ffff7ffff, x6, x1, 160, x2)

inst_29:
// rs1==x26, rs2==x5, rd==x8, rs2_w1_val == -65, rs2_w0_val == -131073, rs1_w0_val == -3
// opcode: ksubw ; op1:x26; op2:x5; dest:x8; op1val:0x000010fffffffd;  op2val:0xffffffbffffdffff
TEST_PKRR_OP(ksubw, x8, x26, x5, 0x0000000000000000, 0x000010fffffffd, 0xffffffbffffdffff, x26, x1, 176, x2)

inst_30:
// rs1==x28, rs2==x9, rd==x21, rs2_w1_val == -33, rs1_w1_val == 33554432
// opcode: ksubw ; op1:x28; op2:x9; dest:x21; op1val:0x2000000ffbfffff;  op2val:0xffffffdffffffffb
TEST_PKRR_OP(ksubw, x21, x28, x9, 0x0000000000000000, 0x2000000ffbfffff, 0xffffffdffffffffb, x28, x1, 192, x2)

inst_31:
// rs1==x23, rs2==x12, rd==x15, rs2_w1_val == -17, rs2_w0_val == -67108865
// opcode: ksubw ; op1:x23; op2:x12; dest:x15; op1val:0xc000000002000000;  op2val:0xffffffeffbffffff
TEST_PKRR_OP(ksubw, x15, x23, x12, 0x0000000000000000, 0xc000000002000000, 0xffffffeffbffffff, x23, x1, 208, x2)

inst_32:
// rs2_w1_val == -9, rs2_w0_val == -257, rs1_w1_val == 2048
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffbffff;  op2val:0xfffffff7fffffeff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x000800fffbffff, 0xfffffff7fffffeff, x30, x1, 224, x2)

inst_33:
// rs2_w1_val == -5, rs1_w0_val == -32769, rs1_w1_val == -1025
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffff7fff;  op2val:0xfffffffbfffffeff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfffffbffffff7fff, 0xfffffffbfffffeff, x30, x1, 240, x2)

inst_34:
// rs2_w1_val == -3, rs1_w1_val == -1073741825
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffeffffff;  op2val:0xfffffffd00400000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xbffffffffeffffff, 0xfffffffd00400000, x30, x1, 256, x2)

inst_35:
// rs2_w1_val == -2, rs2_w0_val == 4, rs1_w0_val == 16384, rs1_w1_val == -65537
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00004000;  op2val:0xfffffffe00000004
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfffeffff00004000, 0xfffffffe00000004, x30, x1, 272, x2)

inst_36:
// rs2_w1_val == -2147483648, rs1_w1_val == 1048576, rs1_w0_val == 1024
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000400;  op2val:0x80000000fbffffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x10000000000400, 0x80000000fbffffff, x30, x1, 288, x2)

inst_37:
// rs2_w1_val == 1073741824, rs1_w0_val == 32768
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00008000;  op2val:0x40000000fbffffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfeffffff00008000, 0x40000000fbffffff, x30, x1, 304, x2)

inst_38:
// rs2_w1_val == 536870912, rs1_w1_val == 2147483647
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00200000;  op2val:0x2000000000000009
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x7fffffff00200000, 0x2000000000000009, x30, x1, 320, x2)

inst_39:
// rs2_w1_val == 268435456, rs2_w0_val == 2048
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000005;  op2val:0x1000000000000800
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x00000900000005, 0x1000000000000800, x30, x1, 336, x2)

inst_40:
// rs2_w1_val == 134217728, rs2_w0_val == 32768, rs1_w0_val == -1073741825, rs1_w1_val == -9
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7bfffffff;  op2val:0x800000000008000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfffffff7bfffffff, 0x800000000008000, x30, x1, 352, x2)

inst_41:
// rs2_w1_val == 67108864, rs1_w1_val == 4096, rs1_w0_val == 4096
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00100000001000;  op2val:0x400000080000000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x00100000001000, 0x400000080000000, x30, x1, 368, x2)

inst_42:
// rs2_w1_val == 33554432, rs1_w1_val == 65536
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffffefff;  op2val:0x2000000fffffeff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x010000ffffefff, 0x2000000fffffeff, x30, x1, 384, x2)

inst_43:
// rs2_w1_val == 16777216, rs1_w0_val == 16
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000010;  op2val:0x10000007fffffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x80000000000010, 0x10000007fffffff, x30, x1, 400, x2)

inst_44:
// rs2_w1_val == 4194304, rs2_w0_val == -1431655766
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffffffd;  op2val:0x400000aaaaaaaa
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x000003fffffffd, 0x400000aaaaaaaa, x30, x1, 416, x2)

inst_45:
// rs2_w1_val == 2097152, rs1_w1_val == -257, rs1_w0_val == -9
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffff7;  op2val:0x20000000000003
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffff7, 0x20000000000003, x30, x1, 432, x2)

inst_46:
// rs2_w1_val == 1048576, rs2_w0_val == 128
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffffffbf;  op2val:0x10000000000080
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x004000ffffffbf, 0x10000000000080, x30, x1, 448, x2)

inst_47:
// rs2_w1_val == 524288, rs1_w0_val == -1048577
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000ffefffff;  op2val:0x08000000008000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xc0000000ffefffff, 0x08000000008000, x30, x1, 464, x2)

inst_48:
// rs2_w1_val == 262144, rs1_w1_val == -33, rs1_w0_val == -129
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffffff7f;  op2val:0x04000000200000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xffffffdfffffff7f, 0x04000000200000, x30, x1, 480, x2)

inst_49:
// rs2_w1_val == 131072, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffffff7f;  op2val:0x02000000000005
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x000008ffffff7f, 0x02000000000005, x30, x1, 496, x2)

inst_50:
// rs1_w0_val == 16777216, rs2_w1_val == 8192, rs2_w0_val == 512
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00000301000000;  op2val:0x00200000000200
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x00000301000000, 0x00200000000200, x30, x1, 512, x2)

inst_51:
// rs1_w0_val == 1048576, rs1_w1_val == 8192
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00200000100000;  op2val:0xfffbffff00000007
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x00200000100000, 0xfffbffff00000007, x30, x1, 528, x2)

inst_52:
// rs1_w0_val == 524288, rs2_w0_val == -32769, rs1_w1_val == -8388609
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00080000;  op2val:0xfffffff9ffff7fff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xff7fffff00080000, 0xfffffff9ffff7fff, x30, x1, 544, x2)

inst_53:
// rs1_w0_val == 262144, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x10000000040000;  op2val:0xfffffffafffdffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x10000000040000, 0xfffffffafffdffff, x30, x1, 560, x2)

inst_54:
// rs1_w0_val == 131072, rs1_w1_val == 524288, rs2_w0_val == 4096
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x08000000020000;  op2val:0xffefffff00001000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x08000000020000, 0xffefffff00001000, x30, x1, 576, x2)

inst_55:
// rs1_w0_val == 65536, rs1_w1_val == -129
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00010000;  op2val:0x200000ffffffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xffffff7f00010000, 0x200000ffffffff, x30, x1, 592, x2)

inst_56:
// rs1_w0_val == 8192, rs1_w1_val == -67108865
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00002000;  op2val:0x4000000000200000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfbffffff00002000, 0x4000000000200000, x30, x1, 608, x2)

inst_57:
// rs1_w0_val == 2048, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000800;  op2val:0xffffffdffffffffc
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000800, 0xffffffdffffffffc, x30, x1, 624, x2)

inst_58:
// rs1_w0_val == 512, rs1_w1_val == -8193
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000200;  op2val:0xefffffff00000080
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000200, 0xefffffff00000080, x30, x1, 640, x2)

inst_59:
// rs1_w0_val == 256, rs1_w1_val == 1024
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000100;  op2val:0x3fffffff00400000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x00040000000100, 0x3fffffff00400000, x30, x1, 656, x2)

inst_60:
// rs1_w0_val == 128, rs1_w1_val == 2097152
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000080;  op2val:0xffffeffffffffff8
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x20000000000080, 0xffffeffffffffff8, x30, x1, 672, x2)

inst_61:
// rs1_w0_val == 64, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000040;  op2val:0xfffffbffffff7fff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x00000600000040, 0xfffffbffffff7fff, x30, x1, 688, x2)

inst_62:
// rs1_w0_val == 32, rs2_w0_val == 2
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000020;  op2val:0x200000000000002
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000020, 0x200000000000002, x30, x1, 704, x2)

inst_63:
// rs1_w0_val == 2, rs2_w1_val == 2048
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000002;  op2val:0x000800c0000000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000002, 0x000800c0000000, x30, x1, 720, x2)

inst_64:
// rs1_w0_val == 1, rs2_w0_val == -129
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000001;  op2val:0x080000ffffff7f
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x00002000000001, 0x080000ffffff7f, x30, x1, 736, x2)

inst_65:
// rs1_w0_val == 0, rs1_w1_val == -5, rs2_w0_val == 134217728
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000000;  op2val:0x04000008000000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000000, 0x04000008000000, x30, x1, 752, x2)

inst_66:
// rs1_w0_val == -1, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffffffff;  op2val:0xfffffff8fffffffa
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfdffffffffffffff, 0xfffffff8fffffffa, x30, x1, 768, x2)

inst_67:
// rs2_w1_val == 65536, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00000200200000;  op2val:0x010000bfffffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x00000200200000, 0x010000bfffffff, x30, x1, 784, x2)

inst_68:
// rs2_w1_val == 32768, rs1_w1_val == -17, rs1_w0_val == -8193, rs2_w0_val == -4097
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffffdfff;  op2val:0x008000ffffefff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xffffffefffffdfff, 0x008000ffffefff, x30, x1, 800, x2)

inst_69:
// rs2_w1_val == 16384, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffefff;  op2val:0x0040007fffffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffefff, 0x0040007fffffff, x30, x1, 816, x2)

inst_70:
// rs2_w1_val == 4096, rs2_w0_val == 1431655765, rs1_w0_val == -2049
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000fffff7ff;  op2val:0x00100055555555
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xc0000000fffff7ff, 0x00100055555555, x30, x1, 832, x2)

inst_71:
// rs2_w1_val == 1024, rs1_w0_val == 536870912, rs1_w1_val == -1431655766, rs2_w0_val == -268435457
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa20000000;  op2val:0x000400efffffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa20000000, 0x000400efffffff, x30, x1, 848, x2)

inst_72:
// rs2_w1_val == 512, rs2_w0_val == -536870913
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffffd;  op2val:0x000200dfffffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x800000fffffffd, 0x000200dfffffff, x30, x1, 864, x2)

inst_73:
// rs2_w1_val == 256, rs1_w1_val == -4097
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000007;  op2val:0x000100dfffffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xffffefff00000007, 0x000100dfffffff, x30, x1, 880, x2)

inst_74:
// rs2_w1_val == 128, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffffc;  op2val:0x00008000008000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x1000000fffffffc, 0x00008000008000, x30, x1, 896, x2)

inst_75:
// rs2_w1_val == 64, rs1_w0_val == -131073, rs2_w0_val == -65537
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000fffdffff;  op2val:0x000040fffeffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xc0000000fffdffff, 0x000040fffeffff, x30, x1, 912, x2)

inst_76:
// rs2_w1_val == 32, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x2000000ffffffef;  op2val:0x000020ffbfffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x2000000ffffffef, 0x000020ffbfffff, x30, x1, 928, x2)

inst_77:
// rs2_w1_val == 16, rs1_w0_val == -5, rs2_w0_val == 32, rs1_w1_val == -3
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffffffb;  op2val:0x00001000000020
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffffffb, 0x00001000000020, x30, x1, 944, x2)

inst_78:
// rs2_w1_val == 8, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffffb;  op2val:0x00000840000000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x1000000fffffffb, 0x00000840000000, x30, x1, 960, x2)

inst_79:
// rs2_w1_val == 4, rs1_w0_val == -536870913
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffdfffffff;  op2val:0x00000400000000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfffffbffdfffffff, 0x00000400000000, x30, x1, 976, x2)

inst_80:
// rs2_w1_val == 2, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000009;  op2val:0x00000200000040
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xc000000000000009, 0x00000200000040, x30, x1, 992, x2)

inst_81:
// rs2_w0_val == 262144, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00004000;  op2val:0xffffbfff00040000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xffffdfff00004000, 0xffffbfff00040000, x30, x1, 1008, x2)

inst_82:
// rs2_w0_val == 131072, rs1_w1_val == 262144
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000040;  op2val:0x4000000000020000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x04000000000040, 0x4000000000020000, x30, x1, 1024, x2)

inst_83:
// rs1_w0_val == 67108864, rs2_w0_val == -33554433
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00000104000000;  op2val:0x40000000fdffffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x00000104000000, 0x40000000fdffffff, x30, x1, 1040, x2)

inst_84:
// rs2_w0_val == 8192, rs2_w1_val == -1, rs1_w0_val == -16385, rs1_w1_val == -131073
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffbfff;  op2val:0xffffffff00002000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffbfff, 0xffffffff00002000, x30, x1, 1056, x2)

inst_85:
// rs2_w0_val == 1024, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00004000;  op2val:0x00000200000400
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfffffeff00004000, 0x00000200000400, x30, x1, 1072, x2)

inst_86:
// rs2_w0_val == 256, rs1_w1_val == -2
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00008000;  op2val:0x00100000000100
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfffffffe00008000, 0x00100000000100, x30, x1, 1088, x2)

inst_87:
// rs2_w0_val == 16, rs1_w1_val == 4
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000004fffffffb;  op2val:0xffffdfff00000010
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x000004fffffffb, 0xffffdfff00000010, x30, x1, 1104, x2)

inst_88:
// rs2_w0_val == 8, rs1_w1_val == -262145
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000020;  op2val:0x4000000000000008
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000020, 0x4000000000000008, x30, x1, 1120, x2)

inst_89:
// rs2_w0_val == 1, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x08000010000000;  op2val:0x01000000000001
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x08000010000000, 0x01000000000001, x30, x1, 1136, x2)

inst_90:
// rs1_w1_val == 1431655765, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000010;  op2val:0x100000000000006
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x5555555500000010, 0x100000000000006, x30, x1, 1152, x2)

inst_91:
// rs1_w0_val == -2, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000100fffffffe;  op2val:0x04000000000100
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x000100fffffffe, 0x04000000000100, x30, x1, 1168, x2)

inst_92:
// rs1_w1_val == -268435457, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00080000;  op2val:0xfff7fffffffffffb
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xefffffff00080000, 0xfff7fffffffffffb, x30, x1, 1184, x2)

inst_93:
// rs1_w1_val == -134217729, rs2_w0_val == 1048576
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000006;  op2val:0xffffbfff00100000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000006, 0xffffbfff00100000, x30, x1, 1200, x2)

inst_94:
// rs1_w1_val == -4194305, rs2_w0_val == -513
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffffffef;  op2val:0x20000000fffffdff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xffbfffffffffffef, 0x20000000fffffdff, x30, x1, 1216, x2)

inst_95:
// rs1_w1_val == -1048577, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffffffef;  op2val:0x80000000000010
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xffefffffffffffef, 0x80000000000010, x30, x1, 1232, x2)

inst_96:
// rs1_w1_val == -16385, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffff9;  op2val:0xffffff7f00000010
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffff9, 0xffffff7f00000010, x30, x1, 1248, x2)

inst_97:
// rs1_w1_val == -65, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf04000000;  op2val:0xffffff7ffdffffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xffffffbf04000000, 0xffffff7ffdffffff, x30, x1, 1264, x2)

inst_98:
// rs1_w1_val == -2147483648, rs1_w0_val == -1025
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffffbff;  op2val:0x200000000000008
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x80000000fffffbff, 0x200000000000008, x30, x1, 1280, x2)

inst_99:
// rs1_w1_val == 1073741824, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000002;  op2val:0xfdffffff00000000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x4000000000000002, 0xfdffffff00000000, x30, x1, 1296, x2)

inst_100:
// rs1_w1_val == 268435456, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000080;  op2val:0x00000600100000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x1000000000000080, 0x00000600100000, x30, x1, 1312, x2)

inst_101:
// rs1_w1_val == 67108864, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000006;  op2val:0x0100003fffffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x400000000000006, 0x0100003fffffff, x30, x1, 1328, x2)

inst_102:
// rs1_w1_val == 4194304, rs1_w0_val == -8388609
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x400000ff7fffff;  op2val:0xfffeffff00000200
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x400000ff7fffff, 0xfffeffff00000200, x30, x1, 1344, x2)

inst_103:
// rs1_w1_val == 512, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00020000800000;  op2val:0xffeffffffbffffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x00020000800000, 0xffeffffffbffffff, x30, x1, 1360, x2)

inst_104:
// rs2_w1_val == 1, rs1_w1_val == 64
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00004001000000;  op2val:0x000001efffffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x00004001000000, 0x000001efffffff, x30, x1, 1376, x2)

inst_105:
// rs2_w1_val == 0, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000008;  op2val:0x00000000000000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x00200000000008, 0x00000000000000, x30, x1, 1392, x2)

inst_106:
// rs2_w0_val == -134217729, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000200;  op2val:0xf7fffffff7ffffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000200, 0xf7fffffff7ffffff, x30, x1, 1408, x2)

inst_107:
// rs1_w1_val == 0, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000000ffdfffff;  op2val:0xfffffffb00000002
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x000000ffdfffff, 0xfffffffb00000002, x30, x1, 1424, x2)

inst_108:
// rs2_w0_val == -2097153, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000008000;  op2val:0xffefffffffdfffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x4000000000008000, 0xffefffffffdfffff, x30, x1, 1440, x2)

inst_109:
// rs1_w0_val == -134217729, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000010f7ffffff;  op2val:0x00000208000000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x000010f7ffffff, 0x00000208000000, x30, x1, 1456, x2)

inst_110:
// rs2_w0_val == -262145, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000006ffffdfff;  op2val:0x008000fffbffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x000006ffffdfff, 0x008000fffbffff, x30, x1, 1472, x2)

inst_111:
// rs1_w0_val == -67108865, rs2_w0_val == 536870912
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fbffffff;  op2val:0x00020020000000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x20000000fbffffff, 0x00020020000000, x30, x1, 1488, x2)

inst_112:
// rs1_w0_val == -33554433, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000200fdffffff;  op2val:0xffffffef00002000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x000200fdffffff, 0xffffffef00002000, x30, x1, 1504, x2)

inst_113:
// rs2_w0_val == -16385, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000000;  op2val:0x800000ffffbfff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x10000000000000, 0x800000ffffbfff, x30, x1, 1520, x2)

inst_114:
// rs2_w0_val == -2049, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x0000107fffffff;  op2val:0xffffffeffffff7ff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x0000107fffffff, 0xffffffeffffff7ff, x30, x1, 1536, x2)

inst_115:
// rs1_w0_val == -524289, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fff7ffff;  op2val:0x3fffffff00000003
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x8000000fff7ffff, 0x3fffffff00000003, x30, x1, 1552, x2)

inst_116:
// rs2_w0_val == -1025, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffbfffff;  op2val:0xfffffffefffffbff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x010000ffbfffff, 0xfffffffefffffbff, x30, x1, 1568, x2)

inst_117:
// rs1_w0_val == -65537, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fffeffff;  op2val:0xffffffbfffff7fff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfffffff6fffeffff, 0xffffffbfffff7fff, x30, x1, 1584, x2)

inst_118:
// rs2_w0_val == -65, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00001000;  op2val:0x010000ffffffbf
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xffffffff00001000, 0x010000ffffffbf, x30, x1, 1600, x2)

inst_119:
// rs2_w0_val == -33, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffffff7f;  op2val:0x000003ffffffdf
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xffff7fffffffff7f, 0x000003ffffffdf, x30, x1, 1616, x2)

inst_120:
// rs2_w0_val == -17, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbff7ffffff;  op2val:0x000009ffffffef
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xffffffbff7ffffff, 0x000009ffffffef, x30, x1, 1632, x2)

inst_121:
// rs2_w0_val == -9, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcefffffff;  op2val:0x200000fffffff7
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfffffffcefffffff, 0x200000fffffff7, x30, x1, 1648, x2)

inst_122:
// rs2_w0_val == -3, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafffffffc;  op2val:0xfffefffffffffffd
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfffffffafffffffc, 0xfffefffffffffffd, x30, x1, 1664, x2)

inst_123:
// rs1_w0_val == -513, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffdff;  op2val:0xfbffffffaaaaaaaa
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffdff, 0xfbffffffaaaaaaaa, x30, x1, 1680, x2)

inst_124:
// rs2_w0_val == -2, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x000006fffffffd;  op2val:0x000010fffffffe
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x000006fffffffd, 0x000010fffffffe, x30, x1, 1696, x2)

inst_125:
// rs2_w0_val == 33554432, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000005;  op2val:0x400000002000000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000005, 0x400000002000000, x30, x1, 1712, x2)

inst_126:
// rs2_w0_val == 16777216, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffff7fff;  op2val:0xfffffffb01000000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xfdffffffffff7fff, 0xfffffffb01000000, x30, x1, 1728, x2)

inst_127:
// rs1_w0_val == 1073741824, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00000840000000;  op2val:0x3fffffff00004000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x00000840000000, 0x3fffffff00004000, x30, x1, 1744, x2)

inst_128:
// rs1_w0_val == 134217728, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00020008000000;  op2val:0x55555555ffffffef
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x00020008000000, 0x55555555ffffffef, x30, x1, 1760, x2)

inst_129:
// rs2_w0_val == 524288, 
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffefffff;  op2val:0xefffffff00080000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xffffffffffefffff, 0xefffffff00080000, x30, x1, 1776, x2)

inst_130:
// rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w0_val == -16777217, rs1_w0_val == 2097152, rs2_w1_val == 1431655765, rs1_w1_val == -32769
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00200000;  op2val:0x55555555feffffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0xffff7fff00200000, 0x55555555feffffff, x30, x1, 1792, x2)

inst_131:
// rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w0_val == 67108864, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w1_val == -1431655766, rs1_w1_val == 131072
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x020000fffffffc;  op2val:0xaaaaaaaa04000000
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x020000fffffffc, 0xaaaaaaaa04000000, x30, x1, 1808, x2)

inst_132:
// rs2_w1_val == -32769, rs2_w0_val == -5, rs1_w1_val == 32
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00002000200000;  op2val:0xffff7ffffffffffb
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x00002000200000, 0xffff7ffffffffffb, x30, x1, 1824, x2)

inst_133:
// rs2_w1_val == -129, rs1_w1_val == 32768, rs1_w0_val == 4194304, rs2_w0_val == -524289
// opcode: ksubw ; op1:x30; op2:x29; dest:x31; op1val:0x00800000400000;  op2val:0xffffff7ffff7ffff
TEST_PKRR_OP(ksubw, x31, x30, x29, 0x0000000000000000, 0x00800000400000, 0xffffff7ffff7ffff, x30, x1, 1840, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 232*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
