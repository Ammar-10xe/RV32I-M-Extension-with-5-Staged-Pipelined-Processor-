
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kdmatt instruction of the RISC-V RV64PZicsr extension for the kdmatt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kdmatt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rd != rs2, rs1==x16, rs2==x24, rd==x16, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -2, rs1_h0_val != rs2_h0_val, rs1_h3_val == -257, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h2_val == -1025, rs1_h1_val == 1, rs2_h3_val == -1, rs2_h2_val == 2
// opcode: kdmatt ; op1:x16; op2:x24; dest:x16; op1val:0xfefffbff00018000;  op2val:0xffff0002fffe0009
TEST_PKRR_OP(kdmatt, x16, x16, x24, 0x0000000000000000, 0xfefffbff00018000, 0xffff0002fffe0009, x16, x3, 0, x6)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x12, rs2==x16, rd==x26, rs1_h3_val == rs2_h3_val, rs1_h1_val == -5, rs2_h3_val == -2, rs2_h1_val == -33, rs1_h0_val == 128, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val == -257, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h3_val == -2, rs2_h2_val == 32767
// opcode: kdmatt ; op1:x12; op2:x16; dest:x26; op1val:0xfffefefffffb0080;  op2val:0xfffe7fffffdf0007
TEST_PKRR_OP(kdmatt, x26, x12, x16, 0x0000000000000000, 0xfffefefffffb0080, 0xfffe7fffffdf0007, x12, x3, 16, x6)

inst_2:
// rs1 == rs2 != rd, rs1==x7, rs2==x7, rd==x8, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == -16385, rs2_h0_val == -8193, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h3_val == -17
// opcode: kdmatt ; op1:x7; op2:x7; dest:x8; op1val:0xffeffffafffafffc;  op2val:0x06bfff0007dfff
TEST_PKRR_OP(kdmatt, x8, x7, x7, 0x0000000000000000, 0xffeffffafffafffc, 0x06bfff0007dfff, x7, x3, 32, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x15, rs2==x15, rd==x15, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h0_val == -3, rs1_h3_val == 4, rs2_h2_val == 16384, rs2_h0_val == -65, rs2_h1_val == 8192, rs1_h2_val == -33, rs1_h1_val == -65, rs2_h3_val == -4097
// opcode: kdmatt ; op1:x15; op2:x15; dest:x15; op1val:0x04ffdfffbffffd;  op2val:0xefff40002000ffbf
TEST_PKRR_OP(kdmatt, x15, x15, x15, 0x0000000000000000, 0x04ffdfffbffffd, 0xefff40002000ffbf, x15, x3, 48, x6)

inst_4:
// rs2 == rd != rs1, rs1==x19, rs2==x20, rd==x20, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 64, rs1_h2_val == 0, rs1_h1_val == -21846, rs2_h0_val == -2, rs2_h3_val == 4, rs2_h2_val == 16
// opcode: kdmatt ; op1:x19; op2:x20; dest:x20; op1val:0x400000aaaafff6;  op2val:0x0400102000fffe
TEST_PKRR_OP(kdmatt, x20, x19, x20, 0x0000000000000000, 0x400000aaaafff6, 0x0400102000fffe, x19, x3, 64, x6)

inst_5:
// rs1==x26, rs2==x22, rd==x24, rs1_h2_val == rs2_h2_val, rs2_h1_val == -16385, rs1_h0_val == -2, rs2_h2_val == -129, rs1_h1_val == 128, rs2_h0_val == -33, rs1_h2_val == -129, rs1_h3_val == -3
// opcode: kdmatt ; op1:x26; op2:x22; dest:x24; op1val:0xfffdff7f0080fffe;  op2val:0x09ff7fbfffffdf
TEST_PKRR_OP(kdmatt, x24, x26, x22, 0x0000000000000000, 0xfffdff7f0080fffe, 0x09ff7fbfffffdf, x26, x3, 80, x6)

inst_6:
// rs1==x11, rs2==x2, rd==x12, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h2_val == -4097, rs1_h3_val == -4097, rs2_h1_val == -17, rs2_h3_val == 2048, rs1_h2_val == 21845, rs2_h0_val == 4096
// opcode: kdmatt ; op1:x11; op2:x2; dest:x12; op1val:0xefff5555ffbffff8;  op2val:0x800efffffef1000
TEST_PKRR_OP(kdmatt, x12, x11, x2, 0x0000000000000000, 0xefff5555ffbffff8, 0x800efffffef1000, x11, x3, 96, x6)

inst_7:
// rs1==x30, rs2==x0, rd==x10, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == 2, rs2_h0_val == 2, rs2_h3_val == -3, rs1_h1_val == 512, rs1_h2_val == 2, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h3_val == -129, rs1_h0_val == -1025
// opcode: kdmatt ; op1:x30; op2:x0; dest:x10; op1val:0xff7f00020200fbff;  op2val:0xfffd400000020002
TEST_PKRR_OP(kdmatt, x10, x30, x0, 0x0000000000000000, 0xff7f00020200fbff, 0xfffd400000020002, x30, x3, 112, x6)

inst_8:
// rs1==x9, rs2==x14, rd==x5, rs1_h1_val == rs2_h1_val, rs1_h1_val == -2049, rs1_h2_val == 1024, rs1_h0_val == -513, rs2_h1_val == -2049
// opcode: kdmatt ; op1:x9; op2:x14; dest:x5; op1val:0xefff0400f7fffdff;  op2val:0x030006f7ff0005
TEST_PKRR_OP(kdmatt, x5, x9, x14, 0x0000000000000000, 0xefff0400f7fffdff, 0x030006f7ff0005, x9, x3, 128, x6)

inst_9:
// rs1==x23, rs2==x8, rd==x22, rs1_h0_val == rs2_h0_val, rs1_h0_val == -17, rs2_h2_val == -1025, rs1_h3_val == -16385, rs2_h0_val == -17, rs1_h1_val == -1, rs2_h3_val == 21845, rs1_h2_val == -2, rs2_h1_val == 16
// opcode: kdmatt ; op1:x23; op2:x8; dest:x22; op1val:0xbffffffeffffffef;  op2val:0x5555fbff0010ffef
TEST_PKRR_OP(kdmatt, x22, x23, x8, 0x0000000000000000, 0xbffffffeffffffef, 0x5555fbff0010ffef, x23, x3, 144, x6)

inst_10:
// rs1==x10, rs2==x17, rd==x23, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h0_val == -1025, rs1_h2_val == -21846, rs2_h1_val == -9, rs1_h1_val == 2, rs1_h0_val == 16, rs2_h3_val == -21846
// opcode: kdmatt ; op1:x10; op2:x17; dest:x23; op1val:0xc000aaaa00020010;  op2val:0xaaaaff7ffff7fbff
TEST_PKRR_OP(kdmatt, x23, x10, x17, 0x0000000000000000, 0xc000aaaa00020010, 0xaaaaff7ffff7fbff, x10, x3, 160, x6)

inst_11:
// rs1==x13, rs2==x1, rd==x0, rs2_h3_val == 32767, rs2_h1_val == 4, rs2_h0_val == -4097, rs1_h2_val == 4096, rs1_h1_val == 16
// opcode: kdmatt ; op1:x13; op2:x1; dest:x0; op1val:0x0410000010c000;  op2val:0x7fff40000004efff
TEST_PKRR_OP(kdmatt, x0, x13, x1, 0x0000000000000000, 0x0410000010c000, 0x7fff40000004efff, x13, x3, 176, x6)

inst_12:
// rs1==x21, rs2==x27, rd==x1, rs2_h3_val == -16385, rs1_h1_val == 1024, rs1_h3_val == 0, rs2_h1_val == -8193, rs1_h0_val == 0
// opcode: kdmatt ; op1:x21; op2:x27; dest:x1; op1val:0x00000604000000;  op2val:0xbfff7fffdfff0009
TEST_PKRR_OP(kdmatt, x1, x21, x27, 0x0000000000000000, 0x00000604000000, 0xbfff7fffdfff0009, x21, x3, 192, x6)

inst_13:
// rs1==x22, rs2==x5, rd==x2, rs2_h3_val == -8193, rs2_h0_val == 16, rs1_h1_val == -32768, rs1_h2_val == 512, rs1_h3_val == 4096
// opcode: kdmatt ; op1:x22; op2:x5; dest:x2; op1val:0x100002008000c000;  op2val:0xdfff0002fffa0010
TEST_PKRR_OP(kdmatt, x2, x22, x5, 0x0000000000000000, 0x100002008000c000, 0xdfff0002fffa0010, x22, x3, 208, x6)

inst_14:
// rs1==x27, rs2==x10, rd==x7, rs2_h3_val == -2049, rs2_h0_val == 8, rs2_h2_val == -33, rs1_h2_val == -1, rs1_h0_val == 21845, rs1_h1_val == -9
// opcode: kdmatt ; op1:x27; op2:x10; dest:x7; op1val:0xfffefffffff75555;  op2val:0xf7ffffdffffe0008
TEST_PKRR_OP(kdmatt, x7, x27, x10, 0x0000000000000000, 0xfffefffffff75555, 0xf7ffffdffffe0008, x27, x3, 224, x6)

inst_15:
// rs1==x4, rs2==x19, rd==x28, rs2_h3_val == -1025, rs2_h0_val == 16384, rs2_h1_val == -21846, rs2_h2_val == -5, rs1_h1_val == 32
// opcode: kdmatt ; op1:x4; op2:x19; dest:x28; op1val:0x00000700205555;  op2val:0xfbfffffbaaaa4000
TEST_PKRR_OP(kdmatt, x28, x4, x19, 0x0000000000000000, 0x00000700205555, 0xfbfffffbaaaa4000, x4, x3, 240, x6)

inst_16:
// rs1==x31, rs2==x9, rd==x21, rs2_h3_val == -513, rs2_h1_val == 128, rs1_h0_val == 256
// opcode: kdmatt ; op1:x31; op2:x9; dest:x21; op1val:0x06555580000100;  op2val:0xfdff40000080dfff
TEST_PKRR_OP(kdmatt, x21, x31, x9, 0x0000000000000000, 0x06555580000100, 0xfdff40000080dfff, x31, x3, 256, x6)

inst_17:
// rs1==x1, rs2==x29, rd==x14, rs2_h3_val == -257, rs1_h2_val == -2049, rs2_h0_val == -129
// opcode: kdmatt ; op1:x1; op2:x29; dest:x14; op1val:0x3ffff7fffff9fffc;  op2val:0xfeff3fff0007ff7f
TEST_PKRR_OP(kdmatt, x14, x1, x29, 0x0000000000000000, 0x3ffff7fffff9fffc, 0xfeff3fff0007ff7f, x1, x3, 272, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_18:
// rs1==x8, rs2==x4, rd==x11, rs2_h3_val == -129, rs2_h1_val == -5, rs1_h3_val == 512, rs2_h0_val == -2049, rs1_h2_val == -16385
// opcode: kdmatt ; op1:x8; op2:x4; dest:x11; op1val:0x200bfff0010c000;  op2val:0xff7f0007fffbf7ff
TEST_PKRR_OP(kdmatt, x11, x8, x4, 0x0000000000000000, 0x200bfff0010c000, 0xff7f0007fffbf7ff, x8, x1, 0, x7)

inst_19:
// rs1==x5, rs2==x3, rd==x30, rs2_h3_val == -65, rs1_h2_val == 64, rs1_h0_val == 4096, rs2_h1_val == -257, rs1_h3_val == 128
// opcode: kdmatt ; op1:x5; op2:x3; dest:x30; op1val:0x80004000031000;  op2val:0xffbfffdffeff0005
TEST_PKRR_OP(kdmatt, x30, x5, x3, 0x0000000000000000, 0x80004000031000, 0xffbfffdffeff0005, x5, x1, 16, x7)

inst_20:
// rs1==x0, rs2==x28, rd==x31, rs2_h3_val == -33, rs1_h2_val == -8193, rs1_h3_val == 32767, rs1_h0_val == 16384
// opcode: kdmatt ; op1:x0; op2:x28; dest:x31; op1val:0x7fffdfff80004000;  op2val:0xffdfc000ffdf4000
TEST_PKRR_OP(kdmatt, x31, x0, x28, 0x0000000000000000, 0x7fffdfff80004000, 0xffdfc000ffdf4000, x0, x1, 32, x7)

inst_21:
// rs1==x3, rs2==x25, rd==x29, rs2_h3_val == -17, rs1_h1_val == -257, rs1_h0_val == 8
// opcode: kdmatt ; op1:x3; op2:x25; dest:x29; op1val:0xfffdaaaafeff0008;  op2val:0xffef7fff3fffdfff
TEST_PKRR_OP(kdmatt, x29, x3, x25, 0x0000000000000000, 0xfffdaaaafeff0008, 0xffef7fff3fffdfff, x3, x1, 48, x7)

inst_22:
// rs1==x29, rs2==x21, rd==x27, rs2_h3_val == -9, rs1_h2_val == 128, rs1_h3_val == -2049
// opcode: kdmatt ; op1:x29; op2:x21; dest:x27; op1val:0xf7ff00800006fbff;  op2val:0xfff7fffbfffeefff
TEST_PKRR_OP(kdmatt, x27, x29, x21, 0x0000000000000000, 0xf7ff00800006fbff, 0xfff7fffbfffeefff, x29, x1, 64, x7)

inst_23:
// rs1==x2, rs2==x23, rd==x18, rs2_h3_val == -5, rs1_h2_val == -5, rs2_h2_val == -513, rs1_h1_val == -4097, rs1_h0_val == 2
// opcode: kdmatt ; op1:x2; op2:x23; dest:x18; op1val:0x7ffffffbefff0002;  op2val:0xfffbfdfffff84000
TEST_PKRR_OP(kdmatt, x18, x2, x23, 0x0000000000000000, 0x7ffffffbefff0002, 0xfffbfdfffff84000, x2, x1, 80, x7)

inst_24:
// rs1==x14, rs2==x30, rd==x19, rs2_h3_val == -32768, rs2_h2_val == 2048
// opcode: kdmatt ; op1:x14; op2:x30; dest:x19; op1val:0x050007fff60005;  op2val:0x800008000002fffc
TEST_PKRR_OP(kdmatt, x19, x14, x30, 0x0000000000000000, 0x050007fff60005, 0x800008000002fffc, x14, x1, 96, x7)

inst_25:
// rs1==x18, rs2==x31, rd==x3, rs2_h3_val == 16384, rs2_h1_val == 1024, rs1_h0_val == -129
// opcode: kdmatt ; op1:x18; op2:x31; dest:x3; op1val:0xfff800050010ff7f;  op2val:0x4000fff60400fff8
TEST_PKRR_OP(kdmatt, x3, x18, x31, 0x0000000000000000, 0xfff800050010ff7f, 0x4000fff60400fff8, x18, x1, 112, x7)

inst_26:
// rs1==x24, rs2==x12, rd==x13, rs2_h3_val == 8192, rs1_h2_val == -17, rs1_h1_val == 0, rs2_h0_val == 4
// opcode: kdmatt ; op1:x24; op2:x12; dest:x13; op1val:0xfeffffef00000010;  op2val:0x20000003bfff0004
TEST_PKRR_OP(kdmatt, x13, x24, x12, 0x0000000000000000, 0xfeffffef00000010, 0x20000003bfff0004, x24, x1, 128, x7)

inst_27:
// rs1==x25, rs2==x26, rd==x6, rs2_h3_val == 4096, rs2_h0_val == -1, rs1_h1_val == -513, rs2_h1_val == -4097, rs1_h0_val == -16385
// opcode: kdmatt ; op1:x25; op2:x26; dest:x6; op1val:0x10000400fdffbfff;  op2val:0x10000005efffffff
TEST_PKRR_OP(kdmatt, x6, x25, x26, 0x0000000000000000, 0x10000400fdffbfff, 0x10000005efffffff, x25, x1, 144, x7)

inst_28:
// rs1==x17, rs2==x11, rd==x4, rs2_h3_val == 1024, rs1_h3_val == -21846, rs1_h0_val == 2048, rs2_h2_val == 8, rs1_h1_val == -8193
// opcode: kdmatt ; op1:x17; op2:x11; dest:x4; op1val:0xaaaafffcdfff0800;  op2val:0x4000008c000f7ff
TEST_PKRR_OP(kdmatt, x4, x17, x11, 0x0000000000000000, 0xaaaafffcdfff0800, 0x4000008c000f7ff, x17, x1, 160, x7)

inst_29:
// rs1==x28, rs2==x6, rd==x25, rs2_h3_val == 512, rs1_h1_val == 4096, rs2_h2_val == 256, rs2_h0_val == -32768
// opcode: kdmatt ; op1:x28; op2:x6; dest:x25; op1val:0xc000dfff10000003;  op2val:0x200010000058000
TEST_PKRR_OP(kdmatt, x25, x28, x6, 0x0000000000000000, 0xc000dfff10000003, 0x200010000058000, x28, x1, 176, x7)

inst_30:
// rs1==x20, rs2==x18, rd==x9, rs2_h3_val == 256, rs2_h2_val == 32, rs2_h0_val == -3
// opcode: kdmatt ; op1:x20; op2:x18; dest:x9; op1val:0x10000005c0000005;  op2val:0x1000020f7fffffd
TEST_PKRR_OP(kdmatt, x9, x20, x18, 0x0000000000000000, 0x10000005c0000005, 0x1000020f7fffffd, x20, x1, 192, x7)

inst_31:
// rs1==x6, rs2==x13, rd==x17, rs2_h3_val == 128, rs2_h1_val == 512, rs1_h3_val == -513, rs2_h2_val == 512
// opcode: kdmatt ; op1:x6; op2:x13; dest:x17; op1val:0xfdffaaaaf7fffff6;  op2val:0x80020002000007
TEST_PKRR_OP(kdmatt, x17, x6, x13, 0x0000000000000000, 0xfdffaaaaf7fffff6, 0x80020002000007, x6, x1, 208, x7)

inst_32:
// rs2_h3_val == 64, rs1_h2_val == -4097, rs1_h1_val == -17, rs2_h2_val == 128
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x09efffffef0080;  op2val:0x4000803fff3fff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x09efffffef0080, 0x4000803fff3fff, x30, x1, 224, x7)

inst_33:
// rs2_h3_val == 32, rs2_h2_val == -1
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x40fffa00060010;  op2val:0x20ffff00033fff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x40fffa00060010, 0x20ffff00033fff, x30, x1, 240, x7)

inst_34:
// rs1_h1_val == -3, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffbfffdfffe;  op2val:0xeffffff9bfffc000
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xfffafffbfffdfffe, 0xeffffff9bfffc000, x30, x1, 256, x7)

inst_35:
// rs1_h1_val == -2, rs1_h2_val == 16384, rs1_h0_val == -4097
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff4000fffeefff;  op2val:0x090003aaaa1000
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xf7ff4000fffeefff, 0x090003aaaa1000, x30, x1, 272, x7)

inst_36:
// rs1_h1_val == 16384, rs2_h1_val == -32768
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x3fff00024000fbff;  op2val:0x20400080000005
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x3fff00024000fbff, 0x20400080000005, x30, x1, 288, x7)

inst_37:
// rs1_h1_val == 8192, rs2_h2_val == 8192, rs2_h1_val == 2048
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffd00032000fffc;  op2val:0xff7f200008000009
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xfffd00032000fffc, 0xff7f200008000009, x30, x1, 304, x7)

inst_38:
// rs1_h1_val == 2048, rs2_h0_val == 64, rs2_h2_val == -2, rs1_h0_val == 32767
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000208007fff;  op2val:0xf7fffffe3fff0040
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xf7ff000208007fff, 0xf7fffffe3fff0040, x30, x1, 320, x7)

inst_39:
// rs1_h1_val == 256, rs1_h0_val == -1
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x03fff60100ffff;  op2val:0xc000bfffffdf0003
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x03fff60100ffff, 0xc000bfffffdf0003, x30, x1, 336, x7)

inst_40:
// rs1_h1_val == 64, rs2_h1_val == 21845
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x80fff900400010;  op2val:0x3fffffdf5555fffa
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x80fff900400010, 0x3fffffdf5555fffa, x30, x1, 352, x7)

inst_41:
// rs1_h1_val == 8, rs2_h2_val == 4096
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xbffff7ff0008fffa;  op2val:0x0310008000ffbf
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xbffff7ff0008fffa, 0x0310008000ffbf, x30, x1, 368, x7)

inst_42:
// rs1_h1_val == 4, rs2_h2_val == 0
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffdf00040080;  op2val:0xffbf0000fffaffef
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x1000ffdf00040080, 0xffbf0000fffaffef, x30, x1, 384, x7)

inst_43:
// rs1_h0_val == -21846, rs2_h0_val == 32
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffefdffffffdaaaa;  op2val:0x7fff000020000020
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xffefdffffffdaaaa, 0x7fff000020000020, x30, x1, 400, x7)

inst_44:
// rs1_h0_val == -8193, rs1_h3_val == -8193
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffbfffcdfff;  op2val:0xfdff080000030002
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xdffffffbfffcdfff, 0xfdff080000030002, x30, x1, 416, x7)

inst_45:
// rs1_h0_val == -2049, rs2_h1_val == 1, rs1_h1_val == 21845, rs1_h2_val == -3
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x80fffd5555f7ff;  op2val:0x400000060001ffdf
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x80fffd5555f7ff, 0x400000060001ffdf, x30, x1, 432, x7)

inst_46:
// rs1_h0_val == -257, rs1_h3_val == -65, rs2_h2_val == 1024
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffbfdfffffeffeff;  op2val:0xffdf0400fffaf7ff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xffbfdfffffeffeff, 0xffdf0400fffaf7ff, x30, x1, 448, x7)

inst_47:
// rs1_h0_val == -65, rs2_h2_val == -65, rs2_h1_val == 0, rs2_h0_val == -9, rs1_h3_val == -1025
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfbffaaaa0080ffbf;  op2val:0xffbfffbf0000fff7
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xfbffaaaa0080ffbf, 0xffbfffbf0000fff7, x30, x1, 464, x7)

inst_48:
// rs1_h0_val == -33, rs2_h0_val == -21846, rs2_h2_val == 1
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0006fffeffdf;  op2val:0x10000010200aaaa
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xf7ff0006fffeffdf, 0x10000010200aaaa, x30, x1, 480, x7)

inst_49:
// rs1_h0_val == -9, rs1_h1_val == -16385, rs1_h2_val == 256
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x800100bffffff7;  op2val:0x06002000020008
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x800100bffffff7, 0x06002000020008, x30, x1, 496, x7)

inst_50:
// rs1_h0_val == -5, rs2_h2_val == 21845
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x8040000007fffb;  op2val:0xfff95555bfff0008
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x8040000007fffb, 0xfff95555bfff0008, x30, x1, 512, x7)

inst_51:
// rs1_h0_val == 8192, rs2_h1_val == -129
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffe020000072000;  op2val:0x1000006ff7f0010
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xfffe020000072000, 0x1000006ff7f0010, x30, x1, 528, x7)

inst_52:
// rs1_h0_val == 1024, rs1_h3_val == 8
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x08f7ff00050400;  op2val:0xfffafffe55550003
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x08f7ff00050400, 0xfffafffe55550003, x30, x1, 544, x7)

inst_53:
// rs1_h0_val == 512, rs2_h0_val == 1024
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x10000080ffbf0200;  op2val:0x40fbfffffe0400
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x10000080ffbf0200, 0x40fbfffffe0400, x30, x1, 560, x7)

inst_54:
// rs1_h0_val == 64, rs1_h2_val == -9, rs2_h1_val == -1
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x03fff7ffef0040;  op2val:0x10004000ffffffef
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x03fff7ffef0040, 0x10004000ffffffef, x30, x1, 576, x7)

inst_55:
// rs1_h0_val == 32, rs2_h1_val == -1025, rs1_h3_val == 256, rs2_h0_val == 128
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x1000400f7ff0020;  op2val:0xbffffffffbff0080
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x1000400f7ff0020, 0xbffffffffbff0080, x30, x1, 592, x7)

inst_56:
// rs1_h0_val == 4, rs2_h0_val == -16385, rs2_h2_val == -8193
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x80fffafeff0004;  op2val:0x09dffffffcbfff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x80fffafeff0004, 0x09dffffffcbfff, x30, x1, 608, x7)

inst_57:
// rs1_h0_val == 1, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x00fff900200001;  op2val:0x2000000700800005
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x00fff900200001, 0x2000000700800005, x30, x1, 624, x7)

inst_58:
// rs2_h3_val == 16, rs1_h2_val == -32768
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x08800008007fff;  op2val:0x10ffffff7f0020
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x08800008007fff, 0x10ffffff7f0020, x30, x1, 640, x7)

inst_59:
// rs2_h0_val == 21845, rs2_h1_val == -3, rs1_h3_val == -33
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffdf0009fffc;  op2val:0x042000fffd5555
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xffdfffdf0009fffc, 0x042000fffd5555, x30, x1, 656, x7)

inst_60:
// rs2_h0_val == 32767, rs1_h2_val == 32767
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfbff7ffffffd0010;  op2val:0x10fffc08007fff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xfbff7ffffffd0010, 0x10fffc08007fff, x30, x1, 672, x7)

inst_61:
// rs2_h0_val == -513, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x803fff00098000;  op2val:0x07fffcfffdfdff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x803fff00098000, 0x07fffcfffdfdff, x30, x1, 688, x7)

inst_62:
// rs2_h0_val == -257, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfeffaaaafff8fbff;  op2val:0xbffffffefff8feff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xfeffaaaafff8fbff, 0xbffffffefff8feff, x30, x1, 704, x7)

inst_63:
// rs2_h0_val == -5, rs2_h2_val == 4, rs1_h1_val == -33
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffbffffdffffa;  op2val:0xaaaa0004fff7fffb
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xf7fffbffffdffffa, 0xaaaa0004fff7fffb, x30, x1, 720, x7)

inst_64:
// rs2_h0_val == 8192, rs2_h1_val == 32767
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfdff02000007fff6;  op2val:0xff7f00017fff2000
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xfdff02000007fff6, 0xff7f00017fff2000, x30, x1, 736, x7)

inst_65:
// rs2_h0_val == 2048, rs2_h2_val == -3, rs2_h3_val == 8
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffc00800002;  op2val:0x08fffdffdf0800
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xfffdfffc00800002, 0x08fffdffdf0800, x30, x1, 752, x7)

inst_66:
// rs2_h0_val == 512, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffcfffefffa;  op2val:0x04bfff00040200
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xffbffffcfffefffa, 0x04bfff00040200, x30, x1, 768, x7)

inst_67:
// rs2_h0_val == 256, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffefff9ffbffffa;  op2val:0xfffbefff00050100
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xfffefff9ffbffffa, 0xfffbefff00050100, x30, x1, 784, x7)

inst_68:
// rs2_h0_val == 1, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x1000006fff60000;  op2val:0x40fffa02000001
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x1000006fff60000, 0x40fffa02000001, x30, x1, 800, x7)

inst_69:
// rs2_h0_val == 0, rs2_h1_val == -513, rs1_h3_val == 16384, rs2_h2_val == -32768
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x40008000fff70200;  op2val:0x098000fdff0000
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x40008000fff70200, 0x098000fdff0000, x30, x1, 816, x7)

inst_70:
// rs1_h3_val == 21845, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffefdfffffe;  op2val:0x40080000100003
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x5555fffefdfffffe, 0x40080000100003, x30, x1, 832, x7)

inst_71:
// rs1_h3_val == -9, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff704000400c000;  op2val:0x0900047fff8000
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xfff704000400c000, 0x0900047fff8000, x30, x1, 848, x7)

inst_72:
// rs1_h3_val == -5, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffb020040000010;  op2val:0xfffefffbfbff0004
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xfffb020040000010, 0xfffefffbfbff0004, x30, x1, 864, x7)

inst_73:
// rs2_h3_val == 2, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffffff70003;  op2val:0x02fffb00020003
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x3ffffffffff70003, 0x02fffb00020003, x30, x1, 880, x7)

inst_74:
// rs2_h3_val == 1, rs1_h1_val == 32767
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffa7ffffff8;  op2val:0x01fff8fffbffbf
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xfff8fffa7ffffff8, 0x01fff8fffbffbf, x30, x1, 896, x7)

inst_75:
// rs2_h3_val == 0, rs1_h3_val == 2
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x02dfff8000dfff;  op2val:0x000200bfff0006
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x02dfff8000dfff, 0x000200bfff0006, x30, x1, 912, x7)

inst_76:
// rs1_h3_val == -32768, rs1_h2_val == 32
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x800000207fff0007;  op2val:0x07c000fdffdfff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x800000207fff0007, 0x07c000fdffdfff, x30, x1, 928, x7)

inst_77:
// rs1_h3_val == 1024, rs1_h2_val == -513
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x400fdff00098000;  op2val:0xffef0009fffb0020
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x400fdff00098000, 0xffef0009fffb0020, x30, x1, 944, x7)

inst_78:
// rs1_h3_val == 2048, rs1_h2_val == 4
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x800000400037fff;  op2val:0xffdf0010fbff0004
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x800000400037fff, 0xffdf0010fbff0004, x30, x1, 960, x7)

inst_79:
// rs2_h2_val == -2049, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x060080fff91000;  op2val:0x04f7ff80000800
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x060080fff91000, 0x04f7ff80000800, x30, x1, 976, x7)

inst_80:
// rs1_h3_val == 32, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x20fbff00090010;  op2val:0xfffcdfff20000010
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x20fbff00090010, 0xfffcdfff20000010, x30, x1, 992, x7)

inst_81:
// rs2_h2_val == -257, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffef00201000aaaa;  op2val:0xffeffeff0800fbff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xffef00201000aaaa, 0xffeffeff0800fbff, x30, x1, 1008, x7)

inst_82:
// rs1_h3_val == 16, rs2_h1_val == 16384
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x1002000080fffc;  op2val:0xffdf008040000200
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x1002000080fffc, 0xffdf008040000200, x30, x1, 1024, x7)

inst_83:
// rs2_h2_val == -17, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff900030002bfff;  op2val:0x4000ffef0003efff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xfff900030002bfff, 0x4000ffef0003efff, x30, x1, 1040, x7)

inst_84:
// rs1_h3_val == 1, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x01fffd3fff0000;  op2val:0x7ffffffc0002ffbf
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x01fffd3fff0000, 0x7ffffffc0002ffbf, x30, x1, 1056, x7)

inst_85:
// rs2_h2_val == -9, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x057fff0000aaaa;  op2val:0xfdfffff74000bfff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x057fff0000aaaa, 0xfdfffff74000bfff, x30, x1, 1072, x7)

inst_86:
// rs1_h3_val == -1, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffffdffff;  op2val:0x800004003ffffbff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffdffff, 0x800004003ffffbff, x30, x1, 1088, x7)

inst_87:
// rs2_h2_val == 64, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x04fffcfff62000;  op2val:0x08004008002000
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x04fffcfff62000, 0x08004008002000, x30, x1, 1104, x7)

inst_88:
// rs1_h2_val == -65, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x80ffbfc000fffc;  op2val:0xfffcffefbffffffe
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x80ffbfc000fffc, 0xfffcffefbffffffe, x30, x1, 1120, x7)

inst_89:
// rs1_h2_val == 8192, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xefff200000200010;  op2val:0xfffafff8feff0200
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xefff200000200010, 0xfffafff8feff0200, x30, x1, 1136, x7)

inst_90:
// rs1_h2_val == 2048, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x2000800fff8ffff;  op2val:0x80fdff20000800
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x2000800fff8ffff, 0x80fdff20000800, x30, x1, 1152, x7)

inst_91:
// rs1_h2_val == 16, rs2_h2_val == -21846
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfbff001020000100;  op2val:0x5555aaaafdff0009
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xfbff001020000100, 0x5555aaaafdff0009, x30, x1, 1168, x7)

inst_92:
// rs1_h2_val == 8, rs2_h1_val == 256
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0008f7ffff7f;  op2val:0x8000001001000200
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xfeff0008f7ffff7f, 0x8000001001000200, x30, x1, 1184, x7)

inst_93:
// rs2_h1_val == -65, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffafff93ffffff8;  op2val:0xffff0400ffbf0008
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xfffafff93ffffff8, 0xffff0400ffbf0008, x30, x1, 1200, x7)

inst_94:
// rs1_h2_val == 1, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x020001bfffaaaa;  op2val:0x40000400fff60004
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x020001bfffaaaa, 0x40000400fff60004, x30, x1, 1216, x7)

inst_95:
// rs2_h1_val == 32, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x080008fffb0009;  op2val:0x4000bfff00200002
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x080008fffb0009, 0x4000bfff00200002, x30, x1, 1232, x7)

inst_96:
// rs2_h1_val == 4096, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x800080bffffffb;  op2val:0x2004001000ffdf
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x800080bffffffb, 0x2004001000ffdf, x30, x1, 1248, x7)

inst_97:
// rs1_h1_val == -1025, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffafbff0009;  op2val:0x40555500030040
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xffbffffafbff0009, 0x40555500030040, x30, x1, 1264, x7)

inst_98:
// rs1_h1_val == -129, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffaff7f0001;  op2val:0x1000fffa40000007
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xfff9fffaff7f0001, 0x1000fffa40000007, x30, x1, 1280, x7)

inst_99:
// rs2_h1_val == 64, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x2000005c0000000;  op2val:0x100000200040dfff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x2000005c0000000, 0x100000200040dfff, x30, x1, 1296, x7)

inst_100:
// rs1_h3_val == 8192, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x2000bfff5555c000;  op2val:0x10fbff0010fdff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x2000bfff5555c000, 0x10fbff0010fdff, x30, x1, 1312, x7)

inst_101:
// rs2_h1_val == 8, 
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xc000dffffffc0400;  op2val:0xdfffdfff00080100
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xc000dffffffc0400, 0xdfffdfff00080100, x30, x1, 1328, x7)

inst_102:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h0_val == -3, rs1_h3_val == 4, rs2_h2_val == 16384, rs2_h0_val == -65, rs2_h1_val == 8192, rs1_h2_val == -33, rs1_h1_val == -65, rs2_h3_val == -4097
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x04ffdfffbffffd;  op2val:0xefff40002000ffbf
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x04ffdfffbffffd, 0xefff40002000ffbf, x30, x1, 1344, x7)

inst_103:
// rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == 2, rs2_h0_val == 2, rs2_h3_val == -3, rs1_h1_val == 512, rs1_h2_val == 2, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h3_val == -129, rs1_h0_val == -1025
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0xff7f00020200fbff;  op2val:0xfffd400000020002
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0xff7f00020200fbff, 0xfffd400000020002, x30, x1, 1360, x7)

inst_104:
// rs2_h3_val == 32767, rs2_h1_val == 4, rs2_h0_val == -4097, rs1_h2_val == 4096, rs1_h1_val == 16
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x0410000010c000;  op2val:0x7fff40000004efff
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x0410000010c000, 0x7fff40000004efff, x30, x1, 1376, x7)

inst_105:
// rs2_h3_val == -33, rs1_h2_val == -8193, rs1_h3_val == 32767, rs1_h0_val == 16384
// opcode: kdmatt ; op1:x30; op2:x29; dest:x31; op1val:0x7fffdfff80004000;  op2val:0xffdfc000ffdf4000
TEST_PKRR_OP(kdmatt, x31, x30, x29, 0x0000000000000000, 0x7fffdfff80004000, 0xffdfc000ffdf4000, x30, x1, 1392, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 176*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
