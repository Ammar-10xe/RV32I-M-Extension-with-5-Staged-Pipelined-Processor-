
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmsda instruction of the RISC-V RV64PZicsr extension for the kmsda covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmsda)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x4, rs2==x15, rd==x4, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h3_val == -8193, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val == -16385, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 16384, rs2_h3_val == 0
// opcode: kmsda ; op1:x4; op2:x15; dest:x4; op1val:0xdfffbffffffc8000;  op2val:0x000007fff64000
TEST_PKRR_OP(kmsda, x4, x4, x15, 0x0000000000000000, 0xdfffbffffffc8000, 0x000007fff64000, x4, x2, 0, x6)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x13, rs2==x16, rd==x24, rs1_h3_val == rs2_h3_val, rs2_h3_val == -257, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val == 512, rs2_h2_val == -33, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h0_val == -1025, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h3_val == -257, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 4096, rs1_h0_val == -129
// opcode: kmsda ; op1:x13; op2:x16; dest:x24; op1val:0xfeff0200c000ff7f;  op2val:0xfeffffdf1000fbff
TEST_PKRR_OP(kmsda, x24, x13, x16, 0x0000000000000000, 0xfeff0200c000ff7f, 0xfeffffdf1000fbff, x13, x2, 16, x6)

inst_2:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x10, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == -2049, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h3_val == 8, rs2_h0_val == 8192, rs1_h3_val == -32768
// opcode: kmsda ; op1:x26; op2:x26; dest:x10; op1val:0x800000050009c000;  op2val:0x080007f7ff2000
TEST_PKRR_OP(kmsda, x10, x26, x26, 0x0000000000000000, 0x800000050009c000, 0x080007f7ff2000, x26, x2, 32, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x22, rs2==x22, rd==x22, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h1_val == 4096, rs2_h2_val == -65, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h3_val == 21845, rs2_h1_val == 64, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h3_val == -1, rs1_h2_val == -3
// opcode: kmsda ; op1:x22; op2:x22; dest:x22; op1val:0x5555fffd10000006;  op2val:0xffffffbf0040fff6
TEST_PKRR_OP(kmsda, x22, x22, x22, 0x0000000000000000, 0x5555fffd10000006, 0xffffffbf0040fff6, x22, x2, 48, x6)

inst_4:
// rs2 == rd != rs1, rs1==x3, rs2==x18, rd==x18, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 128, rs2_h0_val == -2049, rs1_h0_val == 1024, rs1_h2_val == -2049, rs2_h1_val == 512
// opcode: kmsda ; op1:x3; op2:x18; dest:x18; op1val:0x80f7fffff60400;  op2val:0x3ffffff60200f7ff
TEST_PKRR_OP(kmsda, x18, x3, x18, 0x0000000000000000, 0x80f7fffff60400, 0x3ffffff60200f7ff, x3, x2, 64, x6)

inst_5:
// rs1==x24, rs2==x7, rd==x14, rs1_h2_val == rs2_h2_val, rs2_h1_val == -16385, rs2_h3_val == -9, rs2_h2_val == -5, rs1_h1_val == 4, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == -5, rs1_h3_val == 2048
// opcode: kmsda ; op1:x24; op2:x7; dest:x14; op1val:0x800fffb00040400;  op2val:0xfff7fffbbfff4000
TEST_PKRR_OP(kmsda, x14, x24, x7, 0x0000000000000000, 0x800fffb00040400, 0xfff7fffbbfff4000, x24, x2, 80, x6)

inst_6:
// rs1==x10, rs2==x25, rd==x19, rs1_h1_val == rs2_h1_val, rs2_h1_val == -21846, rs1_h3_val == 256, rs1_h2_val == 2048, rs2_h3_val == -3, rs1_h1_val == -21846, rs2_h0_val == -3, rs2_h2_val == 128
// opcode: kmsda ; op1:x10; op2:x25; dest:x19; op1val:0x1000800aaaafff8;  op2val:0xfffd0080aaaafffd
TEST_PKRR_OP(kmsda, x19, x10, x25, 0x0000000000000000, 0x1000800aaaafff8, 0xfffd0080aaaafffd, x10, x2, 96, x6)

inst_7:
// rs1==x17, rs2==x3, rd==x31, rs1_h0_val == rs2_h0_val, rs2_h2_val == 16384, rs2_h1_val == -2, rs2_h3_val == 128, rs1_h1_val == -8193
// opcode: kmsda ; op1:x17; op2:x3; dest:x31; op1val:0xfff6fffbdffffffc;  op2val:0x804000fffefffc
TEST_PKRR_OP(kmsda, x31, x17, x3, 0x0000000000000000, 0xfff6fffbdffffffc, 0x804000fffefffc, x17, x2, 112, x6)

inst_8:
// rs1==x20, rs2==x17, rd==x8, rs2_h3_val == -21846, rs1_h0_val == -33, rs1_h3_val == -129, rs1_h2_val == -257, rs2_h0_val == 32767
// opcode: kmsda ; op1:x20; op2:x17; dest:x8; op1val:0xff7ffeff3fffffdf;  op2val:0xaaaa0007fff87fff
TEST_PKRR_OP(kmsda, x8, x20, x17, 0x0000000000000000, 0xff7ffeff3fffffdf, 0xaaaa0007fff87fff, x20, x2, 128, x6)

inst_9:
// rs1==x19, rs2==x31, rd==x13, rs2_h3_val == 21845, rs1_h3_val == 64, rs2_h2_val == 256, rs1_h2_val == -129, rs1_h1_val == -129, rs2_h1_val == 32, rs1_h0_val == -257
// opcode: kmsda ; op1:x19; op2:x31; dest:x13; op1val:0x40ff7fff7ffeff;  op2val:0x555501000020fff8
TEST_PKRR_OP(kmsda, x13, x19, x31, 0x0000000000000000, 0x40ff7fff7ffeff, 0x555501000020fff8, x19, x2, 144, x6)

inst_10:
// rs1==x7, rs2==x23, rd==x20, rs2_h3_val == 32767, rs1_h0_val == 4, rs2_h0_val == 8, rs2_h1_val == -33
// opcode: kmsda ; op1:x7; op2:x23; dest:x20; op1val:0x05fffdc0000004;  op2val:0x7fff0009ffdf0008
TEST_PKRR_OP(kmsda, x20, x7, x23, 0x0000000000000000, 0x05fffdc0000004, 0x7fff0009ffdf0008, x7, x2, 160, x6)

inst_11:
// rs1==x15, rs2==x13, rd==x16, rs2_h3_val == -16385, rs1_h3_val == 8, rs1_h1_val == 256, rs1_h2_val == 16, rs1_h0_val == 512, rs2_h0_val == -17
// opcode: kmsda ; op1:x15; op2:x13; dest:x16; op1val:0x08001001000200;  op2val:0xbffffff60007ffef
TEST_PKRR_OP(kmsda, x16, x15, x13, 0x0000000000000000, 0x08001001000200, 0xbffffff60007ffef, x15, x2, 176, x6)

inst_12:
// rs1==x5, rs2==x27, rd==x9, rs2_h3_val == -8193, rs1_h3_val == 1024, rs2_h1_val == 21845, rs1_h1_val == -33, rs1_h2_val == 32767
// opcode: kmsda ; op1:x5; op2:x27; dest:x9; op1val:0x4007fffffdffffa;  op2val:0xdfffffbf5555fffc
TEST_PKRR_OP(kmsda, x9, x5, x27, 0x0000000000000000, 0x4007fffffdffffa, 0xdfffffbf5555fffc, x5, x2, 192, x6)

inst_13:
// rs1==x8, rs2==x29, rd==x1, rs2_h3_val == -4097, rs1_h0_val == -2
// opcode: kmsda ; op1:x8; op2:x29; dest:x1; op1val:0xfff608000004fffe;  op2val:0xeffffff800092000
TEST_PKRR_OP(kmsda, x1, x8, x29, 0x0000000000000000, 0xfff608000004fffe, 0xeffffff800092000, x8, x2, 208, x6)

inst_14:
// rs1==x27, rs2==x30, rd==x5, rs2_h3_val == -2049, rs1_h3_val == -21846, rs2_h2_val == -1025, rs1_h1_val == 8
// opcode: kmsda ; op1:x27; op2:x30; dest:x5; op1val:0xaaaa00050008fffe;  op2val:0xf7fffbffbffffff8
TEST_PKRR_OP(kmsda, x5, x27, x30, 0x0000000000000000, 0xaaaa00050008fffe, 0xf7fffbffbffffff8, x27, x2, 224, x6)

inst_15:
// rs1==x1, rs2==x9, rd==x12, rs2_h3_val == -1025, rs2_h2_val == -4097, rs2_h1_val == -1025, rs1_h3_val == 1, rs2_h0_val == -9, rs1_h1_val == 0
// opcode: kmsda ; op1:x1; op2:x9; dest:x12; op1val:0x01fff600000400;  op2val:0xfbffeffffbfffff7
TEST_PKRR_OP(kmsda, x12, x1, x9, 0x0000000000000000, 0x01fff600000400, 0xfbffeffffbfffff7, x1, x2, 240, x6)

inst_16:
// rs1==x28, rs2==x8, rd==x15, rs2_h3_val == -513, rs2_h0_val == 32, rs1_h1_val == 8192, rs2_h2_val == -32768, rs1_h3_val == 16384, rs2_h1_val == 8
// opcode: kmsda ; op1:x28; op2:x8; dest:x15; op1val:0x4000feff2000fffc;  op2val:0xfdff800000080020
TEST_PKRR_OP(kmsda, x15, x28, x8, 0x0000000000000000, 0x4000feff2000fffc, 0xfdff800000080020, x28, x2, 256, x13)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_17:
// rs1==x31, rs2==x4, rd==x25, rs2_h3_val == -129, rs2_h2_val == 64, rs1_h3_val == -3, rs2_h0_val == -2
// opcode: kmsda ; op1:x31; op2:x4; dest:x25; op1val:0xfffdfffa0007fffe;  op2val:0xff7f00403ffffffe
TEST_PKRR_OP(kmsda, x25, x31, x4, 0x0000000000000000, 0xfffdfffa0007fffe, 0xff7f00403ffffffe, x31, x8, 0, x13)

inst_18:
// rs1==x9, rs2==x12, rd==x23, rs2_h3_val == -65, rs1_h2_val == 8192, rs1_h0_val == -9, rs1_h1_val == -257, rs2_h1_val == 256, rs2_h2_val == 4
// opcode: kmsda ; op1:x9; op2:x12; dest:x23; op1val:0xaaaa2000fefffff7;  op2val:0xffbf00040100fbff
TEST_PKRR_OP(kmsda, x23, x9, x12, 0x0000000000000000, 0xaaaa2000fefffff7, 0xffbf00040100fbff, x9, x8, 16, x13)

inst_19:
// rs1==x11, rs2==x5, rd==x6, rs2_h3_val == -33, rs2_h1_val == 1024, rs2_h0_val == 16, rs1_h0_val == 128
// opcode: kmsda ; op1:x11; op2:x5; dest:x6; op1val:0x09fffa00070080;  op2val:0xffdf000604000010
TEST_PKRR_OP(kmsda, x6, x11, x5, 0x0000000000000000, 0x09fffa00070080, 0xffdf000604000010, x11, x8, 32, x13)

inst_20:
// rs1==x21, rs2==x20, rd==x17, rs2_h3_val == -17, rs1_h1_val == -32768, rs1_h0_val == -8193, rs2_h2_val == -9, rs2_h1_val == -1
// opcode: kmsda ; op1:x21; op2:x20; dest:x17; op1val:0x555500098000dfff;  op2val:0xffeffff7ffff0003
TEST_PKRR_OP(kmsda, x17, x21, x20, 0x0000000000000000, 0x555500098000dfff, 0xffeffff7ffff0003, x21, x8, 48, x13)

inst_21:
// rs1==x2, rs2==x0, rd==x27, rs2_h3_val == -5, rs2_h2_val == -2049, rs1_h2_val == 2, rs2_h1_val == -17
// opcode: kmsda ; op1:x2; op2:x0; dest:x27; op1val:0xc000000200030005;  op2val:0xfffbf7ffffeffff7
TEST_PKRR_OP(kmsda, x27, x2, x0, 0x0000000000000000, 0xc000000200030005, 0xfffbf7ffffeffff7, x2, x8, 64, x13)

inst_22:
// rs1==x16, rs2==x24, rd==x3, rs2_h3_val == -2, rs2_h1_val == 4, rs2_h0_val == 64, rs1_h3_val == 32767, rs1_h1_val == -65, rs2_h2_val == 32767
// opcode: kmsda ; op1:x16; op2:x24; dest:x3; op1val:0x7ffffff6ffbffffe;  op2val:0xfffe7fff00040040
TEST_PKRR_OP(kmsda, x3, x16, x24, 0x0000000000000000, 0x7ffffff6ffbffffe, 0xfffe7fff00040040, x16, x8, 80, x13)

inst_23:
// rs1==x23, rs2==x1, rd==x28, rs2_h3_val == -32768, rs2_h1_val == -5
// opcode: kmsda ; op1:x23; op2:x1; dest:x28; op1val:0xc0007fff0005fff8;  op2val:0x8000fff7fffb0003
TEST_PKRR_OP(kmsda, x28, x23, x1, 0x0000000000000000, 0xc0007fff0005fff8, 0x8000fff7fffb0003, x23, x8, 96, x13)

inst_24:
// rs1==x29, rs2==x14, rd==x21, rs2_h3_val == 16384, rs2_h1_val == -8193, rs2_h2_val == -21846, rs1_h2_val == -2
// opcode: kmsda ; op1:x29; op2:x14; dest:x21; op1val:0x09fffeff7ffffa;  op2val:0x4000aaaadfff3fff
TEST_PKRR_OP(kmsda, x21, x29, x14, 0x0000000000000000, 0x09fffeff7ffffa, 0x4000aaaadfff3fff, x29, x8, 112, x13)

inst_25:
// rs1==x18, rs2==x28, rd==x0, rs2_h3_val == 8192, rs1_h0_val == 21845
// opcode: kmsda ; op1:x18; op2:x28; dest:x0; op1val:0x8000ff7f00055555;  op2val:0x2000ffbffffe0010
TEST_PKRR_OP(kmsda, x0, x18, x28, 0x0000000000000000, 0x8000ff7f00055555, 0x2000ffbffffe0010, x18, x8, 128, x13)

inst_26:
// rs1==x14, rs2==x2, rd==x26, rs2_h3_val == 4096, rs1_h3_val == -1, rs2_h1_val == 16384, rs2_h0_val == 512, rs1_h2_val == 21845
// opcode: kmsda ; op1:x14; op2:x2; dest:x26; op1val:0xffff5555c000fff9;  op2val:0x1000000540000200
TEST_PKRR_OP(kmsda, x26, x14, x2, 0x0000000000000000, 0xffff5555c000fff9, 0x1000000540000200, x14, x8, 144, x13)

inst_27:
// rs1==x6, rs2==x21, rd==x11, rs2_h3_val == 2048, rs1_h2_val == 32, rs2_h1_val == 8192, rs1_h3_val == -9
// opcode: kmsda ; op1:x6; op2:x21; dest:x11; op1val:0xfff700200006fff9;  op2val:0x800f7ff2000fffe
TEST_PKRR_OP(kmsda, x11, x6, x21, 0x0000000000000000, 0xfff700200006fff9, 0x800f7ff2000fffe, x6, x8, 160, x13)

inst_28:
// rs1==x25, rs2==x10, rd==x7, rs2_h3_val == 1024, rs2_h2_val == 8192, rs2_h1_val == -32768
// opcode: kmsda ; op1:x25; op2:x10; dest:x7; op1val:0x800000050003ffdf;  op2val:0x40020008000fffa
TEST_PKRR_OP(kmsda, x7, x25, x10, 0x0000000000000000, 0x800000050003ffdf, 0x40020008000fffa, x25, x8, 176, x13)

inst_29:
// rs1==x30, rs2==x11, rd==x29, rs2_h3_val == 512, rs1_h2_val == -1, rs2_h2_val == 16, rs2_h1_val == 32767, rs1_h1_val == 2048
// opcode: kmsda ; op1:x30; op2:x11; dest:x29; op1val:0x05ffff08000400;  op2val:0x20000107fff0009
TEST_PKRR_OP(kmsda, x29, x30, x11, 0x0000000000000000, 0x05ffff08000400, 0x20000107fff0009, x30, x8, 192, x3)

inst_30:
// rs1==x12, rs2==x6, rd==x30, rs2_h3_val == 256, rs2_h0_val == 0, rs1_h3_val == -65, rs1_h0_val == 0, rs2_h2_val == 1, rs1_h2_val == -32768
// opcode: kmsda ; op1:x12; op2:x6; dest:x30; op1val:0xffbf800000060000;  op2val:0x100000100060000
TEST_PKRR_OP(kmsda, x30, x12, x6, 0x0000000000000000, 0xffbf800000060000, 0x100000100060000, x12, x8, 208, x3)

inst_31:
// rs1==x0, rs2==x19, rd==x2, rs2_h3_val == 64, rs1_h1_val == 512, rs1_h0_val == -17, rs2_h0_val == 256
// opcode: kmsda ; op1:x0; op2:x19; dest:x2; op1val:0xfff9f7ff0200ffef;  op2val:0x40c000bfff0100
TEST_PKRR_OP(kmsda, x2, x0, x19, 0x0000000000000000, 0xfff9f7ff0200ffef, 0x40c000bfff0100, x0, x8, 224, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs2_h3_val == 32, rs1_h1_val == 1024, rs2_h2_val == -3
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x400ff7f04000080;  op2val:0x20fffdfffefffd
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x400ff7f04000080, 0x20fffdfffefffd, x30, x1, 0, x3)

inst_33:
// rs2_h3_val == 16, rs1_h2_val == 1, rs1_h1_val == -4097, rs1_h0_val == 32767, rs1_h3_val == -5, rs2_h1_val == 16
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0001efff7fff;  op2val:0x10c00000107fff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xfffb0001efff7fff, 0x10c00000107fff, x30, x1, 16, x3)

inst_34:
// rs2_h3_val == 4, rs1_h3_val == 2, rs1_h1_val == 21845
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x02000655550005;  op2val:0x04010000200020
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x02000655550005, 0x04010000200020, x30, x1, 32, x3)

inst_35:
// rs1_h1_val == -5, rs2_h3_val == 1, rs1_h2_val == -9, rs2_h2_val == -2, rs2_h0_val == -32768
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fff7fffbfffa;  op2val:0x01fffe00408000
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xfff7fff7fffbfffa, 0x01fffe00408000, x30, x1, 48, x3)

inst_36:
// rs1_h1_val == -3, rs2_h2_val == -1, rs2_h0_val == -513, rs1_h0_val == 64
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0003fffd0040;  op2val:0x100ffff4000fdff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xff7f0003fffd0040, 0x100ffff4000fdff, x30, x1, 64, x3)

inst_37:
// rs1_h1_val == -2, rs1_h3_val == 32, rs1_h0_val == 16384, rs2_h0_val == -16385, rs2_h1_val == -513, rs2_h2_val == 2
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x208000fffe4000;  op2val:0xfeff0002fdffbfff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x208000fffe4000, 0xfeff0002fdffbfff, x30, x1, 80, x3)

inst_38:
// rs1_h1_val == 16384, rs1_h2_val == -4097, rs1_h0_val == -4097, rs2_h2_val == 21845
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x05efff4000efff;  op2val:0x085555c0000040
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x05efff4000efff, 0x085555c0000040, x30, x1, 96, x3)

inst_39:
// rs1_h1_val == 128, rs2_h0_val == -1
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffa0080c000;  op2val:0xfff8fffc0200ffff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xff7ffffa0080c000, 0xfff8fffc0200ffff, x30, x1, 112, x3)

inst_40:
// rs1_h1_val == 64, rs1_h0_val == 4096, rs1_h3_val == -2
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfffe000600401000;  op2val:0xfff9fffb0100fffd
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xfffe000600401000, 0xfff9fffb0100fffd, x30, x1, 128, x3)

inst_41:
// rs1_h1_val == 32, rs1_h2_val == 64
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x8000400020fffa;  op2val:0x20000040fff9fff6
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x8000400020fffa, 0x20000040fff9fff6, x30, x1, 144, x3)

inst_42:
// rs1_h1_val == 16, rs1_h2_val == 4096, rs2_h0_val == 2048
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x4010000010ff7f;  op2val:0x107fff00200800
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x4010000010ff7f, 0x107fff00200800, x30, x1, 160, x3)

inst_43:
// rs1_h1_val == 2, rs2_h1_val == -3, rs1_h2_val == 256
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x0101000002fff7;  op2val:0xfffb7ffffffd0200
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x0101000002fff7, 0xfffb7ffffffd0200, x30, x1, 176, x3)

inst_44:
// rs1_h1_val == 1, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfff600018000;  op2val:0x7fff000604000800
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xfffdfff600018000, 0x7fff000604000800, x30, x1, 192, x3)

inst_45:
// rs1_h1_val == -1, rs1_h0_val == 32
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffaffff0020;  op2val:0x003fff00400006
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x8000fffaffff0020, 0x003fff00400006, x30, x1, 208, x3)

inst_46:
// rs1_h0_val == -21846, rs2_h0_val == 4096, rs2_h1_val == 128
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x200020fff8aaaa;  op2val:0x40efff00801000
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x200020fff8aaaa, 0x40efff00801000, x30, x1, 224, x3)

inst_47:
// rs1_h0_val == -16385, rs2_h0_val == 21845
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x800bfff0009bfff;  op2val:0xfdff2000fbff5555
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x800bfff0009bfff, 0xfdff2000fbff5555, x30, x1, 240, x3)

inst_48:
// rs1_h0_val == -2049, rs2_h0_val == 1, rs1_h1_val == -17
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfffb3fffffeff7ff;  op2val:0x09200001000001
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xfffb3fffffeff7ff, 0x09200001000001, x30, x1, 256, x3)

inst_49:
// rs1_h0_val == -1025, rs2_h1_val == -257
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x20fffedffffbff;  op2val:0xfff63ffffefffffc
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x20fffedffffbff, 0xfff63ffffefffffc, x30, x1, 272, x3)

inst_50:
// rs1_h0_val == -513, rs2_h2_val == -8193, rs2_h0_val == 1024
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffdffdffdff;  op2val:0xffffdffffdff0400
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xfefffffdffdffdff, 0xffffdffffdff0400, x30, x1, 288, x3)

inst_51:
// rs1_h0_val == -65, rs1_h2_val == -8193, rs2_h2_val == 4096
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x800dfff0020ffbf;  op2val:0xffdf1000feffffff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x800dfff0020ffbf, 0xffdf1000feffffff, x30, x1, 304, x3)

inst_52:
// rs1_h0_val == -5, rs2_h0_val == -65
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfff60800ffdffffb;  op2val:0xefff0005ffdfffbf
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xfff60800ffdffffb, 0xefff0005ffdfffbf, x30, x1, 320, x3)

inst_53:
// rs1_h0_val == -3, rs2_h2_val == -257, rs1_h2_val == 0
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffffd;  op2val:0x800feff0080fff8
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x4000000fffffffd, 0x800feff0080fff8, x30, x1, 336, x3)

inst_54:
// rs1_h0_val == 8192, rs2_h2_val == 32
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfffcefff00032000;  op2val:0xefff002055550800
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xfffcefff00032000, 0xefff002055550800, x30, x1, 352, x3)

inst_55:
// rs1_h0_val == 2048, rs1_h1_val == -1025
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa1000fbff0800;  op2val:0xfff900022000fff7
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xaaaa1000fbff0800, 0xfff900022000fff7, x30, x1, 368, x3)

inst_56:
// rs1_h0_val == 256, rs1_h3_val == 512, rs1_h1_val == 32767
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x200f7ff7fff0100;  op2val:0xfff900064000fff9
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x200f7ff7fff0100, 0xfff900064000fff9, x30, x1, 384, x3)

inst_57:
// rs2_h1_val == 2, rs2_h0_val == -21846, rs1_h3_val == 16
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x10c000dffff7ff;  op2val:0xfff900050002aaaa
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x10c000dffff7ff, 0xfff900050002aaaa, x30, x1, 400, x3)

inst_58:
// rs2_h1_val == 1, rs2_h0_val == 128
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0000ff7ffffe;  op2val:0xfff7fffd00010080
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xff7f0000ff7ffffe, 0xfff7fffd00010080, x30, x1, 416, x3)

inst_59:
// rs2_h1_val == 0, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fff900070100;  op2val:0x400dfff00003fff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xfff9fff900070100, 0x400dfff00003fff, x30, x1, 432, x3)

inst_60:
// rs2_h0_val == -8193, rs1_h3_val == -513, rs1_h1_val == -513, rs2_h1_val == 2048
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0010fdffc000;  op2val:0xffff3fff0800dfff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xfdff0010fdffc000, 0xffff3fff0800dfff, x30, x1, 448, x3)

inst_61:
// rs2_h0_val == -4097, rs2_h1_val == -9
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xc000fff60008fff6;  op2val:0x05fff9fff7efff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xc000fff60008fff6, 0x05fff9fff7efff, x30, x1, 464, x3)

inst_62:
// rs2_h0_val == -257, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x20000055555fffa;  op2val:0x200000400001feff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x20000055555fffa, 0x200000400001feff, x30, x1, 480, x3)

inst_63:
// rs2_h0_val == -129, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xffff0100fff60400;  op2val:0x5555fffc1000ff7f
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xffff0100fff60400, 0x5555fffc1000ff7f, x30, x1, 496, x3)

inst_64:
// rs2_h0_val == -33, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfff800067fff0007;  op2val:0xfffa00400004ffdf
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xfff800067fff0007, 0xfffa00400004ffdf, x30, x1, 512, x3)

inst_65:
// rs2_h0_val == -5, rs1_h3_val == 4, rs1_h0_val == 8
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x040009c0000008;  op2val:0x3fff0002fffefffb
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x040009c0000008, 0x3fff0002fffefffb, x30, x1, 528, x3)

inst_66:
// rs2_h0_val == 4, rs1_h0_val == 16, rs1_h2_val == -513
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x400fdff00050010;  op2val:0xfefffffd40000004
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x400fdff00050010, 0xfefffffd40000004, x30, x1, 544, x3)

inst_67:
// rs2_h0_val == 2, rs2_h2_val == -513, rs1_h2_val == 128
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x80000801000fffb;  op2val:0xfffffdff01000002
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x80000801000fffb, 0xfffffdff01000002, x30, x1, 560, x3)

inst_68:
// rs1_h3_val == -16385, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffefffc0100;  op2val:0xfffb200010004000
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xbffffffefffc0100, 0xfffb200010004000, x30, x1, 576, x3)

inst_69:
// rs1_h3_val == -4097, rs1_h2_val == -33
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xefffffdffeff5555;  op2val:0xfffbffdf04000100
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xefffffdffeff5555, 0xfffbffdf04000100, x30, x1, 592, x3)

inst_70:
// rs1_h3_val == -2049, rs2_h2_val == 1024
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffd7fff0200;  op2val:0x0004005555ffef
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xf7fffffd7fff0200, 0x0004005555ffef, x30, x1, 608, x3)

inst_71:
// rs1_h3_val == -1025, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffff87ffffffc;  op2val:0xfbfffff9ffffefff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xfbfffff87ffffffc, 0xfbfffff9ffffefff, x30, x1, 624, x3)

inst_72:
// rs2_h2_val == -16385, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x01001000030005;  op2val:0xffffbfffdfffbfff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x01001000030005, 0xffffbfffdfffbfff, x30, x1, 640, x3)

inst_73:
// rs2_h2_val == -129, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x40000080ffeffffc;  op2val:0x1000ff7fffff0040
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x40000080ffeffffc, 0x1000ff7fffff0040, x30, x1, 656, x3)

inst_74:
// rs2_h2_val == -17, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x10fff78000ffbf;  op2val:0xfbffffeffbff7fff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x10fff78000ffbf, 0xfbffffeffbff7fff, x30, x1, 672, x3)

inst_75:
// rs1_h3_val == 0, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x00dfff08000006;  op2val:0x400fffffefffff6
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x00dfff08000006, 0x400fffffefffff6, x30, x1, 688, x3)

inst_76:
// rs1_h2_val == -21846, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x800aaaa80000008;  op2val:0x05ffffffdf5555
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x800aaaa80000008, 0x05ffffffdf5555, x30, x1, 704, x3)

inst_77:
// rs2_h2_val == 2048, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfdff080000080020;  op2val:0x80080000030400
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xfdff080000080020, 0x80080000030400, x30, x1, 720, x3)

inst_78:
// rs1_h2_val == -1025, rs2_h1_val == -65
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x400fbff0000fff7;  op2val:0xf7ff0006ffbffffe
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x400fbff0000fff7, 0xf7ff0006ffbffffe, x30, x1, 736, x3)

inst_79:
// rs2_h2_val == 512, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xc000ffdffff8fff9;  op2val:0x090200fff92000
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xc000ffdffff8fff9, 0x090200fff92000, x30, x1, 752, x3)

inst_80:
// rs1_h2_val == -65, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x03ffbf02008000;  op2val:0x20004000ffff0000
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x03ffbf02008000, 0x20004000ffff0000, x30, x1, 768, x3)

inst_81:
// rs1_h2_val == -17, rs2_h1_val == -129
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfff9ffef00808000;  op2val:0xffbffff9ff7fefff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xfff9ffef00808000, 0xffbffff9ff7fefff, x30, x1, 784, x3)

inst_82:
// rs2_h2_val == 8, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0006fffefffa;  op2val:0xffbf0008c000bfff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xff7f0006fffefffa, 0xffbf0008c000bfff, x30, x1, 800, x3)

inst_83:
// rs1_h0_val == -1, rs1_h2_val == 1024
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0400fffcffff;  op2val:0xfffd0200f7ffffff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xfeff0400fffcffff, 0xfffd0200f7ffffff, x30, x1, 816, x3)

inst_84:
// rs2_h2_val == 0, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x20001000000ffbf;  op2val:0xaaaa00002000fffd
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x20001000000ffbf, 0xaaaa00002000fffd, x30, x1, 832, x3)

inst_85:
// rs1_h2_val == 16384, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff40000003ffdf;  op2val:0x03f7ff10000001
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xf7ff40000003ffdf, 0x03f7ff10000001, x30, x1, 848, x3)

inst_86:
// rs2_h1_val == -4097, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x20ff7ffff80800;  op2val:0x05fffdefff0800
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x20ff7ffff80800, 0x05fffdefff0800, x30, x1, 864, x3)

inst_87:
// rs1_h2_val == 8, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x800008fdffffef;  op2val:0x0920000003fffc
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x800008fdffffef, 0x0920000003fffc, x30, x1, 880, x3)

inst_88:
// rs1_h2_val == 4, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x0900040000feff;  op2val:0xfff60040ffbf0100
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x0900040000feff, 0xfff60040ffbf0100, x30, x1, 896, x3)

inst_89:
// rs1_h0_val == 2, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x200009fdff0002;  op2val:0x8007ffffffa0002
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x200009fdff0002, 0x8007ffffffa0002, x30, x1, 912, x3)

inst_90:
// rs1_h1_val == -16385, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x00ff7fbfffffdf;  op2val:0x065555bffffeff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x00ff7fbfffffdf, 0x065555bffffeff, x30, x1, 928, x3)

inst_91:
// rs1_h0_val == 1, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x20000100800001;  op2val:0xfff655550400fff6
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x20000100800001, 0xfff655550400fff6, x30, x1, 944, x3)

inst_92:
// rs1_h3_val == -33, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffeffff9fffa;  op2val:0xffdf00050005ff7f
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xffdfffeffff9fffa, 0xffdf00050005ff7f, x30, x1, 960, x3)

inst_93:
// rs1_h3_val == -17, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xffefff7fc000bfff;  op2val:0x09020000090005
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xffefff7fc000bfff, 0x09020000090005, x30, x1, 976, x3)

inst_94:
// rs1_h1_val == -2049, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xfff80003f7fffff9;  op2val:0xff7ffff800400009
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xfff80003f7fffff9, 0xff7ffff800400009, x30, x1, 992, x3)

inst_95:
// rs2_h3_val == 2, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0005ffff0007;  op2val:0x02dfffaaaa0080
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xff7f0005ffff0007, 0x02dfffaaaa0080, x30, x1, 1008, x3)

inst_96:
// rs1_h3_val == 8192, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x2000800000060008;  op2val:0xbfffc0003ffffbff
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x2000800000060008, 0xbfffc0003ffffbff, x30, x1, 1024, x3)

inst_97:
// rs1_h3_val == 4096, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x10000020fefffffc;  op2val:0xf7fffeff00060400
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x10000020fefffffc, 0xf7fffeff00060400, x30, x1, 1040, x3)

inst_98:
// rs1_h1_val == -9, 
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0x200020fff7ff7f;  op2val:0x100fff9fffc0080
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0x200020fff7ff7f, 0x100fff9fffc0080, x30, x1, 1056, x3)

inst_99:
// rs2_h3_val == -5, rs2_h2_val == -2049, rs1_h2_val == 2, rs2_h1_val == -17
// opcode: kmsda ; op1:x30; op2:x29; dest:x31; op1val:0xc000000200030005;  op2val:0xfffbf7ffffeffff7
TEST_PKRR_OP(kmsda, x31, x30, x29, 0x0000000000000000, 0xc000000200030005, 0xfffbf7ffffeffff7, x30, x1, 1072, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x8_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 136*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
