
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srai16 instruction of the RISC-V RV64PZicsr extension for the srai16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srai16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd, rs1==x10, rd==x10, rs1_h0_val == -32768, rs1_h2_val == -33, rs1_h3_val == -2, imm_val == 5
// opcode: srai16 ; op1:x10; dest:x10; op1val:0xfffeffdf00098000;  immval:0x5
TEST_IMM_OP( srai16, x10, x10, 0x0000000000000000, 0xfffeffdf00098000, 0x5, x2, 0, x5)

inst_1:
// rs1 != rd, rs1==x12, rd==x30, imm_val == 15, rs1_h1_val == 4, rs1_h2_val == -9
// opcode: srai16 ; op1:x12; dest:x30; op1val:0x09fff700040003;  immval:0xf
TEST_IMM_OP( srai16, x30, x12, 0x0000000000000000, 0x09fff700040003, 0xf, x2, 8, x5)

inst_2:
// rs1==x3, rd==x21, imm_val == 14, rs1_h1_val == 32767, rs1_h2_val == 2048, rs1_h0_val == 32767
// opcode: srai16 ; op1:x3; dest:x21; op1val:0xfffe08007fff7fff;  immval:0xe
TEST_IMM_OP( srai16, x21, x3, 0x0000000000000000, 0xfffe08007fff7fff, 0xe, x2, 16, x5)

inst_3:
// rs1==x9, rd==x11, imm_val == 13, rs1_h0_val == 8192, rs1_h1_val == -4097, rs1_h3_val == 16384, rs1_h2_val == -2
// opcode: srai16 ; op1:x9; dest:x11; op1val:0x4000fffeefff2000;  immval:0xd
TEST_IMM_OP( srai16, x11, x9, 0x0000000000000000, 0x4000fffeefff2000, 0xd, x2, 24, x5)

inst_4:
// rs1==x7, rd==x19, imm_val == 12, rs1_h3_val == -32768, rs1_h0_val == 21845, rs1_h2_val == 32767
// opcode: srai16 ; op1:x7; dest:x19; op1val:0x80007fffefff5555;  immval:0xc
TEST_IMM_OP( srai16, x19, x7, 0x0000000000000000, 0x80007fffefff5555, 0xc, x2, 32, x5)

inst_5:
// rs1==x16, rd==x12, imm_val == 11, rs1_h1_val == 64, rs1_h3_val == 512, rs1_h2_val == 4, rs1_h0_val == -5
// opcode: srai16 ; op1:x16; dest:x12; op1val:0x20000040040fffb;  immval:0xb
TEST_IMM_OP( srai16, x12, x16, 0x0000000000000000, 0x20000040040fffb, 0xb, x2, 40, x5)

inst_6:
// rs1==x19, rd==x16, imm_val == 10, rs1_h0_val == 32, rs1_h3_val == -4097, rs1_h1_val == -9
// opcode: srai16 ; op1:x19; dest:x16; op1val:0xefff3ffffff70020;  immval:0xa
TEST_IMM_OP( srai16, x16, x19, 0x0000000000000000, 0xefff3ffffff70020, 0xa, x2, 48, x5)

inst_7:
// rs1==x21, rd==x4, imm_val == 9, rs1_h3_val == -17
// opcode: srai16 ; op1:x21; dest:x4; op1val:0xffef000300402000;  immval:0x9
TEST_IMM_OP( srai16, x4, x21, 0x0000000000000000, 0xffef000300402000, 0x9, x2, 56, x5)

inst_8:
// rs1==x1, rd==x20, imm_val == 8, rs1_h2_val == 16384, rs1_h0_val == -2049, rs1_h3_val == -65, rs1_h1_val == 1024
// opcode: srai16 ; op1:x1; dest:x20; op1val:0xffbf40000400f7ff;  immval:0x8
TEST_IMM_OP( srai16, x20, x1, 0x0000000000000000, 0xffbf40000400f7ff, 0x8, x2, 64, x5)

inst_9:
// rs1==x0, rd==x3, imm_val == 7, rs1_h1_val == -257, rs1_h2_val == -3
// opcode: srai16 ; op1:x0; dest:x3; op1val:0x3ffffffdfefffffc;  immval:0x7
TEST_IMM_OP( srai16, x3, x0, 0x0000000000000000, 0x3ffffffdfefffffc, 0x7, x2, 72, x5)

inst_10:
// rs1==x17, rd==x31, imm_val == 6, rs1_h2_val == 64
// opcode: srai16 ; op1:x17; dest:x31; op1val:0xfff900400003fff8;  immval:0x6
TEST_IMM_OP( srai16, x31, x17, 0x0000000000000000, 0xfff900400003fff8, 0x6, x2, 80, x5)

inst_11:
// rs1==x29, rd==x17, imm_val == 4, rs1_h0_val == 256
// opcode: srai16 ; op1:x29; dest:x17; op1val:0xfff8000300030100;  immval:0x4
TEST_IMM_OP( srai16, x17, x29, 0x0000000000000000, 0xfff8000300030100, 0x4, x2, 88, x5)

inst_12:
// rs1==x15, rd==x29, imm_val == 3, rs1_h3_val == 21845, rs1_h2_val == 4096, rs1_h1_val == -17
// opcode: srai16 ; op1:x15; dest:x29; op1val:0x55551000ffef2000;  immval:0x3
TEST_IMM_OP( srai16, x29, x15, 0x0000000000000000, 0x55551000ffef2000, 0x3, x2, 96, x5)

inst_13:
// rs1==x30, rd==x13, imm_val == 2, rs1_h2_val == -4097, rs1_h3_val == -33, rs1_h1_val == -2, rs1_h0_val == -129
// opcode: srai16 ; op1:x30; dest:x13; op1val:0xffdfeffffffeff7f;  immval:0x2
TEST_IMM_OP( srai16, x13, x30, 0x0000000000000000, 0xffdfeffffffeff7f, 0x2, x2, 104, x5)

inst_14:
// rs1==x23, rd==x15, imm_val == 1, rs1_h3_val == -257
// opcode: srai16 ; op1:x23; dest:x15; op1val:0xfefffffc00030007;  immval:0x1
TEST_IMM_OP( srai16, x15, x23, 0x0000000000000000, 0xfefffffc00030007, 0x1, x2, 112, x5)

inst_15:
// rs1==x11, rd==x9, imm_val == 0, rs1_h0_val == -513, rs1_h3_val == 8
// opcode: srai16 ; op1:x11; dest:x9; op1val:0x08c000effffdff;  immval:0x0
TEST_IMM_OP( srai16, x9, x11, 0x0000000000000000, 0x08c000effffdff, 0x0, x2, 120, x5)

inst_16:
// rs1==x31, rd==x14, rs1_h3_val == -21846, rs1_h0_val == -1, rs1_h1_val == 16384, rs1_h2_val == 128
// opcode: srai16 ; op1:x31; dest:x14; op1val:0xaaaa00804000ffff;  immval:0x9
TEST_IMM_OP( srai16, x14, x31, 0x0000000000000000, 0xaaaa00804000ffff, 0x9, x2, 128, x5)

inst_17:
// rs1==x26, rd==x27, rs1_h3_val == 32767, rs1_h1_val == 8
// opcode: srai16 ; op1:x26; dest:x27; op1val:0x7ffffffa0008c000;  immval:0xf
TEST_IMM_OP( srai16, x27, x26, 0x0000000000000000, 0x7ffffffa0008c000, 0xf, x2, 136, x5)

inst_18:
// rs1==x25, rd==x1, rs1_h3_val == -16385, rs1_h1_val == -5, rs1_h0_val == -21846
// opcode: srai16 ; op1:x25; dest:x1; op1val:0xbffffff6fffbaaaa;  immval:0x7
TEST_IMM_OP( srai16, x1, x25, 0x0000000000000000, 0xbffffff6fffbaaaa, 0x7, x2, 144, x5)

inst_19:
// rs1==x27, rd==x24, rs1_h3_val == -8193, 
// opcode: srai16 ; op1:x27; dest:x24; op1val:0xdfff00070400ffff;  immval:0xc
TEST_IMM_OP( srai16, x24, x27, 0x0000000000000000, 0xdfff00070400ffff, 0xc, x2, 152, x5)

inst_20:
// rs1==x18, rd==x0, rs1_h3_val == -2049, 
// opcode: srai16 ; op1:x18; dest:x0; op1val:0xf7ffffdffffe0005;  immval:0x1
TEST_IMM_OP( srai16, x0, x18, 0x0000000000000000, 0xf7ffffdffffe0005, 0x1, x2, 160, x5)

inst_21:
// rs1==x4, rd==x18, rs1_h3_val == -1025, rs1_h1_val == -65, rs1_h2_val == 256
// opcode: srai16 ; op1:x4; dest:x18; op1val:0xfbff0100ffbf8000;  immval:0x6
TEST_IMM_OP( srai16, x18, x4, 0x0000000000000000, 0xfbff0100ffbf8000, 0x6, x2, 168, x5)

inst_22:
// rs1==x28, rd==x7, rs1_h3_val == -513, 
// opcode: srai16 ; op1:x28; dest:x7; op1val:0xfdff010000045555;  immval:0xd
TEST_IMM_OP( srai16, x7, x28, 0x0000000000000000, 0xfdff010000045555, 0xd, x2, 176, x5)

inst_23:
// rs1==x6, rd==x23, rs1_h3_val == -129, rs1_h0_val == 2048, rs1_h1_val == 32
// opcode: srai16 ; op1:x6; dest:x23; op1val:0xff7f000700200800;  immval:0xc
TEST_IMM_OP( srai16, x23, x6, 0x0000000000000000, 0xff7f000700200800, 0xc, x2, 184, x5)

inst_24:
// rs1==x14, rd==x5, rs1_h3_val == -9, rs1_h1_val == 4096, rs1_h2_val == -257
// opcode: srai16 ; op1:x14; dest:x5; op1val:0xfff7feff10002000;  immval:0x0
TEST_IMM_OP( srai16, x5, x14, 0x0000000000000000, 0xfff7feff10002000, 0x0, x2, 192, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_25:
// rs1==x24, rd==x8, rs1_h3_val == -5, rs1_h2_val == -2049, rs1_h1_val == -1
// opcode: srai16 ; op1:x24; dest:x8; op1val:0xfffbf7ffffff0007;  immval:0xc
TEST_IMM_OP( srai16, x8, x24, 0x0000000000000000, 0xfffbf7ffffff0007, 0xc, x1, 0, x3)

inst_26:
// rs1==x5, rd==x2, rs1_h3_val == -3, rs1_h0_val == 8
// opcode: srai16 ; op1:x5; dest:x2; op1val:0xfffd0080fffe0008;  immval:0xa
TEST_IMM_OP( srai16, x2, x5, 0x0000000000000000, 0xfffd0080fffe0008, 0xa, x1, 8, x3)

inst_27:
// rs1==x13, rd==x22, rs1_h3_val == 8192, rs1_h2_val == 32, rs1_h1_val == -129
// opcode: srai16 ; op1:x13; dest:x22; op1val:0x20000020ff7ffffb;  immval:0x0
TEST_IMM_OP( srai16, x22, x13, 0x0000000000000000, 0x20000020ff7ffffb, 0x0, x1, 16, x3)

inst_28:
// rs1==x8, rd==x25, rs1_h3_val == 4096, rs1_h1_val == -21846, rs1_h0_val == -257
// opcode: srai16 ; op1:x8; dest:x25; op1val:0x1000c000aaaafeff;  immval:0x1
TEST_IMM_OP( srai16, x25, x8, 0x0000000000000000, 0x1000c000aaaafeff, 0x1, x1, 24, x3)

inst_29:
// rs1==x22, rd==x28, rs1_h3_val == 2048, 
// opcode: srai16 ; op1:x22; dest:x28; op1val:0x8007ffffffe0009;  immval:0x4
TEST_IMM_OP( srai16, x28, x22, 0x0000000000000000, 0x8007ffffffe0009, 0x4, x1, 32, x3)

inst_30:
// rs1==x2, rd==x6, rs1_h3_val == 1024, rs1_h1_val == -33, rs1_h2_val == -21846
// opcode: srai16 ; op1:x2; dest:x6; op1val:0x400aaaaffdf0006;  immval:0x7
TEST_IMM_OP( srai16, x6, x2, 0x0000000000000000, 0x400aaaaffdf0006, 0x7, x1, 40, x3)

inst_31:
// rs1==x20, rd==x26, rs1_h3_val == 256, rs1_h1_val == 21845
// opcode: srai16 ; op1:x20; dest:x26; op1val:0x100002055552000;  immval:0x3
TEST_IMM_OP( srai16, x26, x20, 0x0000000000000000, 0x100002055552000, 0x3, x1, 48, x3)

inst_32:
// rs1_h3_val == 128, rs1_h1_val == -3, rs1_h0_val == 16384
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x807ffffffd4000;  immval:0xa
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x807ffffffd4000, 0xa, x1, 56, x3)

inst_33:
// rs1_h3_val == 64, rs1_h0_val == 4096
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x40fffe00051000;  immval:0x9
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x40fffe00051000, 0x9, x1, 64, x3)

inst_34:
// rs1_h0_val == -16385, rs1_h2_val == 8192
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x20002000ffefbfff;  immval:0x7
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x20002000ffefbfff, 0x7, x1, 72, x3)

inst_35:
// rs1_h0_val == -8193, rs1_h1_val == 256, rs1_h2_val == 1
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x400000010100dfff;  immval:0x4
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x400000010100dfff, 0x4, x1, 80, x3)

inst_36:
// rs1_h0_val == -4097, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xffdffff80040efff;  immval:0x9
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0xffdffff80040efff, 0x9, x1, 88, x3)

inst_37:
// rs1_h0_val == -1025, rs1_h1_val == 2, rs1_h2_val == -5
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x05fffb0002fbff;  immval:0x7
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x05fffb0002fbff, 0x7, x1, 96, x3)

inst_38:
// rs1_h0_val == -65, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x07feffefffffbf;  immval:0x6
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x07feffefffffbf, 0x6, x1, 104, x3)

inst_39:
// rs1_h0_val == -33, rs1_h1_val == 8192
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xfffefffa2000ffdf;  immval:0x3
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0xfffefffa2000ffdf, 0x3, x1, 112, x3)

inst_40:
// rs1_h0_val == -17, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xfeff0080fffeffef;  immval:0xf
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0xfeff0080fffeffef, 0xf, x1, 120, x3)

inst_41:
// rs1_h0_val == -9, rs1_h2_val == -8193, rs1_h3_val == 16
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x10dfff1000fff7;  immval:0xa
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x10dfff1000fff7, 0xa, x1, 128, x3)

inst_42:
// rs1_h0_val == -3, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xfffe00050006fffd;  immval:0xa
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0xfffe00050006fffd, 0xa, x1, 136, x3)

inst_43:
// rs1_h0_val == -2, rs1_h1_val == -2049
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x050080f7fffffe;  immval:0xc
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x050080f7fffffe, 0xc, x1, 144, x3)

inst_44:
// rs1_h0_val == 1024, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xfff8aaaa20000400;  immval:0xe
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0xfff8aaaa20000400, 0xe, x1, 152, x3)

inst_45:
// rs1_h0_val == 512, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x030020ff7f0200;  immval:0x1
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x030020ff7f0200, 0x1, x1, 160, x3)

inst_46:
// rs1_h0_val == 128, rs1_h2_val == -16385
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x10bfff01000080;  immval:0x5
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x10bfff01000080, 0x5, x1, 168, x3)

inst_47:
// rs1_h0_val == 64, rs1_h1_val == -16385, rs1_h3_val == 32, rs1_h2_val == -129
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x20ff7fbfff0040;  immval:0xb
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x20ff7fbfff0040, 0xb, x1, 176, x3)

inst_48:
// rs1_h0_val == 16, rs1_h2_val == 8
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x100000840000010;  immval:0xa
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x100000840000010, 0xa, x1, 184, x3)

inst_49:
// rs1_h0_val == 4, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x05c000fffd0004;  immval:0xf
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x05c000fffd0004, 0xf, x1, 192, x3)

inst_50:
// rs1_h2_val == -65, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x400ffbfefff0020;  immval:0xf
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x400ffbfefff0020, 0xf, x1, 200, x3)

inst_51:
// rs1_h2_val == -17, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x10ffeffeff1000;  immval:0x1
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x10ffeffeff1000, 0x1, x1, 208, x3)

inst_52:
// rs1_h2_val == -32768, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xaaaa80003fff0009;  immval:0x8
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0xaaaa80003fff0009, 0x8, x1, 216, x3)

inst_53:
// rs1_h2_val == 1024, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x80000400bffffffa;  immval:0x1
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x80000400bffffffa, 0x1, x1, 224, x3)

inst_54:
// rs1_h2_val == 512, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xf7ff0200ff7fffff;  immval:0xf
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0xf7ff0200ff7fffff, 0xf, x1, 232, x3)

inst_55:
// rs1_h2_val == 16, rs1_h3_val == -1
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xffff0010feff4000;  immval:0xf
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0xffff0010feff4000, 0xf, x1, 240, x3)

inst_56:
// rs1_h2_val == 2, rs1_h0_val == 1
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xfff9000240000001;  immval:0xe
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0xfff9000240000001, 0xe, x1, 248, x3)

inst_57:
// rs1_h2_val == 0, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x2000000fff65555;  immval:0xe
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x2000000fff65555, 0xe, x1, 256, x3)

inst_58:
// rs1_h2_val == -1, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xff7ffffffffa5555;  immval:0x4
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0xff7ffffffffa5555, 0x4, x1, 264, x3)

inst_59:
// rs1_h0_val == 2, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xffbffffafff60002;  immval:0x5
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0xffbffffafff60002, 0x5, x1, 272, x3)

inst_60:
// rs1_h1_val == -8193, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xfff60010dfff0080;  immval:0x0
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0xfff60010dfff0080, 0x0, x1, 280, x3)

inst_61:
// rs1_h0_val == 0, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x7fff020000200000;  immval:0xe
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x7fff020000200000, 0xe, x1, 288, x3)

inst_62:
// rs1_h1_val == -1025, rs1_h2_val == -513
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xff7ffdfffbff3fff;  immval:0xa
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0xff7ffdfffbff3fff, 0xa, x1, 296, x3)

inst_63:
// rs1_h1_val == -513, rs1_h3_val == 2
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x020007fdff0001;  immval:0x6
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x020007fdff0001, 0x6, x1, 304, x3)

inst_64:
// rs1_h1_val == -32768, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x3fff200080008000;  immval:0xe
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x3fff200080008000, 0xe, x1, 312, x3)

inst_65:
// rs1_h1_val == 2048, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xffdf200008000040;  immval:0xf
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0xffdf200008000040, 0xf, x1, 320, x3)

inst_66:
// rs1_h3_val == 4, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x04fff8fdff0040;  immval:0x5
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x04fff8fdff0040, 0x5, x1, 328, x3)

inst_67:
// rs1_h1_val == 512, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xfff6fff70200ffff;  immval:0x1
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0xfff6fff70200ffff, 0x1, x1, 336, x3)

inst_68:
// rs1_h3_val == 1, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x010800fff60400;  immval:0xd
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x010800fff60400, 0xd, x1, 344, x3)

inst_69:
// rs1_h3_val == 0, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x00fff9fff70004;  immval:0xd
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x00fff9fff70004, 0xd, x1, 352, x3)

inst_70:
// rs1_h1_val == 128, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x400fff80080ffff;  immval:0x7
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x400fff80080ffff, 0x7, x1, 360, x3)

inst_71:
// rs1_h2_val == 21845, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xbfff5555fff8fff7;  immval:0x6
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0xbfff5555fff8fff7, 0x6, x1, 368, x3)

inst_72:
// rs1_h1_val == 1, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x057fff0001ffff;  immval:0xb
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x057fff0001ffff, 0xb, x1, 376, x3)

inst_73:
// rs1_h1_val == 0, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xbfff555500000008;  immval:0x3
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0xbfff555500000008, 0x3, x1, 384, x3)

inst_74:
// rs1_h2_val == -1025, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0xbffffbff1000fff7;  immval:0x2
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0xbffffbff1000fff7, 0x2, x1, 392, x3)

inst_75:
// rs1_h1_val == 16, 
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x08000600105555;  immval:0xa
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x08000600105555, 0xa, x1, 400, x3)

inst_76:
// imm_val == 7, rs1_h1_val == -257, rs1_h2_val == -3
// opcode: srai16 ; op1:x30; dest:x31; op1val:0x3ffffffdfefffffc;  immval:0x7
TEST_IMM_OP( srai16, x31, x30, 0x0000000000000000, 0x3ffffffdfefffffc, 0x7, x1, 408, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 25*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 52*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
