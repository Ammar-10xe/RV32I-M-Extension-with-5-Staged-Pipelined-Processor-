
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the mulr64 instruction of the RISC-V RV64PZicsr extension for the mulr64 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",mulr64)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x30, rs2==x8, rd==x30, rs1_w0_val == 0, rs1_w1_val == 4294967039, rs2_w1_val == 3221225471
// opcode: mulr64 ; op1:x30; op2:x8; dest:x30; op1val:0xfffffeff00000000;  op2val:0xbfffffff00000009;
TEST_P64_PNN_OP(mulr64, x30, $rd_hi, x30, x8, 0x0000000000000000, $correctval_hi, 0xfffffeff00000000, 0xbfffffff00000009, x1, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x20, rs2==x14, rd==x26, rs2_w1_val == 2863311530, rs2_w0_val == 1, rs1_w0_val == 65536
// opcode: mulr64 ; op1:x20; op2:x14; dest:x26; op1val:0x0000000e00010000;  op2val:0xaaaaaaaa00000001;
TEST_P64_PNN_OP(mulr64, x26, $rd_hi, x20, x14, 0x0000000000000000, $correctval_hi, 0x0000000e00010000, 0xaaaaaaaa00000001, x1, 16, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x20, rs2_w1_val == 1431655765, rs2_w0_val == 4294967263, rs1_w0_val == 2097152, rs1_w1_val == 4294967279
// opcode: mulr64 ; op1:x26; op2:x26; dest:x20; op1val:0xffffffef00200000;  op2val:0x55555555ffffffdf;
TEST_P64_PNN_OP(mulr64, x20, $rd_hi, x26, x26, 0x0000000000000000, $correctval_hi, 0xffffffef00200000, 0x55555555ffffffdf, x1, 32, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs2_w1_val == 2147483647, rs1_w0_val == 4294967231, rs1_w1_val == 1, rs2_w0_val == 4294967295
// opcode: mulr64 ; op1:x18; op2:x18; dest:x18; op1val:0x00000001ffffffbf;  op2val:0x7fffffffffffffff;
TEST_P64_PNN_OP(mulr64, x18, $rd_hi, x18, x18, 0x0000000000000000, $correctval_hi, 0x00000001ffffffbf, 0x7fffffffffffffff, x1, 48, x3)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x6, rd==x6, rs2_w1_val == 3758096383, rs1_w1_val == 4
// opcode: mulr64 ; op1:x5; op2:x6; dest:x6; op1val:0x0000000400000009;  op2val:0xdfffffff00000005;
TEST_P64_PNN_OP(mulr64, x6, $rd_hi, x5, x6, 0x0000000000000000, $correctval_hi, 0x0000000400000009, 0xdfffffff00000005, x1, 64, x3)

inst_5:
// rs1==x7, rs2==x0, rd==x16, rs2_w1_val == 4026531839, rs2_w0_val == 512, rs1_w1_val == 524288
// opcode: mulr64 ; op1:x7; op2:x0; dest:x16; op1val:0x0008000000000003;  op2val:0xefffffff00000200;
TEST_P64_PNN_OP(mulr64, x16, $rd_hi, x7, x0, 0x0000000000000000, $correctval_hi, 0x0008000000000003, 0xefffffff00000200, x1, 80, x3)

inst_6:
// rs1==x4, rs2==x5, rd==x2, rs2_w1_val == 4160749567, rs2_w0_val == 4294443007, rs1_w1_val == 4290772991, rs1_w0_val == 2147483648
// opcode: mulr64 ; op1:x4; op2:x5; dest:x2; op1val:0xffbfffff80000000;  op2val:0xf7fffffffff7ffff;
TEST_P64_PNN_OP(mulr64, x2, $rd_hi, x4, x5, 0x0000000000000000, $correctval_hi, 0xffbfffff80000000, 0xf7fffffffff7ffff, x1, 96, x3)

inst_7:
// rs1==x29, rs2==x12, rd==x14, rs2_w1_val == 4227858431, rs1_w1_val == 4294967293, rs1_w0_val == 4294967167
// opcode: mulr64 ; op1:x29; op2:x12; dest:x14; op1val:0xfffffffdffffff7f;  op2val:0xfbffffff00000013;
TEST_P64_PNN_OP(mulr64, x14, $rd_hi, x29, x12, 0x0000000000000000, $correctval_hi, 0xfffffffdffffff7f, 0xfbffffff00000013, x1, 112, x3)

inst_8:
// rs1==x2, rs2==x25, rd==x12, rs2_w1_val == 4261412863, rs1_w0_val == 4294959103, rs2_w0_val == 4294967167
// opcode: mulr64 ; op1:x2; op2:x25; dest:x12; op1val:0x0000000affffdfff;  op2val:0xfdffffffffffff7f;
TEST_P64_PNN_OP(mulr64, x12, $rd_hi, x2, x25, 0x0000000000000000, $correctval_hi, 0x0000000affffdfff, 0xfdffffffffffff7f, x1, 128, x3)

inst_9:
// rs1==x12, rs2==x23, rd==x10, rs2_w1_val == 4278190079, rs1_w1_val == 8
// opcode: mulr64 ; op1:x12; op2:x23; dest:x10; op1val:0x0000000800000000;  op2val:0xfeffffff00000012;
TEST_P64_PNN_OP(mulr64, x10, $rd_hi, x12, x23, 0x0000000000000000, $correctval_hi, 0x0000000800000000, 0xfeffffff00000012, x1, 144, x3)

inst_10:
// rs1==x23, rs2==x13, rd==x24, rs2_w1_val == 4286578687, rs2_w0_val == 1073741824, rs1_w1_val == 4294705151
// opcode: mulr64 ; op1:x23; op2:x13; dest:x24; op1val:0xfffbffff00000012;  op2val:0xff7fffff40000000;
TEST_P64_PNN_OP(mulr64, x24, $rd_hi, x23, x13, 0x0000000000000000, $correctval_hi, 0xfffbffff00000012, 0xff7fffff40000000, x1, 160, x3)

inst_11:
// rs1==x17, rs2==x15, rd==x28, rs2_w1_val == 4290772991, rs1_w1_val == 2147483648, rs2_w0_val == 4294966783, rs1_w0_val == 128
// opcode: mulr64 ; op1:x17; op2:x15; dest:x28; op1val:0x8000000000000080;  op2val:0xffbffffffffffdff;
TEST_P64_PNN_OP(mulr64, x28, $rd_hi, x17, x15, 0x0000000000000000, $correctval_hi, 0x8000000000000080, 0xffbffffffffffdff, x1, 176, x3)

inst_12:
// rs1==x9, rs2==x30, rd==x22, rs2_w1_val == 4292870143, rs2_w0_val == 2097152, rs1_w0_val == 3758096383, rs1_w1_val == 4160749567
// opcode: mulr64 ; op1:x9; op2:x30; dest:x22; op1val:0xf7ffffffdfffffff;  op2val:0xffdfffff00200000;
TEST_P64_PNN_OP(mulr64, x22, $rd_hi, x9, x30, 0x0000000000000000, $correctval_hi, 0xf7ffffffdfffffff, 0xffdfffff00200000, x1, 192, x3)

inst_13:
// rs1==x15, rs2==x10, rd==x8, rs2_w1_val == 4293918719, rs2_w0_val == 32, rs1_w1_val == 16, rs1_w0_val == 4294967039
// opcode: mulr64 ; op1:x15; op2:x10; dest:x8; op1val:0x00000010fffffeff;  op2val:0xffefffff00000020;
TEST_P64_PNN_OP(mulr64, x8, $rd_hi, x15, x10, 0x0000000000000000, $correctval_hi, 0x00000010fffffeff, 0xffefffff00000020, x1, 208, x3)

inst_14:
// rs1==x13, rs2==x16, rd==x4, rs2_w1_val == 4294443007, rs1_w1_val == 1431655765, rs1_w0_val == 4294967294, rs2_w0_val == 2147483648
// opcode: mulr64 ; op1:x13; op2:x16; dest:x4; op1val:0x55555555fffffffe;  op2val:0xfff7ffff80000000;
TEST_P64_PNN_OP(mulr64, x4, $rd_hi, x13, x16, 0x0000000000000000, $correctval_hi, 0x55555555fffffffe, 0xfff7ffff80000000, x1, 224, x3)

inst_15:
// rs1==x0, rs2==x27, rs2_w1_val == 4294705151, rs2_w0_val == 0, rs1_w0_val == 4294934527
// opcode: mulr64 ; op1:x0; op2:x27; dest:x21; op1val:0x0000000cffff7fff;  op2val:0xfffbffff00000000;
TEST_P64_PNN_OP(mulr64, x21, $rd_hi, x0, x27, 0x0000000000000000, $correctval_hi, 0x0000000cffff7fff, 0xfffbffff00000000, x1, 240, x3)

inst_16:
// rs1==x28, rs2==x17, rs2_w1_val == 4294836223, rs1_w1_val == 64, rs2_w0_val == 2863311530
// opcode: mulr64 ; op1:x28; op2:x17; dest:x15; op1val:0x000000400000000a;  op2val:0xfffdffffaaaaaaaa;
TEST_P64_PNN_OP(mulr64, x15, $rd_hi, x28, x17, 0x0000000000000000, $correctval_hi, 0x000000400000000a, 0xfffdffffaaaaaaaa, x1, 256, x13)

inst_17:
// rs1==x27, rs2==x3, rs2_w1_val == 4294901759, rs1_w1_val == 4294967231, rs1_w0_val == 4286578687
// opcode: mulr64 ; op1:x27; op2:x3; dest:x15; op1val:0xffffffbfff7fffff;  op2val:0xfffefffffffffdff;
TEST_P64_PNN_OP(mulr64, x15, $rd_hi, x27, x3, 0x0000000000000000, $correctval_hi, 0xffffffbfff7fffff, 0xfffefffffffffdff, x1, 272, x13)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_18:
// rs1==x25, rs2==x7, rs2_w1_val == 4294934527, rs2_w0_val == 4292870143, rs1_w0_val == 131072, rs1_w1_val == 134217728
// opcode: mulr64 ; op1:x25; op2:x7; dest:x6; op1val:0x0800000000020000;  op2val:0xffff7fffffdfffff;
TEST_P64_PNN_OP(mulr64, x6, $rd_hi, x25, x7, 0x0000000000000000, $correctval_hi, 0x0800000000020000, 0xffff7fffffdfffff, x5, 0, x13)

inst_19:
// rs1==x24, rs2==x2, rs2_w1_val == 4294950911, 
// opcode: mulr64 ; op1:x24; op2:x2; dest:x12; op1val:0xffffffeffffffeff;  op2val:0xffffbfff0000000f;
TEST_P64_PNN_OP(mulr64, x12, $rd_hi, x24, x2, 0x0000000000000000, $correctval_hi, 0xffffffeffffffeff, 0xffffbfff0000000f, x5, 16, x13)

inst_20:
// rs1==x6, rs2==x9, rs2_w1_val == 4294959103, rs2_w0_val == 4096, rs1_w0_val == 32768, rs1_w1_val == 4294443007
// opcode: mulr64 ; op1:x6; op2:x9; dest:x4; op1val:0xfff7ffff00008000;  op2val:0xffffdfff00001000;
TEST_P64_PNN_OP(mulr64, x4, $rd_hi, x6, x9, 0x0000000000000000, $correctval_hi, 0xfff7ffff00008000, 0xffffdfff00001000, x5, 32, x13)

inst_21:
// rs1==x3, rs2==x11, rs2_w1_val == 4294963199, rs1_w0_val == 1431655765, rs1_w1_val == 4294963199, rs2_w0_val == 8388608
// opcode: mulr64 ; op1:x3; op2:x11; dest:x17; op1val:0xffffefff55555555;  op2val:0xffffefff00800000;
TEST_P64_PNN_OP(mulr64, x17, $rd_hi, x3, x11, 0x0000000000000000, $correctval_hi, 0xffffefff55555555, 0xffffefff00800000, x5, 48, x13)

inst_22:
// rs1==x8, rs2==x1, rs2_w1_val == 4294965247, rs1_w1_val == 2863311530, rs2_w0_val == 1048576
// opcode: mulr64 ; op1:x8; op2:x1; dest:x16; op1val:0xaaaaaaaa00000006;  op2val:0xfffff7ff00100000;
TEST_P64_PNN_OP(mulr64, x16, $rd_hi, x8, x1, 0x0000000000000000, $correctval_hi, 0xaaaaaaaa00000006, 0xfffff7ff00100000, x5, 64, x13)

inst_23:
// rs1==x16, rs2==x21, rs2_w1_val == 4294966271, rs1_w0_val == 4294963199, rs1_w1_val == 4294934527
// opcode: mulr64 ; op1:x16; op2:x21; dest:x17; op1val:0xffff7fffffffefff;  op2val:0xfffffbff00000011;
TEST_P64_PNN_OP(mulr64, x17, $rd_hi, x16, x21, 0x0000000000000000, $correctval_hi, 0xffff7fffffffefff, 0xfffffbff00000011, x5, 80, x13)

inst_24:
// rs1==x31, rs2==x20, rs2_w1_val == 4294966783, rs1_w0_val == 536870912
// opcode: mulr64 ; op1:x31; op2:x20; dest:x15; op1val:0xffffefff20000000;  op2val:0xfffffdff00000005;
TEST_P64_PNN_OP(mulr64, x15, $rd_hi, x31, x20, 0x0000000000000000, $correctval_hi, 0xffffefff20000000, 0xfffffdff00000005, x5, 96, x13)

inst_25:
// rs1==x14, rs2==x29, rs2_w1_val == 4294967039, rs2_w0_val == 131072
// opcode: mulr64 ; op1:x14; op2:x29; dest:x30; op1val:0x0000000b00000080;  op2val:0xfffffeff00020000;
TEST_P64_PNN_OP(mulr64, x30, $rd_hi, x14, x29, 0x0000000000000000, $correctval_hi, 0x0000000b00000080, 0xfffffeff00020000, x5, 112, x13)

inst_26:
// rs1==x1, rs2==x22, rs2_w1_val == 4294967167, rs1_w1_val == 2097152
// opcode: mulr64 ; op1:x1; op2:x22; dest:x10; op1val:0x00200000ff7fffff;  op2val:0xffffff7f00200000;
TEST_P64_PNN_OP(mulr64, x10, $rd_hi, x1, x22, 0x0000000000000000, $correctval_hi, 0x00200000ff7fffff, 0xffffff7f00200000, x5, 128, x13)

inst_27:
// rs1==x10, rs2==x31, rs2_w1_val == 4294967231, rs1_w1_val == 4294966783, rs2_w0_val == 4294967039
// opcode: mulr64 ; op1:x10; op2:x31; dest:x11; op1val:0xfffffdffffffefff;  op2val:0xffffffbffffffeff;
TEST_P64_PNN_OP(mulr64, x11, $rd_hi, x10, x31, 0x0000000000000000, $correctval_hi, 0xfffffdffffffefff, 0xffffffbffffffeff, x5, 144, x13)

inst_28:
// rs1==x21, rs2==x19, rs2_w1_val == 4294967263, rs2_w0_val == 536870912, rs1_w0_val == 8
// opcode: mulr64 ; op1:x21; op2:x19; dest:x25; op1val:0x0008000000000008;  op2val:0xffffffdf20000000;
TEST_P64_PNN_OP(mulr64, x25, $rd_hi, x21, x19, 0x0000000000000000, $correctval_hi, 0x0008000000000008, 0xffffffdf20000000, x5, 160, x13)

inst_29:
// rs1==x22, rs2==x28, rs2_w1_val == 4294967279, rs1_w0_val == 1048576, rs2_w0_val == 4261412863
// opcode: mulr64 ; op1:x22; op2:x28; dest:x31; op1val:0xfffffffd00100000;  op2val:0xffffffeffdffffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x22, x28, 0x0000000000000000, $correctval_hi, 0xfffffffd00100000, 0xffffffeffdffffff, x5, 176, x1)

inst_30:
// rs1==x11, rs2==x24, rs2_w1_val == 4294967287, rs2_w0_val == 4026531839, rs1_w1_val == 4294959103
// opcode: mulr64 ; op1:x11; op2:x24; dest:x10; op1val:0xffffdfffdfffffff;  op2val:0xfffffff7efffffff;
TEST_P64_PNN_OP(mulr64, x10, $rd_hi, x11, x24, 0x0000000000000000, $correctval_hi, 0xffffdfffdfffffff, 0xfffffff7efffffff, x5, 192, x1)

inst_31:
// rs1==x19, rs2==x4, rs2_w1_val == 4294967291, rs2_w0_val == 8
// opcode: mulr64 ; op1:x19; op2:x4; dest:x20; op1val:0x5555555580000000;  op2val:0xfffffffb00000008;
TEST_P64_PNN_OP(mulr64, x20, $rd_hi, x19, x4, 0x0000000000000000, $correctval_hi, 0x5555555580000000, 0xfffffffb00000008, x5, 208, x1)

inst_32:
// rs2_w1_val == 4294967293, rs2_w0_val == 64, rs1_w1_val == 8388608, rs1_w0_val == 2
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0080000000000002;  op2val:0xfffffffd00000040;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080000000000002, 0xfffffffd00000040, x5, 224, x1)

inst_33:
// rs2_w1_val == 4294967294, rs2_w0_val == 4294967279
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000004000000002;  op2val:0xfffffffeffffffef;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000004000000002, 0xfffffffeffffffef, x5, 240, x1)

inst_34:
// rs2_w1_val == 2147483648, rs1_w0_val == 1024, rs1_w1_val == 32
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000002000000400;  op2val:0x8000000000100000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000002000000400, 0x8000000000100000, x5, 256, x1)

inst_35:
// rs2_w1_val == 1073741824, rs1_w1_val == 16384, rs2_w0_val == 4294705151
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000400000000080;  op2val:0x40000000fffbffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000400000000080, 0x40000000fffbffff, x5, 272, x1)

inst_36:
// rs2_w1_val == 536870912, rs1_w1_val == 128
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x000000800000000e;  op2val:0x200000000000000b;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000000800000000e, 0x200000000000000b, x5, 288, x1)

inst_37:
// rs2_w1_val == 268435456, rs2_w0_val == 4294959103, rs1_w0_val == 262144
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000001100040000;  op2val:0x10000000ffffdfff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000001100040000, 0x10000000ffffdfff, x5, 304, x1)

inst_38:
// rs2_w1_val == 134217728, rs2_w0_val == 1024, rs1_w1_val == 8192
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000200000040000;  op2val:0x0800000000000400;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000200000040000, 0x0800000000000400, x5, 320, x1)

inst_39:
// rs2_w1_val == 67108864, rs1_w0_val == 64, rs1_w1_val == 16777216
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0100000000000040;  op2val:0x0400000000000400;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0100000000000040, 0x0400000000000400, x5, 336, x1)

inst_40:
// rs2_w1_val == 33554432, rs2_w0_val == 16
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000000e;  op2val:0x0200000000000010;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x800000000000000e, 0x0200000000000010, x5, 352, x1)

inst_41:
// rs2_w1_val == 16777216, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffff7fff;  op2val:0x01000000ffdfffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffefffff7fff, 0x01000000ffdfffff, x5, 368, x1)

inst_42:
// rs2_w1_val == 8388608, rs1_w0_val == 67108864
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff04000000;  op2val:0x008000000000000a;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbfffff04000000, 0x008000000000000a, x5, 384, x1)

inst_43:
// rs2_w1_val == 4194304, rs1_w0_val == 16384, rs1_w1_val == 4294967167
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00004000;  op2val:0x00400000efffffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffff7f00004000, 0x00400000efffffff, x5, 400, x1)

inst_44:
// rs2_w1_val == 2097152, rs2_w0_val == 4294950911, rs1_w0_val == 524288
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000400080000;  op2val:0x00200000ffffbfff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000400080000, 0x00200000ffffbfff, x5, 416, x1)

inst_45:
// rs2_w1_val == 1048576, rs1_w1_val == 131072, rs1_w0_val == 4294901759, rs2_w0_val == 32768
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000fffeffff;  op2val:0x0010000000008000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00020000fffeffff, 0x0010000000008000, x5, 432, x1)

inst_46:
// rs2_w1_val == 524288, rs2_w0_val == 4293918719, rs1_w0_val == 512
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000200;  op2val:0x00080000ffefffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffdff00000200, 0x00080000ffefffff, x5, 448, x1)

inst_47:
// rs2_w1_val == 262144, rs2_w0_val == 128
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000c00000400;  op2val:0x0004000000000080;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000c00000400, 0x0004000000000080, x5, 464, x1)

inst_48:
// rs2_w1_val == 131072, rs2_w0_val == 4294967287
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00080000;  op2val:0x00020000fffffff7;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7fff00080000, 0x00020000fffffff7, x5, 480, x1)

inst_49:
// rs2_w1_val == 65536, rs2_w0_val == 524288, rs1_w0_val == 16777216
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000004001000000;  op2val:0x0001000000080000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000004001000000, 0x0001000000080000, x5, 496, x1)

inst_50:
// rs2_w1_val == 32768, rs2_w0_val == 67108864, rs1_w0_val == 33554432
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0008000002000000;  op2val:0x0000800004000000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0008000002000000, 0x0000800004000000, x5, 512, x1)

inst_51:
// rs1_w0_val == 8192, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00002000;  op2val:0xfdffffff00008000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffd00002000, 0xfdffffff00008000, x5, 528, x1)

inst_52:
// rs1_w0_val == 4096, rs1_w1_val == 536870912
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000001000;  op2val:0xefffffff00000013;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000000000001000, 0xefffffff00000013, x5, 544, x1)

inst_53:
// rs1_w0_val == 2048, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0008000000000800;  op2val:0xffffffeffffbffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0008000000000800, 0xffffffeffffbffff, x5, 560, x1)

inst_54:
// rs1_w0_val == 256, rs1_w1_val == 4293918719
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000100;  op2val:0xfffff7ff00008000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffefffff00000100, 0xfffff7ff00008000, x5, 576, x1)

inst_55:
// rs1_w0_val == 32, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000001000000020;  op2val:0x1000000020000000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000001000000020, 0x1000000020000000, x5, 592, x1)

inst_56:
// rs1_w0_val == 16, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000d00000010;  op2val:0xffdfffff00000000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000d00000010, 0xffdfffff00000000, x5, 608, x1)

inst_57:
// rs1_w0_val == 4, rs1_w1_val == 0, rs2_w1_val == 8192
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000000000004;  op2val:0x00002000ffffffef;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000000000004, 0x00002000ffffffef, x5, 624, x1)

inst_58:
// rs1_w0_val == 1, rs2_w0_val == 4160749567
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000001;  op2val:0xaaaaaaaaf7ffffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffbf00000001, 0xaaaaaaaaf7ffffff, x5, 640, x1)

inst_59:
// rs1_w0_val == 4294967295, rs2_w0_val == 4294967291
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000008ffffffff;  op2val:0xfffffbfffffffffb;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000008ffffffff, 0xfffffbfffffffffb, x5, 656, x1)

inst_60:
// rs2_w1_val == 16384, rs1_w0_val == 4294950911
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000cffffbfff;  op2val:0x00004000ffffffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000cffffbfff, 0x00004000ffffffff, x5, 672, x1)

inst_61:
// rs2_w1_val == 4096, rs1_w0_val == 4294967287, rs1_w1_val == 4026531839
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffffff7;  op2val:0x00001000aaaaaaaa;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xeffffffffffffff7, 0x00001000aaaaaaaa, x5, 688, x1)

inst_62:
// rs2_w1_val == 2048, rs1_w1_val == 262144, rs1_w0_val == 4278190079
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000feffffff;  op2val:0x0000080000000001;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00040000feffffff, 0x0000080000000001, x5, 704, x1)

inst_63:
// rs2_w1_val == 1024, rs2_w0_val == 4294967231, rs1_w1_val == 4286578687
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000200;  op2val:0x00000400ffffffbf;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7fffff00000200, 0x00000400ffffffbf, x5, 720, x1)

inst_64:
// rs2_w1_val == 512, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff04000000;  op2val:0x00000200f7ffffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffefff04000000, 0x00000200f7ffffff, x5, 736, x1)

inst_65:
// rs2_w1_val == 256, rs1_w0_val == 3221225471, rs1_w1_val == 4294967263
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfbfffffff;  op2val:0x00000100fffffffb;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdfbfffffff, 0x00000100fffffffb, x5, 752, x1)

inst_66:
// rs2_w1_val == 128, rs2_w0_val == 4194304
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000001;  op2val:0x0000008000400000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7ffff00000001, 0x0000008000400000, x5, 768, x1)

inst_67:
// rs2_w1_val == 64, rs1_w1_val == 4294965247
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000005;  op2val:0x0000004000000006;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffff7ff00000005, 0x0000004000000006, x5, 784, x1)

inst_68:
// rs2_w1_val == 32, rs1_w1_val == 32768
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000800000020000;  op2val:0x000000200000000d;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000800000020000, 0x000000200000000d, x5, 800, x1)

inst_69:
// rs2_w1_val == 16, rs1_w1_val == 4294966271
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00020000;  op2val:0x0000001004000000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffbff00020000, 0x0000001004000000, x5, 816, x1)

inst_70:
// rs2_w1_val == 8, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000001100080000;  op2val:0x00000008aaaaaaaa;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000001100080000, 0x00000008aaaaaaaa, x5, 832, x1)

inst_71:
// rs2_w1_val == 4, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00002000;  op2val:0x00000004ffffff7f;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7ffff00002000, 0x00000004ffffff7f, x5, 848, x1)

inst_72:
// rs2_w1_val == 2, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffffff;  op2val:0x0000000200080000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffff7fffffffff, 0x0000000200080000, x5, 864, x1)

inst_73:
// rs2_w1_val == 1, rs1_w1_val == 4096
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000ffffdfff;  op2val:0x00000001aaaaaaaa;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00001000ffffdfff, 0x00000001aaaaaaaa, x5, 880, x1)

inst_74:
// rs2_w1_val == 4294967295, rs1_w1_val == 4294967287
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000009;  op2val:0xfffffffffffffffb;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff700000009, 0xfffffffffffffffb, x5, 896, x1)

inst_75:
// rs2_w1_val == 0, rs1_w0_val == 4290772991, rs1_w1_val == 4278190079
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffbfffff;  op2val:0x0000000000001000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeffffffffbfffff, 0x0000000000001000, x5, 912, x1)

inst_76:
// rs2_w0_val == 1431655765, rs1_w0_val == 4294443007
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fff7ffff;  op2val:0x0000000c55555555;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x20000000fff7ffff, 0x0000000c55555555, x5, 928, x1)

inst_77:
// rs2_w0_val == 2147483647, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff0000000e;  op2val:0xfff7ffff7fffffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefffffff0000000e, 0xfff7ffff7fffffff, x5, 944, x1)

inst_78:
// rs2_w0_val == 3221225471, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd04000000;  op2val:0x00000800bfffffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffd04000000, 0x00000800bfffffff, x5, 960, x1)

inst_79:
// rs2_w0_val == 3758096383, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000fffffeff;  op2val:0x02000000dfffffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x01000000fffffeff, 0x02000000dfffffff, x5, 976, x1)

inst_80:
// rs2_w0_val == 4227858431, rs1_w1_val == 512
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000020000000003;  op2val:0xfefffffffbffffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000020000000003, 0xfefffffffbffffff, x5, 992, x1)

inst_81:
// rs2_w0_val == 4278190079, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000400000000009;  op2val:0xfffffffdfeffffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000400000000009, 0xfffffffdfeffffff, x5, 1008, x1)

inst_82:
// rs2_w0_val == 4286578687, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000400004000;  op2val:0x00001000ff7fffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000400004000, 0x00001000ff7fffff, x5, 1024, x1)

inst_83:
// rs2_w0_val == 4290772991, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000400000000020;  op2val:0xfffffdffffbfffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000400000000020, 0xfffffdffffbfffff, x5, 1040, x1)

inst_84:
// rs2_w0_val == 4294836223, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfeffffff;  op2val:0xfffffffffffdffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffdfeffffff, 0xfffffffffffdffff, x5, 1056, x1)

inst_85:
// rs2_w0_val == 4294901759, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000fffffff7f;  op2val:0xfffefffffffeffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000fffffff7f, 0xfffefffffffeffff, x5, 1072, x1)

inst_86:
// rs2_w0_val == 4, rs1_w0_val == 268435456
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0080000010000000;  op2val:0x0002000000000004;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080000010000000, 0x0002000000000004, x5, 1088, x1)

inst_87:
// rs2_w0_val == 2, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000300020000;  op2val:0xffffffbf00000002;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000300020000, 0xffffffbf00000002, x5, 1104, x1)

inst_88:
// rs1_w1_val == 2147483647, rs1_w0_val == 4227858431
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffbffffff;  op2val:0x00002000f7ffffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7ffffffffbffffff, 0x00002000f7ffffff, x5, 1120, x1)

inst_89:
// rs1_w1_val == 3221225471, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffffff;  op2val:0xffbfffff0000000b;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbfffffffffffffff, 0xffbfffff0000000b, x5, 1136, x1)

inst_90:
// rs1_w1_val == 3758096383, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00004000;  op2val:0x04000000fffdffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfffffff00004000, 0x04000000fffdffff, x5, 1152, x1)

inst_91:
// rs1_w1_val == 4227858431, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffbfff;  op2val:0xfffffefffffffffb;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffffffffffbfff, 0xfffffefffffffffb, x5, 1168, x1)

inst_92:
// rs1_w1_val == 4261412863, rs1_w0_val == 4294705151
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffbffff;  op2val:0x0000000cffdfffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdfffffffffbffff, 0x0000000cffdfffff, x5, 1184, x1)

inst_93:
// rs1_w1_val == 4292870143, rs2_w0_val == 256
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00001000;  op2val:0x0100000000000100;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdfffff00001000, 0x0100000000000100, x5, 1200, x1)

inst_94:
// rs1_w1_val == 4294836223, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffbffffff;  op2val:0xffbfffff00000009;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffdfffffbffffff, 0xffbfffff00000009, x5, 1216, x1)

inst_95:
// rs1_w1_val == 4294901759, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffffffeff;  op2val:0xfffdffff00000040;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffefffffffffeff, 0xfffdffff00000040, x5, 1232, x1)

inst_96:
// rs1_w1_val == 4294950911, rs1_w0_val == 4294967291
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffffb;  op2val:0x000000000000000d;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffbffffffffffb, 0x000000000000000d, x5, 1248, x1)

inst_97:
// rs1_w1_val == 4294967291, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00100000;  op2val:0x0000004020000000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffb00100000, 0x0000004020000000, x5, 1264, x1)

inst_98:
// rs1_w1_val == 4294967294, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefeffffff;  op2val:0x000000107fffffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffefeffffff, 0x000000107fffffff, x5, 1280, x1)

inst_99:
// rs1_w1_val == 1073741824, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000800;  op2val:0x55555555aaaaaaaa;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x4000000000000800, 0x55555555aaaaaaaa, x5, 1296, x1)

inst_100:
// rs1_w1_val == 268435456, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000055555555;  op2val:0xfffffffd00000200;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x1000000055555555, 0xfffffffd00000200, x5, 1312, x1)

inst_101:
// rs1_w1_val == 67108864, rs2_w0_val == 134217728
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0400000000000005;  op2val:0xfeffffff08000000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0400000000000005, 0xfeffffff08000000, x5, 1328, x1)

inst_102:
// rs1_w1_val == 33554432, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0200000000000100;  op2val:0xfffffffffffffffb;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200000000000100, 0xfffffffffffffffb, x5, 1344, x1)

inst_103:
// rs1_w1_val == 4194304, rs2_w0_val == 8192
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000fffeffff;  op2val:0x0000001300002000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00400000fffeffff, 0x0000001300002000, x5, 1360, x1)

inst_104:
// rs1_w1_val == 1048576, rs2_w0_val == 16777216
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000fffffffe;  op2val:0x0000008001000000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00100000fffffffe, 0x0000008001000000, x5, 1376, x1)

inst_105:
// rs1_w1_val == 65536, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0001000000000040;  op2val:0x0000000900008000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001000000000040, 0x0000000900008000, x5, 1392, x1)

inst_106:
// rs1_w1_val == 2048, rs2_w0_val == 4294966271
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000080000100000;  op2val:0x00000006fffffbff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000080000100000, 0x00000006fffffbff, x5, 1408, x1)

inst_107:
// rs1_w1_val == 1024, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000040000000007;  op2val:0x0200000040000000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000040000000007, 0x0200000040000000, x5, 1424, x1)

inst_108:
// rs1_w1_val == 256, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100dfffffff;  op2val:0xffefffff00000100;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000100dfffffff, 0xffefffff00000100, x5, 1440, x1)

inst_109:
// rs1_w1_val == 2, rs1_w0_val == 4293918719
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000002ffefffff;  op2val:0xfffffff700000008;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000002ffefffff, 0xfffffff700000008, x5, 1456, x1)

inst_110:
// rs1_w1_val == 4294967295, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffbfffffff;  op2val:0xffffffdf0000000d;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffffbfffffff, 0xffffffdf0000000d, x5, 1472, x1)

inst_111:
// rs1_w0_val == 2863311530, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000aaaaaaaa;  op2val:0x0000001000800000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00004000aaaaaaaa, 0x0000001000800000, x5, 1488, x1)

inst_112:
// rs1_w0_val == 2147483647, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000f7fffffff;  op2val:0x0000000700002000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000f7fffffff, 0x0000000700002000, x5, 1504, x1)

inst_113:
// rs1_w0_val == 4026531839, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffefffffff;  op2val:0x2000000000000006;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffefffffefffffff, 0x2000000000000006, x5, 1520, x1)

inst_114:
// rs1_w0_val == 4160749567, rs2_w0_val == 268435456
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffff7ffffff;  op2val:0x0004000010000000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffff7ffffff, 0x0004000010000000, x5, 1536, x1)

inst_115:
// rs1_w0_val == 4261412863, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000fdffffff;  op2val:0x04000000fbffffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00040000fdffffff, 0x04000000fbffffff, x5, 1552, x1)

inst_116:
// rs2_w0_val == 4294934527, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x008000007fffffff;  op2val:0x00000001ffff7fff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x008000007fffffff, 0x00000001ffff7fff, x5, 1568, x1)

inst_117:
// rs1_w0_val == 4292870143, rs2_w0_val == 33554432
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000effdfffff;  op2val:0x0001000002000000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000effdfffff, 0x0001000002000000, x5, 1584, x1)

inst_118:
// rs2_w0_val == 4294963199, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0002000020000000;  op2val:0x00001000ffffefff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0002000020000000, 0x00001000ffffefff, x5, 1600, x1)

inst_119:
// rs2_w0_val == 4294965247, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf0000000c;  op2val:0xf7fffffffffff7ff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffbf0000000c, 0xf7fffffffffff7ff, x5, 1616, x1)

inst_120:
// rs1_w0_val == 4294836223, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffdffff;  op2val:0x00008000f7ffffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffbffffffdffff, 0x00008000f7ffffff, x5, 1632, x1)

inst_121:
// rs2_w0_val == 16384, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0010000000000013;  op2val:0xffdfffff00004000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0010000000000013, 0xffdfffff00004000, x5, 1648, x1)

inst_122:
// rs1_w0_val == 4294965247, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000007fffff7ff;  op2val:0x000001000000000d;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000007fffff7ff, 0x000001000000000d, x5, 1664, x1)

inst_123:
// rs1_w0_val == 4294966271, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffffbff;  op2val:0xffdffffffeffffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffeffffffffbff, 0xffdffffffeffffff, x5, 1680, x1)

inst_124:
// rs2_w0_val == 4294967293, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000004ffdfffff;  op2val:0xeffffffffffffffd;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000004ffdfffff, 0xeffffffffffffffd, x5, 1696, x1)

inst_125:
// rs1_w0_val == 4294966783, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000fffffdff;  op2val:0x0000000d00080000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00008000fffffdff, 0x0000000d00080000, x5, 1712, x1)

inst_126:
// rs2_w0_val == 4294967294, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000100;  op2val:0x00080000fffffffe;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffbff00000100, 0x00080000fffffffe, x5, 1728, x1)

inst_127:
// rs1_w0_val == 4294967263, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffffffdf;  op2val:0x00000100aaaaaaaa;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefffffffffffffdf, 0x00000100aaaaaaaa, x5, 1744, x1)

inst_128:
// rs1_w0_val == 4294967279, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffffffef;  op2val:0x00004000ffbfffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeffffffffffffef, 0x00004000ffbfffff, x5, 1760, x1)

inst_129:
// rs1_w0_val == 4294967293, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000afffffffd;  op2val:0xdfffffff00800000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000afffffffd, 0xdfffffff00800000, x5, 1776, x1)

inst_130:
// rs1_w0_val == 1073741824, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd40000000;  op2val:0xfeffffff00001000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffd40000000, 0xfeffffff00001000, x5, 1792, x1)

inst_131:
// rs1_w0_val == 134217728, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff08000000;  op2val:0x0000000f00000012;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffffff08000000, 0x0000000f00000012, x5, 1808, x1)

inst_132:
// rs2_w0_val == 262144, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000aaaaaaaa;  op2val:0xffffffff00040000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000000aaaaaaaa, 0xffffffff00040000, x5, 1824, x1)

inst_133:
// rs1_w0_val == 4194304, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00400000;  op2val:0x0020000000020000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffefff00400000, 0x0020000000020000, x5, 1840, x1)

inst_134:
// rs2_w0_val == 2048, rs1_w0_val == 8388608
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000800000;  op2val:0xffffdfff00000800;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x4000000000800000, 0xffffdfff00000800, x5, 1856, x1)

inst_135:
// rs2_w0_val == 65536, 
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x000000020000000b;  op2val:0xfffffffe00010000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000000020000000b, 0xfffffffe00010000, x5, 1872, x1)

inst_136:
// rs2_w1_val == 1431655765, rs2_w0_val == 4294967263, rs1_w0_val == 2097152, rs1_w1_val == 4294967279
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00200000;  op2val:0x55555555ffffffdf;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffef00200000, 0x55555555ffffffdf, x5, 1888, x1)

inst_137:
// rs2_w1_val == 2147483647, rs1_w0_val == 4294967231, rs1_w1_val == 1, rs2_w0_val == 4294967295
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000001ffffffbf;  op2val:0x7fffffffffffffff;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000001ffffffbf, 0x7fffffffffffffff, x5, 1904, x1)

inst_138:
// rs2_w1_val == 4294705151, rs2_w0_val == 0, rs1_w0_val == 4294934527
// opcode: mulr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000cffff7fff;  op2val:0xfffbffff00000000;
TEST_P64_PNN_OP(mulr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000cffff7fff, 0xfffbffff00000000, x5, 1920, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 242*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
