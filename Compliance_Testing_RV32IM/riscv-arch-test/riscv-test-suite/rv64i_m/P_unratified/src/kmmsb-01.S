
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmmsb instruction of the RISC-V RV64PZicsr extension for the kmmsb covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmmsb)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x29, rs2==x17, rd==x29, rs1_w0_val == -2147483648, rs2_w0_val == -4194305, rs2_w1_val == -268435457
// opcode: kmmsb ; op1:x29; dest:x29; op1val:0xfffffffa80000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x29, x29, x17, 0x0000000000000000, 0xfffffffa80000000, 0xefffffffffbfffff, x29, x6, 0, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x4, rs2==x22, rd==x10, rs2_w1_val == -1431655766, rs1_w1_val == 4194304
// opcode: kmmsb ; op1:x4; dest:x10; op1val:0x4000003fffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x10, x4, x22, 0x0000000000000000, 0x4000003fffffff, 0xaaaaaaaa00000006, x4, x6, 16, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x11, rs2==x11, rd==x21, rs2_w1_val == 1431655765, rs2_w0_val == -65, rs1_w1_val == -65537, rs1_w0_val == -33554433
// opcode: kmmsb ; op1:x11; dest:x21; op1val:0xfffefffffdffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x21, x11, x11, 0x0000000000000000, 0xfffefffffdffffff, 0x55555555ffffffbf, x11, x6, 32, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x19, rs2==x19, rd==x19, rs2_w1_val == 2147483647, rs1_w0_val == -131073, rs1_w1_val == -268435457
// opcode: kmmsb ; op1:x19; dest:x19; op1val:0xeffffffffffdffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x19, x19, x19, 0x0000000000000000, 0xeffffffffffdffff, 0x7fffffff66666666, x19, x6, 48, x8)

inst_4:
// rs2 == rd != rs1, rs1==x17, rs2==x31, rd==x31, rs2_w1_val == -1073741825, rs1_w0_val == -2097153, rs1_w1_val == 1431655765, rs2_w0_val == -16777217
// opcode: kmmsb ; op1:x17; dest:x31; op1val:0x55555555ffdfffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x17, x31, 0x0000000000000000, 0x55555555ffdfffff, 0xbffffffffeffffff, x17, x6, 64, x8)

inst_5:
// rs1==x5, rs2==x2, rd==x20, rs2_w1_val == -536870913, rs1_w1_val == 4096, rs1_w0_val == -513, rs2_w0_val == 1431655765
// opcode: kmmsb ; op1:x5; dest:x20; op1val:0x001000fffffdff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x20, x5, x2, 0x0000000000000000, 0x001000fffffdff, 0xdfffffff55555555, x5, x6, 80, x8)

inst_6:
// rs1==x24, rs2==x20, rd==x22, rs2_w1_val == -134217729, rs1_w1_val == 262144, rs1_w0_val == -257, rs2_w0_val == -8388609
// opcode: kmmsb ; op1:x24; dest:x22; op1val:0x040000fffffeff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x22, x24, x20, 0x0000000000000000, 0x040000fffffeff, 0xf7ffffffff7fffff, x24, x6, 96, x8)

inst_7:
// rs1==x14, rs2==x7, rd==x9, rs2_w1_val == -67108865, rs1_w1_val == 256, rs1_w0_val == -129, rs2_w0_val == -129
// opcode: kmmsb ; op1:x14; dest:x9; op1val:0x000100ffffff7f;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x9, x14, x7, 0x0000000000000000, 0x000100ffffff7f, 0xfbffffffffffff7f, x14, x6, 112, x8)

inst_8:
// rs1==x16, rs2==x0, rd==x30, rs2_w1_val == -33554433, rs1_w1_val == 4, rs2_w0_val == -2049
// opcode: kmmsb ; op1:x16; dest:x30; op1val:0x000004fffffffc;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x30, x16, x0, 0x0000000000000000, 0x000004fffffffc, 0xfdfffffffffff7ff, x16, x6, 128, x8)

inst_9:
// rs1==x27, rs2==x16, rd==x3, rs2_w1_val == -16777217, rs2_w0_val == -1
// opcode: kmmsb ; op1:x27; dest:x3; op1val:0xfffffff900000003;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x3, x27, x16, 0x0000000000000000, 0xfffffff900000003, 0xfeffffffffffffff, x27, x6, 144, x8)

inst_10:
// rs1==x20, rs2==x30, rd==x25, rs2_w1_val == -8388609, rs1_w0_val == -524289, rs2_w0_val == 33554432
// opcode: kmmsb ; op1:x20; dest:x25; op1val:0x33333333fff7ffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x25, x20, x30, 0x0000000000000000, 0x33333333fff7ffff, 0xff7fffff02000000, x20, x6, 160, x8)

inst_11:
// rs1==x21, rs2==x12, rd==x4, rs2_w1_val == -4194305, rs1_w1_val == 1, rs1_w0_val == 0
// opcode: kmmsb ; op1:x21; dest:x4; op1val:0x00000100000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x4, x21, x12, 0x0000000000000000, 0x00000100000000, 0xffbfffff00000006, x21, x6, 176, x8)

inst_12:
// rs1==x0, rs2==x26, rd==x14, rs2_w1_val == -2097153, rs1_w1_val == 2
// opcode: kmmsb ; op1:x0; dest:x14; op1val:0x00000280000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x14, x0, x26, 0x0000000000000000, 0x00000280000000, 0xffdfffffffffffff, x0, x6, 192, x8)

inst_13:
// rs1==x28, rs2==x1, rd==x23, rs2_w1_val == -1048577, rs1_w0_val == 33554432, rs1_w1_val == -1073741825, rs2_w0_val == -33554433
// opcode: kmmsb ; op1:x28; dest:x23; op1val:0xbfffffff02000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x23, x28, x1, 0x0000000000000000, 0xbfffffff02000000, 0xffeffffffdffffff, x28, x6, 208, x8)

inst_14:
// rs1==x25, rs2==x9, rd==x8, rs2_w1_val == -524289, rs1_w1_val == 536870912
// opcode: kmmsb ; op1:x25; dest:x8; op1val:0x2000000033333332;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x8, x25, x9, 0x0000000000000000, 0x2000000033333332, 0xfff7ffff00000005, x25, x6, 224, x4)
RVTEST_SIGBASE(x14,signature_x14_0)

inst_15:
// rs1==x12, rs2==x21, rd==x6, rs2_w1_val == -262145, rs1_w0_val == 8388608, rs2_w0_val == 0
// opcode: kmmsb ; op1:x12; dest:x6; op1val:0x00000200800000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x6, x12, x21, 0x0000000000000000, 0x00000200800000, 0xfffbffff00000000, x12, x14, 0, x4)

inst_16:
// rs1==x2, rs2==x18, rd==x26, rs2_w1_val == -131073, rs1_w1_val == -513, rs1_w0_val == -5
// opcode: kmmsb ; op1:x2; dest:x26; op1val:0xfffffdfffffffffb;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x26, x2, x18, 0x0000000000000000, 0xfffffdfffffffffb, 0xfffdffff0000b504, x2, x14, 16, x4)

inst_17:
// rs1==x7, rs2==x8, rd==x13, rs2_w1_val == -65537, rs2_w0_val == -513, rs1_w1_val == -524289
// opcode: kmmsb ; op1:x7; dest:x13; op1val:0xfff7ffffffff4afc;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x13, x7, x8, 0x0000000000000000, 0xfff7ffffffff4afc, 0xfffefffffffffdff, x7, x14, 32, x4)

inst_18:
// rs1==x30, rs2==x29, rd==x24, rs2_w1_val == -32769, rs1_w0_val == 1073741824
// opcode: kmmsb ; op1:x30; dest:x24; op1val:0x00000440000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x24, x30, x29, 0x0000000000000000, 0x00000440000000, 0xffff7ffffffffff6, x30, x14, 48, x4)

inst_19:
// rs1==x10, rs2==x28, rd==x17, rs2_w1_val == -16385, rs2_w0_val == -17, rs1_w1_val == 0
// opcode: kmmsb ; op1:x10; dest:x17; op1val:0x000000ffff4afc;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x17, x10, x28, 0x0000000000000000, 0x000000ffff4afc, 0xffffbfffffffffef, x10, x14, 64, x4)

inst_20:
// rs1==x23, rs2==x24, rd==x5, rs2_w1_val == -8193, 
// opcode: kmmsb ; op1:x23; dest:x5; op1val:0x55555555ffff4afc;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x5, x23, x24, 0x0000000000000000, 0x55555555ffff4afc, 0xffffdfff00000005, x23, x14, 80, x4)

inst_21:
// rs1==x22, rs2==x15, rd==x28, rs2_w1_val == -4097, rs1_w0_val == 256
// opcode: kmmsb ; op1:x22; dest:x28; op1val:0x6666666700000100;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x28, x22, x15, 0x0000000000000000, 0x6666666700000100, 0xffffeffffffff7ff, x22, x14, 96, x4)

inst_22:
// rs1==x3, rs2==x27, rd==x1, rs2_w1_val == -2049, 
// opcode: kmmsb ; op1:x3; dest:x1; op1val:0xfffffdff80000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x1, x3, x27, 0x0000000000000000, 0xfffffdff80000000, 0xfffff7ff00000005, x3, x14, 112, x4)

inst_23:
// rs1==x31, rs2==x23, rd==x11, rs2_w1_val == -1025, rs2_w0_val == -2097153, rs1_w1_val == -134217729
// opcode: kmmsb ; op1:x31; dest:x11; op1val:0xf7ffffff00000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x11, x31, x23, 0x0000000000000000, 0xf7ffffff00000000, 0xfffffbffffdfffff, x31, x14, 128, x4)

inst_24:
// rs1==x15, rs2==x6, rd==x18, rs2_w1_val == -513, rs1_w1_val == 32768
// opcode: kmmsb ; op1:x15; dest:x18; op1val:0x008000fffdffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x18, x15, x6, 0x0000000000000000, 0x008000fffdffff, 0xfffffdff33333332, x15, x14, 144, x11)

inst_25:
// rs1==x13, rs2==x3, rd==x27, rs2_w1_val == -257, rs2_w0_val == 134217728, rs1_w0_val == -65537
// opcode: kmmsb ; op1:x13; dest:x27; op1val:0x00b504fffeffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x27, x13, x3, 0x0000000000000000, 0x00b504fffeffff, 0xfffffeff08000000, x13, x14, 160, x11)

inst_26:
// rs1==x26, rs2==x25, rd==x7, rs2_w1_val == -129, rs1_w1_val == -2147483648, rs2_w0_val == 4
// opcode: kmmsb ; op1:x26; dest:x7; op1val:0x80000000fffffffa;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x7, x26, x25, 0x0000000000000000, 0x80000000fffffffa, 0xffffff7f00000004, x26, x14, 176, x11)

inst_27:
// rs1==x9, rs2==x13, rd==x12, rs2_w1_val == -65, rs2_w0_val == -8193, rs1_w1_val == -32769
// opcode: kmmsb ; op1:x9; dest:x12; op1val:0xffff7fff00800000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x12, x9, x13, 0x0000000000000000, 0xffff7fff00800000, 0xffffffbfffffdfff, x9, x14, 192, x11)

inst_28:
// rs1==x1, rs2==x10, rd==x0, rs2_w1_val == -33, rs2_w0_val == 536870912
// opcode: kmmsb ; op1:x1; dest:x0; op1val:0x40000000000009;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x0, x1, x10, 0x0000000000000000, 0x40000000000009, 0xffffffdf20000000, x1, x14, 208, x11)

inst_29:
// rs1==x6, rs2==x4, rd==x16, rs2_w1_val == -17, rs1_w0_val == -16777217, rs1_w1_val == -4097
// opcode: kmmsb ; op1:x6; dest:x16; op1val:0xffffeffffeffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x16, x6, x4, 0x0000000000000000, 0xffffeffffeffffff, 0xffffffef00000005, x6, x14, 224, x11)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x8, rs2==x14, rd==x2, rs2_w1_val == -9, rs1_w0_val == 4, rs2_w0_val == -9, rs1_w1_val == -8388609
// opcode: kmmsb ; op1:x8; dest:x2; op1val:0xff7fffff00000004;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x2, x8, x14, 0x0000000000000000, 0xff7fffff00000004, 0xfffffff7fffffff7, x8, x1, 0, x11)

inst_31:
// rs1==x18, rs2==x5, rd==x15, rs2_w1_val == -5, rs1_w1_val == 2147483647, rs2_w0_val == 2
// opcode: kmmsb ; op1:x18; dest:x15; op1val:0x7fffffffffff4afd;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x15, x18, x5, 0x0000000000000000, 0x7fffffffffff4afd, 0xfffffffb00000002, x18, x1, 16, x11)

inst_32:
// rs2_w1_val == -3, rs1_w0_val == 134217728, rs1_w1_val == 32
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x00002008000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x00002008000000, 0xfffffffdffffffef, x30, x1, 32, x11)

inst_33:
// rs2_w1_val == -2, rs2_w0_val == 1048576
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x55555555aaaaaaab;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x55555555aaaaaaab, 0xfffffffe00100000, x30, x1, 48, x11)

inst_34:
// rs2_w1_val == -2147483648, rs2_w0_val == -1025, rs1_w0_val == 128
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x00000000000080;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x00000000000080, 0x80000000fffffbff, x30, x1, 64, x11)

inst_35:
// rs2_w1_val == 1073741824, rs1_w1_val == 16384, rs2_w0_val == 131072
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x00400080000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x00400080000000, 0x4000000000020000, x30, x1, 80, x11)

inst_36:
// rs2_w1_val == 536870912, rs2_w0_val == 16, rs1_w1_val == 8192
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x002000ffff4afd;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x002000ffff4afd, 0x2000000000000010, x30, x1, 96, x11)

inst_37:
// rs2_w1_val == 268435456, rs2_w0_val == 262144
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x00000433333333;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x00000433333333, 0x1000000000040000, x30, x1, 112, x11)

inst_38:
// rs2_w1_val == 134217728, rs1_w0_val == -1431655766
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x66666667aaaaaaaa;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x66666667aaaaaaaa, 0x800000000000002, x30, x1, 128, x11)

inst_39:
// rs2_w1_val == 67108864, rs1_w0_val == 32768
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x3333333400008000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x3333333400008000, 0x400000000000000, x30, x1, 144, x11)

inst_40:
// rs2_w1_val == 33554432, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x000000fffffffc;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x000000fffffffc, 0x2000000ffdfffff, x30, x1, 160, x11)

inst_41:
// rs2_w1_val == 16777216, rs2_w0_val == -1431655766, rs1_w1_val == 524288
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x080000fffffeff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x080000fffffeff, 0x1000000aaaaaaaa, x30, x1, 176, x11)

inst_42:
// rs2_w1_val == 8388608, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xf7ffffff00000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000000, 0x80000000000002, x30, x1, 192, x11)

inst_43:
// rs2_w1_val == 4194304, rs1_w1_val == -1431655766, rs2_w0_val == -67108865
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xaaaaaaaa00000005;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000005, 0x400000fbffffff, x30, x1, 208, x11)

inst_44:
// rs2_w1_val == 2097152, rs1_w1_val == -4194305
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xffbfffff00000009;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000009, 0x200000ffffffff, x30, x1, 224, x11)

inst_45:
// rs2_w1_val == 1048576, rs1_w0_val == 2, rs2_w0_val == 2147483647
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x00b50500000002;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x00b50500000002, 0x1000007fffffff, x30, x1, 240, x11)

inst_46:
// rs2_w1_val == 524288, rs1_w0_val == -4194305, rs1_w1_val == 131072
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x020000ffbfffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x020000ffbfffff, 0x08000055555555, x30, x1, 256, x11)

inst_47:
// rs2_w1_val == 262144, rs1_w0_val == 131072
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x00000400020000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x00000400020000, 0x040000ffff4afc, x30, x1, 272, x11)

inst_48:
// rs2_w1_val == 131072, rs1_w1_val == 33554432
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x2000000ffff4afc;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x2000000ffff4afc, 0x02000000000005, x30, x1, 288, x11)

inst_49:
// rs2_w1_val == 65536, rs1_w1_val == 2097152
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x20000000000004;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x20000000000004, 0x010000fbffffff, x30, x1, 304, x11)

inst_50:
// rs2_w1_val == 32768, rs1_w1_val == -1025, rs1_w0_val == -262145
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfffffbfffffbffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffbffff, 0x008000fffffbff, x30, x1, 320, x11)

inst_51:
// rs2_w1_val == 16384, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xffff4afd00000007;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xffff4afd00000007, 0x00400000000002, x30, x1, 336, x11)

inst_52:
// rs2_w1_val == 8192, rs1_w0_val == -3
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xffbffffffffffffd;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xffbffffffffffffd, 0x002000fdffffff, x30, x1, 352, x11)

inst_53:
// rs2_w1_val == 4096, rs2_w0_val == -268435457, rs1_w0_val == -17
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x040000ffffffef;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x040000ffffffef, 0x001000efffffff, x30, x1, 368, x11)

inst_54:
// rs2_w1_val == 2048, rs1_w1_val == -2049
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfffff7ff00000005;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000005, 0x000800ffdfffff, x30, x1, 384, x11)

inst_55:
// rs2_w1_val == 1024, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x55555554fffbffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x55555554fffbffff, 0x000400fffffff9, x30, x1, 400, x11)

inst_56:
// rs1_w0_val == 8192, rs1_w1_val == 8388608
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x80000000002000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x80000000002000, 0xffffffbf00000009, x30, x1, 416, x11)

inst_57:
// rs1_w0_val == 4096, rs2_w0_val == 1073741824, rs2_w1_val == 16
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x6666666600001000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x6666666600001000, 0x00001040000000, x30, x1, 432, x11)

inst_58:
// rs1_w0_val == 2048, rs2_w0_val == -536870913, rs2_w1_val == 2
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xffff4afc00000800;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xffff4afc00000800, 0x000002dfffffff, x30, x1, 448, x11)

inst_59:
// rs1_w0_val == 1024, rs2_w1_val == 4, rs1_w1_val == 64
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x00004000000400;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x00004000000400, 0x000004ffff4afc, x30, x1, 464, x11)

inst_60:
// rs1_w0_val == 512, rs2_w0_val == 1
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfffffbff00000200;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000200, 0x00200000000001, x30, x1, 480, x11)

inst_61:
// rs1_w0_val == 64, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x00000000000040;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x00000000000040, 0x000800fffffffa, x30, x1, 496, x11)

inst_62:
// rs1_w0_val == 32, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x8000000000000020;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x8000000000000020, 0xfffbffff00000000, x30, x1, 512, x11)

inst_63:
// rs1_w0_val == 16, rs1_w1_val == -33
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xffffffdf00000010;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000010, 0xbfffffff66666666, x30, x1, 528, x11)

inst_64:
// rs1_w0_val == 8, rs1_w1_val == 16, rs2_w0_val == -65537
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x00001000000008;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x00001000000008, 0xfffffffdfffeffff, x30, x1, 544, x11)

inst_65:
// rs1_w0_val == 1, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xefffffff00000001;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xefffffff00000001, 0x00b50320000000, x30, x1, 560, x11)

inst_66:
// rs1_w0_val == -1, rs1_w1_val == -1
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xffffffffffffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0xefffffff66666665, x30, x1, 576, x11)

inst_67:
// rs2_w1_val == 512, rs1_w0_val == 2097152, rs1_w1_val == 1048576
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x10000000200000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x10000000200000, 0x000200fffffffa, x30, x1, 592, x11)

inst_68:
// rs2_w1_val == 256, rs1_w0_val == -9
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfffffffcfffffff7;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfffffffcfffffff7, 0x000100ffff4afd, x30, x1, 608, x11)

inst_69:
// rs2_w1_val == 128, rs2_w0_val == -524289
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x5555555500000009;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x5555555500000009, 0x000080fff7ffff, x30, x1, 624, x11)

inst_70:
// rs2_w1_val == 64, rs2_w0_val == 4194304
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x10000066666666;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x10000066666666, 0x00004000400000, x30, x1, 640, x11)

inst_71:
// rs2_w1_val == 32, rs1_w1_val == -5, rs2_w0_val == -33
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfffffffbffffff7f;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffff7f, 0x000020ffffffdf, x30, x1, 656, x11)

inst_72:
// rs2_w1_val == 8, rs1_w1_val == -262145, rs1_w0_val == -536870913
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfffbffffdfffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfffbffffdfffffff, 0x00000800000009, x30, x1, 672, x11)

inst_73:
// rs2_w1_val == 1, rs2_w0_val == 16777216, rs1_w0_val == -8388609
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x020000ff7fffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x020000ff7fffff, 0x00000101000000, x30, x1, 688, x11)

inst_74:
// rs2_w1_val == 0, rs1_w0_val == -8193
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfffffffbffffdfff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffdfff, 0x000000c0000000, x30, x1, 704, x11)

inst_75:
// rs2_w1_val == -1, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x80000055555554;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x80000055555554, 0xffffffff00400000, x30, x1, 720, x11)

inst_76:
// rs2_w0_val == -1073741825, rs1_w1_val == 8
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x000008ffffdfff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x000008ffffdfff, 0x000040bfffffff, x30, x1, 736, x11)

inst_77:
// rs2_w0_val == -134217729, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x00000800000006;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x00000800000006, 0x80000000f7ffffff, x30, x1, 752, x11)

inst_78:
// rs2_w0_val == -1048577, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x000005c0000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x000005c0000000, 0x000006ffefffff, x30, x1, 768, x11)

inst_79:
// rs2_w0_val == -262145, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xffff4afd00000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xffff4afd00000000, 0xf7fffffffffbffff, x30, x1, 784, x11)

inst_80:
// rs2_w0_val == -131073, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x00000640000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x00000640000000, 0xfffdfffffffdffff, x30, x1, 800, x11)

inst_81:
// rs2_w0_val == -32769, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x00000000000006;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x00000000000006, 0x000005ffff7fff, x30, x1, 816, x11)

inst_82:
// rs2_w0_val == -16385, rs1_w1_val == 512
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x00020000000200;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x00020000000200, 0x000010ffffbfff, x30, x1, 832, x11)

inst_83:
// rs2_w0_val == -4097, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x00000700000040;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x00000700000040, 0x2000000ffffefff, x30, x1, 848, x11)

inst_84:
// rs2_w0_val == -257, rs1_w0_val == -1073741825
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfffffff6bfffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfffffff6bfffffff, 0xfffffefffffffeff, x30, x1, 864, x11)

inst_85:
// rs2_w0_val == -5, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xffff4afc00800000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xffff4afc00800000, 0xffff4afcfffffffb, x30, x1, 880, x11)

inst_86:
// rs2_w0_val == -3, rs1_w0_val == 1048576, rs1_w1_val == 16777216
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x100000000100000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x100000000100000, 0x000005fffffffd, x30, x1, 896, x11)

inst_87:
// rs2_w0_val == -2, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x10000000001000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x10000000001000, 0xffff4afdfffffffe, x30, x1, 912, x11)

inst_88:
// rs2_w0_val == -2147483648, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x6666666700000200;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x6666666700000200, 0xffffffef80000000, x30, x1, 928, x11)

inst_89:
// rs2_w0_val == 268435456, rs1_w1_val == 1024
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x000400fffffffa;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x000400fffffffa, 0xdfffffff10000000, x30, x1, 944, x11)

inst_90:
// rs2_w0_val == 67108864, rs1_w1_val == 67108864
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x4000000fdffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x4000000fdffffff, 0xfffffff604000000, x30, x1, 960, x11)

inst_91:
// rs2_w0_val == 64, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x00000800000200;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x00000800000200, 0xffff4afc00000040, x30, x1, 976, x11)

inst_92:
// rs2_w0_val == 32, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x3fffffff00800000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x3fffffff00800000, 0xefffffff00000020, x30, x1, 992, x11)

inst_93:
// rs2_w0_val == 8, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x80000000fffffffc;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x80000000fffffffc, 0x6666666600000008, x30, x1, 1008, x11)

inst_94:
// rs1_w1_val == -536870913, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xdfffffff55555556;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xdfffffff55555556, 0xfffffff7ffdfffff, x30, x1, 1024, x11)

inst_95:
// rs1_w0_val == 16384, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xffff7fff00004000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xffff7fff00004000, 0xfffbfffffffffffb, x30, x1, 1040, x11)

inst_96:
// rs1_w1_val == -67108865, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfbffffffffff4afc;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfbffffffffff4afc, 0xfffffff680000000, x30, x1, 1056, x11)

inst_97:
// rs1_w1_val == -33554433, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfdffffff00000002;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000002, 0x555555550000b503, x30, x1, 1072, x11)

inst_98:
// rs1_w1_val == -16777217, rs1_w0_val == 16777216
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfeffffff01000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfeffffff01000000, 0x100000040000000, x30, x1, 1088, x11)

inst_99:
// rs1_w1_val == -2097153, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xffdfffff00000002;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000002, 0x000000fffbffff, x30, x1, 1104, x11)

inst_100:
// rs1_w1_val == -1048577, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xffeffffffffffeff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffeff, 0xfeffffffaaaaaaaa, x30, x1, 1120, x11)

inst_101:
// rs1_w1_val == -131073, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfffdffff40000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfffdffff40000000, 0x00b504ffff4afc, x30, x1, 1136, x11)

inst_102:
// rs1_w1_val == -16385, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xffffbfff80000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xffffbfff80000000, 0xfffffbff55555554, x30, x1, 1152, x11)

inst_103:
// rs1_w1_val == -8193, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xffffdfffaaaaaaaa;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xffffdfffaaaaaaaa, 0x00000600000000, x30, x1, 1168, x11)

inst_104:
// rs1_w1_val == -257, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfffffeffffbfffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfffffeffffbfffff, 0xffffbfffffff4afc, x30, x1, 1184, x11)

inst_105:
// rs1_w1_val == -129, rs2_w0_val == 256, rs1_w0_val == -2
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xffffff7ffffffffe;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffffe, 0x100000000000100, x30, x1, 1200, x11)

inst_106:
// rs1_w1_val == -65, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xffffffbfdfffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xffffffbfdfffffff, 0x001000ff7fffff, x30, x1, 1216, x11)

inst_107:
// rs1_w1_val == -17, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xffffffef00008000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xffffffef00008000, 0x66666665ffffff7f, x30, x1, 1232, x11)

inst_108:
// rs1_w1_val == -9, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfffffff700020000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfffffff700020000, 0xffff7ffffbffffff, x30, x1, 1248, x11)

inst_109:
// rs1_w1_val == -3, rs1_w0_val == -67108865
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfffffffdfbffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfffffffdfbffffff, 0xfffefffffffff7ff, x30, x1, 1264, x11)

inst_110:
// rs1_w1_val == -2, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfffffffeffffffef;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffffef, 0x00000200000005, x30, x1, 1280, x11)

inst_111:
// rs1_w1_val == 1073741824, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x40000000fffffffe;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x40000000fffffffe, 0xfffeffff00100000, x30, x1, 1296, x11)

inst_112:
// rs1_w1_val == 268435456, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x1000000000000002;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x1000000000000002, 0x800000033333332, x30, x1, 1312, x11)

inst_113:
// rs1_w1_val == 134217728, rs1_w0_val == 268435456
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x800000010000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x800000010000000, 0x001000c0000000, x30, x1, 1328, x11)

inst_114:
// rs1_w1_val == 65536, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x01000000000006;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x01000000000006, 0xffffffdffffffff6, x30, x1, 1344, x11)

inst_115:
// rs1_w1_val == 2048, rs1_w0_val == 2147483647
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x0008007fffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x0008007fffffff, 0x010000feffffff, x30, x1, 1360, x11)

inst_116:
// rs1_w1_val == 128, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x000080fbffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x000080fbffffff, 0x004000aaaaaaaa, x30, x1, 1376, x11)

inst_117:
// rs1_w0_val == 1431655765, rs2_w0_val == 2097152
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xff7fffff55555555;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xff7fffff55555555, 0xaaaaaaaa00200000, x30, x1, 1392, x11)

inst_118:
// rs1_w0_val == -268435457, rs2_w0_val == 4096
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x010000efffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x010000efffffff, 0xffffbfff00001000, x30, x1, 1408, x11)

inst_119:
// rs1_w0_val == -134217729, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xc0000000f7ffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xc0000000f7ffffff, 0x000004bfffffff, x30, x1, 1424, x11)

inst_120:
// rs2_w0_val == 32768, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x00400008000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x00400008000000, 0x3333333400008000, x30, x1, 1440, x11)

inst_121:
// rs1_w0_val == -1048577, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x66666665ffefffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x66666665ffefffff, 0x000001c0000000, x30, x1, 1456, x11)

inst_122:
// rs1_w0_val == -32769, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xefffffffffff7fff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xefffffffffff7fff, 0xaaaaaaab00000004, x30, x1, 1472, x11)

inst_123:
// rs1_w0_val == 65536, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xdfffffff00010000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xdfffffff00010000, 0xfffffffa0000b503, x30, x1, 1488, x11)

inst_124:
// rs1_w0_val == -16385, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xefffffffffffbfff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xefffffffffffbfff, 0x01000055555555, x30, x1, 1504, x11)

inst_125:
// rs1_w0_val == -4097, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfffffbffffffefff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfffffbffffffefff, 0x020000fffeffff, x30, x1, 1520, x11)

inst_126:
// rs1_w0_val == -2049, rs2_w0_val == 2048
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x40000000fffff7ff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x40000000fffff7ff, 0xfffffffe00000800, x30, x1, 1536, x11)

inst_127:
// rs1_w0_val == -1025, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x000006fffffbff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x000006fffffbff, 0x040000ffff4afd, x30, x1, 1552, x11)

inst_128:
// rs1_w0_val == -65, rs2_w0_val == 1024
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x00b505ffffffbf;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x00b505ffffffbf, 0xaaaaaaab00000400, x30, x1, 1568, x11)

inst_129:
// rs1_w0_val == -33, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xaaaaaaaaffffffdf;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffffffdf, 0x08000000000006, x30, x1, 1584, x11)

inst_130:
// rs2_w0_val == 8388608, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xffffffdffffffff8;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffff8, 0x10000000800000, x30, x1, 1600, x11)

inst_131:
// rs1_w0_val == 536870912, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x1000000020000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x1000000020000000, 0x00000000000006, x30, x1, 1616, x11)

inst_132:
// rs2_w0_val == 524288, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xaaaaaaaafffffffc;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffffffc, 0x00020000080000, x30, x1, 1632, x11)

inst_133:
// rs1_w0_val == 67108864, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xffffdfff04000000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xffffdfff04000000, 0x000002ffffbfff, x30, x1, 1648, x11)

inst_134:
// rs2_w0_val == 65536, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x800000fffeffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x800000fffeffff, 0x00001000010000, x30, x1, 1664, x11)

inst_135:
// rs1_w0_val == 4194304, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x00000900400000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x00000900400000, 0x5555555500000000, x30, x1, 1680, x11)

inst_136:
// rs2_w0_val == 16384, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x800000000001000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x800000000001000, 0xffdfffff00004000, x30, x1, 1696, x11)

inst_137:
// rs2_w0_val == 8192, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfffeffff00000004;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000004, 0x5555555400002000, x30, x1, 1712, x11)

inst_138:
// rs1_w0_val == 524288, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfffeffff00080000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfffeffff00080000, 0x000004ffffffdf, x30, x1, 1728, x11)

inst_139:
// rs1_w0_val == 262144, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x1000000000040000;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x1000000000040000, 0xfffffffffffffffd, x30, x1, 1744, x11)

inst_140:
// rs2_w0_val == 512, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x008000feffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x008000feffffff, 0xfffffffb00000200, x30, x1, 1760, x11)

inst_141:
// rs2_w0_val == 128, 
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x000001aaaaaaab;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x000001aaaaaaab, 0x00000600000080, x30, x1, 1776, x11)

inst_142:
// rs2_w1_val == 1431655765, rs2_w0_val == -65, rs1_w1_val == -65537, rs1_w0_val == -33554433
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xfffefffffdffffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xfffefffffdffffff, 0x55555555ffffffbf, x30, x1, 1792, x11)

inst_143:
// rs2_w1_val == 2147483647, rs1_w0_val == -131073, rs1_w1_val == -268435457
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0xeffffffffffdffff;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0xeffffffffffdffff, 0x7fffffff66666666, x30, x1, 1808, x11)

inst_144:
// rs2_w1_val == -33554433, rs1_w1_val == 4, rs2_w0_val == -2049
// opcode: kmmsb ; op1:x30; dest:x31; op1val:0x000004fffffffc;  immval:$imm_val
TEST_PKRR_OP(kmmsb, x31, x30, x29, 0x0000000000000000, 0x000004fffffffc, 0xfdfffffffffff7ff, x30, x1, 1824, x11)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x14_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 230*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
