
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smar64 instruction of the RISC-V RV64PZicsr extension for the smar64 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smar64)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 == rd != rs2, rs1==x22, rs2==x7, rd==x22, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w0_val == 8192, rs1_w0_val != rs2_w0_val, rs1_w1_val == -32769, rs1_w0_val < 0 and rs2_w0_val > 0
// opcode: smar64 ; op1:x22; op2:x7; dest:x22; op1val:0xffff7fff80000000;  op2val:0x0000000500002000
TEST_P64_PNN_OP(smar64, x22, $rd_hi, x22, x7, 0x0000000000000000, $correctval_hi, 0xffff7fff80000000, 0x0000000500002000, x5, 0, x19)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x8, rd==x24, rs1_w1_val == rs2_w1_val, rs1_w0_val == 1, rs2_w0_val == 65536, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val > 0 and rs2_w0_val > 0
// opcode: smar64 ; op1:x23; op2:x8; dest:x24; op1val:0xfffffff800000001;  op2val:0xfffffff800010000
TEST_P64_PNN_OP(smar64, x24, $rd_hi, x23, x8, 0x0000000000000000, $correctval_hi, 0xfffffff800000001, 0xfffffff800010000, x5, 16, x19)

inst_2:
// rs1 == rs2 != rd, rs1==x0, rs2==x0, rd==x10, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val == 16384, rs1_w1_val == 262144, rs2_w1_val == -262145
// opcode: smar64 ; op1:x0; op2:x0; dest:x10; op1val:0x0004000000004000;  op2val:0xfffbffff00000003
TEST_P64_PNN_OP(smar64, x10, $rd_hi, x0, x0, 0x0000000000000000, $correctval_hi, 0x0004000000004000, 0xfffbffff00000003, x5, 32, x19)

inst_3:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val == -33554433, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w1_val == 2048
// opcode: smar64 ; op1:x18; op2:x18; dest:x18; op1val:0x00000007fdffffff;  op2val:0x00000800c0000000
TEST_P64_PNN_OP(smar64, x18, $rd_hi, x18, x18, 0x0000000000000000, $correctval_hi, 0x00000007fdffffff, 0x00000800c0000000, x5, 48, x19)

inst_4:
// rs2 == rd != rs1, rs1==x20, rs2==x14, rd==x14, rs1_w0_val == rs2_w0_val, rs2_w1_val == 16384, rs1_w0_val == -268435457, rs2_w0_val == -268435457
// opcode: smar64 ; op1:x20; op2:x14; dest:x14; op1val:0xfffffffcefffffff;  op2val:0x00004000efffffff
TEST_P64_PNN_OP(smar64, x14, $rd_hi, x20, x14, 0x0000000000000000, $correctval_hi, 0xfffffffcefffffff, 0x00004000efffffff, x5, 64, x19)

inst_5:
// rs1==x30, rs2==x22, rd==x8, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w1_val == -268435457, rs2_w1_val == 16777216
// opcode: smar64 ; op1:x30; op2:x22; dest:x8; op1val:0xefffffff00000003;  op2val:0x01000000fffffff8
TEST_P64_PNN_OP(smar64, x8, $rd_hi, x30, x22, 0x0000000000000000, $correctval_hi, 0xefffffff00000003, 0x01000000fffffff8, x5, 80, x19)

inst_6:
// rs1==x28, rs2==x1, rd==x12, rs2_w1_val == -1431655766, rs1_w0_val == -536870913, rs1_w1_val == -134217729, rs2_w0_val == -536870913
// opcode: smar64 ; op1:x28; op2:x1; dest:x12; op1val:0xf7ffffffdfffffff;  op2val:0xaaaaaaaadfffffff
TEST_P64_PNN_OP(smar64, x12, $rd_hi, x28, x1, 0x0000000000000000, $correctval_hi, 0xf7ffffffdfffffff, 0xaaaaaaaadfffffff, x5, 96, x19)

inst_7:
// rs1==x29, rs2==x24, rd==x26, rs2_w1_val == 1431655765, rs2_w0_val == 16777216, rs1_w1_val == 1024
// opcode: smar64 ; op1:x29; op2:x24; dest:x26; op1val:0x0000040000000006;  op2val:0x5555555501000000
TEST_P64_PNN_OP(smar64, x26, $rd_hi, x29, x24, 0x0000000000000000, $correctval_hi, 0x0000040000000006, 0x5555555501000000, x5, 112, x19)

inst_8:
// rs1==x7, rs2==x23, rd==x4, rs2_w1_val == 2147483647, rs2_w0_val == -262145, rs1_w0_val == 512, rs1_w1_val == 1431655765
// opcode: smar64 ; op1:x7; op2:x23; dest:x4; op1val:0x5555555500000200;  op2val:0x7ffffffffffbffff
TEST_P64_PNN_OP(smar64, x4, $rd_hi, x7, x23, 0x0000000000000000, $correctval_hi, 0x5555555500000200, 0x7ffffffffffbffff, x5, 128, x19)

inst_9:
// rs1==x10, rs2==x28, rd==x30, rs2_w1_val == -1073741825, rs2_w0_val == -1048577
// opcode: smar64 ; op1:x10; op2:x28; dest:x30; op1val:0x00000400fffffffc;  op2val:0xbfffffffffefffff
TEST_P64_PNN_OP(smar64, x30, $rd_hi, x10, x28, 0x0000000000000000, $correctval_hi, 0x00000400fffffffc, 0xbfffffffffefffff, x5, 144, x19)

inst_10:
// rs1==x14, rs2==x15, rd==x6, rs2_w1_val == -536870913, rs1_w0_val == -1025, rs2_w0_val == 1431655765, rs1_w1_val == -65537
// opcode: smar64 ; op1:x14; op2:x15; dest:x6; op1val:0xfffefffffffffbff;  op2val:0xdfffffff55555555
TEST_P64_PNN_OP(smar64, x6, $rd_hi, x14, x15, 0x0000000000000000, $correctval_hi, 0xfffefffffffffbff, 0xdfffffff55555555, x5, 160, x19)

inst_11:
// rs1==x21, rs2==x17, rd==x20, rs2_w1_val == -268435457, rs1_w0_val == -16777217, rs1_w1_val == 2
// opcode: smar64 ; op1:x21; op2:x17; dest:x20; op1val:0x00000002feffffff;  op2val:0xeffffffffffbffff
TEST_P64_PNN_OP(smar64, x20, $rd_hi, x21, x17, 0x0000000000000000, $correctval_hi, 0x00000002feffffff, 0xeffffffffffbffff, x5, 176, x19)

inst_12:
// rs1==x9, rs2==x6, rd==x2, rs2_w1_val == -134217729, rs2_w0_val == -1431655766, rs1_w0_val == -8193, rs1_w1_val == 2147483647
// opcode: smar64 ; op1:x9; op2:x6; dest:x2; op1val:0x7fffffffffffdfff;  op2val:0xf7ffffffaaaaaaaa
TEST_P64_PNN_OP(smar64, x2, $rd_hi, x9, x6, 0x0000000000000000, $correctval_hi, 0x7fffffffffffdfff, 0xf7ffffffaaaaaaaa, x5, 192, x19)

inst_13:
// rs1==x4, rs2==x12, rd==x28, rs2_w1_val == -67108865, rs1_w1_val == 8192
// opcode: smar64 ; op1:x4; op2:x12; dest:x28; op1val:0x00002000fffffff9;  op2val:0xfbffffff3fffffff
TEST_P64_PNN_OP(smar64, x28, $rd_hi, x4, x12, 0x0000000000000000, $correctval_hi, 0x00002000fffffff9, 0xfbffffff3fffffff, x5, 208, x19)

inst_14:
// rs1==x11, rs2==x3, rd==x16, rs2_w1_val == -33554433, rs1_w1_val == -1, rs2_w0_val == 268435456
// opcode: smar64 ; op1:x11; op2:x3; dest:x16; op1val:0xffffffff00000001;  op2val:0xfdffffff10000000
TEST_P64_PNN_OP(smar64, x16, $rd_hi, x11, x3, 0x0000000000000000, $correctval_hi, 0xffffffff00000001, 0xfdffffff10000000, x5, 224, x19)

inst_15:
// rs1==x24, rs2==x13, rs2_w1_val == -16777217, rs2_w0_val == 33554432, rs1_w0_val == -513, rs1_w1_val == -3
// opcode: smar64 ; op1:x24; op2:x13; dest:x10; op1val:0xfffffffdfffffdff;  op2val:0xfeffffff02000000
TEST_P64_PNN_OP(smar64, x10, $rd_hi, x24, x13, 0x0000000000000000, $correctval_hi, 0xfffffffdfffffdff, 0xfeffffff02000000, x5, 240, x19)

inst_16:
// rs1==x26, rs2==x29, rs2_w1_val == -8388609, rs1_w1_val == -1025, rs1_w0_val == -1073741825, rs2_w0_val == 1073741824
// opcode: smar64 ; op1:x26; op2:x29; dest:x3; op1val:0xfffffbffbfffffff;  op2val:0xff7fffff40000000
TEST_P64_PNN_OP(smar64, x3, $rd_hi, x26, x29, 0x0000000000000000, $correctval_hi, 0xfffffbffbfffffff, 0xff7fffff40000000, x5, 256, x18)

inst_17:
// rs1==x2, rs2==x26, rs2_w1_val == -4194305, rs2_w0_val == -4097
// opcode: smar64 ; op1:x2; op2:x26; dest:x27; op1val:0x00000009ffffdfff;  op2val:0xffbfffffffffefff
TEST_P64_PNN_OP(smar64, x27, $rd_hi, x2, x26, 0x0000000000000000, $correctval_hi, 0x00000009ffffdfff, 0xffbfffffffffefff, x5, 272, x18)
RVTEST_SIGBASE(x22,signature_x22_0)

inst_18:
// rs1==x12, rs2==x5, rs2_w1_val == -2097153, rs1_w1_val == 32
// opcode: smar64 ; op1:x12; op2:x5; dest:x21; op1val:0x00000020bfffffff;  op2val:0xffdffffffffffffa
TEST_P64_PNN_OP(smar64, x21, $rd_hi, x12, x5, 0x0000000000000000, $correctval_hi, 0x00000020bfffffff, 0xffdffffffffffffa, x22, 0, x18)

inst_19:
// rs1==x1, rs2==x27, rs2_w1_val == -1048577, rs1_w1_val == 1073741824, rs1_w0_val == -2, rs2_w0_val == -16385
// opcode: smar64 ; op1:x1; op2:x27; dest:x20; op1val:0x40000000fffffffe;  op2val:0xffefffffffffbfff
TEST_P64_PNN_OP(smar64, x20, $rd_hi, x1, x27, 0x0000000000000000, $correctval_hi, 0x40000000fffffffe, 0xffefffffffffbfff, x22, 16, x18)

inst_20:
// rs1==x8, rs2==x19, rs2_w1_val == -524289, rs1_w0_val == 134217728, rs1_w1_val == -2147483648
// opcode: smar64 ; op1:x8; op2:x19; dest:x4; op1val:0x8000000008000000;  op2val:0xfff7ffff00000006
TEST_P64_PNN_OP(smar64, x4, $rd_hi, x8, x19, 0x0000000000000000, $correctval_hi, 0x8000000008000000, 0xfff7ffff00000006, x22, 32, x18)

inst_21:
// rs1==x25, rs2==x30, rs2_w1_val == -131073, rs2_w0_val == -2147483648, rs1_w0_val == -4194305, rs1_w1_val == -131073
// opcode: smar64 ; op1:x25; op2:x30; dest:x5; op1val:0xfffdffffffbfffff;  op2val:0xfffdffff80000000
TEST_P64_PNN_OP(smar64, x5, $rd_hi, x25, x30, 0x0000000000000000, $correctval_hi, 0xfffdffffffbfffff, 0xfffdffff80000000, x22, 48, x18)

inst_22:
// rs1==x15, rs2==x4, rs2_w1_val == -65537, rs1_w1_val == 131072, rs1_w0_val == -134217729
// opcode: smar64 ; op1:x15; op2:x4; dest:x20; op1val:0x00020000f7ffffff;  op2val:0xfffeffff02000000
TEST_P64_PNN_OP(smar64, x20, $rd_hi, x15, x4, 0x0000000000000000, $correctval_hi, 0x00020000f7ffffff, 0xfffeffff02000000, x22, 64, x18)

inst_23:
// rs1==x6, rs2==x9, rs2_w1_val == -32769, rs1_w1_val == -1073741825, rs2_w0_val == -3
// opcode: smar64 ; op1:x6; op2:x9; dest:x10; op1val:0xbfffffffdfffffff;  op2val:0xffff7ffffffffffd
TEST_P64_PNN_OP(smar64, x10, $rd_hi, x6, x9, 0x0000000000000000, $correctval_hi, 0xbfffffffdfffffff, 0xffff7ffffffffffd, x22, 80, x18)

inst_24:
// rs1==x17, rs2==x25, rs2_w1_val == -16385, rs1_w1_val == 536870912
// opcode: smar64 ; op1:x17; op2:x25; dest:x28; op1val:0x20000000efffffff;  op2val:0xffffbfffefffffff
TEST_P64_PNN_OP(smar64, x28, $rd_hi, x17, x25, 0x0000000000000000, $correctval_hi, 0x20000000efffffff, 0xffffbfffefffffff, x22, 96, x18)

inst_25:
// rs1==x16, rs2==x21, rs2_w1_val == -8193, rs2_w0_val == -67108865, rs1_w1_val == -1048577
// opcode: smar64 ; op1:x16; op2:x21; dest:x3; op1val:0xffefffff00000007;  op2val:0xffffdffffbffffff
TEST_P64_PNN_OP(smar64, x3, $rd_hi, x16, x21, 0x0000000000000000, $correctval_hi, 0xffefffff00000007, 0xffffdffffbffffff, x22, 112, x18)

inst_26:
// rs1==x3, rs2==x11, rs2_w1_val == -4097, rs1_w0_val == 8192
// opcode: smar64 ; op1:x3; op2:x11; dest:x4; op1val:0x4000000000002000;  op2val:0xffffefff00002000
TEST_P64_PNN_OP(smar64, x4, $rd_hi, x3, x11, 0x0000000000000000, $correctval_hi, 0x4000000000002000, 0xffffefff00002000, x22, 128, x18)

inst_27:
// rs1==x27, rs2==x2, rs2_w1_val == -2049, rs1_w1_val == -17, rs2_w0_val == 16
// opcode: smar64 ; op1:x27; op2:x2; dest:x14; op1val:0xffffffeffffffdff;  op2val:0xfffff7ff00000010
TEST_P64_PNN_OP(smar64, x14, $rd_hi, x27, x2, 0x0000000000000000, $correctval_hi, 0xffffffeffffffdff, 0xfffff7ff00000010, x22, 144, x18)

inst_28:
// rs1==x13, rs2==x10, rs2_w1_val == -1025, rs1_w0_val == 8388608, rs1_w1_val == 256
// opcode: smar64 ; op1:x13; op2:x10; dest:x7; op1val:0x0000010000800000;  op2val:0xfffffbffffffefff
TEST_P64_PNN_OP(smar64, x7, $rd_hi, x13, x10, 0x0000000000000000, $correctval_hi, 0x0000010000800000, 0xfffffbffffffefff, x22, 160, x18)

inst_29:
// rs1==x31, rs2==x20, rs2_w1_val == -513, rs1_w1_val == -2097153, rs1_w0_val == 64
// opcode: smar64 ; op1:x31; op2:x20; dest:x3; op1val:0xffdfffff00000040;  op2val:0xfffffdff00000005
TEST_P64_PNN_OP(smar64, x3, $rd_hi, x31, x20, 0x0000000000000000, $correctval_hi, 0xffdfffff00000040, 0xfffffdff00000005, x22, 176, x2)

inst_30:
// rs1==x19, rs2==x31, rs2_w1_val == -257, rs1_w1_val == 4
// opcode: smar64 ; op1:x19; op2:x31; dest:x11; op1val:0x00000004fdffffff;  op2val:0xfffffeffefffffff
TEST_P64_PNN_OP(smar64, x11, $rd_hi, x19, x31, 0x0000000000000000, $correctval_hi, 0x00000004fdffffff, 0xfffffeffefffffff, x22, 192, x2)

inst_31:
// rs1==x5, rs2==x16, rs2_w1_val == -129, rs2_w0_val == 4
// opcode: smar64 ; op1:x5; op2:x16; dest:x18; op1val:0x00000100efffffff;  op2val:0xffffff7f00000004
TEST_P64_PNN_OP(smar64, x18, $rd_hi, x5, x16, 0x0000000000000000, $correctval_hi, 0x00000100efffffff, 0xffffff7f00000004, x22, 208, x2)

inst_32:
// rs2_w1_val == -65, rs1_w0_val == 2, rs2_w0_val == 8
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000002;  op2val:0xffffffbf00000008
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7fff00000002, 0xffffffbf00000008, x22, 224, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs2_w1_val == -33, rs1_w1_val == -524289, rs1_w0_val == 32, rs2_w0_val == -8193
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000020;  op2val:0xffffffdfffffdfff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7ffff00000020, 0xffffffdfffffdfff, x1, 0, x2)

inst_34:
// rs2_w1_val == -17, rs2_w0_val == -2, rs1_w1_val == 134217728, rs1_w0_val == 1024
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0800000000000400;  op2val:0xffffffeffffffffe
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800000000000400, 0xffffffeffffffffe, x1, 16, x2)

inst_35:
// rs2_w1_val == -9, rs1_w0_val == -16385, rs2_w0_val == 134217728
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffbfff;  op2val:0xfffffff708000000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffeffffffffbfff, 0xfffffff708000000, x1, 32, x2)

inst_36:
// rs2_w1_val == -5, rs1_w0_val == -67108865, rs2_w0_val == 4194304
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000fbffffff;  op2val:0xfffffffb00400000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00040000fbffffff, 0xfffffffb00400000, x1, 48, x2)

inst_37:
// rs2_w1_val == -3, rs1_w0_val == -1, rs2_w0_val == -8388609
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffffff;  op2val:0xfffffffdff7fffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7ffffffffffff, 0xfffffffdff7fffff, x1, 64, x2)

inst_38:
// rs2_w1_val == -2, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc80000000;  op2val:0xfffffffe00000003
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffc80000000, 0xfffffffe00000003, x1, 80, x2)

inst_39:
// rs2_w1_val == -2147483648, rs1_w0_val == 1431655765
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000255555555;  op2val:0x8000000000000004
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000255555555, 0x8000000000000004, x1, 96, x2)

inst_40:
// rs2_w1_val == 1073741824, rs1_w1_val == -9, rs2_w0_val == 536870912, rs1_w0_val == -17
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffffffef;  op2val:0x4000000020000000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff7ffffffef, 0x4000000020000000, x1, 112, x2)

inst_41:
// rs2_w1_val == 536870912, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000001;  op2val:0x20000000c0000000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffbff00000001, 0x20000000c0000000, x1, 128, x2)

inst_42:
// rs2_w1_val == 268435456, rs2_w0_val == 0, rs1_w1_val == 16777216
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0100000080000000;  op2val:0x1000000000000000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0100000080000000, 0x1000000000000000, x1, 144, x2)

inst_43:
// rs2_w1_val == 134217728, rs1_w1_val == -8193
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffffffff9;  op2val:0x08000000dfffffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffdffffffffff9, 0x08000000dfffffff, x1, 160, x2)

inst_44:
// rs2_w1_val == 67108864, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc3fffffff;  op2val:0x0400000055555555
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffc3fffffff, 0x0400000055555555, x1, 176, x2)

inst_45:
// rs2_w1_val == 33554432, rs1_w1_val == 524288
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000fffffdff;  op2val:0x020000003fffffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00080000fffffdff, 0x020000003fffffff, x1, 192, x2)

inst_46:
// rs2_w1_val == 8388608, rs2_w0_val == 262144, rs1_w0_val == 128, rs1_w1_val == -262145
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000080;  op2val:0x0080000000040000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffbffff00000080, 0x0080000000040000, x1, 208, x2)

inst_47:
// rs2_w1_val == 4194304, rs2_w0_val == -257, rs1_w1_val == -67108865, rs1_w0_val == 67108864
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff04000000;  op2val:0x00400000fffffeff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffffff04000000, 0x00400000fffffeff, x1, 224, x2)

inst_48:
// rs2_w1_val == 2097152, rs1_w0_val == -131073, rs1_w1_val == 32768, rs2_w0_val == -2049
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000fffdffff;  op2val:0x00200000fffff7ff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00008000fffdffff, 0x00200000fffff7ff, x1, 240, x2)

inst_49:
// rs2_w1_val == 1048576, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000004fffffff9;  op2val:0x00100000fffffffd
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000004fffffff9, 0x00100000fffffffd, x1, 256, x2)

inst_50:
// rs2_w1_val == 524288, rs1_w0_val == -4097
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffefff;  op2val:0x00080000ffffdfff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ffffffffffefff, 0x00080000ffffdfff, x1, 272, x2)

inst_51:
// rs2_w1_val == 262144, rs2_w0_val == -524289
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600004000;  op2val:0x00040000fff7ffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff600004000, 0x00040000fff7ffff, x1, 288, x2)

inst_52:
// rs1_w0_val == 33554432, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000302000000;  op2val:0xfffffff700000000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000302000000, 0xfffffff700000000, x1, 304, x2)

inst_53:
// rs1_w0_val == 16777216, rs2_w0_val == 4096
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000001000000;  op2val:0xfffffffb00001000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000000001000000, 0xfffffffb00001000, x1, 320, x2)

inst_54:
// rs1_w0_val == 4194304, rs2_w0_val == -134217729
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000400000;  op2val:0x01000000f7ffffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000000000400000, 0x01000000f7ffffff, x1, 336, x2)

inst_55:
// rs1_w0_val == 2097152, rs2_w0_val == -5
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00200000;  op2val:0xfffffff8fffffffb
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7fff00200000, 0xfffffff8fffffffb, x1, 352, x2)

inst_56:
// rs1_w0_val == 1048576, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00100000;  op2val:0xffffffeffffffffa
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbfffffff00100000, 0xffffffeffffffffa, x1, 368, x2)

inst_57:
// rs1_w0_val == 524288, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000080000;  op2val:0xefffffff3fffffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000000000080000, 0xefffffff3fffffff, x1, 384, x2)

inst_58:
// rs1_w0_val == 262144, rs1_w1_val == 16384, rs2_w0_val == 32
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000400000040000;  op2val:0xfff7ffff00000020
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000400000040000, 0xfff7ffff00000020, x1, 400, x2)

inst_59:
// rs1_w0_val == 131072, rs2_w0_val == -33, rs2_w1_val == 32768
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000020000;  op2val:0x00008000ffffffdf
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x4000000000020000, 0x00008000ffffffdf, x1, 416, x2)

inst_60:
// rs1_w0_val == 65536, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00010000;  op2val:0xfffeffff00001000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3fffffff00010000, 0xfffeffff00001000, x1, 432, x2)

inst_61:
// rs1_w0_val == 32768, rs1_w1_val == -513
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00008000;  op2val:0x00800000fffffffa
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffdff00008000, 0x00800000fffffffa, x1, 448, x2)

inst_62:
// rs1_w0_val == 4096, rs1_w1_val == 64
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000004000001000;  op2val:0xffffbfff80000000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000004000001000, 0xffffbfff80000000, x1, 464, x2)

inst_63:
// rs1_w0_val == 2048, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000800;  op2val:0xffffffef00000004
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffd00000800, 0xffffffef00000004, x1, 480, x2)

inst_64:
// rs1_w0_val == 256, rs2_w1_val == 65536
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0002000000000100;  op2val:0x00010000ffffefff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0002000000000100, 0x00010000ffffefff, x1, 496, x2)

inst_65:
// rs1_w0_val == 16, rs1_w1_val == 512
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000020000000010;  op2val:0x0400000000400000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000020000000010, 0x0400000000400000, x1, 512, x2)

inst_66:
// rs1_w0_val == 8, rs2_w0_val == -33554433
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000200000000008;  op2val:0x55555555fdffffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000200000000008, 0x55555555fdffffff, x1, 528, x2)

inst_67:
// rs1_w0_val == 4, rs2_w0_val == -1025
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000004;  op2val:0x01000000fffffbff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff700000004, 0x01000000fffffbff, x1, 544, x2)

inst_68:
// rs1_w0_val == 0, rs1_w1_val == -33554433
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000000;  op2val:0x00008000fdffffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdffffff00000000, 0x00008000fdffffff, x1, 560, x2)

inst_69:
// rs2_w1_val == 131072, rs2_w0_val == -131073, rs1_w1_val == -2049
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000004;  op2val:0x00020000fffdffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffff7ff00000004, 0x00020000fffdffff, x1, 576, x2)

inst_70:
// rs2_w1_val == 8192, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000006;  op2val:0x00002000aaaaaaaa
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdffffff00000006, 0x00002000aaaaaaaa, x1, 592, x2)

inst_71:
// rs2_w1_val == 4096, rs1_w1_val == 2097152, rs2_w0_val == 8388608
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0020000002000000;  op2val:0x0000100000800000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020000002000000, 0x0000100000800000, x1, 608, x2)

inst_72:
// rs2_w1_val == 1024, rs1_w1_val == 2048, rs2_w0_val == -1
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800efffffff;  op2val:0x00000400ffffffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000800efffffff, 0x00000400ffffffff, x1, 624, x2)

inst_73:
// rs2_w1_val == 512, rs1_w0_val == -5
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffffffb;  op2val:0x00000200ff7fffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xeffffffffffffffb, 0x00000200ff7fffff, x1, 640, x2)

inst_74:
// rs2_w1_val == 256, rs1_w1_val == -129
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffffffe;  op2val:0x00000100fffffffe
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffff7ffffffffe, 0x00000100fffffffe, x1, 656, x2)

inst_75:
// rs2_w1_val == 128, rs1_w0_val == -1048577
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffefffff;  op2val:0x0000008020000000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffdfffffefffff, 0x0000008020000000, x1, 672, x2)

inst_76:
// rs2_w1_val == 64, rs2_w0_val == -65
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000500200000;  op2val:0x00000040ffffffbf
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000500200000, 0x00000040ffffffbf, x1, 688, x2)

inst_77:
// rs2_w1_val == 32, rs1_w1_val == 65536
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0001000002000000;  op2val:0x0000002080000000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001000002000000, 0x0000002080000000, x1, 704, x2)

inst_78:
// rs2_w1_val == 16, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000002000200000;  op2val:0x00000010fff7ffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000002000200000, 0x00000010fff7ffff, x1, 720, x2)

inst_79:
// rs2_w1_val == 8, rs2_w0_val == -129
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200fffffffc;  op2val:0x00000008ffffff7f
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000200fffffffc, 0x00000008ffffff7f, x1, 736, x2)

inst_80:
// rs2_w1_val == 4, rs1_w1_val == -16385, rs2_w0_val == 2
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff3fffffff;  op2val:0x0000000400000002
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffbfff3fffffff, 0x0000000400000002, x1, 752, x2)

inst_81:
// rs2_w1_val == 2, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000007ffffbfff;  op2val:0x0000000200000020
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000007ffffbfff, 0x0000000200000020, x1, 768, x2)

inst_82:
// rs2_w1_val == 1, rs1_w1_val == 4194304
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000bfffffff;  op2val:0x0000000100000009
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00400000bfffffff, 0x0000000100000009, x1, 784, x2)

inst_83:
// rs2_w1_val == 0, rs1_w0_val == -33
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffffdf;  op2val:0x0000000002000000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffffffffffffdf, 0x0000000002000000, x1, 800, x2)

inst_84:
// rs2_w1_val == -1, rs1_w0_val == -1431655766, rs2_w0_val == 256
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffaaaaaaaa;  op2val:0xffffffff00000100
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3fffffffaaaaaaaa, 0xffffffff00000100, x1, 816, x2)

inst_85:
// rs2_w0_val == 131072, rs1_w0_val == 1073741824
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000040000000;  op2val:0x1000000000020000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000000040000000, 0x1000000000020000, x1, 832, x2)

inst_86:
// rs2_w0_val == 32768, rs1_w1_val == -257
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000002;  op2val:0x0008000000008000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffeff00000002, 0x0008000000008000, x1, 848, x2)

inst_87:
// rs2_w0_val == 16384, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffffffc;  op2val:0x0000000400004000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbffffffffffffffc, 0x0000000400004000, x1, 864, x2)

inst_88:
// rs2_w0_val == 2048, rs1_w0_val == 536870912
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff20000000;  op2val:0xfffffffe00000800
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffbfff20000000, 0xfffffffe00000800, x1, 880, x2)

inst_89:
// rs2_w0_val == 1024, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fffffff9;  op2val:0x4000000000000400
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x55555555fffffff9, 0x4000000000000400, x1, 896, x2)

inst_90:
// rs2_w0_val == 512, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff40000000;  op2val:0x0000000700000200
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffff40000000, 0x0000000700000200, x1, 912, x2)

inst_91:
// rs2_w0_val == 128, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0800000000010000;  op2val:0x3fffffff00000080
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800000000010000, 0x3fffffff00000080, x1, 928, x2)

inst_92:
// rs2_w0_val == 64, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffac0000000;  op2val:0x8000000000000040
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffac0000000, 0x8000000000000040, x1, 944, x2)

inst_93:
// rs2_w0_val == 1, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000800004000000;  op2val:0xfffffff800000001
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000800004000000, 0xfffffff800000001, x1, 960, x2)

inst_94:
// rs1_w1_val == -1431655766, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffffbff;  op2val:0x0000200000010000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaaaaaafffffbff, 0x0000200000010000, x1, 976, x2)

inst_95:
// rs1_w1_val == -536870913, rs1_w0_val == -262145
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffbffff;  op2val:0xfffffff801000000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdffffffffffbffff, 0xfffffff801000000, x1, 992, x2)

inst_96:
// rs1_w1_val == -16777217, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffffb;  op2val:0xfffffffb00000020
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfefffffffffffffb, 0xfffffffb00000020, x1, 1008, x2)

inst_97:
// rs1_w1_val == -8388609, rs2_w0_val == -32769
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000010;  op2val:0x00000020ffff7fff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7fffff00000010, 0x00000020ffff7fff, x1, 1024, x2)

inst_98:
// rs1_w1_val == -4194305, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffffbff;  op2val:0x0000400000000100
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbffffffffffbff, 0x0000400000000100, x1, 1040, x2)

inst_99:
// rs1_w1_val == -4097, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffbffff;  op2val:0x4000000000004000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffeffffffbffff, 0x4000000000004000, x1, 1056, x2)

inst_100:
// rs1_w1_val == -65, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00008000;  op2val:0x0000080000010000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffbf00008000, 0x0000080000010000, x1, 1072, x2)

inst_101:
// rs1_w1_val == -33, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00002000;  op2val:0x40000000fffffffc
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdf00002000, 0x40000000fffffffc, x1, 1088, x2)

inst_102:
// rs1_w1_val == -5, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000100;  op2val:0xfffeffffefffffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffb00000100, 0xfffeffffefffffff, x1, 1104, x2)

inst_103:
// rs1_w1_val == -2, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffffff9;  op2val:0x0000000755555555
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffefffffff9, 0x0000000755555555, x1, 1120, x2)

inst_104:
// rs1_w1_val == 268435456, rs1_w0_val == -3
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffffd;  op2val:0xfffeffffaaaaaaaa
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x10000000fffffffd, 0xfffeffffaaaaaaaa, x1, 1136, x2)

inst_105:
// rs1_w1_val == 67108864, rs2_w0_val == -513
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000ffffffff;  op2val:0x00040000fffffdff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x04000000ffffffff, 0x00040000fffffdff, x1, 1152, x2)

inst_106:
// rs1_w1_val == 33554432, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000fbffffff;  op2val:0xdffffffff7ffffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x02000000fbffffff, 0xdffffffff7ffffff, x1, 1168, x2)

inst_107:
// rs1_w1_val == 8388608, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000ffffffdf;  op2val:0xffffefff00000020
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00800000ffffffdf, 0xffffefff00000020, x1, 1184, x2)

inst_108:
// rs1_w1_val == 1048576, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000fffffffb;  op2val:0x00000080dfffffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00100000fffffffb, 0x00000080dfffffff, x1, 1200, x2)

inst_109:
// rs1_w1_val == 4096, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000bfffffff;  op2val:0x00001000fffffffc
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00001000bfffffff, 0x00001000fffffffc, x1, 1216, x2)

inst_110:
// rs1_w1_val == 128, rs2_w0_val == 67108864
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000008000000000;  op2val:0xfff7ffff04000000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000008000000000, 0xfff7ffff04000000, x1, 1232, x2)

inst_111:
// rs1_w1_val == 16, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000001080000000;  op2val:0x00000005fff7ffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000001080000000, 0x00000005fff7ffff, x1, 1248, x2)

inst_112:
// rs2_w0_val == 2147483647, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000040;  op2val:0xffffffef7fffffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeffffff00000040, 0xffffffef7fffffff, x1, 1264, x2)

inst_113:
// rs1_w1_val == 8, rs1_w0_val == -129
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000008ffffff7f;  op2val:0x0000008000000007
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000008ffffff7f, 0x0000008000000007, x1, 1280, x2)

inst_114:
// rs2_w0_val == -1073741825, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900000008;  op2val:0xfffffff8bfffffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff900000008, 0xfffffff8bfffffff, x1, 1296, x2)

inst_115:
// rs1_w1_val == 1, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000001dfffffff;  op2val:0x0000000000001000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000001dfffffff, 0x0000000000001000, x1, 1312, x2)

inst_116:
// rs1_w1_val == 0, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000ffffffdf;  op2val:0x0000000500000002
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000000ffffffdf, 0x0000000500000002, x1, 1328, x2)

inst_117:
// rs2_w0_val == -16777217, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000800;  op2val:0x00000080feffffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfffffff00000800, 0x00000080feffffff, x1, 1344, x2)

inst_118:
// rs1_w0_val == 2147483647, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x000000027fffffff;  op2val:0x0000040080000000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000000027fffffff, 0x0000040080000000, x1, 1360, x2)

inst_119:
// rs2_w0_val == -4194305, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400fffffffa;  op2val:0xfffbffffffbfffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000400fffffffa, 0xfffbffffffbfffff, x1, 1376, x2)

inst_120:
// rs2_w0_val == -2097153, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000200004000;  op2val:0x00000005ffdfffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000200004000, 0x00000005ffdfffff, x1, 1392, x2)

inst_121:
// rs2_w0_val == -65537, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff80000000;  op2val:0x55555555fffeffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7fffff80000000, 0x55555555fffeffff, x1, 1408, x2)

inst_122:
// rs1_w0_val == -8388609, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffff7fffff;  op2val:0xffffff7f00000001
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffffffff7fffff, 0xffffff7f00000001, x1, 1424, x2)

inst_123:
// rs1_w0_val == -2097153, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffdfffff;  op2val:0x00400000fff7ffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffefffdfffff, 0x00400000fff7ffff, x1, 1440, x2)

inst_124:
// rs1_w0_val == -524289, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfff7ffff;  op2val:0xfffbffff00000001
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffdfff7ffff, 0xfffbffff00000001, x1, 1456, x2)

inst_125:
// rs1_w0_val == -65537, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000fffeffff;  op2val:0xefffffff00000400
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00010000fffeffff, 0xefffffff00000400, x1, 1472, x2)

inst_126:
// rs1_w0_val == -32769, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000009ffff7fff;  op2val:0x0000200000000010
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000009ffff7fff, 0x0000200000000010, x1, 1488, x2)

inst_127:
// rs2_w0_val == -17, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9ffefffff;  op2val:0xefffffffffffffef
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff9ffefffff, 0xefffffffffffffef, x1, 1504, x2)

inst_128:
// rs2_w0_val == -9, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500004000;  op2val:0x00000020fffffff7
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x5555555500004000, 0x00000020fffffff7, x1, 1520, x2)

inst_129:
// rs1_w0_val == -2049, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffff7ff;  op2val:0x00000001f7ffffff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7ffffffff7ff, 0x00000001f7ffffff, x1, 1536, x2)

inst_130:
// rs1_w0_val == -257, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffffeff;  op2val:0x0000000600000001
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbfffffffffffeff, 0x0000000600000001, x1, 1552, x2)

inst_131:
// rs1_w0_val == -65, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000ffffffbf;  op2val:0xdffffffffffffffc
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x10000000ffffffbf, 0xdffffffffffffffc, x1, 1568, x2)

inst_132:
// rs2_w0_val == 2097152, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9fffffbff;  op2val:0x0000000600200000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff9fffffbff, 0x0000000600200000, x1, 1584, x2)

inst_133:
// rs2_w0_val == 524288, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00000000;  op2val:0xfffffff900080000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffc00000000, 0xfffffff900080000, x1, 1600, x2)

inst_134:
// rs1_w0_val == 268435456, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef10000000;  op2val:0xffffffeffffff7ff
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffef10000000, 0xffffffeffffff7ff, x1, 1616, x2)

inst_135:
// rs2_w0_val == 1048576, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc80000000;  op2val:0x0800000000100000
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffc80000000, 0x0800000000100000, x1, 1632, x2)

inst_136:
// rs1_w0_val == -9, 
// opcode: smar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000fffffff7;  op2val:0x0000040000000400
TEST_P64_PNN_OP(smar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000000fffffff7, 0x0000040000000400, x1, 1648, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x22_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 208*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
