
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the scmplt16 instruction of the RISC-V RV64PZicsr extension for the scmplt16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",scmplt16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 == rd != rs2, rs1==x8, rs2==x17, rd==x8, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val == 256, rs2_h3_val == -129, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val == 512, rs1_h2_val != rs2_h2_val, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs2_h1_val == -32768, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -1025, rs2_h0_val == 256, rs2_h2_val == 21845
// opcode: scmplt16 ; op1:x8; op2:x17; dest:x8; op1val:0x1000200fbff8000;  op2val:0xff7f555580000100
TEST_RR_OP(scmplt16, x8, x8, x17, 0x0000000000000000, 0x1000200fbff8000, 0xff7f555580000100, x5, 0, x19)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x30, rs2==x0, rd==x27, rs1_h3_val == rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h1_val == -2049, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val == 256, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h2_val == 1024, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: scmplt16 ; op1:x30; op2:x0; dest:x27; op1val:0xfff9fff901000001;  op2val:0xfff90400f7ffc000
TEST_RR_OP(scmplt16, x27, x30, x0, 0x0000000000000000, 0xfff9fff901000001, 0xfff90400f7ffc000, x5, 8, x19)

inst_2:
// rs1 == rs2 != rd, rs1==x21, rs2==x21, rd==x25, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == 64, rs1_h1_val == 1, rs2_h0_val == -257, rs1_h0_val < 0 and rs2_h0_val < 0
// opcode: scmplt16 ; op1:x21; op2:x21; dest:x25; op1val:0xfffc3fff0001fff6;  op2val:0x030040fffcfeff
TEST_RR_OP(scmplt16, x25, x21, x21, 0x0000000000000000, 0xfffc3fff0001fff6, 0x030040fffcfeff, x5, 16, x19)

inst_3:
// rs1 == rs2 == rd, rs1==x2, rs2==x2, rd==x2, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 8, rs1_h2_val == 64, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h3_val == 128, rs1_h0_val == -1, rs2_h1_val == 512, rs2_h0_val == 4096
// opcode: scmplt16 ; op1:x2; op2:x2; dest:x2; op1val:0x080040fffcffff;  op2val:0x80c00002001000
TEST_RR_OP(scmplt16, x2, x2, x2, 0x0000000000000000, 0x080040fffcffff, 0x80c00002001000, x5, 24, x19)

inst_4:
// rs2 == rd != rs1, rs1==x27, rs2==x7, rd==x7, rs1_h2_val == rs2_h2_val, rs1_h2_val == 8, rs1_h1_val == -129, rs2_h1_val == 2048, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h2_val == 8
// opcode: scmplt16 ; op1:x27; op2:x7; dest:x7; op1val:0x1000008ff7f0007;  op2val:0xfffa000808000005
TEST_RR_OP(scmplt16, x7, x27, x7, 0x0000000000000000, 0x1000008ff7f0007, 0xfffa000808000005, x5, 32, x19)

inst_5:
// rs1==x17, rs2==x6, rd==x12, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == 32, rs2_h1_val == -8193, rs2_h2_val == -513, rs1_h3_val == 32767, rs1_h2_val == -1, rs1_h0_val == 2, rs2_h3_val == -8193
// opcode: scmplt16 ; op1:x17; op2:x6; dest:x12; op1val:0x7fffffff01000002;  op2val:0xdffffdffdfff0020
TEST_RR_OP(scmplt16, x12, x17, x6, 0x0000000000000000, 0x7fffffff01000002, 0xdffffdffdfff0020, x5, 40, x19)

inst_6:
// rs1==x9, rs2==x31, rd==x1, rs1_h1_val == rs2_h1_val, rs2_h3_val == -65, rs1_h0_val == 4096, rs1_h1_val == 32, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h2_val == 32, rs1_h2_val == -17, rs2_h0_val == 1024, rs2_h1_val == 32
// opcode: scmplt16 ; op1:x9; op2:x31; dest:x1; op1val:0x100ffef00201000;  op2val:0xffbf002000200400
TEST_RR_OP(scmplt16, x1, x9, x31, 0x0000000000000000, 0x100ffef00201000, 0xffbf002000200400, x5, 48, x19)

inst_7:
// rs1==x16, rs2==x14, rd==x0, rs1_h0_val == rs2_h0_val, rs2_h0_val == 2, rs2_h3_val == -9, rs1_h2_val == -8193, rs2_h1_val == 8192, rs1_h1_val == -513
// opcode: scmplt16 ; op1:x16; op2:x14; dest:x0; op1val:0x09dffffdff0002;  op2val:0xfff7fffc20000002
TEST_RR_OP(scmplt16, x0, x16, x14, 0x0000000000000000, 0x09dffffdff0002, 0xfff7fffc20000002, x5, 56, x19)

inst_8:
// rs1==x26, rs2==x8, rd==x21, rs2_h3_val == -21846, rs1_h1_val == -2, rs2_h1_val == -1, rs2_h0_val == -21846, rs1_h3_val == 21845, rs2_h2_val == 2048
// opcode: scmplt16 ; op1:x26; op2:x8; dest:x21; op1val:0x5555fffcfffefffc;  op2val:0xaaaa0800ffffaaaa
TEST_RR_OP(scmplt16, x21, x26, x8, 0x0000000000000000, 0x5555fffcfffefffc, 0xaaaa0800ffffaaaa, x5, 64, x19)

inst_9:
// rs1==x20, rs2==x28, rd==x31, rs2_h3_val == 21845, rs2_h1_val == 21845, rs1_h3_val == -21846, rs1_h0_val == 32, rs1_h1_val == -1, rs2_h2_val == 512, rs1_h2_val == -2
// opcode: scmplt16 ; op1:x20; op2:x28; dest:x31; op1val:0xaaaafffeffff0020;  op2val:0x555502005555aaaa
TEST_RR_OP(scmplt16, x31, x20, x28, 0x0000000000000000, 0xaaaafffeffff0020, 0x555502005555aaaa, x5, 72, x19)

inst_10:
// rs1==x4, rs2==x25, rd==x10, rs2_h3_val == 32767, rs1_h1_val == -257, rs2_h1_val == -513, rs2_h2_val == -17, rs1_h2_val == -2049
// opcode: scmplt16 ; op1:x4; op2:x25; dest:x10; op1val:0x05f7fffefffff8;  op2val:0x7fffffeffdfffff6
TEST_RR_OP(scmplt16, x10, x4, x25, 0x0000000000000000, 0x05f7fffefffff8, 0x7fffffeffdfffff6, x5, 80, x19)

inst_11:
// rs1==x13, rs2==x15, rd==x24, rs2_h3_val == -16385, rs2_h2_val == 16384, rs2_h0_val == -4097, rs1_h1_val == -8193
// opcode: scmplt16 ; op1:x13; op2:x15; dest:x24; op1val:0x070003dfff0009;  op2val:0xbfff40002000efff
TEST_RR_OP(scmplt16, x24, x13, x15, 0x0000000000000000, 0x070003dfff0009, 0xbfff40002000efff, x5, 88, x19)

inst_12:
// rs1==x1, rs2==x23, rd==x17, rs2_h3_val == -4097, rs2_h2_val == -257, rs1_h0_val == 2048, rs1_h3_val == -4097, rs2_h1_val == -3, rs1_h1_val == -2049
// opcode: scmplt16 ; op1:x1; op2:x23; dest:x17; op1val:0xefffc000f7ff0800;  op2val:0xeffffefffffdfffa
TEST_RR_OP(scmplt16, x17, x1, x23, 0x0000000000000000, 0xefffc000f7ff0800, 0xeffffefffffdfffa, x5, 96, x19)

inst_13:
// rs1==x18, rs2==x3, rd==x11, rs2_h3_val == -2049, rs2_h2_val == -4097, rs2_h1_val == -1025, rs1_h2_val == -9, rs1_h3_val == -2049, rs1_h0_val == 128, rs2_h0_val == 2048
// opcode: scmplt16 ; op1:x18; op2:x3; dest:x11; op1val:0xf7fffff7fdff0080;  op2val:0xf7ffeffffbff0800
TEST_RR_OP(scmplt16, x11, x18, x3, 0x0000000000000000, 0xf7fffff7fdff0080, 0xf7ffeffffbff0800, x5, 104, x19)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_14:
// rs1==x5, rs2==x19, rd==x15, rs2_h3_val == -1025, rs2_h0_val == 16, rs1_h2_val == 2048, rs1_h0_val == 64
// opcode: scmplt16 ; op1:x5; op2:x19; dest:x15; op1val:0xfff8080001000040;  op2val:0xfbff0040fffc0010
TEST_RR_OP(scmplt16, x15, x5, x19, 0x0000000000000000, 0xfff8080001000040, 0xfbff0040fffc0010, x2, 0, x1)

inst_15:
// rs1==x23, rs2==x9, rd==x13, rs2_h3_val == -513, rs1_h3_val == 512, rs2_h2_val == -21846, rs1_h0_val == 16
// opcode: scmplt16 ; op1:x23; op2:x9; dest:x13; op1val:0x200fff7fff60010;  op2val:0xfdffaaaa00060009
TEST_RR_OP(scmplt16, x13, x23, x9, 0x0000000000000000, 0x200fff7fff60010, 0xfdffaaaa00060009, x2, 8, x1)

inst_16:
// rs1==x7, rs2==x27, rd==x20, rs2_h3_val == -257, rs2_h2_val == -65, rs2_h1_val == 4096, rs1_h1_val == -9
// opcode: scmplt16 ; op1:x7; op2:x27; dest:x20; op1val:0xefff0007fff70007;  op2val:0xfeffffbf1000aaaa
TEST_RR_OP(scmplt16, x20, x7, x27, 0x0000000000000000, 0xefff0007fff70007, 0xfeffffbf1000aaaa, x2, 16, x1)

inst_17:
// rs1==x25, rs2==x26, rd==x18, rs2_h3_val == -33, rs1_h1_val == 8192, rs2_h0_val == 21845, rs1_h0_val == 1024, rs1_h3_val == -1, rs2_h1_val == -65, rs2_h2_val == 4096
// opcode: scmplt16 ; op1:x25; op2:x26; dest:x18; op1val:0xfffffff620000400;  op2val:0xffdf1000ffbf5555
TEST_RR_OP(scmplt16, x18, x25, x26, 0x0000000000000000, 0xfffffff620000400, 0xffdf1000ffbf5555, x2, 24, x1)

inst_18:
// rs1==x14, rs2==x5, rd==x6, rs2_h3_val == -17, rs1_h3_val == 1024, rs1_h2_val == 4096, rs2_h2_val == -129, rs2_h1_val == 16, rs1_h1_val == -17
// opcode: scmplt16 ; op1:x14; op2:x5; dest:x6; op1val:0x4001000ffef0002;  op2val:0xffefff7f00100010
TEST_RR_OP(scmplt16, x6, x14, x5, 0x0000000000000000, 0x4001000ffef0002, 0xffefff7f00100010, x2, 32, x1)

inst_19:
// rs1==x29, rs2==x11, rd==x23, rs2_h3_val == -5, rs1_h0_val == -33, rs1_h1_val == 4096, rs2_h2_val == -9, rs1_h3_val == -16385, rs1_h2_val == -21846, rs2_h1_val == 64
// opcode: scmplt16 ; op1:x29; op2:x11; dest:x23; op1val:0xbfffaaaa1000ffdf;  op2val:0xfffbfff700400100
TEST_RR_OP(scmplt16, x23, x29, x11, 0x0000000000000000, 0xbfffaaaa1000ffdf, 0xfffbfff700400100, x2, 40, x1)

inst_20:
// rs1==x10, rs2==x16, rd==x30, rs2_h3_val == -3, rs1_h0_val == -21846, rs2_h1_val == -4097, rs2_h0_val == 0
// opcode: scmplt16 ; op1:x10; op2:x16; dest:x30; op1val:0x06fffa2000aaaa;  op2val:0xfffd0400efff0000
TEST_RR_OP(scmplt16, x30, x10, x16, 0x0000000000000000, 0x06fffa2000aaaa, 0xfffd0400efff0000, x2, 48, x1)

inst_21:
// rs1==x24, rs2==x22, rd==x28, rs2_h3_val == -2, rs1_h0_val == -3, rs1_h3_val == 16, rs1_h1_val == 8, rs2_h0_val == -65, rs2_h2_val == 0
// opcode: scmplt16 ; op1:x24; op2:x22; dest:x28; op1val:0x10f7ff0008fffd;  op2val:0xfffe00000005ffbf
TEST_RR_OP(scmplt16, x28, x24, x22, 0x0000000000000000, 0x10f7ff0008fffd, 0xfffe00000005ffbf, x2, 56, x1)

inst_22:
// rs1==x12, rs2==x20, rd==x26, rs2_h3_val == -32768, rs1_h0_val == 8192, rs1_h3_val == -129, rs2_h1_val == 16384, rs2_h0_val == -513
// opcode: scmplt16 ; op1:x12; op2:x20; dest:x26; op1val:0xff7f0006f7ff2000;  op2val:0x800008004000fdff
TEST_RR_OP(scmplt16, x26, x12, x20, 0x0000000000000000, 0xff7f0006f7ff2000, 0x800008004000fdff, x2, 64, x1)

inst_23:
// rs1==x28, rs2==x18, rd==x3, rs2_h3_val == 16384, rs2_h1_val == 1, rs1_h3_val == -9
// opcode: scmplt16 ; op1:x28; op2:x18; dest:x3; op1val:0xfff70040ffefaaaa;  op2val:0x400008000001fff9
TEST_RR_OP(scmplt16, x3, x28, x18, 0x0000000000000000, 0xfff70040ffefaaaa, 0x400008000001fff9, x2, 72, x1)

inst_24:
// rs1==x19, rs2==x29, rd==x5, rs2_h3_val == 8192, rs2_h2_val == -8193, rs1_h3_val == 64, rs1_h2_val == -513, rs2_h0_val == -32768, rs1_h0_val == -513
// opcode: scmplt16 ; op1:x19; op2:x29; dest:x5; op1val:0x40fdfffffffdff;  op2val:0x2000dfff55558000
TEST_RR_OP(scmplt16, x5, x19, x29, 0x0000000000000000, 0x40fdfffffffdff, 0x2000dfff55558000, x2, 80, x1)

inst_25:
// rs1==x31, rs2==x13, rd==x14, rs2_h3_val == 4096, rs2_h2_val == 16
// opcode: scmplt16 ; op1:x31; op2:x13; dest:x14; op1val:0x7ffffff8feff0001;  op2val:0x100000100001c000
TEST_RR_OP(scmplt16, x14, x31, x13, 0x0000000000000000, 0x7ffffff8feff0001, 0x100000100001c000, x2, 88, x1)

inst_26:
// rs1==x3, rs2==x24, rd==x19, rs2_h3_val == 2048, rs1_h2_val == -16385, rs2_h0_val == -1025, rs1_h3_val == 8192
// opcode: scmplt16 ; op1:x3; op2:x24; dest:x19; op1val:0x2000bfff00050007;  op2val:0x800feff0006fbff
TEST_RR_OP(scmplt16, x19, x3, x24, 0x0000000000000000, 0x2000bfff00050007, 0x800feff0006fbff, x2, 96, x1)

inst_27:
// rs1==x22, rs2==x30, rd==x4, rs2_h3_val == 1024, rs1_h2_val == 16384, rs1_h0_val == 256, rs1_h1_val == 16384, rs1_h3_val == -8193
// opcode: scmplt16 ; op1:x22; op2:x30; dest:x4; op1val:0xdfff400040000100;  op2val:0x400fffc3fff1000
TEST_RR_OP(scmplt16, x4, x22, x30, 0x0000000000000000, 0xdfff400040000100, 0x400fffc3fff1000, x2, 104, x1)

inst_28:
// rs1==x6, rs2==x12, rd==x29, rs2_h3_val == 512, rs1_h2_val == -3
// opcode: scmplt16 ; op1:x6; op2:x12; dest:x29; op1val:0x2000fffd00032000;  op2val:0x20010008000fff6
TEST_RR_OP(scmplt16, x29, x6, x12, 0x0000000000000000, 0x2000fffd00032000, 0x20010008000fff6, x2, 112, x3)

inst_29:
// rs1==x15, rs2==x1, rd==x16, rs2_h3_val == 256, rs1_h2_val == 8192, rs1_h3_val == 32, rs2_h2_val == -3, rs2_h0_val == -3, rs1_h1_val == -65
// opcode: scmplt16 ; op1:x15; op2:x1; dest:x16; op1val:0x202000ffbffffa;  op2val:0x100fffdfff9fffd
TEST_RR_OP(scmplt16, x16, x15, x1, 0x0000000000000000, 0x202000ffbffffa, 0x100fffdfff9fffd, x2, 120, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x0, rs2==x4, rd==x22, rs2_h3_val == 64, rs1_h3_val == -513, rs1_h1_val == -4097
// opcode: scmplt16 ; op1:x0; op2:x4; dest:x22; op1val:0xfdff3fffeffffff6;  op2val:0x400009ffbfefff
TEST_RR_OP(scmplt16, x22, x0, x4, 0x0000000000000000, 0xfdff3fffeffffff6, 0x400009ffbfefff, x1, 0, x3)

inst_31:
// rs1==x11, rs2==x10, rd==x9, rs2_h3_val == 32, 
// opcode: scmplt16 ; op1:x11; op2:x10; dest:x9; op1val:0xfffafffcffff0040;  op2val:0x20000000078000
TEST_RR_OP(scmplt16, x9, x11, x10, 0x0000000000000000, 0xfffafffcffff0040, 0x20000000078000, x1, 8, x3)

inst_32:
// rs2_h3_val == 16, rs1_h3_val == -2
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffebfffdfff0005;  op2val:0x10555500100009
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfffebfffdfff0005, 0x10555500100009, x1, 16, x3)

inst_33:
// rs2_h3_val == 8, rs2_h1_val == -5
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0003fffa3fff;  op2val:0x08ffbffffbfbff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xffff0003fffa3fff, 0x08ffbffffbfbff, x1, 24, x3)

inst_34:
// rs1_h1_val == -5, rs2_h1_val == 4, rs1_h0_val == -4097
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffefffbefff;  op2val:0xfdfffff900040007
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x7ffffffefffbefff, 0xfdfffff900040007, x1, 32, x3)

inst_35:
// rs1_h1_val == -3, rs1_h0_val == -17, rs1_h3_val == 0
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x00c000fffdffef;  op2val:0x2000fff7fdff0002
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x00c000fffdffef, 0x2000fff7fdff0002, x1, 40, x3)

inst_36:
// rs1_h1_val == -32768, rs2_h3_val == 4, rs2_h1_val == 0, rs2_h2_val == 256
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x200aaaa8000c000;  op2val:0x0401000000fffd
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x200aaaa8000c000, 0x0401000000fffd, x1, 48, x3)

inst_37:
// rs1_h1_val == 2048, rs2_h2_val == -2, rs2_h0_val == 128
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fbfff08000020;  op2val:0x2000fffe00100080
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xff7fbfff08000020, 0x2000fffe00100080, x1, 56, x3)

inst_38:
// rs1_h1_val == 1024, rs1_h3_val == 4096, rs2_h2_val == 1
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000030400fdff;  op2val:0xfffb00010010fdff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x100000030400fdff, 0xfffb00010010fdff, x1, 64, x3)

inst_39:
// rs1_h1_val == 512, rs2_h0_val == 512
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa00080200fff6;  op2val:0xffef0020ffbf0200
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xaaaa00080200fff6, 0xffef0020ffbf0200, x1, 72, x3)

inst_40:
// rs1_h1_val == 128, rs1_h3_val == -1025, rs2_h0_val == 8192, rs1_h2_val == 32767
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff7fff0080ffff;  op2val:0xfffe040008002000
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfbff7fff0080ffff, 0xfffe040008002000, x1, 80, x3)

inst_41:
// rs1_h1_val == 64, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfff80040ffff;  op2val:0x400000400001ffbf
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfffcfff80040ffff, 0x400000400001ffbf, x1, 88, x3)

inst_42:
// rs1_h1_val == 16, rs2_h2_val == -1, rs2_h1_val == -16385, rs2_h0_val == 8, rs1_h0_val == 512
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x2003fff00100200;  op2val:0x80ffffbfff0008
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x2003fff00100200, 0x80ffffbfff0008, x1, 96, x3)

inst_43:
// rs1_h1_val == 4, rs2_h0_val == 64
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe400000041000;  op2val:0xdffffff780000040
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfffe400000041000, 0xdffffff780000040, x1, 104, x3)

inst_44:
// rs1_h1_val == 2, rs1_h0_val == -5, rs1_h2_val == 0
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa00000002fffb;  op2val:0x09fff63fff0006
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xaaaa00000002fffb, 0x09fff63fff0006, x1, 112, x3)

inst_45:
// rs1_h1_val == 0, rs2_h0_val == -8193, rs1_h2_val == -33
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffdf00000007;  op2val:0xfdff00088000dfff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfbffffdf00000007, 0xfdff00088000dfff, x1, 120, x3)

inst_46:
// rs1_h0_val == 21845, rs2_h1_val == 2
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f1000fff65555;  op2val:0x200555500020007
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xff7f1000fff65555, 0x200555500020007, x1, 128, x3)

inst_47:
// rs1_h0_val == 32767, rs2_h0_val == -2, rs2_h2_val == -32768
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffdffffeff7fff;  op2val:0xfffc80000040fffe
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xbfffdffffeff7fff, 0xfffc80000040fffe, x1, 136, x3)

inst_48:
// rs1_h0_val == -16385, rs1_h3_val == 2, rs2_h2_val == 4
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffff0010bfff;  op2val:0xfff700040006fff9
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x02ffff0010bfff, 0xfff700040006fff9, x1, 144, x3)

inst_49:
// rs1_h0_val == -8193, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffdf0010dfff;  op2val:0x09fffdfbffdfff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x1000ffdf0010dfff, 0x09fffdfbffdfff, x1, 152, x3)

inst_50:
// rs1_h0_val == -2049, rs2_h2_val == -2049
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffe0040f7ff;  op2val:0x05f7fffff80009
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x3ffffffe0040f7ff, 0x05f7fffff80009, x1, 160, x3)

inst_51:
// rs1_h0_val == -1025, rs1_h2_val == 4
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff90004ffbffbff;  op2val:0x3fff040000000003
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfff90004ffbffbff, 0x3fff040000000003, x1, 168, x3)

inst_52:
// rs1_h0_val == -257, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaffdf8000feff;  op2val:0x030008fffcaaaa
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xaaaaffdf8000feff, 0x030008fffcaaaa, x1, 176, x3)

inst_53:
// rs1_h0_val == -129, rs2_h1_val == -21846, rs2_h2_val == 32767
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff1000feffff7f;  op2val:0x40007fffaaaafdff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x3fff1000feffff7f, 0x40007fffaaaafdff, x1, 184, x3)

inst_54:
// rs1_h0_val == -65, rs2_h3_val == 2, rs1_h1_val == -21846
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff64000aaaaffbf;  op2val:0x020400bfffaaaa
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfff64000aaaaffbf, 0x020400bfffaaaa, x1, 192, x3)

inst_55:
// rs1_h0_val == -9, rs2_h2_val == -16385
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffff70007fff7;  op2val:0xfff7bffffffbdfff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfdfffff70007fff7, 0xfff7bffffffbdfff, x1, 200, x3)

inst_56:
// rs1_h0_val == -2, rs2_h0_val == -16385
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x555500060001fffe;  op2val:0x097fff1000bfff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x555500060001fffe, 0x097fff1000bfff, x1, 208, x3)

inst_57:
// rs1_h0_val == 16384, rs2_h1_val == 1024
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000080000004000;  op2val:0xfeff001004000010
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x2000080000004000, 0xfeff001004000010, x1, 216, x3)

inst_58:
// rs1_h0_val == 8, rs2_h0_val == -17, rs2_h1_val == 128
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x55553ffffff60008;  op2val:0x80000080080ffef
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x55553ffffff60008, 0x80000080080ffef, x1, 224, x3)

inst_59:
// rs2_h0_val == 32767, rs2_h2_val == 128
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fdff0100fffa;  op2val:0x80008000067fff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x02fdff0100fffa, 0x80008000067fff, x1, 232, x3)

inst_60:
// rs2_h0_val == -2049, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x200ffef0003ffff;  op2val:0x2000fffd0080f7ff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x200ffef0003ffff, 0x2000fffd0080f7ff, x1, 240, x3)

inst_61:
// rs2_h0_val == -129, rs2_h3_val == 0, rs1_h2_val == 1
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000001fff61000;  op2val:0x0002000007ff7f
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x4000001fff61000, 0x0002000007ff7f, x1, 248, x3)

inst_62:
// rs2_h0_val == -33, rs1_h3_val == -33
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf2000c0000001;  op2val:0xdffffffd0800ffdf
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xffdf2000c0000001, 0xdffffffd0800ffdf, x1, 256, x3)

inst_63:
// rs2_h0_val == -9, rs2_h2_val == -1025, rs1_h2_val == -129
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffff70100;  op2val:0x06fbff1000fff7
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xffffff7ffff70100, 0x06fbff1000fff7, x1, 264, x3)

inst_64:
// rs2_h0_val == -5, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x08ffef0002ffef;  op2val:0x8000fffc0800fffb
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x08ffef0002ffef, 0x8000fffc0800fffb, x1, 272, x3)

inst_65:
// rs2_h0_val == 16384, rs1_h1_val == 32767
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0700087fffaaaa;  op2val:0xefff000000004000
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x0700087fffaaaa, 0xefff000000004000, x1, 280, x3)

inst_66:
// rs2_h0_val == 4, rs2_h3_val == 1
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff000300010006;  op2val:0x017fffffbf0004
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x3fff000300010006, 0x017fffffbf0004, x1, 288, x3)

inst_67:
// rs2_h0_val == 1, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1001000fff80002;  op2val:0x040008fffd0001
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x1001000fff80002, 0x040008fffd0001, x1, 296, x3)

inst_68:
// rs2_h0_val == -1, rs1_h3_val == -32768, rs1_h2_val == -5
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffb00060009;  op2val:0xffef0000fffdffff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x8000fffb00060009, 0xffef0000fffdffff, x1, 304, x3)

inst_69:
// rs1_h3_val == -257, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0001fffa2000;  op2val:0x01002055550009
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfeff0001fffa2000, 0x01002055550009, x1, 312, x3)

inst_70:
// rs1_h0_val == 4, rs1_h3_val == 16384, rs1_h2_val == -32768
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000800000100004;  op2val:0x047fff80000002
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x4000800000100004, 0x047fff80000002, x1, 320, x3)

inst_71:
// rs1_h3_val == -65, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00030009ff7f;  op2val:0x8000fefffffd0002
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xffbf00030009ff7f, 0x8000fefffffd0002, x1, 328, x3)

inst_72:
// rs1_h0_val == 0, rs1_h1_val == 21845
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000100055550000;  op2val:0xbfff1000bfff5555
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x8000100055550000, 0xbfff1000bfff5555, x1, 336, x3)

inst_73:
// rs1_h3_val == -17, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0008fffafdff;  op2val:0x02fff7fff60800
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xffef0008fffafdff, 0x02fff7fff60800, x1, 344, x3)

inst_74:
// rs1_h3_val == -5, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffd00803fff;  op2val:0x05feff00038000
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfffbfffd00803fff, 0x05feff00038000, x1, 352, x3)

inst_75:
// rs1_h3_val == -3, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffc4000ffbf;  op2val:0x00f7fffffc0080
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfffdfffc4000ffbf, 0x00f7fffffc0080, x1, 360, x3)

inst_76:
// rs1_h3_val == 128, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80bffffff8aaaa;  op2val:0xfffdfffcaaaa4000
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x80bffffff8aaaa, 0xfffdfffcaaaa4000, x1, 368, x3)

inst_77:
// rs1_h3_val == 2048, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800000300080005;  op2val:0xfffd080055558000
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x800000300080005, 0xfffd080055558000, x1, 376, x3)

inst_78:
// rs1_h3_val == 4, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0400080080fffa;  op2val:0x40fdff0004ffdf
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x0400080080fffa, 0x40fdff0004ffdf, x1, 384, x3)

inst_79:
// rs2_h2_val == -33, rs2_h1_val == -33
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x034000fbff0002;  op2val:0x05ffdfffdf0003
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x034000fbff0002, 0x05ffdfffdf0003, x1, 392, x3)

inst_80:
// rs1_h3_val == 1, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x013ffff7fffffb;  op2val:0x060007fdff0007
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x013ffff7fffffb, 0x060007fdff0007, x1, 400, x3)

inst_81:
// rs2_h2_val == -5, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0005fdff0007;  op2val:0xfff9fffbfff8fffc
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x7fff0005fdff0007, 0xfff9fffbfff8fffc, x1, 408, x3)

inst_82:
// rs1_h2_val == 21845, rs2_h2_val == 8192, rs2_h1_val == 8
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8555555550000;  op2val:0xefff200000084000
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfff8555555550000, 0xefff200000084000, x1, 416, x3)

inst_83:
// rs1_h2_val == -4097, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffefff2000efff;  op2val:0xfffb000580000400
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x7fffefff2000efff, 0xfffb000580000400, x1, 424, x3)

inst_84:
// rs1_h2_val == -1025, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fbfffffe4000;  op2val:0x07fbffc000ffdf
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x04fbfffffe4000, 0x07fbffc000ffdf, x1, 432, x3)

inst_85:
// rs1_h2_val == -257, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffeffffffff7f;  op2val:0x06dfffbffffff7
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xeffffeffffffff7f, 0x06dfffbffffff7, x1, 440, x3)

inst_86:
// rs1_h2_val == -65, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffbff7ff0003;  op2val:0xfffe0009efff0080
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfffbffbff7ff0003, 0xfffe0009efff0080, x1, 448, x3)

inst_87:
// rs2_h2_val == 2, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10aaaa0008efff;  op2val:0xc00000020004fff9
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x10aaaa0008efff, 0xc00000020004fff9, x1, 456, x3)

inst_88:
// rs2_h1_val == 32767, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fdff40003fff;  op2val:0xdfffffbf7fff0004
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x01fdff40003fff, 0xdfffffbf7fff0004, x1, 464, x3)

inst_89:
// rs1_h2_val == 1024, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0400aaaaffff;  op2val:0x0400407fff0003
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xffef0400aaaaffff, 0x0400407fff0003, x1, 472, x3)

inst_90:
// rs1_h2_val == 256, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40010020000000;  op2val:0xfbfffdff00000100
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x40010020000000, 0xfbfffdff00000100, x1, 480, x3)

inst_91:
// rs1_h2_val == 128, rs2_h3_val == -1
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff80080feff0080;  op2val:0xffffbfff80002000
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfff80080feff0080, 0xffffbfff80002000, x1, 488, x3)

inst_92:
// rs1_h2_val == 32, rs1_h1_val == -16385
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0020bfff0000;  op2val:0xfff9ffdffdfffffc
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfffd0020bfff0000, 0xfff9ffdffdfffffc, x1, 496, x3)

inst_93:
// rs2_h1_val == -257, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff800010000100;  op2val:0xfff7fffffefffbff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xefff800010000100, 0xfff7fffffefffbff, x1, 504, x3)

inst_94:
// rs1_h2_val == 16, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x000010c000f7ff;  op2val:0xfff7fffc04002000
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x000010c000f7ff, 0xfff7fffc04002000, x1, 512, x3)

inst_95:
// rs2_h1_val == -2, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc3fffffefaaaa;  op2val:0xfffb0005fffe5555
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfffc3fffffefaaaa, 0xfffb0005fffe5555, x1, 520, x3)

inst_96:
// rs1_h2_val == 2, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9000200808000;  op2val:0x20008000800ffbf
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfff9000200808000, 0x20008000800ffbf, x1, 528, x3)

inst_97:
// rs2_h1_val == 256, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0000fff8fffc;  op2val:0x037fff01000001
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xaaaa0000fff8fffc, 0x037fff01000001, x1, 536, x3)

inst_98:
// rs2_h1_val == -129, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000200030001;  op2val:0xf7fffffdff7f0006
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xaaaa000200030001, 0xf7fffffdff7f0006, x1, 544, x3)

inst_99:
// rs1_h1_val == -33, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffaffdf1000;  op2val:0xfff9dffffffafdff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfffefffaffdf1000, 0xfff9dffffffafdff, x1, 552, x3)

inst_100:
// rs2_h1_val == -17, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fff6ffdf0005;  op2val:0x080004ffef0020
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfff7fff6ffdf0005, 0x080004ffef0020, x1, 560, x3)

inst_101:
// rs2_h1_val == -9, 
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9ffff3fffaaaa;  op2val:0x400bffffff7fffe
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfff9ffff3fffaaaa, 0x400bffffff7fffe, x1, 568, x3)

inst_102:
// rs1_h3_val == rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h1_val == -2049, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val == 256, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h2_val == 1024, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fff901000001;  op2val:0xfff90400f7ffc000
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfff9fff901000001, 0xfff90400f7ffc000, x1, 576, x3)

inst_103:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == 64, rs1_h1_val == 1, rs2_h0_val == -257, rs1_h0_val < 0 and rs2_h0_val < 0
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc3fff0001fff6;  op2val:0x030040fffcfeff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfffc3fff0001fff6, 0x030040fffcfeff, x1, 584, x3)

inst_104:
// rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 8, rs1_h2_val == 64, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h3_val == 128, rs1_h0_val == -1, rs2_h1_val == 512, rs2_h0_val == 4096
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x080040fffcffff;  op2val:0x80c00002001000
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0x080040fffcffff, 0x80c00002001000, x1, 592, x3)

inst_105:
// rs2_h3_val == 64, rs1_h3_val == -513, rs1_h1_val == -4097
// opcode: scmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff3fffeffffff6;  op2val:0x400009ffbfefff
TEST_RR_OP(scmplt16, x31, x30, x29, 0x0000000000000000, 0xfdff3fffeffffff6, 0x400009ffbfefff, x1, 600, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 76*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
