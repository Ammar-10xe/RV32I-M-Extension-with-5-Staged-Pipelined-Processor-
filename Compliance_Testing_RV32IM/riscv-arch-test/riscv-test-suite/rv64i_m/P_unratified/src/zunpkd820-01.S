
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the zunpkd820 instruction of the RISC-V RV64PZicsr extension for the zunpkd820 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",zunpkd820)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x26,signature_x26_1)

inst_0:
// rs1==x9, rd==x19, rs1_b0_val == 0, rs1_b4_val == 0, rs1_b7_val == 253, rs1_b1_val == 1, rs1_b6_val == 85
// opcode: zunpkd820 ; op1:x9; dest:x19; op1val:0xfd550e000d0d0100;
TEST_RD_OP( zunpkd820, x19, x9, 0x0000000000000000, 0xfd550e000d0d0100, x26, 0, x4)

inst_1:
// rs1==x25, rd==x28, rs1_b7_val == 170, rs1_b5_val == 2, rs1_b6_val == 16, rs1_b0_val == 32, rs1_b2_val == 223
// opcode: zunpkd820 ; op1:x25; dest:x28; op1val:0xaa1002110ddf0f20;
TEST_RD_OP( zunpkd820, x28, x25, 0x0000000000000000, 0xaa1002110ddf0f20, x26, 8, x4)

inst_2:
// rs1==x21, rd==x10, rs1_b7_val == 85, rs1_b4_val == 128, rs1_b6_val == 0, rs1_b2_val == 253, rs1_b0_val == 128, rs1_b3_val == 254
// opcode: zunpkd820 ; op1:x21; dest:x10; op1val:0x55000980fefd0d80;
TEST_RD_OP( zunpkd820, x10, x21, 0x0000000000000000, 0x55000980fefd0d80, x26, 16, x4)

inst_3:
// rs1==x2, rd==x5, rs1_b7_val == 127, rs1_b4_val == 247, rs1_b2_val == 170, rs1_b0_val == 127, rs1_b5_val == 4, rs1_b3_val == 64
// opcode: zunpkd820 ; op1:x2; dest:x5; op1val:0x7f0d04f740aa0e7f;
TEST_RD_OP( zunpkd820, x5, x2, 0x0000000000000000, 0x7f0d04f740aa0e7f, x26, 24, x4)

inst_4:
// rs1==x24, rd==x29, rs1_b7_val == 191, rs1_b5_val == 64, rs1_b0_val == 253, rs1_b3_val == 247, rs1_b6_val == 251, rs1_b1_val == 247
// opcode: zunpkd820 ; op1:x24; dest:x29; op1val:0xbffb400af70af7fd;
TEST_RD_OP( zunpkd820, x29, x24, 0x0000000000000000, 0xbffb400af70af7fd, x26, 32, x4)

inst_5:
// rs1==x1, rd==x2, rs1_b7_val == 223, rs1_b4_val == 64, rs1_b6_val == 223, rs1_b1_val == 4, rs1_b5_val == 170
// opcode: zunpkd820 ; op1:x1; dest:x2; op1val:0xdfdfaa400c0e0407;
TEST_RD_OP( zunpkd820, x2, x1, 0x0000000000000000, 0xdfdfaa400c0e0407, x26, 40, x4)

inst_6:
// rs1==x17, rd==x15, rs1_b7_val == 239, rs1_b4_val == 32
// opcode: zunpkd820 ; op1:x17; dest:x15; op1val:0xef0009200d060d12;
TEST_RD_OP( zunpkd820, x15, x17, 0x0000000000000000, 0xef0009200d060d12, x26, 48, x4)

inst_7:
// rs1==x20, rd==x18, rs1_b7_val == 247, rs1_b1_val == 251, rs1_b3_val == 8
// opcode: zunpkd820 ; op1:x20; dest:x18; op1val:0xf755070d080ffb09;
TEST_RD_OP( zunpkd820, x18, x20, 0x0000000000000000, 0xf755070d080ffb09, x26, 56, x4)

inst_8:
// rs1==x3, rd==x20, rs1_b7_val == 251, rs1_b1_val == 2, rs1_b0_val == 223, rs1_b2_val == 4, rs1_b3_val == 223, rs1_b6_val == 127
// opcode: zunpkd820 ; op1:x3; dest:x20; op1val:0xfb7f0412df0402df;
TEST_RD_OP( zunpkd820, x20, x3, 0x0000000000000000, 0xfb7f0412df0402df, x26, 64, x4)

inst_9:
// rs1==x19, rd==x21, rs1_b7_val == 254, rs1_b5_val == 127
// opcode: zunpkd820 ; op1:x19; dest:x21; op1val:0xfe0f7f0507dff70e;
TEST_RD_OP( zunpkd820, x21, x19, 0x0000000000000000, 0xfe0f7f0507dff70e, x26, 72, x4)

inst_10:
// rs1==x7, rd==x31, rs1_b7_val == 128, rs1_b6_val == 191, rs1_b4_val == 239, rs1_b3_val == 85
// opcode: zunpkd820 ; op1:x7; dest:x31; op1val:0x80bf0def55050a0a;
TEST_RD_OP( zunpkd820, x31, x7, 0x0000000000000000, 0x80bf0def55050a0a, x26, 80, x4)

inst_11:
// rs1==x5, rd==x16, rs1_b7_val == 64, rs1_b1_val == 64, rs1_b6_val == 253, rs1_b2_val == 128
// opcode: zunpkd820 ; op1:x5; dest:x16; op1val:0x40fd030d11804003;
TEST_RD_OP( zunpkd820, x16, x5, 0x0000000000000000, 0x40fd030d11804003, x26, 88, x4)

inst_12:
// rs1==x13, rd==x9, rs1_b7_val == 32, rs1_b2_val == 191, rs1_b0_val == 16
// opcode: zunpkd820 ; op1:x13; dest:x9; op1val:0x200a0e0a0ebf0e10;
TEST_RD_OP( zunpkd820, x9, x13, 0x0000000000000000, 0x200a0e0a0ebf0e10, x26, 96, x4)

inst_13:
// rs1==x22, rd==x13, rs1_b7_val == 16, rs1_b3_val == 251, rs1_b5_val == 253, rs1_b6_val == 2, rs1_b0_val == 1
// opcode: zunpkd820 ; op1:x22; dest:x13; op1val:0x1002fd03fbaafb01;
TEST_RD_OP( zunpkd820, x13, x22, 0x0000000000000000, 0x1002fd03fbaafb01, x26, 104, x4)

inst_14:
// rs1==x10, rd==x7, rs1_b7_val == 8, rs1_b5_val == 1, rs1_b4_val == 8
// opcode: zunpkd820 ; op1:x10; dest:x7; op1val:0x80c010808fd0220;
TEST_RD_OP( zunpkd820, x7, x10, 0x0000000000000000, 0x80c010808fd0220, x26, 112, x4)

inst_15:
// rs1==x28, rd==x12, rs1_b7_val == 4, rs1_b2_val == 127
// opcode: zunpkd820 ; op1:x28; dest:x12; op1val:0x4111207057f010e;
TEST_RD_OP( zunpkd820, x12, x28, 0x0000000000000000, 0x4111207057f010e, x26, 120, x4)

inst_16:
// rs1==x14, rd==x17, rs1_b7_val == 2, rs1_b1_val == 85, rs1_b0_val == 8, rs1_b4_val == 127
// opcode: zunpkd820 ; op1:x14; dest:x17; op1val:0x20a407f0b045508;
TEST_RD_OP( zunpkd820, x17, x14, 0x0000000000000000, 0x20a407f0b045508, x26, 128, x4)

inst_17:
// rs1==x31, rd==x24, rs1_b7_val == 1, rs1_b2_val == 32, rs1_b4_val == 251, rs1_b1_val == 223
// opcode: zunpkd820 ; op1:x31; dest:x24; op1val:0x10e01fb0a20df08;
TEST_RD_OP( zunpkd820, x24, x31, 0x0000000000000000, 0x10e01fb0a20df08, x26, 136, x4)

inst_18:
// rs1==x23, rd==x3, rs1_b7_val == 255, rs1_b1_val == 128
// opcode: zunpkd820 ; op1:x23; dest:x3; op1val:0xff0c0ef7fe038020;
TEST_RD_OP( zunpkd820, x3, x23, 0x0000000000000000, 0xff0c0ef7fe038020, x26, 144, x4)

inst_19:
// rs1==x6, rd==x11, rs1_b7_val == 0, rs1_b5_val == 85, rs1_b4_val == 4
// opcode: zunpkd820 ; op1:x6; dest:x11; op1val:0x0a55040907f707;
TEST_RD_OP( zunpkd820, x11, x6, 0x0000000000000000, 0x0a55040907f707, x26, 152, x4)

inst_20:
// rs1==x16, rd==x8, rs1_b6_val == 170, rs1_b4_val == 2
// opcode: zunpkd820 ; op1:x16; dest:x8; op1val:0x20aa11020e8080df;
TEST_RD_OP( zunpkd820, x8, x16, 0x0000000000000000, 0x20aa11020e8080df, x26, 160, x4)

inst_21:
// rs1==x0, rd==x23, rs1_b6_val == 239, rs1_b3_val == 2
// opcode: zunpkd820 ; op1:x0; dest:x23; op1val:0xbef0609020509df;
TEST_RD_OP( zunpkd820, x23, x0, 0x0000000000000000, 0xbef0609020509df, x26, 168, x3)

inst_22:
// rs1==x4, rd==x0, rs1_b6_val == 247, rs1_b2_val == 0, rs1_b0_val == 254, rs1_b5_val == 247
// opcode: zunpkd820 ; op1:x4; dest:x0; op1val:0x8f7f711fe0002fe;
TEST_RD_OP( zunpkd820, x0, x4, 0x0000000000000000, 0x8f7f711fe0002fe, x26, 176, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_23:
// rs1==x26, rd==x27, rs1_b6_val == 254, rs1_b3_val == 1, rs1_b5_val == 255
// opcode: zunpkd820 ; op1:x26; dest:x27; op1val:0xfdfeff07010a5507;
TEST_RD_OP( zunpkd820, x27, x26, 0x0000000000000000, 0xfdfeff07010a5507, x2, 0, x3)

inst_24:
// rs1==x15, rd==x4, rs1_b6_val == 128, rs1_b2_val == 1
// opcode: zunpkd820 ; op1:x15; dest:x4; op1val:0xf78004800b010413;
TEST_RD_OP( zunpkd820, x4, x15, 0x0000000000000000, 0xf78004800b010413, x2, 8, x3)

inst_25:
// rs1==x27, rd==x25, rs1_b6_val == 64, rs1_b0_val == 239, rs1_b1_val == 127
// opcode: zunpkd820 ; op1:x27; dest:x25; op1val:0xaa400af70b067fef;
TEST_RD_OP( zunpkd820, x25, x27, 0x0000000000000000, 0xaa400af70b067fef, x2, 16, x3)

inst_26:
// rs1==x12, rd==x14, rs1_b6_val == 32, rs1_b3_val == 0
// opcode: zunpkd820 ; op1:x12; dest:x14; op1val:0x620ff0c00125507;
TEST_RD_OP( zunpkd820, x14, x12, 0x0000000000000000, 0x620ff0c00125507, x2, 24, x3)

inst_27:
// rs1==x29, rd==x6, rs1_b1_val == 253, rs1_b4_val == 85
// opcode: zunpkd820 ; op1:x29; dest:x6; op1val:0xa1355550004fd13;
TEST_RD_OP( zunpkd820, x6, x29, 0x0000000000000000, 0xa1355550004fd13, x2, 32, x3)

inst_28:
// rs1==x30, rd==x1, rs1_b1_val == 254, rs1_b4_val == 223, rs1_b6_val == 4
// opcode: zunpkd820 ; op1:x30; dest:x1; op1val:0x800401df0804fe0f;
TEST_RD_OP( zunpkd820, x1, x30, 0x0000000000000000, 0x800401df0804fe0f, x2, 40, x3)

inst_29:
// rs1==x11, rd==x30, rs1_b1_val == 32, 
// opcode: zunpkd820 ; op1:x11; dest:x30; op1val:0xfbfd0b0e090a20fe;
TEST_RD_OP( zunpkd820, x30, x11, 0x0000000000000000, 0xfbfd0b0e090a20fe, x2, 48, x3)

inst_30:
// rs1==x8, rd==x26, rs1_b1_val == 16, 
// opcode: zunpkd820 ; op1:x8; dest:x26; op1val:0x55fb1102050e10fd;
TEST_RD_OP( zunpkd820, x26, x8, 0x0000000000000000, 0x55fb1102050e10fd, x2, 56, x3)

inst_31:
// rs1==x18, rd==x22, rs1_b1_val == 8, rs1_b5_val == 32
// opcode: zunpkd820 ; op1:x18; dest:x22; op1val:0xbf10200540fd0880;
TEST_RD_OP( zunpkd820, x22, x18, 0x0000000000000000, 0xbf10200540fd0880, x2, 64, x3)

inst_32:
// rs1_b1_val == 255, rs1_b0_val == 191, rs1_b5_val == 254
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xb12fef7550bffbf;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0xb12fef7550bffbf, x2, 72, x3)

inst_33:
// rs1_b1_val == 0, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x27f0e040e0c0010;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x27f0e040e0c0010, x2, 80, x3)

inst_34:
// rs1_b0_val == 170, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x9020a090ebf0faa;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x9020a090ebf0faa, x2, 88, x3)

inst_35:
// rs1_b0_val == 85, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x550f0ffb05064055;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x550f0ffb05064055, x2, 96, x3)

inst_36:
// rs1_b0_val == 247, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x40111104020905f7;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x40111104020905f7, x2, 104, x3)

inst_37:
// rs1_b0_val == 251, rs1_b6_val == 8, rs1_b4_val == 1
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xff080301060102fb;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0xff080301060102fb, x2, 112, x3)

inst_38:
// rs1_b0_val == 64, rs1_b2_val == 239, rs1_b3_val == 255
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xbf08f720ffef0c40;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0xbf08f720ffef0c40, x2, 120, x3)

inst_39:
// rs1_b0_val == 4, rs1_b3_val == 253, rs1_b5_val == 128
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xf7fb800cfd120504;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0xf7fb800cfd120504, x2, 128, x3)

inst_40:
// rs1_b0_val == 2, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x2020305fd7f1002;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x2020305fd7f1002, x2, 136, x3)

inst_41:
// rs1_b0_val == 255, rs1_b1_val == 191, rs1_b5_val == 8
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x48008df0211bfff;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x48008df0211bfff, x2, 144, x3)

inst_42:
// rs1_b6_val == 1, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x8001ff07060440fe;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x8001ff07060440fe, x2, 152, x3)

inst_43:
// rs1_b6_val == 255, rs1_b2_val == 251
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x1ff050a12fb0011;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x1ff050a12fb0011, x2, 160, x3)

inst_44:
// rs1_b4_val == 191, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x55fe0dbf0d0103fb;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x55fe0dbf0d0103fb, x2, 168, x3)

inst_45:
// rs1_b4_val == 253, rs1_b3_val == 127
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xa1007fd7f1308f7;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0xa1007fd7f1308f7, x2, 176, x3)

inst_46:
// rs1_b4_val == 254, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xc1101fe7f03010f;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0xc1101fe7f03010f, x2, 184, x3)

inst_47:
// rs1_b4_val == 16, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x11104010121304bf;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x11104010121304bf, x2, 192, x3)

inst_48:
// rs1_b4_val == 255, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xaa7f0bff000b0005;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0xaa7f0bff000b0005, x2, 200, x3)

inst_49:
// rs1_b3_val == 170, rs1_b2_val == 64
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xfb204010aa40080f;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0xfb204010aa40080f, x2, 208, x3)

inst_50:
// rs1_b3_val == 191, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x137f11bf0d1100;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x137f11bf0d1100, x2, 216, x3)

inst_51:
// rs1_b3_val == 239, rs1_b5_val == 223, rs1_b2_val == 85
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x807dfdfef55fd04;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x807dfdfef55fd04, x2, 224, x3)

inst_52:
// rs1_b3_val == 128, rs1_b5_val == 251
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xd04fb11800b0ddf;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0xd04fb11800b0ddf, x2, 232, x3)

inst_53:
// rs1_b3_val == 32, rs1_b1_val == 170, rs1_b5_val == 0, rs1_b2_val == 255
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x13000620ffaa05;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x13000620ffaa05, x2, 240, x3)

inst_54:
// rs1_b3_val == 4, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xa117ffb040501fb;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0xa117ffb040501fb, x2, 248, x3)

inst_55:
// rs1_b2_val == 247, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xd130b0f13f70508;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0xd130b0f13f70508, x2, 256, x3)

inst_56:
// rs1_b5_val == 191, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xdf0dbffd55130cbf;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0xdf0dbffd55130cbf, x2, 264, x3)

inst_57:
// rs1_b5_val == 239, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x20aef03effdf70d;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x20aef03effdf70d, x2, 272, x3)

inst_58:
// rs1_b2_val == 254, rs1_b3_val == 16
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xef7ffff10fe55fb;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0xef7ffff10fe55fb, x2, 280, x3)

inst_59:
// rs1_b2_val == 16, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x90afd12001020df;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x90afd12001020df, x2, 288, x3)

inst_60:
// rs1_b2_val == 8, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xefd40200a080212;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0xefd40200a080212, x2, 296, x3)

inst_61:
// rs1_b1_val == 239, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x2040520fdfbef03;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x2040520fdfbef03, x2, 304, x3)

inst_62:
// rs1_b2_val == 2, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x20fe110b024080;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x20fe110b024080, x2, 312, x3)

inst_63:
// rs1_b4_val == 170, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xa80ffaa050f5510;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0xa80ffaa050f5510, x2, 320, x3)

inst_64:
// rs1_b5_val == 16, 
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x1207107f030e1100;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x1207107f030e1100, x2, 328, x3)

inst_65:
// rs1_b6_val == 239, rs1_b3_val == 2
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0xbef0609020509df;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0xbef0609020509df, x2, 336, x3)

inst_66:
// rs1_b6_val == 247, rs1_b2_val == 0, rs1_b0_val == 254, rs1_b5_val == 247
// opcode: zunpkd820 ; op1:x30; dest:x31; op1val:0x8f7f711fe0002fe;
TEST_RD_OP( zunpkd820, x31, x30, 0x0000000000000000, 0x8f7f711fe0002fe, x2, 344, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x26_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x26_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 44*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
