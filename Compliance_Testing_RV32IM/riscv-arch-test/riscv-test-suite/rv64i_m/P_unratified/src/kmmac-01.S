
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmmac instruction of the RISC-V RV64PZicsr extension for the kmmac covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmmac)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x22, rs2==x7, rd==x22, rs1_w0_val == -2147483648, rs2_w0_val == -4194305, rs1_w1_val == 4194304
// opcode: kmmac ; op1:x22; dest:x22; op1val:0x40000080000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x22, x22, x7, 0x0000000000000000, 0x40000080000000, 0x66666666ffbfffff, x22, x2, 0, x16)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x1, rd==x3, rs2_w1_val == -1431655766, rs1_w1_val == 67108864, rs2_w0_val == -2, rs1_w0_val == 32768
// opcode: kmmac ; op1:x23; dest:x3; op1val:0x400000000008000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x3, x23, x1, 0x0000000000000000, 0x400000000008000, 0xaaaaaaaafffffffe, x23, x2, 16, x16)

inst_2:
// rs1 == rs2 != rd, rs1==x20, rs2==x20, rd==x27, rs2_w1_val == 1431655765, rs2_w0_val == 32, rs1_w1_val == 8
// opcode: kmmac ; op1:x20; dest:x27; op1val:0x0000080000b503;  immval:$imm_val
TEST_PKRR_OP(kmmac, x27, x20, x20, 0x0000000000000000, 0x0000080000b503, 0x5555555500000020, x20, x2, 32, x16)

inst_3:
// rs1 == rs2 == rd, rs1==x30, rs2==x30, rd==x30, rs2_w1_val == 2147483647, rs1_w1_val == 1431655765, rs2_w0_val == 67108864
// opcode: kmmac ; op1:x30; dest:x30; op1val:0x5555555533333334;  immval:$imm_val
TEST_PKRR_OP(kmmac, x30, x30, x30, 0x0000000000000000, 0x5555555533333334, 0x7fffffff04000000, x30, x2, 48, x16)

inst_4:
// rs2 == rd != rs1, rs1==x6, rs2==x18, rd==x18, rs2_w1_val == -1073741825, rs1_w1_val == 8388608
// opcode: kmmac ; op1:x6; dest:x18; op1val:0x800000ffff4afc;  immval:$imm_val
TEST_PKRR_OP(kmmac, x18, x6, x18, 0x0000000000000000, 0x800000ffff4afc, 0xbffffffffffffffe, x6, x2, 64, x16)

inst_5:
// rs1==x5, rs2==x21, rd==x0, rs2_w1_val == -536870913, rs1_w1_val == -1
// opcode: kmmac ; op1:x5; dest:x0; op1val:0xffffffff66666667;  immval:$imm_val
TEST_PKRR_OP(kmmac, x0, x5, x21, 0x0000000000000000, 0xffffffff66666667, 0xdfffffff00000005, x5, x2, 80, x16)

inst_6:
// rs1==x25, rs2==x9, rd==x17, rs2_w1_val == -268435457, rs1_w0_val == 4194304, rs1_w1_val == 0, rs2_w0_val == 8388608
// opcode: kmmac ; op1:x25; dest:x17; op1val:0x00000000400000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x17, x25, x9, 0x0000000000000000, 0x00000000400000, 0xefffffff00800000, x25, x2, 96, x16)

inst_7:
// rs1==x12, rs2==x10, rd==x21, rs2_w1_val == -134217729, rs1_w0_val == 2, rs1_w1_val == 8192
// opcode: kmmac ; op1:x12; dest:x21; op1val:0x00200000000002;  immval:$imm_val
TEST_PKRR_OP(kmmac, x21, x12, x10, 0x0000000000000000, 0x00200000000002, 0xf7ffffff00000006, x12, x2, 112, x16)

inst_8:
// rs1==x18, rs2==x4, rd==x7, rs2_w1_val == -67108865, rs1_w1_val == 16777216, rs1_w0_val == 0
// opcode: kmmac ; op1:x18; dest:x7; op1val:0x100000000000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x7, x18, x4, 0x0000000000000000, 0x100000000000000, 0xfbffffff00000005, x18, x2, 128, x16)

inst_9:
// rs1==x4, rs2==x27, rd==x5, rs2_w1_val == -33554433, 
// opcode: kmmac ; op1:x4; dest:x5; op1val:0x55555554fffffffa;  immval:$imm_val
TEST_PKRR_OP(kmmac, x5, x4, x27, 0x0000000000000000, 0x55555554fffffffa, 0xfdffffff33333333, x4, x2, 144, x16)

inst_10:
// rs1==x28, rs2==x11, rd==x10, rs2_w1_val == -16777217, rs2_w0_val == -8193, rs1_w1_val == -32769, rs1_w0_val == -33554433
// opcode: kmmac ; op1:x28; dest:x10; op1val:0xffff7ffffdffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x10, x28, x11, 0x0000000000000000, 0xffff7ffffdffffff, 0xfeffffffffffdfff, x28, x2, 160, x16)

inst_11:
// rs1==x21, rs2==x31, rd==x15, rs2_w1_val == -8388609, rs1_w0_val == 1, rs1_w1_val == 16, rs2_w0_val == 128
// opcode: kmmac ; op1:x21; dest:x15; op1val:0x00001000000001;  immval:$imm_val
TEST_PKRR_OP(kmmac, x15, x21, x31, 0x0000000000000000, 0x00001000000001, 0xff7fffff00000080, x21, x2, 176, x16)

inst_12:
// rs1==x0, rs2==x13, rd==x9, rs2_w1_val == -4194305, rs2_w0_val == -1, rs1_w0_val == -16385, rs1_w1_val == 4
// opcode: kmmac ; op1:x0; dest:x9; op1val:0x000004ffffbfff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x9, x0, x13, 0x0000000000000000, 0x000004ffffbfff, 0xffbfffffffffffff, x0, x2, 192, x16)

inst_13:
// rs1==x1, rs2==x19, rd==x11, rs2_w1_val == -2097153, rs2_w0_val == -33554433, rs1_w1_val == -1048577
// opcode: kmmac ; op1:x1; dest:x11; op1val:0xffeffffffffffff8;  immval:$imm_val
TEST_PKRR_OP(kmmac, x11, x1, x19, 0x0000000000000000, 0xffeffffffffffff8, 0xffdffffffdffffff, x1, x2, 208, x16)

inst_14:
// rs1==x10, rs2==x15, rd==x1, rs2_w1_val == -1048577, rs1_w0_val == 65536
// opcode: kmmac ; op1:x10; dest:x1; op1val:0x3333333200010000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x1, x10, x15, 0x0000000000000000, 0x3333333200010000, 0xffeffffffffffff8, x10, x2, 224, x16)

inst_15:
// rs1==x27, rs2==x8, rd==x14, rs2_w1_val == -524289, rs1_w0_val == 134217728
// opcode: kmmac ; op1:x27; dest:x14; op1val:0x5555555408000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x14, x27, x8, 0x0000000000000000, 0x5555555408000000, 0xfff7ffff00000007, x27, x2, 240, x16)

inst_16:
// rs1==x8, rs2==x17, rd==x6, rs2_w1_val == -262145, rs2_w0_val == -16385, rs1_w1_val == -4097
// opcode: kmmac ; op1:x8; dest:x6; op1val:0xffffefff33333332;  immval:$imm_val
TEST_PKRR_OP(kmmac, x6, x8, x17, 0x0000000000000000, 0xffffefff33333332, 0xfffbffffffffbfff, x8, x2, 256, x10)

inst_17:
// rs1==x11, rs2==x16, rd==x28, rs2_w1_val == -131073, rs1_w1_val == -536870913, rs2_w0_val == -129
// opcode: kmmac ; op1:x11; dest:x28; op1val:0xdfffffff0000b503;  immval:$imm_val
TEST_PKRR_OP(kmmac, x28, x11, x16, 0x0000000000000000, 0xdfffffff0000b503, 0xfffdffffffffff7f, x11, x2, 272, x10)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_18:
// rs1==x16, rs2==x5, rd==x29, rs2_w1_val == -65537, rs1_w1_val == 64, rs2_w0_val == 256, rs1_w0_val == 64
// opcode: kmmac ; op1:x16; dest:x29; op1val:0x00004000000040;  immval:$imm_val
TEST_PKRR_OP(kmmac, x29, x16, x5, 0x0000000000000000, 0x00004000000040, 0xfffeffff00000100, x16, x1, 0, x10)

inst_19:
// rs1==x15, rs2==x26, rd==x23, rs2_w1_val == -32769, 
// opcode: kmmac ; op1:x15; dest:x23; op1val:0x66666666aaaaaaab;  immval:$imm_val
TEST_PKRR_OP(kmmac, x23, x15, x26, 0x0000000000000000, 0x66666666aaaaaaab, 0xffff7fff00000003, x15, x1, 16, x10)

inst_20:
// rs1==x3, rs2==x23, rd==x31, rs2_w1_val == -16385, rs2_w0_val == 4194304, rs1_w0_val == 16777216
// opcode: kmmac ; op1:x3; dest:x31; op1val:0xfffffffc01000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x3, x23, 0x0000000000000000, 0xfffffffc01000000, 0xffffbfff00400000, x3, x1, 32, x10)

inst_21:
// rs1==x26, rs2==x3, rd==x8, rs2_w1_val == -8193, rs1_w1_val == -2097153, rs2_w0_val == -32769
// opcode: kmmac ; op1:x26; dest:x8; op1val:0xffdfffff00000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x8, x26, x3, 0x0000000000000000, 0xffdfffff00000000, 0xffffdfffffff7fff, x26, x1, 48, x10)

inst_22:
// rs1==x14, rs2==x24, rd==x25, rs2_w1_val == -4097, rs1_w1_val == 128, rs1_w0_val == -257
// opcode: kmmac ; op1:x14; dest:x25; op1val:0x000080fffffeff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x25, x14, x24, 0x0000000000000000, 0x000080fffffeff, 0xffffefff04000000, x14, x1, 64, x10)

inst_23:
// rs1==x19, rs2==x14, rd==x24, rs2_w1_val == -2049, rs2_w0_val == 33554432, rs1_w1_val == 4096
// opcode: kmmac ; op1:x19; dest:x24; op1val:0x00100033333333;  immval:$imm_val
TEST_PKRR_OP(kmmac, x24, x19, x14, 0x0000000000000000, 0x00100033333333, 0xfffff7ff02000000, x19, x1, 80, x10)

inst_24:
// rs1==x24, rs2==x0, rd==x26, rs2_w1_val == -1025, rs2_w0_val == -536870913, rs1_w1_val == 33554432
// opcode: kmmac ; op1:x24; dest:x26; op1val:0x200000000000006;  immval:$imm_val
TEST_PKRR_OP(kmmac, x26, x24, x0, 0x0000000000000000, 0x200000000000006, 0xfffffbffdfffffff, x24, x1, 96, x10)

inst_25:
// rs1==x7, rs2==x29, rd==x13, rs2_w1_val == -513, 
// opcode: kmmac ; op1:x7; dest:x13; op1val:0xfffffff800000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x13, x7, x29, 0x0000000000000000, 0xfffffff800000000, 0xfffffdff04000000, x7, x1, 112, x10)

inst_26:
// rs1==x2, rs2==x12, rd==x19, rs2_w1_val == -257, rs1_w0_val == 4, rs2_w0_val == 0
// opcode: kmmac ; op1:x2; dest:x19; op1val:0xfffffffa00000004;  immval:$imm_val
TEST_PKRR_OP(kmmac, x19, x2, x12, 0x0000000000000000, 0xfffffffa00000004, 0xfffffeff00000000, x2, x1, 128, x10)

inst_27:
// rs1==x13, rs2==x22, rd==x4, rs2_w1_val == -129, rs1_w0_val == 1073741824
// opcode: kmmac ; op1:x13; dest:x4; op1val:0xaaaaaaab40000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x4, x13, x22, 0x0000000000000000, 0xaaaaaaab40000000, 0xffffff7f66666667, x13, x1, 144, x10)

inst_28:
// rs1==x17, rs2==x28, rd==x2, rs2_w1_val == -65, 
// opcode: kmmac ; op1:x17; dest:x2; op1val:0x000000aaaaaaab;  immval:$imm_val
TEST_PKRR_OP(kmmac, x2, x17, x28, 0x0000000000000000, 0x000000aaaaaaab, 0xffffffbfffff4afc, x17, x1, 160, x10)

inst_29:
// rs1==x31, rs2==x25, rd==x12, rs2_w1_val == -33, rs2_w0_val == -2097153, rs1_w1_val == -257, rs1_w0_val == -2049
// opcode: kmmac ; op1:x31; dest:x12; op1val:0xfffffefffffff7ff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x12, x31, x25, 0x0000000000000000, 0xfffffefffffff7ff, 0xffffffdfffdfffff, x31, x1, 176, x10)

inst_30:
// rs1==x9, rs2==x2, rd==x20, rs2_w1_val == -17, rs1_w0_val == 8388608
// opcode: kmmac ; op1:x9; dest:x20; op1val:0x00b50400800000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x20, x9, x2, 0x0000000000000000, 0x00b50400800000, 0xffffffef00000100, x9, x1, 192, x10)

inst_31:
// rs1==x29, rs2==x6, rd==x16, rs2_w1_val == -9, 
// opcode: kmmac ; op1:x29; dest:x16; op1val:0x00000666666667;  immval:$imm_val
TEST_PKRR_OP(kmmac, x16, x29, x6, 0x0000000000000000, 0x00000666666667, 0xfffffff7fffffffa, x29, x1, 208, x10)

inst_32:
// rs2_w1_val == -5, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x0010003fffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x0010003fffffff, 0xfffffffb0000b505, x30, x1, 224, x10)

inst_33:
// rs2_w1_val == -3, rs2_w0_val == 2
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffffc00000003;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffffc00000003, 0xfffffffd00000002, x30, x1, 240, x2)

inst_34:
// rs2_w1_val == -2, rs1_w0_val == -1431655766
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x4000000aaaaaaaa;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x4000000aaaaaaaa, 0xfffffffe0000b504, x30, x1, 256, x2)

inst_35:
// rs2_w1_val == -2147483648, rs1_w1_val == -17, rs1_w0_val == -1
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffffffefffffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffffffefffffffff, 0x800000000000b505, x30, x1, 272, x2)

inst_36:
// rs2_w1_val == 1073741824, rs2_w0_val == 8, rs1_w1_val == -2147483648
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x8000000000000004;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x8000000000000004, 0x4000000000000008, x30, x1, 288, x2)

inst_37:
// rs2_w1_val == 536870912, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x001000fdffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x001000fdffffff, 0x2000000000000008, x30, x1, 304, x2)

inst_38:
// rs2_w1_val == 268435456, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00b50500800000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00b50500800000, 0x10000000fffffff6, x30, x1, 320, x2)

inst_39:
// rs2_w1_val == 134217728, rs1_w0_val == 268435456
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00000810000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00000810000000, 0x8000000fffffffc, x30, x1, 336, x2)

inst_40:
// rs2_w1_val == 67108864, rs1_w0_val == -268435457
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffffffefefffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffffffefefffffff, 0x400000000000000, x30, x1, 352, x2)

inst_41:
// rs2_w1_val == 33554432, rs1_w1_val == 256
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00010000000004;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00010000000004, 0x2000000ffffff7f, x30, x1, 368, x2)

inst_42:
// rs2_w1_val == 16777216, rs2_w0_val == -67108865, rs1_w1_val == -33
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffffffdffffffeff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffeff, 0x1000000fbffffff, x30, x1, 384, x2)

inst_43:
// rs2_w1_val == 8388608, rs1_w1_val == -1431655766
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xaaaaaaaa00000003;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000003, 0x800000fffffff6, x30, x1, 400, x2)

inst_44:
// rs2_w1_val == 4194304, rs1_w0_val == 32, rs2_w0_val == 268435456
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00010000000020;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00010000000020, 0x40000010000000, x30, x1, 416, x2)

inst_45:
// rs2_w1_val == 2097152, rs1_w0_val == -3, rs2_w0_val == -1431655766
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffdffffffffffffd;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffdffffffffffffd, 0x200000aaaaaaaa, x30, x1, 432, x2)

inst_46:
// rs2_w1_val == 1048576, rs1_w1_val == -67108865
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfbffffff00000004;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000004, 0x10000000000003, x30, x1, 448, x2)

inst_47:
// rs2_w1_val == 524288, rs2_w0_val == 4096, rs1_w1_val == -8388609, rs1_w0_val == -2
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xff7ffffffffffffe;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffffffe, 0x08000000001000, x30, x1, 464, x2)

inst_48:
// rs2_w1_val == 262144, rs1_w0_val == 128
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x8000000000000080;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x8000000000000080, 0x04000000000002, x30, x1, 480, x2)

inst_49:
// rs2_w1_val == 131072, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xff7fffffffff4afc;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xff7fffffffff4afc, 0x02000010000000, x30, x1, 496, x2)

inst_50:
// rs2_w1_val == 65536, rs1_w0_val == -65537, rs2_w0_val == 1431655765, rs1_w1_val == -134217729
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xf7fffffffffeffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffeffff, 0x01000055555555, x30, x1, 512, x2)

inst_51:
// rs2_w1_val == 32768, rs2_w0_val == 536870912, rs1_w0_val == -4097, rs1_w1_val == 134217728
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x8000000ffffefff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x8000000ffffefff, 0x00800020000000, x30, x1, 528, x2)

inst_52:
// rs2_w1_val == 16384, rs1_w1_val == 512, rs2_w0_val == -262145
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x000200fffffff8;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x000200fffffff8, 0x004000fffbffff, x30, x1, 544, x2)

inst_53:
// rs2_w1_val == 8192, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x66666665ffff4afc;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x66666665ffff4afc, 0x002000ffff4afc, x30, x1, 560, x2)

inst_54:
// rs2_w1_val == 4096, rs1_w0_val == 2097152, rs2_w0_val == -33, rs1_w1_val == 2048
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00080000200000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00080000200000, 0x001000ffffffdf, x30, x1, 576, x2)

inst_55:
// rs2_w1_val == 2048, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x002000fdffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x002000fdffffff, 0x000800fffffff8, x30, x1, 592, x2)

inst_56:
// rs2_w1_val == 1024, rs2_w0_val == -513
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00000310000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00000310000000, 0x000400fffffdff, x30, x1, 608, x2)

inst_57:
// rs2_w1_val == 512, rs1_w1_val == -16385, rs2_w0_val == -1025
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffffbffffffffff6;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffff6, 0x000200fffffbff, x30, x1, 624, x2)

inst_58:
// rs1_w0_val == 8192, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00000800002000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00000800002000, 0x00080055555555, x30, x1, 640, x2)

inst_59:
// rs1_w0_val == 4096, rs1_w1_val == 2, rs2_w0_val == 131072
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00000200001000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00000200001000, 0x00100000020000, x30, x1, 656, x2)

inst_60:
// rs1_w0_val == 2048, rs2_w0_val == 512
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffff4afc00000800;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffff4afc00000800, 0xfffffffd00000200, x30, x1, 672, x2)

inst_61:
// rs1_w0_val == 1024, rs2_w1_val == 4
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00000600000400;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00000600000400, 0x00000400000006, x30, x1, 688, x2)

inst_62:
// rs1_w0_val == 512, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffffffdf00000200;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000200, 0xffffffdf00000008, x30, x1, 704, x2)

inst_63:
// rs1_w0_val == 256, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffffffff00000100;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffffffff00000100, 0xfffffffa00000007, x30, x1, 720, x2)

inst_64:
// rs1_w0_val == 16, rs1_w1_val == -33554433
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfdffffff00000010;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000010, 0x3333333300000000, x30, x1, 736, x2)

inst_65:
// rs1_w0_val == 8, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00001000000008;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00001000000008, 0x5555555455555555, x30, x1, 752, x2)

inst_66:
// rs2_w1_val == 256, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x000003fffffff8;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x000003fffffff8, 0x000100ffdfffff, x30, x1, 768, x2)

inst_67:
// rs2_w1_val == 128, rs2_w0_val == 16384
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x5555555466666666;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x5555555466666666, 0x00008000004000, x30, x1, 784, x2)

inst_68:
// rs2_w1_val == 64, rs1_w1_val == 2147483647
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x7fffffff3fffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x7fffffff3fffffff, 0x00004000000003, x30, x1, 800, x2)

inst_69:
// rs2_w1_val == 32, rs1_w1_val == 131072
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x020000fffeffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x020000fffeffff, 0x00002000000020, x30, x1, 816, x2)

inst_70:
// rs2_w1_val == 16, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffffc66666667;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffffc66666667, 0x00001000000006, x30, x1, 832, x2)

inst_71:
// rs2_w1_val == 8, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xf7ffffffc0000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xf7ffffffc0000000, 0x000008dfffffff, x30, x1, 848, x2)

inst_72:
// rs2_w1_val == 2, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xaaaaaaab00000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xaaaaaaab00000000, 0x00000233333333, x30, x1, 864, x2)

inst_73:
// rs2_w1_val == 1, rs1_w1_val == 268435456, rs2_w0_val == -8388609
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x10000000ffff4afd;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x10000000ffff4afd, 0x000001ff7fffff, x30, x1, 880, x2)

inst_74:
// rs2_w1_val == 0, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffff600000007;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffff600000007, 0x000000c0000000, x30, x1, 896, x2)

inst_75:
// rs2_w1_val == -1, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x000000ffffefff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x000000ffffefff, 0xffffffff00000005, x30, x1, 912, x2)

inst_76:
// rs2_w0_val == 2147483647, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xdfffffff00000009;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000009, 0xffbfffff7fffffff, x30, x1, 928, x2)

inst_77:
// rs2_w0_val == -1073741825, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00000500000800;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00000500000800, 0x000006bfffffff, x30, x1, 944, x2)

inst_78:
// rs2_w0_val == -268435457, rs1_w1_val == 524288
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x08000000000200;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x08000000000200, 0x000006efffffff, x30, x1, 960, x2)

inst_79:
// rs2_w0_val == -134217729, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x3ffffffffffeffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x3ffffffffffeffff, 0xffffffdff7ffffff, x30, x1, 976, x2)

inst_80:
// rs2_w0_val == -16777217, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x66666666aaaaaaab;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x66666666aaaaaaab, 0x000009feffffff, x30, x1, 992, x2)

inst_81:
// rs2_w0_val == -1048577, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00b504ffff4afc;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00b504ffff4afc, 0xfffffff6ffefffff, x30, x1, 1008, x2)

inst_82:
// rs2_w0_val == -524289, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffff6ffff4afd;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffff6ffff4afd, 0x55555555fff7ffff, x30, x1, 1024, x2)

inst_83:
// rs2_w0_val == -131073, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x80000000ffff4afc;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x80000000ffff4afc, 0xfffffdfffffdffff, x30, x1, 1040, x2)

inst_84:
// rs2_w0_val == -65537, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfdfffffffffffffa;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffffffa, 0xfffffffbfffeffff, x30, x1, 1056, x2)

inst_85:
// rs2_w0_val == -4097, rs1_w1_val == -65, rs1_w0_val == 33554432
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffffffbf02000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffffffbf02000000, 0x000008ffffefff, x30, x1, 1072, x2)

inst_86:
// rs2_w0_val == -2049, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00000600000005;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00000600000005, 0x55555555fffff7ff, x30, x1, 1088, x2)

inst_87:
// rs2_w0_val == -257, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00010000000004;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00010000000004, 0x55555555fffffeff, x30, x1, 1104, x2)

inst_88:
// rs2_w0_val == -65, rs1_w1_val == 1048576
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x10000000000800;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x10000000000800, 0x040000ffffffbf, x30, x1, 1120, x2)

inst_89:
// rs2_w0_val == -17, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffff800000009;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffff800000009, 0x55555554ffffffef, x30, x1, 1136, x2)

inst_90:
// rs2_w0_val == -9, rs1_w0_val == -1048577
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x000200ffefffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x000200ffefffff, 0xfffffff8fffffff7, x30, x1, 1152, x2)

inst_91:
// rs2_w0_val == -5, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00000608000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00000608000000, 0xffffeffffffffffb, x30, x1, 1168, x2)

inst_92:
// rs2_w0_val == -3, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00b503fffffeff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00b503fffffeff, 0xf7fffffffffffffd, x30, x1, 1184, x2)

inst_93:
// rs2_w0_val == -2147483648, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffff4afc00000004;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffff4afc00000004, 0xfffffff680000000, x30, x1, 1200, x2)

inst_94:
// rs2_w0_val == 1073741824, rs1_w0_val == -5
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x000010fffffffb;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x000010fffffffb, 0xffbfffff40000000, x30, x1, 1216, x2)

inst_95:
// rs2_w0_val == 134217728, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x5555555600000004;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x5555555600000004, 0x00000108000000, x30, x1, 1232, x2)

inst_96:
// rs2_w0_val == 16777216, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00000200000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00000200000000, 0x00000901000000, x30, x1, 1248, x2)

inst_97:
// rs2_w0_val == 2097152, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffff7fffffefffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffff7fffffefffff, 0xefffffff00200000, x30, x1, 1264, x2)

inst_98:
// rs2_w0_val == 1048576, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffff4afd33333334;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffff4afd33333334, 0x5555555600100000, x30, x1, 1280, x2)

inst_99:
// rs2_w0_val == 524288, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffffffffc0000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffffffffc0000000, 0xffffff7f00080000, x30, x1, 1296, x2)

inst_100:
// rs2_w0_val == 262144, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x000002aaaaaaaa;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x000002aaaaaaaa, 0x6666666700040000, x30, x1, 1312, x2)

inst_101:
// rs2_w0_val == 65536, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x80000000fffffffc;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x80000000fffffffc, 0x00400000010000, x30, x1, 1328, x2)

inst_102:
// rs2_w0_val == 32768, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffffffdf00000040;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000040, 0x00000500008000, x30, x1, 1344, x2)

inst_103:
// rs2_w0_val == 64, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffffc00000005;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffffc00000005, 0x10000000000040, x30, x1, 1360, x2)

inst_104:
// rs2_w0_val == 16, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffff8ffff4afc;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffff8ffff4afc, 0x00000600000010, x30, x1, 1376, x2)

inst_105:
// rs2_w0_val == 4, rs1_w1_val == 1024
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x000400fffeffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x000400fffeffff, 0x00000000000004, x30, x1, 1392, x2)

inst_106:
// rs2_w0_val == 1, rs1_w1_val == 1
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00000100200000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00000100200000, 0x00000600000001, x30, x1, 1408, x2)

inst_107:
// rs1_w1_val == -1073741825, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xbfffffff00010000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xbfffffff00010000, 0x800000ffffffdf, x30, x1, 1424, x2)

inst_108:
// rs1_w1_val == -268435457, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xefffffff00000040;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xefffffff00000040, 0x6666666500000004, x30, x1, 1440, x2)

inst_109:
// rs1_w1_val == -16777217, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfeffffff00000040;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000040, 0xffffefff00200000, x30, x1, 1456, x2)

inst_110:
// rs1_w1_val == -4194305, rs1_w0_val == -32769
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffbfffffffff7fff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffbfffffffff7fff, 0xffff7ffffff7ffff, x30, x1, 1472, x2)

inst_111:
// rs1_w1_val == -524289, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfff7ffff00000001;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000001, 0xfffffff700000006, x30, x1, 1488, x2)

inst_112:
// rs1_w1_val == -262145, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffbffff0000b504;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffbffff0000b504, 0x2000000000800000, x30, x1, 1504, x2)

inst_113:
// rs1_w1_val == -131073, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffdffff00000080;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000080, 0x55555554fffffdff, x30, x1, 1520, x2)

inst_114:
// rs1_w1_val == -65537, rs1_w0_val == -8388609
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffeffffff7fffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffeffffff7fffff, 0xfffeffff00000000, x30, x1, 1536, x2)

inst_115:
// rs1_w1_val == -8193, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffffdfff3fffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffffdfff3fffffff, 0x66666667bfffffff, x30, x1, 1552, x2)

inst_116:
// rs1_w1_val == -2049, rs1_w0_val == -1025
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffff7fffffffbff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffffbff, 0x00000040000000, x30, x1, 1568, x2)

inst_117:
// rs1_w1_val == -1025, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffbff00000004;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000004, 0x40000000fffbffff, x30, x1, 1584, x2)

inst_118:
// rs1_w1_val == -513, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffdff55555554;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffdff55555554, 0x00000300000020, x30, x1, 1600, x2)

inst_119:
// rs1_w1_val == -129, rs1_w0_val == -262145
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffffff7ffffbffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffbffff, 0x00002000000100, x30, x1, 1616, x2)

inst_120:
// rs1_w1_val == -9, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffff755555554;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffff755555554, 0xfffffffd33333333, x30, x1, 1632, x2)

inst_121:
// rs1_w1_val == -5, rs1_w0_val == 536870912
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffffb20000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffffb20000000, 0x00000000000004, x30, x1, 1648, x2)

inst_122:
// rs1_w1_val == -3, rs1_w0_val == -16777217
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffffdfeffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffffdfeffffff, 0xffffff7fc0000000, x30, x1, 1664, x2)

inst_123:
// rs1_w1_val == -2, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffffe00000003;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000003, 0x00001055555556, x30, x1, 1680, x2)

inst_124:
// rs1_w1_val == 1073741824, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x40000000ffffbfff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x40000000ffffbfff, 0xffffeffffffffffd, x30, x1, 1696, x2)

inst_125:
// rs1_w1_val == 536870912, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x20000000fffffff6;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x20000000fffffff6, 0xfffffefffffffffb, x30, x1, 1712, x2)

inst_126:
// rs1_w1_val == 2097152, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x20000000000004;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x20000000000004, 0x00000400000005, x30, x1, 1728, x2)

inst_127:
// rs1_w1_val == 32, rs1_w0_val == 2147483647
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x0000207fffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x0000207fffffff, 0x01000080000000, x30, x1, 1744, x2)

inst_128:
// rs1_w0_val == 1431655765, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffdffff55555555;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffdffff55555555, 0xffffffffefffffff, x30, x1, 1760, x2)

inst_129:
// rs1_w0_val == -1073741825, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x33333332bfffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x33333332bfffffff, 0x40000000400000, x30, x1, 1776, x2)

inst_130:
// rs1_w0_val == -536870913, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x000004dfffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x000004dfffffff, 0xf7ffffff00001000, x30, x1, 1792, x2)

inst_131:
// rs1_w0_val == -134217729, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffffff7ff7ffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffffff7ff7ffffff, 0x5555555433333334, x30, x1, 1808, x2)

inst_132:
// rs1_w0_val == -67108865, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffffcfbffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffffcfbffffff, 0xfffffff900080000, x30, x1, 1824, x2)

inst_133:
// rs1_w0_val == -4194305, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x000004ffbfffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x000004ffbfffff, 0x333333333fffffff, x30, x1, 1840, x2)

inst_134:
// rs1_w0_val == -2097153, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x020000ffdfffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x020000ffdfffff, 0xffffdfff80000000, x30, x1, 1856, x2)

inst_135:
// rs1_w0_val == -524289, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xeffffffffff7ffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xeffffffffff7ffff, 0x000003fbffffff, x30, x1, 1872, x2)

inst_136:
// rs1_w0_val == -131073, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffefffffdffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffefffffdffff, 0x8000000000000000, x30, x1, 1888, x2)

inst_137:
// rs1_w0_val == -8193, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffffbffffdfff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffdfff, 0xffffbfffffffefff, x30, x1, 1904, x2)

inst_138:
// rs2_w0_val == 8192, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffff7ffffff4afc;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffff4afc, 0x3333333300002000, x30, x1, 1920, x2)

inst_139:
// rs1_w0_val == -513, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffffeffffffffdff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffffeffffffffdff, 0xfffffbff40000000, x30, x1, 1936, x2)

inst_140:
// rs1_w0_val == -129, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x000008ffffff7f;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x000008ffffff7f, 0x3333333200001000, x30, x1, 1952, x2)

inst_141:
// rs1_w0_val == -65, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x55555554ffffffbf;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x55555554ffffffbf, 0x00b503fffffffb, x30, x1, 1968, x2)

inst_142:
// rs1_w1_val == 65536, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x010000ffdfffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x010000ffdfffff, 0x000800aaaaaaab, x30, x1, 1984, x2)

inst_143:
// rs1_w0_val == -33, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffffbffffffdf;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffffdf, 0xffffffff66666667, x30, x1, 2000, x2)

inst_144:
// rs1_w0_val == -17, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x66666666ffffffef;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x66666666ffffffef, 0xffffdfffffff4afc, x30, x1, 2016, x2)

inst_145:
// rs1_w0_val == -9, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffff8fffffff7;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffff8fffffff7, 0x02000020000000, x30, x1, 2032, x2)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_146:
// rs1_w1_val == 32768, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x0080007fffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x0080007fffffff, 0x66666665feffffff, x30, x1, 0, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_147:
// rs2_w0_val == 2048, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x33333334ffff4afc;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x33333334ffff4afc, 0xffffdfff00000800, x30, x1, 0, x2)

inst_148:
// rs1_w1_val == 16384, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00400000000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00400000000000, 0xfbffffff20000000, x30, x1, 16, x2)

inst_149:
// rs2_w0_val == 1024, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffdffff00000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000000, 0x4000000000000400, x30, x1, 32, x2)

inst_150:
// rs1_w0_val == 67108864, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xfffffff904000000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xfffffff904000000, 0xffbfffff00000100, x30, x1, 48, x2)

inst_151:
// rs1_w1_val == 262144, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x040000fffffff6;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x040000fffffff6, 0xffff4afd00000000, x30, x1, 64, x2)

inst_152:
// rs1_w0_val == 1048576, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x08000000100000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x08000000100000, 0xfffbffff00000800, x30, x1, 80, x2)

inst_153:
// rs1_w0_val == 524288, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x5555555600080000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x5555555600080000, 0xffeffffffffdffff, x30, x1, 96, x2)

inst_154:
// rs1_w0_val == 262144, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00800000040000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00800000040000, 0xfffff7ff00200000, x30, x1, 112, x2)

inst_155:
// rs1_w0_val == 131072, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffbfffff00020000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffbfffff00020000, 0xfbffffff04000000, x30, x1, 128, x2)

inst_156:
// rs1_w0_val == 16384, 
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x00008000004000;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x00008000004000, 0xfffffdff55555555, x30, x1, 144, x2)

inst_157:
// rs2_w1_val == 2147483647, rs1_w1_val == 1431655765, rs2_w0_val == 67108864
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x5555555533333334;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x5555555533333334, 0x7fffffff04000000, x30, x1, 160, x2)

inst_158:
// rs2_w1_val == -536870913, rs1_w1_val == -1
// opcode: kmmac ; op1:x30; dest:x31; op1val:0xffffffff66666667;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0xffffffff66666667, 0xdfffffff00000005, x30, x1, 176, x2)

inst_159:
// rs2_w1_val == -4194305, rs2_w0_val == -1, rs1_w0_val == -16385, rs1_w1_val == 4
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x000004ffffbfff;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x000004ffffbfff, 0xffbfffffffffffff, x30, x1, 192, x2)

inst_160:
// rs2_w1_val == -1025, rs2_w0_val == -536870913, rs1_w1_val == 33554432
// opcode: kmmac ; op1:x30; dest:x31; op1val:0x200000000000006;  immval:$imm_val
TEST_PKRR_OP(kmmac, x31, x30, x29, 0x0000000000000000, 0x200000000000006, 0xfffffbffdfffffff, x30, x1, 208, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 28*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
