
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smaqa instruction of the RISC-V RV64PZicsr extension for the smaqa covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smaqa)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 == rd != rs2, rs1==x13, rs2==x1, rd==x13, rs1_b0_val == -128, rs1_b7_val != rs2_b7_val, rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b6_val != rs2_b6_val, rs1_b6_val < 0 and rs2_b6_val < 0, rs1_b5_val != rs2_b5_val, rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b4_val != rs2_b4_val, rs1_b4_val < 0 and rs2_b4_val > 0, rs1_b4_val == -3, rs1_b3_val != rs2_b3_val, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b2_val != rs2_b2_val, rs2_b2_val == 64, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b1_val == rs2_b1_val, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val < 0, rs2_b1_val == 32, rs2_b7_val == 32, rs1_b2_val == -128, rs2_b0_val == -65, rs1_b1_val == 32, rs1_b7_val == -17, rs2_b5_val == 4, rs1_b6_val == -9
// opcode: smaqa ; op1:x13; op2:x1; dest:x13; op1val:0xeff709fd09802080;  op2val:0x20fc0407f84020bf
TEST_RR_OP(smaqa, x13, x13, x1, 0x0000000000000000, 0xeff709fd09802080, 0x20fc0407f84020bf, x4, 0, x12)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x0, rs2==x2, rd==x17, rs1_b7_val == rs2_b7_val, rs1_b5_val == -128, rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b3_val == 64, rs1_b5_val == rs2_b5_val, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b4_val == -9, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b1_val != rs2_b1_val, rs1_b3_val == -33, rs2_b2_val == -1, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b2_val == -9, rs2_b0_val == -33, rs2_b6_val == 4, rs1_b1_val == 4, rs1_b7_val == 32, rs2_b5_val == -128, rs1_b0_val == 64, rs1_b6_val == 1, rs2_b4_val == 2
// opcode: smaqa ; op1:x0; op2:x2; dest:x17; op1val:0x200180f7dff70440;  op2val:0x2004800240fff9df
TEST_RR_OP(smaqa, x17, x0, x2, 0x0000000000000000, 0x200180f7dff70440, 0x2004800240fff9df, x4, 8, x12)

inst_2:
// rs1 == rs2 != rd, rs1==x20, rs2==x20, rd==x23, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b3_val == 127, rs1_b1_val < 0 and rs2_b1_val > 0, rs2_b0_val == 64, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b7_val == -2, rs2_b3_val == 32, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == -5, rs2_b2_val == 85, rs1_b5_val == -17, rs2_b5_val == -86, rs2_b1_val == 1, rs2_b7_val == -128, rs1_b3_val > 0 and rs2_b3_val > 0
// opcode: smaqa ; op1:x20; op2:x20; dest:x23; op1val:0xfef6eff67f80fb05;  op2val:0x8009aa0620550140
TEST_RR_OP(smaqa, x23, x20, x20, 0x0000000000000000, 0xfef6eff67f80fb05, 0x8009aa0620550140, x4, 16, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x22, rs2==x22, rd==x22, rs1_b7_val > 0 and rs2_b7_val < 0, rs2_b0_val == -2, rs1_b5_val == 16, rs2_b1_val == 85, rs1_b6_val > 0 and rs2_b6_val < 0, rs1_b0_val == 8, rs1_b6_val == 64, rs1_b5_val > 0 and rs2_b5_val < 0, rs1_b3_val == 0, rs2_b7_val == -65, rs1_b4_val > 0 and rs2_b4_val < 0, rs1_b4_val == 8, rs1_b2_val == -3
// opcode: smaqa ; op1:x22; op2:x22; dest:x22; op1val:0x2040100800fdf608;  op2val:0xbfc0f6f6034055fe
TEST_RR_OP(smaqa, x22, x22, x22, 0x0000000000000000, 0x2040100800fdf608, 0xbfc0f6f6034055fe, x4, 24, x12)

inst_4:
// rs2 == rd != rs1, rs1==x27, rs2==x5, rd==x5, rs1_b6_val == rs2_b6_val, rs2_b4_val == -1, rs1_b5_val == -5, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b2_val == -17, rs2_b2_val == -9, rs2_b7_val == 64, rs2_b5_val == -17
// opcode: smaqa ; op1:x27; op2:x5; dest:x5; op1val:0x5f6fb08fceffbf9;  op2val:0x40f6efff3ff70340
TEST_RR_OP(smaqa, x5, x27, x5, 0x0000000000000000, 0x5f6fb08fceffbf9, 0x40f6efff3ff70340, x4, 32, x12)

inst_5:
// rs1==x11, rs2==x10, rd==x3, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b4_val == -1, rs2_b2_val == 32, rs1_b3_val == -86, rs1_b1_val < 0 and rs2_b1_val < 0, rs2_b1_val == -65, rs1_b6_val == 32, rs2_b7_val == -17, rs2_b4_val == -2, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b7_val == -9, rs1_b3_val < 0 and rs2_b3_val < 0
// opcode: smaqa ; op1:x11; op2:x10; dest:x3; op1val:0xf720faffaafdfcf8;  op2val:0xef0906fef820bf40
TEST_RR_OP(smaqa, x3, x11, x10, 0x0000000000000000, 0xf720faffaafdfcf8, 0xef0906fef820bf40, x4, 40, x12)

inst_6:
// rs1==x28, rs2==x8, rd==x6, rs1_b4_val == rs2_b4_val, rs1_b0_val == -3, rs1_b6_val == -33, rs2_b1_val == -33, rs1_b3_val == -1, rs1_b2_val == -86, rs2_b4_val == -3
// opcode: smaqa ; op1:x28; op2:x8; dest:x6; op1val:0xf7df06fdffaa05fd;  op2val:0xf60304fd203fdfc0
TEST_RR_OP(smaqa, x6, x28, x8, 0x0000000000000000, 0xf7df06fdffaa05fd, 0xf60304fd203fdfc0, x4, 48, x12)

inst_7:
// rs1==x25, rs2==x7, rd==x29, rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b0_val == -65, rs2_b3_val == -17, rs2_b6_val == 127, rs1_b0_val == rs2_b0_val, rs1_b4_val == 85, rs2_b7_val == 85, rs1_b7_val == 127
// opcode: smaqa ; op1:x25; op2:x7; dest:x29; op1val:0x7f071055f9effcbf;  op2val:0x557f043fef053fbf
TEST_RR_OP(smaqa, x29, x25, x7, 0x0000000000000000, 0x7f071055f9effcbf, 0x557f043fef053fbf, x4, 56, x12)

inst_8:
// rs1==x21, rs2==x28, rd==x9, rs1_b3_val == rs2_b3_val, rs2_b5_val == -3, rs1_b2_val > 0 and rs2_b2_val < 0, rs2_b0_val == -9, rs2_b3_val == 0, rs1_b7_val == -5, rs1_b4_val == 4
// opcode: smaqa ; op1:x21; op2:x28; dest:x9; op1val:0xfb05060400093ffa;  op2val:0xc006fdfc00f7f8f7
TEST_RR_OP(smaqa, x9, x21, x28, 0x0000000000000000, 0xfb05060400093ffa, 0xc006fdfc00f7f8f7, x4, 64, x12)

inst_9:
// rs1==x18, rs2==x26, rd==x15, rs1_b2_val == rs2_b2_val, rs2_b5_val == -2, rs1_b5_val == 8, rs1_b7_val == -128, rs2_b3_val == -1, rs2_b2_val == -86, rs1_b4_val == 16, rs2_b1_val == 0
// opcode: smaqa ; op1:x18; op2:x26; dest:x15; op1val:0x80070810faaa0307;  op2val:0xf6f9fefaffaa0005
TEST_RR_OP(smaqa, x15, x18, x26, 0x0000000000000000, 0x80070810faaa0307, 0xf6f9fefaffaa0005, x4, 72, x12)

inst_10:
// rs1==x24, rs2==x25, rd==x20, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b5_val == -3, rs1_b2_val == 2, rs2_b3_val == -33, rs2_b6_val == 0, rs2_b4_val == 4, rs1_b0_val == -86
// opcode: smaqa ; op1:x24; op2:x25; dest:x20; op1val:0x80fafd05aa0203aa;  op2val:0x4000fc04df3f0509
TEST_RR_OP(smaqa, x20, x24, x25, 0x0000000000000000, 0x80fafd05aa0203aa, 0x4000fc04df3f0509, x4, 80, x12)

inst_11:
// rs1==x2, rs2==x0, rd==x14, rs2_b7_val == -86, rs1_b2_val == 32, rs2_b0_val == -5, rs2_b2_val == 1, rs1_b1_val == -86, rs2_b6_val == -5, rs2_b4_val == -86, rs2_b3_val == 8, rs2_b1_val == 16, rs1_b0_val == 85, rs1_b4_val == 0
// opcode: smaqa ; op1:x2; op2:x0; dest:x14; op1val:0xf9f7f600aa20aa55;  op2val:0xaafbf9aa080110fb
TEST_RR_OP(smaqa, x14, x2, x0, 0x0000000000000000, 0xf9f7f600aa20aa55, 0xaafbf9aa080110fb, x4, 88, x12)

inst_12:
// rs1==x17, rs2==x11, rd==x1, rs2_b7_val == 127, rs2_b4_val == 1, rs1_b3_val == -128, rs1_b0_val == 4, rs2_b1_val == -17, rs2_b6_val == -128, rs1_b1_val == -128, rs1_b7_val == -3, rs2_b5_val == 85, rs1_b4_val == 2, rs2_b0_val == 85
// opcode: smaqa ; op1:x17; op2:x11; dest:x1; op1val:0xfd09050280fc8004;  op2val:0x7f805501fa09ef55
TEST_RR_OP(smaqa, x1, x17, x11, 0x0000000000000000, 0xfd09050280fc8004, 0x7f805501fa09ef55, x4, 96, x12)

inst_13:
// rs1==x3, rs2==x16, rd==x19, rs2_b7_val == -33, rs2_b5_val == 8, rs1_b0_val == 32, rs2_b0_val == 4, rs2_b3_val == 16, rs1_b7_val == -65, rs2_b1_val == 2
// opcode: smaqa ; op1:x3; op2:x16; dest:x19; op1val:0xbffcfb04fc073f20;  op2val:0xdf7f080910400204
TEST_RR_OP(smaqa, x19, x3, x16, 0x0000000000000000, 0xbffcfb04fc073f20, 0xdf7f080910400204, x4, 104, x12)
RVTEST_SIGBASE(x15,signature_x15_0)

inst_14:
// rs1==x9, rs2==x6, rd==x0, rs2_b7_val == -9, rs1_b0_val == -2, rs2_b0_val == 8, rs2_b2_val == -2, rs2_b4_val == -128
// opcode: smaqa ; op1:x9; op2:x6; dest:x0; op1val:0x6fc08fd3f20c0fe;  op2val:0xf7f8f880dffe0108
TEST_RR_OP(smaqa, x0, x9, x6, 0x0000000000000000, 0x6fc08fd3f20c0fe, 0xf7f8f880dffe0108, x15, 0, x20)

inst_15:
// rs1==x8, rs2==x3, rd==x10, rs2_b7_val == -5, rs1_b7_val == 0, rs2_b4_val == 85, rs1_b6_val == -128, rs2_b6_val == -1, rs2_b1_val == -1
// opcode: smaqa ; op1:x8; op2:x3; dest:x10; op1val:0x80fa3f07090708;  op2val:0xfbff55550509ff07
TEST_RR_OP(smaqa, x10, x8, x3, 0x0000000000000000, 0x80fa3f07090708, 0xfbff55550509ff07, x15, 8, x20)

inst_16:
// rs1==x12, rs2==x23, rd==x27, rs2_b7_val == -3, rs1_b5_val == 32, rs1_b6_val == 127, rs1_b0_val == 1, rs1_b1_val == -3, rs1_b7_val == 16
// opcode: smaqa ; op1:x12; op2:x23; dest:x27; op1val:0x107f20093f07fd01;  op2val:0xfd00fefaf9fa0305
TEST_RR_OP(smaqa, x27, x12, x23, 0x0000000000000000, 0x107f20093f07fd01, 0xfd00fefaf9fa0305, x15, 16, x20)

inst_17:
// rs1==x7, rs2==x19, rd==x24, rs2_b7_val == -2, rs2_b2_val == 16, rs1_b5_val == 0, rs2_b0_val == -1, rs1_b4_val == -33, rs2_b1_val == -128, rs2_b6_val == 1, rs1_b1_val == 0
// opcode: smaqa ; op1:x7; op2:x19; dest:x24; op1val:0x90100df030200f6;  op2val:0xfe0108fefc1080ff
TEST_RR_OP(smaqa, x24, x7, x19, 0x0000000000000000, 0x90100df030200f6, 0xfe0108fefc1080ff, x15, 24, x20)

inst_18:
// rs1==x16, rs2==x14, rd==x18, rs2_b7_val == 16, rs2_b1_val == 4, rs1_b6_val == -5, rs1_b4_val == -5
// opcode: smaqa ; op1:x16; op2:x14; dest:x18; op1val:0x5fb06fb0320fb04;  op2val:0x10c0fa04030504ff
TEST_RR_OP(smaqa, x18, x16, x14, 0x0000000000000000, 0x5fb06fb0320fb04, 0x10c0fa04030504ff, x15, 32, x20)

inst_19:
// rs1==x14, rs2==x9, rd==x2, rs2_b7_val == 8, rs1_b3_val == -65, rs1_b1_val == 85, rs2_b6_val == -3, rs1_b6_val == 16, rs1_b2_val == 85
// opcode: smaqa ; op1:x14; op2:x9; dest:x2; op1val:0x710f610bf5555f9;  op2val:0x8fd06c0dfaaff05
TEST_RR_OP(smaqa, x2, x14, x9, 0x0000000000000000, 0x710f610bf5555f9, 0x8fd06c0dfaaff05, x15, 40, x20)

inst_20:
// rs1==x19, rs2==x21, rd==x11, rs2_b7_val == 4, rs2_b6_val == -17, rs2_b3_val == 127, rs2_b5_val == 64, rs1_b4_val == -128
// opcode: smaqa ; op1:x19; op2:x21; dest:x11; op1val:0xf83f098000fc07c0;  op2val:0x4ef40c07f4006ff
TEST_RR_OP(smaqa, x11, x19, x21, 0x0000000000000000, 0xf83f098000fc07c0, 0x4ef40c07f4006ff, x15, 48, x20)

inst_21:
// rs1==x6, rs2==x17, rd==x8, rs2_b7_val == 2, rs1_b0_val == -17, rs2_b1_val == -86, rs1_b6_val == -17, rs1_b3_val == 8, rs1_b5_val == -86, rs2_b4_val == 16
// opcode: smaqa ; op1:x6; op2:x17; dest:x8; op1val:0xefaa55083f55ef;  op2val:0x2f6fe10c020aaf6
TEST_RR_OP(smaqa, x8, x6, x17, 0x0000000000000000, 0xefaa55083f55ef, 0x2f6fe10c020aaf6, x15, 56, x20)

inst_22:
// rs1==x30, rs2==x24, rd==x31, rs2_b7_val == 1, rs2_b5_val == 2, rs2_b1_val == 127, rs1_b3_val == 64, rs1_b2_val == 127
// opcode: smaqa ; op1:x30; op2:x24; dest:x31; op1val:0xefc0aa05407ffa03;  op2val:0x106023f40037f09
TEST_RR_OP(smaqa, x31, x30, x24, 0x0000000000000000, 0xefc0aa05407ffa03, 0x106023f40037f09, x15, 64, x20)

inst_23:
// rs1==x10, rs2==x12, rd==x21, rs2_b7_val == 0, rs1_b7_val == -1, rs2_b5_val == 16, rs1_b6_val == 0
// opcode: smaqa ; op1:x10; op2:x12; dest:x21; op1val:0xff00fdc00903fdfe;  op2val:0xfc10f6fcf8f6fc
TEST_RR_OP(smaqa, x21, x10, x12, 0x0000000000000000, 0xff00fdc00903fdfe, 0xfc10f6fcf8f6fc, x15, 72, x20)

inst_24:
// rs1==x23, rs2==x30, rd==x16, rs2_b7_val == -1, rs2_b0_val == 0, rs1_b6_val == 85, rs2_b4_val == 0
// opcode: smaqa ; op1:x23; op2:x30; dest:x16; op1val:0x5506090306c0fc;  op2val:0xff80fe00103f5500
TEST_RR_OP(smaqa, x16, x23, x30, 0x0000000000000000, 0x5506090306c0fc, 0xff80fe00103f5500, x15, 80, x20)

inst_25:
// rs1==x4, rs2==x29, rd==x12, rs2_b6_val == -86, rs2_b1_val == 8, rs2_b2_val == -17, rs1_b0_val == 0, rs2_b3_val == -9
// opcode: smaqa ; op1:x4; op2:x29; dest:x12; op1val:0x70980fb06f7f600;  op2val:0x1aafcf9f7ef083f
TEST_RR_OP(smaqa, x12, x4, x29, 0x0000000000000000, 0x70980fb06f7f600, 0x1aafcf9f7ef083f, x15, 88, x20)

inst_26:
// rs1==x31, rs2==x18, rd==x30, rs2_b6_val == 85, rs2_b3_val == -128, rs2_b1_val == 64
// opcode: smaqa ; op1:x31; op2:x18; dest:x30; op1val:0xbf3f03fbf8208003;  op2val:0x55551055800540f7
TEST_RR_OP(smaqa, x30, x31, x18, 0x0000000000000000, 0xbf3f03fbf8208003, 0x55551055800540f7, x15, 96, x20)

inst_27:
// rs1==x26, rs2==x13, rd==x4, rs2_b6_val == -65, rs2_b5_val == -5, rs1_b3_val == 2, rs1_b1_val == 1, rs1_b7_val == -33
// opcode: smaqa ; op1:x26; op2:x13; dest:x4; op1val:0xdfdfc00602030109;  op2val:0xffbffb0100ffbfdf
TEST_RR_OP(smaqa, x4, x26, x13, 0x0000000000000000, 0xdfdfc00602030109, 0xffbffb0100ffbfdf, x15, 104, x20)

inst_28:
// rs1==x5, rs2==x31, rd==x7, rs2_b6_val == -33, rs1_b2_val == -65, rs1_b4_val == 32, rs2_b3_val == -2, rs1_b6_val == 2
// opcode: smaqa ; op1:x5; op2:x31; dest:x7; op1val:0x1002ef2005bf20ef;  op2val:0x5df05fdfe03bfff
TEST_RR_OP(smaqa, x7, x5, x31, 0x0000000000000000, 0x1002ef2005bf20ef, 0x5df05fdfe03bfff, x15, 112, x20)

inst_29:
// rs1==x1, rs2==x27, rd==x28, rs2_b6_val == -9, rs2_b0_val == -17, rs1_b7_val == 1, rs1_b6_val == -65, rs2_b4_val == -65, rs2_b3_val == 2, rs2_b2_val == -3
// opcode: smaqa ; op1:x1; op2:x27; dest:x28; op1val:0x1bf0703fa7ff604;  op2val:0x80f7febf02fd10ef
TEST_RR_OP(smaqa, x28, x1, x27, 0x0000000000000000, 0x1bf0703fa7ff604, 0x80f7febf02fd10ef, x15, 120, x20)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x15, rs2==x4, rd==x25, rs1_b5_val == -2, rs2_b2_val == 8, rs1_b1_val == -17, rs2_b1_val == -9, rs1_b3_val == 4, rs2_b0_val == -86
// opcode: smaqa ; op1:x15; op2:x4; dest:x25; op1val:0x602fe80047fef40;  op2val:0xc001c0000008f7aa
TEST_RR_OP(smaqa, x25, x15, x4, 0x0000000000000000, 0x602fe80047fef40, 0xc001c0000008f7aa, x1, 0, x2)

inst_31:
// rs1==x29, rs2==x15, rd==x26, rs1_b5_val == 64, rs2_b2_val == 2, rs1_b4_val == 127, rs2_b1_val == -2, rs2_b6_val == 16, rs2_b3_val == 1
// opcode: smaqa ; op1:x29; op2:x15; dest:x26; op1val:0x6f8407f08060780;  op2val:0xaa1055060102fe3f
TEST_RR_OP(smaqa, x26, x29, x15, 0x0000000000000000, 0x6f8407f08060780, 0xaa1055060102fe3f, x1, 8, x2)

inst_32:
// rs1_b5_val == 4, rs1_b1_val == -2, rs2_b0_val == -128, rs2_b2_val == -128
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfec0047ffa02fe09;  op2val:0xfa04f6aa06800680
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xfec0047ffa02fe09, 0xfa04f6aa06800680, x1, 16, x2)

inst_33:
// rs1_b5_val == 2, rs2_b2_val == -65, rs1_b6_val == 8, rs1_b2_val == -2, rs2_b0_val == 127
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x7080207f9fefc00;  op2val:0xdfc006c0f7bfff7f
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x7080207f9fefc00, 0xdfc006c0f7bfff7f, x1, 24, x2)

inst_34:
// rs1_b5_val == 1, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x802001550206ef55;  op2val:0x40f880aa10fdf7aa
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x802001550206ef55, 0x40f880aa10fdf7aa, x1, 32, x2)

inst_35:
// rs1_b5_val == -1, rs2_b4_val == 64, rs1_b4_val == -2, rs1_b3_val == -9
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfd01fffef7fafb09;  op2val:0x5068040080202fb
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xfd01fffef7fafb09, 0x5068040080202fb, x1, 40, x2)

inst_36:
// rs1_b4_val == -86, rs2_b6_val == 64, rs2_b0_val == 16
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xef06f8aa023faac0;  op2val:0xfe40fc0301f71010
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xef06f8aa023faac0, 0xfe40fc0301f71010, x1, 48, x2)

inst_37:
// rs1_b4_val == -65, rs1_b3_val == 16, rs1_b1_val == 8
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x64010bf10fa0806;  op2val:0x20f9f6f802aa093f
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x64010bf10fa0806, 0x20f9f6f802aa093f, x1, 56, x2)

inst_38:
// rs1_b4_val == -17, rs1_b0_val == -9, rs2_b3_val == -5, rs2_b6_val == -2, rs1_b7_val == -86, rs1_b5_val == -33
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xaa08dfef03fdc0f7;  op2val:0x10fe40f6fb8005bf
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xaa08dfef03fdc0f7, 0x10fe40f6fb8005bf, x1, 64, x2)

inst_39:
// rs1_b4_val == 64, rs1_b7_val == 2
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x2f90640f807fc03;  op2val:0x10f603fcf90104
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x2f90640f807fc03, 0x10f603fcf90104, x1, 72, x2)

inst_40:
// rs1_b4_val == 1, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfb02f801fa3ffdfa;  op2val:0x30609090820f9f8
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xfb02f801fa3ffdfa, 0x30609090820f9f8, x1, 80, x2)

inst_41:
// rs1_b3_val == 85, rs1_b0_val == -33
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xf7fc09bf55fc01df;  op2val:0x6fdf6800903f8ef
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xf7fc09bf55fc01df, 0x6fdf6800903f8ef, x1, 88, x2)

inst_42:
// rs1_b3_val == -17, rs2_b3_val == 85, rs2_b4_val == -9
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x503ff05eff70603;  op2val:0xbf3ffcf755c07ffc
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x503ff05eff70603, 0xbf3ffcf755c07ffc, x1, 96, x2)

inst_43:
// rs1_b3_val == -5, rs1_b1_val == 64
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfbfe55fbfd4006;  op2val:0x87f06f75508f940
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xfbfe55fbfd4006, 0x87f06f75508f940, x1, 104, x2)

inst_44:
// rs1_b3_val == -3, rs2_b6_val == 2
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfcf9fa7ffd20f820;  op2val:0xfa0255c0fefa3ffb
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xfcf9fa7ffd20f820, 0xfa0255c0fefa3ffb, x1, 112, x2)

inst_45:
// rs1_b3_val == -2, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x54005aafefd20aa;  op2val:0x4c0fdfe03102006
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x54005aafefd20aa, 0x4c0fdfe03102006, x1, 120, x2)

inst_46:
// rs1_b3_val == 32, rs2_b2_val == -33, rs2_b5_val == -65, rs1_b6_val == 4
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xff0404df20effc08;  op2val:0x8005bf04ffdff9ef
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xff0404df20effc08, 0x8005bf04ffdff9ef, x1, 128, x2)

inst_47:
// rs1_b3_val == 1, rs2_b4_val == 8, rs1_b6_val == -2
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x5fe10fb0105c005;  op2val:0x3554008f7fc08c0
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x5fe10fb0105c005, 0x3554008f7fc08c0, x1, 136, x2)

inst_48:
// rs2_b3_val == -86, rs1_b2_val == 1
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x8007aa20f6018008;  op2val:0xbf01f9f6aaf65504
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x8007aa20f6018008, 0xbf01f9f6aaf65504, x1, 144, x2)

inst_49:
// rs2_b3_val == -65, rs2_b4_val == -33, rs1_b5_val == -9, rs1_b0_val == 127
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xf6f6f7effb02057f;  op2val:0x640fbdfbfdf1006
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xf6f6f7effb02057f, 0x640fbdfbfdf1006, x1, 152, x2)

inst_50:
// rs2_b3_val == -3, rs1_b2_val == 8
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfafc20100008f6fa;  op2val:0xfa0240f8fd093f7f
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xfafc20100008f6fa, 0xfa0240f8fd093f7f, x1, 160, x2)

inst_51:
// rs2_b3_val == 4, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x207f090203aa20fc;  op2val:0xc08008f8040300bf
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x207f090203aa20fc, 0xc08008f8040300bf, x1, 168, x2)

inst_52:
// rs2_b2_val == 127, rs1_b2_val == 64, rs2_b0_val == 2, rs2_b4_val == 127
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x3f09aaf909400901;  op2val:0xfbef3f7f107f1002
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x3f09aaf909400901, 0xfbef3f7f107f1002, x1, 176, x2)

inst_53:
// rs2_b2_val == -5, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfa5502fb3ff9fc20;  op2val:0x1aaf6f980fbf8f8
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xfa5502fb3ff9fc20, 0x1aaf6f980fbf8f8, x1, 184, x2)

inst_54:
// rs2_b2_val == 4, rs1_b2_val == -5, rs2_b5_val == 32, rs1_b1_val == -65
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x10602fd20fbbff7;  op2val:0x93f2055c004fcfa
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x10602fd20fbbff7, 0x93f2055c004fcfa, x1, 192, x2)

inst_55:
// rs2_b2_val == 0, rs1_b5_val == 127, rs1_b2_val == 4
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x57f7f05f7040040;  op2val:0x97fbffcfb00ef07
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x57f7f05f7040040, 0x97fbffcfb00ef07, x1, 200, x2)

inst_56:
// rs2_b1_val == -5, rs1_b6_val == -1, rs1_b5_val == 85
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x3fff5506fbfd0909;  op2val:0x880061080fdfb05
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x3fff5506fbfd0909, 0x880061080fdfb05, x1, 208, x2)

inst_57:
// rs2_b1_val == -3, rs1_b7_val == 85, rs1_b0_val == -5
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x55f780c009f905fb;  op2val:0x800010fe05effddf
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x55f780c009f905fb, 0x800010fe05effddf, x1, 216, x2)

inst_58:
// rs1_b2_val == -33, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfe7faafffadf04fb;  op2val:0x80306fd2020fbdf
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xfe7faafffadf04fb, 0x80306fd2020fbdf, x1, 224, x2)

inst_59:
// rs1_b2_val == 16, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfdc08040fb10fdf8;  op2val:0xf97f0680055510fc
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xfdc08040fb10fdf8, 0xf97f0680055510fc, x1, 232, x2)

inst_60:
// rs2_b0_val == -3, rs2_b5_val == 1
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x6fbf90980fd00ef;  op2val:0xaa00014040df07fd
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x6fbf90980fd00ef, 0xaa00014040df07fd, x1, 240, x2)

inst_61:
// rs1_b2_val == 0, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x5f90902200009f8;  op2val:0x2fcf80320207f00
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x5f90902200009f8, 0x2fcf80320207f00, x1, 248, x2)

inst_62:
// rs1_b2_val == -1, rs2_b6_val == 32
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xf6ff20103fff007f;  op2val:0x3f20c0070208df00
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xf6ff20103fff007f, 0x3f20c0070208df00, x1, 256, x2)

inst_63:
// rs2_b0_val == 32, rs1_b6_val == -3
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x3fd00f60204fdfe;  op2val:0xfb3ffaf7f9400620
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x3fd00f60204fdfe, 0xfb3ffaf7f9400620, x1, 264, x2)

inst_64:
// rs1_b1_val == 127, rs2_b0_val == 1
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xf60108fbbfdf7f00;  op2val:0x5503ff01f90001
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xf60108fbbfdf7f00, 0x5503ff01f90001, x1, 272, x2)

inst_65:
// rs1_b1_val == -33, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xf7f906800320df09;  op2val:0xbf07fc02fa034005
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xf7f906800320df09, 0xbf07fc02fa034005, x1, 280, x2)

inst_66:
// rs1_b1_val == -9, rs2_b4_val == -17
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x2dfff803ff6f7ef;  op2val:0x5fa01ef0740bf40
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x2dfff803ff6f7ef, 0x5fa01ef0740bf40, x1, 288, x2)

inst_67:
// rs2_b6_val == 8, rs1_b0_val == 16, rs1_b1_val == 16
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xef0307fbdf001010;  op2val:0x30840df05faef10
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xef0307fbdf001010, 0x30840df05faef10, x1, 296, x2)

inst_68:
// rs1_b1_val == 2, rs2_b5_val == -33
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xbfdf0510553f02f9;  op2val:0xaadfdff604f87ffe
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xbfdf0510553f02f9, 0xaadfdff604f87ffe, x1, 304, x2)

inst_69:
// rs1_b7_val == 4, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x4020502203ffc08;  op2val:0x03f8553fef027f
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x4020502203ffc08, 0x03f8553fef027f, x1, 312, x2)

inst_70:
// rs1_b6_val == -86, rs2_b5_val == 0
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xc0aaf70820010204;  op2val:0x3f8000f809fff6fd
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xc0aaf70820010204, 0x3f8000f809fff6fd, x1, 320, x2)

inst_71:
// rs1_b7_val == 8, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x8df03ef10ff0120;  op2val:0x404020f606bf03ff
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x8df03ef10ff0120, 0x404020f606bf03ff, x1, 328, x2)

inst_72:
// rs2_b5_val == -1, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfc00eff704f98080;  op2val:0x807ff0100f720fe
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xfc00eff704f98080, 0x807ff0100f720fe, x1, 336, x2)

inst_73:
// rs1_b0_val == 2, rs2_b4_val == -5
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x800708dffa087f02;  op2val:0x4aa10fb0803f805
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x800708dffa087f02, 0x4aa10fb0803f805, x1, 344, x2)

inst_74:
// rs1_b0_val == -1, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x94008fdf63f04ff;  op2val:0x80fbfffddf07ffbf
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x94008fdf63f04ff, 0x80fbfffddf07ffbf, x1, 352, x2)

inst_75:
// rs1_b7_val == 64, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x4001c00409f60806;  op2val:0x3f08fcf7aafc05f8
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x4001c00409f60806, 0x3f08fcf7aafc05f8, x1, 360, x2)

inst_76:
// rs1_b5_val == -65, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfabfbff7f8f609fb;  op2val:0xff080980fec04003
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xfabfbff7f8f609fb, 0xff080980fec04003, x1, 368, x2)

inst_77:
// rs2_b4_val == 32, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x3010007dfff4002;  op2val:0xef081020fbf80809
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x3010007dfff4002, 0xef081020fbf80809, x1, 376, x2)

inst_78:
// rs2_b5_val == 127, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x20f900f8fe5580f9;  op2val:0x17f7f3f00060440
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x20f900f8fe5580f9, 0x17f7f3f00060440, x1, 384, x2)

inst_79:
// rs1_b1_val == -1, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x440faefbf40fff7;  op2val:0xfe09fd4005fb8020
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x440faefbf40fff7, 0xfe09fd4005fb8020, x1, 392, x2)

inst_80:
// rs2_b5_val == -9, 
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x440f7fc10feef05;  op2val:0xfd04f7aafbdf3f06
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x440f7fc10feef05, 0xfd04f7aafbdf3f06, x1, 400, x2)

inst_81:
// rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b3_val == 127, rs1_b1_val < 0 and rs2_b1_val > 0, rs2_b0_val == 64, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b7_val == -2, rs2_b3_val == 32, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == -5, rs2_b2_val == 85, rs1_b5_val == -17, rs2_b5_val == -86, rs2_b1_val == 1, rs2_b7_val == -128, rs1_b3_val > 0 and rs2_b3_val > 0
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfef6eff67f80fb05;  op2val:0x8009aa0620550140
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xfef6eff67f80fb05, 0x8009aa0620550140, x1, 408, x2)

inst_82:
// rs2_b7_val == -86, rs1_b2_val == 32, rs2_b0_val == -5, rs2_b2_val == 1, rs1_b1_val == -86, rs2_b6_val == -5, rs2_b4_val == -86, rs2_b3_val == 8, rs2_b1_val == 16, rs1_b0_val == 85, rs1_b4_val == 0
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0xf9f7f600aa20aa55;  op2val:0xaafbf9aa080110fb
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0xf9f7f600aa20aa55, 0xaafbf9aa080110fb, x1, 416, x2)

inst_83:
// rs2_b7_val == -9, rs1_b0_val == -2, rs2_b0_val == 8, rs2_b2_val == -2, rs2_b4_val == -128
// opcode: smaqa ; op1:x30; op2:x29; dest:x31; op1val:0x6fc08fd3f20c0fe;  op2val:0xf7f8f880dffe0108
TEST_RR_OP(smaqa, x31, x30, x29, 0x0000000000000000, 0x6fc08fd3f20c0fe, 0xf7f8f880dffe0108, x1, 424, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x15_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 54*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
