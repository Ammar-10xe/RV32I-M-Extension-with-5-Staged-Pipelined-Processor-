
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ksllw instruction of the RISC-V RV64PZicsr extension for the ksllw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ksllw)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x18, rs2==x27, rd==x18, rs2_val == 21, 
// opcode: ksllw ; op1:x18; op2:x27; dest:x18; op1val:0x000006fffffffc;  op2val:0x15
TEST_PKRR_OP(ksllw, x18, x18, x27, 0x0000000000000000, 0x000006fffffffc, 0x15, x18, x2, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x18, rd==x19, rs2_val == 15, rs1_w0_val == -2049, rs1_w1_val == 16384
// opcode: ksllw ; op1:x28; op2:x18; dest:x19; op1val:0x004000fffff7ff;  op2val:0xf
TEST_PKRR_OP(ksllw, x19, x28, x18, 0x0000000000000000, 0x004000fffff7ff, 0xf, x28, x2, 16, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x23, rs2==x23, rd==x24, rs2_val == 23, rs1_w1_val == -17, rs1_w0_val == -2
// opcode: ksllw ; op1:x23; op2:x23; dest:x24; op1val:0xffffffeffffffffe;  op2val:0x17
TEST_PKRR_OP(ksllw, x24, x23, x23, 0x0000000000000000, 0xffffffeffffffffe, 0x17, x23, x2, 32, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x11, rs2==x11, rd==x11, rs2_val == 27, rs1_w0_val == 8192
// opcode: ksllw ; op1:x11; op2:x11; dest:x11; op1val:0x00000700002000;  op2val:0x1b
TEST_PKRR_OP(ksllw, x11, x11, x11, 0x0000000000000000, 0x00000700002000, 0x1b, x11, x2, 48, x3)

inst_4:
// rs2 == rd != rs1, rs1==x31, rs2==x29, rd==x29, rs2_val == 29, rs1_w1_val == -5, rs1_w0_val == 4096
// opcode: ksllw ; op1:x31; op2:x29; dest:x29; op1val:0xfffffffb00001000;  op2val:0x1d
TEST_PKRR_OP(ksllw, x29, x31, x29, 0x0000000000000000, 0xfffffffb00001000, 0x1d, x31, x2, 64, x3)

inst_5:
// rs1==x30, rs2==x21, rd==x31, rs2_val == 30, rs1_w1_val == 1073741824
// opcode: ksllw ; op1:x30; op2:x21; dest:x31; op1val:0x40000000fffffffe;  op2val:0x1e
TEST_PKRR_OP(ksllw, x31, x30, x21, 0x0000000000000000, 0x40000000fffffffe, 0x1e, x30, x2, 80, x3)

inst_6:
// rs1==x19, rs2==x30, rd==x17, rs2_val == 16, rs1_w1_val == 32768
// opcode: ksllw ; op1:x19; op2:x30; dest:x17; op1val:0x0080003fffffff;  op2val:0x10
TEST_PKRR_OP(ksllw, x17, x19, x30, 0x0000000000000000, 0x0080003fffffff, 0x10, x19, x2, 96, x3)

inst_7:
// rs1==x22, rs2==x16, rd==x14, rs2_val == 8, rs1_w0_val == -129, rs1_w1_val == 16777216
// opcode: ksllw ; op1:x22; op2:x16; dest:x14; op1val:0x1000000ffffff7f;  op2val:0x8
TEST_PKRR_OP(ksllw, x14, x22, x16, 0x0000000000000000, 0x1000000ffffff7f, 0x8, x22, x2, 112, x3)

inst_8:
// rs1==x12, rs2==x6, rd==x25, rs2_val == 4, rs1_w0_val == 536870912, rs1_w1_val == -33
// opcode: ksllw ; op1:x12; op2:x6; dest:x25; op1val:0xffffffdf20000000;  op2val:0x4
TEST_PKRR_OP(ksllw, x25, x12, x6, 0x0000000000000000, 0xffffffdf20000000, 0x4, x12, x2, 128, x3)

inst_9:
// rs1==x24, rs2==x12, rd==x27, rs2_val == 2, rs1_w1_val == 131072, rs1_w0_val == -67108865
// opcode: ksllw ; op1:x24; op2:x12; dest:x27; op1val:0x020000fbffffff;  op2val:0x2
TEST_PKRR_OP(ksllw, x27, x24, x12, 0x0000000000000000, 0x020000fbffffff, 0x2, x24, x2, 144, x3)

inst_10:
// rs1==x25, rs2==x7, rd==x26, rs2_val == 1, rs1_w1_val == 268435456, rs1_w0_val == -9
// opcode: ksllw ; op1:x25; op2:x7; dest:x26; op1val:0x10000000fffffff7;  op2val:0x1
TEST_PKRR_OP(ksllw, x26, x25, x7, 0x0000000000000000, 0x10000000fffffff7, 0x1, x25, x2, 160, x3)

inst_11:
// rs1==x1, rs2==x5, rd==x7, rs1_w1_val == -1431655766, rs1_w0_val == 2097152
// opcode: ksllw ; op1:x1; op2:x5; dest:x7; op1val:0xaaaaaaaa00200000;  op2val:0xe
TEST_PKRR_OP(ksllw, x7, x1, x5, 0x0000000000000000, 0xaaaaaaaa00200000, 0xe, x1, x2, 176, x3)

inst_12:
// rs1==x5, rs2==x22, rd==x15, rs1_w1_val == 1431655765, rs1_w0_val == -1048577
// opcode: ksllw ; op1:x5; op2:x22; dest:x15; op1val:0x55555555ffefffff;  op2val:0xf
TEST_PKRR_OP(ksllw, x15, x5, x22, 0x0000000000000000, 0x55555555ffefffff, 0xf, x5, x2, 192, x3)

inst_13:
// rs1==x8, rs2==x9, rd==x4, rs1_w1_val == 2147483647, rs1_w0_val == 32768
// opcode: ksllw ; op1:x8; op2:x9; dest:x4; op1val:0x7fffffff00008000;  op2val:0x13
TEST_PKRR_OP(ksllw, x4, x8, x9, 0x0000000000000000, 0x7fffffff00008000, 0x13, x8, x2, 208, x3)

inst_14:
// rs1==x21, rs2==x14, rd==x13, rs1_w1_val == -1073741825, rs1_w0_val == 256
// opcode: ksllw ; op1:x21; op2:x14; dest:x13; op1val:0xbfffffff00000100;  op2val:0x13
TEST_PKRR_OP(ksllw, x13, x21, x14, 0x0000000000000000, 0xbfffffff00000100, 0x13, x21, x2, 224, x12)
RVTEST_SIGBASE(x11,signature_x11_0)

inst_15:
// rs1==x15, rs2==x1, rd==x16, rs1_w1_val == -536870913, rs1_w0_val == -1073741825
// opcode: ksllw ; op1:x15; op2:x1; dest:x16; op1val:0xdfffffffbfffffff;  op2val:0x10
TEST_PKRR_OP(ksllw, x16, x15, x1, 0x0000000000000000, 0xdfffffffbfffffff, 0x10, x15, x11, 0, x12)

inst_16:
// rs1==x6, rs2==x10, rd==x5, rs1_w1_val == -268435457, 
// opcode: ksllw ; op1:x6; op2:x10; dest:x5; op1val:0xefffffff00000007;  op2val:0x1
TEST_PKRR_OP(ksllw, x5, x6, x10, 0x0000000000000000, 0xefffffff00000007, 0x1, x6, x11, 16, x12)

inst_17:
// rs1==x16, rs2==x13, rd==x8, rs1_w1_val == -134217729, 
// opcode: ksllw ; op1:x16; op2:x13; dest:x8; op1val:0xf7fffffffffffff6;  op2val:0x1
TEST_PKRR_OP(ksllw, x8, x16, x13, 0x0000000000000000, 0xf7fffffffffffff6, 0x1, x16, x11, 32, x12)

inst_18:
// rs1==x2, rs2==x4, rd==x10, rs1_w1_val == -67108865, rs1_w0_val == 262144
// opcode: ksllw ; op1:x2; op2:x4; dest:x10; op1val:0xfbffffff00040000;  op2val:0x1e
TEST_PKRR_OP(ksllw, x10, x2, x4, 0x0000000000000000, 0xfbffffff00040000, 0x1e, x2, x11, 48, x12)

inst_19:
// rs1==x4, rs2==x8, rd==x9, rs1_w1_val == -33554433, rs1_w0_val == 4194304
// opcode: ksllw ; op1:x4; op2:x8; dest:x9; op1val:0xfdffffff00400000;  op2val:0xc
TEST_PKRR_OP(ksllw, x9, x4, x8, 0x0000000000000000, 0xfdffffff00400000, 0xc, x4, x11, 64, x12)

inst_20:
// rs1==x13, rs2==x25, rd==x30, rs1_w1_val == -16777217, rs1_w0_val == 1073741824
// opcode: ksllw ; op1:x13; op2:x25; dest:x30; op1val:0xfeffffff40000000;  op2val:0xd
TEST_PKRR_OP(ksllw, x30, x13, x25, 0x0000000000000000, 0xfeffffff40000000, 0xd, x13, x11, 80, x12)

inst_21:
// rs1==x26, rs2==x31, rd==x2, rs1_w1_val == -8388609, rs1_w0_val == -32769
// opcode: ksllw ; op1:x26; op2:x31; dest:x2; op1val:0xff7fffffffff7fff;  op2val:0xd
TEST_PKRR_OP(ksllw, x2, x26, x31, 0x0000000000000000, 0xff7fffffffff7fff, 0xd, x26, x11, 96, x12)

inst_22:
// rs1==x14, rs2==x2, rd==x28, rs1_w1_val == -4194305, rs1_w0_val == -4194305
// opcode: ksllw ; op1:x14; op2:x2; dest:x28; op1val:0xffbfffffffbfffff;  op2val:0x1d
TEST_PKRR_OP(ksllw, x28, x14, x2, 0x0000000000000000, 0xffbfffffffbfffff, 0x1d, x14, x11, 112, x12)

inst_23:
// rs1==x29, rs2==x3, rd==x21, rs1_w1_val == -2097153, rs1_w0_val == -2147483648
// opcode: ksllw ; op1:x29; op2:x3; dest:x21; op1val:0xffdfffff80000000;  op2val:0xe
TEST_PKRR_OP(ksllw, x21, x29, x3, 0x0000000000000000, 0xffdfffff80000000, 0xe, x29, x11, 128, x12)

inst_24:
// rs1==x3, rs2==x24, rd==x22, rs1_w1_val == -1048577, rs1_w0_val == 1048576
// opcode: ksllw ; op1:x3; op2:x24; dest:x22; op1val:0xffefffff00100000;  op2val:0xd
TEST_PKRR_OP(ksllw, x22, x3, x24, 0x0000000000000000, 0xffefffff00100000, 0xd, x3, x11, 144, x12)

inst_25:
// rs1==x7, rs2==x28, rd==x3, rs1_w1_val == -524289, 
// opcode: ksllw ; op1:x7; op2:x28; dest:x3; op1val:0xfff7ffff00000003;  op2val:0x3
TEST_PKRR_OP(ksllw, x3, x7, x28, 0x0000000000000000, 0xfff7ffff00000003, 0x3, x7, x11, 160, x12)

inst_26:
// rs1==x9, rs2==x17, rd==x23, rs1_w1_val == -262145, rs1_w0_val == -1431655766
// opcode: ksllw ; op1:x9; op2:x17; dest:x23; op1val:0xfffbffffaaaaaaaa;  op2val:0x11
TEST_PKRR_OP(ksllw, x23, x9, x17, 0x0000000000000000, 0xfffbffffaaaaaaaa, 0x11, x9, x11, 176, x12)

inst_27:
// rs1==x27, rs2==x19, rd==x20, rs1_w1_val == -131073, rs1_w0_val == -134217729
// opcode: ksllw ; op1:x27; op2:x19; dest:x20; op1val:0xfffdfffff7ffffff;  op2val:0x1b
TEST_PKRR_OP(ksllw, x20, x27, x19, 0x0000000000000000, 0xfffdfffff7ffffff, 0x1b, x27, x11, 192, x12)
RVTEST_SIGBASE(x2,signature_x2_2)

inst_28:
// rs1==x20, rs2==x0, rd==x6, rs1_w1_val == -65537, rs1_w0_val == 524288
// opcode: ksllw ; op1:x20; op2:x0; dest:x6; op1val:0xfffeffff00080000;  op2val:0x0
TEST_PKRR_OP(ksllw, x6, x20, x0, 0x0000000000000000, 0xfffeffff00080000, 0x0, x20, x2, 0, x3)

inst_29:
// rs1==x10, rs2==x20, rd==x0, rs1_w1_val == -32769, 
// opcode: ksllw ; op1:x10; op2:x20; dest:x0; op1val:0xffff7fff00080000;  op2val:0x1f
TEST_PKRR_OP(ksllw, x0, x10, x20, 0x0000000000000000, 0xffff7fff00080000, 0x1f, x10, x2, 16, x3)

inst_30:
// rs1==x0, rs2==x26, rd==x1, rs1_w1_val == -16385, rs1_w0_val == -513
// opcode: ksllw ; op1:x0; op2:x26; dest:x1; op1val:0xffffbffffffffdff;  op2val:0x17
TEST_PKRR_OP(ksllw, x1, x0, x26, 0x0000000000000000, 0xffffbffffffffdff, 0x17, x0, x2, 32, x3)

inst_31:
// rs1==x17, rs2==x15, rd==x12, rs1_w1_val == -8193, rs1_w0_val == -257
// opcode: ksllw ; op1:x17; op2:x15; dest:x12; op1val:0xffffdffffffffeff;  op2val:0x0
TEST_PKRR_OP(ksllw, x12, x17, x15, 0x0000000000000000, 0xffffdffffffffeff, 0x0, x17, x2, 48, x3)

inst_32:
// rs1_w1_val == -4097, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00040000;  op2val:0x7
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xffffefff00040000, 0x7, x30, x2, 64, x3)

inst_33:
// rs1_w1_val == -2049, rs1_w0_val == 4
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000004;  op2val:0x9
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000004, 0x9, x30, x2, 80, x3)

inst_34:
// rs1_w1_val == -1025, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00002000;  op2val:0x6
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xfffffbff00002000, 0x6, x30, x2, 96, x3)

inst_35:
// rs1_w1_val == -513, rs1_w0_val == -16385
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffbfff;  op2val:0x1f
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffbfff, 0x1f, x30, x2, 112, x3)

inst_36:
// rs1_w1_val == -257, rs1_w0_val == -268435457
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffefffffff;  op2val:0x15
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xfffffeffefffffff, 0x15, x30, x2, 128, x3)

inst_37:
// rs1_w1_val == -129, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffffff8;  op2val:0xf
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffff8, 0xf, x30, x2, 144, x3)

inst_38:
// rs1_w1_val == -65, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000006;  op2val:0xd
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000006, 0xd, x30, x2, 160, x3)

inst_39:
// rs1_w1_val == -9, rs1_w0_val == 1431655765
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff755555555;  op2val:0x2
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xfffffff755555555, 0x2, x30, x2, 176, x3)

inst_40:
// rs1_w1_val == -3, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000009;  op2val:0x1
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000009, 0x1, x30, x2, 192, x3)

inst_41:
// rs1_w1_val == -2, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffffffc;  op2val:0xe
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xfffffffefffffffc, 0xe, x30, x2, 208, x3)

inst_42:
// rs1_w1_val == -2147483648, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000004;  op2val:0x13
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x8000000000000004, 0x13, x30, x2, 224, x3)

inst_43:
// rs1_w1_val == 536870912, rs1_w0_val == -65
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffffffbf;  op2val:0x1b
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x20000000ffffffbf, 0x1b, x30, x2, 240, x3)

inst_44:
// rs1_w1_val == 134217728, rs1_w0_val == 8
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000008;  op2val:0xd
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x800000000000008, 0xd, x30, x2, 256, x3)

inst_45:
// rs1_w1_val == 67108864, rs1_w0_val == 268435456
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x400000010000000;  op2val:0x3
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x400000010000000, 0x3, x30, x2, 272, x3)

inst_46:
// rs1_w0_val == 65536, rs1_w1_val == 512
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x00020000010000;  op2val:0x9
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x00020000010000, 0x9, x30, x2, 288, x3)

inst_47:
// rs1_w0_val == 16384, rs1_w1_val == 2097152
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x20000000004000;  op2val:0x13
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x20000000004000, 0x13, x30, x2, 304, x3)

inst_48:
// rs1_w0_val == 2048, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000800;  op2val:0x17
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000800, 0x17, x30, x2, 320, x3)

inst_49:
// rs1_w0_val == 1024, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000400;  op2val:0x11
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000400, 0x11, x30, x2, 336, x3)

inst_50:
// rs1_w0_val == 512, rs1_w1_val == 16
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000200;  op2val:0xf
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x00001000000200, 0xf, x30, x2, 352, x3)

inst_51:
// rs1_w0_val == 128, rs1_w1_val == 33554432
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000080;  op2val:0x6
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x200000000000080, 0x6, x30, x2, 368, x3)

inst_52:
// rs1_w0_val == 64, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000040;  op2val:0x12
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x00001000000040, 0x12, x30, x2, 384, x3)

inst_53:
// rs1_w0_val == 32, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000020;  op2val:0xd
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xfffffff700000020, 0xd, x30, x2, 400, x3)

inst_54:
// rs1_w0_val == 16, rs1_w1_val == 8388608
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000010;  op2val:0x0
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x80000000000010, 0x0, x30, x2, 416, x3)

inst_55:
// rs1_w0_val == 2, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000002;  op2val:0x1
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xfffffff700000002, 0x1, x30, x2, 432, x3)

inst_56:
// rs1_w0_val == 1, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000001;  op2val:0x8
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000001, 0x8, x30, x2, 448, x3)

inst_57:
// rs1_w0_val == 0, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000000;  op2val:0x13
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000000, 0x13, x30, x2, 464, x3)

inst_58:
// rs1_w0_val == -1, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6ffffffff;  op2val:0x2
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xfffffff6ffffffff, 0x2, x30, x2, 480, x3)

inst_59:
// rs2_val == 10, rs1_w1_val == 262144, rs1_w0_val == -262145
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffbffff;  op2val:0xa
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x040000fffbffff, 0xa, x30, x2, 496, x3)

inst_60:
// rs1_w1_val == 4194304, rs1_w0_val == -2097153
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x400000ffdfffff;  op2val:0xe
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x400000ffdfffff, 0xe, x30, x2, 512, x3)

inst_61:
// rs1_w1_val == 1048576, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000004;  op2val:0xb
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x10000000000004, 0xb, x30, x2, 528, x3)

inst_62:
// rs1_w1_val == 524288, rs1_w0_val == -524289
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x080000fff7ffff;  op2val:0x15
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x080000fff7ffff, 0x15, x30, x2, 544, x3)

inst_63:
// rs1_w1_val == 65536, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000000;  op2val:0x8
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x01000000000000, 0x8, x30, x2, 560, x3)

inst_64:
// rs1_w1_val == 8192, rs1_w0_val == -131073
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffdffff;  op2val:0xe
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x002000fffdffff, 0xe, x30, x2, 576, x3)

inst_65:
// rs1_w1_val == 4096, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffbfffff;  op2val:0x1e
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x001000ffbfffff, 0x1e, x30, x2, 592, x3)

inst_66:
// rs1_w1_val == 2048, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffdfffff;  op2val:0x17
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x000800ffdfffff, 0x17, x30, x2, 608, x3)

inst_67:
// rs1_w1_val == 1024, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000010;  op2val:0x5
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x00040000000010, 0x5, x30, x2, 624, x3)

inst_68:
// rs1_w1_val == 256, rs1_w0_val == -3
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x000100fffffffd;  op2val:0x0
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x000100fffffffd, 0x0, x30, x2, 640, x3)

inst_69:
// rs1_w1_val == 128, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x000080fffffdff;  op2val:0x17
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x000080fffffdff, 0x17, x30, x2, 656, x3)

inst_70:
// rs1_w1_val == 64, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x00004000200000;  op2val:0x12
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x00004000200000, 0x12, x30, x2, 672, x3)

inst_71:
// rs1_w1_val == 32, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x00002000002000;  op2val:0x1f
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x00002000002000, 0x1f, x30, x2, 688, x3)

inst_72:
// rs1_w1_val == 8, rs1_w0_val == -1025
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffffbff;  op2val:0x1
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x000008fffffbff, 0x1, x30, x2, 704, x3)

inst_73:
// rs1_w1_val == 4, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x00000400080000;  op2val:0x1
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x00000400080000, 0x1, x30, x2, 720, x3)

inst_74:
// rs1_w1_val == 2, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000020;  op2val:0x10
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x00000200000020, 0x10, x30, x2, 736, x3)

inst_75:
// rs1_w1_val == 1, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x00000100008000;  op2val:0x0
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x00000100008000, 0x0, x30, x2, 752, x3)

inst_76:
// rs1_w1_val == 0, rs1_w0_val == 134217728
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x00000008000000;  op2val:0x0
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x00000008000000, 0x0, x30, x2, 768, x3)

inst_77:
// rs1_w1_val == -1, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000008;  op2val:0x4
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xffffffff00000008, 0x4, x30, x2, 784, x3)

inst_78:
// rs1_w0_val == 2147483647, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa7fffffff;  op2val:0x1e
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xfffffffa7fffffff, 0x1e, x30, x2, 800, x3)

inst_79:
// rs1_w0_val == -65537, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffeffff;  op2val:0x17
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x40000000fffeffff, 0x17, x30, x2, 816, x3)

inst_80:
// rs1_w0_val == -8388609, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x000400ff7fffff;  op2val:0x1
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x000400ff7fffff, 0x1, x30, x2, 832, x3)

inst_81:
// rs1_w0_val == -8193, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffffdfff;  op2val:0x1d
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x000010ffffdfff, 0x1d, x30, x2, 848, x3)

inst_82:
// rs1_w0_val == -4097, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffffefff;  op2val:0xb
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x000040ffffefff, 0xb, x30, x2, 864, x3)

inst_83:
// rs1_w0_val == -33, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffffffdf;  op2val:0x8
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x004000ffffffdf, 0x8, x30, x2, 880, x3)

inst_84:
// rs1_w0_val == -17, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffffef;  op2val:0x12
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffffef, 0x12, x30, x2, 896, x3)

inst_85:
// rs1_w0_val == -5, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffffb;  op2val:0x17
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffffb, 0x17, x30, x2, 912, x3)

inst_86:
// rs1_w0_val == -536870913, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffdfffffff;  op2val:0x1b
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xffffdfffdfffffff, 0x1b, x30, x2, 928, x3)

inst_87:
// rs1_w0_val == 67108864, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff04000000;  op2val:0x1f
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xfffbffff04000000, 0x1f, x30, x2, 944, x3)

inst_88:
// rs1_w0_val == -33554433, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x800000fdffffff;  op2val:0x1
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x800000fdffffff, 0x1, x30, x2, 960, x3)

inst_89:
// rs1_w0_val == 33554432, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff02000000;  op2val:0x1e
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xfffffbff02000000, 0x1e, x30, x2, 976, x3)

inst_90:
// rs1_w0_val == -16777217, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x000800feffffff;  op2val:0x15
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x000800feffffff, 0x15, x30, x2, 992, x3)

inst_91:
// rs1_w0_val == 16777216, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0x40000001000000;  op2val:0xc
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0x40000001000000, 0xc, x30, x2, 1008, x3)

inst_92:
// rs1_w0_val == 8388608, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00800000;  op2val:0xa
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xffefffff00800000, 0xa, x30, x2, 1024, x3)

inst_93:
// rs1_w0_val == 131072, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00020000;  op2val:0xc
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xfffeffff00020000, 0xc, x30, x2, 1040, x3)

inst_94:
// rs2_val == 23, rs1_w1_val == -17, rs1_w0_val == -2
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffffffe;  op2val:0x17
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xffffffeffffffffe, 0x17, x30, x2, 1056, x3)

inst_95:
// rs1_w1_val == -32769, 
// opcode: ksllw ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00080000;  op2val:0x1f
TEST_PKRR_OP(ksllw, x31, x30, x29, 0x0000000000000000, 0xffff7fff00080000, 0x1f, x30, x2, 1072, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x11_0:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x2_2:
    .fill 136*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
