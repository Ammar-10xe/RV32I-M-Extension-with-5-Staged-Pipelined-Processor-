
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the crsa32 instruction of the RISC-V RV64PZicsr extension for the crsa32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",crsa32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x29, rs2==x13, rd==x29, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs2_w1_val == -4097, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w1_val == -513, rs2_w0_val == -1073741825
// opcode: crsa32 ; op1:x29; op2:x13; dest:x29; op1val:0xfffffdff80000000;  op2val:0xffffefffbfffffff
TEST_RR_OP(crsa32, x29, x29, x13, 0x0000000000000000, 0xfffffdff80000000, 0xffffefffbfffffff, x1, 0, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x21, rs2==x22, rd==x15, rs1_w1_val == rs2_w1_val, rs1_w1_val == 2097152, rs1_w0_val == 1048576, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w1_val == 2097152, rs2_w0_val == -4194305
// opcode: crsa32 ; op1:x21; op2:x22; dest:x15; op1val:0x20000000100000;  op2val:0x200000ffbfffff
TEST_RR_OP(crsa32, x15, x21, x22, 0x0000000000000000, 0x20000000100000, 0x200000ffbfffff, x1, 8, x2)

inst_2:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x25, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == 2097152, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == -131073, rs2_w0_val == 1048576
// opcode: crsa32 ; op1:x30; op2:x30; dest:x25; op1val:0xfffdffff00200000;  op2val:0x00000300100000
TEST_RR_OP(crsa32, x25, x30, x30, 0x0000000000000000, 0xfffdffff00200000, 0x00000300100000, x1, 16, x2)

inst_3:
// rs1 == rs2 == rd, rs1==x8, rs2==x8, rd==x8, rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w0_val == -33554433, rs2_w1_val == -2049, rs1_w1_val == 2147483647
// opcode: crsa32 ; op1:x8; op2:x8; dest:x8; op1val:0x7ffffffffffffff8;  op2val:0xfffff7fffdffffff
TEST_RR_OP(crsa32, x8, x8, x8, 0x0000000000000000, 0x7ffffffffffffff8, 0xfffff7fffdffffff, x1, 24, x2)

inst_4:
// rs2 == rd != rs1, rs1==x31, rs2==x5, rd==x5, rs1_w0_val == rs2_w0_val, rs2_w0_val == -5, rs2_w1_val == 32, rs1_w1_val == 131072, rs1_w0_val == -5
// opcode: crsa32 ; op1:x31; op2:x5; dest:x5; op1val:0x020000fffffffb;  op2val:0x000020fffffffb
TEST_RR_OP(crsa32, x5, x31, x5, 0x0000000000000000, 0x020000fffffffb, 0x000020fffffffb, x1, 32, x2)

inst_5:
// rs1==x20, rs2==x21, rd==x22, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w0_val == 256, rs1_w1_val == -33554433, rs2_w1_val == 65536, rs1_w0_val == -4097
// opcode: crsa32 ; op1:x20; op2:x21; dest:x22; op1val:0xfdffffffffffefff;  op2val:0x01000000000100
TEST_RR_OP(crsa32, x22, x20, x21, 0x0000000000000000, 0xfdffffffffffefff, 0x01000000000100, x1, 40, x2)

inst_6:
// rs1==x15, rs2==x29, rd==x10, rs2_w1_val == -1431655766, rs2_w0_val == -257, rs1_w0_val == -257
// opcode: crsa32 ; op1:x15; op2:x29; dest:x10; op1val:0xfffffffcfffffeff;  op2val:0xaaaaaaaafffffeff
TEST_RR_OP(crsa32, x10, x15, x29, 0x0000000000000000, 0xfffffffcfffffeff, 0xaaaaaaaafffffeff, x1, 48, x2)

inst_7:
// rs1==x27, rs2==x3, rd==x17, rs2_w1_val == 1431655765, rs1_w0_val == 33554432, rs1_w1_val == 8388608
// opcode: crsa32 ; op1:x27; op2:x3; dest:x17; op1val:0x80000002000000;  op2val:0x5555555500000100
TEST_RR_OP(crsa32, x17, x27, x3, 0x0000000000000000, 0x80000002000000, 0x5555555500000100, x1, 56, x2)

inst_8:
// rs1==x18, rs2==x0, rd==x3, rs2_w1_val == 2147483647, rs1_w1_val == -4194305, rs1_w0_val == 4194304, rs2_w0_val == -32769
// opcode: crsa32 ; op1:x18; op2:x0; dest:x3; op1val:0xffbfffff00400000;  op2val:0x7fffffffffff7fff
TEST_RR_OP(crsa32, x3, x18, x0, 0x0000000000000000, 0xffbfffff00400000, 0x7fffffffffff7fff, x1, 64, x2)

inst_9:
// rs1==x3, rs2==x7, rd==x13, rs2_w1_val == -1073741825, rs2_w0_val == -131073, rs1_w1_val == -17, rs1_w0_val == -129
// opcode: crsa32 ; op1:x3; op2:x7; dest:x13; op1val:0xffffffefffffff7f;  op2val:0xbffffffffffdffff
TEST_RR_OP(crsa32, x13, x3, x7, 0x0000000000000000, 0xffffffefffffff7f, 0xbffffffffffdffff, x1, 72, x2)

inst_10:
// rs1==x16, rs2==x17, rd==x12, rs2_w1_val == -536870913, rs2_w0_val == -1048577, rs1_w0_val == 2048
// opcode: crsa32 ; op1:x16; op2:x17; dest:x12; op1val:0xc000000000000800;  op2val:0xdfffffffffefffff
TEST_RR_OP(crsa32, x12, x16, x17, 0x0000000000000000, 0xc000000000000800, 0xdfffffffffefffff, x1, 80, x2)

inst_11:
// rs1==x19, rs2==x9, rd==x4, rs2_w1_val == -268435457, rs1_w0_val == 2, rs2_w0_val == 8
// opcode: crsa32 ; op1:x19; op2:x9; dest:x4; op1val:0x00000300000002;  op2val:0xefffffff00000008
TEST_RR_OP(crsa32, x4, x19, x9, 0x0000000000000000, 0x00000300000002, 0xefffffff00000008, x1, 88, x2)

inst_12:
// rs1==x11, rs2==x15, rd==x0, rs2_w1_val == -134217729, 
// opcode: crsa32 ; op1:x11; op2:x15; dest:x0; op1val:0xc0000000c0000000;  op2val:0xf7ffffff00100000
TEST_RR_OP(crsa32, x0, x11, x15, 0x0000000000000000, 0xc0000000c0000000, 0xf7ffffff00100000, x1, 96, x2)

inst_13:
// rs1==x25, rs2==x6, rd==x11, rs2_w1_val == -67108865, rs2_w0_val == 33554432, rs1_w0_val == -268435457, rs1_w1_val == 0
// opcode: crsa32 ; op1:x25; op2:x6; dest:x11; op1val:0x000000efffffff;  op2val:0xfbffffff02000000
TEST_RR_OP(crsa32, x11, x25, x6, 0x0000000000000000, 0x000000efffffff, 0xfbffffff02000000, x1, 104, x2)

inst_14:
// rs1==x4, rs2==x12, rd==x28, rs2_w1_val == -33554433, rs1_w0_val == 64, rs2_w0_val == 0, rs1_w1_val == 8
// opcode: crsa32 ; op1:x4; op2:x12; dest:x28; op1val:0x00000800000040;  op2val:0xfdffffff00000000
TEST_RR_OP(crsa32, x28, x4, x12, 0x0000000000000000, 0x00000800000040, 0xfdffffff00000000, x1, 112, x2)

inst_15:
// rs1==x28, rs2==x18, rd==x9, rs2_w1_val == -16777217, rs2_w0_val == -262145, rs1_w1_val == -8193, rs1_w0_val == 268435456
// opcode: crsa32 ; op1:x28; op2:x18; dest:x9; op1val:0xffffdfff10000000;  op2val:0xfefffffffffbffff
TEST_RR_OP(crsa32, x9, x28, x18, 0x0000000000000000, 0xffffdfff10000000, 0xfefffffffffbffff, x1, 120, x2)

inst_16:
// rs1==x13, rs2==x4, rd==x30, rs2_w1_val == -8388609, rs1_w0_val == 32
// opcode: crsa32 ; op1:x13; op2:x4; dest:x30; op1val:0x00000000000020;  op2val:0xff7fffff00100000
TEST_RR_OP(crsa32, x30, x13, x4, 0x0000000000000000, 0x00000000000020, 0xff7fffff00100000, x1, 128, x2)

inst_17:
// rs1==x23, rs2==x28, rd==x6, rs2_w1_val == -4194305, rs1_w1_val == -1, rs1_w0_val == -536870913
// opcode: crsa32 ; op1:x23; op2:x28; dest:x6; op1val:0xffffffffdfffffff;  op2val:0xffbfffff00100000
TEST_RR_OP(crsa32, x6, x23, x28, 0x0000000000000000, 0xffffffffdfffffff, 0xffbfffff00100000, x1, 136, x2)

inst_18:
// rs1==x17, rs2==x24, rd==x31, rs2_w1_val == -2097153, rs1_w1_val == 16777216, rs1_w0_val == 8
// opcode: crsa32 ; op1:x17; op2:x24; dest:x31; op1val:0x100000000000008;  op2val:0xffdfffff00000100
TEST_RR_OP(crsa32, x31, x17, x24, 0x0000000000000000, 0x100000000000008, 0xffdfffff00000100, x1, 144, x4)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_19:
// rs1==x12, rs2==x10, rd==x20, rs2_w1_val == -1048577, rs1_w1_val == -257, rs2_w0_val == -134217729
// opcode: crsa32 ; op1:x12; op2:x10; dest:x20; op1val:0xfffffeffffffff7f;  op2val:0xffeffffff7ffffff
TEST_RR_OP(crsa32, x20, x12, x10, 0x0000000000000000, 0xfffffeffffffff7f, 0xffeffffff7ffffff, x3, 0, x4)

inst_20:
// rs1==x2, rs2==x27, rd==x21, rs2_w1_val == -524289, rs1_w0_val == 4096, rs1_w1_val == 33554432
// opcode: crsa32 ; op1:x2; op2:x27; dest:x21; op1val:0x200000000001000;  op2val:0xfff7fffffffffff6
TEST_RR_OP(crsa32, x21, x2, x27, 0x0000000000000000, 0x200000000001000, 0xfff7fffffffffff6, x3, 8, x4)

inst_21:
// rs1==x5, rs2==x23, rd==x1, rs2_w1_val == -262145, rs1_w1_val == 536870912
// opcode: crsa32 ; op1:x5; op2:x23; dest:x1; op1val:0x2000000000000002;  op2val:0xfffbfffffffffffb
TEST_RR_OP(crsa32, x1, x5, x23, 0x0000000000000000, 0x2000000000000002, 0xfffbfffffffffffb, x3, 16, x4)

inst_22:
// rs1==x10, rs2==x25, rd==x2, rs2_w1_val == -131073, rs2_w0_val == -513, rs1_w1_val == -1048577, rs1_w0_val == 134217728
// opcode: crsa32 ; op1:x10; op2:x25; dest:x2; op1val:0xffefffff08000000;  op2val:0xfffdfffffffffdff
TEST_RR_OP(crsa32, x2, x10, x25, 0x0000000000000000, 0xffefffff08000000, 0xfffdfffffffffdff, x3, 24, x4)

inst_23:
// rs1==x24, rs2==x11, rd==x14, rs2_w1_val == -65537, rs1_w0_val == 256, rs2_w0_val == -536870913
// opcode: crsa32 ; op1:x24; op2:x11; dest:x14; op1val:0xfffffff900000100;  op2val:0xfffeffffdfffffff
TEST_RR_OP(crsa32, x14, x24, x11, 0x0000000000000000, 0xfffffff900000100, 0xfffeffffdfffffff, x3, 32, x4)

inst_24:
// rs1==x7, rs2==x20, rd==x23, rs2_w1_val == -32769, rs1_w0_val == 536870912, rs1_w1_val == -2
// opcode: crsa32 ; op1:x7; op2:x20; dest:x23; op1val:0xfffffffe20000000;  op2val:0xffff7fff02000000
TEST_RR_OP(crsa32, x23, x7, x20, 0x0000000000000000, 0xfffffffe20000000, 0xffff7fff02000000, x3, 40, x4)

inst_25:
// rs1==x1, rs2==x2, rd==x19, rs2_w1_val == -16385, rs2_w0_val == -17
// opcode: crsa32 ; op1:x1; op2:x2; dest:x19; op1val:0x3ffffffffffffff9;  op2val:0xffffbfffffffffef
TEST_RR_OP(crsa32, x19, x1, x2, 0x0000000000000000, 0x3ffffffffffffff9, 0xffffbfffffffffef, x3, 48, x4)

inst_26:
// rs1==x0, rs2==x26, rd==x24, rs2_w1_val == -8193, rs2_w0_val == -8388609, rs1_w0_val == -32769
// opcode: crsa32 ; op1:x0; op2:x26; dest:x24; op1val:0x1000000ffff7fff;  op2val:0xffffdfffff7fffff
TEST_RR_OP(crsa32, x24, x0, x26, 0x0000000000000000, 0x1000000ffff7fff, 0xffffdfffff7fffff, x3, 56, x4)

inst_27:
// rs1==x26, rs2==x31, rd==x7, rs2_w1_val == -1025, rs1_w1_val == -65, rs1_w0_val == -67108865, rs2_w0_val == 4096
// opcode: crsa32 ; op1:x26; op2:x31; dest:x7; op1val:0xffffffbffbffffff;  op2val:0xfffffbff00001000
TEST_RR_OP(crsa32, x7, x26, x31, 0x0000000000000000, 0xffffffbffbffffff, 0xfffffbff00001000, x3, 64, x4)

inst_28:
// rs1==x6, rs2==x14, rd==x26, rs2_w1_val == -513, rs2_w0_val == 67108864, rs1_w1_val == -33
// opcode: crsa32 ; op1:x6; op2:x14; dest:x26; op1val:0xffffffdfffffefff;  op2val:0xfffffdff04000000
TEST_RR_OP(crsa32, x26, x6, x14, 0x0000000000000000, 0xffffffdfffffefff, 0xfffffdff04000000, x3, 72, x4)

inst_29:
// rs1==x22, rs2==x16, rd==x27, rs2_w1_val == -257, rs1_w0_val == -262145, rs2_w0_val == 512
// opcode: crsa32 ; op1:x22; op2:x16; dest:x27; op1val:0x020000fffbffff;  op2val:0xfffffeff00000200
TEST_RR_OP(crsa32, x27, x22, x16, 0x0000000000000000, 0x020000fffbffff, 0xfffffeff00000200, x3, 80, x4)

inst_30:
// rs1==x9, rs2==x19, rd==x18, rs2_w1_val == -129, rs2_w0_val == 16384
// opcode: crsa32 ; op1:x9; op2:x19; dest:x18; op1val:0xffffffdffffffffa;  op2val:0xffffff7f00004000
TEST_RR_OP(crsa32, x18, x9, x19, 0x0000000000000000, 0xffffffdffffffffa, 0xffffff7f00004000, x3, 88, x4)

inst_31:
// rs1==x14, rs2==x1, rd==x16, rs2_w1_val == -65, rs2_w0_val == -33
// opcode: crsa32 ; op1:x14; op2:x1; dest:x16; op1val:0x3ffffffffffffff9;  op2val:0xffffffbfffffffdf
TEST_RR_OP(crsa32, x16, x14, x1, 0x0000000000000000, 0x3ffffffffffffff9, 0xffffffbfffffffdf, x3, 96, x4)

inst_32:
// rs2_w1_val == -33, rs1_w0_val == -33
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffffdf;  op2val:0xffffffdf00001000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffffdf, 0xffffffdf00001000, x3, 104, x4)

inst_33:
// rs2_w1_val == -17, rs1_w1_val == -262145, rs2_w0_val == 268435456
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff02000000;  op2val:0xffffffef10000000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffbffff02000000, 0xffffffef10000000, x3, 112, x4)

inst_34:
// rs2_w1_val == -9, rs1_w1_val == 1048576, rs1_w0_val == 262144
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000040000;  op2val:0xfffffff7ff7fffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x10000000040000, 0xfffffff7ff7fffff, x3, 120, x4)

inst_35:
// rs2_w1_val == -5, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000040;  op2val:0xfffffffbffbfffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000040, 0xfffffffbffbfffff, x3, 128, x4)

inst_36:
// rs2_w1_val == -3, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffffeff;  op2val:0xfffffffdf7ffffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x000003fffffeff, 0xfffffffdf7ffffff, x3, 136, x4)

inst_37:
// rs2_w1_val == -2, rs1_w0_val == 0, rs1_w1_val == 1024
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000000;  op2val:0xfffffffebfffffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x00040000000000, 0xfffffffebfffffff, x3, 144, x4)

inst_38:
// rs2_w1_val == -2147483648, rs1_w0_val == -16777217, rs2_w0_val == 2097152
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009feffffff;  op2val:0x8000000000200000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x000009feffffff, 0x8000000000200000, x3, 152, x4)

inst_39:
// rs2_w1_val == 1073741824, rs1_w1_val == -2097153, rs2_w0_val == -2049
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000000;  op2val:0x40000000fffff7ff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000000, 0x40000000fffff7ff, x3, 160, x4)

inst_40:
// rs2_w1_val == 536870912, rs2_w0_val == -4097
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000006;  op2val:0x20000000ffffefff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000006, 0x20000000ffffefff, x3, 168, x4)

inst_41:
// rs2_w1_val == 268435456, rs1_w0_val == 1024
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000400;  op2val:0x1000000000200000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xc000000000000400, 0x1000000000200000, x3, 176, x4)

inst_42:
// rs2_w1_val == 134217728, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00200000;  op2val:0x800000000000000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xffefffff00200000, 0x800000000000000, x3, 184, x4)

inst_43:
// rs2_w1_val == 67108864, rs1_w1_val == 2048
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800c0000000;  op2val:0x4000000fffffff8
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x000800c0000000, 0x4000000fffffff8, x3, 192, x4)

inst_44:
// rs2_w1_val == 33554432, rs2_w0_val == 262144, rs1_w0_val == 4
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000004;  op2val:0x200000000040000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000004, 0x200000000040000, x3, 200, x4)

inst_45:
// rs2_w1_val == 16777216, rs1_w0_val == -513, rs2_w0_val == 1073741824, rs1_w1_val == 32768
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffffdff;  op2val:0x100000040000000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x008000fffffdff, 0x100000040000000, x3, 208, x4)

inst_46:
// rs2_w1_val == 8388608, rs2_w0_val == 4194304, rs1_w0_val == -1048577, rs1_w1_val == 128
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080ffefffff;  op2val:0x80000000400000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x000080ffefffff, 0x80000000400000, x3, 216, x4)

inst_47:
// rs2_w1_val == 4194304, rs2_w0_val == 1
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefbffffff;  op2val:0x40000000000001
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffefbffffff, 0x40000000000001, x3, 224, x4)

inst_48:
// rs2_w1_val == 1048576, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffdff;  op2val:0x100000fffffdff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffdff, 0x100000fffffdff, x3, 232, x4)

inst_49:
// rs2_w1_val == 524288, rs1_w0_val == 128, rs1_w1_val == -1025
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000080;  op2val:0x08000010000000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000080, 0x08000010000000, x3, 240, x4)

inst_50:
// rs2_w1_val == 262144, rs1_w0_val == -65537
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffeffff;  op2val:0x04000000000009
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x000008fffeffff, 0x04000000000009, x3, 248, x4)

inst_51:
// rs2_w1_val == 131072, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000400;  op2val:0x02000000004000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000400, 0x02000000004000, x3, 256, x4)

inst_52:
// rs1_w0_val == 16777216, rs2_w0_val == -65, rs1_w1_val == 1
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000101000000;  op2val:0x000007ffffffbf
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x00000101000000, 0x000007ffffffbf, x3, 264, x4)

inst_53:
// rs1_w0_val == 8388608, rs1_w1_val == 16384, rs2_w1_val == 128
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000800000;  op2val:0x00008000000007
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x00400000800000, 0x00008000000007, x3, 272, x4)

inst_54:
// rs1_w0_val == 524288, rs1_w1_val == -5, rs2_w1_val == 4
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00080000;  op2val:0x000004ffefffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00080000, 0x000004ffefffff, x3, 280, x4)

inst_55:
// rs1_w0_val == 131072, rs2_w0_val == 65536, rs1_w1_val == -32769
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00020000;  op2val:0xffff7fff00010000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00020000, 0xffff7fff00010000, x3, 288, x4)

inst_56:
// rs1_w0_val == 65536, rs2_w1_val == 64, rs2_w0_val == 2, rs1_w1_val == -9
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700010000;  op2val:0x00004000000002
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff700010000, 0x00004000000002, x3, 296, x4)

inst_57:
// rs1_w0_val == 32768, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700008000;  op2val:0x8000000000000007
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff700008000, 0x8000000000000007, x3, 304, x4)

inst_58:
// rs1_w0_val == 16384, rs1_w1_val == -268435457
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00004000;  op2val:0x800000ff7fffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xefffffff00004000, 0x800000ff7fffff, x3, 312, x4)

inst_59:
// rs1_w0_val == 8192, rs1_w1_val == -2049
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00002000;  op2val:0xfbffffff3fffffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00002000, 0xfbffffff3fffffff, x3, 320, x4)

inst_60:
// rs1_w0_val == 512, rs1_w1_val == -65537, rs2_w0_val == 524288
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000200;  op2val:0xff7fffff00080000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000200, 0xff7fffff00080000, x3, 328, x4)

inst_61:
// rs1_w0_val == 16, rs1_w1_val == 262144, rs2_w0_val == -1
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000010;  op2val:0x4000000ffffffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x04000000000010, 0x4000000ffffffff, x3, 336, x4)

inst_62:
// rs1_w0_val == 1, rs2_w0_val == 16
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000001;  op2val:0xffdfffff00000010
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x00000800000001, 0xffdfffff00000010, x3, 344, x4)

inst_63:
// rs1_w0_val == -1, rs1_w1_val == 512
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200ffffffff;  op2val:0xfffffffeffffffef
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x000200ffffffff, 0xfffffffeffffffef, x3, 352, x4)

inst_64:
// rs2_w1_val == 32768, rs2_w0_val == -8193
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000006;  op2val:0x008000ffffdfff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff800000006, 0x008000ffffdfff, x3, 360, x4)

inst_65:
// rs2_w1_val == 16384, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff80000000;  op2val:0x00400000000007
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x3fffffff80000000, 0x00400000000007, x3, 368, x4)

inst_66:
// rs2_w1_val == 8192, rs2_w0_val == -2147483648
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffffefff;  op2val:0x00200080000000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x800000ffffefff, 0x00200080000000, x3, 376, x4)

inst_67:
// rs2_w1_val == 4096, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00100000;  op2val:0x00100000000007
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00100000, 0x00100000000007, x3, 384, x4)

inst_68:
// rs2_w1_val == 2048, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000200;  op2val:0x0008003fffffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x04000000000200, 0x0008003fffffff, x3, 392, x4)

inst_69:
// rs2_w1_val == 1024, rs1_w1_val == 134217728
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000005;  op2val:0x00040000000006
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x800000000000005, 0x00040000000006, x3, 400, x4)

inst_70:
// rs2_w1_val == 512, rs1_w0_val == -16385
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffbfff;  op2val:0x000200fffffffa
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xffffffffffffbfff, 0x000200fffffffa, x3, 408, x4)

inst_71:
// rs2_w1_val == 256, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000006;  op2val:0x00010000000002
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x00000100000006, 0x00010000000002, x3, 416, x4)

inst_72:
// rs2_w1_val == 16, rs2_w0_val == 536870912
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000006;  op2val:0x00001020000000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x00020000000006, 0x00001020000000, x3, 424, x4)

inst_73:
// rs2_w1_val == 8, rs1_w1_val == 4194304, rs1_w0_val == -2097153
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000ffdfffff;  op2val:0x00000840000000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x400000ffdfffff, 0x00000840000000, x3, 432, x4)

inst_74:
// rs2_w1_val == 2, rs1_w0_val == -1431655766, rs1_w1_val == -4097
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffaaaaaaaa;  op2val:0x000002ffffffbf
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xffffefffaaaaaaaa, 0x000002ffffffbf, x3, 440, x4)

inst_75:
// rs2_w1_val == 1, rs1_w0_val == -65
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffbf;  op2val:0x00000100000000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffbf, 0x00000100000000, x3, 448, x4)

inst_76:
// rs2_w1_val == 0, rs1_w1_val == -3
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00008000;  op2val:0x000000bfffffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00008000, 0x000000bfffffff, x3, 456, x4)

inst_77:
// rs2_w1_val == -1, rs1_w1_val == -16777217
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00010000;  op2val:0xffffffff00200000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00010000, 0xffffffff00200000, x3, 464, x4)

inst_78:
// rs2_w0_val == -1431655766, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000006;  op2val:0xfffffffaaaaaaaaa
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000006, 0xfffffffaaaaaaaaa, x3, 472, x4)

inst_79:
// rs2_w0_val == 1431655765, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00080000;  op2val:0xfffffffa55555555
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00080000, 0xfffffffa55555555, x3, 480, x4)

inst_80:
// rs2_w0_val == 2147483647, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcffefffff;  op2val:0xffffdfff7fffffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffcffefffff, 0xffffdfff7fffffff, x3, 488, x4)

inst_81:
// rs2_w0_val == -268435457, rs1_w0_val == 1073741824
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff40000000;  op2val:0x000005efffffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffffbff40000000, 0x000005efffffff, x3, 496, x4)

inst_82:
// rs2_w0_val == -67108865, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000200000;  op2val:0xfefffffffbffffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x40000000200000, 0xfefffffffbffffff, x3, 504, x4)

inst_83:
// rs2_w0_val == 131072, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00100000;  op2val:0xfffff7ff00020000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00100000, 0xfffff7ff00020000, x3, 512, x4)

inst_84:
// rs2_w0_val == 32768, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000001;  op2val:0x00000600008000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000001, 0x00000600008000, x3, 520, x4)

inst_85:
// rs2_w0_val == 8192, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000002000;  op2val:0xfffdffff00002000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x00080000002000, 0xfffdffff00002000, x3, 528, x4)

inst_86:
// rs2_w0_val == 2048, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000040000;  op2val:0xfdffffff00000800
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x00400000040000, 0xfdffffff00000800, x3, 536, x4)

inst_87:
// rs2_w0_val == 1024, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffdfffff;  op2val:0x3fffffff00000400
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x800000ffdfffff, 0x3fffffff00000400, x3, 544, x4)

inst_88:
// rs2_w0_val == 128, rs1_w1_val == -67108865
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000080;  op2val:0xfff7ffff00000080
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000080, 0xfff7ffff00000080, x3, 552, x4)

inst_89:
// rs2_w0_val == 64, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00800000;  op2val:0x1000000000000040
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00800000, 0x1000000000000040, x3, 560, x4)

inst_90:
// rs2_w0_val == 32, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000003;  op2val:0xc000000000000020
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000003, 0xc000000000000020, x3, 568, x4)

inst_91:
// rs2_w0_val == 4, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffffffa;  op2val:0xdfffffff00000004
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffffffa, 0xdfffffff00000004, x3, 576, x4)

inst_92:
// rs1_w1_val == -1431655766, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaefffffff;  op2val:0xfffffffa00400000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaefffffff, 0xfffffffa00400000, x3, 584, x4)

inst_93:
// rs1_w1_val == 1431655765, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555ffff7fff;  op2val:0x800000000000010
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x55555555ffff7fff, 0x800000000000010, x3, 592, x4)

inst_94:
// rs1_w1_val == -1073741825, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffbfff;  op2val:0x7fffffff02000000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffbfff, 0x7fffffff02000000, x3, 600, x4)

inst_95:
// rs1_w1_val == -536870913, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffff8;  op2val:0xfffffffffffffffa
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffff8, 0xfffffffffffffffa, x3, 608, x4)

inst_96:
// rs1_w1_val == -134217729, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffeffff;  op2val:0xefffffff00004000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffeffff, 0xefffffff00004000, x3, 616, x4)

inst_97:
// rs1_w1_val == -8388609, rs1_w0_val == -8193
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffffdfff;  op2val:0xfffffff900004000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xff7fffffffffdfff, 0xfffffff900004000, x3, 624, x4)

inst_98:
// rs1_w1_val == -524289, rs2_w0_val == -2097153
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffefff;  op2val:0x3fffffffffdfffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffffefff, 0x3fffffffffdfffff, x3, 632, x4)

inst_99:
// rs1_w1_val == -16385, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000100;  op2val:0x00000200000040
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000100, 0x00000200000040, x3, 640, x4)

inst_100:
// rs1_w1_val == -129, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00001000;  op2val:0x5555555500000020
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00001000, 0x5555555500000020, x3, 648, x4)

inst_101:
// rs1_w1_val == -2147483648, rs2_w0_val == -129
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000040000;  op2val:0xfffbffffffffff7f
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x8000000000040000, 0xfffbffffffffff7f, x3, 656, x4)

inst_102:
// rs1_w1_val == 1073741824, rs1_w0_val == 2147483647
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000007fffffff;  op2val:0x000005ffffffbf
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x400000007fffffff, 0x000005ffffffbf, x3, 664, x4)

inst_103:
// rs1_w1_val == 268435456, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000004;  op2val:0x3fffffff00000007
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x1000000000000004, 0x3fffffff00000007, x3, 672, x4)

inst_104:
// rs1_w1_val == 67108864, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffff9;  op2val:0xdfffffff00080000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x4000000fffffff9, 0xdfffffff00080000, x3, 680, x4)

inst_105:
// rs1_w1_val == 524288, rs1_w0_val == -17
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000ffffffef;  op2val:0x200000000000020
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x080000ffffffef, 0x200000000000020, x3, 688, x4)

inst_106:
// rs1_w1_val == 65536, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffffffa;  op2val:0xfffffdffffffffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x010000fffffffa, 0xfffffdffffffffff, x3, 696, x4)

inst_107:
// rs1_w1_val == 8192, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200002000000;  op2val:0x200000055555555
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x00200002000000, 0x200000055555555, x3, 704, x4)

inst_108:
// rs1_w1_val == 4096, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000003;  op2val:0xbfffffff55555555
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x00100000000003, 0xbfffffff55555555, x3, 712, x4)

inst_109:
// rs1_w1_val == 256, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100fffffff9;  op2val:0x200000000000000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x000100fffffff9, 0x200000000000000, x3, 720, x4)

inst_110:
// rs1_w1_val == 64, rs1_w0_val == -4194305
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffbfffff;  op2val:0x10000000000100
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x000040ffbfffff, 0x10000000000100, x3, 728, x4)

inst_111:
// rs1_w1_val == 32, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020c0000000;  op2val:0x00000700000400
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x000020c0000000, 0x00000700000400, x3, 736, x4)

inst_112:
// rs1_w1_val == 16, rs2_w0_val == 8388608
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010fffffff9;  op2val:0xffffff7f00800000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x000010fffffff9, 0xffffff7f00800000, x3, 744, x4)

inst_113:
// rs1_w1_val == 4, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000408000000;  op2val:0xfffffffdff7fffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x00000408000000, 0xfffffffdff7fffff, x3, 752, x4)

inst_114:
// rs1_w1_val == 2, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002feffffff;  op2val:0xfdfffffffffffeff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x000002feffffff, 0xfdfffffffffffeff, x3, 760, x4)

inst_115:
// rs2_w0_val == -16777217, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020aaaaaaaa;  op2val:0xffffff7ffeffffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x000020aaaaaaaa, 0xffffff7ffeffffff, x3, 768, x4)

inst_116:
// rs2_w0_val == 134217728, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000004;  op2val:0x00000408000000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000004, 0x00000408000000, x3, 776, x4)

inst_117:
// rs1_w0_val == 1431655765, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff55555555;  op2val:0xffffffbf00000002
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xffffdfff55555555, 0xffffffbf00000002, x3, 784, x4)

inst_118:
// rs1_w0_val == -1073741825, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000bfffffff;  op2val:0xffffffdf00000005
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x010000bfffffff, 0xffffffdf00000005, x3, 792, x4)

inst_119:
// rs2_w0_val == -524289, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000010000;  op2val:0xffffffdffff7ffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x00020000010000, 0xffffffdffff7ffff, x3, 800, x4)

inst_120:
// rs1_w0_val == -134217729, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000f7ffffff;  op2val:0xffffff7fffffffdf
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x800000f7ffffff, 0xffffff7fffffffdf, x3, 808, x4)

inst_121:
// rs1_w0_val == -33554433, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080fdffffff;  op2val:0x00004000200000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x000080fdffffff, 0x00004000200000, x3, 816, x4)

inst_122:
// rs2_w0_val == -65537, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000005;  op2val:0x000008fffeffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000005, 0x000008fffeffff, x3, 824, x4)

inst_123:
// rs1_w0_val == -8388609, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffff7fffff;  op2val:0x001000fffffff6
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffffdffff7fffff, 0x001000fffffff6, x3, 832, x4)

inst_124:
// rs2_w0_val == -16385, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffffefff;  op2val:0x000008ffffbfff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfeffffffffffefff, 0x000008ffffbfff, x3, 840, x4)

inst_125:
// rs1_w0_val == -524289, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffff7ffff;  op2val:0xfffffffa00400000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffffbfffff7ffff, 0xfffffffa00400000, x3, 848, x4)

inst_126:
// rs2_w0_val == 16777216, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000ffffdfff;  op2val:0x40000001000000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xc0000000ffffdfff, 0x40000001000000, x3, 856, x4)

inst_127:
// rs2_w0_val == -1025, rs1_w0_val == -131073
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffdffff;  op2val:0x20000000fffffbff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x000001fffdffff, 0x20000000fffffbff, x3, 864, x4)

inst_128:
// rs2_w0_val == -9, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100fffffeff;  op2val:0x000080fffffff7
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x000100fffffeff, 0x000080fffffff7, x3, 872, x4)

inst_129:
// rs1_w0_val == -2049, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fffff7ff;  op2val:0xfffffff8feffffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x55555555fffff7ff, 0xfffffff8feffffff, x3, 880, x4)

inst_130:
// rs1_w0_val == -1025, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffffbff;  op2val:0x4000000040000000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x000008fffffbff, 0x4000000040000000, x3, 888, x4)

inst_131:
// rs2_w0_val == -3, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000008;  op2val:0xeffffffffffffffd
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000008, 0xeffffffffffffffd, x3, 896, x4)

inst_132:
// rs2_w0_val == -2, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000007fffffff;  op2val:0x000800fffffffe
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x40000007fffffff, 0x000800fffffffe, x3, 904, x4)

inst_133:
// rs1_w0_val == -3, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffffffd;  op2val:0x00000300800000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x000400fffffffd, 0x00000300800000, x3, 912, x4)

inst_134:
// rs1_w0_val == -2, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffffe;  op2val:0xffffbffffffdffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x10000000fffffffe, 0xffffbffffffdffff, x3, 920, x4)

inst_135:
// rs1_w0_val == 67108864, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff04000000;  op2val:0xfff7ffff00000100
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xffffffff04000000, 0xfff7ffff00000100, x3, 928, x4)

inst_136:
// rs1_w0_val == -9, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffffff7;  op2val:0xdfffffff00800000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x000002fffffff7, 0xdfffffff00800000, x3, 936, x4)

inst_137:
// rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == 2097152, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == -131073, rs2_w0_val == 1048576
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00200000;  op2val:0x00000300100000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00200000, 0x00000300100000, x3, 944, x4)

inst_138:
// rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w0_val == -33554433, rs2_w1_val == -2049, rs1_w1_val == 2147483647
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffffff8;  op2val:0xfffff7fffdffffff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffffff8, 0xfffff7fffdffffff, x3, 952, x4)

inst_139:
// rs2_w1_val == 2147483647, rs1_w1_val == -4194305, rs1_w0_val == 4194304, rs2_w0_val == -32769
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00400000;  op2val:0x7fffffffffff7fff
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00400000, 0x7fffffffffff7fff, x3, 960, x4)

inst_140:
// rs2_w1_val == -134217729, 
// opcode: crsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000c0000000;  op2val:0xf7ffffff00100000
TEST_RR_OP(crsa32, x31, x30, x29, 0x0000000000000000, 0xc0000000c0000000, 0xf7ffffff00100000, x3, 968, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 122*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
