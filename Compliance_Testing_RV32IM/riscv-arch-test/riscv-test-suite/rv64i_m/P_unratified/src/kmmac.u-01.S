
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmmac.u instruction of the RISC-V RV64PZicsr extension for the kmmac.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmmac.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 == rd != rs2, rs1==x9, rs2==x20, rd==x9, rs1_w0_val == -2147483648, rs2_w1_val == -3, rs2_w0_val == -16777217
// opcode: kmmac.u ; op1:x9; dest:x9; op1val:0x00000680000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x9, x9, x20, 0x0000000000000000, 0x00000680000000, 0xfffffffdfeffffff, x9, x4, 0, x7)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x26, rd==x11, rs2_w1_val == -1431655766, rs1_w1_val == -8193, rs1_w0_val == -2
// opcode: kmmac.u ; op1:x2; dest:x11; op1val:0xffffdffffffffffe;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x11, x2, x26, 0x0000000000000000, 0xffffdffffffffffe, 0xaaaaaaaa00000005, x2, x4, 16, x7)

inst_2:
// rs1 == rs2 != rd, rs1==x16, rs2==x16, rd==x21, rs2_w1_val == 1431655765, rs1_w1_val == -1048577
// opcode: kmmac.u ; op1:x16; dest:x21; op1val:0xffeffffffffffff6;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x21, x16, x16, 0x0000000000000000, 0xffeffffffffffff6, 0x5555555533333333, x16, x4, 32, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x14, rs2==x14, rd==x14, rs2_w1_val == 2147483647, rs2_w0_val == 512, rs1_w1_val == 2097152
// opcode: kmmac.u ; op1:x14; dest:x14; op1val:0x20000080000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x14, x14, x14, 0x0000000000000000, 0x20000080000000, 0x7fffffff00000200, x14, x4, 48, x7)

inst_4:
// rs2 == rd != rs1, rs1==x13, rs2==x2, rd==x2, rs2_w1_val == -1073741825, rs1_w0_val == -268435457, rs1_w1_val == 4194304, rs2_w0_val == 8388608
// opcode: kmmac.u ; op1:x13; dest:x2; op1val:0x400000efffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x2, x13, x2, 0x0000000000000000, 0x400000efffffff, 0xbfffffff00800000, x13, x4, 64, x7)

inst_5:
// rs1==x20, rs2==x19, rd==x29, rs2_w1_val == -536870913, rs1_w0_val == -67108865, rs2_w0_val == -3
// opcode: kmmac.u ; op1:x20; dest:x29; op1val:0x00b504fbffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x29, x20, x19, 0x0000000000000000, 0x00b504fbffffff, 0xdffffffffffffffd, x20, x4, 80, x7)

inst_6:
// rs1==x30, rs2==x5, rd==x18, rs2_w1_val == -268435457, rs2_w0_val == -67108865, rs1_w0_val == 256, rs1_w1_val == 8
// opcode: kmmac.u ; op1:x30; dest:x18; op1val:0x00000800000100;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x18, x30, x5, 0x0000000000000000, 0x00000800000100, 0xeffffffffbffffff, x30, x4, 96, x7)

inst_7:
// rs1==x29, rs2==x10, rd==x27, rs2_w1_val == -134217729, rs1_w0_val == 2048, rs1_w1_val == -268435457
// opcode: kmmac.u ; op1:x29; dest:x27; op1val:0xefffffff00000800;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x27, x29, x10, 0x0000000000000000, 0xefffffff00000800, 0xf7ffffffffff4afc, x29, x4, 112, x7)

inst_8:
// rs1==x23, rs2==x29, rd==x6, rs2_w1_val == -67108865, rs2_w0_val == 16384
// opcode: kmmac.u ; op1:x23; dest:x6; op1val:0x00000500000003;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x6, x23, x29, 0x0000000000000000, 0x00000500000003, 0xfbffffff00004000, x23, x4, 128, x7)

inst_9:
// rs1==x5, rs2==x27, rd==x17, rs2_w1_val == -33554433, rs2_w0_val == -65
// opcode: kmmac.u ; op1:x5; dest:x17; op1val:0xffff4afcfffffff9;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x17, x5, x27, 0x0000000000000000, 0xffff4afcfffffff9, 0xfdffffffffffffbf, x5, x4, 144, x7)

inst_10:
// rs1==x0, rs2==x25, rd==x22, rs2_w1_val == -16777217, rs1_w0_val == -16385, rs2_w0_val == 67108864, rs1_w1_val == 8192
// opcode: kmmac.u ; op1:x0; dest:x22; op1val:0x002000ffffbfff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x22, x0, x25, 0x0000000000000000, 0x002000ffffbfff, 0xfeffffff04000000, x0, x4, 160, x7)

inst_11:
// rs1==x3, rs2==x17, rd==x15, rs2_w1_val == -8388609, rs2_w0_val == -134217729, rs1_w0_val == -1
// opcode: kmmac.u ; op1:x3; dest:x15; op1val:0x000003ffffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x15, x3, x17, 0x0000000000000000, 0x000003ffffffff, 0xff7ffffff7ffffff, x3, x4, 176, x7)

inst_12:
// rs1==x25, rs2==x1, rd==x31, rs2_w1_val == -4194305, rs1_w0_val == 1024
// opcode: kmmac.u ; op1:x25; dest:x31; op1val:0xfffffff800000400;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x25, x1, 0x0000000000000000, 0xfffffff800000400, 0xffbfffff00000003, x25, x4, 192, x7)

inst_13:
// rs1==x17, rs2==x24, rd==x10, rs2_w1_val == -2097153, rs1_w1_val == 4, rs2_w0_val == 4, rs1_w0_val == 33554432
// opcode: kmmac.u ; op1:x17; dest:x10; op1val:0x00000402000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x10, x17, x24, 0x0000000000000000, 0x00000402000000, 0xffdfffff00000004, x17, x4, 208, x7)

inst_14:
// rs1==x24, rs2==x8, rd==x16, rs2_w1_val == -1048577, rs2_w0_val == -2049, rs1_w0_val == -33554433
// opcode: kmmac.u ; op1:x24; dest:x16; op1val:0x33333333fdffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x16, x24, x8, 0x0000000000000000, 0x33333333fdffffff, 0xffeffffffffff7ff, x24, x4, 224, x14)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_15:
// rs1==x4, rs2==x13, rd==x28, rs2_w1_val == -524289, rs1_w1_val == 1073741824, rs1_w0_val == 0
// opcode: kmmac.u ; op1:x4; dest:x28; op1val:0x4000000000000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x28, x4, x13, 0x0000000000000000, 0x4000000000000000, 0xfff7ffff33333333, x4, x2, 0, x14)

inst_16:
// rs1==x1, rs2==x9, rd==x8, rs2_w1_val == -262145, rs1_w1_val == -262145, rs2_w0_val == -2, rs1_w0_val == 2147483647
// opcode: kmmac.u ; op1:x1; dest:x8; op1val:0xfffbffff7fffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x8, x1, x9, 0x0000000000000000, 0xfffbffff7fffffff, 0xfffbfffffffffffe, x1, x2, 16, x14)

inst_17:
// rs1==x11, rs2==x18, rd==x25, rs2_w1_val == -131073, rs1_w1_val == 16777216
// opcode: kmmac.u ; op1:x11; dest:x25; op1val:0x100000000000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x25, x11, x18, 0x0000000000000000, 0x100000000000000, 0xfffdfffffffffffa, x11, x2, 32, x14)

inst_18:
// rs1==x31, rs2==x22, rd==x7, rs2_w1_val == -65537, rs1_w1_val == 524288
// opcode: kmmac.u ; op1:x31; dest:x7; op1val:0x08000000000800;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x7, x31, x22, 0x0000000000000000, 0x08000000000800, 0xfffefffffffffffd, x31, x2, 48, x14)

inst_19:
// rs1==x10, rs2==x6, rd==x1, rs2_w1_val == -32769, 
// opcode: kmmac.u ; op1:x10; dest:x1; op1val:0xffffdfff66666665;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x1, x10, x6, 0x0000000000000000, 0xffffdfff66666665, 0xffff7ffffbffffff, x10, x2, 64, x14)

inst_20:
// rs1==x7, rs2==x15, rd==x26, rs2_w1_val == -16385, rs1_w0_val == 1, rs2_w0_val == 2, rs1_w1_val == 16
// opcode: kmmac.u ; op1:x7; dest:x26; op1val:0x00001000000001;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x26, x7, x15, 0x0000000000000000, 0x00001000000001, 0xffffbfff00000002, x7, x2, 80, x14)

inst_21:
// rs1==x8, rs2==x0, rd==x24, rs2_w1_val == -8193, rs1_w1_val == -4194305
// opcode: kmmac.u ; op1:x8; dest:x24; op1val:0xffbfffffffff4afd;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x24, x8, x0, 0x0000000000000000, 0xffbfffffffff4afd, 0xffffdfffffff4afd, x8, x2, 96, x14)

inst_22:
// rs1==x26, rs2==x4, rd==x30, rs2_w1_val == -4097, rs2_w0_val == 1024, rs1_w1_val == -4097
// opcode: kmmac.u ; op1:x26; dest:x30; op1val:0xffffefff55555556;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x30, x26, x4, 0x0000000000000000, 0xffffefff55555556, 0xffffefff00000400, x26, x2, 112, x14)

inst_23:
// rs1==x19, rs2==x3, rd==x20, rs2_w1_val == -2049, rs2_w0_val == 32, rs1_w1_val == -1073741825
// opcode: kmmac.u ; op1:x19; dest:x20; op1val:0xbffffffffffffffa;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x20, x19, x3, 0x0000000000000000, 0xbffffffffffffffa, 0xfffff7ff00000020, x19, x2, 128, x14)

inst_24:
// rs1==x22, rs2==x12, rd==x4, rs2_w1_val == -1025, rs1_w0_val == -2049, rs2_w0_val == -513
// opcode: kmmac.u ; op1:x22; dest:x4; op1val:0x000003fffff7ff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x4, x22, x12, 0x0000000000000000, 0x000003fffff7ff, 0xfffffbfffffffdff, x22, x2, 144, x14)

inst_25:
// rs1==x18, rs2==x31, rd==x19, rs2_w1_val == -513, 
// opcode: kmmac.u ; op1:x18; dest:x19; op1val:0x000004c0000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x19, x18, x31, 0x0000000000000000, 0x000004c0000000, 0xfffffdfff7ffffff, x18, x2, 160, x14)

inst_26:
// rs1==x6, rs2==x23, rd==x13, rs2_w1_val == -257, rs1_w0_val == 64
// opcode: kmmac.u ; op1:x6; dest:x13; op1val:0x6666666500000040;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x13, x6, x23, 0x0000000000000000, 0x6666666500000040, 0xfffffeffffff4afc, x6, x2, 176, x14)

inst_27:
// rs1==x15, rs2==x30, rd==x5, rs2_w1_val == -129, 
// opcode: kmmac.u ; op1:x15; dest:x5; op1val:0x66666665fffffff9;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x5, x15, x30, 0x0000000000000000, 0x66666665fffffff9, 0xffffff7f0000b504, x15, x2, 192, x14)

inst_28:
// rs1==x28, rs2==x11, rd==x0, rs2_w1_val == -65, rs2_w0_val == 536870912, rs1_w0_val == -4097
// opcode: kmmac.u ; op1:x28; dest:x0; op1val:0x33333332ffffefff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x0, x28, x11, 0x0000000000000000, 0x33333332ffffefff, 0xffffffbf20000000, x28, x2, 208, x14)

inst_29:
// rs1==x21, rs2==x28, rd==x3, rs2_w1_val == -33, 
// opcode: kmmac.u ; op1:x21; dest:x3; op1val:0x400000000000b504;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x3, x21, x28, 0x0000000000000000, 0x400000000000b504, 0xffffffdf3fffffff, x21, x2, 224, x14)

inst_30:
// rs1==x12, rs2==x21, rd==x23, rs2_w1_val == -17, rs1_w0_val == -524289, rs1_w1_val == -134217729
// opcode: kmmac.u ; op1:x12; dest:x23; op1val:0xf7fffffffff7ffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x23, x12, x21, 0x0000000000000000, 0xf7fffffffff7ffff, 0xffffffef00000004, x12, x2, 240, x3)

inst_31:
// rs1==x27, rs2==x7, rd==x12, rs2_w1_val == -9, rs1_w1_val == -3, rs1_w0_val == 16777216
// opcode: kmmac.u ; op1:x27; dest:x12; op1val:0xfffffffd01000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x12, x27, x7, 0x0000000000000000, 0xfffffffd01000000, 0xfffffff7ffff4afc, x27, x2, 256, x3)

inst_32:
// rs2_w1_val == -5, rs1_w0_val == 512, rs2_w0_val == 33554432, rs1_w1_val == 2048
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00080000000200;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00080000000200, 0xfffffffb02000000, x30, x2, 272, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs2_w1_val == -2, rs2_w0_val == 64, rs1_w1_val == 32
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00002001000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00002001000000, 0xfffffffe00000040, x30, x1, 0, x3)

inst_34:
// rs2_w1_val == -2147483648, rs2_w0_val == 0
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xaaaaaaabfbffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaabfbffffff, 0x8000000000000000, x30, x1, 16, x3)

inst_35:
// rs2_w1_val == 1073741824, rs2_w0_val == -33554433, rs1_w1_val == -2049
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfffff7fffffffff6;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffffff6, 0x40000000fdffffff, x30, x1, 32, x3)

inst_36:
// rs2_w1_val == 536870912, rs1_w0_val == -513
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x000020fffffdff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x000020fffffdff, 0x2000000000000006, x30, x1, 48, x3)

inst_37:
// rs2_w1_val == 268435456, rs1_w1_val == -131073, rs2_w0_val == -131073
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfffdfffffff7ffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfffdfffffff7ffff, 0x10000000fffdffff, x30, x1, 64, x3)

inst_38:
// rs2_w1_val == 134217728, rs2_w0_val == 8192, rs1_w1_val == -1431655766
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xaaaaaaaa00000005;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000005, 0x800000000002000, x30, x1, 80, x3)

inst_39:
// rs2_w1_val == 67108864, rs1_w0_val == 268435456
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x3333333310000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x3333333310000000, 0x4000000ffff4afd, x30, x1, 96, x3)

inst_40:
// rs2_w1_val == 33554432, rs1_w1_val == -257, rs1_w0_val == -9, rs2_w0_val == 1
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfffffefffffffff7;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffff7, 0x200000000000001, x30, x1, 112, x3)

inst_41:
// rs2_w1_val == 16777216, rs1_w0_val == -8193, rs1_w1_val == 0
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x000000ffffdfff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x000000ffffdfff, 0x10000000000b503, x30, x1, 128, x3)

inst_42:
// rs2_w1_val == 8388608, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xbfffffff00000006;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000006, 0x800000fffdffff, x30, x1, 144, x3)

inst_43:
// rs2_w1_val == 4194304, rs1_w1_val == 512, rs2_w0_val == 524288
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x000200ffffbfff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x000200ffffbfff, 0x40000000080000, x30, x1, 160, x3)

inst_44:
// rs2_w1_val == 2097152, rs2_w0_val == 65536
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00000000000009;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00000000000009, 0x20000000010000, x30, x1, 176, x3)

inst_45:
// rs2_w1_val == 1048576, rs1_w0_val == -4194305, rs2_w0_val == -1431655766
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x080000ffbfffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x080000ffbfffff, 0x100000aaaaaaaa, x30, x1, 192, x3)

inst_46:
// rs2_w1_val == 524288, rs1_w0_val == -1048577
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x66666666ffefffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x66666666ffefffff, 0x08000000000006, x30, x1, 208, x3)

inst_47:
// rs2_w1_val == 262144, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00020000000007;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00020000000007, 0x0400000000b505, x30, x1, 224, x3)

inst_48:
// rs2_w1_val == 131072, rs2_w0_val == 256
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00b504ffff4afc;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00b504ffff4afc, 0x02000000000100, x30, x1, 240, x3)

inst_49:
// rs2_w1_val == 65536, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfffbffff66666665;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfffbffff66666665, 0x01000000000040, x30, x1, 256, x3)

inst_50:
// rs2_w1_val == 32768, rs2_w0_val == -257
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00000000000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00000000000000, 0x008000fffffeff, x30, x1, 272, x3)

inst_51:
// rs2_w1_val == 16384, rs1_w1_val == -67108865
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfbfffffffdffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfbfffffffdffffff, 0x004000fffffdff, x30, x1, 288, x3)

inst_52:
// rs2_w1_val == 8192, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xeffffffffdffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xeffffffffdffffff, 0x00200000000004, x30, x1, 304, x3)

inst_53:
// rs2_w1_val == 4096, rs1_w1_val == -1025, rs1_w0_val == -2097153
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfffffbffffdfffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfffffbffffdfffff, 0x001000ffff4afc, x30, x1, 320, x3)

inst_54:
// rs2_w1_val == 2048, rs1_w1_val == 1024, rs2_w0_val == -17
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00040066666665;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00040066666665, 0x000800ffffffef, x30, x1, 336, x3)

inst_55:
// rs2_w1_val == 1024, rs1_w0_val == 1431655765
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x3333333255555555;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x3333333255555555, 0x000400fffffff6, x30, x1, 352, x3)

inst_56:
// rs2_w1_val == 512, rs1_w1_val == 67108864
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x400000055555554;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x400000055555554, 0x000200fbffffff, x30, x1, 368, x3)

inst_57:
// rs2_w1_val == 256, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x4000000000000003;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x4000000000000003, 0x000100fbffffff, x30, x1, 384, x3)

inst_58:
// rs1_w0_val == 8192, rs2_w0_val == 2097152, rs1_w1_val == 4096
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00100000002000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00100000002000, 0x00020000200000, x30, x1, 400, x3)

inst_59:
// rs1_w0_val == 4096, rs2_w0_val == 2147483647
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x400000000001000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x400000000001000, 0xfffffdff7fffffff, x30, x1, 416, x3)

inst_60:
// rs1_w0_val == 128, rs1_w1_val == -524289
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfff7ffff00000080;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000080, 0xffffffdf00000001, x30, x1, 432, x3)

inst_61:
// rs1_w0_val == 32, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x6666666500000020;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x6666666500000020, 0xdffffffffffffeff, x30, x1, 448, x3)

inst_62:
// rs1_w0_val == 16, rs1_w1_val == -513, rs2_w0_val == -1048577
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfffffdff00000010;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000010, 0xfff7ffffffefffff, x30, x1, 464, x3)

inst_63:
// rs1_w0_val == 8, rs2_w0_val == 4096, rs2_w1_val == 0, rs1_w1_val == -16777217
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfeffffff00000008;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000008, 0x00000000001000, x30, x1, 480, x3)

inst_64:
// rs1_w0_val == 4, rs1_w1_val == -2147483648
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x8000000000000004;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x8000000000000004, 0x66666666fbffffff, x30, x1, 496, x3)

inst_65:
// rs1_w0_val == 2, rs2_w0_val == -268435457, rs1_w1_val == 8388608
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x80000000000002;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x80000000000002, 0x000400efffffff, x30, x1, 512, x3)

inst_66:
// rs2_w1_val == 128, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfffffff9ffff4afd;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfffffff9ffff4afd, 0x00008000000003, x30, x1, 528, x3)

inst_67:
// rs2_w1_val == 64, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x5555555610000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x5555555610000000, 0x00004066666665, x30, x1, 544, x3)

inst_68:
// rs2_w1_val == 32, rs2_w0_val == 16
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x3333333200000004;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x3333333200000004, 0x00002000000010, x30, x1, 560, x3)

inst_69:
// rs2_w1_val == 16, rs1_w1_val == 2, rs2_w0_val == 2048
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00000200000002;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00000200000002, 0x00001000000800, x30, x1, 576, x3)

inst_70:
// rs2_w1_val == 8, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x20000000000040;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x20000000000040, 0x00000800001000, x30, x1, 592, x3)

inst_71:
// rs2_w1_val == 4, rs1_w1_val == 1431655765, rs1_w0_val == -1431655766
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x55555555aaaaaaaa;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x55555555aaaaaaaa, 0x00000400000800, x30, x1, 608, x3)

inst_72:
// rs2_w1_val == 2, rs1_w1_val == 262144
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x040000fffffff8;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x040000fffffff8, 0x00000255555556, x30, x1, 624, x3)

inst_73:
// rs2_w1_val == 1, rs1_w0_val == 67108864
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xffff4afc04000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xffff4afc04000000, 0x000001ffffffef, x30, x1, 640, x3)

inst_74:
// rs2_w1_val == -1, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00000200000004;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00000200000004, 0xffffffff02000000, x30, x1, 656, x3)

inst_75:
// rs2_w0_val == 1431655765, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00000000000009;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00000000000009, 0x00004055555555, x30, x1, 672, x3)

inst_76:
// rs2_w0_val == -1073741825, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x002000fffffff7;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x002000fffffff7, 0xc0000000bfffffff, x30, x1, 688, x3)

inst_77:
// rs2_w0_val == -536870913, rs1_w0_val == 262144
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xf7ffffff00040000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00040000, 0x000000dfffffff, x30, x1, 704, x3)

inst_78:
// rs2_w0_val == -8388609, rs1_w1_val == 32768, rs1_w0_val == -1025
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x008000fffffbff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x008000fffffbff, 0xfeffffffff7fffff, x30, x1, 720, x3)

inst_79:
// rs2_w0_val == -4194305, rs1_w1_val == 16384
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00400000000100;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00400000000100, 0x66666666ffbfffff, x30, x1, 736, x3)

inst_80:
// rs2_w0_val == -2097153, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00b505c0000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00b505c0000000, 0x33333333ffdfffff, x30, x1, 752, x3)

inst_81:
// rs2_w0_val == -524289, rs1_w0_val == -32769
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfff7ffffffff7fff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffff7fff, 0xffffff7ffff7ffff, x30, x1, 768, x3)

inst_82:
// rs2_w0_val == -262145, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfbffffff00000006;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000006, 0xdffffffffffbffff, x30, x1, 784, x3)

inst_83:
// rs2_w0_val == -65537, rs1_w0_val == 8388608
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00000600800000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00000600800000, 0x000200fffeffff, x30, x1, 800, x3)

inst_84:
// rs2_w0_val == -32769, rs1_w0_val == 131072
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00200000020000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00200000020000, 0x20000000ffff7fff, x30, x1, 816, x3)

inst_85:
// rs2_w0_val == -16385, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x3fffffffc0000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x3fffffffc0000000, 0xfffffffdffffbfff, x30, x1, 832, x3)

inst_86:
// rs2_w0_val == -8193, rs1_w1_val == -32769
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xffff7fffffff4afc;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xffff7fffffff4afc, 0xffffff7fffffdfff, x30, x1, 848, x3)

inst_87:
// rs2_w0_val == -4097, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xaaaaaaaa00000005;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000005, 0xfffffff7ffffefff, x30, x1, 864, x3)

inst_88:
// rs2_w0_val == -1025, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x000000fdffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x000000fdffffff, 0xc0000000fffffbff, x30, x1, 880, x3)

inst_89:
// rs2_w0_val == -129, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x400000010000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x400000010000000, 0xffffbfffffffff7f, x30, x1, 896, x3)

inst_90:
// rs2_w0_val == -33, rs1_w1_val == 131072
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x020000ffffbfff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x020000ffffbfff, 0x33333332ffffffdf, x30, x1, 912, x3)

inst_91:
// rs2_w0_val == -9, rs1_w1_val == 134217728
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x800000000000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x800000000000000, 0xffffffeffffffff7, x30, x1, 928, x3)

inst_92:
// rs2_w0_val == -5, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00b50300000005;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00b50300000005, 0x33333334fffffffb, x30, x1, 944, x3)

inst_93:
// rs2_w0_val == 8, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x000008ffff7fff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x000008ffff7fff, 0x00000500000008, x30, x1, 960, x3)

inst_94:
// rs2_w0_val == -1, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00000600000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00000600000000, 0x000800ffffffff, x30, x1, 976, x3)

inst_95:
// rs1_w0_val == 16384, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x400000000004000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x400000000004000, 0x000006fffffff9, x30, x1, 992, x3)

inst_96:
// rs1_w1_val == 2147483647, rs2_w0_val == 128
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x7fffffff00000004;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000004, 0xfffffff900000080, x30, x1, 1008, x3)

inst_97:
// rs1_w1_val == -536870913, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xdfffffff00040000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xdfffffff00040000, 0xfeffffff00000400, x30, x1, 1024, x3)

inst_98:
// rs1_w1_val == -33554433, rs1_w0_val == -5
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfdfffffffffffffb;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffffffb, 0x000005ffdfffff, x30, x1, 1040, x3)

inst_99:
// rs1_w1_val == -8388609, rs2_w0_val == 1073741824, rs1_w0_val == 1048576
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xff7fffff00100000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xff7fffff00100000, 0xbfffffff40000000, x30, x1, 1056, x3)

inst_100:
// rs1_w1_val == -2097153, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xffdfffff00020000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xffdfffff00020000, 0x6666666600000005, x30, x1, 1072, x3)

inst_101:
// rs1_w1_val == -65537, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfffeffff00000400;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000400, 0xfffeffffffffffff, x30, x1, 1088, x3)

inst_102:
// rs1_w1_val == -16385, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xffffbfffffff4afd;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xffffbfffffff4afd, 0xffffbfff7fffffff, x30, x1, 1104, x3)

inst_103:
// rs1_w1_val == -129, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xffffff7f00040000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xffffff7f00040000, 0x00000020000000, x30, x1, 1120, x3)

inst_104:
// rs1_w1_val == -65, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xffffffbf00000800;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000800, 0x08000055555554, x30, x1, 1136, x3)

inst_105:
// rs1_w1_val == -33, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xffffffdf55555556;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xffffffdf55555556, 0xffffdfffffff4afc, x30, x1, 1152, x3)

inst_106:
// rs1_w1_val == -17, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xffffffef00000010;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xffffffef00000010, 0xfffffeff00000000, x30, x1, 1168, x3)

inst_107:
// rs1_w1_val == -9, rs1_w0_val == -33
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfffffff7ffffffdf;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffffffdf, 0x20000033333332, x30, x1, 1184, x3)

inst_108:
// rs1_w1_val == -5, rs1_w0_val == 1073741824
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfffffffb40000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfffffffb40000000, 0x000400fffff7ff, x30, x1, 1200, x3)

inst_109:
// rs1_w1_val == -2, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfffffffefffffbff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfffffffefffffbff, 0x6666666755555556, x30, x1, 1216, x3)

inst_110:
// rs1_w1_val == 536870912, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x2000000000000004;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x2000000000000004, 0x000005fffffff9, x30, x1, 1232, x3)

inst_111:
// rs1_w1_val == 268435456, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x1000000000000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x1000000000000000, 0xfffffff9fffffff9, x30, x1, 1248, x3)

inst_112:
// rs1_w1_val == 33554432, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x2000000fffffffa;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x2000000fffffffa, 0xf7ffffff00800000, x30, x1, 1264, x3)

inst_113:
// rs1_w1_val == 1048576, rs1_w0_val == 524288
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x10000000080000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x10000000080000, 0x01000000002000, x30, x1, 1280, x3)

inst_114:
// rs1_w1_val == 65536, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x0100000000b505;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x0100000000b505, 0xfdffffff00002000, x30, x1, 1296, x3)

inst_115:
// rs1_w1_val == 256, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x000100fffffffb;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x000100fffffffb, 0x00400000000005, x30, x1, 1312, x3)

inst_116:
// rs1_w1_val == 128, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x000080fff7ffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x000080fff7ffff, 0x000003fffffff9, x30, x1, 1328, x3)

inst_117:
// rs1_w1_val == 64, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x000040fffffff7;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x000040fffffff7, 0xffffffeffeffffff, x30, x1, 1344, x3)

inst_118:
// rs1_w1_val == 1, rs1_w0_val == 2097152
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00000100200000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00000100200000, 0xffffbfff00080000, x30, x1, 1360, x3)

inst_119:
// rs1_w1_val == -1, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfffffffffdffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfffffffffdffffff, 0xfdffffff0000b504, x30, x1, 1376, x3)

inst_120:
// rs1_w0_val == -1073741825, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x000002bfffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x000002bfffffff, 0xbfffffff00000020, x30, x1, 1392, x3)

inst_121:
// rs1_w0_val == -536870913, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xffffffffdfffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xffffffffdfffffff, 0xf7fffffffffffff7, x30, x1, 1408, x3)

inst_122:
// rs1_w0_val == -134217729, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfffffffcf7ffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfffffffcf7ffffff, 0x55555555aaaaaaaa, x30, x1, 1424, x3)

inst_123:
// rs1_w0_val == -16777217, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xbffffffffeffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xbffffffffeffffff, 0x00000500000040, x30, x1, 1440, x3)

inst_124:
// rs1_w0_val == -8388609, rs2_w0_val == 32768
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x66666666ff7fffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x66666666ff7fffff, 0x7fffffff00008000, x30, x1, 1456, x3)

inst_125:
// rs1_w0_val == 4194304, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x02000000400000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x02000000400000, 0x00b50555555556, x30, x1, 1472, x3)

inst_126:
// rs1_w0_val == -262145, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x20000000fffbffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x20000000fffbffff, 0xffffff7f00000400, x30, x1, 1488, x3)

inst_127:
// rs1_w0_val == -131073, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xdffffffffffdffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xdffffffffffdffff, 0x20000000ffffffbf, x30, x1, 1504, x3)

inst_128:
// rs1_w0_val == -65537, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xffbffffffffeffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xffbffffffffeffff, 0x400000ffffffdf, x30, x1, 1520, x3)

inst_129:
// rs1_w0_val == -257, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xffffeffffffffeff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xffffeffffffffeff, 0x00000602000000, x30, x1, 1536, x3)

inst_130:
// rs2_w0_val == -2147483648, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x4000000000004000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x4000000000004000, 0xaaaaaaaa80000000, x30, x1, 1552, x3)

inst_131:
// rs1_w0_val == -129, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x000400ffffff7f;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x000400ffffff7f, 0xffff4afc00000100, x30, x1, 1568, x3)

inst_132:
// rs1_w0_val == -65, rs2_w0_val == 134217728
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfffffffaffffffbf;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfffffffaffffffbf, 0x10000008000000, x30, x1, 1584, x3)

inst_133:
// rs2_w0_val == 268435456, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00000300000007;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00000300000007, 0xfff7ffff10000000, x30, x1, 1600, x3)

inst_134:
// rs1_w0_val == -17, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x002000ffffffef;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x002000ffffffef, 0x5555555400000003, x30, x1, 1616, x3)

inst_135:
// rs1_w0_val == -3, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfffffff6fffffffd;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfffffff6fffffffd, 0x00000333333334, x30, x1, 1632, x3)

inst_136:
// rs2_w0_val == 16777216, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00000600000080;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00000600000080, 0xfff7ffff01000000, x30, x1, 1648, x3)

inst_137:
// rs1_w0_val == 536870912, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x4000000020000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x4000000020000000, 0x008000fffffffe, x30, x1, 1664, x3)

inst_138:
// rs2_w0_val == 4194304, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xffffffdf00000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000000, 0xffffefff00400000, x30, x1, 1680, x3)

inst_139:
// rs2_w0_val == 1048576, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00000320000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00000320000000, 0x100000000100000, x30, x1, 1696, x3)

inst_140:
// rs1_w0_val == 134217728, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x00000008000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x00000008000000, 0xfffffffe00000020, x30, x1, 1712, x3)

inst_141:
// rs1_w0_val == 65536, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x04000000010000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x04000000010000, 0x00001000200000, x30, x1, 1728, x3)

inst_142:
// rs2_w0_val == 262144, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x02000010000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x02000010000000, 0x02000000040000, x30, x1, 1744, x3)

inst_143:
// rs2_w0_val == 131072, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xfeffffff3fffffff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xfeffffff3fffffff, 0xfffffeff00020000, x30, x1, 1760, x3)

inst_144:
// rs1_w0_val == 32768, 
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x8000000000008000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x8000000000008000, 0x00200055555555, x30, x1, 1776, x3)

inst_145:
// rs2_w1_val == 1431655765, rs1_w1_val == -1048577
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0xffeffffffffffff6;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffff6, 0x5555555533333333, x30, x1, 1792, x3)

inst_146:
// rs2_w1_val == 2147483647, rs2_w0_val == 512, rs1_w1_val == 2097152
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x20000080000000;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x20000080000000, 0x7fffffff00000200, x30, x1, 1808, x3)

inst_147:
// rs2_w1_val == -16777217, rs1_w0_val == -16385, rs2_w0_val == 67108864, rs1_w1_val == 8192
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x002000ffffbfff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x002000ffffbfff, 0xfeffffff04000000, x30, x1, 1824, x3)

inst_148:
// rs2_w1_val == -65, rs2_w0_val == 536870912, rs1_w0_val == -4097
// opcode: kmmac.u ; op1:x30; dest:x31; op1val:0x33333332ffffefff;  immval:$imm_val
TEST_PKRR_OP(kmmac.u, x31, x30, x29, 0x0000000000000000, 0x33333332ffffefff, 0xffffffbf20000000, x30, x1, 1840, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 232*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
