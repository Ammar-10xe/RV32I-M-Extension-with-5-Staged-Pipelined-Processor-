
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kabs8 instruction of the RISC-V RV64PZicsr extension for the kabs8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kabs8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1==x25, rd==x7, rs1_b0_val == -128, rs1_b3_val == 1, rs1_b2_val == 127, rs1_b4_val == 64, rs1_b7_val == -9, rs1_b5_val == -65
// opcode: kabs8 ; op1:x25; dest:x7; op1val:0xf707bf40017ff680;
TEST_PKR_OP( kabs8, x7, x25, 0x0000000000000000, 0xf707bf40017ff680, x25, x1, 0, x11)

inst_1:
// rs1==x5, rd==x19, rs1_b7_val == -86, rs1_b4_val == -65, rs1_b6_val == 8, rs1_b5_val == 127, rs1_b2_val == -5, rs1_b1_val == 127, rs1_b3_val == 8
// opcode: kabs8 ; op1:x5; dest:x19; op1val:0xaa087fbf08fb7f03;
TEST_PKR_OP( kabs8, x19, x5, 0x0000000000000000, 0xaa087fbf08fb7f03, x5, x1, 16, x11)

inst_2:
// rs1==x2, rd==x27, rs1_b7_val == 85, rs1_b5_val == 4, rs1_b4_val == 16, rs1_b0_val == 1, rs1_b2_val == 85
// opcode: kabs8 ; op1:x2; dest:x27; op1val:0x55f60410c0550701;
TEST_PKR_OP( kabs8, x27, x2, 0x0000000000000000, 0x55f60410c0550701, x2, x1, 32, x11)

inst_3:
// rs1==x27, rd==x20, rs1_b7_val == 127, rs1_b6_val == 1, rs1_b4_val == 0, rs1_b5_val == 16, rs1_b1_val == -86, rs1_b0_val == -1
// opcode: kabs8 ; op1:x27; dest:x20; op1val:0x7f0110000155aaff;
TEST_PKR_OP( kabs8, x20, x27, 0x0000000000000000, 0x7f0110000155aaff, x27, x1, 48, x11)

inst_4:
// rs1==x15, rd==x10, rs1_b7_val == -65, rs1_b5_val == 0, rs1_b6_val == -9, rs1_b1_val == -1, rs1_b0_val == 2
// opcode: kabs8 ; op1:x15; dest:x10; op1val:0xbff70040f67fff02;
TEST_PKR_OP( kabs8, x10, x15, 0x0000000000000000, 0xbff70040f67fff02, x15, x1, 64, x11)

inst_5:
// rs1==x22, rd==x16, rs1_b7_val == -33, rs1_b5_val == -86, rs1_b0_val == -86, rs1_b3_val == -2, rs1_b1_val == -65, rs1_b4_val == 127
// opcode: kabs8 ; op1:x22; dest:x16; op1val:0xdf09aa7ffe09bfaa;
TEST_PKR_OP( kabs8, x16, x22, 0x0000000000000000, 0xdf09aa7ffe09bfaa, x22, x1, 80, x11)

inst_6:
// rs1==x30, rd==x13, rs1_b7_val == -17, rs1_b1_val == -5, rs1_b4_val == -128, rs1_b5_val == 85, rs1_b6_val == -86, rs1_b3_val == 32
// opcode: kabs8 ; op1:x30; dest:x13; op1val:0xefaa55802007fbf6;
TEST_PKR_OP( kabs8, x13, x30, 0x0000000000000000, 0xefaa55802007fbf6, x30, x1, 96, x11)

inst_7:
// rs1==x31, rd==x17, rs1_b7_val == -5, rs1_b1_val == 2, rs1_b2_val == 2, rs1_b5_val == -9
// opcode: kabs8 ; op1:x31; dest:x17; op1val:0xfbf6f780f80202f6;
TEST_PKR_OP( kabs8, x17, x31, 0x0000000000000000, 0xfbf6f780f80202f6, x31, x1, 112, x11)

inst_8:
// rs1==x6, rd==x5, rs1_b7_val == -3, rs1_b0_val == -2, rs1_b5_val == 1, rs1_b1_val == -128, rs1_b2_val == -2
// opcode: kabs8 ; op1:x6; dest:x5; op1val:0xfd08010609fe80fe;
TEST_PKR_OP( kabs8, x5, x6, 0x0000000000000000, 0xfd08010609fe80fe, x6, x1, 128, x11)

inst_9:
// rs1==x12, rd==x26, rs1_b7_val == -2, rs1_b0_val == 8, rs1_b3_val == -1, rs1_b5_val == -17
// opcode: kabs8 ; op1:x12; dest:x26; op1val:0xfe08ef05fffc8008;
TEST_PKR_OP( kabs8, x26, x12, 0x0000000000000000, 0xfe08ef05fffc8008, x12, x1, 144, x11)

inst_10:
// rs1==x17, rd==x8, rs1_b7_val == -128, rs1_b2_val == 64, rs1_b3_val == 16
// opcode: kabs8 ; op1:x17; dest:x8; op1val:0x8006efc01040f802;
TEST_PKR_OP( kabs8, x8, x17, 0x0000000000000000, 0x8006efc01040f802, x17, x1, 160, x11)

inst_11:
// rs1==x18, rd==x9, rs1_b7_val == 64, rs1_b4_val == -1, rs1_b0_val == -65, rs1_b1_val == 4, rs1_b3_val == -9
// opcode: kabs8 ; op1:x18; dest:x9; op1val:0x40f8f7fff73f04bf;
TEST_PKR_OP( kabs8, x9, x18, 0x0000000000000000, 0x40f8f7fff73f04bf, x18, x1, 176, x11)

inst_12:
// rs1==x16, rd==x15, rs1_b7_val == 32, rs1_b0_val == -5
// opcode: kabs8 ; op1:x16; dest:x15; op1val:0x2006c005050203fb;
TEST_PKR_OP( kabs8, x15, x16, 0x0000000000000000, 0x2006c005050203fb, x16, x1, 192, x11)

inst_13:
// rs1==x4, rd==x22, rs1_b7_val == 16, rs1_b5_val == -1, rs1_b6_val == -3, rs1_b1_val == 16, rs1_b4_val == 4
// opcode: kabs8 ; op1:x4; dest:x22; op1val:0x10fdff0410fb10c0;
TEST_PKR_OP( kabs8, x22, x4, 0x0000000000000000, 0x10fdff0410fb10c0, x4, x1, 208, x11)

inst_14:
// rs1==x19, rd==x25, rs1_b7_val == 8, rs1_b4_val == -33, rs1_b5_val == 64
// opcode: kabs8 ; op1:x19; dest:x25; op1val:0x80340df01fa05c0;
TEST_PKR_OP( kabs8, x25, x19, 0x0000000000000000, 0x80340df01fa05c0, x19, x1, 224, x11)

inst_15:
// rs1==x26, rd==x21, rs1_b7_val == 4, rs1_b3_val == 85
// opcode: kabs8 ; op1:x26; dest:x21; op1val:0x4f8f9095505bfc0;
TEST_PKR_OP( kabs8, x21, x26, 0x0000000000000000, 0x4f8f9095505bfc0, x26, x1, 240, x11)

inst_16:
// rs1==x3, rd==x0, rs1_b7_val == 2, rs1_b0_val == -3
// opcode: kabs8 ; op1:x3; dest:x0; op1val:0x2fc037f0909f8fd;
TEST_PKR_OP( kabs8, x0, x3, 0x0000000000000000, 0x2fc037f0909f8fd, x3, x1, 256, x11)

inst_17:
// rs1==x29, rd==x12, rs1_b7_val == 1, rs1_b2_val == -33
// opcode: kabs8 ; op1:x29; dest:x12; op1val:0x1c0f8fa20df0980;
TEST_PKR_OP( kabs8, x12, x29, 0x0000000000000000, 0x1c0f8fa20df0980, x29, x1, 272, x11)

inst_18:
// rs1==x8, rd==x18, rs1_b7_val == 0, rs1_b5_val == -128, rs1_b3_val == -33, rs1_b4_val == -2
// opcode: kabs8 ; op1:x8; dest:x18; op1val:0x0380fedff802fb;
TEST_PKR_OP( kabs8, x18, x8, 0x0000000000000000, 0x0380fedff802fb, x8, x1, 288, x11)

inst_19:
// rs1==x23, rd==x30, rs1_b7_val == -1, rs1_b1_val == 0, rs1_b6_val == 2
// opcode: kabs8 ; op1:x23; dest:x30; op1val:0xff02f906f65500f8;
TEST_PKR_OP( kabs8, x30, x23, 0x0000000000000000, 0xff02f906f65500f8, x23, x1, 304, x11)

inst_20:
// rs1==x14, rd==x3, rs1_b6_val == 85, rs1_b1_val == 32
// opcode: kabs8 ; op1:x14; dest:x3; op1val:0xf955fac0103f20fa;
TEST_PKR_OP( kabs8, x3, x14, 0x0000000000000000, 0xf955fac0103f20fa, x14, x1, 320, x11)

inst_21:
// rs1==x0, rd==x24, rs1_b6_val == 127, rs1_b3_val == -3
// opcode: kabs8 ; op1:x0; dest:x24; op1val:0xfa7f80fefd40aaf9;
TEST_PKR_OP( kabs8, x24, x0, 0x0000000000000000, 0xfa7f80fefd40aaf9, x0, x1, 336, x5)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_22:
// rs1==x10, rd==x28, rs1_b6_val == -65, rs1_b2_val == -65, rs1_b1_val == 85
// opcode: kabs8 ; op1:x10; dest:x28; op1val:0x80bf030655bf5502;
TEST_PKR_OP( kabs8, x28, x10, 0x0000000000000000, 0x80bf030655bf5502, x10, x3, 0, x5)

inst_23:
// rs1==x21, rd==x2, rs1_b6_val == -33, rs1_b0_val == 16, rs1_b1_val == -33, rs1_b5_val == -33
// opcode: kabs8 ; op1:x21; dest:x2; op1val:0xdfdfdffafdc0df10;
TEST_PKR_OP( kabs8, x2, x21, 0x0000000000000000, 0xdfdfdffafdc0df10, x21, x3, 16, x5)

inst_24:
// rs1==x13, rd==x23, rs1_b6_val == -17, rs1_b4_val == -9, rs1_b2_val == -128
// opcode: kabs8 ; op1:x13; dest:x23; op1val:0x80eff9f705800909;
TEST_PKR_OP( kabs8, x23, x13, 0x0000000000000000, 0x80eff9f705800909, x13, x3, 32, x5)

inst_25:
// rs1==x20, rd==x6, rs1_b1_val == -3, rs1_b5_val == -5, rs1_b4_val == 32, rs1_b3_val == 0
// opcode: kabs8 ; op1:x20; dest:x6; op1val:0x805fb2000fbfd09;
TEST_PKR_OP( kabs8, x6, x20, 0x0000000000000000, 0x805fb2000fbfd09, x20, x3, 48, x5)

inst_26:
// rs1==x24, rd==x11, rs1_b1_val == -2, rs1_b4_val == -17, rs1_b2_val == 8
// opcode: kabs8 ; op1:x24; dest:x11; op1val:0x55df55ef0108fe08;
TEST_PKR_OP( kabs8, x11, x24, 0x0000000000000000, 0x55df55ef0108fe08, x24, x3, 64, x5)

inst_27:
// rs1==x7, rd==x31, rs1_b1_val == 64, rs1_b2_val == -17
// opcode: kabs8 ; op1:x7; dest:x31; op1val:0x2001f8f93fef40fe;
TEST_PKR_OP( kabs8, x31, x7, 0x0000000000000000, 0x2001f8f93fef40fe, x7, x3, 80, x5)

inst_28:
// rs1==x1, rd==x29, rs1_b1_val == 8, rs1_b3_val == -5, rs1_b0_val == 127
// opcode: kabs8 ; op1:x1; dest:x29; op1val:0x7ff780bffbf6087f;
TEST_PKR_OP( kabs8, x29, x1, 0x0000000000000000, 0x7ff780bffbf6087f, x1, x3, 96, x5)

inst_29:
// rs1==x28, rd==x14, rs1_b1_val == 1, rs1_b3_val == 64, rs1_b4_val == -86, rs1_b2_val == 0
// opcode: kabs8 ; op1:x28; dest:x14; op1val:0xefefefaa400001f9;
TEST_PKR_OP( kabs8, x14, x28, 0x0000000000000000, 0xefefefaa400001f9, x28, x3, 112, x5)

inst_30:
// rs1==x11, rd==x4, rs1_b0_val == 85, 
// opcode: kabs8 ; op1:x11; dest:x4; op1val:0x9c0efbf01094055;
TEST_PKR_OP( kabs8, x4, x11, 0x0000000000000000, 0x9c0efbf01094055, x11, x3, 128, x5)

inst_31:
// rs1==x9, rd==x1, rs1_b0_val == -33, rs1_b1_val == -17
// opcode: kabs8 ; op1:x9; dest:x1; op1val:0x3fbfff03087fefdf;
TEST_PKR_OP( kabs8, x1, x9, 0x0000000000000000, 0x3fbfff03087fefdf, x9, x3, 144, x5)

inst_32:
// rs1_b0_val == -17, rs1_b6_val == -1, rs1_b5_val == -2
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0x1fffebfc00502ef;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0x1fffebfc00502ef, x30, x3, 160, x5)

inst_33:
// rs1_b0_val == -9, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xf70700fafe0004f7;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0xf70700fafe0004f7, x30, x3, 176, x5)

inst_34:
// rs1_b0_val == 64, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xf7f7107f09093f40;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0xf7f7107f09093f40, x30, x3, 192, x5)

inst_35:
// rs1_b0_val == 32, rs1_b4_val == 1
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0x7fdfdf010106f820;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0x7fdfdf010106f820, x30, x3, 208, x5)

inst_36:
// rs1_b0_val == 4, rs1_b3_val == -17
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xaaf9df20eff60304;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0xaaf9df20eff60304, x30, x3, 224, x5)

inst_37:
// rs1_b6_val == -5, rs1_b5_val == 2, rs1_b4_val == 8, rs1_b2_val == 32
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xf7fb0208f7200503;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0xf7fb0208f7200503, x30, x3, 240, x5)

inst_38:
// rs1_b6_val == -2, rs1_b5_val == 8
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xfffe083f07203fff;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0xfffe083f07203fff, x30, x3, 256, x5)

inst_39:
// rs1_b4_val == -5, rs1_b6_val == 4
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0x504c0fbf6f90008;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0x504c0fbf6f90008, x30, x3, 272, x5)

inst_40:
// rs1_b4_val == -3, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0x7dffffd107f0940;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0x7dffffd107f0940, x30, x3, 288, x5)

inst_41:
// rs1_b4_val == 2, rs1_b3_val == -65
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xeffc0302bf55063f;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0xeffc0302bf55063f, x30, x3, 304, x5)

inst_42:
// rs1_b3_val == -86, rs1_b2_val == -1
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xf9f804feaaff10ff;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0xf9f804feaaff10ff, x30, x3, 320, x5)

inst_43:
// rs1_b3_val == 127, rs1_b2_val == 1
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xfefef7df7f01fc20;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0xfefef7df7f01fc20, x30, x3, 336, x5)

inst_44:
// rs1_b3_val == -128, rs1_b1_val == -9
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xff04000380fff707;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0xff04000380fff707, x30, x3, 352, x5)

inst_45:
// rs1_b0_val == 0, rs1_b6_val == 32
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xfa207fc0fcfe0500;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0xfa207fc0fcfe0500, x30, x3, 368, x5)

inst_46:
// rs1_b6_val == 64, rs1_b2_val == -9
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xf6407f0940f7bf40;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0xf6407f0940f7bf40, x30, x3, 384, x5)

inst_47:
// rs1_b3_val == 4, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xf9aa3ff804f640fd;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0xf9aa3ff804f640fd, x30, x3, 400, x5)

inst_48:
// rs1_b3_val == 2, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0x3f0505ff0206f7f6;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0x3f0505ff0206f7f6, x30, x3, 416, x5)

inst_49:
// rs1_b6_val == 16, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0x61004fbfb3f7f10;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0x61004fbfb3f7f10, x30, x3, 432, x5)

inst_50:
// rs1_b2_val == -86, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xaa067f0340aa403f;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0xaa067f0340aa403f, x30, x3, 448, x5)

inst_51:
// rs1_b6_val == 0, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xff00c00308ff0100;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0xff00c00308ff0100, x30, x3, 464, x5)

inst_52:
// rs1_b5_val == -3, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xff04fdaafddf3f02;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0xff04fdaafddf3f02, x30, x3, 480, x5)

inst_53:
// rs1_b2_val == 16, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0x4fb3ffedf10f804;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0x4fb3ffedf10f804, x30, x3, 496, x5)

inst_54:
// rs1_b2_val == 4, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0x4f804100504fafa;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0x4f804100504fafa, x30, x3, 512, x5)

inst_55:
// rs1_b2_val == -3, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0x7f0305fffcfd0605;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0x7f0305fffcfd0605, x30, x3, 528, x5)

inst_56:
// rs1_b5_val == 32, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0x27f20fdaa8003df;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0x27f20fdaa8003df, x30, x3, 544, x5)

inst_57:
// rs1_b4_val == 85, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xf6fc095501042006;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0xf6fc095501042006, x30, x3, 560, x5)

inst_58:
// rs1_b6_val == -128, 
// opcode: kabs8 ; op1:x30; dest:x31; op1val:0xef80f608bffd03fe;
TEST_PKR_OP( kabs8, x31, x30, 0x0000000000000000, 0xef80f608bffd03fe, x30, x3, 576, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 44*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 74*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
