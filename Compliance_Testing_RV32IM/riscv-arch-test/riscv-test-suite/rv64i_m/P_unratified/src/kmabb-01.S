
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmabb instruction of the RISC-V RV64PZicsr extension for the kmabb covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmabb)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rd != rs2, rs1==x30, rs2==x25, rd==x30, rs1_h0_val == -32768, rs2_h1_val == 4, rs1_h3_val != rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs1_h3_val == 1, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs2_h3_val == 8192, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val == 1, rs2_h2_val == 8192, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -8193
// opcode: kmabb ; op1:x30; op2:x25; dest:x30; op1val:0x010001dfff8000;  op2val:0x2000200000040009
TEST_PKRR_OP(kmabb, x30, x30, x25, 0x0000000000000000, 0x010001dfff8000, 0x2000200000040009, x30, x15, 0, x18)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x3, rd==x31, rs1_h3_val == rs2_h3_val, rs2_h2_val == -1, rs2_h1_val == -21846, rs2_h0_val == 32, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h3_val == -21846, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h0_val == 4096, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == -21846, rs1_h1_val == -17
// opcode: kmabb ; op1:x2; op2:x3; dest:x31; op1val:0xaaaafffcffef1000;  op2val:0xaaaaffffaaaa0020
TEST_PKRR_OP(kmabb, x31, x2, x3, 0x0000000000000000, 0xaaaafffcffef1000, 0xaaaaffffaaaa0020, x2, x15, 16, x18)

inst_2:
// rs1 == rs2 != rd, rs1==x28, rs2==x28, rd==x19, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h1_val == -5, rs2_h2_val == -65, rs2_h1_val == -1025, rs1_h3_val == -4097, rs1_h2_val == 0, rs1_h0_val == -513, rs2_h0_val == 256
// opcode: kmabb ; op1:x28; op2:x28; dest:x19; op1val:0xefff0000fffbfdff;  op2val:0x3fffffbffbff0100
TEST_PKRR_OP(kmabb, x19, x28, x28, 0x0000000000000000, 0xefff0000fffbfdff, 0x3fffffbffbff0100, x28, x15, 32, x18)

inst_3:
// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h2_val == -8193, rs2_h1_val == 1, rs1_h3_val == 4, rs2_h0_val == -4097, rs1_h0_val == 0, rs1_h2_val == -3
// opcode: kmabb ; op1:x7; op2:x7; dest:x7; op1val:0x04fffdfffa0000;  op2val:0xfff6dfff0001efff
TEST_PKRR_OP(kmabb, x7, x7, x7, 0x0000000000000000, 0x04fffdfffa0000, 0xfff6dfff0001efff, x7, x15, 48, x18)

inst_4:
// rs2 == rd != rs1, rs1==x20, rs2==x13, rd==x13, rs1_h2_val == rs2_h2_val, rs1_h1_val == 128, rs2_h0_val == -65, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h3_val == 128, rs1_h0_val < 0 and rs2_h0_val < 0
// opcode: kmabb ; op1:x20; op2:x13; dest:x13; op1val:0xfff6fff800808000;  op2val:0x80fff8fff8ffbf
TEST_PKRR_OP(kmabb, x13, x20, x13, 0x0000000000000000, 0xfff6fff800808000, 0x80fff8fff8ffbf, x20, x15, 64, x18)

inst_5:
// rs1==x12, rs2==x14, rd==x27, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val == 512, rs2_h3_val == -129, rs1_h1_val == 2048, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 16384, rs1_h0_val == -2049, rs2_h2_val == 2, rs1_h2_val == -32768
// opcode: kmabb ; op1:x12; op2:x14; dest:x27; op1val:0x20080000800f7ff;  op2val:0xff7f000240000100
TEST_PKRR_OP(kmabb, x27, x12, x14, 0x0000000000000000, 0x20080000800f7ff, 0xff7f000240000100, x12, x15, 80, x18)

inst_6:
// rs1==x5, rs2==x23, rd==x10, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h3_val == -3, rs1_h2_val == 16, rs1_h0_val == 8, rs1_h1_val == 32767, rs2_h1_val == 128
// opcode: kmabb ; op1:x5; op2:x23; dest:x10; op1val:0xaaaa00107fff0008;  op2val:0xfffdfff600800005
TEST_PKRR_OP(kmabb, x10, x5, x23, 0x0000000000000000, 0xaaaa00107fff0008, 0xfffdfff600800005, x5, x15, 96, x18)

inst_7:
// rs1==x21, rs2==x8, rd==x16, rs1_h1_val == rs2_h1_val, rs1_h1_val == 32, rs1_h2_val == -2049, rs2_h2_val == 512, rs2_h0_val == 512, rs1_h3_val == -9, rs2_h1_val == 32
// opcode: kmabb ; op1:x21; op2:x8; dest:x16; op1val:0xfff7f7ff0020f7ff;  op2val:0x80020000200200
TEST_PKRR_OP(kmabb, x16, x21, x8, 0x0000000000000000, 0xfff7f7ff0020f7ff, 0x80020000200200, x21, x15, 112, x18)

inst_8:
// rs1==x4, rs2==x20, rd==x2, rs1_h0_val == rs2_h0_val, rs1_h2_val == 8, rs2_h2_val == -5, rs2_h3_val == 4096
// opcode: kmabb ; op1:x4; op2:x20; dest:x2; op1val:0x010008fff83fff;  op2val:0x1000fffbfff83fff
TEST_PKRR_OP(kmabb, x2, x4, x20, 0x0000000000000000, 0x010008fff83fff, 0x1000fffbfff83fff, x4, x15, 128, x18)

inst_9:
// rs1==x13, rs2==x11, rd==x12, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h3_val == 4, rs1_h2_val == -1, rs1_h0_val == 1, rs2_h1_val == 4096
// opcode: kmabb ; op1:x13; op2:x11; dest:x12; op1val:0xfff8ffff00060001;  op2val:0x04dfff1000fff6
TEST_PKRR_OP(kmabb, x12, x13, x11, 0x0000000000000000, 0xfff8ffff00060001, 0x04dfff1000fff6, x13, x15, 144, x18)

inst_10:
// rs1==x23, rs2==x6, rd==x24, rs2_h3_val == 21845, rs2_h0_val == 2
// opcode: kmabb ; op1:x23; op2:x6; dest:x24; op1val:0xefffc000fff93fff;  op2val:0x5555ffff00030002
TEST_PKRR_OP(kmabb, x24, x23, x6, 0x0000000000000000, 0xefffc000fff93fff, 0x5555ffff00030002, x23, x15, 160, x18)

inst_11:
// rs1==x9, rs2==x5, rd==x11, rs2_h3_val == 32767, rs2_h2_val == -3, rs2_h1_val == -17, rs1_h1_val == -4097
// opcode: kmabb ; op1:x9; op2:x5; dest:x11; op1val:0x01f7ffefff1000;  op2val:0x7ffffffdffef3fff
TEST_PKRR_OP(kmabb, x11, x9, x5, 0x0000000000000000, 0x01f7ffefff1000, 0x7ffffffdffef3fff, x9, x15, 176, x18)

inst_12:
// rs1==x6, rs2==x31, rd==x17, rs2_h3_val == -16385, rs1_h0_val == -65, rs2_h1_val == -2049, rs2_h2_val == -17, rs2_h0_val == -1025, rs1_h2_val == -2
// opcode: kmabb ; op1:x6; op2:x31; dest:x17; op1val:0xeffffffe0007ffbf;  op2val:0xbfffffeff7fffbff
TEST_PKRR_OP(kmabb, x17, x6, x31, 0x0000000000000000, 0xeffffffe0007ffbf, 0xbfffffeff7fffbff, x6, x15, 192, x18)

inst_13:
// rs1==x1, rs2==x21, rd==x23, rs2_h3_val == -8193, rs1_h3_val == 1024, rs1_h2_val == -9, rs1_h1_val == -2049
// opcode: kmabb ; op1:x1; op2:x21; dest:x23; op1val:0x400fff7f7fffffa;  op2val:0xdfffdfff0004c000
TEST_PKRR_OP(kmabb, x23, x1, x21, 0x0000000000000000, 0x400fff7f7fffffa, 0xdfffdfff0004c000, x1, x15, 208, x18)

inst_14:
// rs1==x18, rs2==x10, rd==x29, rs2_h3_val == -4097, rs2_h1_val == -5, rs2_h0_val == 8192, rs1_h3_val == 128
// opcode: kmabb ; op1:x18; op2:x10; dest:x29; op1val:0x80fffe3ffffffa;  op2val:0xefff0006fffb2000
TEST_PKRR_OP(kmabb, x29, x18, x10, 0x0000000000000000, 0x80fffe3ffffffa, 0xefff0006fffb2000, x18, x15, 224, x11)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_15:
// rs1==x24, rs2==x1, rd==x0, rs2_h3_val == -2049, rs1_h3_val == 32, rs1_h1_val == 256, rs2_h1_val == 64, rs1_h2_val == -5, rs2_h2_val == 21845
// opcode: kmabb ; op1:x24; op2:x1; dest:x0; op1val:0x20fffb01000008;  op2val:0xf7ff55550040fffc
TEST_PKRR_OP(kmabb, x0, x24, x1, 0x0000000000000000, 0x20fffb01000008, 0xf7ff55550040fffc, x24, x7, 0, x11)

inst_16:
// rs1==x22, rs2==x4, rd==x26, rs2_h3_val == -1025, rs1_h3_val == 21845, rs1_h1_val == -21846, rs2_h1_val == -257, rs1_h0_val == -1
// opcode: kmabb ; op1:x22; op2:x4; dest:x26; op1val:0x5555fff9aaaaffff;  op2val:0xfbfffffffeff0003
TEST_PKRR_OP(kmabb, x26, x22, x4, 0x0000000000000000, 0x5555fff9aaaaffff, 0xfbfffffffeff0003, x22, x7, 16, x11)

inst_17:
// rs1==x0, rs2==x17, rd==x21, rs2_h3_val == -513, rs1_h1_val == -3, rs1_h2_val == -17, rs1_h0_val == 16384, rs2_h2_val == 128
// opcode: kmabb ; op1:x0; op2:x17; dest:x21; op1val:0x400ffeffffd4000;  op2val:0xfdff0080fbff3fff
TEST_PKRR_OP(kmabb, x21, x0, x17, 0x0000000000000000, 0x400ffeffffd4000, 0xfdff0080fbff3fff, x0, x7, 32, x11)

inst_18:
// rs1==x10, rs2==x2, rd==x14, rs2_h3_val == -257, rs2_h1_val == -2, rs1_h2_val == -513, rs2_h2_val == -257, rs1_h0_val == -129
// opcode: kmabb ; op1:x10; op2:x2; dest:x14; op1val:0xc000fdff0020ff7f;  op2val:0xfefffefffffe3fff
TEST_PKRR_OP(kmabb, x14, x10, x2, 0x0000000000000000, 0xc000fdff0020ff7f, 0xfefffefffffe3fff, x10, x7, 48, x11)

inst_19:
// rs1==x8, rs2==x22, rd==x6, rs2_h3_val == -65, rs2_h2_val == -16385, rs2_h1_val == -1, rs1_h1_val == 16384, rs1_h3_val == -16385, rs2_h0_val == -513, rs1_h2_val == -16385
// opcode: kmabb ; op1:x8; op2:x22; dest:x6; op1val:0xbfffbfff40000006;  op2val:0xffbfbffffffffdff
TEST_PKRR_OP(kmabb, x6, x8, x22, 0x0000000000000000, 0xbfffbfff40000006, 0xffbfbffffffffdff, x8, x7, 64, x11)

inst_20:
// rs1==x26, rs2==x16, rd==x25, rs2_h3_val == -33, rs2_h0_val == -21846, rs1_h0_val == 32, rs2_h1_val == 8192, rs1_h2_val == -257, rs2_h2_val == 16, rs1_h3_val == 4096
// opcode: kmabb ; op1:x26; op2:x16; dest:x25; op1val:0x1000feff00200020;  op2val:0xffdf00102000aaaa
TEST_PKRR_OP(kmabb, x25, x26, x16, 0x0000000000000000, 0x1000feff00200020, 0xffdf00102000aaaa, x26, x7, 80, x11)

inst_21:
// rs1==x16, rs2==x30, rd==x15, rs2_h3_val == -17, rs2_h0_val == -2049, rs1_h1_val == 64, rs1_h3_val == -33
// opcode: kmabb ; op1:x16; op2:x30; dest:x15; op1val:0xffdf00100040ffff;  op2val:0xffefffef3ffff7ff
TEST_PKRR_OP(kmabb, x15, x16, x30, 0x0000000000000000, 0xffdf00100040ffff, 0xffefffef3ffff7ff, x16, x7, 96, x11)

inst_22:
// rs1==x25, rs2==x12, rd==x5, rs2_h3_val == -9, rs2_h2_val == -4097, rs1_h0_val == 4, rs1_h2_val == 4, rs2_h1_val == 8
// opcode: kmabb ; op1:x25; op2:x12; dest:x5; op1val:0x030004fff60004;  op2val:0xfff7efff0008ffbf
TEST_PKRR_OP(kmabb, x5, x25, x12, 0x0000000000000000, 0x030004fff60004, 0xfff7efff0008ffbf, x25, x7, 112, x11)

inst_23:
// rs1==x17, rs2==x15, rd==x8, rs2_h3_val == -5, rs2_h1_val == -513
// opcode: kmabb ; op1:x17; op2:x15; dest:x8; op1val:0xaaaa0003fff8ffff;  op2val:0xfffb0006fdffaaaa
TEST_PKRR_OP(kmabb, x8, x17, x15, 0x0000000000000000, 0xaaaa0003fff8ffff, 0xfffb0006fdffaaaa, x17, x7, 128, x11)

inst_24:
// rs1==x29, rs2==x0, rd==x1, rs2_h3_val == -2, rs2_h0_val == -16385, rs2_h1_val == 21845, rs1_h2_val == 1024, rs2_h2_val == -513
// opcode: kmabb ; op1:x29; op2:x0; dest:x1; op1val:0xc0000400fffb0003;  op2val:0xfffefdff5555bfff
TEST_PKRR_OP(kmabb, x1, x29, x0, 0x0000000000000000, 0xc0000400fffb0003, 0xfffefdff5555bfff, x29, x7, 144, x11)

inst_25:
// rs1==x15, rs2==x29, rd==x20, rs2_h3_val == -32768, rs2_h1_val == 2
// opcode: kmabb ; op1:x15; op2:x29; dest:x20; op1val:0x800006fffcff7f;  op2val:0x8000fffb0002efff
TEST_PKRR_OP(kmabb, x20, x15, x29, 0x0000000000000000, 0x800006fffcff7f, 0x8000fffb0002efff, x15, x7, 160, x11)

inst_26:
// rs1==x31, rs2==x26, rd==x9, rs2_h3_val == 16384, rs2_h1_val == 16, rs2_h0_val == 0
// opcode: kmabb ; op1:x31; op2:x26; dest:x9; op1val:0x03fffc3ffffff9;  op2val:0x4000bfff00100000
TEST_PKRR_OP(kmabb, x9, x31, x26, 0x0000000000000000, 0x03fffc3ffffff9, 0x4000bfff00100000, x31, x7, 176, x11)

inst_27:
// rs1==x3, rs2==x9, rd==x4, rs2_h3_val == 2048, rs1_h2_val == 32, rs2_h0_val == 16, rs1_h1_val == -257, rs1_h3_val == -17
// opcode: kmabb ; op1:x3; op2:x9; dest:x4; op1val:0xffef0020feff8000;  op2val:0x800ffef00800010
TEST_PKRR_OP(kmabb, x4, x3, x9, 0x0000000000000000, 0xffef0020feff8000, 0x800ffef00800010, x3, x7, 192, x11)

inst_28:
// rs1==x27, rs2==x24, rd==x22, rs2_h3_val == 1024, rs1_h1_val == -129, rs1_h0_val == 512, rs1_h2_val == 128
// opcode: kmabb ; op1:x27; op2:x24; dest:x22; op1val:0x200080ff7f0200;  op2val:0x40002000020fff9
TEST_PKRR_OP(kmabb, x22, x27, x24, 0x0000000000000000, 0x200080ff7f0200, 0x40002000020fff9, x27, x7, 208, x11)

inst_29:
// rs1==x14, rs2==x19, rd==x3, rs2_h3_val == 512, rs2_h2_val == -33, rs1_h3_val == 256
// opcode: kmabb ; op1:x14; op2:x19; dest:x3; op1val:0x100fffffffdff7f;  op2val:0x200ffdf1000efff
TEST_PKRR_OP(kmabb, x3, x14, x19, 0x0000000000000000, 0x100fffffffdff7f, 0x200ffdf1000efff, x14, x7, 224, x11)

inst_30:
// rs1==x11, rs2==x27, rd==x18, rs2_h3_val == 256, rs2_h1_val == 32767, rs2_h0_val == 8, rs1_h3_val == 16, rs1_h0_val == 128, rs1_h2_val == -1025, rs2_h2_val == 32
// opcode: kmabb ; op1:x11; op2:x27; dest:x18; op1val:0x10fbfffffd0080;  op2val:0x10000207fff0008
TEST_PKRR_OP(kmabb, x18, x11, x27, 0x0000000000000000, 0x10fbfffffd0080, 0x10000207fff0008, x11, x7, 240, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x19, rs2==x18, rd==x28, rs2_h3_val == 64, rs1_h2_val == -8193, rs1_h0_val == -2, rs2_h2_val == -129
// opcode: kmabb ; op1:x19; op2:x18; dest:x28; op1val:0x09dfffeffffffe;  op2val:0x40ff7ffff9fffc
TEST_PKRR_OP(kmabb, x28, x19, x18, 0x0000000000000000, 0x09dfffeffffffe, 0x40ff7ffff9fffc, x19, x1, 0, x2)

inst_32:
// rs2_h3_val == 32, rs1_h3_val == 64, rs2_h2_val == -1025
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x40f7ff01000020;  op2val:0x20fbfffffa0020
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x40f7ff01000020, 0x20fbfffffa0020, x30, x1, 16, x2)

inst_33:
// rs2_h3_val == 16, rs2_h1_val == 256, rs2_h0_val == 4
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x200020c0000006;  op2val:0x10fbff01000004
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x200020c0000006, 0x10fbff01000004, x30, x1, 32, x2)

inst_34:
// rs2_h3_val == 8, rs2_h0_val == -9, rs2_h2_val == -32768
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x80800000094000;  op2val:0x0880000007fff7
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x80800000094000, 0x0880000007fff7, x30, x1, 48, x2)

inst_35:
// rs1_h1_val == -2, rs1_h3_val == 2, rs1_h0_val == -21846, rs2_h0_val == 128
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x02fffffffeaaaa;  op2val:0xbffffffb00010080
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x02fffffffeaaaa, 0xbffffffb00010080, x30, x1, 64, x2)

inst_36:
// rs1_h1_val == -32768, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffc8000fffe;  op2val:0x03fffc0005bfff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xfffafffc8000fffe, 0x03fffc0005bfff, x30, x1, 80, x2)

inst_37:
// rs1_h1_val == 8192, rs1_h2_val == -129, rs1_h0_val == 32767
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xbfffff7f20007fff;  op2val:0x80000300070007
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xbfffff7f20007fff, 0x80000300070007, x30, x1, 96, x2)

inst_38:
// rs1_h1_val == 4096, rs2_h1_val == 512, rs2_h3_val == -1, rs1_h2_val == -21846
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfff7aaaa1000fffc;  op2val:0xfffffffc0200fff7
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xfff7aaaa1000fffc, 0xfffffffc0200fff7, x30, x1, 112, x2)

inst_39:
// rs1_h1_val == 1024, rs2_h0_val == 16384, rs1_h0_val == 2, rs1_h3_val == 2048
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x800001004000002;  op2val:0x5555ff7f00204000
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x800001004000002, 0x5555ff7f00204000, x30, x1, 128, x2)

inst_40:
// rs1_h1_val == 512, rs1_h3_val == 8192, rs2_h0_val == -257
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x2000002002000003;  op2val:0xffdffffc0006feff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x2000002002000003, 0xffdffffc0006feff, x30, x1, 144, x2)

inst_41:
// rs1_h1_val == 16, rs2_h2_val == -21846, rs1_h3_val == -65, rs1_h0_val == 256, rs2_h1_val == 2048
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffbf001000100100;  op2val:0x4000aaaa0800ffbf
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xffbf001000100100, 0x4000aaaa0800ffbf, x30, x1, 160, x2)

inst_42:
// rs1_h1_val == 8, rs2_h1_val == 1024, rs1_h3_val == -5
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffbf7ff0008f7ff;  op2val:0x04fff80400fffa
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xfffbf7ff0008f7ff, 0x04fff80400fffa, x30, x1, 176, x2)

inst_43:
// rs1_h1_val == 4, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x07000400040003;  op2val:0x09fdff4000aaaa
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x07000400040003, 0x09fdff4000aaaa, x30, x1, 192, x2)

inst_44:
// rs1_h1_val == 2, rs2_h1_val == -32768, rs2_h0_val == 1024
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xefff00000002fff6;  op2val:0x06555580000400
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xefff00000002fff6, 0x06555580000400, x30, x1, 208, x2)

inst_45:
// rs1_h1_val == 1, rs2_h3_val == 1, rs1_h0_val == -5
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffe0001fffb;  op2val:0x0100050080fff6
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xeffffffe0001fffb, 0x0100050080fff6, x30, x1, 224, x2)

inst_46:
// rs1_h1_val == 0, rs1_h3_val == -1025
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfbff00030000c000;  op2val:0xfff8000700800002
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xfbff00030000c000, 0xfff8000700800002, x30, x1, 240, x2)

inst_47:
// rs1_h1_val == -1, rs2_h0_val == 21845
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x04fffeffff0000;  op2val:0xffef5555fffc5555
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x04fffeffff0000, 0xffef5555fffc5555, x30, x1, 256, x2)

inst_48:
// rs1_h0_val == 21845, rs2_h0_val == -1, rs1_h3_val == 32767
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff800085555;  op2val:0xf7fffff90006ffff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x7ffffff800085555, 0xf7fffff90006ffff, x30, x1, 272, x2)

inst_49:
// rs1_h0_val == -16385, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xbfff80000002bfff;  op2val:0xfff7fffdaaaafdff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xbfff80000002bfff, 0xfff7fffdaaaafdff, x30, x1, 288, x2)

inst_50:
// rs1_h0_val == -8193, rs2_h0_val == -32768
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x40000043fffdfff;  op2val:0xaaaabffffbff8000
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x40000043fffdfff, 0xaaaabffffbff8000, x30, x1, 304, x2)

inst_51:
// rs1_h0_val == -4097, rs1_h2_val == 64, rs1_h1_val == -16385
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x55550040bfffefff;  op2val:0xfffabfff3fffaaaa
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x55550040bfffefff, 0xfffabfff3fffaaaa, x30, x1, 320, x2)

inst_52:
// rs1_h0_val == -1025, rs2_h0_val == 64
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x2000fff77ffffbff;  op2val:0x40fffc20000040
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x2000fff77ffffbff, 0x40fffc20000040, x30, x1, 336, x2)

inst_53:
// rs1_h0_val == -257, rs2_h1_val == -129
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x01fff60007feff;  op2val:0xfff7c000ff7ffff7
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x01fff60007feff, 0xfff7c000ff7ffff7, x30, x1, 352, x2)

inst_54:
// rs1_h0_val == -33, rs1_h3_val == -257, rs2_h0_val == -3
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0020aaaaffdf;  op2val:0xfeff00070200fffd
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xfeff0020aaaaffdf, 0xfeff00070200fffd, x30, x1, 368, x2)

inst_55:
// rs1_h0_val == -17, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x020009fffdffef;  op2val:0x800000700100040
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x020009fffdffef, 0x800000700100040, x30, x1, 384, x2)

inst_56:
// rs1_h0_val == -9, rs1_h3_val == -1
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffff00040001fff7;  op2val:0x2000ff7f0002ffbf
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xffff00040001fff7, 0x2000ff7f0002ffbf, x30, x1, 400, x2)

inst_57:
// rs1_h0_val == -3, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffdfc0000080fffd;  op2val:0x06fff6fdff0000
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xffdfc0000080fffd, 0x06fff6fdff0000, x30, x1, 416, x2)

inst_58:
// rs1_h0_val == 8192, rs2_h3_val == 2, rs2_h1_val == -16385
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffbfffd2000;  op2val:0x020010bffffeff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xffdffffbfffd2000, 0x020010bffffeff, x30, x1, 432, x2)

inst_59:
// rs1_h0_val == 2048, rs1_h2_val == 512
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x2000020001000800;  op2val:0xf7fffbfffbff0004
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x2000020001000800, 0xf7fffbfffbff0004, x30, x1, 448, x2)

inst_60:
// rs2_h1_val == 0, rs1_h2_val == 2
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x0500020080fffd;  op2val:0x400020000002000
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x0500020080fffd, 0x400020000002000, x30, x1, 464, x2)

inst_61:
// rs2_h0_val == 32767, rs1_h3_val == -129
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xff7f040008005555;  op2val:0x1000fffb00107fff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xff7f040008005555, 0x1000fffb00107fff, x30, x1, 480, x2)

inst_62:
// rs2_h0_val == -8193, rs1_h1_val == -33
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x070002ffdfc000;  op2val:0xfffb00100800dfff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x070002ffdfc000, 0xfffb00100800dfff, x30, x1, 496, x2)

inst_63:
// rs2_h0_val == -129, rs1_h2_val == 256
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x8000100fffabfff;  op2val:0xdffffff84000ff7f
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x8000100fffabfff, 0xdffffff84000ff7f, x30, x1, 512, x2)

inst_64:
// rs2_h0_val == -33, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffef0080ffdf0009;  op2val:0x20003fff0040ffdf
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xffef0080ffdf0009, 0x20003fff0040ffdf, x30, x1, 528, x2)

inst_65:
// rs2_h0_val == -17, rs2_h2_val == 0
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x0100080100dfff;  op2val:0x10000000100ffef
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x0100080100dfff, 0x10000000100ffef, x30, x1, 544, x2)

inst_66:
// rs2_h0_val == -5, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xefffffefff7f0002;  op2val:0xffbfffff0080fffb
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xefffffefff7f0002, 0xffbfffff0080fffb, x30, x1, 560, x2)

inst_67:
// rs2_h0_val == -2, rs2_h1_val == -8193
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00010200fff8;  op2val:0x070020dffffffe
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xffbf00010200fff8, 0x070020dffffffe, x30, x1, 576, x2)

inst_68:
// rs2_h0_val == 4096, rs2_h3_val == 0
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x01fffa7fff1000;  op2val:0x00fff6fffb1000
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x01fffa7fff1000, 0x00fff6fffb1000, x30, x1, 592, x2)

inst_69:
// rs2_h0_val == 2048, rs2_h2_val == 1024
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x5555000200070080;  op2val:0xfffb0400ffef0800
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x5555000200070080, 0xfffb0400ffef0800, x30, x1, 608, x2)

inst_70:
// rs2_h0_val == 1, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x1000fff6feff0005;  op2val:0x400ffbf00070001
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x1000fff6feff0005, 0x400ffbf00070001, x30, x1, 624, x2)

inst_71:
// rs1_h0_val == 1024, rs2_h2_val == 8, rs2_h1_val == -33
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x070020fffa0400;  op2val:0xfffe0008ffdfff7f
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x070020fffa0400, 0xfffe0008ffdfff7f, x30, x1, 640, x2)

inst_72:
// rs1_h3_val == -8193, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xdfff00040002ffdf;  op2val:0x4000009fffcffbf
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xdfff00040002ffdf, 0x4000009fffcffbf, x30, x1, 656, x2)

inst_73:
// rs1_h0_val == 64, rs2_h1_val == -4097, rs1_h1_val == -9
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x040010fff70040;  op2val:0x40000000efff7fff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x040010fff70040, 0x40000000efff7fff, x30, x1, 672, x2)

inst_74:
// rs1_h3_val == -2049, rs1_h2_val == 8192
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff2000aaaafbff;  op2val:0x200007fff87fff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xf7ff2000aaaafbff, 0x200007fff87fff, x30, x1, 688, x2)

inst_75:
// rs1_h0_val == 16, rs1_h2_val == -33, rs2_h2_val == 4096
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xc000ffdffff90010;  op2val:0x1001000ff7fc000
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xc000ffdffff90010, 0x1001000ff7fc000, x30, x1, 704, x2)

inst_76:
// rs1_h3_val == -513, rs1_h1_val == 21845
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffc5555f7ff;  op2val:0x2000fbff0002fffe
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xfdfffffc5555f7ff, 0x2000fbff0002fffe, x30, x1, 720, x2)

inst_77:
// rs2_h2_val == -2049, rs1_h3_val == -3
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0005fffdfffd;  op2val:0xffbff7fffdffffdf
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xfffd0005fffdfffd, 0xffbff7fffdffffdf, x30, x1, 736, x2)

inst_78:
// rs1_h3_val == 8, rs1_h2_val == 16384
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x0840002000fbff;  op2val:0xfdffc000fffe0000
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x0840002000fbff, 0xfdffc000fffe0000, x30, x1, 752, x2)

inst_79:
// rs2_h2_val == -9, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x55553fff00001000;  op2val:0x00fff7dfffffdf
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x55553fff00001000, 0x00fff7dfffffdf, x30, x1, 768, x2)

inst_80:
// rs1_h3_val == 0, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x00fbff80000200;  op2val:0xfbff200000400200
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x00fbff80000200, 0xfbff200000400200, x30, x1, 784, x2)

inst_81:
// rs2_h2_val == -2, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffdc0000004;  op2val:0xfffafffefffb0003
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x7ffffffdc0000004, 0xfffafffefffb0003, x30, x1, 800, x2)

inst_82:
// rs1_h2_val == 21845, rs2_h2_val == 32767
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x0855550001aaaa;  op2val:0x067ffffffbfffc
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x0855550001aaaa, 0x067ffffffbfffc, x30, x1, 816, x2)

inst_83:
// rs1_h2_val == 32767, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfff87ffffefffffb;  op2val:0xfffcfffc0008fff6
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xfff87ffffefffffb, 0xfffcfffc0008fff6, x30, x1, 832, x2)

inst_84:
// rs2_h2_val == 16384, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x2000400fffffffc;  op2val:0x3fff40000000fffb
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x2000400fffffffc, 0x3fff40000000fffb, x30, x1, 848, x2)

inst_85:
// rs1_h2_val == -4097, rs2_h1_val == -65
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x3fffefff40000007;  op2val:0xfeff0200ffbfbfff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x3fffefff40000007, 0xfeff0200ffbfbfff, x30, x1, 864, x2)

inst_86:
// rs2_h2_val == 2048, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x04c000fffbfffa;  op2val:0x030800ffbfc000
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x04c000fffbfffa, 0x030800ffbfc000, x30, x1, 880, x2)

inst_87:
// rs1_h1_val == -1025, rs1_h3_val == -2
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffefefffbffaaaa;  op2val:0x060006f7ffff7f
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xfffefefffbffaaaa, 0x060006f7ffff7f, x30, x1, 896, x2)

inst_88:
// rs1_h2_val == 4096, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfff910000005efff;  op2val:0x06fffdfffcfdff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xfff910000005efff, 0x06fffdfffcfdff, x30, x1, 912, x2)

inst_89:
// rs1_h2_val == 2048, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xefff0800fff60002;  op2val:0xfffc0200c0000005
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xefff0800fff60002, 0xfffc0200c0000005, x30, x1, 928, x2)

inst_90:
// rs2_h1_val == -9, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff8ffff1000;  op2val:0xffbffff6fff7fffc
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xffbffff8ffff1000, 0xffbffff6fff7fffc, x30, x1, 944, x2)

inst_91:
// rs2_h1_val == -3, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0007fffffbff;  op2val:0x090005fffd3fff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x3fff0007fffffbff, 0x090005fffd3fff, x30, x1, 960, x2)

inst_92:
// rs2_h2_val == 4, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff04000006c000;  op2val:0xfdff00040004fff6
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xf7ff04000006c000, 0xfdff00040004fff6, x30, x1, 976, x2)

inst_93:
// rs1_h3_val == 16384, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x4000000820000008;  op2val:0x2000020000040008
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x4000000820000008, 0x2000020000040008, x30, x1, 992, x2)

inst_94:
// rs2_h2_val == 256, rs1_h3_val == -32768
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffeff7fffbf;  op2val:0x060100fffdbfff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x8000fffeff7fffbf, 0x060100fffdbfff, x30, x1, 1008, x2)

inst_95:
// rs2_h2_val == 64, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x02fff8fff72000;  op2val:0x400004010000020
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x02fff8fff72000, 0x400004010000020, x30, x1, 1024, x2)

inst_96:
// rs1_h2_val == -65, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffaffbfffef0800;  op2val:0x1002002000fffe
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xfffaffbfffef0800, 0x1002002000fffe, x30, x1, 1040, x2)

inst_97:
// rs1_h1_val == -513, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x408000fdfffff7;  op2val:0xfbffeffffeff0005
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x408000fdfffff7, 0xfbffeffffeff0005, x30, x1, 1056, x2)

inst_98:
// rs1_h1_val == -65, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0080ffbffff6;  op2val:0xffdfff7f0200fff8
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xffbf0080ffbffff6, 0xffdfff7f0200fff8, x30, x1, 1072, x2)

inst_99:
// rs2_h2_val == 1, 
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x80fffefffdfffa;  op2val:0x07000101000040
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x80fffefffdfffa, 0x07000101000040, x30, x1, 1088, x2)

inst_100:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h1_val == -5, rs2_h2_val == -65, rs2_h1_val == -1025, rs1_h3_val == -4097, rs1_h2_val == 0, rs1_h0_val == -513, rs2_h0_val == 256
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xefff0000fffbfdff;  op2val:0x3fffffbffbff0100
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xefff0000fffbfdff, 0x3fffffbffbff0100, x30, x1, 1104, x2)

inst_101:
// rs2_h3_val == -513, rs1_h1_val == -3, rs1_h2_val == -17, rs1_h0_val == 16384, rs2_h2_val == 128
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0x400ffeffffd4000;  op2val:0xfdff0080fbff3fff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0x400ffeffffd4000, 0xfdff0080fbff3fff, x30, x1, 1120, x2)

inst_102:
// rs2_h3_val == -2, rs2_h0_val == -16385, rs2_h1_val == 21845, rs1_h2_val == 1024, rs2_h2_val == -513
// opcode: kmabb ; op1:x30; op2:x29; dest:x31; op1val:0xc0000400fffb0003;  op2val:0xfffefdff5555bfff
TEST_PKRR_OP(kmabb, x31, x30, x29, 0x0000000000000000, 0xc0000400fffb0003, 0xfffefdff5555bfff, x30, x1, 1136, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 144*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
