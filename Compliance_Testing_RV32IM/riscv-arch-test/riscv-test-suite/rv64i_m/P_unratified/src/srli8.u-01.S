
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srli8.u instruction of the RISC-V RV64PZicsr extension for the srli8.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srli8.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x13,signature_x13_1)

inst_0:
// rs1 == rd, rs1==x25, rd==x25, rs1_b0_val == 0, imm_val == 5, rs1_b7_val == 170, rs1_b2_val == 170, rs1_b1_val == 16, rs1_b5_val == 8
// opcode: srli8.u ; op1:x25; dest:x25; op1val:0xaa0b08130faa1000;  immval:0x5
TEST_IMM_OP( srli8.u, x25, x25, 0x0000000000000000, 0xaa0b08130faa1000, 0x5, x13, 0, x1)

inst_1:
// rs1 != rd, rs1==x2, rd==x6, imm_val == 7, rs1_b5_val == 2, rs1_b0_val == 32, rs1_b1_val == 239, rs1_b7_val == 253, rs1_b2_val == 251, rs1_b6_val == 85
// opcode: srli8.u ; op1:x2; dest:x6; op1val:0xfd55020c11fbef20;  immval:0x7
TEST_IMM_OP( srli8.u, x6, x2, 0x0000000000000000, 0xfd55020c11fbef20, 0x7, x13, 8, x1)

inst_2:
// rs1==x7, rd==x30, imm_val == 6, rs1_b0_val == 16, rs1_b1_val == 247, rs1_b4_val == 247, rs1_b6_val == 0, rs1_b5_val == 64, rs1_b3_val == 239
// opcode: srli8.u ; op1:x7; dest:x30; op1val:0x120040f7ef0ef710;  immval:0x6
TEST_IMM_OP( srli8.u, x30, x7, 0x0000000000000000, 0x120040f7ef0ef710, 0x6, x13, 16, x1)

inst_3:
// rs1==x29, rd==x3, imm_val == 4, rs1_b5_val == 127, rs1_b2_val == 128, rs1_b6_val == 128
// opcode: srli8.u ; op1:x29; dest:x3; op1val:0xa807f0f0c80f705;  immval:0x4
TEST_IMM_OP( srli8.u, x3, x29, 0x0000000000000000, 0xa807f0f0c80f705, 0x4, x13, 24, x1)

inst_4:
// rs1==x9, rd==x31, imm_val == 3, rs1_b6_val == 239, rs1_b1_val == 64, rs1_b7_val == 254, rs1_b2_val == 254, rs1_b0_val == 127, rs1_b5_val == 254
// opcode: srli8.u ; op1:x9; dest:x31; op1val:0xfeeffe0f0cfe407f;  immval:0x3
TEST_IMM_OP( srli8.u, x31, x9, 0x0000000000000000, 0xfeeffe0f0cfe407f, 0x3, x13, 32, x1)

inst_5:
// rs1==x12, rd==x5, imm_val == 2, rs1_b3_val == 0, rs1_b2_val == 8, rs1_b7_val == 191, rs1_b1_val == 127
// opcode: srli8.u ; op1:x12; dest:x5; op1val:0xbf550a0e00087f00;  immval:0x2
TEST_IMM_OP( srli8.u, x5, x12, 0x0000000000000000, 0xbf550a0e00087f00, 0x2, x13, 40, x1)

inst_6:
// rs1==x4, rd==x21, imm_val == 1, rs1_b2_val == 253, rs1_b0_val == 251, rs1_b3_val == 223
// opcode: srli8.u ; op1:x4; dest:x21; op1val:0x30b1206dffd0efb;  immval:0x1
TEST_IMM_OP( srli8.u, x21, x4, 0x0000000000000000, 0x30b1206dffd0efb, 0x1, x13, 48, x1)

inst_7:
// rs1==x6, rd==x10, imm_val == 0, rs1_b4_val == 32, rs1_b1_val == 2, rs1_b3_val == 253
// opcode: srli8.u ; op1:x6; dest:x10; op1val:0x6110d20fd120203;  immval:0x0
TEST_IMM_OP( srli8.u, x10, x6, 0x0000000000000000, 0x6110d20fd120203, 0x0, x13, 56, x1)

inst_8:
// rs1==x27, rd==x8, rs1_b7_val == 85, rs1_b3_val == 128, rs1_b6_val == 2
// opcode: srli8.u ; op1:x27; dest:x8; op1val:0x55027f0b80fb1105;  immval:0x4
TEST_IMM_OP( srli8.u, x8, x27, 0x0000000000000000, 0x55027f0b80fb1105, 0x4, x13, 64, x1)

inst_9:
// rs1==x8, rd==x12, rs1_b7_val == 127, rs1_b5_val == 253, rs1_b0_val == 254, rs1_b2_val == 1, rs1_b4_val == 128
// opcode: srli8.u ; op1:x8; dest:x12; op1val:0x7f0bfd80800106fe;  immval:0x0
TEST_IMM_OP( srli8.u, x12, x8, 0x0000000000000000, 0x7f0bfd80800106fe, 0x0, x13, 72, x1)

inst_10:
// rs1==x0, rd==x17, rs1_b7_val == 223, rs1_b3_val == 170, rs1_b6_val == 247, rs1_b1_val == 32, rs1_b2_val == 223
// opcode: srli8.u ; op1:x0; dest:x17; op1val:0xdff70d20aadf200b;  immval:0x6
TEST_IMM_OP( srli8.u, x17, x0, 0x0000000000000000, 0xdff70d20aadf200b, 0x6, x13, 80, x1)

inst_11:
// rs1==x16, rd==x15, rs1_b7_val == 239, rs1_b0_val == 128, rs1_b4_val == 239, rs1_b2_val == 247, rs1_b6_val == 255
// opcode: srli8.u ; op1:x16; dest:x15; op1val:0xefff0eef00f72080;  immval:0x4
TEST_IMM_OP( srli8.u, x15, x16, 0x0000000000000000, 0xefff0eef00f72080, 0x4, x13, 88, x1)

inst_12:
// rs1==x5, rd==x29, rs1_b7_val == 247, rs1_b3_val == 85
// opcode: srli8.u ; op1:x5; dest:x29; op1val:0xf7000b05550d0b0f;  immval:0x6
TEST_IMM_OP( srli8.u, x29, x5, 0x0000000000000000, 0xf7000b05550d0b0f, 0x6, x13, 96, x1)

inst_13:
// rs1==x14, rd==x27, rs1_b7_val == 251, 
// opcode: srli8.u ; op1:x14; dest:x27; op1val:0xfb0c7f0a120c1280;  immval:0x3
TEST_IMM_OP( srli8.u, x27, x14, 0x0000000000000000, 0xfb0c7f0a120c1280, 0x3, x13, 104, x1)

inst_14:
// rs1==x18, rd==x23, rs1_b7_val == 128, rs1_b1_val == 170, rs1_b0_val == 8, rs1_b4_val == 170, rs1_b6_val == 8, rs1_b2_val == 16
// opcode: srli8.u ; op1:x18; dest:x23; op1val:0x800802aa0a10aa08;  immval:0x0
TEST_IMM_OP( srli8.u, x23, x18, 0x0000000000000000, 0x800802aa0a10aa08, 0x0, x13, 112, x1)

inst_15:
// rs1==x28, rd==x0, rs1_b7_val == 64, rs1_b6_val == 4, rs1_b5_val == 247
// opcode: srli8.u ; op1:x28; dest:x0; op1val:0x4004f70def110510;  immval:0x7
TEST_IMM_OP( srli8.u, x0, x28, 0x0000000000000000, 0x4004f70def110510, 0x7, x13, 120, x1)

inst_16:
// rs1==x31, rd==x22, rs1_b7_val == 32, rs1_b5_val == 170, rs1_b1_val == 1, rs1_b4_val == 8
// opcode: srli8.u ; op1:x31; dest:x22; op1val:0x2013aa08aa0c010d;  immval:0x5
TEST_IMM_OP( srli8.u, x22, x31, 0x0000000000000000, 0x2013aa08aa0c010d, 0x5, x13, 128, x1)

inst_17:
// rs1==x20, rd==x9, rs1_b7_val == 16, rs1_b4_val == 64, rs1_b1_val == 4
// opcode: srli8.u ; op1:x20; dest:x9; op1val:0x10131140aa0d040b;  immval:0x0
TEST_IMM_OP( srli8.u, x9, x20, 0x0000000000000000, 0x10131140aa0d040b, 0x0, x13, 136, x1)

inst_18:
// rs1==x17, rd==x18, rs1_b7_val == 8, rs1_b0_val == 2, rs1_b2_val == 255
// opcode: srli8.u ; op1:x17; dest:x18; op1val:0x8ff050edfff1002;  immval:0x3
TEST_IMM_OP( srli8.u, x18, x17, 0x0000000000000000, 0x8ff050edfff1002, 0x3, x13, 144, x1)

inst_19:
// rs1==x11, rd==x24, rs1_b7_val == 4, rs1_b6_val == 223, rs1_b3_val == 64, rs1_b0_val == 255, rs1_b1_val == 128, rs1_b5_val == 239
// opcode: srli8.u ; op1:x11; dest:x24; op1val:0x4dfef03400380ff;  immval:0x2
TEST_IMM_OP( srli8.u, x24, x11, 0x0000000000000000, 0x4dfef03400380ff, 0x2, x13, 152, x1)

inst_20:
// rs1==x1, rd==x20, rs1_b7_val == 2, rs1_b0_val == 191, rs1_b5_val == 16
// opcode: srli8.u ; op1:x1; dest:x20; op1val:0x2001009aa0901bf;  immval:0x4
TEST_IMM_OP( srli8.u, x20, x1, 0x0000000000000000, 0x2001009aa0901bf, 0x4, x13, 160, x6)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_21:
// rs1==x10, rd==x7, rs1_b7_val == 1, rs1_b0_val == 64, rs1_b5_val == 1, rs1_b4_val == 254, rs1_b3_val == 1
// opcode: srli8.u ; op1:x10; dest:x7; op1val:0x10801fe010f4040;  immval:0x4
TEST_IMM_OP( srli8.u, x7, x10, 0x0000000000000000, 0x10801fe010f4040, 0x4, x5, 0, x6)

inst_22:
// rs1==x19, rd==x4, rs1_b7_val == 255, rs1_b5_val == 255, rs1_b0_val == 170, rs1_b3_val == 16
// opcode: srli8.u ; op1:x19; dest:x4; op1val:0xff12fffe100d13aa;  immval:0x0
TEST_IMM_OP( srli8.u, x4, x19, 0x0000000000000000, 0xff12fffe100d13aa, 0x0, x5, 8, x6)

inst_23:
// rs1==x3, rd==x19, rs1_b7_val == 0, rs1_b6_val == 191, rs1_b5_val == 128, rs1_b2_val == 0, rs1_b3_val == 8
// opcode: srli8.u ; op1:x3; dest:x19; op1val:0xbf800e08000b11;  immval:0x3
TEST_IMM_OP( srli8.u, x19, x3, 0x0000000000000000, 0xbf800e08000b11, 0x3, x5, 16, x6)

inst_24:
// rs1==x21, rd==x28, rs1_b6_val == 170, 
// opcode: srli8.u ; op1:x21; dest:x28; op1val:0x7faaf7f70d050702;  immval:0x2
TEST_IMM_OP( srli8.u, x28, x21, 0x0000000000000000, 0x7faaf7f70d050702, 0x2, x5, 24, x6)

inst_25:
// rs1==x22, rd==x14, rs1_b1_val == 85, rs1_b0_val == 253
// opcode: srli8.u ; op1:x22; dest:x14; op1val:0x9551306081055fd;  immval:0x0
TEST_IMM_OP( srli8.u, x14, x22, 0x0000000000000000, 0x9551306081055fd, 0x0, x5, 32, x6)

inst_26:
// rs1==x13, rd==x2, rs1_b1_val == 191, rs1_b2_val == 191
// opcode: srli8.u ; op1:x13; dest:x2; op1val:0x55aa050e01bfbffe;  immval:0x3
TEST_IMM_OP( srli8.u, x2, x13, 0x0000000000000000, 0x55aa050e01bfbffe, 0x3, x5, 40, x6)

inst_27:
// rs1==x24, rd==x13, rs1_b1_val == 223, rs1_b6_val == 32
// opcode: srli8.u ; op1:x24; dest:x13; op1val:0xef2008aa0e03df11;  immval:0x7
TEST_IMM_OP( srli8.u, x13, x24, 0x0000000000000000, 0xef2008aa0e03df11, 0x7, x5, 48, x6)

inst_28:
// rs1==x23, rd==x26, rs1_b1_val == 251, 
// opcode: srli8.u ; op1:x23; dest:x26; op1val:0xaa11ff400e03fb0f;  immval:0x0
TEST_IMM_OP( srli8.u, x26, x23, 0x0000000000000000, 0xaa11ff400e03fb0f, 0x0, x5, 56, x6)

inst_29:
// rs1==x30, rd==x11, rs1_b1_val == 253, rs1_b4_val == 253
// opcode: srli8.u ; op1:x30; dest:x11; op1val:0xef07effd0c0efd07;  immval:0x2
TEST_IMM_OP( srli8.u, x11, x30, 0x0000000000000000, 0xef07effd0c0efd07, 0x2, x5, 64, x6)

inst_30:
// rs1==x26, rd==x16, rs1_b1_val == 254, rs1_b2_val == 85, rs1_b6_val == 254
// opcode: srli8.u ; op1:x26; dest:x16; op1val:0x1fe06aa0755fe0a;  immval:0x0
TEST_IMM_OP( srli8.u, x16, x26, 0x0000000000000000, 0x1fe06aa0755fe0a, 0x0, x5, 72, x6)

inst_31:
// rs1==x15, rd==x1, rs1_b1_val == 8, rs1_b4_val == 16, rs1_b2_val == 2
// opcode: srli8.u ; op1:x15; dest:x1; op1val:0x90e0f1008020808;  immval:0x0
TEST_IMM_OP( srli8.u, x1, x15, 0x0000000000000000, 0x90e0f1008020808, 0x0, x5, 80, x6)

inst_32:
// rs1_b1_val == 255, rs1_b6_val == 1, rs1_b4_val == 255
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xdf01ffff0a0cfffe;  immval:0x2
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0xdf01ffff0a0cfffe, 0x2, x5, 88, x6)

inst_33:
// rs1_b1_val == 0, rs1_b3_val == 32
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x130c7fff20f7000d;  immval:0x3
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0x130c7fff20f7000d, 0x3, x5, 96, x6)

inst_34:
// rs1_b0_val == 85, rs1_b2_val == 32, rs1_b6_val == 16
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x810aa0b12200755;  immval:0x3
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0x810aa0b12200755, 0x3, x5, 104, x6)

inst_35:
// rs1_b0_val == 223, rs1_b6_val == 64
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x1240aafe122020df;  immval:0x6
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0x1240aafe122020df, 0x6, x5, 112, x6)

inst_36:
// rs1_b0_val == 239, rs1_b5_val == 0
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xdf0100ef100ff7ef;  immval:0x5
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0xdf0100ef100ff7ef, 0x5, x5, 120, x6)

inst_37:
// rs1_b0_val == 247, rs1_b6_val == 127
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xaa7f050720aa04f7;  immval:0x7
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0xaa7f050720aa04f7, 0x7, x5, 128, x6)

inst_38:
// rs1_b6_val == 251, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xfefbf740ef0cdf80;  immval:0x3
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0xfefbf740ef0cdf80, 0x3, x5, 136, x6)

inst_39:
// rs1_b5_val == 4, rs1_b3_val == 254
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x7ffb0405fe091205;  immval:0x1
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0x7ffb0405fe091205, 0x1, x5, 144, x6)

inst_40:
// rs1_b4_val == 85, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xfe0d015500bf0d13;  immval:0x5
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0xfe0d015500bf0d13, 0x5, x5, 152, x6)

inst_41:
// rs1_b4_val == 127, rs1_b3_val == 251
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x620127ffbdfffdf;  immval:0x7
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0x620127ffbdfffdf, 0x7, x5, 160, x6)

inst_42:
// rs1_b4_val == 191, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x80d03bf03f70b55;  immval:0x3
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0x80d03bf03f70b55, 0x3, x5, 168, x6)

inst_43:
// rs1_b4_val == 223, rs1_b0_val == 4
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x4005df5511fb04;  immval:0x3
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0x4005df5511fb04, 0x3, x5, 176, x6)

inst_44:
// rs1_b4_val == 251, rs1_b2_val == 4, rs1_b3_val == 247
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x120ef7fbf704070c;  immval:0x4
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0x120ef7fbf704070c, 0x4, x5, 184, x6)

inst_45:
// rs1_b4_val == 4, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x10030604aabfff0b;  immval:0x3
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0x10030604aabfff0b, 0x3, x5, 192, x6)

inst_46:
// rs1_b4_val == 2, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xa0f0102400207ff;  immval:0x5
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0xa0f0102400207ff, 0x5, x5, 200, x6)

inst_47:
// rs1_b4_val == 1, rs1_b5_val == 191
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x206bf01aa80ef0c;  immval:0x7
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0x206bf01aa80ef0c, 0x7, x5, 208, x6)

inst_48:
// rs1_b4_val == 0, rs1_b5_val == 223
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xb02df00061203ff;  immval:0x3
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0xb02df00061203ff, 0x3, x5, 216, x6)

inst_49:
// rs1_b6_val == 253, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x6fd0b0701ff0a80;  immval:0x7
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0x6fd0b0701ff0a80, 0x7, x5, 224, x6)

inst_50:
// rs1_b0_val == 1, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xa12ef1100010501;  immval:0x7
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0xa12ef1100010501, 0x7, x5, 232, x6)

inst_51:
// rs1_b3_val == 4, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x209ef0c04bf077f;  immval:0x6
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0x209ef0c04bf077f, 0x6, x5, 240, x6)

inst_52:
// rs1_b3_val == 2, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x7f07bffe020303f7;  immval:0x2
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0x7f07bffe020303f7, 0x2, x5, 248, x6)

inst_53:
// rs1_b3_val == 255, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xaa110b08ff110013;  immval:0x1
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0xaa110b08ff110013, 0x1, x5, 256, x6)

inst_54:
// rs1_b2_val == 127, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xfe000002027f2055;  immval:0x0
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0xfe000002027f2055, 0x0, x5, 264, x6)

inst_55:
// rs1_b5_val == 85, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xf1055110c05ffff;  immval:0x6
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0xf1055110c05ffff, 0x6, x5, 272, x6)

inst_56:
// rs1_b2_val == 239, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xfe0c03ffef4010;  immval:0x1
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0xfe0c03ffef4010, 0x1, x5, 280, x6)

inst_57:
// rs1_b2_val == 64, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x10ef7f0911400c0f;  immval:0x6
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0x10ef7f0911400c0f, 0x6, x5, 288, x6)

inst_58:
// rs1_b5_val == 251, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x10bfb55400d13fd;  immval:0x4
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0x10bfb55400d13fd, 0x4, x5, 296, x6)

inst_59:
// rs1_b3_val == 127, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xf70e0a407f802000;  immval:0x1
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0xf70e0a407f802000, 0x1, x5, 304, x6)

inst_60:
// rs1_b3_val == 191, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x1041155bf050203;  immval:0x0
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0x1041155bf050203, 0x0, x5, 312, x6)

inst_61:
// rs1_b5_val == 32, 
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xeff2080127fff04;  immval:0x3
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0xeff2080127fff04, 0x3, x5, 320, x6)

inst_62:
// rs1_b7_val == 223, rs1_b3_val == 170, rs1_b6_val == 247, rs1_b1_val == 32, rs1_b2_val == 223
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0xdff70d20aadf200b;  immval:0x6
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0xdff70d20aadf200b, 0x6, x5, 328, x6)

inst_63:
// rs1_b7_val == 64, rs1_b6_val == 4, rs1_b5_val == 247
// opcode: srli8.u ; op1:x30; dest:x31; op1val:0x4004f70def110510;  immval:0x7
TEST_IMM_OP( srli8.u, x31, x30, 0x0000000000000000, 0x4004f70def110510, 0x7, x5, 336, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 43*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
