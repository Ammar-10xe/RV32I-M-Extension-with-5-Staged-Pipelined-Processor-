
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kdmabb instruction of the RISC-V RV64PZicsr extension for the kdmabb covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kdmabb)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x26, rs2==x13, rd==x26, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h1_val == 1, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h2_val == 1, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h1_val == -1, rs1_h0_val < 0 and rs2_h0_val < 0
// opcode: kdmabb ; op1:x26; op2:x13; dest:x26; op1val:0x030001ffff8000;  op2val:0x0600090001fffa
TEST_PKRR_OP(kdmabb, x26, x26, x13, 0x0000000000000000, 0x030001ffff8000, 0x0600090001fffa, x26, x1, 0, x4)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x17, rs2==x15, rd==x24, rs1_h3_val == rs2_h3_val, rs1_h1_val == -1025, rs2_h2_val == -4097, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h0_val == 32767, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h3_val == -16385, rs1_h0_val == 512, rs2_h1_val == 2048, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == -129, rs2_h3_val == -16385
// opcode: kdmabb ; op1:x17; op2:x15; dest:x24; op1val:0xbfffff7ffbff0200;  op2val:0xbfffefff08007fff
TEST_PKRR_OP(kdmabb, x24, x17, x15, 0x0000000000000000, 0xbfffff7ffbff0200, 0xbfffefff08007fff, x17, x1, 16, x4)

inst_2:
// rs1 == rs2 != rd, rs1==x22, rs2==x22, rd==x15, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == 512, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val == -1025, rs1_h1_val == 2, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 21845, rs2_h2_val == 32, rs1_h2_val == -32768
// opcode: kdmabb ; op1:x22; op2:x22; dest:x15; op1val:0xfbff800000025555;  op2val:0x3fff002002000005
TEST_PKRR_OP(kdmabb, x15, x22, x22, 0x0000000000000000, 0xfbff800000025555, 0x3fff002002000005, x22, x1, 32, x4)

inst_3:
// rs1 == rs2 == rd, rs1==x3, rs2==x3, rd==x3, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h3_val == -257, rs2_h1_val == -2049, rs1_h0_val == 4096, rs2_h2_val == -9, rs1_h2_val == 0, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: kdmabb ; op1:x3; op2:x3; dest:x3; op1val:0x03000000021000;  op2val:0xfefffff7f7fffff8
TEST_PKRR_OP(kdmabb, x3, x3, x3, 0x0000000000000000, 0x03000000021000, 0xfefffff7f7fffff8, x3, x1, 48, x4)

inst_4:
// rs2 == rd != rs1, rs1==x15, rs2==x21, rd==x21, rs1_h2_val == rs2_h2_val, rs2_h0_val == 16, rs2_h2_val == 8, rs1_h2_val == 8, rs2_h3_val == 1024, rs1_h1_val == 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h3_val == -32768, rs1_h0_val == -513
// opcode: kdmabb ; op1:x15; op2:x21; dest:x21; op1val:0x800000080000fdff;  op2val:0x400000800050010
TEST_PKRR_OP(kdmabb, x21, x15, x21, 0x0000000000000000, 0x800000080000fdff, 0x400000800050010, x15, x1, 64, x4)

inst_5:
// rs1==x8, rs2==x19, rd==x6, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h3_val == 8, rs1_h1_val == 1024, rs1_h0_val == 2048, rs1_h2_val == 2, rs2_h1_val == -17, rs2_h2_val == -2, rs2_h3_val == -1, rs2_h0_val == 256
// opcode: kdmabb ; op1:x8; op2:x19; dest:x6; op1val:0x08000204000800;  op2val:0xfffffffeffef0100
TEST_PKRR_OP(kdmabb, x6, x8, x19, 0x0000000000000000, 0x08000204000800, 0xfffffffeffef0100, x8, x1, 80, x4)

inst_6:
// rs1==x18, rs2==x10, rd==x9, rs1_h1_val == rs2_h1_val, rs2_h2_val == -8193, rs2_h0_val == 4, rs2_h1_val == -65, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == 32, rs1_h2_val == -33, rs1_h1_val == -65
// opcode: kdmabb ; op1:x18; op2:x10; dest:x9; op1val:0x07ffdfffbf0020;  op2val:0x07dfffffbf0004
TEST_PKRR_OP(kdmabb, x9, x18, x10, 0x0000000000000000, 0x07ffdfffbf0020, 0x07dfffffbf0004, x18, x1, 96, x4)

inst_7:
// rs1==x31, rs2==x17, rd==x8, rs1_h0_val == rs2_h0_val, rs2_h3_val == 0, rs2_h0_val == -2049, rs1_h2_val == -8193, rs1_h0_val == -2049, rs2_h2_val == 32767
// opcode: kdmabb ; op1:x31; op2:x17; dest:x8; op1val:0xfbffdffffffcf7ff;  op2val:0x007fff0005f7ff
TEST_PKRR_OP(kdmabb, x8, x31, x17, 0x0000000000000000, 0xfbffdffffffcf7ff, 0x007fff0005f7ff, x31, x1, 112, x4)

inst_8:
// rs1==x13, rs2==x27, rd==x5, rs2_h3_val == -21846, rs1_h3_val == 21845, rs2_h1_val == -33, rs2_h2_val == -513, rs2_h0_val == -32768
// opcode: kdmabb ; op1:x13; op2:x27; dest:x5; op1val:0x55550006fff60200;  op2val:0xaaaafdffffdf8000
TEST_PKRR_OP(kdmabb, x5, x13, x27, 0x0000000000000000, 0x55550006fff60200, 0xaaaafdffffdf8000, x13, x1, 128, x4)

inst_9:
// rs1==x11, rs2==x2, rd==x0, rs2_h3_val == 21845, rs1_h0_val == -33, rs2_h1_val == -16385, rs2_h2_val == -129, rs2_h0_val == -16385, rs1_h1_val == 128, rs1_h3_val == -3
// opcode: kdmabb ; op1:x11; op2:x2; dest:x0; op1val:0xfffd00080080ffdf;  op2val:0x5555ff7fbfffbfff
TEST_PKRR_OP(kdmabb, x0, x11, x2, 0x0000000000000000, 0xfffd00080080ffdf, 0x5555ff7fbfffbfff, x11, x1, 144, x4)

inst_10:
// rs1==x21, rs2==x20, rd==x7, rs2_h3_val == 32767, rs1_h1_val == 16384, rs1_h2_val == 32, rs1_h3_val == -4097, rs1_h0_val == 16, rs2_h1_val == -32768
// opcode: kdmabb ; op1:x21; op2:x20; dest:x7; op1val:0xefff002040000010;  op2val:0x7ffffffc80000003
TEST_PKRR_OP(kdmabb, x7, x21, x20, 0x0000000000000000, 0xefff002040000010, 0x7ffffffc80000003, x21, x1, 160, x4)

inst_11:
// rs1==x19, rs2==x9, rd==x18, rs2_h3_val == -8193, rs1_h1_val == -32768, rs2_h0_val == 128
// opcode: kdmabb ; op1:x19; op2:x9; dest:x18; op1val:0xfff6fff980000007;  op2val:0xdfff3fff00090080
TEST_PKRR_OP(kdmabb, x18, x19, x9, 0x0000000000000000, 0xfff6fff980000007, 0xdfff3fff00090080, x19, x1, 176, x4)

inst_12:
// rs1==x23, rs2==x18, rd==x29, rs2_h3_val == -4097, rs2_h1_val == -3, rs2_h0_val == -4097, rs1_h2_val == 256
// opcode: kdmabb ; op1:x23; op2:x18; dest:x29; op1val:0x80000100ffbf0005;  op2val:0xeffffffafffdefff
TEST_PKRR_OP(kdmabb, x29, x23, x18, 0x0000000000000000, 0x80000100ffbf0005, 0xeffffffafffdefff, x23, x1, 192, x4)

inst_13:
// rs1==x16, rs2==x26, rd==x17, rs2_h3_val == -2049, rs1_h2_val == 64, rs1_h3_val == -2049, rs1_h0_val == -1, rs2_h0_val == 16384, rs2_h1_val == 128
// opcode: kdmabb ; op1:x16; op2:x26; dest:x17; op1val:0xf7ff0040fff6ffff;  op2val:0xf7ff000600804000
TEST_PKRR_OP(kdmabb, x17, x16, x26, 0x0000000000000000, 0xf7ff0040fff6ffff, 0xf7ff000600804000, x16, x1, 208, x4)

inst_14:
// rs1==x27, rs2==x11, rd==x22, rs2_h3_val == -1025, rs1_h3_val == 256, rs2_h2_val == 512, rs2_h0_val == 512
// opcode: kdmabb ; op1:x27; op2:x11; dest:x22; op1val:0x1000009fff80010;  op2val:0xfbff020000010200
TEST_PKRR_OP(kdmabb, x22, x27, x11, 0x0000000000000000, 0x1000009fff80010, 0xfbff020000010200, x27, x1, 224, x4)

inst_15:
// rs1==x10, rs2==x14, rd==x12, rs2_h3_val == -513, rs2_h0_val == 64, rs1_h3_val == 1, rs1_h0_val == 1, rs1_h2_val == -21846
// opcode: kdmabb ; op1:x10; op2:x14; dest:x12; op1val:0x01aaaa00000001;  op2val:0xfdff7fffc0000040
TEST_PKRR_OP(kdmabb, x12, x10, x14, 0x0000000000000000, 0x01aaaa00000001, 0xfdff7fffc0000040, x10, x1, 240, x4)

inst_16:
// rs1==x4, rs2==x24, rd==x30, rs2_h3_val == -129, rs1_h3_val == -257, rs1_h2_val == -2049, rs1_h1_val == 32
// opcode: kdmabb ; op1:x4; op2:x24; dest:x30; op1val:0xfefff7ff00200003;  op2val:0xff7ffff9fff80004
TEST_PKRR_OP(kdmabb, x30, x4, x24, 0x0000000000000000, 0xfefff7ff00200003, 0xff7ffff9fff80004, x4, x1, 256, x15)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_17:
// rs1==x28, rs2==x4, rd==x10, rs2_h3_val == -65, rs1_h1_val == -5, rs2_h2_val == -2049, rs1_h3_val == 32, rs2_h1_val == -8193, rs1_h0_val == 64, rs2_h0_val == -65
// opcode: kdmabb ; op1:x28; op2:x4; dest:x10; op1val:0x203ffffffb0040;  op2val:0xffbff7ffdfffffbf
TEST_PKRR_OP(kdmabb, x10, x28, x4, 0x0000000000000000, 0x203ffffffb0040, 0xffbff7ffdfffffbf, x28, x3, 0, x15)

inst_18:
// rs1==x6, rs2==x8, rd==x23, rs2_h3_val == -33, rs2_h1_val == 0, rs1_h0_val == -2, rs2_h0_val == -8193, rs2_h2_val == -5, rs1_h3_val == -513, rs1_h1_val == -16385, rs1_h2_val == -513
// opcode: kdmabb ; op1:x6; op2:x8; dest:x23; op1val:0xfdfffdffbffffffe;  op2val:0xffdffffb0000dfff
TEST_PKRR_OP(kdmabb, x23, x6, x8, 0x0000000000000000, 0xfdfffdffbffffffe, 0xffdffffb0000dfff, x6, x3, 16, x15)

inst_19:
// rs1==x7, rs2==x16, rd==x28, rs2_h3_val == -17, rs2_h0_val == -1025, rs2_h1_val == 16384
// opcode: kdmabb ; op1:x7; op2:x16; dest:x28; op1val:0xfff9000600050020;  op2val:0xffeffff94000fbff
TEST_PKRR_OP(kdmabb, x28, x7, x16, 0x0000000000000000, 0xfff9000600050020, 0xffeffff94000fbff, x7, x3, 32, x15)

inst_20:
// rs1==x1, rs2==x28, rd==x25, rs2_h3_val == -9, rs2_h2_val == 64, rs1_h3_val == -129, rs1_h2_val == -2, rs2_h0_val == 21845
// opcode: kdmabb ; op1:x1; op2:x28; dest:x25; op1val:0xff7ffffefffc8000;  op2val:0xfff70040bfff5555
TEST_PKRR_OP(kdmabb, x25, x1, x28, 0x0000000000000000, 0xff7ffffefffc8000, 0xfff70040bfff5555, x1, x3, 48, x15)

inst_21:
// rs1==x2, rs2==x12, rd==x16, rs2_h3_val == -5, rs1_h1_val == 21845, rs1_h0_val == 32767
// opcode: kdmabb ; op1:x2; op2:x12; dest:x16; op1val:0x3ffffff655557fff;  op2val:0xfffbfffef7fffffa
TEST_PKRR_OP(kdmabb, x16, x2, x12, 0x0000000000000000, 0x3ffffff655557fff, 0xfffbfffef7fffffa, x2, x3, 64, x15)

inst_22:
// rs1==x24, rs2==x6, rd==x13, rs2_h3_val == -3, rs2_h1_val == 256, rs1_h3_val == 0, rs1_h0_val == -1025
// opcode: kdmabb ; op1:x24; op2:x6; dest:x13; op1val:0x000005fbfffbff;  op2val:0xfffd7fff01008000
TEST_PKRR_OP(kdmabb, x13, x24, x6, 0x0000000000000000, 0x000005fbfffbff, 0xfffd7fff01008000, x24, x3, 80, x15)

inst_23:
// rs1==x9, rs2==x5, rd==x4, rs2_h3_val == -2, rs2_h0_val == 32, rs1_h3_val == 4096
// opcode: kdmabb ; op1:x9; op2:x5; dest:x4; op1val:0x10000003fffbffff;  op2val:0xfffefff7ffef0020
TEST_PKRR_OP(kdmabb, x4, x9, x5, 0x0000000000000000, 0x10000003fffbffff, 0xfffefff7ffef0020, x9, x3, 96, x15)

inst_24:
// rs1==x20, rs2==x29, rd==x19, rs2_h3_val == -32768, rs1_h1_val == -21846, rs2_h1_val == 8
// opcode: kdmabb ; op1:x20; op2:x29; dest:x19; op1val:0xfffdc000aaaa7fff;  op2val:0x8000c0000008efff
TEST_PKRR_OP(kdmabb, x19, x20, x29, 0x0000000000000000, 0xfffdc000aaaa7fff, 0x8000c0000008efff, x20, x3, 112, x15)

inst_25:
// rs1==x29, rs2==x7, rd==x27, rs2_h3_val == 16384, rs1_h0_val == -17, rs1_h3_val == 32767, rs2_h1_val == 64, rs1_h1_val == 64
// opcode: kdmabb ; op1:x29; op2:x7; dest:x27; op1val:0x7fffaaaa0040ffef;  op2val:0x40007fff00403fff
TEST_PKRR_OP(kdmabb, x27, x29, x7, 0x0000000000000000, 0x7fffaaaa0040ffef, 0x40007fff00403fff, x29, x3, 128, x15)

inst_26:
// rs1==x14, rs2==x0, rd==x31, rs2_h3_val == 8192, rs2_h0_val == -33, rs2_h2_val == 2048, rs1_h2_val == 1024
// opcode: kdmabb ; op1:x14; op2:x0; dest:x31; op1val:0x200400c000ffdf;  op2val:0x20000800fff6ffdf
TEST_PKRR_OP(kdmabb, x31, x14, x0, 0x0000000000000000, 0x200400c000ffdf, 0x20000800fff6ffdf, x14, x3, 144, x15)

inst_27:
// rs1==x30, rs2==x25, rd==x1, rs2_h3_val == 4096, rs1_h1_val == 4, rs1_h2_val == -5, rs1_h0_val == 256
// opcode: kdmabb ; op1:x30; op2:x25; dest:x1; op1val:0xfff8fffb00040100;  op2val:0x10000020f7ffdfff
TEST_PKRR_OP(kdmabb, x1, x30, x25, 0x0000000000000000, 0xfff8fffb00040100, 0x10000020f7ffdfff, x30, x3, 160, x15)

inst_28:
// rs1==x12, rs2==x31, rd==x14, rs2_h3_val == 2048, rs1_h1_val == 512, rs2_h0_val == -9, rs1_h0_val == -129, rs2_h2_val == 0
// opcode: kdmabb ; op1:x12; op2:x31; dest:x14; op1val:0xfeff00090200ff7f;  op2val:0x8000000fff8fff7
TEST_PKRR_OP(kdmabb, x14, x12, x31, 0x0000000000000000, 0xfeff00090200ff7f, 0x8000000fff8fff7, x12, x3, 176, x15)

inst_29:
// rs1==x25, rs2==x1, rd==x2, rs2_h3_val == 512, rs1_h0_val == -65, rs2_h1_val == 32767, rs1_h1_val == 2048, rs2_h2_val == -3, rs1_h2_val == 32767
// opcode: kdmabb ; op1:x25; op2:x1; dest:x2; op1val:0x087fff0800ffbf;  op2val:0x200fffd7ffffffa
TEST_PKRR_OP(kdmabb, x2, x25, x1, 0x0000000000000000, 0x087fff0800ffbf, 0x200fffd7ffffffa, x25, x3, 192, x15)

inst_30:
// rs1==x5, rs2==x23, rd==x11, rs2_h3_val == 256, rs1_h3_val == 512, rs1_h0_val == 1024
// opcode: kdmabb ; op1:x5; op2:x23; dest:x11; op1val:0x200fffc3fff0400;  op2val:0x100000700010100
TEST_PKRR_OP(kdmabb, x11, x5, x23, 0x0000000000000000, 0x200fffc3fff0400, 0x100000700010100, x5, x3, 208, x15)

inst_31:
// rs1==x0, rs2==x30, rd==x20, rs2_h3_val == 128, 
// opcode: kdmabb ; op1:x0; op2:x30; dest:x20; op1val:0xf7ff0002ffbf0009;  op2val:0x80f7ffffef0100
TEST_PKRR_OP(kdmabb, x20, x0, x30, 0x0000000000000000, 0xf7ff0002ffbf0009, 0x80f7ffffef0100, x0, x3, 224, x15)

inst_32:
// rs2_h3_val == 64, rs2_h0_val == -17, rs1_h2_val == 4096, rs2_h2_val == 1
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x100010000006fffc;  op2val:0x4000010007ffef
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x100010000006fffc, 0x4000010007ffef, x30, x3, 240, x15)

inst_33:
// rs2_h3_val == 32, rs1_h1_val == 4096, rs1_h2_val == -1, rs2_h0_val == -5, rs2_h2_val == 1024, rs1_h3_val == 16384
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x4000ffff10000040;  op2val:0x200400ffbffffb
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x4000ffff10000040, 0x200400ffbffffb, x30, x3, 256, x15)

inst_34:
// rs1_h1_val == -3, rs2_h2_val == -65, rs1_h3_val == -9
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfff70040fffd0200;  op2val:0xffefffbf0009efff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfff70040fffd0200, 0xffefffbf0009efff, x30, x3, 272, x15)

inst_35:
// rs1_h1_val == -2, rs1_h0_val == 8192, rs2_h1_val == -21846
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffe2000;  op2val:0x3ffffff6aaaa0010
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffe2000, 0x3ffffff6aaaa0010, x30, x3, 288, x15)

inst_36:
// rs1_h1_val == 8192, rs2_h0_val == 1, rs1_h0_val == -21846, rs1_h3_val == -17, rs2_h3_val == 2, rs2_h2_val == -21846
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffef01002000aaaa;  op2val:0x02aaaa00010001
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xffef01002000aaaa, 0x02aaaa00010001, x30, x3, 304, x15)

inst_37:
// rs1_h1_val == 256, rs2_h2_val == 8192
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfdff000901000005;  op2val:0xfffa2000f7ff7fff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfdff000901000005, 0xfffa2000f7ff7fff, x30, x3, 320, x15)

inst_38:
// rs1_h1_val == 16, rs1_h0_val == -4097, rs2_h2_val == 16, rs1_h2_val == 21845
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfff855550010efff;  op2val:0x10000010ffefdfff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfff855550010efff, 0x10000010ffefdfff, x30, x3, 336, x15)

inst_39:
// rs1_h1_val == 8, rs1_h2_val == -65, rs2_h3_val == 16
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffbf0008aaaa;  op2val:0x107fff0006fff9
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x8000ffbf0008aaaa, 0x107fff0006fff9, x30, x3, 352, x15)

inst_40:
// rs1_h1_val == 1, rs2_h2_val == -1, rs2_h0_val == -2, rs1_h3_val == 64, rs2_h1_val == 16
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x40fff60001ffff;  op2val:0x00ffff0010fffe
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x40fff60001ffff, 0x00ffff0010fffe, x30, x3, 368, x15)

inst_41:
// rs1_h0_val == -16385, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffb0800bfff;  op2val:0xfffc002000060003
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfbfffffb0800bfff, 0xfffc002000060003, x30, x3, 384, x15)

inst_42:
// rs1_h0_val == -8193, rs1_h1_val == -257, rs2_h1_val == -1
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffeffdfffeffdfff;  op2val:0x4000dffffffffff6
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xffeffdfffeffdfff, 0x4000dffffffffff6, x30, x3, 400, x15)

inst_43:
// rs1_h0_val == -257, rs1_h1_val == -33, rs2_h2_val == 2, rs2_h0_val == -257
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffeffdffeff;  op2val:0x000002ffeffeff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfff9fffeffdffeff, 0x000002ffeffeff, x30, x3, 416, x15)

inst_44:
// rs1_h0_val == -9, rs1_h2_val == 16, rs2_h0_val == -21846
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x2000010bffffff7;  op2val:0x10fff80040aaaa
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x2000010bffffff7, 0x10fff80040aaaa, x30, x3, 432, x15)

inst_45:
// rs1_h0_val == -5, rs2_h2_val == -1025, rs1_h1_val == -8193
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0006dffffffb;  op2val:0x07fbff0001fff6
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x7fff0006dffffffb, 0x07fbff0001fff6, x30, x3, 448, x15)

inst_46:
// rs1_h0_val == -3, rs1_h3_val == -33, rs2_h2_val == 21845
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff9aaaafffd;  op2val:0x005555fffa0020
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xffdffff9aaaafffd, 0x005555fffa0020, x30, x3, 464, x15)

inst_47:
// rs1_h0_val == 16384, rs1_h3_val == -5, rs1_h1_val == -513, rs2_h1_val == 21845
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffafdff4000;  op2val:0x8000ffff55555555
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfffbfffafdff4000, 0x8000ffff55555555, x30, x3, 480, x15)

inst_48:
// rs1_h0_val == 128, rs2_h0_val == 8, rs1_h1_val == -17
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfff9ffef0080;  op2val:0x1000040000070008
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfffcfff9ffef0080, 0x1000040000070008, x30, x3, 496, x15)

inst_49:
// rs1_h0_val == 8, rs2_h1_val == -5, rs2_h0_val == 1024, rs1_h2_val == -3
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xc000fffdffbf0008;  op2val:0xfff90400fffb0400
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xc000fffdffbf0008, 0xfff90400fffb0400, x30, x3, 512, x15)

inst_50:
// rs1_h0_val == 4, rs2_h3_val == 4, rs1_h2_val == -257
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x1000feff00200004;  op2val:0x04ff7f0100feff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x1000feff00200004, 0x04ff7f0100feff, x30, x3, 528, x15)

inst_51:
// rs1_h0_val == 2, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x00ffdffff60002;  op2val:0xfffb7fff55550001
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x00ffdffff60002, 0xfffb7fff55550001, x30, x3, 544, x15)

inst_52:
// rs2_h1_val == 4, rs1_h3_val == -2
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffefff90009aaaa;  op2val:0xc000fff90004fffe
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfffefff90009aaaa, 0xc000fff90004fffe, x30, x3, 560, x15)

inst_53:
// rs2_h1_val == 2, rs1_h1_val == -2049
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0001f7ff0010;  op2val:0x7ffffff70002f7ff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xf7ff0001f7ff0010, 0x7ffffff70002f7ff, x30, x3, 576, x15)

inst_54:
// rs2_h0_val == -513, rs2_h1_val == 4096, rs1_h3_val == 2048
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x800ffdf5555bfff;  op2val:0x4000fffe1000fdff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x800ffdf5555bfff, 0x4000fffe1000fdff, x30, x3, 592, x15)

inst_55:
// rs2_h0_val == -129, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffeffffb;  op2val:0xfffc7fff0005ff7f
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x010000ffeffffb, 0xfffc7fff0005ff7f, x30, x3, 608, x15)

inst_56:
// rs2_h0_val == -3, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x060006fffcfff8;  op2val:0xbfff0020bffffffd
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x060006fffcfff8, 0xbfff0020bffffffd, x30, x3, 624, x15)

inst_57:
// rs2_h0_val == 8192, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffbbffffffc;  op2val:0x050006ffdf2000
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xff7ffffbbffffffc, 0x050006ffdf2000, x30, x3, 640, x15)

inst_58:
// rs2_h0_val == 4096, rs2_h2_val == -16385
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfff6aaaafffafbff;  op2val:0xfffabfffbfff1000
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfff6aaaafffafbff, 0xfffabfffbfff1000, x30, x3, 656, x15)

inst_59:
// rs2_h0_val == 2048, rs1_h2_val == -17
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffefffef0000ffef;  op2val:0xfdfffffc00010800
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xffefffef0000ffef, 0xfdfffffc00010800, x30, x3, 672, x15)

inst_60:
// rs2_h0_val == 2, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x050000fff6fdff;  op2val:0x02000808000002
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x050000fff6fdff, 0x02000808000002, x30, x3, 688, x15)

inst_61:
// rs2_h0_val == 0, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xefff0020fffd0200;  op2val:0x100040000050000
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xefff0020fffd0200, 0x100040000050000, x30, x3, 704, x15)

inst_62:
// rs2_h0_val == -1, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x8005555fffcfffa;  op2val:0xffefc0001000ffff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x8005555fffcfffa, 0xffefc0001000ffff, x30, x3, 720, x15)

inst_63:
// rs1_h3_val == -21846, rs2_h1_val == -513, rs1_h1_val == -4097
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa1000efff0006;  op2val:0xfdff0006fdffffff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xaaaa1000efff0006, 0xfdff0006fdffffff, x30, x3, 736, x15)

inst_64:
// rs1_h3_val == -8193, rs1_h2_val == -1025
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xdffffbff0080ffbf;  op2val:0x03ff7fbfff0400
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xdffffbff0080ffbf, 0x03ff7fbfff0400, x30, x3, 752, x15)

inst_65:
// rs1_h3_val == -65, rs2_h2_val == 4096
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00078000fdff;  op2val:0x8010001000fffc
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xffbf00078000fdff, 0x8010001000fffc, x30, x3, 768, x15)

inst_66:
// rs1_h0_val == 0, rs1_h2_val == -16385
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x01bffffbff0000;  op2val:0xff7f0000fffcc000
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x01bffffbff0000, 0xff7f0000fffcc000, x30, x3, 784, x15)

inst_67:
// rs2_h3_val == 8, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0020dfff0040;  op2val:0x08fffffff83fff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfffe0020dfff0040, 0x08fffffff83fff, x30, x3, 800, x15)

inst_68:
// rs2_h3_val == 1, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000500093fff;  op2val:0x01fffc00060800
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfffb000500093fff, 0x01fffc00060800, x30, x3, 816, x15)

inst_69:
// rs1_h3_val == 8192, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x200001004000fff6;  op2val:0x02000280000080
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x200001004000fff6, 0x02000280000080, x30, x3, 832, x15)

inst_70:
// rs1_h3_val == 1024, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x400fff600003fff;  op2val:0x8000bfffbfff2000
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x400fff600003fff, 0x8000bfffbfff2000, x30, x3, 848, x15)

inst_71:
// rs1_h3_val == 128, rs2_h1_val == -2
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x80ff7f0010efff;  op2val:0xfff9dffffffedfff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x80ff7f0010efff, 0xfff9dffffffedfff, x30, x3, 864, x15)

inst_72:
// rs2_h2_val == -257, rs1_h2_val == -9
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffafff7fffeff7f;  op2val:0x09feff7ffffff7
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfffafff7fffeff7f, 0x09feff7ffffff7, x30, x3, 880, x15)

inst_73:
// rs1_h3_val == 16, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x100009fffbfffc;  op2val:0xaaaac0004000fdff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x100009fffbfffc, 0xaaaac0004000fdff, x30, x3, 896, x15)

inst_74:
// rs1_h3_val == 4, rs1_h2_val == 2048
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x04080001000004;  op2val:0x80fffd00400080
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x04080001000004, 0x80fffd00400080, x30, x3, 912, x15)

inst_75:
// rs2_h2_val == -33, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x80ffff10000200;  op2val:0xdfffffdf00080400
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x80ffff10000200, 0xdfffffdf00080400, x30, x3, 928, x15)

inst_76:
// rs1_h3_val == 2, rs1_h1_val == -129, rs2_h1_val == -4097
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x02fff7ff7ffffc;  op2val:0x2000fff8efff0004
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x02fff7ff7ffffc, 0x2000fff8efff0004, x30, x3, 944, x15)

inst_77:
// rs2_h2_val == -17, rs2_h1_val == 32
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x050005ffff5555;  op2val:0x10ffef00205555
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x050005ffff5555, 0x10ffef00205555, x30, x3, 960, x15)

inst_78:
// rs1_h3_val == -1, rs2_h2_val == 16384
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00020004;  op2val:0xfff6400000400008
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfffffbff00020004, 0xfff6400000400008, x30, x3, 976, x15)

inst_79:
// rs2_h2_val == -32768, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x8000fff800003fff;  op2val:0xffbf8000dfff0040
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x8000fff800003fff, 0xffbf8000dfff0040, x30, x3, 992, x15)

inst_80:
// rs1_h2_val == -4097, rs2_h2_val == 128
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x06efffaaaa0006;  op2val:0xfdff008000040400
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x06efffaaaa0006, 0xfdff008000040400, x30, x3, 1008, x15)

inst_81:
// rs2_h2_val == 256, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff0004feff;  op2val:0xfeff0100fffdfff9
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xffff7fff0004feff, 0xfeff0100fffdfff9, x30, x3, 1024, x15)

inst_82:
// rs1_h2_val == 16384, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x55554000fff6bfff;  op2val:0xfff8008000084000
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x55554000fff6bfff, 0xfff8008000084000, x30, x3, 1040, x15)

inst_83:
// rs1_h2_val == 8192, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x400020000008fbff;  op2val:0xfff70010fff60006
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x400020000008fbff, 0xfff70010fff60006, x30, x3, 1056, x15)

inst_84:
// rs1_h2_val == 512, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0200bfff2000;  op2val:0xbfff400010000009
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfffb0200bfff2000, 0xbfff400010000009, x30, x3, 1072, x15)

inst_85:
// rs1_h2_val == 128, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x8000008080000005;  op2val:0x03efff00000200
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x8000008080000005, 0x03efff00000200, x30, x3, 1088, x15)

inst_86:
// rs2_h1_val == -1025, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfeff01000003fffb;  op2val:0x1000fbfffbff0008
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfeff01000003fffb, 0x1000fbfffbff0008, x30, x3, 1104, x15)

inst_87:
// rs2_h1_val == -257, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfeff00100006fff6;  op2val:0xdfffffbffeff0200
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfeff00100006fff6, 0xdfffffbffeff0200, x30, x3, 1120, x15)

inst_88:
// rs2_h1_val == -129, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffefbffffbfefff;  op2val:0xfffcfffdff7ffffa
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfffefbffffbfefff, 0xfffcfffdff7ffffa, x30, x3, 1136, x15)

inst_89:
// rs1_h1_val == 32767, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffa00087fff4000;  op2val:0xfff8000300405555
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfffa00087fff4000, 0xfff8000300405555, x30, x3, 1152, x15)

inst_90:
// rs2_h1_val == -9, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00073fff0000;  op2val:0x090010fff75555
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfdff00073fff0000, 0x090010fff75555, x30, x3, 1168, x15)

inst_91:
// rs1_h1_val == -9, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x20bffffff7fff6;  op2val:0x20000000400000
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x20bffffff7fff6, 0x20000000400000, x30, x3, 1184, x15)

inst_92:
// rs2_h1_val == 1024, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffd00800020;  op2val:0x05bfff04000003
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x8000fffd00800020, 0x05bfff04000003, x30, x3, 1200, x15)

inst_93:
// rs1_h2_val == 4, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x8000004f7ff0200;  op2val:0x07fff9fbfffffc
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x8000004f7ff0200, 0x07fff9fbfffffc, x30, x3, 1216, x15)

inst_94:
// rs2_h2_val == 4, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x40f7fffff87fff;  op2val:0x0200040006c000
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x40f7fffff87fff, 0x0200040006c000, x30, x3, 1232, x15)

inst_95:
// rs2_h1_val == 8192, 
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x03fdff0100fdff;  op2val:0x800fff620004000
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x03fdff0100fdff, 0x800fff620004000, x30, x3, 1248, x15)

inst_96:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == 512, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val == -1025, rs1_h1_val == 2, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 21845, rs2_h2_val == 32, rs1_h2_val == -32768
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfbff800000025555;  op2val:0x3fff002002000005
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfbff800000025555, 0x3fff002002000005, x30, x3, 1264, x15)

inst_97:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h3_val == -257, rs2_h1_val == -2049, rs1_h0_val == 4096, rs2_h2_val == -9, rs1_h2_val == 0, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x03000000021000;  op2val:0xfefffff7f7fffff8
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x03000000021000, 0xfefffff7f7fffff8, x30, x3, 1280, x15)

inst_98:
// rs2_h3_val == 21845, rs1_h0_val == -33, rs2_h1_val == -16385, rs2_h2_val == -129, rs2_h0_val == -16385, rs1_h1_val == 128, rs1_h3_val == -3
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0xfffd00080080ffdf;  op2val:0x5555ff7fbfffbfff
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0xfffd00080080ffdf, 0x5555ff7fbfffbfff, x30, x3, 1296, x15)

inst_99:
// rs2_h3_val == 8192, rs2_h0_val == -33, rs2_h2_val == 2048, rs1_h2_val == 1024
// opcode: kdmabb ; op1:x30; op2:x29; dest:x31; op1val:0x200400c000ffdf;  op2val:0x20000800fff6ffdf
TEST_PKRR_OP(kdmabb, x31, x30, x29, 0x0000000000000000, 0x200400c000ffdf, 0x20000800fff6ffdf, x30, x3, 1312, x15)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 166*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
