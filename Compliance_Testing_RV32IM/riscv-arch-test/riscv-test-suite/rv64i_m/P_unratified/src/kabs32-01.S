
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kabs32 instruction of the RISC-V RV64PZicsr extension for the kabs32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kabs32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1==x14, rd==x5, rs1_w0_val == -2147483648, rs1_w1_val == -65
// opcode: kabs32 ; op1:x14; dest:x5; op1val:0xffffffbf80000000;
TEST_PKR_OP( kabs32, x5, x14, 0x0000000000000000, 0xffffffbf80000000, x14, x3, 0, x27)

inst_1:
// rs1==x26, rd==x24, rs1_w1_val == -1431655766, 
// opcode: kabs32 ; op1:x26; dest:x24; op1val:0xaaaaaaaa3fffffff;
TEST_PKR_OP( kabs32, x24, x26, 0x0000000000000000, 0xaaaaaaaa3fffffff, x26, x3, 16, x27)

inst_2:
// rs1==x8, rd==x12, rs1_w1_val == 1431655765, rs1_w0_val == -65537
// opcode: kabs32 ; op1:x8; dest:x12; op1val:0x55555555fffeffff;
TEST_PKR_OP( kabs32, x12, x8, 0x0000000000000000, 0x55555555fffeffff, x8, x3, 32, x27)

inst_3:
// rs1==x30, rd==x23, rs1_w1_val == 2147483647, rs1_w0_val == -2
// opcode: kabs32 ; op1:x30; dest:x23; op1val:0x7ffffffffffffffe;
TEST_PKR_OP( kabs32, x23, x30, 0x0000000000000000, 0x7ffffffffffffffe, x30, x3, 48, x27)

inst_4:
// rs1==x5, rd==x18, rs1_w1_val == -1073741825, 
// opcode: kabs32 ; op1:x5; dest:x18; op1val:0xbfffffff80000000;
TEST_PKR_OP( kabs32, x18, x5, 0x0000000000000000, 0xbfffffff80000000, x5, x3, 64, x27)

inst_5:
// rs1==x6, rd==x15, rs1_w1_val == -536870913, rs1_w0_val == 4
// opcode: kabs32 ; op1:x6; dest:x15; op1val:0xdfffffff00000004;
TEST_PKR_OP( kabs32, x15, x6, 0x0000000000000000, 0xdfffffff00000004, x6, x3, 80, x27)

inst_6:
// rs1==x18, rd==x11, rs1_w1_val == -268435457, 
// opcode: kabs32 ; op1:x18; dest:x11; op1val:0xeffffffffffffff8;
TEST_PKR_OP( kabs32, x11, x18, 0x0000000000000000, 0xeffffffffffffff8, x18, x3, 96, x27)

inst_7:
// rs1==x0, rd==x26, rs1_w1_val == -134217729, rs1_w0_val == -1073741825
// opcode: kabs32 ; op1:x0; dest:x26; op1val:0xf7ffffffbfffffff;
TEST_PKR_OP( kabs32, x26, x0, 0x0000000000000000, 0xf7ffffffbfffffff, x0, x3, 112, x27)

inst_8:
// rs1==x1, rd==x7, rs1_w1_val == -67108865, rs1_w0_val == -33
// opcode: kabs32 ; op1:x1; dest:x7; op1val:0xfbffffffffffffdf;
TEST_PKR_OP( kabs32, x7, x1, 0x0000000000000000, 0xfbffffffffffffdf, x1, x3, 128, x27)

inst_9:
// rs1==x19, rd==x2, rs1_w1_val == -33554433, rs1_w0_val == 524288
// opcode: kabs32 ; op1:x19; dest:x2; op1val:0xfdffffff00080000;
TEST_PKR_OP( kabs32, x2, x19, 0x0000000000000000, 0xfdffffff00080000, x19, x3, 144, x27)

inst_10:
// rs1==x12, rd==x8, rs1_w1_val == -16777217, rs1_w0_val == -257
// opcode: kabs32 ; op1:x12; dest:x8; op1val:0xfefffffffffffeff;
TEST_PKR_OP( kabs32, x8, x12, 0x0000000000000000, 0xfefffffffffffeff, x12, x3, 160, x27)

inst_11:
// rs1==x29, rd==x30, rs1_w1_val == -8388609, rs1_w0_val == -1025
// opcode: kabs32 ; op1:x29; dest:x30; op1val:0xff7ffffffffffbff;
TEST_PKR_OP( kabs32, x30, x29, 0x0000000000000000, 0xff7ffffffffffbff, x29, x3, 176, x27)

inst_12:
// rs1==x25, rd==x28, rs1_w1_val == -4194305, rs1_w0_val == 262144
// opcode: kabs32 ; op1:x25; dest:x28; op1val:0xffbfffff00040000;
TEST_PKR_OP( kabs32, x28, x25, 0x0000000000000000, 0xffbfffff00040000, x25, x3, 192, x27)

inst_13:
// rs1==x20, rd==x25, rs1_w1_val == -2097153, 
// opcode: kabs32 ; op1:x20; dest:x25; op1val:0xffdffffffffffffe;
TEST_PKR_OP( kabs32, x25, x20, 0x0000000000000000, 0xffdffffffffffffe, x20, x3, 208, x27)

inst_14:
// rs1==x23, rd==x4, rs1_w1_val == -1048577, 
// opcode: kabs32 ; op1:x23; dest:x4; op1val:0xffefffff00000003;
TEST_PKR_OP( kabs32, x4, x23, 0x0000000000000000, 0xffefffff00000003, x23, x3, 224, x27)

inst_15:
// rs1==x15, rd==x10, rs1_w1_val == -524289, rs1_w0_val == -134217729
// opcode: kabs32 ; op1:x15; dest:x10; op1val:0xfff7fffff7ffffff;
TEST_PKR_OP( kabs32, x10, x15, 0x0000000000000000, 0xfff7fffff7ffffff, x15, x3, 240, x27)

inst_16:
// rs1==x28, rd==x17, rs1_w1_val == -262145, rs1_w0_val == 0
// opcode: kabs32 ; op1:x28; dest:x17; op1val:0xfffbffff00000000;
TEST_PKR_OP( kabs32, x17, x28, 0x0000000000000000, 0xfffbffff00000000, x28, x3, 256, x27)

inst_17:
// rs1==x22, rd==x1, rs1_w1_val == -131073, rs1_w0_val == 128
// opcode: kabs32 ; op1:x22; dest:x1; op1val:0xfffdffff00000080;
TEST_PKR_OP( kabs32, x1, x22, 0x0000000000000000, 0xfffdffff00000080, x22, x3, 272, x27)

inst_18:
// rs1==x13, rd==x22, rs1_w1_val == -65537, rs1_w0_val == 8
// opcode: kabs32 ; op1:x13; dest:x22; op1val:0xfffeffff00000008;
TEST_PKR_OP( kabs32, x22, x13, 0x0000000000000000, 0xfffeffff00000008, x13, x3, 288, x27)

inst_19:
// rs1==x7, rd==x9, rs1_w1_val == -32769, 
// opcode: kabs32 ; op1:x7; dest:x9; op1val:0xffff7fff00000007;
TEST_PKR_OP( kabs32, x9, x7, 0x0000000000000000, 0xffff7fff00000007, x7, x3, 304, x27)

inst_20:
// rs1==x16, rd==x21, rs1_w1_val == -16385, rs1_w0_val == 512
// opcode: kabs32 ; op1:x16; dest:x21; op1val:0xffffbfff00000200;
TEST_PKR_OP( kabs32, x21, x16, 0x0000000000000000, 0xffffbfff00000200, x16, x3, 320, x27)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_21:
// rs1==x3, rd==x29, rs1_w1_val == -8193, 
// opcode: kabs32 ; op1:x3; dest:x29; op1val:0xffffdffffffffff6;
TEST_PKR_OP( kabs32, x29, x3, 0x0000000000000000, 0xffffdffffffffff6, x3, x1, 0, x5)

inst_22:
// rs1==x11, rd==x16, rs1_w1_val == -4097, 
// opcode: kabs32 ; op1:x11; dest:x16; op1val:0xffffefff00000003;
TEST_PKR_OP( kabs32, x16, x11, 0x0000000000000000, 0xffffefff00000003, x11, x1, 16, x5)

inst_23:
// rs1==x21, rd==x6, rs1_w1_val == -2049, rs1_w0_val == -2049
// opcode: kabs32 ; op1:x21; dest:x6; op1val:0xfffff7fffffff7ff;
TEST_PKR_OP( kabs32, x6, x21, 0x0000000000000000, 0xfffff7fffffff7ff, x21, x1, 32, x5)

inst_24:
// rs1==x17, rd==x27, rs1_w1_val == -1025, rs1_w0_val == 64
// opcode: kabs32 ; op1:x17; dest:x27; op1val:0xfffffbff00000040;
TEST_PKR_OP( kabs32, x27, x17, 0x0000000000000000, 0xfffffbff00000040, x17, x1, 48, x5)

inst_25:
// rs1==x27, rd==x14, rs1_w1_val == -513, 
// opcode: kabs32 ; op1:x27; dest:x14; op1val:0xfffffdff00000080;
TEST_PKR_OP( kabs32, x14, x27, 0x0000000000000000, 0xfffffdff00000080, x27, x1, 64, x5)

inst_26:
// rs1==x10, rd==x13, rs1_w1_val == -257, 
// opcode: kabs32 ; op1:x10; dest:x13; op1val:0xfffffefffffffeff;
TEST_PKR_OP( kabs32, x13, x10, 0x0000000000000000, 0xfffffefffffffeff, x10, x1, 80, x5)

inst_27:
// rs1==x31, rd==x3, rs1_w1_val == -129, rs1_w0_val == 16384
// opcode: kabs32 ; op1:x31; dest:x3; op1val:0xffffff7f00004000;
TEST_PKR_OP( kabs32, x3, x31, 0x0000000000000000, 0xffffff7f00004000, x31, x1, 96, x5)

inst_28:
// rs1==x4, rd==x19, rs1_w1_val == -33, 
// opcode: kabs32 ; op1:x4; dest:x19; op1val:0xffffffdf00000004;
TEST_PKR_OP( kabs32, x19, x4, 0x0000000000000000, 0xffffffdf00000004, x4, x1, 112, x5)

inst_29:
// rs1==x24, rd==x20, rs1_w1_val == -17, rs1_w0_val == 32768
// opcode: kabs32 ; op1:x24; dest:x20; op1val:0xffffffef00008000;
TEST_PKR_OP( kabs32, x20, x24, 0x0000000000000000, 0xffffffef00008000, x24, x1, 128, x5)

inst_30:
// rs1==x9, rd==x0, rs1_w1_val == -9, 
// opcode: kabs32 ; op1:x9; dest:x0; op1val:0xfffffff700000000;
TEST_PKR_OP( kabs32, x0, x9, 0x0000000000000000, 0xfffffff700000000, x9, x1, 144, x5)

inst_31:
// rs1==x2, rd==x31, rs1_w1_val == -5, rs1_w0_val == 65536
// opcode: kabs32 ; op1:x2; dest:x31; op1val:0xfffffffb00010000;
TEST_PKR_OP( kabs32, x31, x2, 0x0000000000000000, 0xfffffffb00010000, x2, x1, 160, x5)

inst_32:
// rs1_w1_val == -3, rs1_w0_val == -5
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xfffffffdfffffffb;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xfffffffdfffffffb, x30, x1, 176, x5)

inst_33:
// rs1_w1_val == -2, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xfffffffe00000003;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xfffffffe00000003, x30, x1, 192, x5)

inst_34:
// rs1_w1_val == -2147483648, rs1_w0_val == 2
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x8000000000000002;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x8000000000000002, x30, x1, 208, x5)

inst_35:
// rs1_w1_val == 1073741824, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x4000000000000005;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x4000000000000005, x30, x1, 224, x5)

inst_36:
// rs1_w1_val == 536870912, rs1_w0_val == 32
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x2000000000000020;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x2000000000000020, x30, x1, 240, x5)

inst_37:
// rs1_w1_val == 268435456, rs1_w0_val == -4194305
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x10000000ffbfffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x10000000ffbfffff, x30, x1, 256, x5)

inst_38:
// rs1_w1_val == 134217728, rs1_w0_val == 16777216
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x800000001000000;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x800000001000000, x30, x1, 272, x5)

inst_39:
// rs1_w1_val == 67108864, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x4000000f7ffffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x4000000f7ffffff, x30, x1, 288, x5)

inst_40:
// rs1_w1_val == 33554432, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x200000000000020;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x200000000000020, x30, x1, 304, x5)

inst_41:
// rs1_w1_val == 16777216, rs1_w0_val == 16
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x100000000000010;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x100000000000010, x30, x1, 320, x5)

inst_42:
// rs1_w1_val == 8388608, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x80000000000010;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x80000000000010, x30, x1, 336, x5)

inst_43:
// rs1_w1_val == 4194304, rs1_w0_val == 4194304
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x40000000400000;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x40000000400000, x30, x1, 352, x5)

inst_44:
// rs1_w1_val == 2097152, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x20000000008000;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x20000000008000, x30, x1, 368, x5)

inst_45:
// rs1_w1_val == 1048576, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x10000000000020;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x10000000000020, x30, x1, 384, x5)

inst_46:
// rs1_w0_val == 1, rs1_w1_val == -1
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xffffffff00000001;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xffffffff00000001, x30, x1, 400, x5)

inst_47:
// rs1_w0_val == -1, rs1_w1_val == 4096
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x001000ffffffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x001000ffffffff, x30, x1, 416, x5)

inst_48:
// rs1_w1_val == 524288, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x080000f7ffffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x080000f7ffffff, x30, x1, 432, x5)

inst_49:
// rs1_w1_val == 262144, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x040000fffffffa;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x040000fffffffa, x30, x1, 448, x5)

inst_50:
// rs1_w1_val == 131072, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x02000000000005;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x02000000000005, x30, x1, 464, x5)

inst_51:
// rs1_w1_val == 65536, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x01000000000008;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x01000000000008, x30, x1, 480, x5)

inst_52:
// rs1_w1_val == 32768, rs1_w0_val == 536870912
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x00800020000000;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x00800020000000, x30, x1, 496, x5)

inst_53:
// rs1_w1_val == 16384, rs1_w0_val == 1048576
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x00400000100000;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x00400000100000, x30, x1, 512, x5)

inst_54:
// rs1_w1_val == 8192, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x002000fffffffa;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x002000fffffffa, x30, x1, 528, x5)

inst_55:
// rs1_w1_val == 2048, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x00080000004000;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x00080000004000, x30, x1, 544, x5)

inst_56:
// rs1_w1_val == 1024, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x000400bfffffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x000400bfffffff, x30, x1, 560, x5)

inst_57:
// rs1_w1_val == 512, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x000200fffffff9;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x000200fffffff9, x30, x1, 576, x5)

inst_58:
// rs1_w1_val == 256, rs1_w0_val == 131072
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x00010000020000;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x00010000020000, x30, x1, 592, x5)

inst_59:
// rs1_w1_val == 128, rs1_w0_val == 8192
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x00008000002000;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x00008000002000, x30, x1, 608, x5)

inst_60:
// rs1_w1_val == 64, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x000040fffff7ff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x000040fffff7ff, x30, x1, 624, x5)

inst_61:
// rs1_w1_val == 32, rs1_w0_val == -3
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x000020fffffffd;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x000020fffffffd, x30, x1, 640, x5)

inst_62:
// rs1_w1_val == 16, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x0000103fffffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x0000103fffffff, x30, x1, 656, x5)

inst_63:
// rs1_w1_val == 8, rs1_w0_val == -32769
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x000008ffff7fff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x000008ffff7fff, x30, x1, 672, x5)

inst_64:
// rs1_w1_val == 4, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x000004ffbfffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x000004ffbfffff, x30, x1, 688, x5)

inst_65:
// rs1_w1_val == 2, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x00000200000080;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x00000200000080, x30, x1, 704, x5)

inst_66:
// rs1_w1_val == 1, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x000001fffffbff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x000001fffffbff, x30, x1, 720, x5)

inst_67:
// rs1_w1_val == 0, rs1_w0_val == 268435456
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x00000010000000;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x00000010000000, x30, x1, 736, x5)

inst_68:
// rs1_w0_val == -1431655766, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xfffffffeaaaaaaaa;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xfffffffeaaaaaaaa, x30, x1, 752, x5)

inst_69:
// rs1_w0_val == 1431655765, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x00000255555555;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x00000255555555, x30, x1, 768, x5)

inst_70:
// rs1_w0_val == 2147483647, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x0001007fffffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x0001007fffffff, x30, x1, 784, x5)

inst_71:
// rs1_w0_val == -536870913, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x20000000dfffffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x20000000dfffffff, x30, x1, 800, x5)

inst_72:
// rs1_w0_val == -268435457, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xfdffffffefffffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xfdffffffefffffff, x30, x1, 816, x5)

inst_73:
// rs1_w0_val == -67108865, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xffeffffffbffffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xffeffffffbffffff, x30, x1, 832, x5)

inst_74:
// rs1_w0_val == -33554433, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x000000fdffffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x000000fdffffff, x30, x1, 848, x5)

inst_75:
// rs1_w0_val == -16777217, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x000005feffffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x000005feffffff, x30, x1, 864, x5)

inst_76:
// rs1_w0_val == -8388609, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xfffffff8ff7fffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xfffffff8ff7fffff, x30, x1, 880, x5)

inst_77:
// rs1_w0_val == -2097153, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x000002ffdfffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x000002ffdfffff, x30, x1, 896, x5)

inst_78:
// rs1_w0_val == -1048577, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xefffffffffefffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xefffffffffefffff, x30, x1, 912, x5)

inst_79:
// rs1_w0_val == -524289, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x20000000fff7ffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x20000000fff7ffff, x30, x1, 928, x5)

inst_80:
// rs1_w0_val == -262145, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x000400fffbffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x000400fffbffff, x30, x1, 944, x5)

inst_81:
// rs1_w0_val == -131073, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xfffff7fffffdffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xfffff7fffffdffff, x30, x1, 960, x5)

inst_82:
// rs1_w0_val == -16385, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x000010ffffbfff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x000010ffffbfff, x30, x1, 976, x5)

inst_83:
// rs1_w0_val == -8193, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xffffdfffffffdfff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xffffdfffffffdfff, x30, x1, 992, x5)

inst_84:
// rs1_w0_val == -4097, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xffffffefffffefff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xffffffefffffefff, x30, x1, 1008, x5)

inst_85:
// rs1_w0_val == -65, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xfffffff8ffffffbf;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xfffffff8ffffffbf, x30, x1, 1024, x5)

inst_86:
// rs1_w0_val == -17, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x000800ffffffef;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x000800ffffffef, x30, x1, 1040, x5)

inst_87:
// rs1_w0_val == -9, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xfffffdfffffffff7;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xfffffdfffffffff7, x30, x1, 1056, x5)

inst_88:
// rs1_w0_val == 1073741824, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xfffffffa40000000;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xfffffffa40000000, x30, x1, 1072, x5)

inst_89:
// rs1_w0_val == 134217728, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xbfffffff08000000;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xbfffffff08000000, x30, x1, 1088, x5)

inst_90:
// rs1_w0_val == 67108864, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x00200004000000;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x00200004000000, x30, x1, 1104, x5)

inst_91:
// rs1_w0_val == 33554432, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xfffffffb02000000;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xfffffffb02000000, x30, x1, 1120, x5)

inst_92:
// rs1_w0_val == 8388608, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x00800000800000;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x00800000800000, x30, x1, 1136, x5)

inst_93:
// rs1_w0_val == 2097152, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xfffff7ff00200000;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xfffff7ff00200000, x30, x1, 1152, x5)

inst_94:
// rs1_w0_val == -513, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xfffffbfffffffdff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xfffffbfffffffdff, x30, x1, 1168, x5)

inst_95:
// rs1_w0_val == 4096, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xffffffff00001000;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xffffffff00001000, x30, x1, 1184, x5)

inst_96:
// rs1_w0_val == 2048, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xff7fffff00000800;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xff7fffff00000800, x30, x1, 1200, x5)

inst_97:
// rs1_w0_val == 1024, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x00200000000400;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x00200000000400, x30, x1, 1216, x5)

inst_98:
// rs1_w0_val == 256, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x00020000000100;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x00020000000100, x30, x1, 1232, x5)

inst_99:
// rs1_w0_val == -129, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0x40000000ffffff7f;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0x40000000ffffff7f, x30, x1, 1248, x5)

inst_100:
// rs1_w1_val == -134217729, rs1_w0_val == -1073741825
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xf7ffffffbfffffff;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xf7ffffffbfffffff, x30, x1, 1264, x5)

inst_101:
// rs1_w1_val == -9, 
// opcode: kabs32 ; op1:x30; dest:x31; op1val:0xfffffff700000000;
TEST_PKR_OP( kabs32, x31, x30, 0x0000000000000000, 0xfffffff700000000, x30, x1, 1280, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 42*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 162*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
