
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the khmbb16 instruction of the RISC-V RV64PZicsr extension for the khmbb16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",khmbb16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x10,signature_x10_1)

inst_0:
// rs1 == rd != rs2, rs1==x19, rs2==x29, rd==x19, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h2_val == 2048, rs2_h2_val == -1025, rs1_h2_val != rs2_h2_val, rs2_h0_val == 0, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h3_val == -65, rs1_h1_val == -8193, rs2_h1_val == 256, rs2_h3_val == 0
// opcode: khmbb16 ; op1:x19; op2:x29; dest:x19; op1val:0xffbf0800dfff8000;  op2val:0x00fbff01000000
TEST_PKRR_OP(khmbb16, x19, x19, x29, 0x0000000000000000, 0xffbf0800dfff8000, 0x00fbff01000000, x19, x10, 0, x11)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x12, rd==x20, rs1_h3_val == rs2_h3_val, rs1_h2_val == 8192, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h0_val == -1, rs1_h1_val == 512, rs2_h2_val == -17, rs1_h3_val == -1, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h3_val == -1
// opcode: khmbb16 ; op1:x28; op2:x12; dest:x20; op1val:0xffff20000200fff6;  op2val:0xffffffef0007ffff
TEST_PKRR_OP(khmbb16, x20, x28, x12, 0x0000000000000000, 0xffff20000200fff6, 0xffffffef0007ffff, x28, x10, 16, x11)

inst_2:
// rs1 == rs2 != rd, rs1==x3, rs2==x3, rd==x14, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == -1, rs1_h0_val == -8193, rs1_h1_val == 32767, rs1_h3_val == -33
// opcode: khmbb16 ; op1:x3; op2:x3; dest:x14; op1val:0xffdf00097fffdfff;  op2val:0x05ffff00060000
TEST_PKRR_OP(khmbb16, x14, x3, x3, 0x0000000000000000, 0xffdf00097fffdfff, 0x05ffff00060000, x3, x10, 32, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x24, rs2==x24, rd==x24, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val == 8, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == 8192, rs2_h0_val == -32768, rs1_h0_val == -4097
// opcode: khmbb16 ; op1:x24; op2:x24; dest:x24; op1val:0x0900080003efff;  op2val:0xc000000920008000
TEST_PKRR_OP(khmbb16, x24, x24, x24, 0x0000000000000000, 0x0900080003efff, 0xc000000920008000, x24, x10, 48, x11)

inst_4:
// rs2 == rd != rs1, rs1==x9, rs2==x8, rd==x8, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 1024, rs1_h2_val == 16384, rs1_h0_val == -9, rs1_h1_val == 64, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h3_val == 8, rs2_h2_val == 8, rs2_h1_val == 16
// opcode: khmbb16 ; op1:x9; op2:x8; dest:x8; op1val:0x40040000040fff7;  op2val:0x08000800100003
TEST_PKRR_OP(khmbb16, x8, x9, x8, 0x0000000000000000, 0x40040000040fff7, 0x08000800100003, x9, x10, 64, x11)

inst_5:
// rs1==x1, rs2==x28, rd==x9, rs1_h2_val == rs2_h2_val, rs1_h0_val == 64, rs2_h3_val == -33, rs2_h0_val == -257, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: khmbb16 ; op1:x1; op2:x28; dest:x9; op1val:0x070006fff60040;  op2val:0xffdf00060100feff
TEST_PKRR_OP(khmbb16, x9, x1, x28, 0x0000000000000000, 0x070006fff60040, 0xffdf00060100feff, x1, x10, 80, x11)

inst_6:
// rs1==x15, rs2==x14, rd==x27, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val == -3, rs2_h1_val == -65, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == 16384, rs2_h2_val == 64, rs2_h3_val == -8193, rs1_h2_val == -32768
// opcode: khmbb16 ; op1:x15; op2:x14; dest:x27; op1val:0xfff88000fffdfff6;  op2val:0xdfff0040ffbf4000
TEST_PKRR_OP(khmbb16, x27, x15, x14, 0x0000000000000000, 0xfff88000fffdfff6, 0xdfff0040ffbf4000, x15, x10, 96, x11)

inst_7:
// rs1==x5, rs2==x4, rd==x3, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == -4097, rs1_h1_val == -17, rs1_h3_val == -17, rs1_h2_val == -129
// opcode: khmbb16 ; op1:x5; op2:x4; dest:x3; op1val:0xffefff7fffeffffc;  op2val:0x06ffff0006efff
TEST_PKRR_OP(khmbb16, x3, x5, x4, 0x0000000000000000, 0xffefff7fffeffffc, 0x06ffff0006efff, x5, x10, 112, x11)

inst_8:
// rs1==x21, rs2==x5, rd==x22, rs1_h1_val == rs2_h1_val, rs2_h1_val == 0, rs2_h0_val == -21846, rs1_h3_val == 4, rs1_h2_val == 64, rs1_h1_val == 0, rs2_h3_val == -16385
// opcode: khmbb16 ; op1:x21; op2:x5; dest:x22; op1val:0x0400400000fff6;  op2val:0xbffffffa0000aaaa
TEST_PKRR_OP(khmbb16, x22, x21, x5, 0x0000000000000000, 0x0400400000fff6, 0xbffffffa0000aaaa, x21, x10, 128, x11)

inst_9:
// rs1==x16, rs2==x25, rd==x6, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h3_val == -5, rs1_h0_val == 128, rs2_h1_val == -32768, rs1_h1_val == 4096
// opcode: khmbb16 ; op1:x16; op2:x25; dest:x6; op1val:0xfffb000910000080;  op2val:0x3fff000380008000
TEST_PKRR_OP(khmbb16, x6, x16, x25, 0x0000000000000000, 0xfffb000910000080, 0x3fff000380008000, x16, x10, 144, x11)

inst_10:
// rs1==x30, rs2==x22, rd==x16, rs1_h0_val == rs2_h0_val, rs2_h0_val == 21845, rs2_h2_val == -257, rs2_h3_val == -2, rs1_h2_val == 1, rs1_h1_val == 4, rs1_h0_val == 21845, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: khmbb16 ; op1:x30; op2:x22; dest:x16; op1val:0xfffa000100045555;  op2val:0xfffefefffffc5555
TEST_PKRR_OP(khmbb16, x16, x30, x22, 0x0000000000000000, 0xfffa000100045555, 0xfffefefffffc5555, x30, x10, 160, x11)

inst_11:
// rs1==x22, rs2==x6, rd==x21, rs2_h3_val == -21846, rs2_h0_val == -65, rs1_h1_val == -4097, rs1_h0_val == 32767, rs2_h2_val == 0, rs1_h3_val == 2048
// opcode: khmbb16 ; op1:x22; op2:x6; dest:x21; op1val:0x800fffaefff7fff;  op2val:0xaaaa0000c000ffbf
TEST_PKRR_OP(khmbb16, x21, x22, x6, 0x0000000000000000, 0x800fffaefff7fff, 0xaaaa0000c000ffbf, x22, x10, 176, x11)

inst_12:
// rs1==x14, rs2==x18, rd==x30, rs2_h3_val == 21845, rs1_h2_val == 16, rs1_h0_val == 1024, rs2_h0_val == -1025
// opcode: khmbb16 ; op1:x14; op2:x18; dest:x30; op1val:0xc0000010c0000400;  op2val:0x55550006c000fbff
TEST_PKRR_OP(khmbb16, x30, x14, x18, 0x0000000000000000, 0xc0000010c0000400, 0x55550006c000fbff, x14, x10, 192, x11)

inst_13:
// rs1==x2, rs2==x7, rd==x31, rs2_h3_val == 32767, rs1_h3_val == -1025, rs2_h2_val == 4096, rs1_h2_val == 4096, rs1_h0_val == -2
// opcode: khmbb16 ; op1:x2; op2:x7; dest:x31; op1val:0xfbff1000fff8fffe;  op2val:0x7fff1000fff60007
TEST_PKRR_OP(khmbb16, x31, x2, x7, 0x0000000000000000, 0xfbff1000fff8fffe, 0x7fff1000fff60007, x2, x10, 208, x11)

inst_14:
// rs1==x8, rs2==x16, rd==x12, rs2_h3_val == -4097, rs1_h1_val == -1025, rs2_h1_val == -21846, rs2_h0_val == -513
// opcode: khmbb16 ; op1:x8; op2:x16; dest:x12; op1val:0xfffb3ffffbff0080;  op2val:0xeffffff9aaaafdff
TEST_PKRR_OP(khmbb16, x12, x8, x16, 0x0000000000000000, 0xfffb3ffffbff0080, 0xeffffff9aaaafdff, x8, x10, 224, x11)

inst_15:
// rs1==x29, rs2==x21, rd==x1, rs2_h3_val == -2049, rs2_h0_val == 2, rs1_h2_val == 0, rs2_h1_val == -2, rs1_h0_val == 8, rs1_h3_val == 4096, rs1_h1_val == -9
// opcode: khmbb16 ; op1:x29; op2:x21; dest:x1; op1val:0x10000000fff70008;  op2val:0xf7ff0000fffe0002
TEST_PKRR_OP(khmbb16, x1, x29, x21, 0x0000000000000000, 0x10000000fff70008, 0xf7ff0000fffe0002, x29, x10, 240, x11)

inst_16:
// rs1==x23, rs2==x30, rd==x28, rs2_h3_val == -1025, rs1_h1_val == 8, rs2_h2_val == 2, rs1_h0_val == 512, rs1_h3_val == -2049
// opcode: khmbb16 ; op1:x23; op2:x30; dest:x28; op1val:0xf7ff3fff00080200;  op2val:0xfbff000201004000
TEST_PKRR_OP(khmbb16, x28, x23, x30, 0x0000000000000000, 0xf7ff3fff00080200, 0xfbff000201004000, x23, x10, 256, x11)

inst_17:
// rs1==x27, rs2==x15, rd==x26, rs2_h3_val == -513, rs1_h2_val == -1, rs2_h1_val == -1
// opcode: khmbb16 ; op1:x27; op2:x15; dest:x26; op1val:0x1000ffffc0000009;  op2val:0xfdff0006ffff0006
TEST_PKRR_OP(khmbb16, x26, x27, x15, 0x0000000000000000, 0x1000ffffc0000009, 0xfdff0006ffff0006, x27, x10, 272, x8)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_18:
// rs1==x4, rs2==x20, rd==x10, rs2_h3_val == -257, rs2_h0_val == 1, rs2_h2_val == 1024, rs1_h1_val == -16385, rs1_h3_val == -2, rs1_h0_val == -1025
// opcode: khmbb16 ; op1:x4; op2:x20; dest:x10; op1val:0xfffe0003bffffbff;  op2val:0xfeff040000060001
TEST_PKRR_OP(khmbb16, x10, x4, x20, 0x0000000000000000, 0xfffe0003bffffbff, 0xfeff040000060001, x4, x3, 0, x8)

inst_19:
// rs1==x20, rs2==x19, rd==x18, rs2_h3_val == -129, rs1_h3_val == -4097
// opcode: khmbb16 ; op1:x20; op2:x19; dest:x18; op1val:0xefff00090000fff8;  op2val:0xff7fffef3fffffff
TEST_PKRR_OP(khmbb16, x18, x20, x19, 0x0000000000000000, 0xefff00090000fff8, 0xff7fffef3fffffff, x20, x3, 16, x8)

inst_20:
// rs1==x13, rs2==x23, rd==x17, rs2_h3_val == -65, rs1_h2_val == -8193, rs2_h0_val == 4096, rs2_h2_val == -2
// opcode: khmbb16 ; op1:x13; op2:x23; dest:x17; op1val:0x1000dfff0200efff;  op2val:0xffbffffe00101000
TEST_PKRR_OP(khmbb16, x17, x13, x23, 0x0000000000000000, 0x1000dfff0200efff, 0xffbffffe00101000, x13, x3, 32, x8)

inst_21:
// rs1==x17, rs2==x13, rd==x7, rs2_h3_val == -17, rs2_h2_val == 16384, rs2_h1_val == -513, rs2_h0_val == 4, rs1_h3_val == 512
// opcode: khmbb16 ; op1:x17; op2:x13; dest:x7; op1val:0x200c000effffff9;  op2val:0xffef4000fdff0004
TEST_PKRR_OP(khmbb16, x7, x17, x13, 0x0000000000000000, 0x200c000effffff9, 0xffef4000fdff0004, x17, x3, 48, x8)

inst_22:
// rs1==x26, rs2==x17, rd==x11, rs2_h3_val == -9, 
// opcode: khmbb16 ; op1:x26; op2:x17; dest:x11; op1val:0xfff8dffffffadfff;  op2val:0xfff70040ffbffffc
TEST_PKRR_OP(khmbb16, x11, x26, x17, 0x0000000000000000, 0xfff8dffffffadfff, 0xfff70040ffbffffc, x26, x3, 64, x8)

inst_23:
// rs1==x25, rs2==x0, rd==x29, rs2_h3_val == -5, rs2_h1_val == 2, rs1_h0_val == -33, rs2_h0_val == 8, rs1_h1_val == 16384, rs1_h3_val == 16384
// opcode: khmbb16 ; op1:x25; op2:x0; dest:x29; op1val:0x400010004000ffdf;  op2val:0xfffb400000020008
TEST_PKRR_OP(khmbb16, x29, x25, x0, 0x0000000000000000, 0x400010004000ffdf, 0xfffb400000020008, x25, x3, 80, x8)

inst_24:
// rs1==x31, rs2==x11, rd==x4, rs2_h3_val == -3, rs2_h1_val == -5, rs1_h1_val == -21846, rs1_h3_val == 32767
// opcode: khmbb16 ; op1:x31; op2:x11; dest:x4; op1val:0x7fff0003aaaafff9;  op2val:0xfffdfff6fffbaaaa
TEST_PKRR_OP(khmbb16, x4, x31, x11, 0x0000000000000000, 0x7fff0003aaaafff9, 0xfffdfff6fffbaaaa, x31, x3, 96, x8)

inst_25:
// rs1==x7, rs2==x27, rd==x2, rs2_h3_val == -32768, rs2_h1_val == 21845, rs1_h0_val == -3, rs1_h3_val == 32, rs1_h2_val == 128, rs2_h0_val == 128
// opcode: khmbb16 ; op1:x7; op2:x27; dest:x2; op1val:0x200080c000fffd;  op2val:0x8000000855550080
TEST_PKRR_OP(khmbb16, x2, x7, x27, 0x0000000000000000, 0x200080c000fffd, 0x8000000855550080, x7, x3, 112, x8)

inst_26:
// rs1==x6, rs2==x1, rd==x15, rs2_h3_val == 16384, rs2_h2_val == -2049, rs2_h1_val == -17, rs1_h3_val == 8
// opcode: khmbb16 ; op1:x6; op2:x1; dest:x15; op1val:0x0800070009fffa;  op2val:0x4000f7ffffeffff6
TEST_PKRR_OP(khmbb16, x15, x6, x1, 0x0000000000000000, 0x0800070009fffa, 0x4000f7ffffeffff6, x6, x3, 128, x8)

inst_27:
// rs1==x12, rs2==x26, rd==x5, rs2_h3_val == 8192, rs1_h2_val == 512, rs1_h0_val == 8192, rs1_h1_val == 16, rs2_h2_val == 512, rs2_h0_val == 8192
// opcode: khmbb16 ; op1:x12; op2:x26; dest:x5; op1val:0xfffe020000102000;  op2val:0x2000020000002000
TEST_PKRR_OP(khmbb16, x5, x12, x26, 0x0000000000000000, 0xfffe020000102000, 0x2000020000002000, x12, x3, 144, x8)

inst_28:
// rs1==x18, rs2==x10, rd==x23, rs2_h3_val == 4096, rs2_h1_val == 1, rs1_h0_val == -17, rs2_h0_val == 32767, rs2_h2_val == 4, rs1_h2_val == -3
// opcode: khmbb16 ; op1:x18; op2:x10; dest:x23; op1val:0xfffafffd7fffffef;  op2val:0x1000000400017fff
TEST_PKRR_OP(khmbb16, x23, x18, x10, 0x0000000000000000, 0xfffafffd7fffffef, 0x1000000400017fff, x18, x3, 160, x8)

inst_29:
// rs1==x0, rs2==x9, rd==x25, rs2_h3_val == 2048, rs1_h1_val == -65, rs1_h0_val == 256, rs2_h2_val == 32767
// opcode: khmbb16 ; op1:x0; op2:x9; dest:x25; op1val:0xfff6fffdffbf0100;  op2val:0x8007fff20008000
TEST_PKRR_OP(khmbb16, x25, x0, x9, 0x0000000000000000, 0xfff6fffdffbf0100, 0x8007fff20008000, x0, x3, 176, x8)

inst_30:
// rs1==x10, rs2==x31, rd==x0, rs2_h3_val == 1024, rs2_h2_val == -65, rs1_h0_val == -16385, rs1_h1_val == 32, rs2_h1_val == 32
// opcode: khmbb16 ; op1:x10; op2:x31; dest:x0; op1val:0x0700070020bfff;  op2val:0x400ffbf00207fff
TEST_PKRR_OP(khmbb16, x0, x10, x31, 0x0000000000000000, 0x0700070020bfff, 0x400ffbf00207fff, x10, x3, 192, x8)

inst_31:
// rs1==x11, rs2==x2, rd==x13, rs2_h3_val == 512, rs1_h1_val == 1024, rs2_h2_val == -4097, rs1_h0_val == 4
// opcode: khmbb16 ; op1:x11; op2:x2; dest:x13; op1val:0x200008004000004;  op2val:0x200effffff82000
TEST_PKRR_OP(khmbb16, x13, x11, x2, 0x0000000000000000, 0x200008004000004, 0x200effffff82000, x11, x3, 208, x8)

inst_32:
// rs2_h3_val == 256, rs2_h1_val == 4, rs2_h2_val == -5, rs1_h2_val == -16385
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefbfff3fff3fff;  op2val:0x100fffb0004feff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xffefbfff3fff3fff, 0x100fffb0004feff, x30, x3, 224, x8)

inst_33:
// rs2_h3_val == 128, rs1_h3_val == -32768, rs1_h0_val == 0
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fff8dfff0000;  op2val:0x80fffe0009fffa
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x8000fff8dfff0000, 0x80fffe0009fffa, x30, x3, 240, x8)

inst_34:
// rs2_h3_val == 64, rs2_h2_val == 1
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000dfff00063fff;  op2val:0x400001fdfffeff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xc000dfff00063fff, 0x400001fdfffeff, x30, x3, 256, x8)

inst_35:
// rs1_h1_val == -5, rs1_h2_val == 4, rs2_h0_val == 512
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000004fffb5555;  op2val:0x1000fffefdff0200
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xc0000004fffb5555, 0x1000fffefdff0200, x30, x3, 272, x8)

inst_36:
// rs1_h1_val == -2, rs1_h3_val == 256
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fff6fffe0000;  op2val:0xfff7ffff0001ffff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x100fff6fffe0000, 0xfff7ffff0001ffff, x30, x3, 288, x8)

inst_37:
// rs1_h1_val == -32768, rs2_h0_val == -3
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff3fff8000fffe;  op2val:0xaaaa10000003fffd
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xefff3fff8000fffe, 0xaaaa10000003fffd, x30, x3, 304, x8)

inst_38:
// rs1_h1_val == 8192, rs2_h0_val == -8193, rs2_h1_val == 32767
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf000620000000;  op2val:0xfbff02007fffdfff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xffbf000620000000, 0xfbff02007fffdfff, x30, x3, 320, x8)

inst_39:
// rs1_h1_val == 2048, rs1_h3_val == -257
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff00090800fff9;  op2val:0xfff94000fdff0008
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfeff00090800fff9, 0xfff94000fdff0008, x30, x3, 336, x8)

inst_40:
// rs1_h1_val == 256, rs1_h3_val == 8192, rs2_h0_val == -129
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffa0100fffe;  op2val:0xfff800000100ff7f
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x2000fffa0100fffe, 0xfff800000100ff7f, x30, x3, 352, x8)

inst_41:
// rs1_h1_val == 128, rs1_h0_val == 16, rs1_h2_val == -9, rs2_h1_val == -33
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000fff700800010;  op2val:0xfff7fffbffdfffbf
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xc000fff700800010, 0xfff7fffbffdfffbf, x30, x3, 368, x8)

inst_42:
// rs1_h1_val == 2, rs1_h2_val == -65, rs2_h0_val == -33, rs2_h2_val == 16, rs2_h1_val == -2049
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x800ffbf0002fffc;  op2val:0x80000010f7ffffdf
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x800ffbf0002fffc, 0x80000010f7ffffdf, x30, x3, 384, x8)

inst_43:
// rs1_h1_val == 1, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x03dfff0001fff9;  op2val:0xefffffbf3ffffff6
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x03dfff0001fff9, 0xefffffbf3ffffff6, x30, x3, 400, x8)

inst_44:
// rs1_h1_val == -1, rs2_h1_val == 128, rs1_h2_val == 2, rs1_h3_val == 16
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x100002ffff0008;  op2val:0x5555ffbf0080ffdf
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x100002ffff0008, 0x5555ffbf0080ffdf, x30, x3, 416, x8)

inst_45:
// rs1_h0_val == -21846, rs2_h0_val == 2048, rs1_h2_val == -2
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fffefffdaaaa;  op2val:0xff7fffbfffff0800
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x20fffefffdaaaa, 0xff7fffbfffff0800, x30, x3, 432, x8)

inst_46:
// rs1_h0_val == -2049, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffd0003f7ff;  op2val:0x3fffeffffff9c000
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfffbfffd0003f7ff, 0x3fffeffffff9c000, x30, x3, 448, x8)

inst_47:
// rs1_h0_val == -513, rs2_h0_val == -2049
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffe0008fdff;  op2val:0x4000010fffff7ff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xffdffffe0008fdff, 0x4000010fffff7ff, x30, x3, 464, x8)

inst_48:
// rs1_h0_val == -257, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fff90800feff;  op2val:0xfffd0007fffc0003
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x03fff90800feff, 0xfffd0007fffc0003, x30, x3, 480, x8)

inst_49:
// rs1_h0_val == -129, rs2_h1_val == 4096
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ff7f0010ff7f;  op2val:0x3fff020010005555
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfff6ff7f0010ff7f, 0x3fff020010005555, x30, x3, 496, x8)

inst_50:
// rs1_h0_val == -65, rs2_h0_val == 256
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000007dfffffbf;  op2val:0x800004000040100
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x8000007dfffffbf, 0x800004000040100, x30, x3, 512, x8)

inst_51:
// rs1_h0_val == -5, rs2_h3_val == 2, rs1_h2_val == -33
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x06ffdf0100fffb;  op2val:0x02fbfffff6fffa
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x06ffdf0100fffb, 0x02fbfffff6fffa, x30, x3, 528, x8)

inst_52:
// rs1_h0_val == 16384, rs2_h1_val == 16384, rs2_h2_val == 256
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8000700404000;  op2val:0x10001004000fdff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfff8000700404000, 0x10001004000fdff, x30, x3, 544, x8)

inst_53:
// rs1_h0_val == 4096, rs2_h2_val == -8193
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fff6fffe1000;  op2val:0x03dfff3fff0200
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfff8fff6fffe1000, 0x03dfff3fff0200, x30, x3, 560, x8)

inst_54:
// rs1_h0_val == 2048, rs2_h1_val == -3, rs1_h3_val == 1, rs2_h2_val == 2048, rs1_h2_val == 1024
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x01040002000800;  op2val:0x090800fffdefff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x01040002000800, 0x090800fffdefff, x30, x3, 576, x8)

inst_55:
// rs1_h0_val == 32, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa200000080020;  op2val:0x40fff940000008
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfffa200000080020, 0x40fff940000008, x30, x3, 592, x8)

inst_56:
// rs1_h0_val == 2, rs1_h2_val == -513
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000fdff00030002;  op2val:0x4000efff80000200
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xc000fdff00030002, 0x4000efff80000200, x30, x3, 608, x8)

inst_57:
// rs2_h3_val == 32, rs2_h0_val == -17
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000000205555;  op2val:0x203fff0010ffef
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfbff000000205555, 0x203fff0010ffef, x30, x3, 624, x8)

inst_58:
// rs1_h0_val == 1, rs2_h3_val == 4, rs1_h2_val == 21845, rs2_h1_val == 8
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0355553fff0001;  op2val:0x0410000008fffc
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x0355553fff0001, 0x0410000008fffc, x30, x3, 640, x8)

inst_59:
// rs2_h3_val == 16, rs2_h1_val == -1025, rs1_h3_val == -3
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd4000fbffffbf;  op2val:0x10dffffbffdfff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfffd4000fbffffbf, 0x10dffffbffdfff, x30, x3, 656, x8)

inst_60:
// rs2_h0_val == -16385, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000800001001000;  op2val:0xfff9fff90100bfff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x4000800001001000, 0xfff9fff90100bfff, x30, x3, 672, x8)

inst_61:
// rs2_h0_val == -9, rs1_h3_val == -9
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7000600800002;  op2val:0xf7fffffac000fff7
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfff7000600800002, 0xf7fffffac000fff7, x30, x3, 688, x8)

inst_62:
// rs2_h0_val == -5, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff800041000fff8;  op2val:0x40000060001fffb
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfff800041000fff8, 0x40000060001fffb, x30, x3, 704, x8)

inst_63:
// rs2_h0_val == -2, rs1_h2_val == -2049, rs2_h2_val == -513
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefff7ff00401000;  op2val:0x08fdfffffbfffe
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfefff7ff00401000, 0x08fdfffffbfffe, x30, x3, 720, x8)

inst_64:
// rs2_h0_val == 1024, rs2_h2_val == -9
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffff602002000;  op2val:0xfff7fff77fff0400
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfefffff602002000, 0xfff7fff77fff0400, x30, x3, 736, x8)

inst_65:
// rs2_h0_val == 64, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000050400ffdf;  op2val:0xffbffeff00000040
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x80000050400ffdf, 0xffbffeff00000040, x30, x3, 752, x8)

inst_66:
// rs2_h0_val == 32, rs2_h2_val == 21845, rs1_h1_val == -2049
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0010f7ffdfff;  op2val:0xfff9555500070020
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfbff0010f7ffdfff, 0xfff9555500070020, x30, x3, 768, x8)

inst_67:
// rs2_h0_val == 16, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x10ff7fc000fdff;  op2val:0x20000340000010
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x10ff7fc000fdff, 0x20000340000010, x30, x3, 784, x8)

inst_68:
// rs1_h3_val == -21846, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa008080000009;  op2val:0xbfffffbf0005dfff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xaaaa008080000009, 0xbfffffbf0005dfff, x30, x3, 800, x8)

inst_69:
// rs1_h3_val == 21845, rs1_h2_val == 32
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x555500200020fff9;  op2val:0x5555f7fffffb2000
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x555500200020fff9, 0x5555f7fffffb2000, x30, x3, 816, x8)

inst_70:
// rs1_h3_val == -16385, rs1_h2_val == 32767
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff7ffffbff0004;  op2val:0xfffd000900100005
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xbfff7ffffbff0004, 0xfffd000900100005, x30, x3, 832, x8)

inst_71:
// rs1_h3_val == -8193, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff555500010001;  op2val:0xbffffffa7fffdfff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xdfff555500010001, 0xbffffffa7fffdfff, x30, x3, 848, x8)

inst_72:
// rs1_h3_val == -513, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffff940000800;  op2val:0xfff9fbfffff9ffff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfdfffff940000800, 0xfff9fbfffff9ffff, x30, x3, 864, x8)

inst_73:
// rs1_h3_val == -129, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ff7ff00070009;  op2val:0x06fff600093fff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xff7ff7ff00070009, 0x06fff600093fff, x30, x3, 880, x8)

inst_74:
// rs1_h0_val == -1, rs2_h1_val == 512, rs1_h2_val == -17
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffeffff6ffff;  op2val:0xfff600070200ffdf
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfeffffeffff6ffff, 0xfff600070200ffdf, x30, x3, 896, x8)

inst_75:
// rs2_h3_val == 1, rs1_h1_val == -129
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x208000ff7fff7f;  op2val:0x01fbfffffd8000
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x208000ff7fff7f, 0x01fbfffffd8000, x30, x3, 912, x8)

inst_76:
// rs2_h2_val == -21846, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x55551000aaaa2000;  op2val:0x800aaaa00207fff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x55551000aaaa2000, 0x800aaaa00207fff, x30, x3, 928, x8)

inst_77:
// rs2_h2_val == -16385, rs1_h1_val == -33
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fff7ffffdf0020;  op2val:0x100bfff0200fbff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xf7fff7ffffdf0020, 0x100bfff0200fbff, x30, x3, 944, x8)

inst_78:
// rs1_h3_val == 128, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x800003ffef0001;  op2val:0x3ffffeff7fff0008
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x800003ffef0001, 0x3ffffeff7fff0008, x30, x3, 960, x8)

inst_79:
// rs1_h3_val == 64, rs2_h2_val == 128
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x405555efff0800;  op2val:0x10008000800100
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x405555efff0800, 0x10008000800100, x30, x3, 976, x8)

inst_80:
// rs2_h2_val == -129, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf0400ffff;  op2val:0xffbfff7fffdf0001
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xffffffbf0400ffff, 0xffbfff7fffdf0001, x30, x3, 992, x8)

inst_81:
// rs2_h2_val == -33, rs1_h2_val == -21846
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x05aaaa00067fff;  op2val:0xaaaaffdf0001ffdf
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x05aaaa00067fff, 0xaaaaffdf0001ffdf, x30, x3, 1008, x8)

inst_82:
// rs1_h3_val == 2, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0200050800dfff;  op2val:0x10000003fdff0002
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x0200050800dfff, 0x10000003fdff0002, x30, x3, 1024, x8)

inst_83:
// rs1_h3_val == 0, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fff60003ffdf;  op2val:0x4000fff600043fff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x00fff60003ffdf, 0x4000fff600043fff, x30, x3, 1040, x8)

inst_84:
// rs2_h2_val == -3, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000440000400;  op2val:0x5555fffd0003ffdf
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x40000440000400, 0x5555fffd0003ffdf, x30, x3, 1056, x8)

inst_85:
// rs2_h2_val == -32768, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x403fff2000fffd;  op2val:0x048000fffeffef
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x403fff2000fffd, 0x048000fffeffef, x30, x3, 1072, x8)

inst_86:
// rs2_h2_val == 8192, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff1000fffd0001;  op2val:0xfffc2000fff80009
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xf7ff1000fffd0001, 0xfffc2000fff80009, x30, x3, 1088, x8)

inst_87:
// rs1_h2_val == -4097, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x00effffff6fffc;  op2val:0x803ffffbff0040
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x00effffff6fffc, 0x803ffffbff0040, x30, x3, 1104, x8)

inst_88:
// rs1_h2_val == -1025, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fbfffffd0040;  op2val:0xfdff2000ffef0010
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x8000fbfffffd0040, 0xfdff2000ffef0010, x30, x3, 1120, x8)

inst_89:
// rs1_h2_val == -257, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x400feff40000009;  op2val:0x4000077fff1000
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x400feff40000009, 0x4000077fff1000, x30, x3, 1136, x8)

inst_90:
// rs2_h1_val == -16385, rs1_h1_val == -513
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffdff1000;  op2val:0x060007bfff0001
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfffff7fffdff1000, 0x060007bfff0001, x30, x3, 1152, x8)

inst_91:
// rs2_h2_val == 32, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffefdfff0003;  op2val:0x050020fffc0000
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfffdffefdfff0003, 0x050020fffc0000, x30, x3, 1168, x8)

inst_92:
// rs2_h1_val == -8193, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x00ffef10000006;  op2val:0xffff0003dfff0400
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x00ffef10000006, 0xffff0003dfff0400, x30, x3, 1184, x8)

inst_93:
// rs2_h1_val == -4097, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff10000400fff9;  op2val:0xfff90006efff3fff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x3fff10000400fff9, 0xfff90006efff3fff, x30, x3, 1200, x8)

inst_94:
// rs1_h2_val == 256, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff010008008000;  op2val:0x20fffffffeffff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x3fff010008008000, 0x20fffffffeffff, x30, x3, 1216, x8)

inst_95:
// rs2_h1_val == -257, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0404000008ffbf;  op2val:0xf7fffbfffeff0001
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x0404000008ffbf, 0xf7fffbfffeff0001, x30, x3, 1232, x8)

inst_96:
// rs2_h1_val == -129, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x06bfff40007fff;  op2val:0xfeff0009ff7f7fff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x06bfff40007fff, 0xfeff0009ff7f7fff, x30, x3, 1248, x8)

inst_97:
// rs1_h1_val == 21845, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffa5555fffd;  op2val:0xfffc4000ffdfff7f
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x5555fffa5555fffd, 0xfffc4000ffdfff7f, x30, x3, 1264, x8)

inst_98:
// rs2_h1_val == 64, rs1_h1_val == -257
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0040feff0009;  op2val:0xffdfffbf0040feff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xaaaa0040feff0009, 0xffdfffbf0040feff, x30, x3, 1280, x8)

inst_99:
// rs2_h1_val == 1024, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0400effffffb;  op2val:0xf7fffff704000080
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xdfff0400effffffb, 0xf7fffff704000080, x30, x3, 1296, x8)

inst_100:
// rs1_h2_val == -5, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffb2000fff7;  op2val:0x0200070008fffe
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfffafffb2000fff7, 0x0200070008fffe, x30, x3, 1312, x8)

inst_101:
// rs2_h1_val == -9, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffef0040ffff;  op2val:0xffbf1000fff70400
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x7fffffef0040ffff, 0xffbf1000fff70400, x30, x3, 1328, x8)

inst_102:
// rs2_h1_val == 2048, 
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff77fffff7f0400;  op2val:0x08ffef0800f7ff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfff77fffff7f0400, 0x08ffef0800f7ff, x30, x3, 1344, x8)

inst_103:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val == 8, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == 8192, rs2_h0_val == -32768, rs1_h0_val == -4097
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0900080003efff;  op2val:0xc000000920008000
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x0900080003efff, 0xc000000920008000, x30, x3, 1360, x8)

inst_104:
// rs2_h3_val == -5, rs2_h1_val == 2, rs1_h0_val == -33, rs2_h0_val == 8, rs1_h1_val == 16384, rs1_h3_val == 16384
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x400010004000ffdf;  op2val:0xfffb400000020008
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x400010004000ffdf, 0xfffb400000020008, x30, x3, 1376, x8)

inst_105:
// rs2_h3_val == 2048, rs1_h1_val == -65, rs1_h0_val == 256, rs2_h2_val == 32767
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffdffbf0100;  op2val:0x8007fff20008000
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0xfff6fffdffbf0100, 0x8007fff20008000, x30, x3, 1392, x8)

inst_106:
// rs2_h3_val == 1024, rs2_h2_val == -65, rs1_h0_val == -16385, rs1_h1_val == 32, rs2_h1_val == 32
// opcode: khmbb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0700070020bfff;  op2val:0x400ffbf00207fff
TEST_PKRR_OP(khmbb16, x31, x30, x29, 0x0000000000000000, 0x0700070020bfff, 0x400ffbf00207fff, x30, x3, 1408, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 178*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
