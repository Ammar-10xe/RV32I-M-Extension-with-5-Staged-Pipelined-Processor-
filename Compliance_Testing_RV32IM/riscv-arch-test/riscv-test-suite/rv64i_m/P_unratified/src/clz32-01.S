
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the clz32 instruction of the RISC-V RV64PZicsr extension for the clz32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",clz32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x13,signature_x13_1)

inst_0:
// rs1==x4, rd==x14, rs1_w0_val == 0, 
// opcode: clz32 ; op1:x4; dest:x14; op1val:0x00000900000000;
TEST_RD_OP( clz32, x14, x4, 0x0000000000000000, 0x00000900000000, x13, 0, x8)

inst_1:
// rs1==x3, rd==x4, rs1_w1_val == 2863311530, rs1_w0_val == 512
// opcode: clz32 ; op1:x3; dest:x4; op1val:0xaaaaaaaa00000200;
TEST_RD_OP( clz32, x4, x3, 0x0000000000000000, 0xaaaaaaaa00000200, x13, 8, x8)

inst_2:
// rs1==x18, rd==x7, rs1_w1_val == 1431655765, rs1_w0_val == 67108864
// opcode: clz32 ; op1:x18; dest:x7; op1val:0x5555555504000000;
TEST_RD_OP( clz32, x7, x18, 0x0000000000000000, 0x5555555504000000, x13, 16, x8)

inst_3:
// rs1==x11, rd==x3, rs1_w1_val == 2147483647, rs1_w0_val == 4227858431
// opcode: clz32 ; op1:x11; dest:x3; op1val:0x7ffffffffbffffff;
TEST_RD_OP( clz32, x3, x11, 0x0000000000000000, 0x7ffffffffbffffff, x13, 24, x8)

inst_4:
// rs1==x20, rd==x12, rs1_w1_val == 3221225471, rs1_w0_val == 1431655765
// opcode: clz32 ; op1:x20; dest:x12; op1val:0xbfffffff55555555;
TEST_RD_OP( clz32, x12, x20, 0x0000000000000000, 0xbfffffff55555555, x13, 32, x8)

inst_5:
// rs1==x30, rd==x24, rs1_w1_val == 3758096383, 
// opcode: clz32 ; op1:x30; dest:x24; op1val:0xdfffffff00000006;
TEST_RD_OP( clz32, x24, x30, 0x0000000000000000, 0xdfffffff00000006, x13, 40, x8)

inst_6:
// rs1==x9, rd==x23, rs1_w1_val == 4026531839, rs1_w0_val == 4294967167
// opcode: clz32 ; op1:x9; dest:x23; op1val:0xefffffffffffff7f;
TEST_RD_OP( clz32, x23, x9, 0x0000000000000000, 0xefffffffffffff7f, x13, 48, x8)

inst_7:
// rs1==x26, rd==x22, rs1_w1_val == 4160749567, 
// opcode: clz32 ; op1:x26; dest:x22; op1val:0xf7ffffff0000000c;
TEST_RD_OP( clz32, x22, x26, 0x0000000000000000, 0xf7ffffff0000000c, x13, 56, x8)

inst_8:
// rs1==x7, rd==x21, rs1_w1_val == 4227858431, rs1_w0_val == 32
// opcode: clz32 ; op1:x7; dest:x21; op1val:0xfbffffff00000020;
TEST_RD_OP( clz32, x21, x7, 0x0000000000000000, 0xfbffffff00000020, x13, 64, x8)

inst_9:
// rs1==x1, rd==x10, rs1_w1_val == 4261412863, rs1_w0_val == 262144
// opcode: clz32 ; op1:x1; dest:x10; op1val:0xfdffffff00040000;
TEST_RD_OP( clz32, x10, x1, 0x0000000000000000, 0xfdffffff00040000, x13, 72, x8)

inst_10:
// rs1==x25, rd==x20, rs1_w1_val == 4278190079, rs1_w0_val == 4294965247
// opcode: clz32 ; op1:x25; dest:x20; op1val:0xfefffffffffff7ff;
TEST_RD_OP( clz32, x20, x25, 0x0000000000000000, 0xfefffffffffff7ff, x13, 80, x8)

inst_11:
// rs1==x5, rd==x25, rs1_w1_val == 4286578687, rs1_w0_val == 64
// opcode: clz32 ; op1:x5; dest:x25; op1val:0xff7fffff00000040;
TEST_RD_OP( clz32, x25, x5, 0x0000000000000000, 0xff7fffff00000040, x13, 88, x8)

inst_12:
// rs1==x12, rd==x31, rs1_w1_val == 4290772991, rs1_w0_val == 1
// opcode: clz32 ; op1:x12; dest:x31; op1val:0xffbfffff00000001;
TEST_RD_OP( clz32, x31, x12, 0x0000000000000000, 0xffbfffff00000001, x13, 96, x8)

inst_13:
// rs1==x31, rd==x29, rs1_w1_val == 4292870143, rs1_w0_val == 4261412863
// opcode: clz32 ; op1:x31; dest:x29; op1val:0xffdffffffdffffff;
TEST_RD_OP( clz32, x29, x31, 0x0000000000000000, 0xffdffffffdffffff, x13, 104, x8)

inst_14:
// rs1==x22, rd==x16, rs1_w1_val == 4293918719, rs1_w0_val == 16384
// opcode: clz32 ; op1:x22; dest:x16; op1val:0xffefffff00004000;
TEST_RD_OP( clz32, x16, x22, 0x0000000000000000, 0xffefffff00004000, x13, 112, x8)

inst_15:
// rs1==x27, rd==x30, rs1_w1_val == 4294443007, rs1_w0_val == 4294967295
// opcode: clz32 ; op1:x27; dest:x30; op1val:0xfff7ffffffffffff;
TEST_RD_OP( clz32, x30, x27, 0x0000000000000000, 0xfff7ffffffffffff, x13, 120, x8)

inst_16:
// rs1==x15, rd==x2, rs1_w1_val == 4294705151, 
// opcode: clz32 ; op1:x15; dest:x2; op1val:0xfffbffff04000000;
TEST_RD_OP( clz32, x2, x15, 0x0000000000000000, 0xfffbffff04000000, x13, 128, x8)

inst_17:
// rs1==x17, rd==x6, rs1_w1_val == 4294836223, rs1_w0_val == 4294705151
// opcode: clz32 ; op1:x17; dest:x6; op1val:0xfffdfffffffbffff;
TEST_RD_OP( clz32, x6, x17, 0x0000000000000000, 0xfffdfffffffbffff, x13, 136, x8)

inst_18:
// rs1==x0, rd==x11, rs1_w1_val == 4294901759, 
// opcode: clz32 ; op1:x0; dest:x11; op1val:0xfffefffffffbffff;
TEST_RD_OP( clz32, x11, x0, 0x0000000000000000, 0xfffefffffffbffff, x13, 144, x3)

inst_19:
// rs1==x29, rd==x26, rs1_w1_val == 4294934527, 
// opcode: clz32 ; op1:x29; dest:x26; op1val:0xffff7fff0000000b;
TEST_RD_OP( clz32, x26, x29, 0x0000000000000000, 0xffff7fff0000000b, x13, 152, x3)

inst_20:
// rs1==x14, rd==x1, rs1_w1_val == 4294950911, rs1_w0_val == 4
// opcode: clz32 ; op1:x14; dest:x1; op1val:0xffffbfff00000004;
TEST_RD_OP( clz32, x1, x14, 0x0000000000000000, 0xffffbfff00000004, x13, 160, x3)

inst_21:
// rs1==x28, rd==x8, rs1_w1_val == 4294959103, rs1_w0_val == 536870912
// opcode: clz32 ; op1:x28; dest:x8; op1val:0xffffdfff20000000;
TEST_RD_OP( clz32, x8, x28, 0x0000000000000000, 0xffffdfff20000000, x13, 168, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_22:
// rs1==x10, rd==x0, rs1_w1_val == 4294963199, rs1_w0_val == 2147483647
// opcode: clz32 ; op1:x10; dest:x0; op1val:0xffffefff7fffffff;
TEST_RD_OP( clz32, x0, x10, 0x0000000000000000, 0xffffefff7fffffff, x1, 0, x3)

inst_23:
// rs1==x16, rd==x18, rs1_w1_val == 4294965247, rs1_w0_val == 4294443007
// opcode: clz32 ; op1:x16; dest:x18; op1val:0xfffff7fffff7ffff;
TEST_RD_OP( clz32, x18, x16, 0x0000000000000000, 0xfffff7fffff7ffff, x1, 8, x3)

inst_24:
// rs1==x6, rd==x9, rs1_w1_val == 4294966271, rs1_w0_val == 8
// opcode: clz32 ; op1:x6; dest:x9; op1val:0xfffffbff00000008;
TEST_RD_OP( clz32, x9, x6, 0x0000000000000000, 0xfffffbff00000008, x1, 16, x3)

inst_25:
// rs1==x19, rd==x15, rs1_w1_val == 4294966783, rs1_w0_val == 4294967279
// opcode: clz32 ; op1:x19; dest:x15; op1val:0xfffffdffffffffef;
TEST_RD_OP( clz32, x15, x19, 0x0000000000000000, 0xfffffdffffffffef, x1, 24, x3)

inst_26:
// rs1==x23, rd==x28, rs1_w1_val == 4294967039, rs1_w0_val == 131072
// opcode: clz32 ; op1:x23; dest:x28; op1val:0xfffffeff00020000;
TEST_RD_OP( clz32, x28, x23, 0x0000000000000000, 0xfffffeff00020000, x1, 32, x3)

inst_27:
// rs1==x8, rd==x13, rs1_w1_val == 4294967167, 
// opcode: clz32 ; op1:x8; dest:x13; op1val:0xffffff7f0000000c;
TEST_RD_OP( clz32, x13, x8, 0x0000000000000000, 0xffffff7f0000000c, x1, 40, x3)

inst_28:
// rs1==x24, rd==x17, rs1_w1_val == 4294967231, rs1_w0_val == 4294966783
// opcode: clz32 ; op1:x24; dest:x17; op1val:0xffffffbffffffdff;
TEST_RD_OP( clz32, x17, x24, 0x0000000000000000, 0xffffffbffffffdff, x1, 48, x3)

inst_29:
// rs1==x13, rd==x5, rs1_w1_val == 4294967263, rs1_w0_val == 524288
// opcode: clz32 ; op1:x13; dest:x5; op1val:0xffffffdf00080000;
TEST_RD_OP( clz32, x5, x13, 0x0000000000000000, 0xffffffdf00080000, x1, 56, x3)

inst_30:
// rs1==x21, rd==x27, rs1_w1_val == 4294967279, rs1_w0_val == 4294836223
// opcode: clz32 ; op1:x21; dest:x27; op1val:0xffffffeffffdffff;
TEST_RD_OP( clz32, x27, x21, 0x0000000000000000, 0xffffffeffffdffff, x1, 64, x3)

inst_31:
// rs1==x2, rd==x19, rs1_w1_val == 4294967287, 
// opcode: clz32 ; op1:x2; dest:x19; op1val:0xfffffff7fbffffff;
TEST_RD_OP( clz32, x19, x2, 0x0000000000000000, 0xfffffff7fbffffff, x1, 72, x3)

inst_32:
// rs1_w1_val == 4294967291, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xfffffffb00080000;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xfffffffb00080000, x1, 80, x3)

inst_33:
// rs1_w1_val == 4294967293, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xfffffffd00000009;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xfffffffd00000009, x1, 88, x3)

inst_34:
// rs1_w1_val == 4294967294, rs1_w0_val == 3221225471
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xfffffffebfffffff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xfffffffebfffffff, x1, 96, x3)

inst_35:
// rs1_w1_val == 2147483648, rs1_w0_val == 65536
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x8000000000010000;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x8000000000010000, x1, 104, x3)

inst_36:
// rs1_w1_val == 1073741824, rs1_w0_val == 4294966271
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x40000000fffffbff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x40000000fffffbff, x1, 112, x3)

inst_37:
// rs1_w1_val == 536870912, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x20000000fff7ffff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x20000000fff7ffff, x1, 120, x3)

inst_38:
// rs1_w1_val == 268435456, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x1000000000020000;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x1000000000020000, x1, 128, x3)

inst_39:
// rs1_w1_val == 134217728, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x800000000000003;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x800000000000003, x1, 136, x3)

inst_40:
// rs1_w1_val == 67108864, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x400000000000011;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x400000000000011, x1, 144, x3)

inst_41:
// rs1_w1_val == 33554432, rs1_w0_val == 32768
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x200000000008000;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x200000000008000, x1, 152, x3)

inst_42:
// rs1_w1_val == 16777216, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x1000000fffbffff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x1000000fffbffff, x1, 160, x3)

inst_43:
// rs1_w1_val == 8388608, rs1_w0_val == 2048
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x80000000000800;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x80000000000800, x1, 168, x3)

inst_44:
// rs1_w1_val == 4194304, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x400000fff7ffff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x400000fff7ffff, x1, 176, x3)

inst_45:
// rs1_w0_val == 16, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x40000000000010;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x40000000000010, x1, 184, x3)

inst_46:
// rs1_w0_val == 2, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x7fffffff00000002;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x7fffffff00000002, x1, 192, x3)

inst_47:
// rs1_w1_val == 2097152, rs1_w0_val == 256
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x20000000000100;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x20000000000100, x1, 200, x3)

inst_48:
// rs1_w1_val == 1048576, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x10000000000003;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x10000000000003, x1, 208, x3)

inst_49:
// rs1_w1_val == 524288, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x080000ffffffff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x080000ffffffff, x1, 216, x3)

inst_50:
// rs1_w1_val == 262144, rs1_w0_val == 2097152
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x04000000200000;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x04000000200000, x1, 224, x3)

inst_51:
// rs1_w1_val == 131072, rs1_w0_val == 4096
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x02000000001000;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x02000000001000, x1, 232, x3)

inst_52:
// rs1_w1_val == 65536, rs1_w0_val == 268435456
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x01000010000000;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x01000010000000, x1, 240, x3)

inst_53:
// rs1_w1_val == 32768, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x0080000000000c;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x0080000000000c, x1, 248, x3)

inst_54:
// rs1_w1_val == 16384, rs1_w0_val == 4294950911
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x004000ffffbfff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x004000ffffbfff, x1, 256, x3)

inst_55:
// rs1_w1_val == 8192, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x00200000000800;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x00200000000800, x1, 264, x3)

inst_56:
// rs1_w1_val == 4096, rs1_w0_val == 1024
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x00100000000400;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x00100000000400, x1, 272, x3)

inst_57:
// rs1_w1_val == 2048, rs1_w0_val == 4294967293
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x000800fffffffd;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x000800fffffffd, x1, 280, x3)

inst_58:
// rs1_w1_val == 1024, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x0004000000000f;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x0004000000000f, x1, 288, x3)

inst_59:
// rs1_w1_val == 512, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x00020000000010;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x00020000000010, x1, 296, x3)

inst_60:
// rs1_w1_val == 256, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x00010000000010;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x00010000000010, x1, 304, x3)

inst_61:
// rs1_w1_val == 128, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x000080fffbffff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x000080fffbffff, x1, 312, x3)

inst_62:
// rs1_w1_val == 64, rs1_w0_val == 4294967287
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x000040fffffff7;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x000040fffffff7, x1, 320, x3)

inst_63:
// rs1_w1_val == 32, rs1_w0_val == 2147483648
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x00002080000000;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x00002080000000, x1, 328, x3)

inst_64:
// rs1_w1_val == 16, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x00001000000400;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x00001000000400, x1, 336, x3)

inst_65:
// rs1_w1_val == 8, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x0000080000000d;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x0000080000000d, x1, 344, x3)

inst_66:
// rs1_w1_val == 4, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x000004fffffffd;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x000004fffffffd, x1, 352, x3)

inst_67:
// rs1_w1_val == 2, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x00000200000001;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x00000200000001, x1, 360, x3)

inst_68:
// rs1_w1_val == 1, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x00000100040000;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x00000100040000, x1, 368, x3)

inst_69:
// rs1_w1_val == 4294967295, rs1_w0_val == 1073741824
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xffffffff40000000;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xffffffff40000000, x1, 376, x3)

inst_70:
// rs1_w1_val == 0, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x00000000000006;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x00000000000006, x1, 384, x3)

inst_71:
// rs1_w0_val == 2863311530, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x000004aaaaaaaa;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x000004aaaaaaaa, x1, 392, x3)

inst_72:
// rs1_w0_val == 3758096383, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xffffffffdfffffff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xffffffffdfffffff, x1, 400, x3)

inst_73:
// rs1_w0_val == 4026531839, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xfffffeffefffffff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xfffffeffefffffff, x1, 408, x3)

inst_74:
// rs1_w0_val == 4160749567, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x002000f7ffffff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x002000f7ffffff, x1, 416, x3)

inst_75:
// rs1_w0_val == 4278190079, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xfdfffffffeffffff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xfdfffffffeffffff, x1, 424, x3)

inst_76:
// rs1_w0_val == 4286578687, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xfffffffdff7fffff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xfffffffdff7fffff, x1, 432, x3)

inst_77:
// rs1_w0_val == 4290772991, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x40000000ffbfffff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x40000000ffbfffff, x1, 440, x3)

inst_78:
// rs1_w0_val == 4292870143, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xdfffffffffdfffff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xdfffffffffdfffff, x1, 448, x3)

inst_79:
// rs1_w0_val == 4293918719, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x00000cffefffff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x00000cffefffff, x1, 456, x3)

inst_80:
// rs1_w0_val == 4294901759, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xeffffffffffeffff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xeffffffffffeffff, x1, 464, x3)

inst_81:
// rs1_w0_val == 4294934527, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x000009ffff7fff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x000009ffff7fff, x1, 472, x3)

inst_82:
// rs1_w0_val == 4294967231, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x000013ffffffbf;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x000013ffffffbf, x1, 480, x3)

inst_83:
// rs1_w0_val == 4294959103, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x001000ffffdfff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x001000ffffdfff, x1, 488, x3)

inst_84:
// rs1_w0_val == 4294967263, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xfffffffeffffffdf;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xfffffffeffffffdf, x1, 496, x3)

inst_85:
// rs1_w0_val == 4294967291, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xffdffffffffffffb;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xffdffffffffffffb, x1, 504, x3)

inst_86:
// rs1_w0_val == 4294967294, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xfffffefffffffffe;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xfffffefffffffffe, x1, 512, x3)

inst_87:
// rs1_w0_val == 134217728, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x5555555508000000;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x5555555508000000, x1, 520, x3)

inst_88:
// rs1_w0_val == 33554432, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x00000f02000000;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x00000f02000000, x1, 528, x3)

inst_89:
// rs1_w0_val == 16777216, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x00000d01000000;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x00000d01000000, x1, 536, x3)

inst_90:
// rs1_w0_val == 4194304, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x8000000000400000;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x8000000000400000, x1, 544, x3)

inst_91:
// rs1_w0_val == 1048576, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xffffbfff00100000;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xffffbfff00100000, x1, 552, x3)

inst_92:
// rs1_w0_val == 8192, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xfffffffd00002000;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xfffffffd00002000, x1, 560, x3)

inst_93:
// rs1_w0_val == 4294963199, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xfffffdffffffefff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xfffffdffffffefff, x1, 568, x3)

inst_94:
// rs1_w0_val == 128, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xaaaaaaaa00000080;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xaaaaaaaa00000080, x1, 576, x3)

inst_95:
// rs1_w0_val == 4294967039, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x020000fffffeff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x020000fffffeff, x1, 584, x3)

inst_96:
// rs1_w0_val == 8388608, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0x100000000800000;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0x100000000800000, x1, 592, x3)

inst_97:
// rs1_w1_val == 4294901759, 
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xfffefffffffbffff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xfffefffffffbffff, x1, 600, x3)

inst_98:
// rs1_w1_val == 4294963199, rs1_w0_val == 2147483647
// opcode: clz32 ; op1:x30; dest:x31; op1val:0xffffefff7fffffff;
TEST_RD_OP( clz32, x31, x30, 0x0000000000000000, 0xffffefff7fffffff, x1, 608, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 77*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
