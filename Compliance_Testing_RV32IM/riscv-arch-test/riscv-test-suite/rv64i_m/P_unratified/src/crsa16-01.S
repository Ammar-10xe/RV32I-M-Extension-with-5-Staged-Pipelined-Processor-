
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the crsa16 instruction of the RISC-V RV64PZicsr extension for the crsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",crsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x22,signature_x22_1)

inst_0:// rs1 == rd != rs2, rs1==x5, rs2==x13, rd==x5, rs1_h0_val == -32768, rs2_h2_val == -1, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h1_val == 8192, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val != rs2_h1_val, rs1_h3_val == -1025, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 8192, rs2_h1_val == 64, rs1_h2_val == -32768
// opcode: crsa16 ; op1:x5; op2:x13; dest:x5; op1val:0xfbff800020008000;  op2val:0x07ffff00402000
TEST_RR_OP(crsa16, x5, x5, x13, 0x0000000000000000, 0xfbff800020008000, 0x07ffff00402000, x22, 0, x23)

inst_1:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x8, rs2==x2, rd==x7, rs1_h3_val == rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h2_val == -1025, rs2_h1_val == -4097, rs1_h0_val == 1024, rs1_h1_val == 64, rs1_h2_val == -21846, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: crsa16 ; op1:x8; op2:x2; dest:x7; op1val:0xfffcaaaa00400400;  op2val:0xfffcfbffeffffff6
TEST_RR_OP(crsa16, x7, x8, x2, 0x0000000000000000, 0xfffcaaaa00400400, 0xfffcfbffeffffff6, x22, 8, x23)

inst_2:// rs1 == rs2 != rd, rs1==x18, rs2==x18, rd==x0, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h0_val == -8193, rs1_h1_val == 256, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 21845, rs2_h1_val == -3, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h3_val == -4097, rs1_h0_val == -1, rs2_h2_val == 1
// opcode: crsa16 ; op1:x18; op2:x18; dest:x0; op1val:0x0555550100ffff;  op2val:0xefff0001fffddfff
TEST_RR_OP(crsa16, x0, x18, x18, 0x0000000000000000, 0x0555550100ffff, 0xefff0001fffddfff, x22, 16, x23)

inst_3:// rs1 == rs2 == rd, rs1==x9, rs2==x9, rd==x9, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 64, rs2_h1_val == -8193, rs2_h2_val == -513, rs2_h0_val == -513, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -16385, rs2_h3_val == 16, rs1_h2_val == -129
// opcode: crsa16 ; op1:x9; op2:x9; dest:x9; op1val:0x40ff7fbffffff8;  op2val:0x10fdffdffffdff
TEST_RR_OP(crsa16, x9, x9, x9, 0x0000000000000000, 0x40ff7fbffffff8, 0x10fdffdffffdff, x22, 24, x23)

inst_4:// rs2 == rd != rs1, rs1==x11, rs2==x21, rd==x21, rs1_h2_val == rs2_h2_val, rs2_h3_val == -1025, rs1_h3_val == -257, rs2_h1_val == -65
// opcode: crsa16 ; op1:x11; op2:x21; dest:x21; op1val:0xfefffffcbfff0009;  op2val:0xfbfffffcffbffff6
TEST_RR_OP(crsa16, x21, x11, x21, 0x0000000000000000, 0xfefffffcbfff0009, 0xfbfffffcffbffff6, x22, 32, x23)

inst_5:// rs1==x1, rs2==x25, rd==x29, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h0_val == 4096, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val == -1, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == -21846, rs1_h1_val == -257, rs2_h1_val == 128, rs1_h3_val == -5
// opcode: crsa16 ; op1:x1; op2:x25; dest:x29; op1val:0xfffbfffffeff1000;  op2val:0xaaaa000900800007
TEST_RR_OP(crsa16, x29, x1, x25, 0x0000000000000000, 0xfffbfffffeff1000, 0xaaaa000900800007, x22, 40, x23)

inst_6:// rs1==x3, rs2==x7, rd==x1, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 64, rs1_h0_val == -17, rs2_h0_val == -2
// opcode: crsa16 ; op1:x3; op2:x7; dest:x1; op1val:0xfffc0040fffcffef;  op2val:0x3ffffffc0005fffe
TEST_RR_OP(crsa16, x1, x3, x7, 0x0000000000000000, 0xfffc0040fffcffef, 0x3ffffffc0005fffe, x22, 48, x23)

inst_7:// rs1==x19, rs2==x17, rd==x11, rs1_h1_val == rs2_h1_val, rs1_h1_val == -4097, rs1_h0_val == 32767, rs1_h3_val == 4096, rs2_h0_val == -129
// opcode: crsa16 ; op1:x19; op2:x17; dest:x11; op1val:0x1000fff8efff7fff;  op2val:0x09fdffefffff7f
TEST_RR_OP(crsa16, x11, x19, x17, 0x0000000000000000, 0x1000fff8efff7fff, 0x09fdffefffff7f, x22, 56, x23)

inst_8:// rs1==x29, rs2==x20, rd==x2, rs1_h0_val == rs2_h0_val, rs1_h0_val == -33, rs1_h2_val == 4096, rs2_h1_val == 32767, rs2_h2_val == -3, rs2_h0_val == -33, rs1_h1_val == -33
// opcode: crsa16 ; op1:x29; op2:x20; dest:x2; op1val:0xfffa1000ffdfffdf;  op2val:0x3ffffffd7fffffdf
TEST_RR_OP(crsa16, x2, x29, x20, 0x0000000000000000, 0xfffa1000ffdfffdf, 0x3ffffffd7fffffdf, x22, 64, x23)

inst_9:// rs1==x7, rs2==x6, rd==x14, rs2_h3_val == 21845, rs2_h2_val == 64, rs1_h3_val == -65, rs1_h0_val == -3
// opcode: crsa16 ; op1:x7; op2:x6; dest:x14; op1val:0xffbffff9bffffffd;  op2val:0x55550040fff6fff9
TEST_RR_OP(crsa16, x14, x7, x6, 0x0000000000000000, 0xffbffff9bffffffd, 0x55550040fff6fff9, x22, 72, x23)

inst_10:// rs1==x12, rs2==x8, rd==x20, rs2_h3_val == 32767, rs1_h3_val == 21845, rs2_h2_val == -5, rs1_h1_val == 32767, rs2_h0_val == -3, rs1_h2_val == -257, rs2_h1_val == 512
// opcode: crsa16 ; op1:x12; op2:x8; dest:x20; op1val:0x5555feff7fffffef;  op2val:0x7ffffffb0200fffd
TEST_RR_OP(crsa16, x20, x12, x8, 0x0000000000000000, 0x5555feff7fffffef, 0x7ffffffb0200fffd, x22, 80, x23)

inst_11:// rs1==x31, rs2==x4, rd==x16, rs2_h3_val == -16385, rs2_h2_val == -16385, rs1_h0_val == -65, rs2_h1_val == 21845, rs1_h1_val == 16384, rs2_h0_val == -9
// opcode: crsa16 ; op1:x31; op2:x4; dest:x16; op1val:0x5555feff4000ffbf;  op2val:0xbfffbfff5555fff7
TEST_RR_OP(crsa16, x16, x31, x4, 0x0000000000000000, 0x5555feff4000ffbf, 0xbfffbfff5555fff7, x22, 88, x23)

inst_12:// rs1==x10, rs2==x15, rd==x6, rs2_h3_val == -8193, rs1_h2_val == -33
// opcode: crsa16 ; op1:x10; op2:x15; dest:x6; op1val:0x09ffdf00400006;  op2val:0xdffffffdfffafff7
TEST_RR_OP(crsa16, x6, x10, x15, 0x0000000000000000, 0x09ffdf00400006, 0xdffffffdfffafff7, x22, 96, x23)

inst_13:// rs1==x30, rs2==x5, rd==x25, rs2_h3_val == -2049, rs2_h0_val == -1, rs1_h0_val == 8192, rs1_h3_val == -9, rs2_h2_val == 32, rs1_h2_val == -5
// opcode: crsa16 ; op1:x30; op2:x5; dest:x25; op1val:0xfff7fffb00052000;  op2val:0xf7ff00207fffffff
TEST_RR_OP(crsa16, x25, x30, x5, 0x0000000000000000, 0xfff7fffb00052000, 0xf7ff00207fffffff, x22, 104, x23)

inst_14:// rs1==x20, rs2==x30, rd==x28, rs2_h3_val == -513, rs2_h2_val == -8193, rs2_h0_val == -2049, rs1_h3_val == 32767, rs2_h1_val == -21846
// opcode: crsa16 ; op1:x20; op2:x30; dest:x28; op1val:0x7fffff7fffdfffef;  op2val:0xfdffdfffaaaaf7ff
TEST_RR_OP(crsa16, x28, x20, x30, 0x0000000000000000, 0x7fffff7fffdfffef, 0xfdffdfffaaaaf7ff, x22, 112, x23)

inst_15:// rs1==x24, rs2==x16, rd==x8, rs2_h3_val == -257, rs1_h0_val == 64, rs2_h0_val == -17, rs1_h1_val == -1, rs2_h2_val == 1024, rs2_h1_val == 8192, rs1_h3_val == -3
// opcode: crsa16 ; op1:x24; op2:x16; dest:x8; op1val:0xfffdaaaaffff0040;  op2val:0xfeff04002000ffef
TEST_RR_OP(crsa16, x8, x24, x16, 0x0000000000000000, 0xfffdaaaaffff0040, 0xfeff04002000ffef, x22, 120, x7)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_16:// rs1==x25, rs2==x19, rd==x22, rs2_h3_val == -129, rs1_h3_val == 1024, rs1_h1_val == 512, rs2_h0_val == -4097, rs1_h0_val == -8193, rs2_h2_val == 8
// opcode: crsa16 ; op1:x25; op2:x19; dest:x22; op1val:0x400c0000200dfff;  op2val:0xff7f0008fffaefff
TEST_RR_OP(crsa16, x22, x25, x19, 0x0000000000000000, 0x400c0000200dfff, 0xff7f0008fffaefff, x5, 0, x7)

inst_17:// rs1==x4, rs2==x11, rd==x18, rs2_h3_val == -65, rs1_h1_val == 1, rs1_h2_val == 1024
// opcode: crsa16 ; op1:x4; op2:x11; dest:x18; op1val:0x7fff040000010005;  op2val:0xffbf0009fff8fdff
TEST_RR_OP(crsa16, x18, x4, x11, 0x0000000000000000, 0x7fff040000010005, 0xffbf0009fff8fdff, x5, 8, x7)

inst_18:// rs1==x2, rs2==x27, rd==x3, rs2_h3_val == -33, rs1_h3_val == 128, rs2_h0_val == 4, rs2_h1_val == -32768, rs1_h1_val == -513, rs2_h2_val == 0
// opcode: crsa16 ; op1:x2; op2:x27; dest:x3; op1val:0x80fffcfdff0005;  op2val:0xffdf000080000004
TEST_RR_OP(crsa16, x3, x2, x27, 0x0000000000000000, 0x80fffcfdff0005, 0xffdf000080000004, x5, 16, x7)

inst_19:// rs1==x0, rs2==x31, rd==x12, rs2_h3_val == -17, rs1_h3_val == 512, rs1_h2_val == 256, rs1_h1_val == 2048, rs2_h1_val == -33, rs1_h0_val == -129
// opcode: crsa16 ; op1:x0; op2:x31; dest:x12; op1val:0x20001000800ff7f;  op2val:0xffeffbffffdfdfff
TEST_RR_OP(crsa16, x12, x0, x31, 0x0000000000000000, 0x20001000800ff7f, 0xffeffbffffdfdfff, x5, 24, x7)

inst_20:// rs1==x27, rs2==x14, rd==x10, rs2_h3_val == -9, rs2_h2_val == 8192, rs1_h0_val == 2048, rs1_h3_val == -129
// opcode: crsa16 ; op1:x27; op2:x14; dest:x10; op1val:0xff7fff7ffff80800;  op2val:0xfff7200020000006
TEST_RR_OP(crsa16, x10, x27, x14, 0x0000000000000000, 0xff7fff7ffff80800, 0xfff7200020000006, x5, 32, x7)

inst_21:// rs1==x14, rs2==x12, rd==x31, rs2_h3_val == -5, rs1_h3_val == 0, rs2_h0_val == -1025, rs1_h0_val == 1, rs2_h1_val == 2048, rs1_h1_val == -9
// opcode: crsa16 ; op1:x14; op2:x12; dest:x31; op1val:0x00ffdffff70001;  op2val:0xfffbfff90800fbff
TEST_RR_OP(crsa16, x31, x14, x12, 0x0000000000000000, 0x00ffdffff70001, 0xfffbfff90800fbff, x5, 40, x7)

inst_22:// rs1==x6, rs2==x24, rd==x17, rs2_h3_val == -3, rs1_h0_val == -5, rs1_h1_val == 128, rs1_h2_val == 4, rs2_h2_val == -2, rs2_h1_val == 256
// opcode: crsa16 ; op1:x6; op2:x24; dest:x17; op1val:0xfff800040080fffb;  op2val:0xfffdfffe0100ff7f
TEST_RR_OP(crsa16, x17, x6, x24, 0x0000000000000000, 0xfff800040080fffb, 0xfffdfffe0100ff7f, x5, 48, x7)

inst_23:// rs1==x16, rs2==x22, rd==x19, rs2_h3_val == -2, rs2_h0_val == -257
// opcode: crsa16 ; op1:x16; op2:x22; dest:x19; op1val:0x40000057ffffffc;  op2val:0xfffe04000800feff
TEST_RR_OP(crsa16, x19, x16, x22, 0x0000000000000000, 0x40000057ffffffc, 0xfffe04000800feff, x5, 56, x7)

inst_24:// rs1==x21, rs2==x28, rd==x13, rs2_h3_val == -32768, rs1_h3_val == -513, rs1_h1_val == 2, rs1_h0_val == 16
// opcode: crsa16 ; op1:x21; op2:x28; dest:x13; op1val:0xfdff800000020010;  op2val:0x800020000009ffdf
TEST_RR_OP(crsa16, x13, x21, x28, 0x0000000000000000, 0xfdff800000020010, 0x800020000009ffdf, x5, 64, x7)

inst_25:// rs1==x13, rs2==x0, rd==x24, rs2_h3_val == 16384, rs2_h2_val == -65, rs1_h2_val == -4097, rs1_h1_val == -129, rs2_h0_val == 1
// opcode: crsa16 ; op1:x13; op2:x0; dest:x24; op1val:0x00efffff7ffffb;  op2val:0x4000ffbf00400001
TEST_RR_OP(crsa16, x24, x13, x0, 0x0000000000000000, 0x00efffff7ffffb, 0x4000ffbf00400001, x5, 72, x7)

inst_26:// rs1==x23, rs2==x26, rd==x30, rs2_h3_val == 8192, rs1_h1_val == -5, rs2_h0_val == 16, rs1_h3_val == -1, rs2_h2_val == -129
// opcode: crsa16 ; op1:x23; op2:x26; dest:x30; op1val:0xfffffefffffb8000;  op2val:0x2000ff7f00800010
TEST_RR_OP(crsa16, x30, x23, x26, 0x0000000000000000, 0xfffffefffffb8000, 0x2000ff7f00800010, x5, 80, x7)

inst_27:// rs1==x26, rs2==x3, rd==x27, rs2_h3_val == 4096, rs2_h2_val == -33, rs1_h1_val == -8193
// opcode: crsa16 ; op1:x26; op2:x3; dest:x27; op1val:0x55550040dfffc000;  op2val:0x1000ffdfc000fff8
TEST_RR_OP(crsa16, x27, x26, x3, 0x0000000000000000, 0x55550040dfffc000, 0x1000ffdfc000fff8, x5, 88, x7)

inst_28:// rs1==x17, rs2==x10, rd==x26, rs2_h3_val == 2048, rs2_h1_val == 1, rs2_h0_val == 2, rs1_h3_val == 2, rs1_h2_val == 8, rs1_h0_val == 2
// opcode: crsa16 ; op1:x17; op2:x10; dest:x26; op1val:0x020008ff7f0002;  op2val:0x800bfff00010002
TEST_RR_OP(crsa16, x26, x17, x10, 0x0000000000000000, 0x020008ff7f0002, 0x800bfff00010002, x5, 96, x7)

inst_29:// rs1==x22, rs2==x1, rd==x4, rs2_h3_val == 1024, rs1_h0_val == 32, rs1_h3_val == 256, rs2_h1_val == -2049
// opcode: crsa16 ; op1:x22; op2:x1; dest:x4; op1val:0x100aaaa08000020;  op2val:0x400fffbf7fffff9
TEST_RR_OP(crsa16, x4, x22, x1, 0x0000000000000000, 0x100aaaa08000020, 0x400fffbf7fffff9, x5, 104, x7)

inst_30:// rs1==x28, rs2==x23, rd==x15, rs2_h3_val == 512, rs1_h1_val == -21846
// opcode: crsa16 ; op1:x28; op2:x23; dest:x15; op1val:0x078000aaaa0040;  op2val:0x200fff80009fffc
TEST_RR_OP(crsa16, x15, x28, x23, 0x0000000000000000, 0x078000aaaa0040, 0x200fff80009fffc, x5, 112, x7)

inst_31:// rs1==x15, rs2==x29, rd==x23, rs2_h3_val == 256, rs2_h0_val == -16385, rs2_h1_val == -129, rs1_h1_val == 8, rs1_h0_val == -21846, rs1_h2_val == -513
// opcode: crsa16 ; op1:x15; op2:x29; dest:x23; op1val:0xfffafdff0008aaaa;  op2val:0x100fffdff7fbfff
TEST_RR_OP(crsa16, x23, x15, x29, 0x0000000000000000, 0xfffafdff0008aaaa, 0x100fffdff7fbfff, x5, 120, x1)

inst_32:// rs2_h3_val == 128, rs1_h2_val == -2
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffeeffffff6;  op2val:0x80fff90800ff7f
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x5555fffeeffffff6, 0x80fff90800ff7f, x5, 128, x1)

inst_33:// rs2_h3_val == 64, rs2_h2_val == 2
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffafeff8000;  op2val:0x400002dfff0006
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xffbffffafeff8000, 0x400002dfff0006, x5, 136, x1)

inst_34:// rs1_h1_val == -3, rs2_h3_val == 4, rs1_h0_val == 256
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0009fffd0100;  op2val:0x04ffbffffcfbff
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xfdff0009fffd0100, 0x04ffbffffcfbff, x5, 144, x1)

inst_35:// rs1_h1_val == -2, rs1_h2_val == -16385
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555bffffffefff6;  op2val:0xfffcffdf2000feff
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x5555bffffffefff6, 0xfffcffdf2000feff, x5, 152, x1)

inst_36:// rs1_h1_val == -32768, rs2_h0_val == 64, rs2_h1_val == -16385, rs2_h2_val == 512, rs1_h0_val == -257
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff755558000feff;  op2val:0xbfff0200bfff0040
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xfff755558000feff, 0xbfff0200bfff0040, x5, 160, x1)

inst_37:// rs1_h1_val == 4096, rs2_h2_val == 16, rs2_h3_val == 0, rs2_h0_val == -21846, rs1_h0_val == 0
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff810000000;  op2val:0x0000100100aaaa
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xfffffff810000000, 0x0000100100aaaa, x5, 168, x1)

inst_38:// rs1_h1_val == 1024, rs1_h0_val == -1025, rs2_h2_val == -21846, rs1_h3_val == -8193
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffe0400fbff;  op2val:0xfffcaaaa0003aaaa
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xdffffffe0400fbff, 0xfffcaaaa0003aaaa, x5, 176, x1)

inst_39:// rs1_h1_val == 32, rs1_h3_val == -2, rs2_h0_val == 32767
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefff600200100;  op2val:0xfbff0001dfff7fff
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xfffefff600200100, 0xfbff0001dfff7fff, x5, 184, x1)

inst_40:// rs1_h1_val == 16, rs1_h0_val == -513, rs1_h3_val == 16
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1055550010fdff;  op2val:0xfff60010efffefff
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x1055550010fdff, 0xfff60010efffefff, x5, 192, x1)

inst_41:// rs1_h1_val == 4, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff3fff0004fff6;  op2val:0xffbffdffefffff7f
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xffff3fff0004fff6, 0xffbffdffefffff7f, x5, 200, x1)

inst_42:// rs1_h1_val == 0, rs1_h2_val == 512, rs1_h3_val == -33
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf02000000ffdf;  op2val:0x1000dfffffdffff7
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xffdf02000000ffdf, 0x1000dfffffdffff7, x5, 208, x1)

inst_43:// rs1_h0_val == 21845, rs1_h1_val == -17
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fffaffef5555;  op2val:0xfffbff7f20000040
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x03fffaffef5555, 0xfffbff7f20000040, x5, 216, x1)

inst_44:// rs1_h0_val == -16385, rs1_h3_val == -4097
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffbfffabfff;  op2val:0xfffadfff0040fdff
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xeffffffbfffabfff, 0xfffadfff0040fdff, x5, 224, x1)

inst_45:// rs1_h0_val == -4097, rs2_h0_val == 256
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000100ffffefff;  op2val:0x04fdffff7f0100
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x4000100ffffefff, 0x04fdffff7f0100, x5, 232, x1)

inst_46:// rs1_h0_val == -2049, rs1_h2_val == -3, rs1_h1_val == 21845, rs2_h1_val == 0, rs2_h3_val == 32
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffd5555f7ff;  op2val:0x20fffa0000fff7
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x7ffffffd5555f7ff, 0x20fffa0000fff7, x5, 240, x1)

inst_47:// rs1_h0_val == -9, rs2_h1_val == -257, rs1_h2_val == -9
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fff75555fff7;  op2val:0x000400feff0005
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xfff9fff75555fff7, 0x000400feff0005, x5, 248, x1)

inst_48:// rs1_h0_val == -2, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000c0005555fffe;  op2val:0x20000040fff80003
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x1000c0005555fffe, 0x20000040fff80003, x5, 256, x1)

inst_49:// rs1_h0_val == 16384, rs2_h1_val == 32
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x00bffffff94000;  op2val:0xfffafffd0020fdff
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x00bffffff94000, 0xfffafffd0020fdff, x5, 264, x1)

inst_50:// rs1_h0_val == 512, rs1_h1_val == -1025, rs2_h0_val == 4096
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffafbff0200;  op2val:0xfffbaaaa08001000
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xfff7fffafbff0200, 0xfffbaaaa08001000, x5, 272, x1)

inst_51:// rs1_h0_val == 128, rs1_h2_val == 8192
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff200002000080;  op2val:0x1000001fff93fff
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xefff200002000080, 0x1000001fff93fff, x5, 280, x1)

inst_52:// rs1_h0_val == 8, rs2_h3_val == 1
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff100000010008;  op2val:0x01ffffff7ff7ff
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xfeff100000010008, 0x01ffffff7ff7ff, x5, 288, x1)

inst_53:// rs1_h0_val == 4, rs2_h0_val == 32, rs2_h1_val == -2, rs1_h3_val == 32
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20ffffc0000004;  op2val:0xfeffffdffffe0020
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x20ffffc0000004, 0xfeffffdffffe0020, x5, 296, x1)

inst_54:// rs2_h3_val == 8, rs1_h3_val == 1
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fdff3ffffff7;  op2val:0x08002055552000
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x01fdff3ffffff7, 0x08002055552000, x5, 304, x1)

inst_55:// rs2_h3_val == 2, rs2_h1_val == -513, rs1_h2_val == -17
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20ffef55550006;  op2val:0x02aaaafdfffffc
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x20ffef55550006, 0x02aaaafdfffffc, x5, 312, x1)

inst_56:// rs2_h3_val == -1, rs2_h2_val == -32768
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffff7fff8;  op2val:0xffff80000006fffd
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xfffefffffff7fff8, 0xffff80000006fffd, x5, 320, x1)

inst_57:// rs2_h1_val == 4, rs2_h2_val == 256
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffff804000008;  op2val:0x0701000004bfff
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xfefffff804000008, 0x0701000004bfff, x5, 328, x1)

inst_58:// rs2_h1_val == 2, rs2_h2_val == 32767
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffef0010feff;  op2val:0xc0007fff0002fffa
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xefffffef0010feff, 0xc0007fff0002fffa, x5, 336, x1)

inst_59:// rs2_h1_val == -1, rs1_h2_val == 16, rs2_h0_val == 0
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff600100009fff6;  op2val:0xfdff0005ffff0000
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xfff600100009fff6, 0xfdff0005ffff0000, x5, 344, x1)

inst_60:// rs2_h0_val == 21845, rs1_h2_val == 2048, rs2_h2_val == 21845
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x07080000000004;  op2val:0x03555501005555
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x07080000000004, 0x03555501005555, x5, 352, x1)

inst_61:// rs2_h0_val == -65, rs2_h1_val == 16384, rs1_h3_val == -16385
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff02000007fff9;  op2val:0x5555ff7f4000ffbf
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xbfff02000007fff9, 0x5555ff7f4000ffbf, x5, 360, x1)

inst_62:// rs2_h0_val == -5, rs2_h2_val == 4096
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000043fff;  op2val:0xfdff1000fff6fffb
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x00200000043fff, 0xfdff1000fff6fffb, x5, 368, x1)

inst_63:// rs2_h0_val == -32768, rs1_h3_val == -32768, rs1_h2_val == 32767
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80007fffffefaaaa;  op2val:0xfff8fff800808000
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x80007fffffefaaaa, 0xfff8fff800808000, x5, 376, x1)

inst_64:// rs2_h0_val == 16384, rs2_h1_val == 16
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fffc0010fffb;  op2val:0xffdffff900104000
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x02fffc0010fffb, 0xffdffff900104000, x5, 384, x1)

inst_65:// rs2_h0_val == 2048, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffef00800400;  op2val:0x10000300040800
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xfffdffef00800400, 0x10000300040800, x5, 392, x1)

inst_66:// rs2_h0_val == 1024, rs2_h2_val == -2049
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x555500030000fff9;  op2val:0xffbff7fffdff0400
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x555500030000fff9, 0xffbff7fffdff0400, x5, 400, x1)

inst_67:// rs2_h0_val == 512, rs1_h2_val == -1025
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffbff00010005;  op2val:0x8000000808000200
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xeffffbff00010005, 0x8000000808000200, x5, 408, x1)

inst_68:// rs2_h0_val == 128, rs2_h2_val == 4
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfdffffdf0008;  op2val:0x01000400040080
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xfffbfdffffdf0008, 0x01000400040080, x5, 416, x1)

inst_69:// rs2_h0_val == 8, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x00ff7fffdf0040;  op2val:0x5555fdffc0000008
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x00ff7fffdf0040, 0x5555fdffc0000008, x5, 424, x1)

inst_70:// rs1_h3_val == -21846, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa00090010fffd;  op2val:0xfffb00020080ff7f
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xaaaa00090010fffd, 0xfffb00020080ff7f, x5, 432, x1)

inst_71:// rs1_h3_val == -2049, rs2_h2_val == -17
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff7fffaaaa0800;  op2val:0xfffcffefaaaa7fff
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xf7ff7fffaaaa0800, 0xfffcffefaaaa7fff, x5, 440, x1)

inst_72:// rs2_h2_val == -4097, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x05080000080005;  op2val:0x2000efff5555c000
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x05080000080005, 0x2000efff5555c000, x5, 448, x1)

inst_73:// rs1_h3_val == 2048, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x800fff8fffbfff7;  op2val:0x40000100fffd0800
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x800fff8fffbfff7, 0x40000100fffd0800, x5, 456, x1)

inst_74:// rs2_h2_val == -257, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x102000efff0006;  op2val:0x7ffffeff0002fbff
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x102000efff0006, 0x7ffffeff0002fbff, x5, 464, x1)

inst_75:// rs1_h3_val == 8, rs1_h2_val == 16384
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0840000080aaaa;  op2val:0xffffdfff55550100
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x0840000080aaaa, 0xffffdfff55550100, x5, 472, x1)

inst_76:// rs1_h3_val == 4, rs2_h2_val == -9
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x045555ffeffbff;  op2val:0xfdfffff755550000
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x045555ffeffbff, 0xfdfffff755550000, x5, 480, x1)

inst_77:// rs2_h2_val == 16384, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff1000dffffbff;  op2val:0xff7f4000aaaafff7
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x7fff1000dffffbff, 0xff7f4000aaaafff7, x5, 488, x1)

inst_78:// rs1_h2_val == -8193, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaadfffbfff3fff;  op2val:0xffffffdfffdf0080
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xaaaadfffbfff3fff, 0xffffffdfffdf0080, x5, 496, x1)

inst_79:// rs2_h2_val == 2048, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fffffffdfffe;  op2val:0xfffc0800fffe0000
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x10fffffffdfffe, 0xfffc0800fffe0000, x5, 504, x1)

inst_80:// rs1_h2_val == -2049, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdf7fffff91000;  op2val:0xffff0100dffffff6
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xfffdf7fffff91000, 0xffff0100dffffff6, x5, 512, x1)

inst_81:// rs2_h2_val == 128, rs2_h1_val == 1024
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff6fffcf7ff;  op2val:0x200008004000200
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xffbffff6fffcf7ff, 0x200008004000200, x5, 520, x1)

inst_82:// rs1_h2_val == -65, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffbf00207fff;  op2val:0xaaaafff8fffefffb
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xfbffffbf00207fff, 0xaaaafff8fffefffb, x5, 528, x1)

inst_83:// rs1_h2_val == 128, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0080efffff7f;  op2val:0x060200fff91000
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x3fff0080efffff7f, 0x060200fff91000, x5, 536, x1)

inst_84:// rs2_h1_val == -1025, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x06fdff00800002;  op2val:0x1000fff7fbff0007
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x06fdff00800002, 0x1000fff7fbff0007, x5, 544, x1)

inst_85:// rs1_h2_val == 32, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000020fffbefff;  op2val:0x2000ffff0003fffe
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x80000020fffbefff, 0x2000ffff0003fffe, x5, 552, x1)

inst_86:// rs1_h2_val == 2, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x050002fffefdff;  op2val:0xfffe1000fffd7fff
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x050002fffefdff, 0xfffe1000fffd7fff, x5, 560, x1)

inst_87:// rs2_h1_val == -17, rs1_h3_val == 16384
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000aaaa3fff0005;  op2val:0x7fff0800ffef0000
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x4000aaaa3fff0005, 0x7fff0800ffef0000, x5, 568, x1)

inst_88:// rs1_h2_val == 1, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0001aaaa0002;  op2val:0xfffac00000060100
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xbfff0001aaaa0002, 0xfffac00000060100, x5, 576, x1)

inst_89:// rs2_h1_val == -9, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fff80007c000;  op2val:0xfff7effffff7fffa
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xfff7fff80007c000, 0xfff7effffff7fffa, x5, 584, x1)

inst_90:// rs1_h2_val == 0, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550000fbfffff6;  op2val:0xaaaa0005bfff0040
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x55550000fbfffff6, 0xaaaa0005bfff0040, x5, 592, x1)

inst_91:// rs2_h1_val == -5, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fbff20000001;  op2val:0x8000fefffffbfeff
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xfff7fbff20000001, 0x8000fefffffbfeff, x5, 600, x1)

inst_92:// rs1_h3_val == -17, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef00080000f7ff;  op2val:0xdfff55553ffffffe
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xffef00080000f7ff, 0xdfff55553ffffffe, x5, 608, x1)

inst_93:// rs2_h1_val == 4096, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff08002000fffe;  op2val:0xfeff20001000fffe
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xf7ff08002000fffe, 0xfeff20001000fffe, x5, 616, x1)

inst_94:// rs2_h1_val == 8, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcdfff00400008;  op2val:0xffefffdf00080400
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xfffcdfff00400008, 0xffefffdf00080400, x5, 624, x1)

inst_95:// rs1_h1_val == -65, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdc000ffbfbfff;  op2val:0x2000080aaaa0006
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0xfffdc000ffbfbfff, 0x2000080aaaa0006, x5, 632, x1)

inst_96:// rs1_h3_val == 8192, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffeffffd7fff;  op2val:0x100fff7ffef0002
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x2000ffeffffd7fff, 0x100fff7ffef0002, x5, 640, x1)

inst_97:// rs1_h1_val == -2049, 
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20f7fff7fffffe;  op2val:0x10020000004ffbf
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x20f7fff7fffffe, 0x10020000004ffbf, x5, 648, x1)

inst_98:// rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h0_val == -8193, rs1_h1_val == 256, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 21845, rs2_h1_val == -3, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h3_val == -4097, rs1_h0_val == -1, rs2_h2_val == 1
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0555550100ffff;  op2val:0xefff0001fffddfff
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x0555550100ffff, 0xefff0001fffddfff, x5, 656, x1)

inst_99:// rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 64, rs2_h1_val == -8193, rs2_h2_val == -513, rs2_h0_val == -513, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -16385, rs2_h3_val == 16, rs1_h2_val == -129
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40ff7fbffffff8;  op2val:0x10fdffdffffdff
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x40ff7fbffffff8, 0x10fdffdffffdff, x5, 664, x1)

inst_100:// rs2_h3_val == -17, rs1_h3_val == 512, rs1_h2_val == 256, rs1_h1_val == 2048, rs2_h1_val == -33, rs1_h0_val == -129
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20001000800ff7f;  op2val:0xffeffbffffdfdfff
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x20001000800ff7f, 0xffeffbffffdfdfff, x5, 672, x1)

inst_101:// rs2_h3_val == 16384, rs2_h2_val == -65, rs1_h2_val == -4097, rs1_h1_val == -129, rs2_h0_val == 1
// opcode: crsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x00efffff7ffffb;  op2val:0x4000ffbf00400001
TEST_RR_OP(crsa16, x31, x30, x29, 0x0000000000000000, 0x00efffff7ffffb, 0x4000ffbf00400001, x5, 680, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x22_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x22_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 86*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
