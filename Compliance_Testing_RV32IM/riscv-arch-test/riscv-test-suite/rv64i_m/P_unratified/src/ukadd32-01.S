
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukadd32 instruction of the RISC-V RV64PZicsr extension for the ukadd32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukadd32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x13, rs2==x15, rd==x13, rs1_w0_val == 0, rs1_w1_val == 1073741824, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 16777216, rs2_w0_val == 33554432
// opcode: ukadd32 ; op1:x13; op2:x15; dest:x13; op1val:0x4000000000000000;  op2val:0x100000002000000
TEST_PKRR_OP(ukadd32, x13, x13, x15, 0x0000000000000000, 0x4000000000000000, 0x100000002000000, x13, x2, 0, x5)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x14, rs2==x10, rd==x12, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 134217728
// opcode: ukadd32 ; op1:x14; op2:x10; dest:x12; op1val:0x00000a0000000d;  op2val:0x00000a08000000
TEST_PKRR_OP(ukadd32, x12, x14, x10, 0x0000000000000000, 0x00000a0000000d, 0x00000a08000000, x14, x2, 16, x5)

inst_2:
// rs1 == rs2 != rd, rs1==x18, rs2==x18, rd==x7, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 4294967287, rs1_w1_val == 1, rs2_w0_val == 4294967279, rs1_w0_val == 4294967279
// opcode: ukadd32 ; op1:x18; op2:x18; dest:x7; op1val:0x000001ffffffef;  op2val:0xfffffff7ffffffef
TEST_PKRR_OP(ukadd32, x7, x18, x18, 0x0000000000000000, 0x000001ffffffef, 0xfffffff7ffffffef, x18, x2, 32, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x22, rs2==x22, rd==x22, rs2_w1_val == 2863311530, rs1_w0_val == 32768, rs2_w0_val == 2147483648, rs1_w1_val == 4294967167
// opcode: ukadd32 ; op1:x22; op2:x22; dest:x22; op1val:0xffffff7f00008000;  op2val:0xaaaaaaaa80000000
TEST_PKRR_OP(ukadd32, x22, x22, x22, 0x0000000000000000, 0xffffff7f00008000, 0xaaaaaaaa80000000, x22, x2, 48, x5)

inst_4:
// rs2 == rd != rs1, rs1==x12, rs2==x25, rd==x25, rs2_w1_val == 1431655765, rs1_w0_val == 64, rs1_w1_val == 131072
// opcode: ukadd32 ; op1:x12; op2:x25; dest:x25; op1val:0x02000000000040;  op2val:0x5555555580000000
TEST_PKRR_OP(ukadd32, x25, x12, x25, 0x0000000000000000, 0x02000000000040, 0x5555555580000000, x12, x2, 64, x5)

inst_5:
// rs1==x20, rs2==x4, rd==x1, rs2_w1_val == 2147483647, rs1_w1_val == 4290772991, rs2_w0_val == 4294967263, rs1_w0_val == 268435456
// opcode: ukadd32 ; op1:x20; op2:x4; dest:x1; op1val:0xffbfffff10000000;  op2val:0x7fffffffffffffdf
TEST_PKRR_OP(ukadd32, x1, x20, x4, 0x0000000000000000, 0xffbfffff10000000, 0x7fffffffffffffdf, x20, x2, 80, x5)

inst_6:
// rs1==x24, rs2==x8, rd==x26, rs2_w1_val == 3221225471, rs2_w0_val == 2097152
// opcode: ukadd32 ; op1:x24; op2:x8; dest:x26; op1val:0x0000090000000e;  op2val:0xbfffffff00200000
TEST_PKRR_OP(ukadd32, x26, x24, x8, 0x0000000000000000, 0x0000090000000e, 0xbfffffff00200000, x24, x2, 96, x5)

inst_7:
// rs1==x15, rs2==x12, rd==x8, rs2_w1_val == 3758096383, rs2_w0_val == 4294705151, rs1_w1_val == 4294966783, rs1_w0_val == 4293918719
// opcode: ukadd32 ; op1:x15; op2:x12; dest:x8; op1val:0xfffffdffffefffff;  op2val:0xdffffffffffbffff
TEST_PKRR_OP(ukadd32, x8, x15, x12, 0x0000000000000000, 0xfffffdffffefffff, 0xdffffffffffbffff, x15, x2, 112, x5)

inst_8:
// rs1==x4, rs2==x9, rd==x27, rs2_w1_val == 4026531839, rs1_w0_val == 4294836223
// opcode: ukadd32 ; op1:x4; op2:x9; dest:x27; op1val:0x000005fffdffff;  op2val:0xefffffff0000000b
TEST_PKRR_OP(ukadd32, x27, x4, x9, 0x0000000000000000, 0x000005fffdffff, 0xefffffff0000000b, x4, x2, 128, x5)

inst_9:
// rs1==x19, rs2==x7, rd==x16, rs2_w1_val == 4160749567, rs1_w0_val == 4294966271, rs2_w0_val == 1431655765, rs1_w1_val == 4286578687
// opcode: ukadd32 ; op1:x19; op2:x7; dest:x16; op1val:0xff7ffffffffffbff;  op2val:0xf7ffffff55555555
TEST_PKRR_OP(ukadd32, x16, x19, x7, 0x0000000000000000, 0xff7ffffffffffbff, 0xf7ffffff55555555, x19, x2, 144, x5)

inst_10:
// rs1==x0, rs2==x23, rd==x29, rs2_w1_val == 4227858431, rs1_w1_val == 4096, rs1_w0_val == 4294967231, rs2_w0_val == 1048576
// opcode: ukadd32 ; op1:x0; op2:x23; dest:x29; op1val:0x001000ffffffbf;  op2val:0xfbffffff00100000
TEST_PKRR_OP(ukadd32, x29, x0, x23, 0x0000000000000000, 0x001000ffffffbf, 0xfbffffff00100000, x0, x2, 160, x5)

inst_11:
// rs1==x21, rs2==x24, rd==x15, rs2_w1_val == 4261412863, rs1_w1_val == 3758096383
// opcode: ukadd32 ; op1:x21; op2:x24; dest:x15; op1val:0xdfffffff0000000b;  op2val:0xfdffffff0000000b
TEST_PKRR_OP(ukadd32, x15, x21, x24, 0x0000000000000000, 0xdfffffff0000000b, 0xfdffffff0000000b, x21, x2, 176, x5)

inst_12:
// rs1==x17, rs2==x31, rd==x6, rs2_w1_val == 4278190079, rs1_w1_val == 4294967231, rs1_w0_val == 4294934527
// opcode: ukadd32 ; op1:x17; op2:x31; dest:x6; op1val:0xffffffbfffff7fff;  op2val:0xfeffffff0000000d
TEST_PKRR_OP(ukadd32, x6, x17, x31, 0x0000000000000000, 0xffffffbfffff7fff, 0xfeffffff0000000d, x17, x2, 192, x5)

inst_13:
// rs1==x7, rs2==x21, rd==x3, rs2_w1_val == 4286578687, rs1_w0_val == 4294966783, rs1_w1_val == 16777216
// opcode: ukadd32 ; op1:x7; op2:x21; dest:x3; op1val:0x1000000fffffdff;  op2val:0xff7fffff0000000b
TEST_PKRR_OP(ukadd32, x3, x7, x21, 0x0000000000000000, 0x1000000fffffdff, 0xff7fffff0000000b, x7, x2, 208, x5)

inst_14:
// rs1==x25, rs2==x3, rd==x21, rs2_w1_val == 4290772991, rs2_w0_val == 4294443007
// opcode: ukadd32 ; op1:x25; op2:x3; dest:x21; op1val:0x00000affffffef;  op2val:0xffbffffffff7ffff
TEST_PKRR_OP(ukadd32, x21, x25, x3, 0x0000000000000000, 0x00000affffffef, 0xffbffffffff7ffff, x25, x2, 224, x12)

inst_15:
// rs1==x9, rs2==x27, rd==x19, rs2_w1_val == 4292870143, rs2_w0_val == 4294967291, rs1_w1_val == 32, rs1_w0_val == 4294967167
// opcode: ukadd32 ; op1:x9; op2:x27; dest:x19; op1val:0x000020ffffff7f;  op2val:0xffdffffffffffffb
TEST_PKRR_OP(ukadd32, x19, x9, x27, 0x0000000000000000, 0x000020ffffff7f, 0xffdffffffffffffb, x9, x2, 240, x12)

inst_16:
// rs1==x6, rs2==x11, rd==x5, rs2_w1_val == 4293918719, rs1_w1_val == 4294967279, rs2_w0_val == 4294967167
// opcode: ukadd32 ; op1:x6; op2:x11; dest:x5; op1val:0xffffffef00008000;  op2val:0xffefffffffffff7f
TEST_PKRR_OP(ukadd32, x5, x6, x11, 0x0000000000000000, 0xffffffef00008000, 0xffefffffffffff7f, x6, x2, 256, x12)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_17:
// rs1==x8, rs2==x0, rd==x28, rs2_w1_val == 4294443007, rs1_w0_val == 2097152, rs2_w0_val == 8388608, rs1_w1_val == 524288
// opcode: ukadd32 ; op1:x8; op2:x0; dest:x28; op1val:0x08000000200000;  op2val:0xfff7ffff00800000
TEST_PKRR_OP(ukadd32, x28, x8, x0, 0x0000000000000000, 0x08000000200000, 0xfff7ffff00800000, x8, x7, 0, x12)

inst_18:
// rs1==x2, rs2==x6, rd==x24, rs2_w1_val == 4294705151, rs2_w0_val == 4294966271, rs1_w0_val == 2048
// opcode: ukadd32 ; op1:x2; op2:x6; dest:x24; op1val:0x02000000000800;  op2val:0xfffbfffffffffbff
TEST_PKRR_OP(ukadd32, x24, x2, x6, 0x0000000000000000, 0x02000000000800, 0xfffbfffffffffbff, x2, x7, 16, x12)

inst_19:
// rs1==x23, rs2==x16, rd==x10, rs2_w1_val == 4294836223, rs1_w0_val == 4026531839
// opcode: ukadd32 ; op1:x23; op2:x16; dest:x10; op1val:0x00000cefffffff;  op2val:0xfffdffffffffffdf
TEST_PKRR_OP(ukadd32, x10, x23, x16, 0x0000000000000000, 0x00000cefffffff, 0xfffdffffffffffdf, x23, x7, 32, x12)

inst_20:
// rs1==x29, rs2==x19, rd==x4, rs2_w1_val == 4294901759, rs1_w1_val == 134217728, rs1_w0_val == 32, rs2_w0_val == 4294965247
// opcode: ukadd32 ; op1:x29; op2:x19; dest:x4; op1val:0x800000000000020;  op2val:0xfffefffffffff7ff
TEST_PKRR_OP(ukadd32, x4, x29, x19, 0x0000000000000000, 0x800000000000020, 0xfffefffffffff7ff, x29, x7, 48, x12)

inst_21:
// rs1==x26, rs2==x14, rd==x11, rs2_w1_val == 4294934527, rs1_w0_val == 2, rs1_w1_val == 2048, rs2_w0_val == 4026531839
// opcode: ukadd32 ; op1:x26; op2:x14; dest:x11; op1val:0x00080000000002;  op2val:0xffff7fffefffffff
TEST_PKRR_OP(ukadd32, x11, x26, x14, 0x0000000000000000, 0x00080000000002, 0xffff7fffefffffff, x26, x7, 64, x12)

inst_22:
// rs1==x30, rs2==x26, rd==x0, rs2_w1_val == 4294950911, rs1_w0_val == 4294967039, rs2_w0_val == 4294967039, rs1_w1_val == 4294965247
// opcode: ukadd32 ; op1:x30; op2:x26; dest:x0; op1val:0xfffff7fffffffeff;  op2val:0xffffbffffffffeff
TEST_PKRR_OP(ukadd32, x0, x30, x26, 0x0000000000000000, 0xfffff7fffffffeff, 0xffffbffffffffeff, x30, x7, 80, x12)

inst_23:
// rs1==x1, rs2==x5, rd==x9, rs2_w1_val == 4294959103, rs1_w0_val == 524288
// opcode: ukadd32 ; op1:x1; op2:x5; dest:x9; op1val:0x00000c00080000;  op2val:0xffffdffffffffeff
TEST_PKRR_OP(ukadd32, x9, x1, x5, 0x0000000000000000, 0x00000c00080000, 0xffffdffffffffeff, x1, x7, 96, x12)

inst_24:
// rs1==x3, rs2==x2, rd==x30, rs2_w1_val == 4294963199, rs1_w1_val == 64
// opcode: ukadd32 ; op1:x3; op2:x2; dest:x30; op1val:0x000040ffffffbf;  op2val:0xffffefff0000000b
TEST_PKRR_OP(ukadd32, x30, x3, x2, 0x0000000000000000, 0x000040ffffffbf, 0xffffefff0000000b, x3, x7, 112, x12)

inst_25:
// rs1==x27, rs2==x28, rd==x2, rs2_w1_val == 4294965247, rs1_w0_val == 4294967291, rs2_w0_val == 4290772991
// opcode: ukadd32 ; op1:x27; op2:x28; dest:x2; op1val:0x40000000fffffffb;  op2val:0xfffff7ffffbfffff
TEST_PKRR_OP(ukadd32, x2, x27, x28, 0x0000000000000000, 0x40000000fffffffb, 0xfffff7ffffbfffff, x27, x7, 128, x12)

inst_26:
// rs1==x11, rs2==x29, rd==x17, rs2_w1_val == 4294966271, rs1_w1_val == 2097152, rs1_w0_val == 4294967293, rs2_w0_val == 4294967287
// opcode: ukadd32 ; op1:x11; op2:x29; dest:x17; op1val:0x200000fffffffd;  op2val:0xfffffbfffffffff7
TEST_PKRR_OP(ukadd32, x17, x11, x29, 0x0000000000000000, 0x200000fffffffd, 0xfffffbfffffffff7, x11, x7, 144, x12)

inst_27:
// rs1==x10, rs2==x20, rd==x23, rs2_w1_val == 4294966783, rs2_w0_val == 67108864, rs1_w0_val == 2147483648, rs1_w1_val == 33554432
// opcode: ukadd32 ; op1:x10; op2:x20; dest:x23; op1val:0x200000080000000;  op2val:0xfffffdff04000000
TEST_PKRR_OP(ukadd32, x23, x10, x20, 0x0000000000000000, 0x200000080000000, 0xfffffdff04000000, x10, x7, 160, x12)

inst_28:
// rs1==x5, rs2==x13, rd==x14, rs2_w1_val == 4294967039, 
// opcode: ukadd32 ; op1:x5; op2:x13; dest:x14; op1val:0xffbffffffffffdff;  op2val:0xfffffeff55555555
TEST_PKRR_OP(ukadd32, x14, x5, x13, 0x0000000000000000, 0xffbffffffffffdff, 0xfffffeff55555555, x5, x7, 176, x12)

inst_29:
// rs1==x16, rs2==x30, rd==x20, rs2_w1_val == 4294967167, rs2_w0_val == 4294966783, rs1_w0_val == 2863311530, rs1_w1_val == 4261412863
// opcode: ukadd32 ; op1:x16; op2:x30; dest:x20; op1val:0xfdffffffaaaaaaaa;  op2val:0xffffff7ffffffdff
TEST_PKRR_OP(ukadd32, x20, x16, x30, 0x0000000000000000, 0xfdffffffaaaaaaaa, 0xffffff7ffffffdff, x16, x7, 192, x12)

inst_30:
// rs1==x28, rs2==x1, rd==x18, rs2_w1_val == 4294967231, rs2_w0_val == 4294967231, rs1_w0_val == 4194304
// opcode: ukadd32 ; op1:x28; op2:x1; dest:x18; op1val:0xffffff7f00400000;  op2val:0xffffffbfffffffbf
TEST_PKRR_OP(ukadd32, x18, x28, x1, 0x0000000000000000, 0xffffff7f00400000, 0xffffffbfffffffbf, x28, x7, 208, x12)

inst_31:
// rs1==x31, rs2_w1_val == 4294967263, rs1_w1_val == 3221225471, rs2_w0_val == 32
// opcode: ukadd32 ; op1:x31; op2:x16; dest:x14; op1val:0xbffffffffffffdff;  op2val:0xffffffdf00000020
TEST_PKRR_OP(ukadd32, x14, x31, x16, 0x0000000000000000, 0xbffffffffffffdff, 0xffffffdf00000020, x31, x7, 224, x1)

inst_32:
// rs2==x17, rs2_w1_val == 4294967279, rs2_w0_val == 1
// opcode: ukadd32 ; op1:x30; op2:x17; dest:x26; op1val:0x0000200000000d;  op2val:0xffffffef00000001
TEST_PKRR_OP(ukadd32, x26, x30, x17, 0x0000000000000000, 0x0000200000000d, 0xffffffef00000001, x30, x7, 240, x1)

inst_33:
// rd==x31, rs2_w1_val == 4294967291, rs2_w0_val == 65536, rs1_w1_val == 1431655765
// opcode: ukadd32 ; op1:x4; op2:x3; dest:x31; op1val:0x55555555ffff7fff;  op2val:0xfffffffb00010000
TEST_PKRR_OP(ukadd32, x31, x4, x3, 0x0000000000000000, 0x55555555ffff7fff, 0xfffffffb00010000, x4, x7, 256, x1)

inst_34:
// rs2_w1_val == 4294967293, rs1_w0_val == 8192, rs1_w1_val == 65536
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000002000;  op2val:0xfffffffdfffff7ff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x01000000002000, 0xfffffffdfffff7ff, x30, x7, 272, x1)

inst_35:
// rs2_w1_val == 4294967294, rs1_w0_val == 1
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000001;  op2val:0xfffffffe08000000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x02000000000001, 0xfffffffe08000000, x30, x7, 288, x1)

inst_36:
// rs2_w1_val == 2147483648, rs2_w0_val == 4294967294
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000000;  op2val:0x80000000fffffffe
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00100000000000, 0x80000000fffffffe, x30, x7, 304, x1)

inst_37:
// rs2_w1_val == 1073741824, rs1_w0_val == 4, rs2_w0_val == 131072, rs1_w1_val == 4294705151
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000004;  op2val:0x4000000000020000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000004, 0x4000000000020000, x30, x7, 320, x1)

inst_38:
// rs2_w1_val == 536870912, rs1_w1_val == 4294967291, rs2_w0_val == 4294963199
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000020;  op2val:0x20000000ffffefff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000020, 0x20000000ffffefff, x30, x7, 336, x1)

inst_39:
// rs2_w1_val == 268435456, rs1_w0_val == 4294967263
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007ffffffdf;  op2val:0x1000000000000009
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x000007ffffffdf, 0x1000000000000009, x30, x7, 352, x1)

inst_40:
// rs2_w1_val == 134217728, rs2_w0_val == 2147483647
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000e0000000d;  op2val:0x80000007fffffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00000e0000000d, 0x80000007fffffff, x30, x7, 368, x1)

inst_41:
// rs2_w1_val == 67108864, rs1_w1_val == 4294966271
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffffffdf;  op2val:0x40000000000000e
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfffffbffffffffdf, 0x40000000000000e, x30, x7, 384, x1)

inst_42:
// rs2_w1_val == 33554432, rs1_w0_val == 4294901759, rs2_w0_val == 268435456
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffeffff;  op2val:0x200000010000000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffeffff, 0x200000010000000, x30, x7, 400, x1)

inst_43:
// rs2_w1_val == 8388608, rs1_w1_val == 4294967295
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000000;  op2val:0x800000ffbfffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xffffffff00000000, 0x800000ffbfffff, x30, x7, 416, x1)

inst_44:
// rs2_w1_val == 4194304, rs1_w0_val == 131072
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000020000;  op2val:0x40000000800000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00080000020000, 0x40000000800000, x30, x7, 432, x1)

inst_45:
// rs2_w1_val == 2097152, rs2_w0_val == 256
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000f00080000;  op2val:0x20000000000100
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00000f00080000, 0x20000000000100, x30, x7, 448, x1)

inst_46:
// rs2_w1_val == 1048576, rs1_w1_val == 67108864
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffdffff;  op2val:0x100000fffffeff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x4000000fffdffff, 0x100000fffffeff, x30, x7, 464, x1)

inst_47:
// rs2_w1_val == 524288, rs1_w0_val == 4294965247
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffff7ff;  op2val:0x0800000000000f
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x001000fffff7ff, 0x0800000000000f, x30, x7, 480, x1)

inst_48:
// rs2_w1_val == 262144, rs1_w1_val == 8388608
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000013;  op2val:0x0400000000000d
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x80000000000013, 0x0400000000000d, x30, x7, 496, x1)

inst_49:
// rs2_w1_val == 131072, rs1_w1_val == 4292870143, rs1_w0_val == 128, rs2_w0_val == 524288
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000080;  op2val:0x02000000080000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000080, 0x02000000080000, x30, x7, 512, x1)

inst_50:
// rs2_w1_val == 65536, rs1_w0_val == 8388608
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00800000;  op2val:0x01000000000011
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00800000, 0x01000000000011, x30, x7, 528, x1)

inst_51:
// rs1_w0_val == 262144, rs1_w1_val == 4194304, rs2_w0_val == 2048
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000040000;  op2val:0xfffffeff00000800
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x40000000040000, 0xfffffeff00000800, x30, x7, 544, x1)

inst_52:
// rs1_w0_val == 65536, rs1_w1_val == 4294963199
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00010000;  op2val:0xfdffffffffffff7f
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xffffefff00010000, 0xfdffffffffffff7f, x30, x7, 560, x1)

inst_53:
// rs1_w0_val == 16384, rs2_w0_val == 3221225471, rs1_w1_val == 128
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000004000;  op2val:0x2000000bfffffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00008000004000, 0x2000000bfffffff, x30, x7, 576, x1)

inst_54:
// rs1_w0_val == 4096, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700001000;  op2val:0x08000000200000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00000700001000, 0x08000000200000, x30, x7, 592, x1)

inst_55:
// rs1_w0_val == 1024, rs1_w1_val == 268435456
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000400;  op2val:0x000013fffffff7
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x1000000000000400, 0x000013fffffff7, x30, x7, 608, x1)

inst_56:
// rs1_w0_val == 512, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000a00000200;  op2val:0xffdfffff80000000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00000a00000200, 0xffdfffff80000000, x30, x7, 624, x1)

inst_57:
// rs1_w0_val == 256, rs2_w1_val == 8
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000c00000100;  op2val:0x0000087fffffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00000c00000100, 0x0000087fffffff, x30, x7, 640, x1)

inst_58:
// rs1_w0_val == 16, rs1_w1_val == 4227858431
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000010;  op2val:0x8000000ffffffdf
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000010, 0x8000000ffffffdf, x30, x7, 656, x1)

inst_59:
// rs1_w0_val == 8, rs2_w0_val == 32768, rs1_w1_val == 512
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000008;  op2val:0x00001300008000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00020000000008, 0x00001300008000, x30, x7, 672, x1)

inst_60:
// rs1_w0_val == 4294967295, rs2_w0_val == 4286578687
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000ffffffff;  op2val:0x000007ff7fffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x2000000ffffffff, 0x000007ff7fffff, x30, x7, 688, x1)

inst_61:
// rs2_w1_val == 32768, rs1_w1_val == 4026531839, rs2_w0_val == 4292870143
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffff7ff;  op2val:0x008000ffdfffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xeffffffffffff7ff, 0x008000ffdfffff, x30, x7, 704, x1)

inst_62:
// rs2_w1_val == 16384, rs1_w1_val == 4294959103
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00004000;  op2val:0x004000fffffbff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00004000, 0x004000fffffbff, x30, x7, 720, x1)

inst_63:
// rs2_w1_val == 8192, rs1_w0_val == 4290772991
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffbfffff;  op2val:0x002000ffdfffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfdffffffffbfffff, 0x002000ffdfffff, x30, x7, 736, x1)

inst_64:
// rs2_w1_val == 4096, rs1_w0_val == 4292870143
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffdfffff;  op2val:0x00100004000000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x800000ffdfffff, 0x00100004000000, x30, x7, 752, x1)

inst_65:
// rs2_w1_val == 2048, rs1_w0_val == 4286578687
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffff7fffff;  op2val:0x00080000000013
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xdfffffffff7fffff, 0x00080000000013, x30, x7, 768, x1)

inst_66:
// rs2_w1_val == 1024, rs2_w0_val == 4227858431
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000b00800000;  op2val:0x000400fbffffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00000b00800000, 0x000400fbffffff, x30, x7, 784, x1)

inst_67:
// rs2_w1_val == 512, rs2_w0_val == 0, rs1_w0_val == 4160749567
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003f7ffffff;  op2val:0x00020000000000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x000003f7ffffff, 0x00020000000000, x30, x7, 800, x1)

inst_68:
// rs2_w1_val == 256, rs2_w0_val == 128, rs1_w1_val == 4294836223
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000040;  op2val:0x00010000000080
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000040, 0x00010000000080, x30, x7, 816, x1)

inst_69:
// rs2_w1_val == 128, rs2_w0_val == 8192, rs1_w1_val == 4294967039
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffefffffff;  op2val:0x00008000002000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfffffeffefffffff, 0x00008000002000, x30, x7, 832, x1)

inst_70:
// rs2_w1_val == 64, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000001;  op2val:0x000040fffff7ff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000001, 0x000040fffff7ff, x30, x7, 848, x1)

inst_71:
// rs2_w1_val == 32, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000002000;  op2val:0x000020bfffffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x40000000002000, 0x000020bfffffff, x30, x7, 864, x1)

inst_72:
// rs2_w1_val == 16, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffbff;  op2val:0x00001000000007
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffbff, 0x00001000000007, x30, x7, 880, x1)

inst_73:
// rs2_w1_val == 4, rs1_w1_val == 4294443007, rs1_w0_val == 1073741824
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff40000000;  op2val:0x00000400000013
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff40000000, 0x00000400000013, x30, x7, 896, x1)

inst_74:
// rs2_w1_val == 2, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000010000000;  op2val:0x000002ffffff7f
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x80000010000000, 0x000002ffffff7f, x30, x7, 912, x1)

inst_75:
// rs2_w1_val == 1, rs2_w0_val == 8
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff10000000;  op2val:0x00000100000008
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xffffffff10000000, 0x00000100000008, x30, x7, 928, x1)

inst_76:
// rs2_w1_val == 4294967295, rs2_w0_val == 2
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000b00000020;  op2val:0xffffffff00000002
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00000b00000020, 0xffffffff00000002, x30, x7, 944, x1)

inst_77:
// rs2_w1_val == 0, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000030000000a;  op2val:0x000000bfffffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x0000030000000a, 0x000000bfffffff, x30, x7, 960, x1)

inst_78:
// rs2_w0_val == 2863311530, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008010000000;  op2val:0x4000000aaaaaaaa
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00008010000000, 0x4000000aaaaaaaa, x30, x7, 976, x1)

inst_79:
// rs2_w0_val == 3758096383, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00020000;  op2val:0x000011dfffffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00020000, 0x000011dfffffff, x30, x7, 992, x1)

inst_80:
// rs2_w0_val == 4160749567, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00008000;  op2val:0x400000f7ffffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xffffffef00008000, 0x400000f7ffffff, x30, x7, 1008, x1)

inst_81:
// rs2_w0_val == 4261412863, rs1_w0_val == 4294963199
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000bffffefff;  op2val:0x8000000fdffffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00000bffffefff, 0x8000000fdffffff, x30, x7, 1024, x1)

inst_82:
// rs2_w0_val == 4278190079, rs1_w1_val == 536870912
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffdffff;  op2val:0x800000feffffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x20000000fffdffff, 0x800000feffffff, x30, x7, 1040, x1)

inst_83:
// rs2_w0_val == 4293918719, rs1_w0_val == 16777216, rs1_w1_val == 262144
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000001000000;  op2val:0xffffffefffefffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x04000001000000, 0xffffffefffefffff, x30, x7, 1056, x1)

inst_84:
// rs2_w0_val == 1024, rs1_w1_val == 4294967263, rs1_w0_val == 4294950911
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffffbfff;  op2val:0xfff7ffff00000400
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xffffffdfffffbfff, 0xfff7ffff00000400, x30, x7, 1072, x1)

inst_85:
// rs2_w0_val == 512, rs1_w1_val == 4294967287
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffbfffff;  op2val:0x1000000000000200
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffbfffff, 0x1000000000000200, x30, x7, 1088, x1)

inst_86:
// rs2_w0_val == 64, rs1_w1_val == 16384
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000008000;  op2val:0x00004000000040
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00400000008000, 0x00004000000040, x30, x7, 1104, x1)

inst_87:
// rs2_w0_val == 16, rs1_w1_val == 16
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000100000000a;  op2val:0xffffffdf00000010
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x0000100000000a, 0xffffffdf00000010, x30, x7, 1120, x1)

inst_88:
// rs2_w0_val == 4, rs1_w0_val == 4278190079
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009feffffff;  op2val:0xfffffbff00000004
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x000009feffffff, 0xfffffbff00000004, x30, x7, 1136, x1)

inst_89:
// rs2_w0_val == 4294967295, rs1_w0_val == 33554432, rs1_w1_val == 4294934527
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff02000000;  op2val:0xffffffefffffffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xffff7fff02000000, 0xffffffefffffffff, x30, x7, 1152, x1)

inst_90:
// rs1_w1_val == 2863311530, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00200000;  op2val:0x00000400000010
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00200000, 0x00000400000010, x30, x7, 1168, x1)

inst_91:
// rs1_w1_val == 2147483647, rs2_w0_val == 4294950911
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000007;  op2val:0xff7fffffffffbfff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000007, 0xff7fffffffffbfff, x30, x7, 1184, x1)

inst_92:
// rs1_w1_val == 4160749567, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffff7fffff;  op2val:0x040000feffffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xf7ffffffff7fffff, 0x040000feffffff, x30, x7, 1200, x1)

inst_93:
// rs1_w1_val == 4278190079, rs2_w0_val == 536870912
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00020000;  op2val:0xffff7fff20000000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00020000, 0xffff7fff20000000, x30, x7, 1216, x1)

inst_94:
// rs1_w1_val == 4293918719, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000009;  op2val:0x7ffffffffffff7ff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xffefffff00000009, 0x7ffffffffffff7ff, x30, x7, 1232, x1)

inst_95:
// rs1_w1_val == 4294901759, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000020;  op2val:0xffffffefaaaaaaaa
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000020, 0xffffffefaaaaaaaa, x30, x7, 1248, x1)

inst_96:
// rs1_w1_val == 4294950911, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000001;  op2val:0x1000000000020000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000001, 0x1000000000020000, x30, x7, 1264, x1)

inst_97:
// rs1_w1_val == 4294967293, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffdffff;  op2val:0xffffdfff00008000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffdffff, 0xffffdfff00008000, x30, x7, 1280, x1)

inst_98:
// rs1_w1_val == 4294967294, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe0000000c;  op2val:0x40000000000013
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfffffffe0000000c, 0x40000000000013, x30, x7, 1296, x1)

inst_99:
// rs1_w1_val == 2147483648, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000feffffff;  op2val:0x004000ffffff7f
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x80000000feffffff, 0x004000ffffff7f, x30, x7, 1312, x1)

inst_100:
// rs1_w1_val == 1048576, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffff7fff;  op2val:0x000080f7ffffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x100000ffff7fff, 0x000080f7ffffff, x30, x7, 1328, x1)

inst_101:
// rs1_w1_val == 32768, rs1_w0_val == 1431655765
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800055555555;  op2val:0x00000b00000000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00800055555555, 0x00000b00000000, x30, x7, 1344, x1)

inst_102:
// rs1_w1_val == 8192, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000800000;  op2val:0x000400ffbfffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00200000800000, 0x000400ffbfffff, x30, x7, 1360, x1)

inst_103:
// rs1_w1_val == 1024, rs2_w0_val == 4294959103
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x0004000000000a;  op2val:0xffffdfffffffdfff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x0004000000000a, 0xffffdfffffffdfff, x30, x7, 1376, x1)

inst_104:
// rs1_w1_val == 256, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100fffffffb;  op2val:0xefffffffffffdfff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x000100fffffffb, 0xefffffffffffdfff, x30, x7, 1392, x1)

inst_105:
// rs1_w1_val == 8, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000880000000;  op2val:0x00000600800000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00000880000000, 0x00000600800000, x30, x7, 1408, x1)

inst_106:
// rs1_w1_val == 4, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000005;  op2val:0x004000aaaaaaaa
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00000400000005, 0x004000aaaaaaaa, x30, x7, 1424, x1)

inst_107:
// rs1_w1_val == 2, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffffbff;  op2val:0x02000000000002
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x000002fffffbff, 0x02000000000002, x30, x7, 1440, x1)

inst_108:
// rs1_w1_val == 0, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000100;  op2val:0xffdffffff7ffffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00000000000100, 0xffdffffff7ffffff, x30, x7, 1456, x1)

inst_109:
// rs1_w0_val == 2147483647, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000137fffffff;  op2val:0xffffefff00200000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x0000137fffffff, 0xffffefff00200000, x30, x7, 1472, x1)

inst_110:
// rs1_w0_val == 3221225471, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdbfffffff;  op2val:0x800000fffffff7
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfffffffdbfffffff, 0x800000fffffff7, x30, x7, 1488, x1)

inst_111:
// rs1_w0_val == 3758096383, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffddfffffff;  op2val:0xfeffffff00000005
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfffffffddfffffff, 0xfeffffff00000005, x30, x7, 1504, x1)

inst_112:
// rs1_w0_val == 1048576, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500100000;  op2val:0x00004000000012
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x5555555500100000, 0x00004000000012, x30, x7, 1520, x1)

inst_113:
// rs1_w0_val == 4227858431, rs2_w0_val == 16384
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffbffffff;  op2val:0xaaaaaaaa00004000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfffffffffbffffff, 0xaaaaaaaa00004000, x30, x7, 1536, x1)

inst_114:
// rs2_w0_val == 4294836223, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080010000000;  op2val:0xfffffffefffdffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00080010000000, 0xfffffffefffdffff, x30, x7, 1552, x1)

inst_115:
// rs1_w0_val == 4261412863, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fdffffff;  op2val:0xffffffdffffff7ff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x8000000fdffffff, 0xffffffdffffff7ff, x30, x7, 1568, x1)

inst_116:
// rs2_w0_val == 4294901759, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000800000;  op2val:0xffbffffffffeffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x2000000000800000, 0xffbffffffffeffff, x30, x7, 1584, x1)

inst_117:
// rs1_w0_val == 4294705151, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffbffff;  op2val:0x000020fffffeff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffbffff, 0x000020fffffeff, x30, x7, 1600, x1)

inst_118:
// rs1_w0_val == 4294959103, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005ffffdfff;  op2val:0x040000ffdfffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x000005ffffdfff, 0x040000ffdfffff, x30, x7, 1616, x1)

inst_119:
// rs2_w0_val == 4294967293, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000010;  op2val:0xffffff7ffffffffd
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000010, 0xffffff7ffffffffd, x30, x7, 1632, x1)

inst_120:
// rs2_w0_val == 1073741824, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000800000;  op2val:0x00000d40000000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00020000800000, 0x00000d40000000, x30, x7, 1648, x1)

inst_121:
// rs1_w0_val == 4294967287, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffff7;  op2val:0xfffffbfffffffff7
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x080000fffffff7, 0xfffffbfffffffff7, x30, x7, 1664, x1)

inst_122:
// rs2_w0_val == 16777216, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00010000;  op2val:0x00000a01000000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xffefffff00010000, 0x00000a01000000, x30, x7, 1680, x1)

inst_123:
// rs1_w0_val == 4294967294, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffffffe;  op2val:0xfffffffe00100000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffffffe, 0xfffffffe00100000, x30, x7, 1696, x1)

inst_124:
// rs2_w0_val == 4194304, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000f00010000;  op2val:0xffffdfff00400000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00000f00010000, 0xffffdfff00400000, x30, x7, 1712, x1)

inst_125:
// rs1_w0_val == 536870912, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff20000000;  op2val:0x008000fffeffff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfffffbff20000000, 0x008000fffeffff, x30, x7, 1728, x1)

inst_126:
// rs1_w0_val == 134217728, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff08000000;  op2val:0xfffffffd0000000d
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfffffbff08000000, 0xfffffffd0000000d, x30, x7, 1744, x1)

inst_127:
// rs1_w0_val == 67108864, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100004000000;  op2val:0xbfffffff00020000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00100004000000, 0xbfffffff00020000, x30, x7, 1760, x1)

inst_128:
// rs2_w0_val == 262144, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000013;  op2val:0x2000000000040000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x00080000000013, 0x2000000000040000, x30, x7, 1776, x1)

inst_129:
// rs2_w0_val == 4294934527, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000001;  op2val:0x2000000ffff7fff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x2000000000000001, 0x2000000ffff7fff, x30, x7, 1792, x1)

inst_130:
// rs2_w0_val == 4096, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000007;  op2val:0xffff7fff00001000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000007, 0xffff7fff00001000, x30, x7, 1808, x1)

inst_131:
// rs1_w0_val == 4294443007, 
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010fff7ffff;  op2val:0x000100fffffffe
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x000010fff7ffff, 0x000100fffffffe, x30, x7, 1824, x1)

inst_132:
// rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 4294967287, rs1_w1_val == 1, rs2_w0_val == 4294967279, rs1_w0_val == 4294967279
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001ffffffef;  op2val:0xfffffff7ffffffef
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x000001ffffffef, 0xfffffff7ffffffef, x30, x7, 1840, x1)

inst_133:
// rs2_w1_val == 4227858431, rs1_w1_val == 4096, rs1_w0_val == 4294967231, rs2_w0_val == 1048576
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffffffbf;  op2val:0xfbffffff00100000
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0x001000ffffffbf, 0xfbffffff00100000, x30, x7, 1856, x1)

inst_134:
// rs2_w1_val == 4294950911, rs1_w0_val == 4294967039, rs2_w0_val == 4294967039, rs1_w1_val == 4294965247
// opcode: ukadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffffeff;  op2val:0xffffbffffffffeff
TEST_PKRR_OP(ukadd32, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffffeff, 0xffffbffffffffeff, x30, x7, 1872, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 236*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
