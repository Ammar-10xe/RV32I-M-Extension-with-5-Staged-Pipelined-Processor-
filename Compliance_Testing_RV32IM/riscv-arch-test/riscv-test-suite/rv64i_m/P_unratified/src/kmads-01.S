
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmads instruction of the RISC-V RV64PZicsr extension for the kmads covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmads)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x19, rs2==x21, rd==x19, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h3_val == -513, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs2_h0_val == -1, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 4, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -21846, rs1_h0_val != rs2_h0_val, rs1_h3_val == -33, rs1_h0_val < 0 and rs2_h0_val < 0
// opcode: kmads ; op1:x19; op2:x21; dest:x19; op1val:0xffdf0004aaaa8000;  op2val:0xfdfffff9fffcffff
TEST_PKRR_OP(kmads, x19, x19, x21, 0x0000000000000000, 0xffdf0004aaaa8000, 0xfdfffff9fffcffff, x19, x1, 0, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x4, rs2==x22, rd==x21, rs1_h3_val == rs2_h3_val, rs2_h3_val == -129, rs2_h0_val == 2, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h1_val == -2, rs1_h3_val == -129, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -2049, rs1_h0_val == -129
// opcode: kmads ; op1:x4; op2:x22; dest:x21; op1val:0xff7fc000f7ffff7f;  op2val:0xff7f0006fffe0002
TEST_PKRR_OP(kmads, x21, x4, x22, 0x0000000000000000, 0xff7fc000f7ffff7f, 0xff7f0006fffe0002, x4, x1, 16, x2)

inst_2:
// rs1 == rs2 != rd, rs1==x16, rs2==x16, rd==x11, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h0_val == 32, rs1_h0_val == 1024, rs1_h1_val == 32, rs1_h3_val == -2049, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: kmads ; op1:x16; op2:x16; dest:x11; op1val:0xf7ff000400200400;  op2val:0x3fffc000fffa0020
TEST_PKRR_OP(kmads, x11, x16, x16, 0x0000000000000000, 0xf7ff000400200400, 0x3fffc000fffa0020, x16, x1, 32, x2)

inst_3:
// rs1 == rs2 == rd, rs1==x24, rs2==x24, rd==x24, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h3_val == -33, rs1_h3_val == 8, rs1_h2_val == 8, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == -17, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 1024, rs2_h2_val == 2
// opcode: kmads ; op1:x24; op2:x24; dest:x24; op1val:0x080008fffa0001;  op2val:0xffdf00020400ffef
TEST_PKRR_OP(kmads, x24, x24, x24, 0x0000000000000000, 0x080008fffa0001, 0xffdf00020400ffef, x24, x1, 48, x2)

inst_4:
// rs2 == rd != rs1, rs1==x27, rs2==x0, rd==x0, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h1_val == 32767, rs2_h0_val == 4, rs1_h3_val == 64, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h2_val == -16385, rs1_h1_val == 4, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 64, rs1_h0_val == -21846
// opcode: kmads ; op1:x27; op2:x0; dest:x0; op1val:0x40bfff0004aaaa;  op2val:0x40fff97fff0004
TEST_PKRR_OP(kmads, x0, x27, x0, 0x0000000000000000, 0x40bfff0004aaaa, 0x40fff97fff0004, x27, x1, 64, x2)

inst_5:
// rs1==x17, rs2==x25, rd==x12, rs1_h2_val == rs2_h2_val, rs1_h3_val == -21846, rs2_h3_val == 21845, rs1_h1_val == 21845, rs2_h1_val == -65
// opcode: kmads ; op1:x17; op2:x25; dest:x12; op1val:0xaaaac0005555ff7f;  op2val:0x5555c000ffbf0002
TEST_PKRR_OP(kmads, x12, x17, x25, 0x0000000000000000, 0xaaaac0005555ff7f, 0x5555c000ffbf0002, x17, x1, 80, x2)

inst_6:
// rs1==x14, rs2==x7, rd==x6, rs1_h1_val == rs2_h1_val, rs2_h1_val == -1025, rs1_h1_val == -1025, rs1_h3_val == 256, rs2_h0_val == -1025
// opcode: kmads ; op1:x14; op2:x7; dest:x6; op1val:0x100fffafbff0007;  op2val:0xffdf0003fbfffbff
TEST_PKRR_OP(kmads, x6, x14, x7, 0x0000000000000000, 0x100fffafbff0007, 0xffdf0003fbfffbff, x14, x1, 96, x2)

inst_7:
// rs1==x10, rs2==x31, rd==x18, rs1_h0_val == rs2_h0_val, rs1_h3_val == 1, rs1_h2_val == 2, rs1_h1_val == 8, rs1_h0_val == 2, rs2_h2_val == -21846
// opcode: kmads ; op1:x10; op2:x31; dest:x18; op1val:0x01000200080002;  op2val:0x09aaaa7fff0002
TEST_PKRR_OP(kmads, x18, x10, x31, 0x0000000000000000, 0x01000200080002, 0x09aaaa7fff0002, x10, x1, 112, x2)

inst_8:
// rs1==x3, rs2==x27, rd==x28, rs2_h3_val == -21846, rs2_h0_val == -33, rs2_h2_val == 256, rs1_h0_val == 32767, rs1_h1_val == -129, rs2_h1_val == 64
// opcode: kmads ; op1:x3; op2:x27; dest:x28; op1val:0xfffcfffaff7f7fff;  op2val:0xaaaa01000040ffdf
TEST_PKRR_OP(kmads, x28, x3, x27, 0x0000000000000000, 0xfffcfffaff7f7fff, 0xaaaa01000040ffdf, x3, x1, 128, x2)

inst_9:
// rs1==x9, rs2==x8, rd==x30, rs2_h3_val == 32767, rs1_h0_val == 16, rs2_h2_val == 1024, rs2_h1_val == 8192, rs1_h1_val == -513, rs1_h3_val == -2, rs2_h0_val == 2048, rs1_h2_val == -2
// opcode: kmads ; op1:x9; op2:x8; dest:x30; op1val:0xfffefffefdff0010;  op2val:0x7fff040020000800
TEST_PKRR_OP(kmads, x30, x9, x8, 0x0000000000000000, 0xfffefffefdff0010, 0x7fff040020000800, x9, x1, 144, x2)

inst_10:
// rs1==x6, rs2==x17, rd==x13, rs2_h3_val == -16385, rs2_h2_val == -1, rs1_h3_val == -257, rs2_h0_val == 128
// opcode: kmads ; op1:x6; op2:x17; dest:x13; op1val:0xfefffff6fdfffff6;  op2val:0xbfffffff20000080
TEST_PKRR_OP(kmads, x13, x6, x17, 0x0000000000000000, 0xfefffff6fdfffff6, 0xbfffffff20000080, x6, x1, 160, x2)

inst_11:
// rs1==x12, rs2==x29, rd==x31, rs2_h3_val == -8193, rs1_h2_val == 16384, rs2_h2_val == -4097, rs2_h1_val == -16385, rs2_h0_val == -16385, rs1_h3_val == -32768, rs1_h1_val == -33
// opcode: kmads ; op1:x12; op2:x29; dest:x31; op1val:0x80004000ffdf0001;  op2val:0xdfffefffbfffbfff
TEST_PKRR_OP(kmads, x31, x12, x29, 0x0000000000000000, 0x80004000ffdf0001, 0xdfffefffbfffbfff, x12, x1, 176, x2)

inst_12:
// rs1==x20, rs2==x28, rd==x7, rs2_h3_val == -4097, rs2_h0_val == 64, rs1_h3_val == 128, rs2_h2_val == -1025, rs1_h0_val == -3, rs1_h1_val == 1024, rs1_h2_val == -17
// opcode: kmads ; op1:x20; op2:x28; dest:x7; op1val:0x80ffef0400fffd;  op2val:0xeffffbfffffc0040
TEST_PKRR_OP(kmads, x7, x20, x28, 0x0000000000000000, 0x80ffef0400fffd, 0xeffffbfffffc0040, x20, x1, 192, x2)

inst_13:
// rs1==x30, rs2==x12, rd==x17, rs2_h3_val == -2049, rs1_h3_val == 2
// opcode: kmads ; op1:x30; op2:x12; dest:x17; op1val:0x02fff900200400;  op2val:0xf7ffaaaaffbffff8
TEST_PKRR_OP(kmads, x17, x30, x12, 0x0000000000000000, 0x02fff900200400, 0xf7ffaaaaffbffff8, x30, x1, 208, x2)

inst_14:
// rs1==x23, rs2==x30, rd==x26, rs2_h3_val == -1025, rs2_h2_val == -8193, rs1_h1_val == -2, rs1_h3_val == 16, rs2_h1_val == -513, rs1_h0_val == 4096, rs1_h2_val == -21846
// opcode: kmads ; op1:x23; op2:x30; dest:x26; op1val:0x10aaaafffe1000;  op2val:0xfbffdffffdff0040
TEST_PKRR_OP(kmads, x26, x23, x30, 0x0000000000000000, 0x10aaaafffe1000, 0xfbffdffffdff0040, x23, x1, 224, x2)
RVTEST_SIGBASE(x12,signature_x12_0)

inst_15:
// rs1==x26, rs2==x1, rd==x22, rs2_h3_val == -257, rs2_h2_val == 64, rs1_h1_val == -32768
// opcode: kmads ; op1:x26; op2:x1; dest:x22; op1val:0xfff9400080008000;  op2val:0xfeff0040c0000005
TEST_PKRR_OP(kmads, x22, x26, x1, 0x0000000000000000, 0xfff9400080008000, 0xfeff0040c0000005, x26, x12, 0, x17)

inst_16:
// rs1==x1, rs2==x4, rd==x2, rs2_h3_val == -65, rs1_h0_val == 4, rs2_h2_val == -2049, rs1_h3_val == 2048
// opcode: kmads ; op1:x1; op2:x4; dest:x2; op1val:0x800000900060004;  op2val:0xffbff7fffff63fff
TEST_PKRR_OP(kmads, x2, x1, x4, 0x0000000000000000, 0x800000900060004, 0xffbff7fffff63fff, x1, x12, 16, x17)

inst_17:
// rs1==x2, rs2==x13, rd==x3, rs2_h3_val == -17, rs1_h2_val == 4096, rs1_h3_val == 4096, rs2_h1_val == -9, rs1_h1_val == -65, rs1_h0_val == -257
// opcode: kmads ; op1:x2; op2:x13; dest:x3; op1val:0x10001000ffbffeff;  op2val:0xffefaaaafff7ffdf
TEST_PKRR_OP(kmads, x3, x2, x13, 0x0000000000000000, 0x10001000ffbffeff, 0xffefaaaafff7ffdf, x2, x12, 32, x17)

inst_18:
// rs1==x31, rs2==x9, rd==x16, rs2_h3_val == -9, rs1_h1_val == 1, rs1_h3_val == 0, rs1_h0_val == -5, rs1_h2_val == -3
// opcode: kmads ; op1:x31; op2:x9; dest:x16; op1val:0x00fffd0001fffb;  op2val:0xfff700400007fbff
TEST_PKRR_OP(kmads, x16, x31, x9, 0x0000000000000000, 0x00fffd0001fffb, 0xfff700400007fbff, x31, x12, 48, x17)

inst_19:
// rs1==x28, rs2==x23, rd==x4, rs2_h3_val == -5, rs2_h2_val == -16385, rs2_h0_val == -2, rs1_h2_val == -5, rs2_h1_val == -4097
// opcode: kmads ; op1:x28; op2:x23; dest:x4; op1val:0x1000fffb0001fff6;  op2val:0xfffbbfffeffffffe
TEST_PKRR_OP(kmads, x4, x28, x23, 0x0000000000000000, 0x1000fffb0001fff6, 0xfffbbfffeffffffe, x28, x12, 64, x17)

inst_20:
// rs1==x25, rs2==x2, rd==x5, rs2_h3_val == -3, rs1_h1_val == 4096
// opcode: kmads ; op1:x25; op2:x2; dest:x5; op1val:0x40000710007fff;  op2val:0xfffd0040fffafff9
TEST_PKRR_OP(kmads, x5, x25, x2, 0x0000000000000000, 0x40000710007fff, 0xfffd0040fffafff9, x25, x12, 80, x17)

inst_21:
// rs1==x13, rs2==x14, rd==x27, rs2_h3_val == -2, rs1_h1_val == -5, rs1_h2_val == 8192, rs2_h0_val == 1, rs1_h0_val == 16384, rs2_h1_val == 16384
// opcode: kmads ; op1:x13; op2:x14; dest:x27; op1val:0xff7f2000fffb4000;  op2val:0xfffefff640000001
TEST_PKRR_OP(kmads, x27, x13, x14, 0x0000000000000000, 0xff7f2000fffb4000, 0xfffefff640000001, x13, x12, 96, x17)

inst_22:
// rs1==x15, rs2==x10, rd==x25, rs2_h3_val == -32768, rs2_h2_val == -5, rs1_h2_val == -129
// opcode: kmads ; op1:x15; op2:x10; dest:x25; op1val:0x03ff7ffbff3fff;  op2val:0x8000fffbfdff0001
TEST_PKRR_OP(kmads, x25, x15, x10, 0x0000000000000000, 0x03ff7ffbff3fff, 0x8000fffbfdff0001, x15, x12, 112, x17)

inst_23:
// rs1==x11, rs2==x5, rd==x8, rs2_h3_val == 16384, rs1_h0_val == -16385, rs2_h0_val == -9
// opcode: kmads ; op1:x11; op2:x5; dest:x8; op1val:0xfffe00020005bfff;  op2val:0x4000aaaafff7fff7
TEST_PKRR_OP(kmads, x8, x11, x5, 0x0000000000000000, 0xfffe00020005bfff, 0x4000aaaafff7fff7, x11, x12, 128, x17)

inst_24:
// rs1==x8, rs2==x11, rd==x29, rs2_h3_val == 8192, rs2_h2_val == 4, rs1_h2_val == 32767
// opcode: kmads ; op1:x8; op2:x11; dest:x29; op1val:0xfffe7fff55550400;  op2val:0x2000000400070020
TEST_PKRR_OP(kmads, x29, x8, x11, 0x0000000000000000, 0xfffe7fff55550400, 0x2000000400070020, x8, x12, 144, x17)

inst_25:
// rs1==x18, rs2==x3, rd==x1, rs2_h3_val == 4096, rs2_h2_val == 16384, rs1_h1_val == -257, rs2_h1_val == 4, rs1_h3_val == 4
// opcode: kmads ; op1:x18; op2:x3; dest:x1; op1val:0x04fff8feff0007;  op2val:0x100040000004fbff
TEST_PKRR_OP(kmads, x1, x18, x3, 0x0000000000000000, 0x04fff8feff0007, 0x100040000004fbff, x18, x12, 160, x17)

inst_26:
// rs1==x7, rs2==x26, rd==x14, rs2_h3_val == 2048, rs2_h1_val == 32
// opcode: kmads ; op1:x7; op2:x26; dest:x14; op1val:0xfff8000800090006;  op2val:0x800ffff00200800
TEST_PKRR_OP(kmads, x14, x7, x26, 0x0000000000000000, 0xfff8000800090006, 0x800ffff00200800, x7, x12, 176, x17)

inst_27:
// rs1==x29, rs2==x18, rd==x9, rs2_h3_val == 1024, rs1_h3_val == 32, rs1_h0_val == -1
// opcode: kmads ; op1:x29; op2:x18; dest:x9; op1val:0x200006fff8ffff;  op2val:0x40000020004fffc
TEST_PKRR_OP(kmads, x9, x29, x18, 0x0000000000000000, 0x200006fff8ffff, 0x40000020004fffc, x29, x12, 192, x17)

inst_28:
// rs1==x22, rs2==x20, rd==x15, rs2_h3_val == 512, rs2_h2_val == 1, rs1_h2_val == 1
// opcode: kmads ; op1:x22; op2:x20; dest:x15; op1val:0x070001fff9ffff;  op2val:0x20000010005c000
TEST_PKRR_OP(kmads, x15, x22, x20, 0x0000000000000000, 0x070001fff9ffff, 0x20000010005c000, x22, x12, 208, x17)

inst_29:
// rs1==x0, rs2==x19, rd==x10, rs2_h3_val == 256, rs1_h0_val == -65, rs1_h2_val == 32, rs2_h2_val == 8192, rs1_h3_val == -513, rs2_h0_val == 256
// opcode: kmads ; op1:x0; op2:x19; dest:x10; op1val:0xfdff0020fffcffbf;  op2val:0x100200000030100
TEST_PKRR_OP(kmads, x10, x0, x19, 0x0000000000000000, 0xfdff0020fffcffbf, 0x100200000030100, x0, x12, 224, x17)

inst_30:
// rs1==x5, rs2==x6, rd==x20, rs2_h3_val == 128, rs2_h2_val == 32, rs2_h1_val == 21845, rs1_h0_val == 2048
// opcode: kmads ; op1:x5; op2:x6; dest:x20; op1val:0x02bffffffa0800;  op2val:0x80002055553fff
TEST_PKRR_OP(kmads, x20, x5, x6, 0x0000000000000000, 0x02bffffffa0800, 0x80002055553fff, x5, x12, 240, x17)

inst_31:
// rs1==x21, rs2==x15, rd==x23, rs2_h3_val == 32, rs2_h2_val == -33, rs1_h2_val == -9, rs1_h1_val == -3, rs2_h1_val == -2049
// opcode: kmads ; op1:x21; op2:x15; dest:x23; op1val:0xfffafff7fffd0005;  op2val:0x20ffdff7ff3fff
TEST_PKRR_OP(kmads, x23, x21, x15, 0x0000000000000000, 0xfffafff7fffd0005, 0x20ffdff7ff3fff, x21, x12, 256, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_32:
// rs2_h3_val == 16, rs1_h2_val == 64, rs2_h2_val == -9, rs1_h1_val == 8192, rs1_h0_val == 64
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xc000004020000040;  op2val:0x10fff7fffa0003
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xc000004020000040, 0x10fff7fffa0003, x30, x1, 0, x2)

inst_33:
// rs2_h3_val == 8, rs1_h3_val == -5, rs2_h0_val == -5, rs1_h0_val == 256
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfffb1000feff0100;  op2val:0x0800040004fffb
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xfffb1000feff0100, 0x0800040004fffb, x30, x1, 16, x2)

inst_34:
// rs2_h3_val == 4, rs1_h0_val == 32
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x00ff7f00200020;  op2val:0x04000500040002
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x00ff7f00200020, 0x04000500040002, x30, x1, 32, x2)

inst_35:
// rs1_h1_val == 16384, rs2_h0_val == 512
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x0420004000fffd;  op2val:0xfff7ffdffbff0200
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x0420004000fffd, 0xfff7ffdffbff0200, x30, x1, 48, x2)

inst_36:
// rs1_h1_val == 2048, rs1_h2_val == -33, rs2_h2_val == -17
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffdf08000100;  op2val:0x09ffeffffeffef
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xfffbffdf08000100, 0x09ffeffffeffef, x30, x1, 64, x2)

inst_37:
// rs1_h1_val == 512, rs2_h0_val == -4097, rs1_h0_val == -2049, rs2_h1_val == 2048
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x10c0000200f7ff;  op2val:0x80003fff0800efff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x10c0000200f7ff, 0x80003fff0800efff, x30, x1, 80, x2)

inst_38:
// rs1_h1_val == 256, rs1_h0_val == -33, rs2_h0_val == -3, rs1_h2_val == 21845, rs2_h1_val == 8
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x0555550100ffdf;  op2val:0x100ffef0008fffd
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x0555550100ffdf, 0x100ffef0008fffd, x30, x1, 96, x2)

inst_39:
// rs1_h1_val == 128, rs2_h3_val == 2, rs1_h3_val == -65
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00200080ff7f;  op2val:0x02fffbfff6fbff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xffbf00200080ff7f, 0x02fffbfff6fbff, x30, x1, 112, x2)

inst_40:
// rs1_h1_val == 64, rs2_h1_val == -257, rs1_h2_val == -2049
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x8000f7ff00408000;  op2val:0x80fffcfeff3fff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x8000f7ff00408000, 0x80fffcfeff3fff, x30, x1, 128, x2)

inst_41:
// rs1_h1_val == 16, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfffb7fff00101000;  op2val:0xfffdfff90020fff6
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xfffb7fff00101000, 0xfffdfff90020fff6, x30, x1, 144, x2)

inst_42:
// rs1_h1_val == 2, rs2_h0_val == -2049, rs1_h2_val == -32768
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x800800000028000;  op2val:0x020007fffef7ff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x800800000028000, 0x020007fffef7ff, x30, x1, 160, x2)

inst_43:
// rs1_h1_val == 0, rs2_h2_val == 8
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x1000000600000004;  op2val:0x200008fff60004
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x1000000600000004, 0x200008fff60004, x30, x1, 176, x2)

inst_44:
// rs1_h1_val == -1, rs1_h3_val == 16384
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x40000003ffff0400;  op2val:0x200000042000fff8
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x40000003ffff0400, 0x200000042000fff8, x30, x1, 192, x2)

inst_45:
// rs1_h0_val == 21845, rs1_h3_val == -8193
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xdfff555500095555;  op2val:0x40ffeffdffffff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xdfff555500095555, 0x40ffeffdffffff, x30, x1, 208, x2)

inst_46:
// rs1_h0_val == -8193, rs1_h3_val == 8192
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffd0400dfff;  op2val:0xfff9aaaafdff0009
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x2000fffd0400dfff, 0xfff9aaaafdff0009, x30, x1, 224, x2)

inst_47:
// rs1_h0_val == -4097, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x1007fffffbfefff;  op2val:0x55554000fff8ffef
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x1007fffffbfefff, 0x55554000fff8ffef, x30, x1, 240, x2)

inst_48:
// rs1_h0_val == -1025, rs1_h2_val == 512, rs2_h1_val == 4096
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x0902000100fbff;  op2val:0x10000061000fff7
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x0902000100fbff, 0x10000061000fff7, x30, x1, 256, x2)

inst_49:
// rs1_h0_val == -513, rs1_h1_val == -16385, rs2_h0_val == -129
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x090200bffffdff;  op2val:0xff7ffff60006ff7f
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x090200bffffdff, 0xff7ffff60006ff7f, x30, x1, 272, x2)

inst_50:
// rs1_h0_val == -17, rs2_h3_val == -1
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfefffff7aaaaffef;  op2val:0xffff4000c000f7ff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xfefffff7aaaaffef, 0xffff4000c000f7ff, x30, x1, 288, x2)

inst_51:
// rs1_h0_val == -9, rs1_h3_val == 21845, rs2_h2_val == -2, rs1_h2_val == 0
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x555500000020fff7;  op2val:0xaaaafffe00040800
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x555500000020fff7, 0xaaaafffe00040800, x30, x1, 304, x2)

inst_52:
// rs1_h0_val == -2, rs2_h0_val == -65, rs2_h2_val == -129
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfff6c0004000fffe;  op2val:0x20ff7f0003ffbf
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xfff6c0004000fffe, 0x20ff7f0003ffbf, x30, x1, 320, x2)

inst_53:
// rs1_h0_val == 8192, rs2_h1_val == 1
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x040003fff62000;  op2val:0xfff8004000010040
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x040003fff62000, 0xfff8004000010040, x30, x1, 336, x2)

inst_54:
// rs1_h0_val == 512, rs1_h2_val == -8193, rs2_h2_val == 512
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x06dfff00400200;  op2val:0xff7f0200c0000040
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x06dfff00400200, 0xff7f0200c0000040, x30, x1, 352, x2)

inst_55:
// rs1_h0_val == 128, rs2_h1_val == 2, rs2_h0_val == -513
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x80fff610000080;  op2val:0x06ff7f0002fdff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x80fff610000080, 0x06ff7f0002fdff, x30, x1, 368, x2)

inst_56:
// rs1_h0_val == 8, rs2_h0_val == 4096, rs2_h3_val == 0
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffff6fdff0008;  op2val:0x000100fffc1000
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xfdfffff6fdff0008, 0x000100fffc1000, x30, x1, 384, x2)

inst_57:
// rs1_h0_val == 0, rs2_h2_val == -65, rs2_h0_val == -21846, rs1_h3_val == -9
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfff7c000fffa0000;  op2val:0x5555ffbf0004aaaa
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xfff7c000fffa0000, 0x5555ffbf0004aaaa, x30, x1, 400, x2)

inst_58:
// rs2_h3_val == 1, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x08004020000008;  op2val:0x01400020000800
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x08004020000008, 0x01400020000800, x30, x1, 416, x2)

inst_59:
// rs2_h1_val == 0, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa8000f7ff0005;  op2val:0xfff7fbff00000100
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xaaaa8000f7ff0005, 0xfff7fbff00000100, x30, x1, 432, x2)

inst_60:
// rs2_h1_val == -1, rs1_h2_val == -513
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x04fdff00080080;  op2val:0xfdfffffbffff0020
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x04fdff00080080, 0xfdfffffbffff0020, x30, x1, 448, x2)

inst_61:
// rs2_h0_val == 21845, rs2_h2_val == 21845
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0008fffffff8;  op2val:0x4000555500405555
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xff7f0008fffffff8, 0x4000555500405555, x30, x1, 464, x2)

inst_62:
// rs2_h0_val == 32767, rs1_h3_val == -1
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xffff004000040080;  op2val:0x000007bfff7fff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xffff004000040080, 0x000007bfff7fff, x30, x1, 480, x2)

inst_63:
// rs2_h0_val == -8193, rs1_h1_val == -17
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffefffefffef;  op2val:0x400400fdffdfff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xfff6ffefffefffef, 0x400400fdffdfff, x30, x1, 496, x2)

inst_64:
// rs2_h0_val == -257, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x0800010004fff6;  op2val:0xfffa0009fffafeff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x0800010004fff6, 0xfffa0009fffafeff, x30, x1, 512, x2)

inst_65:
// rs2_h0_val == -32768, rs2_h2_val == 2048, rs1_h2_val == 256
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x10010000000002;  op2val:0x7fff080010008000
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x10010000000002, 0x7fff080010008000, x30, x1, 528, x2)

inst_66:
// rs2_h0_val == 16384, rs2_h2_val == 32767
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x04fff90003fff8;  op2val:0x087fff55554000
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x04fff90003fff8, 0x087fff55554000, x30, x1, 544, x2)

inst_67:
// rs2_h0_val == 8192, rs1_h3_val == 32767, rs1_h2_val == 1024, rs2_h1_val == 16
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0400ffeffff8;  op2val:0xfbffbfff00102000
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x7fff0400ffeffff8, 0xfbffbfff00102000, x30, x1, 560, x2)

inst_68:
// rs2_h0_val == 1024, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x100005c000fffd;  op2val:0x80fbff00200400
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x100005c000fffd, 0x80fbff00200400, x30, x1, 576, x2)

inst_69:
// rs2_h0_val == 16, rs1_h2_val == -65, rs1_h3_val == -16385, rs2_h2_val == -257
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffbf3fff3fff;  op2val:0x3ffffeffefff0010
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xbfffffbf3fff3fff, 0x3ffffeffefff0010, x30, x1, 592, x2)

inst_70:
// rs2_h0_val == 8, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffd10000040;  op2val:0x06fffffffc0008
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xfefffffd10000040, 0x06fffffffc0008, x30, x1, 608, x2)

inst_71:
// rs2_h0_val == 0, rs2_h1_val == -21846, rs1_h2_val == 2048
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfff80800ffef0005;  op2val:0x050004aaaa0000
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xfff80800ffef0005, 0x050004aaaa0000, x30, x1, 624, x2)

inst_72:
// rs1_h3_val == -4097, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffcfff6ffef;  op2val:0x000008fff9fffa
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xeffffffcfff6ffef, 0x000008fff9fffa, x30, x1, 640, x2)

inst_73:
// rs1_h3_val == -1025, rs2_h1_val == 256, rs1_h2_val == -257
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffefff7ff8000;  op2val:0xbfff000901005555
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xfbfffefff7ff8000, 0xbfff000901005555, x30, x1, 656, x2)

inst_74:
// rs1_h3_val == 1024, rs2_h1_val == -3
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x400fffc00040001;  op2val:0x010008fffd0004
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x400fffc00040001, 0x010008fffd0004, x30, x1, 672, x2)

inst_75:
// rs1_h3_val == 512, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x2000002fff6c000;  op2val:0xfffdfeffffff0800
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x2000002fff6c000, 0xfffdfeffffff0800, x30, x1, 688, x2)

inst_76:
// rs2_h2_val == -513, rs1_h2_val == -1025
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xeffffbfffffe8000;  op2val:0xfefffdff4000ff7f
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xeffffbfffffe8000, 0xfefffdff4000ff7f, x30, x1, 704, x2)

inst_77:
// rs2_h2_val == -3, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xffbfff7f00400200;  op2val:0x05fffdffff0100
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xffbfff7f00400200, 0x05fffdffff0100, x30, x1, 720, x2)

inst_78:
// rs2_h2_val == -32768, rs1_h1_val == -4097
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff6efffff7f;  op2val:0x058000fffc3fff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x4000fff6efffff7f, 0x058000fffc3fff, x30, x1, 736, x2)

inst_79:
// rs2_h2_val == 4096, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x800000020002fff9;  op2val:0x07100008000400
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x800000020002fff9, 0x07100008000400, x30, x1, 752, x2)

inst_80:
// rs1_h2_val == -4097, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaefff00040005;  op2val:0x10000200aaaafffd
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xaaaaefff00040005, 0x10000200aaaafffd, x30, x1, 768, x2)

inst_81:
// rs2_h2_val == 128, rs2_h1_val == -129, rs1_h3_val == -17
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xffeffff6fffbfffc;  op2val:0xaaaa0080ff7ffffb
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xffeffff6fffbfffc, 0xaaaa0080ff7ffffb, x30, x1, 784, x2)

inst_82:
// rs2_h2_val == 16, rs2_h1_val == -5, rs1_h1_val == -9
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfff70400fff70001;  op2val:0xfff60010fffb0005
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xfff70400fff70001, 0xfff60010fffb0005, x30, x1, 800, x2)

inst_83:
// rs1_h3_val == -3, rs2_h1_val == -32768
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffbffdff0002;  op2val:0x400004080007fff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xfffdffbffdff0002, 0x400004080007fff, x30, x1, 816, x2)

inst_84:
// rs2_h1_val == -8193, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x03fffe00090003;  op2val:0x08f7ffdfff3fff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x03fffe00090003, 0x08f7ffdfff3fff, x30, x1, 832, x2)

inst_85:
// rs1_h2_val == 128, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x2000080f7ff0009;  op2val:0xfffc10000007dfff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x2000080f7ff0009, 0xfffc10000007dfff, x30, x1, 848, x2)

inst_86:
// rs1_h2_val == 16, rs1_h1_val == -8193
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x200010dfffdfff;  op2val:0xeffffffe3ffffffd
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x200010dfffdfff, 0xeffffffe3ffffffd, x30, x1, 864, x2)

inst_87:
// rs2_h1_val == -33, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x400040004000fffe;  op2val:0x7fff7fffffdffffe
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x400040004000fffe, 0x7fff7fffffdffffe, x30, x1, 880, x2)

inst_88:
// rs1_h2_val == -1, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfffaffff00200006;  op2val:0xffdfdffffff80010
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xfffaffff00200006, 0xffdfdffffff80010, x30, x1, 896, x2)

inst_89:
// rs1_h1_val == 32767, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x8000107fff0400;  op2val:0x06fffa00100800
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x8000107fff0400, 0x06fffa00100800, x30, x1, 912, x2)

inst_90:
// rs2_h1_val == 512, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0100fdff8000;  op2val:0xdfff080002000004
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xbfff0100fdff8000, 0xdfff080002000004, x30, x1, 928, x2)

inst_91:
// rs2_h1_val == 128, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x06fff60004fffd;  op2val:0xbfff000900803fff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x06fff60004fffd, 0xbfff000900803fff, x30, x1, 944, x2)

inst_92:
// rs2_h1_val == -17, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffc00000017fff;  op2val:0x070100ffeffff8
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xf7ffc00000017fff, 0x070100ffeffff8, x30, x1, 960, x2)

inst_93:
// rs2_h2_val == 0, 
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffd04002000;  op2val:0xfffb000004007fff
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xf7fffffd04002000, 0xfffb000004007fff, x30, x1, 976, x2)

inst_94:
// rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h1_val == 32767, rs2_h0_val == 4, rs1_h3_val == 64, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h2_val == -16385, rs1_h1_val == 4, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 64, rs1_h0_val == -21846
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0x40bfff0004aaaa;  op2val:0x40fff97fff0004
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0x40bfff0004aaaa, 0x40fff97fff0004, x30, x1, 992, x2)

inst_95:
// rs2_h3_val == 256, rs1_h0_val == -65, rs1_h2_val == 32, rs2_h2_val == 8192, rs1_h3_val == -513, rs2_h0_val == 256
// opcode: kmads ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0020fffcffbf;  op2val:0x100200000030100
TEST_PKRR_OP(kmads, x31, x30, x29, 0x0000000000000000, 0xfdff0020fffcffbf, 0x100200000030100, x30, x1, 1008, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x12_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 128*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
