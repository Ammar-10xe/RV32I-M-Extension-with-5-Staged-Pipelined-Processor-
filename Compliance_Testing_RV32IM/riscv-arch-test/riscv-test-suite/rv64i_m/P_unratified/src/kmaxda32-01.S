
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmaxda32 instruction of the RISC-V RV64PZicsr extension for the kmaxda32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmaxda32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1 == rd != rs2, rs1==x29, rs2==x20, rd==x29, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val == rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w0_val == -2147483648, rs1_w1_val == 8, rs2_w1_val == 32768
// opcode: kmaxda32 ; op1:x29; op2:x20; dest:x29; op1val:0x00000880000000;  op2val:0x00800080000000
TEST_PKRR_OP(kmaxda32, x29, x29, x20, 0x0000000000000000, 0x00000880000000, 0x00800080000000, x29, x9, 0, x5)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x13, rd==x7, rs1_w1_val == rs2_w1_val, rs2_w0_val == 131072, rs2_w1_val == 128, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w1_val == 128, rs1_w0_val == -1073741825
// opcode: kmaxda32 ; op1:x2; op2:x13; dest:x7; op1val:0x000080bfffffff;  op2val:0x00008000020000
TEST_PKRR_OP(kmaxda32, x7, x2, x13, 0x0000000000000000, 0x000080bfffffff, 0x00008000020000, x2, x9, 16, x5)

inst_2:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x1, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == -1025, rs2_w0_val == -1073741825, rs2_w1_val == 512, rs1_w1_val == -65537
// opcode: kmaxda32 ; op1:x31; op2:x31; dest:x1; op1val:0xfffefffffffffbff;  op2val:0x000200bfffffff
TEST_PKRR_OP(kmaxda32, x1, x31, x31, 0x0000000000000000, 0xfffefffffffffbff, 0x000200bfffffff, x31, x9, 32, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val == 16777216, rs1_w1_val == -1025, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == -2147483648, rs2_w0_val == 4194304
// opcode: kmaxda32 ; op1:x4; op2:x4; dest:x4; op1val:0xfffffbff01000000;  op2val:0x8000000000400000
TEST_PKRR_OP(kmaxda32, x4, x4, x4, 0x0000000000000000, 0xfffffbff01000000, 0x8000000000400000, x4, x9, 48, x5)

inst_4:
// rs2 == rd != rs1, rs1==x19, rs2==x24, rd==x24, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w1_val == 256, rs2_w1_val == -2, rs1_w0_val == -524289
// opcode: kmaxda32 ; op1:x19; op2:x24; dest:x24; op1val:0x000100fff7ffff;  op2val:0xfffffffec0000000
TEST_PKRR_OP(kmaxda32, x24, x19, x24, 0x0000000000000000, 0x000100fff7ffff, 0xfffffffec0000000, x19, x9, 64, x5)

inst_5:
// rs1==x20, rs2==x30, rd==x25, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w0_val == -1431655766, rs1_w1_val == 32, rs2_w1_val == 2, rs1_w0_val == 4
// opcode: kmaxda32 ; op1:x20; op2:x30; dest:x25; op1val:0x00002000000004;  op2val:0x000002aaaaaaaa
TEST_PKRR_OP(kmaxda32, x25, x20, x30, 0x0000000000000000, 0x00002000000004, 0x000002aaaaaaaa, x20, x9, 80, x5)

inst_6:
// rs1==x14, rs2==x0, rd==x15, rs2_w1_val == -1431655766, rs1_w0_val == -262145, rs1_w1_val == 2048, rs2_w0_val == -1048577
// opcode: kmaxda32 ; op1:x14; op2:x0; dest:x15; op1val:0x000800fffbffff;  op2val:0xaaaaaaaaffefffff
TEST_PKRR_OP(kmaxda32, x15, x14, x0, 0x0000000000000000, 0x000800fffbffff, 0xaaaaaaaaffefffff, x14, x9, 96, x5)

inst_7:
// rs1==x13, rs2==x18, rd==x3, rs2_w1_val == 1431655765, rs1_w0_val == -65537, rs2_w0_val == -8388609, rs1_w1_val == -513
// opcode: kmaxda32 ; op1:x13; op2:x18; dest:x3; op1val:0xfffffdfffffeffff;  op2val:0x55555555ff7fffff
TEST_PKRR_OP(kmaxda32, x3, x13, x18, 0x0000000000000000, 0xfffffdfffffeffff, 0x55555555ff7fffff, x13, x9, 112, x5)

inst_8:
// rs1==x6, rs2==x17, rd==x20, rs2_w1_val == 2147483647, rs1_w1_val == -65, rs2_w0_val == 1431655765
// opcode: kmaxda32 ; op1:x6; op2:x17; dest:x20; op1val:0xffffffbffffffff6;  op2val:0x7fffffff55555555
TEST_PKRR_OP(kmaxda32, x20, x6, x17, 0x0000000000000000, 0xffffffbffffffff6, 0x7fffffff55555555, x6, x9, 128, x5)

inst_9:
// rs1==x24, rs2==x21, rd==x6, rs2_w1_val == -1073741825, rs1_w0_val == -33554433, rs1_w1_val == -129
// opcode: kmaxda32 ; op1:x24; op2:x21; dest:x6; op1val:0xffffff7ffdffffff;  op2val:0xbfffffff55555555
TEST_PKRR_OP(kmaxda32, x6, x24, x21, 0x0000000000000000, 0xffffff7ffdffffff, 0xbfffffff55555555, x24, x9, 144, x5)

inst_10:
// rs1==x7, rs2==x23, rd==x14, rs2_w1_val == -536870913, rs1_w0_val == 512, rs2_w0_val == -134217729
// opcode: kmaxda32 ; op1:x7; op2:x23; dest:x14; op1val:0xfffeffff00000200;  op2val:0xdffffffff7ffffff
TEST_PKRR_OP(kmaxda32, x14, x7, x23, 0x0000000000000000, 0xfffeffff00000200, 0xdffffffff7ffffff, x7, x9, 160, x5)

inst_11:
// rs1==x12, rs2==x10, rd==x16, rs2_w1_val == -268435457, rs2_w0_val == -33554433, rs1_w1_val == 2097152, rs1_w0_val == -3
// opcode: kmaxda32 ; op1:x12; op2:x10; dest:x16; op1val:0x200000fffffffd;  op2val:0xeffffffffdffffff
TEST_PKRR_OP(kmaxda32, x16, x12, x10, 0x0000000000000000, 0x200000fffffffd, 0xeffffffffdffffff, x12, x9, 176, x5)

inst_12:
// rs1==x25, rs2==x2, rd==x31, rs2_w1_val == -134217729, rs1_w1_val == -3
// opcode: kmaxda32 ; op1:x25; op2:x2; dest:x31; op1val:0xfffffffd00000007;  op2val:0xf7ffffff55555555
TEST_PKRR_OP(kmaxda32, x31, x25, x2, 0x0000000000000000, 0xfffffffd00000007, 0xf7ffffff55555555, x25, x9, 192, x5)

inst_13:
// rs1==x22, rs2==x6, rd==x12, rs2_w1_val == -67108865, rs2_w0_val == 16384, rs1_w1_val == 8388608
// opcode: kmaxda32 ; op1:x22; op2:x6; dest:x12; op1val:0x80000000000004;  op2val:0xfbffffff00004000
TEST_PKRR_OP(kmaxda32, x12, x22, x6, 0x0000000000000000, 0x80000000000004, 0xfbffffff00004000, x22, x9, 208, x5)

inst_14:
// rs1==x8, rs2==x3, rd==x22, rs2_w1_val == -33554433, rs2_w0_val == -129, rs1_w1_val == 4, rs1_w0_val == -32769
// opcode: kmaxda32 ; op1:x8; op2:x3; dest:x22; op1val:0x000004ffff7fff;  op2val:0xfdffffffffffff7f
TEST_PKRR_OP(kmaxda32, x22, x8, x3, 0x0000000000000000, 0x000004ffff7fff, 0xfdffffffffffff7f, x8, x9, 224, x5)

inst_15:
// rs1==x3, rs2==x16, rd==x27, rs2_w1_val == -16777217, rs1_w0_val == 128, rs2_w0_val == 268435456
// opcode: kmaxda32 ; op1:x3; op2:x16; dest:x27; op1val:0xfffffff900000080;  op2val:0xfeffffff10000000
TEST_PKRR_OP(kmaxda32, x27, x3, x16, 0x0000000000000000, 0xfffffff900000080, 0xfeffffff10000000, x3, x9, 240, x5)

inst_16:
// rs1==x27, rs2==x8, rd==x5, rs2_w1_val == -8388609, rs1_w0_val == 32768, rs1_w1_val == 262144, rs2_w0_val == -33
// opcode: kmaxda32 ; op1:x27; op2:x8; dest:x5; op1val:0x04000000008000;  op2val:0xff7fffffffffffdf
TEST_PKRR_OP(kmaxda32, x5, x27, x8, 0x0000000000000000, 0x04000000008000, 0xff7fffffffffffdf, x27, x9, 256, x4)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_17:
// rs1==x26, rs2==x22, rd==x18, rs2_w1_val == -4194305, rs1_w1_val == -134217729, rs2_w0_val == -16385, rs1_w0_val == -1048577
// opcode: kmaxda32 ; op1:x26; op2:x22; dest:x18; op1val:0xf7ffffffffefffff;  op2val:0xffbfffffffffbfff
TEST_PKRR_OP(kmaxda32, x18, x26, x22, 0x0000000000000000, 0xf7ffffffffefffff, 0xffbfffffffffbfff, x26, x3, 0, x4)

inst_18:
// rs1==x21, rs2==x7, rd==x13, rs2_w1_val == -2097153, rs2_w0_val == 256, rs1_w0_val == -257, rs1_w1_val == -262145
// opcode: kmaxda32 ; op1:x21; op2:x7; dest:x13; op1val:0xfffbfffffffffeff;  op2val:0xffdfffff00000100
TEST_PKRR_OP(kmaxda32, x13, x21, x7, 0x0000000000000000, 0xfffbfffffffffeff, 0xffdfffff00000100, x21, x3, 16, x4)

inst_19:
// rs1==x16, rs2==x28, rd==x21, rs2_w1_val == -1048577, rs2_w0_val == 262144, rs1_w1_val == 1, rs1_w0_val == -2049
// opcode: kmaxda32 ; op1:x16; op2:x28; dest:x21; op1val:0x000001fffff7ff;  op2val:0xffefffff00040000
TEST_PKRR_OP(kmaxda32, x21, x16, x28, 0x0000000000000000, 0x000001fffff7ff, 0xffefffff00040000, x16, x3, 32, x4)

inst_20:
// rs1==x30, rs2==x14, rd==x11, rs2_w1_val == -524289, rs2_w0_val == -513
// opcode: kmaxda32 ; op1:x30; op2:x14; dest:x11; op1val:0xfffffbfffffffffd;  op2val:0xfff7fffffffffdff
TEST_PKRR_OP(kmaxda32, x11, x30, x14, 0x0000000000000000, 0xfffffbfffffffffd, 0xfff7fffffffffdff, x30, x3, 48, x4)

inst_21:
// rs1==x9, rs2==x1, rd==x26, rs2_w1_val == -262145, rs1_w1_val == 4096, rs1_w0_val == 1073741824
// opcode: kmaxda32 ; op1:x9; op2:x1; dest:x26; op1val:0x00100040000000;  op2val:0xfffbffff10000000
TEST_PKRR_OP(kmaxda32, x26, x9, x1, 0x0000000000000000, 0x00100040000000, 0xfffbffff10000000, x9, x3, 64, x4)

inst_22:
// rs1==x11, rs2==x15, rd==x19, rs2_w1_val == -131073, rs1_w0_val == 262144
// opcode: kmaxda32 ; op1:x11; op2:x15; dest:x19; op1val:0x00000500040000;  op2val:0xfffdffffffffff7f
TEST_PKRR_OP(kmaxda32, x19, x11, x15, 0x0000000000000000, 0x00000500040000, 0xfffdffffffffff7f, x11, x3, 80, x4)

inst_23:
// rs1==x28, rs2==x5, rd==x2, rs2_w1_val == -65537, rs2_w0_val == -32769, rs1_w1_val == 65536
// opcode: kmaxda32 ; op1:x28; op2:x5; dest:x2; op1val:0x01000080000000;  op2val:0xfffeffffffff7fff
TEST_PKRR_OP(kmaxda32, x2, x28, x5, 0x0000000000000000, 0x01000080000000, 0xfffeffffffff7fff, x28, x3, 96, x4)

inst_24:
// rs1==x23, rs2==x9, rd==x30, rs2_w1_val == -32769, rs1_w1_val == 1048576, rs1_w0_val == 268435456
// opcode: kmaxda32 ; op1:x23; op2:x9; dest:x30; op1val:0x10000010000000;  op2val:0xffff7fff00400000
TEST_PKRR_OP(kmaxda32, x30, x23, x9, 0x0000000000000000, 0x10000010000000, 0xffff7fff00400000, x23, x3, 112, x4)

inst_25:
// rs1==x1, rs2==x29, rd==x8, rs2_w1_val == -16385, 
// opcode: kmaxda32 ; op1:x1; op2:x29; dest:x8; op1val:0x0000013fffffff;  op2val:0xffffbfff10000000
TEST_PKRR_OP(kmaxda32, x8, x1, x29, 0x0000000000000000, 0x0000013fffffff, 0xffffbfff10000000, x1, x3, 128, x4)

inst_26:
// rs1==x5, rs2==x19, rd==x9, rs2_w1_val == -8193, rs1_w0_val == 33554432, rs1_w1_val == 512, rs2_w0_val == 524288
// opcode: kmaxda32 ; op1:x5; op2:x19; dest:x9; op1val:0x00020002000000;  op2val:0xffffdfff00080000
TEST_PKRR_OP(kmaxda32, x9, x5, x19, 0x0000000000000000, 0x00020002000000, 0xffffdfff00080000, x5, x3, 144, x4)

inst_27:
// rs1==x17, rs2==x11, rd==x28, rs2_w1_val == -4097, rs2_w0_val == -524289
// opcode: kmaxda32 ; op1:x17; op2:x11; dest:x28; op1val:0x3fffffff02000000;  op2val:0xffffeffffff7ffff
TEST_PKRR_OP(kmaxda32, x28, x17, x11, 0x0000000000000000, 0x3fffffff02000000, 0xffffeffffff7ffff, x17, x3, 160, x4)

inst_28:
// rs1==x15, rs2==x12, rd==x0, rs2_w1_val == -2049, rs2_w0_val == 4, rs1_w0_val == -2097153
// opcode: kmaxda32 ; op1:x15; op2:x12; dest:x0; op1val:0x000001ffdfffff;  op2val:0xfffff7ff00000004
TEST_PKRR_OP(kmaxda32, x0, x15, x12, 0x0000000000000000, 0x000001ffdfffff, 0xfffff7ff00000004, x15, x3, 176, x4)

inst_29:
// rs1==x0, rs2==x25, rd==x10, rs2_w1_val == -1025, rs2_w0_val == 32
// opcode: kmaxda32 ; op1:x0; op2:x25; dest:x10; op1val:0x000020fffffffd;  op2val:0xfffffbff00000020
TEST_PKRR_OP(kmaxda32, x10, x0, x25, 0x0000000000000000, 0x000020fffffffd, 0xfffffbff00000020, x0, x3, 192, x4)

inst_30:
// rs1==x18, rs2==x26, rd==x17, rs2_w1_val == -513, rs2_w0_val == 128, rs1_w1_val == -524289
// opcode: kmaxda32 ; op1:x18; op2:x26; dest:x17; op1val:0xfff7ffffbfffffff;  op2val:0xfffffdff00000080
TEST_PKRR_OP(kmaxda32, x17, x18, x26, 0x0000000000000000, 0xfff7ffffbfffffff, 0xfffffdff00000080, x18, x3, 208, x4)

inst_31:
// rs1==x10, rs2==x27, rd==x23, rs2_w1_val == -257, rs1_w0_val == -1431655766
// opcode: kmaxda32 ; op1:x10; op2:x27; dest:x23; op1val:0x000200aaaaaaaa;  op2val:0xfffffeff00040000
TEST_PKRR_OP(kmaxda32, x23, x10, x27, 0x0000000000000000, 0x000200aaaaaaaa, 0xfffffeff00040000, x10, x3, 224, x4)

inst_32:
// rs2_w1_val == -129, rs1_w0_val == -131073
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffdffff;  op2val:0xffffff7f00000006
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x200000fffdffff, 0xffffff7f00000006, x30, x3, 240, x4)

inst_33:
// rs2_w1_val == -65, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000200;  op2val:0xffffffbf10000000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000200, 0xffffffbf10000000, x30, x3, 256, x1)

inst_34:
// rs2_w1_val == -33, rs2_w0_val == 1024, rs1_w0_val == -16777217
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100feffffff;  op2val:0xffffffdf00000400
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x000100feffffff, 0xffffffdf00000400, x30, x3, 272, x1)

inst_35:
// rs2_w1_val == -17, rs1_w1_val == 16384, rs2_w0_val == 1
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffffffd;  op2val:0xffffffef00000001
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x004000fffffffd, 0xffffffef00000001, x30, x3, 288, x1)

inst_36:
// rs2_w1_val == -9, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fffffff9;  op2val:0xfffffff7fffffff8
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfffffff6fffffff9, 0xfffffff7fffffff8, x30, x3, 304, x1)

inst_37:
// rs2_w1_val == -5, rs1_w1_val == 4194304, rs2_w0_val == 65536
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fdffffff;  op2val:0xfffffffb00010000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x400000fdffffff, 0xfffffffb00010000, x30, x3, 320, x1)

inst_38:
// rs2_w1_val == -3, rs1_w1_val == -2097153, rs2_w0_val == -1
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffff7ffff;  op2val:0xfffffffdffffffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffdffffffff7ffff, 0xfffffffdffffffff, x30, x3, 336, x1)

inst_39:
// rs2_w1_val == 1073741824, rs1_w0_val == 1, rs2_w0_val == -2
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000001;  op2val:0x40000000fffffffe
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x00000800000001, 0x40000000fffffffe, x30, x3, 352, x1)

inst_40:
// rs2_w1_val == 536870912, rs1_w1_val == -32769
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffeffff;  op2val:0x20000000fffffff8
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffeffff, 0x20000000fffffff8, x30, x3, 368, x1)

inst_41:
// rs2_w1_val == 268435456, rs1_w1_val == -17, rs2_w0_val == -4097
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffeffff;  op2val:0x10000000ffffefff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffffffeffffeffff, 0x10000000ffffefff, x30, x3, 384, x1)

inst_42:
// rs2_w1_val == 134217728, rs2_w0_val == 0
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7faaaaaaaa;  op2val:0x800000000000000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffffff7faaaaaaaa, 0x800000000000000, x30, x3, 400, x1)

inst_43:
// rs2_w1_val == 67108864, rs1_w1_val == -536870913, rs1_w0_val == 2048
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000800;  op2val:0x4000000fffffff9
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000800, 0x4000000fffffff9, x30, x3, 416, x1)

inst_44:
// rs2_w1_val == 33554432, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000009;  op2val:0x200000080000000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000009, 0x200000080000000, x30, x3, 432, x1)

inst_45:
// rs2_w1_val == 16777216, rs2_w0_val == -3
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900000006;  op2val:0x1000000fffffffd
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfffffff900000006, 0x1000000fffffffd, x30, x3, 448, x1)

inst_46:
// rs2_w1_val == 8388608, rs1_w1_val == 16
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000080;  op2val:0x80000000000000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x00001000000080, 0x80000000000000, x30, x3, 464, x1)

inst_47:
// rs2_w1_val == 4194304, rs1_w1_val == -2049
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000200;  op2val:0x40000000080000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000200, 0x40000000080000, x30, x3, 480, x1)

inst_48:
// rs2_w1_val == 2097152, rs2_w0_val == -536870913
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000040000000;  op2val:0x200000dfffffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x20000040000000, 0x200000dfffffff, x30, x3, 496, x1)

inst_49:
// rs2_w1_val == 1048576, rs1_w1_val == -8388609
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffffffff8;  op2val:0x10000000020000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffffff8, 0x10000000020000, x30, x3, 512, x1)

inst_50:
// rs2_w1_val == 524288, rs2_w0_val == 2, rs1_w0_val == 2147483647
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000057fffffff;  op2val:0x08000000000002
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x0000057fffffff, 0x08000000000002, x30, x3, 528, x1)

inst_51:
// rs2_w1_val == 262144, rs1_w1_val == 1073741824, rs1_w0_val == 67108864, rs2_w0_val == -9
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000004000000;  op2val:0x040000fffffff7
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x4000000004000000, 0x040000fffffff7, x30, x3, 544, x1)

inst_52:
// rs1_w0_val == 8388608, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000800000;  op2val:0x40000000000400
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x40000000800000, 0x40000000000400, x30, x3, 560, x1)

inst_53:
// rs1_w0_val == 4194304, rs2_w0_val == 2147483647
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00400000;  op2val:0xfff7ffff7fffffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00400000, 0xfff7ffff7fffffff, x30, x3, 576, x1)

inst_54:
// rs1_w0_val == 2097152, rs1_w1_val == 67108864
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000200000;  op2val:0x000005ffff7fff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x400000000200000, 0x000005ffff7fff, x30, x3, 592, x1)

inst_55:
// rs1_w0_val == 1048576, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00100000;  op2val:0xefffffffbfffffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00100000, 0xefffffffbfffffff, x30, x3, 608, x1)

inst_56:
// rs1_w0_val == 524288, rs2_w0_val == 1048576
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000080000;  op2val:0x08000000100000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x04000000080000, 0x08000000100000, x30, x3, 624, x1)

inst_57:
// rs1_w0_val == 131072, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00020000;  op2val:0x3ffffffffffffff6
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00020000, 0x3ffffffffffffff6, x30, x3, 640, x1)

inst_58:
// rs1_w0_val == 65536, rs2_w1_val == 16384, rs2_w0_val == -67108865
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000010000;  op2val:0x004000fbffffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x10000000010000, 0x004000fbffffff, x30, x3, 656, x1)

inst_59:
// rs1_w0_val == 16384, rs1_w1_val == 32768
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000004000;  op2val:0x000009dfffffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x00800000004000, 0x000009dfffffff, x30, x3, 672, x1)

inst_60:
// rs1_w0_val == 8192, rs2_w0_val == 2097152
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000002000;  op2val:0xfffffffd00200000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x00010000002000, 0xfffffffd00200000, x30, x3, 688, x1)

inst_61:
// rs1_w0_val == 4096, rs1_w1_val == -131073
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00001000;  op2val:0xfffffff9fffffffa
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00001000, 0xfffffff9fffffffa, x30, x3, 704, x1)

inst_62:
// rs1_w0_val == 1024, rs2_w0_val == 134217728
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000400;  op2val:0x4000000008000000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x00000700000400, 0x4000000008000000, x30, x3, 720, x1)

inst_63:
// rs1_w0_val == 256, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000100;  op2val:0x4000000000010000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000100, 0x4000000000010000, x30, x3, 736, x1)

inst_64:
// rs1_w0_val == 64, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000040;  op2val:0xfffdffff00004000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000040, 0xfffdffff00004000, x30, x3, 752, x1)

inst_65:
// rs1_w0_val == 32, rs2_w0_val == -5, rs1_w1_val == -1073741825
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000020;  op2val:0xff7ffffffffffffb
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000020, 0xff7ffffffffffffb, x30, x3, 768, x1)

inst_66:
// rs1_w0_val == 16, rs1_w1_val == 268435456
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000010;  op2val:0x2000000000000000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x1000000000000010, 0x2000000000000000, x30, x3, 784, x1)

inst_67:
// rs1_w0_val == 8, rs2_w0_val == 32768
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000008;  op2val:0x5555555500008000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x04000000000008, 0x5555555500008000, x30, x3, 800, x1)

inst_68:
// rs1_w0_val == 2, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000002;  op2val:0xfffffff708000000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x04000000000002, 0xfffffff708000000, x30, x3, 816, x1)

inst_69:
// rs1_w0_val == 0, rs1_w1_val == 16777216, rs2_w1_val == 256
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000000;  op2val:0x00010000000007
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x100000000000000, 0x00010000000007, x30, x3, 832, x1)

inst_70:
// rs1_w0_val == -1, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffffff;  op2val:0x00000600010000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffffff, 0x00000600010000, x30, x3, 848, x1)

inst_71:
// rs2_w1_val == 131072, rs1_w1_val == -9, rs1_w0_val == -4194305
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffbfffff;  op2val:0x020000fffffdff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffbfffff, 0x020000fffffdff, x30, x3, 864, x1)

inst_72:
// rs2_w1_val == 65536, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffdfffff;  op2val:0x01000080000000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x000800ffdfffff, 0x01000080000000, x30, x3, 880, x1)

inst_73:
// rs2_w1_val == 8192, rs1_w1_val == -4194305
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000800;  op2val:0x002000fffffffb
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000800, 0x002000fffffffb, x30, x3, 896, x1)

inst_74:
// rs2_w1_val == 4096, rs1_w1_val == 536870912, rs1_w0_val == 536870912
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000020000000;  op2val:0x001000fffffffb
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x2000000020000000, 0x001000fffffffb, x30, x3, 912, x1)

inst_75:
// rs2_w1_val == 2048, rs2_w0_val == 8192
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000aaaaaaaa;  op2val:0x00080000002000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x1000000aaaaaaaa, 0x00080000002000, x30, x3, 928, x1)

inst_76:
// rs2_w1_val == 1024, rs2_w0_val == -2049
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000080;  op2val:0x000400fffff7ff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000080, 0x000400fffff7ff, x30, x3, 944, x1)

inst_77:
// rs2_w1_val == 64, rs1_w1_val == 2
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200400000;  op2val:0x000040fdffffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x00000200400000, 0x000040fdffffff, x30, x3, 960, x1)

inst_78:
// rs2_w1_val == 32, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000020000000;  op2val:0x00002000020000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x40000020000000, 0x00002000020000, x30, x3, 976, x1)

inst_79:
// rs2_w1_val == 16, rs1_w1_val == 134217728, rs1_w0_val == -65
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ffffffbf;  op2val:0x000010ffffffdf
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x8000000ffffffbf, 0x000010ffffffdf, x30, x3, 992, x1)

inst_80:
// rs2_w1_val == 8, rs1_w1_val == 2147483647
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffffffc;  op2val:0x000008f7ffffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffffffc, 0x000008f7ffffff, x30, x3, 1008, x1)

inst_81:
// rs2_w1_val == 4, rs1_w0_val == 134217728
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff08000000;  op2val:0x000004ffffffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x3fffffff08000000, 0x000004ffffffff, x30, x3, 1024, x1)

inst_82:
// rs2_w1_val == 1, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000800;  op2val:0x00000100000000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x00001000000800, 0x00000100000000, x30, x3, 1040, x1)

inst_83:
// rs2_w1_val == 0, rs2_w0_val == -1025
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003fff7ffff;  op2val:0x000000fffffbff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x000003fff7ffff, 0x000000fffffbff, x30, x3, 1056, x1)

inst_84:
// rs2_w1_val == -1, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffffffd;  op2val:0xfffffffffffffffc
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x20000000fffffffd, 0xfffffffffffffffc, x30, x3, 1072, x1)

inst_85:
// rs2_w0_val == 4096, rs1_w1_val == -4097
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffffffc;  op2val:0xffdfffff00001000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffffeffffffffffc, 0xffdfffff00001000, x30, x3, 1088, x1)

inst_86:
// rs2_w0_val == 2048, rs1_w1_val == -16385
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000000;  op2val:0xffefffff00000800
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000000, 0xffefffff00000800, x30, x3, 1104, x1)

inst_87:
// rs2_w0_val == 512, rs1_w0_val == -67108865
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fbffffff;  op2val:0x00400000000200
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x1000000fbffffff, 0x00400000000200, x30, x3, 1120, x1)

inst_88:
// rs2_w0_val == 64, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000008000;  op2val:0xffbfffff00000040
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x00002000008000, 0xffbfffff00000040, x30, x3, 1136, x1)

inst_89:
// rs2_w0_val == 16, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000510000000;  op2val:0x00100000000010
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x00000510000000, 0x00100000000010, x30, x3, 1152, x1)

inst_90:
// rs2_w0_val == 8, rs1_w1_val == 0
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000c0000000;  op2val:0x00080000000008
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x000000c0000000, 0x00080000000008, x30, x3, 1168, x1)

inst_91:
// rs1_w1_val == -1431655766, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffbffff;  op2val:0x00010000000100
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffbffff, 0x00010000000100, x30, x3, 1184, x1)

inst_92:
// rs1_w1_val == 1431655765, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000002;  op2val:0x01000000000040
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x5555555500000002, 0x01000000000040, x30, x3, 1200, x1)

inst_93:
// rs1_w1_val == -268435457, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffffbff;  op2val:0x800000bfffffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xeffffffffffffbff, 0x800000bfffffff, x30, x3, 1216, x1)

inst_94:
// rs1_w1_val == -67108865, rs2_w0_val == 67108864
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff04000000;  op2val:0x02000004000000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfbffffff04000000, 0x02000004000000, x30, x3, 1232, x1)

inst_95:
// rs1_w1_val == -33554433, rs2_w0_val == -8193
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffc0000000;  op2val:0xfffbffffffffdfff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfdffffffc0000000, 0xfffbffffffffdfff, x30, x3, 1248, x1)

inst_96:
// rs1_w1_val == -16777217, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000007;  op2val:0x7fffffff08000000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000007, 0x7fffffff08000000, x30, x3, 1264, x1)

inst_97:
// rs1_w1_val == -1048577, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00800000;  op2val:0x00000000000020
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffefffff00800000, 0x00000000000020, x30, x3, 1280, x1)

inst_98:
// rs1_w1_val == -8193, rs2_w0_val == -65537
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000004;  op2val:0xffffffbffffeffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000004, 0xffffffbffffeffff, x30, x3, 1296, x1)

inst_99:
// rs1_w1_val == -257, rs2_w0_val == -262145
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00200000;  op2val:0xc0000000fffbffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00200000, 0xc0000000fffbffff, x30, x3, 1312, x1)

inst_100:
// rs1_w1_val == -33, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000001;  op2val:0x00020010000000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000001, 0x00020010000000, x30, x3, 1328, x1)

inst_101:
// rs1_w1_val == -5, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00002000;  op2val:0xfffffdff00000100
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00002000, 0xfffffdff00000100, x30, x3, 1344, x1)

inst_102:
// rs1_w1_val == -2, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefeffffff;  op2val:0x001000fdffffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfffffffefeffffff, 0x001000fdffffff, x30, x3, 1360, x1)

inst_103:
// rs1_w1_val == -2147483648, rs1_w0_val == -8388609
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ff7fffff;  op2val:0xefffffff00000100
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x80000000ff7fffff, 0xefffffff00000100, x30, x3, 1376, x1)

inst_104:
// rs1_w1_val == 33554432, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000020;  op2val:0x004000ffffdfff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x200000000000020, 0x004000ffffdfff, x30, x3, 1392, x1)

inst_105:
// rs1_w1_val == 524288, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000040000000;  op2val:0x040000fffffff8
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x08000040000000, 0x040000fffffff8, x30, x3, 1408, x1)

inst_106:
// rs1_w1_val == 131072, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000002000;  op2val:0x00010000008000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x02000000002000, 0x00010000008000, x30, x3, 1424, x1)

inst_107:
// rs1_w1_val == 8192, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000008000;  op2val:0x400000000020000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x00200000008000, 0x400000000020000, x30, x3, 1440, x1)

inst_108:
// rs1_w1_val == 1024, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040004000000;  op2val:0xffffbfff00010000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x00040004000000, 0xffffbfff00010000, x30, x3, 1456, x1)

inst_109:
// rs1_w1_val == 64, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000400;  op2val:0xfffffff800200000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x00004000000400, 0xfffffff800200000, x30, x3, 1472, x1)

inst_110:
// rs2_w0_val == -268435457, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafbffffff;  op2val:0x8000000efffffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafbffffff, 0x8000000efffffff, x30, x3, 1488, x1)

inst_111:
// rs1_w1_val == -1, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0xf7fffffffffffff9
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0xf7fffffffffffff9, x30, x3, 1504, x1)

inst_112:
// rs2_w0_val == -16777217, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffeffffff;  op2val:0xfffffff9feffffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffbffffffeffffff, 0xfffffff9feffffff, x30, x3, 1520, x1)

inst_113:
// rs1_w0_val == 1431655765, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff55555555;  op2val:0xfdffffff00000004
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff55555555, 0xfdffffff00000004, x30, x3, 1536, x1)

inst_114:
// rs2_w0_val == -4194305, rs1_w0_val == -129
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffff7f;  op2val:0x000009ffbfffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffffff7f, 0x000009ffbfffff, x30, x3, 1552, x1)

inst_115:
// rs2_w0_val == -2097153, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000800;  op2val:0xfffffeffffdfffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffffffff00000800, 0xfffffeffffdfffff, x30, x3, 1568, x1)

inst_116:
// rs1_w0_val == -536870913, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffdfffffff;  op2val:0x8000000aaaaaaaa
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffefffffdfffffff, 0x8000000aaaaaaaa, x30, x3, 1584, x1)

inst_117:
// rs1_w0_val == -268435457, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000efffffff;  op2val:0xfffffdffffffbfff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x400000efffffff, 0xfffffdffffffbfff, x30, x3, 1600, x1)

inst_118:
// rs1_w0_val == -134217729, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffff7ffffff;  op2val:0xfffffbffffffffdf
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfbfffffff7ffffff, 0xfffffbffffffffdf, x30, x3, 1616, x1)

inst_119:
// rs2_w0_val == -131073, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000002000000;  op2val:0x008000fffdffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x200000002000000, 0x008000fffdffff, x30, x3, 1632, x1)

inst_120:
// rs2_w0_val == 16777216, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00010000;  op2val:0x2000000001000000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00010000, 0x2000000001000000, x30, x3, 1648, x1)

inst_121:
// rs2_w0_val == -257, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000002;  op2val:0xfffffff8fffffeff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x00004000000002, 0xfffffff8fffffeff, x30, x3, 1664, x1)

inst_122:
// rs2_w0_val == -65, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffdffff;  op2val:0xfffffffeffffffbf
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x000000fffdffff, 0xfffffffeffffffbf, x30, x3, 1680, x1)

inst_123:
// rs1_w0_val == -16385, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffffbfff;  op2val:0x1000000aaaaaaaa
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfffffeffffffbfff, 0x1000000aaaaaaaa, x30, x3, 1696, x1)

inst_124:
// rs1_w0_val == -8193, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffffdfff;  op2val:0x00002000000400
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xffffffdfffffdfff, 0x00002000000400, x30, x3, 1712, x1)

inst_125:
// rs2_w0_val == -17, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000008;  op2val:0xfffffbffffffffef
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000008, 0xfffffbffffffffef, x30, x3, 1728, x1)

inst_126:
// rs1_w0_val == -4097, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006ffffefff;  op2val:0x2000000fffffffe
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x000006ffffefff, 0x2000000fffffffe, x30, x3, 1744, x1)

inst_127:
// rs1_w0_val == -513, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffffdff;  op2val:0xfffffff8fffbffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x010000fffffdff, 0xfffffff8fffbffff, x30, x3, 1760, x1)

inst_128:
// rs2_w0_val == 1073741824, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffffdff;  op2val:0x02000040000000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffffdff, 0x02000040000000, x30, x3, 1776, x1)

inst_129:
// rs2_w0_val == 536870912, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000001;  op2val:0xdfffffff20000000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x00000800000001, 0xdfffffff20000000, x30, x3, 1792, x1)

inst_130:
// rs1_w0_val == -33, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffffffdf;  op2val:0x080000fffffbff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x000010ffffffdf, 0x080000fffffbff, x30, x3, 1808, x1)

inst_131:
// rs1_w0_val == -17, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffffef;  op2val:0xfffffbfffffffff6
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffffef, 0xfffffbfffffffff6, x30, x3, 1824, x1)

inst_132:
// rs1_w0_val == -9, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffffffff7;  op2val:0x004000fffffffc
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfffdfffffffffff7, 0x004000fffffffc, x30, x3, 1840, x1)

inst_133:
// rs1_w0_val == -5, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000fffffffb;  op2val:0x00000500000001
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x020000fffffffb, 0x00000500000001, x30, x3, 1856, x1)

inst_134:
// rs2_w0_val == 33554432, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000100;  op2val:0x00000702000000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x00000800000100, 0x00000702000000, x30, x3, 1872, x1)

inst_135:
// rs1_w0_val == -2, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffffffe;  op2val:0xfffffff700010000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x000001fffffffe, 0xfffffff700010000, x30, x3, 1888, x1)

inst_136:
// rs2_w0_val == 8388608, 
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffffffff6;  op2val:0xf7ffffff00800000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfffdfffffffffff6, 0xf7ffffff00800000, x30, x3, 1904, x1)

inst_137:
// rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val == 16777216, rs1_w1_val == -1025, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == -2147483648, rs2_w0_val == 4194304
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff01000000;  op2val:0x8000000000400000
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0xfffffbff01000000, 0x8000000000400000, x30, x3, 1920, x1)

inst_138:
// rs2_w1_val == -1431655766, rs1_w0_val == -262145, rs1_w1_val == 2048, rs2_w0_val == -1048577
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffbffff;  op2val:0xaaaaaaaaffefffff
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x000800fffbffff, 0xaaaaaaaaffefffff, x30, x3, 1936, x1)

inst_139:
// rs2_w1_val == -2049, rs2_w0_val == 4, rs1_w0_val == -2097153
// opcode: kmaxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001ffdfffff;  op2val:0xfffff7ff00000004
TEST_PKRR_OP(kmaxda32, x31, x30, x29, 0x0000000000000000, 0x000001ffdfffff, 0xfffff7ff00000004, x30, x3, 1952, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 246*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
