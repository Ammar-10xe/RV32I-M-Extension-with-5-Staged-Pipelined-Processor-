
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sub32 instruction of the RISC-V RV64PZicsr extension for the sub32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sub32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x27, rs2==x15, rd==x27, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val == -1048577, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w1_val == -32769
// opcode: sub32 ; op1:x27; op2:x15; dest:x27; op1val:0xffefffff80000000;  op2val:0xffff7fff00000007
TEST_RR_OP(sub32, x27, x27, x15, 0x0000000000000000, 0xffefffff80000000, 0xffff7fff00000007, x7, 0, x12)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x14, rs2==x21, rd==x29, rs1_w1_val == rs2_w1_val, rs1_w1_val == 1048576, rs2_w0_val == -4097, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w0_val == 1, rs2_w1_val == 1048576
// opcode: sub32 ; op1:x14; op2:x21; dest:x29; op1val:0x10000000000001;  op2val:0x100000ffffefff
TEST_RR_OP(sub32, x29, x14, x21, 0x0000000000000000, 0x10000000000001, 0x100000ffffefff, x7, 8, x12)

inst_2:
// rs1 == rs2 != rd, rs1==x16, rs2==x16, rd==x23, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == 4194304, rs1_w1_val == -262145, rs2_w1_val == 2048, rs2_w0_val == 64, rs1_w0_val > 0 and rs2_w0_val > 0
// opcode: sub32 ; op1:x16; op2:x16; dest:x23; op1val:0xfffbffff00400000;  op2val:0x00080000000040
TEST_RR_OP(sub32, x23, x16, x16, 0x0000000000000000, 0xfffbffff00400000, 0x00080000000040, x7, 16, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w0_val == 1431655765, rs1_w0_val == -257, rs2_w1_val == -16777217
// opcode: sub32 ; op1:x4; op2:x4; dest:x4; op1val:0x000006fffffeff;  op2val:0xfeffffff55555555
TEST_RR_OP(sub32, x4, x4, x4, 0x0000000000000000, 0x000006fffffeff, 0xfeffffff55555555, x7, 24, x12)

inst_4:
// rs2 == rd != rs1, rs1==x6, rs2==x1, rd==x1, rs1_w0_val == rs2_w0_val, rs1_w0_val == 1048576, rs2_w1_val == 33554432, rs2_w0_val == 1048576
// opcode: sub32 ; op1:x6; op2:x1; dest:x1; op1val:0x00000600100000;  op2val:0x200000000100000
TEST_RR_OP(sub32, x1, x6, x1, 0x0000000000000000, 0x00000600100000, 0x200000000100000, x7, 32, x12)

inst_5:
// rs1==x29, rs2==x13, rd==x10, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w1_val == 16384, rs2_w0_val == -67108865, rs1_w1_val == -4194305
// opcode: sub32 ; op1:x29; op2:x13; dest:x10; op1val:0xffbffffffffffff8;  op2val:0x004000fbffffff
TEST_RR_OP(sub32, x10, x29, x13, 0x0000000000000000, 0xffbffffffffffff8, 0x004000fbffffff, x7, 40, x12)

inst_6:
// rs1==x15, rs2==x11, rd==x2, rs2_w1_val == -1431655766, rs2_w0_val == -8388609, rs1_w1_val == 0
// opcode: sub32 ; op1:x15; op2:x11; dest:x2; op1val:0x000000fffffffa;  op2val:0xaaaaaaaaff7fffff
TEST_RR_OP(sub32, x2, x15, x11, 0x0000000000000000, 0x000000fffffffa, 0xaaaaaaaaff7fffff, x7, 48, x12)

inst_7:
// rs1==x25, rs2==x23, rd==x8, rs2_w1_val == 1431655765, rs2_w0_val == -257, rs1_w0_val == 0, rs1_w1_val == 262144
// opcode: sub32 ; op1:x25; op2:x23; dest:x8; op1val:0x04000000000000;  op2val:0x55555555fffffeff
TEST_RR_OP(sub32, x8, x25, x23, 0x0000000000000000, 0x04000000000000, 0x55555555fffffeff, x7, 56, x12)

inst_8:
// rs1==x1, rs2==x24, rd==x17, rs2_w1_val == 2147483647, rs1_w1_val == -16777217, rs1_w0_val == 268435456, rs2_w0_val == 16
// opcode: sub32 ; op1:x1; op2:x24; dest:x17; op1val:0xfeffffff10000000;  op2val:0x7fffffff00000010
TEST_RR_OP(sub32, x17, x1, x24, 0x0000000000000000, 0xfeffffff10000000, 0x7fffffff00000010, x7, 64, x12)

inst_9:
// rs1==x22, rs2==x0, rd==x25, rs2_w1_val == -1073741825, rs2_w0_val == 512, rs1_w0_val == -2097153
// opcode: sub32 ; op1:x22; op2:x0; dest:x25; op1val:0x3fffffffffdfffff;  op2val:0xbfffffff00000200
TEST_RR_OP(sub32, x25, x22, x0, 0x0000000000000000, 0x3fffffffffdfffff, 0xbfffffff00000200, x7, 72, x12)

inst_10:
// rs1==x9, rs2==x10, rd==x26, rs2_w1_val == -536870913, rs1_w1_val == 64, rs2_w0_val == -2, rs1_w0_val == 128
// opcode: sub32 ; op1:x9; op2:x10; dest:x26; op1val:0x00004000000080;  op2val:0xdffffffffffffffe
TEST_RR_OP(sub32, x26, x9, x10, 0x0000000000000000, 0x00004000000080, 0xdffffffffffffffe, x7, 80, x12)

inst_11:
// rs1==x5, rs2==x31, rd==x16, rs2_w1_val == -268435457, rs2_w0_val == -5, rs1_w0_val == 16, rs1_w1_val == -2
// opcode: sub32 ; op1:x5; op2:x31; dest:x16; op1val:0xfffffffe00000010;  op2val:0xeffffffffffffffb
TEST_RR_OP(sub32, x16, x5, x31, 0x0000000000000000, 0xfffffffe00000010, 0xeffffffffffffffb, x7, 88, x12)

inst_12:
// rs1==x3, rs2==x2, rd==x19, rs2_w1_val == -134217729, rs1_w1_val == -1, rs2_w0_val == 2097152, rs1_w0_val == -1048577
// opcode: sub32 ; op1:x3; op2:x2; dest:x19; op1val:0xffffffffffefffff;  op2val:0xf7ffffff00200000
TEST_RR_OP(sub32, x19, x3, x2, 0x0000000000000000, 0xffffffffffefffff, 0xf7ffffff00200000, x7, 96, x12)

inst_13:
// rs1==x8, rs2==x26, rd==x11, rs2_w1_val == -67108865, rs2_w0_val == 4194304, rs1_w0_val == 8192
// opcode: sub32 ; op1:x8; op2:x26; dest:x11; op1val:0xfffffffa00002000;  op2val:0xfbffffff00400000
TEST_RR_OP(sub32, x11, x8, x26, 0x0000000000000000, 0xfffffffa00002000, 0xfbffffff00400000, x7, 104, x12)

inst_14:
// rs1==x2, rs2==x14, rd==x5, rs2_w1_val == -33554433, rs2_w0_val == -2147483648, rs1_w0_val == 1073741824, rs1_w1_val == 32768
// opcode: sub32 ; op1:x2; op2:x14; dest:x5; op1val:0x00800040000000;  op2val:0xfdffffff80000000
TEST_RR_OP(sub32, x5, x2, x14, 0x0000000000000000, 0x00800040000000, 0xfdffffff80000000, x7, 112, x12)

inst_15:
// rs1==x10, rs2==x20, rd==x3, rs2_w1_val == -8388609, rs1_w1_val == 33554432
// opcode: sub32 ; op1:x10; op2:x20; dest:x3; op1val:0x200000000000005;  op2val:0xff7fffffc0000000
TEST_RR_OP(sub32, x3, x10, x20, 0x0000000000000000, 0x200000000000005, 0xff7fffffc0000000, x7, 120, x12)

inst_16:
// rs1==x26, rs2==x6, rd==x0, rs2_w1_val == -4194305, rs1_w0_val == 32768, rs2_w0_val == 128, rs1_w1_val == -524289
// opcode: sub32 ; op1:x26; op2:x6; dest:x0; op1val:0xfff7ffff00008000;  op2val:0xffbfffff00000080
TEST_RR_OP(sub32, x0, x26, x6, 0x0000000000000000, 0xfff7ffff00008000, 0xffbfffff00000080, x7, 128, x2)

inst_17:
// rs1==x30, rs2==x12, rd==x24, rs2_w1_val == -2097153, rs2_w0_val == -1025, rs1_w0_val == -5
// opcode: sub32 ; op1:x30; op2:x12; dest:x24; op1val:0x000003fffffffb;  op2val:0xffdffffffffffbff
TEST_RR_OP(sub32, x24, x30, x12, 0x0000000000000000, 0x000003fffffffb, 0xffdffffffffffbff, x7, 136, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_18:
// rs1==x0, rs2==x19, rd==x9, rs2_w1_val == -1048577, rs1_w0_val == 65536, rs2_w0_val == 2147483647
// opcode: sub32 ; op1:x0; op2:x19; dest:x9; op1val:0x00000300010000;  op2val:0xffefffff7fffffff
TEST_RR_OP(sub32, x9, x0, x19, 0x0000000000000000, 0x00000300010000, 0xffefffff7fffffff, x1, 0, x2)

inst_19:
// rs1==x31, rs2==x28, rd==x7, rs2_w1_val == -524289, rs1_w1_val == 536870912, rs1_w0_val == -32769
// opcode: sub32 ; op1:x31; op2:x28; dest:x7; op1val:0x20000000ffff7fff;  op2val:0xfff7ffffc0000000
TEST_RR_OP(sub32, x7, x31, x28, 0x0000000000000000, 0x20000000ffff7fff, 0xfff7ffffc0000000, x1, 8, x2)

inst_20:
// rs1==x13, rs2==x30, rd==x22, rs2_w1_val == -262145, rs1_w0_val == -2, rs2_w0_val == 536870912, rs1_w1_val == 65536
// opcode: sub32 ; op1:x13; op2:x30; dest:x22; op1val:0x010000fffffffe;  op2val:0xfffbffff20000000
TEST_RR_OP(sub32, x22, x13, x30, 0x0000000000000000, 0x010000fffffffe, 0xfffbffff20000000, x1, 16, x2)

inst_21:
// rs1==x23, rs2==x5, rd==x12, rs2_w1_val == -131073, rs2_w0_val == -262145, rs1_w0_val == -1431655766, rs1_w1_val == -3
// opcode: sub32 ; op1:x23; op2:x5; dest:x12; op1val:0xfffffffdaaaaaaaa;  op2val:0xfffdfffffffbffff
TEST_RR_OP(sub32, x12, x23, x5, 0x0000000000000000, 0xfffffffdaaaaaaaa, 0xfffdfffffffbffff, x1, 24, x2)

inst_22:
// rs1==x20, rs2==x7, rd==x18, rs2_w1_val == -65537, rs1_w0_val == 2
// opcode: sub32 ; op1:x20; op2:x7; dest:x18; op1val:0x01000000000002;  op2val:0xfffeffffc0000000
TEST_RR_OP(sub32, x18, x20, x7, 0x0000000000000000, 0x01000000000002, 0xfffeffffc0000000, x1, 32, x2)

inst_23:
// rs1==x28, rs2==x18, rd==x6, rs2_w1_val == -16385, rs1_w1_val == -5, rs2_w0_val == -16385, rs1_w0_val == 262144
// opcode: sub32 ; op1:x28; op2:x18; dest:x6; op1val:0xfffffffb00040000;  op2val:0xffffbfffffffbfff
TEST_RR_OP(sub32, x6, x28, x18, 0x0000000000000000, 0xfffffffb00040000, 0xffffbfffffffbfff, x1, 40, x2)

inst_24:
// rs1==x19, rs2==x3, rd==x31, rs2_w1_val == -8193, rs1_w0_val == -67108865, rs1_w1_val == 4096
// opcode: sub32 ; op1:x19; op2:x3; dest:x31; op1val:0x001000fbffffff;  op2val:0xffffdffffffffffb
TEST_RR_OP(sub32, x31, x19, x3, 0x0000000000000000, 0x001000fbffffff, 0xffffdffffffffffb, x1, 48, x2)

inst_25:
// rs1==x21, rs2==x17, rd==x14, rs2_w1_val == -4097, rs1_w1_val == -268435457
// opcode: sub32 ; op1:x21; op2:x17; dest:x14; op1val:0xefffffff00000009;  op2val:0xffffeffffffffff6
TEST_RR_OP(sub32, x14, x21, x17, 0x0000000000000000, 0xefffffff00000009, 0xffffeffffffffff6, x1, 56, x2)

inst_26:
// rs1==x18, rs2==x8, rd==x13, rs2_w1_val == -2049, rs1_w1_val == -134217729
// opcode: sub32 ; op1:x18; op2:x8; dest:x13; op1val:0xf7ffffff00400000;  op2val:0xfffff7ffc0000000
TEST_RR_OP(sub32, x13, x18, x8, 0x0000000000000000, 0xf7ffffff00400000, 0xfffff7ffc0000000, x1, 64, x2)

inst_27:
// rs1==x7, rs2==x27, rd==x21, rs2_w1_val == -1025, rs1_w1_val == 524288, rs2_w0_val == -33
// opcode: sub32 ; op1:x7; op2:x27; dest:x21; op1val:0x08000000000001;  op2val:0xfffffbffffffffdf
TEST_RR_OP(sub32, x21, x7, x27, 0x0000000000000000, 0x08000000000001, 0xfffffbffffffffdf, x1, 72, x2)

inst_28:
// rs1==x11, rs2==x25, rd==x28, rs2_w1_val == -513, 
// opcode: sub32 ; op1:x11; op2:x25; dest:x28; op1val:0x2000000000010000;  op2val:0xfffffdffffffefff
TEST_RR_OP(sub32, x28, x11, x25, 0x0000000000000000, 0x2000000000010000, 0xfffffdffffffefff, x1, 80, x2)

inst_29:
// rs1==x12, rs2==x22, rd==x20, rs2_w1_val == -257, rs1_w0_val == 512, rs2_w0_val == -524289
// opcode: sub32 ; op1:x12; op2:x22; dest:x20; op1val:0xfffffffe00000200;  op2val:0xfffffefffff7ffff
TEST_RR_OP(sub32, x20, x12, x22, 0x0000000000000000, 0xfffffffe00000200, 0xfffffefffff7ffff, x1, 88, x2)

inst_30:
// rs1==x24, rs2==x29, rd==x30, rs2_w1_val == -129, rs1_w1_val == -65, rs1_w0_val == 131072, rs2_w0_val == -17
// opcode: sub32 ; op1:x24; op2:x29; dest:x30; op1val:0xffffffbf00020000;  op2val:0xffffff7fffffffef
TEST_RR_OP(sub32, x30, x24, x29, 0x0000000000000000, 0xffffffbf00020000, 0xffffff7fffffffef, x1, 96, x2)

inst_31:
// rs1==x17, rs2==x9, rd==x15, rs2_w1_val == -65, rs2_w0_val == 262144
// opcode: sub32 ; op1:x17; op2:x9; dest:x15; op1val:0xffefffff00000005;  op2val:0xffffffbf00040000
TEST_RR_OP(sub32, x15, x17, x9, 0x0000000000000000, 0xffefffff00000005, 0xffffffbf00040000, x1, 104, x2)

inst_32:
// rs2_w1_val == -33, rs2_w0_val == 4, rs1_w1_val == 268435456, rs1_w0_val == -1
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000ffffffff;  op2val:0xffffffdf00000004
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x10000000ffffffff, 0xffffffdf00000004, x1, 112, x2)

inst_33:
// rs2_w1_val == -17, rs1_w0_val == 8, rs1_w1_val == -8388609
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000008;  op2val:0xffffffef20000000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000008, 0xffffffef20000000, x1, 120, x2)

inst_34:
// rs2_w1_val == -9, rs1_w1_val == 4, rs2_w0_val == -1048577
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400100000;  op2val:0xfffffff7ffefffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x00000400100000, 0xfffffff7ffefffff, x1, 128, x2)

inst_35:
// rs2_w1_val == -5, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffffffffeff;  op2val:0xfffffffb00040000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffbfffffffffeff, 0xfffffffb00040000, x1, 136, x2)

inst_36:
// rs2_w1_val == -3, rs2_w0_val == 131072, rs1_w0_val == 524288
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400080000;  op2val:0xfffffffd00020000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x00000400080000, 0xfffffffd00020000, x1, 144, x2)

inst_37:
// rs2_w1_val == -2, rs1_w0_val == -268435457
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005efffffff;  op2val:0xfffffffe00000006
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x000005efffffff, 0xfffffffe00000006, x1, 152, x2)

inst_38:
// rs2_w1_val == -2147483648, rs1_w1_val == 16384, rs1_w0_val == 8388608
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000800000;  op2val:0x8000000000000003
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x00400000800000, 0x8000000000000003, x1, 160, x2)

inst_39:
// rs2_w1_val == 1073741824, rs2_w0_val == 32768, rs1_w1_val == -1431655766, rs1_w0_val == -17
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffffffef;  op2val:0x4000000000008000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffffffef, 0x4000000000008000, x1, 168, x2)

inst_40:
// rs2_w1_val == 536870912, rs2_w0_val == 32
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffffffffa;  op2val:0x2000000000000020
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffffffa, 0x2000000000000020, x1, 176, x2)

inst_41:
// rs2_w1_val == 268435456, rs1_w0_val == 16777216
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000501000000;  op2val:0x1000000055555555
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x00000501000000, 0x1000000055555555, x1, 184, x2)

inst_42:
// rs2_w1_val == 134217728, rs1_w0_val == 64
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000040;  op2val:0x8000000fffffffc
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xffffffff00000040, 0x8000000fffffffc, x1, 192, x2)

inst_43:
// rs2_w1_val == 67108864, rs1_w1_val == 2048, rs2_w0_val == -134217729
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000080000;  op2val:0x4000000f7ffffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x00080000080000, 0x4000000f7ffffff, x1, 200, x2)

inst_44:
// rs2_w1_val == 16777216, rs1_w0_val == -1025, rs1_w1_val == -17
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffffbff;  op2val:0x1000000ffefffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xffffffeffffffbff, 0x1000000ffefffff, x1, 208, x2)

inst_45:
// rs2_w1_val == 8388608, rs1_w0_val == -33554433
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffdffffff;  op2val:0x80000000400000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xeffffffffdffffff, 0x80000000400000, x1, 216, x2)

inst_46:
// rs2_w1_val == 4194304, rs1_w1_val == 134217728, rs1_w0_val == 134217728
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000008000000;  op2val:0x400000ffefffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x800000008000000, 0x400000ffefffff, x1, 224, x2)

inst_47:
// rs2_w1_val == 2097152, rs1_w1_val == -67108865
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff08000000;  op2val:0x20000000000005
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfbffffff08000000, 0x20000000000005, x1, 232, x2)

inst_48:
// rs2_w1_val == 524288, rs1_w1_val == 1073741824, rs2_w0_val == 33554432
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000080000000;  op2val:0x08000002000000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x4000000080000000, 0x08000002000000, x1, 240, x2)

inst_49:
// rs1_w0_val == 33554432, rs2_w0_val == -268435457
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff02000000;  op2val:0x200000efffffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff02000000, 0x200000efffffff, x1, 248, x2)

inst_50:
// rs1_w0_val == 2097152, rs2_w1_val == 16, rs1_w1_val == -513, rs2_w0_val == 1
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00200000;  op2val:0x00001000000001
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00200000, 0x00001000000001, x1, 256, x2)

inst_51:
// rs1_w0_val == 16384, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000004000;  op2val:0xfffffbffefffffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x10000000004000, 0xfffffbffefffffff, x1, 264, x2)

inst_52:
// rs1_w0_val == 4096, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00001000;  op2val:0xffffffdffffffffb
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00001000, 0xffffffdffffffffb, x1, 272, x2)

inst_53:
// rs1_w0_val == 2048, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000800;  op2val:0xfffdffffff7fffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffffff800000800, 0xfffdffffff7fffff, x1, 280, x2)

inst_54:
// rs1_w0_val == 1024, rs2_w0_val == -32769
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000400;  op2val:0xfffffeffffff7fff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x1000000000000400, 0xfffffeffffff7fff, x1, 288, x2)

inst_55:
// rs1_w0_val == 256, rs2_w0_val == -513, rs2_w1_val == 262144
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000100;  op2val:0x040000fffffdff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000100, 0x040000fffffdff, x1, 296, x2)

inst_56:
// rs1_w0_val == 32, rs2_w1_val == 4096
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000020;  op2val:0x001000fffffbff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000020, 0x001000fffffbff, x1, 304, x2)

inst_57:
// rs1_w0_val == 4, rs2_w0_val == -4194305
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000004;  op2val:0xffffff7fffbfffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xc000000000000004, 0xffffff7fffbfffff, x1, 312, x2)

inst_58:
// rs2_w1_val == 131072, rs2_w0_val == 134217728
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6aaaaaaaa;  op2val:0x02000008000000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffffff6aaaaaaaa, 0x02000008000000, x1, 320, x2)

inst_59:
// rs2_w1_val == 65536, rs1_w1_val == 1024, rs1_w0_val == -33
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffffffdf;  op2val:0x01000000000200
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x000400ffffffdf, 0x01000000000200, x1, 328, x2)

inst_60:
// rs2_w1_val == 32768, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafbffffff;  op2val:0x008000f7ffffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffffffafbffffff, 0x008000f7ffffff, x1, 336, x2)

inst_61:
// rs2_w1_val == 8192, rs1_w1_val == 16777216, rs2_w0_val == 268435456
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000080000;  op2val:0x00200010000000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x100000000080000, 0x00200010000000, x1, 344, x2)

inst_62:
// rs2_w1_val == 1024, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff10000000;  op2val:0x00040000000009
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff10000000, 0x00040000000009, x1, 352, x2)

inst_63:
// rs2_w1_val == 512, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000000;  op2val:0x000200fffffffc
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000000, 0x000200fffffffc, x1, 360, x2)

inst_64:
// rs2_w1_val == 256, rs1_w1_val == -2097153, rs1_w0_val == 67108864
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff04000000;  op2val:0x00010000000005
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xffdfffff04000000, 0x00010000000005, x1, 368, x2)

inst_65:
// rs2_w1_val == 128, rs2_w0_val == -129, rs1_w1_val == 131072
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000ffdfffff;  op2val:0x000080ffffff7f
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x020000ffdfffff, 0x000080ffffff7f, x1, 376, x2)

inst_66:
// rs2_w1_val == 64, rs1_w0_val == -131073, rs2_w0_val == 8388608
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffdffff;  op2val:0x00004000800000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x000003fffdffff, 0x00004000800000, x1, 384, x2)

inst_67:
// rs2_w1_val == 32, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000ffffffff;  op2val:0x000020ffffff7f
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x020000ffffffff, 0x000020ffffff7f, x1, 392, x2)

inst_68:
// rs2_w1_val == 8, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfdffffff;  op2val:0x000008fffffff9
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffffffdfdffffff, 0x000008fffffff9, x1, 400, x2)

inst_69:
// rs2_w1_val == 4, rs1_w0_val == -4194305, rs1_w1_val == 256
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100ffbfffff;  op2val:0x000004fffffeff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x000100ffbfffff, 0x000004fffffeff, x1, 408, x2)

inst_70:
// rs2_w1_val == 2, rs1_w0_val == -65, rs2_w0_val == -9
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffffbf;  op2val:0x000002fffffff7
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffffbf, 0x000002fffffff7, x1, 416, x2)

inst_71:
// rs2_w1_val == 1, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000400;  op2val:0x00000100000010
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x00800000000400, 0x00000100000010, x1, 424, x2)

inst_72:
// rs2_w1_val == 0, rs2_w0_val == -536870913, rs1_w0_val == -9
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafffffff7;  op2val:0x000000dfffffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffffffafffffff7, 0x000000dfffffff, x1, 432, x2)

inst_73:
// rs2_w1_val == -1, rs1_w1_val == -131073
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffffdf;  op2val:0xffffffff00000005
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffffdf, 0xffffffff00000005, x1, 440, x2)

inst_74:
// rs2_w0_val == -1431655766, rs1_w1_val == -1025
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffffffdf;  op2val:0x200000aaaaaaaa
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffffbffffffffdf, 0x200000aaaaaaaa, x1, 448, x2)

inst_75:
// rs2_w0_val == -1073741825, rs1_w1_val == -4097
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffefffff;  op2val:0x55555555bfffffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xffffefffffefffff, 0x55555555bfffffff, x1, 456, x2)

inst_76:
// rs2_w0_val == -33554433, rs1_w1_val == -2147483648
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000004000;  op2val:0xfffff7fffdffffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x8000000000004000, 0xfffff7fffdffffff, x1, 464, x2)

inst_77:
// rs2_w0_val == -16777217, rs1_w1_val == 1431655765
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500002000;  op2val:0xffeffffffeffffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x5555555500002000, 0xffeffffffeffffff, x1, 472, x2)

inst_78:
// rs2_w0_val == -2097153, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000080000;  op2val:0xfffffff6ffdfffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x4000000000080000, 0xfffffff6ffdfffff, x1, 480, x2)

inst_79:
// rs2_w0_val == -131073, rs1_w1_val == 4194304
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000005;  op2val:0xfdfffffffffdffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x40000000000005, 0xfdfffffffffdffff, x1, 488, x2)

inst_80:
// rs2_w0_val == 65536, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000080000;  op2val:0x00000000010000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x01000000080000, 0x00000000010000, x1, 496, x2)

inst_81:
// rs2_w0_val == 16384, rs1_w1_val == 2147483647
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffffdf;  op2val:0x00002000004000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffffdf, 0x00002000004000, x1, 504, x2)

inst_82:
// rs2_w0_val == 8192, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006fffffff9;  op2val:0x3fffffff00002000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x000006fffffff9, 0x3fffffff00002000, x1, 512, x2)

inst_83:
// rs2_w0_val == 4096, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffffffff8;  op2val:0xfffffbff00001000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffffdfffffffff8, 0xfffffbff00001000, x1, 520, x2)

inst_84:
// rs2_w0_val == 2048, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100fffffff7;  op2val:0xffbfffff00000800
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x000100fffffff7, 0xffbfffff00000800, x1, 528, x2)

inst_85:
// rs2_w0_val == 1024, rs1_w0_val == 2147483647
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000007fffffff;  op2val:0x00080000000400
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x4000007fffffff, 0x00080000000400, x1, 536, x2)

inst_86:
// rs2_w0_val == 256, rs1_w1_val == -8193
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000004;  op2val:0xfffeffff00000100
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000004, 0xfffeffff00000100, x1, 544, x2)

inst_87:
// rs2_w0_val == 8, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000004;  op2val:0xfffffffb00000008
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x00004000000004, 0xfffffffb00000008, x1, 552, x2)

inst_88:
// rs2_w0_val == 2, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x0010003fffffff;  op2val:0x200000000000002
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x0010003fffffff, 0x200000000000002, x1, 560, x2)

inst_89:
// rs2_w0_val == 0, rs1_w0_val == -16385
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000ffffbfff;  op2val:0x00000000000000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x080000ffffbfff, 0x00000000000000, x1, 568, x2)

inst_90:
// rs2_w0_val == -1, rs1_w1_val == -33
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffff8;  op2val:0xaaaaaaaaffffffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffff8, 0xaaaaaaaaffffffff, x1, 576, x2)

inst_91:
// rs1_w1_val == -1073741825, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffff7fff;  op2val:0x000010fffbffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xbfffffffffff7fff, 0x000010fffbffff, x1, 584, x2)

inst_92:
// rs1_w1_val == -536870913, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000004;  op2val:0xfbffffff00000008
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000004, 0xfbffffff00000008, x1, 592, x2)

inst_93:
// rs1_w1_val == -33554433, rs1_w0_val == -513
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffffdff;  op2val:0xffbfffffffffffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffffdff, 0xffbfffffffffffff, x1, 600, x2)

inst_94:
// rs1_w1_val == -65537, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000002;  op2val:0x00000500020000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000002, 0x00000500020000, x1, 608, x2)

inst_95:
// rs1_w1_val == -32769, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff02000000;  op2val:0xdfffffffffdfffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xffff7fff02000000, 0xdfffffffffdfffff, x1, 616, x2)

inst_96:
// rs1_w1_val == -16385, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffffffff;  op2val:0x000004fffffff7
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xffffbfffffffffff, 0x000004fffffff7, x1, 624, x2)

inst_97:
// rs1_w1_val == -2049, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffdfffff;  op2val:0xdffffffffffbffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffdfffff, 0xdffffffffffbffff, x1, 632, x2)

inst_98:
// rs1_w1_val == -257, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff10000000;  op2val:0x00000700000010
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffffeff10000000, 0x00000700000010, x1, 640, x2)

inst_99:
// rs1_w1_val == -129, rs1_w0_val == -16777217
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffeffffff;  op2val:0x000004ffffffef
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xffffff7ffeffffff, 0x000004ffffffef, x1, 648, x2)

inst_100:
// rs1_w1_val == -9, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000007;  op2val:0xaaaaaaaaffbfffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffffff700000007, 0xaaaaaaaaffbfffff, x1, 656, x2)

inst_101:
// rs1_w1_val == 67108864, rs1_w0_val == 536870912
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000020000000;  op2val:0x00800000000002
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x400000020000000, 0x00800000000002, x1, 664, x2)

inst_102:
// rs1_w1_val == 8388608, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000020000;  op2val:0x0020007fffffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x80000000020000, 0x0020007fffffff, x1, 672, x2)

inst_103:
// rs1_w1_val == 2097152, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000002;  op2val:0x2000000000100000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x20000000000002, 0x2000000000100000, x1, 680, x2)

inst_104:
// rs1_w1_val == 8192, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x002000fdffffff;  op2val:0xffffff7f02000000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x002000fdffffff, 0xffffff7f02000000, x1, 688, x2)

inst_105:
// rs1_w1_val == 512, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x0002003fffffff;  op2val:0x00004000000009
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x0002003fffffff, 0x00004000000009, x1, 696, x2)

inst_106:
// rs1_w1_val == 128, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080efffffff;  op2val:0xff7fffff00010000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x000080efffffff, 0xff7fffff00010000, x1, 704, x2)

inst_107:
// rs1_w1_val == 32, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020ffffbfff;  op2val:0xfffbfffffffbffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x000020ffffbfff, 0xfffbfffffffbffff, x1, 712, x2)

inst_108:
// rs1_w1_val == 16, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000008000;  op2val:0xf7ffffff02000000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x00001000008000, 0xf7ffffff02000000, x1, 720, x2)

inst_109:
// rs1_w1_val == 8, rs1_w0_val == -8193, rs2_w0_val == -8193
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffffdfff;  op2val:0xfffbffffffffdfff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x000008ffffdfff, 0xfffbffffffffdfff, x1, 728, x2)

inst_110:
// rs1_w1_val == 2, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002ffffffef;  op2val:0xfff7ffff00000040
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x000002ffffffef, 0xfff7ffff00000040, x1, 736, x2)

inst_111:
// rs1_w1_val == 1, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100800000;  op2val:0xfffffff8fffffff6
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x00000100800000, 0xfffffff8fffffff6, x1, 744, x2)

inst_112:
// rs1_w0_val == 1431655765, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000055555555;  op2val:0xfffff7ff00000100
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xc000000055555555, 0xfffff7ff00000100, x1, 752, x2)

inst_113:
// rs1_w0_val == -1073741825, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000bfffffff;  op2val:0x1000000fffffffc
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x20000000bfffffff, 0x1000000fffffffc, x1, 760, x2)

inst_114:
// rs1_w0_val == -536870913, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020dfffffff;  op2val:0xffffffdffffffffb
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x000020dfffffff, 0xffffffdffffffffb, x1, 768, x2)

inst_115:
// rs1_w0_val == -134217729, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005f7ffffff;  op2val:0x10000000ffffffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x000005f7ffffff, 0x10000000ffffffff, x1, 776, x2)

inst_116:
// rs2_w0_val == -65537, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffff7fff;  op2val:0x000100fffeffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x000400ffff7fff, 0x000100fffeffff, x1, 784, x2)

inst_117:
// rs1_w0_val == -8388609, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000ff7fffff;  op2val:0x40000000000800
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x800000ff7fffff, 0x40000000000800, x1, 792, x2)

inst_118:
// rs2_w0_val == -2049, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000001;  op2val:0x040000fffff7ff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x10000000000001, 0x040000fffff7ff, x1, 800, x2)

inst_119:
// rs1_w0_val == -524289, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8fff7ffff;  op2val:0x000020feffffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffffff8fff7ffff, 0x000020feffffff, x1, 808, x2)

inst_120:
// rs1_w0_val == -262145, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffbffff;  op2val:0xff7ffffffffffffb
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffbffff, 0xff7ffffffffffffb, x1, 816, x2)

inst_121:
// rs1_w0_val == -65537, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffeffff;  op2val:0x00000000000800
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffeffff, 0x00000000000800, x1, 824, x2)

inst_122:
// rs2_w0_val == -65, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffffffff9;  op2val:0x400000ffffffbf
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffffff9, 0x400000ffffffbf, x1, 832, x2)

inst_123:
// rs1_w0_val == -4097, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffefff;  op2val:0xf7ffffff00010000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffefff, 0xf7ffffff00010000, x1, 840, x2)

inst_124:
// rs1_w0_val == -2049, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffff7ff;  op2val:0x00004000004000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x4000000fffff7ff, 0x00004000004000, x1, 848, x2)

inst_125:
// rs2_w0_val == -3, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffdffff;  op2val:0xfdfffffffffffffd
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xffffffeffffdffff, 0xfdfffffffffffffd, x1, 856, x2)

inst_126:
// rs1_w0_val == -129, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200ffffff7f;  op2val:0xf7fffffffdffffff
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x000200ffffff7f, 0xf7fffffffdffffff, x1, 864, x2)

inst_127:
// rs2_w0_val == 1073741824, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffffff7ffff;  op2val:0xffffff7f40000000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x3ffffffffff7ffff, 0xffffff7f40000000, x1, 872, x2)

inst_128:
// rs2_w0_val == 67108864, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100fffffff8;  op2val:0xfffffffc04000000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x000100fffffff8, 0xfffffffc04000000, x1, 880, x2)

inst_129:
// rs1_w0_val == -3, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000fffffffd;  op2val:0x2000000000100000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x020000fffffffd, 0x2000000000100000, x1, 888, x2)

inst_130:
// rs2_w0_val == 16777216, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9fffeffff;  op2val:0xfffffeff01000000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffffff9fffeffff, 0xfffffeff01000000, x1, 896, x2)

inst_131:
// rs2_w0_val == 524288, 
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffff7fff;  op2val:0xfffffff900080000
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffff7fff, 0xfffffff900080000, x1, 904, x2)

inst_132:
// rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w0_val == 1431655765, rs1_w0_val == -257, rs2_w1_val == -16777217
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006fffffeff;  op2val:0xfeffffff55555555
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x000006fffffeff, 0xfeffffff55555555, x1, 912, x2)

inst_133:
// rs2_w1_val == -1073741825, rs2_w0_val == 512, rs1_w0_val == -2097153
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffffdfffff;  op2val:0xbfffffff00000200
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0x3fffffffffdfffff, 0xbfffffff00000200, x1, 920, x2)

inst_134:
// rs2_w1_val == -4194305, rs1_w0_val == 32768, rs2_w0_val == 128, rs1_w1_val == -524289
// opcode: sub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00008000;  op2val:0xffbfffff00000080
TEST_RR_OP(sub32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00008000, 0xffbfffff00000080, x1, 928, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 117*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
