
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smmwb instruction of the RISC-V RV64PZicsr extension for the smmwb covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smmwb)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 == rd != rs2, rs1==x22, rs2==x21, rd==x22, rs1_w0_val == -2147483648, rs2_h2_val == 16384, rs1_w1_val == -1073741825, rs2_h1_val == -8193
// opcode: smmwb ; op1:x22; op2:x21; dest:x22; op1val:0xbfffffff80000000;  op2val:0x074000dfff0003
TEST_RR_OP(smmwb, x22, x22, x21, 0x0000000000000000, 0xbfffffff80000000, 0x074000dfff0003, x4, 0, x11)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x18, rs2==x7, rd==x10, rs2_h3_val == -21846, rs2_h1_val == 2, rs1_w0_val == -16777217, rs1_w1_val == -9, rs2_h0_val == -129
// opcode: smmwb ; op1:x18; op2:x7; dest:x10; op1val:0xfffffff7feffffff;  op2val:0xaaaafff90002ff7f
TEST_RR_OP(smmwb, x10, x18, x7, 0x0000000000000000, 0xfffffff7feffffff, 0xaaaafff90002ff7f, x4, 8, x11)

inst_2:
// rs1 == rs2 != rd, rs1==x9, rs2==x9, rd==x13, rs2_h3_val == 21845, rs2_h0_val == -1, rs1_w0_val == -17, rs2_h1_val == 16, rs1_w1_val == 262144
// opcode: smmwb ; op1:x9; op2:x9; dest:x13; op1val:0x040000ffffffef;  op2val:0x5555fff90010ffff
TEST_RR_OP(smmwb, x13, x9, x9, 0x0000000000000000, 0x040000ffffffef, 0x5555fff90010ffff, x4, 16, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x19, rs2==x19, rd==x19, rs2_h3_val == 32767, rs2_h0_val == -32768, rs2_h2_val == 1, rs2_h1_val == -9
// opcode: smmwb ; op1:x19; op2:x19; dest:x19; op1val:0xfffffff9fffffffa;  op2val:0x7fff0001fff78000
TEST_RR_OP(smmwb, x19, x19, x19, 0x0000000000000000, 0xfffffff9fffffffa, 0x7fff0001fff78000, x4, 24, x11)

inst_4:
// rs2 == rd != rs1, rs1==x26, rs2==x0, rd==x0, rs2_h3_val == -16385, rs1_w0_val == -524289, rs1_w1_val == 8192, rs2_h2_val == 21845, rs2_h0_val == -21846, rs2_h1_val == -65
// opcode: smmwb ; op1:x26; op2:x0; dest:x0; op1val:0x002000fff7ffff;  op2val:0xbfff5555ffbfaaaa
TEST_RR_OP(smmwb, x0, x26, x0, 0x0000000000000000, 0x002000fff7ffff, 0xbfff5555ffbfaaaa, x4, 32, x11)

inst_5:
// rs1==x28, rs2==x5, rd==x14, rs2_h3_val == -8193, rs2_h0_val == -9, rs1_w1_val == 16, rs1_w0_val == 0
// opcode: smmwb ; op1:x28; op2:x5; dest:x14; op1val:0x00001000000000;  op2val:0xdfff5555ffbffff7
TEST_RR_OP(smmwb, x14, x28, x5, 0x0000000000000000, 0x00001000000000, 0xdfff5555ffbffff7, x4, 40, x11)

inst_6:
// rs1==x30, rs2==x13, rd==x28, rs2_h3_val == -4097, rs1_w0_val == 4, rs1_w1_val == 128, rs2_h2_val == -1025, rs2_h0_val == 128
// opcode: smmwb ; op1:x30; op2:x13; dest:x28; op1val:0x00008000000004;  op2val:0xeffffbff00020080
TEST_RR_OP(smmwb, x28, x30, x13, 0x0000000000000000, 0x00008000000004, 0xeffffbff00020080, x4, 48, x11)

inst_7:
// rs1==x7, rs2==x27, rd==x16, rs2_h3_val == -2049, rs2_h0_val == 16384, rs2_h2_val == -8193, rs1_w1_val == -129, rs1_w0_val == 2
// opcode: smmwb ; op1:x7; op2:x27; dest:x16; op1val:0xffffff7f00000002;  op2val:0xf7ffdffffff94000
TEST_RR_OP(smmwb, x16, x7, x27, 0x0000000000000000, 0xffffff7f00000002, 0xf7ffdffffff94000, x4, 56, x11)

inst_8:
// rs1==x25, rs2==x31, rd==x1, rs2_h3_val == -1025, rs2_h2_val == -1, rs1_w0_val == -1073741825, rs2_h0_val == 21845, rs1_w1_val == 8
// opcode: smmwb ; op1:x25; op2:x31; dest:x1; op1val:0x000008bfffffff;  op2val:0xfbfffffffff95555
TEST_RR_OP(smmwb, x1, x25, x31, 0x0000000000000000, 0x000008bfffffff, 0xfbfffffffff95555, x4, 64, x11)

inst_9:
// rs1==x27, rs2==x20, rd==x15, rs2_h3_val == -513, rs2_h2_val == 32, rs2_h1_val == -129, rs1_w1_val == 32768, rs1_w0_val == 128
// opcode: smmwb ; op1:x27; op2:x20; dest:x15; op1val:0x00800000000080;  op2val:0xfdff0020ff7f5555
TEST_RR_OP(smmwb, x15, x27, x20, 0x0000000000000000, 0x00800000000080, 0xfdff0020ff7f5555, x4, 72, x11)

inst_10:
// rs1==x6, rs2==x17, rd==x24, rs2_h3_val == -257, rs1_w0_val == -16385, rs2_h0_val == 16, rs1_w1_val == -16385, rs2_h1_val == -16385
// opcode: smmwb ; op1:x6; op2:x17; dest:x24; op1val:0xffffbfffffffbfff;  op2val:0xfeff4000bfff0010
TEST_RR_OP(smmwb, x24, x6, x17, 0x0000000000000000, 0xffffbfffffffbfff, 0xfeff4000bfff0010, x4, 80, x11)

inst_11:
// rs1==x13, rs2==x10, rd==x25, rs2_h3_val == -129, rs1_w0_val == -536870913, rs2_h1_val == -257, rs1_w1_val == 64, rs2_h0_val == 1
// opcode: smmwb ; op1:x13; op2:x10; dest:x25; op1val:0x000040dfffffff;  op2val:0xff7f0005feff0001
TEST_RR_OP(smmwb, x25, x13, x10, 0x0000000000000000, 0x000040dfffffff, 0xff7f0005feff0001, x4, 88, x11)

inst_12:
// rs1==x3, rs2==x8, rd==x9, rs2_h3_val == -65, rs2_h2_val == 8
// opcode: smmwb ; op1:x3; op2:x8; dest:x9; op1val:0xffffbfff00000006;  op2val:0xffbf000800090001
TEST_RR_OP(smmwb, x9, x3, x8, 0x0000000000000000, 0xffffbfff00000006, 0xffbf000800090001, x4, 96, x11)

inst_13:
// rs1==x16, rs2==x25, rd==x3, rs2_h3_val == -33, rs1_w0_val == -4097, rs1_w1_val == 4194304
// opcode: smmwb ; op1:x16; op2:x25; dest:x3; op1val:0x400000ffffefff;  op2val:0xffdf0005c0000006
TEST_RR_OP(smmwb, x3, x16, x25, 0x0000000000000000, 0x400000ffffefff, 0xffdf0005c0000006, x4, 104, x11)

inst_14:
// rs1==x8, rs2==x6, rd==x2, rs2_h3_val == -17, rs1_w1_val == 16384, rs2_h2_val == -513, rs2_h0_val == 512
// opcode: smmwb ; op1:x8; op2:x6; dest:x2; op1val:0x00400000000003;  op2val:0xffeffdff00050200
TEST_RR_OP(smmwb, x2, x8, x6, 0x0000000000000000, 0x00400000000003, 0xffeffdff00050200, x4, 112, x11)

inst_15:
// rs1==x1, rs2==x23, rd==x29, rs2_h3_val == -9, rs2_h1_val == 128, rs1_w0_val == 256
// opcode: smmwb ; op1:x1; op2:x23; dest:x29; op1val:0x00000900000100;  op2val:0xfff7fffa0080fff8
TEST_RR_OP(smmwb, x29, x1, x23, 0x0000000000000000, 0x00000900000100, 0xfff7fffa0080fff8, x4, 120, x13)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_16:
// rs1==x12, rs2==x1, rd==x18, rs2_h3_val == -5, rs2_h1_val == 16384, rs1_w1_val == 268435456
// opcode: smmwb ; op1:x12; op2:x1; dest:x18; op1val:0x100000003fffffff;  op2val:0xfffbdfff40004000
TEST_RR_OP(smmwb, x18, x12, x1, 0x0000000000000000, 0x100000003fffffff, 0xfffbdfff40004000, x9, 0, x13)

inst_17:
// rs1==x23, rs2==x3, rd==x27, rs2_h3_val == -3, rs1_w1_val == -131073, rs2_h0_val == 4, rs2_h2_val == -3
// opcode: smmwb ; op1:x23; op2:x3; dest:x27; op1val:0xfffdffffffffffef;  op2val:0xfffdfffd40000004
TEST_RR_OP(smmwb, x27, x23, x3, 0x0000000000000000, 0xfffdffffffffffef, 0xfffdfffd40000004, x9, 8, x13)

inst_18:
// rs1==x20, rs2==x2, rd==x4, rs2_h3_val == -2, rs2_h2_val == -33, rs2_h1_val == 8
// opcode: smmwb ; op1:x20; op2:x2; dest:x4; op1val:0x04000000000000;  op2val:0xfffeffdf00084000
TEST_RR_OP(smmwb, x4, x20, x2, 0x0000000000000000, 0x04000000000000, 0xfffeffdf00084000, x9, 16, x13)

inst_19:
// rs1==x2, rs2==x15, rd==x8, rs2_h3_val == -32768, rs1_w1_val == -33554433, rs2_h2_val == 4, rs2_h0_val == -513
// opcode: smmwb ; op1:x2; op2:x15; dest:x8; op1val:0xfdffffff00000009;  op2val:0x800000040006fdff
TEST_RR_OP(smmwb, x8, x2, x15, 0x0000000000000000, 0xfdffffff00000009, 0x800000040006fdff, x9, 24, x13)

inst_20:
// rs1==x17, rs2==x29, rd==x21, rs2_h3_val == 16384, rs2_h0_val == 64, rs1_w1_val == 2, rs1_w0_val == 16777216
// opcode: smmwb ; op1:x17; op2:x29; dest:x21; op1val:0x00000201000000;  op2val:0x4000fff93fff0040
TEST_RR_OP(smmwb, x21, x17, x29, 0x0000000000000000, 0x00000201000000, 0x4000fff93fff0040, x9, 32, x13)

inst_21:
// rs1==x11, rs2==x28, rd==x23, rs2_h3_val == 8192, rs2_h2_val == 1024
// opcode: smmwb ; op1:x11; op2:x28; dest:x23; op1val:0x000008fff7ffff;  op2val:0x200004000002c000
TEST_RR_OP(smmwb, x23, x11, x28, 0x0000000000000000, 0x000008fff7ffff, 0x200004000002c000, x9, 40, x13)

inst_22:
// rs1==x5, rs2==x22, rd==x17, rs2_h3_val == 4096, rs2_h0_val == -65, rs2_h1_val == 21845, rs1_w0_val == -1048577
// opcode: smmwb ; op1:x5; op2:x22; dest:x17; op1val:0x3fffffffffefffff;  op2val:0x100004005555ffbf
TEST_RR_OP(smmwb, x17, x5, x22, 0x0000000000000000, 0x3fffffffffefffff, 0x100004005555ffbf, x9, 48, x13)

inst_23:
// rs1==x15, rs2==x4, rd==x26, rs2_h3_val == 2048, rs2_h0_val == -4097, rs2_h1_val == 0, rs1_w1_val == -268435457
// opcode: smmwb ; op1:x15; op2:x4; dest:x26; op1val:0xefffffff00000080;  op2val:0x80000010000efff
TEST_RR_OP(smmwb, x26, x15, x4, 0x0000000000000000, 0xefffffff00000080, 0x80000010000efff, x9, 56, x13)

inst_24:
// rs1==x24, rs2==x30, rd==x31, rs2_h3_val == 1024, rs1_w0_val == 2097152, rs2_h0_val == 256, rs2_h2_val == -2
// opcode: smmwb ; op1:x24; op2:x30; dest:x31; op1val:0xefffffff00200000;  op2val:0x400fffebfff0100
TEST_RR_OP(smmwb, x31, x24, x30, 0x0000000000000000, 0xefffffff00200000, 0x400fffebfff0100, x9, 64, x13)

inst_25:
// rs1==x31, rs2==x16, rd==x6, rs2_h3_val == 512, rs2_h1_val == -1025, rs2_h0_val == 8192, rs1_w0_val == 65536, rs1_w1_val == 2048
// opcode: smmwb ; op1:x31; op2:x16; dest:x6; op1val:0x00080000010000;  op2val:0x200fffefbff2000
TEST_RR_OP(smmwb, x6, x31, x16, 0x0000000000000000, 0x00080000010000, 0x200fffefbff2000, x9, 72, x13)

inst_26:
// rs1==x4, rs2==x14, rd==x12, rs2_h3_val == 256, rs1_w0_val == 268435456, rs1_w1_val == 256, rs2_h0_val == -257
// opcode: smmwb ; op1:x4; op2:x14; dest:x12; op1val:0x00010010000000;  op2val:0x100fdfffff9feff
TEST_RR_OP(smmwb, x12, x4, x14, 0x0000000000000000, 0x00010010000000, 0x100fdfffff9feff, x9, 80, x13)

inst_27:
// rs1==x29, rs2==x11, rd==x20, rs2_h3_val == 128, rs1_w1_val == -1431655766
// opcode: smmwb ; op1:x29; op2:x11; dest:x20; op1val:0xaaaaaaaa00000004;  op2val:0x80fffeffbf3fff
TEST_RR_OP(smmwb, x20, x29, x11, 0x0000000000000000, 0xaaaaaaaa00000004, 0x80fffeffbf3fff, x9, 88, x13)

inst_28:
// rs1==x14, rs2==x26, rd==x11, rs2_h3_val == 64, rs2_h0_val == 32, rs2_h1_val == -4097
// opcode: smmwb ; op1:x14; op2:x26; dest:x11; op1val:0x00200010000000;  op2val:0x400400efff0020
TEST_RR_OP(smmwb, x11, x14, x26, 0x0000000000000000, 0x00200010000000, 0x400400efff0020, x9, 96, x13)

inst_29:
// rs1==x10, rs2==x24, rd==x7, rs2_h3_val == 32, rs2_h2_val == -9, rs1_w0_val == 131072, rs1_w1_val == -134217729
// opcode: smmwb ; op1:x10; op2:x24; dest:x7; op1val:0xf7ffffff00020000;  op2val:0x20fff7efff0007
TEST_RR_OP(smmwb, x7, x10, x24, 0x0000000000000000, 0xf7ffffff00020000, 0x20fff7efff0007, x9, 104, x13)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x21, rs2==x18, rd==x5, rs2_h3_val == 16, rs2_h0_val == 0, rs1_w0_val == 33554432, rs2_h2_val == -32768
// opcode: smmwb ; op1:x21; op2:x18; dest:x5; op1val:0x00008002000000;  op2val:0x108000dfff0000
TEST_RR_OP(smmwb, x5, x21, x18, 0x0000000000000000, 0x00008002000000, 0x108000dfff0000, x1, 0, x2)

inst_31:
// rs1==x0, rs2==x12, rd==x30, rs2_h3_val == 8, 
// opcode: smmwb ; op1:x0; op2:x12; dest:x30; op1val:0x0000083fffffff;  op2val:0x08ffdffffc8000
TEST_RR_OP(smmwb, x30, x0, x12, 0x0000000000000000, 0x0000083fffffff, 0x08ffdffffc8000, x1, 8, x2)

inst_32:
// rs2_h3_val == 4, rs2_h1_val == 256, rs2_h2_val == 2
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffffffa;  op2val:0x04000201003fff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x004000fffffffa, 0x04000201003fff, x1, 16, x2)

inst_33:
// rs2_h3_val == 2, rs2_h1_val == 4096
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000004;  op2val:0x0200091000ffff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000004, 0x0200091000ffff, x1, 24, x2)

inst_34:
// rs2_h3_val == 1, rs1_w1_val == 65536, rs2_h0_val == -17, rs2_h1_val == -17
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffefffff;  op2val:0x01fff9ffefffef
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x010000ffefffff, 0x01fff9ffefffef, x1, 32, x2)

inst_35:
// rs2_h3_val == 0, rs1_w1_val == -65537, rs1_w0_val == 8, rs2_h1_val == -2049
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000008;  op2val:0x00c000f7ff0010
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000008, 0x00c000f7ff0010, x1, 40, x2)

inst_36:
// rs2_h3_val == -1, rs1_w1_val == 33554432
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x200000080000000;  op2val:0xfffffffefffafff9
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x200000080000000, 0xfffffffefffafff9, x1, 48, x2)

inst_37:
// rs2_h2_val == -21846, rs1_w1_val == -67108865, rs2_h0_val == 2048, rs1_w0_val == -32769
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffff7fff;  op2val:0xaaaaaaaa00100800
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfbffffffffff7fff, 0xaaaaaaaa00100800, x1, 56, x2)

inst_38:
// rs2_h2_val == 32767, rs1_w0_val == -8193
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffffdfff;  op2val:0xdfff7ffffff80020
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x000008ffffdfff, 0xdfff7ffffff80020, x1, 64, x2)

inst_39:
// rs2_h2_val == -16385, rs1_w0_val == -268435457, rs1_w1_val == -16777217, rs2_h1_val == -1
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffefffffff;  op2val:0xffefbfffffffffbf
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfeffffffefffffff, 0xffefbfffffffffbf, x1, 72, x2)

inst_40:
// rs2_h2_val == -4097, rs2_h1_val == -21846, rs1_w0_val == 1431655765
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x00008055555555;  op2val:0xfbffefffaaaafdff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x00008055555555, 0xfbffefffaaaafdff, x1, 80, x2)

inst_41:
// rs2_h2_val == -2049, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900000004;  op2val:0xffdff7fffff6fffc
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfffffff900000004, 0xffdff7fffff6fffc, x1, 88, x2)

inst_42:
// rs1_w0_val == 1048576, rs2_h1_val == -5
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00100000;  op2val:0xc000fbfffffbfff8
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00100000, 0xc000fbfffffbfff8, x1, 96, x2)

inst_43:
// rs1_w0_val == 524288, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00080000;  op2val:0x08040000065555
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfffffffc00080000, 0x08040000065555, x1, 104, x2)

inst_44:
// rs1_w0_val == 262144, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x01000000040000;  op2val:0x080007fffa0005
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x01000000040000, 0x080007fffa0005, x1, 112, x2)

inst_45:
// rs1_w0_val == 32768, rs2_h0_val == -16385
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00008000;  op2val:0xfffb00090008bfff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfffffffa00008000, 0xfffb00090008bfff, x1, 120, x2)

inst_46:
// rs1_w0_val == 16384, rs2_h1_val == 1, rs1_w1_val == 536870912
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000004000;  op2val:0xbfff000200010007
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x2000000000004000, 0xbfff000200010007, x1, 128, x2)

inst_47:
// rs1_w0_val == 8192, rs1_w1_val == -1, rs2_h1_val == -33
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00002000;  op2val:0x06fff9ffdffff7
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xffffffff00002000, 0x06fff9ffdffff7, x1, 136, x2)

inst_48:
// rs1_w0_val == 4096, rs2_h0_val == 1024, rs1_w1_val == 1048576
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x10000000001000;  op2val:0x20000400aaaa0400
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x10000000001000, 0x20000400aaaa0400, x1, 144, x2)

inst_49:
// rs1_w0_val == 2048, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000800;  op2val:0xfff70008fff70400
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x00000800000800, 0xfff70008fff70400, x1, 152, x2)

inst_50:
// rs1_w0_val == 1024, rs2_h1_val == -3, rs1_w1_val == 1
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000400;  op2val:0xfffb0005fffd0100
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x00000100000400, 0xfffb0005fffd0100, x1, 160, x2)

inst_51:
// rs1_w0_val == 512, rs1_w1_val == 0, rs2_h0_val == -5
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000200;  op2val:0xfffa0004fefffffb
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x00000000000200, 0xfffa0004fefffffb, x1, 168, x2)

inst_52:
// rs1_w0_val == 64, rs2_h0_val == -8193
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000040;  op2val:0x2000fff91000dfff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x00000600000040, 0x2000fff91000dfff, x1, 176, x2)

inst_53:
// rs1_w0_val == 32, rs1_w1_val == 67108864
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000020;  op2val:0x0100013fffffbf
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x400000000000020, 0x0100013fffffbf, x1, 184, x2)

inst_54:
// rs1_w0_val == 16, rs2_h1_val == 2048
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000010;  op2val:0xbfffffff0800bfff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x01000000000010, 0xbfffffff0800bfff, x1, 192, x2)

inst_55:
// rs1_w0_val == 1, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x00000500000001;  op2val:0x40007fff3fff0009
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x00000500000001, 0x40007fff3fff0009, x1, 200, x2)

inst_56:
// rs1_w0_val == -1, rs2_h0_val == -2049, rs1_w1_val == -17, rs2_h2_val == -257
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffffffff;  op2val:0xc000feff0006f7ff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xffffffefffffffff, 0xc000feff0006f7ff, x1, 208, x2)

inst_57:
// rs2_h2_val == -129, rs2_h0_val == -33, rs1_w0_val == 4194304
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00400000;  op2val:0x07ff7f0005ffdf
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xffffffef00400000, 0x07ff7f0005ffdf, x1, 216, x2)

inst_58:
// rs2_h2_val == -65, rs2_h0_val == -2
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000004;  op2val:0xfff6ffbf0009fffe
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000004, 0xfff6ffbf0009fffe, x1, 224, x2)

inst_59:
// rs2_h2_val == -17, rs2_h1_val == -2, rs1_w1_val == -1048577
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00200000;  op2val:0xfff6ffeffffe5555
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xffefffff00200000, 0xfff6ffeffffe5555, x1, 232, x2)

inst_60:
// rs2_h2_val == -5, rs1_w0_val == -9, rs1_w1_val == -524289
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffffff7;  op2val:0xfbfffffbfffeff7f
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffffff7, 0xfbfffffbfffeff7f, x1, 240, x2)

inst_61:
// rs2_h2_val == 8192, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x40000000002000;  op2val:0x10002000fff8fff6
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x40000000002000, 0x10002000fff8fff6, x1, 248, x2)

inst_62:
// rs2_h2_val == 4096, rs1_w1_val == -32769
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000040;  op2val:0xffbf1000fff78000
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000040, 0xffbf1000fff78000, x1, 256, x2)

inst_63:
// rs2_h2_val == 2048, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00100000;  op2val:0xfffa0800fffdfff8
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xffffff7f00100000, 0xfffa0800fffdfff8, x1, 264, x2)

inst_64:
// rs2_h2_val == 512, rs1_w0_val == -1025
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffffbff;  op2val:0xefff02000010fff8
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x000000fffffbff, 0xefff02000010fff8, x1, 272, x2)

inst_65:
// rs2_h2_val == 256, rs1_w0_val == -131073, rs1_w1_val == 1431655765, rs2_h1_val == 32
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fffdffff;  op2val:0x5555010000200001
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x55555555fffdffff, 0x5555010000200001, x1, 280, x2)

inst_66:
// rs2_h2_val == 128, rs1_w1_val == 8388608
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x800000fff7ffff;  op2val:0xfbff0080fbfffffc
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x800000fff7ffff, 0xfbff0080fbfffffc, x1, 288, x2)

inst_67:
// rs2_h2_val == 64, rs1_w0_val == 134217728
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x00080008000000;  op2val:0xf7ff0040fffd5555
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x00080008000000, 0xf7ff0040fffd5555, x1, 296, x2)

inst_68:
// rs2_h2_val == 16, rs2_h0_val == 4096
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffefffff;  op2val:0xfff9001000101000
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xefffffffffefffff, 0xfff9001000101000, x1, 304, x2)

inst_69:
// rs2_h2_val == 0, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x55555555ffffdfff;  op2val:0xefff0000f7fff7ff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x55555555ffffdfff, 0xefff0000f7fff7ff, x1, 312, x2)

inst_70:
// rs2_h1_val == 32767, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffefffff;  op2val:0x037fff7fff0010
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xffffbfffffefffff, 0x037fff7fff0010, x1, 320, x2)

inst_71:
// rs2_h1_val == -513, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffdfffffff;  op2val:0x3fffffdffdfffffc
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfbffffffdfffffff, 0x3fffffdffdfffffc, x1, 328, x2)

inst_72:
// rs2_h0_val == 8, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefbfffffff;  op2val:0xfffeff7ffeff0008
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xffffffefbfffffff, 0xfffeff7ffeff0008, x1, 336, x2)

inst_73:
// rs2_h0_val == 2, rs1_w1_val == 524288
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x0800003fffffff;  op2val:0xfbff000000070002
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x0800003fffffff, 0xfbff000000070002, x1, 344, x2)

inst_74:
// rs1_w1_val == 2147483647, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffffbff;  op2val:0x09c0001000bfff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffffbff, 0x09c0001000bfff, x1, 352, x2)

inst_75:
// rs1_w1_val == -536870913, rs1_w0_val == -65
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffffbf;  op2val:0xfffc200000200800
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffffbf, 0xfffc200000200800, x1, 360, x2)

inst_76:
// rs1_w1_val == -8388609, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00008000;  op2val:0xfeff0006fbfffff8
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xff7fffff00008000, 0xfeff0006fbfffff8, x1, 368, x2)

inst_77:
// rs1_w1_val == -4194305, rs1_w0_val == -2097153
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffdfffff;  op2val:0xfffffefffff7fdff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xffbfffffffdfffff, 0xfffffefffff7fdff, x1, 376, x2)

inst_78:
// rs1_w1_val == -2097153, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffff7ffff;  op2val:0xffdfffff0080aaaa
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xffdffffffff7ffff, 0xffdfffff0080aaaa, x1, 384, x2)

inst_79:
// rs1_w1_val == -262145, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00040000;  op2val:0x5555fff9fdff4000
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfffbffff00040000, 0x5555fff9fdff4000, x1, 392, x2)

inst_80:
// rs1_w1_val == -8193, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffffffff8;  op2val:0xffdfffbfffdfdfff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xffffdffffffffff8, 0xffdfffbfffdfdfff, x1, 400, x2)

inst_81:
// rs1_w1_val == -4097, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffffffff;  op2val:0xfff70000dffff7ff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xffffefffffffffff, 0xfff70000dffff7ff, x1, 408, x2)

inst_82:
// rs1_w1_val == -2049, rs1_w0_val == -257
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffffeff;  op2val:0xc000fff93ffffffb
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffffeff, 0xc000fff93ffffffb, x1, 416, x2)

inst_83:
// rs1_w1_val == -1025, rs1_w0_val == -134217729
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfff7ffffff;  op2val:0x09000355550006
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfffffbfff7ffffff, 0x09000355550006, x1, 424, x2)

inst_84:
// rs1_w1_val == -513, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffffffff8;  op2val:0xfff7200000801000
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfffffdfffffffff8, 0xfff7200000801000, x1, 432, x2)

inst_85:
// rs1_w1_val == -257, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffffffbf;  op2val:0x090080ffdf0100
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfffffeffffffffbf, 0x090080ffdf0100, x1, 440, x2)

inst_86:
// rs1_w1_val == -65, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf55555555;  op2val:0x05ffeffffa0008
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xffffffbf55555555, 0x05ffeffffa0008, x1, 448, x2)

inst_87:
// rs1_w1_val == -33, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000080;  op2val:0xfff9fff67fff0001
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000080, 0xfff9fff67fff0001, x1, 456, x2)

inst_88:
// rs1_w1_val == -5, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000007;  op2val:0xfffafffa5555fffe
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000007, 0xfffafffa5555fffe, x1, 464, x2)

inst_89:
// rs1_w1_val == -3, rs1_w0_val == -5
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffffffb;  op2val:0x05fdfffbfffff6
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffffffb, 0x05fdfffbfffff6, x1, 472, x2)

inst_90:
// rs1_w1_val == -2, rs1_w0_val == -4194305
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffbfffff;  op2val:0x3fffdfffc0004000
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfffffffeffbfffff, 0x3fffdfffc0004000, x1, 480, x2)

inst_91:
// rs1_w1_val == -2147483648, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffefff;  op2val:0xfeff4000effffff7
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x80000000ffffefff, 0xfeff4000effffff7, x1, 488, x2)

inst_92:
// rs1_w1_val == 1073741824, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000100000;  op2val:0xc000000200070004
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x4000000000100000, 0xc000000200070004, x1, 496, x2)

inst_93:
// rs1_w1_val == 134217728, rs1_w0_val == -67108865
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fbffffff;  op2val:0xc00080000020bfff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x8000000fbffffff, 0xc00080000020bfff, x1, 504, x2)

inst_94:
// rs1_w1_val == 16777216, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000004;  op2val:0xfff70006ff7f0040
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x100000000000004, 0xfff70006ff7f0040, x1, 512, x2)

inst_95:
// rs1_w1_val == 2097152, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x200000c0000000;  op2val:0xffff00405555efff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x200000c0000000, 0xffff00405555efff, x1, 520, x2)

inst_96:
// rs1_w1_val == 131072, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000200;  op2val:0x40efff1000fff9
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x02000000000200, 0x40efff1000fff9, x1, 528, x2)

inst_97:
// rs1_w1_val == 4096, rs1_w0_val == -65537
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffeffff;  op2val:0xfffc0008ffdf0100
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x001000fffeffff, 0xfffc0008ffdf0100, x1, 536, x2)

inst_98:
// rs1_w1_val == 1024, rs2_h0_val == -3
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000800;  op2val:0x02fffb3ffffffd
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x00040000000800, 0x02fffb3ffffffd, x1, 544, x2)

inst_99:
// rs1_w1_val == 512, rs1_w0_val == 67108864
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x00020004000000;  op2val:0x20ffff01000400
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x00020004000000, 0x20ffff01000400, x1, 552, x2)

inst_100:
// rs1_w1_val == 32, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x000020feffffff;  op2val:0xff7f00050001f7ff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x000020feffffff, 0xff7f00050001f7ff, x1, 560, x2)

inst_101:
// rs1_w1_val == 4, rs2_h0_val == -1025
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x00000408000000;  op2val:0xffdf20000009fbff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x00000408000000, 0xffdf20000009fbff, x1, 568, x2)

inst_102:
// rs1_w0_val == -1431655766, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x8000000aaaaaaaa;  op2val:0x09fdfffefffffe
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x8000000aaaaaaaa, 0x09fdfffefffffe, x1, 576, x2)

inst_103:
// rs1_w0_val == 2147483647, rs2_h1_val == -32768
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x0002007fffffff;  op2val:0x02fff88000fff6
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x0002007fffffff, 0x02fff88000fff6, x1, 584, x2)

inst_104:
// rs2_h1_val == 8192, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x20000000008000;  op2val:0xfffbffdf2000bfff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x20000000008000, 0xfffbffdf2000bfff, x1, 592, x2)

inst_105:
// rs1_w0_val == -33554433, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffdffffff;  op2val:0x800002000030000
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xf7fffffffdffffff, 0x800002000030000, x1, 600, x2)

inst_106:
// rs1_w0_val == -8388609, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x000001ff7fffff;  op2val:0xdfff0001ffbf0080
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x000001ff7fffff, 0xdfff0001ffbf0080, x1, 608, x2)

inst_107:
// rs2_h1_val == 1024, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000800;  op2val:0x4000bfff0400aaaa
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x00000400000800, 0x4000bfff0400aaaa, x1, 616, x2)

inst_108:
// rs2_h1_val == 512, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00001000;  op2val:0xfffa000102004000
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00001000, 0xfffa000102004000, x1, 624, x2)

inst_109:
// rs2_h1_val == 64, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00100000;  op2val:0x2007fff0040fffd
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfffbffff00100000, 0x2007fff0040fffd, x1, 632, x2)

inst_110:
// rs1_w0_val == -262145, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffbffff;  op2val:0x000040ffbfffff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x008000fffbffff, 0x000040ffbfffff, x1, 640, x2)

inst_111:
// rs2_h1_val == 4, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00200000;  op2val:0xf7ff000300045555
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfffffffd00200000, 0xf7ff000300045555, x1, 648, x2)

inst_112:
// rs1_w0_val == -2049, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffff7ff;  op2val:0x05f7ff00002000
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffff7ff, 0x05f7ff00002000, x1, 656, x2)

inst_113:
// rs1_w0_val == -513, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffdff;  op2val:0x04020080003fff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffdff, 0x04020080003fff, x1, 664, x2)

inst_114:
// rs2_h0_val == 32767, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffff7fffff;  op2val:0xfffa3fffffbf7fff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x3fffffffff7fffff, 0xfffa3fffffbf7fff, x1, 672, x2)

inst_115:
// rs1_w0_val == -33, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffffffdf;  op2val:0x0004008000ff7f
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfdffffffffffffdf, 0x0004008000ff7f, x1, 680, x2)

inst_116:
// rs1_w0_val == -3, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffffffd;  op2val:0x05fdffc0000020
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffffffd, 0x05fdffc0000020, x1, 688, x2)

inst_117:
// rs1_w0_val == -2, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffffe;  op2val:0x40000900041000
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffffe, 0x40000900041000, x1, 696, x2)

inst_118:
// rs1_w0_val == 536870912, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x00000320000000;  op2val:0x00ffdfff7fffff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x00000320000000, 0x00ffdfff7fffff, x1, 704, x2)

inst_119:
// rs1_w0_val == 1073741824, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff40000000;  op2val:0x7fff80002000dfff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xbfffffff40000000, 0x7fff80002000dfff, x1, 712, x2)

inst_120:
// rs1_w0_val == 8388608, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00800000;  op2val:0xefff0000dfff0004
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0xfffffffd00800000, 0xefff0000dfff0004, x1, 720, x2)

inst_121:
// rs1_w0_val == -129, 
// opcode: smmwb ; op1:x30; op2:x29; dest:x31; op1val:0x400000ffffff7f;  op2val:0xfff70020dfff7fff
TEST_RR_OP(smmwb, x31, x30, x29, 0x0000000000000000, 0x400000ffffff7f, 0xfff70020dfff7fff, x1, 728, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x9_0:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 92*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
