
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smal instruction of the RISC-V RV64PZicsr extension for the smal covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smal)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x26, rs2==x22, rd==x26, rs1_val == (-2**63), rs2_h0_val == 16384, rs2_h1_val == 32767
// opcode: smal ; op1:x26; op2:x22; dest:x26; op1val:0x8000000000000000; op2val:0xfffcfffa7fff4000;
TEST_P64_PPN_OP(smal, x26, $rd_hi, x26, $rs1_hi, x22, 0x0000000000000000, $correctval_hi, 0x8000000000000000, $rs1_val_hi, 0xfffcfffa7fff4000, x1, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x20, rs2==x19, rd==x30, rs2_h3_val == -21846, rs2_h2_val == -21846, rs2_h0_val == -32768
// opcode: smal ; op1:x20; op2:x19; dest:x30; op1val:0xffffffffffff7fff; op2val:0xaaaaaaaa00098000;
TEST_P64_PPN_OP(smal, x30, $rd_hi, x20, $rs1_hi, x19, 0x0000000000000000, $correctval_hi, 0xffffffffffff7fff, $rs1_val_hi, 0xaaaaaaaa00098000, x1, 16, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x10, rs2==x10, rd==x4, rs2_h3_val == 21845, rs2_h1_val == -3, rs2_h2_val == -8193
// opcode: smal ; op1:x10; op2:x10; dest:x4; op1val:0xfffffffeffffffff; op2val:0x5555dffffffdfff8;
TEST_P64_PPN_OP(smal, x4, $rd_hi, x10, $rs1_hi, x10, 0x0000000000000000, $correctval_hi, 0xfffffffeffffffff, $rs1_val_hi, 0x5555dffffffdfff8, x1, 32, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x14, rs2==x14, rd==x14, rs2_h3_val == 32767, rs2_h2_val == -16385, rs2_h1_val == -5, rs2_h0_val == 64
// opcode: smal ; op1:x14; op2:x14; dest:x14; op1val:0x0002000000000000; op2val:0x7fffbffffffb0040;
TEST_P64_PPN_OP(smal, x14, $rd_hi, x14, $rs1_hi, x14, 0x0000000000000000, $correctval_hi, 0x0002000000000000, $rs1_val_hi, 0x7fffbffffffb0040, x1, 48, x3)

inst_4:
// rs2 == rd != rs1, rs1==x2, rs2==x24, rd==x24, rs2_h3_val == -16385, 
// opcode: smal ; op1:x2; op2:x24; dest:x24; op1val:0x0000000000000020; op2val:0xbffffff8fffafffc;
TEST_P64_PPN_OP(smal, x24, $rd_hi, x2, $rs1_hi, x24, 0x0000000000000000, $correctval_hi, 0x0000000000000020, $rs1_val_hi, 0xbffffff8fffafffc, x1, 64, x3)

inst_5:
// rs1==x8, rs2==x18, rd==x20, rs2_h3_val == -8193, rs2_h2_val == -9, rs2_h1_val == 2048
// opcode: smal ; op1:x8; op2:x18; dest:x20; op1val:0xffffffffffffffbf; op2val:0xdffffff708000007;
TEST_P64_PPN_OP(smal, x20, $rd_hi, x8, $rs1_hi, x18, 0x0000000000000000, $correctval_hi, 0xffffffffffffffbf, $rs1_val_hi, 0xdffffff708000007, x1, 80, x3)

inst_6:
// rs1==x24, rs2==x29, rd==x6, rs2_h3_val == -4097, rs2_h0_val == -2049, rs2_h2_val == -3
// opcode: smal ; op1:x24; op2:x29; dest:x6; op1val:0x0000020000000000; op2val:0xeffffffdfffcf7ff;
TEST_P64_PPN_OP(smal, x6, $rd_hi, x24, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0000020000000000, $rs1_val_hi, 0xeffffffdfffcf7ff, x1, 96, x3)

inst_7:
// rs1==x4, rs2==x31, rd==x18, rs2_h3_val == -2049, rs2_h2_val == 2
// opcode: smal ; op1:x4; op2:x31; dest:x18; op1val:0xffffbfffffffffff; op2val:0xf7ff00023fffc000;
TEST_P64_PPN_OP(smal, x18, $rd_hi, x4, $rs1_hi, x31, 0x0000000000000000, $correctval_hi, 0xffffbfffffffffff, $rs1_val_hi, 0xf7ff00023fffc000, x1, 112, x3)

inst_8:
// rs1==x16, rs2==x25, rd==x2, rs2_h3_val == -1025, 
// opcode: smal ; op1:x16; op2:x25; dest:x2; op1val:0xfffdffffffffffff; op2val:0xfbfffff93fffc000;
TEST_P64_PPN_OP(smal, x2, $rd_hi, x16, $rs1_hi, x25, 0x0000000000000000, $correctval_hi, 0xfffdffffffffffff, $rs1_val_hi, 0xfbfffff93fffc000, x1, 128, x3)

inst_9:
// rs1==x22, rs2==x2, rd==x16, rs2_h3_val == -513, rs2_h2_val == 4096, rs2_h1_val == 128, rs2_h0_val == -1025
// opcode: smal ; op1:x22; op2:x2; dest:x16; op1val:0x0000000000000010; op2val:0xfdff10000080fbff;
TEST_P64_PPN_OP(smal, x16, $rd_hi, x22, $rs1_hi, x2, 0x0000000000000000, $correctval_hi, 0x0000000000000010, $rs1_val_hi, 0xfdff10000080fbff, x1, 144, x3)

inst_10:
// rs1==x18, rs2==x17, rd==x28, rs2_h3_val == -257, 
// opcode: smal ; op1:x18; op2:x17; dest:x28; op1val:0xffdfffffffffffff; op2val:0xfefffff60005fff6;
TEST_P64_PPN_OP(smal, x28, $rd_hi, x18, $rs1_hi, x17, 0x0000000000000000, $correctval_hi, 0xffdfffffffffffff, $rs1_val_hi, 0xfefffff60005fff6, x1, 160, x3)

inst_11:
// rs1==x6, rs2==x5, rd==x12, rs2_h3_val == -129, rs2_h2_val == 1024
// opcode: smal ; op1:x6; op2:x5; dest:x12; op1val:0x0000000080000000; op2val:0xff7f04000005fffa;
TEST_P64_PPN_OP(smal, x12, $rd_hi, x6, $rs1_hi, x5, 0x0000000000000000, $correctval_hi, 0x0000000080000000, $rs1_val_hi, 0xff7f04000005fffa, x1, 176, x3)

inst_12:
// rs1==x30, rs2==x26, rd==x10, rs2_h3_val == -65, rs2_h2_val == -17, rs2_h1_val == 21845
// opcode: smal ; op1:x30; op2:x26; dest:x10; op1val:0x0000000000000003; op2val:0xffbfffef55550040;
TEST_P64_PPN_OP(smal, x10, $rd_hi, x30, $rs1_hi, x26, 0x0000000000000000, $correctval_hi, 0x0000000000000003, $rs1_val_hi, 0xffbfffef55550040, x1, 192, x3)

inst_13:
// rs1==x12, rs2==x11, rd==x22, rs2_h3_val == -33, rs2_h2_val == -32768
// opcode: smal ; op1:x12; op2:x11; dest:x22; op1val:0x0010000000000000; op2val:0xffdf800000090006;
TEST_P64_PPN_OP(smal, x22, $rd_hi, x12, $rs1_hi, x11, 0x0000000000000000, $correctval_hi, 0x0010000000000000, $rs1_val_hi, 0xffdf800000090006, x1, 208, x3)

inst_14:
// rs1==x28, rs2==x16, rd==x8, rs2_h3_val == -17, rs2_h0_val == -65, rs2_h1_val == -2049
// opcode: smal ; op1:x28; op2:x16; dest:x8; op1val:0xffffffffff7fffff; op2val:0xffef3ffff7ffffbf;
TEST_P64_PPN_OP(smal, x8, $rd_hi, x28, $rs1_hi, x16, 0x0000000000000000, $correctval_hi, 0xffffffffff7fffff, $rs1_val_hi, 0xffef3ffff7ffffbf, x1, 224, x3)

inst_15:
// rs2==x23, rs2_h3_val == -9, rs2_h0_val == -257, rs2_h1_val == 4096
// opcode: smal ; op1:x29; op2:x23; dest:x24; op1val:0x0800000000000000; op2val:0xfff700061000feff;
TEST_P64_PPN_OP(smal, x24, $rd_hi, x29, $rs1_hi, x23, 0x0000000000000000, $correctval_hi, 0x0800000000000000, $rs1_val_hi, 0xfff700061000feff, x1, 240, x3)

inst_16:
// rs2==x6, rs2_h3_val == -5, rs2_h0_val == 8192
// opcode: smal ; op1:x24; op2:x6; dest:x2; op1val:0xf7ffffffffffffff; op2val:0xfffbfff600032000;
TEST_P64_PPN_OP(smal, x2, $rd_hi, x24, $rs1_hi, x6, 0x0000000000000000, $correctval_hi, 0xf7ffffffffffffff, $rs1_val_hi, 0xfffbfff600032000, x1, 256, x3)

inst_17:
// rs2==x0, rs2_h3_val == -3, rs2_h1_val == -2, rs2_h0_val == 1, rs2_h2_val == 21845
// opcode: smal ; op1:x15; op2:x0; dest:x30; op1val:0xfffffffffffffff7; op2val:0xfffd5555fffe0001;
TEST_P64_PPN_OP(smal, x30, $rd_hi, x15, $rs1_hi, x0, 0x0000000000000000, $correctval_hi, 0xfffffffffffffff7, $rs1_val_hi, 0xfffd5555fffe0001, x1, 272, x3)

inst_18:
// rs2==x28, rs2_h3_val == -2, rs2_h1_val == -129
// opcode: smal ; op1:x10; op2:x28; dest:x9; op1val:0x0000000000000080; op2val:0xfffe0007ff7f8000;
TEST_P64_PPN_OP(smal, x9, $rd_hi, x10, $rs1_hi, x28, 0x0000000000000000, $correctval_hi, 0x0000000000000080, $rs1_val_hi, 0xfffe0007ff7f8000, x1, 288, x3)

inst_19:
// rs2==x9, rs2_h3_val == -32768, rs2_h2_val == -2049, rs2_h1_val == 64
// opcode: smal ; op1:x15; op2:x9; dest:x8; op1val:0xfffffffffffffbff; op2val:0x8000f7ff0040fff9;
TEST_P64_PPN_OP(smal, x8, $rd_hi, x15, $rs1_hi, x9, 0x0000000000000000, $correctval_hi, 0xfffffffffffffbff, $rs1_val_hi, 0x8000f7ff0040fff9, x1, 304, x3)

inst_20:
// rs2==x30, rs2_h3_val == 16384, rs2_h0_val == -21846, rs2_h1_val == 8192
// opcode: smal ; op1:x6; op2:x30; dest:x19; op1val:0xffffffefffffffff; op2val:0x40003fff2000aaaa;
TEST_P64_PPN_OP(smal, x19, $rd_hi, x6, $rs1_hi, x30, 0x0000000000000000, $correctval_hi, 0xffffffefffffffff, $rs1_val_hi, 0x40003fff2000aaaa, x1, 320, x3)

inst_21:
// rs2==x4, rs2_h3_val == 8192, rs2_h2_val == 16, rs2_h1_val == 16384
// opcode: smal ; op1:x31; op2:x4; dest:x7; op1val:0xfffffffffffff7ff; op2val:0x200000104000ffbf;
TEST_P64_PPN_OP(smal, x7, $rd_hi, x31, $rs1_hi, x4, 0x0000000000000000, $correctval_hi, 0xfffffffffffff7ff, $rs1_val_hi, 0x200000104000ffbf, x1, 336, x3)

inst_22:
// rs2==x7, rs2_h3_val == 4096, rs2_h1_val == 1024, rs2_h2_val == 256
// opcode: smal ; op1:x31; op2:x7; dest:x13; op1val:0x0000000000020000; op2val:0x100001000400feff;
TEST_P64_PPN_OP(smal, x13, $rd_hi, x31, $rs1_hi, x7, 0x0000000000000000, $correctval_hi, 0x0000000000020000, $rs1_val_hi, 0x100001000400feff, x1, 352, x5)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_23:
// rs2==x3, rs2_h3_val == 2048, rs2_h0_val == -17, rs2_h1_val == -65
// opcode: smal ; op1:x30; op2:x3; dest:x31; op1val:0xfffbffffffffffff; op2val:0x08000400ffbfffef;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x3, 0x0000000000000000, $correctval_hi, 0xfffbffffffffffff, $rs1_val_hi, 0x08000400ffbfffef, x2, 0, x5)

inst_24:
// rs2==x12, rs2_h3_val == 1024, rs2_h1_val == 0, rs2_h2_val == 8
// opcode: smal ; op1:x17; op2:x12; dest:x30; op1val:0x0000000001000000; op2val:0x040000080000c000;
TEST_P64_PPN_OP(smal, x30, $rd_hi, x17, $rs1_hi, x12, 0x0000000000000000, $correctval_hi, 0x0000000001000000, $rs1_val_hi, 0x040000080000c000, x2, 16, x5)

inst_25:
// rs2==x1, rs2_h3_val == 512, rs2_h0_val == -33, rs2_h2_val == -2
// opcode: smal ; op1:x10; op2:x1; dest:x6; op1val:0xfffffff7ffffffff; op2val:0x0200fffefffcffdf;
TEST_P64_PPN_OP(smal, x6, $rd_hi, x10, $rs1_hi, x1, 0x0000000000000000, $correctval_hi, 0xfffffff7ffffffff, $rs1_val_hi, 0x0200fffefffcffdf, x2, 32, x5)

inst_26:
// rs2==x20, rs2_h3_val == 256, rs2_h1_val == -33
// opcode: smal ; op1:x10; op2:x20; dest:x14; op1val:0x0000000080000000; op2val:0x01005555ffdf8000;
TEST_P64_PPN_OP(smal, x14, $rd_hi, x10, $rs1_hi, x20, 0x0000000000000000, $correctval_hi, 0x0000000080000000, $rs1_val_hi, 0x01005555ffdf8000, x2, 48, x5)

inst_27:
// rs2==x27, rs2_h3_val == 128, rs2_h0_val == 4096
// opcode: smal ; op1:x11; op2:x27; dest:x4; op1val:0x0000000000000008; op2val:0x0080555500051000;
TEST_P64_PPN_OP(smal, x4, $rd_hi, x11, $rs1_hi, x27, 0x0000000000000000, $correctval_hi, 0x0000000000000008, $rs1_val_hi, 0x0080555500051000, x2, 64, x5)

inst_28:
// rs2==x15, rs2_h3_val == 64, rs2_h2_val == -5
// opcode: smal ; op1:x18; op2:x15; dest:x22; op1val:0xffffffff7fffffff; op2val:0x0040fffbfff6fff6;
TEST_P64_PPN_OP(smal, x22, $rd_hi, x18, $rs1_hi, x15, 0x0000000000000000, $correctval_hi, 0xffffffff7fffffff, $rs1_val_hi, 0x0040fffbfff6fff6, x2, 80, x5)

inst_29:
// rs2==x13, rs2_h3_val == 32, 
// opcode: smal ; op1:x30; op2:x13; dest:x21; op1val:0x0000000000000800; op2val:0x0020fff70040ffdf;
TEST_P64_PPN_OP(smal, x21, $rd_hi, x30, $rs1_hi, x13, 0x0000000000000000, $correctval_hi, 0x0000000000000800, $rs1_val_hi, 0x0020fff70040ffdf, x2, 96, x5)

inst_30:
// rs2==x8, rs2_h3_val == 16, rs2_h1_val == 256
// opcode: smal ; op1:x25; op2:x8; dest:x16; op1val:0x0000000100000000; op2val:0x0010000501000006;
TEST_P64_PPN_OP(smal, x16, $rd_hi, x25, $rs1_hi, x8, 0x0000000000000000, $correctval_hi, 0x0000000100000000, $rs1_val_hi, 0x0010000501000006, x2, 112, x5)

inst_31:
// rs2==x21, rs2_h3_val == 8, rs2_h2_val == -513, rs2_h0_val == 512, rs2_h1_val == -9
// opcode: smal ; op1:x9; op2:x21; dest:x8; op1val:0xffffffffffbfffff; op2val:0x0008fdfffff70200;
TEST_P64_PPN_OP(smal, x8, $rd_hi, x9, $rs1_hi, x21, 0x0000000000000000, $correctval_hi, 0xffffffffffbfffff, $rs1_val_hi, 0x0008fdfffff70200, x2, 128, x5)

inst_32:
// rs2_h3_val == 4, rs2_h2_val == 4
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffffff; op2val:0x000400040005fffa;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xfff7ffffffffffff, $rs1_val_hi, 0x000400040005fffa, x2, 144, x5)

inst_33:
// rs2_h3_val == 2, rs2_h0_val == 4
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0000000000000002; op2val:0x0002555500050004;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0000000000000002, $rs1_val_hi, 0x0002555500050004, x2, 160, x5)

inst_34:
// rs2_h0_val == 2048, rs2_h2_val == -33
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0080000000000000; op2val:0xaaaaffdffffd0800;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0080000000000000, $rs1_val_hi, 0xaaaaffdffffd0800, x2, 176, x5)

inst_35:
// rs2_h0_val == 1024, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffb; op2val:0x01003fff3fff0400;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xfffffffffffffffb, $rs1_val_hi, 0x01003fff3fff0400, x2, 192, x5)

inst_36:
// rs2_h0_val == 256, rs2_h2_val == 16384
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffefff; op2val:0xfff94000fff80100;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xffffffffffffefff, $rs1_val_hi, 0xfff94000fff80100, x2, 208, x5)

inst_37:
// rs2_h0_val == 128, rs2_h2_val == 512
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0400000000000000; op2val:0xfff6020000400080;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0400000000000000, $rs1_val_hi, 0xfff6020000400080, x2, 224, x5)

inst_38:
// rs2_h0_val == 32, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0000000800000000; op2val:0xfbff040000050020;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0000000800000000, $rs1_val_hi, 0xfbff040000050020, x2, 240, x5)

inst_39:
// rs2_h0_val == 16, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0020000000000000; op2val:0x1000ffdf55550010;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0020000000000000, $rs1_val_hi, 0x1000ffdf55550010, x2, 256, x5)

inst_40:
// rs2_h0_val == 8, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffffffff; op2val:0xfeff0200ffbf0008;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xff7fffffffffffff, $rs1_val_hi, 0xfeff0200ffbf0008, x2, 272, x5)

inst_41:
// rs2_h0_val == 2, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0008000000000000; op2val:0x1000bfff00060002;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0008000000000000, $rs1_val_hi, 0x1000bfff00060002, x2, 288, x5)

inst_42:
// rs2_h0_val == 0, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffffff; op2val:0x0010c000fffc0000;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xdfffffffffffffff, $rs1_val_hi, 0x0010c000fffc0000, x2, 304, x5)

inst_43:
// rs2_h0_val == -1, rs2_h1_val == 4
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffffff; op2val:0xfff8fdff0004ffff;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xfffffdffffffffff, $rs1_val_hi, 0xfff8fdff0004ffff, x2, 320, x5)

inst_44:
// rs1_val == (2**63-1), rs2_h1_val == -32768, rs2_h2_val == -129
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffffff; op2val:0x0400ff7f8000ffbf;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x7fffffffffffffff, $rs1_val_hi, 0x0400ff7f8000ffbf, x2, 336, x5)

inst_45:
// rs1_val == 0, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0000000000000000; op2val:0x3fff80000003fbff;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0000000000000000, $rs1_val_hi, 0x3fff80000003fbff, x2, 352, x5)

inst_46:
// rs1_val == 1, rs2_h2_val == -1025
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0000000000000001; op2val:0xbffffbfffffa0020;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0000000000000001, $rs1_val_hi, 0xbffffbfffffa0020, x2, 368, x5)

inst_47:
// rs2_h3_val == 1, rs2_h1_val == -16385
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0000000000000005; op2val:0x00010004bfff0800;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0000000000000005, $rs1_val_hi, 0x00010004bfff0800, x2, 384, x5)

inst_48:
// rs2_h3_val == 0, rs2_h0_val == -513
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffffff; op2val:0x000010003ffffdff;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xfffbffffffffffff, $rs1_val_hi, 0x000010003ffffdff, x2, 400, x5)

inst_49:
// rs2_h3_val == -1, rs2_h1_val == -257, rs2_h2_val == 1
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0000000000010000; op2val:0xffff0001fefffff6;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0000000000010000, $rs1_val_hi, 0xffff0001fefffff6, x2, 416, x5)

inst_50:
// rs2_h2_val == 32767, rs2_h1_val == 1
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffbf; op2val:0xff7f7fff0001ffbf;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xffffffffffffffbf, $rs1_val_hi, 0xff7f7fff0001ffbf, x2, 432, x5)

inst_51:
// rs2_h2_val == -4097, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffbfffff; op2val:0xf7ffefff3ffff7ff;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xffffffffffbfffff, $rs1_val_hi, 0xf7ffefff3ffff7ff, x2, 448, x5)

inst_52:
// rs2_h2_val == 64, rs2_h0_val == 32767
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffefff; op2val:0x10000040c0007fff;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xffffffffffffefff, $rs1_val_hi, 0x10000040c0007fff, x2, 464, x5)

inst_53:
// rs2_h2_val == 32, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffffffff; op2val:0xfdff002020000100;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xfffffbffffffffff, $rs1_val_hi, 0xfdff002020000100, x2, 480, x5)

inst_54:
// rs2_h2_val == 0, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0000080000000000; op2val:0x7fff0000fff98000;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0000080000000000, $rs1_val_hi, 0x7fff0000fff98000, x2, 496, x5)

inst_55:
// rs2_h2_val == -1, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0000000000000008; op2val:0xfff6ffff40003fff;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0000000000000008, $rs1_val_hi, 0xfff6ffff40003fff, x2, 512, x5)

inst_56:
// rs2_h1_val == -21846, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0001000000000000; op2val:0x02000400aaaa0001;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0001000000000000, $rs1_val_hi, 0x02000400aaaa0001, x2, 528, x5)

inst_57:
// rs2_h1_val == -8193, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffbf; op2val:0xfeff0006dffffffa;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xffffffffffffffbf, $rs1_val_hi, 0xfeff0006dffffffa, x2, 544, x5)

inst_58:
// rs2_h1_val == -4097, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffffffff; op2val:0xaaaa8000efff4000;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xffdfffffffffffff, $rs1_val_hi, 0xaaaa8000efff4000, x2, 560, x5)

inst_59:
// rs2_h1_val == -1025, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555; op2val:0xfff60200fbff0800;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x5555555555555555, $rs1_val_hi, 0xfff60200fbff0800, x2, 576, x5)

inst_60:
// rs2_h1_val == -513, rs2_h2_val == -257
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffffffff; op2val:0x0000fefffdff0001;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xfffffff7ffffffff, $rs1_val_hi, 0x0000fefffdff0001, x2, 592, x5)

inst_61:
// rs2_h1_val == -17, rs2_h0_val == -4097, rs2_h2_val == 128
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffffffff; op2val:0x80000080ffefefff;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xffffffdfffffffff, $rs1_val_hi, 0x80000080ffefefff, x2, 608, x5)

inst_62:
// rs2_h1_val == 512, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffffff; op2val:0x4000fff90200f7ff;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xf7ffffffffffffff, $rs1_val_hi, 0x4000fff90200f7ff, x2, 624, x5)

inst_63:
// rs2_h1_val == 32, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0000000000000006; op2val:0xfffb000700200009;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0000000000000006, $rs1_val_hi, 0xfffb000700200009, x2, 640, x5)

inst_64:
// rs2_h1_val == 16, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffff7ffff; op2val:0xfff9000700102000;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xfffffffffff7ffff, $rs1_val_hi, 0xfff9000700102000, x2, 656, x5)

inst_65:
// rs2_h1_val == 8, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffbfff; op2val:0xff7ffffa0008ffef;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xffffffffffffbfff, $rs1_val_hi, 0xff7ffffa0008ffef, x2, 672, x5)

inst_66:
// rs2_h1_val == 2, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffffffff; op2val:0xffbf004000020200;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xfffffff7ffffffff, $rs1_val_hi, 0xffbf004000020200, x2, 688, x5)

inst_67:
// rs2_h2_val == 2048, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffbfffffff; op2val:0x0040080055550003;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xffffffffbfffffff, $rs1_val_hi, 0x0040080055550003, x2, 704, x5)

inst_68:
// rs2_h1_val == -1, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0000400000000000; op2val:0xfffebfffffff0004;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0000400000000000, $rs1_val_hi, 0xfffebfffffff0004, x2, 720, x5)

inst_69:
// rs2_h0_val == 21845, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffdffffff; op2val:0x08007fff00055555;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xfffffffffdffffff, $rs1_val_hi, 0x08007fff00055555, x2, 736, x5)

inst_70:
// rs2_h2_val == -65, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffffff; op2val:0xfffdffbff7fffff9;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xfffffffbffffffff, $rs1_val_hi, 0xfffdffbff7fffff9, x2, 752, x5)

inst_71:
// rs2_h0_val == -16385, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000000; op2val:0xfefffffb4000bfff;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x8000000000000000, $rs1_val_hi, 0xfefffffb4000bfff, x2, 768, x5)

inst_72:
// rs2_h0_val == -8193, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffdffff; op2val:0xff7ffffcc000dfff;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xfffffffffffdffff, $rs1_val_hi, 0xff7ffffcc000dfff, x2, 784, x5)

inst_73:
// rs2_h0_val == -129, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0000000000000200; op2val:0x0400fffb7fffff7f;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0000000000000200, $rs1_val_hi, 0x0400fffb7fffff7f, x2, 800, x5)

inst_74:
// rs2_h2_val == 8192, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffffff; op2val:0x7fff20000080c000;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xfffbffffffffffff, $rs1_val_hi, 0x7fff20000080c000, x2, 816, x5)

inst_75:
// rs2_h0_val == -9, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0000000000000004; op2val:0x00103fff0005fff7;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0000000000000004, $rs1_val_hi, 0x00103fff0005fff7, x2, 832, x5)

inst_76:
// rs2_h0_val == -5, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0800000000000000; op2val:0xffdf01001000fffb;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0800000000000000, $rs1_val_hi, 0xffdf01001000fffb, x2, 848, x5)

inst_77:
// rs2_h0_val == -3, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffff7fffff; op2val:0x02004000fdfffffd;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xffffffffff7fffff, $rs1_val_hi, 0x02004000fdfffffd, x2, 864, x5)

inst_78:
// rs2_h0_val == -2, 
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffb; op2val:0xfff92000ffeffffe;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xfffffffffffffffb, $rs1_val_hi, 0xfff92000ffeffffe, x2, 880, x5)

inst_79:
// rs2_h3_val == 21845, rs2_h1_val == -3, rs2_h2_val == -8193
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffffff; op2val:0x5555dffffffdfff8;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xfffffffeffffffff, $rs1_val_hi, 0x5555dffffffdfff8, x2, 896, x5)

inst_80:
// rs2_h3_val == 32767, rs2_h2_val == -16385, rs2_h1_val == -5, rs2_h0_val == 64
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0x0002000000000000; op2val:0x7fffbffffffb0040;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0x0002000000000000, $rs1_val_hi, 0x7fffbffffffb0040, x2, 912, x5)

inst_81:
// rs2_h3_val == -3, rs2_h1_val == -2, rs2_h0_val == 1, rs2_h2_val == 21845
// opcode: smal ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffff7; op2val:0xfffd5555fffe0001;
TEST_P64_PPN_OP(smal, x31, $rd_hi, x30, $rs1_hi, x29, 0x0000000000000000, $correctval_hi, 0xfffffffffffffff7, $rs1_val_hi, 0xfffd5555fffe0001, x2, 928, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 46*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 118*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
