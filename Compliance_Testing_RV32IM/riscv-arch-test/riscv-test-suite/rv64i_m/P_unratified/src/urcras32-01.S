
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the urcras32 instruction of the RISC-V RV64PZicsr extension for the urcras32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",urcras32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x1, rs2==x5, rd==x1, rs1_w0_val == 0, rs2_w1_val == 4294950911, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 1431655765, rs2_w0_val == 524288
// opcode: urcras32 ; op1:x1; op2:x5; dest:x1; op1val:0x5555555500000000;  op2val:0xffffbfff00080000
TEST_RR_OP(urcras32, x1, x1, x5, 0x0000000000000000, 0x5555555500000000, 0xffffbfff00080000, x6, 0, x9)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x19, rs2==x20, rd==x15, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 32, rs2_w1_val == 8388608, rs1_w1_val == 8388608, rs2_w0_val == 16384
// opcode: urcras32 ; op1:x19; op2:x20; dest:x15; op1val:0x80000000000020;  op2val:0x80000000004000
TEST_RR_OP(urcras32, x15, x19, x20, 0x0000000000000000, 0x80000000000020, 0x80000000004000, x6, 8, x9)

inst_2:
// rs1 == rs2 != rd, rs1==x3, rs2==x3, rd==x21, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 4294963199, rs2_w0_val == 4294934527, rs1_w0_val == 4294934527
// opcode: urcras32 ; op1:x3; op2:x3; dest:x21; op1val:0xffffefffffff7fff;  op2val:0xffffbfffffff7fff
TEST_RR_OP(urcras32, x21, x3, x3, 0x0000000000000000, 0xffffefffffff7fff, 0xffffbfffffff7fff, x6, 16, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x29, rs2==x29, rd==x29, rs2_w1_val == 2863311530, rs1_w1_val == 4294705151, rs1_w0_val == 8192, rs2_w0_val == 4294965247
// opcode: urcras32 ; op1:x29; op2:x29; dest:x29; op1val:0xfffbffff00002000;  op2val:0xaaaaaaaafffff7ff
TEST_RR_OP(urcras32, x29, x29, x29, 0x0000000000000000, 0xfffbffff00002000, 0xaaaaaaaafffff7ff, x6, 24, x9)

inst_4:
// rs2 == rd != rs1, rs1==x15, rs2==x4, rd==x4, rs2_w1_val == 1431655765, rs1_w0_val == 4294966783, rs2_w0_val == 4294967263
// opcode: urcras32 ; op1:x15; op2:x4; dest:x4; op1val:0x000012fffffdff;  op2val:0x55555555ffffffdf
TEST_RR_OP(urcras32, x4, x15, x4, 0x0000000000000000, 0x000012fffffdff, 0x55555555ffffffdf, x6, 32, x9)

inst_5:
// rs1==x13, rs2==x23, rd==x12, rs2_w1_val == 2147483647, rs2_w0_val == 4278190079, rs1_w1_val == 4294967039, rs1_w0_val == 4294967279
// opcode: urcras32 ; op1:x13; op2:x23; dest:x12; op1val:0xfffffeffffffffef;  op2val:0x7ffffffffeffffff
TEST_RR_OP(urcras32, x12, x13, x23, 0x0000000000000000, 0xfffffeffffffffef, 0x7ffffffffeffffff, x6, 40, x9)

inst_6:
// rs1==x20, rs2==x10, rd==x23, rs2_w1_val == 3221225471, rs2_w0_val == 4294967291, rs1_w0_val == 8388608
// opcode: urcras32 ; op1:x20; op2:x10; dest:x23; op1val:0x00001100800000;  op2val:0xbffffffffffffffb
TEST_RR_OP(urcras32, x23, x20, x10, 0x0000000000000000, 0x00001100800000, 0xbffffffffffffffb, x6, 48, x9)

inst_7:
// rs1==x21, rs2==x8, rd==x19, rs2_w1_val == 3758096383, rs1_w0_val == 32768, rs2_w0_val == 4286578687, rs1_w1_val == 4294966783
// opcode: urcras32 ; op1:x21; op2:x8; dest:x19; op1val:0xfffffdff00008000;  op2val:0xdfffffffff7fffff
TEST_RR_OP(urcras32, x19, x21, x8, 0x0000000000000000, 0xfffffdff00008000, 0xdfffffffff7fffff, x6, 56, x9)

inst_8:
// rs1==x31, rs2==x26, rd==x28, rs2_w1_val == 4026531839, rs1_w0_val == 4292870143, rs1_w1_val == 4294901759
// opcode: urcras32 ; op1:x31; op2:x26; dest:x28; op1val:0xfffeffffffdfffff;  op2val:0xefffffff00000006
TEST_RR_OP(urcras32, x28, x31, x26, 0x0000000000000000, 0xfffeffffffdfffff, 0xefffffff00000006, x6, 64, x9)

inst_9:
// rs1==x25, rs2==x0, rd==x24, rs2_w1_val == 4160749567, rs2_w0_val == 256
// opcode: urcras32 ; op1:x25; op2:x0; dest:x24; op1val:0xffffefff00002000;  op2val:0xf7ffffff00000100
TEST_RR_OP(urcras32, x24, x25, x0, 0x0000000000000000, 0xffffefff00002000, 0xf7ffffff00000100, x6, 72, x9)

inst_10:
// rs1==x11, rs2==x2, rd==x14, rs2_w1_val == 4227858431, rs1_w0_val == 1024, rs1_w1_val == 4, rs2_w0_val == 4194304
// opcode: urcras32 ; op1:x11; op2:x2; dest:x14; op1val:0x00000400000400;  op2val:0xfbffffff00400000
TEST_RR_OP(urcras32, x14, x11, x2, 0x0000000000000000, 0x00000400000400, 0xfbffffff00400000, x6, 80, x9)

inst_11:
// rs1==x18, rs2==x27, rd==x20, rs2_w1_val == 4261412863, rs2_w0_val == 33554432, rs1_w1_val == 4026531839, rs1_w0_val == 4294967295
// opcode: urcras32 ; op1:x18; op2:x27; dest:x20; op1val:0xefffffffffffffff;  op2val:0xfdffffff02000000
TEST_RR_OP(urcras32, x20, x18, x27, 0x0000000000000000, 0xefffffffffffffff, 0xfdffffff02000000, x6, 88, x9)

inst_12:
// rs1==x26, rs2==x17, rd==x18, rs2_w1_val == 4278190079, rs1_w1_val == 4261412863, rs2_w0_val == 4160749567
// opcode: urcras32 ; op1:x26; op2:x17; dest:x18; op1val:0xfdffffff00000000;  op2val:0xfefffffff7ffffff
TEST_RR_OP(urcras32, x18, x26, x17, 0x0000000000000000, 0xfdffffff00000000, 0xfefffffff7ffffff, x6, 96, x9)

inst_13:
// rs1==x4, rs2==x28, rd==x7, rs2_w1_val == 4286578687, rs2_w0_val == 2
// opcode: urcras32 ; op1:x4; op2:x28; dest:x7; op1val:0xefffffff00000013;  op2val:0xff7fffff00000002
TEST_RR_OP(urcras32, x7, x4, x28, 0x0000000000000000, 0xefffffff00000013, 0xff7fffff00000002, x6, 104, x9)

inst_14:
// rs1==x9, rs2==x19, rd==x11, rs2_w1_val == 4290772991, rs2_w0_val == 4294967295, rs1_w0_val == 4294967231, rs1_w1_val == 4294967294
// opcode: urcras32 ; op1:x9; op2:x19; dest:x11; op1val:0xfffffffeffffffbf;  op2val:0xffbfffffffffffff
TEST_RR_OP(urcras32, x11, x9, x19, 0x0000000000000000, 0xfffffffeffffffbf, 0xffbfffffffffffff, x6, 112, x18)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_15:
// rs1==x22, rs2==x30, rd==x5, rs2_w1_val == 4292870143, rs2_w0_val == 4294967167, rs1_w0_val == 4194304, rs1_w1_val == 4294965247
// opcode: urcras32 ; op1:x22; op2:x30; dest:x5; op1val:0xfffff7ff00400000;  op2val:0xffdfffffffffff7f
TEST_RR_OP(urcras32, x5, x22, x30, 0x0000000000000000, 0xfffff7ff00400000, 0xffdfffffffffff7f, x4, 0, x18)

inst_16:
// rs1==x8, rs2==x13, rd==x10, rs2_w1_val == 4293918719, rs1_w0_val == 64, rs1_w1_val == 4227858431, rs2_w0_val == 4294959103
// opcode: urcras32 ; op1:x8; op2:x13; dest:x10; op1val:0xfbffffff00000040;  op2val:0xffefffffffffdfff
TEST_RR_OP(urcras32, x10, x8, x13, 0x0000000000000000, 0xfbffffff00000040, 0xffefffffffffdfff, x4, 8, x18)

inst_17:
// rs1==x0, rs2==x7, rd==x30, rs2_w1_val == 4294443007, rs2_w0_val == 8388608, rs1_w1_val == 1
// opcode: urcras32 ; op1:x0; op2:x7; dest:x30; op1val:0x000001ffffffbf;  op2val:0xfff7ffff00800000
TEST_RR_OP(urcras32, x30, x0, x7, 0x0000000000000000, 0x000001ffffffbf, 0xfff7ffff00800000, x4, 16, x18)

inst_18:
// rs1==x2, rs2==x14, rd==x17, rs2_w1_val == 4294705151, rs1_w0_val == 262144, rs2_w0_val == 4026531839
// opcode: urcras32 ; op1:x2; op2:x14; dest:x17; op1val:0xfffffffe00040000;  op2val:0xfffbffffefffffff
TEST_RR_OP(urcras32, x17, x2, x14, 0x0000000000000000, 0xfffffffe00040000, 0xfffbffffefffffff, x4, 24, x18)

inst_19:
// rs1==x30, rs2==x11, rd==x25, rs2_w1_val == 4294836223, rs2_w0_val == 128, rs1_w1_val == 134217728, rs1_w0_val == 1048576
// opcode: urcras32 ; op1:x30; op2:x11; dest:x25; op1val:0x800000000100000;  op2val:0xfffdffff00000080
TEST_RR_OP(urcras32, x25, x30, x11, 0x0000000000000000, 0x800000000100000, 0xfffdffff00000080, x4, 32, x18)

inst_20:
// rs1==x27, rs2==x12, rd==x26, rs2_w1_val == 4294901759, rs1_w1_val == 4293918719, rs1_w0_val == 2147483647
// opcode: urcras32 ; op1:x27; op2:x12; dest:x26; op1val:0xffefffff7fffffff;  op2val:0xfffeffff00004000
TEST_RR_OP(urcras32, x26, x27, x12, 0x0000000000000000, 0xffefffff7fffffff, 0xfffeffff00004000, x4, 40, x18)

inst_21:
// rs1==x10, rs2==x21, rd==x27, rs2_w1_val == 4294934527, rs1_w0_val == 3758096383
// opcode: urcras32 ; op1:x10; op2:x21; dest:x27; op1val:0x00000bdfffffff;  op2val:0xffff7fff0000000e
TEST_RR_OP(urcras32, x27, x10, x21, 0x0000000000000000, 0x00000bdfffffff, 0xffff7fff0000000e, x4, 48, x18)

inst_22:
// rs1==x6, rs2==x24, rd==x22, rs2_w1_val == 4294959103, rs2_w0_val == 4, rs1_w1_val == 524288
// opcode: urcras32 ; op1:x6; op2:x24; dest:x22; op1val:0x08000000000013;  op2val:0xffffdfff00000004
TEST_RR_OP(urcras32, x22, x6, x24, 0x0000000000000000, 0x08000000000013, 0xffffdfff00000004, x4, 56, x18)

inst_23:
// rs1==x17, rs2==x9, rd==x0, rs2_w1_val == 4294963199, rs2_w0_val == 2147483648, rs1_w1_val == 131072
// opcode: urcras32 ; op1:x17; op2:x9; dest:x0; op1val:0x02000000000007;  op2val:0xffffefff80000000
TEST_RR_OP(urcras32, x0, x17, x9, 0x0000000000000000, 0x02000000000007, 0xffffefff80000000, x4, 64, x18)

inst_24:
// rs1==x23, rs2==x1, rd==x2, rs2_w1_val == 4294965247, rs1_w1_val == 16384, rs1_w0_val == 1073741824, rs2_w0_val == 1048576
// opcode: urcras32 ; op1:x23; op2:x1; dest:x2; op1val:0x00400040000000;  op2val:0xfffff7ff00100000
TEST_RR_OP(urcras32, x2, x23, x1, 0x0000000000000000, 0x00400040000000, 0xfffff7ff00100000, x4, 72, x18)

inst_25:
// rs1==x7, rs2==x31, rd==x9, rs2_w1_val == 4294966271, rs1_w1_val == 32768
// opcode: urcras32 ; op1:x7; op2:x31; dest:x9; op1val:0x00800000000011;  op2val:0xfffffbff00800000
TEST_RR_OP(urcras32, x9, x7, x31, 0x0000000000000000, 0x00800000000011, 0xfffffbff00800000, x4, 80, x18)

inst_26:
// rs1==x24, rs2==x22, rd==x3, rs2_w1_val == 4294966783, rs1_w0_val == 4294959103, rs2_w0_val == 32, rs1_w1_val == 2863311530
// opcode: urcras32 ; op1:x24; op2:x22; dest:x3; op1val:0xaaaaaaaaffffdfff;  op2val:0xfffffdff00000020
TEST_RR_OP(urcras32, x3, x24, x22, 0x0000000000000000, 0xaaaaaaaaffffdfff, 0xfffffdff00000020, x4, 88, x18)

inst_27:
// rs1==x14, rs2==x16, rd==x8, rs2_w1_val == 4294967039, rs1_w0_val == 4227858431, rs1_w1_val == 2097152, rs2_w0_val == 64
// opcode: urcras32 ; op1:x14; op2:x16; dest:x8; op1val:0x200000fbffffff;  op2val:0xfffffeff00000040
TEST_RR_OP(urcras32, x8, x14, x16, 0x0000000000000000, 0x200000fbffffff, 0xfffffeff00000040, x4, 96, x18)

inst_28:
// rs1==x5, rs2==x15, rd==x16, rs2_w1_val == 4294967167, rs2_w0_val == 16777216, rs1_w1_val == 4294443007
// opcode: urcras32 ; op1:x5; op2:x15; dest:x16; op1val:0xfff7ffff00000400;  op2val:0xffffff7f01000000
TEST_RR_OP(urcras32, x16, x5, x15, 0x0000000000000000, 0xfff7ffff00000400, 0xffffff7f01000000, x4, 104, x18)

inst_29:
// rs1==x28, rs2==x6, rd==x13, rs2_w1_val == 4294967231, 
// opcode: urcras32 ; op1:x28; op2:x6; dest:x13; op1val:0x0000047fffffff;  op2val:0xffffffbfffffdfff
TEST_RR_OP(urcras32, x13, x28, x6, 0x0000000000000000, 0x0000047fffffff, 0xffffffbfffffdfff, x4, 112, x2)

inst_30:
// rs1==x16, rs2==x18, rd==x31, rs2_w1_val == 4294967263, rs1_w0_val == 4261412863, rs2_w0_val == 4294950911, rs1_w1_val == 65536
// opcode: urcras32 ; op1:x16; op2:x18; dest:x31; op1val:0x010000fdffffff;  op2val:0xffffffdfffffbfff
TEST_RR_OP(urcras32, x31, x16, x18, 0x0000000000000000, 0x010000fdffffff, 0xffffffdfffffbfff, x4, 120, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x12, rs2==x25, rd==x6, rs2_w1_val == 4294967279, 
// opcode: urcras32 ; op1:x12; op2:x25; dest:x6; op1val:0xfffbffffffffffbf;  op2val:0xffffffef00000013
TEST_RR_OP(urcras32, x6, x12, x25, 0x0000000000000000, 0xfffbffffffffffbf, 0xffffffef00000013, x1, 0, x2)

inst_32:
// rs2_w1_val == 4294967287, rs1_w1_val == 4294934527
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000003;  op2val:0xfffffff7ff7fffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000003, 0xfffffff7ff7fffff, x1, 8, x2)

inst_33:
// rs2_w1_val == 4294967291, rs1_w1_val == 536870912
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000012;  op2val:0xfffffffb0000000f
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x2000000000000012, 0xfffffffb0000000f, x1, 16, x2)

inst_34:
// rs2_w1_val == 4294967293, rs1_w0_val == 2097152, rs1_w1_val == 4286578687
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00200000;  op2val:0xfffffffdfffffffb
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00200000, 0xfffffffdfffffffb, x1, 24, x2)

inst_35:
// rs2_w1_val == 4294967294, rs1_w0_val == 2863311530, rs1_w1_val == 2147483648
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000aaaaaaaa;  op2val:0xfffffffeefffffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x80000000aaaaaaaa, 0xfffffffeefffffff, x1, 32, x2)

inst_36:
// rs2_w1_val == 2147483648, rs1_w1_val == 262144, rs2_w0_val == 2048
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x0400000000000a;  op2val:0x8000000000000800
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x0400000000000a, 0x8000000000000800, x1, 40, x2)

inst_37:
// rs2_w1_val == 1073741824, rs2_w0_val == 4293918719
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500200000;  op2val:0x40000000ffefffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00000500200000, 0x40000000ffefffff, x1, 48, x2)

inst_38:
// rs2_w1_val == 536870912, rs2_w0_val == 4294966271, rs1_w0_val == 2147483648, rs1_w1_val == 2147483647
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff80000000;  op2val:0x20000000fffffbff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x7fffffff80000000, 0x20000000fffffbff, x1, 56, x2)

inst_39:
// rs2_w1_val == 268435456, rs1_w0_val == 4294967291, rs2_w0_val == 16
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffffffb;  op2val:0x1000000000000010
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffffffb, 0x1000000000000010, x1, 64, x2)

inst_40:
// rs2_w1_val == 134217728, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000dffffffbf;  op2val:0x8000000ffffbfff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00000dffffffbf, 0x8000000ffffbfff, x1, 72, x2)

inst_41:
// rs2_w1_val == 67108864, rs2_w0_val == 4294967294
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000e00200000;  op2val:0x4000000fffffffe
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00000e00200000, 0x4000000fffffffe, x1, 80, x2)

inst_42:
// rs2_w1_val == 33554432, rs1_w1_val == 256, rs1_w0_val == 524288
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000080000;  op2val:0x200000000000040
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00010000080000, 0x200000000000040, x1, 88, x2)

inst_43:
// rs2_w1_val == 16777216, rs2_w0_val == 4096
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000011ffffdfff;  op2val:0x100000000001000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x000011ffffdfff, 0x100000000001000, x1, 96, x2)

inst_44:
// rs2_w1_val == 4194304, rs1_w1_val == 1048576, rs1_w0_val == 4290772991
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffbfffff;  op2val:0x40000000000005
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x100000ffbfffff, 0x40000000000005, x1, 104, x2)

inst_45:
// rs2_w1_val == 2097152, rs1_w1_val == 4294967287, rs2_w0_val == 4294967231
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffdfffff;  op2val:0x200000ffffffbf
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffdfffff, 0x200000ffffffbf, x1, 112, x2)

inst_46:
// rs2_w1_val == 1048576, rs2_w0_val == 512, rs1_w0_val == 33554432
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff02000000;  op2val:0x10000000000200
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff02000000, 0x10000000000200, x1, 120, x2)

inst_47:
// rs2_w1_val == 524288, rs2_w0_val == 4294967039
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00080000;  op2val:0x080000fffffeff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00080000, 0x080000fffffeff, x1, 128, x2)

inst_48:
// rs2_w1_val == 262144, rs1_w1_val == 4290772991, rs1_w0_val == 4294967167, rs2_w0_val == 4294443007
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffffff7f;  op2val:0x040000fff7ffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xffbfffffffffff7f, 0x040000fff7ffff, x1, 136, x2)

inst_49:
// rs1_w0_val == 131072, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700020000;  op2val:0x7fffffff02000000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfffffff700020000, 0x7fffffff02000000, x1, 144, x2)

inst_50:
// rs1_w0_val == 65536, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000010000;  op2val:0x00000500000006
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00400000010000, 0x00000500000006, x1, 152, x2)

inst_51:
// rs1_w0_val == 16384, rs2_w0_val == 131072, rs2_w1_val == 1
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500004000;  op2val:0x00000100020000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00000500004000, 0x00000100020000, x1, 160, x2)

inst_52:
// rs1_w0_val == 4096, rs1_w1_val == 4294967231, rs2_w1_val == 32, rs2_w0_val == 134217728
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00001000;  op2val:0x00002008000000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00001000, 0x00002008000000, x1, 168, x2)

inst_53:
// rs1_w0_val == 2048, rs2_w1_val == 0, rs1_w1_val == 4292870143
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000800;  op2val:0x00000000000100
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000800, 0x00000000000100, x1, 176, x2)

inst_54:
// rs1_w0_val == 512, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000200;  op2val:0x00001200001000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x800000000000200, 0x00001200001000, x1, 184, x2)

inst_55:
// rs1_w0_val == 256, rs2_w1_val == 131072
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000100;  op2val:0x02000000000002
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x08000000000100, 0x02000000000002, x1, 192, x2)

inst_56:
// rs1_w0_val == 128, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000d00000080;  op2val:0xfbffffff00000200
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00000d00000080, 0xfbffffff00000200, x1, 200, x2)

inst_57:
// rs1_w0_val == 16, rs2_w0_val == 4294966783
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000010;  op2val:0x000007fffffdff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000010, 0x000007fffffdff, x1, 208, x2)

inst_58:
// rs1_w0_val == 8, rs2_w0_val == 0, rs1_w1_val == 33554432
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000008;  op2val:0x1000000000000000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x200000000000008, 0x1000000000000000, x1, 216, x2)

inst_59:
// rs1_w0_val == 4, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000004;  op2val:0x100000fffffffe
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000004, 0x100000fffffffe, x1, 224, x2)

inst_60:
// rs1_w0_val == 2, rs2_w0_val == 8192
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000f00000002;  op2val:0x02000000002000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00000f00000002, 0x02000000002000, x1, 232, x2)

inst_61:
// rs1_w0_val == 1, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000001;  op2val:0x00000000000007
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xffffefff00000001, 0x00000000000007, x1, 240, x2)

inst_62:
// rs2_w1_val == 65536, rs2_w0_val == 2097152
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000340000000;  op2val:0x01000000200000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00000340000000, 0x01000000200000, x1, 248, x2)

inst_63:
// rs2_w1_val == 32768, rs2_w0_val == 4294836223
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000080;  op2val:0x008000fffdffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x20000000000080, 0x008000fffdffff, x1, 256, x2)

inst_64:
// rs2_w1_val == 16384, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000b00000400;  op2val:0x004000fffdffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00000b00000400, 0x004000fffdffff, x1, 264, x2)

inst_65:
// rs2_w1_val == 8192, rs1_w1_val == 4278190079
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff02000000;  op2val:0x002000fffdffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfeffffff02000000, 0x002000fffdffff, x1, 272, x2)

inst_66:
// rs2_w1_val == 4096, rs1_w1_val == 8192, rs2_w0_val == 4294967287
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x002000dfffffff;  op2val:0x001000fffffff7
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x002000dfffffff, 0x001000fffffff7, x1, 280, x2)

inst_67:
// rs2_w1_val == 2048, rs1_w0_val == 4294705151, rs2_w0_val == 4294967279
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffbffff;  op2val:0x000800ffffffef
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x200000fffbffff, 0x000800ffffffef, x1, 288, x2)

inst_68:
// rs2_w1_val == 1024, rs1_w0_val == 4294836223, rs1_w1_val == 4294966271
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffffdffff;  op2val:0x00040000020000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffdffff, 0x00040000020000, x1, 296, x2)

inst_69:
// rs2_w1_val == 512, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000002;  op2val:0x00020000000004
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000002, 0x00020000000004, x1, 304, x2)

inst_70:
// rs2_w1_val == 256, rs2_w0_val == 2863311530
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffffffb;  op2val:0x000100aaaaaaaa
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x200000fffffffb, 0x000100aaaaaaaa, x1, 312, x2)

inst_71:
// rs2_w1_val == 128, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffbfffff;  op2val:0x000080fffffff7
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x004000ffbfffff, 0x000080fffffff7, x1, 320, x2)

inst_72:
// rs2_w1_val == 64, rs2_w0_val == 67108864, rs1_w1_val == 67108864
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000000f;  op2val:0x00004004000000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x40000000000000f, 0x00004004000000, x1, 328, x2)

inst_73:
// rs2_w1_val == 16, rs1_w0_val == 536870912
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff20000000;  op2val:0x00001000004000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xffffefff20000000, 0x00001000004000, x1, 336, x2)

inst_74:
// rs2_w1_val == 8, rs1_w0_val == 4278190079, rs2_w0_val == 4294901759
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffeffffff;  op2val:0x000008fffeffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfffffdfffeffffff, 0x000008fffeffff, x1, 344, x2)

inst_75:
// rs2_w1_val == 4, rs1_w0_val == 4294967263, rs1_w1_val == 4294967167
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffffdf;  op2val:0x00000400004000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffffdf, 0x00000400004000, x1, 352, x2)

inst_76:
// rs2_w1_val == 2, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000080;  op2val:0x00000200000080
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00200000000080, 0x00000200000080, x1, 360, x2)

inst_77:
// rs2_w1_val == 4294967295, rs2_w0_val == 4261412863, rs1_w0_val == 4294967294
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000afffffffe;  op2val:0xfffffffffdffffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00000afffffffe, 0xfffffffffdffffff, x1, 368, x2)

inst_78:
// rs2_w0_val == 1431655765, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000007;  op2val:0xffffffff55555555
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000007, 0xffffffff55555555, x1, 376, x2)

inst_79:
// rs2_w0_val == 1024, rs1_w0_val == 4286578687
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffff7fffff;  op2val:0x100000000000400
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfdffffffff7fffff, 0x100000000000400, x1, 384, x2)

inst_80:
// rs2_w0_val == 8, rs1_w1_val == 4294836223
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000010;  op2val:0x00000e00000008
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000010, 0x00000e00000008, x1, 392, x2)

inst_81:
// rs2_w0_val == 1, rs1_w0_val == 4026531839
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffefffffff;  op2val:0xf7ffffff00000001
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xff7fffffefffffff, 0xf7ffffff00000001, x1, 400, x2)

inst_82:
// rs1_w1_val == 3221225471, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff0000000d;  op2val:0xffffff7ffffffeff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xbfffffff0000000d, 0xffffff7ffffffeff, x1, 408, x2)

inst_83:
// rs1_w1_val == 3758096383, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffefffffff;  op2val:0x200000ffffffdf
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xdfffffffefffffff, 0x200000ffffffdf, x1, 416, x2)

inst_84:
// rs1_w1_val == 4160749567, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00040000;  op2val:0xfeffffffffefffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00040000, 0xfeffffffffefffff, x1, 424, x2)

inst_85:
// rs1_w1_val == 4294950911, rs1_w0_val == 3221225471
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffbfffffff;  op2val:0x000009fffffff7
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xffffbfffbfffffff, 0x000009fffffff7, x1, 432, x2)

inst_86:
// rs1_w1_val == 4294959103, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffffff;  op2val:0x80000000000000e
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xffffdfffffffffff, 0x80000000000000e, x1, 440, x2)

inst_87:
// rs1_w1_val == 4294967263, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000000;  op2val:0x400000ffffff7f
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000000, 0x400000ffffff7f, x1, 448, x2)

inst_88:
// rs1_w1_val == 4294967279, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffeffffff;  op2val:0x00000400000006
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xffffffeffeffffff, 0x00000400000006, x1, 456, x2)

inst_89:
// rs1_w1_val == 4294967291, rs1_w0_val == 134217728
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb08000000;  op2val:0x000400aaaaaaaa
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffb08000000, 0x000400aaaaaaaa, x1, 464, x2)

inst_90:
// rs1_w1_val == 4294967293, rs2_w0_val == 4292870143
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffbffff;  op2val:0x400000ffdfffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffbffff, 0x400000ffdfffff, x1, 472, x2)

inst_91:
// rs1_w1_val == 1073741824, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffff7fff;  op2val:0xffffff7ff7ffffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x40000000ffff7fff, 0xffffff7ff7ffffff, x1, 480, x2)

inst_92:
// rs1_w1_val == 268435456, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000800;  op2val:0x400000000000011
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x1000000000000800, 0x400000000000011, x1, 488, x2)

inst_93:
// rs1_w1_val == 16777216, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000bfffffff;  op2val:0x000007ffffffdf
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x1000000bfffffff, 0x000007ffffffdf, x1, 496, x2)

inst_94:
// rs1_w1_val == 4194304, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000011;  op2val:0xfffff7ff04000000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x40000000000011, 0xfffff7ff04000000, x1, 504, x2)

inst_95:
// rs1_w1_val == 4096, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000010000;  op2val:0x08000000000200
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00100000010000, 0x08000000000200, x1, 512, x2)

inst_96:
// rs1_w1_val == 2048, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffbffff;  op2val:0x7fffffff01000000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x000800fffbffff, 0x7fffffff01000000, x1, 520, x2)

inst_97:
// rs1_w1_val == 1024, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x0004000000000d;  op2val:0x000020fffffff7
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x0004000000000d, 0x000020fffffff7, x1, 528, x2)

inst_98:
// rs1_w1_val == 512, rs2_w0_val == 2147483647
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000013;  op2val:0x1000007fffffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00020000000013, 0x1000007fffffff, x1, 536, x2)

inst_99:
// rs1_w1_val == 128, rs1_w0_val == 268435456
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008010000000;  op2val:0x000400fffeffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00008010000000, 0x000400fffeffff, x1, 544, x2)

inst_100:
// rs1_w1_val == 64, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000080;  op2val:0x020000feffffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00004000000080, 0x020000feffffff, x1, 552, x2)

inst_101:
// rs1_w1_val == 32, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000000;  op2val:0x020000fffffffe
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00002000000000, 0x020000fffffffe, x1, 560, x2)

inst_102:
// rs1_w1_val == 16, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010aaaaaaaa;  op2val:0x1000000000000b
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x000010aaaaaaaa, 0x1000000000000b, x1, 568, x2)

inst_103:
// rs1_w1_val == 8, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffffffef;  op2val:0x02000000000020
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x000008ffffffef, 0x02000000000020, x1, 576, x2)

inst_104:
// rs2_w0_val == 3221225471, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000100;  op2val:0x000002bfffffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00002000000100, 0x000002bfffffff, x1, 584, x2)

inst_105:
// rs2_w0_val == 3758096383, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fbffffff;  op2val:0x40000000dfffffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x2000000fbffffff, 0x40000000dfffffff, x1, 592, x2)

inst_106:
// rs1_w1_val == 2, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000013;  op2val:0x800000000000003
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00000200000013, 0x800000000000003, x1, 600, x2)

inst_107:
// rs1_w1_val == 4294967295, rs1_w0_val == 4294967293
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffd;  op2val:0x4000000000000040
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffffd, 0x4000000000000040, x1, 608, x2)

inst_108:
// rs2_w0_val == 4227858431, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff40000000;  op2val:0x00000afbffffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xffffefff40000000, 0x00000afbffffff, x1, 616, x2)

inst_109:
// rs1_w1_val == 0, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000ffffff7f;  op2val:0xf7ffffff04000000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x000000ffffff7f, 0xf7ffffff04000000, x1, 624, x2)

inst_110:
// rs1_w0_val == 1431655765, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040055555555;  op2val:0x00000ddfffffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00040055555555, 0x00000ddfffffff, x1, 632, x2)

inst_111:
// rs2_w0_val == 4290772991, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000011;  op2val:0x100000ffbfffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00000100000011, 0x100000ffbfffff, x1, 640, x2)

inst_112:
// rs1_w0_val == 4160749567, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000f7ffffff;  op2val:0x1000000000000f
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x2000000f7ffffff, 0x1000000000000f, x1, 648, x2)

inst_113:
// rs2_w0_val == 4294705151, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700008000;  op2val:0xffbffffffffbffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00000700008000, 0xffbffffffffbffff, x1, 656, x2)

inst_114:
// rs2_w0_val == 262144, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000b02000000;  op2val:0x00400000040000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00000b02000000, 0x00400000040000, x1, 664, x2)

inst_115:
// rs2_w0_val == 4294963199, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffbfffffff;  op2val:0x200000ffffefff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xffdfffffbfffffff, 0x200000ffffefff, x1, 672, x2)

inst_116:
// rs1_w0_val == 4293918719, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffefffff;  op2val:0xfbffffffffbfffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x800000ffefffff, 0xfbffffffffbfffff, x1, 680, x2)

inst_117:
// rs1_w0_val == 4294443007, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fff7ffff;  op2val:0x000000ffff7fff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x080000fff7ffff, 0x000000ffff7fff, x1, 688, x2)

inst_118:
// rs1_w0_val == 4294901759, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffeffff;  op2val:0xfffffbff00000100
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffeffff, 0xfffffbff00000100, x1, 696, x2)

inst_119:
// rs1_w0_val == 4294950911, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009ffffbfff;  op2val:0xffffffdffffdffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x000009ffffbfff, 0xffffffdffffdffff, x1, 704, x2)

inst_120:
// rs1_w0_val == 4294963199, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffffefff;  op2val:0xfffffffe00000009
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xffdfffffffffefff, 0xfffffffe00000009, x1, 712, x2)

inst_121:
// rs1_w0_val == 4294965247, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffff7ff;  op2val:0xfffffeff01000000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xdffffffffffff7ff, 0xfffffeff01000000, x1, 720, x2)

inst_122:
// rs2_w0_val == 65536, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffdfffff;  op2val:0xffefffff00010000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x001000ffdfffff, 0xffefffff00010000, x1, 728, x2)

inst_123:
// rs1_w0_val == 4294966271, rs2_w0_val == 536870912
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffbff;  op2val:0x00000c20000000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x10000000fffffbff, 0x00000c20000000, x1, 736, x2)

inst_124:
// rs2_w0_val == 4294967293, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000a20000000;  op2val:0x000004fffffffd
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00000a20000000, 0x000004fffffffd, x1, 744, x2)

inst_125:
// rs1_w0_val == 16777216, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000001000000;  op2val:0x000100ffdfffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x04000001000000, 0x000100ffdfffff, x1, 752, x2)

inst_126:
// rs1_w0_val == 67108864, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000b04000000;  op2val:0x00800000010000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x00000b04000000, 0x00800000010000, x1, 760, x2)

inst_127:
// rs1_w0_val == 4294967039, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffeff;  op2val:0x000040ffbfffff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffeff, 0x000040ffbfffff, x1, 768, x2)

inst_128:
// rs2_w0_val == 32768, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000008;  op2val:0x00000300008000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000008, 0x00000300008000, x1, 776, x2)

inst_129:
// rs2_w0_val == 1073741824, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffbffffff;  op2val:0x400000040000000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfffdfffffbffffff, 0x400000040000000, x1, 784, x2)

inst_130:
// rs2_w0_val == 268435456, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffeffff;  op2val:0x4000000010000000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xffeffffffffeffff, 0x4000000010000000, x1, 792, x2)

inst_131:
// rs1_w0_val == 4294967287, 
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffffff7;  op2val:0xffbfffffffffff7f
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffffff7, 0xffbfffffffffff7f, x1, 800, x2)

inst_132:
// rs2_w1_val == 2863311530, rs1_w1_val == 4294705151, rs1_w0_val == 8192, rs2_w0_val == 4294965247
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00002000;  op2val:0xaaaaaaaafffff7ff
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00002000, 0xaaaaaaaafffff7ff, x1, 808, x2)

inst_133:
// rs2_w1_val == 4294443007, rs2_w0_val == 8388608, rs1_w1_val == 1
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001ffffffbf;  op2val:0xfff7ffff00800000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x000001ffffffbf, 0xfff7ffff00800000, x1, 816, x2)

inst_134:
// rs2_w1_val == 4294963199, rs2_w0_val == 2147483648, rs1_w1_val == 131072
// opcode: urcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000007;  op2val:0xffffefff80000000
TEST_RR_OP(urcras32, x31, x30, x29, 0x0000000000000000, 0x02000000000007, 0xffffefff80000000, x1, 824, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 104*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
