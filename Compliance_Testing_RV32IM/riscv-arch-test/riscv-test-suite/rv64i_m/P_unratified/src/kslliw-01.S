
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kslliw instruction of the RISC-V RV64PZicsr extension for the kslliw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kslliw)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rd, rs1==x13, rd==x13, rs1_w0_val == -2147483648, imm_val == 23, rs1_w1_val == 1
// opcode: kslliw ; op1:x13; dest:x13; op1val:0x00000180000000;  immval:0x17
TEST_PKIMM_OP( kslliw, x13, x13, 0x0000000000000000, 0x00000180000000, 0x17, x13, x8, 0, x10)

inst_1:
// rs1 != rd, rs1==x1, rd==x9, imm_val == 31, rs1_w0_val == 1431655765, rs1_w1_val == 8
// opcode: kslliw ; op1:x1; dest:x9; op1val:0x00000855555555;  immval:0x1f
TEST_PKIMM_OP( kslliw, x9, x1, 0x0000000000000000, 0x00000855555555, 0x1f, x1, x8, 16, x10)

inst_2:
// rs1==x31, rd==x28, imm_val == 30, rs1_w0_val == 128
// opcode: kslliw ; op1:x31; dest:x28; op1val:0x00000700000080;  immval:0x1e
TEST_PKIMM_OP( kslliw, x28, x31, 0x0000000000000000, 0x00000700000080, 0x1e, x31, x8, 32, x10)

inst_3:
// rs1==x28, rd==x20, imm_val == 29, rs1_w0_val == -2097153
// opcode: kslliw ; op1:x28; dest:x20; op1val:0xfffffff6ffdfffff;  immval:0x1d
TEST_PKIMM_OP( kslliw, x20, x28, 0x0000000000000000, 0xfffffff6ffdfffff, 0x1d, x28, x8, 48, x10)

inst_4:
// rs1==x0, rd==x12, imm_val == 28, rs1_w0_val == -1073741825
// opcode: kslliw ; op1:x0; dest:x12; op1val:0xfffffffabfffffff;  immval:0x1c
TEST_PKIMM_OP( kslliw, x12, x0, 0x0000000000000000, 0xfffffffabfffffff, 0x1c, x0, x8, 64, x10)

inst_5:
// rs1==x18, rd==x16, imm_val == 27, rs1_w0_val == 16777216
// opcode: kslliw ; op1:x18; dest:x16; op1val:0x00000801000000;  immval:0x1b
TEST_PKIMM_OP( kslliw, x16, x18, 0x0000000000000000, 0x00000801000000, 0x1b, x18, x8, 80, x10)

inst_6:
// rs1==x7, rd==x22, imm_val == 26, rs1_w0_val == 131072, rs1_w1_val == -9
// opcode: kslliw ; op1:x7; dest:x22; op1val:0xfffffff700020000;  immval:0x1a
TEST_PKIMM_OP( kslliw, x22, x7, 0x0000000000000000, 0xfffffff700020000, 0x1a, x7, x8, 96, x10)

inst_7:
// rs1==x24, rd==x2, imm_val == 25, rs1_w0_val == 8388608
// opcode: kslliw ; op1:x24; dest:x2; op1val:0x00000300800000;  immval:0x19
TEST_PKIMM_OP( kslliw, x2, x24, 0x0000000000000000, 0x00000300800000, 0x19, x24, x8, 112, x10)

inst_8:
// rs1==x30, rd==x4, imm_val == 24, rs1_w1_val == -33554433
// opcode: kslliw ; op1:x30; dest:x4; op1val:0xfdffffff00000005;  immval:0x18
TEST_PKIMM_OP( kslliw, x4, x30, 0x0000000000000000, 0xfdffffff00000005, 0x18, x30, x8, 128, x10)

inst_9:
// rs1==x23, rd==x6, imm_val == 22, 
// opcode: kslliw ; op1:x23; dest:x6; op1val:0xc000000000000006;  immval:0x16
TEST_PKIMM_OP( kslliw, x6, x23, 0x0000000000000000, 0xc000000000000006, 0x16, x23, x8, 144, x10)

inst_10:
// rs1==x4, rd==x25, imm_val == 21, rs1_w1_val == 536870912
// opcode: kslliw ; op1:x4; dest:x25; op1val:0x2000000000020000;  immval:0x15
TEST_PKIMM_OP( kslliw, x25, x4, 0x0000000000000000, 0x2000000000020000, 0x15, x4, x8, 160, x10)

inst_11:
// rs1==x29, rd==x23, imm_val == 20, rs1_w1_val == -17
// opcode: kslliw ; op1:x29; dest:x23; op1val:0xffffffef00020000;  immval:0x14
TEST_PKIMM_OP( kslliw, x23, x29, 0x0000000000000000, 0xffffffef00020000, 0x14, x29, x8, 176, x10)

inst_12:
// rs1==x25, rd==x31, imm_val == 19, rs1_w1_val == 2097152
// opcode: kslliw ; op1:x25; dest:x31; op1val:0x20000000000009;  immval:0x13
TEST_PKIMM_OP( kslliw, x31, x25, 0x0000000000000000, 0x20000000000009, 0x13, x25, x8, 192, x10)

inst_13:
// rs1==x2, rd==x0, imm_val == 18, rs1_w0_val == 2048
// opcode: kslliw ; op1:x2; dest:x0; op1val:0xfdffffff00000800;  immval:0x12
TEST_PKIMM_OP( kslliw, x0, x2, 0x0000000000000000, 0xfdffffff00000800, 0x12, x2, x8, 208, x10)

inst_14:
// rs1==x17, rd==x1, imm_val == 17, rs1_w0_val == -8388609
// opcode: kslliw ; op1:x17; dest:x1; op1val:0xfffffffaff7fffff;  immval:0x11
TEST_PKIMM_OP( kslliw, x1, x17, 0x0000000000000000, 0xfffffffaff7fffff, 0x11, x17, x8, 224, x10)

inst_15:
// rs1==x11, rd==x18, imm_val == 16, rs1_w1_val == 2
// opcode: kslliw ; op1:x11; dest:x18; op1val:0x000002ff7fffff;  immval:0x10
TEST_PKIMM_OP( kslliw, x18, x11, 0x0000000000000000, 0x000002ff7fffff, 0x10, x11, x8, 240, x10)

inst_16:
// rs1==x3, rd==x19, imm_val == 15, rs1_w1_val == -1, rs1_w0_val == -129
// opcode: kslliw ; op1:x3; dest:x19; op1val:0xffffffffffffff7f;  immval:0xf
TEST_PKIMM_OP( kslliw, x19, x3, 0x0000000000000000, 0xffffffffffffff7f, 0xf, x3, x8, 256, x10)

inst_17:
// rs1==x12, rd==x26, imm_val == 14, rs1_w0_val == 256
// opcode: kslliw ; op1:x12; dest:x26; op1val:0x00000900000100;  immval:0xe
TEST_PKIMM_OP( kslliw, x26, x12, 0x0000000000000000, 0x00000900000100, 0xe, x12, x8, 272, x10)

inst_18:
// rs1==x22, rd==x5, imm_val == 13, rs1_w1_val == -131073, rs1_w0_val == 262144
// opcode: kslliw ; op1:x22; dest:x5; op1val:0xfffdffff00040000;  immval:0xd
TEST_PKIMM_OP( kslliw, x5, x22, 0x0000000000000000, 0xfffdffff00040000, 0xd, x22, x8, 288, x10)

inst_19:
// rs1==x19, rd==x27, imm_val == 12, 
// opcode: kslliw ; op1:x19; dest:x27; op1val:0x20000001000000;  immval:0xc
TEST_PKIMM_OP( kslliw, x27, x19, 0x0000000000000000, 0x20000001000000, 0xc, x19, x8, 304, x10)

inst_20:
// rs1==x14, rd==x30, imm_val == 11, rs1_w1_val == 32768
// opcode: kslliw ; op1:x14; dest:x30; op1val:0x008000fffffffa;  immval:0xb
TEST_PKIMM_OP( kslliw, x30, x14, 0x0000000000000000, 0x008000fffffffa, 0xb, x14, x8, 320, x10)

inst_21:
// rs1==x6, rd==x7, imm_val == 10, rs1_w1_val == 0
// opcode: kslliw ; op1:x6; dest:x7; op1val:0x00000000040000;  immval:0xa
TEST_PKIMM_OP( kslliw, x7, x6, 0x0000000000000000, 0x00000000040000, 0xa, x6, x8, 336, x2)

inst_22:
// rs1==x5, rd==x10, imm_val == 9, 
// opcode: kslliw ; op1:x5; dest:x10; op1val:0x00000380000000;  immval:0x9
TEST_PKIMM_OP( kslliw, x10, x5, 0x0000000000000000, 0x00000380000000, 0x9, x5, x8, 352, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_23:
// rs1==x20, rd==x29, imm_val == 8, rs1_w0_val == -32769
// opcode: kslliw ; op1:x20; dest:x29; op1val:0x000007ffff7fff;  immval:0x8
TEST_PKIMM_OP( kslliw, x29, x20, 0x0000000000000000, 0x000007ffff7fff, 0x8, x20, x1, 0, x2)

inst_24:
// rs1==x10, rd==x15, imm_val == 7, rs1_w1_val == 8388608
// opcode: kslliw ; op1:x10; dest:x15; op1val:0x80000000000800;  immval:0x7
TEST_PKIMM_OP( kslliw, x15, x10, 0x0000000000000000, 0x80000000000800, 0x7, x10, x1, 16, x2)

inst_25:
// rs1==x16, rd==x17, imm_val == 6, rs1_w0_val == -536870913
// opcode: kslliw ; op1:x16; dest:x17; op1val:0x000006dfffffff;  immval:0x6
TEST_PKIMM_OP( kslliw, x17, x16, 0x0000000000000000, 0x000006dfffffff, 0x6, x16, x1, 32, x2)

inst_26:
// rs1==x15, rd==x14, imm_val == 5, rs1_w1_val == 131072, rs1_w0_val == 1073741824
// opcode: kslliw ; op1:x15; dest:x14; op1val:0x02000040000000;  immval:0x5
TEST_PKIMM_OP( kslliw, x14, x15, 0x0000000000000000, 0x02000040000000, 0x5, x15, x1, 48, x2)

inst_27:
// rs1==x27, rd==x11, imm_val == 4, 
// opcode: kslliw ; op1:x27; dest:x11; op1val:0xfdfffffffffffff8;  immval:0x4
TEST_PKIMM_OP( kslliw, x11, x27, 0x0000000000000000, 0xfdfffffffffffff8, 0x4, x27, x1, 64, x2)

inst_28:
// rs1==x9, rd==x24, imm_val == 3, rs1_w0_val == 2
// opcode: kslliw ; op1:x9; dest:x24; op1val:0x00000000000002;  immval:0x3
TEST_PKIMM_OP( kslliw, x24, x9, 0x0000000000000000, 0x00000000000002, 0x3, x9, x1, 80, x2)

inst_29:
// rs1==x8, rd==x21, imm_val == 2, rs1_w1_val == -33, rs1_w0_val == 4194304
// opcode: kslliw ; op1:x8; dest:x21; op1val:0xffffffdf00400000;  immval:0x2
TEST_PKIMM_OP( kslliw, x21, x8, 0x0000000000000000, 0xffffffdf00400000, 0x2, x8, x1, 96, x2)

inst_30:
// rs1==x21, rd==x3, imm_val == 1, rs1_w0_val == -16777217
// opcode: kslliw ; op1:x21; dest:x3; op1val:0x800000feffffff;  immval:0x1
TEST_PKIMM_OP( kslliw, x3, x21, 0x0000000000000000, 0x800000feffffff, 0x1, x21, x1, 112, x2)

inst_31:
// rs1==x26, rd==x8, imm_val == 0, rs1_w1_val == 16384
// opcode: kslliw ; op1:x26; dest:x8; op1val:0x00400000000080;  immval:0x0
TEST_PKIMM_OP( kslliw, x8, x26, 0x0000000000000000, 0x00400000000080, 0x0, x26, x1, 128, x2)

inst_32:
// rs1_w1_val == -1431655766, rs1_w0_val == -2049
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xaaaaaaaafffff7ff;  immval:0x15
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xaaaaaaaafffff7ff, 0x15, x30, x1, 144, x2)

inst_33:
// rs1_w1_val == 1431655765, rs1_w0_val == -524289
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x55555555fff7ffff;  immval:0x10
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x55555555fff7ffff, 0x10, x30, x1, 160, x2)

inst_34:
// rs1_w1_val == 2147483647, rs1_w0_val == 512
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x7fffffff00000200;  immval:0x8
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x7fffffff00000200, 0x8, x30, x1, 176, x2)

inst_35:
// rs1_w1_val == -1073741825, rs1_w0_val == -4194305
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xbfffffffffbfffff;  immval:0x12
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xbfffffffffbfffff, 0x12, x30, x1, 192, x2)

inst_36:
// rs1_w1_val == -536870913, rs1_w0_val == 8
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xdfffffff00000008;  immval:0x1c
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xdfffffff00000008, 0x1c, x30, x1, 208, x2)

inst_37:
// rs1_w1_val == -268435457, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xefffffffffbfffff;  immval:0x11
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xefffffffffbfffff, 0x11, x30, x1, 224, x2)

inst_38:
// rs1_w1_val == -134217729, rs1_w0_val == 32768
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xf7ffffff00008000;  immval:0x17
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xf7ffffff00008000, 0x17, x30, x1, 240, x2)

inst_39:
// rs1_w1_val == -67108865, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfbfffffffff7ffff;  immval:0x15
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfbfffffffff7ffff, 0x15, x30, x1, 256, x2)

inst_40:
// rs1_w1_val == -16777217, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfeffffffffff7fff;  immval:0x15
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfeffffffffff7fff, 0x15, x30, x1, 272, x2)

inst_41:
// rs1_w1_val == -8388609, rs1_w0_val == 268435456
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xff7fffff10000000;  immval:0x11
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xff7fffff10000000, 0x11, x30, x1, 288, x2)

inst_42:
// rs1_w1_val == -4194305, rs1_w0_val == 64
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xffbfffff00000040;  immval:0x4
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xffbfffff00000040, 0x4, x30, x1, 304, x2)

inst_43:
// rs1_w1_val == -2097153, rs1_w0_val == 4096
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xffdfffff00001000;  immval:0x3
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xffdfffff00001000, 0x3, x30, x1, 320, x2)

inst_44:
// rs1_w1_val == -1048577, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xffeffffffffffff9;  immval:0x1e
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xffeffffffffffff9, 0x1e, x30, x1, 336, x2)

inst_45:
// rs1_w1_val == -524289, rs1_w0_val == 67108864
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfff7ffff04000000;  immval:0x1
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfff7ffff04000000, 0x1, x30, x1, 352, x2)

inst_46:
// rs1_w1_val == -262145, rs1_w0_val == 2147483647
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffbffff7fffffff;  immval:0x1f
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffbffff7fffffff, 0x1f, x30, x1, 368, x2)

inst_47:
// rs1_w1_val == -65537, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffeffff00000008;  immval:0x16
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffeffff00000008, 0x16, x30, x1, 384, x2)

inst_48:
// rs1_w1_val == -32769, rs1_w0_val == -4097
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xffff7fffffffefff;  immval:0x9
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xffff7fffffffefff, 0x9, x30, x1, 400, x2)

inst_49:
// rs1_w1_val == -16385, rs1_w0_val == 4
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xffffbfff00000004;  immval:0x1c
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xffffbfff00000004, 0x1c, x30, x1, 416, x2)

inst_50:
// rs1_w1_val == -8193, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xffffdfff80000000;  immval:0x8
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xffffdfff80000000, 0x8, x30, x1, 432, x2)

inst_51:
// rs1_w1_val == -4097, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xffffefff00000080;  immval:0x2
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xffffefff00000080, 0x2, x30, x1, 448, x2)

inst_52:
// rs1_w1_val == -2049, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffff7ff00000006;  immval:0x8
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffff7ff00000006, 0x8, x30, x1, 464, x2)

inst_53:
// rs1_w1_val == -1025, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffffbff00000100;  immval:0x18
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffffbff00000100, 0x18, x30, x1, 480, x2)

inst_54:
// rs1_w1_val == -513, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffffdff80000000;  immval:0x2
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffffdff80000000, 0x2, x30, x1, 496, x2)

inst_55:
// rs1_w1_val == -257, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffffeff00000003;  immval:0x6
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffffeff00000003, 0x6, x30, x1, 512, x2)

inst_56:
// rs1_w1_val == -129, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xffffff7ffffffff6;  immval:0x15
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xffffff7ffffffff6, 0x15, x30, x1, 528, x2)

inst_57:
// rs1_w0_val == -65, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffffff9ffffffbf;  immval:0x7
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffffff9ffffffbf, 0x7, x30, x1, 544, x2)

inst_58:
// rs1_w0_val == -33, rs1_w1_val == 8192
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x002000ffffffdf;  immval:0x11
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x002000ffffffdf, 0x11, x30, x1, 560, x2)

inst_59:
// rs1_w0_val == -17, rs1_w1_val == 4
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x000004ffffffef;  immval:0xb
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x000004ffffffef, 0xb, x30, x1, 576, x2)

inst_60:
// rs1_w0_val == -9, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffffffcfffffff7;  immval:0x14
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffffffcfffffff7, 0x14, x30, x1, 592, x2)

inst_61:
// rs1_w0_val == -5, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffbfffffffffffb;  immval:0x14
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffbfffffffffffb, 0x14, x30, x1, 608, x2)

inst_62:
// rs1_w0_val == -3, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x800000fffffffd;  immval:0x15
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x800000fffffffd, 0x15, x30, x1, 624, x2)

inst_63:
// rs1_w0_val == -2, rs1_w1_val == 256
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x000100fffffffe;  immval:0x7
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x000100fffffffe, 0x7, x30, x1, 640, x2)

inst_64:
// rs1_w0_val == 536870912, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x20000020000000;  immval:0x13
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x20000020000000, 0x13, x30, x1, 656, x2)

inst_65:
// rs1_w0_val == 134217728, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffeffff08000000;  immval:0x14
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffeffff08000000, 0x14, x30, x1, 672, x2)

inst_66:
// rs1_w0_val == 33554432, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x00800002000000;  immval:0x18
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x00800002000000, 0x18, x30, x1, 688, x2)

inst_67:
// rs1_w0_val == 2097152, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffffffa00200000;  immval:0x7
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffffffa00200000, 0x7, x30, x1, 704, x2)

inst_68:
// rs1_w0_val == 1048576, rs1_w1_val == -5
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffffffb00100000;  immval:0x17
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffffffb00100000, 0x17, x30, x1, 720, x2)

inst_69:
// rs1_w0_val == 524288, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xffffdfff00080000;  immval:0x16
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xffffdfff00080000, 0x16, x30, x1, 736, x2)

inst_70:
// rs1_w0_val == 65536, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xf7ffffff00010000;  immval:0x17
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xf7ffffff00010000, 0x17, x30, x1, 752, x2)

inst_71:
// rs1_w0_val == 16384, rs1_w1_val == -2
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffffffe00004000;  immval:0x5
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffffffe00004000, 0x5, x30, x1, 768, x2)

inst_72:
// rs1_w0_val == 8192, rs1_w1_val == 4194304
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x40000000002000;  immval:0x1
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x40000000002000, 0x1, x30, x1, 784, x2)

inst_73:
// rs1_w0_val == 1024, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x00010000000400;  immval:0x12
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x00010000000400, 0x12, x30, x1, 800, x2)

inst_74:
// rs1_w0_val == 32, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xdfffffff00000020;  immval:0xb
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xdfffffff00000020, 0xb, x30, x1, 816, x2)

inst_75:
// rs1_w0_val == 16, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x00000800000010;  immval:0x16
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x00000800000010, 0x16, x30, x1, 832, x2)

inst_76:
// rs1_w0_val == 1, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffeffff00000001;  immval:0xe
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffeffff00000001, 0xe, x30, x1, 848, x2)

inst_77:
// rs1_w0_val == 0, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xaaaaaaaa00000000;  immval:0x12
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xaaaaaaaa00000000, 0x12, x30, x1, 864, x2)

inst_78:
// rs1_w0_val == -1, rs1_w1_val == 1073741824
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x40000000ffffffff;  immval:0xb
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x40000000ffffffff, 0xb, x30, x1, 880, x2)

inst_79:
// rs1_w1_val == -65, rs1_w0_val == -131073
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xffffffbffffdffff;  immval:0x3
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xffffffbffffdffff, 0x3, x30, x1, 896, x2)

inst_80:
// rs1_w1_val == -3, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffffffd00000002;  immval:0x1f
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffffffd00000002, 0x1f, x30, x1, 912, x2)

inst_81:
// rs1_w1_val == -2147483648, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x8000000000000080;  immval:0x19
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x8000000000000080, 0x19, x30, x1, 928, x2)

inst_82:
// rs1_w1_val == 268435456, rs1_w0_val == -65537
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x10000000fffeffff;  immval:0x1
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x10000000fffeffff, 0x1, x30, x1, 944, x2)

inst_83:
// rs1_w1_val == 134217728, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x8000000fffff7ff;  immval:0x7
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x8000000fffff7ff, 0x7, x30, x1, 960, x2)

inst_84:
// rs1_w1_val == 67108864, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x400000000002000;  immval:0x14
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x400000000002000, 0x14, x30, x1, 976, x2)

inst_85:
// rs1_w1_val == 33554432, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x2000000fffffffe;  immval:0x7
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x2000000fffffffe, 0x7, x30, x1, 992, x2)

inst_86:
// rs1_w1_val == 16777216, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x1000000fffeffff;  immval:0xe
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x1000000fffeffff, 0xe, x30, x1, 1008, x2)

inst_87:
// rs1_w1_val == 1048576, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x1000003fffffff;  immval:0xf
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x1000003fffffff, 0xf, x30, x1, 1024, x2)

inst_88:
// rs1_w1_val == 524288, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x080000fffffffa;  immval:0xc
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x080000fffffffa, 0xc, x30, x1, 1040, x2)

inst_89:
// rs1_w1_val == 262144, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x04000000000100;  immval:0x11
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x04000000000100, 0x11, x30, x1, 1056, x2)

inst_90:
// rs1_w1_val == 65536, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x010000fffffff8;  immval:0x9
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x010000fffffff8, 0x9, x30, x1, 1072, x2)

inst_91:
// rs1_w1_val == 4096, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x00100000080000;  immval:0x6
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x00100000080000, 0x6, x30, x1, 1088, x2)

inst_92:
// rs1_w1_val == 2048, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x00080000000002;  immval:0x15
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x00080000000002, 0x15, x30, x1, 1104, x2)

inst_93:
// rs1_w1_val == 1024, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x00040000000800;  immval:0x18
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x00040000000800, 0x18, x30, x1, 1120, x2)

inst_94:
// rs1_w1_val == 512, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x00020000000007;  immval:0x1f
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x00020000000007, 0x1f, x30, x1, 1136, x2)

inst_95:
// rs1_w1_val == 128, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x00008008000000;  immval:0x5
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x00008008000000, 0x5, x30, x1, 1152, x2)

inst_96:
// rs1_w0_val == -1431655766, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffffbffaaaaaaaa;  immval:0x14
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffffbffaaaaaaaa, 0x14, x30, x1, 1168, x2)

inst_97:
// rs1_w0_val == -268435457, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x4000000efffffff;  immval:0x1f
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x4000000efffffff, 0x1f, x30, x1, 1184, x2)

inst_98:
// rs1_w0_val == -134217729, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffffffdf7ffffff;  immval:0x7
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffffffdf7ffffff, 0x7, x30, x1, 1200, x2)

inst_99:
// rs1_w0_val == -67108865, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xffffdffffbffffff;  immval:0x4
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xffffdffffbffffff, 0x4, x30, x1, 1216, x2)

inst_100:
// rs1_w0_val == -33554433, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffdfffffdffffff;  immval:0x1a
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffdfffffdffffff, 0x1a, x30, x1, 1232, x2)

inst_101:
// rs1_w1_val == 64, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x00004000010000;  immval:0x1f
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x00004000010000, 0x1f, x30, x1, 1248, x2)

inst_102:
// rs1_w0_val == -1048577, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffeffffffefffff;  immval:0x16
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffeffffffefffff, 0x16, x30, x1, 1264, x2)

inst_103:
// rs1_w0_val == -262145, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xeffffffffffbffff;  immval:0x1f
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xeffffffffffbffff, 0x1f, x30, x1, 1280, x2)

inst_104:
// rs1_w0_val == -513, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xffeffffffffffdff;  immval:0xc
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xffeffffffffffdff, 0xc, x30, x1, 1296, x2)

inst_105:
// rs1_w1_val == 16, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x000010ffdfffff;  immval:0xf
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x000010ffdfffff, 0xf, x30, x1, 1312, x2)

inst_106:
// rs1_w0_val == -16385, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x200000ffffbfff;  immval:0xb
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x200000ffffbfff, 0xb, x30, x1, 1328, x2)

inst_107:
// rs1_w0_val == -8193, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffffeffffffdfff;  immval:0x19
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffffeffffffdfff, 0x19, x30, x1, 1344, x2)

inst_108:
// rs1_w0_val == -1025, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x008000fffffbff;  immval:0x15
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x008000fffffbff, 0x15, x30, x1, 1360, x2)

inst_109:
// rs1_w1_val == 32, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x000020ffffffff;  immval:0x1a
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x000020ffffffff, 0x1a, x30, x1, 1376, x2)

inst_110:
// rs1_w0_val == -257, 
// opcode: kslliw ; op1:x30; dest:x31; op1val:0x10000000fffffeff;  immval:0x19
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0x10000000fffffeff, 0x19, x30, x1, 1392, x2)

inst_111:
// imm_val == 28, rs1_w0_val == -1073741825
// opcode: kslliw ; op1:x30; dest:x31; op1val:0xfffffffabfffffff;  immval:0x1c
TEST_PKIMM_OP( kslliw, x31, x30, 0x0000000000000000, 0xfffffffabfffffff, 0x1c, x30, x1, 1408, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 46*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 178*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
