
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmmawt2.u instruction of the RISC-V RV64PZicsr extension for the kmmawt2.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmmawt2.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rd != rs2, rs1==x3, rs2==x5, rd==x3, rs1_w0_val == -2147483648, rs2_h3_val == -5, rs2_h1_val == 21845, rs1_w1_val == -1073741825
// opcode: kmmawt2.u ; op1:x3; op2:x5; dest:x3; op1val:0xbfffffff80000000;  op2val:0xfffb000955550005
TEST_PKRR_OP(kmmawt2.u, x3, x3, x5, 0x0000000000000000, 0xbfffffff80000000, 0xfffb000955550005, x3, x15, 0, x17)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x4, rs2==x16, rd==x11, rs2_h3_val == -21846, rs2_h0_val == -1, rs1_w0_val == 1431655765, rs1_w1_val == 1048576, rs2_h1_val == 8
// opcode: kmmawt2.u ; op1:x4; op2:x16; dest:x11; op1val:0x10000055555555;  op2val:0xaaaafff90008ffff
TEST_PKRR_OP(kmmawt2.u, x11, x4, x16, 0x0000000000000000, 0x10000055555555, 0xaaaafff90008ffff, x4, x15, 16, x17)

inst_2:
// rs1 == rs2 != rd, rs1==x23, rs2==x23, rd==x9, rs2_h3_val == 21845, rs2_h1_val == 256, rs2_h2_val == 1, rs1_w1_val == 2, rs2_h0_val == -129, rs1_w0_val == 8388608
// opcode: kmmawt2.u ; op1:x23; op2:x23; dest:x9; op1val:0x00000200800000;  op2val:0x555500010100ff7f
TEST_PKRR_OP(kmmawt2.u, x9, x23, x23, 0x0000000000000000, 0x00000200800000, 0x555500010100ff7f, x23, x15, 32, x17)

inst_3:
// rs1 == rs2 == rd, rs1==x30, rs2==x30, rd==x30, rs2_h3_val == 32767, rs2_h2_val == -1, rs1_w1_val == -16385, rs2_h1_val == 4096, rs2_h0_val == 128
// opcode: kmmawt2.u ; op1:x30; op2:x30; dest:x30; op1val:0xffffbfff00000009;  op2val:0x7fffffff10000080
TEST_PKRR_OP(kmmawt2.u, x30, x30, x30, 0x0000000000000000, 0xffffbfff00000009, 0x7fffffff10000080, x30, x15, 48, x17)

inst_4:
// rs2 == rd != rs1, rs1==x18, rs2==x8, rd==x8, rs2_h3_val == -16385, rs2_h2_val == 32767, rs2_h1_val == -21846, rs1_w1_val == 4, rs2_h0_val == -4097, rs1_w0_val == -268435457
// opcode: kmmawt2.u ; op1:x18; op2:x8; dest:x8; op1val:0x000004efffffff;  op2val:0xbfff7fffaaaaefff
TEST_PKRR_OP(kmmawt2.u, x8, x18, x8, 0x0000000000000000, 0x000004efffffff, 0xbfff7fffaaaaefff, x18, x15, 64, x17)

inst_5:
// rs1==x25, rs2==x3, rd==x10, rs2_h3_val == -8193, rs2_h1_val == 4, rs1_w1_val == 2097152, rs1_w0_val == -32769
// opcode: kmmawt2.u ; op1:x25; op2:x3; dest:x10; op1val:0x200000ffff7fff;  op2val:0xdffffff60004c000
TEST_PKRR_OP(kmmawt2.u, x10, x25, x3, 0x0000000000000000, 0x200000ffff7fff, 0xdffffff60004c000, x25, x15, 80, x17)

inst_6:
// rs1==x19, rs2==x1, rd==x12, rs2_h3_val == -4097, rs2_h0_val == -33, rs1_w0_val == -4097
// opcode: kmmawt2.u ; op1:x19; op2:x1; dest:x12; op1val:0x000009ffffefff;  op2val:0xefffffffc000ffdf
TEST_PKRR_OP(kmmawt2.u, x12, x19, x1, 0x0000000000000000, 0x000009ffffefff, 0xefffffffc000ffdf, x19, x15, 96, x17)

inst_7:
// rs1==x14, rs2==x7, rd==x24, rs2_h3_val == -2049, rs2_h2_val == -16385, rs1_w1_val == 1024, rs2_h0_val == 1, rs2_h1_val == -65, rs1_w0_val == 4194304
// opcode: kmmawt2.u ; op1:x14; op2:x7; dest:x24; op1val:0x00040000400000;  op2val:0xf7ffbfffffbf0001
TEST_PKRR_OP(kmmawt2.u, x24, x14, x7, 0x0000000000000000, 0x00040000400000, 0xf7ffbfffffbf0001, x14, x15, 112, x17)

inst_8:
// rs1==x24, rs2==x9, rd==x27, rs2_h3_val == -1025, rs2_h2_val == 16384, rs1_w1_val == -65537, rs1_w0_val == -67108865
// opcode: kmmawt2.u ; op1:x24; op2:x9; dest:x27; op1val:0xfffefffffbffffff;  op2val:0xfbff4000ffbf0009
TEST_PKRR_OP(kmmawt2.u, x27, x24, x9, 0x0000000000000000, 0xfffefffffbffffff, 0xfbff4000ffbf0009, x24, x15, 128, x17)

inst_9:
// rs1==x27, rs2==x21, rd==x19, rs2_h3_val == -513, rs1_w0_val == 134217728, rs1_w1_val == -2, rs2_h0_val == 256, rs2_h2_val == 21845
// opcode: kmmawt2.u ; op1:x27; op2:x21; dest:x19; op1val:0xfffffffe08000000;  op2val:0xfdff5555aaaa0100
TEST_PKRR_OP(kmmawt2.u, x19, x27, x21, 0x0000000000000000, 0xfffffffe08000000, 0xfdff5555aaaa0100, x27, x15, 144, x17)

inst_10:
// rs1==x1, rs2==x0, rd==x13, rs2_h3_val == -257, rs1_w1_val == 16384, rs2_h1_val == 32, rs1_w0_val == -65537, rs2_h2_val == -8193, rs2_h0_val == 4
// opcode: kmmawt2.u ; op1:x1; op2:x0; dest:x13; op1val:0x004000fffeffff;  op2val:0xfeffdfff00200004
TEST_PKRR_OP(kmmawt2.u, x13, x1, x0, 0x0000000000000000, 0x004000fffeffff, 0xfeffdfff00200004, x1, x15, 160, x17)

inst_11:
// rs1==x21, rs2==x24, rd==x0, rs2_h3_val == -129, rs2_h1_val == -513, rs1_w1_val == 524288
// opcode: kmmawt2.u ; op1:x21; op2:x24; dest:x0; op1val:0x08000080000000;  op2val:0xff7f4000fdff0009
TEST_PKRR_OP(kmmawt2.u, x0, x21, x24, 0x0000000000000000, 0x08000080000000, 0xff7f4000fdff0009, x21, x15, 176, x17)

inst_12:
// rs1==x28, rs2==x2, rd==x26, rs2_h3_val == -65, rs2_h1_val == 1024, rs1_w1_val == 512, rs2_h2_val == -3, rs1_w0_val == -1
// opcode: kmmawt2.u ; op1:x28; op2:x2; dest:x26; op1val:0x000200ffffffff;  op2val:0xffbffffd04000009
TEST_PKRR_OP(kmmawt2.u, x26, x28, x2, 0x0000000000000000, 0x000200ffffffff, 0xffbffffd04000009, x28, x15, 192, x17)

inst_13:
// rs1==x29, rs2==x6, rd==x21, rs2_h3_val == -33, rs2_h1_val == -5, rs2_h0_val == -9, rs2_h2_val == -9
// opcode: kmmawt2.u ; op1:x29; op2:x6; dest:x21; op1val:0x100000fffeffff;  op2val:0xffdffff7fffbfff7
TEST_PKRR_OP(kmmawt2.u, x21, x29, x6, 0x0000000000000000, 0x100000fffeffff, 0xffdffff7fffbfff7, x29, x15, 208, x17)

inst_14:
// rs1==x7, rs2==x18, rd==x23, rs2_h3_val == -17, rs1_w0_val == -33, rs2_h1_val == -129
// opcode: kmmawt2.u ; op1:x7; op2:x18; dest:x23; op1val:0xfffffffaffffffdf;  op2val:0xffef0005ff7fefff
TEST_PKRR_OP(kmmawt2.u, x23, x7, x18, 0x0000000000000000, 0xfffffffaffffffdf, 0xffef0005ff7fefff, x7, x15, 224, x21)

inst_15:
// rs1==x0, rs2==x20, rd==x31, rs2_h3_val == -9, rs1_w1_val == 67108864, rs2_h2_val == -1025, rs2_h1_val == 8192
// opcode: kmmawt2.u ; op1:x0; op2:x20; dest:x31; op1val:0x400000000000006;  op2val:0xfff7fbff20000007
TEST_PKRR_OP(kmmawt2.u, x31, x0, x20, 0x0000000000000000, 0x400000000000006, 0xfff7fbff20000007, x0, x15, 240, x21)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_16:
// rs1==x17, rs2==x14, rd==x2, rs2_h3_val == -3, rs2_h0_val == 4096, rs1_w0_val == 4, rs2_h2_val == -21846, rs1_w1_val == -16777217
// opcode: kmmawt2.u ; op1:x17; op2:x14; dest:x2; op1val:0xfeffffff00000004;  op2val:0xfffdaaaa00201000
TEST_PKRR_OP(kmmawt2.u, x2, x17, x14, 0x0000000000000000, 0xfeffffff00000004, 0xfffdaaaa00201000, x17, x3, 0, x21)

inst_17:
// rs1==x6, rs2==x28, rd==x16, rs2_h3_val == -2, rs2_h2_val == -33, rs1_w1_val == 0, rs2_h0_val == 2
// opcode: kmmawt2.u ; op1:x6; op2:x28; dest:x16; op1val:0x000000fffffffc;  op2val:0xfffeffdffffa0002
TEST_PKRR_OP(kmmawt2.u, x16, x6, x28, 0x0000000000000000, 0x000000fffffffc, 0xfffeffdffffa0002, x6, x3, 16, x21)

inst_18:
// rs1==x11, rs2==x19, rd==x28, rs2_h3_val == -32768, rs1_w0_val == 8192, rs2_h0_val == -17, rs2_h2_val == 8
// opcode: kmmawt2.u ; op1:x11; op2:x19; dest:x28; op1val:0x00000700002000;  op2val:0x800000080005ffef
TEST_PKRR_OP(kmmawt2.u, x28, x11, x19, 0x0000000000000000, 0x00000700002000, 0x800000080005ffef, x11, x3, 32, x21)

inst_19:
// rs1==x2, rs2==x17, rd==x15, rs2_h3_val == 16384, rs2_h1_val == 128, rs2_h2_val == -2049, rs1_w1_val == -134217729
// opcode: kmmawt2.u ; op1:x2; op2:x17; dest:x15; op1val:0xf7ffffff08000000;  op2val:0x4000f7ff0080fffc
TEST_PKRR_OP(kmmawt2.u, x15, x2, x17, 0x0000000000000000, 0xf7ffffff08000000, 0x4000f7ff0080fffc, x2, x3, 48, x21)

inst_20:
// rs1==x22, rs2==x10, rd==x25, rs2_h3_val == 8192, rs2_h0_val == -65, rs1_w0_val == -536870913, rs2_h1_val == 2048
// opcode: kmmawt2.u ; op1:x22; op2:x10; dest:x25; op1val:0x100000dfffffff;  op2val:0x2000fff90800ffbf
TEST_PKRR_OP(kmmawt2.u, x25, x22, x10, 0x0000000000000000, 0x100000dfffffff, 0x2000fff90800ffbf, x22, x3, 64, x21)

inst_21:
// rs1==x20, rs2==x31, rd==x1, rs2_h3_val == 4096, rs1_w0_val == 262144, rs2_h0_val == 8, rs2_h1_val == -2049
// opcode: kmmawt2.u ; op1:x20; op2:x31; dest:x1; op1val:0xfffffffa00040000;  op2val:0x1000fffff7ff0008
TEST_PKRR_OP(kmmawt2.u, x1, x20, x31, 0x0000000000000000, 0xfffffffa00040000, 0x1000fffff7ff0008, x20, x3, 80, x21)

inst_22:
// rs1==x26, rs2==x12, rd==x14, rs2_h3_val == 2048, rs1_w0_val == 16777216, rs2_h0_val == -21846, rs2_h1_val == -8193
// opcode: kmmawt2.u ; op1:x26; op2:x12; dest:x14; op1val:0xfeffffff01000000;  op2val:0x8007fffdfffaaaa
TEST_PKRR_OP(kmmawt2.u, x14, x26, x12, 0x0000000000000000, 0xfeffffff01000000, 0x8007fffdfffaaaa, x26, x3, 96, x21)

inst_23:
// rs1==x12, rs2==x25, rd==x17, rs2_h3_val == 1024, rs1_w1_val == -262145, rs2_h0_val == 2048, rs2_h1_val == 16
// opcode: kmmawt2.u ; op1:x12; op2:x25; dest:x17; op1val:0xfffbffffffff7fff;  op2val:0x4007fff00100800
TEST_PKRR_OP(kmmawt2.u, x17, x12, x25, 0x0000000000000000, 0xfffbffffffff7fff, 0x4007fff00100800, x12, x3, 112, x21)

inst_24:
// rs1==x8, rs2==x13, rd==x6, rs2_h3_val == 512, rs1_w1_val == -131073, rs2_h1_val == -32768, rs2_h2_val == -32768
// opcode: kmmawt2.u ; op1:x8; op2:x13; dest:x6; op1val:0xfffdffff01000000;  op2val:0x200800080000080
TEST_PKRR_OP(kmmawt2.u, x6, x8, x13, 0x0000000000000000, 0xfffdffff01000000, 0x200800080000080, x8, x3, 128, x21)

inst_25:
// rs1==x9, rs2==x4, rd==x5, rs2_h3_val == 256, rs2_h2_val == -65, rs1_w1_val == 8192
// opcode: kmmawt2.u ; op1:x9; op2:x4; dest:x5; op1val:0x00200000400000;  op2val:0x100ffbf2000fff9
TEST_PKRR_OP(kmmawt2.u, x5, x9, x4, 0x0000000000000000, 0x00200000400000, 0x100ffbf2000fff9, x9, x3, 144, x21)

inst_26:
// rs1==x15, rs2==x22, rd==x29, rs2_h3_val == 128, rs1_w1_val == -8388609
// opcode: kmmawt2.u ; op1:x15; op2:x22; dest:x29; op1val:0xff7fffff00000009;  op2val:0x80000800041000
TEST_PKRR_OP(kmmawt2.u, x29, x15, x22, 0x0000000000000000, 0xff7fffff00000009, 0x80000800041000, x15, x3, 160, x21)

inst_27:
// rs1==x5, rs2==x26, rd==x7, rs2_h3_val == 64, rs2_h2_val == -4097, rs1_w1_val == -65, rs2_h1_val == -1
// opcode: kmmawt2.u ; op1:x5; op2:x26; dest:x7; op1val:0xffffffbffffeffff;  op2val:0x40efffffff0003
TEST_PKRR_OP(kmmawt2.u, x7, x5, x26, 0x0000000000000000, 0xffffffbffffeffff, 0x40efffffff0003, x5, x3, 176, x2)

inst_28:
// rs1==x16, rs2==x27, rd==x18, rs2_h3_val == 32, rs2_h2_val == -129
// opcode: kmmawt2.u ; op1:x16; op2:x27; dest:x18; op1val:0xfffffffcc0000000;  op2val:0x20ff7f08000100
TEST_PKRR_OP(kmmawt2.u, x18, x16, x27, 0x0000000000000000, 0xfffffffcc0000000, 0x20ff7f08000100, x16, x3, 192, x2)

inst_29:
// rs1==x10, rs2==x29, rd==x4, rs2_h3_val == 16, rs2_h1_val == -257, rs1_w0_val == 67108864, rs1_w1_val == 268435456
// opcode: kmmawt2.u ; op1:x10; op2:x29; dest:x4; op1val:0x1000000004000000;  op2val:0x10f7fffefffff7
TEST_PKRR_OP(kmmawt2.u, x4, x10, x29, 0x0000000000000000, 0x1000000004000000, 0x10f7fffefffff7, x10, x3, 208, x2)

inst_30:
// rs1==x31, rs2==x15, rd==x20, rs2_h3_val == 8, rs1_w0_val == 1048576, rs1_w1_val == -2049
// opcode: kmmawt2.u ; op1:x31; op2:x15; dest:x20; op1val:0xfffff7ff00100000;  op2val:0x080007c0000003
TEST_PKRR_OP(kmmawt2.u, x20, x31, x15, 0x0000000000000000, 0xfffff7ff00100000, 0x080007c0000003, x31, x3, 224, x2)

inst_31:
// rs1==x13, rs2==x11, rd==x22, rs2_h3_val == 4, rs1_w0_val == 16
// opcode: kmmawt2.u ; op1:x13; op2:x11; dest:x22; op1val:0x00000000000010;  op2val:0x04000900090001
TEST_PKRR_OP(kmmawt2.u, x22, x13, x11, 0x0000000000000000, 0x00000000000010, 0x04000900090001, x13, x3, 240, x2)

inst_32:
// rs2_h3_val == 2, rs1_w1_val == 262144, rs2_h1_val == -2, rs2_h0_val == 1024
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffffffa;  op2val:0x020006fffe0400
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x040000fffffffa, 0x020006fffe0400, x30, x3, 256, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs2_h3_val == 1, rs2_h0_val == -257, rs1_w0_val == 16384, rs2_h2_val == -257, rs2_h1_val == -9
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00004000;  op2val:0x01fefffff7feff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xbfffffff00004000, 0x01fefffff7feff, x30, x1, 0, x2)

inst_34:
// rs2_h3_val == 0, rs2_h0_val == -1025
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffffa;  op2val:0x00fbff5555fbff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x080000fffffffa, 0x00fbff5555fbff, x30, x1, 16, x2)

inst_35:
// rs2_h3_val == -1, rs1_w0_val == -16385, rs2_h2_val == 16, rs1_w1_val == -536870913
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffbfff;  op2val:0xffff00100800ffdf
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffbfff, 0xffff00100800ffdf, x30, x1, 32, x2)

inst_36:
// rs2_h2_val == -513, rs1_w0_val == -9, rs2_h0_val == 32767
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000007fffffff7;  op2val:0x02fdfffff87fff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x000007fffffff7, 0x02fdfffff87fff, x30, x1, 48, x2)

inst_37:
// rs2_h2_val == -17, rs1_w0_val == 2097152
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00200000;  op2val:0xffbfffef10000006
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffffa00200000, 0xffbfffef10000006, x30, x1, 64, x2)

inst_38:
// rs2_h2_val == -5, rs1_w1_val == -5, rs2_h0_val == 16, rs1_w0_val == -1048577
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffefffff;  op2val:0xeffffffbfff60010
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffffbffefffff, 0xeffffffbfff60010, x30, x1, 80, x2)

inst_39:
// rs2_h2_val == -2, rs1_w1_val == 134217728
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x800000000800000;  op2val:0x800fffe00091000
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x800000000800000, 0x800fffe00091000, x30, x1, 96, x2)

inst_40:
// rs1_w0_val == 524288, rs2_h1_val == 0, rs1_w1_val == -8193
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00080000;  op2val:0xffbffff600000008
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xffffdfff00080000, 0xffbffff600000008, x30, x1, 112, x2)

inst_41:
// rs1_w0_val == 131072, rs2_h2_val == 4, rs2_h0_val == 512
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00020000;  op2val:0xfbff0004feff0200
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfffeffff00020000, 0xfbff0004feff0200, x30, x1, 128, x2)

inst_42:
// rs1_w0_val == 65536, rs2_h2_val == 2048, rs2_h0_val == 21845
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x20000000010000;  op2val:0x030800ff7f5555
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x20000000010000, 0x030800ff7f5555, x30, x1, 144, x2)

inst_43:
// rs1_w0_val == 32768, rs2_h2_val == 0
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000000008000;  op2val:0x40000055551000
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x00000000008000, 0x40000055551000, x30, x1, 160, x2)

inst_44:
// rs1_w0_val == 4096, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00001000;  op2val:0xf7ffffef00063fff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xff7fffff00001000, 0xf7ffffef00063fff, x30, x1, 176, x2)

inst_45:
// rs1_w0_val == 2048, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900000800;  op2val:0x80008000004fffc
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffff900000800, 0x80008000004fffc, x30, x1, 192, x2)

inst_46:
// rs1_w0_val == 1024, rs1_w1_val == -1025
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000400;  op2val:0x09fdff00090010
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000400, 0x09fdff00090010, x30, x1, 208, x2)

inst_47:
// rs1_w0_val == 512, rs1_w1_val == 33554432
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000200;  op2val:0xfff7dfffffbf0002
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x200000000000200, 0xfff7dfffffbf0002, x30, x1, 224, x2)

inst_48:
// rs1_w0_val == 256, rs1_w1_val == -67108865, rs2_h1_val == 32767
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000100;  op2val:0x1000fff97fffffff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000100, 0x1000fff97fffffff, x30, x1, 240, x2)

inst_49:
// rs1_w0_val == 128, rs1_w1_val == 4194304
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000080;  op2val:0xdfff0009fffe3fff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x40000000000080, 0xdfff0009fffe3fff, x30, x1, 256, x2)

inst_50:
// rs1_w0_val == 64, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000040;  op2val:0x100fff90000aaaa
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x08000000000040, 0x100fff90000aaaa, x30, x1, 272, x2)

inst_51:
// rs1_w0_val == 32, rs2_h1_val == -1025, rs2_h2_val == 4096, rs2_h0_val == -2049, rs1_w1_val == 2147483647
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000020;  op2val:0x7fff1000fbfff7ff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000020, 0x7fff1000fbfff7ff, x30, x1, 288, x2)

inst_52:
// rs1_w0_val == 8, rs1_w1_val == -4194305
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000008;  op2val:0xfffa0004fffaaaaa
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000008, 0xfffa0004fffaaaaa, x30, x1, 304, x2)

inst_53:
// rs1_w0_val == 2, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000002;  op2val:0x40000006fffb0400
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x00000700000002, 0x40000006fffb0400, x30, x1, 320, x2)

inst_54:
// rs1_w0_val == 1, rs2_h0_val == -513
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000001;  op2val:0x8000fff60010fdff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x400000000000001, 0x8000fff60010fdff, x30, x1, 336, x2)

inst_55:
// rs1_w0_val == 0, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000000;  op2val:0xfdffeffffff7fdff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x00000900000000, 0xfdffeffffff7fdff, x30, x1, 352, x2)

inst_56:
// rs2_h2_val == 8192, rs1_w1_val == 4096
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x001000c0000000;  op2val:0xfbff20000000fdff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x001000c0000000, 0xfbff20000000fdff, x30, x1, 368, x2)

inst_57:
// rs2_h2_val == 1024, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00010000;  op2val:0x00040000100005
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfffbffff00010000, 0x00040000100005, x30, x1, 384, x2)

inst_58:
// rs2_h2_val == 512, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffeffff;  op2val:0xfffc0200fff6feff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffeffff, 0xfffc0200fff6feff, x30, x1, 400, x2)

inst_59:
// rs2_h2_val == 256, rs2_h1_val == 2
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000200;  op2val:0x8001000002f7ff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x00020000000200, 0x8001000002f7ff, x30, x1, 416, x2)

inst_60:
// rs2_h2_val == 128, rs1_w0_val == -2097153, rs2_h1_val == -16385
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffaffdfffff;  op2val:0xffbf0080bffffff8
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffffaffdfffff, 0xffbf0080bffffff8, x30, x1, 432, x2)

inst_61:
// rs2_h2_val == 64, rs2_h0_val == -8193, rs1_w0_val == 268435456
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe10000000;  op2val:0x10000401000dfff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffffe10000000, 0x10000401000dfff, x30, x1, 448, x2)

inst_62:
// rs2_h2_val == 32, rs1_w0_val == 33554432
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x400000002000000;  op2val:0x1000020fff80007
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x400000002000000, 0x1000020fff80007, x30, x1, 464, x2)

inst_63:
// rs2_h2_val == 2, rs1_w0_val == 536870912, rs2_h1_val == 512, rs1_w1_val == 1431655765
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x5555555520000000;  op2val:0x200000202000009
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x5555555520000000, 0x200000202000009, x30, x1, 480, x2)

inst_64:
// rs2_h1_val == -4097, rs1_w1_val == 536870912
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000020000;  op2val:0xfffeffffefff0200
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x2000000000020000, 0xfffeffffefff0200, x30, x1, 496, x2)

inst_65:
// rs2_h1_val == -33, rs1_w1_val == 32
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000010;  op2val:0x052000ffdf0007
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x00002000000010, 0x052000ffdf0007, x30, x1, 512, x2)

inst_66:
// rs2_h1_val == -17, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000fffffffa;  op2val:0xffbffff8ffefffbf
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xc0000000fffffffa, 0xffbffff8ffefffbf, x30, x1, 528, x2)

inst_67:
// rs2_h1_val == -3, rs2_h0_val == -32768
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffffdf;  op2val:0xfff90006fffd8000
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffffdf, 0xfff90006fffd8000, x30, x1, 544, x2)

inst_68:
// rs2_h1_val == 16384, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000006;  op2val:0xfffefbff4000fff7
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x2000000000000006, 0xfffefbff4000fff7, x30, x1, 560, x2)

inst_69:
// rs2_h1_val == 64, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000010;  op2val:0x8000fffe00403fff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000010, 0x8000fffe00403fff, x30, x1, 576, x2)

inst_70:
// rs2_h0_val == 16384, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000009;  op2val:0xfffb0006ffef4000
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x00002000000009, 0xfffb0006ffef4000, x30, x1, 592, x2)

inst_71:
// rs2_h0_val == 8192, rs1_w1_val == 1
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000005;  op2val:0xfffcffffffdf2000
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x00000100000005, 0xfffcffffffdf2000, x30, x1, 608, x2)

inst_72:
// rs2_h0_val == 64, rs1_w1_val == -32769, rs1_w0_val == -134217729
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffff7ffffff;  op2val:0xbffffff900200040
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xffff7ffff7ffffff, 0xbffffff900200040, x30, x1, 624, x2)

inst_73:
// rs2_h0_val == 32, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000007;  op2val:0xdfff100002000020
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000007, 0xdfff100002000020, x30, x1, 640, x2)

inst_74:
// rs2_h0_val == 0, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fbffffff;  op2val:0xfffcffff01000000
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x4000000fbffffff, 0xfffcffff01000000, x30, x1, 656, x2)

inst_75:
// rs1_w1_val == -1431655766, rs1_w0_val == -262145
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffbffff;  op2val:0x40efff3fff0040
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffbffff, 0x40efff3fff0040, x30, x1, 672, x2)

inst_76:
// rs1_w1_val == -268435457, rs1_w0_val == -513
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffffdff;  op2val:0xfff9fdfff7ff0004
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xeffffffffffffdff, 0xfff9fdfff7ff0004, x30, x1, 688, x2)

inst_77:
// rs1_w1_val == -33554433, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000001;  op2val:0x057fff00090005
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000001, 0x057fff00090005, x30, x1, 704, x2)

inst_78:
// rs1_w1_val == -2097153, rs2_h0_val == -2
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffffff6;  op2val:0x0800010020fffe
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xffdffffffffffff6, 0x0800010020fffe, x30, x1, 720, x2)

inst_79:
// rs1_w1_val == -1048577, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffff9;  op2val:0x04aaaafff8dfff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffff9, 0x04aaaafff8dfff, x30, x1, 736, x2)

inst_80:
// rs1_w1_val == -524289, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00200000;  op2val:0x800ff7ffff7ffff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00200000, 0x800ff7ffff7ffff, x30, x1, 752, x2)

inst_81:
// rs1_w1_val == -4097, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffbffffff;  op2val:0x55550005fffcfffe
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xffffeffffbffffff, 0x55550005fffcfffe, x30, x1, 768, x2)

inst_82:
// rs1_w1_val == -513, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffefffff;  op2val:0xffff0100c0000010
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffdffffefffff, 0xffff0100c0000010, x30, x1, 784, x2)

inst_83:
// rs1_w1_val == -257, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000004;  op2val:0x058000f7ff3fff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000004, 0x058000f7ff3fff, x30, x1, 800, x2)

inst_84:
// rs1_w1_val == -129, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000010;  op2val:0x10fff6fffcfffa
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000010, 0x10fff6fffcfffa, x30, x1, 816, x2)

inst_85:
// rs1_w1_val == -33, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffdff;  op2val:0xfff7fff700005555
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffdff, 0xfff7fff700005555, x30, x1, 832, x2)

inst_86:
// rs1_w1_val == -17, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00010000;  op2val:0xfff70800f7fffeff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xffffffef00010000, 0xfff70800f7fffeff, x30, x1, 848, x2)

inst_87:
// rs1_w1_val == -9, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000006;  op2val:0x555500060400c000
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffff700000006, 0x555500060400c000, x30, x1, 864, x2)

inst_88:
// rs1_w1_val == -3, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdefffffff;  op2val:0x07800000060004
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffffdefffffff, 0x07800000060004, x30, x1, 880, x2)

inst_89:
// rs1_w1_val == -2147483648, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000400000;  op2val:0x55550002c0000007
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x8000000000400000, 0x55550002c0000007, x30, x1, 896, x2)

inst_90:
// rs1_w1_val == 1073741824, rs1_w0_val == -17
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffffffef;  op2val:0x80fff70100f7ff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x40000000ffffffef, 0x80fff70100f7ff, x30, x1, 912, x2)

inst_91:
// rs1_w1_val == 16777216, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x1000000f7ffffff;  op2val:0x200fffdaaaaffdf
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x1000000f7ffffff, 0x200fffdaaaaffdf, x30, x1, 928, x2)

inst_92:
// rs1_w1_val == 8388608, rs1_w0_val == -3
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffffd;  op2val:0xfff6ffff01000003
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x800000fffffffd, 0xfff6ffff01000003, x30, x1, 944, x2)

inst_93:
// rs1_w1_val == 131072, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x020000fffffdff;  op2val:0xeffffff9c0007fff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x020000fffffdff, 0xeffffff9c0007fff, x30, x1, 960, x2)

inst_94:
// rs1_w1_val == 65536, rs2_h0_val == -3
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000200;  op2val:0xfff600080400fffd
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x01000000000200, 0xfff600080400fffd, x30, x1, 976, x2)

inst_95:
// rs1_w1_val == 32768, rs1_w0_val == -129
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffffff7f;  op2val:0x4000fbfffff80400
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x008000ffffff7f, 0x4000fbfffff80400, x30, x1, 992, x2)

inst_96:
// rs1_w1_val == 2048, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00080000010000;  op2val:0x05fff804000008
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x00080000010000, 0x05fff804000008, x30, x1, 1008, x2)

inst_97:
// rs1_w1_val == 256, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000100;  op2val:0x800bfff0009ffdf
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x00010000000100, 0x800bfff0009ffdf, x30, x1, 1024, x2)

inst_98:
// rs1_w1_val == 128, rs2_h0_val == -5, rs1_w0_val == -16777217
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000080feffffff;  op2val:0xbfff00200003fffb
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x000080feffffff, 0xbfff00200003fffb, x30, x1, 1040, x2)

inst_99:
// rs1_w1_val == 64, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00004000200000;  op2val:0xaaaa0040efffffdf
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x00004000200000, 0xaaaa0040efffffdf, x30, x1, 1056, x2)

inst_100:
// rs1_w1_val == 16, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00001000080000;  op2val:0x1010005555f7ff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x00001000080000, 0x1010005555f7ff, x30, x1, 1072, x2)

inst_101:
// rs1_w1_val == 8, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000800400000;  op2val:0xfffa00040006fff9
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x00000800400000, 0xfffa00040006fff9, x30, x1, 1088, x2)

inst_102:
// rs1_w1_val == -1, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000200;  op2val:0xfdffffbf8000ffdf
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xffffffff00000200, 0xfdffffbf8000ffdf, x30, x1, 1104, x2)

inst_103:
// rs1_w0_val == -1431655766, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffaaaaaaaa;  op2val:0xffdf0010fffa0100
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x7fffffffaaaaaaaa, 0xffdf0010fffa0100, x30, x1, 1120, x2)

inst_104:
// rs1_w0_val == 2147483647, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x10000007fffffff;  op2val:0xfff70080fffafffc
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x10000007fffffff, 0xfff70080fffafffc, x30, x1, 1136, x2)

inst_105:
// rs1_w0_val == -1073741825, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000100bfffffff;  op2val:0x09dfff3ffffffe
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x000100bfffffff, 0x09dfff3ffffffe, x30, x1, 1152, x2)

inst_106:
// rs1_w0_val == -4194305, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x55555555ffbfffff;  op2val:0x80008000fff77fff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x55555555ffbfffff, 0x80008000fff77fff, x30, x1, 1168, x2)

inst_107:
// rs1_w0_val == -524289, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffff7ffff;  op2val:0x0920000010aaaa
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfff7fffffff7ffff, 0x0920000010aaaa, x30, x1, 1184, x2)

inst_108:
// rs1_w0_val == -131073, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffdffff;  op2val:0x000080fffa2000
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffdffff, 0x000080fffa2000, x30, x1, 1200, x2)

inst_109:
// rs1_w0_val == -8193, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffffdfff;  op2val:0x80feff0010c000
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x20000000ffffdfff, 0x80feff0010c000, x30, x1, 1216, x2)

inst_110:
// rs2_h1_val == 1, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xc00000007fffffff;  op2val:0xfdffaaaa0001fff8
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xc00000007fffffff, 0xfdffaaaa0001fff8, x30, x1, 1232, x2)

inst_111:
// rs1_w0_val == -2049, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffffff7ff;  op2val:0x100fffe00093fff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffff7ff, 0x100fffe00093fff, x30, x1, 1248, x2)

inst_112:
// rs1_w0_val == -1025, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffffbff;  op2val:0xfffc040000200009
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x004000fffffbff, 0xfffc040000200009, x30, x1, 1264, x2)

inst_113:
// rs1_w0_val == -257, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffffeff;  op2val:0x7fff3ffffff85555
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffffeff, 0x7fff3ffffff85555, x30, x1, 1280, x2)

inst_114:
// rs2_h0_val == -16385, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000008000;  op2val:0xffffff7f0800bfff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x1000000000008000, 0xffffff7f0800bfff, x30, x1, 1296, x2)

inst_115:
// rs1_w0_val == -65, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffffffbf;  op2val:0x030008ffeffff7
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x000400ffffffbf, 0x030008ffeffff7, x30, x1, 1312, x2)

inst_116:
// rs1_w0_val == -5, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000006fffffffb;  op2val:0xfffb0004dfff0200
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x000006fffffffb, 0xfffb0004dfff0200, x30, x1, 1328, x2)

inst_117:
// rs1_w0_val == -8388609, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x200000ff7fffff;  op2val:0x100ff7ffbffc000
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x200000ff7fffff, 0x100ff7ffbffc000, x30, x1, 1344, x2)

inst_118:
// rs1_w0_val == -33554433, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000010fdffffff;  op2val:0xf7ff000508000003
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x000010fdffffff, 0xf7ff000508000003, x30, x1, 1360, x2)

inst_119:
// rs1_w0_val == -2, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000010fffffffe;  op2val:0xfefffffd0080ff7f
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x000010fffffffe, 0xfefffffd0080ff7f, x30, x1, 1376, x2)

inst_120:
// rs1_w0_val == 1073741824, 
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000540000000;  op2val:0xff7f0008bffffdff
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x00000540000000, 0xff7f0008bffffdff, x30, x1, 1392, x2)

inst_121:
// rs2_h3_val == 21845, rs2_h1_val == 256, rs2_h2_val == 1, rs1_w1_val == 2, rs2_h0_val == -129, rs1_w0_val == 8388608
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000200800000;  op2val:0x555500010100ff7f
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x00000200800000, 0x555500010100ff7f, x30, x1, 1408, x2)

inst_122:
// rs2_h3_val == 32767, rs2_h2_val == -1, rs1_w1_val == -16385, rs2_h1_val == 4096, rs2_h0_val == 128
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000009;  op2val:0x7fffffff10000080
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000009, 0x7fffffff10000080, x30, x1, 1424, x2)

inst_123:
// rs2_h3_val == -129, rs2_h1_val == -513, rs1_w1_val == 524288
// opcode: kmmawt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x08000080000000;  op2val:0xff7f4000fdff0009
TEST_PKRR_OP(kmmawt2.u, x31, x30, x29, 0x0000000000000000, 0x08000080000000, 0xff7f4000fdff0009, x30, x1, 1440, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 182*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
