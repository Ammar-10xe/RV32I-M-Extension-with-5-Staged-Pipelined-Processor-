
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kdmabt instruction of the RISC-V RV64PZicsr extension for the kdmabt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kdmabt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rd != rs2, rs1==x15, rs2==x18, rd==x15, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs1_h3_val == 8, rs1_h2_val == 32, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h2_val == -21846
// opcode: kdmabt ; op1:x15; op2:x18; dest:x15; op1val:0x080020c0008000;  op2val:0x09aaaafffa0007
TEST_PKRR_OP(kdmabt, x15, x15, x18, 0x0000000000000000, 0x080020c0008000, 0x09aaaafffa0007, x15, x3, 0, x4)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x27, rd==x18, rs1_h3_val == rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h0_val == 2, rs1_h2_val == 128, rs1_h1_val == 128, rs2_h2_val == -3, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -32768, rs1_h0_val == 21845, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: kdmabt ; op1:x28; op2:x27; dest:x18; op1val:0xfff6008000805555;  op2val:0xfff6fffd80000002
TEST_PKRR_OP(kdmabt, x18, x28, x27, 0x0000000000000000, 0xfff6008000805555, 0xfff6fffd80000002, x28, x3, 16, x4)

inst_2:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x22, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val == -65, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -32768, rs1_h3_val == -32768, rs2_h2_val == 4, rs1_h0_val == -129
// opcode: kdmabt ; op1:x30; op2:x30; dest:x22; op1val:0x80000009ffbfff7f;  op2val:0x3fff0004fff98000
TEST_PKRR_OP(kdmabt, x22, x30, x30, 0x0000000000000000, 0x80000009ffbfff7f, 0x3fff0004fff98000, x30, x3, 32, x4)

inst_3:
// rs1 == rs2 == rd, rs1==x2, rs2==x2, rd==x2, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h2_val == -2049, rs1_h3_val == 64, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val == 32767, rs2_h0_val == -5, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 8
// opcode: kdmabt ; op1:x2; op2:x2; dest:x2; op1val:0x407fffc0000007;  op2val:0xfff6f7ff0008fffb
TEST_PKRR_OP(kdmabt, x2, x2, x2, 0x0000000000000000, 0x407fffc0000007, 0xfff6f7ff0008fffb, x2, x3, 48, x4)

inst_4:
// rs2 == rd != rs1, rs1==x6, rs2==x1, rd==x1, rs1_h2_val == rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == -1025, rs2_h3_val == 8192, rs1_h0_val == -257
// opcode: kdmabt ; op1:x6; op2:x1; dest:x1; op1val:0xfff6fff80006feff;  op2val:0x2000fff8fff8fbff
TEST_PKRR_OP(kdmabt, x1, x6, x1, 0x0000000000000000, 0xfff6fff80006feff, 0x2000fff8fff8fbff, x6, x3, 64, x4)

inst_5:
// rs1==x29, rs2==x23, rd==x21, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val == 4, rs1_h2_val == -1, rs1_h1_val == 32, rs1_h0_val == 16
// opcode: kdmabt ; op1:x29; op2:x23; dest:x21; op1val:0x04ffff00200010;  op2val:0xfffc00048000c000
TEST_PKRR_OP(kdmabt, x21, x29, x23, 0x0000000000000000, 0x04ffff00200010, 0xfffc00048000c000, x29, x3, 80, x4)

inst_6:
// rs1==x26, rs2==x22, rd==x27, rs1_h1_val == rs2_h1_val, rs2_h3_val == -65, rs2_h1_val == -513, rs1_h1_val == -513, rs1_h0_val == -2049, rs1_h2_val == -5
// opcode: kdmabt ; op1:x26; op2:x22; dest:x27; op1val:0x04fffbfdfff7ff;  op2val:0xffbf0007fdff0009
TEST_PKRR_OP(kdmabt, x27, x26, x22, 0x0000000000000000, 0x04fffbfdfff7ff, 0xffbf0007fdff0009, x26, x3, 96, x4)

inst_7:
// rs1==x1, rs2==x12, rd==x25, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h2_val == 16, rs1_h0_val == 64, rs2_h3_val == -17, rs2_h1_val == 1
// opcode: kdmabt ; op1:x1; op2:x12; dest:x25; op1val:0x80007fff3fff0040;  op2val:0xffef00100001fff9
TEST_PKRR_OP(kdmabt, x25, x1, x12, 0x0000000000000000, 0x80007fff3fff0040, 0xffef00100001fff9, x1, x3, 112, x4)

inst_8:
// rs1==x18, rs2==x31, rd==x6, rs1_h0_val == rs2_h0_val, rs1_h2_val == 4096, rs1_h0_val == -3, rs2_h3_val == 64, rs2_h0_val == -3
// opcode: kdmabt ; op1:x18; op2:x31; dest:x6; op1val:0x0610000007fffd;  op2val:0x40fff90006fffd
TEST_PKRR_OP(kdmabt, x6, x18, x31, 0x0000000000000000, 0x0610000007fffd, 0x40fff90006fffd, x18, x3, 128, x4)

inst_9:
// rs1==x20, rs2==x10, rd==x17, rs2_h3_val == -21846, rs1_h3_val == 256, rs1_h2_val == -2049, rs2_h0_val == 256, rs1_h1_val == 4096
// opcode: kdmabt ; op1:x20; op2:x10; dest:x17; op1val:0x100f7ff10000040;  op2val:0xaaaaaaaa00060100
TEST_PKRR_OP(kdmabt, x17, x20, x10, 0x0000000000000000, 0x100f7ff10000040, 0xaaaaaaaa00060100, x20, x3, 144, x4)

inst_10:
// rs1==x5, rs2==x24, rd==x23, rs2_h3_val == 21845, rs1_h3_val == 1024, rs1_h2_val == 8192, rs2_h0_val == 8, rs2_h2_val == -33, rs1_h0_val == 0, rs1_h1_val == -33
// opcode: kdmabt ; op1:x5; op2:x24; dest:x23; op1val:0x4002000ffdf0000;  op2val:0x5555ffdf3fff0008
TEST_PKRR_OP(kdmabt, x23, x5, x24, 0x0000000000000000, 0x4002000ffdf0000, 0x5555ffdf3fff0008, x5, x3, 160, x4)

inst_11:
// rs1==x21, rs2==x19, rd==x28, rs2_h3_val == 32767, rs1_h0_val == 4096, rs2_h0_val == -9, rs2_h2_val == 2, rs1_h2_val == 8
// opcode: kdmabt ; op1:x21; op2:x19; dest:x28; op1val:0x80000008fff81000;  op2val:0x7fff00020006fff7
TEST_PKRR_OP(kdmabt, x28, x21, x19, 0x0000000000000000, 0x80000008fff81000, 0x7fff00020006fff7, x21, x3, 176, x4)

inst_12:
// rs1==x16, rs2==x26, rd==x31, rs2_h3_val == -16385, rs2_h2_val == -65, rs1_h1_val == 512, rs1_h3_val == -257, rs2_h1_val == 1024, rs1_h0_val == -1025
// opcode: kdmabt ; op1:x16; op2:x26; dest:x31; op1val:0xfeff10000200fbff;  op2val:0xbfffffbf0400fff7
TEST_PKRR_OP(kdmabt, x31, x16, x26, 0x0000000000000000, 0xfeff10000200fbff, 0xbfffffbf0400fff7, x16, x3, 192, x4)

inst_13:
// rs1==x14, rs2==x20, rd==x0, rs2_h3_val == -8193, rs1_h3_val == -513, rs2_h0_val == 4096, rs2_h1_val == -16385, rs2_h2_val == 256
// opcode: kdmabt ; op1:x14; op2:x20; dest:x0; op1val:0xfdfffffb00071000;  op2val:0xdfff0100bfff1000
TEST_PKRR_OP(kdmabt, x0, x14, x20, 0x0000000000000000, 0xfdfffffb00071000, 0xdfff0100bfff1000, x14, x3, 208, x4)

inst_14:
// rs1==x17, rs2==x29, rd==x30, rs2_h3_val == -4097, rs2_h1_val == -3, rs2_h2_val == 8, rs1_h2_val == -2
// opcode: kdmabt ; op1:x17; op2:x29; dest:x30; op1val:0xfdfffffe10005555;  op2val:0xefff0008fffd0002
TEST_PKRR_OP(kdmabt, x30, x17, x29, 0x0000000000000000, 0xfdfffffe10005555, 0xefff0008fffd0002, x17, x3, 224, x4)

inst_15:
// rs1==x25, rs2==x14, rd==x29, rs2_h3_val == -2049, rs1_h1_val == 2, rs2_h2_val == -17, rs2_h1_val == -1, rs2_h0_val == -2
// opcode: kdmabt ; op1:x25; op2:x14; dest:x29; op1val:0x0500070002fffc;  op2val:0xf7ffffeffffffffe
TEST_PKRR_OP(kdmabt, x29, x25, x14, 0x0000000000000000, 0x0500070002fffc, 0xf7ffffeffffffffe, x25, x3, 240, x4)

inst_16:
// rs1==x22, rs2==x9, rd==x20, rs2_h3_val == -1025, rs1_h0_val == -5, rs1_h1_val == 2048
// opcode: kdmabt ; op1:x22; op2:x9; dest:x20; op1val:0xfff6c0000800fffb;  op2val:0xfbff01000007fffd
TEST_PKRR_OP(kdmabt, x20, x22, x9, 0x0000000000000000, 0xfff6c0000800fffb, 0xfbff01000007fffd, x22, x3, 256, x4)

inst_17:
// rs1==x24, rs2==x25, rd==x7, rs2_h3_val == -513, rs2_h2_val == -1025, rs2_h0_val == -1, rs1_h3_val == 0, rs1_h2_val == 1, rs1_h1_val == 16, rs1_h0_val == 128, rs2_h1_val == 32
// opcode: kdmabt ; op1:x24; op2:x25; dest:x7; op1val:0x00000100100080;  op2val:0xfdfffbff0020ffff
TEST_PKRR_OP(kdmabt, x7, x24, x25, 0x0000000000000000, 0x00000100100080, 0xfdfffbff0020ffff, x24, x3, 272, x4)

inst_18:
// rs1==x4, rs2==x11, rd==x10, rs2_h3_val == -257, rs2_h1_val == -129, rs2_h0_val == -2049, rs1_h2_val == 2, rs2_h2_val == 32767
// opcode: kdmabt ; op1:x4; op2:x11; dest:x10; op1val:0xfdff0002fffafff6;  op2val:0xfeff7fffff7ff7ff
TEST_PKRR_OP(kdmabt, x10, x4, x11, 0x0000000000000000, 0xfdff0002fffafff6, 0xfeff7fffff7ff7ff, x4, x3, 288, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_19:
// rs1==x7, rs2==x3, rd==x5, rs2_h3_val == -129, rs2_h0_val == -257, rs2_h2_val == 8192, rs1_h1_val == -21846, rs1_h0_val == -16385, rs1_h2_val == -17
// opcode: kdmabt ; op1:x7; op2:x3; dest:x5; op1val:0xfeffffefaaaabfff;  op2val:0xff7f2000fdfffeff
TEST_PKRR_OP(kdmabt, x5, x7, x3, 0x0000000000000000, 0xfeffffefaaaabfff, 0xff7f2000fdfffeff, x7, x1, 0, x2)

inst_20:
// rs1==x0, rs2==x5, rd==x13, rs2_h3_val == -33, rs1_h1_val == -257, rs2_h2_val == -9, rs1_h2_val == 21845
// opcode: kdmabt ; op1:x0; op2:x5; dest:x13; op1val:0xfdff5555feff0009;  op2val:0xffdffff7fffa0002
TEST_PKRR_OP(kdmabt, x13, x0, x5, 0x0000000000000000, 0xfdff5555feff0009, 0xffdffff7fffa0002, x0, x1, 16, x2)

inst_21:
// rs1==x13, rs2==x21, rd==x8, rs2_h3_val == -9, rs1_h0_val == -9, rs2_h0_val == -513, rs1_h2_val == -257
// opcode: kdmabt ; op1:x13; op2:x21; dest:x8; op1val:0xfffcfeffffbffff7;  op2val:0xfff7fff90020fdff
TEST_PKRR_OP(kdmabt, x8, x13, x21, 0x0000000000000000, 0xfffcfeffffbffff7, 0xfff7fff90020fdff, x13, x1, 32, x2)

inst_22:
// rs1==x23, rs2==x4, rd==x26, rs2_h3_val == -5, rs1_h2_val == -65, rs2_h2_val == -4097, rs1_h3_val == -33, rs2_h1_val == 4096
// opcode: kdmabt ; op1:x23; op2:x4; dest:x26; op1val:0xffdfffbfffbffffd;  op2val:0xfffbefff10000002
TEST_PKRR_OP(kdmabt, x26, x23, x4, 0x0000000000000000, 0xffdfffbfffbffffd, 0xfffbefff10000002, x23, x1, 48, x2)

inst_23:
// rs1==x19, rs2==x13, rd==x4, rs2_h3_val == -3, rs1_h3_val == -9, rs1_h2_val == -9, rs2_h2_val == -32768
// opcode: kdmabt ; op1:x19; op2:x13; dest:x4; op1val:0xfff7fff70005fffb;  op2val:0xfffd80003ffffffe
TEST_PKRR_OP(kdmabt, x4, x19, x13, 0x0000000000000000, 0xfff7fff70005fffb, 0xfffd80003ffffffe, x19, x1, 64, x2)

inst_24:
// rs1==x11, rs2==x17, rd==x3, rs2_h3_val == -2, rs2_h0_val == -8193, rs1_h2_val == -4097, rs1_h3_val == 8192
// opcode: kdmabt ; op1:x11; op2:x17; dest:x3; op1val:0x2000efff1000feff;  op2val:0xfffefff9bfffdfff
TEST_PKRR_OP(kdmabt, x3, x11, x17, 0x0000000000000000, 0x2000efff1000feff, 0xfffefff9bfffdfff, x11, x1, 80, x2)

inst_25:
// rs1==x27, rs2==x16, rd==x12, rs2_h3_val == -32768, rs2_h1_val == 32767
// opcode: kdmabt ; op1:x27; op2:x16; dest:x12; op1val:0xffdffeff0010ff7f;  op2val:0x8000fff97fff3fff
TEST_PKRR_OP(kdmabt, x12, x27, x16, 0x0000000000000000, 0xffdffeff0010ff7f, 0x8000fff97fff3fff, x27, x1, 96, x2)

inst_26:
// rs1==x12, rs2==x8, rd==x24, rs2_h3_val == 16384, rs1_h1_val == 256, rs1_h0_val == -4097
// opcode: kdmabt ; op1:x12; op2:x8; dest:x24; op1val:0xfff7c0000100efff;  op2val:0x400000090008fbff
TEST_PKRR_OP(kdmabt, x24, x12, x8, 0x0000000000000000, 0xfff7c0000100efff, 0x400000090008fbff, x12, x1, 112, x2)

inst_27:
// rs1==x31, rs2==x0, rd==x19, rs2_h3_val == 4096, rs2_h1_val == 2, rs1_h0_val == 512, rs2_h0_val == -21846
// opcode: kdmabt ; op1:x31; op2:x0; dest:x19; op1val:0xfff8fffc00050200;  op2val:0x10007fff0002aaaa
TEST_PKRR_OP(kdmabt, x19, x31, x0, 0x0000000000000000, 0xfff8fffc00050200, 0x10007fff0002aaaa, x31, x1, 128, x2)

inst_28:
// rs1==x10, rs2==x6, rd==x14, rs2_h3_val == 2048, rs2_h2_val == 32, rs1_h1_val == -2, rs1_h3_val == 512, rs2_h0_val == 128
// opcode: kdmabt ; op1:x10; op2:x6; dest:x14; op1val:0x200fff8fffeefff;  op2val:0x800002000090080
TEST_PKRR_OP(kdmabt, x14, x10, x6, 0x0000000000000000, 0x200fff8fffeefff, 0x800002000090080, x10, x1, 144, x2)

inst_29:
// rs1==x3, rs2==x7, rd==x9, rs2_h3_val == 1024, rs1_h1_val == 1024, rs2_h1_val == 64, rs1_h3_val == 4096, rs1_h0_val == -1
// opcode: kdmabt ; op1:x3; op2:x7; dest:x9; op1val:0x1000fffc0400ffff;  op2val:0x400f7ff00400100
TEST_PKRR_OP(kdmabt, x9, x3, x7, 0x0000000000000000, 0x1000fffc0400ffff, 0x400f7ff00400100, x3, x1, 160, x2)

inst_30:
// rs1==x8, rs2==x28, rd==x16, rs2_h3_val == 512, rs1_h0_val == -33, rs1_h1_val == 8
// opcode: kdmabt ; op1:x8; op2:x28; dest:x16; op1val:0xfffa00090008ffdf;  op2val:0x2000008bfffffff
TEST_PKRR_OP(kdmabt, x16, x8, x28, 0x0000000000000000, 0xfffa00090008ffdf, 0x2000008bfffffff, x8, x1, 176, x2)

inst_31:
// rs1==x9, rs2==x15, rd==x11, rs2_h3_val == 256, rs2_h1_val == -257, rs1_h3_val == 32
// opcode: kdmabt ; op1:x9; op2:x15; dest:x11; op1val:0x203fff00085555;  op2val:0x1007ffffeffdfff
TEST_PKRR_OP(kdmabt, x11, x9, x15, 0x0000000000000000, 0x203fff00085555, 0x1007ffffeffdfff, x9, x1, 192, x2)

inst_32:
// rs2_h3_val == 128, rs1_h2_val == -33, rs1_h3_val == 1, rs2_h0_val == 0
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x01ffdf0200fff8;  op2val:0x80000200050000
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x01ffdf0200fff8, 0x80000200050000, x30, x1, 208, x2)

inst_33:
// rs2_h3_val == 32, rs1_h1_val == -17, rs1_h2_val == -32768
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x408000ffeffffc;  op2val:0x20ffeffff90006
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x408000ffeffffc, 0x20ffeffff90006, x30, x1, 224, x2)

inst_34:
// rs2_h3_val == 16, rs1_h2_val == 16384, rs1_h3_val == 32767, rs1_h1_val == 32767
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x7fff40007fff0040;  op2val:0x10f7ff7ffffffb
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x7fff40007fff0040, 0x10f7ff7ffffffb, x30, x1, 240, x2)

inst_35:
// rs2_h3_val == 8, rs2_h2_val == 21845
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x03feffc000efff;  op2val:0x08555510000000
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x03feffc000efff, 0x08555510000000, x30, x1, 256, x2)

inst_36:
// rs2_h3_val == 4, rs1_h1_val == -3, rs2_h1_val == 256
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x030006fffdc000;  op2val:0x04efff0100fff9
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x030006fffdc000, 0x04efff0100fff9, x30, x1, 272, x2)

inst_37:
// rs2_h3_val == 2, rs2_h0_val == 32, rs1_h3_val == -65, rs1_h2_val == -3
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffd0006fff6;  op2val:0x020008fffd0020
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xffbffffd0006fff6, 0x020008fffd0020, x30, x1, 288, x2)

inst_38:
// rs1_h1_val == -5, rs2_h2_val == -1, rs1_h3_val == -4097, rs2_h1_val == -9
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xefff0080fffb0005;  op2val:0xeffffffffff73fff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xefff0080fffb0005, 0xeffffffffff73fff, x30, x1, 304, x2)

inst_39:
// rs1_h1_val == -32768, rs2_h2_val == -16385, rs2_h1_val == -4097
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x00efff80000007;  op2val:0x20bfffefff0008
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x00efff80000007, 0x20bfffefff0008, x30, x1, 320, x2)

inst_40:
// rs1_h1_val == 16384, rs2_h1_val == -65, rs1_h0_val == 256, rs1_h2_val == -1025, rs1_h3_val == -3, rs2_h2_val == 1
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfbff40000100;  op2val:0xffef0001ffbffffa
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xfffdfbff40000100, 0xffef0001ffbffffa, x30, x1, 336, x2)

inst_41:
// rs1_h1_val == 8192, rs1_h2_val == -8193, rs2_h1_val == 128, rs2_h0_val == 1
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x40dfff2000ff7f;  op2val:0xfdfffff600800001
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x40dfff2000ff7f, 0xfdfffff600800001, x30, x1, 352, x2)

inst_42:
// rs1_h1_val == 64, rs2_h3_val == -1, rs2_h1_val == 8192, rs2_h0_val == 21845
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfeff00080040fffa;  op2val:0xffff000220005555
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xfeff00080040fffa, 0xffff000220005555, x30, x1, 368, x2)

inst_43:
// rs1_h1_val == 4, rs1_h2_val == -513
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffafdff00040007;  op2val:0xaaaa0009fff71000
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xfffafdff00040007, 0xaaaa0009fff71000, x30, x1, 384, x2)

inst_44:
// rs1_h1_val == 1, rs1_h0_val == 4
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x2000000200010004;  op2val:0xaaaafff90007fff7
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x2000000200010004, 0xaaaafff90007fff7, x30, x1, 400, x2)

inst_45:
// rs1_h1_val == 0, rs1_h3_val == -1025, rs2_h0_val == -17
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfbff400000000010;  op2val:0xfffe00013fffffef
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xfbff400000000010, 0xfffe00013fffffef, x30, x1, 416, x2)

inst_46:
// rs1_h1_val == -1, rs2_h2_val == 128
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0006ffffc000;  op2val:0xffff008000080007
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xfffa0006ffffc000, 0xffff008000080007, x30, x1, 432, x2)

inst_47:
// rs1_h0_val == -21846, rs2_h0_val == 16
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x05fefffeffaaaa;  op2val:0x1000fff700060010
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x05fefffeffaaaa, 0x1000fff700060010, x30, x1, 448, x2)

inst_48:
// rs1_h0_val == 32767, rs2_h1_val == 16384
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffbc0007fff;  op2val:0xdfffaaaa40000100
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xfffdfffbc0007fff, 0xdfffaaaa40000100, x30, x1, 464, x2)

inst_49:
// rs1_h0_val == -8193, rs2_h1_val == 512
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffbf0002dfff;  op2val:0xfdfffffd02000008
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xfff6ffbf0002dfff, 0xfdfffffd02000008, x30, x1, 480, x2)

inst_50:
// rs1_h0_val == -513, rs2_h0_val == -65, rs2_h2_val == -2
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x052000fefffdff;  op2val:0x09fffec000ffbf
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x052000fefffdff, 0x09fffec000ffbf, x30, x1, 496, x2)

inst_51:
// rs1_h0_val == -65, rs2_h1_val == -5, rs1_h1_val == -9
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffdfdffffff7ffbf;  op2val:0x10000009fffbfff7
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xffdfdffffff7ffbf, 0x10000009fffbfff7, x30, x1, 512, x2)

inst_52:
// rs1_h0_val == -17, rs1_h3_val == -2, rs2_h0_val == 2048
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffe0001ffef;  op2val:0x407fffefff0800
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xfffefffe0001ffef, 0x407fffefff0800, x30, x1, 528, x2)

inst_53:
// rs1_h0_val == -2, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x200000030400fffe;  op2val:0x5555000100060020
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x200000030400fffe, 0x5555000100060020, x30, x1, 544, x2)

inst_54:
// rs1_h0_val == 16384, rs2_h1_val == -33
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x400007ffef4000;  op2val:0xffdf0008ffdf0000
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x400007ffef4000, 0xffdf0008ffdf0000, x30, x1, 560, x2)

inst_55:
// rs1_h0_val == 8192, rs2_h1_val == 21845, rs1_h2_val == -21846
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x04aaaaffdf2000;  op2val:0xdffff7ff5555fff8
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x04aaaaffdf2000, 0xdffff7ff5555fff8, x30, x1, 576, x2)

inst_56:
// rs1_h0_val == 2048, rs2_h1_val == -21846, rs2_h0_val == -33
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xc000100000030800;  op2val:0x80ffefaaaaffdf
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xc000100000030800, 0x80ffefaaaaffdf, x30, x1, 592, x2)

inst_57:
// rs1_h0_val == 1024, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x050080fffb0400;  op2val:0x06010000080003
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x050080fffb0400, 0x06010000080003, x30, x1, 608, x2)

inst_58:
// rs1_h0_val == 32, rs1_h1_val == -129
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x80005555ff7f0020;  op2val:0x8000ffbf0001fffd
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x80005555ff7f0020, 0x8000ffbf0001fffd, x30, x1, 624, x2)

inst_59:
// rs1_h0_val == 8, rs1_h3_val == -21846, rs2_h1_val == -2, rs1_h2_val == 4, rs1_h1_val == -8193
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0004dfff0008;  op2val:0x20fff8fffe0020
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xaaaa0004dfff0008, 0x20fff8fffe0020, x30, x1, 640, x2)

inst_60:
// rs1_h0_val == 2, rs2_h3_val == 1, rs2_h2_val == 1024
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffff77fff0002;  op2val:0x010400fffdfff8
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x3ffffff77fff0002, 0x010400fffdfff8, x30, x1, 656, x2)

inst_61:
// rs2_h1_val == 4, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fff6fdff3fff;  op2val:0x100000040004fff8
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xfff7fff6fdff3fff, 0x100000040004fff8, x30, x1, 672, x2)

inst_62:
// rs2_h1_val == 0, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x100040000800c000;  op2val:0x555500020000fff8
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x100040000800c000, 0x555500020000fff8, x30, x1, 688, x2)

inst_63:
// rs2_h0_val == 32767, rs1_h2_val == -129
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfeffff7fdfffc000;  op2val:0xfffcfff800037fff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xfeffff7fdfffc000, 0xfffcfff800037fff, x30, x1, 704, x2)

inst_64:
// rs2_h0_val == -16385, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x06fffd0800fffb;  op2val:0xfffd00800040bfff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x06fffd0800fffb, 0xfffd00800040bfff, x30, x1, 720, x2)

inst_65:
// rs2_h0_val == -4097, rs1_h1_val == -16385
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x204000bfffaaaa;  op2val:0x020004fff8efff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x204000bfffaaaa, 0x020004fff8efff, x30, x1, 736, x2)

inst_66:
// rs2_h0_val == -129, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xefffefffbffffbff;  op2val:0xfefffff70000ff7f
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xefffefffbffffbff, 0xfefffff70000ff7f, x30, x1, 752, x2)

inst_67:
// rs2_h0_val == 16384, rs2_h1_val == 16, rs1_h3_val == -2049
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000801000006;  op2val:0x3fff008000104000
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xf7ff000801000006, 0x3fff008000104000, x30, x1, 768, x2)

inst_68:
// rs2_h0_val == 8192, rs1_h3_val == -1
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff0004fff8;  op2val:0x01fff600012000
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xffffdfff0004fff8, 0x01fff600012000, x30, x1, 784, x2)

inst_69:
// rs2_h0_val == 1024, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x01000500401000;  op2val:0x100555500000400
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x01000500401000, 0x100555500000400, x30, x1, 800, x2)

inst_70:
// rs2_h0_val == 512, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfeff40000100fbff;  op2val:0x100800000090200
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xfeff40000100fbff, 0x100800000090200, x30, x1, 816, x2)

inst_71:
// rs2_h0_val == 64, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff700090005fffb;  op2val:0x020020feff0040
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xfff700090005fffb, 0x020020feff0040, x30, x1, 832, x2)

inst_72:
// rs2_h0_val == 4, rs1_h3_val == 21845
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x55557ffffffcffef;  op2val:0x10200040000004
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x55557ffffffcffef, 0x10200040000004, x30, x1, 848, x2)

inst_73:
// rs1_h3_val == -16385, rs2_h2_val == 16384, rs1_h0_val == 1
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xbfff400000010001;  op2val:0xf7ff4000ff7ffffc
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xbfff400000010001, 0xf7ff4000ff7ffffc, x30, x1, 864, x2)

inst_74:
// rs1_h3_val == -8193, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xdfff000901000200;  op2val:0x1000fffaefffefff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xdfff000901000200, 0x1000fffaefffefff, x30, x1, 880, x2)

inst_75:
// rs1_h3_val == -129, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffff8fffefff9;  op2val:0x06aaaa3ffffbff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xff7ffff8fffefff9, 0x06aaaa3ffffbff, x30, x1, 896, x2)

inst_76:
// rs1_h3_val == -17, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffeffff7ff7f0020;  op2val:0xff7f00060400bfff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xffeffff7ff7f0020, 0xff7f00060400bfff, x30, x1, 912, x2)

inst_77:
// rs1_h3_val == -5, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffbfff83fff;  op2val:0xffff00087fff0009
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xfffbfffbfff83fff, 0xffff00087fff0009, x30, x1, 928, x2)

inst_78:
// rs2_h3_val == 0, rs2_h2_val == 2048
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffdff7ff0001ffef;  op2val:0x00080001000080
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xffdff7ff0001ffef, 0x00080001000080, x30, x1, 944, x2)

inst_79:
// rs1_h3_val == 16384, rs2_h1_val == -2049
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x4000f7ff00090040;  op2val:0x1004000f7fffff8
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x4000f7ff00090040, 0x1004000f7fffff8, x30, x1, 960, x2)

inst_80:
// rs2_h2_val == -8193, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x000009fff90100;  op2val:0x00dfff01000100
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x000009fff90100, 0x00dfff01000100, x30, x1, 976, x2)

inst_81:
// rs1_h3_val == 128, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x80fffa20001000;  op2val:0xfffbbffffff90000
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x80fffa20001000, 0xfffbbffffff90000, x30, x1, 992, x2)

inst_82:
// rs2_h2_val == -513, rs1_h3_val == 16
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x100008fff6ffff;  op2val:0xfefffdffbfffffbf
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x100008fff6ffff, 0xfefffdffbfffffbf, x30, x1, 1008, x2)

inst_83:
// rs2_h2_val == -257, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x0300010000fdff;  op2val:0x1000fefffff6fffe
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x0300010000fdff, 0x1000fefffff6fffe, x30, x1, 1024, x2)

inst_84:
// rs2_h2_val == -129, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x1000009fff78000;  op2val:0x07ff7f2000efff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x1000009fff78000, 0x07ff7f2000efff, x30, x1, 1040, x2)

inst_85:
// rs1_h3_val == 2, rs2_h2_val == 64, rs1_h1_val == -4097
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x020002effffffd;  op2val:0x20000040ffdf0009
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x020002effffffd, 0x20000040ffdf0009, x30, x1, 1056, x2)

inst_86:
// rs2_h2_val == -5, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x09efff00034000;  op2val:0xeffffffbff7fefff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x09efff00034000, 0xeffffffbff7fefff, x30, x1, 1072, x2)

inst_87:
// rs1_h2_val == -16385, rs2_h1_val == -1025
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x100bffffffbfdff;  op2val:0xffdff7fffbff0008
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x100bffffffbfdff, 0xffdff7fffbff0008, x30, x1, 1088, x2)

inst_88:
// rs2_h2_val == 4096, rs2_h1_val == 2048
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0006ffbf0006;  op2val:0xfffd100008000080
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x7fff0006ffbf0006, 0xfffd100008000080, x30, x1, 1104, x2)

inst_89:
// rs2_h2_val == 512, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x100fffdc0000100;  op2val:0x200200fff9efff
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x100fffdc0000100, 0x200200fff9efff, x30, x1, 1120, x2)

inst_90:
// rs1_h3_val == 2048, rs1_h1_val == 21845
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x800000455558000;  op2val:0xaaaa1000fff80004
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x800000455558000, 0xaaaa1000fff80004, x30, x1, 1136, x2)

inst_91:
// rs1_h2_val == 2048, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffdf08000006ffdf;  op2val:0x4000020000071000
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xffdf08000006ffdf, 0x4000020000071000, x30, x1, 1152, x2)

inst_92:
// rs1_h2_val == 1024, rs1_h1_val == -1025
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffef0400fbff4000;  op2val:0xc0000004fff9ff7f
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xffef0400fbff4000, 0xc0000004fff9ff7f, x30, x1, 1168, x2)

inst_93:
// rs2_h1_val == -8193, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffff0000;  op2val:0xfffb0020dfff8000
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xffffffefffff0000, 0xfffb0020dfff8000, x30, x1, 1184, x2)

inst_94:
// rs1_h2_val == 512, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x060200fefffffb;  op2val:0xfffdefff00040020
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x060200fefffffb, 0xfffdefff00040020, x30, x1, 1200, x2)

inst_95:
// rs2_h2_val == 0, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0001dffffdff;  op2val:0x1000000001000040
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xfbff0001dffffdff, 0x1000000001000040, x30, x1, 1216, x2)

inst_96:
// rs1_h2_val == 256, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0100fff8c000;  op2val:0xfffac00000090009
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x7fff0100fff8c000, 0xfffac00000090009, x30, x1, 1232, x2)

inst_97:
// rs1_h1_val == -2049, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x10000200f7ff0001;  op2val:0x060007feffffef
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x10000200f7ff0001, 0x060007feffffef, x30, x1, 1248, x2)

inst_98:
// rs1_h2_val == 64, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xc000004000060009;  op2val:0xf7ffffdfbfff0100
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xc000004000060009, 0xf7ffffdfbfff0100, x30, x1, 1264, x2)

inst_99:
// rs1_h2_val == 16, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfeff001000400008;  op2val:0x1000ffbffffe0100
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xfeff001000400008, 0x1000ffbffffe0100, x30, x1, 1280, x2)

inst_100:
// rs2_h1_val == -17, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0x04001080000005;  op2val:0xffef0200ffefaaaa
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0x04001080000005, 0xffef0200ffefaaaa, x30, x1, 1296, x2)

inst_101:
// rs1_h2_val == 0, 
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfffe00000007f7ff;  op2val:0x100fffb00030003
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xfffe00000007f7ff, 0x100fffb00030003, x30, x1, 1312, x2)

inst_102:
// rs2_h3_val == 4096, rs2_h1_val == 2, rs1_h0_val == 512, rs2_h0_val == -21846
// opcode: kdmabt ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffc00050200;  op2val:0x10007fff0002aaaa
TEST_PKRR_OP(kdmabt, x31, x30, x29, 0x0000000000000000, 0xfff8fffc00050200, 0x10007fff0002aaaa, x30, x1, 1328, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 38*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 168*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
