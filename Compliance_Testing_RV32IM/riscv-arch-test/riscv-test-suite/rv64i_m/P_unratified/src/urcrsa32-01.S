
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the urcrsa32 instruction of the RISC-V RV64PZicsr extension for the urcrsa32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",urcrsa32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x19, rs2==x9, rd==x19, rs1_w0_val == 0, rs1_w1_val == 4294901759, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 8, rs2_w0_val == 33554432
// opcode: urcrsa32 ; op1:x19; op2:x9; dest:x19; op1val:0xfffeffff00000000;  op2val:0x00000802000000
TEST_RR_OP(urcrsa32, x19, x19, x9, 0x0000000000000000, 0xfffeffff00000000, 0x00000802000000, x7, 0, x14)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x22, rs2==x23, rd==x8, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 4294966783, rs2_w1_val == 4160749567, rs1_w1_val == 4160749567, rs2_w0_val == 4096
// opcode: urcrsa32 ; op1:x22; op2:x23; dest:x8; op1val:0xf7fffffffffffdff;  op2val:0xf7ffffff00001000
TEST_RR_OP(urcrsa32, x8, x22, x23, 0x0000000000000000, 0xf7fffffffffffdff, 0xf7ffffff00001000, x7, 8, x14)

inst_2:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x4, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 4290772991, rs1_w0_val == 4294965247, rs1_w1_val == 4294967291, rs2_w0_val == 4294965247
// opcode: urcrsa32 ; op1:x26; op2:x26; dest:x4; op1val:0xfffffffbfffff7ff;  op2val:0xffbffffffffff7ff
TEST_RR_OP(urcrsa32, x4, x26, x26, 0x0000000000000000, 0xfffffffbfffff7ff, 0xffbffffffffff7ff, x7, 16, x14)

inst_3:
// rs1 == rs2 == rd, rs1==x24, rs2==x24, rd==x24, rs2_w1_val == 2863311530, rs1_w0_val == 33554432, rs1_w1_val == 1048576, rs2_w0_val == 3758096383
// opcode: urcrsa32 ; op1:x24; op2:x24; dest:x24; op1val:0x10000002000000;  op2val:0xaaaaaaaadfffffff
TEST_RR_OP(urcrsa32, x24, x24, x24, 0x0000000000000000, 0x10000002000000, 0xaaaaaaaadfffffff, x7, 24, x14)

inst_4:
// rs2 == rd != rs1, rs1==x12, rs2==x29, rd==x29, rs2_w1_val == 1431655765, rs2_w0_val == 2863311530, rs1_w0_val == 2, rs1_w1_val == 4294934527
// opcode: urcrsa32 ; op1:x12; op2:x29; dest:x29; op1val:0xffff7fff00000002;  op2val:0x55555555aaaaaaaa
TEST_RR_OP(urcrsa32, x29, x12, x29, 0x0000000000000000, 0xffff7fff00000002, 0x55555555aaaaaaaa, x7, 32, x14)

inst_5:
// rs1==x9, rs2==x20, rd==x13, rs2_w1_val == 2147483647, rs2_w0_val == 4261412863, rs1_w1_val == 4278190079
// opcode: urcrsa32 ; op1:x9; op2:x20; dest:x13; op1val:0xfeffffff00000006;  op2val:0x7ffffffffdffffff
TEST_RR_OP(urcrsa32, x13, x9, x20, 0x0000000000000000, 0xfeffffff00000006, 0x7ffffffffdffffff, x7, 40, x14)

inst_6:
// rs1==x17, rs2==x3, rd==x18, rs2_w1_val == 3221225471, rs2_w0_val == 4227858431, rs1_w1_val == 4294967287
// opcode: urcrsa32 ; op1:x17; op2:x3; dest:x18; op1val:0xfffffff700000006;  op2val:0xbffffffffbffffff
TEST_RR_OP(urcrsa32, x18, x17, x3, 0x0000000000000000, 0xfffffff700000006, 0xbffffffffbffffff, x7, 48, x14)

inst_7:
// rs1==x1, rs2==x18, rd==x22, rs2_w1_val == 3758096383, rs2_w0_val == 262144, rs1_w0_val == 4294705151, rs1_w1_val == 16777216
// opcode: urcrsa32 ; op1:x1; op2:x18; dest:x22; op1val:0x1000000fffbffff;  op2val:0xdfffffff00040000
TEST_RR_OP(urcrsa32, x22, x1, x18, 0x0000000000000000, 0x1000000fffbffff, 0xdfffffff00040000, x7, 56, x14)

inst_8:
// rs1==x5, rs2==x1, rd==x25, rs2_w1_val == 4026531839, rs1_w1_val == 262144, rs2_w0_val == 4194304, rs1_w0_val == 3758096383
// opcode: urcrsa32 ; op1:x5; op2:x1; dest:x25; op1val:0x040000dfffffff;  op2val:0xefffffff00400000
TEST_RR_OP(urcrsa32, x25, x5, x1, 0x0000000000000000, 0x040000dfffffff, 0xefffffff00400000, x7, 64, x14)

inst_9:
// rs1==x16, rs2==x15, rd==x11, rs2_w1_val == 4227858431, rs1_w0_val == 64, rs2_w0_val == 1073741824, rs1_w1_val == 131072
// opcode: urcrsa32 ; op1:x16; op2:x15; dest:x11; op1val:0x02000000000040;  op2val:0xfbffffff40000000
TEST_RR_OP(urcrsa32, x11, x16, x15, 0x0000000000000000, 0x02000000000040, 0xfbffffff40000000, x7, 72, x14)

inst_10:
// rs1==x27, rs2==x25, rd==x2, rs2_w1_val == 4261412863, rs2_w0_val == 4294836223, rs1_w0_val == 16777216, rs1_w1_val == 524288
// opcode: urcrsa32 ; op1:x27; op2:x25; dest:x2; op1val:0x08000001000000;  op2val:0xfdfffffffffdffff
TEST_RR_OP(urcrsa32, x2, x27, x25, 0x0000000000000000, 0x08000001000000, 0xfdfffffffffdffff, x7, 80, x14)

inst_11:
// rs1==x4, rs2==x16, rd==x23, rs2_w1_val == 4278190079, rs1_w0_val == 4294967293, rs2_w0_val == 4292870143
// opcode: urcrsa32 ; op1:x4; op2:x16; dest:x23; op1val:0x040000fffffffd;  op2val:0xfeffffffffdfffff
TEST_RR_OP(urcrsa32, x23, x4, x16, 0x0000000000000000, 0x040000fffffffd, 0xfeffffffffdfffff, x7, 88, x14)

inst_12:
// rs1==x3, rs2==x11, rd==x6, rs2_w1_val == 4286578687, rs2_w0_val == 4290772991, rs1_w1_val == 33554432
// opcode: urcrsa32 ; op1:x3; op2:x11; dest:x6; op1val:0x200000000000007;  op2val:0xff7fffffffbfffff
TEST_RR_OP(urcrsa32, x6, x3, x11, 0x0000000000000000, 0x200000000000007, 0xff7fffffffbfffff, x7, 96, x14)

inst_13:
// rs1==x28, rs2==x0, rd==x26, rs2_w1_val == 4292870143, rs1_w1_val == 134217728, rs1_w0_val == 2097152
// opcode: urcrsa32 ; op1:x28; op2:x0; dest:x26; op1val:0x800000000200000;  op2val:0xffdfffff00000005
TEST_RR_OP(urcrsa32, x26, x28, x0, 0x0000000000000000, 0x800000000200000, 0xffdfffff00000005, x7, 104, x14)

inst_14:
// rs1==x10, rs2==x8, rd==x5, rs2_w1_val == 4293918719, rs1_w0_val == 512, rs2_w0_val == 64
// opcode: urcrsa32 ; op1:x10; op2:x8; dest:x5; op1val:0x00001300000200;  op2val:0xffefffff00000040
TEST_RR_OP(urcrsa32, x5, x10, x8, 0x0000000000000000, 0x00001300000200, 0xffefffff00000040, x7, 112, x14)

inst_15:
// rs1==x13, rs2==x14, rd==x10, rs2_w1_val == 4294443007, rs1_w0_val == 4294950911, rs1_w1_val == 1431655765
// opcode: urcrsa32 ; op1:x13; op2:x14; dest:x10; op1val:0x55555555ffffbfff;  op2val:0xfff7ffff00040000
TEST_RR_OP(urcrsa32, x10, x13, x14, 0x0000000000000000, 0x55555555ffffbfff, 0xfff7ffff00040000, x7, 120, x3)
RVTEST_SIGBASE(x24,signature_x24_0)

inst_16:
// rs1==x0, rs2==x28, rd==x12, rs2_w1_val == 4294705151, rs2_w0_val == 256, rs1_w0_val == 4026531839, rs1_w1_val == 2147483647
// opcode: urcrsa32 ; op1:x0; op2:x28; dest:x12; op1val:0x7fffffffefffffff;  op2val:0xfffbffff00000100
TEST_RR_OP(urcrsa32, x12, x0, x28, 0x0000000000000000, 0x7fffffffefffffff, 0xfffbffff00000100, x24, 0, x3)

inst_17:
// rs1==x31, rs2==x5, rd==x14, rs2_w1_val == 4294836223, rs2_w0_val == 4294966271, rs1_w0_val == 4290772991
// opcode: urcrsa32 ; op1:x31; op2:x5; dest:x14; op1val:0x100000ffbfffff;  op2val:0xfffdfffffffffbff
TEST_RR_OP(urcrsa32, x14, x31, x5, 0x0000000000000000, 0x100000ffbfffff, 0xfffdfffffffffbff, x24, 8, x3)

inst_18:
// rs1==x30, rs2==x7, rd==x9, rs2_w1_val == 4294901759, rs2_w0_val == 4294967039, rs1_w0_val == 3221225471, rs1_w1_val == 4026531839
// opcode: urcrsa32 ; op1:x30; op2:x7; dest:x9; op1val:0xefffffffbfffffff;  op2val:0xfffefffffffffeff
TEST_RR_OP(urcrsa32, x9, x30, x7, 0x0000000000000000, 0xefffffffbfffffff, 0xfffefffffffffeff, x24, 16, x3)

inst_19:
// rs1==x6, rs2==x30, rd==x27, rs2_w1_val == 4294934527, rs1_w0_val == 131072
// opcode: urcrsa32 ; op1:x6; op2:x30; dest:x27; op1val:0x00000a00020000;  op2val:0xffff7fff40000000
TEST_RR_OP(urcrsa32, x27, x6, x30, 0x0000000000000000, 0x00000a00020000, 0xffff7fff40000000, x24, 24, x3)

inst_20:
// rs1==x29, rs2==x22, rd==x7, rs2_w1_val == 4294950911, rs1_w0_val == 67108864, rs1_w1_val == 2863311530, rs2_w0_val == 524288
// opcode: urcrsa32 ; op1:x29; op2:x22; dest:x7; op1val:0xaaaaaaaa04000000;  op2val:0xffffbfff00080000
TEST_RR_OP(urcrsa32, x7, x29, x22, 0x0000000000000000, 0xaaaaaaaa04000000, 0xffffbfff00080000, x24, 32, x3)

inst_21:
// rs1==x15, rs2==x10, rd==x30, rs2_w1_val == 4294959103, rs1_w0_val == 4294934527, rs1_w1_val == 128
// opcode: urcrsa32 ; op1:x15; op2:x10; dest:x30; op1val:0x000080ffff7fff;  op2val:0xffffdfff00000013
TEST_RR_OP(urcrsa32, x30, x15, x10, 0x0000000000000000, 0x000080ffff7fff, 0xffffdfff00000013, x24, 40, x3)

inst_22:
// rs1==x18, rs2==x13, rd==x28, rs2_w1_val == 4294963199, rs1_w0_val == 1, rs1_w1_val == 4294967293
// opcode: urcrsa32 ; op1:x18; op2:x13; dest:x28; op1val:0xfffffffd00000001;  op2val:0xffffefff00000003
TEST_RR_OP(urcrsa32, x28, x18, x13, 0x0000000000000000, 0xfffffffd00000001, 0xffffefff00000003, x24, 48, x3)

inst_23:
// rs1==x21, rs2==x12, rd==x1, rs2_w1_val == 4294965247, rs1_w1_val == 64, rs2_w0_val == 4294967263
// opcode: urcrsa32 ; op1:x21; op2:x12; dest:x1; op1val:0x00004000000013;  op2val:0xfffff7ffffffffdf
TEST_RR_OP(urcrsa32, x1, x21, x12, 0x0000000000000000, 0x00004000000013, 0xfffff7ffffffffdf, x24, 56, x3)

inst_24:
// rs1==x8, rs2==x27, rd==x0, rs2_w1_val == 4294966271, rs1_w1_val == 1024, rs2_w0_val == 4294967231
// opcode: urcrsa32 ; op1:x8; op2:x27; dest:x0; op1val:0x00040000000003;  op2val:0xfffffbffffffffbf
TEST_RR_OP(urcrsa32, x0, x8, x27, 0x0000000000000000, 0x00040000000003, 0xfffffbffffffffbf, x24, 64, x3)

inst_25:
// rs1==x14, rs2==x17, rd==x20, rs2_w1_val == 4294966783, rs2_w0_val == 128, rs1_w1_val == 4294967039, rs1_w0_val == 4294443007
// opcode: urcrsa32 ; op1:x14; op2:x17; dest:x20; op1val:0xfffffefffff7ffff;  op2val:0xfffffdff00000080
TEST_RR_OP(urcrsa32, x20, x14, x17, 0x0000000000000000, 0xfffffefffff7ffff, 0xfffffdff00000080, x24, 72, x3)

inst_26:
// rs1==x2, rs2==x6, rd==x21, rs2_w1_val == 4294967039, rs1_w1_val == 4294965247, rs2_w0_val == 1048576, rs1_w0_val == 4096
// opcode: urcrsa32 ; op1:x2; op2:x6; dest:x21; op1val:0xfffff7ff00001000;  op2val:0xfffffeff00100000
TEST_RR_OP(urcrsa32, x21, x2, x6, 0x0000000000000000, 0xfffff7ff00001000, 0xfffffeff00100000, x24, 80, x3)

inst_27:
// rs1==x23, rs2==x2, rd==x31, rs2_w1_val == 4294967167, rs1_w0_val == 4294966271, rs1_w1_val == 4294836223, rs2_w0_val == 8
// opcode: urcrsa32 ; op1:x23; op2:x2; dest:x31; op1val:0xfffdfffffffffbff;  op2val:0xffffff7f00000008
TEST_RR_OP(urcrsa32, x31, x23, x2, 0x0000000000000000, 0xfffdfffffffffbff, 0xffffff7f00000008, x24, 88, x3)

inst_28:
// rs1==x25, rs2==x19, rd==x17, rs2_w1_val == 4294967231, rs1_w1_val == 3221225471, rs2_w0_val == 268435456
// opcode: urcrsa32 ; op1:x25; op2:x19; dest:x17; op1val:0xbffffffffffbffff;  op2val:0xffffffbf10000000
TEST_RR_OP(urcrsa32, x17, x25, x19, 0x0000000000000000, 0xbffffffffffbffff, 0xffffffbf10000000, x24, 96, x3)

inst_29:
// rs1==x7, rs2==x21, rd==x16, rs2_w1_val == 4294967263, rs1_w1_val == 4294950911, rs2_w0_val == 16384, rs1_w0_val == 16384
// opcode: urcrsa32 ; op1:x7; op2:x21; dest:x16; op1val:0xffffbfff00004000;  op2val:0xffffffdf00004000
TEST_RR_OP(urcrsa32, x16, x7, x21, 0x0000000000000000, 0xffffbfff00004000, 0xffffffdf00004000, x24, 104, x3)

inst_30:
// rs1==x11, rs2==x4, rd==x3, rs2_w1_val == 4294967279, rs1_w0_val == 1048576, rs1_w1_val == 8388608
// opcode: urcrsa32 ; op1:x11; op2:x4; dest:x3; op1val:0x80000000100000;  op2val:0xffffffef0000000e
TEST_RR_OP(urcrsa32, x3, x11, x4, 0x0000000000000000, 0x80000000100000, 0xffffffef0000000e, x24, 112, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x20, rs2==x31, rd==x15, rs2_w1_val == 4294967287, rs1_w0_val == 2863311530, rs2_w0_val == 4294967279
// opcode: urcrsa32 ; op1:x20; op2:x31; dest:x15; op1val:0x00000baaaaaaaa;  op2val:0xfffffff7ffffffef
TEST_RR_OP(urcrsa32, x15, x20, x31, 0x0000000000000000, 0x00000baaaaaaaa, 0xfffffff7ffffffef, x1, 0, x2)

inst_32:
// rs2_w1_val == 4294967291, rs1_w0_val == 8388608, rs2_w0_val == 2097152, rs1_w1_val == 4286578687
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00800000;  op2val:0xfffffffb00200000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00800000, 0xfffffffb00200000, x1, 8, x2)

inst_33:
// rs2_w1_val == 4294967293, rs1_w0_val == 4, rs2_w0_val == 4286578687, rs1_w1_val == 8
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000004;  op2val:0xfffffffdff7fffff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000800000004, 0xfffffffdff7fffff, x1, 16, x2)

inst_34:
// rs2_w1_val == 4294967294, rs1_w1_val == 536870912
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000007;  op2val:0xfffffffe00200000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x2000000000000007, 0xfffffffe00200000, x1, 24, x2)

inst_35:
// rs2_w1_val == 2147483648, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffffbfff;  op2val:0x80000000ffffffef
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x20000000ffffbfff, 0x80000000ffffffef, x1, 32, x2)

inst_36:
// rs2_w1_val == 1073741824, rs2_w0_val == 3221225471, rs1_w0_val == 4294967231
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffffffbf;  op2val:0x40000000bfffffff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xefffffffffffffbf, 0x40000000bfffffff, x1, 40, x2)

inst_37:
// rs2_w1_val == 536870912, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600004000;  op2val:0x2000000000200000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000600004000, 0x2000000000200000, x1, 48, x2)

inst_38:
// rs2_w1_val == 268435456, rs1_w1_val == 0, rs1_w0_val == 1024, rs2_w0_val == 8388608
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000400;  op2val:0x1000000000800000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000000000400, 0x1000000000800000, x1, 56, x2)

inst_39:
// rs2_w1_val == 134217728, rs2_w0_val == 4294959103
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000013;  op2val:0x8000000ffffdfff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000013, 0x8000000ffffdfff, x1, 64, x2)

inst_40:
// rs2_w1_val == 67108864, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555dfffffff;  op2val:0x4000000fffdffff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x55555555dfffffff, 0x4000000fffdffff, x1, 72, x2)

inst_41:
// rs2_w1_val == 33554432, rs1_w1_val == 3758096383, rs2_w0_val == 1, rs1_w0_val == 4294963199
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffefff;  op2val:0x200000000000001
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffefff, 0x200000000000001, x1, 80, x2)

inst_42:
// rs2_w1_val == 16777216, rs2_w0_val == 4294967294, rs1_w1_val == 4261412863
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffff7fff;  op2val:0x1000000fffffffe
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xfdffffffffff7fff, 0x1000000fffffffe, x1, 88, x2)

inst_43:
// rs2_w1_val == 8388608, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001300020000;  op2val:0x80000002000000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00001300020000, 0x80000002000000, x1, 96, x2)

inst_44:
// rs2_w1_val == 4194304, rs1_w1_val == 4294967279, rs1_w0_val == 8192
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00002000;  op2val:0x4000000000000f
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffffef00002000, 0x4000000000000f, x1, 104, x2)

inst_45:
// rs2_w1_val == 2097152, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000100000;  op2val:0x20000000000100
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x100000000100000, 0x20000000000100, x1, 112, x2)

inst_46:
// rs1_w0_val == 262144, rs1_w1_val == 16
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000040000;  op2val:0x00001300004000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00001000040000, 0x00001300004000, x1, 120, x2)

inst_47:
// rs1_w0_val == 65536, rs2_w0_val == 4294901759, rs2_w1_val == 2
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800010000;  op2val:0x000002fffeffff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000800010000, 0x000002fffeffff, x1, 128, x2)

inst_48:
// rs1_w0_val == 32768, rs1_w1_val == 4294443007
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00008000;  op2val:0xffff7fff00000040
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00008000, 0xffff7fff00000040, x1, 136, x2)

inst_49:
// rs1_w0_val == 2048, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000800;  op2val:0x20000000dfffffff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000800, 0x20000000dfffffff, x1, 144, x2)

inst_50:
// rs1_w0_val == 256, rs1_w1_val == 1073741824
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000100;  op2val:0xffffffef0000000a
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x4000000000000100, 0xffffffef0000000a, x1, 152, x2)

inst_51:
// rs1_w0_val == 128, rs1_w1_val == 32
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000080;  op2val:0xfeffffffffdfffff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00002000000080, 0xfeffffffffdfffff, x1, 160, x2)

inst_52:
// rs1_w0_val == 32, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000020;  op2val:0xffdfffff0000000e
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000020, 0xffdfffff0000000e, x1, 168, x2)

inst_53:
// rs1_w0_val == 16, rs2_w1_val == 64, rs2_w0_val == 4294966783, rs1_w1_val == 16384
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000000010;  op2val:0x000040fffffdff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00400000000010, 0x000040fffffdff, x1, 176, x2)

inst_54:
// rs1_w0_val == 8, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000008;  op2val:0xfffbffffaaaaaaaa
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000008, 0xfffbffffaaaaaaaa, x1, 184, x2)

inst_55:
// rs1_w0_val == 4294967295, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000ffffffff;  op2val:0xffffff7ffdffffff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x040000ffffffff, 0xffffff7ffdffffff, x1, 192, x2)

inst_56:
// rs2_w1_val == 1048576, rs1_w0_val == 2147483648
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000080000000;  op2val:0x10000000004000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x04000080000000, 0x10000000004000, x1, 200, x2)

inst_57:
// rs2_w1_val == 524288, rs1_w0_val == 4261412863, rs1_w1_val == 4293918719
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffdffffff;  op2val:0x080000fffffdff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xffeffffffdffffff, 0x080000fffffdff, x1, 208, x2)

inst_58:
// rs2_w1_val == 262144, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000800;  op2val:0x04000000040000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000800, 0x04000000040000, x1, 216, x2)

inst_59:
// rs2_w1_val == 131072, rs1_w1_val == 67108864, rs2_w0_val == 0
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000005;  op2val:0x02000000000000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x400000000000005, 0x02000000000000, x1, 224, x2)

inst_60:
// rs2_w1_val == 65536, rs2_w0_val == 2
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00008000;  op2val:0x01000000000002
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffffef00008000, 0x01000000000002, x1, 232, x2)

inst_61:
// rs2_w1_val == 32768, rs1_w1_val == 4290772991, rs1_w0_val == 4294967294
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffffffe;  op2val:0x00800000000012
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xffbffffffffffffe, 0x00800000000012, x1, 240, x2)

inst_62:
// rs2_w1_val == 16384, rs1_w1_val == 2147483648
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000010000;  op2val:0x004000ff7fffff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x8000000000010000, 0x004000ff7fffff, x1, 248, x2)

inst_63:
// rs2_w1_val == 8192, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000002000000;  op2val:0x002000ffffdfff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x4000000002000000, 0x002000ffffdfff, x1, 256, x2)

inst_64:
// rs2_w1_val == 4096, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff0000000d;  op2val:0x00100000200000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffeffff0000000d, 0x00100000200000, x1, 264, x2)

inst_65:
// rs2_w1_val == 2048, rs1_w1_val == 4294967263, rs2_w0_val == 4278190079
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00020000;  op2val:0x000800feffffff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00020000, 0x000800feffffff, x1, 272, x2)

inst_66:
// rs2_w1_val == 1024, rs1_w0_val == 4294967039, rs2_w0_val == 32768
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007fffffeff;  op2val:0x00040000008000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x000007fffffeff, 0x00040000008000, x1, 280, x2)

inst_67:
// rs2_w1_val == 512, rs2_w0_val == 4294950911
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00020000;  op2val:0x000200ffffbfff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xefffffff00020000, 0x000200ffffbfff, x1, 288, x2)

inst_68:
// rs2_w1_val == 256, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000e00000001;  op2val:0x00010000000002
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000e00000001, 0x00010000000002, x1, 296, x2)

inst_69:
// rs2_w1_val == 128, rs2_w0_val == 2147483648
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000200;  op2val:0x00008080000000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000200, 0x00008080000000, x1, 304, x2)

inst_70:
// rs2_w1_val == 32, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000affffefff;  op2val:0x00002000000040
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000affffefff, 0x00002000000040, x1, 312, x2)

inst_71:
// rs2_w1_val == 16, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010efffffff;  op2val:0x0000100000000d
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x000010efffffff, 0x0000100000000d, x1, 320, x2)

inst_72:
// rs2_w1_val == 4, rs1_w1_val == 2097152, rs1_w0_val == 4160749567
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000f7ffffff;  op2val:0x000004ffffdfff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x200000f7ffffff, 0x000004ffffdfff, x1, 328, x2)

inst_73:
// rs2_w1_val == 1, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000200;  op2val:0x00000100000005
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x800000000000200, 0x00000100000005, x1, 336, x2)

inst_74:
// rs2_w1_val == 4294967295, rs1_w1_val == 1
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fff7ffff;  op2val:0xffffffffffffbfff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x000001fff7ffff, 0xffffffffffffbfff, x1, 344, x2)

inst_75:
// rs2_w1_val == 0, rs2_w0_val == 16777216
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000080;  op2val:0x00000001000000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000080, 0x00000001000000, x1, 352, x2)

inst_76:
// rs2_w0_val == 1431655765, rs1_w0_val == 4294967287
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffffff7;  op2val:0x5555555555555555
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xeffffffffffffff7, 0x5555555555555555, x1, 360, x2)

inst_77:
// rs2_w0_val == 2147483647, rs1_w1_val == 512
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020001000000;  op2val:0x0000207fffffff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00020001000000, 0x0000207fffffff, x1, 368, x2)

inst_78:
// rs2_w0_val == 4026531839, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fdffffff;  op2val:0x00000eefffffff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x000000fdffffff, 0x00000eefffffff, x1, 376, x2)

inst_79:
// rs2_w0_val == 4160749567, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000a01000000;  op2val:0x20000000f7ffffff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000a01000000, 0x20000000f7ffffff, x1, 384, x2)

inst_80:
// rs2_w0_val == 1024, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffffeff;  op2val:0xfdffffff00000400
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x000008fffffeff, 0xfdffffff00000400, x1, 392, x2)

inst_81:
// rs2_w0_val == 512, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000001;  op2val:0x00001200000200
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000700000001, 0x00001200000200, x1, 400, x2)

inst_82:
// rs1_w0_val == 524288, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000080000;  op2val:0xff7fffff00000013
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x02000000080000, 0xff7fffff00000013, x1, 408, x2)

inst_83:
// rs2_w0_val == 32, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000200;  op2val:0x00000400000020
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000000000200, 0x00000400000020, x1, 416, x2)

inst_84:
// rs2_w0_val == 16, rs1_w1_val == 4292870143
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff0000000b;  op2val:0x00001300000010
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xffdfffff0000000b, 0x00001300000010, x1, 424, x2)

inst_85:
// rs2_w0_val == 4, rs1_w0_val == 536870912
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000020000000;  op2val:0x02000000000004
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x02000020000000, 0x02000000000004, x1, 432, x2)

inst_86:
// rs2_w0_val == 4294967295, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000100;  op2val:0x000400ffffffff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00040000000100, 0x000400ffffffff, x1, 440, x2)

inst_87:
// rs1_w1_val == 4227858431, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000002;  op2val:0x40000000000001
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000002, 0x40000000000001, x1, 448, x2)

inst_88:
// rs1_w1_val == 4294705151, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00040000;  op2val:0xff7ffffffffffffe
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00040000, 0xff7ffffffffffffe, x1, 456, x2)

inst_89:
// rs1_w1_val == 4294959103, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000004;  op2val:0x00001000000001
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000004, 0x00001000000001, x1, 464, x2)

inst_90:
// rs1_w1_val == 4294963199, rs2_w0_val == 4294705151
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00020000;  op2val:0x000001fffbffff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffefff00020000, 0x000001fffbffff, x1, 472, x2)

inst_91:
// rs1_w1_val == 4294966271, rs2_w0_val == 65536, rs1_w0_val == 4286578687
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffff7fffff;  op2val:0x00020000010000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffbffff7fffff, 0x00020000010000, x1, 480, x2)

inst_92:
// rs1_w1_val == 4294966783, rs1_w0_val == 4278190079
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffeffffff;  op2val:0xfffeffff00000400
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffdfffeffffff, 0xfffeffff00000400, x1, 488, x2)

inst_93:
// rs1_w1_val == 4294967167, rs2_w0_val == 131072
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000020;  op2val:0x00000e00020000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000020, 0x00000e00020000, x1, 496, x2)

inst_94:
// rs1_w1_val == 4294967231, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffffbff;  op2val:0xfffffbff00000003
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffffbffffffbff, 0xfffffbff00000003, x1, 504, x2)

inst_95:
// rs1_w1_val == 4294967294, rs1_w0_val == 4293918719, rs2_w0_val == 2048
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffefffff;  op2val:0x00000c00000800
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffeffefffff, 0x00000c00000800, x1, 512, x2)

inst_96:
// rs1_w1_val == 268435456, rs2_w0_val == 4294967167
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000040000;  op2val:0xffefffffffffff7f
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x1000000000040000, 0xffefffffffffff7f, x1, 520, x2)

inst_97:
// rs1_w1_val == 4194304, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000feffffff;  op2val:0x40000010000000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x400000feffffff, 0x40000010000000, x1, 528, x2)

inst_98:
// rs1_w1_val == 65536, rs1_w0_val == 4194304, rs2_w0_val == 4294967287
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000400000;  op2val:0xeffffffffffffff7
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x01000000400000, 0xeffffffffffffff7, x1, 536, x2)

inst_99:
// rs1_w1_val == 32768, rs2_w0_val == 4294967293
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffffffe;  op2val:0x000002fffffffd
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x008000fffffffe, 0x000002fffffffd, x1, 544, x2)

inst_100:
// rs1_w1_val == 8192, rs2_w0_val == 4293918719
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000100000;  op2val:0x4000000ffefffff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00200000100000, 0x4000000ffefffff, x1, 552, x2)

inst_101:
// rs1_w1_val == 4096, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000800000;  op2val:0x00080000000040
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00100000800000, 0x00080000000040, x1, 560, x2)

inst_102:
// rs1_w1_val == 2048, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800dfffffff;  op2val:0x2000000000000d
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x000800dfffffff, 0x2000000000000d, x1, 568, x2)

inst_103:
// rs1_w1_val == 256, rs2_w0_val == 4294443007
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000040000;  op2val:0x100000fff7ffff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00010000040000, 0x100000fff7ffff, x1, 576, x2)

inst_104:
// rs1_w1_val == 4, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004ffff7fff;  op2val:0xffffffbfffffbfff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x000004ffff7fff, 0xffffffbfffffbfff, x1, 584, x2)

inst_105:
// rs1_w1_val == 2, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002ffffffbf;  op2val:0xfffdffff00000012
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x000002ffffffbf, 0xfffdffff00000012, x1, 592, x2)

inst_106:
// rs1_w1_val == 4294967295, rs1_w0_val == 4294901759
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffeffff;  op2val:0x00001100000013
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffffffeffff, 0x00001100000013, x1, 600, x2)

inst_107:
// rs1_w0_val == 1431655765, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff55555555;  op2val:0xfdffffff00000013
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffdff55555555, 0xfdffffff00000013, x1, 608, x2)

inst_108:
// rs1_w0_val == 2147483647, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff7fffffff;  op2val:0xfeffffff00000001
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xffff7fff7fffffff, 0xfeffffff00000001, x1, 616, x2)

inst_109:
// rs1_w0_val == 4227858431, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fbffffff;  op2val:0x400000000001000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x8000000fbffffff, 0x400000000001000, x1, 624, x2)

inst_110:
// rs2_w0_val == 4294934527, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd01000000;  op2val:0x000006ffff7fff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffd01000000, 0x000006ffff7fff, x1, 632, x2)

inst_111:
// rs1_w0_val == 4292870143, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffdfffff;  op2val:0x00000601000000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xffdfffffffdfffff, 0x00000601000000, x1, 640, x2)

inst_112:
// rs1_w0_val == 4294836223, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffdffff;  op2val:0x000006ffffffdf
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x000020fffdffff, 0x000006ffffffdf, x1, 648, x2)

inst_113:
// rs1_w0_val == 4294959103, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffffdfff;  op2val:0x00000400000001
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffefffffffdfff, 0x00000400000001, x1, 656, x2)

inst_114:
// rs2_w0_val == 4294967291, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffffe;  op2val:0x40000000fffffffb
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x800000fffffffe, 0x40000000fffffffb, x1, 664, x2)

inst_115:
// rs1_w0_val == 4294967167, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffffff7f;  op2val:0x000005ffffffff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xffbfffffffffff7f, 0x000005ffffffff, x1, 672, x2)

inst_116:
// rs2_w0_val == 536870912, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000c0000000c;  op2val:0xffffefff20000000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000c0000000c, 0xffffefff20000000, x1, 680, x2)

inst_117:
// rs1_w0_val == 4294967263, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffffffdf;  op2val:0xfffffeffffffdfff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xffbfffffffffffdf, 0xfffffeffffffdfff, x1, 688, x2)

inst_118:
// rs1_w0_val == 4294967279, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffffef;  op2val:0x00000440000000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x80000000ffffffef, 0x00000440000000, x1, 696, x2)

inst_119:
// rs2_w0_val == 134217728, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000013ffdfffff;  op2val:0x800000008000000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x000013ffdfffff, 0x800000008000000, x1, 704, x2)

inst_120:
// rs2_w0_val == 67108864, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000ffffffff;  op2val:0x1000000004000000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x4000000ffffffff, 0x1000000004000000, x1, 712, x2)

inst_121:
// rs1_w0_val == 4294967291, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffffb;  op2val:0xbfffffff00001000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffffb, 0xbfffffff00001000, x1, 720, x2)

inst_122:
// rs1_w0_val == 1073741824, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff40000000;  op2val:0x00100000000008
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff40000000, 0x00100000000008, x1, 728, x2)

inst_123:
// rs2_w0_val == 4294963199, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000800000;  op2val:0x00000bffffefff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000000800000, 0x00000bffffefff, x1, 736, x2)

inst_124:
// rs2_w0_val == 8192, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000008000;  op2val:0xffffffdf00002000
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00008000008000, 0xffffffdf00002000, x1, 744, x2)

inst_125:
// rs1_w0_val == 268435456, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff10000000;  op2val:0xffffffff00000200
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffdfff10000000, 0xffffffff00000200, x1, 752, x2)

inst_126:
// rs1_w0_val == 134217728, 
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff08000000;  op2val:0x00001055555555
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xffdfffff08000000, 0x00001055555555, x1, 760, x2)

inst_127:
// rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 4290772991, rs1_w0_val == 4294965247, rs1_w1_val == 4294967291, rs2_w0_val == 4294965247
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffff7ff;  op2val:0xffbffffffffff7ff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffff7ff, 0xffbffffffffff7ff, x1, 768, x2)

inst_128:
// rs2_w1_val == 2863311530, rs1_w0_val == 33554432, rs1_w1_val == 1048576, rs2_w0_val == 3758096383
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000002000000;  op2val:0xaaaaaaaadfffffff
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x10000002000000, 0xaaaaaaaadfffffff, x1, 776, x2)

inst_129:
// rs2_w1_val == 4292870143, rs1_w1_val == 134217728, rs1_w0_val == 2097152
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000200000;  op2val:0xffdfffff00000005
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x800000000200000, 0xffdfffff00000005, x1, 784, x2)

inst_130:
// rs2_w1_val == 4294966271, rs1_w1_val == 1024, rs2_w0_val == 4294967231
// opcode: urcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000003;  op2val:0xfffffbffffffffbf
TEST_RR_OP(urcrsa32, x31, x30, x29, 0x0000000000000000, 0x00040000000003, 0xfffffbffffffffbf, x1, 792, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x24_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 100*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
