
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kcras32 instruction of the RISC-V RV64PZicsr extension for the kcras32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kcras32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x12,signature_x12_1)

inst_0:
// rs1 == rd != rs2, rs1==x8, rs2==x22, rd==x8, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w1_val == -1025, rs2_w1_val == 1431655765, rs2_w0_val == -2147483648
// opcode: kcras32 ; op1:x8; op2:x22; dest:x8; op1val:0xfffffbff80000000;  op2val:0x5555555580000000
TEST_PKRR_OP(kcras32, x8, x8, x22, 0x0000000000000000, 0xfffffbff80000000, 0x5555555580000000, x8, x12, 0, x11)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x27, rs2==x31, rd==x3, rs1_w1_val == rs2_w1_val, rs1_w1_val == -2097153, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w0_val == 536870912, rs1_w0_val == -9, rs2_w1_val == -2097153
// opcode: kcras32 ; op1:x27; op2:x31; dest:x3; op1val:0xffdffffffffffff7;  op2val:0xffdfffff20000000
TEST_PKRR_OP(kcras32, x3, x27, x31, 0x0000000000000000, 0xffdffffffffffff7, 0xffdfffff20000000, x27, x12, 16, x11)

inst_2:
// rs1 == rs2 != rd, rs1==x18, rs2==x18, rd==x7, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val == 1431655765, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w1_val == -3, rs1_w1_val == 1
// opcode: kcras32 ; op1:x18; op2:x18; dest:x7; op1val:0x00000155555555;  op2val:0xfffffffdfffffffc
TEST_PKRR_OP(kcras32, x7, x18, x18, 0x0000000000000000, 0x00000155555555, 0xfffffffdfffffffc, x18, x12, 32, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x26, rs2==x26, rd==x26, rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 536870912, rs1_w1_val == 131072
// opcode: kcras32 ; op1:x26; op2:x26; dest:x26; op1val:0x02000080000000;  op2val:0x20000000fffffff6
TEST_PKRR_OP(kcras32, x26, x26, x26, 0x0000000000000000, 0x02000080000000, 0x20000000fffffff6, x26, x12, 48, x11)

inst_4:
// rs2 == rd != rs1, rs1==x24, rs2==x20, rd==x20, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 16384, rs2_w1_val == 4, rs1_w1_val == 256
// opcode: kcras32 ; op1:x24; op2:x20; dest:x20; op1val:0x00010000000006;  op2val:0x00000400004000
TEST_PKRR_OP(kcras32, x20, x24, x20, 0x0000000000000000, 0x00010000000006, 0x00000400004000, x24, x12, 64, x11)

inst_5:
// rs1==x15, rs2==x9, rd==x4, rs2_w1_val == -1431655766, rs1_w1_val == 1048576, rs2_w0_val == -4194305
// opcode: kcras32 ; op1:x15; op2:x9; dest:x4; op1val:0x100000fffffffa;  op2val:0xaaaaaaaaffbfffff
TEST_PKRR_OP(kcras32, x4, x15, x9, 0x0000000000000000, 0x100000fffffffa, 0xaaaaaaaaffbfffff, x15, x12, 80, x11)

inst_6:
// rs1==x7, rs2==x2, rd==x24, rs2_w1_val == 2147483647, rs1_w0_val == -5, rs2_w0_val == -2, rs1_w1_val == 2
// opcode: kcras32 ; op1:x7; op2:x2; dest:x24; op1val:0x000002fffffffb;  op2val:0x7ffffffffffffffe
TEST_PKRR_OP(kcras32, x24, x7, x2, 0x0000000000000000, 0x000002fffffffb, 0x7ffffffffffffffe, x7, x12, 96, x11)

inst_7:
// rs1==x5, rs2==x10, rd==x1, rs2_w1_val == -1073741825, rs1_w1_val == -67108865, rs1_w0_val == -4194305
// opcode: kcras32 ; op1:x5; op2:x10; dest:x1; op1val:0xfbffffffffbfffff;  op2val:0xbfffffff3fffffff
TEST_PKRR_OP(kcras32, x1, x5, x10, 0x0000000000000000, 0xfbffffffffbfffff, 0xbfffffff3fffffff, x5, x12, 112, x11)

inst_8:
// rs1==x21, rs2==x16, rd==x23, rs2_w1_val == -536870913, rs1_w0_val == -1431655766, rs1_w1_val == 1024, rs2_w0_val == -134217729
// opcode: kcras32 ; op1:x21; op2:x16; dest:x23; op1val:0x000400aaaaaaaa;  op2val:0xdffffffff7ffffff
TEST_PKRR_OP(kcras32, x23, x21, x16, 0x0000000000000000, 0x000400aaaaaaaa, 0xdffffffff7ffffff, x21, x12, 128, x11)

inst_9:
// rs1==x23, rs2==x14, rd==x10, rs2_w1_val == -268435457, rs1_w0_val == -2049, rs1_w1_val == -257, rs2_w0_val == 2048
// opcode: kcras32 ; op1:x23; op2:x14; dest:x10; op1val:0xfffffefffffff7ff;  op2val:0xefffffff00000800
TEST_PKRR_OP(kcras32, x10, x23, x14, 0x0000000000000000, 0xfffffefffffff7ff, 0xefffffff00000800, x23, x12, 144, x11)

inst_10:
// rs1==x20, rs2==x28, rd==x6, rs2_w1_val == -134217729, rs2_w0_val == -33554433, rs1_w0_val == 2147483647, rs1_w1_val == 0
// opcode: kcras32 ; op1:x20; op2:x28; dest:x6; op1val:0x0000007fffffff;  op2val:0xf7fffffffdffffff
TEST_PKRR_OP(kcras32, x6, x20, x28, 0x0000000000000000, 0x0000007fffffff, 0xf7fffffffdffffff, x20, x12, 160, x11)

inst_11:
// rs1==x4, rs2==x7, rd==x13, rs2_w1_val == -67108865, rs2_w0_val == 67108864, rs1_w1_val == -536870913, rs1_w0_val == 8192
// opcode: kcras32 ; op1:x4; op2:x7; dest:x13; op1val:0xdfffffff00002000;  op2val:0xfbffffff04000000
TEST_PKRR_OP(kcras32, x13, x4, x7, 0x0000000000000000, 0xdfffffff00002000, 0xfbffffff04000000, x4, x12, 176, x11)

inst_12:
// rs1==x17, rs2==x6, rd==x14, rs2_w1_val == -33554433, rs2_w0_val == -16385, rs1_w0_val == -17
// opcode: kcras32 ; op1:x17; op2:x6; dest:x14; op1val:0x3fffffffffffffef;  op2val:0xfdffffffffffbfff
TEST_PKRR_OP(kcras32, x14, x17, x6, 0x0000000000000000, 0x3fffffffffffffef, 0xfdffffffffffbfff, x17, x12, 192, x11)

inst_13:
// rs1==x3, rs2==x24, rd==x0, rs2_w1_val == -16777217, rs1_w0_val == 536870912, rs2_w0_val == 8192
// opcode: kcras32 ; op1:x3; op2:x24; dest:x0; op1val:0x00040020000000;  op2val:0xfeffffff00002000
TEST_PKRR_OP(kcras32, x0, x3, x24, 0x0000000000000000, 0x00040020000000, 0xfeffffff00002000, x3, x12, 208, x11)

inst_14:
// rs1==x6, rs2==x15, rd==x2, rs2_w1_val == -8388609, rs2_w0_val == -2097153, rs1_w1_val == 16777216
// opcode: kcras32 ; op1:x6; op2:x15; dest:x2; op1val:0x1000000fffffffb;  op2val:0xff7fffffffdfffff
TEST_PKRR_OP(kcras32, x2, x6, x15, 0x0000000000000000, 0x1000000fffffffb, 0xff7fffffffdfffff, x6, x12, 224, x11)

inst_15:
// rs1==x13, rs2==x0, rd==x5, rs2_w1_val == -4194305, rs1_w0_val == -8388609, rs2_w0_val == 4194304
// opcode: kcras32 ; op1:x13; op2:x0; dest:x5; op1val:0x3fffffffff7fffff;  op2val:0xffbfffff00400000
TEST_PKRR_OP(kcras32, x5, x13, x0, 0x0000000000000000, 0x3fffffffff7fffff, 0xffbfffff00400000, x13, x12, 240, x11)

inst_16:
// rs1==x2, rs2==x4, rd==x17, rs2_w1_val == -1048577, rs1_w1_val == 2097152, rs1_w0_val == -4097
// opcode: kcras32 ; op1:x2; op2:x4; dest:x17; op1val:0x200000ffffefff;  op2val:0xffeffffffffffff6
TEST_PKRR_OP(kcras32, x17, x2, x4, 0x0000000000000000, 0x200000ffffefff, 0xffeffffffffffff6, x2, x12, 256, x11)

inst_17:
// rs1==x22, rs2==x29, rd==x31, rs2_w1_val == -524289, rs1_w1_val == 4194304, rs1_w0_val == -3, rs2_w0_val == -257
// opcode: kcras32 ; op1:x22; op2:x29; dest:x31; op1val:0x400000fffffffd;  op2val:0xfff7fffffffffeff
TEST_PKRR_OP(kcras32, x31, x22, x29, 0x0000000000000000, 0x400000fffffffd, 0xfff7fffffffffeff, x22, x12, 272, x11)

inst_18:
// rs1==x16, rs2==x17, rd==x9, rs2_w1_val == -262145, rs1_w0_val == 2, rs1_w1_val == -33554433
// opcode: kcras32 ; op1:x16; op2:x17; dest:x9; op1val:0xfdffffff00000002;  op2val:0xfffbffff04000000
TEST_PKRR_OP(kcras32, x9, x16, x17, 0x0000000000000000, 0xfdffffff00000002, 0xfffbffff04000000, x16, x12, 288, x4)

inst_19:
// rs1==x1, rs2==x13, rd==x11, rs2_w1_val == -131073, rs2_w0_val == 1024, rs1_w1_val == 1073741824
// opcode: kcras32 ; op1:x1; op2:x13; dest:x11; op1val:0x4000000000000002;  op2val:0xfffdffff00000400
TEST_PKRR_OP(kcras32, x11, x1, x13, 0x0000000000000000, 0x4000000000000002, 0xfffdffff00000400, x1, x12, 304, x4)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_20:
// rs1==x9, rs2==x25, rd==x30, rs2_w1_val == -65537, rs1_w0_val == 16, rs2_w0_val == -33, rs1_w1_val == -8388609
// opcode: kcras32 ; op1:x9; op2:x25; dest:x30; op1val:0xff7fffff00000010;  op2val:0xfffeffffffffffdf
TEST_PKRR_OP(kcras32, x30, x9, x25, 0x0000000000000000, 0xff7fffff00000010, 0xfffeffffffffffdf, x9, x2, 0, x4)

inst_21:
// rs1==x10, rs2==x1, rd==x16, rs2_w1_val == -32769, rs1_w1_val == -134217729, rs2_w0_val == -2049
// opcode: kcras32 ; op1:x10; op2:x1; dest:x16; op1val:0xf7fffffffffffff7;  op2val:0xffff7ffffffff7ff
TEST_PKRR_OP(kcras32, x16, x10, x1, 0x0000000000000000, 0xf7fffffffffffff7, 0xffff7ffffffff7ff, x10, x2, 16, x4)

inst_22:
// rs1==x31, rs2==x5, rd==x29, rs2_w1_val == -16385, rs1_w0_val == 33554432, rs2_w0_val == 2, rs1_w1_val == 536870912
// opcode: kcras32 ; op1:x31; op2:x5; dest:x29; op1val:0x2000000002000000;  op2val:0xffffbfff00000002
TEST_PKRR_OP(kcras32, x29, x31, x5, 0x0000000000000000, 0x2000000002000000, 0xffffbfff00000002, x31, x2, 32, x4)

inst_23:
// rs1==x29, rs2==x3, rd==x21, rs2_w1_val == -8193, rs2_w0_val == 1431655765, rs1_w1_val == -524289
// opcode: kcras32 ; op1:x29; op2:x3; dest:x21; op1val:0xfff7ffffffbfffff;  op2val:0xffffdfff55555555
TEST_PKRR_OP(kcras32, x21, x29, x3, 0x0000000000000000, 0xfff7ffffffbfffff, 0xffffdfff55555555, x29, x2, 48, x4)

inst_24:
// rs1==x30, rs2==x27, rd==x28, rs2_w1_val == -4097, rs1_w1_val == -2, rs2_w0_val == 8
// opcode: kcras32 ; op1:x30; op2:x27; dest:x28; op1val:0xfffffffefffffffa;  op2val:0xffffefff00000008
TEST_PKRR_OP(kcras32, x28, x30, x27, 0x0000000000000000, 0xfffffffefffffffa, 0xffffefff00000008, x30, x2, 64, x4)

inst_25:
// rs1==x12, rs2==x23, rd==x25, rs2_w1_val == -2049, rs2_w0_val == 524288
// opcode: kcras32 ; op1:x12; op2:x23; dest:x25; op1val:0xffdffffffffffff7;  op2val:0xfffff7ff00080000
TEST_PKRR_OP(kcras32, x25, x12, x23, 0x0000000000000000, 0xffdffffffffffff7, 0xfffff7ff00080000, x12, x2, 80, x4)

inst_26:
// rs1==x14, rs2==x12, rd==x27, rs2_w1_val == -1025, rs1_w1_val == -268435457, rs1_w0_val == 0, rs2_w0_val == -1073741825
// opcode: kcras32 ; op1:x14; op2:x12; dest:x27; op1val:0xefffffff00000000;  op2val:0xfffffbffbfffffff
TEST_PKRR_OP(kcras32, x27, x14, x12, 0x0000000000000000, 0xefffffff00000000, 0xfffffbffbfffffff, x14, x2, 96, x4)

inst_27:
// rs1==x28, rs2==x30, rd==x18, rs2_w1_val == -513, rs1_w1_val == 32, rs1_w0_val == -536870913, rs2_w0_val == 4096
// opcode: kcras32 ; op1:x28; op2:x30; dest:x18; op1val:0x000020dfffffff;  op2val:0xfffffdff00001000
TEST_PKRR_OP(kcras32, x18, x28, x30, 0x0000000000000000, 0x000020dfffffff, 0xfffffdff00001000, x28, x2, 112, x4)

inst_28:
// rs1==x25, rs2==x11, rd==x19, rs2_w1_val == -257, rs1_w0_val == 67108864
// opcode: kcras32 ; op1:x25; op2:x11; dest:x19; op1val:0xdfffffff04000000;  op2val:0xfffffeffbfffffff
TEST_PKRR_OP(kcras32, x19, x25, x11, 0x0000000000000000, 0xdfffffff04000000, 0xfffffeffbfffffff, x25, x2, 128, x4)

inst_29:
// rs1==x11, rs2==x21, rd==x22, rs2_w1_val == -129, rs1_w0_val == -1
// opcode: kcras32 ; op1:x11; op2:x21; dest:x22; op1val:0x000009ffffffff;  op2val:0xffffff7ffffffeff
TEST_PKRR_OP(kcras32, x22, x11, x21, 0x0000000000000000, 0x000009ffffffff, 0xffffff7ffffffeff, x11, x2, 144, x4)

inst_30:
// rs1==x0, rs2==x19, rd==x12, rs2_w1_val == -65, rs1_w1_val == 64, rs2_w0_val == 0, rs1_w0_val == -1073741825
// opcode: kcras32 ; op1:x0; op2:x19; dest:x12; op1val:0x000040bfffffff;  op2val:0xffffffbf00000000
TEST_PKRR_OP(kcras32, x12, x0, x19, 0x0000000000000000, 0x000040bfffffff, 0xffffffbf00000000, x0, x2, 160, x4)

inst_31:
// rs1==x19, rs2==x8, rd==x15, rs2_w1_val == -33, rs1_w0_val == 134217728, rs2_w0_val == 134217728
// opcode: kcras32 ; op1:x19; op2:x8; dest:x15; op1val:0x00000508000000;  op2val:0xffffffdf08000000
TEST_PKRR_OP(kcras32, x15, x19, x8, 0x0000000000000000, 0x00000508000000, 0xffffffdf08000000, x19, x2, 176, x4)

inst_32:
// rs2_w1_val == -17, rs2_w0_val == -513, rs1_w1_val == 33554432, rs1_w0_val == 1
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000001;  op2val:0xffffffeffffffdff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x200000000000001, 0xffffffeffffffdff, x30, x2, 192, x4)

inst_33:
// rs2_w1_val == -9, rs1_w0_val == 16777216, rs1_w1_val == -16777217
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff01000000;  op2val:0xfffffff7fffffffe
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfeffffff01000000, 0xfffffff7fffffffe, x30, x2, 208, x4)

inst_34:
// rs2_w1_val == -5, rs2_w0_val == -65, rs1_w1_val == -513
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000001;  op2val:0xfffffffbffffffbf
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000001, 0xfffffffbffffffbf, x30, x2, 224, x4)

inst_35:
// rs2_w1_val == -2, rs1_w0_val == -524289, rs2_w0_val == -8388609, rs1_w1_val == 8388608
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fff7ffff;  op2val:0xfffffffeff7fffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x800000fff7ffff, 0xfffffffeff7fffff, x30, x2, 240, x4)

inst_36:
// rs2_w1_val == -2147483648, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000009;  op2val:0x80000000fffffffe
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000009, 0x80000000fffffffe, x30, x2, 256, x4)

inst_37:
// rs2_w1_val == 1073741824, rs1_w0_val == -8193, rs2_w0_val == -536870913, rs1_w1_val == 128
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080ffffdfff;  op2val:0x40000000dfffffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x000080ffffdfff, 0x40000000dfffffff, x30, x2, 272, x4)

inst_38:
// rs2_w1_val == 268435456, rs1_w1_val == 65536, rs1_w0_val == -1048577
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffefffff;  op2val:0x1000000000000800
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x010000ffefffff, 0x1000000000000800, x30, x2, 288, x4)

inst_39:
// rs2_w1_val == 134217728, rs1_w0_val == 1073741824, rs1_w1_val == -2147483648
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000040000000;  op2val:0x8000000ffffbfff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x8000000040000000, 0x8000000ffffbfff, x30, x2, 304, x4)

inst_40:
// rs2_w1_val == 67108864, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa7fffffff;  op2val:0x400000000000007
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffa7fffffff, 0x400000000000007, x30, x2, 320, x4)

inst_41:
// rs2_w1_val == 33554432, rs1_w1_val == -16385
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000003;  op2val:0x2000000ffbfffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000003, 0x2000000ffbfffff, x30, x2, 336, x4)

inst_42:
// rs2_w1_val == 16777216, rs1_w1_val == -1073741825, rs1_w0_val == 8
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000008;  op2val:0x100000000001000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000008, 0x100000000001000, x30, x2, 352, x4)

inst_43:
// rs2_w1_val == 8388608, rs1_w1_val == 4
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000401000000;  op2val:0x80000000000003
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x00000401000000, 0x80000000000003, x30, x2, 368, x4)

inst_44:
// rs2_w1_val == 4194304, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffffefff;  op2val:0x400000ffffbfff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xffffbfffffffefff, 0x400000ffffbfff, x30, x2, 384, x4)

inst_45:
// rs2_w1_val == 2097152, rs1_w0_val == -131073, rs1_w1_val == -65537
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffffdffff;  op2val:0x20000000000003
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffefffffffdffff, 0x20000000000003, x30, x2, 400, x4)

inst_46:
// rs2_w1_val == 1048576, rs1_w1_val == -3
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000009;  op2val:0x10000000000005
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000009, 0x10000000000005, x30, x2, 416, x4)

inst_47:
// rs2_w1_val == 524288, rs1_w0_val == 64, rs2_w0_val == 512, rs1_w1_val == 134217728
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000040;  op2val:0x08000000000200
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x800000000000040, 0x08000000000200, x30, x2, 432, x4)

inst_48:
// rs1_w0_val == 8388608, rs2_w0_val == -8193
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600800000;  op2val:0x000003ffffdfff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffff600800000, 0x000003ffffdfff, x30, x2, 448, x4)

inst_49:
// rs1_w0_val == 4194304, rs1_w1_val == 262144
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000400000;  op2val:0xffffff7ffffffff8
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x04000000400000, 0xffffff7ffffffff8, x30, x2, 464, x4)

inst_50:
// rs1_w0_val == 2097152, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00200000;  op2val:0x000005fffff7ff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00200000, 0x000005fffff7ff, x30, x2, 480, x4)

inst_51:
// rs1_w0_val == 1048576, rs1_w1_val == -9
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700100000;  op2val:0xfffbfffffffffff8
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffff700100000, 0xfffbfffffffffff8, x30, x2, 496, x4)

inst_52:
// rs1_w0_val == 524288, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00080000;  op2val:0x4000000fdffffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00080000, 0x4000000fdffffff, x30, x2, 512, x4)

inst_53:
// rs1_w0_val == 262144, rs2_w1_val == -1, rs1_w1_val == 16384
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000040000;  op2val:0xfffffffffffffff9
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x00400000040000, 0xfffffffffffffff9, x30, x2, 528, x4)

inst_54:
// rs1_w0_val == 131072, rs2_w1_val == 4096
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00020000;  op2val:0x00100000000007
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00020000, 0x00100000000007, x30, x2, 544, x4)

inst_55:
// rs1_w0_val == 65536, rs2_w0_val == 131072
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900010000;  op2val:0xfff7ffff00020000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x00000900010000, 0xfff7ffff00020000, x30, x2, 560, x4)

inst_56:
// rs1_w0_val == 32768, rs2_w0_val == -262145
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00008000;  op2val:0xffbffffffffbffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00008000, 0xffbffffffffbffff, x30, x2, 576, x4)

inst_57:
// rs1_w0_val == 16384, rs2_w1_val == 2
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00004000;  op2val:0x000002ffffffbf
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00004000, 0x000002ffffffbf, x30, x2, 592, x4)

inst_58:
// rs1_w0_val == 4096, rs2_w0_val == -5
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00001000;  op2val:0x3ffffffffffffffb
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00001000, 0x3ffffffffffffffb, x30, x2, 608, x4)

inst_59:
// rs1_w0_val == 2048, rs2_w0_val == -9
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000800;  op2val:0x000009fffffff7
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000800, 0x000009fffffff7, x30, x2, 624, x4)

inst_60:
// rs1_w0_val == 1024, rs1_w1_val == 268435456
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000400;  op2val:0x200000003fffffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x1000000000000400, 0x200000003fffffff, x30, x2, 640, x4)

inst_61:
// rs1_w0_val == 512, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000200;  op2val:0x80000000ffffbfff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffff800000200, 0x80000000ffffbfff, x30, x2, 656, x4)

inst_62:
// rs1_w0_val == 256, rs2_w0_val == 8388608
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000100;  op2val:0x00000400800000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000100, 0x00000400800000, x30, x2, 672, x4)

inst_63:
// rs1_w0_val == 128, rs1_w1_val == -129, rs2_w0_val == -524289
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000080;  op2val:0x10000000fff7ffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000080, 0x10000000fff7ffff, x30, x2, 688, x4)

inst_64:
// rs1_w0_val == 32, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600000020;  op2val:0xffffbfffdfffffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffff600000020, 0xffffbfffdfffffff, x30, x2, 704, x4)

inst_65:
// rs1_w0_val == 4, rs2_w1_val == 65536
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000004;  op2val:0x010000fffffffe
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x800000000000004, 0x010000fffffffe, x30, x2, 720, x4)

inst_66:
// rs2_w1_val == 262144, rs1_w1_val == 16
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000010;  op2val:0x040000ff7fffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x00001000000010, 0x040000ff7fffff, x30, x2, 736, x4)

inst_67:
// rs2_w1_val == 131072, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003c0000000;  op2val:0x02000000400000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x000003c0000000, 0x02000000400000, x30, x2, 752, x4)

inst_68:
// rs2_w1_val == 32768, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000006;  op2val:0x00800004000000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000006, 0x00800004000000, x30, x2, 768, x4)

inst_69:
// rs2_w1_val == 16384, rs1_w1_val == -2049
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffbfffff;  op2val:0x004000ffffbfff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffbfffff, 0x004000ffffbfff, x30, x2, 784, x4)

inst_70:
// rs2_w1_val == 8192, rs2_w0_val == 1, rs1_w0_val == -65
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffffffbf;  op2val:0x00200000000001
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffbffffffffbf, 0x00200000000001, x30, x2, 800, x4)

inst_71:
// rs2_w1_val == 2048, rs2_w0_val == 33554432
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd02000000;  op2val:0x00080002000000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffd02000000, 0x00080002000000, x30, x2, 816, x4)

inst_72:
// rs2_w1_val == 1024, rs2_w0_val == 1048576
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffffd;  op2val:0x00040000100000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfefffffffffffffd, 0x00040000100000, x30, x2, 832, x4)

inst_73:
// rs2_w1_val == 512, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff3fffffff;  op2val:0x000200fffffff9
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff3fffffff, 0x000200fffffff9, x30, x2, 848, x4)

inst_74:
// rs2_w1_val == 256, rs2_w0_val == 262144
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00000400;  op2val:0x00010000040000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffc00000400, 0x00010000040000, x30, x2, 864, x4)

inst_75:
// rs2_w1_val == 128, rs2_w0_val == 256, rs1_w1_val == 32768
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800004000000;  op2val:0x00008000000100
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x00800004000000, 0x00008000000100, x30, x2, 880, x4)

inst_76:
// rs2_w1_val == 64, rs1_w1_val == -1431655766
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffffff7;  op2val:0x00004000002000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffffff7, 0x00004000002000, x30, x2, 896, x4)

inst_77:
// rs2_w1_val == 32, rs1_w1_val == -8193
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffefffff;  op2val:0x00002000000200
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xffffdfffffefffff, 0x00002000000200, x30, x2, 912, x4)

inst_78:
// rs2_w1_val == 16, rs1_w1_val == -262145, rs2_w0_val == -1048577
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffffffffffd;  op2val:0x000010ffefffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffbfffffffffffd, 0x000010ffefffff, x30, x2, 928, x4)

inst_79:
// rs2_w1_val == 8, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000202000000;  op2val:0x00000820000000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x00000202000000, 0x00000820000000, x30, x2, 944, x4)

inst_80:
// rs2_w0_val == 65536, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffff7;  op2val:0xfffffffb00010000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x400000fffffff7, 0xfffffffb00010000, x30, x2, 960, x4)

inst_81:
// rs2_w0_val == 32768, rs1_w0_val == -65537
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffeffff;  op2val:0x00010000008000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x80000000fffeffff, 0x00010000008000, x30, x2, 976, x4)

inst_82:
// rs2_w0_val == 128, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000007fffffff;  op2val:0xf7ffffff00000080
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x4000007fffffff, 0xf7ffffff00000080, x30, x2, 992, x4)

inst_83:
// rs2_w0_val == 64, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00200000;  op2val:0xffffffef00000040
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x3fffffff00200000, 0xffffffef00000040, x30, x2, 1008, x4)

inst_84:
// rs2_w0_val == 32, rs1_w0_val == -16777217
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000feffffff;  op2val:0xefffffff00000020
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x008000feffffff, 0xefffffff00000020, x30, x2, 1024, x4)

inst_85:
// rs2_w0_val == 16, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000010;  op2val:0x5555555500000010
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000010, 0x5555555500000010, x30, x2, 1040, x4)

inst_86:
// rs2_w0_val == 4, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff602000000;  op2val:0xffffdfff00000004
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffff602000000, 0xffffdfff00000004, x30, x2, 1056, x4)

inst_87:
// rs2_w0_val == -1, rs1_w1_val == -1
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffff7ffff;  op2val:0x008000ffffffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffffff7ffff, 0x008000ffffffff, x30, x2, 1072, x4)

inst_88:
// rs1_w1_val == 1431655765, rs1_w0_val == -262145, rs2_w0_val == -1431655766
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fffbffff;  op2val:0xffffdfffaaaaaaaa
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x55555555fffbffff, 0xffffdfffaaaaaaaa, x30, x2, 1088, x4)

inst_89:
// rs1_w1_val == 2147483647, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffeffff;  op2val:0x400000000010000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffeffff, 0x400000000010000, x30, x2, 1104, x4)

inst_90:
// rs1_w1_val == -4194305, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00800000;  op2val:0xfffffff9c0000000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00800000, 0xfffffff9c0000000, x30, x2, 1120, x4)

inst_91:
// rs1_w1_val == -1048577, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00002000;  op2val:0xffbfffffffdfffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xffefffff00002000, 0xffbfffffffdfffff, x30, x2, 1136, x4)

inst_92:
// rs1_w1_val == -131073, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff02000000;  op2val:0x00200000000003
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffdffff02000000, 0x00200000000003, x30, x2, 1152, x4)

inst_93:
// rs1_w1_val == -32769, rs2_w0_val == 1073741824
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff01000000;  op2val:0x200000040000000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xffff7fff01000000, 0x200000040000000, x30, x2, 1168, x4)

inst_94:
// rs1_w1_val == -4097, rs1_w0_val == 268435456
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff10000000;  op2val:0xfffffff9ffffdfff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xffffefff10000000, 0xfffffff9ffffdfff, x30, x2, 1184, x4)

inst_95:
// rs1_w1_val == -65, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffdffff;  op2val:0x5555555555555555
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xffffffbffffdffff, 0x5555555555555555, x30, x2, 1200, x4)

inst_96:
// rs1_w1_val == -33, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffffb;  op2val:0x00010000000002
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffffb, 0x00010000000002, x30, x2, 1216, x4)

inst_97:
// rs1_w1_val == -17, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00800000;  op2val:0x2000000fffffffe
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xffffffef00800000, 0x2000000fffffffe, x30, x2, 1232, x4)

inst_98:
// rs1_w1_val == -5, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffbfffff;  op2val:0x00100000000020
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffbffbfffff, 0x00100000000020, x30, x2, 1248, x4)

inst_99:
// rs1_w1_val == 67108864, rs2_w0_val == 2147483647
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000008000000;  op2val:0x0000087fffffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x400000008000000, 0x0000087fffffff, x30, x2, 1264, x4)

inst_100:
// rs1_w1_val == 524288, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000100;  op2val:0x000020fffffffb
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x08000000000100, 0x000020fffffffb, x30, x2, 1280, x4)

inst_101:
// rs1_w1_val == 8192, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000004000;  op2val:0x4000000000000200
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x00200000004000, 0x4000000000000200, x30, x2, 1296, x4)

inst_102:
// rs1_w1_val == 4096, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000ff7fffff;  op2val:0xffffffff04000000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x001000ff7fffff, 0xffffffff04000000, x30, x2, 1312, x4)

inst_103:
// rs1_w1_val == 2048, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffdffff;  op2val:0x02000055555555
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x000800fffdffff, 0x02000055555555, x30, x2, 1328, x4)

inst_104:
// rs1_w1_val == 512, rs2_w0_val == 268435456
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000800000;  op2val:0x2000000010000000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x00020000800000, 0x2000000010000000, x30, x2, 1344, x4)

inst_105:
// rs2_w1_val == 1, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000fffffff7;  op2val:0x000001aaaaaaaa
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xc0000000fffffff7, 0x000001aaaaaaaa, x30, x2, 1360, x4)

inst_106:
// rs2_w1_val == 0, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000002;  op2val:0x00000000000008
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x00010000000002, 0x00000000000008, x30, x2, 1376, x4)

inst_107:
// rs1_w1_val == 8, rs2_w0_val == -17
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000808000000;  op2val:0x008000ffffffef
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x00000808000000, 0x008000ffffffef, x30, x2, 1392, x4)

inst_108:
// rs2_w0_val == -268435457, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000200000;  op2val:0x000200efffffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xc000000000200000, 0x000200efffffff, x30, x2, 1408, x4)

inst_109:
// rs2_w0_val == -67108865, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000040000000;  op2val:0xfffffefffbffffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x00000040000000, 0xfffffefffbffffff, x30, x2, 1424, x4)

inst_110:
// rs2_w0_val == -16777217, rs1_w0_val == -134217729
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdf7ffffff;  op2val:0xffdffffffeffffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffdf7ffffff, 0xffdffffffeffffff, x30, x2, 1440, x4)

inst_111:
// rs1_w0_val == -268435457, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000efffffff;  op2val:0xc0000000fffffff6
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x040000efffffff, 0xc0000000fffffff6, x30, x2, 1456, x4)

inst_112:
// rs1_w0_val == -67108865, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffbffffff;  op2val:0xfffffff700000003
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xffffeffffbffffff, 0xfffffff700000003, x30, x2, 1472, x4)

inst_113:
// rs2_w0_val == -131073, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004fffdffff;  op2val:0x000800fffdffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x000004fffdffff, 0x000800fffdffff, x30, x2, 1488, x4)

inst_114:
// rs1_w0_val == -33554433, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fdffffff;  op2val:0x10000000000002
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffff6fdffffff, 0x10000000000002, x30, x2, 1504, x4)

inst_115:
// rs2_w0_val == -65537, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003dfffffff;  op2val:0xffffeffffffeffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x000003dfffffff, 0xffffeffffffeffff, x30, x2, 1520, x4)

inst_116:
// rs2_w0_val == -32769, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004001000000;  op2val:0xfffdffffffff7fff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x00004001000000, 0xfffdffffffff7fff, x30, x2, 1536, x4)

inst_117:
// rs1_w0_val == -2097153, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000ffdfffff;  op2val:0x400000000000400
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x2000000ffdfffff, 0x400000000000400, x30, x2, 1552, x4)

inst_118:
// rs2_w0_val == -4097, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000002;  op2val:0xfffffffaffffefff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000002, 0xfffffffaffffefff, x30, x2, 1568, x4)

inst_119:
// rs2_w0_val == 16777216, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900000080;  op2val:0xfffffff801000000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffff900000080, 0xfffffff801000000, x30, x2, 1584, x4)

inst_120:
// rs2_w0_val == -1025, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffbffff;  op2val:0xdffffffffffffbff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x2000000fffbffff, 0xdffffffffffffbff, x30, x2, 1600, x4)

inst_121:
// rs2_w0_val == -129, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00400000;  op2val:0x55555555ffffff7f
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00400000, 0x55555555ffffff7f, x30, x2, 1616, x4)

inst_122:
// rs1_w0_val == -32769, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffaffff7fff;  op2val:0xfffffdffdfffffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffaffff7fff, 0xfffffdffdfffffff, x30, x2, 1632, x4)

inst_123:
// rs1_w0_val == -16385, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffbfff;  op2val:0x100000040000000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffbfff, 0x100000040000000, x30, x2, 1648, x4)

inst_124:
// rs1_w0_val == -1025, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffffffbff;  op2val:0xfffffff6fffffff7
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffdfffffffffbff, 0xfffffff6fffffff7, x30, x2, 1664, x4)

inst_125:
// rs2_w0_val == -3, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffffefff;  op2val:0xfffffffdfffffffd
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffffefff, 0xfffffffdfffffffd, x30, x2, 1680, x4)

inst_126:
// rs1_w0_val == -513, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffdff;  op2val:0x100000aaaaaaaa
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffdff, 0x100000aaaaaaaa, x30, x2, 1696, x4)

inst_127:
// rs1_w0_val == -257, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005fffffeff;  op2val:0x100000000000008
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x000005fffffeff, 0x100000000000008, x30, x2, 1712, x4)

inst_128:
// rs2_w0_val == 2097152, rs1_w0_val == -33
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffffffdf;  op2val:0xfffffff800200000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x008000ffffffdf, 0xfffffff800200000, x30, x2, 1728, x4)

inst_129:
// rs1_w0_val == -2, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005fffffffe;  op2val:0xaaaaaaaafffeffff
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x000005fffffffe, 0xaaaaaaaafffeffff, x30, x2, 1744, x4)

inst_130:
// rs1_w0_val == -129, 
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffff7f;  op2val:0x00002000000040
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0xffffdfffffffff7f, 0x00002000000040, x30, x2, 1760, x4)

inst_131:
// rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val == 1431655765, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w1_val == -3, rs1_w1_val == 1
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000155555555;  op2val:0xfffffffdfffffffc
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x00000155555555, 0xfffffffdfffffffc, x30, x2, 1776, x4)

inst_132:
// rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 536870912, rs1_w1_val == 131072
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000080000000;  op2val:0x20000000fffffff6
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x02000080000000, 0x20000000fffffff6, x30, x2, 1792, x4)

inst_133:
// rs2_w1_val == -16777217, rs1_w0_val == 536870912, rs2_w0_val == 8192
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040020000000;  op2val:0xfeffffff00002000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x00040020000000, 0xfeffffff00002000, x30, x2, 1808, x4)

inst_134:
// rs2_w1_val == -65, rs1_w1_val == 64, rs2_w0_val == 0, rs1_w0_val == -1073741825
// opcode: kcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040bfffffff;  op2val:0xffffffbf00000000
TEST_PKRR_OP(kcras32, x31, x30, x29, 0x0000000000000000, 0x000040bfffffff, 0xffffffbf00000000, x30, x2, 1824, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 40*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 230*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
