
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the khmbb instruction of the RISC-V RV64PZicsr extension for the khmbb covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",khmbb)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x22, rs2==x20, rd==x22, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h3_val == -513, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs1_h2_val == 64, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h2_val == -9, rs1_h1_val != rs2_h1_val, rs1_h3_val == -16385, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0
// opcode: khmbb ; op1:x22; op2:x20; dest:x22; op1val:0xbfff0040fffc8000;  op2val:0xfdfffff700030003
TEST_PKRR_OP(khmbb, x22, x22, x20, 0x0000000000000000, 0xbfff0040fffc8000, 0xfdfffff700030003, x22, x6, 0, x1)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x8, rd==x5, rs1_h3_val == rs2_h3_val, rs1_h0_val == -3, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h1_val == -257, rs1_h3_val == 0, rs1_h2_val == -9, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == 1024, rs2_h3_val == 0, rs2_h0_val == 256
// opcode: khmbb ; op1:x2; op2:x8; dest:x5; op1val:0x00fff7fffcfffd;  op2val:0x000400feff0100
TEST_PKRR_OP(khmbb, x5, x2, x8, 0x0000000000000000, 0x00fff7fffcfffd, 0x000400feff0100, x2, x6, 16, x1)

inst_2:
// rs1 == rs2 != rd, rs1==x18, rs2==x18, rd==x16, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == -8193, rs1_h0_val == 4096, rs2_h0_val == -513, rs1_h1_val == rs2_h1_val, rs1_h2_val == 21845, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: khmbb ; op1:x18; op2:x18; dest:x16; op1val:0xfff9555500051000;  op2val:0x09dfff0005fdff
TEST_PKRR_OP(khmbb, x16, x18, x18, 0x0000000000000000, 0xfff9555500051000, 0x09dfff0005fdff, x18, x6, 32, x1)

inst_3:
// rs1 == rs2 == rd, rs1==x21, rs2==x21, rd==x21, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h2_val == -1, rs2_h1_val == 21845, rs1_h3_val == 1, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val == 256, rs2_h0_val == -129, rs1_h0_val == 2
// opcode: khmbb ; op1:x21; op2:x21; dest:x21; op1val:0x01fff901000002;  op2val:0xfff9ffff5555ff7f
TEST_PKRR_OP(khmbb, x21, x21, x21, 0x0000000000000000, 0x01fff901000002, 0xfff9ffff5555ff7f, x21, x6, 48, x1)

inst_4:
// rs2 == rd != rs1, rs1==x28, rs2==x11, rd==x11, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 4, rs2_h0_val == -17, rs1_h1_val == 32767, rs1_h0_val == -21846, rs1_h2_val == -257, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h3_val == 32767
// opcode: khmbb ; op1:x28; op2:x11; dest:x11; op1val:0x04feff7fffaaaa;  op2val:0x7fffc0000006ffef
TEST_PKRR_OP(khmbb, x11, x28, x11, 0x0000000000000000, 0x04feff7fffaaaa, 0x7fffc0000006ffef, x28, x6, 64, x1)

inst_5:
// rs1==x3, rs2==x16, rd==x20, rs1_h2_val == rs2_h2_val, rs1_h0_val == -5, rs1_h3_val == 16, rs2_h2_val == -17, rs2_h1_val == -33, rs2_h0_val == -3, rs2_h3_val == 2, rs1_h2_val == -17, rs1_h1_val == -33
// opcode: khmbb ; op1:x3; op2:x16; dest:x20; op1val:0x10ffefffdffffb;  op2val:0x02ffefffdffffd
TEST_PKRR_OP(khmbb, x20, x3, x16, 0x0000000000000000, 0x10ffefffdffffb, 0x02ffefffdffffd, x3, x6, 80, x1)

inst_6:
// rs1==x25, rs2==x30, rd==x24, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == 4, rs2_h0_val == 32, rs1_h2_val == 4096, rs1_h3_val == -21846, rs1_h1_val == 32, rs2_h2_val == 128, rs2_h3_val == 21845, rs1_h0_val == -2049
// opcode: khmbb ; op1:x25; op2:x30; dest:x24; op1val:0xaaaa10000020f7ff;  op2val:0x5555008000040020
TEST_PKRR_OP(khmbb, x24, x25, x30, 0x0000000000000000, 0xaaaa10000020f7ff, 0x5555008000040020, x25, x6, 96, x1)

inst_7:
// rs1==x4, rs2==x19, rd==x25, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val == -17, rs2_h2_val == -257, rs2_h0_val == 0, rs1_h1_val == 64, rs1_h2_val == 0, rs2_h3_val == 512, rs1_h3_val == -5
// opcode: khmbb ; op1:x4; op2:x19; dest:x25; op1val:0xfffb00000040ffef;  op2val:0x200fefffff80000
TEST_PKRR_OP(khmbb, x25, x4, x19, 0x0000000000000000, 0xfffb00000040ffef, 0x200fefffff80000, x4, x6, 112, x1)

inst_8:
// rs1==x23, rs2==x5, rd==x19, rs1_h0_val == rs2_h0_val, rs2_h3_val == -16385, rs1_h1_val == -8193, rs1_h2_val == 256
// opcode: khmbb ; op1:x23; op2:x5; dest:x19; op1val:0x000100dfffc000;  op2val:0xbffffffcfff6c000
TEST_PKRR_OP(khmbb, x19, x23, x5, 0x0000000000000000, 0x000100dfffc000, 0xbffffffcfff6c000, x23, x6, 128, x1)

inst_9:
// rs1==x13, rs2==x9, rd==x12, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == -21846, rs1_h1_val == -2, rs1_h3_val == 64, rs2_h0_val == 32767, rs1_h2_val == 2, rs1_h0_val == 16, rs2_h3_val == 1, rs2_h2_val == 0
// opcode: khmbb ; op1:x13; op2:x9; dest:x12; op1val:0x400002fffe0010;  op2val:0x010000aaaa7fff
TEST_PKRR_OP(khmbb, x12, x13, x9, 0x0000000000000000, 0x400002fffe0010, 0x010000aaaa7fff, x13, x6, 144, x1)

inst_10:
// rs1==x17, rs2==x3, rd==x10, rs2_h3_val == -21846, rs1_h0_val == -16385, rs1_h3_val == 128, rs1_h2_val == -2049, rs2_h1_val == -2049
// opcode: khmbb ; op1:x17; op2:x3; dest:x10; op1val:0x80f7ff0005bfff;  op2val:0xaaaafefff7ff0009
TEST_PKRR_OP(khmbb, x10, x17, x3, 0x0000000000000000, 0x80f7ff0005bfff, 0xaaaafefff7ff0009, x17, x6, 160, x1)

inst_11:
// rs1==x30, rs2==x17, rd==x8, rs2_h3_val == -8193, rs2_h2_val == -3, rs1_h1_val == -1, rs2_h1_val == 64, rs1_h2_val == -3, rs1_h3_val == 4096
// opcode: khmbb ; op1:x30; op2:x17; dest:x8; op1val:0x1000fffdfffff7ff;  op2val:0xdffffffd00400006
TEST_PKRR_OP(khmbb, x8, x30, x17, 0x0000000000000000, 0x1000fffdfffff7ff, 0xdffffffd00400006, x30, x6, 176, x1)

inst_12:
// rs1==x7, rs2==x15, rd==x29, rs2_h3_val == -4097, rs2_h1_val == -3, rs2_h2_val == -2049, rs1_h3_val == -129, rs2_h0_val == -32768
// opcode: khmbb ; op1:x7; op2:x15; dest:x29; op1val:0xff7f1000dffffffd;  op2val:0xeffff7fffffd8000
TEST_PKRR_OP(khmbb, x29, x7, x15, 0x0000000000000000, 0xff7f1000dffffffd, 0xeffff7fffffd8000, x7, x6, 192, x1)

inst_13:
// rs1==x20, rs2==x29, rd==x26, rs2_h3_val == -2049, rs1_h3_val == -1025, rs2_h1_val == 32767, rs1_h1_val == 16384, rs2_h2_val == 256
// opcode: khmbb ; op1:x20; op2:x29; dest:x26; op1val:0xfbffc00040000005;  op2val:0xf7ff01007fff0003
TEST_PKRR_OP(khmbb, x26, x20, x29, 0x0000000000000000, 0xfbffc00040000005, 0xf7ff01007fff0003, x20, x6, 208, x1)

inst_14:
// rs1==x26, rs2==x22, rd==x1, rs2_h3_val == -1025, rs1_h3_val == -3, rs2_h0_val == -4097
// opcode: khmbb ; op1:x26; op2:x22; dest:x1; op1val:0xfffdc000fff9fff8;  op2val:0xfbfffeff0003efff
TEST_PKRR_OP(khmbb, x1, x26, x22, 0x0000000000000000, 0xfffdc000fff9fff8, 0xfbfffeff0003efff, x26, x6, 224, x5)
RVTEST_SIGBASE(x18,signature_x18_0)

inst_15:
// rs1==x31, rs2==x10, rd==x9, rs2_h3_val == -257, rs1_h2_val == 8, rs1_h1_val == -65, rs2_h2_val == -513
// opcode: khmbb ; op1:x31; op2:x10; dest:x9; op1val:0x3fff0008ffbf3fff;  op2val:0xfefffdff00040006
TEST_PKRR_OP(khmbb, x9, x31, x10, 0x0000000000000000, 0x3fff0008ffbf3fff, 0xfefffdff00040006, x31, x18, 0, x5)

inst_16:
// rs1==x10, rs2==x23, rd==x30, rs2_h3_val == -129, rs1_h2_val == 16384, rs1_h3_val == 512, rs1_h0_val == -2, rs2_h2_val == 32767
// opcode: khmbb ; op1:x10; op2:x23; dest:x30; op1val:0x2004000fffefffe;  op2val:0xff7f7ffffeff0009
TEST_PKRR_OP(khmbb, x30, x10, x23, 0x0000000000000000, 0x2004000fffefffe, 0xff7f7ffffeff0009, x10, x18, 16, x5)

inst_17:
// rs1==x0, rs2==x13, rd==x23, rs2_h3_val == -65, rs2_h0_val == 2, rs1_h0_val == 16384, rs1_h2_val == 4, rs1_h3_val == -2049, rs2_h2_val == 512
// opcode: khmbb ; op1:x0; op2:x13; dest:x23; op1val:0xf7ff0004ffdf4000;  op2val:0xffbf0200f7ff0002
TEST_PKRR_OP(khmbb, x23, x0, x13, 0x0000000000000000, 0xf7ff0004ffdf4000, 0xffbf0200f7ff0002, x0, x18, 32, x5)

inst_18:
// rs1==x9, rs2==x2, rd==x3, rs2_h3_val == -33, rs2_h0_val == 8192, rs1_h0_val == -9
// opcode: khmbb ; op1:x9; op2:x2; dest:x3; op1val:0x100000080100fff7;  op2val:0xffdff7ff00052000
TEST_PKRR_OP(khmbb, x3, x9, x2, 0x0000000000000000, 0x100000080100fff7, 0xffdff7ff00052000, x9, x18, 48, x5)

inst_19:
// rs1==x16, rs2==x4, rd==x15, rs2_h3_val == -17, rs1_h1_val == -3, rs1_h3_val == 21845, rs2_h0_val == 8
// opcode: khmbb ; op1:x16; op2:x4; dest:x15; op1val:0x55550007fffdffef;  op2val:0xffeffdffaaaa0008
TEST_PKRR_OP(khmbb, x15, x16, x4, 0x0000000000000000, 0x55550007fffdffef, 0xffeffdffaaaa0008, x16, x18, 64, x5)

inst_20:
// rs1==x24, rs2==x31, rd==x2, rs2_h3_val == -9, rs2_h2_val == 64, rs1_h1_val == -16385, rs1_h3_val == 32
// opcode: khmbb ; op1:x24; op2:x31; dest:x2; op1val:0x200000bfff3fff;  op2val:0xfff70040fffdfffd
TEST_PKRR_OP(khmbb, x2, x24, x31, 0x0000000000000000, 0x200000bfff3fff, 0xfff70040fffdfffd, x24, x18, 80, x5)

inst_21:
// rs1==x29, rs2==x12, rd==x27, rs2_h3_val == -5, rs2_h0_val == -33, rs2_h2_val == -4097, rs2_h1_val == -65
// opcode: khmbb ; op1:x29; op2:x12; dest:x27; op1val:0xfffb00090009c000;  op2val:0xfffbefffffbfffdf
TEST_PKRR_OP(khmbb, x27, x29, x12, 0x0000000000000000, 0xfffb00090009c000, 0xfffbefffffbfffdf, x29, x18, 96, x5)

inst_22:
// rs1==x19, rs2==x24, rd==x0, rs2_h3_val == -3, rs1_h3_val == 2, rs2_h2_val == 2
// opcode: khmbb ; op1:x19; op2:x24; dest:x0; op1val:0x02fff6ffffc000;  op2val:0xfffd00020005fdff
TEST_PKRR_OP(khmbb, x0, x19, x24, 0x0000000000000000, 0x02fff6ffffc000, 0xfffd00020005fdff, x19, x18, 112, x5)

inst_23:
// rs1==x8, rs2==x7, rd==x4, rs2_h3_val == -2, rs1_h2_val == -16385, rs1_h0_val == 4, rs2_h2_val == 2048, rs2_h1_val == -9
// opcode: khmbb ; op1:x8; op2:x7; dest:x4; op1val:0x01bfff7fff0004;  op2val:0xfffe0800fff72000
TEST_PKRR_OP(khmbb, x4, x8, x7, 0x0000000000000000, 0x01bfff7fff0004, 0xfffe0800fff72000, x8, x18, 128, x5)

inst_24:
// rs1==x27, rs2==x1, rd==x31, rs2_h3_val == -32768, rs2_h0_val == 64, rs2_h2_val == -33, rs1_h2_val == 8192, rs1_h3_val == 1024
// opcode: khmbb ; op1:x27; op2:x1; dest:x31; op1val:0x4002000fff90004;  op2val:0x8000ffdffffc0040
TEST_PKRR_OP(khmbb, x31, x27, x1, 0x0000000000000000, 0x4002000fff90004, 0x8000ffdffffc0040, x27, x18, 144, x5)

inst_25:
// rs1==x6, rs2==x28, rd==x17, rs2_h3_val == 16384, rs1_h3_val == -513, rs2_h0_val == -1025, rs1_h0_val == 256
// opcode: khmbb ; op1:x6; op2:x28; dest:x17; op1val:0xfdfffff800050100;  op2val:0x40000040fff8fbff
TEST_PKRR_OP(khmbb, x17, x6, x28, 0x0000000000000000, 0xfdfffff800050100, 0x40000040fff8fbff, x6, x18, 160, x5)

inst_26:
// rs1==x11, rs2==x0, rd==x7, rs2_h3_val == 8192, rs1_h1_val == -32768, rs2_h0_val == -1, rs1_h3_val == -8193, rs2_h2_val == -32768, rs1_h0_val == 1
// opcode: khmbb ; op1:x11; op2:x0; dest:x7; op1val:0xdffffff680000001;  op2val:0x200080000009ffff
TEST_PKRR_OP(khmbb, x7, x11, x0, 0x0000000000000000, 0xdffffff680000001, 0x200080000009ffff, x11, x18, 176, x5)

inst_27:
// rs1==x1, rs2==x6, rd==x14, rs2_h3_val == 4096, rs1_h2_val == -5, rs2_h1_val == 32, rs1_h1_val == -17
// opcode: khmbb ; op1:x1; op2:x6; dest:x14; op1val:0x01fffbffeff7ff;  op2val:0x1000020000200005
TEST_PKRR_OP(khmbb, x14, x1, x6, 0x0000000000000000, 0x01fffbffeff7ff, 0x1000020000200005, x1, x18, 192, x5)

inst_28:
// rs1==x5, rs2==x25, rd==x28, rs2_h3_val == 2048, 
// opcode: khmbb ; op1:x5; op2:x25; dest:x28; op1val:0x1000bfff3ffffff7;  op2val:0x800ffdffffcfffc
TEST_PKRR_OP(khmbb, x28, x5, x25, 0x0000000000000000, 0x1000bfff3ffffff7, 0x800ffdffffcfffc, x5, x18, 208, x2)

inst_29:
// rs1==x14, rs2==x26, rd==x13, rs2_h3_val == 1024, rs2_h1_val == 2, rs1_h1_val == -2049
// opcode: khmbb ; op1:x14; op2:x26; dest:x13; op1val:0xfff9fffdf7fffff7;  op2val:0x400fff60002fdff
TEST_PKRR_OP(khmbb, x13, x14, x26, 0x0000000000000000, 0xfff9fffdf7fffff7, 0x400fff60002fdff, x14, x18, 224, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x15, rs2==x27, rd==x6, rs2_h3_val == 256, rs1_h3_val == -17, rs2_h0_val == -21846, rs2_h1_val == -4097, rs1_h0_val == 512
// opcode: khmbb ; op1:x15; op2:x27; dest:x6; op1val:0xffef400000200200;  op2val:0x100f7ffefffaaaa
TEST_PKRR_OP(khmbb, x6, x15, x27, 0x0000000000000000, 0xffef400000200200, 0x100f7ffefffaaaa, x15, x1, 0, x2)

inst_31:
// rs1==x12, rs2==x14, rd==x18, rs2_h3_val == 128, rs2_h2_val == 16384, rs1_h2_val == 32
// opcode: khmbb ; op1:x12; op2:x14; dest:x18; op1val:0xfffa0020dfff8000;  op2val:0x8040005555fdff
TEST_PKRR_OP(khmbb, x18, x12, x14, 0x0000000000000000, 0xfffa0020dfff8000, 0x8040005555fdff, x12, x1, 16, x2)

inst_32:
// rs2_h3_val == 64, rs1_h0_val == 8, rs2_h1_val == 16384, rs2_h0_val == 128
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x030000ffff0008;  op2val:0x40000740000080
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x030000ffff0008, 0x40000740000080, x30, x1, 32, x2)

inst_33:
// rs2_h3_val == 32, rs1_h2_val == -33, rs2_h1_val == -17
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffdffffafff6;  op2val:0x20f7ffffef2000
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xbfffffdffffafff6, 0x20f7ffffef2000, x30, x1, 48, x2)

inst_34:
// rs2_h3_val == 16, rs1_h3_val == 256, rs2_h2_val == -21846, rs2_h1_val == 8
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x100ffdfbfff0006;  op2val:0x10aaaa0008fffd
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x100ffdfbfff0006, 0x10aaaa0008fffd, x30, x1, 64, x2)

inst_35:
// rs1_h1_val == -5, rs2_h2_val == 4096, rs1_h0_val == -513, rs1_h3_val == 8
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x083ffffffbfdff;  op2val:0xefff1000ffef0008
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x083ffffffbfdff, 0xefff1000ffef0008, x30, x1, 80, x2)

inst_36:
// rs1_h1_val == 8192, rs1_h2_val == -65, rs2_h0_val == 1024
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x80ffbf2000fff9;  op2val:0x8000f7ffffdf0400
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x80ffbf2000fff9, 0x8000f7ffffdf0400, x30, x1, 96, x2)

inst_37:
// rs1_h1_val == 4096, rs2_h2_val == -5
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffa10008000;  op2val:0xdffffffb00020009
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xaaaafffa10008000, 0xdffffffb00020009, x30, x1, 112, x2)

inst_38:
// rs1_h1_val == 2048, rs1_h0_val == -65, rs1_h2_val == 512, rs2_h0_val == -16385, rs2_h2_val == 32, rs2_h1_val == 16
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff802000800ffbf;  op2val:0xfffe00200010bfff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xfff802000800ffbf, 0xfffe00200010bfff, x30, x1, 128, x2)

inst_39:
// rs1_h1_val == 1024, rs2_h0_val == 16384
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x3fff00070400fffe;  op2val:0x020009feff4000
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x3fff00070400fffe, 0x020009feff4000, x30, x1, 144, x2)

inst_40:
// rs1_h1_val == 512, rs2_h3_val == 8
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffdf02000002;  op2val:0x08c000efff0003
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xff7fffdf02000002, 0x08c000efff0003, x30, x1, 160, x2)

inst_41:
// rs1_h1_val == 128, rs1_h3_val == 2048, rs1_h0_val == -4097, rs2_h0_val == 4096
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x800fffc0080efff;  op2val:0xeffffff700201000
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x800fffc0080efff, 0xeffffff700201000, x30, x1, 176, x2)

inst_42:
// rs1_h1_val == 16, rs2_h2_val == -65, rs1_h2_val == -513
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fdff0010fffc;  op2val:0xffdfffbffff9fffd
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xfff6fdff0010fffc, 0xffdfffbffff9fffd, x30, x1, 192, x2)

inst_43:
// rs1_h1_val == 8, rs2_h1_val == -16385
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xff7ff7ff0008c000;  op2val:0xfffefff9bfff0080
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xff7ff7ff0008c000, 0xfffefff9bfff0080, x30, x1, 208, x2)

inst_44:
// rs1_h1_val == 4, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff10000004bfff;  op2val:0xfffeffbffff7bfff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xf7ff10000004bfff, 0xfffeffbffff7bfff, x30, x1, 224, x2)

inst_45:
// rs1_h1_val == 2, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffd00400002fff9;  op2val:0xff7ffffa00100000
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xfffd00400002fff9, 0xff7ffffa00100000, x30, x1, 240, x2)

inst_46:
// rs1_h1_val == 1, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x0601000001f7ff;  op2val:0xefff0002fff63fff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x0601000001f7ff, 0xefff0002fff63fff, x30, x1, 256, x2)

inst_47:
// rs1_h1_val == 0, rs1_h0_val == 1024, rs1_h2_val == 1024, rs2_h2_val == 21845
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff040000000400;  op2val:0x4005555fefffffd
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xf7ff040000000400, 0x4005555fefffffd, x30, x1, 272, x2)

inst_48:
// rs1_h0_val == 21845, rs1_h2_val == 2048, rs1_h3_val == -1, rs2_h1_val == 4096
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xffff0800f7ff5555;  op2val:0xffeff7ff10007fff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xffff0800f7ff5555, 0xffeff7ff10007fff, x30, x1, 288, x2)

inst_49:
// rs1_h0_val == 32767, rs2_h1_val == 128, rs2_h0_val == -9
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x200800ffbf7fff;  op2val:0xfff6ffff0080fff7
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x200800ffbf7fff, 0xfff6ffff0080fff7, x30, x1, 304, x2)

inst_50:
// rs1_h0_val == -8193, rs2_h1_val == 8192, rs2_h2_val == 1, rs1_h3_val == -33
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffdffff9dfff;  op2val:0xfff8000120000080
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xffdfffdffff9dfff, 0xfff8000120000080, x30, x1, 320, x2)

inst_51:
// rs1_h0_val == -1025, rs2_h0_val == 4
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff600052000fbff;  op2val:0x8000800010000004
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xfff600052000fbff, 0x8000800010000004, x30, x1, 336, x2)

inst_52:
// rs1_h0_val == -257, rs2_h2_val == 4
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff90003fff9feff;  op2val:0xfffd0004ffdffffd
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xfff90003fff9feff, 0xfffd0004ffdffffd, x30, x1, 352, x2)

inst_53:
// rs1_h0_val == -129, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x010003fff8ff7f;  op2val:0x200100fff7ff7f
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x010003fff8ff7f, 0x200100fff7ff7f, x30, x1, 368, x2)

inst_54:
// rs1_h0_val == -33, rs2_h0_val == 512
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x06fffdfffdffdf;  op2val:0xfffbdfff40000200
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x06fffdfffdffdf, 0xfffbdfff40000200, x30, x1, 384, x2)

inst_55:
// rs1_h0_val == 8192, rs1_h2_val == -1025, rs2_h0_val == 21845
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfbff00012000;  op2val:0x40ffef00065555
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xfffbfbff00012000, 0x40ffef00065555, x30, x1, 400, x2)

inst_56:
// rs1_h0_val == 2048, rs2_h1_val == 256
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x06000501000800;  op2val:0xfffe000101000004
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x06000501000800, 0xfffe000101000004, x30, x1, 416, x2)

inst_57:
// rs1_h0_val == 128, rs2_h1_val == 512
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x200400fffe0080;  op2val:0x800f7ff0200fff9
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x200400fffe0080, 0x800f7ff0200fff9, x30, x1, 432, x2)

inst_58:
// rs2_h1_val == 1, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x20200000204000;  op2val:0x5555ffbf0001ffdf
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x20200000204000, 0x5555ffbf0001ffdf, x30, x1, 448, x2)

inst_59:
// rs2_h1_val == 0, rs1_h1_val == -4097, rs1_h0_val == -1
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x4000800efffffff;  op2val:0xfff6000700000007
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x4000800efffffff, 0xfff6000700000007, x30, x1, 464, x2)

inst_60:
// rs2_h1_val == -1, rs2_h2_val == 8192, rs2_h3_val == -1
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x1000fff6fffb7fff;  op2val:0xffff2000ffff0100
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x1000fff6fffb7fff, 0xffff2000ffff0100, x30, x1, 480, x2)

inst_61:
// rs2_h0_val == -8193, rs2_h1_val == -2, rs1_h1_val == 21845
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa002055550080;  op2val:0xfff8f7fffffedfff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xaaaa002055550080, 0xfff8f7fffffedfff, x30, x1, 496, x2)

inst_62:
// rs2_h0_val == -2049, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x8000088000ffff;  op2val:0xfff8fffa0006f7ff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x8000088000ffff, 0xfff8fffa0006f7ff, x30, x1, 512, x2)

inst_63:
// rs2_h0_val == -257, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000900013fff;  op2val:0x0820004000feff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xffdf000900013fff, 0x0820004000feff, x30, x1, 528, x2)

inst_64:
// rs2_h0_val == -65, rs2_h3_val == 4, rs2_h2_val == 16, rs1_h3_val == 32767
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0005ffbf2000;  op2val:0x040010fff9ffbf
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x7fff0005ffbf2000, 0x040010fff9ffbf, x30, x1, 544, x2)

inst_65:
// rs2_h0_val == -5, rs1_h3_val == 16384
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffc0100bfff;  op2val:0xbfff00090001fffb
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x4000fffc0100bfff, 0xbfff00090001fffb, x30, x1, 560, x2)

inst_66:
// rs2_h0_val == -2, rs1_h2_val == 128
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x010080fff60010;  op2val:0x04aaaafffffffe
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x010080fff60010, 0x04aaaafffffffe, x30, x1, 576, x2)

inst_67:
// rs2_h0_val == 2048, rs1_h2_val == -8193, rs1_h3_val == -32768
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x8000dfff1000fffc;  op2val:0xfffd008001000800
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x8000dfff1000fffc, 0xfffd008001000800, x30, x1, 592, x2)

inst_68:
// rs2_h0_val == 16, rs1_h2_val == -4097
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x7fffeffffffa3fff;  op2val:0xffef002000000010
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x7fffeffffffa3fff, 0xffef002000000010, x30, x1, 608, x2)

inst_69:
// rs2_h0_val == 1, rs2_h2_val == -16385
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff9f7ff00800200;  op2val:0xfffbbfffffdf0001
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xfff9f7ff00800200, 0xfffbbfffffdf0001, x30, x1, 624, x2)

inst_70:
// rs1_h3_val == -4097, rs1_h2_val == -1, rs2_h1_val == -129
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff0008fdff;  op2val:0xfff60040ff7fbfff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xefffffff0008fdff, 0xfff60040ff7fbfff, x30, x1, 640, x2)

inst_71:
// rs1_h0_val == 64, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x05000000090040;  op2val:0x030004f7ff0002
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x05000000090040, 0x030004f7ff0002, x30, x1, 656, x2)

inst_72:
// rs2_h2_val == -1025, rs2_h1_val == -513
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x800fff7ffef0001;  op2val:0xffdffbfffdff0005
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x800fff7ffef0001, 0xffdffbfffdff0005, x30, x1, 672, x2)

inst_73:
// rs2_h2_val == -129, rs2_h1_val == -32768
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfdff040000070007;  op2val:0x02ff7f80000006
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xfdff040000070007, 0x02ff7f80000006, x30, x1, 688, x2)

inst_74:
// rs1_h2_val == -21846, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xff7faaaaffdfffef;  op2val:0x100dfff00400800
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xff7faaaaffdfffef, 0x100dfff00400800, x30, x1, 704, x2)

inst_75:
// rs2_h2_val == -2, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x09ffbfffffefff;  op2val:0xfffbfffe0100ffbf
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x09ffbfffffefff, 0xfffbfffe0100ffbf, x30, x1, 720, x2)

inst_76:
// rs1_h2_val == 32767, rs1_h0_val == 32
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x007fff00000020;  op2val:0xbfff0002c000fffc
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x007fff00000020, 0xbfff0002c000fffc, x30, x1, 736, x2)

inst_77:
// rs1_h2_val == -129, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xff7fff7f08000002;  op2val:0xbfff008000100020
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xff7fff7f08000002, 0xbfff008000100020, x30, x1, 752, x2)

inst_78:
// rs2_h1_val == 2048, rs1_h3_val == -257, rs1_h2_val == 1
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfeff00010080fffe;  op2val:0xfffbfffb0800fff6
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xfeff00010080fffe, 0xfffbfffb0800fff6, x30, x1, 768, x2)

inst_79:
// rs2_h2_val == 8, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0200efff5555;  op2val:0xfeff00080010ffdf
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xdfff0200efff5555, 0xfeff00080010ffdf, x30, x1, 784, x2)

inst_80:
// rs1_h2_val == -2, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x02fffeffeffffb;  op2val:0x03dfffffbf0005
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x02fffeffeffffb, 0x03dfffffbf0005, x30, x1, 800, x2)

inst_81:
// rs2_h1_val == 1024, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x10000005c0000003;  op2val:0x55553fff0400feff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x10000005c0000003, 0x55553fff0400feff, x30, x1, 816, x2)

inst_82:
// rs1_h2_val == -32768, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x048000fffdfeff;  op2val:0xaaaaffef04000000
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x048000fffdfeff, 0xaaaaffef04000000, x30, x1, 832, x2)

inst_83:
// rs2_h1_val == -8193, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0000fff9fffa;  op2val:0xfff80009dffffff6
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xfffd0000fff9fffa, 0xfff80009dffffff6, x30, x1, 848, x2)

inst_84:
// rs2_h1_val == -1025, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffd4000fff63fff;  op2val:0xfff80009fbffaaaa
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xfffd4000fff63fff, 0xfff80009fbffaaaa, x30, x1, 864, x2)

inst_85:
// rs1_h3_val == -2, rs1_h1_val == -129
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffdfff7f2000;  op2val:0x80000010fff90800
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xfffeffdfff7f2000, 0x80000010fff90800, x30, x1, 880, x2)

inst_86:
// rs1_h2_val == 16, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x0100108000bfff;  op2val:0x2007fff02000002
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x0100108000bfff, 0x2007fff02000002, x30, x1, 896, x2)

inst_87:
// rs2_h1_val == -5, rs1_h1_val == -513
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x05fffdfdff2000;  op2val:0x1000fdfffffbffdf
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x05fffdfdff2000, 0x1000fdfffffbffdf, x30, x1, 912, x2)

inst_88:
// rs1_h1_val == -21846, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x200feffaaaac000;  op2val:0xfdfffdfffffbefff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x200feffaaaac000, 0xfdfffdfffffbefff, x30, x1, 928, x2)

inst_89:
// rs1_h3_val == -65, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff800010007;  op2val:0xfbfffffb0006ffef
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xffbffff800010007, 0xfbfffffb0006ffef, x30, x1, 944, x2)

inst_90:
// rs1_h0_val == 0, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000300800000;  op2val:0xff7f020000030200
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xf7ff000300800000, 0xff7f020000030200, x30, x1, 960, x2)

inst_91:
// rs1_h3_val == -9, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffdffbfdfff;  op2val:0x00fff8fbffffff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xfff7fffdffbfdfff, 0x00fff8fbffffff, x30, x1, 976, x2)

inst_92:
// rs1_h1_val == -1025, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x203ffffbff1000;  op2val:0xdfffffef00060001
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x203ffffbff1000, 0xdfffffef00060001, x30, x1, 992, x2)

inst_93:
// rs1_h1_val == -257, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x7fffff7ffefff7ff;  op2val:0x10c0000020fff8
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x7fffff7ffefff7ff, 0x10c0000020fff8, x30, x1, 1008, x2)

inst_94:
// rs1_h3_val == 8192, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0x2000100000050010;  op2val:0xaaaa00033fffffdf
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0x2000100000050010, 0xaaaa00033fffffdf, x30, x1, 1024, x2)

inst_95:
// rs1_h1_val == -9, 
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffff7fffe;  op2val:0x555500027ffffff7
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xfffff7fffff7fffe, 0x555500027ffffff7, x30, x1, 1040, x2)

inst_96:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == -8193, rs1_h0_val == 4096, rs2_h0_val == -513, rs1_h1_val == rs2_h1_val, rs1_h2_val == 21845, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff9555500051000;  op2val:0x09dfff0005fdff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xfff9555500051000, 0x09dfff0005fdff, x30, x1, 1056, x2)

inst_97:
// rs2_h3_val == -65, rs2_h0_val == 2, rs1_h0_val == 16384, rs1_h2_val == 4, rs1_h3_val == -2049, rs2_h2_val == 512
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0004ffdf4000;  op2val:0xffbf0200f7ff0002
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xf7ff0004ffdf4000, 0xffbf0200f7ff0002, x30, x1, 1072, x2)

inst_98:
// rs2_h3_val == 8192, rs1_h1_val == -32768, rs2_h0_val == -1, rs1_h3_val == -8193, rs2_h2_val == -32768, rs1_h0_val == 1
// opcode: khmbb ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff680000001;  op2val:0x200080000009ffff
TEST_PKRR_OP(khmbb, x31, x30, x29, 0x0000000000000000, 0xdffffff680000001, 0x200080000009ffff, x30, x1, 1088, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x18_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 138*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
