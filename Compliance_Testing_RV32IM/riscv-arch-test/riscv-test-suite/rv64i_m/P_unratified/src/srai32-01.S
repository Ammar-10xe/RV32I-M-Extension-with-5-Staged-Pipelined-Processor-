
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srai32 instruction of the RISC-V RV64PZicsr extension for the srai32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srai32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x16,signature_x16_1)

inst_0:
// rs1 == rd, rs1==x26, rd==x26, rs1_w0_val == -2147483648, imm_val == 11, rs1_w1_val == 2048
// opcode: srai32 ; op1:x26; dest:x26; op1val:0x00080080000000;  immval:0xb
TEST_IMM_OP( srai32, x26, x26, 0x0000000000000000, 0x00080080000000, 0xb, x16, 0, x15)

inst_1:
// rs1 != rd, rs1==x7, rd==x11, imm_val == 31, rs1_w1_val == -1
// opcode: srai32 ; op1:x7; dest:x11; op1val:0xfffffffffffffffc;  immval:0x1f
TEST_IMM_OP( srai32, x11, x7, 0x0000000000000000, 0xfffffffffffffffc, 0x1f, x16, 8, x15)

inst_2:
// rs1==x29, rd==x23, imm_val == 30, rs1_w1_val == -131073, rs1_w0_val == 32768
// opcode: srai32 ; op1:x29; dest:x23; op1val:0xfffdffff00008000;  immval:0x1e
TEST_IMM_OP( srai32, x23, x29, 0x0000000000000000, 0xfffdffff00008000, 0x1e, x16, 16, x15)

inst_3:
// rs1==x0, rd==x14, imm_val == 29, rs1_w1_val == 1
// opcode: srai32 ; op1:x0; dest:x14; op1val:0x0000013fffffff;  immval:0x1d
TEST_IMM_OP( srai32, x14, x0, 0x0000000000000000, 0x0000013fffffff, 0x1d, x16, 24, x15)

inst_4:
// rs1==x4, rd==x22, imm_val == 28, rs1_w1_val == 65536, rs1_w0_val == 8388608
// opcode: srai32 ; op1:x4; dest:x22; op1val:0x01000000800000;  immval:0x1c
TEST_IMM_OP( srai32, x22, x4, 0x0000000000000000, 0x01000000800000, 0x1c, x16, 32, x15)

inst_5:
// rs1==x12, rd==x21, imm_val == 27, rs1_w0_val == 1073741824, rs1_w1_val == -2049
// opcode: srai32 ; op1:x12; dest:x21; op1val:0xfffff7ff40000000;  immval:0x1b
TEST_IMM_OP( srai32, x21, x12, 0x0000000000000000, 0xfffff7ff40000000, 0x1b, x16, 40, x15)

inst_6:
// rs1==x31, rd==x17, imm_val == 26, 
// opcode: srai32 ; op1:x31; dest:x17; op1val:0xfffffff9fffffffa;  immval:0x1a
TEST_IMM_OP( srai32, x17, x31, 0x0000000000000000, 0xfffffff9fffffffa, 0x1a, x16, 48, x15)

inst_7:
// rs1==x9, rd==x6, imm_val == 25, rs1_w0_val == -33
// opcode: srai32 ; op1:x9; dest:x6; op1val:0x000001ffffffdf;  immval:0x19
TEST_IMM_OP( srai32, x6, x9, 0x0000000000000000, 0x000001ffffffdf, 0x19, x16, 56, x15)

inst_8:
// rs1==x17, rd==x10, imm_val == 24, rs1_w0_val == 0
// opcode: srai32 ; op1:x17; dest:x10; op1val:0xc000000000000000;  immval:0x18
TEST_IMM_OP( srai32, x10, x17, 0x0000000000000000, 0xc000000000000000, 0x18, x16, 64, x15)

inst_9:
// rs1==x27, rd==x24, imm_val == 23, rs1_w0_val == -2049, rs1_w1_val == 4096
// opcode: srai32 ; op1:x27; dest:x24; op1val:0x001000fffff7ff;  immval:0x17
TEST_IMM_OP( srai32, x24, x27, 0x0000000000000000, 0x001000fffff7ff, 0x17, x16, 72, x15)

inst_10:
// rs1==x13, rd==x20, imm_val == 22, rs1_w0_val == 131072, rs1_w1_val == 8
// opcode: srai32 ; op1:x13; dest:x20; op1val:0x00000800020000;  immval:0x16
TEST_IMM_OP( srai32, x20, x13, 0x0000000000000000, 0x00000800020000, 0x16, x16, 80, x15)

inst_11:
// rs1==x1, rd==x12, imm_val == 21, rs1_w1_val == -32769, rs1_w0_val == 4
// opcode: srai32 ; op1:x1; dest:x12; op1val:0xffff7fff00000004;  immval:0x15
TEST_IMM_OP( srai32, x12, x1, 0x0000000000000000, 0xffff7fff00000004, 0x15, x16, 88, x15)

inst_12:
// rs1==x6, rd==x9, imm_val == 20, rs1_w0_val == -262145
// opcode: srai32 ; op1:x6; dest:x9; op1val:0x000008fffbffff;  immval:0x14
TEST_IMM_OP( srai32, x9, x6, 0x0000000000000000, 0x000008fffbffff, 0x14, x16, 96, x15)

inst_13:
// rs1==x14, rd==x4, imm_val == 19, 
// opcode: srai32 ; op1:x14; dest:x4; op1val:0x00000500000006;  immval:0x13
TEST_IMM_OP( srai32, x4, x14, 0x0000000000000000, 0x00000500000006, 0x13, x16, 104, x15)

inst_14:
// rs1==x20, rd==x18, imm_val == 18, rs1_w0_val == 536870912, rs1_w1_val == 16384
// opcode: srai32 ; op1:x20; dest:x18; op1val:0x00400020000000;  immval:0x12
TEST_IMM_OP( srai32, x18, x20, 0x0000000000000000, 0x00400020000000, 0x12, x16, 112, x15)

inst_15:
// rs1==x10, rd==x27, imm_val == 17, rs1_w0_val == 2147483647
// opcode: srai32 ; op1:x10; dest:x27; op1val:0x0100007fffffff;  immval:0x11
TEST_IMM_OP( srai32, x27, x10, 0x0000000000000000, 0x0100007fffffff, 0x11, x16, 120, x15)

inst_16:
// rs1==x8, rd==x29, imm_val == 16, rs1_w0_val == -513
// opcode: srai32 ; op1:x8; dest:x29; op1val:0xfffffffafffffdff;  immval:0x10
TEST_IMM_OP( srai32, x29, x8, 0x0000000000000000, 0xfffffffafffffdff, 0x10, x16, 128, x15)

inst_17:
// rs1==x24, rd==x13, imm_val == 15, rs1_w0_val == 16777216
// opcode: srai32 ; op1:x24; dest:x13; op1val:0x00400001000000;  immval:0xf
TEST_IMM_OP( srai32, x13, x24, 0x0000000000000000, 0x00400001000000, 0xf, x16, 136, x15)

inst_18:
// rs1==x11, rd==x0, imm_val == 14, rs1_w0_val == 33554432
// opcode: srai32 ; op1:x11; dest:x0; op1val:0xfffff7ff02000000;  immval:0xe
TEST_IMM_OP( srai32, x0, x11, 0x0000000000000000, 0xfffff7ff02000000, 0xe, x16, 144, x15)

inst_19:
// rs1==x22, rd==x5, imm_val == 13, 
// opcode: srai32 ; op1:x22; dest:x5; op1val:0xfffdffff00008000;  immval:0xd
TEST_IMM_OP( srai32, x5, x22, 0x0000000000000000, 0xfffdffff00008000, 0xd, x16, 152, x15)

inst_20:
// rs1==x30, rd==x31, imm_val == 12, rs1_w0_val == 2
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfffffff800000002;  immval:0xc
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfffffff800000002, 0xc, x16, 160, x15)

inst_21:
// rs1==x18, rd==x3, imm_val == 10, rs1_w0_val == 524288, rs1_w1_val == -8193
// opcode: srai32 ; op1:x18; dest:x3; op1val:0xffffdfff00080000;  immval:0xa
TEST_IMM_OP( srai32, x3, x18, 0x0000000000000000, 0xffffdfff00080000, 0xa, x16, 168, x15)

inst_22:
// rs1==x5, rd==x2, imm_val == 9, rs1_w1_val == -1048577, rs1_w0_val == -129
// opcode: srai32 ; op1:x5; dest:x2; op1val:0xffefffffffffff7f;  immval:0x9
TEST_IMM_OP( srai32, x2, x5, 0x0000000000000000, 0xffefffffffffff7f, 0x9, x16, 176, x15)

inst_23:
// rs1==x2, rd==x19, imm_val == 8, rs1_w1_val == 8388608
// opcode: srai32 ; op1:x2; dest:x19; op1val:0x80000000008000;  immval:0x8
TEST_IMM_OP( srai32, x19, x2, 0x0000000000000000, 0x80000000008000, 0x8, x16, 184, x15)

inst_24:
// rs1==x15, rd==x7, imm_val == 7, rs1_w1_val == 33554432, rs1_w0_val == 4194304
// opcode: srai32 ; op1:x15; dest:x7; op1val:0x200000000400000;  immval:0x7
TEST_IMM_OP( srai32, x7, x15, 0x0000000000000000, 0x200000000400000, 0x7, x16, 192, x4)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_25:
// rs1==x19, rd==x25, imm_val == 6, rs1_w0_val == 16, rs1_w1_val == 134217728
// opcode: srai32 ; op1:x19; dest:x25; op1val:0x800000000000010;  immval:0x6
TEST_IMM_OP( srai32, x25, x19, 0x0000000000000000, 0x800000000000010, 0x6, x2, 0, x4)

inst_26:
// rs1==x21, rd==x8, imm_val == 5, 
// opcode: srai32 ; op1:x21; dest:x8; op1val:0x00400002000000;  immval:0x5
TEST_IMM_OP( srai32, x8, x21, 0x0000000000000000, 0x00400002000000, 0x5, x2, 8, x4)

inst_27:
// rs1==x25, rd==x1, imm_val == 4, rs1_w1_val == 536870912, rs1_w0_val == 64
// opcode: srai32 ; op1:x25; dest:x1; op1val:0x2000000000000040;  immval:0x4
TEST_IMM_OP( srai32, x1, x25, 0x0000000000000000, 0x2000000000000040, 0x4, x2, 16, x4)

inst_28:
// rs1==x3, rd==x15, imm_val == 3, rs1_w1_val == 0, rs1_w0_val == -65537
// opcode: srai32 ; op1:x3; dest:x15; op1val:0x000000fffeffff;  immval:0x3
TEST_IMM_OP( srai32, x15, x3, 0x0000000000000000, 0x000000fffeffff, 0x3, x2, 24, x4)

inst_29:
// rs1==x28, rd==x30, imm_val == 2, 
// opcode: srai32 ; op1:x28; dest:x30; op1val:0x0100007fffffff;  immval:0x2
TEST_IMM_OP( srai32, x30, x28, 0x0000000000000000, 0x0100007fffffff, 0x2, x2, 32, x4)

inst_30:
// rs1==x16, rd==x28, imm_val == 1, rs1_w1_val == 16777216
// opcode: srai32 ; op1:x16; dest:x28; op1val:0x100000000800000;  immval:0x1
TEST_IMM_OP( srai32, x28, x16, 0x0000000000000000, 0x100000000800000, 0x1, x2, 40, x4)

inst_31:
// rs1==x23, rd==x16, imm_val == 0, rs1_w0_val == -5, rs1_w1_val == 1073741824
// opcode: srai32 ; op1:x23; dest:x16; op1val:0x40000000fffffffb;  immval:0x0
TEST_IMM_OP( srai32, x16, x23, 0x0000000000000000, 0x40000000fffffffb, 0x0, x2, 48, x4)

inst_32:
// rs1_w1_val == -1431655766, rs1_w0_val == 512
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xaaaaaaaa00000200;  immval:0x15
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xaaaaaaaa00000200, 0x15, x2, 56, x4)

inst_33:
// rs1_w1_val == 1431655765, rs1_w0_val == 67108864
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x5555555504000000;  immval:0x1d
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x5555555504000000, 0x1d, x2, 64, x4)

inst_34:
// rs1_w1_val == 2147483647, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x7fffffff00000040;  immval:0x1d
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x7fffffff00000040, 0x1d, x2, 72, x4)

inst_35:
// rs1_w1_val == -1073741825, rs1_w0_val == -16777217
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xbffffffffeffffff;  immval:0x1a
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xbffffffffeffffff, 0x1a, x2, 80, x4)

inst_36:
// rs1_w1_val == -536870913, rs1_w0_val == -67108865
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xdffffffffbffffff;  immval:0xc
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xdffffffffbffffff, 0xc, x2, 88, x4)

inst_37:
// rs1_w1_val == -268435457, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xefffffff00000000;  immval:0x0
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xefffffff00000000, 0x0, x2, 96, x4)

inst_38:
// rs1_w1_val == -134217729, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xf7fffffffffffffc;  immval:0x1b
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xf7fffffffffffffc, 0x1b, x2, 104, x4)

inst_39:
// rs1_w1_val == -67108865, rs1_w0_val == -2
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfbfffffffffffffe;  immval:0x10
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfbfffffffffffffe, 0x10, x2, 112, x4)

inst_40:
// rs1_w1_val == -33554433, rs1_w0_val == -1431655766
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfdffffffaaaaaaaa;  immval:0x1c
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfdffffffaaaaaaaa, 0x1c, x2, 120, x4)

inst_41:
// rs1_w1_val == -16777217, rs1_w0_val == 4096
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfeffffff00001000;  immval:0x11
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfeffffff00001000, 0x11, x2, 128, x4)

inst_42:
// rs1_w1_val == -8388609, rs1_w0_val == 1048576
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xff7fffff00100000;  immval:0x1b
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xff7fffff00100000, 0x1b, x2, 136, x4)

inst_43:
// rs1_w1_val == -4194305, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xffbfffff20000000;  immval:0x1e
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xffbfffff20000000, 0x1e, x2, 144, x4)

inst_44:
// rs1_w1_val == -2097153, rs1_w0_val == 134217728
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xffdfffff08000000;  immval:0x18
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xffdfffff08000000, 0x18, x2, 152, x4)

inst_45:
// rs1_w1_val == -524289, rs1_w0_val == 16384
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfff7ffff00004000;  immval:0xd
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfff7ffff00004000, 0xd, x2, 160, x4)

inst_46:
// rs1_w1_val == -262145, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfffbffff00000010;  immval:0xe
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfffbffff00000010, 0xe, x2, 168, x4)

inst_47:
// rs1_w1_val == -65537, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfffeffff00020000;  immval:0xb
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfffeffff00020000, 0xb, x2, 176, x4)

inst_48:
// rs1_w1_val == -16385, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xffffbffffffeffff;  immval:0x19
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xffffbffffffeffff, 0x19, x2, 184, x4)

inst_49:
// rs1_w1_val == -4097, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xffffefff00000004;  immval:0x16
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xffffefff00000004, 0x16, x2, 192, x4)

inst_50:
// rs1_w1_val == -1025, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfffffbff00080000;  immval:0x1d
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfffffbff00080000, 0x1d, x2, 200, x4)

inst_51:
// rs1_w1_val == -513, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfffffdff00000200;  immval:0x4
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfffffdff00000200, 0x4, x2, 208, x4)

inst_52:
// rs1_w1_val == -257, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfffffeff00000009;  immval:0x19
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfffffeff00000009, 0x19, x2, 216, x4)

inst_53:
// rs1_w0_val == -65, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xffffffffffffffbf;  immval:0x18
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xffffffffffffffbf, 0x18, x2, 224, x4)

inst_54:
// rs1_w0_val == -17, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x000005ffffffef;  immval:0x5
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x000005ffffffef, 0x5, x2, 232, x4)

inst_55:
// rs1_w0_val == -9, rs1_w1_val == 268435456
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x10000000fffffff7;  immval:0x9
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x10000000fffffff7, 0x9, x2, 240, x4)

inst_56:
// rs1_w0_val == -3, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x004000fffffffd;  immval:0x5
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x004000fffffffd, 0x5, x2, 248, x4)

inst_57:
// rs1_w0_val == 268435456, rs1_w1_val == 262144
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x04000010000000;  immval:0x10
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x04000010000000, 0x10, x2, 256, x4)

inst_58:
// rs1_w0_val == 2097152, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x5555555500200000;  immval:0x16
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x5555555500200000, 0x16, x2, 264, x4)

inst_59:
// rs1_w0_val == 262144, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xefffffff00040000;  immval:0x10
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xefffffff00040000, 0x10, x2, 272, x4)

inst_60:
// rs1_w0_val == 65536, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xffbfffff00010000;  immval:0x1d
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xffbfffff00010000, 0x1d, x2, 280, x4)

inst_61:
// rs1_w0_val == 8192, rs1_w1_val == 4
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x00000400002000;  immval:0x3
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x00000400002000, 0x3, x2, 288, x4)

inst_62:
// rs1_w0_val == 2048, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xffffefff00000800;  immval:0x1f
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xffffefff00000800, 0x1f, x2, 296, x4)

inst_63:
// rs1_w0_val == 1024, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfffffeff00000400;  immval:0x0
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfffffeff00000400, 0x0, x2, 304, x4)

inst_64:
// rs1_w0_val == 256, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xff7fffff00000100;  immval:0x6
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xff7fffff00000100, 0x6, x2, 312, x4)

inst_65:
// rs1_w0_val == 128, rs1_w1_val == 524288
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x08000000000080;  immval:0x0
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x08000000000080, 0x0, x2, 320, x4)

inst_66:
// rs1_w0_val == 32, rs1_w1_val == -2
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfffffffe00000020;  immval:0x8
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfffffffe00000020, 0x8, x2, 328, x4)

inst_67:
// rs1_w0_val == 8, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xffff7fff00000008;  immval:0xe
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xffff7fff00000008, 0xe, x2, 336, x4)

inst_68:
// rs1_w0_val == 1, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x00000800000001;  immval:0x1c
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x00000800000001, 0x1c, x2, 344, x4)

inst_69:
// rs1_w0_val == -1, rs1_w1_val == 1048576
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x100000ffffffff;  immval:0x9
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x100000ffffffff, 0x9, x2, 352, x4)

inst_70:
// rs1_w1_val == -129, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xffffff7f00000003;  immval:0x10
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xffffff7f00000003, 0x10, x2, 360, x4)

inst_71:
// rs1_w1_val == -65, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xffffffbf00000008;  immval:0x3
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xffffffbf00000008, 0x3, x2, 368, x4)

inst_72:
// rs1_w1_val == -33, rs1_w0_val == 1431655765
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xffffffdf55555555;  immval:0x11
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xffffffdf55555555, 0x11, x2, 376, x4)

inst_73:
// rs1_w1_val == -17, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xffffffef00200000;  immval:0x12
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xffffffef00200000, 0x12, x2, 384, x4)

inst_74:
// rs1_w1_val == -9, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfffffff700000007;  immval:0x4
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfffffff700000007, 0x4, x2, 392, x4)

inst_75:
// rs1_w1_val == -5, rs1_w0_val == -131073
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfffffffbfffdffff;  immval:0x8
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfffffffbfffdffff, 0x8, x2, 400, x4)

inst_76:
// rs1_w1_val == -3, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfffffffd00000009;  immval:0xc
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfffffffd00000009, 0xc, x2, 408, x4)

inst_77:
// rs1_w1_val == -2147483648, rs1_w0_val == -4097
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x80000000ffffefff;  immval:0x17
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x80000000ffffefff, 0x17, x2, 416, x4)

inst_78:
// rs1_w1_val == 67108864, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x400000002000000;  immval:0x4
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x400000002000000, 0x4, x2, 424, x4)

inst_79:
// rs1_w1_val == 4194304, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x400000fffbffff;  immval:0x11
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x400000fffbffff, 0x11, x2, 432, x4)

inst_80:
// rs1_w1_val == 2097152, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x20000000000040;  immval:0x14
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x20000000000040, 0x14, x2, 440, x4)

inst_81:
// rs1_w1_val == 131072, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x02000020000000;  immval:0x1
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x02000020000000, 0x1, x2, 448, x4)

inst_82:
// rs1_w1_val == 32768, rs1_w0_val == -536870913
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x008000dfffffff;  immval:0xe
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x008000dfffffff, 0xe, x2, 456, x4)

inst_83:
// rs1_w1_val == 8192, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x00200040000000;  immval:0x15
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x00200040000000, 0x15, x2, 464, x4)

inst_84:
// rs1_w1_val == 1024, rs1_w0_val == -33554433
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x000400fdffffff;  immval:0xc
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x000400fdffffff, 0xc, x2, 472, x4)

inst_85:
// rs1_w1_val == 512, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x000200ffffefff;  immval:0x9
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x000200ffffefff, 0x9, x2, 480, x4)

inst_86:
// rs1_w1_val == 256, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x000100fdffffff;  immval:0x0
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x000100fdffffff, 0x0, x2, 488, x4)

inst_87:
// rs1_w1_val == 128, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x00008000000001;  immval:0x2
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x00008000000001, 0x2, x2, 496, x4)

inst_88:
// rs1_w1_val == 64, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x00004001000000;  immval:0x6
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x00004001000000, 0x6, x2, 504, x4)

inst_89:
// rs1_w1_val == 32, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x00002000000010;  immval:0x14
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x00002000000010, 0x14, x2, 512, x4)

inst_90:
// rs1_w1_val == 2, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x000002fffffdff;  immval:0xc
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x000002fffffdff, 0xc, x2, 520, x4)

inst_91:
// rs1_w0_val == -1073741825, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xffffefffbfffffff;  immval:0x13
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xffffefffbfffffff, 0x13, x2, 528, x4)

inst_92:
// rs1_w0_val == -268435457, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfffffff7efffffff;  immval:0x1b
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfffffff7efffffff, 0x1b, x2, 536, x4)

inst_93:
// rs1_w0_val == -134217729, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x000003f7ffffff;  immval:0x16
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x000003f7ffffff, 0x16, x2, 544, x4)

inst_94:
// rs1_w0_val == -8388609, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xaaaaaaaaff7fffff;  immval:0x16
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xaaaaaaaaff7fffff, 0x16, x2, 552, x4)

inst_95:
// rs1_w0_val == -4194305, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x4000000ffbfffff;  immval:0x6
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x4000000ffbfffff, 0x6, x2, 560, x4)

inst_96:
// rs1_w0_val == -2097153, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfffdffffffdfffff;  immval:0x12
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfffdffffffdfffff, 0x12, x2, 568, x4)

inst_97:
// rs1_w0_val == -1048577, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x1000000ffefffff;  immval:0xf
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x1000000ffefffff, 0xf, x2, 576, x4)

inst_98:
// rs1_w0_val == -524289, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x1000000fff7ffff;  immval:0xd
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x1000000fff7ffff, 0xd, x2, 584, x4)

inst_99:
// rs1_w1_val == 16, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x00001000000003;  immval:0x0
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x00001000000003, 0x0, x2, 592, x4)

inst_100:
// rs1_w0_val == -32769, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfeffffffffff7fff;  immval:0x16
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfeffffffffff7fff, 0x16, x2, 600, x4)

inst_101:
// rs1_w0_val == -16385, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x8000000ffffbfff;  immval:0x2
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x8000000ffffbfff, 0x2, x2, 608, x4)

inst_102:
// rs1_w0_val == -8193, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0x002000ffffdfff;  immval:0x0
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0x002000ffffdfff, 0x0, x2, 616, x4)

inst_103:
// rs1_w0_val == -1025, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xffff7ffffffffbff;  immval:0x2
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xffff7ffffffffbff, 0x2, x2, 624, x4)

inst_104:
// rs1_w0_val == -257, 
// opcode: srai32 ; op1:x30; dest:x31; op1val:0xfffbfffffffffeff;  immval:0x1
TEST_IMM_OP( srai32, x31, x30, 0x0000000000000000, 0xfffbfffffffffeff, 0x1, x2, 632, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x16_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x16_1:
    .fill 25*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 80*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
