
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umul8 instruction of the RISC-V RV64PZicsr extension for the umul8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umul8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 == rd != rs2, rs1==x4, rs2==x19, rd==x4, rs1_b0_val == 0, rs1_b7_val != rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b2_val == 32, rs1_b6_val != rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b0_val == 251, rs1_b5_val != rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b4_val != rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b1_val == 239, rs2_b4_val == 254, rs1_b1_val == 16, rs1_b2_val == 191
// opcode: umul8 ; op1:x4; op2:x19; dest:x4; op1val:0x0e0f050d07bf1000;  op2val:0x050712fe1120effb
TEST_P64_PNN_OP(umul8, x4, $rd_hi, x4, x19, 0x0000000000000000, $correctval_hi, 0x0e0f050d07bf1000, 0x050712fe1120effb, x11, 0, x15)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x24, rd==x28, rs1_b7_val == rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b0_val == 191, rs1_b5_val == 128, rs1_b6_val == 85, rs2_b3_val == 32, rs2_b6_val == 128, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == 128, rs2_b7_val == 191, rs1_b7_val == 191, rs1_b2_val == 85, rs1_b4_val == 64, rs2_b1_val == 1
// opcode: umul8 ; op1:x2; op2:x24; dest:x28; op1val:0xbf5580400c5580bf;  op2val:0xbf80090620110109
TEST_P64_PNN_OP(umul8, x28, $rd_hi, x2, x24, 0x0000000000000000, $correctval_hi, 0xbf5580400c5580bf, 0xbf80090620110109, x11, 16, x15)

inst_2:
// rs1 == rs2 != rd, rs1==x10, rs2==x10, rd==x16, rs1_b6_val == rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b7_val == 2, rs1_b5_val == 8, rs2_b5_val == 0, rs2_b1_val == 223, rs1_b0_val == 2, rs2_b2_val == 85, rs2_b6_val == 1, rs1_b6_val == 1, rs1_b1_val == 2, rs1_b2_val == 127
// opcode: umul8 ; op1:x10; op2:x10; dest:x16; op1val:0x0d01080c097f0202;  op2val:0x020100060a55df05
TEST_P64_PNN_OP(umul8, x16, $rd_hi, x10, x10, 0x0000000000000000, $correctval_hi, 0x0d01080c097f0202, 0x020100060a55df05, x11, 32, x15)

inst_3:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs1_b5_val == rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b0_val == 1, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val == 255, rs1_b3_val == 1, rs1_b7_val == 239, rs2_b1_val == 255
// opcode: umul8 ; op1:x18; op2:x18; dest:x18; op1val:0xef010b060109ff0d;  op2val:0x0d010b0f0a03ff01
TEST_P64_PNN_OP(umul8, x18, $rd_hi, x18, x18, 0x0000000000000000, $correctval_hi, 0xef010b060109ff0d, 0x0d010b0f0a03ff01, x11, 48, x15)

inst_4:
// rs2 == rd != rs1, rs1==x7, rs2==x2, rd==x2, rs1_b4_val == rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b7_val == 4, rs2_b0_val == 253, rs1_b0_val == 128, rs2_b3_val == 251, rs1_b3_val == 255, rs2_b4_val == 253, rs1_b4_val == 253, rs1_b1_val == 8, rs2_b2_val == 191, rs1_b2_val == 251, rs2_b5_val == 247
// opcode: umul8 ; op1:x7; op2:x2; dest:x2; op1val:0x041211fdfffb0880;  op2val:0x0f09f7fdfbbf06fd
TEST_P64_PNN_OP(umul8, x2, $rd_hi, x7, x2, 0x0000000000000000, $correctval_hi, 0x041211fdfffb0880, 0x0f09f7fdfbbf06fd, x11, 64, x15)

inst_5:
// rs1==x14, rs2==x26, rd==x20, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b0_val == 223, rs2_b5_val == 128, rs2_b6_val == 253, rs1_b7_val == 128, rs1_b6_val == 128, rs2_b3_val == 255, rs2_b1_val == 64, rs1_b1_val == 64, rs2_b4_val == 32, rs1_b4_val == 16, rs2_b2_val == 247, rs1_b2_val == 254
// opcode: umul8 ; op1:x14; op2:x26; dest:x20; op1val:0x80800910fffe400f;  op2val:0x03fd8020fff740df
TEST_P64_PNN_OP(umul8, x20, $rd_hi, x14, x26, 0x0000000000000000, $correctval_hi, 0x80800910fffe400f, 0x03fd8020fff740df, x11, 80, x15)

inst_6:
// rs1==x17, rs2==x1, rd==x24, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b6_val == 251, rs1_b1_val == 223, rs2_b7_val == 251, rs2_b5_val == 85, rs1_b7_val == 64
// opcode: umul8 ; op1:x17; op2:x1; dest:x24; op1val:0x40fb070e0b09df07;  op2val:0xfb0b550606090b0f
TEST_P64_PNN_OP(umul8, x24, $rd_hi, x17, x1, 0x0000000000000000, $correctval_hi, 0x40fb070e0b09df07, 0xfb0b550606090b0f, x11, 96, x15)

inst_7:
// rs1==x30, rs2==x14, rd==x10, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b0_val == 254, rs1_b0_val == 254, rs2_b3_val == 2, rs2_b1_val == 254, rs1_b6_val == 16, rs1_b4_val == 223, rs1_b7_val == 251, rs1_b5_val == 223, rs2_b4_val == 1, rs2_b7_val == 8
// opcode: umul8 ; op1:x30; op2:x14; dest:x10; op1val:0xfb10dfdf0a0b0afe;  op2val:0x080503010206fefe
TEST_P64_PNN_OP(umul8, x10, $rd_hi, x30, x14, 0x0000000000000000, $correctval_hi, 0xfb10dfdf0a0b0afe, 0x080503010206fefe, x11, 112, x15)

inst_8:
// rs1==x8, rs2==x31, rd==x12, rs2_b7_val == 170, rs2_b0_val == 8, rs2_b4_val == 85, rs1_b0_val == 255, rs1_b3_val == 0, rs1_b4_val == 251, rs2_b2_val == 251
// opcode: umul8 ; op1:x8; op2:x31; dest:x12; op1val:0xbf030dfb000f80ff;  op2val:0xaa130b550afb0f08
TEST_P64_PNN_OP(umul8, x12, $rd_hi, x8, x31, 0x0000000000000000, $correctval_hi, 0xbf030dfb000f80ff, 0xaa130b550afb0f08, x11, 128, x15)

inst_9:
// rs1==x24, rs2==x28, rd==x14, rs2_b7_val == 85, rs2_b3_val == 85, rs1_b3_val == 85, rs2_b5_val == 2, rs1_b0_val == 8, rs2_b0_val == 255, rs2_b6_val == 64, rs1_b4_val == 127, rs2_b1_val == 128, rs1_b5_val == 85, rs1_b2_val == 247, rs1_b7_val == 8
// opcode: umul8 ; op1:x24; op2:x28; dest:x14; op1val:0x0813557f55f70b08;  op2val:0x5540020b550e80ff
TEST_P64_PNN_OP(umul8, x14, $rd_hi, x24, x28, 0x0000000000000000, $correctval_hi, 0x0813557f55f70b08, 0x5540020b550e80ff, x11, 144, x15)

inst_10:
// rs1==x5, rs2==x16, rd==x8, rs2_b7_val == 127, rs2_b5_val == 253, rs1_b5_val == 2, rs2_b0_val == 16, rs1_b3_val == 2, rs1_b6_val == 8, rs2_b2_val == 239, rs1_b4_val == 255
// opcode: umul8 ; op1:x5; op2:x16; dest:x8; op1val:0x080802ff02550f09;  op2val:0x7f0afd2006ef1110
TEST_P64_PNN_OP(umul8, x8, $rd_hi, x5, x16, 0x0000000000000000, $correctval_hi, 0x080802ff02550f09, 0x7f0afd2006ef1110, x11, 160, x15)

inst_11:
// rs1==x23, rs2==x8, rd==x30, rs2_b7_val == 223, rs2_b5_val == 251, rs1_b6_val == 170, rs1_b7_val == 0, rs2_b1_val == 32
// opcode: umul8 ; op1:x23; op2:x8; dest:x30; op1val:0x00aa08fd0312050f;  op2val:0xdf80fb0c0cbf2006
TEST_P64_PNN_OP(umul8, x30, $rd_hi, x23, x8, 0x0000000000000000, $correctval_hi, 0x00aa08fd0312050f, 0xdf80fb0c0cbf2006, x11, 176, x15)

inst_12:
// rs1==x12, rs2==x13, rd==x26, rs2_b7_val == 239, rs1_b1_val == 4, rs2_b1_val == 0, rs1_b3_val == 223
// opcode: umul8 ; op1:x12; op2:x13; dest:x26; op1val:0x115505ffdf13040b;  op2val:0xeffd05130c060005
TEST_P64_PNN_OP(umul8, x26, $rd_hi, x12, x13, 0x0000000000000000, $correctval_hi, 0x115505ffdf13040b, 0xeffd05130c060005, x11, 192, x15)

inst_13:
// rs1==x21, rs2==x17, rd==x22, rs2_b7_val == 247, rs2_b0_val == 128, rs2_b3_val == 1, rs1_b2_val == 255, rs2_b1_val == 85
// opcode: umul8 ; op1:x21; op2:x17; dest:x22; op1val:0x08080d0f02ff1107;  op2val:0xf7fd0011010e5580
TEST_P64_PNN_OP(umul8, x22, $rd_hi, x21, x17, 0x0000000000000000, $correctval_hi, 0x08080d0f02ff1107, 0xf7fd0011010e5580, x11, 208, x15)

inst_14:
// rs1==x3, rs2==x7, rd==x6, rs2_b7_val == 253, rs1_b5_val == 253, rs2_b0_val == 170, rs1_b7_val == 223
// opcode: umul8 ; op1:x3; op2:x7; dest:x6; op1val:0xdf05fd1101030a80;  op2val:0xfd400f200b060daa
TEST_P64_PNN_OP(umul8, x6, $rd_hi, x3, x7, 0x0000000000000000, $correctval_hi, 0xdf05fd1101030a80, 0xfd400f200b060daa, x11, 224, x15)

inst_15:
// rs1==x13, rs2==x0, rs2_b7_val == 254, rs2_b4_val == 0, rs2_b0_val == 247, rs1_b2_val == 4, rs1_b0_val == 247, rs1_b6_val == 239, rs1_b3_val == 16, rs2_b2_val == 170
// opcode: umul8 ; op1:x13; op2:x0; dest:x16; op1val:0x0fef0606100407f7;  op2val:0xfefdfd0009aa03f7
TEST_P64_PNN_OP(umul8, x16, $rd_hi, x13, x0, 0x0000000000000000, $correctval_hi, 0x0fef0606100407f7, 0xfefdfd0009aa03f7, x11, 240, x15)

inst_16:
// rs1==x9, rs2==x29, rs2_b7_val == 128, rs1_b7_val == 1, rs1_b2_val == 2, rs2_b0_val == 64, rs1_b3_val == 8, rs1_b6_val == 32, rs2_b1_val == 8
// opcode: umul8 ; op1:x9; op2:x29; dest:x23; op1val:0x01200f7f08020d11;  op2val:0x80090d0102050840
TEST_P64_PNN_OP(umul8, x23, $rd_hi, x9, x29, 0x0000000000000000, $correctval_hi, 0x01200f7f08020d11, 0x80090d0102050840, x11, 256, x15)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_17:
// rs1==x27, rs2==x3, rs2_b7_val == 64, rs2_b6_val == 85, rs1_b4_val == 85, rs1_b6_val == 255, rs1_b7_val == 253, rs1_b5_val == 127, rs1_b0_val == 127
// opcode: umul8 ; op1:x27; op2:x3; dest:x21; op1val:0xfdff7f550004137f;  op2val:0x40550f03070d0506
TEST_P64_PNN_OP(umul8, x21, $rd_hi, x27, x3, 0x0000000000000000, $correctval_hi, 0xfdff7f550004137f, 0x40550f03070d0506, x2, 0, x7)

inst_18:
// rs1==x31, rs2==x15, rs2_b7_val == 32, rs2_b3_val == 170, rs1_b5_val == 16, rs1_b0_val == 32, rs1_b3_val == 32, rs2_b1_val == 2, rs2_b4_val == 8
// opcode: umul8 ; op1:x31; op2:x15; dest:x21; op1val:0x0612100b20121320;  op2val:0x200f0708aa070240
TEST_P64_PNN_OP(umul8, x21, $rd_hi, x31, x15, 0x0000000000000000, $correctval_hi, 0x0612100b20121320, 0x200f0708aa070240, x2, 16, x7)

inst_19:
// rs1==x11, rs2==x6, rs2_b7_val == 16, rs1_b0_val == 223, rs2_b5_val == 254, rs1_b5_val == 254, rs2_b1_val == 170, rs1_b6_val == 223, rs2_b3_val == 4, rs2_b6_val == 32, rs1_b4_val == 128
// opcode: umul8 ; op1:x11; op2:x6; dest:x20; op1val:0x05dffe8007040cdf;  op2val:0x1020fe0c040caa0d
TEST_P64_PNN_OP(umul8, x20, $rd_hi, x11, x6, 0x0000000000000000, $correctval_hi, 0x05dffe8007040cdf, 0x1020fe0c040caa0d, x2, 32, x7)

inst_20:
// rs1==x19, rs2==x23, rs2_b7_val == 4, rs2_b6_val == 0, rs1_b5_val == 4, rs2_b5_val == 127, rs1_b6_val == 253
// opcode: umul8 ; op1:x19; op2:x23; dest:x26; op1val:0x11fd04fd1307ff0f;  op2val:0x04007f06200d0310
TEST_P64_PNN_OP(umul8, x26, $rd_hi, x19, x23, 0x0000000000000000, $correctval_hi, 0x11fd04fd1307ff0f, 0x04007f06200d0310, x2, 48, x7)

inst_21:
// rs1==x1, rs2==x30, rs2_b7_val == 1, rs2_b0_val == 191, rs1_b7_val == 170, rs2_b6_val == 4, rs1_b3_val == 191
// opcode: umul8 ; op1:x1; op2:x30; dest:x14; op1val:0xaa0bfdfbbffb0a09;  op2val:0x01040b03550a0fbf
TEST_P64_PNN_OP(umul8, x14, $rd_hi, x1, x30, 0x0000000000000000, $correctval_hi, 0xaa0bfdfbbffb0a09, 0x01040b03550a0fbf, x2, 64, x7)

inst_22:
// rs1==x29, rs2==x27, rs2_b7_val == 255, rs1_b0_val == 239, rs2_b5_val == 64, rs2_b0_val == 32, rs1_b6_val == 247, rs1_b4_val == 32, rs1_b2_val == 128
// opcode: umul8 ; op1:x29; op2:x27; dest:x10; op1val:0x0cf71020bf8080ef;  op2val:0xff0f4009fb05df20
TEST_P64_PNN_OP(umul8, x10, $rd_hi, x29, x27, 0x0000000000000000, $correctval_hi, 0x0cf71020bf8080ef, 0xff0f4009fb05df20, x2, 80, x7)

inst_23:
// rs1==x15, rs2==x22, rs2_b7_val == 0, rs1_b6_val == 191, rs1_b3_val == 251, rs1_b7_val == 255, rs1_b2_val == 32
// opcode: umul8 ; op1:x15; op2:x22; dest:x10; op1val:0xffbffe12fb201102;  op2val:0x000b40050b13030b
TEST_P64_PNN_OP(umul8, x10, $rd_hi, x15, x22, 0x0000000000000000, $correctval_hi, 0xffbffe12fb201102, 0x000b40050b13030b, x2, 96, x7)

inst_24:
// rs1==x22, rs2==x20, rs2_b6_val == 170, rs2_b5_val == 170, rs2_b3_val == 0, rs1_b3_val == 64
// opcode: umul8 ; op1:x22; op2:x20; dest:x26; op1val:0x800e020c40020a00;  op2val:0x12aaaa0a000a070a
TEST_P64_PNN_OP(umul8, x26, $rd_hi, x22, x20, 0x0000000000000000, $correctval_hi, 0x800e020c40020a00, 0x12aaaa0a000a070a, x2, 112, x7)

inst_25:
// rs1==x20, rs2==x5, rs2_b6_val == 127, rs2_b3_val == 128, rs2_b1_val == 16
// opcode: umul8 ; op1:x20; op2:x5; dest:x8; op1val:0xfbdf131307ff10ff;  op2val:0x0a7f0703800c1013
TEST_P64_PNN_OP(umul8, x8, $rd_hi, x20, x5, 0x0000000000000000, $correctval_hi, 0xfbdf131307ff10ff, 0x0a7f0703800c1013, x2, 128, x7)

inst_26:
// rs1==x26, rs2==x4, rs2_b6_val == 191, rs2_b3_val == 223, rs1_b3_val == 239, rs2_b5_val == 32, rs2_b2_val == 2, rs1_b2_val == 239, rs1_b1_val == 0, rs1_b4_val == 1
// opcode: umul8 ; op1:x26; op2:x4; dest:x20; op1val:0x03fd1301efef0008;  op2val:0xfbbf2055df020006
TEST_P64_PNN_OP(umul8, x20, $rd_hi, x26, x4, 0x0000000000000000, $correctval_hi, 0x03fd1301efef0008, 0xfbbf2055df020006, x2, 144, x7)

inst_27:
// rs1==x6, rs2==x25, rs2_b6_val == 223, rs1_b6_val == 0, rs2_b0_val == 4, rs1_b1_val == 32
// opcode: umul8 ; op1:x6; op2:x25; dest:x3; op1val:0xff0007fddf802003;  op2val:0x11df400e0c13df04
TEST_P64_PNN_OP(umul8, x3, $rd_hi, x6, x25, 0x0000000000000000, $correctval_hi, 0xff0007fddf802003, 0x11df400e0c13df04, x2, 160, x7)

inst_28:
// rs1==x25, rs2==x9, rs2_b6_val == 239, rs1_b1_val == 251, rs1_b3_val == 170, rs1_b6_val == 2
// opcode: umul8 ; op1:x25; op2:x9; dest:x26; op1val:0x0c02df11aa06fb00;  op2val:0x02ef0f0efbfb0d09
TEST_P64_PNN_OP(umul8, x26, $rd_hi, x25, x9, 0x0000000000000000, $correctval_hi, 0x0c02df11aa06fb00, 0x02ef0f0efbfb0d09, x2, 176, x7)

inst_29:
// rs1==x16, rs2==x11, rs1_b4_val == 0, rs2_b4_val == 4
// opcode: umul8 ; op1:x16; op2:x11; dest:x12; op1val:0x08f77f0008200c02;  op2val:0x7f400c048007aa06
TEST_P64_PNN_OP(umul8, x12, $rd_hi, x16, x11, 0x0000000000000000, $correctval_hi, 0x08f77f0008200c02, 0x7f400c048007aa06, x2, 192, x7)

inst_30:
// rs1==x0, rs2==x21, rs1_b3_val == 127, rs2_b2_val == 0, rs2_b1_val == 253, rs1_b7_val == 85
// opcode: umul8 ; op1:x0; op2:x21; dest:x12; op1val:0x55080c0d7f020605;  op2val:0xfb01aa0eff00fd09
TEST_P64_PNN_OP(umul8, x12, $rd_hi, x0, x21, 0x0000000000000000, $correctval_hi, 0x55080c0d7f020605, 0xfb01aa0eff00fd09, x2, 208, x7)

inst_31:
// rs1==x28, rs2==x12, rs1_b3_val == 247, rs1_b2_val == 8, rs2_b2_val == 8, rs1_b1_val == 85, rs2_b6_val == 251, rs1_b4_val == 247, rs2_b4_val == 251
// opcode: umul8 ; op1:x28; op2:x12; dest:x22; op1val:0x010f11f7f708550b;  op2val:0x13fb03fb0d080980
TEST_P64_PNN_OP(umul8, x22, $rd_hi, x28, x12, 0x0000000000000000, $correctval_hi, 0x010f11f7f708550b, 0x13fb03fb0d080980, x2, 224, x7)

inst_32:
// rs1_b3_val == 253, rs2_b5_val == 255, rs1_b1_val == 191, rs2_b2_val == 1
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x0900090efd03bfff;  op2val:0x0403ff030001effe
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0900090efd03bfff, 0x0403ff030001effe, x2, 240, x7)

inst_33:
// rs1_b3_val == 254, rs1_b2_val == 170, rs1_b5_val == 247
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x0355f7dffeaa06ef;  op2val:0x400e55138002ef07
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0355f7dffeaa06ef, 0x400e55138002ef07, x2, 256, x7)

inst_34:
// rs1_b3_val == 128, rs2_b1_val == 191, rs2_b3_val == 16, rs2_b4_val == 191, rs2_b6_val == 8, rs1_b4_val == 8, rs1_b2_val == 253
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0xff0d800880fd0912;  op2val:0x000811bf1008bf05
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff0d800880fd0912, 0x000811bf1008bf05, x2, 272, x7)

inst_35:
// rs1_b3_val == 4, rs1_b6_val == 64
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf40800b04080820;  op2val:0xfe12071111070d40
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbf40800b04080820, 0xfe12071111070d40, x2, 288, x7)

inst_36:
// rs1_b2_val == 223, rs2_b6_val == 247, rs1_b6_val == 127
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x067f02010cdf0380;  op2val:0x06f70d20ff110609
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x067f02010cdf0380, 0x06f70d20ff110609, x2, 304, x7)

inst_37:
// rs1_b2_val == 64, rs2_b5_val == 1
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x1340060aff400a07;  op2val:0x0520010c020b0f0c
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x1340060aff400a07, 0x0520010c020b0f0c, x2, 320, x7)

inst_38:
// rs1_b2_val == 16, rs2_b2_val == 16, rs2_b0_val == 127
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x55ff80550a100620;  op2val:0x0a7f0e050510407f
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x55ff80550a100620, 0x0a7f0e050510407f, x2, 336, x7)

inst_39:
// rs1_b2_val == 1, rs2_b0_val == 0, rs1_b7_val == 127
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f0c11058001df13;  op2val:0xffaa7f2007000d00
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7f0c11058001df13, 0xffaa7f2007000d00, x2, 352, x7)

inst_40:
// rs1_b2_val == 0, rs1_b1_val == 1, rs2_b2_val == 254, rs1_b0_val == 85
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x5508f70e40000155;  op2val:0x0901ff0c00feaa01
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x5508f70e40000155, 0x0901ff0c00feaa01, x2, 368, x7)

inst_41:
// rs1_b1_val == 170, rs1_b7_val == 247, rs1_b4_val == 4, rs2_b3_val == 8
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7bf0304aa09aa07;  op2val:0xef0a03fe08011311
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7bf0304aa09aa07, 0xef0a03fe08011311, x2, 384, x7)

inst_42:
// rs1_b1_val == 127, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x55bffe0f0aaa7f20;  op2val:0x060901bfaa0f0101
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x55bffe0f0aaa7f20, 0x060901bfaa0f0101, x2, 400, x7)

inst_43:
// rs2_b6_val == 254, rs2_b5_val == 4, rs1_b6_val == 4, rs1_b5_val == 32, rs2_b4_val == 128
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x0404200cfbaa00f7;  op2val:0x12fe0480110c050b
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0404200cfbaa00f7, 0x12fe0480110c050b, x2, 416, x7)

inst_44:
// rs1_b1_val == 239, rs2_b5_val == 223
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x03f713040c00ef12;  op2val:0x4000df80fb010309
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x03f713040c00ef12, 0x4000df80fb010309, x2, 432, x7)

inst_45:
// rs1_b1_val == 247, rs2_b4_val == 64, rs2_b2_val == 223, rs2_b5_val == 191, rs1_b6_val == 254
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffe03030f0cf720;  op2val:0x040dbf4006df1003
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7ffe03030f0cf720, 0x040dbf4006df1003, x2, 448, x7)

inst_46:
// rs1_b1_val == 253, rs1_b4_val == 254, rs2_b3_val == 247
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x00100bfeaa7ffd80;  op2val:0x20efbf0af7fbff0d
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00100bfeaa7ffd80, 0x20efbf0af7fbff0d, x2, 464, x7)

inst_47:
// rs2_b2_val == 64, rs2_b3_val == 239
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x550d7f5504dffdbf;  op2val:0x03aa0600ef402010
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x550d7f5504dffdbf, 0x03aa0600ef402010, x2, 480, x7)

inst_48:
// rs2_b2_val == 4, rs2_b5_val == 16, rs2_b0_val == 85, rs2_b6_val == 255
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x00ff8020df0c00ef;  op2val:0x20ff100c00041355
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00ff8020df0c00ef, 0x20ff100c00041355, x2, 496, x7)

inst_49:
// rs2_b2_val == 255, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x05550b090e0afb0f;  op2val:0x0ffefbfb0dff550c
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x05550b090e0afb0f, 0x0ffefbfb0dff550c, x2, 512, x7)

inst_50:
// rs2_b1_val == 127, rs1_b5_val == 170, rs2_b3_val == 127
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x400baa0905fbfd0d;  op2val:0x0409800f7f0e7f11
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x400baa0905fbfd0d, 0x0409800f7f0e7f11, x2, 528, x7)

inst_51:
// rs2_b1_val == 247, rs2_b2_val == 253, rs1_b0_val == 170, rs2_b5_val == 8
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x057f0c12ffbfbfaa;  op2val:0x200b0803fffdf755
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x057f0c12ffbfbfaa, 0x200b0803fffdf755, x2, 544, x7)

inst_52:
// rs2_b1_val == 251, rs2_b3_val == 64
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x01120805550c0af7;  op2val:0x0608ff134007fb05
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x01120805550c0af7, 0x0608ff134007fb05, x2, 560, x7)

inst_53:
// rs2_b1_val == 4, rs1_b0_val == 16, rs1_b4_val == 239
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfdf7efdf0f0610;  op2val:0x12130b13074004fd
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdfdf7efdf0f0610, 0x12130b13074004fd, x2, 576, x7)

inst_54:
// rs2_b0_val == 239, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0xef1012ef037ff712;  op2val:0xaa0f08110dfe0fef
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xef1012ef037ff712, 0xaa0f08110dfe0fef, x2, 592, x7)

inst_55:
// rs2_b0_val == 2, rs2_b6_val == 2, rs1_b0_val == 1
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x13ef11070e051001;  op2val:0x0f02ff1207000e02
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x13ef11070e051001, 0x0f02ff1207000e02, x2, 608, x7)

inst_56:
// rs2_b6_val == 16, rs1_b5_val == 239
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x0803ef1003020820;  op2val:0x0810060f02030340
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0803ef1003020820, 0x0810060f02030340, x2, 624, x7)

inst_57:
// rs1_b1_val == 254, rs1_b4_val == 2
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x0c057f02807ffe06;  op2val:0x090c2006200c0740
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0c057f02807ffe06, 0x090c2006200c0740, x2, 640, x7)

inst_58:
// rs1_b7_val == 2, rs2_b2_val == 128
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x021206097f0f0603;  op2val:0x0a11aa0f0a800108
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x021206097f0f0603, 0x0a11aa0f0a800108, x2, 656, x7)

inst_59:
// rs1_b0_val == 251, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0xf77f120912fd0ffb;  op2val:0x0307090607f712df
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf77f120912fd0ffb, 0x0307090607f712df, x2, 672, x7)

inst_60:
// rs1_b0_val == 253, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf550a800c05fd;  op2val:0xf70511000fdf5540
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdf550a800c05fd, 0xf70511000fdf5540, x2, 688, x7)

inst_61:
// rs1_b0_val == 64, rs1_b4_val == 191, rs2_b4_val == 239
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x070d03bf0402fb40;  op2val:0xaadf55ef07020a20
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x070d03bf0402fb40, 0xaadf55ef07020a20, x2, 704, x7)

inst_62:
// rs1_b0_val == 4, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x011110120caaaa04;  op2val:0xaa7f0200070d0280
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x011110120caaaa04, 0xaa7f0200070d0280, x2, 720, x7)

inst_63:
// rs2_b4_val == 170, rs1_b5_val == 1
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x0cbf010505130c02;  op2val:0xfe1212aa0620fdfd
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0cbf010505130c02, 0xfe1212aa0620fdfd, x2, 736, x7)

inst_64:
// rs2_b4_val == 127, rs1_b5_val == 64, rs2_b5_val == 239
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x0b80400c01070d04;  op2val:0x0701ef7f0e050202
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0b80400c01070d04, 0x0701ef7f0e050202, x2, 752, x7)

inst_65:
// rs2_b4_val == 223, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x090cf77f04201204;  op2val:0x802055df11bf0313
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x090cf77f04201204, 0x802055df11bf0313, x2, 768, x7)

inst_66:
// rs2_b4_val == 247, rs1_b7_val == 16
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x101340ef40200020;  op2val:0xfe0609f708200404
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x101340ef40200020, 0xfe0609f708200404, x2, 784, x7)

inst_67:
// rs1_b5_val == 251, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x09fbfbf71005ef20;  op2val:0xfe030e03020d0540
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x09fbfbf71005ef20, 0xfe030e03020d0540, x2, 800, x7)

inst_68:
// rs2_b3_val == 191, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf11110a12bf7f40;  op2val:0x0a06050dbfdf0906
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbf11110a12bf7f40, 0x0a06050dbfdf0906, x2, 816, x7)

inst_69:
// rs1_b7_val == 254, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0xfefd401040040d0a;  op2val:0x0609550e09df060f
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfefd401040040d0a, 0x0609550e09df060f, x2, 832, x7)

inst_70:
// rs2_b3_val == 253, rs1_b5_val == 255
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x0900ff0d7fdffbef;  op2val:0xfe05fdfdfd050180
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0900ff0d7fdffbef, 0xfe05fdfdfd050180, x2, 848, x7)

inst_71:
// rs2_b3_val == 254, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x104005df55401100;  op2val:0x01084055feff0507
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x104005df55401100, 0x01084055feff0507, x2, 864, x7)

inst_72:
// rs1_b5_val == 0, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x060500dffdf7fd02;  op2val:0xfd0304df0411f708
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x060500dffdf7fd02, 0xfd0304df0411f708, x2, 880, x7)

inst_73:
// rs2_b4_val == 2, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x05aa7ffd800aeffe;  op2val:0x097f0d020fbf20f7
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x05aa7ffd800aeffe, 0x097f0d020fbf20f7, x2, 896, x7)

inst_74:
// rs2_b2_val == 127, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x03090e1300bf137f;  op2val:0x0c0720efbf7fbf10
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x03090e1300bf137f, 0x0c0720efbf7fbf10, x2, 912, x7)

inst_75:
// rs1_b7_val == 32, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x200105fedf800380;  op2val:0xffaa200040010540
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x200105fedf800380, 0xffaa200040010540, x2, 928, x7)

inst_76:
// rs2_b4_val == 16, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x0680130d0dfdfe07;  op2val:0x000d0f10ff110409
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0680130d0dfdfe07, 0x000d0f10ff110409, x2, 944, x7)

inst_77:
// rs1_b5_val == 191, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf05bf0eff0a0809;  op2val:0x0100df040b0afb0f
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbf05bf0eff0a0809, 0x0100df040b0afb0f, x2, 960, x7)

inst_78:
// rs1_b4_val == 170, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0xff077faa80400709;  op2val:0x09110107050a0709
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff077faa80400709, 0x09110107050a0709, x2, 976, x7)

inst_79:
// rs2_b4_val == 255, 
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x120e120f55df4012;  op2val:0x551255ff0355df40
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x120e120f55df4012, 0x551255ff0355df40, x2, 992, x7)

inst_80:
// rs1_b6_val == rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b7_val == 2, rs1_b5_val == 8, rs2_b5_val == 0, rs2_b1_val == 223, rs1_b0_val == 2, rs2_b2_val == 85, rs2_b6_val == 1, rs1_b6_val == 1, rs1_b1_val == 2, rs1_b2_val == 127
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x0d01080c097f0202;  op2val:0x020100060a55df05
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0d01080c097f0202, 0x020100060a55df05, x2, 1008, x7)

inst_81:
// rs2_b7_val == 254, rs2_b4_val == 0, rs2_b0_val == 247, rs1_b2_val == 4, rs1_b0_val == 247, rs1_b6_val == 239, rs1_b3_val == 16, rs2_b2_val == 170
// opcode: umul8 ; op1:x30; op2:x29; dest:x31; op1val:0x0fef0606100407f7;  op2val:0xfefdfd0009aa03f7
TEST_P64_PNN_OP(umul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0fef0606100407f7, 0xfefdfd0009aa03f7, x2, 1024, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 130*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
