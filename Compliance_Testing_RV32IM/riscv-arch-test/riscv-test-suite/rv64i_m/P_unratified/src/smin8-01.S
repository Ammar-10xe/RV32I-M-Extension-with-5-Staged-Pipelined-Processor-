
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smin8 instruction of the RISC-V RV64PZicsr extension for the smin8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smin8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rd != rs2, rs1==x3, rs2==x5, rd==x3, rs1_b0_val == -128, rs2_b4_val == -1, rs1_b7_val != rs2_b7_val, rs2_b3_val == 85, rs1_b5_val == -5, rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b6_val != rs2_b6_val, rs1_b6_val < 0 and rs2_b6_val < 0, rs1_b5_val != rs2_b5_val, rs1_b4_val == -86, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b4_val != rs2_b4_val, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b3_val != rs2_b3_val, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b2_val == rs2_b2_val, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val, rs2_b2_val == 2, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val > 0, rs2_b7_val == -65, rs2_b1_val == -1, rs1_b2_val == 2, rs2_b0_val == 64, rs1_b1_val == -128, rs1_b7_val == 2, rs2_b5_val == 1, rs1_b6_val == -128
// opcode: smin8 ; op1:x3; op2:x5; dest:x3; op1val:0x280fbaac0028080;  op2val:0xbfc001ff5502ff40
TEST_RR_OP(smin8, x3, x3, x5, 0x0000000000000000, 0x280fbaac0028080, 0xbfc001ff5502ff40, x8, 0, x18)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x19, rs2==x25, rd==x13, rs1_b7_val == rs2_b7_val, rs1_b0_val == -65, rs2_b0_val == 127, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b2_val == 4, rs1_b5_val == 16, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b3_val == -128, rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b6_val == 64, rs1_b5_val > 0 and rs2_b5_val < 0, rs2_b4_val == -65, rs1_b7_val == -65, rs2_b1_val == 16, rs1_b4_val > 0 and rs2_b4_val < 0, rs2_b2_val == -5, rs1_b2_val != rs2_b2_val
// opcode: smin8 ; op1:x19; op2:x25; dest:x13; op1val:0xbf3f10058004f6bf;  op2val:0xbf40fcbf07fb107f
TEST_RR_OP(smin8, x13, x19, x25, 0x0000000000000000, 0xbf3f10058004f6bf, 0xbf40fcbf07fb107f, x8, 8, x18)

inst_2:
// rs1 == rs2 != rd, rs1==x24, rs2==x24, rd==x9, rs1_b7_val < 0 and rs2_b7_val > 0, rs2_b1_val == 2, rs2_b0_val == -9, rs1_b5_val == 32, rs2_b3_val == -2, rs2_b6_val == -9, rs1_b1_val == -33, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b7_val == -86, rs1_b4_val < 0 and rs2_b4_val > 0, rs2_b4_val == 32, rs1_b3_val < 0 and rs2_b3_val < 0
// opcode: smin8 ; op1:x24; op2:x24; dest:x9; op1val:0xaaf820f6f606dfbf;  op2val:0x9f7c020fe3f02f7
TEST_RR_OP(smin8, x9, x24, x24, 0x0000000000000000, 0xaaf820f6f606dfbf, 0x9f7c020fe3f02f7, x8, 16, x18)

inst_3:
// rs1 == rs2 == rd, rs1==x10, rs2==x10, rd==x10, rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b2_val < 0 and rs2_b2_val < 0, rs2_b3_val == -9, rs2_b0_val == -128, rs2_b6_val == -17, rs1_b6_val > 0 and rs2_b6_val < 0, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b5_val == 0, rs2_b7_val == 85, rs1_b7_val == 127, rs2_b4_val == -2
// opcode: smin8 ; op1:x10; op2:x10; dest:x10; op1val:0x7f090009f6f806fc;  op2val:0x55ef03fef7f60380
TEST_RR_OP(smin8, x10, x10, x10, 0x0000000000000000, 0x7f090009f6f806fc, 0x55ef03fef7f60380, x8, 24, x18)

inst_4:
// rs2 == rd != rs1, rs1==x9, rs2==x11, rd==x11, rs1_b6_val == rs2_b6_val, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b7_val == 2, rs1_b1_val == -9, rs1_b5_val < 0 and rs2_b5_val < 0, rs2_b4_val == -9, rs2_b2_val == 85, rs1_b4_val == -128, rs1_b0_val == -86, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val == -128
// opcode: smin8 ; op1:x9; op2:x11; dest:x11; op1val:0x7ff9f6800780f7aa;  op2val:0x2f9fcf73f55fc07
TEST_RR_OP(smin8, x11, x9, x11, 0x0000000000000000, 0x7ff9f6800780f7aa, 0x2f9fcf73f55fc07, x8, 32, x18)

inst_5:
// rs1==x20, rs2==x14, rd==x16, rs1_b6_val < 0 and rs2_b6_val > 0, rs2_b2_val == 32, rs1_b1_val == rs2_b1_val, rs2_b3_val == 32, rs2_b0_val == 2, rs1_b3_val == 1, rs2_b6_val == 8, rs2_b7_val == -33, rs1_b7_val == -2
// opcode: smin8 ; op1:x20; op2:x14; dest:x16; op1val:0xfef8f8fa01fc0380;  op2val:0xdf08f62020200302
TEST_RR_OP(smin8, x16, x20, x14, 0x0000000000000000, 0xfef8f8fa01fc0380, 0xdf08f62020200302, x8, 40, x18)

inst_6:
// rs1==x16, rs2==x7, rd==x1, rs1_b5_val == rs2_b5_val, rs1_b3_val == -86, rs2_b5_val == -2, rs1_b5_val == -2, rs2_b0_val == -2, rs2_b6_val == -128, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b2_val == 85, rs2_b4_val == 64
// opcode: smin8 ; op1:x16; op2:x7; dest:x1; op1val:0xc080feaaaa55fc05;  op2val:0xbf80fe40c00305fe
TEST_RR_OP(smin8, x1, x16, x7, 0x0000000000000000, 0xc080feaaaa55fc05, 0xbf80fe40c00305fe, x8, 48, x18)

inst_7:
// rs1==x11, rs2==x27, rd==x19, rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b7_val == -1, rs2_b6_val == 127, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b0_val == 8, rs1_b3_val == 32, rs2_b1_val == -3
// opcode: smin8 ; op1:x11; op2:x27; dest:x19; op1val:0x70607fa20033f08;  op2val:0xff7f050955fafdc0
TEST_RR_OP(smin8, x19, x11, x27, 0x0000000000000000, 0x70607fa20033f08, 0xff7f050955fafdc0, x8, 56, x18)

inst_8:
// rs1==x23, rs2==x30, rd==x6, rs1_b4_val == rs2_b4_val, rs2_b5_val == -3, rs1_b5_val == -9, rs1_b4_val == 0, rs2_b0_val == -3, rs1_b1_val == 127, rs1_b6_val == -5, rs2_b1_val == 0, rs2_b4_val == 0
// opcode: smin8 ; op1:x23; op2:x30; dest:x6; op1val:0x3ffbf700c0f87faa;  op2val:0x55fcfd0003fa00fd
TEST_RR_OP(smin8, x6, x23, x30, 0x0000000000000000, 0x3ffbf700c0f87faa, 0x55fcfd0003fa00fd, x8, 64, x18)

inst_9:
// rs1==x1, rs2==x6, rd==x17, rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b2_val == 64, rs2_b2_val == 0, rs1_b1_val == 2, rs2_b1_val == -33, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b3_val == 0, rs1_b4_val == 32
// opcode: smin8 ; op1:x1; op2:x6; dest:x17; op1val:0x909f920aa400207;  op2val:0x55c0f6070000df3f
TEST_RR_OP(smin8, x17, x1, x6, 0x0000000000000000, 0x909f920aa400207, 0x55c0f6070000df3f, x8, 72, x18)

inst_10:
// rs1==x31, rs2==x21, rd==x23, rs1_b3_val == rs2_b3_val, rs2_b6_val == -86, rs1_b2_val == 1, rs1_b6_val == 127, rs2_b3_val == -5, rs1_b5_val == 8, rs1_b3_val == -5, rs1_b1_val == 85, rs1_b0_val == 32, rs1_b4_val == -17, rs2_b4_val == -128, rs2_b1_val == 8, rs2_b0_val == -86, rs2_b2_val == -2, rs1_b7_val == 8
// opcode: smin8 ; op1:x31; op2:x21; dest:x23; op1val:0x87f08effb015520;  op2val:0x6aaf880fbfe08aa
TEST_RR_OP(smin8, x23, x31, x21, 0x0000000000000000, 0x87f08effb015520, 0x6aaf880fbfe08aa, x8, 80, x18)

inst_11:
// rs1==x15, rs2==x23, rd==x0, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b3_val == 4, rs2_b3_val == -1, rs2_b2_val == 127
// opcode: smin8 ; op1:x15; op2:x23; dest:x0; op1val:0x706fefc04037ffa;  op2val:0x2063ff9ff7f07f9
TEST_RR_OP(smin8, x0, x15, x23, 0x0000000000000000, 0x706fefc04037ffa, 0x2063ff9ff7f07f9, x8, 88, x18)

inst_12:
// rs1==x21, rs2==x28, rd==x5, rs1_b0_val == rs2_b0_val, rs1_b3_val == 85, rs2_b2_val == 1, rs2_b0_val == 8, rs2_b1_val == -128, rs2_b6_val == 2, rs1_b4_val == -3, rs1_b7_val == -9, rs2_b7_val == -5
// opcode: smin8 ; op1:x21; op2:x28; dest:x5; op1val:0xf78006fd5507f708;  op2val:0xfb02f6ff20018008
TEST_RR_OP(smin8, x5, x21, x28, 0x0000000000000000, 0xf78006fd5507f708, 0xfb02f6ff20018008, x8, 96, x18)

inst_13:
// rs1==x12, rs2==x13, rd==x15, rs2_b7_val == -86, rs1_b7_val == 1, rs2_b0_val == -5, rs2_b5_val == 0, rs2_b6_val == -3, rs2_b2_val == -86, rs1_b6_val == 1, rs2_b4_val == 16, rs1_b2_val == -2
// opcode: smin8 ; op1:x12; op2:x13; dest:x15; op1val:0x101c00620fe0320;  op2val:0xaafd0010c0aafafb
TEST_RR_OP(smin8, x15, x12, x13, 0x0000000000000000, 0x101c00620fe0320, 0xaafd0010c0aafafb, x8, 104, x18)

inst_14:
// rs1==x5, rs2==x31, rd==x28, rs2_b7_val == 127, rs2_b5_val == 4, rs2_b0_val == 16, rs2_b3_val == 16, rs1_b6_val == 32, rs2_b4_val == -3, rs1_b2_val == -65, rs1_b7_val == 16
// opcode: smin8 ; op1:x5; op2:x31; dest:x28; op1val:0x10200900f8bf0520;  op2val:0x7f3f04fd1005fa10
TEST_RR_OP(smin8, x28, x5, x31, 0x0000000000000000, 0x10200900f8bf0520, 0x7f3f04fd1005fa10, x8, 112, x18)

inst_15:
// rs1==x4, rs2==x2, rd==x31, rs2_b7_val == -17, rs2_b2_val == 8, rs2_b1_val == -86, rs2_b6_val == -2, rs1_b5_val == 127, rs2_b5_val == 127
// opcode: smin8 ; op1:x4; op2:x2; dest:x31; op1val:0x3f017ffdf98002fc;  op2val:0xeffe7fbffc08aafa
TEST_RR_OP(smin8, x31, x4, x2, 0x0000000000000000, 0x3f017ffdf98002fc, 0xeffe7fbffc08aafa, x8, 120, x18)

inst_16:
// rs1==x22, rs2==x12, rd==x27, rs2_b7_val == -9, rs2_b3_val == -33, rs2_b6_val == 85, rs1_b0_val == 0, rs2_b0_val == 0, rs1_b1_val == -5, rs2_b5_val == 85, rs1_b7_val == -128, rs1_b5_val == -65, rs2_b2_val == -3
// opcode: smin8 ; op1:x22; op2:x12; dest:x27; op1val:0x80f8bfc0fcc0fb00;  op2val:0xf7555500dffd0300
TEST_RR_OP(smin8, x27, x22, x12, 0x0000000000000000, 0x80f8bfc0fcc0fb00, 0xf7555500dffd0300, x8, 128, x10)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_17:
// rs1==x27, rs2==x20, rd==x4, rs2_b7_val == -3, rs1_b1_val == -17, rs2_b4_val == -33, rs2_b3_val == 1, rs2_b6_val == 1, rs2_b5_val == -86
// opcode: smin8 ; op1:x27; op2:x20; dest:x4; op1val:0x703f900f680ef80;  op2val:0xfd01aadf01aa08fe
TEST_RR_OP(smin8, x4, x27, x20, 0x0000000000000000, 0x703f900f680ef80, 0xfd01aadf01aa08fe, x5, 0, x10)

inst_18:
// rs1==x14, rs2==x17, rd==x26, rs2_b7_val == -2, rs2_b5_val == -1, rs2_b6_val == -5, rs2_b1_val == -2, rs1_b1_val == 32, rs1_b7_val == -5, rs2_b2_val == -128
// opcode: smin8 ; op1:x14; op2:x17; dest:x26; op1val:0xfbfa050506fe2020;  op2val:0xfefbff200980fef9
TEST_RR_OP(smin8, x26, x14, x17, 0x0000000000000000, 0xfbfa050506fe2020, 0xfefbff200980fef9, x5, 8, x10)

inst_19:
// rs1==x25, rs2==x1, rd==x14, rs2_b7_val == -128, rs1_b0_val == -33, rs2_b3_val == 64, rs1_b4_val == 127, rs2_b1_val == -5, rs2_b6_val == 16, rs2_b5_val == -17
// opcode: smin8 ; op1:x25; op2:x1; dest:x14; op1val:0xfcf9077f06553fdf;  op2val:0x8010eff74007fb7f
TEST_RR_OP(smin8, x14, x25, x1, 0x0000000000000000, 0xfcf9077f06553fdf, 0x8010eff74007fb7f, x5, 16, x10)

inst_20:
// rs1==x13, rs2==x18, rd==x24, rs2_b7_val == 64, rs2_b2_val == 16, rs1_b3_val == -9, rs1_b5_val == 2, rs1_b0_val == 4, rs2_b0_val == 4, rs2_b4_val == -86, rs2_b6_val == 4, rs1_b2_val == -86
// opcode: smin8 ; op1:x13; op2:x18; dest:x24; op1val:0xfa8002f6f7aa2004;  op2val:0x4004f6aa07100304
TEST_RR_OP(smin8, x24, x13, x18, 0x0000000000000000, 0xfa8002f6f7aa2004, 0x4004f6aa07100304, x5, 24, x10)

inst_21:
// rs1==x18, rs2==x9, rd==x20, rs2_b7_val == 32, rs2_b0_val == -33, rs1_b0_val == 85, rs2_b5_val == 32, rs2_b1_val == 64, rs1_b5_val == -17
// opcode: smin8 ; op1:x18; op2:x9; dest:x20; op1val:0x7fbef09f640f655;  op2val:0x200220f83ff640df
TEST_RR_OP(smin8, x20, x18, x9, 0x0000000000000000, 0x7fbef09f640f655, 0x200220f83ff640df, x5, 32, x10)

inst_22:
// rs1==x26, rs2==x4, rd==x7, rs2_b7_val == 16, rs2_b0_val == -17, rs1_b7_val == 0, rs1_b0_val == 64, rs1_b4_val == -9, rs1_b3_val == 0, rs1_b6_val == 2, rs1_b2_val == -17
// opcode: smin8 ; op1:x26; op2:x4; dest:x7; op1val:0x0202f700eff640;  op2val:0x1008aa20102008ef
TEST_RR_OP(smin8, x7, x26, x4, 0x0000000000000000, 0x0202f700eff640, 0x1008aa20102008ef, x5, 40, x10)

inst_23:
// rs1==x17, rs2==x0, rd==x30, rs2_b7_val == 8, rs2_b0_val == 1, rs1_b4_val == 85, rs2_b3_val == 4, rs1_b1_val == 64, rs1_b7_val == -33
// opcode: smin8 ; op1:x17; op2:x0; dest:x30; op1val:0xdf07fc55f7ef40fc;  op2val:0x84004f80410fe01
TEST_RR_OP(smin8, x30, x17, x0, 0x0000000000000000, 0xdf07fc55f7ef40fc, 0x84004f80410fe01, x5, 48, x10)

inst_24:
// rs1==x28, rs2==x8, rd==x12, rs2_b7_val == 4, rs1_b0_val == -17, rs2_b5_val == -128, rs2_b3_val == 127, rs1_b7_val == -1, rs1_b6_val == -65
// opcode: smin8 ; op1:x28; op2:x8; dest:x12; op1val:0xffbffa3f06c0dfef;  op2val:0x4f780f97f03023f
TEST_RR_OP(smin8, x12, x28, x8, 0x0000000000000000, 0xffbffa3f06c0dfef, 0x4f780f97f03023f, x5, 56, x10)

inst_25:
// rs1==x0, rs2==x16, rd==x22, rs2_b7_val == 1, rs2_b5_val == 8, rs1_b6_val == -3, rs1_b1_val == -3, rs2_b4_val == -17, rs1_b7_val == -3, rs1_b4_val == 4
// opcode: smin8 ; op1:x0; op2:x16; dest:x22; op1val:0xfdfd060455bffd20;  op2val:0x10808ef55f6fef8
TEST_RR_OP(smin8, x22, x0, x16, 0x0000000000000000, 0xfdfd060455bffd20, 0x10808ef55f6fef8, x5, 64, x10)

inst_26:
// rs1==x8, rs2==x26, rd==x29, rs1_b5_val == -3, rs1_b6_val == -86, rs2_b5_val == 2, rs1_b0_val == -1, rs2_b2_val == -9, rs1_b4_val == 1
// opcode: smin8 ; op1:x8; op2:x26; dest:x29; op1val:0x7faafd01fb40f6ff;  op2val:0x5504022009f7aac0
TEST_RR_OP(smin8, x29, x8, x26, 0x0000000000000000, 0x7faafd01fb40f6ff, 0x5504022009f7aac0, x5, 72, x10)

inst_27:
// rs1==x7, rs2==x15, rd==x2, rs1_b5_val == -128, rs2_b3_val == -17, rs1_b1_val == 8
// opcode: smin8 ; op1:x7; op2:x15; dest:x2; op1val:0x800380f7fbaa083f;  op2val:0x7f0206fdeffc3f04
TEST_RR_OP(smin8, x2, x7, x15, 0x0000000000000000, 0x800380f7fbaa083f, 0x7f0206fdeffc3f04, x5, 80, x10)

inst_28:
// rs1==x6, rs2==x29, rd==x25, rs1_b5_val == 64, rs1_b6_val == -33, rs2_b1_val == 1, rs1_b7_val == 64, rs1_b1_val == -1
// opcode: smin8 ; op1:x6; op2:x29; dest:x25; op1val:0x40df40f83f05ff20;  op2val:0x80503fcf60001f8
TEST_RR_OP(smin8, x25, x6, x29, 0x0000000000000000, 0x40df40f83f05ff20, 0x80503fcf60001f8, x5, 88, x10)

inst_29:
// rs1==x30, rs2==x22, rd==x18, rs1_b5_val == 4, rs2_b3_val == -65, rs1_b3_val == -3, rs1_b6_val == -9, rs2_b1_val == -17, rs1_b4_val == -2, rs2_b4_val == 8
// opcode: smin8 ; op1:x30; op2:x22; dest:x18; op1val:0x10f704fefd030240;  op2val:0x2c00808bf01efdf
TEST_RR_OP(smin8, x18, x30, x22, 0x0000000000000000, 0x10f704fefd030240, 0x2c00808bf01efdf, x5, 96, x10)

inst_30:
// rs1==x29, rs2==x19, rd==x21, rs1_b5_val == 1, rs2_b2_val == 4, rs1_b3_val == -65
// opcode: smin8 ; op1:x29; op2:x19; dest:x21; op1val:0x40f7013fbf05ffef;  op2val:0x7fd04f9ff044004
TEST_RR_OP(smin8, x21, x29, x19, 0x0000000000000000, 0x40f7013fbf05ffef, 0x7fd04f9ff044004, x5, 104, x10)

inst_31:
// rs1==x2, rs2==x3, rd==x8, rs1_b5_val == -1, rs2_b3_val == -3, rs1_b0_val == -3
// opcode: smin8 ; op1:x2; op2:x3; dest:x8; op1val:0x7fdfff3f3faaf6fd;  op2val:0xfc40c03ffd55ff08
TEST_RR_OP(smin8, x8, x2, x3, 0x0000000000000000, 0x7fdfff3f3faaf6fd, 0xfc40c03ffd55ff08, x5, 112, x10)

inst_32:
// rs1_b4_val == -65, rs1_b2_val == -1, rs2_b1_val == 32
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x9f904bff8ff083f;  op2val:0xf61008c0f60220ef
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x9f904bff8ff083f, 0xf61008c0f60220ef, x5, 120, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs1_b4_val == -33, rs1_b1_val == -86, rs1_b6_val == 8, rs1_b3_val == -1
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x08fcdffff8aa40;  op2val:0x550620bff907fc07
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x08fcdffff8aa40, 0x550620bff907fc07, x1, 0, x2)

inst_34:
// rs1_b4_val == -5, rs1_b3_val == 127, rs1_b0_val == 1, rs2_b1_val == -9
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x90702fb7f55f801;  op2val:0x3f8fe030600f710
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x90702fb7f55f801, 0x3f8fe030600f710, x1, 8, x2)

inst_35:
// rs1_b4_val == 64, rs1_b0_val == -9, rs2_b1_val == -65
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xf98004403f80f7f7;  op2val:0x405507090755bf80
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xf98004403f80f7f7, 0x405507090755bf80, x1, 16, x2)

inst_36:
// rs1_b4_val == 16, rs1_b6_val == -1, rs1_b3_val == -17
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffc010eff80655;  op2val:0x57f0810107faa00
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xbfffc010eff80655, 0x57f0810107faa00, x1, 24, x2)

inst_37:
// rs1_b4_val == 8, rs2_b0_val == -65, rs1_b3_val == 2, rs1_b7_val == 85
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x5506090802c0fbc0;  op2val:0xaaf97f20f9fcfdbf
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x5506090802c0fbc0, 0xaaf97f20f9fcfdbf, x1, 32, x2)

inst_38:
// rs1_b4_val == 2, rs1_b6_val == 16, rs1_b2_val == -9
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf10f602f9f7f955;  op2val:0xfafe55005504fbc0
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xbf10f602f9f7f955, 0xfafe55005504fbc0, x1, 40, x2)

inst_39:
// rs1_b4_val == -1, rs1_b1_val == 0
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x18007fff7c00006;  op2val:0x2050010df040080
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x18007fff7c00006, 0x2050010df040080, x1, 48, x2)

inst_40:
// rs1_b3_val == -33, rs1_b6_val == 0, rs2_b3_val == -128, rs1_b1_val == 16, rs2_b4_val == 127
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x6000080df0110f6;  op2val:0x910ef7f8005f6fa
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x6000080df0110f6, 0x910ef7f8005f6fa, x1, 56, x2)

inst_41:
// rs1_b3_val == -2, rs1_b1_val == 1, rs2_b1_val == 127
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf080900feef0140;  op2val:0x8f8f90955fb7f07
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xbf080900feef0140, 0x8f8f90955fb7f07, x1, 64, x2)

inst_42:
// rs2_b3_val == -86, rs2_b6_val == -33, rs1_b6_val == -17
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x80effdf907fe5505;  op2val:0xf8df07f9aa05fd10
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x80effdf907fe5505, 0xf8df07f9aa05fd10, x1, 72, x2)

inst_43:
// rs2_b3_val == 8, 
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x8bf01f720ef2007;  op2val:0x20fcfe0508040008
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x8bf01f720ef2007, 0x20fcfe0508040008, x1, 80, x2)

inst_44:
// rs2_b3_val == 2, rs2_b4_val == 1
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe09fbf8bff7403f;  op2val:0x3ffa030102c000fb
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xfe09fbf8bff7403f, 0x3ffa030102c000fb, x1, 88, x2)

inst_45:
// rs2_b2_val == -65, rs2_b6_val == -65, rs1_b3_val == 64
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffdef40c00655;  op2val:0x40bf09fd05bf0103
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x7ffdef40c00655, 0x40bf09fd05bf0103, x1, 96, x2)

inst_46:
// rs2_b2_val == -33, rs2_b6_val == 32, rs1_b2_val == 16
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xc000090980100803;  op2val:0xc0203f06efdf0180
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xc000090980100803, 0xc0203f06efdf0180, x1, 104, x2)

inst_47:
// rs2_b2_val == -17, rs1_b2_val == -5
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9f7003f01fb3f00;  op2val:0xbf7ff60300efaaaa
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xf9f7003f01fb3f00, 0xbf7ff60300efaaaa, x1, 112, x2)

inst_48:
// rs2_b2_val == 64, rs1_b6_val == 4, rs2_b5_val == 16
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x804f8fa01faf600;  op2val:0xfef910fa40400609
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x804f8fa01faf600, 0xfef910fa40400609, x1, 120, x2)

inst_49:
// rs2_b2_val == -1, rs1_b5_val == -86, rs2_b1_val == 85
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f04aaff06fc7ff9;  op2val:0xf7f6ef0806ff55fc
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x7f04aaff06fc7ff9, 0xf7f6ef0806ff55fc, x1, 128, x2)

inst_50:
// rs1_b3_val == 16, 
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfcff7f011009f8c0;  op2val:0x55063f3fdf040106
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xfcff7f011009f8c0, 0x55063f3fdf040106, x1, 136, x2)

inst_51:
// rs1_b3_val == 8, rs1_b1_val == -65, rs1_b7_val == 32
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x203f80000809bf55;  op2val:0xf9eff8df001009c0
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x203f80000809bf55, 0xf9eff8df001009c0, x1, 144, x2)

inst_52:
// rs1_b2_val == 127, rs1_b1_val == 4, rs1_b5_val == 85
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff55fefe7f0405;  op2val:0x6df10df04fafff8
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xdfff55fefe7f0405, 0x6df10df04fafff8, x1, 152, x2)

inst_53:
// rs2_b1_val == 4, rs2_b6_val == -1, rs2_b5_val == -5
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfeef0210ff0701ef;  op2val:0xaafffbaafdf80410
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xfeef0210ff0701ef, 0xaafffbaafdf80410, x1, 160, x2)

inst_54:
// rs1_b2_val == -33, rs1_b6_val == -2
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe100555dfbfff;  op2val:0x1060103fa0606c0
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xfffe100555dfbfff, 0x1060103fa0606c0, x1, 168, x2)

inst_55:
// rs1_b2_val == 32, 
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0047fbf04200580;  op2val:0x3f5580037fbffa80
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xc0047fbf04200580, 0x3f5580037fbffa80, x1, 176, x2)

inst_56:
// rs2_b7_val == 0, 
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x80fc10ef08df5500;  op2val:0xfefaef10c008fc
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x80fc10ef08df5500, 0xfefaef10c008fc, x1, 184, x2)

inst_57:
// rs1_b2_val == 8, rs2_b4_val == 2
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfc05fef7c0085507;  op2val:0xfb10fb0207fef7c0
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xfc05fef7c0085507, 0xfb10fb0207fef7c0, x1, 192, x2)

inst_58:
// rs1_b2_val == 0, rs2_b5_val == -65
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x10fd07efdf00ff07;  op2val:0xfbbff7010540f7
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x10fd07efdf00ff07, 0xfbbff7010540f7, x1, 200, x2)

inst_59:
// rs2_b0_val == 32, rs2_b4_val == 4
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfeaa2009df2008f6;  op2val:0xff0705043ff70720
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xfeaa2009df2008f6, 0xff0705043ff70720, x1, 208, x2)

inst_60:
// rs2_b0_val == -1, 
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfcfafff7f7033fc0;  op2val:0xf78001f9df0603ff
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xfcfafff7f7033fc0, 0xf78001f9df0603ff, x1, 216, x2)

inst_61:
// rs1_b1_val == -2, rs1_b0_val == 127
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xf709ffdff6fffe7f;  op2val:0x06fd01c0080510
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xf709ffdff6fffe7f, 0x06fd01c0080510, x1, 224, x2)

inst_62:
// rs1_b7_val == -17, 
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xeff70402050702c0;  op2val:0xf6fd01f803064040
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xeff70402050702c0, 0xf6fd01f803064040, x1, 232, x2)

inst_63:
// rs2_b6_val == 0, 
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x40fdfef607feff09;  op2val:0xbf00fdef02f7f9df
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x40fdfef607feff09, 0xbf00fdef02f7f9df, x1, 240, x2)

inst_64:
// rs1_b7_val == 4, 
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x4fe09040609bf04;  op2val:0xf9fc8040ff7fdffa
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x4fe09040609bf04, 0xf9fc8040ff7fdffa, x1, 248, x2)

inst_65:
// rs2_b5_val == 64, 
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x103ff0501f77faa;  op2val:0x809400501df0903
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x103ff0501f77faa, 0x809400501df0903, x1, 256, x2)

inst_66:
// rs1_b0_val == -5, 
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb03100009fcf6fb;  op2val:0x8c0ff0705f90380
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xfb03100009fcf6fb, 0x8c0ff0705f90380, x1, 264, x2)

inst_67:
// rs1_b0_val == -2, 
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xf87f3ffc20f6fe;  op2val:0xef10404009011000
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xf87f3ffc20f6fe, 0xef10404009011000, x1, 272, x2)

inst_68:
// rs1_b6_val == 85, rs1_b5_val == -33
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x955df09ff060309;  op2val:0xbff7200809fc04df
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x955df09ff060309, 0xbff7200809fc04df, x1, 280, x2)

inst_69:
// rs1_b0_val == 16, 
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x4002bf06c0035510;  op2val:0xfd02fa7ff620fef9
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x4002bf06c0035510, 0xfd02fa7ff620fef9, x1, 288, x2)

inst_70:
// rs1_b0_val == 2, 
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xeff7552020000902;  op2val:0x6f780aa5509fa08
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xeff7552020000902, 0x6f780aa5509fa08, x1, 296, x2)

inst_71:
// rs1_b6_val == 64, 
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x14008fb042020f9;  op2val:0x3fafff63fbffe7f
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x14008fb042020f9, 0x3fafff63fbffe7f, x1, 304, x2)

inst_72:
// rs2_b4_val == -5, 
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xf78000f65508aa3f;  op2val:0xaa0009fbfbc0f6f6
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xf78000f65508aa3f, 0xaa0009fbfbc0f6f6, x1, 312, x2)

inst_73:
// rs2_b5_val == -33, 
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xf65580dfeff85506;  op2val:0x1bfdff604000804
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xf65580dfeff85506, 0x1bfdff604000804, x1, 320, x2)

inst_74:
// rs2_b4_val == 85, rs1_b2_val == -3
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfadffbaaeffdfa20;  op2val:0xdffa0355fbdffdc0
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xfadffbaaeffdfa20, 0xdffa0355fbdffdc0, x1, 328, x2)

inst_75:
// rs2_b0_val == 85, 
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x240091009060055;  op2val:0x7ffc0908fa020755
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x240091009060055, 0x7ffc0908fa020755, x1, 336, x2)

inst_76:
// rs2_b5_val == -9, 
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8dff908100808aa;  op2val:0xeffff70503fcaa02
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xf8dff908100808aa, 0xeffff70503fcaa02, x1, 344, x2)

inst_77:
// rs1_b7_val < 0 and rs2_b7_val > 0, rs2_b1_val == 2, rs2_b0_val == -9, rs1_b5_val == 32, rs2_b3_val == -2, rs2_b6_val == -9, rs1_b1_val == -33, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b7_val == -86, rs1_b4_val < 0 and rs2_b4_val > 0, rs2_b4_val == 32, rs1_b3_val < 0 and rs2_b3_val < 0
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xaaf820f6f606dfbf;  op2val:0x9f7c020fe3f02f7
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xaaf820f6f606dfbf, 0x9f7c020fe3f02f7, x1, 352, x2)

inst_78:
// rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b2_val < 0 and rs2_b2_val < 0, rs2_b3_val == -9, rs2_b0_val == -128, rs2_b6_val == -17, rs1_b6_val > 0 and rs2_b6_val < 0, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b5_val == 0, rs2_b7_val == 85, rs1_b7_val == 127, rs2_b4_val == -2
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f090009f6f806fc;  op2val:0x55ef03fef7f60380
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0x7f090009f6f806fc, 0x55ef03fef7f60380, x1, 360, x2)

inst_79:
// rs2_b7_val == 8, rs2_b0_val == 1, rs1_b4_val == 85, rs2_b3_val == 4, rs1_b1_val == 64, rs1_b7_val == -33
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf07fc55f7ef40fc;  op2val:0x84004f80410fe01
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xdf07fc55f7ef40fc, 0x84004f80410fe01, x1, 368, x2)

inst_80:
// rs2_b7_val == 1, rs2_b5_val == 8, rs1_b6_val == -3, rs1_b1_val == -3, rs2_b4_val == -17, rs1_b7_val == -3, rs1_b4_val == 4
// opcode: smin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfd060455bffd20;  op2val:0x10808ef55f6fef8
TEST_RR_OP(smin8, x31, x30, x29, 0x0000000000000000, 0xfdfd060455bffd20, 0x10808ef55f6fef8, x1, 376, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 48*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
