
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the scmple8 instruction of the RISC-V RV64PZicsr extension for the scmple8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",scmple8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x15, rs2==x19, rd==x15, rs1_b0_val == -128, rs1_b7_val != rs2_b7_val, rs1_b6_val != rs2_b6_val, rs2_b3_val == -5, rs1_b6_val < 0 and rs2_b6_val < 0, rs1_b5_val != rs2_b5_val, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b4_val != rs2_b4_val, rs1_b4_val < 0 and rs2_b4_val > 0, rs1_b3_val != rs2_b3_val, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b2_val != rs2_b2_val, rs2_b2_val == 16, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val < 0, rs2_b7_val == -2, rs2_b6_val == -3, rs1_b7_val == 0, rs2_b4_val == 64, rs1_b5_val == -65
// opcode: scmple8 ; op1:x15; op2:x19; dest:x15; op1val:0xf6bffcfa060680;  op2val:0xfefd0340fb103ff6
TEST_RR_OP(scmple8, x15, x15, x19, 0x0000000000000000, 0xf6bffcfa060680, 0xfefd0340fb103ff6, x1, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x27, rs2==x14, rd==x11, rs1_b7_val == rs2_b7_val, rs2_b3_val == -86, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b0_val == -3, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b1_val == 8, rs2_b2_val == -33, rs1_b2_val == -17
// opcode: scmple8 ; op1:x27; op2:x14; dest:x11; op1val:0xc0fcf8f9f6ef08fd;  op2val:0xc0fac03faadfc03f
TEST_RR_OP(scmple8, x11, x27, x14, 0x0000000000000000, 0xc0fcf8f9f6ef08fd, 0xc0fac03faadfc03f, x1, 8, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x6, rs2==x6, rd==x10, rs1_b7_val < 0 and rs2_b7_val > 0, rs2_b0_val == -65, rs1_b3_val == -86, rs2_b5_val == 1, rs1_b6_val == -17, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b7_val == 127, rs2_b4_val == -2, rs1_b4_val > 0 and rs2_b4_val < 0, rs1_b1_val == 16, rs1_b7_val == -2, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b0_val == 85
// opcode: scmple8 ; op1:x6; op2:x6; dest:x10; op1val:0xfeeff606aaf61055;  op2val:0x7ff901fe09f8f6bf
TEST_RR_OP(scmple8, x10, x6, x6, 0x0000000000000000, 0xfeeff606aaf61055, 0x7ff901fe09f8f6bf, x1, 16, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x22, rs2==x22, rd==x22, rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b2_val == 8, rs2_b6_val == 85, rs2_b3_val == -17, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b6_val < 0 and rs2_b6_val > 0, rs2_b0_val == 0, rs1_b5_val > 0 and rs2_b5_val < 0, rs1_b7_val == 85, rs2_b1_val == -128, rs2_b5_val == -33, rs1_b4_val == -9, rs2_b7_val == -17, rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b4_val == 1, rs1_b0_val == 127
// opcode: scmple8 ; op1:x22; op2:x22; dest:x22; op1val:0x55fc06f70508f67f;  op2val:0xef55df01eff68000
TEST_RR_OP(scmple8, x22, x22, x22, 0x0000000000000000, 0x55fc06f70508f67f, 0xef55df01eff68000, x1, 24, x3)

inst_4:
// rs2 == rd != rs1, rs1==x25, rs2==x7, rd==x7, rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b7_val == 2, rs2_b6_val == -86, rs2_b0_val == -128, rs1_b2_val == -1, rs1_b0_val == 16, rs1_b6_val > 0 and rs2_b6_val < 0, rs2_b1_val == -17, rs2_b3_val == 0, rs1_b3_val == -1, rs1_b1_val == 64, rs1_b6_val == 1, rs1_b5_val == -86, rs2_b5_val == 85, rs2_b7_val == 64
// opcode: scmple8 ; op1:x25; op2:x7; dest:x7; op1val:0x201aa05ffff4010;  op2val:0x40aa55fe0006ef80
TEST_RR_OP(scmple8, x7, x25, x7, 0x0000000000000000, 0x201aa05ffff4010, 0x40aa55fe0006ef80, x1, 32, x3)

inst_5:
// rs1==x9, rs2==x30, rd==x5, rs1_b6_val == rs2_b6_val, rs1_b3_val == 127, rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b1_val == -5, rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b6_val == 2, rs2_b2_val == -86, rs1_b6_val == 2, rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b4_val == 32, rs1_b2_val == 127, rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b0_val == 127
// opcode: scmple8 ; op1:x9; op2:x30; dest:x5; op1val:0xc00205207f7f09c0;  op2val:0xc0023f0507aafb7f
TEST_RR_OP(scmple8, x5, x9, x30, 0x0000000000000000, 0xc00205207f7f09c0, 0xc0023f0507aafb7f, x1, 40, x3)

inst_6:
// rs1==x19, rs2==x18, rd==x12, rs1_b5_val == rs2_b5_val, rs1_b0_val == -9, rs2_b2_val == 0, rs2_b5_val == 8, rs1_b5_val == 8, rs1_b3_val == -2, rs2_b0_val == 8, rs1_b4_val == 85, rs2_b6_val == -128, rs1_b6_val == -128, rs1_b1_val == -5, rs1_b7_val == -33, rs1_b2_val == -86
// opcode: scmple8 ; op1:x19; op2:x18; dest:x12; op1val:0xdf800855feaafbf7;  op2val:0x78008030700ef08
TEST_RR_OP(scmple8, x12, x19, x18, 0x0000000000000000, 0xdf800855feaafbf7, 0x78008030700ef08, x1, 48, x3)

inst_7:
// rs1==x12, rs2==x21, rd==x6, rs1_b4_val == rs2_b4_val, rs2_b7_val == 2, rs2_b0_val == -3, rs1_b0_val == -2, rs1_b2_val == 0, rs2_b5_val == -1, rs2_b3_val == 4, rs2_b1_val == 4, rs1_b7_val == 16, rs1_b5_val == -9
// opcode: scmple8 ; op1:x12; op2:x21; dest:x6; op1val:0x1005f707050008fe;  op2val:0x280ff0704f904fd
TEST_RR_OP(scmple8, x6, x12, x21, 0x0000000000000000, 0x1005f707050008fe, 0x280ff0704f904fd, x1, 56, x3)

inst_8:
// rs1==x2, rs2==x26, rd==x25, rs1_b4_val < 0 and rs2_b4_val < 0, rs2_b2_val == 64, rs1_b5_val == -2, rs2_b3_val == -33, rs1_b1_val == -86, rs2_b0_val == 16, rs1_b0_val == 4, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b6_val == 64, rs2_b1_val == -1
// opcode: scmple8 ; op1:x2; op2:x26; dest:x25; op1val:0x240fef9037faa04;  op2val:0x606fcfcdf40ff10
TEST_RR_OP(scmple8, x25, x2, x26, 0x0000000000000000, 0x240fef9037faa04, 0x606fcfcdf40ff10, x1, 64, x3)

inst_9:
// rs1==x17, rs2==x20, rd==x0, rs1_b3_val == rs2_b3_val, rs2_b5_val == 16, rs1_b1_val < 0 and rs2_b1_val > 0, rs2_b6_val == -33, rs1_b1_val == -128, rs2_b7_val == -9, rs2_b1_val == 1, rs1_b4_val == -128, rs2_b0_val == 85
// opcode: scmple8 ; op1:x17; op2:x20; dest:x0; op1val:0xf8f60780f80880f6;  op2val:0xf7df1009f8fc0155
TEST_RR_OP(scmple8, x0, x17, x20, 0x0000000000000000, 0xf8f60780f80880f6, 0xf7df1009f8fc0155, x1, 72, x3)

inst_10:
// rs1==x31, rs2==x29, rd==x28, rs1_b2_val == rs2_b2_val, rs2_b7_val == -65, rs2_b6_val == 4, rs1_b4_val == 64, rs2_b1_val == 2, rs1_b5_val == -33, rs2_b5_val == -9
// opcode: scmple8 ; op1:x31; op2:x29; dest:x28; op1val:0x909df407ff9fb05;  op2val:0xbf04f740f8f902fc
TEST_RR_OP(scmple8, x28, x31, x29, 0x0000000000000000, 0x909df407ff9fb05, 0xbf04f740f8f902fc, x1, 80, x3)

inst_11:
// rs1==x11, rs2==x15, rd==x31, rs1_b1_val == rs2_b1_val, rs1_b5_val == -5, rs2_b2_val == 32, rs2_b1_val == -65, rs2_b0_val == 2, rs2_b3_val == 16, rs1_b3_val == 64, rs1_b1_val == -65, rs2_b4_val == 2
// opcode: scmple8 ; op1:x11; op2:x15; dest:x31; op1val:0xfc3ffbf74008bffe;  op2val:0x40f9f6021020bf02
TEST_RR_OP(scmple8, x31, x11, x15, 0x0000000000000000, 0xfc3ffbf74008bffe, 0x40f9f6021020bf02, x1, 88, x3)

inst_12:
// rs1==x0, rs2==x17, rd==x24, rs1_b0_val == rs2_b0_val, rs2_b2_val == -1, rs2_b0_val == -9, rs1_b5_val == 127
// opcode: scmple8 ; op1:x0; op2:x17; dest:x24; op1val:0x3027f0607fac0f7;  op2val:0xfcfd060505fffcf7
TEST_RR_OP(scmple8, x24, x0, x17, 0x0000000000000000, 0x3027f0607fac0f7, 0xfcfd060505fffcf7, x1, 96, x3)

inst_13:
// rs1==x7, rs2==x24, rd==x23, rs2_b7_val == -86, rs2_b4_val == -1, rs1_b1_val == 1, rs1_b5_val == -1, rs1_b4_val == -86
// opcode: scmple8 ; op1:x7; op2:x24; dest:x23; op1val:0x7f8ffaac00601f8;  op2val:0xaa07f8ff050906f8
TEST_RR_OP(scmple8, x23, x7, x24, 0x0000000000000000, 0x7f8ffaac00601f8, 0xaa07f8ff050906f8, x1, 104, x3)

inst_14:
// rs1==x24, rs2==x28, rd==x17, rs2_b7_val == 85, rs1_b0_val == -65, rs2_b6_val == -65, rs2_b4_val == 85, rs2_b1_val == -2, rs1_b1_val == 4, rs1_b4_val == 0
// opcode: scmple8 ; op1:x24; op2:x28; dest:x17; op1val:0xfaf8fb00f90604bf;  op2val:0x55bff9550440fec0
TEST_RR_OP(scmple8, x17, x24, x28, 0x0000000000000000, 0xfaf8fb00f90604bf, 0x55bff9550440fec0, x1, 112, x3)

inst_15:
// rs1==x4, rs2==x31, rd==x8, rs2_b7_val == -33, rs1_b5_val == 85, rs2_b1_val == -33, rs2_b3_val == 1, rs1_b4_val == 16, rs1_b2_val == -5, rs2_b4_val == 0
// opcode: scmple8 ; op1:x4; op2:x31; dest:x8; op1val:0x9ef551003fb403f;  op2val:0xdf3f3f000105df09
TEST_RR_OP(scmple8, x8, x4, x31, 0x0000000000000000, 0x9ef551003fb403f, 0xdf3f3f000105df09, x1, 120, x3)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_16:
// rs1==x3, rs2==x12, rd==x19, rs2_b7_val == -5, rs1_b0_val == -33, rs1_b6_val == -33, rs2_b5_val == 0, rs1_b3_val == 16, rs2_b1_val == 32, rs1_b7_val == -17, rs1_b1_val == -1, rs2_b4_val == 4
// opcode: scmple8 ; op1:x3; op2:x12; dest:x19; op1val:0xefdfaac01003ffdf;  op2val:0xfbfa0004034020f7
TEST_RR_OP(scmple8, x19, x3, x12, 0x0000000000000000, 0xefdfaac01003ffdf, 0xfbfa0004034020f7, x6, 0, x7)

inst_17:
// rs1==x14, rs2==x11, rd==x13, rs2_b7_val == -3, rs2_b5_val == -128, rs1_b0_val == -5, rs2_b2_val == 2, rs2_b0_val == -1, rs2_b6_val == 32
// opcode: scmple8 ; op1:x14; op2:x11; dest:x13; op1val:0x5dffa101003f6fb;  op2val:0xfd208055fa02bfff
TEST_RR_OP(scmple8, x13, x14, x11, 0x0000000000000000, 0x5dffa101003f6fb, 0xfd208055fa02bfff, x6, 8, x7)

inst_18:
// rs1==x21, rs2==x25, rd==x27, rs2_b7_val == -128, rs2_b3_val == -9, rs2_b5_val == 4, rs2_b1_val == 85, rs1_b3_val == 4, rs1_b7_val == -9, rs2_b2_val == -17, rs2_b0_val == -86
// opcode: scmple8 ; op1:x21; op2:x25; dest:x27; op1val:0xf7f6075504060509;  op2val:0x80f90440f7ef55aa
TEST_RR_OP(scmple8, x27, x21, x25, 0x0000000000000000, 0xf7f6075504060509, 0x80f90440f7ef55aa, x6, 16, x7)

inst_19:
// rs1==x8, rs2==x13, rd==x3, rs2_b7_val == 32, rs2_b5_val == -5, rs1_b4_val == -65, rs2_b0_val == 1, rs1_b3_val == -3
// opcode: scmple8 ; op1:x8; op2:x13; dest:x3; op1val:0x3fc3fbffdfc06f7;  op2val:0x2002fb0409070101
TEST_RR_OP(scmple8, x3, x8, x13, 0x0000000000000000, 0x3fc3fbffdfc06f7, 0x2002fb0409070101, x6, 24, x7)

inst_20:
// rs1==x5, rs2==x16, rd==x26, rs2_b7_val == 16, rs1_b2_val == 16, rs1_b3_val == -9, rs2_b5_val == 2, rs1_b6_val == -5, rs2_b6_val == -2, rs2_b2_val == -65, rs1_b7_val == 32
// opcode: scmple8 ; op1:x5; op2:x16; dest:x26; op1val:0x20fb06f7f7103ff9;  op2val:0x10fe020103bf01f9
TEST_RR_OP(scmple8, x26, x5, x16, 0x0000000000000000, 0x20fb06f7f7103ff9, 0x10fe020103bf01f9, x6, 32, x7)

inst_21:
// rs1==x20, rs2==x3, rd==x1, rs2_b7_val == 8, rs1_b5_val == 32, rs1_b0_val == -1, rs2_b2_val == 85, rs2_b6_val == 1, rs2_b5_val == 127
// opcode: scmple8 ; op1:x20; op2:x3; dest:x1; op1val:0xf8ef2009f90908ff;  op2val:0x8017ffe015501ff
TEST_RR_OP(scmple8, x1, x20, x3, 0x0000000000000000, 0xf8ef2009f90908ff, 0x8017ffe015501ff, x6, 40, x7)

inst_22:
// rs1==x26, rs2==x27, rd==x29, rs2_b7_val == 4, rs1_b7_val == -1, rs1_b5_val == 16, rs1_b6_val == -9, rs2_b3_val == 2, rs1_b4_val == -2
// opcode: scmple8 ; op1:x26; op2:x27; dest:x29; op1val:0xfff710fefaefbf07;  op2val:0x4043ff902023ff8
TEST_RR_OP(scmple8, x29, x26, x27, 0x0000000000000000, 0xfff710fefaefbf07, 0x4043ff902023ff8, x6, 48, x7)

inst_23:
// rs1==x23, rs2==x1, rd==x21, rs2_b7_val == 1, rs2_b4_val == 16, rs1_b1_val == 127, rs2_b0_val == -5
// opcode: scmple8 ; op1:x23; op2:x1; dest:x21; op1val:0xfeef06f610c07f07;  op2val:0x107f91001bfbffb
TEST_RR_OP(scmple8, x21, x23, x1, 0x0000000000000000, 0xfeef06f610c07f07, 0x107f91001bfbffb, x6, 56, x7)

inst_24:
// rs1==x13, rs2==x2, rd==x9, rs2_b7_val == 0, rs2_b1_val == -86, rs1_b3_val == 32, rs1_b4_val == 2
// opcode: scmple8 ; op1:x13; op2:x2; dest:x9; op1val:0xef407f022010ff55;  op2val:0x01f7f80440aa08
TEST_RR_OP(scmple8, x9, x13, x2, 0x0000000000000000, 0xef407f022010ff55, 0x01f7f80440aa08, x6, 64, x7)

inst_25:
// rs1==x28, rs2==x10, rd==x30, rs2_b7_val == -1, rs1_b2_val == 64, rs1_b5_val == 64, rs1_b6_val == -65, rs1_b1_val == 85, rs2_b3_val == -128, rs2_b6_val == -5, rs2_b1_val == -3, rs2_b4_val == -128
// opcode: scmple8 ; op1:x28; op2:x10; dest:x30; op1val:0xdfbf400706405510;  op2val:0xfffb7f808040fdf7
TEST_RR_OP(scmple8, x30, x28, x10, 0x0000000000000000, 0xdfbf400706405510, 0xfffb7f808040fdf7, x6, 72, x7)

inst_26:
// rs1==x18, rs2==x0, rd==x20, rs2_b6_val == 127, rs2_b3_val == -3, rs1_b3_val == -128
// opcode: scmple8 ; op1:x18; op2:x0; dest:x20; op1val:0xdf09dfbf80f6bffa;  op2val:0x3f7f08c0fd202009
TEST_RR_OP(scmple8, x20, x18, x0, 0x0000000000000000, 0xdf09dfbf80f6bffa, 0x3f7f08c0fd202009, x6, 80, x7)

inst_27:
// rs1==x16, rs2==x4, rd==x14, rs2_b6_val == -17, rs1_b1_val == -3, rs1_b5_val == 1, rs1_b6_val == 8, rs1_b0_val == -17
// opcode: scmple8 ; op1:x16; op2:x4; dest:x14; op1val:0x100801fcf6f9fdef;  op2val:0x8eff605043faaff
TEST_RR_OP(scmple8, x14, x16, x4, 0x0000000000000000, 0x100801fcf6f9fdef, 0x8eff605043faaff, x6, 88, x7)

inst_28:
// rs1==x30, rs2==x5, rd==x2, rs1_b5_val == -3, rs1_b7_val == 4, rs2_b3_val == 85, rs1_b3_val == -65, rs2_b2_val == -3, rs2_b6_val == 0, rs1_b4_val == 4, rs1_b2_val == -3
// opcode: scmple8 ; op1:x30; op2:x5; dest:x2; op1val:0x4bffd04bffd80ef;  op2val:0xfa00045555fd0203
TEST_RR_OP(scmple8, x2, x30, x5, 0x0000000000000000, 0x4bffd04bffd80ef, 0xfa00045555fd0203, x6, 96, x7)

inst_29:
// rs1==x10, rs2==x8, rd==x16, rs1_b5_val == -128, rs1_b7_val == -86, rs1_b1_val == -17
// opcode: scmple8 ; op1:x10; op2:x8; dest:x16; op1val:0xaa408005f6c0efdf;  op2val:0x7ffd02faf7aafb00
TEST_RR_OP(scmple8, x16, x10, x8, 0x0000000000000000, 0xaa408005f6c0efdf, 0x7ffd02faf7aafb00, x6, 104, x7)

inst_30:
// rs1==x1, rs2==x23, rd==x18, rs1_b5_val == 4, rs2_b4_val == -65, rs2_b5_val == -86, rs1_b7_val == -128
// opcode: scmple8 ; op1:x1; op2:x23; dest:x18; op1val:0x80c0040703f65506;  op2val:0x7f05aabf05c0f603
TEST_RR_OP(scmple8, x18, x1, x23, 0x0000000000000000, 0x80c0040703f65506, 0x7f05aabf05c0f603, x6, 112, x7)

inst_31:
// rs1==x29, rs2==x9, rd==x4, rs1_b5_val == 2, 
// opcode: scmple8 ; op1:x29; op2:x9; dest:x4; op1val:0x5090210407f407f;  op2val:0x9557fc03ff9fc80
TEST_RR_OP(scmple8, x4, x29, x9, 0x0000000000000000, 0x5090210407f407f, 0x9557fc03ff9fc80, x6, 120, x7)

inst_32:
// rs1_b5_val == 0, rs2_b2_val == 4, rs1_b0_val == 32, rs1_b1_val == 32, rs1_b4_val == -3, rs1_b7_val == -3
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfc00fd05ef2020;  op2val:0xf8f8c0bffb0404fc
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xfdfc00fd05ef2020, 0xf8f8c0bffb0404fc, x6, 128, x7)

inst_33:
// rs1_b4_val == 127, rs1_b3_val == 2, rs1_b6_val == -3, rs1_b2_val == -33
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfcfdf97f02df40f7;  op2val:0xfc0506010110dff6
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xfcfdf97f02df40f7, 0xfc0506010110dff6, x6, 136, x7)

inst_34:
// rs1_b4_val == -33, rs1_b2_val == -65, rs2_b6_val == 16, rs1_b7_val == 1, rs1_b0_val == 1
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x13ffedf20bf0801;  op2val:0xdf10aafff600fefd
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x13ffedf20bf0801, 0xdf10aafff600fefd, x6, 144, x7)

inst_35:
// rs1_b4_val == -17, rs2_b5_val == -3, rs1_b7_val == 8, rs2_b4_val == 127
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x808dfeff8dffdf8;  op2val:0x40aafd7f00f9df55
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x808dfeff8dffdf8, 0x40aafd7f00f9df55, x6, 152, x7)

inst_36:
// rs1_b4_val == -5, rs2_b0_val == 32
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd55fbaaef10fc;  op2val:0x40bf02c0aafff620
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xfd55fbaaef10fc, 0x40bf02c0aafff620, x6, 160, x7)

inst_37:
// rs1_b4_val == 8, rs1_b3_val == -5, rs2_b5_val == 32, rs2_b2_val == 1
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0faf808fbf601fb;  op2val:0xeffa20060401807f
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xc0faf808fbf601fb, 0xeffa20060401807f, x6, 168, x7)

inst_38:
// rs1_b4_val == 1, rs1_b2_val == 85
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x1c0ff010555aa07;  op2val:0x5502c01004aaff7f
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x1c0ff010555aa07, 0x5502c01004aaff7f, x6, 176, x7)

inst_39:
// rs1_b4_val == -1, rs2_b2_val == -5
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfebf10fffafd55bf;  op2val:0xfbfbf77ff7fbfbfd
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xfebf10fffafd55bf, 0xfbfbf77ff7fbfbfd, x6, 184, x7)

inst_40:
// rs1_b3_val == 85, rs1_b6_val == -1, rs1_b1_val == 0, rs2_b3_val == -1, rs2_b4_val == -86
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xeffff60555050010;  op2val:0x06fbaaff010420
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xeffff60555050010, 0x06fbaaff010420, x6, 192, x7)

inst_41:
// rs1_b3_val == -33, rs2_b3_val == 64
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x2080dfffdffcf8ff;  op2val:0x40dffc0940dffdfa
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x2080dfffdffcf8ff, 0x40dffc0940dffdfa, x6, 200, x7)

inst_42:
// rs1_b3_val == -17, rs1_b0_val == 2, rs2_b3_val == 32, rs1_b2_val == -128
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x5df4009ef800502;  op2val:0x705f74020fc3fbf
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x5df4009ef800502, 0x705f74020fc3fbf, x6, 208, x7)

inst_43:
// rs1_b3_val == 8, rs2_b2_val == -128
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x1df060308fb40f7;  op2val:0xc0fdf704ff80073f
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x1df060308fb40f7, 0xc0fdf704ff80073f, x6, 216, x7)

inst_44:
// rs1_b3_val == 1, rs2_b4_val == -3
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x80f6bf0901f9ff7f;  op2val:0xf9bf03fd03fb05fc
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x80f6bf0901f9ff7f, 0xf9bf03fd03fb05fc, x6, 224, x7)

inst_45:
// rs2_b3_val == 127, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x55bf06fef7ff4003;  op2val:0x10fdfffa7ffa01f9
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x55bf06fef7ff4003, 0x10fdfffa7ffa01f9, x6, 232, x7)

inst_46:
// rs2_b3_val == -65, rs1_b2_val == -2, rs2_b1_val == 16
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x5502df0805feef04;  op2val:0xfa0707bfbf031010
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x5502df0805feef04, 0xfa0707bfbf031010, x6, 240, x7)

inst_47:
// rs2_b3_val == -2, rs2_b4_val == -9
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x13f10010740fbf9;  op2val:0xdf3f7ff7fedf0710
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x13f10010740fbf9, 0xdf3f7ff7fedf0710, x6, 248, x7)

inst_48:
// rs2_b3_val == 8, rs1_b7_val == -5, rs1_b2_val == 32
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb01f606c0200503;  op2val:0x10fc20050801fc10
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xfb01f606c0200503, 0x10fc20050801fc10, x6, 256, x7)

inst_49:
// rs2_b2_val == 127, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9bffffa03ef1055;  op2val:0x60680fc807ffbfd
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xf9bffffa03ef1055, 0x60680fc807ffbfd, x6, 264, x7)

inst_50:
// rs2_b2_val == -9, rs1_b6_val == 32, rs1_b2_val == -9
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x20fd8010f7aa3f;  op2val:0x55203f01fff70103
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x20fd8010f7aa3f, 0x55203f01fff70103, x6, 272, x7)

inst_51:
// rs2_b2_val == -2, rs1_b6_val == -2
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xaafe10ff01fc1005;  op2val:0x2effcf607fe02aa
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xaafe10ff01fc1005, 0x2effcf607fe02aa, x6, 280, x7)

inst_52:
// rs2_b2_val == 8, rs1_b6_val == -86, rs1_b2_val == 2, rs2_b1_val == 8
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x8aa55aa0502557f;  op2val:0xfd030855df080801
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x8aa55aa0502557f, 0xfd030855df080801, x6, 288, x7)

inst_53:
// rs2_b1_val == 127, rs2_b4_val == 8, rs1_b7_val == 127, rs2_b0_val == 4
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x7ff8403f3ff820fb;  op2val:0x7f93f08f7bf7f04
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x7ff8403f3ff820fb, 0x7f93f08f7bf7f04, x6, 296, x7)

inst_54:
// rs2_b1_val == -9, rs2_b0_val == -2
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x2f7fefbc005aafe;  op2val:0x5c00280fa55f7fe
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x2f7fefbc005aafe, 0x5c00280fa55f7fe, x6, 304, x7)

inst_55:
// rs1_b3_val == 0, rs1_b0_val == 0, rs2_b6_val == 8, rs1_b6_val == 85
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf55033f00bffd00;  op2val:0x3087f0502fb55fa
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xdf55033f00bffd00, 0x3087f0502fb55fa, x6, 312, x7)

inst_56:
// rs2_b1_val == 64, rs2_b5_val == -17
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x1f67fdf04fefaf6;  op2val:0x900efaaf8fb40fa
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x1f67fdf04fefaf6, 0x900efaaf8fb40fa, x6, 320, x7)

inst_57:
// rs2_b0_val == -33, rs1_b5_val == -17
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xaaf8ef2010027ff6;  op2val:0x1aa0605aa07fadf
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xaaf8ef2010027ff6, 0x1aa0605aa07fadf, x6, 328, x7)

inst_58:
// rs2_b0_val == -17, rs1_b2_val == 1, rs1_b1_val == -9
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe050510fa01f700;  op2val:0x5510fa3f800607ef
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xfe050510fa01f700, 0x5510fa3f800607ef, x6, 336, x7)

inst_59:
// rs1_b2_val == 4, rs2_b4_val == -17, rs2_b1_val == 0
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfebffafdc004fdbf;  op2val:0xc00708ef3fdf0010
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xfebffafdc004fdbf, 0xc00708ef3fdf0010, x6, 344, x7)

inst_60:
// rs2_b0_val == 64, rs1_b1_val == -2, rs2_b6_val == -9
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x2003f7fe8009feef;  op2val:0xdff7033f80f67f40
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x2003f7fe8009feef, 0xdff7033f80f67f40, x6, 352, x7)

inst_61:
// rs1_b1_val == -33, rs2_b6_val == 64
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x8effcfcf63fdfc0;  op2val:0x8040f8fa060404df
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x8effcfcf63fdfc0, 0x8040f8fa060404df, x6, 360, x7)

inst_62:
// rs1_b7_val == -65, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xbff6f9100820fe06;  op2val:0xfafbfe0340fbfa
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xbff6f9100820fe06, 0xfafbfe0340fbfa, x6, 368, x7)

inst_63:
// rs2_b6_val == -1, rs1_b0_val == 8, rs2_b5_val == -65
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa09010506efdf08;  op2val:0xaaffbff7fcfb0703
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xfa09010506efdf08, 0xaaffbff7fcfb0703, x6, 376, x7)

inst_64:
// rs2_b4_val == 32, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa557f06fb09087f;  op2val:0xfd40c020f8bff9fe
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xaa557f06fb09087f, 0xfd40c020f8bff9fe, x6, 384, x7)

inst_65:
// rs2_b5_val == -2, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf037ffcf908fa07;  op2val:0x3f10fec00355f8f7
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xdf037ffcf908fa07, 0x3f10fec00355f8f7, x6, 392, x7)

inst_66:
// rs2_b5_val == 64, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8f9feff03c010;  op2val:0xbfef40feef10fc06
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xfff8f9feff03c010, 0xbfef40feef10fc06, x6, 400, x7)

inst_67:
// rs1_b0_val == 64, rs1_b7_val == 64
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x40f905f8ffdf0540;  op2val:0x7fefe097ffb2008
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x40f905f8ffdf0540, 0x7fefe097ffb2008, x6, 408, x7)

inst_68:
// rs1_b6_val == 127, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x17f3ffc401007fc;  op2val:0x8557ffcf7aadf06
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x17f3ffc401007fc, 0x8557ffcf7aadf06, x6, 416, x7)

inst_69:
// rs2_b4_val == -33, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8ff06faaa04fa09;  op2val:0x3fdfefdf5501aa55
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xf8ff06faaa04fa09, 0x3fdfefdf5501aa55, x6, 424, x7)

inst_70:
// rs1_b6_val == 16, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x51005f920025504;  op2val:0xf92007dfaafa04fc
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x51005f920025504, 0xf92007dfaafa04fc, x6, 432, x7)

inst_71:
// rs2_b4_val == -5, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x8fd080301060508;  op2val:0xbffe08fb20fefd10
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x8fd080301060508, 0xbffe08fb20fefd10, x6, 440, x7)

inst_72:
// rs1_b1_val == 2, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x309c0faff0202fd;  op2val:0xfabfc0fbdff7043f
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x309c0faff0202fd, 0xfabfc0fbdff7043f, x6, 448, x7)

inst_73:
// rs1_b6_val == 4, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x504f7bf02030808;  op2val:0x208005f62040f904
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x504f7bf02030808, 0x208005f62040f904, x6, 456, x7)

inst_74:
// rs1_b0_val == -86, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x4c03fffc0bff9aa;  op2val:0x8055fbff40fcfb10
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x4c03fffc0bff9aa, 0x8055fbff40fcfb10, x6, 464, x7)

inst_75:
// rs1_b6_val == 0, 
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x60080fcfaff4010;  op2val:0x73f01080401c0bf
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x60080fcfaff4010, 0x73f01080401c0bf, x6, 472, x7)

inst_76:
// rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b2_val == 8, rs2_b6_val == 85, rs2_b3_val == -17, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b6_val < 0 and rs2_b6_val > 0, rs2_b0_val == 0, rs1_b5_val > 0 and rs2_b5_val < 0, rs1_b7_val == 85, rs2_b1_val == -128, rs2_b5_val == -33, rs1_b4_val == -9, rs2_b7_val == -17, rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b4_val == 1, rs1_b0_val == 127
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0x55fc06f70508f67f;  op2val:0xef55df01eff68000
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0x55fc06f70508f67f, 0xef55df01eff68000, x6, 480, x7)

inst_77:
// rs1_b3_val == rs2_b3_val, rs2_b5_val == 16, rs1_b1_val < 0 and rs2_b1_val > 0, rs2_b6_val == -33, rs1_b1_val == -128, rs2_b7_val == -9, rs2_b1_val == 1, rs1_b4_val == -128, rs2_b0_val == 85
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8f60780f80880f6;  op2val:0xf7df1009f8fc0155
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xf8f60780f80880f6, 0xf7df1009f8fc0155, x6, 488, x7)

inst_78:
// rs2_b6_val == 127, rs2_b3_val == -3, rs1_b3_val == -128
// opcode: scmple8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf09dfbf80f6bffa;  op2val:0x3f7f08c0fd202009
TEST_RR_OP(scmple8, x31, x30, x29, 0x0000000000000000, 0xdf09dfbf80f6bffa, 0x3f7f08c0fd202009, x6, 496, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 63*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
