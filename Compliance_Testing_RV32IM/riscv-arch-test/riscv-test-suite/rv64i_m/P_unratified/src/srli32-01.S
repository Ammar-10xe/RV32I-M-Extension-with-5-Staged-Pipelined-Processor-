
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srli32 instruction of the RISC-V RV64PZicsr extension for the srli32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srli32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rd, rs1==x12, rd==x12, rs1_w0_val == 0, imm_val == 25
// opcode: srli32 ; op1:x12; dest:x12; op1val:0x00000f00000000;  immval:0x19
TEST_IMM_OP( srli32, x12, x12, 0x0000000000000000, 0x00000f00000000, 0x19, x8, 0, x2)

inst_1:
// rs1 != rd, rs1==x25, rd==x0, imm_val == 31, rs1_w1_val == 262144, rs1_w0_val == 256
// opcode: srli32 ; op1:x25; dest:x0; op1val:0x04000000000100;  immval:0x1f
TEST_IMM_OP( srli32, x0, x25, 0x0000000000000000, 0x04000000000100, 0x1f, x8, 8, x2)

inst_2:
// rs1==x10, rd==x4, imm_val == 30, rs1_w0_val == 4294967167
// opcode: srli32 ; op1:x10; dest:x4; op1val:0x000011ffffff7f;  immval:0x1e
TEST_IMM_OP( srli32, x4, x10, 0x0000000000000000, 0x000011ffffff7f, 0x1e, x8, 16, x2)

inst_3:
// rs1==x28, rd==x31, imm_val == 29, rs1_w1_val == 1073741824, rs1_w0_val == 2863311530
// opcode: srli32 ; op1:x28; dest:x31; op1val:0x40000000aaaaaaaa;  immval:0x1d
TEST_IMM_OP( srli32, x31, x28, 0x0000000000000000, 0x40000000aaaaaaaa, 0x1d, x8, 24, x2)

inst_4:
// rs1==x9, rd==x16, imm_val == 28, rs1_w0_val == 67108864, rs1_w1_val == 16
// opcode: srli32 ; op1:x9; dest:x16; op1val:0x00001004000000;  immval:0x1c
TEST_IMM_OP( srli32, x16, x9, 0x0000000000000000, 0x00001004000000, 0x1c, x8, 32, x2)

inst_5:
// rs1==x30, rd==x6, imm_val == 27, 
// opcode: srli32 ; op1:x30; dest:x6; op1val:0x00000d0000000d;  immval:0x1b
TEST_IMM_OP( srli32, x6, x30, 0x0000000000000000, 0x00000d0000000d, 0x1b, x8, 40, x2)

inst_6:
// rs1==x13, rd==x23, imm_val == 26, rs1_w1_val == 4294966783, rs1_w0_val == 131072
// opcode: srli32 ; op1:x13; dest:x23; op1val:0xfffffdff00020000;  immval:0x1a
TEST_IMM_OP( srli32, x23, x13, 0x0000000000000000, 0xfffffdff00020000, 0x1a, x8, 48, x2)

inst_7:
// rs1==x26, rd==x14, imm_val == 24, rs1_w0_val == 4026531839, rs1_w1_val == 32
// opcode: srli32 ; op1:x26; dest:x14; op1val:0x000020efffffff;  immval:0x18
TEST_IMM_OP( srli32, x14, x26, 0x0000000000000000, 0x000020efffffff, 0x18, x8, 56, x2)

inst_8:
// rs1==x21, rd==x9, imm_val == 23, rs1_w1_val == 2863311530, rs1_w0_val == 4294934527
// opcode: srli32 ; op1:x21; dest:x9; op1val:0xaaaaaaaaffff7fff;  immval:0x17
TEST_IMM_OP( srli32, x9, x21, 0x0000000000000000, 0xaaaaaaaaffff7fff, 0x17, x8, 64, x2)

inst_9:
// rs1==x11, rd==x5, imm_val == 22, rs1_w1_val == 4261412863, rs1_w0_val == 2147483647
// opcode: srli32 ; op1:x11; dest:x5; op1val:0xfdffffff7fffffff;  immval:0x16
TEST_IMM_OP( srli32, x5, x11, 0x0000000000000000, 0xfdffffff7fffffff, 0x16, x8, 72, x2)

inst_10:
// rs1==x3, rd==x19, imm_val == 21, rs1_w0_val == 4294966271
// opcode: srli32 ; op1:x3; dest:x19; op1val:0x040000fffffbff;  immval:0x15
TEST_IMM_OP( srli32, x19, x3, 0x0000000000000000, 0x040000fffffbff, 0x15, x8, 80, x2)

inst_11:
// rs1==x6, rd==x29, imm_val == 20, rs1_w0_val == 268435456, rs1_w1_val == 0
// opcode: srli32 ; op1:x6; dest:x29; op1val:0x00000010000000;  immval:0x14
TEST_IMM_OP( srli32, x29, x6, 0x0000000000000000, 0x00000010000000, 0x14, x8, 88, x2)

inst_12:
// rs1==x15, rd==x24, imm_val == 19, 
// opcode: srli32 ; op1:x15; dest:x24; op1val:0x00000a0000000e;  immval:0x13
TEST_IMM_OP( srli32, x24, x15, 0x0000000000000000, 0x00000a0000000e, 0x13, x8, 96, x2)

inst_13:
// rs1==x29, rd==x10, imm_val == 18, rs1_w0_val == 4294705151, rs1_w1_val == 4294967263
// opcode: srli32 ; op1:x29; dest:x10; op1val:0xffffffdffffbffff;  immval:0x12
TEST_IMM_OP( srli32, x10, x29, 0x0000000000000000, 0xffffffdffffbffff, 0x12, x8, 104, x2)

inst_14:
// rs1==x16, rd==x18, imm_val == 17, rs1_w0_val == 4194304
// opcode: srli32 ; op1:x16; dest:x18; op1val:0x00000c00400000;  immval:0x11
TEST_IMM_OP( srli32, x18, x16, 0x0000000000000000, 0x00000c00400000, 0x11, x8, 112, x2)

inst_15:
// rs1==x18, rd==x7, imm_val == 16, rs1_w1_val == 65536
// opcode: srli32 ; op1:x18; dest:x7; op1val:0x01000000000013;  immval:0x10
TEST_IMM_OP( srli32, x7, x18, 0x0000000000000000, 0x01000000000013, 0x10, x8, 120, x2)

inst_16:
// rs1==x17, rd==x30, imm_val == 15, 
// opcode: srli32 ; op1:x17; dest:x30; op1val:0xaaaaaaaaaaaaaaaa;  immval:0xf
TEST_IMM_OP( srli32, x30, x17, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xf, x8, 128, x2)

inst_17:
// rs1==x7, rd==x28, imm_val == 14, 
// opcode: srli32 ; op1:x7; dest:x28; op1val:0x00000d00000100;  immval:0xe
TEST_IMM_OP( srli32, x28, x7, 0x0000000000000000, 0x00000d00000100, 0xe, x8, 136, x2)

inst_18:
// rs1==x1, rd==x11, imm_val == 13, rs1_w1_val == 4294934527, rs1_w0_val == 2
// opcode: srli32 ; op1:x1; dest:x11; op1val:0xffff7fff00000002;  immval:0xd
TEST_IMM_OP( srli32, x11, x1, 0x0000000000000000, 0xffff7fff00000002, 0xd, x8, 144, x2)

inst_19:
// rs1==x20, rd==x15, imm_val == 12, rs1_w1_val == 4294967294, rs1_w0_val == 1
// opcode: srli32 ; op1:x20; dest:x15; op1val:0xfffffffe00000001;  immval:0xc
TEST_IMM_OP( srli32, x15, x20, 0x0000000000000000, 0xfffffffe00000001, 0xc, x8, 152, x2)

inst_20:
// rs1==x31, rd==x20, imm_val == 11, rs1_w1_val == 4227858431, rs1_w0_val == 3221225471
// opcode: srli32 ; op1:x31; dest:x20; op1val:0xfbffffffbfffffff;  immval:0xb
TEST_IMM_OP( srli32, x20, x31, 0x0000000000000000, 0xfbffffffbfffffff, 0xb, x8, 160, x7)

inst_21:
// rs1==x0, rd==x21, imm_val == 10, rs1_w1_val == 4026531839
// opcode: srli32 ; op1:x0; dest:x21; op1val:0xefffffffffff7fff;  immval:0xa
TEST_IMM_OP( srli32, x21, x0, 0x0000000000000000, 0xefffffffffff7fff, 0xa, x8, 168, x7)

inst_22:
// rs1==x22, rd==x2, imm_val == 9, 
// opcode: srli32 ; op1:x22; dest:x2; op1val:0xefffffff00000013;  immval:0x9
TEST_IMM_OP( srli32, x2, x22, 0x0000000000000000, 0xefffffff00000013, 0x9, x8, 176, x7)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_23:
// rs1==x24, rd==x1, imm_val == 8, rs1_w1_val == 4
// opcode: srli32 ; op1:x24; dest:x1; op1val:0x0000040000000c;  immval:0x8
TEST_IMM_OP( srli32, x1, x24, 0x0000000000000000, 0x0000040000000c, 0x8, x6, 0, x7)

inst_24:
// rs1==x5, rd==x22, imm_val == 7, rs1_w0_val == 64, rs1_w1_val == 2097152
// opcode: srli32 ; op1:x5; dest:x22; op1val:0x20000000000040;  immval:0x7
TEST_IMM_OP( srli32, x22, x5, 0x0000000000000000, 0x20000000000040, 0x7, x6, 8, x7)

inst_25:
// rs1==x23, rd==x8, imm_val == 6, rs1_w0_val == 4294967279, rs1_w1_val == 128
// opcode: srli32 ; op1:x23; dest:x8; op1val:0x000080ffffffef;  immval:0x6
TEST_IMM_OP( srli32, x8, x23, 0x0000000000000000, 0x000080ffffffef, 0x6, x6, 16, x7)

inst_26:
// rs1==x2, rd==x13, imm_val == 5, rs1_w0_val == 32
// opcode: srli32 ; op1:x2; dest:x13; op1val:0xaaaaaaaa00000020;  immval:0x5
TEST_IMM_OP( srli32, x13, x2, 0x0000000000000000, 0xaaaaaaaa00000020, 0x5, x6, 24, x7)

inst_27:
// rs1==x4, rd==x27, imm_val == 4, rs1_w0_val == 2048, rs1_w1_val == 3758096383
// opcode: srli32 ; op1:x4; dest:x27; op1val:0xdfffffff00000800;  immval:0x4
TEST_IMM_OP( srli32, x27, x4, 0x0000000000000000, 0xdfffffff00000800, 0x4, x6, 32, x7)

inst_28:
// rs1==x8, rd==x26, imm_val == 3, rs1_w0_val == 16
// opcode: srli32 ; op1:x8; dest:x26; op1val:0x00000300000010;  immval:0x3
TEST_IMM_OP( srli32, x26, x8, 0x0000000000000000, 0x00000300000010, 0x3, x6, 40, x7)

inst_29:
// rs1==x19, rd==x25, imm_val == 2, rs1_w1_val == 131072
// opcode: srli32 ; op1:x19; dest:x25; op1val:0x0200000000000c;  immval:0x2
TEST_IMM_OP( srli32, x25, x19, 0x0000000000000000, 0x0200000000000c, 0x2, x6, 48, x7)

inst_30:
// rs1==x14, rd==x3, imm_val == 1, 
// opcode: srli32 ; op1:x14; dest:x3; op1val:0x000000efffffff;  immval:0x1
TEST_IMM_OP( srli32, x3, x14, 0x0000000000000000, 0x000000efffffff, 0x1, x6, 56, x7)

inst_31:
// rs1==x27, rd==x17, imm_val == 0, rs1_w1_val == 4294901759
// opcode: srli32 ; op1:x27; dest:x17; op1val:0xfffeffff00000013;  immval:0x0
TEST_IMM_OP( srli32, x17, x27, 0x0000000000000000, 0xfffeffff00000013, 0x0, x6, 64, x7)

inst_32:
// rs1_w1_val == 1431655765, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x555555550000000b;  immval:0x7
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x555555550000000b, 0x7, x6, 72, x7)

inst_33:
// rs1_w1_val == 2147483647, rs1_w0_val == 4294967293
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x7ffffffffffffffd;  immval:0x10
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x7ffffffffffffffd, 0x10, x6, 80, x7)

inst_34:
// rs1_w1_val == 3221225471, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xbfffffff00020000;  immval:0x14
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xbfffffff00020000, 0x14, x6, 88, x7)

inst_35:
// rs1_w1_val == 4160749567, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xf7ffffff00000000;  immval:0x1e
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xf7ffffff00000000, 0x1e, x6, 96, x7)

inst_36:
// rs1_w1_val == 4278190079, rs1_w0_val == 16777216
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xfeffffff01000000;  immval:0x17
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xfeffffff01000000, 0x17, x6, 104, x7)

inst_37:
// rs1_w1_val == 4286578687, rs1_w0_val == 1431655765
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xff7fffff55555555;  immval:0x14
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xff7fffff55555555, 0x14, x6, 112, x7)

inst_38:
// rs1_w1_val == 4290772991, rs1_w0_val == 4294967263
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xffbfffffffffffdf;  immval:0x1b
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xffbfffffffffffdf, 0x1b, x6, 120, x7)

inst_39:
// rs1_w1_val == 4292870143, rs1_w0_val == 4294967294
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xffdffffffffffffe;  immval:0x1f
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xffdffffffffffffe, 0x1f, x6, 128, x7)

inst_40:
// rs1_w1_val == 4293918719, rs1_w0_val == 4278190079
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xffeffffffeffffff;  immval:0x14
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xffeffffffeffffff, 0x14, x6, 136, x7)

inst_41:
// rs1_w1_val == 4294443007, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xfff7ffff0000000e;  immval:0x16
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xfff7ffff0000000e, 0x16, x6, 144, x7)

inst_42:
// rs1_w1_val == 4294705151, rs1_w0_val == 4096
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xfffbffff00001000;  immval:0x13
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xfffbffff00001000, 0x13, x6, 152, x7)

inst_43:
// rs1_w1_val == 4294836223, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xfffdffff00000040;  immval:0xe
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xfffdffff00000040, 0xe, x6, 160, x7)

inst_44:
// rs1_w1_val == 4294950911, rs1_w0_val == 16384
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xffffbfff00004000;  immval:0x1
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xffffbfff00004000, 0x1, x6, 168, x7)

inst_45:
// rs1_w1_val == 4294959103, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xffffdfff00000002;  immval:0x1
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xffffdfff00000002, 0x1, x6, 176, x7)

inst_46:
// rs1_w1_val == 4294963199, rs1_w0_val == 4294950911
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xffffefffffffbfff;  immval:0x6
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xffffefffffffbfff, 0x6, x6, 184, x7)

inst_47:
// rs1_w1_val == 4294965247, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xfffff7ff00001000;  immval:0x1d
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xfffff7ff00001000, 0x1d, x6, 192, x7)

inst_48:
// rs1_w1_val == 4294966271, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xfffffbff0000000f;  immval:0x19
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xfffffbff0000000f, 0x19, x6, 200, x7)

inst_49:
// rs1_w1_val == 4294967039, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xfffffefffeffffff;  immval:0x0
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xfffffefffeffffff, 0x0, x6, 208, x7)

inst_50:
// rs1_w1_val == 4294967167, rs1_w0_val == 4294967295
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xffffff7fffffffff;  immval:0x13
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xffffff7fffffffff, 0x13, x6, 216, x7)

inst_51:
// rs1_w1_val == 4294967231, rs1_w0_val == 2097152
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xffffffbf00200000;  immval:0x8
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xffffffbf00200000, 0x8, x6, 224, x7)

inst_52:
// rs1_w1_val == 4294967279, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xffffffef00000005;  immval:0x7
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xffffffef00000005, 0x7, x6, 232, x7)

inst_53:
// rs1_w0_val == 4294967231, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x010000ffffffbf;  immval:0x9
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x010000ffffffbf, 0x9, x6, 240, x7)

inst_54:
// rs1_w0_val == 4294967287, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xdffffffffffffff7;  immval:0x12
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xdffffffffffffff7, 0x12, x6, 248, x7)

inst_55:
// rs1_w0_val == 4294967291, rs1_w1_val == 4294967293
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xfffffffdfffffffb;  immval:0xa
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xfffffffdfffffffb, 0xa, x6, 256, x7)

inst_56:
// rs1_w0_val == 2147483648, rs1_w1_val == 4294967291
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xfffffffb80000000;  immval:0x1e
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xfffffffb80000000, 0x1e, x6, 264, x7)

inst_57:
// rs1_w0_val == 1073741824, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x00000e40000000;  immval:0x13
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x00000e40000000, 0x13, x6, 272, x7)

inst_58:
// rs1_w0_val == 536870912, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xffffff7f20000000;  immval:0x17
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xffffff7f20000000, 0x17, x6, 280, x7)

inst_59:
// rs1_w0_val == 134217728, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x5555555508000000;  immval:0x13
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x5555555508000000, 0x13, x6, 288, x7)

inst_60:
// rs1_w0_val == 33554432, rs1_w1_val == 8388608
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x80000002000000;  immval:0x1e
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x80000002000000, 0x1e, x6, 296, x7)

inst_61:
// rs1_w0_val == 8388608, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xfeffffff00800000;  immval:0x1
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xfeffffff00800000, 0x1, x6, 304, x7)

inst_62:
// rs1_w0_val == 1048576, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xfffffffd00100000;  immval:0x1b
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xfffffffd00100000, 0x1b, x6, 312, x7)

inst_63:
// rs1_w0_val == 524288, rs1_w1_val == 134217728
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x800000000080000;  immval:0xd
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x800000000080000, 0xd, x6, 320, x7)

inst_64:
// rs1_w0_val == 262144, rs1_w1_val == 4294967287
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xfffffff700040000;  immval:0x1e
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xfffffff700040000, 0x1e, x6, 328, x7)

inst_65:
// rs1_w0_val == 65536, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xffffffef00010000;  immval:0x1
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xffffffef00010000, 0x1, x6, 336, x7)

inst_66:
// rs1_w0_val == 32768, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x00001100008000;  immval:0xf
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x00001100008000, 0xf, x6, 344, x7)

inst_67:
// rs1_w0_val == 8192, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x00001300002000;  immval:0xd
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x00001300002000, 0xd, x6, 352, x7)

inst_68:
// rs1_w0_val == 1024, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xffffffdf00000400;  immval:0x1c
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xffffffdf00000400, 0x1c, x6, 360, x7)

inst_69:
// rs1_w0_val == 512, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xfffff7ff00000200;  immval:0x10
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xfffff7ff00000200, 0x10, x6, 368, x7)

inst_70:
// rs1_w0_val == 128, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xfffeffff00000080;  immval:0x2
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xfffeffff00000080, 0x2, x6, 376, x7)

inst_71:
// rs1_w0_val == 8, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x00000500000008;  immval:0x1b
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x00000500000008, 0x1b, x6, 384, x7)

inst_72:
// rs1_w0_val == 4, rs1_w1_val == 16384
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x00400000000004;  immval:0x3
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x00400000000004, 0x3, x6, 392, x7)

inst_73:
// rs1_w1_val == 2147483648, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x8000000010000000;  immval:0x8
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x8000000010000000, 0x8, x6, 400, x7)

inst_74:
// rs1_w1_val == 536870912, rs1_w0_val == 4294965247
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x20000000fffff7ff;  immval:0x4
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x20000000fffff7ff, 0x4, x6, 408, x7)

inst_75:
// rs1_w1_val == 268435456, rs1_w0_val == 4294967039
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x10000000fffffeff;  immval:0x1c
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x10000000fffffeff, 0x1c, x6, 416, x7)

inst_76:
// rs1_w1_val == 67108864, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x400000001000000;  immval:0xb
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x400000001000000, 0xb, x6, 424, x7)

inst_77:
// rs1_w1_val == 33554432, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x200000000000010;  immval:0x1e
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x200000000000010, 0x1e, x6, 432, x7)

inst_78:
// rs1_w1_val == 16777216, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x100000000000100;  immval:0x5
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x100000000000100, 0x5, x6, 440, x7)

inst_79:
// rs1_w1_val == 4194304, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x40000000010000;  immval:0xe
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x40000000010000, 0xe, x6, 448, x7)

inst_80:
// rs1_w1_val == 1048576, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x100000bfffffff;  immval:0x14
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x100000bfffffff, 0x14, x6, 456, x7)

inst_81:
// rs1_w1_val == 524288, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x08000008000000;  immval:0x1d
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x08000008000000, 0x1d, x6, 464, x7)

inst_82:
// rs1_w1_val == 32768, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x00800000400000;  immval:0xc
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x00800000400000, 0xc, x6, 472, x7)

inst_83:
// rs1_w1_val == 8192, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x00200000000200;  immval:0x19
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x00200000000200, 0x19, x6, 480, x7)

inst_84:
// rs1_w1_val == 4096, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x00100000100000;  immval:0x1e
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x00100000100000, 0x1e, x6, 488, x7)

inst_85:
// rs1_w1_val == 2048, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x00080000000013;  immval:0xe
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x00080000000013, 0xe, x6, 496, x7)

inst_86:
// rs1_w1_val == 1024, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x00040000020000;  immval:0x5
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x00040000020000, 0x5, x6, 504, x7)

inst_87:
// rs1_w1_val == 512, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x000200fffffffb;  immval:0x0
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x000200fffffffb, 0x0, x6, 512, x7)

inst_88:
// rs1_w1_val == 256, rs1_w0_val == 4294836223
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x000100fffdffff;  immval:0x8
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x000100fffdffff, 0x8, x6, 520, x7)

inst_89:
// rs1_w1_val == 64, rs1_w0_val == 4290772991
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x000040ffbfffff;  immval:0x5
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x000040ffbfffff, 0x5, x6, 528, x7)

inst_90:
// rs1_w1_val == 8, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x00000800010000;  immval:0x13
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x00000800010000, 0x13, x6, 536, x7)

inst_91:
// rs1_w1_val == 2, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x00000200040000;  immval:0x12
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x00000200040000, 0x12, x6, 544, x7)

inst_92:
// rs1_w1_val == 1, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x00000100004000;  immval:0x2
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x00000100004000, 0x2, x6, 552, x7)

inst_93:
// rs1_w1_val == 4294967295, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xffffffffffbfffff;  immval:0x5
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xffffffffffbfffff, 0x5, x6, 560, x7)

inst_94:
// rs1_w0_val == 3758096383, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x00000ddfffffff;  immval:0x1a
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x00000ddfffffff, 0x1a, x6, 568, x7)

inst_95:
// rs1_w0_val == 4160749567, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x080000f7ffffff;  immval:0x16
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x080000f7ffffff, 0x16, x6, 576, x7)

inst_96:
// rs1_w0_val == 4227858431, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x8000000fbffffff;  immval:0x1c
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x8000000fbffffff, 0x1c, x6, 584, x7)

inst_97:
// rs1_w0_val == 4261412863, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xfbfffffffdffffff;  immval:0x1c
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xfbfffffffdffffff, 0x1c, x6, 592, x7)

inst_98:
// rs1_w0_val == 4286578687, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x020000ff7fffff;  immval:0x19
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x020000ff7fffff, 0x19, x6, 600, x7)

inst_99:
// rs1_w0_val == 4292870143, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xffffffffffdfffff;  immval:0x1
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xffffffffffdfffff, 0x1, x6, 608, x7)

inst_100:
// rs1_w0_val == 4293918719, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x00000cffefffff;  immval:0x16
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x00000cffefffff, 0x16, x6, 616, x7)

inst_101:
// rs1_w0_val == 4294443007, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x010000fff7ffff;  immval:0xe
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x010000fff7ffff, 0xe, x6, 624, x7)

inst_102:
// rs1_w0_val == 4294959103, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x00000dffffdfff;  immval:0x2
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x00000dffffdfff, 0x2, x6, 632, x7)

inst_103:
// rs1_w0_val == 4294963199, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xffffdfffffffefff;  immval:0x1f
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xffffdfffffffefff, 0x1f, x6, 640, x7)

inst_104:
// rs1_w0_val == 4294966783, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0x20000000fffffdff;  immval:0x2
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0x20000000fffffdff, 0x2, x6, 648, x7)

inst_105:
// rs1_w0_val == 4294901759, 
// opcode: srli32 ; op1:x30; dest:x31; op1val:0xffffeffffffeffff;  immval:0x11
TEST_IMM_OP( srli32, x31, x30, 0x0000000000000000, 0xffffeffffffeffff, 0x11, x6, 656, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 83*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
