
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmatt instruction of the RISC-V RV64PZicsr extension for the kmatt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmatt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x22, rs2==x26, rd==x22, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h0_val == 8, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs2_h3_val == -9, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h1_val == -129, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h1_val == -1, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h2_val == 32, rs1_h2_val == -9, rs1_h3_val == 8192
// opcode: kmatt ; op1:x22; op2:x26; dest:x22; op1val:0x2000fff7ffff8000;  op2val:0xfff70020ff7f0008
TEST_PKRR_OP(kmatt, x22, x22, x26, 0x0000000000000000, 0x2000fff7ffff8000, 0xfff70020ff7f0008, x22, x2, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x21, rs2==x27, rd==x18, rs1_h3_val == rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h0_val == 2, rs1_h2_val == 512, rs1_h2_val == rs2_h2_val, rs1_h3_val == -21846, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == rs2_h0_val, rs2_h2_val == 512, rs1_h0_val == 2, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == -21846
// opcode: kmatt ; op1:x21; op2:x27; dest:x18; op1val:0xaaaa020000090002;  op2val:0xaaaa020000050002
TEST_PKRR_OP(kmatt, x18, x21, x27, 0x0000000000000000, 0xaaaa020000090002, 0xaaaa020000050002, x21, x2, 16, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x6, rs2==x6, rd==x28, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 8192, rs2_h2_val == -2049, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h3_val == 2048, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == -65, rs1_h3_val == -129, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 2048, rs1_h0_val == -16385
// opcode: kmatt ; op1:x6; op2:x6; dest:x28; op1val:0xff7f2000fffcbfff;  op2val:0x800f7ff0800ffbf
TEST_PKRR_OP(kmatt, x28, x6, x6, 0x0000000000000000, 0xff7f2000fffcbfff, 0x800f7ff0800ffbf, x6, x2, 32, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x17, rs2==x17, rd==x17, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h1_val == -32768, rs1_h3_val == 128
// opcode: kmatt ; op1:x17; op2:x17; dest:x17; op1val:0x8020008000fff6;  op2val:0x800fff8fff6c000
TEST_PKRR_OP(kmatt, x17, x17, x17, 0x0000000000000000, 0x8020008000fff6, 0x800fff8fff6c000, x17, x2, 48, x3)

inst_4:
// rs2 == rd != rs1, rs1==x14, rs2==x10, rd==x10, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h0_val == -33, rs1_h3_val == -32768, rs2_h2_val == -2, rs2_h0_val == 256, rs2_h1_val == 16
// opcode: kmatt ; op1:x14; op2:x10; dest:x10; op1val:0x8000fffac000ffdf;  op2val:0xaaaafffe00100100
TEST_PKRR_OP(kmatt, x10, x14, x10, 0x0000000000000000, 0x8000fffac000ffdf, 0xaaaafffe00100100, x14, x2, 64, x3)

inst_5:
// rs1==x31, rs2==x11, rd==x14, rs1_h1_val == rs2_h1_val, rs2_h0_val == 32, rs1_h1_val == 512, rs2_h2_val == 2048, rs2_h3_val == 128, rs2_h1_val == 512, rs1_h3_val == 16384
// opcode: kmatt ; op1:x31; op2:x11; dest:x14; op1val:0x400000090200fff9;  op2val:0x80080002000020
TEST_PKRR_OP(kmatt, x14, x31, x11, 0x0000000000000000, 0x400000090200fff9, 0x80080002000020, x31, x2, 80, x3)

inst_6:
// rs1==x23, rs2==x21, rd==x24, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -16385, rs1_h1_val == 4096, rs1_h0_val == -8193, rs2_h3_val == -32768, rs1_h3_val == -3
// opcode: kmatt ; op1:x23; op2:x21; dest:x24; op1val:0xfffd00071000dfff;  op2val:0x8000fffebfff3fff
TEST_PKRR_OP(kmatt, x24, x23, x21, 0x0000000000000000, 0xfffd00071000dfff, 0x8000fffebfff3fff, x23, x2, 96, x3)

inst_7:
// rs1==x16, rs2==x20, rd==x1, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h2_val == -16385, rs1_h1_val == 8192, rs2_h3_val == -17, rs1_h0_val == 8192, rs2_h0_val == -1
// opcode: kmatt ; op1:x16; op2:x20; dest:x1; op1val:0xff7f000320002000;  op2val:0xffefbfff0200ffff
TEST_PKRR_OP(kmatt, x1, x16, x20, 0x0000000000000000, 0xff7f000320002000, 0xffefbfff0200ffff, x16, x2, 112, x3)

inst_8:
// rs1==x19, rs2==x1, rd==x23, rs2_h3_val == 21845, rs1_h3_val == 256, rs2_h1_val == 21845, rs2_h0_val == -16385, rs1_h1_val == 256, rs2_h2_val == 1024
// opcode: kmatt ; op1:x19; op2:x1; dest:x23; op1val:0x100fffa01000007;  op2val:0x555504005555bfff
TEST_PKRR_OP(kmatt, x23, x19, x1, 0x0000000000000000, 0x100fffa01000007, 0x555504005555bfff, x19, x2, 128, x3)

inst_9:
// rs1==x27, rs2==x4, rd==x26, rs2_h3_val == 32767, rs2_h0_val == -33, rs1_h0_val == -2049, rs1_h3_val == 32, rs2_h2_val == -129
// opcode: kmatt ; op1:x27; op2:x4; dest:x26; op1val:0x2000053ffff7ff;  op2val:0x7fffff7f0009ffdf
TEST_PKRR_OP(kmatt, x26, x27, x4, 0x0000000000000000, 0x2000053ffff7ff, 0x7fffff7f0009ffdf, x27, x2, 144, x3)

inst_10:
// rs1==x28, rs2==x30, rd==x5, rs2_h3_val == -16385, rs1_h2_val == 4096, rs2_h1_val == 0, rs1_h1_val == 32, rs1_h3_val == -513, rs1_h0_val == 21845, rs2_h2_val == 1
// opcode: kmatt ; op1:x28; op2:x30; dest:x5; op1val:0xfdff100000205555;  op2val:0xbfff00010000fff9
TEST_PKRR_OP(kmatt, x5, x28, x30, 0x0000000000000000, 0xfdff100000205555, 0xbfff00010000fff9, x28, x2, 160, x3)

inst_11:
// rs1==x10, rs2==x13, rd==x11, rs2_h3_val == -8193, rs2_h0_val == 16384, rs2_h2_val == -513, rs1_h1_val == -17, rs1_h0_val == 64
// opcode: kmatt ; op1:x10; op2:x13; dest:x11; op1val:0xaaaafff6ffef0040;  op2val:0xdffffdfffff94000
TEST_PKRR_OP(kmatt, x11, x10, x13, 0x0000000000000000, 0xaaaafff6ffef0040, 0xdffffdfffff94000, x10, x2, 176, x3)

inst_12:
// rs1==x12, rs2==x9, rd==x31, rs2_h3_val == -4097, rs1_h3_val == 512, rs2_h0_val == 21845, rs1_h0_val == 4096, rs2_h2_val == 16384, rs1_h1_val == -4097, rs2_h1_val == 64
// opcode: kmatt ; op1:x12; op2:x9; dest:x31; op1val:0x200fffaefff1000;  op2val:0xefff400000405555
TEST_PKRR_OP(kmatt, x31, x12, x9, 0x0000000000000000, 0x200fffaefff1000, 0xefff400000405555, x12, x2, 192, x3)

inst_13:
// rs1==x25, rs2==x15, rd==x29, rs2_h3_val == -2049, rs1_h3_val == 2, rs1_h1_val == -257, rs1_h2_val == -257, rs2_h1_val == -17
// opcode: kmatt ; op1:x25; op2:x15; dest:x29; op1val:0x02fefffeff3fff;  op2val:0xf7ff0020ffefbfff
TEST_PKRR_OP(kmatt, x29, x25, x15, 0x0000000000000000, 0x02fefffeff3fff, 0xf7ff0020ffefbfff, x25, x2, 208, x3)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_14:
// rs1==x18, rs2==x29, rd==x27, rs2_h3_val == -1025, rs1_h2_val == 64, rs2_h2_val == -1025, rs2_h1_val == 8192
// opcode: kmatt ; op1:x18; op2:x29; dest:x27; op1val:0x0500400200bfff;  op2val:0xfbfffbff20000005
TEST_PKRR_OP(kmatt, x27, x18, x29, 0x0000000000000000, 0x0500400200bfff, 0xfbfffbff20000005, x18, x4, 0, x5)

inst_15:
// rs1==x8, rs2==x31, rd==x6, rs2_h3_val == -513, rs1_h2_val == -1, rs2_h2_val == 4096, rs1_h0_val == 8
// opcode: kmatt ; op1:x8; op2:x31; dest:x6; op1val:0xff7fffffefff0008;  op2val:0xfdff10000009ffff
TEST_PKRR_OP(kmatt, x6, x8, x31, 0x0000000000000000, 0xff7fffffefff0008, 0xfdff10000009ffff, x8, x4, 16, x5)

inst_16:
// rs1==x3, rs2==x14, rd==x8, rs2_h3_val == -257, rs1_h2_val == 16, rs2_h1_val == -32768, rs1_h3_val == 32767, rs1_h0_val == -257
// opcode: kmatt ; op1:x3; op2:x14; dest:x8; op1val:0x7fff0010fff8feff;  op2val:0xfeff04008000c000
TEST_PKRR_OP(kmatt, x8, x3, x14, 0x0000000000000000, 0x7fff0010fff8feff, 0xfeff04008000c000, x3, x4, 32, x5)

inst_17:
// rs1==x13, rs2==x3, rd==x2, rs2_h3_val == -129, rs1_h0_val == -21846, rs1_h2_val == -2049, rs1_h1_val == -8193
// opcode: kmatt ; op1:x13; op2:x3; dest:x2; op1val:0x3ffff7ffdfffaaaa;  op2val:0xff7f3fff0010ffff
TEST_PKRR_OP(kmatt, x2, x13, x3, 0x0000000000000000, 0x3ffff7ffdfffaaaa, 0xff7f3fff0010ffff, x13, x4, 48, x5)

inst_18:
// rs1==x15, rs2==x19, rd==x25, rs2_h3_val == -65, rs2_h2_val == -17, rs1_h0_val == 2048
// opcode: kmatt ; op1:x15; op2:x19; dest:x25; op1val:0xfff6fffa20000800;  op2val:0xffbfffeffff8ffdf
TEST_PKRR_OP(kmatt, x25, x15, x19, 0x0000000000000000, 0xfff6fffa20000800, 0xffbfffeffff8ffdf, x15, x4, 64, x5)

inst_19:
// rs1==x7, rs2==x18, rd==x15, rs2_h3_val == -33, rs1_h2_val == -33, rs2_h0_val == -9, rs1_h0_val == 0
// opcode: kmatt ; op1:x7; op2:x18; dest:x15; op1val:0xff7fffdffffc0000;  op2val:0xffdffffc3ffffff7
TEST_PKRR_OP(kmatt, x15, x7, x18, 0x0000000000000000, 0xff7fffdffffc0000, 0xffdffffc3ffffff7, x7, x4, 80, x5)

inst_20:
// rs1==x11, rs2==x12, rd==x20, rs2_h3_val == -5, rs1_h2_val == 128, rs2_h2_val == 8, rs1_h3_val == -1, rs2_h0_val == -129
// opcode: kmatt ; op1:x11; op2:x12; dest:x20; op1val:0xffff0080feff0008;  op2val:0xfffb0008fff9ff7f
TEST_PKRR_OP(kmatt, x20, x11, x12, 0x0000000000000000, 0xffff0080feff0008, 0xfffb0008fff9ff7f, x11, x4, 96, x5)

inst_21:
// rs1==x1, rs2==x7, rd==x16, rs2_h3_val == -3, rs1_h0_val == 1024, rs2_h2_val == -3, rs2_h0_val == 1024, rs1_h2_val == -3, rs1_h1_val == -9
// opcode: kmatt ; op1:x1; op2:x7; dest:x16; op1val:0xfff8fffdfff70400;  op2val:0xfffdfffdbfff0400
TEST_PKRR_OP(kmatt, x16, x1, x7, 0x0000000000000000, 0xfff8fffdfff70400, 0xfffdfffdbfff0400, x1, x4, 112, x5)

inst_22:
// rs1==x0, rs2==x22, rd==x19, rs2_h3_val == -2, 
// opcode: kmatt ; op1:x0; op2:x22; dest:x19; op1val:0x7ffffff82000ffdf;  op2val:0xfffe000500090003
TEST_PKRR_OP(kmatt, x19, x0, x22, 0x0000000000000000, 0x7ffffff82000ffdf, 0xfffe000500090003, x0, x4, 128, x5)

inst_23:
// rs1==x24, rs2==x23, rd==x0, rs2_h3_val == 16384, rs1_h2_val == 0, rs2_h2_val == 21845, rs2_h0_val == 128
// opcode: kmatt ; op1:x24; op2:x23; dest:x0; op1val:0x200000008000fff9;  op2val:0x4000555500100080
TEST_PKRR_OP(kmatt, x0, x24, x23, 0x0000000000000000, 0x200000008000fff9, 0x4000555500100080, x24, x4, 144, x5)

inst_24:
// rs1==x20, rs2==x28, rd==x9, rs2_h3_val == 8192, rs2_h1_val == 256, rs1_h1_val == 32767, rs1_h3_val == 8
// opcode: kmatt ; op1:x20; op2:x28; dest:x9; op1val:0x08c0007fff0003;  op2val:0x200004000100fff9
TEST_PKRR_OP(kmatt, x9, x20, x28, 0x0000000000000000, 0x08c0007fff0003, 0x200004000100fff9, x20, x4, 160, x5)

inst_25:
// rs1==x2, rs2==x25, rd==x7, rs2_h3_val == 4096, rs1_h3_val == 64, rs2_h1_val == -1025, rs2_h0_val == -4097, rs1_h0_val == -4097, rs1_h1_val == -33
// opcode: kmatt ; op1:x2; op2:x25; dest:x7; op1val:0x40f7ffffdfefff;  op2val:0x1000ff7ffbffefff
TEST_PKRR_OP(kmatt, x7, x2, x25, 0x0000000000000000, 0x40f7ffffdfefff, 0x1000ff7ffbffefff, x2, x4, 176, x5)

inst_26:
// rs1==x26, rs2==x2, rd==x21, rs2_h3_val == 1024, rs2_h0_val == 16, rs1_h3_val == -16385, rs1_h2_val == 2, rs1_h0_val == 512
// opcode: kmatt ; op1:x26; op2:x2; dest:x21; op1val:0xbfff000200060200;  op2val:0x4000800ffef0010
TEST_PKRR_OP(kmatt, x21, x26, x2, 0x0000000000000000, 0xbfff000200060200, 0x4000800ffef0010, x26, x4, 192, x5)

inst_27:
// rs1==x5, rs2==x16, rd==x30, rs2_h3_val == 512, rs1_h0_val == -65, rs2_h0_val == -17, rs2_h2_val == -9
// opcode: kmatt ; op1:x5; op2:x16; dest:x30; op1val:0xfff9fff91000ffbf;  op2val:0x200fff70200ffef
TEST_PKRR_OP(kmatt, x30, x5, x16, 0x0000000000000000, 0xfff9fff91000ffbf, 0x200fff70200ffef, x5, x4, 208, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_28:
// rs1==x30, rs2==x5, rd==x4, rs2_h3_val == 256, rs2_h1_val == -5, rs1_h3_val == -5
// opcode: kmatt ; op1:x30; op2:x5; dest:x4; op1val:0xfffb10000003fff9;  op2val:0x1004000fffb0100
TEST_PKRR_OP(kmatt, x4, x30, x5, 0x0000000000000000, 0xfffb10000003fff9, 0x1004000fffb0100, x30, x1, 0, x2)

inst_29:
// rs1==x9, rs2==x24, rd==x13, rs2_h3_val == 64, rs1_h3_val == -2049
// opcode: kmatt ; op1:x9; op2:x24; dest:x13; op1val:0xf7fffff7c0000000;  op2val:0x4055550005ff7f
TEST_PKRR_OP(kmatt, x13, x9, x24, 0x0000000000000000, 0xf7fffff7c0000000, 0x4055550005ff7f, x9, x1, 16, x2)

inst_30:
// rs1==x29, rs2==x8, rd==x3, rs2_h3_val == 32, rs2_h2_val == -4097, rs2_h1_val == -65, rs2_h0_val == 1, rs1_h0_val == 32767
// opcode: kmatt ; op1:x29; op2:x8; dest:x3; op1val:0xc000f7ffffdf7fff;  op2val:0x20efffffbf0001
TEST_PKRR_OP(kmatt, x3, x29, x8, 0x0000000000000000, 0xc000f7ffffdf7fff, 0x20efffffbf0001, x29, x1, 32, x2)

inst_31:
// rs1==x4, rs2==x0, rd==x12, rs2_h3_val == 16, rs2_h0_val == -8193, rs2_h1_val == -2, rs1_h0_val == 1, rs1_h2_val == 32
// opcode: kmatt ; op1:x4; op2:x0; dest:x12; op1val:0xfffc002010000001;  op2val:0x100006fffedfff
TEST_PKRR_OP(kmatt, x12, x4, x0, 0x0000000000000000, 0xfffc002010000001, 0x100006fffedfff, x4, x1, 48, x2)

inst_32:
// rs2_h3_val == 8, rs1_h3_val == -8193, rs2_h0_val == -32768
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xdffffeff01001000;  op2val:0x085555fff68000
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xdffffeff01001000, 0x085555fff68000, x30, x1, 64, x2)

inst_33:
// rs2_h3_val == 4, rs1_h2_val == -129
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffcff7ffff6feff;  op2val:0x04fffc80000002
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xfffcff7ffff6feff, 0x04fffc80000002, x30, x1, 80, x2)

inst_34:
// rs2_h3_val == 2, rs1_h0_val == -9
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x090010fefffff7;  op2val:0x02fdff8000fffa
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x090010fefffff7, 0x02fdff8000fffa, x30, x1, 96, x2)

inst_35:
// rs2_h3_val == 1, rs1_h3_val == 1024, rs2_h1_val == 4096
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x40000022000fff9;  op2val:0x01efff10000100
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x40000022000fff9, 0x01efff10000100, x30, x1, 112, x2)

inst_36:
// rs1_h1_val == -5, rs2_h0_val == -257, rs1_h2_val == 32767
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xbfff7ffffffb0003;  op2val:0xfdff00200006feff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xbfff7ffffffb0003, 0xfdff00200006feff, x30, x1, 128, x2)

inst_37:
// rs1_h1_val == -3, rs2_h2_val == 64, rs1_h2_val == 2048
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0800fffd0001;  op2val:0xffef0040fffaffbf
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xfffd0800fffd0001, 0xffef0040fffaffbf, x30, x1, 144, x2)

inst_38:
// rs1_h1_val == -2, rs2_h1_val == 1, rs1_h2_val == -513
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fdfffffefeff;  op2val:0xfffbfbff0001efff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xfff8fdfffffefeff, 0xfffbfbff0001efff, x30, x1, 160, x2)

inst_39:
// rs1_h1_val == 16384, rs2_h1_val == -21846, rs2_h0_val == 8192, rs2_h2_val == 4, rs1_h0_val == 128
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xdfff000540000080;  op2val:0xfffa0004aaaa2000
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xdfff000540000080, 0xfffa0004aaaa2000, x30, x1, 176, x2)

inst_40:
// rs1_h1_val == 2048, rs1_h3_val == 21845, rs2_h0_val == 512
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x5555fff608000001;  op2val:0x200040000060200
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x5555fff608000001, 0x200040000060200, x30, x1, 192, x2)

inst_41:
// rs1_h1_val == 1024, rs1_h3_val == -257, rs2_h0_val == 2048, rs2_h1_val == 16384, rs1_h2_val == -21846
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfeffaaaa04000000;  op2val:0x1000c00040000800
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xfeffaaaa04000000, 0x1000c00040000800, x30, x1, 208, x2)

inst_42:
// rs1_h1_val == 128, rs1_h3_val == 0
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x00020000808000;  op2val:0x07080020000003
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x00020000808000, 0x07080020000003, x30, x1, 224, x2)

inst_43:
// rs1_h1_val == 64, rs2_h1_val == 4, rs1_h2_val == 1, rs2_h2_val == 0
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xff7f00010040bfff;  op2val:0x10000000040001
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xff7f00010040bfff, 0x10000000040001, x30, x1, 240, x2)

inst_44:
// rs1_h1_val == 16, rs1_h3_val == 2048
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x800000700100003;  op2val:0xfffebfff0006efff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x800000700100003, 0xfffebfff0006efff, x30, x1, 256, x2)

inst_45:
// rs1_h1_val == 8, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x2000fff60008c000;  op2val:0xfffc0006fff90200
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x2000fff60008c000, 0xfffc0006fff90200, x30, x1, 272, x2)

inst_46:
// rs1_h1_val == 4, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffdff7f0004fffc;  op2val:0xffefffef0007c000
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xfffdff7f0004fffc, 0xffefffef0007c000, x30, x1, 288, x2)

inst_47:
// rs1_h1_val == 2, rs2_h1_val == -1, rs1_h0_val == 16384
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x00fff600024000;  op2val:0x40000008ffff0007
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x00fff600024000, 0x40000008ffff0007, x30, x1, 304, x2)

inst_48:
// rs1_h1_val == 1, rs1_h3_val == 4096
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x1000000300015555;  op2val:0xff7f0007fffbefff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x1000000300015555, 0xff7f0007fffbefff, x30, x1, 320, x2)

inst_49:
// rs1_h1_val == 0, rs1_h0_val == -513
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xc000fff70000fdff;  op2val:0x8010002000feff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xc000fff70000fdff, 0x8010002000feff, x30, x1, 336, x2)

inst_50:
// rs1_h0_val == -1025, rs2_h1_val == 2, rs1_h2_val == -1025
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x07fbff0004fbff;  op2val:0x1000f7ff00020006
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x07fbff0004fbff, 0x1000f7ff00020006, x30, x1, 352, x2)

inst_51:
// rs1_h0_val == -129, rs1_h3_val == 4
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x04fff6feffff7f;  op2val:0xefff00405555ffbf
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x04fff6feffff7f, 0xefff00405555ffbf, x30, x1, 368, x2)

inst_52:
// rs1_h0_val == -17, rs2_h0_val == 4096, rs2_h2_val == 2
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff9ffff0002ffef;  op2val:0x7fff0002fffb1000
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xfff9ffff0002ffef, 0x7fff0002fffb1000, x30, x1, 384, x2)

inst_53:
// rs1_h0_val == -5, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x080001effffffb;  op2val:0xfff9efff00040009
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x080001effffffb, 0xfff9efff00040009, x30, x1, 400, x2)

inst_54:
// rs1_h0_val == -3, rs1_h3_val == -1025
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0003fffdfffd;  op2val:0x05400000108000
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xfbff0003fffdfffd, 0x05400000108000, x30, x1, 416, x2)

inst_55:
// rs1_h0_val == -2, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x09ffdfdffffffe;  op2val:0xc0005555fff6fffc
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x09ffdfdffffffe, 0xc0005555fff6fffc, x30, x1, 432, x2)

inst_56:
// rs1_h0_val == 256, rs2_h0_val == -513
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x2007fff40000100;  op2val:0x033ffffffcfdff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x2007fff40000100, 0x033ffffffcfdff, x30, x1, 448, x2)

inst_57:
// rs1_h0_val == 32, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x4000000600040020;  op2val:0xffbfff7f00104000
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x4000000600040020, 0xffbfff7f00104000, x30, x1, 464, x2)

inst_58:
// rs1_h0_val == 16, rs2_h0_val == 4
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x200000200400010;  op2val:0xfffc004000100004
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x200000200400010, 0xfffc004000100004, x30, x1, 480, x2)

inst_59:
// rs1_h0_val == 4, rs1_h3_val == 1, rs2_h1_val == 8
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x01fdff00080004;  op2val:0xf7ff000600080010
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x01fdff00080004, 0xf7ff000600080010, x30, x1, 496, x2)

inst_60:
// rs1_h0_val == -1, rs2_h1_val == -3, rs2_h0_val == 0, rs2_h2_val == 32767
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x09fffd0001ffff;  op2val:0xfffc7ffffffd0000
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x09fffd0001ffff, 0xfffc7ffffffd0000, x30, x1, 512, x2)

inst_61:
// rs2_h3_val == 0, rs2_h2_val == -33, rs1_h1_val == -16385
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x077fffbffffffe;  op2val:0x00ffdfaaaa0003
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x077fffbffffffe, 0x00ffdfaaaa0003, x30, x1, 528, x2)

inst_62:
// rs2_h0_val == -21846, rs1_h2_val == -16385
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x80bfff80002000;  op2val:0x4000fdff0000aaaa
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x80bfff80002000, 0x4000fdff0000aaaa, x30, x1, 544, x2)

inst_63:
// rs2_h0_val == 32767, rs1_h1_val == -1025
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0010fbfffffd;  op2val:0xfffb000440007fff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xf7ff0010fbfffffd, 0xfffb000440007fff, x30, x1, 560, x2)

inst_64:
// rs2_h0_val == -2049, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfdffff7f00078000;  op2val:0xefffffef0800f7ff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xfdffff7f00078000, 0xefffffef0800f7ff, x30, x1, 576, x2)

inst_65:
// rs2_h0_val == -1025, rs2_h2_val == -65
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffdfff60800;  op2val:0xfff7ffbf3ffffbff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xfff9fffdfff60800, 0xfff7ffbf3ffffbff, x30, x1, 592, x2)

inst_66:
// rs2_h0_val == -5, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x0300804000fffb;  op2val:0x20fff7bffffffb
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x0300804000fffb, 0x20fff7bffffffb, x30, x1, 608, x2)

inst_67:
// rs2_h0_val == -3, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x0310000020efff;  op2val:0x0800080040fffd
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x0310000020efff, 0x0800080040fffd, x30, x1, 624, x2)

inst_68:
// rs2_h0_val == -2, rs1_h2_val == 21845
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x08555508000004;  op2val:0x070006fff8fffe
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x08555508000004, 0x070006fff8fffe, x30, x1, 640, x2)

inst_69:
// rs2_h0_val == 64, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x8020000040fffa;  op2val:0xffbfff7f10000040
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x8020000040fffa, 0xffbfff7f10000040, x30, x1, 656, x2)

inst_70:
// rs1_h3_val == -4097, rs2_h1_val == -513
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffabffffeff;  op2val:0xfff8fff8fdfffff9
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xeffffffabffffeff, 0xfff8fff8fdfffff9, x30, x1, 672, x2)

inst_71:
// rs1_h3_val == -65, rs1_h1_val == 21845
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffbfff7f55550000;  op2val:0x08fffdfff90005
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xffbfff7f55550000, 0x08fffdfff90005, x30, x1, 688, x2)

inst_72:
// rs1_h3_val == -33, rs2_h2_val == 256
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffdffdffeffffff7;  op2val:0x1000010000052000
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xffdffdffeffffff7, 0x1000010000052000, x30, x1, 704, x2)

inst_73:
// rs1_h3_val == -17, rs1_h2_val == -8193
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffefdfff00037fff;  op2val:0xffeffffcff7ffffd
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xffefdfff00037fff, 0xffeffffcff7ffffd, x30, x1, 720, x2)

inst_74:
// rs1_h3_val == -9, rs1_h2_val == -17
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffefdfff0000;  op2val:0xfffcff7f0003bfff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xfff7ffefdfff0000, 0xfffcff7f0003bfff, x30, x1, 736, x2)

inst_75:
// rs1_h3_val == -2, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffec00000400800;  op2val:0xaaaafffd3fff4000
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xfffec00000400800, 0xaaaafffd3fff4000, x30, x1, 752, x2)

inst_76:
// rs2_h3_val == -1, rs1_h2_val == -32768
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfbff80007ffffdff;  op2val:0xffffff7f01000100
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xfbff80007ffffdff, 0xffffff7f01000100, x30, x1, 768, x2)

inst_77:
// rs2_h2_val == -21846, rs1_h2_val == 16384, rs2_h1_val == 1024
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x80004000fff7feff;  op2val:0x02aaaa04001000
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x80004000fff7feff, 0x02aaaa04001000, x30, x1, 784, x2)

inst_78:
// rs2_h2_val == -8193, rs1_h2_val == -2
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x08fffe2000fff8;  op2val:0xaaaadfff04007fff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x08fffe2000fff8, 0xaaaadfff04007fff, x30, x1, 800, x2)

inst_79:
// rs2_h2_val == -257, rs1_h1_val == -2049
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfdfff7ff0400;  op2val:0xfbfffeff8000ffbf
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xfffcfdfff7ff0400, 0xfbfffeff8000ffbf, x30, x1, 816, x2)

inst_80:
// rs1_h3_val == 16, rs1_h1_val == -65
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x10ffefffbffbff;  op2val:0xefff000400050004
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x10ffefffbffbff, 0xefff000400050004, x30, x1, 832, x2)

inst_81:
// rs2_h2_val == -5, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffff940000008;  op2val:0x05fffbfffabfff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xff7ffff940000008, 0x05fffbfffabfff, x30, x1, 848, x2)

inst_82:
// rs2_h2_val == -32768, rs2_h1_val == 32767
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xefff3fff00208000;  op2val:0x8080007ffffffd
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xefff3fff00208000, 0x8080007ffffffd, x30, x1, 864, x2)

inst_83:
// rs2_h2_val == 8192, rs1_h1_val == -21846
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x200040aaaa4000;  op2val:0xfffe20008000ffbf
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x200040aaaa4000, 0xfffe20008000ffbf, x30, x1, 880, x2)

inst_84:
// rs1_h2_val == -4097, rs2_h1_val == -2049
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x04efff00050020;  op2val:0x2000fffaf7ff0001
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x04efff00050020, 0x2000fffaf7ff0001, x30, x1, 896, x2)

inst_85:
// rs2_h2_val == 128, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfdff002000400010;  op2val:0x090080fffc0100
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xfdff002000400010, 0x090080fffc0100, x30, x1, 912, x2)

inst_86:
// rs1_h2_val == -65, rs2_h2_val == 16, rs2_h1_val == 32
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffbffff62000;  op2val:0xc000001000200002
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xffbfffbffff62000, 0xc000001000200002, x30, x1, 928, x2)

inst_87:
// rs1_h2_val == -5, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffb55550004;  op2val:0xfffdfff80006ffef
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xffbffffb55550004, 0xfffdfff80006ffef, x30, x1, 944, x2)

inst_88:
// rs2_h2_val == -1, rs1_h2_val == 8
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0008f7ff0800;  op2val:0xc000ffff20005555
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xf7ff0008f7ff0800, 0xc000ffff20005555, x30, x1, 960, x2)

inst_89:
// rs1_h2_val == 1024, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x010400aaaaffff;  op2val:0x05ffdf40003fff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x010400aaaaffff, 0x05ffdf40003fff, x30, x1, 976, x2)

inst_90:
// rs2_h1_val == -8193, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff9ff7ff7ff5555;  op2val:0x045555dffffffb
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xfff9ff7ff7ff5555, 0x045555dffffffb, x30, x1, 992, x2)

inst_91:
// rs2_h1_val == -4097, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x05800055551000;  op2val:0x40fff8efffdfff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x05800055551000, 0x40fff8efffdfff, x30, x1, 1008, x2)

inst_92:
// rs1_h2_val == 256, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff80100fff8ffef;  op2val:0x2000fffe0020fff8
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xfff80100fff8ffef, 0x2000fffe0020fff8, x30, x1, 1024, x2)

inst_93:
// rs2_h1_val == 128, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xc000bfff00058000;  op2val:0xaaaafffc0080aaaa
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xc000bfff00058000, 0xaaaafffc0080aaaa, x30, x1, 1040, x2)

inst_94:
// rs1_h1_val == -513, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0003fdff0400;  op2val:0xfffa00020003aaaa
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x3fff0003fdff0400, 0xfffa00020003aaaa, x30, x1, 1056, x2)

inst_95:
// rs2_h1_val == -257, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x40fff9fbff0010;  op2val:0x3ffffff9fefff7ff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x40fff9fbff0010, 0x3ffffff9fefff7ff, x30, x1, 1072, x2)

inst_96:
// rs1_h1_val == -129, rs1_h2_val == 4
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfff80004ff7ffff7;  op2val:0x4000fbff04000004
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xfff80004ff7ffff7, 0x4000fbff04000004, x30, x1, 1088, x2)

inst_97:
// rs2_h1_val == -33, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x101000ff7fffbf;  op2val:0xffbf4000ffdfaaaa
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x101000ff7fffbf, 0xffbf4000ffdfaaaa, x30, x1, 1104, x2)

inst_98:
// rs2_h1_val == -9, 
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x1003fffbfff2000;  op2val:0x80000006fff7fffa
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x1003fffbfff2000, 0x80000006fff7fffa, x30, x1, 1120, x2)

inst_99:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 8192, rs2_h2_val == -2049, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h3_val == 2048, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == -65, rs1_h3_val == -129, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 2048, rs1_h0_val == -16385
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xff7f2000fffcbfff;  op2val:0x800f7ff0800ffbf
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xff7f2000fffcbfff, 0x800f7ff0800ffbf, x30, x1, 1136, x2)

inst_100:
// rs2_h3_val == 16384, rs1_h2_val == 0, rs2_h2_val == 21845, rs2_h0_val == 128
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0x200000008000fff9;  op2val:0x4000555500100080
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0x200000008000fff9, 0x4000555500100080, x30, x1, 1152, x2)

inst_101:
// rs2_h3_val == 16, rs2_h0_val == -8193, rs2_h1_val == -2, rs1_h0_val == 1, rs1_h2_val == 32
// opcode: kmatt ; op1:x30; op2:x29; dest:x31; op1val:0xfffc002010000001;  op2val:0x100006fffedfff
TEST_PKRR_OP(kmatt, x31, x30, x29, 0x0000000000000000, 0xfffc002010000001, 0x100006fffedfff, x30, x1, 1168, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 148*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
