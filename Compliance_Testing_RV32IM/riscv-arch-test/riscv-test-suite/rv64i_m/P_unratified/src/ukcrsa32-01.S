
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukcrsa32 instruction of the RISC-V RV64PZicsr extension for the ukcrsa32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukcrsa32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1 == rd != rs2, rs1==x30, rs2==x2, rd==x30, rs1_w0_val == 0, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 2048, rs2_w0_val == 0
// opcode: ukcrsa32 ; op1:x30; op2:x2; dest:x30; op1val:0x00000d00000000;  op2val:0x00080000000000
TEST_PKRR_OP(ukcrsa32, x30, x30, x2, 0x0000000000000000, 0x00000d00000000, 0x00080000000000, x30, x9, 0, x11)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x0, rd==x17, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 4294966271, rs2_w0_val == 268435456, rs2_w1_val == 65536, rs1_w1_val == 65536
// opcode: ukcrsa32 ; op1:x31; op2:x0; dest:x17; op1val:0x010000fffffbff;  op2val:0x01000010000000
TEST_PKRR_OP(ukcrsa32, x17, x31, x0, 0x0000000000000000, 0x010000fffffbff, 0x01000010000000, x31, x9, 16, x11)

inst_2:
// rs1 == rs2 != rd, rs1==x22, rs2==x22, rd==x28, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 4227858431, rs1_w0_val == 4227858431, rs1_w1_val == 4294967294, rs2_w1_val == 4294967295
// opcode: ukcrsa32 ; op1:x22; op2:x22; dest:x28; op1val:0xfffffffefbffffff;  op2val:0xfffffffffbffffff
TEST_PKRR_OP(ukcrsa32, x28, x22, x22, 0x0000000000000000, 0xfffffffefbffffff, 0xfffffffffbffffff, x22, x9, 32, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x5, rs2==x5, rd==x5, rs2_w1_val == 2863311530, rs1_w0_val == 33554432, rs1_w1_val == 67108864, rs2_w0_val == 4096
// opcode: ukcrsa32 ; op1:x5; op2:x5; dest:x5; op1val:0x400000002000000;  op2val:0xaaaaaaaa00001000
TEST_PKRR_OP(ukcrsa32, x5, x5, x5, 0x0000000000000000, 0x400000002000000, 0xaaaaaaaa00001000, x5, x9, 48, x11)

inst_4:
// rs2 == rd != rs1, rs1==x17, rs2==x27, rd==x27, rs2_w1_val == 1431655765, rs1_w0_val == 4294967293, rs1_w1_val == 2048, rs2_w0_val == 4292870143
// opcode: ukcrsa32 ; op1:x17; op2:x27; dest:x27; op1val:0x000800fffffffd;  op2val:0x55555555ffdfffff
TEST_PKRR_OP(ukcrsa32, x27, x17, x27, 0x0000000000000000, 0x000800fffffffd, 0x55555555ffdfffff, x17, x9, 64, x11)

inst_5:
// rs1==x18, rs2==x23, rd==x4, rs2_w1_val == 2147483647, rs2_w0_val == 4, rs1_w0_val == 2147483648, rs1_w1_val == 4294836223
// opcode: ukcrsa32 ; op1:x18; op2:x23; dest:x4; op1val:0xfffdffff80000000;  op2val:0x7fffffff00000004
TEST_PKRR_OP(ukcrsa32, x4, x18, x23, 0x0000000000000000, 0xfffdffff80000000, 0x7fffffff00000004, x18, x9, 80, x11)

inst_6:
// rs1==x3, rs2==x31, rd==x29, rs2_w1_val == 3221225471, rs1_w0_val == 4294901759, rs2_w0_val == 536870912, rs1_w1_val == 4294967039
// opcode: ukcrsa32 ; op1:x3; op2:x31; dest:x29; op1val:0xfffffefffffeffff;  op2val:0xbfffffff20000000
TEST_PKRR_OP(ukcrsa32, x29, x3, x31, 0x0000000000000000, 0xfffffefffffeffff, 0xbfffffff20000000, x3, x9, 96, x11)

inst_7:
// rs1==x8, rs2==x24, rd==x18, rs2_w1_val == 3758096383, rs1_w1_val == 536870912, rs1_w0_val == 1431655765, rs2_w0_val == 4294967287
// opcode: ukcrsa32 ; op1:x8; op2:x24; dest:x18; op1val:0x2000000055555555;  op2val:0xdffffffffffffff7
TEST_PKRR_OP(ukcrsa32, x18, x8, x24, 0x0000000000000000, 0x2000000055555555, 0xdffffffffffffff7, x8, x9, 112, x11)

inst_8:
// rs1==x29, rs2==x18, rd==x15, rs2_w1_val == 4026531839, rs2_w0_val == 4294967039, rs1_w0_val == 4026531839
// opcode: ukcrsa32 ; op1:x29; op2:x18; dest:x15; op1val:0x4000000efffffff;  op2val:0xeffffffffffffeff
TEST_PKRR_OP(ukcrsa32, x15, x29, x18, 0x0000000000000000, 0x4000000efffffff, 0xeffffffffffffeff, x29, x9, 128, x11)

inst_9:
// rs1==x7, rs2==x17, rd==x1, rs2_w1_val == 4160749567, rs1_w0_val == 4294966783, rs2_w0_val == 65536, rs1_w1_val == 1024
// opcode: ukcrsa32 ; op1:x7; op2:x17; dest:x1; op1val:0x000400fffffdff;  op2val:0xf7ffffff00010000
TEST_PKRR_OP(ukcrsa32, x1, x7, x17, 0x0000000000000000, 0x000400fffffdff, 0xf7ffffff00010000, x7, x9, 144, x11)

inst_10:
// rs1==x10, rs2==x6, rd==x13, rs2_w1_val == 4227858431, rs2_w0_val == 256, rs1_w0_val == 1
// opcode: ukcrsa32 ; op1:x10; op2:x6; dest:x13; op1val:0x00001300000001;  op2val:0xfbffffff00000100
TEST_PKRR_OP(ukcrsa32, x13, x10, x6, 0x0000000000000000, 0x00001300000001, 0xfbffffff00000100, x10, x9, 160, x11)

inst_11:
// rs1==x13, rs2==x19, rd==x0, rs2_w1_val == 4261412863, rs1_w1_val == 4227858431, rs1_w0_val == 64
// opcode: ukcrsa32 ; op1:x13; op2:x19; dest:x0; op1val:0xfbffffff00000040;  op2val:0xfdffffff0000000d
TEST_PKRR_OP(ukcrsa32, x0, x13, x19, 0x0000000000000000, 0xfbffffff00000040, 0xfdffffff0000000d, x13, x9, 176, x11)

inst_12:
// rs1==x24, rs2==x14, rd==x22, rs2_w1_val == 4278190079, rs1_w1_val == 16, rs2_w0_val == 8192
// opcode: ukcrsa32 ; op1:x24; op2:x14; dest:x22; op1val:0x00001000000001;  op2val:0xfeffffff00002000
TEST_PKRR_OP(ukcrsa32, x22, x24, x14, 0x0000000000000000, 0x00001000000001, 0xfeffffff00002000, x24, x9, 192, x11)

inst_13:
// rs1==x19, rs2==x4, rd==x2, rs2_w1_val == 4286578687, rs1_w0_val == 4286578687, rs1_w1_val == 4294967293
// opcode: ukcrsa32 ; op1:x19; op2:x4; dest:x2; op1val:0xfffffffdff7fffff;  op2val:0xff7fffff0000000e
TEST_PKRR_OP(ukcrsa32, x2, x19, x4, 0x0000000000000000, 0xfffffffdff7fffff, 0xff7fffff0000000e, x19, x9, 208, x11)

inst_14:
// rs1==x26, rs2==x3, rd==x25, rs2_w1_val == 4290772991, rs2_w0_val == 16777216, rs1_w0_val == 3758096383, rs1_w1_val == 4293918719
// opcode: ukcrsa32 ; op1:x26; op2:x3; dest:x25; op1val:0xffefffffdfffffff;  op2val:0xffbfffff01000000
TEST_PKRR_OP(ukcrsa32, x25, x26, x3, 0x0000000000000000, 0xffefffffdfffffff, 0xffbfffff01000000, x26, x9, 224, x11)

inst_15:
// rs1==x16, rs2==x13, rd==x14, rs2_w1_val == 4292870143, rs2_w0_val == 67108864, rs1_w1_val == 4096, rs1_w0_val == 4294965247
// opcode: ukcrsa32 ; op1:x16; op2:x13; dest:x14; op1val:0x001000fffff7ff;  op2val:0xffdfffff04000000
TEST_PKRR_OP(ukcrsa32, x14, x16, x13, 0x0000000000000000, 0x001000fffff7ff, 0xffdfffff04000000, x16, x9, 240, x11)

inst_16:
// rs1==x25, rs2==x20, rd==x19, rs2_w1_val == 4293918719, rs2_w0_val == 512, rs1_w0_val == 8192
// opcode: ukcrsa32 ; op1:x25; op2:x20; dest:x19; op1val:0x00000e00002000;  op2val:0xffefffff00000200
TEST_PKRR_OP(ukcrsa32, x19, x25, x20, 0x0000000000000000, 0x00000e00002000, 0xffefffff00000200, x25, x9, 256, x13)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_17:
// rs1==x28, rs2==x1, rd==x16, rs2_w1_val == 4294443007, rs2_w0_val == 64, rs1_w1_val == 1
// opcode: ukcrsa32 ; op1:x28; op2:x1; dest:x16; op1val:0x00000155555555;  op2val:0xfff7ffff00000040
TEST_PKRR_OP(ukcrsa32, x16, x28, x1, 0x0000000000000000, 0x00000155555555, 0xfff7ffff00000040, x28, x5, 0, x13)

inst_18:
// rs1==x20, rs2==x15, rd==x3, rs2_w1_val == 4294705151, rs2_w0_val == 4294705151, rs1_w0_val == 512, rs1_w1_val == 4294966271
// opcode: ukcrsa32 ; op1:x20; op2:x15; dest:x3; op1val:0xfffffbff00000200;  op2val:0xfffbfffffffbffff
TEST_PKRR_OP(ukcrsa32, x3, x20, x15, 0x0000000000000000, 0xfffffbff00000200, 0xfffbfffffffbffff, x20, x5, 16, x13)

inst_19:
// rs1==x12, rs2==x25, rd==x20, rs2_w1_val == 4294836223, rs2_w0_val == 32768, rs1_w1_val == 4261412863
// opcode: ukcrsa32 ; op1:x12; op2:x25; dest:x20; op1val:0xfdffffff00000000;  op2val:0xfffdffff00008000
TEST_PKRR_OP(ukcrsa32, x20, x12, x25, 0x0000000000000000, 0xfdffffff00000000, 0xfffdffff00008000, x12, x5, 32, x13)

inst_20:
// rs1==x27, rs2==x26, rd==x6, rs2_w1_val == 4294901759, rs2_w0_val == 4294966271, rs1_w1_val == 512
// opcode: ukcrsa32 ; op1:x27; op2:x26; dest:x6; op1val:0x0002000000000c;  op2val:0xfffefffffffffbff
TEST_PKRR_OP(ukcrsa32, x6, x27, x26, 0x0000000000000000, 0x0002000000000c, 0xfffefffffffffbff, x27, x5, 48, x13)

inst_21:
// rs1==x14, rs2==x11, rd==x26, rs2_w1_val == 4294934527, rs1_w1_val == 4294967295
// opcode: ukcrsa32 ; op1:x14; op2:x11; dest:x26; op1val:0xffffffff00000009;  op2val:0xffff7ffffffbffff
TEST_PKRR_OP(ukcrsa32, x26, x14, x11, 0x0000000000000000, 0xffffffff00000009, 0xffff7ffffffbffff, x14, x5, 64, x13)

inst_22:
// rs1==x9, rs2==x30, rd==x10, rs2_w1_val == 4294950911, rs2_w0_val == 33554432, rs1_w0_val == 4294967263
// opcode: ukcrsa32 ; op1:x9; op2:x30; dest:x10; op1val:0x000006ffffffdf;  op2val:0xffffbfff02000000
TEST_PKRR_OP(ukcrsa32, x10, x9, x30, 0x0000000000000000, 0x000006ffffffdf, 0xffffbfff02000000, x9, x5, 80, x13)

inst_23:
// rs1==x21, rs2==x16, rd==x23, rs2_w1_val == 4294959103, rs1_w0_val == 8388608, rs2_w0_val == 4293918719
// opcode: ukcrsa32 ; op1:x21; op2:x16; dest:x23; op1val:0x00000d00800000;  op2val:0xffffdfffffefffff
TEST_PKRR_OP(ukcrsa32, x23, x21, x16, 0x0000000000000000, 0x00000d00800000, 0xffffdfffffefffff, x21, x5, 96, x13)

inst_24:
// rs1==x23, rs2==x9, rd==x12, rs2_w1_val == 4294963199, rs1_w1_val == 1073741824, rs2_w0_val == 2147483647
// opcode: ukcrsa32 ; op1:x23; op2:x9; dest:x12; op1val:0x4000000000000200;  op2val:0xffffefff7fffffff
TEST_PKRR_OP(ukcrsa32, x12, x23, x9, 0x0000000000000000, 0x4000000000000200, 0xffffefff7fffffff, x23, x5, 112, x13)

inst_25:
// rs1==x1, rs2==x21, rd==x9, rs2_w1_val == 4294965247, rs1_w0_val == 4194304, rs2_w0_val == 4294963199
// opcode: ukcrsa32 ; op1:x1; op2:x21; dest:x9; op1val:0x00000d00400000;  op2val:0xfffff7ffffffefff
TEST_PKRR_OP(ukcrsa32, x9, x1, x21, 0x0000000000000000, 0x00000d00400000, 0xfffff7ffffffefff, x1, x5, 128, x13)

inst_26:
// rs1==x2, rs2==x7, rd==x24, rs2_w1_val == 4294966271, rs1_w0_val == 2863311530, rs1_w1_val == 134217728
// opcode: ukcrsa32 ; op1:x2; op2:x7; dest:x24; op1val:0x8000000aaaaaaaa;  op2val:0xfffffbff00000009
TEST_PKRR_OP(ukcrsa32, x24, x2, x7, 0x0000000000000000, 0x8000000aaaaaaaa, 0xfffffbff00000009, x2, x5, 144, x13)

inst_27:
// rs1==x4, rs2==x29, rd==x21, rs2_w1_val == 4294966783, rs2_w0_val == 4294967295
// opcode: ukcrsa32 ; op1:x4; op2:x29; dest:x21; op1val:0x800000000000011;  op2val:0xfffffdffffffffff
TEST_PKRR_OP(ukcrsa32, x21, x4, x29, 0x0000000000000000, 0x800000000000011, 0xfffffdffffffffff, x4, x5, 160, x13)

inst_28:
// rs1==x0, rs2==x28, rd==x11, rs2_w1_val == 4294967039, rs2_w0_val == 4294966783, rs1_w0_val == 4293918719
// opcode: ukcrsa32 ; op1:x0; op2:x28; dest:x11; op1val:0x4000000ffefffff;  op2val:0xfffffefffffffdff
TEST_PKRR_OP(ukcrsa32, x11, x0, x28, 0x0000000000000000, 0x4000000ffefffff, 0xfffffefffffffdff, x0, x5, 176, x13)

inst_29:
// rs1==x6, rs2==x12, rd==x7, rs2_w1_val == 4294967167, rs2_w0_val == 4278190079, rs1_w1_val == 1431655765, rs1_w0_val == 524288
// opcode: ukcrsa32 ; op1:x6; op2:x12; dest:x7; op1val:0x5555555500080000;  op2val:0xffffff7ffeffffff
TEST_PKRR_OP(ukcrsa32, x7, x6, x12, 0x0000000000000000, 0x5555555500080000, 0xffffff7ffeffffff, x6, x5, 192, x13)

inst_30:
// rs1==x15, rs2==x8, rd==x31, rs2_w1_val == 4294967231, rs1_w0_val == 4294967039, rs2_w0_val == 4294967279
// opcode: ukcrsa32 ; op1:x15; op2:x8; dest:x31; op1val:0xfffdfffffffffeff;  op2val:0xffffffbfffffffef
TEST_PKRR_OP(ukcrsa32, x31, x15, x8, 0x0000000000000000, 0xfffdfffffffffeff, 0xffffffbfffffffef, x15, x5, 208, x13)

inst_31:
// rs1==x11, rs2==x10, rd==x8, rs2_w1_val == 4294967263, rs1_w0_val == 256, rs2_w0_val == 4294967263, rs1_w1_val == 16777216
// opcode: ukcrsa32 ; op1:x11; op2:x10; dest:x8; op1val:0x100000000000100;  op2val:0xffffffdfffffffdf
TEST_PKRR_OP(ukcrsa32, x8, x11, x10, 0x0000000000000000, 0x100000000000100, 0xffffffdfffffffdf, x11, x5, 224, x1)

inst_32:
// rs2_w1_val == 4294967279, rs1_w1_val == 8192, rs2_w0_val == 16
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x002000ffefffff;  op2val:0xffffffef00000010
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x002000ffefffff, 0xffffffef00000010, x30, x5, 240, x1)

inst_33:
// rs2_w1_val == 4294967287, rs2_w0_val == 4290772991, rs1_w1_val == 131072
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000006;  op2val:0xfffffff7ffbfffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x02000000000006, 0xfffffff7ffbfffff, x30, x5, 256, x1)

inst_34:
// rs2_w1_val == 4294967291, rs1_w1_val == 4290772991, rs1_w0_val == 16384
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00004000;  op2val:0xfffffffb0000000a
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00004000, 0xfffffffb0000000a, x30, x5, 272, x1)

inst_35:
// rs2_w1_val == 4294967293, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff0000000d;  op2val:0xfffffffd00001000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffbff0000000d, 0xfffffffd00001000, x30, x5, 288, x1)

inst_36:
// rs2_w1_val == 4294967294, rs2_w0_val == 4294967293, rs1_w0_val == 4294967167, rs1_w1_val == 262144
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000ffffff7f;  op2val:0xfffffffefffffffd
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x040000ffffff7f, 0xfffffffefffffffd, x30, x5, 304, x1)

inst_37:
// rs2_w1_val == 2147483648, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffdfffffff;  op2val:0x80000000ffffffdf
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xffefffffdfffffff, 0x80000000ffffffdf, x30, x5, 320, x1)

inst_38:
// rs2_w1_val == 1073741824, rs1_w0_val == 4294967287, rs1_w1_val == 2147483648
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffffff7;  op2val:0x4000000000000010
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x80000000fffffff7, 0x4000000000000010, x30, x5, 336, x1)

inst_39:
// rs2_w1_val == 536870912, rs1_w1_val == 4294967291, rs2_w0_val == 4294950911, rs1_w0_val == 4294963199
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffefff;  op2val:0x20000000ffffbfff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffefff, 0x20000000ffffbfff, x30, x5, 352, x1)

inst_40:
// rs2_w1_val == 268435456, rs2_w0_val == 3221225471
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000c0000000d;  op2val:0x10000000bfffffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000c0000000d, 0x10000000bfffffff, x30, x5, 368, x1)

inst_41:
// rs2_w1_val == 134217728, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000006;  op2val:0x800000000000007
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x2000000000000006, 0x800000000000007, x30, x5, 384, x1)

inst_42:
// rs2_w1_val == 67108864, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffeffff;  op2val:0x400000000002000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffefffeffff, 0x400000000002000, x30, x5, 400, x1)

inst_43:
// rs2_w1_val == 33554432, rs1_w1_val == 4, rs1_w0_val == 1048576
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400100000;  op2val:0x2000000fffffeff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000400100000, 0x2000000fffffeff, x30, x5, 416, x1)

inst_44:
// rs2_w1_val == 16777216, rs1_w1_val == 3758096383, rs2_w0_val == 8
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000006;  op2val:0x100000000000008
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000006, 0x100000000000008, x30, x5, 432, x1)

inst_45:
// rs2_w1_val == 8388608, rs1_w1_val == 4294967167, rs2_w0_val == 524288
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffffffd;  op2val:0x80000000080000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffffd, 0x80000000080000, x30, x5, 448, x1)

inst_46:
// rs2_w1_val == 4194304, rs2_w0_val == 2147483648, rs1_w1_val == 2147483647
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff55555555;  op2val:0x40000080000000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x7fffffff55555555, 0x40000080000000, x30, x5, 464, x1)

inst_47:
// rs2_w1_val == 2097152, rs2_w0_val == 4294934527
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000fffffff7f;  op2val:0x200000ffff7fff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000fffffff7f, 0x200000ffff7fff, x30, x5, 480, x1)

inst_48:
// rs1_w0_val == 262144, rs2_w1_val == 16384
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000040000;  op2val:0x00400000000007
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x04000000040000, 0x00400000000007, x30, x5, 496, x1)

inst_49:
// rs1_w0_val == 131072, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000300020000;  op2val:0xffffff7ffffffbff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000300020000, 0xffffff7ffffffbff, x30, x5, 512, x1)

inst_50:
// rs1_w0_val == 65536, rs1_w1_val == 2097152
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000010000;  op2val:0xffffff7ffffffff7
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x20000000010000, 0xffffff7ffffffff7, x30, x5, 528, x1)

inst_51:
// rs1_w0_val == 32768, rs2_w1_val == 64, rs2_w0_val == 4194304
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000008000;  op2val:0x00004000400000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x8000000000008000, 0x00004000400000, x30, x5, 544, x1)

inst_52:
// rs1_w0_val == 4096, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000001000;  op2val:0xfff7ffff0000000d
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x01000000001000, 0xfff7ffff0000000d, x30, x5, 560, x1)

inst_53:
// rs1_w0_val == 2048, rs1_w1_val == 4286578687
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000800;  op2val:0xfffdffff00000005
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000800, 0xfffdffff00000005, x30, x5, 576, x1)

inst_54:
// rs1_w0_val == 1024, rs2_w0_val == 2863311530
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000a00000400;  op2val:0xffffdfffaaaaaaaa
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000a00000400, 0xffffdfffaaaaaaaa, x30, x5, 592, x1)

inst_55:
// rs1_w0_val == 128, rs2_w1_val == 1
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000080;  op2val:0x00000100000009
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00080000000080, 0x00000100000009, x30, x5, 608, x1)

inst_56:
// rs1_w0_val == 32, rs2_w0_val == 134217728
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000c00000020;  op2val:0x00000b08000000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000c00000020, 0x00000b08000000, x30, x5, 624, x1)

inst_57:
// rs1_w0_val == 16, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000010;  op2val:0xfffbffff0000000d
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00040000000010, 0xfffbffff0000000d, x30, x5, 640, x1)

inst_58:
// rs1_w0_val == 8, rs2_w1_val == 1024, rs1_w1_val == 2
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000008;  op2val:0x0004000000000b
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000200000008, 0x0004000000000b, x30, x5, 656, x1)

inst_59:
// rs1_w0_val == 4, rs1_w1_val == 32768
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000004;  op2val:0xffbfffff0000000e
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00800000000004, 0xffbfffff0000000e, x30, x5, 672, x1)

inst_60:
// rs1_w0_val == 2, rs2_w0_val == 4286578687
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000b00000002;  op2val:0x000012ff7fffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000b00000002, 0x000012ff7fffff, x30, x5, 688, x1)

inst_61:
// rs1_w0_val == 4294967295, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffffff;  op2val:0xffffbfff0000000d
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffffff, 0xffffbfff0000000d, x30, x5, 704, x1)

inst_62:
// rs2_w1_val == 1048576, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800fbffffff;  op2val:0x10000000000009
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x000800fbffffff, 0x10000000000009, x30, x5, 720, x1)

inst_63:
// rs2_w1_val == 524288, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000b0000000d;  op2val:0x08000004000000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000b0000000d, 0x08000004000000, x30, x5, 736, x1)

inst_64:
// rs2_w1_val == 262144, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x0200000000000c;  op2val:0x0400007fffffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x0200000000000c, 0x0400007fffffff, x30, x5, 752, x1)

inst_65:
// rs2_w1_val == 131072, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000300000011;  op2val:0x02000002000000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000300000011, 0x02000002000000, x30, x5, 768, x1)

inst_66:
// rs2_w1_val == 32768, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001300000011;  op2val:0x00800000000013
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00001300000011, 0x00800000000013, x30, x5, 784, x1)

inst_67:
// rs2_w1_val == 8192, rs1_w1_val == 524288
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000ffffffdf;  op2val:0x002000fbffffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x080000ffffffdf, 0x002000fbffffff, x30, x5, 800, x1)

inst_68:
// rs2_w1_val == 4096, rs1_w1_val == 4294934527
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00001000;  op2val:0x0010007fffffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00001000, 0x0010007fffffff, x30, x5, 816, x1)

inst_69:
// rs2_w1_val == 512, rs1_w0_val == 4290772991
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffbfffff;  op2val:0x00020000000012
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x000800ffbfffff, 0x00020000000012, x30, x5, 832, x1)

inst_70:
// rs2_w1_val == 256, rs1_w1_val == 268435456
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000008000;  op2val:0x00010000000000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x1000000000008000, 0x00010000000000, x30, x5, 848, x1)

inst_71:
// rs2_w1_val == 128, rs1_w0_val == 134217728, rs2_w0_val == 2048
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555508000000;  op2val:0x00008000000800
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x5555555508000000, 0x00008000000800, x30, x5, 864, x1)

inst_72:
// rs2_w1_val == 32, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff0000000b;  op2val:0x0000200000000a
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffeff0000000b, 0x0000200000000a, x30, x5, 880, x1)

inst_73:
// rs2_w1_val == 16, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000012;  op2val:0x00001008000000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x400000000000012, 0x00001008000000, x30, x5, 896, x1)

inst_74:
// rs2_w1_val == 8, rs1_w1_val == 256
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100dfffffff;  op2val:0x00000800400000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x000100dfffffff, 0x00000800400000, x30, x5, 912, x1)

inst_75:
// rs2_w1_val == 4, rs1_w1_val == 4294443007
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00040000;  op2val:0x000004fbffffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00040000, 0x000004fbffffff, x30, x5, 928, x1)

inst_76:
// rs2_w1_val == 2, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000040;  op2val:0x000002ffdfffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000040, 0x000002ffdfffff, x30, x5, 944, x1)

inst_77:
// rs2_w1_val == 0, rs1_w0_val == 4294967231
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000ffffffbf;  op2val:0x00000020000000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x1000000ffffffbf, 0x00000020000000, x30, x5, 960, x1)

inst_78:
// rs2_w0_val == 1431655765, rs1_w0_val == 2147483647
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000007fffffff;  op2val:0x00000b55555555
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x800000007fffffff, 0x00000b55555555, x30, x5, 976, x1)

inst_79:
// rs2_w0_val == 3758096383, rs1_w1_val == 2863311530, rs1_w0_val == 4294967279
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffffffef;  op2val:0x7fffffffdfffffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffffffef, 0x7fffffffdfffffff, x30, x5, 992, x1)

inst_80:
// rs2_w0_val == 4026531839, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000e7fffffff;  op2val:0xfffffffdefffffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000e7fffffff, 0xfffffffdefffffff, x30, x5, 1008, x1)

inst_81:
// rs2_w0_val == 4160749567, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffffffff;  op2val:0x000006f7ffffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xff7fffffffffffff, 0x000006f7ffffff, x30, x5, 1024, x1)

inst_82:
// rs2_w0_val == 4261412863, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000ffffffdf;  op2val:0x00000efdffffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x1000000ffffffdf, 0x00000efdffffff, x30, x5, 1040, x1)

inst_83:
// rs2_w0_val == 4294443007, rs1_w1_val == 4292870143
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffffbff;  op2val:0x000020fff7ffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xffdffffffffffbff, 0x000020fff7ffff, x30, x5, 1056, x1)

inst_84:
// rs2_w0_val == 4294836223, rs1_w0_val == 4294705151
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffbffff;  op2val:0x200000fffdffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffbffff, 0x200000fffdffff, x30, x5, 1072, x1)

inst_85:
// rs2_w0_val == 1024, rs1_w1_val == 64
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000007;  op2val:0x400000000000400
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00004000000007, 0x400000000000400, x30, x5, 1088, x1)

inst_86:
// rs2_w0_val == 128, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000a00000800;  op2val:0xfeffffff00000080
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000a00000800, 0xfeffffff00000080, x30, x5, 1104, x1)

inst_87:
// rs2_w0_val == 32, rs1_w1_val == 33554432
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000001;  op2val:0xaaaaaaaa00000020
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x200000000000001, 0xaaaaaaaa00000020, x30, x5, 1120, x1)

inst_88:
// rs2_w0_val == 2, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x0200000000000c;  op2val:0x04000000000002
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x0200000000000c, 0x04000000000002, x30, x5, 1136, x1)

inst_89:
// rs2_w0_val == 1, rs1_w0_val == 4294959103
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006ffffdfff;  op2val:0x400000000000001
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x000006ffffdfff, 0x400000000000001, x30, x5, 1152, x1)

inst_90:
// rs1_w1_val == 3221225471, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000040;  op2val:0x4000000000001000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000040, 0x4000000000001000, x30, x5, 1168, x1)

inst_91:
// rs1_w1_val == 4026531839, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000080;  op2val:0xffefffff00000002
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xefffffff00000080, 0xffefffff00000002, x30, x5, 1184, x1)

inst_92:
// rs1_w1_val == 4160749567, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000003;  op2val:0xffffefffaaaaaaaa
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000003, 0xffffefffaaaaaaaa, x30, x5, 1200, x1)

inst_93:
// rs1_w1_val == 4278190079, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffbff;  op2val:0x800000007fffffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xfefffffffffffbff, 0x800000007fffffff, x30, x5, 1216, x1)

inst_94:
// rs1_w1_val == 4294705151, rs1_w0_val == 4261412863
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffffdffffff;  op2val:0x040000fffffdff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffbfffffdffffff, 0x040000fffffdff, x30, x5, 1232, x1)

inst_95:
// rs1_w1_val == 4294901759, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000007;  op2val:0x5555555520000000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000007, 0x5555555520000000, x30, x5, 1248, x1)

inst_96:
// rs1_w1_val == 4294950911, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00004000;  op2val:0x02000000000007
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00004000, 0x02000000000007, x30, x5, 1264, x1)

inst_97:
// rs1_w1_val == 4294959103, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00080000;  op2val:0x00000700000080
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00080000, 0x00000700000080, x30, x5, 1280, x1)

inst_98:
// rs1_w1_val == 4294963199, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffaaaaaaaa;  op2val:0x08000002000000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffefffaaaaaaaa, 0x08000002000000, x30, x5, 1296, x1)

inst_99:
// rs1_w1_val == 4294965247, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffffffd;  op2val:0xbfffffff00000002
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffffffd, 0xbfffffff00000002, x30, x5, 1312, x1)

inst_100:
// rs1_w1_val == 4294966783, rs1_w0_val == 67108864
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff04000000;  op2val:0xfffeffffffffffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffdff04000000, 0xfffeffffffffffff, x30, x5, 1328, x1)

inst_101:
// rs1_w1_val == 4294967231, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffffffdf;  op2val:0x000001ffffffdf
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffffbfffffffdf, 0x000001ffffffdf, x30, x5, 1344, x1)

inst_102:
// rs1_w1_val == 4294967263, rs1_w0_val == 2097152
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00200000;  op2val:0x00000bffffbfff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00200000, 0x00000bffffbfff, x30, x5, 1360, x1)

inst_103:
// rs1_w1_val == 4294967279, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000001;  op2val:0x2000000fffffff7
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffffef00000001, 0x2000000fffffff7, x30, x5, 1376, x1)

inst_104:
// rs1_w1_val == 4294967287, rs1_w0_val == 4294934527, rs2_w0_val == 1073741824
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffff7fff;  op2val:0x00001040000000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffff7fff, 0x00001040000000, x30, x5, 1392, x1)

inst_105:
// rs1_w1_val == 8388608, rs1_w0_val == 1073741824
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000040000000;  op2val:0xfffff7fff7ffffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x80000040000000, 0xfffff7fff7ffffff, x30, x5, 1408, x1)

inst_106:
// rs1_w1_val == 4194304, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000008;  op2val:0xffffffefefffffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x40000000000008, 0xffffffefefffffff, x30, x5, 1424, x1)

inst_107:
// rs1_w1_val == 16384, rs2_w0_val == 4294967291
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000000020;  op2val:0x000005fffffffb
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00400000000020, 0x000005fffffffb, x30, x5, 1440, x1)

inst_108:
// rs1_w1_val == 128, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000000007;  op2val:0x00000900000011
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00008000000007, 0x00000900000011, x30, x5, 1456, x1)

inst_109:
// rs1_w1_val == 32, rs2_w0_val == 8388608
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000008000;  op2val:0x8000000000800000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00002000008000, 0x8000000000800000, x30, x5, 1472, x1)

inst_110:
// rs1_w1_val == 8, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffffdff;  op2val:0x2000000002000000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x000008fffffdff, 0x2000000002000000, x30, x5, 1488, x1)

inst_111:
// rs1_w1_val == 0, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000400000;  op2val:0x00000955555555
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000000400000, 0x00000955555555, x30, x5, 1504, x1)

inst_112:
// rs1_w0_val == 3221225471, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffbfffffff;  op2val:0x4000000fffbffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffff7ffbfffffff, 0x4000000fffbffff, x30, x5, 1520, x1)

inst_113:
// rs1_w0_val == 4160749567, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000f7ffffff;  op2val:0x10000000ffdfffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x800000f7ffffff, 0x10000000ffdfffff, x30, x5, 1536, x1)

inst_114:
// rs2_w0_val == 4294901759, rs1_w0_val == 268435456
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff10000000;  op2val:0x000000fffeffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffeff10000000, 0x000000fffeffff, x30, x5, 1552, x1)

inst_115:
// rs1_w0_val == 4278190079, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100feffffff;  op2val:0xfdffffff04000000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x000100feffffff, 0xfdffffff04000000, x30, x5, 1568, x1)

inst_116:
// rs2_w0_val == 4294959103, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff780000000;  op2val:0xaaaaaaaaffffdfff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff780000000, 0xaaaaaaaaffffdfff, x30, x5, 1584, x1)

inst_117:
// rs1_w0_val == 4292870143, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffdfffff;  op2val:0x00010000000008
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xbfffffffffdfffff, 0x00010000000008, x30, x5, 1600, x1)

inst_118:
// rs2_w0_val == 4294965247, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffbffffff;  op2val:0x400000fffff7ff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xfdfffffffbffffff, 0x400000fffff7ff, x30, x5, 1616, x1)

inst_119:
// rs1_w0_val == 4294443007, rs2_w0_val == 1048576
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006fff7ffff;  op2val:0xfdffffff00100000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x000006fff7ffff, 0xfdffffff00100000, x30, x5, 1632, x1)

inst_120:
// rs1_w0_val == 4294836223, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200fffdffff;  op2val:0xfffffbff0000000f
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x000200fffdffff, 0xfffffbff0000000f, x30, x5, 1648, x1)

inst_121:
// rs2_w0_val == 4294967167, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000002;  op2val:0x008000ffffff7f
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x800000000000002, 0x008000ffffff7f, x30, x5, 1664, x1)

inst_122:
// rs2_w0_val == 4294967231, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000006;  op2val:0x4000000ffffffbf
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000006, 0x4000000ffffffbf, x30, x5, 1680, x1)

inst_123:
// rs1_w0_val == 4294950911, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffffbfff;  op2val:0x7ffffffffffffffb
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x000008ffffbfff, 0x7ffffffffffffffb, x30, x5, 1696, x1)

inst_124:
// rs1_w1_val == 1048576, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000012;  op2val:0x00200040000000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x10000000000012, 0x00200040000000, x30, x5, 1712, x1)

inst_125:
// rs2_w0_val == 4294967294, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffffeff;  op2val:0xffffffdffffffffe
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x40000000fffffeff, 0xffffffdffffffffe, x30, x5, 1728, x1)

inst_126:
// rs1_w0_val == 4294967291, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffffb;  op2val:0xfffffffbfffffffd
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x10000000fffffffb, 0xfffffffbfffffffd, x30, x5, 1744, x1)

inst_127:
// rs1_w0_val == 4294967294, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000bfffffffe;  op2val:0x000000ffffffdf
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000bfffffffe, 0x000000ffffffdf, x30, x5, 1760, x1)

inst_128:
// rs2_w0_val == 2097152, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffffffef;  op2val:0x00000b00200000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xffdfffffffffffef, 0x00000b00200000, x30, x5, 1776, x1)

inst_129:
// rs1_w0_val == 536870912, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040020000000;  op2val:0x00040000010000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00040020000000, 0x00040000010000, x30, x5, 1792, x1)

inst_130:
// rs2_w0_val == 262144, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffff7ff;  op2val:0xefffffff00040000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x001000fffff7ff, 0xefffffff00040000, x30, x5, 1808, x1)

inst_131:
// rs2_w0_val == 131072, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff10000000;  op2val:0xffffefff00020000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffffff10000000, 0xffffefff00020000, x30, x5, 1824, x1)

inst_132:
// rs1_w0_val == 16777216, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008001000000;  op2val:0x400000bfffffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x00008001000000, 0x400000bfffffff, x30, x5, 1840, x1)

inst_133:
// rs2_w0_val == 16384, 
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000001;  op2val:0x800000000004000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000001, 0x800000000004000, x30, x5, 1856, x1)

inst_134:
// rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 4294966271, rs2_w0_val == 268435456, rs2_w1_val == 65536, rs1_w1_val == 65536
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffffbff;  op2val:0x01000010000000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x010000fffffbff, 0x01000010000000, x30, x5, 1872, x1)

inst_135:
// rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 4227858431, rs1_w0_val == 4227858431, rs1_w1_val == 4294967294, rs2_w1_val == 4294967295
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefbffffff;  op2val:0xfffffffffbffffff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffefbffffff, 0xfffffffffbffffff, x30, x5, 1888, x1)

inst_136:
// rs2_w1_val == 2863311530, rs1_w0_val == 33554432, rs1_w1_val == 67108864, rs2_w0_val == 4096
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000002000000;  op2val:0xaaaaaaaa00001000
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x400000002000000, 0xaaaaaaaa00001000, x30, x5, 1904, x1)

inst_137:
// rs2_w1_val == 4261412863, rs1_w1_val == 4227858431, rs1_w0_val == 64
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000040;  op2val:0xfdffffff0000000d
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000040, 0xfdffffff0000000d, x30, x5, 1920, x1)

inst_138:
// rs2_w1_val == 4294967039, rs2_w0_val == 4294966783, rs1_w0_val == 4293918719
// opcode: ukcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000ffefffff;  op2val:0xfffffefffffffdff
TEST_PKRR_OP(ukcrsa32, x31, x30, x29, 0x0000000000000000, 0x4000000ffefffff, 0xfffffefffffffdff, x30, x5, 1936, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 244*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
