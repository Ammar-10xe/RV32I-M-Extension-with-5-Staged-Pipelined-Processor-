
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rstsa16 instruction of the RISC-V RV64PZicsr extension for the rstsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",rstsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x12,signature_x12_1)

inst_0:
// rs1 == rd != rs2, rs1==x10, rs2==x1, rd==x10, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h1_val == 32767, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs1_h1_val == 512, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h3_val == -32768, rs2_h2_val == -17, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h3_val == -3, rs2_h0_val == 1024
// opcode: rstsa16 ; op1:x10; op2:x1; dest:x10; op1val:0xfffdfff602008000;  op2val:0x8000ffef7fff0400
TEST_RR_OP(rstsa16, x10, x10, x1, 0x0000000000000000, 0xfffdfff602008000, 0x8000ffef7fff0400, x12, 0, x11)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x17, rs2==x31, rd==x20, rs1_h3_val == rs2_h3_val, rs1_h1_val == -3, rs1_h0_val == -33, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val == -4097, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h2_val == 4, rs1_h2_val == -3, rs2_h3_val == -4097
// opcode: rstsa16 ; op1:x17; op2:x31; dest:x20; op1val:0xeffffffdfffdffdf;  op2val:0xefff00040009fff6
TEST_RR_OP(rstsa16, x20, x17, x31, 0x0000000000000000, 0xeffffffdfffdffdf, 0xefff00040009fff6, x12, 8, x11)

inst_2:
// rs1 == rs2 != rd, rs1==x28, rs2==x28, rd==x31, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == -65, rs2_h2_val == -3, rs2_h3_val == 4096, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -17
// opcode: rstsa16 ; op1:x28; op2:x28; dest:x31; op1val:0xfff9fffcffef0007;  op2val:0x1000fffdffbf0009
TEST_RR_OP(rstsa16, x31, x28, x28, 0x0000000000000000, 0xfff9fffcffef0007, 0x1000fffdffbf0009, x12, 16, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h3_val == -1025, rs1_h2_val == -1, rs2_h0_val == -5, rs1_h0_val == -513
// opcode: rstsa16 ; op1:x6; op2:x6; dest:x6; op1val:0x06ffffffeffdff;  op2val:0xfbff00090007fffb
TEST_RR_OP(rstsa16, x6, x6, x6, 0x0000000000000000, 0x06ffffffeffdff, 0xfbff00090007fffb, x12, 24, x11)

inst_4:
// rs2 == rd != rs1, rs1==x29, rs2==x19, rd==x19, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h2_val == -257, rs2_h0_val == -2049, rs2_h1_val == -17, rs1_h1_val == -21846, rs2_h3_val == 32, rs1_h0_val == 21845, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h2_val == -5
// opcode: rstsa16 ; op1:x29; op2:x19; dest:x19; op1val:0x07fffbaaaa5555;  op2val:0x20feffffeff7ff
TEST_RR_OP(rstsa16, x19, x29, x19, 0x0000000000000000, 0x07fffbaaaa5555, 0x20feffffeff7ff, x12, 32, x11)

inst_5:
// rs1==x15, rs2==x7, rd==x27, rs1_h2_val == rs2_h2_val, rs1_h3_val == 4, rs1_h0_val == 8192, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 2, rs1_h1_val == -1, rs2_h3_val == -2049, rs2_h2_val == 2, rs2_h0_val == 128
// opcode: rstsa16 ; op1:x15; op2:x7; dest:x27; op1val:0x040002ffff2000;  op2val:0xf7ff0002fff60080
TEST_RR_OP(rstsa16, x27, x15, x7, 0x0000000000000000, 0x040002ffff2000, 0xf7ff0002fff60080, x12, 40, x11)

inst_6:
// rs1==x16, rs2==x27, rd==x25, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h2_val == -1, rs1_h1_val == -5, rs2_h0_val == 0, rs2_h1_val == -32768, rs2_h3_val == -1, rs1_h0_val == -257
// opcode: rstsa16 ; op1:x16; op2:x27; dest:x25; op1val:0x050005fffbfeff;  op2val:0xffffffff80000000
TEST_RR_OP(rstsa16, x25, x16, x27, 0x0000000000000000, 0x050005fffbfeff, 0xffffffff80000000, x12, 48, x11)

inst_7:
// rs1==x30, rs2==x20, rd==x4, rs1_h1_val == rs2_h1_val, rs1_h2_val == 16384, rs2_h1_val == -21846, rs1_h0_val == -2, rs2_h3_val == 2, rs2_h2_val == 21845
// opcode: rstsa16 ; op1:x30; op2:x20; dest:x4; op1val:0xfff64000aaaafffe;  op2val:0x025555aaaaf7ff
TEST_RR_OP(rstsa16, x4, x30, x20, 0x0000000000000000, 0xfff64000aaaafffe, 0x025555aaaaf7ff, x12, 56, x11)

inst_8:
// rs1==x21, rs2==x24, rd==x7, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h2_val == -513, rs1_h3_val == -21846, rs1_h1_val == 2, rs2_h0_val == -17, rs2_h3_val == 64, rs1_h0_val == -21846, rs1_h2_val == -32768
// opcode: rstsa16 ; op1:x21; op2:x24; dest:x7; op1val:0xaaaa80000002aaaa;  op2val:0x40fdff8000ffef
TEST_RR_OP(rstsa16, x7, x21, x24, 0x0000000000000000, 0xaaaa80000002aaaa, 0x40fdff8000ffef, x12, 64, x11)

inst_9:
// rs1==x8, rs2==x18, rd==x0, rs1_h0_val == rs2_h0_val, rs1_h3_val == 32, rs2_h0_val == -8193, rs1_h2_val == 16, rs2_h1_val == -129, rs1_h0_val == -8193, rs1_h1_val == -65
// opcode: rstsa16 ; op1:x8; op2:x18; dest:x0; op1val:0x200010ffbfdfff;  op2val:0x02fff8ff7fdfff
TEST_RR_OP(rstsa16, x0, x8, x18, 0x0000000000000000, 0x200010ffbfdfff, 0x02fff8ff7fdfff, x12, 72, x11)

inst_10:
// rs1==x7, rs2==x14, rd==x29, rs2_h3_val == -21846, rs2_h1_val == 2, rs1_h2_val == 4096, rs1_h3_val == -257, rs1_h0_val == -4097, rs1_h1_val == -33, rs2_h0_val == 256
// opcode: rstsa16 ; op1:x7; op2:x14; dest:x29; op1val:0xfeff1000ffdfefff;  op2val:0xaaaa000700020100
TEST_RR_OP(rstsa16, x29, x7, x14, 0x0000000000000000, 0xfeff1000ffdfefff, 0xaaaa000700020100, x12, 80, x11)

inst_11:
// rs1==x19, rs2==x8, rd==x15, rs2_h3_val == 21845, rs1_h0_val == -9, rs1_h3_val == 16, rs2_h0_val == -1025, rs2_h1_val == 16384, rs1_h1_val == -1025
// opcode: rstsa16 ; op1:x19; op2:x8; dest:x15; op1val:0x100005fbfffff7;  op2val:0x5555fffd4000fbff
TEST_RR_OP(rstsa16, x15, x19, x8, 0x0000000000000000, 0x100005fbfffff7, 0x5555fffd4000fbff, x12, 88, x11)

inst_12:
// rs1==x2, rs2==x9, rd==x3, rs2_h3_val == 32767, rs2_h0_val == -65, rs1_h1_val == 21845, rs1_h2_val == -1025, rs2_h1_val == -2049
// opcode: rstsa16 ; op1:x2; op2:x9; dest:x3; op1val:0x09fbff5555fff8;  op2val:0x7ffffffaf7ffffbf
TEST_RR_OP(rstsa16, x3, x2, x9, 0x0000000000000000, 0x09fbff5555fff8, 0x7ffffffaf7ffffbf, x12, 96, x11)

inst_13:
// rs1==x24, rs2==x5, rd==x23, rs2_h3_val == -16385, rs1_h3_val == 128, rs2_h0_val == -513, rs1_h2_val == -4097, rs1_h0_val == -1, rs2_h2_val == -21846
// opcode: rstsa16 ; op1:x24; op2:x5; dest:x23; op1val:0x80efff0005ffff;  op2val:0xbfffaaaa7ffffdff
TEST_RR_OP(rstsa16, x23, x24, x5, 0x0000000000000000, 0x80efff0005ffff, 0xbfffaaaa7ffffdff, x12, 104, x11)

inst_14:
// rs1==x4, rs2==x13, rd==x11, rs2_h3_val == -8193, rs2_h0_val == 8, rs2_h1_val == -16385
// opcode: rstsa16 ; op1:x4; op2:x13; dest:x11; op1val:0xaaaafff80007fff7;  op2val:0xdfff0005bfff0008
TEST_RR_OP(rstsa16, x11, x4, x13, 0x0000000000000000, 0xaaaafff80007fff7, 0xdfff0005bfff0008, x12, 112, x7)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_15:
// rs1==x0, rs2==x29, rd==x26, rs2_h3_val == -513, rs1_h0_val == -3, rs2_h2_val == -129, rs1_h2_val == 4, rs1_h1_val == -513, rs2_h1_val == 8
// opcode: rstsa16 ; op1:x0; op2:x29; dest:x26; op1val:0x200004fdfffffd;  op2val:0xfdffff7f0008fff9
TEST_RR_OP(rstsa16, x26, x0, x29, 0x0000000000000000, 0x200004fdfffffd, 0xfdffff7f0008fff9, x6, 0, x7)

inst_16:
// rs1==x26, rs2==x15, rd==x21, rs2_h3_val == -257, rs1_h0_val == 4, rs1_h1_val == 1, rs2_h0_val == -9, rs1_h2_val == -129
// opcode: rstsa16 ; op1:x26; op2:x15; dest:x21; op1val:0xfff8ff7f00010004;  op2val:0xfeffff7fc000fff7
TEST_RR_OP(rstsa16, x21, x26, x15, 0x0000000000000000, 0xfff8ff7f00010004, 0xfeffff7fc000fff7, x6, 8, x7)

inst_17:
// rs1==x13, rs2==x30, rd==x14, rs2_h3_val == -129, rs2_h2_val == -2049, rs2_h0_val == 2, rs2_h1_val == 4096
// opcode: rstsa16 ; op1:x13; op2:x30; dest:x14; op1val:0xfefffffbffdf2000;  op2val:0xff7ff7ff10000002
TEST_RR_OP(rstsa16, x14, x13, x30, 0x0000000000000000, 0xfefffffbffdf2000, 0xff7ff7ff10000002, x6, 16, x7)

inst_18:
// rs1==x22, rs2==x4, rd==x5, rs2_h3_val == -65, rs2_h0_val == -16385, rs1_h3_val == 21845, rs1_h2_val == -9, rs1_h1_val == 32
// opcode: rstsa16 ; op1:x22; op2:x4; dest:x5; op1val:0x5555fff70020fff7;  op2val:0xffbffeff0002bfff
TEST_RR_OP(rstsa16, x5, x22, x4, 0x0000000000000000, 0x5555fff70020fff7, 0xffbffeff0002bfff, x6, 24, x7)

inst_19:
// rs1==x3, rs2==x23, rd==x22, rs2_h3_val == -33, rs2_h0_val == -1, rs1_h1_val == -16385, rs1_h3_val == -2049
// opcode: rstsa16 ; op1:x3; op2:x23; dest:x22; op1val:0xf7ffffffbfffdfff;  op2val:0xffdfffff0003ffff
TEST_RR_OP(rstsa16, x22, x3, x23, 0x0000000000000000, 0xf7ffffffbfffdfff, 0xffdfffff0003ffff, x6, 32, x7)

inst_20:
// rs1==x9, rs2==x21, rd==x16, rs2_h3_val == -17, rs1_h2_val == 32, rs1_h3_val == -16385
// opcode: rstsa16 ; op1:x9; op2:x21; dest:x16; op1val:0xbfff00200007fff7;  op2val:0xffefaaaafff9ffff
TEST_RR_OP(rstsa16, x16, x9, x21, 0x0000000000000000, 0xbfff00200007fff7, 0xffefaaaafff9ffff, x6, 40, x7)

inst_21:
// rs1==x27, rs2==x0, rd==x18, rs2_h3_val == -9, rs2_h1_val == 1, rs1_h1_val == 8, rs1_h0_val == 16384, rs2_h2_val == 128
// opcode: rstsa16 ; op1:x27; op2:x0; dest:x18; op1val:0xefff002000084000;  op2val:0xfff700800001f7ff
TEST_RR_OP(rstsa16, x18, x27, x0, 0x0000000000000000, 0xefff002000084000, 0xfff700800001f7ff, x6, 48, x7)

inst_22:
// rs1==x5, rs2==x3, rd==x9, rs2_h3_val == -5, rs2_h0_val == 16, rs2_h2_val == -4097, rs1_h0_val == 512, rs1_h3_val == -33, rs1_h1_val == -9
// opcode: rstsa16 ; op1:x5; op2:x3; dest:x9; op1val:0xffdf8000fff70200;  op2val:0xfffbefff7fff0010
TEST_RR_OP(rstsa16, x9, x5, x3, 0x0000000000000000, 0xffdf8000fff70200, 0xfffbefff7fff0010, x6, 56, x7)

inst_23:
// rs1==x12, rs2==x22, rd==x17, rs2_h3_val == -3, rs2_h2_val == -1025, rs2_h1_val == -1025, rs1_h1_val == 128, rs1_h2_val == -16385, rs1_h3_val == -9, rs1_h0_val == -1025
// opcode: rstsa16 ; op1:x12; op2:x22; dest:x17; op1val:0xfff7bfff0080fbff;  op2val:0xfffdfbfffbfff7ff
TEST_RR_OP(rstsa16, x17, x12, x22, 0x0000000000000000, 0xfff7bfff0080fbff, 0xfffdfbfffbfff7ff, x6, 64, x7)

inst_24:
// rs1==x23, rs2==x12, rd==x28, rs2_h3_val == -2, rs1_h1_val == 1024
// opcode: rstsa16 ; op1:x23; op2:x12; dest:x28; op1val:0x5555fff604000007;  op2val:0xfffe00091000fff8
TEST_RR_OP(rstsa16, x28, x23, x12, 0x0000000000000000, 0x5555fff604000007, 0xfffe00091000fff8, x6, 72, x7)

inst_25:
// rs1==x1, rs2==x17, rd==x30, rs2_h3_val == 16384, rs2_h0_val == 32, rs1_h2_val == 256, rs1_h1_val == 4096
// opcode: rstsa16 ; op1:x1; op2:x17; dest:x30; op1val:0x3fff01001000fff7;  op2val:0x4000aaaa40000020
TEST_RR_OP(rstsa16, x30, x1, x17, 0x0000000000000000, 0x3fff01001000fff7, 0x4000aaaa40000020, x6, 80, x7)

inst_26:
// rs1==x11, rs2==x10, rd==x2, rs2_h3_val == 8192, rs1_h2_val == -2049, rs2_h0_val == -2
// opcode: rstsa16 ; op1:x11; op2:x10; dest:x2; op1val:0xaaaaf7ff00010006;  op2val:0x2000fffa3ffffffe
TEST_RR_OP(rstsa16, x2, x11, x10, 0x0000000000000000, 0xaaaaf7ff00010006, 0x2000fffa3ffffffe, x6, 88, x7)

inst_27:
// rs1==x31, rs2==x25, rd==x8, rs2_h3_val == 2048, rs2_h2_val == 8192, rs1_h3_val == 1, rs2_h1_val == -3, rs1_h0_val == 4096
// opcode: rstsa16 ; op1:x31; op2:x25; dest:x8; op1val:0x01fffd00051000;  op2val:0x8002000fffd3fff
TEST_RR_OP(rstsa16, x8, x31, x25, 0x0000000000000000, 0x01fffd00051000, 0x8002000fffd3fff, x6, 96, x7)

inst_28:
// rs1==x18, rs2==x2, rd==x24, rs2_h3_val == 1024, rs2_h2_val == 512, rs1_h3_val == 2048
// opcode: rstsa16 ; op1:x18; op2:x2; dest:x24; op1val:0x80000070006fffa;  op2val:0x4000200fff9bfff
TEST_RR_OP(rstsa16, x24, x18, x2, 0x0000000000000000, 0x80000070006fffa, 0x4000200fff9bfff, x6, 104, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_29:
// rs1==x20, rs2==x26, rd==x12, rs2_h3_val == 512, rs2_h1_val == -4097, rs1_h0_val == 32767, rs2_h2_val == 1, rs1_h1_val == 2048
// opcode: rstsa16 ; op1:x20; op2:x26; dest:x12; op1val:0xfff9fff608007fff;  op2val:0x2000001efffffef
TEST_RR_OP(rstsa16, x12, x20, x26, 0x0000000000000000, 0xfff9fff608007fff, 0x2000001efffffef, x2, 0, x3)

inst_30:
// rs1==x14, rs2==x11, rd==x1, rs2_h3_val == 256, rs1_h3_val == -1025
// opcode: rstsa16 ; op1:x14; op2:x11; dest:x1; op1val:0xfbff0004fbff4000;  op2val:0x10000050007ffef
TEST_RR_OP(rstsa16, x1, x14, x11, 0x0000000000000000, 0xfbff0004fbff4000, 0x10000050007ffef, x2, 8, x3)

inst_31:
// rs1==x25, rs2==x16, rd==x13, rs2_h3_val == 128, rs1_h0_val == 128, rs1_h2_val == -17, rs1_h3_val == -32768, rs1_h1_val == -4097
// opcode: rstsa16 ; op1:x25; op2:x16; dest:x13; op1val:0x8000ffefefff0080;  op2val:0x80fff9ffeffbff
TEST_RR_OP(rstsa16, x13, x25, x16, 0x0000000000000000, 0x8000ffefefff0080, 0x80fff9ffeffbff, x2, 16, x3)

inst_32:
// rs2_h3_val == 16, rs2_h1_val == -5, rs1_h0_val == 2048, rs1_h2_val == 32767
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff67ffffbff0800;  op2val:0x105555fffb0009
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xfff67ffffbff0800, 0x105555fffb0009, x2, 24, x3)

inst_33:
// rs1_h1_val == -2, rs1_h3_val == 1024
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4003ffffffefff7;  op2val:0x403ffffffd0008
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x4003ffffffefff7, 0x403ffffffd0008, x2, 32, x3)

inst_34:
// rs1_h1_val == -32768, rs2_h1_val == 256, rs1_h2_val == -257
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8feff8000efff;  op2val:0xbffff7ff01000008
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xfff8feff8000efff, 0xbffff7ff01000008, x2, 40, x3)

inst_35:
// rs1_h1_val == 16384, rs1_h3_val == 16384, rs2_h1_val == -33
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400000034000fffc;  op2val:0xffdf0001ffdf3fff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x400000034000fffc, 0xffdf0001ffdf3fff, x2, 48, x3)

inst_36:
// rs1_h1_val == 8192, rs1_h0_val == -2049
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000072000f7ff;  op2val:0xffefaaaa00080080
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x1000072000f7ff, 0xffefaaaa00080080, x2, 56, x3)

inst_37:
// rs1_h1_val == 256, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x800000030100fffa;  op2val:0xf7ff0006fffc0005
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x800000030100fffa, 0xf7ff0006fffc0005, x2, 64, x3)

inst_38:
// rs1_h1_val == 64, rs1_h3_val == 0, rs2_h0_val == -257
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x00efff0040fff8;  op2val:0x4000fdff0005feff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x00efff0040fff8, 0x4000fdff0005feff, x2, 72, x3)

inst_39:
// rs1_h1_val == 16, rs1_h2_val == -21846
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555aaaa0010fffc;  op2val:0xfbff00017fffffbf
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x5555aaaa0010fffc, 0xfbff00017fffffbf, x2, 80, x3)

inst_40:
// rs1_h1_val == 4, rs2_h2_val == 32767
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x800000700040200;  op2val:0xf7ff7ffffffd0000
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x800000700040200, 0xf7ff7ffffffd0000, x2, 88, x3)

inst_41:
// rs1_h1_val == 0, rs2_h3_val == 1, rs2_h1_val == 64
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffc00000009;  op2val:0x013fff0040fff7
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x5555fffc00000009, 0x013fff0040fff7, x2, 96, x3)

inst_42:
// rs1_h0_val == -16385, rs1_h3_val == -1, rs2_h0_val == -129
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff3fff0007bfff;  op2val:0xc000ff7f0040ff7f
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xffff3fff0007bfff, 0xc000ff7f0040ff7f, x2, 104, x3)

inst_43:
// rs1_h0_val == -129, rs1_h2_val == 8192, rs1_h1_val == -8193, rs2_h1_val == 2048, rs2_h2_val == 8, rs1_h3_val == 4096
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10002000dfffff7f;  op2val:0x20000808000100
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x10002000dfffff7f, 0x20000808000100, x2, 112, x3)

inst_44:
// rs1_h0_val == -65, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0004fff9ffbf;  op2val:0xff7ffffd80000010
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xaaaa0004fff9ffbf, 0xff7ffffd80000010, x2, 120, x3)

inst_45:
// rs1_h0_val == -17, rs2_h0_val == 1
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0009c000ffef;  op2val:0x05ffff00080001
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xfffa0009c000ffef, 0x05ffff00080001, x2, 128, x3)

inst_46:
// rs1_h0_val == -5, rs1_h2_val == 21845
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff5555effffffb;  op2val:0xfff900027fff0400
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xfbff5555effffffb, 0xfff900027fff0400, x2, 136, x3)

inst_47:
// rs1_h0_val == 1024, rs2_h3_val == 0
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff000900060400;  op2val:0x00fffcc000dfff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xfeff000900060400, 0x00fffcc000dfff, x2, 144, x3)

inst_48:
// rs1_h0_val == 256, rs2_h2_val == 16, rs1_h2_val == 1024
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff040008000100;  op2val:0x400000100006bfff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xefff040008000100, 0x400000100006bfff, x2, 152, x3)

inst_49:
// rs1_h0_val == 64, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000600050040;  op2val:0xf7fffdff0007fff6
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xaaaa000600050040, 0xf7fffdff0007fff6, x2, 160, x3)

inst_50:
// rs1_h0_val == 32, rs2_h0_val == -3
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff7fff01000020;  op2val:0x037ffffffdfffd
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x3fff7fff01000020, 0x037ffffffdfffd, x2, 168, x3)

inst_51:
// rs1_h0_val == 16, rs2_h0_val == 16384, rs2_h1_val == -2
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fffc00060010;  op2val:0x00fff6fffe4000
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x04fffc00060010, 0x00fff6fffe4000, x2, 176, x3)

inst_52:
// rs1_h0_val == 8, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x06001000010008;  op2val:0xffefffef00020008
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x06001000010008, 0xffefffef00020008, x2, 184, x3)

inst_53:
// rs1_h0_val == 2, rs2_h1_val == 8192, rs1_h3_val == -8193
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffaaaafdff0002;  op2val:0x10000062000fffb
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xdfffaaaafdff0002, 0x10000062000fffb, x2, 192, x3)

inst_54:
// rs1_h0_val == 1, rs2_h0_val == 8192
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400f7ff00050001;  op2val:0xefff555520002000
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x400f7ff00050001, 0xefff555520002000, x2, 200, x3)

inst_55:
// rs1_h0_val == 0, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x107fff00200000;  op2val:0x400020000800fffa
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x107fff00200000, 0x400020000800fffa, x2, 208, x3)

inst_56:
// rs2_h3_val == 8, rs2_h0_val == -33
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x103fff00060080;  op2val:0x08fffd0009ffdf
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x103fff00060080, 0x08fffd0009ffdf, x2, 216, x3)

inst_57:
// rs2_h3_val == 4, rs2_h1_val == 0, rs2_h0_val == 4
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff62000feff;  op2val:0x04fdff00000004
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xf7fffff62000feff, 0x04fdff00000004, x2, 224, x3)

inst_58:
// rs2_h2_val == -16385, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff000400100400;  op2val:0xefffbfffbffffbff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xfeff000400100400, 0xefffbfffbffffbff, x2, 232, x3)

inst_59:
// rs2_h2_val == -8193, rs1_h2_val == 64
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0040efffffff;  op2val:0xfff6dfff00000007
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xf7ff0040efffffff, 0xfff6dfff00000007, x2, 240, x3)

inst_60:
// rs2_h2_val == -65, rs1_h1_val == -129, rs2_h1_val == -1
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100002ff7f0040;  op2val:0x05ffbfffff0100
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x100002ff7f0040, 0x05ffbfffff0100, x2, 248, x3)

inst_61:
// rs2_h1_val == 4, rs1_h2_val == 512
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff020010000007;  op2val:0x04ffff00040004
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xffff020010000007, 0x04ffff00040004, x2, 256, x3)

inst_62:
// rs2_h0_val == -21846, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000200ffbfffdf;  op2val:0x07fff8fffcaaaa
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xc0000200ffbfffdf, 0x07fff8fffcaaaa, x2, 264, x3)

inst_63:
// rs2_h0_val == 21845, rs2_h1_val == 1024, rs2_h2_val == 2048
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00048000;  op2val:0xfffb080004005555
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xfffffffd00048000, 0xfffb080004005555, x2, 272, x3)

inst_64:
// rs2_h0_val == 32767, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400fff80010fff9;  op2val:0xfbff2000ffff7fff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x400fff80010fff9, 0xfbff2000ffff7fff, x2, 280, x3)

inst_65:
// rs2_h0_val == -4097, rs1_h3_val == -65
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf555520004000;  op2val:0x0400101000efff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xffbf555520004000, 0x0400101000efff, x2, 288, x3)

inst_66:
// rs2_h0_val == -32768, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x09ff7f1000fffe;  op2val:0x08000704008000
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x09ff7f1000fffe, 0x08000704008000, x2, 296, x3)

inst_67:
// rs2_h0_val == 4096, rs1_h2_val == -2
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffe02000040;  op2val:0x02fffdfffa1000
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xeffffffe02000040, 0x02fffdfffa1000, x2, 304, x3)

inst_68:
// rs2_h0_val == 2048, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaabfff1000bfff;  op2val:0xffbf000500080800
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xaaaabfff1000bfff, 0xffbf000500080800, x2, 312, x3)

inst_69:
// rs2_h0_val == 512, rs2_h2_val == -5, rs2_h1_val == 32
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000300405555;  op2val:0xfff6fffb00200200
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xc000000300405555, 0xfff6fffb00200200, x2, 320, x3)

inst_70:
// rs2_h0_val == 64, rs2_h2_val == 1024
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fbff0008fffd;  op2val:0xffbf040000010040
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x04fbff0008fffd, 0xffbf040000010040, x2, 328, x3)

inst_71:
// rs1_h3_val == 32767, rs2_h2_val == -33
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff00400002fffd;  op2val:0x03ffdf7ffffbff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x7fff00400002fffd, 0x03ffdf7ffffbff, x2, 336, x3)

inst_72:
// rs1_h3_val == -513, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffc0002000aaaa;  op2val:0x5555000601004000
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xfdffc0002000aaaa, 0x5555000601004000, x2, 344, x3)

inst_73:
// rs1_h3_val == -129, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffefdffffdff;  op2val:0xaaaafffaaaaaefff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xff7fffefdffffdff, 0xaaaafffaaaaaefff, x2, 352, x3)

inst_74:
// rs1_h3_val == -17, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffdfffb4000;  op2val:0x07fffc80000100
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xffeffffdfffb4000, 0x07fffc80000100, x2, 360, x3)

inst_75:
// rs1_h3_val == -5, rs2_h2_val == -9, rs1_h1_val == -2049
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0100f7ff7fff;  op2val:0x100fff700030400
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xfffb0100f7ff7fff, 0x100fff700030400, x2, 368, x3)

inst_76:
// rs1_h3_val == -2, rs1_h2_val == 8
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0008aaaa2000;  op2val:0xfffefffd7fff0007
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xfffe0008aaaa2000, 0xfffefffd7fff0007, x2, 376, x3)

inst_77:
// rs1_h3_val == 8192, rs2_h1_val == 512
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffef4000f7ff;  op2val:0xffffefff0200fbff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x2000ffef4000f7ff, 0xffffefff0200fbff, x2, 384, x3)

inst_78:
// rs1_h3_val == 512, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000200008fff8;  op2val:0x093fff3fff0001
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x20000200008fff8, 0x093fff3fff0001, x2, 392, x3)

inst_79:
// rs1_h3_val == 256, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100ffef1000fffc;  op2val:0x800020020000002
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x100ffef1000fffc, 0x800020020000002, x2, 400, x3)

inst_80:
// rs1_h3_val == 64, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4010000006f7ff;  op2val:0xfffc000708000007
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x4010000006f7ff, 0xfffc000708000007, x2, 408, x3)

inst_81:
// rs1_h3_val == 8, rs2_h1_val == -513
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x08bfff00024000;  op2val:0x02f7fffdffdfff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x08bfff00024000, 0x02f7fffdffdfff, x2, 416, x3)

inst_82:
// rs1_h3_val == 2, rs2_h2_val == 256
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x02efff0004fffd;  op2val:0x80000100ffef0002
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x02efff0004fffd, 0x80000100ffef0002, x2, 424, x3)

inst_83:
// rs2_h2_val == -2, rs2_h1_val == -8193
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000effffff90400;  op2val:0xfffafffedffffeff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xc000effffff90400, 0xfffafffedffffeff, x2, 432, x3)

inst_84:
// rs2_h2_val == -32768, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x800000033fffc000;  op2val:0x0980000000ffdf
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x800000033fffc000, 0x0980000000ffdf, x2, 440, x3)

inst_85:
// rs2_h2_val == 16384, rs1_h2_val == 1
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef000100200010;  op2val:0x0440003fff0200
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xffef000100200010, 0x0440003fff0200, x2, 448, x3)

inst_86:
// rs1_h2_val == -8193, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80dfff40000000;  op2val:0xfefffffd00050003
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x80dfff40000000, 0xfefffffd00050003, x2, 456, x3)

inst_87:
// rs2_h2_val == 4096, rs2_h1_val == 21845
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550001ffefffef;  op2val:0xfffe10005555ff7f
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x55550001ffefffef, 0xfffe10005555ff7f, x2, 464, x3)

inst_88:
// rs1_h2_val == -513, rs1_h1_val == 32767
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffdff7ffff7ff;  op2val:0xfffbfff955550020
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xdffffdff7ffff7ff, 0xfffbfff955550020, x2, 472, x3)

inst_89:
// rs1_h2_val == 2048, rs2_h2_val == 32
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff08001000fffb;  op2val:0x0600200003feff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xfeff08001000fffb, 0x0600200003feff, x2, 480, x3)

inst_90:
// rs1_h2_val == 128, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb008000800040;  op2val:0x3fffaaaaffef0040
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xfffb008000800040, 0x3fffaaaaffef0040, x2, 488, x3)

inst_91:
// rs2_h1_val == -257, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0400fbffbfff;  op2val:0xfffb0800fefffbff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xdfff0400fbffbfff, 0xfffb0800fefffbff, x2, 496, x3)

inst_92:
// rs2_h1_val == -9, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffaaaaafffb;  op2val:0x200200fff70800
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xfffbfffaaaaafffb, 0x200200fff70800, x2, 504, x3)

inst_93:
// rs1_h2_val == 0, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000800fff7;  op2val:0xfffd02000002ffff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x10000000800fff7, 0xfffd02000002ffff, x2, 512, x3)

inst_94:
// rs2_h2_val == 64, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0000013fff0400;  op2val:0xfffa0040dffffeff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x0000013fff0400, 0xfffa0040dffffeff, x2, 520, x3)

inst_95:
// rs1_h2_val == -65, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffbf4000bfff;  op2val:0xfbfffffcffbf2000
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x8000ffbf4000bfff, 0xfbfffffcffbf2000, x2, 528, x3)

inst_96:
// rs1_h2_val == -33, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffdf1000ffdf;  op2val:0xfff9fff6fff60009
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x8000ffdf1000ffdf, 0xfff9fff6fff60009, x2, 536, x3)

inst_97:
// rs1_h1_val == -257, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0006feffaaaa;  op2val:0xfdffffdf7ffffff7
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xffff0006feffaaaa, 0xfdffffdf7ffffff7, x2, 544, x3)

inst_98:
// rs2_h1_val == 128, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff400080000001;  op2val:0xaaaafffe0080fffa
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xbfff400080000001, 0xaaaafffe0080fffa, x2, 552, x3)

inst_99:
// rs2_h1_val == 16, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fffd04000000;  op2val:0xffdfffff00100040
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x09fffd04000000, 0xffdfffff00100040, x2, 560, x3)

inst_100:
// rs2_h2_val == 0, 
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa8000dffffff8;  op2val:0x400000005555efff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xaaaa8000dffffff8, 0x400000005555efff, x2, 568, x3)

inst_101:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == -65, rs2_h2_val == -3, rs2_h3_val == 4096, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -17
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffcffef0007;  op2val:0x1000fffdffbf0009
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xfff9fffcffef0007, 0x1000fffdffbf0009, x2, 576, x3)

inst_102:
// rs1_h0_val == rs2_h0_val, rs1_h3_val == 32, rs2_h0_val == -8193, rs1_h2_val == 16, rs2_h1_val == -129, rs1_h0_val == -8193, rs1_h1_val == -65
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200010ffbfdfff;  op2val:0x02fff8ff7fdfff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0x200010ffbfdfff, 0x02fff8ff7fdfff, x2, 584, x3)

inst_103:
// rs2_h3_val == -9, rs2_h1_val == 1, rs1_h1_val == 8, rs1_h0_val == 16384, rs2_h2_val == 128
// opcode: rstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff002000084000;  op2val:0xfff700800001f7ff
TEST_RR_OP(rstsa16, x31, x30, x29, 0x0000000000000000, 0xefff002000084000, 0xfff700800001f7ff, x2, 592, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 75*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
