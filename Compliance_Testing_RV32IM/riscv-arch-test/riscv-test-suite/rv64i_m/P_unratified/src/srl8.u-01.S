
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srl8.u instruction of the RISC-V RV64PZicsr extension for the srl8.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srl8.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rd != rs2, rs1==x19, rs2==x9, rd==x19, rs2_val == 5, rs1_b5_val == 255, rs1_b3_val == 64, rs1_b1_val == 255, rs1_b0_val == 239, rs1_b2_val == 1
// opcode: srl8.u ; op1:x19; op2:x9; dest:x19; op1val:0xc13ff0d4001ffef;  op2val:0x5
TEST_RR_OP(srl8.u, x19, x19, x9, 0x0000000000000000, 0xc13ff0d4001ffef, 0x5, x8, 0, x10)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x6, rd==x31, rs2_val == 3, rs1_b1_val == 128, rs1_b2_val == 4, rs1_b7_val == 253
// opcode: srl8.u ; op1:x2; op2:x6; dest:x31; op1val:0xfd130e0907048003;  op2val:0x3
TEST_RR_OP(srl8.u, x31, x2, x6, 0x0000000000000000, 0xfd130e0907048003, 0x3, x8, 8, x10)

inst_2:
// rs1 == rs2 != rd, rs1==x28, rs2==x28, rd==x14, rs2_val == 6, rs1_b1_val == 64, rs1_b2_val == 223, rs1_b3_val == 170, rs1_b0_val == 251, rs1_b5_val == 8
// opcode: srl8.u ; op1:x28; op2:x28; dest:x14; op1val:0xf0a0807aadf40fb;  op2val:0x6
TEST_RR_OP(srl8.u, x14, x28, x28, 0x0000000000000000, 0xf0a0807aadf40fb, 0x6, x8, 16, x10)

inst_3:
// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rs2_val == 4, rs1_b3_val == 32, rs1_b7_val == 255, rs1_b5_val == 16, rs1_b2_val == 0, rs1_b1_val == 85
// opcode: srl8.u ; op1:x4; op2:x4; dest:x4; op1val:0xff0d1012200055ef;  op2val:0x4
TEST_RR_OP(srl8.u, x4, x4, x4, 0x0000000000000000, 0xff0d1012200055ef, 0x4, x8, 24, x10)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x2, rd==x2, rs2_val == 2, rs1_b4_val == 254, rs1_b7_val == 16, rs1_b5_val == 254, rs1_b2_val == 16, rs1_b3_val == 239
// opcode: srl8.u ; op1:x5; op2:x2; dest:x2; op1val:0x100afefeef100513;  op2val:0x2
TEST_RR_OP(srl8.u, x2, x5, x2, 0x0000000000000000, 0x100afefeef100513, 0x2, x8, 32, x10)

inst_5:
// rs1==x21, rs2==x18, rd==x30, rs2_val == 1, rs1_b5_val == 0, rs1_b3_val == 4, rs1_b6_val == 16, rs1_b7_val == 223, rs1_b4_val == 64, rs1_b1_val == 2, rs1_b2_val == 255
// opcode: srl8.u ; op1:x21; op2:x18; dest:x30; op1val:0xdf10004004ff020f;  op2val:0x1
TEST_RR_OP(srl8.u, x30, x21, x18, 0x0000000000000000, 0xdf10004004ff020f, 0x1, x8, 40, x10)

inst_6:
// rs1==x18, rs2==x7, rd==x22, rs1_b7_val == 170, rs1_b0_val == 1, rs1_b4_val == 247, rs1_b1_val == 0, rs1_b3_val == 85, rs1_b6_val == 85
// opcode: srl8.u ; op1:x18; op2:x7; dest:x22; op1val:0xaa550cf7550e0001;  op2val:0xe
TEST_RR_OP(srl8.u, x22, x18, x7, 0x0000000000000000, 0xaa550cf7550e0001, 0xe, x8, 48, x10)

inst_7:
// rs1==x1, rs2==x14, rd==x27, rs1_b7_val == 85, rs1_b2_val == 247, rs1_b3_val == 191, rs1_b1_val == 127
// opcode: srl8.u ; op1:x1; op2:x14; dest:x27; op1val:0x550afe06bff77f12;  op2val:0x4
TEST_RR_OP(srl8.u, x27, x1, x14, 0x0000000000000000, 0x550afe06bff77f12, 0x4, x8, 56, x10)

inst_8:
// rs1==x6, rs2==x29, rd==x24, rs1_b7_val == 127, rs1_b3_val == 128, rs1_b6_val == 251, rs1_b5_val == 239, rs1_b0_val == 254
// opcode: srl8.u ; op1:x6; op2:x29; dest:x24; op1val:0x7ffbef0a801205fe;  op2val:0xe
TEST_RR_OP(srl8.u, x24, x6, x29, 0x0000000000000000, 0x7ffbef0a801205fe, 0xe, x8, 64, x10)

inst_9:
// rs1==x9, rs2==x1, rd==x11, rs1_b7_val == 191, rs1_b0_val == 85, rs1_b4_val == 127, rs1_b5_val == 251
// opcode: srl8.u ; op1:x9; op2:x1; dest:x11; op1val:0xbf0ffb7f0f0e0d55;  op2val:0xe
TEST_RR_OP(srl8.u, x11, x9, x1, 0x0000000000000000, 0xbf0ffb7f0f0e0d55, 0xe, x8, 72, x10)

inst_10:
// rs1==x26, rs2==x3, rd==x12, rs1_b7_val == 239, rs1_b1_val == 239, rs1_b6_val == 127
// opcode: srl8.u ; op1:x26; op2:x3; dest:x12; op1val:0xef7f0c03ef0eefef;  op2val:0x3
TEST_RR_OP(srl8.u, x12, x26, x3, 0x0000000000000000, 0xef7f0c03ef0eefef, 0x3, x8, 80, x10)

inst_11:
// rs1==x13, rs2==x25, rd==x29, rs1_b7_val == 247, rs1_b0_val == 247, rs1_b3_val == 0, rs1_b6_val == 254, rs1_b5_val == 170
// opcode: srl8.u ; op1:x13; op2:x25; dest:x29; op1val:0xf7feaa0f000906f7;  op2val:0x6
TEST_RR_OP(srl8.u, x29, x13, x25, 0x0000000000000000, 0xf7feaa0f000906f7, 0x6, x8, 88, x10)

inst_12:
// rs1==x12, rs2==x21, rd==x5, rs1_b7_val == 251, rs1_b2_val == 128, rs1_b4_val == 0, rs1_b5_val == 253, rs1_b0_val == 253, rs1_b1_val == 170
// opcode: srl8.u ; op1:x12; op2:x21; dest:x5; op1val:0xfb03fd000380aafd;  op2val:0xa
TEST_RR_OP(srl8.u, x5, x12, x21, 0x0000000000000000, 0xfb03fd000380aafd, 0xa, x8, 96, x10)

inst_13:
// rs1==x29, rs2==x13, rd==x21, rs1_b7_val == 254, rs1_b2_val == 127, rs1_b1_val == 251
// opcode: srl8.u ; op1:x29; op2:x13; dest:x21; op1val:0xfefb0f0c207ffb13;  op2val:0x7
TEST_RR_OP(srl8.u, x21, x29, x13, 0x0000000000000000, 0xfefb0f0c207ffb13, 0x7, x8, 104, x10)

inst_14:
// rs1==x3, rs2==x19, rd==x1, rs1_b7_val == 128, rs1_b2_val == 253
// opcode: srl8.u ; op1:x3; op2:x19; dest:x1; op1val:0x8055fe0b40fd0a0d;  op2val:0x11
TEST_RR_OP(srl8.u, x1, x3, x19, 0x0000000000000000, 0x8055fe0b40fd0a0d, 0x11, x8, 112, x10)

inst_15:
// rs1==x16, rs2==x26, rd==x9, rs1_b7_val == 64, rs1_b6_val == 247, rs1_b0_val == 127, rs1_b3_val == 251
// opcode: srl8.u ; op1:x16; op2:x26; dest:x9; op1val:0x40f70d09fb01ff7f;  op2val:0xf
TEST_RR_OP(srl8.u, x9, x16, x26, 0x0000000000000000, 0x40f70d09fb01ff7f, 0xf, x8, 120, x10)

inst_16:
// rs1==x31, rs2==x15, rd==x7, rs1_b7_val == 32, rs1_b0_val == 8, rs1_b2_val == 85
// opcode: srl8.u ; op1:x31; op2:x15; dest:x7; op1val:0x201206400e550d08;  op2val:0x0
TEST_RR_OP(srl8.u, x7, x31, x15, 0x0000000000000000, 0x201206400e550d08, 0x0, x8, 128, x10)

inst_17:
// rs1==x7, rs2==x11, rd==x23, rs1_b7_val == 8, rs1_b6_val == 170, rs1_b1_val == 16
// opcode: srl8.u ; op1:x7; op2:x11; dest:x23; op1val:0x8aaff0f0a80100c;  op2val:0xc
TEST_RR_OP(srl8.u, x23, x7, x11, 0x0000000000000000, 0x8aaff0f0a80100c, 0xc, x8, 136, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_18:
// rs1==x15, rs2==x24, rd==x6, rs1_b7_val == 4, rs1_b1_val == 247, rs1_b0_val == 32, rs1_b3_val == 254
// opcode: srl8.u ; op1:x15; op2:x24; dest:x6; op1val:0x40d1212fe09f720;  op2val:0x10
TEST_RR_OP(srl8.u, x6, x15, x24, 0x0000000000000000, 0x40d1212fe09f720, 0x10, x1, 0, x2)

inst_19:
// rs1==x27, rs2==x10, rd==x15, rs1_b7_val == 2, 
// opcode: srl8.u ; op1:x27; op2:x10; dest:x15; op1val:0x21013000c03070f;  op2val:0x3
TEST_RR_OP(srl8.u, x15, x27, x10, 0x0000000000000000, 0x21013000c03070f, 0x3, x1, 8, x2)

inst_20:
// rs1==x11, rs2==x22, rd==x17, rs1_b7_val == 1, rs1_b2_val == 2, rs1_b5_val == 2
// opcode: srl8.u ; op1:x11; op2:x22; dest:x17; op1val:0x17f020cbf021213;  op2val:0x9
TEST_RR_OP(srl8.u, x17, x11, x22, 0x0000000000000000, 0x17f020cbf021213, 0x9, x1, 16, x2)

inst_21:
// rs1==x17, rs2==x23, rd==x25, rs1_b7_val == 0, 
// opcode: srl8.u ; op1:x17; op2:x23; dest:x25; op1val:0xfb0f09effdef55;  op2val:0x7
TEST_RR_OP(srl8.u, x25, x17, x23, 0x0000000000000000, 0xfb0f09effdef55, 0x7, x1, 24, x2)

inst_22:
// rs1==x24, rs2==x12, rd==x20, rs1_b6_val == 191, 
// opcode: srl8.u ; op1:x24; op2:x12; dest:x20; op1val:0xebf12130b110f55;  op2val:0x2
TEST_RR_OP(srl8.u, x20, x24, x12, 0x0000000000000000, 0xebf12130b110f55, 0x2, x1, 32, x2)

inst_23:
// rs1==x20, rs2==x0, rd==x26, rs1_b6_val == 223, rs1_b3_val == 223
// opcode: srl8.u ; op1:x20; op2:x0; dest:x26; op1val:0xaadfff0bdf0305f7;  op2val:0x0
TEST_RR_OP(srl8.u, x26, x20, x0, 0x0000000000000000, 0xaadfff0bdf0305f7, 0x0, x1, 40, x2)

inst_24:
// rs1==x8, rs2==x31, rd==x10, rs1_b6_val == 239, rs1_b5_val == 191, rs1_b1_val == 223, rs1_b4_val == 191, rs1_b3_val == 2
// opcode: srl8.u ; op1:x8; op2:x31; dest:x10; op1val:0x55efbfbf0209dffd;  op2val:0x10
TEST_RR_OP(srl8.u, x10, x8, x31, 0x0000000000000000, 0x55efbfbf0209dffd, 0x10, x1, 48, x2)

inst_25:
// rs1==x25, rs2==x30, rd==x8, rs1_b6_val == 253, rs1_b2_val == 251, rs1_b1_val == 4, rs1_b0_val == 191, rs1_b5_val == 1
// opcode: srl8.u ; op1:x25; op2:x30; dest:x8; op1val:0xfbfd010503fb04bf;  op2val:0xd
TEST_RR_OP(srl8.u, x8, x25, x30, 0x0000000000000000, 0xfbfd010503fb04bf, 0xd, x1, 56, x2)

inst_26:
// rs1==x14, rs2==x27, rd==x0, rs1_b6_val == 128, rs1_b5_val == 223, rs1_b4_val == 239
// opcode: srl8.u ; op1:x14; op2:x27; dest:x0; op1val:0x2080dfefaaf70212;  op2val:0xd
TEST_RR_OP(srl8.u, x0, x14, x27, 0x0000000000000000, 0x2080dfefaaf70212, 0xd, x1, 64, x2)

inst_27:
// rs1==x0, rs2==x20, rd==x16, rs1_b1_val == 191, rs1_b4_val == 255
// opcode: srl8.u ; op1:x0; op2:x20; dest:x16; op1val:0x6fd0bff800ebf03;  op2val:0x13
TEST_RR_OP(srl8.u, x16, x0, x20, 0x0000000000000000, 0x6fd0bff800ebf03, 0x13, x1, 72, x2)

inst_28:
// rs1==x10, rs2==x8, rd==x13, rs1_b1_val == 253, rs1_b4_val == 251, rs1_b6_val == 255
// opcode: srl8.u ; op1:x10; op2:x8; dest:x13; op1val:0x7fff05fb1312fd7f;  op2val:0x9
TEST_RR_OP(srl8.u, x13, x10, x8, 0x0000000000000000, 0x7fff05fb1312fd7f, 0x9, x1, 80, x2)

inst_29:
// rs1==x30, rs2==x16, rd==x28, rs1_b1_val == 254, 
// opcode: srl8.u ; op1:x30; op2:x16; dest:x28; op1val:0xdffd100680f7fe06;  op2val:0x0
TEST_RR_OP(srl8.u, x28, x30, x16, 0x0000000000000000, 0xdffd100680f7fe06, 0x0, x1, 88, x2)

inst_30:
// rs1==x23, rs2==x5, rd==x3, rs1_b1_val == 32, rs1_b6_val == 4, rs1_b0_val == 2, rs1_b2_val == 64
// opcode: srl8.u ; op1:x23; op2:x5; dest:x3; op1val:0xfd04fb070e402002;  op2val:0xf
TEST_RR_OP(srl8.u, x3, x23, x5, 0x0000000000000000, 0xfd04fb070e402002, 0xf, x1, 96, x2)

inst_31:
// rs1==x22, rs2==x17, rd==x18, rs1_b1_val == 8, rs1_b0_val == 4, rs1_b4_val == 223
// opcode: srl8.u ; op1:x22; op2:x17; dest:x18; op1val:0xb07dfdf0bfb0804;  op2val:0x10
TEST_RR_OP(srl8.u, x18, x22, x17, 0x0000000000000000, 0xb07dfdf0bfb0804, 0x10, x1, 104, x2)

inst_32:
// rs1_b1_val == 1, rs1_b0_val == 0
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xb0d0e06bff70100;  op2val:0x1
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xb0d0e06bff70100, 0x1, x1, 112, x2)

inst_33:
// rs1_b0_val == 170, rs1_b3_val == 8, rs1_b4_val == 32
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xcff0d200804bfaa;  op2val:0xc
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xcff0d200804bfaa, 0xc, x1, 120, x2)

inst_34:
// rs1_b0_val == 223, rs1_b4_val == 170, rs1_b2_val == 170
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfe0f0eaaefaa0edf;  op2val:0x1
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xfe0f0eaaefaa0edf, 0x1, x1, 128, x2)

inst_35:
// rs1_b0_val == 128, rs1_b4_val == 4, rs1_b6_val == 0
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xbf00fb0408130580;  op2val:0x4
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xbf00fb0408130580, 0x4, x1, 136, x2)

inst_36:
// rs1_b0_val == 64, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfe090baafe131240;  op2val:0xc
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xfe090baafe131240, 0xc, x1, 144, x2)

inst_37:
// rs1_b0_val == 16, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfedf0212df558010;  op2val:0x5
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xfedf0212df558010, 0x5, x1, 152, x2)

inst_38:
// rs1_b4_val == 85, rs1_b5_val == 247
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xd00f7550803ef13;  op2val:0x2
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xd00f7550803ef13, 0x2, x1, 160, x2)

inst_39:
// rs1_b4_val == 253, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0x120a02fd0a050d0a;  op2val:0x10
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0x120a02fd0a050d0a, 0x10, x1, 168, x2)

inst_40:
// rs1_b4_val == 128, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xdf06df80bf800c0f;  op2val:0x7
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xdf06df80bf800c0f, 0x7, x1, 176, x2)

inst_41:
// rs1_b4_val == 16, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xa0faa1007aa1020;  op2val:0x3
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xa0faa1007aa1020, 0x3, x1, 184, x2)

inst_42:
// rs1_b4_val == 8, rs1_b5_val == 64
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0x10fe400812010d13;  op2val:0x0
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0x10fe400812010d13, 0x0, x1, 192, x2)

inst_43:
// rs1_b4_val == 2, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xf70009020403bf7f;  op2val:0x10
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xf70009020403bf7f, 0x10, x1, 200, x2)

inst_44:
// rs1_b4_val == 1, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xb09090120fb1101;  op2val:0x1
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xb09090120fb1101, 0x1, x1, 208, x2)

inst_45:
// rs1_b3_val == 127, rs1_b5_val == 127, rs1_b6_val == 2
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0x10027f037f028003;  op2val:0x9
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0x10027f037f028003, 0x9, x1, 216, x2)

inst_46:
// rs1_b3_val == 247, rs1_b2_val == 8
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0x10deffff70811ef;  op2val:0x10
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0x10deffff70811ef, 0x10, x1, 224, x2)

inst_47:
// rs1_b5_val == 128, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xe80800755fd0afb;  op2val:0xd
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xe80800755fd0afb, 0xd, x1, 232, x2)

inst_48:
// rs1_b3_val == 253, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xbffd1000fd07df13;  op2val:0xa
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xbffd1000fd07df13, 0xa, x1, 240, x2)

inst_49:
// rs1_b3_val == 16, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0x40fe121310090ebf;  op2val:0x11
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0x40fe121310090ebf, 0x11, x1, 248, x2)

inst_50:
// rs1_b0_val == 255, rs1_b5_val == 85
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0x120e5512bf8008ff;  op2val:0x1
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0x120e5512bf8008ff, 0x1, x1, 256, x2)

inst_51:
// rs1_b6_val == 64, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7405509fb120806;  op2val:0xc
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xf7405509fb120806, 0xc, x1, 264, x2)

inst_52:
// rs1_b6_val == 32, rs1_b3_val == 1
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0x420110001070cfb;  op2val:0x3
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0x420110001070cfb, 0x3, x1, 272, x2)

inst_53:
// rs1_b6_val == 8, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xe080c07200ceffe;  op2val:0xc
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xe080c07200ceffe, 0xc, x1, 280, x2)

inst_54:
// rs1_b3_val == 255, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0x17ffe0cff095580;  op2val:0xe
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0x17ffe0cff095580, 0xe, x1, 288, x2)

inst_55:
// rs1_b2_val == 254, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0x411ff8004fe0803;  op2val:0xd
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0x411ff8004fe0803, 0xd, x1, 296, x2)

inst_56:
// rs1_b2_val == 191, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0x311ff06fdbffdfb;  op2val:0x10
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0x311ff06fdbffdfb, 0x10, x1, 304, x2)

inst_57:
// rs1_b2_val == 32, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfe044008bf20f703;  op2val:0x4
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xfe044008bf20f703, 0x4, x1, 312, x2)

inst_58:
// rs1_b5_val == 32, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0x1205202006120040;  op2val:0x11
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0x1205202006120040, 0x11, x1, 320, x2)

inst_59:
// rs1_b6_val == 1, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xff010c030d0e0210;  op2val:0x0
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xff010c030d0e0210, 0x0, x1, 328, x2)

inst_60:
// rs1_b5_val == 4, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0x680040d13fb01f7;  op2val:0xa
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0x680040d13fb01f7, 0xa, x1, 336, x2)

inst_61:
// rs1_b2_val == 239, 
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0x100055fbdfef0a02;  op2val:0x1
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0x100055fbdfef0a02, 0x1, x1, 344, x2)

inst_62:
// rs2_val == 6, rs1_b1_val == 64, rs1_b2_val == 223, rs1_b3_val == 170, rs1_b0_val == 251, rs1_b5_val == 8
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xf0a0807aadf40fb;  op2val:0x6
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xf0a0807aadf40fb, 0x6, x1, 352, x2)

inst_63:
// rs2_val == 4, rs1_b3_val == 32, rs1_b7_val == 255, rs1_b5_val == 16, rs1_b2_val == 0, rs1_b1_val == 85
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0xff0d1012200055ef;  op2val:0x4
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0xff0d1012200055ef, 0x4, x1, 360, x2)

inst_64:
// rs1_b6_val == 128, rs1_b5_val == 223, rs1_b4_val == 239
// opcode: srl8.u ; op1:x30; op2:x29; dest:x31; op1val:0x2080dfefaaf70212;  op2val:0xd
TEST_RR_OP(srl8.u, x31, x30, x29, 0x0000000000000000, 0x2080dfefaaf70212, 0xd, x1, 368, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 47*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
