
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the khmtt instruction of the RISC-V RV64PZicsr extension for the khmtt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",khmtt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x16,signature_x16_1)

inst_0:
// rs1 == rd != rs2, rs1==x8, rs2==x9, rd==x8, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -33, rs1_h2_val != rs2_h2_val, rs2_h0_val == -16385, rs1_h2_val == 16, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs2_h2_val == 16384, rs1_h1_val == 2, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h3_val == -17, rs2_h1_val == 16
// opcode: khmtt ; op1:x8; op2:x9; dest:x8; op1val:0xffef001000028000;  op2val:0xffdf40000010bfff
TEST_PKRR_OP(khmtt, x8, x8, x9, 0x0000000000000000, 0xffef001000028000, 0xffdf40000010bfff, x8, x16, 0, x18)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x11, rs2==x5, rd==x9, rs1_h3_val == rs2_h3_val, rs2_h3_val == -9, rs1_h2_val == 64, rs2_h1_val == -33, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == 2048, rs1_h0_val == 21845, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h3_val == -9
// opcode: khmtt ; op1:x11; op2:x5; dest:x9; op1val:0xfff70040fffa5555;  op2val:0xfff70800ffdffff6
TEST_PKRR_OP(khmtt, x9, x11, x5, 0x0000000000000000, 0xfff70040fffa5555, 0xfff70800ffdffff6, x11, x16, 16, x18)

inst_2:
// rs1 == rs2 != rd, rs1==x25, rs2==x25, rd==x12, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == 4, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h3_val == 8, rs1_h1_val == -2049, rs2_h2_val == 4
// opcode: khmtt ; op1:x25; op2:x25; dest:x12; op1val:0xfff80007f7fffffc;  op2val:0x08000400040006
TEST_PKRR_OP(khmtt, x12, x25, x25, 0x0000000000000000, 0xfff80007f7fffffc, 0x08000400040006, x25, x16, 32, x18)

inst_3:
// rs1 == rs2 == rd, rs1==x14, rs2==x14, rd==x14, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 256, rs2_h3_val == -129, rs1_h0_val == -2, rs1_h2_val == 0, rs2_h2_val == 8192, rs2_h1_val == -32768, rs1_h1_val == -1
// opcode: khmtt ; op1:x14; op2:x14; dest:x14; op1val:0x1000000fffffffe;  op2val:0xff7f200080000003
TEST_PKRR_OP(khmtt, x14, x14, x14, 0x0000000000000000, 0x1000000fffffffe, 0xff7f200080000003, x14, x16, 48, x18)

inst_4:
// rs2 == rd != rs1, rs1==x24, rs2==x10, rd==x10, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 1024, rs2_h1_val == 0, rs1_h2_val == 21845, rs2_h0_val == -17, rs2_h3_val == 128, rs1_h1_val == -257, rs2_h2_val == 1
// opcode: khmtt ; op1:x24; op2:x10; dest:x10; op1val:0x4005555feff0009;  op2val:0x8000010000ffef
TEST_PKRR_OP(khmtt, x10, x24, x10, 0x0000000000000000, 0x4005555feff0009, 0x8000010000ffef, x24, x16, 64, x18)

inst_5:
// rs1==x23, rs2==x2, rd==x20, rs1_h2_val == rs2_h2_val, rs1_h1_val == 0, rs1_h3_val == -21846, rs2_h1_val == 32767, rs1_h0_val == -8193
// opcode: khmtt ; op1:x23; op2:x2; dest:x20; op1val:0xaaaa00070000dfff;  op2val:0xfffa00077ffffff8
TEST_PKRR_OP(khmtt, x20, x23, x2, 0x0000000000000000, 0xaaaa00070000dfff, 0xfffa00077ffffff8, x23, x16, 80, x18)

inst_6:
// rs1==x21, rs2==x15, rd==x6, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h1_val == -21846, rs2_h3_val == -257, rs1_h3_val == -257, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 256, rs1_h2_val == -65
// opcode: khmtt ; op1:x21; op2:x15; dest:x6; op1val:0xfeffffbffffc3fff;  op2val:0xfeff3fffaaaa0100
TEST_PKRR_OP(khmtt, x6, x21, x15, 0x0000000000000000, 0xfeffffbffffc3fff, 0xfeff3fffaaaa0100, x21, x16, 96, x18)

inst_7:
// rs1==x19, rs2==x29, rd==x13, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h2_val == -2049, rs1_h3_val == 16, rs2_h1_val == -257, rs2_h0_val == -9, rs1_h2_val == -5, rs1_h1_val == -33
// opcode: khmtt ; op1:x19; op2:x29; dest:x13; op1val:0x10fffbffdf3fff;  op2val:0xfff8f7fffefffff7
TEST_PKRR_OP(khmtt, x13, x19, x29, 0x0000000000000000, 0x10fffbffdf3fff, 0xfff8f7fffefffff7, x19, x16, 112, x18)

inst_8:
// rs1==x10, rs2==x7, rd==x27, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val == 4096, rs2_h0_val == 32767, rs1_h0_val == 1024, rs1_h3_val == -8193, rs1_h2_val == 32767, rs2_h2_val == -32768, rs2_h1_val == 2048
// opcode: khmtt ; op1:x10; op2:x7; dest:x27; op1val:0xdfff7fff10000400;  op2val:0xfff9800008007fff
TEST_PKRR_OP(khmtt, x27, x10, x7, 0x0000000000000000, 0xdfff7fff10000400, 0xfff9800008007fff, x10, x16, 128, x18)

inst_9:
// rs1==x17, rs2==x4, rd==x1, rs1_h1_val == rs2_h1_val, rs1_h1_val == 64, rs1_h2_val == -257, rs2_h0_val == -2, rs2_h3_val == -21846, rs1_h0_val == -4097, rs2_h1_val == 64
// opcode: khmtt ; op1:x17; op2:x4; dest:x1; op1val:0x10feff0040efff;  op2val:0xaaaa00010040fffe
TEST_PKRR_OP(khmtt, x1, x17, x4, 0x0000000000000000, 0x10feff0040efff, 0xaaaa00010040fffe, x17, x16, 144, x18)

inst_10:
// rs1==x13, rs2==x21, rd==x11, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val == 8192, rs1_h3_val == 128
// opcode: khmtt ; op1:x13; op2:x21; dest:x11; op1val:0x8020003fffdfff;  op2val:0x3fff0004aaaa0009
TEST_PKRR_OP(khmtt, x11, x13, x21, 0x0000000000000000, 0x8020003fffdfff, 0x3fff0004aaaa0009, x13, x16, 160, x18)

inst_11:
// rs1==x30, rs2==x26, rd==x24, rs1_h0_val == rs2_h0_val, rs1_h0_val == 2048, rs1_h1_val == -16385, rs1_h2_val == -513, rs2_h2_val == 512, rs2_h0_val == 2048, rs2_h3_val == -8193
// opcode: khmtt ; op1:x30; op2:x26; dest:x24; op1val:0x05fdffbfff0800;  op2val:0xdfff020000090800
TEST_PKRR_OP(khmtt, x24, x30, x26, 0x0000000000000000, 0x05fdffbfff0800, 0xdfff020000090800, x30, x16, 176, x18)

inst_12:
// rs1==x27, rs2==x1, rd==x15, rs2_h3_val == 21845, rs2_h1_val == -8193, rs1_h0_val == 4096, rs2_h2_val == -5, rs2_h0_val == -129, rs1_h2_val == -1, rs1_h3_val == 8192
// opcode: khmtt ; op1:x27; op2:x1; dest:x15; op1val:0x2000ffffffdf1000;  op2val:0x5555fffbdfffff7f
TEST_PKRR_OP(khmtt, x15, x27, x1, 0x0000000000000000, 0x2000ffffffdf1000, 0x5555fffbdfffff7f, x27, x16, 192, x18)

inst_13:
// rs1==x3, rs2==x8, rd==x0, rs2_h3_val == 32767, rs1_h0_val == 32, rs2_h0_val == 0, rs2_h2_val == -2, rs2_h1_val == -2049
// opcode: khmtt ; op1:x3; op2:x8; dest:x0; op1val:0x100fff600090020;  op2val:0x7ffffffef7ff0000
TEST_PKRR_OP(khmtt, x0, x3, x8, 0x0000000000000000, 0x100fff600090020, 0x7ffffffef7ff0000, x3, x16, 208, x18)

inst_14:
// rs1==x26, rs2==x17, rd==x7, rs2_h3_val == -16385, rs2_h1_val == 1, rs2_h0_val == 8, rs1_h2_val == -9
// opcode: khmtt ; op1:x26; op2:x17; dest:x7; op1val:0x09fff7fefffffe;  op2val:0xbfff000100010008
TEST_PKRR_OP(khmtt, x7, x26, x17, 0x0000000000000000, 0x09fff7fefffffe, 0xbfff000100010008, x26, x16, 224, x3)

inst_15:
// rs1==x22, rs2==x0, rd==x5, rs2_h3_val == -4097, rs1_h1_val == -3, rs1_h0_val == 8
// opcode: khmtt ; op1:x22; op2:x0; dest:x5; op1val:0xfffac000fffd0008;  op2val:0xeffffffb7ffffffe
TEST_PKRR_OP(khmtt, x5, x22, x0, 0x0000000000000000, 0xfffac000fffd0008, 0xeffffffb7ffffffe, x22, x16, 240, x3)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_16:
// rs1==x1, rs2==x12, rd==x25, rs2_h3_val == -2049, rs2_h0_val == 32, rs1_h0_val == 128, rs1_h2_val == -1025, rs2_h1_val == 16384, rs1_h3_val == -33, rs1_h1_val == -513
// opcode: khmtt ; op1:x1; op2:x12; dest:x25; op1val:0xffdffbfffdff0080;  op2val:0xf7ff000340000020
TEST_PKRR_OP(khmtt, x25, x1, x12, 0x0000000000000000, 0xffdffbfffdff0080, 0xf7ff000340000020, x1, x8, 0, x3)

inst_17:
// rs1==x29, rs2==x20, rd==x30, rs2_h3_val == -1025, rs2_h1_val == -5, rs2_h2_val == -1025, rs1_h0_val == -21846, rs2_h0_val == 21845
// opcode: khmtt ; op1:x29; op2:x20; dest:x30; op1val:0xfffa5555fff6aaaa;  op2val:0xfbfffbfffffb5555
TEST_PKRR_OP(khmtt, x30, x29, x20, 0x0000000000000000, 0xfffa5555fff6aaaa, 0xfbfffbfffffb5555, x29, x8, 16, x3)

inst_18:
// rs1==x16, rs2==x28, rd==x22, rs2_h3_val == -513, rs1_h3_val == -1025, rs1_h0_val == -1025
// opcode: khmtt ; op1:x16; op2:x28; dest:x22; op1val:0xfbff0010bffffbff;  op2val:0xfdff000380000009
TEST_PKRR_OP(khmtt, x22, x16, x28, 0x0000000000000000, 0xfbff0010bffffbff, 0xfdff000380000009, x16, x8, 32, x3)

inst_19:
// rs1==x9, rs2==x31, rd==x23, rs2_h3_val == -65, rs2_h0_val == 512
// opcode: khmtt ; op1:x9; op2:x31; dest:x23; op1val:0xfff8fdfffff9fffe;  op2val:0xffbffff8fff80200
TEST_PKRR_OP(khmtt, x23, x9, x31, 0x0000000000000000, 0xfff8fdfffff9fffe, 0xffbffff8fff80200, x9, x8, 48, x3)

inst_20:
// rs1==x4, rs2==x16, rd==x28, rs2_h3_val == -17, rs2_h2_val == -65, rs1_h1_val == 512, rs2_h0_val == 1
// opcode: khmtt ; op1:x4; op2:x16; dest:x28; op1val:0xaaaa000702000007;  op2val:0xffefffbffff80001
TEST_PKRR_OP(khmtt, x28, x4, x16, 0x0000000000000000, 0xaaaa000702000007, 0xffefffbffff80001, x4, x8, 64, x3)

inst_21:
// rs1==x5, rs2==x6, rd==x21, rs2_h3_val == -5, rs1_h3_val == 4, rs1_h1_val == 1, rs1_h0_val == -3, rs1_h2_val == -32768
// opcode: khmtt ; op1:x5; op2:x6; dest:x21; op1val:0x0480000001fffd;  op2val:0xfffbfffe00090006
TEST_PKRR_OP(khmtt, x21, x5, x6, 0x0000000000000000, 0x0480000001fffd, 0xfffbfffe00090006, x5, x8, 80, x3)

inst_22:
// rs1==x15, rs2==x30, rd==x31, rs2_h3_val == -3, rs2_h0_val == 64, rs1_h3_val == 512, rs1_h1_val == -2, rs2_h2_val == -257, rs2_h1_val == -2, rs1_h0_val == 32767, rs1_h2_val == -17
// opcode: khmtt ; op1:x15; op2:x30; dest:x31; op1val:0x200ffeffffe7fff;  op2val:0xfffdfefffffe0040
TEST_PKRR_OP(khmtt, x31, x15, x30, 0x0000000000000000, 0x200ffeffffe7fff, 0xfffdfefffffe0040, x15, x8, 96, x3)

inst_23:
// rs1==x31, rs2==x11, rd==x29, rs2_h3_val == -2, rs2_h0_val == 8192, rs1_h0_val == -257
// opcode: khmtt ; op1:x31; op2:x11; dest:x29; op1val:0x80fff60001feff;  op2val:0xfffe0004feff2000
TEST_PKRR_OP(khmtt, x29, x31, x11, 0x0000000000000000, 0x80fff60001feff, 0xfffe0004feff2000, x31, x8, 112, x3)

inst_24:
// rs1==x2, rs2==x27, rd==x19, rs2_h3_val == -32768, rs2_h2_val == -16385, rs2_h0_val == -513
// opcode: khmtt ; op1:x2; op2:x27; dest:x19; op1val:0x3fff0007f7fffffc;  op2val:0x8000bffffff9fdff
TEST_PKRR_OP(khmtt, x19, x2, x27, 0x0000000000000000, 0x3fff0007f7fffffc, 0x8000bffffff9fdff, x2, x8, 128, x3)

inst_25:
// rs1==x6, rs2==x22, rd==x17, rs2_h3_val == 16384, rs2_h2_val == 64, rs1_h1_val == 256, rs1_h2_val == -2, rs1_h0_val == 16384
// opcode: khmtt ; op1:x6; op2:x22; dest:x17; op1val:0x100fffe01004000;  op2val:0x40000040feff0003
TEST_PKRR_OP(khmtt, x17, x6, x22, 0x0000000000000000, 0x100fffe01004000, 0x40000040feff0003, x6, x8, 144, x3)

inst_26:
// rs1==x28, rs2==x18, rd==x16, rs2_h3_val == 8192, rs1_h2_val == 4096, rs1_h3_val == -513, rs2_h2_val == 4096, rs2_h1_val == 1024, rs1_h0_val == -2049
// opcode: khmtt ; op1:x28; op2:x18; dest:x16; op1val:0xfdff1000fefff7ff;  op2val:0x2000100004000800
TEST_PKRR_OP(khmtt, x16, x28, x18, 0x0000000000000000, 0xfdff1000fefff7ff, 0x2000100004000800, x28, x8, 160, x3)

inst_27:
// rs1==x18, rs2==x13, rd==x26, rs2_h3_val == 4096, rs2_h1_val == 4096, rs1_h0_val == -1
// opcode: khmtt ; op1:x18; op2:x13; dest:x26; op1val:0x03fefffeffffff;  op2val:0x1000400010000000
TEST_PKRR_OP(khmtt, x26, x18, x13, 0x0000000000000000, 0x03fefffeffffff, 0x1000400010000000, x18, x8, 176, x3)

inst_28:
// rs1==x7, rs2==x23, rd==x3, rs2_h3_val == 2048, rs1_h0_val == -16385, rs2_h2_val == 32, rs2_h1_val == 128
// opcode: khmtt ; op1:x7; op2:x23; dest:x3; op1val:0xfff6fff70001bfff;  op2val:0x800002000800000
TEST_PKRR_OP(khmtt, x3, x7, x23, 0x0000000000000000, 0xfff6fff70001bfff, 0x800002000800000, x7, x8, 192, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x20, rs2==x3, rd==x4, rs2_h3_val == 1024, rs1_h2_val == 8, rs2_h1_val == 8
// opcode: khmtt ; op1:x20; op2:x3; dest:x4; op1val:0xdfff000801000008;  op2val:0x400f7ff00080005
TEST_PKRR_OP(khmtt, x4, x20, x3, 0x0000000000000000, 0xdfff000801000008, 0x400f7ff00080005, x20, x1, 0, x5)

inst_30:
// rs1==x0, rs2==x19, rd==x2, rs2_h3_val == 512, rs1_h1_val == -8193, rs2_h2_val == -9, rs2_h1_val == 32
// opcode: khmtt ; op1:x0; op2:x19; dest:x2; op1val:0xfdffffefdfffefff;  op2val:0x200fff700202000
TEST_PKRR_OP(khmtt, x2, x0, x19, 0x0000000000000000, 0xfdffffefdfffefff, 0x200fff700202000, x0, x1, 16, x5)

inst_31:
// rs1==x12, rs2==x24, rd==x18, rs2_h3_val == 256, rs1_h3_val == 32767, rs1_h0_val == 2, rs2_h0_val == 128
// opcode: khmtt ; op1:x12; op2:x24; dest:x18; op1val:0x7fff000600010002;  op2val:0x100fffe00070080
TEST_PKRR_OP(khmtt, x18, x12, x24, 0x0000000000000000, 0x7fff000600010002, 0x100fffe00070080, x12, x1, 32, x5)

inst_32:
// rs2_h3_val == 64, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xc0000005fff6fff9;  op2val:0x402000f7ff0020
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xc0000005fff6fff9, 0x402000f7ff0020, x30, x1, 48, x5)

inst_33:
// rs2_h3_val == 32, rs1_h0_val == -5
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x108000dffffffb;  op2val:0x20fff7fff6bfff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x108000dffffffb, 0x20fff7fff6bfff, x30, x1, 64, x5)

inst_34:
// rs2_h3_val == 16, rs2_h2_val == 2, rs1_h1_val == -17
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0003ffef0008;  op2val:0x100002fff90006
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xaaaa0003ffef0008, 0x100002fff90006, x30, x1, 80, x5)

inst_35:
// rs2_h3_val == 4, rs2_h2_val == 8
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x10fffeffdff7ff;  op2val:0x040008aaaa0040
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x10fffeffdff7ff, 0x040008aaaa0040, x30, x1, 96, x5)

inst_36:
// rs1_h1_val == -5, rs2_h2_val == -33, rs1_h3_val == 1, rs1_h2_val == 1024, rs2_h1_val == -4097
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x010400fffbfff8;  op2val:0xff7fffdfefff0001
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x010400fffbfff8, 0xff7fffdfefff0001, x30, x1, 112, x5)

inst_37:
// rs1_h1_val == -32768, rs1_h3_val == -5, rs2_h0_val == -21846, rs2_h2_val == 128
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfffb040080000009;  op2val:0x8000800040aaaa
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xfffb040080000009, 0x8000800040aaaa, x30, x1, 128, x5)

inst_38:
// rs1_h1_val == 16384, rs1_h2_val == 32, rs2_h0_val == -5
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfffc00204000feff;  op2val:0x20fbff0400fffb
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xfffc00204000feff, 0x20fbff0400fffb, x30, x1, 144, x5)

inst_39:
// rs1_h1_val == 8192, rs1_h2_val == -33, rs2_h0_val == -2049, rs2_h2_val == 256, rs1_h0_val == 64
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfffaffdf20000040;  op2val:0x2001000006f7ff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xfffaffdf20000040, 0x2001000006f7ff, x30, x1, 160, x5)

inst_40:
// rs1_h1_val == 2048, rs2_h2_val == -17, rs2_h0_val == -4097, rs1_h3_val == -16385, rs1_h2_val == -21846, rs1_h0_val == 16
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xbfffaaaa08000010;  op2val:0x05ffeffffcefff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xbfffaaaa08000010, 0x05ffeffffcefff, x30, x1, 176, x5)

inst_41:
// rs1_h1_val == 1024, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfff8000304005555;  op2val:0xfbfffffc40000005
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xfff8000304005555, 0xfbfffffc40000005, x30, x1, 192, x5)

inst_42:
// rs1_h1_val == 128, rs1_h0_val == -65, rs1_h2_val == 256
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x10001000080ffbf;  op2val:0x060002f7fffdff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x10001000080ffbf, 0x060002f7fffdff, x30, x1, 208, x5)

inst_43:
// rs1_h1_val == 32, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafeff00200010;  op2val:0xfffbfff71000fdff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xaaaafeff00200010, 0xfffbfff71000fdff, x30, x1, 224, x5)

inst_44:
// rs1_h1_val == 16, rs1_h2_val == -4097, rs1_h0_val == -513
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x400efff0010fdff;  op2val:0xff7ffffc04005555
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x400efff0010fdff, 0xff7ffffc04005555, x30, x1, 240, x5)

inst_45:
// rs1_h1_val == 8, rs2_h1_val == -513, rs2_h2_val == -513, rs2_h0_val == -257
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x10002000080040;  op2val:0xfff7fdfffdfffeff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x10002000080040, 0xfff7fdfffdfffeff, x30, x1, 256, x5)

inst_46:
// rs1_h1_val == 4, rs2_h0_val == -65, rs1_h0_val == 4
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffef00040004;  op2val:0xdffff7ff0009ffbf
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xbfffffef00040004, 0xdffff7ff0009ffbf, x30, x1, 272, x5)

inst_47:
// rs1_h0_val == -129, rs2_h1_val == 8192, rs1_h3_val == -4097
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xeffffff63fffff7f;  op2val:0xfffc3fff20000200
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xeffffff63fffff7f, 0xfffc3fff20000200, x30, x1, 288, x5)

inst_48:
// rs1_h0_val == -33, rs2_h2_val == -3, rs1_h2_val == 1
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x070001bfffffdf;  op2val:0xfff7fffd0003efff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x070001bfffffdf, 0xfff7fffd0003efff, x30, x1, 304, x5)

inst_49:
// rs1_h0_val == -17, rs2_h3_val == 0, rs2_h0_val == -1025, rs1_h2_val == 128
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x100080ffdfffef;  op2val:0x0080000000fbff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x100080ffdfffef, 0x0080000000fbff, x30, x1, 320, x5)

inst_50:
// rs1_h0_val == -9, rs2_h2_val == 1024, rs1_h3_val == 2048
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x80000098000fff7;  op2val:0xfff70400efff0003
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x80000098000fff7, 0xfff70400efff0003, x30, x1, 336, x5)

inst_51:
// rs1_h0_val == 8192, rs2_h2_val == -4097
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffc00012000;  op2val:0x3fffeffffff65555
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xfdfffffc00012000, 0x3fffeffffff65555, x30, x1, 352, x5)

inst_52:
// rs1_h0_val == 512, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x100ffef3fff0200;  op2val:0x200fff800100003
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x100ffef3fff0200, 0x200fff800100003, x30, x1, 368, x5)

inst_53:
// rs1_h0_val == 256, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfeff000900060100;  op2val:0xfff9fbff0020ffef
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xfeff000900060100, 0xfff9fbff0020ffef, x30, x1, 384, x5)

inst_54:
// rs1_h0_val == 1, rs2_h1_val == -129
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xefffffdf00010001;  op2val:0x03ffdfff7f0200
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xefffffdf00010001, 0x03ffdfff7f0200, x30, x1, 400, x5)

inst_55:
// rs1_h0_val == 0, rs2_h2_val == -8193, rs1_h2_val == 512
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0200ffff0000;  op2val:0xdfffdffffff9fffa
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xfffc0200ffff0000, 0xdfffdffffff9fffa, x30, x1, 416, x5)

inst_56:
// rs2_h3_val == 2, rs2_h0_val == -33
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x0602000006feff;  op2val:0x0200058000ffdf
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x0602000006feff, 0x0200058000ffdf, x30, x1, 432, x5)

inst_57:
// rs2_h1_val == 2, rs1_h2_val == -129, rs2_h2_val == -129
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ff7f02000040;  op2val:0x200ff7f0002f7ff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xfff7ff7f02000040, 0x200ff7f0002f7ff, x30, x1, 448, x5)

inst_58:
// rs2_h1_val == -1, rs2_h0_val == -8193
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfff62000bfff0400;  op2val:0x400005ffffdfff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xfff62000bfff0400, 0x400005ffffdfff, x30, x1, 464, x5)

inst_59:
// rs2_h0_val == -3, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0400fffe0800;  op2val:0x04fff60400fffd
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xbfff0400fffe0800, 0x04fff60400fffd, x30, x1, 480, x5)

inst_60:
// rs2_h0_val == -32768, rs1_h3_val == -65, rs1_h1_val == -4097
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffeffff7ff;  op2val:0x3fffdffffffc8000
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xffbfffffeffff7ff, 0x3fffdffffffc8000, x30, x1, 496, x5)

inst_61:
// rs2_h0_val == 16384, rs2_h2_val == 0
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x04fffffffc2000;  op2val:0x20000000fffb4000
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x04fffffffc2000, 0x20000000fffb4000, x30, x1, 512, x5)

inst_62:
// rs2_h0_val == 4096, rs1_h1_val == -65, rs1_h3_val == 4096
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffeffbffdff;  op2val:0x100000100101000
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x1000fffeffbffdff, 0x100000100101000, x30, x1, 528, x5)

inst_63:
// rs2_h0_val == 1024, rs2_h2_val == -1, rs2_h1_val == 21845
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x200fbff00060800;  op2val:0x08ffff55550400
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x200fbff00060800, 0x08ffff55550400, x30, x1, 544, x5)

inst_64:
// rs2_h0_val == 16, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x09fff90003fff9;  op2val:0xfffa00407fff0010
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x09fff90003fff9, 0xfffa00407fff0010, x30, x1, 560, x5)

inst_65:
// rs2_h0_val == 4, rs1_h3_val == -3, rs1_h2_val == 2048
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0800f7ff0100;  op2val:0xfff80080ffdf0004
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xfffd0800f7ff0100, 0xfff80080ffdf0004, x30, x1, 576, x5)

inst_66:
// rs2_h0_val == 2, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfffdc000c000fffd;  op2val:0xefffc00000080002
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xfffdc000c000fffd, 0xefffc00000080002, x30, x1, 592, x5)

inst_67:
// rs2_h0_val == -1, rs2_h2_val == 16, rs1_h3_val == 16384
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x40000006fdff0001;  op2val:0x0600100009ffff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x40000006fdff0001, 0x0600100009ffff, x30, x1, 608, x5)

inst_68:
// rs1_h3_val == 21845, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffff00400100;  op2val:0xfff7fffbfffefffd
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x5555ffff00400100, 0xfff7fffbfffefffd, x30, x1, 624, x5)

inst_69:
// rs1_h3_val == -2049, rs1_h1_val == -1025
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffafbff0004;  op2val:0xffef001008000005
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xf7fffffafbff0004, 0xffef001008000005, x30, x1, 640, x5)

inst_70:
// rs1_h3_val == -129, rs2_h1_val == -65
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffff93fff;  op2val:0x08feffffbf0200
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xff7ffffffff93fff, 0x08feffffbf0200, x30, x1, 656, x5)

inst_71:
// rs2_h3_val == 1, rs1_h2_val == -3
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x09fffdffdffffe;  op2val:0x01fffc80002000
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x09fffdffdffffe, 0x01fffc80002000, x30, x1, 672, x5)

inst_72:
// rs1_h1_val == -9, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x400fbfffff7fff8;  op2val:0x200fff9ffff0006
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x400fbfffff7fff8, 0x200fff9ffff0006, x30, x1, 688, x5)

inst_73:
// rs1_h3_val == 64, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x40001010000008;  op2val:0xefffffbffeff0010
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x40001010000008, 0xefffffbffeff0010, x30, x1, 704, x5)

inst_74:
// rs1_h3_val == 32, rs1_h2_val == -16385
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x20bfff0400fff8;  op2val:0xdfff8000fff90001
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x20bfff0400fff8, 0xdfff8000fff90001, x30, x1, 720, x5)

inst_75:
// rs1_h3_val == 8, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x085555f7ff0040;  op2val:0x10008000020009
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x085555f7ff0040, 0x10008000020009, x30, x1, 736, x5)

inst_76:
// rs1_h3_val == 2, rs2_h2_val == 21845
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x022000fffb0009;  op2val:0x055555c000aaaa
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x022000fffb0009, 0x055555c000aaaa, x30, x1, 752, x5)

inst_77:
// rs1_h3_val == 0, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x0004004000efff;  op2val:0xfff70002ffdffff6
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x0004004000efff, 0xfff70002ffdffff6, x30, x1, 768, x5)

inst_78:
// rs1_h3_val == -1, rs2_h1_val == 256
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffdffffe;  op2val:0xfffc001001000005
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xffffefffffdffffe, 0xfffc001001000005, x30, x1, 784, x5)

inst_79:
// rs1_h2_val == -8193, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00010007;  op2val:0xfffefffb4000fffa
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xffffdfff00010007, 0xfffefffb4000fffa, x30, x1, 800, x5)

inst_80:
// rs1_h2_val == -2049, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x3ffff7ff0001f7ff;  op2val:0xfff6feff00023fff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x3ffff7ff0001f7ff, 0xfff6feff00023fff, x30, x1, 816, x5)

inst_81:
// rs1_h2_val == 16384, rs1_h3_val == -2, rs2_h2_val == 32767
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfffe40000800fbff;  op2val:0x407fff0003dfff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xfffe40000800fbff, 0x407fff0003dfff, x30, x1, 832, x5)

inst_82:
// rs2_h1_val == -16385, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x5555dfffffdf0080;  op2val:0x4000fff7bfff4000
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x5555dfffffdf0080, 0x4000fff7bfff4000, x30, x1, 848, x5)

inst_83:
// rs2_h1_val == -1025, rs2_h2_val == -21846
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xffdf00053fff0007;  op2val:0x4000aaaafbff0400
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xffdf00053fff0007, 0x4000aaaafbff0400, x30, x1, 864, x5)

inst_84:
// rs1_h2_val == 4, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x8000040020dfff;  op2val:0x065555bfffdfff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x8000040020dfff, 0x065555bfffdfff, x30, x1, 880, x5)

inst_85:
// rs1_h2_val == 2, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x800002fff6fff8;  op2val:0x8007fffeffffffa
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x800002fff6fff8, 0x8007fffeffffffa, x30, x1, 896, x5)

inst_86:
// rs2_h1_val == -17, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0007f7ff0010;  op2val:0xaaaaffdfffeffff7
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xffbf0007f7ff0010, 0xaaaaffdfffeffff7, x30, x1, 912, x5)

inst_87:
// rs1_h3_val == -32768, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x80000001c0000006;  op2val:0x4000fdfff7ff8000
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x80000001c0000006, 0x4000fdfff7ff8000, x30, x1, 928, x5)

inst_88:
// rs2_h1_val == -9, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x098000ffff0400;  op2val:0xfdff4000fff7ffbf
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x098000ffff0400, 0xfdff4000fff7ffbf, x30, x1, 944, x5)

inst_89:
// rs2_h1_val == -3, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x094000fff90003;  op2val:0xfffbaaaafffdfff7
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x094000fff90003, 0xfffbaaaafffdfff7, x30, x1, 960, x5)

inst_90:
// rs1_h1_val == -21846, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x071000aaaa0000;  op2val:0x7ffffeff00040100
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x071000aaaa0000, 0x7ffffeff00040100, x30, x1, 976, x5)

inst_91:
// rs1_h1_val == 21845, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x80004055552000;  op2val:0xfffeffff3fff0020
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x80004055552000, 0xfffeffff3fff0020, x30, x1, 992, x5)

inst_92:
// rs2_h1_val == 512, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x0200100008fdff;  op2val:0xfff9020002000001
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x0200100008fdff, 0xfff9020002000001, x30, x1, 1008, x5)

inst_93:
// rs1_h1_val == 32767, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x2055557fffbfff;  op2val:0xffdfaaaa00030000
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x2055557fffbfff, 0xffdfaaaa00030000, x30, x1, 1024, x5)

inst_94:
// rs1_h1_val == -129, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0004ff7f0040;  op2val:0xff7fffbf5555aaaa
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xfffb0004ff7f0040, 0xff7fffbf5555aaaa, x30, x1, 1040, x5)

inst_95:
// rs2_h3_val == -1, 
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x08fffdfefffff9;  op2val:0xfffff7ff0010efff
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x08fffdfefffff9, 0xfffff7ff0010efff, x30, x1, 1056, x5)

inst_96:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 256, rs2_h3_val == -129, rs1_h0_val == -2, rs1_h2_val == 0, rs2_h2_val == 8192, rs2_h1_val == -32768, rs1_h1_val == -1
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffffe;  op2val:0xff7f200080000003
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x1000000fffffffe, 0xff7f200080000003, x30, x1, 1072, x5)

inst_97:
// rs2_h3_val == 32767, rs1_h0_val == 32, rs2_h0_val == 0, rs2_h2_val == -2, rs2_h1_val == -2049
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0x100fff600090020;  op2val:0x7ffffffef7ff0000
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0x100fff600090020, 0x7ffffffef7ff0000, x30, x1, 1088, x5)

inst_98:
// rs2_h3_val == -4097, rs1_h1_val == -3, rs1_h0_val == 8
// opcode: khmtt ; op1:x30; op2:x29; dest:x31; op1val:0xfffac000fffd0008;  op2val:0xeffffffb7ffffffe
TEST_PKRR_OP(khmtt, x31, x30, x29, 0x0000000000000000, 0xfffac000fffd0008, 0xeffffffb7ffffffe, x30, x1, 1104, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x16_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x16_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x8_0:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 140*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
