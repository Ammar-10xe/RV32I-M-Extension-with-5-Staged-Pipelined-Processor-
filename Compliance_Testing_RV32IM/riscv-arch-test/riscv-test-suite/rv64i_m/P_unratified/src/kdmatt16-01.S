
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kdmatt16 instruction of the RISC-V RV64PZicsr extension for the kdmatt16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kdmatt16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x10, rs2==x13, rd==x10, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h0_val == 32, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs1_h3_val == -21846, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h3_val == 2048, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -8193, rs1_h2_val == -65, rs2_h1_val == 512, rs2_h2_val == 0
// opcode: kdmatt16 ; op1:x10; op2:x13; dest:x10; op1val:0xaaaaffbfdfff8000;  op2val:0x800000002000020
TEST_PKRR_OP(kdmatt16, x10, x10, x13, 0x0000000000000000, 0xaaaaffbfdfff8000, 0x800000002000020, x10, x2, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x12, rs2==x11, rd==x21, rs1_h3_val == rs2_h3_val, rs2_h1_val == -8193, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h3_val == 1, rs2_h2_val == -3, rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val == -2049, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -2, rs2_h3_val == 1
// opcode: kdmatt16 ; op1:x12; op2:x11; dest:x21; op1val:0x01f7ffdffffff8;  op2val:0x01fffddffffffe
TEST_PKRR_OP(kdmatt16, x21, x12, x11, 0x0000000000000000, 0x01f7ffdffffff8, 0x01fffddffffffe, x12, x2, 16, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x22, rs2==x22, rd==x0, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -513, rs2_h0_val == -16385, rs2_h2_val == -5, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 32767, rs2_h1_val == 4096, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: kdmatt16 ; op1:x22; op2:x22; dest:x0; op1val:0xfff8fff67fff0003;  op2val:0xfdfffffb1000bfff
TEST_PKRR_OP(kdmatt16, x0, x22, x22, 0x0000000000000000, 0xfff8fff67fff0003, 0xfdfffffb1000bfff, x22, x2, 32, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h1_val == -32768, rs1_h3_val == 128, rs1_h2_val == rs2_h2_val, rs1_h0_val == -4097, rs2_h0_val == 256
// opcode: kdmatt16 ; op1:x1; op2:x1; dest:x1; op1val:0x80c0008000efff;  op2val:0xfff8c00000070100
TEST_PKRR_OP(kdmatt16, x1, x1, x1, 0x0000000000000000, 0x80c0008000efff, 0xfff8c00000070100, x1, x2, 48, x3)

inst_4:
// rs2 == rd != rs1, rs1==x9, rs2==x12, rd==x12, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val == 256, rs2_h0_val == 32767, rs1_h0_val == 8, rs2_h2_val == 1024, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == -2
// opcode: kdmatt16 ; op1:x9; op2:x12; dest:x12; op1val:0x100fffec0000008;  op2val:0xfffc0400c0007fff
TEST_PKRR_OP(kdmatt16, x12, x9, x12, 0x0000000000000000, 0x100fffec0000008, 0xfffc0400c0007fff, x9, x2, 64, x3)

inst_5:
// rs1==x29, rs2==x23, rd==x24, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val == -5, rs2_h1_val == 1, rs2_h3_val == -65, rs2_h2_val == -513, rs1_h2_val == 256, rs1_h0_val == -3, rs1_h3_val == 32767
// opcode: kdmatt16 ; op1:x29; op2:x23; dest:x24; op1val:0x7fff0100fffbfffd;  op2val:0xffbffdff00010009
TEST_PKRR_OP(kdmatt16, x24, x29, x23, 0x0000000000000000, 0x7fff0100fffbfffd, 0xffbffdff00010009, x29, x2, 80, x3)

inst_6:
// rs1==x6, rs2==x27, rd==x28, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h0_val == -5, rs2_h3_val == -257, rs2_h2_val == 4, rs1_h0_val == -17
// opcode: kdmatt16 ; op1:x6; op2:x27; dest:x28; op1val:0x0700098000ffef;  op2val:0xfeff00040003fffb
TEST_PKRR_OP(kdmatt16, x28, x6, x27, 0x0000000000000000, 0x0700098000ffef, 0xfeff00040003fffb, x6, x2, 96, x3)

inst_7:
// rs1==x4, rs2==x10, rd==x26, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 16384, rs2_h1_val == -513, rs1_h2_val == 16, rs1_h0_val == 64, rs2_h0_val == -65, rs2_h2_val == 8192, rs2_h3_val == 2
// opcode: kdmatt16 ; op1:x4; op2:x10; dest:x26; op1val:0x07001040000040;  op2val:0x022000fdffffbf
TEST_PKRR_OP(kdmatt16, x26, x4, x10, 0x0000000000000000, 0x07001040000040, 0x022000fdffffbf, x4, x2, 112, x3)

inst_8:
// rs1==x19, rs2==x30, rd==x22, rs1_h0_val == rs2_h0_val, rs1_h0_val == -2049, rs2_h0_val == -2049, rs2_h1_val == -65
// opcode: kdmatt16 ; op1:x19; op2:x30; dest:x22; op1val:0xfff9fff60006f7ff;  op2val:0xfff6fdffffbff7ff
TEST_PKRR_OP(kdmatt16, x22, x19, x30, 0x0000000000000000, 0xfff9fff60006f7ff, 0xfff6fdffffbff7ff, x19, x2, 128, x3)

inst_9:
// rs1==x18, rs2==x26, rd==x29, rs2_h3_val == -21846, rs2_h0_val == -33, rs2_h1_val == -2, rs2_h2_val == 512, rs1_h0_val == 32767
// opcode: kdmatt16 ; op1:x18; op2:x26; dest:x29; op1val:0xaaaafffedfff7fff;  op2val:0xaaaa0200fffeffdf
TEST_PKRR_OP(kdmatt16, x29, x18, x26, 0x0000000000000000, 0xaaaafffedfff7fff, 0xaaaa0200fffeffdf, x18, x2, 144, x3)

inst_10:
// rs1==x8, rs2==x18, rd==x9, rs2_h3_val == 21845, rs1_h1_val == -129, rs2_h0_val == 128
// opcode: kdmatt16 ; op1:x8; op2:x18; dest:x9; op1val:0xfff8fffeff7ffff9;  op2val:0x5555fffbfffe0080
TEST_PKRR_OP(kdmatt16, x9, x8, x18, 0x0000000000000000, 0xfff8fffeff7ffff9, 0x5555fffbfffe0080, x8, x2, 160, x3)

inst_11:
// rs1==x31, rs2==x14, rd==x7, rs2_h3_val == 32767, rs2_h1_val == 0, rs1_h1_val == 64, rs1_h0_val == 512, rs1_h3_val == -4097, rs2_h2_val == 1
// opcode: kdmatt16 ; op1:x31; op2:x14; dest:x7; op1val:0xeffffff800400200;  op2val:0x7fff00010000fff9
TEST_PKRR_OP(kdmatt16, x7, x31, x14, 0x0000000000000000, 0xeffffff800400200, 0x7fff00010000fff9, x31, x2, 176, x3)

inst_12:
// rs1==x26, rs2==x19, rd==x15, rs2_h3_val == -16385, rs2_h2_val == -16385, rs2_h0_val == -32768, rs1_h0_val == 4096, rs2_h1_val == 8
// opcode: kdmatt16 ; op1:x26; op2:x19; dest:x15; op1val:0xc00001003fff1000;  op2val:0xbfffbfff00088000
TEST_PKRR_OP(kdmatt16, x15, x26, x19, 0x0000000000000000, 0xc00001003fff1000, 0xbfffbfff00088000, x26, x2, 192, x3)

inst_13:
// rs1==x5, rs2==x17, rd==x30, rs2_h3_val == -8193, rs2_h2_val == -8193, rs2_h0_val == 2, rs1_h2_val == -129, rs1_h3_val == -5, rs1_h0_val == -1025
// opcode: kdmatt16 ; op1:x5; op2:x17; dest:x30; op1val:0xfffbff7f8000fbff;  op2val:0xdfffdfff00070002
TEST_PKRR_OP(kdmatt16, x30, x5, x17, 0x0000000000000000, 0xfffbff7f8000fbff, 0xdfffdfff00070002, x5, x2, 208, x3)

inst_14:
// rs1==x21, rs2==x28, rd==x23, rs2_h3_val == -4097, rs2_h1_val == -5, rs2_h0_val == 8192, rs1_h3_val == -65
// opcode: kdmatt16 ; op1:x21; op2:x28; dest:x23; op1val:0xffbf3ffffffcffef;  op2val:0xefff0006fffb2000
TEST_PKRR_OP(kdmatt16, x23, x21, x28, 0x0000000000000000, 0xffbf3ffffffcffef, 0xefff0006fffb2000, x21, x2, 224, x10)

inst_15:
// rs1==x25, rs2==x5, rd==x11, rs2_h3_val == -2049, rs1_h1_val == -2, rs2_h0_val == 512, rs1_h2_val == 32767
// opcode: kdmatt16 ; op1:x25; op2:x5; dest:x11; op1val:0xefff7ffffffe0008;  op2val:0xf7ff0005fffc0200
TEST_PKRR_OP(kdmatt16, x11, x25, x5, 0x0000000000000000, 0xefff7ffffffe0008, 0xf7ff0005fffc0200, x25, x2, 240, x10)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:
// rs1==x14, rs2==x25, rd==x6, rs2_h3_val == -1025, rs1_h3_val == -513, rs2_h2_val == -2049, rs2_h0_val == -257, rs1_h1_val == 2048
// opcode: kdmatt16 ; op1:x14; op2:x25; dest:x6; op1val:0xfdffc00008001000;  op2val:0xfbfff7ff0007feff
TEST_PKRR_OP(kdmatt16, x6, x14, x25, 0x0000000000000000, 0xfdffc00008001000, 0xfbfff7ff0007feff, x14, x1, 0, x10)

inst_17:
// rs1==x7, rs2==x6, rd==x3, rs2_h3_val == -129, rs1_h3_val == 0, rs2_h2_val == 128
// opcode: kdmatt16 ; op1:x7; op2:x6; dest:x3; op1val:0x00fffefffe0005;  op2val:0xff7f0080fffa0009
TEST_PKRR_OP(kdmatt16, x3, x7, x6, 0x0000000000000000, 0x00fffefffe0005, 0xff7f0080fffa0009, x7, x1, 16, x10)

inst_18:
// rs1==x13, rs2==x20, rd==x31, rs2_h3_val == -33, rs2_h1_val == -3, rs2_h2_val == 8
// opcode: kdmatt16 ; op1:x13; op2:x20; dest:x31; op1val:0x077fff4000fff9;  op2val:0xffdf0008fffd0020
TEST_PKRR_OP(kdmatt16, x31, x13, x20, 0x0000000000000000, 0x077fff4000fff9, 0xffdf0008fffd0020, x13, x1, 32, x10)

inst_19:
// rs1==x20, rs2==x7, rd==x14, rs2_h3_val == -17, rs2_h0_val == 8, rs1_h3_val == -8193
// opcode: kdmatt16 ; op1:x20; op2:x7; dest:x14; op1val:0xdfff3fff00401000;  op2val:0xffeffff6fffd0008
TEST_PKRR_OP(kdmatt16, x14, x20, x7, 0x0000000000000000, 0xdfff3fff00401000, 0xffeffff6fffd0008, x20, x1, 48, x10)

inst_20:
// rs1==x27, rs2==x31, rd==x19, rs2_h3_val == -9, rs2_h2_val == -1, rs2_h1_val == 256, rs1_h2_val == 0, rs1_h3_val == 8
// opcode: kdmatt16 ; op1:x27; op2:x31; dest:x19; op1val:0x0800000005fbff;  op2val:0xfff7ffff01008000
TEST_PKRR_OP(kdmatt16, x19, x27, x31, 0x0000000000000000, 0x0800000005fbff, 0xfff7ffff01008000, x27, x1, 64, x10)

inst_21:
// rs1==x3, rs2==x0, rd==x25, rs2_h3_val == -5, rs2_h2_val == -65, rs1_h0_val == 16, rs1_h2_val == -21846, rs1_h3_val == -2049
// opcode: kdmatt16 ; op1:x3; op2:x0; dest:x25; op1val:0xf7ffaaaafffb0010;  op2val:0xfffbffbf00030002
TEST_PKRR_OP(kdmatt16, x25, x3, x0, 0x0000000000000000, 0xf7ffaaaafffb0010, 0xfffbffbf00030002, x3, x1, 80, x10)

inst_22:
// rs1==x2, rs2==x9, rd==x27, rs2_h3_val == -3, rs1_h3_val == 1024, rs2_h2_val == -257, rs1_h1_val == 4096, rs2_h1_val == 16, rs1_h0_val == -129
// opcode: kdmatt16 ; op1:x2; op2:x9; dest:x27; op1val:0x400f7ff1000ff7f;  op2val:0xfffdfeff00100020
TEST_PKRR_OP(kdmatt16, x27, x2, x9, 0x0000000000000000, 0x400f7ff1000ff7f, 0xfffdfeff00100020, x2, x1, 96, x10)

inst_23:
// rs1==x28, rs2==x3, rd==x5, rs2_h3_val == -2, rs1_h0_val == -5, rs2_h0_val == -21846, rs2_h1_val == -4097, rs1_h2_val == -16385, rs2_h2_val == 32767
// opcode: kdmatt16 ; op1:x28; op2:x3; dest:x5; op1val:0xfdffbffffff9fffb;  op2val:0xfffe7fffefffaaaa
TEST_PKRR_OP(kdmatt16, x5, x28, x3, 0x0000000000000000, 0xfdffbffffff9fffb, 0xfffe7fffefffaaaa, x28, x1, 112, x10)

inst_24:
// rs1==x23, rs2==x24, rd==x17, rs2_h3_val == -32768, rs2_h1_val == 1024, rs1_h1_val == -21846, rs1_h3_val == -33, rs2_h2_val == -129
// opcode: kdmatt16 ; op1:x23; op2:x24; dest:x17; op1val:0xffdff7ffaaaa3fff;  op2val:0x8000ff7f04008000
TEST_PKRR_OP(kdmatt16, x17, x23, x24, 0x0000000000000000, 0xffdff7ffaaaa3fff, 0x8000ff7f04008000, x23, x1, 128, x10)

inst_25:
// rs1==x16, rs2==x4, rd==x18, rs2_h3_val == 16384, rs1_h2_val == 16384, rs1_h3_val == 512, rs1_h0_val == 4, rs2_h1_val == -9
// opcode: kdmatt16 ; op1:x16; op2:x4; dest:x18; op1val:0x2004000fff60004;  op2val:0x40007ffffff7fff8
TEST_PKRR_OP(kdmatt16, x18, x16, x4, 0x0000000000000000, 0x2004000fff60004, 0x40007ffffff7fff8, x16, x1, 144, x10)

inst_26:
// rs1==x11, rs2==x16, rd==x13, rs2_h3_val == 8192, rs1_h2_val == -257, rs2_h2_val == -2
// opcode: kdmatt16 ; op1:x11; op2:x16; dest:x13; op1val:0xfdfffeff1000fffb;  op2val:0x2000fffe00100006
TEST_PKRR_OP(kdmatt16, x13, x11, x16, 0x0000000000000000, 0xfdfffeff1000fffb, 0x2000fffe00100006, x11, x1, 160, x10)

inst_27:
// rs1==x30, rs2==x2, rd==x20, rs2_h3_val == 4096, rs2_h1_val == -129, rs1_h2_val == 1
// opcode: kdmatt16 ; op1:x30; op2:x2; dest:x20; op1val:0xdfff000140000003;  op2val:0x10000200ff7f0006
TEST_PKRR_OP(kdmatt16, x20, x30, x2, 0x0000000000000000, 0xdfff000140000003, 0x10000200ff7f0006, x30, x1, 176, x10)

inst_28:
// rs1==x24, rs2==x15, rd==x16, rs2_h3_val == 1024, rs2_h2_val == 4096, rs2_h1_val == -32768, rs1_h3_val == 4096, rs2_h0_val == 4096
// opcode: kdmatt16 ; op1:x24; op2:x15; dest:x16; op1val:0x10000009fff61000;  op2val:0x400100080001000
TEST_PKRR_OP(kdmatt16, x16, x24, x15, 0x0000000000000000, 0x10000009fff61000, 0x400100080001000, x24, x1, 192, x10)

inst_29:
// rs1==x15, rs2==x29, rd==x8, rs2_h3_val == 512, rs1_h1_val == 128, rs1_h0_val == 0
// opcode: kdmatt16 ; op1:x15; op2:x29; dest:x8; op1val:0x1000fff600800000;  op2val:0x200c000fff6fff9
TEST_PKRR_OP(kdmatt16, x8, x15, x29, 0x0000000000000000, 0x1000fff600800000, 0x200c000fff6fff9, x15, x1, 208, x10)

inst_30:
// rs1==x17, rs2==x8, rd==x4, rs2_h3_val == 256, rs2_h0_val == 64
// opcode: kdmatt16 ; op1:x17; op2:x8; dest:x4; op1val:0x80aaaafff6ffef;  op2val:0x100bffffff60040
TEST_PKRR_OP(kdmatt16, x4, x17, x8, 0x0000000000000000, 0x80aaaafff6ffef, 0x100bffffff60040, x17, x1, 224, x3)

inst_31:
// rs1==x0, rs2==x21, rd==x2, rs2_h3_val == 128, rs1_h3_val == 2048, rs2_h0_val == -1025, rs1_h0_val == 128, rs2_h1_val == -2049
// opcode: kdmatt16 ; op1:x0; op2:x21; dest:x2; op1val:0x800bffffffe0080;  op2val:0x800400f7fffbff
TEST_PKRR_OP(kdmatt16, x2, x0, x21, 0x0000000000000000, 0x800bffffffe0080, 0x800400f7fffbff, x0, x1, 240, x3)

inst_32:
// rs2_h3_val == 64, rs1_h2_val == 8192, rs1_h3_val == -32768, rs1_h1_val == -33
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80002000ffdfefff;  op2val:0x40fffadfffffdf
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x80002000ffdfefff, 0x40fffadfffffdf, x30, x1, 256, x3)

inst_33:
// rs2_h3_val == 32, rs2_h2_val == 64, rs1_h3_val == 16, rs2_h0_val == 1, rs1_h0_val == 16384
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fff8fff94000;  op2val:0x2000403fff0001
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x10fff8fff94000, 0x2000403fff0001, x30, x1, 272, x3)

inst_34:
// rs2_h3_val == 16, rs2_h0_val == -8193, rs2_h1_val == -257
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa200010004000;  op2val:0x100009feffdfff
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xaaaa200010004000, 0x100009feffdfff, x30, x1, 288, x3)

inst_35:
// rs2_h3_val == 8, rs2_h0_val == 16384, rs1_h2_val == 4096, rs1_h0_val == 32, rs2_h2_val == 2
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x061000fff90020;  op2val:0x08000200094000
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x061000fff90020, 0x08000200094000, x30, x1, 304, x3)

inst_36:
// rs1_h1_val == -3, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff7ffffffd0006;  op2val:0x030001fdff0100
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xefff7ffffffd0006, 0x030001fdff0100, x30, x1, 320, x3)

inst_37:
// rs1_h1_val == 8192, rs2_h1_val == 128, rs1_h0_val == 256
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8c00020000100;  op2val:0x800c0000080fffc
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xfff8c00020000100, 0x800c0000080fffc, x30, x1, 336, x3)

inst_38:
// rs1_h1_val == 1024, rs2_h1_val == 32767, rs1_h3_val == 16384
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff904000004;  op2val:0xffef7fff7fffdfff
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x4000fff904000004, 0xffef7fff7fffdfff, x30, x1, 352, x3)

inst_39:
// rs1_h1_val == 512, rs2_h1_val == 4, rs1_h0_val == -21846
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fff60200aaaa;  op2val:0xfffb00060004ffbf
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xfff6fff60200aaaa, 0xfffb00060004ffbf, x30, x1, 368, x3)

inst_40:
// rs1_h1_val == 256, rs1_h0_val == 2, rs1_h2_val == 4
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x03000401000002;  op2val:0xfffc000100030001
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x03000401000002, 0xfffc000100030001, x30, x1, 384, x3)

inst_41:
// rs1_h1_val == 32, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x01000400200010;  op2val:0xeffffefffefffff6
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x01000400200010, 0xeffffefffefffff6, x30, x1, 400, x3)

inst_42:
// rs1_h1_val == 16, rs2_h1_val == 16384, rs1_h3_val == 2, rs2_h3_val == -1, rs1_h0_val == -1
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0201000010ffff;  op2val:0xffff020040002000
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x0201000010ffff, 0xffff020040002000, x30, x1, 416, x3)

inst_43:
// rs1_h1_val == 8, rs2_h0_val == -4097
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffaaaa0008fffd;  op2val:0xfff73ffffffeefff
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xf7ffaaaa0008fffd, 0xfff73ffffffeefff, x30, x1, 432, x3)

inst_44:
// rs1_h1_val == 4, rs2_h2_val == -21846
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcffbf00040004;  op2val:0x800aaaa00030007
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xfffcffbf00040004, 0x800aaaa00030007, x30, x1, 448, x3)

inst_45:
// rs1_h1_val == 2, rs1_h3_val == -3, rs1_h2_val == 2
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd000200028000;  op2val:0xffeffff8c000fffc
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xfffd000200028000, 0xffeffff8c000fffc, x30, x1, 464, x3)

inst_46:
// rs1_h1_val == 1, rs2_h0_val == 2048, rs1_h3_val == -129
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffff800017fff;  op2val:0xffff100000000800
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xff7ffff800017fff, 0xffff100000000800, x30, x1, 480, x3)

inst_47:
// rs1_h1_val == 0, rs1_h3_val == 64, rs2_h0_val == 0
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40f7ff00000040;  op2val:0xfffb0008fffc0000
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x40f7ff00000040, 0xfffb0008fffc0000, x30, x1, 496, x3)

inst_48:
// rs1_h1_val == -1, rs2_h2_val == -17
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0005ffffaaaa;  op2val:0xffefffeffeff0000
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xdfff0005ffffaaaa, 0xffefffeffeff0000, x30, x1, 512, x3)

inst_49:
// rs1_h0_val == 21845, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x051000aaaa5555;  op2val:0xfffafffc00068000
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x051000aaaa5555, 0xfffafffc00068000, x30, x1, 528, x3)

inst_50:
// rs1_h0_val == -16385, rs1_h1_val == -1025, rs2_h2_val == -4097, rs2_h1_val == -16385
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff3ffffbffbfff;  op2val:0x1000efffbfff0006
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xfdff3ffffbffbfff, 0x1000efffbfff0006, x30, x1, 544, x3)

inst_51:
// rs1_h0_val == -8193, rs2_h2_val == -33, rs1_h3_val == 32
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x203fffc000dfff;  op2val:0xffefffdf0200ffdf
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x203fffc000dfff, 0xffefffdf0200ffdf, x30, x1, 560, x3)

inst_52:
// rs1_h0_val == -513, rs2_h1_val == 2, rs1_h3_val == -1, rs1_h2_val == 128
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff00800200fdff;  op2val:0x400fff60002dfff
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xffff00800200fdff, 0x400fff60002dfff, x30, x1, 576, x3)

inst_53:
// rs1_h0_val == -257, rs2_h2_val == 256, rs1_h1_val == -9
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0004000fff7feff;  op2val:0x7fff0100fffe7fff
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xc0004000fff7feff, 0x7fff0100fffe7fff, x30, x1, 592, x3)

inst_54:
// rs1_h0_val == -65, rs2_h0_val == 4
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9feff0003ffbf;  op2val:0x09fff8efff0004
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xfff9feff0003ffbf, 0x09fff8efff0004, x30, x1, 608, x3)

inst_55:
// rs1_h0_val == -33, rs1_h2_val == 32, rs2_h1_val == -17
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000200100ffdf;  op2val:0xfeff0003ffef0006
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x20000200100ffdf, 0xfeff0003ffef0006, x30, x1, 624, x3)

inst_56:
// rs1_h0_val == -9, rs1_h2_val == -8193
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfdfff3ffffff7;  op2val:0xfff9fffffffd0007
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xffbfdfff3ffffff7, 0xfff9fffffffd0007, x30, x1, 640, x3)

inst_57:
// rs1_h0_val == -2, rs1_h2_val == 8, rs2_h1_val == 64
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000080009fffe;  op2val:0x800fff900400000
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x100000080009fffe, 0x800fff900400000, x30, x1, 656, x3)

inst_58:
// rs1_h0_val == 8192, rs1_h3_val == 21845, rs2_h0_val == -3
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555ff7f00802000;  op2val:0xfffaffffc000fffd
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x5555ff7f00802000, 0xfffaffffc000fffd, x30, x1, 672, x3)

inst_59:
// rs2_h1_val == -1, rs2_h3_val == 4, rs1_h2_val == 21845
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x015555fff6c000;  op2val:0x04feffffff0001
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x015555fff6c000, 0x04feffffff0001, x30, x1, 688, x3)

inst_60:
// rs2_h0_val == 21845, rs1_h2_val == -1
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x03ffff00000200;  op2val:0xffefffef3fff5555
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x03ffff00000200, 0xffefffef3fff5555, x30, x1, 704, x3)

inst_61:
// rs2_h0_val == -513, rs2_h2_val == -9, rs1_h3_val == -9
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70010fff90200;  op2val:0xffdffff7fffcfdff
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xfff70010fff90200, 0xffdffff7fffcfdff, x30, x1, 720, x3)

inst_62:
// rs2_h0_val == -129, rs2_h2_val == 16384
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffadfff00020005;  op2val:0xfffb4000fff9ff7f
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xfffadfff00020005, 0xfffb4000fff9ff7f, x30, x1, 736, x3)

inst_63:
// rs2_h0_val == -17, rs1_h2_val == -32768
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0880000003fffa;  op2val:0x090400fffdffef
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x0880000003fffa, 0x090400fffdffef, x30, x1, 752, x3)

inst_64:
// rs2_h0_val == -9, rs1_h2_val == -17
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffaffef20008000;  op2val:0xffbffffb3ffffff7
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xfffaffef20008000, 0xffbffffb3ffffff7, x30, x1, 768, x3)

inst_65:
// rs2_h0_val == 1024, rs1_h2_val == -513, rs1_h1_val == -4097
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fdffeffffeff;  op2val:0x100000077fff0400
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x100fdffeffffeff, 0x100000077fff0400, x30, x1, 784, x3)

inst_66:
// rs2_h0_val == 16, rs1_h2_val == 64, rs1_h1_val == -513
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000040fdffffbf;  op2val:0xfff6fffffff90010
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x4000040fdffffbf, 0xfff6fffffff90010, x30, x1, 800, x3)

inst_67:
// rs2_h0_val == -1, rs2_h2_val == 2048
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000800400ffff;  op2val:0x40008000006ffff
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x80000800400ffff, 0x40008000006ffff, x30, x1, 816, x3)

inst_68:
// rs1_h0_val == 2048, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x807fff01000800;  op2val:0x1000fff61000dfff
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x807fff01000800, 0x1000fff61000dfff, x30, x1, 832, x3)

inst_69:
// rs1_h0_val == 1024, rs1_h1_val == -16385, rs1_h3_val == 8192
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000ff7fbfff0400;  op2val:0x06ffef02002000
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x2000ff7fbfff0400, 0x06ffef02002000, x30, x1, 848, x3)

inst_70:
// rs1_h3_val == -16385, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff200000073fff;  op2val:0xfffd2000fffa0003
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xbfff200000073fff, 0xfffd2000fffa0003, x30, x1, 864, x3)

inst_71:
// rs1_h3_val == -1025, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfff7ff40007fff;  op2val:0xfffcf7fffffb0080
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xfbfff7ff40007fff, 0xfffcf7fffffb0080, x30, x1, 880, x3)

inst_72:
// rs1_h3_val == -257, rs2_h1_val == 21845
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff000300100008;  op2val:0xfffe20005555fbff
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xfeff000300100008, 0xfffe20005555fbff, x30, x1, 896, x3)

inst_73:
// rs2_h2_val == -1025, rs1_h3_val == 4
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x042000aaaafff7;  op2val:0xaaaafbff04000080
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x042000aaaafff7, 0xaaaafbff04000080, x30, x1, 912, x3)

inst_74:
// rs2_h2_val == -32768, rs1_h1_val == -65
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x040004ffbf0007;  op2val:0x028000fffffffe
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x040004ffbf0007, 0x028000fffffffe, x30, x1, 928, x3)

inst_75:
// rs1_h2_val == -4097, rs2_h3_val == 0
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x01efff0000fff8;  op2val:0x000002fff8fffc
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x01efff0000fff8, 0x000002fff8fffc, x30, x1, 944, x3)

inst_76:
// rs1_h2_val == -1025, rs1_h0_val == 1
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fbff00050001;  op2val:0xffdffff8fffbfffb
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x20fbff00050001, 0xffdffff8fffbfffb, x30, x1, 960, x3)

inst_77:
// rs1_h1_val == -17, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x097fffffef0005;  op2val:0xfffbffbf00000008
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x097fffffef0005, 0xfffbffbf00000008, x30, x1, 976, x3)

inst_78:
// rs2_h1_val == 2048, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc00000002ffef;  op2val:0x8000bfff08000005
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xfffc00000002ffef, 0x8000bfff08000005, x30, x1, 992, x3)

inst_79:
// rs2_h2_val == 32, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff40000001c000;  op2val:0xff7f0020ffef4000
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xbfff40000001c000, 0xff7f0020ffef4000, x30, x1, 1008, x3)

inst_80:
// rs1_h2_val == -33, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffdf0010fbff;  op2val:0x03010001005555
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xdfffffdf0010fbff, 0x03010001005555, x30, x1, 1024, x3)

inst_81:
// rs2_h2_val == 16, rs1_h1_val == -257
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0100feffffbf;  op2val:0x80000010fff82000
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xdfff0100feffffbf, 0x80000010fff82000, x30, x1, 1040, x3)

inst_82:
// rs1_h2_val == -9, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x06fff7c0004000;  op2val:0x0502000000ffff
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x06fff7c0004000, 0x0502000000ffff, x30, x1, 1056, x3)

inst_83:
// rs2_h1_val == -21846, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffabfffffbf;  op2val:0x010040aaaafffa
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x4000fffabfffffbf, 0x010040aaaafffa, x30, x1, 1072, x3)

inst_84:
// rs1_h2_val == 2048, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0800aaaa0006;  op2val:0x4000fff7ffbf0002
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x7fff0800aaaa0006, 0x4000fff7ffbf0002, x30, x1, 1088, x3)

inst_85:
// rs1_h2_val == 1024, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb04000080fbff;  op2val:0xfffcfdff00400010
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xfffb04000080fbff, 0xfffcfdff00400010, x30, x1, 1104, x3)

inst_86:
// rs1_h2_val == 512, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x060200fff80000;  op2val:0xfff7ffbf0040fffc
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x060200fff80000, 0xfff7ffbf0040fffc, x30, x1, 1120, x3)

inst_87:
// rs2_h1_val == -1025, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffff7faaaaefff;  op2val:0xffffbffffbff4000
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xfbffff7faaaaefff, 0xffffbffffbff4000, x30, x1, 1136, x3)

inst_88:
// rs2_h1_val == -33, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000efff00043fff;  op2val:0xffff1000ffdf1000
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x1000efff00043fff, 0xffff1000ffdf1000, x30, x1, 1152, x3)

inst_89:
// rs1_h1_val == 21845, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000355550005;  op2val:0xffff0009fbffffdf
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x20000355550005, 0xffff0009fbffffdf, x30, x1, 1168, x3)

inst_90:
// rs2_h1_val == 8192, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x06feff00200002;  op2val:0x06800020000010
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x06feff00200002, 0x06800020000010, x30, x1, 1184, x3)

inst_91:
// rs2_h1_val == 32, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffaaaa0100ffff;  op2val:0x4000800020efff
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xf7ffaaaa0100ffff, 0x4000800020efff, x30, x1, 1200, x3)

inst_92:
// rs1_h3_val == -17, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef00075555ffef;  op2val:0x06fdff00095555
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xffef00075555ffef, 0x06fdff00095555, x30, x1, 1216, x3)

inst_93:
// rs1_h1_val == -2049, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ff7fff7ff0000;  op2val:0xefff000400010080
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xff7ff7fff7ff0000, 0xefff000400010080, x30, x1, 1232, x3)

inst_94:
// rs1_h3_val == -2, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe00000100bfff;  op2val:0xfeff0800fffa0000
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xfffe00000100bfff, 0xfeff0800fffa0000, x30, x1, 1248, x3)

inst_95:
// rs1_h2_val == -5, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffb0006fff7;  op2val:0x1000aaaaffff0080
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xfff7fffb0006fff7, 0x1000aaaaffff0080, x30, x1, 1264, x3)

inst_96:
// rs1_h2_val == -3, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400fffd0007fdff;  op2val:0xfdff002000001000
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x400fffd0007fdff, 0xfdff002000001000, x30, x1, 1280, x3)

inst_97:
// rs2_h2_val == 21845, 
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x200000400040006;  op2val:0x0355550008fffc
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x200000400040006, 0x0355550008fffc, x30, x1, 1296, x3)

inst_98:
// rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -513, rs2_h0_val == -16385, rs2_h2_val == -5, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 32767, rs2_h1_val == 4096, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fff67fff0003;  op2val:0xfdfffffb1000bfff
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0xfff8fff67fff0003, 0xfdfffffb1000bfff, x30, x1, 1312, x3)

inst_99:
// rs2_h3_val == 128, rs1_h3_val == 2048, rs2_h0_val == -1025, rs1_h0_val == 128, rs2_h1_val == -2049
// opcode: kdmatt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800bffffffe0080;  op2val:0x800400f7fffbff
TEST_PKRR_OP(kdmatt16, x31, x30, x29, 0x0000000000000000, 0x800bffffffe0080, 0x800400f7fffbff, x30, x1, 1328, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 168*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
