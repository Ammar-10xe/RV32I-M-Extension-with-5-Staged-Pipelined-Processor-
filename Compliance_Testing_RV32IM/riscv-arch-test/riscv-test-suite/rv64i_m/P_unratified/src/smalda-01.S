
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smalda instruction of the RISC-V RV64PZicsr extension for the smalda covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smalda)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rd != rs2, rs1==x4, rs2==x13, rd==x4, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == -513, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val != rs2_h1_val, rs1_h3_val == -1025, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h3_val == 32, rs1_h2_val == -257, rs2_h1_val == 16
// opcode: smalda ; op1:x4; op2:x13; dest:x4; op1val:0xfbfffeff3fff8000;  op2val:0x0020fdff00100006
TEST_P64_PNN_OP(smalda, x4, $rd_hi, x4, x13, 0x0000000000000000, $correctval_hi, 0xfbfffeff3fff8000, 0x0020fdff00100006, x3, 0, x5)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x19, rs2==x6, rd==x2, rs1_h3_val == rs2_h3_val, rs2_h1_val == 2, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h2_val == -129, rs1_h0_val == 16384, rs1_h1_val == 512, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h3_val == -4097, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 2048, rs2_h3_val == -4097
// opcode: smalda ; op1:x19; op2:x6; dest:x2; op1val:0xefff000702004000;  op2val:0xefffff7f00020800
TEST_P64_PNN_OP(smalda, x2, $rd_hi, x19, x6, 0x0000000000000000, $correctval_hi, 0xefff000702004000, 0xefffff7f00020800, x3, 16, x5)

inst_2:
// rs1 == rs2 != rd, rs1==x7, rs2==x7, rd==x30, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h1_val == 1024, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h3_val == -2, rs2_h2_val == -9
// opcode: smalda ; op1:x7; op2:x7; dest:x30; op1val:0x3ffffeff0400fffa;  op2val:0xfffefff7c0000005
TEST_P64_PNN_OP(smalda, x30, $rd_hi, x7, x7, 0x0000000000000000, $correctval_hi, 0x3ffffeff0400fffa, 0xfffefff7c0000005, x3, 32, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x20, rs2==x20, rd==x20, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == -2049, rs2_h2_val == 128
// opcode: smalda ; op1:x20; op2:x20; dest:x20; op1val:0x0005000300033fff;  op2val:0x00060080f7ff0006
TEST_P64_PNN_OP(smalda, x20, $rd_hi, x20, x20, 0x0000000000000000, $correctval_hi, 0x0005000300033fff, 0x00060080f7ff0006, x3, 48, x5)

inst_4:
// rs2 == rd != rs1, rs1==x8, rs2==x28, rd==x28, rs1_h2_val == rs2_h2_val, rs2_h2_val == -8193, rs1_h0_val == -33, rs1_h1_val == 16384, rs2_h3_val == -33, rs1_h3_val == -8193, rs1_h2_val == -8193
// opcode: smalda ; op1:x8; op2:x28; dest:x28; op1val:0xdfffdfff4000ffdf;  op2val:0xffdfdffffffa0009
TEST_P64_PNN_OP(smalda, x28, $rd_hi, x8, x28, 0x0000000000000000, $correctval_hi, 0xdfffdfff4000ffdf, 0xffdfdffffffa0009, x3, 64, x5)

inst_5:
// rs1==x9, rs2==x25, rd==x10, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h0_val == 8192, rs2_h1_val == 1, rs1_h0_val == -8193, rs2_h2_val == 32767
// opcode: smalda ; op1:x9; op2:x25; dest:x10; op1val:0xfff9fff80009dfff;  op2val:0x3fff7fff00012000
TEST_P64_PNN_OP(smalda, x10, $rd_hi, x9, x25, 0x0000000000000000, $correctval_hi, 0xfff9fff80009dfff, 0x3fff7fff00012000, x3, 80, x5)

inst_6:
// rs1==x6, rs2==x4, rd==x26, rs1_h1_val == rs2_h1_val, rs1_h1_val == 4096, rs1_h3_val == 1, rs2_h3_val == 16384, rs1_h2_val == 0, rs1_h0_val == 64, rs2_h1_val == 4096
// opcode: smalda ; op1:x6; op2:x4; dest:x26; op1val:0x0001000010000040;  op2val:0x4000008010000800
TEST_P64_PNN_OP(smalda, x26, $rd_hi, x6, x4, 0x0000000000000000, $correctval_hi, 0x0001000010000040, 0x4000008010000800, x3, 96, x5)

inst_7:
// rs1==x24, rs2==x18, rd==x8, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -32768, rs1_h2_val == 512, rs2_h3_val == 1024, rs2_h0_val == -17, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 256
// opcode: smalda ; op1:x24; op2:x18; dest:x8; op1val:0xfbff020080000009;  op2val:0x0400fff70100ffef
TEST_P64_PNN_OP(smalda, x8, $rd_hi, x24, x18, 0x0000000000000000, $correctval_hi, 0xfbff020080000009, 0x0400fff70100ffef, x3, 112, x5)

inst_8:
// rs1==x27, rs2==x9, rd==x14, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == -65, rs1_h3_val == 64, rs2_h1_val == -17, rs1_h2_val == -4097, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h3_val == 8
// opcode: smalda ; op1:x27; op2:x9; dest:x14; op1val:0x0040efff8000ffbf;  op2val:0x00080006ffeffff6
TEST_P64_PNN_OP(smalda, x14, $rd_hi, x27, x9, 0x0000000000000000, $correctval_hi, 0x0040efff8000ffbf, 0x00080006ffeffff6, x3, 128, x5)

inst_9:
// rs1==x11, rs2==x24, rd==x6, rs1_h0_val == rs2_h0_val, rs1_h1_val == 256, rs2_h0_val == -4097, rs2_h1_val == -2, rs1_h2_val == -65, rs1_h0_val == -4097
// opcode: smalda ; op1:x11; op2:x24; dest:x6; op1val:0xc000ffbf0100efff;  op2val:0xfff60005fffeefff
TEST_P64_PNN_OP(smalda, x6, $rd_hi, x11, x24, 0x0000000000000000, $correctval_hi, 0xc000ffbf0100efff, 0xfff60005fffeefff, x3, 144, x5)

inst_10:
// rs1==x14, rs2==x0, rd==x22, rs2_h3_val == -21846, rs2_h1_val == -1025, rs1_h0_val == 16, rs1_h1_val == 2048
// opcode: smalda ; op1:x14; op2:x0; dest:x22; op1val:0x0005fff908000010;  op2val:0xaaaafff7fbfffffc
TEST_P64_PNN_OP(smalda, x22, $rd_hi, x14, x0, 0x0000000000000000, $correctval_hi, 0x0005fff908000010, 0xaaaafff7fbfffffc, x3, 160, x5)

inst_11:
// rs1==x16, rs2==x29, rd==x18, rs2_h3_val == 21845, rs2_h1_val == 128, rs1_h3_val == 16
// opcode: smalda ; op1:x16; op2:x29; dest:x18; op1val:0x0010fff80005fff9;  op2val:0x5555fffa00800800
TEST_P64_PNN_OP(smalda, x18, $rd_hi, x16, x29, 0x0000000000000000, $correctval_hi, 0x0010fff80005fff9, 0x5555fffa00800800, x3, 176, x5)

inst_12:
// rs1==x31, rs2==x16, rd==x12, rs2_h3_val == 32767, rs1_h2_val == 128, rs2_h2_val == -17, rs2_h0_val == -1025, rs1_h0_val == 256, rs1_h1_val == 4, rs1_h3_val == -513
// opcode: smalda ; op1:x31; op2:x16; dest:x12; op1val:0xfdff008000040100;  op2val:0x7fffffef0007fbff
TEST_P64_PNN_OP(smalda, x12, $rd_hi, x31, x16, 0x0000000000000000, $correctval_hi, 0xfdff008000040100, 0x7fffffef0007fbff, x3, 192, x5)

inst_13:
// rs1==x0, rs2==x31, rd==x24, rs2_h3_val == -16385, rs1_h1_val == -3, rs2_h0_val == 16, rs1_h3_val == 2, rs1_h2_val == 4, rs2_h2_val == 8192, rs2_h1_val == -3
// opcode: smalda ; op1:x0; op2:x31; dest:x24; op1val:0x00020004fffdfff8;  op2val:0xbfff2000fffd0010
TEST_P64_PNN_OP(smalda, x24, $rd_hi, x0, x31, 0x0000000000000000, $correctval_hi, 0x00020004fffdfff8, 0xbfff2000fffd0010, x3, 208, x5)

inst_14:
// rs1==x2, rs2==x19, rd==x16, rs2_h3_val == -8193, rs1_h1_val == -8193, rs1_h0_val == -3, rs2_h1_val == -8193, rs2_h0_val == -513
// opcode: smalda ; op1:x2; op2:x19; dest:x16; op1val:0x00010004dffffffd;  op2val:0xdfff3fffdffffdff
TEST_P64_PNN_OP(smalda, x16, $rd_hi, x2, x19, 0x0000000000000000, $correctval_hi, 0x00010004dffffffd, 0xdfff3fffdffffdff, x3, 224, x5)

inst_15:
// rs1==x1, rs2==x17, rs2_h3_val == -2049, rs1_h0_val == 32, rs1_h1_val == 32767, rs2_h0_val == 1
// opcode: smalda ; op1:x1; op2:x17; dest:x14; op1val:0xfbfffffa7fff0020;  op2val:0xf7ff0005fffe0001
TEST_P64_PNN_OP(smalda, x14, $rd_hi, x1, x17, 0x0000000000000000, $correctval_hi, 0xfbfffffa7fff0020, 0xf7ff0005fffe0001, x3, 240, x5)

inst_16:
// rs1==x10, rs2==x12, rs2_h3_val == -1025, rs1_h1_val == -513, rs2_h1_val == 21845, rs1_h0_val == -17, rs2_h2_val == -32768
// opcode: smalda ; op1:x10; op2:x12; dest:x5; op1val:0x0009ffbffdffffef;  op2val:0xfbff80005555efff
TEST_P64_PNN_OP(smalda, x5, $rd_hi, x10, x12, 0x0000000000000000, $correctval_hi, 0x0009ffbffdffffef, 0xfbff80005555efff, x3, 256, x6)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_17:
// rs1==x15, rs2==x26, rs2_h3_val == -513, rs2_h1_val == 32767, rs2_h0_val == 2, rs1_h3_val == 21845, rs1_h2_val == 8, rs2_h2_val == 16, rs1_h0_val == -129
// opcode: smalda ; op1:x15; op2:x26; dest:x23; op1val:0x555500080004ff7f;  op2val:0xfdff00107fff0002
TEST_P64_PNN_OP(smalda, x23, $rd_hi, x15, x26, 0x0000000000000000, $correctval_hi, 0x555500080004ff7f, 0xfdff00107fff0002, x4, 0, x6)

inst_18:
// rs1==x13, rs2==x30, rs2_h3_val == -257, rs1_h0_val == -9, rs2_h1_val == -9, rs1_h2_val == -1025, rs1_h3_val == -65, rs2_h2_val == 64, rs1_h1_val == -65
// opcode: smalda ; op1:x13; op2:x30; dest:x12; op1val:0xffbffbffffbffff7;  op2val:0xfeff0040fff70800
TEST_P64_PNN_OP(smalda, x12, $rd_hi, x13, x30, 0x0000000000000000, $correctval_hi, 0xffbffbffffbffff7, 0xfeff0040fff70800, x4, 16, x6)

inst_19:
// rs1==x25, rs2==x22, rs2_h3_val == -129, rs2_h2_val == -33, rs1_h3_val == -2049, rs2_h1_val == 8192, rs1_h1_val == -257, rs1_h0_val == -2049, rs2_h0_val == 128
// opcode: smalda ; op1:x25; op2:x22; dest:x10; op1val:0xf7fffff6fefff7ff;  op2val:0xff7fffdf20000080
TEST_P64_PNN_OP(smalda, x10, $rd_hi, x25, x22, 0x0000000000000000, $correctval_hi, 0xf7fffff6fefff7ff, 0xff7fffdf20000080, x4, 32, x6)

inst_20:
// rs1==x26, rs2==x1, rs2_h3_val == -65, rs2_h1_val == 512, rs2_h0_val == 512
// opcode: smalda ; op1:x26; op2:x1; dest:x5; op1val:0xefffdffffffcfffc;  op2val:0xffbfdfff02000200
TEST_P64_PNN_OP(smalda, x5, $rd_hi, x26, x1, 0x0000000000000000, $correctval_hi, 0xefffdffffffcfffc, 0xffbfdfff02000200, x4, 48, x6)

inst_21:
// rs1==x28, rs2==x14, rs2_h3_val == -17, rs1_h1_val == -5, rs1_h0_val == 512, rs2_h1_val == -33, rs1_h3_val == -129, rs1_h2_val == -17, rs2_h2_val == 0
// opcode: smalda ; op1:x28; op2:x14; dest:x19; op1val:0xff7fffeffffb0200;  op2val:0xffef0000ffdf0002
TEST_P64_PNN_OP(smalda, x19, $rd_hi, x28, x14, 0x0000000000000000, $correctval_hi, 0xff7fffeffffb0200, 0xffef0000ffdf0002, x4, 64, x6)

inst_22:
// rs1==x29, rs2==x21, rs2_h3_val == -9, rs2_h1_val == -257, rs1_h2_val == 2
// opcode: smalda ; op1:x29; op2:x21; dest:x27; op1val:0xfff8000204003fff;  op2val:0xfff70009feff0009
TEST_P64_PNN_OP(smalda, x27, $rd_hi, x29, x21, 0x0000000000000000, $correctval_hi, 0xfff8000204003fff, 0xfff70009feff0009, x4, 80, x6)

inst_23:
// rs1==x17, rs2==x10, rs2_h3_val == -5, rs2_h1_val == -5, rs1_h2_val == -9, rs1_h0_val == -5, rs2_h0_val == 256
// opcode: smalda ; op1:x17; op2:x10; dest:x14; op1val:0xc000fff70800fffb;  op2val:0xfffb0040fffb0100
TEST_P64_PNN_OP(smalda, x14, $rd_hi, x17, x10, 0x0000000000000000, $correctval_hi, 0xc000fff70800fffb, 0xfffb0040fffb0100, x4, 96, x6)

inst_24:
// rs1==x23, rs2==x11, rs2_h3_val == -3, rs2_h2_val == 32, rs2_h1_val == -1, rs2_h0_val == 21845
// opcode: smalda ; op1:x23; op2:x11; dest:x14; op1val:0xff7ffffa0004ffef;  op2val:0xfffd0020ffff5555
TEST_P64_PNN_OP(smalda, x14, $rd_hi, x23, x11, 0x0000000000000000, $correctval_hi, 0xff7ffffa0004ffef, 0xfffd0020ffff5555, x4, 112, x6)

inst_25:
// rs1==x21, rs2==x8, rs2_h3_val == -32768, rs2_h0_val == 1024, rs2_h2_val == -5, rs1_h2_val == -33
// opcode: smalda ; op1:x21; op2:x8; dest:x29; op1val:0x5555ffdf3ffffffa;  op2val:0x8000fffb00060400
TEST_P64_PNN_OP(smalda, x29, $rd_hi, x21, x8, 0x0000000000000000, $correctval_hi, 0x5555ffdf3ffffffa, 0x8000fffb00060400, x4, 128, x6)

inst_26:
// rs1==x22, rs2==x15, rs2_h3_val == 8192, rs1_h2_val == 16384, rs1_h3_val == 512, rs2_h1_val == -513, rs2_h2_val == 2048, rs1_h1_val == -1, rs2_h0_val == 4096
// opcode: smalda ; op1:x22; op2:x15; dest:x28; op1val:0x02004000fffffffa;  op2val:0x20000800fdff1000
TEST_P64_PNN_OP(smalda, x28, $rd_hi, x22, x15, 0x0000000000000000, $correctval_hi, 0x02004000fffffffa, 0x20000800fdff1000, x4, 144, x6)

inst_27:
// rs1==x12, rs2==x3, rs2_h3_val == 4096, rs1_h3_val == -17
// opcode: smalda ; op1:x12; op2:x3; dest:x5; op1val:0xffef00807ffffff6;  op2val:0x1000002000020400
TEST_P64_PNN_OP(smalda, x5, $rd_hi, x12, x3, 0x0000000000000000, $correctval_hi, 0xffef00807ffffff6, 0x1000002000020400, x4, 160, x6)

inst_28:
// rs1==x3, rs2==x23, rs2_h3_val == 2048, rs2_h1_val == 32
// opcode: smalda ; op1:x3; op2:x23; dest:x8; op1val:0x000700053fffff7f;  op2val:0x08003fff0020fdff
TEST_P64_PNN_OP(smalda, x8, $rd_hi, x3, x23, 0x0000000000000000, $correctval_hi, 0x000700053fffff7f, 0x08003fff0020fdff, x4, 176, x6)

inst_29:
// rs1==x30, rs2==x2, rs2_h3_val == 512, rs2_h2_val == -16385, rs2_h1_val == -129, rs2_h0_val == -3
// opcode: smalda ; op1:x30; op2:x2; dest:x16; op1val:0xfffafff8ffbffff7;  op2val:0x0200bfffff7ffffd
TEST_P64_PNN_OP(smalda, x16, $rd_hi, x30, x2, 0x0000000000000000, $correctval_hi, 0xfffafff8ffbffff7, 0x0200bfffff7ffffd, x4, 192, x6)

inst_30:
// rs1==x5, rs2==x27, rs2_h3_val == 256, rs1_h0_val == 8192, rs2_h1_val == -21846, rs1_h3_val == 32767, rs2_h2_val == 1024
// opcode: smalda ; op1:x5; op2:x27; dest:x30; op1val:0x7ffffffcc0002000;  op2val:0x01000400aaaafffa
TEST_P64_PNN_OP(smalda, x30, $rd_hi, x5, x27, 0x0000000000000000, $correctval_hi, 0x7ffffffcc0002000, 0x01000400aaaafffa, x4, 208, x6)

inst_31:
// rs1==x18, rs2==x5, rs2_h3_val == 128, rs2_h0_val == 64, rs1_h1_val == -9, rs1_h2_val == 32767
// opcode: smalda ; op1:x18; op2:x5; dest:x8; op1val:0xfff87ffffff7ff7f;  op2val:0x0080ffef3fff0040
TEST_P64_PNN_OP(smalda, x8, $rd_hi, x18, x5, 0x0000000000000000, $correctval_hi, 0xfff87ffffff7ff7f, 0x0080ffef3fff0040, x4, 224, x6)

inst_32:
// rs2_h3_val == 64, rs1_h2_val == -21846
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xfff9aaaa0800fffc;  op2val:0x0040bfff0006c000
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff9aaaa0800fffc, 0x0040bfff0006c000, x4, 240, x6)

inst_33:
// rs2_h3_val == 16, rs1_h2_val == -2049
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x0040f7ffdfff3fff;  op2val:0x0010000910000007
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040f7ffdfff3fff, 0x0010000910000007, x4, 256, x6)

inst_34:
// rs2_h3_val == 4, rs1_h3_val == 4, rs2_h0_val == 32
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x0004fff6fffd0100;  op2val:0x00040020fffe0020
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0004fff6fffd0100, 0x00040020fffe0020, x4, 272, x6)

inst_35:
// rs2_h3_val == 2, rs1_h2_val == 16, rs1_h1_val == 21845
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xc00000105555fff9;  op2val:0x0002dfffc0000080
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xc00000105555fff9, 0x0002dfffc0000080, x4, 288, x6)

inst_36:
// rs1_h1_val == -2, rs1_h3_val == -21846, rs1_h2_val == -5, rs1_h0_val == -21846, rs2_h1_val == 8
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffbfffeaaaa;  op2val:0xfffb001000080200
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaafffbfffeaaaa, 0xfffb001000080200, x4, 304, x6)

inst_37:
// rs1_h1_val == 8192, rs1_h2_val == 8192, rs1_h3_val == 16384, rs2_h2_val == -3, rs1_h0_val == 1
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x4000200020000001;  op2val:0x0100fffdaaaafff9
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x4000200020000001, 0x0100fffdaaaafff9, x4, 320, x6)

inst_38:
// rs1_h1_val == 128, rs1_h2_val == -32768
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x0003800000800020;  op2val:0x000700060007fffc
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0003800000800020, 0x000700060007fffc, x4, 336, x6)

inst_39:
// rs1_h1_val == 64, rs1_h2_val == 1024, rs2_h2_val == 1
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x0005040000404000;  op2val:0x00050001fffb0040
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0005040000404000, 0x00050001fffb0040, x4, 352, x6)

inst_40:
// rs1_h1_val == 32, rs2_h2_val == -4097, rs2_h0_val == -21846, rs1_h2_val == 21845
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x0010555500200020;  op2val:0x0009efff0200aaaa
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0010555500200020, 0x0009efff0200aaaa, x4, 368, x6)

inst_41:
// rs1_h1_val == 16, rs1_h2_val == -513, rs1_h0_val == 32767
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x0004fdff00107fff;  op2val:0x00043fff0200fdff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0004fdff00107fff, 0x00043fff0200fdff, x4, 384, x6)

inst_42:
// rs1_h1_val == 8, rs2_h2_val == 8, rs1_h0_val == -2
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x555500020008fffe;  op2val:0x000300080008ffef
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x555500020008fffe, 0x000300080008ffef, x4, 400, x6)

inst_43:
// rs1_h1_val == 2, rs2_h2_val == 4096, rs1_h3_val == -32768
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffc00022000;  op2val:0xbfff1000fffe5555
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000fffc00022000, 0xbfff1000fffe5555, x4, 416, x6)

inst_44:
// rs1_h1_val == 1, rs2_h1_val == 1024, rs2_h0_val == 8, rs2_h2_val == 512, rs1_h3_val == 8
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x000855550001ffef;  op2val:0x0200020004000008
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000855550001ffef, 0x0200020004000008, x4, 432, x6)

inst_45:
// rs1_h1_val == 0, rs1_h0_val == 1024, rs1_h3_val == -16385
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xbfff000500000400;  op2val:0x0080efffff7fefff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbfff000500000400, 0x0080efffff7fefff, x4, 448, x6)

inst_46:
// rs1_h0_val == 21845, rs2_h1_val == -4097, rs2_h0_val == -257, rs1_h2_val == -16385, rs1_h3_val == -9, rs2_h2_val == 4
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xfff7bfff3fff5555;  op2val:0x00200004effffeff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7bfff3fff5555, 0x00200004effffeff, x4, 464, x6)

inst_47:
// rs1_h0_val == -16385, rs2_h1_val == -65, rs1_h2_val == 1
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xc00000010003bfff;  op2val:0x00030009ffbf0009
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xc00000010003bfff, 0x00030009ffbf0009, x4, 480, x6)

inst_48:
// rs1_h0_val == -1025, rs1_h3_val == -3, rs2_h0_val == -9
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfff6fffffbff;  op2val:0x02007ffffffefff7
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffdfff6fffffbff, 0x02007ffffffefff7, x4, 496, x6)

inst_49:
// rs1_h0_val == -513, rs2_h2_val == -1
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x0006c000ffbffdff;  op2val:0xaaaaffff00205555
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0006c000ffbffdff, 0xaaaaffff00205555, x4, 512, x6)

inst_50:
// rs1_h0_val == -257, rs2_h0_val == 4
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xffefc0000008feff;  op2val:0x00050003ffff0004
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffefc0000008feff, 0x00050003ffff0004, x4, 528, x6)

inst_51:
// rs1_h0_val == 4096, rs1_h3_val == 32
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x00202000fffa1000;  op2val:0xffbf0800fff90020
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00202000fffa1000, 0xffbf0800fff90020, x4, 544, x6)

inst_52:
// rs1_h0_val == 2048, rs1_h2_val == 64, rs2_h3_val == -1, rs2_h0_val == 0
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xfbff004000040800;  op2val:0xffff000100030000
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbff004000040800, 0xffff000100030000, x4, 560, x6)

inst_53:
// rs1_h0_val == 128, rs2_h0_val == -33, rs1_h3_val == -33
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xffdffbffdfff0080;  op2val:0x7fff04000009ffdf
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdffbffdfff0080, 0x7fff04000009ffdf, x4, 576, x6)

inst_54:
// rs1_h0_val == 8, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x8000aaaa04000008;  op2val:0xf7ff00090001c000
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000aaaa04000008, 0xf7ff00090001c000, x4, 592, x6)

inst_55:
// rs2_h1_val == 4, rs1_h1_val == -4097, rs2_h2_val == 256, rs2_h0_val == -129
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffdfeffffbff;  op2val:0xfff701000004ff7f
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff6ffdfeffffbff, 0xfff701000004ff7f, x4, 608, x6)

inst_56:
// rs2_h1_val == 0, rs1_h3_val == 8192
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x200020000003ffdf;  op2val:0x0006bfff00000010
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x200020000003ffdf, 0x0006bfff00000010, x4, 624, x6)

inst_57:
// rs2_h0_val == 32767, rs2_h1_val == 64, rs2_h2_val == 21845
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x0200fff900080008;  op2val:0xaaaa555500407fff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200fff900080008, 0xaaaa555500407fff, x4, 640, x6)

inst_58:
// rs2_h0_val == -16385, rs1_h0_val == 4, rs1_h3_val == 4096
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x1000effffffc0004;  op2val:0x55550000ffffbfff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x1000effffffc0004, 0x55550000ffffbfff, x4, 656, x6)

inst_59:
// rs2_h0_val == -8193, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x001000800009fff6;  op2val:0xfff95555fdffdfff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x001000800009fff6, 0xfff95555fdffdfff, x4, 672, x6)

inst_60:
// rs2_h0_val == -2049, rs1_h2_val == -2
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x0009fffe00800008;  op2val:0xffdf0010ffbff7ff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0009fffe00800008, 0xffdf0010ffbff7ff, x4, 688, x6)

inst_61:
// rs2_h0_val == -65, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xfffabfff3fff0200;  op2val:0xc000fff90100ffbf
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffabfff3fff0200, 0xc000fff90100ffbf, x4, 704, x6)

inst_62:
// rs2_h0_val == -5, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x0009efff0010ff7f;  op2val:0xc0000400c000fffb
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0009efff0010ff7f, 0xc0000400c000fffb, x4, 720, x6)

inst_63:
// rs2_h0_val == -2, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffbff00080008;  op2val:0xfffafff7fffafffe
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbfffbff00080008, 0xfffafff7fffafffe, x4, 736, x6)

inst_64:
// rs2_h0_val == -32768, rs1_h3_val == -257
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xfefffeff0006dfff;  op2val:0x00400200ff7f8000
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfefffeff0006dfff, 0x00400200ff7f8000, x4, 752, x6)

inst_65:
// rs2_h0_val == 16384, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x0005bfff10004000;  op2val:0x1000040000204000
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0005bfff10004000, 0x1000040000204000, x4, 768, x6)

inst_66:
// rs2_h0_val == -1, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x020000100000ffbf;  op2val:0xfffdfffcdfffffff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x020000100000ffbf, 0xfffdfffcdfffffff, x4, 784, x6)

inst_67:
// rs1_h0_val == 2, rs1_h2_val == 256
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa010080000002;  op2val:0x040000010000fffd
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaa010080000002, 0x040000010000fffd, x4, 800, x6)

inst_68:
// rs1_h0_val == 0, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x00055555fdff0000;  op2val:0x10000800fffdc000
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00055555fdff0000, 0x10000800fffdc000, x4, 816, x6)

inst_69:
// rs1_h0_val == -1, rs1_h1_val == -2049
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa7ffff7ffffff;  op2val:0xfff704000400fff6
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaa7ffff7ffffff, 0xfff704000400fff6, x4, 832, x6)

inst_70:
// rs1_h3_val == -5, rs2_h2_val == -1025
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfff77ffffffb;  op2val:0xfff7fbff1000ffdf
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffbfff77ffffffb, 0xfff7fbff1000ffdf, x4, 848, x6)

inst_71:
// rs2_h3_val == 1, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x1000effffffa0000;  op2val:0x0001ffdffffc0009
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x1000effffffa0000, 0x0001ffdffffc0009, x4, 864, x6)

inst_72:
// rs1_h3_val == 1024, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x040002000010ff7f;  op2val:0xfdff00000200fffd
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x040002000010ff7f, 0xfdff00000200fffd, x4, 880, x6)

inst_73:
// rs1_h3_val == 256, rs2_h2_val == 2
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x01000005ffffaaaa;  op2val:0x000100020009ff7f
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x01000005ffffaaaa, 0x000100020009ff7f, x4, 896, x6)

inst_74:
// rs2_h2_val == -2049, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffb40000100;  op2val:0xffbff7fffff9fbff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdffffffb40000100, 0xffbff7fffff9fbff, x4, 912, x6)

inst_75:
// rs1_h3_val == 128, rs1_h1_val == -1025
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x00800003fbffffff;  op2val:0xeffffffafffefff8
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00800003fbffffff, 0xeffffffafffefff8, x4, 928, x6)

inst_76:
// rs2_h2_val == -257, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x0008fff602000009;  op2val:0x0006feff0007fff7
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0008fff602000009, 0x0006feff0007fff7, x4, 944, x6)

inst_77:
// rs2_h2_val == -65, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xfff600010200dfff;  op2val:0x8000ffbffff8fffb
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff600010200dfff, 0x8000ffbffff8fffb, x4, 960, x6)

inst_78:
// rs1_h3_val == 0, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x0000f7ff00053fff;  op2val:0xfffc0800fff82000
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000f7ff00053fff, 0xfffc0800fff82000, x4, 976, x6)

inst_79:
// rs1_h3_val == -1, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xffff800001000001;  op2val:0xfffdfdff0006feff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff800001000001, 0xfffdfdff0006feff, x4, 992, x6)

inst_80:
// rs2_h2_val == -2, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xfff80000fffcfff7;  op2val:0x7ffffffe00025555
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff80000fffcfff7, 0x7ffffffe00025555, x4, 1008, x6)

inst_81:
// rs2_h2_val == 16384, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff4000fffc;  op2val:0x3fff40000080fbff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7fff4000fffc, 0x3fff40000080fbff, x4, 1024, x6)

inst_82:
// rs1_h2_val == -129, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x2000ff7f80000400;  op2val:0xaaaafff83fffbfff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000ff7f80000400, 0xaaaafff83fffbfff, x4, 1040, x6)

inst_83:
// rs1_h2_val == -3, rs2_h1_val == -32768
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffd2000ffbf;  op2val:0xaaaafffb8000fff9
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000fffd2000ffbf, 0xaaaafffb8000fff9, x4, 1056, x6)

inst_84:
// rs1_h2_val == 4096, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xfff9100001000010;  op2val:0xfffc3fffefff0009
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff9100001000010, 0xfffc3fffefff0009, x4, 1072, x6)

inst_85:
// rs1_h2_val == 2048, rs1_h1_val == -17
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x20000800ffef0005;  op2val:0xfffc555500200100
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x20000800ffef0005, 0xfffc555500200100, x4, 1088, x6)

inst_86:
// rs2_h1_val == -16385, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x5555c0003fffff7f;  op2val:0xfff68000bfff0004
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x5555c0003fffff7f, 0xfff68000bfff0004, x4, 1104, x6)

inst_87:
// rs1_h2_val == 32, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x00060020fffb0080;  op2val:0xfffa00080008dfff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00060020fffb0080, 0xfffa00080008dfff, x4, 1120, x6)

inst_88:
// rs1_h1_val == -129, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x0006fffdff7f0008;  op2val:0x0003ffff0006dfff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0006fffdff7f0008, 0x0003ffff0006dfff, x4, 1136, x6)

inst_89:
// rs1_h2_val == -1, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffffff6f7ff;  op2val:0xff7f02000040f7ff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000fffffff6f7ff, 0xff7f02000040f7ff, x4, 1152, x6)

inst_90:
// rs1_h1_val == -21846, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x00004000aaaa0002;  op2val:0x0002fbff0002fffa
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00004000aaaa0002, 0x0002fbff0002fffa, x4, 1168, x6)

inst_91:
// rs2_h2_val == -21846, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x002000400080fff6;  op2val:0x0005aaaafffdffbf
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x002000400080fff6, 0x0005aaaafffdffbf, x4, 1184, x6)

inst_92:
// rs2_h1_val == 16384, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xfeff00200010ff7f;  op2val:0x0009ff7f4000fffe
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeff00200010ff7f, 0x0009ff7f4000fffe, x4, 1200, x6)

inst_93:
// rs1_h1_val == -16385, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x00000100bffffffc;  op2val:0xfff60001fffebfff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000100bffffffc, 0xfff60001fffebfff, x4, 1216, x6)

inst_94:
// rs2_h1_val == 2048, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffb00100800;  op2val:0xfffa00050800fbff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffdfffb00100800, 0xfffa00050800fbff, x4, 1232, x6)

inst_95:
// rs1_h3_val == -2, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xfffe00207fffffff;  op2val:0xfff70080fff87fff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffe00207fffffff, 0xfff70080fff87fff, x4, 1248, x6)

inst_96:
// rs2_h3_val == 0, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x8000effffffb3fff;  op2val:0x0000000200020040
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000effffffb3fff, 0x0000000200020040, x4, 1264, x6)

inst_97:
// rs1_h1_val == -33, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0xfff80400ffdfff7f;  op2val:0xfffaffbffff90006
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff80400ffdfff7f, 0xfffaffbffff90006, x4, 1280, x6)

inst_98:
// rs1_h3_val == 2048, 
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x0800ffdf0040c000;  op2val:0xaaaaffef7fff7fff
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800ffdf0040c000, 0xaaaaffef7fff7fff, x4, 1296, x6)

inst_99:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h1_val == 1024, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h3_val == -2, rs2_h2_val == -9
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffeff0400fffa;  op2val:0xfffefff7c0000005
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3ffffeff0400fffa, 0xfffefff7c0000005, x4, 1312, x6)

inst_100:
// rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == -2049, rs2_h2_val == 128
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x0005000300033fff;  op2val:0x00060080f7ff0006
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0005000300033fff, 0x00060080f7ff0006, x4, 1328, x6)

inst_101:
// rs2_h3_val == -21846, rs2_h1_val == -1025, rs1_h0_val == 16, rs1_h1_val == 2048
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x0005fff908000010;  op2val:0xaaaafff7fbfffffc
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0005fff908000010, 0xaaaafff7fbfffffc, x4, 1344, x6)

inst_102:
// rs2_h3_val == -16385, rs1_h1_val == -3, rs2_h0_val == 16, rs1_h3_val == 2, rs1_h2_val == 4, rs2_h2_val == 8192, rs2_h1_val == -3
// opcode: smalda ; op1:x30; op2:x29; dest:x31; op1val:0x00020004fffdfff8;  op2val:0xbfff2000fffd0010
TEST_P64_PNN_OP(smalda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00020004fffdfff8, 0xbfff2000fffd0010, x4, 1360, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 172*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
