
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kslli32 instruction of the RISC-V RV64PZicsr extension for the kslli32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kslli32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 == rd, rs1==x27, rd==x27, rs1_w0_val == -2147483648, rs1_w1_val == -32769, imm_val == 20
// opcode: kslli32 ; op1:x27; dest:x27; op1val:0xffff7fff80000000;  immval:0x14
TEST_PKIMM_OP( kslli32, x27, x27, 0x0000000000000000, 0xffff7fff80000000, 0x14, x27, x4, 0, x1)

inst_1:
// rs1 != rd, rs1==x21, rd==x13, imm_val == 31, rs1_w0_val == 2147483647, rs1_w1_val == -2049
// opcode: kslli32 ; op1:x21; dest:x13; op1val:0xfffff7ff7fffffff;  immval:0x1f
TEST_PKIMM_OP( kslli32, x13, x21, 0x0000000000000000, 0xfffff7ff7fffffff, 0x1f, x21, x4, 16, x1)

inst_2:
// rs1==x25, rd==x5, imm_val == 30, rs1_w0_val == 536870912, rs1_w1_val == -2
// opcode: kslli32 ; op1:x25; dest:x5; op1val:0xfffffffe20000000;  immval:0x1e
TEST_PKIMM_OP( kslli32, x5, x25, 0x0000000000000000, 0xfffffffe20000000, 0x1e, x25, x4, 32, x1)

inst_3:
// rs1==x0, rd==x6, imm_val == 29, rs1_w1_val == 33554432, rs1_w0_val == -2
// opcode: kslli32 ; op1:x0; dest:x6; op1val:0x2000000fffffffe;  immval:0x1d
TEST_PKIMM_OP( kslli32, x6, x0, 0x0000000000000000, 0x2000000fffffffe, 0x1d, x0, x4, 48, x1)

inst_4:
// rs1==x12, rd==x14, imm_val == 28, rs1_w1_val == -9
// opcode: kslli32 ; op1:x12; dest:x14; op1val:0xfffffff7fffffffe;  immval:0x1c
TEST_PKIMM_OP( kslli32, x14, x12, 0x0000000000000000, 0xfffffff7fffffffe, 0x1c, x12, x4, 64, x1)

inst_5:
// rs1==x30, rd==x23, imm_val == 27, rs1_w1_val == -65537, rs1_w0_val == 134217728
// opcode: kslli32 ; op1:x30; dest:x23; op1val:0xfffeffff08000000;  immval:0x1b
TEST_PKIMM_OP( kslli32, x23, x30, 0x0000000000000000, 0xfffeffff08000000, 0x1b, x30, x4, 80, x1)

inst_6:
// rs1==x23, rd==x31, imm_val == 26, rs1_w0_val == 33554432
// opcode: kslli32 ; op1:x23; dest:x31; op1val:0x200000002000000;  immval:0x1a
TEST_PKIMM_OP( kslli32, x31, x23, 0x0000000000000000, 0x200000002000000, 0x1a, x23, x4, 96, x1)

inst_7:
// rs1==x10, rd==x15, imm_val == 25, rs1_w1_val == -17
// opcode: kslli32 ; op1:x10; dest:x15; op1val:0xffffffef02000000;  immval:0x19
TEST_PKIMM_OP( kslli32, x15, x10, 0x0000000000000000, 0xffffffef02000000, 0x19, x10, x4, 112, x1)

inst_8:
// rs1==x6, rd==x17, imm_val == 24, rs1_w1_val == -131073, rs1_w0_val == -1431655766
// opcode: kslli32 ; op1:x6; dest:x17; op1val:0xfffdffffaaaaaaaa;  immval:0x18
TEST_PKIMM_OP( kslli32, x17, x6, 0x0000000000000000, 0xfffdffffaaaaaaaa, 0x18, x6, x4, 128, x1)

inst_9:
// rs1==x15, rd==x8, imm_val == 23, rs1_w1_val == 524288
// opcode: kslli32 ; op1:x15; dest:x8; op1val:0x0800007fffffff;  immval:0x17
TEST_PKIMM_OP( kslli32, x8, x15, 0x0000000000000000, 0x0800007fffffff, 0x17, x15, x4, 144, x1)

inst_10:
// rs1==x7, rd==x26, imm_val == 22, rs1_w0_val == -262145, rs1_w1_val == 2048
// opcode: kslli32 ; op1:x7; dest:x26; op1val:0x000800fffbffff;  immval:0x16
TEST_PKIMM_OP( kslli32, x26, x7, 0x0000000000000000, 0x000800fffbffff, 0x16, x7, x4, 160, x1)

inst_11:
// rs1==x5, rd==x20, imm_val == 21, rs1_w0_val == -268435457
// opcode: kslli32 ; op1:x5; dest:x20; op1val:0x000007efffffff;  immval:0x15
TEST_PKIMM_OP( kslli32, x20, x5, 0x0000000000000000, 0x000007efffffff, 0x15, x5, x4, 176, x1)

inst_12:
// rs1==x22, rd==x30, imm_val == 19, 
// opcode: kslli32 ; op1:x22; dest:x30; op1val:0xffffffef7fffffff;  immval:0x13
TEST_PKIMM_OP( kslli32, x30, x22, 0x0000000000000000, 0xffffffef7fffffff, 0x13, x22, x4, 192, x1)

inst_13:
// rs1==x2, rd==x0, imm_val == 18, rs1_w0_val == -2097153, rs1_w1_val == 1431655765
// opcode: kslli32 ; op1:x2; dest:x0; op1val:0x55555555ffdfffff;  immval:0x12
TEST_PKIMM_OP( kslli32, x0, x2, 0x0000000000000000, 0x55555555ffdfffff, 0x12, x2, x4, 208, x1)

inst_14:
// rs1==x14, rd==x3, imm_val == 17, 
// opcode: kslli32 ; op1:x14; dest:x3; op1val:0x08000000000009;  immval:0x11
TEST_PKIMM_OP( kslli32, x3, x14, 0x0000000000000000, 0x08000000000009, 0x11, x14, x4, 224, x1)

inst_15:
// rs1==x19, rd==x9, imm_val == 16, rs1_w1_val == -1, rs1_w0_val == 1073741824
// opcode: kslli32 ; op1:x19; dest:x9; op1val:0xffffffff40000000;  immval:0x10
TEST_PKIMM_OP( kslli32, x9, x19, 0x0000000000000000, 0xffffffff40000000, 0x10, x19, x4, 240, x1)

inst_16:
// rs1==x8, rd==x2, imm_val == 15, rs1_w0_val == 256
// opcode: kslli32 ; op1:x8; dest:x2; op1val:0xffff7fff00000100;  immval:0xf
TEST_PKIMM_OP( kslli32, x2, x8, 0x0000000000000000, 0xffff7fff00000100, 0xf, x8, x4, 256, x1)

inst_17:
// rs1==x20, rd==x18, imm_val == 14, rs1_w1_val == -4194305
// opcode: kslli32 ; op1:x20; dest:x18; op1val:0xffbfffff80000000;  immval:0xe
TEST_PKIMM_OP( kslli32, x18, x20, 0x0000000000000000, 0xffbfffff80000000, 0xe, x20, x4, 272, x1)

inst_18:
// rs1==x16, rd==x28, imm_val == 13, rs1_w1_val == 1024, rs1_w0_val == 131072
// opcode: kslli32 ; op1:x16; dest:x28; op1val:0x00040000020000;  immval:0xd
TEST_PKIMM_OP( kslli32, x28, x16, 0x0000000000000000, 0x00040000020000, 0xd, x16, x4, 288, x1)

inst_19:
// rs1==x28, rd==x19, imm_val == 12, rs1_w0_val == 524288
// opcode: kslli32 ; op1:x28; dest:x19; op1val:0x00000300080000;  immval:0xc
TEST_PKIMM_OP( kslli32, x19, x28, 0x0000000000000000, 0x00000300080000, 0xc, x28, x4, 304, x1)

inst_20:
// rs1==x11, rd==x16, imm_val == 11, rs1_w0_val == -134217729
// opcode: kslli32 ; op1:x11; dest:x16; op1val:0xfffffffcf7ffffff;  immval:0xb
TEST_PKIMM_OP( kslli32, x16, x11, 0x0000000000000000, 0xfffffffcf7ffffff, 0xb, x11, x4, 320, x1)

inst_21:
// rs1==x9, rd==x1, imm_val == 10, rs1_w0_val == 32768, rs1_w1_val == 8
// opcode: kslli32 ; op1:x9; dest:x1; op1val:0x00000800008000;  immval:0xa
TEST_PKIMM_OP( kslli32, x1, x9, 0x0000000000000000, 0x00000800008000, 0xa, x9, x4, 336, x5)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_22:
// rs1==x18, rd==x24, imm_val == 9, rs1_w0_val == 2048, rs1_w1_val == -134217729
// opcode: kslli32 ; op1:x18; dest:x24; op1val:0xf7ffffff00000800;  immval:0x9
TEST_PKIMM_OP( kslli32, x24, x18, 0x0000000000000000, 0xf7ffffff00000800, 0x9, x18, x2, 0, x5)

inst_23:
// rs1==x29, rd==x21, imm_val == 8, 
// opcode: kslli32 ; op1:x29; dest:x21; op1val:0xffffffff08000000;  immval:0x8
TEST_PKIMM_OP( kslli32, x21, x29, 0x0000000000000000, 0xffffffff08000000, 0x8, x29, x2, 16, x5)

inst_24:
// rs1==x4, rd==x25, imm_val == 7, rs1_w1_val == 1048576
// opcode: kslli32 ; op1:x4; dest:x25; op1val:0x100000fffbffff;  immval:0x7
TEST_PKIMM_OP( kslli32, x25, x4, 0x0000000000000000, 0x100000fffbffff, 0x7, x4, x2, 32, x5)

inst_25:
// rs1==x17, rd==x4, imm_val == 6, 
// opcode: kslli32 ; op1:x17; dest:x4; op1val:0xffffffef08000000;  immval:0x6
TEST_PKIMM_OP( kslli32, x4, x17, 0x0000000000000000, 0xffffffef08000000, 0x6, x17, x2, 48, x5)

inst_26:
// rs1==x1, rd==x29, imm_val == 5, rs1_w1_val == 64
// opcode: kslli32 ; op1:x1; dest:x29; op1val:0x000040fffffff8;  immval:0x5
TEST_PKIMM_OP( kslli32, x29, x1, 0x0000000000000000, 0x000040fffffff8, 0x5, x1, x2, 64, x5)

inst_27:
// rs1==x13, rd==x7, imm_val == 4, rs1_w1_val == -5, rs1_w0_val == -16777217
// opcode: kslli32 ; op1:x13; dest:x7; op1val:0xfffffffbfeffffff;  immval:0x4
TEST_PKIMM_OP( kslli32, x7, x13, 0x0000000000000000, 0xfffffffbfeffffff, 0x4, x13, x2, 80, x5)

inst_28:
// rs1==x24, rd==x11, imm_val == 3, rs1_w1_val == 536870912
// opcode: kslli32 ; op1:x24; dest:x11; op1val:0x2000000002000000;  immval:0x3
TEST_PKIMM_OP( kslli32, x11, x24, 0x0000000000000000, 0x2000000002000000, 0x3, x24, x2, 96, x5)

inst_29:
// rs1==x26, rd==x10, imm_val == 2, rs1_w1_val == 4
// opcode: kslli32 ; op1:x26; dest:x10; op1val:0x000004fffffffc;  immval:0x2
TEST_PKIMM_OP( kslli32, x10, x26, 0x0000000000000000, 0x000004fffffffc, 0x2, x26, x2, 112, x5)

inst_30:
// rs1==x31, rd==x22, imm_val == 1, rs1_w0_val == -536870913
// opcode: kslli32 ; op1:x31; dest:x22; op1val:0xffff7fffdfffffff;  immval:0x1
TEST_PKIMM_OP( kslli32, x22, x31, 0x0000000000000000, 0xffff7fffdfffffff, 0x1, x31, x2, 128, x5)

inst_31:
// rs1==x3, rd==x12, imm_val == 0, rs1_w0_val == -1
// opcode: kslli32 ; op1:x3; dest:x12; op1val:0xffffffefffffffff;  immval:0x0
TEST_PKIMM_OP( kslli32, x12, x3, 0x0000000000000000, 0xffffffefffffffff, 0x0, x3, x2, 144, x5)

inst_32:
// rs1_w1_val == -1431655766, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xaaaaaaaa00000006;  immval:0x12
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xaaaaaaaa00000006, 0x12, x30, x2, 160, x5)

inst_33:
// rs1_w1_val == 2147483647, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x7ffffffffffffffa;  immval:0x3
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x7ffffffffffffffa, 0x3, x30, x2, 176, x5)

inst_34:
// rs1_w1_val == -1073741825, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xbfffffff00000005;  immval:0x4
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xbfffffff00000005, 0x4, x30, x2, 192, x5)

inst_35:
// rs1_w1_val == -536870913, rs1_w0_val == 2097152
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xdfffffff00200000;  immval:0x14
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xdfffffff00200000, 0x14, x30, x2, 208, x5)

inst_36:
// rs1_w1_val == -268435457, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xefffffffefffffff;  immval:0x8
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xefffffffefffffff, 0x8, x30, x2, 224, x5)

inst_37:
// rs1_w1_val == -67108865, rs1_w0_val == 8192
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xfbffffff00002000;  immval:0x13
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xfbffffff00002000, 0x13, x30, x2, 240, x5)

inst_38:
// rs1_w1_val == -33554433, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xfdffffff00002000;  immval:0x3
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xfdffffff00002000, 0x3, x30, x2, 256, x5)

inst_39:
// rs1_w1_val == -16777217, rs1_w0_val == -1048577
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xfeffffffffefffff;  immval:0xe
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xfeffffffffefffff, 0xe, x30, x2, 272, x5)

inst_40:
// rs1_w1_val == -8388609, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xff7fffff00000800;  immval:0xf
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xff7fffff00000800, 0xf, x30, x2, 288, x5)

inst_41:
// rs1_w1_val == -2097153, rs1_w0_val == 16
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xffdfffff00000010;  immval:0x1b
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xffdfffff00000010, 0x1b, x30, x2, 304, x5)

inst_42:
// rs1_w1_val == -1048577, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xffeffffffeffffff;  immval:0x1a
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xffeffffffeffffff, 0x1a, x30, x2, 320, x5)

inst_43:
// rs1_w1_val == -524289, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xfff7ffffdfffffff;  immval:0x1e
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xfff7ffffdfffffff, 0x1e, x30, x2, 336, x5)

inst_44:
// rs1_w1_val == -262145, rs1_w0_val == -257
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xfffbfffffffffeff;  immval:0xf
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xfffbfffffffffeff, 0xf, x30, x2, 352, x5)

inst_45:
// rs1_w1_val == -16385, rs1_w0_val == 1024
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xffffbfff00000400;  immval:0x0
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xffffbfff00000400, 0x0, x30, x2, 368, x5)

inst_46:
// rs1_w1_val == -8193, rs1_w0_val == 4
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xffffdfff00000004;  immval:0x19
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xffffdfff00000004, 0x19, x30, x2, 384, x5)

inst_47:
// rs1_w1_val == -4097, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xffffefffffffffff;  immval:0x9
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xffffefffffffffff, 0x9, x30, x2, 400, x5)

inst_48:
// rs1_w1_val == -1025, rs1_w0_val == 8388608
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xfffffbff00800000;  immval:0x10
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xfffffbff00800000, 0x10, x30, x2, 416, x5)

inst_49:
// rs1_w1_val == -513, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xfffffdff20000000;  immval:0x9
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xfffffdff20000000, 0x9, x30, x2, 432, x5)

inst_50:
// rs1_w1_val == -257, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xfffffeff00200000;  immval:0x1e
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xfffffeff00200000, 0x1e, x30, x2, 448, x5)

inst_51:
// rs1_w1_val == -129, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xffffff7fdfffffff;  immval:0x0
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xffffff7fdfffffff, 0x0, x30, x2, 464, x5)

inst_52:
// rs1_w1_val == -65, rs1_w0_val == -9
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xffffffbffffffff7;  immval:0x13
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xffffffbffffffff7, 0x13, x30, x2, 480, x5)

inst_53:
// rs1_w1_val == -33, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xffffffdfffdfffff;  immval:0x12
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xffffffdfffdfffff, 0x12, x30, x2, 496, x5)

inst_54:
// rs1_w1_val == -3, rs1_w0_val == 16384
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xfffffffd00004000;  immval:0x19
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xfffffffd00004000, 0x19, x30, x2, 512, x5)

inst_55:
// rs1_w0_val == -65, rs1_w1_val == 8192
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x002000ffffffbf;  immval:0x1d
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x002000ffffffbf, 0x1d, x30, x2, 528, x5)

inst_56:
// rs1_w0_val == -33, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xff7fffffffffffdf;  immval:0x10
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xff7fffffffffffdf, 0x10, x30, x2, 544, x5)

inst_57:
// rs1_w0_val == -17, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x000003ffffffef;  immval:0xe
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x000003ffffffef, 0xe, x30, x2, 560, x5)

inst_58:
// rs1_w0_val == -5, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x55555555fffffffb;  immval:0x1b
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x55555555fffffffb, 0x1b, x30, x2, 576, x5)

inst_59:
// rs1_w0_val == -3, rs1_w1_val == 16
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x000010fffffffd;  immval:0xe
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x000010fffffffd, 0xe, x30, x2, 592, x5)

inst_60:
// rs1_w0_val == 268435456, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xfffeffff10000000;  immval:0x18
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xfffeffff10000000, 0x18, x30, x2, 608, x5)

inst_61:
// rs1_w0_val == 67108864, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xffffffbf04000000;  immval:0x1c
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xffffffbf04000000, 0x1c, x30, x2, 624, x5)

inst_62:
// rs1_w0_val == 16777216, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x00000901000000;  immval:0xe
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x00000901000000, 0xe, x30, x2, 640, x5)

inst_63:
// rs1_w0_val == 4194304, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xfffffff600400000;  immval:0x17
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xfffffff600400000, 0x17, x30, x2, 656, x5)

inst_64:
// rs1_w0_val == 1048576, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xffefffff00100000;  immval:0x8
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xffefffff00100000, 0x8, x30, x2, 672, x5)

inst_65:
// rs1_w0_val == 262144, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x00000600040000;  immval:0x15
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x00000600040000, 0x15, x30, x2, 688, x5)

inst_66:
// rs1_w0_val == 65536, rs1_w1_val == 1
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x00000100010000;  immval:0x18
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x00000100010000, 0x18, x30, x2, 704, x5)

inst_67:
// rs1_w0_val == 4096, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xffbfffff00001000;  immval:0x5
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xffbfffff00001000, 0x5, x30, x2, 720, x5)

inst_68:
// rs1_w0_val == 512, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x00000300000200;  immval:0xb
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x00000300000200, 0xb, x30, x2, 736, x5)

inst_69:
// rs1_w0_val == 128, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x00000100000080;  immval:0x3
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x00000100000080, 0x3, x30, x2, 752, x5)

inst_70:
// rs1_w0_val == 64, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xfffffffe00000040;  immval:0x1e
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xfffffffe00000040, 0x1e, x30, x2, 768, x5)

inst_71:
// rs1_w0_val == 32, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xfffff7ff00000020;  immval:0x3
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xfffff7ff00000020, 0x3, x30, x2, 784, x5)

inst_72:
// rs1_w0_val == 8, rs1_w1_val == 262144
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x04000000000008;  immval:0x10
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x04000000000008, 0x10, x30, x2, 800, x5)

inst_73:
// rs1_w0_val == 2, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x08000000000002;  immval:0x6
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x08000000000002, 0x6, x30, x2, 816, x5)

inst_74:
// rs1_w0_val == 1, rs1_w1_val == 4096
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x00100000000001;  immval:0x1b
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x00100000000001, 0x1b, x30, x2, 832, x5)

inst_75:
// rs1_w0_val == 0, rs1_w1_val == 131072
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x02000000000000;  immval:0x6
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x02000000000000, 0x6, x30, x2, 848, x5)

inst_76:
// rs1_w1_val == -2147483648, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x80000000feffffff;  immval:0xb
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x80000000feffffff, 0xb, x30, x2, 864, x5)

inst_77:
// rs1_w1_val == 1073741824, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x4000000008000000;  immval:0x10
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x4000000008000000, 0x10, x30, x2, 880, x5)

inst_78:
// rs1_w1_val == 268435456, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x10000000fffffff8;  immval:0x4
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x10000000fffffff8, 0x4, x30, x2, 896, x5)

inst_79:
// rs1_w1_val == 134217728, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x800000000000800;  immval:0x10
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x800000000000800, 0x10, x30, x2, 912, x5)

inst_80:
// rs1_w1_val == 67108864, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x400000000000020;  immval:0x0
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x400000000000020, 0x0, x30, x2, 928, x5)

inst_81:
// rs1_w1_val == 16777216, rs1_w0_val == -524289
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x1000000fff7ffff;  immval:0xc
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x1000000fff7ffff, 0xc, x30, x2, 944, x5)

inst_82:
// rs1_w1_val == 8388608, rs1_w0_val == -8193
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x800000ffffdfff;  immval:0xb
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x800000ffffdfff, 0xb, x30, x2, 960, x5)

inst_83:
// rs1_w1_val == 4194304, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x400000ffdfffff;  immval:0xd
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x400000ffdfffff, 0xd, x30, x2, 976, x5)

inst_84:
// rs1_w1_val == 2097152, rs1_w0_val == -2049
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x200000fffff7ff;  immval:0x0
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x200000fffff7ff, 0x0, x30, x2, 992, x5)

inst_85:
// rs1_w1_val == 65536, rs1_w0_val == -4097
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x010000ffffefff;  immval:0x1e
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x010000ffffefff, 0x1e, x30, x2, 1008, x5)

inst_86:
// rs1_w1_val == 32768, rs1_w0_val == 1431655765
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x00800055555555;  immval:0xf
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x00800055555555, 0xf, x30, x2, 1024, x5)

inst_87:
// rs1_w1_val == 16384, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x00400000000080;  immval:0x11
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x00400000000080, 0x11, x30, x2, 1040, x5)

inst_88:
// rs1_w1_val == 512, rs1_w0_val == -1073741825
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x000200bfffffff;  immval:0xe
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x000200bfffffff, 0xe, x30, x2, 1056, x5)

inst_89:
// rs1_w1_val == 256, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x00010002000000;  immval:0x5
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x00010002000000, 0x5, x30, x2, 1072, x5)

inst_90:
// rs1_w1_val == 2, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x00000200008000;  immval:0x14
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x00000200008000, 0x14, x30, x2, 1088, x5)

inst_91:
// rs1_w1_val == 0, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x00000000000002;  immval:0x15
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x00000000000002, 0x15, x30, x2, 1104, x5)

inst_92:
// rs1_w0_val == -67108865, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x3ffffffffbffffff;  immval:0x12
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x3ffffffffbffffff, 0x12, x30, x2, 1120, x5)

inst_93:
// rs1_w0_val == -33554433, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xfefffffffdffffff;  immval:0x17
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xfefffffffdffffff, 0x17, x30, x2, 1136, x5)

inst_94:
// rs1_w0_val == -8388609, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xffffffbfff7fffff;  immval:0x1b
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xffffffbfff7fffff, 0x1b, x30, x2, 1152, x5)

inst_95:
// rs1_w0_val == -4194305, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x000400ffbfffff;  immval:0x1e
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x000400ffbfffff, 0x1e, x30, x2, 1168, x5)

inst_96:
// rs1_w0_val == -131073, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x000005fffdffff;  immval:0x1f
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x000005fffdffff, 0x1f, x30, x2, 1184, x5)

inst_97:
// rs1_w1_val == 32, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x000020f7ffffff;  immval:0x10
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x000020f7ffffff, 0x10, x30, x2, 1200, x5)

inst_98:
// rs1_w0_val == -65537, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x8000000fffeffff;  immval:0x8
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x8000000fffeffff, 0x8, x30, x2, 1216, x5)

inst_99:
// rs1_w0_val == -32769, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x10000000ffff7fff;  immval:0x11
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x10000000ffff7fff, 0x11, x30, x2, 1232, x5)

inst_100:
// rs1_w0_val == -16385, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xfffffffbffffbfff;  immval:0x18
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xfffffffbffffbfff, 0x18, x30, x2, 1248, x5)

inst_101:
// rs1_w1_val == 128, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x000080fffbffff;  immval:0x17
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x000080fffbffff, 0x17, x30, x2, 1264, x5)

inst_102:
// rs1_w0_val == -1025, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x4000000fffffbff;  immval:0x5
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x4000000fffffbff, 0x5, x30, x2, 1280, x5)

inst_103:
// rs1_w0_val == -513, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0x4000000fffffdff;  immval:0x5
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0x4000000fffffdff, 0x5, x30, x2, 1296, x5)

inst_104:
// rs1_w0_val == -129, 
// opcode: kslli32 ; op1:x30; dest:x31; op1val:0xaaaaaaaaffffff7f;  immval:0x13
TEST_PKIMM_OP( kslli32, x31, x30, 0x0000000000000000, 0xaaaaaaaaffffff7f, 0x13, x30, x2, 1312, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 44*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 166*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
