
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umaqa instruction of the RISC-V RV64PZicsr extension for the umaqa covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umaqa)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x12,signature_x12_1)

inst_0:
// rs1 == rd != rs2, rs1==x16, rs2==x23, rd==x16, rs1_b0_val == 0, rs1_b7_val != rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b7_val == 1, rs1_b6_val != rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b5_val != rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b4_val != rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b3_val == 251, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b1_val == 170, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b3_val == 64, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b6_val == 128, rs1_b2_val == 170, rs1_b1_val == 2, rs2_b4_val == 16, rs1_b5_val == 223, rs1_b4_val == 1
// opcode: umaqa ; op1:x16; op2:x23; dest:x16; op1val:0x1107df01fbaa0200;  op2val:0x1800d104012aa0e
TEST_RR_OP(umaqa, x16, x16, x23, 0x0000000000000000, 0x1107df01fbaa0200, 0x1800d104012aa0e, x12, 0, x9)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x29, rs2==x17, rd==x20, rs1_b7_val == rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b2_val == 8, rs1_b0_val == 128, rs2_b0_val == 16, rs2_b5_val == 0, rs1_b4_val == 85, rs2_b3_val == 8, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b3_val == 4, rs2_b6_val == 4, rs2_b2_val == 170, rs1_b1_val == 64, rs2_b4_val == 1
// opcode: umaqa ; op1:x29; op2:x17; dest:x20; op1val:0xd03055504084080;  op2val:0xd04000108aa1310
TEST_RR_OP(umaqa, x20, x29, x17, 0x0000000000000000, 0xd03055504084080, 0xd04000108aa1310, x12, 8, x9)

inst_2:
// rs1 == rs2 != rd, rs1==x2, rs2==x2, rd==x26, rs1_b6_val == rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b7_val == 255, rs1_b5_val == 4, rs2_b5_val == 1, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b3_val == 16, rs1_b0_val == 1, rs1_b7_val == 85, rs1_b1_val == 128, rs1_b4_val == 253, rs2_b6_val == 1, rs2_b4_val == 128, rs2_b2_val == 85, rs1_b6_val == 1, rs1_b2_val == 85
// opcode: umaqa ; op1:x2; op2:x2; dest:x26; op1val:0x550104fd03558001;  op2val:0xff01018010550a12
TEST_RR_OP(umaqa, x26, x2, x2, 0x0000000000000000, 0x550104fd03558001, 0xff01018010550a12, x12, 16, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs1_b5_val == rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b2_val == 16, rs1_b3_val == 254, rs2_b0_val == 0, rs2_b1_val == 255, rs1_b1_val == 0, rs1_b7_val == 32
// opcode: umaqa ; op1:x1; op2:x1; dest:x1; op1val:0x200f09fdfe090011;  op2val:0x70109030d10ff00
TEST_RR_OP(umaqa, x1, x1, x1, 0x0000000000000000, 0x200f09fdfe090011, 0x70109030d10ff00, x12, 24, x9)

inst_4:
// rs2 == rd != rs1, rs1==x18, rs2==x0, rd==x0, rs1_b4_val == rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b5_val == 253, rs2_b2_val == 4, rs2_b6_val == 170, rs2_b1_val == 127, rs2_b3_val == 4, rs1_b1_val == 32, rs2_b7_val == 251, rs1_b5_val == 127
// opcode: umaqa ; op1:x18; op2:x0; dest:x0; op1val:0x50d7f09fb052012;  op2val:0xfbaafd0904047f10
TEST_RR_OP(umaqa, x0, x18, x0, 0x0000000000000000, 0x50d7f09fb052012, 0xfbaafd0904047f10, x12, 32, x9)

inst_5:
// rs1==x20, rs2==x24, rd==x25, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b7_val == 4, rs1_b0_val == 251, rs1_b1_val == 191, rs2_b1_val == 223, rs1_b6_val == 255, rs1_b4_val == 4, rs1_b7_val == 8
// opcode: umaqa ; op1:x20; op2:x24; dest:x25; op1val:0x8ff0e04050fbffb;  op2val:0x4aa07010503df0f
TEST_RR_OP(umaqa, x25, x20, x24, 0x0000000000000000, 0x8ff0e04050fbffb, 0x4aa07010503df0f, x12, 40, x9)

inst_6:
// rs1==x30, rs2==x4, rd==x11, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b7_val == 4, rs1_b1_val == 4, rs1_b3_val == 191, rs1_b0_val == 16, rs1_b4_val == 170, rs2_b6_val == 8, rs1_b2_val == 251, rs2_b1_val == 4, rs1_b5_val == 191
// opcode: umaqa ; op1:x30; op2:x4; dest:x11; op1val:0x4ffbfaabffb0410;  op2val:0xc0813060505040c
TEST_RR_OP(umaqa, x11, x30, x4, 0x0000000000000000, 0x4ffbfaabffb0410, 0xc0813060505040c, x12, 48, x9)

inst_7:
// rs1==x6, rs2==x20, rd==x31, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b0_val == 239, rs2_b2_val == 8, rs1_b0_val == 239, rs1_b2_val == 255, rs1_b6_val == 191, rs1_b4_val == 223, rs1_b7_val == 254, rs2_b1_val == 0
// opcode: umaqa ; op1:x6; op2:x20; dest:x31; op1val:0xfebf09df0eff12ef;  op2val:0x311090d060800ef
TEST_RR_OP(umaqa, x31, x6, x20, 0x0000000000000000, 0xfebf09df0eff12ef, 0x311090d060800ef, x12, 56, x9)

inst_8:
// rs1==x7, rs2==x15, rd==x27, rs2_b7_val == 170, rs1_b6_val == 127, rs1_b0_val == 64, rs1_b1_val == 170, rs2_b3_val == 32, rs1_b4_val == 251, rs1_b2_val == 247
// opcode: umaqa ; op1:x7; op2:x15; dest:x27; op1val:0x37f0ffb12f7aa40;  op2val:0xaa0309072010aa0e
TEST_RR_OP(umaqa, x27, x7, x15, 0x0000000000000000, 0x37f0ffb12f7aa40, 0xaa0309072010aa0e, x12, 64, x9)

inst_9:
// rs1==x4, rs2==x3, rd==x14, rs2_b7_val == 85, rs2_b2_val == 32, rs1_b3_val == 170, rs2_b5_val == 128, rs1_b2_val == 2, rs1_b7_val == 170, rs2_b4_val == 254, rs1_b5_val == 247
// opcode: umaqa ; op1:x4; op2:x3; dest:x14; op1val:0xaa12f70daa02120d;  op2val:0x550380fe0720030a
TEST_RR_OP(umaqa, x14, x4, x3, 0x0000000000000000, 0xaa12f70daa02120d, 0x550380fe0720030a, x12, 72, x9)

inst_10:
// rs1==x5, rs2==x26, rd==x7, rs2_b7_val == 127, rs1_b0_val == 223, rs2_b1_val == 191, rs1_b6_val == 64, rs1_b7_val == 191, rs2_b5_val == 239
// opcode: umaqa ; op1:x5; op2:x26; dest:x7; op1val:0xbf400b12060c0cdf;  op2val:0x7f0eeffe0e0abf05
TEST_RR_OP(umaqa, x7, x5, x26, 0x0000000000000000, 0xbf400b12060c0cdf, 0x7f0eeffe0e0abf05, x12, 80, x9)

inst_11:
// rs1==x15, rs2==x10, rd==x18, rs2_b7_val == 191, rs1_b5_val == 251, rs2_b5_val == 2, rs1_b0_val == 8, rs1_b4_val == 254, rs2_b4_val == 32, rs2_b2_val == 247
// opcode: umaqa ; op1:x15; op2:x10; dest:x18; op1val:0x9bffbfe0d0bbf08;  op2val:0xbf01022020f7aa0e
TEST_RR_OP(umaqa, x18, x15, x10, 0x0000000000000000, 0x9bffbfe0d0bbf08, 0xbf01022020f7aa0e, x12, 88, x9)

inst_12:
// rs1==x26, rs2==x13, rd==x8, rs2_b7_val == 223, rs1_b2_val == 16, rs2_b0_val == 1, rs2_b4_val == 127, rs1_b1_val == 253, rs2_b6_val == 2, rs1_b6_val == 0, rs2_b5_val == 170, rs2_b2_val == 128
// opcode: umaqa ; op1:x26; op2:x13; dest:x8; op1val:0xd000f050e10fd0b;  op2val:0xdf02aa7f0580ff01
TEST_RR_OP(umaqa, x8, x26, x13, 0x0000000000000000, 0xd000f050e10fd0b, 0xdf02aa7f0580ff01, x12, 96, x9)

inst_13:
// rs1==x11, rs2==x29, rd==x6, rs2_b7_val == 239, rs2_b6_val == 127, rs2_b4_val == 191, rs1_b3_val == 1, rs1_b1_val == 254, rs2_b3_val == 0, rs1_b2_val == 239, rs1_b7_val == 128, rs1_b0_val == 127
// opcode: umaqa ; op1:x11; op2:x29; dest:x6; op1val:0x80ffbf0d01effe7f;  op2val:0xef7f03bf00070e0c
TEST_RR_OP(umaqa, x6, x11, x29, 0x0000000000000000, 0x80ffbf0d01effe7f, 0xef7f03bf00070e0c, x12, 104, x9)

inst_14:
// rs1==x13, rs2==x11, rd==x24, rs2_b7_val == 247, rs1_b4_val == 64, rs1_b5_val == 128, rs2_b3_val == 191, rs1_b6_val == 85, rs2_b5_val == 8, rs2_b6_val == 223, rs2_b0_val == 8, rs1_b0_val == 4, rs1_b7_val == 251
// opcode: umaqa ; op1:x13; op2:x11; dest:x24; op1val:0xfb55804007061104;  op2val:0xf7df087fbf0e0408
TEST_RR_OP(umaqa, x24, x13, x11, 0x0000000000000000, 0xfb55804007061104, 0xf7df087fbf0e0408, x12, 112, x9)

inst_15:
// rs1==x27, rs2==x14, rd==x29, rs2_b7_val == 253, rs2_b5_val == 254, rs2_b2_val == 255, rs1_b5_val == 2, rs1_b6_val == 247, rs2_b4_val == 251
// opcode: umaqa ; op1:x27; op2:x14; dest:x29; op1val:0x13f702fd0faa060a;  op2val:0xfd07fefb00ff0f01
TEST_RR_OP(umaqa, x29, x27, x14, 0x0000000000000000, 0x13f702fd0faa060a, 0xfd07fefb00ff0f01, x12, 120, x9)

inst_16:
// rs1==x14, rs2==x21, rd==x5, rs2_b7_val == 254, rs2_b5_val == 251, rs1_b5_val == 85, rs1_b1_val == 247, rs1_b6_val == 4, rs1_b7_val == 247, rs2_b1_val == 2, rs2_b2_val == 239, rs1_b0_val == 170
// opcode: umaqa ; op1:x14; op2:x21; dest:x5; op1val:0xf704550f090bf7aa;  op2val:0xfe13fb1120ef0211
TEST_RR_OP(umaqa, x5, x14, x21, 0x0000000000000000, 0xf704550f090bf7aa, 0xfe13fb1120ef0211, x12, 128, x9)

inst_17:
// rs1==x24, rs2==x30, rd==x9, rs2_b7_val == 128, rs1_b6_val == 239, rs2_b6_val == 239, rs2_b0_val == 255, rs1_b1_val == 251, rs2_b2_val == 254
// opcode: umaqa ; op1:x24; op2:x30; dest:x9; op1val:0x12ef130d07fbfb03;  op2val:0x80effe2010fe0cff
TEST_RR_OP(umaqa, x9, x24, x30, 0x0000000000000000, 0x12ef130d07fbfb03, 0x80effe2010fe0cff, x12, 136, x11)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_18:
// rs1==x19, rs2==x28, rd==x13, rs2_b7_val == 64, rs1_b5_val == 1, rs1_b3_val == 85
// opcode: umaqa ; op1:x19; op2:x28; dest:x13; op1val:0xf0f0111550abfef;  op2val:0x400c0706bf110eff
TEST_RR_OP(umaqa, x13, x19, x28, 0x0000000000000000, 0xf0f0111550abfef, 0x400c0706bf110eff, x1, 0, x11)

inst_19:
// rs1==x0, rs2==x31, rd==x2, rs2_b7_val == 32, rs1_b4_val == 0, rs2_b3_val == 253, rs1_b6_val == 16, rs1_b2_val == 223, rs2_b4_val == 255
// opcode: umaqa ; op1:x0; op2:x31; dest:x2; op1val:0x5100f0013df0a03;  op2val:0x200403fffd03dfef
TEST_RR_OP(umaqa, x2, x0, x31, 0x0000000000000000, 0x5100f0013df0a03, 0x200403fffd03dfef, x1, 8, x11)

inst_20:
// rs1==x28, rs2==x19, rd==x10, rs2_b7_val == 16, rs1_b2_val == 32, rs1_b0_val == 253, rs1_b6_val == 223, rs1_b3_val == 0, rs1_b5_val == 170, rs1_b1_val == 255, rs2_b2_val == 253, rs1_b7_val == 16
// opcode: umaqa ; op1:x28; op2:x19; dest:x10; op1val:0x10dfaa0c0020fffd;  op2val:0x10050f0a0cfd040c
TEST_RR_OP(umaqa, x10, x28, x19, 0x0000000000000000, 0x10dfaa0c0020fffd, 0x10050f0a0cfd040c, x1, 16, x11)

inst_21:
// rs1==x8, rs2==x18, rd==x30, rs2_b7_val == 8, rs1_b2_val == 64, rs2_b0_val == 254, rs1_b5_val == 8, rs2_b6_val == 251, rs1_b1_val == 223, rs1_b3_val == 8, rs2_b3_val == 1, rs2_b4_val == 64
// opcode: umaqa ; op1:x8; op2:x18; dest:x30; op1val:0x70a08df0840df11;  op2val:0x8fbef40010502fe
TEST_RR_OP(umaqa, x30, x8, x18, 0x0000000000000000, 0x70a08df0840df11, 0x8fbef40010502fe, x1, 24, x11)

inst_22:
// rs1==x31, rs2==x27, rd==x15, rs2_b7_val == 2, rs2_b0_val == 247, rs1_b2_val == 0, rs1_b1_val == 85, rs1_b5_val == 0, rs2_b5_val == 85
// opcode: umaqa ; op1:x31; op2:x27; dest:x15; op1val:0x20000009070055df;  op2val:0x2ef551309100ef7
TEST_RR_OP(umaqa, x15, x31, x27, 0x0000000000000000, 0x20000009070055df, 0x2ef551309100ef7, x1, 32, x11)

inst_23:
// rs1==x25, rs2==x9, rd==x22, rs2_b7_val == 0, rs1_b4_val == 191, rs2_b4_val == 2, rs1_b0_val == 85
// opcode: umaqa ; op1:x25; op2:x9; dest:x22; op1val:0x550700bf0b0f4055;  op2val:0x06fe02bf0b1107
TEST_RR_OP(umaqa, x22, x25, x9, 0x0000000000000000, 0x550700bf0b0f4055, 0x06fe02bf0b1107, x1, 40, x11)

inst_24:
// rs1==x21, rs2==x5, rd==x12, rs2_b6_val == 85, rs1_b5_val == 254, rs1_b3_val == 127, rs2_b2_val == 127, rs2_b4_val == 4, rs2_b5_val == 223
// opcode: umaqa ; op1:x21; op2:x5; dest:x12; op1val:0x13dffe077f131206;  op2val:0x7f55df04207f0b05
TEST_RR_OP(umaqa, x12, x21, x5, 0x0000000000000000, 0x13dffe077f131206, 0x7f55df04207f0b05, x1, 48, x11)

inst_25:
// rs1==x17, rs2==x25, rd==x28, rs2_b6_val == 191, rs2_b5_val == 4, rs1_b4_val == 32, rs1_b3_val == 255, rs2_b1_val == 64
// opcode: umaqa ; op1:x17; op2:x25; dest:x28; op1val:0xfe7f0420ffaa0405;  op2val:0x13bf0407200e4008
TEST_RR_OP(umaqa, x28, x17, x25, 0x0000000000000000, 0xfe7f0420ffaa0405, 0x13bf0407200e4008, x1, 56, x11)

inst_26:
// rs1==x9, rs2==x7, rd==x3, rs1_b3_val == 223, rs2_b0_val == 251, rs1_b6_val == 170, rs1_b5_val == 16, rs1_b0_val == 32, rs1_b1_val == 239, rs1_b7_val == 127, rs1_b2_val == 128
// opcode: umaqa ; op1:x9; op2:x7; dest:x3; op1val:0x7faa1009df80ef20;  op2val:0x4fb5510fd0a11fb
TEST_RR_OP(umaqa, x3, x9, x7, 0x0000000000000000, 0x7faa1009df80ef20, 0x4fb5510fd0a11fb, x1, 64, x11)

inst_27:
// rs1==x23, rs2==x12, rd==x4, rs1_b3_val == 239, rs1_b2_val == 191, rs2_b0_val == 223, rs2_b1_val == 1, rs2_b2_val == 2
// opcode: umaqa ; op1:x23; op2:x12; dest:x4; op1val:0x120c0f05efbf1355;  op2val:0x200b0c0b000201df
TEST_RR_OP(umaqa, x4, x23, x12, 0x0000000000000000, 0x120c0f05efbf1355, 0x200b0c0b000201df, x1, 72, x11)

inst_28:
// rs1==x12, rs2==x8, rd==x17, rs1_b3_val == 247, rs2_b0_val == 128, rs1_b1_val == 127, rs2_b1_val == 32, rs1_b7_val == 239, rs2_b5_val == 247
// opcode: umaqa ; op1:x12; op2:x8; dest:x17; op1val:0xef7ff7fef70f7f12;  op2val:0xff13f70c07092080
TEST_RR_OP(umaqa, x17, x12, x8, 0x0000000000000000, 0xef7ff7fef70f7f12, 0xff13f70c07092080, x1, 80, x11)

inst_29:
// rs1==x10, rs2==x22, rd==x21, rs1_b3_val == 253, rs1_b0_val == 191, rs1_b5_val == 253, rs2_b5_val == 32, rs2_b4_val == 85, rs1_b6_val == 2, rs2_b6_val == 255
// opcode: umaqa ; op1:x10; op2:x22; dest:x21; op1val:0xa02fdfdfd0d0dbf;  op2val:0xfdff2055097f0012
TEST_RR_OP(umaqa, x21, x10, x22, 0x0000000000000000, 0xa02fdfdfd0d0dbf, 0xfdff2055097f0012, x1, 88, x11)

inst_30:
// rs1==x22, rs2==x16, rd==x19, rs1_b3_val == 128, rs2_b0_val == 32, rs2_b3_val == 85, rs2_b6_val == 253
// opcode: umaqa ; op1:x22; op2:x16; dest:x19; op1val:0xc40080580f70f06;  op2val:0x4fdef4055ef0420
TEST_RR_OP(umaqa, x19, x22, x16, 0x0000000000000000, 0xc40080580f70f06, 0x4fdef4055ef0420, x1, 96, x11)

inst_31:
// rs1==x3, rs2==x6, rd==x23, rs1_b3_val == 64, rs2_b6_val == 64, rs1_b4_val == 16
// opcode: umaqa ; op1:x3; op2:x6; dest:x23; op1val:0xaa03021040100320;  op2val:0x2400602070a1220
TEST_RR_OP(umaqa, x23, x3, x6, 0x0000000000000000, 0xaa03021040100320, 0x2400602070a1220, x1, 104, x11)

inst_32:
// rs1_b3_val == 32, rs2_b1_val == 251, rs1_b7_val == 253, rs1_b0_val == 247
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfddf7f13200b11f7;  op2val:0x80d0b050b7ffb07
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xfddf7f13200b11f7, 0x80d0b050b7ffb07, x1, 112, x11)

inst_33:
// rs1_b3_val == 16, rs1_b7_val == 223, rs2_b1_val == 8
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xdf00084010051208;  op2val:0xa40ef0f0baa0809
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xdf00084010051208, 0xa40ef0f0baa0809, x1, 120, x2)

inst_34:
// rs1_b3_val == 2, rs2_b5_val == 64, rs1_b2_val == 127
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x11ff07fb027fef40;  op2val:0xaa124003040ddf0d
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x11ff07fb027fef40, 0xaa124003040ddf0d, x1, 128, x2)

inst_35:
// rs1_b2_val == 253, rs2_b2_val == 64, rs2_b6_val == 32, rs2_b3_val == 127, rs2_b0_val == 170
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xdfbffb0102fd1120;  op2val:0xaa200d137f4040aa
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xdfbffb0102fd1120, 0xaa200d137f4040aa, x1, 136, x2)

inst_36:
// rs1_b2_val == 254, rs2_b0_val == 191, rs1_b5_val == 239
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x90bef00aafe11f7;  op2val:0xc7f0210017fbfbf
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x90bef00aafe11f7, 0xc7f0210017fbfbf, x1, 144, x2)

inst_37:
// rs1_b2_val == 4, rs2_b2_val == 191, rs2_b4_val == 239
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xe0bfb40130406fb;  op2val:0xe0f05effdbf07aa
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xe0bfb40130406fb, 0xe0f05effdbf07aa, x1, 152, x2)

inst_38:
// rs1_b2_val == 1, rs2_b6_val == 247, rs1_b4_val == 127
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xc400c7f0d018040;  op2val:0x13f7fd0503120aef
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xc400c7f0d018040, 0x13f7fd0503120aef, x1, 160, x2)

inst_39:
// rs2_b6_val == 254, rs1_b7_val == 2
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x2010faa10fe090f;  op2val:0xfffe030503107f0b
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x2010faa10fe090f, 0xfffe030503107f0b, x1, 168, x2)

inst_40:
// rs2_b6_val == 16, rs2_b4_val == 0, rs2_b1_val == 128, rs1_b6_val == 253
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xbfdfd0d00bf4009;  op2val:0x10020055108001
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xbfdfd0d00bf4009, 0x10020055108001, x1, 176, x2)

inst_41:
// rs2_b2_val == 1, rs2_b3_val == 128, rs2_b0_val == 127
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfd06fe0eaa40f710;  op2val:0x104efbf8001aa7f
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xfd06fe0eaa40f710, 0x104efbf8001aa7f, x1, 184, x2)

inst_42:
// rs2_b2_val == 0, rs2_b3_val == 251, rs2_b4_val == 247
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xf7040301130efe04;  op2val:0x7f050af7fb000dff
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xf7040301130efe04, 0x7f050af7fb000dff, x1, 192, x2)

inst_43:
// rs2_b1_val == 85, rs1_b1_val == 1, rs2_b4_val == 8
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xdbf07fefe090111;  op2val:0x60bfb0855095511
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xdbf07fefe090111, 0x60bfb0855095511, x1, 200, x2)

inst_44:
// rs2_b1_val == 239, rs1_b1_val == 16, rs1_b6_val == 254, rs2_b0_val == 85
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x7ffeaafefeaa100a;  op2val:0x4ef03fb0005ef55
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x7ffeaafefeaa100a, 0x4ef03fb0005ef55, x1, 208, x2)

inst_45:
// rs2_b1_val == 247, rs2_b5_val == 255, rs1_b4_val == 255
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x709aaff06bf8001;  op2val:0xd80ff121155f7df
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x709aaff06bf8001, 0xd80ff121155f7df, x1, 216, x2)

inst_46:
// rs2_b1_val == 253, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x60680110f08bf05;  op2val:0xfb06f70a2003fd55
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x60680110f08bf05, 0xfb06f70a2003fd55, x1, 224, x2)

inst_47:
// rs2_b1_val == 254, rs1_b7_val == 1, rs2_b3_val == 239
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x1130a0f0a070280;  op2val:0xd030e12ef08fe01
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x1130a0f0a070280, 0xd030e12ef08fe01, x1, 232, x2)

inst_48:
// rs2_b1_val == 16, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x80130c070d021220;  op2val:0x200c0411fbef1080
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x80130c070d021220, 0x200c0411fbef1080, x1, 240, x2)

inst_49:
// rs2_b0_val == 253, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xb090d0480aa030e;  op2val:0xaef800b0a7ffdfd
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xb090d0480aa030e, 0xaef800b0a7ffdfd, x1, 248, x2)

inst_50:
// rs2_b0_val == 64, rs1_b5_val == 32
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x120f20078007010f;  op2val:0x120803ff800a0640
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x120f20078007010f, 0x120803ff800a0640, x1, 256, x2)

inst_51:
// rs2_b0_val == 4, rs1_b4_val == 2
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfbfdfe02ffbf0640;  op2val:0x7f0cef0500040304
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xfbfdfe02ffbf0640, 0x7f0cef0500040304, x1, 264, x2)

inst_52:
// rs2_b0_val == 2, rs2_b4_val == 223, rs1_b7_val == 0
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x0b2055fb0edf0e;  op2val:0x800100df06effb02
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x0b2055fb0edf0e, 0x800100df06effb02, x1, 272, x2)

inst_53:
// rs1_b1_val == 8, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xadffb0904fb0813;  op2val:0x55df071307fddf10
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xadffb0904fb0813, 0x55df071307fddf10, x1, 280, x2)

inst_54:
// rs1_b7_val == 255, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xffbfef00aa0b8004;  op2val:0xfd40557f0d200802
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xffbfef00aa0b8004, 0xfd40557f0d200802, x1, 288, x2)

inst_55:
// rs2_b5_val == 16, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x802800213fb0d01;  op2val:0x64010807f080e00
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x802800213fb0d01, 0x64010807f080e00, x1, 296, x2)

inst_56:
// rs1_b0_val == 254, rs1_b7_val == 64
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x4055090cfe0e0dfe;  op2val:0x611ff017f804002
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x4055090cfe0e0dfe, 0x611ff017f804002, x1, 304, x2)

inst_57:
// rs1_b6_val == 251, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x7fbfb101200fb11;  op2val:0x87f0a000dfebff7
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x7fbfb101200fb11, 0x87f0a000dfebff7, x1, 312, x2)

inst_58:
// rs2_b4_val == 170, rs1_b5_val == 255, rs2_b3_val == 247
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xb0fff7ffe01070e;  op2val:0x20fb04aaf755080b
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xb0fff7ffe01070e, 0x20fb04aaf755080b, x1, 320, x2)

inst_59:
// rs1_b0_val == 2, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x6000904fd134002;  op2val:0xfdfd40015507ff10
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x6000904fd134002, 0xfdfd40015507ff10, x1, 328, x2)

inst_60:
// rs1_b0_val == 255, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xa0405ff0555efff;  op2val:0xfdfe07f70d090ffd
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xa0405ff0555efff, 0xfdfe07f70d090ffd, x1, 336, x2)

inst_61:
// rs1_b6_val == 128, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x10801310060bfd0b;  op2val:0xffe0e0880094055
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x10801310060bfd0b, 0xffe0e0880094055, x1, 344, x2)

inst_62:
// rs1_b6_val == 32, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xf720fd0b0d800605;  op2val:0x80df0a0d107f0ffe
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xf720fd0b0d800605, 0x80df0a0d107f0ffe, x1, 352, x2)

inst_63:
// rs1_b6_val == 8, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xdf0880fb55aaffef;  op2val:0x7070f0d0f800b55
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xdf0880fb55aaffef, 0x7070f0d0f800b55, x1, 360, x2)

inst_64:
// rs2_b4_val == 253, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x12200f1101ffdf0c;  op2val:0xfdef0cfd010b0800
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x12200f1101ffdf0c, 0xfdef0cfd010b0800, x1, 368, x2)

inst_65:
// rs2_b3_val == 170, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xbfaa0efb400aaaaa;  op2val:0xffd0005aa0913ef
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xbfaa0efb400aaaaa, 0xffd0005aa0913ef, x1, 376, x2)

inst_66:
// rs1_b5_val == 64, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x9df40100bfdf70e;  op2val:0x200d0cf7800700aa
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x9df40100bfdf70e, 0x200d0cf7800700aa, x1, 384, x2)

inst_67:
// rs2_b3_val == 223, rs1_b4_val == 128
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xbf06f780fe55bff7;  op2val:0xfd7fef11df200ddf
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xbf06f780fe55bff7, 0xfd7fef11df200ddf, x1, 392, x2)

inst_68:
// rs2_b3_val == 254, rs2_b2_val == 251
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x87f070ffe007f03;  op2val:0x5120f0ffefbffdf
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x87f070ffe007f03, 0x5120f0ffefbffdf, x1, 400, x2)

inst_69:
// rs2_b5_val == 127, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xf0c070a0c2012aa;  op2val:0xb557f7f201205df
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xf0c070a0c2012aa, 0xb557f7f201205df, x1, 408, x2)

inst_70:
// rs2_b3_val == 2, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xdf07010304aa0906;  op2val:0x480550e02020705
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xdf07010304aa0906, 0x480550e02020705, x1, 416, x2)

inst_71:
// rs1_b4_val == 239, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xfe02bfefbfff0180;  op2val:0xfd7f0a800507fe0e
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xfe02bfefbfff0180, 0xfd7f0a800507fe0e, x1, 424, x2)

inst_72:
// rs2_b3_val == 255, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xb020abf0d80060d;  op2val:0x603aa0cff8008aa
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xb020abf0d80060d, 0x603aa0cff8008aa, x1, 432, x2)

inst_73:
// rs1_b4_val == 247, rs2_b6_val == 0, rs2_b2_val == 223
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xef0910f72080fe7f;  op2val:0x007f05dfdf0603
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xef0910f72080fe7f, 0x007f05dfdf0603, x1, 440, x2)

inst_74:
// rs1_b4_val == 8, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0xe800d08010608fe;  op2val:0xfd1020120d0c0511
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0xe800d08010608fe, 0xfd1020120d0c0511, x1, 448, x2)

inst_75:
// rs2_b5_val == 191, 
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x10111fb0f091020;  op2val:0x50bbf0f0012ff06
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x10111fb0f091020, 0x50bbf0f0012ff06, x1, 456, x2)

inst_76:
// rs1_b6_val == rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b7_val == 255, rs1_b5_val == 4, rs2_b5_val == 1, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b3_val == 16, rs1_b0_val == 1, rs1_b7_val == 85, rs1_b1_val == 128, rs1_b4_val == 253, rs2_b6_val == 1, rs2_b4_val == 128, rs2_b2_val == 85, rs1_b6_val == 1, rs1_b2_val == 85
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x550104fd03558001;  op2val:0xff01018010550a12
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x550104fd03558001, 0xff01018010550a12, x1, 464, x2)

inst_77:
// rs1_b5_val == rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b2_val == 16, rs1_b3_val == 254, rs2_b0_val == 0, rs2_b1_val == 255, rs1_b1_val == 0, rs1_b7_val == 32
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x200f09fdfe090011;  op2val:0x70109030d10ff00
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x200f09fdfe090011, 0x70109030d10ff00, x1, 472, x2)

inst_78:
// rs1_b4_val == rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b5_val == 253, rs2_b2_val == 4, rs2_b6_val == 170, rs2_b1_val == 127, rs2_b3_val == 4, rs1_b1_val == 32, rs2_b7_val == 251, rs1_b5_val == 127
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x50d7f09fb052012;  op2val:0xfbaafd0904047f10
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x50d7f09fb052012, 0xfbaafd0904047f10, x1, 480, x2)

inst_79:
// rs2_b7_val == 32, rs1_b4_val == 0, rs2_b3_val == 253, rs1_b6_val == 16, rs1_b2_val == 223, rs2_b4_val == 255
// opcode: umaqa ; op1:x30; op2:x29; dest:x31; op1val:0x5100f0013df0a03;  op2val:0x200403fffd03dfef
TEST_RR_OP(umaqa, x31, x30, x29, 0x0000000000000000, 0x5100f0013df0a03, 0x200403fffd03dfef, x1, 488, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 62*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
