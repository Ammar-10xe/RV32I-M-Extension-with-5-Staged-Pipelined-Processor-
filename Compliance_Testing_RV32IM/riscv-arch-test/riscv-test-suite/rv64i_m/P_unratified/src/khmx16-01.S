
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the khmx16 instruction of the RISC-V RV64PZicsr extension for the khmx16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",khmx16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x28, rs2==x12, rd==x28, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs1_h2_val == 64, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs2_h2_val == 2048, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 8192, rs1_h1_val == -17
// opcode: khmx16 ; op1:x28; op2:x12; dest:x28; op1val:0x090040ffef8000;  op2val:0xfff60800c0002000
TEST_PKRR_OP(khmx16, x28, x28, x12, 0x0000000000000000, 0x090040ffef8000, 0xfff60800c0002000, x28, x2, 0, x16)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x13, rd==x23, rs1_h3_val == rs2_h3_val, rs2_h1_val == 2, rs1_h0_val == -33, rs2_h2_val == -1025, rs1_h1_val == 8192, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 32767, rs1_h2_val == 0, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -32768, rs2_h3_val == 32767
// opcode: khmx16 ; op1:x31; op2:x13; dest:x23; op1val:0x7fff00002000ffdf;  op2val:0x7ffffbff00028000
TEST_PKRR_OP(khmx16, x23, x31, x13, 0x0000000000000000, 0x7fff00002000ffdf, 0x7ffffbff00028000, x31, x2, 16, x16)

inst_2:
// rs1 == rs2 != rd, rs1==x29, rs2==x29, rd==x21, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == -129, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == -2049, rs2_h3_val == 8, rs1_h3_val == -9, rs1_h2_val == -17, rs2_h1_val == 32
// opcode: khmx16 ; op1:x29; op2:x29; dest:x21; op1val:0xfff7ffef0009fff9;  op2val:0x08ff7f0020f7ff
TEST_PKRR_OP(khmx16, x21, x29, x29, 0x0000000000000000, 0xfff7ffef0009fff9, 0x08ff7f0020f7ff, x29, x2, 32, x16)

inst_3:
// rs1 == rs2 == rd, rs1==x11, rs2==x11, rd==x11, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h1_val == 4, rs2_h3_val == -513, rs1_h2_val == 512, rs1_h0_val == 4096, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -1, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h3_val == -3, rs2_h0_val == 2048
// opcode: khmx16 ; op1:x11; op2:x11; dest:x11; op1val:0xfffd0200ffff1000;  op2val:0xfdff000500040800
TEST_PKRR_OP(khmx16, x11, x11, x11, 0x0000000000000000, 0xfffd0200ffff1000, 0xfdff000500040800, x11, x2, 48, x16)

inst_4:
// rs2 == rd != rs1, rs1==x18, rs2==x5, rd==x5, rs1_h2_val == rs2_h2_val, rs2_h2_val == -1, rs1_h0_val == -2, rs1_h1_val == 2048, rs2_h1_val == -1025, rs1_h3_val == 0, rs2_h0_val == -1025, rs1_h2_val == -1, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h3_val == 2
// opcode: khmx16 ; op1:x18; op2:x5; dest:x5; op1val:0x00ffff0800fffe;  op2val:0x02fffffbfffbff
TEST_PKRR_OP(khmx16, x5, x18, x5, 0x0000000000000000, 0x00ffff0800fffe, 0x02fffffbfffbff, x18, x2, 64, x16)

inst_5:
// rs1==x9, rs2==x8, rd==x19, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h0_val == 32, rs1_h2_val == -4097, rs2_h2_val == 8, rs1_h3_val == 16384
// opcode: khmx16 ; op1:x9; op2:x8; dest:x19; op1val:0x4000effffffa0020;  op2val:0x06000800200003
TEST_PKRR_OP(khmx16, x19, x9, x8, 0x0000000000000000, 0x4000effffffa0020, 0x06000800200003, x9, x2, 80, x16)

inst_6:
// rs1==x27, rs2==x3, rd==x17, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h0_val == -4097, rs1_h1_val == 1, rs2_h3_val == -65, rs2_h1_val == 16
// opcode: khmx16 ; op1:x27; op2:x3; dest:x17; op1val:0x400002000001fffc;  op2val:0xffbfffff0010efff
TEST_PKRR_OP(khmx16, x17, x27, x3, 0x0000000000000000, 0x400002000001fffc, 0xffbfffff0010efff, x27, x2, 96, x16)

inst_7:
// rs1==x22, rs2==x6, rd==x27, rs1_h1_val == rs2_h1_val, rs1_h1_val == 16384, rs2_h3_val == 2048, rs2_h1_val == 16384, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h2_val == 16
// opcode: khmx16 ; op1:x22; op2:x6; dest:x27; op1val:0xfff83fff40003fff;  op2val:0x80000104000fff6
TEST_PKRR_OP(khmx16, x27, x22, x6, 0x0000000000000000, 0xfff83fff40003fff, 0x80000104000fff6, x22, x2, 112, x16)

inst_8:
// rs1==x15, rs2==x24, rd==x12, rs1_h0_val == rs2_h0_val, rs1_h3_val == -5, rs1_h1_val == 2, rs2_h3_val == 21845, rs1_h2_val == -16385
// opcode: khmx16 ; op1:x15; op2:x24; dest:x12; op1val:0xfffbbfff0002c000;  op2val:0x5555fffffbffc000
TEST_PKRR_OP(khmx16, x12, x15, x24, 0x0000000000000000, 0xfffbbfff0002c000, 0x5555fffffbffc000, x15, x2, 128, x16)

inst_9:
// rs1==x20, rs2==x17, rd==x25, rs2_h3_val == -21846, rs1_h0_val == -9, rs2_h1_val == -8193, rs2_h0_val == 32767, rs1_h3_val == -4097, rs2_h2_val == 32767
// opcode: khmx16 ; op1:x20; op2:x17; dest:x25; op1val:0xefff02000002fff7;  op2val:0xaaaa7fffdfff7fff
TEST_PKRR_OP(khmx16, x25, x20, x17, 0x0000000000000000, 0xefff02000002fff7, 0xaaaa7fffdfff7fff, x20, x2, 144, x16)

inst_10:
// rs1==x14, rs2==x7, rd==x4, rs2_h3_val == -16385, rs2_h1_val == -257, rs2_h2_val == 4096, rs1_h3_val == -65, rs1_h2_val == -65, rs1_h0_val == -513
// opcode: khmx16 ; op1:x14; op2:x7; dest:x4; op1val:0xffbfffbf0005fdff;  op2val:0xbfff1000feff0005
TEST_PKRR_OP(khmx16, x4, x14, x7, 0x0000000000000000, 0xffbfffbf0005fdff, 0xbfff1000feff0005, x14, x2, 160, x16)

inst_11:
// rs1==x10, rs2==x0, rd==x1, rs2_h3_val == -8193, rs2_h2_val == 32, rs2_h0_val == -5, rs2_h1_val == 512, rs1_h0_val == 16384
// opcode: khmx16 ; op1:x10; op2:x0; dest:x1; op1val:0xfff60200fffa4000;  op2val:0xdfff00200200fffb
TEST_PKRR_OP(khmx16, x1, x10, x0, 0x0000000000000000, 0xfff60200fffa4000, 0xdfff00200200fffb, x10, x2, 176, x16)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_12:
// rs1==x25, rs2==x27, rd==x31, rs2_h3_val == -4097, rs2_h0_val == -8193, rs1_h3_val == 1, rs1_h1_val == -32768
// opcode: khmx16 ; op1:x25; op2:x27; dest:x31; op1val:0x01efff8000fff6;  op2val:0xefff3fff0010dfff
TEST_PKRR_OP(khmx16, x31, x25, x27, 0x0000000000000000, 0x01efff8000fff6, 0xefff3fff0010dfff, x25, x5, 0, x11)

inst_13:
// rs1==x21, rs2==x4, rd==x30, rs2_h3_val == -2049, rs2_h2_val == -65, rs1_h3_val == 128, rs2_h1_val == 1024, rs1_h2_val == 1
// opcode: khmx16 ; op1:x21; op2:x4; dest:x30; op1val:0x800001fff61000;  op2val:0xf7ffffbf0400fffa
TEST_PKRR_OP(khmx16, x30, x21, x4, 0x0000000000000000, 0x800001fff61000, 0xf7ffffbf0400fffa, x21, x5, 16, x11)

inst_14:
// rs1==x16, rs2==x2, rd==x10, rs2_h3_val == -1025, rs1_h0_val == 1024, rs1_h1_val == 16, rs2_h1_val == -2, rs2_h2_val == 64, rs2_h0_val == 4096
// opcode: khmx16 ; op1:x16; op2:x2; dest:x10; op1val:0xfff6ffef00100400;  op2val:0xfbff0040fffe1000
TEST_PKRR_OP(khmx16, x10, x16, x2, 0x0000000000000000, 0xfff6ffef00100400, 0xfbff0040fffe1000, x16, x5, 32, x11)

inst_15:
// rs1==x7, rs2==x21, rd==x14, rs2_h3_val == -257, rs1_h3_val == 1024, rs1_h0_val == 2048, rs1_h1_val == 4, rs2_h1_val == 256, rs2_h0_val == 256
// opcode: khmx16 ; op1:x7; op2:x21; dest:x14; op1val:0x400ffef00040800;  op2val:0xfeff7fff01000100
TEST_PKRR_OP(khmx16, x14, x7, x21, 0x0000000000000000, 0x400ffef00040800, 0xfeff7fff01000100, x7, x5, 48, x11)

inst_16:
// rs1==x24, rs2==x26, rd==x9, rs2_h3_val == -129, rs1_h3_val == -16385, rs2_h2_val == 1
// opcode: khmx16 ; op1:x24; op2:x26; dest:x9; op1val:0xbfff0001fff80007;  op2val:0xff7f000100040005
TEST_PKRR_OP(khmx16, x9, x24, x26, 0x0000000000000000, 0xbfff0001fff80007, 0xff7f000100040005, x24, x5, 64, x11)

inst_17:
// rs1==x2, rs2==x25, rd==x26, rs2_h3_val == -33, rs1_h3_val == -1025, rs2_h1_val == 1, rs1_h2_val == -9
// opcode: khmx16 ; op1:x2; op2:x25; dest:x26; op1val:0xfbfffff7fff8fff6;  op2val:0xffdf00060001f7ff
TEST_PKRR_OP(khmx16, x26, x2, x25, 0x0000000000000000, 0xfbfffff7fff8fff6, 0xffdf00060001f7ff, x2, x5, 80, x11)

inst_18:
// rs1==x1, rs2==x23, rd==x7, rs2_h3_val == -17, rs1_h0_val == -5, rs1_h1_val == 32, rs1_h2_val == 21845, rs2_h2_val == 128
// opcode: khmx16 ; op1:x1; op2:x23; dest:x7; op1val:0xfbff55550020fffb;  op2val:0xffef0080fff6fff6
TEST_PKRR_OP(khmx16, x7, x1, x23, 0x0000000000000000, 0xfbff55550020fffb, 0xffef0080fff6fff6, x1, x5, 96, x11)

inst_19:
// rs1==x8, rs2==x20, rd==x13, rs2_h3_val == -9, rs2_h2_val == -33, rs1_h2_val == 1024, rs2_h0_val == 0
// opcode: khmx16 ; op1:x8; op2:x20; dest:x13; op1val:0xfffd0400fffcfff9;  op2val:0xfff7ffdf02000000
TEST_PKRR_OP(khmx16, x13, x8, x20, 0x0000000000000000, 0xfffd0400fffcfff9, 0xfff7ffdf02000000, x8, x5, 112, x11)

inst_20:
// rs1==x6, rs2==x30, rd==x16, rs2_h3_val == -5, rs1_h2_val == -2049, rs2_h2_val == 512, rs2_h1_val == 4096
// opcode: khmx16 ; op1:x6; op2:x30; dest:x16; op1val:0xfffaf7ff0006fff9;  op2val:0xfffb020010000003
TEST_PKRR_OP(khmx16, x16, x6, x30, 0x0000000000000000, 0xfffaf7ff0006fff9, 0xfffb020010000003, x6, x5, 128, x11)

inst_21:
// rs1==x12, rs2==x28, rd==x6, rs2_h3_val == -3, rs1_h3_val == 4, rs1_h1_val == 21845, rs1_h2_val == -513
// opcode: khmx16 ; op1:x12; op2:x28; dest:x6; op1val:0x04fdff5555fffa;  op2val:0xfffd3fffdfff0006
TEST_PKRR_OP(khmx16, x6, x12, x28, 0x0000000000000000, 0x04fdff5555fffa, 0xfffd3fffdfff0006, x12, x5, 144, x11)

inst_22:
// rs1==x19, rs2==x31, rd==x20, rs2_h3_val == -2, rs2_h1_val == 21845, rs1_h2_val == 4, rs1_h0_val == -1025
// opcode: khmx16 ; op1:x19; op2:x31; dest:x20; op1val:0x0100042000fbff;  op2val:0xfffeff7f5555efff
TEST_PKRR_OP(khmx16, x20, x19, x31, 0x0000000000000000, 0x0100042000fbff, 0xfffeff7f5555efff, x19, x5, 160, x11)

inst_23:
// rs1==x13, rs2==x15, rd==x8, rs2_h3_val == -32768, rs1_h1_val == -257, rs2_h1_val == -65, rs2_h0_val == -3, rs2_h2_val == -2
// opcode: khmx16 ; op1:x13; op2:x15; dest:x8; op1val:0xc0000009feff1000;  op2val:0x8000fffeffbffffd
TEST_PKRR_OP(khmx16, x8, x13, x15, 0x0000000000000000, 0xc0000009feff1000, 0x8000fffeffbffffd, x13, x5, 176, x11)

inst_24:
// rs1==x23, rs2==x14, rd==x15, rs2_h3_val == 16384, rs1_h3_val == 64, rs2_h0_val == 1024, rs1_h2_val == -257
// opcode: khmx16 ; op1:x23; op2:x14; dest:x15; op1val:0x40feff00010005;  op2val:0x4000fffc02000400
TEST_PKRR_OP(khmx16, x15, x23, x14, 0x0000000000000000, 0x40feff00010005, 0x4000fffc02000400, x23, x5, 192, x11)

inst_25:
// rs1==x4, rs2==x9, rd==x3, rs2_h3_val == 8192, rs2_h2_val == -17, rs2_h1_val == -1, rs1_h2_val == 256
// opcode: khmx16 ; op1:x4; op2:x9; dest:x3; op1val:0x05010055550003;  op2val:0x2000ffefffff7fff
TEST_PKRR_OP(khmx16, x3, x4, x9, 0x0000000000000000, 0x05010055550003, 0x2000ffefffff7fff, x4, x5, 208, x11)

inst_26:
// rs1==x17, rs2==x22, rd==x29, rs2_h3_val == 4096, rs1_h1_val == -9, rs2_h1_val == 64, rs2_h0_val == -21846, rs1_h2_val == 32767
// opcode: khmx16 ; op1:x17; op2:x22; dest:x29; op1val:0xfffd7ffffff70400;  op2val:0x100000070040aaaa
TEST_PKRR_OP(khmx16, x29, x17, x22, 0x0000000000000000, 0xfffd7ffffff70400, 0x100000070040aaaa, x17, x5, 224, x11)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_27:
// rs1==x0, rs2==x16, rd==x2, rs2_h3_val == 1024, rs1_h0_val == -4097, rs1_h2_val == -1025, rs1_h3_val == -33, rs2_h0_val == -257
// opcode: khmx16 ; op1:x0; op2:x16; dest:x2; op1val:0xffdffbff0002efff;  op2val:0x4000001fbfffeff
TEST_PKRR_OP(khmx16, x2, x0, x16, 0x0000000000000000, 0xffdffbff0002efff, 0x4000001fbfffeff, x0, x4, 0, x6)

inst_28:
// rs1==x5, rs2==x18, rd==x24, rs2_h3_val == 512, rs2_h2_val == 8192, rs2_h0_val == 512
// opcode: khmx16 ; op1:x5; op2:x18; dest:x24; op1val:0x07c00000208000;  op2val:0x2002000fff80200
TEST_PKRR_OP(khmx16, x24, x5, x18, 0x0000000000000000, 0x07c00000208000, 0x2002000fff80200, x5, x4, 16, x6)

inst_29:
// rs1==x3, rs2==x19, rd==x22, rs2_h3_val == 256, rs1_h0_val == 8, rs1_h2_val == 8, rs2_h1_val == -17
// opcode: khmx16 ; op1:x3; op2:x19; dest:x22; op1val:0x060008ffff0008;  op2val:0x1000200ffeffff6
TEST_PKRR_OP(khmx16, x22, x3, x19, 0x0000000000000000, 0x060008ffff0008, 0x1000200ffeffff6, x3, x4, 32, x6)

inst_30:
// rs1==x26, rs2==x1, rd==x0, rs2_h3_val == 128, rs1_h1_val == -1025, rs1_h0_val == -17
// opcode: khmx16 ; op1:x26; op2:x1; dest:x0; op1val:0x067ffffbffffef;  op2val:0x80002000030000
TEST_PKRR_OP(khmx16, x0, x26, x1, 0x0000000000000000, 0x067ffffbffffef, 0x80002000030000, x26, x4, 48, x6)

inst_31:
// rs1==x30, rs2==x10, rd==x18, rs2_h3_val == 64, rs1_h0_val == 1
// opcode: khmx16 ; op1:x30; op2:x10; dest:x18; op1val:0x000001fff60001;  op2val:0x403fff0004dfff
TEST_PKRR_OP(khmx16, x18, x30, x10, 0x0000000000000000, 0x000001fff60001, 0x403fff0004dfff, x30, x4, 64, x6)

inst_32:
// rs2_h3_val == 32, rs1_h0_val == -2049, rs1_h3_val == 256, rs2_h2_val == -2049, rs2_h0_val == 8
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x100c0000007f7ff;  op2val:0x20f7ffdfff0008
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x100c0000007f7ff, 0x20f7ffdfff0008, x30, x4, 80, x6)

inst_33:
// rs2_h3_val == 16, rs2_h1_val == -3, rs1_h0_val == 2, rs1_h2_val == 32, rs2_h0_val == 1
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000020feff0002;  op2val:0x100003fffd0001
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x40000020feff0002, 0x100003fffd0001, x30, x4, 96, x6)

inst_34:
// rs2_h3_val == 4, rs1_h0_val == 16, rs2_h1_val == -9
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000003fff80010;  op2val:0x042000fff70003
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xc0000003fff80010, 0x042000fff70003, x30, x4, 112, x6)

inst_35:
// rs1_h1_val == -5, rs1_h2_val == -3, rs2_h2_val == -257
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffdfffbfff6;  op2val:0xff7ffefffffd0100
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xfbfffffdfffbfff6, 0xff7ffefffffd0100, x30, x4, 128, x6)

inst_36:
// rs1_h1_val == -3, rs1_h3_val == 8192, rs2_h1_val == -4097
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffbffffd0007;  op2val:0xffeffffeefff7fff
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x2000ffbffffd0007, 0xffeffffeefff7fff, x30, x4, 144, x6)

inst_37:
// rs1_h1_val == -2, rs2_h2_val == -16385, rs2_h1_val == -16385, rs2_h0_val == 2
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0005fffefffa;  op2val:0x09bfffbfff0002
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xfbff0005fffefffa, 0x09bfffbfff0002, x30, x4, 160, x6)

inst_38:
// rs1_h1_val == 4096, rs2_h0_val == -1, rs1_h0_val == 256
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffbf10000100;  op2val:0xf7ffbffffeffffff
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x7fffffbf10000100, 0xf7ffbffffeffffff, x30, x4, 176, x6)

inst_39:
// rs1_h1_val == 1024, rs2_h0_val == -17
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fbff0400ffdf;  op2val:0xfff600080007ffef
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x100fbff0400ffdf, 0xfff600080007ffef, x30, x4, 192, x6)

inst_40:
// rs1_h1_val == 512, rs2_h1_val == -32768, rs2_h2_val == 2
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff0200fff8;  op2val:0xfff7000280000200
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xfff7ffff0200fff8, 0xfff7000280000200, x30, x4, 208, x6)

inst_41:
// rs1_h1_val == 256, rs1_h2_val == 4096, rs1_h3_val == 32, rs2_h2_val == -32768
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x20100001000008;  op2val:0x80800080000006
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x20100001000008, 0x80800080000006, x30, x4, 224, x6)

inst_42:
// rs1_h1_val == 128, rs2_h2_val == -513, rs2_h0_val == -2, rs1_h0_val == -129
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfeff0080ff7f;  op2val:0x4000fdffdffffffe
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xfffdfeff0080ff7f, 0x4000fdffdffffffe, x30, x4, 240, x6)

inst_43:
// rs1_h1_val == 64, rs1_h3_val == -32768, rs2_h3_val == -1
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000f7ff0040ff7f;  op2val:0xffff0200fff80100
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x8000f7ff0040ff7f, 0xffff0200fff80100, x30, x4, 256, x6)

inst_44:
// rs1_h1_val == 8, rs2_h1_val == -129, rs2_h2_val == 1024, rs1_h2_val == 2
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff00020008fbff;  op2val:0x4000400ff7ffffc
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x7fff00020008fbff, 0x4000400ff7ffffc, x30, x4, 272, x6)

inst_45:
// rs1_h1_val == 0, rs2_h0_val == -513, rs1_h0_val == 32767
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fff800007fff;  op2val:0x7fff0007dffffdff
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xfff8fff800007fff, 0x7fff0007dffffdff, x30, x4, 288, x6)

inst_46:
// rs1_h0_val == -21846, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff90020aaaa;  op2val:0x0280003ffffff8
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xffdffff90020aaaa, 0x0280003ffffff8, x30, x4, 304, x6)

inst_47:
// rs1_h0_val == 21845, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x07002055555555;  op2val:0xfffb100000050007
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x07002055555555, 0xfffb100000050007, x30, x4, 320, x6)

inst_48:
// rs1_h0_val == -16385, rs2_h2_val == 0
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffeff0010bfff;  op2val:0xfeff0000fffa0100
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xbffffeff0010bfff, 0xfeff0000fffa0100, x30, x4, 336, x6)

inst_49:
// rs1_h0_val == -8193, rs2_h0_val == 16
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffef0003dfff;  op2val:0x800ff7f00060010
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xffbfffef0003dfff, 0x800ff7f00060010, x30, x4, 352, x6)

inst_50:
// rs1_h0_val == -257, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa00050200feff;  op2val:0x400000010009c000
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xfffa00050200feff, 0x400000010009c000, x30, x4, 368, x6)

inst_51:
// rs1_h0_val == -65, rs2_h0_val == -65, rs1_h3_val == -21846, rs1_h2_val == -2
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffe0000ffbf;  op2val:0x050020fff9ffbf
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xaaaafffe0000ffbf, 0x050020fff9ffbf, x30, x4, 384, x6)

inst_52:
// rs1_h0_val == -3, rs1_h1_val == -2049, rs1_h2_val == -5, rs2_h0_val == 21845, rs1_h3_val == 8
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fffbf7fffffd;  op2val:0xaaaa000900075555
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x08fffbf7fffffd, 0xaaaa000900075555, x30, x4, 400, x6)

inst_53:
// rs1_h0_val == 8192, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000010000042000;  op2val:0xffbf0007ffef1000
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x4000010000042000, 0xffbf0007ffef1000, x30, x4, 416, x6)

inst_54:
// rs1_h0_val == 512, rs2_h2_val == 256
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff1000fffa0200;  op2val:0x06010000020009
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xfbff1000fffa0200, 0x06010000020009, x30, x4, 432, x6)

inst_55:
// rs1_h0_val == 128, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x03000320000080;  op2val:0xff7f000101000002
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x03000320000080, 0xff7f000101000002, x30, x4, 448, x6)

inst_56:
// rs1_h0_val == 64, rs2_h0_val == -9
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fff6fbff0040;  op2val:0xffbfffdf0004fff7
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x01fff6fbff0040, 0xffbfffdf0004fff7, x30, x4, 464, x6)

inst_57:
// rs1_h0_val == 4, rs1_h3_val == -513
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffeffff0004;  op2val:0xeffffff80001fffa
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xfdfffffeffff0004, 0xeffffff80001fffa, x30, x4, 480, x6)

inst_58:
// rs1_h0_val == 0, rs1_h1_val == -33
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0200ffdf0000;  op2val:0xff7fffef55550008
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x7fff0200ffdf0000, 0xff7fffef55550008, x30, x4, 496, x6)

inst_59:
// rs2_h1_val == 0, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000020003dfff;  op2val:0x2000ff7f0000fffd
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x10000020003dfff, 0x2000ff7f0000fffd, x30, x4, 512, x6)

inst_60:
// rs2_h0_val == -16385, rs1_h1_val == -65
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x07efffffbf3fff;  op2val:0xfffe8000c000bfff
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x07efffffbf3fff, 0xfffe8000c000bfff, x30, x4, 528, x6)

inst_61:
// rs2_h0_val == -129, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x05000102000003;  op2val:0x1000007bfffff7f
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x05000102000003, 0x1000007bfffff7f, x30, x4, 544, x6)

inst_62:
// rs2_h0_val == -33, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0002ffff3fff;  op2val:0xfffcfbff5555ffdf
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xaaaa0002ffff3fff, 0xfffcfbff5555ffdf, x30, x4, 560, x6)

inst_63:
// rs2_h0_val == 16384, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffbff0200fffc;  op2val:0xffef000710004000
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xbffffbff0200fffc, 0xffef000710004000, x30, x4, 576, x6)

inst_64:
// rs2_h0_val == 128, rs1_h3_val == 4096
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000040080fdff;  op2val:0x10fdfffff70080
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x100000040080fdff, 0x10fdfffff70080, x30, x4, 592, x6)

inst_65:
// rs2_h0_val == 64, rs2_h2_val == -4097
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fdff3fff0400;  op2val:0xffefefff00030040
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x2000fdff3fff0400, 0xffefefff00030040, x30, x4, 608, x6)

inst_66:
// rs2_h0_val == 32, rs1_h2_val == 2048
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff080000200002;  op2val:0x100008000090020
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x3fff080000200002, 0x100008000090020, x30, x4, 624, x6)

inst_67:
// rs2_h0_val == 4, rs2_h1_val == -513, rs2_h3_val == 0
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff6fff6ffbf;  op2val:0x003ffffdff0004
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xffdffff6fff6ffbf, 0x003ffffdff0004, x30, x4, 640, x6)

inst_68:
// rs1_h3_val == 21845, rs1_h1_val == 32767
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffef7fff0100;  op2val:0x80000070007ffdf
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x5555ffef7fff0100, 0x80000070007ffdf, x30, x4, 656, x6)

inst_69:
// rs1_h3_val == -8193, rs2_h2_val == -9
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffff7fffffffff9;  op2val:0xbffffff7efffffbf
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xdffff7fffffffff9, 0xbffffff7efffffbf, x30, x4, 672, x6)

inst_70:
// rs1_h3_val == -2049, rs1_h1_val == -513, rs2_h1_val == 32767
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0100fdff0009;  op2val:0x2020007fff8000
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xf7ff0100fdff0009, 0x2020007fff8000, x30, x4, 688, x6)

inst_71:
// rs1_h3_val == -257, rs1_h1_val == -129, rs2_h1_val == -33
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffff7f0008;  op2val:0x20fff9ffdf0006
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xfeffffffff7f0008, 0x20fff9ffdf0006, x30, x4, 704, x6)

inst_72:
// rs1_h3_val == -129, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffb0008bfff;  op2val:0x2000800ffeffdff
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xff7ffffb0008bfff, 0x2000800ffeffdff, x30, x4, 720, x6)

inst_73:
// rs1_h3_val == -17, rs1_h2_val == -129
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefff7ffff80020;  op2val:0x3fff0001ffff7fff
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xffefff7ffff80020, 0x3fff0001ffff7fff, x30, x4, 736, x6)

inst_74:
// rs1_h0_val == -1, rs1_h2_val == -21846, rs1_h3_val == 2048
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x800aaaa0001ffff;  op2val:0xfffc001004000040
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x800aaaa0001ffff, 0xfffc001004000040, x30, x4, 752, x6)

inst_75:
// rs2_h3_val == 1, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x081000fffc8000;  op2val:0x01080000030010
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x081000fffc8000, 0x01080000030010, x30, x4, 768, x6)

inst_76:
// rs2_h2_val == -8193, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff90000fffd3fff;  op2val:0x4000dfff00040080
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xfff90000fffd3fff, 0x4000dfff00040080, x30, x4, 784, x6)

inst_77:
// rs1_h3_val == 512, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x200002000100002;  op2val:0x102000fff6fff6
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x200002000100002, 0x102000fff6fff6, x30, x4, 800, x6)

inst_78:
// rs1_h3_val == 16, rs2_h2_val == -5
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fffe0200fffa;  op2val:0xdffffffbc0005555
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x10fffe0200fffa, 0xdffffffbc0005555, x30, x4, 816, x6)

inst_79:
// rs1_h3_val == 2, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffbffff60006;  op2val:0x80efff0002aaaa
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x02ffbffff60006, 0x80efff0002aaaa, x30, x4, 832, x6)

inst_80:
// rs1_h3_val == -1, rs1_h2_val == 16
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff001010001000;  op2val:0x3fffc00001001000
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xffff001010001000, 0x3fffc00001001000, x30, x4, 848, x6)

inst_81:
// rs2_h2_val == -3, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fffbc0000080;  op2val:0xffbffffd00010200
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x01fffbc0000080, 0xffbffffd00010200, x30, x4, 864, x6)

inst_82:
// rs2_h2_val == 16384, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000002fff6feff;  op2val:0xffef4000ffdffffc
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x20000002fff6feff, 0xffef4000ffdffffc, x30, x4, 880, x6)

inst_83:
// rs1_h2_val == -8193, rs2_h1_val == -21846
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffff60800;  op2val:0xffff1000aaaa0008
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xffffdffffff60800, 0xffff1000aaaa0008, x30, x4, 896, x6)

inst_84:
// rs1_h2_val == -33, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffdf08000005;  op2val:0xfff7fff80006efff
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x2000ffdf08000005, 0xfff7fff80006efff, x30, x4, 912, x6)

inst_85:
// rs2_h2_val == 4, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000aaaa;  op2val:0x10000004ffbf0001
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x4000000000aaaa, 0x10000004ffbf0001, x30, x4, 928, x6)

inst_86:
// rs1_h2_val == -32768, rs2_h2_val == -21846
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x028000fffd0002;  op2val:0x800aaaa7fffaaaa
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x028000fffd0002, 0x800aaaa7fffaaaa, x30, x4, 944, x6)

inst_87:
// rs1_h2_val == 16384, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x004000fdffc000;  op2val:0xefffffff00014000
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x004000fdffc000, 0xefffffff00014000, x30, x4, 960, x6)

inst_88:
// rs1_h2_val == 8192, rs1_h1_val == -16385
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff82000bfff0200;  op2val:0xfffeffff0000bfff
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xfff82000bfff0200, 0xfffeffff0000bfff, x30, x4, 976, x6)

inst_89:
// rs2_h1_val == -2049, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000100fff90020;  op2val:0x200ff7ff7fffffe
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x8000100fff90020, 0x200ff7ff7fffffe, x30, x4, 992, x6)

inst_90:
// rs1_h2_val == 128, rs1_h3_val == -2
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe008000034000;  op2val:0x4000efffffffffdf
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xfffe008000034000, 0x4000efffffffffdf, x30, x4, 1008, x6)

inst_91:
// rs2_h1_val == -5, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x40fffdfffffff8;  op2val:0xfffbfff7fffbdfff
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x40fffdfffffff8, 0xfffbfff7fffbdfff, x30, x4, 1024, x6)

inst_92:
// rs1_h1_val == -21846, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x060080aaaafdff;  op2val:0x1000fffafbffbfff
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x060080aaaafdff, 0x1000fffafbffbfff, x30, x4, 1040, x6)

inst_93:
// rs2_h1_val == 8192, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fff800030010;  op2val:0x1000402000fff7
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x1000fff800030010, 0x1000402000fff7, x30, x4, 1056, x6)

inst_94:
// rs1_h1_val == -8193, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x052000dfffaaaa;  op2val:0x200ffef55550009
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x052000dfffaaaa, 0x200ffef55550009, x30, x4, 1072, x6)

inst_95:
// rs1_h1_val == -4097, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fff7efff5555;  op2val:0xbffffeffffff0040
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x04fff7efff5555, 0xbffffeffffff0040, x30, x4, 1088, x6)

inst_96:
// rs2_h1_val == 128, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffa08000400;  op2val:0xffff08000080efff
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xff7ffffa08000400, 0xffff08000080efff, x30, x4, 1104, x6)

inst_97:
// rs2_h1_val == 2048, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000050004bfff;  op2val:0xffff400008002000
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x8000050004bfff, 0xffff400008002000, x30, x4, 1120, x6)

inst_98:
// rs2_h2_val == 21845, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x058000efff0200;  op2val:0xf7ff5555fffbfbff
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x058000efff0200, 0xf7ff5555fffbfbff, x30, x4, 1136, x6)

inst_99:
// rs2_h1_val == 8, 
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffafffdfff9;  op2val:0xffff3fff0008dfff
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xfefffffafffdfff9, 0xffff3fff0008dfff, x30, x4, 1152, x6)

inst_100:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == -129, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == -2049, rs2_h3_val == 8, rs1_h3_val == -9, rs1_h2_val == -17, rs2_h1_val == 32
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffef0009fff9;  op2val:0x08ff7f0020f7ff
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xfff7ffef0009fff9, 0x08ff7f0020f7ff, x30, x4, 1168, x6)

inst_101:
// rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h1_val == 4, rs2_h3_val == -513, rs1_h2_val == 512, rs1_h0_val == 4096, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -1, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h3_val == -3, rs2_h0_val == 2048
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0200ffff1000;  op2val:0xfdff000500040800
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xfffd0200ffff1000, 0xfdff000500040800, x30, x4, 1184, x6)

inst_102:
// rs2_h3_val == -8193, rs2_h2_val == 32, rs2_h0_val == -5, rs2_h1_val == 512, rs1_h0_val == 16384
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60200fffa4000;  op2val:0xdfff00200200fffb
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xfff60200fffa4000, 0xdfff00200200fffb, x30, x4, 1200, x6)

inst_103:
// rs2_h3_val == 1024, rs1_h0_val == -4097, rs1_h2_val == -1025, rs1_h3_val == -33, rs2_h0_val == -257
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffbff0002efff;  op2val:0x4000001fbfffeff
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0xffdffbff0002efff, 0x4000001fbfffeff, x30, x4, 1216, x6)

inst_104:
// rs2_h3_val == 128, rs1_h1_val == -1025, rs1_h0_val == -17
// opcode: khmx16 ; op1:x30; op2:x29; dest:x31; op1val:0x067ffffbffffef;  op2val:0x80002000030000
TEST_PKRR_OP(khmx16, x31, x30, x29, 0x0000000000000000, 0x067ffffbffffef, 0x80002000030000, x30, x4, 1232, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 156*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
