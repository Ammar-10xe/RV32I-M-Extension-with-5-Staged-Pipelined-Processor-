
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the radd16 instruction of the RISC-V RV64PZicsr extension for the radd16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",radd16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x10, rs2==x8, rd==x10, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h1_val == 2, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs2_h1_val == 8192, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h2_val == 128, rs2_h0_val == -3
// opcode: radd16 ; op1:x10; op2:x8; dest:x10; op1val:0xfff83fff00028000;  op2val:0x0700802000fffd
TEST_RR_OP(radd16, x10, x10, x8, 0x0000000000000000, 0xfff83fff00028000, 0x0700802000fffd, x2, 0, x5)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x1, rs2==x25, rd==x24, rs1_h3_val == rs2_h3_val, rs2_h1_val == 1, rs2_h2_val == -1025, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h0_val == 16384, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == -1025, rs1_h1_val == 4, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h2_val == -129
// opcode: radd16 ; op1:x1; op2:x25; dest:x24; op1val:0x09ff7f00044000;  op2val:0x09fbff0001fbff
TEST_RR_OP(radd16, x24, x1, x25, 0x0000000000000000, 0x09ff7f00044000, 0x09fbff0001fbff, x2, 8, x5)

inst_2:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x16, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h1_val == 1024, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h3_val == -1, rs2_h1_val == -21846
// opcode: radd16 ; op1:x30; op2:x30; dest:x16; op1val:0xffff3fff0400fff6;  op2val:0xfff90080aaaafffa
TEST_RR_OP(radd16, x16, x30, x30, 0x0000000000000000, 0xffff3fff0400fff6, 0xfff90080aaaafffa, x2, 16, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == -16385, rs1_h3_val == 1, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == -33, rs2_h3_val == -16385, rs2_h2_val == 0
// opcode: radd16 ; op1:x6; op2:x6; dest:x6; op1val:0x01ffdf00070009;  op2val:0xbfff0000bfff0006
TEST_RR_OP(radd16, x6, x6, x6, 0x0000000000000000, 0x01ffdf00070009, 0xbfff0000bfff0006, x2, 24, x5)

inst_4:
// rs2 == rd != rs1, rs1==x3, rs2==x21, rd==x21, rs1_h2_val == rs2_h2_val, rs1_h2_val == 4096, rs2_h1_val == -513, rs1_h1_val == 16, rs2_h2_val == 4096, rs1_h0_val == 32767
// opcode: radd16 ; op1:x3; op2:x21; dest:x21; op1val:0xfff9100000107fff;  op2val:0xfff61000fdfffff6
TEST_RR_OP(radd16, x21, x3, x21, 0x0000000000000000, 0xfff9100000107fff, 0xfff61000fdfffff6, x2, 32, x5)

inst_5:
// rs1==x26, rs2==x27, rd==x3, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 8192, rs1_h0_val == -4097, rs1_h2_val == -3, rs1_h3_val == 4096
// opcode: radd16 ; op1:x26; op2:x27; dest:x3; op1val:0x1000fffdfffcefff;  op2val:0xfffa0005c0002000
TEST_RR_OP(radd16, x3, x26, x27, 0x0000000000000000, 0x1000fffdfffcefff, 0xfffa0005c0002000, x2, 40, x5)

inst_6:
// rs1==x0, rs2==x28, rd==x30, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 512, rs2_h2_val == -32768, rs1_h1_val == 1, rs2_h3_val == 32, rs1_h0_val == 21845
// opcode: radd16 ; op1:x0; op2:x28; dest:x30; op1val:0x01020000015555;  op2val:0x2080003fff0003
TEST_RR_OP(radd16, x30, x0, x28, 0x0000000000000000, 0x01020000015555, 0x2080003fff0003, x2, 48, x5)

inst_7:
// rs1==x21, rs2==x26, rd==x4, rs1_h1_val == rs2_h1_val, rs2_h1_val == 0, rs1_h3_val == 32, rs1_h1_val == 0, rs1_h0_val == -8193, rs2_h2_val == 32767
// opcode: radd16 ; op1:x21; op2:x26; dest:x4; op1val:0x20fffc0000dfff;  op2val:0xbfff7fff00002000
TEST_RR_OP(radd16, x4, x21, x26, 0x0000000000000000, 0x20fffc0000dfff, 0xbfff7fff00002000, x2, 56, x5)

inst_8:
// rs1==x12, rs2==x15, rd==x29, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == 4096, rs1_h1_val == -16385, rs1_h0_val == -16385, rs2_h2_val == 16, rs2_h3_val == -4097
// opcode: radd16 ; op1:x12; op2:x15; dest:x29; op1val:0x093fffbfffbfff;  op2val:0xefff001020001000
TEST_RR_OP(radd16, x29, x12, x15, 0x0000000000000000, 0x093fffbfffbfff, 0xefff001020001000, x2, 64, x5)

inst_9:
// rs1==x7, rs2==x20, rd==x22, rs1_h0_val == rs2_h0_val, rs2_h2_val == -33, rs2_h3_val == -17
// opcode: radd16 ; op1:x7; op2:x20; dest:x22; op1val:0x07100000020003;  op2val:0xffefffdfbfff0003
TEST_RR_OP(radd16, x22, x7, x20, 0x0000000000000000, 0x07100000020003, 0xffefffdfbfff0003, x2, 72, x5)

inst_10:
// rs1==x22, rs2==x10, rd==x23, rs2_h3_val == -21846, rs2_h0_val == 21845, rs2_h1_val == -33, rs1_h3_val == -2049, rs1_h0_val == -21846, rs2_h2_val == 32
// opcode: radd16 ; op1:x22; op2:x10; dest:x23; op1val:0xf7ff3fff0400aaaa;  op2val:0xaaaa0020ffdf5555
TEST_RR_OP(radd16, x23, x22, x10, 0x0000000000000000, 0xf7ff3fff0400aaaa, 0xaaaa0020ffdf5555, x2, 80, x5)

inst_11:
// rs1==x4, rs2==x1, rd==x8, rs2_h3_val == 21845, rs2_h0_val == -65, rs2_h1_val == -3, rs1_h1_val == -21846, rs1_h0_val == 0, rs2_h2_val == 2
// opcode: radd16 ; op1:x4; op2:x1; dest:x8; op1val:0x07ffdfaaaa0000;  op2val:0x55550002fffdffbf
TEST_RR_OP(radd16, x8, x4, x1, 0x0000000000000000, 0x07ffdfaaaa0000, 0x55550002fffdffbf, x2, 88, x5)

inst_12:
// rs1==x13, rs2==x19, rd==x15, rs2_h3_val == 32767, rs1_h0_val == -65, rs2_h0_val == 16, rs2_h1_val == 16
// opcode: radd16 ; op1:x13; op2:x19; dest:x15; op1val:0xfffffff60009ffbf;  op2val:0x7fff000500100010
TEST_RR_OP(radd16, x15, x13, x19, 0x0000000000000000, 0xfffffff60009ffbf, 0x7fff000500100010, x2, 96, x5)

inst_13:
// rs1==x17, rs2==x22, rd==x20, rs2_h3_val == -8193, rs1_h2_val == 256, rs1_h0_val == 4096, rs1_h1_val == 256, rs2_h0_val == -2, rs1_h3_val == 8192
// opcode: radd16 ; op1:x17; op2:x22; dest:x20; op1val:0x2000010001001000;  op2val:0xdfff1000fff8fffe
TEST_RR_OP(radd16, x20, x17, x22, 0x0000000000000000, 0x2000010001001000, 0xdfff1000fff8fffe, x2, 104, x5)

inst_14:
// rs1==x8, rs2==x14, rd==x7, rs2_h3_val == -2049, rs2_h1_val == -1025, rs1_h0_val == 4, rs1_h3_val == -9, rs1_h1_val == -257, rs1_h2_val == -2
// opcode: radd16 ; op1:x8; op2:x14; dest:x7; op1val:0xfff7fffefeff0004;  op2val:0xf7ff3ffffbfffffc
TEST_RR_OP(radd16, x7, x8, x14, 0x0000000000000000, 0xfff7fffefeff0004, 0xf7ff3ffffbfffffc, x2, 112, x5)

inst_15:
// rs1==x15, rs2==x18, rd==x9, rs2_h3_val == -1025, rs1_h2_val == 64, rs1_h3_val == 2048, rs2_h0_val == -129
// opcode: radd16 ; op1:x15; op2:x18; dest:x9; op1val:0x8000040fffc5555;  op2val:0xfbff80000000ff7f
TEST_RR_OP(radd16, x9, x15, x18, 0x0000000000000000, 0x8000040fffc5555, 0xfbff80000000ff7f, x2, 120, x5)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_16:
// rs1==x28, rs2==x17, rd==x0, rs2_h3_val == -513, rs1_h2_val == 8192, rs2_h2_val == -5, rs1_h3_val == -8193
// opcode: radd16 ; op1:x28; op2:x17; dest:x0; op1val:0xdfff2000fff9fff8;  op2val:0xfdfffffb0010fffc
TEST_RR_OP(radd16, x0, x28, x17, 0x0000000000000000, 0xdfff2000fff9fff8, 0xfdfffffb0010fffc, x6, 0, x8)

inst_17:
// rs1==x19, rs2==x24, rd==x12, rs2_h3_val == -257, rs2_h2_val == 16384, rs1_h3_val == -21846, rs1_h0_val == 256, rs1_h1_val == 512
// opcode: radd16 ; op1:x19; op2:x24; dest:x12; op1val:0xaaaa000502000100;  op2val:0xfeff400000050009
TEST_RR_OP(radd16, x12, x19, x24, 0x0000000000000000, 0xaaaa000502000100, 0xfeff400000050009, x6, 8, x8)

inst_18:
// rs1==x11, rs2==x2, rd==x1, rs2_h3_val == -129, rs1_h2_val == -8193, rs1_h3_val == -4097, rs2_h2_val == 1
// opcode: radd16 ; op1:x11; op2:x2; dest:x1; op1val:0xefffdffffffcefff;  op2val:0xff7f000100062000
TEST_RR_OP(radd16, x1, x11, x2, 0x0000000000000000, 0xefffdffffffcefff, 0xff7f000100062000, x6, 16, x8)

inst_19:
// rs1==x27, rs2==x16, rd==x26, rs2_h3_val == -65, rs1_h3_val == -2, rs1_h1_val == -2
// opcode: radd16 ; op1:x27; op2:x16; dest:x26; op1val:0xfffefffdfffefff6;  op2val:0xffbfffdffff90005
TEST_RR_OP(radd16, x26, x27, x16, 0x0000000000000000, 0xfffefffdfffefff6, 0xffbfffdffff90005, x6, 24, x8)

inst_20:
// rs1==x29, rs2==x9, rd==x17, rs2_h3_val == -33, rs2_h1_val == 4, rs1_h3_val == 1024, rs1_h1_val == 8192, rs2_h2_val == -17, rs1_h0_val == 2048, rs1_h2_val == -32768
// opcode: radd16 ; op1:x29; op2:x9; dest:x17; op1val:0x400800020000800;  op2val:0xffdfffef0004fff8
TEST_RR_OP(radd16, x17, x29, x9, 0x0000000000000000, 0x400800020000800, 0xffdfffef0004fff8, x6, 32, x8)

inst_21:
// rs1==x2, rs2==x31, rd==x28, rs2_h3_val == -9, rs2_h0_val == 32, rs1_h1_val == 21845, rs1_h2_val == -513, rs2_h2_val == -129
// opcode: radd16 ; op1:x2; op2:x31; dest:x28; op1val:0xdffffdff55550003;  op2val:0xfff7ff7f00000020
TEST_RR_OP(radd16, x28, x2, x31, 0x0000000000000000, 0xdffffdff55550003, 0xfff7ff7f00000020, x6, 40, x8)

inst_22:
// rs1==x9, rs2==x11, rd==x14, rs2_h3_val == -5, rs1_h2_val == -1025, rs2_h2_val == -2
// opcode: radd16 ; op1:x9; op2:x11; dest:x14; op1val:0xfff8fbff0007bfff;  op2val:0xfffbfffe0001fffa
TEST_RR_OP(radd16, x14, x9, x11, 0x0000000000000000, 0xfff8fbff0007bfff, 0xfffbfffe0001fffa, x6, 48, x8)

inst_23:
// rs1==x5, rs2==x0, rd==x25, rs2_h3_val == -3, rs1_h2_val == -1, rs1_h1_val == -65, rs1_h3_val == 16
// opcode: radd16 ; op1:x5; op2:x0; dest:x25; op1val:0x10ffffffbf0003;  op2val:0xfffd0010fffafff8
TEST_RR_OP(radd16, x25, x5, x0, 0x0000000000000000, 0x10ffffffbf0003, 0xfffd0010fffafff8, x6, 56, x8)

inst_24:
// rs1==x14, rs2==x23, rd==x18, rs2_h3_val == -2, rs1_h0_val == -2049, rs1_h2_val == 2048
// opcode: radd16 ; op1:x14; op2:x23; dest:x18; op1val:0xfff608005555f7ff;  op2val:0xfffe8000c0005555
TEST_RR_OP(radd16, x18, x14, x23, 0x0000000000000000, 0xfff608005555f7ff, 0xfffe8000c0005555, x6, 64, x8)

inst_25:
// rs1==x25, rs2==x29, rd==x11, rs2_h3_val == -32768, rs1_h2_val == 16384, rs1_h1_val == -5, rs1_h3_val == 32767, rs2_h2_val == 21845, rs2_h0_val == 256
// opcode: radd16 ; op1:x25; op2:x29; dest:x11; op1val:0x7fff4000fffbfffa;  op2val:0x80005555fffa0100
TEST_RR_OP(radd16, x11, x25, x29, 0x0000000000000000, 0x7fff4000fffbfffa, 0x80005555fffa0100, x6, 72, x8)

inst_26:
// rs1==x16, rs2==x13, rd==x31, rs2_h3_val == 16384, rs1_h3_val == 64
// opcode: radd16 ; op1:x16; op2:x13; dest:x31; op1val:0x40fff6aaaafffc;  op2val:0x400080000006fffe
TEST_RR_OP(radd16, x31, x16, x13, 0x0000000000000000, 0x40fff6aaaafffc, 0x400080000006fffe, x6, 80, x8)

inst_27:
// rs1==x23, rs2==x3, rd==x27, rs2_h3_val == 8192, rs1_h3_val == -5, rs1_h0_val == 8, rs2_h0_val == -5, rs1_h2_val == 0
// opcode: radd16 ; op1:x23; op2:x3; dest:x27; op1val:0xfffb000002000008;  op2val:0x200000053ffffffb
TEST_RR_OP(radd16, x27, x23, x3, 0x0000000000000000, 0xfffb000002000008, 0x200000053ffffffb, x6, 88, x8)

inst_28:
// rs1==x24, rs2==x12, rd==x19, rs2_h3_val == 4096, rs2_h1_val == -32768, rs1_h0_val == -2, rs2_h0_val == 32767
// opcode: radd16 ; op1:x24; op2:x12; dest:x19; op1val:0xdfff10000005fffe;  op2val:0x1000000680007fff
TEST_RR_OP(radd16, x19, x24, x12, 0x0000000000000000, 0xdfff10000005fffe, 0x1000000680007fff, x6, 96, x8)

inst_29:
// rs1==x20, rs2==x5, rd==x13, rs2_h3_val == 2048, rs1_h0_val == -17, rs1_h3_val == 128, rs2_h0_val == 1
// opcode: radd16 ; op1:x20; op2:x5; dest:x13; op1val:0x80ffdf0002ffef;  op2val:0x8007ffffff60001
TEST_RR_OP(radd16, x13, x20, x5, 0x0000000000000000, 0x80ffdf0002ffef, 0x8007ffffff60001, x6, 104, x8)

inst_30:
// rs1==x31, rs2==x7, rd==x5, rs2_h3_val == 1024, rs1_h0_val == -3, rs2_h2_val == -513, rs1_h1_val == 2048, rs2_h0_val == -513, rs1_h3_val == 16384
// opcode: radd16 ; op1:x31; op2:x7; dest:x5; op1val:0x400040000800fffd;  op2val:0x400fdffc000fdff
TEST_RR_OP(radd16, x5, x31, x7, 0x0000000000000000, 0x400040000800fffd, 0x400fdffc000fdff, x6, 112, x8)

inst_31:
// rs1==x18, rs2==x4, rd==x2, rs2_h3_val == 512, rs1_h0_val == -33, rs1_h1_val == -17, rs2_h1_val == -2049
// opcode: radd16 ; op1:x18; op2:x4; dest:x2; op1val:0xffffff7fffefffdf;  op2val:0x2004000f7fffbff
TEST_RR_OP(radd16, x2, x18, x4, 0x0000000000000000, 0xffffff7fffefffdf, 0x2004000f7fffbff, x6, 120, x8)

inst_32:
// rs2_h3_val == 256, rs2_h1_val == 1024, rs1_h2_val == -5
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fffbaaaa8000;  op2val:0x10080000400fffa
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x03fffbaaaa8000, 0x10080000400fffa, x6, 128, x8)

inst_33:
// rs2_h3_val == 128, rs2_h0_val == -8193, rs2_h1_val == -257
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x80dfff0800fffa;  op2val:0x80fff6feffdfff
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x80dfff0800fffa, 0x80fff6feffdfff, x6, 136, x8)

inst_34:
// rs2_h3_val == 64, rs1_h2_val == -17, rs1_h1_val == -129, rs2_h1_val == -4097
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x05ffefff7f0005;  op2val:0x404000efffff7f
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x05ffefff7f0005, 0x404000efffff7f, x6, 144, x8)

inst_35:
// rs2_h3_val == 16, rs1_h3_val == 21845, rs1_h2_val == 32767, rs2_h0_val == -9, rs1_h1_val == -2049, rs2_h2_val == -21846
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x55557ffff7ffaaaa;  op2val:0x10aaaa2000fff7
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x55557ffff7ffaaaa, 0x10aaaa2000fff7, x6, 152, x8)

inst_36:
// rs2_h3_val == 8, rs2_h0_val == 64, rs1_h0_val == 2
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffb00040002;  op2val:0x08000100100040
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xfff6fffb00040002, 0x08000100100040, x6, 160, x8)

inst_37:
// rs1_h1_val == -3, rs2_h0_val == 16384
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0200fffd0003;  op2val:0x40000020fbff4000
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x3fff0200fffd0003, 0x40000020fbff4000, x6, 168, x8)

inst_38:
// rs1_h1_val == -32768, rs1_h3_val == -17
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef40008000ffbf;  op2val:0xff7f000500030001
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xffef40008000ffbf, 0xff7f000500030001, x6, 176, x8)

inst_39:
// rs1_h1_val == 16384, rs2_h1_val == -2, rs1_h2_val == -257
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x01feff4000fff6;  op2val:0xfffa0006fffe3fff
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x01feff4000fff6, 0xfffa0006fffe3fff, x6, 184, x8)

inst_40:
// rs1_h1_val == 4096, rs2_h2_val == -4097, rs1_h0_val == 1024
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fff810000400;  op2val:0xfdffefff04001000
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xfff6fff810000400, 0xfdffefff04001000, x6, 192, x8)

inst_41:
// rs1_h1_val == 128, rs1_h2_val == 16, rs1_h3_val == -32768
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000001000803fff;  op2val:0x407fff04000005
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x8000001000803fff, 0x407fff04000005, x6, 200, x8)

inst_42:
// rs1_h1_val == 64, rs2_h1_val == 2, rs2_h2_val == -2049
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fbff0040fffa;  op2val:0xfffef7ff0002dfff
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x4000fbff0040fffa, 0xfffef7ff0002dfff, x6, 208, x8)

inst_43:
// rs1_h1_val == 32, rs2_h0_val == 0, rs1_h3_val == -16385, rs2_h1_val == 8
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff020000205555;  op2val:0x4000000200080000
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xbfff020000205555, 0x4000000200080000, x6, 216, x8)

inst_44:
// rs1_h1_val == 8, rs2_h0_val == -17
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff601000008f7ff;  op2val:0xfff64000fff9ffef
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xfff601000008f7ff, 0xfff64000fff9ffef, x6, 224, x8)

inst_45:
// rs1_h1_val == -1, rs1_h3_val == 512, rs2_h1_val == 64
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000100ffff8000;  op2val:0x800000020040fdff
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x2000100ffff8000, 0x800000020040fdff, x6, 232, x8)

inst_46:
// rs1_h0_val == -1025, rs1_h3_val == 2, rs2_h0_val == -257
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x02dffffffefbff;  op2val:0xfbff00030002feff
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x02dffffffefbff, 0xfbff00030002feff, x6, 240, x8)

inst_47:
// rs1_h0_val == -513, rs2_h2_val == -1, rs1_h1_val == -8193
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fffcdffffdff;  op2val:0xfbfffffffff9fff8
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x200fffcdffffdff, 0xfbfffffffff9fff8, x6, 248, x8)

inst_48:
// rs1_h0_val == -257, rs1_h2_val == 32, rs2_h1_val == 32, rs2_h0_val == 512
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x060020c000feff;  op2val:0x10000100200200
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x060020c000feff, 0x10000100200200, x6, 256, x8)

inst_49:
// rs1_h0_val == -129, rs1_h3_val == -1025, rs2_h3_val == 1, rs1_h2_val == -21846
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffaaaaf7ffff7f;  op2val:0x01fbfffffe0010
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xfbffaaaaf7ffff7f, 0x01fbfffffe0010, x6, 264, x8)

inst_50:
// rs1_h0_val == -9, rs1_h3_val == -33
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0800fefffff7;  op2val:0xfbfffff80400fffb
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xffdf0800fefffff7, 0xfbfffff80400fffb, x6, 272, x8)

inst_51:
// rs1_h0_val == -5, rs1_h1_val == -1025, rs2_h0_val == 2
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x800020fbfffffb;  op2val:0x803fff00000002
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x800020fbfffffb, 0x803fff00000002, x6, 280, x8)

inst_52:
// rs1_h0_val == 8192, rs2_h0_val == 1024, rs2_h1_val == 2048
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000020000032000;  op2val:0x4000ff7f08000400
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x1000020000032000, 0x4000ff7f08000400, x6, 288, x8)

inst_53:
// rs1_h0_val == 512, rs2_h2_val == 4
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe4000ffef0200;  op2val:0xffbf000400080002
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xfffe4000ffef0200, 0xffbf000400080002, x6, 296, x8)

inst_54:
// rs1_h0_val == 128, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffb00100080;  op2val:0x8000000700014000
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xfffcfffb00100080, 0x8000000700014000, x6, 304, x8)

inst_55:
// rs1_h0_val == 64, rs2_h0_val == -1, rs2_h1_val == 16384
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffd01000040;  op2val:0xfdff3fff4000ffff
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xdffffffd01000040, 0xfdff3fff4000ffff, x6, 312, x8)

inst_56:
// rs1_h0_val == 32, rs1_h2_val == -65, rs2_h0_val == 4
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffbf00010020;  op2val:0x20fff8fffa0004
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xfff6ffbf00010020, 0x20fff8fffa0004, x6, 320, x8)

inst_57:
// rs1_h0_val == 16, rs2_h1_val == -129, rs1_h2_val == -9
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff73fff0010;  op2val:0xfbff0009ff7f0001
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xf7fffff73fff0010, 0xfbff0009ff7f0001, x6, 328, x8)

inst_58:
// rs1_h0_val == 1, rs1_h1_val == -9, rs2_h0_val == -32768
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff7fff70001;  op2val:0x200fbff00098000
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xf7fffff7fff70001, 0x200fbff00098000, x6, 336, x8)

inst_59:
// rs2_h1_val == -1, rs2_h0_val == -2049
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff70100fffa;  op2val:0xffef0080fffff7ff
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xbffffff70100fffa, 0xffef0080fffff7ff, x6, 344, x8)

inst_60:
// rs2_h0_val == -21846, rs1_h3_val == -129
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f2000fff9aaaa;  op2val:0x800010000000aaaa
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xff7f2000fff9aaaa, 0x800010000000aaaa, x6, 352, x8)

inst_61:
// rs2_h0_val == -16385, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x010020ffefc000;  op2val:0xbfff8000fbffbfff
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x010020ffefc000, 0xbfff8000fbffbfff, x6, 360, x8)

inst_62:
// rs2_h0_val == -4097, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x40ffef0080fffb;  op2val:0xf7fffbff0001efff
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x40ffef0080fffb, 0xf7fffbff0001efff, x6, 368, x8)

inst_63:
// rs2_h0_val == -33, rs1_h2_val == 4
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf00043fffbfff;  op2val:0x200f7ff0040ffdf
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xffdf00043fffbfff, 0x200f7ff0040ffdf, x6, 376, x8)

inst_64:
// rs2_h0_val == 2048, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffc08005555;  op2val:0xffdff7fffff60800
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x3ffffffc08005555, 0xffdff7fffff60800, x6, 384, x8)

inst_65:
// rs2_h0_val == 128, rs2_h3_val == 4
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0200feff0008;  op2val:0x04fff800090080
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xbfff0200feff0008, 0x04fff800090080, x6, 392, x8)

inst_66:
// rs2_h0_val == 8, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x200800fbffffdf;  op2val:0xfff7fffac0000008
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x200800fbffffdf, 0xfff7fffac0000008, x6, 400, x8)

inst_67:
// rs1_h3_val == -513, rs2_h2_val == 256
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0200fff9fbff;  op2val:0x20000100fffa0007
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xfdff0200fff9fbff, 0x20000100fffa0007, x6, 408, x8)

inst_68:
// rs1_h3_val == -257, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff100000030005;  op2val:0xfffb555508007fff
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xfeff100000030005, 0xfffb555508007fff, x6, 416, x8)

inst_69:
// rs1_h3_val == -65, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00108000fbff;  op2val:0xfdff0004ff7fffbf
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xffbf00108000fbff, 0xfdff0004ff7fffbf, x6, 424, x8)

inst_70:
// rs1_h0_val == -1, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70003fffbffff;  op2val:0x01fffe0010ffdf
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xfff70003fffbffff, 0x01fffe0010ffdf, x6, 432, x8)

inst_71:
// rs2_h3_val == 2, rs1_h2_val == 21845
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef55550005ff7f;  op2val:0x02aaaa0003fffe
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xffef55550005ff7f, 0x02aaaa0003fffe, x6, 440, x8)

inst_72:
// rs1_h3_val == -3, rs2_h1_val == 4096
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd004000081000;  op2val:0xf7ff000910000002
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xfffd004000081000, 0xf7ff000910000002, x6, 448, x8)

inst_73:
// rs2_h3_val == 0, rs1_h2_val == 2
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000280000006;  op2val:0x00000900060010
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x7fff000280000006, 0x00000900060010, x6, 456, x8)

inst_74:
// rs2_h3_val == -1, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x020020bfff0100;  op2val:0xffffefff0010fff7
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x020020bfff0100, 0xffffefff0010fff7, x6, 464, x8)

inst_75:
// rs2_h2_val == -16385, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x40001000ff7fbfff;  op2val:0xfff7bfffff7ffffb
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x40001000ff7fbfff, 0xfff7bfffff7ffffb, x6, 472, x8)

inst_76:
// rs2_h2_val == -8193, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x20040001000feff;  op2val:0x8000dfff3fff0008
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x20040001000feff, 0x8000dfff3fff0008, x6, 480, x8)

inst_77:
// rs1_h3_val == 256, rs2_h2_val == -65, rs2_h1_val == -9
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000200050100;  op2val:0xfffbffbffff70010
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x100000200050100, 0xfffbffbffff70010, x6, 488, x8)

inst_78:
// rs2_h2_val == -257, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7000600800009;  op2val:0x100feffefffffef
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xfff7000600800009, 0x100feffefffffef, x6, 496, x8)

inst_79:
// rs1_h3_val == 8, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0800200020ffff;  op2val:0x07aaaa2000fffb
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x0800200020ffff, 0x07aaaa2000fffb, x6, 504, x8)

inst_80:
// rs1_h3_val == 4, rs2_h1_val == -5
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x04ffeffff8fff6;  op2val:0x09ff7ffffb0800
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x04ffeffff8fff6, 0x09ff7ffffb0800, x6, 512, x8)

inst_81:
// rs2_h2_val == -9, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff77fffff7fffbf;  op2val:0xffeffff7fff60020
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xfff77fffff7fffbf, 0xffeffff7fff60020, x6, 520, x8)

inst_82:
// rs1_h3_val == 0, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x008000dfff8000;  op2val:0x7fff001008000003
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x008000dfff8000, 0x7fff001008000003, x6, 528, x8)

inst_83:
// rs2_h2_val == -3, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff8000fff7fffd;  op2val:0xbffffffdfdfffff9
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xfbff8000fff7fffd, 0xbffffffdfdfffff9, x6, 536, x8)

inst_84:
// rs1_h2_val == -16385, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x06bffff7fffffa;  op2val:0xfff9fffff7ff0002
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x06bffff7fffffa, 0xfff9fffff7ff0002, x6, 544, x8)

inst_85:
// rs2_h2_val == 8192, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0007ffbfc000;  op2val:0xfeff20004000fff7
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xff7f0007ffbfc000, 0xfeff20004000fff7, x6, 552, x8)

inst_86:
// rs1_h2_val == -4097, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x80efff0020fffb;  op2val:0x2010000006fffb
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x80efff0020fffb, 0x2010000006fffb, x6, 560, x8)

inst_87:
// rs2_h2_val == 2048, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00000200feff;  op2val:0x800800fffd0100
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xfdff00000200feff, 0x800800fffd0100, x6, 568, x8)

inst_88:
// rs1_h2_val == -2049, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffff7fffff70003;  op2val:0x3ffffeff00200010
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x7ffff7fffff70003, 0x3ffffeff00200010, x6, 576, x8)

inst_89:
// rs2_h2_val == 1024, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x100ffdf0006ffdf;  op2val:0x1000400f7fffffc
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x100ffdf0006ffdf, 0x1000400f7fffffc, x6, 584, x8)

inst_90:
// rs2_h2_val == 512, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffdf7fffff6;  op2val:0xfff70200fffcfff8
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xfdfffffdf7fffff6, 0xfff70200fffcfff8, x6, 592, x8)

inst_91:
// rs2_h2_val == 64, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x20002000fffd0800;  op2val:0xfffa0040ffdf0006
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x20002000fffd0800, 0xfffa0040ffdf0006, x6, 600, x8)

inst_92:
// rs2_h2_val == 8, rs2_h1_val == -8193
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x80efff0800ff7f;  op2val:0x000008dfff0010
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x80efff0800ff7f, 0x000008dfff0010, x6, 608, x8)

inst_93:
// rs2_h1_val == 21845, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc00103fff0006;  op2val:0x10ffef55550400
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xfffc00103fff0006, 0x10ffef55550400, x6, 616, x8)

inst_94:
// rs2_h1_val == 512, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x800dffffffefff9;  op2val:0x3fff00050200fffb
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x800dffffffefff9, 0x3fff00050200fffb, x6, 624, x8)

inst_95:
// rs2_h1_val == 32767, rs1_h1_val == -513
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x000005fdff0002;  op2val:0x00f7ff7ffffffc
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x000005fdff0002, 0x00f7ff7ffffffc, x6, 632, x8)

inst_96:
// rs1_h2_val == 1024, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0400fff8fffa;  op2val:0xfbff0006fffefffe
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xffff0400fff8fffa, 0xfbff0006fffefffe, x6, 640, x8)

inst_97:
// rs1_h2_val == 128, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0080dfffbfff;  op2val:0x2000ffdf20000000
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xffef0080dfffbfff, 0x2000ffdf20000000, x6, 648, x8)

inst_98:
// rs1_h2_val == 8, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0008fffefffb;  op2val:0xfff90006aaaa0100
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xf7ff0008fffefffb, 0xfff90006aaaa0100, x6, 656, x8)

inst_99:
// rs2_h1_val == -65, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fefffdff0080;  op2val:0xdfff0002ffbfffbf
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x02fefffdff0080, 0xdfff0002ffbfffbf, x6, 664, x8)

inst_100:
// rs1_h1_val == 32767, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0002007fffffef;  op2val:0x1000ffdffeff0200
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x0002007fffffef, 0x1000ffdffeff0200, x6, 672, x8)

inst_101:
// rs2_h1_val == -17, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f1000ffbffffe;  op2val:0x40ffbfffef0008
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xff7f1000ffbffffe, 0x40ffbfffef0008, x6, 680, x8)

inst_102:
// rs1_h1_val == -4097, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x068000efff0003;  op2val:0xff7f0006dfff0008
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x068000efff0003, 0xff7f0006dfff0008, x6, 688, x8)

inst_103:
// rs2_h1_val == 256, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaefff0400ffdf;  op2val:0xfffd008001000003
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xaaaaefff0400ffdf, 0xfffd008001000003, x6, 696, x8)

inst_104:
// rs2_h1_val == 128, 
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffe7fff0002;  op2val:0x01efff00800040
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xfffafffe7fff0002, 0x01efff00800040, x6, 704, x8)

inst_105:
// rs1_h1_val == -33, rs1_h2_val == 1
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550001ffdfefff;  op2val:0x3ffffdff0001c000
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x55550001ffdfefff, 0x3ffffdff0001c000, x6, 712, x8)

inst_106:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == -16385, rs1_h3_val == 1, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == -33, rs2_h3_val == -16385, rs2_h2_val == 0
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ffdf00070009;  op2val:0xbfff0000bfff0006
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x01ffdf00070009, 0xbfff0000bfff0006, x6, 720, x8)

inst_107:
// rs2_h3_val == -513, rs1_h2_val == 8192, rs2_h2_val == -5, rs1_h3_val == -8193
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff2000fff9fff8;  op2val:0xfdfffffb0010fffc
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0xdfff2000fff9fff8, 0xfdfffffb0010fffc, x6, 728, x8)

inst_108:
// rs2_h3_val == -3, rs1_h2_val == -1, rs1_h1_val == -65, rs1_h3_val == 16
// opcode: radd16 ; op1:x30; op2:x29; dest:x31; op1val:0x10ffffffbf0003;  op2val:0xfffd0010fffafff8
TEST_RR_OP(radd16, x31, x30, x29, 0x0000000000000000, 0x10ffffffbf0003, 0xfffd0010fffafff8, x6, 736, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 93*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
