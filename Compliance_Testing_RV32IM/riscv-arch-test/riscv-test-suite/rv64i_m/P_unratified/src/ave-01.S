
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ave instruction of the RISC-V RV64PZicsr extension for the ave covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ave)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x13, rs2==x28, rd==x13, rs1_val != rs2_val, rs1_val < 0 and rs2_val < 0, rs1_val == -9, rs2_val == -2199023255553
// opcode: ave ; op1:x13; dest:x13; op1val:-0x9;  op2val:-0x20000000001
TEST_RR_OP(ave, x13, x13, x28, 0x0000000000000000, -0x9, -0x20000000001, x1, 0, x10)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x27, rs2==x7, rd==x4, rs2_val == 9223372036854775807, rs1_val == 1152921504606846976, rs1_val > 0 and rs2_val > 0, rs2_val == (2**(xlen-1)-1)
// opcode: ave ; op1:x27; dest:x4; op1val:0x1000000000000000;  op2val:0x7fffffffffffffff
TEST_RR_OP(ave, x4, x27, x7, 0x0000000000000000, 0x1000000000000000, 0x7fffffffffffffff, x1, 8, x10)

inst_2:
// rs1 == rs2 != rd, rs1==x23, rs2==x23, rd==x18, rs2_val == -4611686018427387905, rs1_val > 0 and rs2_val < 0, rs1_val == 2199023255552
// opcode: ave ; op1:x23; dest:x18; op1val:0x20000000000;  op2val:0x20000000000
TEST_RR_OP(ave, x18, x23, x23, 0x0000000000000000, 0x20000000000, 0x20000000000, x1, 16, x10)

inst_3:
// rs1 == rs2 == rd, rs1==x8, rs2==x8, rd==x8, rs2_val == -2305843009213693953, rs1_val == 8796093022208
// opcode: ave ; op1:x8; dest:x8; op1val:0x80000000000;  op2val:0x80000000000
TEST_RR_OP(ave, x8, x8, x8, 0x0000000000000000, 0x80000000000, 0x80000000000, x1, 24, x10)

inst_4:
// rs2 == rd != rs1, rs1==x28, rs2==x0, rd==x0, rs2_val == -1152921504606846977, rs1_val == 8589934592
// opcode: ave ; op1:x28; dest:x0; op1val:0x200000000;  op2val:0x0
TEST_RR_OP(ave, x0, x28, x0, 0x0000000000000000, 0x200000000, 0x0, x1, 32, x10)

inst_5:
// rs1==x12, rs2==x17, rd==x28, rs2_val == -576460752303423489, 
// opcode: ave ; op1:x12; dest:x28; op1val:0x6666666666666667;  op2val:-0x800000000000001
TEST_RR_OP(ave, x28, x12, x17, 0x0000000000000000, 0x6666666666666667, -0x800000000000001, x1, 40, x10)

inst_6:
// rs1==x3, rs2==x20, rd==x22, rs2_val == -288230376151711745, rs1_val == 16777216
// opcode: ave ; op1:x3; dest:x22; op1val:0x1000000;  op2val:-0x400000000000001
TEST_RR_OP(ave, x22, x3, x20, 0x0000000000000000, 0x1000000, -0x400000000000001, x1, 48, x10)

inst_7:
// rs1==x26, rs2==x4, rd==x5, rs2_val == -144115188075855873, rs1_val == -274877906945
// opcode: ave ; op1:x26; dest:x5; op1val:-0x4000000001;  op2val:-0x200000000000001
TEST_RR_OP(ave, x5, x26, x4, 0x0000000000000000, -0x4000000001, -0x200000000000001, x1, 56, x10)

inst_8:
// rs1==x18, rs2==x14, rd==x2, rs2_val == -72057594037927937, rs1_val == -549755813889
// opcode: ave ; op1:x18; dest:x2; op1val:-0x8000000001;  op2val:-0x100000000000001
TEST_RR_OP(ave, x2, x18, x14, 0x0000000000000000, -0x8000000001, -0x100000000000001, x1, 64, x10)

inst_9:
// rs1==x4, rs2==x5, rd==x31, rs2_val == -36028797018963969, 
// opcode: ave ; op1:x4; dest:x31; op1val:0x6;  op2val:-0x80000000000001
TEST_RR_OP(ave, x31, x4, x5, 0x0000000000000000, 0x6, -0x80000000000001, x1, 72, x10)

inst_10:
// rs1==x2, rs2==x16, rd==x21, rs2_val == -18014398509481985, rs1_val == 0
// opcode: ave ; op1:x2; dest:x21; op1val:0x0;  op2val:-0x40000000000001
TEST_RR_OP(ave, x21, x2, x16, 0x0000000000000000, 0x0, -0x40000000000001, x1, 80, x10)

inst_11:
// rs1==x31, rs2==x6, rd==x25, rs2_val == -9007199254740993, 
// opcode: ave ; op1:x31; dest:x25; op1val:0x3;  op2val:-0x20000000000001
TEST_RR_OP(ave, x25, x31, x6, 0x0000000000000000, 0x3, -0x20000000000001, x1, 88, x10)

inst_12:
// rs1==x0, rs2==x9, rd==x6, rs2_val == -4503599627370497, rs1_val == 576460752303423488
// opcode: ave ; op1:x0; dest:x6; op1val:0x0;  op2val:-0x10000000000001
TEST_RR_OP(ave, x6, x0, x9, 0x0000000000000000, 0x0, -0x10000000000001, x1, 96, x10)

inst_13:
// rs1==x15, rs2==x2, rd==x17, rs2_val == -2251799813685249, rs1_val == 67108864
// opcode: ave ; op1:x15; dest:x17; op1val:0x4000000;  op2val:-0x8000000000001
TEST_RR_OP(ave, x17, x15, x2, 0x0000000000000000, 0x4000000, -0x8000000000001, x1, 104, x10)

inst_14:
// rs1==x21, rs2==x19, rd==x3, rs2_val == -1125899906842625, rs1_val == 9007199254740992
// opcode: ave ; op1:x21; dest:x3; op1val:0x20000000000000;  op2val:-0x4000000000001
TEST_RR_OP(ave, x3, x21, x19, 0x0000000000000000, 0x20000000000000, -0x4000000000001, x1, 112, x10)

inst_15:
// rs1==x16, rs2==x29, rd==x23, rs2_val == -562949953421313, rs1_val == -1025
// opcode: ave ; op1:x16; dest:x23; op1val:-0x401;  op2val:-0x2000000000001
TEST_RR_OP(ave, x23, x16, x29, 0x0000000000000000, -0x401, -0x2000000000001, x1, 120, x10)

inst_16:
// rs1==x22, rs2==x15, rd==x11, rs2_val == -281474976710657, rs1_val == 8
// opcode: ave ; op1:x22; dest:x11; op1val:0x8;  op2val:-0x1000000000001
TEST_RR_OP(ave, x11, x22, x15, 0x0000000000000000, 0x8, -0x1000000000001, x1, 128, x4)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_17:
// rs1==x29, rs2==x12, rd==x26, rs2_val == -140737488355329, rs1_val == 6148914691236517205
// opcode: ave ; op1:x29; dest:x26; op1val:0x5555555555555555;  op2val:-0x800000000001
TEST_RR_OP(ave, x26, x29, x12, 0x0000000000000000, 0x5555555555555555, -0x800000000001, x2, 0, x4)

inst_18:
// rs1==x10, rs2==x31, rd==x9, rs2_val == -70368744177665, rs1_val == -36028797018963969
// opcode: ave ; op1:x10; dest:x9; op1val:-0x80000000000001;  op2val:-0x400000000001
TEST_RR_OP(ave, x9, x10, x31, 0x0000000000000000, -0x80000000000001, -0x400000000001, x2, 8, x4)

inst_19:
// rs1==x11, rs2==x25, rd==x14, rs2_val == -35184372088833, rs1_val == -9223372036854775808, rs1_val == (-2**(xlen-1))
// opcode: ave ; op1:x11; dest:x14; op1val:-0x8000000000000000;  op2val:-0x200000000001
TEST_RR_OP(ave, x14, x11, x25, 0x0000000000000000, -0x8000000000000000, -0x200000000001, x2, 16, x4)

inst_20:
// rs1==x30, rs2==x24, rd==x7, rs2_val == -17592186044417, 
// opcode: ave ; op1:x30; dest:x7; op1val:0x3333333333333333;  op2val:-0x100000000001
TEST_RR_OP(ave, x7, x30, x24, 0x0000000000000000, 0x3333333333333333, -0x100000000001, x2, 24, x4)

inst_21:
// rs1==x17, rs2==x27, rd==x15, rs2_val == -8796093022209, rs1_val == 1024
// opcode: ave ; op1:x17; dest:x15; op1val:0x400;  op2val:-0x80000000001
TEST_RR_OP(ave, x15, x17, x27, 0x0000000000000000, 0x400, -0x80000000001, x2, 32, x4)

inst_22:
// rs1==x5, rs2==x1, rd==x16, rs2_val == -4398046511105, 
// opcode: ave ; op1:x5; dest:x16; op1val:0x6666666666666666;  op2val:-0x40000000001
TEST_RR_OP(ave, x16, x5, x1, 0x0000000000000000, 0x6666666666666666, -0x40000000001, x2, 40, x4)

inst_23:
// rs1==x19, rs2==x30, rd==x1, rs2_val == -1099511627777, rs1_val == 288230376151711744
// opcode: ave ; op1:x19; dest:x1; op1val:0x400000000000000;  op2val:-0x10000000001
TEST_RR_OP(ave, x1, x19, x30, 0x0000000000000000, 0x400000000000000, -0x10000000001, x2, 48, x4)

inst_24:
// rs1==x9, rs2==x18, rd==x20, rs2_val == -549755813889, rs1_val == -2097153
// opcode: ave ; op1:x9; dest:x20; op1val:-0x200001;  op2val:-0x8000000001
TEST_RR_OP(ave, x20, x9, x18, 0x0000000000000000, -0x200001, -0x8000000001, x2, 56, x4)

inst_25:
// rs1==x20, rs2==x10, rd==x30, rs2_val == -274877906945, 
// opcode: ave ; op1:x20; dest:x30; op1val:0xb504f332;  op2val:-0x4000000001
TEST_RR_OP(ave, x30, x20, x10, 0x0000000000000000, 0xb504f332, -0x4000000001, x2, 64, x4)

inst_26:
// rs1==x24, rs2==x22, rd==x10, rs2_val == -137438953473, rs1_val == 8192
// opcode: ave ; op1:x24; dest:x10; op1val:0x2000;  op2val:-0x2000000001
TEST_RR_OP(ave, x10, x24, x22, 0x0000000000000000, 0x2000, -0x2000000001, x2, 72, x4)

inst_27:
// rs1==x6, rs2==x13, rd==x29, rs2_val == -68719476737, 
// opcode: ave ; op1:x6; dest:x29; op1val:0x6666666666666666;  op2val:-0x1000000001
TEST_RR_OP(ave, x29, x6, x13, 0x0000000000000000, 0x6666666666666666, -0x1000000001, x2, 80, x4)

inst_28:
// rs1==x1, rs2==x21, rd==x19, rs2_val == -34359738369, 
// opcode: ave ; op1:x1; dest:x19; op1val:0x3;  op2val:-0x800000001
TEST_RR_OP(ave, x19, x1, x21, 0x0000000000000000, 0x3, -0x800000001, x2, 88, x4)

inst_29:
// rs1==x7, rs2==x3, rd==x24, rs2_val == -17179869185, 
// opcode: ave ; op1:x7; dest:x24; op1val:-0x1;  op2val:-0x400000001
TEST_RR_OP(ave, x24, x7, x3, 0x0000000000000000, -0x1, -0x400000001, x2, 96, x4)

inst_30:
// rs1==x14, rs2==x26, rd==x27, rs2_val == -8589934593, 
// opcode: ave ; op1:x14; dest:x27; op1val:0x800000000000000;  op2val:-0x200000001
TEST_RR_OP(ave, x27, x14, x26, 0x0000000000000000, 0x800000000000000, -0x200000001, x2, 104, x1)

inst_31:
// rs1==x25, rs2==x11, rd==x12, rs2_val == -4294967297, rs1_val == -16385
// opcode: ave ; op1:x25; dest:x12; op1val:-0x4001;  op2val:-0x100000001
TEST_RR_OP(ave, x12, x25, x11, 0x0000000000000000, -0x4001, -0x100000001, x2, 112, x1)

inst_32:
// rs2_val == -2147483649, 
// opcode: ave ; op1:x30; dest:x31; op1val:0xb504f334;  op2val:-0x80000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0xb504f334, -0x80000001, x2, 120, x1)

inst_33:
// rs2_val == -1073741825, 
// opcode: ave ; op1:x30; dest:x31; op1val:0xb504f334;  op2val:-0x40000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0xb504f334, -0x40000001, x2, 128, x1)

inst_34:
// rs2_val == -536870913, rs1_val == -1099511627777
// opcode: ave ; op1:x30; dest:x31; op1val:-0x10000000001;  op2val:-0x20000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x10000000001, -0x20000001, x2, 136, x1)

inst_35:
// rs2_val == -268435457, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x3333333333333334;  op2val:-0x10000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, -0x10000001, x2, 144, x1)

inst_36:
// rs2_val == -134217729, rs1_val == 4503599627370496
// opcode: ave ; op1:x30; dest:x31; op1val:0x10000000000000;  op2val:-0x8000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x10000000000000, -0x8000001, x2, 152, x1)

inst_37:
// rs2_val == -67108865, rs1_val == -4398046511105
// opcode: ave ; op1:x30; dest:x31; op1val:-0x40000000001;  op2val:-0x4000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x40000000001, -0x4000001, x2, 160, x1)

inst_38:
// rs2_val == -33554433, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x3333333333333334;  op2val:-0x2000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, -0x2000001, x2, 168, x1)

inst_39:
// rs2_val == -16777217, 
// opcode: ave ; op1:x30; dest:x31; op1val:0xb504f334;  op2val:-0x1000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0xb504f334, -0x1000001, x2, 176, x1)

inst_40:
// rs2_val == -8388609, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x10000000000000;  op2val:-0x800001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x10000000000000, -0x800001, x2, 184, x1)

inst_41:
// rs2_val == -4194305, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x5555555555555554;  op2val:-0x400001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, -0x400001, x2, 192, x1)

inst_42:
// rs2_val == -2097153, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x3;  op2val:-0x200001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x3, -0x200001, x2, 200, x1)

inst_43:
// rs2_val == -1048577, rs1_val == -131073
// opcode: ave ; op1:x30; dest:x31; op1val:-0x20001;  op2val:-0x100001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x20001, -0x100001, x2, 208, x1)

inst_44:
// rs2_val == -524289, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x9;  op2val:-0x80001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x9, -0x80001, x2, 216, x1)

inst_45:
// rs2_val == -262145, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x2000;  op2val:-0x40001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x2000, -0x40001, x2, 224, x1)

inst_46:
// rs2_val == -131073, rs1_val == 4
// opcode: ave ; op1:x30; dest:x31; op1val:0x4;  op2val:-0x20001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x4, -0x20001, x2, 232, x1)

inst_47:
// rs2_val == -65537, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0xb504f333;  op2val:-0x10001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0xb504f333, -0x10001, x2, 240, x1)

inst_48:
// rs2_val == -32769, rs1_val == -9007199254740993
// opcode: ave ; op1:x30; dest:x31; op1val:-0x20000000000001;  op2val:-0x8001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x20000000000001, -0x8001, x2, 248, x1)

inst_49:
// rs2_val == -16385, rs1_val == 128
// opcode: ave ; op1:x30; dest:x31; op1val:0x80;  op2val:-0x4001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x80, -0x4001, x2, 256, x1)

inst_50:
// rs2_val == -8193, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x8;  op2val:-0x2001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x8, -0x2001, x2, 264, x1)

inst_51:
// rs2_val == -4097, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0xb504f332;  op2val:-0x1001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0xb504f332, -0x1001, x2, 272, x1)

inst_52:
// rs2_val == -2049, rs1_val == 4398046511104
// opcode: ave ; op1:x30; dest:x31; op1val:0x40000000000;  op2val:-0x801
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x40000000000, -0x801, x2, 280, x1)

inst_53:
// rs2_val == -1025, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x20000000000001;  op2val:-0x401
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x20000000000001, -0x401, x2, 288, x1)

inst_54:
// rs2_val == -513, rs1_val == -4294967297
// opcode: ave ; op1:x30; dest:x31; op1val:-0x100000001;  op2val:-0x201
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x100000001, -0x201, x2, 296, x1)

inst_55:
// rs2_val == -257, rs1_val == 2097152
// opcode: ave ; op1:x30; dest:x31; op1val:0x200000;  op2val:-0x101
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x200000, -0x101, x2, 304, x1)

inst_56:
// rs2_val == -129, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x5555555555555554;  op2val:-0x81
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, -0x81, x2, 312, x1)

inst_57:
// rs2_val == -65, rs1_val == -8589934593
// opcode: ave ; op1:x30; dest:x31; op1val:-0x200000001;  op2val:-0x41
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x200000001, -0x41, x2, 320, x1)

inst_58:
// rs2_val == -33, rs1_val == -2049
// opcode: ave ; op1:x30; dest:x31; op1val:-0x801;  op2val:-0x21
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x801, -0x21, x2, 328, x1)

inst_59:
// rs2_val == -17, rs1_val == -65
// opcode: ave ; op1:x30; dest:x31; op1val:-0x41;  op2val:-0x11
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x41, -0x11, x2, 336, x1)

inst_60:
// rs2_val == -9, rs1_val == 32
// opcode: ave ; op1:x30; dest:x31; op1val:0x20;  op2val:-0x9
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x20, -0x9, x2, 344, x1)

inst_61:
// rs2_val == -5, rs1_val == 2
// opcode: ave ; op1:x30; dest:x31; op1val:0x2;  op2val:-0x5
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x2, -0x5, x2, 352, x1)

inst_62:
// rs2_val == -3, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x4;  op2val:-0x3
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x4, -0x3, x2, 360, x1)

inst_63:
// rs2_val == -2, rs1_val == 65536
// opcode: ave ; op1:x30; dest:x31; op1val:0x10000;  op2val:-0x2
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x10000, -0x2, x2, 368, x1)

inst_64:
// rs1_val == 9223372036854775807, rs1_val == (2**(xlen-1)-1), rs2_val == 1125899906842624
// opcode: ave ; op1:x30; dest:x31; op1val:0x7fffffffffffffff;  op2val:0x4000000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffffff, 0x4000000000000, x2, 376, x1)

inst_65:
// rs1_val == -4611686018427387905, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x4000000000000001;  op2val:-0x4000000000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x4000000000000001, -0x4000000000000000, x2, 384, x1)

inst_66:
// rs1_val == -2305843009213693953, rs1_val < 0 and rs2_val > 0
// opcode: ave ; op1:x30; dest:x31; op1val:-0x2000000000000001;  op2val:0x9
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x2000000000000001, 0x9, x2, 392, x1)

inst_67:
// rs1_val == -1152921504606846977, rs2_val == 268435456
// opcode: ave ; op1:x30; dest:x31; op1val:-0x1000000000000001;  op2val:0x10000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x1000000000000001, 0x10000000, x2, 400, x1)

inst_68:
// rs1_val == -576460752303423489, rs2_val == 140737488355328
// opcode: ave ; op1:x30; dest:x31; op1val:-0x800000000000001;  op2val:0x800000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x800000000000001, 0x800000000000, x2, 408, x1)

inst_69:
// rs1_val == -288230376151711745, rs2_val == 1048576
// opcode: ave ; op1:x30; dest:x31; op1val:-0x400000000000001;  op2val:0x100000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x400000000000001, 0x100000, x2, 416, x1)

inst_70:
// rs1_val == -144115188075855873, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x200000000000001;  op2val:-0x5
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x200000000000001, -0x5, x2, 424, x1)

inst_71:
// rs1_val == -72057594037927937, rs2_val == 1024
// opcode: ave ; op1:x30; dest:x31; op1val:-0x100000000000001;  op2val:0x400
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x100000000000001, 0x400, x2, 432, x1)

inst_72:
// rs1_val == -18014398509481985, rs2_val == 131072
// opcode: ave ; op1:x30; dest:x31; op1val:-0x40000000000001;  op2val:0x20000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x40000000000001, 0x20000, x2, 440, x1)

inst_73:
// rs1_val == -4503599627370497, rs2_val == 33554432
// opcode: ave ; op1:x30; dest:x31; op1val:-0x10000000000001;  op2val:0x2000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x10000000000001, 0x2000000, x2, 448, x1)

inst_74:
// rs1_val == -2251799813685249, rs2_val == 536870912
// opcode: ave ; op1:x30; dest:x31; op1val:-0x8000000000001;  op2val:0x20000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x8000000000001, 0x20000000, x2, 456, x1)

inst_75:
// rs1_val == -1125899906842625, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x4000000000001;  op2val:0x20000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x4000000000001, 0x20000, x2, 464, x1)

inst_76:
// rs1_val == -562949953421313, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x2000000000001;  op2val:-0x40000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x2000000000001, -0x40000001, x2, 472, x1)

inst_77:
// rs1_val == -281474976710657, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x1000000000001;  op2val:-0x10000000000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x1000000000001, -0x10000000000001, x2, 480, x1)

inst_78:
// rs1_val == -140737488355329, rs2_val == 4096
// opcode: ave ; op1:x30; dest:x31; op1val:-0x800000000001;  op2val:0x1000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x800000000001, 0x1000, x2, 488, x1)

inst_79:
// rs1_val == -70368744177665, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x400000000001;  op2val:-0x10000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x400000000001, -0x10000001, x2, 496, x1)

inst_80:
// rs1_val == -35184372088833, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x200000000001;  op2val:0x20000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x200000000001, 0x20000000, x2, 504, x1)

inst_81:
// rs1_val == -17592186044417, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x100000000001;  op2val:-0xb504f332
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x100000000001, -0xb504f332, x2, 512, x1)

inst_82:
// rs1_val == -8796093022209, rs2_val == 2305843009213693952
// opcode: ave ; op1:x30; dest:x31; op1val:-0x80000000001;  op2val:0x2000000000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x80000000001, 0x2000000000000000, x2, 520, x1)

inst_83:
// rs1_val == -2199023255553, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x20000000001;  op2val:-0x2000000000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x20000000001, -0x2000000000001, x2, 528, x1)

inst_84:
// rs1_val == -137438953473, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x2000000001;  op2val:-0x80000000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x2000000001, -0x80000000001, x2, 536, x1)

inst_85:
// rs1_val == -68719476737, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x1000000001;  op2val:-0x4
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x1000000001, -0x4, x2, 544, x1)

inst_86:
// rs1_val == -34359738369, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x800000001;  op2val:-0x1000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x800000001, -0x1000001, x2, 552, x1)

inst_87:
// rs1_val == -17179869185, rs2_val == 18014398509481984
// opcode: ave ; op1:x30; dest:x31; op1val:-0x400000001;  op2val:0x40000000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x400000001, 0x40000000000000, x2, 560, x1)

inst_88:
// rs1_val == -2147483649, rs2_val == 9007199254740992
// opcode: ave ; op1:x30; dest:x31; op1val:-0x80000001;  op2val:0x20000000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x80000001, 0x20000000000000, x2, 568, x1)

inst_89:
// rs1_val == 1, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x1;  op2val:-0x1001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x1, -0x1001, x2, 576, x1)

inst_90:
// rs2_val == -6148914691236517206, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x80;  op2val:-0x5555555555555556
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x80, -0x5555555555555556, x2, 584, x1)

inst_91:
// rs2_val == 6148914691236517205, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x6666666666666667;  op2val:0x5555555555555555
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x5555555555555555, x2, 592, x1)

inst_92:
// rs1_val == -6148914691236517206, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x5555555555555556;  op2val:0x800000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, 0x800000000000, x2, 600, x1)

inst_93:
// rs1_val == rs2_val, rs2_val == 576460752303423488
// opcode: ave ; op1:x30; dest:x31; op1val:0x800000000000000;  op2val:0x800000000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x800000000000000, 0x800000000000000, x2, 608, x1)

inst_94:
// rs2_val == (-2**(xlen-1)), rs2_val == -9223372036854775808
// opcode: ave ; op1:x30; dest:x31; op1val:0xb504f332;  op2val:-0x8000000000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0xb504f332, -0x8000000000000000, x2, 616, x1)

inst_95:
// rs2_val == 0, rs1_val == 562949953421312
// opcode: ave ; op1:x30; dest:x31; op1val:0x2000000000000;  op2val:0x0
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x2000000000000, 0x0, x2, 624, x1)

inst_96:
// rs1_val == -1073741825, rs2_val == 8796093022208
// opcode: ave ; op1:x30; dest:x31; op1val:-0x40000001;  op2val:0x80000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x40000001, 0x80000000000, x2, 632, x1)

inst_97:
// rs1_val == -536870913, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x20000001;  op2val:-0x10000000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x20000001, -0x10000000001, x2, 640, x1)

inst_98:
// rs1_val == -268435457, rs2_val == 8589934592
// opcode: ave ; op1:x30; dest:x31; op1val:-0x10000001;  op2val:0x200000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x10000001, 0x200000000, x2, 648, x1)

inst_99:
// rs1_val == -134217729, rs2_val == 8388608
// opcode: ave ; op1:x30; dest:x31; op1val:-0x8000001;  op2val:0x800000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x8000001, 0x800000, x2, 656, x1)

inst_100:
// rs1_val == -67108865, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x4000001;  op2val:-0x41
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x4000001, -0x41, x2, 664, x1)

inst_101:
// rs1_val == -33554433, rs2_val == 2097152
// opcode: ave ; op1:x30; dest:x31; op1val:-0x2000001;  op2val:0x200000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x2000001, 0x200000, x2, 672, x1)

inst_102:
// rs1_val == -16777217, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x1000001;  op2val:0xb504f332
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x1000001, 0xb504f332, x2, 680, x1)

inst_103:
// rs1_val == -8388609, rs2_val == 144115188075855872
// opcode: ave ; op1:x30; dest:x31; op1val:-0x800001;  op2val:0x200000000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x800001, 0x200000000000000, x2, 688, x1)

inst_104:
// rs1_val == -4194305, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x400001;  op2val:-0x8000000000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x400001, -0x8000000000000000, x2, 696, x1)

inst_105:
// rs1_val == -1048577, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x100001;  op2val:0x100000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x100001, 0x100000, x2, 704, x1)

inst_106:
// rs1_val == -524289, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x80001;  op2val:0x2000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x80001, 0x2000000, x2, 712, x1)

inst_107:
// rs1_val == -262145, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x40001;  op2val:0x3333333333333332
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x40001, 0x3333333333333332, x2, 720, x1)

inst_108:
// rs1_val == -65537, rs2_val == 2048
// opcode: ave ; op1:x30; dest:x31; op1val:-0x10001;  op2val:0x800
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x10001, 0x800, x2, 728, x1)

inst_109:
// rs1_val == -32769, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x8001;  op2val:-0x7
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x8001, -0x7, x2, 736, x1)

inst_110:
// rs1_val == -8193, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x2001;  op2val:-0x4000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x2001, -0x4000001, x2, 744, x1)

inst_111:
// rs1_val == -4097, rs2_val == 281474976710656
// opcode: ave ; op1:x30; dest:x31; op1val:-0x1001;  op2val:0x1000000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x1001, 0x1000000000000, x2, 752, x1)

inst_112:
// rs1_val == -513, rs2_val == 4
// opcode: ave ; op1:x30; dest:x31; op1val:-0x201;  op2val:0x4
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x201, 0x4, x2, 760, x1)

inst_113:
// rs1_val == -257, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x101;  op2val:0x400
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x101, 0x400, x2, 768, x1)

inst_114:
// rs1_val == -129, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x81;  op2val:0xb504f333
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x81, 0xb504f333, x2, 776, x1)

inst_115:
// rs1_val == -33, rs2_val == 32768
// opcode: ave ; op1:x30; dest:x31; op1val:-0x21;  op2val:0x8000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x21, 0x8000, x2, 784, x1)

inst_116:
// rs1_val == -17, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x11;  op2val:-0x20000000000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x11, -0x20000000000001, x2, 792, x1)

inst_117:
// rs1_val == -5, rs2_val == 34359738368
// opcode: ave ; op1:x30; dest:x31; op1val:-0x5;  op2val:0x800000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x5, 0x800000000, x2, 800, x1)

inst_118:
// rs1_val == -3, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x3;  op2val:-0x5
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x3, -0x5, x2, 808, x1)

inst_119:
// rs1_val == -2, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x2;  op2val:0x100000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x2, 0x100000, x2, 816, x1)

inst_120:
// rs2_val == 4611686018427387904, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0xa;  op2val:0x4000000000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0xa, 0x4000000000000000, x2, 824, x1)

inst_121:
// rs2_val == 1152921504606846976, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x3333333333333332;  op2val:0x1000000000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x1000000000000000, x2, 832, x1)

inst_122:
// rs2_val == 288230376151711744, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x4;  op2val:0x400000000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x4, 0x400000000000000, x2, 840, x1)

inst_123:
// rs2_val == 72057594037927936, rs1_val == 549755813888
// opcode: ave ; op1:x30; dest:x31; op1val:0x8000000000;  op2val:0x100000000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x8000000000, 0x100000000000000, x2, 848, x1)

inst_124:
// rs2_val == 36028797018963968, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x5555555555555556;  op2val:0x80000000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, 0x80000000000000, x2, 856, x1)

inst_125:
// rs2_val == 4503599627370496, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x5555555555555555;  op2val:0x10000000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, 0x10000000000000, x2, 864, x1)

inst_126:
// rs2_val == 2251799813685248, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x9;  op2val:0x8000000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x9, 0x8000000000000, x2, 872, x1)

inst_127:
// rs2_val == 562949953421312, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x1000000001;  op2val:0x2000000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x1000000001, 0x2000000000000, x2, 880, x1)

inst_128:
// rs2_val == 70368744177664, 
// opcode: ave ; op1:x30; dest:x31; op1val:0xb504f333;  op2val:0x400000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0xb504f333, 0x400000000000, x2, 888, x1)

inst_129:
// rs2_val == 35184372088832, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x4000000000000000;  op2val:0x200000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x4000000000000000, 0x200000000000, x2, 896, x1)

inst_130:
// rs2_val == 17592186044416, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x40000001;  op2val:0x100000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x40000001, 0x100000000000, x2, 904, x1)

inst_131:
// rs2_val == 4398046511104, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x20000000000001;  op2val:0x40000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x20000000000001, 0x40000000000, x2, 912, x1)

inst_132:
// rs2_val == 2199023255552, rs1_val == 536870912
// opcode: ave ; op1:x30; dest:x31; op1val:0x20000000;  op2val:0x20000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x20000000, 0x20000000000, x2, 920, x1)

inst_133:
// rs2_val == 1099511627776, rs1_val == 137438953472
// opcode: ave ; op1:x30; dest:x31; op1val:0x2000000000;  op2val:0x10000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x2000000000, 0x10000000000, x2, 928, x1)

inst_134:
// rs2_val == 549755813888, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x0;  op2val:0x8000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x0, 0x8000000000, x2, 936, x1)

inst_135:
// rs2_val == 274877906944, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x800000001;  op2val:0x4000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x800000001, 0x4000000000, x2, 944, x1)

inst_136:
// rs2_val == 137438953472, rs1_val == 18014398509481984
// opcode: ave ; op1:x30; dest:x31; op1val:0x40000000000000;  op2val:0x2000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x40000000000000, 0x2000000000, x2, 952, x1)

inst_137:
// rs2_val == 68719476736, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x0;  op2val:0x1000000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x0, 0x1000000000, x2, 960, x1)

inst_138:
// rs2_val == 17179869184, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x1000000;  op2val:0x400000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x1000000, 0x400000000, x2, 968, x1)

inst_139:
// rs2_val == 4294967296, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x1000001;  op2val:0x100000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x1000001, 0x100000000, x2, 976, x1)

inst_140:
// rs2_val == 2147483648, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x200000000;  op2val:0x80000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x200000000, 0x80000000, x2, 984, x1)

inst_141:
// rs2_val == 1073741824, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x10000;  op2val:0x40000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x10000, 0x40000000, x2, 992, x1)

inst_142:
// rs2_val == 134217728, rs1_val == 262144
// opcode: ave ; op1:x30; dest:x31; op1val:0x40000;  op2val:0x8000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x40000, 0x8000000, x2, 1000, x1)

inst_143:
// rs2_val == 67108864, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x80000000001;  op2val:0x4000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x80000000001, 0x4000000, x2, 1008, x1)

inst_144:
// rs2_val == 16777216, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x2000000000000;  op2val:0x1000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x2000000000000, 0x1000000, x2, 1016, x1)

inst_145:
// rs2_val == 4194304, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x0;  op2val:0x400000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x0, 0x400000, x2, 1024, x1)

inst_146:
// rs2_val == 524288, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x2000000000;  op2val:0x80000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x2000000000, 0x80000, x2, 1032, x1)

inst_147:
// rs2_val == 262144, rs1_val == 72057594037927936
// opcode: ave ; op1:x30; dest:x31; op1val:0x100000000000000;  op2val:0x40000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x100000000000000, 0x40000, x2, 1040, x1)

inst_148:
// rs2_val == 65536, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x8000000001;  op2val:0x10000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x8000000001, 0x10000, x2, 1048, x1)

inst_149:
// rs2_val == 16384, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x100000000000000;  op2val:0x4000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x100000000000000, 0x4000, x2, 1056, x1)

inst_150:
// rs2_val == 8192, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x40001;  op2val:0x2000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x40001, 0x2000, x2, 1064, x1)

inst_151:
// rs2_val == 512, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x3333333333333334;  op2val:0x200
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x200, x2, 1072, x1)

inst_152:
// rs2_val == 256, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x3;  op2val:0x100
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x3, 0x100, x2, 1080, x1)

inst_153:
// rs2_val == 128, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x80000000000001;  op2val:0x80
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x80000000000001, 0x80, x2, 1088, x1)

inst_154:
// rs2_val == 64, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x200000000001;  op2val:0x40
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x200000000001, 0x40, x2, 1096, x1)

inst_155:
// rs2_val == 32, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x40001;  op2val:0x20
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x40001, 0x20, x2, 1104, x1)

inst_156:
// rs2_val == 16, 
// opcode: ave ; op1:x30; dest:x31; op1val:-0x80001;  op2val:0x10
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, -0x80001, 0x10, x2, 1112, x1)

inst_157:
// rs2_val == 8, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x800000000000000;  op2val:0x8
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x800000000000000, 0x8, x2, 1120, x1)

inst_158:
// rs2_val == 2, rs1_val == 2147483648
// opcode: ave ; op1:x30; dest:x31; op1val:0x80000000;  op2val:0x2
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x80000000, 0x2, x2, 1128, x1)

inst_159:
// rs2_val == 1, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x2000000000000;  op2val:0x1
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x2000000000000, 0x1, x2, 1136, x1)

inst_160:
// rs1_val == 4611686018427387904, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x4000000000000000;  op2val:0x400
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x4000000000000000, 0x400, x2, 1144, x1)

inst_161:
// rs1_val == 2305843009213693952, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x2000000000000000;  op2val:0x5
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x2000000000000000, 0x5, x2, 1152, x1)

inst_162:
// rs1_val == 144115188075855872, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x200000000000000;  op2val:-0x3
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x200000000000000, -0x3, x2, 1160, x1)

inst_163:
// rs1_val == 36028797018963968, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x80000000000000;  op2val:-0x5555555555555556
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x80000000000000, -0x5555555555555556, x2, 1168, x1)

inst_164:
// rs1_val == 2251799813685248, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x8000000000000;  op2val:-0x5555555555555555
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x8000000000000, -0x5555555555555555, x2, 1176, x1)

inst_165:
// rs1_val == 1125899906842624, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x4000000000000;  op2val:-0x20000000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x4000000000000, -0x20000000001, x2, 1184, x1)

inst_166:
// rs1_val == 281474976710656, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x1000000000000;  op2val:0x3333333333333334
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x1000000000000, 0x3333333333333334, x2, 1192, x1)

inst_167:
// rs1_val == 140737488355328, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x800000000000;  op2val:0x6666666666666665
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x800000000000, 0x6666666666666665, x2, 1200, x1)

inst_168:
// rs1_val == 70368744177664, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x400000000000;  op2val:-0x2
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x400000000000, -0x2, x2, 1208, x1)

inst_169:
// rs1_val == 35184372088832, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x200000000000;  op2val:-0x101
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x200000000000, -0x101, x2, 1216, x1)

inst_170:
// rs1_val == 17592186044416, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x100000000000;  op2val:0x7fffffffffffffff
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x100000000000, 0x7fffffffffffffff, x2, 1224, x1)

inst_171:
// rs1_val == 1099511627776, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x10000000000;  op2val:0x5555555555555554
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x10000000000, 0x5555555555555554, x2, 1232, x1)

inst_172:
// rs1_val == 274877906944, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x4000000000;  op2val:0x5
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x4000000000, 0x5, x2, 1240, x1)

inst_173:
// rs1_val == 68719476736, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x1000000000;  op2val:0x40000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x1000000000, 0x40000000, x2, 1248, x1)

inst_174:
// rs1_val == 34359738368, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x800000000;  op2val:-0x2000000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x800000000, -0x2000000001, x2, 1256, x1)

inst_175:
// rs1_val == 17179869184, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x400000000;  op2val:0x10000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x400000000, 0x10000, x2, 1264, x1)

inst_176:
// rs1_val == 4294967296, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x100000000;  op2val:0x80000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x100000000, 0x80000, x2, 1272, x1)

inst_177:
// rs1_val == 1073741824, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x40000000;  op2val:0x4000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x40000000, 0x4000, x2, 1280, x1)

inst_178:
// rs1_val == 268435456, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x10000000;  op2val:0x0
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x10000000, 0x0, x2, 1288, x1)

inst_179:
// rs1_val == 134217728, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x8000000;  op2val:0x40000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x8000000, 0x40000000, x2, 1296, x1)

inst_180:
// rs1_val == 33554432, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x2000000;  op2val:-0x1000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x2000000, -0x1000001, x2, 1304, x1)

inst_181:
// rs1_val == 8388608, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x800000;  op2val:-0x1
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x800000, -0x1, x2, 1312, x1)

inst_182:
// rs1_val == 4194304, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x400000;  op2val:0xb504f334
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x400000, 0xb504f334, x2, 1320, x1)

inst_183:
// rs1_val == 1048576, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x100000;  op2val:0x10000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x100000, 0x10000, x2, 1328, x1)

inst_184:
// rs1_val == 524288, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x80000;  op2val:0x80000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x80000, 0x80000000, x2, 1336, x1)

inst_185:
// rs1_val == 131072, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x20000;  op2val:0x3333333333333334
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x20000, 0x3333333333333334, x2, 1344, x1)

inst_186:
// rs1_val == 32768, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x8000;  op2val:-0x4000000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x8000, -0x4000000001, x2, 1352, x1)

inst_187:
// rs1_val == 16384, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x4000;  op2val:-0x100000000000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x4000, -0x100000000000001, x2, 1360, x1)

inst_188:
// rs1_val == 4096, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x1000;  op2val:0x200
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x1000, 0x200, x2, 1368, x1)

inst_189:
// rs1_val == 2048, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x800;  op2val:0x2
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x800, 0x2, x2, 1376, x1)

inst_190:
// rs1_val == 256, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x100;  op2val:0x1000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x100, 0x1000, x2, 1384, x1)

inst_191:
// rs1_val == 64, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x40;  op2val:0x10000000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x40, 0x10000000, x2, 1392, x1)

inst_192:
// rs1_val == 16, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x10;  op2val:-0x81
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x10, -0x81, x2, 1400, x1)

inst_193:
// rs1_val == 512, 
// opcode: ave ; op1:x30; dest:x31; op1val:0x200;  op2val:0x800000
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x200, 0x800000, x2, 1408, x1)

inst_194:
// rs2_val == -4611686018427387905, rs1_val > 0 and rs2_val < 0, rs1_val == 2199023255552
// opcode: ave ; op1:x30; dest:x31; op1val:0x20000000000;  op2val:-0x4000000000000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x20000000000, -0x4000000000000001, x2, 1416, x1)

inst_195:
// rs2_val == -2305843009213693953, rs1_val == 8796093022208
// opcode: ave ; op1:x30; dest:x31; op1val:0x80000000000;  op2val:-0x2000000000000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x80000000000, -0x2000000000000001, x2, 1424, x1)

inst_196:
// rs2_val == -1152921504606846977, rs1_val == 8589934592
// opcode: ave ; op1:x30; dest:x31; op1val:0x200000000;  op2val:-0x1000000000000001
TEST_RR_OP(ave, x31, x30, x29, 0x0000000000000000, 0x200000000, -0x1000000000000001, x2, 1432, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 180*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
