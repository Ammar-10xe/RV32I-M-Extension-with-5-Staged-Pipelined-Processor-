
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the zunpkd831 instruction of the RISC-V RV64PZicsr extension for the zunpkd831 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",zunpkd831)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x17,signature_x17_1)

inst_0:
// rs1==x3, rd==x8, rs1_b0_val == 0, rs1_b2_val == 191, rs1_b1_val == 254
// opcode: zunpkd831 ; op1:x3; dest:x8; op1val:0x60d120c0cbffe00;
TEST_RD_OP( zunpkd831, x8, x3, 0x0000000000000000, 0x60d120c0cbffe00, x17, 0, x20)

inst_1:
// rs1==x27, rd==x9, rs1_b7_val == 170, rs1_b6_val == 64, rs1_b3_val == 251, rs1_b5_val == 239
// opcode: zunpkd831 ; op1:x27; dest:x9; op1val:0xaa40ef0ffb0b0b03;
TEST_RD_OP( zunpkd831, x9, x27, 0x0000000000000000, 0xaa40ef0ffb0b0b03, x17, 8, x20)

inst_2:
// rs1==x19, rd==x13, rs1_b7_val == 85, rs1_b4_val == 64, rs1_b2_val == 251, rs1_b5_val == 247, rs1_b1_val == 170, rs1_b6_val == 251, rs1_b0_val == 1
// opcode: zunpkd831 ; op1:x19; dest:x13; op1val:0x55fbf7400afbaa01;
TEST_RD_OP( zunpkd831, x13, x19, 0x0000000000000000, 0x55fbf7400afbaa01, x17, 16, x20)

inst_3:
// rs1==x2, rd==x1, rs1_b7_val == 127, rs1_b2_val == 64, rs1_b4_val == 32, rs1_b0_val == 8, rs1_b5_val == 64
// opcode: zunpkd831 ; op1:x2; dest:x1; op1val:0x7f054020fb400308;
TEST_RD_OP( zunpkd831, x1, x2, 0x0000000000000000, 0x7f054020fb400308, x17, 24, x20)

inst_4:
// rs1==x22, rd==x25, rs1_b7_val == 191, rs1_b1_val == 255, rs1_b4_val == 251, rs1_b2_val == 170, rs1_b3_val == 16
// opcode: zunpkd831 ; op1:x22; dest:x25; op1val:0xbf0505fb10aaff05;
TEST_RD_OP( zunpkd831, x25, x22, 0x0000000000000000, 0xbf0505fb10aaff05, x17, 32, x20)

inst_5:
// rs1==x1, rd==x4, rs1_b7_val == 223, rs1_b3_val == 1, rs1_b1_val == 223, rs1_b6_val == 2
// opcode: zunpkd831 ; op1:x1; dest:x4; op1val:0xdf0205030113df06;
TEST_RD_OP( zunpkd831, x4, x1, 0x0000000000000000, 0xdf0205030113df06, x17, 40, x20)

inst_6:
// rs1==x10, rd==x31, rs1_b7_val == 239, rs1_b0_val == 16, rs1_b2_val == 253
// opcode: zunpkd831 ; op1:x10; dest:x31; op1val:0xef020dfb13fd0610;
TEST_RD_OP( zunpkd831, x31, x10, 0x0000000000000000, 0xef020dfb13fd0610, x17, 48, x20)

inst_7:
// rs1==x15, rd==x0, rs1_b7_val == 247, rs1_b6_val == 239, rs1_b2_val == 8, rs1_b3_val == 254, rs1_b4_val == 255
// opcode: zunpkd831 ; op1:x15; dest:x0; op1val:0xf7ef03fffe08ff12;
TEST_RD_OP( zunpkd831, x0, x15, 0x0000000000000000, 0xf7ef03fffe08ff12, x17, 56, x20)

inst_8:
// rs1==x14, rd==x16, rs1_b7_val == 251, rs1_b0_val == 128, rs1_b3_val == 127, rs1_b6_val == 253, rs1_b1_val == 8
// opcode: zunpkd831 ; op1:x14; dest:x16; op1val:0xfbfd0b0c7f0b0880;
TEST_RD_OP( zunpkd831, x16, x14, 0x0000000000000000, 0xfbfd0b0c7f0b0880, x17, 64, x20)

inst_9:
// rs1==x26, rd==x7, rs1_b7_val == 253, rs1_b1_val == 2, rs1_b5_val == 191
// opcode: zunpkd831 ; op1:x26; dest:x7; op1val:0xfd09bf0507fd0200;
TEST_RD_OP( zunpkd831, x7, x26, 0x0000000000000000, 0xfd09bf0507fd0200, x17, 72, x20)

inst_10:
// rs1==x30, rd==x23, rs1_b7_val == 254, rs1_b6_val == 223
// opcode: zunpkd831 ; op1:x30; dest:x23; op1val:0xfedf071211401109;
TEST_RD_OP( zunpkd831, x23, x30, 0x0000000000000000, 0xfedf071211401109, x17, 80, x20)

inst_11:
// rs1==x0, rd==x28, rs1_b7_val == 128, rs1_b5_val == 2, rs1_b3_val == 128, rs1_b6_val == 247, rs1_b1_val == 239
// opcode: zunpkd831 ; op1:x0; dest:x28; op1val:0x80f702fb8040ef09;
TEST_RD_OP( zunpkd831, x28, x0, 0x0000000000000000, 0x80f702fb8040ef09, x17, 88, x20)

inst_12:
// rs1==x18, rd==x10, rs1_b7_val == 64, rs1_b1_val == 251, rs1_b5_val == 254
// opcode: zunpkd831 ; op1:x18; dest:x10; op1val:0x40dffe090906fb0a;
TEST_RD_OP( zunpkd831, x10, x18, 0x0000000000000000, 0x40dffe090906fb0a, x17, 96, x20)

inst_13:
// rs1==x28, rd==x15, rs1_b7_val == 32, rs1_b3_val == 64, rs1_b0_val == 127
// opcode: zunpkd831 ; op1:x28; dest:x15; op1val:0x20094011400d077f;
TEST_RD_OP( zunpkd831, x15, x28, 0x0000000000000000, 0x20094011400d077f, x17, 104, x20)

inst_14:
// rs1==x29, rd==x27, rs1_b7_val == 16, rs1_b0_val == 251, rs1_b4_val == 170
// opcode: zunpkd831 ; op1:x29; dest:x27; op1val:0x10fb06aa010b0afb;
TEST_RD_OP( zunpkd831, x27, x29, 0x0000000000000000, 0x10fb06aa010b0afb, x17, 112, x20)

inst_15:
// rs1==x6, rd==x2, rs1_b7_val == 8, rs1_b1_val == 64, rs1_b3_val == 0, rs1_b4_val == 254, rs1_b5_val == 251, rs1_b6_val == 170
// opcode: zunpkd831 ; op1:x6; dest:x2; op1val:0x8aafbfe000c4006;
TEST_RD_OP( zunpkd831, x2, x6, 0x0000000000000000, 0x8aafbfe000c4006, x17, 120, x20)

inst_16:
// rs1==x4, rd==x6, rs1_b7_val == 4, rs1_b5_val == 85, rs1_b3_val == 255
// opcode: zunpkd831 ; op1:x4; dest:x6; op1val:0x440550dff07130e;
TEST_RD_OP( zunpkd831, x6, x4, 0x0000000000000000, 0x440550dff07130e, x17, 128, x20)

inst_17:
// rs1==x11, rd==x19, rs1_b7_val == 2, rs1_b0_val == 255, rs1_b1_val == 128, rs1_b2_val == 1, rs1_b5_val == 8
// opcode: zunpkd831 ; op1:x11; dest:x19; op1val:0x2aa080a100180ff;
TEST_RD_OP( zunpkd831, x19, x11, 0x0000000000000000, 0x2aa080a100180ff, x17, 136, x20)

inst_18:
// rs1==x12, rd==x3, rs1_b7_val == 1, rs1_b1_val == 85
// opcode: zunpkd831 ; op1:x12; dest:x3; op1val:0x10b0b0d09075503;
TEST_RD_OP( zunpkd831, x3, x12, 0x0000000000000000, 0x10b0b0d09075503, x17, 144, x20)

inst_19:
// rs1==x23, rd==x22, rs1_b7_val == 255, rs1_b1_val == 127, rs1_b3_val == 223
// opcode: zunpkd831 ; op1:x23; dest:x22; op1val:0xff124011df037f12;
TEST_RD_OP( zunpkd831, x22, x23, 0x0000000000000000, 0xff124011df037f12, x17, 152, x20)

inst_20:
// rs1==x9, rd==x5, rs1_b7_val == 0, rs1_b1_val == 4, rs1_b3_val == 85, rs1_b6_val == 4
// opcode: zunpkd831 ; op1:x9; dest:x5; op1val:0x04020c55080412;
TEST_RD_OP( zunpkd831, x5, x9, 0x0000000000000000, 0x04020c55080412, x17, 160, x20)

inst_21:
// rs1==x24, rd==x20, rs1_b6_val == 85, rs1_b4_val == 16
// opcode: zunpkd831 ; op1:x24; dest:x20; op1val:0xd55051000fbfe03;
TEST_RD_OP( zunpkd831, x20, x24, 0x0000000000000000, 0xd55051000fbfe03, x17, 168, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_22:
// rs1==x5, rd==x24, rs1_b6_val == 127, rs1_b3_val == 191, rs1_b1_val == 16, rs1_b2_val == 128
// opcode: zunpkd831 ; op1:x5; dest:x24; op1val:0xf7f1206bf801009;
TEST_RD_OP( zunpkd831, x24, x5, 0x0000000000000000, 0xf7f1206bf801009, x1, 0, x2)

inst_23:
// rs1==x17, rd==x29, rs1_b6_val == 191, rs1_b2_val == 85
// opcode: zunpkd831 ; op1:x17; dest:x29; op1val:0x4bf0340df5555ff;
TEST_RD_OP( zunpkd831, x29, x17, 0x0000000000000000, 0x4bf0340df5555ff, x1, 8, x2)

inst_24:
// rs1==x16, rd==x11, rs1_b6_val == 254, rs1_b0_val == 4, rs1_b4_val == 253
// opcode: zunpkd831 ; op1:x16; dest:x11; op1val:0xfefe0bfd7f138004;
TEST_RD_OP( zunpkd831, x11, x16, 0x0000000000000000, 0xfefe0bfd7f138004, x1, 16, x2)

inst_25:
// rs1==x21, rd==x18, rs1_b6_val == 128, rs1_b5_val == 253
// opcode: zunpkd831 ; op1:x21; dest:x18; op1val:0xaa80fd0b80110d04;
TEST_RD_OP( zunpkd831, x18, x21, 0x0000000000000000, 0xaa80fd0b80110d04, x1, 24, x2)

inst_26:
// rs1==x20, rd==x26, rs1_b6_val == 32, rs1_b0_val == 2
// opcode: zunpkd831 ; op1:x20; dest:x26; op1val:0xf720400f0a068002;
TEST_RD_OP( zunpkd831, x26, x20, 0x0000000000000000, 0xf720400f0a068002, x1, 32, x2)

inst_27:
// rs1==x13, rd==x12, rs1_b1_val == 253, rs1_b4_val == 191, rs1_b0_val == 239, rs1_b6_val == 8
// opcode: zunpkd831 ; op1:x13; dest:x12; op1val:0x800806bf060cfdef;
TEST_RD_OP( zunpkd831, x12, x13, 0x0000000000000000, 0x800806bf060cfdef, x1, 40, x2)

inst_28:
// rs1==x31, rd==x30, rs1_b1_val == 32, rs1_b5_val == 223
// opcode: zunpkd831 ; op1:x31; dest:x30; op1val:0xdfaadfbf0d01200c;
TEST_RD_OP( zunpkd831, x30, x31, 0x0000000000000000, 0xdfaadfbf0d01200c, x1, 48, x2)

inst_29:
// rs1==x7, rd==x14, rs1_b1_val == 1, rs1_b2_val == 2
// opcode: zunpkd831 ; op1:x7; dest:x14; op1val:0x912050b55020109;
TEST_RD_OP( zunpkd831, x14, x7, 0x0000000000000000, 0x912050b55020109, x1, 56, x2)

inst_30:
// rs1==x8, rd==x17, rs1_b1_val == 0, rs1_b4_val == 8
// opcode: zunpkd831 ; op1:x8; dest:x17; op1val:0x800c0e0855550012;
TEST_RD_OP( zunpkd831, x17, x8, 0x0000000000000000, 0x800c0e0855550012, x1, 64, x2)

inst_31:
// rs1==x25, rd==x21, rs1_b0_val == 170, rs1_b4_val == 223
// opcode: zunpkd831 ; op1:x25; dest:x21; op1val:0x111113df11120baa;
TEST_RD_OP( zunpkd831, x21, x25, 0x0000000000000000, 0x111113df11120baa, x1, 72, x2)

inst_32:
// rs1_b0_val == 85, rs1_b4_val == 0, rs1_b2_val == 255
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xfb5507000fff0455;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0xfb5507000fff0455, x1, 80, x2)

inst_33:
// rs1_b0_val == 191, rs1_b3_val == 32
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xfdf7ef0b200b7fbf;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0xfdf7ef0b200b7fbf, x1, 88, x2)

inst_34:
// rs1_b0_val == 223, rs1_b3_val == 170, rs1_b5_val == 127
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x2fd7f07aafb12df;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0x2fd7f07aafb12df, x1, 96, x2)

inst_35:
// rs1_b0_val == 247, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xfef7030b09550ef7;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0xfef7030b09550ef7, x1, 104, x2)

inst_36:
// rs1_b0_val == 253, rs1_b4_val == 247
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x5df12f7070611fd;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0x5df12f7070611fd, x1, 112, x2)

inst_37:
// rs1_b0_val == 254, rs1_b6_val == 255
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xaff06aa09807ffe;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0xaff06aa09807ffe, x1, 120, x2)

inst_38:
// rs1_b0_val == 64, rs1_b2_val == 247
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x90c40fb40f70a40;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0x90c40fb40f70a40, x1, 128, x2)

inst_39:
// rs1_b0_val == 32, rs1_b5_val == 255
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x7f08ffbffbf78020;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0x7f08ffbffbf78020, x1, 136, x2)

inst_40:
// rs1_b6_val == 16, rs1_b3_val == 253
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x7f100511fdaa0b02;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0x7f100511fdaa0b02, x1, 144, x2)

inst_41:
// rs1_b6_val == 1, rs1_b2_val == 32
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xbf0107000f200d0b;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0xbf0107000f200d0b, x1, 152, x2)

inst_42:
// rs1_b4_val == 239, rs1_b5_val == 16
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x40bf10ef11ff1306;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0x40bf10ef11ff1306, x1, 160, x2)

inst_43:
// rs1_b4_val == 128, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xf720bf80fd027f0c;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0xf720bf80fd027f0c, x1, 168, x2)

inst_44:
// rs1_b4_val == 4, rs1_b5_val == 1
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x7ffe010406f7ef12;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0x7ffe010406f7ef12, x1, 176, x2)

inst_45:
// rs1_b4_val == 2, rs1_b5_val == 0
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x1301000212060bfd;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0x1301000212060bfd, x1, 184, x2)

inst_46:
// rs1_b4_val == 1, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x104030140050840;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0x104030140050840, x1, 192, x2)

inst_47:
// rs1_b3_val == 239, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x7f0b1305ef200afd;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0x7f0b1305ef200afd, x1, 200, x2)

inst_48:
// rs1_b3_val == 247, rs1_b6_val == 0
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x30007aaf7120e08;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0x30007aaf7120e08, x1, 208, x2)

inst_49:
// rs1_b5_val == 4, rs1_b2_val == 223
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x9ff04bfdfdf01ef;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0x9ff04bfdfdf01ef, x1, 216, x2)

inst_50:
// rs1_b3_val == 8, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x8aafd050855fdbf;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0x8aafd050855fdbf, x1, 224, x2)

inst_51:
// rs1_b3_val == 4, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xfb0cdf1104200909;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0xfb0cdf1104200909, x1, 232, x2)

inst_52:
// rs1_b3_val == 2, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xaa5505df02551311;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0xaa5505df02551311, x1, 240, x2)

inst_53:
// rs1_b2_val == 127, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xdf0c10df0b7f080b;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0xdf0c10df0b7f080b, x1, 248, x2)

inst_54:
// rs1_b5_val == 170, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xbffdaa80040211fd;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0xbffdaa80040211fd, x1, 256, x2)

inst_55:
// rs1_b2_val == 239, rs1_b1_val == 191
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xfd02100005efbf0d;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0xfd02100005efbf0d, x1, 264, x2)

inst_56:
// rs1_b1_val == 247, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xd06fd110040f7df;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0xd06fd110040f7df, x1, 272, x2)

inst_57:
// rs1_b2_val == 254, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xefe088055fe100f;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0xefe088055fe100f, x1, 280, x2)

inst_58:
// rs1_b2_val == 16, rs1_b5_val == 128
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x4f780fbaa10fe06;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0x4f780fbaa10fe06, x1, 288, x2)

inst_59:
// rs1_b2_val == 4, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x20f709bf8004000a;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0x20f709bf8004000a, x1, 296, x2)

inst_60:
// rs1_b2_val == 0, rs1_b4_val == 85
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0x2070a5500000d0b;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0x2070a5500000d0b, x1, 304, x2)

inst_61:
// rs1_b5_val == 32, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xfd7f20fd7fdf03fd;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0xfd7f20fd7fdf03fd, x1, 312, x2)

inst_62:
// rs1_b4_val == 127, 
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xdf03207fbffb8007;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0xdf03207fbffb8007, x1, 320, x2)

inst_63:
// rs1_b7_val == 247, rs1_b6_val == 239, rs1_b2_val == 8, rs1_b3_val == 254, rs1_b4_val == 255
// opcode: zunpkd831 ; op1:x30; dest:x31; op1val:0xf7ef03fffe08ff12;
TEST_RD_OP( zunpkd831, x31, x30, 0x0000000000000000, 0xf7ef03fffe08ff12, x1, 328, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x17_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x17_1:
    .fill 22*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 42*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
