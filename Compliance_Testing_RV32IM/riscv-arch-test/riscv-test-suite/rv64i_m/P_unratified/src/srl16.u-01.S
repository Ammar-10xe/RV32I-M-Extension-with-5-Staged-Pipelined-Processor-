
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srl16.u instruction of the RISC-V RV64PZicsr extension for the srl16.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srl16.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x10,signature_x10_1)

inst_0:
// rs1 == rd != rs2, rs1==x7, rs2==x9, rd==x7, rs2_val == 5, rs1_h3_val == 65533, rs1_h0_val == 32767
// opcode: srl16.u ; op1:x7; op2:x9; dest:x7; op1val:0xfffd001200117fff;  op2val:0x5
TEST_RR_OP(srl16.u, x7, x7, x9, 0x0000000000000000, 0xfffd001200117fff, 0x5, x10, 0, x6)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x4, rs2==x22, rd==x23, rs2_val == 7, rs1_h3_val == 2, rs1_h0_val == 128
// opcode: srl16.u ; op1:x4; op2:x22; dest:x23; op1val:0x02000e00030080;  op2val:0x7
TEST_RR_OP(srl16.u, x23, x4, x22, 0x0000000000000000, 0x02000e00030080, 0x7, x10, 8, x6)

inst_2:
// rs1 == rs2 != rd, rs1==x17, rs2==x17, rd==x21, rs2_val == 11, rs1_h3_val == 64, rs1_h0_val == 65533, rs1_h2_val == 65531
// opcode: srl16.u ; op1:x17; op2:x17; dest:x21; op1val:0x40fffb0013fffd;  op2val:0xb
TEST_RR_OP(srl16.u, x21, x17, x17, 0x0000000000000000, 0x40fffb0013fffd, 0xb, x10, 16, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x20, rs2==x20, rd==x20, rs2_val == 13, rs1_h3_val == 65531, rs1_h2_val == 32, rs1_h1_val == 4
// opcode: srl16.u ; op1:x20; op2:x20; dest:x20; op1val:0xfffb00200004000a;  op2val:0xd
TEST_RR_OP(srl16.u, x20, x20, x20, 0x0000000000000000, 0xfffb00200004000a, 0xd, x10, 24, x6)

inst_4:
// rs2 == rd != rs1, rs1==x18, rs2==x28, rd==x28, rs2_val == 14, rs1_h0_val == 57343, rs1_h1_val == 32768, rs1_h2_val == 512
// opcode: srl16.u ; op1:x18; op2:x28; dest:x28; op1val:0x0602008000dfff;  op2val:0xe
TEST_RR_OP(srl16.u, x28, x18, x28, 0x0000000000000000, 0x0602008000dfff, 0xe, x10, 32, x6)

inst_5:
// rs1==x31, rs2==x11, rd==x8, rs2_val == 8, rs1_h2_val == 64, rs1_h0_val == 4096
// opcode: srl16.u ; op1:x31; op2:x11; dest:x8; op1val:0x07004000091000;  op2val:0x8
TEST_RR_OP(srl16.u, x8, x31, x11, 0x0000000000000000, 0x07004000091000, 0x8, x10, 40, x6)

inst_6:
// rs1==x5, rs2==x16, rd==x29, rs2_val == 4, rs1_h1_val == 65531, rs1_h3_val == 32767
// opcode: srl16.u ; op1:x5; op2:x16; dest:x29; op1val:0x7fff0009fffb0005;  op2val:0x4
TEST_RR_OP(srl16.u, x29, x5, x16, 0x0000000000000000, 0x7fff0009fffb0005, 0x4, x10, 48, x6)

inst_7:
// rs1==x14, rs2==x2, rd==x26, rs2_val == 2, rs1_h1_val == 128
// opcode: srl16.u ; op1:x14; op2:x2; dest:x26; op1val:0x11000300800007;  op2val:0x2
TEST_RR_OP(srl16.u, x26, x14, x2, 0x0000000000000000, 0x11000300800007, 0x2, x10, 56, x6)

inst_8:
// rs1==x11, rs2==x14, rd==x1, rs2_val == 1, rs1_h3_val == 256, rs1_h0_val == 65407
// opcode: srl16.u ; op1:x11; op2:x14; dest:x1; op1val:0x1000011000dff7f;  op2val:0x1
TEST_RR_OP(srl16.u, x1, x11, x14, 0x0000000000000000, 0x1000011000dff7f, 0x1, x10, 64, x6)

inst_9:
// rs1==x26, rs2==x18, rd==x11, rs1_h3_val == 43690, rs1_h1_val == 49151
// opcode: srl16.u ; op1:x26; op2:x18; dest:x11; op1val:0xaaaa0003bfff0006;  op2val:0xc
TEST_RR_OP(srl16.u, x11, x26, x18, 0x0000000000000000, 0xaaaa0003bfff0006, 0xc, x10, 72, x6)

inst_10:
// rs1==x8, rs2==x7, rd==x0, rs1_h3_val == 21845, rs1_h2_val == 65519, rs1_h0_val == 2, rs1_h1_val == 8
// opcode: srl16.u ; op1:x8; op2:x7; dest:x0; op1val:0x5555ffef00080002;  op2val:0x1
TEST_RR_OP(srl16.u, x0, x8, x7, 0x0000000000000000, 0x5555ffef00080002, 0x1, x10, 80, x6)

inst_11:
// rs1==x12, rs2==x24, rd==x31, rs1_h3_val == 49151, rs1_h1_val == 21845
// opcode: srl16.u ; op1:x12; op2:x24; dest:x31; op1val:0xbfff000d55551000;  op2val:0x13
TEST_RR_OP(srl16.u, x31, x12, x24, 0x0000000000000000, 0xbfff000d55551000, 0x13, x10, 88, x6)

inst_12:
// rs1==x29, rs2==x0, rd==x25, rs1_h3_val == 57343, rs1_h2_val == 49151, rs1_h0_val == 49151, rs1_h1_val == 16
// opcode: srl16.u ; op1:x29; op2:x0; dest:x25; op1val:0xdfffbfff0010bfff;  op2val:0x0
TEST_RR_OP(srl16.u, x25, x29, x0, 0x0000000000000000, 0xdfffbfff0010bfff, 0x0, x10, 96, x6)

inst_13:
// rs1==x0, rs2==x1, rd==x19, rs1_h3_val == 61439, rs1_h1_val == 65533, rs1_h2_val == 63487
// opcode: srl16.u ; op1:x0; op2:x1; dest:x19; op1val:0xeffff7fffffd000d;  op2val:0x8
TEST_RR_OP(srl16.u, x19, x0, x1, 0x0000000000000000, 0xeffff7fffffd000d, 0x8, x10, 104, x6)

inst_14:
// rs1==x28, rs2==x3, rd==x2, rs1_h3_val == 63487, rs1_h1_val == 256, rs1_h2_val == 32768
// opcode: srl16.u ; op1:x28; op2:x3; dest:x2; op1val:0xf7ff80000100dfff;  op2val:0x9
TEST_RR_OP(srl16.u, x2, x28, x3, 0x0000000000000000, 0xf7ff80000100dfff, 0x9, x10, 112, x6)

inst_15:
// rs1==x23, rs2==x30, rd==x12, rs1_h3_val == 64511, rs1_h2_val == 65527, rs1_h1_val == 4096
// opcode: srl16.u ; op1:x23; op2:x30; dest:x12; op1val:0xfbfffff710000012;  op2val:0xc
TEST_RR_OP(srl16.u, x12, x23, x30, 0x0000000000000000, 0xfbfffff710000012, 0xc, x10, 120, x6)

inst_16:
// rs1==x25, rs2==x12, rd==x5, rs1_h3_val == 65023, rs1_h0_val == 43690
// opcode: srl16.u ; op1:x25; op2:x12; dest:x5; op1val:0xfdff000a000daaaa;  op2val:0x2
TEST_RR_OP(srl16.u, x5, x25, x12, 0x0000000000000000, 0xfdff000a000daaaa, 0x2, x10, 128, x11)

inst_17:
// rs1==x13, rs2==x6, rd==x15, rs1_h3_val == 65279, rs1_h1_val == 65023, rs1_h0_val == 1024
// opcode: srl16.u ; op1:x13; op2:x6; dest:x15; op1val:0xfeff0006fdff0400;  op2val:0x3
TEST_RR_OP(srl16.u, x15, x13, x6, 0x0000000000000000, 0xfeff0006fdff0400, 0x3, x10, 136, x11)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_18:
// rs1==x16, rs2==x8, rd==x22, rs1_h3_val == 65407, rs1_h0_val == 63487, rs1_h1_val == 2048
// opcode: srl16.u ; op1:x16; op2:x8; dest:x22; op1val:0xff7f00110800f7ff;  op2val:0x2
TEST_RR_OP(srl16.u, x22, x16, x8, 0x0000000000000000, 0xff7f00110800f7ff, 0x2, x7, 0, x11)

inst_19:
// rs1==x9, rs2==x5, rd==x4, rs1_h3_val == 65471, rs1_h1_val == 16384, rs1_h2_val == 65533
// opcode: srl16.u ; op1:x9; op2:x5; dest:x4; op1val:0xffbffffd4000aaaa;  op2val:0x13
TEST_RR_OP(srl16.u, x4, x9, x5, 0x0000000000000000, 0xffbffffd4000aaaa, 0x13, x7, 8, x11)

inst_20:
// rs1==x27, rs2==x23, rd==x9, rs1_h3_val == 65503, rs1_h1_val == 64
// opcode: srl16.u ; op1:x27; op2:x23; dest:x9; op1val:0xffdf000b0040000c;  op2val:0xc
TEST_RR_OP(srl16.u, x9, x27, x23, 0x0000000000000000, 0xffdf000b0040000c, 0xc, x7, 16, x11)

inst_21:
// rs1==x10, rs2==x4, rd==x3, rs1_h3_val == 65519, rs1_h2_val == 8192
// opcode: srl16.u ; op1:x10; op2:x4; dest:x3; op1val:0xffef200001001000;  op2val:0x8
TEST_RR_OP(srl16.u, x3, x10, x4, 0x0000000000000000, 0xffef200001001000, 0x8, x7, 24, x11)

inst_22:
// rs1==x24, rs2==x27, rd==x6, rs1_h3_val == 65527, rs1_h2_val == 16384, rs1_h0_val == 65023
// opcode: srl16.u ; op1:x24; op2:x27; dest:x6; op1val:0xfff74000bffffdff;  op2val:0xf
TEST_RR_OP(srl16.u, x6, x24, x27, 0x0000000000000000, 0xfff74000bffffdff, 0xf, x7, 32, x11)

inst_23:
// rs1==x15, rs2==x29, rd==x27, rs1_h3_val == 65534, 
// opcode: srl16.u ; op1:x15; op2:x29; dest:x27; op1val:0xfffe00200003000c;  op2val:0x9
TEST_RR_OP(srl16.u, x27, x15, x29, 0x0000000000000000, 0xfffe00200003000c, 0x9, x7, 40, x11)

inst_24:
// rs1==x19, rs2==x21, rd==x18, rs1_h3_val == 32768, rs1_h1_val == 2
// opcode: srl16.u ; op1:x19; op2:x21; dest:x18; op1val:0x8000000700020013;  op2val:0x2
TEST_RR_OP(srl16.u, x18, x19, x21, 0x0000000000000000, 0x8000000700020013, 0x2, x7, 48, x11)

inst_25:
// rs1==x22, rs2==x26, rd==x16, rs1_h3_val == 16384, rs1_h0_val == 0
// opcode: srl16.u ; op1:x22; op2:x26; dest:x16; op1val:0x4000200040000000;  op2val:0xd
TEST_RR_OP(srl16.u, x16, x22, x26, 0x0000000000000000, 0x4000200040000000, 0xd, x7, 56, x11)

inst_26:
// rs1==x6, rs2==x13, rd==x14, rs1_h3_val == 8192, 
// opcode: srl16.u ; op1:x6; op2:x13; dest:x14; op1val:0x2000bfff00050003;  op2val:0x13
TEST_RR_OP(srl16.u, x14, x6, x13, 0x0000000000000000, 0x2000bfff00050003, 0x13, x7, 64, x11)

inst_27:
// rs1==x2, rs2==x10, rd==x13, rs1_h3_val == 4096, rs1_h1_val == 65503, rs1_h2_val == 2
// opcode: srl16.u ; op1:x2; op2:x10; dest:x13; op1val:0x10000002ffdffffd;  op2val:0x5
TEST_RR_OP(srl16.u, x13, x2, x10, 0x0000000000000000, 0x10000002ffdffffd, 0x5, x7, 72, x11)

inst_28:
// rs1==x1, rs2==x15, rd==x24, rs1_h3_val == 2048, rs1_h1_val == 65535
// opcode: srl16.u ; op1:x1; op2:x15; dest:x24; op1val:0x8000011fffffffd;  op2val:0x1
TEST_RR_OP(srl16.u, x24, x1, x15, 0x0000000000000000, 0x8000011fffffffd, 0x1, x7, 80, x11)

inst_29:
// rs1==x30, rs2==x25, rd==x10, rs1_h3_val == 1024, rs1_h1_val == 63487
// opcode: srl16.u ; op1:x30; op2:x25; dest:x10; op1val:0x400f7fff7ffbfff;  op2val:0x5
TEST_RR_OP(srl16.u, x10, x30, x25, 0x0000000000000000, 0x400f7fff7ffbfff, 0x5, x7, 88, x11)

inst_30:
// rs1==x3, rs2==x31, rd==x17, rs1_h3_val == 512, 
// opcode: srl16.u ; op1:x3; op2:x31; dest:x17; op1val:0x200bfff0006000e;  op2val:0x10
TEST_RR_OP(srl16.u, x17, x3, x31, 0x0000000000000000, 0x200bfff0006000e, 0x10, x7, 96, x11)

inst_31:
// rs1==x21, rs2==x19, rd==x30, rs1_h3_val == 128, rs1_h0_val == 65531
// opcode: srl16.u ; op1:x21; op2:x19; dest:x30; op1val:0x8080008000fffb;  op2val:0x13
TEST_RR_OP(srl16.u, x30, x21, x19, 0x0000000000000000, 0x8080008000fffb, 0x13, x7, 104, x1)

inst_32:
// rs1_h3_val == 32, rs1_h2_val == 65407
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x20ff7f0012f7ff;  op2val:0x4
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x20ff7f0012f7ff, 0x4, x7, 112, x1)

inst_33:
// rs1_h3_val == 16, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x100020fdff0012;  op2val:0xb
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x100020fdff0012, 0xb, x7, 120, x1)

inst_34:
// rs1_h3_val == 8, rs1_h0_val == 65503
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x080013000effdf;  op2val:0xc
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x080013000effdf, 0xc, x7, 128, x1)

inst_35:
// rs1_h3_val == 4, rs1_h0_val == 8192, rs2_val == 10, rs1_h2_val == 1
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x04000100112000;  op2val:0xa
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x04000100112000, 0xa, x7, 136, x1)

inst_36:
// rs1_h3_val == 1, rs1_h1_val == 43690, rs1_h0_val == 256
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x010006aaaa0100;  op2val:0x3
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x010006aaaa0100, 0x3, x7, 144, x1)

inst_37:
// rs1_h0_val == 65471, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0xdfff00400012ffbf;  op2val:0xc
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0xdfff00400012ffbf, 0xc, x7, 152, x1)

inst_38:
// rs1_h0_val == 65519, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0xbfff2000fffbffef;  op2val:0x4
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0xbfff2000fffbffef, 0x4, x7, 160, x1)

inst_39:
// rs1_h0_val == 65527, rs1_h1_val == 1
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0bf7ff0001fff7;  op2val:0x12
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x0bf7ff0001fff7, 0x12, x7, 168, x1)

inst_40:
// rs1_h0_val == 65534, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x09000cfdfffffe;  op2val:0x1
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x09000cfdfffffe, 0x1, x7, 176, x1)

inst_41:
// rs1_h0_val == 32768, rs1_h1_val == 512
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x08000502008000;  op2val:0x5
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x08000502008000, 0x5, x7, 184, x1)

inst_42:
// rs1_h0_val == 16384, rs1_h2_val == 8
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000800804000;  op2val:0xb
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0xffdf000800804000, 0xb, x7, 192, x1)

inst_43:
// rs1_h0_val == 2048, rs1_h1_val == 65519
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff4000ffef0800;  op2val:0x8
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0xf7ff4000ffef0800, 0x8, x7, 200, x1)

inst_44:
// rs1_h0_val == 512, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffef00010200;  op2val:0x6
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0xffbfffef00010200, 0x6, x7, 208, x1)

inst_45:
// rs1_h0_val == 64, rs1_h1_val == 65534, rs1_h3_val == 65535, rs1_h2_val == 65534
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffe0040;  op2val:0xc
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0xfffffffefffe0040, 0xc, x7, 216, x1)

inst_46:
// rs1_h0_val == 32, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000900090020;  op2val:0x12
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x2000000900090020, 0x12, x7, 224, x1)

inst_47:
// rs1_h0_val == 16, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffe00120010;  op2val:0x6
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0xf7fffffe00120010, 0x6, x7, 232, x1)

inst_48:
// rs1_h0_val == 8, rs1_h2_val == 65503
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0dffdf00130008;  op2val:0x9
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x0dffdf00130008, 0x9, x7, 240, x1)

inst_49:
// rs1_h0_val == 4, rs1_h2_val == 1024
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x100040002000004;  op2val:0xf
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x100040002000004, 0xf, x7, 248, x1)

inst_50:
// rs1_h0_val == 1, rs1_h2_val == 65535
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffff00050001;  op2val:0x12
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x5555ffff00050001, 0x12, x7, 256, x1)

inst_51:
// rs1_h0_val == 65535, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0006bfffffff;  op2val:0x8
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0xfffb0006bfffffff, 0x8, x7, 264, x1)

inst_52:
// rs1_h3_val == 0, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x00f7ff0004bfff;  op2val:0x6
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x00f7ff0004bfff, 0x6, x7, 272, x1)

inst_53:
// rs1_h2_val == 43690, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x5555aaaaffff0002;  op2val:0x12
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x5555aaaaffff0002, 0x12, x7, 280, x1)

inst_54:
// rs1_h2_val == 4096, rs1_h1_val == 65407
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x001000ff7f0005;  op2val:0x10
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x001000ff7f0005, 0x10, x7, 288, x1)

inst_55:
// rs1_h2_val == 2048, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x04080080007fff;  op2val:0x8
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x04080080007fff, 0x8, x7, 296, x1)

inst_56:
// rs1_h2_val == 256, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000100000bffef;  op2val:0x10
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x40000100000bffef, 0x10, x7, 304, x1)

inst_57:
// rs1_h2_val == 128, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0a008000070020;  op2val:0xe
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x0a008000070020, 0xe, x7, 312, x1)

inst_58:
// rs1_h2_val == 16, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x80000010f7ff2000;  op2val:0x5
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x80000010f7ff2000, 0x5, x7, 320, x1)

inst_59:
// rs1_h2_val == 4, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000040003000d;  op2val:0x2
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x2000040003000d, 0x2, x7, 328, x1)

inst_60:
// rs1_h2_val == 0, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000000100000;  op2val:0x12
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x7fff000000100000, 0x12, x7, 336, x1)

inst_61:
// rs1_h1_val == 32767, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000107fffffdf;  op2val:0x4
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x4000107fffffdf, 0x4, x7, 344, x1)

inst_62:
// rs1_h1_val == 57343, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000009dfff0010;  op2val:0xb
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x4000009dfff0010, 0xb, x7, 352, x1)

inst_63:
// rs1_h1_val == 61439, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x100800efff0012;  op2val:0x0
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x100800efff0012, 0x0, x7, 360, x1)

inst_64:
// rs1_h1_val == 64511, rs1_h2_val == 61439
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x04effffbff8000;  op2val:0x3
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x04effffbff8000, 0x3, x7, 368, x1)

inst_65:
// rs1_h1_val == 65279, rs1_h2_val == 32767
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffe7ffffeff0100;  op2val:0xc
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0xfffe7ffffeff0100, 0xc, x7, 376, x1)

inst_66:
// rs1_h1_val == 65471, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0a2000ffbf0800;  op2val:0x0
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x0a2000ffbf0800, 0x0, x7, 384, x1)

inst_67:
// rs1_h1_val == 8192, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0a000d2000fdff;  op2val:0x4
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x0a000d2000fdff, 0x4, x7, 392, x1)

inst_68:
// rs1_h1_val == 1024, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffd400004001000;  op2val:0x10
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0xfffd400004001000, 0x10, x7, 400, x1)

inst_69:
// rs1_h1_val == 32, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0xff7f00080020bfff;  op2val:0x12
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0xff7f00080020bfff, 0x12, x7, 408, x1)

inst_70:
// rs1_h2_val == 21845, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x7fff555555554000;  op2val:0x4
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x7fff555555554000, 0x4, x7, 416, x1)

inst_71:
// rs1_h2_val == 57343, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x01dfff00070012;  op2val:0x5
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x01dfff00070012, 0x5, x7, 424, x1)

inst_72:
// rs1_h2_val == 64511, rs1_h0_val == 21845
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x20fbff00085555;  op2val:0x3
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x20fbff00085555, 0x3, x7, 432, x1)

inst_73:
// rs1_h1_val == 0, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffe000f0000000a;  op2val:0xa
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0xfffe000f0000000a, 0xa, x7, 440, x1)

inst_74:
// rs1_h2_val == 65023, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0xbffffdffff7f000a;  op2val:0x3
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0xbffffdffff7f000a, 0x3, x7, 448, x1)

inst_75:
// rs1_h2_val == 65279, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0bfeff10002000;  op2val:0xf
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x0bfeff10002000, 0xf, x7, 456, x1)

inst_76:
// rs1_h2_val == 65471, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x80ffbf00400006;  op2val:0x12
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x80ffbf00400006, 0x12, x7, 464, x1)

inst_77:
// rs1_h0_val == 61439, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x1002000003efff;  op2val:0x10
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x1002000003efff, 0x10, x7, 472, x1)

inst_78:
// rs1_h0_val == 64511, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x40007fff000cfbff;  op2val:0x3
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x40007fff000cfbff, 0x3, x7, 480, x1)

inst_79:
// rs1_h0_val == 65279, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x555500090011feff;  op2val:0xf
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x555500090011feff, 0xf, x7, 488, x1)

inst_80:
// rs1_h1_val == 65527, 
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x800ff7ffff78000;  op2val:0x12
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x800ff7ffff78000, 0x12, x7, 496, x1)

inst_81:
// rs2_val == 11, rs1_h3_val == 64, rs1_h0_val == 65533, rs1_h2_val == 65531
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0x40fffb0013fffd;  op2val:0xb
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0x40fffb0013fffd, 0xb, x7, 504, x1)

inst_82:
// rs1_h3_val == 61439, rs1_h1_val == 65533, rs1_h2_val == 63487
// opcode: srl16.u ; op1:x30; op2:x29; dest:x31; op1val:0xeffff7fffffd000d;  op2val:0x8
TEST_RR_OP(srl16.u, x31, x30, x29, 0x0000000000000000, 0xeffff7fffffd000d, 0x8, x7, 512, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 65*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
