
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kadd16 instruction of the RISC-V RV64PZicsr extension for the kadd16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kadd16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x7, rs2==x5, rd==x7, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs2_h0_val == 32767, rs1_h1_val == 128, rs1_h1_val != rs2_h1_val, rs2_h1_val == -33, rs1_h3_val == -2049, rs1_h2_val == 1, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h3_val == 4, rs2_h2_val == 0
// opcode: kadd16 ; op1:x7; op2:x5; dest:x7; op1val:0xf7ff000100808000;  op2val:0x040000ffdf7fff
TEST_PKRR_OP(kadd16, x7, x7, x5, 0x0000000000000000, 0xf7ff000100808000, 0x040000ffdf7fff, x7, x6, 0, x13)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x3, rs2==x19, rd==x12, rs1_h3_val == rs2_h3_val, rs1_h1_val == -3, rs2_h3_val == -257, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h3_val == -257, rs1_h2_val == -2049, rs2_h2_val == 1024, rs1_h0_val == -1025, rs2_h0_val == 512, rs2_h1_val == 16
// opcode: kadd16 ; op1:x3; op2:x19; dest:x12; op1val:0xfefff7fffffdfbff;  op2val:0xfeff040000100200
TEST_PKRR_OP(kadd16, x12, x3, x19, 0x0000000000000000, 0xfefff7fffffdfbff, 0xfeff040000100200, x3, x6, 16, x13)

inst_2:
// rs1 == rs2 != rd, rs1==x10, rs2==x10, rd==x21, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 256, rs2_h0_val == -8193, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h2_val == -5, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 32767, rs1_h0_val == -1, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 2048, rs1_h2_val == -2, rs2_h3_val == -4097
// opcode: kadd16 ; op1:x10; op2:x10; dest:x21; op1val:0x100fffe7fffffff;  op2val:0xeffffffb0800dfff
TEST_PKRR_OP(kadd16, x21, x10, x10, 0x0000000000000000, 0x100fffe7fffffff, 0xeffffffb0800dfff, x10, x6, 32, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x17, rs2==x17, rd==x17, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h0_val == -65, rs2_h2_val == -4097, rs1_h3_val == 1, rs2_h0_val == -257, rs2_h3_val == 4096, rs1_h1_val == 2, rs2_h1_val == 512
// opcode: kadd16 ; op1:x17; op2:x17; dest:x17; op1val:0x01f7ff0002ffbf;  op2val:0x1000efff0200feff
TEST_PKRR_OP(kadd16, x17, x17, x17, 0x0000000000000000, 0x01f7ff0002ffbf, 0x1000efff0200feff, x17, x6, 48, x13)

inst_4:
// rs2 == rd != rs1, rs1==x27, rs2==x4, rd==x4, rs1_h2_val == rs2_h2_val, rs1_h0_val == -17, rs2_h0_val == 4, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h3_val == 1024, rs1_h3_val == -1025
// opcode: kadd16 ; op1:x27; op2:x4; dest:x4; op1val:0xfbff00050003ffef;  op2val:0x4000005fffc0004
TEST_PKRR_OP(kadd16, x4, x27, x4, 0x0000000000000000, 0xfbff00050003ffef, 0x4000005fffc0004, x27, x6, 64, x13)

inst_5:
// rs1==x31, rs2==x1, rd==x2, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h2_val == -16385, rs1_h2_val == 16, rs1_h1_val == -16385, rs1_h0_val == 2, rs1_h3_val == -9, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == 1
// opcode: kadd16 ; op1:x31; op2:x1; dest:x2; op1val:0xfff70010bfff0002;  op2val:0x01bfff00090200
TEST_PKRR_OP(kadd16, x2, x31, x1, 0x0000000000000000, 0xfff70010bfff0002, 0x01bfff00090200, x31, x6, 80, x13)

inst_6:
// rs1==x1, rs2==x18, rd==x10, rs1_h1_val == rs2_h1_val, rs1_h2_val == -513, rs2_h0_val == -2049, rs1_h3_val == -32768, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: kadd16 ; op1:x1; op2:x18; dest:x10; op1val:0x8000fdff00030003;  op2val:0xfffcefff0003f7ff
TEST_PKRR_OP(kadd16, x10, x1, x18, 0x0000000000000000, 0x8000fdff00030003, 0xfffcefff0003f7ff, x1, x6, 96, x13)

inst_7:
// rs1==x18, rs2==x2, rd==x1, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h3_val == -32768, rs2_h1_val == -65, rs1_h3_val == -8193, rs1_h1_val == -33, rs1_h2_val == -3, rs2_h2_val == 1
// opcode: kadd16 ; op1:x18; op2:x2; dest:x1; op1val:0xdffffffdffdf0007;  op2val:0x80000001ffbf0005
TEST_PKRR_OP(kadd16, x1, x18, x2, 0x0000000000000000, 0xdffffffdffdf0007, 0x80000001ffbf0005, x18, x6, 112, x13)

inst_8:
// rs1==x9, rs2==x7, rd==x22, rs1_h0_val == rs2_h0_val, rs2_h2_val == -65, rs1_h3_val == -3
// opcode: kadd16 ; op1:x9; op2:x7; dest:x22; op1val:0xfffd000100090003;  op2val:0x01ffbf00060003
TEST_PKRR_OP(kadd16, x22, x9, x7, 0x0000000000000000, 0xfffd000100090003, 0x01ffbf00060003, x9, x6, 128, x13)

inst_9:
// rs1==x8, rs2==x24, rd==x16, rs2_h3_val == -21846, rs1_h1_val == -32768, rs2_h1_val == -16385, rs1_h0_val == 4, rs2_h2_val == 128, rs1_h2_val == -32768
// opcode: kadd16 ; op1:x8; op2:x24; dest:x16; op1val:0x05800080000004;  op2val:0xaaaa0080bfff0007
TEST_PKRR_OP(kadd16, x16, x8, x24, 0x0000000000000000, 0x05800080000004, 0xaaaa0080bfff0007, x8, x6, 144, x13)

inst_10:
// rs1==x11, rs2==x26, rd==x25, rs2_h3_val == 21845, rs1_h3_val == -2, rs1_h2_val == -1025, rs1_h0_val == 64
// opcode: kadd16 ; op1:x11; op2:x26; dest:x25; op1val:0xfffefbfffffa0040;  op2val:0x5555fffc0800fff6
TEST_PKRR_OP(kadd16, x25, x11, x26, 0x0000000000000000, 0xfffefbfffffa0040, 0x5555fffc0800fff6, x11, x6, 160, x13)

inst_11:
// rs1==x19, rs2==x27, rd==x18, rs2_h3_val == 32767, rs2_h0_val == 8, rs1_h3_val == 32767
// opcode: kadd16 ; op1:x19; op2:x27; dest:x18; op1val:0x7ffffdfffffdffef;  op2val:0x7fffbfffbfff0008
TEST_PKRR_OP(kadd16, x18, x19, x27, 0x0000000000000000, 0x7ffffdfffffdffef, 0x7fffbfffbfff0008, x19, x6, 176, x13)

inst_12:
// rs1==x29, rs2==x3, rd==x19, rs2_h3_val == -16385, rs2_h2_val == -8193, rs1_h2_val == 4096, rs1_h1_val == 2048, rs2_h1_val == 16384, rs2_h0_val == -2
// opcode: kadd16 ; op1:x29; op2:x3; dest:x19; op1val:0xc000100008000003;  op2val:0xbfffdfff4000fffe
TEST_PKRR_OP(kadd16, x19, x29, x3, 0x0000000000000000, 0xc000100008000003, 0xbfffdfff4000fffe, x29, x6, 192, x13)

inst_13:
// rs1==x30, rs2==x9, rd==x23, rs2_h3_val == -8193, rs2_h1_val == 2, rs1_h2_val == 1024, rs2_h0_val == -513, rs1_h0_val == 21845
// opcode: kadd16 ; op1:x30; op2:x9; dest:x23; op1val:0x060400bfff5555;  op2val:0xdffffff90002fdff
TEST_PKRR_OP(kadd16, x23, x30, x9, 0x0000000000000000, 0x060400bfff5555, 0xdffffff90002fdff, x30, x6, 208, x13)

inst_14:
// rs1==x28, rs2==x15, rd==x0, rs2_h3_val == -2049, rs2_h2_val == 4, rs2_h0_val == 1
// opcode: kadd16 ; op1:x28; op2:x15; dest:x0; op1val:0xfffdfffd0002ffff;  op2val:0xf7ff000400090001
TEST_PKRR_OP(kadd16, x0, x28, x15, 0x0000000000000000, 0xfffdfffd0002ffff, 0xf7ff000400090001, x28, x6, 224, x13)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_15:
// rs1==x15, rs2==x12, rd==x5, rs2_h3_val == -1025, rs1_h2_val == 32, rs1_h1_val == 21845, rs2_h2_val == 8, rs2_h0_val == -9
// opcode: kadd16 ; op1:x15; op2:x12; dest:x5; op1val:0x3fff00205555fff9;  op2val:0xfbff00080200fff7
TEST_PKRR_OP(kadd16, x5, x15, x12, 0x0000000000000000, 0x3fff00205555fff9, 0xfbff00080200fff7, x15, x1, 0, x7)

inst_16:
// rs1==x20, rs2==x13, rd==x27, rs2_h3_val == -513, rs1_h2_val == 16384, rs1_h0_val == -3, rs2_h1_val == -2049, rs1_h3_val == 4, rs2_h2_val == 64, rs1_h1_val == -65, rs2_h0_val == 128
// opcode: kadd16 ; op1:x20; op2:x13; dest:x27; op1val:0x044000ffbffffd;  op2val:0xfdff0040f7ff0080
TEST_PKRR_OP(kadd16, x27, x20, x13, 0x0000000000000000, 0x044000ffbffffd, 0xfdff0040f7ff0080, x20, x1, 16, x7)

inst_17:
// rs1==x25, rs2==x23, rd==x28, rs2_h3_val == -129, rs1_h2_val == -5, rs2_h0_val == -3
// opcode: kadd16 ; op1:x25; op2:x23; dest:x28; op1val:0x05fffb00060006;  op2val:0xff7f00010002fffd
TEST_PKRR_OP(kadd16, x28, x25, x23, 0x0000000000000000, 0x05fffb00060006, 0xff7f00010002fffd, x25, x1, 32, x7)

inst_18:
// rs1==x16, rs2==x14, rd==x29, rs2_h3_val == -65, rs2_h2_val == 32, rs1_h0_val == 16384
// opcode: kadd16 ; op1:x16; op2:x14; dest:x29; op1val:0xfff9f7fffffd4000;  op2val:0xffbf00200002f7ff
TEST_PKRR_OP(kadd16, x29, x16, x14, 0x0000000000000000, 0xfff9f7fffffd4000, 0xffbf00200002f7ff, x16, x1, 48, x7)

inst_19:
// rs1==x13, rs2==x29, rd==x20, rs2_h3_val == -33, rs2_h2_val == -1
// opcode: kadd16 ; op1:x13; op2:x29; dest:x20; op1val:0xfff8fffafffc0007;  op2val:0xffdfffff3fff0001
TEST_PKRR_OP(kadd16, x20, x13, x29, 0x0000000000000000, 0xfff8fffafffc0007, 0xffdfffff3fff0001, x13, x1, 64, x7)

inst_20:
// rs1==x4, rs2==x30, rd==x24, rs2_h3_val == -17, rs1_h2_val == 64, rs1_h0_val == 256
// opcode: kadd16 ; op1:x4; op2:x30; dest:x24; op1val:0xfffd00403fff0100;  op2val:0xffef00084000fff6
TEST_PKRR_OP(kadd16, x24, x4, x30, 0x0000000000000000, 0xfffd00403fff0100, 0xffef00084000fff6, x4, x1, 80, x7)

inst_21:
// rs1==x21, rs2==x22, rd==x30, rs2_h3_val == -9, rs1_h1_val == 16384, rs1_h0_val == 32767, rs2_h2_val == -129
// opcode: kadd16 ; op1:x21; op2:x22; dest:x30; op1val:0xfbfffffa40007fff;  op2val:0xfff7ff7ffffcc000
TEST_PKRR_OP(kadd16, x30, x21, x22, 0x0000000000000000, 0xfbfffffa40007fff, 0xfff7ff7ffffcc000, x21, x1, 96, x7)

inst_22:
// rs1==x23, rs2==x21, rd==x8, rs2_h3_val == -5, rs1_h0_val == -4097, rs2_h0_val == 16, rs2_h2_val == -9, rs1_h2_val == 21845
// opcode: kadd16 ; op1:x23; op2:x21; dest:x8; op1val:0x015555fffaefff;  op2val:0xfffbfff700060010
TEST_PKRR_OP(kadd16, x8, x23, x21, 0x0000000000000000, 0x015555fffaefff, 0xfffbfff700060010, x23, x1, 112, x7)

inst_23:
// rs1==x22, rs2==x25, rd==x26, rs2_h3_val == -3, rs1_h0_val == -9, rs2_h1_val == -257, rs2_h2_val == -2049, rs1_h3_val == -65
// opcode: kadd16 ; op1:x22; op2:x25; dest:x26; op1val:0xffbf0010fffafff7;  op2val:0xfffdf7fffeff7fff
TEST_PKRR_OP(kadd16, x26, x22, x25, 0x0000000000000000, 0xffbf0010fffafff7, 0xfffdf7fffeff7fff, x22, x1, 128, x7)

inst_24:
// rs1==x5, rs2==x11, rd==x3, rs2_h3_val == -2, rs2_h1_val == -1025, rs2_h2_val == -33, rs2_h0_val == 2048, rs1_h3_val == -33
// opcode: kadd16 ; op1:x5; op2:x11; dest:x3; op1val:0xffdf1000fff90040;  op2val:0xfffeffdffbff0800
TEST_PKRR_OP(kadd16, x3, x5, x11, 0x0000000000000000, 0xffdf1000fff90040, 0xfffeffdffbff0800, x5, x1, 144, x7)

inst_25:
// rs1==x2, rs2==x8, rd==x15, rs2_h3_val == 16384, rs1_h3_val == 21845, rs2_h2_val == 16, rs2_h1_val == 1
// opcode: kadd16 ; op1:x2; op2:x8; dest:x15; op1val:0x5555fffd55550002;  op2val:0x4000001000010007
TEST_PKRR_OP(kadd16, x15, x2, x8, 0x0000000000000000, 0x5555fffd55550002, 0x4000001000010007, x2, x1, 160, x7)

inst_26:
// rs1==x14, rs2==x20, rd==x31, rs2_h3_val == 8192, rs2_h1_val == 4, rs1_h3_val == -129, rs1_h2_val == -16385
// opcode: kadd16 ; op1:x14; op2:x20; dest:x31; op1val:0xff7fbffffff90040;  op2val:0x2000dfff0004fff7
TEST_PKRR_OP(kadd16, x31, x14, x20, 0x0000000000000000, 0xff7fbffffff90040, 0x2000dfff0004fff7, x14, x1, 176, x7)

inst_27:
// rs1==x26, rs2==x6, rd==x13, rs2_h3_val == 2048, rs1_h0_val == 512, rs1_h1_val == 8
// opcode: kadd16 ; op1:x26; op2:x6; dest:x13; op1val:0x09004000080200;  op2val:0x80000070007fff9
TEST_PKRR_OP(kadd16, x13, x26, x6, 0x0000000000000000, 0x09004000080200, 0x80000070007fff9, x26, x1, 192, x7)

inst_28:
// rs1==x0, rs2==x31, rd==x14, rs2_h3_val == 512, rs2_h1_val == 32
// opcode: kadd16 ; op1:x0; op2:x31; dest:x14; op1val:0xfffc0009fffafffd;  op2val:0x200000600200009
TEST_PKRR_OP(kadd16, x14, x0, x31, 0x0000000000000000, 0xfffc0009fffafffd, 0x200000600200009, x0, x1, 208, x7)

inst_29:
// rs1==x6, rs2==x0, rd==x11, rs2_h3_val == 256, rs2_h0_val == 64, rs2_h1_val == 256
// opcode: kadd16 ; op1:x6; op2:x0; dest:x11; op1val:0xff7f3fff8000ffef;  op2val:0x100000001000040
TEST_PKRR_OP(kadd16, x11, x6, x0, 0x0000000000000000, 0xff7f3fff8000ffef, 0x100000001000040, x6, x1, 224, x7)

inst_30:
// rs1==x12, rs2==x16, rd==x9, rs2_h3_val == 128, rs2_h1_val == 8
// opcode: kadd16 ; op1:x12; op2:x16; dest:x9; op1val:0xffdf1000fff65555;  op2val:0x80c00000087fff
TEST_PKRR_OP(kadd16, x9, x12, x16, 0x0000000000000000, 0xffdf1000fff65555, 0x80c00000087fff, x12, x1, 240, x7)

inst_31:
// rs1==x24, rs2==x28, rd==x6, rs2_h3_val == 64, rs1_h2_val == -65, rs2_h1_val == 128, rs2_h0_val == 1024, rs1_h3_val == -17
// opcode: kadd16 ; op1:x24; op2:x28; dest:x6; op1val:0xffefffbf3fffefff;  op2val:0x40fff600800400
TEST_PKRR_OP(kadd16, x6, x24, x28, 0x0000000000000000, 0xffefffbf3fffefff, 0x40fff600800400, x24, x1, 256, x7)

inst_32:
// rs2_h3_val == 32, rs1_h1_val == -1025, rs1_h0_val == 8
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x013ffffbff0008;  op2val:0x200010fbfffffe
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x013ffffbff0008, 0x200010fbfffffe, x30, x1, 272, x7)

inst_33:
// rs2_h3_val == 16, rs1_h3_val == 64, rs1_h0_val == 1024, rs2_h1_val == -129, rs1_h1_val == 32, rs2_h2_val == 21845
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x40100000200400;  op2val:0x105555ff7f0200
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x40100000200400, 0x105555ff7f0200, x30, x1, 288, x7)

inst_34:
// rs2_h3_val == 8, rs1_h0_val == -33, rs1_h2_val == 8, rs1_h1_val == 4096
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff600081000ffdf;  op2val:0x0800080001fff9
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xfff600081000ffdf, 0x0800080001fff9, x30, x1, 304, x7)

inst_35:
// rs2_h3_val == 2, rs1_h0_val == 32, rs1_h1_val == -513, rs2_h2_val == -3
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x060400fdff0020;  op2val:0x02fffdc000fffa
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x060400fdff0020, 0x02fffdc000fffa, x30, x1, 320, x7)

inst_36:
// rs2_h3_val == 0, rs1_h2_val == -8193
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555dfff0007fffd;  op2val:0x0000033fff0004
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x5555dfff0007fffd, 0x0000033fff0004, x30, x1, 336, x7)

inst_37:
// rs1_h1_val == -5, rs2_h1_val == -513
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff93ffffffbffef;  op2val:0x040001fdfffff7
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xfff93ffffffbffef, 0x040001fdfffff7, x30, x1, 352, x7)

inst_38:
// rs1_h1_val == -2, rs2_h1_val == 8192
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x06fff8fffefff9;  op2val:0xffdf000520000009
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x06fff8fffefff9, 0xffdf000520000009, x30, x1, 368, x7)

inst_39:
// rs1_h1_val == 8192, rs2_h2_val == 2048, rs2_h0_val == -1025, rs1_h2_val == 4
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff00042000c000;  op2val:0x40000800fdfffbff
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xdfff00042000c000, 0x40000800fdfffbff, x30, x1, 384, x7)

inst_40:
// rs1_h1_val == 1024, rs2_h2_val == 256, rs2_h0_val == -129
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f000704000020;  op2val:0xaaaa01000001ff7f
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xff7f000704000020, 0xaaaa01000001ff7f, x30, x1, 400, x7)

inst_41:
// rs1_h1_val == 512, rs2_h2_val == 4096, rs1_h3_val == 0, rs1_h0_val == -129
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x00f7ff0200ff7f;  op2val:0x4010003fff0004
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x00f7ff0200ff7f, 0x4010003fff0004, x30, x1, 416, x7)

inst_42:
// rs1_h1_val == 256, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6040001005555;  op2val:0x4004000080fbff
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xfff6040001005555, 0x4004000080fbff, x30, x1, 432, x7)

inst_43:
// rs1_h1_val == 64, rs2_h2_val == 16384, rs2_h1_val == 32767
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffe00400020;  op2val:0x4040007ffffff7
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xdffffffe00400020, 0x4040007ffffff7, x30, x1, 448, x7)

inst_44:
// rs1_h1_val == 16, rs1_h0_val == 16, rs2_h0_val == -4097, rs1_h2_val == -9
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fff700100010;  op2val:0xffdf4000fdffefff
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x100fff700100010, 0xffdf4000fdffefff, x30, x1, 464, x7)

inst_45:
// rs1_h1_val == 4, rs2_h2_val == -17
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff804000004fbff;  op2val:0x1000ffef0006fffe
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xfff804000004fbff, 0x1000ffef0006fffe, x30, x1, 480, x7)

inst_46:
// rs1_h1_val == 1, rs1_h0_val == -21846
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x00f7ff0001aaaa;  op2val:0x5555fff7ff7f0080
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x00f7ff0001aaaa, 0x5555fff7ff7f0080, x30, x1, 496, x7)

inst_47:
// rs1_h1_val == 0, rs1_h3_val == 16, rs2_h1_val == 4096
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fbff00000002;  op2val:0xfff6004010000009
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x10fbff00000002, 0xfff6004010000009, x30, x1, 512, x7)

inst_48:
// rs1_h1_val == -1, rs1_h0_val == 0, rs2_h1_val == -9
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0001ffff0000;  op2val:0xffbffffffff7ff7f
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x3fff0001ffff0000, 0xffbffffffff7ff7f, x30, x1, 528, x7)

inst_49:
// rs1_h0_val == -16385, rs1_h2_val == -21846, rs2_h1_val == 21845, rs2_h2_val == -513
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6aaaabfffbfff;  op2val:0xfffdfdff5555feff
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xfff6aaaabfffbfff, 0xfffdfdff5555feff, x30, x1, 544, x7)

inst_50:
// rs1_h0_val == -8193, rs2_h1_val == 1024, rs1_h3_val == 512, rs2_h2_val == 32767
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fbfffbffdfff;  op2val:0x097fff0400fff6
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x200fbfffbffdfff, 0x097fff0400fff6, x30, x1, 560, x7)

inst_51:
// rs1_h0_val == -2049, rs1_h3_val == 4096
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000080020f7ff;  op2val:0x08f7fffffc0004
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x100000080020f7ff, 0x08f7fffffc0004, x30, x1, 576, x7)

inst_52:
// rs1_h0_val == -513, rs1_h3_val == 2048
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000042000fdff;  op2val:0x027fff0004c000
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x80000042000fdff, 0x027fff0004c000, x30, x1, 592, x7)

inst_53:
// rs1_h0_val == -257, rs1_h3_val == 32, rs1_h2_val == 128
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000801000feff;  op2val:0x08c00000100080
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x2000801000feff, 0x08c00000100080, x30, x1, 608, x7)

inst_54:
// rs1_h0_val == -5, rs2_h2_val == 512
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff04004000fffb;  op2val:0x040200f7fffffd
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xdfff04004000fffb, 0x040200f7fffffd, x30, x1, 624, x7)

inst_55:
// rs1_h0_val == -2, rs2_h1_val == -32768, rs1_h3_val == 8192, rs1_h1_val == -17
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffbffeffffe;  op2val:0xfffd3fff80007fff
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x2000fffbffeffffe, 0xfffd3fff80007fff, x30, x1, 640, x7)

inst_56:
// rs1_h0_val == 8192, rs2_h0_val == -16385, rs1_h2_val == -1
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffff92000;  op2val:0x08fff9ffbfbfff
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x7ffffffffff92000, 0x08fff9ffbfbfff, x30, x1, 656, x7)

inst_57:
// rs1_h0_val == 4096, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffb00081000;  op2val:0x800f7ff0007fdff
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xfff9fffb00081000, 0x800f7ff0007fdff, x30, x1, 672, x7)

inst_58:
// rs1_h0_val == 2048, rs1_h1_val == -129
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000007ff7f0800;  op2val:0x03efffbfff0040
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x20000007ff7f0800, 0x03efffbfff0040, x30, x1, 688, x7)

inst_59:
// rs1_h0_val == 128, rs2_h0_val == -33, rs1_h3_val == -1, rs2_h3_val == -1
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff5555ffff0080;  op2val:0xffffefff0400ffdf
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xffff5555ffff0080, 0xffffefff0400ffdf, x30, x1, 704, x7)

inst_60:
// rs2_h1_val == 0, rs1_h3_val == -513, rs2_h2_val == -257
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff000900024000;  op2val:0x00feff0000fbff
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xfdff000900024000, 0x00feff0000fbff, x30, x1, 720, x7)

inst_61:
// rs2_h1_val == -1, rs2_h0_val == 16384
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fffcfffcfff8;  op2val:0xfffcffefffff4000
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x09fffcfffcfff8, 0xfffcffefffff4000, x30, x1, 736, x7)

inst_62:
// rs2_h0_val == -21846, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x20c0002000ffef;  op2val:0x0955550005aaaa
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x20c0002000ffef, 0x0955550005aaaa, x30, x1, 752, x7)

inst_63:
// rs2_h0_val == 21845, rs2_h1_val == -8193, rs2_h2_val == 2
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000400fffbffdf;  op2val:0x090002dfff5555
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x8000400fffbffdf, 0x090002dfff5555, x30, x1, 768, x7)

inst_64:
// rs2_h0_val == -65, rs1_h2_val == 32767
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff7fff08000000;  op2val:0xdfff3fff0008ffbf
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xdfff7fff08000000, 0xdfff3fff0008ffbf, x30, x1, 784, x7)

inst_65:
// rs2_h0_val == -17, rs1_h2_val == 2048
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff80800fff6ffef;  op2val:0xfffafff92000ffef
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xfff80800fff6ffef, 0xfffafff92000ffef, x30, x1, 800, x7)

inst_66:
// rs2_h0_val == -5, rs1_h3_val == -5, rs2_h2_val == -32768
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb00070080efff;  op2val:0x8080000400fffb
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xfffb00070080efff, 0x8080000400fffb, x30, x1, 816, x7)

inst_67:
// rs2_h0_val == -32768, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x400005fff9bfff;  op2val:0x800000000208000
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x400005fff9bfff, 0x800000000208000, x30, x1, 832, x7)

inst_68:
// rs2_h0_val == 8192, rs1_h3_val == 128
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x800008c0000100;  op2val:0xfffb000800802000
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x800008c0000100, 0xfffb000800802000, x30, x1, 848, x7)

inst_69:
// rs2_h0_val == 4096, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fffeffef0040;  op2val:0xfdff0010ffff1000
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x05fffeffef0040, 0xfdff0010ffff1000, x30, x1, 864, x7)

inst_70:
// rs2_h0_val == 256, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fff6ffdf0100;  op2val:0x070800fffa0100
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x2000fff6ffdf0100, 0x070800fffa0100, x30, x1, 880, x7)

inst_71:
// rs2_h0_val == 32, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fffbffdf0006;  op2val:0x030080fdff0020
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x05fffbffdf0006, 0x030080fdff0020, x30, x1, 896, x7)

inst_72:
// rs2_h0_val == 2, rs1_h3_val == -21846, rs1_h1_val == -4097
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafdffefff5555;  op2val:0x400fff9f7ff0002
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xaaaafdffefff5555, 0x400fff9f7ff0002, x30, x1, 912, x7)

inst_73:
// rs2_h0_val == 0, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000300100000;  op2val:0x10000355550000
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xf7ff000300100000, 0x10000355550000, x30, x1, 928, x7)

inst_74:
// rs2_h0_val == -1, rs1_h2_val == -17
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000ffeffff94000;  op2val:0xfdff5555fdffffff
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xc000ffeffff94000, 0xfdff5555fdffffff, x30, x1, 944, x7)

inst_75:
// rs1_h3_val == -16385, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff00050040fff8;  op2val:0x06c000fbff0007
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xbfff00050040fff8, 0x06c000fbff0007, x30, x1, 960, x7)

inst_76:
// rs1_h3_val == 1024, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x400bfff0040c000;  op2val:0xffeffffc0000fffb
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x400bfff0040c000, 0xffeffffc0000fffb, x30, x1, 976, x7)

inst_77:
// rs2_h2_val == -1025, rs1_h2_val == -129
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffff7fff7ffff6;  op2val:0x200fbff7fffffbf
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xfdffff7fff7ffff6, 0x200fbff7fffffbf, x30, x1, 992, x7)

inst_78:
// rs1_h3_val == 8, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x08dffffff60004;  op2val:0x03fdff0003feff
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x08dffffff60004, 0x03fdff0003feff, x30, x1, 1008, x7)

inst_79:
// rs1_h3_val == 2, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fffa00070010;  op2val:0xdffffeff00027fff
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x02fffa00070010, 0xdffffeff00027fff, x30, x1, 1024, x7)

inst_80:
// rs2_h2_val == -2, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000007fffa0008;  op2val:0x8000fffe00100006
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x8000007fffa0008, 0x8000fffe00100006, x30, x1, 1040, x7)

inst_81:
// rs2_h2_val == 8192, rs1_h3_val == 16384
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000300040020;  op2val:0xfff620000020fff7
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x4000000300040020, 0xfff620000020fff7, x30, x1, 1056, x7)

inst_82:
// rs1_h2_val == -4097, rs2_h1_val == -5
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000efff0002fffa;  op2val:0x3fff7ffffffbfdff
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x1000efff0002fffa, 0x3fff7ffffffbfdff, x30, x1, 1072, x7)

inst_83:
// rs1_h2_val == -257, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fefffffaefff;  op2val:0xdfff000820000005
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x05fefffffaefff, 0xdfff000820000005, x30, x1, 1088, x7)

inst_84:
// rs1_h2_val == -33, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x04ffdf0100fffa;  op2val:0xfffc0000feff4000
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x04ffdf0100fffa, 0xfffc0000feff4000, x30, x1, 1104, x7)

inst_85:
// rs2_h1_val == -21846, rs1_h1_val == -21846
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x03efffaaaa0002;  op2val:0xfff64000aaaa0000
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x03efffaaaa0002, 0xfff64000aaaa0000, x30, x1, 1120, x7)

inst_86:
// rs1_h2_val == 8192, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x082000fdff0002;  op2val:0x5555fff7dffffff7
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x082000fdff0002, 0x5555fff7dffffff7, x30, x1, 1136, x7)

inst_87:
// rs1_h2_val == 512, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff020004004000;  op2val:0xbffffffd0007f7ff
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xf7ff020004004000, 0xbffffffd0007f7ff, x30, x1, 1152, x7)

inst_88:
// rs2_h1_val == -4097, rs1_h0_val == 1
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x40007fff80000001;  op2val:0xffbfbfffefffbfff
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x40007fff80000001, 0xffbfbfffefffbfff, x30, x1, 1168, x7)

inst_89:
// rs1_h2_val == 256, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc01002000fff7;  op2val:0xfffdffef40000007
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xfffc01002000fff7, 0xfffdffef40000007, x30, x1, 1184, x7)

inst_90:
// rs1_h2_val == 2, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff00027fff0003;  op2val:0xfeff000000200006
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xffff00027fff0003, 0xfeff000000200006, x30, x1, 1200, x7)

inst_91:
// rs1_h3_val == -4097, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0003fdffefff;  op2val:0xc00000072000ffdf
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xefff0003fdffefff, 0xc00000072000ffdf, x30, x1, 1216, x7)

inst_92:
// rs2_h1_val == -17, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x20bfff3fff0003;  op2val:0x7ffffffcffef1000
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x20bfff3fff0003, 0x7ffffffcffef1000, x30, x1, 1232, x7)

inst_93:
// rs1_h2_val == 0, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffafeff;  op2val:0xfff84000fff6ffff
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x040000fffafeff, 0xfff84000fff6ffff, x30, x1, 1248, x7)

inst_94:
// rs2_h1_val == -3, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffa00804000;  op2val:0x2000005fffd0007
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xfffdfffa00804000, 0x2000005fffd0007, x30, x1, 1264, x7)

inst_95:
// rs2_h1_val == -2, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0402000004fdff;  op2val:0xfffb0001fffe0005
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x0402000004fdff, 0xfffb0001fffe0005, x30, x1, 1280, x7)

inst_96:
// rs1_h1_val == -8193, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd5555dfff5555;  op2val:0x04dffffffd0009
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xfffd5555dfff5555, 0x04dffffffd0009, x30, x1, 1296, x7)

inst_97:
// rs1_h1_val == -2049, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0003f7ff0080;  op2val:0xffffff7ffdffaaaa
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xfffd0003f7ff0080, 0xffffff7ffdffaaaa, x30, x1, 1312, x7)

inst_98:
// rs1_h1_val == -257, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd7ffffeff0800;  op2val:0x3fff40000008fffb
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xfffd7ffffeff0800, 0x3fff40000008fffb, x30, x1, 1328, x7)

inst_99:
// rs2_h1_val == 64, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffebfff00020040;  op2val:0x03fffe0040ffef
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xfffebfff00020040, 0x03fffe0040ffef, x30, x1, 1344, x7)

inst_100:
// rs2_h2_val == -21846, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0355553ffffff6;  op2val:0x2000aaaaaaaa7fff
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x0355553ffffff6, 0x2000aaaaaaaa7fff, x30, x1, 1360, x7)

inst_101:
// rs1_h1_val == -9, 
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9f7fffff7fdff;  op2val:0xfff7ffff02000020
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xfff9f7fffff7fdff, 0xfff7ffff02000020, x30, x1, 1376, x7)

inst_102:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 256, rs2_h0_val == -8193, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h2_val == -5, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 32767, rs1_h0_val == -1, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 2048, rs1_h2_val == -2, rs2_h3_val == -4097
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fffe7fffffff;  op2val:0xeffffffb0800dfff
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x100fffe7fffffff, 0xeffffffb0800dfff, x30, x1, 1392, x7)

inst_103:
// rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h0_val == -65, rs2_h2_val == -4097, rs1_h3_val == 1, rs2_h0_val == -257, rs2_h3_val == 4096, rs1_h1_val == 2, rs2_h1_val == 512
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x01f7ff0002ffbf;  op2val:0x1000efff0200feff
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0x01f7ff0002ffbf, 0x1000efff0200feff, x30, x1, 1408, x7)

inst_104:
// rs2_h3_val == -2049, rs2_h2_val == 4, rs2_h0_val == 1
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffd0002ffff;  op2val:0xf7ff000400090001
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xfffdfffd0002ffff, 0xf7ff000400090001, x30, x1, 1424, x7)

inst_105:
// rs2_h3_val == 256, rs2_h0_val == 64, rs2_h1_val == 256
// opcode: kadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f3fff8000ffef;  op2val:0x100000001000040
TEST_PKRR_OP(kadd16, x31, x30, x29, 0x0000000000000000, 0xff7f3fff8000ffef, 0x100000001000040, x30, x1, 1440, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 182*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
