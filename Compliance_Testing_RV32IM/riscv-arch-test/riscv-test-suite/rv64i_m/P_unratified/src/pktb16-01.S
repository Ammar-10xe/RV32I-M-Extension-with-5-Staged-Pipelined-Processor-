
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pktb16 instruction of the RISC-V RV64PZicsr extension for the pktb16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pktb16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x4, rs2==x1, rd==x4, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 16, rs1_h1_val == 64511, rs2_h0_val == 512, rs2_h1_val == 8, rs1_h3_val == 128, rs1_h2_val == 16, rs2_h2_val == 32768
// opcode: pktb16 ; op1:x4; op2:x1; dest:x4; op1val:0x800010fbff0000;  op2val:0x10800000080200
TEST_RR_OP(pktb16, x4, x4, x1, 0x0000000000000000, 0x800010fbff0000, 0x10800000080200, x7, 0, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x1, rs2==x6, rd==x13, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h0_val == 8, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h2_val == 8, rs1_h1_val == 65533, rs2_h1_val == 65471
// opcode: pktb16 ; op1:x1; op2:x6; dest:x13; op1val:0x110011fffd0008;  op2val:0x110008ffbf0200
TEST_RR_OP(pktb16, x13, x1, x6, 0x0000000000000000, 0x110011fffd0008, 0x110008ffbf0200, x7, 8, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x0, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 65519, rs2_h2_val == 65519, rs2_h0_val == 43690, rs1_h0_val == 21845
// opcode: pktb16 ; op1:x30; op2:x30; dest:x0; op1val:0x0fffef00135555;  op2val:0x0effef0012aaaa
TEST_RR_OP(pktb16, x0, x30, x30, 0x0000000000000000, 0x0fffef00135555, 0x0effef0012aaaa, x7, 16, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x29, rs2==x29, rd==x29, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 8192, rs1_h1_val == 8192, rs1_h2_val == 256, rs2_h0_val == 21845, rs2_h3_val == 65519, rs2_h2_val == 65527
// opcode: pktb16 ; op1:x29; op2:x29; dest:x29; op1val:0x0c010020000008;  op2val:0xffeffff720005555
TEST_RR_OP(pktb16, x29, x29, x29, 0x0000000000000000, 0x0c010020000008, 0xffeffff720005555, x7, 24, x8)

inst_4:
// rs2 == rd != rs1, rs1==x2, rs2==x27, rd==x27, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h3_val == 64511, rs2_h1_val == 2048, rs1_h0_val == 63487, rs2_h2_val == 1, rs1_h2_val == 4096, rs2_h3_val == 65527, rs2_h0_val == 63487
// opcode: pktb16 ; op1:x2; op2:x27; dest:x27; op1val:0xfbff10000006f7ff;  op2val:0xfff700010800f7ff
TEST_RR_OP(pktb16, x27, x2, x27, 0x0000000000000000, 0xfbff10000006f7ff, 0xfff700010800f7ff, x7, 32, x8)

inst_5:
// rs1==x22, rs2==x12, rd==x23, rs2_h3_val == 43690, rs2_h0_val == 16384, rs1_h0_val == 16, rs2_h2_val == 2048, rs1_h1_val == 0
// opcode: pktb16 ; op1:x22; op2:x12; dest:x23; op1val:0x0f000300000010;  op2val:0xaaaa080000054000
TEST_RR_OP(pktb16, x23, x22, x12, 0x0000000000000000, 0x0f000300000010, 0xaaaa080000054000, x7, 40, x8)

inst_6:
// rs1==x20, rs2==x9, rd==x15, rs2_h3_val == 21845, rs1_h3_val == 65531, rs1_h0_val == 65279, rs2_h0_val == 256, rs2_h1_val == 4, rs1_h1_val == 4096
// opcode: pktb16 ; op1:x20; op2:x9; dest:x15; op1val:0xfffb00121000feff;  op2val:0x5555000a00040100
TEST_RR_OP(pktb16, x15, x20, x9, 0x0000000000000000, 0xfffb00121000feff, 0x5555000a00040100, x7, 48, x8)

inst_7:
// rs1==x23, rs2==x4, rd==x16, rs2_h3_val == 32767, rs2_h1_val == 65533, rs2_h2_val == 61439, rs1_h1_val == 128, rs1_h0_val == 256, rs1_h2_val == 65535
// opcode: pktb16 ; op1:x23; op2:x4; dest:x16; op1val:0x09ffff00800100;  op2val:0x7fffeffffffd000a
TEST_RR_OP(pktb16, x16, x23, x4, 0x0000000000000000, 0x09ffff00800100, 0x7fffeffffffd000a, x7, 56, x8)

inst_8:
// rs1==x13, rs2==x3, rd==x24, rs2_h3_val == 49151, rs2_h1_val == 16384, rs2_h0_val == 32768, rs2_h2_val == 64, rs1_h3_val == 1024, rs1_h0_val == 32768, rs1_h2_val == 21845
// opcode: pktb16 ; op1:x13; op2:x3; dest:x24; op1val:0x400555500118000;  op2val:0xbfff004040008000
TEST_RR_OP(pktb16, x24, x13, x3, 0x0000000000000000, 0x400555500118000, 0xbfff004040008000, x7, 64, x8)

inst_9:
// rs1==x6, rs2==x17, rd==x11, rs2_h3_val == 57343, rs2_h2_val == 4096, rs1_h0_val == 4, rs1_h3_val == 65503, rs1_h2_val == 32768, rs2_h1_val == 32767
// opcode: pktb16 ; op1:x6; op2:x17; dest:x11; op1val:0xffdf8000000a0004;  op2val:0xdfff10007fff0100
TEST_RR_OP(pktb16, x11, x6, x17, 0x0000000000000000, 0xffdf8000000a0004, 0xdfff10007fff0100, x7, 72, x8)

inst_10:
// rs1==x21, rs2==x5, rd==x18, rs2_h3_val == 61439, rs1_h2_val == 2, rs1_h0_val == 1024, rs2_h1_val == 32, rs1_h3_val == 57343
// opcode: pktb16 ; op1:x21; op2:x5; dest:x18; op1val:0xdfff000200000400;  op2val:0xefff000d0020000e
TEST_RR_OP(pktb16, x18, x21, x5, 0x0000000000000000, 0xdfff000200000400, 0xefff000d0020000e, x7, 80, x8)

inst_11:
// rs1==x10, rs2==x15, rd==x5, rs2_h3_val == 63487, rs2_h0_val == 65471, rs1_h0_val == 32, rs2_h1_val == 0
// opcode: pktb16 ; op1:x10; op2:x15; dest:x5; op1val:0x07001120000020;  op2val:0xf7ff00130000ffbf
TEST_RR_OP(pktb16, x5, x10, x15, 0x0000000000000000, 0x07001120000020, 0xf7ff00130000ffbf, x7, 88, x8)

inst_12:
// rs1==x16, rs2==x24, rd==x25, rs2_h3_val == 64511, rs1_h3_val == 0, rs1_h1_val == 21845, rs2_h2_val == 64511
// opcode: pktb16 ; op1:x16; op2:x24; dest:x25; op1val:0x00001255555555;  op2val:0xfbfffbff0012000e
TEST_RR_OP(pktb16, x25, x16, x24, 0x0000000000000000, 0x00001255555555, 0xfbfffbff0012000e, x7, 96, x8)

inst_13:
// rs1==x14, rs2==x19, rd==x31, rs2_h3_val == 65023, rs1_h2_val == 65471, rs1_h3_val == 32768, rs1_h0_val == 65023, rs1_h1_val == 65527
// opcode: pktb16 ; op1:x14; op2:x19; dest:x31; op1val:0x8000ffbffff7fdff;  op2val:0xfdff0008ffbf4000
TEST_RR_OP(pktb16, x31, x14, x19, 0x0000000000000000, 0x8000ffbffff7fdff, 0xfdff0008ffbf4000, x7, 104, x8)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_14:
// rs1==x15, rs2==x16, rd==x3, rs2_h3_val == 65279, rs2_h1_val == 65519, rs2_h0_val == 64511, rs1_h0_val == 2, rs2_h2_val == 256
// opcode: pktb16 ; op1:x15; op2:x16; dest:x3; op1val:0x12000600090002;  op2val:0xfeff0100ffeffbff
TEST_RR_OP(pktb16, x3, x15, x16, 0x0000000000000000, 0x12000600090002, 0xfeff0100ffeffbff, x4, 0, x6)

inst_15:
// rs1==x12, rs2==x7, rd==x8, rs2_h3_val == 65407, rs1_h1_val == 65023, rs1_h3_val == 4096
// opcode: pktb16 ; op1:x12; op2:x7; dest:x8; op1val:0x1000ffbffdff0020;  op2val:0xff7ffbfffffd8000
TEST_RR_OP(pktb16, x8, x12, x7, 0x0000000000000000, 0x1000ffbffdff0020, 0xff7ffbfffffd8000, x4, 8, x6)

inst_16:
// rs1==x26, rs2==x14, rd==x17, rs2_h3_val == 65471, rs1_h2_val == 49151, rs2_h0_val == 65407
// opcode: pktb16 ; op1:x26; op2:x14; dest:x17; op1val:0x00bfff000bf7ff;  op2val:0xffbf10000008ff7f
TEST_RR_OP(pktb16, x17, x26, x14, 0x0000000000000000, 0x00bfff000bf7ff, 0xffbf10000008ff7f, x4, 16, x6)

inst_17:
// rs1==x19, rs2==x20, rd==x2, rs2_h3_val == 65503, rs1_h1_val == 43690, rs2_h1_val == 65534, rs1_h2_val == 65407, rs1_h0_val == 65531, rs1_h3_val == 32767, rs2_h0_val == 65023
// opcode: pktb16 ; op1:x19; op2:x20; dest:x2; op1val:0x7fffff7faaaafffb;  op2val:0xffdfeffffffefdff
TEST_RR_OP(pktb16, x2, x19, x20, 0x0000000000000000, 0x7fffff7faaaafffb, 0xffdfeffffffefdff, x4, 24, x6)

inst_18:
// rs1==x18, rs2==x31, rd==x21, rs2_h3_val == 65531, rs1_h0_val == 57343, rs2_h1_val == 65279, rs1_h1_val == 65519, rs1_h3_val == 21845
// opcode: pktb16 ; op1:x18; op2:x31; dest:x21; op1val:0x55550005ffefdfff;  op2val:0xfffb000efeff0011
TEST_RR_OP(pktb16, x21, x18, x31, 0x0000000000000000, 0x55550005ffefdfff, 0xfffb000efeff0011, x4, 32, x6)

inst_19:
// rs1==x25, rs2==x23, rd==x12, rs2_h3_val == 65533, rs2_h1_val == 256, rs1_h0_val == 61439, rs1_h2_val == 1024, rs2_h2_val == 65471, rs1_h1_val == 512
// opcode: pktb16 ; op1:x25; op2:x23; dest:x12; op1val:0x8004000200efff;  op2val:0xfffdffbf0100000e
TEST_RR_OP(pktb16, x12, x25, x23, 0x0000000000000000, 0x8004000200efff, 0xfffdffbf0100000e, x4, 40, x6)

inst_20:
// rs1==x31, rs2==x10, rd==x26, rs2_h3_val == 65534, rs2_h1_val == 65531, rs1_h3_val == 65279, rs2_h2_val == 16, rs1_h1_val == 65471, rs1_h0_val == 8192, rs1_h2_val == 32767
// opcode: pktb16 ; op1:x31; op2:x10; dest:x26; op1val:0xfeff7fffffbf2000;  op2val:0xfffe0010fffb000f
TEST_RR_OP(pktb16, x26, x31, x10, 0x0000000000000000, 0xfeff7fffffbf2000, 0xfffe0010fffb000f, x4, 48, x6)

inst_21:
// rs1==x11, rs2==x13, rd==x28, rs2_h3_val == 32768, rs1_h2_val == 65023, rs1_h1_val == 65279, rs2_h1_val == 64, rs1_h0_val == 4096, rs2_h2_val == 65533
// opcode: pktb16 ; op1:x11; op2:x13; dest:x28; op1val:0xdffffdfffeff1000;  op2val:0x8000fffd0040fdff
TEST_RR_OP(pktb16, x28, x11, x13, 0x0000000000000000, 0xdffffdfffeff1000, 0x8000fffd0040fdff, x4, 56, x6)

inst_22:
// rs1==x27, rs2==x26, rd==x10, rs2_h3_val == 16384, rs1_h3_val == 65533, rs1_h2_val == 512
// opcode: pktb16 ; op1:x27; op2:x26; dest:x10; op1val:0xfffd0200fbff0010;  op2val:0x4000000300200011
TEST_RR_OP(pktb16, x10, x27, x26, 0x0000000000000000, 0xfffd0200fbff0010, 0x4000000300200011, x4, 64, x6)

inst_23:
// rs1==x7, rs2==x28, rd==x14, rs2_h3_val == 8192, rs1_h2_val == 64, rs2_h2_val == 8192, rs1_h3_val == 2, rs2_h0_val == 4
// opcode: pktb16 ; op1:x7; op2:x28; dest:x14; op1val:0x020040000c000d;  op2val:0x20002000000e0004
TEST_RR_OP(pktb16, x14, x7, x28, 0x0000000000000000, 0x020040000c000d, 0x20002000000e0004, x4, 72, x6)

inst_24:
// rs1==x0, rs2==x22, rd==x7, rs2_h3_val == 4096, rs1_h3_val == 1, rs1_h2_val == 65527
// opcode: pktb16 ; op1:x0; op2:x22; dest:x7; op1val:0x01fff700050004;  op2val:0x10000006000e000d
TEST_RR_OP(pktb16, x7, x0, x22, 0x0000000000000000, 0x01fff700050004, 0x10000006000e000d, x4, 80, x6)

inst_25:
// rs1==x5, rs2==x0, rd==x20, rs2_h3_val == 2048, rs2_h0_val == 65503, rs1_h0_val == 65519, rs1_h2_val == 65534
// opcode: pktb16 ; op1:x5; op2:x0; dest:x20; op1val:0x09fffe0011ffef;  op2val:0x80000067fffffdf
TEST_RR_OP(pktb16, x20, x5, x0, 0x0000000000000000, 0x09fffe0011ffef, 0x80000067fffffdf, x4, 88, x6)

inst_26:
// rs1==x28, rs2==x18, rd==x1, rs2_h3_val == 1024, rs2_h0_val == 65527, rs2_h2_val == 65023
// opcode: pktb16 ; op1:x28; op2:x18; dest:x1; op1val:0x80000dffef0002;  op2val:0x400fdff0012fff7
TEST_RR_OP(pktb16, x1, x28, x18, 0x0000000000000000, 0x80000dffef0002, 0x400fdff0012fff7, x4, 96, x6)

inst_27:
// rs1==x17, rs2==x2, rd==x19, rs2_h3_val == 512, rs1_h2_val == 16384, rs2_h0_val == 1024, rs2_h2_val == 2, rs2_h1_val == 4096
// opcode: pktb16 ; op1:x17; op2:x2; dest:x19; op1val:0x1000400000800011;  op2val:0x200000210000400
TEST_RR_OP(pktb16, x19, x17, x2, 0x0000000000000000, 0x1000400000800011, 0x200000210000400, x4, 104, x6)

inst_28:
// rs1==x9, rs2==x25, rd==x30, rs2_h3_val == 256, rs1_h2_val == 57343, rs2_h1_val == 128, rs2_h0_val == 2048, rs1_h1_val == 8
// opcode: pktb16 ; op1:x9; op2:x25; dest:x30; op1val:0x5555dfff0008fffb;  op2val:0x100000700800800
TEST_RR_OP(pktb16, x30, x9, x25, 0x0000000000000000, 0x5555dfff0008fffb, 0x100000700800800, x4, 112, x6)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x8, rs2==x11, rd==x9, rs2_h3_val == 128, rs2_h2_val == 4, rs2_h1_val == 63487
// opcode: pktb16 ; op1:x8; op2:x11; dest:x9; op1val:0x06000a00050004;  op2val:0x800004f7ff0009
TEST_RR_OP(pktb16, x9, x8, x11, 0x0000000000000000, 0x06000a00050004, 0x800004f7ff0009, x1, 0, x2)

inst_30:
// rs1==x3, rs2==x8, rd==x22, rs2_h3_val == 64, rs2_h0_val == 61439
// opcode: pktb16 ; op1:x3; op2:x8; dest:x22; op1val:0x400fff700120006;  op2val:0x4000091000efff
TEST_RR_OP(pktb16, x22, x3, x8, 0x0000000000000000, 0x400fff700120006, 0x4000091000efff, x1, 8, x2)

inst_31:
// rs1==x24, rs2==x21, rd==x6, rs2_h3_val == 32, rs2_h0_val == 65519
// opcode: pktb16 ; op1:x24; op2:x21; dest:x6; op1val:0x7fff010000800005;  op2val:0x20fdff000cffef
TEST_RR_OP(pktb16, x6, x24, x21, 0x0000000000000000, 0x7fff010000800005, 0x20fdff000cffef, x1, 16, x2)

inst_32:
// rs2_h3_val == 8, rs1_h0_val == 65527, rs2_h2_val == 1024, rs1_h3_val == 61439, rs1_h1_val == 2048
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff000e0800fff7;  op2val:0x08040000080013
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xefff000e0800fff7, 0x08040000080013, x1, 24, x2)

inst_33:
// rs2_h3_val == 4, rs1_h1_val == 16384, rs1_h2_val == 128
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff00804000fffb;  op2val:0x04ffef0040000a
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x7fff00804000fffb, 0x04ffef0040000a, x1, 32, x2)

inst_34:
// rs2_h3_val == 2, rs1_h1_val == 65503
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0adfffffdf000b;  op2val:0x0200070009ffdf
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x0adfffffdf000b, 0x0200070009ffdf, x1, 40, x2)

inst_35:
// rs1_h1_val == 4, rs2_h0_val == 128, rs2_h2_val == 32, rs1_h2_val == 2048, rs1_h0_val == 65407
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd08000004ff7f;  op2val:0x10000020000e0080
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xfffd08000004ff7f, 0x10000020000e0080, x1, 48, x2)

inst_36:
// rs1_h1_val == 2, rs2_h1_val == 1024, rs1_h0_val == 2048, rs2_h0_val == 0, rs1_h3_val == 16
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000900020800;  op2val:0x7fff000d04000000
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x10000900020800, 0x7fff000d04000000, x1, 56, x2)

inst_37:
// rs1_h1_val == 1, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x05000500010800;  op2val:0x4004002000efff
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x05000500010800, 0x4004002000efff, x1, 64, x2)

inst_38:
// rs1_h1_val == 65535, rs2_h3_val == 0
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550002ffff000b;  op2val:0x000004000afbff
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x55550002ffff000b, 0x000004000afbff, x1, 72, x2)

inst_39:
// rs1_h0_val == 43690, rs2_h1_val == 21845, rs1_h2_val == 43690
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffaaaafeffaaaa;  op2val:0xffdf000a5555000a
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xfeffaaaafeffaaaa, 0xffdf000a5555000a, x1, 80, x2)

inst_40:
// rs1_h0_val == 32767, rs2_h0_val == 65534
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000efbff7fff;  op2val:0xfffb0012000cfffe
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xffdf000efbff7fff, 0xfffb0012000cfffe, x1, 88, x2)

inst_41:
// rs1_h0_val == 49151, rs2_h0_val == 57343, rs1_h3_val == 65534, rs2_h2_val == 65531, rs1_h1_val == 64
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe40000040bfff;  op2val:0xaaaafffb0008dfff
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xfffe40000040bfff, 0xaaaafffb0008dfff, x1, 96, x2)

inst_42:
// rs1_h0_val == 64511, rs2_h3_val == 1, rs1_h1_val == 63487
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c0080f7fffbff;  op2val:0x010040ffef0004
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x0c0080f7fffbff, 0x010040ffef0004, x1, 104, x2)

inst_43:
// rs1_h0_val == 65471, rs2_h0_val == 65535
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d0002ffefffbf;  op2val:0xffdffffbfffdffff
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x0d0002ffefffbf, 0xffdffffbfffdffff, x1, 112, x2)

inst_44:
// rs1_h0_val == 65503, rs2_h2_val == 65503, rs1_h2_val == 65503
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0effdfffdfffdf;  op2val:0x2000ffdfffbf0011
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x0effdfffdfffdf, 0x2000ffdfffbf0011, x1, 120, x2)

inst_45:
// rs1_h0_val == 65533, rs2_h1_val == 65527
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x40001000040fffd;  op2val:0xfff70001fff70004
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x40001000040fffd, 0xfff70001fff70004, x1, 128, x2)

inst_46:
// rs1_h0_val == 65534, rs2_h2_val == 0
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffbf0006fffe;  op2val:0x1000000011000d
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xfffdffbf0006fffe, 0x1000000011000d, x1, 136, x2)

inst_47:
// rs1_h0_val == 16384, rs2_h1_val == 65023
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffff7ff4000;  op2val:0x100fff7fdff000a
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xfffefffff7ff4000, 0x100fff7fdff000a, x1, 144, x2)

inst_48:
// rs1_h0_val == 512, rs2_h1_val == 2, rs1_h3_val == 65407
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f800010000200;  op2val:0x200008000002000a
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xff7f800010000200, 0x200008000002000a, x1, 152, x2)

inst_49:
// rs1_h0_val == 128, rs1_h2_val == 8
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000800110080;  op2val:0x080100fdff0200
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x80000800110080, 0x080100fdff0200, x1, 160, x2)

inst_50:
// rs1_h0_val == 64, rs2_h2_val == 16384, rs2_h0_val == 32, rs2_h1_val == 61439
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffff740000040;  op2val:0xfffb4000efff0020
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xfbfffff740000040, 0xfffb4000efff0020, x1, 168, x2)

inst_51:
// rs1_h0_val == 1, rs1_h2_val == 1
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x06000155550001;  op2val:0xfff780004000000b
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x06000155550001, 0xfff780004000000b, x1, 176, x2)

inst_52:
// rs1_h0_val == 65535, rs2_h1_val == 64511, rs1_h3_val == 256
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000020007ffff;  op2val:0x4000040fbfffdff
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x10000020007ffff, 0x4000040fbfffdff, x1, 184, x2)

inst_53:
// rs2_h3_val == 65535, rs1_h1_val == 256, rs1_h3_val == 65519
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef08000100fbff;  op2val:0xffff08007ffffdff
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xffef08000100fbff, 0xffff08007ffffdff, x1, 192, x2)

inst_54:
// rs2_h2_val == 43690, rs1_h2_val == 61439, rs2_h0_val == 65531
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffefff00055555;  op2val:0x40aaaaf7fffffb
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xefffefff00055555, 0x40aaaaf7fffffb, x1, 200, x2)

inst_55:
// rs2_h2_val == 21845, rs2_h0_val == 65533, rs1_h3_val == 63487
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffe00040011;  op2val:0xff7f55555555fffd
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xf7fffffe00040011, 0xff7f55555555fffd, x1, 208, x2)

inst_56:
// rs2_h2_val == 32767, rs1_h1_val == 65534
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0effdffffeffff;  op2val:0x40007ffffbffdfff
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x0effdffffeffff, 0x40007ffffbffdfff, x1, 216, x2)

inst_57:
// rs2_h0_val == 8192, rs2_h2_val == 57343, rs1_h1_val == 32
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x80dfff00200100;  op2val:0xfffbdfff00022000
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x80dfff00200100, 0xfffbdfff00022000, x1, 224, x2)

inst_58:
// rs2_h0_val == 4096, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff000a00050012;  op2val:0x0c100000111000
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xefff000a00050012, 0x0c100000111000, x1, 232, x2)

inst_59:
// rs2_h0_val == 64, rs1_h1_val == 65407
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffffff7f0008;  op2val:0xefff0005fffe0040
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x02ffffff7f0008, 0xefff0005fffe0040, x1, 240, x2)

inst_60:
// rs2_h0_val == 16, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e7ffffffd0013;  op2val:0x200001200030010
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x0e7ffffffd0013, 0x200001200030010, x1, 248, x2)

inst_61:
// rs2_h0_val == 8, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0002000d0080;  op2val:0x09fffb20000008
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xfffd0002000d0080, 0x09fffb20000008, x1, 256, x2)

inst_62:
// rs2_h0_val == 2, rs1_h2_val == 4, rs2_h1_val == 16, rs1_h1_val == 16
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000400100004;  op2val:0xfffe400000100002
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xffdf000400100004, 0xfffe400000100002, x1, 264, x2)

inst_63:
// rs2_h0_val == 1, rs2_h1_val == 57343
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f00060000aaaa;  op2val:0x40000006dfff0001
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xff7f00060000aaaa, 0x40000006dfff0001, x1, 272, x2)

inst_64:
// rs1_h3_val == 43690, rs2_h2_val == 65279
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0001000caaaa;  op2val:0xfefffeff0020fffd
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xaaaa0001000caaaa, 0xfefffeff0020fffd, x1, 280, x2)

inst_65:
// rs1_h3_val == 49151, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffdfff0001000b;  op2val:0xfbff00000800efff
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xbfffdfff0001000b, 0xfbff00000800efff, x1, 288, x2)

inst_66:
// rs1_h3_val == 65023, rs1_h2_val == 65533, rs2_h2_val == 65534, rs2_h0_val == 32767
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffd0040fbff;  op2val:0x0efffe000b7fff
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xfdfffffd0040fbff, 0x0efffe000b7fff, x1, 296, x2)

inst_67:
// rs1_h3_val == 65471, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00090008000f;  op2val:0xfffdfdff0004000c
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xffbf00090008000f, 0xfffdfdff0004000c, x1, 304, x2)

inst_68:
// rs1_h3_val == 65527, rs1_h2_val == 32, rs2_h0_val == 65279, rs2_h2_val == 128
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff700200004ffdf;  op2val:0x0a0080fffefeff
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xfff700200004ffdf, 0x0a0080fffefeff, x1, 312, x2)

inst_69:
// rs1_h3_val == 16384, rs1_h2_val == 65531
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffb0020fdff;  op2val:0x1007fff0400000c
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x4000fffb0020fdff, 0x1007fff0400000c, x1, 320, x2)

inst_70:
// rs1_h3_val == 8192, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fff700090007;  op2val:0xaaaafff720000000
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x2000fff700090007, 0xaaaafff720000000, x1, 328, x2)

inst_71:
// rs1_h3_val == 2048, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x800fff7fff70002;  op2val:0x80000f0013fff7
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x800fff7fff70002, 0x80000f0013fff7, x1, 336, x2)

inst_72:
// rs2_h2_val == 49151, rs1_h3_val == 65535
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffef0007;  op2val:0xfbffbfff00400011
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xffffffbfffef0007, 0xfbffbfff00400011, x1, 344, x2)

inst_73:
// rs1_h2_val == 63487, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdf7ff000ffbff;  op2val:0x0c000ffeff0080
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xfffdf7ff000ffbff, 0x0c000ffeff0080, x1, 352, x2)

inst_74:
// rs1_h2_val == 64511, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafbff00010004;  op2val:0xff7f555500090012
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xaaaafbff00010004, 0xff7f555500090012, x1, 360, x2)

inst_75:
// rs2_h2_val == 512, rs2_h1_val == 1
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0a0013000c0005;  op2val:0x09020000010006
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x0a0013000c0005, 0x09020000010006, x1, 368, x2)

inst_76:
// rs1_h2_val == 65279, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7feffffef7fff;  op2val:0x8000000d0011ffff
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xfff7feffffef7fff, 0x8000000d0011ffff, x1, 376, x2)

inst_77:
// rs2_h2_val == 65535, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x05ff7f00808000;  op2val:0x80ffff000d0013
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x05ff7f00808000, 0x80ffff000d0013, x1, 384, x2)

inst_78:
// rs2_h1_val == 43690, rs1_h3_val == 8
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x08020000000001;  op2val:0x0cfffeaaaa0010
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x08020000000001, 0x0cfffeaaaa0010, x1, 392, x2)

inst_79:
// rs1_h2_val == 8192, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x01200000110020;  op2val:0x0c0006000f0800
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x01200000110020, 0x0c0006000f0800, x1, 400, x2)

inst_80:
// rs2_h1_val == 49151, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffefffe7fff;  op2val:0x090002bfff0006
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xffdffffefffe7fff, 0x090002bfff0006, x1, 408, x2)

inst_81:
// rs2_h1_val == 65407, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff00200009fffd;  op2val:0x7ffffff7ff7f0006
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x7fff00200009fffd, 0x7ffffff7ff7f0006, x1, 416, x2)

inst_82:
// rs2_h1_val == 65503, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000ffff000f0080;  op2val:0x080013ffdf0004
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x4000ffff000f0080, 0x080013ffdf0004, x1, 424, x2)

inst_83:
// rs2_h0_val == 49151, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff7000e0013;  op2val:0x55550011fdffbfff
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xffdffff7000e0013, 0x55550011fdffbfff, x1, 432, x2)

inst_84:
// rs1_h3_val == 4, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x04001100800001;  op2val:0x09080000041000
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x04001100800001, 0x09080000041000, x1, 440, x2)

inst_85:
// rs1_h2_val == 0, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000ff7f7fff;  op2val:0x13001308000800
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x1000000ff7f7fff, 0x13001308000800, x1, 448, x2)

inst_86:
// rs2_h1_val == 32768, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000800f7ff0013;  op2val:0x02001280000002
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x20000800f7ff0013, 0x02001280000002, x1, 456, x2)

inst_87:
// rs1_h1_val == 32767, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0effff7fff0100;  op2val:0x0c55550100feff
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x0effff7fff0100, 0x0c55550100feff, x1, 464, x2)

inst_88:
// rs1_h1_val == 49151, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x027fffbfffaaaa;  op2val:0x0000202000ff7f
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x027fffbfffaaaa, 0x0000202000ff7f, x1, 472, x2)

inst_89:
// rs1_h1_val == 57343, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0a5555dffffff7;  op2val:0xffdfffbfbfff0800
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x0a5555dffffff7, 0xffdfffbfbfff0800, x1, 480, x2)

inst_90:
// rs1_h1_val == 61439, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fdfffefffdfff;  op2val:0x0000200040fffe
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xff7fdfffefffdfff, 0x0000200040fffe, x1, 488, x2)

inst_91:
// rs2_h1_val == 512, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0010000a0800;  op2val:0x02020002000012
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0xbfff0010000a0800, 0x02020002000012, x1, 496, x2)

inst_92:
// rs1_h1_val == 65531, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000400fffb0001;  op2val:0x0ffffd00120000
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x40000400fffb0001, 0x0ffffd00120000, x1, 504, x2)

inst_93:
// rs1_h3_val == 512, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000030040dfff;  op2val:0x0f00080009000c
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x20000030040dfff, 0x0f00080009000c, x1, 512, x2)

inst_94:
// rs2_h2_val == 63487, rs1_h1_val == 1024
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000204000080;  op2val:0xfffbf7ff00098000
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x1000000204000080, 0xfffbf7ff00098000, x1, 520, x2)

inst_95:
// rs1_h1_val == 32768, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fbff80000012;  op2val:0x03fffe000afff7
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x80fbff80000012, 0x03fffe000afff7, x1, 528, x2)

inst_96:
// rs2_h1_val == 65535, rs1_h3_val == 64
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000bfff7fffb;  op2val:0x070008ffff0000
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x40000bfff7fffb, 0x070008ffff0000, x1, 536, x2)

inst_97:
// rs1_h3_val == 32, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fff72000fffb;  op2val:0x100fffd000e0400
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x20fff72000fffb, 0x100fffd000e0400, x1, 544, x2)

inst_98:
// rs2_h2_val == 65407, 
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000001200400010;  op2val:0x40ff7f0005ffdf
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x4000001200400010, 0x40ff7f0005ffdf, x1, 552, x2)

inst_99:
// rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 65519, rs2_h2_val == 65519, rs2_h0_val == 43690, rs1_h0_val == 21845
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0fffef00135555;  op2val:0x0effef0012aaaa
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x0fffef00135555, 0x0effef0012aaaa, x1, 560, x2)

inst_100:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 8192, rs1_h1_val == 8192, rs1_h2_val == 256, rs2_h0_val == 21845, rs2_h3_val == 65519, rs2_h2_val == 65527
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c010020000008;  op2val:0xffeffff720005555
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x0c010020000008, 0xffeffff720005555, x1, 568, x2)

inst_101:
// rs2_h3_val == 2048, rs2_h0_val == 65503, rs1_h0_val == 65519, rs1_h2_val == 65534
// opcode: pktb16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fffe0011ffef;  op2val:0x80000067fffffdf
TEST_RR_OP(pktb16, x31, x30, x29, 0x0000000000000000, 0x09fffe0011ffef, 0x80000067fffffdf, x1, 576, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 73*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
