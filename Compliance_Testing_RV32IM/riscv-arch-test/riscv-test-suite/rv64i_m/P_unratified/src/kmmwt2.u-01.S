
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmmwt2.u instruction of the RISC-V RV64PZicsr extension for the kmmwt2.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmmwt2.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x12,signature_x12_1)

inst_0:
// rs1 == rd != rs2, rs1==x31, rs2==x28, rd==x31, rs1_w0_val == -2147483648, rs2_h2_val == 32767, rs2_h1_val == -2, rs1_w1_val == 4194304, rs2_h3_val == 32, rs2_h0_val == -2
// opcode: kmmwt2.u ; op1:x31; op2:x28; dest:x31; op1val:0x40000080000000;  op2val:0x207ffffffefffe
TEST_PKRR_OP(kmmwt2.u, x31, x31, x28, 0x0000000000000000, 0x40000080000000, 0x207ffffffefffe, x31, x12, 0, x14)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x24, rd==x25, rs2_h3_val == -21846, rs2_h0_val == 21845, rs2_h1_val == -1, rs2_h2_val == 21845
// opcode: kmmwt2.u ; op1:x23; op2:x24; dest:x25; op1val:0x00000600000003;  op2val:0xaaaa5555ffff5555
TEST_PKRR_OP(kmmwt2.u, x25, x23, x24, 0x0000000000000000, 0x00000600000003, 0xaaaa5555ffff5555, x23, x12, 16, x14)

inst_2:
// rs1 == rs2 != rd, rs1==x7, rs2==x7, rd==x11, rs2_h3_val == 21845, rs1_w0_val == 1073741824, rs2_h0_val == -3, rs1_w1_val == -8193
// opcode: kmmwt2.u ; op1:x7; op2:x7; dest:x11; op1val:0xffffdfff40000000;  op2val:0x555555550003fffd
TEST_PKRR_OP(kmmwt2.u, x11, x7, x7, 0x0000000000000000, 0xffffdfff40000000, 0x555555550003fffd, x7, x12, 32, x14)

inst_3:
// rs1 == rs2 == rd, rs1==x19, rs2==x19, rd==x19, rs2_h3_val == 32767, rs2_h2_val == -2
// opcode: kmmwt2.u ; op1:x19; op2:x19; dest:x19; op1val:0xffffdffffffffff6;  op2val:0x7ffffffefffafff6
TEST_PKRR_OP(kmmwt2.u, x19, x19, x19, 0x0000000000000000, 0xffffdffffffffff6, 0x7ffffffefffafff6, x19, x12, 48, x14)

inst_4:
// rs2 == rd != rs1, rs1==x15, rs2==x3, rd==x3, rs2_h3_val == -16385, rs1_w0_val == -134217729, rs2_h2_val == -21846, rs2_h1_val == 4096, rs2_h0_val == 32767
// opcode: kmmwt2.u ; op1:x15; op2:x3; dest:x3; op1val:0xc0000000f7ffffff;  op2val:0xbfffaaaa10007fff
TEST_PKRR_OP(kmmwt2.u, x3, x15, x3, 0x0000000000000000, 0xc0000000f7ffffff, 0xbfffaaaa10007fff, x15, x12, 64, x14)

inst_5:
// rs1==x25, rs2==x5, rd==x29, rs2_h3_val == -8193, rs2_h0_val == 8192, rs2_h2_val == -2049, rs1_w0_val == -3, rs2_h1_val == -4097
// opcode: kmmwt2.u ; op1:x25; op2:x5; dest:x29; op1val:0x000007fffffffd;  op2val:0xdffff7ffefff2000
TEST_PKRR_OP(kmmwt2.u, x29, x25, x5, 0x0000000000000000, 0x000007fffffffd, 0xdffff7ffefff2000, x25, x12, 80, x14)

inst_6:
// rs1==x17, rs2==x22, rd==x5, rs2_h3_val == -4097, rs1_w0_val == 4, rs2_h1_val == 64, rs1_w1_val == 4096, rs2_h2_val == 256
// opcode: kmmwt2.u ; op1:x17; op2:x22; dest:x5; op1val:0x00100000000004;  op2val:0xefff010000400007
TEST_PKRR_OP(kmmwt2.u, x5, x17, x22, 0x0000000000000000, 0x00100000000004, 0xefff010000400007, x17, x12, 96, x14)

inst_7:
// rs1==x0, rs2==x23, rd==x4, rs2_h3_val == -2049, rs2_h2_val == -8193, rs2_h0_val == 32, rs1_w1_val == -17, rs1_w0_val == -17, rs2_h1_val == 8192
// opcode: kmmwt2.u ; op1:x0; op2:x23; dest:x4; op1val:0xffffffefffffffef;  op2val:0xf7ffdfff20000020
TEST_PKRR_OP(kmmwt2.u, x4, x0, x23, 0x0000000000000000, 0xffffffefffffffef, 0xf7ffdfff20000020, x0, x12, 112, x14)

inst_8:
// rs1==x11, rs2==x27, rd==x7, rs2_h3_val == -1025, rs2_h0_val == -8193, rs2_h1_val == -32768, rs1_w0_val == -262145
// opcode: kmmwt2.u ; op1:x11; op2:x27; dest:x7; op1val:0xfffffff8fffbffff;  op2val:0xfbff01008000dfff
TEST_PKRR_OP(kmmwt2.u, x7, x11, x27, 0x0000000000000000, 0xfffffff8fffbffff, 0xfbff01008000dfff, x11, x12, 128, x14)

inst_9:
// rs1==x3, rs2==x6, rd==x9, rs2_h3_val == -513, rs1_w0_val == -2097153
// opcode: kmmwt2.u ; op1:x3; op2:x6; dest:x9; op1val:0xfffffff9ffdfffff;  op2val:0xfdff00060005fff6
TEST_PKRR_OP(kmmwt2.u, x9, x3, x6, 0x0000000000000000, 0xfffffff9ffdfffff, 0xfdff00060005fff6, x3, x12, 144, x14)

inst_10:
// rs1==x8, rs2==x1, rd==x10, rs2_h3_val == -257, rs1_w1_val == -5, rs1_w0_val == 32, rs2_h1_val == 256, rs2_h2_val == -129
// opcode: kmmwt2.u ; op1:x8; op2:x1; dest:x10; op1val:0xfffffffb00000020;  op2val:0xfeffff7f0100fffe
TEST_PKRR_OP(kmmwt2.u, x10, x8, x1, 0x0000000000000000, 0xfffffffb00000020, 0xfeffff7f0100fffe, x8, x12, 160, x14)

inst_11:
// rs1==x10, rs2==x15, rd==x2, rs2_h3_val == -129, rs1_w1_val == 8388608, rs2_h0_val == 0
// opcode: kmmwt2.u ; op1:x10; op2:x15; dest:x2; op1val:0x80000000000003;  op2val:0xff7f01003fff0000
TEST_PKRR_OP(kmmwt2.u, x2, x10, x15, 0x0000000000000000, 0x80000000000003, 0xff7f01003fff0000, x10, x12, 176, x14)

inst_12:
// rs1==x2, rs2==x29, rd==x1, rs2_h3_val == -65, rs1_w0_val == 4096, rs2_h0_val == 128
// opcode: kmmwt2.u ; op1:x2; op2:x29; dest:x1; op1val:0xfffffffb00001000;  op2val:0xffbfdfff20000080
TEST_PKRR_OP(kmmwt2.u, x1, x2, x29, 0x0000000000000000, 0xfffffffb00001000, 0xffbfdfff20000080, x2, x12, 192, x14)

inst_13:
// rs1==x16, rs2==x13, rd==x6, rs2_h3_val == -33, rs1_w0_val == 536870912, rs2_h2_val == -33, rs2_h1_val == 1, rs1_w1_val == 1048576
// opcode: kmmwt2.u ; op1:x16; op2:x13; dest:x6; op1val:0x10000020000000;  op2val:0xffdfffdf00012000
TEST_PKRR_OP(kmmwt2.u, x6, x16, x13, 0x0000000000000000, 0x10000020000000, 0xffdfffdf00012000, x16, x12, 208, x14)

inst_14:
// rs1==x26, rs2==x16, rd==x21, rs2_h3_val == -17, rs2_h0_val == 16384, rs1_w1_val == -262145, rs2_h1_val == 2, rs2_h2_val == -3, rs1_w0_val == 0
// opcode: kmmwt2.u ; op1:x26; op2:x16; dest:x21; op1val:0xfffbffff00000000;  op2val:0xffeffffd00024000
TEST_PKRR_OP(kmmwt2.u, x21, x26, x16, 0x0000000000000000, 0xfffbffff00000000, 0xffeffffd00024000, x26, x12, 224, x14)

inst_15:
// rs1==x13, rs2==x9, rd==x0, rs2_h3_val == -9, rs1_w0_val == 134217728, rs1_w1_val == -524289
// opcode: kmmwt2.u ; op1:x13; op2:x9; dest:x0; op1val:0xfff7ffff08000000;  op2val:0xfff7ffdf00020009
TEST_PKRR_OP(kmmwt2.u, x0, x13, x9, 0x0000000000000000, 0xfff7ffff08000000, 0xfff7ffdf00020009, x13, x12, 240, x1)

inst_16:
// rs1==x28, rs2==x31, rd==x23, rs2_h3_val == -5, rs2_h1_val == 128, rs2_h0_val == 4, rs1_w1_val == 2147483647
// opcode: kmmwt2.u ; op1:x28; op2:x31; dest:x23; op1val:0x7fffffff3fffffff;  op2val:0xfffb555500800004
TEST_PKRR_OP(kmmwt2.u, x23, x28, x31, 0x0000000000000000, 0x7fffffff3fffffff, 0xfffb555500800004, x28, x12, 256, x1)

inst_17:
// rs1==x18, rs2==x17, rd==x14, rs2_h3_val == -3, rs2_h0_val == -65, rs2_h1_val == -129, rs1_w0_val == 256, rs1_w1_val == 0
// opcode: kmmwt2.u ; op1:x18; op2:x17; dest:x14; op1val:0x00000000000100;  op2val:0xfffd7fffff7fffbf
TEST_PKRR_OP(kmmwt2.u, x14, x18, x17, 0x0000000000000000, 0x00000000000100, 0xfffd7fffff7fffbf, x18, x12, 272, x1)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_18:
// rs1==x12, rs2==x11, rd==x24, rs2_h3_val == -2, rs1_w1_val == 1431655765, rs1_w0_val == 8
// opcode: kmmwt2.u ; op1:x12; op2:x11; dest:x24; op1val:0x5555555500000008;  op2val:0xfffefff9efff0003
TEST_PKRR_OP(kmmwt2.u, x24, x12, x11, 0x0000000000000000, 0x5555555500000008, 0xfffefff9efff0003, x12, x3, 0, x1)

inst_19:
// rs1==x4, rs2==x18, rd==x8, rs2_h3_val == -32768, rs2_h2_val == 8, rs1_w0_val == -513
// opcode: kmmwt2.u ; op1:x4; op2:x18; dest:x8; op1val:0x400000fffffdff;  op2val:0x80000008ffff2000
TEST_PKRR_OP(kmmwt2.u, x8, x4, x18, 0x0000000000000000, 0x400000fffffdff, 0x80000008ffff2000, x4, x3, 16, x1)

inst_20:
// rs1==x5, rs2==x14, rd==x18, rs2_h3_val == 16384, rs1_w1_val == 2, rs2_h0_val == -5
// opcode: kmmwt2.u ; op1:x5; op2:x14; dest:x18; op1val:0x000002ffffffef;  op2val:0x400000063ffffffb
TEST_PKRR_OP(kmmwt2.u, x18, x5, x14, 0x0000000000000000, 0x000002ffffffef, 0x400000063ffffffb, x5, x3, 32, x1)

inst_21:
// rs1==x27, rs2==x30, rd==x28, rs2_h3_val == 8192, rs2_h0_val == 2048, rs1_w0_val == -524289, rs2_h1_val == 16, rs2_h2_val == -32768
// opcode: kmmwt2.u ; op1:x27; op2:x30; dest:x28; op1val:0xfffffffcfff7ffff;  op2val:0x2000800000100800
TEST_PKRR_OP(kmmwt2.u, x28, x27, x30, 0x0000000000000000, 0xfffffffcfff7ffff, 0x2000800000100800, x27, x3, 48, x1)

inst_22:
// rs1==x29, rs2==x2, rd==x12, rs2_h3_val == 4096, rs1_w1_val == -1, rs2_h2_val == -1025, rs2_h1_val == -8193
// opcode: kmmwt2.u ; op1:x29; op2:x2; dest:x12; op1val:0xffffffff08000000;  op2val:0x1000fbffdfff0006
TEST_PKRR_OP(kmmwt2.u, x12, x29, x2, 0x0000000000000000, 0xffffffff08000000, 0x1000fbffdfff0006, x29, x3, 64, x1)

inst_23:
// rs1==x6, rs2==x4, rd==x13, rs2_h3_val == 2048, rs2_h1_val == -257, rs2_h0_val == -1025, rs2_h2_val == 2, rs1_w1_val == 268435456
// opcode: kmmwt2.u ; op1:x6; op2:x4; dest:x13; op1val:0x10000000fffffff8;  op2val:0x8000002fefffbff
TEST_PKRR_OP(kmmwt2.u, x13, x6, x4, 0x0000000000000000, 0x10000000fffffff8, 0x8000002fefffbff, x6, x3, 80, x1)

inst_24:
// rs1==x9, rs2==x21, rd==x20, rs2_h3_val == 1024, rs2_h0_val == -16385, rs2_h1_val == -3, rs1_w1_val == 32768
// opcode: kmmwt2.u ; op1:x9; op2:x21; dest:x20; op1val:0x008000fffffff8;  op2val:0x4000006fffdbfff
TEST_PKRR_OP(kmmwt2.u, x20, x9, x21, 0x0000000000000000, 0x008000fffffff8, 0x4000006fffdbfff, x9, x3, 96, x1)

inst_25:
// rs1==x21, rs2==x25, rd==x16, rs2_h3_val == 512, rs1_w0_val == -268435457, rs1_w1_val == -8388609, rs2_h1_val == 8
// opcode: kmmwt2.u ; op1:x21; op2:x25; dest:x16; op1val:0xff7fffffefffffff;  op2val:0x200fffd00080005
TEST_PKRR_OP(kmmwt2.u, x16, x21, x25, 0x0000000000000000, 0xff7fffffefffffff, 0x200fffd00080005, x21, x3, 112, x1)

inst_26:
// rs1==x22, rs2==x26, rd==x17, rs2_h3_val == 256, rs1_w0_val == 268435456, rs2_h0_val == 256, rs2_h2_val == 128
// opcode: kmmwt2.u ; op1:x22; op2:x26; dest:x17; op1val:0xfffffff610000000;  op2val:0x100008000070100
TEST_PKRR_OP(kmmwt2.u, x17, x22, x26, 0x0000000000000000, 0xfffffff610000000, 0x100008000070100, x22, x3, 128, x1)

inst_27:
// rs1==x24, rs2==x10, rd==x15, rs2_h3_val == 128, rs1_w1_val == 32, rs2_h1_val == 32, rs2_h0_val == 512
// opcode: kmmwt2.u ; op1:x24; op2:x10; dest:x15; op1val:0x000020fffffff9;  op2val:0x80008000200200
TEST_PKRR_OP(kmmwt2.u, x15, x24, x10, 0x0000000000000000, 0x000020fffffff9, 0x80008000200200, x24, x3, 144, x1)

inst_28:
// rs1==x30, rs2==x8, rd==x26, rs2_h3_val == 64, rs2_h1_val == -1025, rs1_w0_val == 67108864, rs1_w1_val == 2048
// opcode: kmmwt2.u ; op1:x30; op2:x8; dest:x26; op1val:0x00080004000000;  op2val:0x40dffffbfffff6
TEST_PKRR_OP(kmmwt2.u, x26, x30, x8, 0x0000000000000000, 0x00080004000000, 0x40dffffbfffff6, x30, x3, 160, x2)

inst_29:
// rs1==x1, rs2==x12, rd==x22, rs2_h3_val == 16, rs2_h2_val == -16385, rs1_w0_val == -33554433, rs2_h1_val == -17
// opcode: kmmwt2.u ; op1:x1; op2:x12; dest:x22; op1val:0xfffffff9fdffffff;  op2val:0x10bfffffef0080
TEST_PKRR_OP(kmmwt2.u, x22, x1, x12, 0x0000000000000000, 0xfffffff9fdffffff, 0x10bfffffef0080, x1, x3, 176, x2)

inst_30:
// rs1==x14, rs2==x0, rd==x30, rs2_h3_val == 8, rs2_h0_val == 1024, rs2_h1_val == -65, rs1_w0_val == 4194304
// opcode: kmmwt2.u ; op1:x14; op2:x0; dest:x30; op1val:0xc000000000400000;  op2val:0x080009ffbf0400
TEST_PKRR_OP(kmmwt2.u, x30, x14, x0, 0x0000000000000000, 0xc000000000400000, 0x080009ffbf0400, x14, x3, 192, x2)

inst_31:
// rs1==x20, rs2_h3_val == 4, rs2_h1_val == 4, rs1_w1_val == -67108865
// opcode: kmmwt2.u ; op1:x20; op2:x1; dest:x21; op1val:0xfbfffffffffffffc;  op2val:0x0401000004bfff
TEST_PKRR_OP(kmmwt2.u, x21, x20, x1, 0x0000000000000000, 0xfbfffffffffffffc, 0x0401000004bfff, x20, x3, 208, x2)

inst_32:
// rs2==x20, rs2_h3_val == 2, rs1_w1_val == 33554432, rs2_h2_val == 16
// opcode: kmmwt2.u ; op1:x12; op2:x20; dest:x9; op1val:0x200000008000000;  op2val:0x0200101000fbff
TEST_PKRR_OP(kmmwt2.u, x9, x12, x20, 0x0000000000000000, 0x200000008000000, 0x0200101000fbff, x12, x3, 224, x2)

inst_33:
// rd==x27, rs2_h3_val == 1, rs2_h1_val == 512, rs2_h2_val == 2048
// opcode: kmmwt2.u ; op1:x29; op2:x11; dest:x27; op1val:0xc000000000400000;  op2val:0x01080002000003
TEST_PKRR_OP(kmmwt2.u, x27, x29, x11, 0x0000000000000000, 0xc000000000400000, 0x01080002000003, x29, x3, 240, x2)

inst_34:
// rs2_h3_val == 0, rs1_w0_val == 1048576
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000000100000;  op2val:0x00f7ff0040fffe
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x00000000100000, 0x00f7ff0040fffe, x30, x3, 256, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_35:
// rs2_h3_val == -1, rs2_h2_val == -65, rs1_w0_val == -257, rs1_w1_val == -9
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fffffeff;  op2val:0xffffffbffff83fff
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffffeff, 0xffffffbffff83fff, x30, x1, 0, x2)

inst_36:
// rs2_h2_val == -4097, rs1_w1_val == 1024, rs2_h1_val == -16385, rs1_w0_val == -1025
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffffbff;  op2val:0x06efffbfff0100
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x000400fffffbff, 0x06efffbfff0100, x30, x1, 16, x2)

inst_37:
// rs2_h2_val == -513, rs1_w1_val == -4194305
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff08000000;  op2val:0xffeffdffeffffffa
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xffbfffff08000000, 0xffeffdffeffffffa, x30, x1, 32, x2)

inst_38:
// rs2_h2_val == -257, rs1_w0_val == 33554432, rs1_w1_val == -4097, rs2_h0_val == -32768
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff02000000;  op2val:0xffbffeff00208000
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xffffefff02000000, 0xffbffeff00208000, x30, x1, 48, x2)

inst_39:
// rs2_h2_val == -17, rs2_h1_val == -513, rs1_w1_val == 524288
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x080000fff7ffff;  op2val:0xf7ffffeffdff0800
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x080000fff7ffff, 0xf7ffffeffdff0800, x30, x1, 64, x2)

inst_40:
// rs1_w0_val == 2097152, rs2_h2_val == -9, rs1_w1_val == 2097152
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x20000000200000;  op2val:0x08fff7fff6fffd
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x20000000200000, 0x08fff7fff6fffd, x30, x1, 80, x2)

inst_41:
// rs1_w0_val == 524288, rs1_w1_val == 128
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00008000080000;  op2val:0xffbf0002fff88000
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x00008000080000, 0xffbf0002fff88000, x30, x1, 96, x2)

inst_42:
// rs1_w0_val == 262144, rs2_h1_val == -5
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000040000;  op2val:0x400ffdffffb4000
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x1000000000040000, 0x400ffdffffb4000, x30, x1, 112, x2)

inst_43:
// rs1_w0_val == 131072, rs1_w1_val == -1048577
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00020000;  op2val:0xdfff00100010fffd
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xffefffff00020000, 0xdfff00100010fffd, x30, x1, 128, x2)

inst_44:
// rs1_w0_val == 65536, rs1_w1_val == 4
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000400010000;  op2val:0x06ffbfc0000020
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x00000400010000, 0x06ffbfc0000020, x30, x1, 144, x2)

inst_45:
// rs1_w0_val == 32768, rs2_h0_val == -9
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00008000;  op2val:0xffbffbfffffdfff7
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xff7fffff00008000, 0xffbffbfffffdfff7, x30, x1, 160, x2)

inst_46:
// rs1_w0_val == 16384, rs1_w1_val == 1
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000100004000;  op2val:0xfdff000900405555
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x00000100004000, 0xfdff000900405555, x30, x1, 176, x2)

inst_47:
// rs1_w0_val == 8192, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00002000;  op2val:0x4000f7fffeff0100
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffffb00002000, 0x4000f7fffeff0100, x30, x1, 192, x2)

inst_48:
// rs1_w0_val == 2048, rs2_h0_val == -33, rs2_h1_val == -9
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000800;  op2val:0xeffffffafff7ffdf
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xffffffef00000800, 0xeffffffafff7ffdf, x30, x1, 208, x2)

inst_49:
// rs1_w0_val == 1024, rs2_h2_val == 32, rs2_h0_val == 8, rs1_w1_val == 8192
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000400;  op2val:0x070020ff7f0008
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x00200000000400, 0x070020ff7f0008, x30, x1, 224, x2)

inst_50:
// rs1_w0_val == 512, rs1_w1_val == 536870912
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000200;  op2val:0xfeffc000c0000400
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x2000000000000200, 0xfeffc000c0000400, x30, x1, 240, x2)

inst_51:
// rs1_w0_val == 128, rs1_w1_val == 1073741824, rs2_h2_val == -5
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000080;  op2val:0xffdffffbfff8fbff
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x4000000000000080, 0xffdffffbfff8fbff, x30, x1, 256, x2)

inst_52:
// rs1_w0_val == 64, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000040;  op2val:0xfffcfff880000009
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x00002000000040, 0xfffcfff880000009, x30, x1, 272, x2)

inst_53:
// rs1_w0_val == 16, rs2_h0_val == -2049
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000010;  op2val:0xffff00090100f7ff
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000010, 0xffff00090100f7ff, x30, x1, 288, x2)

inst_54:
// rs1_w0_val == 2, rs2_h0_val == 64
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000002;  op2val:0xffff7ffffff80040
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000002, 0xffff7ffffff80040, x30, x1, 304, x2)

inst_55:
// rs1_w0_val == 1, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000001;  op2val:0xffeffffa0007fffe
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000001, 0xffeffffa0007fffe, x30, x1, 320, x2)

inst_56:
// rs1_w0_val == -1, rs2_h2_val == 512
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffffffff;  op2val:0xfffe0200ff7ffffd
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x20000000ffffffff, 0xfffe0200ff7ffffd, x30, x1, 336, x2)

inst_57:
// rs2_h2_val == 16384, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000200080000;  op2val:0xfff640000010fff6
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x00000200080000, 0xfff640000010fff6, x30, x1, 352, x2)

inst_58:
// rs2_h2_val == 8192, rs1_w0_val == -33
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffffffdf;  op2val:0xfffc2000fffc0020
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x000800ffffffdf, 0xfffc2000fffc0020, x30, x1, 368, x2)

inst_59:
// rs2_h2_val == 4096, rs1_w1_val == 512, rs2_h0_val == 16
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000007;  op2val:0x06100000080010
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x00020000000007, 0x06100000080010, x30, x1, 384, x2)

inst_60:
// rs2_h2_val == 1024, rs1_w1_val == 16777216
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x100000000010000;  op2val:0x030400fff80010
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x100000000010000, 0x030400fff80010, x30, x1, 400, x2)

inst_61:
// rs2_h2_val == 64, rs1_w1_val == -65, rs1_w0_val == -131073
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffdffff;  op2val:0x20000040feffdfff
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xffffffbffffdffff, 0x20000040feffdfff, x30, x1, 416, x2)

inst_62:
// rs2_h2_val == 4, rs1_w0_val == -2049
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffffffff7ff;  op2val:0xfffe00043fff0800
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x3ffffffffffff7ff, 0xfffe00043fff0800, x30, x1, 432, x2)

inst_63:
// rs2_h2_val == 1, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x1000000008000000;  op2val:0x000001efff0005
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x1000000008000000, 0x000001efff0005, x30, x1, 448, x2)

inst_64:
// rs2_h2_val == 0, rs2_h0_val == 1
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fffffff8;  op2val:0x07000000030001
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffffff8, 0x07000000030001, x30, x1, 464, x2)

inst_65:
// rs2_h2_val == -1, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000001;  op2val:0xfff7ffff01000100
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000001, 0xfff7ffff01000100, x30, x1, 480, x2)

inst_66:
// rs2_h1_val == -21846, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffffffeff;  op2val:0xc000fffdaaaa0007
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xffffdffffffffeff, 0xc000fffdaaaa0007, x30, x1, 496, x2)

inst_67:
// rs2_h1_val == 21845, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000080;  op2val:0xfeff00005555dfff
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x00000100000080, 0xfeff00005555dfff, x30, x1, 512, x2)

inst_68:
// rs2_h1_val == 32767, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800001000;  op2val:0xefffdfff7fffdfff
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffff800001000, 0xefffdfff7fffdfff, x30, x1, 528, x2)

inst_69:
// rs2_h1_val == -2049, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000010;  op2val:0x800aaaaf7fff7ff
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x00800000000010, 0x800aaaaf7fff7ff, x30, x1, 544, x2)

inst_70:
// rs2_h1_val == -33, rs1_w1_val == -129, rs1_w0_val == -67108865
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffbffffff;  op2val:0xefff0100ffdf0400
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xffffff7ffbffffff, 0xefff0100ffdf0400, x30, x1, 560, x2)

inst_71:
// rs2_h1_val == 16384, rs1_w0_val == 8388608
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000500800000;  op2val:0x08efff40000200
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x00000500800000, 0x08efff40000200, x30, x1, 576, x2)

inst_72:
// rs2_h0_val == 4096, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000007fffffff6;  op2val:0x3fffffbf7fff1000
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x000007fffffff6, 0x3fffffbf7fff1000, x30, x1, 592, x2)

inst_73:
// rs2_h0_val == 2, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff808000000;  op2val:0x09004080000002
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffff808000000, 0x09004080000002, x30, x1, 608, x2)

inst_74:
// rs2_h0_val == -1, rs2_h1_val == 1024, rs1_w1_val == 16
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00001000008000;  op2val:0x7ffffdff0400ffff
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x00001000008000, 0x7ffffdff0400ffff, x30, x1, 624, x2)

inst_75:
// rs1_w1_val == -1431655766, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffff7ff;  op2val:0xfff9040080008000
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffff7ff, 0xfff9040080008000, x30, x1, 640, x2)

inst_76:
// rs1_w1_val == -1073741825, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffffdf;  op2val:0x800feff00050010
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffffdf, 0x800feff00050010, x30, x1, 656, x2)

inst_77:
// rs1_w1_val == -536870913, rs1_w0_val == -8193
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffdfff;  op2val:0x060003bffffffd
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffdfff, 0x060003bffffffd, x30, x1, 672, x2)

inst_78:
// rs1_w1_val == -268435457, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffdffff;  op2val:0xffef0004f7ffdfff
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xeffffffffffdffff, 0xffef0004f7ffdfff, x30, x1, 688, x2)

inst_79:
// rs1_w1_val == -134217729, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffffbff;  op2val:0xff7ffffedfff0003
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffffbff, 0xff7ffffedfff0003, x30, x1, 704, x2)

inst_80:
// rs1_w1_val == -33554433, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000001;  op2val:0xfbff0080effffff8
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000001, 0xfbff0080effffff8, x30, x1, 720, x2)

inst_81:
// rs1_w1_val == -16777217, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000008;  op2val:0xffdf0007fff7c000
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000008, 0xffdf0007fff7c000, x30, x1, 736, x2)

inst_82:
// rs1_w1_val == -2097153, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00010000;  op2val:0x09ffeffffabfff
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xffdfffff00010000, 0x09ffeffffabfff, x30, x1, 752, x2)

inst_83:
// rs1_w1_val == -131073, rs1_w0_val == -16385
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffbfff;  op2val:0x00fff6ffdf2000
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffbfff, 0x00fff6ffdf2000, x30, x1, 768, x2)

inst_84:
// rs1_w1_val == -65537, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffff7ffffff;  op2val:0x2000fffefffb0003
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xfffefffff7ffffff, 0x2000fffefffb0003, x30, x1, 784, x2)

inst_85:
// rs1_w1_val == -32769, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff02000000;  op2val:0x007fffffeffffe
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xffff7fff02000000, 0x007fffffeffffe, x30, x1, 800, x2)

inst_86:
// rs1_w1_val == -16385, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000005;  op2val:0xdffffff93fff0009
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000005, 0xdffffff93fff0009, x30, x1, 816, x2)

inst_87:
// rs1_w1_val == -2049, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff80000000;  op2val:0x555508000020fffa
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xfffff7ff80000000, 0x555508000020fffa, x30, x1, 832, x2)

inst_88:
// rs1_w1_val == -1025, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00020000;  op2val:0xdfffbfff0100ffbf
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffbff00020000, 0xdfffbfff0100ffbf, x30, x1, 848, x2)

inst_89:
// rs1_w1_val == -513, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffdfffff;  op2val:0xff7fdfff4000fffa
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffdffffdfffff, 0xff7fdfff4000fffa, x30, x1, 864, x2)

inst_90:
// rs1_w1_val == -257, rs1_w0_val == -536870913
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffdfffffff;  op2val:0xfffa0006fff9fffd
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffeffdfffffff, 0xfffa0006fff9fffd, x30, x1, 880, x2)

inst_91:
// rs1_w1_val == -33, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf02000000;  op2val:0xfffe00080010fff9
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xffffffdf02000000, 0xfffe00080010fff9, x30, x1, 896, x2)

inst_92:
// rs1_w1_val == -3, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffffeff;  op2val:0xfffffffd00020100
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffffeff, 0xfffffffd00020100, x30, x1, 912, x2)

inst_93:
// rs1_w1_val == -2, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffdfffff;  op2val:0xf7fffbfffff7c000
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffffeffdfffff, 0xf7fffbfffff7c000, x30, x1, 928, x2)

inst_94:
// rs1_w1_val == -2147483648, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffdfff;  op2val:0x5555020000200002
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x80000000ffffdfff, 0x5555020000200002, x30, x1, 944, x2)

inst_95:
// rs1_w1_val == 134217728, rs1_w0_val == -65
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ffffffbf;  op2val:0x80ff7f00092000
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x8000000ffffffbf, 0x80ff7f00092000, x30, x1, 960, x2)

inst_96:
// rs1_w1_val == 67108864, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffff7ff;  op2val:0xfff9effffbff0100
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x4000000fffff7ff, 0xfff9effffbff0100, x30, x1, 976, x2)

inst_97:
// rs1_w1_val == 262144, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000000;  op2val:0xffbffffffbfffff9
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x04000000000000, 0xffbffffffbfffff9, x30, x1, 992, x2)

inst_98:
// rs1_w1_val == 131072, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x020000dfffffff;  op2val:0xffeffffeffbf0003
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x020000dfffffff, 0xffeffffeffbf0003, x30, x1, 1008, x2)

inst_99:
// rs1_w1_val == 65536, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffffff8;  op2val:0xfff7fffb00032000
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x010000fffffff8, 0xfff7fffb00032000, x30, x1, 1024, x2)

inst_100:
// rs1_w1_val == 16384, rs1_w0_val == -4097
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffffefff;  op2val:0x017fff00100100
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x004000ffffefff, 0x017fff00100100, x30, x1, 1040, x2)

inst_101:
// rs1_w1_val == 256, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00010080000000;  op2val:0x80fffadfff0000
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x00010080000000, 0x80fffadfff0000, x30, x1, 1056, x2)

inst_102:
// rs1_w1_val == 64, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffffffdf;  op2val:0xffefff7f0040ffdf
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x000040ffffffdf, 0xffefff7f0040ffdf, x30, x1, 1072, x2)

inst_103:
// rs1_w1_val == 8, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffffffd;  op2val:0xfff9fffcfff6fffa
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x000008fffffffd, 0xfff9fffcfff6fffa, x30, x1, 1088, x2)

inst_104:
// rs1_w0_val == -1431655766, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffaaaaaaaa;  op2val:0x5555fdff00050009
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xffffffffaaaaaaaa, 0x5555fdff00050009, x30, x1, 1104, x2)

inst_105:
// rs1_w0_val == 1431655765, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000855555555;  op2val:0xffef7ffffbff2000
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x00000855555555, 0xffef7ffffbff2000, x30, x1, 1120, x2)

inst_106:
// rs1_w0_val == 2147483647, rs2_h0_val == -21846
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x0400007fffffff;  op2val:0x8002000200aaaa
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x0400007fffffff, 0x8002000200aaaa, x30, x1, 1136, x2)

inst_107:
// rs1_w0_val == -1073741825, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000bfffffff;  op2val:0x042000ffff0400
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xc0000000bfffffff, 0x042000ffff0400, x30, x1, 1152, x2)

inst_108:
// rs1_w0_val == -16777217, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000006feffffff;  op2val:0x01fffdfdff0020
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x000006feffffff, 0x01fffdfdff0020, x30, x1, 1168, x2)

inst_109:
// rs2_h1_val == 2048, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff920000000;  op2val:0xefff000208008000
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xfffffff920000000, 0xefff000208008000, x30, x1, 1184, x2)

inst_110:
// rs1_w0_val == -8388609, rs2_h0_val == -257
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x004000ff7fffff;  op2val:0x0520000010feff
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x004000ff7fffff, 0x0520000010feff, x30, x1, 1200, x2)

inst_111:
// rs1_w0_val == -4194305, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffbfffff;  op2val:0x200001002000feff
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xffffffffffbfffff, 0x200001002000feff, x30, x1, 1216, x2)

inst_112:
// rs1_w0_val == -1048577, rs2_h0_val == -129
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffefffff;  op2val:0xefff10000400ff7f
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x000010ffefffff, 0xefff10000400ff7f, x30, x1, 1232, x2)

inst_113:
// rs1_w0_val == -65537, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffffeffff;  op2val:0xfff608008000fffe
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffeffff, 0xfff608008000fffe, x30, x1, 1248, x2)

inst_114:
// rs1_w0_val == -32769, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffff7fff;  op2val:0x10100040000006
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xffefffffffff7fff, 0x10100040000006, x30, x1, 1264, x2)

inst_115:
// rs2_h1_val == 0, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000040000000;  op2val:0x08000400004000
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x40000040000000, 0x08000400004000, x30, x1, 1280, x2)

inst_116:
// rs1_w0_val == -129, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000009ffffff7f;  op2val:0x01fff98000dfff
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x000009ffffff7f, 0x01fff98000dfff, x30, x1, 1296, x2)

inst_117:
// rs2_h0_val == -4097, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000007;  op2val:0x3ffffbff0002efff
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x00004000000007, 0x3ffffbff0002efff, x30, x1, 1312, x2)

inst_118:
// rs1_w0_val == -9, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000fffffff7;  op2val:0xfff60100fffafffa
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0xc0000000fffffff7, 0xfff60100fffafffa, x30, x1, 1328, x2)

inst_119:
// rs1_w0_val == -5, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffffb;  op2val:0x40ffbffdff4000
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x400000fffffffb, 0x40ffbffdff4000, x30, x1, 1344, x2)

inst_120:
// rs1_w0_val == 16777216, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x00200001000000;  op2val:0xffefeffffefffff7
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x00200001000000, 0xffefeffffefffff7, x30, x1, 1360, x2)

inst_121:
// rs2_h0_val == -17, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x000010fffffff8;  op2val:0xaaaaffff0002ffef
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x000010fffffff8, 0xaaaaffff0002ffef, x30, x1, 1376, x2)

inst_122:
// rs2_h0_val == -513, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x800000f7ffffff;  op2val:0xfffabffffff8fdff
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x800000f7ffffff, 0xfffabffffff8fdff, x30, x1, 1392, x2)

inst_123:
// rs1_w0_val == -2, 
// opcode: kmmwt2.u ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffffe;  op2val:0xfeff4000fff77fff
TEST_PKRR_OP(kmmwt2.u, x31, x30, x29, 0x0000000000000000, 0x400000fffffffe, 0xfeff4000fff77fff, x30, x1, 1408, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 178*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
