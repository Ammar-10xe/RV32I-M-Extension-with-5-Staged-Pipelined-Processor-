
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smtt16 instruction of the RISC-V RV64PZicsr extension for the smtt16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smtt16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x27, rs2==x17, rd==x27, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h1_val == 1, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs2_h0_val == -16385, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val == -16385, rs1_h1_val != rs2_h1_val, rs2_h3_val == 8192, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs2_h2_val == 512, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == -9
// opcode: smtt16 ; op1:x27; op2:x17; dest:x27; op1val:0xbffffff9fff78000;  op2val:0x200002000001bfff
TEST_RR_OP(smtt16, x27, x27, x17, 0x0000000000000000, 0xbffffff9fff78000, 0x200002000001bfff, x7, 0, x11)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x22, rs2==x27, rd==x21, rs1_h3_val == rs2_h3_val, rs1_h2_val == 16384, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == 16384, rs1_h1_val == -16385, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 128
// opcode: smtt16 ; op1:x22; op2:x27; dest:x21; op1val:0x074000bfff3fff;  op2val:0x07000640000080
TEST_RR_OP(smtt16, x21, x22, x27, 0x0000000000000000, 0x074000bfff3fff, 0x07000640000080, x7, 8, x11)

inst_2:
// rs1 == rs2 != rd, rs1==x6, rs2==x6, rd==x13, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h1_val == 16384, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == -5, rs2_h2_val == 256, rs2_h1_val == 16
// opcode: smtt16 ; op1:x6; op2:x6; dest:x13; op1val:0xbfff3fff4000fffc;  op2val:0xfffa01000010fffb
TEST_RR_OP(smtt16, x13, x6, x6, 0x0000000000000000, 0xbfff3fff4000fffc, 0xfffa01000010fffb, x7, 16, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x5, rs2==x5, rd==x5, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h3_val == -1025, rs1_h3_val == 512, rs2_h2_val == -2049, rs1_h1_val == 4096, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 8, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -2, rs2_h0_val == -9
// opcode: smtt16 ; op1:x5; op2:x5; dest:x5; op1val:0x20000081000fff8;  op2val:0xfbfff7fffffefff7
TEST_RR_OP(smtt16, x5, x5, x5, 0x0000000000000000, 0x20000081000fff8, 0xfbfff7fffffefff7, x7, 24, x11)

inst_4:
// rs2 == rd != rs1, rs1==x24, rs2==x25, rd==x25, rs1_h2_val == rs2_h2_val, rs1_h2_val == 1024, rs2_h1_val == -8193, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == -17, rs2_h2_val == 1024, rs1_h3_val == -65, rs1_h1_val == -2049, rs2_h3_val == 1
// opcode: smtt16 ; op1:x24; op2:x25; dest:x25; op1val:0xffbf0400f7ffc000;  op2val:0x010400dfffffef
TEST_RR_OP(smtt16, x25, x24, x25, 0x0000000000000000, 0xffbf0400f7ffc000, 0x010400dfffffef, x7, 32, x11)

inst_5:
// rs1==x13, rs2==x16, rd==x12, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h2_val == -1025, rs2_h1_val == -9, rs1_h1_val == -1025, rs1_h0_val == -8193, rs1_h2_val == -17
// opcode: smtt16 ; op1:x13; op2:x16; dest:x12; op1val:0x05ffeffbffdfff;  op2val:0xfbfffbfffff7fff6
TEST_RR_OP(smtt16, x12, x13, x16, 0x0000000000000000, 0x05ffeffbffdfff, 0xfbfffbfffff7fff6, x7, 40, x11)

inst_6:
// rs1==x3, rs2==x30, rd==x9, rs1_h1_val == rs2_h1_val, rs2_h0_val == 8, rs1_h0_val == -5, rs1_h2_val == 32, rs1_h3_val == 32767, rs2_h1_val == -65, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h3_val == 8, rs1_h1_val == -65
// opcode: smtt16 ; op1:x3; op2:x30; dest:x9; op1val:0x7fff0020ffbffffb;  op2val:0x080400ffbf0008
TEST_RR_OP(smtt16, x9, x3, x30, 0x0000000000000000, 0x7fff0020ffbffffb, 0x080400ffbf0008, x7, 48, x11)

inst_7:
// rs1==x20, rs2==x1, rd==x8, rs1_h0_val == rs2_h0_val, rs2_h2_val == -16385, rs1_h3_val == -513, rs1_h2_val == 2, rs1_h1_val == 4
// opcode: smtt16 ; op1:x20; op2:x1; dest:x8; op1val:0xfdff000200040009;  op2val:0xfffabffffff80009
TEST_RR_OP(smtt16, x8, x20, x1, 0x0000000000000000, 0xfdff000200040009, 0xfffabffffff80009, x7, 56, x11)

inst_8:
// rs1==x2, rs2==x29, rd==x10, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h3_val == 21845, rs2_h2_val == -2, rs2_h0_val == -65, rs1_h1_val == 0, rs1_h0_val == 2, rs2_h3_val == 32, rs1_h2_val == -5
// opcode: smtt16 ; op1:x2; op2:x29; dest:x10; op1val:0x5555fffb00000002;  op2val:0x20fffec000ffbf
TEST_RR_OP(smtt16, x10, x2, x29, 0x0000000000000000, 0x5555fffb00000002, 0x20fffec000ffbf, x7, 64, x11)

inst_9:
// rs1==x0, rs2==x12, rd==x14, rs2_h3_val == -21846, rs2_h0_val == 8192, rs1_h3_val == -3, rs2_h1_val == -17
// opcode: smtt16 ; op1:x0; op2:x12; dest:x14; op1val:0xfffd0020fbffdfff;  op2val:0xaaaafff8ffef2000
TEST_RR_OP(smtt16, x14, x0, x12, 0x0000000000000000, 0xfffd0020fbffdfff, 0xaaaafff8ffef2000, x7, 72, x11)

inst_10:
// rs1==x18, rs2==x21, rd==x31, rs2_h3_val == 21845, rs1_h2_val == 16, rs1_h0_val == 1024, rs1_h3_val == -4097, rs2_h1_val == 512, rs2_h0_val == 1024
// opcode: smtt16 ; op1:x18; op2:x21; dest:x31; op1val:0xefff001010000400;  op2val:0x5555010002000400
TEST_RR_OP(smtt16, x31, x18, x21, 0x0000000000000000, 0xefff001010000400, 0x5555010002000400, x7, 80, x11)

inst_11:
// rs1==x25, rs2==x19, rd==x4, rs2_h3_val == 32767, rs1_h0_val == -4097
// opcode: smtt16 ; op1:x25; op2:x19; dest:x4; op1val:0xfff904003fffefff;  op2val:0x7fff000700050008
TEST_RR_OP(smtt16, x4, x25, x19, 0x0000000000000000, 0xfff904003fffefff, 0x7fff000700050008, x7, 88, x11)

inst_12:
// rs1==x12, rs2==x0, rd==x26, rs2_h3_val == -16385, rs2_h1_val == -5, rs1_h0_val == 16
// opcode: smtt16 ; op1:x12; op2:x0; dest:x26; op1val:0x030005ffbf0010;  op2val:0xbfffbffffffbfff8
TEST_RR_OP(smtt16, x26, x12, x0, 0x0000000000000000, 0x030005ffbf0010, 0xbfffbffffffbfff8, x7, 96, x11)

inst_13:
// rs1==x21, rs2==x18, rd==x16, rs2_h3_val == -8193, rs1_h1_val == -8193, rs2_h2_val == -17, rs2_h1_val == -33
// opcode: smtt16 ; op1:x21; op2:x18; dest:x16; op1val:0x050010dffffffc;  op2val:0xdfffffefffdf0008
TEST_RR_OP(smtt16, x16, x21, x18, 0x0000000000000000, 0x050010dffffffc, 0xdfffffefffdf0008, x7, 104, x6)

inst_14:
// rs1==x16, rs2==x10, rd==x17, rs2_h3_val == -4097, rs1_h1_val == 128, rs2_h2_val == -3, rs1_h3_val == 2048
// opcode: smtt16 ; op1:x16; op2:x10; dest:x17; op1val:0x800000700803fff;  op2val:0xeffffffdfffcffef
TEST_RR_OP(smtt16, x17, x16, x10, 0x0000000000000000, 0x800000700803fff, 0xeffffffdfffcffef, x7, 112, x6)

inst_15:
// rs1==x14, rs2==x28, rd==x18, rs2_h3_val == -2049, rs1_h3_val == 128, rs2_h2_val == 8, rs1_h2_val == 21845, rs1_h1_val == 2, rs2_h0_val == 4096, rs2_h1_val == 128
// opcode: smtt16 ; op1:x14; op2:x28; dest:x18; op1val:0x80555500020002;  op2val:0xf7ff000800801000
TEST_RR_OP(smtt16, x18, x14, x28, 0x0000000000000000, 0x80555500020002, 0xf7ff000800801000, x7, 120, x6)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_16:
// rs1==x4, rs2==x15, rd==x11, rs2_h3_val == -513, rs1_h2_val == -16385, rs1_h1_val == -21846, rs2_h0_val == -129
// opcode: smtt16 ; op1:x4; op2:x15; dest:x11; op1val:0x5555bfffaaaafff9;  op2val:0xfdff02000010ff7f
TEST_RR_OP(smtt16, x11, x4, x15, 0x0000000000000000, 0x5555bfffaaaafff9, 0xfdff02000010ff7f, x5, 0, x6)

inst_17:
// rs1==x17, rs2==x7, rd==x23, rs2_h3_val == -257, rs1_h2_val == -257, rs2_h0_val == 512, rs2_h2_val == -257
// opcode: smtt16 ; op1:x17; op2:x7; dest:x23; op1val:0xffbffeffdfff0005;  op2val:0xfefffeff00090200
TEST_RR_OP(smtt16, x23, x17, x7, 0x0000000000000000, 0xffbffeffdfff0005, 0xfefffeff00090200, x5, 8, x6)

inst_18:
// rs1==x9, rs2==x14, rd==x19, rs2_h3_val == -129, rs1_h2_val == -65, rs1_h0_val == -1
// opcode: smtt16 ; op1:x9; op2:x14; dest:x19; op1val:0xfff6ffbf0002ffff;  op2val:0xff7ffefffffe0008
TEST_RR_OP(smtt16, x19, x9, x14, 0x0000000000000000, 0xfff6ffbf0002ffff, 0xff7ffefffffe0008, x5, 16, x6)

inst_19:
// rs1==x23, rs2==x20, rd==x29, rs2_h3_val == -65, rs1_h0_val == 1, rs1_h2_val == -2
// opcode: smtt16 ; op1:x23; op2:x20; dest:x29; op1val:0x05fffe10000001;  op2val:0xffbf0003fff60200
TEST_RR_OP(smtt16, x29, x23, x20, 0x0000000000000000, 0x05fffe10000001, 0xffbf0003fff60200, x5, 24, x6)

inst_20:
// rs1==x10, rs2==x22, rd==x15, rs2_h3_val == -33, rs1_h2_val == -1, rs1_h1_val == 1024, rs2_h1_val == -129
// opcode: smtt16 ; op1:x10; op2:x22; dest:x15; op1val:0xfffcffff04000010;  op2val:0xffdfc000ff7f2000
TEST_RR_OP(smtt16, x15, x10, x22, 0x0000000000000000, 0xfffcffff04000010, 0xffdfc000ff7f2000, x5, 32, x6)

inst_21:
// rs1==x26, rs2==x24, rd==x30, rs2_h3_val == -17, rs1_h2_val == -8193, rs2_h1_val == 4096
// opcode: smtt16 ; op1:x26; op2:x24; dest:x30; op1val:0xbfffdfff0005fff6;  op2val:0xffeff7ff10000009
TEST_RR_OP(smtt16, x30, x26, x24, 0x0000000000000000, 0xbfffdfff0005fff6, 0xffeff7ff10000009, x5, 40, x6)

inst_22:
// rs1==x11, rs2==x3, rd==x2, rs2_h3_val == -9, rs1_h3_val == -9
// opcode: smtt16 ; op1:x11; op2:x3; dest:x2; op1val:0xfff7000800070001;  op2val:0xfff7000310000003
TEST_RR_OP(smtt16, x2, x11, x3, 0x0000000000000000, 0xfff7000800070001, 0xfff7000310000003, x5, 48, x6)

inst_23:
// rs1==x15, rs2==x8, rd==x24, rs2_h3_val == -5, rs1_h1_val == -513, rs1_h3_val == -257, rs2_h2_val == -513
// opcode: smtt16 ; op1:x15; op2:x8; dest:x24; op1val:0xfeff3ffffdff3fff;  op2val:0xfffbfdff00802000
TEST_RR_OP(smtt16, x24, x15, x8, 0x0000000000000000, 0xfeff3ffffdff3fff, 0xfffbfdff00802000, x5, 56, x6)

inst_24:
// rs1==x28, rs2==x13, rd==x1, rs2_h3_val == -3, rs1_h2_val == -2049, rs1_h0_val == 128, rs1_h1_val == 2048
// opcode: smtt16 ; op1:x28; op2:x13; dest:x1; op1val:0x7ffff7ff08000080;  op2val:0xfffd000300010006
TEST_RR_OP(smtt16, x1, x28, x13, 0x0000000000000000, 0x7ffff7ff08000080, 0xfffd000300010006, x5, 64, x6)

inst_25:
// rs1==x19, rs2==x31, rd==x22, rs2_h3_val == -2, rs2_h1_val == 4, rs2_h0_val == 256
// opcode: smtt16 ; op1:x19; op2:x31; dest:x22; op1val:0xfffa040000090010;  op2val:0xfffefffe00040100
TEST_RR_OP(smtt16, x22, x19, x31, 0x0000000000000000, 0xfffa040000090010, 0xfffefffe00040100, x5, 72, x6)

inst_26:
// rs1==x29, rs2==x4, rd==x3, rs2_h3_val == -32768, rs1_h0_val == -257, rs2_h1_val == 8
// opcode: smtt16 ; op1:x29; op2:x4; dest:x3; op1val:0xc000fff60009feff;  op2val:0x8000fffe00080400
TEST_RR_OP(smtt16, x3, x29, x4, 0x0000000000000000, 0xc000fff60009feff, 0x8000fffe00080400, x5, 80, x10)

inst_27:
// rs1==x8, rs2==x23, rd==x6, rs2_h3_val == 16384, rs2_h2_val == -9, rs2_h1_val == -16385, rs1_h3_val == -33, rs2_h0_val == 32767
// opcode: smtt16 ; op1:x8; op2:x23; dest:x6; op1val:0xffdfc000fff6efff;  op2val:0x4000fff7bfff7fff
TEST_RR_OP(smtt16, x6, x8, x23, 0x0000000000000000, 0xffdfc000fff6efff, 0x4000fff7bfff7fff, x5, 88, x10)

inst_28:
// rs1==x30, rs2==x11, rd==x7, rs2_h3_val == 4096, rs1_h3_val == -5, rs1_h2_val == 64, rs1_h0_val == 2048, rs2_h2_val == 4
// opcode: smtt16 ; op1:x30; op2:x11; dest:x7; op1val:0xfffb0040f7ff0800;  op2val:0x10000004fff9fffc
TEST_RR_OP(smtt16, x7, x30, x11, 0x0000000000000000, 0xfffb0040f7ff0800, 0x10000004fff9fffc, x5, 96, x10)

inst_29:
// rs1==x1, rs2==x2, rd==x20, rs2_h3_val == 2048, rs1_h1_val == -17, rs2_h2_val == -32768
// opcode: smtt16 ; op1:x1; op2:x2; dest:x20; op1val:0xfff60005ffef0003;  op2val:0x800800000097fff
TEST_RR_OP(smtt16, x20, x1, x2, 0x0000000000000000, 0xfff60005ffef0003, 0x800800000097fff, x5, 104, x10)

inst_30:
// rs1==x7, rs2==x9, rd==x0, rs2_h3_val == 1024, rs1_h0_val == 0, rs2_h2_val == 0
// opcode: smtt16 ; op1:x7; op2:x9; dest:x0; op1val:0xffdf000500070000;  op2val:0x4000000bffffff6
TEST_RR_OP(smtt16, x0, x7, x9, 0x0000000000000000, 0xffdf000500070000, 0x4000000bffffff6, x5, 112, x10)

inst_31:
// rs1==x31, rs2==x26, rd==x28, rs2_h3_val == 512, rs1_h1_val == 512, rs2_h2_val == -5, rs2_h0_val == -513, rs1_h0_val == 4096
// opcode: smtt16 ; op1:x31; op2:x26; dest:x28; op1val:0xfffcc00002001000;  op2val:0x200fffbdffffdff
TEST_RR_OP(smtt16, x28, x31, x26, 0x0000000000000000, 0xfffcc00002001000, 0x200fffbdffffdff, x5, 120, x10)

inst_32:
// rs2_h3_val == 256, rs2_h0_val == 1, rs1_h2_val == -32768
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff8000f7ff0009;  op2val:0x100fdffffdf0001
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xbfff8000f7ff0009, 0x100fdffffdf0001, x5, 128, x10)

inst_33:
// rs2_h3_val == 128, rs2_h0_val == 16, rs1_h3_val == -129, rs1_h1_val == -33, rs2_h2_val == 32767
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0010ffdf0800;  op2val:0x807ffffffb0010
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xff7f0010ffdf0800, 0x807ffffffb0010, x5, 136, x10)

inst_34:
// rs2_h3_val == 64, rs1_h0_val == 32
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffdffffff60020;  op2val:0x40fffeffbfffbf
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x7fffdffffff60020, 0x40fffeffbfffbf, x5, 144, x10)

inst_35:
// rs2_h3_val == 16, rs2_h0_val == -21846
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff5555ffdffffc;  op2val:0x107fffffefaaaa
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xefff5555ffdffffc, 0x107fffffefaaaa, x5, 152, x10)

inst_36:
// rs2_h3_val == 4, rs1_h3_val == -2, rs1_h2_val == 4, rs1_h0_val == 512
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe000400030200;  op2val:0x04fffd3fff0003
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfffe000400030200, 0x04fffd3fff0003, x5, 160, x10)

inst_37:
// rs2_h3_val == 2, rs1_h2_val == 8192
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff200000040000;  op2val:0x02fff840000008
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfdff200000040000, 0x02fff840000008, x5, 168, x10)

inst_38:
// rs2_h3_val == 0, rs1_h1_val == 32, rs1_h2_val == 32767
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x067fff00200002;  op2val:0x00fbffffdffff7
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x067fff00200002, 0x00fbffffdffff7, x5, 176, x10)

inst_39:
// rs2_h3_val == -1, rs1_h0_val == -9, rs2_h0_val == 0, rs1_h2_val == -21846, rs2_h1_val == -3, rs1_h3_val == -32768
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000aaaa0200fff7;  op2val:0xfffffff8fffd0000
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x8000aaaa0200fff7, 0xfffffff8fffd0000, x5, 184, x10)

inst_40:
// rs1_h1_val == -5, rs1_h0_val == 256
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcdffffffb0100;  op2val:0x02fffeffdffff6
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfffcdffffffb0100, 0x02fffeffdffff6, x5, 192, x10)

inst_41:
// rs1_h1_val == -3, rs2_h0_val == -4097, rs1_h2_val == 256
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0100fffd0006;  op2val:0xfdff3fff3fffefff
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfdff0100fffd0006, 0xfdff3fff3fffefff, x5, 200, x10)

inst_42:
// rs1_h1_val == -2, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70100fffe0400;  op2val:0xffdfbfff00017fff
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfff70100fffe0400, 0xffdfbfff00017fff, x5, 208, x10)

inst_43:
// rs1_h1_val == -32768, rs1_h2_val == 512, rs1_h0_val == -2
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff702008000fffe;  op2val:0xdfff0009ff7ffff9
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfff702008000fffe, 0xdfff0009ff7ffff9, x5, 216, x10)

inst_44:
// rs1_h1_val == 8192, rs2_h1_val == -4097
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000aaaa20003fff;  op2val:0xffef7fffeffffff7
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xc000aaaa20003fff, 0xffef7fffeffffff7, x5, 224, x10)

inst_45:
// rs1_h1_val == 256, rs2_h0_val == -8193, rs1_h3_val == -1, rs1_h2_val == 0, rs2_h2_val == 21845, rs1_h0_val == -129
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff00000100ff7f;  op2val:0xaaaa5555fff6dfff
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xffff00000100ff7f, 0xaaaa5555fff6dfff, x5, 232, x10)

inst_46:
// rs1_h1_val == 64, rs2_h2_val == 8192, rs1_h3_val == 64, rs2_h0_val == -1025
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x407fff00400010;  op2val:0xffef20000080fbff
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x407fff00400010, 0xffef20000080fbff, x5, 240, x10)

inst_47:
// rs1_h1_val == 16, rs2_h1_val == -21846, rs1_h2_val == -33, rs2_h2_val == 2
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09ffdf00100002;  op2val:0xfff60002aaaa0100
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x09ffdf00100002, 0xfff60002aaaa0100, x5, 248, x10)

inst_48:
// rs1_h1_val == 8, rs1_h0_val == -16385, rs2_h1_val == 32767, rs1_h2_val == 128
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff00800008bfff;  op2val:0xaaaa55557fffaaaa
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfeff00800008bfff, 0xaaaa55557fffaaaa, x5, 256, x10)

inst_49:
// rs1_h1_val == 1, rs1_h0_val == 8192
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09000700012000;  op2val:0xdfff0004fff60080
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x09000700012000, 0xdfff0004fff60080, x5, 264, x10)

inst_50:
// rs1_h1_val == -1, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0004ffff0007;  op2val:0x20fffa00040400
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfdff0004ffff0007, 0x20fffa00040400, x5, 272, x10)

inst_51:
// rs1_h0_val == -21846, rs1_h3_val == 8192
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000100fff9aaaa;  op2val:0x050008fffbfdff
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x20000100fff9aaaa, 0x050008fffbfdff, x5, 280, x10)

inst_52:
// rs1_h0_val == 21845, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fff840005555;  op2val:0xffdf55550001fffa
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfff8fff840005555, 0xffdf55550001fffa, x5, 288, x10)

inst_53:
// rs1_h0_val == 32767, rs1_h3_val == 1, rs2_h1_val == 64
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x010040ffbf7fff;  op2val:0x10feff0040ffef
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x010040ffbf7fff, 0x10feff0040ffef, x5, 296, x10)

inst_54:
// rs1_h0_val == -2049, rs2_h0_val == 4, rs1_h3_val == -8193
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffbfffdff7ff;  op2val:0xfffcfff9ff7f0004
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xdfffffbfffdff7ff, 0xfffcfff9ff7f0004, x5, 304, x10)

inst_55:
// rs1_h0_val == -1025, rs2_h0_val == 16384, rs1_h1_val == 32767
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40bfff7ffffbff;  op2val:0xfbff0002ffef4000
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x40bfff7ffffbff, 0xfbff0002ffef4000, x5, 312, x10)

inst_56:
// rs1_h0_val == -513, rs2_h1_val == 1024
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffff0200fdff;  op2val:0x80fffe04007fff
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfff6ffff0200fdff, 0x80fffe04007fff, x5, 320, x10)

inst_57:
// rs1_h0_val == -65, rs2_h1_val == -32768, rs2_h2_val == 128
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x07fffe1000ffbf;  op2val:0x7fff008080003fff
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x07fffe1000ffbf, 0x7fff008080003fff, x5, 328, x10)

inst_58:
// rs1_h0_val == -33, rs2_h0_val == 2048
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffeffffdffdf;  op2val:0x800008fff80800
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x5555ffeffffdffdf, 0x800008fff80800, x5, 336, x10)

inst_59:
// rs1_h0_val == -17, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbf7ff0010ffef;  op2val:0x200055550007fff9
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfffbf7ff0010ffef, 0x200055550007fff9, x5, 344, x10)

inst_60:
// rs1_h0_val == -3, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffaaaa0007fffd;  op2val:0xfffafff700400400
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfeffaaaa0007fffd, 0xfffafff700400400, x5, 352, x10)

inst_61:
// rs1_h0_val == 16384, rs1_h2_val == -9
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff7ffff4000;  op2val:0xfff9fffafffafdff
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xbffffff7ffff4000, 0xfff9fffafffafdff, x5, 360, x10)

inst_62:
// rs1_h0_val == 64, rs2_h2_val == 32
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffbffbf0040;  op2val:0xfdff0020fff70080
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfffefffbffbf0040, 0xfdff0020fff70080, x5, 368, x10)

inst_63:
// rs1_h0_val == 8, rs2_h2_val == 4096
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x05c000ffdf0008;  op2val:0xff7f100000030200
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x05c000ffdf0008, 0xff7f100000030200, x5, 376, x10)

inst_64:
// rs2_h1_val == 2, rs2_h2_val == -33
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0004fff91000;  op2val:0xfff6ffdf0002ff7f
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xffff0004fff91000, 0xfff6ffdf0002ff7f, x5, 384, x10)

inst_65:
// rs2_h1_val == 0, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000800080005;  op2val:0x100000080000c000
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xc000000800080005, 0x100000080000c000, x5, 392, x10)

inst_66:
// rs2_h1_val == -1, rs1_h3_val == 16
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x103ffffffc0100;  op2val:0x4000003ffffbfff
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x103ffffffc0100, 0x4000003ffffbfff, x5, 400, x10)

inst_67:
// rs2_h0_val == 21845, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09bfff0800fff7;  op2val:0x2000000304005555
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x09bfff0800fff7, 0x2000000304005555, x5, 408, x10)

inst_68:
// rs2_h0_val == -2049, rs2_h2_val == -4097
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8040000009fffc;  op2val:0xdfffeffffffef7ff
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x8040000009fffc, 0xdfffeffffffef7ff, x5, 416, x10)

inst_69:
// rs2_h0_val == -257, rs2_h1_val == 8192
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00040000;  op2val:0xfeff00052000feff
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xbfffffff00040000, 0xfeff00052000feff, x5, 424, x10)

inst_70:
// rs2_h0_val == -33, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7feff00080200;  op2val:0xfffd00090006ffdf
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfff7feff00080200, 0xfffd00090006ffdf, x5, 432, x10)

inst_71:
// rs2_h0_val == -3, rs2_h1_val == 21845, rs1_h1_val == -4097
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff90400efff0040;  op2val:0xbfff7fff5555fffd
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfff90400efff0040, 0xbfff7fff5555fffd, x5, 440, x10)

inst_72:
// rs2_h0_val == -2, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff62000c0000080;  op2val:0xf7ff00804000fffe
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfff62000c0000080, 0xf7ff00804000fffe, x5, 448, x10)

inst_73:
// rs2_h0_val == -32768, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff0005fff7;  op2val:0xfffc555500088000
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xffffffff0005fff7, 0xfffc555500088000, x5, 456, x10)

inst_74:
// rs2_h0_val == 64, rs2_h1_val == 2048
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xc00001004000ffef;  op2val:0x8000000208000040
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xc00001004000ffef, 0x8000000208000040, x5, 464, x10)

inst_75:
// rs2_h0_val == 32, rs1_h3_val == -17
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffdf2000fff7;  op2val:0x1000ffdffffd0020
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xffefffdf2000fff7, 0x1000ffdffffd0020, x5, 472, x10)

inst_76:
// rs2_h0_val == 2, rs2_h2_val == 1
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000400008000040;  op2val:0xffff000108000002
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xc000400008000040, 0xffff000108000002, x5, 480, x10)

inst_77:
// rs2_h0_val == -1, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800fffe3fff5555;  op2val:0xc00002000800ffff
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x800fffe3fff5555, 0xc00002000800ffff, x5, 488, x10)

inst_78:
// rs1_h3_val == -21846, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000208000100;  op2val:0xaaaa7fff7fffffef
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xaaaa000208000100, 0xaaaa7fff7fffffef, x5, 496, x10)

inst_79:
// rs1_h3_val == -2049, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0400fff6bfff;  op2val:0xfffcfffcfff70040
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xf7ff0400fff6bfff, 0xfffcfffcfff70040, x5, 504, x10)

inst_80:
// rs1_h3_val == -1025, rs2_h2_val == -65, rs2_h1_val == 32
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0009fdff2000;  op2val:0x400ffbf00200010
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfbff0009fdff2000, 0x400ffbf00200010, x5, 512, x10)

inst_81:
// rs1_h0_val == 4, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00040004;  op2val:0xefff00040020fffc
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfbffffff00040004, 0xefff00040020fffc, x5, 520, x10)

inst_82:
// rs1_h3_val == 16384, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000c000fffd0009;  op2val:0xfff68000fff90040
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x4000c000fffd0009, 0xfff68000fff90040, x5, 528, x10)

inst_83:
// rs2_h2_val == -21846, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff80003bffffffa;  op2val:0xf7ffaaaaff7f0009
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfff80003bffffffa, 0xf7ffaaaaff7f0009, x5, 536, x10)

inst_84:
// rs1_h3_val == 1024, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400fffcfff90080;  op2val:0xfff9fdff00050003
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x400fffcfff90080, 0xfff9fdff00050003, x5, 544, x10)

inst_85:
// rs2_h2_val == -8193, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00028000;  op2val:0xfffcdfffffef0009
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xff7fffff00028000, 0xfffcdfffffef0009, x5, 552, x10)

inst_86:
// rs1_h3_val == 256, rs2_h1_val == -513
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100ffefefff0005;  op2val:0x020400fdff1000
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x100ffefefff0005, 0x020400fdff1000, x5, 560, x10)

inst_87:
// rs1_h3_val == 32, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x200400fff7fffe;  op2val:0xfffd0002fff7fffc
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x200400fff7fffe, 0xfffd0002fff7fffc, x5, 568, x10)

inst_88:
// rs2_h2_val == -129, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff2000fffafff9;  op2val:0x7fffff7fbfff0080
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xdfff2000fffafff9, 0x7fffff7fbfff0080, x5, 576, x10)

inst_89:
// rs1_h3_val == 8, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fffcbfff3fff;  op2val:0x00ffbf02003fff
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x08fffcbfff3fff, 0x00ffbf02003fff, x5, 584, x10)

inst_90:
// rs1_h3_val == 4, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x044000f7ffbfff;  op2val:0x400000efff0004
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x044000f7ffbfff, 0x400000efff0004, x5, 592, x10)

inst_91:
// rs1_h3_val == 2, rs2_h2_val == -1, rs2_h1_val == -257
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fffb0020ffdf;  op2val:0xfffffffffeff0040
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x02fffb0020ffdf, 0xfffffffffeff0040, x5, 600, x10)

inst_92:
// rs1_h3_val == 0, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fff880000005;  op2val:0x1000fffdffdf0002
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x00fff880000005, 0x1000fffdffdf0002, x5, 608, x10)

inst_93:
// rs2_h2_val == 16384, rs1_h1_val == -129
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400003ff7f0009;  op2val:0xc00040000200fffd
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x400003ff7f0009, 0xc00040000200fffd, x5, 616, x10)

inst_94:
// rs1_h2_val == -4097, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x00effffff90002;  op2val:0x1000c00055550800
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x00effffff90002, 0x1000c00055550800, x5, 624, x10)

inst_95:
// rs2_h2_val == 2048, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fff7fffffdff;  op2val:0xfbff080002004000
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x08fff7fffffdff, 0xfbff080002004000, x5, 632, x10)

inst_96:
// rs1_h2_val == 4096, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400010003fffffbf;  op2val:0x0900020002ff7f
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x400010003fffffbf, 0x0900020002ff7f, x5, 640, x10)

inst_97:
// rs1_h2_val == 2048, rs2_h2_val == 16
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0508003ffffffc;  op2val:0x1000010fffaf7ff
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x0508003ffffffc, 0x1000010fffaf7ff, x5, 648, x10)

inst_98:
// rs2_h1_val == 256, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x203fff1000efff;  op2val:0xffef800001000400
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x203fff1000efff, 0xffef800001000400, x5, 656, x10)

inst_99:
// rs2_h1_val == -2049, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffefaaaafffa;  op2val:0xfffdfffff7ffbfff
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfdffffefaaaafffa, 0xfffdfffff7ffbfff, x5, 664, x10)

inst_100:
// rs2_h1_val == -1025, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000030080efff;  op2val:0x050006fbff1000
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x4000030080efff, 0x050006fbff1000, x5, 672, x10)

inst_101:
// rs1_h2_val == 1, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff800017ffffffd;  op2val:0x10ffef3fffaaaa
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfff800017ffffffd, 0x10ffef3fffaaaa, x5, 680, x10)

inst_102:
// rs1_h1_val == 21845, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x07080055558000;  op2val:0xffbffeff00010005
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x07080055558000, 0xffbffeff00010005, x5, 688, x10)

inst_103:
// rs1_h2_val == -1025, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffafbff00070006;  op2val:0x20bfff00808000
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfffafbff00070006, 0x20bfff00808000, x5, 696, x10)

inst_104:
// rs1_h2_val == -513, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fdff0040fffc;  op2val:0x40000001ffef0020
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfff6fdff0040fffc, 0x40000001ffef0020, x5, 704, x10)

inst_105:
// rs1_h2_val == -129, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfff7fc000efff;  op2val:0xfff7ffdf1000aaaa
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xffdfff7fc000efff, 0xfff7ffdf1000aaaa, x5, 712, x10)

inst_106:
// rs2_h2_val == 64, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fff93ffffff9;  op2val:0xefff004004000002
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x05fff93ffffff9, 0xefff004004000002, x5, 720, x10)

inst_107:
// rs1_h1_val == -257, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0000feffc000;  op2val:0x06efffffff0009
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfbff0000feffc000, 0x06efffffff0009, x5, 728, x10)

inst_108:
// rs1_h2_val == -3, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffdfff7dfff;  op2val:0x40fdff7fff0002
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfffafffdfff7dfff, 0x40fdff7fff0002, x5, 736, x10)

inst_109:
// rs1_h3_val == 4096, 
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000080002fffb;  op2val:0xeffffffd0006fffe
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x100000080002fffb, 0xeffffffd0006fffe, x5, 744, x10)

inst_110:
// rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h1_val == 16384, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == -5, rs2_h2_val == 256, rs2_h1_val == 16
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff3fff4000fffc;  op2val:0xfffa01000010fffb
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xbfff3fff4000fffc, 0xfffa01000010fffb, x5, 752, x10)

inst_111:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h3_val == -1025, rs1_h3_val == 512, rs2_h2_val == -2049, rs1_h1_val == 4096, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 8, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -2, rs2_h0_val == -9
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000081000fff8;  op2val:0xfbfff7fffffefff7
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0x20000081000fff8, 0xfbfff7fffffefff7, x5, 760, x10)

inst_112:
// rs2_h3_val == -21846, rs2_h0_val == 8192, rs1_h3_val == -3, rs2_h1_val == -17
// opcode: smtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0020fbffdfff;  op2val:0xaaaafff8ffef2000
TEST_RR_OP(smtt16, x31, x30, x29, 0x0000000000000000, 0xfffd0020fbffdfff, 0xaaaafff8ffef2000, x5, 768, x10)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 97*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
