
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukstsa16 instruction of the RISC-V RV64PZicsr extension for the ukstsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukstsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:// rs1 == rd != rs2, rs1==x27, rs2==x1, rd==x27, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 2, rs2_h3_val == 65407, rs2_h0_val == 4, rs1_h3_val == 43690
// opcode: ukstsa16 ; op1:x27; op2:x1; dest:x27; op1val:0xaaaa000d00090000;  op2val:0xff7f000e00020004
TEST_RR_OP(ukstsa16, x27, x27, x1, 0x0000000000000000, 0xaaaa000d00090000, 0xff7f000e00020004, x3, 0, x4)

inst_1:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x7, rs2==x19, rd==x16, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h1_val == 61439, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h3_val == 65527, rs1_h0_val == 65023, rs2_h1_val == 8, rs2_h0_val == 2, rs2_h3_val == 65527, rs1_h2_val == 2, rs2_h2_val == 65533
// opcode: ukstsa16 ; op1:x7; op2:x19; dest:x16; op1val:0xfff70002effffdff;  op2val:0xfff7fffd00080002
TEST_RR_OP(ukstsa16, x16, x7, x19, 0x0000000000000000, 0xfff70002effffdff, 0xfff7fffd00080002, x3, 16, x4)

inst_2:// rs1 == rs2 != rd, rs1==x9, rs2==x9, rd==x25, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h3_val == 1024, rs2_h0_val == 65471, rs1_h0_val == 16, rs1_h1_val == 57343, rs1_h3_val == 128, rs2_h1_val == 65535
// opcode: ukstsa16 ; op1:x9; op2:x9; dest:x25; op1val:0x800011dfff0010;  op2val:0x4000011ffffffbf
TEST_RR_OP(ukstsa16, x25, x9, x9, 0x0000000000000000, 0x800011dfff0010, 0x4000011ffffffbf, x3, 32, x4)

inst_3:// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h2_val == 16, rs2_h1_val == 16, rs1_h3_val == 64, rs2_h0_val == 61439, rs1_h1_val == 16
// opcode: ukstsa16 ; op1:x18; op2:x18; dest:x18; op1val:0x40000e00100000;  op2val:0x0300100010efff
TEST_RR_OP(ukstsa16, x18, x18, x18, 0x0000000000000000, 0x40000e00100000, 0x0300100010efff, x3, 48, x4)

inst_4:// rs2 == rd != rs1, rs1==x15, rs2==x30, rd==x30, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == 512, rs1_h0_val == 43690, rs2_h0_val == 43690, rs2_h2_val == 65471, rs2_h1_val == 65471
// opcode: ukstsa16 ; op1:x15; op2:x30; dest:x30; op1val:0x0c000e0011aaaa;  op2val:0x200ffbfffbfaaaa
TEST_RR_OP(ukstsa16, x30, x15, x30, 0x0000000000000000, 0x0c000e0011aaaa, 0x200ffbfffbfaaaa, x3, 64, x4)

inst_5:// rs1==x8, rs2==x2, rd==x0, rs2_h3_val == 43690, rs1_h1_val == 65471, rs1_h0_val == 65279, rs2_h2_val == 32767, rs1_h2_val == 512, rs1_h3_val == 1, rs2_h0_val == 64511
// opcode: ukstsa16 ; op1:x8; op2:x2; dest:x0; op1val:0x010200ffbffeff;  op2val:0xaaaa7fff0013fbff
TEST_RR_OP(ukstsa16, x0, x8, x2, 0x0000000000000000, 0x010200ffbffeff, 0xaaaa7fff0013fbff, x3, 80, x4)

inst_6:// rs1==x2, rs2==x27, rd==x13, rs2_h3_val == 21845, rs1_h0_val == 32, rs1_h2_val == 8192, rs1_h1_val == 1024, rs1_h3_val == 0, rs2_h2_val == 32768
// opcode: ukstsa16 ; op1:x2; op2:x27; dest:x13; op1val:0x00200004000020;  op2val:0x55558000ffff0011
TEST_RR_OP(ukstsa16, x13, x2, x27, 0x0000000000000000, 0x00200004000020, 0x55558000ffff0011, x3, 96, x4)

inst_7:// rs1==x20, rs2==x13, rd==x8, rs2_h3_val == 32767, rs1_h3_val == 65407, rs2_h2_val == 43690, rs2_h1_val == 4096
// opcode: ukstsa16 ; op1:x20; op2:x13; dest:x8; op1val:0xff7f000b0400000d;  op2val:0x7fffaaaa1000000c
TEST_RR_OP(ukstsa16, x8, x20, x13, 0x0000000000000000, 0xff7f000b0400000d, 0x7fffaaaa1000000c, x3, 112, x4)

inst_8:// rs1==x0, rs2==x23, rd==x21, rs2_h3_val == 49151, rs1_h3_val == 64511, rs1_h0_val == 61439, rs2_h2_val == 64511, rs1_h2_val == 65023
// opcode: ukstsa16 ; op1:x0; op2:x23; dest:x21; op1val:0xfbfffdff000befff;  op2val:0xbffffbff000b0013
TEST_RR_OP(ukstsa16, x21, x0, x23, 0x0000000000000000, 0xfbfffdff000befff, 0xbffffbff000b0013, x3, 128, x4)

inst_9:// rs1==x13, rs2==x8, rd==x1, rs2_h3_val == 57343, rs2_h1_val == 32, rs1_h1_val == 128, rs1_h0_val == 65503, rs1_h3_val == 21845, rs1_h2_val == 8
// opcode: ukstsa16 ; op1:x13; op2:x8; dest:x1; op1val:0x555500080080ffdf;  op2val:0xdfff000d0020fbff
TEST_RR_OP(ukstsa16, x1, x13, x8, 0x0000000000000000, 0x555500080080ffdf, 0xdfff000d0020fbff, x3, 144, x4)

inst_10:// rs1==x5, rs2==x11, rd==x7, rs2_h3_val == 61439, rs1_h2_val == 65503, rs2_h0_val == 65531, rs1_h0_val == 65534
// opcode: ukstsa16 ; op1:x5; op2:x11; dest:x7; op1val:0x12ffdf000dfffe;  op2val:0xefff00060011fffb
TEST_RR_OP(ukstsa16, x7, x5, x11, 0x0000000000000000, 0x12ffdf000dfffe, 0xefff00060011fffb, x3, 160, x4)

inst_11:// rs1==x10, rs2==x12, rd==x20, rs2_h3_val == 63487, rs2_h1_val == 4, rs1_h0_val == 49151, rs1_h1_val == 2048, rs2_h0_val == 65407
// opcode: ukstsa16 ; op1:x10; op2:x12; dest:x20; op1val:0x0effdf0800bfff;  op2val:0xf7ffaaaa0004ff7f
TEST_RR_OP(ukstsa16, x20, x10, x12, 0x0000000000000000, 0x0effdf0800bfff, 0xf7ffaaaa0004ff7f, x3, 176, x4)

inst_12:// rs1==x14, rs2==x10, rd==x26, rs2_h3_val == 64511, rs2_h0_val == 8, rs2_h1_val == 61439, rs1_h2_val == 63487
// opcode: ukstsa16 ; op1:x14; op2:x10; dest:x26; op1val:0x0ef7ff0010fffe;  op2val:0xfbff0009efff0008
TEST_RR_OP(ukstsa16, x26, x14, x10, 0x0000000000000000, 0x0ef7ff0010fffe, 0xfbff0009efff0008, x3, 192, x4)

inst_13:// rs1==x28, rs2==x31, rd==x29, rs2_h3_val == 65023, rs2_h2_val == 49151, rs2_h1_val == 512, rs1_h2_val == 64
// opcode: ukstsa16 ; op1:x28; op2:x31; dest:x29; op1val:0x0600400003000b;  op2val:0xfdffbfff0200fbff
TEST_RR_OP(ukstsa16, x29, x28, x31, 0x0000000000000000, 0x0600400003000b, 0xfdffbfff0200fbff, x3, 208, x4)

inst_14:// rs1==x12, rs2==x21, rd==x22, rs2_h3_val == 65279, rs2_h2_val == 64, rs2_h0_val == 4096, rs1_h1_val == 65279, rs2_h1_val == 64, rs1_h3_val == 512, rs1_h2_val == 4096, rs1_h0_val == 4096
// opcode: ukstsa16 ; op1:x12; op2:x21; dest:x22; op1val:0x2001000feff1000;  op2val:0xfeff004000401000
TEST_RR_OP(ukstsa16, x22, x12, x21, 0x0000000000000000, 0x2001000feff1000, 0xfeff004000401000, x3, 224, x4)

inst_15:// rs1==x24, rs2==x26, rd==x17, rs2_h3_val == 65471, rs2_h1_val == 1, rs1_h0_val == 128, rs1_h3_val == 2048
// opcode: ukstsa16 ; op1:x24; op2:x26; dest:x17; op1val:0x800000200800080;  op2val:0xffbf7fff0001000c
TEST_RR_OP(ukstsa16, x17, x24, x26, 0x0000000000000000, 0x800000200800080, 0xffbf7fff0001000c, x3, 240, x9)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_16:// rs1==x23, rs2==x6, rd==x15, rs2_h3_val == 65503, rs1_h0_val == 16384, rs2_h2_val == 1024, rs2_h1_val == 49151
// opcode: ukstsa16 ; op1:x23; op2:x6; dest:x15; op1val:0x0c0002000d4000;  op2val:0xffdf0400bfffffbf
TEST_RR_OP(ukstsa16, x15, x23, x6, 0x0000000000000000, 0x0c0002000d4000, 0xffdf0400bfffffbf, x8, 0, x9)

inst_17:// rs1==x25, rs2==x0, rd==x28, rs2_h3_val == 65519, rs2_h1_val == 1024, rs1_h3_val == 16384
// opcode: ukstsa16 ; op1:x25; op2:x0; dest:x28; op1val:0x4000001100130012;  op2val:0xffef000b0400aaaa
TEST_RR_OP(ukstsa16, x28, x25, x0, 0x0000000000000000, 0x4000001100130012, 0xffef000b0400aaaa, x8, 16, x9)

inst_18:// rs1==x22, rs2==x16, rd==x3, rs2_h3_val == 65531, rs1_h3_val == 256, rs1_h1_val == 8, rs2_h1_val == 2048, rs2_h2_val == 65407
// opcode: ukstsa16 ; op1:x22; op2:x16; dest:x3; op1val:0x100000c00080007;  op2val:0xfffbff7f0800fffb
TEST_RR_OP(ukstsa16, x3, x22, x16, 0x0000000000000000, 0x100000c00080007, 0xfffbff7f0800fffb, x8, 32, x9)

inst_19:// rs1==x31, rs2==x4, rd==x23, rs2_h3_val == 65533, rs1_h1_val == 65535, rs1_h2_val == 43690, rs2_h0_val == 65533, rs2_h1_val == 63487
// opcode: ukstsa16 ; op1:x31; op2:x4; dest:x23; op1val:0xfff7aaaaffff4000;  op2val:0xfffd000ff7fffffd
TEST_RR_OP(ukstsa16, x23, x31, x4, 0x0000000000000000, 0xfff7aaaaffff4000, 0xfffd000ff7fffffd, x8, 48, x9)

inst_20:// rs1==x29, rs2==x14, rd==x11, rs2_h3_val == 65534, rs2_h1_val == 65531, rs2_h0_val == 16384, rs2_h2_val == 2
// opcode: ukstsa16 ; op1:x29; op2:x14; dest:x11; op1val:0x00000f000ffdff;  op2val:0xfffe0002fffb4000
TEST_RR_OP(ukstsa16, x11, x29, x14, 0x0000000000000000, 0x00000f000ffdff, 0xfffe0002fffb4000, x8, 64, x9)

inst_21:// rs1==x19, rs2==x24, rd==x10, rs2_h3_val == 32768, rs1_h0_val == 8192
// opcode: ukstsa16 ; op1:x19; op2:x24; dest:x10; op1val:0x03000d08002000;  op2val:0x80000012000b0005
TEST_RR_OP(ukstsa16, x10, x19, x24, 0x0000000000000000, 0x03000d08002000, 0x80000012000b0005, x8, 80, x9)

inst_22:// rs1==x6, rs2==x5, rd==x19, rs2_h3_val == 16384, rs1_h0_val == 64, rs2_h1_val == 65533
// opcode: ukstsa16 ; op1:x6; op2:x5; dest:x19; op1val:0x05100000080040;  op2val:0x40000011fffd000d
TEST_RR_OP(ukstsa16, x19, x6, x5, 0x0000000000000000, 0x05100000080040, 0x40000011fffd000d, x8, 96, x9)

inst_23:// rs1==x1, rs2==x22, rd==x24, rs2_h3_val == 8192, rs1_h2_val == 57343, rs1_h1_val == 65533
// opcode: ukstsa16 ; op1:x1; op2:x22; dest:x24; op1val:0xaaaadffffffd0006;  op2val:0x2000fbff00030007
TEST_RR_OP(ukstsa16, x24, x1, x22, 0x0000000000000000, 0xaaaadffffffd0006, 0x2000fbff00030007, x8, 112, x9)

inst_24:// rs1==x17, rs2==x28, rd==x12, rs2_h3_val == 4096, 
// opcode: ukstsa16 ; op1:x17; op2:x28; dest:x12; op1val:0x0902000008feff;  op2val:0x1000aaaa1000ff7f
TEST_RR_OP(ukstsa16, x12, x17, x28, 0x0000000000000000, 0x0902000008feff, 0x1000aaaa1000ff7f, x8, 128, x9)

inst_25:// rs1==x4, rs2==x20, rd==x14, rs2_h3_val == 2048, rs1_h3_val == 65279, rs2_h2_val == 2048, rs2_h1_val == 0, rs1_h1_val == 32
// opcode: ukstsa16 ; op1:x4; op2:x20; dest:x14; op1val:0xfeff000900200010;  op2val:0x800080000000008
TEST_RR_OP(ukstsa16, x14, x4, x20, 0x0000000000000000, 0xfeff000900200010, 0x800080000000008, x8, 144, x9)

inst_26:// rs1==x16, rs2==x15, rd==x2, rs2_h3_val == 256, rs2_h0_val == 57343, rs1_h2_val == 2048, rs1_h3_val == 65519
// opcode: ukstsa16 ; op1:x16; op2:x15; dest:x2; op1val:0xffef08000011efff;  op2val:0x100000c0400dfff
TEST_RR_OP(ukstsa16, x2, x16, x15, 0x0000000000000000, 0xffef08000011efff, 0x100000c0400dfff, x8, 160, x9)

inst_27:// rs1==x30, rs2==x29, rd==x5, rs2_h3_val == 128, rs2_h1_val == 65527, rs2_h2_val == 128
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x5; op1val:0x090040ffbf0020;  op2val:0x800080fff7fbff
TEST_RR_OP(ukstsa16, x5, x30, x29, 0x0000000000000000, 0x090040ffbf0020, 0x800080fff7fbff, x8, 176, x9)

inst_28:// rs1==x11, rs2==x7, rd==x6, rs2_h3_val == 64, rs1_h2_val == 1024, rs1_h1_val == 8192, rs1_h0_val == 1
// opcode: ukstsa16 ; op1:x11; op2:x7; dest:x6; op1val:0x4000040020000001;  op2val:0x400009fff7ffbf
TEST_RR_OP(ukstsa16, x6, x11, x7, 0x0000000000000000, 0x4000040020000001, 0x400009fff7ffbf, x8, 192, x9)

inst_29:// rs1==x21, rs2==x3, rd==x31, rs2_h3_val == 32, rs2_h2_val == 0, rs2_h1_val == 57343, rs1_h2_val == 32767
// opcode: ukstsa16 ; op1:x21; op2:x3; dest:x31; op1val:0x8007ffffeff000e;  op2val:0x200000dfff000d
TEST_RR_OP(ukstsa16, x31, x21, x3, 0x0000000000000000, 0x8007ffffeff000e, 0x200000dfff000d, x8, 208, x9)

inst_30:// rs1==x3, rs2==x25, rd==x9, rs2_h3_val == 16, rs1_h3_val == 1024, rs1_h2_val == 16, rs1_h0_val == 512
// opcode: ukstsa16 ; op1:x3; op2:x25; dest:x9; op1val:0x400001000100200;  op2val:0x10ffbf0006efff
TEST_RR_OP(ukstsa16, x9, x3, x25, 0x0000000000000000, 0x400001000100200, 0x10ffbf0006efff, x8, 224, x2)

inst_31:// rs1==x26, rs2==x17, rd==x4, rs2_h3_val == 8, rs2_h0_val == 16, rs2_h1_val == 65407, rs1_h1_val == 32767
// opcode: ukstsa16 ; op1:x26; op2:x17; dest:x4; op1val:0xfbffffdf7fff2000;  op2val:0x08000dff7f0010
TEST_RR_OP(ukstsa16, x4, x26, x17, 0x0000000000000000, 0xfbffffdf7fff2000, 0x08000dff7f0010, x8, 240, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:// rs2_h3_val == 4, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8004000080000e;  op2val:0x040007000cfbff
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x8004000080000e, 0x040007000cfbff, x1, 0, x2)

inst_33:// rs2_h3_val == 2, rs2_h0_val == 65503, rs2_h1_val == 128, rs1_h0_val == 32767
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x13000f00087fff;  op2val:0x0200800080ffdf
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x13000f00087fff, 0x0200800080ffdf, x1, 16, x2)

inst_34:// rs2_h3_val == 1, rs2_h1_val == 65534, rs1_h2_val == 128
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c008004002000;  op2val:0x017ffffffe000b
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x0c008004002000, 0x017ffffffe000b, x1, 32, x2)

inst_35:// rs2_h3_val == 65535, rs2_h2_val == 16384, rs1_h3_val == 65471, rs1_h1_val == 32768, rs2_h0_val == 0, rs1_h2_val == 32
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00208000efff;  op2val:0xffff400000010000
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xffbf00208000efff, 0xffff400000010000, x1, 48, x2)

inst_36:// rs2_h3_val == 0, rs1_h1_val == 43690, rs2_h2_val == 65531, rs2_h0_val == 512, rs2_h1_val == 65519
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400040aaaa7fff;  op2val:0x00fffbffef0200
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x400040aaaa7fff, 0x00fffbffef0200, x1, 64, x2)

inst_37:// rs2_h2_val == 21845, rs1_h2_val == 65471, rs2_h0_val == 32, rs1_h1_val == 256
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x800ffbf01000010;  op2val:0x105555bfff0020
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x800ffbf01000010, 0x105555bfff0020, x1, 80, x2)

inst_38:// rs1_h1_val == 4, rs2_h0_val == 65519, rs1_h3_val == 32768, rs2_h2_val == 4
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000300047fff;  op2val:0x0c0004f7ffffef
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x8000000300047fff, 0x0c0004f7ffffef, x1, 96, x2)

inst_39:// rs1_h1_val == 2, rs1_h3_val == 32767
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffdf00020001;  op2val:0x0e00020020000b
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x7fffffdf00020001, 0x0e00020020000b, x1, 112, x2)

inst_40:// rs1_h1_val == 1, rs1_h0_val == 65519
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1100020001ffef;  op2val:0x11800000000020
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x1100020001ffef, 0x11800000000020, x1, 128, x2)

inst_41:// rs1_h1_val == 0, rs2_h1_val == 256, rs2_h2_val == 65527, rs1_h3_val == 16
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10ffdf0000ffdf;  op2val:0xffdffff70100000e
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x10ffdf0000ffdf, 0xffdffff70100000e, x1, 144, x2)

inst_42:// rs1_h0_val == 21845, rs1_h3_val == 65531, rs1_h2_val == 65519, rs2_h2_val == 65534
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffef00025555;  op2val:0x10fffe000c000a
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xfffbffef00025555, 0x10fffe000c000a, x1, 160, x2)

inst_43:// rs1_h0_val == 57343, rs1_h3_val == 4, rs2_h0_val == 32767
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x040009000ddfff;  op2val:0x110013f7ff7fff
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x040009000ddfff, 0x110013f7ff7fff, x1, 176, x2)

inst_44:// rs1_h0_val == 63487, rs2_h1_val == 32767, rs2_h0_val == 21845
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff08000003f7ff;  op2val:0xfffe000f7fff5555
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xfeff08000003f7ff, 0xfffe000f7fff5555, x1, 192, x2)

inst_45:// rs1_h0_val == 64511, rs2_h0_val == 65023, rs2_h2_val == 8, rs2_h1_val == 8192, rs1_h1_val == 65407
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x110003ff7ffbff;  op2val:0x0d00082000fdff
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x110003ff7ffbff, 0x0d00082000fdff, x1, 208, x2)

inst_46:// rs1_h0_val == 65407, rs2_h1_val == 65503, rs2_h2_val == 512
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x03000efeffff7f;  op2val:0xffef0200ffdf0000
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x03000efeffff7f, 0xffef0200ffdf0000, x1, 224, x2)

inst_47:// rs1_h0_val == 65471, rs2_h0_val == 1024
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0000090001ffbf;  op2val:0x07040000060400
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x0000090001ffbf, 0x07040000060400, x1, 240, x2)

inst_48:// rs1_h0_val == 65527, rs1_h2_val == 21845, rs2_h2_val == 65535
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x005555000dfff7;  op2val:0x1000ffff00050002
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x005555000dfff7, 0x1000ffff00050002, x1, 256, x2)

inst_49:// rs1_h0_val == 65531, rs2_h2_val == 65279, rs1_h1_val == 65527
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x55557ffffff7fffb;  op2val:0x5555feff00000000
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x55557ffffff7fffb, 0x5555feff00000000, x1, 272, x2)

inst_50:// rs1_h0_val == 65533, rs1_h1_val == 49151, rs2_h2_val == 65023, rs1_h2_val == 65535
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffbffffffd;  op2val:0x11fdffffef5555
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xfbffffffbffffffd, 0x11fdffffef5555, x1, 288, x2)

inst_51:// rs1_h0_val == 32768, rs2_h2_val == 256
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf001001008000;  op2val:0x0a0100bfff0003
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xffbf001001008000, 0x0a0100bfff0003, x1, 304, x2)

inst_52:// rs1_h0_val == 2048, rs1_h2_val == 49151, rs1_h1_val == 64511, rs2_h0_val == 256
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40bffffbff0800;  op2val:0xefff0080000f0100
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x40bffffbff0800, 0xefff0080000f0100, x1, 320, x2)

inst_53:// rs1_h0_val == 1024, rs1_h2_val == 65279, rs1_h3_val == 8
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x08feffffff0400;  op2val:0xfffd0013fffb000c
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x08feffffff0400, 0xfffd0013fffb000c, x1, 336, x2)

inst_54:// rs1_h0_val == 256, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf002000060100;  op2val:0xfdff0012000a0007
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xffbf002000060100, 0xfdff0012000a0007, x1, 352, x2)

inst_55:// rs1_h0_val == 8, rs2_h1_val == 16384, rs1_h1_val == 63487
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80dffff7ff0008;  op2val:0x0800104000000e
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x80dffff7ff0008, 0x0800104000000e, x1, 368, x2)

inst_56:// rs1_h0_val == 4, rs2_h2_val == 4096
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x03000e000a0004;  op2val:0xdfff1000000f0100
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x03000e000a0004, 0xdfff1000000f0100, x1, 384, x2)

inst_57:// rs1_h0_val == 2, rs1_h3_val == 65534
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe000ebfff0002;  op2val:0x800000020020fffb
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xfffe000ebfff0002, 0x800000020020fffb, x1, 400, x2)

inst_58:// rs2_h0_val == 65527, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x06ffdf00010020;  op2val:0x407fff000ffff7
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x06ffdf00010020, 0x407fff000ffff7, x1, 416, x2)

inst_59:// rs2_h0_val == 65534, rs1_h3_val == 4096
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000e00081000;  op2val:0x80bfff0005fffe
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x1000000e00081000, 0x80bfff0005fffe, x1, 432, x2)

inst_60:// rs2_h0_val == 32768, rs1_h2_val == 65527
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fff700807fff;  op2val:0x0c001200038000
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x10fff700807fff, 0x0c001200038000, x1, 448, x2)

inst_61:// rs2_h0_val == 8192, rs1_h3_val == 65023
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff000d00120200;  op2val:0x400007000c2000
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xfdff000d00120200, 0x400007000c2000, x1, 464, x2)

inst_62:// rs2_h0_val == 2048, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0007ffff0080;  op2val:0xffef7fff00070800
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xff7f0007ffff0080, 0xffef7fff00070800, x1, 480, x2)

inst_63:// rs2_h0_val == 128, rs1_h1_val == 65531
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fff7fffbfdff;  op2val:0xdffffffe00090080
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x100fff7fffbfdff, 0xdffffffe00090080, x1, 496, x2)

inst_64:// rs2_h0_val == 64, rs1_h2_val == 65533
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0dfffdaaaa8000;  op2val:0x800000a00120040
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x0dfffdaaaa8000, 0x800000a00120040, x1, 512, x2)

inst_65:// rs2_h0_val == 1, rs1_h3_val == 49151
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffff7ff00800010;  op2val:0x0ebfff000a0001
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xbffff7ff00800010, 0x0ebfff000a0001, x1, 528, x2)

inst_66:// rs2_h0_val == 65535, rs2_h2_val == 32, rs2_h1_val == 21845
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100dfff00067fff;  op2val:0x0d00205555ffff
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x100dfff00067fff, 0x0d00205555ffff, x1, 544, x2)

inst_67:// rs1_h3_val == 57343, rs1_h2_val == 4
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0004fbfffbff;  op2val:0xbffffefffffd1000
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xdfff0004fbfffbff, 0xbffffefffffd1000, x1, 560, x2)

inst_68:// rs1_h3_val == 61439, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0080dfff8000;  op2val:0x4000fff7000d0020
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xefff0080dfff8000, 0x4000fff7000d0020, x1, 576, x2)

inst_69:// rs1_h3_val == 63487, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffdf00050020;  op2val:0x07aaaa2000ffdf
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xf7ffffdf00050020, 0x07aaaa2000ffdf, x1, 592, x2)

inst_70:// rs1_h3_val == 65503, rs2_h0_val == 49151, rs1_h1_val == 21845
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf00115555fdff;  op2val:0x4000fbfff7ffbfff
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xffdf00115555fdff, 0x4000fbfff7ffbfff, x1, 608, x2)

inst_71:// rs1_h0_val == 65535, rs2_h1_val == 43690, rs1_h1_val == 65534
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fefffffeffff;  op2val:0xffdf0012aaaaefff
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x03fefffffeffff, 0xffdf0012aaaaefff, x1, 624, x2)

inst_72:// rs1_h3_val == 65533, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffd01000040;  op2val:0x400011000f0040
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xfffdfffd01000040, 0x400011000f0040, x1, 640, x2)

inst_73:// rs1_h3_val == 8192, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fdfffbfffffb;  op2val:0x7fff000fffdf0003
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x2000fdfffbfffffb, 0x7fff000fffdf0003, x1, 656, x2)

inst_74:// rs2_h2_val == 57343, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x09dfff5555ffff;  op2val:0x0edfff00000007
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x09dfff5555ffff, 0x0edfff00000007, x1, 672, x2)

inst_75:// rs2_h2_val == 61439, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0002aaaa1000;  op2val:0xfffdeffffffb4000
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xdfff0002aaaa1000, 0xfffdeffffffb4000, x1, 688, x2)

inst_76:// rs2_h2_val == 8192, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e001200062000;  op2val:0x1002000ffff0001
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x0e001200062000, 0x1002000ffff0001, x1, 704, x2)

inst_77:// rs1_h2_val == 61439, rs2_h1_val == 65023
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x13effffffdfff7;  op2val:0xfbff0005fdff0008
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x13effffffdfff7, 0xfbff0005fdff0008, x1, 720, x2)

inst_78:// rs1_h2_val == 64511, rs2_h1_val == 65279
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffbff00050020;  op2val:0x070007feffffdf
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xbffffbff00050020, 0x070007feffffdf, x1, 736, x2)

inst_79:// rs1_h2_val == 65407, rs2_h1_val == 64511, rs1_h3_val == 2
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ff7ffff70004;  op2val:0x0eff7ffbff000a
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x02ff7ffff70004, 0x0eff7ffbff000a, x1, 752, x2)

inst_80:// rs1_h2_val == 65531, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fffbaaaa000d;  op2val:0xbfff00097fff0040
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x00fffbaaaa000d, 0xbfff00097fff0040, x1, 768, x2)

inst_81:// rs2_h2_val == 1, rs1_h3_val == 32
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20ffbf0400ffef;  op2val:0x0400010002000d
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x20ffbf0400ffef, 0x0400010002000d, x1, 784, x2)

inst_82:// rs1_h2_val == 65534, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0dfffeefff0011;  op2val:0x8000110003ffef
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x0dfffeefff0011, 0x8000110003ffef, x1, 800, x2)

inst_83:// rs1_h2_val == 32768, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x038000f7ff7fff;  op2val:0x100fffdfffe0008
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x038000f7ff7fff, 0x100fffdfffe0008, x1, 816, x2)

inst_84:// rs1_h2_val == 16384, rs2_h2_val == 63487
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10400000120200;  op2val:0x07f7ff0007000f
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x10400000120200, 0x07f7ff0007000f, x1, 832, x2)

inst_85:// rs1_h2_val == 256, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400100fbff0020;  op2val:0xfff7ffff55550800
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x400100fbff0020, 0xfff7ffff55550800, x1, 848, x2)

inst_86:// rs1_h2_val == 0, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x12000000007fff;  op2val:0x200000600120013
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x12000000007fff, 0x200000600120013, x1, 864, x2)

inst_87:// rs2_h1_val == 32768, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000004aaaa0003;  op2val:0x4000000c80000002
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x80000004aaaa0003, 0x4000000c80000002, x1, 880, x2)

inst_88:// rs2_h0_val == 65279, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffef7ff5555ffdf;  op2val:0xffef7fffaaaafeff
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xfffef7ff5555ffdf, 0xffef7fffaaaafeff, x1, 896, x2)

inst_89:// rs1_h1_val == 65023, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x010003fdff0800;  op2val:0x1100070040aaaa
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x010003fdff0800, 0x1100070040aaaa, x1, 912, x2)

inst_90:// rs2_h0_val == 63487, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f7fff000e0100;  op2val:0x038000fbfff7ff
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xff7f7fff000e0100, 0x038000fbfff7ff, x1, 928, x2)

inst_91:// rs1_h1_val == 65503, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffdf8000;  op2val:0x0200800012bfff
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x004000ffdf8000, 0x0200800012bfff, x1, 944, x2)

inst_92:// rs1_h1_val == 65519, rs2_h2_val == 65519
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c000dffeffffd;  op2val:0x06ffef00020001
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x0c000dffeffffd, 0x06ffef00020001, x1, 960, x2)

inst_93:// rs1_h1_val == 16384, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfff7f4000ffbf;  op2val:0x200000a00030005
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xffbfff7f4000ffbf, 0x200000a00030005, x1, 976, x2)

inst_94:// rs1_h1_val == 4096, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffe10000009;  op2val:0xfbff000f000f0012
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xf7fffffe10000009, 0xfbff000f000f0012, x1, 992, x2)

inst_95:// rs1_h1_val == 512, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000c02000000;  op2val:0x13000f00130010
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x4000000c02000000, 0x13000f00130010, x1, 1008, x2)

inst_96:// rs2_h2_val == 65503, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x028000000cfffd;  op2val:0x05ffdffffb000e
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x028000000cfffd, 0x05ffdffffb000e, x1, 1024, x2)

inst_97:// rs1_h3_val == 65535, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff000d01001000;  op2val:0x40000100efffaaaa
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xffff000d01001000, 0x40000100efffaaaa, x1, 1040, x2)

inst_98:// rs1_h1_val == 64, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0ffffe00400002;  op2val:0xaaaafdff0012ffff
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x0ffffe00400002, 0xaaaafdff0012ffff, x1, 1056, x2)

inst_99:// rs1_h2_val == 1, 
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0001feff0006;  op2val:0x05fff720000400
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0xfbff0001feff0006, 0x05fff720000400, x1, 1072, x2)

inst_100:// rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h3_val == 1024, rs2_h0_val == 65471, rs1_h0_val == 16, rs1_h1_val == 57343, rs1_h3_val == 128, rs2_h1_val == 65535
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x800011dfff0010;  op2val:0x4000011ffffffbf
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x800011dfff0010, 0x4000011ffffffbf, x1, 1088, x2)

inst_101:// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h2_val == 16, rs2_h1_val == 16, rs1_h3_val == 64, rs2_h0_val == 61439, rs1_h1_val == 16
// opcode: ukstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000e00100000;  op2val:0x0300100010efff
TEST_RR_OP(ukstsa16, x31, x30, x29, 0x0000000000000000, 0x40000e00100000, 0x0300100010efff, x1, 1104, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x8_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 140*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
