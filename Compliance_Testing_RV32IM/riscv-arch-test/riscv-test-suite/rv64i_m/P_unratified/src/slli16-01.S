
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the slli16 instruction of the RISC-V RV64PZicsr extension for the slli16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",slli16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rd, rs1==x7, rd==x7, rs1_h0_val == 0, rs1_h2_val == 16384, rs1_h3_val == 43690, imm_val == 14, rs1_h1_val == 32767
// opcode: slli16 ; op1:x7; dest:x7; op1val:0xaaaa40007fff0000;  immval:0xe
TEST_IMM_OP( slli16, x7, x7, 0x0000000000000000, 0xaaaa40007fff0000, 0xe, x8, 0, x5)

inst_1:
// rs1 != rd, rs1==x25, rd==x3, imm_val == 15, rs1_h3_val == 512, rs1_h0_val == 64511, rs1_h1_val == 8
// opcode: slli16 ; op1:x25; dest:x3; op1val:0x20000050008fbff;  immval:0xf
TEST_IMM_OP( slli16, x3, x25, 0x0000000000000000, 0x20000050008fbff, 0xf, x8, 8, x5)

inst_2:
// rs1==x20, rd==x25, imm_val == 13, rs1_h3_val == 1024, rs1_h0_val == 65533
// opcode: slli16 ; op1:x20; dest:x25; op1val:0x4000013000ffffd;  immval:0xd
TEST_IMM_OP( slli16, x25, x20, 0x0000000000000000, 0x4000013000ffffd, 0xd, x8, 16, x5)

inst_3:
// rs1==x13, rd==x29, imm_val == 12, rs1_h3_val == 65534, rs1_h2_val == 4, rs1_h0_val == 65519, rs1_h1_val == 65527
// opcode: slli16 ; op1:x13; dest:x29; op1val:0xfffe0004fff7ffef;  immval:0xc
TEST_IMM_OP( slli16, x29, x13, 0x0000000000000000, 0xfffe0004fff7ffef, 0xc, x8, 24, x5)

inst_4:
// rs1==x15, rd==x24, imm_val == 11, rs1_h0_val == 21845, rs1_h3_val == 0, rs1_h1_val == 16, rs1_h2_val == 32767
// opcode: slli16 ; op1:x15; dest:x24; op1val:0x007fff00105555;  immval:0xb
TEST_IMM_OP( slli16, x24, x15, 0x0000000000000000, 0x007fff00105555, 0xb, x8, 32, x5)

inst_5:
// rs1==x22, rd==x4, imm_val == 10, rs1_h0_val == 32, rs1_h2_val == 65535
// opcode: slli16 ; op1:x22; dest:x4; op1val:0x0fffff00080020;  immval:0xa
TEST_IMM_OP( slli16, x4, x22, 0x0000000000000000, 0x0fffff00080020, 0xa, x8, 40, x5)

inst_6:
// rs1==x10, rd==x0, imm_val == 9, rs1_h1_val == 128, rs1_h2_val == 43690, rs1_h0_val == 256
// opcode: slli16 ; op1:x10; dest:x0; op1val:0x00aaaa00800100;  immval:0x9
TEST_IMM_OP( slli16, x0, x10, 0x0000000000000000, 0x00aaaa00800100, 0x9, x8, 48, x5)

inst_7:
// rs1==x31, rd==x13, imm_val == 8, rs1_h1_val == 65534, rs1_h2_val == 2
// opcode: slli16 ; op1:x31; dest:x13; op1val:0x0f0002fffe000f;  immval:0x8
TEST_IMM_OP( slli16, x13, x31, 0x0000000000000000, 0x0f0002fffe000f, 0x8, x8, 56, x5)

inst_8:
// rs1==x14, rd==x2, imm_val == 7, rs1_h1_val == 65519
// opcode: slli16 ; op1:x14; dest:x2; op1val:0x0a000dffef000e;  immval:0x7
TEST_IMM_OP( slli16, x2, x14, 0x0000000000000000, 0x0a000dffef000e, 0x7, x8, 64, x5)

inst_9:
// rs1==x1, rd==x23, imm_val == 6, rs1_h3_val == 65531, rs1_h1_val == 1, rs1_h0_val == 16384
// opcode: slli16 ; op1:x1; dest:x23; op1val:0xfffb7fff00014000;  immval:0x6
TEST_IMM_OP( slli16, x23, x1, 0x0000000000000000, 0xfffb7fff00014000, 0x6, x8, 72, x5)

inst_10:
// rs1==x29, rd==x11, imm_val == 5, rs1_h3_val == 49151
// opcode: slli16 ; op1:x29; dest:x11; op1val:0xbfff001300074000;  immval:0x5
TEST_IMM_OP( slli16, x11, x29, 0x0000000000000000, 0xbfff001300074000, 0x5, x8, 80, x5)

inst_11:
// rs1==x2, rd==x10, imm_val == 4, rs1_h0_val == 65279, rs1_h3_val == 128, rs1_h2_val == 65279
// opcode: slli16 ; op1:x2; dest:x10; op1val:0x80feff0003feff;  immval:0x4
TEST_IMM_OP( slli16, x10, x2, 0x0000000000000000, 0x80feff0003feff, 0x4, x8, 88, x5)

inst_12:
// rs1==x27, rd==x9, imm_val == 3, rs1_h3_val == 65279, rs1_h2_val == 65519
// opcode: slli16 ; op1:x27; dest:x9; op1val:0xfeffffef7fff000c;  immval:0x3
TEST_IMM_OP( slli16, x9, x27, 0x0000000000000000, 0xfeffffef7fff000c, 0x3, x8, 96, x5)

inst_13:
// rs1==x18, rd==x1, imm_val == 2, 
// opcode: slli16 ; op1:x18; dest:x1; op1val:0x06feff000b0012;  immval:0x2
TEST_IMM_OP( slli16, x1, x18, 0x0000000000000000, 0x06feff000b0012, 0x2, x8, 104, x5)

inst_14:
// rs1==x24, rd==x28, imm_val == 1, rs1_h1_val == 64511, rs1_h0_val == 2048
// opcode: slli16 ; op1:x24; dest:x28; op1val:0x800009fbff0800;  immval:0x1
TEST_IMM_OP( slli16, x28, x24, 0x0000000000000000, 0x800009fbff0800, 0x1, x8, 112, x5)

inst_15:
// rs1==x23, rd==x27, imm_val == 0, rs1_h1_val == 65279, rs1_h3_val == 65519, rs1_h0_val == 65535
// opcode: slli16 ; op1:x23; dest:x27; op1val:0xffef0011feffffff;  immval:0x0
TEST_IMM_OP( slli16, x27, x23, 0x0000000000000000, 0xffef0011feffffff, 0x0, x8, 120, x5)

inst_16:
// rs1==x9, rd==x30, rs1_h3_val == 21845, rs1_h0_val == 61439, rs1_h1_val == 61439
// opcode: slli16 ; op1:x9; dest:x30; op1val:0x55557fffefffefff;  immval:0x6
TEST_IMM_OP( slli16, x30, x9, 0x0000000000000000, 0x55557fffefffefff, 0x6, x8, 128, x5)

inst_17:
// rs1==x28, rd==x21, rs1_h3_val == 32767, rs1_h2_val == 63487
// opcode: slli16 ; op1:x28; dest:x21; op1val:0x7ffff7fffff7000a;  immval:0xf
TEST_IMM_OP( slli16, x21, x28, 0x0000000000000000, 0x7ffff7fffff7000a, 0xf, x8, 136, x5)

inst_18:
// rs1==x4, rd==x20, rs1_h3_val == 57343, 
// opcode: slli16 ; op1:x4; dest:x20; op1val:0xdffff7fffeff0000;  immval:0x6
TEST_IMM_OP( slli16, x20, x4, 0x0000000000000000, 0xdffff7fffeff0000, 0x6, x8, 144, x5)

inst_19:
// rs1==x21, rd==x15, rs1_h3_val == 61439, rs1_h1_val == 49151, rs1_h0_val == 65023
// opcode: slli16 ; op1:x21; dest:x15; op1val:0xefff7fffbffffdff;  immval:0x1
TEST_IMM_OP( slli16, x15, x21, 0x0000000000000000, 0xefff7fffbffffdff, 0x1, x8, 152, x5)

inst_20:
// rs1==x19, rd==x17, rs1_h3_val == 63487, 
// opcode: slli16 ; op1:x19; dest:x17; op1val:0xf7ff0009000b0012;  immval:0x3
TEST_IMM_OP( slli16, x17, x19, 0x0000000000000000, 0xf7ff0009000b0012, 0x3, x8, 160, x5)

inst_21:
// rs1==x6, rd==x12, rs1_h3_val == 64511, 
// opcode: slli16 ; op1:x6; dest:x12; op1val:0xfbff000a0001ffff;  immval:0x8
TEST_IMM_OP( slli16, x12, x6, 0x0000000000000000, 0xfbff000a0001ffff, 0x8, x8, 168, x5)

inst_22:
// rs1==x26, rd==x5, rs1_h3_val == 65023, rs1_h1_val == 65533, rs1_h2_val == 8
// opcode: slli16 ; op1:x26; dest:x5; op1val:0xfdff0008fffd000a;  immval:0x8
TEST_IMM_OP( slli16, x5, x26, 0x0000000000000000, 0xfdff0008fffd000a, 0x8, x8, 176, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_23:
// rs1==x17, rd==x18, rs1_h3_val == 65407, rs1_h1_val == 65535
// opcode: slli16 ; op1:x17; dest:x18; op1val:0xff7f0008ffff0013;  immval:0x9
TEST_IMM_OP( slli16, x18, x17, 0x0000000000000000, 0xff7f0008ffff0013, 0x9, x1, 0, x2)

inst_24:
// rs1==x16, rd==x19, rs1_h3_val == 65471, 
// opcode: slli16 ; op1:x16; dest:x19; op1val:0xffbf0013000e000b;  immval:0xd
TEST_IMM_OP( slli16, x19, x16, 0x0000000000000000, 0xffbf0013000e000b, 0xd, x1, 8, x2)

inst_25:
// rs1==x12, rd==x6, rs1_h3_val == 65503, rs1_h0_val == 512
// opcode: slli16 ; op1:x12; dest:x6; op1val:0xffdf000a00030200;  immval:0xa
TEST_IMM_OP( slli16, x6, x12, 0x0000000000000000, 0xffdf000a00030200, 0xa, x1, 16, x2)

inst_26:
// rs1==x8, rd==x14, rs1_h3_val == 65527, rs1_h0_val == 1
// opcode: slli16 ; op1:x8; dest:x14; op1val:0xfff7000300100001;  immval:0x6
TEST_IMM_OP( slli16, x14, x8, 0x0000000000000000, 0xfff7000300100001, 0x6, x1, 24, x2)

inst_27:
// rs1==x11, rd==x26, rs1_h3_val == 65533, rs1_h2_val == 32, rs1_h1_val == 8192
// opcode: slli16 ; op1:x11; dest:x26; op1val:0xfffd00202000000b;  immval:0x6
TEST_IMM_OP( slli16, x26, x11, 0x0000000000000000, 0xfffd00202000000b, 0x6, x1, 32, x2)

inst_28:
// rs1==x3, rd==x8, rs1_h3_val == 32768, rs1_h0_val == 8, rs1_h1_val == 65503
// opcode: slli16 ; op1:x3; dest:x8; op1val:0x80004000ffdf0008;  immval:0xb
TEST_IMM_OP( slli16, x8, x3, 0x0000000000000000, 0x80004000ffdf0008, 0xb, x1, 40, x2)

inst_29:
// rs1==x5, rd==x22, rs1_h3_val == 16384, 
// opcode: slli16 ; op1:x5; dest:x22; op1val:0x4000ffff0003fdff;  immval:0xd
TEST_IMM_OP( slli16, x22, x5, 0x0000000000000000, 0x4000ffff0003fdff, 0xd, x1, 48, x2)

inst_30:
// rs1==x0, rd==x31, rs1_h3_val == 8192, rs1_h0_val == 32767, rs1_h2_val == 65407
// opcode: slli16 ; op1:x0; dest:x31; op1val:0x2000ff7f00097fff;  immval:0x8
TEST_IMM_OP( slli16, x31, x0, 0x0000000000000000, 0x2000ff7f00097fff, 0x8, x1, 56, x2)

inst_31:
// rs1==x30, rd==x16, rs1_h3_val == 4096, 
// opcode: slli16 ; op1:x30; dest:x16; op1val:0x1000000400010001;  immval:0x6
TEST_IMM_OP( slli16, x16, x30, 0x0000000000000000, 0x1000000400010001, 0x6, x1, 64, x2)

inst_32:
// rs1_h3_val == 2048, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x800000bffef000d;  immval:0x6
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x800000bffef000d, 0x6, x1, 72, x2)

inst_33:
// rs1_h3_val == 256, rs1_h1_val == 0
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x100ffff00000011;  immval:0xf
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x100ffff00000011, 0xf, x1, 80, x2)

inst_34:
// rs1_h3_val == 64, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x407fff0001ffff;  immval:0xb
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x407fff0001ffff, 0xb, x1, 88, x2)

inst_35:
// rs1_h3_val == 32, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x20000800090013;  immval:0x3
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x20000800090013, 0x3, x1, 96, x2)

inst_36:
// rs1_h3_val == 16, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x100005000f0001;  immval:0x5
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x100005000f0001, 0x5, x1, 104, x2)

inst_37:
// rs1_h3_val == 8, rs1_h1_val == 65531, rs1_h0_val == 16
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x080006fffb0010;  immval:0x7
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x080006fffb0010, 0x7, x1, 112, x2)

inst_38:
// rs1_h3_val == 4, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x04fffffff7fbff;  immval:0xa
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x04fffffff7fbff, 0xa, x1, 120, x2)

inst_39:
// rs1_h0_val == 49151, rs1_h2_val == 61439
// opcode: slli16 ; op1:x30; dest:x31; op1val:0xfffeefff0000bfff;  immval:0xd
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0xfffeefff0000bfff, 0xd, x1, 128, x2)

inst_40:
// rs1_h0_val == 57343, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x0700040011dfff;  immval:0x3
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x0700040011dfff, 0x3, x1, 136, x2)

inst_41:
// rs1_h0_val == 63487, rs1_h1_val == 512
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x20000d0200f7ff;  immval:0x4
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x20000d0200f7ff, 0x4, x1, 144, x2)

inst_42:
// rs1_h0_val == 65407, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x0c00080006ff7f;  immval:0x1
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x0c00080006ff7f, 0x1, x1, 152, x2)

inst_43:
// rs1_h0_val == 65471, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x8000011000effbf;  immval:0x3
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x8000011000effbf, 0x3, x1, 160, x2)

inst_44:
// rs1_h0_val == 65503, rs1_h2_val == 64
// opcode: slli16 ; op1:x30; dest:x31; op1val:0xfdff0040ffefffdf;  immval:0x5
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0xfdff0040ffefffdf, 0x5, x1, 168, x2)

inst_45:
// rs1_h0_val == 65527, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x7fff0008fff7fff7;  immval:0x2
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x7fff0008fff7fff7, 0x2, x1, 176, x2)

inst_46:
// rs1_h0_val == 65531, rs1_h2_val == 1024, rs1_h1_val == 4096
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x2004001000fffb;  immval:0xd
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x2004001000fffb, 0xd, x1, 184, x2)

inst_47:
// rs1_h0_val == 65534, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x10000120009fffe;  immval:0xd
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x10000120009fffe, 0xd, x1, 192, x2)

inst_48:
// rs1_h0_val == 32768, rs1_h2_val == 57343
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x05dfff000c8000;  immval:0xd
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x05dfff000c8000, 0xd, x1, 200, x2)

inst_49:
// rs1_h0_val == 8192, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x09ff7f02002000;  immval:0xf
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x09ff7f02002000, 0xf, x1, 208, x2)

inst_50:
// rs1_h0_val == 4096, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0xfffdfefffffb1000;  immval:0x6
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0xfffdfefffffb1000, 0x6, x1, 216, x2)

inst_51:
// rs1_h0_val == 1024, rs1_h2_val == 0, rs1_h1_val == 16384
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x0e000040000400;  immval:0x7
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x0e000040000400, 0x7, x1, 224, x2)

inst_52:
// rs1_h0_val == 128, rs1_h1_val == 65407
// opcode: slli16 ; op1:x30; dest:x31; op1val:0xf7ff0002ff7f0080;  immval:0x2
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0xf7ff0002ff7f0080, 0x2, x1, 232, x2)

inst_53:
// rs1_h0_val == 64, rs1_h2_val == 49151
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x08bfff00010040;  immval:0x1
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x08bfff00010040, 0x1, x1, 240, x2)

inst_54:
// rs1_h0_val == 4, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x04000600100004;  immval:0x5
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x04000600100004, 0x5, x1, 248, x2)

inst_55:
// rs1_h0_val == 2, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x8000067fff0002;  immval:0x1
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x8000067fff0002, 0x1, x1, 256, x2)

inst_56:
// rs1_h3_val == 2, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x02efff00135555;  immval:0xa
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x02efff00135555, 0xa, x1, 264, x2)

inst_57:
// rs1_h3_val == 1, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x01efff000a0004;  immval:0xa
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x01efff000a0004, 0xa, x1, 272, x2)

inst_58:
// rs1_h3_val == 65535, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0xffff0009ff7fefff;  immval:0x1
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0xffff0009ff7fefff, 0x1, x1, 280, x2)

inst_59:
// rs1_h2_val == 21845, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x8005555000b0080;  immval:0xd
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x8005555000b0080, 0xd, x1, 288, x2)

inst_60:
// rs1_h2_val == 64511, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x4000fbffefff1000;  immval:0x8
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x4000fbffefff1000, 0x8, x1, 296, x2)

inst_61:
// rs1_h2_val == 65471, rs1_h1_val == 1024
// opcode: slli16 ; op1:x30; dest:x31; op1val:0xfbffffbf0400fdff;  immval:0x5
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0xfbffffbf0400fdff, 0x5, x1, 304, x2)

inst_62:
// rs1_h2_val == 65503, rs1_h1_val == 65023
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x12ffdffdff1000;  immval:0x2
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x12ffdffdff1000, 0x2, x1, 312, x2)

inst_63:
// rs1_h2_val == 65527, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x09fff700077fff;  immval:0x5
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x09fff700077fff, 0x5, x1, 320, x2)

inst_64:
// rs1_h2_val == 65531, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0xffbffffb000afdff;  immval:0x8
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0xffbffffb000afdff, 0x8, x1, 328, x2)

inst_65:
// rs1_h2_val == 65533, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x7ffffffdfbff0002;  immval:0x3
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x7ffffffdfbff0002, 0x3, x1, 336, x2)

inst_66:
// rs1_h2_val == 65534, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0xfffdfffe0013fff7;  immval:0xe
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0xfffdfffe0013fff7, 0xe, x1, 344, x2)

inst_67:
// rs1_h2_val == 32768, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x0180000013ffff;  immval:0xa
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x0180000013ffff, 0xa, x1, 352, x2)

inst_68:
// rs1_h2_val == 8192, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0xfbff20002000fbff;  immval:0xe
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0xfbff20002000fbff, 0xe, x1, 360, x2)

inst_69:
// rs1_h2_val == 4096, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x011000ffffffef;  immval:0xf
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x011000ffffffef, 0xf, x1, 368, x2)

inst_70:
// rs1_h2_val == 2048, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x100080000060800;  immval:0x7
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x100080000060800, 0x7, x1, 376, x2)

inst_71:
// rs1_h2_val == 512, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x0902001000ffef;  immval:0xc
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x0902001000ffef, 0xc, x1, 384, x2)

inst_72:
// rs1_h2_val == 256, rs1_h1_val == 32
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x0e01000020ffdf;  immval:0xd
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x0e01000020ffdf, 0xd, x1, 392, x2)

inst_73:
// rs1_h2_val == 128, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x0600800006000c;  immval:0xc
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x0600800006000c, 0xc, x1, 400, x2)

inst_74:
// rs1_h1_val == 2, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x40bfff0002ffef;  immval:0x0
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x40bfff0002ffef, 0x0, x1, 408, x2)

inst_75:
// rs1_h1_val == 65471, rs1_h2_val == 65023
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x5555fdffffbf0009;  immval:0x0
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x5555fdffffbf0009, 0x0, x1, 416, x2)

inst_76:
// rs1_h1_val == 32768, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x0f04008000000b;  immval:0x5
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x0f04008000000b, 0x5, x1, 424, x2)

inst_77:
// rs1_h1_val == 2048, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x80000400800f7ff;  immval:0x3
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x80000400800f7ff, 0x3, x1, 432, x2)

inst_78:
// rs1_h2_val == 16, rs1_h1_val == 57343
// opcode: slli16 ; op1:x30; dest:x31; op1val:0xbfff0010dfff0800;  immval:0x2
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0xbfff0010dfff0800, 0x2, x1, 440, x2)

inst_79:
// rs1_h1_val == 256, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0xfffeffbf01007fff;  immval:0xa
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0xfffeffbf01007fff, 0xa, x1, 448, x2)

inst_80:
// rs1_h1_val == 64, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0xfdff100000400003;  immval:0x9
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0xfdff100000400003, 0x9, x1, 456, x2)

inst_81:
// rs1_h2_val == 1, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x0c0001fbff0800;  immval:0x6
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x0c0001fbff0800, 0x6, x1, 464, x2)

inst_82:
// rs1_h1_val == 4, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0xaaaa00070004ffbf;  immval:0x9
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0xaaaa00070004ffbf, 0x9, x1, 472, x2)

inst_83:
// rs1_h1_val == 43690, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x5555000faaaa1000;  immval:0xe
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x5555000faaaa1000, 0xe, x1, 480, x2)

inst_84:
// rs1_h1_val == 21845, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x13fffd55550080;  immval:0x1
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x13fffd55550080, 0x1, x1, 488, x2)

inst_85:
// rs1_h0_val == 43690, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x130200000eaaaa;  immval:0x2
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x130200000eaaaa, 0x2, x1, 496, x2)

inst_86:
// rs1_h1_val == 63487, 
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x0ffffdf7fff7ff;  immval:0x3
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x0ffffdf7fff7ff, 0x3, x1, 504, x2)

inst_87:
// imm_val == 9, rs1_h1_val == 128, rs1_h2_val == 43690, rs1_h0_val == 256
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x00aaaa00800100;  immval:0x9
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x00aaaa00800100, 0x9, x1, 512, x2)

inst_88:
// rs1_h3_val == 8192, rs1_h0_val == 32767, rs1_h2_val == 65407
// opcode: slli16 ; op1:x30; dest:x31; op1val:0x2000ff7f00097fff;  immval:0x8
TEST_IMM_OP( slli16, x31, x30, 0x0000000000000000, 0x2000ff7f00097fff, 0x8, x1, 520, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 66*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
