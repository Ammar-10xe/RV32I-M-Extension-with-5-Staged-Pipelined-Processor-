
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the zunpkd832 instruction of the RISC-V RV64PZicsr extension for the zunpkd832 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",zunpkd832)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1==x18, rd==x15, rs1_b0_val == 0, rs1_b1_val == 251, rs1_b6_val == 2, rs1_b4_val == 254, rs1_b2_val == 4, rs1_b3_val == 251
// opcode: zunpkd832 ; op1:x18; dest:x15; op1val:0x5020dfefb04fb00;
TEST_RD_OP( zunpkd832, x15, x18, 0x0000000000000000, 0x5020dfefb04fb00, x9, 0, x19)

inst_1:
// rs1==x29, rd==x30, rs1_b7_val == 170, rs1_b0_val == 191, rs1_b6_val == 32, rs1_b3_val == 1
// opcode: zunpkd832 ; op1:x29; dest:x30; op1val:0xaa200303010603bf;
TEST_RD_OP( zunpkd832, x30, x29, 0x0000000000000000, 0xaa200303010603bf, x9, 8, x19)

inst_2:
// rs1==x4, rd==x17, rs1_b7_val == 85, rs1_b3_val == 170, rs1_b6_val == 239
// opcode: zunpkd832 ; op1:x4; dest:x17; op1val:0x55ef050eaa050607;
TEST_RD_OP( zunpkd832, x17, x4, 0x0000000000000000, 0x55ef050eaa050607, x9, 16, x19)

inst_3:
// rs1==x14, rd==x4, rs1_b7_val == 127, rs1_b6_val == 64, rs1_b1_val == 8, rs1_b3_val == 223, rs1_b2_val == 255, rs1_b5_val == 4, rs1_b4_val == 170, rs1_b0_val == 255
// opcode: zunpkd832 ; op1:x14; dest:x4; op1val:0x7f4004aadfff08ff;
TEST_RD_OP( zunpkd832, x4, x14, 0x0000000000000000, 0x7f4004aadfff08ff, x9, 24, x19)

inst_4:
// rs1==x12, rd==x24, rs1_b7_val == 191, rs1_b3_val == 2, rs1_b5_val == 191, rs1_b6_val == 1, rs1_b4_val == 255
// opcode: zunpkd832 ; op1:x12; dest:x24; op1val:0xbf01bfff02120f03;
TEST_RD_OP( zunpkd832, x24, x12, 0x0000000000000000, 0xbf01bfff02120f03, x9, 32, x19)

inst_5:
// rs1==x28, rd==x11, rs1_b7_val == 223, rs1_b6_val == 0, rs1_b3_val == 128, rs1_b5_val == 223, rs1_b2_val == 128
// opcode: zunpkd832 ; op1:x28; dest:x11; op1val:0xdf00df0f80800e0f;
TEST_RD_OP( zunpkd832, x11, x28, 0x0000000000000000, 0xdf00df0f80800e0f, x9, 40, x19)

inst_6:
// rs1==x26, rd==x31, rs1_b7_val == 239, rs1_b0_val == 128, rs1_b1_val == 85, rs1_b5_val == 247
// opcode: zunpkd832 ; op1:x26; dest:x31; op1val:0xef01f7aa050b5580;
TEST_RD_OP( zunpkd832, x31, x26, 0x0000000000000000, 0xef01f7aa050b5580, x9, 48, x19)

inst_7:
// rs1==x30, rd==x14, rs1_b7_val == 247, rs1_b1_val == 1, rs1_b4_val == 2, rs1_b2_val == 2, rs1_b6_val == 247, rs1_b0_val == 4
// opcode: zunpkd832 ; op1:x30; dest:x14; op1val:0xf7f711020a020104;
TEST_RD_OP( zunpkd832, x14, x30, 0x0000000000000000, 0xf7f711020a020104, x9, 56, x19)

inst_8:
// rs1==x24, rd==x10, rs1_b7_val == 251, rs1_b4_val == 251, rs1_b2_val == 253, rs1_b6_val == 85
// opcode: zunpkd832 ; op1:x24; dest:x10; op1val:0xfb55dffbfbfd030d;
TEST_RD_OP( zunpkd832, x10, x24, 0x0000000000000000, 0xfb55dffbfbfd030d, x9, 64, x19)

inst_9:
// rs1==x0, rd==x23, rs1_b7_val == 253, rs1_b3_val == 0, rs1_b0_val == 254, rs1_b5_val == 64, rs1_b2_val == 1
// opcode: zunpkd832 ; op1:x0; dest:x23; op1val:0xfd054012000107fe;
TEST_RD_OP( zunpkd832, x23, x0, 0x0000000000000000, 0xfd054012000107fe, x9, 72, x19)

inst_10:
// rs1==x7, rd==x1, rs1_b7_val == 254, rs1_b4_val == 64, rs1_b2_val == 8, rs1_b5_val == 127, rs1_b1_val == 247
// opcode: zunpkd832 ; op1:x7; dest:x1; op1val:0xfe077f401208f700;
TEST_RD_OP( zunpkd832, x1, x7, 0x0000000000000000, 0xfe077f401208f700, x9, 80, x19)

inst_11:
// rs1==x16, rd==x20, rs1_b7_val == 128, rs1_b2_val == 0, rs1_b4_val == 239, rs1_b1_val == 255, rs1_b6_val == 170
// opcode: zunpkd832 ; op1:x16; dest:x20; op1val:0x80aaf7ef0700ff0f;
TEST_RD_OP( zunpkd832, x20, x16, 0x0000000000000000, 0x80aaf7ef0700ff0f, x9, 88, x19)

inst_12:
// rs1==x1, rd==x3, rs1_b7_val == 64, rs1_b6_val == 8, rs1_b4_val == 1
// opcode: zunpkd832 ; op1:x1; dest:x3; op1val:0x400812011112050d;
TEST_RD_OP( zunpkd832, x3, x1, 0x0000000000000000, 0x400812011112050d, x9, 96, x19)

inst_13:
// rs1==x3, rd==x0, rs1_b7_val == 32, rs1_b5_val == 170, rs1_b3_val == 239
// opcode: zunpkd832 ; op1:x3; dest:x0; op1val:0x2040aafbef000b12;
TEST_RD_OP( zunpkd832, x0, x3, 0x0000000000000000, 0x2040aafbef000b12, x9, 104, x19)

inst_14:
// rs1==x27, rd==x28, rs1_b7_val == 16, rs1_b2_val == 64, rs1_b5_val == 128, rs1_b3_val == 64
// opcode: zunpkd832 ; op1:x27; dest:x28; op1val:0x1006800340400703;
TEST_RD_OP( zunpkd832, x28, x27, 0x0000000000000000, 0x1006800340400703, x9, 112, x19)

inst_15:
// rs1==x5, rd==x6, rs1_b7_val == 8, rs1_b0_val == 251, rs1_b4_val == 128
// opcode: zunpkd832 ; op1:x5; dest:x6; op1val:0x80f0d800a400efb;
TEST_RD_OP( zunpkd832, x6, x5, 0x0000000000000000, 0x80f0d800a400efb, x9, 120, x19)

inst_16:
// rs1==x13, rd==x22, rs1_b7_val == 4, rs1_b5_val == 16
// opcode: zunpkd832 ; op1:x13; dest:x22; op1val:0x400100c05090813;
TEST_RD_OP( zunpkd832, x22, x13, 0x0000000000000000, 0x400100c05090813, x9, 128, x19)

inst_17:
// rs1==x11, rd==x8, rs1_b7_val == 2, 
// opcode: zunpkd832 ; op1:x11; dest:x8; op1val:0x207130cef080f0f;
TEST_RD_OP( zunpkd832, x8, x11, 0x0000000000000000, 0x207130cef080f0f, x9, 136, x19)

inst_18:
// rs1==x2, rd==x27, rs1_b7_val == 1, rs1_b1_val == 223
// opcode: zunpkd832 ; op1:x2; dest:x27; op1val:0x106f705800fdf04;
TEST_RD_OP( zunpkd832, x27, x2, 0x0000000000000000, 0x106f705800fdf04, x9, 144, x19)

inst_19:
// rs1==x17, rd==x21, rs1_b7_val == 255, rs1_b3_val == 255, rs1_b2_val == 170, rs1_b4_val == 253, rs1_b1_val == 32, rs1_b6_val == 255
// opcode: zunpkd832 ; op1:x17; dest:x21; op1val:0xffff11fdffaa20fb;
TEST_RD_OP( zunpkd832, x21, x17, 0x0000000000000000, 0xffff11fdffaa20fb, x9, 152, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_20:
// rs1==x23, rd==x25, rs1_b7_val == 0, rs1_b6_val == 254, rs1_b2_val == 127
// opcode: zunpkd832 ; op1:x23; dest:x25; op1val:0xfe0512807f0712;
TEST_RD_OP( zunpkd832, x25, x23, 0x0000000000000000, 0xfe0512807f0712, x1, 0, x3)

inst_21:
// rs1==x21, rd==x5, rs1_b6_val == 127, rs1_b1_val == 128, rs1_b0_val == 1
// opcode: zunpkd832 ; op1:x21; dest:x5; op1val:0xc7f0e12efaa8001;
TEST_RD_OP( zunpkd832, x5, x21, 0x0000000000000000, 0xc7f0e12efaa8001, x1, 8, x3)

inst_22:
// rs1==x19, rd==x29, rs1_b6_val == 191, rs1_b5_val == 2, rs1_b3_val == 85, rs1_b1_val == 239, rs1_b0_val == 239
// opcode: zunpkd832 ; op1:x19; dest:x29; op1val:0xaabf02ef5500efef;
TEST_RD_OP( zunpkd832, x29, x19, 0x0000000000000000, 0xaabf02ef5500efef, x1, 16, x3)

inst_23:
// rs1==x8, rd==x18, rs1_b6_val == 223, rs1_b3_val == 32, rs1_b1_val == 16
// opcode: zunpkd832 ; op1:x8; dest:x18; op1val:0xfbdf0703200a1080;
TEST_RD_OP( zunpkd832, x18, x8, 0x0000000000000000, 0xfbdf0703200a1080, x1, 24, x3)

inst_24:
// rs1==x6, rd==x9, rs1_b6_val == 251, 
// opcode: zunpkd832 ; op1:x6; dest:x9; op1val:0x2fb13fd0dff0507;
TEST_RD_OP( zunpkd832, x9, x6, 0x0000000000000000, 0x2fb13fd0dff0507, x1, 32, x3)

inst_25:
// rs1==x10, rd==x19, rs1_b1_val == 253, rs1_b5_val == 254, rs1_b6_val == 4, rs1_b0_val == 127
// opcode: zunpkd832 ; op1:x10; dest:x19; op1val:0x404fe03fb40fd7f;
TEST_RD_OP( zunpkd832, x19, x10, 0x0000000000000000, 0x404fe03fb40fd7f, x1, 40, x3)

inst_26:
// rs1==x22, rd==x7, rs1_b1_val == 254, rs1_b5_val == 253
// opcode: zunpkd832 ; op1:x22; dest:x7; op1val:0xff0efd0c0b03fe13;
TEST_RD_OP( zunpkd832, x7, x22, 0x0000000000000000, 0xff0efd0c0b03fe13, x1, 48, x3)

inst_27:
// rs1==x31, rd==x13, rs1_b1_val == 64, rs1_b0_val == 170, rs1_b4_val == 85
// opcode: zunpkd832 ; op1:x31; dest:x13; op1val:0xff0902550e0140aa;
TEST_RD_OP( zunpkd832, x13, x31, 0x0000000000000000, 0xff0902550e0140aa, x1, 56, x3)

inst_28:
// rs1==x15, rd==x26, rs1_b1_val == 4, rs1_b2_val == 32, rs1_b5_val == 32
// opcode: zunpkd832 ; op1:x15; dest:x26; op1val:0x0f2005ff200400;
TEST_RD_OP( zunpkd832, x26, x15, 0x0000000000000000, 0x0f2005ff200400, x1, 64, x3)

inst_29:
// rs1==x25, rd==x12, rs1_b1_val == 2, 
// opcode: zunpkd832 ; op1:x25; dest:x12; op1val:0xfbaa0f0680800200;
TEST_RD_OP( zunpkd832, x12, x25, 0x0000000000000000, 0xfbaa0f0680800200, x1, 72, x3)

inst_30:
// rs1==x20, rd==x16, rs1_b1_val == 0, 
// opcode: zunpkd832 ; op1:x20; dest:x16; op1val:0xff13fe09200e00ff;
TEST_RD_OP( zunpkd832, x16, x20, 0x0000000000000000, 0xff13fe09200e00ff, x1, 80, x3)

inst_31:
// rs1==x9, rd==x2, rs1_b0_val == 85, rs1_b2_val == 239
// opcode: zunpkd832 ; op1:x9; dest:x2; op1val:0x80fbaafbffef0255;
TEST_RD_OP( zunpkd832, x2, x9, 0x0000000000000000, 0x80fbaafbffef0255, x1, 88, x3)

inst_32:
// rs1_b0_val == 223, rs1_b5_val == 8
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xfe0808fdefef00df;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xfe0808fdefef00df, x1, 96, x3)

inst_33:
// rs1_b0_val == 247, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xf705130a0220fef7;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xf705130a0220fef7, x1, 104, x3)

inst_34:
// rs1_b0_val == 253, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xfd13800d130807fd;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xfd13800d130807fd, x1, 112, x3)

inst_35:
// rs1_b0_val == 64, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x212030fff000240;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0x212030fff000240, x1, 120, x3)

inst_36:
// rs1_b0_val == 32, rs1_b2_val == 16, rs1_b4_val == 127
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x6200d7f80101020;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0x6200d7f80101020, x1, 128, x3)

inst_37:
// rs1_b0_val == 16, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x4ef0c0c407ffb10;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0x4ef0c0c407ffb10, x1, 136, x3)

inst_38:
// rs1_b0_val == 8, rs1_b5_val == 0, rs1_b2_val == 254, rs1_b4_val == 4
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x13120004effe1108;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0x13120004effe1108, x1, 144, x3)

inst_39:
// rs1_b6_val == 253, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xfbfd0611800cff00;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xfbfd0611800cff00, x1, 152, x3)

inst_40:
// rs1_b4_val == 191, rs1_b3_val == 254
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xff120bbffe400f0c;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xff120bbffe400f0c, x1, 160, x3)

inst_41:
// rs1_b4_val == 223, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xdfef0edf07101203;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xdfef0edf07101203, x1, 168, x3)

inst_42:
// rs1_b4_val == 247, rs1_b6_val == 16
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x410dff7aa200b08;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0x410dff7aa200b08, x1, 176, x3)

inst_43:
// rs1_b4_val == 32, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xe04fe20fffe0703;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xe04fe20fffe0703, x1, 184, x3)

inst_44:
// rs1_b4_val == 16, rs1_b3_val == 127
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xdfff0f107f0b0209;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xdfff0f107f0b0209, x1, 192, x3)

inst_45:
// rs1_b4_val == 8, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xff090008000cff12;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xff090008000cff12, x1, 200, x3)

inst_46:
// rs1_b4_val == 0, rs1_b2_val == 247, rs1_b5_val == 239
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x40feef000ff706bf;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0x40feef000ff706bf, x1, 208, x3)

inst_47:
// rs1_b3_val == 191, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xbf0bbf10bf06f7ff;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xbf0bbf10bf06f7ff, x1, 216, x3)

inst_48:
// rs1_b3_val == 247, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xfb0a05f70e0306;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xfb0a05f70e0306, x1, 224, x3)

inst_49:
// rs1_b3_val == 253, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xaa550004fd0b090e;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xaa550004fd0b090e, x1, 232, x3)

inst_50:
// rs1_b0_val == 2, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x6df0aef0c030e02;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0x6df0aef0c030e02, x1, 240, x3)

inst_51:
// rs1_b3_val == 4, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xfbfd0d07044012fe;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xfbfd0d07044012fe, x1, 248, x3)

inst_52:
// rs1_b2_val == 85, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x10d0a0a205504fd;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0x10d0a0a205504fd, x1, 256, x3)

inst_53:
// rs1_b2_val == 191, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x1304fedf80bf40fb;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0x1304fedf80bf40fb, x1, 264, x3)

inst_54:
// rs1_b2_val == 223, rs1_b1_val == 191
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x1f7200efddfbf13;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0x1f7200efddfbf13, x1, 272, x3)

inst_55:
// rs1_b5_val == 255, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xc0cfffb0a12dffe;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xc0cfffb0a12dffe, x1, 280, x3)

inst_56:
// rs1_b5_val == 85, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xf70855068001df55;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xf70855068001df55, x1, 288, x3)

inst_57:
// rs1_b2_val == 251, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xd2002fefefb0940;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xd2002fefefb0940, x1, 296, x3)

inst_58:
// rs1_b5_val == 251, rs1_b6_val == 128
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x1280fbef000c0b55;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0x1280fbef000c0b55, x1, 304, x3)

inst_59:
// rs1_b1_val == 170, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xcfb100bfb09aaaa;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xcfb100bfb09aaaa, x1, 312, x3)

inst_60:
// rs1_b5_val == 1, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x9bf010401ef1102;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0x9bf010401ef1102, x1, 320, x3)

inst_61:
// rs1_b1_val == 127, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xff03014002fe7f09;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xff03014002fe7f09, x1, 328, x3)

inst_62:
// rs1_b3_val == 16, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xe00101110f7120b;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xe00101110f7120b, x1, 336, x3)

inst_63:
// rs1_b3_val == 8, 
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0x2040060c08fd0903;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0x2040060c08fd0903, x1, 344, x3)

inst_64:
// rs1_b7_val == 253, rs1_b3_val == 0, rs1_b0_val == 254, rs1_b5_val == 64, rs1_b2_val == 1
// opcode: zunpkd832 ; op1:x30; dest:x31; op1val:0xfd054012000107fe;
TEST_RD_OP( zunpkd832, x31, x30, 0x0000000000000000, 0xfd054012000107fe, x1, 352, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 45*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
