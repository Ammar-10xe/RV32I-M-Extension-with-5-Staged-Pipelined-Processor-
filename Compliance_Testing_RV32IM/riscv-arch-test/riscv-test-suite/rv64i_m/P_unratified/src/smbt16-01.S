
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smbt16 instruction of the RISC-V RV64PZicsr extension for the smbt16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smbt16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x21,signature_x21_1)

inst_0:
// rs1 == rd != rs2, rs1==x22, rs2==x19, rd==x22, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h1_val == 32767, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val != rs2_h1_val, rs2_h0_val == -513, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h3_val == -2049, rs1_h2_val == 32767, rs1_h0_val != rs2_h0_val, rs1_h1_val == -1, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h3_val == -21846, rs2_h2_val == -21846
// opcode: smbt16 ; op1:x22; op2:x19; dest:x22; op1val:0xf7ff7fffffff8000;  op2val:0xaaaaaaaa7ffffdff
TEST_RR_OP(smbt16, x22, x22, x19, 0x0000000000000000, 0xf7ff7fffffff8000, 0xaaaaaaaa7ffffdff, x21, 0, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x8, rs2==x14, rd==x18, rs1_h3_val == rs2_h3_val, rs2_h1_val == -1, rs2_h0_val == -21846, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h0_val == 1024, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h3_val == 16384, rs1_h2_val == 4, rs1_h1_val == 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h3_val == 16384
// opcode: smbt16 ; op1:x8; op2:x14; dest:x18; op1val:0x4000000400000400;  op2val:0x40000007ffffaaaa
TEST_RR_OP(smbt16, x18, x8, x14, 0x0000000000000000, 0x4000000400000400, 0x40000007ffffaaaa, x21, 8, x2)

inst_2:
// rs1 == rs2 != rd, rs1==x6, rs2==x6, rd==x26, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == 1, rs1_h2_val == -33, rs2_h0_val == 2, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h3_val == -17, rs2_h3_val == 2, rs1_h1_val == -257
// opcode: smbt16 ; op1:x6; op2:x6; dest:x26; op1val:0xffefffdffefffff6;  op2val:0x02000900010002
TEST_RR_OP(smbt16, x26, x6, x6, 0x0000000000000000, 0xffefffdffefffff6, 0x02000900010002, x21, 16, x2)

inst_3:
// rs1 == rs2 == rd, rs1==x16, rs2==x16, rd==x16, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h1_val == -3, rs2_h2_val == -4097, rs2_h3_val == -129, rs2_h0_val == 8, rs1_h0_val == -17, rs1_h2_val == 64, rs1_h3_val == 32767
// opcode: smbt16 ; op1:x16; op2:x16; dest:x16; op1val:0x7fff0040fffdffef;  op2val:0xff7fefff3fff0008
TEST_RR_OP(smbt16, x16, x16, x16, 0x0000000000000000, 0x7fff0040fffdffef, 0xff7fefff3fff0008, x21, 24, x2)

inst_4:
// rs2 == rd != rs1, rs1==x25, rs2==x13, rd==x13, rs1_h2_val == rs2_h2_val, rs2_h3_val == -257, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val == 256, rs2_h0_val == -33, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val == -4097, rs1_h0_val == 0
// opcode: smbt16 ; op1:x25; op2:x13; dest:x13; op1val:0x3fffefff01000000;  op2val:0xfeffefff7fffffdf
TEST_RR_OP(smbt16, x13, x25, x13, 0x0000000000000000, 0x3fffefff01000000, 0xfeffefff7fffffdf, x21, 32, x2)

inst_5:
// rs1==x5, rs2==x24, rd==x10, rs1_h1_val == rs2_h1_val, rs1_h3_val == 128, rs2_h1_val == -4097, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -4097, rs1_h2_val == -129, rs2_h2_val == 2, rs2_h3_val == -2049
// opcode: smbt16 ; op1:x5; op2:x24; dest:x10; op1val:0x80ff7fefff8000;  op2val:0xf7ff0002effffff8
TEST_RR_OP(smbt16, x10, x5, x24, 0x0000000000000000, 0x80ff7fefff8000, 0xf7ff0002effffff8, x21, 40, x2)

inst_6:
// rs1==x14, rs2==x5, rd==x0, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h2_val == 8192, rs1_h2_val == 32, rs2_h0_val == 256, rs1_h0_val == -33
// opcode: smbt16 ; op1:x14; op2:x5; dest:x0; op1val:0x0600200007ffdf;  op2val:0xfff62000c0000100
TEST_RR_OP(smbt16, x0, x14, x5, 0x0000000000000000, 0x0600200007ffdf, 0xfff62000c0000100, x21, 48, x2)

inst_7:
// rs1==x28, rs2==x20, rd==x11, rs1_h0_val == rs2_h0_val, rs1_h1_val == 1024, rs1_h3_val == 0, rs2_h2_val == -32768, rs2_h3_val == 2048, rs1_h0_val == 8, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 512
// opcode: smbt16 ; op1:x28; op2:x20; dest:x11; op1val:0x00000904000008;  op2val:0x800800002000008
TEST_RR_OP(smbt16, x11, x28, x20, 0x0000000000000000, 0x00000904000008, 0x800800002000008, x21, 56, x2)

inst_8:
// rs1==x24, rs2==x31, rd==x14, rs2_h3_val == 21845, rs1_h3_val == 64, rs2_h2_val == -1025, rs1_h0_val == -1025, rs1_h2_val == 1
// opcode: smbt16 ; op1:x24; op2:x31; dest:x14; op1val:0x4000010007fbff;  op2val:0x5555fbff00063fff
TEST_RR_OP(smbt16, x14, x24, x31, 0x0000000000000000, 0x4000010007fbff, 0x5555fbff00063fff, x21, 64, x2)

inst_9:
// rs1==x1, rs2==x18, rd==x6, rs2_h3_val == 32767, rs1_h2_val == 16, rs2_h1_val == -3, rs2_h0_val == 16, rs2_h2_val == -9
// opcode: smbt16 ; op1:x1; op2:x18; dest:x6; op1val:0x40001000000006;  op2val:0x7ffffff7fffd0010
TEST_RR_OP(smbt16, x6, x1, x18, 0x0000000000000000, 0x40001000000006, 0x7ffffff7fffd0010, x21, 72, x2)

inst_10:
// rs1==x7, rs2==x22, rd==x1, rs2_h3_val == -16385, rs1_h2_val == 16384, rs1_h1_val == -2, rs2_h1_val == -65, rs2_h0_val == -257, rs1_h3_val == -32768
// opcode: smbt16 ; op1:x7; op2:x22; dest:x1; op1val:0x80004000fffe0003;  op2val:0xbfff0003ffbffeff
TEST_RR_OP(smbt16, x1, x7, x22, 0x0000000000000000, 0x80004000fffe0003, 0xbfff0003ffbffeff, x21, 80, x2)

inst_11:
// rs1==x12, rs2==x7, rd==x8, rs2_h3_val == -8193, rs1_h3_val == 4, rs2_h2_val == 4096, rs1_h0_val == -4097, rs1_h2_val == 1024
// opcode: smbt16 ; op1:x12; op2:x7; dest:x8; op1val:0x040400fff9efff;  op2val:0xdfff1000fffdfffc
TEST_RR_OP(smbt16, x8, x12, x7, 0x0000000000000000, 0x040400fff9efff, 0xdfff1000fffdfffc, x21, 88, x2)

inst_12:
// rs1==x31, rs2==x26, rd==x3, rs2_h3_val == -4097, rs1_h1_val == -32768, rs1_h0_val == -9, rs2_h1_val == 4096, rs1_h3_val == -3, rs2_h2_val == 0, rs2_h0_val == 128
// opcode: smbt16 ; op1:x31; op2:x26; dest:x3; op1val:0xfffd3fff8000fff7;  op2val:0xefff000010000080
TEST_RR_OP(smbt16, x3, x31, x26, 0x0000000000000000, 0xfffd3fff8000fff7, 0xefff000010000080, x21, 96, x2)

inst_13:
// rs1==x26, rs2==x9, rd==x24, rs2_h3_val == -1025, rs1_h1_val == -5, rs2_h0_val == 4, rs1_h3_val == -1025, rs1_h0_val == 21845, rs2_h2_val == 64
// opcode: smbt16 ; op1:x26; op2:x9; dest:x24; op1val:0xfbff0004fffb5555;  op2val:0xfbff0040ffbf0004
TEST_RR_OP(smbt16, x24, x26, x9, 0x0000000000000000, 0xfbff0004fffb5555, 0xfbff0040ffbf0004, x21, 104, x2)

inst_14:
// rs1==x30, rs2==x10, rd==x27, rs2_h3_val == -513, rs2_h0_val == 16384, rs1_h3_val == -4097, rs1_h1_val == 2048
// opcode: smbt16 ; op1:x30; op2:x10; dest:x27; op1val:0xefff7fff0800fff9;  op2val:0xfdfffffc00014000
TEST_RR_OP(smbt16, x27, x30, x10, 0x0000000000000000, 0xefff7fff0800fff9, 0xfdfffffc00014000, x21, 112, x2)

inst_15:
// rs1==x27, rs2==x4, rd==x31, rs2_h3_val == -65, rs1_h0_val == 128, rs1_h2_val == 128
// opcode: smbt16 ; op1:x27; op2:x4; dest:x31; op1val:0x8000008004000080;  op2val:0xffbf80000001fdff
TEST_RR_OP(smbt16, x31, x27, x4, 0x0000000000000000, 0x8000008004000080, 0xffbf80000001fdff, x21, 120, x2)

inst_16:
// rs1==x18, rs2==x15, rd==x28, rs2_h3_val == -33, rs1_h1_val == -513, rs1_h0_val == 4, rs2_h0_val == 1024
// opcode: smbt16 ; op1:x18; op2:x15; dest:x28; op1val:0xffefffdffdff0004;  op2val:0xffdffffc00030400
TEST_RR_OP(smbt16, x28, x18, x15, 0x0000000000000000, 0xffefffdffdff0004, 0xffdffffc00030400, x21, 128, x2)

inst_17:
// rs1==x20, rs2==x0, rd==x25, rs2_h3_val == -17, rs1_h0_val == -2049, rs1_h1_val == -2049, rs1_h2_val == 256, rs2_h1_val == 8
// opcode: smbt16 ; op1:x20; op2:x0; dest:x25; op1val:0xefff0100f7fff7ff;  op2val:0xffeffff900080010
TEST_RR_OP(smbt16, x25, x20, x0, 0x0000000000000000, 0xefff0100f7fff7ff, 0xffeffff900080010, x21, 136, x16)

inst_18:
// rs1==x9, rs2==x2, rd==x17, rs2_h3_val == -9, rs1_h3_val == -257, rs1_h1_val == 16384, rs1_h2_val == -2
// opcode: smbt16 ; op1:x9; op2:x2; dest:x17; op1val:0xfefffffe40000000;  op2val:0xfff70000fffdfffa
TEST_RR_OP(smbt16, x17, x9, x2, 0x0000000000000000, 0xfefffffe40000000, 0xfff70000fffdfffa, x21, 144, x16)
RVTEST_SIGBASE(x14,signature_x14_0)

inst_19:
// rs1==x11, rs2==x29, rd==x4, rs2_h3_val == -5, rs2_h2_val == -8193, rs1_h1_val == 512, rs1_h2_val == -21846, rs1_h0_val == 64, rs2_h1_val == -2, rs2_h0_val == -3, rs1_h3_val == -2
// opcode: smbt16 ; op1:x11; op2:x29; dest:x4; op1val:0xfffeaaaa02000040;  op2val:0xfffbdffffffefffd
TEST_RR_OP(smbt16, x4, x11, x29, 0x0000000000000000, 0xfffeaaaa02000040, 0xfffbdffffffefffd, x14, 0, x16)

inst_20:
// rs1==x10, rs2==x27, rd==x2, rs2_h3_val == -3, rs1_h2_val == 8192, rs2_h1_val == 256, rs2_h0_val == -2, rs2_h2_val == 21845
// opcode: smbt16 ; op1:x10; op2:x27; dest:x2; op1val:0xefff20004000fff8;  op2val:0xfffd55550100fffe
TEST_RR_OP(smbt16, x2, x10, x27, 0x0000000000000000, 0xefff20004000fff8, 0xfffd55550100fffe, x14, 8, x16)

inst_21:
// rs1==x15, rs2==x23, rd==x20, rs2_h3_val == -2, rs2_h1_val == 0, rs1_h3_val == -21846, rs1_h0_val == 2048, rs1_h2_val == 21845, rs1_h1_val == 32767, rs2_h2_val == 256
// opcode: smbt16 ; op1:x15; op2:x23; dest:x20; op1val:0xaaaa55557fff0800;  op2val:0xfffe01000000fff6
TEST_RR_OP(smbt16, x20, x15, x23, 0x0000000000000000, 0xaaaa55557fff0800, 0xfffe01000000fff6, x14, 16, x16)

inst_22:
// rs1==x17, rs2==x3, rd==x12, rs2_h3_val == -32768, rs2_h0_val == 8192, rs1_h3_val == 1, rs2_h2_val == -513
// opcode: smbt16 ; op1:x17; op2:x3; dest:x12; op1val:0x010004c0000040;  op2val:0x8000fdff00082000
TEST_RR_OP(smbt16, x12, x17, x3, 0x0000000000000000, 0x010004c0000040, 0x8000fdff00082000, x14, 24, x16)

inst_23:
// rs1==x19, rs2==x28, rd==x7, rs2_h3_val == 8192, rs2_h1_val == 16384, rs1_h1_val == 4096
// opcode: smbt16 ; op1:x19; op2:x28; dest:x7; op1val:0x0000061000fff6;  op2val:0x2000200040000010
TEST_RR_OP(smbt16, x7, x19, x28, 0x0000000000000000, 0x0000061000fff6, 0x2000200040000010, x14, 32, x16)

inst_24:
// rs1==x3, rs2==x1, rd==x30, rs2_h3_val == 4096, rs1_h1_val == 21845, rs2_h2_val == -17, rs2_h0_val == -2049, rs1_h2_val == -257
// opcode: smbt16 ; op1:x3; op2:x1; dest:x30; op1val:0x8000feff55550000;  op2val:0x1000ffef0007f7ff
TEST_RR_OP(smbt16, x30, x3, x1, 0x0000000000000000, 0x8000feff55550000, 0x1000ffef0007f7ff, x14, 40, x16)

inst_25:
// rs1==x4, rs2==x11, rd==x9, rs2_h3_val == 1024, rs2_h2_val == 16384, rs1_h1_val == 128, rs1_h2_val == -2049, rs1_h0_val == -21846
// opcode: smbt16 ; op1:x4; op2:x11; dest:x9; op1val:0xeffff7ff0080aaaa;  op2val:0x40040000003f7ff
TEST_RR_OP(smbt16, x9, x4, x11, 0x0000000000000000, 0xeffff7ff0080aaaa, 0x40040000003f7ff, x14, 48, x16)

inst_26:
// rs1==x2, rs2==x30, rd==x15, rs2_h3_val == 512, rs1_h0_val == 16, rs2_h1_val == 8192
// opcode: smbt16 ; op1:x2; op2:x30; dest:x15; op1val:0x060020fffe0010;  op2val:0x20000052000fffe
TEST_RR_OP(smbt16, x15, x2, x30, 0x0000000000000000, 0x060020fffe0010, 0x20000052000fffe, x14, 56, x16)

inst_27:
// rs1==x13, rs2==x8, rd==x29, rs2_h3_val == 256, rs1_h1_val == -33, rs2_h0_val == 512
// opcode: smbt16 ; op1:x13; op2:x8; dest:x29; op1val:0xfbff0400ffdfefff;  op2val:0x100000700010200
TEST_RR_OP(smbt16, x29, x13, x8, 0x0000000000000000, 0xfbff0400ffdfefff, 0x100000700010200, x14, 64, x16)

inst_28:
// rs1==x0, rs2==x25, rd==x19, rs2_h3_val == 128, 
// opcode: smbt16 ; op1:x0; op2:x25; dest:x19; op1val:0xaaaa7fff0100c000;  op2val:0x80fff9fffd0200
TEST_RR_OP(smbt16, x19, x0, x25, 0x0000000000000000, 0xaaaa7fff0100c000, 0x80fff9fffd0200, x14, 72, x16)

inst_29:
// rs1==x23, rs2==x17, rd==x21, rs2_h3_val == 64, rs2_h1_val == 64, rs2_h2_val == 32767
// opcode: smbt16 ; op1:x23; op2:x17; dest:x21; op1val:0xfff8fff90003fff6;  op2val:0x407fff00404000
TEST_RR_OP(smbt16, x21, x23, x17, 0x0000000000000000, 0xfff8fff90003fff6, 0x407fff00404000, x14, 80, x16)

inst_30:
// rs1==x29, rs2==x12, rd==x5, rs2_h3_val == 32, rs1_h0_val == -3
// opcode: smbt16 ; op1:x29; op2:x12; dest:x5; op1val:0x0100060100fffd;  op2val:0x20000620000080
TEST_RR_OP(smbt16, x5, x29, x12, 0x0000000000000000, 0x0100060100fffd, 0x20000620000080, x14, 88, x16)

inst_31:
// rs1==x21, rs2_h3_val == 16, rs1_h3_val == 256, rs2_h0_val == 32767
// opcode: smbt16 ; op1:x21; op2:x6; dest:x23; op1val:0x100000601000010;  op2val:0x10000902007fff
TEST_RR_OP(smbt16, x23, x21, x6, 0x0000000000000000, 0x100000601000010, 0x10000902007fff, x14, 96, x16)

inst_32:
// rs2==x21, rs2_h3_val == 8, rs2_h2_val == 2048, rs1_h1_val == 64
// opcode: smbt16 ; op1:x7; op2:x21; dest:x27; op1val:0xfffe55550040f7ff;  op2val:0x080800fffaf7ff
TEST_RR_OP(smbt16, x27, x7, x21, 0x0000000000000000, 0xfffe55550040f7ff, 0x080800fffaf7ff, x14, 104, x16)

inst_33:
// rs2_h3_val == 4, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffe00090400;  op2val:0x040007fff60009
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x4000fffe00090400, 0x040007fff60009, x14, 112, x16)

inst_34:
// rs2_h3_val == 1, rs2_h2_val == -16385, rs1_h0_val == 16384
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x07001000054000;  op2val:0x01bffffffdfff6
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x07001000054000, 0x01bffffffdfff6, x14, 120, x16)

inst_35:
// rs2_h3_val == 0, rs2_h1_val == -1025, rs1_h3_val == -33, rs2_h0_val == 21845
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf004000034000;  op2val:0x003ffffbff5555
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xffdf004000034000, 0x003ffffbff5555, x14, 128, x16)

inst_36:
// rs1_h1_val == 8192, rs2_h1_val == -5, rs2_h2_val == 32, rs1_h2_val == 0
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9000020000006;  op2val:0x10000020fffbfff6
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfff9000020000006, 0x10000020fffbfff6, x14, 136, x16)

inst_37:
// rs1_h1_val == 32, rs2_h0_val == -9, rs1_h3_val == -9
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7000300200400;  op2val:0xffdfc0000007fff7
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfff7000300200400, 0xffdfc0000007fff7, x14, 144, x16)

inst_38:
// rs1_h1_val == 16, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfff7f00100005;  op2val:0xfff80002fffafdff
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xffdfff7f00100005, 0xfff80002fffafdff, x14, 152, x16)

inst_39:
// rs1_h1_val == 8, rs1_h3_val == 8
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x08008000084000;  op2val:0x02bfff00050003
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x08008000084000, 0x02bfff00050003, x14, 160, x16)

inst_40:
// rs1_h1_val == 4, rs1_h0_val == -16385, rs1_h2_val == 2, rs2_h2_val == -257
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff00020004bfff;  op2val:0x02feff0001feff
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfbff00020004bfff, 0x02feff0001feff, x14, 168, x16)

inst_41:
// rs1_h1_val == 2, rs1_h2_val == 512, rs1_h0_val == -1
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff902000002ffff;  op2val:0xfff68000fffb0009
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfff902000002ffff, 0xfff68000fffb0009, x14, 176, x16)

inst_42:
// rs1_h1_val == 1, rs1_h2_val == -1025
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fbff00010004;  op2val:0x8000fdff0000fff8
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x4000fbff00010004, 0x8000fdff0000fff8, x14, 184, x16)

inst_43:
// rs1_h0_val == 32767, rs2_h0_val == -1025, rs1_h2_val == -5, rs2_h3_val == -1, rs2_h1_val == -17
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffb01007fff;  op2val:0xfffffffaffeffbff
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xffeffffb01007fff, 0xfffffffaffeffbff, x14, 192, x16)

inst_44:
// rs1_h0_val == -8193, rs2_h2_val == -5, rs2_h1_val == 32
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffff7ff0200dfff;  op2val:0xfff7fffb0020fffe
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x3ffff7ff0200dfff, 0xfff7fffb0020fffe, x14, 200, x16)

inst_45:
// rs1_h0_val == -513, rs1_h3_val == -1
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff5555fffafdff;  op2val:0xfffcefff0020feff
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xffff5555fffafdff, 0xfffcefff0020feff, x14, 208, x16)

inst_46:
// rs1_h0_val == -257, rs2_h2_val == -2049
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000005fffdfeff;  op2val:0xffdff7fffff90003
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x1000005fffdfeff, 0xffdff7fffff90003, x14, 216, x16)

inst_47:
// rs1_h0_val == -129, rs2_h0_val == -5, rs1_h2_val == -513, rs2_h1_val == 16
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fdffc000ff7f;  op2val:0x09feff0010fffb
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x09fdffc000ff7f, 0x09feff0010fffb, x14, 224, x16)

inst_48:
// rs1_h0_val == -65, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffafdffffbf;  op2val:0xf7ff400000100002
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfff7fffafdffffbf, 0xf7ff400000100002, x14, 232, x16)

inst_49:
// rs1_h0_val == -5, rs2_h2_val == -33, rs1_h1_val == -65
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0007fffffbffffb;  op2val:0x1000ffdfefffaaaa
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xc0007fffffbffffb, 0x1000ffdfefffaaaa, x14, 240, x16)

inst_50:
// rs1_h0_val == -2, rs1_h3_val == 512, rs1_h2_val == -17, rs2_h1_val == 128, rs2_h0_val == -129
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x200ffef0004fffe;  op2val:0xfeffdfff0080ff7f
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x200ffef0004fffe, 0xfeffdfff0080ff7f, x14, 248, x16)

inst_51:
// rs1_h0_val == 8192, rs2_h0_val == 32, rs1_h1_val == -129
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfbffff7f2000;  op2val:0x03000900800020
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfffdfbffff7f2000, 0x03000900800020, x14, 256, x16)

inst_52:
// rs1_h0_val == 4096, rs1_h3_val == -65
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf400000201000;  op2val:0xfffafffafffeaaaa
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xffbf400000201000, 0xfffafffafffeaaaa, x14, 264, x16)

inst_53:
// rs1_h0_val == 512, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x06f7ff08000200;  op2val:0x0240003ffffffd
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x06f7ff08000200, 0x0240003ffffffd, x14, 272, x16)

inst_54:
// rs1_h0_val == 256, rs2_h1_val == 4, rs1_h3_val == -129
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffff980000100;  op2val:0xffdf000500040007
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xff7ffff980000100, 0xffdf000500040007, x14, 280, x16)

inst_55:
// rs1_h0_val == 32, rs2_h2_val == 1, rs2_h1_val == -2049
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0001ffdf0020;  op2val:0x20000001f7ff7fff
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xefff0001ffdf0020, 0x20000001f7ff7fff, x14, 288, x16)

inst_56:
// rs1_h0_val == 2, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000200090002;  op2val:0xfff95555ffff0002
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x100000200090002, 0xfff95555ffff0002, x14, 296, x16)

inst_57:
// rs1_h0_val == 1, rs2_h2_val == 16
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdc000fff60001;  op2val:0x00001040000009
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfffdc000fff60001, 0x00001040000009, x14, 304, x16)

inst_58:
// rs2_h2_val == -129, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x050010fffbffff;  op2val:0xffffff7f0020fff7
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x050010fffbffff, 0xffffff7f0020fff7, x14, 312, x16)

inst_59:
// rs2_h1_val == 2, rs1_h2_val == -16385, rs1_h1_val == -17, rs2_h0_val == -32768
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9bfffffef0005;  op2val:0x2000000700028000
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfff9bfffffef0005, 0x2000000700028000, x14, 320, x16)

inst_60:
// rs2_h0_val == -16385, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa000900010800;  op2val:0xff7fdfff0002bfff
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfffa000900010800, 0xff7fdfff0002bfff, x14, 328, x16)

inst_61:
// rs2_h0_val == -8193, rs2_h1_val == -129
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x06aaaaefffff7f;  op2val:0xfffa0009ff7fdfff
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x06aaaaefffff7f, 0xfffa0009ff7fdfff, x14, 336, x16)

inst_62:
// rs2_h0_val == -4097, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x040009ffdffffa;  op2val:0x0700070006efff
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x040009ffdffffa, 0x0700070006efff, x14, 344, x16)

inst_63:
// rs2_h0_val == -65, rs1_h2_val == -1
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000ffffc0000000;  op2val:0xfff8fbff0000ffbf
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xc000ffffc0000000, 0xfff8fbff0000ffbf, x14, 352, x16)

inst_64:
// rs2_h0_val == -17, rs2_h2_val == -65
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff002000030001;  op2val:0xffffffbffffaffef
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfbff002000030001, 0xffffffbffffaffef, x14, 360, x16)

inst_65:
// rs2_h0_val == 4096, rs1_h3_val == 21845
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555c0000400;  op2val:0x400c00000081000
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x55555555c0000400, 0x400c00000081000, x14, 368, x16)

inst_66:
// rs2_h0_val == 2048, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8400010000100;  op2val:0xbfffff7f00060800
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfff8400010000100, 0xbfffff7f00060800, x14, 376, x16)

inst_67:
// rs2_h0_val == 64, rs1_h3_val == 32
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000025555ffef;  op2val:0xfffc0010fffa0040
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x2000025555ffef, 0xfffc0010fffa0040, x14, 384, x16)

inst_68:
// rs2_h0_val == 1, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffdf00077fff;  op2val:0x8000800fff80001
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xf7ffffdf00077fff, 0x8000800fff80001, x14, 392, x16)

inst_69:
// rs2_h0_val == 0, rs2_h2_val == -1
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafff820000003;  op2val:0x400ffffffef0000
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xaaaafff820000003, 0x400ffffffef0000, x14, 400, x16)

inst_70:
// rs2_h0_val == -1, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffdf1000c000;  op2val:0xbfff3ffffffcffff
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfffeffdf1000c000, 0xbfff3ffffffcffff, x14, 408, x16)

inst_71:
// rs1_h3_val == -16385, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffb0100fff9;  op2val:0xffff0006fffc0008
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xbffffffb0100fff9, 0xffff0006fffc0008, x14, 416, x16)

inst_72:
// rs1_h3_val == -8193, rs2_h2_val == -3
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0001fff6fff8;  op2val:0x00fffd00060005
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xdfff0001fff6fff8, 0x00fffd00060005, x14, 424, x16)

inst_73:
// rs1_h3_val == -513, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0010fdff0080;  op2val:0x80000009f7ff0008
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfdff0010fdff0080, 0x80000009f7ff0008, x14, 432, x16)

inst_74:
// rs1_h3_val == -5, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb010000403fff;  op2val:0x05fffb0009fffa
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfffb010000403fff, 0x05fffb0009fffa, x14, 440, x16)

inst_75:
// rs1_h3_val == 8192, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000f7ff00080100;  op2val:0xff7ffffbfffcfff8
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x2000f7ff00080100, 0xff7ffffbfffcfff8, x14, 448, x16)

inst_76:
// rs1_h3_val == 4096, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffeffffe2000;  op2val:0x100000100800002
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x1000ffeffffe2000, 0x100000100800002, x14, 456, x16)

inst_77:
// rs1_h3_val == 2048, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80040000002ffff;  op2val:0xff7ffff67fff0002
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x80040000002ffff, 0xff7ffff67fff0002, x14, 464, x16)

inst_78:
// rs1_h3_val == 1024, rs2_h2_val == 128
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400f7fff7fffff8;  op2val:0xfffd0080fff9fff6
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x400f7fff7fffff8, 0xfffd0080fff9fff6, x14, 472, x16)

inst_79:
// rs1_h3_val == 16, rs2_h1_val == -8193, rs2_h2_val == 512
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10c000fff9efff;  op2val:0x2000200dfff0005
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x10c000fff9efff, 0x2000200dfff0005, x14, 480, x16)

inst_80:
// rs1_h3_val == 2, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffdfc0002000;  op2val:0x20bfff00084000
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x02ffdfc0002000, 0x20bfff00084000, x14, 488, x16)

inst_81:
// rs2_h2_val == -2, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff7ffffffe0200;  op2val:0x80fffedfff0020
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfbff7ffffffe0200, 0x80fffedfff0020, x14, 496, x16)

inst_82:
// rs1_h2_val == -8193, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffadfff00000800;  op2val:0xefff0005c0000200
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfffadfff00000800, 0xefff0005c0000200, x14, 504, x16)

inst_83:
// rs2_h2_val == 1024, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0004fff8fff9;  op2val:0x04040000100002
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xff7f0004fff8fff9, 0x04040000100002, x14, 512, x16)

inst_84:
// rs1_h2_val == -65, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffbf0800ffef;  op2val:0xffbffffa3fff0007
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x2000ffbf0800ffef, 0xffbffffa3fff0007, x14, 520, x16)

inst_85:
// rs2_h2_val == 8, rs1_h1_val == -8193
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40f7ffdfff0040;  op2val:0x800000800040040
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x40f7ffdfff0040, 0x800000800040040, x14, 528, x16)

inst_86:
// rs1_h2_val == -9, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fff700090001;  op2val:0xfff60000efffffef
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x200fff700090001, 0xfff60000efffffef, x14, 536, x16)

inst_87:
// rs2_h2_val == 4, rs1_h2_val == 4096, rs2_h1_val == -257
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff1000fff8fffa;  op2val:0xfffb0004feffff7f
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xefff1000fff8fffa, 0xfffb0004feffff7f, x14, 544, x16)

inst_88:
// rs2_h1_val == 1024, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fffbfdff0006;  op2val:0xfffc00080400fdff
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x80fffbfdff0006, 0xfffc00080400fdff, x14, 552, x16)

inst_89:
// rs1_h2_val == -3, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800fffd0800aaaa;  op2val:0xc0003fff00085555
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x800fffd0800aaaa, 0xc0003fff00085555, x14, 560, x16)

inst_90:
// rs2_h1_val == -21846, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefeffffdf0200;  op2val:0x000005aaaa0020
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfffefeffffdf0200, 0x000005aaaa0020, x14, 568, x16)

inst_91:
// rs2_h1_val == 21845, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x04ffbf00800006;  op2val:0x10fffc5555ffef
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x04ffbf00800006, 0x10fffc5555ffef, x14, 576, x16)

inst_92:
// rs1_h2_val == 2048, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x050800fffdaaaa;  op2val:0xdffffdffaaaa0006
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x050800fffdaaaa, 0xdffffdffaaaa0006, x14, 584, x16)

inst_93:
// rs1_h2_val == -32768, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff980000007aaaa;  op2val:0xfdff3ffffff6f7ff
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfff980000007aaaa, 0xfdff3ffffff6f7ff, x14, 592, x16)

inst_94:
// rs2_h1_val == -16385, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff00200009feff;  op2val:0xfdfffdffbfff0200
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xdfff00200009feff, 0xfdfffdffbfff0200, x14, 600, x16)

inst_95:
// rs2_h1_val == -513, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff90100feffdfff;  op2val:0xfffa0100fdff0400
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfff90100feffdfff, 0xfffa0100fdff0400, x14, 608, x16)

inst_96:
// rs1_h2_val == 8, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0008c000aaaa;  op2val:0xfffef7ffdfffffbf
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfffa0008c000aaaa, 0xfffef7ffdfffffbf, x14, 616, x16)

inst_97:
// rs2_h1_val == -33, rs1_h1_val == -9
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60003fff7fff8;  op2val:0x20efffffdffffe
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xfff60003fff7fff8, 0x20efffffdffffe, x14, 624, x16)

inst_98:
// rs2_h1_val == -9, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff00800003ffef;  op2val:0x00aaaafff70008
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x3fff00800003ffef, 0x00aaaafff70008, x14, 632, x16)

inst_99:
// rs1_h1_val == -21846, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x030008aaaa0400;  op2val:0xc000fff600027fff
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x030008aaaa0400, 0xc000fff600027fff, x14, 640, x16)

inst_100:
// rs1_h1_val == -1025, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fff9fbfffff7;  op2val:0x200fff7fffd0007
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x04fff9fbfffff7, 0x200fff7fffd0007, x14, 648, x16)

inst_101:
// rs2_h1_val == -32768, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafff8dfffffff;  op2val:0x05fff98000fffa
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xaaaafff8dfffffff, 0x05fff98000fffa, x14, 656, x16)

inst_102:
// rs1_h1_val == -16385, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0004bfffffbf;  op2val:0xfbffc0000001fffa
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xffdf0004bfffffbf, 0xfbffc0000001fffa, x14, 664, x16)

inst_103:
// rs2_h1_val == 2048, 
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaac0002000fff8;  op2val:0x06efff08007fff
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xaaaac0002000fff8, 0x06efff08007fff, x14, 672, x16)

inst_104:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h1_val == -3, rs2_h2_val == -4097, rs2_h3_val == -129, rs2_h0_val == 8, rs1_h0_val == -17, rs1_h2_val == 64, rs1_h3_val == 32767
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0040fffdffef;  op2val:0xff7fefff3fff0008
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x7fff0040fffdffef, 0xff7fefff3fff0008, x14, 680, x16)

inst_105:
// rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h2_val == 8192, rs1_h2_val == 32, rs2_h0_val == 256, rs1_h0_val == -33
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0600200007ffdf;  op2val:0xfff62000c0000100
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0x0600200007ffdf, 0xfff62000c0000100, x14, 688, x16)

inst_106:
// rs2_h3_val == -17, rs1_h0_val == -2049, rs1_h1_val == -2049, rs1_h2_val == 256, rs2_h1_val == 8
// opcode: smbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0100f7fff7ff;  op2val:0xffeffff900080010
TEST_RR_OP(smbt16, x31, x30, x29, 0x0000000000000000, 0xefff0100f7fff7ff, 0xffeffff900080010, x14, 696, x16)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x21_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x21_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x14_0:
    .fill 88*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
