
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the mulsr64 instruction of the RISC-V RV64PZicsr extension for the mulsr64 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",mulsr64)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1 == rd != rs2, rs1==x22, rs2==x8, rd==x22, rs1_w0_val == -2147483648, rs1_w1_val == 1024, rs2_w0_val == 4
// opcode: mulsr64 ; op1:x22; op2:x8; dest:x22; op1val:0x0000040080000000;  op2val:0xfffffffa00000004
TEST_P64_PNN_OP(mulsr64, x22, $rd_hi, x22, x8, 0x0000000000000000, $correctval_hi, 0x0000040080000000, 0xfffffffa00000004, x9, 0, x7)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x8, rs2==x1, rd==x6, rs2_w1_val == -1431655766, rs1_w0_val == 268435456, rs1_w1_val == -1
// opcode: mulsr64 ; op1:x8; op2:x1; dest:x6; op1val:0xffffffff10000000;  op2val:0xaaaaaaaa3fffffff
TEST_P64_PNN_OP(mulsr64, x6, $rd_hi, x8, x1, 0x0000000000000000, $correctval_hi, 0xffffffff10000000, 0xaaaaaaaa3fffffff, x9, 16, x7)

inst_2:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x24, rs2_w1_val == 1431655765, rs1_w1_val == 65536, rs2_w0_val == 131072, rs1_w0_val == 64
// opcode: mulsr64 ; op1:x30; op2:x30; dest:x24; op1val:0x0001000000000040;  op2val:0x5555555500020000
TEST_P64_PNN_OP(mulsr64, x24, $rd_hi, x30, x30, 0x0000000000000000, $correctval_hi, 0x0001000000000040, 0x5555555500020000, x9, 32, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x14, rs2==x14, rd==x14, rs2_w1_val == 2147483647, rs1_w0_val == 65536, rs2_w0_val == 1431655765, rs1_w1_val == -134217729
// opcode: mulsr64 ; op1:x14; op2:x14; dest:x14; op1val:0xf7ffffff00010000;  op2val:0x7fffffff55555555
TEST_P64_PNN_OP(mulsr64, x14, $rd_hi, x14, x14, 0x0000000000000000, $correctval_hi, 0xf7ffffff00010000, 0x7fffffff55555555, x9, 48, x7)

inst_4:
// rs2 == rd != rs1, rs1==x1, rs2==x12, rd==x12, rs2_w1_val == -1073741825, rs1_w0_val == 33554432, rs2_w0_val == -65537
// opcode: mulsr64 ; op1:x1; op2:x12; dest:x12; op1val:0x0000000702000000;  op2val:0xbffffffffffeffff
TEST_P64_PNN_OP(mulsr64, x12, $rd_hi, x1, x12, 0x0000000000000000, $correctval_hi, 0x0000000702000000, 0xbffffffffffeffff, x9, 64, x7)

inst_5:
// rs1==x21, rs2==x19, rd==x20, rs2_w1_val == -536870913, rs1_w1_val == 4, rs2_w0_val == 134217728, rs1_w0_val == 1073741824
// opcode: mulsr64 ; op1:x21; op2:x19; dest:x20; op1val:0x0000000440000000;  op2val:0xdfffffff08000000
TEST_P64_PNN_OP(mulsr64, x20, $rd_hi, x21, x19, 0x0000000000000000, $correctval_hi, 0x0000000440000000, 0xdfffffff08000000, x9, 80, x7)

inst_6:
// rs1==x18, rs2==x4, rd==x16, rs2_w1_val == -268435457, rs1_w0_val == 2097152, rs1_w1_val == -513, rs2_w0_val == -2049
// opcode: mulsr64 ; op1:x18; op2:x4; dest:x16; op1val:0xfffffdff00200000;  op2val:0xeffffffffffff7ff
TEST_P64_PNN_OP(mulsr64, x16, $rd_hi, x18, x4, 0x0000000000000000, $correctval_hi, 0xfffffdff00200000, 0xeffffffffffff7ff, x9, 96, x7)

inst_7:
// rs1==x23, rs2==x3, rd==x8, rs2_w1_val == -134217729, rs1_w1_val == 2097152, rs1_w0_val == 0
// opcode: mulsr64 ; op1:x23; op2:x3; dest:x8; op1val:0x0020000000000000;  op2val:0xf7ffffffc0000000
TEST_P64_PNN_OP(mulsr64, x8, $rd_hi, x23, x3, 0x0000000000000000, $correctval_hi, 0x0020000000000000, 0xf7ffffffc0000000, x9, 112, x7)

inst_8:
// rs1==x29, rs2==x5, rd==x26, rs2_w1_val == -67108865, rs1_w1_val == -33554433, rs2_w0_val == -1025, rs1_w0_val == -5
// opcode: mulsr64 ; op1:x29; op2:x5; dest:x26; op1val:0xfdfffffffffffffb;  op2val:0xfbfffffffffffbff
TEST_P64_PNN_OP(mulsr64, x26, $rd_hi, x29, x5, 0x0000000000000000, $correctval_hi, 0xfdfffffffffffffb, 0xfbfffffffffffbff, x9, 128, x7)

inst_9:
// rs1==x12, rs2==x27, rd==x4, rs2_w1_val == -33554433, rs2_w0_val == -1, rs1_w1_val == -9
// opcode: mulsr64 ; op1:x12; op2:x27; dest:x4; op1val:0xfffffff7c0000000;  op2val:0xfdffffffffffffff
TEST_P64_PNN_OP(mulsr64, x4, $rd_hi, x12, x27, 0x0000000000000000, $correctval_hi, 0xfffffff7c0000000, 0xfdffffffffffffff, x9, 144, x7)

inst_10:
// rs1==x15, rs2==x22, rd==x10, rs2_w1_val == -16777217, rs2_w0_val == -9, rs1_w0_val == 4194304
// opcode: mulsr64 ; op1:x15; op2:x22; dest:x10; op1val:0x0000000700400000;  op2val:0xfefffffffffffff7
TEST_P64_PNN_OP(mulsr64, x10, $rd_hi, x15, x22, 0x0000000000000000, $correctval_hi, 0x0000000700400000, 0xfefffffffffffff7, x9, 160, x7)

inst_11:
// rs1==x0, rs2==x28, rd==x30, rs2_w1_val == -8388609, rs1_w0_val == 8192, rs1_w1_val == -536870913, rs2_w0_val == -257
// opcode: mulsr64 ; op1:x0; op2:x28; dest:x30; op1val:0xdfffffff00002000;  op2val:0xff7ffffffffffeff
TEST_P64_PNN_OP(mulsr64, x30, $rd_hi, x0, x28, 0x0000000000000000, $correctval_hi, 0xdfffffff00002000, 0xff7ffffffffffeff, x9, 176, x7)

inst_12:
// rs1==x25, rs2==x10, rd==x28, rs2_w1_val == -4194305, rs1_w1_val == -1431655766, rs2_w0_val == 262144, rs1_w0_val == -129
// opcode: mulsr64 ; op1:x25; op2:x10; dest:x28; op1val:0xaaaaaaaaffffff7f;  op2val:0xffbfffff00040000
TEST_P64_PNN_OP(mulsr64, x28, $rd_hi, x25, x10, 0x0000000000000000, $correctval_hi, 0xaaaaaaaaffffff7f, 0xffbfffff00040000, x9, 192, x7)

inst_13:
// rs1==x11, rs2==x18, rd==x2, rs2_w1_val == -2097153, rs2_w0_val == 16384, rs1_w0_val == 16, rs1_w1_val == 128
// opcode: mulsr64 ; op1:x11; op2:x18; dest:x2; op1val:0x0000008000000010;  op2val:0xffdfffff00004000
TEST_P64_PNN_OP(mulsr64, x2, $rd_hi, x11, x18, 0x0000000000000000, $correctval_hi, 0x0000008000000010, 0xffdfffff00004000, x9, 208, x7)

inst_14:
// rs1==x4, rs2==x7, rd==x18, rs2_w1_val == -1048577, rs1_w0_val == -65, rs2_w0_val == 512, rs1_w1_val == -2097153
// opcode: mulsr64 ; op1:x4; op2:x7; dest:x18; op1val:0xffdfffffffffffbf;  op2val:0xffefffff00000200
TEST_P64_PNN_OP(mulsr64, x18, $rd_hi, x4, x7, 0x0000000000000000, $correctval_hi, 0xffdfffffffffffbf, 0xffefffff00000200, x9, 224, x8)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_15:
// rs1==x10, rs2==x25, rs2_w1_val == -524289, rs1_w0_val == -3, rs1_w1_val == -8193
// opcode: mulsr64 ; op1:x10; op2:x25; dest:x9; op1val:0xffffdffffffffffd;  op2val:0xfff7fffffffffff9
TEST_P64_PNN_OP(mulsr64, x9, $rd_hi, x10, x25, 0x0000000000000000, $correctval_hi, 0xffffdffffffffffd, 0xfff7fffffffffff9, x1, 0, x8)

inst_16:
// rs1==x9, rs2==x15, rs2_w1_val == -262145, rs1_w0_val == 131072
// opcode: mulsr64 ; op1:x9; op2:x15; dest:x21; op1val:0x0020000000020000;  op2val:0xfffbffff00004000
TEST_P64_PNN_OP(mulsr64, x21, $rd_hi, x9, x15, 0x0000000000000000, $correctval_hi, 0x0020000000020000, 0xfffbffff00004000, x1, 16, x8)

inst_17:
// rs1==x2, rs2==x0, rs2_w1_val == -131073, rs2_w0_val == 524288, rs1_w0_val == -67108865
// opcode: mulsr64 ; op1:x2; op2:x0; dest:x25; op1val:0x00000006fbffffff;  op2val:0xfffdffff00080000
TEST_P64_PNN_OP(mulsr64, x25, $rd_hi, x2, x0, 0x0000000000000000, $correctval_hi, 0x00000006fbffffff, 0xfffdffff00080000, x1, 32, x8)

inst_18:
// rs1==x5, rs2==x6, rs2_w1_val == -65537, rs2_w0_val == -536870913, rs1_w1_val == 32, rs1_w0_val == 8388608
// opcode: mulsr64 ; op1:x5; op2:x6; dest:x24; op1val:0x0000002000800000;  op2val:0xfffeffffdfffffff
TEST_P64_PNN_OP(mulsr64, x24, $rd_hi, x5, x6, 0x0000000000000000, $correctval_hi, 0x0000002000800000, 0xfffeffffdfffffff, x1, 48, x8)

inst_19:
// rs1==x27, rs2==x29, rs2_w1_val == -32769, 
// opcode: mulsr64 ; op1:x27; op2:x29; dest:x11; op1val:0x0000000640000000;  op2val:0xffff7fff08000000
TEST_P64_PNN_OP(mulsr64, x11, $rd_hi, x27, x29, 0x0000000000000000, $correctval_hi, 0x0000000640000000, 0xffff7fff08000000, x1, 64, x8)

inst_20:
// rs1==x6, rs2==x23, rs2_w1_val == -16385, rs2_w0_val == -5, rs1_w1_val == 536870912
// opcode: mulsr64 ; op1:x6; op2:x23; dest:x5; op1val:0x20000000c0000000;  op2val:0xffffbffffffffffb
TEST_P64_PNN_OP(mulsr64, x5, $rd_hi, x6, x23, 0x0000000000000000, $correctval_hi, 0x20000000c0000000, 0xffffbffffffffffb, x1, 80, x8)

inst_21:
// rs1==x17, rs2==x11, rs2_w1_val == -8193, rs1_w1_val == -1025, rs1_w0_val == -32769
// opcode: mulsr64 ; op1:x17; op2:x11; dest:x19; op1val:0xfffffbffffff7fff;  op2val:0xffffdffffffeffff
TEST_P64_PNN_OP(mulsr64, x19, $rd_hi, x17, x11, 0x0000000000000000, $correctval_hi, 0xfffffbffffff7fff, 0xffffdffffffeffff, x1, 96, x8)

inst_22:
// rs1==x19, rs2==x24, rs2_w1_val == -4097, rs1_w0_val == 536870912, rs2_w0_val == -67108865, rs1_w1_val == 134217728
// opcode: mulsr64 ; op1:x19; op2:x24; dest:x12; op1val:0x0800000020000000;  op2val:0xffffeffffbffffff
TEST_P64_PNN_OP(mulsr64, x12, $rd_hi, x19, x24, 0x0000000000000000, $correctval_hi, 0x0800000020000000, 0xffffeffffbffffff, x1, 112, x8)

inst_23:
// rs1==x3, rs2==x2, rs2_w1_val == -2049, rs1_w0_val == -4194305, rs1_w1_val == -4097, rs2_w0_val == 1
// opcode: mulsr64 ; op1:x3; op2:x2; dest:x7; op1val:0xffffefffffbfffff;  op2val:0xfffff7ff00000001
TEST_P64_PNN_OP(mulsr64, x7, $rd_hi, x3, x2, 0x0000000000000000, $correctval_hi, 0xffffefffffbfffff, 0xfffff7ff00000001, x1, 128, x8)

inst_24:
// rs1==x13, rs2==x17, rs2_w1_val == -1025, rs1_w0_val == 1024
// opcode: mulsr64 ; op1:x13; op2:x17; dest:x28; op1val:0xfffffffa00000400;  op2val:0xfffffbfffffffff9
TEST_P64_PNN_OP(mulsr64, x28, $rd_hi, x13, x17, 0x0000000000000000, $correctval_hi, 0xfffffffa00000400, 0xfffffbfffffffff9, x1, 144, x8)

inst_25:
// rs1==x28, rs2==x31, rs2_w1_val == -513, rs1_w1_val == 524288
// opcode: mulsr64 ; op1:x28; op2:x31; dest:x16; op1val:0x0008000000000009;  op2val:0xfffffdff55555555
TEST_P64_PNN_OP(mulsr64, x16, $rd_hi, x28, x31, 0x0000000000000000, $correctval_hi, 0x0008000000000009, 0xfffffdff55555555, x1, 160, x8)

inst_26:
// rs1==x24, rs2==x13, rs2_w1_val == -257, rs2_w0_val == 1073741824, rs1_w1_val == 1073741824, rs1_w0_val == -16777217
// opcode: mulsr64 ; op1:x24; op2:x13; dest:x31; op1val:0x40000000feffffff;  op2val:0xfffffeff40000000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x24, x13, 0x0000000000000000, $correctval_hi, 0x40000000feffffff, 0xfffffeff40000000, x1, 176, x8)

inst_27:
// rs1==x7, rs2==x20, rs2_w1_val == -129, rs1_w0_val == -4097, rs1_w1_val == 8388608
// opcode: mulsr64 ; op1:x7; op2:x20; dest:x4; op1val:0x00800000ffffefff;  op2val:0xffffff7f08000000
TEST_P64_PNN_OP(mulsr64, x4, $rd_hi, x7, x20, 0x0000000000000000, $correctval_hi, 0x00800000ffffefff, 0xffffff7f08000000, x1, 192, x8)

inst_28:
// rs1==x16, rs2==x9, rs2_w1_val == -65, rs2_w0_val == -65, rs1_w1_val == 8192
// opcode: mulsr64 ; op1:x16; op2:x9; dest:x5; op1val:0x0000200000010000;  op2val:0xffffffbfffffffbf
TEST_P64_PNN_OP(mulsr64, x5, $rd_hi, x16, x9, 0x0000000000000000, $correctval_hi, 0x0000200000010000, 0xffffffbfffffffbf, x1, 208, x8)

inst_29:
// rs1==x31, rs2==x26, rs2_w1_val == -33, rs1_w1_val == 64, rs1_w0_val == -2
// opcode: mulsr64 ; op1:x31; op2:x26; dest:x18; op1val:0x00000040fffffffe;  op2val:0xffffffdf00040000
TEST_P64_PNN_OP(mulsr64, x18, $rd_hi, x31, x26, 0x0000000000000000, $correctval_hi, 0x00000040fffffffe, 0xffffffdf00040000, x1, 224, x8)

inst_30:
// rs1==x20, rs2==x21, rs2_w1_val == -17, rs1_w0_val == -1073741825
// opcode: mulsr64 ; op1:x20; op2:x21; dest:x17; op1val:0x00000080bfffffff;  op2val:0xffffffeffffffeff
TEST_P64_PNN_OP(mulsr64, x17, $rd_hi, x20, x21, 0x0000000000000000, $correctval_hi, 0x00000080bfffffff, 0xffffffeffffffeff, x1, 240, x2)

inst_31:
// rs1==x26, rs2==x16, rs2_w1_val == -9, rs2_w0_val == 4096
// opcode: mulsr64 ; op1:x26; op2:x16; dest:x20; op1val:0x3fffffff00000000;  op2val:0xfffffff700001000
TEST_P64_PNN_OP(mulsr64, x20, $rd_hi, x26, x16, 0x0000000000000000, $correctval_hi, 0x3fffffff00000000, 0xfffffff700001000, x1, 256, x2)

inst_32:
// rs2_w1_val == -5, rs2_w0_val == -1073741825, rs1_w0_val == -524289
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000004fff7ffff;  op2val:0xfffffffbbfffffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000004fff7ffff, 0xfffffffbbfffffff, x1, 272, x2)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33:
// rs2_w1_val == -3, rs1_w1_val == -1073741825, rs1_w0_val == 128
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000080;  op2val:0xfffffffd3fffffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbfffffff00000080, 0xfffffffd3fffffff, x1, 0, x2)

inst_34:
// rs2_w1_val == -2, rs1_w1_val == 262144, rs2_w0_val == -129
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x000400003fffffff;  op2val:0xfffffffeffffff7f
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000400003fffffff, 0xfffffffeffffff7f, x1, 16, x2)

inst_35:
// rs2_w1_val == -2147483648, rs1_w0_val == -17
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000ffffffef;  op2val:0x80000000fffffffb
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x08000000ffffffef, 0x80000000fffffffb, x1, 32, x2)

inst_36:
// rs2_w1_val == 1073741824, rs1_w1_val == 33554432
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000ffbfffff;  op2val:0x40000000fffffffb
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x02000000ffbfffff, 0x40000000fffffffb, x1, 48, x2)

inst_37:
// rs2_w1_val == 536870912, rs2_w0_val == 4194304, rs1_w0_val == -9, rs1_w1_val == -4194305
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffffff7;  op2val:0x2000000000400000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbffffffffffff7, 0x2000000000400000, x1, 64, x2)

inst_38:
// rs2_w1_val == 268435456, rs1_w1_val == 131072, rs2_w0_val == 8
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0002000020000000;  op2val:0x1000000000000008
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0002000020000000, 0x1000000000000008, x1, 80, x2)

inst_39:
// rs2_w1_val == 134217728, rs1_w1_val == 512, rs2_w0_val == -17, rs1_w0_val == 16384
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000020000004000;  op2val:0x08000000ffffffef
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000020000004000, 0x08000000ffffffef, x1, 96, x2)

inst_40:
// rs2_w1_val == 67108864, rs1_w0_val == 16777216, rs2_w0_val == -134217729, rs1_w1_val == -33
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf01000000;  op2val:0x04000000f7ffffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdf01000000, 0x04000000f7ffffff, x1, 112, x2)

inst_41:
// rs2_w1_val == 33554432, rs1_w1_val == -3, rs2_w0_val == -3
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000010;  op2val:0x02000000fffffffd
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffd00000010, 0x02000000fffffffd, x1, 128, x2)

inst_42:
// rs2_w1_val == 16777216, rs2_w0_val == -16385, rs1_w0_val == -33
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffffffdf;  op2val:0x01000000ffffbfff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdffffffffffffdf, 0x01000000ffffbfff, x1, 144, x2)

inst_43:
// rs2_w1_val == 8388608, rs1_w1_val == -257, rs2_w0_val == 16
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000400;  op2val:0x0080000000000010
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffeff00000400, 0x0080000000000010, x1, 160, x2)

inst_44:
// rs2_w1_val == 4194304, rs2_w0_val == -2
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000fffffff9;  op2val:0x00400000fffffffe
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00010000fffffff9, 0x00400000fffffffe, x1, 176, x2)

inst_45:
// rs2_w1_val == 2097152, rs1_w0_val == 2048, rs1_w1_val == -16385
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000800;  op2val:0x00200000ffffffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffbfff00000800, 0x00200000ffffffff, x1, 192, x2)

inst_46:
// rs2_w1_val == 1048576, rs1_w0_val == -33554433
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000007fdffffff;  op2val:0x00100000ffffff7f
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000007fdffffff, 0x00100000ffffff7f, x1, 208, x2)

inst_47:
// rs1_w0_val == 4096, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000020000001000;  op2val:0xfffffffe00000006
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000020000001000, 0xfffffffe00000006, x1, 224, x2)

inst_48:
// rs1_w0_val == 512, rs1_w1_val == 256, rs2_w0_val == 32768
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000010000000200;  op2val:0xffff7fff00008000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000010000000200, 0xffff7fff00008000, x1, 240, x2)

inst_49:
// rs1_w0_val == 256, rs1_w1_val == -268435457, rs2_w0_val == 2147483647
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000100;  op2val:0x7fffffff7fffffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefffffff00000100, 0x7fffffff7fffffff, x1, 256, x2)

inst_50:
// rs1_w0_val == 32, rs2_w0_val == -2097153
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000020;  op2val:0x08000000ffdfffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffd00000020, 0x08000000ffdfffff, x1, 272, x2)

inst_51:
// rs1_w0_val == 8, rs2_w0_val == 2097152
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000008;  op2val:0x0100000000200000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefffffff00000008, 0x0100000000200000, x1, 288, x2)

inst_52:
// rs1_w0_val == 4, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0800000000000004;  op2val:0xfff7ffff00000007
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800000000000004, 0xfff7ffff00000007, x1, 304, x2)

inst_53:
// rs1_w0_val == 2, rs2_w1_val == 128
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000002;  op2val:0x0000008000000010
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaaaaaa00000002, 0x0000008000000010, x1, 320, x2)

inst_54:
// rs1_w0_val == 1, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000001;  op2val:0xffffefffffffff7f
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff700000001, 0xffffefffffffff7f, x1, 336, x2)

inst_55:
// rs1_w0_val == -1, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000009ffffffff;  op2val:0x0200000000080000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000009ffffffff, 0x0200000000080000, x1, 352, x2)

inst_56:
// rs2_w1_val == 524288, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0200000000200000;  op2val:0x00080000fffffffc
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200000000200000, 0x00080000fffffffc, x1, 368, x2)

inst_57:
// rs2_w1_val == 262144, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffffffff9;  op2val:0x00040000fffffffe
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffdfffffffff9, 0x00040000fffffffe, x1, 384, x2)

inst_58:
// rs2_w1_val == 131072, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000002;  op2val:0x00020000ffffffbf
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff800000002, 0x00020000ffffffbf, x1, 400, x2)

inst_59:
// rs2_w1_val == 65536, rs2_w0_val == 67108864, rs1_w0_val == 32768
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00008000;  op2val:0x0001000004000000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbfffff00008000, 0x0001000004000000, x1, 416, x2)

inst_60:
// rs2_w1_val == 32768, rs1_w0_val == 1048576
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00100000;  op2val:0x00008000f7ffffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdffffff00100000, 0x00008000f7ffffff, x1, 432, x2)

inst_61:
// rs2_w1_val == 16384, rs2_w0_val == -268435457, rs1_w1_val == 0
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000000000000;  op2val:0x00004000efffffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000000000000, 0x00004000efffffff, x1, 448, x2)

inst_62:
// rs2_w1_val == 8192, rs1_w0_val == -16385, rs1_w1_val == 1048576
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000ffffbfff;  op2val:0x0000200000400000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00100000ffffbfff, 0x0000200000400000, x1, 464, x2)

inst_63:
// rs2_w1_val == 4096, rs2_w0_val == -513
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcffffbfff;  op2val:0x00001000fffffdff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffcffffbfff, 0x00001000fffffdff, x1, 480, x2)

inst_64:
// rs2_w1_val == 2048, rs2_w0_val == 128
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000700000009;  op2val:0x0000080000000080
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000700000009, 0x0000080000000080, x1, 496, x2)

inst_65:
// rs2_w1_val == 1024, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000002040000000;  op2val:0x00000400efffffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000002040000000, 0x00000400efffffff, x1, 512, x2)

inst_66:
// rs2_w1_val == 512, rs1_w1_val == -131073, rs2_w0_val == 1048576, rs1_w0_val == -2097153
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffdfffff;  op2val:0x0000020000100000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffdffffffdfffff, 0x0000020000100000, x1, 528, x2)

inst_67:
// rs2_w1_val == 256, rs1_w1_val == -2147483648
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fff7ffff;  op2val:0x0000010000008000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x80000000fff7ffff, 0x0000010000008000, x1, 544, x2)

inst_68:
// rs2_w1_val == 64, rs2_w0_val == -8193, rs1_w0_val == -8193
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffaffffdfff;  op2val:0x00000040ffffdfff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffaffffdfff, 0x00000040ffffdfff, x1, 560, x2)

inst_69:
// rs2_w1_val == 32, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffffff7f;  op2val:0x0000002000000200
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaaaaaaffffff7f, 0x0000002000000200, x1, 576, x2)

inst_70:
// rs2_w1_val == 16, rs1_w1_val == 16777216, rs1_w0_val == -1431655766
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000aaaaaaaa;  op2val:0x0000001000004000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x01000000aaaaaaaa, 0x0000001000004000, x1, 592, x2)

inst_71:
// rs2_w1_val == 8, rs1_w0_val == -1025
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000fffffbff;  op2val:0x00000008fbffffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x02000000fffffbff, 0x00000008fbffffff, x1, 608, x2)

inst_72:
// rs2_w1_val == 4, rs2_w0_val == -1048577, rs1_w1_val == 32768
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000fffffffd;  op2val:0x00000004ffefffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00008000fffffffd, 0x00000004ffefffff, x1, 624, x2)

inst_73:
// rs2_w1_val == 2, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0002000000000200;  op2val:0x0000000200000007
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0002000000000200, 0x0000000200000007, x1, 640, x2)

inst_74:
// rs2_w1_val == 1, rs1_w1_val == -129
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffffffe;  op2val:0x0000000100000001
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffff7ffffffffe, 0x0000000100000001, x1, 656, x2)

inst_75:
// rs2_w1_val == 0, rs1_w0_val == -65537
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffeffff;  op2val:0x00000000ffdfffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7fffffffffeffff, 0x00000000ffdfffff, x1, 672, x2)

inst_76:
// rs2_w1_val == -1, rs1_w0_val == -513
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000fffffdff;  op2val:0xffffffffffffdfff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00020000fffffdff, 0xffffffffffffdfff, x1, 688, x2)

inst_77:
// rs2_w0_val == -1431655766, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000009fffffff7;  op2val:0xffdfffffaaaaaaaa
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000009fffffff7, 0xffdfffffaaaaaaaa, x1, 704, x2)

inst_78:
// rs2_w0_val == -33554433, rs1_w0_val == -268435457
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffefffffff;  op2val:0x00100000fdffffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdffffffefffffff, 0x00100000fdffffff, x1, 720, x2)

inst_79:
// rs2_w0_val == -16777217, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdbfffffff;  op2val:0x3ffffffffeffffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffdbfffffff, 0x3ffffffffeffffff, x1, 736, x2)

inst_80:
// rs2_w0_val == 64, rs1_w1_val == -1048577
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000800;  op2val:0x0002000000000040
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffefffff00000800, 0x0002000000000040, x1, 752, x2)

inst_81:
// rs2_w0_val == 32, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000700000007;  op2val:0x0000400000000020
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000700000007, 0x0000400000000020, x1, 768, x2)

inst_82:
// rs2_w0_val == 2, rs1_w0_val == 1431655765
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000755555555;  op2val:0xfffbffff00000002
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000755555555, 0xfffbffff00000002, x1, 784, x2)

inst_83:
// rs2_w0_val == 0, rs1_w1_val == 4096
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x000010003fffffff;  op2val:0xffffdfff00000000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000010003fffffff, 0xffffdfff00000000, x1, 800, x2)

inst_84:
// rs1_w1_val == 1431655765, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000005;  op2val:0x0000000700000001
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x5555555500000005, 0x0000000700000001, x1, 816, x2)

inst_85:
// rs1_w1_val == 2147483647, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00800000;  op2val:0x000400007fffffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fffffff00800000, 0x000400007fffffff, x1, 832, x2)

inst_86:
// rs1_w1_val == -67108865, rs2_w0_val == 2048
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00004000;  op2val:0x0040000000000800
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffffff00004000, 0x0040000000000800, x1, 848, x2)

inst_87:
// rs1_w1_val == -16777217, rs2_w0_val == 16777216
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffff9;  op2val:0x0000000201000000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfefffffffffffff9, 0x0000000201000000, x1, 864, x2)

inst_88:
// rs1_w1_val == -8388609, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000009;  op2val:0x7fffffff00004000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7fffff00000009, 0x7fffffff00004000, x1, 880, x2)

inst_89:
// rs1_w1_val == -524289, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffff7fff;  op2val:0x0000010000000006
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7ffffffff7fff, 0x0000010000000006, x1, 896, x2)

inst_90:
// rs1_w1_val == -262145, rs1_w0_val == -1048577
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffefffff;  op2val:0x0000000400000080
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffbffffffefffff, 0x0000000400000080, x1, 912, x2)

inst_91:
// rs1_w1_val == -65537, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffffffbff;  op2val:0xc0000000fffffff6
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffefffffffffbff, 0xc0000000fffffff6, x1, 928, x2)

inst_92:
// rs1_w1_val == -32769, rs1_w0_val == 262144
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00040000;  op2val:0xffff7fffdfffffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7fff00040000, 0xffff7fffdfffffff, x1, 944, x2)

inst_93:
// rs1_w1_val == -2049, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff01000000;  op2val:0x00800000fffffeff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffff7ff01000000, 0x00800000fffffeff, x1, 960, x2)

inst_94:
// rs1_w1_val == -65, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfaaaaaaaa;  op2val:0x7fffffffffefffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffbfaaaaaaaa, 0x7fffffffffefffff, x1, 976, x2)

inst_95:
// rs1_w1_val == -17, rs2_w0_val == 8192
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefaaaaaaaa;  op2val:0x3fffffff00002000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffefaaaaaaaa, 0x3fffffff00002000, x1, 992, x2)

inst_96:
// rs1_w1_val == -5, rs1_w0_val == -2049
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffff7ff;  op2val:0xffff7fff00008000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffbfffff7ff, 0xffff7fff00008000, x1, 1008, x2)

inst_97:
// rs1_w1_val == -2, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffff7fff;  op2val:0xffffff7f55555555
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffeffff7fff, 0xffffff7f55555555, x1, 1024, x2)

inst_98:
// rs1_w1_val == 268435456, rs2_w0_val == 8388608
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000ffffefff;  op2val:0x0002000000800000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x10000000ffffefff, 0x0002000000800000, x1, 1040, x2)

inst_99:
// rs1_w1_val == 67108864, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000fffffffc;  op2val:0xfdffffff00000200
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x04000000fffffffc, 0xfdffffff00000200, x1, 1056, x2)

inst_100:
// rs1_w1_val == 4194304, rs2_w0_val == 65536
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000fbffffff;  op2val:0x0000000900010000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00400000fbffffff, 0x0000000900010000, x1, 1072, x2)

inst_101:
// rs1_w1_val == 16, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000001000000040;  op2val:0xfffffff600100000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000001000000040, 0xfffffff600100000, x1, 1088, x2)

inst_102:
// rs1_w1_val == 8, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000800800000;  op2val:0xffff7fff00000200
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000800800000, 0xffff7fff00000200, x1, 1104, x2)

inst_103:
// rs1_w1_val == 2, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000002ffdfffff;  op2val:0xffbfffff00000080
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000002ffdfffff, 0xffbfffff00000080, x1, 1120, x2)

inst_104:
// rs1_w1_val == 1, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000100000000;  op2val:0xffffffbf00000007
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000100000000, 0xffffffbf00000007, x1, 1136, x2)

inst_105:
// rs2_w0_val == -8388609, rs1_w0_val == 67108864
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000104000000;  op2val:0xffffffdfff7fffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000104000000, 0xffffffdfff7fffff, x1, 1152, x2)

inst_106:
// rs1_w0_val == 2147483647, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff7fffffff;  op2val:0x00040000ffffffef
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ffffff7fffffff, 0x00040000ffffffef, x1, 1168, x2)

inst_107:
// rs2_w0_val == -4194305, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000010;  op2val:0x00000003ffbfffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff700000010, 0x00000003ffbfffff, x1, 1184, x2)

inst_108:
// rs1_w0_val == -536870913, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffdfffffff;  op2val:0xfffffff8ffffff7f
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffeffdfffffff, 0xfffffff8ffffff7f, x1, 1200, x2)

inst_109:
// rs2_w0_val == -524289, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffbfff;  op2val:0x00000400fff7ffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffffffffffbfff, 0x00000400fff7ffff, x1, 1216, x2)

inst_110:
// rs1_w0_val == -134217729, rs2_w0_val == 256
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffff7ffffff;  op2val:0xdfffffff00000100
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xeffffffff7ffffff, 0xdfffffff00000100, x1, 1232, x2)

inst_111:
// rs2_w0_val == -262145, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000010;  op2val:0x00080000fffbffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff800000010, 0x00080000fffbffff, x1, 1248, x2)

inst_112:
// rs2_w0_val == -131073, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000200;  op2val:0x00000008fffdffff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7fff00000200, 0x00000008fffdffff, x1, 1264, x2)

inst_113:
// rs2_w0_val == -32769, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000004fffffff7;  op2val:0x04000000ffff7fff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000004fffffff7, 0x04000000ffff7fff, x1, 1280, x2)

inst_114:
// rs2_w0_val == -33, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffffffe;  op2val:0xfffffeffffffffdf
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7ffffffffffe, 0xfffffeffffffffdf, x1, 1296, x2)

inst_115:
// rs2_w0_val == -4097, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffff9;  op2val:0x00000003ffffefff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdffffffffffffff9, 0x00000003ffffefff, x1, 1312, x2)

inst_116:
// rs1_w0_val == -257, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffffeff;  op2val:0xffbfffffffffbfff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7ffffffffeff, 0xffbfffffffffbfff, x1, 1328, x2)

inst_117:
// rs2_w0_val == -2147483648, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700002000;  op2val:0x5555555580000000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff700002000, 0x5555555580000000, x1, 1344, x2)

inst_118:
// rs2_w0_val == 536870912, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000008fffffff7;  op2val:0x0000000520000000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000008fffffff7, 0x0000000520000000, x1, 1360, x2)

inst_119:
// rs2_w0_val == 268435456, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000003;  op2val:0xfffbffff10000000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffbff00000003, 0xfffbffff10000000, x1, 1376, x2)

inst_120:
// rs2_w0_val == 33554432, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd02000000;  op2val:0xfffffffb02000000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffd02000000, 0xfffffffb02000000, x1, 1392, x2)

inst_121:
// rs1_w0_val == 134217728, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff808000000;  op2val:0xffffdfff02000000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff808000000, 0xffffdfff02000000, x1, 1408, x2)

inst_122:
// rs2_w0_val == 1024, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000004000000080;  op2val:0xffffbfff00000400
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000004000000080, 0xffffbfff00000400, x1, 1424, x2)

inst_123:
// rs1_w0_val == -262145, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000020fffbffff;  op2val:0x0000004000000006
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000020fffbffff, 0x0000004000000006, x1, 1440, x2)

inst_124:
// rs1_w0_val == -8388609, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaff7fffff;  op2val:0xfffffffdffffffdf
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaaaaaaff7fffff, 0xfffffffdffffffdf, x1, 1456, x2)

inst_125:
// rs1_w0_val == 524288, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00080000;  op2val:0x0000000320000000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffc00080000, 0x0000000320000000, x1, 1472, x2)

inst_126:
// rs1_w1_val == 16384, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000fbffffff;  op2val:0x02000000ffffff7f
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00004000fbffffff, 0x02000000ffffff7f, x1, 1488, x2)

inst_127:
// rs1_w0_val == -131073, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffdffff;  op2val:0x8000000000004000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffffffdffff, 0x8000000000004000, x1, 1504, x2)

inst_128:
// rs1_w1_val == 2048, 
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000080000000002;  op2val:0xffffffdf08000000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000080000000002, 0xffffffdf08000000, x1, 1520, x2)

inst_129:
// rs2_w1_val == 1431655765, rs1_w1_val == 65536, rs2_w0_val == 131072, rs1_w0_val == 64
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0001000000000040;  op2val:0x5555555500020000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001000000000040, 0x5555555500020000, x1, 1536, x2)

inst_130:
// rs2_w1_val == -8388609, rs1_w0_val == 8192, rs1_w1_val == -536870913, rs2_w0_val == -257
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00002000;  op2val:0xff7ffffffffffeff
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfffffff00002000, 0xff7ffffffffffeff, x1, 1552, x2)

inst_131:
// rs2_w1_val == -131073, rs2_w0_val == 524288, rs1_w0_val == -67108865
// opcode: mulsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000006fbffffff;  op2val:0xfffdffff00080000
TEST_P64_PNN_OP(mulsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000006fbffffff, 0xfffdffff00080000, x1, 1568, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 198*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
