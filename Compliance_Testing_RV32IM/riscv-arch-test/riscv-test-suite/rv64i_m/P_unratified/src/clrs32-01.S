
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the clrs32 instruction of the RISC-V RV64PZicsr extension for the clrs32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",clrs32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1==x25, rd==x12, rs1_w0_val == -2147483648, rs1_w1_val == -1431655766
// opcode: clrs32 ; op1:x25; dest:x12; op1val:0xaaaaaaaa80000000;
TEST_RD_OP( clrs32, x12, x25, 0x0000000000000000, 0xaaaaaaaa80000000, x1, 0, x6)

inst_1:
// rs1==x30, rd==x7, rs1_w1_val == 1431655765, rs1_w0_val == 262144
// opcode: clrs32 ; op1:x30; dest:x7; op1val:0x5555555500040000;
TEST_RD_OP( clrs32, x7, x30, 0x0000000000000000, 0x5555555500040000, x1, 8, x6)

inst_2:
// rs1==x4, rd==x28, rs1_w1_val == 2147483647, rs1_w0_val == 64
// opcode: clrs32 ; op1:x4; dest:x28; op1val:0x7fffffff00000040;
TEST_RD_OP( clrs32, x28, x4, 0x0000000000000000, 0x7fffffff00000040, x1, 16, x6)

inst_3:
// rs1==x3, rd==x0, rs1_w1_val == -1073741825, rs1_w0_val == 536870912
// opcode: clrs32 ; op1:x3; dest:x0; op1val:0xbfffffff20000000;
TEST_RD_OP( clrs32, x0, x3, 0x0000000000000000, 0xbfffffff20000000, x1, 24, x6)

inst_4:
// rs1==x11, rd==x5, rs1_w1_val == -536870913, rs1_w0_val == 1431655765
// opcode: clrs32 ; op1:x11; dest:x5; op1val:0xdfffffff55555555;
TEST_RD_OP( clrs32, x5, x11, 0x0000000000000000, 0xdfffffff55555555, x1, 32, x6)

inst_5:
// rs1==x23, rd==x2, rs1_w1_val == -268435457, 
// opcode: clrs32 ; op1:x23; dest:x2; op1val:0xefffffff00000040;
TEST_RD_OP( clrs32, x2, x23, 0x0000000000000000, 0xefffffff00000040, x1, 40, x6)

inst_6:
// rs1==x13, rd==x17, rs1_w1_val == -134217729, rs1_w0_val == 0
// opcode: clrs32 ; op1:x13; dest:x17; op1val:0xf7ffffff00000000;
TEST_RD_OP( clrs32, x17, x13, 0x0000000000000000, 0xf7ffffff00000000, x1, 48, x6)

inst_7:
// rs1==x27, rd==x25, rs1_w1_val == -67108865, rs1_w0_val == -5
// opcode: clrs32 ; op1:x27; dest:x25; op1val:0xfbfffffffffffffb;
TEST_RD_OP( clrs32, x25, x27, 0x0000000000000000, 0xfbfffffffffffffb, x1, 56, x6)

inst_8:
// rs1==x12, rd==x23, rs1_w1_val == -33554433, rs1_w0_val == -129
// opcode: clrs32 ; op1:x12; dest:x23; op1val:0xfdffffffffffff7f;
TEST_RD_OP( clrs32, x23, x12, 0x0000000000000000, 0xfdffffffffffff7f, x1, 64, x6)

inst_9:
// rs1==x19, rd==x21, rs1_w1_val == -16777217, rs1_w0_val == -8193
// opcode: clrs32 ; op1:x19; dest:x21; op1val:0xfeffffffffffdfff;
TEST_RD_OP( clrs32, x21, x19, 0x0000000000000000, 0xfeffffffffffdfff, x1, 72, x6)

inst_10:
// rs1==x20, rd==x11, rs1_w1_val == -8388609, rs1_w0_val == -131073
// opcode: clrs32 ; op1:x20; dest:x11; op1val:0xff7ffffffffdffff;
TEST_RD_OP( clrs32, x11, x20, 0x0000000000000000, 0xff7ffffffffdffff, x1, 80, x6)

inst_11:
// rs1==x29, rd==x14, rs1_w1_val == -4194305, 
// opcode: clrs32 ; op1:x29; dest:x14; op1val:0xffbfffff00000009;
TEST_RD_OP( clrs32, x14, x29, 0x0000000000000000, 0xffbfffff00000009, x1, 88, x6)

inst_12:
// rs1==x26, rd==x13, rs1_w1_val == -2097153, rs1_w0_val == -2049
// opcode: clrs32 ; op1:x26; dest:x13; op1val:0xffdffffffffff7ff;
TEST_RD_OP( clrs32, x13, x26, 0x0000000000000000, 0xffdffffffffff7ff, x1, 96, x6)

inst_13:
// rs1==x24, rd==x3, rs1_w1_val == -1048577, rs1_w0_val == -1048577
// opcode: clrs32 ; op1:x24; dest:x3; op1val:0xffefffffffefffff;
TEST_RD_OP( clrs32, x3, x24, 0x0000000000000000, 0xffefffffffefffff, x1, 104, x6)

inst_14:
// rs1==x21, rd==x19, rs1_w1_val == -524289, 
// opcode: clrs32 ; op1:x21; dest:x19; op1val:0xfff7ffffc0000000;
TEST_RD_OP( clrs32, x19, x21, 0x0000000000000000, 0xfff7ffffc0000000, x1, 112, x6)

inst_15:
// rs1==x28, rd==x9, rs1_w1_val == -262145, rs1_w0_val == -32769
// opcode: clrs32 ; op1:x28; dest:x9; op1val:0xfffbffffffff7fff;
TEST_RD_OP( clrs32, x9, x28, 0x0000000000000000, 0xfffbffffffff7fff, x1, 120, x6)

inst_16:
// rs1==x8, rd==x4, rs1_w1_val == -131073, rs1_w0_val == -3
// opcode: clrs32 ; op1:x8; dest:x4; op1val:0xfffdfffffffffffd;
TEST_RD_OP( clrs32, x4, x8, 0x0000000000000000, 0xfffdfffffffffffd, x1, 128, x6)

inst_17:
// rs1==x22, rd==x27, rs1_w1_val == -65537, rs1_w0_val == -1431655766
// opcode: clrs32 ; op1:x22; dest:x27; op1val:0xfffeffffaaaaaaaa;
TEST_RD_OP( clrs32, x27, x22, 0x0000000000000000, 0xfffeffffaaaaaaaa, x1, 136, x6)

inst_18:
// rs1==x15, rd==x29, rs1_w1_val == -32769, rs1_w0_val == -2
// opcode: clrs32 ; op1:x15; dest:x29; op1val:0xffff7ffffffffffe;
TEST_RD_OP( clrs32, x29, x15, 0x0000000000000000, 0xffff7ffffffffffe, x1, 144, x6)

inst_19:
// rs1==x18, rd==x31, rs1_w1_val == -16385, 
// opcode: clrs32 ; op1:x18; dest:x31; op1val:0xffffbfffffff7fff;
TEST_RD_OP( clrs32, x31, x18, 0x0000000000000000, 0xffffbfffffff7fff, x1, 152, x6)

inst_20:
// rs1==x5, rd==x10, rs1_w1_val == -8193, rs1_w0_val == 65536
// opcode: clrs32 ; op1:x5; dest:x10; op1val:0xffffdfff00010000;
TEST_RD_OP( clrs32, x10, x5, 0x0000000000000000, 0xffffdfff00010000, x1, 160, x4)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_21:
// rs1==x6, rd==x24, rs1_w1_val == -4097, 
// opcode: clrs32 ; op1:x6; dest:x24; op1val:0xffffefff00040000;
TEST_RD_OP( clrs32, x24, x6, 0x0000000000000000, 0xffffefff00040000, x3, 0, x4)

inst_22:
// rs1==x0, rd==x8, rs1_w1_val == -2049, rs1_w0_val == 4194304
// opcode: clrs32 ; op1:x0; dest:x8; op1val:0xfffff7ff00400000;
TEST_RD_OP( clrs32, x8, x0, 0x0000000000000000, 0xfffff7ff00400000, x3, 8, x4)

inst_23:
// rs1==x16, rd==x20, rs1_w1_val == -1025, rs1_w0_val == 134217728
// opcode: clrs32 ; op1:x16; dest:x20; op1val:0xfffffbff08000000;
TEST_RD_OP( clrs32, x20, x16, 0x0000000000000000, 0xfffffbff08000000, x3, 16, x4)

inst_24:
// rs1==x7, rd==x1, rs1_w1_val == -513, rs1_w0_val == -268435457
// opcode: clrs32 ; op1:x7; dest:x1; op1val:0xfffffdffefffffff;
TEST_RD_OP( clrs32, x1, x7, 0x0000000000000000, 0xfffffdffefffffff, x3, 24, x4)

inst_25:
// rs1==x9, rd==x26, rs1_w1_val == -257, rs1_w0_val == 2147483647
// opcode: clrs32 ; op1:x9; dest:x26; op1val:0xfffffeff7fffffff;
TEST_RD_OP( clrs32, x26, x9, 0x0000000000000000, 0xfffffeff7fffffff, x3, 32, x4)

inst_26:
// rs1==x17, rd==x18, rs1_w1_val == -129, 
// opcode: clrs32 ; op1:x17; dest:x18; op1val:0xffffff7ffffff7ff;
TEST_RD_OP( clrs32, x18, x17, 0x0000000000000000, 0xffffff7ffffff7ff, x3, 40, x4)

inst_27:
// rs1==x31, rd==x6, rs1_w1_val == -65, rs1_w0_val == -33
// opcode: clrs32 ; op1:x31; dest:x6; op1val:0xffffffbfffffffdf;
TEST_RD_OP( clrs32, x6, x31, 0x0000000000000000, 0xffffffbfffffffdf, x3, 48, x4)

inst_28:
// rs1==x10, rd==x30, rs1_w1_val == -33, rs1_w0_val == 8
// opcode: clrs32 ; op1:x10; dest:x30; op1val:0xffffffdf00000008;
TEST_RD_OP( clrs32, x30, x10, 0x0000000000000000, 0xffffffdf00000008, x3, 56, x4)

inst_29:
// rs1==x2, rd==x15, rs1_w1_val == -17, rs1_w0_val == -67108865
// opcode: clrs32 ; op1:x2; dest:x15; op1val:0xffffffeffbffffff;
TEST_RD_OP( clrs32, x15, x2, 0x0000000000000000, 0xffffffeffbffffff, x3, 64, x4)

inst_30:
// rs1==x1, rd==x16, rs1_w1_val == -9, 
// opcode: clrs32 ; op1:x1; dest:x16; op1val:0xfffffff7fbffffff;
TEST_RD_OP( clrs32, x16, x1, 0x0000000000000000, 0xfffffff7fbffffff, x3, 72, x4)

inst_31:
// rs1==x14, rd==x22, rs1_w1_val == -5, 
// opcode: clrs32 ; op1:x14; dest:x22; op1val:0xfffffffbffffff7f;
TEST_RD_OP( clrs32, x22, x14, 0x0000000000000000, 0xfffffffbffffff7f, x3, 80, x4)

inst_32:
// rs1_w1_val == -3, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xfffffffdfffdffff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xfffffffdfffdffff, x3, 88, x4)

inst_33:
// rs1_w1_val == -2, rs1_w0_val == 512
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xfffffffe00000200;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xfffffffe00000200, x3, 96, x4)

inst_34:
// rs1_w1_val == -2147483648, rs1_w0_val == -4097
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x80000000ffffefff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x80000000ffffefff, x3, 104, x4)

inst_35:
// rs1_w1_val == 1073741824, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x4000000000000040;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x4000000000000040, x3, 112, x4)

inst_36:
// rs1_w1_val == 536870912, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x2000000000000040;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x2000000000000040, x3, 120, x4)

inst_37:
// rs1_w1_val == 268435456, rs1_w0_val == 16
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x1000000000000010;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x1000000000000010, x3, 128, x4)

inst_38:
// rs1_w1_val == 134217728, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x8000000fffff7ff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x8000000fffff7ff, x3, 136, x4)

inst_39:
// rs1_w1_val == 67108864, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x400000055555555;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x400000055555555, x3, 144, x4)

inst_40:
// rs1_w1_val == 33554432, rs1_w0_val == -1025
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x2000000fffffbff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x2000000fffffbff, x3, 152, x4)

inst_41:
// rs1_w1_val == 16777216, rs1_w0_val == -8388609
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x1000000ff7fffff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x1000000ff7fffff, x3, 160, x4)

inst_42:
// rs1_w1_val == 8388608, rs1_w0_val == 2
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x80000000000002;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x80000000000002, x3, 168, x4)

inst_43:
// rs1_w1_val == 4194304, rs1_w0_val == 33554432
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x40000002000000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x40000002000000, x3, 176, x4)

inst_44:
// rs1_w0_val == 32, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xffffff7f00000020;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xffffff7f00000020, x3, 184, x4)

inst_45:
// rs1_w0_val == 4, rs1_w1_val == 524288
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x08000000000004;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x08000000000004, x3, 192, x4)

inst_46:
// rs1_w0_val == 1, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xf7ffffff00000001;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xf7ffffff00000001, x3, 200, x4)

inst_47:
// rs1_w0_val == -1, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xfffffff7ffffffff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xfffffff7ffffffff, x3, 208, x4)

inst_48:
// rs1_w1_val == 2097152, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x200000fffffffd;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x200000fffffffd, x3, 216, x4)

inst_49:
// rs1_w1_val == 1048576, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x10000000000009;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x10000000000009, x3, 224, x4)

inst_50:
// rs1_w1_val == 262144, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x04000000000003;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x04000000000003, x3, 232, x4)

inst_51:
// rs1_w1_val == 131072, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x020000efffffff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x020000efffffff, x3, 240, x4)

inst_52:
// rs1_w1_val == 65536, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x010000ffffffdf;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x010000ffffffdf, x3, 248, x4)

inst_53:
// rs1_w1_val == 32768, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x008000fffffffe;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x008000fffffffe, x3, 256, x4)

inst_54:
// rs1_w1_val == 16384, rs1_w0_val == 2048
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x00400000000800;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x00400000000800, x3, 264, x4)

inst_55:
// rs1_w1_val == 8192, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x00200002000000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x00200002000000, x3, 272, x4)

inst_56:
// rs1_w1_val == 4096, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x00100000400000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x00100000400000, x3, 280, x4)

inst_57:
// rs1_w1_val == 2048, rs1_w0_val == 256
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x00080000000100;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x00080000000100, x3, 288, x4)

inst_58:
// rs1_w1_val == 1024, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x000400ffffefff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x000400ffffefff, x3, 296, x4)

inst_59:
// rs1_w1_val == 512, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x000200fffffff9;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x000200fffffff9, x3, 304, x4)

inst_60:
// rs1_w1_val == 256, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x000100fffffffb;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x000100fffffffb, x3, 312, x4)

inst_61:
// rs1_w1_val == 128, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x000080fffffff6;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x000080fffffff6, x3, 320, x4)

inst_62:
// rs1_w1_val == 64, rs1_w0_val == 32768
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x00004000008000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x00004000008000, x3, 328, x4)

inst_63:
// rs1_w1_val == 32, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x00002000000000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x00002000000000, x3, 336, x4)

inst_64:
// rs1_w1_val == 16, rs1_w0_val == 16384
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x00001000004000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x00001000004000, x3, 344, x4)

inst_65:
// rs1_w1_val == 8, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x00000800000040;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x00000800000040, x3, 352, x4)

inst_66:
// rs1_w1_val == 4, rs1_w0_val == -4194305
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x000004ffbfffff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x000004ffbfffff, x3, 360, x4)

inst_67:
// rs1_w1_val == 2, rs1_w0_val == -65
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x000002ffffffbf;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x000002ffffffbf, x3, 368, x4)

inst_68:
// rs1_w1_val == 1, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x00000100004000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x00000100004000, x3, 376, x4)

inst_69:
// rs1_w1_val == 0, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x000000ff7fffff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x000000ff7fffff, x3, 384, x4)

inst_70:
// rs1_w1_val == -1, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xfffffffffffdffff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xfffffffffffdffff, x3, 392, x4)

inst_71:
// rs1_w0_val == -1073741825, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xffff7fffbfffffff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xffff7fffbfffffff, x3, 400, x4)

inst_72:
// rs1_w0_val == -536870913, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xfffffffddfffffff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xfffffffddfffffff, x3, 408, x4)

inst_73:
// rs1_w0_val == -134217729, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x040000f7ffffff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x040000f7ffffff, x3, 416, x4)

inst_74:
// rs1_w0_val == -33554433, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xfffffffdfdffffff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xfffffffdfdffffff, x3, 424, x4)

inst_75:
// rs1_w0_val == -16777217, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xffffffbffeffffff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xffffffbffeffffff, x3, 432, x4)

inst_76:
// rs1_w0_val == -2097153, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x000008ffdfffff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x000008ffdfffff, x3, 440, x4)

inst_77:
// rs1_w0_val == -524289, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x40000000fff7ffff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x40000000fff7ffff, x3, 448, x4)

inst_78:
// rs1_w0_val == -262145, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x000002fffbffff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x000002fffbffff, x3, 456, x4)

inst_79:
// rs1_w0_val == -65537, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x004000fffeffff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x004000fffeffff, x3, 464, x4)

inst_80:
// rs1_w0_val == -16385, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x000100ffffbfff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x000100ffffbfff, x3, 472, x4)

inst_81:
// rs1_w0_val == -513, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xfffffffbfffffdff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xfffffffbfffffdff, x3, 480, x4)

inst_82:
// rs1_w0_val == -257, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xfffffff7fffffeff;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xfffffff7fffffeff, x3, 488, x4)

inst_83:
// rs1_w0_val == -17, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xfffffffeffffffef;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xfffffffeffffffef, x3, 496, x4)

inst_84:
// rs1_w0_val == -9, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x1000000fffffff7;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x1000000fffffff7, x3, 504, x4)

inst_85:
// rs1_w0_val == 1073741824, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xbfffffff40000000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xbfffffff40000000, x3, 512, x4)

inst_86:
// rs1_w0_val == 268435456, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x00200010000000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x00200010000000, x3, 520, x4)

inst_87:
// rs1_w0_val == 67108864, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xffffefff04000000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xffffefff04000000, x3, 528, x4)

inst_88:
// rs1_w0_val == 16777216, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x02000001000000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x02000001000000, x3, 536, x4)

inst_89:
// rs1_w0_val == 8388608, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x00000800800000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x00000800800000, x3, 544, x4)

inst_90:
// rs1_w0_val == 2097152, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xffff7fff00200000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xffff7fff00200000, x3, 552, x4)

inst_91:
// rs1_w0_val == 1048576, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xfffffbff00100000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xfffffbff00100000, x3, 560, x4)

inst_92:
// rs1_w0_val == 524288, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x00000100080000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x00000100080000, x3, 568, x4)

inst_93:
// rs1_w0_val == 131072, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x00040000020000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x00040000020000, x3, 576, x4)

inst_94:
// rs1_w0_val == 8192, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0x00020000002000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0x00020000002000, x3, 584, x4)

inst_95:
// rs1_w0_val == 4096, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xff7fffff00001000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xff7fffff00001000, x3, 592, x4)

inst_96:
// rs1_w0_val == 1024, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xbfffffff00000400;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xbfffffff00000400, x3, 600, x4)

inst_97:
// rs1_w0_val == 128, 
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xffffffbf00000080;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xffffffbf00000080, x3, 608, x4)

inst_98:
// rs1_w1_val == -1073741825, rs1_w0_val == 536870912
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xbfffffff20000000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xbfffffff20000000, x3, 616, x4)

inst_99:
// rs1_w1_val == -2049, rs1_w0_val == 4194304
// opcode: clrs32 ; op1:x30; dest:x31; op1val:0xfffff7ff00400000;
TEST_RD_OP( clrs32, x31, x30, 0x0000000000000000, 0xfffff7ff00400000, x3, 624, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 79*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
