
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the stas16 instruction of the RISC-V RV64PZicsr extension for the stas16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",stas16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x17,signature_x17_1)

inst_0:
// rs1 == rd != rs2, rs1==x26, rs2==x21, rd==x26, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h2_val == 4096, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h3_val == 32, rs2_h1_val == 32, rs1_h3_val == 4096
// opcode: stas16 ; op1:x26; op2:x21; dest:x26; op1val:0x1000c000fffc8000;  op2val:0x20100000200009
TEST_RR_OP(stas16, x26, x26, x21, 0x0000000000000000, 0x1000c000fffc8000, 0x20100000200009, x17, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x28, rd==x2, rs1_h3_val == rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val == 256, rs2_h2_val == -65, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == -5, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == -1, rs2_h1_val == 8
// opcode: stas16 ; op1:x23; op2:x28; dest:x2; op1val:0xfffc01000003ffff;  op2val:0xfffcffbf0008fffb
TEST_RR_OP(stas16, x2, x23, x28, 0x0000000000000000, 0xfffc01000003ffff, 0xfffcffbf0008fffb, x17, 8, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x6, rs2==x6, rd==x1, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h0_val == 4096, rs2_h1_val == -129, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 32767, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == 512, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == -33
// opcode: stas16 ; op1:x6; op2:x6; dest:x1; op1val:0xfff87fffffdf1000;  op2val:0x200200ff7ffff9
TEST_RR_OP(stas16, x1, x6, x6, 0x0000000000000000, 0xfff87fffffdf1000, 0x200200ff7ffff9, x17, 16, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x24, rs2==x24, rd==x24, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h0_val == -65, rs2_h1_val == -1, rs1_h3_val == 4, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val == -2049, rs2_h0_val == 2048, rs2_h3_val == -16385, rs2_h2_val == 1
// opcode: stas16 ; op1:x24; op2:x24; dest:x24; op1val:0x04f7ff3fffffbf;  op2val:0xbfff0001ffff0800
TEST_RR_OP(stas16, x24, x24, x24, 0x0000000000000000, 0x04f7ff3fffffbf, 0xbfff0001ffff0800, x17, 24, x3)

inst_4:
// rs2 == rd != rs1, rs1==x28, rs2==x9, rd==x9, rs1_h2_val == rs2_h2_val, rs1_h1_val == 4096, rs2_h2_val == -129, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == -17, rs1_h2_val == -129, rs1_h3_val == 2048
// opcode: stas16 ; op1:x28; op2:x9; dest:x9; op1val:0x800ff7f1000fffc;  op2val:0xfffcff7f0008ffef
TEST_RR_OP(stas16, x9, x28, x9, 0x0000000000000000, 0x800ff7f1000fffc, 0xfffcff7f0008ffef, x17, 32, x3)

inst_5:
// rs1==x7, rs2==x22, rd==x14, rs1_h1_val == rs2_h1_val, rs2_h2_val == -16385, rs1_h1_val == 2048, rs1_h0_val == 1024, rs1_h3_val == -1025, rs1_h2_val == -1, rs2_h0_val == -3, rs2_h1_val == 2048, rs2_h3_val == 4
// opcode: stas16 ; op1:x7; op2:x22; dest:x14; op1val:0xfbffffff08000400;  op2val:0x04bfff0800fffd
TEST_RR_OP(stas16, x14, x7, x22, 0x0000000000000000, 0xfbffffff08000400, 0x04bfff0800fffd, x17, 40, x3)

inst_6:
// rs1==x21, rs2==x18, rd==x7, rs1_h0_val == rs2_h0_val, rs2_h2_val == -1025, rs2_h0_val == -4097, rs1_h3_val == -8193, rs1_h1_val == -1, rs1_h0_val == -4097, rs1_h2_val == -3
// opcode: stas16 ; op1:x21; op2:x18; dest:x7; op1val:0xdffffffdffffefff;  op2val:0x04fbfffff6efff
TEST_RR_OP(stas16, x7, x21, x18, 0x0000000000000000, 0xdffffffdffffefff, 0x04fbfffff6efff, x17, 48, x3)

inst_7:
// rs1==x10, rs2==x8, rd==x0, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 1, rs1_h3_val == 21845, rs1_h0_val == 4, rs2_h0_val == 16384, rs2_h3_val == 1, rs2_h2_val == 8, rs1_h2_val == -2
// opcode: stas16 ; op1:x10; op2:x8; dest:x0; op1val:0x5555fffeffdf0004;  op2val:0x01000800014000
TEST_RR_OP(stas16, x0, x10, x8, 0x0000000000000000, 0x5555fffeffdf0004, 0x01000800014000, x17, 56, x3)

inst_8:
// rs1==x27, rs2==x14, rd==x31, rs2_h3_val == -21846, rs2_h0_val == 64, rs1_h1_val == 512, rs1_h3_val == -33, rs2_h1_val == 4096
// opcode: stas16 ; op1:x27; op2:x14; dest:x31; op1val:0xffdfffff0200efff;  op2val:0xaaaafffa10000040
TEST_RR_OP(stas16, x31, x27, x14, 0x0000000000000000, 0xffdfffff0200efff, 0xaaaafffa10000040, x17, 64, x3)

inst_9:
// rs1==x16, rs2==x13, rd==x5, rs2_h3_val == 21845, rs1_h1_val == -32768, rs1_h0_val == 16384, rs1_h2_val == 64, rs2_h1_val == -2049, rs2_h2_val == 16
// opcode: stas16 ; op1:x16; op2:x13; dest:x5; op1val:0x03004080004000;  op2val:0x55550010f7ff4000
TEST_RR_OP(stas16, x5, x16, x13, 0x0000000000000000, 0x03004080004000, 0x55550010f7ff4000, x17, 72, x3)

inst_10:
// rs1==x12, rs2==x20, rd==x21, rs2_h3_val == 32767, rs2_h1_val == -513, rs1_h1_val == -16385, rs2_h0_val == 1, rs1_h0_val == -5
// opcode: stas16 ; op1:x12; op2:x20; dest:x21; op1val:0x073fffbffffffb;  op2val:0x7fff0008fdff0001
TEST_RR_OP(stas16, x21, x12, x20, 0x0000000000000000, 0x073fffbffffffb, 0x7fff0008fdff0001, x17, 80, x3)

inst_11:
// rs1==x11, rs2==x15, rd==x4, rs2_h3_val == -8193, rs1_h1_val == 4, rs1_h2_val == 4096, rs1_h0_val == -3, rs2_h0_val == 128
// opcode: stas16 ; op1:x11; op2:x15; dest:x4; op1val:0xc00010000004fffd;  op2val:0xdfffffbf00050080
TEST_RR_OP(stas16, x4, x11, x15, 0x0000000000000000, 0xc00010000004fffd, 0xdfffffbf00050080, x17, 88, x3)

inst_12:
// rs1==x4, rs2==x10, rd==x29, rs2_h3_val == -4097, rs2_h0_val == -33, rs1_h2_val == -4097, rs1_h3_val == -65, rs1_h0_val == 64
// opcode: stas16 ; op1:x4; op2:x10; dest:x29; op1val:0xffbfefff00090040;  op2val:0xefff0008fff8ffdf
TEST_RR_OP(stas16, x29, x4, x10, 0x0000000000000000, 0xffbfefff00090040, 0xefff0008fff8ffdf, x17, 96, x3)

inst_13:
// rs1==x3, rs2==x7, rd==x27, rs2_h3_val == -2049, rs1_h2_val == -16385, rs2_h1_val == -3, rs1_h3_val == -257, rs2_h2_val == 1024
// opcode: stas16 ; op1:x3; op2:x7; dest:x27; op1val:0xfeffbfff00090005;  op2val:0xf7ff0400fffd0007
TEST_RR_OP(stas16, x27, x3, x7, 0x0000000000000000, 0xfeffbfff00090005, 0xf7ff0400fffd0007, x17, 104, x14)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_14:
// rs1==x8, rs2==x5, rd==x3, rs2_h3_val == -1025, rs2_h1_val == -5, rs1_h1_val == -17, rs2_h0_val == 21845, rs2_h2_val == 0
// opcode: stas16 ; op1:x8; op2:x5; dest:x3; op1val:0x030007ffeffff6;  op2val:0xfbff0000fffb5555
TEST_RR_OP(stas16, x3, x8, x5, 0x0000000000000000, 0x030007ffeffff6, 0xfbff0000fffb5555, x6, 0, x14)

inst_15:
// rs1==x0, rs2==x12, rd==x23, rs2_h3_val == -513, rs1_h3_val == 1, rs2_h2_val == -9, rs2_h0_val == -32768, rs1_h2_val == -65, rs1_h0_val == -257, rs1_h1_val == -9
// opcode: stas16 ; op1:x0; op2:x12; dest:x23; op1val:0x01ffbffff7feff;  op2val:0xfdfffff7ff7f8000
TEST_RR_OP(stas16, x23, x0, x12, 0x0000000000000000, 0x01ffbffff7feff, 0xfdfffff7ff7f8000, x6, 8, x14)

inst_16:
// rs1==x13, rs2==x31, rd==x28, rs2_h3_val == -257, rs1_h3_val == -3, rs1_h1_val == 128
// opcode: stas16 ; op1:x13; op2:x31; dest:x28; op1val:0xfffdfffa00808000;  op2val:0xfeff001010000001
TEST_RR_OP(stas16, x28, x13, x31, 0x0000000000000000, 0xfffdfffa00808000, 0xfeff001010000001, x6, 16, x14)

inst_17:
// rs1==x17, rs2==x16, rd==x11, rs2_h3_val == -129, rs2_h2_val == -8193, rs1_h0_val == -2, rs1_h3_val == 8, rs1_h1_val == 256, rs2_h1_val == -65, rs2_h0_val == -9
// opcode: stas16 ; op1:x17; op2:x16; dest:x11; op1val:0x08f7ff0100fffe;  op2val:0xff7fdfffffbffff7
TEST_RR_OP(stas16, x11, x17, x16, 0x0000000000000000, 0x08f7ff0100fffe, 0xff7fdfffffbffff7, x6, 24, x14)

inst_18:
// rs1==x30, rs2==x0, rd==x13, rs2_h3_val == -65, rs1_h3_val == 32, rs1_h1_val == 21845, rs1_h2_val == -9, rs2_h0_val == 2
// opcode: stas16 ; op1:x30; op2:x0; dest:x13; op1val:0x20fff75555fffd;  op2val:0xffbf000000030002
TEST_RR_OP(stas16, x13, x30, x0, 0x0000000000000000, 0x20fff75555fffd, 0xffbf000000030002, x6, 32, x14)

inst_19:
// rs1==x25, rs2==x29, rd==x12, rs2_h3_val == -33, rs1_h3_val == 1024, rs1_h0_val == 8192, rs2_h2_val == -5, rs2_h0_val == -257
// opcode: stas16 ; op1:x25; op2:x29; dest:x12; op1val:0x4000006fffa2000;  op2val:0xffdffffbfffcfeff
TEST_RR_OP(stas16, x12, x25, x29, 0x0000000000000000, 0x4000006fffa2000, 0xffdffffbfffcfeff, x6, 40, x14)

inst_20:
// rs1==x31, rs2==x19, rd==x22, rs2_h3_val == -17, rs1_h3_val == 256, rs2_h2_val == 4, rs1_h0_val == 2
// opcode: stas16 ; op1:x31; op2:x19; dest:x22; op1val:0x100f7ff00070002;  op2val:0xffef0004ffbffff6
TEST_RR_OP(stas16, x22, x31, x19, 0x0000000000000000, 0x100f7ff00070002, 0xffef0004ffbffff6, x6, 48, x14)

inst_21:
// rs1==x29, rs2==x11, rd==x18, rs2_h3_val == -9, 
// opcode: stas16 ; op1:x29; op2:x11; dest:x18; op1val:0x3fff0040ffff0005;  op2val:0xfff7bffffffbffef
TEST_RR_OP(stas16, x18, x29, x11, 0x0000000000000000, 0x3fff0040ffff0005, 0xfff7bffffffbffef, x6, 56, x14)

inst_22:
// rs1==x18, rs2==x30, rd==x20, rs2_h3_val == -5, rs2_h0_val == -65, rs2_h2_val == 8192, rs2_h1_val == 128, rs1_h1_val == 32
// opcode: stas16 ; op1:x18; op2:x30; dest:x20; op1val:0x03ffbf00200003;  op2val:0xfffb20000080ffbf
TEST_RR_OP(stas16, x20, x18, x30, 0x0000000000000000, 0x03ffbf00200003, 0xfffb20000080ffbf, x6, 64, x14)

inst_23:
// rs1==x5, rs2==x1, rd==x10, rs2_h3_val == -3, rs1_h3_val == -2, rs2_h1_val == 21845, rs1_h2_val == 1
// opcode: stas16 ; op1:x5; op2:x1; dest:x10; op1val:0xfffe00013ffffffa;  op2val:0xfffd04005555fffd
TEST_RR_OP(stas16, x10, x5, x1, 0x0000000000000000, 0xfffe00013ffffffa, 0xfffd04005555fffd, x6, 72, x14)

inst_24:
// rs1==x19, rs2==x23, rd==x15, rs2_h3_val == -2, rs1_h3_val == 512, rs2_h2_val == -2049, rs1_h2_val == 1024, rs2_h1_val == -9
// opcode: stas16 ; op1:x19; op2:x23; dest:x15; op1val:0x200040008000006;  op2val:0xfffef7fffff70003
TEST_RR_OP(stas16, x15, x19, x23, 0x0000000000000000, 0x200040008000006, 0xfffef7fffff70003, x6, 80, x14)

inst_25:
// rs1==x20, rs2==x3, rd==x17, rs2_h3_val == -32768, rs2_h2_val == -257, rs1_h2_val == 16, rs1_h3_val == -2049, rs1_h1_val == 2, rs2_h1_val == 8192
// opcode: stas16 ; op1:x20; op2:x3; dest:x17; op1val:0xf7ff00100002fff8;  op2val:0x8000feff20003fff
TEST_RR_OP(stas16, x17, x20, x3, 0x0000000000000000, 0xf7ff00100002fff8, 0x8000feff20003fff, x6, 88, x14)

inst_26:
// rs1==x2, rs2==x4, rd==x19, rs2_h3_val == 16384, rs2_h2_val == 64, rs2_h1_val == 4, rs1_h0_val == 32767
// opcode: stas16 ; op1:x2; op2:x4; dest:x19; op1val:0xfff6fff7fffa7fff;  op2val:0x4000004000045555
TEST_RR_OP(stas16, x19, x2, x4, 0x0000000000000000, 0xfff6fff7fffa7fff, 0x4000004000045555, x6, 96, x14)

inst_27:
// rs1==x15, rs2==x17, rd==x8, rs2_h3_val == 8192, rs2_h2_val == -33, rs1_h2_val == 21845, rs1_h3_val == 8192, rs2_h1_val == 512
// opcode: stas16 ; op1:x15; op2:x17; dest:x8; op1val:0x2000555501008000;  op2val:0x2000ffdf02000007
TEST_RR_OP(stas16, x8, x15, x17, 0x0000000000000000, 0x2000555501008000, 0x2000ffdf02000007, x6, 104, x14)

inst_28:
// rs1==x9, rs2==x26, rd==x25, rs2_h3_val == 4096, rs1_h3_val == 16, rs2_h1_val == 16
// opcode: stas16 ; op1:x9; op2:x26; dest:x25; op1val:0x10fff701000002;  op2val:0x1000f7ff0010fff9
TEST_RR_OP(stas16, x25, x9, x26, 0x0000000000000000, 0x10fff701000002, 0x1000f7ff0010fff9, x6, 112, x14)

inst_29:
// rs1==x14, rs2==x25, rd==x30, rs2_h3_val == 2048, rs2_h1_val == 2, rs2_h0_val == 16, rs1_h0_val == 0, rs2_h2_val == 128, rs1_h3_val == 16384, rs1_h2_val == -32768
// opcode: stas16 ; op1:x14; op2:x25; dest:x30; op1val:0x4000800000200000;  op2val:0x800008000020010
TEST_RR_OP(stas16, x30, x14, x25, 0x0000000000000000, 0x4000800000200000, 0x800008000020010, x6, 120, x4)

inst_30:
// rs1==x22, rs2==x27, rd==x16, rs2_h3_val == 1024, 
// opcode: stas16 ; op1:x22; op2:x27; dest:x16; op1val:0xffbf100000034000;  op2val:0x400ff7ffff7ffef
TEST_RR_OP(stas16, x16, x22, x27, 0x0000000000000000, 0xffbf100000034000, 0x400ff7ffff7ffef, x6, 128, x4)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_31:
// rs1==x1, rs2==x2, rd==x6, rs2_h3_val == 512, rs2_h1_val == -32768, rs2_h0_val == 8
// opcode: stas16 ; op1:x1; op2:x2; dest:x6; op1val:0x100003fffcfff9;  op2val:0x200000680000008
TEST_RR_OP(stas16, x6, x1, x2, 0x0000000000000000, 0x100003fffcfff9, 0x200000680000008, x3, 0, x4)

inst_32:
// rs2_h3_val == 256, rs1_h1_val == -513, rs1_h3_val == -1, rs1_h0_val == 16, rs2_h0_val == -129
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0010fdff0010;  op2val:0x10000070004ff7f
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xffff0010fdff0010, 0x10000070004ff7f, x3, 8, x4)

inst_33:
// rs2_h3_val == 128, rs1_h1_val == 1024, rs1_h2_val == 8192, rs1_h3_val == 128, rs1_h0_val == -16385
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x8020000400bfff;  op2val:0x80004000080003
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x8020000400bfff, 0x80004000080003, x3, 16, x4)

inst_34:
// rs1_h1_val == -5, rs1_h0_val == -9, rs2_h3_val == 8
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x06fff7fffbfff7;  op2val:0x083fffffff4000
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x06fff7fffbfff7, 0x083fffffff4000, x3, 24, x4)

inst_35:
// rs1_h1_val == -3, rs2_h1_val == 1024, rs1_h3_val == -513, rs1_h0_val == 512, rs1_h2_val == 4
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0004fffd0200;  op2val:0x4000ff7f0400fff9
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xfdff0004fffd0200, 0x4000ff7f0400fff9, x3, 32, x4)

inst_36:
// rs1_h1_val == -2, rs1_h2_val == -257
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fefffffe7fff;  op2val:0x202000fffbfffb
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x09fefffffe7fff, 0x202000fffbfffb, x3, 40, x4)

inst_37:
// rs1_h1_val == 16384, rs2_h1_val == 256, rs1_h3_val == -4097, rs1_h0_val == -21846, rs2_h0_val == 512
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff10004000aaaa;  op2val:0xfffcdfff01000200
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xefff10004000aaaa, 0xfffcdfff01000200, x3, 48, x4)

inst_38:
// rs1_h1_val == 8192, rs2_h1_val == -257, rs2_h0_val == 0
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff97fff2000efff;  op2val:0xfffdffbffeff0000
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xfff97fff2000efff, 0xfffdffbffeff0000, x3, 56, x4)

inst_39:
// rs1_h1_val == 64, rs2_h2_val == -3, rs2_h0_val == 32767
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fff80040fff9;  op2val:0xf7fffffdfffa7fff
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x04fff80040fff9, 0xf7fffffdfffa7fff, x3, 64, x4)

inst_40:
// rs1_h1_val == 16, rs1_h2_val == 16384, rs1_h0_val == -33, rs2_h0_val == 8192
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff40000010ffdf;  op2val:0x080080fffb2000
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xffff40000010ffdf, 0x080080fffb2000, x3, 72, x4)

inst_41:
// rs1_h1_val == 8, rs2_h1_val == -1025
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ff7f00080040;  op2val:0xfffd0007fbffffbf
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xfff6ff7f00080040, 0xfffd0007fbffffbf, x3, 80, x4)

inst_42:
// rs1_h1_val == 1, rs2_h0_val == -1
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc00030001ffbf;  op2val:0xfffbfbfffbffffff
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xfffc00030001ffbf, 0xfffbfbfffbffffff, x3, 88, x4)

inst_43:
// rs1_h1_val == 0, rs2_h3_val == 2, rs2_h0_val == -8193, rs1_h2_val == -17
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffef00001000;  op2val:0x020007fffddfff
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xfff6ffef00001000, 0x020007fffddfff, x3, 96, x4)

inst_44:
// rs1_h0_val == 21845, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fff801005555;  op2val:0x8000ffdffff7fff6
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x200fff801005555, 0x8000ffdffff7fff6, x3, 104, x4)

inst_45:
// rs1_h0_val == -8193, rs2_h3_val == 16
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff04000080dfff;  op2val:0x10ff7f00098000
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xfbff04000080dfff, 0x10ff7f00098000, x3, 112, x4)

inst_46:
// rs1_h0_val == -2049, rs2_h1_val == 0, rs2_h2_val == -2
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffcfffff7ff;  op2val:0xaaaafffe0000fffc
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x3ffffffcfffff7ff, 0xaaaafffe0000fffc, x3, 120, x4)

inst_47:
// rs1_h0_val == -1025, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000104000fbff;  op2val:0xfff6ffbffffbffbf
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x80000104000fbff, 0xfff6ffbffffbffbf, x3, 128, x4)

inst_48:
// rs1_h0_val == -513, rs2_h2_val == 2048, rs1_h2_val == 0
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000c000fdff;  op2val:0xfff6080020004000
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xc0000000c000fdff, 0xfff6080020004000, x3, 136, x4)

inst_49:
// rs1_h0_val == -129, rs1_h2_val == 2
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff00020006ff7f;  op2val:0xaaaaff7f00010000
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xffff00020006ff7f, 0xaaaaff7f00010000, x3, 144, x4)

inst_50:
// rs1_h0_val == -17, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0002fff9ffef;  op2val:0x03fbfffdff0006
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xffbf0002fff9ffef, 0x03fbfffdff0006, x3, 152, x4)

inst_51:
// rs1_h0_val == 2048, rs2_h1_val == -2, rs1_h1_val == -65
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffcffbf0800;  op2val:0x1000f7fffffeffef
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xfbfffffcffbf0800, 0x1000f7fffffeffef, x3, 160, x4)

inst_52:
// rs1_h0_val == 256, rs1_h2_val == -5, rs2_h3_val == -1
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffb80000100;  op2val:0xffff000104000005
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xffbffffb80000100, 0xffff000104000005, x3, 168, x4)

inst_53:
// rs1_h0_val == 128, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff04003fff0080;  op2val:0x7fff0000fff6fffb
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x3fff04003fff0080, 0x7fff0000fff6fffb, x3, 176, x4)

inst_54:
// rs1_h0_val == 32, rs1_h1_val == -1025, rs1_h2_val == 512
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0200fbff0020;  op2val:0x3ffffbff00060200
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xffbf0200fbff0020, 0x3ffffbff00060200, x3, 184, x4)

inst_55:
// rs1_h0_val == 8, rs2_h2_val == 21845
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x03040008000008;  op2val:0xfeff5555fefffeff
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x03040008000008, 0xfeff5555fefffeff, x3, 192, x4)

inst_56:
// rs2_h0_val == -21846, rs1_h1_val == 32767
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffa7fff0004;  op2val:0xc000ffdffffcaaaa
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xfefffffa7fff0004, 0xc000ffdffffcaaaa, x3, 200, x4)

inst_57:
// rs2_h0_val == -16385, rs2_h1_val == 16384
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x030005ffbf0003;  op2val:0xfdff00034000bfff
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x030005ffbf0003, 0xfdff00034000bfff, x3, 208, x4)

inst_58:
// rs2_h0_val == -2049, rs2_h1_val == -21846
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffff7f3fff0100;  op2val:0xeffffffdaaaaf7ff
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xfeffff7f3fff0100, 0xeffffffdaaaaf7ff, x3, 216, x4)

inst_59:
// rs2_h0_val == -1025, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0300073ffffffc;  op2val:0xaaaafff70009fbff
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x0300073ffffffc, 0xaaaafff70009fbff, x3, 224, x4)

inst_60:
// rs2_h0_val == -513, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfeffffff93fff;  op2val:0x4001000fff7fdff
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xffbfeffffff93fff, 0x4001000fff7fdff, x3, 232, x4)

inst_61:
// rs2_h0_val == -2, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60007fffd2000;  op2val:0x0100063ffffffe
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xfff60007fffd2000, 0x0100063ffffffe, x3, 240, x4)

inst_62:
// rs2_h0_val == 4096, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x04000300053fff;  op2val:0x20000308001000
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x04000300053fff, 0x20000308001000, x3, 248, x4)

inst_63:
// rs2_h0_val == 1024, rs1_h1_val == -129
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffcff7f0400;  op2val:0x40000003fff0400
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x2000fffcff7f0400, 0x40000003fff0400, x3, 256, x4)

inst_64:
// rs2_h0_val == 256, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffeffffafdff;  op2val:0xf7ff0800ff7f0100
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xfbffffeffffafdff, 0xf7ff0800ff7f0100, x3, 264, x4)

inst_65:
// rs2_h0_val == 32, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0000fff83fff;  op2val:0x08c000feff0020
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xfbff0000fff83fff, 0x08c000feff0020, x3, 272, x4)

inst_66:
// rs2_h0_val == 4, rs1_h1_val == -257
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x010009fefffbff;  op2val:0xffbf020010000004
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x010009fefffbff, 0xffbf020010000004, x3, 280, x4)

inst_67:
// rs1_h3_val == -21846, rs1_h2_val == 8, rs1_h0_val == 1
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000800200001;  op2val:0xfffeff7f0000fff6
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xaaaa000800200001, 0xfffeff7f0000fff6, x3, 288, x4)

inst_68:
// rs1_h3_val == 32767, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0002fdfffdff;  op2val:0xfbfffffefff9dfff
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x7fff0002fdfffdff, 0xfbfffffefff9dfff, x3, 296, x4)

inst_69:
// rs1_h3_val == -16385, rs2_h2_val == 2
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffef2000fdff;  op2val:0xfffb0002fffb0001
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xbfffffef2000fdff, 0xfffb0002fffb0001, x3, 304, x4)

inst_70:
// rs1_h3_val == -129, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fff7f0000aaaa;  op2val:0xfff95555fbff0004
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xff7fff7f0000aaaa, 0xfff95555fbff0004, x3, 312, x4)

inst_71:
// rs2_h3_val == 64, rs2_h2_val == -17
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0100fffcfbff;  op2val:0x40ffef00093fff
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x7fff0100fffcfbff, 0x40ffef00093fff, x3, 320, x4)

inst_72:
// rs1_h3_val == -17, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffff7fbff;  op2val:0x100008f7ff0005
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xffeffffffff7fbff, 0x100008f7ff0005, x3, 328, x4)

inst_73:
// rs1_h3_val == -9, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00800008;  op2val:0xfffb004000010100
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00800008, 0xfffb004000010100, x3, 336, x4)

inst_74:
// rs1_h3_val == -5, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb3fffffffffff;  op2val:0x0710003fff0007
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xfffb3fffffffffff, 0x0710003fff0007, x3, 344, x4)

inst_75:
// rs2_h3_val == 0, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeff7ffff7fffbf;  op2val:0x000080fff9fff9
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xffeff7ffff7fffbf, 0x000080fff9fff9, x3, 352, x4)

inst_76:
// rs1_h3_val == -32768, rs2_h1_val == -16385
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x800000020800fff8;  op2val:0x2000400bffffff8
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x800000020800fff8, 0x2000400bffffff8, x3, 360, x4)

inst_77:
// rs2_h2_val == -4097, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb800010003fff;  op2val:0x10effffbff0002
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xfffb800010003fff, 0x10effffbff0002, x3, 368, x4)

inst_78:
// rs1_h3_val == 64, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x405555fffc0009;  op2val:0x3fffffdffffffff9
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x405555fffc0009, 0x3fffffdffffffff9, x3, 376, x4)

inst_79:
// rs2_h2_val == -513, rs1_h2_val == 32
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000020fffc0009;  op2val:0x40fdfffffc0010
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x2000020fffc0009, 0x40fdfffffc0010, x3, 384, x4)

inst_80:
// rs1_h3_val == 2, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x021000fffc2000;  op2val:0xff7fffbf0000fffa
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x021000fffc2000, 0xff7fffbf0000fffa, x3, 392, x4)

inst_81:
// rs1_h3_val == 0, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fffafff6fffd;  op2val:0xfeff10000800ffdf
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x00fffafff6fffd, 0xfeff10000800ffdf, x3, 400, x4)

inst_82:
// rs1_h2_val == -21846, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfaaaa02000040;  op2val:0x0900030003ffdf
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xffbfaaaa02000040, 0x0900030003ffdf, x3, 408, x4)

inst_83:
// rs2_h2_val == -32768, rs2_h1_val == -33
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffff2000fffa;  op2val:0xfff88000ffdf0100
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x02ffff2000fffa, 0xfff88000ffdf0100, x3, 416, x4)

inst_84:
// rs2_h2_val == 16384, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffefff02000800;  op2val:0x07400002000003
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xf7ffefff02000800, 0x07400002000003, x3, 424, x4)

inst_85:
// rs1_h2_val == -8193, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffedfff00807fff;  op2val:0x10f7fffffdffdf
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xfffedfff00807fff, 0x10f7fffffdffdf, x3, 432, x4)

inst_86:
// rs1_h2_val == -1025, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fbfffff70080;  op2val:0xaaaa0001f7ff0003
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x08fbfffff70080, 0xaaaa0001f7ff0003, x3, 440, x4)

inst_87:
// rs1_h2_val == -513, rs2_h2_val == -21846
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fdff00800010;  op2val:0xfffdaaaa0002fff6
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x05fdff00800010, 0xfffdaaaa0002fff6, x3, 448, x4)

inst_88:
// rs2_h2_val == 256, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffbf00014000;  op2val:0xfff60100fffd0006
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xffefffbf00014000, 0xfff60100fffd0006, x3, 456, x4)

inst_89:
// rs2_h2_val == -1, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0004fff80007;  op2val:0xfbffffff0009fffe
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xfffb0004fff80007, 0xfbffffff0009fffe, x3, 464, x4)

inst_90:
// rs2_h2_val == 32, rs1_h1_val == -4097
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffdffeffffffd;  op2val:0xfff900203fff0200
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xffeffdffeffffffd, 0xfff900203fff0200, x3, 472, x4)

inst_91:
// rs2_h1_val == 32767, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf00000006ffbf;  op2val:0x4000bfff7ffffff6
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xffdf00000006ffbf, 0x4000bfff7ffffff6, x3, 480, x4)

inst_92:
// rs1_h2_val == 2048, rs2_h1_val == -8193
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x1008000007fff6;  op2val:0x2000100dfff3fff
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x1008000007fff6, 0x2000100dfff3fff, x3, 488, x4)

inst_93:
// rs2_h1_val == -4097, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffbffc0000020;  op2val:0xffdffffeeffffff9
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xffbffbffc0000020, 0xffdffffeeffffff9, x3, 496, x4)

inst_94:
// rs1_h2_val == 128, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0080ff7f0100;  op2val:0xffff55550100ffbf
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xf7ff0080ff7f0100, 0xffff55550100ffbf, x3, 504, x4)

inst_95:
// rs1_h1_val == -21846, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0040aaaa0008;  op2val:0xfff6fffd00200008
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xbfff0040aaaa0008, 0xfff6fffd00200008, x3, 512, x4)

inst_96:
// rs1_h1_val == -8193, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x804000dfff0020;  op2val:0x400001004000010
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x804000dfff0020, 0x400001004000010, x3, 520, x4)

inst_97:
// rs1_h1_val == -2049, rs2_h1_val == -17
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff9f7fffff9;  op2val:0xfffd0080ffefc000
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x7ffffff9f7fffff9, 0xfffd0080ffefc000, x3, 528, x4)

inst_98:
// rs1_h2_val == -33, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffdffbfffff6;  op2val:0xff7f400000060400
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xffefffdffbfffff6, 0xff7f400000060400, x3, 536, x4)

inst_99:
// rs2_h1_val == 64, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fffebffffdff;  op2val:0x09008000400000
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x100fffebffffdff, 0x09008000400000, x3, 544, x4)

inst_100:
// rs2_h2_val == 32767, 
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff6c0000000;  op2val:0x107fff00080200
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xffbffff6c0000000, 0x107fff00080200, x3, 552, x4)

inst_101:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h0_val == 4096, rs2_h1_val == -129, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 32767, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == 512, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == -33
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff87fffffdf1000;  op2val:0x200200ff7ffff9
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0xfff87fffffdf1000, 0x200200ff7ffff9, x3, 560, x4)

inst_102:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h0_val == -65, rs2_h1_val == -1, rs1_h3_val == 4, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val == -2049, rs2_h0_val == 2048, rs2_h3_val == -16385, rs2_h2_val == 1
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x04f7ff3fffffbf;  op2val:0xbfff0001ffff0800
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x04f7ff3fffffbf, 0xbfff0001ffff0800, x3, 568, x4)

inst_103:
// rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 1, rs1_h3_val == 21845, rs1_h0_val == 4, rs2_h0_val == 16384, rs2_h3_val == 1, rs2_h2_val == 8, rs1_h2_val == -2
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffeffdf0004;  op2val:0x01000800014000
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x5555fffeffdf0004, 0x01000800014000, x3, 576, x4)

inst_104:
// rs2_h3_val == -513, rs1_h3_val == 1, rs2_h2_val == -9, rs2_h0_val == -32768, rs1_h2_val == -65, rs1_h0_val == -257, rs1_h1_val == -9
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ffbffff7feff;  op2val:0xfdfffff7ff7f8000
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x01ffbffff7feff, 0xfdfffff7ff7f8000, x3, 584, x4)

inst_105:
// rs2_h3_val == -65, rs1_h3_val == 32, rs1_h1_val == 21845, rs1_h2_val == -9, rs2_h0_val == 2
// opcode: stas16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fff75555fffd;  op2val:0xffbf000000030002
TEST_RR_OP(stas16, x31, x30, x29, 0x0000000000000000, 0x20fff75555fffd, 0xffbf000000030002, x3, 592, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x17_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x17_1:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 75*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
