
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ksub32 instruction of the RISC-V RV64PZicsr extension for the ksub32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ksub32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x14,signature_x14_1)

inst_0:
// rs1 == rd != rs2, rs1==x3, rs2==x1, rd==x3, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs2_w0_val == 8192, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w1_val == 256, rs2_w1_val == 33554432
// opcode: ksub32 ; op1:x3; op2:x1; dest:x3; op1val:0x00010080000000;  op2val:0x200000000002000
TEST_PKRR_OP(ksub32, x3, x3, x1, 0x0000000000000000, 0x00010080000000, 0x200000000002000, x3, x14, 0, x18)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x6, rd==x0, rs1_w1_val == rs2_w1_val, rs1_w0_val == -5, rs2_w1_val == 2097152, rs2_w0_val == 1073741824, rs1_w1_val == 2097152
// opcode: ksub32 ; op1:x23; op2:x6; dest:x0; op1val:0x200000fffffffb;  op2val:0x20000040000000
TEST_PKRR_OP(ksub32, x0, x23, x6, 0x0000000000000000, 0x200000fffffffb, 0x20000040000000, x23, x14, 16, x18)

inst_2:
// rs1 == rs2 != rd, rs1==x19, rs2==x19, rd==x23, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w1_val == -1073741825, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w1_val == 8, rs2_w0_val == -1073741825
// opcode: ksub32 ; op1:x19; op2:x19; dest:x23; op1val:0xbffffffffffffffa;  op2val:0x000008bfffffff
TEST_PKRR_OP(ksub32, x23, x19, x19, 0x0000000000000000, 0xbffffffffffffffa, 0x000008bfffffff, x19, x14, 32, x18)

inst_3:
// rs1 == rs2 == rd, rs1==x22, rs2==x22, rd==x22, rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w0_val == 67108864, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == -257, rs1_w0_val == 4
// opcode: ksub32 ; op1:x22; op2:x22; dest:x22; op1val:0xc000000000000004;  op2val:0xfffffeff04000000
TEST_PKRR_OP(ksub32, x22, x22, x22, 0x0000000000000000, 0xc000000000000004, 0xfffffeff04000000, x22, x14, 48, x18)

inst_4:
// rs2 == rd != rs1, rs1==x11, rs2==x27, rd==x27, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w1_val == 268435456, rs1_w0_val == 64, rs2_w1_val == -3, rs2_w0_val == 134217728
// opcode: ksub32 ; op1:x11; op2:x27; dest:x27; op1val:0x1000000000000040;  op2val:0xfffffffd08000000
TEST_PKRR_OP(ksub32, x27, x11, x27, 0x0000000000000000, 0x1000000000000040, 0xfffffffd08000000, x11, x14, 64, x18)

inst_5:
// rs1==x4, rs2==x16, rd==x5, rs1_w0_val == rs2_w0_val, rs2_w1_val == -1048577, rs1_w0_val == -257, rs1_w1_val == -5, rs2_w0_val == -257
// opcode: ksub32 ; op1:x4; op2:x16; dest:x5; op1val:0xfffffffbfffffeff;  op2val:0xffeffffffffffeff
TEST_PKRR_OP(ksub32, x5, x4, x16, 0x0000000000000000, 0xfffffffbfffffeff, 0xffeffffffffffeff, x4, x14, 80, x18)

inst_6:
// rs1==x5, rs2==x10, rd==x24, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w0_val == 8388608, rs2_w1_val == 67108864, rs1_w1_val == -16777217
// opcode: ksub32 ; op1:x5; op2:x10; dest:x24; op1val:0xfeffffff00800000;  op2val:0x4000000fffffff6
TEST_PKRR_OP(ksub32, x24, x5, x10, 0x0000000000000000, 0xfeffffff00800000, 0x4000000fffffff6, x5, x14, 96, x18)

inst_7:
// rs1==x12, rs2==x23, rd==x25, rs2_w1_val == -1431655766, rs2_w0_val == -3, rs1_w0_val == -1048577, rs1_w1_val == 128
// opcode: ksub32 ; op1:x12; op2:x23; dest:x25; op1val:0x000080ffefffff;  op2val:0xaaaaaaaafffffffd
TEST_PKRR_OP(ksub32, x25, x12, x23, 0x0000000000000000, 0x000080ffefffff, 0xaaaaaaaafffffffd, x12, x14, 112, x18)

inst_8:
// rs1==x7, rs2==x8, rd==x12, rs2_w1_val == 1431655765, rs2_w0_val == -16385, rs1_w0_val == 16, rs1_w1_val == -2147483648
// opcode: ksub32 ; op1:x7; op2:x8; dest:x12; op1val:0x8000000000000010;  op2val:0x55555555ffffbfff
TEST_PKRR_OP(ksub32, x12, x7, x8, 0x0000000000000000, 0x8000000000000010, 0x55555555ffffbfff, x7, x14, 128, x18)

inst_9:
// rs1==x10, rs2==x29, rd==x28, rs2_w1_val == 2147483647, rs1_w0_val == 131072, rs2_w0_val == -1431655766, rs1_w1_val == 16
// opcode: ksub32 ; op1:x10; op2:x29; dest:x28; op1val:0x00001000020000;  op2val:0x7fffffffaaaaaaaa
TEST_PKRR_OP(ksub32, x28, x10, x29, 0x0000000000000000, 0x00001000020000, 0x7fffffffaaaaaaaa, x10, x14, 144, x18)

inst_10:
// rs1==x1, rs2==x13, rd==x9, rs2_w1_val == -1073741825, rs1_w1_val == -1, rs1_w0_val == -513
// opcode: ksub32 ; op1:x1; op2:x13; dest:x9; op1val:0xfffffffffffffdff;  op2val:0xbfffffff00000003
TEST_PKRR_OP(ksub32, x9, x1, x13, 0x0000000000000000, 0xfffffffffffffdff, 0xbfffffff00000003, x1, x14, 160, x18)

inst_11:
// rs1==x13, rs2==x2, rd==x15, rs2_w1_val == -536870913, rs2_w0_val == -2147483648, rs1_w0_val == 8192
// opcode: ksub32 ; op1:x13; op2:x2; dest:x15; op1val:0xfeffffff00002000;  op2val:0xdfffffff80000000
TEST_PKRR_OP(ksub32, x15, x13, x2, 0x0000000000000000, 0xfeffffff00002000, 0xdfffffff80000000, x13, x14, 176, x18)

inst_12:
// rs1==x21, rs2==x3, rd==x17, rs2_w1_val == -268435457, rs1_w1_val == -524289, rs1_w0_val == -2097153
// opcode: ksub32 ; op1:x21; op2:x3; dest:x17; op1val:0xfff7ffffffdfffff;  op2val:0xefffffff08000000
TEST_PKRR_OP(ksub32, x17, x21, x3, 0x0000000000000000, 0xfff7ffffffdfffff, 0xefffffff08000000, x21, x14, 192, x18)

inst_13:
// rs1==x30, rs2==x17, rd==x2, rs2_w1_val == -134217729, rs1_w1_val == 0
// opcode: ksub32 ; op1:x30; op2:x17; dest:x2; op1val:0x000000fffffff8;  op2val:0xf7fffffffffffffc
TEST_PKRR_OP(ksub32, x2, x30, x17, 0x0000000000000000, 0x000000fffffff8, 0xf7fffffffffffffc, x30, x14, 208, x18)

inst_14:
// rs1==x25, rs2==x18, rd==x30, rs2_w1_val == -67108865, rs1_w0_val == -33, rs1_w1_val == 2
// opcode: ksub32 ; op1:x25; op2:x18; dest:x30; op1val:0x000002ffffffdf;  op2val:0xfbffffffffffbfff
TEST_PKRR_OP(ksub32, x30, x25, x18, 0x0000000000000000, 0x000002ffffffdf, 0xfbffffffffffbfff, x25, x14, 224, x2)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_15:
// rs1==x15, rs2==x28, rd==x29, rs2_w1_val == -33554433, rs1_w0_val == 4194304, rs2_w0_val == -8388609
// opcode: ksub32 ; op1:x15; op2:x28; dest:x29; op1val:0x3fffffff00400000;  op2val:0xfdffffffff7fffff
TEST_PKRR_OP(ksub32, x29, x15, x28, 0x0000000000000000, 0x3fffffff00400000, 0xfdffffffff7fffff, x15, x3, 0, x2)

inst_16:
// rs1==x9, rs2==x26, rd==x20, rs2_w1_val == -16777217, 
// opcode: ksub32 ; op1:x9; op2:x26; dest:x20; op1val:0x00008080000000;  op2val:0xfeffffff00000006
TEST_PKRR_OP(ksub32, x20, x9, x26, 0x0000000000000000, 0x00008080000000, 0xfeffffff00000006, x9, x3, 16, x2)

inst_17:
// rs1==x26, rs2==x15, rd==x13, rs2_w1_val == -8388609, rs1_w0_val == -1431655766, rs1_w1_val == 1024
// opcode: ksub32 ; op1:x26; op2:x15; dest:x13; op1val:0x000400aaaaaaaa;  op2val:0xff7ffffffffffff9
TEST_PKRR_OP(ksub32, x13, x26, x15, 0x0000000000000000, 0x000400aaaaaaaa, 0xff7ffffffffffff9, x26, x3, 32, x2)

inst_18:
// rs1==x0, rs2==x7, rd==x11, rs2_w1_val == -4194305, rs1_w0_val == 33554432, rs1_w1_val == -131073, rs2_w0_val == 524288
// opcode: ksub32 ; op1:x0; op2:x7; dest:x11; op1val:0xfffdffff02000000;  op2val:0xffbfffff00080000
TEST_PKRR_OP(ksub32, x11, x0, x7, 0x0000000000000000, 0xfffdffff02000000, 0xffbfffff00080000, x0, x3, 48, x2)

inst_19:
// rs1==x31, rs2==x11, rd==x6, rs2_w1_val == -2097153, rs2_w0_val == -513, rs1_w0_val == 2147483647, rs1_w1_val == -262145
// opcode: ksub32 ; op1:x31; op2:x11; dest:x6; op1val:0xfffbffff7fffffff;  op2val:0xffdffffffffffdff
TEST_PKRR_OP(ksub32, x6, x31, x11, 0x0000000000000000, 0xfffbffff7fffffff, 0xffdffffffffffdff, x31, x3, 64, x2)

inst_20:
// rs1==x24, rs2==x12, rd==x18, rs2_w1_val == -524289, rs2_w0_val == -32769, rs1_w1_val == 1
// opcode: ksub32 ; op1:x24; op2:x12; dest:x18; op1val:0x000001aaaaaaaa;  op2val:0xfff7ffffffff7fff
TEST_PKRR_OP(ksub32, x18, x24, x12, 0x0000000000000000, 0x000001aaaaaaaa, 0xfff7ffffffff7fff, x24, x3, 80, x2)

inst_21:
// rs1==x27, rs2==x24, rd==x19, rs2_w1_val == -262145, rs1_w0_val == -3, rs2_w0_val == 128
// opcode: ksub32 ; op1:x27; op2:x24; dest:x19; op1val:0xfffdfffffffffffd;  op2val:0xfffbffff00000080
TEST_PKRR_OP(ksub32, x19, x27, x24, 0x0000000000000000, 0xfffdfffffffffffd, 0xfffbffff00000080, x27, x3, 96, x2)

inst_22:
// rs1==x16, rs2==x4, rd==x26, rs2_w1_val == -131073, rs2_w0_val == 1
// opcode: ksub32 ; op1:x16; op2:x4; dest:x26; op1val:0xfff7ffff00000007;  op2val:0xfffdffff00000001
TEST_PKRR_OP(ksub32, x26, x16, x4, 0x0000000000000000, 0xfff7ffff00000007, 0xfffdffff00000001, x16, x3, 112, x2)

inst_23:
// rs1==x18, rs2==x5, rd==x10, rs2_w1_val == -65537, rs2_w0_val == 512, rs1_w0_val == 1048576
// opcode: ksub32 ; op1:x18; op2:x5; dest:x10; op1val:0x00000200100000;  op2val:0xfffeffff00000200
TEST_PKRR_OP(ksub32, x10, x18, x5, 0x0000000000000000, 0x00000200100000, 0xfffeffff00000200, x18, x3, 128, x2)

inst_24:
// rs1==x29, rs2==x25, rd==x1, rs2_w1_val == -32769, rs2_w0_val == -33, rs1_w0_val == -4097
// opcode: ksub32 ; op1:x29; op2:x25; dest:x1; op1val:0x000400ffffefff;  op2val:0xffff7fffffffffdf
TEST_PKRR_OP(ksub32, x1, x29, x25, 0x0000000000000000, 0x000400ffffefff, 0xffff7fffffffffdf, x29, x3, 144, x2)

inst_25:
// rs1==x14, rs2==x0, rd==x8, rs2_w1_val == -16385, rs1_w0_val == -1073741825
// opcode: ksub32 ; op1:x14; op2:x0; dest:x8; op1val:0xfffffffbbfffffff;  op2val:0xffffbfff00000009
TEST_PKRR_OP(ksub32, x8, x14, x0, 0x0000000000000000, 0xfffffffbbfffffff, 0xffffbfff00000009, x14, x3, 160, x2)

inst_26:
// rs1==x20, rs2==x31, rd==x4, rs2_w1_val == -8193, rs2_w0_val == 16777216, rs1_w1_val == 524288
// opcode: ksub32 ; op1:x20; op2:x31; dest:x4; op1val:0x08000000000005;  op2val:0xffffdfff01000000
TEST_PKRR_OP(ksub32, x4, x20, x31, 0x0000000000000000, 0x08000000000005, 0xffffdfff01000000, x20, x3, 176, x2)

inst_27:
// rs1==x17, rs2==x20, rd==x7, rs2_w1_val == -4097, rs2_w0_val == 4
// opcode: ksub32 ; op1:x17; op2:x20; dest:x7; op1val:0x000100fffffffd;  op2val:0xffffefff00000004
TEST_PKRR_OP(ksub32, x7, x17, x20, 0x0000000000000000, 0x000100fffffffd, 0xffffefff00000004, x17, x3, 192, x2)

inst_28:
// rs1==x8, rs2==x21, rd==x31, rs2_w1_val == -2049, rs1_w1_val == -33, rs2_w0_val == 256, rs1_w0_val == -65537
// opcode: ksub32 ; op1:x8; op2:x21; dest:x31; op1val:0xffffffdffffeffff;  op2val:0xfffff7ff00000100
TEST_PKRR_OP(ksub32, x31, x8, x21, 0x0000000000000000, 0xffffffdffffeffff, 0xfffff7ff00000100, x8, x3, 208, x4)

inst_29:
// rs1==x28, rs2==x9, rd==x14, rs2_w1_val == -1025, rs1_w0_val == 512
// opcode: ksub32 ; op1:x28; op2:x9; dest:x14; op1val:0xffffffdf00000200;  op2val:0xfffffbff01000000
TEST_PKRR_OP(ksub32, x14, x28, x9, 0x0000000000000000, 0xffffffdf00000200, 0xfffffbff01000000, x28, x3, 224, x4)

inst_30:
// rs1==x6, rs2==x14, rd==x16, rs2_w1_val == -513, rs1_w0_val == 134217728
// opcode: ksub32 ; op1:x6; op2:x14; dest:x16; op1val:0x00000108000000;  op2val:0xfffffdffffff7fff
TEST_PKRR_OP(ksub32, x16, x6, x14, 0x0000000000000000, 0x00000108000000, 0xfffffdffffff7fff, x6, x3, 240, x4)

inst_31:
// rs1==x2, rs2==x30, rd==x21, rs2_w1_val == -129, rs2_w0_val == 16384, rs1_w1_val == -3
// opcode: ksub32 ; op1:x2; op2:x30; dest:x21; op1val:0xfffffffd3fffffff;  op2val:0xffffff7f00004000
TEST_PKRR_OP(ksub32, x21, x2, x30, 0x0000000000000000, 0xfffffffd3fffffff, 0xffffff7f00004000, x2, x3, 256, x4)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs2_w1_val == -65, rs2_w0_val == -262145
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900002000;  op2val:0xffffffbffffbffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffffff900002000, 0xffffffbffffbffff, x30, x1, 0, x4)

inst_33:
// rs2_w1_val == -33, rs1_w1_val == 2048
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080080000000;  op2val:0xffffffdffffffff6
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x00080080000000, 0xffffffdffffffff6, x30, x1, 16, x4)

inst_34:
// rs2_w1_val == -17, rs1_w0_val == 16384
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00004000;  op2val:0xffffffef01000000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00004000, 0xffffffef01000000, x30, x1, 32, x4)

inst_35:
// rs2_w1_val == -9, rs1_w1_val == 32
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002080000000;  op2val:0xfffffff7c0000000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x00002080000000, 0xfffffff7c0000000, x30, x1, 48, x4)

inst_36:
// rs2_w1_val == -5, rs1_w0_val == -8193
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001ffffdfff;  op2val:0xfffffffbbfffffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x000001ffffdfff, 0xfffffffbbfffffff, x30, x1, 64, x4)

inst_37:
// rs2_w1_val == -2, rs1_w1_val == -134217729, rs1_w0_val == 1024
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000400;  op2val:0xfffffffeffff7fff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000400, 0xfffffffeffff7fff, x30, x1, 80, x4)

inst_38:
// rs2_w1_val == -2147483648, rs1_w1_val == -65, rs2_w0_val == 2147483647
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfc0000000;  op2val:0x800000007fffffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xffffffbfc0000000, 0x800000007fffffff, x30, x1, 96, x4)

inst_39:
// rs2_w1_val == 1073741824, rs1_w0_val == -2
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffffe;  op2val:0x40000000ffff7fff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfefffffffffffffe, 0x40000000ffff7fff, x30, x1, 112, x4)

inst_40:
// rs2_w1_val == 536870912, rs2_w0_val == -65537
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600004000;  op2val:0x20000000fffeffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffffff600004000, 0x20000000fffeffff, x30, x1, 128, x4)

inst_41:
// rs2_w1_val == 268435456, rs1_w0_val == 32
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000020;  op2val:0x1000000000004000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000020, 0x1000000000004000, x30, x1, 144, x4)

inst_42:
// rs2_w1_val == 134217728, rs2_w0_val == 8
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00000006;  op2val:0x800000000000008
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000006, 0x800000000000008, x30, x1, 160, x4)

inst_43:
// rs2_w1_val == 16777216, rs1_w1_val == 8388608
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffff8;  op2val:0x100000000004000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x800000fffffff8, 0x100000000004000, x30, x1, 176, x4)

inst_44:
// rs2_w1_val == 8388608, rs1_w0_val == -1025, rs2_w0_val == -1
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007fffffbff;  op2val:0x800000ffffffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x000007fffffbff, 0x800000ffffffff, x30, x1, 192, x4)

inst_45:
// rs2_w1_val == 4194304, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fffffff9;  op2val:0x4000007fffffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffffff6fffffff9, 0x4000007fffffff, x30, x1, 208, x4)

inst_46:
// rs2_w1_val == 1048576, rs1_w0_val == 4096
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00001000;  op2val:0x10000000000007
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00001000, 0x10000000000007, x30, x1, 224, x4)

inst_47:
// rs2_w1_val == 524288, rs2_w0_val == -131073
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000006;  op2val:0x080000fffdffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x00040000000006, 0x080000fffdffff, x30, x1, 240, x4)

inst_48:
// rs2_w1_val == 262144, rs2_w0_val == 268435456
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffffc;  op2val:0x04000010000000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x10000000fffffffc, 0x04000010000000, x30, x1, 256, x4)

inst_49:
// rs2_w1_val == 131072, rs1_w0_val == -32769
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffff7fff;  op2val:0x020000fffffff9
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffff7fff, 0x020000fffffff9, x30, x1, 272, x4)

inst_50:
// rs2_w1_val == 65536, rs1_w1_val == -513, rs2_w0_val == -17
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffffdf;  op2val:0x010000ffffffef
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffffdf, 0x010000ffffffef, x30, x1, 288, x4)

inst_51:
// rs2_w1_val == 32768, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000003;  op2val:0x008000fffffff8
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x8000000000000003, 0x008000fffffff8, x30, x1, 304, x4)

inst_52:
// rs2_w1_val == 16384, rs1_w1_val == 33554432
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000ffffffdf;  op2val:0x004000ffffbfff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x2000000ffffffdf, 0x004000ffffbfff, x30, x1, 320, x4)

inst_53:
// rs2_w1_val == 8192, rs1_w0_val == 65536, rs1_w1_val == 32768
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000010000;  op2val:0x00200000000003
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x00800000010000, 0x00200000000003, x30, x1, 336, x4)

inst_54:
// rs2_w1_val == 4096, rs1_w1_val == 4194304
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000010;  op2val:0x00100000000009
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x40000000000010, 0x00100000000009, x30, x1, 352, x4)

inst_55:
// rs1_w0_val == 16777216, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000001000000;  op2val:0xfffffefffffffffd
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x8000000001000000, 0xfffffefffffffffd, x30, x1, 368, x4)

inst_56:
// rs1_w0_val == 2097152, rs2_w0_val == -134217729
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00200000;  op2val:0xffff7ffff7ffffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x3fffffff00200000, 0xffff7ffff7ffffff, x30, x1, 384, x4)

inst_57:
// rs1_w0_val == 524288, rs2_w0_val == 16
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00080000;  op2val:0x04000000000010
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00080000, 0x04000000000010, x30, x1, 400, x4)

inst_58:
// rs1_w0_val == 262144, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00040000;  op2val:0xfdfffffffffffffa
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xffffffff00040000, 0xfdfffffffffffffa, x30, x1, 416, x4)

inst_59:
// rs1_w0_val == 32768, rs2_w0_val == -536870913, rs1_w1_val == -8388609
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00008000;  op2val:0xfffdffffdfffffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00008000, 0xfffdffffdfffffff, x30, x1, 432, x4)

inst_60:
// rs1_w0_val == 2048, rs1_w1_val == -536870913, rs2_w0_val == -268435457
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000800;  op2val:0xffffffdfefffffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000800, 0xffffffdfefffffff, x30, x1, 448, x4)

inst_61:
// rs1_w0_val == 256, rs2_w0_val == -1025, rs2_w1_val == 16
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000100;  op2val:0x000010fffffbff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x40000000000100, 0x000010fffffbff, x30, x1, 464, x4)

inst_62:
// rs1_w0_val == 128, rs2_w0_val == 65536, rs1_w1_val == 134217728
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000080;  op2val:0x100000000010000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x800000000000080, 0x100000000010000, x30, x1, 480, x4)

inst_63:
// rs1_w0_val == 8, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000008;  op2val:0x002000bfffffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000008, 0x002000bfffffff, x30, x1, 496, x4)

inst_64:
// rs1_w0_val == 2, rs2_w0_val == 33554432
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000002;  op2val:0x1000000002000000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x00000600000002, 0x1000000002000000, x30, x1, 512, x4)

inst_65:
// rs1_w0_val == 1, rs1_w1_val == 536870912
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000001;  op2val:0x010000fffbffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x2000000000000001, 0x010000fffbffff, x30, x1, 528, x4)

inst_66:
// rs1_w0_val == 0, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000000;  op2val:0xffffffbf04000000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x00002000000000, 0xffffffbf04000000, x30, x1, 544, x4)

inst_67:
// rs1_w0_val == -1, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000ffffffff;  op2val:0x000009fffffdff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x200000ffffffff, 0x000009fffffdff, x30, x1, 560, x4)

inst_68:
// rs2_w1_val == 2048, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010aaaaaaaa;  op2val:0x00080000000100
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x000010aaaaaaaa, 0x00080000000100, x30, x1, 576, x4)

inst_69:
// rs2_w1_val == 1024, rs1_w1_val == -4097
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000200;  op2val:0x000400fffeffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xffffefff00000200, 0x000400fffeffff, x30, x1, 592, x4)

inst_70:
// rs2_w1_val == 512, rs1_w1_val == -257
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffff6;  op2val:0x000200fffffdff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffff6, 0x000200fffffdff, x30, x1, 608, x4)

inst_71:
// rs2_w1_val == 256, rs1_w1_val == -268435457, rs1_w0_val == 1073741824
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff40000000;  op2val:0x00010000000001
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xefffffff40000000, 0x00010000000001, x30, x1, 624, x4)

inst_72:
// rs2_w1_val == 128, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000004000;  op2val:0x000080fffffbff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x20000000004000, 0x000080fffffbff, x30, x1, 640, x4)

inst_73:
// rs2_w1_val == 64, rs1_w0_val == -65
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffffffbf;  op2val:0x000040c0000000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xefffffffffffffbf, 0x000040c0000000, x30, x1, 656, x4)

inst_74:
// rs2_w1_val == 32, rs1_w1_val == -129
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00200000;  op2val:0x000020ffffffdf
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00200000, 0x000020ffffffdf, x30, x1, 672, x4)

inst_75:
// rs2_w1_val == 4, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffffffff;  op2val:0x00000400000010
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffffeffffffffff, 0x00000400000010, x30, x1, 688, x4)

inst_76:
// rs2_w1_val == 2, rs1_w1_val == -1431655766
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000006;  op2val:0x000002fffdffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000006, 0x000002fffdffff, x30, x1, 704, x4)

inst_77:
// rs2_w1_val == 1, rs1_w0_val == -262145, rs2_w0_val == 2097152
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffbffff;  op2val:0x00000100200000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x8000000fffbffff, 0x00000100200000, x30, x1, 720, x4)

inst_78:
// rs2_w1_val == 0, rs1_w0_val == 268435456
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff10000000;  op2val:0x000000ffffffdf
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffbffff10000000, 0x000000ffffffdf, x30, x1, 736, x4)

inst_79:
// rs2_w1_val == -1, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffffff8;  op2val:0xfffffffffffffff9
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffffff8, 0xfffffffffffffff9, x30, x1, 752, x4)

inst_80:
// rs2_w0_val == 1431655765, rs1_w1_val == 65536
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000040000000;  op2val:0xfffffeff55555555
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x01000040000000, 0xfffffeff55555555, x30, x1, 768, x4)

inst_81:
// rs2_w0_val == -67108865, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000010;  op2val:0xfffffff7fbffffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x00000000000010, 0xfffffff7fbffffff, x30, x1, 784, x4)

inst_82:
// rs2_w0_val == -33554433, rs1_w1_val == -2049
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00001000;  op2val:0xffffffbffdffffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00001000, 0xffffffbffdffffff, x30, x1, 800, x4)

inst_83:
// rs2_w0_val == -16777217, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff02000000;  op2val:0x000005feffffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xff7fffff02000000, 0x000005feffffff, x30, x1, 816, x4)

inst_84:
// rs2_w0_val == -4194305, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000006;  op2val:0x000009ffbfffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x2000000000000006, 0x000009ffbfffff, x30, x1, 832, x4)

inst_85:
// rs2_w0_val == -2097153, rs1_w1_val == -9, rs1_w0_val == -2049
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fffff7ff;  op2val:0x000002ffdfffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffff7ff, 0x000002ffdfffff, x30, x1, 848, x4)

inst_86:
// rs2_w0_val == -1048577, rs1_w0_val == -17, rs1_w1_val == 2147483647
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffffef;  op2val:0xffdfffffffefffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffffef, 0xffdfffffffefffff, x30, x1, 864, x4)

inst_87:
// rs2_w0_val == -524289, rs1_w0_val == -129, rs1_w1_val == 131072
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000ffffff7f;  op2val:0x000020fff7ffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x020000ffffff7f, 0x000020fff7ffff, x30, x1, 880, x4)

inst_88:
// rs2_w0_val == -8193, rs1_w0_val == -268435457
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffefffffff;  op2val:0x008000ffffdfff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xefffffffefffffff, 0x008000ffffdfff, x30, x1, 896, x4)

inst_89:
// rs2_w0_val == 262144, rs1_w1_val == 64
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000400;  op2val:0x800000000040000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x00004000000400, 0x800000000040000, x30, x1, 912, x4)

inst_90:
// rs2_w0_val == 131072, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000040;  op2val:0xffdfffff00020000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xefffffff00000040, 0xffdfffff00020000, x30, x1, 928, x4)

inst_91:
// rs2_w0_val == 32768, rs1_w1_val == 1073741824
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000080;  op2val:0x00100000008000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x4000000000000080, 0x00100000008000, x30, x1, 944, x4)

inst_92:
// rs2_w0_val == 4096, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000007;  op2val:0x8000000000001000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x2000000000000007, 0x8000000000001000, x30, x1, 960, x4)

inst_93:
// rs2_w0_val == 2048, rs1_w1_val == 67108864
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000040;  op2val:0x00080000000800
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x400000000000040, 0x00080000000800, x30, x1, 976, x4)

inst_94:
// rs2_w0_val == 1024, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffffffc;  op2val:0x00000700000400
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xeffffffffffffffc, 0x00000700000400, x30, x1, 992, x4)

inst_95:
// rs2_w0_val == 64, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000010000;  op2val:0x00000100000040
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x40000000010000, 0x00000100000040, x30, x1, 1008, x4)

inst_96:
// rs2_w0_val == 32, rs1_w0_val == -8388609
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfff7fffff;  op2val:0xfffffff600000020
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xffffffdfff7fffff, 0xfffffff600000020, x30, x1, 1024, x4)

inst_97:
// rs2_w0_val == 2, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000200;  op2val:0x04000000000002
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x1000000000000200, 0x04000000000002, x30, x1, 1040, x4)

inst_98:
// rs2_w0_val == 0, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900100000;  op2val:0xfffeffff00000000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x00000900100000, 0xfffeffff00000000, x30, x1, 1056, x4)

inst_99:
// rs1_w1_val == 1431655765, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555ffffffbf;  op2val:0xfffdfffffff7ffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x55555555ffffffbf, 0xfffdfffffff7ffff, x30, x1, 1072, x4)

inst_100:
// rs1_w1_val == -67108865, rs2_w0_val == -5
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000003;  op2val:0x000010fffffffb
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000003, 0x000010fffffffb, x30, x1, 1088, x4)

inst_101:
// rs1_w1_val == -33554433, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff80000000;  op2val:0x400000fffeffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfdffffff80000000, 0x400000fffeffff, x30, x1, 1104, x4)

inst_102:
// rs1_w1_val == -4194305, rs2_w0_val == 8388608
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000007;  op2val:0xfffeffff00800000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000007, 0xfffeffff00800000, x30, x1, 1120, x4)

inst_103:
// rs1_w1_val == -2097153, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000002;  op2val:0xfbffffff00000009
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000002, 0xfbffffff00000009, x30, x1, 1136, x4)

inst_104:
// rs1_w1_val == -1048577, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffffc;  op2val:0x00001000000800
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffffc, 0x00001000000800, x30, x1, 1152, x4)

inst_105:
// rs1_w1_val == -65537, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffffffffb;  op2val:0xfffffff900000005
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffefffffffffffb, 0xfffffff900000005, x30, x1, 1168, x4)

inst_106:
// rs1_w1_val == -32769, rs1_w0_val == 67108864
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff04000000;  op2val:0x001000fff7ffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xffff7fff04000000, 0x001000fff7ffff, x30, x1, 1184, x4)

inst_107:
// rs1_w1_val == -16385, rs2_w0_val == -129
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffff9;  op2val:0xfffbffffffffff7f
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffff9, 0xfffbffffffffff7f, x30, x1, 1200, x4)

inst_108:
// rs1_w1_val == -8193, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00001000;  op2val:0xff7ffffffbffffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00001000, 0xff7ffffffbffffff, x30, x1, 1216, x4)

inst_109:
// rs1_w1_val == -1025, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00800000;  op2val:0xfffffffcfffffffc
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00800000, 0xfffffffcfffffffc, x30, x1, 1232, x4)

inst_110:
// rs1_w1_val == 1048576, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffdfffff;  op2val:0xffffdfff02000000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x100000ffdfffff, 0xffffdfff02000000, x30, x1, 1248, x4)

inst_111:
// rs1_w1_val == 262144, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffffdff;  op2val:0x2000000000000800
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x040000fffffdff, 0x2000000000000800, x30, x1, 1264, x4)

inst_112:
// rs1_w1_val == 16384, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400008000000;  op2val:0x00000040000000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x00400008000000, 0x00000040000000, x30, x1, 1280, x4)

inst_113:
// rs1_w1_val == 8192, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000800000;  op2val:0x1000000ffffffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x00200000800000, 0x1000000ffffffff, x30, x1, 1296, x4)

inst_114:
// rs1_w1_val == 4096, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffffff9;  op2val:0xfffff7ff00000004
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x001000fffffff9, 0xfffff7ff00000004, x30, x1, 1312, x4)

inst_115:
// rs1_w1_val == 512, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200bfffffff;  op2val:0xfffffff700000020
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x000200bfffffff, 0xfffffff700000020, x30, x1, 1328, x4)

inst_116:
// rs1_w1_val == 8, rs1_w0_val == -4194305
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffbfffff;  op2val:0x080000fffbffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x000008ffbfffff, 0x080000fffbffff, x30, x1, 1344, x4)

inst_117:
// rs1_w1_val == 4, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400008000;  op2val:0xfffdffff08000000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x00000400008000, 0xfffdffff08000000, x30, x1, 1360, x4)

inst_118:
// rs1_w0_val == 1431655765, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000655555555;  op2val:0xbffffffffffffff8
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x00000655555555, 0xbffffffffffffff8, x30, x1, 1376, x4)

inst_119:
// rs1_w0_val == -536870913, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000dfffffff;  op2val:0xfffffbfffffffdff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x080000dfffffff, 0xfffffbfffffffdff, x30, x1, 1392, x4)

inst_120:
// rs1_w0_val == -134217729, rs2_w0_val == -9
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000f7ffffff;  op2val:0x10000000fffffff7
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x010000f7ffffff, 0x10000000fffffff7, x30, x1, 1408, x4)

inst_121:
// rs1_w0_val == -67108865, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafbffffff;  op2val:0x0000203fffffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafbffffff, 0x0000203fffffff, x30, x1, 1424, x4)

inst_122:
// rs1_w0_val == -33554433, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffffdffffff;  op2val:0xffffdffffffffffc
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x3ffffffffdffffff, 0xffffdffffffffffc, x30, x1, 1440, x4)

inst_123:
// rs1_w0_val == -16777217, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffffeffffff;  op2val:0x1000000ffffffdf
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffbfffffeffffff, 0x1000000ffffffdf, x30, x1, 1456, x4)

inst_124:
// rs2_w0_val == -4097, rs1_w0_val == 536870912
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000020000000;  op2val:0x10000000ffffefff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x04000020000000, 0x10000000ffffefff, x30, x1, 1472, x4)

inst_125:
// rs2_w0_val == -2049, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000020;  op2val:0xfffffff8fffff7ff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x80000000000020, 0xfffffff8fffff7ff, x30, x1, 1488, x4)

inst_126:
// rs1_w0_val == -524289, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000fff7ffff;  op2val:0x00400000000080
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x004000fff7ffff, 0x00400000000080, x30, x1, 1504, x4)

inst_127:
// rs1_w0_val == -131073, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffdffff;  op2val:0xffffffff01000000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffdffff, 0xffffffff01000000, x30, x1, 1520, x4)

inst_128:
// rs2_w0_val == -65, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000010;  op2val:0x000007ffffffbf
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000010, 0x000007ffffffbf, x30, x1, 1536, x4)

inst_129:
// rs1_w0_val == -16385, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000ffffbfff;  op2val:0xffff7fffffefffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x020000ffffbfff, 0xffff7fffffefffff, x30, x1, 1552, x4)

inst_130:
// rs1_w1_val == -17, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffdfffff;  op2val:0x4000000ffffff7f
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xffffffefffdfffff, 0x4000000ffffff7f, x30, x1, 1568, x4)

inst_131:
// rs2_w0_val == -2, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000008000;  op2val:0x000010fffffffe
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x01000000008000, 0x000010fffffffe, x30, x1, 1584, x4)

inst_132:
// rs2_w0_val == 536870912, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006fffffbff;  op2val:0xffffffbf20000000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x000006fffffbff, 0xffffffbf20000000, x30, x1, 1600, x4)

inst_133:
// rs1_w1_val == -2, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeff7fffff;  op2val:0xfffeffffffffffef
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffffffeff7fffff, 0xfffeffffffffffef, x30, x1, 1616, x4)

inst_134:
// rs2_w0_val == 1048576, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffffdfff;  op2val:0xdfffffff00100000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x004000ffffdfff, 0xdfffffff00100000, x30, x1, 1632, x4)

inst_135:
// rs2_w0_val == 4194304, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600100000;  op2val:0xdfffffff00400000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x00000600100000, 0xdfffffff00400000, x30, x1, 1648, x4)

inst_136:
// rs1_w1_val == 16777216, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000080000;  op2val:0x00004000000040
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x100000000080000, 0x00004000000040, x30, x1, 1664, x4)

inst_137:
// rs1_w0_val == -9, 
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffff7;  op2val:0xffefffff00100000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffff7, 0xffefffff00100000, x30, x1, 1680, x4)

inst_138:
// rs1_w1_val == rs2_w1_val, rs1_w0_val == -5, rs2_w1_val == 2097152, rs2_w0_val == 1073741824, rs1_w1_val == 2097152
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffffffb;  op2val:0x20000040000000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0x200000fffffffb, 0x20000040000000, x30, x1, 1696, x4)

inst_139:
// rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w1_val == -1073741825, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w1_val == 8, rs2_w0_val == -1073741825
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffffffa;  op2val:0x000008bfffffff
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xbffffffffffffffa, 0x000008bfffffff, x30, x1, 1712, x4)

inst_140:
// rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w0_val == 67108864, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == -257, rs1_w0_val == 4
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000004;  op2val:0xfffffeff04000000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xc000000000000004, 0xfffffeff04000000, x30, x1, 1728, x4)

inst_141:
// rs2_w1_val == -4194305, rs1_w0_val == 33554432, rs1_w1_val == -131073, rs2_w0_val == 524288
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff02000000;  op2val:0xffbfffff00080000
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffdffff02000000, 0xffbfffff00080000, x30, x1, 1744, x4)

inst_142:
// rs2_w1_val == -16385, rs1_w0_val == -1073741825
// opcode: ksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbbfffffff;  op2val:0xffffbfff00000009
TEST_PKRR_OP(ksub32, x31, x30, x29, 0x0000000000000000, 0xfffffffbbfffffff, 0xffffbfff00000009, x30, x1, 1760, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x14_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x14_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 222*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
