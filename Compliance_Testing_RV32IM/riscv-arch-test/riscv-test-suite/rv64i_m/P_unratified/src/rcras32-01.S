
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rcras32 instruction of the RISC-V RV64PZicsr extension for the rcras32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",rcras32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x16, rs2==x23, rd==x16, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w1_val == 4096
// opcode: rcras32 ; op1:x16; op2:x23; dest:x16; op1val:0x00100080000000;  op2val:0x000003fffffffc
TEST_RR_OP(rcras32, x16, x16, x23, 0x0000000000000000, 0x00100080000000, 0x000003fffffffc, x6, 0, x12)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x30, rd==x2, rs1_w1_val == rs2_w1_val, rs1_w0_val == -257, rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w0_val == -524289
// opcode: rcras32 ; op1:x23; op2:x30; dest:x2; op1val:0xfffffff6fffffeff;  op2val:0xfffffff6fff7ffff
TEST_RR_OP(rcras32, x2, x23, x30, 0x0000000000000000, 0xfffffff6fffffeff, 0xfffffff6fff7ffff, x6, 8, x12)

inst_2:
// rs1 == rs2 != rd, rs1==x1, rs2==x1, rd==x8, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w1_val == 2048, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w0_val == -33, rs1_w0_val == 8
// opcode: rcras32 ; op1:x1; op2:x1; dest:x8; op1val:0xfffffffc00000008;  op2val:0x000800ffffffdf
TEST_RR_OP(rcras32, x8, x1, x1, 0x0000000000000000, 0xfffffffc00000008, 0x000800ffffffdf, x6, 16, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val == -5, rs2_w0_val == -4194305, rs1_w1_val == 1431655765, rs2_w1_val == -2147483648
// opcode: rcras32 ; op1:x4; op2:x4; dest:x4; op1val:0x55555555fffffffb;  op2val:0x80000000ffbfffff
TEST_RR_OP(rcras32, x4, x4, x4, 0x0000000000000000, 0x55555555fffffffb, 0x80000000ffbfffff, x6, 24, x12)

inst_4:
// rs2 == rd != rs1, rs1==x31, rs2==x28, rd==x28, rs1_w0_val == rs2_w0_val, rs2_w0_val == -262145, rs1_w0_val == -262145, rs2_w1_val == 65536
// opcode: rcras32 ; op1:x31; op2:x28; dest:x28; op1val:0x3ffffffffffbffff;  op2val:0x010000fffbffff
TEST_RR_OP(rcras32, x28, x31, x28, 0x0000000000000000, 0x3ffffffffffbffff, 0x010000fffbffff, x6, 32, x12)

inst_5:
// rs1==x30, rs2==x21, rd==x5, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w1_val == -262145, rs2_w0_val == 64, rs2_w1_val == -2, rs1_w0_val == -1048577
// opcode: rcras32 ; op1:x30; op2:x21; dest:x5; op1val:0xfffbffffffefffff;  op2val:0xfffffffe00000040
TEST_RR_OP(rcras32, x5, x30, x21, 0x0000000000000000, 0xfffbffffffefffff, 0xfffffffe00000040, x6, 40, x12)

inst_6:
// rs1==x14, rs2==x3, rd==x24, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == -1073741825, rs1_w0_val == 65536, rs2_w0_val == 8388608
// opcode: rcras32 ; op1:x14; op2:x3; dest:x24; op1val:0xbfffffff00010000;  op2val:0xc000000000800000
TEST_RR_OP(rcras32, x24, x14, x3, 0x0000000000000000, 0xbfffffff00010000, 0xc000000000800000, x6, 48, x12)

inst_7:
// rs1==x15, rs2==x0, rd==x30, rs2_w1_val == -1431655766, rs1_w0_val == -1073741825, rs1_w1_val == -131073, rs2_w0_val == 4096
// opcode: rcras32 ; op1:x15; op2:x0; dest:x30; op1val:0xfffdffffbfffffff;  op2val:0xaaaaaaaa00001000
TEST_RR_OP(rcras32, x30, x15, x0, 0x0000000000000000, 0xfffdffffbfffffff, 0xaaaaaaaa00001000, x6, 56, x12)

inst_8:
// rs1==x22, rs2==x20, rd==x15, rs2_w1_val == 1431655765, rs1_w0_val == -8193
// opcode: rcras32 ; op1:x22; op2:x20; dest:x15; op1val:0xfffffffcffffdfff;  op2val:0x55555555ffffffdf
TEST_RR_OP(rcras32, x15, x22, x20, 0x0000000000000000, 0xfffffffcffffdfff, 0x55555555ffffffdf, x6, 64, x12)

inst_9:
// rs1==x10, rs2==x17, rd==x3, rs2_w1_val == 2147483647, rs2_w0_val == 262144
// opcode: rcras32 ; op1:x10; op2:x17; dest:x3; op1val:0x000007fffffffc;  op2val:0x7fffffff00040000
TEST_RR_OP(rcras32, x3, x10, x17, 0x0000000000000000, 0x000007fffffffc, 0x7fffffff00040000, x6, 72, x12)

inst_10:
// rs1==x13, rs2==x26, rd==x23, rs2_w1_val == -1073741825, rs1_w0_val == -9
// opcode: rcras32 ; op1:x13; op2:x26; dest:x23; op1val:0xfffbfffffffffff7;  op2val:0xbfffffff00000003
TEST_RR_OP(rcras32, x23, x13, x26, 0x0000000000000000, 0xfffbfffffffffff7, 0xbfffffff00000003, x6, 80, x12)

inst_11:
// rs1==x27, rs2==x25, rd==x14, rs2_w1_val == -536870913, rs1_w0_val == -536870913, rs1_w1_val == 512
// opcode: rcras32 ; op1:x27; op2:x25; dest:x14; op1val:0x000200dfffffff;  op2val:0xdfffffff00800000
TEST_RR_OP(rcras32, x14, x27, x25, 0x0000000000000000, 0x000200dfffffff, 0xdfffffff00800000, x6, 88, x12)

inst_12:
// rs1==x2, rs2==x11, rd==x9, rs2_w1_val == -268435457, rs1_w0_val == 268435456, rs1_w1_val == -257
// opcode: rcras32 ; op1:x2; op2:x11; dest:x9; op1val:0xfffffeff10000000;  op2val:0xefffffffffbfffff
TEST_RR_OP(rcras32, x9, x2, x11, 0x0000000000000000, 0xfffffeff10000000, 0xefffffffffbfffff, x6, 96, x12)

inst_13:
// rs1==x28, rs2==x7, rd==x13, rs2_w1_val == -134217729, rs1_w0_val == 33554432, rs2_w0_val == 4194304, rs1_w1_val == -1431655766
// opcode: rcras32 ; op1:x28; op2:x7; dest:x13; op1val:0xaaaaaaaa02000000;  op2val:0xf7ffffff00400000
TEST_RR_OP(rcras32, x13, x28, x7, 0x0000000000000000, 0xaaaaaaaa02000000, 0xf7ffffff00400000, x6, 104, x12)

inst_14:
// rs1==x29, rs2==x16, rd==x22, rs2_w1_val == -67108865, rs1_w0_val == 4
// opcode: rcras32 ; op1:x29; op2:x16; dest:x22; op1val:0xfffffeff00000004;  op2val:0xfbffffff00040000
TEST_RR_OP(rcras32, x22, x29, x16, 0x0000000000000000, 0xfffffeff00000004, 0xfbffffff00040000, x6, 112, x13)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_15:
// rs1==x0, rs2==x2, rd==x19, rs2_w1_val == -33554433, rs1_w1_val == -65, rs2_w0_val == -131073, rs1_w0_val == 2147483647
// opcode: rcras32 ; op1:x0; op2:x2; dest:x19; op1val:0xffffffbf7fffffff;  op2val:0xfdfffffffffdffff
TEST_RR_OP(rcras32, x19, x0, x2, 0x0000000000000000, 0xffffffbf7fffffff, 0xfdfffffffffdffff, x4, 0, x13)

inst_16:
// rs1==x9, rs2==x12, rd==x29, rs2_w1_val == -16777217, rs1_w0_val == 64
// opcode: rcras32 ; op1:x9; op2:x12; dest:x29; op1val:0xfffbffff00000040;  op2val:0xfefffffffffffffa
TEST_RR_OP(rcras32, x29, x9, x12, 0x0000000000000000, 0xfffbffff00000040, 0xfefffffffffffffa, x4, 8, x13)

inst_17:
// rs1==x6, rs2==x29, rd==x21, rs2_w1_val == -8388609, rs2_w0_val == 131072, rs1_w1_val == -2147483648
// opcode: rcras32 ; op1:x6; op2:x29; dest:x21; op1val:0x8000000080000000;  op2val:0xff7fffff00020000
TEST_RR_OP(rcras32, x21, x6, x29, 0x0000000000000000, 0x8000000080000000, 0xff7fffff00020000, x4, 16, x13)

inst_18:
// rs1==x18, rs2==x27, rd==x11, rs2_w1_val == -4194305, rs1_w1_val == 4, rs1_w0_val == -17
// opcode: rcras32 ; op1:x18; op2:x27; dest:x11; op1val:0x000004ffffffef;  op2val:0xffbffffffffffffa
TEST_RR_OP(rcras32, x11, x18, x27, 0x0000000000000000, 0x000004ffffffef, 0xffbffffffffffffa, x4, 24, x13)

inst_19:
// rs1==x3, rs2==x19, rd==x26, rs2_w1_val == -2097153, rs1_w1_val == 67108864, rs2_w0_val == -1
// opcode: rcras32 ; op1:x3; op2:x19; dest:x26; op1val:0x4000000ffefffff;  op2val:0xffdfffffffffffff
TEST_RR_OP(rcras32, x26, x3, x19, 0x0000000000000000, 0x4000000ffefffff, 0xffdfffffffffffff, x4, 32, x13)

inst_20:
// rs1==x5, rs2==x8, rd==x27, rs2_w1_val == -1048577, rs2_w0_val == -5, rs1_w1_val == 2097152, rs1_w0_val == 1
// opcode: rcras32 ; op1:x5; op2:x8; dest:x27; op1val:0x20000000000001;  op2val:0xffeffffffffffffb
TEST_RR_OP(rcras32, x27, x5, x8, 0x0000000000000000, 0x20000000000001, 0xffeffffffffffffb, x4, 40, x13)

inst_21:
// rs1==x7, rs2==x9, rd==x17, rs2_w1_val == -524289, rs2_w0_val == -1431655766, rs1_w0_val == 8192, rs1_w1_val == 1
// opcode: rcras32 ; op1:x7; op2:x9; dest:x17; op1val:0x00000100002000;  op2val:0xfff7ffffaaaaaaaa
TEST_RR_OP(rcras32, x17, x7, x9, 0x0000000000000000, 0x00000100002000, 0xfff7ffffaaaaaaaa, x4, 48, x13)

inst_22:
// rs1==x24, rs2==x15, rd==x25, rs2_w1_val == -262145, rs2_w0_val == 8192, rs1_w1_val == 16777216, rs1_w0_val == 134217728
// opcode: rcras32 ; op1:x24; op2:x15; dest:x25; op1val:0x100000008000000;  op2val:0xfffbffff00002000
TEST_RR_OP(rcras32, x25, x24, x15, 0x0000000000000000, 0x100000008000000, 0xfffbffff00002000, x4, 56, x13)

inst_23:
// rs1==x26, rs2==x14, rd==x7, rs2_w1_val == -131073, rs1_w1_val == 16, rs2_w0_val == 32768, rs1_w0_val == -32769
// opcode: rcras32 ; op1:x26; op2:x14; dest:x7; op1val:0x000010ffff7fff;  op2val:0xfffdffff00008000
TEST_RR_OP(rcras32, x7, x26, x14, 0x0000000000000000, 0x000010ffff7fff, 0xfffdffff00008000, x4, 64, x13)

inst_24:
// rs1==x12, rs2==x10, rd==x1, rs2_w1_val == -65537, rs1_w1_val == -17, rs2_w0_val == 134217728
// opcode: rcras32 ; op1:x12; op2:x10; dest:x1; op1val:0xffffffef00000001;  op2val:0xfffeffff08000000
TEST_RR_OP(rcras32, x1, x12, x10, 0x0000000000000000, 0xffffffef00000001, 0xfffeffff08000000, x4, 72, x13)

inst_25:
// rs1==x19, rs2==x24, rd==x6, rs2_w1_val == -32769, rs2_w0_val == 67108864, rs1_w0_val == 524288, rs1_w1_val == 32768
// opcode: rcras32 ; op1:x19; op2:x24; dest:x6; op1val:0x00800000080000;  op2val:0xffff7fff04000000
TEST_RR_OP(rcras32, x6, x19, x24, 0x0000000000000000, 0x00800000080000, 0xffff7fff04000000, x4, 80, x13)

inst_26:
// rs1==x20, rs2==x31, rd==x0, rs2_w1_val == -16385, rs2_w0_val == 16, rs1_w1_val == 0
// opcode: rcras32 ; op1:x20; op2:x31; dest:x0; op1val:0x00000002000000;  op2val:0xffffbfff00000010
TEST_RR_OP(rcras32, x0, x20, x31, 0x0000000000000000, 0x00000002000000, 0xffffbfff00000010, x4, 88, x13)

inst_27:
// rs1==x8, rs2==x13, rd==x12, rs2_w1_val == -8193, rs1_w0_val == 1073741824
// opcode: rcras32 ; op1:x8; op2:x13; dest:x12; op1val:0x00020040000000;  op2val:0xffffdfff00800000
TEST_RR_OP(rcras32, x12, x8, x13, 0x0000000000000000, 0x00020040000000, 0xffffdfff00800000, x4, 96, x2)

inst_28:
// rs1==x25, rs2==x22, rd==x10, rs2_w1_val == -4097, rs1_w0_val == 16777216, rs2_w0_val == 2097152, rs1_w1_val == -33554433
// opcode: rcras32 ; op1:x25; op2:x22; dest:x10; op1val:0xfdffffff01000000;  op2val:0xffffefff00200000
TEST_RR_OP(rcras32, x10, x25, x22, 0x0000000000000000, 0xfdffffff01000000, 0xffffefff00200000, x4, 104, x2)

inst_29:
// rs1==x11, rs2==x6, rd==x31, rs2_w1_val == -2049, rs2_w0_val == 2147483647, rs1_w0_val == -524289
// opcode: rcras32 ; op1:x11; op2:x6; dest:x31; op1val:0xbffffffffff7ffff;  op2val:0xfffff7ff7fffffff
TEST_RR_OP(rcras32, x31, x11, x6, 0x0000000000000000, 0xbffffffffff7ffff, 0xfffff7ff7fffffff, x4, 112, x2)

inst_30:
// rs1==x17, rs2==x18, rd==x20, rs2_w1_val == -1025, rs1_w0_val == -513, rs2_w0_val == 1431655765
// opcode: rcras32 ; op1:x17; op2:x18; dest:x20; op1val:0xffffffbffffffdff;  op2val:0xfffffbff55555555
TEST_RR_OP(rcras32, x20, x17, x18, 0x0000000000000000, 0xffffffbffffffdff, 0xfffffbff55555555, x4, 120, x2)

inst_31:
// rs1==x21, rs2==x5, rd==x18, rs2_w1_val == -513, rs1_w1_val == -33
// opcode: rcras32 ; op1:x21; op2:x5; dest:x18; op1val:0xffffffdfffff7fff;  op2val:0xfffffdff04000000
TEST_RR_OP(rcras32, x18, x21, x5, 0x0000000000000000, 0xffffffdfffff7fff, 0xfffffdff04000000, x4, 128, x2)

inst_32:
// rs2_w1_val == -257, rs1_w1_val == 8
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800010000;  op2val:0xfffffeff00000003
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x00000800010000, 0xfffffeff00000003, x4, 136, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs2_w1_val == -129, rs1_w1_val == -4194305, rs2_w0_val == 65536
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffffff8;  op2val:0xffffff7f00010000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xffbffffffffffff8, 0xffffff7f00010000, x1, 0, x2)

inst_34:
// rs2_w1_val == -65, rs1_w0_val == -3
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffffffd;  op2val:0xffffffbfaaaaaaaa
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x80000000fffffffd, 0xffffffbfaaaaaaaa, x1, 8, x2)

inst_35:
// rs2_w1_val == -33, rs1_w1_val == 536870912
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000001000000;  op2val:0xffffffdf08000000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x2000000001000000, 0xffffffdf08000000, x1, 16, x2)

inst_36:
// rs2_w1_val == -17, rs1_w1_val == 4194304, rs1_w0_val == -2
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffffe;  op2val:0xffffffef00000010
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x400000fffffffe, 0xffffffef00000010, x1, 24, x2)

inst_37:
// rs2_w1_val == -9, rs1_w0_val == 8388608
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000800000;  op2val:0xfffffff700400000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x00000000800000, 0xfffffff700400000, x1, 32, x2)

inst_38:
// rs2_w1_val == -5, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff810000000;  op2val:0xfffffffb00000003
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffff810000000, 0xfffffffb00000003, x1, 40, x2)

inst_39:
// rs2_w1_val == -3, rs2_w0_val == -16385
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000009;  op2val:0xfffffffdffffbfff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x8000000000000009, 0xfffffffdffffbfff, x1, 48, x2)

inst_40:
// rs2_w1_val == 1073741824, rs1_w0_val == -16777217, rs1_w1_val == 256
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100feffffff;  op2val:0x400000003fffffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x000100feffffff, 0x400000003fffffff, x1, 56, x2)

inst_41:
// rs2_w1_val == 536870912, rs1_w1_val == -268435457
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffefffff;  op2val:0x2000000000008000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xefffffffffefffff, 0x2000000000008000, x1, 64, x2)

inst_42:
// rs2_w1_val == 268435456, rs2_w0_val == -3, rs1_w0_val == 2097152
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00200000;  op2val:0x10000000fffffffd
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00200000, 0x10000000fffffffd, x1, 72, x2)

inst_43:
// rs2_w1_val == 134217728, rs1_w0_val == 262144
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000040000;  op2val:0x80000007fffffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xc000000000040000, 0x80000007fffffff, x1, 80, x2)

inst_44:
// rs2_w1_val == 67108864, rs1_w1_val == -8388609, rs1_w0_val == 32, rs2_w0_val == 8
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000020;  op2val:0x400000000000008
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000020, 0x400000000000008, x1, 88, x2)

inst_45:
// rs2_w1_val == 33554432, rs1_w1_val == 16384, rs2_w0_val == 16384, rs1_w0_val == 1024
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000000400;  op2val:0x200000000004000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x00400000000400, 0x200000000004000, x1, 96, x2)

inst_46:
// rs2_w1_val == 16777216, rs1_w0_val == 0, rs2_w0_val == -32769
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000000;  op2val:0x1000000ffff7fff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x00000100000000, 0x1000000ffff7fff, x1, 104, x2)

inst_47:
// rs2_w1_val == 8388608, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00010000;  op2val:0x800000fffffff9
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00010000, 0x800000fffffff9, x1, 112, x2)

inst_48:
// rs2_w1_val == 4194304, rs1_w1_val == 1024
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x0004007fffffff;  op2val:0x40000000004000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x0004007fffffff, 0x40000000004000, x1, 120, x2)

inst_49:
// rs2_w1_val == 2097152, rs1_w1_val == 1048576
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000040000;  op2val:0x200000fffffffc
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x10000000040000, 0x200000fffffffc, x1, 128, x2)

inst_50:
// rs2_w1_val == 1048576, rs1_w1_val == 65536, rs1_w0_val == 67108864
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000004000000;  op2val:0x10000000000009
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x01000004000000, 0x10000000000009, x1, 136, x2)

inst_51:
// rs2_w1_val == 524288, rs1_w1_val == -4097, rs2_w0_val == 1048576
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffbffff;  op2val:0x08000000100000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xffffeffffffbffff, 0x08000000100000, x1, 144, x2)

inst_52:
// rs1_w0_val == 4194304, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00400000;  op2val:0x400000000001000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00400000, 0x400000000001000, x1, 152, x2)

inst_53:
// rs1_w0_val == 1048576, rs2_w0_val == 2
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00100000;  op2val:0xfffffbff00000002
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00100000, 0xfffffbff00000002, x1, 160, x2)

inst_54:
// rs1_w0_val == 131072, rs2_w1_val == 4096
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000020000;  op2val:0x00100000200000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x00800000020000, 0x00100000200000, x1, 168, x2)

inst_55:
// rs1_w0_val == 32768, rs1_w1_val == 8388608
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000008000;  op2val:0xffffffbffffffffc
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x80000000008000, 0xffffffbffffffffc, x1, 176, x2)

inst_56:
// rs1_w0_val == 16384, rs2_w0_val == -1073741825, rs2_w1_val == 131072
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400004000;  op2val:0x020000bfffffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x00000400004000, 0x020000bfffffff, x1, 184, x2)

inst_57:
// rs1_w0_val == 4096, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000001000;  op2val:0xfffffffbffffffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x00010000001000, 0xfffffffbffffffff, x1, 192, x2)

inst_58:
// rs1_w0_val == 2048, rs1_w1_val == 268435456, rs2_w0_val == 128
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000800;  op2val:0xffdfffff00000080
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x1000000000000800, 0xffdfffff00000080, x1, 200, x2)

inst_59:
// rs1_w0_val == 512, rs1_w1_val == 524288
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000200;  op2val:0xffffffdf00004000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x08000000000200, 0xffffffdf00004000, x1, 208, x2)

inst_60:
// rs1_w0_val == 256, rs1_w1_val == 2
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000100;  op2val:0x7fffffff00040000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x00000200000100, 0x7fffffff00040000, x1, 216, x2)

inst_61:
// rs1_w0_val == 128, rs2_w0_val == -2097153
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000080;  op2val:0x000007ffdfffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000080, 0x000007ffdfffff, x1, 224, x2)

inst_62:
// rs1_w0_val == 16, rs1_w1_val == -513
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000010;  op2val:0x1000000000008000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000010, 0x1000000000008000, x1, 232, x2)

inst_63:
// rs1_w0_val == 2, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000002;  op2val:0xfffffff800000005
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x5555555500000002, 0xfffffff800000005, x1, 240, x2)

inst_64:
// rs1_w0_val == -1, rs1_w1_val == 2048, rs2_w1_val == 1
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffffffff;  op2val:0x00000104000000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x000800ffffffff, 0x00000104000000, x1, 248, x2)

inst_65:
// rs2_w1_val == 262144, rs2_w0_val == 32, rs1_w0_val == -2049
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffff7ff;  op2val:0x04000000000020
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xffffffeffffff7ff, 0x04000000000020, x1, 256, x2)

inst_66:
// rs2_w1_val == 32768, rs1_w1_val == -16385, rs2_w0_val == 524288
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00100000;  op2val:0x00800000080000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00100000, 0x00800000080000, x1, 264, x2)

inst_67:
// rs2_w1_val == 16384, rs2_w0_val == 1, rs1_w0_val == -129
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffffff7f;  op2val:0x00400000000001
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x008000ffffff7f, 0x00400000000001, x1, 272, x2)

inst_68:
// rs2_w1_val == 8192, rs1_w1_val == -524289, rs2_w0_val == -9
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff02000000;  op2val:0x002000fffffff7
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff02000000, 0x002000fffffff7, x1, 280, x2)

inst_69:
// rs2_w1_val == 1024, rs2_w0_val == 512, rs1_w0_val == -16385
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006ffffbfff;  op2val:0x00040000000200
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x000006ffffbfff, 0x00040000000200, x1, 288, x2)

inst_70:
// rs2_w1_val == 512, rs1_w1_val == 32
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffffffc;  op2val:0x00020000000006
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x000020fffffffc, 0x00020000000006, x1, 296, x2)

inst_71:
// rs2_w1_val == 256, rs1_w1_val == 2147483647
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffdfff;  op2val:0x000100ffffbfff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffdfff, 0x000100ffffbfff, x1, 304, x2)

inst_72:
// rs2_w1_val == 128, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000400;  op2val:0x000080fffffffd
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x5555555500000400, 0x000080fffffffd, x1, 312, x2)

inst_73:
// rs2_w1_val == 64, rs1_w1_val == -5, rs2_w0_val == -1048577
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffffeff;  op2val:0x000040ffefffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffffeff, 0x000040ffefffff, x1, 320, x2)

inst_74:
// rs2_w1_val == 32, rs1_w1_val == -134217729, rs1_w0_val == -268435457
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffefffffff;  op2val:0x00002000000200
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xf7ffffffefffffff, 0x00002000000200, x1, 328, x2)

inst_75:
// rs2_w1_val == 16, rs1_w1_val == -2097153, rs1_w0_val == -33
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffffffdf;  op2val:0x000010fffffffa
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xffdfffffffffffdf, 0x000010fffffffa, x1, 336, x2)

inst_76:
// rs2_w1_val == 8, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000408000000;  op2val:0x000008fffffffb
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x00000408000000, 0x000008fffffffb, x1, 344, x2)

inst_77:
// rs2_w1_val == 4, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001feffffff;  op2val:0x000004bfffffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x000001feffffff, 0x000004bfffffff, x1, 352, x2)

inst_78:
// rs2_w1_val == 2, rs2_w0_val == -513
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600008000;  op2val:0x000002fffffdff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x00000600008000, 0x000002fffffdff, x1, 360, x2)

inst_79:
// rs2_w1_val == 0, rs1_w1_val == -9, rs1_w0_val == -4194305
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffbfffff;  op2val:0x00000000000005
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffbfffff, 0x00000000000005, x1, 368, x2)

inst_80:
// rs2_w1_val == -1, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000005;  op2val:0xffffffff00040000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xc000000000000005, 0xffffffff00040000, x1, 376, x2)

inst_81:
// rs2_w0_val == 2048, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00000000;  op2val:0xfffffff700000800
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000000, 0xfffffff700000800, x1, 384, x2)

inst_82:
// rs2_w0_val == 1024, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc01000000;  op2val:0x00000100000400
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffc01000000, 0x00000100000400, x1, 392, x2)

inst_83:
// rs2_w0_val == 256, rs1_w1_val == 8192
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffffff8;  op2val:0xfeffffff00000100
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x002000fffffff8, 0xfeffffff00000100, x1, 400, x2)

inst_84:
// rs2_w0_val == 4, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000bfffffff;  op2val:0xffffefff00000004
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x200000bfffffff, 0xffffefff00000004, x1, 408, x2)

inst_85:
// rs2_w0_val == 0, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00200000;  op2val:0x4000000000000000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00200000, 0x4000000000000000, x1, 416, x2)

inst_86:
// rs1_w1_val == -536870913, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000002;  op2val:0xffffeffffffffffa
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000002, 0xffffeffffffffffa, x1, 424, x2)

inst_87:
// rs1_w1_val == -67108865, rs1_w0_val == -1025
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffffbff;  op2val:0xc0000000ffefffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffffbff, 0xc0000000ffefffff, x1, 432, x2)

inst_88:
// rs1_w1_val == -16777217, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffffd;  op2val:0xfffffff8ffbfffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfefffffffffffffd, 0xfffffff8ffbfffff, x1, 440, x2)

inst_89:
// rs1_w1_val == -1048577, rs2_w0_val == -33554433, rs1_w0_val == -4097
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffffefff;  op2val:0xffffffbffdffffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xffefffffffffefff, 0xffffffbffdffffff, x1, 448, x2)

inst_90:
// rs1_w1_val == -65537, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffff7ffff;  op2val:0x00008000000006
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffefffffff7ffff, 0x00008000000006, x1, 456, x2)

inst_91:
// rs1_w1_val == -32769, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff80000000;  op2val:0x400000000000000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xffff7fff80000000, 0x400000000000000, x1, 464, x2)

inst_92:
// rs1_w1_val == -8193, rs2_w0_val == -8388609
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000001;  op2val:0xc0000000ff7fffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000001, 0xc0000000ff7fffff, x1, 472, x2)

inst_93:
// rs1_w1_val == -2049, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00001000;  op2val:0x00080000000003
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00001000, 0x00080000000003, x1, 480, x2)

inst_94:
// rs1_w1_val == -1025, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffffff7ff;  op2val:0xc000000000800000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffff7ff, 0xc000000000800000, x1, 488, x2)

inst_95:
// rs1_w1_val == -129, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00004000;  op2val:0xfffffeff00000800
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00004000, 0xfffffeff00000800, x1, 496, x2)

inst_96:
// rs1_w1_val == -3, rs2_w0_val == -65537
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffffffc;  op2val:0x000010fffeffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffffffc, 0x000010fffeffff, x1, 504, x2)

inst_97:
// rs1_w1_val == -2, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffffffc;  op2val:0x08000055555555
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffefffffffc, 0x08000055555555, x1, 512, x2)

inst_98:
// rs1_w1_val == 1073741824, rs1_w0_val == -1431655766
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000aaaaaaaa;  op2val:0xffffffdf00000800
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x40000000aaaaaaaa, 0xffffffdf00000800, x1, 520, x2)

inst_99:
// rs1_w1_val == 134217728, rs2_w0_val == 16777216
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ffffff7f;  op2val:0x2000000001000000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x8000000ffffff7f, 0x2000000001000000, x1, 528, x2)

inst_100:
// rs1_w1_val == 33554432, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffffffe;  op2val:0x00800000000100
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x2000000fffffffe, 0x00800000000100, x1, 536, x2)

inst_101:
// rs1_w1_val == 262144, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000001000;  op2val:0xffffffdfff7fffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x04000000001000, 0xffffffdfff7fffff, x1, 544, x2)

inst_102:
// rs1_w1_val == 131072, rs1_w0_val == -67108865, rs2_w0_val == -2
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000fbffffff;  op2val:0x40000000fffffffe
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x020000fbffffff, 0x40000000fffffffe, x1, 552, x2)

inst_103:
// rs1_w1_val == 128, rs1_w0_val == -33554433
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080fdffffff;  op2val:0x000400fffffffd
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x000080fdffffff, 0x000400fffffffd, x1, 560, x2)

inst_104:
// rs1_w1_val == 64, rs2_w0_val == 1073741824
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffffffef;  op2val:0x00002040000000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x000040ffffffef, 0x00002040000000, x1, 568, x2)

inst_105:
// rs2_w0_val == -536870913, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe04000000;  op2val:0xfffff7ffdfffffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffe04000000, 0xfffff7ffdfffffff, x1, 576, x2)

inst_106:
// rs2_w0_val == -268435457, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000080;  op2val:0xaaaaaaaaefffffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x00000000000080, 0xaaaaaaaaefffffff, x1, 584, x2)

inst_107:
// rs2_w0_val == -134217729, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffefffff;  op2val:0xfefffffff7ffffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x40000000ffefffff, 0xfefffffff7ffffff, x1, 592, x2)

inst_108:
// rs2_w0_val == -67108865, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000004;  op2val:0xfffbfffffbffffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000004, 0xfffbfffffbffffff, x1, 600, x2)

inst_109:
// rs1_w1_val == -1, rs2_w0_val == -17
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffb;  op2val:0xfffbffffffffffef
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffffb, 0xfffbffffffffffef, x1, 608, x2)

inst_110:
// rs2_w0_val == -16777217, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x0100007fffffff;  op2val:0x80000000feffffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x0100007fffffff, 0x80000000feffffff, x1, 616, x2)

inst_111:
// rs1_w0_val == 1431655765, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff55555555;  op2val:0xfff7fffffffffffc
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xdfffffff55555555, 0xfff7fffffffffffc, x1, 624, x2)

inst_112:
// rs1_w0_val == -134217729, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffff7ffffff;  op2val:0x000010f7ffffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x3ffffffff7ffffff, 0x000010f7ffffff, x1, 632, x2)

inst_113:
// rs1_w0_val == -8388609, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ff7fffff;  op2val:0x01000000000003
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x40000000ff7fffff, 0x01000000000003, x1, 640, x2)

inst_114:
// rs2_w0_val == -8193, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffbfffffff;  op2val:0xffdfffffffffdfff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xffff7fffbfffffff, 0xffdfffffffffdfff, x1, 648, x2)

inst_115:
// rs1_w0_val == -2097153, rs2_w0_val == -2049
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffdfffff;  op2val:0x000001fffff7ff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffdfffff, 0x000001fffff7ff, x1, 656, x2)

inst_116:
// rs2_w0_val == -4097, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000000;  op2val:0x000001ffffefff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x00002000000000, 0x000001ffffefff, x1, 664, x2)

inst_117:
// rs2_w0_val == -1025, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000ffefffff;  op2val:0x4000000fffffbff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x2000000ffefffff, 0x4000000fffffbff, x1, 672, x2)

inst_118:
// rs1_w0_val == -131073, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010fffdffff;  op2val:0x000100ff7fffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x000010fffdffff, 0x000100ff7fffff, x1, 680, x2)

inst_119:
// rs2_w0_val == -257, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffffffffd;  op2val:0xffffffdffffffeff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffffffd, 0xffffffdffffffeff, x1, 688, x2)

inst_120:
// rs1_w0_val == -65537, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffeffff;  op2val:0x000200ffffffdf
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x001000fffeffff, 0x000200ffffffdf, x1, 696, x2)

inst_121:
// rs2_w0_val == -129, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffffff7;  op2val:0xfffffffaffffff7f
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffefffffff7, 0xfffffffaffffff7f, x1, 704, x2)

inst_122:
// rs2_w0_val == -2147483648, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffffff8;  op2val:0x08000080000000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x002000fffffff8, 0x08000080000000, x1, 712, x2)

inst_123:
// rs2_w0_val == -65, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffff7fff;  op2val:0x80000000ffffffbf
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xffbfffffffff7fff, 0x80000000ffffffbf, x1, 720, x2)

inst_124:
// rs1_w0_val == -65, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffffbf;  op2val:0xffbfffffffffdfff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffffbf, 0xffbfffffffffdfff, x1, 728, x2)

inst_125:
// rs2_w0_val == 33554432, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd08000000;  op2val:0xfffffffd02000000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffd08000000, 0xfffffffd02000000, x1, 736, x2)

inst_126:
// rs1_w0_val == 536870912, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800020000000;  op2val:0xaaaaaaaafffffffe
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x00800020000000, 0xaaaaaaaafffffffe, x1, 744, x2)

inst_127:
// rs2_w0_val == 536870912, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00020000;  op2val:0x00000020000000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00020000, 0x00000020000000, x1, 752, x2)

inst_128:
// rs2_w0_val == 268435456, 
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffefffff;  op2val:0xffffff7f10000000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffeffefffff, 0xffffff7f10000000, x1, 760, x2)

inst_129:
// rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w1_val == 2048, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w0_val == -33, rs1_w0_val == 8
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00000008;  op2val:0x000800ffffffdf
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffc00000008, 0x000800ffffffdf, x1, 768, x2)

inst_130:
// rs2_w1_val == -1431655766, rs1_w0_val == -1073741825, rs1_w1_val == -131073, rs2_w0_val == 4096
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffbfffffff;  op2val:0xaaaaaaaa00001000
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xfffdffffbfffffff, 0xaaaaaaaa00001000, x1, 776, x2)

inst_131:
// rs2_w1_val == -33554433, rs1_w1_val == -65, rs2_w0_val == -131073, rs1_w0_val == 2147483647
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf7fffffff;  op2val:0xfdfffffffffdffff
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0xffffffbf7fffffff, 0xfdfffffffffdffff, x1, 784, x2)

inst_132:
// rs2_w1_val == -16385, rs2_w0_val == 16, rs1_w1_val == 0
// opcode: rcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000002000000;  op2val:0xffffbfff00000010
TEST_RR_OP(rcras32, x31, x30, x29, 0x0000000000000000, 0x00000002000000, 0xffffbfff00000010, x1, 792, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 100*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
