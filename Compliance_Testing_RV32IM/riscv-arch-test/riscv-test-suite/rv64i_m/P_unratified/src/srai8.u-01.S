
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srai8.u instruction of the RISC-V RV64PZicsr extension for the srai8.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srai8.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rd, rs1==x16, rd==x16, rs1_b0_val == -128, rs1_b1_val == -1, rs1_b2_val == 8, imm_val == 4, rs1_b4_val == 2
// opcode: srai8.u ; op1:x16; dest:x16; op1val:0x3f090602f908ff80;  immval:0x4
TEST_IMM_OP( srai8.u, x16, x16, 0x0000000000000000, 0x3f090602f908ff80, 0x4, x3, 0, x1)

inst_1:
// rs1 != rd, rs1==x29, rd==x8, imm_val == 7, rs1_b1_val == -17, rs1_b5_val == 0, rs1_b7_val == 32, rs1_b2_val == 85
// opcode: srai8.u ; op1:x29; dest:x8; op1val:0x20c000050955eff9;  immval:0x7
TEST_IMM_OP( srai8.u, x8, x29, 0x0000000000000000, 0x20c000050955eff9, 0x7, x3, 8, x1)

inst_2:
// rs1==x14, rd==x27, imm_val == 6, rs1_b0_val == -9, rs1_b6_val == -86, rs1_b3_val == -9
// opcode: srai8.u ; op1:x14; dest:x27; op1val:0x20aa3f05f708f9f7;  immval:0x6
TEST_IMM_OP( srai8.u, x27, x14, 0x0000000000000000, 0x20aa3f05f708f9f7, 0x6, x3, 16, x1)

inst_3:
// rs1==x20, rd==x0, imm_val == 5, rs1_b5_val == 4, rs1_b6_val == -9, rs1_b1_val == 1, rs1_b2_val == 1, rs1_b0_val == -2
// opcode: srai8.u ; op1:x20; dest:x0; op1val:0xfaf70406f80101fe;  immval:0x5
TEST_IMM_OP( srai8.u, x0, x20, 0x0000000000000000, 0xfaf70406f80101fe, 0x5, x3, 24, x1)

inst_4:
// rs1==x22, rd==x17, imm_val == 3, rs1_b0_val == -1, rs1_b4_val == -33, rs1_b2_val == -86, rs1_b1_val == 2, rs1_b7_val == -2
// opcode: srai8.u ; op1:x22; dest:x17; op1val:0xfec004df06aa02ff;  immval:0x3
TEST_IMM_OP( srai8.u, x17, x22, 0x0000000000000000, 0xfec004df06aa02ff, 0x3, x3, 32, x1)

inst_5:
// rs1==x24, rd==x20, imm_val == 2, rs1_b6_val == -65, rs1_b1_val == -65, rs1_b4_val == -3
// opcode: srai8.u ; op1:x24; dest:x20; op1val:0xc0bf05fdf9f8bffe;  immval:0x2
TEST_IMM_OP( srai8.u, x20, x24, 0x0000000000000000, 0xc0bf05fdf9f8bffe, 0x2, x3, 40, x1)

inst_6:
// rs1==x0, rd==x10, imm_val == 1, rs1_b6_val == -3, rs1_b7_val == -9, rs1_b5_val == 127, rs1_b0_val == -3, rs1_b2_val == 2, rs1_b3_val == -17
// opcode: srai8.u ; op1:x0; dest:x10; op1val:0xf7fd7fdfef02fcfd;  immval:0x1
TEST_IMM_OP( srai8.u, x10, x0, 0x0000000000000000, 0xf7fd7fdfef02fcfd, 0x1, x3, 48, x1)

inst_7:
// rs1==x15, rd==x23, imm_val == 0, rs1_b1_val == -2, rs1_b5_val == -128, rs1_b3_val == 64
// opcode: srai8.u ; op1:x15; dest:x23; op1val:0x200780f9403ffe05;  immval:0x0
TEST_IMM_OP( srai8.u, x23, x15, 0x0000000000000000, 0x200780f9403ffe05, 0x0, x3, 56, x1)

inst_8:
// rs1==x30, rd==x25, rs1_b7_val == -86, rs1_b3_val == -128, rs1_b4_val == 8, rs1_b6_val == -5
// opcode: srai8.u ; op1:x30; dest:x25; op1val:0xaafbfc088007f6fc;  immval:0x1
TEST_IMM_OP( srai8.u, x25, x30, 0x0000000000000000, 0xaafbfc088007f6fc, 0x1, x3, 64, x1)

inst_9:
// rs1==x19, rd==x28, rs1_b7_val == 85, rs1_b3_val == -2, rs1_b5_val == -1, rs1_b0_val == 1, rs1_b4_val == -9, rs1_b6_val == 2, rs1_b1_val == 4, rs1_b2_val == 0
// opcode: srai8.u ; op1:x19; dest:x28; op1val:0x5502fff7fe000401;  immval:0x1
TEST_IMM_OP( srai8.u, x28, x19, 0x0000000000000000, 0x5502fff7fe000401, 0x1, x3, 72, x1)

inst_10:
// rs1==x25, rd==x26, rs1_b7_val == 127, rs1_b1_val == 32, rs1_b4_val == -128, rs1_b6_val == 0, rs1_b5_val == -2, rs1_b3_val == 127
// opcode: srai8.u ; op1:x25; dest:x26; op1val:0x7f00fe807f0220fd;  immval:0x1
TEST_IMM_OP( srai8.u, x26, x25, 0x0000000000000000, 0x7f00fe807f0220fd, 0x1, x3, 80, x1)

inst_11:
// rs1==x21, rd==x15, rs1_b7_val == -65, rs1_b4_val == 32, rs1_b6_val == 4
// opcode: srai8.u ; op1:x21; dest:x15; op1val:0xbf04fe2080fcc0ff;  immval:0x5
TEST_IMM_OP( srai8.u, x15, x21, 0x0000000000000000, 0xbf04fe2080fcc0ff, 0x5, x3, 88, x1)

inst_12:
// rs1==x23, rd==x30, rs1_b7_val == -33, rs1_b6_val == -1, rs1_b3_val == -65, rs1_b2_val == 64
// opcode: srai8.u ; op1:x23; dest:x30; op1val:0xdfff3ffabf40fffe;  immval:0x0
TEST_IMM_OP( srai8.u, x30, x23, 0x0000000000000000, 0xdfff3ffabf40fffe, 0x0, x3, 96, x1)

inst_13:
// rs1==x2, rd==x31, rs1_b7_val == -17, rs1_b3_val == -3, rs1_b0_val == 4, rs1_b4_val == 127, rs1_b2_val == -9, rs1_b1_val == 0, rs1_b5_val == -3
// opcode: srai8.u ; op1:x2; dest:x31; op1val:0xef03fd7ffdf70004;  immval:0x5
TEST_IMM_OP( srai8.u, x31, x2, 0x0000000000000000, 0xef03fd7ffdf70004, 0x5, x3, 104, x1)

inst_14:
// rs1==x5, rd==x12, rs1_b7_val == -5, rs1_b6_val == 8, rs1_b1_val == 127, rs1_b4_val == 0
// opcode: srai8.u ; op1:x5; dest:x12; op1val:0xfb08fc0007067ffc;  immval:0x3
TEST_IMM_OP( srai8.u, x12, x5, 0x0000000000000000, 0xfb08fc0007067ffc, 0x3, x3, 112, x1)

inst_15:
// rs1==x8, rd==x13, rs1_b7_val == -3, rs1_b2_val == -65, rs1_b1_val == -9
// opcode: srai8.u ; op1:x8; dest:x13; op1val:0xfd00f808f8bff7f6;  immval:0x3
TEST_IMM_OP( srai8.u, x13, x8, 0x0000000000000000, 0xfd00f808f8bff7f6, 0x3, x3, 120, x1)

inst_16:
// rs1==x12, rd==x19, rs1_b7_val == -128, rs1_b4_val == -17, rs1_b2_val == -3, rs1_b5_val == 16
// opcode: srai8.u ; op1:x12; dest:x19; op1val:0x80fb10ef06fd3ffe;  immval:0x4
TEST_IMM_OP( srai8.u, x19, x12, 0x0000000000000000, 0x80fb10ef06fd3ffe, 0x4, x3, 128, x1)

inst_17:
// rs1==x6, rd==x14, rs1_b7_val == 64, rs1_b1_val == -5
// opcode: srai8.u ; op1:x6; dest:x14; op1val:0x40077f08f702fbfa;  immval:0x2
TEST_IMM_OP( srai8.u, x14, x6, 0x0000000000000000, 0x40077f08f702fbfa, 0x2, x3, 136, x1)

inst_18:
// rs1==x13, rd==x2, rs1_b7_val == 16, 
// opcode: srai8.u ; op1:x13; dest:x2; op1val:0x10aa00dffd5506fe;  immval:0x1
TEST_IMM_OP( srai8.u, x2, x13, 0x0000000000000000, 0x10aa00dffd5506fe, 0x1, x3, 144, x1)

inst_19:
// rs1==x11, rd==x6, rs1_b7_val == 8, rs1_b6_val == -33, rs1_b4_val == 4, rs1_b5_val == -33
// opcode: srai8.u ; op1:x11; dest:x6; op1val:0x8dfdf0406060601;  immval:0x7
TEST_IMM_OP( srai8.u, x6, x11, 0x0000000000000000, 0x8dfdf0406060601, 0x7, x3, 152, x1)

inst_20:
// rs1==x4, rd==x7, rs1_b7_val == 4, rs1_b3_val == 0, rs1_b4_val == -5, rs1_b0_val == -86, rs1_b5_val == -17
// opcode: srai8.u ; op1:x4; dest:x7; op1val:0x43feffb00f809aa;  immval:0x4
TEST_IMM_OP( srai8.u, x7, x4, 0x0000000000000000, 0x43feffb00f809aa, 0x4, x3, 160, x1)

inst_21:
// rs1==x10, rd==x11, rs1_b7_val == 2, rs1_b5_val == -5, rs1_b0_val == -33
// opcode: srai8.u ; op1:x10; dest:x11; op1val:0x2fffbf7fdf73fdf;  immval:0x7
TEST_IMM_OP( srai8.u, x11, x10, 0x0000000000000000, 0x2fffbf7fdf73fdf, 0x7, x3, 168, x6)

inst_22:
// rs1==x9, rd==x1, rs1_b7_val == 1, rs1_b4_val == 64, rs1_b5_val == -9
// opcode: srai8.u ; op1:x9; dest:x1; op1val:0x1f6f740c05520fc;  immval:0x5
TEST_IMM_OP( srai8.u, x1, x9, 0x0000000000000000, 0x1f6f740c05520fc, 0x5, x3, 176, x6)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_23:
// rs1==x17, rd==x29, rs1_b7_val == 0, rs1_b2_val == -5, rs1_b0_val == 127
// opcode: srai8.u ; op1:x17; dest:x29; op1val:0xbfc0f7f8fb057f;  immval:0x0
TEST_IMM_OP( srai8.u, x29, x17, 0x0000000000000000, 0xbfc0f7f8fb057f, 0x0, x2, 0, x6)

inst_24:
// rs1==x18, rd==x22, rs1_b7_val == -1, rs1_b4_val == -65, rs1_b3_val == 16, rs1_b0_val == 64
// opcode: srai8.u ; op1:x18; dest:x22; op1val:0xffdffbbf10090940;  immval:0x3
TEST_IMM_OP( srai8.u, x22, x18, 0x0000000000000000, 0xffdffbbf10090940, 0x3, x2, 8, x6)

inst_25:
// rs1==x7, rd==x3, rs1_b2_val == -1, rs1_b0_val == -5, rs1_b5_val == 8
// opcode: srai8.u ; op1:x7; dest:x3; op1val:0x40f8080306fffefb;  immval:0x6
TEST_IMM_OP( srai8.u, x3, x7, 0x0000000000000000, 0x40f8080306fffefb, 0x6, x2, 16, x6)

inst_26:
// rs1==x31, rd==x9, rs1_b1_val == -86, rs1_b3_val == 85
// opcode: srai8.u ; op1:x31; dest:x9; op1val:0xfbaa090655f9aa03;  immval:0x4
TEST_IMM_OP( srai8.u, x9, x31, 0x0000000000000000, 0xfbaa090655f9aa03, 0x4, x2, 24, x6)

inst_27:
// rs1==x3, rd==x5, rs1_b1_val == 85, rs1_b3_val == -5, rs1_b2_val == 32, rs1_b6_val == -2
// opcode: srai8.u ; op1:x3; dest:x5; op1val:0x10fefcfdfb20553f;  immval:0x6
TEST_IMM_OP( srai8.u, x5, x3, 0x0000000000000000, 0x10fefcfdfb20553f, 0x6, x2, 32, x6)

inst_28:
// rs1==x26, rd==x18, rs1_b1_val == -33, 
// opcode: srai8.u ; op1:x26; dest:x18; op1val:0xfd09dff8fddffa;  immval:0x0
TEST_IMM_OP( srai8.u, x18, x26, 0x0000000000000000, 0xfd09dff8fddffa, 0x0, x2, 40, x6)

inst_29:
// rs1==x27, rd==x4, rs1_b1_val == -3, rs1_b0_val == 0
// opcode: srai8.u ; op1:x27; dest:x4; op1val:0x3f06fd040009fd00;  immval:0x2
TEST_IMM_OP( srai8.u, x4, x27, 0x0000000000000000, 0x3f06fd040009fd00, 0x2, x2, 48, x6)

inst_30:
// rs1==x28, rd==x24, rs1_b1_val == -128, 
// opcode: srai8.u ; op1:x28; dest:x24; op1val:0xf703fd093faa8040;  immval:0x5
TEST_IMM_OP( srai8.u, x24, x28, 0x0000000000000000, 0xf703fd093faa8040, 0x5, x2, 56, x6)

inst_31:
// rs1==x1, rd==x21, rs1_b1_val == 64, rs1_b6_val == 16, rs1_b3_val == -1, rs1_b5_val == -65, rs1_b2_val == -128, rs1_b4_val == -1
// opcode: srai8.u ; op1:x1; dest:x21; op1val:0xf910bfffff804005;  immval:0x1
TEST_IMM_OP( srai8.u, x21, x1, 0x0000000000000000, 0xf910bfffff804005, 0x1, x2, 64, x6)

inst_32:
// rs1_b1_val == 16, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x7c0f920fc021007;  immval:0x4
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0x7c0f920fc021007, 0x4, x2, 72, x6)

inst_33:
// rs1_b1_val == 8, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xaa09f7effafb08f6;  immval:0x1
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0xaa09f7effafb08f6, 0x1, x2, 80, x6)

inst_34:
// rs1_b0_val == 85, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xef09f6080355fc55;  immval:0x6
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0xef09f6080355fc55, 0x6, x2, 88, x6)

inst_35:
// rs1_b0_val == -65, rs1_b6_val == 85
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x8055030955083fbf;  immval:0x6
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0x8055030955083fbf, 0x6, x2, 96, x6)

inst_36:
// rs1_b0_val == -17, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xf609fff6effcfbef;  immval:0x3
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0xf609fff6effcfbef, 0x3, x2, 104, x6)

inst_37:
// rs1_b6_val == 127, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x207f0903f6aabf55;  immval:0x5
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0x207f0903f6aabf55, 0x5, x2, 112, x6)

inst_38:
// rs1_b0_val == 32, rs1_b6_val == -128
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x380ef05f8033f20;  immval:0x0
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0x380ef05f8033f20, 0x0, x2, 120, x6)

inst_39:
// rs1_b0_val == 16, rs1_b2_val == 127
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x0905f8097f0810;  immval:0x5
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0x0905f8097f0810, 0x5, x2, 128, x6)

inst_40:
// rs1_b5_val == 2, rs1_b3_val == -33
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xfc0002fcdffbf903;  immval:0x1
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0xfc0002fcdffbf903, 0x1, x2, 136, x6)

inst_41:
// rs1_b5_val == 1, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xfe090180c080ff06;  immval:0x1
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0xfe090180c080ff06, 0x1, x2, 144, x6)

inst_42:
// rs1_b4_val == -86, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xfffcffaabf80fbfa;  immval:0x5
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0xfffcffaabf80fbfa, 0x5, x2, 152, x6)

inst_43:
// rs1_b4_val == 85, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xaaf77f5510400880;  immval:0x0
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0xaaf77f5510400880, 0x0, x2, 160, x6)

inst_44:
// rs1_b4_val == -2, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xfeaa3ffe09bffffa;  immval:0x1
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0xfeaa3ffe09bffffa, 0x1, x2, 168, x6)

inst_45:
// rs1_b4_val == 16, rs1_b6_val == 64, rs1_b5_val == 32
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xfa402010f9053f7f;  immval:0x4
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0xfa402010f9053f7f, 0x4, x2, 176, x6)

inst_46:
// rs1_b4_val == 1, rs1_b2_val == 4, rs1_b0_val == 2
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x1fc0801ff04f602;  immval:0x4
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0x1fc0801ff04f602, 0x4, x2, 184, x6)

inst_47:
// rs1_b3_val == -86, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x500803faa20fd3f;  immval:0x4
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0x500803faa20fd3f, 0x4, x2, 192, x6)

inst_48:
// rs1_b6_val == -17, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x20ef090900040605;  immval:0x1
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0x20ef090900040605, 0x1, x2, 200, x6)

inst_49:
// rs1_b0_val == 8, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xfcf608fafc3f1008;  immval:0x6
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0xfcf608fafc3f1008, 0x6, x2, 208, x6)

inst_50:
// rs1_b3_val == 32, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x3bffbf620c05505;  immval:0x0
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0x3bffbf620c05505, 0x0, x2, 216, x6)

inst_51:
// rs1_b3_val == 8, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x8f701fb08f80702;  immval:0x2
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0x8f701fb08f80702, 0x2, x2, 224, x6)

inst_52:
// rs1_b3_val == 4, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xf7df10fc04c0ef09;  immval:0x1
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0xf7df10fc04c0ef09, 0x1, x2, 232, x6)

inst_53:
// rs1_b6_val == 32, rs1_b2_val == -33
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x207f4020df0504;  immval:0x4
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0x207f4020df0504, 0x4, x2, 240, x6)

inst_54:
// rs1_b3_val == 2, rs1_b6_val == 1
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x501095502faf806;  immval:0x3
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0x501095502faf806, 0x3, x2, 248, x6)

inst_55:
// rs1_b3_val == 1, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xf7c0007f01074000;  immval:0x4
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0xf7c0007f01074000, 0x4, x2, 256, x6)

inst_56:
// rs1_b5_val == -86, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x8040aa0010fdfffd;  immval:0x5
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0x8040aa0010fdfffd, 0x5, x2, 264, x6)

inst_57:
// rs1_b5_val == 85, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xf603553f03207fdf;  immval:0x2
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0xf603553f03207fdf, 0x2, x2, 272, x6)

inst_58:
// rs1_b2_val == -17, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xc05502807fefc003;  immval:0x7
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0xc05502807fefc003, 0x7, x2, 280, x6)

inst_59:
// rs1_b2_val == 16, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xfe0910fa04103ffd;  immval:0x5
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0xfe0910fa04103ffd, 0x5, x2, 288, x6)

inst_60:
// rs1_b5_val == 64, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0x20aa40c020044080;  immval:0x3
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0x20aa40c020044080, 0x3, x2, 296, x6)

inst_61:
// rs1_b2_val == -2, 
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xc008032010fefc03;  immval:0x2
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0xc008032010fefc03, 0x2, x2, 304, x6)

inst_62:
// imm_val == 5, rs1_b5_val == 4, rs1_b6_val == -9, rs1_b1_val == 1, rs1_b2_val == 1, rs1_b0_val == -2
// opcode: srai8.u ; op1:x30; dest:x31; op1val:0xfaf70406f80101fe;  immval:0x5
TEST_IMM_OP( srai8.u, x31, x30, 0x0000000000000000, 0xfaf70406f80101fe, 0x5, x2, 312, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 40*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
