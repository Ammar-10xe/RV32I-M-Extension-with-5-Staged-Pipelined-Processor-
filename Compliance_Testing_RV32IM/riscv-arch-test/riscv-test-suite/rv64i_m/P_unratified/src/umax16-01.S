
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umax16 instruction of the RISC-V RV64PZicsr extension for the umax16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umax16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x17, rs2==x26, rd==x17, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h3_val == 32, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 21845, rs1_h3_val == 8, rs2_h1_val == 65471
// opcode: umax16 ; op1:x17; op2:x26; dest:x17; op1val:0x08000700060000;  op2val:0x20000affbf5555
TEST_RR_OP(umax16, x17, x17, x26, 0x0000000000000000, 0x08000700060000, 0x20000affbf5555, x7, 0, x18)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x27, rs2==x12, rd==x15, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h2_val == 512, rs1_h3_val == 65503, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 61439, rs1_h0_val == 1, rs2_h0_val == 128, rs2_h1_val == 57343, rs2_h3_val == 65503, rs1_h2_val == 65535
// opcode: umax16 ; op1:x27; op2:x12; dest:x15; op1val:0xffdfffffefff0001;  op2val:0xffdf0200dfff0080
TEST_RR_OP(umax16, x15, x27, x12, 0x0000000000000000, 0xffdfffffefff0001, 0xffdf0200dfff0080, x7, 8, x18)

inst_2:
// rs1 == rs2 != rd, rs1==x0, rs2==x0, rd==x13, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h2_val == 16384, rs2_h0_val == 0, rs2_h3_val == 16, rs1_h2_val == 16384
// opcode: umax16 ; op1:x0; op2:x0; dest:x13; op1val:0x1140000007000c;  op2val:0x10400000050000
TEST_RR_OP(umax16, x13, x0, x0, 0x0000000000000000, 0x1140000007000c, 0x10400000050000, x7, 16, x18)

inst_3:
// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 16384, rs1_h0_val == 21845, rs1_h2_val == 1024, rs1_h1_val == 16384, rs2_h2_val == 65407, rs2_h0_val == 49151, rs1_h3_val == 43690
// opcode: umax16 ; op1:x4; op2:x4; dest:x4; op1val:0xaaaa040040005555;  op2val:0x0eff7f4000bfff
TEST_RR_OP(umax16, x4, x4, x4, 0x0000000000000000, 0xaaaa040040005555, 0x0eff7f4000bfff, x7, 24, x18)

inst_4:
// rs2 == rd != rs1, rs1==x3, rs2==x22, rd==x22, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 65471, rs1_h1_val == 4, rs2_h3_val == 32767, rs1_h0_val == 65471
// opcode: umax16 ; op1:x3; op2:x22; dest:x22; op1val:0x0800110004ffbf;  op2val:0x7fff00110011ffbf
TEST_RR_OP(umax16, x22, x3, x22, 0x0000000000000000, 0x0800110004ffbf, 0x7fff00110011ffbf, x7, 32, x18)

inst_5:
// rs1==x11, rs2==x20, rd==x19, rs2_h3_val == 43690, rs2_h2_val == 16, rs1_h2_val == 512, rs1_h3_val == 4096
// opcode: umax16 ; op1:x11; op2:x20; dest:x19; op1val:0x10000200000d5555;  op2val:0xaaaa0010000a0000
TEST_RR_OP(umax16, x19, x11, x20, 0x0000000000000000, 0x10000200000d5555, 0xaaaa0010000a0000, x7, 40, x18)

inst_6:
// rs1==x6, rs2==x2, rd==x21, rs2_h3_val == 21845, rs1_h0_val == 32, rs2_h1_val == 61439, rs1_h2_val == 128
// opcode: umax16 ; op1:x6; op2:x2; dest:x21; op1val:0x0b0080000c0020;  op2val:0x55550012efff0005
TEST_RR_OP(umax16, x21, x6, x2, 0x0000000000000000, 0x0b0080000c0020, 0x55550012efff0005, x7, 48, x18)

inst_7:
// rs1==x12, rs2==x10, rd==x25, rs2_h3_val == 49151, rs1_h1_val == 0, rs2_h0_val == 32768, rs2_h1_val == 1024, rs2_h2_val == 57343, rs1_h3_val == 4
// opcode: umax16 ; op1:x12; op2:x10; dest:x25; op1val:0x04000c0000000f;  op2val:0xbfffdfff04008000
TEST_RR_OP(umax16, x25, x12, x10, 0x0000000000000000, 0x04000c0000000f, 0xbfffdfff04008000, x7, 56, x18)

inst_8:
// rs1==x16, rs2==x24, rd==x27, rs2_h3_val == 57343, rs2_h2_val == 0, rs2_h0_val == 64, rs1_h0_val == 32768
// opcode: umax16 ; op1:x16; op2:x24; dest:x27; op1val:0x04000900058000;  op2val:0xdfff0000000e0040
TEST_RR_OP(umax16, x27, x16, x24, 0x0000000000000000, 0x04000900058000, 0xdfff0000000e0040, x7, 64, x18)

inst_9:
// rs1==x10, rs2==x30, rd==x8, rs2_h3_val == 61439, rs1_h0_val == 57343, rs1_h3_val == 65407, rs2_h2_val == 4, rs1_h1_val == 65471
// opcode: umax16 ; op1:x10; op2:x30; dest:x8; op1val:0xff7f0003ffbfdfff;  op2val:0xefff000400120040
TEST_RR_OP(umax16, x8, x10, x30, 0x0000000000000000, 0xff7f0003ffbfdfff, 0xefff000400120040, x7, 72, x18)

inst_10:
// rs1==x5, rs2==x21, rd==x9, rs2_h3_val == 63487, rs2_h1_val == 65531, rs2_h2_val == 8, rs1_h1_val == 65503, rs1_h2_val == 21845
// opcode: umax16 ; op1:x5; op2:x21; dest:x9; op1val:0x045555ffdf0003;  op2val:0xf7ff0008fffb0040
TEST_RR_OP(umax16, x9, x5, x21, 0x0000000000000000, 0x045555ffdf0003, 0xf7ff0008fffb0040, x7, 80, x18)

inst_11:
// rs1==x20, rs2==x17, rd==x6, rs2_h3_val == 64511, rs2_h2_val == 43690, rs2_h1_val == 8, rs1_h3_val == 32, rs2_h0_val == 2, rs1_h2_val == 8
// opcode: umax16 ; op1:x20; op2:x17; dest:x6; op1val:0x2000080000dfff;  op2val:0xfbffaaaa00080002
TEST_RR_OP(umax16, x6, x20, x17, 0x0000000000000000, 0x2000080000dfff, 0xfbffaaaa00080002, x7, 88, x18)

inst_12:
// rs1==x22, rs2==x14, rd==x1, rs2_h3_val == 65023, rs1_h3_val == 128, rs2_h2_val == 2
// opcode: umax16 ; op1:x22; op2:x14; dest:x1; op1val:0x8004000012000d;  op2val:0xfdff00020007000e
TEST_RR_OP(umax16, x1, x22, x14, 0x0000000000000000, 0x8004000012000d, 0xfdff00020007000e, x7, 96, x18)

inst_13:
// rs1==x9, rs2==x25, rd==x23, rs2_h3_val == 65279, rs1_h0_val == 32767, rs2_h2_val == 64, rs2_h1_val == 0, rs1_h1_val == 1024, rs1_h3_val == 2, rs1_h2_val == 2
// opcode: umax16 ; op1:x9; op2:x25; dest:x23; op1val:0x02000204007fff;  op2val:0xfeff004000000005
TEST_RR_OP(umax16, x23, x9, x25, 0x0000000000000000, 0x02000204007fff, 0xfeff004000000005, x7, 104, x18)

inst_14:
// rs1==x13, rs2==x28, rd==x10, rs2_h3_val == 65407, rs2_h0_val == 65527, rs2_h2_val == 65531, rs1_h1_val == 57343, rs2_h1_val == 16
// opcode: umax16 ; op1:x13; op2:x28; dest:x10; op1val:0xff7f000cdfff0012;  op2val:0xff7ffffb0010fff7
TEST_RR_OP(umax16, x10, x13, x28, 0x0000000000000000, 0xff7f000cdfff0012, 0xff7ffffb0010fff7, x7, 112, x9)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_15:
// rs1==x21, rs2==x23, rd==x29, rs2_h3_val == 65471, rs1_h1_val == 64511, rs1_h3_val == 65533, rs1_h2_val == 65527
// opcode: umax16 ; op1:x21; op2:x23; dest:x29; op1val:0xfffdfff7fbff5555;  op2val:0xffbf0040000ffff7
TEST_RR_OP(umax16, x29, x21, x23, 0x0000000000000000, 0xfffdfff7fbff5555, 0xffbf0040000ffff7, x4, 0, x9)

inst_16:
// rs1==x14, rs2==x5, rd==x11, rs2_h3_val == 65519, rs1_h0_val == 64, rs1_h3_val == 65279, rs2_h2_val == 2048, rs2_h0_val == 65533
// opcode: umax16 ; op1:x14; op2:x5; dest:x11; op1val:0xfeff001104000040;  op2val:0xffef08000011fffd
TEST_RR_OP(umax16, x11, x14, x5, 0x0000000000000000, 0xfeff001104000040, 0xffef08000011fffd, x4, 8, x9)

inst_17:
// rs1==x19, rs2==x15, rd==x26, rs2_h3_val == 65527, rs2_h0_val == 32, rs1_h2_val == 256
// opcode: umax16 ; op1:x19; op2:x15; dest:x26; op1val:0x0501000006000a;  op2val:0xfff7400004000020
TEST_RR_OP(umax16, x26, x19, x15, 0x0000000000000000, 0x0501000006000a, 0xfff7400004000020, x4, 16, x9)

inst_18:
// rs1==x25, rs2==x6, rd==x12, rs2_h3_val == 65531, rs1_h3_val == 65527, rs2_h2_val == 63487, rs2_h1_val == 2048
// opcode: umax16 ; op1:x25; op2:x6; dest:x12; op1val:0xfff75555000f0011;  op2val:0xfffbf7ff08000006
TEST_RR_OP(umax16, x12, x25, x6, 0x0000000000000000, 0xfff75555000f0011, 0xfffbf7ff08000006, x4, 24, x9)

inst_19:
// rs1==x24, rs2==x13, rd==x20, rs2_h3_val == 65533, rs1_h2_val == 65471, rs1_h0_val == 64511, rs2_h2_val == 65533
// opcode: umax16 ; op1:x24; op2:x13; dest:x20; op1val:0x13ffbffbfffbff;  op2val:0xfffdfffd0003000b
TEST_RR_OP(umax16, x20, x24, x13, 0x0000000000000000, 0x13ffbffbfffbff, 0xfffdfffd0003000b, x4, 32, x9)

inst_20:
// rs1==x28, rs2==x8, rd==x3, rs2_h3_val == 65534, rs2_h2_val == 8192, rs1_h1_val == 65023, rs1_h3_val == 1024, rs1_h0_val == 65534, rs2_h1_val == 65527
// opcode: umax16 ; op1:x28; op2:x8; dest:x3; op1val:0x400fffffdfffffe;  op2val:0xfffe2000fff70002
TEST_RR_OP(umax16, x3, x28, x8, 0x0000000000000000, 0x400fffffdfffffe, 0xfffe2000fff70002, x4, 40, x9)

inst_21:
// rs1==x1, rs2==x11, rd==x2, rs2_h3_val == 32768, rs1_h2_val == 61439
// opcode: umax16 ; op1:x1; op2:x11; dest:x2; op1val:0x1000efff0009000b;  op2val:0x80000008effffff7
TEST_RR_OP(umax16, x2, x1, x11, 0x0000000000000000, 0x1000efff0009000b, 0x80000008effffff7, x4, 48, x9)

inst_22:
// rs1==x30, rs2==x31, rd==x5, rs2_h3_val == 16384, rs2_h1_val == 64, rs2_h2_val == 21845, rs1_h0_val == 65279
// opcode: umax16 ; op1:x30; op2:x31; dest:x5; op1val:0x0c0200ffdffeff;  op2val:0x400055550040000e
TEST_RR_OP(umax16, x5, x30, x31, 0x0000000000000000, 0x0c0200ffdffeff, 0x400055550040000e, x4, 56, x9)

inst_23:
// rs1==x15, rs2==x1, rd==x24, rs2_h3_val == 8192, rs2_h2_val == 128
// opcode: umax16 ; op1:x15; op2:x1; dest:x24; op1val:0x80fff7000e000a;  op2val:0x20000080efff0011
TEST_RR_OP(umax16, x24, x15, x1, 0x0000000000000000, 0x80fff7000e000a, 0x20000080efff0011, x4, 64, x9)

inst_24:
// rs1==x7, rs2==x18, rd==x28, rs2_h3_val == 4096, rs2_h2_val == 65503, rs1_h2_val == 16, rs1_h3_val == 57343
// opcode: umax16 ; op1:x7; op2:x18; dest:x28; op1val:0xdfff0010fdff0006;  op2val:0x1000ffdf000a000e
TEST_RR_OP(umax16, x28, x7, x18, 0x0000000000000000, 0xdfff0010fdff0006, 0x1000ffdf000a000e, x4, 72, x9)

inst_25:
// rs1==x26, rs2==x16, rd==x14, rs2_h3_val == 2048, rs2_h1_val == 65023, rs1_h1_val == 128
// opcode: umax16 ; op1:x26; op2:x16; dest:x14; op1val:0x0c00120080000d;  op2val:0x8000200fdff0011
TEST_RR_OP(umax16, x14, x26, x16, 0x0000000000000000, 0x0c00120080000d, 0x8000200fdff0011, x4, 80, x9)

inst_26:
// rs1==x8, rs2==x19, rd==x0, rs2_h3_val == 1024, rs1_h0_val == 65503, rs1_h1_val == 21845, rs1_h2_val == 64511, rs2_h1_val == 32
// opcode: umax16 ; op1:x8; op2:x19; dest:x0; op1val:0x07fbff5555ffdf;  op2val:0x40000070020ffbf
TEST_RR_OP(umax16, x0, x8, x19, 0x0000000000000000, 0x07fbff5555ffdf, 0x40000070020ffbf, x4, 88, x5)

inst_27:
// rs1==x29, rs2==x27, rd==x18, rs2_h3_val == 512, rs2_h2_val == 49151, rs2_h0_val == 57343
// opcode: umax16 ; op1:x29; op2:x27; dest:x18; op1val:0x0a000f4000000a;  op2val:0x200bfff0009dfff
TEST_RR_OP(umax16, x18, x29, x27, 0x0000000000000000, 0x0a000f4000000a, 0x200bfff0009dfff, x4, 96, x5)

inst_28:
// rs1==x2, rs2==x7, rd==x30, rs2_h3_val == 256, rs1_h2_val == 65503, rs1_h1_val == 49151, rs2_h0_val == 512
// opcode: umax16 ; op1:x2; op2:x7; dest:x30; op1val:0xffdfffdfbfff0040;  op2val:0x100020000060200
TEST_RR_OP(umax16, x30, x2, x7, 0x0000000000000000, 0xffdfffdfbfff0040, 0x100020000060200, x4, 104, x5)

inst_29:
// rs1==x23, rs2==x3, rd==x16, rs2_h3_val == 128, rs2_h0_val == 43690, rs1_h3_val == 65519
// opcode: umax16 ; op1:x23; op2:x3; dest:x16; op1val:0xffef400000008000;  op2val:0x8000070011aaaa
TEST_RR_OP(umax16, x16, x23, x3, 0x0000000000000000, 0xffef400000008000, 0x8000070011aaaa, x4, 112, x5)

inst_30:
// rs1==x31, rs2==x29, rd==x7, rs2_h3_val == 64, rs1_h3_val == 64511, rs2_h0_val == 65503, rs1_h2_val == 43690
// opcode: umax16 ; op1:x31; op2:x29; dest:x7; op1val:0xfbffaaaa0080fbff;  op2val:0x4000100003ffdf
TEST_RR_OP(umax16, x7, x31, x29, 0x0000000000000000, 0xfbffaaaa0080fbff, 0x4000100003ffdf, x4, 120, x5)

inst_31:
// rs1==x18, rs2==x9, rd==x31, rs2_h3_val == 8, rs2_h1_val == 4, rs1_h0_val == 65023, rs2_h0_val == 16384
// opcode: umax16 ; op1:x18; op2:x9; dest:x31; op1val:0x100000800012fdff;  op2val:0x08000500044000
TEST_RR_OP(umax16, x31, x18, x9, 0x0000000000000000, 0x100000800012fdff, 0x08000500044000, x4, 128, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs2_h3_val == 4, rs1_h1_val == 32767, rs2_h2_val == 61439, rs1_h0_val == 65531, rs2_h1_val == 65279, rs1_h3_val == 61439
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff7ffffffb;  op2val:0x04effffeff0009
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xefffffff7ffffffb, 0x04effffeff0009, x1, 0, x5)

inst_33:
// rs2_h3_val == 2, rs1_h0_val == 65535
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x1300020007ffff;  op2val:0x02aaaa0800000a
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x1300020007ffff, 0x02aaaa0800000a, x1, 8, x5)

inst_34:
// rs2_h3_val == 1, rs1_h2_val == 0, rs1_h1_val == 2048, rs2_h0_val == 64511, rs1_h3_val == 63487
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff00000800fdff;  op2val:0x0100130011fbff
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xf7ff00000800fdff, 0x0100130011fbff, x1, 16, x5)

inst_35:
// rs2_h3_val == 65535, rs1_h0_val == 8, rs1_h1_val == 16
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c000a00100008;  op2val:0xffffffdffffb000b
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x0c000a00100008, 0xffffffdffffb000b, x1, 24, x5)

inst_36:
// rs2_h3_val == 0, rs1_h1_val == 512, rs2_h0_val == 65531
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff00000200000d;  op2val:0x0000080008fffb
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xfbff00000200000d, 0x0000080008fffb, x1, 32, x5)

inst_37:
// rs2_h2_val == 32767, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000fdfff0000;  op2val:0x047fff000a000c
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xffdf000fdfff0000, 0x047fff000a000c, x1, 40, x5)

inst_38:
// rs1_h1_val == 2, rs1_h0_val == 8192, rs2_h0_val == 16, rs1_h2_val == 65023
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffdff00022000;  op2val:0x09f7ff00040010
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xfbfffdff00022000, 0x09f7ff00040010, x1, 48, x5)

inst_39:
// rs1_h1_val == 1, rs2_h0_val == 65534, rs1_h2_val == 32768
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x07800000015555;  op2val:0x02000b4000fffe
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x07800000015555, 0x02000b4000fffe, x1, 56, x5)

inst_40:
// rs1_h1_val == 65535, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x130009ffff0020;  op2val:0x030002000b000e
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x130009ffff0020, 0x030002000b000e, x1, 64, x5)

inst_41:
// rs1_h0_val == 43690, rs2_h0_val == 1, rs2_h1_val == 4096, rs1_h1_val == 65407
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x0f0002ff7faaaa;  op2val:0x06555510000001
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x0f0002ff7faaaa, 0x06555510000001, x1, 72, x5)

inst_42:
// rs1_h0_val == 49151, rs1_h3_val == 65471, rs1_h2_val == 65533
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffd0006bfff;  op2val:0x1000dffffdff0002
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xffbffffd0006bfff, 0x1000dffffdff0002, x1, 80, x5)

inst_43:
// rs1_h0_val == 61439, rs2_h0_val == 65279
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b0008000befff;  op2val:0x0ef7ff0005feff
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x0b0008000befff, 0x0ef7ff0005feff, x1, 88, x5)

inst_44:
// rs1_h0_val == 63487, rs1_h1_val == 8
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x1300090008f7ff;  op2val:0x1000dfff000dfffd
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x1300090008f7ff, 0x1000dfff000dfffd, x1, 96, x5)

inst_45:
// rs1_h0_val == 65407, rs1_h1_val == 65279
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x13ffbffeffff7f;  op2val:0x400000500400011
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x13ffbffeffff7f, 0x400000500400011, x1, 104, x5)

inst_46:
// rs1_h0_val == 65519, rs1_h1_val == 32
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000020ffef;  op2val:0x0c000e00120007
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x8000000020ffef, 0x0c000e00120007, x1, 112, x5)

inst_47:
// rs1_h0_val == 65527, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x0afff7fefffff7;  op2val:0xffbfefff000d0005
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x0afff7fefffff7, 0xffbfefff000d0005, x1, 120, x5)

inst_48:
// rs1_h0_val == 65533, rs1_h3_val == 32768, rs2_h1_val == 65519
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000f5555fffd;  op2val:0x130080ffef0006
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x8000000f5555fffd, 0x130080ffef0006, x1, 128, x5)

inst_49:
// rs1_h0_val == 16384, rs2_h2_val == 1
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0003ff7f4000;  op2val:0xaaaa0001fdff0040
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xfbff0003ff7f4000, 0xaaaa0001fdff0040, x1, 136, x5)

inst_50:
// rs1_h0_val == 4096, rs1_h2_val == 2048, rs2_h1_val == 8192
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000800bfff1000;  op2val:0x08ff7f20000007
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x10000800bfff1000, 0x08ff7f20000007, x1, 144, x5)

inst_51:
// rs1_h0_val == 2048, rs1_h2_val == 63487, rs2_h2_val == 65023, rs1_h3_val == 8192
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000f7ffefff0800;  op2val:0x0ffdff000afffe
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x2000f7ffefff0800, 0x0ffdff000afffe, x1, 152, x5)

inst_52:
// rs1_h0_val == 1024, rs1_h2_val == 49151, rs2_h2_val == 64511, rs2_h1_val == 49151
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x0cbfff00080400;  op2val:0xaaaafbffbfff0080
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x0cbfff00080400, 0xaaaafbffbfff0080, x1, 160, x5)

inst_53:
// rs1_h0_val == 512, rs1_h2_val == 57343
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaadfff00120200;  op2val:0x7fff400000115555
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xaaaadfff00120200, 0x7fff400000115555, x1, 168, x5)

inst_54:
// rs1_h0_val == 256, rs1_h3_val == 512, rs1_h2_val == 4, rs2_h2_val == 256
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000004ff7f0100;  op2val:0x0d0100000cbfff
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x2000004ff7f0100, 0x0d0100000cbfff, x1, 176, x5)

inst_55:
// rs1_h0_val == 128, rs2_h1_val == 65534
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf4000000b0080;  op2val:0x09dffffffefeff
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xffdf4000000b0080, 0x09dffffffefeff, x1, 184, x5)

inst_56:
// rs1_h0_val == 16, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffdff00000010;  op2val:0xdfff5555bfff0002
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xfefffdff00000010, 0xdfff5555bfff0002, x1, 192, x5)

inst_57:
// rs1_h0_val == 4, rs2_h0_val == 8192, rs1_h2_val == 65279
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffeff55550004;  op2val:0x0a000dfffb2000
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xfbfffeff55550004, 0x0a000dfffb2000, x1, 200, x5)

inst_58:
// rs1_h0_val == 2, rs1_h1_val == 64
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000400000400002;  op2val:0x07aaaa00000010
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x2000400000400002, 0x07aaaa00000010, x1, 208, x5)

inst_59:
// rs2_h2_val == 65279, rs2_h0_val == 61439
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x08010000100100;  op2val:0x800feff0020efff
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x08010000100100, 0x800feff0020efff, x1, 216, x5)

inst_60:
// rs2_h2_val == 65471, rs1_h3_val == 49151, rs1_h1_val == 65527
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff000afff70004;  op2val:0x08ffbf0040ffbf
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xbfff000afff70004, 0x08ffbf0040ffbf, x1, 224, x5)

inst_61:
// rs2_h2_val == 65519, rs2_h1_val == 64511, rs1_h3_val == 1, rs2_h0_val == 4, rs1_h2_val == 65407
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ff7f000dffdf;  op2val:0x11ffeffbff0004
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x01ff7f000dffdf, 0x11ffeffbff0004, x1, 232, x5)

inst_62:
// rs2_h2_val == 65527, rs2_h1_val == 21845, rs1_h3_val == 16
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x100006bfff000c;  op2val:0x0efff755550001
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x100006bfff000c, 0x0efff755550001, x1, 240, x5)

inst_63:
// rs2_h0_val == 65519, rs2_h1_val == 32767
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x0efefffff71000;  op2val:0x200000c7fffffef
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x0efefffff71000, 0x200000c7fffffef, x1, 248, x5)

inst_64:
// rs2_h0_val == 4096, rs1_h2_val == 8192
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000200000130100;  op2val:0xffff001320001000
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x1000200000130100, 0xffff001320001000, x1, 256, x5)

inst_65:
// rs2_h0_val == 2048, rs1_h2_val == 32
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff00200003ffef;  op2val:0xffef7fff00080800
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xefff00200003ffef, 0xffef7fff00080800, x1, 264, x5)

inst_66:
// rs2_h0_val == 1024, rs2_h1_val == 63487
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7000400070020;  op2val:0x13bffff7ff0400
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xfff7000400070020, 0x13bffff7ff0400, x1, 272, x5)

inst_67:
// rs2_h0_val == 256, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fdffff7f0001;  op2val:0xffdf0005000c0100
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x80fdffff7f0001, 0xffdf0005000c0100, x1, 280, x5)

inst_68:
// rs2_h0_val == 8, rs1_h2_val == 32767, rs2_h2_val == 32768
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x80007fff000bfdff;  op2val:0x4000800000070008
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x80007fff000bfdff, 0x4000800000070008, x1, 288, x5)

inst_69:
// rs2_h0_val == 65535, rs1_h3_val == 65535
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff000adfff0000;  op2val:0x0555555555ffff
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xffff000adfff0000, 0x0555555555ffff, x1, 296, x5)

inst_70:
// rs1_h3_val == 21845, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555000cffff0800;  op2val:0x0d0002000b000f
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x5555000cffff0800, 0x0d0002000b000f, x1, 304, x5)

inst_71:
// rs1_h3_val == 32767, rs1_h1_val == 65533, rs2_h1_val == 256
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff2000fffddfff;  op2val:0x20efff0100fffe
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x7fff2000fffddfff, 0x20efff0100fffe, x1, 312, x5)

inst_72:
// rs1_h3_val == 65023, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0002000c0009;  op2val:0x4001000009ffdf
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xfdff0002000c0009, 0x4001000009ffdf, x1, 320, x5)

inst_73:
// rs1_h3_val == 65531, rs2_h2_val == 1024
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000c0040fbff;  op2val:0x080400fbffffdf
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xfffb000c0040fbff, 0x080400fbffffdf, x1, 328, x5)

inst_74:
// rs1_h3_val == 65534, rs2_h1_val == 65533, rs2_h0_val == 32767
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe000b0011fffb;  op2val:0x0b7ffffffd7fff
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xfffe000b0011fffb, 0x0b7ffffffd7fff, x1, 336, x5)

inst_75:
// rs1_h3_val == 16384, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000013ff7f0009;  op2val:0x4000000c00090080
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x40000013ff7f0009, 0x4000000c00090080, x1, 344, x5)

inst_76:
// rs1_h3_val == 2048, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x800ffbf00800005;  op2val:0x0afdff0004000e
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x800ffbf00800005, 0x0afdff0004000e, x1, 352, x5)

inst_77:
// rs1_h3_val == 256, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fffd0800aaaa;  op2val:0x5555ffbf000cffef
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x100fffd0800aaaa, 0x5555ffbf000cffef, x1, 360, x5)

inst_78:
// rs1_h3_val == 64, rs1_h1_val == 65534
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x400007fffefeff;  op2val:0x0ffffbfdffffbf
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x400007fffefeff, 0x0ffffbfdffffbf, x1, 368, x5)

inst_79:
// rs1_h3_val == 0, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x0004000800aaaa;  op2val:0x0e00060011000e
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x0004000800aaaa, 0x0e00060011000e, x1, 376, x5)

inst_80:
// rs2_h2_val == 4096, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x13fffd0003000a;  op2val:0xbfff100000090001
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x13fffd0003000a, 0xbfff100000090001, x1, 384, x5)

inst_81:
// rs2_h2_val == 32, rs1_h2_val == 65534
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffe000bfffb;  op2val:0xffdf0020000bffef
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xffeffffe000bfffb, 0xffdf0020000bffef, x1, 392, x5)

inst_82:
// rs1_h2_val == 65519, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x100ffef0200fbff;  op2val:0x09000b0000000d
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x100ffef0200fbff, 0x09000b0000000d, x1, 400, x5)

inst_83:
// rs1_h2_val == 65531, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffb0011fffd;  op2val:0x10000012efff000e
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xfff7fffb0011fffd, 0x10000012efff000e, x1, 408, x5)

inst_84:
// rs2_h2_val == 65535, rs2_h1_val == 32768
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x800020000efdff;  op2val:0x0fffff80000004
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x800020000efdff, 0x0fffff80000004, x1, 416, x5)

inst_85:
// rs2_h1_val == 43690, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffdffff000d;  op2val:0xfffd0800aaaaffbf
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xbffffffdffff000d, 0xfffd0800aaaaffbf, x1, 424, x5)

inst_86:
// rs1_h2_val == 4096, rs1_h1_val == 256
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x8010000100fdff;  op2val:0x800000d5555fffe
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x8010000100fdff, 0x800000d5555fffe, x1, 432, x5)

inst_87:
// rs1_h2_val == 64, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0040fbfffffb;  op2val:0x040080feff0005
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xfbff0040fbfffffb, 0x040080feff0005, x1, 440, x5)

inst_88:
// rs2_h1_val == 65407, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x11008000020013;  op2val:0xaaaa0040ff7f0200
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x11008000020013, 0xaaaa0040ff7f0200, x1, 448, x5)

inst_89:
// rs2_h1_val == 65503, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d001200000001;  op2val:0x0a0012ffdf0011
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x0d001200000001, 0x0a0012ffdf0011, x1, 456, x5)

inst_90:
// rs1_h2_val == 1, rs1_h1_val == 65519
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x040001ffeff7ff;  op2val:0x40000020dfff000c
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x040001ffeff7ff, 0x40000020dfff000c, x1, 464, x5)

inst_91:
// rs1_h1_val == 43690, rs2_h0_val == 63487, rs2_h2_val == 65534
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x010007aaaa0001;  op2val:0x07fffe0400f7ff
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x010007aaaa0001, 0x07fffe0400f7ff, x1, 472, x5)

inst_92:
// rs1_h1_val == 63487, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70000f7ffffdf;  op2val:0x0cfffd000e0013
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xfff70000f7ffffdf, 0x0cfffd000e0013, x1, 480, x5)

inst_93:
// rs2_h1_val == 512, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x400ff7f7ffffffe;  op2val:0x11aaaa02000005
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x400ff7f7ffffffe, 0x11aaaa02000005, x1, 488, x5)

inst_94:
// rs2_h1_val == 128, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd000f0008feff;  op2val:0xdffffbff00805555
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xfffd000f0008feff, 0xdffffbff00805555, x1, 496, x5)

inst_95:
// rs1_h1_val == 65531, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0006fffb5555;  op2val:0x200200000000003
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xfffd0006fffb5555, 0x200200000000003, x1, 504, x5)

inst_96:
// rs2_h1_val == 2, rs1_h1_val == 32768
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x0000088000000d;  op2val:0xffbf000600020080
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x0000088000000d, 0xffbf000600020080, x1, 512, x5)

inst_97:
// rs2_h1_val == 1, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b000702000100;  op2val:0x1000090001ffff
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x0b000702000100, 0x1000090001ffff, x1, 520, x5)

inst_98:
// rs2_h1_val == 65535, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff00800020feff;  op2val:0xfdff0004ffff0001
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xbfff00800020feff, 0xfdff0004ffff0001, x1, 528, x5)

inst_99:
// rs2_h0_val == 65023, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x060040ff7f000e;  op2val:0x0b000b0004fdff
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x060040ff7f000e, 0x0b000b0004fdff, x1, 536, x5)

inst_100:
// rs1_h1_val == 8192, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff2000000f;  op2val:0x13ff7f00000008
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0xdfffffff2000000f, 0x13ff7f00000008, x1, 544, x5)

inst_101:
// rs1_h1_val == 4096, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x13000310000002;  op2val:0x100000300131000
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x13000310000002, 0x100000300131000, x1, 552, x5)

inst_102:
// rs2_h0_val == 65407, 
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b00208000000e;  op2val:0x40000080001ff7f
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x0b00208000000e, 0x40000080001ff7f, x1, 560, x5)

inst_103:
// rs2_h3_val == 1024, rs1_h0_val == 65503, rs1_h1_val == 21845, rs1_h2_val == 64511, rs2_h1_val == 32
// opcode: umax16 ; op1:x30; op2:x29; dest:x31; op1val:0x07fbff5555ffdf;  op2val:0x40000070020ffbf
TEST_RR_OP(umax16, x31, x30, x29, 0x0000000000000000, 0x07fbff5555ffdf, 0x40000070020ffbf, x1, 568, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 72*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
