
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kwmmul instruction of the RISC-V RV64PZicsr extension for the kwmmul covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kwmmul)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 == rd != rs2, rs1==x15, rs2==x29, rd==x15, rs1_w0_val == -2147483648, rs2_w1_val == 4, rs2_w0_val == -16385, rs1_w1_val == 1048576
// opcode: kwmmul ; op1:x15; dest:x15; op1val:0x10000080000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x15, x15, x29, 0x0000000000000000, 0x10000080000000, 0x000004ffffbfff, x15, x5, 0, x6)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x22, rs2==x20, rd==x14, rs2_w1_val == -1431655766, rs2_w0_val == 16
// opcode: kwmmul ; op1:x22; dest:x14; op1val:0xffff4afd55555554;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x14, x22, x20, 0x0000000000000000, 0xffff4afd55555554, 0xaaaaaaaa00000010, x22, x5, 16, x6)

inst_2:
// rs1 == rs2 != rd, rs1==x4, rs2==x4, rd==x21, rs2_w1_val == 1431655765, rs1_w0_val == -5, rs1_w1_val == 32
// opcode: kwmmul ; op1:x4; dest:x21; op1val:0x000020fffffffb;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x21, x4, x4, 0x0000000000000000, 0x000020fffffffb, 0x5555555500000005, x4, x5, 32, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x19, rs2==x19, rd==x19, rs2_w1_val == 2147483647, rs1_w0_val == -268435457, rs2_w0_val == 8
// opcode: kwmmul ; op1:x19; dest:x19; op1val:0x000006efffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x19, x19, x19, 0x0000000000000000, 0x000006efffffff, 0x7fffffff00000008, x19, x5, 48, x6)

inst_4:
// rs2 == rd != rs1, rs1==x0, rs2==x11, rd==x11, rs2_w1_val == -1073741825, rs1_w0_val == 2147483647
// opcode: kwmmul ; op1:x0; dest:x11; op1val:0x0000207fffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x11, x0, x11, 0x0000000000000000, 0x0000207fffffff, 0xbffffffffffffffc, x0, x5, 64, x6)

inst_5:
// rs1==x24, rs2==x13, rd==x7, rs2_w1_val == -536870913, rs1_w1_val == -257
// opcode: kwmmul ; op1:x24; dest:x7; op1val:0xfffffeff0000b505;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x7, x24, x13, 0x0000000000000000, 0xfffffeff0000b505, 0xdfffffff55555554, x24, x5, 80, x6)

inst_6:
// rs1==x1, rs2==x17, rd==x20, rs2_w1_val == -268435457, rs1_w0_val == 268435456
// opcode: kwmmul ; op1:x1; dest:x20; op1val:0x00000710000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x20, x1, x17, 0x0000000000000000, 0x00000710000000, 0xefffffff66666665, x1, x5, 96, x6)

inst_7:
// rs1==x18, rs2==x21, rd==x17, rs2_w1_val == -134217729, rs1_w1_val == 65536, rs2_w0_val == 1048576, rs1_w0_val == 2
// opcode: kwmmul ; op1:x18; dest:x17; op1val:0x01000000000002;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x17, x18, x21, 0x0000000000000000, 0x01000000000002, 0xf7ffffff00100000, x18, x5, 112, x6)

inst_8:
// rs1==x30, rs2==x22, rd==x9, rs2_w1_val == -67108865, rs1_w1_val == 536870912
// opcode: kwmmul ; op1:x30; dest:x9; op1val:0x20000000ffff4afd;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x9, x30, x22, 0x0000000000000000, 0x20000000ffff4afd, 0xfbffffffaaaaaaab, x30, x5, 128, x6)

inst_9:
// rs1==x16, rs2==x25, rd==x10, rs2_w1_val == -33554433, rs1_w1_val == 8388608
// opcode: kwmmul ; op1:x16; dest:x10; op1val:0x80000066666667;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x10, x16, x25, 0x0000000000000000, 0x80000066666667, 0xfdffffffaaaaaaab, x16, x5, 144, x6)

inst_10:
// rs1==x14, rs2==x12, rd==x25, rs2_w1_val == -16777217, rs1_w0_val == -262145, rs1_w1_val == -8193
// opcode: kwmmul ; op1:x14; dest:x25; op1val:0xffffdffffffbffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x25, x14, x12, 0x0000000000000000, 0xffffdffffffbffff, 0xfeffffff3fffffff, x14, x5, 160, x6)

inst_11:
// rs1==x29, rs2==x2, rd==x3, rs2_w1_val == -8388609, rs1_w1_val == 4, rs2_w0_val == -8193, rs1_w0_val == 1431655765
// opcode: kwmmul ; op1:x29; dest:x3; op1val:0x00000455555555;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x3, x29, x2, 0x0000000000000000, 0x00000455555555, 0xff7fffffffffdfff, x29, x5, 176, x6)

inst_12:
// rs1==x31, rs2==x24, rd==x23, rs2_w1_val == -4194305, rs1_w1_val == 16384, rs1_w0_val == -1431655766
// opcode: kwmmul ; op1:x31; dest:x23; op1val:0x004000aaaaaaaa;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x23, x31, x24, 0x0000000000000000, 0x004000aaaaaaaa, 0xffbfffff0000b504, x31, x5, 192, x6)

inst_13:
// rs1==x13, rs2==x10, rd==x27, rs2_w1_val == -2097153, rs1_w0_val == -4194305, rs1_w1_val == -2147483648
// opcode: kwmmul ; op1:x13; dest:x27; op1val:0x80000000ffbfffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x27, x13, x10, 0x0000000000000000, 0x80000000ffbfffff, 0xffdfffffc0000000, x13, x5, 208, x6)

inst_14:
// rs1==x7, rs2==x8, rd==x31, rs2_w1_val == -1048577, rs2_w0_val == 32, rs1_w1_val == -513
// opcode: kwmmul ; op1:x7; dest:x31; op1val:0xfffffdff3fffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x7, x8, 0x0000000000000000, 0xfffffdff3fffffff, 0xffefffff00000020, x7, x5, 224, x13)
RVTEST_SIGBASE(x11,signature_x11_0)

inst_15:
// rs1==x10, rs2==x23, rd==x2, rs2_w1_val == -524289, rs1_w1_val == 1073741824
// opcode: kwmmul ; op1:x10; dest:x2; op1val:0x40000000fffffff8;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x2, x10, x23, 0x0000000000000000, 0x40000000fffffff8, 0xfff7ffff66666665, x10, x11, 0, x13)

inst_16:
// rs1==x17, rs2==x27, rd==x30, rs2_w1_val == -262145, rs1_w1_val == 262144
// opcode: kwmmul ; op1:x17; dest:x30; op1val:0x040000fffffff6;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x30, x17, x27, 0x0000000000000000, 0x040000fffffff6, 0xfffbfffffffffff8, x17, x11, 16, x13)

inst_17:
// rs1==x12, rs2==x28, rd==x6, rs2_w1_val == -131073, rs1_w0_val == -33, rs2_w0_val == -4097, rs1_w1_val == -2097153
// opcode: kwmmul ; op1:x12; dest:x6; op1val:0xffdfffffffffffdf;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x6, x12, x28, 0x0000000000000000, 0xffdfffffffffffdf, 0xfffdffffffffefff, x12, x11, 32, x13)

inst_18:
// rs1==x28, rs2==x31, rd==x1, rs2_w1_val == -65537, rs1_w1_val == 131072, rs2_w0_val == -65537, rs1_w0_val == 0
// opcode: kwmmul ; op1:x28; dest:x1; op1val:0x02000000000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x1, x28, x31, 0x0000000000000000, 0x02000000000000, 0xfffefffffffeffff, x28, x11, 48, x13)

inst_19:
// rs1==x25, rs2==x0, rd==x22, rs2_w1_val == -32769, rs1_w1_val == -65
// opcode: kwmmul ; op1:x25; dest:x22; op1val:0xffffffbfaaaaaaab;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x22, x25, x0, 0x0000000000000000, 0xffffffbfaaaaaaab, 0xffff7fff00000005, x25, x11, 64, x13)

inst_20:
// rs1==x6, rs2==x3, rd==x5, rs2_w1_val == -16385, 
// opcode: kwmmul ; op1:x6; dest:x5; op1val:0xffff4afcffff4afd;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x5, x6, x3, 0x0000000000000000, 0xffff4afcffff4afd, 0xffffbfff55555556, x6, x11, 80, x13)

inst_21:
// rs1==x8, rs2==x5, rd==x0, rs2_w1_val == -8193, rs2_w0_val == 8192, rs1_w0_val == 4194304
// opcode: kwmmul ; op1:x8; dest:x0; op1val:0xffdfffff00400000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x0, x8, x5, 0x0000000000000000, 0xffdfffff00400000, 0xffffdfff00002000, x8, x11, 96, x13)

inst_22:
// rs1==x21, rs2==x15, rd==x26, rs2_w1_val == -4097, rs1_w1_val == -1025, rs2_w0_val == -131073
// opcode: kwmmul ; op1:x21; dest:x26; op1val:0xfffffbff00000005;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x26, x21, x15, 0x0000000000000000, 0xfffffbff00000005, 0xffffeffffffdffff, x21, x11, 112, x13)

inst_23:
// rs1==x2, rs2==x6, rd==x12, rs2_w1_val == -2049, rs2_w0_val == 1431655765
// opcode: kwmmul ; op1:x2; dest:x12; op1val:0xffff4afd00000002;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x12, x2, x6, 0x0000000000000000, 0xffff4afd00000002, 0xfffff7ff55555555, x2, x11, 128, x13)

inst_24:
// rs1==x23, rs2==x1, rd==x29, rs2_w1_val == -1025, rs2_w0_val == -9
// opcode: kwmmul ; op1:x23; dest:x29; op1val:0xfffffff800000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x29, x23, x1, 0x0000000000000000, 0xfffffff800000000, 0xfffffbfffffffff7, x23, x11, 144, x13)

inst_25:
// rs1==x20, rs2==x30, rd==x8, rs2_w1_val == -513, rs2_w0_val == 536870912
// opcode: kwmmul ; op1:x20; dest:x8; op1val:0x000005ffff4afc;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x8, x20, x30, 0x0000000000000000, 0x000005ffff4afc, 0xfffffdff20000000, x20, x11, 160, x13)

inst_26:
// rs1==x26, rs2==x9, rd==x18, rs2_w1_val == -257, rs2_w0_val == 4194304, rs1_w1_val == 0, rs1_w0_val == -129
// opcode: kwmmul ; op1:x26; dest:x18; op1val:0x000000ffffff7f;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x18, x26, x9, 0x0000000000000000, 0x000000ffffff7f, 0xfffffeff00400000, x26, x11, 176, x13)

inst_27:
// rs1==x9, rs2==x7, rd==x4, rs2_w1_val == -129, rs1_w1_val == 1431655765, rs2_w0_val == 128
// opcode: kwmmul ; op1:x9; dest:x4; op1val:0x5555555500000007;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x4, x9, x7, 0x0000000000000000, 0x5555555500000007, 0xffffff7f00000080, x9, x11, 192, x13)

inst_28:
// rs1==x5, rs2==x14, rd==x28, rs2_w1_val == -65, 
// opcode: kwmmul ; op1:x5; dest:x28; op1val:0x4000000000000005;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x28, x5, x14, 0x0000000000000000, 0x4000000000000005, 0xffffffbfffffefff, x5, x11, 208, x13)

inst_29:
// rs1==x3, rs2==x18, rd==x13, rs2_w1_val == -33, rs1_w1_val == 268435456, rs2_w0_val == -2147483648
// opcode: kwmmul ; op1:x3; dest:x13; op1val:0x100000000000b503;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x13, x3, x18, 0x0000000000000000, 0x100000000000b503, 0xffffffdf80000000, x3, x11, 224, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x27, rs2==x26, rd==x24, rs2_w1_val == -17, 
// opcode: kwmmul ; op1:x27; dest:x24; op1val:0xfffffff800000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x24, x27, x26, 0x0000000000000000, 0xfffffff800000000, 0xffffffefffff4afc, x27, x1, 0, x2)

inst_31:
// rs1==x11, rs2_w1_val == -9, rs1_w0_val == 2048, rs2_w0_val == 0
// opcode: kwmmul ; op1:x11; dest:x26; op1val:0xffff4afd00000800;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x26, x11, x22, 0x0000000000000000, 0xffff4afd00000800, 0xfffffff700000000, x11, x1, 16, x2)

inst_32:
// rs2==x16, rs2_w1_val == -5, rs2_w0_val == -1025, rs1_w1_val == 8
// opcode: kwmmul ; op1:x3; dest:x9; op1val:0x00000855555554;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x9, x3, x16, 0x0000000000000000, 0x00000855555554, 0xfffffffbfffffbff, x3, x1, 32, x2)

inst_33:
// rd==x16, rs2_w1_val == -3, rs1_w0_val == -536870913
// opcode: kwmmul ; op1:x0; dest:x16; op1val:0x000003dfffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x16, x0, x21, 0x0000000000000000, 0x000003dfffffff, 0xfffffffd00000000, x0, x1, 48, x2)

inst_34:
// rs2_w1_val == -2, rs2_w0_val == -536870913
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x00000780000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x00000780000000, 0xfffffffedfffffff, x30, x1, 64, x2)

inst_35:
// rs2_w1_val == -2147483648, rs1_w1_val == 4194304
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x40000080000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x40000080000000, 0x8000000066666666, x30, x1, 80, x2)

inst_36:
// rs2_w1_val == 1073741824, rs1_w1_val == 67108864
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x400000000000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x400000000000000, 0x4000000000000003, x30, x1, 96, x2)

inst_37:
// rs2_w1_val == 536870912, rs1_w1_val == -1073741825
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xbfffffff00000005;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000005, 0x2000000033333334, x30, x1, 112, x2)

inst_38:
// rs2_w1_val == 268435456, rs1_w1_val == 32768, rs2_w0_val == -5
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x0080007fffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x0080007fffffff, 0x10000000fffffffb, x30, x1, 128, x2)

inst_39:
// rs2_w1_val == 134217728, rs2_w0_val == 4, rs1_w0_val == -1025
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x010000fffffbff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x010000fffffbff, 0x800000000000004, x30, x1, 144, x2)

inst_40:
// rs2_w1_val == 67108864, rs2_w0_val == 4096, rs1_w1_val == -524289
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfff7fffffffffff9;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffffff9, 0x400000000001000, x30, x1, 160, x2)

inst_41:
// rs2_w1_val == 33554432, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x6666666600000007;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x6666666600000007, 0x200000000000003, x30, x1, 176, x2)

inst_42:
// rs2_w1_val == 16777216, rs1_w1_val == 524288
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x080000efffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x080000efffffff, 0x1000000ffff4afd, x30, x1, 192, x2)

inst_43:
// rs2_w1_val == 8388608, rs2_w0_val == -1048577
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x0080003fffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x0080003fffffff, 0x800000ffefffff, x30, x1, 208, x2)

inst_44:
// rs2_w1_val == 4194304, rs1_w1_val == -262145
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfffbffff00000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000000, 0x40000066666666, x30, x1, 224, x2)

inst_45:
// rs2_w1_val == 2097152, rs1_w1_val == 2, rs1_w0_val == -9
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x000002fffffff7;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x000002fffffff7, 0x20000000000010, x30, x1, 240, x2)

inst_46:
// rs2_w1_val == 1048576, rs2_w0_val == 2147483647
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x3333333300000006;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x3333333300000006, 0x1000007fffffff, x30, x1, 256, x2)

inst_47:
// rs2_w1_val == 524288, rs2_w0_val == -65
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfff7ffff00000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000000, 0x080000ffffffbf, x30, x1, 272, x2)

inst_48:
// rs2_w1_val == 262144, rs1_w1_val == 128, rs1_w0_val == -16777217
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x000080feffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x000080feffffff, 0x04000000001000, x30, x1, 288, x2)

inst_49:
// rs2_w1_val == 131072, rs1_w0_val == -67108865, rs2_w0_val == 65536
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffff4afdfbffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffff4afdfbffffff, 0x02000000010000, x30, x1, 304, x2)

inst_50:
// rs2_w1_val == 65536, rs1_w0_val == 65536
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffff4afd00010000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffff4afd00010000, 0x010000ffefffff, x30, x1, 320, x2)

inst_51:
// rs2_w1_val == 32768, rs2_w0_val == -3
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfffffbff00000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000000, 0x008000fffffffd, x30, x1, 336, x2)

inst_52:
// rs2_w1_val == 16384, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x02000033333333;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x02000033333333, 0x004000ffff4afd, x30, x1, 352, x2)

inst_53:
// rs2_w1_val == 8192, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfffffffc80000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfffffffc80000000, 0x002000ffff4afd, x30, x1, 368, x2)

inst_54:
// rs2_w1_val == 4096, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffffdfff00000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000000, 0x001000ffff4afd, x30, x1, 384, x2)

inst_55:
// rs2_w1_val == 2048, rs2_w0_val == -1431655766
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffdfffff00400000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffdfffff00400000, 0x000800aaaaaaaa, x30, x1, 400, x2)

inst_56:
// rs2_w1_val == 1024, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x000005fffffffa;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x000005fffffffa, 0x00040000010000, x30, x1, 416, x2)

inst_57:
// rs2_w1_val == 512, rs1_w1_val == 1, rs1_w0_val == -513, rs2_w0_val == 256
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x000001fffffdff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x000001fffffdff, 0x00020000000100, x30, x1, 432, x2)

inst_58:
// rs2_w1_val == 256, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x800000ffffff7f;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x800000ffffff7f, 0x0001000000b505, x30, x1, 448, x2)

inst_59:
// rs2_w1_val == 128, rs1_w0_val == 2097152, rs2_w0_val == 33554432
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfffffff900200000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfffffff900200000, 0x00008002000000, x30, x1, 464, x2)

inst_60:
// rs2_w1_val == 64, rs1_w0_val == 8, rs2_w0_val == 134217728
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x80000000000008;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x80000000000008, 0x00004008000000, x30, x1, 480, x2)

inst_61:
// rs1_w0_val == 8192, rs1_w1_val == -134217729, rs2_w1_val == 2, rs2_w0_val == 32768
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xf7ffffff00002000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00002000, 0x00000200008000, x30, x1, 496, x2)

inst_62:
// rs1_w0_val == 4096, rs1_w1_val == -65537
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfffeffff00001000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfffeffff00001000, 0xffffefff00000009, x30, x1, 512, x2)

inst_63:
// rs1_w0_val == 1024, rs1_w1_val == -1431655766, rs2_w0_val == -257
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xaaaaaaaa00000400;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000400, 0x000005fffffeff, x30, x1, 528, x2)

inst_64:
// rs1_w0_val == 512, rs2_w0_val == -4194305, rs1_w1_val == -33554433
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfdffffff00000200;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000200, 0x800000ffbfffff, x30, x1, 544, x2)

inst_65:
// rs1_w0_val == 256, rs2_w0_val == 2097152
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x00000200000100;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x00000200000100, 0x5555555500200000, x30, x1, 560, x2)

inst_66:
// rs1_w0_val == 128, rs2_w0_val == 1024
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x00000700000080;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x00000700000080, 0xaaaaaaaa00000400, x30, x1, 576, x2)

inst_67:
// rs1_w0_val == 64, rs1_w1_val == -2
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfffffffe00000040;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000040, 0xffff4afc00000000, x30, x1, 592, x2)

inst_68:
// rs1_w0_val == 32, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfff7ffff00000020;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000020, 0xaaaaaaaa0000b503, x30, x1, 608, x2)

inst_69:
// rs1_w0_val == 16, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfdffffff00000010;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000010, 0xaaaaaaaa55555555, x30, x1, 624, x2)

inst_70:
// rs1_w0_val == 4, rs2_w0_val == -16777217
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x00000400000004;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x00000400000004, 0x000004feffffff, x30, x1, 640, x2)

inst_71:
// rs1_w0_val == 1, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffffdfff00000001;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000001, 0xfffffffe00000008, x30, x1, 656, x2)

inst_72:
// rs1_w0_val == -1, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x000007ffffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x000007ffffffff, 0xfffffffaffffffbf, x30, x1, 672, x2)

inst_73:
// rs2_w1_val == 32, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x00002066666665;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x00002066666665, 0x000020fffffffc, x30, x1, 688, x2)

inst_74:
// rs2_w1_val == 16, rs1_w0_val == -65537
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x00b503fffeffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x00b503fffeffff, 0x00001055555554, x30, x1, 704, x2)

inst_75:
// rs2_w1_val == 8, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfdffffff00002000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfdffffff00002000, 0x00000855555555, x30, x1, 720, x2)

inst_76:
// rs2_w1_val == 1, rs1_w1_val == -17
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffffffef00010000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffffffef00010000, 0x000001c0000000, x30, x1, 736, x2)

inst_77:
// rs2_w1_val == 0, rs1_w0_val == -1048577, rs1_w1_val == 16777216
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x1000000ffefffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x1000000ffefffff, 0x00000000100000, x30, x1, 752, x2)

inst_78:
// rs2_w1_val == -1, rs1_w0_val == 1073741824
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x5555555540000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x5555555540000000, 0xffffffff00001000, x30, x1, 768, x2)

inst_79:
// rs2_w0_val == -1073741825, rs1_w0_val == -134217729
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfffbfffff7ffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfffbfffff7ffffff, 0x55555556bfffffff, x30, x1, 784, x2)

inst_80:
// rs2_w0_val == -268435457, rs1_w1_val == -131073
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfffdffff80000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfffdffff80000000, 0x000009efffffff, x30, x1, 800, x2)

inst_81:
// rs2_w0_val == -134217729, rs1_w0_val == -1073741825, rs1_w1_val == -1
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffffffffbfffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffffffffbfffffff, 0xaaaaaaaaf7ffffff, x30, x1, 816, x2)

inst_82:
// rs2_w0_val == -67108865, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfffffff9fffffffb;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfffffff9fffffffb, 0xfffffbfffbffffff, x30, x1, 832, x2)

inst_83:
// rs2_w0_val == -33554433, rs1_w0_val == -16385
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x000002ffffbfff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x000002ffffbfff, 0x66666665fdffffff, x30, x1, 848, x2)

inst_84:
// rs2_w0_val == -8388609, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x00400000000080;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x00400000000080, 0xfffffffcff7fffff, x30, x1, 864, x2)

inst_85:
// rs2_w0_val == -2097153, rs1_w1_val == 4096
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x001000ffff4afd;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x001000ffff4afd, 0x000080ffdfffff, x30, x1, 880, x2)

inst_86:
// rs2_w0_val == -524289, rs1_w1_val == -16777217
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfeffffff00000010;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000010, 0x008000fff7ffff, x30, x1, 896, x2)

inst_87:
// rs2_w0_val == -262145, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfffbffff00400000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfffbffff00400000, 0x33333334fffbffff, x30, x1, 912, x2)

inst_88:
// rs2_w0_val == -32769, rs1_w0_val == 131072
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffffdfff00020000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffffdfff00020000, 0x66666665ffff7fff, x30, x1, 928, x2)

inst_89:
// rs2_w0_val == -2049, rs1_w0_val == -131073
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfdfffffffffdffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffdffff, 0x000002fffff7ff, x30, x1, 944, x2)

inst_90:
// rs2_w0_val == -513, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffff4afd00000002;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffff4afd00000002, 0xfffffffdfffffdff, x30, x1, 960, x2)

inst_91:
// rs2_w0_val == -129, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffffdffffffffffa;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffffdffffffffffa, 0x000040ffffff7f, x30, x1, 976, x2)

inst_92:
// rs2_w0_val == -33, rs1_w0_val == -17, rs1_w1_val == 16
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x000010ffffffef;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x000010ffffffef, 0xdfffffffffffffdf, x30, x1, 992, x2)

inst_93:
// rs2_w0_val == -17, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x00b50466666666;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x00b50466666666, 0x004000ffffffef, x30, x1, 1008, x2)

inst_94:
// rs2_w0_val == -2, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x555555553fffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x555555553fffffff, 0xffffeffffffffffe, x30, x1, 1024, x2)

inst_95:
// rs2_w0_val == 64, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x00000000000004;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x00000000000004, 0xfbffffff00000040, x30, x1, 1040, x2)

inst_96:
// rs2_w0_val == 2, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x3ffffffffffffbff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x3ffffffffffffbff, 0x10000000000002, x30, x1, 1056, x2)

inst_97:
// rs2_w0_val == 1, rs1_w1_val == -3
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfffffffd33333332;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfffffffd33333332, 0x5555555500000001, x30, x1, 1072, x2)

inst_98:
// rs2_w0_val == -1, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x100000000000004;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x100000000000004, 0x000000ffffffff, x30, x1, 1088, x2)

inst_99:
// rs1_w0_val == 16384, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x40000000004000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x40000000004000, 0x00001055555554, x30, x1, 1104, x2)

inst_100:
// rs1_w1_val == 2147483647, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x7fffffff00000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000000, 0xfdffffff00000003, x30, x1, 1120, x2)

inst_101:
// rs1_w1_val == -536870913, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xdfffffff00000800;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000800, 0x40000000fffffffc, x30, x1, 1136, x2)

inst_102:
// rs1_w1_val == -268435457, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xefffffff00000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xefffffff00000000, 0x100000dfffffff, x30, x1, 1152, x2)

inst_103:
// rs1_w1_val == -67108865, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfbffffff55555555;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfbffffff55555555, 0x1000000033333332, x30, x1, 1168, x2)

inst_104:
// rs1_w1_val == -8388609, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xff7fffff0000b503;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xff7fffff0000b503, 0xfbffffff00000005, x30, x1, 1184, x2)

inst_105:
// rs1_w1_val == -4194305, rs2_w0_val == 2048
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffbfffffffbfffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffbfffffffbfffff, 0xfffffbff00000800, x30, x1, 1200, x2)

inst_106:
// rs1_w1_val == -1048577, rs2_w0_val == 67108864
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffefffff00000004;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffefffff00000004, 0xffff4afc04000000, x30, x1, 1216, x2)

inst_107:
// rs1_w1_val == -32769, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffff7fffdfffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffff7fffdfffffff, 0x00000066666665, x30, x1, 1232, x2)

inst_108:
// rs1_w1_val == -16385, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffffbffffffeffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffffbffffffeffff, 0x00000600000003, x30, x1, 1248, x2)

inst_109:
// rs1_w1_val == -4097, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffffefffffff4afc;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffffefffffff4afc, 0x10000000fffffffa, x30, x1, 1264, x2)

inst_110:
// rs1_w1_val == -2049, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfffff7ff33333333;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfffff7ff33333333, 0x66666665aaaaaaab, x30, x1, 1280, x2)

inst_111:
// rs1_w1_val == -129, rs1_w0_val == -257
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffffff7ffffffeff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffeff, 0x00001000000000, x30, x1, 1296, x2)

inst_112:
// rs1_w1_val == -33, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffffffdf66666665;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffffffdf66666665, 0x00800000100000, x30, x1, 1312, x2)

inst_113:
// rs1_w1_val == -9, rs1_w0_val == 16777216
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfffffff701000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfffffff701000000, 0x40000066666665, x30, x1, 1328, x2)

inst_114:
// rs1_w1_val == -5, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfffffffb0000b503;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfffffffb0000b503, 0x01000000100000, x30, x1, 1344, x2)

inst_115:
// rs1_w1_val == 134217728, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x800000000000004;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x800000000000004, 0x00020000010000, x30, x1, 1360, x2)

inst_116:
// rs1_w1_val == 33554432, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x200000000004000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x200000000004000, 0x6666666766666667, x30, x1, 1376, x2)

inst_117:
// rs1_w1_val == 2097152, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x200000ffffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x200000ffffffff, 0x008000fffff7ff, x30, x1, 1392, x2)

inst_118:
// rs1_w1_val == 8192, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x002000ffff4afc;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x002000ffff4afc, 0x10000000010000, x30, x1, 1408, x2)

inst_119:
// rs1_w1_val == 2048, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x00080055555555;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x00080055555555, 0x000100fffffeff, x30, x1, 1424, x2)

inst_120:
// rs1_w1_val == 1024, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x000400ffff4afd;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x000400ffff4afd, 0x00000300000400, x30, x1, 1440, x2)

inst_121:
// rs1_w1_val == 512, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x000200ffffff7f;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x000200ffffff7f, 0xffffdffffffffffa, x30, x1, 1456, x2)

inst_122:
// rs1_w1_val == 256, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x000100fbffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x000100fbffffff, 0x100000fffffff6, x30, x1, 1472, x2)

inst_123:
// rs1_w1_val == 64, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x000040fffffffa;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x000040fffffffa, 0xfffffeffffefffff, x30, x1, 1488, x2)

inst_124:
// rs1_w0_val == -33554433, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x4000000fdffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x4000000fdffffff, 0xdfffffff55555555, x30, x1, 1504, x2)

inst_125:
// rs1_w0_val == -8388609, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfffffff9ff7fffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfffffff9ff7fffff, 0x004000ffffffdf, x30, x1, 1520, x2)

inst_126:
// rs1_w0_val == -2097153, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffbfffffffdfffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffbfffffffdfffff, 0xffffffff0000b503, x30, x1, 1536, x2)

inst_127:
// rs1_w0_val == -524289, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x000002fff7ffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x000002fff7ffff, 0x000009ffff4afc, x30, x1, 1552, x2)

inst_128:
// rs1_w0_val == -32769, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x33333333ffff7fff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x33333333ffff7fff, 0xaaaaaaabfffffbff, x30, x1, 1568, x2)

inst_129:
// rs1_w0_val == -8193, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x000003ffffdfff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x000003ffffdfff, 0xfffffffb55555555, x30, x1, 1584, x2)

inst_130:
// rs1_w0_val == -4097, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x000800ffffefff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x000800ffffefff, 0x400000002000000, x30, x1, 1600, x2)

inst_131:
// rs1_w0_val == -2049, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xbffffffffffff7ff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xbffffffffffff7ff, 0x7fffffffffffffef, x30, x1, 1616, x2)

inst_132:
// rs2_w0_val == 1073741824, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffff4afc80000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffff4afc80000000, 0x04000040000000, x30, x1, 1632, x2)

inst_133:
// rs1_w0_val == -65, rs2_w0_val == 131072
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x000010ffffffbf;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x000010ffffffbf, 0x00000200020000, x30, x1, 1648, x2)

inst_134:
// rs2_w0_val == 268435456, rs1_w0_val == 33554432
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x3333333202000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x3333333202000000, 0x800000010000000, x30, x1, 1664, x2)

inst_135:
// rs1_w0_val == -3, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x000800fffffffd;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x000800fffffffd, 0xffbfffff00000080, x30, x1, 1680, x2)

inst_136:
// rs2_w0_val == 16777216, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x000004fffffffc;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x000004fffffffc, 0xfffffffc01000000, x30, x1, 1696, x2)

inst_137:
// rs1_w0_val == -2, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x66666666fffffffe;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x66666666fffffffe, 0xdfffffff55555555, x30, x1, 1712, x2)

inst_138:
// rs2_w0_val == 8388608, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x5555555501000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x5555555501000000, 0xfffffffb00800000, x30, x1, 1728, x2)

inst_139:
// rs1_w0_val == 536870912, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffffffff20000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffffffff20000000, 0xaaaaaaab00000005, x30, x1, 1744, x2)

inst_140:
// rs1_w0_val == 134217728, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfffffff808000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfffffff808000000, 0xfffffffdfeffffff, x30, x1, 1760, x2)

inst_141:
// rs2_w0_val == 524288, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xaaaaaaaa00010000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00010000, 0x00000900080000, x30, x1, 1776, x2)

inst_142:
// rs1_w0_val == 67108864, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x00004004000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x00004004000000, 0x00000566666667, x30, x1, 1792, x2)

inst_143:
// rs2_w0_val == 262144, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xdfffffffc0000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xdfffffffc0000000, 0x00b50500040000, x30, x1, 1808, x2)

inst_144:
// rs1_w0_val == 8388608, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffffffef00800000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffffffef00800000, 0x0200000000b505, x30, x1, 1824, x2)

inst_145:
// rs2_w0_val == 16384, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffbfffff00000020;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000020, 0xfffffeff00004000, x30, x1, 1840, x2)

inst_146:
// rs1_w0_val == 1048576, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfffffffc00100000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfffffffc00100000, 0x55555555ffbfffff, x30, x1, 1856, x2)

inst_147:
// rs1_w0_val == 524288, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x00b50500080000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x00b50500080000, 0x00b505ffffbfff, x30, x1, 1872, x2)

inst_148:
// rs1_w0_val == 262144, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xbfffffff00040000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xbfffffff00040000, 0x2000000fffffffd, x30, x1, 1888, x2)

inst_149:
// rs2_w0_val == 512, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x1000000000000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x1000000000000000, 0x00000000000200, x30, x1, 1904, x2)

inst_150:
// rs1_w0_val == 32768, 
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xfffffff700008000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xfffffff700008000, 0x000004efffffff, x30, x1, 1920, x2)

inst_151:
// rs2_w1_val == -1073741825, rs1_w0_val == 2147483647
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0x0000207fffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0x0000207fffffff, 0xbffffffffffffffc, x30, x1, 1936, x2)

inst_152:
// rs2_w1_val == -32769, rs1_w1_val == -65
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffffffbfaaaaaaab;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffffffbfaaaaaaab, 0xffff7fff00000005, x30, x1, 1952, x2)

inst_153:
// rs2_w1_val == -8193, rs2_w0_val == 8192, rs1_w0_val == 4194304
// opcode: kwmmul ; op1:x30; dest:x31; op1val:0xffdfffff00400000;  immval:$imm_val
TEST_PKRR_OP(kwmmul, x31, x30, x29, 0x0000000000000000, 0xffdfffff00400000, 0xffffdfff00002000, x30, x1, 1968, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x11_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 248*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
