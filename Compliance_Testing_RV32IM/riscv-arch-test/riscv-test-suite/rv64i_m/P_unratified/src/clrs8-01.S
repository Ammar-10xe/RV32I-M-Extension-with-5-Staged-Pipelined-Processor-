
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the clrs8 instruction of the RISC-V RV64PZicsr extension for the clrs8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",clrs8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x18,signature_x18_1)

inst_0:
// rs1==x12, rd==x3, rs1_b0_val == -128, rs1_b2_val == -1, rs1_b3_val == -128, rs1_b6_val == -128
// opcode: clrs8 ; op1:x12; dest:x3; op1val:0x380f60380fff680;
TEST_RD_OP( clrs8, x3, x12, 0x0000000000000000, 0x380f60380fff680, x18, 0, x20)

inst_1:
// rs1==x2, rd==x7, rs1_b7_val == -86, rs1_b3_val == 4, rs1_b6_val == 4, rs1_b4_val == -1, rs1_b5_val == 2, rs1_b1_val == 85
// opcode: clrs8 ; op1:x2; dest:x7; op1val:0xaa0402ff040955f6;
TEST_RD_OP( clrs8, x7, x2, 0x0000000000000000, 0xaa0402ff040955f6, x18, 8, x20)

inst_2:
// rs1==x0, rd==x1, rs1_b7_val == 85, rs1_b1_val == -33, rs1_b0_val == 127
// opcode: clrs8 ; op1:x0; dest:x1; op1val:0x550603fa8003df7f;
TEST_RD_OP( clrs8, x1, x0, 0x0000000000000000, 0x550603fa8003df7f, x18, 16, x20)

inst_3:
// rs1==x21, rd==x13, rs1_b7_val == 127, rs1_b4_val == 16, rs1_b6_val == -9, rs1_b0_val == -3, rs1_b5_val == -9
// opcode: clrs8 ; op1:x21; dest:x13; op1val:0x7ff7f710f9fafcfd;
TEST_RD_OP( clrs8, x13, x21, 0x0000000000000000, 0x7ff7f710f9fafcfd, x18, 24, x20)

inst_4:
// rs1==x7, rd==x9, rs1_b7_val == -65, rs1_b2_val == 64, rs1_b4_val == -33, rs1_b5_val == 64, rs1_b1_val == -5
// opcode: clrs8 ; op1:x7; dest:x9; op1val:0xbf8040dff940fb05;
TEST_RD_OP( clrs8, x9, x7, 0x0000000000000000, 0xbf8040dff940fb05, x18, 32, x20)

inst_5:
// rs1==x16, rd==x15, rs1_b7_val == -33, rs1_b1_val == -3, rs1_b3_val == -2, rs1_b0_val == 16, rs1_b2_val == -2
// opcode: clrs8 ; op1:x16; dest:x15; op1val:0xdffa06f9fefefd10;
TEST_RD_OP( clrs8, x15, x16, 0x0000000000000000, 0xdffa06f9fefefd10, x18, 40, x20)

inst_6:
// rs1==x28, rd==x16, rs1_b7_val == -17, rs1_b5_val == 4, rs1_b3_val == -5, rs1_b6_val == -5, rs1_b4_val == 4
// opcode: clrs8 ; op1:x28; dest:x16; op1val:0xeffb0404fb3ffd10;
TEST_RD_OP( clrs8, x16, x28, 0x0000000000000000, 0xeffb0404fb3ffd10, x18, 48, x20)

inst_7:
// rs1==x23, rd==x12, rs1_b7_val == -9, rs1_b4_val == 64, rs1_b3_val == -33
// opcode: clrs8 ; op1:x23; dest:x12; op1val:0xf7f60740dffe06fd;
TEST_RD_OP( clrs8, x12, x23, 0x0000000000000000, 0xf7f60740dffe06fd, x18, 56, x20)

inst_8:
// rs1==x11, rd==x8, rs1_b7_val == -5, rs1_b0_val == -33, rs1_b1_val == 127, rs1_b3_val == -17
// opcode: clrs8 ; op1:x11; dest:x8; op1val:0xfb03c003efc07fdf;
TEST_RD_OP( clrs8, x8, x11, 0x0000000000000000, 0xfb03c003efc07fdf, x18, 64, x20)

inst_9:
// rs1==x8, rd==x22, rs1_b7_val == -3, rs1_b6_val == -33, rs1_b2_val == -9, rs1_b5_val == -3
// opcode: clrs8 ; op1:x8; dest:x22; op1val:0xfddffd0906f77ffd;
TEST_RD_OP( clrs8, x22, x8, 0x0000000000000000, 0xfddffd0906f77ffd, x18, 72, x20)

inst_10:
// rs1==x6, rd==x21, rs1_b7_val == -2, rs1_b6_val == 127
// opcode: clrs8 ; op1:x6; dest:x21; op1val:0xfe7f05c0c03fdf05;
TEST_RD_OP( clrs8, x21, x6, 0x0000000000000000, 0xfe7f05c0c03fdf05, x18, 80, x20)

inst_11:
// rs1==x31, rd==x6, rs1_b7_val == -128, rs1_b4_val == 32, rs1_b5_val == 1, rs1_b6_val == 2, rs1_b1_val == -17
// opcode: clrs8 ; op1:x31; dest:x6; op1val:0x80020120fc3feff9;
TEST_RD_OP( clrs8, x6, x31, 0x0000000000000000, 0x80020120fc3feff9, x18, 88, x20)

inst_12:
// rs1==x17, rd==x10, rs1_b7_val == 64, rs1_b6_val == -1, rs1_b2_val == -65, rs1_b3_val == -1, rs1_b4_val == 2
// opcode: clrs8 ; op1:x17; dest:x10; op1val:0x40ff0102ffbfeffa;
TEST_RD_OP( clrs8, x10, x17, 0x0000000000000000, 0x40ff0102ffbfeffa, x18, 96, x20)

inst_13:
// rs1==x25, rd==x23, rs1_b7_val == 32, rs1_b5_val == 32, rs1_b0_val == -2, rs1_b1_val == 8
// opcode: clrs8 ; op1:x25; dest:x23; op1val:0x20c02004040308fe;
TEST_RD_OP( clrs8, x23, x25, 0x0000000000000000, 0x20c02004040308fe, x18, 104, x20)

inst_14:
// rs1==x24, rd==x19, rs1_b7_val == 16, rs1_b1_val == 4
// opcode: clrs8 ; op1:x24; dest:x19; op1val:0x10fcf709ef3f047f;
TEST_RD_OP( clrs8, x19, x24, 0x0000000000000000, 0x10fcf709ef3f047f, x18, 112, x20)

inst_15:
// rs1==x29, rd==x30, rs1_b7_val == 8, rs1_b2_val == 1
// opcode: clrs8 ; op1:x29; dest:x30; op1val:0x8f702c03f010809;
TEST_RD_OP( clrs8, x30, x29, 0x0000000000000000, 0x8f702c03f010809, x18, 120, x20)

inst_16:
// rs1==x10, rd==x2, rs1_b7_val == 4, rs1_b6_val == -17, rs1_b2_val == -86, rs1_b3_val == 85
// opcode: clrs8 ; op1:x10; dest:x2; op1val:0x4eff70955aa0707;
TEST_RD_OP( clrs8, x2, x10, 0x0000000000000000, 0x4eff70955aa0707, x18, 128, x20)

inst_17:
// rs1==x30, rd==x17, rs1_b7_val == 2, rs1_b0_val == 8, rs1_b3_val == 32
// opcode: clrs8 ; op1:x30; dest:x17; op1val:0x2eff92020c0fa08;
TEST_RD_OP( clrs8, x17, x30, 0x0000000000000000, 0x2eff92020c0fa08, x18, 136, x20)

inst_18:
// rs1==x3, rd==x28, rs1_b7_val == 1, rs1_b5_val == 8
// opcode: clrs8 ; op1:x3; dest:x28; op1val:0x17f080707bffd09;
TEST_RD_OP( clrs8, x28, x3, 0x0000000000000000, 0x17f080707bffd09, x18, 144, x20)

inst_19:
// rs1==x15, rd==x24, rs1_b7_val == 0, rs1_b4_val == -3, rs1_b2_val == 127, rs1_b5_val == -5, rs1_b1_val == -86, rs1_b6_val == -3
// opcode: clrs8 ; op1:x15; dest:x24; op1val:0xfdfbfdef7faac0;
TEST_RD_OP( clrs8, x24, x15, 0x0000000000000000, 0xfdfbfdef7faac0, x18, 152, x20)

inst_20:
// rs1==x4, rd==x5, rs1_b7_val == -1, rs1_b6_val == 64, rs1_b4_val == -65
// opcode: clrs8 ; op1:x4; dest:x5; op1val:0xff40f7bfc001ef05;
TEST_RD_OP( clrs8, x5, x4, 0x0000000000000000, 0xff40f7bfc001ef05, x18, 160, x20)

inst_21:
// rs1==x13, rd==x4, rs1_b6_val == -86, rs1_b3_val == -65
// opcode: clrs8 ; op1:x13; dest:x4; op1val:0x9aac040bfbffdfd;
TEST_RD_OP( clrs8, x4, x13, 0x0000000000000000, 0x9aac040bfbffdfd, x18, 168, x20)

inst_22:
// rs1==x5, rd==x14, rs1_b6_val == 85, rs1_b0_val == -86
// opcode: clrs8 ; op1:x5; dest:x14; op1val:0xaa5508fd3ff9c0aa;
TEST_RD_OP( clrs8, x14, x5, 0x0000000000000000, 0xaa5508fd3ff9c0aa, x18, 176, x20)

inst_23:
// rs1==x26, rd==x25, rs1_b6_val == -65, rs1_b0_val == 4, rs1_b1_val == -9
// opcode: clrs8 ; op1:x26; dest:x25; op1val:0xc0bffb0605aaf704;
TEST_RD_OP( clrs8, x25, x26, 0x0000000000000000, 0xc0bffb0605aaf704, x18, 184, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_24:
// rs1==x9, rd==x0, rs1_b6_val == -2, rs1_b0_val == -17, rs1_b2_val == -3
// opcode: clrs8 ; op1:x9; dest:x0; op1val:0xfcfe3f10f6fdfcef;
TEST_RD_OP( clrs8, x0, x9, 0x0000000000000000, 0xfcfe3f10f6fdfcef, x2, 0, x3)

inst_25:
// rs1==x18, rd==x11, rs1_b6_val == 32, rs1_b0_val == 32, rs1_b4_val == -86
// opcode: clrs8 ; op1:x18; dest:x11; op1val:0x42001aaef07f720;
TEST_RD_OP( clrs8, x11, x18, 0x0000000000000000, 0x42001aaef07f720, x2, 8, x3)

inst_26:
// rs1==x1, rd==x26, rs1_b6_val == 16, rs1_b3_val == -86, rs1_b1_val == 0
// opcode: clrs8 ; op1:x1; dest:x26; op1val:0xf810f904aa010005;
TEST_RD_OP( clrs8, x26, x1, 0x0000000000000000, 0xf810f904aa010005, x2, 16, x3)

inst_27:
// rs1==x19, rd==x29, rs1_b6_val == 8, rs1_b4_val == -5
// opcode: clrs8 ; op1:x19; dest:x29; op1val:0x80804fb55f6f903;
TEST_RD_OP( clrs8, x29, x19, 0x0000000000000000, 0x80804fb55f6f903, x2, 24, x3)

inst_28:
// rs1==x22, rd==x20, rs1_b1_val == -2, 
// opcode: clrs8 ; op1:x22; dest:x20; op1val:0x30204f8fec0fe08;
TEST_RD_OP( clrs8, x20, x22, 0x0000000000000000, 0x30204f8fec0fe08, x2, 32, x3)

inst_29:
// rs1==x14, rd==x31, rs1_b1_val == -128, rs1_b5_val == -1, rs1_b4_val == 1
// opcode: clrs8 ; op1:x14; dest:x31; op1val:0xfeaaff013ffa8008;
TEST_RD_OP( clrs8, x31, x14, 0x0000000000000000, 0xfeaaff013ffa8008, x2, 40, x3)

inst_30:
// rs1==x27, rd==x18, rs1_b1_val == 64, rs1_b4_val == 8, rs1_b0_val == 0
// opcode: clrs8 ; op1:x27; dest:x18; op1val:0xf603f9083f064000;
TEST_RD_OP( clrs8, x18, x27, 0x0000000000000000, 0xf603f9083f064000, x2, 48, x3)

inst_31:
// rs1==x20, rd==x27, rs1_b1_val == 32, 
// opcode: clrs8 ; op1:x20; dest:x27; op1val:0xff030240dffa20aa;
TEST_RD_OP( clrs8, x27, x20, 0x0000000000000000, 0xff030240dffa20aa, x2, 56, x3)

inst_32:
// rs1_b1_val == 16, rs1_b2_val == 4
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x10effdfbc0041003;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0x10effdfbc0041003, x2, 64, x3)

inst_33:
// rs1_b1_val == 2, rs1_b5_val == 127, rs1_b0_val == -9, rs1_b2_val == 0
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xfc087f01090002f7;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xfc087f01090002f7, x2, 72, x3)

inst_34:
// rs1_b1_val == 1, rs1_b2_val == 32
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x20df07dff92001f6;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0x20df07dff92001f6, x2, 80, x3)

inst_35:
// rs1_b1_val == -1, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xfb20f6f603f8fff7;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xfb20f6f603f8fff7, x2, 88, x3)

inst_36:
// rs1_b0_val == 85, rs1_b3_val == 64
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x63ffcf84007f755;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0x63ffcf84007f755, x2, 96, x3)

inst_37:
// rs1_b0_val == -65, rs1_b1_val == -65
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x7f04fbc007f7bfbf;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0x7f04fbc007f7bfbf, x2, 104, x3)

inst_38:
// rs1_b0_val == -5, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xf8bf07f904c0f6fb;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xf8bf07f904c0f6fb, x2, 112, x3)

inst_39:
// rs1_b0_val == 64, rs1_b2_val == 16, rs1_b3_val == 8
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xdffe3fc008103f40;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xdffe3fc008103f40, x2, 120, x3)

inst_40:
// rs1_b0_val == 2, rs1_b5_val == -17
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x407fef0705070002;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0x407fef0705070002, x2, 128, x3)

inst_41:
// rs1_b0_val == 1, rs1_b3_val == -3, rs1_b4_val == 127
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xdf55f97ffd407f01;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xdf55f97ffd407f01, x2, 136, x3)

inst_42:
// rs1_b0_val == -1, rs1_b5_val == -2
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x3fefe07efaa80ff;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0x3fefe07efaa80ff, x2, 144, x3)

inst_43:
// rs1_b4_val == -17, rs1_b5_val == -33
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xc03fdfef40f73f02;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xc03fdfef40f73f02, x2, 152, x3)

inst_44:
// rs1_b4_val == -9, rs1_b6_val == 0
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xf600f8f780fff910;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xf600f8f780fff910, x2, 160, x3)

inst_45:
// rs1_b4_val == -2, rs1_b5_val == -86
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x40fbaafe2020bf03;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0x40fbaafe2020bf03, x2, 168, x3)

inst_46:
// rs1_b4_val == -128, rs1_b2_val == -33
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xf740fa803fdff8fc;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xf740fa803fdff8fc, x2, 176, x3)

inst_47:
// rs1_b4_val == 0, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xfb000300073f1004;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xfb000300073f1004, x2, 184, x3)

inst_48:
// rs1_b3_val == 127, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xeffff7057ffdf640;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xeffff7057ffdf640, x2, 192, x3)

inst_49:
// rs1_b3_val == -9, rs1_b5_val == 0
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xf6bf00c0f7060400;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xf6bf00c0f7060400, x2, 200, x3)

inst_50:
// rs1_b3_val == 16, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xfbc004021010fbf7;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xfbc004021010fbf7, x2, 208, x3)

inst_51:
// rs1_b3_val == 2, rs1_b2_val == 85
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xfe80f705025500fc;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xfe80f705025500fc, x2, 216, x3)

inst_52:
// rs1_b3_val == 1, rs1_b2_val == -128
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xf980c0f80180aa20;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xf980c0f80180aa20, x2, 224, x3)

inst_53:
// rs1_b3_val == 0, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x550403000640c0;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0x550403000640c0, x2, 232, x3)

inst_54:
// rs1_b6_val == 1, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x5501f600df077ffe;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0x5501f600df077ffe, x2, 240, x3)

inst_55:
// rs1_b5_val == 85, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xfd0555c002053f7f;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xfd0555c002053f7f, x2, 248, x3)

inst_56:
// rs1_b2_val == -17, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xfa06f908fcefbfef;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xfa06f908fcefbfef, x2, 256, x3)

inst_57:
// rs1_b2_val == -5, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x10df06aaf7fbbfdf;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0x10df06aaf7fbbfdf, x2, 264, x3)

inst_58:
// rs1_b5_val == -128, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xdf018004f6fbfeef;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xdf018004f6fbfeef, x2, 272, x3)

inst_59:
// rs1_b2_val == 8, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x2007c00680080000;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0x2007c00680080000, x2, 280, x3)

inst_60:
// rs1_b4_val == 85, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xfc55005502105508;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xfc55005502105508, x2, 288, x3)

inst_61:
// rs1_b5_val == -65, 
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0xfc7fbf3f7f09f9fb;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0xfc7fbf3f7f09f9fb, x2, 296, x3)

inst_62:
// rs1_b2_val == 2, rs1_b5_val == 16
// opcode: clrs8 ; op1:x30; dest:x31; op1val:0x5ff10aafd024005;
TEST_RD_OP( clrs8, x31, x30, 0x0000000000000000, 0x5ff10aafd024005, x2, 304, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x18_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x18_1:
    .fill 24*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 39*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
