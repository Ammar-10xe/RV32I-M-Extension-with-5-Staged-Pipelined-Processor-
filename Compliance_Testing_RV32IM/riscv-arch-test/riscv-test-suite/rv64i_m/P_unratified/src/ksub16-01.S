
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ksub16 instruction of the RISC-V RV64PZicsr extension for the ksub16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ksub16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x6, rs2==x9, rd==x6, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 256, rs1_h2_val != rs2_h2_val, rs2_h0_val == -16385, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h3_val == -33, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == -2049, rs2_h1_val == 1024, rs2_h2_val == 21845
// opcode: ksub16 ; op1:x6; op2:x9; dest:x6; op1val:0xffdf0100f7ff8000;  op2val:0x0955550400bfff
TEST_PKRR_OP(ksub16, x6, x6, x9, 0x0000000000000000, 0xffdf0100f7ff8000, 0x0955550400bfff, x6, x1, 0, x13)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x21, rd==x17, rs1_h3_val == rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h0_val == 0, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val == -4097, rs1_h0_val == 32767, rs2_h2_val == 2
// opcode: ksub16 ; op1:x23; op2:x21; dest:x17; op1val:0x09efff00037fff;  op2val:0x09000200060000
TEST_PKRR_OP(ksub16, x17, x23, x21, 0x0000000000000000, 0x09efff00037fff, 0x09000200060000, x23, x1, 16, x13)

inst_2:
// rs1 == rs2 != rd, rs1==x7, rs2==x7, rd==x9, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -3, rs1_h3_val == -1, rs1_h1_val == 16, rs2_h2_val == 8192, rs2_h0_val == -32768, rs1_h0_val == -2049, rs1_h2_val == -2
// opcode: ksub16 ; op1:x7; op2:x7; dest:x9; op1val:0xfffffffe0010f7ff;  op2val:0xfffd200000058000
TEST_PKRR_OP(ksub16, x9, x7, x7, 0x0000000000000000, 0xfffffffe0010f7ff, 0xfffd200000058000, x7, x1, 32, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x3, rs2==x3, rd==x3, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == -4097, rs2_h2_val == -129, rs1_h2_val == 32, rs1_h0_val == 2048, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == -65, rs1_h3_val == 16384, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h3_val == -1
// opcode: ksub16 ; op1:x3; op2:x3; dest:x3; op1val:0x40000020c0000800;  op2val:0xffffff7fefffffbf
TEST_PKRR_OP(ksub16, x3, x3, x3, 0x0000000000000000, 0x40000020c0000800, 0xffffff7fefffffbf, x3, x1, 48, x13)

inst_4:
// rs2 == rd != rs1, rs1==x15, rs2==x19, rd==x19, rs1_h2_val == rs2_h2_val, rs2_h1_val == -21846, rs1_h3_val == 8, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == -513, rs2_h3_val == 64, rs1_h1_val == -1
// opcode: ksub16 ; op1:x15; op2:x19; dest:x19; op1val:0x08fff9ffffc000;  op2val:0x40fff9aaaafdff
TEST_PKRR_OP(ksub16, x19, x15, x19, 0x0000000000000000, 0x08fff9ffffc000, 0x40fff9aaaafdff, x15, x1, 64, x13)

inst_5:
// rs1==x25, rs2==x12, rd==x31, rs1_h1_val == rs2_h1_val, rs2_h2_val == -2049, rs1_h3_val == -21846, rs1_h1_val == 32, rs2_h0_val == -5, rs2_h3_val == 32767, rs2_h1_val == 32
// opcode: ksub16 ; op1:x25; op2:x12; dest:x31; op1val:0xaaaac0000020fff6;  op2val:0x7ffff7ff0020fffb
TEST_PKRR_OP(ksub16, x31, x25, x12, 0x0000000000000000, 0xaaaac0000020fff6, 0x7ffff7ff0020fffb, x25, x1, 80, x13)

inst_6:
// rs1==x20, rs2==x0, rd==x11, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == -21846, rs2_h2_val == -4097, rs2_h0_val == 21845
// opcode: ksub16 ; op1:x20; op2:x0; dest:x11; op1val:0x05000900067fff;  op2val:0xaaaaeffffffc5555
TEST_PKRR_OP(ksub16, x11, x20, x0, 0x0000000000000000, 0x05000900067fff, 0xaaaaeffffffc5555, x20, x1, 96, x13)

inst_7:
// rs1==x22, rs2==x11, rd==x4, rs1_h0_val == rs2_h0_val, rs2_h2_val == -257, rs2_h0_val == -8193, rs2_h1_val == -5, rs1_h2_val == -8193, rs2_h3_val == 8, rs1_h0_val == -8193, rs1_h3_val == 4096
// opcode: ksub16 ; op1:x22; op2:x11; dest:x4; op1val:0x1000dffffffadfff;  op2val:0x08fefffffbdfff
TEST_PKRR_OP(ksub16, x4, x22, x11, 0x0000000000000000, 0x1000dffffffadfff, 0x08fefffffbdfff, x22, x1, 112, x13)

inst_8:
// rs1==x31, rs2==x2, rd==x14, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h0_val == -65, rs1_h2_val == 512, rs2_h3_val == 16384, rs1_h1_val == -513, rs2_h0_val == 2048
// opcode: ksub16 ; op1:x31; op2:x2; dest:x14; op1val:0xaaaa0200fdffffbf;  op2val:0x4000efffefff0800
TEST_PKRR_OP(ksub16, x14, x31, x2, 0x0000000000000000, 0xaaaa0200fdffffbf, 0x4000efffefff0800, x31, x1, 128, x13)

inst_9:
// rs1==x19, rs2==x8, rd==x29, rs2_h3_val == 21845, rs2_h0_val == 8, rs1_h0_val == -5, rs1_h1_val == 4096, rs2_h1_val == -3, rs2_h2_val == 1024
// opcode: ksub16 ; op1:x19; op2:x8; dest:x29; op1val:0x400000071000fffb;  op2val:0x55550400fffd0008
TEST_PKRR_OP(ksub16, x29, x19, x8, 0x0000000000000000, 0x400000071000fffb, 0x55550400fffd0008, x19, x1, 144, x13)

inst_10:
// rs1==x9, rs2==x15, rd==x2, rs2_h3_val == -16385, rs1_h2_val == -65, rs2_h0_val == 16, rs2_h2_val == -2, rs1_h0_val == -257
// opcode: ksub16 ; op1:x9; op2:x15; dest:x2; op1val:0xffffffbf0007feff;  op2val:0xbffffffe00200010
TEST_PKRR_OP(ksub16, x2, x9, x15, 0x0000000000000000, 0xffffffbf0007feff, 0xbffffffe00200010, x9, x1, 160, x13)

inst_11:
// rs1==x5, rs2==x6, rd==x16, rs2_h3_val == -8193, rs1_h2_val == 64, rs2_h0_val == 4096, rs1_h1_val == -17
// opcode: ksub16 ; op1:x5; op2:x6; dest:x16; op1val:0xc0000040ffeffff9;  op2val:0xdfff0007fffc1000
TEST_PKRR_OP(ksub16, x16, x5, x6, 0x0000000000000000, 0xc0000040ffeffff9, 0xdfff0007fffc1000, x5, x1, 176, x13)

inst_12:
// rs1==x24, rs2==x10, rd==x0, rs2_h3_val == -4097, rs2_h1_val == -1025, rs1_h1_val == 21845, rs1_h2_val == -16385
// opcode: ksub16 ; op1:x24; op2:x10; dest:x0; op1val:0xaaaabfff5555fff9;  op2val:0xefff0400fbfffff9
TEST_PKRR_OP(ksub16, x0, x24, x10, 0x0000000000000000, 0xaaaabfff5555fff9, 0xefff0400fbfffff9, x24, x1, 192, x13)

inst_13:
// rs1==x18, rs2==x30, rd==x8, rs2_h3_val == -2049, rs2_h1_val == 2, rs1_h1_val == 16384, rs1_h0_val == -2, rs2_h2_val == 256, rs1_h3_val == -3
// opcode: ksub16 ; op1:x18; op2:x30; dest:x8; op1val:0xfffdffbf4000fffe;  op2val:0xf7ff01000002fff9
TEST_PKRR_OP(ksub16, x8, x18, x30, 0x0000000000000000, 0xfffdffbf4000fffe, 0xf7ff01000002fff9, x18, x1, 208, x13)

inst_14:
// rs1==x28, rs2==x26, rd==x10, rs2_h3_val == -1025, rs2_h2_val == 4096, rs2_h1_val == -65, rs2_h0_val == -21846
// opcode: ksub16 ; op1:x28; op2:x26; dest:x10; op1val:0x400001000020fff6;  op2val:0xfbff1000ffbfaaaa
TEST_PKRR_OP(ksub16, x10, x28, x26, 0x0000000000000000, 0x400001000020fff6, 0xfbff1000ffbfaaaa, x28, x1, 224, x6)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_15:
// rs1==x30, rs2==x23, rd==x22, rs2_h3_val == -513, rs2_h2_val == -1025, rs1_h2_val == 128, rs1_h3_val == -16385, rs2_h0_val == -257, rs1_h1_val == 8, rs1_h0_val == -4097
// opcode: ksub16 ; op1:x30; op2:x23; dest:x22; op1val:0xbfff00800008efff;  op2val:0xfdfffbfffffdfeff
TEST_PKRR_OP(ksub16, x22, x30, x23, 0x0000000000000000, 0xbfff00800008efff, 0xfdfffbfffffdfeff, x30, x3, 0, x6)

inst_16:
// rs1==x17, rs2==x27, rd==x12, rs2_h3_val == -257, rs1_h2_val == 8192, rs2_h1_val == -16385, rs1_h0_val == 32, rs1_h1_val == 2, rs2_h0_val == -17
// opcode: ksub16 ; op1:x17; op2:x27; dest:x12; op1val:0x1000200000020020;  op2val:0xfeffc000bfffffef
TEST_PKRR_OP(ksub16, x12, x17, x27, 0x0000000000000000, 0x1000200000020020, 0xfeffc000bfffffef, x17, x3, 16, x6)

inst_17:
// rs1==x21, rs2==x18, rd==x1, rs2_h3_val == -129, rs2_h0_val == 64, rs2_h2_val == 8, rs1_h2_val == -9
// opcode: ksub16 ; op1:x21; op2:x18; dest:x1; op1val:0x03fff70005fffb;  op2val:0xff7f000800060040
TEST_PKRR_OP(ksub16, x1, x21, x18, 0x0000000000000000, 0x03fff70005fffb, 0xff7f000800060040, x21, x3, 32, x6)

inst_18:
// rs1==x27, rs2==x5, rd==x13, rs2_h3_val == -65, rs1_h3_val == 21845, rs2_h2_val == -9, rs1_h0_val == -21846, rs1_h2_val == -129
// opcode: ksub16 ; op1:x27; op2:x5; dest:x13; op1val:0x5555ff7f0020aaaa;  op2val:0xffbffff70003fffc
TEST_PKRR_OP(ksub16, x13, x27, x5, 0x0000000000000000, 0x5555ff7f0020aaaa, 0xffbffff70003fffc, x27, x3, 48, x6)

inst_19:
// rs1==x10, rs2==x14, rd==x18, rs2_h3_val == -33, rs1_h0_val == 1024, rs1_h2_val == -3, rs1_h3_val == -9
// opcode: ksub16 ; op1:x10; op2:x14; dest:x18; op1val:0xfff7fffd00030400;  op2val:0xffdfff7f00073fff
TEST_PKRR_OP(ksub16, x18, x10, x14, 0x0000000000000000, 0xfff7fffd00030400, 0xffdfff7f00073fff, x10, x3, 64, x6)

inst_20:
// rs1==x26, rs2==x31, rd==x15, rs2_h3_val == -17, rs1_h1_val == 32767, rs1_h3_val == -17
// opcode: ksub16 ; op1:x26; op2:x31; dest:x15; op1val:0xffefffbf7fff0007;  op2val:0xffeffffeefffbfff
TEST_PKRR_OP(ksub16, x15, x26, x31, 0x0000000000000000, 0xffefffbf7fff0007, 0xffeffffeefffbfff, x26, x3, 80, x6)

inst_21:
// rs1==x4, rs2==x16, rd==x26, rs2_h3_val == -9, rs1_h1_val == -2, rs2_h1_val == 8192, rs1_h0_val == 0
// opcode: ksub16 ; op1:x4; op2:x16; dest:x26; op1val:0xffdffff8fffe0000;  op2val:0xfff73fff2000c000
TEST_PKRR_OP(ksub16, x26, x4, x16, 0x0000000000000000, 0xffdffff8fffe0000, 0xfff73fff2000c000, x4, x3, 96, x6)

inst_22:
// rs1==x12, rs2==x17, rd==x7, rs2_h3_val == -5, rs1_h1_val == 4, rs1_h0_val == -33, rs2_h1_val == 128, rs2_h2_val == 1
// opcode: ksub16 ; op1:x12; op2:x17; dest:x7; op1val:0xbfff00060004ffdf;  op2val:0xfffb000100800800
TEST_PKRR_OP(ksub16, x7, x12, x17, 0x0000000000000000, 0xbfff00060004ffdf, 0xfffb000100800800, x12, x3, 112, x6)

inst_23:
// rs1==x8, rs2==x22, rd==x21, rs2_h3_val == -2, rs1_h3_val == 64, rs1_h0_val == 512, rs1_h1_val == -21846, rs2_h1_val == 4096, rs1_h2_val == -33
// opcode: ksub16 ; op1:x8; op2:x22; dest:x21; op1val:0x40ffdfaaaa0200;  op2val:0xfffe000510000003
TEST_PKRR_OP(ksub16, x21, x8, x22, 0x0000000000000000, 0x40ffdfaaaa0200, 0xfffe000510000003, x8, x3, 128, x6)

inst_24:
// rs1==x11, rs2==x4, rd==x20, rs2_h3_val == -32768, rs1_h2_val == 16, rs1_h3_val == -129
// opcode: ksub16 ; op1:x11; op2:x4; dest:x20; op1val:0xff7f001000090000;  op2val:0x80000006fffa8000
TEST_PKRR_OP(ksub16, x20, x11, x4, 0x0000000000000000, 0xff7f001000090000, 0x80000006fffa8000, x11, x3, 144, x6)

inst_25:
// rs1==x2, rs2==x29, rd==x27, rs2_h3_val == 8192, rs1_h3_val == -5, rs1_h2_val == -1, rs2_h2_val == -32768
// opcode: ksub16 ; op1:x2; op2:x29; dest:x27; op1val:0xfffbffff00200003;  op2val:0x20008000aaaafff8
TEST_PKRR_OP(ksub16, x27, x2, x29, 0x0000000000000000, 0xfffbffff00200003, 0x20008000aaaafff8, x2, x3, 160, x6)

inst_26:
// rs1==x29, rs2==x20, rd==x24, rs2_h3_val == 4096, rs2_h1_val == -513, rs1_h0_val == -3, rs2_h2_val == -513
// opcode: ksub16 ; op1:x29; op2:x20; dest:x24; op1val:0xffdfdfffaaaafffd;  op2val:0x1000fdfffdffc000
TEST_PKRR_OP(ksub16, x24, x29, x20, 0x0000000000000000, 0xffdfdfffaaaafffd, 0x1000fdfffdffc000, x29, x3, 176, x6)

inst_27:
// rs1==x1, rs2==x24, rd==x25, rs2_h3_val == 2048, rs1_h3_val == 4
// opcode: ksub16 ; op1:x1; op2:x24; dest:x25; op1val:0x04dfff0009fffa;  op2val:0x8000008fff6ffef
TEST_PKRR_OP(ksub16, x25, x1, x24, 0x0000000000000000, 0x04dfff0009fffa, 0x8000008fff6ffef, x1, x3, 192, x4)

inst_28:
// rs1==x13, rs2==x25, rd==x23, rs2_h3_val == 1024, rs2_h1_val == 4, rs2_h0_val == 1
// opcode: ksub16 ; op1:x13; op2:x25; dest:x23; op1val:0x3ffffff800090009;  op2val:0x400fbff00040001
TEST_PKRR_OP(ksub16, x23, x13, x25, 0x0000000000000000, 0x3ffffff800090009, 0x400fbff00040001, x13, x3, 208, x4)

inst_29:
// rs1==x14, rs2==x13, rd==x30, rs2_h3_val == 512, rs2_h1_val == 32767, rs1_h2_val == 4
// opcode: ksub16 ; op1:x14; op2:x13; dest:x30; op1val:0xfffc0004aaaafffd;  op2val:0x200f7ff7fff0040
TEST_PKRR_OP(ksub16, x30, x14, x13, 0x0000000000000000, 0xfffc0004aaaafffd, 0x200f7ff7fff0040, x14, x3, 224, x4)

inst_30:
// rs1==x16, rs2==x28, rd==x5, rs2_h3_val == 256, rs2_h2_val == 4, rs1_h3_val == 8192
// opcode: ksub16 ; op1:x16; op2:x28; dest:x5; op1val:0x2000efff10000003;  op2val:0x100000400020040
TEST_PKRR_OP(ksub16, x5, x16, x28, 0x0000000000000000, 0x2000efff10000003, 0x100000400020040, x16, x3, 240, x4)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_31:
// rs1==x0, rs2==x1, rd==x28, rs2_h3_val == 128, rs2_h1_val == 512, rs1_h2_val == -32768
// opcode: ksub16 ; op1:x0; op2:x1; dest:x28; op1val:0xffdf8000fff9fffd;  op2val:0x80fff90200fff9
TEST_PKRR_OP(ksub16, x28, x0, x1, 0x0000000000000000, 0xffdf8000fff9fffd, 0x80fff90200fff9, x0, x2, 0, x4)

inst_32:
// rs2_h3_val == 32, rs1_h2_val == -21846, rs2_h0_val == 512, rs1_h1_val == -4097
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6aaaaeffffffa;  op2val:0x200006fff60200
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfff6aaaaeffffffa, 0x200006fff60200, x30, x2, 16, x4)

inst_33:
// rs2_h3_val == 16, rs1_h0_val == 16384
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fff6efff4000;  op2val:0x100001bffffffc
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfff9fff6efff4000, 0x100001bffffffc, x30, x2, 32, x4)

inst_34:
// rs2_h3_val == 4, rs1_h0_val == 1, rs1_h2_val == -513, rs2_h1_val == 16, rs2_h2_val == 32767
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffdff00060001;  op2val:0x047fff00100800
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xffeffdff00060001, 0x047fff00100800, x30, x2, 48, x4)

inst_35:
// rs2_h3_val == 2, rs1_h2_val == 16384, rs1_h1_val == -129
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef4000ff7f7fff;  op2val:0x020005c0005555
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xffef4000ff7f7fff, 0x020005c0005555, x30, x2, 64, x4)

inst_36:
// rs1_h1_val == -5, rs2_h0_val == -1025
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x030004fffb3fff;  op2val:0xffef0007fdfffbff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x030004fffb3fff, 0xffef0007fdfffbff, x30, x2, 80, x4)

inst_37:
// rs1_h1_val == -3, rs2_h2_val == -8193
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x402000fffd0005;  op2val:0xfffddfff3fffc000
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x402000fffd0005, 0xfffddfff3fffc000, x30, x2, 96, x4)

inst_38:
// rs1_h1_val == -32768, rs1_h3_val == -32768
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fff68000ffbf;  op2val:0xf7ff000400200010
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x8000fff68000ffbf, 0xf7ff000400200010, x30, x2, 112, x4)

inst_39:
// rs1_h1_val == 8192, rs1_h0_val == 128
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff620000080;  op2val:0xfffa04007ffffbff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xbffffff620000080, 0xfffa04007ffffbff, x30, x2, 128, x4)

inst_40:
// rs1_h1_val == 2048, rs1_h2_val == -17, rs1_h3_val == 2048
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x800ffef0800fffb;  op2val:0x800000027fff0005
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x800ffef0800fffb, 0x800000027fff0005, x30, x2, 144, x4)

inst_41:
// rs1_h1_val == 1024, rs1_h0_val == 4096
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffff7f04001000;  op2val:0xffbf00010010fff8
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x3fffff7f04001000, 0xffbf00010010fff8, x30, x2, 160, x4)

inst_42:
// rs1_h1_val == 512, rs2_h0_val == -33, rs1_h3_val == 16
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x10800002001000;  op2val:0xfdff0007fff6ffdf
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x10800002001000, 0xfdff0007fff6ffdf, x30, x2, 176, x4)

inst_43:
// rs1_h1_val == 256, rs1_h3_val == -513, rs2_h1_val == -33
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00400100efff;  op2val:0x08fff7ffdf0800
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfdff00400100efff, 0x08fff7ffdf0800, x30, x2, 192, x4)

inst_44:
// rs1_h1_val == 128, rs1_h3_val == 128, rs2_h2_val == -21846
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fff90080ffdf;  op2val:0xfff8aaaafff60006
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x80fff90080ffdf, 0xfff8aaaafff60006, x30, x2, 208, x4)

inst_45:
// rs1_h1_val == 64, rs1_h2_val == 2048, rs2_h1_val == 64, rs1_h0_val == 21845
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff080000405555;  op2val:0x400000010040fffb
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x3fff080000405555, 0x400000010040fffb, x30, x2, 224, x4)

inst_46:
// rs1_h1_val == 1, rs2_h0_val == -1, rs1_h0_val == -1025
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffff80001fbff;  op2val:0xfffc80000002ffff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x3ffffff80001fbff, 0xfffc80000002ffff, x30, x2, 240, x4)

inst_47:
// rs1_h1_val == 0, rs2_h1_val == 1, rs1_h0_val == 4
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x04000700000004;  op2val:0xfff8dfff00011000
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x04000700000004, 0xfff8dfff00011000, x30, x2, 256, x4)

inst_48:
// rs1_h0_val == -16385, rs1_h1_val == -1025, rs1_h3_val == 1, rs2_h2_val == -3, rs2_h1_val == 8
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fff9fbffbfff;  op2val:0x03fffd0008ffdf
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x01fff9fbffbfff, 0x03fffd0008ffdf, x30, x2, 272, x4)

inst_49:
// rs1_h0_val == -513, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef80002000fdff;  op2val:0xfff7f7ff3fff3fff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xffef80002000fdff, 0xfff7f7ff3fff3fff, x30, x2, 288, x4)

inst_50:
// rs1_h0_val == -129, rs1_h3_val == -8193
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffbfc000ff7f;  op2val:0xfefffeff0020ffdf
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xdfffffbfc000ff7f, 0xfefffeff0020ffdf, x30, x2, 304, x4)

inst_51:
// rs1_h0_val == -17, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffbf0040ffef;  op2val:0xfbfffff70080feff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfdffffbf0040ffef, 0xfbfffff70080feff, x30, x2, 320, x4)

inst_52:
// rs1_h0_val == -9, rs1_h3_val == 1024, rs1_h1_val == -33
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000800ffdffff7;  op2val:0x7fffff7f0007ffbf
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x4000800ffdffff7, 0x7fffff7f0007ffbf, x30, x2, 336, x4)

inst_53:
// rs1_h0_val == 8192, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550003fffe2000;  op2val:0xffeffff8fff85555
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x55550003fffe2000, 0xffeffff8fff85555, x30, x2, 352, x4)

inst_54:
// rs1_h0_val == 256, rs2_h0_val == 256
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa080000010100;  op2val:0x08c00000800100
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfffa080000010100, 0x08c00000800100, x30, x2, 368, x4)

inst_55:
// rs1_h0_val == 64, rs2_h2_val == -17, rs1_h1_val == -257, rs2_h0_val == -4097
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x400fff7feff0040;  op2val:0x03ffefaaaaefff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x400fff7feff0040, 0x03ffefaaaaefff, x30, x2, 384, x4)

inst_56:
// rs1_h0_val == 16, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff020000050010;  op2val:0x40000050200ffff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xffff020000050010, 0x40000050200ffff, x30, x2, 400, x4)

inst_57:
// rs1_h0_val == 8, rs2_h0_val == -2049, rs1_h3_val == -4097
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0010c0000008;  op2val:0x4000002fffdf7ff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xefff0010c0000008, 0x4000002fffdf7ff, x30, x2, 416, x4)

inst_58:
// rs1_h0_val == 2, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000080fbff0002;  op2val:0x20fdff00080800
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x8000080fbff0002, 0x20fdff00080800, x30, x2, 432, x4)

inst_59:
// rs1_h0_val == -1, rs2_h1_val == -1
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fff90007ffff;  op2val:0x200001ffff0040
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x01fff90007ffff, 0x200001ffff0040, x30, x2, 448, x4)

inst_60:
// rs2_h3_val == 1, rs2_h1_val == 21845
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0600070005ffdf;  op2val:0x01000355550200
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x0600070005ffdf, 0x01000355550200, x30, x2, 464, x4)

inst_61:
// rs2_h3_val == 0, rs2_h2_val == -16385
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x80ffff01000004;  op2val:0x00bfffffffdfff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x80ffff01000004, 0x00bfffffffdfff, x30, x2, 480, x4)

inst_62:
// rs2_h2_val == -65, rs2_h0_val == 4
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000effffff6efff;  op2val:0xffffffbffffc0004
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xc000effffff6efff, 0xffffffbffffc0004, x30, x2, 496, x4)

inst_63:
// rs2_h1_val == 0, rs1_h3_val == 32767, rs1_h2_val == 8
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000804000040;  op2val:0xffeffff700000007
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x7fff000804000040, 0xffeffff700000007, x30, x2, 512, x4)

inst_64:
// rs2_h0_val == 32767, rs1_h3_val == 0, rs2_h1_val == 2048
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x00ffffffff0040;  op2val:0xffdf7fff08007fff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x00ffffffff0040, 0xffdf7fff08007fff, x30, x2, 528, x4)

inst_65:
// rs2_h0_val == -129, rs2_h2_val == 0
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x030080fffa1000;  op2val:0xfdff00000002ff7f
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x030080fffa1000, 0xfdff00000002ff7f, x30, x2, 544, x4)

inst_66:
// rs2_h0_val == -9, rs1_h1_val == -9
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffdfff7c000;  op2val:0xfffd10000200fff7
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xffeffffdfff7c000, 0xfffd10000200fff7, x30, x2, 560, x4)

inst_67:
// rs2_h0_val == -3, rs2_h1_val == -257
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x800fffa2000feff;  op2val:0x800fefffefffffd
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x800fffa2000feff, 0x800fefffefffffd, x30, x2, 576, x4)

inst_68:
// rs2_h0_val == -2, rs1_h2_val == 1
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000014000fff7;  op2val:0x08effffffcfffe
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x40000014000fff7, 0x08effffffcfffe, x30, x2, 592, x4)

inst_69:
// rs2_h0_val == 16384, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x01dffffeff0002;  op2val:0x03fffe08004000
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x01dffffeff0002, 0x03fffe08004000, x30, x2, 608, x4)

inst_70:
// rs2_h0_val == 8192, rs2_h1_val == 16384, rs1_h3_val == 32, rs1_h2_val == -257
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fefffdfffff7;  op2val:0x01c00040002000
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x20fefffdfffff7, 0x01c00040002000, x30, x2, 624, x4)

inst_71:
// rs2_h0_val == 1024, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0005fffb0007;  op2val:0xffdf0000fff80400
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfffc0005fffb0007, 0xffdf0000fff80400, x30, x2, 640, x4)

inst_72:
// rs2_h0_val == 128, rs2_h2_val == 64
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9020000800400;  op2val:0x1000040ffbf0080
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfff9020000800400, 0x1000040ffbf0080, x30, x2, 656, x4)

inst_73:
// rs2_h0_val == 32, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0520003ffffff6;  op2val:0x07000140000020
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x0520003ffffff6, 0x07000140000020, x30, x2, 672, x4)

inst_74:
// rs2_h0_val == 2, rs2_h2_val == 16384, rs1_h3_val == -2, rs1_h2_val == -1025
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefbff00080009;  op2val:0x1004000ffff0002
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfffefbff00080009, 0x1004000ffff0002, x30, x2, 688, x4)

inst_75:
// rs1_h3_val == -2049, rs2_h1_val == -2
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0004ff7f0004;  op2val:0x1000fbfffffeefff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xf7ff0004ff7f0004, 0x1000fbfffffeefff, x30, x2, 704, x4)

inst_76:
// rs1_h3_val == -1025, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffef0006fff8;  op2val:0xbfff3fff0008efff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfbffffef0006fff8, 0xbfff3fff0008efff, x30, x2, 720, x4)

inst_77:
// rs1_h3_val == 512, rs1_h1_val == -65
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fff7ffbf0000;  op2val:0x072000aaaabfff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x200fff7ffbf0000, 0x072000aaaabfff, x30, x2, 736, x4)

inst_78:
// rs1_h3_val == 256, rs2_h2_val == 2048, rs1_h2_val == 0
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fdffffff;  op2val:0x040800fdfffffd
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x1000000fdffffff, 0x040800fdfffffd, x30, x2, 752, x4)

inst_79:
// rs2_h2_val == -33, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fffe3fff8000;  op2val:0xfffdffdf20000003
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x10fffe3fff8000, 0xfffdffdf20000003, x30, x2, 768, x4)

inst_80:
// rs1_h3_val == 2, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fefffbfffff8;  op2val:0xbffffff700068000
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x02fefffbfffff8, 0xbffffff700068000, x30, x2, 784, x4)

inst_81:
// rs2_h2_val == -5, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f3fff00002000;  op2val:0xfdfffffbfffa0010
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xff7f3fff00002000, 0xfdfffffbfffa0010, x30, x2, 800, x4)

inst_82:
// rs1_h2_val == 21845, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x1005555fbfffff8;  op2val:0xffff0009fffff7ff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x1005555fbfffff8, 0xffff0009fffff7ff, x30, x2, 816, x4)

inst_83:
// rs1_h2_val == 32767, rs2_h2_val == 16
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x4007ffffbff0080;  op2val:0x2000001000060200
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x4007ffffbff0080, 0x2000001000060200, x30, x2, 832, x4)

inst_84:
// rs1_h2_val == -2049, rs2_h2_val == 32
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffaf7ffffbffff9;  op2val:0xaaaa00200400aaaa
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfffaf7ffffbffff9, 0xaaaa00200400aaaa, x30, x2, 848, x4)

inst_85:
// rs2_h2_val == 512, rs2_h1_val == -17
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe2000f7ffbfff;  op2val:0xc0000200ffeffffe
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfffe2000f7ffbfff, 0xc0000200ffeffffe, x30, x2, 864, x4)

inst_86:
// rs2_h2_val == 128, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffd7fff0040;  op2val:0xfbff0080aaaafffe
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfffcfffd7fff0040, 0xfbff0080aaaafffe, x30, x2, 880, x4)

inst_87:
// rs2_h2_val == -1, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fff8fff6efff;  op2val:0x80ffff40000100
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x00fff8fff6efff, 0x80ffff40000100, x30, x2, 896, x4)

inst_88:
// rs1_h2_val == 4096, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff1000fdffefff;  op2val:0x80000006fdff1000
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xffff1000fdffefff, 0x80000006fdff1000, x30, x2, 912, x4)

inst_89:
// rs1_h2_val == 1024, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb04000020fffd;  op2val:0x06fbffbfff0003
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfffb04000020fffd, 0x06fbffbfff0003, x30, x2, 928, x4)

inst_90:
// rs2_h1_val == -8193, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x10020002007fff;  op2val:0xffbf0004dfffffff
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x10020002007fff, 0xffbf0004dfffffff, x30, x2, 944, x4)

inst_91:
// rs2_h1_val == -2049, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffff901000008;  op2val:0x805555f7ffc000
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfdfffff901000008, 0x805555f7ffc000, x30, x2, 960, x4)

inst_92:
// rs2_h1_val == -129, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fffc0005ffff;  op2val:0xfbff0001ff7fff7f
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x05fffc0005ffff, 0xfbff0001ff7fff7f, x30, x2, 976, x4)

inst_93:
// rs1_h2_val == 2, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff80002fffb0003;  op2val:0x03fff6ffbffffe
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfff80002fffb0003, 0x03fff6ffbffffe, x30, x2, 992, x4)

inst_94:
// rs2_h1_val == -9, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd1000fbfffff9;  op2val:0x40001000fff70000
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfffd1000fbfffff9, 0x40001000fff70000, x30, x2, 1008, x4)

inst_95:
// rs1_h3_val == -257, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff7fff0005ff7f;  op2val:0xaaaaffbfaaaa0000
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfeff7fff0005ff7f, 0xaaaaffbfaaaa0000, x30, x2, 1024, x4)

inst_96:
// rs2_h1_val == -32768, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fff6f7ffefff;  op2val:0xfeff004080000003
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x03fff6f7ffefff, 0xfeff004080000003, x30, x2, 1040, x4)

inst_97:
// rs1_h3_val == -65, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffbf00020010;  op2val:0xdfff3ffffff60010
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xffbfffbf00020010, 0xdfff3ffffff60010, x30, x2, 1056, x4)

inst_98:
// rs2_h1_val == 256, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffadfff0001ff7f;  op2val:0xc000fff601000800
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfffadfff0001ff7f, 0xc000fff601000800, x30, x2, 1072, x4)

inst_99:
// rs1_h1_val == -8193, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x080006dffffff6;  op2val:0xfffcfff9f7ff0003
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x080006dffffff6, 0xfffcfff9f7ff0003, x30, x2, 1088, x4)

inst_100:
// rs1_h2_val == -5, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffb00400003;  op2val:0xfff9fff9fffa0200
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfff7fffb00400003, 0xfff9fff9fffa0200, x30, x2, 1104, x4)

inst_101:
// rs1_h1_val == -16385, 
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fffbbffffdff;  op2val:0x00fffeffef0080
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x02fffbbffffdff, 0x00fffeffef0080, x30, x2, 1120, x4)

inst_102:
// rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -3, rs1_h3_val == -1, rs1_h1_val == 16, rs2_h2_val == 8192, rs2_h0_val == -32768, rs1_h0_val == -2049, rs1_h2_val == -2
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe0010f7ff;  op2val:0xfffd200000058000
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xfffffffe0010f7ff, 0xfffd200000058000, x30, x2, 1136, x4)

inst_103:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == -4097, rs2_h2_val == -129, rs1_h2_val == 32, rs1_h0_val == 2048, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == -65, rs1_h3_val == 16384, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h3_val == -1
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000020c0000800;  op2val:0xffffff7fefffffbf
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0x40000020c0000800, 0xffffff7fefffffbf, x30, x2, 1152, x4)

inst_104:
// rs2_h3_val == -4097, rs2_h1_val == -1025, rs1_h1_val == 21845, rs1_h2_val == -16385
// opcode: ksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaabfff5555fff9;  op2val:0xefff0400fbfffff9
TEST_PKRR_OP(ksub16, x31, x30, x29, 0x0000000000000000, 0xaaaabfff5555fff9, 0xefff0400fbfffff9, x30, x2, 1168, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 148*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
