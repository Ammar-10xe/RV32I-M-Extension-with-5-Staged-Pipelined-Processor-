
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kstas16 instruction of the RISC-V RV64PZicsr extension for the kstas16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kstas16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x1, rs2==x24, rd==x1, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h0_val == 1, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val == 21845, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h1_val == 64, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -8193, rs2_h3_val == -1, rs2_h2_val == 32767
// opcode: kstas16 ; op1:x1; op2:x24; dest:x1; op1val:0x5555c000dfff8000;  op2val:0xffff7fff00400001
TEST_PKRR_OP(kstas16, x1, x1, x24, 0x0000000000000000, 0x5555c000dfff8000, 0xffff7fff00400001, x1, x6, 0, x7)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x14, rs2==x8, rd==x24, rs1_h3_val == rs2_h3_val, rs2_h0_val == 16, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 16, rs1_h1_val == 64, rs1_h2_val == -1, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 1, rs2_h3_val == 16, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 1024, rs2_h2_val == 21845
// opcode: kstas16 ; op1:x14; op2:x8; dest:x24; op1val:0x10ffff00400001;  op2val:0x10555504000010
TEST_PKRR_OP(kstas16, x24, x14, x8, 0x0000000000000000, 0x10ffff00400001, 0x10555504000010, x14, x6, 16, x7)

inst_2:
// rs1 == rs2 != rd, rs1==x19, rs2==x19, rd==x22, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h0_val == -33, rs2_h1_val == 256, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h3_val == -16385, rs1_h2_val == 4, rs2_h2_val == 512, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h3_val == 21845
// opcode: kstas16 ; op1:x19; op2:x19; dest:x22; op1val:0xbfff00040009ffdf;  op2val:0x555502000100fff9
TEST_PKRR_OP(kstas16, x22, x19, x19, 0x0000000000000000, 0xbfff00040009ffdf, 0x555502000100fff9, x19, x6, 32, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x11, rs2==x11, rd==x11, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -1025, rs1_h1_val == 16384, rs2_h0_val == -16385, rs1_h0_val == 2048, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h2_val == -65, rs2_h2_val == 8
// opcode: kstas16 ; op1:x11; op2:x11; dest:x11; op1val:0xfff9ffbf40000800;  op2val:0xfbff0008fff8bfff
TEST_PKRR_OP(kstas16, x11, x11, x11, 0x0000000000000000, 0xfff9ffbf40000800, 0xfbff0008fff8bfff, x11, x6, 48, x7)

inst_4:
// rs2 == rd != rs1, rs1==x28, rs2==x4, rd==x4, rs1_h2_val == rs2_h2_val, rs2_h0_val == 64, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h3_val == -8193, rs1_h0_val == 16, rs2_h1_val == 32, rs2_h3_val == -4097
// opcode: kstas16 ; op1:x28; op2:x4; dest:x4; op1val:0xdffffffcfff90010;  op2val:0xeffffffc00200040
TEST_PKRR_OP(kstas16, x4, x28, x4, 0x0000000000000000, 0xdffffffcfff90010, 0xeffffffc00200040, x28, x6, 64, x7)

inst_5:
// rs1==x4, rs2==x12, rd==x9, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h2_val == -1, rs1_h2_val == 32, rs1_h1_val == 0, rs1_h0_val == -9
// opcode: kstas16 ; op1:x4; op2:x12; dest:x9; op1val:0xbfff00200000fff7;  op2val:0xefffffffc0000001
TEST_PKRR_OP(kstas16, x9, x4, x12, 0x0000000000000000, 0xbfff00200000fff7, 0xefffffffc0000001, x4, x6, 80, x7)

inst_6:
// rs1==x8, rs2==x5, rd==x30, rs1_h1_val == rs2_h1_val, rs2_h3_val == -65, rs2_h1_val == -2049, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == 8, rs2_h2_val == 1024, rs2_h0_val == -3, rs1_h1_val == -2049, rs1_h2_val == -5, rs1_h3_val == 2048
// opcode: kstas16 ; op1:x8; op2:x5; dest:x30; op1val:0x800fffbf7ff0008;  op2val:0xffbf0400f7fffffd
TEST_PKRR_OP(kstas16, x30, x8, x5, 0x0000000000000000, 0x800fffbf7ff0008, 0xffbf0400f7fffffd, x8, x6, 96, x7)

inst_7:
// rs1==x22, rs2==x31, rd==x28, rs1_h0_val == rs2_h0_val, rs1_h3_val == 1, rs2_h3_val == 256
// opcode: kstas16 ; op1:x22; op2:x31; dest:x28; op1val:0x01fff800030003;  op2val:0x100fff9fff90003
TEST_PKRR_OP(kstas16, x28, x22, x31, 0x0000000000000000, 0x01fff800030003, 0x100fff9fff90003, x22, x6, 112, x7)

inst_8:
// rs1==x10, rs2==x29, rd==x3, rs2_h3_val == -21846, rs1_h2_val == 64, rs1_h1_val == -513, rs1_h3_val == 8, rs2_h0_val == 32767
// opcode: kstas16 ; op1:x10; op2:x29; dest:x3; op1val:0x080040fdff0001;  op2val:0xaaaa555501007fff
TEST_PKRR_OP(kstas16, x3, x10, x29, 0x0000000000000000, 0x080040fdff0001, 0xaaaa555501007fff, x10, x6, 128, x7)

inst_9:
// rs1==x27, rs2==x28, rd==x14, rs2_h3_val == 32767, rs1_h2_val == 1024, rs1_h1_val == -33, rs1_h3_val == -17
// opcode: kstas16 ; op1:x27; op2:x28; dest:x14; op1val:0xffef0400ffdffffc;  op2val:0x7fff040000200040
TEST_PKRR_OP(kstas16, x14, x27, x28, 0x0000000000000000, 0xffef0400ffdffffc, 0x7fff040000200040, x27, x6, 144, x7)

inst_10:
// rs1==x25, rs2==x1, rd==x29, rs2_h3_val == -16385, rs2_h1_val == -1025, rs2_h2_val == 4096, rs1_h3_val == 64, rs2_h0_val == -32768
// opcode: kstas16 ; op1:x25; op2:x1; dest:x29; op1val:0x40fffadfff8000;  op2val:0xbfff1000fbff8000
TEST_PKRR_OP(kstas16, x29, x25, x1, 0x0000000000000000, 0x40fffadfff8000, 0xbfff1000fbff8000, x25, x6, 160, x7)

inst_11:
// rs1==x30, rs2==x15, rd==x13, rs2_h3_val == -8193, rs1_h2_val == -16385, rs1_h1_val == 21845, rs2_h2_val == 256, rs2_h1_val == 8
// opcode: kstas16 ; op1:x30; op2:x15; dest:x13; op1val:0xffefbfff55550009;  op2val:0xdfff010000080040
TEST_PKRR_OP(kstas16, x13, x30, x15, 0x0000000000000000, 0xffefbfff55550009, 0xdfff010000080040, x30, x6, 176, x7)

inst_12:
// rs1==x20, rs2==x0, rd==x19, rs2_h3_val == -2049, rs2_h2_val == -33, rs1_h3_val == -65, rs1_h2_val == 21845, rs1_h0_val == -5
// opcode: kstas16 ; op1:x20; op2:x0; dest:x19; op1val:0xffbf5555fff6fffb;  op2val:0xf7ffffdffff88000
TEST_PKRR_OP(kstas16, x19, x20, x0, 0x0000000000000000, 0xffbf5555fff6fffb, 0xf7ffffdffff88000, x20, x6, 192, x7)

inst_13:
// rs1==x21, rs2==x2, rd==x23, rs2_h3_val == -513, rs1_h0_val == 1024, rs2_h1_val == -17, rs2_h0_val == -17, rs1_h2_val == -33, rs1_h1_val == -9
// opcode: kstas16 ; op1:x21; op2:x2; dest:x23; op1val:0xffefffdffff70400;  op2val:0xfdff3fffffefffef
TEST_PKRR_OP(kstas16, x23, x21, x2, 0x0000000000000000, 0xffefffdffff70400, 0xfdff3fffffefffef, x21, x6, 208, x7)

inst_14:
// rs1==x29, rs2==x13, rd==x12, rs2_h3_val == -257, rs1_h1_val == -2, rs2_h0_val == -129, rs1_h3_val == -33, rs1_h2_val == -257, rs2_h1_val == 2048
// opcode: kstas16 ; op1:x29; op2:x13; dest:x12; op1val:0xffdffefffffeffdf;  op2val:0xfeff00080800ff7f
TEST_PKRR_OP(kstas16, x12, x29, x13, 0x0000000000000000, 0xffdffefffffeffdf, 0xfeff00080800ff7f, x29, x6, 224, x7)

inst_15:
// rs1==x2, rs2==x27, rd==x18, rs2_h3_val == -129, rs1_h1_val == -1025, rs2_h1_val == -3, rs2_h0_val == -2
// opcode: kstas16 ; op1:x2; op2:x27; dest:x18; op1val:0x030004fbffffdf;  op2val:0xff7f0009fffdfffe
TEST_PKRR_OP(kstas16, x18, x2, x27, 0x0000000000000000, 0x030004fbffffdf, 0xff7f0009fffdfffe, x2, x6, 240, x7)

inst_16:
// rs1==x15, rs2==x16, rd==x21, rs2_h3_val == -33, rs1_h3_val == -257, rs2_h1_val == -33
// opcode: kstas16 ; op1:x15; op2:x16; dest:x21; op1val:0xfefffefffff63fff;  op2val:0xffdffffcffdf3fff
TEST_PKRR_OP(kstas16, x21, x15, x16, 0x0000000000000000, 0xfefffefffff63fff, 0xffdffffcffdf3fff, x15, x6, 256, x4)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_17:
// rs1==x5, rs2==x20, rd==x7, rs2_h3_val == -17, rs2_h2_val == 64, rs1_h3_val == -3, rs1_h0_val == -3
// opcode: kstas16 ; op1:x5; op2:x20; dest:x7; op1val:0xfffd3ffffdfffffd;  op2val:0xffef004000037fff
TEST_PKRR_OP(kstas16, x7, x5, x20, 0x0000000000000000, 0xfffd3ffffdfffffd, 0xffef004000037fff, x5, x1, 0, x4)

inst_18:
// rs1==x23, rs2==x21, rd==x2, rs2_h3_val == -9, rs2_h0_val == 8192, rs1_h3_val == 0, rs1_h1_val == 2048, rs1_h2_val == 32767
// opcode: kstas16 ; op1:x23; op2:x21; dest:x2; op1val:0x007fff0800fff9;  op2val:0xfff7c00000032000
TEST_PKRR_OP(kstas16, x2, x23, x21, 0x0000000000000000, 0x007fff0800fff9, 0xfff7c00000032000, x23, x1, 16, x4)

inst_19:
// rs1==x16, rs2==x25, rd==x8, rs2_h3_val == -5, rs2_h2_val == -513, rs2_h0_val == 256, rs1_h0_val == 16384
// opcode: kstas16 ; op1:x16; op2:x25; dest:x8; op1val:0xffdf0400fdff4000;  op2val:0xfffbfdff01000100
TEST_PKRR_OP(kstas16, x8, x16, x25, 0x0000000000000000, 0xffdf0400fdff4000, 0xfffbfdff01000100, x16, x1, 32, x4)

inst_20:
// rs1==x9, rs2==x3, rd==x6, rs2_h3_val == -3, rs2_h2_val == -17, rs2_h1_val == -129, rs1_h1_val == -1, rs1_h0_val == 21845
// opcode: kstas16 ; op1:x9; op2:x3; dest:x6; op1val:0xbfff0020ffff5555;  op2val:0xfffdffefff7f0005
TEST_PKRR_OP(kstas16, x6, x9, x3, 0x0000000000000000, 0xbfff0020ffff5555, 0xfffdffefff7f0005, x9, x1, 48, x4)

inst_21:
// rs1==x24, rs2==x23, rd==x10, rs2_h3_val == -2, rs2_h1_val == 21845, rs1_h3_val == 32767, rs1_h2_val == 1
// opcode: kstas16 ; op1:x24; op2:x23; dest:x10; op1val:0x7fff0001fffe8000;  op2val:0xfffe00055555fff9
TEST_PKRR_OP(kstas16, x10, x24, x23, 0x0000000000000000, 0x7fff0001fffe8000, 0xfffe00055555fff9, x24, x1, 64, x4)

inst_22:
// rs1==x31, rs2==x14, rd==x0, rs2_h3_val == -32768, rs1_h0_val == 32, rs2_h1_val == 8192, rs2_h0_val == 128
// opcode: kstas16 ; op1:x31; op2:x14; dest:x0; op1val:0xfff63fff00090020;  op2val:0x8000010020000080
TEST_PKRR_OP(kstas16, x0, x31, x14, 0x0000000000000000, 0xfff63fff00090020, 0x8000010020000080, x31, x1, 80, x4)

inst_23:
// rs1==x0, rs2==x26, rd==x20, rs2_h3_val == 16384, rs1_h1_val == 256
// opcode: kstas16 ; op1:x0; op2:x26; dest:x20; op1val:0x800fff801004000;  op2val:0x4000fff804003fff
TEST_PKRR_OP(kstas16, x20, x0, x26, 0x0000000000000000, 0x800fff801004000, 0x4000fff804003fff, x0, x1, 96, x4)

inst_24:
// rs1==x12, rs2==x30, rd==x16, rs2_h3_val == 8192, rs1_h1_val == 4, rs2_h2_val == -5
// opcode: kstas16 ; op1:x12; op2:x30; dest:x16; op1val:0xffdf00060004c000;  op2val:0x2000fffbfffafffd
TEST_PKRR_OP(kstas16, x16, x12, x30, 0x0000000000000000, 0xffdf00060004c000, 0x2000fffbfffafffd, x12, x1, 112, x4)

inst_25:
// rs1==x7, rs2==x17, rd==x31, rs2_h3_val == 4096, rs2_h0_val == 16384, rs1_h3_val == -2
// opcode: kstas16 ; op1:x7; op2:x17; dest:x31; op1val:0xfffe000440005555;  op2val:0x1000000808004000
TEST_PKRR_OP(kstas16, x31, x7, x17, 0x0000000000000000, 0xfffe000440005555, 0x1000000808004000, x7, x1, 128, x4)

inst_26:
// rs1==x17, rs2==x9, rd==x25, rs2_h3_val == 2048, rs2_h1_val == -513, rs1_h3_val == 4096
// opcode: kstas16 ; op1:x17; op2:x9; dest:x25; op1val:0x1000fffc0009fff6;  op2val:0x800fdfffdff2000
TEST_PKRR_OP(kstas16, x25, x17, x9, 0x0000000000000000, 0x1000fffc0009fff6, 0x800fdfffdff2000, x17, x1, 144, x4)

inst_27:
// rs1==x26, rs2==x22, rd==x15, rs2_h3_val == 1024, rs2_h2_val == -1025, rs1_h2_val == -21846
// opcode: kstas16 ; op1:x26; op2:x22; dest:x15; op1val:0x07aaaa3fff0006;  op2val:0x400fbffff7f0007
TEST_PKRR_OP(kstas16, x15, x26, x22, 0x0000000000000000, 0x07aaaa3fff0006, 0x400fbffff7f0007, x26, x1, 160, x4)

inst_28:
// rs1==x3, rs2==x10, rd==x27, rs2_h3_val == 512, rs1_h0_val == 128, rs2_h1_val == -32768, rs2_h2_val == -2
// opcode: kstas16 ; op1:x3; op2:x10; dest:x27; op1val:0x5555fff6fff70080;  op2val:0x200fffe80000007
TEST_PKRR_OP(kstas16, x27, x3, x10, 0x0000000000000000, 0x5555fff6fff70080, 0x200fffe80000007, x3, x1, 176, x4)

inst_29:
// rs1==x13, rs2==x6, rd==x17, rs2_h3_val == 128, rs2_h2_val == -8193, rs2_h0_val == 512, rs2_h1_val == 16, rs1_h1_val == 512
// opcode: kstas16 ; op1:x13; op2:x6; dest:x17; op1val:0x7fffffbf02000005;  op2val:0x80dfff00100200
TEST_PKRR_OP(kstas16, x17, x13, x6, 0x0000000000000000, 0x7fffffbf02000005, 0x80dfff00100200, x13, x1, 192, x4)

inst_30:
// rs1==x6, rs2==x18, rd==x5, rs2_h3_val == 64, rs1_h0_val == -17, rs2_h0_val == -5
// opcode: kstas16 ; op1:x6; op2:x18; dest:x5; op1val:0x07bfffc000ffef;  op2val:0x40fffffff6fffb
TEST_PKRR_OP(kstas16, x5, x6, x18, 0x0000000000000000, 0x07bfffc000ffef, 0x40fffffff6fffb, x6, x1, 208, x4)

inst_31:
// rs1==x18, rs2==x7, rd==x26, rs2_h3_val == 32, rs1_h3_val == 1024, rs1_h2_val == -1025, rs1_h0_val == -129
// opcode: kstas16 ; op1:x18; op2:x7; dest:x26; op1val:0x400fbff3fffff7f;  op2val:0x2004002000fff8
TEST_PKRR_OP(kstas16, x26, x18, x7, 0x0000000000000000, 0x400fbff3fffff7f, 0x2004002000fff8, x18, x1, 224, x4)

inst_32:
// rs2_h3_val == 8, rs2_h2_val == -129, rs1_h1_val == 1024, rs2_h1_val == -5, rs2_h0_val == -33, rs1_h2_val == -513
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x800fdff0400fffc;  op2val:0x08ff7ffffbffdf
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x800fdff0400fffc, 0x08ff7ffffbffdf, x30, x1, 240, x4)

inst_33:
// rs2_h3_val == 4, rs1_h3_val == -1025, rs2_h0_val == -21846, rs1_h0_val == 32767
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000502007fff;  op2val:0x04ffff0006aaaa
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xfbff000502007fff, 0x04ffff0006aaaa, x30, x1, 256, x2)

inst_34:
// rs2_h3_val == 2, rs1_h2_val == 16384, rs1_h3_val == 512, rs2_h0_val == 2048, rs1_h1_val == 128
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x20040000080ff7f;  op2val:0x02000780000800
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x20040000080ff7f, 0x02000780000800, x30, x1, 272, x2)

inst_35:
// rs2_h3_val == 1, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x400fff600050007;  op2val:0x01fff600050800
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x400fff600050007, 0x01fff600050800, x30, x1, 288, x2)

inst_36:
// rs1_h1_val == -5, rs2_h1_val == 32767, rs1_h0_val == 256
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x090009fffb0100;  op2val:0x1000fffb7fffc000
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x090009fffb0100, 0x1000fffb7fffc000, x30, x1, 304, x2)

inst_37:
// rs1_h1_val == -3, rs2_h2_val == -9, rs2_h0_val == -1025, rs2_h1_val == -8193
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ffdffffdfffd;  op2val:0xfffcfff7dffffbff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x01ffdffffdfffd, 0xfffcfff7dffffbff, x30, x1, 320, x2)

inst_38:
// rs1_h1_val == -32768, rs1_h2_val == 4096, rs1_h3_val == 2, rs1_h0_val == -4097, rs2_h3_val == 0
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0210008000efff;  op2val:0x00fff68000fffa
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x0210008000efff, 0x00fff68000fffa, x30, x1, 336, x2)

inst_39:
// rs1_h1_val == 8192, rs2_h0_val == -1, rs2_h2_val == -21846
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6feff2000c000;  op2val:0x40aaaa0400ffff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xfff6feff2000c000, 0x40aaaa0400ffff, x30, x1, 352, x2)

inst_40:
// rs1_h1_val == 4096, rs1_h3_val == -32768, rs2_h0_val == -257, rs2_h2_val == 128
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000c00010000003;  op2val:0x0400807ffffeff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x8000c00010000003, 0x0400807ffffeff, x30, x1, 368, x2)

inst_41:
// rs1_h1_val == 32, rs1_h0_val == 2
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfaaaa00200002;  op2val:0xfffefffafffb0007
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xffbfaaaa00200002, 0xfffefffafffb0007, x30, x1, 384, x2)

inst_42:
// rs1_h1_val == 16, rs2_h0_val == 8, rs1_h3_val == 32, rs2_h1_val == -9
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x20bfff0010ffdf;  op2val:0x07ff7ffff70008
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x20bfff0010ffdf, 0x07ff7ffff70008, x30, x1, 400, x2)

inst_43:
// rs1_h1_val == 8, rs2_h2_val == -4097, rs2_h0_val == -513
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x400400000080020;  op2val:0x8000effffff9fdff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x400400000080020, 0x8000effffff9fdff, x30, x1, 416, x2)

inst_44:
// rs1_h1_val == 2, rs2_h2_val == -65, rs2_h0_val == 4096, rs1_h0_val == -1
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x10bfff0002ffff;  op2val:0x800ffbfff7f1000
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x10bfff0002ffff, 0x800ffbfff7f1000, x30, x1, 432, x2)

inst_45:
// rs1_h1_val == 1, rs2_h1_val == -65
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x400100000010100;  op2val:0x04ffbfffbffbff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x400100000010100, 0x04ffbfffbffbff, x30, x1, 448, x2)

inst_46:
// rs1_h0_val == -21846, rs1_h3_val == -129, rs2_h0_val == 4
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0001fdffaaaa;  op2val:0x08000300400004
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xff7f0001fdffaaaa, 0x08000300400004, x30, x1, 464, x2)

inst_47:
// rs1_h0_val == -16385, rs2_h2_val == 32
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x800010000200bfff;  op2val:0xfdff0020fffdfff8
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x800010000200bfff, 0xfdff0020fffdfff8, x30, x1, 480, x2)

inst_48:
// rs1_h0_val == -8193, rs1_h1_val == 32767, rs1_h2_val == 256
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff601007fffdfff;  op2val:0xfdffffff7fffffff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xfff601007fffdfff, 0xfdffffff7fffffff, x30, x1, 496, x2)

inst_49:
// rs1_h0_val == -2049, rs2_h2_val == 8192, rs1_h2_val == -9, rs1_h1_val == -21846
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffff7aaaaf7ff;  op2val:0x8002000fbfffdff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xfefffff7aaaaf7ff, 0x8002000fbfffdff, x30, x1, 512, x2)

inst_50:
// rs1_h0_val == -1025, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x07fff70100fbff;  op2val:0x800fffbfffcff7f
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x07fff70100fbff, 0x800fffbfffcff7f, x30, x1, 528, x2)

inst_51:
// rs1_h0_val == -513, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffbf5555fdff;  op2val:0x06ffdf0800fffb
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xffbfffbf5555fdff, 0x06ffdf0800fffb, x30, x1, 544, x2)

inst_52:
// rs1_h0_val == -257, rs1_h3_val == -9
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fff8fffafeff;  op2val:0xfff8020001003fff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xfff7fff8fffafeff, 0xfff8020001003fff, x30, x1, 560, x2)

inst_53:
// rs1_h0_val == -65, rs2_h1_val == -257, rs2_h0_val == 1024
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x40fffb0009ffbf;  op2val:0x080007feff0400
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x40fffb0009ffbf, 0x080007feff0400, x30, x1, 576, x2)

inst_54:
// rs1_h0_val == -2, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0001fff7fffe;  op2val:0x020003ff7ffffa
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xffdf0001fff7fffe, 0x020003ff7ffffa, x30, x1, 592, x2)

inst_55:
// rs1_h0_val == 8192, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x020100fff92000;  op2val:0xc00000800800ffef
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x020100fff92000, 0xc00000800800ffef, x30, x1, 608, x2)

inst_56:
// rs1_h0_val == 4096, rs1_h2_val == -4097
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7efff00071000;  op2val:0xffff00050040fffa
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xfff7efff00071000, 0xffff00050040fffa, x30, x1, 624, x2)

inst_57:
// rs1_h0_val == 512, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff100000100200;  op2val:0xfffac00001000006
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xfbff100000100200, 0xfffac00001000006, x30, x1, 640, x2)

inst_58:
// rs1_h0_val == 64, rs1_h1_val == -16385, rs2_h2_val == 0
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffbfff0040;  op2val:0xffff000000100080
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xfffeffffbfff0040, 0xffff000000100080, x30, x1, 656, x2)

inst_59:
// rs1_h0_val == 4, rs2_h2_val == -16385
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x03ffff00080004;  op2val:0xdfffbffffbfffffd
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x03ffff00080004, 0xdfffbffffbfffffd, x30, x1, 672, x2)

inst_60:
// rs1_h0_val == 0, rs2_h1_val == -21846, rs2_h2_val == -2049
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0001aaaa0000;  op2val:0xfff9f7ffaaaa0400
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xdfff0001aaaa0000, 0xfff9f7ffaaaa0400, x30, x1, 688, x2)

inst_61:
// rs2_h1_val == 4, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f00071000ffff;  op2val:0x3fff000800040100
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xff7f00071000ffff, 0x3fff000800040100, x30, x1, 704, x2)

inst_62:
// rs2_h1_val == 2, rs2_h2_val == 16, rs1_h1_val == -257
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x40fff6feffc000;  op2val:0xfffc001000020003
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x40fff6feffc000, 0xfffc001000020003, x30, x1, 720, x2)

inst_63:
// rs2_h1_val == 1, rs2_h2_val == 2048
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf40000002feff;  op2val:0xff7f08000001fdff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xffdf40000002feff, 0xff7f08000001fdff, x30, x1, 736, x2)

inst_64:
// rs2_h1_val == 0, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fdfffff80080;  op2val:0x20555500001000
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x20fdfffff80080, 0x20555500001000, x30, x1, 752, x2)

inst_65:
// rs2_h1_val == -1, rs2_h2_val == 4
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9100000020001;  op2val:0xffff0004ffff1000
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xfff9100000020001, 0xffff0004ffff1000, x30, x1, 768, x2)

inst_66:
// rs2_h0_val == 21845, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff800050007dfff;  op2val:0x8000005ff7f5555
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xfff800050007dfff, 0x8000005ff7f5555, x30, x1, 784, x2)

inst_67:
// rs2_h0_val == -8193, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000fbff00010080;  op2val:0xfff910000800dfff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xc000fbff00010080, 0xfff910000800dfff, x30, x1, 800, x2)

inst_68:
// rs2_h0_val == -4097, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff10000080ff7f;  op2val:0x20055558000efff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xfbff10000080ff7f, 0x20055558000efff, x30, x1, 816, x2)

inst_69:
// rs2_h0_val == -2049, rs1_h3_val == 128
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000400040f7ff;  op2val:0x01fffafffdf7ff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x8000400040f7ff, 0x01fffafffdf7ff, x30, x1, 832, x2)

inst_70:
// rs2_h0_val == -65, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550400fff70004;  op2val:0xfff810000400ffbf
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x55550400fff70004, 0xfff810000400ffbf, x30, x1, 848, x2)

inst_71:
// rs2_h0_val == -9, rs1_h3_val == 4
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x040100fffcfffd;  op2val:0x070003fff7fff7
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x040100fffcfffd, 0x070003fff7fff7, x30, x1, 864, x2)

inst_72:
// rs2_h0_val == 32, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x060040fff7dfff;  op2val:0x01fbffffef0020
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x060040fff7dfff, 0x01fbffffef0020, x30, x1, 880, x2)

inst_73:
// rs2_h0_val == 2, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fefffff70200;  op2val:0xfbfffffe00070002
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x00fefffff70200, 0xfbfffffe00070002, x30, x1, 896, x2)

inst_74:
// rs2_h0_val == 0, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffeffffffc0800;  op2val:0x1007ffffeff0000
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xfbffeffffffc0800, 0x1007ffffeff0000, x30, x1, 912, x2)

inst_75:
// rs1_h3_val == -21846, rs2_h2_val == -3
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaffffc0000007;  op2val:0xc000fffd00060400
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xaaaaffffc0000007, 0xc000fffd00060400, x30, x1, 928, x2)

inst_76:
// rs1_h3_val == -4097, rs2_h1_val == -4097
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff55550003aaaa;  op2val:0x01fff6effff7ff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xefff55550003aaaa, 0x01fff6effff7ff, x30, x1, 944, x2)

inst_77:
// rs1_h3_val == -2049, rs1_h2_val == -129
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffff7f00402000;  op2val:0x5555fff60006c000
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xf7ffff7f00402000, 0x5555fff60006c000, x30, x1, 960, x2)

inst_78:
// rs1_h3_val == -513, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffbff00070001;  op2val:0xaaaafffd0006bfff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xfdfffbff00070001, 0xaaaafffd0006bfff, x30, x1, 976, x2)

inst_79:
// rs1_h3_val == -5, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb00400005fffb;  op2val:0xfffe000600040200
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xfffb00400005fffb, 0xfffe000600040200, x30, x1, 992, x2)

inst_80:
// rs1_h3_val == 16384, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000400aaaa1000;  op2val:0xffdffdffffff0020
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x40000400aaaa1000, 0xffdffdffffff0020, x30, x1, 1008, x2)

inst_81:
// rs1_h3_val == 8192, rs1_h2_val == 0
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000080feff;  op2val:0x400010fff6fff8
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x200000000080feff, 0x400010fff6fff8, x30, x1, 1024, x2)

inst_82:
// rs1_h3_val == 256, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fff910000005;  op2val:0xefffdfffc0000007
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x100fff910000005, 0xefffdfffc0000007, x30, x1, 1040, x2)

inst_83:
// rs2_h2_val == -257, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x10001000fff80002;  op2val:0x07feff00065555
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x10001000fff80002, 0x07feff00065555, x30, x1, 1056, x2)

inst_84:
// rs1_h3_val == -1, rs1_h2_val == -8193
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffff7ff4000;  op2val:0x000400fffbffff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xffffdffff7ff4000, 0x000400fffbffff, x30, x1, 1072, x2)

inst_85:
// rs2_h2_val == -32768, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffafefffff6;  op2val:0x200800020004000
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xffbffffafefffff6, 0x200800020004000, x30, x1, 1088, x2)

inst_86:
// rs2_h2_val == 16384, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x20dfffbfff0003;  op2val:0xfffa40000400ffff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x20dfffbfff0003, 0xfffa40000400ffff, x30, x1, 1104, x2)

inst_87:
// rs1_h2_val == -2049, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x02f7ff10004000;  op2val:0x0510000001fff8
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x02f7ff10004000, 0x0510000001fff8, x30, x1, 1120, x2)

inst_88:
// rs1_h2_val == -17, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000ffeffff9ffdf;  op2val:0xfffb0040ffdfff7f
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xc000ffeffff9ffdf, 0xfffb0040ffdfff7f, x30, x1, 1136, x2)

inst_89:
// rs2_h2_val == 2, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0000c000ffdf;  op2val:0x100000020100ffbf
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xfffe0000c000ffdf, 0x100000020100ffbf, x30, x1, 1152, x2)

inst_90:
// rs1_h2_val == -3, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffd0004ffef;  op2val:0x2000ffdf7fffefff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xaaaafffd0004ffef, 0x2000ffdf7fffefff, x30, x1, 1168, x2)

inst_91:
// rs2_h2_val == 1, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa400040000010;  op2val:0xdfff00010010ffbf
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xaaaa400040000010, 0xdfff00010010ffbf, x30, x1, 1184, x2)

inst_92:
// rs1_h2_val == -2, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fffefffefffe;  op2val:0xfffc2000fff60010
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x01fffefffefffe, 0xfffc2000fff60010, x30, x1, 1200, x2)

inst_93:
// rs1_h2_val == -32768, rs2_h1_val == 512
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0180000006ffef;  op2val:0xc000000002003fff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x0180000006ffef, 0xc000000002003fff, x30, x1, 1216, x2)

inst_94:
// rs1_h2_val == 8192, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x09200000095555;  op2val:0x7ffffffafff8fffc
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x09200000095555, 0x7ffffffafff8fffc, x30, x1, 1232, x2)

inst_95:
// rs1_h2_val == 2048, rs1_h1_val == -4097
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x000800efffffdf;  op2val:0x7ffffffb0006ffff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x000800efffffdf, 0x7ffffffb0006ffff, x30, x1, 1248, x2)

inst_96:
// rs2_h1_val == -16385, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfff9fdfffff8;  op2val:0x55550008bfff0000
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xfffbfff9fdfffff8, 0x55550008bfff0000, x30, x1, 1264, x2)

inst_97:
// rs1_h2_val == 512, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff020000055555;  op2val:0x01fbfffffb0001
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xefff020000055555, 0x01fbfffffb0001, x30, x1, 1280, x2)

inst_98:
// rs1_h2_val == 128, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000080c000fff7;  op2val:0x1000037fff0003
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x8000080c000fff7, 0x1000037fff0003, x30, x1, 1296, x2)

inst_99:
// rs1_h2_val == 16, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0800100005f7ff;  op2val:0xfffd80000000ff7f
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x0800100005f7ff, 0xfffd80000000ff7f, x30, x1, 1312, x2)

inst_100:
// rs1_h2_val == 8, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x03000820001000;  op2val:0xbffffff700020003
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x03000820001000, 0xbffffff700020003, x30, x1, 1328, x2)

inst_101:
// rs1_h2_val == 2, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff800023fffc000;  op2val:0x8000fffc04000005
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xfff800023fffc000, 0x8000fffc04000005, x30, x1, 1344, x2)

inst_102:
// rs2_h1_val == -2, rs1_h1_val == -17
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffdffffef0009;  op2val:0xffef3ffffffefffe
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xffdffdffffef0009, 0xffef3ffffffefffe, x30, x1, 1360, x2)

inst_103:
// rs1_h1_val == -129, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x10efffff7ffdff;  op2val:0xfffd00800003fff8
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x10efffff7ffdff, 0xfffd00800003fff8, x30, x1, 1376, x2)

inst_104:
// rs2_h1_val == 128, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fff95555ff7f;  op2val:0x40aaaa0080fff8
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x08fff95555ff7f, 0x40aaaa0080fff8, x30, x1, 1392, x2)

inst_105:
// rs2_h1_val == 16384, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6bfffc000fffb;  op2val:0x8000fbff4000bfff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xfff6bfffc000fffb, 0x8000fbff4000bfff, x30, x1, 1408, x2)

inst_106:
// rs1_h1_val == -65, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ffdfffbf0001;  op2val:0xaaaa00022000ffff
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0x01ffdfffbf0001, 0xaaaa00022000ffff, x30, x1, 1424, x2)

inst_107:
// rs2_h1_val == 4096, 
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfefff80000100;  op2val:0x4000fdff10000010
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xffbfefff80000100, 0x4000fdff10000010, x30, x1, 1440, x2)

inst_108:
// rs2_h3_val == -2049, rs2_h2_val == -33, rs1_h3_val == -65, rs1_h2_val == 21845, rs1_h0_val == -5
// opcode: kstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf5555fff6fffb;  op2val:0xf7ffffdffff88000
TEST_PKRR_OP(kstas16, x31, x30, x29, 0x0000000000000000, 0xffbf5555fff6fffb, 0xf7ffffdffff88000, x30, x1, 1456, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 184*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
