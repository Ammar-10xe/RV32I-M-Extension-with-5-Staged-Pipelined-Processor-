
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uksub16 instruction of the RISC-V RV64PZicsr extension for the uksub16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uksub16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x1, rs2==x19, rd==x1, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 65407, rs2_h1_val == 57343, rs2_h0_val == 43690, rs2_h2_val == 32768
// opcode: uksub16 ; op1:x1; op2:x19; dest:x1; op1val:0x0b001100030000;  op2val:0xff7f8000dfffaaaa
TEST_PKRR_OP(uksub16, x1, x1, x19, 0x0000000000000000, 0x0b001100030000, 0xff7f8000dfffaaaa, x1, x7, 0, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x16, rs2==x24, rd==x2, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h1_val == 32768, rs1_h1_val == 32767, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 4096, rs1_h3_val == 65534, rs1_h2_val == 65519, rs1_h0_val == 65407, rs2_h2_val == 63487, rs2_h3_val == 65534
// opcode: uksub16 ; op1:x16; op2:x24; dest:x2; op1val:0xfffeffef7fffff7f;  op2val:0xfffef7ff80001000
TEST_PKRR_OP(uksub16, x2, x16, x24, 0x0000000000000000, 0xfffeffef7fffff7f, 0xfffef7ff80001000, x16, x7, 16, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x3, rs2==x3, rd==x29, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h3_val == 512, rs2_h1_val == 2048, rs1_h2_val == 65534, rs1_h1_val == 8192, rs1_h3_val == 57343, rs2_h2_val == 65534
// opcode: uksub16 ; op1:x3; op2:x3; dest:x29; op1val:0xdffffffe2000000c;  op2val:0x200fffe0800000b
TEST_PKRR_OP(uksub16, x29, x3, x3, 0x0000000000000000, 0xdffffffe2000000c, 0x200fffe0800000b, x3, x7, 32, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x17, rs2==x17, rd==x17, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 4096, rs2_h2_val == 256
// opcode: uksub16 ; op1:x17; op2:x17; dest:x17; op1val:0x09000500051000;  op2val:0x0c01000005000e
TEST_PKRR_OP(uksub16, x17, x17, x17, 0x0000000000000000, 0x09000500051000, 0x0c01000005000e, x17, x7, 48, x8)

inst_4:
// rs2 == rd != rs1, rs1==x28, rs2==x22, rd==x22, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == 128, rs1_h0_val == 63487, rs2_h1_val == 4, rs1_h1_val == 32768, rs2_h2_val == 65023, rs1_h2_val == 64, rs2_h0_val == 63487
// opcode: uksub16 ; op1:x28; op2:x22; dest:x22; op1val:0x0500408000f7ff;  op2val:0x80fdff0004f7ff
TEST_PKRR_OP(uksub16, x22, x28, x22, 0x0000000000000000, 0x0500408000f7ff, 0x80fdff0004f7ff, x28, x7, 64, x8)

inst_5:
// rs1==x31, rs2==x4, rd==x3, rs2_h3_val == 43690, rs2_h2_val == 2048, rs1_h3_val == 65535, rs1_h2_val == 1, rs2_h0_val == 128
// opcode: uksub16 ; op1:x31; op2:x4; dest:x3; op1val:0xffff000100120007;  op2val:0xaaaa0800000f0080
TEST_PKRR_OP(uksub16, x3, x31, x4, 0x0000000000000000, 0xffff000100120007, 0xaaaa0800000f0080, x31, x7, 80, x8)

inst_6:
// rs1==x10, rs2==x26, rd==x23, rs2_h3_val == 21845, rs2_h1_val == 8192, rs2_h2_val == 512, rs2_h0_val == 64, rs1_h3_val == 256, rs1_h0_val == 128
// opcode: uksub16 ; op1:x10; op2:x26; dest:x23; op1val:0x100000b00120080;  op2val:0x5555020020000040
TEST_PKRR_OP(uksub16, x23, x10, x26, 0x0000000000000000, 0x100000b00120080, 0x5555020020000040, x10, x7, 96, x8)

inst_7:
// rs1==x2, rs2==x9, rd==x15, rs2_h3_val == 32767, rs2_h1_val == 32, rs1_h0_val == 65279
// opcode: uksub16 ; op1:x2; op2:x9; dest:x15; op1val:0xfffeffef0007feff;  op2val:0x7ffff7ff00200005
TEST_PKRR_OP(uksub16, x15, x2, x9, 0x0000000000000000, 0xfffeffef0007feff, 0x7ffff7ff00200005, x2, x7, 112, x8)

inst_8:
// rs1==x21, rs2==x28, rd==x6, rs2_h3_val == 49151, rs2_h2_val == 4, rs1_h2_val == 32768
// opcode: uksub16 ; op1:x21; op2:x28; dest:x6; op1val:0xffff800080000080;  op2val:0xbfff000400200009
TEST_PKRR_OP(uksub16, x6, x21, x28, 0x0000000000000000, 0xffff800080000080, 0xbfff000400200009, x21, x7, 128, x8)

inst_9:
// rs1==x11, rs2==x25, rd==x28, rs2_h3_val == 57343, rs1_h3_val == 43690, rs1_h0_val == 32768
// opcode: uksub16 ; op1:x11; op2:x25; dest:x28; op1val:0xaaaaffef00138000;  op2val:0xdfff01000003f7ff
TEST_PKRR_OP(uksub16, x28, x11, x25, 0x0000000000000000, 0xaaaaffef00138000, 0xdfff01000003f7ff, x11, x7, 144, x8)

inst_10:
// rs1==x30, rs2==x13, rd==x5, rs2_h3_val == 61439, rs2_h1_val == 64511, rs1_h2_val == 2048, rs1_h1_val == 2048
// opcode: uksub16 ; op1:x30; op2:x13; dest:x5; op1val:0xaaaa080008000005;  op2val:0xefff000efbff0009
TEST_PKRR_OP(uksub16, x5, x30, x13, 0x0000000000000000, 0xaaaa080008000005, 0xefff000efbff0009, x30, x7, 160, x8)

inst_11:
// rs1==x20, rs2==x29, rd==x10, rs2_h3_val == 63487, rs2_h2_val == 65471, rs1_h3_val == 8192, rs1_h0_val == 65534
// opcode: uksub16 ; op1:x20; op2:x29; dest:x10; op1val:0x20000013000efffe;  op2val:0xf7ffffbf0004000b
TEST_PKRR_OP(uksub16, x10, x20, x29, 0x0000000000000000, 0x20000013000efffe, 0xf7ffffbf0004000b, x20, x7, 176, x8)

inst_12:
// rs1==x0, rs2==x12, rd==x24, rs2_h3_val == 64511, rs2_h2_val == 8192, rs1_h1_val == 49151, rs1_h0_val == 1, rs2_h0_val == 57343, rs1_h2_val == 2
// opcode: uksub16 ; op1:x0; op2:x12; dest:x24; op1val:0x050002bfff0001;  op2val:0xfbff20008000dfff
TEST_PKRR_OP(uksub16, x24, x0, x12, 0x0000000000000000, 0x050002bfff0001, 0xfbff20008000dfff, x0, x7, 192, x8)

inst_13:
// rs1==x18, rs2==x21, rd==x20, rs2_h3_val == 65023, rs2_h2_val == 16384, rs2_h1_val == 65527
// opcode: uksub16 ; op1:x18; op2:x21; dest:x20; op1val:0xffff000a000d8000;  op2val:0xfdff4000fff7000c
TEST_PKRR_OP(uksub16, x20, x18, x21, 0x0000000000000000, 0xffff000a000d8000, 0xfdff4000fff7000c, x18, x7, 208, x17)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_14:
// rs1==x25, rs2==x27, rd==x7, rs2_h3_val == 65279, rs1_h3_val == 65533, rs2_h1_val == 65503
// opcode: uksub16 ; op1:x25; op2:x27; dest:x7; op1val:0xfffd0006000e8000;  op2val:0xfeff0007ffdf000c
TEST_PKRR_OP(uksub16, x7, x25, x27, 0x0000000000000000, 0xfffd0006000e8000, 0xfeff0007ffdf000c, x25, x3, 0, x17)

inst_15:
// rs1==x9, rs2==x23, rd==x8, rs2_h3_val == 65471, rs2_h0_val == 65527, rs1_h1_val == 63487, rs1_h0_val == 57343, rs2_h1_val == 16, rs2_h2_val == 65533
// opcode: uksub16 ; op1:x9; op2:x23; dest:x8; op1val:0x20000003f7ffdfff;  op2val:0xffbffffd0010fff7
TEST_PKRR_OP(uksub16, x8, x9, x23, 0x0000000000000000, 0x20000003f7ffdfff, 0xffbffffd0010fff7, x9, x3, 16, x17)

inst_16:
// rs1==x6, rs2==x11, rd==x4, rs2_h3_val == 65503, rs1_h3_val == 64511, rs1_h2_val == 512, rs1_h1_val == 21845, rs2_h0_val == 65023
// opcode: uksub16 ; op1:x6; op2:x11; dest:x4; op1val:0xfbff02005555ff7f;  op2val:0xffdf00052000fdff
TEST_PKRR_OP(uksub16, x4, x6, x11, 0x0000000000000000, 0xfbff02005555ff7f, 0xffdf00052000fdff, x6, x3, 32, x17)

inst_17:
// rs1==x7, rs2==x2, rd==x14, rs2_h3_val == 65519, rs1_h2_val == 63487, rs2_h1_val == 4096, rs1_h1_val == 65527, rs2_h0_val == 4, rs2_h2_val == 65531, rs1_h0_val == 256
// opcode: uksub16 ; op1:x7; op2:x2; dest:x14; op1val:0x2000f7fffff70100;  op2val:0xffeffffb10000004
TEST_PKRR_OP(uksub16, x14, x7, x2, 0x0000000000000000, 0x2000f7fffff70100, 0xffeffffb10000004, x7, x3, 48, x17)

inst_18:
// rs1==x19, rs2==x5, rd==x31, rs2_h3_val == 65527, rs2_h0_val == 65503, rs1_h0_val == 8, rs1_h2_val == 32
// opcode: uksub16 ; op1:x19; op2:x5; dest:x31; op1val:0x0d002000050008;  op2val:0xfff7000c8000ffdf
TEST_PKRR_OP(uksub16, x31, x19, x5, 0x0000000000000000, 0x0d002000050008, 0xfff7000c8000ffdf, x19, x3, 64, x17)

inst_19:
// rs1==x5, rs2==x1, rd==x0, rs2_h3_val == 65531, rs2_h2_val == 4096, rs1_h2_val == 61439, rs1_h1_val == 64511, rs1_h3_val == 1024, rs2_h1_val == 43690, rs1_h0_val == 65503
// opcode: uksub16 ; op1:x5; op2:x1; dest:x0; op1val:0x400effffbffffdf;  op2val:0xfffb1000aaaa0007
TEST_PKRR_OP(uksub16, x0, x5, x1, 0x0000000000000000, 0x400effffbffffdf, 0xfffb1000aaaa0007, x5, x3, 80, x17)

inst_20:
// rs1==x23, rs2==x6, rd==x21, rs2_h3_val == 65533, rs2_h0_val == 49151, rs1_h1_val == 2, rs1_h2_val == 4, rs1_h3_val == 65531
// opcode: uksub16 ; op1:x23; op2:x6; dest:x21; op1val:0xfffb000400020009;  op2val:0xfffdfffb000fbfff
TEST_PKRR_OP(uksub16, x21, x23, x6, 0x0000000000000000, 0xfffb000400020009, 0xfffdfffb000fbfff, x23, x3, 96, x17)

inst_21:
// rs1==x27, rs2==x31, rd==x16, rs2_h3_val == 32768, rs1_h2_val == 57343, rs1_h0_val == 32, rs2_h1_val == 128, rs2_h2_val == 1, rs1_h3_val == 2048
// opcode: uksub16 ; op1:x27; op2:x31; dest:x16; op1val:0x800dfff00110020;  op2val:0x8000000100800012
TEST_PKRR_OP(uksub16, x16, x27, x31, 0x0000000000000000, 0x800dfff00110020, 0x8000000100800012, x27, x3, 112, x17)

inst_22:
// rs1==x13, rs2==x10, rd==x11, rs2_h3_val == 16384, rs1_h0_val == 16, rs1_h3_val == 32767, rs2_h0_val == 65407
// opcode: uksub16 ; op1:x13; op2:x10; dest:x11; op1val:0x7fffefff00110010;  op2val:0x40004000000fff7f
TEST_PKRR_OP(uksub16, x11, x13, x10, 0x0000000000000000, 0x7fffefff00110010, 0x40004000000fff7f, x13, x3, 128, x17)

inst_23:
// rs1==x26, rs2==x18, rd==x25, rs2_h3_val == 8192, rs1_h1_val == 1, rs1_h2_val == 65279, rs1_h0_val == 8192, rs2_h1_val == 65023, rs1_h3_val == 21845
// opcode: uksub16 ; op1:x26; op2:x18; dest:x25; op1val:0x5555feff00012000;  op2val:0x20000003fdffffdf
TEST_PKRR_OP(uksub16, x25, x26, x18, 0x0000000000000000, 0x5555feff00012000, 0x20000003fdffffdf, x26, x3, 144, x17)

inst_24:
// rs1==x8, rs2==x0, rd==x12, rs2_h3_val == 4096, rs1_h0_val == 64, rs2_h0_val == 65534, rs2_h1_val == 61439
// opcode: uksub16 ; op1:x8; op2:x0; dest:x12; op1val:0x0b0007000d0040;  op2val:0x10000006effffffe
TEST_PKRR_OP(uksub16, x12, x8, x0, 0x0000000000000000, 0x0b0007000d0040, 0x10000006effffffe, x8, x3, 160, x17)

inst_25:
// rs1==x29, rs2==x15, rd==x13, rs2_h3_val == 2048, rs1_h2_val == 65533
// opcode: uksub16 ; op1:x29; op2:x15; dest:x13; op1val:0x400fffd000c000d;  op2val:0x800fffb00060003
TEST_PKRR_OP(uksub16, x13, x29, x15, 0x0000000000000000, 0x400fffd000c000d, 0x800fffb00060003, x29, x3, 176, x17)

inst_26:
// rs1==x24, rs2==x14, rd==x26, rs2_h3_val == 1024, rs2_h0_val == 32768, rs2_h1_val == 1024, rs1_h1_val == 4096, rs2_h2_val == 65503, rs1_h2_val == 32767
// opcode: uksub16 ; op1:x24; op2:x14; dest:x26; op1val:0x0c7fff10000011;  op2val:0x400ffdf04008000
TEST_PKRR_OP(uksub16, x26, x24, x14, 0x0000000000000000, 0x0c7fff10000011, 0x400ffdf04008000, x24, x3, 192, x17)

inst_27:
// rs1==x12, rs2==x16, rd==x27, rs2_h3_val == 256, rs1_h1_val == 65471, rs2_h1_val == 65535, rs1_h0_val == 65527, rs2_h2_val == 65527, rs1_h3_val == 0
// opcode: uksub16 ; op1:x12; op2:x16; dest:x27; op1val:0x00fffeffbffff7;  op2val:0x100fff7ffffaaaa
TEST_PKRR_OP(uksub16, x27, x12, x16, 0x0000000000000000, 0x00fffeffbffff7, 0x100fff7ffffaaaa, x12, x3, 208, x2)

inst_28:
// rs1==x22, rs2==x8, rd==x19, rs2_h3_val == 64, rs1_h3_val == 65471, rs1_h2_val == 65471, rs1_h0_val == 49151, rs2_h2_val == 16, rs2_h1_val == 0, rs2_h0_val == 61439
// opcode: uksub16 ; op1:x22; op2:x8; dest:x19; op1val:0xffbfffbf0009bfff;  op2val:0x4000100000efff
TEST_PKRR_OP(uksub16, x19, x22, x8, 0x0000000000000000, 0xffbfffbf0009bfff, 0x4000100000efff, x22, x3, 224, x2)

inst_29:
// rs1==x4, rs2==x30, rd==x18, rs2_h3_val == 32, rs2_h1_val == 65279
// opcode: uksub16 ; op1:x4; op2:x30; dest:x18; op1val:0x10000050012000b;  op2val:0x200012feff0040
TEST_PKRR_OP(uksub16, x18, x4, x30, 0x0000000000000000, 0x10000050012000b, 0x200012feff0040, x4, x3, 240, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x15, rs2==x7, rd==x30, rs2_h3_val == 16, rs2_h0_val == 65471, rs1_h3_val == 65279, rs1_h0_val == 61439
// opcode: uksub16 ; op1:x15; op2:x7; dest:x30; op1val:0xfefffeff0002efff;  op2val:0x104000fbffffbf
TEST_PKRR_OP(uksub16, x30, x15, x7, 0x0000000000000000, 0xfefffeff0002efff, 0x104000fbffffbf, x15, x1, 0, x2)

inst_31:
// rs1==x14, rs2==x20, rd==x9, rs2_h3_val == 8, rs1_h1_val == 8
// opcode: uksub16 ; op1:x14; op2:x20; dest:x9; op1val:0x06fffe00080020;  op2val:0x08fdff000efff7
TEST_PKRR_OP(uksub16, x9, x14, x20, 0x0000000000000000, 0x06fffe00080020, 0x08fdff000efff7, x14, x1, 16, x2)

inst_32:
// rs2_h3_val == 4, rs2_h1_val == 32767, rs1_h2_val == 21845, rs2_h0_val == 65535
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff5555000b000e;  op2val:0x04fff77fffffff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xdfff5555000b000e, 0x04fff77fffffff, x30, x1, 32, x2)

inst_33:
// rs2_h3_val == 2, rs1_h1_val == 16
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0af7ff0010000b;  op2val:0x02000e0080aaaa
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x0af7ff0010000b, 0x02000e0080aaaa, x30, x1, 48, x2)

inst_34:
// rs2_h3_val == 1, rs1_h0_val == 2
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x800feffffbf0002;  op2val:0x01000ffff7fdff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x800feffffbf0002, 0x01000ffff7fdff, x30, x1, 64, x2)

inst_35:
// rs2_h3_val == 65535, rs2_h2_val == 64, rs2_h1_val == 16384, rs1_h2_val == 16384, rs1_h3_val == 63487
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff4000000efffe;  op2val:0xffff004040000007
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xf7ff4000000efffe, 0xffff004040000007, x30, x1, 80, x2)

inst_36:
// rs2_h3_val == 0, rs1_h0_val == 65519, rs2_h2_val == 8, rs1_h1_val == 64
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x09000e0040ffef;  op2val:0x000008000d000a
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x09000e0040ffef, 0x000008000d000a, x30, x1, 96, x2)

inst_37:
// rs1_h1_val == 4, rs1_h0_val == 65531
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000400004fffb;  op2val:0xbfff00030080fdff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x10000400004fffb, 0xbfff00030080fdff, x30, x1, 112, x2)

inst_38:
// rs1_h1_val == 65535, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d0007fffffeff;  op2val:0x55550003000c1000
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x0d0007fffffeff, 0x55550003000c1000, x30, x1, 128, x2)

inst_39:
// rs1_h1_val == 0, rs2_h0_val == 16384
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff000f00000000;  op2val:0x06000a40004000
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xdfff000f00000000, 0x06000a40004000, x30, x1, 144, x2)

inst_40:
// rs1_h0_val == 43690, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c00020002aaaa;  op2val:0xffefffbf000afdff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x0c00020002aaaa, 0xffefffbf000afdff, x30, x1, 160, x2)

inst_41:
// rs1_h0_val == 21845, rs2_h1_val == 65519
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe020010005555;  op2val:0x0e000effef8000
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xfffe020010005555, 0x0e000effef8000, x30, x1, 176, x2)

inst_42:
// rs1_h0_val == 32767, rs2_h2_val == 0, rs1_h2_val == 8
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x800000808007fff;  op2val:0xaaaa000000070011
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x800000808007fff, 0xaaaa000000070011, x30, x1, 192, x2)

inst_43:
// rs1_h0_val == 64511, rs2_h2_val == 65519, rs2_h0_val == 65279, rs2_h1_val == 65534
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c00060002fbff;  op2val:0x0cffeffffefeff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x0c00060002fbff, 0x0cffeffffefeff, x30, x1, 208, x2)

inst_44:
// rs1_h0_val == 65023, rs1_h1_val == 65534, rs2_h1_val == 49151
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000040fffefdff;  op2val:0x400000abfff0009
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x8000040fffefdff, 0x400000abfff0009, x30, x1, 224, x2)

inst_45:
// rs1_h0_val == 65471, rs2_h2_val == 65407
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffd0004ffbf;  op2val:0xfdffff7fffff8000
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x5555fffd0004ffbf, 0xfdffff7fffff8000, x30, x1, 240, x2)

inst_46:
// rs1_h0_val == 65533, rs2_h1_val == 65533, rs1_h2_val == 65535, rs2_h0_val == 32767
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff8000fffd;  op2val:0xefff0012fffd7fff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xfffbffff8000fffd, 0xefff0012fffd7fff, x30, x1, 256, x2)

inst_47:
// rs1_h0_val == 16384, rs1_h3_val == 16, rs2_h2_val == 32767
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fffdffbf4000;  op2val:0x0a7ffffeff8000
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x10fffdffbf4000, 0x0a7ffffeff8000, x30, x1, 272, x2)

inst_48:
// rs1_h0_val == 2048, rs1_h1_val == 256, rs1_h3_val == 32768
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000080001000800;  op2val:0x2000000e00130003
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x8000080001000800, 0x2000000e00130003, x30, x1, 288, x2)

inst_49:
// rs1_h0_val == 1024, rs2_h2_val == 43690
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x06001300090400;  op2val:0xbfffaaaafffdffbf
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x06001300090400, 0xbfffaaaafffdffbf, x30, x1, 304, x2)

inst_50:
// rs1_h0_val == 512, rs1_h1_val == 32, rs1_h3_val == 8
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x08f7ff00200200;  op2val:0x5555000b00800007
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x08f7ff00200200, 0x5555000b00800007, x30, x1, 320, x2)

inst_51:
// rs1_h0_val == 4, rs1_h3_val == 512, rs2_h2_val == 21845
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x200080000050004;  op2val:0xfff7555500050040
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x200080000050004, 0xfff7555500050040, x30, x1, 336, x2)

inst_52:
// rs1_h0_val == 65535, rs1_h1_val == 65407, rs2_h2_val == 1024, rs1_h3_val == 61439
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0007ff7fffff;  op2val:0xffbf0400000b0040
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xefff0007ff7fffff, 0xffbf0400000b0040, x30, x1, 352, x2)

inst_53:
// rs2_h2_val == 49151, rs1_h3_val == 65407
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f08000008000f;  op2val:0x4000bfffffff000a
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xff7f08000008000f, 0x4000bfffffff000a, x30, x1, 368, x2)

inst_54:
// rs2_h2_val == 57343, rs1_h1_val == 65531, rs2_h0_val == 256
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x400dffffffb0008;  op2val:0x200dfff08000100
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x400dffffffb0008, 0x200dfff08000100, x30, x1, 384, x2)

inst_55:
// rs2_h2_val == 61439, rs2_h1_val == 256
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0640002000000f;  op2val:0x07efff0100000e
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x0640002000000f, 0x07efff0100000e, x30, x1, 400, x2)

inst_56:
// rs2_h2_val == 64511, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0ffffd00130020;  op2val:0xfffffbff8000f7ff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x0ffffd00130020, 0xfffffbff8000f7ff, x30, x1, 416, x2)

inst_57:
// rs2_h2_val == 65279, rs2_h1_val == 65407
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0a00400040efff;  op2val:0x05feffff7f0003
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x0a00400040efff, 0x05feffff7f0003, x30, x1, 432, x2)

inst_58:
// rs2_h2_val == 128, rs2_h0_val == 1
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d0005000b7fff;  op2val:0x0d0080fffe0001
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x0d0005000b7fff, 0x0d0080fffe0001, x30, x1, 448, x2)

inst_59:
// rs2_h2_val == 32, rs2_h1_val == 512
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0013fffe0001;  op2val:0x0c00200200000d
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xfffb0013fffe0001, 0x0c00200200000d, x30, x1, 464, x2)

inst_60:
// rs2_h2_val == 2, rs2_h0_val == 2, rs1_h2_val == 256
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0901000004efff;  op2val:0x555500027fff0002
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x0901000004efff, 0x555500027fff0002, x30, x1, 480, x2)

inst_61:
// rs2_h0_val == 65519, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x09000a0008fbff;  op2val:0x0d5555fffeffef
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x09000a0008fbff, 0x0d5555fffeffef, x30, x1, 496, x2)

inst_62:
// rs2_h0_val == 65531, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0013fbfffffe;  op2val:0x800000dfffefffb
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xefff0013fbfffffe, 0x800000dfffefffb, x30, x1, 512, x2)

inst_63:
// rs2_h0_val == 65533, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0300021000ffef;  op2val:0xffbffffdffdffffd
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x0300021000ffef, 0xffbffffdffdffffd, x30, x1, 528, x2)

inst_64:
// rs2_h0_val == 8192, rs1_h2_val == 1024, rs2_h1_val == 63487
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0504000006ff7f;  op2val:0xfeff0012f7ff2000
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x0504000006ff7f, 0xfeff0012f7ff2000, x30, x1, 544, x2)

inst_65:
// rs2_h0_val == 2048, rs1_h3_val == 4, rs1_h2_val == 4096
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0410005555fffb;  op2val:0xfdff0020aaaa0800
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x0410005555fffb, 0xfdff0020aaaa0800, x30, x1, 560, x2)

inst_66:
// rs2_h0_val == 1024, rs1_h2_val == 16, rs2_h2_val == 65535
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000100007ffdf;  op2val:0xf7ffffff000a0400
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x80000100007ffdf, 0xf7ffffff000a0400, x30, x1, 576, x2)

inst_67:
// rs2_h0_val == 512, rs1_h1_val == 65023
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfdffffdfffffd;  op2val:0x08feff000b0200
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xffbfdffffdfffffd, 0x08feff000b0200, x30, x1, 592, x2)

inst_68:
// rs2_h0_val == 32, rs2_h1_val == 1
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffeff80000010;  op2val:0x08000c00010020
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xdffffeff80000010, 0x08000c00010020, x30, x1, 608, x2)

inst_69:
// rs2_h0_val == 16, rs1_h3_val == 65527
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffef000f0400;  op2val:0x0b0013000a0010
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xfff7ffef000f0400, 0x0b0013000a0010, x30, x1, 624, x2)

inst_70:
// rs2_h0_val == 8, rs1_h3_val == 1, rs1_h1_val == 57343
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x010040dfff0040;  op2val:0xff7ffeff40000008
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x010040dfff0040, 0xff7ffeff40000008, x30, x1, 640, x2)

inst_71:
// rs2_h0_val == 0, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffbfffd;  op2val:0xffbffeffdfff0000
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x000001fffbfffd, 0xffbffeffdfff0000, x30, x1, 656, x2)

inst_72:
// rs1_h3_val == 49151, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff7fff00030100;  op2val:0x0a00040010ff7f
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xbfff7fff00030100, 0x0a00040010ff7f, x30, x1, 672, x2)

inst_73:
// rs1_h3_val == 65023, rs1_h2_val == 128
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00800001ffbf;  op2val:0x7fffffef000d0004
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xfdff00800001ffbf, 0x7fffffef000d0004, x30, x1, 688, x2)

inst_74:
// rs1_h3_val == 65503, rs1_h1_val == 65533
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0200fffd000d;  op2val:0x0f000abffffffe
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xffdf0200fffd000d, 0x0f000abffffffe, x30, x1, 704, x2)

inst_75:
// rs1_h3_val == 65519, rs1_h2_val == 65503
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffdf00010002;  op2val:0xffbf0003fdff000e
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xffefffdf00010002, 0xffbf0003fdff000e, x30, x1, 720, x2)

inst_76:
// rs1_h3_val == 16384, rs1_h2_val == 65023
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fdff0008fffb;  op2val:0xffbf01000011feff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x4000fdff0008fffb, 0xffbf01000011feff, x30, x1, 736, x2)

inst_77:
// rs1_h2_val == 49151, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x11bfffffbf0007;  op2val:0x4000080009f7ff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x11bfffffbf0007, 0x4000080009f7ff, x30, x1, 752, x2)

inst_78:
// rs1_h2_val == 64511, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fbff00400002;  op2val:0x400aaaa0400ffff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xfff7fbff00400002, 0x400aaaa0400ffff, x30, x1, 768, x2)

inst_79:
// rs1_h2_val == 65407, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x00ff7f000d0012;  op2val:0x03000baaaa0004
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x00ff7f000d0012, 0x03000baaaa0004, x30, x1, 784, x2)

inst_80:
// rs1_h2_val == 65527, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fff7f7ff000c;  op2val:0x04fff7fff70009
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x08fff7f7ff000c, 0x04fff7fff70009, x30, x1, 800, x2)

inst_81:
// rs1_h2_val == 65531, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x13fffb00052000;  op2val:0x4000fbffffffbfff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x13fffb00052000, 0x4000fbffffffbfff, x30, x1, 816, x2)

inst_82:
// rs1_h2_val == 8192, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x8002000ff7f0002;  op2val:0x0dfffe0000fff7
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x8002000ff7f0002, 0x0dfffe0000fff7, x30, x1, 832, x2)

inst_83:
// rs2_h1_val == 21845, rs1_h1_val == 61439
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x050020efff0007;  op2val:0x04000a5555f7ff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x050020efff0007, 0x04000a5555f7ff, x30, x1, 848, x2)

inst_84:
// rs2_h1_val == 65471, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffbf00120400;  op2val:0x10000010ffbffffe
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xffefffbf00120400, 0x10000010ffbffffe, x30, x1, 864, x2)

inst_85:
// rs2_h1_val == 65531, rs1_h1_val == 128
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000800800008;  op2val:0xfffbdffffffbefff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xaaaa000800800008, 0xfffbdffffffbefff, x30, x1, 880, x2)

inst_86:
// rs1_h2_val == 0, rs1_h1_val == 65503
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70000ffdfffff;  op2val:0x2000011fffbefff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xfff70000ffdfffff, 0x2000011fffbefff, x30, x1, 896, x2)

inst_87:
// rs1_h1_val == 43690, rs2_h0_val == 21845
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x041000aaaafffd;  op2val:0x00000420005555
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x041000aaaafffd, 0x00000420005555, x30, x1, 912, x2)

inst_88:
// rs1_h3_val == 2, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffdfffff0000;  op2val:0x0dfff70013fdff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x02ffdfffff0000, 0x0dfff70013fdff, x30, x1, 928, x2)

inst_89:
// rs1_h1_val == 65279, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff5555feff0012;  op2val:0x200000207fff0002
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xbfff5555feff0012, 0x200000207fff0002, x30, x1, 944, x2)

inst_90:
// rs2_h1_val == 64, rs1_h3_val == 4096
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffffeff2000;  op2val:0x13008000405555
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x1000fffffeff2000, 0x13008000405555, x30, x1, 960, x2)

inst_91:
// rs1_h1_val == 65519, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x090020ffeffffe;  op2val:0xbfff0011ffdfffdf
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x090020ffeffffe, 0xbfff0011ffdfffdf, x30, x1, 976, x2)

inst_92:
// rs2_h1_val == 8, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff000fdfffff7f;  op2val:0x0a001200080080
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xffff000fdfffff7f, 0x0a001200080080, x30, x1, 992, x2)

inst_93:
// rs2_h1_val == 2, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c000500070100;  op2val:0xffbf80000002000c
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x0c000500070100, 0xffbf80000002000c, x30, x1, 1008, x2)

inst_94:
// rs1_h3_val == 128, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x808000ff7faaaa;  op2val:0x0d0080effffffd
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x808000ff7faaaa, 0x0d0080effffffd, x30, x1, 1024, x2)

inst_95:
// rs1_h3_val == 64, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x408000f7ff5555;  op2val:0xfdffefff10000000
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x408000f7ff5555, 0xfdffefff10000000, x30, x1, 1040, x2)

inst_96:
// rs1_h1_val == 16384, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff00024000ff7f;  op2val:0x10000100060003
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0xffff00024000ff7f, 0x10000100060003, x30, x1, 1056, x2)

inst_97:
// rs1_h3_val == 32, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x208000ffdf0800;  op2val:0x10001200064000
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x208000ffdf0800, 0x10001200064000, x30, x1, 1072, x2)

inst_98:
// rs1_h1_val == 1024, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x200ffef0400fff7;  op2val:0xf7ffffbf0009ffff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x200ffef0400fff7, 0xf7ffffbf0009ffff, x30, x1, 1088, x2)

inst_99:
// rs1_h1_val == 512, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x04000902000400;  op2val:0x7ffffffddfff4000
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x04000902000400, 0x7ffffffddfff4000, x30, x1, 1104, x2)

inst_100:
// rs2_h0_val == 64511, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555000900400006;  op2val:0xbfffffdf4000fbff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x5555000900400006, 0xbfffffdf4000fbff, x30, x1, 1120, x2)

inst_101:
// rs1_h2_val == 43690, 
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x0aaaaafdff000d;  op2val:0x5555000dfdfff7ff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x0aaaaafdff000d, 0x5555000dfdfff7ff, x30, x1, 1136, x2)

inst_102:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 4096, rs2_h2_val == 256
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x09000500051000;  op2val:0x0c01000005000e
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x09000500051000, 0x0c01000005000e, x30, x1, 1152, x2)

inst_103:
// rs2_h3_val == 64511, rs2_h2_val == 8192, rs1_h1_val == 49151, rs1_h0_val == 1, rs2_h0_val == 57343, rs1_h2_val == 2
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x050002bfff0001;  op2val:0xfbff20008000dfff
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x050002bfff0001, 0xfbff20008000dfff, x30, x1, 1168, x2)

inst_104:
// rs2_h3_val == 65531, rs2_h2_val == 4096, rs1_h2_val == 61439, rs1_h1_val == 64511, rs1_h3_val == 1024, rs2_h1_val == 43690, rs1_h0_val == 65503
// opcode: uksub16 ; op1:x30; op2:x29; dest:x31; op1val:0x400effffbffffdf;  op2val:0xfffb1000aaaa0007
TEST_PKRR_OP(uksub16, x31, x30, x29, 0x0000000000000000, 0x400effffbffffdf, 0xfffb1000aaaa0007, x30, x1, 1184, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 150*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
