
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smmwt.u instruction of the RISC-V RV64PZicsr extension for the smmwt.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smmwt.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x14,signature_x14_1)

inst_0:
// rs1 == rd != rs2, rs1==x0, rs2==x26, rd==x0, rs1_w0_val == -2147483648, rs2_h2_val == -1, rs2_h1_val == 0
// opcode: smmwt.u ; op1:x0; op2:x26; dest:x0; op1val:0x00000680000000;  op2val:0x07ffff0000fffc
TEST_RR_OP(smmwt.u, x0, x0, x26, 0x0000000000000000, 0x00000680000000, 0x07ffff0000fffc, x14, 0, x19)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x9, rs2==x21, rd==x12, rs2_h3_val == -21846, rs1_w1_val == -4194305, rs1_w0_val == 128, rs2_h0_val == 21845, rs2_h2_val == -129
// opcode: smmwt.u ; op1:x9; op2:x21; dest:x12; op1val:0xffbfffff00000080;  op2val:0xaaaaff7fc0005555
TEST_RR_OP(smmwt.u, x12, x9, x21, 0x0000000000000000, 0xffbfffff00000080, 0xaaaaff7fc0005555, x14, 8, x19)

inst_2:
// rs1 == rs2 != rd, rs1==x24, rs2==x24, rd==x6, rs2_h3_val == 21845, rs1_w0_val == 2097152, rs2_h2_val == 2, rs2_h1_val == 32767, rs1_w1_val == 1073741824, rs2_h0_val == -513
// opcode: smmwt.u ; op1:x24; op2:x24; dest:x6; op1val:0x4000000000200000;  op2val:0x555500027ffffdff
TEST_RR_OP(smmwt.u, x6, x24, x24, 0x0000000000000000, 0x4000000000200000, 0x555500027ffffdff, x14, 16, x19)

inst_3:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, rs2_h3_val == 32767, rs1_w1_val == 33554432, rs2_h0_val == -3, rs1_w0_val == -2, rs2_h1_val == 2048
// opcode: smmwt.u ; op1:x28; op2:x28; dest:x28; op1val:0x2000000fffffffe;  op2val:0x7ffffff90800fffd
TEST_RR_OP(smmwt.u, x28, x28, x28, 0x0000000000000000, 0x2000000fffffffe, 0x7ffffff90800fffd, x14, 24, x19)

inst_4:
// rs2 == rd != rs1, rs1==x7, rs2==x30, rd==x30, rs2_h3_val == -16385, rs1_w1_val == -2049, rs2_h2_val == -2049, rs1_w0_val == -2049, rs2_h0_val == -9, rs2_h1_val == 4096
// opcode: smmwt.u ; op1:x7; op2:x30; dest:x30; op1val:0xfffff7fffffff7ff;  op2val:0xbffff7ff1000fff7
TEST_RR_OP(smmwt.u, x30, x7, x30, 0x0000000000000000, 0xfffff7fffffff7ff, 0xbffff7ff1000fff7, x14, 32, x19)

inst_5:
// rs1==x10, rs2==x6, rd==x1, rs2_h3_val == -8193, rs1_w1_val == 16384, rs2_h1_val == -16385, rs2_h0_val == 1, rs1_w0_val == -1431655766, rs2_h2_val == -32768
// opcode: smmwt.u ; op1:x10; op2:x6; dest:x1; op1val:0x004000aaaaaaaa;  op2val:0xdfff8000bfff0001
TEST_RR_OP(smmwt.u, x1, x10, x6, 0x0000000000000000, 0x004000aaaaaaaa, 0xdfff8000bfff0001, x14, 40, x19)

inst_6:
// rs1==x29, rs2==x15, rd==x18, rs2_h3_val == -4097, rs1_w0_val == -1073741825, rs1_w1_val == 128
// opcode: smmwt.u ; op1:x29; op2:x15; dest:x18; op1val:0x000080bfffffff;  op2val:0xeffffff610003fff
TEST_RR_OP(smmwt.u, x18, x29, x15, 0x0000000000000000, 0x000080bfffffff, 0xeffffff610003fff, x14, 48, x19)

inst_7:
// rs1==x4, rs2==x9, rd==x16, rs2_h3_val == -2049, rs1_w1_val == -513, rs1_w0_val == -536870913, rs2_h2_val == 1024, rs2_h0_val == 512
// opcode: smmwt.u ; op1:x4; op2:x9; dest:x16; op1val:0xfffffdffdfffffff;  op2val:0xf7ff040000090200
TEST_RR_OP(smmwt.u, x16, x4, x9, 0x0000000000000000, 0xfffffdffdfffffff, 0xf7ff040000090200, x14, 56, x19)

inst_8:
// rs1==x15, rs2==x3, rd==x25, rs2_h3_val == -1025, rs1_w1_val == 67108864, rs2_h1_val == -129, rs1_w0_val == -3
// opcode: smmwt.u ; op1:x15; op2:x3; dest:x25; op1val:0x4000000fffffffd;  op2val:0xfbfffff9ff7f0003
TEST_RR_OP(smmwt.u, x25, x15, x3, 0x0000000000000000, 0x4000000fffffffd, 0xfbfffff9ff7f0003, x14, 64, x19)

inst_9:
// rs1==x30, rs2==x5, rd==x21, rs2_h3_val == -513, rs2_h1_val == 512, rs1_w1_val == 8192, rs2_h0_val == -16385, rs1_w0_val == 1431655765, rs2_h2_val == -2
// opcode: smmwt.u ; op1:x30; op2:x5; dest:x21; op1val:0x00200055555555;  op2val:0xfdfffffe0200bfff
TEST_RR_OP(smmwt.u, x21, x30, x5, 0x0000000000000000, 0x00200055555555, 0xfdfffffe0200bfff, x14, 72, x19)

inst_10:
// rs1==x27, rs2==x22, rd==x26, rs2_h3_val == -257, rs2_h1_val == 8
// opcode: smmwt.u ; op1:x27; op2:x22; dest:x26; op1val:0xfffffdff80000000;  op2val:0xfefffff600083fff
TEST_RR_OP(smmwt.u, x26, x27, x22, 0x0000000000000000, 0xfffffdff80000000, 0xfefffff600083fff, x14, 80, x19)

inst_11:
// rs1==x22, rs2==x7, rd==x27, rs2_h3_val == -129, rs2_h2_val == 8192, rs1_w1_val == -1, rs1_w0_val == 1048576
// opcode: smmwt.u ; op1:x22; op2:x7; dest:x27; op1val:0xffffffff00100000;  op2val:0xff7f20003fff0200
TEST_RR_OP(smmwt.u, x27, x22, x7, 0x0000000000000000, 0xffffffff00100000, 0xff7f20003fff0200, x14, 88, x19)

inst_12:
// rs1==x8, rs2==x11, rd==x13, rs2_h3_val == -65, rs1_w0_val == 536870912, rs1_w1_val == 16777216
// opcode: smmwt.u ; op1:x8; op2:x11; dest:x13; op1val:0x100000020000000;  op2val:0xffbfff7f0800fff8
TEST_RR_OP(smmwt.u, x13, x8, x11, 0x0000000000000000, 0x100000020000000, 0xffbfff7f0800fff8, x14, 96, x19)

inst_13:
// rs1==x18, rs2==x27, rd==x3, rs2_h3_val == -33, rs2_h2_val == -8193, rs2_h0_val == -17, rs2_h1_val == 128, rs1_w1_val == -33
// opcode: smmwt.u ; op1:x18; op2:x27; dest:x3; op1val:0xffffffdfc0000000;  op2val:0xffdfdfff0080ffef
TEST_RR_OP(smmwt.u, x3, x18, x27, 0x0000000000000000, 0xffffffdfc0000000, 0xffdfdfff0080ffef, x14, 104, x19)

inst_14:
// rs1==x17, rs2==x2, rd==x15, rs2_h3_val == -17, rs1_w1_val == -5, rs2_h2_val == 2048, rs2_h0_val == 1024, rs1_w0_val == -131073
// opcode: smmwt.u ; op1:x17; op2:x2; dest:x15; op1val:0xfffffffbfffdffff;  op2val:0xffef0800fff80400
TEST_RR_OP(smmwt.u, x15, x17, x2, 0x0000000000000000, 0xfffffffbfffdffff, 0xffef0800fff80400, x14, 112, x19)

inst_15:
// rs1==x23, rs2==x20, rd==x29, rs2_h3_val == -9, rs2_h1_val == 4, rs2_h2_val == -4097, rs1_w1_val == -1073741825, rs2_h0_val == -21846
// opcode: smmwt.u ; op1:x23; op2:x20; dest:x29; op1val:0xbffffffffffdffff;  op2val:0xfff7efff0004aaaa
TEST_RR_OP(smmwt.u, x29, x23, x20, 0x0000000000000000, 0xbffffffffffdffff, 0xfff7efff0004aaaa, x14, 120, x7)
RVTEST_SIGBASE(x15,signature_x15_0)

inst_16:
// rs1==x11, rs2==x31, rd==x4, rs2_h3_val == -5, rs1_w0_val == 16384, rs2_h0_val == 0
// opcode: smmwt.u ; op1:x11; op2:x31; dest:x4; op1val:0x3fffffff00004000;  op2val:0xfffbfff910000000
TEST_RR_OP(smmwt.u, x4, x11, x31, 0x0000000000000000, 0x3fffffff00004000, 0xfffbfff910000000, x15, 0, x7)

inst_17:
// rs1==x21, rs2==x10, rd==x17, rs2_h3_val == -3, rs1_w1_val == -32769, rs2_h2_val == 32767
// opcode: smmwt.u ; op1:x21; op2:x10; dest:x17; op1val:0xffff7fff00004000;  op2val:0xfffd7fff0006fff7
TEST_RR_OP(smmwt.u, x17, x21, x10, 0x0000000000000000, 0xffff7fff00004000, 0xfffd7fff0006fff7, x15, 8, x7)

inst_18:
// rs1==x13, rs2==x8, rd==x23, rs2_h3_val == -2, rs1_w0_val == 65536
// opcode: smmwt.u ; op1:x13; op2:x8; dest:x23; op1val:0x00000600010000;  op2val:0xfffe0800fff90400
TEST_RR_OP(smmwt.u, x23, x13, x8, 0x0000000000000000, 0x00000600010000, 0xfffe0800fff90400, x15, 16, x7)

inst_19:
// rs1==x5, rs2==x19, rd==x8, rs2_h3_val == -32768, rs1_w0_val == 4194304
// opcode: smmwt.u ; op1:x5; op2:x19; dest:x8; op1val:0xc000000000400000;  op2val:0x800000053fff5555
TEST_RR_OP(smmwt.u, x8, x5, x19, 0x0000000000000000, 0xc000000000400000, 0x800000053fff5555, x15, 24, x7)

inst_20:
// rs1==x6, rs2==x25, rd==x11, rs2_h3_val == 16384, rs2_h1_val == 2, rs1_w1_val == 65536
// opcode: smmwt.u ; op1:x6; op2:x25; dest:x11; op1val:0x010000fffffffc;  op2val:0x4000f7ff00020000
TEST_RR_OP(smmwt.u, x11, x6, x25, 0x0000000000000000, 0x010000fffffffc, 0x4000f7ff00020000, x15, 32, x7)

inst_21:
// rs1==x12, rs2==x23, rd==x10, rs2_h3_val == 8192, rs1_w1_val == -1431655766, rs1_w0_val == 4096, rs2_h0_val == 32767
// opcode: smmwt.u ; op1:x12; op2:x23; dest:x10; op1val:0xaaaaaaaa00001000;  op2val:0x2000fff802007fff
TEST_RR_OP(smmwt.u, x10, x12, x23, 0x0000000000000000, 0xaaaaaaaa00001000, 0x2000fff802007fff, x15, 40, x7)

inst_22:
// rs1==x2, rs2==x29, rd==x14, rs2_h3_val == 4096, rs2_h1_val == -513, rs1_w1_val == -8193
// opcode: smmwt.u ; op1:x2; op2:x29; dest:x14; op1val:0xffffdfff00000003;  op2val:0x10000800fdfffff9
TEST_RR_OP(smmwt.u, x14, x2, x29, 0x0000000000000000, 0xffffdfff00000003, 0x10000800fdfffff9, x15, 48, x7)

inst_23:
// rs1==x1, rs2==x16, rd==x5, rs2_h3_val == 2048, rs1_w0_val == -4097, rs2_h0_val == 8, rs1_w1_val == -8388609
// opcode: smmwt.u ; op1:x1; op2:x16; dest:x5; op1val:0xff7fffffffffefff;  op2val:0x800800000090008
TEST_RR_OP(smmwt.u, x5, x1, x16, 0x0000000000000000, 0xff7fffffffffefff, 0x800800000090008, x15, 56, x7)

inst_24:
// rs1==x31, rs2==x13, rd==x22, rs2_h3_val == 1024, rs1_w0_val == 32
// opcode: smmwt.u ; op1:x31; op2:x13; dest:x22; op1val:0xffffdfff00000020;  op2val:0x400fff8fff80009
TEST_RR_OP(smmwt.u, x22, x31, x13, 0x0000000000000000, 0xffffdfff00000020, 0x400fff8fff80009, x15, 64, x7)

inst_25:
// rs1==x14, rs2==x4, rd==x31, rs2_h3_val == 512, rs1_w1_val == 1, rs2_h1_val == -2
// opcode: smmwt.u ; op1:x14; op2:x4; dest:x31; op1val:0x00000100000009;  op2val:0x200fff9fffe0003
TEST_RR_OP(smmwt.u, x31, x14, x4, 0x0000000000000000, 0x00000100000009, 0x200fff9fffe0003, x15, 72, x7)

inst_26:
// rs1==x16, rs2==x17, rd==x9, rs2_h3_val == 256, rs2_h0_val == 64, rs2_h1_val == -65, rs1_w0_val == 1, rs1_w1_val == -134217729
// opcode: smmwt.u ; op1:x16; op2:x17; dest:x9; op1val:0xf7ffffff00000001;  op2val:0x1002000ffbf0040
TEST_RR_OP(smmwt.u, x9, x16, x17, 0x0000000000000000, 0xf7ffffff00000001, 0x1002000ffbf0040, x15, 80, x7)

inst_27:
// rs1==x3, rs2==x18, rd==x24, rs2_h3_val == 128, rs2_h1_val == -4097, rs1_w1_val == 2048
// opcode: smmwt.u ; op1:x3; op2:x18; dest:x24; op1val:0x00080080000000;  op2val:0x80ff7fefff0006
TEST_RR_OP(smmwt.u, x24, x3, x18, 0x0000000000000000, 0x00080080000000, 0x80ff7fefff0006, x15, 88, x7)

inst_28:
// rs1==x20, rs2==x12, rd==x2, rs2_h3_val == 64, rs1_w0_val == 134217728, rs2_h1_val == -17
// opcode: smmwt.u ; op1:x20; op2:x12; dest:x2; op1val:0xff7fffff08000000;  op2val:0x400007ffef5555
TEST_RR_OP(smmwt.u, x2, x20, x12, 0x0000000000000000, 0xff7fffff08000000, 0x400007ffef5555, x15, 96, x7)

inst_29:
// rs1==x26, rs2==x0, rd==x19, rs2_h3_val == 32, rs2_h1_val == -3, rs1_w1_val == 0, rs1_w0_val == -8193, rs2_h0_val == -129
// opcode: smmwt.u ; op1:x26; op2:x0; dest:x19; op1val:0x000000ffffdfff;  op2val:0x20effffffdff7f
TEST_RR_OP(smmwt.u, x19, x26, x0, 0x0000000000000000, 0x000000ffffdfff, 0x20effffffdff7f, x15, 104, x7)

inst_30:
// rs1==x25, rs2==x14, rd==x7, rs2_h3_val == 16, rs1_w1_val == -262145, rs1_w0_val == 1073741824
// opcode: smmwt.u ; op1:x25; op2:x14; dest:x7; op1val:0xfffbffff40000000;  op2val:0x100003fff6aaaa
TEST_RR_OP(smmwt.u, x7, x25, x14, 0x0000000000000000, 0xfffbffff40000000, 0x100003fff6aaaa, x15, 112, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_31:
// rs1==x19, rs2==x1, rd==x20, rs2_h3_val == 8, rs2_h0_val == -4097, rs1_w0_val == -16777217
// opcode: smmwt.u ; op1:x19; op2:x1; dest:x20; op1val:0xfffffffbfeffffff;  op2val:0x08fff60004efff
TEST_RR_OP(smmwt.u, x20, x19, x1, 0x0000000000000000, 0xfffffffbfeffffff, 0x08fff60004efff, x2, 0, x3)

inst_32:
// rs2_h3_val == 4, rs1_w1_val == -65537, rs2_h2_val == 256
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffdfff;  op2val:0x0401007ffffffd
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffdfff, 0x0401007ffffffd, x2, 8, x3)

inst_33:
// rs2_h3_val == 2, rs1_w1_val == 512
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000020;  op2val:0x022000ffeffffd
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x00020000000020, 0x022000ffeffffd, x2, 16, x3)

inst_34:
// rs2_h3_val == 1, rs1_w1_val == 262144, rs2_h0_val == -33, rs1_w0_val == 4, rs2_h2_val == -257
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000004;  op2val:0x01feff0004ffdf
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x04000000000004, 0x01feff0004ffdf, x2, 24, x3)

inst_35:
// rs2_h3_val == 0, rs1_w1_val == -129, rs2_h1_val == -8193
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000005;  op2val:0x000009dfffff7f
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000005, 0x000009dfffff7f, x2, 32, x3)

inst_36:
// rs2_h3_val == -1, rs2_h0_val == 32, rs2_h2_val == -9, rs1_w1_val == 32768, rs1_w0_val == -257
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffffeff;  op2val:0xfffffff7c0000020
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x008000fffffeff, 0xfffffff7c0000020, x2, 40, x3)

inst_37:
// rs2_h2_val == -21846, rs2_h1_val == 21845, rs1_w0_val == -9, rs1_w1_val == 16
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x000010fffffff7;  op2val:0x05aaaa55550003
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x000010fffffff7, 0x05aaaa55550003, x2, 48, x3)

inst_38:
// rs2_h2_val == 21845, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000006;  op2val:0xf7ff5555fffdfff7
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xc000000000000006, 0xf7ff5555fffdfff7, x2, 56, x3)

inst_39:
// rs2_h2_val == -16385, rs1_w0_val == 64
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000040;  op2val:0x02bfff00000005
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000040, 0x02bfff00000005, x2, 64, x3)

inst_40:
// rs2_h2_val == -1025, rs1_w0_val == 1024, rs1_w1_val == 1048576
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000400;  op2val:0xffeffbfffffe0006
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x10000000000400, 0xffeffbfffffe0006, x2, 72, x3)

inst_41:
// rs2_h2_val == -513, rs2_h1_val == -33
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000007;  op2val:0x04fdffffdf0000
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x04000000000007, 0x04fdffffdf0000, x2, 80, x3)

inst_42:
// rs1_w0_val == 524288, rs2_h0_val == 8192, rs2_h1_val == 32
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x10000000080000;  op2val:0x06ff7f00202000
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x10000000080000, 0x06ff7f00202000, x2, 88, x3)

inst_43:
// rs1_w0_val == 262144, rs2_h2_val == 8, rs1_w1_val == -65
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00040000;  op2val:0x800008fff90005
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xffffffbf00040000, 0x800008fff90005, x2, 96, x3)

inst_44:
// rs1_w0_val == 131072, rs1_w1_val == 32, rs2_h1_val == -9
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00002000020000;  op2val:0x00fffafff75555
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x00002000020000, 0x00fffafff75555, x2, 104, x3)

inst_45:
// rs1_w0_val == 32768, rs1_w1_val == 4096
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00100000008000;  op2val:0x100fff600073fff
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x00100000008000, 0x100fff600073fff, x2, 112, x3)

inst_46:
// rs1_w0_val == 8192, rs2_h2_val == 4
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00001000002000;  op2val:0x10000041000ff7f
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x00001000002000, 0x10000041000ff7f, x2, 120, x3)

inst_47:
// rs1_w0_val == 2048, rs1_w1_val == -9, rs2_h2_val == -5, rs2_h0_val == 128
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000800;  op2val:0x20fffb00020080
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfffffff700000800, 0x20fffb00020080, x2, 128, x3)

inst_48:
// rs1_w0_val == 512, rs2_h0_val == 2
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000200;  op2val:0xc000fff8c0000002
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x00100000000200, 0xc000fff8c0000002, x2, 136, x3)

inst_49:
// rs1_w0_val == 256, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000300000100;  op2val:0xffff200000022000
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x00000300000100, 0xffff200000022000, x2, 144, x3)

inst_50:
// rs1_w0_val == 16, rs1_w1_val == 8
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000010;  op2val:0x8000004fffafffd
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x00000800000010, 0x8000004fffafffd, x2, 152, x3)

inst_51:
// rs1_w0_val == 8, rs2_h2_val == 16384, rs1_w1_val == -257
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000008;  op2val:0x40004000fff8ff7f
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000008, 0x40004000fff8ff7f, x2, 160, x3)

inst_52:
// rs1_w0_val == 2, rs2_h0_val == 16384, rs1_w1_val == -2
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000002;  op2val:0x00fff6fff94000
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000002, 0x00fff6fff94000, x2, 168, x3)

inst_53:
// rs1_w0_val == 0, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000000;  op2val:0xdfffdfff0007fffa
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x01000000000000, 0xdfffdfff0007fffa, x2, 176, x3)

inst_54:
// rs1_w0_val == -1, rs2_h1_val == -32768, rs1_w1_val == 8388608
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffffffff;  op2val:0xfffcfbff80002000
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x800000ffffffff, 0xfffcfbff80002000, x2, 184, x3)

inst_55:
// rs2_h2_val == -65, rs2_h1_val == -21846
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000000;  op2val:0x06ffbfaaaa0001
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000000, 0x06ffbfaaaa0001, x2, 192, x3)

inst_56:
// rs2_h2_val == -33, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00020000;  op2val:0x200ffdffff9fffc
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xffbfffff00020000, 0x200ffdffff9fffc, x2, 200, x3)

inst_57:
// rs2_h2_val == -17, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x000020c0000000;  op2val:0x05ffef1000fff9
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x000020c0000000, 0x05ffef1000fff9, x2, 208, x3)

inst_58:
// rs2_h2_val == -3, rs2_h1_val == 8192
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00400000000006;  op2val:0xfff8fffd20000080
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x00400000000006, 0xfff8fffd20000080, x2, 216, x3)

inst_59:
// rs2_h2_val == 4096, rs2_h0_val == 16, rs2_h1_val == -2049
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000002;  op2val:0xaaaa1000f7ff0010
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x00080000000002, 0xaaaa1000f7ff0010, x2, 224, x3)

inst_60:
// rs2_h2_val == 512, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00020000;  op2val:0xfff9020000000400
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xff7fffff00020000, 0xfff9020000000400, x2, 232, x3)

inst_61:
// rs2_h2_val == 128, rs1_w0_val == -33554433, rs2_h0_val == -2
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fdffffff;  op2val:0xbfff0080fffefffe
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfffffff6fdffffff, 0xbfff0080fffefffe, x2, 240, x3)

inst_62:
// rs2_h2_val == 64, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffffefff;  op2val:0xffff00408000fff6
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x008000ffffefff, 0xffff00408000fff6, x2, 248, x3)

inst_63:
// rs2_h2_val == 32, rs2_h1_val == 1024
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00080000004000;  op2val:0x40000200400aaaa
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x00080000004000, 0x40000200400aaaa, x2, 256, x3)

inst_64:
// rs2_h2_val == 16, rs2_h0_val == -1025
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf55555555;  op2val:0xdfff00100200fbff
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xffffffbf55555555, 0xdfff00100200fbff, x2, 264, x3)

inst_65:
// rs2_h2_val == 1, rs1_w0_val == 16777216, rs1_w1_val == 134217728
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x800000001000000;  op2val:0x10000001bfff0200
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x800000001000000, 0x10000001bfff0200, x2, 272, x3)

inst_66:
// rs2_h2_val == 0, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x01000000400000;  op2val:0x08000000040001
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x01000000400000, 0x08000000040001, x2, 280, x3)

inst_67:
// rs2_h1_val == -1025, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffffffc;  op2val:0xfffcc000fbff0080
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x000001fffffffc, 0xfffcc000fbff0080, x2, 288, x3)

inst_68:
// rs2_h1_val == -257, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffdfff;  op2val:0xffdffbfffefffbff
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffdfff, 0xffdffbfffefffbff, x2, 296, x3)

inst_69:
// rs2_h1_val == -5, rs2_h0_val == 4
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900001000;  op2val:0x20004000fffb0004
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfffffff900001000, 0x20004000fffb0004, x2, 304, x3)

inst_70:
// rs2_h1_val == 16384, rs1_w0_val == -129
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6ffffff7f;  op2val:0xfffcfffd40005555
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfffffff6ffffff7f, 0xfffcfffd40005555, x2, 312, x3)

inst_71:
// rs2_h1_val == 256, rs1_w0_val == -17
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000000ffffffef;  op2val:0xfffbffef01000006
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x4000000ffffffef, 0xfffbffef01000006, x2, 320, x3)

inst_72:
// rs2_h1_val == 64, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000002;  op2val:0xfff7fff800400002
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x00000700000002, 0xfff7fff800400002, x2, 328, x3)

inst_73:
// rs2_h0_val == 4096, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffffff9;  op2val:0xc000000500061000
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x040000fffffff9, 0xc000000500061000, x2, 336, x3)

inst_74:
// rs2_h0_val == 2048, rs1_w1_val == -17
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffffffd;  op2val:0xdfff0001bfff0800
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xffffffeffffffffd, 0xdfff0001bfff0800, x2, 344, x3)

inst_75:
// rs2_h0_val == 256, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafffffffa;  op2val:0xdffffff900070100
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfffffffafffffffa, 0xdffffff900070100, x2, 352, x3)

inst_76:
// rs2_h0_val == -1, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffdffff;  op2val:0x20fffcfff8ffff
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x000020fffdffff, 0x20fffcfff8ffff, x2, 360, x3)

inst_77:
// rs1_w1_val == 1431655765, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500008000;  op2val:0x200fffefffcfff6
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x5555555500008000, 0x200fffefffcfff6, x2, 368, x3)

inst_78:
// rs1_w1_val == 2147483647, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffff7ff;  op2val:0x40ffbf20000040
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffff7ff, 0x40ffbf20000040, x2, 376, x3)

inst_79:
// rs1_w1_val == -536870913, rs1_w0_val == -32769
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffff7fff;  op2val:0x05fffcffeffffe
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xdfffffffffff7fff, 0x05fffcffeffffe, x2, 384, x3)

inst_80:
// rs1_w1_val == -268435457, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000020;  op2val:0xff7f000555550800
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xefffffff00000020, 0xff7f000555550800, x2, 392, x3)

inst_81:
// rs1_w1_val == -67108865, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00400000;  op2val:0x4000ffef00020004
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfbffffff00400000, 0x4000ffef00020004, x2, 400, x3)

inst_82:
// rs1_w1_val == -33554433, rs1_w0_val == -5
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffffffb;  op2val:0x09fff80000aaaa
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffffffb, 0x09fff80000aaaa, x2, 408, x3)

inst_83:
// rs1_w1_val == -16777217, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffffff7f;  op2val:0xff7ffffafff80020
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfeffffffffffff7f, 0xff7ffffafff80020, x2, 416, x3)

inst_84:
// rs1_w1_val == -2097153, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00400000;  op2val:0xbfff7fffefffffef
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xffdfffff00400000, 0xbfff7fffefffffef, x2, 424, x3)

inst_85:
// rs1_w1_val == -1048577, rs1_w0_val == -67108865
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffbffffff;  op2val:0xc00000027ffffff7
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xffeffffffbffffff, 0xc00000027ffffff7, x2, 432, x3)

inst_86:
// rs1_w1_val == -524289, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffffffb;  op2val:0x800fff6ffeffff6
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffffffb, 0x800fff6ffeffff6, x2, 440, x3)

inst_87:
// rs1_w1_val == -131073, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff01000000;  op2val:0xf7fffeff00000009
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfffdffff01000000, 0xf7fffeff00000009, x2, 448, x3)

inst_88:
// rs1_w1_val == -16385, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff3fffffff;  op2val:0xfffc20000100fff6
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xffffbfff3fffffff, 0xfffc20000100fff6, x2, 456, x3)

inst_89:
// rs1_w1_val == -4097, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffeffffff;  op2val:0xdfff000800030004
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xffffeffffeffffff, 0xdfff000800030004, x2, 464, x3)

inst_90:
// rs1_w1_val == -1025, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffff7fff;  op2val:0x08c0000100fbff
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfffffbffffff7fff, 0x08c0000100fbff, x2, 472, x3)

inst_91:
// rs1_w1_val == -3, rs1_w0_val == 67108864
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd04000000;  op2val:0x4004000fffcfbff
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfffffffd04000000, 0x4004000fffcfbff, x2, 480, x3)

inst_92:
// rs1_w1_val == -2147483648, rs2_h1_val == -1, rs1_w0_val == -8388609
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ff7fffff;  op2val:0x2000fdfffffffbff
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x80000000ff7fffff, 0x2000fdfffffffbff, x2, 488, x3)

inst_93:
// rs1_w1_val == 536870912, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000020000;  op2val:0x20fffdaaaa1000
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x2000000000020000, 0x20fffdaaaa1000, x2, 496, x3)

inst_94:
// rs1_w1_val == 268435456, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffff7;  op2val:0x091000fffd0004
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x10000000fffffff7, 0x091000fffd0004, x2, 504, x3)

inst_95:
// rs1_w1_val == 4194304, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffffd;  op2val:0xfff80001ffdffff9
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x400000fffffffd, 0xfff80001ffdffff9, x2, 512, x3)

inst_96:
// rs1_w1_val == 2097152, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000006;  op2val:0xffdf0800fffcffef
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x20000000000006, 0xffdf0800fffcffef, x2, 520, x3)

inst_97:
// rs1_w1_val == 524288, rs2_h0_val == -32768
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffdffff;  op2val:0x20efff00058000
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x080000fffdffff, 0x20efff00058000, x2, 528, x3)

inst_98:
// rs1_w1_val == 131072, rs2_h1_val == 1
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x02000000020000;  op2val:0x01ffdf00010040
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x02000000020000, 0x01ffdf00010040, x2, 536, x3)

inst_99:
// rs1_w1_val == 1024, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000002;  op2val:0x2000ffdf00080006
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x00040000000002, 0x2000ffdf00080006, x2, 544, x3)

inst_100:
// rs1_w1_val == 256, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00010000002000;  op2val:0x200400fffbffff
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x00010000002000, 0x200400fffbffff, x2, 552, x3)

inst_101:
// rs1_w1_val == 64, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x000040fffffff6;  op2val:0xffdfdfff01000080
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x000040fffffff6, 0xffdfdfff01000080, x2, 560, x3)

inst_102:
// rs1_w1_val == 4, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000400;  op2val:0xffbf000500200003
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x00000400000400, 0xffbf000500200003, x2, 568, x3)

inst_103:
// rs1_w1_val == 2, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000200040000;  op2val:0x01fff6fffefff9
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x00000200040000, 0x01fff6fffefff9, x2, 576, x3)

inst_104:
// rs1_w0_val == 2147483647, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff7fffffff;  op2val:0x3fff00200020ffff
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xffff7fff7fffffff, 0x3fff00200020ffff, x2, 584, x3)

inst_105:
// rs1_w0_val == -268435457, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffefffffff;  op2val:0x08fff8ff7ffff8
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xdfffffffefffffff, 0x08fff8ff7ffff8, x2, 592, x3)

inst_106:
// rs1_w0_val == -134217729, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffff7ffffff;  op2val:0xfffffefffffaff7f
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xffffeffff7ffffff, 0xfffffefffffaff7f, x2, 600, x3)

inst_107:
// rs1_w0_val == -4194305, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffbfffff;  op2val:0x800ffbf80000001
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x008000ffbfffff, 0x800ffbf80000001, x2, 608, x3)

inst_108:
// rs1_w0_val == -2097153, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x020000ffdfffff;  op2val:0x093fff00018000
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x020000ffdfffff, 0x093fff00018000, x2, 616, x3)

inst_109:
// rs1_w0_val == -1048577, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9ffefffff;  op2val:0xfdff000800070100
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfffffff9ffefffff, 0xfdff000800070100, x2, 624, x3)

inst_110:
// rs1_w0_val == -524289, rs2_h0_val == -257
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x000100fff7ffff;  op2val:0xf7fffffb0000feff
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x000100fff7ffff, 0xf7fffffb0000feff, x2, 632, x3)

inst_111:
// rs1_w0_val == -262145, rs2_h0_val == -2049
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffffbffff;  op2val:0xfffb0009fffcf7ff
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfffffdfffffbffff, 0xfffb0009fffcf7ff, x2, 640, x3)

inst_112:
// rs2_h1_val == 16, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fdffffff;  op2val:0xfffff7ff0010aaaa
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x55555555fdffffff, 0xfffff7ff0010aaaa, x2, 648, x3)

inst_113:
// rs1_w0_val == -65537, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffeffff;  op2val:0xaaaa80000005fbff
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x20000000fffeffff, 0xaaaa80000005fbff, x2, 656, x3)

inst_114:
// rs1_w0_val == -16385, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x000080ffffbfff;  op2val:0x100004f7ff0003
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x000080ffffbfff, 0x100004f7ff0003, x2, 664, x3)

inst_115:
// rs1_w0_val == -1025, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffffbff;  op2val:0xbfff080000055555
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffffbff, 0xbfff080000055555, x2, 672, x3)

inst_116:
// rs1_w0_val == -513, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fffffdff;  op2val:0xfff9effffff8fffe
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfffffff6fffffdff, 0xfff9effffff8fffe, x2, 680, x3)

inst_117:
// rs1_w0_val == -65, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x000009ffffffbf;  op2val:0xff7ffffe00080800
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x000009ffffffbf, 0xff7ffffe00080800, x2, 688, x3)

inst_118:
// rs2_h0_val == -5, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000020;  op2val:0xaaaa02000006fffb
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xffffffef00000020, 0xaaaa02000006fffb, x2, 696, x3)

inst_119:
// rs2_h0_val == -8193, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x080000ffffbfff;  op2val:0xfffafff90100dfff
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x080000ffffbfff, 0xfffafff90100dfff, x2, 704, x3)

inst_120:
// rs1_w0_val == -33, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffffdf;  op2val:0x80000020040fffe
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffffdf, 0x80000020040fffe, x2, 712, x3)

inst_121:
// rs2_h0_val == -65, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x000020ff7fffff;  op2val:0x064000fffeffbf
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x000020ff7fffff, 0x064000fffeffbf, x2, 720, x3)

inst_122:
// rs1_w0_val == 268435456, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff10000000;  op2val:0x10ffff02000008
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xfffdffff10000000, 0x10ffff02000008, x2, 728, x3)

inst_123:
// rs1_w0_val == 33554432, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff02000000;  op2val:0xfff980004000ff7f
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xffffdfff02000000, 0xfff980004000ff7f, x2, 736, x3)

inst_124:
// rs1_w0_val == 8388608, 
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00800000;  op2val:0x100ffdffffefffc
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0xffffffbf00800000, 0x100ffdffffefffc, x2, 744, x3)

inst_125:
// rs2_h3_val == 21845, rs1_w0_val == 2097152, rs2_h2_val == 2, rs2_h1_val == 32767, rs1_w1_val == 1073741824, rs2_h0_val == -513
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000200000;  op2val:0x555500027ffffdff
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x4000000000200000, 0x555500027ffffdff, x2, 752, x3)

inst_126:
// rs2_h3_val == 32767, rs1_w1_val == 33554432, rs2_h0_val == -3, rs1_w0_val == -2, rs2_h1_val == 2048
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffffffe;  op2val:0x7ffffff90800fffd
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x2000000fffffffe, 0x7ffffff90800fffd, x2, 760, x3)

inst_127:
// rs2_h3_val == 32, rs2_h1_val == -3, rs1_w1_val == 0, rs1_w0_val == -8193, rs2_h0_val == -129
// opcode: smmwt.u ; op1:x30; op2:x29; dest:x31; op1val:0x000000ffffdfff;  op2val:0x20effffffdff7f
TEST_RR_OP(smmwt.u, x31, x30, x29, 0x0000000000000000, 0x000000ffffdfff, 0x20effffffdff7f, x2, 768, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x14_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x14_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x15_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 97*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
