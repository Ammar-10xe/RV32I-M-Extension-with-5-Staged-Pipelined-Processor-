
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmsxda32 instruction of the RISC-V RV64PZicsr extension for the kmsxda32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmsxda32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rd != rs2, rs1==x13, rs2==x28, rd==x13, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs2_w0_val == -32769, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w1_val == 2, rs1_w1_val == 1
// opcode: kmsxda32 ; op1:x13; op2:x28; dest:x13; op1val:0x00000180000000;  op2val:0x000002ffff7fff
TEST_PKRR_OP(kmsxda32, x13, x13, x28, 0x0000000000000000, 0x00000180000000, 0x000002ffff7fff, x13, x3, 0, x4)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x29, rs2==x1, rd==x16, rs1_w1_val == rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w1_val == -1025, rs2_w0_val == -4097, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w1_val == -1025, rs1_w0_val == 67108864
// opcode: kmsxda32 ; op1:x29; op2:x1; dest:x16; op1val:0xfffffbff04000000;  op2val:0xfffffbffffffefff
TEST_PKRR_OP(kmsxda32, x16, x29, x1, 0x0000000000000000, 0xfffffbff04000000, 0xfffffbffffffefff, x29, x3, 16, x4)

inst_2:
// rs1 == rs2 != rd, rs1==x21, rs2==x21, rd==x8, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w0_val == 1073741824, rs2_w1_val == 8, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == -8388609
// opcode: kmsxda32 ; op1:x21; op2:x21; dest:x8; op1val:0xff7fffff00000005;  op2val:0x00000840000000
TEST_PKRR_OP(kmsxda32, x8, x21, x21, 0x0000000000000000, 0xff7fffff00000005, 0x00000840000000, x21, x3, 32, x4)

inst_3:
// rs1 == rs2 == rd, rs1==x24, rs2==x24, rd==x24, rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w0_val == 4, rs1_w1_val == 131072, rs1_w0_val == 1048576, rs2_w1_val == -1431655766
// opcode: kmsxda32 ; op1:x24; op2:x24; dest:x24; op1val:0x02000000100000;  op2val:0xaaaaaaaa00000004
TEST_PKRR_OP(kmsxda32, x24, x24, x24, 0x0000000000000000, 0x02000000100000, 0xaaaaaaaa00000004, x24, x3, 48, x4)

inst_4:
// rs2 == rd != rs1, rs1==x22, rs2==x20, rd==x20, rs1_w0_val == rs2_w0_val, rs1_w1_val == -4194305, rs2_w1_val == -536870913, rs1_w0_val == 8388608, rs2_w0_val == 8388608
// opcode: kmsxda32 ; op1:x22; op2:x20; dest:x20; op1val:0xffbfffff00800000;  op2val:0xdfffffff00800000
TEST_PKRR_OP(kmsxda32, x20, x22, x20, 0x0000000000000000, 0xffbfffff00800000, 0xdfffffff00800000, x22, x3, 64, x4)

inst_5:
// rs1==x25, rs2==x9, rd==x28, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w0_val == 64, rs1_w1_val == -33554433
// opcode: kmsxda32 ; op1:x25; op2:x9; dest:x28; op1val:0xfdfffffffffffff8;  op2val:0xc000000000000040
TEST_PKRR_OP(kmsxda32, x28, x25, x9, 0x0000000000000000, 0xfdfffffffffffff8, 0xc000000000000040, x25, x3, 80, x4)

inst_6:
// rs1==x23, rs2==x14, rd==x6, rs2_w1_val == 1431655765, rs1_w0_val == 32768, rs2_w0_val == -8388609, rs1_w1_val == 524288
// opcode: kmsxda32 ; op1:x23; op2:x14; dest:x6; op1val:0x08000000008000;  op2val:0x55555555ff7fffff
TEST_PKRR_OP(kmsxda32, x6, x23, x14, 0x0000000000000000, 0x08000000008000, 0x55555555ff7fffff, x23, x3, 96, x4)

inst_7:
// rs1==x12, rs2==x27, rd==x17, rs2_w1_val == 2147483647, rs2_w0_val == -3, rs1_w1_val == 268435456, rs1_w0_val == 8
// opcode: kmsxda32 ; op1:x12; op2:x27; dest:x17; op1val:0x1000000000000008;  op2val:0x7ffffffffffffffd
TEST_PKRR_OP(kmsxda32, x17, x12, x27, 0x0000000000000000, 0x1000000000000008, 0x7ffffffffffffffd, x12, x3, 112, x4)

inst_8:
// rs1==x30, rs2==x13, rd==x18, rs2_w1_val == -1073741825, rs2_w0_val == 33554432, rs1_w1_val == -536870913
// opcode: kmsxda32 ; op1:x30; op2:x13; dest:x18; op1val:0xdfffffff00000006;  op2val:0xbfffffff02000000
TEST_PKRR_OP(kmsxda32, x18, x30, x13, 0x0000000000000000, 0xdfffffff00000006, 0xbfffffff02000000, x30, x3, 128, x4)

inst_9:
// rs1==x1, rs2==x6, rd==x21, rs2_w1_val == -268435457, rs1_w0_val == -33554433
// opcode: kmsxda32 ; op1:x1; op2:x6; dest:x21; op1val:0xfdfffffffdffffff;  op2val:0xefffffff00000009
TEST_PKRR_OP(kmsxda32, x21, x1, x6, 0x0000000000000000, 0xfdfffffffdffffff, 0xefffffff00000009, x1, x3, 144, x4)

inst_10:
// rs1==x2, rs2==x29, rd==x15, rs2_w1_val == -134217729, rs1_w1_val == 64, rs2_w0_val == 4096
// opcode: kmsxda32 ; op1:x2; op2:x29; dest:x15; op1val:0x000040fffffff6;  op2val:0xf7ffffff00001000
TEST_PKRR_OP(kmsxda32, x15, x2, x29, 0x0000000000000000, 0x000040fffffff6, 0xf7ffffff00001000, x2, x3, 160, x4)

inst_11:
// rs1==x27, rs2==x5, rd==x26, rs2_w1_val == -67108865, rs1_w1_val == -1048577, rs2_w0_val == 536870912
// opcode: kmsxda32 ; op1:x27; op2:x5; dest:x26; op1val:0xffeffffffffffffa;  op2val:0xfbffffff20000000
TEST_PKRR_OP(kmsxda32, x26, x27, x5, 0x0000000000000000, 0xffeffffffffffffa, 0xfbffffff20000000, x27, x3, 176, x4)

inst_12:
// rs1==x11, rs2==x31, rd==x14, rs2_w1_val == -33554433, rs1_w0_val == -8388609, rs1_w1_val == 4, rs2_w0_val == -1048577
// opcode: kmsxda32 ; op1:x11; op2:x31; dest:x14; op1val:0x000004ff7fffff;  op2val:0xfdffffffffefffff
TEST_PKRR_OP(kmsxda32, x14, x11, x31, 0x0000000000000000, 0x000004ff7fffff, 0xfdffffffffefffff, x11, x3, 192, x4)

inst_13:
// rs1==x4, rs2==x15, rd==x31, rs2_w1_val == -16777217, rs1_w0_val == 2048, rs2_w0_val == -2049
// opcode: kmsxda32 ; op1:x4; op2:x15; dest:x31; op1val:0xfffffffa00000800;  op2val:0xfefffffffffff7ff
TEST_PKRR_OP(kmsxda32, x31, x4, x15, 0x0000000000000000, 0xfffffffa00000800, 0xfefffffffffff7ff, x4, x3, 208, x20)
RVTEST_SIGBASE(x13,signature_x13_0)

inst_14:
// rs1==x8, rs2==x0, rd==x11, rs2_w1_val == -8388609, rs1_w0_val == -1
// opcode: kmsxda32 ; op1:x8; op2:x0; dest:x11; op1val:0xfffffff6ffffffff;  op2val:0xff7ffffffffffffc
TEST_PKRR_OP(kmsxda32, x11, x8, x0, 0x0000000000000000, 0xfffffff6ffffffff, 0xff7ffffffffffffc, x8, x13, 0, x20)

inst_15:
// rs1==x9, rs2==x8, rd==x19, rs2_w1_val == -4194305, rs2_w0_val == 16384
// opcode: kmsxda32 ; op1:x9; op2:x8; dest:x19; op1val:0xfffffff8fffffffa;  op2val:0xffbfffff00004000
TEST_PKRR_OP(kmsxda32, x19, x9, x8, 0x0000000000000000, 0xfffffff8fffffffa, 0xffbfffff00004000, x9, x13, 16, x20)

inst_16:
// rs1==x14, rs2==x3, rd==x7, rs2_w1_val == -2097153, rs1_w0_val == 262144, rs1_w1_val == 32768
// opcode: kmsxda32 ; op1:x14; op2:x3; dest:x7; op1val:0x00800000040000;  op2val:0xffdffffffffffff8
TEST_PKRR_OP(kmsxda32, x7, x14, x3, 0x0000000000000000, 0x00800000040000, 0xffdffffffffffff8, x14, x13, 32, x20)

inst_17:
// rs1==x18, rs2==x12, rd==x4, rs2_w1_val == -1048577, rs1_w1_val == -524289
// opcode: kmsxda32 ; op1:x18; op2:x12; dest:x4; op1val:0xfff7ffff00000800;  op2val:0xffefffff02000000
TEST_PKRR_OP(kmsxda32, x4, x18, x12, 0x0000000000000000, 0xfff7ffff00000800, 0xffefffff02000000, x18, x13, 48, x20)

inst_18:
// rs1==x31, rs2==x17, rd==x12, rs2_w1_val == -524289, rs1_w0_val == 33554432, rs2_w0_val == -524289
// opcode: kmsxda32 ; op1:x31; op2:x17; dest:x12; op1val:0x08000002000000;  op2val:0xfff7fffffff7ffff
TEST_PKRR_OP(kmsxda32, x12, x31, x17, 0x0000000000000000, 0x08000002000000, 0xfff7fffffff7ffff, x31, x13, 64, x20)

inst_19:
// rs1==x0, rs2==x7, rd==x30, rs2_w1_val == -262145, rs1_w0_val == -5, rs1_w1_val == 262144, rs2_w0_val == -16385
// opcode: kmsxda32 ; op1:x0; op2:x7; dest:x30; op1val:0x040000fffffffb;  op2val:0xfffbffffffffbfff
TEST_PKRR_OP(kmsxda32, x30, x0, x7, 0x0000000000000000, 0x040000fffffffb, 0xfffbffffffffbfff, x0, x13, 80, x20)

inst_20:
// rs1==x28, rs2==x10, rd==x2, rs2_w1_val == -131073, 
// opcode: kmsxda32 ; op1:x28; op2:x10; dest:x2; op1val:0x008000fdffffff;  op2val:0xfffdffffffffbfff
TEST_PKRR_OP(kmsxda32, x2, x28, x10, 0x0000000000000000, 0x008000fdffffff, 0xfffdffffffffbfff, x28, x13, 96, x20)

inst_21:
// rs1==x7, rs2==x18, rd==x1, rs2_w1_val == -65537, rs2_w0_val == -33
// opcode: kmsxda32 ; op1:x7; op2:x18; dest:x1; op1val:0xffefffffffffffff;  op2val:0xfffeffffffffffdf
TEST_PKRR_OP(kmsxda32, x1, x7, x18, 0x0000000000000000, 0xffefffffffffffff, 0xfffeffffffffffdf, x7, x13, 112, x20)

inst_22:
// rs1==x26, rs2==x16, rd==x22, rs2_w1_val == -32769, rs1_w0_val == -4097
// opcode: kmsxda32 ; op1:x26; op2:x16; dest:x22; op1val:0x000007ffffefff;  op2val:0xffff7fff00004000
TEST_PKRR_OP(kmsxda32, x22, x26, x16, 0x0000000000000000, 0x000007ffffefff, 0xffff7fff00004000, x26, x13, 128, x20)

inst_23:
// rs1==x10, rs2==x2, rd==x9, rs2_w1_val == -16385, rs1_w0_val == -2097153, rs2_w0_val == -17
// opcode: kmsxda32 ; op1:x10; op2:x2; dest:x9; op1val:0xfffffff6ffdfffff;  op2val:0xffffbfffffffffef
TEST_PKRR_OP(kmsxda32, x9, x10, x2, 0x0000000000000000, 0xfffffff6ffdfffff, 0xffffbfffffffffef, x10, x13, 144, x20)

inst_24:
// rs1==x6, rs2==x26, rd==x29, rs2_w1_val == -8193, rs1_w1_val == 2147483647, rs2_w0_val == 8
// opcode: kmsxda32 ; op1:x6; op2:x26; dest:x29; op1val:0x7ffffffffffffff8;  op2val:0xffffdfff00000008
TEST_PKRR_OP(kmsxda32, x29, x6, x26, 0x0000000000000000, 0x7ffffffffffffff8, 0xffffdfff00000008, x6, x13, 160, x20)

inst_25:
// rs1==x15, rs2==x30, rd==x25, rs2_w1_val == -4097, rs1_w0_val == 512, rs1_w1_val == 16
// opcode: kmsxda32 ; op1:x15; op2:x30; dest:x25; op1val:0x00001000000200;  op2val:0xffffeffffffffffa
TEST_PKRR_OP(kmsxda32, x25, x15, x30, 0x0000000000000000, 0x00001000000200, 0xffffeffffffffffa, x15, x13, 176, x20)

inst_26:
// rs1==x16, rs2==x11, rd==x5, rs2_w1_val == -2049, rs1_w1_val == 0, rs1_w0_val == -129, rs2_w0_val == -134217729
// opcode: kmsxda32 ; op1:x16; op2:x11; dest:x5; op1val:0x000000ffffff7f;  op2val:0xfffff7fff7ffffff
TEST_PKRR_OP(kmsxda32, x5, x16, x11, 0x0000000000000000, 0x000000ffffff7f, 0xfffff7fff7ffffff, x16, x13, 192, x20)

inst_27:
// rs1==x19, rs2==x25, rd==x3, rs2_w1_val == -513, rs1_w0_val == 2097152, rs2_w0_val == 32
// opcode: kmsxda32 ; op1:x19; op2:x25; dest:x3; op1val:0x1000000000200000;  op2val:0xfffffdff00000020
TEST_PKRR_OP(kmsxda32, x3, x19, x25, 0x0000000000000000, 0x1000000000200000, 0xfffffdff00000020, x19, x13, 208, x20)

inst_28:
// rs1==x17, rs2==x22, rd==x10, rs2_w1_val == -257, rs1_w1_val == 134217728
// opcode: kmsxda32 ; op1:x17; op2:x22; dest:x10; op1val:0x80000003fffffff;  op2val:0xfffffeff00000009
TEST_PKRR_OP(kmsxda32, x10, x17, x22, 0x0000000000000000, 0x80000003fffffff, 0xfffffeff00000009, x17, x13, 224, x20)

inst_29:
// rs1==x5, rs2==x23, rd==x0, rs2_w1_val == -129, rs1_w0_val == 32, rs1_w1_val == -65537, rs2_w0_val == 524288
// opcode: kmsxda32 ; op1:x5; op2:x23; dest:x0; op1val:0xfffeffff00000020;  op2val:0xffffff7f00080000
TEST_PKRR_OP(kmsxda32, x0, x5, x23, 0x0000000000000000, 0xfffeffff00000020, 0xffffff7f00080000, x5, x13, 240, x20)

inst_30:
// rs1==x3, rs2==x4, rd==x27, rs2_w1_val == -65, rs2_w0_val == -131073
// opcode: kmsxda32 ; op1:x3; op2:x4; dest:x27; op1val:0xfdffffff00000007;  op2val:0xffffffbffffdffff
TEST_PKRR_OP(kmsxda32, x27, x3, x4, 0x0000000000000000, 0xfdffffff00000007, 0xffffffbffffdffff, x3, x13, 256, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x20, rs2==x19, rd==x23, rs2_w1_val == -33, 
// opcode: kmsxda32 ; op1:x20; op2:x19; dest:x23; op1val:0x00000002000000;  op2val:0xffffffdffffffff9
TEST_PKRR_OP(kmsxda32, x23, x20, x19, 0x0000000000000000, 0x00000002000000, 0xffffffdffffffff9, x20, x1, 0, x2)

inst_32:
// rs2_w1_val == -17, rs1_w0_val == -65537
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005fffeffff;  op2val:0xffffffefff7fffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x000005fffeffff, 0xffffffefff7fffff, x30, x1, 16, x2)

inst_33:
// rs2_w1_val == -9, rs1_w0_val == 65536, rs2_w0_val == 2147483647
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00010000;  op2val:0xfffffff77fffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffffc00010000, 0xfffffff77fffffff, x30, x1, 32, x2)

inst_34:
// rs2_w1_val == -5, rs2_w0_val == -5
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffff7fffff;  op2val:0xfffffffbfffffffb
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffbffff7fffff, 0xfffffffbfffffffb, x30, x1, 48, x2)

inst_35:
// rs2_w1_val == -3, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8fffffff9;  op2val:0xfffffffdfffffffd
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffff8fffffff9, 0xfffffffdfffffffd, x30, x1, 64, x2)

inst_36:
// rs2_w1_val == -2, rs2_w0_val == -129, rs1_w1_val == 2048
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffffffff;  op2val:0xfffffffeffffff7f
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x000800ffffffff, 0xfffffffeffffff7f, x30, x1, 80, x2)

inst_37:
// rs2_w1_val == -2147483648, rs2_w0_val == 65536, rs1_w1_val == 16777216
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffff6;  op2val:0x8000000000010000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x1000000fffffff6, 0x8000000000010000, x30, x1, 96, x2)

inst_38:
// rs2_w1_val == 1073741824, rs2_w0_val == 0, rs1_w0_val == 16
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000010;  op2val:0x4000000000000000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x02000000000010, 0x4000000000000000, x30, x1, 112, x2)

inst_39:
// rs2_w1_val == 536870912, rs1_w1_val == -2097153, rs2_w0_val == -536870913, rs1_w0_val == 524288
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00080000;  op2val:0x20000000dfffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00080000, 0x20000000dfffffff, x30, x1, 128, x2)

inst_40:
// rs2_w1_val == 268435456, rs2_w0_val == -8193
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffffffa;  op2val:0x10000000ffffdfff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x000003fffffffa, 0x10000000ffffdfff, x30, x1, 144, x2)

inst_41:
// rs2_w1_val == 134217728, rs1_w0_val == -131073, rs2_w0_val == -16777217
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffdffff;  op2val:0x8000000feffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffbffffffffdffff, 0x8000000feffffff, x30, x1, 160, x2)

inst_42:
// rs2_w1_val == 67108864, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000003;  op2val:0x4000000ff7fffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000003, 0x4000000ff7fffff, x30, x1, 176, x2)

inst_43:
// rs2_w1_val == 33554432, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000020;  op2val:0x2000000ffffdfff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x00000900000020, 0x2000000ffffdfff, x30, x1, 192, x2)

inst_44:
// rs2_w1_val == 16777216, rs2_w0_val == 1, rs1_w0_val == -8193
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000ffffdfff;  op2val:0x100000000000001
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x040000ffffdfff, 0x100000000000001, x30, x1, 208, x2)

inst_45:
// rs2_w1_val == 8388608, rs1_w0_val == -17
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffffffef;  op2val:0x800000ffffbfff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfdffffffffffffef, 0x800000ffffbfff, x30, x1, 224, x2)

inst_46:
// rs2_w1_val == 4194304, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00010000;  op2val:0x400000ff7fffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffffc00010000, 0x400000ff7fffff, x30, x1, 240, x2)

inst_47:
// rs2_w1_val == 2097152, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000200000;  op2val:0x200000fffff7ff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x02000000200000, 0x200000fffff7ff, x30, x1, 256, x2)

inst_48:
// rs2_w1_val == 1048576, rs1_w1_val == -131073
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff02000000;  op2val:0x10000000000004
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffdffff02000000, 0x10000000000004, x30, x1, 272, x2)

inst_49:
// rs2_w1_val == 524288, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000005;  op2val:0x080000ffffffdf
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x100000000000005, 0x080000ffffffdf, x30, x1, 288, x2)

inst_50:
// rs2_w1_val == 262144, rs2_w0_val == -262145, rs1_w1_val == -262145
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000800;  op2val:0x040000fffbffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000800, 0x040000fffbffff, x30, x1, 304, x2)

inst_51:
// rs2_w1_val == 131072, rs2_w0_val == 1431655765, rs1_w0_val == -2
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffffffffe;  op2val:0x02000055555555
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffffffe, 0x02000055555555, x30, x1, 320, x2)

inst_52:
// rs2_w1_val == 65536, rs1_w1_val == -32769, rs1_w0_val == -1073741825, rs2_w0_val == -9
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffbfffffff;  op2val:0x010000fffffff7
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffff7fffbfffffff, 0x010000fffffff7, x30, x1, 336, x2)

inst_53:
// rs2_w1_val == 32768, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffdffff;  op2val:0x008000ffffffdf
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x000800fffdffff, 0x008000ffffffdf, x30, x1, 352, x2)

inst_54:
// rs2_w1_val == 16384, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900000200;  op2val:0x004000ffffefff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffff900000200, 0x004000ffffefff, x30, x1, 368, x2)

inst_55:
// rs2_w1_val == 8192, rs1_w1_val == -257
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffffc;  op2val:0x002000ffefffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffffc, 0x002000ffefffff, x30, x1, 384, x2)

inst_56:
// rs2_w1_val == 4096, rs1_w0_val == 131072
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00020000;  op2val:0x001000dfffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00020000, 0x001000dfffffff, x30, x1, 400, x2)

inst_57:
// rs1_w0_val == 16777216, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff901000000;  op2val:0xfffdffff40000000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffff901000000, 0xfffdffff40000000, x30, x1, 416, x2)

inst_58:
// rs1_w0_val == 4194304, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500400000;  op2val:0x020000fff7ffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x00000500400000, 0x020000fff7ffff, x30, x1, 432, x2)

inst_59:
// rs1_w0_val == 16384, rs2_w0_val == 262144, rs1_w1_val == 8
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800004000;  op2val:0xfffffff800040000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x00000800004000, 0xfffffff800040000, x30, x1, 448, x2)

inst_60:
// rs1_w0_val == 8192, rs2_w0_val == -65537
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00002000;  op2val:0xfffbfffffffeffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00002000, 0xfffbfffffffeffff, x30, x1, 464, x2)

inst_61:
// rs1_w0_val == 4096, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00001000;  op2val:0xfffffdfffffffff9
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffefffff00001000, 0xfffffdfffffffff9, x30, x1, 480, x2)

inst_62:
// rs1_w0_val == 1024, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000400;  op2val:0xbfffffff00000007
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000400, 0xbfffffff00000007, x30, x1, 496, x2)

inst_63:
// rs1_w0_val == 256, rs1_w1_val == 512
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000100;  op2val:0xfdffffff00000000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x00020000000100, 0xfdffffff00000000, x30, x1, 512, x2)

inst_64:
// rs1_w0_val == 128, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000080;  op2val:0x1000000000000006
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x00080000000080, 0x1000000000000006, x30, x1, 528, x2)

inst_65:
// rs1_w0_val == 64, rs1_w1_val == 32
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000040;  op2val:0x4000000fffffffc
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x00002000000040, 0x4000000fffffffc, x30, x1, 544, x2)

inst_66:
// rs1_w0_val == 4, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000004;  op2val:0x55555555feffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x02000000000004, 0x55555555feffffff, x30, x1, 560, x2)

inst_67:
// rs1_w0_val == 2, rs2_w0_val == 1024, rs1_w1_val == 1048576
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000002;  op2val:0x80000000000400
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x10000000000002, 0x80000000000400, x30, x1, 576, x2)

inst_68:
// rs1_w0_val == 1, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000001;  op2val:0xffffff7fffffffdf
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000001, 0xffffff7fffffffdf, x30, x1, 592, x2)

inst_69:
// rs1_w0_val == 0, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000000;  op2val:0x010000fffbffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000000, 0x010000fffbffff, x30, x1, 608, x2)

inst_70:
// rs2_w1_val == 2048, rs1_w1_val == -65, rs1_w0_val == -524289
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffff7ffff;  op2val:0x00080000000001
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffffffbffff7ffff, 0x00080000000001, x30, x1, 624, x2)

inst_71:
// rs2_w1_val == 1024, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffffff6;  op2val:0x00040000000000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffbffffffffffff6, 0x00040000000000, x30, x1, 640, x2)

inst_72:
// rs2_w1_val == 512, rs1_w0_val == -16385
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000ffffbfff;  op2val:0x00020000000008
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x080000ffffbfff, 0x00020000000008, x30, x1, 656, x2)

inst_73:
// rs2_w1_val == 256, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffffff7f;  op2val:0x000100dfffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffeffffffff7f, 0x000100dfffffff, x30, x1, 672, x2)

inst_74:
// rs2_w1_val == 128, rs1_w0_val == -4194305
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000ffbfffff;  op2val:0x00008020000000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x040000ffbfffff, 0x00008020000000, x30, x1, 688, x2)

inst_75:
// rs2_w1_val == 64, rs2_w0_val == 2, rs1_w1_val == -5
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000400;  op2val:0x00004000000002
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000400, 0x00004000000002, x30, x1, 704, x2)

inst_76:
// rs2_w1_val == 32, rs1_w0_val == -33
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffffffdf;  op2val:0x00002055555555
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffbfffffffffffdf, 0x00002055555555, x30, x1, 720, x2)

inst_77:
// rs2_w1_val == 16, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00040000;  op2val:0x00001000000007
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffffc00040000, 0x00001000000007, x30, x1, 736, x2)

inst_78:
// rs2_w1_val == 4, rs2_w0_val == 131072, rs1_w1_val == -17
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffdffff;  op2val:0x00000400020000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffffffeffffdffff, 0x00000400020000, x30, x1, 752, x2)

inst_79:
// rs2_w1_val == 1, rs1_w1_val == -268435457
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffffffdf;  op2val:0x000001fffffff6
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xefffffffffffffdf, 0x000001fffffff6, x30, x1, 768, x2)

inst_80:
// rs2_w1_val == 0, rs2_w0_val == 256, rs1_w1_val == -513
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000007;  op2val:0x00000000000100
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000007, 0x00000000000100, x30, x1, 784, x2)

inst_81:
// rs2_w1_val == -1, rs1_w1_val == -4097
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000006;  op2val:0xfffffffffffeffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffffefff00000006, 0xfffffffffffeffff, x30, x1, 800, x2)

inst_82:
// rs2_w0_val == -1431655766, rs1_w1_val == 536870912
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000020000;  op2val:0x000400aaaaaaaa
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x2000000000020000, 0x000400aaaaaaaa, x30, x1, 816, x2)

inst_83:
// rs2_w0_val == -1073741825, rs1_w1_val == -2
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefff7ffff;  op2val:0xffdfffffbfffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffffefff7ffff, 0xffdfffffbfffffff, x30, x1, 832, x2)

inst_84:
// rs2_w0_val == -268435457, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffc0000000;  op2val:0xfffffff6efffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffffefffc0000000, 0xfffffff6efffffff, x30, x1, 848, x2)

inst_85:
// rs2_w0_val == -67108865, rs1_w1_val == -16777217
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffffff7f;  op2val:0xffdffffffbffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfeffffffffffff7f, 0xffdffffffbffffff, x30, x1, 864, x2)

inst_86:
// rs2_w0_val == -33554433, rs1_w0_val == -67108865
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8fbffffff;  op2val:0xfffefffffdffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffff8fbffffff, 0xfffefffffdffffff, x30, x1, 880, x2)

inst_87:
// rs2_w0_val == -4194305, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000ffdfffff;  op2val:0xfffffeffffbfffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x040000ffdfffff, 0xfffffeffffbfffff, x30, x1, 896, x2)

inst_88:
// rs2_w0_val == -2097153, rs1_w1_val == 67108864
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000080;  op2val:0x002000ffdfffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x400000000000080, 0x002000ffdfffff, x30, x1, 912, x2)

inst_89:
// rs2_w0_val == -1025, rs1_w1_val == 1431655765
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fffffff6;  op2val:0x000040fffffbff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x55555555fffffff6, 0x000040fffffbff, x30, x1, 928, x2)

inst_90:
// rs2_w0_val == -513, rs1_w1_val == 65536
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000200000;  op2val:0xeffffffffffffdff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x01000000200000, 0xeffffffffffffdff, x30, x1, 944, x2)

inst_91:
// rs2_w0_val == -257, rs1_w0_val == 134217728
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa08000000;  op2val:0xffffbffffffffeff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffffa08000000, 0xffffbffffffffeff, x30, x1, 960, x2)

inst_92:
// rs2_w0_val == 32768, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000800000;  op2val:0xfffffffa00008000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x02000000800000, 0xfffffffa00008000, x30, x1, 976, x2)

inst_93:
// rs2_w0_val == 8192, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000009;  op2val:0x00020000002000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000009, 0x00020000002000, x30, x1, 992, x2)

inst_94:
// rs2_w0_val == 2048, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010fffffff6;  op2val:0xfffeffff00000800
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x000010fffffff6, 0xfffeffff00000800, x30, x1, 1008, x2)

inst_95:
// rs2_w0_val == 512, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000001;  op2val:0xffefffff00000200
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffffefff00000001, 0xffefffff00000200, x30, x1, 1024, x2)

inst_96:
// rs2_w0_val == 128, rs1_w1_val == 2097152
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000fbffffff;  op2val:0xfffffff900000080
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x200000fbffffff, 0xfffffff900000080, x30, x1, 1040, x2)

inst_97:
// rs2_w0_val == 16, rs1_w1_val == -134217729
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff02000000;  op2val:0xfffffff900000010
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff02000000, 0xfffffff900000010, x30, x1, 1056, x2)

inst_98:
// rs2_w0_val == -1, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffffff8;  op2val:0xfffffffcffffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x040000fffffff8, 0xfffffffcffffffff, x30, x1, 1072, x2)

inst_99:
// rs1_w1_val == -1431655766, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafbffffff;  op2val:0xffffffbffbffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafbffffff, 0xffffffbffbffffff, x30, x1, 1088, x2)

inst_100:
// rs1_w1_val == -1073741825, rs1_w0_val == -65
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffffbf;  op2val:0x004000bfffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffffbf, 0x004000bfffffff, x30, x1, 1104, x2)

inst_101:
// rs1_w1_val == -67108865, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000009;  op2val:0x7ffffffffffffffd
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000009, 0x7ffffffffffffffd, x30, x1, 1120, x2)

inst_102:
// rs1_w1_val == -16385, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00002000;  op2val:0x00000240000000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00002000, 0x00000240000000, x30, x1, 1136, x2)

inst_103:
// rs1_w1_val == -8193, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00008000;  op2val:0xffbfffff20000000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00008000, 0xffbfffff20000000, x30, x1, 1152, x2)

inst_104:
// rs1_w1_val == -2049, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000007;  op2val:0xffeffffffffffffb
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000007, 0xffeffffffffffffb, x30, x1, 1168, x2)

inst_105:
// rs1_w1_val == -129, rs1_w0_val == 2147483647
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f7fffffff;  op2val:0x00020055555555
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffffff7f7fffffff, 0x00020055555555, x30, x1, 1184, x2)

inst_106:
// rs1_w1_val == -33, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffff8;  op2val:0xffffffdf00000400
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffff8, 0xffffffdf00000400, x30, x1, 1200, x2)

inst_107:
// rs1_w1_val == -9, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700010000;  op2val:0x40000007fffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffff700010000, 0x40000007fffffff, x30, x1, 1216, x2)

inst_108:
// rs1_w1_val == -3, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd08000000;  op2val:0xfffffff600000004
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffffd08000000, 0xfffffff600000004, x30, x1, 1232, x2)

inst_109:
// rs1_w1_val == -2147483648, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000008;  op2val:0xfffffffa00000200
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x8000000000000008, 0xfffffffa00000200, x30, x1, 1248, x2)

inst_110:
// rs1_w1_val == 1073741824, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000003;  op2val:0xffffbfffdfffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x4000000000000003, 0xffffbfffdfffffff, x30, x1, 1264, x2)

inst_111:
// rs1_w1_val == 33554432, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000ffffffef;  op2val:0x04000000008000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x2000000ffffffef, 0x04000000008000, x30, x1, 1280, x2)

inst_112:
// rs1_w1_val == 8388608, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000003fffffff;  op2val:0x8000000000000006
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x8000003fffffff, 0x8000000000000006, x30, x1, 1296, x2)

inst_113:
// rs1_w1_val == 4194304, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000003;  op2val:0xffffbffffffffff6
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x40000000000003, 0xffffbffffffffff6, x30, x1, 1312, x2)

inst_114:
// rs1_w1_val == 16384, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffffffbf;  op2val:0x1000000fbffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x004000ffffffbf, 0x1000000fbffffff, x30, x1, 1328, x2)

inst_115:
// rs1_w1_val == 8192, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000006;  op2val:0xaaaaaaaa00010000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x00200000000006, 0xaaaaaaaa00010000, x30, x1, 1344, x2)

inst_116:
// rs1_w1_val == 4096, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000ff7fffff;  op2val:0x55555555fffffff6
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x001000ff7fffff, 0x55555555fffffff6, x30, x1, 1360, x2)

inst_117:
// rs1_w1_val == 1024, rs1_w0_val == -262145
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffbffff;  op2val:0x000002ffffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x000400fffbffff, 0x000002ffffffff, x30, x1, 1376, x2)

inst_118:
// rs2_w0_val == 2097152, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000005;  op2val:0x00000100200000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000005, 0x00000100200000, x30, x1, 1392, x2)

inst_119:
// rs1_w1_val == 256, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000400;  op2val:0xc000000000000009
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x00010000000400, 0xc000000000000009, x30, x1, 1408, x2)

inst_120:
// rs1_w1_val == 128, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008001000000;  op2val:0xfffffffaffdfffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x00008001000000, 0xfffffffaffdfffff, x30, x1, 1424, x2)

inst_121:
// rs1_w1_val == 2, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000208000000;  op2val:0xfffffffd7fffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x00000208000000, 0xfffffffd7fffffff, x30, x1, 1440, x2)

inst_122:
// rs1_w1_val == -1, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff7fffffff;  op2val:0x00400000000010
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffffffff7fffffff, 0x00400000000010, x30, x1, 1456, x2)

inst_123:
// rs2_w0_val == 134217728, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000004000;  op2val:0xffffffff08000000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x08000000004000, 0xffffffff08000000, x30, x1, 1472, x2)

inst_124:
// rs1_w0_val == -1431655766, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffaaaaaaaa;  op2val:0xffffffefaaaaaaaa
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffbffaaaaaaaa, 0xffffffefaaaaaaaa, x30, x1, 1488, x2)

inst_125:
// rs1_w0_val == 1431655765, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff55555555;  op2val:0x800000000010000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffbff55555555, 0x800000000010000, x30, x1, 1504, x2)

inst_126:
// rs1_w0_val == -536870913, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002dfffffff;  op2val:0x7fffffffffefffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x000002dfffffff, 0x7fffffffffefffff, x30, x1, 1520, x2)

inst_127:
// rs1_w0_val == -268435457, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffefffffff;  op2val:0xffffff7f00010000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffdfffffefffffff, 0xffffff7f00010000, x30, x1, 1536, x2)

inst_128:
// rs1_w0_val == -134217729, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000f7ffffff;  op2val:0x80000008000000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x004000f7ffffff, 0x80000008000000, x30, x1, 1552, x2)

inst_129:
// rs1_w0_val == -16777217, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafeffffff;  op2val:0x55555555f7ffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafeffffff, 0x55555555f7ffffff, x30, x1, 1568, x2)

inst_130:
// rs1_w0_val == -1048577, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffefffff;  op2val:0x01000000004000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x008000ffefffff, 0x01000000004000, x30, x1, 1584, x2)

inst_131:
// rs1_w0_val == -32769, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020ffff7fff;  op2val:0x7fffffff00000080
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x000020ffff7fff, 0x7fffffff00000080, x30, x1, 1600, x2)

inst_132:
// rs2_w0_val == -65, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffffe;  op2val:0x000000ffffffbf
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffffe, 0x000000ffffffbf, x30, x1, 1616, x2)

inst_133:
// rs1_w0_val == -2049, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffff7ff;  op2val:0x01000000020000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffff7ff, 0x01000000020000, x30, x1, 1632, x2)

inst_134:
// rs1_w0_val == -1025, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffffbff;  op2val:0x8000000fffffffb
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffffbff, 0x8000000fffffffb, x30, x1, 1648, x2)

inst_135:
// rs1_w0_val == -513, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffdff;  op2val:0xfffefffffffdffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x10000000fffffdff, 0xfffefffffffdffff, x30, x1, 1664, x2)

inst_136:
// rs2_w0_val == 4194304, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000000;  op2val:0x00004000400000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000000, 0x00004000400000, x30, x1, 1680, x2)

inst_137:
// rs2_w0_val == -2, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffbfff;  op2val:0x040000fffffffe
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffbfff, 0x040000fffffffe, x30, x1, 1696, x2)

inst_138:
// rs1_w0_val == -257, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffffeff;  op2val:0xbffffffffffffffb
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x000000fffffeff, 0xbffffffffffffffb, x30, x1, 1712, x2)

inst_139:
// rs2_w0_val == -2147483648, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00002000;  op2val:0x00002080000000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00002000, 0x00002080000000, x30, x1, 1728, x2)

inst_140:
// rs2_w0_val == 268435456, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf55555555;  op2val:0x00010010000000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xffffffdf55555555, 0x00010010000000, x30, x1, 1744, x2)

inst_141:
// rs1_w0_val == -9, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fffffff7;  op2val:0xfffffffafffffffd
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffffff7, 0xfffffffafffffffd, x30, x1, 1760, x2)

inst_142:
// rs2_w0_val == 67108864, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000006;  op2val:0xfffffffe04000000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x10000000000006, 0xfffffffe04000000, x30, x1, 1776, x2)

inst_143:
// rs1_w0_val == -3, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffffffd;  op2val:0x8000000fffffffb
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffffffd, 0x8000000fffffffb, x30, x1, 1792, x2)

inst_144:
// rs2_w0_val == 16777216, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000800;  op2val:0x00000101000000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x00200000000800, 0x00000101000000, x30, x1, 1808, x2)

inst_145:
// rs1_w0_val == 1073741824, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000840000000;  op2val:0xfbfffffffbffffff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x00000840000000, 0xfbfffffffbffffff, x30, x1, 1824, x2)

inst_146:
// rs1_w0_val == 536870912, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000020000000;  op2val:0x00040000800000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x08000020000000, 0x00040000800000, x30, x1, 1840, x2)

inst_147:
// rs1_w0_val == 268435456, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000010000000;  op2val:0xffffffff08000000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x10000010000000, 0xffffffff08000000, x30, x1, 1856, x2)

inst_148:
// rs2_w0_val == 1048576, 
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff55555555;  op2val:0x40000000100000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff55555555, 0x40000000100000, x30, x1, 1872, x2)

inst_149:
// rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w0_val == 1073741824, rs2_w1_val == 8, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == -8388609
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000005;  op2val:0x00000840000000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000005, 0x00000840000000, x30, x1, 1888, x2)

inst_150:
// rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w0_val == 4, rs1_w1_val == 131072, rs1_w0_val == 1048576, rs2_w1_val == -1431655766
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000100000;  op2val:0xaaaaaaaa00000004
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x02000000100000, 0xaaaaaaaa00000004, x30, x1, 1904, x2)

inst_151:
// rs2_w1_val == -8388609, rs1_w0_val == -1
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6ffffffff;  op2val:0xff7ffffffffffffc
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffffff6ffffffff, 0xff7ffffffffffffc, x30, x1, 1920, x2)

inst_152:
// rs2_w1_val == -262145, rs1_w0_val == -5, rs1_w1_val == 262144, rs2_w0_val == -16385
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffffffb;  op2val:0xfffbffffffffbfff
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0x040000fffffffb, 0xfffbffffffffbfff, x30, x1, 1936, x2)

inst_153:
// rs2_w1_val == -129, rs1_w0_val == 32, rs1_w1_val == -65537, rs2_w0_val == 524288
// opcode: kmsxda32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000020;  op2val:0xffffff7f00080000
TEST_PKRR_OP(kmsxda32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000020, 0xffffff7f00080000, x30, x1, 1952, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x13_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 246*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
