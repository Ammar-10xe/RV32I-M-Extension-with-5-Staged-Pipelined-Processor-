
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smulx16 instruction of the RISC-V RV64PZicsr extension for the smulx16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smulx16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rd != rs2, rs1==x26, rs2==x9, rd==x26, rs1_h0_val == -32768, rs2_h0_val == 64, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h1_val == 8192, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val != rs2_h1_val, rs2_h3_val == 4096, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h3_val == -33, rs2_h1_val == 1024
// opcode: smulx16 ; op1:x26; op2:x9; dest:x26; op1val:0xffdffffa20008000;  op2val:0x1000fff904000040
TEST_P64_PNN_OP(smulx16, x26, $rd_hi, x26, x9, 0x0000000000000000, $correctval_hi, 0xffdffffa20008000, 0x1000fff904000040, x15, 0, x21)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x20, rd==x18, rs1_h3_val == rs2_h3_val, rs1_h3_val == 1024, rs2_h2_val == -8193, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h3_val == 1024, rs2_h0_val == -3, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h1_val == -257
// opcode: smulx16 ; op1:x28; op2:x20; dest:x18; op1val:0x0400fff8feff0007;  op2val:0x0400dfff0007fffd
TEST_P64_PNN_OP(smulx16, x18, $rd_hi, x28, x20, 0x0000000000000000, $correctval_hi, 0x0400fff8feff0007, 0x0400dfff0007fffd, x15, 16, x21)

inst_2:
// rs1 == rs2 != rd, rs1==x17, rs2==x17, rd==x10, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h1_val == 16384, rs2_h0_val == 21845, rs2_h3_val == -17, rs1_h3_val == -2, rs1_h0_val == 4, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == -17
// opcode: smulx16 ; op1:x17; op2:x17; dest:x10; op1val:0xfffeffef40000004;  op2val:0xffeffffa3fff5555
TEST_P64_PNN_OP(smulx16, x10, $rd_hi, x17, x17, 0x0000000000000000, $correctval_hi, 0xfffeffef40000004, 0xffeffffa3fff5555, x15, 32, x21)

inst_3:
// rs1 == rs2 == rd, rs1==x2, rs2==x2, rd==x2, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == -8193, rs2_h2_val == -5, rs1_h1_val == 32, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val == -2049, rs1_h0_val == 0, rs2_h3_val == -1
// opcode: smulx16 ; op1:x2; op2:x2; dest:x2; op1val:0x0006f7ff00200000;  op2val:0xfffffffbdfff0009
TEST_P64_PNN_OP(smulx16, x2, $rd_hi, x2, x2, 0x0000000000000000, $correctval_hi, 0x0006f7ff00200000, 0xfffffffbdfff0009, x15, 48, x21)

inst_4:
// rs2 == rd != rs1, rs1==x19, rs2==x6, rd==x6, rs1_h2_val == rs2_h2_val, rs1_h1_val == -3, rs2_h0_val == 2, rs1_h3_val == 1, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h0_val == -21846, rs2_h1_val == 256
// opcode: smulx16 ; op1:x19; op2:x6; dest:x6; op1val:0x00010005fffdaaaa;  op2val:0x0009000501000002
TEST_P64_PNN_OP(smulx16, x6, $rd_hi, x19, x6, 0x0000000000000000, $correctval_hi, 0x00010005fffdaaaa, 0x0009000501000002, x15, 64, x21)

inst_5:
// rs1==x30, rs2==x27, rd==x4, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h1_val == -5, rs2_h3_val == -21846, rs1_h1_val == 512
// opcode: smulx16 ; op1:x30; op2:x27; dest:x4; op1val:0xfffefffc02003fff;  op2val:0xaaaa0009fffb0009
TEST_P64_PNN_OP(smulx16, x4, $rd_hi, x30, x27, 0x0000000000000000, $correctval_hi, 0xfffefffc02003fff, 0xaaaa0009fffb0009, x15, 80, x21)

inst_6:
// rs1==x5, rs2==x13, rd==x22, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 8, rs2_h2_val == -1025, rs2_h3_val == -33, rs2_h0_val == -21846
// opcode: smulx16 ; op1:x5; op2:x13; dest:x22; op1val:0xfffc000802000006;  op2val:0xffdffbffc000aaaa
TEST_P64_PNN_OP(smulx16, x22, $rd_hi, x5, x13, 0x0000000000000000, $correctval_hi, 0xfffc000802000006, 0xffdffbffc000aaaa, x15, 96, x21)

inst_7:
// rs1==x16, rs2==x28, rd==x8, rs1_h1_val == rs2_h1_val, rs2_h3_val == 256, rs1_h0_val == rs2_h0_val, rs2_h1_val == 8192, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h3_val == -32768
// opcode: smulx16 ; op1:x16; op2:x28; dest:x8; op1val:0x8000ffef2000fff9;  op2val:0x010000062000fff9
TEST_P64_PNN_OP(smulx16, x8, $rd_hi, x16, x28, 0x0000000000000000, $correctval_hi, 0x8000ffef2000fff9, 0x010000062000fff9, x15, 112, x21)

inst_8:
// rs1==x24, rs2==x3, rd==x16, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h1_val == -2049, rs2_h2_val == -65, rs1_h0_val == 1024, rs2_h3_val == -32768, rs1_h3_val == -5
// opcode: smulx16 ; op1:x24; op2:x3; dest:x16; op1val:0xfffb0008c0000400;  op2val:0x8000ffbff7fffff8
TEST_P64_PNN_OP(smulx16, x16, $rd_hi, x24, x3, 0x0000000000000000, $correctval_hi, 0xfffb0008c0000400, 0x8000ffbff7fffff8, x15, 128, x21)

inst_9:
// rs1==x0, rs2==x4, rd==x20, rs2_h3_val == 21845, rs2_h1_val == -3, rs1_h1_val == -16385, rs2_h2_val == 1024, rs1_h2_val == -3, rs1_h0_val == -513
// opcode: smulx16 ; op1:x0; op2:x4; dest:x20; op1val:0xfffcfffdbffffdff;  op2val:0x55550400fffdfff8
TEST_P64_PNN_OP(smulx16, x20, $rd_hi, x0, x4, 0x0000000000000000, $correctval_hi, 0xfffcfffdbffffdff, 0x55550400fffdfff8, x15, 144, x21)

inst_10:
// rs1==x7, rs2==x24, rd==x14, rs2_h3_val == 32767, rs1_h2_val == 4096, rs2_h2_val == 8, rs1_h0_val == 256, rs2_h0_val == 0
// opcode: smulx16 ; op1:x7; op2:x24; dest:x14; op1val:0x00071000c0000100;  op2val:0x7fff000820000000
TEST_P64_PNN_OP(smulx16, x14, $rd_hi, x7, x24, 0x0000000000000000, $correctval_hi, 0x00071000c0000100, 0x7fff000820000000, x15, 160, x21)

inst_11:
// rs1==x25, rs2==x11, rd==x12, rs2_h3_val == -16385, rs1_h0_val == 32, rs2_h2_val == 0
// opcode: smulx16 ; op1:x25; op2:x11; dest:x12; op1val:0xfff63fff00070020;  op2val:0xbfff0000f7ff3fff
TEST_P64_PNN_OP(smulx16, x12, $rd_hi, x25, x11, 0x0000000000000000, $correctval_hi, 0xfff63fff00070020, 0xbfff0000f7ff3fff, x15, 176, x21)

inst_12:
// rs1==x20, rs2==x0, rd==x24, rs2_h3_val == -8193, rs2_h0_val == 16, rs2_h2_val == -129, rs2_h1_val == -1025, rs1_h0_val == 64, rs1_h1_val == 32767, rs1_h3_val == -3
// opcode: smulx16 ; op1:x20; op2:x0; dest:x24; op1val:0xfffdfffc7fff0040;  op2val:0xdfffff7ffbff0010
TEST_P64_PNN_OP(smulx16, x24, $rd_hi, x20, x0, 0x0000000000000000, $correctval_hi, 0xfffdfffc7fff0040, 0xdfffff7ffbff0010, x15, 192, x21)

inst_13:
// rs1==x14, rs2==x7, rd==x30, rs2_h3_val == -4097, rs2_h1_val == 21845, rs2_h2_val == -513, rs1_h3_val == 32767, rs1_h0_val == 512, rs1_h1_val == 4, rs1_h2_val == -33
// opcode: smulx16 ; op1:x14; op2:x7; dest:x30; op1val:0x7fffffdf00040200;  op2val:0xeffffdff55550010
TEST_P64_PNN_OP(smulx16, x30, $rd_hi, x14, x7, 0x0000000000000000, $correctval_hi, 0x7fffffdf00040200, 0xeffffdff55550010, x15, 208, x21)

inst_14:
// rs1==x23, rs2==x1, rd==x28, rs2_h3_val == -2049, rs1_h0_val == 16384, rs2_h2_val == 512, rs1_h2_val == -2, rs1_h3_val == 8192
// opcode: smulx16 ; op1:x23; op2:x1; dest:x28; op1val:0x2000fffefffd4000;  op2val:0xf7ff02003ffffff6
TEST_P64_PNN_OP(smulx16, x28, $rd_hi, x23, x1, 0x0000000000000000, $correctval_hi, 0x2000fffefffd4000, 0xf7ff02003ffffff6, x15, 224, x21)
RVTEST_SIGBASE(x20,signature_x20_0)

inst_15:
// rs1==x15, rs2==x10, rs2_h3_val == -1025, rs1_h0_val == 16, rs1_h3_val == -2049
// opcode: smulx16 ; op1:x15; op2:x10; dest:x30; op1val:0xf7ff000840000010;  op2val:0xfbfffdffdfffc000
TEST_P64_PNN_OP(smulx16, x30, $rd_hi, x15, x10, 0x0000000000000000, $correctval_hi, 0xf7ff000840000010, 0xfbfffdffdfffc000, x20, 0, x13)

inst_16:
// rs1==x11, rs2==x15, rs2_h3_val == -513, rs2_h2_val == 8192, rs1_h3_val == -129, rs2_h1_val == 32
// opcode: smulx16 ; op1:x11; op2:x15; dest:x18; op1val:0xff7ffff83fff0009;  op2val:0xfdff200000200005
TEST_P64_PNN_OP(smulx16, x18, $rd_hi, x11, x15, 0x0000000000000000, $correctval_hi, 0xff7ffff83fff0009, 0xfdff200000200005, x20, 16, x13)

inst_17:
// rs1==x1, rs2==x22, rs2_h3_val == -257, rs1_h0_val == -65, rs2_h1_val == 0, rs2_h0_val == -2, rs2_h2_val == 128, rs1_h1_val == -33
// opcode: smulx16 ; op1:x1; op2:x22; dest:x3; op1val:0xfff90003ffdfffbf;  op2val:0xfeff00800000fffe
TEST_P64_PNN_OP(smulx16, x3, $rd_hi, x1, x22, 0x0000000000000000, $correctval_hi, 0xfff90003ffdfffbf, 0xfeff00800000fffe, x20, 32, x13)

inst_18:
// rs1==x3, rs2==x19, rs2_h3_val == -129, rs1_h1_val == -5, rs2_h1_val == 32767, rs1_h3_val == 32, rs1_h2_val == -1, rs2_h2_val == 21845
// opcode: smulx16 ; op1:x3; op2:x19; dest:x10; op1val:0x0020fffffffbfffc;  op2val:0xff7f55557ffffff8
TEST_P64_PNN_OP(smulx16, x10, $rd_hi, x3, x19, 0x0000000000000000, $correctval_hi, 0x0020fffffffbfffc, 0xff7f55557ffffff8, x20, 48, x13)

inst_19:
// rs1==x8, rs2==x23, rs2_h3_val == -65, rs2_h0_val == -4097
// opcode: smulx16 ; op1:x8; op2:x23; dest:x2; op1val:0x0007fff9fff6fdff;  op2val:0xffbf00067fffefff
TEST_P64_PNN_OP(smulx16, x2, $rd_hi, x8, x23, 0x0000000000000000, $correctval_hi, 0x0007fff9fff6fdff, 0xffbf00067fffefff, x20, 64, x13)

inst_20:
// rs1==x12, rs2==x29, rs2_h3_val == -9, rs2_h2_val == -2049, rs1_h2_val == 21845, rs2_h1_val == -9, rs1_h0_val == -8193, rs1_h1_val == -17
// opcode: smulx16 ; op1:x12; op2:x29; dest:x17; op1val:0xfffc5555ffefdfff;  op2val:0xfff7f7fffff7fffc
TEST_P64_PNN_OP(smulx16, x17, $rd_hi, x12, x29, 0x0000000000000000, $correctval_hi, 0xfffc5555ffefdfff, 0xfff7f7fffff7fffc, x20, 80, x13)

inst_21:
// rs1==x6, rs2==x16, rs2_h3_val == -5, rs1_h2_val == 4, rs1_h3_val == -9, rs2_h0_val == 4096, rs1_h0_val == -2049, rs2_h2_val == 2
// opcode: smulx16 ; op1:x6; op2:x16; dest:x5; op1val:0xfff70004fffdf7ff;  op2val:0xfffb0002fff71000
TEST_P64_PNN_OP(smulx16, x5, $rd_hi, x6, x16, 0x0000000000000000, $correctval_hi, 0xfff70004fffdf7ff, 0xfffb0002fff71000, x20, 96, x13)

inst_22:
// rs1==x4, rs2==x18, rs2_h3_val == -3, rs1_h0_val == 128, rs2_h2_val == -257
// opcode: smulx16 ; op1:x4; op2:x18; dest:x23; op1val:0xfff9000402000080;  op2val:0xfffdfeff00200007
TEST_P64_PNN_OP(smulx16, x23, $rd_hi, x4, x18, 0x0000000000000000, $correctval_hi, 0xfff9000402000080, 0xfffdfeff00200007, x20, 112, x13)

inst_23:
// rs1==x27, rs2==x30, rs2_h3_val == -2, rs1_h3_val == 4, rs2_h2_val == -9, rs2_h0_val == 256
// opcode: smulx16 ; op1:x27; op2:x30; dest:x26; op1val:0x0004ffdf00040020;  op2val:0xfffefff704000100
TEST_P64_PNN_OP(smulx16, x26, $rd_hi, x27, x30, 0x0000000000000000, $correctval_hi, 0x0004ffdf00040020, 0xfffefff704000100, x20, 128, x13)

inst_24:
// rs1==x21, rs2==x12, rs2_h3_val == 16384, rs1_h3_val == -8193, rs2_h2_val == 16384, rs1_h0_val == 2, rs1_h2_val == -513, rs2_h1_val == 8
// opcode: smulx16 ; op1:x21; op2:x12; dest:x7; op1val:0xdffffdff7fff0002;  op2val:0x400040000008fff8
TEST_P64_PNN_OP(smulx16, x7, $rd_hi, x21, x12, 0x0000000000000000, $correctval_hi, 0xdffffdff7fff0002, 0x400040000008fff8, x20, 144, x13)

inst_25:
// rs1==x10, rs2==x8, rs2_h3_val == 8192, rs1_h1_val == 0, rs1_h2_val == -4097, rs1_h3_val == 0, rs2_h2_val == 256
// opcode: smulx16 ; op1:x10; op2:x8; dest:x30; op1val:0x0000efff00000100;  op2val:0x20000100fffa0000
TEST_P64_PNN_OP(smulx16, x30, $rd_hi, x10, x8, 0x0000000000000000, $correctval_hi, 0x0000efff00000100, 0x20000100fffa0000, x20, 160, x13)

inst_26:
// rs1==x31, rs2==x21, rs2_h3_val == 2048, rs2_h2_val == 2048, rs1_h2_val == 1
// opcode: smulx16 ; op1:x31; op2:x21; dest:x26; op1val:0x000600013fff0100;  op2val:0x0800080055553fff
TEST_P64_PNN_OP(smulx16, x26, $rd_hi, x31, x21, 0x0000000000000000, $correctval_hi, 0x000600013fff0100, 0x0800080055553fff, x20, 176, x13)

inst_27:
// rs1==x9, rs2==x5, rs2_h3_val == 512, rs1_h2_val == -1025, rs1_h1_val == 16, rs1_h0_val == 21845
// opcode: smulx16 ; op1:x9; op2:x5; dest:x29; op1val:0xfffdfbff00105555;  op2val:0x02000800fff8fffc
TEST_P64_PNN_OP(smulx16, x29, $rd_hi, x9, x5, 0x0000000000000000, $correctval_hi, 0xfffdfbff00105555, 0x02000800fff8fffc, x20, 192, x13)

inst_28:
// rs1==x22, rs2==x14, rs2_h3_val == 128, 
// opcode: smulx16 ; op1:x22; op2:x14; dest:x19; op1val:0x0001effffffb0020;  op2val:0x008000082000efff
TEST_P64_PNN_OP(smulx16, x19, $rd_hi, x22, x14, 0x0000000000000000, $correctval_hi, 0x0001effffffb0020, 0x008000082000efff, x20, 208, x13)

inst_29:
// rs1==x13, rs2==x25, rs2_h3_val == 64, rs2_h2_val == -33, rs1_h3_val == 512
// opcode: smulx16 ; op1:x13; op2:x25; dest:x5; op1val:0x02000007bfff0004;  op2val:0x0040ffdfc0000006
TEST_P64_PNN_OP(smulx16, x5, $rd_hi, x13, x25, 0x0000000000000000, $correctval_hi, 0x02000007bfff0004, 0x0040ffdfc0000006, x20, 224, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x18, rs2==x31, rs2_h3_val == 32, rs2_h1_val == -257, rs2_h0_val == -2049
// opcode: smulx16 ; op1:x18; op2:x31; dest:x29; op1val:0xfff6efff02000080;  op2val:0x00203ffffefff7ff
TEST_P64_PNN_OP(smulx16, x29, $rd_hi, x18, x31, 0x0000000000000000, $correctval_hi, 0xfff6efff02000080, 0x00203ffffefff7ff, x1, 0, x2)

inst_31:
// rs1==x29, rs2==x26, rs2_h3_val == 16, rs1_h0_val == -2, rs1_h2_val == -5, rs2_h0_val == -257
// opcode: smulx16 ; op1:x29; op2:x26; dest:x20; op1val:0x0007fffbfff9fffe;  op2val:0x00102000fffdfeff
TEST_P64_PNN_OP(smulx16, x20, $rd_hi, x29, x26, 0x0000000000000000, $correctval_hi, 0x0007fffbfff9fffe, 0x00102000fffdfeff, x1, 16, x2)

inst_32:
// rs2_h3_val == 8, rs2_h0_val == -1, rs1_h0_val == -4097
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x00200009fff9efff;  op2val:0x0008ff7f0006ffff
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00200009fff9efff, 0x0008ff7f0006ffff, x1, 32, x2)

inst_33:
// rs2_h3_val == 4, rs1_h2_val == 8192, rs2_h1_val == -32768, rs1_h0_val == -5
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x00012000c000fffb;  op2val:0x0004fff78000aaaa
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00012000c000fffb, 0x0004fff78000aaaa, x1, 48, x2)

inst_34:
// rs2_h3_val == 2, rs1_h2_val == 16, rs1_h3_val == -1, rs2_h0_val == 512, rs1_h0_val == 32767
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0010fff67fff;  op2val:0x0002c00000050200
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff0010fff67fff, 0x0002c00000050200, x1, 64, x2)

inst_35:
// rs2_h3_val == 1, rs1_h3_val == -21846, rs1_h1_val == 128, rs2_h0_val == -1025, rs1_h2_val == 0
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa00000080dfff;  op2val:0x0001fff60007fbff
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaa00000080dfff, 0x0001fff60007fbff, x1, 80, x2)

inst_36:
// rs2_h3_val == 0, rs1_h3_val == -257, rs1_h1_val == 4096, rs1_h0_val == -129
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffc0001000ff7f;  op2val:0x00000800fff80007
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeffc0001000ff7f, 0x00000800fff80007, x1, 96, x2)

inst_37:
// rs1_h1_val == -2, rs2_h1_val == 16
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbc000fffefffa;  op2val:0x1000fffc00100000
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffbc000fffefffa, 0x1000fffc00100000, x1, 112, x2)

inst_38:
// rs1_h1_val == -32768, rs2_h1_val == -2, rs1_h3_val == 16384, rs2_h0_val == 4, rs1_h0_val == 1
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000080000001;  op2val:0x0008ff7ffffe0004
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x4000000080000001, 0x0008ff7ffffe0004, x1, 128, x2)

inst_39:
// rs1_h1_val == 2048, rs1_h0_val == 2048, rs1_h3_val == 128
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0080555508000800;  op2val:0x0010dfff0005fff8
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080555508000800, 0x0010dfff0005fff8, x1, 144, x2)

inst_40:
// rs1_h1_val == 1024, rs2_h0_val == -513
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x00093fff04000200;  op2val:0x0003dffffffefdff
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00093fff04000200, 0x0003dffffffefdff, x1, 160, x2)

inst_41:
// rs1_h1_val == 256, rs2_h1_val == -65, rs1_h2_val == 512
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x000102000100efff;  op2val:0xffbf5555ffbf3fff
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000102000100efff, 0xffbf5555ffbf3fff, x1, 176, x2)

inst_42:
// rs1_h1_val == 64, rs2_h0_val == 8
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffe0040ff7f;  op2val:0x0000fff6fffc0008
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7fffe0040ff7f, 0x0000fff6fffc0008, x1, 192, x2)

inst_43:
// rs1_h1_val == 8, rs1_h3_val == -1025, rs1_h0_val == -33, rs2_h1_val == 2048
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff02000008ffdf;  op2val:0xf7ff000008000005
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbff02000008ffdf, 0xf7ff000008000005, x1, 208, x2)

inst_44:
// rs1_h1_val == 2, rs1_h3_val == 2048, rs2_h2_val == -32768
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x08003fff00020001;  op2val:0xbfff8000fff90007
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x08003fff00020001, 0xbfff8000fff90007, x1, 224, x2)

inst_45:
// rs1_h1_val == 1, rs1_h3_val == -65
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbff7ff0001efff;  op2val:0xfefffff73ffffdff
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbff7ff0001efff, 0xfefffff73ffffdff, x1, 240, x2)

inst_46:
// rs1_h1_val == -1, rs1_h0_val == 8192, rs2_h2_val == -17
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff6ffff2000;  op2val:0x0080ffeffffefffc
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbffff6ffff2000, 0x0080ffeffffefffc, x1, 256, x2)

inst_47:
// rs1_h0_val == -16385, rs1_h1_val == -129, rs1_h3_val == 4096, rs1_h2_val == 256
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000100ff7fbfff;  op2val:0x2000fffcfffcfffa
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x10000100ff7fbfff, 0x2000fffcfffcfffa, x1, 272, x2)

inst_48:
// rs1_h0_val == -1025, rs2_h2_val == 16, rs1_h2_val == 32767
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe7ffffffefbff;  op2val:0x00100010c0000000
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffe7ffffffefbff, 0x00100010c0000000, x1, 288, x2)

inst_49:
// rs1_h0_val == -257, rs2_h2_val == 4096, rs1_h2_val == 1024
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x000504000020feff;  op2val:0x00201000fffd0000
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000504000020feff, 0x00201000fffd0000, x1, 304, x2)

inst_50:
// rs1_h0_val == -17, rs2_h1_val == -1, rs2_h2_val == 4
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffec000ff7fffef;  op2val:0x00080004ffffefff
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffec000ff7fffef, 0x00080004ffffefff, x1, 320, x2)

inst_51:
// rs1_h0_val == -9, rs1_h2_val == 16384, rs2_h0_val == -33, rs1_h3_val == 2, rs2_h1_val == 4096
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x000240000003fff7;  op2val:0xfffc00071000ffdf
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000240000003fff7, 0xfffc00071000ffdf, x1, 336, x2)

inst_52:
// rs1_h0_val == -3, rs1_h2_val == -8193, rs2_h0_val == 128
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0004dfff0008fffd;  op2val:0x5555fff8fffe0080
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0004dfff0008fffd, 0x5555fff8fffe0080, x1, 352, x2)

inst_53:
// rs1_h0_val == 4096, rs1_h3_val == -513, rs1_h1_val == -2049, rs2_h0_val == -32768
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffff7ff1000;  op2val:0x0400fffbfffc8000
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdfffffff7ff1000, 0x0400fffbfffc8000, x1, 368, x2)

inst_54:
// rs1_h0_val == 8, rs2_h2_val == -1, rs1_h1_val == -8193
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x02000005dfff0008;  op2val:0x0007fffffff9fffc
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x02000005dfff0008, 0x0007fffffff9fffc, x1, 384, x2)

inst_55:
// rs1_h0_val == -1, rs2_h1_val == 64
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff02000006ffff;  op2val:0x004002000040ffdf
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ff02000006ffff, 0x004002000040ffdf, x1, 400, x2)

inst_56:
// rs2_h2_val == -21846, rs1_h3_val == -17
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffef0001fffc;  op2val:0xfff9aaaa00000008
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffefffef0001fffc, 0xfff9aaaa00000008, x1, 416, x2)

inst_57:
// rs2_h1_val == 4, rs1_h2_val == -16385, rs2_h0_val == 32
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000bfffffff0200;  op2val:0xfffe001000040020
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000bfffffff0200, 0xfffe001000040020, x1, 432, x2)

inst_58:
// rs2_h1_val == 2, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfdfff00800006;  op2val:0xfff9000700020007
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdfdfff00800006, 0xfff9000700020007, x1, 448, x2)

inst_59:
// rs2_h1_val == 1, rs1_h3_val == 21845
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555001000104000;  op2val:0xfffe00090001fdff
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x5555001000104000, 0xfffe00090001fdff, x1, 464, x2)

inst_60:
// rs2_h0_val == 32767, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x00050010fffb0020;  op2val:0x0010ffdf10007fff
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00050010fffb0020, 0x0010ffdf10007fff, x1, 480, x2)

inst_61:
// rs2_h0_val == -16385, rs2_h2_val == 32767
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0001bfff0080fbff;  op2val:0x02007fff1000bfff
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001bfff0080fbff, 0x02007fff1000bfff, x1, 496, x2)

inst_62:
// rs2_h0_val == -8193, rs1_h2_val == 32
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0020ffeffff7;  op2val:0xfff7ffff0010dfff
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3fff0020ffeffff7, 0xfff7ffff0010dfff, x1, 512, x2)

inst_63:
// rs2_h0_val == -129, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0002dffffffdc000;  op2val:0xff7ffdfffffeff7f
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0002dffffffdc000, 0xff7ffdfffffeff7f, x1, 528, x2)

inst_64:
// rs2_h0_val == -65, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0007ffef40000080;  op2val:0x02007fff0010ffbf
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0007ffef40000080, 0x02007fff0010ffbf, x1, 544, x2)

inst_65:
// rs2_h0_val == -17, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0007fffc0000fff8;  op2val:0xfbff2000fff6ffef
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0007fffc0000fff8, 0xfbff2000fff6ffef, x1, 560, x2)

inst_66:
// rs2_h0_val == -9, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff83fff40001000;  op2val:0xdffffff90000fff7
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff83fff40001000, 0xdffffff90000fff7, x1, 576, x2)

inst_67:
// rs2_h0_val == -5, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x000300077fffefff;  op2val:0xff7fdfff7ffffffb
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000300077fffefff, 0xff7fdfff7ffffffb, x1, 592, x2)

inst_68:
// rs2_h0_val == 16384, rs2_h1_val == 512
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb1000fffd;  op2val:0xc000100002004000
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffb1000fffd, 0xc000100002004000, x1, 608, x2)

inst_69:
// rs2_h0_val == 8192, rs2_h1_val == -33
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0006000500020100;  op2val:0xdfff2000ffdf2000
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0006000500020100, 0xdfff2000ffdf2000, x1, 624, x2)

inst_70:
// rs2_h0_val == 2048, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffcfffafdff;  op2val:0x0040ffff00080800
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffeffffcfffafdff, 0x0040ffff00080800, x1, 640, x2)

inst_71:
// rs2_h0_val == 1024, rs2_h2_val == -4097
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000fffbfff80002;  op2val:0xfffeefff00010400
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xc000fffbfff80002, 0xfffeefff00010400, x1, 656, x2)

inst_72:
// rs2_h0_val == 1, rs1_h2_val == 64, rs2_h1_val == -21846, rs1_h1_val == -9
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff90040fff75555;  op2val:0x00028000aaaa0001
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff90040fff75555, 0x00028000aaaa0001, x1, 672, x2)

inst_73:
// rs1_h3_val == -16385, rs2_h2_val == 64
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffbfff80000200;  op2val:0x00080040f7ff0100
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbfffbfff80000200, 0x00080040f7ff0100, x1, 688, x2)

inst_74:
// rs1_h3_val == -4097, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0200fffe7fff;  op2val:0xf7ffeffffeff8000
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefff0200fffe7fff, 0xf7ffeffffeff8000, x1, 704, x2)

inst_75:
// rs2_h2_val == -16385, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0003bffffffcdfff;  op2val:0xfeffbfff0001fffb
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0003bffffffcdfff, 0xfeffbfff0001fffb, x1, 720, x2)

inst_76:
// rs1_h3_val == 256, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0100020000000009;  op2val:0xffdfffeff7ff0010
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0100020000000009, 0xffdfffeff7ff0010, x1, 736, x2)

inst_77:
// rs1_h3_val == 64, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0040c000ffff0003;  op2val:0xfffe000200200080
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040c000ffff0003, 0xfffe000200200080, x1, 752, x2)

inst_78:
// rs1_h3_val == 16, rs1_h2_val == -21846
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0010aaaa00100005;  op2val:0xc0000200fffbffbf
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0010aaaa00100005, 0xc0000200fffbffbf, x1, 768, x2)

inst_79:
// rs1_h3_val == 8, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0008ffff0008bfff;  op2val:0x00805555ffff2000
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0008ffff0008bfff, 0x00805555ffff2000, x1, 784, x2)

inst_80:
// rs2_h2_val == -3, rs1_h1_val == -513
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0003effffdff0400;  op2val:0xff7ffffd0001ffff
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0003effffdff0400, 0xff7ffffd0001ffff, x1, 800, x2)

inst_81:
// rs2_h2_val == -2, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0007fffa0000ff7f;  op2val:0xfbfffffe1000fffd
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0007fffa0000ff7f, 0xfbfffffe1000fffd, x1, 816, x2)

inst_82:
// rs1_h2_val == -257, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0400feff00030010;  op2val:0x2000c000fff8ffdf
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0400feff00030010, 0x2000c000fff8ffdf, x1, 832, x2)

inst_83:
// rs1_h2_val == -129, rs1_h1_val == -1025
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0010ff7ffbffffff;  op2val:0xfff77fff00060020
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0010ff7ffbffffff, 0xfff77fff00060020, x1, 848, x2)

inst_84:
// rs1_h2_val == -65, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffbf00010020;  op2val:0xffeffdff20000001
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000ffbf00010020, 0xffeffdff20000001, x1, 864, x2)

inst_85:
// rs2_h2_val == 32, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffbffeffff9;  op2val:0xfff70020aaaafbff
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfefffffbffeffff9, 0xfff70020aaaafbff, x1, 880, x2)

inst_86:
// rs1_h2_val == -9, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0400fff700090006;  op2val:0xfffcdffffbffffdf
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0400fff700090006, 0xfffcdffffbffffdf, x1, 896, x2)

inst_87:
// rs2_h2_val == 1, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0001fffa04000010;  op2val:0x800000010003f7ff
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001fffa04000010, 0x800000010003f7ff, x1, 912, x2)

inst_88:
// rs1_h2_val == 2048, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0800fff8fdff;  op2val:0x7fff0200dfff0008
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeff0800fff8fdff, 0x7fff0200dfff0008, x1, 928, x2)

inst_89:
// rs2_h1_val == -16385, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffdfff02000008;  op2val:0x4000fdffbfff0400
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3fffdfff02000008, 0x4000fdffbfff0400, x1, 944, x2)

inst_90:
// rs2_h1_val == -4097, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffbfffbdfff;  op2val:0xfffadfffefffffef
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000fffbfffbdfff, 0xfffadfffefffffef, x1, 960, x2)

inst_91:
// rs1_h2_val == 128, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x00400080f7ff0001;  op2val:0xdffffffbfff60008
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00400080f7ff0001, 0xdffffffbfff60008, x1, 976, x2)

inst_92:
// rs2_h1_val == -513, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0008fff60002;  op2val:0x00000001fdfffff8
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3fff0008fff60002, 0x00000001fdfffff8, x1, 992, x2)

inst_93:
// rs2_h1_val == -129, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0400fffbffef0007;  op2val:0x04000010ff7f0008
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0400fffbffef0007, 0x04000010ff7f0008, x1, 1008, x2)

inst_94:
// rs1_h2_val == 2, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555000200200400;  op2val:0x000700043fffbfff
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x5555000200200400, 0x000700043fffbfff, x1, 1024, x2)

inst_95:
// rs2_h1_val == -17, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffdfff7f0400;  op2val:0x00800007ffefaaaa
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffeffdfff7f0400, 0x00800007ffefaaaa, x1, 1040, x2)

inst_96:
// rs1_h1_val == -21846, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0001aaaabfff;  op2val:0x0800fbffffefffef
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7f0001aaaabfff, 0x0800fbffffefffef, x1, 1056, x2)

inst_97:
// rs1_h1_val == 21845, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000155550010;  op2val:0x0002fff6fff9c000
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ff000155550010, 0x0002fff6fff9c000, x1, 1072, x2)

inst_98:
// rs2_h1_val == 16384, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x00400200fffafff6;  op2val:0xfffa200040000100
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00400200fffafff6, 0xfffa200040000100, x1, 1088, x2)

inst_99:
// rs2_h1_val == 128, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffbfffff7faaaa;  op2val:0xfffef7ff0080c000
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdffbfffff7faaaa, 0xfffef7ff0080c000, x1, 1104, x2)

inst_100:
// rs1_h1_val == -65, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x00000003ffbf0400;  op2val:0x000100100400fffb
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000003ffbf0400, 0x000100100400fffb, x1, 1120, x2)

inst_101:
// rs1_h1_val == -4097, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffcefff2000;  op2val:0x0002080000200100
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7ffffcefff2000, 0x0002080000200100, x1, 1136, x2)

inst_102:
// rs1_h2_val == -32768, 
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef80003fff0004;  op2val:0x08000002f7ff0020
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffef80003fff0004, 0x08000002f7ff0020, x1, 1152, x2)

inst_103:
// rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h1_val == 16384, rs2_h0_val == 21845, rs2_h3_val == -17, rs1_h3_val == -2, rs1_h0_val == 4, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == -17
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffef40000004;  op2val:0xffeffffa3fff5555
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffeffef40000004, 0xffeffffa3fff5555, x1, 1168, x2)

inst_104:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == -8193, rs2_h2_val == -5, rs1_h1_val == 32, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val == -2049, rs1_h0_val == 0, rs2_h3_val == -1
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0x0006f7ff00200000;  op2val:0xfffffffbdfff0009
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0006f7ff00200000, 0xfffffffbdfff0009, x1, 1184, x2)

inst_105:
// rs2_h3_val == 21845, rs2_h1_val == -3, rs1_h1_val == -16385, rs2_h2_val == 1024, rs1_h2_val == -3, rs1_h0_val == -513
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffdbffffdff;  op2val:0x55550400fffdfff8
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffcfffdbffffdff, 0x55550400fffdfff8, x1, 1200, x2)

inst_106:
// rs2_h3_val == -8193, rs2_h0_val == 16, rs2_h2_val == -129, rs2_h1_val == -1025, rs1_h0_val == 64, rs1_h1_val == 32767, rs1_h3_val == -3
// opcode: smulx16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffc7fff0040;  op2val:0xdfffff7ffbff0010
TEST_P64_PNN_OP(smulx16, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffdfffc7fff0040, 0xdfffff7ffbff0010, x1, 1216, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x20_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 154*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
