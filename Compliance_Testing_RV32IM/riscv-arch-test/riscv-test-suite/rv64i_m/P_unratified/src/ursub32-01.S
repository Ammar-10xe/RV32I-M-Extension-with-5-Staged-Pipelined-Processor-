
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ursub32 instruction of the RISC-V RV64PZicsr extension for the ursub32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ursub32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rd != rs2, rs1==x30, rs2==x26, rd==x30, rs1_w0_val == 0, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w0_val == 2097152, rs1_w1_val == 8388608, rs2_w1_val == 128
// opcode: ursub32 ; op1:x30; op2:x26; dest:x30; op1val:0x80000000000000;  op2val:0x00008000200000
TEST_RR_OP(ursub32, x30, x30, x26, 0x0000000000000000, 0x80000000000000, 0x00008000200000, x3, 0, x6)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x0, rs2==x13, rd==x26, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 128, rs1_w0_val == 2147483648
// opcode: ursub32 ; op1:x0; op2:x13; dest:x26; op1val:0x00000380000000;  op2val:0x00000300000080
TEST_RR_OP(ursub32, x26, x0, x13, 0x0000000000000000, 0x00000380000000, 0x00000300000080, x3, 8, x6)

inst_2:
// rs1 == rs2 != rd, rs1==x11, rs2==x11, rd==x13, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 268435456, rs1_w1_val == 4160749567, rs2_w0_val == 4194304, rs1_w0_val == 4194304
// opcode: ursub32 ; op1:x11; op2:x11; dest:x13; op1val:0xf7ffffff00400000;  op2val:0x1000000000400000
TEST_RR_OP(ursub32, x13, x11, x11, 0x0000000000000000, 0xf7ffffff00400000, 0x1000000000400000, x3, 16, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x27, rs2==x27, rd==x27, rs2_w1_val == 2863311530, rs1_w0_val == 32768, rs2_w0_val == 131072, rs1_w1_val == 536870912
// opcode: ursub32 ; op1:x27; op2:x27; dest:x27; op1val:0x2000000000008000;  op2val:0xaaaaaaaa00020000
TEST_RR_OP(ursub32, x27, x27, x27, 0x0000000000000000, 0x2000000000008000, 0xaaaaaaaa00020000, x3, 24, x6)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x22, rd==x22, rs2_w1_val == 1431655765, rs1_w0_val == 4294966271, rs1_w1_val == 4294963199
// opcode: ursub32 ; op1:x5; op2:x22; dest:x22; op1val:0xffffeffffffffbff;  op2val:0x5555555500200000
TEST_RR_OP(ursub32, x22, x5, x22, 0x0000000000000000, 0xffffeffffffffbff, 0x5555555500200000, x3, 32, x6)

inst_5:
// rs1==x4, rs2==x19, rd==x23, rs2_w1_val == 2147483647, rs2_w0_val == 33554432
// opcode: ursub32 ; op1:x4; op2:x19; dest:x23; op1val:0x00000600000006;  op2val:0x7fffffff02000000
TEST_RR_OP(ursub32, x23, x4, x19, 0x0000000000000000, 0x00000600000006, 0x7fffffff02000000, x3, 40, x6)

inst_6:
// rs1==x2, rs2==x30, rd==x15, rs2_w1_val == 3221225471, rs2_w0_val == 4278190079, rs1_w0_val == 32, rs1_w1_val == 2863311530
// opcode: ursub32 ; op1:x2; op2:x30; dest:x15; op1val:0xaaaaaaaa00000020;  op2val:0xbffffffffeffffff
TEST_RR_OP(ursub32, x15, x2, x30, 0x0000000000000000, 0xaaaaaaaa00000020, 0xbffffffffeffffff, x3, 48, x6)

inst_7:
// rs1==x28, rs2==x25, rd==x24, rs2_w1_val == 3758096383, rs1_w1_val == 4294966271, rs1_w0_val == 64, rs2_w0_val == 1048576
// opcode: ursub32 ; op1:x28; op2:x25; dest:x24; op1val:0xfffffbff00000040;  op2val:0xdfffffff00100000
TEST_RR_OP(ursub32, x24, x28, x25, 0x0000000000000000, 0xfffffbff00000040, 0xdfffffff00100000, x3, 56, x6)

inst_8:
// rs1==x19, rs2==x14, rd==x12, rs2_w1_val == 4026531839, rs2_w0_val == 4294836223, rs1_w0_val == 4290772991
// opcode: ursub32 ; op1:x19; op2:x14; dest:x12; op1val:0x00000affbfffff;  op2val:0xeffffffffffdffff
TEST_RR_OP(ursub32, x12, x19, x14, 0x0000000000000000, 0x00000affbfffff, 0xeffffffffffdffff, x3, 64, x6)

inst_9:
// rs1==x22, rs2==x17, rd==x1, rs2_w1_val == 4160749567, rs1_w1_val == 4294967039
// opcode: ursub32 ; op1:x22; op2:x17; dest:x1; op1val:0xfffffeff00000006;  op2val:0xf7ffffff00000012
TEST_RR_OP(ursub32, x1, x22, x17, 0x0000000000000000, 0xfffffeff00000006, 0xf7ffffff00000012, x3, 72, x6)

inst_10:
// rs1==x20, rs2==x7, rd==x14, rs2_w1_val == 4227858431, rs1_w1_val == 1024
// opcode: ursub32 ; op1:x20; op2:x7; dest:x14; op1val:0x00040000008000;  op2val:0xfbffffff00020000
TEST_RR_OP(ursub32, x14, x20, x7, 0x0000000000000000, 0x00040000008000, 0xfbffffff00020000, x3, 80, x6)

inst_11:
// rs1==x12, rs2==x24, rd==x28, rs2_w1_val == 4261412863, rs1_w1_val == 4026531839, rs1_w0_val == 8388608, rs2_w0_val == 32
// opcode: ursub32 ; op1:x12; op2:x24; dest:x28; op1val:0xefffffff00800000;  op2val:0xfdffffff00000020
TEST_RR_OP(ursub32, x28, x12, x24, 0x0000000000000000, 0xefffffff00800000, 0xfdffffff00000020, x3, 88, x6)

inst_12:
// rs1==x8, rs2==x12, rd==x31, rs2_w1_val == 4278190079, rs2_w0_val == 4294967039, rs1_w1_val == 16777216, rs1_w0_val == 4294965247
// opcode: ursub32 ; op1:x8; op2:x12; dest:x31; op1val:0x1000000fffff7ff;  op2val:0xfefffffffffffeff
TEST_RR_OP(ursub32, x31, x8, x12, 0x0000000000000000, 0x1000000fffff7ff, 0xfefffffffffffeff, x3, 96, x6)

inst_13:
// rs1==x23, rs2==x29, rd==x25, rs2_w1_val == 4286578687, rs1_w0_val == 67108864, rs2_w0_val == 4293918719
// opcode: ursub32 ; op1:x23; op2:x29; dest:x25; op1val:0x2000000004000000;  op2val:0xff7fffffffefffff
TEST_RR_OP(ursub32, x25, x23, x29, 0x0000000000000000, 0x2000000004000000, 0xff7fffffffefffff, x3, 104, x6)

inst_14:
// rs1==x16, rs2==x1, rd==x11, rs2_w1_val == 4290772991, rs2_w0_val == 536870912, rs1_w1_val == 1
// opcode: ursub32 ; op1:x16; op2:x1; dest:x11; op1val:0x00000100000040;  op2val:0xffbfffff20000000
TEST_RR_OP(ursub32, x11, x16, x1, 0x0000000000000000, 0x00000100000040, 0xffbfffff20000000, x3, 112, x6)

inst_15:
// rs1==x10, rs2==x4, rd==x21, rs2_w1_val == 4292870143, 
// opcode: ursub32 ; op1:x10; op2:x4; dest:x21; op1val:0x00000300000000;  op2val:0xffdfffff0000000c
TEST_RR_OP(ursub32, x21, x10, x4, 0x0000000000000000, 0x00000300000000, 0xffdfffff0000000c, x3, 120, x6)
RVTEST_SIGBASE(x11,signature_x11_0)

inst_16:
// rs1==x9, rs2==x3, rd==x18, rs2_w1_val == 4293918719, 
// opcode: ursub32 ; op1:x9; op2:x3; dest:x18; op1val:0x00000c00000000;  op2val:0xffeffffffffffeff
TEST_RR_OP(ursub32, x18, x9, x3, 0x0000000000000000, 0x00000c00000000, 0xffeffffffffffeff, x11, 0, x12)

inst_17:
// rs1==x15, rs2==x23, rd==x2, rs2_w1_val == 4294443007, rs1_w1_val == 262144, rs2_w0_val == 4292870143
// opcode: ursub32 ; op1:x15; op2:x23; dest:x2; op1val:0x0400000000000b;  op2val:0xfff7ffffffdfffff
TEST_RR_OP(ursub32, x2, x15, x23, 0x0000000000000000, 0x0400000000000b, 0xfff7ffffffdfffff, x11, 8, x12)

inst_18:
// rs1==x7, rs2==x6, rd==x10, rs2_w1_val == 4294705151, rs1_w0_val == 4294967295
// opcode: ursub32 ; op1:x7; op2:x6; dest:x10; op1val:0xfffffeffffffffff;  op2val:0xfffbffff00000009
TEST_RR_OP(ursub32, x10, x7, x6, 0x0000000000000000, 0xfffffeffffffffff, 0xfffbffff00000009, x11, 16, x12)

inst_19:
// rs1==x14, rs2==x0, rd==x20, rs2_w1_val == 4294836223, rs1_w0_val == 512, rs1_w1_val == 134217728
// opcode: ursub32 ; op1:x14; op2:x0; dest:x20; op1val:0x800000000000200;  op2val:0xfffdffff00020000
TEST_RR_OP(ursub32, x20, x14, x0, 0x0000000000000000, 0x800000000000200, 0xfffdffff00020000, x11, 24, x12)

inst_20:
// rs1==x31, rs2==x28, rd==x5, rs2_w1_val == 4294901759, rs1_w1_val == 4294967291, rs2_w0_val == 1073741824
// opcode: ursub32 ; op1:x31; op2:x28; dest:x5; op1val:0xfffffffbfffffbff;  op2val:0xfffeffff40000000
TEST_RR_OP(ursub32, x5, x31, x28, 0x0000000000000000, 0xfffffffbfffffbff, 0xfffeffff40000000, x11, 32, x12)

inst_21:
// rs1==x3, rs2==x2, rd==x4, rs2_w1_val == 4294934527, rs2_w0_val == 4294443007
// opcode: ursub32 ; op1:x3; op2:x2; dest:x4; op1val:0xfffffffbfffff7ff;  op2val:0xffff7ffffff7ffff
TEST_RR_OP(ursub32, x4, x3, x2, 0x0000000000000000, 0xfffffffbfffff7ff, 0xffff7ffffff7ffff, x11, 40, x12)

inst_22:
// rs1==x1, rs2==x9, rd==x19, rs2_w1_val == 4294950911, rs2_w0_val == 4294934527, rs1_w0_val == 4294967167
// opcode: ursub32 ; op1:x1; op2:x9; dest:x19; op1val:0x8000000ffffff7f;  op2val:0xffffbfffffff7fff
TEST_RR_OP(ursub32, x19, x1, x9, 0x0000000000000000, 0x8000000ffffff7f, 0xffffbfffffff7fff, x11, 48, x12)

inst_23:
// rs1==x24, rs2==x20, rd==x6, rs2_w1_val == 4294959103, rs2_w0_val == 4227858431, rs1_w1_val == 64
// opcode: ursub32 ; op1:x24; op2:x20; dest:x6; op1val:0x0000400000000c;  op2val:0xffffdffffbffffff
TEST_RR_OP(ursub32, x6, x24, x20, 0x0000000000000000, 0x0000400000000c, 0xffffdffffbffffff, x11, 56, x12)

inst_24:
// rs1==x26, rs2==x21, rd==x3, rs2_w1_val == 4294963199, rs2_w0_val == 8192
// opcode: ursub32 ; op1:x26; op2:x21; dest:x3; op1val:0x00000600000200;  op2val:0xffffefff00002000
TEST_RR_OP(ursub32, x3, x26, x21, 0x0000000000000000, 0x00000600000200, 0xffffefff00002000, x11, 64, x12)

inst_25:
// rs1==x6, rs2==x18, rd==x29, rs2_w1_val == 4294965247, rs1_w1_val == 1073741824, rs2_w0_val == 256
// opcode: ursub32 ; op1:x6; op2:x18; dest:x29; op1val:0x400000000000000d;  op2val:0xfffff7ff00000100
TEST_RR_OP(ursub32, x29, x6, x18, 0x0000000000000000, 0x400000000000000d, 0xfffff7ff00000100, x11, 72, x12)

inst_26:
// rs1==x18, rs2==x5, rd==x9, rs2_w1_val == 4294966271, rs1_w1_val == 256, rs2_w0_val == 4294965247
// opcode: ursub32 ; op1:x18; op2:x5; dest:x9; op1val:0x00010000000012;  op2val:0xfffffbfffffff7ff
TEST_RR_OP(ursub32, x9, x18, x5, 0x0000000000000000, 0x00010000000012, 0xfffffbfffffff7ff, x11, 80, x12)

inst_27:
// rs1==x29, rs2==x10, rd==x8, rs2_w1_val == 4294966783, rs1_w0_val == 4293918719
// opcode: ursub32 ; op1:x29; op2:x10; dest:x8; op1val:0x000040ffefffff;  op2val:0xfffffdff00400000
TEST_RR_OP(ursub32, x8, x29, x10, 0x0000000000000000, 0x000040ffefffff, 0xfffffdff00400000, x11, 88, x12)

inst_28:
// rs1==x21, rs2==x8, rd==x16, rs2_w1_val == 4294967039, rs1_w0_val == 16
// opcode: ursub32 ; op1:x21; op2:x8; dest:x16; op1val:0x00004000000010;  op2val:0xfffffeff0000000e
TEST_RR_OP(ursub32, x16, x21, x8, 0x0000000000000000, 0x00004000000010, 0xfffffeff0000000e, x11, 96, x12)

inst_29:
// rs1==x13, rs2==x15, rd==x17, rs2_w1_val == 4294967167, rs2_w0_val == 65536
// opcode: ursub32 ; op1:x13; op2:x15; dest:x17; op1val:0x00000700000006;  op2val:0xffffff7f00010000
TEST_RR_OP(ursub32, x17, x13, x15, 0x0000000000000000, 0x00000700000006, 0xffffff7f00010000, x11, 104, x12)

inst_30:
// rs1==x25, rs2==x16, rd==x0, rs2_w1_val == 4294967231, rs1_w1_val == 4294443007, rs2_w0_val == 4026531839
// opcode: ursub32 ; op1:x25; op2:x16; dest:x0; op1val:0xfff7fffffffff7ff;  op2val:0xffffffbfefffffff
TEST_RR_OP(ursub32, x0, x25, x16, 0x0000000000000000, 0xfff7fffffffff7ff, 0xffffffbfefffffff, x11, 112, x12)

inst_31:
// rs1==x17, rs2==x31, rd==x7, rs2_w1_val == 4294967263, rs1_w1_val == 4294967263
// opcode: ursub32 ; op1:x17; op2:x31; dest:x7; op1val:0xffffffdf00000040;  op2val:0xffffffdffffffeff
TEST_RR_OP(ursub32, x7, x17, x31, 0x0000000000000000, 0xffffffdf00000040, 0xffffffdffffffeff, x11, 120, x2)

inst_32:
// rs2_w1_val == 4294967279, rs1_w1_val == 4194304, rs1_w0_val == 65536, rs2_w0_val == 3758096383
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000010000;  op2val:0xffffffefdfffffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x40000000010000, 0xffffffefdfffffff, x11, 128, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs2_w1_val == 4294967287, rs2_w0_val == 4286578687, rs1_w0_val == 3221225471
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000bbfffffff;  op2val:0xfffffff7ff7fffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00000bbfffffff, 0xfffffff7ff7fffff, x1, 0, x2)

inst_34:
// rs2_w1_val == 4294967291, rs2_w0_val == 4294901759, rs1_w0_val == 8
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001100000008;  op2val:0xfffffffbfffeffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00001100000008, 0xfffffffbfffeffff, x1, 8, x2)

inst_35:
// rs2_w1_val == 4294967293, rs1_w0_val == 1
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000001;  op2val:0xfffffffd20000000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00000600000001, 0xfffffffd20000000, x1, 16, x2)

inst_36:
// rs2_w1_val == 4294967294, rs1_w0_val == 8192, rs2_w0_val == 4096
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100002000;  op2val:0xfffffffe00001000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00000100002000, 0xfffffffe00001000, x1, 24, x2)

inst_37:
// rs2_w1_val == 2147483648, rs2_w0_val == 4294967291, rs1_w0_val == 33554432
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004002000000;  op2val:0x80000000fffffffb
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00004002000000, 0x80000000fffffffb, x1, 32, x2)

inst_38:
// rs2_w1_val == 1073741824, rs1_w1_val == 268435456, rs1_w0_val == 4294959103, rs2_w0_val == 268435456
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000ffffdfff;  op2val:0x4000000010000000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x10000000ffffdfff, 0x4000000010000000, x1, 40, x2)

inst_39:
// rs2_w1_val == 536870912, rs1_w0_val == 4, rs1_w1_val == 4294934527
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000004;  op2val:0x20000000fbffffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000004, 0x20000000fbffffff, x1, 48, x2)

inst_40:
// rs2_w1_val == 134217728, rs2_w0_val == 4294967295, rs1_w1_val == 4294967295
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffbfffffff;  op2val:0x8000000ffffffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffffffffbfffffff, 0x8000000ffffffff, x1, 56, x2)

inst_41:
// rs2_w1_val == 67108864, rs1_w0_val == 1048576
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00100000;  op2val:0x4000000fbffffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00100000, 0x4000000fbffffff, x1, 64, x2)

inst_42:
// rs2_w1_val == 33554432, rs2_w0_val == 4261412863, rs1_w1_val == 2048
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000040;  op2val:0x2000000fdffffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00080000000040, 0x2000000fdffffff, x1, 72, x2)

inst_43:
// rs2_w1_val == 16777216, rs1_w0_val == 2097152
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000c00200000;  op2val:0x10000000000000b
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00000c00200000, 0x10000000000000b, x1, 80, x2)

inst_44:
// rs2_w1_val == 8388608, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001300000012;  op2val:0x80000000100000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00001300000012, 0x80000000100000, x1, 88, x2)

inst_45:
// rs2_w1_val == 4194304, rs1_w1_val == 16, rs2_w0_val == 3221225471
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000007;  op2val:0x400000bfffffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00001000000007, 0x400000bfffffff, x1, 96, x2)

inst_46:
// rs2_w1_val == 2097152, rs1_w1_val == 8, rs1_w0_val == 2147483647
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000087fffffff;  op2val:0x2000000000000f
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x0000087fffffff, 0x2000000000000f, x1, 104, x2)

inst_47:
// rs2_w1_val == 1048576, rs1_w1_val == 4294966783
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff7fffffff;  op2val:0x10000000002000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xfffffdff7fffffff, 0x10000000002000, x1, 112, x2)

inst_48:
// rs2_w1_val == 524288, rs1_w0_val == 3758096383
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000edfffffff;  op2val:0x080000fffeffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00000edfffffff, 0x080000fffeffff, x1, 120, x2)

inst_49:
// rs2_w1_val == 262144, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000400000;  op2val:0x040000ffff7fff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00004000400000, 0x040000ffff7fff, x1, 128, x2)

inst_50:
// rs2_w1_val == 131072, rs1_w1_val == 65536
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000400000;  op2val:0x02000000000011
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x01000000400000, 0x02000000000011, x1, 136, x2)

inst_51:
// rs2_w1_val == 65536, rs1_w1_val == 128
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080dfffffff;  op2val:0x01000000000013
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x000080dfffffff, 0x01000000000013, x1, 144, x2)

inst_52:
// rs2_w1_val == 32768, rs2_w0_val == 4294967294, rs1_w0_val == 16777216
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008001000000;  op2val:0x008000fffffffe
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00008001000000, 0x008000fffffffe, x1, 152, x2)

inst_53:
// rs2_w1_val == 16384, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000cffffdfff;  op2val:0x00400000000013
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00000cffffdfff, 0x00400000000013, x1, 160, x2)

inst_54:
// rs2_w1_val == 8192, rs2_w0_val == 4, rs1_w0_val == 262144, rs1_w1_val == 33554432
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000040000;  op2val:0x00200000000004
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x200000000040000, 0x00200000000004, x1, 168, x2)

inst_55:
// rs2_w1_val == 4096, rs1_w1_val == 4294950911
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffefffff;  op2val:0x00100000000005
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffffbfffffefffff, 0x00100000000005, x1, 176, x2)

inst_56:
// rs1_w0_val == 131072, rs2_w0_val == 16384
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700020000;  op2val:0x00008000004000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00000700020000, 0x00008000004000, x1, 184, x2)

inst_57:
// rs1_w0_val == 16384, rs1_w1_val == 4286578687
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00004000;  op2val:0x2000000000020000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00004000, 0x2000000000020000, x1, 192, x2)

inst_58:
// rs1_w0_val == 4096, rs1_w1_val == 4294967293
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00001000;  op2val:0x00001300000100
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00001000, 0x00001300000100, x1, 200, x2)

inst_59:
// rs1_w0_val == 2048, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001100000800;  op2val:0xfffffffbffffffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00001100000800, 0xfffffffbffffffff, x1, 208, x2)

inst_60:
// rs1_w0_val == 1024, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000400;  op2val:0x010000fffff7ff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xefffffff00000400, 0x010000fffff7ff, x1, 216, x2)

inst_61:
// rs1_w0_val == 256, rs1_w1_val == 4292870143
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000100;  op2val:0x04000000000009
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000100, 0x04000000000009, x1, 224, x2)

inst_62:
// rs1_w0_val == 128, rs1_w1_val == 0, rs2_w1_val == 4294967295
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000080;  op2val:0xfffffffffffff7ff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00000000000080, 0xfffffffffffff7ff, x1, 232, x2)

inst_63:
// rs1_w0_val == 2, rs2_w0_val == 1431655765, rs1_w1_val == 67108864
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000002;  op2val:0x1000000055555555
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x400000000000002, 0x1000000055555555, x1, 240, x2)

inst_64:
// rs2_w1_val == 2048, rs1_w0_val == 4278190079, rs2_w0_val == 4294967263, rs1_w1_val == 2147483648
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000feffffff;  op2val:0x000800ffffffdf
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x80000000feffffff, 0x000800ffffffdf, x1, 248, x2)

inst_65:
// rs2_w1_val == 1024, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff0000000e;  op2val:0x0004000000000a
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xefffffff0000000e, 0x0004000000000a, x1, 256, x2)

inst_66:
// rs2_w1_val == 512, rs1_w1_val == 4294705151
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff7fffffff;  op2val:0x000200fffffeff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xfffbffff7fffffff, 0x000200fffffeff, x1, 264, x2)

inst_67:
// rs2_w1_val == 256, rs1_w0_val == 1431655765
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000055555555;  op2val:0x000100fdffffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x100000055555555, 0x000100fdffffff, x1, 272, x2)

inst_68:
// rs2_w1_val == 64, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000000;  op2val:0x00004000000009
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00000600000000, 0x00004000000009, x1, 280, x2)

inst_69:
// rs2_w1_val == 32, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000006;  op2val:0x000020fff7ffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000006, 0x000020fff7ffff, x1, 288, x2)

inst_70:
// rs2_w1_val == 16, rs2_w0_val == 1024
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000120000000b;  op2val:0x00001000000400
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x0000120000000b, 0x00001000000400, x1, 296, x2)

inst_71:
// rs2_w1_val == 8, rs1_w1_val == 4294967231
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000200;  op2val:0x00000800001000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000200, 0x00000800001000, x1, 304, x2)

inst_72:
// rs2_w1_val == 4, rs2_w0_val == 8388608
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000020;  op2val:0x00000400800000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000020, 0x00000400800000, x1, 312, x2)

inst_73:
// rs2_w1_val == 2, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000013;  op2val:0x0000020000000d
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00000900000013, 0x0000020000000d, x1, 320, x2)

inst_74:
// rs2_w1_val == 1, rs1_w1_val == 16384
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x0040000000000b;  op2val:0x00000100000006
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x0040000000000b, 0x00000100000006, x1, 328, x2)

inst_75:
// rs2_w1_val == 0, rs1_w0_val == 4294705151
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000011fffbffff;  op2val:0x00000002000000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x000011fffbffff, 0x00000002000000, x1, 336, x2)

inst_76:
// rs2_w0_val == 2863311530, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00200000;  op2val:0x080000aaaaaaaa
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00200000, 0x080000aaaaaaaa, x1, 344, x2)

inst_77:
// rs2_w0_val == 2147483647, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000100;  op2val:0x7fffffff7fffffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000100, 0x7fffffff7fffffff, x1, 352, x2)

inst_78:
// rs2_w0_val == 4160749567, rs1_w0_val == 4261412863
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005fdffffff;  op2val:0x40000000f7ffffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x000005fdffffff, 0x40000000f7ffffff, x1, 360, x2)

inst_79:
// rs2_w0_val == 4290772991, rs1_w0_val == 4294967263
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffffffdf;  op2val:0x000000ffbfffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x000040ffffffdf, 0x000000ffbfffff, x1, 368, x2)

inst_80:
// rs2_w0_val == 4294705151, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700200000;  op2val:0xffffffdffffbffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00000700200000, 0xffffffdffffbffff, x1, 376, x2)

inst_81:
// rs2_w0_val == 4294950911, rs1_w0_val == 4294836223
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040fffdffff;  op2val:0xfdffffffffffbfff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x000040fffdffff, 0xfdffffffffffbfff, x1, 384, x2)

inst_82:
// rs2_w0_val == 4294959103, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000007;  op2val:0xaaaaaaaaffffdfff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffffefff00000007, 0xaaaaaaaaffffdfff, x1, 392, x2)

inst_83:
// rs2_w0_val == 4294963199, rs1_w0_val == 4294901759, rs1_w1_val == 4294836223
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffffeffff;  op2val:0x40000000ffffefff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xfffdfffffffeffff, 0x40000000ffffefff, x1, 400, x2)

inst_84:
// rs2_w0_val == 4294966271, rs1_w0_val == 536870912
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff20000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffffffff20000000, 0xfffffffffffffbff, x1, 408, x2)

inst_85:
// rs2_w0_val == 4294966783, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff0000000b;  op2val:0xfffffffbfffffdff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xefffffff0000000b, 0xfffffffbfffffdff, x1, 416, x2)

inst_86:
// rs2_w0_val == 4294967167, rs1_w1_val == 3758096383
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00100000;  op2val:0x8000000ffffff7f
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00100000, 0x8000000ffffff7f, x1, 424, x2)

inst_87:
// rs2_w0_val == 4294967231, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000e01000000;  op2val:0x004000ffffffbf
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00000e01000000, 0x004000ffffffbf, x1, 432, x2)

inst_88:
// rs2_w0_val == 4294967279, rs1_w1_val == 4294959103
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00002000;  op2val:0x000040ffffffef
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00002000, 0x000040ffffffef, x1, 440, x2)

inst_89:
// rs2_w0_val == 4294967287, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000013ffffffdf;  op2val:0x000011fffffff7
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x000013ffffffdf, 0x000011fffffff7, x1, 448, x2)

inst_90:
// rs2_w0_val == 512, rs1_w1_val == 4290772991
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff55555555;  op2val:0x800000000000200
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffbfffff55555555, 0x800000000000200, x1, 456, x2)

inst_91:
// rs2_w0_val == 64, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000c00000010;  op2val:0xfffffffb00000040
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00000c00000010, 0xfffffffb00000040, x1, 464, x2)

inst_92:
// rs1_w0_val == 524288, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00080000;  op2val:0x20000000fffdffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xefffffff00080000, 0x20000000fffdffff, x1, 472, x2)

inst_93:
// rs2_w0_val == 16, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff02000000;  op2val:0x800000000000010
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xdfffffff02000000, 0x800000000000010, x1, 480, x2)

inst_94:
// rs2_w0_val == 8, rs1_w1_val == 4294901759
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000002;  op2val:0xfffffbff00000008
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000002, 0xfffffbff00000008, x1, 488, x2)

inst_95:
// rs2_w0_val == 2, rs1_w1_val == 4294967294
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000010;  op2val:0x00002000000002
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000010, 0x00002000000002, x1, 496, x2)

inst_96:
// rs2_w0_val == 1, rs1_w0_val == 4294967291
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffffffb;  op2val:0xfffffdff00000001
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffdffffffffffffb, 0xfffffdff00000001, x1, 504, x2)

inst_97:
// rs2_w0_val == 0, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf01000000;  op2val:0x20000000000000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffffffbf01000000, 0x20000000000000, x1, 512, x2)

inst_98:
// rs1_w1_val == 1431655765, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500080000;  op2val:0xfffff7ff00000010
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x5555555500080000, 0xfffff7ff00000010, x1, 520, x2)

inst_99:
// rs1_w1_val == 2147483647, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff80000000;  op2val:0x40000000000002
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x7fffffff80000000, 0x40000000000002, x1, 528, x2)

inst_100:
// rs1_w1_val == 3221225471, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff80000000;  op2val:0x00000600000005
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xbfffffff80000000, 0x00000600000005, x1, 536, x2)

inst_101:
// rs1_w1_val == 4227858431, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00080000;  op2val:0x000002fffff7ff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00080000, 0x000002fffff7ff, x1, 544, x2)

inst_102:
// rs1_w1_val == 4261412863, rs1_w0_val == 134217728
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff08000000;  op2val:0xffffbfff00400000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xfdffffff08000000, 0xffffbfff00400000, x1, 552, x2)

inst_103:
// rs1_w1_val == 4278190079, rs2_w0_val == 2048
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000400;  op2val:0xfffffffb00000800
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000400, 0xfffffffb00000800, x1, 560, x2)

inst_104:
// rs1_w1_val == 4293918719, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000003;  op2val:0xfeffffff00000001
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffefffff00000003, 0xfeffffff00000001, x1, 568, x2)

inst_105:
// rs1_w1_val == 4294965247, rs1_w0_val == 4294963199
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffefff;  op2val:0x000000dfffffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffefff, 0x000000dfffffff, x1, 576, x2)

inst_106:
// rs1_w1_val == 4294967167, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000002;  op2val:0xffffdfff00010000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000002, 0xffffdfff00010000, x1, 584, x2)

inst_107:
// rs1_w1_val == 4294967279, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefdfffffff;  op2val:0x00000affffffef
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffffffefdfffffff, 0x00000affffffef, x1, 592, x2)

inst_108:
// rs1_w1_val == 4294967287, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000200;  op2val:0x1000000000000020
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xfffffff700000200, 0x1000000000000020, x1, 600, x2)

inst_109:
// rs1_w1_val == 2097152, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000200000;  op2val:0x00000555555555
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x20000000200000, 0x00000555555555, x1, 608, x2)

inst_110:
// rs1_w1_val == 1048576, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffefffff;  op2val:0x2000000000400000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x100000ffefffff, 0x2000000000400000, x1, 616, x2)

inst_111:
// rs1_w1_val == 524288, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffff7ff;  op2val:0x00004000001000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x080000fffff7ff, 0x00004000001000, x1, 624, x2)

inst_112:
// rs1_w1_val == 131072, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000009;  op2val:0x800000fdffffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x02000000000009, 0x800000fdffffff, x1, 632, x2)

inst_113:
// rs1_w1_val == 32768, rs1_w0_val == 4292870143
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffdfffff;  op2val:0x00001000000007
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x008000ffdfffff, 0x00001000000007, x1, 640, x2)

inst_114:
// rs1_w1_val == 8192, rs2_w0_val == 524288
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000080;  op2val:0x00000b00080000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00200000000080, 0x00000b00080000, x1, 648, x2)

inst_115:
// rs1_w1_val == 4096, rs1_w0_val == 268435456
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100010000000;  op2val:0x100000010000000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00100010000000, 0x100000010000000, x1, 656, x2)

inst_116:
// rs1_w1_val == 512, rs1_w0_val == 4294443007
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200fff7ffff;  op2val:0x000800ffffefff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x000200fff7ffff, 0x000800ffffefff, x1, 664, x2)

inst_117:
// rs1_w1_val == 32, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000009;  op2val:0x00000500000003
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00002000000009, 0x00000500000003, x1, 672, x2)

inst_118:
// rs1_w1_val == 4, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000040000000d;  op2val:0x200000000080000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x0000040000000d, 0x200000000080000, x1, 680, x2)

inst_119:
// rs1_w1_val == 2, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200200000;  op2val:0x000002ff7fffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00000200200000, 0x000002ff7fffff, x1, 688, x2)

inst_120:
// rs1_w0_val == 2863311530, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000aaaaaaaa;  op2val:0x000002ffffdfff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x4000000aaaaaaaa, 0x000002ffffdfff, x1, 696, x2)

inst_121:
// rs1_w0_val == 4026531839, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000013efffffff;  op2val:0xfffbffff00200000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x000013efffffff, 0xfffbffff00200000, x1, 704, x2)

inst_122:
// rs1_w0_val == 4160749567, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008f7ffffff;  op2val:0x8000000000200000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x000008f7ffffff, 0x8000000000200000, x1, 712, x2)

inst_123:
// rs1_w0_val == 4227858431, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffbffffff;  op2val:0xfffbffff0000000f
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xfbfffffffbffffff, 0xfffbffff0000000f, x1, 720, x2)

inst_124:
// rs1_w0_val == 4286578687, rs2_w0_val == 4294967293
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffff7fffff;  op2val:0xffffbffffffffffd
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffff7fffff7fffff, 0xffffbffffffffffd, x1, 728, x2)

inst_125:
// rs1_w0_val == 4294934527, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000011ffff7fff;  op2val:0x000040dfffffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x000011ffff7fff, 0x000040dfffffff, x1, 736, x2)

inst_126:
// rs1_w0_val == 4294950911, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000ffffbfff;  op2val:0x001000fffffffd
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x400000ffffbfff, 0x001000fffffffd, x1, 744, x2)

inst_127:
// rs1_w0_val == 4294966783, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffffdff;  op2val:0xffff7fffffffefff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffdffffffffffdff, 0xffff7fffffffefff, x1, 752, x2)

inst_128:
// rs1_w0_val == 4294967039, rs2_w0_val == 67108864
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080fffffeff;  op2val:0x00100004000000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x000080fffffeff, 0x00100004000000, x1, 760, x2)

inst_129:
// rs2_w0_val == 2147483648, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff01000000;  op2val:0x00400080000000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff01000000, 0x00400080000000, x1, 768, x2)

inst_130:
// rs1_w0_val == 4294967231, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffffffbf;  op2val:0x00000f20000000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x010000ffffffbf, 0x00000f20000000, x1, 776, x2)

inst_131:
// rs1_w0_val == 4294967279, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000ffffffef;  op2val:0xefffffff00000006
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x040000ffffffef, 0xefffffff00000006, x1, 784, x2)

inst_132:
// rs2_w0_val == 134217728, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009ffffffbf;  op2val:0xfffffffb08000000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x000009ffffffbf, 0xfffffffb08000000, x1, 792, x2)

inst_133:
// rs1_w0_val == 4294967293, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffffffd;  op2val:0x00800010000000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffffeffffffffffd, 0x00800010000000, x1, 800, x2)

inst_134:
// rs2_w0_val == 16777216, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000ffff7fff;  op2val:0x00000701000000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x000000ffff7fff, 0x00000701000000, x1, 808, x2)

inst_135:
// rs1_w0_val == 4294967294, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffffffe;  op2val:0x10000000fffeffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffdffffffffffffe, 0x10000000fffeffff, x1, 816, x2)

inst_136:
// rs2_w0_val == 262144, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff0000000a;  op2val:0x00004000040000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xfffffdff0000000a, 0x00004000040000, x1, 824, x2)

inst_137:
// rs2_w0_val == 32768, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000000;  op2val:0x00001000008000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000000, 0x00001000008000, x1, 832, x2)

inst_138:
// rs1_w0_val == 1073741824, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff40000000;  op2val:0x01000000000006
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xffefffff40000000, 0x01000000000006, x1, 840, x2)

inst_139:
// rs1_w0_val == 4294967287, 
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000dfffffff7;  op2val:0x400000fffffffb
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00000dfffffff7, 0x400000fffffffb, x1, 848, x2)

inst_140:
// rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 128, rs1_w0_val == 2147483648
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000380000000;  op2val:0x00000300000080
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x00000380000000, 0x00000300000080, x1, 856, x2)

inst_141:
// rs2_w1_val == 4294836223, rs1_w0_val == 512, rs1_w1_val == 134217728
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000200;  op2val:0xfffdffff00020000
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0x800000000000200, 0xfffdffff00020000, x1, 864, x2)

inst_142:
// rs2_w1_val == 4294967231, rs1_w1_val == 4294443007, rs2_w0_val == 4026531839
// opcode: ursub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffff7ff;  op2val:0xffffffbfefffffff
TEST_RR_OP(ursub32, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffff7ff, 0xffffffbfefffffff, x1, 872, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x11_0:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 110*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
