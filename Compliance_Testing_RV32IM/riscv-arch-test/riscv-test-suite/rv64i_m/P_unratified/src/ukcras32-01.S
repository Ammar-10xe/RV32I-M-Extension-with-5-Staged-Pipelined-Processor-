
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukcras32 instruction of the RISC-V RV64PZicsr extension for the ukcras32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukcras32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x28, rs2==x22, rd==x28, rs1_w0_val == 0, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0
// opcode: ukcras32 ; op1:x28; op2:x22; dest:x28; op1val:0x00000d00000000;  op2val:0x00000c00000006
TEST_PKRR_OP(ukcras32, x28, x28, x22, 0x0000000000000000, 0x00000d00000000, 0x00000c00000006, x28, x1, 0, x4)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x9, rs2==x21, rd==x30, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 4294959103, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 8192, rs2_w1_val == 4294959103, rs2_w0_val == 4294950911
// opcode: ukcras32 ; op1:x9; op2:x21; dest:x30; op1val:0xffffdfff00002000;  op2val:0xffffdfffffffbfff
TEST_PKRR_OP(ukcras32, x30, x9, x21, 0x0000000000000000, 0xffffdfff00002000, 0xffffdfffffffbfff, x9, x1, 16, x4)

inst_2:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x0, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 256, rs2_w1_val == 4294967263, rs2_w0_val == 256, rs1_w1_val == 134217728
// opcode: ukcras32 ; op1:x26; op2:x26; dest:x0; op1val:0x800000000000100;  op2val:0xffffffdf00000100
TEST_PKRR_OP(ukcras32, x0, x26, x26, 0x0000000000000000, 0x800000000000100, 0xffffffdf00000100, x26, x1, 32, x4)

inst_3:
// rs1 == rs2 == rd, rs1==x15, rs2==x15, rd==x15, rs2_w1_val == 2863311530, rs2_w0_val == 33554432, rs1_w1_val == 4
// opcode: ukcras32 ; op1:x15; op2:x15; dest:x15; op1val:0x00000400002000;  op2val:0xaaaaaaaa02000000
TEST_PKRR_OP(ukcras32, x15, x15, x15, 0x0000000000000000, 0x00000400002000, 0xaaaaaaaa02000000, x15, x1, 48, x4)

inst_4:
// rs2 == rd != rs1, rs1==x29, rs2==x2, rd==x2, rs2_w1_val == 1431655765, rs1_w0_val == 4, rs2_w0_val == 4286578687, rs1_w1_val == 262144
// opcode: ukcras32 ; op1:x29; op2:x2; dest:x2; op1val:0x04000000000004;  op2val:0x55555555ff7fffff
TEST_PKRR_OP(ukcras32, x2, x29, x2, 0x0000000000000000, 0x04000000000004, 0x55555555ff7fffff, x29, x1, 64, x4)

inst_5:
// rs1==x12, rs2==x31, rd==x20, rs2_w1_val == 2147483647, rs1_w1_val == 4026531839, rs1_w0_val == 4294443007
// opcode: ukcras32 ; op1:x12; op2:x31; dest:x20; op1val:0xeffffffffff7ffff;  op2val:0x7fffffff00000005
TEST_PKRR_OP(ukcras32, x20, x12, x31, 0x0000000000000000, 0xeffffffffff7ffff, 0x7fffffff00000005, x12, x1, 80, x4)

inst_6:
// rs1==x23, rs2==x7, rd==x21, rs2_w1_val == 3221225471, rs1_w1_val == 268435456, rs1_w0_val == 262144, rs2_w0_val == 65536
// opcode: ukcras32 ; op1:x23; op2:x7; dest:x21; op1val:0x1000000000040000;  op2val:0xbfffffff00010000
TEST_PKRR_OP(ukcras32, x21, x23, x7, 0x0000000000000000, 0x1000000000040000, 0xbfffffff00010000, x23, x1, 96, x4)

inst_7:
// rs1==x17, rs2==x27, rd==x13, rs2_w1_val == 3758096383, rs1_w1_val == 4294950911, rs1_w0_val == 4294967294, rs2_w0_val == 524288
// opcode: ukcras32 ; op1:x17; op2:x27; dest:x13; op1val:0xffffbffffffffffe;  op2val:0xdfffffff00080000
TEST_PKRR_OP(ukcras32, x13, x17, x27, 0x0000000000000000, 0xffffbffffffffffe, 0xdfffffff00080000, x17, x1, 112, x4)

inst_8:
// rs1==x31, rs2==x5, rd==x10, rs2_w1_val == 4026531839, rs1_w1_val == 1073741824, rs1_w0_val == 65536
// opcode: ukcras32 ; op1:x31; op2:x5; dest:x10; op1val:0x4000000000010000;  op2val:0xefffffff00000011
TEST_PKRR_OP(ukcras32, x10, x31, x5, 0x0000000000000000, 0x4000000000010000, 0xefffffff00000011, x31, x1, 128, x4)

inst_9:
// rs1==x6, rs2==x30, rd==x24, rs2_w1_val == 4160749567, rs1_w1_val == 4294966783
// opcode: ukcras32 ; op1:x6; op2:x30; dest:x24; op1val:0xfffffdff00000004;  op2val:0xf7ffffff0000000b
TEST_PKRR_OP(ukcras32, x24, x6, x30, 0x0000000000000000, 0xfffffdff00000004, 0xf7ffffff0000000b, x6, x1, 144, x4)

inst_10:
// rs1==x3, rs2==x20, rd==x26, rs2_w1_val == 4227858431, rs1_w1_val == 536870912
// opcode: ukcras32 ; op1:x3; op2:x20; dest:x26; op1val:0x2000000000000100;  op2val:0xfbffffff0000000e
TEST_PKRR_OP(ukcras32, x26, x3, x20, 0x0000000000000000, 0x2000000000000100, 0xfbffffff0000000e, x3, x1, 160, x4)

inst_11:
// rs1==x21, rs2==x6, rd==x14, rs2_w1_val == 4261412863, rs2_w0_val == 4294967291, rs1_w0_val == 4294967293
// opcode: ukcras32 ; op1:x21; op2:x6; dest:x14; op1val:0xffffbffffffffffd;  op2val:0xfdfffffffffffffb
TEST_PKRR_OP(ukcras32, x14, x21, x6, 0x0000000000000000, 0xffffbffffffffffd, 0xfdfffffffffffffb, x21, x1, 176, x4)

inst_12:
// rs1==x0, rs2==x17, rd==x16, rs2_w1_val == 4278190079, rs1_w0_val == 67108864, rs1_w1_val == 4294967293, rs2_w0_val == 4293918719
// opcode: ukcras32 ; op1:x0; op2:x17; dest:x16; op1val:0xfffffffd04000000;  op2val:0xfeffffffffefffff
TEST_PKRR_OP(ukcras32, x16, x0, x17, 0x0000000000000000, 0xfffffffd04000000, 0xfeffffffffefffff, x0, x1, 192, x4)

inst_13:
// rs1==x30, rs2==x12, rd==x6, rs2_w1_val == 4286578687, rs1_w1_val == 65536, rs1_w0_val == 4294965247
// opcode: ukcras32 ; op1:x30; op2:x12; dest:x6; op1val:0x010000fffff7ff;  op2val:0xff7ffffffffffffb
TEST_PKRR_OP(ukcras32, x6, x30, x12, 0x0000000000000000, 0x010000fffff7ff, 0xff7ffffffffffffb, x30, x1, 208, x4)

inst_14:
// rs1==x24, rs2==x25, rd==x8, rs2_w1_val == 4290772991, rs2_w0_val == 4294967167
// opcode: ukcras32 ; op1:x24; op2:x25; dest:x8; op1val:0x00000a00040000;  op2val:0xffbfffffffffff7f
TEST_PKRR_OP(ukcras32, x8, x24, x25, 0x0000000000000000, 0x00000a00040000, 0xffbfffffffffff7f, x24, x1, 224, x4)

inst_15:
// rs1==x22, rs2==x11, rd==x27, rs2_w1_val == 4292870143, rs2_w0_val == 262144, rs1_w1_val == 131072, rs1_w0_val == 4096
// opcode: ukcras32 ; op1:x22; op2:x11; dest:x27; op1val:0x02000000001000;  op2val:0xffdfffff00040000
TEST_PKRR_OP(ukcras32, x27, x22, x11, 0x0000000000000000, 0x02000000001000, 0xffdfffff00040000, x22, x1, 240, x15)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_16:
// rs1==x1, rs2==x14, rd==x7, rs2_w1_val == 4293918719, rs1_w0_val == 16384
// opcode: ukcras32 ; op1:x1; op2:x14; dest:x7; op1val:0xefffffff00004000;  op2val:0xffefffff0000000d
TEST_PKRR_OP(ukcras32, x7, x1, x14, 0x0000000000000000, 0xefffffff00004000, 0xffefffff0000000d, x1, x6, 0, x15)

inst_17:
// rs1==x10, rs2==x28, rd==x22, rs2_w1_val == 4294443007, rs2_w0_val == 1024
// opcode: ukcras32 ; op1:x10; op2:x28; dest:x22; op1val:0x0400000000000e;  op2val:0xfff7ffff00000400
TEST_PKRR_OP(ukcras32, x22, x10, x28, 0x0000000000000000, 0x0400000000000e, 0xfff7ffff00000400, x10, x6, 16, x15)

inst_18:
// rs1==x18, rs2==x23, rd==x12, rs2_w1_val == 4294705151, 
// opcode: ukcras32 ; op1:x18; op2:x23; dest:x12; op1val:0x00001100002000;  op2val:0xfffbffff00000100
TEST_PKRR_OP(ukcras32, x12, x18, x23, 0x0000000000000000, 0x00001100002000, 0xfffbffff00000100, x18, x6, 32, x15)

inst_19:
// rs1==x27, rs2==x16, rd==x5, rs2_w1_val == 4294836223, rs1_w1_val == 16777216
// opcode: ukcras32 ; op1:x27; op2:x16; dest:x5; op1val:0x100000000000006;  op2val:0xfffdffffff7fffff
TEST_PKRR_OP(ukcras32, x5, x27, x16, 0x0000000000000000, 0x100000000000006, 0xfffdffffff7fffff, x27, x6, 48, x15)

inst_20:
// rs1==x5, rs2==x9, rd==x31, rs2_w1_val == 4294901759, rs1_w1_val == 4294963199, rs2_w0_val == 64
// opcode: ukcras32 ; op1:x5; op2:x9; dest:x31; op1val:0xffffefff00000007;  op2val:0xfffeffff00000040
TEST_PKRR_OP(ukcras32, x31, x5, x9, 0x0000000000000000, 0xffffefff00000007, 0xfffeffff00000040, x5, x6, 64, x15)

inst_21:
// rs1==x11, rs2==x19, rd==x29, rs2_w1_val == 4294934527, rs1_w0_val == 8388608, rs2_w0_val == 4294967231, rs1_w1_val == 4261412863
// opcode: ukcras32 ; op1:x11; op2:x19; dest:x29; op1val:0xfdffffff00800000;  op2val:0xffff7fffffffffbf
TEST_PKRR_OP(ukcras32, x29, x11, x19, 0x0000000000000000, 0xfdffffff00800000, 0xffff7fffffffffbf, x11, x6, 80, x15)

inst_22:
// rs1==x19, rs2==x3, rd==x1, rs2_w1_val == 4294950911, rs2_w0_val == 4294967039, rs1_w1_val == 4294967287, rs1_w0_val == 2097152
// opcode: ukcras32 ; op1:x19; op2:x3; dest:x1; op1val:0xfffffff700200000;  op2val:0xffffbffffffffeff
TEST_PKRR_OP(ukcras32, x1, x19, x3, 0x0000000000000000, 0xfffffff700200000, 0xffffbffffffffeff, x19, x6, 96, x15)

inst_23:
// rs1==x2, rs2==x13, rd==x18, rs2_w1_val == 4294963199, rs1_w0_val == 4286578687, rs1_w1_val == 4294967291, rs2_w0_val == 8
// opcode: ukcras32 ; op1:x2; op2:x13; dest:x18; op1val:0xfffffffbff7fffff;  op2val:0xffffefff00000008
TEST_PKRR_OP(ukcras32, x18, x2, x13, 0x0000000000000000, 0xfffffffbff7fffff, 0xffffefff00000008, x2, x6, 112, x15)

inst_24:
// rs1==x13, rs2==x18, rd==x3, rs2_w1_val == 4294965247, rs2_w0_val == 4278190079, rs1_w0_val == 2147483648, rs1_w1_val == 4294836223
// opcode: ukcras32 ; op1:x13; op2:x18; dest:x3; op1val:0xfffdffff80000000;  op2val:0xfffff7fffeffffff
TEST_PKRR_OP(ukcras32, x3, x13, x18, 0x0000000000000000, 0xfffdffff80000000, 0xfffff7fffeffffff, x13, x6, 128, x15)

inst_25:
// rs1==x7, rs2==x8, rd==x4, rs2_w1_val == 4294966271, rs2_w0_val == 3758096383, rs1_w0_val == 4293918719
// opcode: ukcras32 ; op1:x7; op2:x8; dest:x4; op1val:0xfffffdffffefffff;  op2val:0xfffffbffdfffffff
TEST_PKRR_OP(ukcras32, x4, x7, x8, 0x0000000000000000, 0xfffffdffffefffff, 0xfffffbffdfffffff, x7, x6, 144, x15)

inst_26:
// rs1==x16, rs2==x4, rd==x25, rs2_w1_val == 4294966783, rs1_w0_val == 4294967279, rs1_w1_val == 32768
// opcode: ukcras32 ; op1:x16; op2:x4; dest:x25; op1val:0x008000ffffffef;  op2val:0xfffffdff00000100
TEST_PKRR_OP(ukcras32, x25, x16, x4, 0x0000000000000000, 0x008000ffffffef, 0xfffffdff00000100, x16, x6, 160, x15)

inst_27:
// rs1==x14, rs2==x10, rd==x9, rs2_w1_val == 4294967039, 
// opcode: ukcras32 ; op1:x14; op2:x10; dest:x9; op1val:0x800000000000004;  op2val:0xfffffeff0000000f
TEST_PKRR_OP(ukcras32, x9, x14, x10, 0x0000000000000000, 0x800000000000004, 0xfffffeff0000000f, x14, x6, 176, x15)

inst_28:
// rs1==x25, rs2==x24, rd==x23, rs2_w1_val == 4294967167, rs2_w0_val == 2147483647
// opcode: ukcras32 ; op1:x25; op2:x24; dest:x23; op1val:0xffffefff00000011;  op2val:0xffffff7f7fffffff
TEST_PKRR_OP(ukcras32, x23, x25, x24, 0x0000000000000000, 0xffffefff00000011, 0xffffff7f7fffffff, x25, x6, 192, x15)

inst_29:
// rs1==x8, rs2==x29, rd==x11, rs2_w1_val == 4294967231, rs2_w0_val == 8192, rs1_w0_val == 134217728
// opcode: ukcras32 ; op1:x8; op2:x29; dest:x11; op1val:0xfffffff708000000;  op2val:0xffffffbf00002000
TEST_PKRR_OP(ukcras32, x11, x8, x29, 0x0000000000000000, 0xfffffff708000000, 0xffffffbf00002000, x8, x6, 208, x15)

inst_30:
// rs1==x20, rs2==x1, rd==x19, rs2_w1_val == 4294967279, rs1_w1_val == 16384, rs2_w0_val == 4294967293, rs1_w0_val == 3758096383
// opcode: ukcras32 ; op1:x20; op2:x1; dest:x19; op1val:0x004000dfffffff;  op2val:0xffffffeffffffffd
TEST_PKRR_OP(ukcras32, x19, x20, x1, 0x0000000000000000, 0x004000dfffffff, 0xffffffeffffffffd, x20, x6, 224, x15)

inst_31:
// rs1==x4, rs2==x0, rd==x17, rs2_w1_val == 4294967287, rs1_w1_val == 3758096383, rs2_w0_val == 4294901759, rs1_w0_val == 2147483647
// opcode: ukcras32 ; op1:x4; op2:x0; dest:x17; op1val:0xdfffffff7fffffff;  op2val:0xfffffff7fffeffff
TEST_PKRR_OP(ukcras32, x17, x4, x0, 0x0000000000000000, 0xdfffffff7fffffff, 0xfffffff7fffeffff, x4, x6, 240, x15)

inst_32:
// rs2_w1_val == 4294967291, rs1_w1_val == 8192, rs2_w0_val == 16777216, rs1_w0_val == 32768
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000008000;  op2val:0xfffffffb01000000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00200000008000, 0xfffffffb01000000, x30, x6, 256, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_33:
// rs2_w1_val == 4294967293, rs2_w0_val == 4294967294
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ffffffef;  op2val:0xfffffffdfffffffe
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x8000000ffffffef, 0xfffffffdfffffffe, x30, x1, 0, x2)

inst_34:
// rs2_w1_val == 4294967294, rs1_w1_val == 4096, rs1_w0_val == 536870912
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100020000000;  op2val:0xfffffffe0000000d
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00100020000000, 0xfffffffe0000000d, x30, x1, 16, x2)

inst_35:
// rs2_w1_val == 2147483648, rs1_w1_val == 2
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200008000;  op2val:0x8000000000000008
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00000200008000, 0x8000000000000008, x30, x1, 32, x2)

inst_36:
// rs2_w1_val == 1073741824, rs1_w0_val == 2
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000000002;  op2val:0x4000000001000000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00400000000002, 0x4000000001000000, x30, x1, 48, x2)

inst_37:
// rs2_w1_val == 536870912, rs1_w0_val == 4278190079
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000feffffff;  op2val:0x200000000000000a
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x040000feffffff, 0x200000000000000a, x30, x1, 64, x2)

inst_38:
// rs2_w1_val == 268435456, rs2_w0_val == 4227858431, rs1_w1_val == 8388608
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000f;  op2val:0x10000000fbffffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x8000000000000f, 0x10000000fbffffff, x30, x1, 80, x2)

inst_39:
// rs2_w1_val == 134217728, rs1_w1_val == 1048576
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000003;  op2val:0x8000000fffffffe
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x10000000000003, 0x8000000fffffffe, x30, x1, 96, x2)

inst_40:
// rs2_w1_val == 67108864, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500200000;  op2val:0x40000000000000b
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00000500200000, 0x40000000000000b, x30, x1, 112, x2)

inst_41:
// rs2_w1_val == 33554432, rs1_w0_val == 4294963199
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffefff;  op2val:0x2000000ffffff7f
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffefff, 0x2000000ffffff7f, x30, x1, 128, x2)

inst_42:
// rs2_w1_val == 16777216, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000020000000;  op2val:0x1000000ffffff7f
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x02000020000000, 0x1000000ffffff7f, x30, x1, 144, x2)

inst_43:
// rs2_w1_val == 8388608, rs1_w1_val == 67108864, rs2_w0_val == 4294967263
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000100;  op2val:0x800000ffffffdf
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x400000000000100, 0x800000ffffffdf, x30, x1, 160, x2)

inst_44:
// rs2_w1_val == 4194304, rs2_w0_val == 4290772991, rs1_w0_val == 268435456
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff10000000;  op2val:0x400000ffbfffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffffbfff10000000, 0x400000ffbfffff, x30, x1, 176, x2)

inst_45:
// rs2_w1_val == 2097152, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x0200000000000e;  op2val:0x2000000000000a
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x0200000000000e, 0x2000000000000a, x30, x1, 192, x2)

inst_46:
// rs2_w1_val == 1048576, rs2_w0_val == 131072, rs1_w0_val == 3221225471
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffbfffffff;  op2val:0x10000000020000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xdfffffffbfffffff, 0x10000000020000, x30, x1, 208, x2)

inst_47:
// rs2_w1_val == 524288, rs1_w0_val == 1048576
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000100000;  op2val:0x08000000010000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x1000000000100000, 0x08000000010000, x30, x1, 224, x2)

inst_48:
// rs2_w1_val == 262144, rs1_w0_val == 4160749567
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000f7ffffff;  op2val:0x04000000040000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x008000f7ffffff, 0x04000000040000, x30, x1, 240, x2)

inst_49:
// rs2_w1_val == 131072, rs1_w1_val == 4294705151
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000011;  op2val:0x020000fffffffb
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000011, 0x020000fffffffb, x30, x1, 256, x2)

inst_50:
// rs2_w1_val == 65536, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000013;  op2val:0x010000dfffffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000013, 0x010000dfffffff, x30, x1, 272, x2)

inst_51:
// rs2_w1_val == 32768, rs1_w1_val == 16, rs2_w0_val == 1431655765
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000107fffffff;  op2val:0x00800055555555
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x0000107fffffff, 0x00800055555555, x30, x1, 288, x2)

inst_52:
// rs2_w1_val == 16384, rs2_w0_val == 1073741824
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000000;  op2val:0x00400040000000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x2000000000000000, 0x00400040000000, x30, x1, 304, x2)

inst_53:
// rs2_w1_val == 8192, rs1_w1_val == 4292870143, rs1_w0_val == 16
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000010;  op2val:0x00200000000011
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000010, 0x00200000000011, x30, x1, 320, x2)

inst_54:
// rs2_w1_val == 4096, rs1_w0_val == 4292870143, rs2_w0_val == 268435456
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ffdfffff;  op2val:0x00100010000000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x8000000ffdfffff, 0x00100010000000, x30, x1, 336, x2)

inst_55:
// rs1_w0_val == 131072, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000020000;  op2val:0x00000a0000000f
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x04000000020000, 0x00000a0000000f, x30, x1, 352, x2)

inst_56:
// rs1_w0_val == 2048, rs1_w1_val == 32
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000800;  op2val:0xfffbffffffffff7f
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00002000000800, 0xfffbffffffffff7f, x30, x1, 368, x2)

inst_57:
// rs1_w0_val == 1024, rs2_w0_val == 4294705151, rs2_w1_val == 256
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000400;  op2val:0x000100fffbffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x100000000000400, 0x000100fffbffff, x30, x1, 384, x2)

inst_58:
// rs1_w0_val == 512, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000b00000200;  op2val:0x02000000000006
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00000b00000200, 0x02000000000006, x30, x1, 400, x2)

inst_59:
// rs1_w0_val == 128, rs2_w1_val == 1024, rs1_w1_val == 2863311530
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000080;  op2val:0x0004000000000f
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000080, 0x0004000000000f, x30, x1, 416, x2)

inst_60:
// rs1_w0_val == 64, rs1_w1_val == 4294967039
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000040;  op2val:0x080000fffbffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000040, 0x080000fffbffff, x30, x1, 432, x2)

inst_61:
// rs1_w0_val == 32, rs2_w1_val == 32
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000020;  op2val:0x00002000000009
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x01000000000020, 0x00002000000009, x30, x1, 448, x2)

inst_62:
// rs1_w0_val == 8, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000008;  op2val:0xf7ffffff00000011
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x1000000000000008, 0xf7ffffff00000011, x30, x1, 464, x2)

inst_63:
// rs1_w0_val == 1, rs1_w1_val == 524288
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000001;  op2val:0xffffdfff00000009
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x08000000000001, 0xffffdfff00000009, x30, x1, 480, x2)

inst_64:
// rs1_w0_val == 4294967295, rs2_w0_val == 67108864
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffffffff;  op2val:0x00002004000000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffffefffffffffff, 0x00002004000000, x30, x1, 496, x2)

inst_65:
// rs2_w1_val == 2048, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffffffef;  op2val:0x0008007fffffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x004000ffffffef, 0x0008007fffffff, x30, x1, 512, x2)

inst_66:
// rs2_w1_val == 512, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000a00000005;  op2val:0x000200ffbfffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00000a00000005, 0x000200ffbfffff, x30, x1, 528, x2)

inst_67:
// rs2_w1_val == 128, rs2_w0_val == 4294836223
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001300000002;  op2val:0x000080fffdffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00001300000002, 0x000080fffdffff, x30, x1, 544, x2)

inst_68:
// rs2_w1_val == 64, rs1_w0_val == 4294959103, rs2_w0_val == 536870912
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffffdfff;  op2val:0x00004020000000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffffdfff, 0x00004020000000, x30, x1, 560, x2)

inst_69:
// rs2_w1_val == 16, rs1_w0_val == 524288
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000080000;  op2val:0x000010fffffffd
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x80000000080000, 0x000010fffffffd, x30, x1, 576, x2)

inst_70:
// rs2_w1_val == 8, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff80000000;  op2val:0x00000800000040
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xfffffeff80000000, 0x00000800000040, x30, x1, 592, x2)

inst_71:
// rs2_w1_val == 4, rs1_w1_val == 0, rs1_w0_val == 4294967287
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffffff7;  op2val:0x000004feffffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x000000fffffff7, 0x000004feffffff, x30, x1, 608, x2)

inst_72:
// rs2_w1_val == 2, rs2_w0_val == 4294963199
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000002000;  op2val:0x000002ffffefff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00100000002000, 0x000002ffffefff, x30, x1, 624, x2)

inst_73:
// rs2_w1_val == 1, rs1_w1_val == 4194304, rs2_w0_val == 134217728
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000006;  op2val:0x00000108000000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x40000000000006, 0x00000108000000, x30, x1, 640, x2)

inst_74:
// rs2_w1_val == 4294967295, rs2_w0_val == 128, rs1_w0_val == 4294934527
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000ffff7fff;  op2val:0xffffffff00000080
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x020000ffff7fff, 0xffffffff00000080, x30, x1, 656, x2)

inst_75:
// rs2_w1_val == 0, rs1_w0_val == 4294836223, rs2_w0_val == 4160749567
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffffdffff;  op2val:0x000000f7ffffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffffdffffffdffff, 0x000000f7ffffff, x30, x1, 672, x2)

inst_76:
// rs2_w0_val == 2863311530, rs1_w0_val == 16777216
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000201000000;  op2val:0x000100aaaaaaaa
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00000201000000, 0x000100aaaaaaaa, x30, x1, 688, x2)

inst_77:
// rs2_w0_val == 3221225471, rs1_w0_val == 4026531839, rs1_w1_val == 1431655765
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555efffffff;  op2val:0x000020bfffffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x55555555efffffff, 0x000020bfffffff, x30, x1, 704, x2)

inst_78:
// rs2_w0_val == 4026531839, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000000;  op2val:0xf7ffffffefffffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x01000000000000, 0xf7ffffffefffffff, x30, x1, 720, x2)

inst_79:
// rs2_w0_val == 4261412863, rs1_w0_val == 4294967039
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000cfffffeff;  op2val:0xffeffffffdffffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00000cfffffeff, 0xffeffffffdffffff, x30, x1, 736, x2)

inst_80:
// rs2_w0_val == 4292870143, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000002;  op2val:0x800000ffdfffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00000900000002, 0x800000ffdfffff, x30, x1, 752, x2)

inst_81:
// rs2_w0_val == 4294443007, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffffffff;  op2val:0x000010fff7ffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffdffffffff, 0x000010fff7ffff, x30, x1, 768, x2)

inst_82:
// rs2_w0_val == 4294934527, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000010;  op2val:0x000005ffff7fff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x40000000000010, 0x000005ffff7fff, x30, x1, 784, x2)

inst_83:
// rs2_w0_val == 4294959103, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000dfffffff;  op2val:0xfffbffffffffdfff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x010000dfffffff, 0xfffbffffffffdfff, x30, x1, 800, x2)

inst_84:
// rs2_w0_val == 4294965247, rs1_w1_val == 4293918719, rs1_w0_val == 4294901759
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffeffff;  op2val:0x8000000fffff7ff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffeffffffffeffff, 0x8000000fffff7ff, x30, x1, 816, x2)

inst_85:
// rs2_w0_val == 4294966271, rs1_w1_val == 4227858431
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffeffffff;  op2val:0x2000000fffffbff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xfbfffffffeffffff, 0x2000000fffffbff, x30, x1, 832, x2)

inst_86:
// rs2_w0_val == 4294966783, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000100;  op2val:0xfffefffffffffdff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00002000000100, 0xfffefffffffffdff, x30, x1, 848, x2)

inst_87:
// rs2_w0_val == 512, rs1_w0_val == 4290772991, rs1_w1_val == 4294967294
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffbfffff;  op2val:0x800000000000200
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffeffbfffff, 0x800000000000200, x30, x1, 864, x2)

inst_88:
// rs2_w0_val == 32, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001100000002;  op2val:0x00000100000020
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00001100000002, 0x00000100000020, x30, x1, 880, x2)

inst_89:
// rs2_w0_val == 16, rs1_w0_val == 4294967231
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000ffffffbf;  op2val:0x00000700000010
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x400000ffffffbf, 0x00000700000010, x30, x1, 896, x2)

inst_90:
// rs2_w0_val == 4, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000c00200000;  op2val:0x80000000000004
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00000c00200000, 0x80000000000004, x30, x1, 912, x2)

inst_91:
// rs2_w0_val == 2, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff04000000;  op2val:0xffff7fff00000002
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffffefff04000000, 0xffff7fff00000002, x30, x1, 928, x2)

inst_92:
// rs2_w0_val == 1, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000010000000;  op2val:0x00001000000001
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x40000010000000, 0x00001000000001, x30, x1, 944, x2)

inst_93:
// rs2_w0_val == 4294967295, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000080;  op2val:0x020000ffffffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000080, 0x020000ffffffff, x30, x1, 960, x2)

inst_94:
// rs2_w0_val == 0, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700100000;  op2val:0x04000000000000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xfffffff700100000, 0x04000000000000, x30, x1, 976, x2)

inst_95:
// rs1_w1_val == 2147483647, rs1_w0_val == 1431655765
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff55555555;  op2val:0xffefffffefffffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x7fffffff55555555, 0xffefffffefffffff, x30, x1, 992, x2)

inst_96:
// rs1_w1_val == 3221225471, rs1_w0_val == 4294967263
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffffdf;  op2val:0xaaaaaaaa00000001
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffffdf, 0xaaaaaaaa00000001, x30, x1, 1008, x2)

inst_97:
// rs1_w1_val == 4160749567, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff01000000;  op2val:0x00001200000008
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff01000000, 0x00001200000008, x30, x1, 1024, x2)

inst_98:
// rs1_w1_val == 4278190079, rs1_w0_val == 4194304
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00400000;  op2val:0xffbfffff00000000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00400000, 0xffbfffff00000000, x30, x1, 1040, x2)

inst_99:
// rs1_w1_val == 4286578687, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffefffffff;  op2val:0x4000000000000005
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xff7fffffefffffff, 0x4000000000000005, x30, x1, 1056, x2)

inst_100:
// rs1_w1_val == 4290772991, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000007;  op2val:0xfffffff7dfffffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000007, 0xfffffff7dfffffff, x30, x1, 1072, x2)

inst_101:
// rs1_w1_val == 4294443007, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000004;  op2val:0x2000000000000001
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000004, 0x2000000000000001, x30, x1, 1088, x2)

inst_102:
// rs1_w1_val == 4294901759, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffff7ffff;  op2val:0x8000000000000d
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xfffefffffff7ffff, 0x8000000000000d, x30, x1, 1104, x2)

inst_103:
// rs1_w1_val == 4294934527, rs2_w0_val == 16384
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000002;  op2val:0xfffffdff00004000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000002, 0xfffffdff00004000, x30, x1, 1120, x2)

inst_104:
// rs1_w1_val == 4294965247, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000005;  op2val:0x1000000020000000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000005, 0x1000000020000000, x30, x1, 1136, x2)

inst_105:
// rs1_w1_val == 4294966271, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff80000000;  op2val:0x040000efffffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xfffffbff80000000, 0x040000efffffff, x30, x1, 1152, x2)

inst_106:
// rs1_w1_val == 4294967167, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffdfffff;  op2val:0xfffffeffbfffffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffffff7fffdfffff, 0xfffffeffbfffffff, x30, x1, 1168, x2)

inst_107:
// rs1_w1_val == 4294967231, rs1_w0_val == 4261412863
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffdffffff;  op2val:0x04000000000020
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffffffbffdffffff, 0x04000000000020, x30, x1, 1184, x2)

inst_108:
// rs1_w1_val == 4294967263, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffefffff;  op2val:0x040000fffeffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffffffdfffefffff, 0x040000fffeffff, x30, x1, 1200, x2)

inst_109:
// rs1_w1_val == 4294967279, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00001000;  op2val:0xfffffeff00000040
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffffffef00001000, 0xfffffeff00000040, x30, x1, 1216, x2)

inst_110:
// rs1_w1_val == 2147483648, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000001000000;  op2val:0x00000cffbfffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x8000000001000000, 0x00000cffbfffff, x30, x1, 1232, x2)

inst_111:
// rs1_w1_val == 2048, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffffffbf;  op2val:0x00400000000004
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x000800ffffffbf, 0x00400000000004, x30, x1, 1248, x2)

inst_112:
// rs1_w1_val == 1024, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400dfffffff;  op2val:0x00000800080000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x000400dfffffff, 0x00000800080000, x30, x1, 1264, x2)

inst_113:
// rs1_w1_val == 512, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020008000000;  op2val:0x00000840000000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00020008000000, 0x00000840000000, x30, x1, 1280, x2)

inst_114:
// rs1_w1_val == 256, rs1_w0_val == 4227858431
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100fbffffff;  op2val:0xdfffffffffffefff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x000100fbffffff, 0xdfffffffffffefff, x30, x1, 1296, x2)

inst_115:
// rs1_w1_val == 128, rs1_w0_val == 4294705151
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080fffbffff;  op2val:0x000002ffffefff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x000080fffbffff, 0x000002ffffefff, x30, x1, 1312, x2)

inst_116:
// rs1_w1_val == 64, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000012;  op2val:0x00000400000009
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00004000000012, 0x00000400000009, x30, x1, 1328, x2)

inst_117:
// rs1_w1_val == 8, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffffefff;  op2val:0x00000d00000013
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x000008ffffefff, 0x00000d00000013, x30, x1, 1344, x2)

inst_118:
// rs1_w1_val == 1, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000013;  op2val:0x0000080000000e
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00000100000013, 0x0000080000000e, x30, x1, 1360, x2)

inst_119:
// rs1_w1_val == 4294967295, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffefffffff;  op2val:0x4000000000000005
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffffffffefffffff, 0x4000000000000005, x30, x1, 1376, x2)

inst_120:
// rs1_w0_val == 2863311530, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffaaaaaaaa;  op2val:0x4000000000000006
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xfffdffffaaaaaaaa, 0x4000000000000006, x30, x1, 1392, x2)

inst_121:
// rs1_w0_val == 4294950911, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007ffffbfff;  op2val:0x000040fffffffe
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x000007ffffbfff, 0x000040fffffffe, x30, x1, 1408, x2)

inst_122:
// rs1_w1_val == 2097152, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000001;  op2val:0xffeffffffffbffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x20000000000001, 0xffeffffffffbffff, x30, x1, 1424, x2)

inst_123:
// rs2_w0_val == 4294967279, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555ffffffff;  op2val:0x000080ffffffef
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x55555555ffffffff, 0x000080ffffffef, x30, x1, 1440, x2)

inst_124:
// rs2_w0_val == 4294967287, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000040;  op2val:0xffffff7ffffffff7
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffffefff00000040, 0xffffff7ffffffff7, x30, x1, 1456, x2)

inst_125:
// rs1_w0_val == 4294966271, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffffffbff;  op2val:0x00001300000020
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffffbff, 0x00001300000020, x30, x1, 1472, x2)

inst_126:
// rs1_w0_val == 4294966783, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffffdff;  op2val:0x10000000ffffff7f
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x80000000fffffdff, 0x10000000ffffff7f, x30, x1, 1488, x2)

inst_127:
// rs2_w0_val == 2147483648, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000001;  op2val:0x00400080000000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000001, 0x00400080000000, x30, x1, 1504, x2)

inst_128:
// rs1_w0_val == 4294967167, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000ffffff7f;  op2val:0x000005fffffffb
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x020000ffffff7f, 0x000005fffffffb, x30, x1, 1520, x2)

inst_129:
// rs1_w0_val == 4294967291, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffffb;  op2val:0x00000900000020
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x10000000fffffffb, 0x00000900000020, x30, x1, 1536, x2)

inst_130:
// rs2_w0_val == 8388608, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff0000000d;  op2val:0x100000000800000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffdfffff0000000d, 0x100000000800000, x30, x1, 1552, x2)

inst_131:
// rs2_w0_val == 4194304, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x0010000000000d;  op2val:0x00400000400000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x0010000000000d, 0x00400000400000, x30, x1, 1568, x2)

inst_132:
// rs1_w0_val == 1073741824, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff40000000;  op2val:0xffffbfff08000000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff40000000, 0xffffbfff08000000, x30, x1, 1584, x2)

inst_133:
// rs1_w1_val == 33554432, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000002;  op2val:0x00080000000006
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x200000000000002, 0x00080000000006, x30, x1, 1600, x2)

inst_134:
// rs2_w0_val == 2097152, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000ff7fffff;  op2val:0x00008000200000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x200000ff7fffff, 0x00008000200000, x30, x1, 1616, x2)

inst_135:
// rs2_w0_val == 1048576, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00001000;  op2val:0x00000a00100000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00001000, 0x00000a00100000, x30, x1, 1632, x2)

inst_136:
// rs1_w0_val == 33554432, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff02000000;  op2val:0xaaaaaaaaffbfffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffffefff02000000, 0xaaaaaaaaffbfffff, x30, x1, 1648, x2)

inst_137:
// rs2_w0_val == 32768, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00040000;  op2val:0xffff7fff00008000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00040000, 0xffff7fff00008000, x30, x1, 1664, x2)

inst_138:
// rs2_w0_val == 4096, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000010000;  op2val:0xfffffffd00001000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00002000010000, 0xfffffffd00001000, x30, x1, 1680, x2)

inst_139:
// rs2_w0_val == 2048, 
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffff7ffff;  op2val:0xffffefff00000800
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xffffdffffff7ffff, 0xffffefff00000800, x30, x1, 1696, x2)

inst_140:
// rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 256, rs2_w1_val == 4294967263, rs2_w0_val == 256, rs1_w1_val == 134217728
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000100;  op2val:0xffffffdf00000100
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x800000000000100, 0xffffffdf00000100, x30, x1, 1712, x2)

inst_141:
// rs2_w1_val == 2863311530, rs2_w0_val == 33554432, rs1_w1_val == 4
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400002000;  op2val:0xaaaaaaaa02000000
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0x00000400002000, 0xaaaaaaaa02000000, x30, x1, 1728, x2)

inst_142:
// rs2_w1_val == 4278190079, rs1_w0_val == 67108864, rs1_w1_val == 4294967293, rs2_w0_val == 4293918719
// opcode: ukcras32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd04000000;  op2val:0xfeffffffffefffff
TEST_PKRR_OP(ukcras32, x31, x30, x29, 0x0000000000000000, 0xfffffffd04000000, 0xfeffffffffefffff, x30, x1, 1744, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 220*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
