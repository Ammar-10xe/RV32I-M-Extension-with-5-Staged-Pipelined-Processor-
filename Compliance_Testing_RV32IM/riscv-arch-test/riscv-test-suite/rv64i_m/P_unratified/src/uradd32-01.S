
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uradd32 instruction of the RISC-V RV64PZicsr extension for the uradd32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uradd32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rd != rs2, rs1==x19, rs2==x23, rd==x19, rs1_w0_val == 0, rs2_w0_val == 1024, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 2097152, rs2_w1_val == 536870912
// opcode: uradd32 ; op1:x19; op2:x23; dest:x19; op1val:0x20000000000000;  op2val:0x2000000000000400
TEST_RR_OP(uradd32, x19, x19, x23, 0x0000000000000000, 0x20000000000000, 0x2000000000000400, x8, 0, x12)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x27, rs2==x11, rd==x22, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 1024, rs1_w0_val == 64, rs2_w0_val == 3221225471, rs2_w1_val == 1024
// opcode: uradd32 ; op1:x27; op2:x11; dest:x22; op1val:0x00040000000040;  op2val:0x000400bfffffff
TEST_RR_OP(uradd32, x22, x27, x11, 0x0000000000000000, 0x00040000000040, 0x000400bfffffff, x8, 8, x12)

inst_2:
// rs1 == rs2 != rd, rs1==x22, rs2==x22, rd==x26, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 536870912
// opcode: uradd32 ; op1:x22; op2:x22; dest:x26; op1val:0x200000000000000a;  op2val:0x00000a0000000a
TEST_RR_OP(uradd32, x26, x22, x22, 0x0000000000000000, 0x200000000000000a, 0x00000a0000000a, x8, 16, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs2_w1_val == 2863311530, rs1_w0_val == 4294967295, rs2_w0_val == 4261412863, rs1_w1_val == 2048
// opcode: uradd32 ; op1:x1; op2:x1; dest:x1; op1val:0x000800ffffffff;  op2val:0xaaaaaaaafdffffff
TEST_RR_OP(uradd32, x1, x1, x1, 0x0000000000000000, 0x000800ffffffff, 0xaaaaaaaafdffffff, x8, 24, x12)

inst_4:
// rs2 == rd != rs1, rs1==x2, rs2==x0, rd==x0, rs2_w1_val == 1431655765, rs1_w1_val == 8, rs2_w0_val == 16384, rs1_w0_val == 8388608
// opcode: uradd32 ; op1:x2; op2:x0; dest:x0; op1val:0x00000800800000;  op2val:0x5555555500004000
TEST_RR_OP(uradd32, x0, x2, x0, 0x0000000000000000, 0x00000800800000, 0x5555555500004000, x8, 32, x12)

inst_5:
// rs1==x11, rs2==x26, rd==x29, rs2_w1_val == 2147483647, rs1_w0_val == 4294836223, rs2_w0_val == 4294959103, rs1_w1_val == 4294934527
// opcode: uradd32 ; op1:x11; op2:x26; dest:x29; op1val:0xffff7ffffffdffff;  op2val:0x7fffffffffffdfff
TEST_RR_OP(uradd32, x29, x11, x26, 0x0000000000000000, 0xffff7ffffffdffff, 0x7fffffffffffdfff, x8, 40, x12)

inst_6:
// rs1==x24, rs2==x27, rd==x18, rs2_w1_val == 3221225471, rs1_w0_val == 536870912, rs1_w1_val == 4294966783
// opcode: uradd32 ; op1:x24; op2:x27; dest:x18; op1val:0xfffffdff20000000;  op2val:0xbffffffffdffffff
TEST_RR_OP(uradd32, x18, x24, x27, 0x0000000000000000, 0xfffffdff20000000, 0xbffffffffdffffff, x8, 48, x12)

inst_7:
// rs1==x14, rs2==x10, rd==x9, rs2_w1_val == 3758096383, rs2_w0_val == 4294705151, rs1_w0_val == 4294966271, rs1_w1_val == 268435456
// opcode: uradd32 ; op1:x14; op2:x10; dest:x9; op1val:0x10000000fffffbff;  op2val:0xdffffffffffbffff
TEST_RR_OP(uradd32, x9, x14, x10, 0x0000000000000000, 0x10000000fffffbff, 0xdffffffffffbffff, x8, 56, x12)

inst_8:
// rs1==x16, rs2==x21, rd==x3, rs2_w1_val == 4026531839, rs2_w0_val == 4294966271, rs1_w0_val == 4278190079, rs1_w1_val == 4294967167
// opcode: uradd32 ; op1:x16; op2:x21; dest:x3; op1val:0xffffff7ffeffffff;  op2val:0xeffffffffffffbff
TEST_RR_OP(uradd32, x3, x16, x21, 0x0000000000000000, 0xffffff7ffeffffff, 0xeffffffffffffbff, x8, 64, x12)

inst_9:
// rs1==x5, rs2==x25, rd==x20, rs2_w1_val == 4160749567, rs1_w0_val == 4294705151, rs1_w1_val == 32, rs2_w0_val == 4294965247
// opcode: uradd32 ; op1:x5; op2:x25; dest:x20; op1val:0x000020fffbffff;  op2val:0xf7fffffffffff7ff
TEST_RR_OP(uradd32, x20, x5, x25, 0x0000000000000000, 0x000020fffbffff, 0xf7fffffffffff7ff, x8, 72, x12)

inst_10:
// rs1==x7, rs2==x17, rd==x24, rs2_w1_val == 4227858431, rs1_w1_val == 64, rs1_w0_val == 4261412863, rs2_w0_val == 32
// opcode: uradd32 ; op1:x7; op2:x17; dest:x24; op1val:0x000040fdffffff;  op2val:0xfbffffff00000020
TEST_RR_OP(uradd32, x24, x7, x17, 0x0000000000000000, 0x000040fdffffff, 0xfbffffff00000020, x8, 80, x12)

inst_11:
// rs1==x25, rs2==x29, rd==x16, rs2_w1_val == 4261412863, rs1_w0_val == 33554432, rs2_w0_val == 4294934527, rs1_w1_val == 4294967287
// opcode: uradd32 ; op1:x25; op2:x29; dest:x16; op1val:0xfffffff702000000;  op2val:0xfdffffffffff7fff
TEST_RR_OP(uradd32, x16, x25, x29, 0x0000000000000000, 0xfffffff702000000, 0xfdffffffffff7fff, x8, 88, x12)

inst_12:
// rs1==x23, rs2==x2, rd==x7, rs2_w1_val == 4278190079, rs1_w0_val == 67108864, rs1_w1_val == 4292870143
// opcode: uradd32 ; op1:x23; op2:x2; dest:x7; op1val:0xffdfffff04000000;  op2val:0xfeffffff0000000b
TEST_RR_OP(uradd32, x7, x23, x2, 0x0000000000000000, 0xffdfffff04000000, 0xfeffffff0000000b, x8, 96, x12)

inst_13:
// rs1==x4, rs2==x20, rd==x6, rs2_w1_val == 4286578687, rs2_w0_val == 65536
// opcode: uradd32 ; op1:x4; op2:x20; dest:x6; op1val:0xffff7ffffffffbff;  op2val:0xff7fffff00010000
TEST_RR_OP(uradd32, x6, x4, x20, 0x0000000000000000, 0xffff7ffffffffbff, 0xff7fffff00010000, x8, 104, x12)

inst_14:
// rs1==x13, rs2==x6, rd==x17, rs2_w1_val == 4290772991, rs2_w0_val == 32768, rs1_w0_val == 1073741824, rs1_w1_val == 128
// opcode: uradd32 ; op1:x13; op2:x6; dest:x17; op1val:0x00008040000000;  op2val:0xffbfffff00008000
TEST_RR_OP(uradd32, x17, x13, x6, 0x0000000000000000, 0x00008040000000, 0xffbfffff00008000, x8, 112, x12)

inst_15:
// rs1==x3, rs2==x5, rd==x11, rs2_w1_val == 4292870143, rs2_w0_val == 1431655765, rs1_w1_val == 4160749567
// opcode: uradd32 ; op1:x3; op2:x5; dest:x11; op1val:0xf7ffffff0000000b;  op2val:0xffdfffff55555555
TEST_RR_OP(uradd32, x11, x3, x5, 0x0000000000000000, 0xf7ffffff0000000b, 0xffdfffff55555555, x8, 120, x12)

inst_16:
// rs1==x17, rs2==x7, rd==x30, rs2_w1_val == 4293918719, rs1_w0_val == 4294967263, rs2_w0_val == 4292870143
// opcode: uradd32 ; op1:x17; op2:x7; dest:x30; op1val:0x000008ffffffdf;  op2val:0xffefffffffdfffff
TEST_RR_OP(uradd32, x30, x17, x7, 0x0000000000000000, 0x000008ffffffdf, 0xffefffffffdfffff, x8, 128, x12)

inst_17:
// rs1==x0, rs2==x13, rd==x31, rs2_w1_val == 4294443007, rs2_w0_val == 4294901759
// opcode: uradd32 ; op1:x0; op2:x13; dest:x31; op1val:0xfffffff700800000;  op2val:0xfff7fffffffeffff
TEST_RR_OP(uradd32, x31, x0, x13, 0x0000000000000000, 0xfffffff700800000, 0xfff7fffffffeffff, x8, 136, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_18:
// rs1==x21, rs2==x15, rd==x28, rs2_w1_val == 4294705151, rs2_w0_val == 262144, rs1_w1_val == 4294967295
// opcode: uradd32 ; op1:x21; op2:x15; dest:x28; op1val:0xffffffff0000000e;  op2val:0xfffbffff00040000
TEST_RR_OP(uradd32, x28, x21, x15, 0x0000000000000000, 0xffffffff0000000e, 0xfffbffff00040000, x1, 0, x7)

inst_19:
// rs1==x8, rs2==x16, rd==x2, rs2_w1_val == 4294836223, rs2_w0_val == 1
// opcode: uradd32 ; op1:x8; op2:x16; dest:x2; op1val:0x00000a0000000e;  op2val:0xfffdffff00000001
TEST_RR_OP(uradd32, x2, x8, x16, 0x0000000000000000, 0x00000a0000000e, 0xfffdffff00000001, x1, 8, x7)

inst_20:
// rs1==x30, rs2==x24, rd==x21, rs2_w1_val == 4294901759, rs2_w0_val == 512, rs1_w1_val == 4286578687
// opcode: uradd32 ; op1:x30; op2:x24; dest:x21; op1val:0xff7fffff04000000;  op2val:0xfffeffff00000200
TEST_RR_OP(uradd32, x21, x30, x24, 0x0000000000000000, 0xff7fffff04000000, 0xfffeffff00000200, x1, 16, x7)

inst_21:
// rs1==x9, rs2==x19, rd==x23, rs2_w1_val == 4294934527, 
// opcode: uradd32 ; op1:x9; op2:x19; dest:x23; op1val:0x000013fffdffff;  op2val:0xffff7fff00000006
TEST_RR_OP(uradd32, x23, x9, x19, 0x0000000000000000, 0x000013fffdffff, 0xffff7fff00000006, x1, 24, x7)

inst_22:
// rs1==x28, rs2==x8, rd==x12, rs2_w1_val == 4294950911, rs1_w1_val == 4294963199, rs2_w0_val == 2147483647, rs1_w0_val == 4294443007
// opcode: uradd32 ; op1:x28; op2:x8; dest:x12; op1val:0xffffeffffff7ffff;  op2val:0xffffbfff7fffffff
TEST_RR_OP(uradd32, x12, x28, x8, 0x0000000000000000, 0xffffeffffff7ffff, 0xffffbfff7fffffff, x1, 32, x7)

inst_23:
// rs1==x29, rs2==x9, rd==x15, rs2_w1_val == 4294959103, rs2_w0_val == 4, rs1_w1_val == 4293918719, rs1_w0_val == 4294967287
// opcode: uradd32 ; op1:x29; op2:x9; dest:x15; op1val:0xffeffffffffffff7;  op2val:0xffffdfff00000004
TEST_RR_OP(uradd32, x15, x29, x9, 0x0000000000000000, 0xffeffffffffffff7, 0xffffdfff00000004, x1, 40, x7)

inst_24:
// rs1==x26, rs2==x12, rd==x8, rs2_w1_val == 4294963199, rs1_w0_val == 32768
// opcode: uradd32 ; op1:x26; op2:x12; dest:x8; op1val:0xffffff7f00008000;  op2val:0xffffefff0000000e
TEST_RR_OP(uradd32, x8, x26, x12, 0x0000000000000000, 0xffffff7f00008000, 0xffffefff0000000e, x1, 48, x7)

inst_25:
// rs1==x12, rs2==x14, rd==x4, rs2_w1_val == 4294965247, rs2_w0_val == 0, rs1_w1_val == 2147483647
// opcode: uradd32 ; op1:x12; op2:x14; dest:x4; op1val:0x7ffffffffff7ffff;  op2val:0xfffff7ff00000000
TEST_RR_OP(uradd32, x4, x12, x14, 0x0000000000000000, 0x7ffffffffff7ffff, 0xfffff7ff00000000, x1, 56, x7)

inst_26:
// rs1==x31, rs2==x30, rd==x27, rs2_w1_val == 4294966271, rs2_w0_val == 4294967039
// opcode: uradd32 ; op1:x31; op2:x30; dest:x27; op1val:0x00000700000006;  op2val:0xfffffbfffffffeff
TEST_RR_OP(uradd32, x27, x31, x30, 0x0000000000000000, 0x00000700000006, 0xfffffbfffffffeff, x1, 64, x7)

inst_27:
// rs1==x15, rs2==x3, rd==x14, rs2_w1_val == 4294966783, rs1_w0_val == 8
// opcode: uradd32 ; op1:x15; op2:x3; dest:x14; op1val:0x00000b00000008;  op2val:0xfffffdff00004000
TEST_RR_OP(uradd32, x14, x15, x3, 0x0000000000000000, 0x00000b00000008, 0xfffffdff00004000, x1, 72, x7)

inst_28:
// rs1==x20, rs2==x28, rd==x10, rs2_w1_val == 4294967039, rs1_w1_val == 4294705151, rs1_w0_val == 2147483648, rs2_w0_val == 4294950911
// opcode: uradd32 ; op1:x20; op2:x28; dest:x10; op1val:0xfffbffff80000000;  op2val:0xfffffeffffffbfff
TEST_RR_OP(uradd32, x10, x20, x28, 0x0000000000000000, 0xfffbffff80000000, 0xfffffeffffffbfff, x1, 80, x7)

inst_29:
// rs1==x10, rs2==x18, rd==x13, rs2_w1_val == 4294967167, rs1_w0_val == 4294901759, rs1_w1_val == 134217728
// opcode: uradd32 ; op1:x10; op2:x18; dest:x13; op1val:0x8000000fffeffff;  op2val:0xffffff7fffdfffff
TEST_RR_OP(uradd32, x13, x10, x18, 0x0000000000000000, 0x8000000fffeffff, 0xffffff7fffdfffff, x1, 88, x7)

inst_30:
// rs1==x18, rs2==x31, rd==x5, rs2_w1_val == 4294967231, rs1_w1_val == 4294950911
// opcode: uradd32 ; op1:x18; op2:x31; dest:x5; op1val:0xffffbfff0000000a;  op2val:0xffffffbf00008000
TEST_RR_OP(uradd32, x5, x18, x31, 0x0000000000000000, 0xffffbfff0000000a, 0xffffffbf00008000, x1, 96, x7)

inst_31:
// rs1==x6, rs2==x4, rd==x25, rs2_w1_val == 4294967263, rs1_w0_val == 4294959103, rs1_w1_val == 256
// opcode: uradd32 ; op1:x6; op2:x4; dest:x25; op1val:0x000100ffffdfff;  op2val:0xffffffdf0000000c
TEST_RR_OP(uradd32, x25, x6, x4, 0x0000000000000000, 0x000100ffffdfff, 0xffffffdf0000000c, x1, 104, x7)

inst_32:
// rs2_w1_val == 4294967279, rs1_w0_val == 4294967039
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080fffffeff;  op2val:0xffffffef0000000d
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x000080fffffeff, 0xffffffef0000000d, x1, 112, x2)

inst_33:
// rs2_w1_val == 4294967287, rs1_w0_val == 4026531839
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000013efffffff;  op2val:0xfffffff70000000e
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x000013efffffff, 0xfffffff70000000e, x1, 120, x2)

inst_34:
// rs2_w1_val == 4294967291, rs1_w1_val == 4294901759, rs2_w0_val == 16
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff20000000;  op2val:0xfffffffb00000010
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xfffeffff20000000, 0xfffffffb00000010, x1, 128, x2)

inst_35:
// rs2_w1_val == 4294967293, rs1_w1_val == 512
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x0002000000000e;  op2val:0xfffffffd00000000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x0002000000000e, 0xfffffffd00000000, x1, 136, x2)

inst_36:
// rs2_w1_val == 4294967294, rs1_w1_val == 3758096383, rs2_w0_val == 536870912
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffbff;  op2val:0xfffffffe20000000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffbff, 0xfffffffe20000000, x1, 144, x2)

inst_37:
// rs2_w1_val == 2147483648, rs2_w0_val == 256, rs1_w1_val == 4
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004fff7ffff;  op2val:0x8000000000000100
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x000004fff7ffff, 0x8000000000000100, x1, 152, x2)

inst_38:
// rs2_w1_val == 1073741824, rs1_w0_val == 65536
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00010000;  op2val:0x400000000000000d
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00010000, 0x400000000000000d, x1, 160, x2)

inst_39:
// rs2_w1_val == 268435456, rs1_w0_val == 131072, rs1_w1_val == 67108864
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000020000;  op2val:0x1000000000000020
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x400000000020000, 0x1000000000000020, x1, 168, x2)

inst_40:
// rs2_w1_val == 134217728, rs1_w0_val == 4294967291, rs1_w1_val == 1, rs2_w0_val == 1048576
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffffffb;  op2val:0x800000000100000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x000001fffffffb, 0x800000000100000, x1, 176, x2)

inst_41:
// rs2_w1_val == 67108864, rs1_w0_val == 256, rs2_w0_val == 2097152
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000a00000100;  op2val:0x400000000200000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00000a00000100, 0x400000000200000, x1, 184, x2)

inst_42:
// rs2_w1_val == 33554432, rs1_w0_val == 134217728
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff08000000;  op2val:0x200000000040000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xffffffff08000000, 0x200000000040000, x1, 192, x2)

inst_43:
// rs2_w1_val == 16777216, rs1_w1_val == 3221225471, rs1_w0_val == 4293918719
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffefffff;  op2val:0x100000000200000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xbfffffffffefffff, 0x100000000200000, x1, 200, x2)

inst_44:
// rs2_w1_val == 8388608, rs1_w1_val == 2863311530, rs2_w0_val == 4160749567
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa20000000;  op2val:0x800000f7ffffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa20000000, 0x800000f7ffffff, x1, 208, x2)

inst_45:
// rs2_w1_val == 4194304, rs2_w0_val == 4294967291, rs1_w0_val == 1024, rs1_w1_val == 4294967293
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000400;  op2val:0x400000fffffffb
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000400, 0x400000fffffffb, x1, 216, x2)

inst_46:
// rs2_w1_val == 2097152, rs1_w0_val == 4292870143
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffdfffff;  op2val:0x200000bfffffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xfffffffdffdfffff, 0x200000bfffffff, x1, 224, x2)

inst_47:
// rs2_w1_val == 1048576, rs1_w1_val == 4290772991, rs2_w0_val == 4294967287
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00800000;  op2val:0x100000fffffff7
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00800000, 0x100000fffffff7, x1, 232, x2)

inst_48:
// rs2_w1_val == 524288, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffbffff;  op2val:0x0800000000000b
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x20000000fffbffff, 0x0800000000000b, x1, 240, x2)

inst_49:
// rs2_w1_val == 262144, rs1_w0_val == 4227858431
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fbffffff;  op2val:0x04000000000200
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x10000000fbffffff, 0x04000000000200, x1, 248, x2)

inst_50:
// rs1_w0_val == 262144, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00040000;  op2val:0x100000000000010
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xffffefff00040000, 0x100000000000010, x1, 256, x2)

inst_51:
// rs1_w0_val == 16384, rs1_w1_val == 131072, rs2_w1_val == 256
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000004000;  op2val:0x00010055555555
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x02000000004000, 0x00010055555555, x1, 264, x2)

inst_52:
// rs1_w0_val == 8192, rs2_w1_val == 32768
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000002000;  op2val:0x0080000000000b
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00004000002000, 0x0080000000000b, x1, 272, x2)

inst_53:
// rs1_w0_val == 4096, rs2_w1_val == 8
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00001000;  op2val:0x00000800000001
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00001000, 0x00000800000001, x1, 280, x2)

inst_54:
// rs1_w0_val == 2048, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000800;  op2val:0xffffffdf00000004
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00002000000800, 0xffffffdf00000004, x1, 288, x2)

inst_55:
// rs1_w0_val == 512, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000000200;  op2val:0xfffbfffffffffffb
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00008000000200, 0xfffbfffffffffffb, x1, 296, x2)

inst_56:
// rs1_w0_val == 128, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000080;  op2val:0x7ffffffffffff7ff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00000600000080, 0x7ffffffffffff7ff, x1, 304, x2)

inst_57:
// rs1_w0_val == 32, rs1_w1_val == 4194304, rs2_w0_val == 2
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000020;  op2val:0xffffbfff00000002
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x40000000000020, 0xffffbfff00000002, x1, 312, x2)

inst_58:
// rs1_w0_val == 16, rs2_w0_val == 4294836223
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000e00000010;  op2val:0x000006fffdffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00000e00000010, 0x000006fffdffff, x1, 320, x2)

inst_59:
// rs1_w0_val == 4, rs2_w0_val == 4294966783, rs1_w1_val == 1048576
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000004;  op2val:0x000008fffffdff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x10000000000004, 0x000008fffffdff, x1, 328, x2)

inst_60:
// rs1_w0_val == 2, rs2_w0_val == 33554432
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000002;  op2val:0x7fffffff02000000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00000400000002, 0x7fffffff02000000, x1, 336, x2)

inst_61:
// rs1_w0_val == 1, rs2_w0_val == 4026531839
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001200000001;  op2val:0x2000000efffffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00001200000001, 0x2000000efffffff, x1, 344, x2)

inst_62:
// rs2_w1_val == 131072, rs1_w1_val == 4294836223
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffffdffff;  op2val:0x02000000000000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xfffdfffffffdffff, 0x02000000000000, x1, 352, x2)

inst_63:
// rs2_w1_val == 65536, rs1_w1_val == 4294967231
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000006;  op2val:0x01000000000007
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000006, 0x01000000000007, x1, 360, x2)

inst_64:
// rs2_w1_val == 16384, rs2_w0_val == 8192
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000400;  op2val:0x00400000002000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000400, 0x00400000002000, x1, 368, x2)

inst_65:
// rs2_w1_val == 8192, rs2_w0_val == 4294967231
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000200;  op2val:0x002000ffffffbf
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x2000000000000200, 0x002000ffffffbf, x1, 376, x2)

inst_66:
// rs2_w1_val == 4096, rs1_w1_val == 4294959103
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00001000;  op2val:0x00100000200000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00001000, 0x00100000200000, x1, 384, x2)

inst_67:
// rs2_w1_val == 2048, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000a;  op2val:0x00080000000000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x4000000000000a, 0x00080000000000, x1, 392, x2)

inst_68:
// rs2_w1_val == 512, rs1_w0_val == 1431655765, rs1_w1_val == 4294965247, rs2_w0_val == 3758096383
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff55555555;  op2val:0x000200dfffffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff55555555, 0x000200dfffffff, x1, 400, x2)

inst_69:
// rs2_w1_val == 128, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700002000;  op2val:0x000080fffffeff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00000700002000, 0x000080fffffeff, x1, 408, x2)

inst_70:
// rs2_w1_val == 64, rs2_w0_val == 1073741824, rs1_w0_val == 524288
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001100080000;  op2val:0x00004040000000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00001100080000, 0x00004040000000, x1, 416, x2)

inst_71:
// rs2_w1_val == 32, rs2_w0_val == 4278190079
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00004000;  op2val:0x000020feffffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xffefffff00004000, 0x000020feffffff, x1, 424, x2)

inst_72:
// rs2_w1_val == 16, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffffff;  op2val:0x0000100000000d
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffffff, 0x0000100000000d, x1, 432, x2)

inst_73:
// rs2_w1_val == 4, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00004000;  op2val:0x00000455555555
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xffffffff00004000, 0x00000455555555, x1, 440, x2)

inst_74:
// rs2_w1_val == 2, rs2_w0_val == 4294967293
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000002;  op2val:0x000002fffffffd
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00002000000002, 0x000002fffffffd, x1, 448, x2)

inst_75:
// rs2_w1_val == 1, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000d00080000;  op2val:0x000001f7ffffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00000d00080000, 0x000001f7ffffff, x1, 456, x2)

inst_76:
// rs2_w1_val == 4294967295, rs1_w1_val == 32768
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffeffff;  op2val:0xffffffff0000000b
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x008000fffeffff, 0xffffffff0000000b, x1, 464, x2)

inst_77:
// rs2_w1_val == 0, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000009;  op2val:0x00000000000013
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00000400000009, 0x00000000000013, x1, 472, x2)

inst_78:
// rs2_w0_val == 2863311530, rs1_w1_val == 4294967291
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000010;  op2val:0x10000000aaaaaaaa
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000010, 0x10000000aaaaaaaa, x1, 480, x2)

inst_79:
// rs2_w0_val == 4227858431, rs1_w0_val == 3758096383
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000bdfffffff;  op2val:0xfffffff7fbffffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00000bdfffffff, 0xfffffff7fbffffff, x1, 488, x2)

inst_80:
// rs2_w0_val == 4286578687, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000f00000200;  op2val:0x000012ff7fffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00000f00000200, 0x000012ff7fffff, x1, 496, x2)

inst_81:
// rs2_w0_val == 4290772991, rs1_w0_val == 4294967293, rs1_w1_val == 4294967039
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffffd;  op2val:0x400000ffbfffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffffd, 0x400000ffbfffff, x1, 504, x2)

inst_82:
// rs2_w0_val == 4293918719, rs1_w0_val == 1048576
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600100000;  op2val:0x000002ffefffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00000600100000, 0x000002ffefffff, x1, 512, x2)

inst_83:
// rs2_w0_val == 4294443007, rs1_w1_val == 4227858431
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffffff;  op2val:0x000010fff7ffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xfbffffffffffffff, 0x000010fff7ffff, x1, 520, x2)

inst_84:
// rs2_w0_val == 128, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000006;  op2val:0x100000000000080
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000006, 0x100000000000080, x1, 528, x2)

inst_85:
// rs2_w0_val == 64, rs1_w0_val == 4194304
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000400000;  op2val:0x00000600000040
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x2000000000400000, 0x00000600000040, x1, 536, x2)

inst_86:
// rs2_w0_val == 8, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff40000000;  op2val:0x1000000000000008
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xffefffff40000000, 0x1000000000000008, x1, 544, x2)

inst_87:
// rs2_w0_val == 4294967295, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffffeffff;  op2val:0x7fffffffffffffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xfffffdfffffeffff, 0x7fffffffffffffff, x1, 552, x2)

inst_88:
// rs1_w1_val == 1431655765, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x555555550000000c;  op2val:0xfeffffffffffbfff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x555555550000000c, 0xfeffffffffffbfff, x1, 560, x2)

inst_89:
// rs1_w1_val == 4026531839, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffbffff;  op2val:0x0000110000000c
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xeffffffffffbffff, 0x0000110000000c, x1, 568, x2)

inst_90:
// rs1_w1_val == 4261412863, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff55555555;  op2val:0x7fffffff00000008
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xfdffffff55555555, 0x7fffffff00000008, x1, 576, x2)

inst_91:
// rs1_w1_val == 4278190079, rs1_w0_val == 2147483647
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff7fffffff;  op2val:0x00000500000100
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xfeffffff7fffffff, 0x00000500000100, x1, 584, x2)

inst_92:
// rs1_w1_val == 4294443007, rs2_w0_val == 4294967263
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000020;  op2val:0x000006ffffffdf
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000020, 0x000006ffffffdf, x1, 592, x2)

inst_93:
// rs1_w1_val == 4294966271, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff0000000f;  op2val:0xfbffffff00004000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xfffffbff0000000f, 0xfbffffff00004000, x1, 600, x2)

inst_94:
// rs1_w1_val == 4294967263, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000020;  op2val:0xfffffffbfffdffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000020, 0xfffffffbfffdffff, x1, 608, x2)

inst_95:
// rs1_w1_val == 4294967279, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000800;  op2val:0x00000a00000002
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xffffffef00000800, 0x00000a00000002, x1, 616, x2)

inst_96:
// rs1_w1_val == 4294967294, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000011;  op2val:0x080000ffdfffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000011, 0x080000ffdfffff, x1, 624, x2)

inst_97:
// rs1_w1_val == 2147483648, rs1_w0_val == 3221225471
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000bfffffff;  op2val:0x80000000000100
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x80000000bfffffff, 0x80000000000100, x1, 632, x2)

inst_98:
// rs1_w1_val == 1073741824, rs2_w0_val == 4294967294
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000020;  op2val:0x2000000fffffffe
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x4000000000000020, 0x2000000fffffffe, x1, 640, x2)

inst_99:
// rs1_w1_val == 33554432, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffdffff;  op2val:0x000003fffffffe
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x2000000fffdffff, 0x000003fffffffe, x1, 648, x2)

inst_100:
// rs1_w1_val == 16777216, rs2_w0_val == 4294967167
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000040000;  op2val:0xffffffefffffff7f
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x100000000040000, 0xffffffefffffff7f, x1, 656, x2)

inst_101:
// rs1_w1_val == 8388608, rs1_w0_val == 4286578687
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000ff7fffff;  op2val:0xffff7fff40000000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x800000ff7fffff, 0xffff7fff40000000, x1, 664, x2)

inst_102:
// rs1_w1_val == 524288, rs1_w0_val == 268435456
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000010000000;  op2val:0xffbfffff00000001
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x08000010000000, 0xffbfffff00000001, x1, 672, x2)

inst_103:
// rs1_w1_val == 262144, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000feffffff;  op2val:0xfeffffff00010000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x040000feffffff, 0xfeffffff00010000, x1, 680, x2)

inst_104:
// rs1_w1_val == 65536, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x0100000000000c;  op2val:0xffffbffffffffeff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x0100000000000c, 0xffffbffffffffeff, x1, 688, x2)

inst_105:
// rs1_w1_val == 16384, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000000006;  op2val:0xfffffffbfff7ffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00400000000006, 0xfffffffbfff7ffff, x1, 696, x2)

inst_106:
// rs1_w1_val == 8192, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffeffff;  op2val:0x100000000000000d
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x002000fffeffff, 0x100000000000000d, x1, 704, x2)

inst_107:
// rs1_w1_val == 4096, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000dfffffff;  op2val:0xfff7ffff00000006
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x001000dfffffff, 0xfff7ffff00000006, x1, 712, x2)

inst_108:
// rs1_w1_val == 16, rs2_w0_val == 2147483648, rs1_w0_val == 2097152
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000200000;  op2val:0x00000f80000000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00001000200000, 0x00000f80000000, x1, 720, x2)

inst_109:
// rs1_w1_val == 2, rs1_w0_val == 16777216
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000201000000;  op2val:0x00000f00000003
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00000201000000, 0x00000f00000003, x1, 728, x2)

inst_110:
// rs1_w1_val == 0, rs2_w0_val == 4194304
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000100;  op2val:0x00008000400000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00000000000100, 0x00008000400000, x1, 736, x2)

inst_111:
// rs1_w0_val == 2863311530, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000daaaaaaaa;  op2val:0xffffff7f0000000f
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00000daaaaaaaa, 0xffffff7f0000000f, x1, 744, x2)

inst_112:
// rs1_w0_val == 4160749567, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000f7ffffff;  op2val:0xfffffff700000000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x001000f7ffffff, 0xfffffff700000000, x1, 752, x2)

inst_113:
// rs1_w0_val == 4290772991, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000effbfffff;  op2val:0x020000ff7fffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00000effbfffff, 0x020000ff7fffff, x1, 760, x2)

inst_114:
// rs2_w0_val == 4294963199, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffffb;  op2val:0x002000ffffefff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffffb, 0x002000ffffefff, x1, 768, x2)

inst_115:
// rs1_w0_val == 4294934527, rs2_w0_val == 134217728
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffff7fff;  op2val:0xffffffbf08000000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x000400ffff7fff, 0xffffffbf08000000, x1, 776, x2)

inst_116:
// rs1_w0_val == 4294950911, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffbfff;  op2val:0x000003fffbffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffbfff, 0x000003fffbffff, x1, 784, x2)

inst_117:
// rs2_w0_val == 4294967279, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000050000000c;  op2val:0xfffffffbffffffef
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x0000050000000c, 0xfffffffbffffffef, x1, 792, x2)

inst_118:
// rs1_w0_val == 4294963199, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffffefff;  op2val:0x00000020000000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xefffffffffffefff, 0x00000020000000, x1, 800, x2)

inst_119:
// rs1_w0_val == 4294965247, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffff7ff;  op2val:0x00100000000003
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x008000fffff7ff, 0x00100000000003, x1, 808, x2)

inst_120:
// rs1_w0_val == 4294966783, rs2_w0_val == 16777216
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffffdff;  op2val:0x00000701000000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffffdff, 0x00000701000000, x1, 816, x2)

inst_121:
// rs1_w0_val == 4294967167, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100ffffff7f;  op2val:0x000080ffffefff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x000100ffffff7f, 0x000080ffffefff, x1, 824, x2)

inst_122:
// rs1_w0_val == 4294967231, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffffffbf;  op2val:0x000800fffff7ff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x000040ffffffbf, 0x000800fffff7ff, x1, 832, x2)

inst_123:
// rs2_w0_val == 268435456, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000f00020000;  op2val:0x00001110000000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00000f00020000, 0x00001110000000, x1, 840, x2)

inst_124:
// rs1_w0_val == 4294967279, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007ffffffef;  op2val:0xfbffffff00000040
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x000007ffffffef, 0xfbffffff00000040, x1, 848, x2)

inst_125:
// rs2_w0_val == 67108864, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffff7ffff;  op2val:0xfffffffe04000000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xeffffffffff7ffff, 0xfffffffe04000000, x1, 856, x2)

inst_126:
// rs1_w0_val == 4294967294, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007fffffffe;  op2val:0x00400002000000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x000007fffffffe, 0x00400002000000, x1, 864, x2)

inst_127:
// rs2_w0_val == 8388608, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fffffdff;  op2val:0x80000000800000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffffdff, 0x80000000800000, x1, 872, x2)

inst_128:
// rs2_w0_val == 131072, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffffffff;  op2val:0xfffff7ff00020000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xffdfffffffffffff, 0xfffff7ff00020000, x1, 880, x2)

inst_129:
// rs2_w0_val == 524288, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020ffffffef;  op2val:0xf7ffffff00080000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x000020ffffffef, 0xf7ffffff00080000, x1, 888, x2)

inst_130:
// rs2_w0_val == 4096, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000b0000000c;  op2val:0xfffeffff00001000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00000b0000000c, 0xfffeffff00001000, x1, 896, x2)

inst_131:
// rs2_w0_val == 2048, 
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000d;  op2val:0xfffffeff00000800
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x1000000000000d, 0xfffffeff00000800, x1, 904, x2)

inst_132:
// rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 536870912
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000000a;  op2val:0x00000a0000000a
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x200000000000000a, 0x00000a0000000a, x1, 912, x2)

inst_133:
// rs2_w1_val == 2863311530, rs1_w0_val == 4294967295, rs2_w0_val == 4261412863, rs1_w1_val == 2048
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffffffff;  op2val:0xaaaaaaaafdffffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x000800ffffffff, 0xaaaaaaaafdffffff, x1, 920, x2)

inst_134:
// rs2_w1_val == 1431655765, rs1_w1_val == 8, rs2_w0_val == 16384, rs1_w0_val == 8388608
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800800000;  op2val:0x5555555500004000
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0x00000800800000, 0x5555555500004000, x1, 928, x2)

inst_135:
// rs2_w1_val == 4294443007, rs2_w0_val == 4294901759
// opcode: uradd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700800000;  op2val:0xfff7fffffffeffff
TEST_RR_OP(uradd32, x31, x30, x29, 0x0000000000000000, 0xfffffff700800000, 0xfff7fffffffeffff, x1, 936, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 118*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
