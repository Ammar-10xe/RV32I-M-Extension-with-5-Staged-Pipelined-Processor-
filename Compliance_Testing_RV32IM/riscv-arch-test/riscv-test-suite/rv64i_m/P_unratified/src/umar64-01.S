
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umar64 instruction of the RISC-V RV64PZicsr extension for the umar64 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umar64)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 == rd != rs2, rs1==x16, rs2==x0, rd==x16, rs1_w0_val == 0, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 4293918719, rs2_w0_val == 8388608, rs1_w1_val == 4294967291
// opcode: umar64 ; op1:x16; op2:x0; dest:x16; op1val:0xfffffffb00000000;  op2val:0xffefffff00800000
TEST_P64_PNN_OP(umar64, x16, $rd_hi, x16, x0, 0x0000000000000000, $correctval_hi, 0xfffffffb00000000, 0xffefffff00800000, x5, 0, x7)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x6, rs2==x17, rd==x10, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 4294966271, rs2_w1_val == 3758096383, rs2_w0_val == 4160749567, rs1_w1_val == 3758096383
// opcode: umar64 ; op1:x6; op2:x17; dest:x10; op1val:0xdffffffffffffbff;  op2val:0xdffffffff7ffffff
TEST_P64_PNN_OP(umar64, x10, $rd_hi, x6, x17, 0x0000000000000000, $correctval_hi, 0xdffffffffffffbff, 0xdffffffff7ffffff, x5, 16, x7)

inst_2:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x2, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 1048576, rs2_w0_val == 4096, rs1_w0_val == 4096
// opcode: umar64 ; op1:x31; op2:x31; dest:x2; op1val:0x0010000000001000;  op2val:0x0000000b00001000
TEST_P64_PNN_OP(umar64, x2, $rd_hi, x31, x31, 0x0000000000000000, $correctval_hi, 0x0010000000001000, 0x0000000b00001000, x5, 32, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x20, rs2==x20, rd==x20, rs2_w1_val == 2863311530, rs1_w1_val == 8192, rs1_w0_val == 4294967294, rs2_w0_val == 128
// opcode: umar64 ; op1:x20; op2:x20; dest:x20; op1val:0x00002000fffffffe;  op2val:0xaaaaaaaa00000080
TEST_P64_PNN_OP(umar64, x20, $rd_hi, x20, x20, 0x0000000000000000, $correctval_hi, 0x00002000fffffffe, 0xaaaaaaaa00000080, x5, 48, x7)

inst_4:
// rs2 == rd != rs1, rs1==x11, rs2==x24, rd==x24, rs2_w1_val == 1431655765, rs1_w1_val == 4294967231, rs1_w0_val == 4286578687, rs2_w0_val == 4292870143
// opcode: umar64 ; op1:x11; op2:x24; dest:x24; op1val:0xffffffbfff7fffff;  op2val:0x55555555ffdfffff
TEST_P64_PNN_OP(umar64, x24, $rd_hi, x11, x24, 0x0000000000000000, $correctval_hi, 0xffffffbfff7fffff, 0x55555555ffdfffff, x5, 64, x7)

inst_5:
// rs1==x17, rs2==x1, rd==x14, rs2_w1_val == 2147483647, rs1_w0_val == 128, rs1_w1_val == 16777216
// opcode: umar64 ; op1:x17; op2:x1; dest:x14; op1val:0x0100000000000080;  op2val:0x7fffffff00000080
TEST_P64_PNN_OP(umar64, x14, $rd_hi, x17, x1, 0x0000000000000000, $correctval_hi, 0x0100000000000080, 0x7fffffff00000080, x5, 80, x7)

inst_6:
// rs1==x15, rs2==x14, rd==x22, rs2_w1_val == 3221225471, rs1_w0_val == 4294967039, rs2_w0_val == 4294963199, rs1_w1_val == 32768
// opcode: umar64 ; op1:x15; op2:x14; dest:x22; op1val:0x00008000fffffeff;  op2val:0xbfffffffffffefff
TEST_P64_PNN_OP(umar64, x22, $rd_hi, x15, x14, 0x0000000000000000, $correctval_hi, 0x00008000fffffeff, 0xbfffffffffffefff, x5, 96, x7)

inst_7:
// rs1==x13, rs2==x2, rd==x12, rs2_w1_val == 4026531839, rs1_w0_val == 256, rs1_w1_val == 4294965247
// opcode: umar64 ; op1:x13; op2:x2; dest:x12; op1val:0xfffff7ff00000100;  op2val:0xefffffff00001000
TEST_P64_PNN_OP(umar64, x12, $rd_hi, x13, x2, 0x0000000000000000, $correctval_hi, 0xfffff7ff00000100, 0xefffffff00001000, x5, 112, x7)

inst_8:
// rs1==x28, rs2==x4, rd==x30, rs2_w1_val == 4160749567, rs2_w0_val == 2, rs1_w0_val == 33554432, rs1_w1_val == 1
// opcode: umar64 ; op1:x28; op2:x4; dest:x30; op1val:0x0000000102000000;  op2val:0xf7ffffff00000002
TEST_P64_PNN_OP(umar64, x30, $rd_hi, x28, x4, 0x0000000000000000, $correctval_hi, 0x0000000102000000, 0xf7ffffff00000002, x5, 128, x7)

inst_9:
// rs1==x10, rs2==x26, rd==x8, rs2_w1_val == 4227858431, rs1_w1_val == 4194304, rs2_w0_val == 256
// opcode: umar64 ; op1:x10; op2:x26; dest:x8; op1val:0x004000000000000b;  op2val:0xfbffffff00000100
TEST_P64_PNN_OP(umar64, x8, $rd_hi, x10, x26, 0x0000000000000000, $correctval_hi, 0x004000000000000b, 0xfbffffff00000100, x5, 144, x7)

inst_10:
// rs1==x26, rs2==x27, rd==x18, rs2_w1_val == 4261412863, rs1_w1_val == 4294950911, rs2_w0_val == 2863311530, rs1_w0_val == 4293918719
// opcode: umar64 ; op1:x26; op2:x27; dest:x18; op1val:0xffffbfffffefffff;  op2val:0xfdffffffaaaaaaaa
TEST_P64_PNN_OP(umar64, x18, $rd_hi, x26, x27, 0x0000000000000000, $correctval_hi, 0xffffbfffffefffff, 0xfdffffffaaaaaaaa, x5, 160, x7)

inst_11:
// rs1==x19, rs2==x13, rd==x6, rs2_w1_val == 4278190079, 
// opcode: umar64 ; op1:x19; op2:x13; dest:x6; op1val:0xffffffbf00000007;  op2val:0xfeffffffaaaaaaaa
TEST_P64_PNN_OP(umar64, x6, $rd_hi, x19, x13, 0x0000000000000000, $correctval_hi, 0xffffffbf00000007, 0xfeffffffaaaaaaaa, x5, 176, x7)

inst_12:
// rs1==x30, rs2==x25, rd==x28, rs2_w1_val == 4286578687, rs2_w0_val == 4294966271, rs1_w0_val == 4294959103, rs1_w1_val == 4261412863
// opcode: umar64 ; op1:x30; op2:x25; dest:x28; op1val:0xfdffffffffffdfff;  op2val:0xff7ffffffffffbff
TEST_P64_PNN_OP(umar64, x28, $rd_hi, x30, x25, 0x0000000000000000, $correctval_hi, 0xfdffffffffffdfff, 0xff7ffffffffffbff, x5, 192, x7)

inst_13:
// rs1==x0, rs2==x23, rd==x26, rs2_w1_val == 4290772991, rs1_w0_val == 4294966783
// opcode: umar64 ; op1:x0; op2:x23; dest:x26; op1val:0x00000006fffffdff;  op2val:0xffbfffff00000080
TEST_P64_PNN_OP(umar64, x26, $rd_hi, x0, x23, 0x0000000000000000, $correctval_hi, 0x00000006fffffdff, 0xffbfffff00000080, x5, 208, x7)

inst_14:
// rs1==x8, rs2==x10, rd==x4, rs2_w1_val == 4292870143, rs2_w0_val == 2097152
// opcode: umar64 ; op1:x8; op2:x10; dest:x4; op1val:0x0000000c00000013;  op2val:0xffdfffff00200000
TEST_P64_PNN_OP(umar64, x4, $rd_hi, x8, x10, 0x0000000000000000, $correctval_hi, 0x0000000c00000013, 0xffdfffff00200000, x5, 224, x7)

inst_15:
// rs1==x14, rs2==x30, rs2_w1_val == 4294443007, rs1_w1_val == 4294901759
// opcode: umar64 ; op1:x14; op2:x30; dest:x3; op1val:0xfffeffff00000003;  op2val:0xfff7ffff0000000a
TEST_P64_PNN_OP(umar64, x3, $rd_hi, x14, x30, 0x0000000000000000, $correctval_hi, 0xfffeffff00000003, 0xfff7ffff0000000a, x5, 240, x7)

inst_16:
// rs1==x21, rs2==x29, rs2_w1_val == 4294705151, rs2_w0_val == 268435456
// opcode: umar64 ; op1:x21; op2:x29; dest:x24; op1val:0x0000000fffffdfff;  op2val:0xfffbffff10000000
TEST_P64_PNN_OP(umar64, x24, $rd_hi, x21, x29, 0x0000000000000000, $correctval_hi, 0x0000000fffffdfff, 0xfffbffff10000000, x5, 256, x8)
RVTEST_SIGBASE(x13,signature_x13_0)

inst_17:
// rs1==x3, rs2==x18, rs2_w1_val == 4294836223, rs1_w0_val == 4294901759, rs2_w0_val == 1073741824, rs1_w1_val == 65536
// opcode: umar64 ; op1:x3; op2:x18; dest:x17; op1val:0x00010000fffeffff;  op2val:0xfffdffff40000000
TEST_P64_PNN_OP(umar64, x17, $rd_hi, x3, x18, 0x0000000000000000, $correctval_hi, 0x00010000fffeffff, 0xfffdffff40000000, x13, 0, x8)

inst_18:
// rs1==x7, rs2==x3, rs2_w1_val == 4294901759, 
// opcode: umar64 ; op1:x7; op2:x3; dest:x6; op1val:0x0000001200000080;  op2val:0xfffeffff00000006
TEST_P64_PNN_OP(umar64, x6, $rd_hi, x7, x3, 0x0000000000000000, $correctval_hi, 0x0000001200000080, 0xfffeffff00000006, x13, 16, x8)

inst_19:
// rs1==x5, rs2==x12, rs2_w1_val == 4294934527, rs1_w0_val == 4, rs1_w1_val == 268435456, rs2_w0_val == 4294967287
// opcode: umar64 ; op1:x5; op2:x12; dest:x3; op1val:0x1000000000000004;  op2val:0xffff7ffffffffff7
TEST_P64_PNN_OP(umar64, x3, $rd_hi, x5, x12, 0x0000000000000000, $correctval_hi, 0x1000000000000004, 0xffff7ffffffffff7, x13, 32, x8)

inst_20:
// rs1==x1, rs2==x11, rs2_w1_val == 4294950911, rs1_w1_val == 4294966783
// opcode: umar64 ; op1:x1; op2:x11; dest:x16; op1val:0xfffffdfffffffdff;  op2val:0xffffbfffaaaaaaaa
TEST_P64_PNN_OP(umar64, x16, $rd_hi, x1, x11, 0x0000000000000000, $correctval_hi, 0xfffffdfffffffdff, 0xffffbfffaaaaaaaa, x13, 48, x8)

inst_21:
// rs1==x29, rs2==x5, rs2_w1_val == 4294959103, rs1_w0_val == 4294967293, rs1_w1_val == 4294836223
// opcode: umar64 ; op1:x29; op2:x5; dest:x25; op1val:0xfffdfffffffffffd;  op2val:0xffffdfff00000009
TEST_P64_PNN_OP(umar64, x25, $rd_hi, x29, x5, 0x0000000000000000, $correctval_hi, 0xfffdfffffffffffd, 0xffffdfff00000009, x13, 64, x8)

inst_22:
// rs1==x9, rs2==x21, rs2_w1_val == 4294963199, rs1_w1_val == 4294934527
// opcode: umar64 ; op1:x9; op2:x21; dest:x30; op1val:0xffff7ffffffffdff;  op2val:0xffffefff0000000c
TEST_P64_PNN_OP(umar64, x30, $rd_hi, x9, x21, 0x0000000000000000, $correctval_hi, 0xffff7ffffffffdff, 0xffffefff0000000c, x13, 80, x8)

inst_23:
// rs1==x27, rs2==x22, rs2_w1_val == 4294965247, rs1_w0_val == 3221225471
// opcode: umar64 ; op1:x27; op2:x22; dest:x20; op1val:0x00000003bfffffff;  op2val:0xfffff7ff40000000
TEST_P64_PNN_OP(umar64, x20, $rd_hi, x27, x22, 0x0000000000000000, $correctval_hi, 0x00000003bfffffff, 0xfffff7ff40000000, x13, 96, x8)

inst_24:
// rs1==x22, rs2==x16, rs2_w1_val == 4294966271, rs1_w0_val == 4294963199
// opcode: umar64 ; op1:x22; op2:x16; dest:x14; op1val:0x00008000ffffefff;  op2val:0xfffffbff00800000
TEST_P64_PNN_OP(umar64, x14, $rd_hi, x22, x16, 0x0000000000000000, $correctval_hi, 0x00008000ffffefff, 0xfffffbff00800000, x13, 112, x8)

inst_25:
// rs1==x2, rs2==x9, rs2_w1_val == 4294966783, rs1_w1_val == 4026531839, rs2_w0_val == 4294967231, rs1_w0_val == 16384
// opcode: umar64 ; op1:x2; op2:x9; dest:x10; op1val:0xefffffff00004000;  op2val:0xfffffdffffffffbf
TEST_P64_PNN_OP(umar64, x10, $rd_hi, x2, x9, 0x0000000000000000, $correctval_hi, 0xefffffff00004000, 0xfffffdffffffffbf, x13, 128, x8)

inst_26:
// rs1==x4, rs2==x15, rs2_w1_val == 4294967039, rs1_w0_val == 131072, rs2_w0_val == 3758096383
// opcode: umar64 ; op1:x4; op2:x15; dest:x28; op1val:0xfffff7ff00020000;  op2val:0xfffffeffdfffffff
TEST_P64_PNN_OP(umar64, x28, $rd_hi, x4, x15, 0x0000000000000000, $correctval_hi, 0xfffff7ff00020000, 0xfffffeffdfffffff, x13, 144, x8)

inst_27:
// rs1==x18, rs2==x6, rs2_w1_val == 4294967167, rs1_w1_val == 1431655765
// opcode: umar64 ; op1:x18; op2:x6; dest:x7; op1val:0x5555555500000009;  op2val:0xffffff7f0000000a
TEST_P64_PNN_OP(umar64, x7, $rd_hi, x18, x6, 0x0000000000000000, $correctval_hi, 0x5555555500000009, 0xffffff7f0000000a, x13, 160, x8)

inst_28:
// rs1==x25, rs2==x19, rs2_w1_val == 4294967231, rs1_w0_val == 16777216, rs1_w1_val == 4294967039, rs2_w0_val == 4026531839
// opcode: umar64 ; op1:x25; op2:x19; dest:x2; op1val:0xfffffeff01000000;  op2val:0xffffffbfefffffff
TEST_P64_PNN_OP(umar64, x2, $rd_hi, x25, x19, 0x0000000000000000, $correctval_hi, 0xfffffeff01000000, 0xffffffbfefffffff, x13, 176, x8)

inst_29:
// rs1==x12, rs2==x8, rs2_w1_val == 4294967263, rs1_w0_val == 512, rs2_w0_val == 0, rs1_w1_val == 8388608
// opcode: umar64 ; op1:x12; op2:x8; dest:x30; op1val:0x0080000000000200;  op2val:0xffffffdf00000000
TEST_P64_PNN_OP(umar64, x30, $rd_hi, x12, x8, 0x0000000000000000, $correctval_hi, 0x0080000000000200, 0xffffffdf00000000, x13, 192, x2)

inst_30:
// rs1==x23, rs2==x7, rs2_w1_val == 4294967279, rs2_w0_val == 1431655765
// opcode: umar64 ; op1:x23; op2:x7; dest:x22; op1val:0x0000000c02000000;  op2val:0xffffffef55555555
TEST_P64_PNN_OP(umar64, x22, $rd_hi, x23, x7, 0x0000000000000000, $correctval_hi, 0x0000000c02000000, 0xffffffef55555555, x13, 208, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x24, rs2==x28, rs2_w1_val == 4294967287, rs2_w0_val == 8192, rs1_w0_val == 4294967279
// opcode: umar64 ; op1:x24; op2:x28; dest:x3; op1val:0xfffff7ffffffffef;  op2val:0xfffffff700002000
TEST_P64_PNN_OP(umar64, x3, $rd_hi, x24, x28, 0x0000000000000000, $correctval_hi, 0xfffff7ffffffffef, 0xfffffff700002000, x1, 0, x2)

inst_32:
// rs2_w1_val == 4294967291, rs1_w1_val == 1073741824, rs2_w0_val == 32
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffffefff;  op2val:0xfffffffb00000020
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x40000000ffffefff, 0xfffffffb00000020, x1, 16, x2)

inst_33:
// rs2_w1_val == 4294967293, rs1_w0_val == 1048576
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000900100000;  op2val:0xfffffffd00000003
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000900100000, 0xfffffffd00000003, x1, 32, x2)

inst_34:
// rs2_w1_val == 4294967294, rs2_w0_val == 16777216, rs1_w0_val == 4294967263
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000ffffffdf;  op2val:0xfffffffe01000000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00008000ffffffdf, 0xfffffffe01000000, x1, 48, x2)

inst_35:
// rs2_w1_val == 2147483648, rs2_w0_val == 4261412863, rs1_w0_val == 4294967231
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000005ffffffbf;  op2val:0x80000000fdffffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000005ffffffbf, 0x80000000fdffffff, x1, 64, x2)

inst_36:
// rs2_w1_val == 1073741824, rs2_w0_val == 4194304
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000cfffffeff;  op2val:0x4000000000400000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000cfffffeff, 0x4000000000400000, x1, 80, x2)

inst_37:
// rs2_w1_val == 536870912, rs1_w0_val == 4294967167, rs1_w1_val == 2
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000002ffffff7f;  op2val:0x20000000fffffff7
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000002ffffff7f, 0x20000000fffffff7, x1, 96, x2)

inst_38:
// rs2_w1_val == 268435456, rs1_w0_val == 4292870143, rs1_w1_val == 4278190079
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffdfffff;  op2val:0x1000000000000013
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeffffffffdfffff, 0x1000000000000013, x1, 112, x2)

inst_39:
// rs2_w1_val == 134217728, rs2_w0_val == 4293918719
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000009fffffbff;  op2val:0x08000000ffefffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000009fffffbff, 0x08000000ffefffff, x1, 128, x2)

inst_40:
// rs2_w1_val == 67108864, rs2_w0_val == 4, rs1_w0_val == 3758096383, rs1_w1_val == 2147483647
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffdfffffff;  op2val:0x0400000000000004
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fffffffdfffffff, 0x0400000000000004, x1, 144, x2)

inst_41:
// rs2_w1_val == 33554432, rs1_w0_val == 262144
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000b00040000;  op2val:0x0200000000001000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000b00040000, 0x0200000000001000, x1, 160, x2)

inst_42:
// rs2_w1_val == 16777216, rs2_w0_val == 4294901759
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0100000000000000;  op2val:0x01000000fffeffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0100000000000000, 0x01000000fffeffff, x1, 176, x2)

inst_43:
// rs2_w1_val == 8388608, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff02000000;  op2val:0x0080000000000002
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffeff02000000, 0x0080000000000002, x1, 192, x2)

inst_44:
// rs2_w1_val == 4194304, rs1_w0_val == 4294705151, rs1_w1_val == 67108864
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000fffbffff;  op2val:0x0040000000002000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x04000000fffbffff, 0x0040000000002000, x1, 208, x2)

inst_45:
// rs2_w1_val == 2097152, rs1_w1_val == 4290772991, rs1_w0_val == 4294934527, rs2_w0_val == 2048
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffff7fff;  op2val:0x0020000000000800
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbfffffffff7fff, 0x0020000000000800, x1, 224, x2)

inst_46:
// rs2_w1_val == 1048576, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000013;  op2val:0x0010000055555555
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffdff00000013, 0x0010000055555555, x1, 240, x2)

inst_47:
// rs2_w1_val == 524288, rs2_w0_val == 4294967263, rs1_w1_val == 128
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000008000000006;  op2val:0x00080000ffffffdf
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000008000000006, 0x00080000ffffffdf, x1, 256, x2)

inst_48:
// rs2_w1_val == 262144, rs2_w0_val == 2147483647, rs1_w0_val == 134217728
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff08000000;  op2val:0x000400007fffffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfffffff08000000, 0x000400007fffffff, x1, 272, x2)

inst_49:
// rs2_w1_val == 131072, rs2_w0_val == 4286578687, rs1_w0_val == 4294443007
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000002fff7ffff;  op2val:0x00020000ff7fffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000002fff7ffff, 0x00020000ff7fffff, x1, 288, x2)

inst_50:
// rs2_w1_val == 65536, rs2_w0_val == 1048576
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000000b;  op2val:0x0001000000100000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x400000000000000b, 0x0001000000100000, x1, 304, x2)

inst_51:
// rs2_w1_val == 32768, rs1_w1_val == 262144
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000fffffdff;  op2val:0x00008000ffffffdf
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00040000fffffdff, 0x00008000ffffffdf, x1, 320, x2)

inst_52:
// rs1_w0_val == 65536, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0001000000010000;  op2val:0x0000000c01000000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001000000010000, 0x0000000c01000000, x1, 336, x2)

inst_53:
// rs1_w0_val == 32768, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00008000;  op2val:0xfffdffff0000000f
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffeff00008000, 0xfffdffff0000000f, x1, 352, x2)

inst_54:
// rs1_w0_val == 8192, rs2_w0_val == 4294967279
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00002000;  op2val:0x0000000dffffffef
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefffffff00002000, 0x0000000dffffffef, x1, 368, x2)

inst_55:
// rs1_w0_val == 2048, rs2_w0_val == 4294950911, rs1_w1_val == 512
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000020000000800;  op2val:0x01000000ffffbfff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000020000000800, 0x01000000ffffbfff, x1, 384, x2)

inst_56:
// rs1_w0_val == 1024, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000700000400;  op2val:0x0000001100001000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000700000400, 0x0000001100001000, x1, 400, x2)

inst_57:
// rs1_w0_val == 64, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000500000040;  op2val:0xff7fffff0000000c
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000500000040, 0xff7fffff0000000c, x1, 416, x2)

inst_58:
// rs1_w0_val == 32, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000900000020;  op2val:0x4000000000001000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000900000020, 0x4000000000001000, x1, 432, x2)

inst_59:
// rs1_w0_val == 16, rs1_w1_val == 4294967295, rs2_w1_val == 4294967295
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000010;  op2val:0xffffffffffffffef
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffff00000010, 0xffffffffffffffef, x1, 448, x2)

inst_60:
// rs1_w0_val == 8, rs1_w1_val == 4294967293
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000008;  op2val:0xfffbffff00000004
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffd00000008, 0xfffbffff00000004, x1, 464, x2)

inst_61:
// rs1_w0_val == 2, rs1_w1_val == 536870912
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000002;  op2val:0x0001000001000000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000000000000002, 0x0001000001000000, x1, 480, x2)

inst_62:
// rs1_w0_val == 1, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000001;  op2val:0x8000000055555555
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffbfff00000001, 0x8000000055555555, x1, 496, x2)

inst_63:
// rs1_w0_val == 4294967295, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffffff;  op2val:0x004000007fffffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfffffffffffffff, 0x004000007fffffff, x1, 512, x2)

inst_64:
// rs2_w1_val == 16384, rs2_w0_val == 131072
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x000000110000000a;  op2val:0x0000400000020000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000000110000000a, 0x0000400000020000, x1, 528, x2)

inst_65:
// rs2_w1_val == 8192, rs1_w1_val == 4294967167
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fdfffffff;  op2val:0x0000200010000000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffff7fdfffffff, 0x0000200010000000, x1, 544, x2)

inst_66:
// rs2_w1_val == 4096, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000b00000011;  op2val:0x00001000ffefffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000b00000011, 0x00001000ffefffff, x1, 560, x2)

inst_67:
// rs2_w1_val == 2048, rs2_w0_val == 4294967293
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0080000000000002;  op2val:0x00000800fffffffd
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080000000000002, 0x00000800fffffffd, x1, 576, x2)

inst_68:
// rs2_w1_val == 1024, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000002;  op2val:0x0000040000100000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffeffff00000002, 0x0000040000100000, x1, 592, x2)

inst_69:
// rs2_w1_val == 512, rs1_w0_val == 2863311530, rs2_w0_val == 3221225471
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000aaaaaaaa;  op2val:0x00000200bfffffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00800000aaaaaaaa, 0x00000200bfffffff, x1, 608, x2)

inst_70:
// rs2_w1_val == 256, rs1_w1_val == 4160749567, rs1_w0_val == 2097152
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00200000;  op2val:0x000001007fffffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ffffff00200000, 0x000001007fffffff, x1, 624, x2)

inst_71:
// rs2_w1_val == 128, rs1_w1_val == 8, rs1_w0_val == 4290772991
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000008ffbfffff;  op2val:0x00000080ffffefff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000008ffbfffff, 0x00000080ffffefff, x1, 640, x2)

inst_72:
// rs2_w1_val == 64, rs1_w0_val == 8388608, rs1_w1_val == 4294966271
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00800000;  op2val:0x00000040fdffffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffbff00800000, 0x00000040fdffffff, x1, 656, x2)

inst_73:
// rs2_w1_val == 32, rs1_w1_val == 4294967263
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffbff;  op2val:0x0000002000800000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdffffffbff, 0x0000002000800000, x1, 672, x2)

inst_74:
// rs2_w1_val == 16, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000006ffffffff;  op2val:0x00000010ffffefff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000006ffffffff, 0x00000010ffffefff, x1, 688, x2)

inst_75:
// rs2_w1_val == 8, rs2_w0_val == 1024
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000001300010000;  op2val:0x0000000800000400
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000001300010000, 0x0000000800000400, x1, 704, x2)

inst_76:
// rs2_w1_val == 4, rs2_w0_val == 4294965247
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000011;  op2val:0x00000004fffff7ff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffbf00000011, 0x00000004fffff7ff, x1, 720, x2)

inst_77:
// rs2_w1_val == 2, rs2_w0_val == 4294967291
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000300100000;  op2val:0x00000002fffffffb
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000300100000, 0x00000002fffffffb, x1, 736, x2)

inst_78:
// rs2_w1_val == 1, rs1_w0_val == 4278190079, rs2_w0_val == 32768
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000feffffff;  op2val:0x0000000100008000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x01000000feffffff, 0x0000000100008000, x1, 752, x2)

inst_79:
// rs2_w1_val == 0, rs1_w0_val == 1431655765
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000155555555;  op2val:0x0000000000000007
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000155555555, 0x0000000000000007, x1, 768, x2)

inst_80:
// rs2_w0_val == 4227858431, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00010000;  op2val:0xfffffefffbffffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffff00010000, 0xfffffefffbffffff, x1, 784, x2)

inst_81:
// rs2_w0_val == 4278190079, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000007ffffffef;  op2val:0x00000080feffffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000007ffffffef, 0x00000080feffffff, x1, 800, x2)

inst_82:
// rs2_w0_val == 4290772991, rs1_w1_val == 4294967294
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffffdf;  op2val:0x00000013ffbfffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffeffffffdf, 0x00000013ffbfffff, x1, 816, x2)

inst_83:
// rs2_w0_val == 4294443007, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000300100000;  op2val:0x00000007fff7ffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000300100000, 0x00000007fff7ffff, x1, 832, x2)

inst_84:
// rs2_w0_val == 4294705151, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000900000080;  op2val:0x40000000fffbffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000900000080, 0x40000000fffbffff, x1, 848, x2)

inst_85:
// rs2_w0_val == 4294836223, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000001;  op2val:0x00000013fffdffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefffffff00000001, 0x00000013fffdffff, x1, 864, x2)

inst_86:
// rs2_w0_val == 4294934527, rs1_w1_val == 4294963199
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff0000000a;  op2val:0xfffffffbffff7fff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffefff0000000a, 0xfffffffbffff7fff, x1, 880, x2)

inst_87:
// rs2_w0_val == 4294959103, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd55555555;  op2val:0xffffefffffffdfff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffd55555555, 0xffffefffffffdfff, x1, 896, x2)

inst_88:
// rs2_w0_val == 512, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00100000;  op2val:0x0000000f00000200
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fffffff00100000, 0x0000000f00000200, x1, 912, x2)

inst_89:
// rs2_w0_val == 64, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000003fffbffff;  op2val:0x0000000300000040
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000003fffbffff, 0x0000000300000040, x1, 928, x2)

inst_90:
// rs2_w0_val == 16, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000011ffbfffff;  op2val:0xbfffffff00000010
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000011ffbfffff, 0xbfffffff00000010, x1, 944, x2)

inst_91:
// rs2_w0_val == 8, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffeffff;  op2val:0x0000000100000008
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffff7ffffeffff, 0x0000000100000008, x1, 960, x2)

inst_92:
// rs2_w0_val == 1, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000003;  op2val:0xefffffff00000001
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffefff00000003, 0xefffffff00000001, x1, 976, x2)

inst_93:
// rs2_w0_val == 4294967295, rs1_w1_val == 1024
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400fffffffe;  op2val:0x00000010ffffffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000400fffffffe, 0x00000010ffffffff, x1, 992, x2)

inst_94:
// rs1_w1_val == 2863311530, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffffffef;  op2val:0xffdfffffaaaaaaaa
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaaaaaaffffffef, 0xffdfffffaaaaaaaa, x1, 1008, x2)

inst_95:
// rs1_w1_val == 3221225471, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000005;  op2val:0xfffeffffffbfffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbfffffff00000005, 0xfffeffffffbfffff, x1, 1024, x2)

inst_96:
// rs1_w1_val == 4227858431, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffeffff;  op2val:0x0000000300000000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbfffffffffeffff, 0x0000000300000000, x1, 1040, x2)

inst_97:
// rs1_w1_val == 4286578687, rs1_w0_val == 4194304
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00400000;  op2val:0xffffbfff00000010
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7fffff00400000, 0xffffbfff00000010, x1, 1056, x2)

inst_98:
// rs1_w1_val == 4292870143, rs1_w0_val == 4294965247
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffff7ff;  op2val:0xffffffdffffffffb
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdffffffffff7ff, 0xffffffdffffffffb, x1, 1072, x2)

inst_99:
// rs1_w1_val == 4293918719, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000007;  op2val:0x0000010000000008
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffefffff00000007, 0x0000010000000008, x1, 1088, x2)

inst_100:
// rs1_w1_val == 4294443007, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffff7f;  op2val:0x0000008000000007
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7ffffffffff7f, 0x0000008000000007, x1, 1104, x2)

inst_101:
// rs1_w1_val == 4294705151, rs1_w0_val == 524288
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00080000;  op2val:0x00000006fffbffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffbffff00080000, 0x00000006fffbffff, x1, 1120, x2)

inst_102:
// rs1_w1_val == 4294959103, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffff7fff;  op2val:0x0000000600000020
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffdfffffff7fff, 0x0000000600000020, x1, 1136, x2)

inst_103:
// rs1_w1_val == 4294967279, rs1_w0_val == 4294950911
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffffbfff;  op2val:0x0000020000000800
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffefffffbfff, 0x0000020000000800, x1, 1152, x2)

inst_104:
// rs1_w1_val == 4294967287, rs2_w0_val == 4294967167
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffefffff;  op2val:0x0000000dffffff7f
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff7ffefffff, 0x0000000dffffff7f, x1, 1168, x2)

inst_105:
// rs1_w1_val == 2147483648, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffffff;  op2val:0x0000040000008000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x80000000ffffffff, 0x0000040000008000, x1, 1184, x2)

inst_106:
// rs1_w1_val == 134217728, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000ffffffef;  op2val:0xffffffff00000010
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x08000000ffffffef, 0xffffffff00000010, x1, 1200, x2)

inst_107:
// rs1_w1_val == 33554432, rs2_w0_val == 524288
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000fffffbff;  op2val:0x0002000000080000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x02000000fffffbff, 0x0002000000080000, x1, 1216, x2)

inst_108:
// rs1_w1_val == 2097152, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0020000000100000;  op2val:0xffffefff00000002
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020000000100000, 0xffffefff00000002, x1, 1232, x2)

inst_109:
// rs1_w1_val == 524288, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000fff7ffff;  op2val:0x0000001100000008
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00080000fff7ffff, 0x0000001100000008, x1, 1248, x2)

inst_110:
// rs1_w1_val == 131072, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0002000000040000;  op2val:0xffefffff0000000d
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0002000000040000, 0xffefffff0000000d, x1, 1264, x2)

inst_111:
// rs1_w1_val == 16384, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000400000000002;  op2val:0xffdffffffeffffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000400000000002, 0xffdffffffeffffff, x1, 1280, x2)

inst_112:
// rs1_w1_val == 4096, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000100000008000;  op2val:0xffffffdffeffffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000100000008000, 0xffffffdffeffffff, x1, 1296, x2)

inst_113:
// rs1_w1_val == 2048, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000080000000200;  op2val:0x100000000000000a
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000080000000200, 0x100000000000000a, x1, 1312, x2)

inst_114:
// rs1_w1_val == 256, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000010000000007;  op2val:0x0000040000000020
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000010000000007, 0x0000040000000020, x1, 1328, x2)

inst_115:
// rs1_w1_val == 64, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000004000000009;  op2val:0x0000000afdffffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000004000000009, 0x0000000afdffffff, x1, 1344, x2)

inst_116:
// rs1_w1_val == 32, rs2_w0_val == 134217728
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000002000040000;  op2val:0xffffffdf08000000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000002000040000, 0xffffffdf08000000, x1, 1360, x2)

inst_117:
// rs1_w1_val == 16, rs2_w0_val == 536870912
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000010dfffffff;  op2val:0x0000000620000000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000010dfffffff, 0x0000000620000000, x1, 1376, x2)

inst_118:
// rs1_w1_val == 4, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000004fffffbff;  op2val:0xffffffdf0000000e
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000004fffffbff, 0xffffffdf0000000e, x1, 1392, x2)

inst_119:
// rs1_w1_val == 0, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000000000013;  op2val:0x0001000000000100
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000000000013, 0x0001000000000100, x1, 1408, x2)

inst_120:
// rs1_w0_val == 2147483647, rs2_w0_val == 4294967294
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x000000087fffffff;  op2val:0x0000000cfffffffe
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000000087fffffff, 0x0000000cfffffffe, x1, 1424, x2)

inst_121:
// rs1_w0_val == 4026531839, rs2_w0_val == 33554432
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffefffffff;  op2val:0x0000000902000000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffefffffefffffff, 0x0000000902000000, x1, 1440, x2)

inst_122:
// rs1_w0_val == 4160749567, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffff7ffffff;  op2val:0xffffff7ffffdffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdffffffff7ffffff, 0xffffff7ffffdffff, x1, 1456, x2)

inst_123:
// rs1_w0_val == 4227858431, rs2_w0_val == 2147483648
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fbffffff;  op2val:0x0000080080000000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x10000000fbffffff, 0x0000080080000000, x1, 1472, x2)

inst_124:
// rs1_w0_val == 4261412863, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000fdffffff;  op2val:0x00000020fffffffe
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00040000fdffffff, 0x00000020fffffffe, x1, 1488, x2)

inst_125:
// rs2_w0_val == 4294966783, rs1_w0_val == 268435456
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff10000000;  op2val:0xff7ffffffffffdff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7fff10000000, 0xff7ffffffffffdff, x1, 1504, x2)

inst_126:
// rs1_w0_val == 4294836223, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400fffdffff;  op2val:0x1000000055555555
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000400fffdffff, 0x1000000055555555, x1, 1520, x2)

inst_127:
// rs1_w0_val == 67108864, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf04000000;  op2val:0xfffeffff00100000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdf04000000, 0xfffeffff00100000, x1, 1536, x2)

inst_128:
// rs2_w0_val == 4294967039, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000008000080000;  op2val:0x00000000fffffeff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000008000080000, 0x00000000fffffeff, x1, 1552, x2)

inst_129:
// rs1_w0_val == 4294967287, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffff7;  op2val:0x55555555ffffffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdffffffff7, 0x55555555ffffffff, x1, 1568, x2)

inst_130:
// rs2_w0_val == 67108864, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdefffffff;  op2val:0x0000000f04000000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffdefffffff, 0x0000000f04000000, x1, 1584, x2)

inst_131:
// rs1_w0_val == 4294967291, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000afffffffb;  op2val:0xaaaaaaaabfffffff
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000afffffffb, 0xaaaaaaaabfffffff, x1, 1600, x2)

inst_132:
// rs1_w0_val == 2147483648, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff80000000;  op2val:0x0000000a00000020
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7fff80000000, 0x0000000a00000020, x1, 1616, x2)

inst_133:
// rs1_w0_val == 1073741824, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000940000000;  op2val:0xfeffffff40000000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000940000000, 0xfeffffff40000000, x1, 1632, x2)

inst_134:
// rs2_w0_val == 262144, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffffeffff;  op2val:0xbfffffff00040000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7ffffffffeffff, 0xbfffffff00040000, x1, 1648, x2)

inst_135:
// rs2_w0_val == 65536, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef0000000f;  op2val:0xffffefff00010000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffef0000000f, 0xffffefff00010000, x1, 1664, x2)

inst_136:
// rs2_w0_val == 16384, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000100000000010;  op2val:0x0002000000004000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000100000000010, 0x0002000000004000, x1, 1680, x2)

inst_137:
// rs1_w0_val == 536870912, 
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd20000000;  op2val:0xfffff7ff00400000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffd20000000, 0xfffff7ff00400000, x1, 1696, x2)

inst_138:
// rs1_w0_val == 0, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 4293918719, rs2_w0_val == 8388608, rs1_w1_val == 4294967291
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000000;  op2val:0xffefffff00800000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffb00000000, 0xffefffff00800000, x1, 1712, x2)

inst_139:
// rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 1048576, rs2_w0_val == 4096, rs1_w0_val == 4096
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0010000000001000;  op2val:0x0000000b00001000
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0010000000001000, 0x0000000b00001000, x1, 1728, x2)

inst_140:
// rs2_w1_val == 2863311530, rs1_w1_val == 8192, rs1_w0_val == 4294967294, rs2_w0_val == 128
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000fffffffe;  op2val:0xaaaaaaaa00000080
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00002000fffffffe, 0xaaaaaaaa00000080, x1, 1744, x2)

inst_141:
// rs2_w1_val == 4290772991, rs1_w0_val == 4294966783
// opcode: umar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000006fffffdff;  op2val:0xffbfffff00000080
TEST_P64_PNN_OP(umar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000006fffffdff, 0xffbfffff00000080, x1, 1760, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x13_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 222*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
