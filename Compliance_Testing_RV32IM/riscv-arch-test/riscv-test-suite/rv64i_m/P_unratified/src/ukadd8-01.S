
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukadd8 instruction of the RISC-V RV64PZicsr extension for the ukadd8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukadd8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x10,signature_x10_1)

inst_0:// rs1 == rd != rs2, rs1==x28, rs2==x27, rd==x28, rs1_b0_val == 0, rs1_b7_val != rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b6_val != rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b5_val != rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b4_val != rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b2_val == 0, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b6_val == 239, rs2_b1_val == 127, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val == 239, rs2_b6_val == 32, rs1_b4_val == 247, rs2_b4_val == 64, rs2_b0_val == 170
// opcode: ukadd8 ; op1:x28; op2:x27; dest:x28; op1val:0x11ef09f71300ef00;  op2val:0xe201240090a7faa
TEST_RR_OP(ukadd8, x28, x28, x27, 0x0000000000000000, 0x11ef09f71300ef00, 0xe201240090a7faa, x10, 0, x18)

inst_1:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x7, rs2==x15, rd==x5, rs1_b7_val == rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b7_val == 255, rs1_b7_val == 255, rs1_b3_val == 191, rs1_b6_val == 85, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b1_val == 251, rs1_b4_val == 239, rs1_b2_val == 85, rs1_b1_val == 1
// opcode: ukadd8 ; op1:x7; op2:x15; dest:x5; op1val:0xff550aefbf55010f;  op2val:0xff0303030906fb06
TEST_RR_OP(ukadd8, x5, x7, x15, 0x0000000000000000, 0xff550aefbf55010f, 0xff0303030906fb06, x10, 16, x18)

inst_2:// rs1 == rs2 != rd, rs1==x24, rs2==x24, rd==x15, rs1_b6_val == rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b3_val == 85, rs2_b2_val == 8, rs1_b0_val == 254, rs2_b1_val == 191, rs2_b4_val == 191, rs1_b7_val == 85, rs1_b3_val == 1, rs1_b4_val == 128, rs2_b5_val == 170
// opcode: ukadd8 ; op1:x24; op2:x24; dest:x15; op1val:0x55121280010c03fe;  op2val:0xa12aabf5508bf0f
TEST_RR_OP(ukadd8, x15, x24, x24, 0x0000000000000000, 0x55121280010c03fe, 0xa12aabf5508bf0f, x10, 32, x18)

inst_3:// rs1 == rs2 == rd, rs1==x14, rs2==x14, rd==x14, rs1_b5_val == rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b2_val == 64, rs2_b0_val == 191, rs1_b0_val == 223, rs2_b5_val == 16, rs1_b5_val == 16, rs2_b3_val == 254, rs1_b3_val == 128, rs2_b6_val == 253, rs2_b4_val == 127, rs1_b1_val == 251, rs1_b2_val == 127, rs2_b7_val == 128
// opcode: ukadd8 ; op1:x14; op2:x14; dest:x14; op1val:0x120c1007807ffbdf;  op2val:0x80fd107ffe4011bf
TEST_RR_OP(ukadd8, x14, x14, x14, 0x0000000000000000, 0x120c1007807ffbdf, 0x80fd107ffe4011bf, x10, 48, x18)

inst_4:// rs2 == rd != rs1, rs1==x8, rs2==x19, rd==x19, rs1_b4_val == rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b5_val == 253, rs1_b3_val == 251, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b3_val == 1, rs1_b7_val == 8
// opcode: ukadd8 ; op1:x8; op2:x19; dest:x19; op1val:0x803fd12fb0f0f06;  op2val:0x13110c12010c7f06
TEST_RR_OP(ukadd8, x19, x8, x19, 0x0000000000000000, 0x803fd12fb0f0f06, 0x13110c12010c7f06, x10, 64, x18)

inst_5:// rs1==x13, rs2==x7, rd==x9, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b0_val == 223, rs2_b2_val == 32, rs2_b5_val == 128, rs1_b2_val == 255, rs2_b6_val == 254, rs2_b7_val == 253, rs1_b4_val == 4
// opcode: ukadd8 ; op1:x13; op2:x7; dest:x9; op1val:0x120a110403ff120a;  op2val:0xfdfe80110320fbdf
TEST_RR_OP(ukadd8, x9, x13, x7, 0x0000000000000000, 0x120a110403ff120a, 0xfdfe80110320fbdf, x10, 80, x18)

inst_6:// rs1==x31, rs2==x21, rd==x7, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b7_val == 4, rs1_b4_val == 0, rs1_b3_val == 170, rs1_b1_val == 127, rs1_b0_val == 8, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b0_val == 255, rs1_b6_val == 16, rs2_b6_val == 8, rs2_b4_val == 1
// opcode: ukadd8 ; op1:x31; op2:x21; dest:x7; op1val:0x4101300aa0c7f08;  op2val:0x708aa01030c7fff
TEST_RR_OP(ukadd8, x7, x31, x21, 0x0000000000000000, 0x4101300aa0c7f08, 0x708aa01030c7fff, x10, 96, x18)

inst_7:// rs1==x16, rs2==x6, rd==x22, rs2_b7_val == 170, rs1_b2_val == 64, rs1_b7_val == 0, rs2_b2_val == 4, rs2_b0_val == 254, rs2_b1_val == 170, rs1_b1_val == 191, rs1_b6_val == 255, rs2_b5_val == 247
// opcode: ukadd8 ; op1:x16; op2:x6; dest:x22; op1val:0xff050e0a40bf05;  op2val:0xaa0df7111204aafe
TEST_RR_OP(ukadd8, x22, x16, x6, 0x0000000000000000, 0xff050e0a40bf05, 0xaa0df7111204aafe, x10, 112, x18)

inst_8:// rs1==x19, rs2==x23, rd==x3, rs2_b7_val == 85, rs1_b2_val == 8, rs2_b6_val == 85, rs1_b0_val == 128, rs2_b3_val == 64, rs1_b6_val == 253, rs1_b4_val == 251, rs2_b4_val == 254, rs1_b1_val == 255, rs2_b5_val == 191
// opcode: ukadd8 ; op1:x19; op2:x23; dest:x3; op1val:0x4fd10fb0608ff80;  op2val:0x5555bffe400e7f13
TEST_RR_OP(ukadd8, x3, x19, x23, 0x0000000000000000, 0x4fd10fb0608ff80, 0x5555bffe400e7f13, x10, 128, x18)

inst_9:// rs1==x3, rs2==x28, rd==x16, rs2_b7_val == 127, rs2_b5_val == 4, rs2_b0_val == 4, rs1_b0_val == 255, rs1_b7_val == 170, rs1_b1_val == 254, rs1_b6_val == 8, rs2_b3_val == 0, rs2_b4_val == 251, rs1_b3_val == 0, rs1_b4_val == 16, rs1_b5_val == 247
// opcode: ukadd8 ; op1:x3; op2:x28; dest:x16; op1val:0xaa08f7100007feff;  op2val:0x7f0b04fb00090304
TEST_RR_OP(ukadd8, x16, x3, x28, 0x0000000000000000, 0xaa08f7100007feff, 0x7f0b04fb00090304, x10, 144, x18)

inst_10:// rs1==x20, rs2==x31, rd==x17, rs2_b7_val == 191, rs2_b6_val == 191, rs1_b0_val == 247, rs1_b5_val == 128, rs2_b0_val == 127
// opcode: ukadd8 ; op1:x20; op2:x31; dest:x17; op1val:0xaa0a8004110807f7;  op2val:0xbfbff71107060d7f
TEST_RR_OP(ukadd8, x17, x20, x31, 0x0000000000000000, 0xaa0a8004110807f7, 0xbfbff71107060d7f, x10, 160, x18)

inst_11:// rs1==x4, rs2==x8, rd==x24, rs2_b7_val == 223, rs1_b2_val == 2, rs1_b1_val == 32, rs2_b4_val == 253, rs2_b2_val == 223, rs1_b5_val == 85
// opcode: ukadd8 ; op1:x4; op2:x8; dest:x24; op1val:0x70c5511bf02200f;  op2val:0xdf0707fd05df090f
TEST_RR_OP(ukadd8, x24, x4, x8, 0x0000000000000000, 0x70c5511bf02200f, 0xdf0707fd05df090f, x10, 176, x18)

inst_12:// rs1==x0, rs2==x22, rd==x12, rs2_b7_val == 239, rs1_b2_val == 253, rs2_b4_val == 128
// opcode: ukadd8 ; op1:x0; op2:x22; dest:x12; op1val:0xefd050e03fdbf12;  op2val:0xef12038011080bdf
TEST_RR_OP(ukadd8, x12, x0, x22, 0x0000000000000000, 0xefd050e03fdbf12, 0xef12038011080bdf, x10, 192, x18)

inst_13:// rs1==x11, rs2==x3, rd==x31, rs2_b7_val == 247, rs1_b2_val == 32, rs2_b5_val == 0, rs1_b3_val == 4, rs2_b6_val == 4, rs2_b1_val == 16, rs2_b2_val == 127
// opcode: ukadd8 ; op1:x11; op2:x3; dest:x31; op1val:0xb130fef04200a09;  op2val:0xf7040009127f10aa
TEST_RR_OP(ukadd8, x31, x11, x3, 0x0000000000000000, 0xb130fef04200a09, 0xf7040009127f10aa, x10, 208, x18)

inst_14:// rs1==x17, rs2==x20, rd==x23, rs2_b7_val == 251, rs1_b0_val == 191, rs2_b0_val == 239, rs1_b5_val == 64, rs2_b1_val == 247, rs2_b2_val == 239
// opcode: ukadd8 ; op1:x17; op2:x20; dest:x23; op1val:0xe0f40fbbf40bfbf;  op2val:0xfbfe801340eff7ef
TEST_RR_OP(ukadd8, x23, x17, x20, 0x0000000000000000, 0xe0f40fbbf40bfbf, 0xfbfe801340eff7ef, x10, 224, x18)

inst_15:// rs1==x2, rs2==x17, rd==x30, rs2_b7_val == 254, rs1_b0_val == 64, rs1_b3_val == 254, rs2_b0_val == 2, rs1_b4_val == 223, rs2_b1_val == 8, rs1_b5_val == 170, rs2_b4_val == 8, rs1_b1_val == 0, rs2_b2_val == 253
// opcode: ukadd8 ; op1:x2; op2:x17; dest:x30; op1val:0x6fdaadffe0a0040;  op2val:0xfe0b0f080ffd0802
TEST_RR_OP(ukadd8, x30, x2, x17, 0x0000000000000000, 0x6fdaadffe0a0040, 0xfe0b0f080ffd0802, x10, 240, x18)

inst_16:// rs1==x1, rs2==x5, rd==x13, rs2_b7_val == 64, rs1_b0_val == 239, rs1_b3_val == 127, rs2_b0_val == 251, rs1_b5_val == 8, rs1_b4_val == 170, rs2_b6_val == 2, rs1_b6_val == 1, rs2_b1_val == 0
// opcode: ukadd8 ; op1:x1; op2:x5; dest:x13; op1val:0xe0108aa7f0c13ef;  op2val:0x40020ffd120300fb
TEST_RR_OP(ukadd8, x13, x1, x5, 0x0000000000000000, 0xe0108aa7f0c13ef, 0x40020ffd120300fb, x10, 256, x18)

inst_17:// rs1==x6, rs2==x25, rd==x11, rs2_b7_val == 32, rs1_b5_val == 251, rs2_b4_val == 170, rs1_b2_val == 191, rs1_b7_val == 128, rs2_b5_val == 223, rs1_b0_val == 85
// opcode: ukadd8 ; op1:x6; op2:x25; dest:x11; op1val:0x8005fb0512bf0d55;  op2val:0x200adfaa0c40000e
TEST_RR_OP(ukadd8, x11, x6, x25, 0x0000000000000000, 0x8005fb0512bf0d55, 0x200adfaa0c40000e, x10, 272, x7)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_18:// rs1==x9, rs2==x11, rd==x27, rs2_b7_val == 16, rs1_b7_val == 2, rs2_b2_val == 2, rs1_b4_val == 32, rs1_b6_val == 127, rs2_b4_val == 223, rs2_b3_val == 255, rs2_b6_val == 0, rs2_b1_val == 2
// opcode: ukadd8 ; op1:x9; op2:x11; dest:x27; op1val:0x27faa2012550009;  op2val:0x1000dfdfff020213
TEST_RR_OP(ukadd8, x27, x9, x11, 0x0000000000000000, 0x27faa2012550009, 0x1000dfdfff020213, x3, 0, x7)

inst_19:// rs1==x10, rs2==x2, rd==x4, rs2_b7_val == 8, rs1_b3_val == 223, rs1_b6_val == 128, rs1_b4_val == 191, rs1_b7_val == 191, rs1_b1_val == 64, rs1_b2_val == 254
// opcode: ukadd8 ; op1:x10; op2:x2; dest:x4; op1val:0xbf8055bfdffe4005;  op2val:0x80c0512407f120f
TEST_RR_OP(ukadd8, x4, x10, x2, 0x0000000000000000, 0xbf8055bfdffe4005, 0x80c0512407f120f, x3, 16, x7)

inst_20:// rs1==x23, rs2==x0, rd==x21, rs2_b7_val == 4, rs2_b6_val == 247, rs2_b0_val == 1, rs1_b3_val == 8, rs1_b6_val == 32, rs2_b4_val == 16
// opcode: ukadd8 ; op1:x23; op2:x0; dest:x21; op1val:0xaa200e05080f0f0a;  op2val:0x4f70c100e12aa01
TEST_RR_OP(ukadd8, x21, x23, x0, 0x0000000000000000, 0xaa200e05080f0f0a, 0x4f70c100e12aa01, x3, 32, x7)

inst_21:// rs1==x15, rs2==x9, rd==x0, rs2_b7_val == 2, rs2_b2_val == 0, rs2_b1_val == 1, rs1_b1_val == 16
// opcode: ukadd8 ; op1:x15; op2:x9; dest:x0; op1val:0xaaeff7067f13100a;  op2val:0x2130ffb0c000107
TEST_RR_OP(ukadd8, x0, x15, x9, 0x0000000000000000, 0xaaeff7067f13100a, 0x2130ffb0c000107, x3, 48, x7)

inst_22:// rs1==x29, rs2==x26, rd==x10, rs2_b7_val == 1, rs1_b2_val == 1, rs2_b5_val == 8, rs1_b6_val == 251, rs1_b4_val == 253, rs2_b2_val == 170
// opcode: ukadd8 ; op1:x29; op2:x26; dest:x10; op1val:0x2fb0ffd0b0105ef;  op2val:0x10708100baa0d03
TEST_RR_OP(ukadd8, x10, x29, x26, 0x0000000000000000, 0x2fb0ffd0b0105ef, 0x10708100baa0d03, x3, 64, x7)

inst_23:// rs1==x27, rs2==x13, rd==x18, rs2_b7_val == 0, rs1_b5_val == 0, rs2_b3_val == 32, rs2_b0_val == 128
// opcode: ukadd8 ; op1:x27; op2:x13; dest:x18; op1val:0x67f0012fe071140;  op2val:0x0011df20070c80
TEST_RR_OP(ukadd8, x18, x27, x13, 0x0000000000000000, 0x67f0012fe071140, 0x0011df20070c80, x3, 80, x7)

inst_24:// rs1==x18, rs2==x16, rd==x6, rs2_b6_val == 170, rs2_b3_val == 2, rs2_b5_val == 85, rs1_b0_val == 251, rs1_b1_val == 253
// opcode: ukadd8 ; op1:x18; op2:x16; dest:x6; op1val:0xff800f040f11fdfb;  op2val:0x8aa557f02060e0c
TEST_RR_OP(ukadd8, x6, x18, x16, 0x0000000000000000, 0xff800f040f11fdfb, 0x8aa557f02060e0c, x3, 96, x7)

inst_25:// rs1==x25, rs2==x30, rd==x8, rs2_b6_val == 127, rs1_b7_val == 239
// opcode: ukadd8 ; op1:x25; op2:x30; dest:x8; op1val:0xef06fd0e007ffe55;  op2val:0x407f554002ef0502
TEST_RR_OP(ukadd8, x8, x25, x30, 0x0000000000000000, 0xef06fd0e007ffe55, 0x407f554002ef0502, x3, 112, x7)

inst_26:// rs1==x30, rs2==x1, rd==x2, rs2_b6_val == 223, rs2_b4_val == 0, rs2_b2_val == 254
// opcode: ukadd8 ; op1:x30; op2:x1; dest:x2; op1val:0x11fd0f8001000d12;  op2val:0x55df12000bfe0def
TEST_RR_OP(ukadd8, x2, x30, x1, 0x0000000000000000, 0x11fd0f8001000d12, 0x55df12000bfe0def, x3, 128, x7)

inst_27:// rs1==x21, rs2==x18, rd==x29, rs2_b6_val == 239, rs2_b3_val == 251, rs1_b7_val == 32, rs2_b0_val == 0
// opcode: ukadd8 ; op1:x21; op2:x18; dest:x29; op1val:0x2011070d80200109;  op2val:0x13ef1306fb090600
TEST_RR_OP(ukadd8, x29, x21, x18, 0x0000000000000000, 0x2011070d80200109, 0x13ef1306fb090600, x3, 144, x7)

inst_28:// rs1==x5, rs2==x29, rd==x1, rs2_b6_val == 251, rs2_b5_val == 254, rs1_b3_val == 85, rs1_b4_val == 254, rs2_b2_val == 16
// opcode: ukadd8 ; op1:x5; op2:x29; dest:x1; op1val:0x130f0dfe550f1309;  op2val:0x7fbfe0dfe10aa02
TEST_RR_OP(ukadd8, x1, x5, x29, 0x0000000000000000, 0x130f0dfe550f1309, 0x7fbfe0dfe10aa02, x3, 160, x7)

inst_29:// rs1==x12, rs2==x10, rd==x20, rs1_b3_val == 239, rs1_b6_val == 191, rs2_b5_val == 127, rs1_b4_val == 85, rs2_b3_val == 8
// opcode: ukadd8 ; op1:x12; op2:x10; dest:x20; op1val:0x4bffb55ef07fd11;  op2val:0xfe077f0b080a120d
TEST_RR_OP(ukadd8, x20, x12, x10, 0x0000000000000000, 0x4bffb55ef07fd11, 0xfe077f0b080a120d, x3, 176, x7)

inst_30:// rs1==x22, rs2==x12, rd==x25, rs1_b3_val == 247, rs2_b3_val == 191, rs1_b2_val == 128
// opcode: ukadd8 ; op1:x22; op2:x12; dest:x25; op1val:0x60a09fbf7800640;  op2val:0x12021340bfaa08ef
TEST_RR_OP(ukadd8, x25, x22, x12, 0x0000000000000000, 0x60a09fbf7800640, 0x12021340bfaa08ef, x3, 192, x7)

inst_31:// rs1==x26, rs1_b3_val == 253, rs1_b7_val == 251, rs1_b5_val == 2, rs2_b5_val == 255, rs1_b2_val == 170
// opcode: ukadd8 ; op1:x26; op2:x15; dest:x27; op1val:0xfb0e0212fdaa03df;  op2val:0x130ffffe03030c0b
TEST_RR_OP(ukadd8, x27, x26, x15, 0x0000000000000000, 0xfb0e0212fdaa03df, 0x130ffffe03030c0b, x3, 208, x7)

inst_32:// rs2==x4, rs1_b3_val == 64, rs2_b3_val == 223, rs2_b5_val == 32, rs2_b0_val == 8, rs1_b0_val == 4, rs2_b1_val == 223, rs2_b6_val == 128
// opcode: ukadd8 ; op1:x5; op2:x4; dest:x23; op1val:0x8012050040112004;  op2val:0xef802003df08df08
TEST_RR_OP(ukadd8, x23, x5, x4, 0x0000000000000000, 0x8012050040112004, 0xef802003df08df08, x3, 224, x7)

inst_33:// rd==x26, rs1_b3_val == 32, rs2_b5_val == 251, rs2_b1_val == 255
// opcode: ukadd8 ; op1:x16; op2:x14; dest:x26; op1val:0xd1212552009100b;  op2val:0xef11fb060a13ff0c
TEST_RR_OP(ukadd8, x26, x16, x14, 0x0000000000000000, 0xd1212552009100b, 0xef11fb060a13ff0c, x3, 240, x7)

inst_34:// rs1_b3_val == 16, rs2_b5_val == 253, rs1_b2_val == 4, rs1_b1_val == 223
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x200780031004dfdf;  op2val:0x67ffd002040df04
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x200780031004dfdf, 0x67ffd002040df04, x3, 256, x7)

inst_35:// rs1_b3_val == 2, rs2_b6_val == 255
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x3ff00ef02047f11;  op2val:0xeffbfbfdf111005
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x3ff00ef02047f11, 0xeffbfbfdf111005, x3, 272, x7)

inst_36:// rs1_b3_val == 255, rs2_b5_val == 2, rs2_b0_val == 16, rs1_b7_val == 247
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7130303ff0b06fb;  op2val:0x10e024007130a10
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xf7130303ff0b06fb, 0x10e024007130a10, x3, 288, x7)

inst_37:// rs1_b2_val == 223, rs2_b1_val == 253, rs1_b5_val == 1, rs2_b3_val == 16, rs1_b1_val == 8
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x8007010b55df08fe;  op2val:0xaa0507fb1012fd07
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x8007010b55df08fe, 0xaa0507fb1012fd07, x3, 304, x7)

inst_38:// rs1_b2_val == 239, rs2_b3_val == 4, rs2_b4_val == 255
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xe10078005ef0855;  op2val:0xfb55dfff04ef1203
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xe10078005ef0855, 0xfb55dfff04ef1203, x3, 320, x7)

inst_39:// rs1_b2_val == 247, rs1_b1_val == 2, rs1_b4_val == 8, rs1_b5_val == 32
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x1110200809f702fe;  op2val:0x10709001300060e
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x1110200809f702fe, 0x10709001300060e, x3, 336, x7)

inst_40:// rs1_b2_val == 251, rs1_b0_val == 127
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x130d0e1320fbdf7f;  op2val:0x130a12100a09fd01
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x130d0e1320fbdf7f, 0x130a12100a09fd01, x3, 352, x7)

inst_41:// rs1_b2_val == 16, rs2_b5_val == 239
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x800b0820bf100911;  op2val:0xbfaaef0a04ef1109
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x800b0820bf100911, 0xbfaaef0a04ef1109, x3, 368, x7)

inst_42:// rs1_b1_val == 170, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf70a03fdff80aa40;  op2val:0xc7faaff070f00bf
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xf70a03fdff80aa40, 0xc7faaff070f00bf, x3, 384, x7)

inst_43:// rs1_b1_val == 85, rs1_b7_val == 64
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x400103df05bf5504;  op2val:0x204200c0207df09
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x400103df05bf5504, 0x204200c0207df09, x3, 400, x7)

inst_44:// rs1_b1_val == 247, rs1_b5_val == 254, rs2_b5_val == 64
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xefdfe200202f70e;  op2val:0xff0e400605090bfe
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xefdfe200202f70e, 0xff0e400605090bfe, x3, 416, x7)

inst_45:// rs2_b6_val == 64, rs1_b7_val == 253, rs2_b2_val == 251, rs1_b4_val == 1
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd0d0b010509020e;  op2val:0x20405510bffb1109
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xfd0d0b010509020e, 0x20405510bffb1109, x3, 432, x7)

inst_46:// rs2_b6_val == 16, rs1_b7_val == 127, rs1_b6_val == 170
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x7faa0e11f7000155;  op2val:0xc10fb0113fef701
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x7faa0e11f7000155, 0xc10fb0113fef701, x3, 448, x7)

inst_47:// rs1_b4_val == 255, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x4ff80ff2005127f;  op2val:0x550209dfff09070a
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x4ff80ff2005127f, 0x550209dfff09070a, x3, 464, x7)

inst_48:// rs2_b2_val == 1, rs1_b1_val == 128, rs2_b4_val == 2
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xeaa020b0e07800f;  op2val:0xfd0440020601030e
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xeaa020b0e07800f, 0xfd0440020601030e, x3, 480, x7)

inst_49:// rs2_b2_val == 255, rs1_b6_val == 223
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xcdf038013ef5505;  op2val:0xef05ff1013ff0cdf
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xcdf038013ef5505, 0xef05ff1013ff0cdf, x3, 496, x7)

inst_50:// rs2_b1_val == 85, rs2_b3_val == 128, rs2_b2_val == 85, rs2_b4_val == 247, rs1_b5_val == 127
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xd0d7f0c117f13df;  op2val:0xf7bf13f7805555ef
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xd0d7f0c117f13df, 0xf7bf13f7805555ef, x3, 512, x7)

inst_51:// rs2_b1_val == 239, rs1_b0_val == 253
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x410f71206000efd;  op2val:0x1000c10fe0eef0d
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x410f71206000efd, 0x1000c10fe0eef0d, x3, 528, x7)

inst_52:// rs2_b1_val == 254, rs1_b1_val == 4
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf0e20df0bfd0403;  op2val:0xf720087f0e0ffebf
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xf0e20df0bfd0403, 0xf720087f0e0ffebf, x3, 544, x7)

inst_53:// rs2_b1_val == 128, rs1_b0_val == 16, rs2_b4_val == 239, rs1_b4_val == 127
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f0f107fdf020f10;  op2val:0x70700ef090980bf
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x7f0f107fdf020f10, 0x70700ef090980bf, x3, 560, x7)

inst_54:// rs2_b1_val == 64, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x70b0d0706200800;  op2val:0x100a201209074003
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x70b0d0706200800, 0x100a201209074003, x3, 576, x7)

inst_55:// rs2_b1_val == 32, rs2_b3_val == 170, rs1_b7_val == 254, rs2_b2_val == 247
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfedffebf12105508;  op2val:0x3100002aaf72009
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xfedffebf12105508, 0x3100002aaf72009, x3, 592, x7)

inst_56:// rs2_b1_val == 4, rs1_b5_val == 255
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xa03ff132008bf11;  op2val:0xdffd0c08fe0904df
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xa03ff132008bf11, 0xdffd0c08fe0904df, x3, 608, x7)

inst_57:// rs2_b0_val == 85, rs1_b5_val == 4
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfef040ffd04df0d;  op2val:0xef0a000b80fd0155
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xfef040ffd04df0d, 0xef0a000b80fd0155, x3, 624, x7)

inst_58:// rs2_b0_val == 247, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x87faa0f01054012;  op2val:0x58005030c020bf7
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x87faa0f01054012, 0x58005030c020bf7, x3, 640, x7)

inst_59:// rs2_b0_val == 253, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xd0b00f713fffd7f;  op2val:0xfb0f0f0c0c550efd
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xd0b00f713fffd7f, 0xfb0f0f0c0c550efd, x3, 656, x7)

inst_60:// rs1_b7_val == 1, rs1_b4_val == 2
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x111aa02eff70f40;  op2val:0x20fedf01bffd0cfb
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x111aa02eff70f40, 0x20fedf01bffd0cfb, x3, 672, x7)

inst_61:// rs1_b0_val == 32, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb02111055fe20;  op2val:0x8020051055ef1109
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xfffb02111055fe20, 0x8020051055ef1109, x3, 688, x7)

inst_62:// rs2_b5_val == 1, rs2_b6_val == 1
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xb8011000b070907;  op2val:0xf701010701200d06
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xb8011000b070907, 0xf701010701200d06, x3, 704, x7)

inst_63:// rs1_b6_val == 247, rs1_b0_val == 1, rs2_b3_val == 247
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xeff755aa10040401;  op2val:0x7ffb0d12f7f74010
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xeff755aa10040401, 0x7ffb0d12f7f74010, x3, 720, x7)

inst_64:// rs1_b0_val == 2, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xef80040a08007f02;  op2val:0x40060910130c7f04
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xef80040a08007f02, 0x40060910130c7f04, x3, 736, x7)

inst_65:// rs2_b4_val == 85, rs1_b5_val == 223
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xb0bdff7fefe0def;  op2val:0x404df550202ff12
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xb0bdff7fefe0def, 0x404df550202ff12, x3, 752, x7)

inst_66:// rs1_b6_val == 254, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x5fe0808110408fe;  op2val:0x1213120ebf0c0f06
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x5fe0808110408fe, 0x1213120ebf0c0f06, x3, 768, x7)

inst_67:// rs1_b6_val == 64, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x40408055dffe020f;  op2val:0xfbaa7f072006010f
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x40408055dffe020f, 0xfbaa7f072006010f, x3, 784, x7)

inst_68:// rs1_b6_val == 4, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x7041302060c0f0e;  op2val:0x1307fe09067f7f12
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x7041302060c0f0e, 0x1307fe09067f7f12, x3, 800, x7)

inst_69:// rs1_b6_val == 2, rs2_b4_val == 4, rs1_b0_val == 170
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x4021004801311aa;  op2val:0x80050c04100e0f04
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x4021004801311aa, 0x80050c04100e0f04, x3, 816, x7)

inst_70:// rs1_b6_val == 0, rs2_b3_val == 239
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x550040030b11fdfb;  op2val:0x80fe01aaef0f120e
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x550040030b11fdfb, 0x80fe01aaef0f120e, x3, 832, x7)

inst_71:// rs1_b4_val == 64, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x8009fe40ff02f7df;  op2val:0x100307400e130e00
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x8009fe40ff02f7df, 0x100307400e130e00, x3, 848, x7)

inst_72:// rs2_b3_val == 127, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xef0f400cff08aadf;  op2val:0xffdff557fef12df
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xef0f400cff08aadf, 0xffdff557fef12df, x3, 864, x7)

inst_73:// rs2_b0_val == 64, rs2_b2_val == 128
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa13060808070e40;  op2val:0xdf550d04f7800540
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xaa13060808070e40, 0xdf550d04f7800540, x3, 880, x7)

inst_74:// rs2_b0_val == 32, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xbef200fef090d40;  op2val:0x120ddf0910100820
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xbef200fef090d40, 0x120ddf0910100820, x3, 896, x7)

inst_75:// rs2_b4_val == 32, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f030efe060daafb;  op2val:0x513df20df0f40fb
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x7f030efe060daafb, 0x513df20df0f40fb, x3, 912, x7)

inst_76:// rs1_b7_val == 223, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf0a070440081006;  op2val:0xaa1003000440ff0d
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xdf0a070440081006, 0xaa1003000440ff0d, x3, 928, x7)

inst_77:// rs2_b2_val == 191, rs1_b5_val == 239
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbefef20ef804002;  op2val:0xaa80040f0ebf0902
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xfbefef20ef804002, 0xaa80040f0ebf0902, x3, 944, x7)

inst_78:// rs2_b3_val == 253, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x135507040a557f05;  op2val:0x40fd0d11fd020c05
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x135507040a557f05, 0x40fd0d11fd020c05, x3, 960, x7)

inst_79:// rs1_b5_val == 191, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x110cbf00dffb80aa;  op2val:0xf0adf040f20bf10
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x110cbf00dffb80aa, 0xf0adf040f20bf10, x3, 976, x7)

inst_80:// rs1_b7_val == 16, 
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x1008064009fb0efe;  op2val:0x40df0a0a03807f06
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x1008064009fb0efe, 0x40df0a0a03807f06, x3, 992, x7)

inst_81:// rs1_b5_val == rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b2_val == 64, rs2_b0_val == 191, rs1_b0_val == 223, rs2_b5_val == 16, rs1_b5_val == 16, rs2_b3_val == 254, rs1_b3_val == 128, rs2_b6_val == 253, rs2_b4_val == 127, rs1_b1_val == 251, rs1_b2_val == 127, rs2_b7_val == 128
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0x120c1007807ffbdf;  op2val:0x80fd107ffe4011bf
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0x120c1007807ffbdf, 0x80fd107ffe4011bf, x3, 1008, x7)

inst_82:// rs2_b7_val == 239, rs1_b2_val == 253, rs2_b4_val == 128
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xefd050e03fdbf12;  op2val:0xef12038011080bdf
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xefd050e03fdbf12, 0xef12038011080bdf, x3, 1024, x7)

inst_83:// rs2_b7_val == 4, rs2_b6_val == 247, rs2_b0_val == 1, rs1_b3_val == 8, rs1_b6_val == 32, rs2_b4_val == 16
// opcode: ukadd8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa200e05080f0f0a;  op2val:0x4f70c100e12aa01
TEST_RR_OP(ukadd8, x31, x30, x29, 0x0000000000000000, 0xaa200e05080f0f0a, 0x4f70c100e12aa01, x3, 1040, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 132*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
