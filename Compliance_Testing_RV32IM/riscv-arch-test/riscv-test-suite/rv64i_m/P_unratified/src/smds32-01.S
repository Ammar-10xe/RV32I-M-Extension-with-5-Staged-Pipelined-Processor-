
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smds32 instruction of the RISC-V RV64PZicsr extension for the smds32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smds32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x14, rs2==x10, rd==x14, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w0_val == 8, rs1_w1_val == -1431655766
// opcode: smds32 ; op1:x14; op2:x10; dest:x14; op1val:0xaaaaaaaa80000000;  op2val:0xfffffff800000008
TEST_RR_OP(smds32, x14, x14, x10, 0x0000000000000000, 0xaaaaaaaa80000000, 0xfffffff800000008, x1, 0, x15)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x2, rd==x21, rs1_w1_val == rs2_w1_val, rs1_w1_val == 1048576, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w0_val == -33, rs2_w1_val == 1048576
// opcode: smds32 ; op1:x31; op2:x2; dest:x21; op1val:0x100000fffffff6;  op2val:0x100000ffffffdf
TEST_RR_OP(smds32, x21, x31, x2, 0x0000000000000000, 0x100000fffffff6, 0x100000ffffffdf, x1, 8, x15)

inst_2:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x30, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w0_val == 4, rs1_w1_val == -33, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 65536
// opcode: smds32 ; op1:x26; op2:x26; dest:x30; op1val:0xffffffdf3fffffff;  op2val:0x01000000000004
TEST_RR_OP(smds32, x30, x26, x26, 0x0000000000000000, 0xffffffdf3fffffff, 0x01000000000004, x1, 16, x15)

inst_3:
// rs1 == rs2 == rd, rs1==x17, rs2==x17, rd==x17, rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w0_val == 2, rs1_w1_val == 8, rs1_w0_val == 256
// opcode: smds32 ; op1:x17; op2:x17; dest:x17; op1val:0x00000800000100;  op2val:0xfffffffc00000002
TEST_RR_OP(smds32, x17, x17, x17, 0x0000000000000000, 0x00000800000100, 0xfffffffc00000002, x1, 24, x15)

inst_4:
// rs2 == rd != rs1, rs1==x6, rs2==x29, rd==x29, rs1_w0_val == rs2_w0_val, rs2_w0_val == -262145, rs1_w0_val == -262145, rs2_w1_val == 1
// opcode: smds32 ; op1:x6; op2:x29; dest:x29; op1val:0x000008fffbffff;  op2val:0x000001fffbffff
TEST_RR_OP(smds32, x29, x6, x29, 0x0000000000000000, 0x000008fffbffff, 0x000001fffbffff, x1, 32, x15)

inst_5:
// rs1==x5, rs2==x13, rd==x28, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w1_val == -4097, rs1_w0_val == 536870912, rs2_w1_val == -513, rs2_w0_val == -9
// opcode: smds32 ; op1:x5; op2:x13; dest:x28; op1val:0xffffefff20000000;  op2val:0xfffffdfffffffff7
TEST_RR_OP(smds32, x28, x5, x13, 0x0000000000000000, 0xffffefff20000000, 0xfffffdfffffffff7, x1, 40, x15)

inst_6:
// rs1==x7, rs2==x24, rd==x25, rs2_w1_val == -1431655766, rs1_w0_val == -32769, rs2_w0_val == 16
// opcode: smds32 ; op1:x7; op2:x24; dest:x25; op1val:0xfffffffcffff7fff;  op2val:0xaaaaaaaa00000010
TEST_RR_OP(smds32, x25, x7, x24, 0x0000000000000000, 0xfffffffcffff7fff, 0xaaaaaaaa00000010, x1, 48, x15)

inst_7:
// rs1==x21, rs2==x14, rd==x8, rs2_w1_val == 1431655765, rs1_w0_val == -131073, rs2_w0_val == 8388608, rs1_w1_val == 32768
// opcode: smds32 ; op1:x21; op2:x14; dest:x8; op1val:0x008000fffdffff;  op2val:0x5555555500800000
TEST_RR_OP(smds32, x8, x21, x14, 0x0000000000000000, 0x008000fffdffff, 0x5555555500800000, x1, 56, x15)

inst_8:
// rs1==x24, rs2==x8, rd==x5, rs2_w1_val == 2147483647, rs2_w0_val == -3, rs1_w1_val == 2097152, rs1_w0_val == -4194305
// opcode: smds32 ; op1:x24; op2:x8; dest:x5; op1val:0x200000ffbfffff;  op2val:0x7ffffffffffffffd
TEST_RR_OP(smds32, x5, x24, x8, 0x0000000000000000, 0x200000ffbfffff, 0x7ffffffffffffffd, x1, 64, x15)

inst_9:
// rs1==x19, rs2==x6, rd==x31, rs2_w1_val == -1073741825, rs1_w0_val == 16777216, rs2_w0_val == -8388609, rs1_w1_val == 2147483647
// opcode: smds32 ; op1:x19; op2:x6; dest:x31; op1val:0x7fffffff01000000;  op2val:0xbfffffffff7fffff
TEST_RR_OP(smds32, x31, x19, x6, 0x0000000000000000, 0x7fffffff01000000, 0xbfffffffff7fffff, x1, 72, x15)

inst_10:
// rs1==x11, rs2==x22, rd==x23, rs2_w1_val == -536870913, rs2_w0_val == 16777216, rs1_w0_val == 8, rs1_w1_val == 8388608
// opcode: smds32 ; op1:x11; op2:x22; dest:x23; op1val:0x80000000000008;  op2val:0xdfffffff01000000
TEST_RR_OP(smds32, x23, x11, x22, 0x0000000000000000, 0x80000000000008, 0xdfffffff01000000, x1, 80, x15)

inst_11:
// rs1==x22, rs2==x25, rd==x7, rs2_w1_val == -268435457, rs2_w0_val == -32769, rs1_w0_val == 134217728
// opcode: smds32 ; op1:x22; op2:x25; dest:x7; op1val:0xffffefff08000000;  op2val:0xefffffffffff7fff
TEST_RR_OP(smds32, x7, x22, x25, 0x0000000000000000, 0xffffefff08000000, 0xefffffffffff7fff, x1, 88, x15)

inst_12:
// rs1==x2, rs2==x21, rd==x4, rs2_w1_val == -134217729, 
// opcode: smds32 ; op1:x2; op2:x21; dest:x4; op1val:0x00000601000000;  op2val:0xf7fffffffffbffff
TEST_RR_OP(smds32, x4, x2, x21, 0x0000000000000000, 0x00000601000000, 0xf7fffffffffbffff, x1, 96, x15)

inst_13:
// rs1==x3, rs2==x9, rd==x20, rs2_w1_val == -67108865, rs2_w0_val == -1025, rs1_w0_val == -257, rs1_w1_val == -513
// opcode: smds32 ; op1:x3; op2:x9; dest:x20; op1val:0xfffffdfffffffeff;  op2val:0xfbfffffffffffbff
TEST_RR_OP(smds32, x20, x3, x9, 0x0000000000000000, 0xfffffdfffffffeff, 0xfbfffffffffffbff, x1, 104, x15)

inst_14:
// rs1==x0, rs2==x12, rd==x19, rs2_w1_val == -33554433, rs1_w1_val == 64, rs1_w0_val == 262144
// opcode: smds32 ; op1:x0; op2:x12; dest:x19; op1val:0x00004000040000;  op2val:0xfdfffffffffffbff
TEST_RR_OP(smds32, x19, x0, x12, 0x0000000000000000, 0x00004000040000, 0xfdfffffffffffbff, x1, 112, x15)

inst_15:
// rs1==x30, rs2==x20, rd==x27, rs2_w1_val == -16777217, rs2_w0_val == -16777217, rs1_w0_val == 2048, rs1_w1_val == -2147483648
// opcode: smds32 ; op1:x30; op2:x20; dest:x27; op1val:0x8000000000000800;  op2val:0xfefffffffeffffff
TEST_RR_OP(smds32, x27, x30, x20, 0x0000000000000000, 0x8000000000000800, 0xfefffffffeffffff, x1, 120, x5)
RVTEST_SIGBASE(x14,signature_x14_0)

inst_16:
// rs1==x9, rs2==x4, rd==x16, rs2_w1_val == -8388609, rs1_w1_val == -134217729, rs1_w0_val == -2049
// opcode: smds32 ; op1:x9; op2:x4; dest:x16; op1val:0xf7fffffffffff7ff;  op2val:0xff7fffff00000008
TEST_RR_OP(smds32, x16, x9, x4, 0x0000000000000000, 0xf7fffffffffff7ff, 0xff7fffff00000008, x14, 0, x5)

inst_17:
// rs1==x20, rs2==x27, rd==x24, rs2_w1_val == -4194305, rs1_w1_val == -2097153, rs2_w0_val == -2, rs1_w0_val == -134217729
// opcode: smds32 ; op1:x20; op2:x27; dest:x24; op1val:0xffdffffff7ffffff;  op2val:0xffbffffffffffffe
TEST_RR_OP(smds32, x24, x20, x27, 0x0000000000000000, 0xffdffffff7ffffff, 0xffbffffffffffffe, x14, 8, x5)

inst_18:
// rs1==x28, rs2==x16, rd==x2, rs2_w1_val == -2097153, rs1_w0_val == -1025, rs1_w1_val == -8388609
// opcode: smds32 ; op1:x28; op2:x16; dest:x2; op1val:0xff7ffffffffffbff;  op2val:0xffdffffffffffbff
TEST_RR_OP(smds32, x2, x28, x16, 0x0000000000000000, 0xff7ffffffffffbff, 0xffdffffffffffbff, x14, 16, x5)

inst_19:
// rs1==x1, rs2==x0, rd==x26, rs2_w1_val == -1048577, rs2_w0_val == -33554433, rs1_w1_val == -1048577
// opcode: smds32 ; op1:x1; op2:x0; dest:x26; op1val:0xffefffffffbfffff;  op2val:0xffeffffffdffffff
TEST_RR_OP(smds32, x26, x1, x0, 0x0000000000000000, 0xffefffffffbfffff, 0xffeffffffdffffff, x14, 24, x5)

inst_20:
// rs1==x29, rs2==x23, rd==x12, rs2_w1_val == -524289, rs1_w1_val == 16, rs2_w0_val == 2147483647
// opcode: smds32 ; op1:x29; op2:x23; dest:x12; op1val:0x000010fffffff6;  op2val:0xfff7ffff7fffffff
TEST_RR_OP(smds32, x12, x29, x23, 0x0000000000000000, 0x000010fffffff6, 0xfff7ffff7fffffff, x14, 32, x5)

inst_21:
// rs1==x10, rs2==x31, rd==x22, rs2_w1_val == -262145, rs2_w0_val == 16384
// opcode: smds32 ; op1:x10; op2:x31; dest:x22; op1val:0x7ffffffffffffffc;  op2val:0xfffbffff00004000
TEST_RR_OP(smds32, x22, x10, x31, 0x0000000000000000, 0x7ffffffffffffffc, 0xfffbffff00004000, x14, 40, x5)

inst_22:
// rs1==x27, rs2==x7, rd==x10, rs2_w1_val == -131073, rs1_w0_val == -4097
// opcode: smds32 ; op1:x27; op2:x7; dest:x10; op1val:0xffffffdfffffefff;  op2val:0xfffdfffffdffffff
TEST_RR_OP(smds32, x10, x27, x7, 0x0000000000000000, 0xffffffdfffffefff, 0xfffdfffffdffffff, x14, 48, x5)

inst_23:
// rs1==x12, rs2==x18, rd==x9, rs2_w1_val == -65537, rs1_w1_val == 4194304
// opcode: smds32 ; op1:x12; op2:x18; dest:x9; op1val:0x400000c0000000;  op2val:0xfffefffffffffffd
TEST_RR_OP(smds32, x9, x12, x18, 0x0000000000000000, 0x400000c0000000, 0xfffefffffffffffd, x14, 56, x5)

inst_24:
// rs1==x16, rs2==x28, rd==x0, rs2_w1_val == -32769, rs2_w0_val == -513, rs1_w1_val == -257
// opcode: smds32 ; op1:x16; op2:x28; dest:x0; op1val:0xfffffefffffffbff;  op2val:0xffff7ffffffffdff
TEST_RR_OP(smds32, x0, x16, x28, 0x0000000000000000, 0xfffffefffffffbff, 0xffff7ffffffffdff, x14, 64, x5)

inst_25:
// rs1==x15, rs2==x11, rd==x18, rs2_w1_val == -16385, rs2_w0_val == -131073, rs1_w0_val == 268435456
// opcode: smds32 ; op1:x15; op2:x11; dest:x18; op1val:0xfffffffa10000000;  op2val:0xffffbffffffdffff
TEST_RR_OP(smds32, x18, x15, x11, 0x0000000000000000, 0xfffffffa10000000, 0xffffbffffffdffff, x14, 72, x5)

inst_26:
// rs1==x8, rs2==x15, rd==x13, rs2_w1_val == -8193, rs1_w1_val == 524288, rs2_w0_val == 4096, rs1_w0_val == 1024
// opcode: smds32 ; op1:x8; op2:x15; dest:x13; op1val:0x08000000000400;  op2val:0xffffdfff00001000
TEST_RR_OP(smds32, x13, x8, x15, 0x0000000000000000, 0x08000000000400, 0xffffdfff00001000, x14, 80, x5)

inst_27:
// rs1==x4, rs2==x3, rd==x15, rs2_w1_val == -4097, rs1_w0_val == 33554432
// opcode: smds32 ; op1:x4; op2:x3; dest:x15; op1val:0xfffffff602000000;  op2val:0xffffefff00001000
TEST_RR_OP(smds32, x15, x4, x3, 0x0000000000000000, 0xfffffff602000000, 0xffffefff00001000, x14, 88, x5)

inst_28:
// rs1==x18, rs2==x1, rd==x3, rs2_w1_val == -2049, rs2_w0_val == 262144, rs1_w0_val == 1073741824, rs1_w1_val == -4194305
// opcode: smds32 ; op1:x18; op2:x1; dest:x3; op1val:0xffbfffff40000000;  op2val:0xfffff7ff00040000
TEST_RR_OP(smds32, x3, x18, x1, 0x0000000000000000, 0xffbfffff40000000, 0xfffff7ff00040000, x14, 96, x5)

inst_29:
// rs1==x25, rs2==x19, rd==x11, rs2_w1_val == -1025, rs1_w1_val == -67108865, rs2_w0_val == 268435456
// opcode: smds32 ; op1:x25; op2:x19; dest:x11; op1val:0xfbffffffffffefff;  op2val:0xfffffbff10000000
TEST_RR_OP(smds32, x11, x25, x19, 0x0000000000000000, 0xfbffffffffffefff, 0xfffffbff10000000, x14, 104, x5)

inst_30:
// rs1==x13, rs2==x30, rd==x1, rs2_w1_val == -257, 
// opcode: smds32 ; op1:x13; op2:x30; dest:x1; op1val:0x7ffffffffffffffc;  op2val:0xfffffeff00001000
TEST_RR_OP(smds32, x1, x13, x30, 0x0000000000000000, 0x7ffffffffffffffc, 0xfffffeff00001000, x14, 112, x2)

inst_31:
// rs1==x23, rs2==x5, rd==x6, rs2_w1_val == -129, rs1_w1_val == -1073741825, rs2_w0_val == -524289
// opcode: smds32 ; op1:x23; op2:x5; dest:x6; op1val:0xbfffffff00000007;  op2val:0xffffff7ffff7ffff
TEST_RR_OP(smds32, x6, x23, x5, 0x0000000000000000, 0xbfffffff00000007, 0xffffff7ffff7ffff, x14, 120, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_32:
// rs2_w1_val == -65, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffffff6;  op2val:0xffffffbf00000007
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffffff6, 0xffffffbf00000007, x1, 0, x2)

inst_33:
// rs2_w1_val == -33, rs1_w0_val == -1431655766, rs1_w1_val == 1, rs2_w0_val == -1048577
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001aaaaaaaa;  op2val:0xffffffdfffefffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x000001aaaaaaaa, 0xffffffdfffefffff, x1, 8, x2)

inst_34:
// rs2_w1_val == -17, rs2_w0_val == 134217728
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffbff;  op2val:0xffffffef08000000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffbff, 0xffffffef08000000, x1, 16, x2)

inst_35:
// rs2_w1_val == -9, rs1_w0_val == -33, rs2_w0_val == 2048
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005ffffffdf;  op2val:0xfffffff700000800
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x000005ffffffdf, 0xfffffff700000800, x1, 24, x2)

inst_36:
// rs2_w1_val == -5, rs1_w0_val == -17
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffffffef;  op2val:0xfffffffbffff7fff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x000010ffffffef, 0xfffffffbffff7fff, x1, 32, x2)

inst_37:
// rs2_w1_val == -3, rs1_w0_val == 2, rs1_w1_val == 268435456
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000002;  op2val:0xfffffffdfffffdff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x1000000000000002, 0xfffffffdfffffdff, x1, 40, x2)

inst_38:
// rs2_w1_val == -2, rs2_w0_val == 65536, rs1_w0_val == -524289
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fff7ffff;  op2val:0xfffffffe00010000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x10000000fff7ffff, 0xfffffffe00010000, x1, 48, x2)

inst_39:
// rs2_w1_val == -2147483648, rs1_w0_val == 16
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000010;  op2val:0x8000000000000006
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000010, 0x8000000000000006, x1, 56, x2)

inst_40:
// rs2_w1_val == 1073741824, rs1_w1_val == 33554432, rs2_w0_val == -17
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000ffffffef;  op2val:0x40000000ffffffef
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x2000000ffffffef, 0x40000000ffffffef, x1, 64, x2)

inst_41:
// rs2_w1_val == 536870912, rs2_w0_val == -67108865, rs1_w1_val == 4096, rs1_w0_val == 32768
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000008000;  op2val:0x20000000fbffffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x00100000008000, 0x20000000fbffffff, x1, 72, x2)

inst_42:
// rs2_w1_val == 268435456, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000009;  op2val:0x10000000fffffffd
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x40000000000009, 0x10000000fffffffd, x1, 80, x2)

inst_43:
// rs2_w1_val == 134217728, rs2_w0_val == 512, rs1_w0_val == -2, rs1_w1_val == 256
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100fffffffe;  op2val:0x800000000000200
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x000100fffffffe, 0x800000000000200, x1, 88, x2)

inst_44:
// rs2_w1_val == 67108864, rs1_w1_val == 4
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000005;  op2val:0x400000000000007
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x00000400000005, 0x400000000000007, x1, 96, x2)

inst_45:
// rs2_w1_val == 33554432, rs2_w0_val == -2049
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000002;  op2val:0x2000000fffff7ff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x10000000000002, 0x2000000fffff7ff, x1, 104, x2)

inst_46:
// rs2_w1_val == 16777216, rs1_w1_val == -262145, rs1_w0_val == -2097153
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffdfffff;  op2val:0x100000000010000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffbffffffdfffff, 0x100000000010000, x1, 112, x2)

inst_47:
// rs2_w1_val == 8388608, rs2_w0_val == 2097152, rs1_w0_val == 4
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000004;  op2val:0x80000000200000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x08000000000004, 0x80000000200000, x1, 120, x2)

inst_48:
// rs2_w1_val == 4194304, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00040000;  op2val:0x40000000010000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00040000, 0x40000000010000, x1, 128, x2)

inst_49:
// rs2_w1_val == 2097152, rs2_w0_val == -257
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004aaaaaaaa;  op2val:0x200000fffffeff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x000004aaaaaaaa, 0x200000fffffeff, x1, 136, x2)

inst_50:
// rs2_w1_val == 524288, rs2_w0_val == -129, rs1_w1_val == -2049
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffffef;  op2val:0x080000ffffff7f
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffffef, 0x080000ffffff7f, x1, 144, x2)

inst_51:
// rs2_w1_val == 262144, rs1_w0_val == 512
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900000200;  op2val:0x04000000000004
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffffff900000200, 0x04000000000004, x1, 152, x2)

inst_52:
// rs1_w0_val == 8388608, rs2_w0_val == 536870912, rs1_w1_val == 0
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000800000;  op2val:0xffffffef20000000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x00000000800000, 0xffffffef20000000, x1, 160, x2)

inst_53:
// rs1_w0_val == 4194304, rs2_w0_val == -1431655766
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00400000;  op2val:0xffdfffffaaaaaaaa
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00400000, 0xffdfffffaaaaaaaa, x1, 168, x2)

inst_54:
// rs1_w0_val == 2097152, rs2_w1_val == 16384
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00200000;  op2val:0x0040003fffffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00200000, 0x0040003fffffff, x1, 176, x2)

inst_55:
// rs1_w0_val == 1048576, rs2_w0_val == 33554432, rs2_w1_val == 512
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00100000;  op2val:0x00020002000000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00100000, 0x00020002000000, x1, 184, x2)

inst_56:
// rs1_w0_val == 524288, rs1_w1_val == -524289, rs2_w0_val == -268435457
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00080000;  op2val:0xffff7fffefffffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00080000, 0xffff7fffefffffff, x1, 192, x2)

inst_57:
// rs1_w0_val == 131072, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500020000;  op2val:0x00000700000007
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x00000500020000, 0x00000700000007, x1, 200, x2)

inst_58:
// rs1_w0_val == 65536, rs2_w1_val == 8
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900010000;  op2val:0x00000800000005
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x00000900010000, 0x00000800000005, x1, 208, x2)

inst_59:
// rs1_w0_val == 16384, rs1_w1_val == 1073741824
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000004000;  op2val:0xfffffffa00040000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x4000000000004000, 0xfffffffa00040000, x1, 216, x2)

inst_60:
// rs1_w0_val == 8192, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900002000;  op2val:0x080000fffff7ff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x00000900002000, 0x080000fffff7ff, x1, 224, x2)

inst_61:
// rs1_w0_val == 4096, rs2_w0_val == 67108864
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000001000;  op2val:0xffdfffff04000000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x00010000001000, 0xffdfffff04000000, x1, 232, x2)

inst_62:
// rs1_w0_val == 128, rs2_w1_val == 8192
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000080;  op2val:0x00200020000000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x00010000000080, 0x00200020000000, x1, 240, x2)

inst_63:
// rs1_w0_val == 64, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000040;  op2val:0xfefffffffffffffd
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000040, 0xfefffffffffffffd, x1, 248, x2)

inst_64:
// rs1_w0_val == 32, rs1_w1_val == 134217728, rs2_w0_val == 524288
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000020;  op2val:0xfffbffff00080000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x800000000000020, 0xfffbffff00080000, x1, 256, x2)

inst_65:
// rs1_w0_val == 1, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000001;  op2val:0x000005fbffffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000001, 0x000005fbffffff, x1, 264, x2)

inst_66:
// rs1_w0_val == 0, rs2_w0_val == -4194305
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000000;  op2val:0x000200ffbfffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000000, 0x000200ffbfffff, x1, 272, x2)

inst_67:
// rs1_w0_val == -1, rs1_w1_val == -8193
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffffff;  op2val:0x0000067fffffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xffffdfffffffffff, 0x0000067fffffff, x1, 280, x2)

inst_68:
// rs2_w1_val == 131072, rs1_w0_val == 2147483647, rs1_w1_val == 512, rs2_w0_val == 1048576
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x0002007fffffff;  op2val:0x02000000100000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x0002007fffffff, 0x02000000100000, x1, 288, x2)

inst_69:
// rs2_w1_val == 32768, rs2_w0_val == -8193
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001080000000;  op2val:0x008000ffffdfff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x00001080000000, 0x008000ffffdfff, x1, 296, x2)

inst_70:
// rs2_w1_val == 4096, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00020000;  op2val:0x00100000200000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00020000, 0x00100000200000, x1, 304, x2)

inst_71:
// rs2_w1_val == 2048, rs2_w0_val == 1431655765
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff880000000;  op2val:0x00080055555555
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffffff880000000, 0x00080055555555, x1, 312, x2)

inst_72:
// rs2_w1_val == 1024, rs2_w0_val == 1, rs1_w1_val == -131073
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000000;  op2val:0x00040000000001
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000000, 0x00040000000001, x1, 320, x2)

inst_73:
// rs2_w1_val == 256, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffffa;  op2val:0x00010000000009
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x10000000fffffffa, 0x00010000000009, x1, 328, x2)

inst_74:
// rs2_w1_val == 128, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800008000;  op2val:0x000080ffbfffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffffff800008000, 0x000080ffbfffff, x1, 336, x2)

inst_75:
// rs2_w1_val == 64, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00008000;  op2val:0x00004020000000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00008000, 0x00004020000000, x1, 344, x2)

inst_76:
// rs2_w1_val == 32, rs1_w1_val == -16385
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffff6;  op2val:0x000020ffff7fff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffff6, 0x000020ffff7fff, x1, 352, x2)

inst_77:
// rs2_w1_val == 16, rs2_w0_val == 1073741824
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffffbff;  op2val:0x00001040000000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x40000000fffffbff, 0x00001040000000, x1, 360, x2)

inst_78:
// rs2_w1_val == 4, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000001000;  op2val:0x00000400000200
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x20000000001000, 0x00000400000200, x1, 368, x2)

inst_79:
// rs2_w1_val == 2, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffbfffff;  op2val:0x000002fffffff9
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x001000ffbfffff, 0x000002fffffff9, x1, 376, x2)

inst_80:
// rs2_w1_val == 0, rs1_w1_val == -65537
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff40000000;  op2val:0x00000000000005
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffeffff40000000, 0x00000000000005, x1, 384, x2)

inst_81:
// rs2_w1_val == -1, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffff7ff;  op2val:0xffffffffaaaaaaaa
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xffffbffffffff7ff, 0xffffffffaaaaaaaa, x1, 392, x2)

inst_82:
// rs2_w0_val == -1073741825, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000000;  op2val:0x8000000bfffffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x00000800000000, 0x8000000bfffffff, x1, 400, x2)

inst_83:
// rs2_w0_val == -536870913, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000100;  op2val:0xfffffff7dfffffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x40000000000100, 0xfffffff7dfffffff, x1, 408, x2)

inst_84:
// rs2_w0_val == -134217729, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000006;  op2val:0xfffffff7f7ffffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000006, 0xfffffff7f7ffffff, x1, 416, x2)

inst_85:
// rs2_w0_val == -2097153, rs1_w0_val == -9
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffff7;  op2val:0x800000ffdfffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x10000000fffffff7, 0x800000ffdfffff, x1, 424, x2)

inst_86:
// rs2_w0_val == -65537, rs1_w0_val == 1431655765
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf55555555;  op2val:0xfffffff6fffeffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xffffffdf55555555, 0xfffffff6fffeffff, x1, 432, x2)

inst_87:
// rs2_w0_val == 131072, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000040000000;  op2val:0xfffffff700020000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x200000040000000, 0xfffffff700020000, x1, 440, x2)

inst_88:
// rs2_w0_val == 32768, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006fff7ffff;  op2val:0xfffffffd00008000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x000006fff7ffff, 0xfffffffd00008000, x1, 448, x2)

inst_89:
// rs2_w0_val == 8192, rs1_w1_val == 536870912
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000c0000000;  op2val:0xfbffffff00002000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x20000000c0000000, 0xfbffffff00002000, x1, 456, x2)

inst_90:
// rs2_w0_val == 1024, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffffdf;  op2val:0x200000000000400
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffffdf, 0x200000000000400, x1, 464, x2)

inst_91:
// rs2_w0_val == 256, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffbfffff;  op2val:0xffffffef00000100
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xffffffdfffbfffff, 0xffffffef00000100, x1, 472, x2)

inst_92:
// rs2_w0_val == 128, rs1_w1_val == -33554433
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff7fffffff;  op2val:0x7fffffff00000080
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfdffffff7fffffff, 0x7fffffff00000080, x1, 480, x2)

inst_93:
// rs2_w0_val == 64, rs1_w1_val == 16777216
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000080000000;  op2val:0xffffbfff00000040
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x100000080000000, 0xffffbfff00000040, x1, 488, x2)

inst_94:
// rs2_w0_val == 32, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff08000000;  op2val:0xfffdffff00000020
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x7fffffff08000000, 0xfffdffff00000020, x1, 496, x2)

inst_95:
// rs2_w0_val == 0, rs1_w1_val == 1431655765
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500100000;  op2val:0x100000000000000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x5555555500100000, 0x100000000000000, x1, 504, x2)

inst_96:
// rs2_w0_val == -1, rs1_w1_val == -2
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffffff;  op2val:0x001000ffffffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffffff, 0x001000ffffffff, x1, 512, x2)

inst_97:
// rs1_w1_val == -536870913, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff80000000;  op2val:0xffffefff10000000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xdfffffff80000000, 0xffffefff10000000, x1, 520, x2)

inst_98:
// rs1_w1_val == -268435457, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff55555555;  op2val:0xffeffffffffdffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xefffffff55555555, 0xffeffffffffdffff, x1, 528, x2)

inst_99:
// rs1_w1_val == -16777217, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00002000;  op2val:0xfdfffffffffffffa
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00002000, 0xfdfffffffffffffa, x1, 536, x2)

inst_100:
// rs1_w1_val == -32769, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffdffff;  op2val:0x10000000000004
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffdffff, 0x10000000000004, x1, 544, x2)

inst_101:
// rs1_w1_val == -1025, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000002;  op2val:0x010000f7ffffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000002, 0x010000f7ffffff, x1, 552, x2)

inst_102:
// rs1_w1_val == -129, rs2_w0_val == -2147483648
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00001000;  op2val:0x00004080000000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00001000, 0x00004080000000, x1, 560, x2)

inst_103:
// rs1_w1_val == -65, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00040000;  op2val:0xffffffdfffffffdf
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00040000, 0xffffffdfffffffdf, x1, 568, x2)

inst_104:
// rs1_w1_val == -17, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffffffff;  op2val:0xc000000000000002
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xffffffefffffffff, 0xc000000000000002, x1, 576, x2)

inst_105:
// rs1_w1_val == -9, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000010;  op2val:0xffffffef3fffffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffffff700000010, 0xffffffef3fffffff, x1, 584, x2)

inst_106:
// rs1_w1_val == -5, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffdfffff;  op2val:0xfffeffff00000003
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffffffbffdfffff, 0xfffeffff00000003, x1, 592, x2)

inst_107:
// rs1_w1_val == -3, rs1_w0_val == -129
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffffff7f;  op2val:0xfffffeffefffffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffffffdffffff7f, 0xfffffeffefffffff, x1, 600, x2)

inst_108:
// rs1_w1_val == 67108864, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000040;  op2val:0x3ffffffffffffdff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x400000000000040, 0x3ffffffffffffdff, x1, 608, x2)

inst_109:
// rs1_w1_val == 262144, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000002000;  op2val:0x00020000000007
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x04000000002000, 0x00020000000007, x1, 616, x2)

inst_110:
// rs1_w1_val == 131072, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000009;  op2val:0x80000000ffbfffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x02000000000009, 0x80000000ffbfffff, x1, 624, x2)

inst_111:
// rs1_w1_val == 65536, rs1_w0_val == 67108864
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000004000000;  op2val:0x000040bfffffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x01000004000000, 0x000040bfffffff, x1, 632, x2)

inst_112:
// rs1_w1_val == 16384, rs1_w0_val == -8193
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffffdfff;  op2val:0x02000000000400
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x004000ffffdfff, 0x02000000000400, x1, 640, x2)

inst_113:
// rs1_w1_val == 8192, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000002000;  op2val:0x55555555fffffeff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x00200000002000, 0x55555555fffffeff, x1, 648, x2)

inst_114:
// rs1_w1_val == 2048, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000004;  op2val:0x000040ff7fffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x00080000000004, 0x000040ff7fffff, x1, 656, x2)

inst_115:
// rs1_w1_val == 1024, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffffbff;  op2val:0xffffbfff00000100
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x000400fffffbff, 0xffffbfff00000100, x1, 664, x2)

inst_116:
// rs1_w1_val == 128, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000807fffffff;  op2val:0x00000100000800
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x0000807fffffff, 0x00000100000800, x1, 672, x2)

inst_117:
// rs1_w1_val == 32, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000100000;  op2val:0xc000000000000100
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x00002000100000, 0xc000000000000100, x1, 680, x2)

inst_118:
// rs1_w1_val == 2, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000800;  op2val:0x80000000000009
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x00000200000800, 0x80000000000009, x1, 688, x2)

inst_119:
// rs1_w1_val == -1, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffdfff;  op2val:0xfffffffd3fffffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xffffffffffffdfff, 0xfffffffd3fffffff, x1, 696, x2)

inst_120:
// rs1_w0_val == -1073741825, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8bfffffff;  op2val:0xfffffbff00000003
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffffff8bfffffff, 0xfffffbff00000003, x1, 704, x2)

inst_121:
// rs1_w0_val == -536870913, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffdfffffff;  op2val:0xfffffff600008000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xefffffffdfffffff, 0xfffffff600008000, x1, 712, x2)

inst_122:
// rs1_w0_val == -268435457, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080efffffff;  op2val:0xffffff7ffffffffa
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x000080efffffff, 0xffffff7ffffffffa, x1, 720, x2)

inst_123:
// rs1_w0_val == -67108865, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002fbffffff;  op2val:0xffbfffff00000004
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x000002fbffffff, 0xffbfffff00000004, x1, 728, x2)

inst_124:
// rs1_w0_val == -33554433, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800fdffffff;  op2val:0x00080000000003
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x000800fdffffff, 0x00080000000003, x1, 736, x2)

inst_125:
// rs1_w0_val == -16777217, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffeffffff;  op2val:0xff7fffffefffffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xffdffffffeffffff, 0xff7fffffefffffff, x1, 744, x2)

inst_126:
// rs1_w0_val == -8388609, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020ff7fffff;  op2val:0xffff7fffffffffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x000020ff7fffff, 0xffff7fffffffffff, x1, 752, x2)

inst_127:
// rs2_w0_val == -16385, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000ffffdfff;  op2val:0x8000000ffffbfff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x080000ffffdfff, 0x8000000ffffbfff, x1, 760, x2)

inst_128:
// rs2_w0_val == -4097, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000007;  op2val:0x000400ffffefff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000007, 0x000400ffffefff, x1, 768, x2)

inst_129:
// rs1_w0_val == -1048577, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005ffefffff;  op2val:0x7ffffffffffffdff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x000005ffefffff, 0x7ffffffffffffdff, x1, 776, x2)

inst_130:
// rs1_w0_val == -65537, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffeffff;  op2val:0xc0000000fdffffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffeffff, 0xc0000000fdffffff, x1, 784, x2)

inst_131:
// rs2_w0_val == -65, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000008000;  op2val:0xffdfffffffffffbf
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x40000000008000, 0xffdfffffffffffbf, x1, 792, x2)

inst_132:
// rs2_w0_val == -5, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffefffff;  op2val:0xfffffefffffffffb
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xffffffdfffefffff, 0xfffffefffffffffb, x1, 800, x2)

inst_133:
// rs1_w0_val == -513, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffffdff;  op2val:0xffffffff55555555
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x002000fffffdff, 0xffffffff55555555, x1, 808, x2)

inst_134:
// rs2_w0_val == 4194304, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00200000;  op2val:0xefffffff00400000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00200000, 0xefffffff00400000, x1, 816, x2)

inst_135:
// rs1_w0_val == -5, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffffffffb;  op2val:0x000002ffffbfff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffefffffffffffb, 0x000002ffffbfff, x1, 824, x2)

inst_136:
// rs1_w0_val == -3, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffffffd;  op2val:0xfffffff8ffffffff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffffffd, 0xfffffff8ffffffff, x1, 832, x2)

inst_137:
// rs1_w0_val == -65, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffffbf;  op2val:0xfffffff600040000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffffbf, 0xfffffff600040000, x1, 840, x2)

inst_138:
// rs1_w0_val == -16385, 
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080ffffbfff;  op2val:0x00000600000000
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x000080ffffbfff, 0x00000600000000, x1, 848, x2)

inst_139:
// rs2_w1_val == -33554433, rs1_w1_val == 64, rs1_w0_val == 262144
// opcode: smds32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000040000;  op2val:0xfdfffffffffffbff
TEST_RR_OP(smds32, x31, x30, x29, 0x0000000000000000, 0x00004000040000, 0xfdfffffffffffbff, x1, 856, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x14_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 108*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
