
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kcrsa32 instruction of the RISC-V RV64PZicsr extension for the kcrsa32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kcrsa32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x31, rs2==x9, rd==x31, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val != rs2_w0_val, rs2_w1_val == -65, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w0_val == 1431655765, rs1_w1_val == 4
// opcode: kcrsa32 ; op1:x31; op2:x9; dest:x31; op1val:0x00000480000000;  op2val:0xffffffbf55555555
TEST_PKRR_OP(kcrsa32, x31, x31, x9, 0x0000000000000000, 0x00000480000000, 0xffffffbf55555555, x31, x6, 0, x13)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x20, rs2==x31, rd==x8, rs1_w1_val == rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w0_val == 16384, rs2_w1_val == 8388608, rs2_w0_val == -134217729, rs1_w1_val == 8388608
// opcode: kcrsa32 ; op1:x20; op2:x31; dest:x8; op1val:0x80000000004000;  op2val:0x800000f7ffffff
TEST_PKRR_OP(kcrsa32, x8, x20, x31, 0x0000000000000000, 0x80000000004000, 0x800000f7ffffff, x20, x6, 16, x13)

inst_2:
// rs1 == rs2 != rd, rs1==x14, rs2==x14, rd==x22, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w1_val == 536870912, rs1_w0_val == 32
// opcode: kcrsa32 ; op1:x14; op2:x14; dest:x22; op1val:0xfffffff600000020;  op2val:0x20000000fffffff6
TEST_PKRR_OP(kcrsa32, x22, x14, x14, 0x0000000000000000, 0xfffffff600000020, 0x20000000fffffff6, x14, x6, 32, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x24, rs2==x24, rd==x24, rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w0_val == 67108864, rs1_w0_val == 1431655765, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == -4194305
// opcode: kcrsa32 ; op1:x24; op2:x24; dest:x24; op1val:0xffbfffff55555555;  op2val:0xfffffff804000000
TEST_PKRR_OP(kcrsa32, x24, x24, x24, 0x0000000000000000, 0xffbfffff55555555, 0xfffffff804000000, x24, x6, 48, x13)

inst_4:
// rs2 == rd != rs1, rs1==x2, rs2==x7, rd==x7, rs1_w0_val == rs2_w0_val, rs1_w1_val == -262145
// opcode: kcrsa32 ; op1:x2; op2:x7; dest:x7; op1val:0xfffbffff00000009;  op2val:0x3fffffff00000009
TEST_PKRR_OP(kcrsa32, x7, x2, x7, 0x0000000000000000, 0xfffbffff00000009, 0x3fffffff00000009, x2, x6, 64, x13)

inst_5:
// rs1==x0, rs2==x18, rd==x16, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w0_val == -3, rs1_w1_val == 8, rs2_w1_val == -32769
// opcode: kcrsa32 ; op1:x0; op2:x18; dest:x16; op1val:0x000008fffffffd;  op2val:0xffff7ffff7ffffff
TEST_PKRR_OP(kcrsa32, x16, x0, x18, 0x0000000000000000, 0x000008fffffffd, 0xffff7ffff7ffffff, x0, x6, 80, x13)

inst_6:
// rs1==x1, rs2==x19, rd==x5, rs2_w1_val == -1431655766, rs1_w0_val == 2097152, rs2_w0_val == -536870913, rs1_w1_val == -8388609
// opcode: kcrsa32 ; op1:x1; op2:x19; dest:x5; op1val:0xff7fffff00200000;  op2val:0xaaaaaaaadfffffff
TEST_PKRR_OP(kcrsa32, x5, x1, x19, 0x0000000000000000, 0xff7fffff00200000, 0xaaaaaaaadfffffff, x1, x6, 96, x13)

inst_7:
// rs1==x12, rs2==x21, rd==x0, rs2_w1_val == 1431655765, rs1_w1_val == -536870913, rs2_w0_val == -8193
// opcode: kcrsa32 ; op1:x12; op2:x21; dest:x0; op1val:0xdffffffffffffff6;  op2val:0x55555555ffffdfff
TEST_PKRR_OP(kcrsa32, x0, x12, x21, 0x0000000000000000, 0xdffffffffffffff6, 0x55555555ffffdfff, x12, x6, 112, x13)

inst_8:
// rs1==x29, rs2==x12, rd==x11, rs2_w1_val == 2147483647, rs1_w0_val == 131072, rs1_w1_val == 33554432
// opcode: kcrsa32 ; op1:x29; op2:x12; dest:x11; op1val:0x200000000020000;  op2val:0x7fffffffffffdfff
TEST_PKRR_OP(kcrsa32, x11, x29, x12, 0x0000000000000000, 0x200000000020000, 0x7fffffffffffdfff, x29, x6, 128, x13)

inst_9:
// rs1==x30, rs2==x23, rd==x25, rs2_w1_val == -1073741825, rs2_w0_val == 1, rs1_w1_val == -257
// opcode: kcrsa32 ; op1:x30; op2:x23; dest:x25; op1val:0xfffffeff55555555;  op2val:0xbfffffff00000001
TEST_PKRR_OP(kcrsa32, x25, x30, x23, 0x0000000000000000, 0xfffffeff55555555, 0xbfffffff00000001, x30, x6, 144, x13)

inst_10:
// rs1==x15, rs2==x10, rd==x14, rs2_w1_val == -536870913, rs1_w0_val == 0
// opcode: kcrsa32 ; op1:x15; op2:x10; dest:x14; op1val:0xfffffffa00000000;  op2val:0xdfffffff00000006
TEST_PKRR_OP(kcrsa32, x14, x15, x10, 0x0000000000000000, 0xfffffffa00000000, 0xdfffffff00000006, x15, x6, 160, x13)

inst_11:
// rs1==x3, rs2==x30, rd==x17, rs2_w1_val == -268435457, rs1_w0_val == -67108865, rs2_w0_val == -257, rs1_w1_val == 2147483647
// opcode: kcrsa32 ; op1:x3; op2:x30; dest:x17; op1val:0x7ffffffffbffffff;  op2val:0xeffffffffffffeff
TEST_PKRR_OP(kcrsa32, x17, x3, x30, 0x0000000000000000, 0x7ffffffffbffffff, 0xeffffffffffffeff, x3, x6, 176, x13)

inst_12:
// rs1==x11, rs2==x5, rd==x4, rs2_w1_val == -134217729, rs1_w1_val == 32768, rs2_w0_val == -9
// opcode: kcrsa32 ; op1:x11; op2:x5; dest:x4; op1val:0x00800000000007;  op2val:0xf7fffffffffffff7
TEST_PKRR_OP(kcrsa32, x4, x11, x5, 0x0000000000000000, 0x00800000000007, 0xf7fffffffffffff7, x11, x6, 192, x13)

inst_13:
// rs1==x13, rs2==x27, rd==x29, rs2_w1_val == -67108865, rs2_w0_val == -8388609, rs1_w0_val == -65, rs1_w1_val == -2049
// opcode: kcrsa32 ; op1:x13; op2:x27; dest:x29; op1val:0xfffff7ffffffffbf;  op2val:0xfbffffffff7fffff
TEST_PKRR_OP(kcrsa32, x29, x13, x27, 0x0000000000000000, 0xfffff7ffffffffbf, 0xfbffffffff7fffff, x13, x6, 208, x11)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_14:
// rs1==x4, rs2==x22, rd==x23, rs2_w1_val == -33554433, rs1_w1_val == 536870912
// opcode: kcrsa32 ; op1:x4; op2:x22; dest:x23; op1val:0x20000000fffffffc;  op2val:0xfdffffff00000005
TEST_PKRR_OP(kcrsa32, x23, x4, x22, 0x0000000000000000, 0x20000000fffffffc, 0xfdffffff00000005, x4, x7, 0, x11)

inst_15:
// rs1==x10, rs2==x6, rd==x9, rs2_w1_val == -16777217, rs2_w0_val == 1024, rs1_w1_val == 32, rs1_w0_val == -2097153
// opcode: kcrsa32 ; op1:x10; op2:x6; dest:x9; op1val:0x000020ffdfffff;  op2val:0xfeffffff00000400
TEST_PKRR_OP(kcrsa32, x9, x10, x6, 0x0000000000000000, 0x000020ffdfffff, 0xfeffffff00000400, x10, x7, 16, x11)

inst_16:
// rs1==x25, rs2==x17, rd==x30, rs2_w1_val == -8388609, rs1_w1_val == 268435456, rs1_w0_val == -134217729
// opcode: kcrsa32 ; op1:x25; op2:x17; dest:x30; op1val:0x10000000f7ffffff;  op2val:0xff7ffffffffffffa
TEST_PKRR_OP(kcrsa32, x30, x25, x17, 0x0000000000000000, 0x10000000f7ffffff, 0xff7ffffffffffffa, x25, x7, 32, x11)

inst_17:
// rs1==x18, rs2==x1, rd==x12, rs2_w1_val == -4194305, rs2_w0_val == 2, rs1_w0_val == -2
// opcode: kcrsa32 ; op1:x18; op2:x1; dest:x12; op1val:0x3ffffffffffffffe;  op2val:0xffbfffff00000002
TEST_PKRR_OP(kcrsa32, x12, x18, x1, 0x0000000000000000, 0x3ffffffffffffffe, 0xffbfffff00000002, x18, x7, 48, x11)

inst_18:
// rs1==x26, rs2==x0, rd==x18, rs2_w1_val == -2097153, rs1_w0_val == -513, rs2_w0_val == -65, rs1_w1_val == -32769
// opcode: kcrsa32 ; op1:x26; op2:x0; dest:x18; op1val:0xffff7ffffffffdff;  op2val:0xffdfffffffffffbf
TEST_PKRR_OP(kcrsa32, x18, x26, x0, 0x0000000000000000, 0xffff7ffffffffdff, 0xffdfffffffffffbf, x26, x7, 64, x11)

inst_19:
// rs1==x17, rs2==x3, rd==x21, rs2_w1_val == -1048577, rs1_w1_val == 262144, rs2_w0_val == 16
// opcode: kcrsa32 ; op1:x17; op2:x3; dest:x21; op1val:0x0400003fffffff;  op2val:0xffefffff00000010
TEST_PKRR_OP(kcrsa32, x21, x17, x3, 0x0000000000000000, 0x0400003fffffff, 0xffefffff00000010, x17, x7, 80, x11)

inst_20:
// rs1==x23, rs2==x8, rd==x15, rs2_w1_val == -524289, rs1_w1_val == -16385, rs1_w0_val == 1048576, rs2_w0_val == -33
// opcode: kcrsa32 ; op1:x23; op2:x8; dest:x15; op1val:0xffffbfff00100000;  op2val:0xfff7ffffffffffdf
TEST_PKRR_OP(kcrsa32, x15, x23, x8, 0x0000000000000000, 0xffffbfff00100000, 0xfff7ffffffffffdf, x23, x7, 96, x11)

inst_21:
// rs1==x28, rs2==x26, rd==x6, rs2_w1_val == -262145, rs1_w1_val == 8192, rs2_w0_val == -4194305, rs1_w0_val == 16
// opcode: kcrsa32 ; op1:x28; op2:x26; dest:x6; op1val:0x00200000000010;  op2val:0xfffbffffffbfffff
TEST_PKRR_OP(kcrsa32, x6, x28, x26, 0x0000000000000000, 0x00200000000010, 0xfffbffffffbfffff, x28, x7, 112, x11)

inst_22:
// rs1==x9, rs2==x4, rd==x19, rs2_w1_val == -131073, 
// opcode: kcrsa32 ; op1:x9; op2:x4; dest:x19; op1val:0x20000000f7ffffff;  op2val:0xfffdffff00000005
TEST_PKRR_OP(kcrsa32, x19, x9, x4, 0x0000000000000000, 0x20000000f7ffffff, 0xfffdffff00000005, x9, x7, 128, x11)

inst_23:
// rs1==x19, rs2==x20, rd==x28, rs2_w1_val == -65537, rs1_w0_val == -33554433, rs1_w1_val == -1048577
// opcode: kcrsa32 ; op1:x19; op2:x20; dest:x28; op1val:0xffeffffffdffffff;  op2val:0xfffeffffdfffffff
TEST_PKRR_OP(kcrsa32, x28, x19, x20, 0x0000000000000000, 0xffeffffffdffffff, 0xfffeffffdfffffff, x19, x7, 144, x11)

inst_24:
// rs1==x16, rs2==x28, rd==x26, rs2_w1_val == -16385, rs1_w0_val == -131073, rs2_w0_val == 4096
// opcode: kcrsa32 ; op1:x16; op2:x28; dest:x26; op1val:0xfffffefffffdffff;  op2val:0xffffbfff00001000
TEST_PKRR_OP(kcrsa32, x26, x16, x28, 0x0000000000000000, 0xfffffefffffdffff, 0xffffbfff00001000, x16, x7, 160, x11)

inst_25:
// rs1==x22, rs2==x29, rd==x2, rs2_w1_val == -8193, rs1_w1_val == -1431655766, rs1_w0_val == -2049
// opcode: kcrsa32 ; op1:x22; op2:x29; dest:x2; op1val:0xaaaaaaaafffff7ff;  op2val:0xffffdfff00000009
TEST_PKRR_OP(kcrsa32, x2, x22, x29, 0x0000000000000000, 0xaaaaaaaafffff7ff, 0xffffdfff00000009, x22, x7, 176, x11)

inst_26:
// rs1==x21, rs2==x13, rd==x27, rs2_w1_val == -4097, rs2_w0_val == -3
// opcode: kcrsa32 ; op1:x21; op2:x13; dest:x27; op1val:0x002000fffffffe;  op2val:0xffffeffffffffffd
TEST_PKRR_OP(kcrsa32, x27, x21, x13, 0x0000000000000000, 0x002000fffffffe, 0xffffeffffffffffd, x21, x7, 192, x11)

inst_27:
// rs1==x6, rs2==x2, rd==x20, rs2_w1_val == -2049, rs2_w0_val == 262144, rs1_w1_val == 4194304
// opcode: kcrsa32 ; op1:x6; op2:x2; dest:x20; op1val:0x4000003fffffff;  op2val:0xfffff7ff00040000
TEST_PKRR_OP(kcrsa32, x20, x6, x2, 0x0000000000000000, 0x4000003fffffff, 0xfffff7ff00040000, x6, x7, 208, x11)

inst_28:
// rs1==x5, rs2==x16, rd==x1, rs2_w1_val == -1025, rs2_w0_val == -513, rs1_w1_val == 67108864, rs1_w0_val == 65536
// opcode: kcrsa32 ; op1:x5; op2:x16; dest:x1; op1val:0x400000000010000;  op2val:0xfffffbfffffffdff
TEST_PKRR_OP(kcrsa32, x1, x5, x16, 0x0000000000000000, 0x400000000010000, 0xfffffbfffffffdff, x5, x7, 224, x11)

inst_29:
// rs1==x8, rs2==x15, rd==x10, rs2_w1_val == -513, rs1_w0_val == 1073741824, rs2_w0_val == 524288
// opcode: kcrsa32 ; op1:x8; op2:x15; dest:x10; op1val:0xfffffffc40000000;  op2val:0xfffffdff00080000
TEST_PKRR_OP(kcrsa32, x10, x8, x15, 0x0000000000000000, 0xfffffffc40000000, 0xfffffdff00080000, x8, x7, 240, x2)

inst_30:
// rs1==x27, rs2==x11, rd==x3, rs2_w1_val == -257, rs1_w1_val == -33554433, rs2_w0_val == -17, rs1_w0_val == -524289
// opcode: kcrsa32 ; op1:x27; op2:x11; dest:x3; op1val:0xfdfffffffff7ffff;  op2val:0xfffffeffffffffef
TEST_PKRR_OP(kcrsa32, x3, x27, x11, 0x0000000000000000, 0xfdfffffffff7ffff, 0xfffffeffffffffef, x27, x7, 256, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x7, rs2==x25, rd==x13, rs2_w1_val == -129, rs2_w0_val == 0, rs1_w0_val == -32769
// opcode: kcrsa32 ; op1:x7; op2:x25; dest:x13; op1val:0xfffffffcffff7fff;  op2val:0xffffff7f00000000
TEST_PKRR_OP(kcrsa32, x13, x7, x25, 0x0000000000000000, 0xfffffffcffff7fff, 0xffffff7f00000000, x7, x1, 0, x2)

inst_32:
// rs2_w1_val == -33, rs1_w0_val == -268435457, rs2_w0_val == -1048577
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000efffffff;  op2val:0xffffffdfffefffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x008000efffffff, 0xffffffdfffefffff, x30, x1, 16, x2)

inst_33:
// rs2_w1_val == -17, rs2_w0_val == 65536, rs1_w0_val == 4194304, rs1_w1_val == -16777217
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00400000;  op2val:0xffffffef00010000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00400000, 0xffffffef00010000, x30, x1, 32, x2)

inst_34:
// rs2_w1_val == -9, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000000;  op2val:0xfffffff700000001
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000000, 0xfffffff700000001, x30, x1, 48, x2)

inst_35:
// rs2_w1_val == -5, rs2_w0_val == -65537, rs1_w1_val == -134217729
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00200000;  op2val:0xfffffffbfffeffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00200000, 0xfffffffbfffeffff, x30, x1, 64, x2)

inst_36:
// rs2_w1_val == -3, rs2_w0_val == 2097152
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffff8;  op2val:0xfffffffd00200000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffff8, 0xfffffffd00200000, x30, x1, 80, x2)

inst_37:
// rs2_w1_val == -2, rs2_w0_val == 8388608
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007fffffffa;  op2val:0xfffffffe00800000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x000007fffffffa, 0xfffffffe00800000, x30, x1, 96, x2)

inst_38:
// rs2_w1_val == -2147483648, rs1_w1_val == -4097
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffdffffff;  op2val:0x8000000004000000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffeffffdffffff, 0x8000000004000000, x30, x1, 112, x2)

inst_39:
// rs2_w1_val == 1073741824, rs2_w0_val == 2147483647
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000080000000;  op2val:0x400000007fffffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x04000080000000, 0x400000007fffffff, x30, x1, 128, x2)

inst_40:
// rs2_w1_val == 268435456, rs2_w0_val == 32768, rs1_w1_val == 524288
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffffd;  op2val:0x1000000000008000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x080000fffffffd, 0x1000000000008000, x30, x1, 144, x2)

inst_41:
// rs2_w1_val == 134217728, rs2_w0_val == 32
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffff7ff;  op2val:0x800000000000020
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xdffffffffffff7ff, 0x800000000000020, x30, x1, 160, x2)

inst_42:
// rs2_w1_val == 67108864, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffffff6;  op2val:0x4000000fffffff7
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x000020fffffff6, 0x4000000fffffff7, x30, x1, 176, x2)

inst_43:
// rs2_w1_val == 33554432, rs2_w0_val == 134217728
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffffff8;  op2val:0x200000008000000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xffbffffffffffff8, 0x200000008000000, x30, x1, 192, x2)

inst_44:
// rs2_w1_val == 16777216, rs2_w0_val == -16385, rs1_w1_val == 1431655765, rs1_w0_val == -4097
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555ffffefff;  op2val:0x1000000ffffbfff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x55555555ffffefff, 0x1000000ffffbfff, x30, x1, 208, x2)

inst_45:
// rs2_w1_val == 4194304, rs1_w1_val == -129, rs1_w0_val == 524288, rs2_w0_val == -524289
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00080000;  op2val:0x400000fff7ffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00080000, 0x400000fff7ffff, x30, x1, 224, x2)

inst_46:
// rs2_w1_val == 2097152, rs1_w0_val == -257, rs2_w0_val == 1073741824
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffffeff;  op2val:0x20000040000000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffffeff, 0x20000040000000, x30, x1, 240, x2)

inst_47:
// rs2_w1_val == 1048576, rs2_w0_val == -67108865, rs1_w0_val == 8
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000008;  op2val:0x100000fbffffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000008, 0x100000fbffffff, x30, x1, 256, x2)

inst_48:
// rs2_w1_val == 524288, rs1_w1_val == -1073741825
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffffffa;  op2val:0x0800003fffffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xbffffffffffffffa, 0x0800003fffffff, x30, x1, 272, x2)

inst_49:
// rs2_w1_val == 262144, rs1_w0_val == 256, rs1_w1_val == 2
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000100;  op2val:0x04000004000000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000200000100, 0x04000004000000, x30, x1, 288, x2)

inst_50:
// rs2_w1_val == 131072, rs1_w1_val == -8193, rs2_w0_val == 8
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffffffff6;  op2val:0x02000000000008
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffdffffffffff6, 0x02000000000008, x30, x1, 304, x2)

inst_51:
// rs1_w0_val == 33554432, rs2_w1_val == 4096
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff802000000;  op2val:0x001000dfffffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff802000000, 0x001000dfffffff, x30, x1, 320, x2)

inst_52:
// rs1_w0_val == 16777216, rs2_w1_val == 2
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff01000000;  op2val:0x00000200000020
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xdfffffff01000000, 0x00000200000020, x30, x1, 336, x2)

inst_53:
// rs1_w0_val == 8388608, rs2_w0_val == 33554432
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00800000;  op2val:0xfffdffff02000000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00800000, 0xfffdffff02000000, x30, x1, 352, x2)

inst_54:
// rs1_w0_val == 262144, rs2_w0_val == 256, rs1_w1_val == -524289
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00040000;  op2val:0x08000000000100
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00040000, 0x08000000000100, x30, x1, 368, x2)

inst_55:
// rs1_w0_val == 32768, rs1_w1_val == 64
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000008000;  op2val:0xfffdffffffbfffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x00004000008000, 0xfffdffffffbfffff, x30, x1, 384, x2)

inst_56:
// rs1_w0_val == 8192, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00002000;  op2val:0x08000000000020
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00002000, 0x08000000000020, x30, x1, 400, x2)

inst_57:
// rs1_w0_val == 4096, rs2_w1_val == 32768
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00001000;  op2val:0x008000fffffffc
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00001000, 0x008000fffffffc, x30, x1, 416, x2)

inst_58:
// rs1_w0_val == 2048, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000800;  op2val:0xfffffffd00000005
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000800, 0xfffffffd00000005, x30, x1, 432, x2)

inst_59:
// rs1_w0_val == 1024, rs2_w0_val == 536870912
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000400;  op2val:0xfffbffff20000000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000400, 0xfffbffff20000000, x30, x1, 448, x2)

inst_60:
// rs1_w0_val == 512, rs2_w1_val == 256
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000200;  op2val:0x00010000000020
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000200, 0x00010000000020, x30, x1, 464, x2)

inst_61:
// rs1_w0_val == 128, rs1_w1_val == -1025, rs2_w0_val == 2048
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000080;  op2val:0xfffffff700000800
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000080, 0xfffffff700000800, x30, x1, 480, x2)

inst_62:
// rs1_w0_val == 64, rs1_w1_val == 1048576
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000040;  op2val:0xfffdfffffff7ffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x10000000000040, 0xfffdfffffff7ffff, x30, x1, 496, x2)

inst_63:
// rs1_w0_val == 4, rs1_w1_val == -5
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000004;  op2val:0x10000000800000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000004, 0x10000000800000, x30, x1, 512, x2)

inst_64:
// rs1_w0_val == 2, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000002;  op2val:0x000006ffffffef
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000002, 0x000006ffffffef, x30, x1, 528, x2)

inst_65:
// rs1_w0_val == 1, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000001;  op2val:0xffffffef00000800
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x04000000000001, 0xffffffef00000800, x30, x1, 544, x2)

inst_66:
// rs1_w0_val == -1, rs2_w1_val == 16384, rs2_w0_val == -2097153
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffffffff;  op2val:0x004000ffdfffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xffff7fffffffffff, 0x004000ffdfffff, x30, x1, 560, x2)

inst_67:
// rs2_w1_val == 65536, rs1_w0_val == -33
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffaffffffdf;  op2val:0x01000000008000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffaffffffdf, 0x01000000008000, x30, x1, 576, x2)

inst_68:
// rs2_w1_val == 8192, rs1_w1_val == 2097152
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000800000;  op2val:0x002000fffffff7
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x20000000800000, 0x002000fffffff7, x30, x1, 592, x2)

inst_69:
// rs2_w1_val == 2048, rs2_w0_val == 131072
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900008000;  op2val:0x00080000020000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000900008000, 0x00080000020000, x30, x1, 608, x2)

inst_70:
// rs2_w1_val == 1024, rs1_w1_val == 4096, rs1_w0_val == 67108864
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100004000000;  op2val:0x00040000000400
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x00100004000000, 0x00040000000400, x30, x1, 624, x2)

inst_71:
// rs2_w1_val == 512, rs1_w0_val == -536870913, rs1_w1_val == 0
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000dfffffff;  op2val:0x00020000800000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x000000dfffffff, 0x00020000800000, x30, x1, 640, x2)

inst_72:
// rs2_w1_val == 128, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000002;  op2val:0x00008008000000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000002, 0x00008008000000, x30, x1, 656, x2)

inst_73:
// rs2_w1_val == 64, rs1_w1_val == 131072
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000fffffffd;  op2val:0x00004000000020
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x020000fffffffd, 0x00004000000020, x30, x1, 672, x2)

inst_74:
// rs2_w1_val == 32, rs1_w0_val == -65537
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffeffff;  op2val:0x00002000200000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffeffff, 0x00002000200000, x30, x1, 688, x2)

inst_75:
// rs2_w1_val == 16, rs2_w0_val == -4097
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000010000;  op2val:0x000010ffffefff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x2000000000010000, 0x000010ffffefff, x30, x1, 704, x2)

inst_76:
// rs2_w1_val == 8, rs1_w0_val == -8388609, rs2_w0_val == 8192, rs1_w1_val == 1
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001ff7fffff;  op2val:0x00000800002000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x000001ff7fffff, 0x00000800002000, x30, x1, 720, x2)

inst_77:
// rs2_w1_val == 4, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000efffffff;  op2val:0x000004ffffffbf
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x200000efffffff, 0x000004ffffffbf, x30, x1, 736, x2)

inst_78:
// rs2_w1_val == 1, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffdfffffff;  op2val:0x000001c0000000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfdffffffdfffffff, 0x000001c0000000, x30, x1, 752, x2)

inst_79:
// rs2_w1_val == 0, rs2_w0_val == 64
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000655555555;  op2val:0x00000000000040
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000655555555, 0x00000000000040, x30, x1, 768, x2)

inst_80:
// rs2_w1_val == -1, rs2_w0_val == -32769
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00000400;  op2val:0xffffffffffff7fff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000400, 0xffffffffffff7fff, x30, x1, 784, x2)

inst_81:
// rs2_w0_val == -1431655766, rs1_w1_val == -9
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000080;  op2val:0xffffffefaaaaaaaa
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff700000080, 0xffffffefaaaaaaaa, x30, x1, 800, x2)

inst_82:
// rs2_w0_val == 16384, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400400000;  op2val:0x00100000004000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000400400000, 0x00100000004000, x30, x1, 816, x2)

inst_83:
// rs2_w0_val == 512, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006fffffeff;  op2val:0xffffff7f00000200
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x000006fffffeff, 0xffffff7f00000200, x30, x1, 832, x2)

inst_84:
// rs2_w0_val == 128, rs1_w1_val == 2048
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000800;  op2val:0xfffff7ff00000080
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x00080000000800, 0xfffff7ff00000080, x30, x1, 848, x2)

inst_85:
// rs2_w0_val == 4, rs1_w1_val == -33
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000007;  op2val:0xf7ffffff00000004
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000007, 0xf7ffffff00000004, x30, x1, 864, x2)

inst_86:
// rs2_w0_val == -1, rs1_w1_val == -65
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf55555555;  op2val:0xffffffdfffffffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffffbf55555555, 0xffffffdfffffffff, x30, x1, 880, x2)

inst_87:
// rs1_w1_val == -268435457, rs2_w0_val == -2049
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000007;  op2val:0xffbffffffffff7ff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xefffffff00000007, 0xffbffffffffff7ff, x30, x1, 896, x2)

inst_88:
// rs1_w1_val == -67108865, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffffeff;  op2val:0xfffffdff00800000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffffeff, 0xfffffdff00800000, x30, x1, 912, x2)

inst_89:
// rs1_w1_val == -2097153, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00400000;  op2val:0x800000000000000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00400000, 0x800000000000000, x30, x1, 928, x2)

inst_90:
// rs1_w1_val == -131073, rs1_w0_val == -129
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffff7f;  op2val:0xfffffff800000006
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffff7f, 0xfffffff800000006, x30, x1, 944, x2)

inst_91:
// rs1_w1_val == -65537, rs2_w0_val == 16777216
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffdfffff;  op2val:0x02000001000000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffeffffffdfffff, 0x02000001000000, x30, x1, 960, x2)

inst_92:
// rs1_w1_val == -513, rs1_w0_val == -8193
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffdfff;  op2val:0xfffffff8fffffff7
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffdfff, 0xfffffff8fffffff7, x30, x1, 976, x2)

inst_93:
// rs1_w1_val == -17, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000200;  op2val:0x00800000004000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffffef00000200, 0x00800000004000, x30, x1, 992, x2)

inst_94:
// rs1_w1_val == -3, rs1_w0_val == -5
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffffffb;  op2val:0x800000007fffffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffffffb, 0x800000007fffffff, x30, x1, 1008, x2)

inst_95:
// rs1_w1_val == -2, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000200;  op2val:0xfffffff600002000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000200, 0xfffffff600002000, x30, x1, 1024, x2)

inst_96:
// rs1_w1_val == -2147483648, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffff7f;  op2val:0x08000000004000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x80000000ffffff7f, 0x08000000004000, x30, x1, 1040, x2)

inst_97:
// rs1_w1_val == 1073741824, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000f7ffffff;  op2val:0x00000500000020
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x40000000f7ffffff, 0x00000500000020, x30, x1, 1056, x2)

inst_98:
// rs1_w1_val == 134217728, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000007;  op2val:0x000100fffeffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x800000000000007, 0x000100fffeffff, x30, x1, 1072, x2)

inst_99:
// rs1_w1_val == 16777216, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000080;  op2val:0xffffbfff00000001
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x100000000000080, 0xffffbfff00000001, x30, x1, 1088, x2)

inst_100:
// rs1_w1_val == 65536, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffffffe;  op2val:0x02000000000008
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x010000fffffffe, 0x02000000000008, x30, x1, 1104, x2)

inst_101:
// rs1_w1_val == 16384, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ff7fffff;  op2val:0x001000ffffffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x004000ff7fffff, 0x001000ffffffff, x30, x1, 1120, x2)

inst_102:
// rs1_w1_val == 1024, rs2_w0_val == -131073, rs1_w0_val == 536870912
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040020000000;  op2val:0xdffffffffffdffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x00040020000000, 0xdffffffffffdffff, x30, x1, 1136, x2)

inst_103:
// rs1_w1_val == 512, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020080000000;  op2val:0x040000fffffff7
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x00020080000000, 0x040000fffffff7, x30, x1, 1152, x2)

inst_104:
// rs1_w1_val == 256, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000005;  op2val:0xfbffffff00000008
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x00010000000005, 0xfbffffff00000008, x30, x1, 1168, x2)

inst_105:
// rs1_w1_val == 128, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000000000;  op2val:0xfffffff8c0000000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x00008000000000, 0xfffffff8c0000000, x30, x1, 1184, x2)

inst_106:
// rs1_w1_val == 16, rs2_w0_val == -1025
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010fbffffff;  op2val:0x000007fffffbff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x000010fbffffff, 0x000007fffffbff, x30, x1, 1200, x2)

inst_107:
// rs2_w0_val == -1073741825, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffffffd;  op2val:0xffefffffbfffffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x001000fffffffd, 0xffefffffbfffffff, x30, x1, 1216, x2)

inst_108:
// rs1_w0_val == 134217728, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff08000000;  op2val:0xffbfffffffefffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfdffffff08000000, 0xffbfffffffefffff, x30, x1, 1232, x2)

inst_109:
// rs2_w0_val == -268435457, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffffe;  op2val:0xfffffffbefffffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffffe, 0xfffffffbefffffff, x30, x1, 1248, x2)

inst_110:
// rs1_w1_val == -1, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffdffffff;  op2val:0x4000000ff7fffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffffdffffff, 0x4000000ff7fffff, x30, x1, 1264, x2)

inst_111:
// rs2_w0_val == -33554433, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffff7fff;  op2val:0xfffffffffdffffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffdfffffff7fff, 0xfffffffffdffffff, x30, x1, 1280, x2)

inst_112:
// rs1_w0_val == -1431655766, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000aaaaaaaa;  op2val:0xffffdfff00200000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x008000aaaaaaaa, 0xffffdfff00200000, x30, x1, 1296, x2)

inst_113:
// rs2_w0_val == -16777217, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000008000;  op2val:0x800000feffffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x00002000008000, 0x800000feffffff, x30, x1, 1312, x2)

inst_114:
// rs1_w0_val == 2147483647, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x0020007fffffff;  op2val:0x000003ffffbfff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x0020007fffffff, 0x000003ffffbfff, x30, x1, 1328, x2)

inst_115:
// rs1_w0_val == -1073741825, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffbfffffff;  op2val:0x00000100040000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffdfffbfffffff, 0x00000100040000, x30, x1, 1344, x2)

inst_116:
// rs2_w0_val == -262145, rs1_w0_val == -9
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffff7;  op2val:0x000002fffbffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x800000fffffff7, 0x000002fffbffff, x30, x1, 1360, x2)

inst_117:
// rs1_w0_val == -16777217, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000feffffff;  op2val:0xdfffffff20000000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x400000feffffff, 0xdfffffff20000000, x30, x1, 1376, x2)

inst_118:
// rs1_w0_val == -4194305, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffbfffff;  op2val:0x8000000fffffff9
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffbffffbfffff, 0x8000000fffffff9, x30, x1, 1392, x2)

inst_119:
// rs1_w0_val == -1048577, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffefffff;  op2val:0xffffffbf00000009
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffbffefffff, 0xffffffbf00000009, x30, x1, 1408, x2)

inst_120:
// rs1_w0_val == -262145, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffbffff;  op2val:0x0000037fffffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffbffff, 0x0000037fffffff, x30, x1, 1424, x2)

inst_121:
// rs2_w0_val == -129, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000640000000;  op2val:0xbfffffffffffff7f
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000640000000, 0xbfffffffffffff7f, x30, x1, 1440, x2)

inst_122:
// rs1_w0_val == -16385, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000ffffbfff;  op2val:0xfffffffe00000002
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x10000000ffffbfff, 0xfffffffe00000002, x30, x1, 1456, x2)

inst_123:
// rs2_w0_val == -5, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000400;  op2val:0xc0000000fffffffb
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000400, 0xc0000000fffffffb, x30, x1, 1472, x2)

inst_124:
// rs1_w0_val == -1025, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffffbff;  op2val:0xfeffffff00002000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x004000fffffbff, 0xfeffffff00002000, x30, x1, 1488, x2)

inst_125:
// rs2_w0_val == -2, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000006;  op2val:0x000005fffffffe
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000006, 0x000005fffffffe, x30, x1, 1504, x2)

inst_126:
// rs2_w0_val == -2147483648, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00400000;  op2val:0x8000000080000000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00400000, 0x8000000080000000, x30, x1, 1520, x2)

inst_127:
// rs2_w0_val == 268435456, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004fffffffe;  op2val:0x800000010000000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x000004fffffffe, 0x800000010000000, x30, x1, 1536, x2)

inst_128:
// rs2_w0_val == 1048576, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003efffffff;  op2val:0x4000000000100000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x000003efffffff, 0x4000000000100000, x30, x1, 1552, x2)

inst_129:
// rs2_w0_val == 4194304, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffffbfff;  op2val:0x400000000400000
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x000010ffffbfff, 0x400000000400000, x30, x1, 1568, x2)

inst_130:
// rs1_w0_val == 268435456, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f10000000;  op2val:0xfefffffffffff7ff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffff7f10000000, 0xfefffffffffff7ff, x30, x1, 1584, x2)

inst_131:
// rs1_w0_val == -17, 
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000ffffffef;  op2val:0xffbfffff00000100
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x10000000ffffffef, 0xffbfffff00000100, x30, x1, 1600, x2)

inst_132:
// rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w1_val == 536870912, rs1_w0_val == 32
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600000020;  op2val:0x20000000fffffff6
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff600000020, 0x20000000fffffff6, x30, x1, 1616, x2)

inst_133:
// rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w0_val == -3, rs1_w1_val == 8, rs2_w1_val == -32769
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffffffd;  op2val:0xffff7ffff7ffffff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0x000008fffffffd, 0xffff7ffff7ffffff, x30, x1, 1632, x2)

inst_134:
// rs2_w1_val == 1431655765, rs1_w1_val == -536870913, rs2_w0_val == -8193
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffff6;  op2val:0x55555555ffffdfff
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffff6, 0x55555555ffffdfff, x30, x1, 1648, x2)

inst_135:
// rs2_w1_val == -2097153, rs1_w0_val == -513, rs2_w0_val == -65, rs1_w1_val == -32769
// opcode: kcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffffdff;  op2val:0xffdfffffffffffbf
TEST_PKRR_OP(kcrsa32, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffffdff, 0xffdfffffffffffbf, x30, x1, 1664, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 210*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
