
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umin8 instruction of the RISC-V RV64PZicsr extension for the umin8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umin8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x17,signature_x17_1)

inst_0:
// rs1 == rd != rs2, rs1==x21, rs2==x14, rd==x21, rs1_b0_val == 0, rs1_b6_val != rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b7_val == 0, rs1_b5_val != rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b0_val == 247, rs1_b4_val != rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b3_val == 251, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b6_val == 127, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b5_val == 2, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val == 85, rs1_b4_val == 239, rs2_b6_val == 2, rs1_b2_val == 8, rs2_b5_val == 191
// opcode: umin8 ; op1:x21; op2:x14; dest:x21; op1val:0xa7f02ef09085500;  op2val:0x02bf03fb0f0bf7
TEST_RR_OP(umin8, x21, x21, x14, 0x0000000000000000, 0xa7f02ef09085500, 0x02bf03fb0f0bf7, x17, 0, x20)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x11, rs2==x7, rd==x2, rs1_b7_val != rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b7_val == 255, rs2_b2_val == 8, rs1_b3_val == 253, rs1_b4_val == 16, rs2_b3_val == 128, rs1_b0_val == 16, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == 32, rs1_b5_val == 85
// opcode: umin8 ; op1:x11; op2:x7; dest:x2; op1val:0xa0e5510fd122010;  op2val:0xff0d0a1380080e0a
TEST_RR_OP(umin8, x2, x11, x7, 0x0000000000000000, 0xa0e5510fd122010, 0xff0d0a1380080e0a, x17, 8, x20)

inst_2:
// rs1 == rs2 != rd, rs1==x6, rs2==x6, rd==x14, rs1_b7_val == rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b5_val == 253, rs2_b6_val == 191, rs1_b0_val == 2, rs1_b6_val == 32, rs2_b3_val == 255, rs2_b2_val == 223, rs1_b5_val == 223
// opcode: umin8 ; op1:x6; op2:x6; dest:x14; op1val:0xc20df0e0c115502;  op2val:0xcbffd0dffdf0b0a
TEST_RR_OP(umin8, x14, x6, x6, 0x0000000000000000, 0xc20df0e0c115502, 0xcbffd0dffdf0b0a, x17, 16, x20)

inst_3:
// rs1 == rs2 == rd, rs1==x19, rs2==x19, rd==x19, rs1_b6_val == rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b0_val == 239, rs1_b5_val == 64, rs1_b3_val == 223, rs2_b0_val == 32, rs1_b1_val == 255, rs2_b7_val == 85, rs2_b3_val == 0, rs1_b2_val == 223, rs1_b4_val == 8
// opcode: umin8 ; op1:x19; op2:x19; dest:x19; op1val:0x6094008dfdfffef;  op2val:0x5509bf0300121320
TEST_RR_OP(umin8, x19, x19, x19, 0x0000000000000000, 0x6094008dfdfffef, 0x5509bf0300121320, x17, 24, x20)

inst_4:
// rs2 == rd != rs1, rs1==x30, rs2==x26, rd==x26, rs1_b5_val == rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b0_val == 64, rs2_b2_val == 170, rs1_b6_val == 1, rs2_b4_val == 64, rs2_b1_val == 0
// opcode: umin8 ; op1:x30; op2:x26; dest:x26; op1val:0xc010c0f0f052003;  op2val:0xa0d0c4013aa0040
TEST_RR_OP(umin8, x26, x30, x26, 0x0000000000000000, 0xc010c0f0f052003, 0xa0d0c4013aa0040, x17, 32, x20)

inst_5:
// rs1==x1, rs2==x9, rd==x29, rs1_b4_val == rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b0_val == 223, rs1_b3_val == 191, rs2_b5_val == 32, rs2_b2_val == 255, rs2_b0_val == 255, rs1_b1_val == 251, rs2_b4_val == 223, rs2_b6_val == 32, rs1_b4_val == 223, rs2_b7_val == 253
// opcode: umin8 ; op1:x1; op2:x9; dest:x29; op1val:0xd130fdfbf0dfbdf;  op2val:0xfd2020df0dff0aff
TEST_RR_OP(umin8, x29, x1, x9, 0x0000000000000000, 0xd130fdfbf0dfbdf, 0xfd2020df0dff0aff, x17, 40, x20)

inst_6:
// rs1==x25, rs2==x13, rd==x3, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b5_val == 253, rs2_b0_val == 4, rs2_b3_val == 8, rs1_b3_val == 8, rs1_b2_val == 85, rs1_b1_val == 16, rs2_b4_val == 32, rs2_b2_val == 247, rs1_b4_val == 4
// opcode: umin8 ; op1:x25; op2:x13; dest:x3; op1val:0x603fd04085510df;  op2val:0x311062008f70c04
TEST_RR_OP(umin8, x3, x25, x13, 0x0000000000000000, 0x603fd04085510df, 0x311062008f70c04, x17, 48, x20)

inst_7:
// rs1==x29, rs2==x0, rd==x8, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b4_val == 0, rs1_b2_val == 191, rs1_b5_val == 254, rs1_b3_val == 127, rs2_b6_val == 170, rs1_b0_val == 8, rs2_b1_val == 253, rs1_b7_val == 170, rs2_b2_val == 191, rs1_b1_val == 2
// opcode: umin8 ; op1:x29; op2:x0; dest:x8; op1val:0xaa09fe047fbf0208;  op2val:0xaa0e000cbffd0f
TEST_RR_OP(umin8, x8, x29, x0, 0x0000000000000000, 0xaa09fe047fbf0208, 0xaa0e000cbffd0f, x17, 56, x20)

inst_8:
// rs1==x26, rs2==x8, rd==x22, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b2_val == 0, rs2_b0_val == 1, rs2_b1_val == 247, rs1_b4_val == 127, rs1_b1_val == 247, rs2_b7_val == 247
// opcode: umin8 ; op1:x26; op2:x8; dest:x22; op1val:0x127f067f0307f70a;  op2val:0xf70c03070800f701
TEST_RR_OP(umin8, x22, x26, x8, 0x0000000000000000, 0x127f067f0307f70a, 0xf70c03070800f701, x17, 64, x20)

inst_9:
// rs1==x18, rs2==x10, rd==x16, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b3_val == 170, rs1_b7_val == 255, rs2_b3_val == 1, rs1_b6_val == 8, rs1_b4_val == 253, rs1_b2_val == 170, rs2_b4_val == 128, rs1_b0_val == 170, rs2_b0_val == 170
// opcode: umin8 ; op1:x18; op2:x10; dest:x16; op1val:0xff080efdaaaa0aaa;  op2val:0x312bf800100f7aa
TEST_RR_OP(umin8, x16, x18, x10, 0x0000000000000000, 0xff080efdaaaa0aaa, 0x312bf800100f7aa, x17, 72, x20)

inst_10:
// rs1==x15, rs2==x21, rd==x7, rs2_b7_val == 170, rs1_b2_val == 255, rs1_b3_val == 254, rs2_b0_val == 8, rs1_b6_val == 16, rs2_b6_val == 16, rs2_b5_val == 247
// opcode: umin8 ; op1:x15; op2:x21; dest:x7; op1val:0xf101212feff1103;  op2val:0xaa10f70b06f7f708
TEST_RR_OP(umin8, x7, x15, x21, 0x0000000000000000, 0xf101212feff1103, 0xaa10f70b06f7f708, x17, 80, x20)

inst_11:
// rs1==x10, rs2==x12, rd==x27, rs2_b7_val == 127, rs2_b5_val == 251, rs2_b2_val == 64, rs1_b0_val == 251, rs1_b3_val == 239, rs2_b1_val == 191, rs2_b0_val == 85
// opcode: umin8 ; op1:x10; op2:x12; dest:x27; op1val:0xe1355fdef1105fb;  op2val:0x7f0ffb0a0340bf55
TEST_RR_OP(umin8, x27, x10, x12, 0x0000000000000000, 0xe1355fdef1105fb, 0x7f0ffb0a0340bf55, x17, 88, x20)

inst_12:
// rs1==x31, rs2==x27, rd==x5, rs2_b7_val == 191, rs2_b3_val == 239, rs1_b3_val == 64, rs1_b1_val == 128, rs2_b1_val == 64, rs1_b5_val == 127, rs1_b7_val == 16
// opcode: umin8 ; op1:x31; op2:x27; dest:x5; op1val:0x10097f03400d800a;  op2val:0xbf091140ef0a40aa
TEST_RR_OP(umin8, x5, x31, x27, 0x0000000000000000, 0x10097f03400d800a, 0xbf091140ef0a40aa, x17, 96, x20)

inst_13:
// rs1==x5, rs2==x4, rd==x6, rs2_b7_val == 223, rs2_b3_val == 127, rs1_b6_val == 85, rs2_b5_val == 8, rs1_b0_val == 64, rs1_b3_val == 128, rs1_b4_val == 170, rs2_b1_val == 16, rs2_b2_val == 239
// opcode: umin8 ; op1:x5; op2:x4; dest:x6; op1val:0x3550daa80df0e40;  op2val:0xdf0a08057fef1013
TEST_RR_OP(umin8, x6, x5, x4, 0x0000000000000000, 0x3550daa80df0e40, 0xdf0a08057fef1013, x17, 104, x20)

inst_14:
// rs1==x28, rs2==x22, rd==x13, rs2_b7_val == 239, rs1_b4_val == 0, rs2_b0_val == 239, rs2_b5_val == 16, rs1_b1_val == 254, rs2_b2_val == 85, rs2_b4_val == 1
// opcode: umin8 ; op1:x28; op2:x22; dest:x13; op1val:0xff12fe0003aafe12;  op2val:0xef071001805540ef
TEST_RR_OP(umin8, x13, x28, x22, 0x0000000000000000, 0xff12fe0003aafe12, 0xef071001805540ef, x17, 112, x2)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_15:
// rs1==x4, rs2==x11, rd==x10, rs2_b7_val == 251, rs2_b3_val == 170, rs1_b3_val == 251, rs2_b5_val == 2, rs2_b6_val == 247, rs2_b1_val == 127, rs2_b4_val == 85, rs1_b4_val == 247, rs1_b7_val == 128, rs1_b5_val == 239, rs2_b2_val == 128
// opcode: umin8 ; op1:x4; op2:x11; dest:x10; op1val:0x8003eff7fbff11ef;  op2val:0xfbf70255aa807f0b
TEST_RR_OP(umin8, x10, x4, x11, 0x0000000000000000, 0x8003eff7fbff11ef, 0xfbf70255aa807f0b, x6, 0, x2)

inst_16:
// rs1==x27, rs2==x24, rd==x17, rs2_b7_val == 254, rs1_b7_val == 254, rs1_b5_val == 255, rs2_b6_val == 253, rs2_b2_val == 254
// opcode: umin8 ; op1:x27; op2:x24; dest:x17; op1val:0xfe0affaadf080efb;  op2val:0xfefd0812fffe12ef
TEST_RR_OP(umin8, x17, x27, x24, 0x0000000000000000, 0xfe0affaadf080efb, 0xfefd0812fffe12ef, x6, 8, x2)

inst_17:
// rs1==x20, rs2==x5, rd==x11, rs2_b7_val == 128, rs2_b3_val == 253, rs1_b0_val == 32, rs2_b1_val == 223, rs2_b4_val == 191, rs1_b1_val == 64, rs1_b4_val == 64
// opcode: umin8 ; op1:x20; op2:x5; dest:x11; op1val:0x1306404005094020;  op2val:0x80100dbffdefdf0d
TEST_RR_OP(umin8, x11, x20, x5, 0x0000000000000000, 0x1306404005094020, 0x80100dbffdefdf0d, x6, 16, x2)

inst_18:
// rs1==x13, rs2==x25, rd==x15, rs2_b7_val == 64, rs1_b7_val == 4, rs1_b2_val == 2, rs1_b4_val == 85
// opcode: umin8 ; op1:x13; op2:x25; dest:x15; op1val:0x410135506024013;  op2val:0x40090d010cbffd0a
TEST_RR_OP(umin8, x15, x13, x25, 0x0000000000000000, 0x410135506024013, 0x40090d010cbffd0a, x6, 24, x2)

inst_19:
// rs1==x12, rs2==x30, rd==x0, rs2_b7_val == 32, rs1_b6_val == 191, rs1_b2_val == 0, rs1_b5_val == 0, rs1_b1_val == 253, rs1_b7_val == 85, rs2_b1_val == 128, rs2_b6_val == 4, rs1_b3_val == 1, rs2_b4_val == 254
// opcode: umin8 ; op1:x12; op2:x30; dest:x0; op1val:0x55bf00040100fdef;  op2val:0x200406fe0a068006
TEST_RR_OP(umin8, x0, x12, x30, 0x0000000000000000, 0x55bf00040100fdef, 0x200406fe0a068006, x6, 32, x2)

inst_20:
// rs1==x22, rs2==x17, rd==x23, rs2_b7_val == 16, rs2_b2_val == 16, rs2_b3_val == 191, rs2_b0_val == 128, rs2_b1_val == 254, rs1_b4_val == 2
// opcode: umin8 ; op1:x22; op2:x17; dest:x23; op1val:0x307df020a080f08;  op2val:0x10130d0bbf10fe80
TEST_RR_OP(umin8, x23, x22, x17, 0x0000000000000000, 0x307df020a080f08, 0x10130d0bbf10fe80, x6, 40, x2)

inst_21:
// rs1==x7, rs2==x29, rd==x1, rs2_b7_val == 8, rs1_b0_val == 85, rs2_b0_val == 251, rs2_b5_val == 1, rs2_b6_val == 128, rs1_b7_val == 191, rs2_b1_val == 1, rs2_b4_val == 8, rs1_b2_val == 254
// opcode: umin8 ; op1:x7; op2:x29; dest:x1; op1val:0xbf10ef0c05fe1055;  op2val:0x880010808fe01fb
TEST_RR_OP(umin8, x1, x7, x29, 0x0000000000000000, 0xbf10ef0c05fe1055, 0x880010808fe01fb, x6, 48, x2)

inst_22:
// rs1==x23, rs2==x28, rd==x9, rs2_b7_val == 4, rs1_b2_val == 1, rs1_b5_val == 8, rs2_b3_val == 64, rs2_b4_val == 253, rs1_b7_val == 8
// opcode: umin8 ; op1:x23; op2:x28; dest:x9; op1val:0x811080513010255;  op2val:0x405bffd400a050d
TEST_RR_OP(umin8, x9, x23, x28, 0x0000000000000000, 0x811080513010255, 0x405bffd400a050d, x6, 56, x2)

inst_23:
// rs1==x9, rs2==x23, rd==x20, rs2_b7_val == 2, rs2_b1_val == 2, rs1_b1_val == 127, rs1_b2_val == 32
// opcode: umin8 ; op1:x9; op2:x23; dest:x20; op1val:0xe06ef0711207fdf;  op2val:0x2f70f0b0d050240
TEST_RR_OP(umin8, x20, x9, x23, 0x0000000000000000, 0xe06ef0711207fdf, 0x2f70f0b0d050240, x6, 64, x2)

inst_24:
// rs1==x0, rs2==x31, rd==x28, rs2_b7_val == 1, rs2_b0_val == 0, rs1_b0_val == 247, rs2_b5_val == 255, rs1_b7_val == 0
// opcode: umin8 ; op1:x0; op2:x31; dest:x28; op1val:0x10ff1003aa10f7;  op2val:0x10fff0f01060e00
TEST_RR_OP(umin8, x28, x0, x31, 0x0000000000000000, 0x10ff1003aa10f7, 0x10fff0f01060e00, x6, 72, x2)

inst_25:
// rs1==x14, rs2==x16, rd==x24, rs2_b6_val == 85, rs1_b0_val == 191, rs1_b6_val == 253, rs1_b3_val == 4, rs1_b1_val == 0, rs1_b4_val == 255
// opcode: umin8 ; op1:x14; op2:x16; dest:x24; op1val:0xfd06ff040100bf;  op2val:0x55505fd80f70b0c
TEST_RR_OP(umin8, x24, x14, x16, 0x0000000000000000, 0xfd06ff040100bf, 0x55505fd80f70b0c, x6, 80, x2)

inst_26:
// rs1==x17, rs2==x3, rd==x25, rs2_b6_val == 127, rs2_b3_val == 85, rs2_b0_val == 2, rs1_b4_val == 254, rs2_b4_val == 16, rs1_b2_val == 253
// opcode: umin8 ; op1:x17; op2:x3; dest:x25; op1val:0x132005fe0ffdfb11;  op2val:0x107fbf1055ff0502
TEST_RR_OP(umin8, x25, x17, x3, 0x0000000000000000, 0x132005fe0ffdfb11, 0x107fbf1055ff0502, x6, 88, x2)

inst_27:
// rs1==x24, rs2==x15, rd==x18, rs1_b3_val == 85, rs1_b1_val == 1, rs1_b2_val == 247, rs2_b3_val == 254, rs2_b0_val == 127
// opcode: umin8 ; op1:x24; op2:x15; dest:x18; op1val:0x130b0caa55f701fb;  op2val:0x10a0100fe050c7f
TEST_RR_OP(umin8, x18, x24, x15, 0x0000000000000000, 0x130b0caa55f701fb, 0x10a0100fe050c7f, x6, 96, x2)

inst_28:
// rs1==x8, rs2==x1, rd==x12, rs1_b3_val == 247, rs1_b7_val == 64, rs1_b6_val == 254
// opcode: umin8 ; op1:x8; op2:x1; dest:x12; op1val:0x40feeffdf7551111;  op2val:0xfebf0f0ceff77faa
TEST_RR_OP(umin8, x12, x8, x1, 0x0000000000000000, 0x40feeffdf7551111, 0xfebf0f0ceff77faa, x6, 104, x2)

inst_29:
// rs1==x2, rs2==x18, rd==x31, rs1_b3_val == 32, rs1_b7_val == 2
// opcode: umin8 ; op1:x2; op2:x18; dest:x31; op1val:0x20e0508200f0f55;  op2val:0xe110d0c06060702
TEST_RR_OP(umin8, x31, x2, x18, 0x0000000000000000, 0x20e0508200f0f55, 0xe110d0c06060702, x6, 112, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x16, rs2==x20, rd==x4, rs1_b3_val == 16, rs1_b6_val == 247, rs2_b4_val == 170, rs2_b3_val == 16
// opcode: umin8 ; op1:x16; op2:x20; dest:x4; op1val:0xbff70c041012fd11;  op2val:0x30210aa100e7f13
TEST_RR_OP(umin8, x4, x16, x20, 0x0000000000000000, 0xbff70c041012fd11, 0x30210aa100e7f13, x1, 0, x5)

inst_31:
// rs1==x3, rs2==x2, rd==x30, rs1_b3_val == 2, rs1_b1_val == 4, rs1_b5_val == 4
// opcode: umin8 ; op1:x3; op2:x2; dest:x30; op1val:0x4100403020a040c;  op2val:0x5aa07bf80100305
TEST_RR_OP(umin8, x30, x3, x2, 0x0000000000000000, 0x4100403020a040c, 0x5aa07bf80100305, x1, 8, x5)

inst_32:
// rs1_b3_val == 255, rs2_b1_val == 170, rs1_b7_val == 32, rs2_b5_val == 239, rs1_b5_val == 32
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x20122007ff550b0d;  op2val:0xb0bef0d03efaa08
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x20122007ff550b0d, 0xb0bef0d03efaa08, x1, 16, x5)

inst_33:
// rs1_b3_val == 0, rs2_b5_val == 127, rs1_b7_val == 239, rs1_b6_val == 128
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xef807f0800fe0df7;  op2val:0x120e7f0706120301
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xef807f0800fe0df7, 0x120e7f0706120301, x1, 24, x5)

inst_34:
// rs1_b2_val == 127, rs2_b6_val == 64, rs2_b0_val == 223, rs2_b1_val == 32, rs1_b0_val == 127
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xa800befbf7f107f;  op2val:0xaa40ef0b03ff20df
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xa800befbf7f107f, 0xaa40ef0b03ff20df, x1, 32, x5)

inst_35:
// rs1_b2_val == 239, rs2_b1_val == 251, rs2_b6_val == 251, rs1_b6_val == 2
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x502fefebfef0faa;  op2val:0x8fb20070703fb0a
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x502fefebfef0faa, 0x8fb20070703fb0a, x1, 40, x5)

inst_36:
// rs1_b2_val == 251, rs1_b5_val == 251, rs1_b6_val == 170
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfaafb110dfb2003;  op2val:0xff1313080a104020
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xfaafb110dfb2003, 0xff1313080a104020, x1, 48, x5)

inst_37:
// rs1_b2_val == 128, rs2_b4_val == 251, rs2_b2_val == 253
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf0f7ffdfd80fe0a;  op2val:0x50c12fb07fd4007
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xbf0f7ffdfd80fe0a, 0x50c12fb07fd4007, x1, 56, x5)

inst_38:
// rs1_b2_val == 64, rs2_b6_val == 223, rs1_b5_val == 128, rs1_b1_val == 8
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x110c800efe40080e;  op2val:0xffdf0abf060e0901
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x110c800efe40080e, 0xffdf0abf060e0901, x1, 64, x5)

inst_39:
// rs1_b2_val == 16, rs2_b2_val == 32, rs1_b6_val == 4, rs1_b1_val == 191, rs1_b0_val == 4
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe047f09ef10bf04;  op2val:0x31306110b20050b
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xfe047f09ef10bf04, 0x31306110b20050b, x1, 72, x5)

inst_40:
// rs1_b2_val == 4, rs2_b5_val == 0, rs1_b4_val == 1
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x51004010e0404ef;  op2val:0xff80000d0a0b0913
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x51004010e0404ef, 0xff80000d0a0b0913, x1, 80, x5)

inst_41:
// rs1_b1_val == 170, rs1_b4_val == 32, rs1_b5_val == 1, rs2_b6_val == 1
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x8006012012feaabf;  op2val:0x40010b08aa09f7ef
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x8006012012feaabf, 0x40010b08aa09f7ef, x1, 88, x5)

inst_42:
// rs2_b6_val == 239, rs2_b2_val == 2
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xb0a0106ff027f02;  op2val:0xbfef0c030e020c80
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xb0a0106ff027f02, 0xbfef0c030e020c80, x1, 96, x5)

inst_43:
// rs2_b2_val == 4, rs1_b7_val == 1
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x1aa0faadf030e03;  op2val:0xef0e090a0b040af7
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x1aa0faadf030e03, 0xef0e090a0b040af7, x1, 104, x5)

inst_44:
// rs2_b2_val == 1, rs1_b5_val == 170, rs1_b0_val == 254
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x90faadf03fd06fe;  op2val:0xfd0d080bff010306
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x90faadf03fd06fe, 0xfd0d080bff010306, x1, 112, x5)

inst_45:
// rs2_b1_val == 85, rs2_b3_val == 4, rs1_b7_val == 253, rs2_b6_val == 8
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd0a4007ff04bf0f;  op2val:0xaa0803200401550a
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xfd0a4007ff04bf0f, 0xaa0803200401550a, x1, 120, x5)

inst_46:
// rs2_b1_val == 239, rs2_b5_val == 128, rs1_b7_val == 247
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fd000c07125520;  op2val:0x100b8011fe40ef03
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xf7fd000c07125520, 0x100b8011fe40ef03, x1, 128, x5)

inst_47:
// rs2_b1_val == 8, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x4020405207f0ff7;  op2val:0xef0420df7f12080d
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x4020405207f0ff7, 0xef0420df7f12080d, x1, 136, x5)

inst_48:
// rs2_b1_val == 4, rs1_b0_val == 253
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x11120df755ef11fd;  op2val:0x407f0b0a0f080420
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x11120df755ef11fd, 0x407f0b0a0f080420, x1, 144, x5)

inst_49:
// rs2_b1_val == 255, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x13bf00f7060ef708;  op2val:0xffdfb09400bfffb
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x13bf00f7060ef708, 0xffdfb09400bfffb, x1, 152, x5)

inst_50:
// rs2_b0_val == 191, rs2_b4_val == 239
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x8006120a05801104;  op2val:0x207f13effb55febf
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x8006120a05801104, 0x207f13effb55febf, x1, 160, x5)

inst_51:
// rs2_b0_val == 253, rs1_b6_val == 239
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x5ef0e120304bf0e;  op2val:0x50b0b11bf0ff7fd
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x5ef0e120304bf0e, 0x50b0b11bf0ff7fd, x1, 168, x5)

inst_52:
// rs2_b0_val == 254, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x10c80feff110d02;  op2val:0x7f107f0d061120fe
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x10c80feff110d02, 0x7f107f0d061120fe, x1, 176, x5)

inst_53:
// rs2_b0_val == 16, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xef06010c02030dbf;  op2val:0x13107f20bfef5510
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xef06010c02030dbf, 0x13107f20bfef5510, x1, 184, x5)

inst_54:
// rs1_b1_val == 223, rs2_b5_val == 4, rs1_b4_val == 191, rs2_b6_val == 254
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x550d20bf0c0edf7f;  op2val:0x13fe0412110e0a40
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x550d20bf0c0edf7f, 0x13fe0412110e0a40, x1, 192, x5)

inst_55:
// rs1_b1_val == 239, rs1_b6_val == 223
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x13df00130c0fef09;  op2val:0x13fb02aaaa20fbdf
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x13df00130c0fef09, 0x13fb02aaaa20fbdf, x1, 200, x5)

inst_56:
// rs1_b7_val == 127, rs2_b5_val == 85
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f0f40aa0e090402;  op2val:0x0e550710130201
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x7f0f40aa0e090402, 0x0e550710130201, x1, 208, x5)

inst_57:
// rs1_b7_val == 223, rs1_b0_val == 1, rs1_b4_val == 128
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xdff7fb80dff70701;  op2val:0xaa0c0edffe030804
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xdff7fb80dff70701, 0xaa0c0edffe030804, x1, 216, x5)

inst_58:
// rs2_b5_val == 254, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x550efedf120204fb;  op2val:0xfe12fe1213fefdef
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x550efedf120204fb, 0xfe12fe1213fefdef, x1, 224, x5)

inst_59:
// rs2_b5_val == 64, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xf05080fefaadf04;  op2val:0xc0840004009fe55
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xf05080fefaadf04, 0xc0840004009fe55, x1, 232, x5)

inst_60:
// rs1_b0_val == 128, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xef80fb0a7ffd0780;  op2val:0xf74002aa0e0d060a
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xef80fb0a7ffd0780, 0xf74002aa0e0d060a, x1, 240, x5)

inst_61:
// rs1_b6_val == 251, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x20fb0009df020702;  op2val:0x20aa0fdf00aa020a
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x20fb0009df020702, 0x20aa0fdf00aa020a, x1, 248, x5)

inst_62:
// rs2_b4_val == 127, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf0efe205505fd08;  op2val:0x1df067f0e01fe10
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xbf0efe205505fd08, 0x1df067f0e01fe10, x1, 256, x5)

inst_63:
// rs1_b0_val == 255, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xf710037f0c4011ff;  op2val:0xb01fb06ff11fb06
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xf710037f0c4011ff, 0xb01fb06ff11fb06, x1, 264, x5)

inst_64:
// rs1_b6_val == 64, rs2_b2_val == 127
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xb40011205050f00;  op2val:0x0f10fb137f117f
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xb40011205050f00, 0x0f10fb137f117f, x1, 272, x5)

inst_65:
// rs2_b4_val == 247, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x920040bff0e0212;  op2val:0xff706f711aa040a
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x920040bff0e0212, 0xff706f711aa040a, x1, 280, x5)

inst_66:
// rs1_b6_val == 255, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x10ff1305091300f7;  op2val:0xb0200110a068006
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x10ff1305091300f7, 0xb0200110a068006, x1, 288, x5)

inst_67:
// rs1_b6_val == 0, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x9000e0d020eeffd;  op2val:0x209052011fd0aef
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x9000e0d020eeffd, 0x209052011fd0aef, x1, 296, x5)

inst_68:
// rs2_b4_val == 4, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7bf02fd000308df;  op2val:0xfb0cfe04bffd07aa
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xf7bf02fd000308df, 0xfb0cfe04bffd07aa, x1, 304, x5)

inst_69:
// rs2_b6_val == 0, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd0d201006050604;  op2val:0xaa0080fe0355aaef
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xfd0d201006050604, 0xaa0080fe0355aaef, x1, 312, x5)

inst_70:
// rs1_b5_val == 247, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xf02f7bf04400b07;  op2val:0xd0bfffd06df2080
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xf02f7bf04400b07, 0xd0bfffd06df2080, x1, 320, x5)

inst_71:
// rs2_b3_val == 223, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x20f706bf0d121300;  op2val:0x111003dfdf01120b
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x20f706bf0d121300, 0x111003dfdf01120b, x1, 328, x5)

inst_72:
// rs1_b5_val == 16, rs2_b4_val == 2, rs2_b3_val == 32
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x110b10010afe1020;  op2val:0x8011010220550b20
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x110b10010afe1020, 0x8011010220550b20, x1, 336, x5)

inst_73:
// rs2_b3_val == 247, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xb0d5505dffe1212;  op2val:0x200c0301f705fb0e
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xb0d5505dffe1212, 0x200c0301f705fb0e, x1, 344, x5)

inst_74:
// rs2_b2_val == 251, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x840091280aa0809;  op2val:0x40d12fe10fb1208
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x840091280aa0809, 0x40d12fe10fb1208, x1, 352, x5)

inst_75:
// rs2_b3_val == 2, rs2_b6_val == 255
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x55100005fbaa10fb;  op2val:0xff400d0208fe20
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x55100005fbaa10fb, 0xff400d0208fe20, x1, 360, x5)

inst_76:
// rs1_b4_val == 251, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0a01fb8020f70d;  op2val:0x4fb07df071011bf
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xc0a01fb8020f70d, 0x4fb07df071011bf, x1, 368, x5)

inst_77:
// rs1_b7_val == 251, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb400a000301ef08;  op2val:0x13aa0a02807f13fe
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xfb400a000301ef08, 0x13aa0a02807f13fe, x1, 376, x5)

inst_78:
// rs2_b5_val == 170, rs1_b5_val == 191
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x70cbf03f70808fe;  op2val:0x5502aaef20080509
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x70cbf03f70808fe, 0x5502aaef20080509, x1, 384, x5)

inst_79:
// rs2_b5_val == 223, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x6020413800e0205;  op2val:0x1340dfbf11fd80f7
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x6020413800e0205, 0x1340dfbf11fd80f7, x1, 392, x5)

inst_80:
// rs2_b4_val == 255, 
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd0d01aa55090c80;  op2val:0xef0640ff02014004
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xfd0d01aa55090c80, 0xef0640ff02014004, x1, 400, x5)

inst_81:
// rs1_b7_val == rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b5_val == 253, rs2_b6_val == 191, rs1_b0_val == 2, rs1_b6_val == 32, rs2_b3_val == 255, rs2_b2_val == 223, rs1_b5_val == 223
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xc20df0e0c115502;  op2val:0xcbffd0dffdf0b0a
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xc20df0e0c115502, 0xcbffd0dffdf0b0a, x1, 408, x5)

inst_82:
// rs1_b6_val == rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b0_val == 239, rs1_b5_val == 64, rs1_b3_val == 223, rs2_b0_val == 32, rs1_b1_val == 255, rs2_b7_val == 85, rs2_b3_val == 0, rs1_b2_val == 223, rs1_b4_val == 8
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x6094008dfdfffef;  op2val:0x5509bf0300121320
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x6094008dfdfffef, 0x5509bf0300121320, x1, 416, x5)

inst_83:
// rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b4_val == 0, rs1_b2_val == 191, rs1_b5_val == 254, rs1_b3_val == 127, rs2_b6_val == 170, rs1_b0_val == 8, rs2_b1_val == 253, rs1_b7_val == 170, rs2_b2_val == 191, rs1_b1_val == 2
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa09fe047fbf0208;  op2val:0xaa0e000cbffd0f
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0xaa09fe047fbf0208, 0xaa0e000cbffd0f, x1, 424, x5)

inst_84:
// rs2_b7_val == 32, rs1_b6_val == 191, rs1_b2_val == 0, rs1_b5_val == 0, rs1_b1_val == 253, rs1_b7_val == 85, rs2_b1_val == 128, rs2_b6_val == 4, rs1_b3_val == 1, rs2_b4_val == 254
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x55bf00040100fdef;  op2val:0x200406fe0a068006
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x55bf00040100fdef, 0x200406fe0a068006, x1, 432, x5)

inst_85:
// rs2_b7_val == 1, rs2_b0_val == 0, rs1_b0_val == 247, rs2_b5_val == 255, rs1_b7_val == 0
// opcode: umin8 ; op1:x30; op2:x29; dest:x31; op1val:0x10ff1003aa10f7;  op2val:0x10fff0f01060e00
TEST_RR_OP(umin8, x31, x30, x29, 0x0000000000000000, 0x10ff1003aa10f7, 0x10fff0f01060e00, x1, 440, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x17_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x17_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 56*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
