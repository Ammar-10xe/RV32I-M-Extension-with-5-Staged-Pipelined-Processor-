
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kdmabt16 instruction of the RISC-V RV64PZicsr extension for the kdmabt16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kdmabt16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rd != rs2, rs1==x11, rs2==x30, rd==x11, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs2_h1_val == -2049, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val == 512, rs1_h1_val != rs2_h1_val, rs1_h2_val == -16385, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs2_h0_val == -3, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h3_val == -33, rs2_h2_val == 8
// opcode: kdmabt16 ; op1:x11; op2:x30; dest:x11; op1val:0xffdfbfff02008000;  op2val:0x090008f7fffffd
TEST_PKRR_OP(kdmabt16, x11, x11, x30, 0x0000000000000000, 0xffdfbfff02008000, 0x090008f7fffffd, x11, x3, 0, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x14, rs2==x2, rd==x23, rs1_h3_val == rs2_h3_val, rs1_h3_val == 512, rs2_h1_val == -4097, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h0_val == -4097, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 32767, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h3_val == 512, rs1_h1_val == -1, rs1_h0_val == -8193
// opcode: kdmabt16 ; op1:x14; op2:x2; dest:x23; op1val:0x2007fffffffdfff;  op2val:0x2000003efffefff
TEST_PKRR_OP(kdmabt16, x23, x14, x2, 0x0000000000000000, 0x2007fffffffdfff, 0x2000003efffefff, x14, x3, 16, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x5, rs2==x5, rd==x18, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h2_val == -8193, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h3_val == -16385, rs1_h1_val == rs2_h1_val, rs1_h2_val == 21845, rs1_h0_val == 32, rs2_h0_val == -9, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: kdmabt16 ; op1:x5; op2:x5; dest:x18; op1val:0xbfff5555fff90020;  op2val:0xfffadffffff9fff7
TEST_PKRR_OP(kdmabt16, x18, x5, x5, 0x0000000000000000, 0xbfff5555fff90020, 0xfffadffffff9fff7, x5, x3, 32, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val == 4096, rs2_h3_val == -2, rs1_h1_val == 32, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 0, rs1_h3_val == 16384, rs2_h1_val == 16
// opcode: kdmabt16 ; op1:x4; op2:x4; dest:x4; op1val:0x4000100000200000;  op2val:0xfffe000600103fff
TEST_PKRR_OP(kdmabt16, x4, x4, x4, 0x0000000000000000, 0x4000100000200000, 0xfffe000600103fff, x4, x3, 48, x8)

inst_4:
// rs2 == rd != rs1, rs1==x21, rs2==x16, rd==x16, rs1_h2_val == rs2_h2_val, rs2_h0_val == 64, rs2_h1_val == -16385, rs1_h3_val == 2, rs1_h2_val == 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -4097, rs1_h0_val == -4097, rs2_h2_val == 0
// opcode: kdmabt16 ; op1:x21; op2:x16; dest:x16; op1val:0x020000efffefff;  op2val:0x060000bfff0040
TEST_PKRR_OP(kdmabt16, x16, x21, x16, 0x0000000000000000, 0x020000efffefff, 0x060000bfff0040, x21, x3, 64, x8)

inst_5:
// rs1==x7, rs2==x26, rd==x5, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h0_val == -9, rs2_h1_val == 0, rs2_h2_val == -129, rs2_h3_val == 2048, rs1_h2_val == -17
// opcode: kdmabt16 ; op1:x7; op2:x26; dest:x5; op1val:0xfffcffef3ffffff7;  op2val:0x800ff7f0000fffd
TEST_PKRR_OP(kdmabt16, x5, x7, x26, 0x0000000000000000, 0xfffcffef3ffffff7, 0x800ff7f0000fffd, x7, x3, 80, x8)

inst_6:
// rs1==x1, rs2==x0, rd==x22, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h3_val == -65, rs2_h2_val == -1025, rs2_h0_val == 1, rs1_h0_val == 2048, rs1_h3_val == -513, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: kdmabt16 ; op1:x1; op2:x0; dest:x22; op1val:0xfdff5555fffa0800;  op2val:0xffbffbff00030001
TEST_PKRR_OP(kdmabt16, x22, x1, x0, 0x0000000000000000, 0xfdff5555fffa0800, 0xffbffbff00030001, x1, x3, 96, x8)

inst_7:
// rs1==x20, rs2==x13, rd==x15, rs1_h0_val == rs2_h0_val, rs1_h0_val == -2, rs1_h3_val == 21845, rs1_h2_val == -3, rs2_h0_val == -2
// opcode: kdmabt16 ; op1:x20; op2:x13; dest:x15; op1val:0x5555fffdfffffffe;  op2val:0x060006fff9fffe
TEST_PKRR_OP(kdmabt16, x15, x20, x13, 0x0000000000000000, 0x5555fffdfffffffe, 0x060006fff9fffe, x20, x3, 112, x8)

inst_8:
// rs1==x30, rs2==x29, rd==x7, rs2_h3_val == -21846, rs1_h1_val == -2, rs1_h0_val == 128, rs1_h3_val == -65, rs2_h1_val == 32, rs1_h2_val == -32768
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x7; op1val:0xffbf8000fffe0080;  op2val:0xaaaa00070020fff7
TEST_PKRR_OP(kdmabt16, x7, x30, x29, 0x0000000000000000, 0xffbf8000fffe0080, 0xaaaa00070020fff7, x30, x3, 128, x8)

inst_9:
// rs1==x17, rs2==x24, rd==x13, rs2_h3_val == 21845, rs2_h0_val == 16, rs1_h0_val == -3, rs1_h2_val == 8, rs1_h3_val == -4097, rs2_h1_val == -3, rs1_h1_val == -257
// opcode: kdmabt16 ; op1:x17; op2:x24; dest:x13; op1val:0xefff0008fefffffd;  op2val:0x5555c000fffd0010
TEST_PKRR_OP(kdmabt16, x13, x17, x24, 0x0000000000000000, 0xefff0008fefffffd, 0x5555c000fffd0010, x17, x3, 144, x8)

inst_10:
// rs1==x10, rs2==x6, rd==x14, rs2_h3_val == 32767, rs1_h0_val == -5, rs2_h0_val == -5, rs1_h2_val == -5, rs1_h3_val == 8192, rs2_h2_val == 1
// opcode: kdmabt16 ; op1:x10; op2:x6; dest:x14; op1val:0x2000fffbfffafffb;  op2val:0x7fff0001fff6fffb
TEST_PKRR_OP(kdmabt16, x14, x10, x6, 0x0000000000000000, 0x2000fffbfffafffb, 0x7fff0001fff6fffb, x10, x3, 160, x8)

inst_11:
// rs1==x6, rs2==x25, rd==x0, rs2_h3_val == -16385, rs2_h0_val == 0, rs1_h1_val == -9, rs1_h2_val == 256, rs2_h2_val == -32768
// opcode: kdmabt16 ; op1:x6; op2:x25; dest:x0; op1val:0xfffa0100fff70006;  op2val:0xbfff8000fff90000
TEST_PKRR_OP(kdmabt16, x0, x6, x25, 0x0000000000000000, 0xfffa0100fff70006, 0xbfff8000fff90000, x6, x3, 176, x8)

inst_12:
// rs1==x25, rs2==x22, rd==x17, rs2_h3_val == -8193, rs2_h2_val == -257, rs2_h0_val == -33, rs1_h0_val == 16, rs2_h1_val == 4096, rs1_h3_val == -9
// opcode: kdmabt16 ; op1:x25; op2:x22; dest:x17; op1val:0xfff70100fffc0010;  op2val:0xdffffeff1000ffdf
TEST_PKRR_OP(kdmabt16, x17, x25, x22, 0x0000000000000000, 0xfff70100fffc0010, 0xdffffeff1000ffdf, x25, x3, 192, x8)

inst_13:
// rs1==x29, rs2==x12, rd==x31, rs2_h3_val == -4097, rs2_h1_val == 1024, rs1_h1_val == -32768, rs1_h3_val == -257, rs2_h2_val == -2049
// opcode: kdmabt16 ; op1:x29; op2:x12; dest:x31; op1val:0xfeff55558000fff8;  op2val:0xeffff7ff04000010
TEST_PKRR_OP(kdmabt16, x31, x29, x12, 0x0000000000000000, 0xfeff55558000fff8, 0xeffff7ff04000010, x29, x3, 208, x8)

inst_14:
// rs1==x24, rs2==x7, rd==x19, rs2_h3_val == -2049, rs1_h2_val == 2048, rs1_h3_val == 64, rs2_h2_val == -17, rs2_h1_val == -129, rs1_h1_val == -21846, rs1_h0_val == -257
// opcode: kdmabt16 ; op1:x24; op2:x7; dest:x19; op1val:0x400800aaaafeff;  op2val:0xf7ffffefff7ffffa
TEST_PKRR_OP(kdmabt16, x19, x24, x7, 0x0000000000000000, 0x400800aaaafeff, 0xf7ffffefff7ffffa, x24, x3, 224, x8)

inst_15:
// rs1==x16, rs2==x11, rd==x10, rs2_h3_val == -1025, rs2_h2_val == -513, rs1_h1_val == 2048, rs2_h1_val == -33, rs1_h3_val == -1025, rs1_h0_val == 2
// opcode: kdmabt16 ; op1:x16; op2:x11; dest:x10; op1val:0xfbffffef08000002;  op2val:0xfbfffdffffdffffb
TEST_PKRR_OP(kdmabt16, x10, x16, x11, 0x0000000000000000, 0xfbffffef08000002, 0xfbfffdffffdffffb, x16, x3, 240, x5)

inst_16:
// rs1==x23, rs2==x17, rd==x30, rs2_h3_val == -513, rs1_h0_val == -16385, rs2_h2_val == 8192, rs1_h1_val == 4096
// opcode: kdmabt16 ; op1:x23; op2:x17; dest:x30; op1val:0x0700051000bfff;  op2val:0xfdff200000030003
TEST_PKRR_OP(kdmabt16, x30, x23, x17, 0x0000000000000000, 0x0700051000bfff, 0xfdff200000030003, x23, x3, 256, x5)

inst_17:
// rs1==x9, rs2==x8, rd==x12, rs2_h3_val == -257, rs2_h0_val == -21846, rs1_h3_val == 0, rs1_h2_val == -1, rs1_h0_val == -513, rs1_h1_val == -17
// opcode: kdmabt16 ; op1:x9; op2:x8; dest:x12; op1val:0x00ffffffeffdff;  op2val:0xfeff00050006aaaa
TEST_PKRR_OP(kdmabt16, x12, x9, x8, 0x0000000000000000, 0x00ffffffeffdff, 0xfeff00050006aaaa, x9, x3, 272, x5)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_18:
// rs1==x19, rs2==x9, rd==x27, rs2_h3_val == -129, rs2_h1_val == 512, rs1_h2_val == -8193, rs1_h1_val == 16
// opcode: kdmabt16 ; op1:x19; op2:x9; dest:x27; op1val:0xfeffdfff0010fff7;  op2val:0xff7ffffc0200c000
TEST_PKRR_OP(kdmabt16, x27, x19, x9, 0x0000000000000000, 0xfeffdfff0010fff7, 0xff7ffffc0200c000, x19, x4, 0, x5)

inst_19:
// rs1==x0, rs2==x20, rd==x8, rs2_h3_val == -33, rs1_h1_val == -513, rs1_h0_val == 1, rs2_h1_val == 16384, rs1_h2_val == 512
// opcode: kdmabt16 ; op1:x0; op2:x20; dest:x8; op1val:0x20000200fdff0001;  op2val:0xffdff7ff4000efff
TEST_PKRR_OP(kdmabt16, x8, x0, x20, 0x0000000000000000, 0x20000200fdff0001, 0xffdff7ff4000efff, x0, x4, 16, x5)

inst_20:
// rs1==x27, rs2==x23, rd==x24, rs2_h3_val == -17, rs2_h1_val == 21845, rs1_h1_val == -33, rs1_h3_val == 2048
// opcode: kdmabt16 ; op1:x27; op2:x23; dest:x24; op1val:0x800fff8ffdfc000;  op2val:0xffef00085555fffe
TEST_PKRR_OP(kdmabt16, x24, x27, x23, 0x0000000000000000, 0x800fff8ffdfc000, 0xffef00085555fffe, x27, x4, 32, x5)

inst_21:
// rs1==x31, rs2==x10, rd==x20, rs2_h3_val == -9, rs2_h1_val == -1
// opcode: kdmabt16 ; op1:x31; op2:x10; dest:x20; op1val:0xfbfffff9ffff0000;  op2val:0xfff7fdfffffffff9
TEST_PKRR_OP(kdmabt16, x20, x31, x10, 0x0000000000000000, 0xfbfffff9ffff0000, 0xfff7fdfffffffff9, x31, x4, 48, x5)

inst_22:
// rs1==x2, rs2==x1, rd==x28, rs2_h3_val == -5, rs1_h3_val == 1024, rs1_h0_val == -33, rs2_h1_val == -65, rs1_h1_val == 2, rs2_h2_val == 256, rs2_h0_val == 2048
// opcode: kdmabt16 ; op1:x2; op2:x1; dest:x28; op1val:0x40010000002ffdf;  op2val:0xfffb0100ffbf0800
TEST_PKRR_OP(kdmabt16, x28, x2, x1, 0x0000000000000000, 0x40010000002ffdf, 0xfffb0100ffbf0800, x2, x4, 64, x5)

inst_23:
// rs1==x28, rs2==x3, rd==x9, rs2_h3_val == -3, rs1_h3_val == -5, rs2_h0_val == 8192, rs2_h1_val == 128
// opcode: kdmabt16 ; op1:x28; op2:x3; dest:x9; op1val:0xfffbfff900068000;  op2val:0xfffd000800802000
TEST_PKRR_OP(kdmabt16, x9, x28, x3, 0x0000000000000000, 0xfffbfff900068000, 0xfffd000800802000, x28, x4, 80, x5)

inst_24:
// rs1==x13, rs2==x31, rd==x26, rs2_h3_val == -32768, rs1_h1_val == -8193, rs2_h1_val == -8193, rs2_h0_val == -257
// opcode: kdmabt16 ; op1:x13; op2:x31; dest:x26; op1val:0x3ffffffadfff0007;  op2val:0x8000fdffdffffeff
TEST_PKRR_OP(kdmabt16, x26, x13, x31, 0x0000000000000000, 0x3ffffffadfff0007, 0x8000fdffdffffeff, x13, x4, 96, x5)

inst_25:
// rs1==x26, rs2==x15, rd==x2, rs2_h3_val == 16384, rs1_h2_val == 8192, rs2_h0_val == -17, rs1_h3_val == -1, rs1_h1_val == 64
// opcode: kdmabt16 ; op1:x26; op2:x15; dest:x2; op1val:0xffff200000400006;  op2val:0x40002000fffcffef
TEST_PKRR_OP(kdmabt16, x2, x26, x15, 0x0000000000000000, 0xffff200000400006, 0x40002000fffcffef, x26, x4, 112, x5)

inst_26:
// rs1==x8, rs2==x18, rd==x1, rs2_h3_val == 8192, rs2_h1_val == 32767
// opcode: kdmabt16 ; op1:x8; op2:x18; dest:x1; op1val:0x555501000009c000;  op2val:0x2000fbff7fffc000
TEST_PKRR_OP(kdmabt16, x1, x8, x18, 0x0000000000000000, 0x555501000009c000, 0x2000fbff7fffc000, x8, x4, 128, x5)

inst_27:
// rs1==x18, rs2==x19, rd==x6, rs2_h3_val == 4096, rs2_h2_val == 64, rs1_h0_val == 8192
// opcode: kdmabt16 ; op1:x18; op2:x19; dest:x6; op1val:0x2007ffffff92000;  op2val:0x1000004002000003
TEST_PKRR_OP(kdmabt16, x6, x18, x19, 0x0000000000000000, 0x2007ffffff92000, 0x1000004002000003, x18, x4, 144, x5)

inst_28:
// rs1==x15, rs2==x14, rd==x29, rs2_h3_val == 1024, rs2_h2_val == -9
// opcode: kdmabt16 ; op1:x15; op2:x14; dest:x29; op1val:0x4000063fff0009;  op2val:0x400fff77fff0010
TEST_PKRR_OP(kdmabt16, x29, x15, x14, 0x0000000000000000, 0x4000063fff0009, 0x400fff77fff0010, x15, x4, 160, x5)

inst_29:
// rs1==x3, rs2==x27, rd==x25, rs2_h3_val == 256, rs1_h3_val == -3, rs1_h2_val == -21846
// opcode: kdmabt16 ; op1:x3; op2:x27; dest:x25; op1val:0xfffdaaaa0040fff6;  op2val:0x100ff7ffffd0010
TEST_PKRR_OP(kdmabt16, x25, x3, x27, 0x0000000000000000, 0xfffdaaaa0040fff6, 0x100ff7ffffd0010, x3, x4, 176, x5)

inst_30:
// rs1==x22, rs2==x28, rd==x21, rs2_h3_val == 128, rs1_h2_val == -65, rs1_h1_val == 4, rs1_h0_val == -1025, rs2_h2_val == 32767
// opcode: kdmabt16 ; op1:x22; op2:x28; dest:x21; op1val:0xfffaffbf0004fbff;  op2val:0x807fffffbfffdf
TEST_PKRR_OP(kdmabt16, x21, x22, x28, 0x0000000000000000, 0xfffaffbf0004fbff, 0x807fffffbfffdf, x22, x4, 192, x1)

inst_31:
// rs1==x12, rs2==x21, rd==x3, rs2_h3_val == 64, rs2_h0_val == -1025, rs1_h1_val == -65, rs1_h2_val == -129
// opcode: kdmabt16 ; op1:x12; op2:x21; dest:x3; op1val:0xfff8ff7fffbffbff;  op2val:0x40fdfff7fffbff
TEST_PKRR_OP(kdmabt16, x3, x12, x21, 0x0000000000000000, 0xfff8ff7fffbffbff, 0x40fdfff7fffbff, x12, x4, 208, x1)

inst_32:
// rs2_h3_val == 32, rs1_h3_val == 4
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x04dfffefffdfff;  op2val:0x207fffffbffff6
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x04dfffefffdfff, 0x207fffffbffff6, x30, x4, 224, x1)

inst_33:
// rs2_h3_val == 16, rs2_h2_val == 32, rs2_h0_val == 8
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffbf00042000;  op2val:0x10002055550008
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfff7ffbf00042000, 0x10002055550008, x30, x4, 240, x1)

inst_34:
// rs1_h1_val == -5, rs2_h3_val == 2, rs2_h2_val == -21846, rs1_h0_val == -1
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550009fffbffff;  op2val:0x02aaaa5555fffa
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x55550009fffbffff, 0x02aaaa5555fffa, x30, x4, 256, x1)

inst_35:
// rs1_h1_val == -3, rs2_h0_val == -16385
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000dffffffd2000;  op2val:0xfff600080400bfff
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xc000dffffffd2000, 0xfff600080400bfff, x30, x4, 272, x1)

inst_36:
// rs1_h1_val == 16384, rs1_h3_val == -2, rs1_h2_val == -2049
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffef7ff40000003;  op2val:0x06000600000005
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfffef7ff40000003, 0x06000600000005, x30, x4, 288, x1)

inst_37:
// rs1_h1_val == 8192, rs2_h2_val == 4096, rs1_h3_val == -32768
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fff62000dfff;  op2val:0x10010004000fffc
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x8000fff62000dfff, 0x10010004000fffc, x30, x4, 304, x1)

inst_38:
// rs1_h1_val == 1024, rs2_h3_val == 1, rs1_h0_val == 256
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20007fff04000100;  op2val:0x01fdfff7ffc000
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x20007fff04000100, 0x01fdfff7ffc000, x30, x4, 320, x1)

inst_39:
// rs1_h1_val == 256, rs1_h3_val == -17
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef3fff01000007;  op2val:0x7fff8000fffcfffb
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xffef3fff01000007, 0x7fff8000fffcfffb, x30, x4, 336, x1)

inst_40:
// rs1_h1_val == 128, rs2_h2_val == -1, rs1_h0_val == 32767
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000300807fff;  op2val:0x02fffffffa2000
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfbff000300807fff, 0x02fffffffa2000, x30, x4, 352, x1)

inst_41:
// rs1_h1_val == 8, rs2_h1_val == -1025, rs2_h2_val == 16, rs2_h0_val == 256
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000500080010;  op2val:0xfdff0010fbff0100
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x40000500080010, 0xfdff0010fbff0100, x30, x4, 368, x1)

inst_42:
// rs1_h1_val == 1, rs1_h3_val == -129, rs2_h1_val == 8192
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f00070001feff;  op2val:0xfff800072000efff
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xff7f00070001feff, 0xfff800072000efff, x30, x4, 384, x1)

inst_43:
// rs1_h1_val == 0, rs2_h0_val == 16384, rs2_h3_val == 0, rs1_h3_val == 128
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000060000fff9;  op2val:0x00fffa10004000
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x8000060000fff9, 0x00fffa10004000, x30, x4, 400, x1)

inst_44:
// rs1_h0_val == -21846, rs2_h0_val == -8193, rs1_h1_val == 21845, rs1_h2_val == 1
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00015555aaaa;  op2val:0xff7f00050003dfff
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xffbf00015555aaaa, 0xff7f00050003dfff, x30, x4, 416, x1)

inst_45:
// rs1_h0_val == 21845, rs2_h1_val == -21846, rs1_h2_val == -9, rs2_h3_val == -1
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff704005555;  op2val:0xfffff7ffaaaafffb
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfffffff704005555, 0xfffff7ffaaaafffb, x30, x4, 432, x1)

inst_46:
// rs1_h0_val == -2049, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0008aaaaf7ff;  op2val:0x023fff00800001
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfffb0008aaaaf7ff, 0x023fff00800001, x30, x4, 448, x1)

inst_47:
// rs1_h0_val == -129, rs1_h1_val == -1025, rs2_h1_val == 2, rs2_h0_val == 4096, rs1_h3_val == 256
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100bffffbffff7f;  op2val:0xfffb000300021000
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x100bffffbffff7f, 0xfffb000300021000, x30, x4, 464, x1)

inst_48:
// rs1_h0_val == -65, rs1_h2_val == -33, rs2_h1_val == 2048
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffdffdffffbf;  op2val:0x800feff08000100
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xefffffdffdffffbf, 0x800feff08000100, x30, x4, 480, x1)

inst_49:
// rs1_h0_val == -17, rs1_h2_val == -4097, rs2_h2_val == 128
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09efff0800ffef;  op2val:0xfff90080bfffefff
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x09efff0800ffef, 0xfff90080bfffefff, x30, x4, 496, x1)

inst_50:
// rs1_h0_val == 16384, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8ff7fefff4000;  op2val:0x20000000fffafffe
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfff8ff7fefff4000, 0x20000000fffafffe, x30, x4, 512, x1)

inst_51:
// rs1_h0_val == 4096, rs2_h1_val == 8, rs2_h3_val == 8
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff010000071000;  op2val:0x0800800008fffe
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xbfff010000071000, 0x0800800008fffe, x30, x4, 528, x1)

inst_52:
// rs1_h0_val == 1024, rs1_h3_val == 4096
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffdffbf0400;  op2val:0x3fff002040000008
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x1000fffdffbf0400, 0x3fff002040000008, x30, x4, 544, x1)

inst_53:
// rs1_h0_val == 512, rs1_h2_val == -1025
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffbff08000200;  op2val:0xfff63fff00200001
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xeffffbff08000200, 0xfff63fff00200001, x30, x4, 560, x1)

inst_54:
// rs1_h0_val == 64, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9200000100040;  op2val:0xff7f0008bffffbff
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfff9200000100040, 0xff7f0008bffffbff, x30, x4, 576, x1)

inst_55:
// rs1_h0_val == 8, rs2_h1_val == 256, rs1_h1_val == 32767, rs2_h2_val == -3
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff97fff0008;  op2val:0xfffffffd0100dfff
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xffbffff97fff0008, 0xfffffffd0100dfff, x30, x4, 592, x1)

inst_56:
// rs1_h0_val == 4, rs1_h3_val == -2049
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff708000004;  op2val:0xdffffdff7fff0001
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xf7fffff708000004, 0xdffffdff7fff0001, x30, x4, 608, x1)

inst_57:
// rs2_h1_val == 4, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550800fdff0200;  op2val:0x2000090004fff8
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x55550800fdff0200, 0x2000090004fff8, x30, x4, 624, x1)

inst_58:
// rs2_h1_val == 1, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffef7fffff7ffff;  op2val:0x200fdff00010800
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfffef7fffff7ffff, 0x200fdff00010800, x30, x4, 640, x1)

inst_59:
// rs2_h0_val == 21845, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfff600005555;  op2val:0x0700403fff5555
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfffbfff600005555, 0x0700403fff5555, x30, x4, 656, x1)

inst_60:
// rs2_h0_val == 32767, rs1_h2_val == 4, rs1_h1_val == -16385
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0004bffffffc;  op2val:0x0620003fff7fff
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfbff0004bffffffc, 0x0620003fff7fff, x30, x4, 672, x1)

inst_61:
// rs2_h0_val == -2049, rs2_h2_val == -65
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fff855550006;  op2val:0xefffffbf0000f7ff
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x80fff855550006, 0xefffffbf0000f7ff, x30, x4, 688, x1)

inst_62:
// rs2_h0_val == -513, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0100c0000004;  op2val:0xfffa8000effffdff
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfdff0100c0000004, 0xfffa8000effffdff, x30, x4, 704, x1)

inst_63:
// rs2_h0_val == -129, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000ffbffffc0004;  op2val:0xfeffffef0080ff7f
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xc000ffbffffc0004, 0xfeffffef0080ff7f, x30, x4, 720, x1)

inst_64:
// rs2_h0_val == -65, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fff6fffcfffb;  op2val:0x4000ff7f0100ffbf
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x100fff6fffcfffb, 0x4000ff7f0100ffbf, x30, x4, 736, x1)

inst_65:
// rs2_h0_val == -32768, rs2_h2_val == 512
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7200000203fff;  op2val:0x1000020010008000
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfff7200000203fff, 0x1000020010008000, x30, x4, 752, x1)

inst_66:
// rs2_h0_val == 1024, rs2_h2_val == 1024
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400fffdfffeefff;  op2val:0xfff6040000090400
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x400fffdfffeefff, 0xfff6040000090400, x30, x4, 768, x1)

inst_67:
// rs2_h0_val == 512, rs2_h2_val == 16384, rs1_h2_val == 32, rs2_h1_val == -32768
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000200003fff7;  op2val:0xfeff400080000200
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x100000200003fff7, 0xfeff400080000200, x30, x4, 784, x1)

inst_68:
// rs2_h0_val == 128, rs2_h2_val == 2048
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefff604000040;  op2val:0x400080000100080
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfffefff604000040, 0x400080000100080, x30, x4, 800, x1)

inst_69:
// rs2_h0_val == 32, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fffc0008fff8;  op2val:0xfff74000f7ff0020
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x09fffc0008fff8, 0xfff74000f7ff0020, x30, x4, 816, x1)

inst_70:
// rs2_h0_val == 4, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fff700200020;  op2val:0xfff7f7ff10000004
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x8000fff700200020, 0xfff7f7ff10000004, x30, x4, 832, x1)

inst_71:
// rs2_h0_val == 2, rs2_h1_val == -2, rs1_h2_val == 1024
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60400fff6dfff;  op2val:0x002000fffe0002
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfff60400fff6dfff, 0x002000fffe0002, x30, x4, 848, x1)

inst_72:
// rs2_h0_val == -1, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffff700087fff;  op2val:0x1007fffffbfffff
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfefffff700087fff, 0x1007fffffbfffff, x30, x4, 864, x1)

inst_73:
// rs1_h3_val == -21846, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffbf0007;  op2val:0x20fffffff60200
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffbf0007, 0x20fffffff60200, x30, x4, 880, x1)

inst_74:
// rs2_h2_val == -16385, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0700030002fff9;  op2val:0x5555bfff1000ffdf
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x0700030002fff9, 0x5555bfff1000ffdf, x30, x4, 896, x1)

inst_75:
// rs2_h2_val == -4097, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000200000208000;  op2val:0xffffefff0004fff6
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x4000200000208000, 0xffffefff0004fff6, x30, x4, 912, x1)

inst_76:
// rs1_h3_val == 32, rs1_h2_val == 2
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x200002fffe1000;  op2val:0xfff7ff7f00050200
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x200002fffe1000, 0xfff7ff7f00050200, x30, x4, 928, x1)

inst_77:
// rs1_h3_val == 16, rs2_h1_val == 64
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100002fffbff7f;  op2val:0xfdfff7ff0040fffb
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x100002fffbff7f, 0xfdfff7ff0040fffb, x30, x4, 944, x1)

inst_78:
// rs1_h3_val == 8, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0808001000fffd;  op2val:0x10fff710000001
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x0808001000fffd, 0x10fff710000001, x30, x4, 960, x1)

inst_79:
// rs2_h2_val == -33, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000800000009;  op2val:0xfffdffdf0001ffff
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x1000000800000009, 0xfffdffdf0001ffff, x30, x4, 976, x1)

inst_80:
// rs1_h3_val == 1, rs2_h1_val == -17
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x010002bffffeff;  op2val:0xfdff0010ffef0040
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x010002bffffeff, 0xfdff0010ffef0040, x30, x4, 992, x1)

inst_81:
// rs2_h2_val == -5, rs2_h1_val == -9
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x200000700060004;  op2val:0x5555fffbfff70007
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x200000700060004, 0x5555fffbfff70007, x30, x4, 1008, x1)

inst_82:
// rs2_h2_val == -2, rs1_h2_val == -513
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffdff04005555;  op2val:0xff7ffffe00030040
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xffeffdff04005555, 0xff7ffffe00030040, x30, x4, 1024, x1)

inst_83:
// rs1_h2_val == -257, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000feff0007ff7f;  op2val:0xffff00805555fffa
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x2000feff0007ff7f, 0xffff00805555fffa, x30, x4, 1040, x1)

inst_84:
// rs2_h2_val == 4, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x07020000020004;  op2val:0x0800040005fffc
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x07020000020004, 0x0800040005fffc, x30, x4, 1056, x1)

inst_85:
// rs1_h2_val == 16384, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff740000020c000;  op2val:0xfffafeffefff0009
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfff740000020c000, 0xfffafeffefff0009, x30, x4, 1072, x1)

inst_86:
// rs1_h2_val == 128, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf008010000001;  op2val:0xaaaafffc00400800
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xffbf008010000001, 0xaaaafffc00400800, x30, x4, 1088, x1)

inst_87:
// rs1_h2_val == 64, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0040fffedfff;  op2val:0x02ffdfffbffbff
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xaaaa0040fffedfff, 0x02ffdfffbffbff, x30, x4, 1104, x1)

inst_88:
// rs2_h1_val == -513, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffff80800fffe;  op2val:0xfffe0003fdfffff9
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x3ffffff80800fffe, 0xfffe0003fdfffff9, x30, x4, 1120, x1)

inst_89:
// rs2_h1_val == -257, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffa02000010;  op2val:0xfffdfffdfeff0005
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfff9fffa02000010, 0xfffdfffdfeff0005, x30, x4, 1136, x1)

inst_90:
// rs1_h2_val == 16, rs1_h1_val == -129, rs2_h2_val == 2
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0010ff7ffff9;  op2val:0x0200020100bfff
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xff7f0010ff7ffff9, 0x0200020100bfff, x30, x4, 1152, x1)

inst_91:
// rs1_h3_val == 32767, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0100ffff4000;  op2val:0xfeff020000200200
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x7fff0100ffff4000, 0xfeff020000200200, x30, x4, 1168, x1)

inst_92:
// rs2_h1_val == -5, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffd3fff7fff;  op2val:0xaaaa0007fffb0008
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xaaaafffd3fff7fff, 0xaaaa0007fffb0008, x30, x4, 1184, x1)

inst_93:
// rs1_h1_val == -2049, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x05ffdff7ff0010;  op2val:0x070003fffefff6
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x05ffdff7ff0010, 0x070003fffefff6, x30, x4, 1200, x1)

inst_94:
// rs2_h3_val == 4, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fff7aaaaffdf;  op2val:0x04efff0080fffb
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0x09fff7aaaaffdf, 0x04efff0080fffb, x30, x4, 1216, x1)

inst_95:
// rs2_h2_val == 21845, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff10000200fff6;  op2val:0xffdf55550007bfff
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xf7ff10000200fff6, 0xffdf55550007bfff, x30, x4, 1232, x1)

inst_96:
// rs1_h3_val == -8193, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffbfffefff0002;  op2val:0xfff9000500000000
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xdfffbfffefff0002, 0xfff9000500000000, x30, x4, 1248, x1)

inst_97:
// rs1_h2_val == -2, 
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffe00010001;  op2val:0x100800000082000
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfdfffffe00010001, 0x100800000082000, x30, x4, 1264, x1)

inst_98:
// rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h2_val == -8193, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h3_val == -16385, rs1_h1_val == rs2_h1_val, rs1_h2_val == 21845, rs1_h0_val == 32, rs2_h0_val == -9, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff5555fff90020;  op2val:0xfffadffffff9fff7
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xbfff5555fff90020, 0xfffadffffff9fff7, x30, x4, 1280, x1)

inst_99:
// rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h3_val == -65, rs2_h2_val == -1025, rs2_h0_val == 1, rs1_h0_val == 2048, rs1_h3_val == -513, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff5555fffa0800;  op2val:0xffbffbff00030001
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfdff5555fffa0800, 0xffbffbff00030001, x30, x4, 1296, x1)

inst_100:
// rs2_h3_val == -16385, rs2_h0_val == 0, rs1_h1_val == -9, rs1_h2_val == 256, rs2_h2_val == -32768
// opcode: kdmabt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0100fff70006;  op2val:0xbfff8000fff90000
TEST_PKRR_OP(kdmabt16, x31, x30, x29, 0x0000000000000000, 0xfffa0100fff70006, 0xbfff8000fff90000, x30, x4, 1312, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 166*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
