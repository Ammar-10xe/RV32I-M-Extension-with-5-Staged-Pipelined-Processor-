
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sunpkd810 instruction of the RISC-V RV64PZicsr extension for the sunpkd810 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sunpkd810)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1==x2, rd==x21, rs1_b0_val == -128, rs1_b3_val == 85, rs1_b5_val == 127, rs1_b2_val == -128, rs1_b4_val == -128
// opcode: sunpkd810 ; op1:x2; dest:x21; op1val:0x3f037f8055800780;
TEST_RD_OP( sunpkd810, x21, x2, 0x0000000000000000, 0x3f037f8055800780, x5, 0, x12)

inst_1:
// rs1==x23, rd==x28, rs1_b7_val == -86, rs1_b4_val == 64, rs1_b5_val == -1, rs1_b3_val == 127, rs1_b0_val == -9, rs1_b2_val == 2, rs1_b1_val == -86, rs1_b6_val == -5
// opcode: sunpkd810 ; op1:x23; dest:x28; op1val:0xaafbff407f02aaf7;
TEST_RD_OP( sunpkd810, x28, x23, 0x0000000000000000, 0xaafbff407f02aaf7, x5, 8, x12)

inst_2:
// rs1==x27, rd==x6, rs1_b7_val == 85, rs1_b0_val == -33, rs1_b4_val == 8, rs1_b6_val == -9, rs1_b1_val == -2
// opcode: sunpkd810 ; op1:x27; dest:x6; op1val:0x55f70608fafcfedf;
TEST_RD_OP( sunpkd810, x6, x27, 0x0000000000000000, 0x55f70608fafcfedf, x5, 16, x12)

inst_3:
// rs1==x1, rd==x4, rs1_b7_val == 127, rs1_b1_val == 4, rs1_b6_val == -33, rs1_b2_val == -17, rs1_b4_val == 0
// opcode: sunpkd810 ; op1:x1; dest:x4; op1val:0x7fdf0500fcef04df;
TEST_RD_OP( sunpkd810, x4, x1, 0x0000000000000000, 0x7fdf0500fcef04df, x5, 24, x12)

inst_4:
// rs1==x3, rd==x11, rs1_b7_val == -65, rs1_b1_val == -5, rs1_b5_val == -17, rs1_b0_val == -17, rs1_b2_val == 1, rs1_b3_val == -5
// opcode: sunpkd810 ; op1:x3; dest:x11; op1val:0xbff9ef06fb01fbef;
TEST_RD_OP( sunpkd810, x11, x3, 0x0000000000000000, 0xbff9ef06fb01fbef, x5, 32, x12)

inst_5:
// rs1==x9, rd==x15, rs1_b7_val == -33, rs1_b0_val == 2, rs1_b6_val == 0
// opcode: sunpkd810 ; op1:x9; dest:x15; op1val:0xdf00078007f8aa02;
TEST_RD_OP( sunpkd810, x15, x9, 0x0000000000000000, 0xdf00078007f8aa02, x5, 40, x12)

inst_6:
// rs1==x28, rd==x17, rs1_b7_val == -17, rs1_b4_val == -33, rs1_b6_val == 8, rs1_b5_val == -86, rs1_b2_val == -9, rs1_b3_val == -3
// opcode: sunpkd810 ; op1:x28; dest:x17; op1val:0xef08aadffdf70907;
TEST_RD_OP( sunpkd810, x17, x28, 0x0000000000000000, 0xef08aadffdf70907, x5, 48, x12)

inst_7:
// rs1==x15, rd==x14, rs1_b7_val == -9, rs1_b5_val == -65, rs1_b3_val == 16
// opcode: sunpkd810 ; op1:x15; dest:x14; op1val:0xf7f6bf081080063f;
TEST_RD_OP( sunpkd810, x14, x15, 0x0000000000000000, 0xf7f6bf081080063f, x5, 56, x12)

inst_8:
// rs1==x24, rd==x10, rs1_b7_val == -5, rs1_b1_val == 2, rs1_b4_val == 2, rs1_b3_val == -9, rs1_b5_val == 8
// opcode: sunpkd810 ; op1:x24; dest:x10; op1val:0xfb3f0802f70902f9;
TEST_RD_OP( sunpkd810, x10, x24, 0x0000000000000000, 0xfb3f0802f70902f9, x5, 64, x12)

inst_9:
// rs1==x30, rd==x13, rs1_b7_val == -3, rs1_b4_val == -5, rs1_b2_val == -86, rs1_b5_val == -2, rs1_b3_val == 32, rs1_b6_val == -128
// opcode: sunpkd810 ; op1:x30; dest:x13; op1val:0xfd80fefb20aa0205;
TEST_RD_OP( sunpkd810, x13, x30, 0x0000000000000000, 0xfd80fefb20aa0205, x5, 72, x12)

inst_10:
// rs1==x8, rd==x20, rs1_b7_val == -2, rs1_b5_val == 4, rs1_b6_val == -17, rs1_b3_val == 4, rs1_b4_val == 85
// opcode: sunpkd810 ; op1:x8; dest:x20; op1val:0xfeef04550403fc3f;
TEST_RD_OP( sunpkd810, x20, x8, 0x0000000000000000, 0xfeef04550403fc3f, x5, 80, x12)

inst_11:
// rs1==x29, rd==x1, rs1_b7_val == -128, rs1_b5_val == -5, rs1_b0_val == 4, rs1_b6_val == -3, rs1_b2_val == 85
// opcode: sunpkd810 ; op1:x29; dest:x1; op1val:0x80fdfb06fc550304;
TEST_RD_OP( sunpkd810, x1, x29, 0x0000000000000000, 0x80fdfb06fc550304, x5, 88, x12)

inst_12:
// rs1==x10, rd==x18, rs1_b7_val == 64, rs1_b0_val == -2, rs1_b2_val == -3, rs1_b3_val == -17
// opcode: sunpkd810 ; op1:x10; dest:x18; op1val:0x40fb0805effdfafe;
TEST_RD_OP( sunpkd810, x18, x10, 0x0000000000000000, 0x40fb0805effdfafe, x5, 96, x12)

inst_13:
// rs1==x4, rd==x0, rs1_b7_val == 32, rs1_b4_val == -17, rs1_b5_val == 64
// opcode: sunpkd810 ; op1:x4; dest:x0; op1val:0x20c040eff803faf6;
TEST_RD_OP( sunpkd810, x0, x4, 0x0000000000000000, 0x20c040eff803faf6, x5, 104, x12)

inst_14:
// rs1==x17, rd==x9, rs1_b7_val == 16, rs1_b1_val == 64, rs1_b4_val == 4, rs1_b3_val == -65
// opcode: sunpkd810 ; op1:x17; dest:x9; op1val:0x10efaa04bf0640fc;
TEST_RD_OP( sunpkd810, x9, x17, 0x0000000000000000, 0x10efaa04bf0640fc, x5, 112, x12)

inst_15:
// rs1==x20, rd==x30, rs1_b7_val == 8, rs1_b2_val == -5, rs1_b6_val == 4, rs1_b5_val == 32, rs1_b0_val == 85
// opcode: sunpkd810 ; op1:x20; dest:x30; op1val:0x804200303fb0555;
TEST_RD_OP( sunpkd810, x30, x20, 0x0000000000000000, 0x804200303fb0555, x5, 120, x12)

inst_16:
// rs1==x31, rd==x7, rs1_b7_val == 4, rs1_b3_val == 64, rs1_b4_val == -3
// opcode: sunpkd810 ; op1:x31; dest:x7; op1val:0x480f6fd408009c0;
TEST_RD_OP( sunpkd810, x7, x31, 0x0000000000000000, 0x480f6fd408009c0, x5, 128, x12)

inst_17:
// rs1==x7, rd==x26, rs1_b7_val == 2, rs1_b2_val == -1, rs1_b1_val == -3, rs1_b6_val == 85
// opcode: sunpkd810 ; op1:x7; dest:x26; op1val:0x255fe04c0fffdf8;
TEST_RD_OP( sunpkd810, x26, x7, 0x0000000000000000, 0x255fe04c0fffdf8, x5, 136, x12)

inst_18:
// rs1==x21, rd==x8, rs1_b7_val == 1, 
// opcode: sunpkd810 ; op1:x21; dest:x8; op1val:0x1ef040455033f04;
TEST_RD_OP( sunpkd810, x8, x21, 0x0000000000000000, 0x1ef040455033f04, x5, 144, x12)

inst_19:
// rs1==x14, rd==x16, rs1_b7_val == 0, rs1_b1_val == 8, rs1_b0_val == 16, rs1_b4_val == 127, rs1_b5_val == -9
// opcode: sunpkd810 ; op1:x14; dest:x16; op1val:0xfcf77f40050810;
TEST_RD_OP( sunpkd810, x16, x14, 0x0000000000000000, 0xfcf77f40050810, x5, 152, x12)

inst_20:
// rs1==x19, rd==x25, rs1_b7_val == -1, rs1_b2_val == -33, rs1_b4_val == -86, rs1_b0_val == 1, rs1_b1_val == -9
// opcode: sunpkd810 ; op1:x19; dest:x25; op1val:0xffefaaaa55dff701;
TEST_RD_OP( sunpkd810, x25, x19, 0x0000000000000000, 0xffefaaaa55dff701, x5, 160, x12)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_21:
// rs1==x11, rd==x12, rs1_b6_val == -86, rs1_b4_val == -2, rs1_b1_val == 1, rs1_b0_val == -65, rs1_b2_val == 16, rs1_b3_val == -2, rs1_b5_val == 0
// opcode: sunpkd810 ; op1:x11; dest:x12; op1val:0x55aa00fefe1001bf;
TEST_RD_OP( sunpkd810, x12, x11, 0x0000000000000000, 0x55aa00fefe1001bf, x1, 0, x4)

inst_22:
// rs1==x22, rd==x3, rs1_b1_val == -128, 
// opcode: sunpkd810 ; op1:x22; dest:x3; op1val:0xc03ff909c0108004;
TEST_RD_OP( sunpkd810, x3, x22, 0x0000000000000000, 0xc03ff909c0108004, x1, 8, x4)

inst_23:
// rs1==x26, rd==x29, rs1_b1_val == 32, rs1_b6_val == 64, rs1_b4_val == -65, rs1_b5_val == 16
// opcode: sunpkd810 ; op1:x26; dest:x29; op1val:0x3f4010bff73f203f;
TEST_RD_OP( sunpkd810, x29, x26, 0x0000000000000000, 0x3f4010bff73f203f, x1, 16, x4)

inst_24:
// rs1==x12, rd==x24, rs1_b1_val == 16, rs1_b4_val == -9, rs1_b0_val == 64
// opcode: sunpkd810 ; op1:x12; dest:x24; op1val:0x855f8f709f61040;
TEST_RD_OP( sunpkd810, x24, x12, 0x0000000000000000, 0x855f8f709f61040, x1, 24, x4)

inst_25:
// rs1==x0, rd==x22, rs1_b1_val == 0, rs1_b4_val == -1, rs1_b2_val == 0
// opcode: sunpkd810 ; op1:x0; dest:x22; op1val:0xf63ffbfffd0000fa;
TEST_RD_OP( sunpkd810, x22, x0, 0x0000000000000000, 0xf63ffbfffd0000fa, x1, 32, x4)

inst_26:
// rs1==x25, rd==x27, rs1_b1_val == -1, rs1_b0_val == 8, rs1_b6_val == -2
// opcode: sunpkd810 ; op1:x25; dest:x27; op1val:0x10fef9fffb03ff08;
TEST_RD_OP( sunpkd810, x27, x25, 0x0000000000000000, 0x10fef9fffb03ff08, x1, 40, x4)

inst_27:
// rs1==x18, rd==x31, rs1_b0_val == -86, 
// opcode: sunpkd810 ; op1:x18; dest:x31; op1val:0x2003f7fe070910aa;
TEST_RD_OP( sunpkd810, x31, x18, 0x0000000000000000, 0x2003f7fe070910aa, x1, 48, x4)

inst_28:
// rs1==x5, rd==x19, rs1_b0_val == 127, rs1_b6_val == 16
// opcode: sunpkd810 ; op1:x5; dest:x19; op1val:0x610eff60310037f;
TEST_RD_OP( sunpkd810, x19, x5, 0x0000000000000000, 0x610eff60310037f, x1, 56, x4)

inst_29:
// rs1==x13, rd==x5, rs1_b0_val == -5, rs1_b3_val == -86, rs1_b1_val == 127
// opcode: sunpkd810 ; op1:x13; dest:x5; op1val:0xf71005ffaac07ffb;
TEST_RD_OP( sunpkd810, x5, x13, 0x0000000000000000, 0xf71005ffaac07ffb, x1, 64, x4)

inst_30:
// rs1==x16, rd==x2, rs1_b0_val == -3, rs1_b2_val == 4
// opcode: sunpkd810 ; op1:x16; dest:x2; op1val:0xfc094003550403fd;
TEST_RD_OP( sunpkd810, x2, x16, 0x0000000000000000, 0xfc094003550403fd, x1, 72, x4)

inst_31:
// rs1==x6, rd==x23, rs1_b6_val == 127, rs1_b2_val == -2
// opcode: sunpkd810 ; op1:x6; dest:x23; op1val:0xfc7fc07ff8fefbfc;
TEST_RD_OP( sunpkd810, x23, x6, 0x0000000000000000, 0xfc7fc07ff8fefbfc, x1, 80, x4)

inst_32:
// rs1_b6_val == -65, rs1_b2_val == 32, rs1_b1_val == -65
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x3bffefa5520bf03;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0x3bffefa5520bf03, x1, 88, x4)

inst_33:
// rs1_b0_val == 32, rs1_b3_val == 0, rs1_b1_val == -33
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x2055fc3f0080df20;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0x2055fc3f0080df20, x1, 96, x4)

inst_34:
// rs1_b4_val == 32, rs1_b3_val == -128
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0xaafa072080020109;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0xaafa072080020109, x1, 104, x4)

inst_35:
// rs1_b4_val == 16, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x55fd071010100207;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0x55fd071010100207, x1, 112, x4)

inst_36:
// rs1_b4_val == 1, rs1_b5_val == 2
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x40df0201bfaa02df;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0x40df0201bfaa02df, x1, 120, x4)

inst_37:
// rs1_b3_val == -33, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x40f707bfdffb0310;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0x40f707bfdffb0310, x1, 128, x4)

inst_38:
// rs1_b0_val == 0, rs1_b5_val == 85
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x40550400060100;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0x40550400060100, x1, 136, x4)

inst_39:
// rs1_b0_val == -1, rs1_b2_val == 8
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x1fe02fb0408f9ff;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0x1fe02fb0408f9ff, x1, 144, x4)

inst_40:
// rs1_b3_val == 8, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0xfa00fa0608f609df;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0xfa00fa0608f609df, x1, 152, x4)

inst_41:
// rs1_b6_val == 32, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x2020ef07eff97f20;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0x2020ef07eff97f20, x1, 160, x4)

inst_42:
// rs1_b3_val == 2, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x55200420020404fb;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0x55200420020404fb, x1, 168, x4)

inst_43:
// rs1_b3_val == 1, rs1_b5_val == -3
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x708fd1001ffdfbf;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0x708fd1001ffdfbf, x1, 176, x4)

inst_44:
// rs1_b3_val == -1, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x7bf0520fff9aa06;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0x7bf0520fff9aa06, x1, 184, x4)

inst_45:
// rs1_b5_val == 1, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0xdf3f01fe08070980;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0xdf3f01fe08070980, x1, 192, x4)

inst_46:
// rs1_b6_val == 2, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0xc002100002dffa55;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0xc002100002dffa55, x1, 200, x4)

inst_47:
// rs1_b6_val == 1, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0xfb01fb0602f6fbbf;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0xfb01fb0602f6fbbf, x1, 208, x4)

inst_48:
// rs1_b2_val == 127, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0xaaef0880097f40fc;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0xaaef0880097f40fc, x1, 216, x4)

inst_49:
// rs1_b2_val == 64, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0xfdfcbf80fc401002;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0xfdfcbf80fc401002, x1, 224, x4)

inst_50:
// rs1_b5_val == -128, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x403f80fc058003ef;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0x403f80fc058003ef, x1, 232, x4)

inst_51:
// rs1_b6_val == -1, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x9fff9f9c0ef0103;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0x9fff9f9c0ef0103, x1, 240, x4)

inst_52:
// rs1_b2_val == -65, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0xf8f706f6fdbf02c0;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0xf8f706f6fdbf02c0, x1, 248, x4)

inst_53:
// rs1_b1_val == 85, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x400807fb00805501;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0x400807fb00805501, x1, 256, x4)

inst_54:
// rs1_b5_val == -33, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x1fddfeff9df0510;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0x1fddfeff9df0510, x1, 264, x4)

inst_55:
// rs1_b1_val == -17, 
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0x3f7f02020280ef00;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0x3f7f02020280ef00, x1, 272, x4)

inst_56:
// rs1_b1_val == 0, rs1_b4_val == -1, rs1_b2_val == 0
// opcode: sunpkd810 ; op1:x30; dest:x31; op1val:0xf63ffbfffd0000fa;
TEST_RD_OP( sunpkd810, x31, x30, 0x0000000000000000, 0xf63ffbfffd0000fa, x1, 280, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 36*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
