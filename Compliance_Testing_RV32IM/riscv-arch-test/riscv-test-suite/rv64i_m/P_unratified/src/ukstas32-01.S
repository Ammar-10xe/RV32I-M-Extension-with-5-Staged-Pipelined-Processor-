
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukstas32 instruction of the RISC-V RV64PZicsr extension for the ukstas32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukstas32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1 == rd != rs2, rs1==x1, rs2==x5, rd==x1, rs1_w0_val == 0, rs1_w1_val == 4290772991, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 4294967279, rs2_w0_val == 4294967039
// opcode: ukstas32 ; op1:x1; op2:x5; dest:x1; op1val:0xffbfffff00000000;  op2val:0xffffffeffffffeff
TEST_PKRR_OP(ukstas32, x1, x1, x5, 0x0000000000000000, 0xffbfffff00000000, 0xffffffeffffffeff, x1, x9, 0, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x24, rs2==x14, rd==x0, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 4294901759, rs2_w0_val == 0, rs2_w1_val == 4294901759, rs1_w0_val == 524288
// opcode: ukstas32 ; op1:x24; op2:x14; dest:x0; op1val:0xfffeffff00080000;  op2val:0xfffeffff00000000
TEST_PKRR_OP(ukstas32, x0, x24, x14, 0x0000000000000000, 0xfffeffff00080000, 0xfffeffff00000000, x24, x9, 16, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x6, rs2==x6, rd==x17, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 3758096383, rs1_w1_val == 4160749567, rs2_w0_val == 4293918719
// opcode: ukstas32 ; op1:x6; op2:x6; dest:x17; op1val:0xf7ffffff0000000d;  op2val:0xdfffffffffefffff
TEST_PKRR_OP(ukstas32, x17, x6, x6, 0x0000000000000000, 0xf7ffffff0000000d, 0xdfffffffffefffff, x6, x9, 32, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x23, rs2==x23, rd==x23, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 128, rs1_w0_val == 4294967287, rs2_w0_val == 4294967287, rs2_w1_val == 32768
// opcode: ukstas32 ; op1:x23; op2:x23; dest:x23; op1val:0x000080fffffff7;  op2val:0x008000fffffff7
TEST_PKRR_OP(ukstas32, x23, x23, x23, 0x0000000000000000, 0x000080fffffff7, 0x008000fffffff7, x23, x9, 48, x8)

inst_4:
// rs2 == rd != rs1, rs1==x31, rs2==x27, rd==x27, rs2_w1_val == 2863311530, rs2_w0_val == 4294967291
// opcode: ukstas32 ; op1:x31; op2:x27; dest:x27; op1val:0xffbfffff00000005;  op2val:0xaaaaaaaafffffffb
TEST_PKRR_OP(ukstas32, x27, x31, x27, 0x0000000000000000, 0xffbfffff00000005, 0xaaaaaaaafffffffb, x31, x9, 64, x8)

inst_5:
// rs1==x10, rs2==x30, rd==x7, rs2_w1_val == 1431655765, rs1_w0_val == 4294967293, rs2_w0_val == 64, rs1_w1_val == 33554432
// opcode: ukstas32 ; op1:x10; op2:x30; dest:x7; op1val:0x2000000fffffffd;  op2val:0x5555555500000040
TEST_PKRR_OP(ukstas32, x7, x10, x30, 0x0000000000000000, 0x2000000fffffffd, 0x5555555500000040, x10, x9, 80, x8)

inst_6:
// rs1==x22, rs2==x10, rd==x31, rs2_w1_val == 2147483647, rs1_w1_val == 524288, rs1_w0_val == 4290772991
// opcode: ukstas32 ; op1:x22; op2:x10; dest:x31; op1val:0x080000ffbfffff;  op2val:0x7fffffff00000040
TEST_PKRR_OP(ukstas32, x31, x22, x10, 0x0000000000000000, 0x080000ffbfffff, 0x7fffffff00000040, x22, x9, 96, x8)

inst_7:
// rs1==x7, rs2==x18, rd==x25, rs2_w1_val == 3221225471, rs1_w1_val == 2097152
// opcode: ukstas32 ; op1:x7; op2:x18; dest:x25; op1val:0x2000000000000f;  op2val:0xbffffffffffffffb
TEST_PKRR_OP(ukstas32, x25, x7, x18, 0x0000000000000000, 0x2000000000000f, 0xbffffffffffffffb, x7, x9, 112, x8)

inst_8:
// rs1==x28, rs2==x7, rd==x11, rs2_w1_val == 4026531839, rs1_w0_val == 64, rs2_w0_val == 4294959103, rs1_w1_val == 4261412863
// opcode: ukstas32 ; op1:x28; op2:x7; dest:x11; op1val:0xfdffffff00000040;  op2val:0xefffffffffffdfff
TEST_PKRR_OP(ukstas32, x11, x28, x7, 0x0000000000000000, 0xfdffffff00000040, 0xefffffffffffdfff, x28, x9, 128, x8)

inst_9:
// rs1==x26, rs2==x2, rd==x13, rs2_w1_val == 4160749567, rs1_w0_val == 4, rs2_w0_val == 4294965247
// opcode: ukstas32 ; op1:x26; op2:x2; dest:x13; op1val:0x00000f00000004;  op2val:0xf7fffffffffff7ff
TEST_PKRR_OP(ukstas32, x13, x26, x2, 0x0000000000000000, 0x00000f00000004, 0xf7fffffffffff7ff, x26, x9, 144, x8)

inst_10:
// rs1==x20, rs2==x3, rd==x24, rs2_w1_val == 4227858431, rs2_w0_val == 67108864, rs1_w1_val == 32768
// opcode: ukstas32 ; op1:x20; op2:x3; dest:x24; op1val:0x00800000000011;  op2val:0xfbffffff04000000
TEST_PKRR_OP(ukstas32, x24, x20, x3, 0x0000000000000000, 0x00800000000011, 0xfbffffff04000000, x20, x9, 160, x8)

inst_11:
// rs1==x12, rs2==x28, rd==x16, rs2_w1_val == 4261412863, rs1_w1_val == 4294443007, rs1_w0_val == 4294934527, rs2_w0_val == 134217728
// opcode: ukstas32 ; op1:x12; op2:x28; dest:x16; op1val:0xfff7ffffffff7fff;  op2val:0xfdffffff08000000
TEST_PKRR_OP(ukstas32, x16, x12, x28, 0x0000000000000000, 0xfff7ffffffff7fff, 0xfdffffff08000000, x12, x9, 176, x8)

inst_12:
// rs1==x30, rs2==x15, rd==x3, rs2_w1_val == 4278190079, rs2_w0_val == 4294967279, rs1_w1_val == 4294967167
// opcode: ukstas32 ; op1:x30; op2:x15; dest:x3; op1val:0xffffff7f00000009;  op2val:0xfeffffffffffffef
TEST_PKRR_OP(ukstas32, x3, x30, x15, 0x0000000000000000, 0xffffff7f00000009, 0xfeffffffffffffef, x30, x9, 192, x8)

inst_13:
// rs1==x14, rs2==x12, rd==x4, rs2_w1_val == 4286578687, rs2_w0_val == 4294705151, rs1_w1_val == 4294959103
// opcode: ukstas32 ; op1:x14; op2:x12; dest:x4; op1val:0xffffdfff0000000e;  op2val:0xff7ffffffffbffff
TEST_PKRR_OP(ukstas32, x4, x14, x12, 0x0000000000000000, 0xffffdfff0000000e, 0xff7ffffffffbffff, x14, x9, 208, x8)

inst_14:
// rs1==x3, rs2==x8, rd==x12, rs2_w1_val == 4290772991, rs1_w1_val == 4, rs1_w0_val == 4294959103, rs2_w0_val == 16
// opcode: ukstas32 ; op1:x3; op2:x8; dest:x12; op1val:0x000004ffffdfff;  op2val:0xffbfffff00000010
TEST_PKRR_OP(ukstas32, x12, x3, x8, 0x0000000000000000, 0x000004ffffdfff, 0xffbfffff00000010, x3, x9, 224, x7)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_15:
// rs1==x9, rs2==x13, rd==x22, rs2_w1_val == 4292870143, rs2_w0_val == 1431655765, rs1_w1_val == 4294965247
// opcode: ukstas32 ; op1:x9; op2:x13; dest:x22; op1val:0xfffff7ff00000003;  op2val:0xffdfffff55555555
TEST_PKRR_OP(ukstas32, x22, x9, x13, 0x0000000000000000, 0xfffff7ff00000003, 0xffdfffff55555555, x9, x3, 0, x7)

inst_16:
// rs1==x0, rs2==x4, rd==x10, rs2_w1_val == 4293918719, rs1_w0_val == 4294967291, rs2_w0_val == 4294967231, rs1_w1_val == 4294967295
// opcode: ukstas32 ; op1:x0; op2:x4; dest:x10; op1val:0xfffffffffffffffb;  op2val:0xffefffffffffffbf
TEST_PKRR_OP(ukstas32, x10, x0, x4, 0x0000000000000000, 0xfffffffffffffffb, 0xffefffffffffffbf, x0, x3, 16, x7)

inst_17:
// rs1==x2, rs2==x31, rd==x30, rs2_w1_val == 4294443007, rs2_w0_val == 4294967295, rs1_w1_val == 4294966271, rs1_w0_val == 1048576
// opcode: ukstas32 ; op1:x2; op2:x31; dest:x30; op1val:0xfffffbff00100000;  op2val:0xfff7ffffffffffff
TEST_PKRR_OP(ukstas32, x30, x2, x31, 0x0000000000000000, 0xfffffbff00100000, 0xfff7ffffffffffff, x2, x3, 32, x7)

inst_18:
// rs1==x19, rs2==x22, rd==x15, rs2_w1_val == 4294705151, rs1_w1_val == 4292870143, rs2_w0_val == 256
// opcode: ukstas32 ; op1:x19; op2:x22; dest:x15; op1val:0xffdffffffffffffb;  op2val:0xfffbffff00000100
TEST_PKRR_OP(ukstas32, x15, x19, x22, 0x0000000000000000, 0xffdffffffffffffb, 0xfffbffff00000100, x19, x3, 48, x7)

inst_19:
// rs1==x25, rs2==x24, rd==x20, rs2_w1_val == 4294836223, rs1_w1_val == 16384, rs2_w0_val == 8388608, rs1_w0_val == 4294967167
// opcode: ukstas32 ; op1:x25; op2:x24; dest:x20; op1val:0x004000ffffff7f;  op2val:0xfffdffff00800000
TEST_PKRR_OP(ukstas32, x20, x25, x24, 0x0000000000000000, 0x004000ffffff7f, 0xfffdffff00800000, x25, x3, 64, x7)

inst_20:
// rs1==x15, rs2==x29, rd==x19, rs2_w1_val == 4294934527, rs1_w0_val == 4294966783, rs1_w1_val == 4294967287, rs2_w0_val == 2048
// opcode: ukstas32 ; op1:x15; op2:x29; dest:x19; op1val:0xfffffff7fffffdff;  op2val:0xffff7fff00000800
TEST_PKRR_OP(ukstas32, x19, x15, x29, 0x0000000000000000, 0xfffffff7fffffdff, 0xffff7fff00000800, x15, x3, 80, x7)

inst_21:
// rs1==x16, rs2==x0, rd==x8, rs2_w1_val == 4294950911, 
// opcode: ukstas32 ; op1:x16; op2:x0; dest:x8; op1val:0xfffffbff00000040;  op2val:0xffffbfff55555555
TEST_PKRR_OP(ukstas32, x8, x16, x0, 0x0000000000000000, 0xfffffbff00000040, 0xffffbfff55555555, x16, x3, 96, x7)

inst_22:
// rs1==x5, rs2==x17, rd==x29, rs2_w1_val == 4294959103, rs1_w1_val == 2048, rs2_w0_val == 4294443007
// opcode: ukstas32 ; op1:x5; op2:x17; dest:x29; op1val:0x000800ffbfffff;  op2val:0xffffdffffff7ffff
TEST_PKRR_OP(ukstas32, x29, x5, x17, 0x0000000000000000, 0x000800ffbfffff, 0xffffdffffff7ffff, x5, x3, 112, x7)

inst_23:
// rs1==x17, rs2==x21, rd==x18, rs2_w1_val == 4294963199, rs2_w0_val == 4294966271, rs1_w0_val == 2863311530, rs1_w1_val == 4294934527
// opcode: ukstas32 ; op1:x17; op2:x21; dest:x18; op1val:0xffff7fffaaaaaaaa;  op2val:0xffffeffffffffbff
TEST_PKRR_OP(ukstas32, x18, x17, x21, 0x0000000000000000, 0xffff7fffaaaaaaaa, 0xffffeffffffffbff, x17, x3, 128, x7)

inst_24:
// rs1==x4, rs2==x16, rd==x9, rs2_w1_val == 4294965247, rs1_w1_val == 8192
// opcode: ukstas32 ; op1:x4; op2:x16; dest:x9; op1val:0x00200000080000;  op2val:0xfffff7ff00000800
TEST_PKRR_OP(ukstas32, x9, x4, x16, 0x0000000000000000, 0x00200000080000, 0xfffff7ff00000800, x4, x3, 144, x7)

inst_25:
// rs1==x29, rs2==x19, rd==x6, rs2_w1_val == 4294966271, rs1_w1_val == 0, rs1_w0_val == 1, rs2_w0_val == 4294950911
// opcode: ukstas32 ; op1:x29; op2:x19; dest:x6; op1val:0x00000000000001;  op2val:0xfffffbffffffbfff
TEST_PKRR_OP(ukstas32, x6, x29, x19, 0x0000000000000000, 0x00000000000001, 0xfffffbffffffbfff, x29, x3, 160, x7)

inst_26:
// rs1==x21, rs2==x9, rd==x5, rs2_w1_val == 4294966783, rs1_w0_val == 1024
// opcode: ukstas32 ; op1:x21; op2:x9; dest:x5; op1val:0xfffffff700000400;  op2val:0xfffffdff00000012
TEST_PKRR_OP(ukstas32, x5, x21, x9, 0x0000000000000000, 0xfffffff700000400, 0xfffffdff00000012, x21, x3, 176, x7)

inst_27:
// rs1==x8, rs2==x25, rd==x14, rs2_w1_val == 4294967039, rs1_w0_val == 32, rs2_w0_val == 4292870143
// opcode: ukstas32 ; op1:x8; op2:x25; dest:x14; op1val:0xfffeffff00000020;  op2val:0xfffffeffffdfffff
TEST_PKRR_OP(ukstas32, x14, x8, x25, 0x0000000000000000, 0xfffeffff00000020, 0xfffffeffffdfffff, x8, x3, 192, x7)

inst_28:
// rs1==x27, rs2==x26, rd==x2, rs2_w1_val == 4294967167, rs2_w0_val == 4294836223, rs1_w1_val == 4294836223
// opcode: ukstas32 ; op1:x27; op2:x26; dest:x2; op1val:0xfffdfffffffffffb;  op2val:0xffffff7ffffdffff
TEST_PKRR_OP(ukstas32, x2, x27, x26, 0x0000000000000000, 0xfffdfffffffffffb, 0xffffff7ffffdffff, x27, x3, 208, x7)

inst_29:
// rs1==x18, rs2==x1, rd==x28, rs2_w1_val == 4294967231, rs1_w1_val == 3758096383, rs1_w0_val == 4294967294
// opcode: ukstas32 ; op1:x18; op2:x1; dest:x28; op1val:0xdffffffffffffffe;  op2val:0xffffffbf0000000d
TEST_PKRR_OP(ukstas32, x28, x18, x1, 0x0000000000000000, 0xdffffffffffffffe, 0xffffffbf0000000d, x18, x3, 224, x7)

inst_30:
// rs1==x13, rs2==x20, rd==x21, rs2_w1_val == 4294967263, 
// opcode: ukstas32 ; op1:x13; op2:x20; dest:x21; op1val:0xffdfffff00000001;  op2val:0xffffffdf00000100
TEST_PKRR_OP(ukstas32, x21, x13, x20, 0x0000000000000000, 0xffdfffff00000001, 0xffffffdf00000100, x13, x3, 240, x2)

inst_31:
// rs1==x11, rs2_w1_val == 4294967287, rs1_w1_val == 4194304, rs2_w0_val == 1073741824, rs1_w0_val == 3758096383
// opcode: ukstas32 ; op1:x11; op2:x7; dest:x30; op1val:0x400000dfffffff;  op2val:0xfffffff740000000
TEST_PKRR_OP(ukstas32, x30, x11, x7, 0x0000000000000000, 0x400000dfffffff, 0xfffffff740000000, x11, x3, 256, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs2==x11, rs2_w1_val == 4294967291, rs1_w0_val == 131072, rs1_w1_val == 268435456
// opcode: ukstas32 ; op1:x14; op2:x11; dest:x9; op1val:0x1000000000020000;  op2val:0xfffffffb08000000
TEST_PKRR_OP(ukstas32, x9, x14, x11, 0x0000000000000000, 0x1000000000020000, 0xfffffffb08000000, x14, x1, 0, x2)

inst_33:
// rd==x26, rs2_w1_val == 4294967293, rs1_w1_val == 16777216
// opcode: ukstas32 ; op1:x28; op2:x3; dest:x26; op1val:0x1000000ffffff7f;  op2val:0xfffffffd0000000f
TEST_PKRR_OP(ukstas32, x26, x28, x3, 0x0000000000000000, 0x1000000ffffff7f, 0xfffffffd0000000f, x28, x1, 16, x2)

inst_34:
// rs2_w1_val == 4294967294, rs2_w0_val == 32768
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000001;  op2val:0xfffffffe00008000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000001, 0xfffffffe00008000, x30, x1, 32, x2)

inst_35:
// rs2_w1_val == 2147483648, rs2_w0_val == 4227858431, rs1_w0_val == 2097152
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000200000;  op2val:0x80000000fbffffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00800000200000, 0x80000000fbffffff, x30, x1, 48, x2)

inst_36:
// rs2_w1_val == 1073741824, rs2_w0_val == 4261412863, rs1_w1_val == 4294705151
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffffffffffe;  op2val:0x40000000fdffffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfffbfffffffffffe, 0x40000000fdffffff, x30, x1, 64, x2)

inst_37:
// rs2_w1_val == 536870912, rs1_w1_val == 4293918719, rs1_w0_val == 4026531839
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffefffffff;  op2val:0x200000000000000c
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xffefffffefffffff, 0x200000000000000c, x30, x1, 80, x2)

inst_38:
// rs2_w1_val == 268435456, rs1_w1_val == 4026531839
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffffffb;  op2val:0x10000000ffefffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xeffffffffffffffb, 0x10000000ffefffff, x30, x1, 96, x2)

inst_39:
// rs2_w1_val == 134217728, rs1_w0_val == 4294967263, rs2_w0_val == 4160749567
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffffffdf;  op2val:0x8000000f7ffffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffffffdf, 0x8000000f7ffffff, x30, x1, 112, x2)

inst_40:
// rs2_w1_val == 67108864, rs2_w0_val == 4294967293, rs1_w0_val == 3221225471, rs1_w1_val == 2863311530
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaabfffffff;  op2val:0x4000000fffffffd
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaabfffffff, 0x4000000fffffffd, x30, x1, 128, x2)

inst_41:
// rs2_w1_val == 33554432, rs1_w1_val == 2147483647
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff0000000d;  op2val:0x2000000ffffffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x7fffffff0000000d, 0x2000000ffffffff, x30, x1, 144, x2)

inst_42:
// rs2_w1_val == 16777216, rs1_w1_val == 4096, rs1_w0_val == 4294967295
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffffffff;  op2val:0x1000000ffffffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x001000ffffffff, 0x1000000ffffffff, x30, x1, 160, x2)

inst_43:
// rs2_w1_val == 8388608, rs2_w0_val == 4, rs1_w0_val == 262144
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00040000;  op2val:0x80000000000004
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00040000, 0x80000000000004, x30, x1, 176, x2)

inst_44:
// rs2_w1_val == 4194304, rs2_w0_val == 65536, rs1_w0_val == 4294963199
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffefff;  op2val:0x40000000010000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffefff, 0x40000000010000, x30, x1, 192, x2)

inst_45:
// rs2_w1_val == 2097152, rs1_w0_val == 4278190079
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000feffffff;  op2val:0x2000000000000b
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x008000feffffff, 0x2000000000000b, x30, x1, 208, x2)

inst_46:
// rs2_w1_val == 1048576, rs1_w1_val == 32, rs2_w0_val == 2147483648, rs1_w0_val == 16
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000010;  op2val:0x10000080000000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00002000000010, 0x10000080000000, x30, x1, 224, x2)

inst_47:
// rs2_w1_val == 524288, rs1_w1_val == 131072
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000200000;  op2val:0x080000fbffffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x02000000200000, 0x080000fbffffff, x30, x1, 240, x2)

inst_48:
// rs1_w0_val == 65536, rs1_w1_val == 1024, rs2_w0_val == 4194304
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000010000;  op2val:0xfffffeff00400000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00040000010000, 0xfffffeff00400000, x30, x1, 256, x2)

inst_49:
// rs1_w0_val == 32768, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000008000;  op2val:0x55555555fffffffd
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00040000008000, 0x55555555fffffffd, x30, x1, 272, x2)

inst_50:
// rs1_w0_val == 16384, rs2_w1_val == 4
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000004000;  op2val:0x00000400000011
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x40000000004000, 0x00000400000011, x30, x1, 288, x2)

inst_51:
// rs1_w0_val == 8192, rs2_w1_val == 16, rs1_w1_val == 1
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100002000;  op2val:0x000010ffffbfff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00000100002000, 0x000010ffffbfff, x30, x1, 304, x2)

inst_52:
// rs1_w0_val == 4096, rs2_w0_val == 536870912, rs2_w1_val == 1
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000d00001000;  op2val:0x00000120000000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00000d00001000, 0x00000120000000, x30, x1, 320, x2)

inst_53:
// rs1_w0_val == 2048, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000800;  op2val:0x00000a00000012
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000800, 0x00000a00000012, x30, x1, 336, x2)

inst_54:
// rs1_w0_val == 512, rs1_w1_val == 536870912
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000200;  op2val:0xffffffef0000000e
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x2000000000000200, 0xffffffef0000000e, x30, x1, 352, x2)

inst_55:
// rs1_w0_val == 256, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000000100;  op2val:0x80000000ffffffbf
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00400000000100, 0x80000000ffffffbf, x30, x1, 368, x2)

inst_56:
// rs1_w0_val == 128, rs2_w0_val == 262144
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000b00000080;  op2val:0x00000e00040000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00000b00000080, 0x00000e00040000, x30, x1, 384, x2)

inst_57:
// rs1_w0_val == 8, rs2_w1_val == 8
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000008;  op2val:0x000008fdffffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00002000000008, 0x000008fdffffff, x30, x1, 400, x2)

inst_58:
// rs1_w0_val == 2, rs2_w0_val == 131072, rs1_w1_val == 4294967291
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000002;  op2val:0x00000b00020000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000002, 0x00000b00020000, x30, x1, 416, x2)

inst_59:
// rs2_w1_val == 262144, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700002000;  op2val:0x0400000000000b
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfffffff700002000, 0x0400000000000b, x30, x1, 432, x2)

inst_60:
// rs2_w1_val == 131072, rs2_w0_val == 2863311530
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000007;  op2val:0x020000aaaaaaaa
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x100000000000007, 0x020000aaaaaaaa, x30, x1, 448, x2)

inst_61:
// rs2_w1_val == 65536, rs2_w0_val == 2097152, rs1_w0_val == 4294443007
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000013fff7ffff;  op2val:0x01000000200000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x000013fff7ffff, 0x01000000200000, x30, x1, 464, x2)

inst_62:
// rs2_w1_val == 16384, rs2_w0_val == 4294967263
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000011;  op2val:0x004000ffffffdf
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000011, 0x004000ffffffdf, x30, x1, 480, x2)

inst_63:
// rs2_w1_val == 8192, rs1_w0_val == 4261412863
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x002000fdffffff;  op2val:0x00200000000003
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x002000fdffffff, 0x00200000000003, x30, x1, 496, x2)

inst_64:
// rs2_w1_val == 4096, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000b00000400;  op2val:0x001000fffffeff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00000b00000400, 0x001000fffffeff, x30, x1, 512, x2)

inst_65:
// rs2_w1_val == 2048, rs2_w0_val == 4294901759
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004ffffffdf;  op2val:0x000800fffeffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x000004ffffffdf, 0x000800fffeffff, x30, x1, 528, x2)

inst_66:
// rs2_w1_val == 1024, rs1_w0_val == 1431655765
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff55555555;  op2val:0x000400ffffbfff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfffbffff55555555, 0x000400ffffbfff, x30, x1, 544, x2)

inst_67:
// rs2_w1_val == 512, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffdfffffff;  op2val:0x00020000000012
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xffdfffffdfffffff, 0x00020000000012, x30, x1, 560, x2)

inst_68:
// rs2_w1_val == 256, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fff7ffff;  op2val:0x00010000800000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x1000000fff7ffff, 0x00010000800000, x30, x1, 576, x2)

inst_69:
// rs2_w1_val == 128, rs1_w0_val == 4294901759, rs2_w0_val == 3758096383
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffeffff;  op2val:0x000080dfffffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x20000000fffeffff, 0x000080dfffffff, x30, x1, 592, x2)

inst_70:
// rs2_w1_val == 64, rs1_w0_val == 33554432
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000002000000;  op2val:0x00004000000010
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x08000002000000, 0x00004000000010, x30, x1, 608, x2)

inst_71:
// rs2_w1_val == 32, rs2_w0_val == 4096, rs1_w0_val == 4294967279
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffffef;  op2val:0x00002000001000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffffef, 0x00002000001000, x30, x1, 624, x2)

inst_72:
// rs2_w1_val == 2, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffff7;  op2val:0x00000200000004
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x080000fffffff7, 0x00000200000004, x30, x1, 640, x2)

inst_73:
// rs2_w1_val == 4294967295, rs1_w1_val == 262144, rs2_w0_val == 8192
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000ffffff7f;  op2val:0xffffffff00002000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x040000ffffff7f, 0xffffffff00002000, x30, x1, 656, x2)

inst_74:
// rs2_w1_val == 0, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000040;  op2val:0x00000000000040
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00000000000040, 0x00000000000040, x30, x1, 672, x2)

inst_75:
// rs2_w0_val == 2147483647, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffffb;  op2val:0xffbfffff7fffffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x080000fffffffb, 0xffbfffff7fffffff, x30, x1, 688, x2)

inst_76:
// rs2_w0_val == 3221225471, rs1_w0_val == 2147483647
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x0010007fffffff;  op2val:0xbfffffffbfffffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x0010007fffffff, 0xbfffffffbfffffff, x30, x1, 704, x2)

inst_77:
// rs2_w0_val == 4026531839, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000004;  op2val:0xdfffffffefffffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000004, 0xdfffffffefffffff, x30, x1, 720, x2)

inst_78:
// rs2_w0_val == 4278190079, rs1_w1_val == 4286578687
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffefffffff;  op2val:0xffffffeffeffffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xff7fffffefffffff, 0xffffffeffeffffff, x30, x1, 736, x2)

inst_79:
// rs2_w0_val == 4286578687, rs1_w1_val == 3221225471
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffdffffff;  op2val:0x00000cff7fffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xbffffffffdffffff, 0x00000cff7fffff, x30, x1, 752, x2)

inst_80:
// rs2_w0_val == 4290772991, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000feffffff;  op2val:0xfff7ffffffbfffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x008000feffffff, 0xfff7ffffffbfffff, x30, x1, 768, x2)

inst_81:
// rs2_w0_val == 4294934527, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffdfff;  op2val:0x1000000ffff7fff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffdfff, 0x1000000ffff7fff, x30, x1, 784, x2)

inst_82:
// rs2_w0_val == 1024, rs1_w1_val == 4294966783
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00040000;  op2val:0x00020000000400
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00040000, 0x00020000000400, x30, x1, 800, x2)

inst_83:
// rs2_w0_val == 512, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000011fdffffff;  op2val:0xfffffffd00000200
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x000011fdffffff, 0xfffffffd00000200, x30, x1, 816, x2)

inst_84:
// rs2_w0_val == 128, rs1_w0_val == 2147483648
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000a80000000;  op2val:0x100000000000080
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00000a80000000, 0x100000000000080, x30, x1, 832, x2)

inst_85:
// rs2_w0_val == 32, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000006;  op2val:0x00100000000020
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000006, 0x00100000000020, x30, x1, 848, x2)

inst_86:
// rs2_w0_val == 8, rs1_w0_val == 1073741824
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000740000000;  op2val:0x00800000000008
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00000740000000, 0x00800000000008, x30, x1, 864, x2)

inst_87:
// rs2_w0_val == 2, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700020000;  op2val:0xff7fffff00000002
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00000700020000, 0xff7fffff00000002, x30, x1, 880, x2)

inst_88:
// rs2_w0_val == 1, rs1_w0_val == 4227858431
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400fbffffff;  op2val:0x00000700000001
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x000400fbffffff, 0x00000700000001, x30, x1, 896, x2)

inst_89:
// rs1_w1_val == 1431655765, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555540000000;  op2val:0xeffffffffffbffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x5555555540000000, 0xeffffffffffbffff, x30, x1, 912, x2)

inst_90:
// rs1_w1_val == 4227858431, rs1_w0_val == 4294950911
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffbfff;  op2val:0x000012bfffffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfbffffffffffbfff, 0x000012bfffffff, x30, x1, 928, x2)

inst_91:
// rs1_w1_val == 4278190079, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000020;  op2val:0xffffefff00020000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000020, 0xffffefff00020000, x30, x1, 944, x2)

inst_92:
// rs1_w1_val == 4294950911, rs2_w0_val == 4294967167
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffffefff;  op2val:0xefffffffffffff7f
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xffffbfffffffefff, 0xefffffffffffff7f, x30, x1, 960, x2)

inst_93:
// rs1_w1_val == 4294963199, rs2_w0_val == 16777216
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffffffd;  op2val:0x7fffffff01000000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xffffeffffffffffd, 0x7fffffff01000000, x30, x1, 976, x2)

inst_94:
// rs1_w1_val == 4294967039, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000008;  op2val:0x00004000001000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000008, 0x00004000001000, x30, x1, 992, x2)

inst_95:
// rs1_w1_val == 4294967231, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00002000;  op2val:0x80000000ffffffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00002000, 0x80000000ffffffff, x30, x1, 1008, x2)

inst_96:
// rs1_w1_val == 4294967263, rs1_w0_val == 4294967039
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffeff;  op2val:0x002000efffffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffeff, 0x002000efffffff, x30, x1, 1024, x2)

inst_97:
// rs1_w1_val == 4294967279, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000007;  op2val:0x8000000000000800
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xffffffef00000007, 0x8000000000000800, x30, x1, 1040, x2)

inst_98:
// rs1_w1_val == 4294967293, rs1_w0_val == 4293918719
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffefffff;  op2val:0xfffff7ff00000005
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffdffefffff, 0xfffff7ff00000005, x30, x1, 1056, x2)

inst_99:
// rs1_w1_val == 4294967294, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000080;  op2val:0x000000fffbffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000080, 0x000000fffbffff, x30, x1, 1072, x2)

inst_100:
// rs1_w1_val == 2147483648, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffefffff;  op2val:0xfffbffff00000005
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x80000000ffefffff, 0xfffbffff00000005, x30, x1, 1088, x2)

inst_101:
// rs1_w1_val == 1073741824, rs1_w0_val == 8388608
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000800000;  op2val:0x01000000000020
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x4000000000800000, 0x01000000000020, x30, x1, 1104, x2)

inst_102:
// rs1_w1_val == 134217728, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000200;  op2val:0x2000000ffffffef
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x800000000000200, 0x2000000ffffffef, x30, x1, 1120, x2)

inst_103:
// rs1_w1_val == 67108864, rs2_w0_val == 268435456, rs1_w0_val == 268435456
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000010000000;  op2val:0x00002010000000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x400000010000000, 0x00002010000000, x30, x1, 1136, x2)

inst_104:
// rs1_w1_val == 512, rs1_w0_val == 4292870143
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200ffdfffff;  op2val:0xaaaaaaaa00000002
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x000200ffdfffff, 0xaaaaaaaa00000002, x30, x1, 1152, x2)

inst_105:
// rs1_w1_val == 256, rs1_w0_val == 134217728
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010008000000;  op2val:0x000012fffff7ff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00010008000000, 0x000012fffff7ff, x30, x1, 1168, x2)

inst_106:
// rs1_w1_val == 64, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffffffdf;  op2val:0xffffefffffbfffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x000040ffffffdf, 0xffffefffffbfffff, x30, x1, 1184, x2)

inst_107:
// rs1_w1_val == 16, rs1_w0_val == 4194304
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000400000;  op2val:0xffff7fff04000000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00001000400000, 0xffff7fff04000000, x30, x1, 1200, x2)

inst_108:
// rs1_w1_val == 8, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000080;  op2val:0x00001200000006
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00000800000080, 0x00001200000006, x30, x1, 1216, x2)

inst_109:
// rs1_w1_val == 2, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000208000000;  op2val:0x080000fffffffb
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00000208000000, 0x080000fffffffb, x30, x1, 1232, x2)

inst_110:
// rs1_w0_val == 4160749567, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffff7ffffff;  op2val:0xfffffffffffffffd
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xffffbffff7ffffff, 0xfffffffffffffffd, x30, x1, 1248, x2)

inst_111:
// rs1_w1_val == 8388608, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000080000000;  op2val:0xfffefffffffbffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x80000080000000, 0xfffefffffffbffff, x30, x1, 1264, x2)

inst_112:
// rs1_w0_val == 4286578687, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffff7fffff;  op2val:0xfffffffb00000009
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x7fffffffff7fffff, 0xfffffffb00000009, x30, x1, 1280, x2)

inst_113:
// rs2_w0_val == 4294963199, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000a00000200;  op2val:0x000005ffffefff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00000a00000200, 0x000005ffffefff, x30, x1, 1296, x2)

inst_114:
// rs1_w0_val == 4294705151, rs1_w1_val == 1048576
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000fffbffff;  op2val:0x00000d00000011
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x100000fffbffff, 0x00000d00000011, x30, x1, 1312, x2)

inst_115:
// rs2_w0_val == 4294966783, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000002;  op2val:0x4000000fffffdff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x200000000000002, 0x4000000fffffdff, x30, x1, 1328, x2)

inst_116:
// rs1_w0_val == 4294836223, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffdffff;  op2val:0x000005ffefffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xffdffffffffdffff, 0x000005ffefffff, x30, x1, 1344, x2)

inst_117:
// rs1_w0_val == 4294965247, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffff7ff;  op2val:0x00001100002000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x000400fffff7ff, 0x00001100002000, x30, x1, 1360, x2)

inst_118:
// rs1_w0_val == 4294966271, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffffbff;  op2val:0xaaaaaaaa04000000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x000002fffffbff, 0xaaaaaaaa04000000, x30, x1, 1376, x2)

inst_119:
// rs2_w0_val == 4294967294, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006fffffff7;  op2val:0xfffdfffffffffffe
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x000006fffffff7, 0xfffdfffffffffffe, x30, x1, 1392, x2)

inst_120:
// rs1_w0_val == 4294967231, rs2_w0_val == 524288
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000012ffffffbf;  op2val:0xfdffffff00080000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x000012ffffffbf, 0xfdffffff00080000, x30, x1, 1408, x2)

inst_121:
// rs2_w0_val == 33554432, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffffbff;  op2val:0xefffffff02000000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffffbff, 0xefffffff02000000, x30, x1, 1424, x2)

inst_122:
// rs1_w0_val == 536870912, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff20000000;  op2val:0x00800055555555
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xffbfffff20000000, 0x00800055555555, x30, x1, 1440, x2)

inst_123:
// rs2_w0_val == 1048576, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000006;  op2val:0x00004000100000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x04000000000006, 0x00004000100000, x30, x1, 1456, x2)

inst_124:
// rs1_w0_val == 67108864, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000004000000;  op2val:0xfffffeff00000020
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x800000004000000, 0xfffffeff00000020, x30, x1, 1472, x2)

inst_125:
// rs1_w0_val == 16777216, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400001000000;  op2val:0x00100000000007
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x00400001000000, 0x00100000000007, x30, x1, 1488, x2)

inst_126:
// rs2_w0_val == 16384, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000008000000;  op2val:0x00000f00004000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x08000008000000, 0x00000f00004000, x30, x1, 1504, x2)

inst_127:
// rs1_w1_val == 65536, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000fdffffff;  op2val:0x000009fffff7ff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x010000fdffffff, 0x000009fffff7ff, x30, x1, 1520, x2)

inst_128:
// rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 4294901759, rs2_w0_val == 0, rs2_w1_val == 4294901759, rs1_w0_val == 524288
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00080000;  op2val:0xfffeffff00000000
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00080000, 0xfffeffff00000000, x30, x1, 1536, x2)

inst_129:
// rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 3758096383, rs1_w1_val == 4160749567, rs2_w0_val == 4293918719
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff0000000d;  op2val:0xdfffffffffefffff
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff0000000d, 0xdfffffffffefffff, x30, x1, 1552, x2)

inst_130:
// rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 128, rs1_w0_val == 4294967287, rs2_w0_val == 4294967287, rs2_w1_val == 32768
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080fffffff7;  op2val:0x008000fffffff7
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0x000080fffffff7, 0x008000fffffff7, x30, x1, 1568, x2)

inst_131:
// rs2_w1_val == 4293918719, rs1_w0_val == 4294967291, rs2_w0_val == 4294967231, rs1_w1_val == 4294967295
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffb;  op2val:0xffefffffffffffbf
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffffb, 0xffefffffffffffbf, x30, x1, 1584, x2)

inst_132:
// rs2_w1_val == 4294950911, 
// opcode: ukstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000040;  op2val:0xffffbfff55555555
TEST_PKRR_OP(ukstas32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000040, 0xffffbfff55555555, x30, x1, 1600, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 202*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
