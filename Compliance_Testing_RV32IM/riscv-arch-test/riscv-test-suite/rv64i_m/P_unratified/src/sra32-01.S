
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sra32 instruction of the RISC-V RV64PZicsr extension for the sra32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sra32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 == rd != rs2, rs1==x1, rs2==x15, rd==x1, rs2_val == 21, rs1_w1_val == -268435457, rs1_w0_val == -1431655766
// opcode: sra32 ; op1:x1; op2:x15; dest:x1; op1val:0xefffffffaaaaaaaa;  op2val:0x15
TEST_RR_OP(sra32, x1, x1, x15, 0x0000000000000000, 0xefffffffaaaaaaaa, 0x15, x4, 0, x10)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x24, rs2==x20, rd==x25, rs2_val == 15, rs1_w0_val == -65537, rs1_w1_val == -134217729
// opcode: sra32 ; op1:x24; op2:x20; dest:x25; op1val:0xf7fffffffffeffff;  op2val:0xf
TEST_RR_OP(sra32, x25, x24, x20, 0x0000000000000000, 0xf7fffffffffeffff, 0xf, x4, 8, x10)

inst_2:
// rs1 == rs2 != rd, rs1==x3, rs2==x3, rd==x15, rs2_val == 23, rs1_w0_val == -32769, rs1_w1_val == -513
// opcode: sra32 ; op1:x3; op2:x3; dest:x15; op1val:0xfffffdffffff7fff;  op2val:0x17
TEST_RR_OP(sra32, x15, x3, x3, 0x0000000000000000, 0xfffffdffffff7fff, 0x17, x4, 16, x10)

inst_3:
// rs1 == rs2 == rd, rs1==x9, rs2==x9, rd==x9, rs2_val == 27, rs1_w0_val == -2, rs1_w1_val == 262144
// opcode: sra32 ; op1:x9; op2:x9; dest:x9; op1val:0x040000fffffffe;  op2val:0x1b
TEST_RR_OP(sra32, x9, x9, x9, 0x0000000000000000, 0x040000fffffffe, 0x1b, x4, 24, x10)

inst_4:
// rs2 == rd != rs1, rs1==x30, rs2==x12, rd==x12, rs2_val == 29, rs1_w1_val == 64
// opcode: sra32 ; op1:x30; op2:x12; dest:x12; op1val:0x00004000000006;  op2val:0x1d
TEST_RR_OP(sra32, x12, x30, x12, 0x0000000000000000, 0x00004000000006, 0x1d, x4, 32, x10)

inst_5:
// rs1==x6, rs2==x22, rd==x8, rs2_val == 30, rs1_w0_val == 4096, rs1_w1_val == 32
// opcode: sra32 ; op1:x6; op2:x22; dest:x8; op1val:0x00002000001000;  op2val:0x1e
TEST_RR_OP(sra32, x8, x6, x22, 0x0000000000000000, 0x00002000001000, 0x1e, x4, 40, x10)

inst_6:
// rs1==x13, rs2==x19, rd==x11, rs2_val == 16, rs1_w1_val == -262145, rs1_w0_val == 2
// opcode: sra32 ; op1:x13; op2:x19; dest:x11; op1val:0xfffbffff00000002;  op2val:0x10
TEST_RR_OP(sra32, x11, x13, x19, 0x0000000000000000, 0xfffbffff00000002, 0x10, x4, 48, x10)

inst_7:
// rs1==x5, rs2==x17, rd==x7, rs2_val == 8, rs1_w1_val == 65536, rs1_w0_val == 2048
// opcode: sra32 ; op1:x5; op2:x17; dest:x7; op1val:0x01000000000800;  op2val:0x8
TEST_RR_OP(sra32, x7, x5, x17, 0x0000000000000000, 0x01000000000800, 0x8, x4, 56, x10)

inst_8:
// rs1==x21, rs2==x5, rd==x20, rs2_val == 4, rs1_w0_val == -134217729, rs1_w1_val == 2097152
// opcode: sra32 ; op1:x21; op2:x5; dest:x20; op1val:0x200000f7ffffff;  op2val:0x4
TEST_RR_OP(sra32, x20, x21, x5, 0x0000000000000000, 0x200000f7ffffff, 0x4, x4, 64, x10)

inst_9:
// rs1==x23, rs2==x24, rd==x6, rs2_val == 2, rs1_w1_val == -129, rs1_w0_val == 67108864
// opcode: sra32 ; op1:x23; op2:x24; dest:x6; op1val:0xffffff7f04000000;  op2val:0x2
TEST_RR_OP(sra32, x6, x23, x24, 0x0000000000000000, 0xffffff7f04000000, 0x2, x4, 72, x10)

inst_10:
// rs1==x12, rs2==x25, rd==x18, rs2_val == 1, rs1_w1_val == -2147483648
// opcode: sra32 ; op1:x12; op2:x25; dest:x18; op1val:0x80000000aaaaaaaa;  op2val:0x1
TEST_RR_OP(sra32, x18, x12, x25, 0x0000000000000000, 0x80000000aaaaaaaa, 0x1, x4, 80, x10)

inst_11:
// rs1==x2, rs2==x16, rd==x30, rs1_w1_val == -1431655766, rs1_w0_val == 131072
// opcode: sra32 ; op1:x2; op2:x16; dest:x30; op1val:0xaaaaaaaa00020000;  op2val:0xe
TEST_RR_OP(sra32, x30, x2, x16, 0x0000000000000000, 0xaaaaaaaa00020000, 0xe, x4, 88, x10)

inst_12:
// rs1==x15, rs2==x14, rd==x21, rs1_w1_val == 1431655765, rs1_w0_val == -65
// opcode: sra32 ; op1:x15; op2:x14; dest:x21; op1val:0x55555555ffffffbf;  op2val:0x15
TEST_RR_OP(sra32, x21, x15, x14, 0x0000000000000000, 0x55555555ffffffbf, 0x15, x4, 96, x10)

inst_13:
// rs1==x8, rs2==x31, rd==x29, rs1_w1_val == 2147483647, rs1_w0_val == 32
// opcode: sra32 ; op1:x8; op2:x31; dest:x29; op1val:0x7fffffff00000020;  op2val:0x2
TEST_RR_OP(sra32, x29, x8, x31, 0x0000000000000000, 0x7fffffff00000020, 0x2, x4, 104, x10)

inst_14:
// rs1==x29, rs2==x30, rd==x3, rs1_w1_val == -1073741825, rs1_w0_val == -524289
// opcode: sra32 ; op1:x29; op2:x30; dest:x3; op1val:0xbffffffffff7ffff;  op2val:0x11
TEST_RR_OP(sra32, x3, x29, x30, 0x0000000000000000, 0xbffffffffff7ffff, 0x11, x4, 112, x9)

inst_15:
// rs1==x22, rs2==x13, rd==x27, rs1_w1_val == -536870913, rs1_w0_val == -16777217
// opcode: sra32 ; op1:x22; op2:x13; dest:x27; op1val:0xdffffffffeffffff;  op2val:0x10
TEST_RR_OP(sra32, x27, x22, x13, 0x0000000000000000, 0xdffffffffeffffff, 0x10, x4, 120, x9)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_16:
// rs1==x10, rs2==x4, rd==x16, rs1_w1_val == -67108865, 
// opcode: sra32 ; op1:x10; op2:x4; dest:x16; op1val:0xfbfffffffff7ffff;  op2val:0x4
TEST_RR_OP(sra32, x16, x10, x4, 0x0000000000000000, 0xfbfffffffff7ffff, 0x4, x3, 0, x9)

inst_17:
// rs1==x31, rs2==x6, rd==x28, rs1_w1_val == -33554433, rs1_w0_val == 2147483647
// opcode: sra32 ; op1:x31; op2:x6; dest:x28; op1val:0xfdffffff7fffffff;  op2val:0x13
TEST_RR_OP(sra32, x28, x31, x6, 0x0000000000000000, 0xfdffffff7fffffff, 0x13, x3, 8, x9)

inst_18:
// rs1==x0, rs2==x7, rd==x31, rs1_w1_val == -16777217, rs1_w0_val == -257
// opcode: sra32 ; op1:x0; op2:x7; dest:x31; op1val:0xfefffffffffffeff;  op2val:0x1b
TEST_RR_OP(sra32, x31, x0, x7, 0x0000000000000000, 0xfefffffffffffeff, 0x1b, x3, 16, x9)

inst_19:
// rs1==x18, rs2==x0, rd==x4, rs1_w1_val == -8388609, rs1_w0_val == -67108865
// opcode: sra32 ; op1:x18; op2:x0; dest:x4; op1val:0xff7ffffffbffffff;  op2val:0x0
TEST_RR_OP(sra32, x4, x18, x0, 0x0000000000000000, 0xff7ffffffbffffff, 0x0, x3, 24, x9)

inst_20:
// rs1==x26, rs2==x10, rd==x19, rs1_w1_val == -4194305, 
// opcode: sra32 ; op1:x26; op2:x10; dest:x19; op1val:0xffbfffff00000005;  op2val:0x12
TEST_RR_OP(sra32, x19, x26, x10, 0x0000000000000000, 0xffbfffff00000005, 0x12, x3, 32, x9)

inst_21:
// rs1==x7, rs2==x2, rd==x0, rs1_w1_val == -2097153, 
// opcode: sra32 ; op1:x7; op2:x2; dest:x0; op1val:0xffdfffff3fffffff;  op2val:0x2
TEST_RR_OP(sra32, x0, x7, x2, 0x0000000000000000, 0xffdfffff3fffffff, 0x2, x3, 40, x9)

inst_22:
// rs1==x27, rs2==x21, rd==x5, rs1_w1_val == -1048577, 
// opcode: sra32 ; op1:x27; op2:x21; dest:x5; op1val:0xffeffffffbffffff;  op2val:0x11
TEST_RR_OP(sra32, x5, x27, x21, 0x0000000000000000, 0xffeffffffbffffff, 0x11, x3, 48, x9)

inst_23:
// rs1==x16, rs2==x11, rd==x2, rs1_w1_val == -524289, rs1_w0_val == 536870912
// opcode: sra32 ; op1:x16; op2:x11; dest:x2; op1val:0xfff7ffff20000000;  op2val:0x5
TEST_RR_OP(sra32, x2, x16, x11, 0x0000000000000000, 0xfff7ffff20000000, 0x5, x3, 56, x9)

inst_24:
// rs1==x14, rs2==x26, rd==x10, rs1_w1_val == -131073, rs1_w0_val == 262144
// opcode: sra32 ; op1:x14; op2:x26; dest:x10; op1val:0xfffdffff00040000;  op2val:0x1d
TEST_RR_OP(sra32, x10, x14, x26, 0x0000000000000000, 0xfffdffff00040000, 0x1d, x3, 64, x9)

inst_25:
// rs1==x28, rs2==x23, rd==x22, rs1_w1_val == -65537, rs1_w0_val == 64
// opcode: sra32 ; op1:x28; op2:x23; dest:x22; op1val:0xfffeffff00000040;  op2val:0xe
TEST_RR_OP(sra32, x22, x28, x23, 0x0000000000000000, 0xfffeffff00000040, 0xe, x3, 72, x9)

inst_26:
// rs1==x19, rs2==x29, rd==x26, rs1_w1_val == -32769, 
// opcode: sra32 ; op1:x19; op2:x29; dest:x26; op1val:0xffff7fffffff7fff;  op2val:0x4
TEST_RR_OP(sra32, x26, x19, x29, 0x0000000000000000, 0xffff7fffffff7fff, 0x4, x3, 80, x9)

inst_27:
// rs1==x25, rs2==x1, rd==x24, rs1_w1_val == -16385, rs1_w0_val == 8
// opcode: sra32 ; op1:x25; op2:x1; dest:x24; op1val:0xffffbfff00000008;  op2val:0x2
TEST_RR_OP(sra32, x24, x25, x1, 0x0000000000000000, 0xffffbfff00000008, 0x2, x3, 88, x9)

inst_28:
// rs1==x11, rs2==x18, rd==x23, rs1_w1_val == -8193, 
// opcode: sra32 ; op1:x11; op2:x18; dest:x23; op1val:0xffffdffffff7ffff;  op2val:0x13
TEST_RR_OP(sra32, x23, x11, x18, 0x0000000000000000, 0xffffdffffff7ffff, 0x13, x3, 96, x9)

inst_29:
// rs1==x17, rs2==x27, rd==x13, rs1_w1_val == -4097, rs1_w0_val == -2049
// opcode: sra32 ; op1:x17; op2:x27; dest:x13; op1val:0xffffeffffffff7ff;  op2val:0x0
TEST_RR_OP(sra32, x13, x17, x27, 0x0000000000000000, 0xffffeffffffff7ff, 0x0, x3, 104, x9)

inst_30:
// rs1==x20, rs2==x8, rd==x14, rs1_w1_val == -2049, rs1_w0_val == -268435457
// opcode: sra32 ; op1:x20; op2:x8; dest:x14; op1val:0xfffff7ffefffffff;  op2val:0x2
TEST_RR_OP(sra32, x14, x20, x8, 0x0000000000000000, 0xfffff7ffefffffff, 0x2, x3, 112, x9)

inst_31:
// rs1==x4, rs2==x28, rd==x17, rs1_w1_val == -1025, 
// opcode: sra32 ; op1:x4; op2:x28; dest:x17; op1val:0xfffffbfffffffff8;  op2val:0x1e
TEST_RR_OP(sra32, x17, x4, x28, 0x0000000000000000, 0xfffffbfffffffff8, 0x1e, x3, 120, x2)

inst_32:
// rs1_w1_val == -257, rs1_w0_val == 524288
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00080000;  op2val:0x9
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00080000, 0x9, x3, 128, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs1_w1_val == -65, rs1_w0_val == 0
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000000;  op2val:0x1
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000000, 0x1, x1, 0, x2)

inst_34:
// rs1_w1_val == -33, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffeff;  op2val:0x12
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffeff, 0x12, x1, 8, x2)

inst_35:
// rs1_w1_val == -17, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000009;  op2val:0x12
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xffffffef00000009, 0x12, x1, 16, x2)

inst_36:
// rs1_w1_val == -9, rs1_w0_val == 1
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000001;  op2val:0x12
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xfffffff700000001, 0x12, x1, 24, x2)

inst_37:
// rs1_w1_val == -5, rs1_w0_val == -1
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffffff;  op2val:0x1d
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffffff, 0x1d, x1, 32, x2)

inst_38:
// rs1_w1_val == -3, rs1_w0_val == 16777216
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd01000000;  op2val:0x1f
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xfffffffd01000000, 0x1f, x1, 40, x2)

inst_39:
// rs1_w1_val == -2, rs1_w0_val == -2097153
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffdfffff;  op2val:0x0
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xfffffffeffdfffff, 0x0, x1, 48, x2)

inst_40:
// rs1_w1_val == 1073741824, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffffff6;  op2val:0x11
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x40000000fffffff6, 0x11, x1, 56, x2)

inst_41:
// rs1_w1_val == 536870912, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffffffc;  op2val:0x8
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x20000000fffffffc, 0x8, x1, 64, x2)

inst_42:
// rs1_w1_val == 268435456, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000000;  op2val:0x7
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x1000000000000000, 0x7, x1, 72, x2)

inst_43:
// rs1_w1_val == 134217728, rs2_val == 10, rs1_w0_val == -1025
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffffbff;  op2val:0xa
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x8000000fffffbff, 0xa, x1, 80, x2)

inst_44:
// rs1_w1_val == 67108864, rs1_w0_val == -4194305
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000ffbfffff;  op2val:0x2
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x4000000ffbfffff, 0x2, x1, 88, x2)

inst_45:
// rs1_w0_val == 65536, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00010000;  op2val:0x1e
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00010000, 0x1e, x1, 96, x2)

inst_46:
// rs1_w0_val == 32768, rs1_w1_val == 4
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400008000;  op2val:0x5
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x00000400008000, 0x5, x1, 104, x2)

inst_47:
// rs1_w0_val == 16384, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00004000;  op2val:0x10
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00004000, 0x10, x1, 112, x2)

inst_48:
// rs1_w0_val == 8192, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00002000;  op2val:0x1e
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00002000, 0x1e, x1, 120, x2)

inst_49:
// rs1_w0_val == 1024, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000400;  op2val:0x17
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000400, 0x17, x1, 128, x2)

inst_50:
// rs1_w0_val == 512, rs1_w1_val == 1024
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000200;  op2val:0x15
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x00040000000200, 0x15, x1, 136, x2)

inst_51:
// rs1_w0_val == 256, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000100;  op2val:0x6
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000100, 0x6, x1, 144, x2)

inst_52:
// rs1_w0_val == 128, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000080;  op2val:0x3
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000080, 0x3, x1, 152, x2)

inst_53:
// rs1_w0_val == 16, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000010;  op2val:0xe
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x00040000000010, 0xe, x1, 160, x2)

inst_54:
// rs1_w0_val == 4, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000004;  op2val:0x4
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x00000600000004, 0x4, x1, 168, x2)

inst_55:
// rs1_w1_val == 33554432, rs1_w0_val == -513
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffffdff;  op2val:0x1e
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x2000000fffffdff, 0x1e, x1, 176, x2)

inst_56:
// rs1_w1_val == 16777216, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000200;  op2val:0x12
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x100000000000200, 0x12, x1, 184, x2)

inst_57:
// rs1_w1_val == 8388608, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffff6;  op2val:0x1b
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x800000fffffff6, 0x1b, x1, 192, x2)

inst_58:
// rs1_w1_val == 4194304, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000ffffffbf;  op2val:0x8
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x400000ffffffbf, 0x8, x1, 200, x2)

inst_59:
// rs1_w1_val == 1048576, rs1_w0_val == -131073
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000fffdffff;  op2val:0x15
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x100000fffdffff, 0x15, x1, 208, x2)

inst_60:
// rs1_w1_val == 524288, rs1_w0_val == -33554433
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fdffffff;  op2val:0x17
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x080000fdffffff, 0x17, x1, 216, x2)

inst_61:
// rs1_w1_val == 131072, rs1_w0_val == -4097
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000ffffefff;  op2val:0x8
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x020000ffffefff, 0x8, x1, 224, x2)

inst_62:
// rs1_w1_val == 32768, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffffffe;  op2val:0x11
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x008000fffffffe, 0x11, x1, 232, x2)

inst_63:
// rs1_w1_val == 16384, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x0040003fffffff;  op2val:0x0
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x0040003fffffff, 0x0, x1, 240, x2)

inst_64:
// rs1_w1_val == 8192, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000008000;  op2val:0x4
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x00200000008000, 0x4, x1, 248, x2)

inst_65:
// rs1_w1_val == 4096, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000800;  op2val:0x15
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x00100000000800, 0x15, x1, 256, x2)

inst_66:
// rs1_w1_val == 2048, rs1_w0_val == -1048577
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffefffff;  op2val:0x2
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x000800ffefffff, 0x2, x1, 264, x2)

inst_67:
// rs1_w1_val == 512, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200ffffffff;  op2val:0x17
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x000200ffffffff, 0x17, x1, 272, x2)

inst_68:
// rs1_w1_val == 256, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100fdffffff;  op2val:0x4
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x000100fdffffff, 0x4, x1, 280, x2)

inst_69:
// rs1_w1_val == 128, rs1_w0_val == -129
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080ffffff7f;  op2val:0x2
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x000080ffffff7f, 0x2, x1, 288, x2)

inst_70:
// rs1_w1_val == 16, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001001000000;  op2val:0x2
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x00001001000000, 0x2, x1, 296, x2)

inst_71:
// rs1_w1_val == 8, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000200;  op2val:0x6
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x00000800000200, 0x6, x1, 304, x2)

inst_72:
// rs1_w1_val == 2, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002ffbfffff;  op2val:0x7
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x000002ffbfffff, 0x7, x1, 312, x2)

inst_73:
// rs1_w1_val == 1, rs1_w0_val == -3
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffffffd;  op2val:0x5
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x000001fffffffd, 0x5, x1, 320, x2)

inst_74:
// rs1_w1_val == 0, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000feffffff;  op2val:0x17
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x000000feffffff, 0x17, x1, 328, x2)

inst_75:
// rs1_w1_val == -1, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000008;  op2val:0xf
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xffffffff00000008, 0xf, x1, 336, x2)

inst_76:
// rs1_w0_val == 1431655765, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff55555555;  op2val:0x0
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xdfffffff55555555, 0x0, x1, 344, x2)

inst_77:
// rs1_w0_val == -1073741825, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffbfffffff;  op2val:0x6
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x7fffffffbfffffff, 0x6, x1, 352, x2)

inst_78:
// rs1_w0_val == -536870913, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000dfffffff;  op2val:0x9
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x001000dfffffff, 0x9, x1, 360, x2)

inst_79:
// rs1_w0_val == -8388609, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000ff7fffff;  op2val:0x5
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x000000ff7fffff, 0x5, x1, 368, x2)

inst_80:
// rs1_w0_val == -262145, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffbffff;  op2val:0x6
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x000002fffbffff, 0x6, x1, 376, x2)

inst_81:
// rs1_w0_val == -16385, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffbfff;  op2val:0x13
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x80000000ffffbfff, 0x13, x1, 384, x2)

inst_82:
// rs1_w0_val == -8193, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffdfff;  op2val:0x6
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffdfff, 0x6, x1, 392, x2)

inst_83:
// rs1_w0_val == -33, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffffdf;  op2val:0x4
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xfbffffffffffffdf, 0x4, x1, 400, x2)

inst_84:
// rs1_w0_val == -17, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffffffef;  op2val:0xa
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xff7fffffffffffef, 0xa, x1, 408, x2)

inst_85:
// rs1_w0_val == -9, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fffffff7;  op2val:0x3
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x55555555fffffff7, 0x3, x1, 416, x2)

inst_86:
// rs1_w0_val == -5, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcfffffffb;  op2val:0x6
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xfffffffcfffffffb, 0x6, x1, 424, x2)

inst_87:
// rs1_w0_val == -2147483648, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb80000000;  op2val:0x1b
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xfffffffb80000000, 0x1b, x1, 432, x2)

inst_88:
// rs1_w0_val == 1073741824, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000740000000;  op2val:0x15
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x00000740000000, 0x15, x1, 440, x2)

inst_89:
// rs1_w0_val == 268435456, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010010000000;  op2val:0x11
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x00010010000000, 0x11, x1, 448, x2)

inst_90:
// rs1_w0_val == 134217728, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000008000000;  op2val:0x1b
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x2000000008000000, 0x1b, x1, 456, x2)

inst_91:
// rs1_w0_val == 33554432, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff02000000;  op2val:0x5
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xfbffffff02000000, 0x5, x1, 464, x2)

inst_92:
// rs1_w0_val == 8388608, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00800000;  op2val:0x5
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00800000, 0x5, x1, 472, x2)

inst_93:
// rs1_w0_val == 4194304, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00400000;  op2val:0xc
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00400000, 0xc, x1, 480, x2)

inst_94:
// rs1_w0_val == 2097152, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600200000;  op2val:0x1
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xfffffff600200000, 0x1, x1, 488, x2)

inst_95:
// rs1_w0_val == 1048576, 
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00100000;  op2val:0xe
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00100000, 0xe, x1, 496, x2)

inst_96:
// rs2_val == 23, rs1_w0_val == -32769, rs1_w1_val == -513
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffff7fff;  op2val:0x17
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0xfffffdffffff7fff, 0x17, x1, 504, x2)

inst_97:
// rs2_val == 27, rs1_w0_val == -2, rs1_w1_val == 262144
// opcode: sra32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffffffe;  op2val:0x1b
TEST_RR_OP(sra32, x31, x30, x29, 0x0000000000000000, 0x040000fffffffe, 0x1b, x1, 512, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 65*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
