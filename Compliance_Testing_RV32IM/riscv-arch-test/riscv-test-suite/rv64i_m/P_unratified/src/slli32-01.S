
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the slli32 instruction of the RISC-V RV64PZicsr extension for the slli32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",slli32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 == rd, rs1==x8, rd==x8, rs1_w0_val == 0, imm_val == 22, rs1_w1_val == 4160749567
// opcode: slli32 ; op1:x8; dest:x8; op1val:0xf7ffffff00000000;  immval:0x16
TEST_IMM_OP( slli32, x8, x8, 0x0000000000000000, 0xf7ffffff00000000, 0x16, x11, 0, x12)

inst_1:
// rs1 != rd, rs1==x17, rd==x14, imm_val == 31, rs1_w0_val == 4294967279, rs1_w1_val == 4294965247
// opcode: slli32 ; op1:x17; dest:x14; op1val:0xfffff7ffffffffef;  immval:0x1f
TEST_IMM_OP( slli32, x14, x17, 0x0000000000000000, 0xfffff7ffffffffef, 0x1f, x11, 8, x12)

inst_2:
// rs1==x23, rd==x5, imm_val == 30, rs1_w0_val == 134217728, rs1_w1_val == 2097152
// opcode: slli32 ; op1:x23; dest:x5; op1val:0x20000008000000;  immval:0x1e
TEST_IMM_OP( slli32, x5, x23, 0x0000000000000000, 0x20000008000000, 0x1e, x11, 16, x12)

inst_3:
// rs1==x7, rd==x30, imm_val == 29, rs1_w0_val == 524288
// opcode: slli32 ; op1:x7; dest:x30; op1val:0x00000600080000;  immval:0x1d
TEST_IMM_OP( slli32, x30, x7, 0x0000000000000000, 0x00000600080000, 0x1d, x11, 24, x12)

inst_4:
// rs1==x29, rd==x3, imm_val == 28, rs1_w1_val == 268435456
// opcode: slli32 ; op1:x29; dest:x3; op1val:0x1000000000000012;  immval:0x1c
TEST_IMM_OP( slli32, x3, x29, 0x0000000000000000, 0x1000000000000012, 0x1c, x11, 32, x12)

inst_5:
// rs1==x16, rd==x28, imm_val == 27, rs1_w0_val == 4294901759
// opcode: slli32 ; op1:x16; dest:x28; op1val:0x10000000fffeffff;  immval:0x1b
TEST_IMM_OP( slli32, x28, x16, 0x0000000000000000, 0x10000000fffeffff, 0x1b, x11, 40, x12)

inst_6:
// rs1==x2, rd==x19, imm_val == 26, rs1_w1_val == 131072, rs1_w0_val == 2048
// opcode: slli32 ; op1:x2; dest:x19; op1val:0x02000000000800;  immval:0x1a
TEST_IMM_OP( slli32, x19, x2, 0x0000000000000000, 0x02000000000800, 0x1a, x11, 48, x12)

inst_7:
// rs1==x14, rd==x10, imm_val == 25, rs1_w1_val == 32, rs1_w0_val == 4294967039
// opcode: slli32 ; op1:x14; dest:x10; op1val:0x000020fffffeff;  immval:0x19
TEST_IMM_OP( slli32, x10, x14, 0x0000000000000000, 0x000020fffffeff, 0x19, x11, 56, x12)

inst_8:
// rs1==x28, rd==x9, imm_val == 24, rs1_w0_val == 536870912, rs1_w1_val == 16777216
// opcode: slli32 ; op1:x28; dest:x9; op1val:0x100000020000000;  immval:0x18
TEST_IMM_OP( slli32, x9, x28, 0x0000000000000000, 0x100000020000000, 0x18, x11, 64, x12)

inst_9:
// rs1==x21, rd==x25, imm_val == 23, rs1_w1_val == 4286578687, rs1_w0_val == 2
// opcode: slli32 ; op1:x21; dest:x25; op1val:0xff7fffff00000002;  immval:0x17
TEST_IMM_OP( slli32, x25, x21, 0x0000000000000000, 0xff7fffff00000002, 0x17, x11, 72, x12)

inst_10:
// rs1==x19, rd==x22, imm_val == 21, rs1_w0_val == 4294966783, rs1_w1_val == 4292870143
// opcode: slli32 ; op1:x19; dest:x22; op1val:0xffdffffffffffdff;  immval:0x15
TEST_IMM_OP( slli32, x22, x19, 0x0000000000000000, 0xffdffffffffffdff, 0x15, x11, 80, x12)

inst_11:
// rs1==x3, rd==x1, imm_val == 20, rs1_w0_val == 262144, rs1_w1_val == 4294950911
// opcode: slli32 ; op1:x3; dest:x1; op1val:0xffffbfff00040000;  immval:0x14
TEST_IMM_OP( slli32, x1, x3, 0x0000000000000000, 0xffffbfff00040000, 0x14, x11, 88, x12)

inst_12:
// rs1==x6, rd==x21, imm_val == 19, rs1_w0_val == 4278190079
// opcode: slli32 ; op1:x6; dest:x21; op1val:0x00000efeffffff;  immval:0x13
TEST_IMM_OP( slli32, x21, x6, 0x0000000000000000, 0x00000efeffffff, 0x13, x11, 96, x12)

inst_13:
// rs1==x22, rd==x20, imm_val == 18, rs1_w1_val == 4294967167
// opcode: slli32 ; op1:x22; dest:x20; op1val:0xffffff7f00000800;  immval:0x12
TEST_IMM_OP( slli32, x20, x22, 0x0000000000000000, 0xffffff7f00000800, 0x12, x11, 104, x12)

inst_14:
// rs1==x26, rd==x2, imm_val == 17, rs1_w1_val == 16384
// opcode: slli32 ; op1:x26; dest:x2; op1val:0x00400020000000;  immval:0x11
TEST_IMM_OP( slli32, x2, x26, 0x0000000000000000, 0x00400020000000, 0x11, x11, 112, x12)

inst_15:
// rs1==x18, rd==x7, imm_val == 16, 
// opcode: slli32 ; op1:x18; dest:x7; op1val:0x0000050000000f;  immval:0x10
TEST_IMM_OP( slli32, x7, x18, 0x0000000000000000, 0x0000050000000f, 0x10, x11, 120, x12)

inst_16:
// rs1==x20, rd==x24, imm_val == 15, rs1_w1_val == 4294934527, rs1_w0_val == 65536
// opcode: slli32 ; op1:x20; dest:x24; op1val:0xffff7fff00010000;  immval:0xf
TEST_IMM_OP( slli32, x24, x20, 0x0000000000000000, 0xffff7fff00010000, 0xf, x11, 128, x12)

inst_17:
// rs1==x13, rd==x31, imm_val == 14, rs1_w0_val == 4294934527
// opcode: slli32 ; op1:x13; dest:x31; op1val:0x00000cffff7fff;  immval:0xe
TEST_IMM_OP( slli32, x31, x13, 0x0000000000000000, 0x00000cffff7fff, 0xe, x11, 136, x12)

inst_18:
// rs1==x27, rd==x4, imm_val == 13, rs1_w0_val == 1048576, rs1_w1_val == 2048
// opcode: slli32 ; op1:x27; dest:x4; op1val:0x00080000100000;  immval:0xd
TEST_IMM_OP( slli32, x4, x27, 0x0000000000000000, 0x00080000100000, 0xd, x11, 144, x12)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_19:
// rs1==x9, rd==x26, imm_val == 12, rs1_w1_val == 3221225471, rs1_w0_val == 4294836223
// opcode: slli32 ; op1:x9; dest:x26; op1val:0xbffffffffffdffff;  immval:0xc
TEST_IMM_OP( slli32, x26, x9, 0x0000000000000000, 0xbffffffffffdffff, 0xc, x2, 0, x3)

inst_20:
// rs1==x5, rd==x12, imm_val == 11, rs1_w0_val == 4294959103, rs1_w1_val == 536870912
// opcode: slli32 ; op1:x5; dest:x12; op1val:0x20000000ffffdfff;  immval:0xb
TEST_IMM_OP( slli32, x12, x5, 0x0000000000000000, 0x20000000ffffdfff, 0xb, x2, 8, x3)

inst_21:
// rs1==x10, rd==x11, imm_val == 10, rs1_w1_val == 1073741824, rs1_w0_val == 4294967294
// opcode: slli32 ; op1:x10; dest:x11; op1val:0x40000000fffffffe;  immval:0xa
TEST_IMM_OP( slli32, x11, x10, 0x0000000000000000, 0x40000000fffffffe, 0xa, x2, 16, x3)

inst_22:
// rs1==x31, rd==x29, imm_val == 9, rs1_w0_val == 33554432
// opcode: slli32 ; op1:x31; dest:x29; op1val:0xbfffffff02000000;  immval:0x9
TEST_IMM_OP( slli32, x29, x31, 0x0000000000000000, 0xbfffffff02000000, 0x9, x2, 24, x3)

inst_23:
// rs1==x24, rd==x16, imm_val == 8, rs1_w0_val == 4194304, rs1_w1_val == 4294967295
// opcode: slli32 ; op1:x24; dest:x16; op1val:0xffffffff00400000;  immval:0x8
TEST_IMM_OP( slli32, x16, x24, 0x0000000000000000, 0xffffffff00400000, 0x8, x2, 32, x3)

inst_24:
// rs1==x0, rd==x15, imm_val == 7, rs1_w0_val == 2097152, rs1_w1_val == 4294901759
// opcode: slli32 ; op1:x0; dest:x15; op1val:0xfffeffff00200000;  immval:0x7
TEST_IMM_OP( slli32, x15, x0, 0x0000000000000000, 0xfffeffff00200000, 0x7, x2, 40, x3)

inst_25:
// rs1==x4, rd==x27, imm_val == 6, rs1_w0_val == 8388608, rs1_w1_val == 8
// opcode: slli32 ; op1:x4; dest:x27; op1val:0x00000800800000;  immval:0x6
TEST_IMM_OP( slli32, x27, x4, 0x0000000000000000, 0x00000800800000, 0x6, x2, 48, x3)

inst_26:
// rs1==x25, rd==x23, imm_val == 5, rs1_w1_val == 4294967291, rs1_w0_val == 3221225471
// opcode: slli32 ; op1:x25; dest:x23; op1val:0xfffffffbbfffffff;  immval:0x5
TEST_IMM_OP( slli32, x23, x25, 0x0000000000000000, 0xfffffffbbfffffff, 0x5, x2, 56, x3)

inst_27:
// rs1==x11, rd==x6, imm_val == 4, rs1_w1_val == 2147483647
// opcode: slli32 ; op1:x11; dest:x6; op1val:0x7fffffffffffffef;  immval:0x4
TEST_IMM_OP( slli32, x6, x11, 0x0000000000000000, 0x7fffffffffffffef, 0x4, x2, 64, x3)

inst_28:
// rs1==x12, rd==x0, imm_val == 3, rs1_w0_val == 1073741824, rs1_w1_val == 4294836223
// opcode: slli32 ; op1:x12; dest:x0; op1val:0xfffdffff40000000;  immval:0x3
TEST_IMM_OP( slli32, x0, x12, 0x0000000000000000, 0xfffdffff40000000, 0x3, x2, 72, x3)

inst_29:
// rs1==x15, rd==x17, imm_val == 2, rs1_w0_val == 4160749567
// opcode: slli32 ; op1:x15; dest:x17; op1val:0x000006f7ffffff;  immval:0x2
TEST_IMM_OP( slli32, x17, x15, 0x0000000000000000, 0x000006f7ffffff, 0x2, x2, 80, x3)

inst_30:
// rs1==x1, rd==x13, imm_val == 1, rs1_w0_val == 4294967263
// opcode: slli32 ; op1:x1; dest:x13; op1val:0xfffffffbffffffdf;  immval:0x1
TEST_IMM_OP( slli32, x13, x1, 0x0000000000000000, 0xfffffffbffffffdf, 0x1, x2, 88, x3)

inst_31:
// rs1==x30, rd==x18, imm_val == 0, rs1_w0_val == 2147483647
// opcode: slli32 ; op1:x30; dest:x18; op1val:0xfffff7ff7fffffff;  immval:0x0
TEST_IMM_OP( slli32, x18, x30, 0x0000000000000000, 0xfffff7ff7fffffff, 0x0, x2, 96, x3)

inst_32:
// rs1_w1_val == 2863311530, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xaaaaaaaa00000009;  immval:0x1
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xaaaaaaaa00000009, 0x1, x2, 104, x3)

inst_33:
// rs1_w1_val == 1431655765, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x5555555500800000;  immval:0xe
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x5555555500800000, 0xe, x2, 112, x3)

inst_34:
// rs1_w1_val == 3758096383, rs1_w0_val == 16
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xdfffffff00000010;  immval:0xe
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xdfffffff00000010, 0xe, x2, 120, x3)

inst_35:
// rs1_w1_val == 4026531839, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xefffffff00000002;  immval:0x12
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xefffffff00000002, 0x12, x2, 128, x3)

inst_36:
// rs1_w1_val == 4227858431, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xfbffffff00000013;  immval:0x10
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xfbffffff00000013, 0x10, x2, 136, x3)

inst_37:
// rs1_w1_val == 4261412863, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xfdffffffffff7fff;  immval:0x1d
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xfdffffffffff7fff, 0x1d, x2, 144, x3)

inst_38:
// rs1_w1_val == 4278190079, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xfeffffff0000000c;  immval:0x5
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xfeffffff0000000c, 0x5, x2, 152, x3)

inst_39:
// rs1_w1_val == 4290772991, rs1_w0_val == 67108864
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xffbfffff04000000;  immval:0x19
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xffbfffff04000000, 0x19, x2, 160, x3)

inst_40:
// rs1_w1_val == 4293918719, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xffeffffffffdffff;  immval:0xb
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xffeffffffffdffff, 0xb, x2, 168, x3)

inst_41:
// rs1_w1_val == 4294443007, rs1_w0_val == 128
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xfff7ffff00000080;  immval:0x9
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xfff7ffff00000080, 0x9, x2, 176, x3)

inst_42:
// rs1_w1_val == 4294705151, rs1_w0_val == 4286578687
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xfffbffffff7fffff;  immval:0x19
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xfffbffffff7fffff, 0x19, x2, 184, x3)

inst_43:
// rs1_w1_val == 4294959103, rs1_w0_val == 1024
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xffffdfff00000400;  immval:0x1
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xffffdfff00000400, 0x1, x2, 192, x3)

inst_44:
// rs1_w1_val == 4294963199, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xffffeffffffeffff;  immval:0x6
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xffffeffffffeffff, 0x6, x2, 200, x3)

inst_45:
// rs1_w1_val == 4294966271, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xfffffbff00040000;  immval:0x1
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xfffffbff00040000, 0x1, x2, 208, x3)

inst_46:
// rs1_w1_val == 4294966783, rs1_w0_val == 16777216
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xfffffdff01000000;  immval:0x1f
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xfffffdff01000000, 0x1f, x2, 216, x3)

inst_47:
// rs1_w1_val == 4294967039, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xfffffeff00800000;  immval:0xa
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xfffffeff00800000, 0xa, x2, 224, x3)

inst_48:
// rs1_w1_val == 4294967231, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xffffffbfffff7fff;  immval:0x1b
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xffffffbfffff7fff, 0x1b, x2, 232, x3)

inst_49:
// rs1_w0_val == 4294967231, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xff7fffffffffffbf;  immval:0x9
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xff7fffffffffffbf, 0x9, x2, 240, x3)

inst_50:
// rs1_w0_val == 4294967287, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x1000000fffffff7;  immval:0x1
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x1000000fffffff7, 0x1, x2, 248, x3)

inst_51:
// rs1_w0_val == 4294967291, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xfffefffffffffffb;  immval:0xd
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xfffefffffffffffb, 0xd, x2, 256, x3)

inst_52:
// rs1_w0_val == 4294967293, rs1_w1_val == 1048576
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x100000fffffffd;  immval:0x7
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x100000fffffffd, 0x7, x2, 264, x3)

inst_53:
// rs1_w0_val == 2147483648, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xfffffeff80000000;  immval:0x17
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xfffffeff80000000, 0x17, x2, 272, x3)

inst_54:
// rs1_w0_val == 268435456, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x00001310000000;  immval:0x16
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x00001310000000, 0x16, x2, 280, x3)

inst_55:
// rs1_w0_val == 131072, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xffffffbf00020000;  immval:0x1f
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xffffffbf00020000, 0x1f, x2, 288, x3)

inst_56:
// rs1_w0_val == 32768, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x5555555500008000;  immval:0xe
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x5555555500008000, 0xe, x2, 296, x3)

inst_57:
// rs1_w0_val == 16384, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xfffffffb00004000;  immval:0x4
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xfffffffb00004000, 0x4, x2, 304, x3)

inst_58:
// rs1_w0_val == 8192, rs1_w1_val == 4294967293
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xfffffffd00002000;  immval:0x18
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xfffffffd00002000, 0x18, x2, 312, x3)

inst_59:
// rs1_w0_val == 4096, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xfeffffff00001000;  immval:0x18
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xfeffffff00001000, 0x18, x2, 320, x3)

inst_60:
// rs1_w0_val == 512, rs1_w1_val == 134217728
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x800000000000200;  immval:0x16
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x800000000000200, 0x16, x2, 328, x3)

inst_61:
// rs1_w0_val == 256, rs1_w1_val == 4294967287
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xfffffff700000100;  immval:0x1f
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xfffffff700000100, 0x1f, x2, 336, x3)

inst_62:
// rs1_w0_val == 64, rs1_w1_val == 128
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x00008000000040;  immval:0x1b
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x00008000000040, 0x1b, x2, 344, x3)

inst_63:
// rs1_w0_val == 32, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x02000000000020;  immval:0xe
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x02000000000020, 0xe, x2, 352, x3)

inst_64:
// rs1_w0_val == 8, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x02000000000008;  immval:0x6
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x02000000000008, 0x6, x2, 360, x3)

inst_65:
// rs1_w0_val == 4, rs1_w1_val == 64
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x00004000000004;  immval:0x2
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x00004000000004, 0x2, x2, 368, x3)

inst_66:
// rs1_w0_val == 1, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xffffffff00000001;  immval:0xc
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xffffffff00000001, 0xc, x2, 376, x3)

inst_67:
// rs1_w0_val == 4294967295, rs1_w1_val == 4
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x000004ffffffff;  immval:0x14
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x000004ffffffff, 0x14, x2, 384, x3)

inst_68:
// rs1_w1_val == 4294967263, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xffffffdf00000003;  immval:0x19
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xffffffdf00000003, 0x19, x2, 392, x3)

inst_69:
// rs1_w1_val == 4294967279, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xffffffef00000001;  immval:0x1b
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xffffffef00000001, 0x1b, x2, 400, x3)

inst_70:
// rs1_w1_val == 4294967294, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xfffffffe00080000;  immval:0xb
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xfffffffe00080000, 0xb, x2, 408, x3)

inst_71:
// rs1_w1_val == 2147483648, rs1_w0_val == 4294950911
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x80000000ffffbfff;  immval:0x13
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x80000000ffffbfff, 0x13, x2, 416, x3)

inst_72:
// rs1_w1_val == 67108864, rs1_w0_val == 4026531839
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x4000000efffffff;  immval:0xd
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x4000000efffffff, 0xd, x2, 424, x3)

inst_73:
// rs1_w1_val == 33554432, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x2000000ffffffbf;  immval:0xa
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x2000000ffffffbf, 0xa, x2, 432, x3)

inst_74:
// rs1_w1_val == 8388608, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x80000000008000;  immval:0x6
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x80000000008000, 0x6, x2, 440, x3)

inst_75:
// rs1_w1_val == 4194304, rs1_w0_val == 3758096383
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x400000dfffffff;  immval:0xd
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x400000dfffffff, 0xd, x2, 448, x3)

inst_76:
// rs1_w1_val == 524288, rs1_w0_val == 4292870143
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x080000ffdfffff;  immval:0x1d
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x080000ffdfffff, 0x1d, x2, 456, x3)

inst_77:
// rs1_w1_val == 262144, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x04000000100000;  immval:0xf
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x04000000100000, 0xf, x2, 464, x3)

inst_78:
// rs1_w1_val == 65536, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x010000fffffffe;  immval:0x7
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x010000fffffffe, 0x7, x2, 472, x3)

inst_79:
// rs1_w1_val == 32768, rs1_w0_val == 4227858431
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x008000fbffffff;  immval:0x1
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x008000fbffffff, 0x1, x2, 480, x3)

inst_80:
// rs1_w1_val == 8192, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x00200000000009;  immval:0x1a
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x00200000000009, 0x1a, x2, 488, x3)

inst_81:
// rs1_w1_val == 4096, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x00100000000007;  immval:0xb
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x00100000000007, 0xb, x2, 496, x3)

inst_82:
// rs1_w1_val == 1024, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x000400ffffffef;  immval:0x8
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x000400ffffffef, 0x8, x2, 504, x3)

inst_83:
// rs1_w1_val == 512, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x00020000000020;  immval:0xc
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x00020000000020, 0xc, x2, 512, x3)

inst_84:
// rs1_w1_val == 256, rs1_w0_val == 4294443007
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x000100fff7ffff;  immval:0x16
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x000100fff7ffff, 0x16, x2, 520, x3)

inst_85:
// rs1_w1_val == 2, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x00000200000008;  immval:0xe
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x00000200000008, 0xe, x2, 528, x3)

inst_86:
// rs1_w1_val == 1, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x000001fbffffff;  immval:0x6
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x000001fbffffff, 0x6, x2, 536, x3)

inst_87:
// rs1_w1_val == 0, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x00000000000004;  immval:0xd
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x00000000000004, 0xd, x2, 544, x3)

inst_88:
// rs1_w0_val == 2863311530, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x00000eaaaaaaaa;  immval:0xf
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x00000eaaaaaaaa, 0xf, x2, 552, x3)

inst_89:
// rs1_w0_val == 1431655765, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xffffffef55555555;  immval:0x1d
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xffffffef55555555, 0x1d, x2, 560, x3)

inst_90:
// rs1_w0_val == 4261412863, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x000013fdffffff;  immval:0xd
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x000013fdffffff, 0xd, x2, 568, x3)

inst_91:
// rs1_w0_val == 4290772991, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x2000000ffbfffff;  immval:0xa
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x2000000ffbfffff, 0xa, x2, 576, x3)

inst_92:
// rs1_w0_val == 4293918719, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x00000dffefffff;  immval:0x15
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x00000dffefffff, 0x15, x2, 584, x3)

inst_93:
// rs1_w0_val == 4294705151, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x080000fffbffff;  immval:0x6
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x080000fffbffff, 0x6, x2, 592, x3)

inst_94:
// rs1_w0_val == 4294963199, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x00000dffffefff;  immval:0x19
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x00000dffffefff, 0x19, x2, 600, x3)

inst_95:
// rs1_w0_val == 4294965247, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x00000afffff7ff;  immval:0x0
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x00000afffff7ff, 0x0, x2, 608, x3)

inst_96:
// rs1_w0_val == 4294966271, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xdffffffffffffbff;  immval:0x18
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xdffffffffffffbff, 0x18, x2, 616, x3)

inst_97:
// rs1_w1_val == 16, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x000010dfffffff;  immval:0x13
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x000010dfffffff, 0x13, x2, 624, x3)

inst_98:
// rs1_w0_val == 4294967167, 
// opcode: slli32 ; op1:x30; dest:x31; op1val:0x000002ffffff7f;  immval:0x15
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0x000002ffffff7f, 0x15, x2, 632, x3)

inst_99:
// imm_val == 7, rs1_w0_val == 2097152, rs1_w1_val == 4294901759
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xfffeffff00200000;  immval:0x7
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xfffeffff00200000, 0x7, x2, 640, x3)

inst_100:
// imm_val == 3, rs1_w0_val == 1073741824, rs1_w1_val == 4294836223
// opcode: slli32 ; op1:x30; dest:x31; op1val:0xfffdffff40000000;  immval:0x3
TEST_IMM_OP( slli32, x31, x30, 0x0000000000000000, 0xfffdffff40000000, 0x3, x2, 648, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 82*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
