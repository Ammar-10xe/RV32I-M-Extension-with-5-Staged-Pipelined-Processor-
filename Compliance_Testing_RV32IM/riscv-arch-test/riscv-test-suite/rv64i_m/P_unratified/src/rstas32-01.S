
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rstas32 instruction of the RISC-V RV64PZicsr extension for the rstas32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",rstas32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1 == rd != rs2, rs1==x14, rs2==x11, rd==x14, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w1_val == 65536, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w1_val == -17, rs2_w0_val == 2097152
// opcode: rstas32 ; op1:x14; op2:x11; dest:x14; op1val:0x01000080000000;  op2val:0xffffffef00200000
TEST_RR_OP(rstas32, x14, x14, x11, 0x0000000000000000, 0x01000080000000, 0xffffffef00200000, x9, 0, x1)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x17, rs2==x25, rd==x11, rs1_w1_val == rs2_w1_val, rs1_w0_val == 512, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w1_val > 0 and rs2_w1_val > 0
// opcode: rstas32 ; op1:x17; op2:x25; dest:x11; op1val:0x00000700000200;  op2val:0x000007fffffff9
TEST_RR_OP(rstas32, x11, x17, x25, 0x0000000000000000, 0x00000700000200, 0x000007fffffff9, x9, 8, x1)

inst_2:
// rs1 == rs2 != rd, rs1==x21, rs2==x21, rd==x20, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == 268435456, rs1_w1_val == -33554433
// opcode: rstas32 ; op1:x21; op2:x21; dest:x20; op1val:0xfdffffff10000000;  op2val:0x000007fffffffc
TEST_RR_OP(rstas32, x20, x21, x21, 0x0000000000000000, 0xfdffffff10000000, 0x000007fffffffc, x9, 16, x1)

inst_3:
// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val == 4194304, rs1_w1_val == -9, rs2_w0_val == -536870913, rs2_w1_val == -513
// opcode: rstas32 ; op1:x7; op2:x7; dest:x7; op1val:0xfffffff700400000;  op2val:0xfffffdffdfffffff
TEST_RR_OP(rstas32, x7, x7, x7, 0x0000000000000000, 0xfffffff700400000, 0xfffffdffdfffffff, x9, 24, x1)

inst_4:
// rs2 == rd != rs1, rs1==x29, rs2==x17, rd==x17, rs1_w0_val == rs2_w0_val, rs2_w1_val == 8192, rs1_w1_val == -1048577, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 536870912, rs1_w0_val == 536870912
// opcode: rstas32 ; op1:x29; op2:x17; dest:x17; op1val:0xffefffff20000000;  op2val:0x00200020000000
TEST_RR_OP(rstas32, x17, x29, x17, 0x0000000000000000, 0xffefffff20000000, 0x00200020000000, x9, 32, x1)

inst_5:
// rs1==x2, rs2==x29, rd==x13, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w0_val == -67108865, rs1_w1_val == 1048576, rs2_w0_val == -8388609
// opcode: rstas32 ; op1:x2; op2:x29; dest:x13; op1val:0x100000fbffffff;  op2val:0xfffffff8ff7fffff
TEST_RR_OP(rstas32, x13, x2, x29, 0x0000000000000000, 0x100000fbffffff, 0xfffffff8ff7fffff, x9, 40, x1)

inst_6:
// rs1==x23, rs2==x18, rd==x21, rs2_w1_val == -1431655766, rs2_w0_val == -262145
// opcode: rstas32 ; op1:x23; op2:x18; dest:x21; op1val:0x01000010000000;  op2val:0xaaaaaaaafffbffff
TEST_RR_OP(rstas32, x21, x23, x18, 0x0000000000000000, 0x01000010000000, 0xaaaaaaaafffbffff, x9, 48, x1)

inst_7:
// rs1==x12, rs2==x14, rd==x27, rs2_w1_val == 1431655765, rs2_w0_val == 1, rs1_w1_val == 1
// opcode: rstas32 ; op1:x12; op2:x14; dest:x27; op1val:0x000001fffffffc;  op2val:0x5555555500000001
TEST_RR_OP(rstas32, x27, x12, x14, 0x0000000000000000, 0x000001fffffffc, 0x5555555500000001, x9, 56, x1)

inst_8:
// rs1==x8, rs2==x16, rd==x3, rs2_w1_val == 2147483647, rs2_w0_val == 4, rs1_w1_val == 2
// opcode: rstas32 ; op1:x8; op2:x16; dest:x3; op1val:0x00000280000000;  op2val:0x7fffffff00000004
TEST_RR_OP(rstas32, x3, x8, x16, 0x0000000000000000, 0x00000280000000, 0x7fffffff00000004, x9, 64, x1)

inst_9:
// rs1==x11, rs2==x22, rd==x23, rs2_w1_val == -1073741825, rs1_w1_val == 2097152, rs2_w0_val == -65
// opcode: rstas32 ; op1:x11; op2:x22; dest:x23; op1val:0x20000000000009;  op2val:0xbfffffffffffffbf
TEST_RR_OP(rstas32, x23, x11, x22, 0x0000000000000000, 0x20000000000009, 0xbfffffffffffffbf, x9, 72, x1)

inst_10:
// rs1==x20, rs2==x28, rd==x24, rs2_w1_val == -536870913, rs1_w0_val == 1
// opcode: rstas32 ; op1:x20; op2:x28; dest:x24; op1val:0x00000700000001;  op2val:0xdfffffff00200000
TEST_RR_OP(rstas32, x24, x20, x28, 0x0000000000000000, 0x00000700000001, 0xdfffffff00200000, x9, 80, x1)

inst_11:
// rs1==x6, rs2==x19, rd==x30, rs2_w1_val == -268435457, rs1_w0_val == -257, rs1_w1_val == 256, rs2_w0_val == 134217728
// opcode: rstas32 ; op1:x6; op2:x19; dest:x30; op1val:0x000100fffffeff;  op2val:0xefffffff08000000
TEST_RR_OP(rstas32, x30, x6, x19, 0x0000000000000000, 0x000100fffffeff, 0xefffffff08000000, x9, 88, x1)

inst_12:
// rs1==x3, rs2==x5, rd==x15, rs2_w1_val == -134217729, rs1_w0_val == -33, rs2_w0_val == 16384, rs1_w1_val == -131073
// opcode: rstas32 ; op1:x3; op2:x5; dest:x15; op1val:0xfffdffffffffffdf;  op2val:0xf7ffffff00004000
TEST_RR_OP(rstas32, x15, x3, x5, 0x0000000000000000, 0xfffdffffffffffdf, 0xf7ffffff00004000, x9, 96, x1)

inst_13:
// rs1==x24, rs2==x31, rd==x5, rs2_w1_val == -67108865, rs1_w1_val == -2097153, rs1_w0_val == 4096, rs2_w0_val == -2097153
// opcode: rstas32 ; op1:x24; op2:x31; dest:x5; op1val:0xffdfffff00001000;  op2val:0xfbffffffffdfffff
TEST_RR_OP(rstas32, x5, x24, x31, 0x0000000000000000, 0xffdfffff00001000, 0xfbffffffffdfffff, x9, 104, x1)

inst_14:
// rs1==x30, rs2==x13, rd==x19, rs2_w1_val == -33554433, rs1_w0_val == -3, rs2_w0_val == 2147483647, rs1_w1_val == -257
// opcode: rstas32 ; op1:x30; op2:x13; dest:x19; op1val:0xfffffefffffffffd;  op2val:0xfdffffff7fffffff
TEST_RR_OP(rstas32, x19, x30, x13, 0x0000000000000000, 0xfffffefffffffffd, 0xfdffffff7fffffff, x9, 112, x11)

inst_15:
// rs1==x31, rs2==x8, rd==x22, rs2_w1_val == -16777217, rs1_w1_val == -16777217, rs1_w0_val == 32, rs2_w0_val == 268435456
// opcode: rstas32 ; op1:x31; op2:x8; dest:x22; op1val:0xfeffffff00000020;  op2val:0xfeffffff10000000
TEST_RR_OP(rstas32, x22, x31, x8, 0x0000000000000000, 0xfeffffff00000020, 0xfeffffff10000000, x9, 120, x11)

inst_16:
// rs1==x1, rs2==x4, rd==x12, rs2_w1_val == -8388609, rs1_w0_val == -131073, rs2_w0_val == -134217729
// opcode: rstas32 ; op1:x1; op2:x4; dest:x12; op1val:0x3ffffffffffdffff;  op2val:0xff7ffffff7ffffff
TEST_RR_OP(rstas32, x12, x1, x4, 0x0000000000000000, 0x3ffffffffffdffff, 0xff7ffffff7ffffff, x9, 128, x11)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_17:
// rs1==x9, rs2==x1, rd==x29, rs2_w1_val == -4194305, rs1_w0_val == -1025, rs2_w0_val == -2147483648, rs1_w1_val == 32768
// opcode: rstas32 ; op1:x9; op2:x1; dest:x29; op1val:0x008000fffffbff;  op2val:0xffbfffff80000000
TEST_RR_OP(rstas32, x29, x9, x1, 0x0000000000000000, 0x008000fffffbff, 0xffbfffff80000000, x7, 0, x11)

inst_18:
// rs1==x19, rs2==x30, rd==x10, rs2_w1_val == -2097153, rs2_w0_val == -5, rs1_w1_val == -4097, rs1_w0_val == 32768
// opcode: rstas32 ; op1:x19; op2:x30; dest:x10; op1val:0xffffefff00008000;  op2val:0xffdffffffffffffb
TEST_RR_OP(rstas32, x10, x19, x30, 0x0000000000000000, 0xffffefff00008000, 0xffdffffffffffffb, x7, 8, x11)

inst_19:
// rs1==x16, rs2==x0, rd==x26, rs2_w1_val == -1048577, rs2_w0_val == 16777216, rs1_w1_val == -1431655766
// opcode: rstas32 ; op1:x16; op2:x0; dest:x26; op1val:0xaaaaaaaac0000000;  op2val:0xffefffff01000000
TEST_RR_OP(rstas32, x26, x16, x0, 0x0000000000000000, 0xaaaaaaaac0000000, 0xffefffff01000000, x7, 16, x11)

inst_20:
// rs1==x27, rs2==x20, rd==x9, rs2_w1_val == -524289, rs1_w0_val == -524289, rs2_w0_val == -524289
// opcode: rstas32 ; op1:x27; op2:x20; dest:x9; op1val:0xffeffffffff7ffff;  op2val:0xfff7fffffff7ffff
TEST_RR_OP(rstas32, x9, x27, x20, 0x0000000000000000, 0xffeffffffff7ffff, 0xfff7fffffff7ffff, x7, 24, x11)

inst_21:
// rs1==x22, rs2==x3, rd==x1, rs2_w1_val == -262145, rs1_w1_val == -33
// opcode: rstas32 ; op1:x22; op2:x3; dest:x1; op1val:0xffffffdf00400000;  op2val:0xfffbffffc0000000
TEST_RR_OP(rstas32, x1, x22, x3, 0x0000000000000000, 0xffffffdf00400000, 0xfffbffffc0000000, x7, 32, x11)

inst_22:
// rs1==x25, rs2==x9, rd==x31, rs2_w1_val == -131073, rs1_w0_val == -5, rs1_w1_val == 536870912, rs2_w0_val == -257
// opcode: rstas32 ; op1:x25; op2:x9; dest:x31; op1val:0x20000000fffffffb;  op2val:0xfffdfffffffffeff
TEST_RR_OP(rstas32, x31, x25, x9, 0x0000000000000000, 0x20000000fffffffb, 0xfffdfffffffffeff, x7, 40, x11)

inst_23:
// rs1==x0, rs2==x6, rd==x8, rs2_w1_val == -65537, rs2_w0_val == 256, rs1_w0_val == -65537
// opcode: rstas32 ; op1:x0; op2:x6; dest:x8; op1val:0x000006fffeffff;  op2val:0xfffeffff00000100
TEST_RR_OP(rstas32, x8, x0, x6, 0x0000000000000000, 0x000006fffeffff, 0xfffeffff00000100, x7, 48, x11)

inst_24:
// rs1==x13, rs2==x2, rd==x6, rs2_w1_val == -32769, rs2_w0_val == 64
// opcode: rstas32 ; op1:x13; op2:x2; dest:x6; op1val:0xfffffffcfbffffff;  op2val:0xffff7fff00000040
TEST_RR_OP(rstas32, x6, x13, x2, 0x0000000000000000, 0xfffffffcfbffffff, 0xffff7fff00000040, x7, 56, x11)

inst_25:
// rs1==x15, rs2==x27, rd==x2, rs2_w1_val == -16385, rs1_w0_val == -268435457, rs1_w1_val == 8388608
// opcode: rstas32 ; op1:x15; op2:x27; dest:x2; op1val:0x800000efffffff;  op2val:0xffffbffffffffffb
TEST_RR_OP(rstas32, x2, x15, x27, 0x0000000000000000, 0x800000efffffff, 0xffffbffffffffffb, x7, 64, x11)

inst_26:
// rs1==x5, rs2==x23, rd==x18, rs2_w1_val == -8193, rs2_w0_val == -33554433, rs1_w1_val == 512
// opcode: rstas32 ; op1:x5; op2:x23; dest:x18; op1val:0x000200fffffff8;  op2val:0xffffdffffdffffff
TEST_RR_OP(rstas32, x18, x5, x23, 0x0000000000000000, 0x000200fffffff8, 0xffffdffffdffffff, x7, 72, x11)

inst_27:
// rs1==x18, rs2==x24, rd==x0, rs2_w1_val == -4097, rs1_w0_val == 128, rs1_w1_val == -513
// opcode: rstas32 ; op1:x18; op2:x24; dest:x0; op1val:0xfffffdff00000080;  op2val:0xffffefff00200000
TEST_RR_OP(rstas32, x0, x18, x24, 0x0000000000000000, 0xfffffdff00000080, 0xffffefff00200000, x7, 80, x11)

inst_28:
// rs1==x28, rs2==x10, rd==x4, rs2_w1_val == -2049, rs2_w0_val == 67108864
// opcode: rstas32 ; op1:x28; op2:x10; dest:x4; op1val:0x00000900000003;  op2val:0xfffff7ff04000000
TEST_RR_OP(rstas32, x4, x28, x10, 0x0000000000000000, 0x00000900000003, 0xfffff7ff04000000, x7, 88, x11)

inst_29:
// rs1==x4, rs2==x26, rd==x16, rs2_w1_val == -1025, rs2_w0_val == 33554432
// opcode: rstas32 ; op1:x4; op2:x26; dest:x16; op1val:0x000002fffeffff;  op2val:0xfffffbff02000000
TEST_RR_OP(rstas32, x16, x4, x26, 0x0000000000000000, 0x000002fffeffff, 0xfffffbff02000000, x7, 96, x1)

inst_30:
// rs1==x10, rs2==x12, rd==x28, rs2_w1_val == -257, rs2_w0_val == -1, rs1_w1_val == -129
// opcode: rstas32 ; op1:x10; op2:x12; dest:x28; op1val:0xffffff7ffffffbff;  op2val:0xfffffeffffffffff
TEST_RR_OP(rstas32, x28, x10, x12, 0x0000000000000000, 0xffffff7ffffffbff, 0xfffffeffffffffff, x7, 104, x1)

inst_31:
// rs1==x26, rs2==x15, rd==x25, rs2_w1_val == -129, rs1_w0_val == 64, rs1_w1_val == -134217729, rs2_w0_val == 4194304
// opcode: rstas32 ; op1:x26; op2:x15; dest:x25; op1val:0xf7ffffff00000040;  op2val:0xffffff7f00400000
TEST_RR_OP(rstas32, x25, x26, x15, 0x0000000000000000, 0xf7ffffff00000040, 0xffffff7f00400000, x7, 112, x1)

inst_32:
// rs2_w1_val == -65, rs1_w1_val == -268435457, rs2_w0_val == 8388608, rs1_w0_val == -134217729
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffff7ffffff;  op2val:0xffffffbf00800000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xeffffffff7ffffff, 0xffffffbf00800000, x7, 120, x1)

inst_33:
// rs2_w1_val == -33, rs1_w0_val == 131072, rs1_w1_val == -524289
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00020000;  op2val:0xffffffdf08000000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00020000, 0xffffffdf08000000, x7, 128, x1)

inst_34:
// rs2_w1_val == -9, rs1_w1_val == 8
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800400000;  op2val:0xfffffff700200000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x00000800400000, 0xfffffff700200000, x7, 136, x1)

inst_35:
// rs2_w1_val == -5, rs1_w1_val == -4194305, rs1_w0_val == -32769
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffff7fff;  op2val:0xfffffffbff7fffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xffbfffffffff7fff, 0xfffffffbff7fffff, x7, 144, x1)

inst_36:
// rs2_w1_val == -3, rs1_w0_val == -262145, rs2_w0_val == 8192
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffbffff;  op2val:0xfffffffd00002000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfefffffffffbffff, 0xfffffffd00002000, x7, 152, x1)

inst_37:
// rs2_w1_val == -2, rs2_w0_val == -16777217
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9fff7ffff;  op2val:0xfffffffefeffffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffffff9fff7ffff, 0xfffffffefeffffff, x7, 160, x1)

inst_38:
// rs2_w1_val == -2147483648, rs2_w0_val == -1431655766, rs1_w1_val == -536870913
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffbffff;  op2val:0x80000000aaaaaaaa
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xdffffffffffbffff, 0x80000000aaaaaaaa, x7, 168, x1)

inst_39:
// rs2_w1_val == 1073741824, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000ffffffdf;  op2val:0x40000000dfffffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x200000ffffffdf, 0x40000000dfffffff, x7, 176, x1)

inst_40:
// rs2_w1_val == 536870912, rs1_w1_val == -65
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffeffff;  op2val:0x2000000000000004
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xffffffbffffeffff, 0x2000000000000004, x7, 184, x1)

inst_41:
// rs2_w1_val == 268435456, rs1_w1_val == -16385
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000040;  op2val:0x10000000fffffff8
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000040, 0x10000000fffffff8, x7, 192, x1)

inst_42:
// rs2_w1_val == 134217728, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffeffff;  op2val:0x800000000000009
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xeffffffffffeffff, 0x800000000000009, x7, 200, x1)

inst_43:
// rs2_w1_val == 67108864, rs1_w1_val == -1073741825, rs1_w0_val == -9
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffffff7;  op2val:0x4000000fff7ffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xbffffffffffffff7, 0x4000000fff7ffff, x7, 208, x1)

inst_44:
// rs2_w1_val == 33554432, rs1_w1_val == 8192, rs1_w0_val == -1073741825
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x002000bfffffff;  op2val:0x200000004000000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x002000bfffffff, 0x200000004000000, x7, 216, x1)

inst_45:
// rs2_w1_val == 16777216, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000009;  op2val:0x1000000aaaaaaaa
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x00020000000009, 0x1000000aaaaaaaa, x7, 224, x1)

inst_46:
// rs2_w1_val == 8388608, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffbfffffff;  op2val:0x800000fffbffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x3fffffffbfffffff, 0x800000fffbffff, x7, 232, x1)

inst_47:
// rs2_w1_val == 4194304, rs1_w0_val == -1048577, rs2_w0_val == 8
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffefffff;  op2val:0x40000000000008
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffefffff, 0x40000000000008, x7, 240, x1)

inst_48:
// rs2_w1_val == 2097152, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffff7ffffff;  op2val:0x20000000000040
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfefffffff7ffffff, 0x20000000000040, x7, 248, x1)

inst_49:
// rs2_w1_val == 1048576, rs1_w0_val == 4
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000004;  op2val:0x10000000400000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x00000700000004, 0x10000000400000, x7, 256, x1)

inst_50:
// rs2_w1_val == 524288, rs1_w1_val == 16777216
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000ffff7fff;  op2val:0x080000f7ffffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x1000000ffff7fff, 0x080000f7ffffff, x7, 264, x1)

inst_51:
// rs2_w1_val == 262144, rs2_w0_val == -32769, rs1_w0_val == 134217728
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff08000000;  op2val:0x040000ffff7fff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff08000000, 0x040000ffff7fff, x7, 272, x1)

inst_52:
// rs2_w1_val == 131072, rs1_w1_val == -2049
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000009;  op2val:0x020000ffffffbf
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000009, 0x020000ffffffbf, x7, 280, x1)

inst_53:
// rs1_w0_val == 33554432, rs2_w0_val == -2049
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff02000000;  op2val:0xfffbfffffffff7ff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffffdff02000000, 0xfffbfffffffff7ff, x7, 288, x1)

inst_54:
// rs1_w0_val == 16777216, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf01000000;  op2val:0xfffffffb00000006
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xffffffbf01000000, 0xfffffffb00000006, x7, 296, x1)

inst_55:
// rs1_w0_val == 8388608, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000300800000;  op2val:0xffffffdf00000001
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x00000300800000, 0xffffffdf00000001, x7, 304, x1)

inst_56:
// rs1_w0_val == 2097152, rs1_w1_val == 262144
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000200000;  op2val:0x4000000fffff7ff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x04000000200000, 0x4000000fffff7ff, x7, 312, x1)

inst_57:
// rs1_w0_val == 1048576, rs1_w1_val == 4194304
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000100000;  op2val:0x02000000000009
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x40000000100000, 0x02000000000009, x7, 320, x1)

inst_58:
// rs1_w0_val == 524288, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00080000;  op2val:0x7fffffffaaaaaaaa
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00080000, 0x7fffffffaaaaaaaa, x7, 328, x1)

inst_59:
// rs1_w0_val == 262144, rs2_w0_val == -9
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000040000;  op2val:0xffffdffffffffff7
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x40000000040000, 0xffffdffffffffff7, x7, 336, x1)

inst_60:
// rs1_w0_val == 65536, rs1_w1_val == -262145
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00010000;  op2val:0xffffeffffffffff8
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00010000, 0xffffeffffffffff8, x7, 344, x1)

inst_61:
// rs1_w0_val == 16384, rs2_w0_val == 32, rs2_w1_val == 128
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900004000;  op2val:0x00008000000020
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x00000900004000, 0x00008000000020, x7, 352, x1)

inst_62:
// rs1_w0_val == 8192, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800002000;  op2val:0xdfffffff20000000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x00000800002000, 0xdfffffff20000000, x7, 360, x1)

inst_63:
// rs1_w0_val == 2048, rs2_w0_val == -33, rs1_w1_val == -8388609
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000800;  op2val:0x000009ffffffdf
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000800, 0x000009ffffffdf, x7, 368, x1)

inst_64:
// rs1_w0_val == 1024, rs1_w1_val == -5
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000400;  op2val:0x400000001000000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000400, 0x400000001000000, x7, 376, x1)

inst_65:
// rs1_w0_val == 256, rs2_w0_val == -1025
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000100;  op2val:0xffbffffffffffbff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x00000200000100, 0xffbffffffffffbff, x7, 384, x1)

inst_66:
// rs1_w0_val == 16, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000010;  op2val:0x7fffffffffdfffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000010, 0x7fffffffffdfffff, x7, 392, x1)

inst_67:
// rs1_w0_val == 8, rs1_w1_val == 4
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000008;  op2val:0x00000300000004
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x00000400000008, 0x00000300000004, x7, 400, x1)

inst_68:
// rs1_w0_val == 2, rs2_w1_val == 16
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000002;  op2val:0x000010ff7fffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x00010000000002, 0x000010ff7fffff, x7, 408, x1)

inst_69:
// rs1_w0_val == 0, rs1_w1_val == 1024
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000000;  op2val:0xffff7fff00400000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x00040000000000, 0xffff7fff00400000, x7, 416, x1)

inst_70:
// rs1_w0_val == -1, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffffffff;  op2val:0xfffffffc20000000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfeffffffffffffff, 0xfffffffc20000000, x7, 424, x1)

inst_71:
// rs2_w1_val == 65536, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000001;  op2val:0x01000000000100
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000001, 0x01000000000100, x7, 432, x1)

inst_72:
// rs2_w1_val == 32768, rs1_w1_val == -1025, rs2_w0_val == 2048
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffffffffb;  op2val:0x00800000000800
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffffffb, 0x00800000000800, x7, 440, x1)

inst_73:
// rs2_w1_val == 16384, rs2_w0_val == -131073, rs1_w0_val == -129
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffff7f;  op2val:0x004000fffdffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffffff7f, 0x004000fffdffff, x7, 448, x1)

inst_74:
// rs2_w1_val == 4096, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00800000;  op2val:0x00100000000004
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00800000, 0x00100000000004, x7, 456, x1)

inst_75:
// rs2_w1_val == 2048, rs1_w0_val == 1431655765, rs2_w0_val == -16385
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000555555555;  op2val:0x000800ffffbfff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x00000555555555, 0x000800ffffbfff, x7, 464, x1)

inst_76:
// rs2_w1_val == 1024, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000055555555;  op2val:0x000400fffffbff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x01000055555555, 0x000400fffffbff, x7, 472, x1)

inst_77:
// rs2_w1_val == 512, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000c0000000;  op2val:0x000200fffffff6
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x800000c0000000, 0x000200fffffff6, x7, 480, x1)

inst_78:
// rs2_w1_val == 256, rs2_w0_val == 128, rs1_w1_val == 0
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffffffd;  op2val:0x00010000000080
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x000000fffffffd, 0x00010000000080, x7, 488, x1)

inst_79:
// rs2_w1_val == 64, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000200;  op2val:0x00004000002000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x2000000000000200, 0x00004000002000, x7, 496, x1)

inst_80:
// rs2_w1_val == 32, rs2_w0_val == 131072, rs1_w0_val == -513
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffffdff;  op2val:0x00002000020000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffffdff, 0x00002000020000, x7, 504, x1)

inst_81:
// rs2_w1_val == 8, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000008;  op2val:0x000008fffffffa
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x00000100000008, 0x000008fffffffa, x7, 512, x1)

inst_82:
// rs2_w1_val == 4, rs1_w0_val == -536870913
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400dfffffff;  op2val:0x00000480000000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x000400dfffffff, 0x00000480000000, x7, 520, x1)

inst_83:
// rs2_w1_val == 2, rs1_w1_val == 32
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000005;  op2val:0x000002fff7ffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x00002000000005, 0x000002fff7ffff, x7, 528, x1)

inst_84:
// rs2_w1_val == 1, rs1_w0_val == -2
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffffffe;  op2val:0x00000104000000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x000003fffffffe, 0x00000104000000, x7, 536, x1)

inst_85:
// rs2_w1_val == 0, rs2_w0_val == 65536, rs1_w0_val == 2147483647
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff97fffffff;  op2val:0x00000000010000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffffff97fffffff, 0x00000000010000, x7, 544, x1)

inst_86:
// rs2_w1_val == -1, rs1_w1_val == 16384
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffdffff;  op2val:0xffffffff80000000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x004000fffdffff, 0xffffffff80000000, x7, 552, x1)

inst_87:
// rs2_w0_val == 262144, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffbffffff;  op2val:0x400000000040000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xf7fffffffbffffff, 0x400000000040000, x7, 560, x1)

inst_88:
// rs2_w0_val == 32768, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffffffff;  op2val:0xfffffeff00008000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfdffffffffffffff, 0xfffffeff00008000, x7, 568, x1)

inst_89:
// rs1_w0_val == 67108864, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000304000000;  op2val:0xbfffffff00000006
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x00000304000000, 0xbfffffff00000006, x7, 576, x1)

inst_90:
// rs2_w0_val == 4096, rs1_w0_val == -4097
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffffefff;  op2val:0x4000000000001000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xffffffbfffffefff, 0x4000000000001000, x7, 584, x1)

inst_91:
// rs2_w0_val == 1024, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffbffff;  op2val:0x4000000000000400
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x000020fffbffff, 0x4000000000000400, x7, 592, x1)

inst_92:
// rs2_w0_val == 512, rs1_w0_val == -1431655766
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffaaaaaaaaa;  op2val:0x00040000000200
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffaaaaaaaaa, 0x00040000000200, x7, 600, x1)

inst_93:
// rs2_w0_val == 16, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffffff7f;  op2val:0xfffffffe00000010
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x800000ffffff7f, 0xfffffffe00000010, x7, 608, x1)

inst_94:
// rs2_w0_val == 2, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000040;  op2val:0xffefffff00000002
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x01000000000040, 0xffefffff00000002, x7, 616, x1)

inst_95:
// rs2_w0_val == 0, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00000009;  op2val:0xffffffef00000000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000009, 0xffffffef00000000, x7, 624, x1)

inst_96:
// rs1_w1_val == 1431655765, rs2_w0_val == 1073741824
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555ffffefff;  op2val:0x00040040000000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x55555555ffffefff, 0x00040040000000, x7, 632, x1)

inst_97:
// rs1_w1_val == 2147483647, rs1_w0_val == -33554433
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffdffffff;  op2val:0x10000000000800
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x7ffffffffdffffff, 0x10000000000800, x7, 640, x1)

inst_98:
// rs1_w1_val == -67108865, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff7fffffff;  op2val:0x20000000ffff7fff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfbffffff7fffffff, 0x20000000ffff7fff, x7, 648, x1)

inst_99:
// rs1_w1_val == -65537, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000400;  op2val:0xfffffffeffff7fff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000400, 0xfffffffeffff7fff, x7, 656, x1)

inst_100:
// rs1_w1_val == -32769, rs1_w0_val == -4194305
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffbfffff;  op2val:0x00008000000008
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xffff7fffffbfffff, 0x00008000000008, x7, 664, x1)

inst_101:
// rs1_w1_val == -8193, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000080;  op2val:0xfffff7ff00020000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000080, 0xfffff7ff00020000, x7, 672, x1)

inst_102:
// rs1_w1_val == -17, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef02000000;  op2val:0xffffbfff04000000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xffffffef02000000, 0xffffbfff04000000, x7, 680, x1)

inst_103:
// rs1_w1_val == -3, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffffdff;  op2val:0x00004000000020
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffffdff, 0x00004000000020, x7, 688, x1)

inst_104:
// rs1_w1_val == -2, rs2_w0_val == -268435457
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffec0000000;  op2val:0xfffffeffefffffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffec0000000, 0xfffffeffefffffff, x7, 696, x1)

inst_105:
// rs1_w1_val == -2147483648, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffffeff;  op2val:0xfffffff600000008
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x80000000fffffeff, 0xfffffff600000008, x7, 704, x1)

inst_106:
// rs1_w1_val == 1073741824, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000002000000;  op2val:0xaaaaaaaaffdfffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x4000000002000000, 0xaaaaaaaaffdfffff, x7, 712, x1)

inst_107:
// rs1_w1_val == 268435456, rs2_w0_val == -17
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000005;  op2val:0x000000ffffffef
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x1000000000000005, 0x000000ffffffef, x7, 720, x1)

inst_108:
// rs1_w1_val == 134217728, rs2_w0_val == -4097
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fbffffff;  op2val:0xffff7fffffffefff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x8000000fbffffff, 0xffff7fffffffefff, x7, 728, x1)

inst_109:
// rs1_w1_val == 67108864, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffffd;  op2val:0x00800000000040
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x4000000fffffffd, 0x00800000000040, x7, 736, x1)

inst_110:
// rs1_w1_val == 524288, rs2_w0_val == -3
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffdff;  op2val:0xfffffff6fffffffd
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x080000fffffdff, 0xfffffff6fffffffd, x7, 744, x1)

inst_111:
// rs1_w1_val == 131072, rs2_w0_val == -1073741825
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000200000;  op2val:0x40000000bfffffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x02000000200000, 0x40000000bfffffff, x7, 752, x1)

inst_112:
// rs1_w1_val == 4096, rs1_w0_val == -16385
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffffbfff;  op2val:0xffffffef00000007
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x001000ffffbfff, 0xffffffef00000007, x7, 760, x1)

inst_113:
// rs1_w1_val == 2048, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800f7ffffff;  op2val:0xfdffffffffdfffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x000800f7ffffff, 0xfdffffffffdfffff, x7, 768, x1)

inst_114:
// rs1_w1_val == 128, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000020000;  op2val:0xffffffff3fffffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x00008000020000, 0xffffffff3fffffff, x7, 776, x1)

inst_115:
// rs1_w1_val == 64, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040fffeffff;  op2val:0xffbffffffffff7ff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x000040fffeffff, 0xffbffffffffff7ff, x7, 784, x1)

inst_116:
// rs2_w0_val == 1431655765, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000008;  op2val:0xfffffbff55555555
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000008, 0xfffffbff55555555, x7, 792, x1)

inst_117:
// rs1_w1_val == 16, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000107fffffff;  op2val:0xfffffffb55555555
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x0000107fffffff, 0xfffffffb55555555, x7, 800, x1)

inst_118:
// rs2_w0_val == -67108865, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffffff6;  op2val:0xfffffff6fbffffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x000800fffffff6, 0xfffffff6fbffffff, x7, 808, x1)

inst_119:
// rs1_w1_val == -1, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff7fffffff;  op2val:0xffffdffffeffffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xffffffff7fffffff, 0xffffdffffeffffff, x7, 816, x1)

inst_120:
// rs2_w0_val == -4194305, rs1_w0_val == -8193
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020ffffdfff;  op2val:0x1000000ffbfffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x000020ffffdfff, 0x1000000ffbfffff, x7, 824, x1)

inst_121:
// rs2_w0_val == -1048577, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd02000000;  op2val:0x000008ffefffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffd02000000, 0x000008ffefffff, x7, 832, x1)

inst_122:
// rs2_w0_val == -65537, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000000001;  op2val:0xfffefffffffeffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x00400000000001, 0xfffefffffffeffff, x7, 840, x1)

inst_123:
// rs1_w0_val == -16777217, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffeffffff;  op2val:0xffdffffffffffff8
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfdfffffffeffffff, 0xffdffffffffffff8, x7, 848, x1)

inst_124:
// rs1_w0_val == -8388609, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002ff7fffff;  op2val:0xffffffef10000000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x000002ff7fffff, 0xffffffef10000000, x7, 856, x1)

inst_125:
// rs2_w0_val == -8193, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000040;  op2val:0xffffefffffffdfff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffffff800000040, 0xffffefffffffdfff, x7, 864, x1)

inst_126:
// rs1_w0_val == -2097153, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffdfffff;  op2val:0x80000000c0000000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffbffdfffff, 0x80000000c0000000, x7, 872, x1)

inst_127:
// rs2_w0_val == -513, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000008000000;  op2val:0x7ffffffffffffdff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xc000000008000000, 0x7ffffffffffffdff, x7, 880, x1)

inst_128:
// rs2_w0_val == -129, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000001;  op2val:0xfffdffffffffff7f
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000001, 0xfffdffffffffff7f, x7, 888, x1)

inst_129:
// rs1_w0_val == -2049, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8fffff7ff;  op2val:0xfdffffff00000007
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffffff8fffff7ff, 0xfdffffff00000007, x7, 896, x1)

inst_130:
// rs2_w0_val == -2, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff7fffffff;  op2val:0xfffffffafffffffe
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff7fffffff, 0xfffffffafffffffe, x7, 904, x1)

inst_131:
// rs1_w0_val == -65, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffffbf;  op2val:0xfffffff9fffdffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffffffbf, 0xfffffff9fffdffff, x7, 912, x1)

inst_132:
// rs1_w0_val == -17, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffffffef;  op2val:0xc000000000000040
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x000008ffffffef, 0xc000000000000040, x7, 920, x1)

inst_133:
// rs1_w0_val == 1073741824, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000040000000;  op2val:0x8000000fffffeff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x800000040000000, 0x8000000fffffeff, x7, 928, x1)

inst_134:
// rs1_w1_val == 33554432, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000002;  op2val:0x00040000002000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x200000000000002, 0x00040000002000, x7, 936, x1)

inst_135:
// rs2_w0_val == 1048576, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000feffffff;  op2val:0x00002000100000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0x1000000feffffff, 0x00002000100000, x7, 944, x1)

inst_136:
// rs2_w0_val == 524288, 
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcfffffff7;  op2val:0x00000900080000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffcfffffff7, 0x00000900080000, x7, 952, x1)

inst_137:
// rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val == 4194304, rs1_w1_val == -9, rs2_w0_val == -536870913, rs2_w1_val == -513
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700400000;  op2val:0xfffffdffdfffffff
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xfffffff700400000, 0xfffffdffdfffffff, x7, 960, x1)

inst_138:
// rs2_w1_val == -1048577, rs2_w0_val == 16777216, rs1_w1_val == -1431655766
// opcode: rstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaac0000000;  op2val:0xffefffff01000000
TEST_RR_OP(rstas32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaac0000000, 0xffefffff01000000, x7, 968, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 122*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
