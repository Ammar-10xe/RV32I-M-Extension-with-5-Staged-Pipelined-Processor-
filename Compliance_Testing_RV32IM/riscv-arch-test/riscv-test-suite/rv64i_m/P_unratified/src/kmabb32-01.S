
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmabb32 instruction of the RISC-V RV64PZicsr extension for the kmabb32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmabb32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x10,signature_x10_1)

inst_0:
// rs1 == rd != rs2, rs1==x20, rs2==x5, rd==x20, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val == 2097152, rs2_w1_val == -1025, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w0_val == 2
// opcode: kmabb32 ; op1:x20; op2:x5; dest:x20; op1val:0x20000080000000;  op2val:0xfffffbff00000002
TEST_PKRR_OP(kmabb32, x20, x20, x5, 0x0000000000000000, 0x20000080000000, 0xfffffbff00000002, x20, x10, 0, x12)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x26, rs2==x28, rd==x3, rs1_w1_val == rs2_w1_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val == -16385, rs2_w0_val == -1073741825
// opcode: kmabb32 ; op1:x26; op2:x28; dest:x3; op1val:0xfffffff6ffffbfff;  op2val:0xfffffff6bfffffff
TEST_PKRR_OP(kmabb32, x3, x26, x28, 0x0000000000000000, 0xfffffff6ffffbfff, 0xfffffff6bfffffff, x26, x10, 16, x12)

inst_2:
// rs1 == rs2 != rd, rs1==x1, rs2==x1, rd==x5, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == 33554432, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w0_val == -9, rs2_w1_val == 131072, rs1_w1_val == -16777217
// opcode: kmabb32 ; op1:x1; op2:x1; dest:x5; op1val:0xfeffffff02000000;  op2val:0x020000fffffff7
TEST_PKRR_OP(kmabb32, x5, x1, x1, 0x0000000000000000, 0xfeffffff02000000, 0x020000fffffff7, x1, x10, 32, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x2, rs2==x2, rd==x2, rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w0_val == 64, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 512, rs2_w1_val == 1, rs1_w0_val == 512
// opcode: kmabb32 ; op1:x2; op2:x2; dest:x2; op1val:0x00020000000200;  op2val:0x00000100000040
TEST_PKRR_OP(kmabb32, x2, x2, x2, 0x0000000000000000, 0x00020000000200, 0x00000100000040, x2, x10, 48, x12)

inst_4:
// rs2 == rd != rs1, rs1==x30, rs2==x7, rd==x7, rs1_w0_val == rs2_w0_val, rs1_w1_val == -1025
// opcode: kmabb32 ; op1:x30; op2:x7; dest:x7; op1val:0xfffffbff00000007;  op2val:0xfffffffc00000007
TEST_PKRR_OP(kmabb32, x7, x30, x7, 0x0000000000000000, 0xfffffbff00000007, 0xfffffffc00000007, x30, x10, 64, x12)

inst_5:
// rs1==x19, rs2==x18, rd==x16, rs2_w1_val == -1431655766, rs1_w1_val == -268435457, rs1_w0_val == 268435456, rs2_w0_val == -134217729
// opcode: kmabb32 ; op1:x19; op2:x18; dest:x16; op1val:0xefffffff10000000;  op2val:0xaaaaaaaaf7ffffff
TEST_PKRR_OP(kmabb32, x16, x19, x18, 0x0000000000000000, 0xefffffff10000000, 0xaaaaaaaaf7ffffff, x19, x10, 80, x12)

inst_6:
// rs1==x16, rs2==x19, rd==x30, rs2_w1_val == 1431655765, rs1_w1_val == 4096
// opcode: kmabb32 ; op1:x16; op2:x19; dest:x30; op1val:0x00100000000003;  op2val:0x55555555fffffff9
TEST_PKRR_OP(kmabb32, x30, x16, x19, 0x0000000000000000, 0x00100000000003, 0x55555555fffffff9, x16, x10, 96, x12)

inst_7:
// rs1==x31, rs2==x21, rd==x15, rs2_w1_val == 2147483647, rs2_w0_val == -1025, rs1_w0_val == 32768
// opcode: kmabb32 ; op1:x31; op2:x21; dest:x15; op1val:0xfffffff600008000;  op2val:0x7ffffffffffffbff
TEST_PKRR_OP(kmabb32, x15, x31, x21, 0x0000000000000000, 0xfffffff600008000, 0x7ffffffffffffbff, x31, x10, 112, x12)

inst_8:
// rs1==x11, rs2==x8, rd==x6, rs2_w1_val == -1073741825, rs1_w0_val == -129, rs1_w1_val == 8388608
// opcode: kmabb32 ; op1:x11; op2:x8; dest:x6; op1val:0x800000ffffff7f;  op2val:0xbfffffff00000006
TEST_PKRR_OP(kmabb32, x6, x11, x8, 0x0000000000000000, 0x800000ffffff7f, 0xbfffffff00000006, x11, x10, 128, x12)

inst_9:
// rs1==x9, rs2==x4, rd==x21, rs2_w1_val == -536870913, rs1_w1_val == 1073741824, rs2_w0_val == -17, rs1_w0_val == 67108864
// opcode: kmabb32 ; op1:x9; op2:x4; dest:x21; op1val:0x4000000004000000;  op2val:0xdfffffffffffffef
TEST_PKRR_OP(kmabb32, x21, x9, x4, 0x0000000000000000, 0x4000000004000000, 0xdfffffffffffffef, x9, x10, 144, x12)

inst_10:
// rs1==x7, rs2==x24, rd==x25, rs2_w1_val == -268435457, rs1_w0_val == 8
// opcode: kmabb32 ; op1:x7; op2:x24; dest:x25; op1val:0x00000500000008;  op2val:0xeffffffffffffffc
TEST_PKRR_OP(kmabb32, x25, x7, x24, 0x0000000000000000, 0x00000500000008, 0xeffffffffffffffc, x7, x10, 160, x12)

inst_11:
// rs1==x8, rs2==x3, rd==x29, rs2_w1_val == -134217729, rs2_w0_val == -16777217, rs1_w1_val == -131073, rs1_w0_val == -9
// opcode: kmabb32 ; op1:x8; op2:x3; dest:x29; op1val:0xfffdfffffffffff7;  op2val:0xf7fffffffeffffff
TEST_PKRR_OP(kmabb32, x29, x8, x3, 0x0000000000000000, 0xfffdfffffffffff7, 0xf7fffffffeffffff, x8, x10, 176, x12)

inst_12:
// rs1==x25, rs2==x26, rd==x14, rs2_w1_val == -67108865, rs1_w0_val == 16384, rs2_w0_val == -1
// opcode: kmabb32 ; op1:x25; op2:x26; dest:x14; op1val:0xfffffffa00004000;  op2val:0xfbffffffffffffff
TEST_PKRR_OP(kmabb32, x14, x25, x26, 0x0000000000000000, 0xfffffffa00004000, 0xfbffffffffffffff, x25, x10, 192, x12)

inst_13:
// rs1==x3, rs2==x17, rd==x13, rs2_w1_val == -33554433, rs2_w0_val == 131072, rs1_w1_val == 32, rs1_w0_val == 1024
// opcode: kmabb32 ; op1:x3; op2:x17; dest:x13; op1val:0x00002000000400;  op2val:0xfdffffff00020000
TEST_PKRR_OP(kmabb32, x13, x3, x17, 0x0000000000000000, 0x00002000000400, 0xfdffffff00020000, x3, x10, 208, x12)

inst_14:
// rs1==x13, rs2==x20, rd==x1, rs2_w1_val == -16777217, rs2_w0_val == -65537
// opcode: kmabb32 ; op1:x13; op2:x20; dest:x1; op1val:0xfffffff8fffffff9;  op2val:0xfefffffffffeffff
TEST_PKRR_OP(kmabb32, x1, x13, x20, 0x0000000000000000, 0xfffffff8fffffff9, 0xfefffffffffeffff, x13, x10, 224, x2)

inst_15:
// rs1==x21, rs2==x13, rd==x23, rs2_w1_val == -8388609, rs1_w0_val == -33554433, rs2_w0_val == 16, rs1_w1_val == -2147483648
// opcode: kmabb32 ; op1:x21; op2:x13; dest:x23; op1val:0x80000000fdffffff;  op2val:0xff7fffff00000010
TEST_PKRR_OP(kmabb32, x23, x21, x13, 0x0000000000000000, 0x80000000fdffffff, 0xff7fffff00000010, x21, x10, 240, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:
// rs1==x14, rs2==x30, rd==x24, rs2_w1_val == -4194305, 
// opcode: kmabb32 ; op1:x14; op2:x30; dest:x24; op1val:0x00000900000200;  op2val:0xffbfffff00000002
TEST_PKRR_OP(kmabb32, x24, x14, x30, 0x0000000000000000, 0x00000900000200, 0xffbfffff00000002, x14, x1, 0, x2)

inst_17:
// rs1==x17, rs2==x14, rd==x27, rs2_w1_val == -2097153, rs1_w0_val == -1073741825, rs1_w1_val == 65536
// opcode: kmabb32 ; op1:x17; op2:x14; dest:x27; op1val:0x010000bfffffff;  op2val:0xffdffffffffffff8
TEST_PKRR_OP(kmabb32, x27, x17, x14, 0x0000000000000000, 0x010000bfffffff, 0xffdffffffffffff8, x17, x1, 16, x2)

inst_18:
// rs1==x28, rs2==x22, rd==x17, rs2_w1_val == -1048577, rs1_w0_val == -5, rs2_w0_val == 2097152
// opcode: kmabb32 ; op1:x28; op2:x22; dest:x17; op1val:0xfffdfffffffffffb;  op2val:0xffefffff00200000
TEST_PKRR_OP(kmabb32, x17, x28, x22, 0x0000000000000000, 0xfffdfffffffffffb, 0xffefffff00200000, x28, x1, 32, x2)

inst_19:
// rs1==x10, rs2==x0, rd==x8, rs2_w1_val == -524289, rs1_w1_val == 1
// opcode: kmabb32 ; op1:x10; op2:x0; dest:x8; op1val:0x00000100000006;  op2val:0xfff7fffffffffff9
TEST_PKRR_OP(kmabb32, x8, x10, x0, 0x0000000000000000, 0x00000100000006, 0xfff7fffffffffff9, x10, x1, 48, x2)

inst_20:
// rs1==x0, rs2==x25, rd==x18, rs2_w1_val == -262145, rs1_w1_val == -5
// opcode: kmabb32 ; op1:x0; op2:x25; dest:x18; op1val:0xfffffffb00000400;  op2val:0xfffbffff00000002
TEST_PKRR_OP(kmabb32, x18, x0, x25, 0x0000000000000000, 0xfffffffb00000400, 0xfffbffff00000002, x0, x1, 64, x2)

inst_21:
// rs1==x6, rs2==x27, rd==x10, rs2_w1_val == -131073, rs1_w0_val == -67108865, rs1_w1_val == -257, rs2_w0_val == 8
// opcode: kmabb32 ; op1:x6; op2:x27; dest:x10; op1val:0xfffffefffbffffff;  op2val:0xfffdffff00000008
TEST_PKRR_OP(kmabb32, x10, x6, x27, 0x0000000000000000, 0xfffffefffbffffff, 0xfffdffff00000008, x6, x1, 80, x2)

inst_22:
// rs1==x29, rs2==x6, rd==x31, rs2_w1_val == -65537, rs1_w1_val == 67108864
// opcode: kmabb32 ; op1:x29; op2:x6; dest:x31; op1val:0x400000000000200;  op2val:0xfffeffffffffffef
TEST_PKRR_OP(kmabb32, x31, x29, x6, 0x0000000000000000, 0x400000000000200, 0xfffeffffffffffef, x29, x1, 96, x2)

inst_23:
// rs1==x27, rs2==x16, rd==x12, rs2_w1_val == -32769, rs2_w0_val == 262144, rs1_w1_val == 2048
// opcode: kmabb32 ; op1:x27; op2:x16; dest:x12; op1val:0x00080000000009;  op2val:0xffff7fff00040000
TEST_PKRR_OP(kmabb32, x12, x27, x16, 0x0000000000000000, 0x00080000000009, 0xffff7fff00040000, x27, x1, 112, x2)

inst_24:
// rs1==x23, rs2==x11, rd==x28, rs2_w1_val == -16385, rs1_w0_val == -1, rs2_w0_val == 536870912
// opcode: kmabb32 ; op1:x23; op2:x11; dest:x28; op1val:0x000001ffffffff;  op2val:0xffffbfff20000000
TEST_PKRR_OP(kmabb32, x28, x23, x11, 0x0000000000000000, 0x000001ffffffff, 0xffffbfff20000000, x23, x1, 128, x2)

inst_25:
// rs1==x12, rs2==x9, rd==x19, rs2_w1_val == -8193, rs1_w1_val == 524288, rs1_w0_val == 134217728
// opcode: kmabb32 ; op1:x12; op2:x9; dest:x19; op1val:0x08000008000000;  op2val:0xffffdfff20000000
TEST_PKRR_OP(kmabb32, x19, x12, x9, 0x0000000000000000, 0x08000008000000, 0xffffdfff20000000, x12, x1, 144, x2)

inst_26:
// rs1==x4, rs2==x23, rd==x22, rs2_w1_val == -4097, rs1_w1_val == 16384, rs1_w0_val == -2, rs2_w0_val == -129
// opcode: kmabb32 ; op1:x4; op2:x23; dest:x22; op1val:0x004000fffffffe;  op2val:0xffffefffffffff7f
TEST_PKRR_OP(kmabb32, x22, x4, x23, 0x0000000000000000, 0x004000fffffffe, 0xffffefffffffff7f, x4, x1, 160, x2)

inst_27:
// rs1==x22, rs2==x29, rd==x26, rs2_w1_val == -2049, rs1_w1_val == 268435456, rs2_w0_val == -16385
// opcode: kmabb32 ; op1:x22; op2:x29; dest:x26; op1val:0x1000000000000007;  op2val:0xfffff7ffffffbfff
TEST_PKRR_OP(kmabb32, x26, x22, x29, 0x0000000000000000, 0x1000000000000007, 0xfffff7ffffffbfff, x22, x1, 176, x2)

inst_28:
// rs1==x24, rs2==x12, rd==x11, rs2_w1_val == -513, rs1_w1_val == 16, rs2_w0_val == -32769
// opcode: kmabb32 ; op1:x24; op2:x12; dest:x11; op1val:0x00001080000000;  op2val:0xfffffdffffff7fff
TEST_PKRR_OP(kmabb32, x11, x24, x12, 0x0000000000000000, 0x00001080000000, 0xfffffdffffff7fff, x24, x1, 192, x2)

inst_29:
// rs1==x5, rs2==x31, rd==x0, rs2_w1_val == -257, rs1_w1_val == -65, rs2_w0_val == 4194304
// opcode: kmabb32 ; op1:x5; op2:x31; dest:x0; op1val:0xffffffbffffffff7;  op2val:0xfffffeff00400000
TEST_PKRR_OP(kmabb32, x0, x5, x31, 0x0000000000000000, 0xffffffbffffffff7, 0xfffffeff00400000, x5, x1, 208, x2)

inst_30:
// rs1==x18, rs2==x15, rd==x4, rs2_w1_val == -129, rs1_w0_val == 2, rs2_w0_val == -4194305
// opcode: kmabb32 ; op1:x18; op2:x15; dest:x4; op1val:0x4000000000000002;  op2val:0xffffff7fffbfffff
TEST_PKRR_OP(kmabb32, x4, x18, x15, 0x0000000000000000, 0x4000000000000002, 0xffffff7fffbfffff, x18, x1, 224, x2)

inst_31:
// rs1==x15, rs2==x10, rd==x9, rs2_w1_val == -65, rs2_w0_val == 16384
// opcode: kmabb32 ; op1:x15; op2:x10; dest:x9; op1val:0x0000013fffffff;  op2val:0xffffffbf00004000
TEST_PKRR_OP(kmabb32, x9, x15, x10, 0x0000000000000000, 0x0000013fffffff, 0xffffffbf00004000, x15, x1, 240, x2)

inst_32:
// rs2_w1_val == -33, rs1_w1_val == -1073741825, rs2_w0_val == -8388609, rs1_w0_val == -4097
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffefff;  op2val:0xffffffdfff7fffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffefff, 0xffffffdfff7fffff, x30, x1, 256, x2)

inst_33:
// rs2_w1_val == -17, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffffffc;  op2val:0xffffffef00000003
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x004000fffffffc, 0xffffffef00000003, x30, x1, 272, x2)

inst_34:
// rs2_w1_val == -9, rs1_w1_val == -4097
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff3fffffff;  op2val:0xfffffff700000007
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xffffefff3fffffff, 0xfffffff700000007, x30, x1, 288, x2)

inst_35:
// rs2_w1_val == -5, rs2_w0_val == 4, rs1_w1_val == -1431655766
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaabfffffff;  op2val:0xfffffffb00000004
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaabfffffff, 0xfffffffb00000004, x30, x1, 304, x2)

inst_36:
// rs2_w1_val == -3, rs1_w0_val == -131073, rs2_w0_val == 65536, rs1_w1_val == -524289
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffdffff;  op2val:0xfffffffd00010000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffdffff, 0xfffffffd00010000, x30, x1, 320, x2)

inst_37:
// rs2_w1_val == -2, rs1_w1_val == -2, rs1_w0_val == 4
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000004;  op2val:0xfffffffe00000002
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000004, 0xfffffffe00000002, x30, x1, 336, x2)

inst_38:
// rs2_w1_val == -2147483648, rs1_w0_val == 131072, rs1_w1_val == 131072
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000020000;  op2val:0x8000000000000007
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x02000000020000, 0x8000000000000007, x30, x1, 352, x2)

inst_39:
// rs2_w1_val == 1073741824, rs1_w1_val == 262144, rs1_w0_val == -536870913
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000dfffffff;  op2val:0x4000000000000005
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x040000dfffffff, 0x4000000000000005, x30, x1, 368, x2)

inst_40:
// rs2_w1_val == 536870912, rs1_w1_val == -65537
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffffffff9;  op2val:0x20000000ffffbfff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfffefffffffffff9, 0x20000000ffffbfff, x30, x1, 384, x2)

inst_41:
// rs2_w1_val == 268435456, rs1_w0_val == 536870912, rs2_w0_val == 524288
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000020000000;  op2val:0x1000000000080000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xc000000020000000, 0x1000000000080000, x30, x1, 400, x2)

inst_42:
// rs2_w1_val == 134217728, rs1_w1_val == -1048577
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff3fffffff;  op2val:0x8000000ffffffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xffefffff3fffffff, 0x8000000ffffffff, x30, x1, 416, x2)

inst_43:
// rs2_w1_val == 67108864, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020ffffff7f;  op2val:0x400000000000040
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x000020ffffff7f, 0x400000000000040, x30, x1, 432, x2)

inst_44:
// rs2_w1_val == 33554432, rs2_w0_val == 16777216, rs1_w0_val == -16777217
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffeffffff;  op2val:0x200000001000000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfffefffffeffffff, 0x200000001000000, x30, x1, 448, x2)

inst_45:
// rs2_w1_val == 16777216, rs2_w0_val == -3, rs1_w0_val == -17, rs1_w1_val == 0
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000ffffffef;  op2val:0x1000000fffffffd
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x000000ffffffef, 0x1000000fffffffd, x30, x1, 464, x2)

inst_46:
// rs2_w1_val == 8388608, rs1_w1_val == 33554432
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000ffffffff;  op2val:0x80000000000003
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x2000000ffffffff, 0x80000000000003, x30, x1, 480, x2)

inst_47:
// rs2_w1_val == 4194304, rs1_w1_val == 16777216
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000ffffffef;  op2val:0x40000000000005
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x1000000ffffffef, 0x40000000000005, x30, x1, 496, x2)

inst_48:
// rs2_w1_val == 2097152, rs2_w0_val == -131073
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffdffff;  op2val:0x200000fffdffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x80000000fffdffff, 0x200000fffdffff, x30, x1, 512, x2)

inst_49:
// rs2_w1_val == 1048576, rs1_w0_val == 4194304
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00400000;  op2val:0x10000000000007
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00400000, 0x10000000000007, x30, x1, 528, x2)

inst_50:
// rs2_w1_val == 524288, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000003;  op2val:0x080000f7ffffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xefffffff00000003, 0x080000f7ffffff, x30, x1, 544, x2)

inst_51:
// rs2_w1_val == 262144, rs2_w0_val == -257, rs1_w0_val == 1073741824
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff40000000;  op2val:0x040000fffffeff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xefffffff40000000, 0x040000fffffeff, x30, x1, 560, x2)

inst_52:
// rs2_w1_val == 65536, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200fdffffff;  op2val:0x01000000000008
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x000200fdffffff, 0x01000000000008, x30, x1, 576, x2)

inst_53:
// rs1_w0_val == 16777216, rs2_w1_val == 16
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000001000000;  op2val:0x00001000000005
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x02000001000000, 0x00001000000005, x30, x1, 592, x2)

inst_54:
// rs1_w0_val == 8388608, rs2_w0_val == -513
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000800000;  op2val:0xeffffffffffffdff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x02000000800000, 0xeffffffffffffdff, x30, x1, 608, x2)

inst_55:
// rs1_w0_val == 2097152, rs1_w1_val == 4194304
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000200000;  op2val:0x20000000000009
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x40000000200000, 0x20000000000009, x30, x1, 624, x2)

inst_56:
// rs1_w0_val == 1048576, rs2_w0_val == 1048576
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00100000;  op2val:0xc000000000100000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00100000, 0xc000000000100000, x30, x1, 640, x2)

inst_57:
// rs1_w0_val == 524288, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000080000;  op2val:0xfffffffd00000010
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x00400000080000, 0xfffffffd00000010, x30, x1, 656, x2)

inst_58:
// rs1_w0_val == 262144, rs1_w1_val == -17
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00040000;  op2val:0x4000000bfffffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xffffffef00040000, 0x4000000bfffffff, x30, x1, 672, x2)

inst_59:
// rs1_w0_val == 65536, rs2_w1_val == 16384, rs1_w1_val == 8
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800010000;  op2val:0x004000fffffff9
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x00000800010000, 0x004000fffffff9, x30, x1, 688, x2)

inst_60:
// rs1_w0_val == 8192, rs2_w0_val == 67108864
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00002000;  op2val:0x00400004000000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00002000, 0x00400004000000, x30, x1, 704, x2)

inst_61:
// rs1_w0_val == 4096, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000001000;  op2val:0xfffffffdf7ffffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x200000000001000, 0xfffffffdf7ffffff, x30, x1, 720, x2)

inst_62:
// rs1_w0_val == 2048, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000800;  op2val:0xfffffffb00000010
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000800, 0xfffffffb00000010, x30, x1, 736, x2)

inst_63:
// rs1_w0_val == 256, rs1_w1_val == -134217729
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000100;  op2val:0xfdfffffffffffffc
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000100, 0xfdfffffffffffffc, x30, x1, 752, x2)

inst_64:
// rs1_w0_val == 128, rs2_w0_val == 0
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000080;  op2val:0xff7fffff00000000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x40000000000080, 0xff7fffff00000000, x30, x1, 768, x2)

inst_65:
// rs1_w0_val == 64, rs2_w0_val == 1431655765
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000040;  op2val:0x02000055555555
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x00001000000040, 0x02000055555555, x30, x1, 784, x2)

inst_66:
// rs1_w0_val == 32, rs1_w1_val == 32768
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000020;  op2val:0xffbffffffffffff8
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x00800000000020, 0xffbffffffffffff8, x30, x1, 800, x2)

inst_67:
// rs1_w0_val == 16, rs2_w0_val == -67108865, rs1_w1_val == 1048576
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000010;  op2val:0x080000fbffffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x10000000000010, 0x080000fbffffff, x30, x1, 816, x2)

inst_68:
// rs1_w0_val == 1, rs2_w0_val == -5, rs1_w1_val == 64
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000001;  op2val:0xeffffffffffffffb
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x00004000000001, 0xeffffffffffffffb, x30, x1, 832, x2)

inst_69:
// rs1_w0_val == 0, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000000;  op2val:0x1000000000000009
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x400000000000000, 0x1000000000000009, x30, x1, 848, x2)

inst_70:
// rs2_w1_val == 32768, rs1_w1_val == 128
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080fffffffe;  op2val:0x008000fffdffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x000080fffffffe, 0x008000fffdffff, x30, x1, 864, x2)

inst_71:
// rs2_w1_val == 8192, rs1_w1_val == 256
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010001000000;  op2val:0x002000fffffbff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x00010001000000, 0x002000fffffbff, x30, x1, 880, x2)

inst_72:
// rs2_w1_val == 4096, rs2_w0_val == -268435457, rs1_w1_val == -129
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f40000000;  op2val:0x001000efffffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xffffff7f40000000, 0x001000efffffff, x30, x1, 896, x2)

inst_73:
// rs2_w1_val == 2048, rs1_w1_val == -262145
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000200;  op2val:0x00080000000007
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000200, 0x00080000000007, x30, x1, 912, x2)

inst_74:
// rs2_w1_val == 1024, rs2_w0_val == -524289
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffffffe;  op2val:0x000400fff7ffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x2000000fffffffe, 0x000400fff7ffff, x30, x1, 928, x2)

inst_75:
// rs2_w1_val == 512, rs1_w0_val == -513
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000fffffdff;  op2val:0x000200fffffeff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xc0000000fffffdff, 0x000200fffffeff, x30, x1, 944, x2)

inst_76:
// rs2_w1_val == 256, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000010;  op2val:0x000100fffffffc
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xefffffff00000010, 0x000100fffffffc, x30, x1, 960, x2)

inst_77:
// rs2_w1_val == 128, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffffe;  op2val:0x000080bfffffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x080000fffffffe, 0x000080bfffffff, x30, x1, 976, x2)

inst_78:
// rs2_w1_val == 64, rs1_w1_val == -8193
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff04000000;  op2val:0x000040fffffff9
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xffffdfff04000000, 0x000040fffffff9, x30, x1, 992, x2)

inst_79:
// rs2_w1_val == 32, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffffdff;  op2val:0x000020fffeffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xffffffbffffffdff, 0x000020fffeffff, x30, x1, 1008, x2)

inst_80:
// rs2_w1_val == 8, rs1_w0_val == -1431655766, rs2_w0_val == 32768
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200aaaaaaaa;  op2val:0x00000800008000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x000200aaaaaaaa, 0x00000800008000, x30, x1, 1024, x2)

inst_81:
// rs2_w1_val == 4, rs1_w1_val == -33
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000004;  op2val:0x000004ffffff7f
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000004, 0x000004ffffff7f, x30, x1, 1040, x2)

inst_82:
// rs2_w1_val == 2, rs2_w0_val == 33554432, rs1_w0_val == 1431655765
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff55555555;  op2val:0x00000202000000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfffffeff55555555, 0x00000202000000, x30, x1, 1056, x2)

inst_83:
// rs2_w1_val == 0, rs1_w0_val == -32769, rs2_w0_val == -1048577
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000ffff7fff;  op2val:0x000000ffefffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x040000ffff7fff, 0x000000ffefffff, x30, x1, 1072, x2)

inst_84:
// rs2_w1_val == -1, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900000020;  op2val:0xffffffff00010000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfffffff900000020, 0xffffffff00010000, x30, x1, 1088, x2)

inst_85:
// rs2_w0_val == -1431655766, rs1_w0_val == -4194305
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffbfffff;  op2val:0xfeffffffaaaaaaaa
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xffffffbfffbfffff, 0xfeffffffaaaaaaaa, x30, x1, 1104, x2)

inst_86:
// rs2_w0_val == 8192, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000007;  op2val:0xffffffdf00002000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000007, 0xffffffdf00002000, x30, x1, 1120, x2)

inst_87:
// rs2_w0_val == 4096, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000200;  op2val:0x08000000001000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000200, 0x08000000001000, x30, x1, 1136, x2)

inst_88:
// rs2_w0_val == 2048, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000ffffffef;  op2val:0xffff7fff00000800
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x020000ffffffef, 0xffff7fff00000800, x30, x1, 1152, x2)

inst_89:
// rs2_w0_val == 1024, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900400000;  op2val:0xfffffff800000400
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x00000900400000, 0xfffffff800000400, x30, x1, 1168, x2)

inst_90:
// rs2_w0_val == 512, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffffffa;  op2val:0x00200000000200
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x000001fffffffa, 0x00200000000200, x30, x1, 1184, x2)

inst_91:
// rs2_w0_val == 256, rs1_w1_val == 1024
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040008000000;  op2val:0xfffffffe00000100
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x00040008000000, 0xfffffffe00000100, x30, x1, 1200, x2)

inst_92:
// rs2_w0_val == 128, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000005;  op2val:0xfffffbff00000080
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000005, 0xfffffbff00000080, x30, x1, 1216, x2)

inst_93:
// rs2_w0_val == 32, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafbffffff;  op2val:0xffefffff00000020
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafbffffff, 0xffefffff00000020, x30, x1, 1232, x2)

inst_94:
// rs2_w0_val == 1, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000feffffff;  op2val:0x200000000000001
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x2000000feffffff, 0x200000000000001, x30, x1, 1248, x2)

inst_95:
// rs1_w1_val == 1431655765, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fffffffc;  op2val:0xaaaaaaaa04000000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x55555555fffffffc, 0xaaaaaaaa04000000, x30, x1, 1264, x2)

inst_96:
// rs1_w1_val == 2147483647, rs2_w0_val == -33554433
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000200;  op2val:0x000008fdffffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000200, 0x000008fdffffff, x30, x1, 1280, x2)

inst_97:
// rs1_w1_val == -536870913, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffbfff;  op2val:0x00000902000000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffbfff, 0x00000902000000, x30, x1, 1296, x2)

inst_98:
// rs1_w1_val == -67108865, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffbfffffff;  op2val:0xffbffffffffffff8
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfbffffffbfffffff, 0xffbffffffffffff8, x30, x1, 1312, x2)

inst_99:
// rs1_w1_val == -33554433, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffffefff;  op2val:0x1000000ffffff7f
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfdffffffffffefff, 0x1000000ffffff7f, x30, x1, 1328, x2)

inst_100:
// rs1_w1_val == -8388609, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffffff7f;  op2val:0xfbffffff00000800
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xff7fffffffffff7f, 0xfbffffff00000800, x30, x1, 1344, x2)

inst_101:
// rs1_w1_val == -4194305, rs2_w0_val == 8388608
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffbfffff;  op2val:0xfffffffa00800000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xffbfffffffbfffff, 0xfffffffa00800000, x30, x1, 1360, x2)

inst_102:
// rs1_w1_val == -2097153, rs2_w0_val == 134217728
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff80000000;  op2val:0x00020008000000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xffdfffff80000000, 0x00020008000000, x30, x1, 1376, x2)

inst_103:
// rs1_w1_val == -32769, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000005;  op2val:0x000000fffeffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000005, 0x000000fffeffff, x30, x1, 1392, x2)

inst_104:
// rs1_w1_val == -16385, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffffb;  op2val:0xfffeffff00008000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffffb, 0xfffeffff00008000, x30, x1, 1408, x2)

inst_105:
// rs1_w1_val == -2049, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00400000;  op2val:0xfffffbff00020000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00400000, 0xfffffbff00020000, x30, x1, 1424, x2)

inst_106:
// rs1_w1_val == -513, rs1_w0_val == -268435457
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffefffffff;  op2val:0x200000000000002
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfffffdffefffffff, 0x200000000000002, x30, x1, 1440, x2)

inst_107:
// rs1_w1_val == -9, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fffffdff;  op2val:0x800000aaaaaaaa
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffffdff, 0x800000aaaaaaaa, x30, x1, 1456, x2)

inst_108:
// rs1_w1_val == -3, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000010;  op2val:0xefffffff02000000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000010, 0xefffffff02000000, x30, x1, 1472, x2)

inst_109:
// rs1_w1_val == 536870912, rs2_w0_val == -65, rs1_w0_val == -65
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffffffbf;  op2val:0x000100ffffffbf
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x20000000ffffffbf, 0x000100ffffffbf, x30, x1, 1488, x2)

inst_110:
// rs1_w1_val == 134217728, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000400;  op2val:0xfffffff820000000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x800000000000400, 0xfffffff820000000, x30, x1, 1504, x2)

inst_111:
// rs1_w1_val == 8192, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000003;  op2val:0x00010000000003
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x00200000000003, 0x00010000000003, x30, x1, 1520, x2)

inst_112:
// rs2_w0_val == 2147483647, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffffffe;  op2val:0x7fffffff7fffffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x008000fffffffe, 0x7fffffff7fffffff, x30, x1, 1536, x2)

inst_113:
// rs1_w1_val == 4, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400100000;  op2val:0x8000000fffffbff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x00000400100000, 0x8000000fffffbff, x30, x1, 1552, x2)

inst_114:
// rs2_w0_val == -536870913, rs1_w0_val == -257
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffeff;  op2val:0xfffffffbdfffffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffeff, 0xfffffffbdfffffff, x30, x1, 1568, x2)

inst_115:
// rs1_w1_val == 2, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002ffffefff;  op2val:0x8000000fffffdff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x000002ffffefff, 0x8000000fffffdff, x30, x1, 1584, x2)

inst_116:
// rs1_w1_val == -1, rs1_w0_val == -8193
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffdfff;  op2val:0x000007fffffdff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xffffffffffffdfff, 0x000007fffffdff, x30, x1, 1600, x2)

inst_117:
// rs1_w0_val == 2147483647, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000057fffffff;  op2val:0x10000000008000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x0000057fffffff, 0x10000000008000, x30, x1, 1616, x2)

inst_118:
// rs2_w0_val == -2097153, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffffffc;  op2val:0xfffffffbffdfffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x000400fffffffc, 0xfffffffbffdfffff, x30, x1, 1632, x2)

inst_119:
// rs1_w0_val == -134217729, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007f7ffffff;  op2val:0xfffffffc00400000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x000007f7ffffff, 0xfffffffc00400000, x30, x1, 1648, x2)

inst_120:
// rs2_w0_val == -262145, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004c0000000;  op2val:0xffffeffffffbffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x000004c0000000, 0xffffeffffffbffff, x30, x1, 1664, x2)

inst_121:
// rs1_w0_val == -8388609, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ff7fffff;  op2val:0x000009ffffbfff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x40000000ff7fffff, 0x000009ffffbfff, x30, x1, 1680, x2)

inst_122:
// rs2_w0_val == -8193, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff01000000;  op2val:0x000005ffffdfff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xdfffffff01000000, 0x000005ffffdfff, x30, x1, 1696, x2)

inst_123:
// rs1_w0_val == -2097153, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000ffdfffff;  op2val:0xffffffbfffff7fff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x10000000ffdfffff, 0xffffffbfffff7fff, x30, x1, 1712, x2)

inst_124:
// rs2_w0_val == -4097, rs1_w0_val == -1048577
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003ffefffff;  op2val:0x10000000ffffefff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x000003ffefffff, 0x10000000ffffefff, x30, x1, 1728, x2)

inst_125:
// rs2_w0_val == -2049, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005ffefffff;  op2val:0xffbffffffffff7ff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x000005ffefffff, 0xffbffffffffff7ff, x30, x1, 1744, x2)

inst_126:
// rs1_w0_val == -524289, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002fff7ffff;  op2val:0x080000dfffffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x000002fff7ffff, 0x080000dfffffff, x30, x1, 1760, x2)

inst_127:
// rs1_w0_val == -262145, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffbffff;  op2val:0x000400fdffffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x80000000fffbffff, 0x000400fdffffff, x30, x1, 1776, x2)

inst_128:
// rs1_w0_val == -65537, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffeffff;  op2val:0xaaaaaaaaffbfffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x000008fffeffff, 0xaaaaaaaaffbfffff, x30, x1, 1792, x2)

inst_129:
// rs2_w0_val == -33, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000002000;  op2val:0x1000000ffffffdf
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x00000000002000, 0x1000000ffffffdf, x30, x1, 1808, x2)

inst_130:
// rs1_w0_val == -2049, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000fffff7ff;  op2val:0xffffff7ffffbffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xc0000000fffff7ff, 0xffffff7ffffbffff, x30, x1, 1824, x2)

inst_131:
// rs1_w0_val == -1025, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffffbff;  op2val:0xfffffefffeffffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x000002fffffbff, 0xfffffefffeffffff, x30, x1, 1840, x2)

inst_132:
// rs2_w0_val == -2, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffbfff;  op2val:0x2000000fffffffe
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xffffdfffffffbfff, 0x2000000fffffffe, x30, x1, 1856, x2)

inst_133:
// rs2_w0_val == -2147483648, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007bfffffff;  op2val:0x00002080000000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x000007bfffffff, 0x00002080000000, x30, x1, 1872, x2)

inst_134:
// rs1_w0_val == -3, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffffffd;  op2val:0xefffffffdfffffff
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xffffffeffffffffd, 0xefffffffdfffffff, x30, x1, 1888, x2)

inst_135:
// rs2_w0_val == 1073741824, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006fffffff9;  op2val:0xfffffff740000000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x000006fffffff9, 0xfffffff740000000, x30, x1, 1904, x2)

inst_136:
// rs1_w0_val == -33, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffffdf;  op2val:0xfffffffc00100000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffffdf, 0xfffffffc00100000, x30, x1, 1920, x2)

inst_137:
// rs2_w0_val == 268435456, 
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffdffff;  op2val:0xfffffffd10000000
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x400000fffdffff, 0xfffffffd10000000, x30, x1, 1936, x2)

inst_138:
// rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == 33554432, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w0_val == -9, rs2_w1_val == 131072, rs1_w1_val == -16777217
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff02000000;  op2val:0x020000fffffff7
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfeffffff02000000, 0x020000fffffff7, x30, x1, 1952, x2)

inst_139:
// rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w0_val == 64, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 512, rs2_w1_val == 1, rs1_w0_val == 512
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000200;  op2val:0x00000100000040
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x00020000000200, 0x00000100000040, x30, x1, 1968, x2)

inst_140:
// rs2_w1_val == -524289, rs1_w1_val == 1
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000006;  op2val:0xfff7fffffffffff9
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0x00000100000006, 0xfff7fffffffffff9, x30, x1, 1984, x2)

inst_141:
// rs2_w1_val == -262145, rs1_w1_val == -5
// opcode: kmabb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000400;  op2val:0xfffbffff00000002
TEST_PKRR_OP(kmabb32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000400, 0xfffbffff00000002, x30, x1, 2000, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 252*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
