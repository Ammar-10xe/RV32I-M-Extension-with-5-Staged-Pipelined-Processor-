
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smsr64 instruction of the RISC-V RV64PZicsr extension for the smsr64 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smsr64)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x26, rs2==x23, rd==x26, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val, rs2_w0_val == -2049, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w1_val == -4097, rs2_w1_val == 67108864
// opcode: smsr64 ; op1:x26; op2:x23; dest:x26; op1val:0xffffefff80000000;  op2val:0x04000000fffff7ff
TEST_P64_PNN_OP(smsr64, x26, $rd_hi, x26, x23, 0x0000000000000000, $correctval_hi, 0xffffefff80000000, 0x04000000fffff7ff, x7, 0, x13)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x6, rs2==x3, rd==x12, rs1_w1_val == rs2_w1_val, rs1_w1_val == -2097153, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w0_val == 16, rs2_w1_val == -2097153
// opcode: smsr64 ; op1:x6; op2:x3; dest:x12; op1val:0xffdfffff00000010;  op2val:0xffdffffffffffff6
TEST_P64_PNN_OP(smsr64, x12, $rd_hi, x6, x3, 0x0000000000000000, $correctval_hi, 0xffdfffff00000010, 0xffdffffffffffff6, x7, 16, x13)

inst_2:
// rs1 == rs2 != rd, rs1==x18, rs2==x18, rd==x30, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val == 256, rs2_w1_val == -1048577, rs2_w0_val == 8388608, rs1_w0_val > 0 and rs2_w0_val > 0
// opcode: smsr64 ; op1:x18; op2:x18; dest:x30; op1val:0x0000000600000100;  op2val:0xffefffff00800000
TEST_P64_PNN_OP(smsr64, x30, $rd_hi, x18, x18, 0x0000000000000000, $correctval_hi, 0x0000000600000100, 0xffefffff00800000, x7, 32, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x14, rs2==x14, rd==x14, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 8, rs2_w0_val == -536870913, rs2_w1_val == 33554432
// opcode: smsr64 ; op1:x14; op2:x14; dest:x14; op1val:0x0000000800000003;  op2val:0x02000000dfffffff
TEST_P64_PNN_OP(smsr64, x14, $rd_hi, x14, x14, 0x0000000000000000, $correctval_hi, 0x0000000800000003, 0x02000000dfffffff, x7, 48, x13)

inst_4:
// rs2 == rd != rs1, rs1==x27, rs2==x28, rd==x28, rs1_w0_val == rs2_w0_val, rs2_w0_val == -131073, rs2_w1_val == -524289, rs1_w0_val == -131073
// opcode: smsr64 ; op1:x27; op2:x28; dest:x28; op1val:0xfffffff8fffdffff;  op2val:0xfff7fffffffdffff
TEST_P64_PNN_OP(smsr64, x28, $rd_hi, x27, x28, 0x0000000000000000, $correctval_hi, 0xfffffff8fffdffff, 0xfff7fffffffdffff, x7, 64, x13)

inst_5:
// rs1==x11, rs2==x15, rd==x6, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val == -3, rs2_w0_val == 2097152
// opcode: smsr64 ; op1:x11; op2:x15; dest:x6; op1val:0xfffffff9fffffffd;  op2val:0x0000000300200000
TEST_P64_PNN_OP(smsr64, x6, $rd_hi, x11, x15, 0x0000000000000000, $correctval_hi, 0xfffffff9fffffffd, 0x0000000300200000, x7, 80, x13)

inst_6:
// rs1==x9, rs2==x24, rd==x10, rs2_w1_val == -1431655766, rs2_w0_val == -33554433, rs1_w1_val == -129
// opcode: smsr64 ; op1:x9; op2:x24; dest:x10; op1val:0xffffff7f00000010;  op2val:0xaaaaaaaafdffffff
TEST_P64_PNN_OP(smsr64, x10, $rd_hi, x9, x24, 0x0000000000000000, $correctval_hi, 0xffffff7f00000010, 0xaaaaaaaafdffffff, x7, 96, x13)

inst_7:
// rs1==x17, rs2==x5, rd==x8, rs2_w1_val == 1431655765, rs1_w1_val == -8193, rs1_w0_val == -134217729, rs2_w0_val == 134217728
// opcode: smsr64 ; op1:x17; op2:x5; dest:x8; op1val:0xffffdffff7ffffff;  op2val:0x5555555508000000
TEST_P64_PNN_OP(smsr64, x8, $rd_hi, x17, x5, 0x0000000000000000, $correctval_hi, 0xffffdffff7ffffff, 0x5555555508000000, x7, 112, x13)

inst_8:
// rs1==x12, rs2==x30, rd==x4, rs2_w1_val == 2147483647, rs1_w0_val == -1025, rs1_w1_val == -1025, rs2_w0_val == -33
// opcode: smsr64 ; op1:x12; op2:x30; dest:x4; op1val:0xfffffbfffffffbff;  op2val:0x7fffffffffffffdf
TEST_P64_PNN_OP(smsr64, x4, $rd_hi, x12, x30, 0x0000000000000000, $correctval_hi, 0xfffffbfffffffbff, 0x7fffffffffffffdf, x7, 128, x13)

inst_9:
// rs1==x3, rs2==x29, rd==x2, rs2_w1_val == -1073741825, rs2_w0_val == 1431655765, rs1_w1_val == 16777216
// opcode: smsr64 ; op1:x3; op2:x29; dest:x2; op1val:0x0100000000000006;  op2val:0xbfffffff55555555
TEST_P64_PNN_OP(smsr64, x2, $rd_hi, x3, x29, 0x0000000000000000, $correctval_hi, 0x0100000000000006, 0xbfffffff55555555, x7, 144, x13)

inst_10:
// rs1==x16, rs2==x21, rd==x18, rs2_w1_val == -536870913, rs1_w0_val == -129, rs1_w1_val == 256, rs2_w0_val == -524289
// opcode: smsr64 ; op1:x16; op2:x21; dest:x18; op1val:0x00000100ffffff7f;  op2val:0xdffffffffff7ffff
TEST_P64_PNN_OP(smsr64, x18, $rd_hi, x16, x21, 0x0000000000000000, $correctval_hi, 0x00000100ffffff7f, 0xdffffffffff7ffff, x7, 160, x13)

inst_11:
// rs1==x10, rs2==x11, rd==x20, rs2_w1_val == -268435457, rs2_w0_val == 65536, rs1_w0_val == 1048576
// opcode: smsr64 ; op1:x10; op2:x11; dest:x20; op1val:0x0100000000100000;  op2val:0xefffffff00010000
TEST_P64_PNN_OP(smsr64, x20, $rd_hi, x10, x11, 0x0000000000000000, $correctval_hi, 0x0100000000100000, 0xefffffff00010000, x7, 176, x13)

inst_12:
// rs1==x29, rs2==x1, rd==x22, rs2_w1_val == -134217729, rs1_w0_val == -8388609, rs1_w1_val == -262145, rs2_w0_val == -2097153
// opcode: smsr64 ; op1:x29; op2:x1; dest:x22; op1val:0xfffbffffff7fffff;  op2val:0xf7ffffffffdfffff
TEST_P64_PNN_OP(smsr64, x22, $rd_hi, x29, x1, 0x0000000000000000, $correctval_hi, 0xfffbffffff7fffff, 0xf7ffffffffdfffff, x7, 192, x13)

inst_13:
// rs1==x25, rs2==x9, rd==x16, rs2_w1_val == -67108865, rs1_w1_val == 1024
// opcode: smsr64 ; op1:x25; op2:x9; dest:x16; op1val:0x000004003fffffff;  op2val:0xfbffffffffdfffff
TEST_P64_PNN_OP(smsr64, x16, $rd_hi, x25, x9, 0x0000000000000000, $correctval_hi, 0x000004003fffffff, 0xfbffffffffdfffff, x7, 208, x11)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_14:
// rs1==x0, rs2==x26, rd==x24, rs2_w1_val == -33554433, rs1_w1_val == -134217729, rs2_w0_val == 268435456
// opcode: smsr64 ; op1:x0; op2:x26; dest:x24; op1val:0xf7ffffffffffff7f;  op2val:0xfdffffff10000000
TEST_P64_PNN_OP(smsr64, x24, $rd_hi, x0, x26, 0x0000000000000000, $correctval_hi, 0xf7ffffffffffff7f, 0xfdffffff10000000, x3, 0, x11)

inst_15:
// rs1==x19, rs2==x27, rs2_w1_val == -16777217, rs2_w0_val == 4, rs1_w1_val == 67108864
// opcode: smsr64 ; op1:x19; op2:x27; dest:x22; op1val:0x04000000ff7fffff;  op2val:0xfeffffff00000004
TEST_P64_PNN_OP(smsr64, x22, $rd_hi, x19, x27, 0x0000000000000000, $correctval_hi, 0x04000000ff7fffff, 0xfeffffff00000004, x3, 16, x11)

inst_16:
// rs1==x21, rs2==x8, rs2_w1_val == -8388609, rs1_w1_val == -1048577, rs1_w0_val == -1073741825, rs2_w0_val == 1048576
// opcode: smsr64 ; op1:x21; op2:x8; dest:x22; op1val:0xffefffffbfffffff;  op2val:0xff7fffff00100000
TEST_P64_PNN_OP(smsr64, x22, $rd_hi, x21, x8, 0x0000000000000000, $correctval_hi, 0xffefffffbfffffff, 0xff7fffff00100000, x3, 32, x11)

inst_17:
// rs1==x20, rs2==x16, rs2_w1_val == -4194305, rs1_w0_val == -65, rs2_w0_val == -8193
// opcode: smsr64 ; op1:x20; op2:x16; dest:x25; op1val:0xffdfffffffffffbf;  op2val:0xffbfffffffffdfff
TEST_P64_PNN_OP(smsr64, x25, $rd_hi, x20, x16, 0x0000000000000000, $correctval_hi, 0xffdfffffffffffbf, 0xffbfffffffffdfff, x3, 48, x11)

inst_18:
// rs1==x8, rs2==x6, rs2_w1_val == -262145, rs1_w1_val == -3, rs2_w0_val == 4096
// opcode: smsr64 ; op1:x8; op2:x6; dest:x24; op1val:0xfffffffdfffdffff;  op2val:0xfffbffff00001000
TEST_P64_PNN_OP(smsr64, x24, $rd_hi, x8, x6, 0x0000000000000000, $correctval_hi, 0xfffffffdfffdffff, 0xfffbffff00001000, x3, 64, x11)

inst_19:
// rs1==x13, rs2==x7, rs2_w1_val == -131073, rs2_w0_val == -67108865
// opcode: smsr64 ; op1:x13; op2:x7; dest:x30; op1val:0xffdffffffffdffff;  op2val:0xfffdfffffbffffff
TEST_P64_PNN_OP(smsr64, x30, $rd_hi, x13, x7, 0x0000000000000000, $correctval_hi, 0xffdffffffffdffff, 0xfffdfffffbffffff, x3, 80, x11)

inst_20:
// rs1==x31, rs2==x0, rs2_w1_val == -65537, rs2_w0_val == -1431655766
// opcode: smsr64 ; op1:x31; op2:x0; dest:x4; op1val:0x0000000680000000;  op2val:0xfffeffffaaaaaaaa
TEST_P64_PNN_OP(smsr64, x4, $rd_hi, x31, x0, 0x0000000000000000, $correctval_hi, 0x0000000680000000, 0xfffeffffaaaaaaaa, x3, 96, x11)

inst_21:
// rs1==x4, rs2==x17, rs2_w1_val == -32769, rs2_w0_val == -513, rs1_w1_val == 4, rs1_w0_val == -524289
// opcode: smsr64 ; op1:x4; op2:x17; dest:x23; op1val:0x00000004fff7ffff;  op2val:0xffff7ffffffffdff
TEST_P64_PNN_OP(smsr64, x23, $rd_hi, x4, x17, 0x0000000000000000, $correctval_hi, 0x00000004fff7ffff, 0xffff7ffffffffdff, x3, 112, x11)

inst_22:
// rs1==x30, rs2==x12, rs2_w1_val == -16385, rs1_w1_val == 16384, rs2_w0_val == 128, rs1_w0_val == 67108864
// opcode: smsr64 ; op1:x30; op2:x12; dest:x7; op1val:0x0000400004000000;  op2val:0xffffbfff00000080
TEST_P64_PNN_OP(smsr64, x7, $rd_hi, x30, x12, 0x0000000000000000, $correctval_hi, 0x0000400004000000, 0xffffbfff00000080, x3, 128, x11)

inst_23:
// rs1==x2, rs2==x31, rs2_w1_val == -8193, rs2_w0_val == -65537, rs1_w0_val == -257, rs1_w1_val == 131072
// opcode: smsr64 ; op1:x2; op2:x31; dest:x15; op1val:0x00020000fffffeff;  op2val:0xffffdffffffeffff
TEST_P64_PNN_OP(smsr64, x15, $rd_hi, x2, x31, 0x0000000000000000, $correctval_hi, 0x00020000fffffeff, 0xffffdffffffeffff, x3, 144, x11)

inst_24:
// rs1==x23, rs2==x25, rs2_w1_val == -4097, rs1_w0_val == 131072, rs1_w1_val == -536870913, rs2_w0_val == -17
// opcode: smsr64 ; op1:x23; op2:x25; dest:x12; op1val:0xdfffffff00020000;  op2val:0xffffefffffffffef
TEST_P64_PNN_OP(smsr64, x12, $rd_hi, x23, x25, 0x0000000000000000, $correctval_hi, 0xdfffffff00020000, 0xffffefffffffffef, x3, 160, x11)

inst_25:
// rs1==x22, rs2==x19, rs2_w1_val == -2049, rs1_w0_val == -5, rs2_w0_val == -4194305, rs1_w1_val == -65537
// opcode: smsr64 ; op1:x22; op2:x19; dest:x17; op1val:0xfffefffffffffffb;  op2val:0xfffff7ffffbfffff
TEST_P64_PNN_OP(smsr64, x17, $rd_hi, x22, x19, 0x0000000000000000, $correctval_hi, 0xfffefffffffffffb, 0xfffff7ffffbfffff, x3, 176, x11)

inst_26:
// rs1==x28, rs2==x13, rs2_w1_val == -1025, rs1_w1_val == -17, rs1_w0_val == 128, rs2_w0_val == 2048
// opcode: smsr64 ; op1:x28; op2:x13; dest:x15; op1val:0xffffffef00000080;  op2val:0xfffffbff00000800
TEST_P64_PNN_OP(smsr64, x15, $rd_hi, x28, x13, 0x0000000000000000, $correctval_hi, 0xffffffef00000080, 0xfffffbff00000800, x3, 192, x11)

inst_27:
// rs1==x7, rs2==x20, rs2_w1_val == -513, rs2_w0_val == 256, rs1_w1_val == 262144
// opcode: smsr64 ; op1:x7; op2:x20; dest:x5; op1val:0x00040000c0000000;  op2val:0xfffffdff00000100
TEST_P64_PNN_OP(smsr64, x5, $rd_hi, x7, x20, 0x0000000000000000, $correctval_hi, 0x00040000c0000000, 0xfffffdff00000100, x3, 208, x11)

inst_28:
// rs1==x1, rs2==x10, rs2_w1_val == -257, rs1_w1_val == -2147483648, rs2_w0_val == -9
// opcode: smsr64 ; op1:x1; op2:x10; dest:x4; op1val:0x8000000000000006;  op2val:0xfffffefffffffff7
TEST_P64_PNN_OP(smsr64, x4, $rd_hi, x1, x10, 0x0000000000000000, $correctval_hi, 0x8000000000000006, 0xfffffefffffffff7, x3, 224, x11)

inst_29:
// rs1==x24, rs2==x2, rs2_w1_val == -129, rs1_w0_val == 33554432, rs2_w0_val == -16777217, rs1_w1_val == 1431655765
// opcode: smsr64 ; op1:x24; op2:x2; dest:x14; op1val:0x5555555502000000;  op2val:0xffffff7ffeffffff
TEST_P64_PNN_OP(smsr64, x14, $rd_hi, x24, x2, 0x0000000000000000, $correctval_hi, 0x5555555502000000, 0xffffff7ffeffffff, x3, 240, x6)

inst_30:
// rs1==x15, rs2==x4, rs2_w1_val == -65, rs1_w1_val == -67108865
// opcode: smsr64 ; op1:x15; op2:x4; dest:x22; op1val:0xfbffffff00000010;  op2val:0xffffffbfaaaaaaaa
TEST_P64_PNN_OP(smsr64, x22, $rd_hi, x15, x4, 0x0000000000000000, $correctval_hi, 0xfbffffff00000010, 0xffffffbfaaaaaaaa, x3, 256, x6)

inst_31:
// rs1==x5, rs2==x22, rs2_w1_val == -33, rs1_w1_val == 8192, rs2_w0_val == 524288
// opcode: smsr64 ; op1:x5; op2:x22; dest:x17; op1val:0x0000200000100000;  op2val:0xffffffdf00080000
TEST_P64_PNN_OP(smsr64, x17, $rd_hi, x5, x22, 0x0000000000000000, $correctval_hi, 0x0000200000100000, 0xffffffdf00080000, x3, 272, x6)

inst_32:
// rs2_w1_val == -17, rs2_w0_val == -1025, rs1_w0_val == 2097152, rs1_w1_val == -1
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00200000;  op2val:0xffffffeffffffbff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffff00200000, 0xffffffeffffffbff, x3, 288, x6)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs2_w1_val == -9, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00100000;  op2val:0xfffffff7fdffffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffefffff00100000, 0xfffffff7fdffffff, x1, 0, x6)

inst_34:
// rs2_w1_val == -5, rs1_w1_val == 1048576, rs1_w0_val == 8
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0010000000000008;  op2val:0xfffffffb00000004
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0010000000000008, 0xfffffffb00000004, x1, 16, x6)

inst_35:
// rs2_w1_val == -3, rs1_w0_val == -4194305
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000007ffbfffff;  op2val:0xfffffffdfffffffa
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000007ffbfffff, 0xfffffffdfffffffa, x1, 32, x6)

inst_36:
// rs2_w1_val == -2, rs1_w1_val == 4096
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000fffffeff;  op2val:0xfffffffe00000080
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00001000fffffeff, 0xfffffffe00000080, x1, 48, x6)

inst_37:
// rs2_w1_val == -2147483648, rs1_w1_val == -268435457, rs1_w0_val == 524288
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00080000;  op2val:0x80000000fbffffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefffffff00080000, 0x80000000fbffffff, x1, 64, x6)

inst_38:
// rs2_w1_val == 1073741824, rs1_w0_val == 1, rs2_w0_val == 8192
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000001;  op2val:0x4000000000002000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefffffff00000001, 0x4000000000002000, x1, 80, x6)

inst_39:
// rs2_w1_val == 536870912, rs1_w0_val == -33554433, rs1_w1_val == 65536
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000fdffffff;  op2val:0x2000000010000000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00010000fdffffff, 0x2000000010000000, x1, 96, x6)

inst_40:
// rs2_w1_val == 268435456, rs1_w0_val == -268435457
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffefffffff;  op2val:0x10000000feffffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffffffefffffff, 0x10000000feffffff, x1, 112, x6)

inst_41:
// rs2_w1_val == 134217728, rs1_w0_val == 65536
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00010000;  op2val:0x08000000ffdfffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffffff00010000, 0x08000000ffdfffff, x1, 128, x6)

inst_42:
// rs2_w1_val == 16777216, rs1_w0_val == 8192
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00002000;  op2val:0x01000000fffffbff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefffffff00002000, 0x01000000fffffbff, x1, 144, x6)

inst_43:
// rs2_w1_val == 8388608, rs1_w0_val == 4096, rs1_w1_val == 33554432
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0200000000001000;  op2val:0x00800000fffffffc
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200000000001000, 0x00800000fffffffc, x1, 160, x6)

inst_44:
// rs2_w1_val == 4194304, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0200000000000010;  op2val:0x0040000000000800
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200000000000010, 0x0040000000000800, x1, 176, x6)

inst_45:
// rs2_w1_val == 2097152, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000008fffffff6;  op2val:0x00200000ffffffdf
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000008fffffff6, 0x00200000ffffffdf, x1, 192, x6)

inst_46:
// rs2_w1_val == 1048576, rs1_w0_val == 32768, rs1_w1_val == 128
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000008000008000;  op2val:0x0010000000000080
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000008000008000, 0x0010000000000080, x1, 208, x6)

inst_47:
// rs2_w1_val == 524288, rs1_w0_val == 32
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000500000020;  op2val:0x0008000000000080
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000500000020, 0x0008000000000080, x1, 224, x6)

inst_48:
// rs2_w1_val == 262144, rs2_w0_val == 536870912, rs1_w1_val == -1431655766, rs1_w0_val == 4
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000004;  op2val:0x0004000020000000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaaaaaa00000004, 0x0004000020000000, x1, 240, x6)

inst_49:
// rs2_w1_val == 131072, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00001000;  op2val:0x0002000000000007
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdfffff00001000, 0x0002000000000007, x1, 256, x6)

inst_50:
// rs1_w0_val == 16777216, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff01000000;  op2val:0xfffff7ff20000000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffefff01000000, 0xfffff7ff20000000, x1, 272, x6)

inst_51:
// rs1_w0_val == 8388608, rs1_w1_val == -16777217, rs2_w0_val == -134217729
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00800000;  op2val:0xffffbffff7ffffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeffffff00800000, 0xffffbffff7ffffff, x1, 288, x6)

inst_52:
// rs1_w0_val == 4194304, rs2_w0_val == -262145, rs1_w1_val == -524289, rs2_w1_val == 2
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00400000;  op2val:0x00000002fffbffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7ffff00400000, 0x00000002fffbffff, x1, 304, x6)

inst_53:
// rs1_w0_val == 262144, rs2_w0_val == 1073741824, rs1_w1_val == -131073
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00040000;  op2val:0xfffdffff40000000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffdffff00040000, 0xfffdffff40000000, x1, 320, x6)

inst_54:
// rs1_w0_val == 16384, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000700004000;  op2val:0x0000000700000080
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000700004000, 0x0000000700000080, x1, 336, x6)

inst_55:
// rs1_w0_val == 2048, rs1_w1_val == -1073741825
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000800;  op2val:0xdffffffffffdffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbfffffff00000800, 0xdffffffffffdffff, x1, 352, x6)

inst_56:
// rs1_w0_val == 1024, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000400;  op2val:0xfbffffff00080000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfffffff00000400, 0xfbffffff00080000, x1, 368, x6)

inst_57:
// rs1_w0_val == 512, rs2_w0_val == 512
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000200;  op2val:0xdfffffff00000200
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdfffff00000200, 0xdfffffff00000200, x1, 384, x6)

inst_58:
// rs1_w0_val == 64, rs2_w0_val == -1, rs1_w1_val == 512
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000020000000040;  op2val:0xffffffefffffffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000020000000040, 0xffffffefffffffff, x1, 400, x6)

inst_59:
// rs1_w0_val == 2, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600000002;  op2val:0x3ffffffffffffffc
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff600000002, 0x3ffffffffffffffc, x1, 416, x6)

inst_60:
// rs1_w0_val == 0, rs1_w1_val == 268435456, rs2_w0_val == 0
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000000;  op2val:0xffffffbf00000000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x1000000000000000, 0xffffffbf00000000, x1, 432, x6)

inst_61:
// rs1_w0_val == -1, rs1_w1_val == -2
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffffff;  op2val:0x0400000000200000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffeffffffff, 0x0400000000200000, x1, 448, x6)

inst_62:
// rs2_w1_val == 65536, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000500001000;  op2val:0x00010000ffffdfff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000500001000, 0x00010000ffffdfff, x1, 464, x6)

inst_63:
// rs2_w1_val == 32768, rs1_w1_val == -16385, rs1_w0_val == -32769
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffff7fff;  op2val:0x00008000ffffffef
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffbfffffff7fff, 0x00008000ffffffef, x1, 480, x6)

inst_64:
// rs2_w1_val == 16384, rs1_w0_val == -513
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000fffffdff;  op2val:0x00004000dfffffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x01000000fffffdff, 0x00004000dfffffff, x1, 496, x6)

inst_65:
// rs2_w1_val == 8192, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000005;  op2val:0x00002000fffdffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffff00000005, 0x00002000fffdffff, x1, 512, x6)

inst_66:
// rs2_w1_val == 4096, rs1_w1_val == 16
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000010fffffffd;  op2val:0x00001000fffff7ff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000010fffffffd, 0x00001000fffff7ff, x1, 528, x6)

inst_67:
// rs2_w1_val == 2048, rs1_w1_val == 2097152
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0020000000000040;  op2val:0x0000080000002000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020000000000040, 0x0000080000002000, x1, 544, x6)

inst_68:
// rs2_w1_val == 1024, rs1_w0_val == -262145
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8fffbffff;  op2val:0x00000400ffffdfff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff8fffbffff, 0x00000400ffffdfff, x1, 560, x6)

inst_69:
// rs2_w1_val == 512, rs2_w0_val == 1, rs1_w1_val == 134217728
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0800000000000006;  op2val:0x0000020000000001
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800000000000006, 0x0000020000000001, x1, 576, x6)

inst_70:
// rs2_w1_val == 256, rs2_w0_val == 262144
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000006;  op2val:0x0000010000040000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000000000000006, 0x0000010000040000, x1, 592, x6)

inst_71:
// rs2_w1_val == 128, rs1_w1_val == -5, rs2_w0_val == -1073741825
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00001000;  op2val:0x00000080bfffffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffb00001000, 0x00000080bfffffff, x1, 608, x6)

inst_72:
// rs2_w1_val == 64, rs2_w0_val == -5
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000007;  op2val:0x00000040fffffffb
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdfffff00000007, 0x00000040fffffffb, x1, 624, x6)

inst_73:
// rs2_w1_val == 32, rs2_w0_val == 64, rs1_w0_val == -2097153
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffdfffff;  op2val:0x0000002000000040
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x80000000ffdfffff, 0x0000002000000040, x1, 640, x6)

inst_74:
// rs2_w1_val == 16, rs1_w1_val == -257
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00010000;  op2val:0x0000001000000005
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffeff00010000, 0x0000001000000005, x1, 656, x6)

inst_75:
// rs2_w1_val == 8, rs1_w0_val == -8193
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000003ffffdfff;  op2val:0x0000000800000007
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000003ffffdfff, 0x0000000800000007, x1, 672, x6)

inst_76:
// rs2_w1_val == 4, rs1_w0_val == -16777217
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffeffffff;  op2val:0x00000004bfffffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfefffffffeffffff, 0x00000004bfffffff, x1, 688, x6)

inst_77:
// rs2_w1_val == 1, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000100000000080;  op2val:0x0000000100040000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000100000000080, 0x0000000100040000, x1, 704, x6)

inst_78:
// rs2_w1_val == 0, rs2_w0_val == -3
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000010;  op2val:0x00000000fffffffd
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffe00000010, 0x00000000fffffffd, x1, 720, x6)

inst_79:
// rs2_w1_val == -1, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000ffffdfff;  op2val:0xffffffff00200000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00200000ffffdfff, 0xffffffff00200000, x1, 736, x6)

inst_80:
// rs2_w0_val == 2147483647, rs1_w1_val == 2
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000002fdffffff;  op2val:0x000800007fffffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000002fdffffff, 0x000800007fffffff, x1, 752, x6)

inst_81:
// rs2_w0_val == 131072, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffff7fff;  op2val:0xfffffffd00020000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffefffffffff7fff, 0xfffffffd00020000, x1, 768, x6)

inst_82:
// rs2_w0_val == 32768, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000600000100;  op2val:0x2000000000008000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000600000100, 0x2000000000008000, x1, 784, x6)

inst_83:
// rs2_w0_val == 16384, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffffd;  op2val:0xf7ffffff00004000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffeffffffffffffd, 0xf7ffffff00004000, x1, 800, x6)

inst_84:
// rs2_w0_val == 1024, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0010000080000000;  op2val:0xffefffff00000400
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0010000080000000, 0xffefffff00000400, x1, 816, x6)

inst_85:
// rs2_w0_val == 32, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9fffffff9;  op2val:0xffbfffff00000020
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff9fffffff9, 0xffbfffff00000020, x1, 832, x6)

inst_86:
// rs2_w0_val == 16, rs1_w0_val == 2147483647
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff7fffffff;  op2val:0x0010000000000010
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdfffff7fffffff, 0x0010000000000010, x1, 848, x6)

inst_87:
// rs2_w0_val == 8, rs1_w1_val == 536870912
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000009;  op2val:0xaaaaaaaa00000008
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000000000000009, 0xaaaaaaaa00000008, x1, 864, x6)

inst_88:
// rs2_w0_val == 2, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff02000000;  op2val:0x0004000000000002
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfffffff02000000, 0x0004000000000002, x1, 880, x6)

inst_89:
// rs1_w1_val == 2147483647, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000001;  op2val:0x00000006fdffffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fffffff00000001, 0x00000006fdffffff, x1, 896, x6)

inst_90:
// rs1_w1_val == -33554433, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffffdff;  op2val:0x0000000400000100
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdfffffffffffdff, 0x0000000400000100, x1, 912, x6)

inst_91:
// rs1_w1_val == -8388609, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000009;  op2val:0x0000004000000005
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7fffff00000009, 0x0000004000000005, x1, 928, x6)

inst_92:
// rs1_w1_val == -4194305, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff02000000;  op2val:0xfffffeffffffffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbfffff02000000, 0xfffffeffffffffff, x1, 944, x6)

inst_93:
// rs1_w1_val == -32769, rs2_w0_val == 33554432
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000002;  op2val:0x0000000202000000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7fff00000002, 0x0000000202000000, x1, 960, x6)

inst_94:
// rs1_w1_val == -2049, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffffffd;  op2val:0x00010000fbffffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffff7fffffffffd, 0x00010000fbffffff, x1, 976, x6)

inst_95:
// rs1_w1_val == -513, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000003;  op2val:0xfffffffdaaaaaaaa
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffdff00000003, 0xfffffffdaaaaaaaa, x1, 992, x6)

inst_96:
// rs1_w1_val == -65, rs1_w0_val == -2049
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffff7ff;  op2val:0x04000000fffdffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffbffffff7ff, 0x04000000fffdffff, x1, 1008, x6)

inst_97:
// rs1_w1_val == -33, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffdfffff;  op2val:0xfffffff9fffff7ff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdfffdfffff, 0xfffffff9fffff7ff, x1, 1024, x6)

inst_98:
// rs1_w1_val == -9, rs2_w0_val == -4097
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7bfffffff;  op2val:0x00200000ffffefff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff7bfffffff, 0x00200000ffffefff, x1, 1040, x6)

inst_99:
// rs1_w1_val == 1073741824, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000efffffff;  op2val:0xfff7ffff00000400
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x40000000efffffff, 0xfff7ffff00000400, x1, 1056, x6)

inst_100:
// rs1_w1_val == 8388608, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0080000000000007;  op2val:0xaaaaaaaafffff7ff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080000000000007, 0xaaaaaaaafffff7ff, x1, 1072, x6)

inst_101:
// rs1_w1_val == 4194304, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0040000000000100;  op2val:0x7fffffff00008000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040000000000100, 0x7fffffff00008000, x1, 1088, x6)

inst_102:
// rs1_w1_val == 524288, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0008000002000000;  op2val:0x0000000900000006
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0008000002000000, 0x0000000900000006, x1, 1104, x6)

inst_103:
// rs1_w1_val == 32768, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000800000001000;  op2val:0x0020000000004000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000800000001000, 0x0020000000004000, x1, 1120, x6)

inst_104:
// rs1_w1_val == 2048, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000080000008000;  op2val:0xfffeffffffffffdf
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000080000008000, 0xfffeffffffffffdf, x1, 1136, x6)

inst_105:
// rs1_w1_val == 64, rs1_w0_val == -33
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000040ffffffdf;  op2val:0x2000000000000008
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000040ffffffdf, 0x2000000000000008, x1, 1152, x6)

inst_106:
// rs1_w1_val == 32, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000002000008000;  op2val:0xfffffffcffffffef
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000002000008000, 0xfffffffcffffffef, x1, 1168, x6)

inst_107:
// rs2_w0_val == -268435457, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000002;  op2val:0x3fffffffefffffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdfffff00000002, 0x3fffffffefffffff, x1, 1184, x6)

inst_108:
// rs1_w1_val == 1, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000100400000;  op2val:0xfffffff9ffffefff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000100400000, 0xfffffff9ffffefff, x1, 1200, x6)

inst_109:
// rs1_w1_val == 0, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000000000400;  op2val:0x00000040fffffff6
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000000000400, 0x00000040fffffff6, x1, 1216, x6)

inst_110:
// rs1_w0_val == -1431655766, rs2_w0_val == -129
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000aaaaaaaa;  op2val:0xffffbfffffffff7f
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00400000aaaaaaaa, 0xffffbfffffffff7f, x1, 1232, x6)

inst_111:
// rs1_w0_val == 1431655765, rs2_w0_val == -2147483648
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff55555555;  op2val:0xfffffffb80000000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7fff55555555, 0xfffffffb80000000, x1, 1248, x6)

inst_112:
// rs2_w0_val == -8388609, rs1_w0_val == 1073741824
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff40000000;  op2val:0x00000001ff7fffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7ffff40000000, 0x00000001ff7fffff, x1, 1264, x6)

inst_113:
// rs1_w0_val == -536870913, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffdfffffff;  op2val:0xfffffbff40000000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfffffffdfffffff, 0xfffffbff40000000, x1, 1280, x6)

inst_114:
// rs2_w0_val == -1048577, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffc0000000;  op2val:0xfbffffffffefffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfffffffc0000000, 0xfbffffffffefffff, x1, 1296, x6)

inst_115:
// rs1_w0_val == -67108865, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000040fbffffff;  op2val:0x0008000000000100
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000040fbffffff, 0x0008000000000100, x1, 1312, x6)

inst_116:
// rs2_w0_val == -32769, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffffff9;  op2val:0x00100000ffff7fff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbfffffffffffff9, 0x00100000ffff7fff, x1, 1328, x6)

inst_117:
// rs2_w0_val == -16385, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000080;  op2val:0xfffffeffffffbfff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff800000080, 0xfffffeffffffbfff, x1, 1344, x6)

inst_118:
// rs1_w0_val == -1048577, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffefffff;  op2val:0xdfffffff00020000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaaaaaaffefffff, 0xdfffffff00020000, x1, 1360, x6)

inst_119:
// rs2_w0_val == -257, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000001000;  op2val:0x00008000fffffeff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000000000001000, 0x00008000fffffeff, x1, 1376, x6)

inst_120:
// rs2_w0_val == 16777216, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffdffff;  op2val:0x4000000001000000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffbfffdffff, 0x4000000001000000, x1, 1392, x6)

inst_121:
// rs1_w0_val == -65537, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffeffff;  op2val:0x1000000000000010
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffeffffffeffff, 0x1000000000000010, x1, 1408, x6)

inst_122:
// rs2_w0_val == -65, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef3fffffff;  op2val:0x00040000ffffffbf
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffef3fffffff, 0x00040000ffffffbf, x1, 1424, x6)

inst_123:
// rs1_w0_val == -16385, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffffbfff;  op2val:0x10000000ffffffbf
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbfffffffffbfff, 0x10000000ffffffbf, x1, 1440, x6)

inst_124:
// rs1_w0_val == -4097, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000ffffefff;  op2val:0x00000010ffffffbf
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00800000ffffefff, 0x00000010ffffffbf, x1, 1456, x6)

inst_125:
// rs2_w0_val == -2, rs1_w0_val == -2
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffffffe;  op2val:0x20000000fffffffe
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x80000000fffffffe, 0x20000000fffffffe, x1, 1472, x6)

inst_126:
// rs2_w0_val == 4194304, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000800;  op2val:0x0000000300400000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdf00000800, 0x0000000300400000, x1, 1488, x6)

inst_127:
// rs1_w0_val == -17, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000ffffffef;  op2val:0x00000009ffefffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00004000ffffffef, 0x00000009ffefffff, x1, 1504, x6)

inst_128:
// rs1_w0_val == -9, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100fffffff7;  op2val:0xfffffffd00000800
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000100fffffff7, 0xfffffffd00000800, x1, 1520, x6)

inst_129:
// rs2_w0_val == 67108864, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff40000000;  op2val:0x0800000004000000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbfffffff40000000, 0x0800000004000000, x1, 1536, x6)

inst_130:
// rs1_w0_val == 536870912, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0040000020000000;  op2val:0x00000005fffffdff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040000020000000, 0x00000005fffffdff, x1, 1552, x6)

inst_131:
// rs1_w0_val == 268435456, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000410000000;  op2val:0xaaaaaaaaf7ffffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000410000000, 0xaaaaaaaaf7ffffff, x1, 1568, x6)

inst_132:
// rs1_w0_val == 134217728, 
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000208000000;  op2val:0x00000008fffdffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000208000000, 0x00000008fffdffff, x1, 1584, x6)

inst_133:
// rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val == 256, rs2_w1_val == -1048577, rs2_w0_val == 8388608, rs1_w0_val > 0 and rs2_w0_val > 0
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000600000100;  op2val:0xffefffff00800000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000600000100, 0xffefffff00800000, x1, 1600, x6)

inst_134:
// rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 8, rs2_w0_val == -536870913, rs2_w1_val == 33554432
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000800000003;  op2val:0x02000000dfffffff
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000800000003, 0x02000000dfffffff, x1, 1616, x6)

inst_135:
// rs2_w1_val == -33554433, rs1_w1_val == -134217729, rs2_w0_val == 268435456
// opcode: smsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffff7f;  op2val:0xfdffffff10000000
TEST_P64_PNN_OP(smsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ffffffffffff7f, 0xfdffffff10000000, x1, 1632, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 38*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 206*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
