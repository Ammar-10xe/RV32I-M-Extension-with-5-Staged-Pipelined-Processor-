
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmsr64 instruction of the RISC-V RV64PZicsr extension for the kmsr64 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmsr64)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x30, rs2==x0, rd==x30, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val != rs2_w0_val, rs1_w1_val == -16385, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w1_val == -1073741825, rs2_w0_val == 1
// opcode: kmsr64 ; op1:x30; op2:x0; dest:x30; op1val:0xffffbfff80000000;  op2val:0xbfffffff00000001
TEST_PK64_PNN_OP(kmsr64, x30, $rd_hi, x30, x0, 0x0000000000000000, $correctval_hi, 0xffffbfff80000000, 0xbfffffff00000001, x30, x1, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x29, rd==x18, rs1_w1_val == rs2_w1_val, rs2_w0_val == 131072, rs1_w0_val == -129
// opcode: kmsr64 ; op1:x2; op2:x29; dest:x18; op1val:0xfffffffaffffff7f;  op2val:0xfffffffa00020000
TEST_PK64_PNN_OP(kmsr64, x18, $rd_hi, x2, x29, 0x0000000000000000, $correctval_hi, 0xfffffffaffffff7f, 0xfffffffa00020000, x2, x1, 24, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x25, rs2==x25, rd==x26, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == -33554433, rs2_w0_val == 2147483647, rs1_w1_val == -1025, rs2_w1_val == 131072
// opcode: kmsr64 ; op1:x25; op2:x25; dest:x26; op1val:0xfffffbfffdffffff;  op2val:0x000200007fffffff
TEST_PK64_PNN_OP(kmsr64, x26, $rd_hi, x25, x25, 0x0000000000000000, $correctval_hi, 0xfffffbfffdffffff, 0x000200007fffffff, x25, x1, 48, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w0_val == 262144, rs1_w0_val == -67108865, rs2_w1_val == -4097, rs1_w1_val == 524288
// opcode: kmsr64 ; op1:x28; op2:x28; dest:x28; op1val:0x00080000fbffffff;  op2val:0xffffefff00040000
TEST_PK64_PNN_OP(kmsr64, x28, $rd_hi, x28, x28, 0x0000000000000000, $correctval_hi, 0x00080000fbffffff, 0xffffefff00040000, x28, x1, 72, x3)

inst_4:
// rs2 == rd != rs1, rs1==x19, rs2==x8, rd==x8, rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w0_val == -67108865, rs1_w1_val == 2097152, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w1_val == 32768
// opcode: kmsr64 ; op1:x19; op2:x8; dest:x8; op1val:0x0020000000000009;  op2val:0x00008000fbffffff
TEST_PK64_PNN_OP(kmsr64, x8, $rd_hi, x19, x8, 0x0000000000000000, $correctval_hi, 0x0020000000000009, 0x00008000fbffffff, x19, x1, 96, x3)

inst_5:
// rs1==x29, rs2==x26, rd==x2, rs1_w0_val == rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w0_val == -2, rs1_w1_val == 262144, rs2_w0_val == -2
// opcode: kmsr64 ; op1:x29; op2:x26; dest:x2; op1val:0x00040000fffffffe;  op2val:0x00000007fffffffe
TEST_PK64_PNN_OP(kmsr64, x2, $rd_hi, x29, x26, 0x0000000000000000, $correctval_hi, 0x00040000fffffffe, 0x00000007fffffffe, x29, x1, 120, x3)

inst_6:
// rs1==x8, rs2==x5, rd==x16, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == -2097153, rs1_w1_val == 1048576, rs1_w0_val == 8, rs2_w0_val == 8
// opcode: kmsr64 ; op1:x8; op2:x5; dest:x16; op1val:0x0010000000000008;  op2val:0xffdfffff00000008
TEST_PK64_PNN_OP(kmsr64, x16, $rd_hi, x8, x5, 0x0000000000000000, $correctval_hi, 0x0010000000000008, 0xffdfffff00000008, x8, x1, 144, x3)

inst_7:
// rs1==x13, rs2==x27, rd==x24, rs2_w1_val == -1431655766, rs1_w1_val == -4194305, rs1_w0_val == 4194304
// opcode: kmsr64 ; op1:x13; op2:x27; dest:x24; op1val:0xffbfffff00400000;  op2val:0xaaaaaaaa00040000
TEST_PK64_PNN_OP(kmsr64, x24, $rd_hi, x13, x27, 0x0000000000000000, $correctval_hi, 0xffbfffff00400000, 0xaaaaaaaa00040000, x13, x1, 168, x3)

inst_8:
// rs1==x7, rs2==x22, rd==x10, rs2_w1_val == 1431655765, rs1_w0_val == 536870912, rs2_w0_val == -1, rs1_w1_val == -3
// opcode: kmsr64 ; op1:x7; op2:x22; dest:x10; op1val:0xfffffffd20000000;  op2val:0x55555555ffffffff
TEST_PK64_PNN_OP(kmsr64, x10, $rd_hi, x7, x22, 0x0000000000000000, $correctval_hi, 0xfffffffd20000000, 0x55555555ffffffff, x7, x1, 192, x3)

inst_9:
// rs1==x22, rs2==x20, rd==x4, rs2_w1_val == 2147483647, rs2_w0_val == -129, rs1_w0_val == -8193
// opcode: kmsr64 ; op1:x22; op2:x20; dest:x4; op1val:0xfffffffcffffdfff;  op2val:0x7fffffffffffff7f
TEST_PK64_PNN_OP(kmsr64, x4, $rd_hi, x22, x20, 0x0000000000000000, $correctval_hi, 0xfffffffcffffdfff, 0x7fffffffffffff7f, x22, x1, 216, x3)

inst_10:
// rs1==x23, rs2==x19, rd==x6, rs2_w1_val == -536870913, rs2_w0_val == 536870912, rs1_w1_val == 32768
// opcode: kmsr64 ; op1:x23; op2:x19; dest:x6; op1val:0x00008000fffffff8;  op2val:0xdfffffff20000000
TEST_PK64_PNN_OP(kmsr64, x6, $rd_hi, x23, x19, 0x0000000000000000, $correctval_hi, 0x00008000fffffff8, 0xdfffffff20000000, x23, x1, 240, x3)

inst_11:
// rs1==x4, rs2==x31, rd==x12, rs2_w1_val == -268435457, rs1_w1_val == -33, rs2_w0_val == 128, rs1_w0_val == -134217729
// opcode: kmsr64 ; op1:x4; op2:x31; dest:x12; op1val:0xffffffdff7ffffff;  op2val:0xefffffff00000080
TEST_PK64_PNN_OP(kmsr64, x12, $rd_hi, x4, x31, 0x0000000000000000, $correctval_hi, 0xffffffdff7ffffff, 0xefffffff00000080, x4, x1, 264, x3)

inst_12:
// rs1==x9, rs2==x6, rd==x20, rs2_w1_val == -134217729, rs2_w0_val == 16777216
// opcode: kmsr64 ; op1:x9; op2:x6; dest:x20; op1val:0x0020000000000007;  op2val:0xf7ffffff01000000
TEST_PK64_PNN_OP(kmsr64, x20, $rd_hi, x9, x6, 0x0000000000000000, $correctval_hi, 0x0020000000000007, 0xf7ffffff01000000, x9, x1, 288, x3)

inst_13:
// rs1==x5, rs2==x7, rd==x22, rs2_w1_val == -67108865, rs2_w0_val == 67108864, rs1_w0_val == -2049, rs1_w1_val == -129
// opcode: kmsr64 ; op1:x5; op2:x7; dest:x22; op1val:0xffffff7ffffff7ff;  op2val:0xfbffffff04000000
TEST_PK64_PNN_OP(kmsr64, x22, $rd_hi, x5, x7, 0x0000000000000000, $correctval_hi, 0xffffff7ffffff7ff, 0xfbffffff04000000, x5, x1, 312, x3)

inst_14:
// rs1==x0, rs2==x15, rd==x14, rs2_w1_val == -33554433, rs2_w0_val == 1073741824, rs1_w0_val == 16
// opcode: kmsr64 ; op1:x0; op2:x15; dest:x14; op1val:0x0000800000000010;  op2val:0xfdffffff40000000
TEST_PK64_PNN_OP(kmsr64, x14, $rd_hi, x0, x15, 0x0000000000000000, $correctval_hi, 0x0000800000000010, 0xfdffffff40000000, x0, x1, 336, x3)

inst_15:
// rs1==x14, rs2==x3, rs2_w1_val == -16777217, rs2_w0_val == -3, rs1_w1_val == 4
// opcode: kmsr64 ; op1:x14; op2:x3; dest:x2; op1val:0x0000000400000003;  op2val:0xfefffffffffffffd
TEST_PK64_PNN_OP(kmsr64, x2, $rd_hi, x14, x3, 0x0000000000000000, $correctval_hi, 0x0000000400000003, 0xfefffffffffffffd, x14, x1, 360, x8)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_16:
// rs1==x6, rs2==x21, rs2_w1_val == -8388609, rs1_w0_val == 64, rs2_w0_val == -17
// opcode: kmsr64 ; op1:x6; op2:x21; dest:x22; op1val:0xfffffffd00000040;  op2val:0xff7fffffffffffef
TEST_PK64_PNN_OP(kmsr64, x22, $rd_hi, x6, x21, 0x0000000000000000, $correctval_hi, 0xfffffffd00000040, 0xff7fffffffffffef, x6, x7, 0, x8)

inst_17:
// rs1==x26, rs2==x13, rs2_w1_val == -4194305, rs1_w1_val == 1073741824, rs2_w0_val == -513, rs1_w0_val == -2097153
// opcode: kmsr64 ; op1:x26; op2:x13; dest:x5; op1val:0x40000000ffdfffff;  op2val:0xffbffffffffffdff
TEST_PK64_PNN_OP(kmsr64, x5, $rd_hi, x26, x13, 0x0000000000000000, $correctval_hi, 0x40000000ffdfffff, 0xffbffffffffffdff, x26, x7, 24, x8)

inst_18:
// rs1==x12, rs2==x9, rs2_w1_val == -1048577, rs1_w1_val == 8192
// opcode: kmsr64 ; op1:x12; op2:x9; dest:x15; op1val:0x00002000fdffffff;  op2val:0xffeffffffffffffc
TEST_PK64_PNN_OP(kmsr64, x15, $rd_hi, x12, x9, 0x0000000000000000, $correctval_hi, 0x00002000fdffffff, 0xffeffffffffffffc, x12, x7, 48, x8)

inst_19:
// rs1==x16, rs2==x12, rs2_w1_val == -524289, rs1_w1_val == 16, rs2_w0_val == -2147483648, rs1_w0_val == -32769
// opcode: kmsr64 ; op1:x16; op2:x12; dest:x14; op1val:0x00000010ffff7fff;  op2val:0xfff7ffff80000000
TEST_PK64_PNN_OP(kmsr64, x14, $rd_hi, x16, x12, 0x0000000000000000, $correctval_hi, 0x00000010ffff7fff, 0xfff7ffff80000000, x16, x7, 72, x8)

inst_20:
// rs1==x21, rs2==x23, rs2_w1_val == -262145, rs1_w0_val == -16777217, rs2_w0_val == -33, rs1_w1_val == 33554432
// opcode: kmsr64 ; op1:x21; op2:x23; dest:x9; op1val:0x02000000feffffff;  op2val:0xfffbffffffffffdf
TEST_PK64_PNN_OP(kmsr64, x9, $rd_hi, x21, x23, 0x0000000000000000, $correctval_hi, 0x02000000feffffff, 0xfffbffffffffffdf, x21, x7, 96, x8)

inst_21:
// rs1==x27, rs2==x18, rs2_w1_val == -131073, rs1_w0_val == 32768, rs1_w1_val == -65537, rs2_w0_val == -9
// opcode: kmsr64 ; op1:x27; op2:x18; dest:x3; op1val:0xfffeffff00008000;  op2val:0xfffdfffffffffff7
TEST_PK64_PNN_OP(kmsr64, x3, $rd_hi, x27, x18, 0x0000000000000000, $correctval_hi, 0xfffeffff00008000, 0xfffdfffffffffff7, x27, x7, 120, x8)

inst_22:
// rs1==x15, rs2==x17, rs2_w1_val == -65537, rs1_w1_val == 0
// opcode: kmsr64 ; op1:x15; op2:x17; dest:x12; op1val:0x00000000fffffff9;  op2val:0xfffeffff7fffffff
TEST_PK64_PNN_OP(kmsr64, x12, $rd_hi, x15, x17, 0x0000000000000000, $correctval_hi, 0x00000000fffffff9, 0xfffeffff7fffffff, x15, x7, 144, x8)

inst_23:
// rs1==x18, rs2==x14, rs2_w1_val == -32769, rs1_w1_val == -9, rs1_w0_val == 268435456, rs2_w0_val == 1048576
// opcode: kmsr64 ; op1:x18; op2:x14; dest:x12; op1val:0xfffffff710000000;  op2val:0xffff7fff00100000
TEST_PK64_PNN_OP(kmsr64, x12, $rd_hi, x18, x14, 0x0000000000000000, $correctval_hi, 0xfffffff710000000, 0xffff7fff00100000, x18, x7, 168, x8)

inst_24:
// rs1==x17, rs2==x11, rs2_w1_val == -16385, rs1_w1_val == 131072, rs2_w0_val == 4096, rs1_w0_val == -1048577
// opcode: kmsr64 ; op1:x17; op2:x11; dest:x12; op1val:0x00020000ffefffff;  op2val:0xffffbfff00001000
TEST_PK64_PNN_OP(kmsr64, x12, $rd_hi, x17, x11, 0x0000000000000000, $correctval_hi, 0x00020000ffefffff, 0xffffbfff00001000, x17, x7, 192, x8)

inst_25:
// rs1==x10, rs2==x16, rs2_w1_val == -8193, rs2_w0_val == -1025, rs1_w1_val == -257
// opcode: kmsr64 ; op1:x10; op2:x16; dest:x30; op1val:0xfffffefffdffffff;  op2val:0xffffdffffffffbff
TEST_PK64_PNN_OP(kmsr64, x30, $rd_hi, x10, x16, 0x0000000000000000, $correctval_hi, 0xfffffefffdffffff, 0xffffdffffffffbff, x10, x7, 216, x8)

inst_26:
// rs1==x3, rs2==x10, rs2_w1_val == -2049, rs1_w0_val == 256, rs2_w0_val == -8388609
// opcode: kmsr64 ; op1:x3; op2:x10; dest:x9; op1val:0x0000000400000100;  op2val:0xfffff7ffff7fffff
TEST_PK64_PNN_OP(kmsr64, x9, $rd_hi, x3, x10, 0x0000000000000000, $correctval_hi, 0x0000000400000100, 0xfffff7ffff7fffff, x3, x7, 240, x8)

inst_27:
// rs1==x31, rs2==x24, rs2_w1_val == -1025, 
// opcode: kmsr64 ; op1:x31; op2:x24; dest:x17; op1val:0x0000000710000000;  op2val:0xfffffbffffffffef
TEST_PK64_PNN_OP(kmsr64, x17, $rd_hi, x31, x24, 0x0000000000000000, $correctval_hi, 0x0000000710000000, 0xfffffbffffffffef, x31, x7, 264, x8)

inst_28:
// rs1==x11, rs2==x1, rs2_w1_val == -513, rs2_w0_val == -8193
// opcode: kmsr64 ; op1:x11; op2:x1; dest:x9; op1val:0xfffffbfffdffffff;  op2val:0xfffffdffffffdfff
TEST_PK64_PNN_OP(kmsr64, x9, $rd_hi, x11, x1, 0x0000000000000000, $correctval_hi, 0xfffffbfffdffffff, 0xfffffdffffffdfff, x11, x7, 288, x8)

inst_29:
// rs1==x24, rs2==x30, rs2_w1_val == -257, rs1_w0_val == -1431655766
// opcode: kmsr64 ; op1:x24; op2:x30; dest:x17; op1val:0x00000006aaaaaaaa;  op2val:0xfffffefffffffff9
TEST_PK64_PNN_OP(kmsr64, x17, $rd_hi, x24, x30, 0x0000000000000000, $correctval_hi, 0x00000006aaaaaaaa, 0xfffffefffffffff9, x24, x7, 312, x8)

inst_30:
// rs1==x1, rs2==x2, rs2_w1_val == -129, rs2_w0_val == -4097
// opcode: kmsr64 ; op1:x1; op2:x2; dest:x26; op1val:0x00200000fffffff6;  op2val:0xffffff7fffffefff
TEST_PK64_PNN_OP(kmsr64, x26, $rd_hi, x1, x2, 0x0000000000000000, $correctval_hi, 0x00200000fffffff6, 0xffffff7fffffefff, x1, x7, 336, x8)

inst_31:
// rs1==x20, rs2==x4, rs2_w1_val == -65, rs1_w0_val == -1025, rs1_w1_val == -8388609
// opcode: kmsr64 ; op1:x20; op2:x4; dest:x19; op1val:0xff7ffffffffffbff;  op2val:0xffffffbffffffffc
TEST_PK64_PNN_OP(kmsr64, x19, $rd_hi, x20, x4, 0x0000000000000000, $correctval_hi, 0xff7ffffffffffbff, 0xffffffbffffffffc, x20, x7, 360, x8)

inst_32:
// rs2_w1_val == -33, rs1_w0_val == 0, rs1_w1_val == -513
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000000;  op2val:0xffffffdffffffffd
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffdff00000000, 0xffffffdffffffffd, x30, x7, 384, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_33:
// rs2_w1_val == -17, rs1_w0_val == -257
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffffeff;  op2val:0xffffffef7fffffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbffffffffffeff, 0xffffffef7fffffff, x30, x1, 0, x2)

inst_34:
// rs2_w1_val == -9, rs2_w0_val == -5, rs1_w1_val == -1
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000040;  op2val:0xfffffff7fffffffb
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffff00000040, 0xfffffff7fffffffb, x30, x1, 24, x2)

inst_35:
// rs2_w1_val == -5, rs2_w0_val == 32768, rs1_w0_val == -65, rs1_w1_val == -1431655766
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffffffbf;  op2val:0xfffffffb00008000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaaaaaaffffffbf, 0xfffffffb00008000, x30, x1, 48, x2)

inst_36:
// rs2_w1_val == -3, rs1_w0_val == 512, rs1_w1_val == 268435456
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000200;  op2val:0xfffffffdfffffff7
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x1000000000000200, 0xfffffffdfffffff7, x30, x1, 72, x2)

inst_37:
// rs2_w1_val == -2, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000005;  op2val:0xfffffffefffffffc
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffeffff00000005, 0xfffffffefffffffc, x30, x1, 96, x2)

inst_38:
// rs2_w1_val == -2147483648, rs2_w0_val == 16384, rs1_w0_val == 4096
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0004000000001000;  op2val:0x8000000000004000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0004000000001000, 0x8000000000004000, x30, x1, 120, x2)

inst_39:
// rs2_w1_val == 1073741824, rs1_w1_val == -536870913, rs2_w0_val == 1431655765
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000009;  op2val:0x4000000055555555
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfffffff00000009, 0x4000000055555555, x30, x1, 144, x2)

inst_40:
// rs2_w1_val == 536870912, rs1_w1_val == 67108864
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000c0000000;  op2val:0x2000000055555555
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x04000000c0000000, 0x2000000055555555, x30, x1, 168, x2)

inst_41:
// rs2_w1_val == 268435456, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000f7ffffff;  op2val:0x1000000000001000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00080000f7ffffff, 0x1000000000001000, x30, x1, 192, x2)

inst_42:
// rs2_w1_val == 134217728, rs1_w1_val == 128
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000008000000008;  op2val:0x08000000fffffff8
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000008000000008, 0x08000000fffffff8, x30, x1, 216, x2)

inst_43:
// rs2_w1_val == 67108864, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00400000;  op2val:0x040000007fffffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffff7f00400000, 0x040000007fffffff, x30, x1, 240, x2)

inst_44:
// rs2_w1_val == 33554432, rs1_w0_val == 134217728
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000508000000;  op2val:0x02000000fffffbff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000508000000, 0x02000000fffffbff, x30, x1, 264, x2)

inst_45:
// rs2_w1_val == 16777216, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000ffffff7f;  op2val:0x01000000ffffefff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00002000ffffff7f, 0x01000000ffffefff, x30, x1, 288, x2)

inst_46:
// rs2_w1_val == 8388608, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffbff;  op2val:0x00800000fffffffa
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdffffffbff, 0x00800000fffffffa, x30, x1, 312, x2)

inst_47:
// rs2_w1_val == 4194304, rs1_w0_val == 2097152
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000000200000;  op2val:0x00400000ffffffef
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000000200000, 0x00400000ffffffef, x30, x1, 336, x2)

inst_48:
// rs2_w1_val == 2097152, rs2_w0_val == -65537
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffffbf;  op2val:0x00200000fffeffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfffffffffffffbf, 0x00200000fffeffff, x30, x1, 360, x2)

inst_49:
// rs2_w1_val == 1048576, rs1_w0_val == 128, rs1_w1_val == -5
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000080;  op2val:0x00100000fbffffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffb00000080, 0x00100000fbffffff, x30, x1, 384, x2)

inst_50:
// rs2_w1_val == 524288, rs2_w0_val == -16385
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000420000000;  op2val:0x00080000ffffbfff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000420000000, 0x00080000ffffbfff, x30, x1, 408, x2)

inst_51:
// rs2_w1_val == 262144, rs1_w0_val == 131072, rs2_w0_val == 524288
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00020000;  op2val:0x0004000000080000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffeff00020000, 0x0004000000080000, x30, x1, 432, x2)

inst_52:
// rs2_w1_val == 65536, rs1_w1_val == -33554433
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffeffffff;  op2val:0x00010000fffffdff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdfffffffeffffff, 0x00010000fffffdff, x30, x1, 456, x2)

inst_53:
// rs1_w0_val == 33554432, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000302000000;  op2val:0x00800000fbffffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000302000000, 0x00800000fbffffff, x30, x1, 480, x2)

inst_54:
// rs1_w0_val == 16777216, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb01000000;  op2val:0x0000000500000003
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffb01000000, 0x0000000500000003, x30, x1, 504, x2)

inst_55:
// rs1_w0_val == 8388608, rs2_w1_val == 8192, rs2_w0_val == 4194304, rs1_w1_val == 65536
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0001000000800000;  op2val:0x0000200000400000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001000000800000, 0x0000200000400000, x30, x1, 528, x2)

inst_56:
// rs1_w0_val == 1048576, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00100000;  op2val:0xffbfffff00000005
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffeffff00100000, 0xffbfffff00000005, x30, x1, 552, x2)

inst_57:
// rs1_w0_val == 524288, rs2_w1_val == -1
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00080000;  op2val:0xfffffffffffffff8
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdf00080000, 0xfffffffffffffff8, x30, x1, 576, x2)

inst_58:
// rs1_w0_val == 262144, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00040000;  op2val:0xffefffff04000000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3fffffff00040000, 0xffefffff04000000, x30, x1, 600, x2)

inst_59:
// rs1_w0_val == 65536, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0001000000010000;  op2val:0x00100000fffffff6
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001000000010000, 0x00100000fffffff6, x30, x1, 624, x2)

inst_60:
// rs1_w0_val == 16384, rs1_w1_val == 1431655765
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500004000;  op2val:0xffffff7f00020000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x5555555500004000, 0xffffff7f00020000, x30, x1, 648, x2)

inst_61:
// rs1_w0_val == 8192, rs2_w0_val == -32769
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00002000;  op2val:0xfffffff8ffff7fff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdf00002000, 0xfffffff8ffff7fff, x30, x1, 672, x2)

inst_62:
// rs1_w0_val == 2048, rs1_w1_val == -2
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000800;  op2val:0x0040000000000005
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffe00000800, 0x0040000000000005, x30, x1, 696, x2)

inst_63:
// rs1_w0_val == 1024, rs2_w0_val == -4194305
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000400;  op2val:0x08000000ffbfffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffbfff00000400, 0x08000000ffbfffff, x30, x1, 720, x2)

inst_64:
// rs1_w0_val == 32, rs1_w1_val == 32
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000002000000020;  op2val:0xfffffeff00000009
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000002000000020, 0xfffffeff00000009, x30, x1, 744, x2)

inst_65:
// rs1_w0_val == 4, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0400000000000004;  op2val:0xfffffff800000001
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0400000000000004, 0xfffffff800000001, x30, x1, 768, x2)

inst_66:
// rs1_w0_val == 2, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000002;  op2val:0xfffffeff00001000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffdff00000002, 0xfffffeff00001000, x30, x1, 792, x2)

inst_67:
// rs1_w0_val == 1, rs1_w1_val == -2147483648
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000001;  op2val:0x00800000fffeffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000000000000001, 0x00800000fffeffff, x30, x1, 816, x2)

inst_68:
// rs1_w0_val == -1, rs2_w0_val == 512, rs1_w1_val == -8193
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffffff;  op2val:0xefffffff00000200
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffdfffffffffff, 0xefffffff00000200, x30, x1, 840, x2)

inst_69:
// rs2_w1_val == 16384, rs2_w0_val == 33554432, rs1_w0_val == -536870913
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcdfffffff;  op2val:0x0000400002000000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffcdfffffff, 0x0000400002000000, x30, x1, 864, x2)

inst_70:
// rs2_w1_val == 4096, rs1_w1_val == -524289
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00004000;  op2val:0x00001000fffeffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7ffff00004000, 0x00001000fffeffff, x30, x1, 888, x2)

inst_71:
// rs2_w1_val == 2048, rs1_w0_val == -131073
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000005fffdffff;  op2val:0x00000800fffffff8
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000005fffdffff, 0x00000800fffffff8, x30, x1, 912, x2)

inst_72:
// rs2_w1_val == 1024, rs2_w0_val == -65
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffaffefffff;  op2val:0x00000400ffffffbf
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffaffefffff, 0x00000400ffffffbf, x30, x1, 936, x2)

inst_73:
// rs2_w1_val == 512, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff10000000;  op2val:0x00000200ffbfffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbfffff10000000, 0x00000200ffbfffff, x30, x1, 960, x2)

inst_74:
// rs2_w1_val == 256, rs2_w0_val == -257
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0020000010000000;  op2val:0x00000100fffffeff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020000010000000, 0x00000100fffffeff, x30, x1, 984, x2)

inst_75:
// rs2_w1_val == 128, rs1_w0_val == 2147483647
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x000100007fffffff;  op2val:0x0000008004000000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000100007fffffff, 0x0000008004000000, x30, x1, 1008, x2)

inst_76:
// rs2_w1_val == 64, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00002000;  op2val:0x0000004000040000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffc00002000, 0x0000004000040000, x30, x1, 1032, x2)

inst_77:
// rs2_w1_val == 32, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00100000;  op2val:0x00000020ffffbfff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffeffff00100000, 0x00000020ffffbfff, x30, x1, 1056, x2)

inst_78:
// rs2_w1_val == 16, rs1_w1_val == 16384, rs2_w0_val == -134217729
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000dfffffff;  op2val:0x00000010f7ffffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00004000dfffffff, 0x00000010f7ffffff, x30, x1, 1080, x2)

inst_79:
// rs2_w1_val == 8, rs1_w0_val == -3, rs1_w1_val == -2049
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffffffd;  op2val:0x0000000801000000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffff7fffffffffd, 0x0000000801000000, x30, x1, 1104, x2)

inst_80:
// rs2_w1_val == 4, rs1_w1_val == 8
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000008fffffffd;  op2val:0x00000004ffffefff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000008fffffffd, 0x00000004ffffefff, x30, x1, 1128, x2)

inst_81:
// rs2_w1_val == 2, rs2_w0_val == 2048
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffff7fff;  op2val:0x0000000200000800
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7fffffffff7fff, 0x0000000200000800, x30, x1, 1152, x2)

inst_82:
// rs2_w1_val == 1, rs1_w1_val == 4096
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000100000000006;  op2val:0x0000000100040000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000100000000006, 0x0000000100040000, x30, x1, 1176, x2)

inst_83:
// rs2_w1_val == 0, rs1_w1_val == -1048577
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffaaaaaaaa;  op2val:0x00000000ffffff7f
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffefffffaaaaaaaa, 0x00000000ffffff7f, x30, x1, 1200, x2)

inst_84:
// rs2_w0_val == -1431655766, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fffffffd;  op2val:0xfffff7ffaaaaaaaa
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff6fffffffd, 0xfffff7ffaaaaaaaa, x30, x1, 1224, x2)

inst_85:
// rs2_w0_val == -1073741825, rs1_w0_val == -16385
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffbfff;  op2val:0xffffffbfbfffffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x80000000ffffbfff, 0xffffffbfbfffffff, x30, x1, 1248, x2)

inst_86:
// rs2_w0_val == -536870913, rs1_w0_val == -65537
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000fffeffff;  op2val:0x00000009dfffffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00010000fffeffff, 0x00000009dfffffff, x30, x1, 1272, x2)

inst_87:
// rs2_w0_val == -268435457, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fdfffffff;  op2val:0xfffffbffefffffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffff7fdfffffff, 0xfffffbffefffffff, x30, x1, 1296, x2)

inst_88:
// rs2_w0_val == 65536, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00080000;  op2val:0xfffdffff00010000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7ffff00080000, 0xfffdffff00010000, x30, x1, 1320, x2)

inst_89:
// rs2_w0_val == 8192, rs1_w0_val == -4097
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000009ffffefff;  op2val:0x0000040000002000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000009ffffefff, 0x0000040000002000, x30, x1, 1344, x2)

inst_90:
// rs2_w0_val == 1024, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffffffd;  op2val:0xffffff7f00000400
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x80000000fffffffd, 0xffffff7f00000400, x30, x1, 1368, x2)

inst_91:
// rs2_w0_val == 256, rs1_w1_val == 8388608
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0080000001000000;  op2val:0x0040000000000100
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080000001000000, 0x0040000000000100, x30, x1, 1392, x2)

inst_92:
// rs2_w0_val == 64, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffbff;  op2val:0x0040000000000040
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffefffffffbff, 0x0040000000000040, x30, x1, 1416, x2)

inst_93:
// rs2_w0_val == 32, rs1_w0_val == 67108864
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa04000000;  op2val:0xaaaaaaaa00000020
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffa04000000, 0xaaaaaaaa00000020, x30, x1, 1440, x2)

inst_94:
// rs2_w0_val == 16, rs1_w1_val == -67108865
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff20000000;  op2val:0xfffbffff00000010
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffffff20000000, 0xfffbffff00000010, x30, x1, 1464, x2)

inst_95:
// rs2_w0_val == 4, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffffff8;  op2val:0xfffffffa00000004
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbfffffffffffff8, 0xfffffffa00000004, x30, x1, 1488, x2)

inst_96:
// rs2_w0_val == 2, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00001000;  op2val:0xffdfffff00000002
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbfffff00001000, 0xffdfffff00000002, x30, x1, 1512, x2)

inst_97:
// rs2_w0_val == 0, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000fdffffff;  op2val:0xffffffef00000000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00001000fdffffff, 0xffffffef00000000, x30, x1, 1536, x2)

inst_98:
// rs1_w1_val == 2147483647, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000800;  op2val:0xffbffffffffffffc
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fffffff00000800, 0xffbffffffffffffc, x30, x1, 1560, x2)

inst_99:
// rs1_w1_val == -1073741825, rs2_w0_val == -1048577
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffffff;  op2val:0x20000000ffefffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbfffffffffffffff, 0x20000000ffefffff, x30, x1, 1584, x2)

inst_100:
// rs1_w1_val == -268435457, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffdffff;  op2val:0x00000080fffeffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xeffffffffffdffff, 0x00000080fffeffff, x30, x1, 1608, x2)

inst_101:
// rs1_w1_val == -134217729, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000008;  op2val:0x00000020ffffefff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ffffff00000008, 0x00000020ffffefff, x30, x1, 1632, x2)

inst_102:
// rs1_w1_val == -16777217, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffffdfff;  op2val:0x8000000000000008
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeffffffffffdfff, 0x8000000000000008, x30, x1, 1656, x2)

inst_103:
// rs1_w1_val == -2097153, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffffff9;  op2val:0x55555555ffffff7f
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdffffffffffff9, 0x55555555ffffff7f, x30, x1, 1680, x2)

inst_104:
// rs1_w1_val == -262145, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffffffffff9;  op2val:0x00000003fffffffb
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffbfffffffffff9, 0x00000003fffffffb, x30, x1, 1704, x2)

inst_105:
// rs1_w1_val == -131073, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffdffffff;  op2val:0x00000009ffffff7f
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffdfffffdffffff, 0x00000009ffffff7f, x30, x1, 1728, x2)

inst_106:
// rs1_w1_val == -32769, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00200000;  op2val:0x4000000080000000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7fff00200000, 0x4000000080000000, x30, x1, 1752, x2)

inst_107:
// rs1_w1_val == -4097, rs1_w0_val == -268435457
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffefffffff;  op2val:0x0200000004000000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffefffefffffff, 0x0200000004000000, x30, x1, 1776, x2)

inst_108:
// rs1_w1_val == -65, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffeffffff;  op2val:0x40000000ffefffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffbffeffffff, 0x40000000ffefffff, x30, x1, 1800, x2)

inst_109:
// rs1_w1_val == -17, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000400;  op2val:0xdfffffff00000000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffef00000400, 0xdfffffff00000000, x30, x1, 1824, x2)

inst_110:
// rs1_w1_val == 536870912, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffff7ff;  op2val:0x00004000fffffdff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x20000000fffff7ff, 0x00004000fffffdff, x30, x1, 1848, x2)

inst_111:
// rs1_w1_val == 134217728, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0800000000000100;  op2val:0x01000000fffffffc
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800000000000100, 0x01000000fffffffc, x30, x1, 1872, x2)

inst_112:
// rs1_w1_val == 16777216, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0100000000040000;  op2val:0xffffdfff00000100
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0100000000040000, 0xffffdfff00000100, x30, x1, 1896, x2)

inst_113:
// rs1_w1_val == 4194304, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0040000000000000;  op2val:0xffefffffffffffdf
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040000000000000, 0xffefffffffffffdf, x30, x1, 1920, x2)

inst_114:
// rs1_w1_val == 2048, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800fffff7ff;  op2val:0xffeffffffffffff7
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000800fffff7ff, 0xffeffffffffffff7, x30, x1, 1944, x2)

inst_115:
// rs1_w1_val == 1024, rs1_w0_val == -5
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400fffffffb;  op2val:0x0000008000000008
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000400fffffffb, 0x0000008000000008, x30, x1, 1968, x2)

inst_116:
// rs1_w1_val == 512, rs1_w0_val == -8388609
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200ff7fffff;  op2val:0xfffffeff00400000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000200ff7fffff, 0xfffffeff00400000, x30, x1, 1992, x2)

inst_117:
// rs1_w1_val == 256, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000010000000020;  op2val:0xffff7fff00008000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000010000000020, 0xffff7fff00008000, x30, x1, 2016, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_118:
// rs1_w1_val == 64, rs2_w0_val == -262145
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000040ff7fffff;  op2val:0xfffffffefffbffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000040ff7fffff, 0xfffffffefffbffff, x30, x1, 0, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_119:
// rs1_w1_val == 2, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000002ffffdfff;  op2val:0x00001000ffffffbf
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000002ffffdfff, 0x00001000ffffffbf, x30, x1, 0, x2)

inst_120:
// rs1_w1_val == 1, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000100000003;  op2val:0xfffffffa00040000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000100000003, 0xfffffffa00040000, x30, x1, 24, x2)

inst_121:
// rs2_w0_val == 134217728, rs1_w0_val == -1073741825
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffbfffffff;  op2val:0xffbfffff08000000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffffffbfffffff, 0xffbfffff08000000, x30, x1, 48, x2)

inst_122:
// rs2_w0_val == -33554433, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000fffffff9;  op2val:0xfffffff9fdffffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00001000fffffff9, 0xfffffff9fdffffff, x30, x1, 72, x2)

inst_123:
// rs2_w0_val == -16777217, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000020;  op2val:0x00000006feffffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000000000000020, 0x00000006feffffff, x30, x1, 96, x2)

inst_124:
// rs1_w0_val == 1431655765, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0080000055555555;  op2val:0x0000040000000004
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080000055555555, 0x0000040000000004, x30, x1, 120, x2)

inst_125:
// rs2_w0_val == -131073, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000200;  op2val:0x01000000fffdffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fffffff00000200, 0x01000000fffdffff, x30, x1, 144, x2)

inst_126:
// rs1_w0_val == -4194305, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000ffbfffff;  op2val:0xfff7ffffdfffffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x08000000ffbfffff, 0xfff7ffffdfffffff, x30, x1, 168, x2)

inst_127:
// rs2_w0_val == -2049, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafffdffff;  op2val:0x00040000fffff7ff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffafffdffff, 0x00040000fffff7ff, x30, x1, 192, x2)

inst_128:
// rs1_w0_val == -524289, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffff7ffff;  op2val:0x0080000000000003
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffefffffff7ffff, 0x0080000000000003, x30, x1, 216, x2)

inst_129:
// rs1_w0_val == -262145, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffbffff;  op2val:0x0000000600000000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffefffffbffff, 0x0000000600000000, x30, x1, 240, x2)

inst_130:
// rs1_w0_val == 1073741824, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0200000040000000;  op2val:0xffdfffff00000400
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200000040000000, 0xffdfffff00000400, x30, x1, 264, x2)

inst_131:
// rs1_w0_val == -513, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffffdff;  op2val:0xfffffdffffffffbf
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7ffffffffdff, 0xfffffdffffffffbf, x30, x1, 288, x2)

inst_132:
// rs2_w0_val == -2097153, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000200;  op2val:0x00002000ffdfffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaaaaaa00000200, 0x00002000ffdfffff, x30, x1, 312, x2)

inst_133:
// rs1_w0_val == -33, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffffffdf;  op2val:0x0000000600000007
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x40000000ffffffdf, 0x0000000600000007, x30, x1, 336, x2)

inst_134:
// rs2_w0_val == 268435456, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffdfff;  op2val:0xfffffff610000000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffdfffffffdfff, 0xfffffff610000000, x30, x1, 360, x2)

inst_135:
// rs1_w0_val == -17, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffffef;  op2val:0xfffff7ff00000006
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffbffffffef, 0xfffff7ff00000006, x30, x1, 384, x2)

inst_136:
// rs2_w0_val == 8388608, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffffdfff;  op2val:0xfeffffff00800000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffefffffdfff, 0xfeffffff00800000, x30, x1, 408, x2)

inst_137:
// rs1_w0_val == -9, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafffffff7;  op2val:0xfffffffc3fffffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffafffffff7, 0xfffffffc3fffffff, x30, x1, 432, x2)

inst_138:
// rs2_w0_val == 2097152, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000080010000000;  op2val:0x0000000700200000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000080010000000, 0x0000000700200000, x30, x1, 456, x2)

inst_139:
// rs2_w0_val == -524289, 
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff3fffffff;  op2val:0x00200000fff7ffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffeff3fffffff, 0x00200000fff7ffff, x30, x1, 480, x2)

inst_140:
// rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val != rs2_w0_val, rs1_w1_val == -16385, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w1_val == -1073741825, rs2_w0_val == 1
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff80000000;  op2val:0xbfffffff00000001
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffbfff80000000, 0xbfffffff00000001, x30, x1, 504, x2)

inst_141:
// rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == -33554433, rs2_w0_val == 2147483647, rs1_w1_val == -1025, rs2_w1_val == 131072
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffdffffff;  op2val:0x000200007fffffff
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffbfffdffffff, 0x000200007fffffff, x30, x1, 528, x2)

inst_142:
// rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w0_val == 262144, rs1_w0_val == -67108865, rs2_w1_val == -4097, rs1_w1_val == 524288
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000fbffffff;  op2val:0xffffefff00040000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00080000fbffffff, 0xffffefff00040000, x30, x1, 552, x2)

inst_143:
// rs2_w1_val == -33554433, rs2_w0_val == 1073741824, rs1_w0_val == 16
// opcode: kmsr64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000800000000010;  op2val:0xfdffffff40000000
TEST_PK64_PNN_OP(kmsr64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000800000000010, 0xfdffffff40000000, x30, x1, 576, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 48*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 51*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 255*(XLEN/32),4,0xdeadbeef


signature_x1_3:
    .fill 3*(XLEN/32),4,0xdeadbeef


signature_x1_4:
    .fill 75*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
