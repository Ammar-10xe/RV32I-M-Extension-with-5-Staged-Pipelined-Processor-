
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smaqa.su instruction of the RISC-V RV64PZicsr extension for the smaqa.su covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smaqa.su)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x23,signature_x23_1)

inst_0:
// rs1 == rd != rs2, rs1==x29, rs2==x12, rd==x29, rs1_b0_val == -128, rs1_b7_val != rs2_b7_val, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b6_val != rs2_b6_val, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b5_val != rs2_b5_val, rs1_b5_val > 0 and rs2_b5_val < 0, rs2_b3_val == 2, rs1_b4_val != rs2_b4_val, rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b3_val != rs2_b3_val, rs1_b4_val == 1, rs1_b2_val != rs2_b2_val, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val < 0, rs2_b1_val == -2, rs1_b3_val == 0, rs2_b7_val == -2, rs1_b2_val == 32, rs2_b0_val == -2, rs2_b6_val == 32, rs1_b7_val == -17, rs1_b1_val == -1, rs2_b5_val == -5
// opcode: smaqa.su ; op1:x29; op2:x12; dest:x29; op1val:0xeffc3f010020ff80;  op2val:0xfe20fb070203fefe
TEST_RR_OP(smaqa.su, x29, x29, x12, 0x0000000000000000, 0xeffc3f010020ff80, 0xfe20fb070203fefe, x23, 0, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x22, rs2==x21, rd==x18, rs1_b7_val == rs2_b7_val, rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b3_val == -17, rs1_b5_val == 2, rs1_b6_val < 0 and rs2_b6_val < 0, rs1_b5_val == rs2_b5_val, rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b2_val == 0, rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b1_val == 85, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b3_val == 2, rs2_b7_val == 64, rs1_b2_val == -5, rs2_b0_val == 64, rs2_b6_val == -2, rs1_b7_val == 64, rs2_b5_val == 2, rs1_b0_val == 16, rs1_b6_val == -3, rs2_b4_val == -65
// opcode: smaqa.su ; op1:x22; op2:x21; dest:x18; op1val:0x40fd02f602fb3f10;  op2val:0x40fe02bfef005540
TEST_RR_OP(smaqa.su, x18, x22, x21, 0x0000000000000000, 0x40fd02f602fb3f10, 0x40fe02bfef005540, x23, 8, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x9, rs2==x9, rd==x6, rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b5_val == -3, rs1_b6_val == -86, rs1_b3_val == -33, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b5_val == -1, rs2_b3_val == 16, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b4_val == -33, rs1_b1_val == -5, rs1_b4_val < 0 and rs2_b4_val > 0, rs2_b1_val == 16, rs1_b7_val == -33, rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b4_val == 4, rs1_b2_val == -128
// opcode: smaqa.su ; op1:x9; op2:x9; dest:x6; op1val:0xdfaaffdfdf80fb07;  op2val:0x4007fd04100910c0
TEST_RR_OP(smaqa.su, x6, x9, x9, 0x0000000000000000, 0xdfaaffdfdf80fb07, 0x4007fd04100910c0, x23, 16, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x10, rs2==x10, rd==x10, rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b0_val == 85, rs2_b2_val == 4, rs2_b5_val == 8, rs1_b2_val == -1, rs1_b6_val == -5, rs2_b3_val == 32, rs1_b1_val == -17, rs1_b4_val == -128, rs2_b7_val == -5, rs1_b3_val > 0 and rs2_b3_val > 0
// opcode: smaqa.su ; op1:x10; op2:x10; dest:x10; op1val:0x6fb068002ffef55;  op2val:0xfbfe08f92004c040
TEST_RR_OP(smaqa.su, x10, x10, x10, 0x0000000000000000, 0x6fb068002ffef55, 0xfbfe08f92004c040, x23, 24, x8)

inst_4:
// rs2 == rd != rs1, rs1==x30, rs2==x31, rd==x31, rs1_b6_val == rs2_b6_val, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b2_val == 1, rs1_b0_val == 64, rs2_b5_val == 4, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b1_val == 2, rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b1_val == -65, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b4_val == 64, rs1_b5_val == -86, rs2_b2_val == -2
// opcode: smaqa.su ; op1:x30; op2:x31; dest:x31; op1val:0xfc09aa40c0010240;  op2val:0x3f0904053ffebffa
TEST_RR_OP(smaqa.su, x31, x30, x31, 0x0000000000000000, 0xfc09aa40c0010240, 0x3f0904053ffebffa, x23, 32, x8)

inst_5:
// rs1==x1, rs2==x2, rd==x15, rs1_b6_val > 0 and rs2_b6_val < 0, rs2_b3_val == -2, rs1_b5_val == 0, rs1_b0_val == 1, rs1_b3_val == 1, rs1_b1_val == -2, rs1_b7_val == -128, rs1_b4_val == 4
// opcode: smaqa.su ; op1:x1; op2:x2; dest:x15; op1val:0x803f00040106fe01;  op2val:0xfcfafc07fe033f06
TEST_RR_OP(smaqa.su, x15, x1, x2, 0x0000000000000000, 0x803f00040106fe01, 0xfcfafc07fe033f06, x23, 40, x8)

inst_6:
// rs1==x21, rs2==x1, rd==x14, rs1_b4_val == rs2_b4_val, rs1_b5_val == 64, rs1_b3_val == -17, rs1_b0_val == 8, rs2_b0_val == 8, rs1_b0_val == rs2_b0_val, rs1_b4_val == 8, rs2_b1_val == 64, rs2_b7_val == -9, rs2_b6_val == -1, rs2_b4_val == 8, rs1_b2_val == -2
// opcode: smaqa.su ; op1:x21; op2:x1; dest:x14; op1val:0xf6074008effe0308;  op2val:0xf7fff9083f044008
TEST_RR_OP(smaqa.su, x14, x21, x1, 0x0000000000000000, 0xf6074008effe0308, 0xf7fff9083f044008, x23, 48, x8)

inst_7:
// rs1==x25, rs2==x22, rd==x13, rs1_b4_val > 0 and rs2_b4_val < 0, rs2_b5_val == -128, rs2_b0_val == -3, rs1_b2_val == 0, rs1_b6_val == -9, rs2_b6_val == -128, rs2_b2_val == 85, rs1_b0_val == -86, rs1_b4_val == 2
// opcode: smaqa.su ; op1:x25; op2:x22; dest:x13; op1val:0xf8f70502ef00c0aa;  op2val:0x98080bf1055fafd
TEST_RR_OP(smaqa.su, x13, x25, x22, 0x0000000000000000, 0xf8f70502ef00c0aa, 0x98080bf1055fafd, x23, 56, x8)

inst_8:
// rs1==x5, rs2==x28, rd==x4, rs1_b3_val == rs2_b3_val, rs2_b2_val == 32, rs1_b7_val == 0, rs2_b5_val == 32, rs1_b6_val == 16, rs2_b3_val == 1, rs1_b5_val == -33
// opcode: smaqa.su ; op1:x5; op2:x28; dest:x4; op1val:0x10dff801fe03fc;  op2val:0x7fc20f9012007fa
TEST_RR_OP(smaqa.su, x4, x5, x28, 0x0000000000000000, 0x10dff801fe03fc, 0x7fc20f9012007fa, x23, 64, x8)

inst_9:
// rs1==x12, rs2==x7, rd==x19, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b3_val == -86, rs1_b2_val < 0 and rs2_b2_val < 0, rs2_b3_val == -3, rs1_b1_val == -9, rs1_b4_val == -65, rs1_b6_val == 8, rs2_b6_val == 0, rs1_b0_val == 127
// opcode: smaqa.su ; op1:x12; op2:x7; dest:x19; op1val:0x3f08f6bfaaf9f77f;  op2val:0x90008fafdc0bff6
TEST_RR_OP(smaqa.su, x19, x12, x7, 0x0000000000000000, 0x3f08f6bfaaf9f77f, 0x90008fafdc0bff6, x23, 72, x8)

inst_10:
// rs1==x13, rs2==x14, rd==x30, rs1_b2_val == rs2_b2_val, rs1_b0_val == -9, rs2_b0_val == -5, rs2_b1_val == 127, rs1_b4_val == -9, rs1_b1_val == -128, rs1_b6_val == -1, rs2_b4_val == 32
// opcode: smaqa.su ; op1:x13; op2:x14; dest:x30; op1val:0xf9fff8f7f9fa80f7;  op2val:0x3fa802009fa7ffb
TEST_RR_OP(smaqa.su, x30, x13, x14, 0x0000000000000000, 0xf9fff8f7f9fa80f7, 0x3fa802009fa7ffb, x23, 80, x8)

inst_11:
// rs1==x19, rs2==x20, rd==x0, rs1_b1_val == rs2_b1_val, rs1_b5_val == -5, rs2_b7_val == 1, rs1_b1_val == -65, rs2_b0_val == -1, rs2_b4_val == -33, rs1_b3_val == -1, rs1_b7_val == -5
// opcode: smaqa.su ; op1:x19; op2:x20; dest:x0; op1val:0xfbfbfbf7fff6bf80;  op2val:0x10005df0104bfff
TEST_RR_OP(smaqa.su, x0, x19, x20, 0x0000000000000000, 0xfbfbfbf7fff6bf80, 0x10005df0104bfff, x23, 88, x8)

inst_12:
// rs1==x20, rs2==x0, rd==x2, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b7_val == 4, rs1_b0_val == -1, rs2_b6_val == 64, rs2_b4_val == -5, rs1_b4_val == -3, rs1_b2_val == -86, rs1_b5_val == -9
// opcode: smaqa.su ; op1:x20; op2:x0; dest:x2; op1val:0x4fff7fdfaaaf9ff;  op2val:0xfc40fbfb0606f840
TEST_RR_OP(smaqa.su, x2, x20, x0, 0x0000000000000000, 0x4fff7fdfaaaf9ff, 0xfc40fbfb0606f840, x23, 96, x8)

inst_13:
// rs1==x17, rs2==x29, rd==x28, rs2_b7_val == -86, rs1_b5_val == -3, rs2_b0_val == 32, rs1_b1_val == -86, rs2_b6_val == -9, rs1_b3_val == 32, rs2_b4_val == 127, rs1_b4_val == 32, rs2_b2_val == -3
// opcode: smaqa.su ; op1:x17; op2:x29; dest:x28; op1val:0x7fafd2020fcaafa;  op2val:0xaaf7c07f06fdfe20
TEST_RR_OP(smaqa.su, x28, x17, x29, 0x0000000000000000, 0x7fafd2020fcaafa, 0xaaf7c07f06fdfe20, x23, 104, x8)

inst_14:
// rs1==x14, rs2==x13, rd==x11, rs2_b7_val == 85, rs2_b2_val == -65, rs2_b5_val == 64, rs1_b0_val == -65
// opcode: smaqa.su ; op1:x14; op2:x13; dest:x11; op1val:0x307dfdf203fbfbf;  op2val:0x55fc403f03bffc3f
TEST_RR_OP(smaqa.su, x11, x14, x13, 0x0000000000000000, 0x307dfdf203fbfbf, 0x55fc403f03bffc3f, x23, 112, x8)

inst_15:
// rs1==x3, rs2==x6, rd==x16, rs2_b7_val == 127, rs1_b5_val == 16, rs2_b6_val == 85, rs2_b4_val == -86, rs2_b2_val == -86, rs1_b7_val == 16
// opcode: smaqa.su ; op1:x3; op2:x6; dest:x16; op1val:0x10fa10020205fe3f;  op2val:0x7f5505aa06aafc03
TEST_RR_OP(smaqa.su, x16, x3, x6, 0x0000000000000000, 0x10fa10020205fe3f, 0x7f5505aa06aafc03, x23, 120, x8)

inst_16:
// rs1==x6, rs2==x26, rd==x8, rs2_b7_val == -65, rs2_b6_val == -65, rs1_b3_val == -5, rs2_b3_val == 0, rs2_b1_val == 4
// opcode: smaqa.su ; op1:x6; op2:x26; dest:x8; op1val:0x509f63ffb01faf7;  op2val:0xbfbf060900c00408
TEST_RR_OP(smaqa.su, x8, x6, x26, 0x0000000000000000, 0x509f63ffb01faf7, 0xbfbf060900c00408, x23, 128, x10)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_17:
// rs1==x26, rs2==x19, rd==x9, rs2_b7_val == -33, rs2_b3_val == 127, rs2_b0_val == 2, rs1_b4_val == -86, rs2_b2_val == 127, rs2_b5_val == 85, rs2_b1_val == -1
// opcode: smaqa.su ; op1:x26; op2:x19; dest:x9; op1val:0xf9aac0aaf6fbf680;  op2val:0xdf3f55047f7fff02
TEST_RR_OP(smaqa.su, x9, x26, x19, 0x0000000000000000, 0xf9aac0aaf6fbf680, 0xdf3f55047f7fff02, x6, 0, x10)

inst_18:
// rs1==x15, rs2==x18, rd==x1, rs2_b7_val == -17, rs1_b3_val == 127, rs1_b2_val == 8, rs1_b5_val == 32, rs1_b1_val == -3, rs2_b4_val == -9, rs2_b3_val == -1, rs2_b1_val == 2, rs2_b2_val == -5
// opcode: smaqa.su ; op1:x15; op2:x18; dest:x1; op1val:0x51020f77f08fd08;  op2val:0xef06f9f7fffb02c0
TEST_RR_OP(smaqa.su, x1, x15, x18, 0x0000000000000000, 0x51020f77f08fd08, 0xef06f9f7fffb02c0, x6, 8, x10)

inst_19:
// rs1==x28, rs2==x8, rd==x12, rs2_b7_val == -3, rs1_b7_val == -86, rs1_b3_val == -2, rs2_b4_val == -3, rs1_b0_val == -17
// opcode: smaqa.su ; op1:x28; op2:x8; dest:x12; op1val:0xaa06f806fe07bfef;  op2val:0xfd55f6fd00fb023f
TEST_RR_OP(smaqa.su, x12, x28, x8, 0x0000000000000000, 0xaa06f806fe07bfef, 0xfd55f6fd00fb023f, x6, 16, x10)

inst_20:
// rs1==x2, rs2==x23, rd==x3, rs2_b7_val == -128, rs2_b1_val == -3, rs1_b6_val == 85
// opcode: smaqa.su ; op1:x2; op2:x23; dest:x3; op1val:0xdf550703fff605c0;  op2val:0x800304f90109fd02
TEST_RR_OP(smaqa.su, x3, x2, x23, 0x0000000000000000, 0xdf550703fff605c0, 0x800304f90109fd02, x6, 24, x10)

inst_21:
// rs1==x16, rs2==x11, rd==x21, rs2_b7_val == 32, rs1_b0_val == 2, rs2_b3_val == -65, rs1_b7_val == -1, rs1_b3_val == -9
// opcode: smaqa.su ; op1:x16; op2:x11; dest:x21; op1val:0xff0910f6f7fefc02;  op2val:0x2020fcdfbf073fff
TEST_RR_OP(smaqa.su, x21, x16, x11, 0x0000000000000000, 0xff0910f6f7fefc02, 0x2020fcdfbf073fff, x6, 32, x10)

inst_22:
// rs1==x7, rs2==x15, rd==x20, rs2_b7_val == 16, rs1_b5_val == -128, rs1_b0_val == -3, rs2_b6_val == 1, rs2_b4_val == 16, rs1_b2_val == -3, rs2_b0_val == 127
// opcode: smaqa.su ; op1:x7; op2:x15; dest:x20; op1val:0xf6ff800401fdfafd;  op2val:0x1001801006fb7f7f
TEST_RR_OP(smaqa.su, x20, x7, x15, 0x0000000000000000, 0xf6ff800401fdfafd, 0x1001801006fb7f7f, x6, 40, x10)

inst_23:
// rs1==x24, rs2==x27, rd==x25, rs2_b7_val == 8, rs1_b7_val == -9, rs2_b0_val == 0
// opcode: smaqa.su ; op1:x24; op2:x27; dest:x25; op1val:0xf709fa20f809fdff;  op2val:0x8fff6dfc0fe4000
TEST_RR_OP(smaqa.su, x25, x24, x27, 0x0000000000000000, 0xf709fa20f809fdff, 0x8fff6dfc0fe4000, x6, 48, x10)

inst_24:
// rs1==x11, rs2==x3, rd==x23, rs2_b7_val == 4, rs2_b2_val == 1, rs1_b6_val == -33, rs1_b4_val == 127, rs1_b3_val == 4, rs2_b1_val == -128, rs1_b7_val == 32
// opcode: smaqa.su ; op1:x11; op2:x3; dest:x23; op1val:0x20df407f04c003fc;  op2val:0x4fff8bffc018005
TEST_RR_OP(smaqa.su, x23, x11, x3, 0x0000000000000000, 0x20df407f04c003fc, 0x4fff8bffc018005, x6, 56, x10)

inst_25:
// rs1==x23, rs2==x5, rd==x26, rs2_b7_val == 2, rs1_b7_val == -2, rs2_b2_val == 16
// opcode: smaqa.su ; op1:x23; op2:x5; dest:x26; op1val:0xfe06f608fa03feef;  op2val:0x209fc08c0103f7f
TEST_RR_OP(smaqa.su, x26, x23, x5, 0x0000000000000000, 0xfe06f608fa03feef, 0x209fc08c0103f7f, x6, 64, x10)

inst_26:
// rs1==x4, rs2==x17, rd==x24, rs2_b7_val == 0, rs1_b2_val == -65, rs1_b7_val == 1, rs1_b5_val == -2, rs1_b3_val == 85
// opcode: smaqa.su ; op1:x4; op2:x17; dest:x24; op1val:0x1f6fef755bff903;  op2val:0xc006df03203f20
TEST_RR_OP(smaqa.su, x24, x4, x17, 0x0000000000000000, 0x1f6fef755bff903, 0xc006df03203f20, x6, 72, x10)

inst_27:
// rs1==x18, rs2==x24, rd==x7, rs2_b7_val == -1, rs2_b4_val == 0, rs2_b1_val == -33, rs2_b0_val == 85, rs2_b6_val == 127
// opcode: smaqa.su ; op1:x18; op2:x24; dest:x7; op1val:0xdf3ffc0955fff8f8;  op2val:0xff7ff800fff9df55
TEST_RR_OP(smaqa.su, x7, x18, x24, 0x0000000000000000, 0xdf3ffc0955fff8f8, 0xff7ff800fff9df55, x6, 80, x10)

inst_28:
// rs1==x31, rs2==x16, rd==x22, rs2_b6_val == -86, rs2_b4_val == -17
// opcode: smaqa.su ; op1:x31; op2:x16; dest:x22; op1val:0xfeff067f0006fa05;  op2val:0x55aafdef3f7f0209
TEST_RR_OP(smaqa.su, x22, x31, x16, 0x0000000000000000, 0xfeff067f0006fa05, 0x55aafdef3f7f0209, x6, 88, x10)

inst_29:
// rs1==x8, rs2==x4, rd==x5, rs1_b5_val == 8, rs2_b3_val == -86, rs2_b0_val == -17, rs2_b2_val == -1, rs2_b4_val == 64, rs2_b5_val == -33
// opcode: smaqa.su ; op1:x8; op2:x4; dest:x5; op1val:0x4fc08075507f908;  op2val:0xfffcdf40aafffaef
TEST_RR_OP(smaqa.su, x5, x8, x4, 0x0000000000000000, 0x4fc08075507f908, 0xfffcdf40aafffaef, x6, 96, x10)

inst_30:
// rs1==x0, rs2==x30, rd==x27, rs1_b5_val == 4, rs2_b4_val == 2, rs2_b0_val == 1, rs1_b2_val == 2, rs2_b5_val == 16
// opcode: smaqa.su ; op1:x0; op2:x30; dest:x27; op1val:0x90704090402fbaa;  op2val:0x6551002fe20ff01
TEST_RR_OP(smaqa.su, x27, x0, x30, 0x0000000000000000, 0x90704090402fbaa, 0x6551002fe20ff01, x6, 104, x10)

inst_31:
// rs1==x27, rs2==x25, rd==x17, rs1_b5_val == 1, rs1_b7_val == 85, rs1_b6_val == 4, rs2_b3_val == -33
// opcode: smaqa.su ; op1:x27; op2:x25; dest:x17; op1val:0x5504010704f606f6;  op2val:0xfcf80403df063f08
TEST_RR_OP(smaqa.su, x17, x27, x25, 0x0000000000000000, 0x5504010704f606f6, 0xfcf80403df063f08, x6, 112, x2)

inst_32:
// rs1_b4_val == 85, rs2_b1_val == -86, rs2_b5_val == 1, rs1_b1_val == 16, rs2_b3_val == 8
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x10aaf955f8f81055;  op2val:0x5f701df083faa09
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x10aaf955f8f81055, 0x5f701df083faa09, x6, 120, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs1_b4_val == -17, rs1_b1_val == 85
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x503feefeffb55c0;  op2val:0xdff83ff920c004fe
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x503feefeffb55c0, 0xdff83ff920c004fe, x1, 0, x2)

inst_34:
// rs1_b4_val == -5, rs1_b1_val == 4, rs1_b7_val == -3, rs1_b3_val == -128
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfdc020fb80c004c0;  op2val:0x3bf55043faafc09
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xfdc020fb80c004c0, 0x3bf55043faafc09, x1, 8, x2)

inst_35:
// rs1_b4_val == -2, rs1_b0_val == 32, rs2_b2_val == -17, rs2_b1_val == 0, rs1_b7_val == -65
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xbffc3ffefcfbf820;  op2val:0x8f9f9f702ef0008
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xbffc3ffefcfbf820, 0x8f9f9f702ef0008, x1, 16, x2)

inst_36:
// rs1_b4_val == 16, rs1_b6_val == 64, rs2_b1_val == 8
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x940091002fdfd09;  op2val:0x607fdf705fd0801
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x940091002fdfd09, 0x607fdf705fd0801, x1, 24, x2)

inst_37:
// rs1_b4_val == 0, rs2_b6_val == 2, rs2_b4_val == -2
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x910ff000720fdf6;  op2val:0x10240fe06fefafc
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x910ff000720fdf6, 0x10240fe06fefafc, x1, 32, x2)

inst_38:
// rs1_b4_val == -1, rs1_b6_val == -65, rs2_b6_val == 16, rs1_b0_val == -5, rs2_b3_val == 85
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfdbf10ffc00055fb;  op2val:0x4010067f5500c0f9
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xfdbf10ffc00055fb, 0x4010067f5500c0f9, x1, 40, x2)

inst_39:
// rs1_b3_val == -65, rs1_b2_val == 64, rs2_b6_val == -17, rs2_b1_val == -5
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfbaa40f6bf40fd06;  op2val:0x9ef0920f6fdfbc0
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xfbaa40f6bf40fd06, 0x9ef0920f6fdfbc0, x1, 48, x2)

inst_40:
// rs1_b3_val == -3, rs2_b2_val == 8
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0507fdfdaa7f;  op2val:0x550106f90308fcf8
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xfffc0507fdfdaa7f, 0x550106f90308fcf8, x1, 56, x2)

inst_41:
// rs1_b3_val == 64, rs1_b1_val == 127
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x10aa05df40ff7f10;  op2val:0x2062002c0100606
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x10aa05df40ff7f10, 0x2062002c0100606, x1, 64, x2)

inst_42:
// rs1_b3_val == 16, rs2_b1_val == 1, rs1_b1_val == 0, rs1_b2_val == -9, rs2_b6_val == 4
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfdaaf6fa10f700ef;  op2val:0xf804dffe050001c0
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xfdaaf6fa10f700ef, 0xf804dffe050001c0, x1, 72, x2)

inst_43:
// rs1_b3_val == 8, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x20c0f905084009ef;  op2val:0x2fa200602f807fb
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x20c0f905084009ef, 0x2fa200602f807fb, x1, 80, x2)

inst_44:
// rs1_b2_val == 85, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xefdfdffef955fef7;  op2val:0x3faa0405f604fa09
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xefdfdffef955fef7, 0x3faa0405f604fa09, x1, 88, x2)

inst_45:
// rs1_b2_val == 127, rs1_b6_val == 1
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xc0012055fb7ffd20;  op2val:0xc00480f906050001
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xc0012055fb7ffd20, 0xc00480f906050001, x1, 96, x2)

inst_46:
// rs1_b2_val == -33, rs2_b5_val == -1
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x5f9df0240dfaa01;  op2val:0x20c0ff00f903bf3f
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x5f9df0240dfaa01, 0x20c0ff00f903bf3f, x1, 104, x2)

inst_47:
// rs2_b4_val == -1, rs1_b2_val == -17, rs1_b1_val == 1, rs2_b0_val == -86, rs2_b1_val == -17
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfff6f6faef01bf;  op2val:0xfa55f9ff1004efaa
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xfff6f6faef01bf, 0xfa55f9ff1004efaa, x1, 112, x2)

inst_48:
// rs2_b3_val == -9, rs2_b5_val == -86, rs1_b0_val == 0, rs2_b4_val == 85, rs2_b1_val == -9
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfefafbfb02070600;  op2val:0x4c0aa55f704f740
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xfefafbfb02070600, 0x4c0aa55f704f740, x1, 120, x2)

inst_49:
// rs2_b3_val == -5, rs2_b2_val == -33
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfff6dfc0fe06fb10;  op2val:0xef8040fefbdfc0fe
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xfff6dfc0fe06fb10, 0xef8040fefbdfc0fe, x1, 128, x2)

inst_50:
// rs2_b3_val == -128, rs1_b7_val == 2, rs2_b5_val == -17
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x2f8f6df553f7fef;  op2val:0x7ffaef208000f9aa
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x2f8f6df553f7fef, 0x7ffaef208000f9aa, x1, 136, x2)

inst_51:
// rs2_b3_val == 64, rs1_b1_val == 8
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x33f05fd03550800;  op2val:0x7f8060740aa55f8
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x33f05fd03550800, 0x7f8060740aa55f8, x1, 144, x2)

inst_52:
// rs2_b3_val == 4, rs1_b0_val == 4
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x4aaf6dffef6fb04;  op2val:0xbf04df5504fafe08
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x4aaf6dffef6fb04, 0xbf04df5504fafe08, x1, 152, x2)

inst_53:
// rs2_b2_val == -9, rs2_b5_val == -65, rs1_b6_val == -128
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x280ff05fdfdfbfc;  op2val:0x2bfbffa02f700f6
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x280ff05fdfdfbfc, 0x2bfbffa02f700f6, x1, 160, x2)

inst_54:
// rs2_b2_val == -128, rs1_b7_val == 8
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x8df0807aa080404;  op2val:0x20180f6f6807f7f
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x8df0807aa080404, 0x20180f6f6807f7f, x1, 168, x2)

inst_55:
// rs2_b2_val == 64, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xef01fdbffe0055ef;  op2val:0xf6550403aa40f940
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xef01fdbffe0055ef, 0xf6550403aa40f940, x1, 176, x2)

inst_56:
// rs2_b2_val == 2, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xaa0409030700ff09;  op2val:0x3efdffaf7020009
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xaa0409030700ff09, 0x3efdffaf7020009, x1, 184, x2)

inst_57:
// rs2_b1_val == 32, rs2_b0_val == -128
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x40c0fefdf607f8bf;  op2val:0x4bfef087f042080
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x40c0fefdf607f8bf, 0x4bfef087f042080, x1, 192, x2)

inst_58:
// rs2_b0_val == -65, rs2_b6_val == 8, rs1_b2_val == 4
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x20400508c00409f8;  op2val:0x3f08fc03f907f8bf
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x20400508c00409f8, 0x3f08fc03f907f8bf, x1, 200, x2)

inst_59:
// rs2_b0_val == -33, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfdf8fe7f06aa0155;  op2val:0x8feffaa7ffbc0df
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xfdf8fe7f06aa0155, 0x8feffaa7ffbc0df, x1, 208, x2)

inst_60:
// rs1_b2_val == 16, rs2_b5_val == -9
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x1005f604f91007f9;  op2val:0x4008f7fe04fc05ff
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x1005f604f91007f9, 0x4008f7fe04fc05ff, x1, 216, x2)

inst_61:
// rs2_b0_val == -9, rs1_b6_val == 32
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfb20070410fcc07f;  op2val:0x90603df4006dff7
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xfb20070410fcc07f, 0x90603df4006dff7, x1, 224, x2)

inst_62:
// rs2_b6_val == -33, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfb80091002ef04;  op2val:0x80df02eff8fa557f
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xfb80091002ef04, 0x80df02eff8fa557f, x1, 232, x2)

inst_63:
// rs2_b0_val == 16, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x10ff090206f83ffd;  op2val:0xc0f709c0aa001010
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x10ff090206f83ffd, 0xc0f709c0aa001010, x1, 240, x2)

inst_64:
// rs2_b6_val == -5, rs1_b5_val == -17
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x3ff8efef01bf093f;  op2val:0x10fb55fcbf40fe03
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x3ff8efef01bf093f, 0x10fb55fcbf40fe03, x1, 248, x2)

inst_65:
// rs2_b0_val == 4, rs1_b6_val == 2
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfe02f880effd3ffd;  op2val:0x1004f64009aaef04
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xfe02f880effd3ffd, 0x1004f64009aaef04, x1, 256, x2)

inst_66:
// rs2_b6_val == -3, rs1_b0_val == -33
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x502027f200008df;  op2val:0xdffdf9f8fabffc05
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x502027f200008df, 0xdffdf9f8fabffc05, x1, 264, x2)

inst_67:
// rs1_b1_val == -33, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x40ff3ff8aafedff7;  op2val:0x2f9f8fe01082040
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x40ff3ff8aafedff7, 0x2f9f8fe01082040, x1, 272, x2)

inst_68:
// rs1_b7_val == 127, rs1_b5_val == -65
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x7ff8bf200707bf08;  op2val:0xfdc0c055550420fc
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x7ff8bf200707bf08, 0xfdc0c055550420fc, x1, 280, x2)

inst_69:
// rs2_b5_val == -2, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfcfc0909f8aaf9f7;  op2val:0x53ffeef1007c007
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xfcfc0909f8aaf9f7, 0x53ffeef1007c007, x1, 288, x2)

inst_70:
// rs1_b0_val == -2, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x905400580c009fe;  op2val:0x8006f8ffdf05eff7
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x905400580c009fe, 0x8006f8ffdf05eff7, x1, 296, x2)

inst_71:
// rs1_b6_val == 127, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfe7f00aafcaafe03;  op2val:0xfc05c0fac009fffc
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xfe7f00aafcaafe03, 0xfc05c0fac009fffc, x1, 304, x2)

inst_72:
// rs1_b6_val == -17, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x1effafef8f609fe;  op2val:0x7f9dff605ffdf09
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x1effafef8f609fe, 0x7f9dff605ffdf09, x1, 312, x2)

inst_73:
// rs1_b6_val == 0, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x20000205feaa0010;  op2val:0xf601bff9f8df557f
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x20000205feaa0010, 0xf601bff9f8df557f, x1, 320, x2)

inst_74:
// rs2_b5_val == 127, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x80fd010603021004;  op2val:0x53f7ff98010fef6
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x80fd010603021004, 0x53f7ff98010fef6, x1, 328, x2)

inst_75:
// rs2_b5_val == 0, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfbf9fd02fcaafff8;  op2val:0x2bf00fa10fffdf7
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xfbf9fd02fcaafff8, 0x2bf00fa10fffdf7, x1, 336, x2)

inst_76:
// rs2_b4_val == 1, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfa07fafb02fcc006;  op2val:0x80408010602aac0
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xfa07fafb02fcc006, 0x80408010602aac0, x1, 344, x2)

inst_77:
// rs1_b1_val == 64, rs1_b5_val == 85, rs1_b6_val == -2
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfcfe55fd07aa40f7;  op2val:0x6fbf63f05fc55f8
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xfcfe55fd07aa40f7, 0x6fbf63f05fc55f8, x1, 352, x2)

inst_78:
// rs1_b5_val == 127, rs1_b1_val == 32
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x8ef7f7fef082005;  op2val:0x2010c0205510fcc0
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x8ef7f7fef082005, 0x2010c0205510fcc0, x1, 360, x2)

inst_79:
// rs2_b4_val == -128, 
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x603aa09800607fd;  op2val:0xff0980df050803
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x603aa09800607fd, 0xff0980df050803, x1, 368, x2)

inst_80:
// rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b5_val == -3, rs1_b6_val == -86, rs1_b3_val == -33, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b5_val == -1, rs2_b3_val == 16, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b4_val == -33, rs1_b1_val == -5, rs1_b4_val < 0 and rs2_b4_val > 0, rs2_b1_val == 16, rs1_b7_val == -33, rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b4_val == 4, rs1_b2_val == -128
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xdfaaffdfdf80fb07;  op2val:0x4007fd04100910c0
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xdfaaffdfdf80fb07, 0x4007fd04100910c0, x1, 376, x2)

inst_81:
// rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b0_val == 85, rs2_b2_val == 4, rs2_b5_val == 8, rs1_b2_val == -1, rs1_b6_val == -5, rs2_b3_val == 32, rs1_b1_val == -17, rs1_b4_val == -128, rs2_b7_val == -5, rs1_b3_val > 0 and rs2_b3_val > 0
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x6fb068002ffef55;  op2val:0xfbfe08f92004c040
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x6fb068002ffef55, 0xfbfe08f92004c040, x1, 384, x2)

inst_82:
// rs1_b1_val == rs2_b1_val, rs1_b5_val == -5, rs2_b7_val == 1, rs1_b1_val == -65, rs2_b0_val == -1, rs2_b4_val == -33, rs1_b3_val == -1, rs1_b7_val == -5
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0xfbfbfbf7fff6bf80;  op2val:0x10005df0104bfff
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0xfbfbfbf7fff6bf80, 0x10005df0104bfff, x1, 392, x2)

inst_83:
// rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b7_val == 4, rs1_b0_val == -1, rs2_b6_val == 64, rs2_b4_val == -5, rs1_b4_val == -3, rs1_b2_val == -86, rs1_b5_val == -9
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x4fff7fdfaaaf9ff;  op2val:0xfc40fbfb0606f840
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x4fff7fdfaaaf9ff, 0xfc40fbfb0606f840, x1, 400, x2)

inst_84:
// rs1_b5_val == 4, rs2_b4_val == 2, rs2_b0_val == 1, rs1_b2_val == 2, rs2_b5_val == 16
// opcode: smaqa.su ; op1:x30; op2:x29; dest:x31; op1val:0x90704090402fbaa;  op2val:0x6551002fe20ff01
TEST_RR_OP(smaqa.su, x31, x30, x29, 0x0000000000000000, 0x90704090402fbaa, 0x6551002fe20ff01, x1, 408, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x23_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x23_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 52*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
