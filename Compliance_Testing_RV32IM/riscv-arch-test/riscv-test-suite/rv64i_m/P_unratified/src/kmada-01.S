
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmada instruction of the RISC-V RV64PZicsr extension for the kmada covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmada)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rd != rs2, rs1==x4, rs2==x2, rd==x4, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h1_val == 8192, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h2_val == -9, rs1_h1_val != rs2_h1_val, rs1_h2_val == -8193, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h3_val == 4096
// opcode: kmada ; op1:x4; op2:x2; dest:x4; op1val:0x1000dfff20008000;  op2val:0xfff9fff70003fffc
TEST_PKRR_OP(kmada, x4, x4, x2, 0x0000000000000000, 0x1000dfff20008000, 0xfff9fff70003fffc, x4, x8, 0, x20)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x6, rs2==x11, rd==x5, rs1_h3_val == rs2_h3_val, rs1_h0_val == -65, rs2_h2_val == -1025, rs2_h1_val == -8193, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 21845, rs2_h3_val == 2048, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -2049, rs2_h0_val == 512, rs1_h3_val == 2048
// opcode: kmada ; op1:x6; op2:x11; dest:x5; op1val:0x8005555f7ffffbf;  op2val:0x800fbffdfff0200
TEST_PKRR_OP(kmada, x5, x6, x11, 0x0000000000000000, 0x8005555f7ffffbf, 0x800fbffdfff0200, x6, x8, 16, x20)

inst_2:
// rs1 == rs2 != rd, rs1==x7, rs2==x7, rd==x9, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == 0, rs1_h0_val == -3, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h0_val == -2049, rs1_h3_val == -4097, rs1_h2_val == -1025
// opcode: kmada ; op1:x7; op2:x7; dest:x9; op1val:0xeffffbfffff9fffd;  op2val:0x0300090000f7ff
TEST_PKRR_OP(kmada, x9, x7, x7, 0x0000000000000000, 0xeffffbfffff9fffd, 0x0300090000f7ff, x7, x8, 32, x20)

inst_3:
// rs1 == rs2 == rd, rs1==x26, rs2==x26, rd==x26, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h2_val == -1, rs2_h0_val == 8, rs1_h2_val == 1024, rs2_h1_val == -513, rs2_h3_val == -2, rs1_h1_val > 0 and rs2_h1_val < 0
// opcode: kmada ; op1:x26; op2:x26; dest:x26; op1val:0xfffc04000007fffd;  op2val:0xfffefffffdff0008
TEST_PKRR_OP(kmada, x26, x26, x26, 0x0000000000000000, 0xfffc04000007fffd, 0xfffefffffdff0008, x26, x8, 48, x20)

inst_4:
// rs2 == rd != rs1, rs1==x27, rs2==x3, rd==x3, rs1_h2_val == rs2_h2_val, rs1_h1_val == 1024, rs2_h2_val == 8, rs1_h2_val == 8, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h3_val == -9, rs1_h0_val == -16385, rs2_h0_val == 8192, rs2_h1_val == 128
// opcode: kmada ; op1:x27; op2:x3; dest:x3; op1val:0xfff700080400bfff;  op2val:0xfffa000800802000
TEST_PKRR_OP(kmada, x3, x27, x3, 0x0000000000000000, 0xfff700080400bfff, 0xfffa000800802000, x27, x8, 64, x20)

inst_5:
// rs1==x28, rs2==x12, rd==x10, rs1_h1_val == rs2_h1_val, rs2_h3_val == -513, rs2_h0_val == -4097, rs1_h2_val == -9, rs1_h1_val == -8193
// opcode: kmada ; op1:x28; op2:x12; dest:x10; op1val:0x09fff7dffffff9;  op2val:0xfdff0009dfffefff
TEST_PKRR_OP(kmada, x10, x28, x12, 0x0000000000000000, 0x09fff7dffffff9, 0xfdff0009dfffefff, x28, x8, 80, x20)

inst_6:
// rs1==x1, rs2==x27, rd==x22, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == 16, rs1_h1_val == -32768, rs2_h1_val == 32767, rs1_h2_val == -65, rs1_h0_val == -4097, rs2_h3_val == -4097
// opcode: kmada ; op1:x1; op2:x27; dest:x22; op1val:0xfffcffbf8000efff;  op2val:0xefff00097fff0010
TEST_PKRR_OP(kmada, x22, x1, x27, 0x0000000000000000, 0xfffcffbf8000efff, 0xefff00097fff0010, x1, x8, 96, x20)

inst_7:
// rs1==x21, rs2==x14, rd==x28, rs1_h0_val == rs2_h0_val, rs1_h3_val == 1024, rs1_h0_val == -9, rs1_h1_val == 2048, rs2_h2_val == 2048, rs2_h0_val == -9, rs1_h2_val == -513, rs2_h3_val == 2
// opcode: kmada ; op1:x21; op2:x14; dest:x28; op1val:0x400fdff0800fff7;  op2val:0x0208000003fff7
TEST_PKRR_OP(kmada, x28, x21, x14, 0x0000000000000000, 0x400fdff0800fff7, 0x0208000003fff7, x21, x8, 112, x20)

inst_8:
// rs1==x29, rs2==x9, rd==x17, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 32, rs2_h1_val == -257, rs1_h3_val == -33
// opcode: kmada ; op1:x29; op2:x9; dest:x17; op1val:0xffdffff7fff60020;  op2val:0xfff8fff9fefffffa
TEST_PKRR_OP(kmada, x17, x29, x9, 0x0000000000000000, 0xffdffff7fff60020, 0xfff8fff9fefffffa, x29, x8, 128, x20)

inst_9:
// rs1==x24, rs2==x15, rd==x25, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 32, rs1_h2_val == 8192, rs1_h0_val == 32767, rs1_h3_val == -3, rs2_h3_val == -1, rs2_h1_val == 8
// opcode: kmada ; op1:x24; op2:x15; dest:x25; op1val:0xfffd200020007fff;  op2val:0xfffffffa00080020
TEST_PKRR_OP(kmada, x25, x24, x15, 0x0000000000000000, 0xfffd200020007fff, 0xfffffffa00080020, x24, x8, 144, x20)

inst_10:
// rs1==x25, rs2==x10, rd==x7, rs2_h3_val == -21846, rs1_h1_val == -129, rs1_h0_val == 512
// opcode: kmada ; op1:x25; op2:x10; dest:x7; op1val:0xefff3fffff7f0200;  op2val:0xaaaafff70006efff
TEST_PKRR_OP(kmada, x7, x25, x10, 0x0000000000000000, 0xefff3fffff7f0200, 0xaaaafff70006efff, x25, x8, 160, x20)

inst_11:
// rs1==x10, rs2==x6, rd==x16, rs2_h3_val == 21845, rs1_h2_val == -2, rs1_h0_val == -257
// opcode: kmada ; op1:x10; op2:x6; dest:x16; op1val:0x800fffe2000feff;  op2val:0x5555000500050006
TEST_PKRR_OP(kmada, x16, x10, x6, 0x0000000000000000, 0x800fffe2000feff, 0x5555000500050006, x10, x8, 176, x20)

inst_12:
// rs1==x2, rs2==x13, rd==x15, rs2_h3_val == 32767, rs2_h2_val == -3, rs2_h1_val == -9, rs2_h0_val == -32768, rs1_h0_val == -8193, rs1_h2_val == -32768
// opcode: kmada ; op1:x2; op2:x13; dest:x15; op1val:0x0380002000dfff;  op2val:0x7ffffffdfff78000
TEST_PKRR_OP(kmada, x15, x2, x13, 0x0000000000000000, 0x0380002000dfff, 0x7ffffffdfff78000, x2, x8, 192, x20)

inst_13:
// rs1==x18, rs2==x24, rd==x14, rs2_h3_val == -16385, rs1_h2_val == -1, rs1_h3_val == -257
// opcode: kmada ; op1:x18; op2:x24; dest:x14; op1val:0xfeffffff0007fffa;  op2val:0xbffffff67ffffffa
TEST_PKRR_OP(kmada, x14, x18, x24, 0x0000000000000000, 0xfeffffff0007fffa, 0xbffffff67ffffffa, x18, x8, 208, x20)

inst_14:
// rs1==x17, rs2==x30, rd==x19, rs2_h3_val == -8193, rs2_h0_val == -5, rs1_h1_val == -257, rs2_h1_val == 64
// opcode: kmada ; op1:x17; op2:x30; dest:x19; op1val:0xffdffdfffeff0003;  op2val:0xdffffbff0040fffb
TEST_PKRR_OP(kmada, x19, x17, x30, 0x0000000000000000, 0xffdffdfffeff0003, 0xdffffbff0040fffb, x17, x8, 224, x20)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_15:
// rs1==x8, rs2==x25, rd==x30, rs2_h3_val == -2049, rs1_h1_val == -3, rs1_h3_val == -21846, rs1_h0_val == 2048, rs1_h2_val == -21846, rs2_h1_val == -33
// opcode: kmada ; op1:x8; op2:x25; dest:x30; op1val:0xaaaaaaaafffd0800;  op2val:0xf7ff0005ffdfc000
TEST_PKRR_OP(kmada, x30, x8, x25, 0x0000000000000000, 0xaaaaaaaafffd0800, 0xf7ff0005ffdfc000, x8, x7, 0, x3)

inst_16:
// rs1==x9, rs2==x16, rd==x1, rs2_h3_val == -1025, rs1_h2_val == 4096, rs1_h1_val == 4096, rs2_h2_val == 1024, rs1_h0_val == 0, rs1_h3_val == -5
// opcode: kmada ; op1:x9; op2:x16; dest:x1; op1val:0xfffb100010000000;  op2val:0xfbff0400fff80005
TEST_PKRR_OP(kmada, x1, x9, x16, 0x0000000000000000, 0xfffb100010000000, 0xfbff0400fff80005, x9, x7, 16, x3)

inst_17:
// rs1==x22, rs2==x0, rd==x20, rs2_h3_val == -257, rs1_h0_val == 2, rs1_h3_val == 16, rs1_h2_val == 1
// opcode: kmada ; op1:x22; op2:x0; dest:x20; op1val:0x100001fffd0002;  op2val:0xfeff00030007f7ff
TEST_PKRR_OP(kmada, x20, x22, x0, 0x0000000000000000, 0x100001fffd0002, 0xfeff00030007f7ff, x22, x7, 32, x3)

inst_18:
// rs1==x14, rs2==x23, rd==x31, rs2_h3_val == -129, rs1_h3_val == 256, rs2_h1_val == -65, rs2_h2_val == -5, rs1_h2_val == 2, rs1_h1_val == 4
// opcode: kmada ; op1:x14; op2:x23; dest:x31; op1val:0x100000200040003;  op2val:0xff7ffffbffbfefff
TEST_PKRR_OP(kmada, x31, x14, x23, 0x0000000000000000, 0x100000200040003, 0xff7ffffbffbfefff, x14, x7, 48, x3)

inst_19:
// rs1==x16, rs2==x5, rd==x6, rs2_h3_val == -65, rs1_h3_val == 8
// opcode: kmada ; op1:x16; op2:x5; dest:x6; op1val:0x08dfff00073fff;  op2val:0xffbffbff0000fff8
TEST_PKRR_OP(kmada, x6, x16, x5, 0x0000000000000000, 0x08dfff00073fff, 0xffbffbff0000fff8, x16, x7, 64, x3)

inst_20:
// rs1==x20, rs2==x19, rd==x12, rs2_h3_val == -33, rs1_h1_val == 32767, rs1_h2_val == 512, rs2_h2_val == -32768
// opcode: kmada ; op1:x20; op2:x19; dest:x12; op1val:0xfff602007fff0007;  op2val:0xffdf80003fffc000
TEST_PKRR_OP(kmada, x12, x20, x19, 0x0000000000000000, 0xfff602007fff0007, 0xffdf80003fffc000, x20, x7, 80, x3)

inst_21:
// rs1==x13, rs2==x31, rd==x29, rs2_h3_val == -17, rs2_h1_val == 4, rs1_h0_val == 64
// opcode: kmada ; op1:x13; op2:x31; dest:x29; op1val:0xc000fffa10000040;  op2val:0xffeffff900043fff
TEST_PKRR_OP(kmada, x29, x13, x31, 0x0000000000000000, 0xc000fffa10000040, 0xffeffff900043fff, x13, x7, 96, x3)

inst_22:
// rs1==x0, rs2==x18, rd==x11, rs2_h3_val == -9, rs1_h3_val == 128, rs1_h2_val == -2049
// opcode: kmada ; op1:x0; op2:x18; dest:x11; op1val:0x80f7ffff7f0006;  op2val:0xfff70006fff7f7ff
TEST_PKRR_OP(kmada, x11, x0, x18, 0x0000000000000000, 0x80f7ffff7f0006, 0xfff70006fff7f7ff, x0, x7, 112, x3)

inst_23:
// rs1==x15, rs2==x29, rd==x8, rs2_h3_val == -5, rs1_h3_val == -2, rs1_h2_val == -17, rs2_h1_val == 1, rs2_h0_val == -2
// opcode: kmada ; op1:x15; op2:x29; dest:x8; op1val:0xfffeffef0004feff;  op2val:0xfffbfffc0001fffe
TEST_PKRR_OP(kmada, x8, x15, x29, 0x0000000000000000, 0xfffeffef0004feff, 0xfffbfffc0001fffe, x15, x7, 128, x3)

inst_24:
// rs1==x11, rs2==x1, rd==x23, rs2_h3_val == -3, rs2_h2_val == -33, rs1_h3_val == -513, rs2_h1_val == -3, rs1_h0_val == 16384
// opcode: kmada ; op1:x11; op2:x1; dest:x23; op1val:0xfdff000520004000;  op2val:0xfffdffdffffdf7ff
TEST_PKRR_OP(kmada, x23, x11, x1, 0x0000000000000000, 0xfdff000520004000, 0xfffdffdffffdf7ff, x11, x7, 144, x3)

inst_25:
// rs1==x30, rs2==x20, rd==x27, rs2_h3_val == -32768, rs1_h0_val == -1025, rs1_h1_val == 16
// opcode: kmada ; op1:x30; op2:x20; dest:x27; op1val:0xfffbfbff0010fbff;  op2val:0x8000c00000800006
TEST_PKRR_OP(kmada, x27, x30, x20, 0x0000000000000000, 0xfffbfbff0010fbff, 0x8000c00000800006, x30, x7, 160, x3)

inst_26:
// rs1==x12, rs2==x21, rd==x2, rs2_h3_val == 16384, rs2_h2_val == -513, rs2_h0_val == 128
// opcode: kmada ; op1:x12; op2:x21; dest:x2; op1val:0x3fff04000006fffd;  op2val:0x4000fdfffdff0080
TEST_PKRR_OP(kmada, x2, x12, x21, 0x0000000000000000, 0x3fff04000006fffd, 0x4000fdfffdff0080, x12, x7, 176, x3)

inst_27:
// rs1==x5, rs2==x28, rd==x18, rs2_h3_val == 8192, rs2_h2_val == -4097, rs1_h1_val == -33, rs2_h0_val == -17
// opcode: kmada ; op1:x5; op2:x28; dest:x18; op1val:0x05ffefffdf0000;  op2val:0x2000efffdfffffef
TEST_PKRR_OP(kmada, x18, x5, x28, 0x0000000000000000, 0x05ffefffdf0000, 0x2000efffdfffffef, x5, x7, 192, x3)

inst_28:
// rs1==x23, rs2==x8, rd==x13, rs2_h3_val == 4096, rs2_h0_val == 64, rs2_h2_val == -129
// opcode: kmada ; op1:x23; op2:x8; dest:x13; op1val:0x1000000700060009;  op2val:0x1000ff7fffdf0040
TEST_PKRR_OP(kmada, x13, x23, x8, 0x0000000000000000, 0x1000000700060009, 0x1000ff7fffdf0040, x23, x7, 208, x3)

inst_29:
// rs1==x31, rs2==x22, rd==x21, rs2_h3_val == 1024, rs1_h3_val == 4, rs1_h2_val == 32, rs1_h1_val == -5, rs2_h1_val == -2049
// opcode: kmada ; op1:x31; op2:x22; dest:x21; op1val:0x040020fffb3fff;  op2val:0x400effff7ff0003
TEST_PKRR_OP(kmada, x21, x31, x22, 0x0000000000000000, 0x040020fffb3fff, 0x400effff7ff0003, x31, x7, 224, x3)

inst_30:
// rs1==x19, rs2==x4, rd==x24, rs2_h3_val == 512, rs2_h0_val == -1025, rs2_h2_val == -257
// opcode: kmada ; op1:x19; op2:x4; dest:x24; op1val:0xfffcffff00060009;  op2val:0x200fefffffdfbff
TEST_PKRR_OP(kmada, x24, x19, x4, 0x0000000000000000, 0xfffcffff00060009, 0x200fefffffdfbff, x19, x7, 240, x3)

inst_31:
// rs1==x3, rs2==x17, rd==x0, rs2_h3_val == 256, rs1_h1_val == -513
// opcode: kmada ; op1:x3; op2:x17; dest:x0; op1val:0xefffc000fdffefff;  op2val:0x100fff90080c000
TEST_PKRR_OP(kmada, x0, x3, x17, 0x0000000000000000, 0xefffc000fdffefff, 0x100fff90080c000, x3, x7, 256, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs2_h3_val == 128, rs2_h0_val == 16384
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00060005;  op2val:0x803fff00074000
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xffdfffff00060005, 0x803fff00074000, x30, x1, 0, x2)

inst_33:
// rs2_h3_val == 64, rs1_h1_val == 32
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x08000100200000;  op2val:0x40ffdfc000fff7
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x08000100200000, 0x40ffdfc000fff7, x30, x1, 16, x2)

inst_34:
// rs2_h3_val == 32, rs2_h1_val == 1024, rs1_h0_val == -17, rs1_h3_val == 32767, rs2_h0_val == 1024
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x7fffaaaa0005ffef;  op2val:0x20ff7f04000400
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x7fffaaaa0005ffef, 0x20ff7f04000400, x30, x1, 32, x2)

inst_35:
// rs2_h3_val == 16, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffbf1000fffc;  op2val:0x10ffdf00060020
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xfeffffbf1000fffc, 0x10ffdf00060020, x30, x1, 48, x2)

inst_36:
// rs2_h3_val == 8, rs2_h0_val == -16385, rs1_h1_val == -21846
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x10000400aaaafff7;  op2val:0x08fefffff7bfff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x10000400aaaafff7, 0x08fefffff7bfff, x30, x1, 64, x2)

inst_37:
// rs2_h3_val == 4, rs1_h0_val == 8192, rs2_h0_val == -257, rs2_h1_val == 4096
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x06fffaff7f2000;  op2val:0x0480001000feff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x06fffaff7f2000, 0x0480001000feff, x30, x1, 80, x2)

inst_38:
// rs2_h3_val == 1, rs1_h1_val == 64, rs2_h0_val == -21846
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfffd20000040fff8;  op2val:0x01c000fffdaaaa
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xfffd20000040fff8, 0x01c000fffdaaaa, x30, x1, 96, x2)

inst_39:
// rs2_h3_val == 0, rs1_h1_val == -1, rs1_h0_val == -2, rs2_h1_val == 2048
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffffffffffe;  op2val:0x00ff7f08000009
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xfffafffffffffffe, 0x00ff7f08000009, x30, x1, 112, x2)

inst_40:
// rs1_h1_val == -2, rs1_h3_val == -1, rs2_h2_val == 512, rs1_h0_val == -129
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xffff0005fffeff7f;  op2val:0x040200fffa0007
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xffff0005fffeff7f, 0x040200fffa0007, x30, x1, 128, x2)

inst_41:
// rs1_h1_val == 16384, rs2_h0_val == -8193, rs2_h1_val == 256, rs1_h2_val == 32767
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x067fff40008000;  op2val:0x8000fff70100dfff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x067fff40008000, 0x8000fff70100dfff, x30, x1, 144, x2)

inst_42:
// rs1_h1_val == 512, rs2_h0_val == 1, rs2_h2_val == 1
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xaaaadfff02003fff;  op2val:0xfff70001dfff0001
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xaaaadfff02003fff, 0xfff70001dfff0001, x30, x1, 160, x2)

inst_43:
// rs1_h1_val == 256, rs2_h2_val == 32, rs1_h0_val == 1024
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x06002001000400;  op2val:0x55550020fff80400
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x06002001000400, 0x55550020fff80400, x30, x1, 176, x2)

inst_44:
// rs1_h1_val == 128, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x0680000080ffbf;  op2val:0x20ffdffff80020
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x0680000080ffbf, 0x20ffdffff80020, x30, x1, 192, x2)

inst_45:
// rs1_h1_val == 8, rs1_h3_val == 16384, rs2_h2_val == -2049, rs2_h1_val == -1, rs1_h0_val == -1
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff70008ffff;  op2val:0xeffff7fffffffff8
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x4000fff70008ffff, 0xeffff7fffffffff8, x30, x1, 208, x2)

inst_46:
// rs1_h1_val == 2, rs1_h3_val == 2, rs1_h2_val == 0
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x02000000023fff;  op2val:0x10fdfffff7dfff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x02000000023fff, 0x10fdfffff7dfff, x30, x1, 224, x2)

inst_47:
// rs1_h1_val == 1, rs1_h2_val == 16, rs2_h1_val == 16
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfffe00100001ffbf;  op2val:0x80fdff0010ffef
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xfffe00100001ffbf, 0x80fdff0010ffef, x30, x1, 240, x2)

inst_48:
// rs1_h1_val == 0, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfff6000300000000;  op2val:0x02000800082000
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xfff6000300000000, 0x02000800082000, x30, x1, 256, x2)

inst_49:
// rs1_h0_val == -21846, rs2_h1_val == -16385
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff0005aaaa;  op2val:0x20fff8bfff0200
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xefffffff0005aaaa, 0x20fff8bfff0200, x30, x1, 272, x2)

inst_50:
// rs1_h0_val == 21845, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x025555fff85555;  op2val:0x400008fff6fffb
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x025555fff85555, 0x400008fff6fffb, x30, x1, 288, x2)

inst_51:
// rs1_h0_val == -2049, rs1_h2_val == -4097
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x100efff0020f7ff;  op2val:0xffbf00010008bfff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x100efff0020f7ff, 0xffbf00010008bfff, x30, x1, 304, x2)

inst_52:
// rs1_h0_val == -513, rs1_h2_val == -3
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x80fffdfff8fdff;  op2val:0xc0000001ffdffffe
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x80fffdfff8fdff, 0xc0000001ffdffffe, x30, x1, 320, x2)

inst_53:
// rs1_h0_val == -33, rs1_h3_val == 512
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x2000020feffffdf;  op2val:0xfff9fffa0005fff7
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x2000020feffffdf, 0xfff9fffa0005fff7, x30, x1, 336, x2)

inst_54:
// rs1_h0_val == -5, rs2_h0_val == -1
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x10f7ffc000fffb;  op2val:0xffbffffcfffdffff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x10f7ffc000fffb, 0xffbffffcfffdffff, x30, x1, 352, x2)

inst_55:
// rs1_h0_val == 4096, rs1_h2_val == 16384, rs2_h0_val == 2, rs1_h3_val == 8192
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x2000400000081000;  op2val:0x80c000fffc0002
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x2000400000081000, 0x80c000fffc0002, x30, x1, 368, x2)

inst_56:
// rs1_h0_val == 256, rs2_h2_val == 4096, rs1_h3_val == -17
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xffef5555feff0100;  op2val:0x0510001000c000
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xffef5555feff0100, 0x0510001000c000, x30, x1, 384, x2)

inst_57:
// rs1_h0_val == 128, rs1_h3_val == -1025, rs2_h1_val == 2, rs1_h2_val == -33, rs1_h1_val == -17
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffdfffef0080;  op2val:0x04fffc0002efff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xfbffffdfffef0080, 0x04fffc0002efff, x30, x1, 400, x2)

inst_58:
// rs1_h0_val == 16, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xeffffff9aaaa0010;  op2val:0x08fffd00058000
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xeffffff9aaaa0010, 0x08fffd00058000, x30, x1, 416, x2)

inst_59:
// rs1_h0_val == 8, rs2_h1_val == -129
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000900020008;  op2val:0x8000fff6ff7f0040
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xaaaa000900020008, 0x8000fff6ff7f0040, x30, x1, 432, x2)

inst_60:
// rs1_h0_val == 4, rs2_h0_val == 21845
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffd10000004;  op2val:0xfff7fffcfffc5555
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xfff8fffd10000004, 0xfff7fffcfffc5555, x30, x1, 448, x2)

inst_61:
// rs1_h0_val == 1, rs2_h1_val == 512, rs2_h2_val == 21845, rs1_h2_val == 256
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x2000010080000001;  op2val:0x10055550200ffff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x2000010080000001, 0x10055550200ffff, x30, x1, 464, x2)

inst_62:
// rs2_h2_val == -21846, rs1_h2_val == 128
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x200008000090020;  op2val:0x08aaaa00100040
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x200008000090020, 0x08aaaa00100040, x30, x1, 480, x2)

inst_63:
// rs2_h0_val == 32767, rs2_h1_val == -17
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfbffefffff7fdfff;  op2val:0xbffff7ffffef7fff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xfbffefffff7fdfff, 0xbffff7ffffef7fff, x30, x1, 496, x2)

inst_64:
// rs2_h0_val == -513, rs1_h2_val == -16385, rs2_h1_val == 21845
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x100bfff00030010;  op2val:0x20fffc5555fdff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x100bfff00030010, 0x20fffc5555fdff, x30, x1, 512, x2)

inst_65:
// rs2_h0_val == -129, rs2_h2_val == -65
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffbff10007fff;  op2val:0xffffffbf0800ff7f
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xfdfffbff10007fff, 0xffffffbf0800ff7f, x30, x1, 528, x2)

inst_66:
// rs2_h0_val == -65, rs2_h2_val == -16385, rs1_h3_val == 32
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x2002007fff0040;  op2val:0x7fffbffffff8ffbf
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x2002007fff0040, 0x7fffbffffff8ffbf, x30, x1, 544, x2)

inst_67:
// rs2_h0_val == -33, rs1_h1_val == -65, rs1_h3_val == -16385, rs2_h1_val == 8192
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xbfff3fffffbffdff;  op2val:0xff7f00062000ffdf
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xbfff3fffffbffdff, 0xff7f00062000ffdf, x30, x1, 560, x2)

inst_68:
// rs2_h0_val == -3, rs1_h3_val == -2049
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff001010000001;  op2val:0x80fdfffff6fffd
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xf7ff001010000001, 0x80fdfffff6fffd, x30, x1, 576, x2)

inst_69:
// rs2_h0_val == 4096, rs2_h1_val == -5
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x400fffac000fffd;  op2val:0xc000bffffffb1000
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x400fffac000fffd, 0xc000bffffffb1000, x30, x1, 592, x2)

inst_70:
// rs2_h0_val == 2048, rs2_h2_val == -8193
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x02bffffdffc000;  op2val:0x05dffffff60800
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x02bffffdffc000, 0x05dffffff60800, x30, x1, 608, x2)

inst_71:
// rs2_h0_val == 256, rs2_h2_val == 2
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0008f7ffaaaa;  op2val:0xefff0002ffef0100
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x7fff0008f7ffaaaa, 0xefff0002ffef0100, x30, x1, 624, x2)

inst_72:
// rs2_h0_val == 4, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffc8000ff7f;  op2val:0x07fff800060004
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xfefffffc8000ff7f, 0x07fff800060004, x30, x1, 640, x2)

inst_73:
// rs2_h0_val == 0, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffdf08000005;  op2val:0x05aaaafff80000
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xfffdffdf08000005, 0x05aaaafff80000, x30, x1, 656, x2)

inst_74:
// rs1_h3_val == 21845, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x5555dfff0002ffdf;  op2val:0xc000ff7fc0007fff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x5555dfff0002ffdf, 0xc000ff7fc0007fff, x30, x1, 672, x2)

inst_75:
// rs1_h3_val == -8193, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xdfffbfffffefdfff;  op2val:0x40fff60003fffe
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xdfffbfffffefdfff, 0x40fff60003fffe, x30, x1, 688, x2)

inst_76:
// rs1_h3_val == -129, rs2_h2_val == 8192
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffcfffafffb;  op2val:0xfffe20000100fffd
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xff7ffffcfffafffb, 0xfffe20000100fffd, x30, x1, 704, x2)

inst_77:
// rs1_h3_val == -65, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xffbf8000f7ff0200;  op2val:0xc000ffbfbffffffa
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xffbf8000f7ff0200, 0xc000ffbfbffffffa, x30, x1, 720, x2)

inst_78:
// rs1_h3_val == -32768, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x800080003ffffff7;  op2val:0x07200000050200
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x800080003ffffff7, 0x07200000050200, x30, x1, 736, x2)

inst_79:
// rs1_h1_val == -9, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x20fdfffff7bfff;  op2val:0xfff7fdff00070003
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x20fdfffff7bfff, 0xfff7fdff00070003, x30, x1, 752, x2)

inst_80:
// rs1_h3_val == 64, rs1_h2_val == -129
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x40ff7f0000efff;  op2val:0x06fff80001fdff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x40ff7f0000efff, 0x06fff80001fdff, x30, x1, 768, x2)

inst_81:
// rs2_h2_val == -17, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfffbaaaa0001f7ff;  op2val:0x3fffffeffff6ff7f
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xfffbaaaa0001f7ff, 0x3fffffeffff6ff7f, x30, x1, 784, x2)

inst_82:
// rs1_h3_val == 1, rs2_h2_val == 4
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x013fffc0001000;  op2val:0x40000045555efff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x013fffc0001000, 0x40000045555efff, x30, x1, 800, x2)

inst_83:
// rs1_h3_val == 0, rs1_h2_val == -5
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x00fffbf7ff0003;  op2val:0x07000400027fff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x00fffbf7ff0003, 0x07000400027fff, x30, x1, 816, x2)

inst_84:
// rs2_h2_val == -2, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfeff80001000aaaa;  op2val:0xbffffffe20008000
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xfeff80001000aaaa, 0xbffffffe20008000, x30, x1, 832, x2)

inst_85:
// rs2_h2_val == 16384, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x2000bfffffbf5555;  op2val:0x034000ffff0001
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x2000bfffffbf5555, 0x034000ffff0001, x30, x1, 848, x2)

inst_86:
// rs2_h2_val == 256, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0005c000fffb;  op2val:0xf7ff010055550400
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xdfff0005c000fffb, 0xf7ff010055550400, x30, x1, 864, x2)

inst_87:
// rs1_h2_val == -257, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x40fefffff7ffbf;  op2val:0xdfffdfff00090040
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x40fefffff7ffbf, 0xdfffdfff00090040, x30, x1, 880, x2)

inst_88:
// rs2_h2_val == 128, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x04fffffff8f7ff;  op2val:0x40000800003ffff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x04fffffff8f7ff, 0x40000800003ffff, x30, x1, 896, x2)

inst_89:
// rs2_h2_val == 64, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x4000020fffd1000;  op2val:0xdfff0040feff0100
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x4000020fffd1000, 0xdfff0040feff0100, x30, x1, 912, x2)

inst_90:
// rs2_h2_val == 16, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa020004001000;  op2val:0x800010fffcfff8
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xaaaa020004001000, 0x800010fffcfff8, x30, x1, 928, x2)

inst_91:
// rs2_h2_val == 0, rs1_h2_val == 2048
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x8000800fffcfffb;  op2val:0xfffa0000f7fffffb
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x8000800fffcfffb, 0xfffa0000f7fffffb, x30, x1, 944, x2)

inst_92:
// rs2_h1_val == -21846, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x204000ffeffeff;  op2val:0xfff6fffbaaaa0004
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x204000ffeffeff, 0xfff6fffbaaaa0004, x30, x1, 960, x2)

inst_93:
// rs2_h1_val == -4097, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xefff0100c0002000;  op2val:0x090400effffffa
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xefff0100c0002000, 0x090400effffffa, x30, x1, 976, x2)

inst_94:
// rs2_h1_val == -1025, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x00400000050080;  op2val:0x07ffeffbff3fff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x00400000050080, 0x07ffeffbff3fff, x30, x1, 992, x2)

inst_95:
// rs1_h2_val == 64, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x2000004000800200;  op2val:0xefff000508000100
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x2000004000800200, 0xefff000508000100, x30, x1, 1008, x2)

inst_96:
// rs1_h2_val == 4, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x4000000400080005;  op2val:0x555508000040fffe
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x4000000400080005, 0x555508000040fffe, x30, x1, 1024, x2)

inst_97:
// rs2_h1_val == -2, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfffcffdffff60005;  op2val:0x1000fffffffeaaaa
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xfffcffdffff60005, 0x1000fffffffeaaaa, x30, x1, 1040, x2)

inst_98:
// rs1_h1_val == 21845, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffb5555ffbf;  op2val:0x03000804000080
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xfdfffffb5555ffbf, 0x03000804000080, x30, x1, 1056, x2)

inst_99:
// rs2_h1_val == -32768, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff0006fff9;  op2val:0x0100088000fffd
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xfbffffff0006fff9, 0x0100088000fffd, x30, x1, 1072, x2)

inst_100:
// rs2_h1_val == 16384, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x20f7fffff8ffff;  op2val:0x04fff740000100
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x20f7fffff8ffff, 0x04fff740000100, x30, x1, 1088, x2)

inst_101:
// rs1_h1_val == -16385, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x3fffefffbfff0800;  op2val:0x7fff080000010006
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x3fffefffbfff0800, 0x7fff080000010006, x30, x1, 1104, x2)

inst_102:
// rs1_h1_val == -1025, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x80000200fbfffffa;  op2val:0xfefffff60100fffd
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x80000200fbfffffa, 0xfefffff60100fffd, x30, x1, 1120, x2)

inst_103:
// rs2_h1_val == 32, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x407fff0002feff;  op2val:0x10aaaa00200003
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x407fff0002feff, 0x10aaaa00200003, x30, x1, 1136, x2)

inst_104:
// rs1_h1_val == -4097, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x01fff8efff8000;  op2val:0xfffeefff0002feff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x01fff8efff8000, 0xfffeefff0002feff, x30, x1, 1152, x2)

inst_105:
// rs2_h2_val == 32767, 
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafff9ffff;  op2val:0x1007ffffff70003
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xfffffffafff9ffff, 0x1007ffffff70003, x30, x1, 1168, x2)

inst_106:
// rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h2_val == -1, rs2_h0_val == 8, rs1_h2_val == 1024, rs2_h1_val == -513, rs2_h3_val == -2, rs1_h1_val > 0 and rs2_h1_val < 0
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0xfffc04000007fffd;  op2val:0xfffefffffdff0008
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0xfffc04000007fffd, 0xfffefffffdff0008, x30, x1, 1184, x2)

inst_107:
// rs2_h3_val == -257, rs1_h0_val == 2, rs1_h3_val == 16, rs1_h2_val == 1
// opcode: kmada ; op1:x30; op2:x29; dest:x31; op1val:0x100001fffd0002;  op2val:0xfeff00030007f7ff
TEST_PKRR_OP(kmada, x31, x30, x29, 0x0000000000000000, 0x100001fffd0002, 0xfeff00030007f7ff, x30, x1, 1200, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 152*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
