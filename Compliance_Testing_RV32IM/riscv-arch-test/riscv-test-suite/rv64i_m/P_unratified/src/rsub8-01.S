
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rsub8 instruction of the RISC-V RV64PZicsr extension for the rsub8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",rsub8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:// rs1 == rd != rs2, rs1==x13, rs2==x3, rd==x13, rs1_b0_val == -128, rs2_b4_val == -1, rs1_b7_val != rs2_b7_val, rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b6_val != rs2_b6_val, rs1_b5_val == 4, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b5_val != rs2_b5_val, rs2_b3_val == 32, rs1_b5_val > 0 and rs2_b5_val < 0, rs1_b4_val != rs2_b4_val, rs1_b4_val > 0 and rs2_b4_val < 0, rs1_b3_val != rs2_b3_val, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val, rs2_b2_val == 1, rs1_b3_val == -5, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b0_val != rs2_b0_val, rs2_b1_val == 85, rs1_b0_val < 0 and rs2_b0_val < 0, rs2_b7_val == 127, rs2_b6_val == 16, rs1_b6_val == 85, rs2_b5_val == -1
// opcode: rsub8 ; op1:x13; op2:x3; dest:x13; op1val:0xfa550407fb070380;  op2val:0x7f10ffff200155f8
TEST_RR_OP(rsub8, x13, x13, x3, 0x0000000000000000, 0xfa550407fb070380, 0x7f10ffff200155f8, x5, 0, x11)

inst_1:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x10, rs2==x31, rd==x20, rs1_b7_val == rs2_b7_val, rs2_b5_val == -5, rs1_b2_val < 0 and rs2_b2_val < 0, rs2_b3_val == 85, rs1_b7_val < 0 and rs2_b7_val < 0, rs2_b6_val == -33, rs1_b6_val < 0 and rs2_b6_val < 0, rs1_b6_val == -9, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b3_val == 4, rs1_b4_val < 0 and rs2_b4_val > 0, rs1_b1_val == 8, rs2_b4_val == 16, rs2_b0_val == 85, rs1_b3_val > 0 and rs2_b3_val > 0
// opcode: rsub8 ; op1:x10; op2:x31; dest:x20; op1val:0xf8f706fa04fc08fc;  op2val:0xf8dffb1055fa3f55
TEST_RR_OP(rsub8, x20, x10, x31, 0x0000000000000000, 0xf8f706fa04fc08fc, 0xf8dffb1055fa3f55, x5, 8, x11)

inst_2:// rs1 == rs2 != rd, rs1==x12, rs2==x12, rd==x17, rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b6_val == rs2_b6_val, rs1_b1_val < 0 and rs2_b1_val < 0, rs2_b3_val == -3, rs1_b3_val == -128, rs1_b0_val == 2, rs2_b1_val == -33, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b4_val == -33, rs2_b2_val == -5, rs2_b7_val == -65, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b3_val < 0 and rs2_b3_val < 0
// opcode: rsub8 ; op1:x12; op2:x12; dest:x17; op1val:0x907fcf98007fc02;  op2val:0xbf0706dffdfbdffc
TEST_RR_OP(rsub8, x17, x12, x12, 0x0000000000000000, 0x907fcf98007fc02, 0xbf0706dffdfbdffc, x5, 16, x11)

inst_3:// rs1 == rs2 == rd, rs1==x9, rs2==x9, rd==x9, rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b2_val == 64, rs2_b0_val == -65, rs1_b2_val == 8, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b6_val == -3, rs2_b3_val == 16, rs1_b4_val == -86, rs1_b0_val == 1, rs1_b1_val == -2, rs2_b6_val == 8, rs1_b5_val == 85, rs2_b7_val == 16
// opcode: rsub8 ; op1:x9; op2:x9; dest:x9; op1val:0x3fd55aa0608fe01;  op2val:0x1008ff05104006bf
TEST_RR_OP(rsub8, x9, x9, x9, 0x0000000000000000, 0x3fd55aa0608fe01, 0x1008ff05104006bf, x5, 24, x11)

inst_4:// rs2 == rd != rs1, rs1==x14, rs2==x25, rd==x25, rs1_b6_val > 0 and rs2_b6_val < 0, rs2_b3_val == -5, rs2_b0_val == 64, rs2_b6_val == -3, rs1_b1_val == -9, rs1_b6_val == 16, rs1_b5_val == -17, rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b7_val == -2, rs2_b4_val == 1
// opcode: rsub8 ; op1:x14; op2:x25; dest:x25; op1val:0xfe10ef3ff805f7f6;  op2val:0xbffd0301fb3fdf40
TEST_RR_OP(rsub8, x25, x14, x25, 0x0000000000000000, 0xfe10ef3ff805f7f6, 0xbffd0301fb3fdf40, x5, 32, x11)

inst_5:// rs1==x0, rs2==x23, rd==x31, rs1_b5_val == rs2_b5_val, rs1_b2_val == 64, rs2_b3_val == -9, rs1_b1_val > 0 and rs2_b1_val < 0, rs2_b5_val == 1, rs1_b5_val == 1, rs1_b0_val == 16, rs2_b4_val == 85, rs2_b0_val == -1, rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b7_val == -65, rs1_b4_val == -3, rs1_b1_val == 4, rs2_b7_val == 8
// opcode: rsub8 ; op1:x0; op2:x23; dest:x31; op1val:0xbf5501fdc0400410;  op2val:0x8090155f7faf8ff
TEST_RR_OP(rsub8, x31, x0, x23, 0x0000000000000000, 0xbf5501fdc0400410, 0x8090155f7faf8ff, x5, 40, x11)

inst_6:// rs1==x20, rs2==x26, rd==x2, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b3_val == -17, rs1_b5_val == -1, rs2_b0_val == 2, rs1_b4_val == 85, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b3_val == 2, rs2_b4_val == -65, rs2_b1_val == 16, rs2_b7_val == -2
// opcode: rsub8 ; op1:x20; op2:x26; dest:x2; op1val:0xbfc0ff55ef3f0309;  op2val:0xfefcffbf02011002
TEST_RR_OP(rsub8, x2, x20, x26, 0x0000000000000000, 0xbfc0ff55ef3f0309, 0xfefcffbf02011002, x5, 48, x11)

inst_7:// rs1==x17, rs2==x14, rd==x29, rs1_b4_val == rs2_b4_val, rs1_b7_val == 1, rs1_b1_val == -65, rs2_b2_val == -3, rs2_b3_val == -17
// opcode: rsub8 ; op1:x17; op2:x14; dest:x29; op1val:0x105095580fabff6;  op2val:0xfedf0655effd3f03
TEST_RR_OP(rsub8, x29, x17, x14, 0x0000000000000000, 0x105095580fabff6, 0xfedf0655effd3f03, x5, 56, x11)

inst_8:// rs1==x6, rs2==x16, rd==x0, rs1_b3_val == rs2_b3_val, rs1_b5_val == -3, rs1_b0_val == -17, rs2_b3_val == -65, rs2_b5_val == 32, rs1_b3_val == -65, rs2_b6_val == 127, rs2_b2_val == 0, rs2_b4_val == -86, rs1_b6_val == -128, rs1_b4_val == -65, rs1_b1_val == -1, rs2_b7_val == 32, rs1_b2_val == -2
// opcode: rsub8 ; op1:x6; op2:x16; dest:x0; op1val:0x680fdbfbffeffef;  op2val:0x207f20aabf00f6fc
TEST_RR_OP(rsub8, x0, x6, x16, 0x0000000000000000, 0x680fdbfbffeffef, 0x207f20aabf00f6fc, x5, 64, x11)

inst_9:// rs1==x19, rs2==x21, rd==x16, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b2_val == rs2_b2_val, rs1_b0_val == 64, rs1_b3_val == 32, rs2_b0_val == 0, rs1_b4_val == -2, rs2_b2_val == 85, rs1_b2_val == 85, rs2_b5_val == 127
// opcode: rsub8 ; op1:x19; op2:x21; dest:x16; op1val:0xf93f3ffe20550740;  op2val:0x3ff87ff8f755f600
TEST_RR_OP(rsub8, x16, x19, x21, 0x0000000000000000, 0xf93f3ffe20550740, 0x3ff87ff8f755f600, x5, 72, x11)

inst_10:// rs1==x27, rs2==x2, rd==x14, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b5_val == -3, rs2_b3_val == -86, rs1_b6_val == 127, rs2_b1_val == -17, rs1_b4_val == -9, rs2_b4_val == -3
// opcode: rsub8 ; op1:x27; op2:x2; dest:x14; op1val:0xc07f01f780f607f6;  op2val:0xfc3ffdfdaa05effc
TEST_RR_OP(rsub8, x14, x27, x2, 0x0000000000000000, 0xc07f01f780f607f6, 0xfc3ffdfdaa05effc, x5, 80, x11)

inst_11:// rs1==x8, rs2==x22, rd==x12, rs1_b1_val == rs2_b1_val, rs2_b7_val == -1, rs1_b3_val == -33, rs1_b0_val == -2, rs2_b1_val == -86, rs1_b5_val == 2, rs1_b1_val == -86, rs1_b6_val == -2, rs1_b7_val == 85, rs2_b4_val == -5, rs1_b4_val == -128
// opcode: rsub8 ; op1:x8; op2:x22; dest:x12; op1val:0x55fe0280dff9aafe;  op2val:0xff03f9fb55fbaa40
TEST_RR_OP(rsub8, x12, x8, x22, 0x0000000000000000, 0x55fe0280dff9aafe, 0xff03f9fb55fbaa40, x5, 88, x11)

inst_12:// rs1==x23, rs2==x0, rd==x7, rs1_b0_val == rs2_b0_val, rs2_b7_val == 0, rs2_b0_val == -9, rs1_b0_val == -9, rs2_b1_val == -9, rs1_b7_val == -17, rs2_b5_val == -17
// opcode: rsub8 ; op1:x23; op2:x0; dest:x7; op1val:0xeff755063ff9f9f7;  op2val:0xf8eff8fb09f7f7
TEST_RR_OP(rsub8, x7, x23, x0, 0x0000000000000000, 0xeff755063ff9f9f7, 0xf8eff8fb09f7f7, x5, 96, x11)

inst_13:// rs1==x29, rs2==x4, rd==x22, rs2_b7_val == -86, rs2_b5_val == -128, rs1_b0_val == 32, rs1_b3_val == -2, rs2_b6_val == -128, rs1_b7_val == 127, rs2_b1_val == 64, rs1_b4_val == 8
// opcode: rsub8 ; op1:x29; op2:x4; dest:x22; op1val:0x7ff6ff08fe060620;  op2val:0xaa8080fc03f640f7
TEST_RR_OP(rsub8, x22, x29, x4, 0x0000000000000000, 0x7ff6ff08fe060620, 0xaa8080fc03f640f7, x5, 104, x11)

inst_14:// rs1==x22, rs2==x29, rd==x6, rs2_b7_val == 85, rs2_b3_val == 127, rs1_b2_val == 2, rs1_b5_val == -86, rs1_b3_val == -9, rs2_b2_val == -33
// opcode: rsub8 ; op1:x22; op2:x29; dest:x6; op1val:0x3f3faa06f70203f9;  op2val:0x55fafcf67fdf3ff6
TEST_RR_OP(rsub8, x6, x22, x29, 0x0000000000000000, 0x3f3faa06f70203f9, 0x55fafcf67fdf3ff6, x5, 112, x11)

inst_15:// rs1==x21, rs2==x20, rd==x4, rs2_b7_val == -33, rs1_b7_val == 0, rs2_b2_val == 4, rs1_b0_val == 4, rs1_b1_val == -5, rs2_b1_val == -3, rs1_b4_val == -33, rs1_b3_val == -1
// opcode: rsub8 ; op1:x21; op2:x20; dest:x4; op1val:0xfaf9dfffc0fb04;  op2val:0xdffafb07bf04fdfa
TEST_RR_OP(rsub8, x4, x21, x20, 0x0000000000000000, 0xfaf9dfffc0fb04, 0xdffafb07bf04fdfa, x5, 120, x11)

inst_16:// rs1==x4, rs2==x28, rd==x30, rs2_b7_val == -17, rs2_b3_val == 1, rs2_b0_val == 8, rs2_b2_val == -2
// opcode: rsub8 ; op1:x4; op2:x28; dest:x30; op1val:0xf67faa5503fe06f7;  op2val:0xef3f060501fec008
TEST_RR_OP(rsub8, x30, x4, x28, 0x0000000000000000, 0xf67faa5503fe06f7, 0xef3f060501fec008, x5, 128, x11)

inst_17:// rs1==x1, rs2==x24, rd==x8, rs2_b7_val == -9, rs1_b2_val == 32, rs2_b1_val == 127, rs2_b6_val == -5, rs2_b0_val == 1, rs2_b4_val == -17, rs2_b2_val == -65, rs1_b1_val == 0
// opcode: rsub8 ; op1:x1; op2:x24; dest:x8; op1val:0xfefceffdc02000c0;  op2val:0xf7fbfcefaabf7f01
TEST_RR_OP(rsub8, x8, x1, x24, 0x0000000000000000, 0xfefceffdc02000c0, 0xf7fbfcefaabf7f01, x5, 136, x11)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_18:// rs1==x11, rs2==x30, rd==x23, rs2_b7_val == -5, rs1_b5_val == 8, rs1_b6_val == 2, rs2_b1_val == 32, rs1_b1_val == 16, rs2_b4_val == 64, rs1_b2_val == -5
// opcode: rsub8 ; op1:x11; op2:x30; dest:x23; op1val:0xfa0208f604fb10c0;  op2val:0xfb09ef403ffa2000
TEST_RR_OP(rsub8, x23, x11, x30, 0x0000000000000000, 0xfa0208f604fb10c0, 0xfb09ef403ffa2000, x4, 0, x9)

inst_19:// rs1==x2, rs2==x10, rd==x15, rs2_b7_val == -3, rs1_b5_val == -5, rs1_b3_val == -86, rs2_b3_val == 64, rs1_b7_val == -5, rs1_b4_val == 1
// opcode: rsub8 ; op1:x2; op2:x10; dest:x15; op1val:0xfb06fb01aa02f840;  op2val:0xfdf605bf40097f06
TEST_RR_OP(rsub8, x15, x2, x10, 0x0000000000000000, 0xfb06fb01aa02f840, 0xfdf605bf40097f06, x4, 8, x9)

inst_20:// rs1==x16, rs2==x8, rd==x19, rs2_b7_val == -128, rs1_b1_val == 127, rs1_b0_val == -1, rs1_b3_val == 2, rs2_b1_val == 1, rs2_b2_val == -128
// opcode: rsub8 ; op1:x16; op2:x8; dest:x19; op1val:0x5509aabf02c07fff;  op2val:0x80033f40fd8001bf
TEST_RR_OP(rsub8, x19, x16, x8, 0x0000000000000000, 0x5509aabf02c07fff, 0x80033f40fd8001bf, x4, 16, x9)

inst_21:// rs1==x30, rs2==x15, rd==x24, rs2_b7_val == 64, rs2_b1_val == 4, rs2_b6_val == -17, rs1_b3_val == 64, rs2_b4_val == 127
// opcode: rsub8 ; op1:x30; op2:x15; dest:x24; op1val:0x7f05fa4007fafe;  op2val:0x40efc07ff8fd04fc
TEST_RR_OP(rsub8, x24, x30, x15, 0x0000000000000000, 0x7f05fa4007fafe, 0x40efc07ff8fd04fc, x4, 24, x9)

inst_22:// rs1==x24, rs2==x6, rd==x11, rs2_b7_val == 4, rs2_b2_val == 2, rs1_b1_val == -33, rs2_b6_val == 64, rs1_b7_val == -33, rs1_b4_val == 2
// opcode: rsub8 ; op1:x24; op2:x6; dest:x11; op1val:0xdf80070204fadfc0;  op2val:0x44006f8fa02dfc0
TEST_RR_OP(rsub8, x11, x24, x6, 0x0000000000000000, 0xdf80070204fadfc0, 0x44006f8fa02dfc0, x4, 32, x9)

inst_23:// rs1==x31, rs2==x19, rd==x10, rs2_b7_val == 2, rs2_b0_val == -3, rs1_b1_val == 85, rs1_b3_val == 0, rs2_b3_val == -33
// opcode: rsub8 ; op1:x31; op2:x19; dest:x10; op1val:0x380060100f655f8;  op2val:0x209033fdff803fd
TEST_RR_OP(rsub8, x10, x31, x19, 0x0000000000000000, 0x380060100f655f8, 0x209033fdff803fd, x4, 40, x9)

inst_24:// rs1==x18, rs2==x1, rd==x27, rs2_b7_val == 1, rs2_b2_val == 32, rs2_b4_val == 32, rs2_b6_val == -9, rs1_b7_val == -86, rs2_b1_val == -128, rs1_b2_val == 127, rs2_b5_val == -86, rs1_b0_val == 127
// opcode: rsub8 ; op1:x18; op2:x1; dest:x27; op1val:0xaaf6faaa3f7f077f;  op2val:0x1f7aa20fb208055
TEST_RR_OP(rsub8, x27, x18, x1, 0x0000000000000000, 0xaaf6faaa3f7f077f, 0x1f7aa20fb208055, x4, 48, x9)

inst_25:// rs1==x25, rs2==x7, rd==x5, rs2_b6_val == -86, rs2_b1_val == -65, rs1_b3_val == 1, rs1_b2_val == -65, rs2_b4_val == 2, rs1_b0_val == 85
// opcode: rsub8 ; op1:x25; op2:x7; dest:x5; op1val:0x63ffa0901bf0555;  op2val:0x6aaf6020907bf55
TEST_RR_OP(rsub8, x5, x25, x7, 0x0000000000000000, 0x63ffa0901bf0555, 0x6aaf6020907bf55, x4, 56, x9)

inst_26:// rs1==x28, rs2==x17, rd==x26, rs2_b6_val == 85, rs2_b0_val == -128
// opcode: rsub8 ; op1:x28; op2:x17; dest:x26; op1val:0x3f3f01bff9fe0955;  op2val:0xf955f6073ffaf680
TEST_RR_OP(rsub8, x26, x28, x17, 0x0000000000000000, 0x3f3f01bff9fe0955, 0xf955f6073ffaf680, x4, 64, x9)

inst_27:// rs1==x15, rs2==x13, rd==x18, rs1_b5_val == -2, rs1_b3_val == 127, rs1_b6_val == 4, rs2_b4_val == 0
// opcode: rsub8 ; op1:x15; op2:x13; dest:x18; op1val:0xaa04fe3f7fbffff8;  op2val:0x7f093f0002094001
TEST_RR_OP(rsub8, x18, x15, x13, 0x0000000000000000, 0xaa04fe3f7fbffff8, 0x7f093f0002094001, x4, 72, x9)

inst_28:// rs1==x26, rs2==x18, rd==x3, rs1_b5_val == -128, rs1_b1_val == 32, rs2_b1_val == 8
// opcode: rsub8 ; op1:x26; op2:x18; dest:x3; op1val:0xdf808009f7f92010;  op2val:0xfb40f63f035508fc
TEST_RR_OP(rsub8, x3, x26, x18, 0x0000000000000000, 0xdf808009f7f92010, 0xfb40f63f035508fc, x4, 80, x9)

inst_29:// rs1==x5, rs2==x11, rd==x1, rs1_b5_val == 64, rs2_b0_val == 32, rs2_b5_val == -9, rs1_b3_val == 8
// opcode: rsub8 ; op1:x5; op2:x11; dest:x1; op1val:0x3ffc4005087f10ff;  op2val:0xaa07f77f09557f20
TEST_RR_OP(rsub8, x1, x5, x11, 0x0000000000000000, 0x3ffc4005087f10ff, 0xaa07f77f09557f20, x4, 88, x9)

inst_30:// rs1==x7, rs2==x27, rd==x21, rs1_b5_val == 32, rs1_b0_val == 0, rs1_b1_val == 2, rs2_b4_val == 8, rs2_b1_val == -1, rs2_b0_val == 127
// opcode: rsub8 ; op1:x7; op2:x27; dest:x21; op1val:0x7f102008043f0200;  op2val:0x4006fc08c002ff7f
TEST_RR_OP(rsub8, x21, x7, x27, 0x0000000000000000, 0x7f102008043f0200, 0x4006fc08c002ff7f, x4, 96, x9)

inst_31:// rs1==x3, rs2==x5, rd==x28, rs1_b5_val == 16, rs2_b0_val == 16, rs2_b1_val == -2, rs1_b7_val == -3
// opcode: rsub8 ; op1:x3; op2:x5; dest:x28; op1val:0xfd05100705037f04;  op2val:0x7c0fbf90520fe10
TEST_RR_OP(rsub8, x28, x3, x5, 0x0000000000000000, 0xfd05100705037f04, 0x7c0fbf90520fe10, x4, 104, x9)

inst_32:// rs1_b5_val == 0, rs2_b6_val == 32, rs1_b3_val == 85, rs1_b4_val == 4
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x7ff7000455fec005;  op2val:0xc02005020509fd80
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x7ff7000455fec005, 0xc02005020509fd80, x4, 112, x9)

inst_33:// rs1_b4_val == 127, rs1_b6_val == -33
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x6df097ff82020ef;  op2val:0x8c0090902077f20
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x6df097ff82020ef, 0x8c0090902077f20, x4, 120, x9)

inst_34:// rs1_b4_val == -17, rs1_b0_val == -5
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x550640efaa3fdffb;  op2val:0xfd400907aa05f9c0
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x550640efaa3fdffb, 0xfd400907aa05f9c0, x4, 128, x9)

inst_35:// rs1_b4_val == -5, rs2_b4_val == -9, rs2_b3_val == 0
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfc040fbc0050055;  op2val:0xfdc001f700bfaa07
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xbfc040fbc0050055, 0xfdc001f700bfaa07, x4, 136, x9)

inst_36:// rs1_b4_val == 64, rs2_b2_val == 16, rs1_b7_val == 8
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x8f93f400755f7f7;  op2val:0x9dfaa000110407f
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x8f93f400755f7f7, 0x9dfaa000110407f, x4, 144, x9)

inst_37:// rs1_b4_val == 32, rs2_b0_val == -17, rs2_b2_val == -17
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x02f8200620fef7;  op2val:0x80f6fc20efef80ef
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x02f8200620fef7, 0x80f6fc20efef80ef, x4, 152, x9)

inst_38:// rs1_b4_val == 16, rs2_b2_val == -1, rs1_b1_val == 64
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf10ff103f034002;  op2val:0x7f05f7f8f9ff2001
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xbf10ff103f034002, 0x7f05f7f8f9ff2001, x4, 160, x9)

inst_39:// rs1_b4_val == 0, rs1_b7_val == -128
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x80103f0006f6fafe;  op2val:0x10f9fc01efbf05ef
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x80103f0006f6fafe, 0x10f9fc01efbf05ef, x4, 168, x9)

inst_40:// rs1_b4_val == -1, rs1_b6_val == -17, rs2_b6_val == 0
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x9eff9ff03fbfffb;  op2val:0xef007f2040fa0609
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x9eff9ff03fbfffb, 0xef007f2040fa0609, x4, 176, x9)

inst_41:// rs1_b3_val == -3, rs1_b6_val == 8
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x80801fbfd20fff8;  op2val:0x4faf903f71009f7
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x80801fbfd20fff8, 0x4faf903f71009f7, x4, 184, x9)

inst_42:// rs1_b3_val == 16, rs1_b2_val == -1, rs2_b3_val == -1, rs1_b0_val == -86
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x55c0077f10fffaaa;  op2val:0x80fbf605fffbfefa
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x55c0077f10fffaaa, 0x80fbf605fffbfefa, x4, 192, x9)

inst_43:// rs1_b2_val == -86, rs2_b0_val == -5
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x70602fac0aa1010;  op2val:0xf97ff9fc3f033ffb
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x70602fac0aa1010, 0xf97ff9fc3f033ffb, x4, 200, x9)

inst_44:// rs1_b2_val == -33, rs2_b5_val == 4
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x807f01c0fadf0802;  op2val:0x100044006fd7ff8
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x807f01c0fadf0802, 0x100044006fd7ff8, x4, 208, x9)

inst_45:// rs1_b2_val == -17, rs2_b5_val == 0, rs2_b0_val == 4, rs1_b7_val == 32
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x2007fa1005eff9f7;  op2val:0xfb8000000009ef04
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x2007fa1005eff9f7, 0xfb8000000009ef04, x4, 216, x9)

inst_46:// rs1_b2_val == -9, rs2_b6_val == -65, rs2_b5_val == 2, rs2_b1_val == 0
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x208080fbf9f7f902;  op2val:0x5bf02f8f8c000ef
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x208080fbf9f7f902, 0x5bf02f8f8c000ef, x4, 224, x9)

inst_47:// rs2_b3_val == -2, rs2_b5_val == -2, rs2_b6_val == -2
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xbff6aaef05ef20f9;  op2val:0x20fefe3ffefaf755
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xbff6aaef05ef20f9, 0x20fefe3ffefaf755, x4, 232, x9)

inst_48:// rs2_b3_val == -128, rs1_b6_val == 64, rs1_b7_val == -1
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xff400710404007fb;  op2val:0x505fe028002f8fc
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xff400710404007fb, 0x505fe028002f8fc, x4, 240, x9)

inst_49:// rs2_b3_val == 8, rs2_b4_val == -128
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fc07fd7ffef8;  op2val:0xbf08fb800807057f
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xfff6fc07fd7ffef8, 0xbf08fb800807057f, x4, 248, x9)

inst_50:// rs2_b3_val == 4, rs2_b1_val == 2, rs2_b4_val == -2
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xdfdffa04fa3f55f8;  op2val:0x40f602fe04fd02f9
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xdfdffa04fa3f55f8, 0x40f602fe04fd02f9, x4, 256, x9)

inst_51:// rs2_b2_val == -86, rs2_b0_val == -2, rs2_b5_val == 8
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x88010bf7f06fcfa;  op2val:0xfb10080804aa03fe
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x88010bf7f06fcfa, 0xfb10080804aa03fe, x4, 264, x9)

inst_52:// rs2_b2_val == 127, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x6020410fcfffcfe;  op2val:0xff7f05ff007f1003
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x6020410fcfffcfe, 0xff7f05ff007f1003, x4, 272, x9)

inst_53:// rs2_b2_val == -9, rs1_b6_val == 0
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xff00f805f67f20f7;  op2val:0x5508201040f7f606
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xff00f805f67f20f7, 0x5508201040f7f606, x4, 280, x9)

inst_54:// rs2_b2_val == 8, rs1_b5_val == -65, rs1_b1_val == -17
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa09bfdf80f9effb;  op2val:0x43f0980c00805ef
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xaa09bfdf80f9effb, 0x43f0980c00805ef, x4, 288, x9)

inst_55:// rs2_b1_val == -5, rs1_b6_val == -5, rs1_b2_val == 4, rs2_b6_val == 2
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xbffb3ffafb04f607;  op2val:0xfe02fd20faf7fbf8
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xbffb3ffafb04f607, 0xfe02fd20faf7fbf8, x4, 296, x9)

inst_56:// rs1_b2_val == -3, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfc04df00fdc040;  op2val:0xfa05f63faaf60208
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xfdfc04df00fdc040, 0xfa05f63faaf60208, x4, 304, x9)

inst_57:// rs2_b0_val == -86, rs1_b0_val == -65, rs2_b5_val == -33
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd10027f033f7fbf;  op2val:0x40f8df0809febfaa
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xfd10027f033f7fbf, 0x40f8df0809febfaa, x4, 312, x9)

inst_58:// rs1_b2_val == -128, rs2_b4_val == 4, rs2_b5_val == 16
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbc0f908f8800420;  op2val:0x2bf1004f608df09
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xfbc0f908f8800420, 0x2bf1004f608df09, x4, 320, x9)

inst_59:// rs2_b0_val == -33, rs1_b0_val == 8
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe003fef094008;  op2val:0xaac03fff07bf7fdf
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xfe003fef094008, 0xaac03fff07bf7fdf, x4, 328, x9)

inst_60:// rs1_b2_val == 16, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf6fb8004fa105580;  op2val:0x553f00fdff08c0fb
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xf6fb8004fa105580, 0x553f00fdff08c0fb, x4, 336, x9)

inst_61:// rs1_b2_val == 1, rs1_b5_val == -33
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfdfdf10ff01ff40;  op2val:0xaac03faaeff87fdf
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xbfdfdf10ff01ff40, 0xaac03faaeff87fdf, x4, 344, x9)

inst_62:// rs1_b2_val == 0, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x6fdfdaa1000fa08;  op2val:0x10aaf655fdfa0804
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x6fdfdaa1000fa08, 0x10aaf655fdfa0804, x4, 352, x9)

inst_63:// rs1_b1_val == -3, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9030202f8fefd00;  op2val:0x40f600ef0840f680
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xf9030202f8fefd00, 0x40f600ef0840f680, x4, 360, x9)

inst_64:// rs1_b1_val == -128, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x9fb5520ef108007;  op2val:0xfd207f3f01faf8c0
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x9fb5520ef108007, 0xfd207f3f01faf8c0, x4, 368, x9)

inst_65:// rs2_b6_val == 4, rs1_b0_val == -33, rs1_b7_val == -9
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7f9faff0308efdf;  op2val:0xf70401aac00640fa
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xf7f9faff0308efdf, 0xf70401aac00640fa, x4, 376, x9)

inst_66:// rs2_b6_val == 1, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x70810bf03100407;  op2val:0xf90107061080aa08
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x70810bf03100407, 0xf90107061080aa08, x4, 384, x9)

inst_67:// rs2_b6_val == -1, rs1_b7_val == 4
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x40840fd07040740;  op2val:0x6fff97f20800205
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x40840fd07040740, 0x6fff97f20800205, x4, 392, x9)

inst_68:// rs2_b5_val == 85, rs1_b7_val == 16
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x1009bf06803faa09;  op2val:0xfa8055fcf9df0055
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x1009bf06803faa09, 0xfa8055fcf9df0055, x4, 400, x9)

inst_69:// rs1_b7_val == 2, rs1_b6_val == 1
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x2013f40effcdfc0;  op2val:0x20080080c0bf08fc
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x2013f40effcdfc0, 0x20080080c0bf08fc, x4, 408, x9)

inst_70:// rs2_b5_val == 64, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfefeaa20df000904;  op2val:0xf8c040f7c0fe02f8
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xfefeaa20df000904, 0xf8c040f7c0fe02f8, x4, 416, x9)

inst_71:// rs1_b0_val == -3, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x40302aa01effcfd;  op2val:0x1f620fef880fefd
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x40302aa01effcfd, 0x1f620fef880fefd, x4, 424, x9)

inst_72:// rs1_b6_val == -86, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfaaf9fb800206f6;  op2val:0xf707fdf6c007f907
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xbfaaf9fb800206f6, 0xf707fdf6c007f907, x4, 432, x9)

inst_73:// rs1_b6_val == -65, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xaabf55023fdfbf01;  op2val:0xf6fc06ef2002bffa
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xaabf55023fdfbf01, 0xf6fc06ef2002bffa, x4, 440, x9)

inst_74:// rs1_b6_val == 32, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f20f67f083ffa3f;  op2val:0xfebff905f6f70004
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x7f20f67f083ffa3f, 0xfebff905f6f70004, x4, 448, x9)

inst_75:// rs1_b6_val == -1, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x9fff901c05520df;  op2val:0xfb55fcef3f0803fb
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x9fff901c05520df, 0xfb55fcef3f0803fb, x4, 456, x9)

inst_76:// rs1_b5_val == -9, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x5aaf702f7efaa80;  op2val:0x11040f6f9fc0806
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x5aaf702f7efaa80, 0x11040f6f9fc0806, x4, 464, x9)

inst_77:// rs1_b1_val == 1, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9ffeff655aa01c0;  op2val:0x9fd08c055060804
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xf9ffeff655aa01c0, 0x9fd08c055060804, x4, 472, x9)

inst_78:// rs1_b5_val == 127, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x80807f02fc06aa55;  op2val:0x80090955c07ffeef
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x80807f02fc06aa55, 0x80090955c07ffeef, x4, 480, x9)

inst_79:// rs1_b7_val == 64, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x40fcaaf70005f607;  op2val:0xf6f8dff7c0fdfa3f
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x40fcaaf70005f607, 0xf6f8dff7c0fdfa3f, x4, 488, x9)

inst_80:// rs2_b5_val == -65, 
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa10fb3f0620bff8;  op2val:0xfcbff93f800302
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xfa10fb3f0620bff8, 0xfcbff93f800302, x4, 496, x9)

inst_81:// rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b6_val == rs2_b6_val, rs1_b1_val < 0 and rs2_b1_val < 0, rs2_b3_val == -3, rs1_b3_val == -128, rs1_b0_val == 2, rs2_b1_val == -33, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b4_val == -33, rs2_b2_val == -5, rs2_b7_val == -65, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b3_val < 0 and rs2_b3_val < 0
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x907fcf98007fc02;  op2val:0xbf0706dffdfbdffc
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x907fcf98007fc02, 0xbf0706dffdfbdffc, x4, 504, x9)

inst_82:// rs1_b5_val == rs2_b5_val, rs1_b2_val == 64, rs2_b3_val == -9, rs1_b1_val > 0 and rs2_b1_val < 0, rs2_b5_val == 1, rs1_b5_val == 1, rs1_b0_val == 16, rs2_b4_val == 85, rs2_b0_val == -1, rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b7_val == -65, rs1_b4_val == -3, rs1_b1_val == 4, rs2_b7_val == 8
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf5501fdc0400410;  op2val:0x8090155f7faf8ff
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xbf5501fdc0400410, 0x8090155f7faf8ff, x4, 512, x9)

inst_83:// rs1_b3_val == rs2_b3_val, rs1_b5_val == -3, rs1_b0_val == -17, rs2_b3_val == -65, rs2_b5_val == 32, rs1_b3_val == -65, rs2_b6_val == 127, rs2_b2_val == 0, rs2_b4_val == -86, rs1_b6_val == -128, rs1_b4_val == -65, rs1_b1_val == -1, rs2_b7_val == 32, rs1_b2_val == -2
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0x680fdbfbffeffef;  op2val:0x207f20aabf00f6fc
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0x680fdbfbffeffef, 0x207f20aabf00f6fc, x4, 520, x9)

inst_84:// rs1_b0_val == rs2_b0_val, rs2_b7_val == 0, rs2_b0_val == -9, rs1_b0_val == -9, rs2_b1_val == -9, rs1_b7_val == -17, rs2_b5_val == -17
// opcode: rsub8 ; op1:x30; op2:x29; dest:x31; op1val:0xeff755063ff9f9f7;  op2val:0xf8eff8fb09f7f7
TEST_RR_OP(rsub8, x31, x30, x29, 0x0000000000000000, 0xeff755063ff9f9f7, 0xf8eff8fb09f7f7, x4, 528, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 67*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
