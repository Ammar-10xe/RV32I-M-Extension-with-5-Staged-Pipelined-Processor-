
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sll32 instruction of the RISC-V RV64PZicsr extension for the sll32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sll32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x13,signature_x13_1)

inst_0:
// rs1 == rd != rs2, rs1==x10, rs2==x23, rd==x10, rs2_val == 21, rs1_w1_val == 4294967279, rs1_w0_val == 2048
// opcode: sll32 ; op1:x10; op2:x23; dest:x10; op1val:0xffffffef00000800;  op2val:0x15
TEST_RR_OP(sll32, x10, x10, x23, 0x0000000000000000, 0xffffffef00000800, 0x15, x13, 0, x12)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x11, rs2==x1, rd==x19, rs2_val == 15, rs1_w0_val == 8388608, rs1_w1_val == 67108864
// opcode: sll32 ; op1:x11; op2:x1; dest:x19; op1val:0x400000000800000;  op2val:0xf
TEST_RR_OP(sll32, x19, x11, x1, 0x0000000000000000, 0x400000000800000, 0xf, x13, 8, x12)

inst_2:
// rs1 == rs2 != rd, rs1==x7, rs2==x7, rd==x8, rs2_val == 23, rs1_w0_val == 4261412863
// opcode: sll32 ; op1:x7; op2:x7; dest:x8; op1val:0x000012fdffffff;  op2val:0x17
TEST_RR_OP(sll32, x8, x7, x7, 0x0000000000000000, 0x000012fdffffff, 0x17, x13, 16, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs2_val == 27, rs1_w0_val == 4294967291, rs1_w1_val == 3221225471
// opcode: sll32 ; op1:x18; op2:x18; dest:x18; op1val:0xbffffffffffffffb;  op2val:0x1b
TEST_RR_OP(sll32, x18, x18, x18, 0x0000000000000000, 0xbffffffffffffffb, 0x1b, x13, 24, x12)

inst_4:
// rs2 == rd != rs1, rs1==x27, rs2==x16, rd==x16, rs2_val == 29, rs1_w1_val == 4294963199, rs1_w0_val == 2863311530
// opcode: sll32 ; op1:x27; op2:x16; dest:x16; op1val:0xffffefffaaaaaaaa;  op2val:0x1d
TEST_RR_OP(sll32, x16, x27, x16, 0x0000000000000000, 0xffffefffaaaaaaaa, 0x1d, x13, 32, x12)

inst_5:
// rs1==x21, rs2==x26, rd==x20, rs2_val == 30, rs1_w0_val == 4294967279, rs1_w1_val == 1431655765
// opcode: sll32 ; op1:x21; op2:x26; dest:x20; op1val:0x55555555ffffffef;  op2val:0x1e
TEST_RR_OP(sll32, x20, x21, x26, 0x0000000000000000, 0x55555555ffffffef, 0x1e, x13, 40, x12)

inst_6:
// rs1==x9, rs2==x28, rd==x1, rs2_val == 16, rs1_w1_val == 131072, rs1_w0_val == 4294966783
// opcode: sll32 ; op1:x9; op2:x28; dest:x1; op1val:0x020000fffffdff;  op2val:0x10
TEST_RR_OP(sll32, x1, x9, x28, 0x0000000000000000, 0x020000fffffdff, 0x10, x13, 48, x12)

inst_7:
// rs1==x28, rs2==x14, rd==x3, rs2_val == 8, rs1_w0_val == 4294967231
// opcode: sll32 ; op1:x28; op2:x14; dest:x3; op1val:0x000007ffffffbf;  op2val:0x8
TEST_RR_OP(sll32, x3, x28, x14, 0x0000000000000000, 0x000007ffffffbf, 0x8, x13, 56, x12)

inst_8:
// rs1==x4, rs2==x27, rd==x7, rs2_val == 4, rs1_w0_val == 134217728, rs1_w1_val == 64
// opcode: sll32 ; op1:x4; op2:x27; dest:x7; op1val:0x00004008000000;  op2val:0x4
TEST_RR_OP(sll32, x7, x4, x27, 0x0000000000000000, 0x00004008000000, 0x4, x13, 64, x12)

inst_9:
// rs1==x24, rs2==x4, rd==x21, rs2_val == 2, rs1_w1_val == 1
// opcode: sll32 ; op1:x24; op2:x4; dest:x21; op1val:0x000001fffffffb;  op2val:0x2
TEST_RR_OP(sll32, x21, x24, x4, 0x0000000000000000, 0x000001fffffffb, 0x2, x13, 72, x12)

inst_10:
// rs1==x5, rs2==x11, rd==x28, rs2_val == 1, rs1_w0_val == 4294934527
// opcode: sll32 ; op1:x5; op2:x11; dest:x28; op1val:0x020000ffff7fff;  op2val:0x1
TEST_RR_OP(sll32, x28, x5, x11, 0x0000000000000000, 0x020000ffff7fff, 0x1, x13, 80, x12)

inst_11:
// rs1==x6, rs2==x9, rd==x27, rs1_w1_val == 2863311530, 
// opcode: sll32 ; op1:x6; op2:x9; dest:x27; op1val:0xaaaaaaaa0000000e;  op2val:0x4
TEST_RR_OP(sll32, x27, x6, x9, 0x0000000000000000, 0xaaaaaaaa0000000e, 0x4, x13, 88, x12)

inst_12:
// rs1==x0, rs2==x21, rd==x22, rs1_w1_val == 2147483647, 
// opcode: sll32 ; op1:x0; op2:x21; dest:x22; op1val:0x7fffffff0000000b;  op2val:0x1e
TEST_RR_OP(sll32, x22, x0, x21, 0x0000000000000000, 0x7fffffff0000000b, 0x1e, x13, 96, x12)

inst_13:
// rs1==x31, rs2==x2, rd==x11, rs1_w1_val == 3758096383, rs1_w0_val == 65536
// opcode: sll32 ; op1:x31; op2:x2; dest:x11; op1val:0xdfffffff00010000;  op2val:0x8
TEST_RR_OP(sll32, x11, x31, x2, 0x0000000000000000, 0xdfffffff00010000, 0x8, x13, 104, x12)

inst_14:
// rs1==x14, rs2==x29, rd==x31, rs1_w1_val == 4026531839, rs1_w0_val == 4294967287
// opcode: sll32 ; op1:x14; op2:x29; dest:x31; op1val:0xeffffffffffffff7;  op2val:0x13
TEST_RR_OP(sll32, x31, x14, x29, 0x0000000000000000, 0xeffffffffffffff7, 0x13, x13, 112, x12)

inst_15:
// rs1==x30, rs2==x24, rd==x0, rs1_w1_val == 4160749567, rs1_w0_val == 4
// opcode: sll32 ; op1:x30; op2:x24; dest:x0; op1val:0xf7ffffff00000004;  op2val:0x12
TEST_RR_OP(sll32, x0, x30, x24, 0x0000000000000000, 0xf7ffffff00000004, 0x12, x13, 120, x12)

inst_16:
// rs1==x12, rs2==x22, rd==x14, rs1_w1_val == 4227858431, rs1_w0_val == 262144
// opcode: sll32 ; op1:x12; op2:x22; dest:x14; op1val:0xfbffffff00040000;  op2val:0x15
TEST_RR_OP(sll32, x14, x12, x22, 0x0000000000000000, 0xfbffffff00040000, 0x15, x13, 128, x11)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_17:
// rs1==x20, rs2==x31, rd==x17, rs1_w1_val == 4261412863, rs1_w0_val == 4294443007
// opcode: sll32 ; op1:x20; op2:x31; dest:x17; op1val:0xfdfffffffff7ffff;  op2val:0x15
TEST_RR_OP(sll32, x17, x20, x31, 0x0000000000000000, 0xfdfffffffff7ffff, 0x15, x7, 0, x11)

inst_18:
// rs1==x17, rs2==x25, rd==x26, rs1_w1_val == 4278190079, 
// opcode: sll32 ; op1:x17; op2:x25; dest:x26; op1val:0xfeffffffffffffef;  op2val:0x12
TEST_RR_OP(sll32, x26, x17, x25, 0x0000000000000000, 0xfeffffffffffffef, 0x12, x7, 8, x11)

inst_19:
// rs1==x22, rs2==x0, rd==x9, rs1_w1_val == 4286578687, 
// opcode: sll32 ; op1:x22; op2:x0; dest:x9; op1val:0xff7fffff0000000f;  op2val:0x0
TEST_RR_OP(sll32, x9, x22, x0, 0x0000000000000000, 0xff7fffff0000000f, 0x0, x7, 16, x11)

inst_20:
// rs1==x1, rs2==x13, rd==x12, rs1_w1_val == 4290772991, rs1_w0_val == 4290772991
// opcode: sll32 ; op1:x1; op2:x13; dest:x12; op1val:0xffbfffffffbfffff;  op2val:0x10
TEST_RR_OP(sll32, x12, x1, x13, 0x0000000000000000, 0xffbfffffffbfffff, 0x10, x7, 24, x11)

inst_21:
// rs1==x13, rs2==x19, rd==x2, rs1_w1_val == 4292870143, rs1_w0_val == 2097152
// opcode: sll32 ; op1:x13; op2:x19; dest:x2; op1val:0xffdfffff00200000;  op2val:0x1f
TEST_RR_OP(sll32, x2, x13, x19, 0x0000000000000000, 0xffdfffff00200000, 0x1f, x7, 32, x11)

inst_22:
// rs1==x25, rs2==x6, rd==x13, rs1_w1_val == 4293918719, rs1_w0_val == 2147483648
// opcode: sll32 ; op1:x25; op2:x6; dest:x13; op1val:0xffefffff80000000;  op2val:0x2
TEST_RR_OP(sll32, x13, x25, x6, 0x0000000000000000, 0xffefffff80000000, 0x2, x7, 40, x11)

inst_23:
// rs1==x23, rs2==x17, rd==x29, rs1_w1_val == 4294443007, rs1_w0_val == 8
// opcode: sll32 ; op1:x23; op2:x17; dest:x29; op1val:0xfff7ffff00000008;  op2val:0x5
TEST_RR_OP(sll32, x29, x23, x17, 0x0000000000000000, 0xfff7ffff00000008, 0x5, x7, 48, x11)

inst_24:
// rs1==x8, rs2==x12, rd==x23, rs1_w1_val == 4294705151, rs1_w0_val == 4294967295
// opcode: sll32 ; op1:x8; op2:x12; dest:x23; op1val:0xfffbffffffffffff;  op2val:0x10
TEST_RR_OP(sll32, x23, x8, x12, 0x0000000000000000, 0xfffbffffffffffff, 0x10, x7, 56, x11)

inst_25:
// rs1==x2, rs2==x5, rd==x4, rs1_w1_val == 4294836223, rs2_val == 10
// opcode: sll32 ; op1:x2; op2:x5; dest:x4; op1val:0xfffdffffaaaaaaaa;  op2val:0xa
TEST_RR_OP(sll32, x4, x2, x5, 0x0000000000000000, 0xfffdffffaaaaaaaa, 0xa, x7, 64, x11)

inst_26:
// rs1==x29, rs2==x8, rd==x6, rs1_w1_val == 4294901759, rs1_w0_val == 4278190079
// opcode: sll32 ; op1:x29; op2:x8; dest:x6; op1val:0xfffefffffeffffff;  op2val:0x10
TEST_RR_OP(sll32, x6, x29, x8, 0x0000000000000000, 0xfffefffffeffffff, 0x10, x7, 72, x11)

inst_27:
// rs1==x19, rs2==x30, rd==x5, rs1_w1_val == 4294934527, rs1_w0_val == 4294901759
// opcode: sll32 ; op1:x19; op2:x30; dest:x5; op1val:0xffff7ffffffeffff;  op2val:0xb
TEST_RR_OP(sll32, x5, x19, x30, 0x0000000000000000, 0xffff7ffffffeffff, 0xb, x7, 80, x11)

inst_28:
// rs1==x16, rs2==x20, rd==x25, rs1_w1_val == 4294950911, rs1_w0_val == 4294959103
// opcode: sll32 ; op1:x16; op2:x20; dest:x25; op1val:0xffffbfffffffdfff;  op2val:0xf
TEST_RR_OP(sll32, x25, x16, x20, 0x0000000000000000, 0xffffbfffffffdfff, 0xf, x7, 88, x11)

inst_29:
// rs1==x26, rs2==x15, rd==x30, rs1_w1_val == 4294959103, 
// opcode: sll32 ; op1:x26; op2:x15; dest:x30; op1val:0xffffdffffeffffff;  op2val:0x1
TEST_RR_OP(sll32, x30, x26, x15, 0x0000000000000000, 0xffffdffffeffffff, 0x1, x7, 96, x11)

inst_30:
// rs1==x3, rs2==x10, rd==x15, rs1_w1_val == 4294965247, rs1_w0_val == 512
// opcode: sll32 ; op1:x3; op2:x10; dest:x15; op1val:0xfffff7ff00000200;  op2val:0x13
TEST_RR_OP(sll32, x15, x3, x10, 0x0000000000000000, 0xfffff7ff00000200, 0x13, x7, 104, x11)

inst_31:
// rs1==x15, rs2==x3, rd==x24, rs1_w1_val == 4294966271, rs1_w0_val == 4294967293
// opcode: sll32 ; op1:x15; op2:x3; dest:x24; op1val:0xfffffbfffffffffd;  op2val:0x17
TEST_RR_OP(sll32, x24, x15, x3, 0x0000000000000000, 0xfffffbfffffffffd, 0x17, x7, 112, x11)

inst_32:
// rs1_w1_val == 4294966783, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000007;  op2val:0x1b
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000007, 0x1b, x7, 120, x11)

inst_33:
// rs1_w1_val == 4294967039, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000006;  op2val:0xb
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000006, 0xb, x7, 128, x11)

inst_34:
// rs1_w1_val == 4294967167, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00800000;  op2val:0x1d
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00800000, 0x1d, x7, 136, x11)

inst_35:
// rs1_w1_val == 4294967231, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000006;  op2val:0x8
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000006, 0x8, x7, 144, x11)

inst_36:
// rs1_w1_val == 4294967263, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00040000;  op2val:0x7
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00040000, 0x7, x7, 152, x11)

inst_37:
// rs1_w1_val == 4294967287, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff70000000c;  op2val:0x15
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xfffffff70000000c, 0x15, x7, 160, x11)

inst_38:
// rs1_w1_val == 4294967291, rs1_w0_val == 4286578687
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbff7fffff;  op2val:0x0
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xfffffffbff7fffff, 0x0, x7, 168, x11)

inst_39:
// rs1_w1_val == 4294967293, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffffdff;  op2val:0xf
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffffdff, 0xf, x7, 176, x11)

inst_40:
// rs1_w1_val == 4294967294, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffffbf;  op2val:0xd
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffffbf, 0xd, x7, 184, x11)

inst_41:
// rs1_w1_val == 2147483648, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fff7ffff;  op2val:0x1d
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x80000000fff7ffff, 0x1d, x7, 192, x11)

inst_42:
// rs1_w1_val == 1073741824, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000012;  op2val:0xe
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x4000000000000012, 0xe, x7, 200, x11)

inst_43:
// rs1_w1_val == 536870912, rs1_w0_val == 4294967039
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffffeff;  op2val:0x9
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x20000000fffffeff, 0x9, x7, 208, x11)

inst_44:
// rs1_w1_val == 268435456, rs1_w0_val == 16777216
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000001000000;  op2val:0x3
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x1000000001000000, 0x3, x7, 216, x11)

inst_45:
// rs1_w1_val == 134217728, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000000a;  op2val:0xc
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x80000000000000a, 0xc, x7, 224, x11)

inst_46:
// rs1_w1_val == 33554432, rs1_w0_val == 2
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000002;  op2val:0x15
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x200000000000002, 0x15, x7, 232, x11)

inst_47:
// rs1_w1_val == 16777216, rs1_w0_val == 4293918719
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000ffefffff;  op2val:0x3
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x1000000ffefffff, 0x3, x7, 240, x11)

inst_48:
// rs1_w0_val == 32768, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000c00008000;  op2val:0xc
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x00000c00008000, 0xc, x7, 248, x11)

inst_49:
// rs1_w0_val == 16384, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000004000;  op2val:0x8
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x800000000004000, 0x8, x7, 256, x11)

inst_50:
// rs1_w0_val == 8192, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000f00002000;  op2val:0x17
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x00000f00002000, 0x17, x7, 264, x11)

inst_51:
// rs1_w0_val == 4096, rs1_w1_val == 32768
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000001000;  op2val:0x6
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x00800000001000, 0x6, x7, 272, x11)

inst_52:
// rs1_w0_val == 1024, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000400;  op2val:0x2
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x00000900000400, 0x2, x7, 280, x11)

inst_53:
// rs1_w0_val == 256, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001100000100;  op2val:0xd
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x00001100000100, 0xd, x7, 288, x11)

inst_54:
// rs1_w0_val == 128, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000080;  op2val:0xa
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000080, 0xa, x7, 296, x11)

inst_55:
// rs1_w0_val == 64, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000040;  op2val:0x0
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000040, 0x0, x7, 304, x11)

inst_56:
// rs1_w0_val == 32, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000020;  op2val:0xe
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x5555555500000020, 0xe, x7, 312, x11)

inst_57:
// rs1_w0_val == 16, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000010;  op2val:0x10
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x400000000000010, 0x10, x7, 320, x11)

inst_58:
// rs1_w0_val == 1, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000001;  op2val:0xe
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000001, 0xe, x7, 328, x11)

inst_59:
// rs1_w0_val == 0, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000000;  op2val:0x1e
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000000, 0x1e, x7, 336, x11)

inst_60:
// rs1_w1_val == 8388608, rs1_w0_val == 4160749567
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000f7ffffff;  op2val:0x13
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x800000f7ffffff, 0x13, x7, 344, x11)

inst_61:
// rs1_w1_val == 4194304, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000d;  op2val:0xf
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x4000000000000d, 0xf, x7, 352, x11)

inst_62:
// rs1_w1_val == 2097152, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000040;  op2val:0x1e
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x20000000000040, 0x1e, x7, 360, x11)

inst_63:
// rs1_w1_val == 1048576, rs1_w0_val == 2147483647
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000007fffffff;  op2val:0x1b
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x1000007fffffff, 0x1b, x7, 368, x11)

inst_64:
// rs1_w1_val == 524288, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000ffffffff;  op2val:0x1e
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x080000ffffffff, 0x1e, x7, 376, x11)

inst_65:
// rs1_w1_val == 262144, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000005;  op2val:0x2
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x04000000000005, 0x2, x7, 384, x11)

inst_66:
// rs1_w1_val == 65536, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000005;  op2val:0xc
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x01000000000005, 0xc, x7, 392, x11)

inst_67:
// rs1_w1_val == 16384, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffffff7;  op2val:0x13
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x004000fffffff7, 0x13, x7, 400, x11)

inst_68:
// rs1_w1_val == 8192, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200080000000;  op2val:0x10
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x00200080000000, 0x10, x7, 408, x11)

inst_69:
// rs1_w1_val == 4096, rs1_w0_val == 1073741824
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100040000000;  op2val:0x4
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x00100040000000, 0x4, x7, 416, x11)

inst_70:
// rs1_w1_val == 2048, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffffffb;  op2val:0x2
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x000800fffffffb, 0x2, x7, 424, x11)

inst_71:
// rs1_w1_val == 1024, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x0004000000000a;  op2val:0x0
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x0004000000000a, 0x0, x7, 432, x11)

inst_72:
// rs1_w1_val == 512, rs1_w0_val == 4294836223
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200fffdffff;  op2val:0x10
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x000200fffdffff, 0x10, x7, 440, x11)

inst_73:
// rs1_w1_val == 256, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x0001000000000c;  op2val:0xb
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x0001000000000c, 0xb, x7, 448, x11)

inst_74:
// rs1_w1_val == 128, rs1_w0_val == 1048576
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000100000;  op2val:0x15
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x00008000100000, 0x15, x7, 456, x11)

inst_75:
// rs1_w1_val == 32, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000007;  op2val:0x9
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x00002000000007, 0x9, x7, 464, x11)

inst_76:
// rs1_w1_val == 16, rs1_w0_val == 4194304
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000400000;  op2val:0xa
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x00001000400000, 0xa, x7, 472, x11)

inst_77:
// rs1_w1_val == 8, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000400;  op2val:0x1f
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x00000800000400, 0x1f, x7, 480, x11)

inst_78:
// rs1_w1_val == 4, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000400;  op2val:0x13
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x00000400000400, 0x13, x7, 488, x11)

inst_79:
// rs1_w1_val == 2, rs1_w0_val == 4294967263
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002ffffffdf;  op2val:0x2
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x000002ffffffdf, 0x2, x7, 496, x11)

inst_80:
// rs1_w1_val == 4294967295, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000009;  op2val:0x1b
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xffffffff00000009, 0x1b, x7, 504, x11)

inst_81:
// rs1_w1_val == 0, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000800000;  op2val:0x4
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x00000000800000, 0x4, x7, 512, x11)

inst_82:
// rs1_w0_val == 1431655765, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000055555555;  op2val:0x12
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x2000000055555555, 0x12, x7, 520, x11)

inst_83:
// rs1_w0_val == 3221225471, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfbfffffff;  op2val:0xf
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xffffffbfbfffffff, 0xf, x7, 528, x11)

inst_84:
// rs1_w0_val == 3758096383, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffdfffffff;  op2val:0x1
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xdfffffffdfffffff, 0x1, x7, 536, x11)

inst_85:
// rs1_w0_val == 4026531839, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002efffffff;  op2val:0x11
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x000002efffffff, 0x11, x7, 544, x11)

inst_86:
// rs1_w0_val == 4294950911, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000bffffbfff;  op2val:0x1d
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x00000bffffbfff, 0x1d, x7, 552, x11)

inst_87:
// rs1_w0_val == 4294963199, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000bffffefff;  op2val:0x15
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x00000bffffefff, 0x15, x7, 560, x11)

inst_88:
// rs1_w0_val == 4294965247, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffff7ff;  op2val:0xf
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xffffffbffffff7ff, 0xf, x7, 568, x11)

inst_89:
// rs1_w0_val == 4294966271, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffffbff;  op2val:0x1b
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffffbff, 0x1b, x7, 576, x11)

inst_90:
// rs1_w0_val == 4294967167, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555ffffff7f;  op2val:0xc
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x55555555ffffff7f, 0xc, x7, 584, x11)

inst_91:
// rs1_w0_val == 4294967294, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffffffe;  op2val:0x1
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x000800fffffffe, 0x1, x7, 592, x11)

inst_92:
// rs1_w0_val == 536870912, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff20000000;  op2val:0xc
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff20000000, 0xc, x7, 600, x11)

inst_93:
// rs1_w0_val == 268435456, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff10000000;  op2val:0x11
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xffffbfff10000000, 0x11, x7, 608, x11)

inst_94:
// rs1_w0_val == 4227858431, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffbffffff;  op2val:0x12
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xfffff7fffbffffff, 0x12, x7, 616, x11)

inst_95:
// rs1_w0_val == 67108864, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000004000000;  op2val:0x0
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x00000004000000, 0x0, x7, 624, x11)

inst_96:
// rs1_w0_val == 33554432, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000102000000;  op2val:0x3
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x00000102000000, 0x3, x7, 632, x11)

inst_97:
// rs1_w0_val == 4292870143, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffdfffff;  op2val:0x0
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xefffffffffdfffff, 0x0, x7, 640, x11)

inst_98:
// rs1_w0_val == 524288, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00080000;  op2val:0x7
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xffffffff00080000, 0x7, x7, 648, x11)

inst_99:
// rs1_w0_val == 4294705151, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffbffff;  op2val:0xe
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffbffff, 0xe, x7, 656, x11)

inst_100:
// rs1_w0_val == 131072, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000020000;  op2val:0xe
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x04000000020000, 0xe, x7, 664, x11)

inst_101:
// rs2_val == 23, rs1_w0_val == 4261412863
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x000012fdffffff;  op2val:0x17
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x000012fdffffff, 0x17, x7, 672, x11)

inst_102:
// rs1_w1_val == 2147483647, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff0000000b;  op2val:0x1e
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0x7fffffff0000000b, 0x1e, x7, 680, x11)

inst_103:
// rs1_w1_val == 4160749567, rs1_w0_val == 4
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000004;  op2val:0x12
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000004, 0x12, x7, 688, x11)

inst_104:
// rs1_w1_val == 4286578687, 
// opcode: sll32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff0000000f;  op2val:0x1
TEST_RR_OP(sll32, x31, x30, x29, 0x0000000000000000, 0xff7fffff0000000f, 0x1, x7, 696, x11)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 88*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
