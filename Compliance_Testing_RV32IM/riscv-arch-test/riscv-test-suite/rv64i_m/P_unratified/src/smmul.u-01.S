
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smmul.u instruction of the RISC-V RV64PZicsr extension for the smmul.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smmul.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 == rd != rs2, rs1==x23, rs2==x14, rd==x23, rs1_w0_val == -2147483648, rs2_w1_val == -513, rs2_w0_val == 2097152
// opcode: smmul.u ; op1:x23; dest:x23; op1val:0x00b50380000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x23, x23, x14, 0x0000000000000000, 0x00b50380000000, 0xfffffdff00200000, x11, 0, x18)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x10, rs2==x17, rd==x1, rs2_w1_val == -1431655766, rs1_w1_val == -268435457, rs2_w0_val == 1431655765
// opcode: smmul.u ; op1:x10; dest:x1; op1val:0xeffffffffffffffa;  immval:$imm_val
TEST_RR_OP(smmul.u, x1, x10, x17, 0x0000000000000000, 0xeffffffffffffffa, 0xaaaaaaaa55555555, x11, 8, x18)

inst_2:
// rs1 == rs2 != rd, rs1==x20, rs2==x20, rd==x26, rs2_w1_val == 1431655765, 
// opcode: smmul.u ; op1:x20; dest:x26; op1val:0xffff4afc66666665;  immval:$imm_val
TEST_RR_OP(smmul.u, x26, x20, x20, 0x0000000000000000, 0xffff4afc66666665, 0x55555555c0000000, x11, 16, x18)

inst_3:
// rs1 == rs2 == rd, rs1==x30, rs2==x30, rd==x30, rs2_w1_val == 2147483647, rs2_w0_val == 2048, rs1_w0_val == -513
// opcode: smmul.u ; op1:x30; dest:x30; op1val:0x00b505fffffdff;  immval:$imm_val
TEST_RR_OP(smmul.u, x30, x30, x30, 0x0000000000000000, 0x00b505fffffdff, 0x7fffffff00000800, x11, 24, x18)

inst_4:
// rs2 == rd != rs1, rs1==x16, rs2==x27, rd==x27, rs2_w1_val == -1073741825, rs2_w0_val == 1073741824, rs1_w0_val == 0
// opcode: smmul.u ; op1:x16; dest:x27; op1val:0xaaaaaaab00000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x27, x16, x27, 0x0000000000000000, 0xaaaaaaab00000000, 0xbfffffff40000000, x11, 32, x18)

inst_5:
// rs1==x15, rs2==x4, rd==x22, rs2_w1_val == -536870913, rs1_w1_val == -67108865, rs1_w0_val == 64
// opcode: smmul.u ; op1:x15; dest:x22; op1val:0xfbffffff00000040;  immval:$imm_val
TEST_RR_OP(smmul.u, x22, x15, x4, 0x0000000000000000, 0xfbffffff00000040, 0xdfffffffffff4afd, x11, 40, x18)

inst_6:
// rs1==x19, rs2==x8, rd==x0, rs2_w1_val == -268435457, rs1_w0_val == 2, rs2_w0_val == -1431655766
// opcode: smmul.u ; op1:x19; dest:x0; op1val:0x6666666700000002;  immval:$imm_val
TEST_RR_OP(smmul.u, x0, x19, x8, 0x0000000000000000, 0x6666666700000002, 0xefffffffaaaaaaaa, x11, 48, x18)

inst_7:
// rs1==x3, rs2==x0, rd==x20, rs2_w1_val == -134217729, rs1_w0_val == 32, rs2_w0_val == 1048576, rs1_w1_val == 128
// opcode: smmul.u ; op1:x3; dest:x20; op1val:0x00008000000020;  immval:$imm_val
TEST_RR_OP(smmul.u, x20, x3, x0, 0x0000000000000000, 0x00008000000020, 0xf7ffffff00100000, x11, 56, x18)

inst_8:
// rs1==x1, rs2==x12, rd==x29, rs2_w1_val == -67108865, rs1_w1_val == 0
// opcode: smmul.u ; op1:x1; dest:x29; op1val:0x00000066666665;  immval:$imm_val
TEST_RR_OP(smmul.u, x29, x1, x12, 0x0000000000000000, 0x00000066666665, 0xfbffffff0000b505, x11, 64, x18)

inst_9:
// rs1==x29, rs2==x22, rd==x19, rs2_w1_val == -33554433, rs1_w1_val == -16777217
// opcode: smmul.u ; op1:x29; dest:x19; op1val:0xfeffffff00000003;  immval:$imm_val
TEST_RR_OP(smmul.u, x19, x29, x22, 0x0000000000000000, 0xfeffffff00000003, 0xfdfffffffffffffc, x11, 72, x18)

inst_10:
// rs1==x21, rs2==x6, rd==x3, rs2_w1_val == -16777217, rs1_w1_val == -513, rs1_w0_val == -3
// opcode: smmul.u ; op1:x21; dest:x3; op1val:0xfffffdfffffffffd;  immval:$imm_val
TEST_RR_OP(smmul.u, x3, x21, x6, 0x0000000000000000, 0xfffffdfffffffffd, 0xfeffffff55555554, x11, 80, x18)

inst_11:
// rs1==x12, rs2==x9, rd==x5, rs2_w1_val == -8388609, rs2_w0_val == 1
// opcode: smmul.u ; op1:x12; dest:x5; op1val:0x000009fffffff9;  immval:$imm_val
TEST_RR_OP(smmul.u, x5, x12, x9, 0x0000000000000000, 0x000009fffffff9, 0xff7fffff00000001, x11, 88, x18)

inst_12:
// rs1==x5, rs2==x7, rd==x8, rs2_w1_val == -4194305, rs1_w0_val == -5, rs2_w0_val == -257, rs1_w1_val == 524288
// opcode: smmul.u ; op1:x5; dest:x8; op1val:0x080000fffffffb;  immval:$imm_val
TEST_RR_OP(smmul.u, x8, x5, x7, 0x0000000000000000, 0x080000fffffffb, 0xffbffffffffffeff, x11, 96, x18)

inst_13:
// rs1==x13, rs2==x5, rd==x7, rs2_w1_val == -2097153, 
// opcode: smmul.u ; op1:x13; dest:x7; op1val:0x08000066666667;  immval:$imm_val
TEST_RR_OP(smmul.u, x7, x13, x5, 0x0000000000000000, 0x08000066666667, 0xffdfffff40000000, x11, 104, x18)

inst_14:
// rs1==x22, rs2==x26, rd==x12, rs2_w1_val == -1048577, rs1_w1_val == 2, rs1_w0_val == -67108865
// opcode: smmul.u ; op1:x22; dest:x12; op1val:0x000002fbffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x12, x22, x26, 0x0000000000000000, 0x000002fbffffff, 0xffefffff00000006, x11, 112, x18)

inst_15:
// rs1==x27, rs2==x21, rd==x2, rs2_w1_val == -524289, rs2_w0_val == 524288, rs1_w1_val == 2097152
// opcode: smmul.u ; op1:x27; dest:x2; op1val:0x20000000000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x2, x27, x21, 0x0000000000000000, 0x20000000000000, 0xfff7ffff00080000, x11, 120, x18)

inst_16:
// rs1==x7, rs2==x29, rd==x16, rs2_w1_val == -262145, 
// opcode: smmul.u ; op1:x7; dest:x16; op1val:0x333333330000b504;  immval:$imm_val
TEST_RR_OP(smmul.u, x16, x7, x29, 0x0000000000000000, 0x333333330000b504, 0xfffbffff00000005, x11, 128, x18)

inst_17:
// rs1==x2, rs2==x24, rd==x21, rs2_w1_val == -131073, rs2_w0_val == -268435457
// opcode: smmul.u ; op1:x2; dest:x21; op1val:0x20000000000020;  immval:$imm_val
TEST_RR_OP(smmul.u, x21, x2, x24, 0x0000000000000000, 0x20000000000020, 0xfffdffffefffffff, x11, 136, x18)

inst_18:
// rs1==x9, rs2==x1, rd==x28, rs2_w1_val == -65537, rs1_w1_val == 262144, rs2_w0_val == 4096, rs1_w0_val == 262144
// opcode: smmul.u ; op1:x9; dest:x28; op1val:0x04000000040000;  immval:$imm_val
TEST_RR_OP(smmul.u, x28, x9, x1, 0x0000000000000000, 0x04000000040000, 0xfffeffff00001000, x11, 144, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_19:
// rs1==x18, rs2==x15, rd==x14, rs2_w1_val == -32769, rs2_w0_val == -262145, rs1_w0_val == -131073, rs1_w1_val == 1048576
// opcode: smmul.u ; op1:x18; dest:x14; op1val:0x100000fffdffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x14, x18, x15, 0x0000000000000000, 0x100000fffdffff, 0xffff7ffffffbffff, x1, 0, x5)

inst_20:
// rs1==x24, rs2==x25, rd==x6, rs2_w1_val == -16385, rs1_w1_val == -1025
// opcode: smmul.u ; op1:x24; dest:x6; op1val:0xfffffbff33333332;  immval:$imm_val
TEST_RR_OP(smmul.u, x6, x24, x25, 0x0000000000000000, 0xfffffbff33333332, 0xffffbfffffff4afd, x1, 8, x5)

inst_21:
// rs1==x4, rs2==x13, rd==x10, rs2_w1_val == -8193, rs1_w0_val == -268435457, rs1_w1_val == 268435456
// opcode: smmul.u ; op1:x4; dest:x10; op1val:0x10000000efffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x10, x4, x13, 0x0000000000000000, 0x10000000efffffff, 0xffffdfff0000b505, x1, 16, x5)

inst_22:
// rs1==x31, rs2==x23, rd==x9, rs2_w1_val == -4097, rs2_w0_val == 32768
// opcode: smmul.u ; op1:x31; dest:x9; op1val:0x000003ffff4afc;  immval:$imm_val
TEST_RR_OP(smmul.u, x9, x31, x23, 0x0000000000000000, 0x000003ffff4afc, 0xffffefff00008000, x1, 24, x5)

inst_23:
// rs1==x6, rs2==x16, rd==x4, rs2_w1_val == -2049, rs2_w0_val == 134217728
// opcode: smmul.u ; op1:x6; dest:x4; op1val:0x000007fffffffa;  immval:$imm_val
TEST_RR_OP(smmul.u, x4, x6, x16, 0x0000000000000000, 0x000007fffffffa, 0xfffff7ff08000000, x1, 32, x5)

inst_24:
// rs1==x11, rs2==x10, rd==x25, rs2_w1_val == -1025, rs1_w0_val == -4097, rs1_w1_val == -129, rs2_w0_val == 4
// opcode: smmul.u ; op1:x11; dest:x25; op1val:0xffffff7fffffefff;  immval:$imm_val
TEST_RR_OP(smmul.u, x25, x11, x10, 0x0000000000000000, 0xffffff7fffffefff, 0xfffffbff00000004, x1, 40, x5)

inst_25:
// rs1==x14, rs2==x2, rd==x13, rs2_w1_val == -257, rs1_w0_val == 4194304
// opcode: smmul.u ; op1:x14; dest:x13; op1val:0x00b50500400000;  immval:$imm_val
TEST_RR_OP(smmul.u, x13, x14, x2, 0x0000000000000000, 0x00b50500400000, 0xfffffeff00000009, x1, 48, x5)

inst_26:
// rs1==x25, rs2==x19, rd==x11, rs2_w1_val == -129, rs2_w0_val == -1025
// opcode: smmul.u ; op1:x25; dest:x11; op1val:0x000080aaaaaaab;  immval:$imm_val
TEST_RR_OP(smmul.u, x11, x25, x19, 0x0000000000000000, 0x000080aaaaaaab, 0xffffff7ffffffbff, x1, 56, x5)

inst_27:
// rs1==x26, rs2==x28, rd==x24, rs2_w1_val == -65, rs1_w1_val == -2147483648, rs1_w0_val == -524289, rs2_w0_val == -129
// opcode: smmul.u ; op1:x26; dest:x24; op1val:0x80000000fff7ffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x24, x26, x28, 0x0000000000000000, 0x80000000fff7ffff, 0xffffffbfffffff7f, x1, 64, x5)

inst_28:
// rs1==x17, rs2==x3, rd==x15, rs2_w1_val == -33, rs1_w0_val == -2097153
// opcode: smmul.u ; op1:x17; dest:x15; op1val:0xfbffffffffdfffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x15, x17, x3, 0x0000000000000000, 0xfbffffffffdfffff, 0xffffffdffffffeff, x1, 72, x5)

inst_29:
// rs1==x28, rs2==x11, rd==x31, rs2_w1_val == -17, rs1_w0_val == -17
// opcode: smmul.u ; op1:x28; dest:x31; op1val:0xffff4afdffffffef;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x28, x11, 0x0000000000000000, 0xffff4afdffffffef, 0xffffffef00000004, x1, 80, x5)

inst_30:
// rs1==x8, rs2==x18, rd==x17, rs2_w1_val == -9, rs1_w0_val == 256, rs2_w0_val == -65537
// opcode: smmul.u ; op1:x8; dest:x17; op1val:0x04000000000100;  immval:$imm_val
TEST_RR_OP(smmul.u, x17, x8, x18, 0x0000000000000000, 0x04000000000100, 0xfffffff7fffeffff, x1, 88, x5)

inst_31:
// rs1==x0, rs2==x31, rd==x18, rs2_w1_val == -5, rs1_w0_val == -4194305, rs1_w1_val == 32768
// opcode: smmul.u ; op1:x0; dest:x18; op1val:0x008000ffbfffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x18, x0, x31, 0x0000000000000000, 0x008000ffbfffff, 0xfffffffb00000005, x1, 96, x5)

inst_32:
// rs2_w1_val == -3, rs2_w0_val == 8
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x10000066666667;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x10000066666667, 0xfffffffd00000008, x1, 104, x5)

inst_33:
// rs2_w1_val == -2, rs1_w1_val == 4
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000004ffffefff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x000004ffffefff, 0xfffffffe33333332, x1, 112, x5)

inst_34:
// rs2_w1_val == -2147483648, rs1_w0_val == 1048576, rs1_w1_val == 16
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00001000100000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x00001000100000, 0x800000000000b503, x1, 120, x5)

inst_35:
// rs2_w1_val == 1073741824, rs1_w1_val == 8388608, rs1_w0_val == 16777216
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x80000001000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x80000001000000, 0x40000000aaaaaaab, x1, 128, x5)

inst_36:
// rs2_w1_val == 536870912, rs1_w0_val == -134217729
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xeffffffff7ffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xeffffffff7ffffff, 0x2000000033333334, x1, 136, x5)

inst_37:
// rs2_w1_val == 268435456, rs1_w0_val == 536870912, rs1_w1_val == 2147483647, rs2_w0_val == 2147483647
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x7fffffff20000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x7fffffff20000000, 0x100000007fffffff, x1, 144, x5)

inst_38:
// rs2_w1_val == 134217728, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00b505ffffefff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x00b505ffffefff, 0x800000000000007, x1, 152, x5)

inst_39:
// rs2_w1_val == 67108864, rs1_w0_val == -1073741825, rs1_w1_val == 1073741824, rs2_w0_val == 512
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x40000000bfffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x40000000bfffffff, 0x400000000000200, x1, 160, x5)

inst_40:
// rs2_w1_val == 33554432, rs1_w0_val == -2049
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xc0000000fffff7ff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xc0000000fffff7ff, 0x2000000ffff4afd, x1, 168, x5)

inst_41:
// rs2_w1_val == 16777216, rs1_w1_val == -33554433
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfdfffffffbffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfdfffffffbffffff, 0x100000000200000, x1, 176, x5)

inst_42:
// rs2_w1_val == 8388608, rs1_w1_val == 16384
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x004000fffffdff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x004000fffffdff, 0x80000000000003, x1, 184, x5)

inst_43:
// rs2_w1_val == 4194304, rs1_w1_val == 33554432
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x2000000ffdfffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x2000000ffdfffff, 0x40000066666667, x1, 192, x5)

inst_44:
// rs2_w1_val == 2097152, rs1_w0_val == 524288, rs2_w0_val == 65536
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffffc00080000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffffc00080000, 0x20000000010000, x1, 200, x5)

inst_45:
// rs2_w1_val == 1048576, rs1_w0_val == 8192, rs1_w1_val == 131072
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x02000000002000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x02000000002000, 0x100000fffffff8, x1, 208, x5)

inst_46:
// rs2_w1_val == 524288, rs1_w0_val == -262145, rs2_w0_val == -134217729, rs1_w1_val == -8388609
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xff7ffffffffbffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffbffff, 0x080000f7ffffff, x1, 216, x5)

inst_47:
// rs2_w1_val == 262144, rs2_w0_val == 16384, rs1_w0_val == -8388609
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x020000ff7fffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x020000ff7fffff, 0x04000000004000, x1, 224, x5)

inst_48:
// rs2_w1_val == 131072, rs1_w0_val == 2048, rs2_w0_val == 0
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffffc00000800;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffffc00000800, 0x02000000000000, x1, 232, x5)

inst_49:
// rs2_w1_val == 65536, rs1_w0_val == 134217728
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00000008000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x00000008000000, 0x01000055555555, x1, 240, x5)

inst_50:
// rs2_w1_val == 32768, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x100000ffff4afd;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x100000ffff4afd, 0x00800000000004, x1, 248, x5)

inst_51:
// rs2_w1_val == 16384, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffff4afc00000005;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffff4afc00000005, 0x00400000010000, x1, 256, x5)

inst_52:
// rs2_w1_val == 8192, rs2_w0_val == -65, rs1_w1_val == 1431655765
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x55555555ffff4afd;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x55555555ffff4afd, 0x002000ffffffbf, x1, 264, x5)

inst_53:
// rs2_w1_val == 4096, rs1_w0_val == 512
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x5555555400000200;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x5555555400000200, 0x001000f7ffffff, x1, 272, x5)

inst_54:
// rs2_w1_val == 2048, rs1_w0_val == -1431655766, rs2_w0_val == 33554432
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffffff7faaaaaaaa;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffffff7faaaaaaaa, 0x00080002000000, x1, 280, x5)

inst_55:
// rs2_w1_val == 1024, rs1_w1_val == -4097
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffffefffefffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffffefffefffffff, 0x00040000004000, x1, 288, x5)

inst_56:
// rs2_w1_val == 512, rs1_w1_val == -2097153
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffdfffff00000006;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000006, 0x000200efffffff, x1, 296, x5)

inst_57:
// rs1_w0_val == 4096, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x08000000001000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x08000000001000, 0xffffffefaaaaaaaa, x1, 304, x5)

inst_58:
// rs1_w0_val == 1024, rs2_w1_val == 32, rs1_w1_val == 8
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00000800000400;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x00000800000400, 0x00002000000006, x1, 312, x5)

inst_59:
// rs1_w0_val == 128, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x20000000000080;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x20000000000080, 0x000009ffff4afd, x1, 320, x5)

inst_60:
// rs1_w0_val == 16, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xaaaaaaab00000010;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaab00000010, 0x00000500080000, x1, 328, x5)

inst_61:
// rs1_w0_val == 8, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffdff00000008;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000008, 0x00b504ffff4afc, x1, 336, x5)

inst_62:
// rs1_w0_val == 4, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00400000000004;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x00400000000004, 0x40000033333332, x1, 344, x5)

inst_63:
// rs1_w0_val == 1, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x5555555500000001;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x5555555500000001, 0x00000533333332, x1, 352, x5)

inst_64:
// rs1_w0_val == -1, rs2_w0_val == -33, rs1_w1_val == 134217728
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x8000000ffffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x8000000ffffffff, 0xfffffdffffffffdf, x1, 360, x5)

inst_65:
// rs2_w1_val == 256, rs2_w0_val == -5
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x66666667aaaaaaaa;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x66666667aaaaaaaa, 0x000100fffffffb, x1, 368, x5)

inst_66:
// rs2_w1_val == 128, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x008000ff7fffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x008000ff7fffff, 0x00008008000000, x1, 376, x5)

inst_67:
// rs2_w1_val == 64, rs1_w1_val == -17
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffffffefffffffef;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffffffefffffffef, 0x00004000000800, x1, 384, x5)

inst_68:
// rs2_w1_val == 16, rs2_w0_val == -1048577, rs1_w1_val == 64
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00004000000004;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x00004000000004, 0x000010ffefffff, x1, 392, x5)

inst_69:
// rs2_w1_val == 8, rs2_w0_val == -1
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00001000040000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x00001000040000, 0x000008ffffffff, x1, 400, x5)

inst_70:
// rs2_w1_val == 4, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x1000000000000004;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x1000000000000004, 0x00000455555554, x1, 408, x5)

inst_71:
// rs2_w1_val == 2, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00008000000003;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x00008000000003, 0x000002fffeffff, x1, 416, x5)

inst_72:
// rs2_w1_val == 1, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x55555555ffff4afc;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x55555555ffff4afc, 0x00000100000005, x1, 424, x5)

inst_73:
// rs2_w1_val == 0, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x55555556aaaaaaaa;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x55555556aaaaaaaa, 0x000000fffffff8, x1, 432, x5)

inst_74:
// rs2_w1_val == -1, rs2_w0_val == 64
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x55555554ffffefff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x55555554ffffefff, 0xffffffff00000040, x1, 440, x5)

inst_75:
// rs2_w0_val == -1073741825, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x02000000000001;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x02000000000001, 0x000005bfffffff, x1, 448, x5)

inst_76:
// rs2_w0_val == -536870913, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000005ff7fffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x000005ff7fffff, 0x66666666dfffffff, x1, 456, x5)

inst_77:
// rs2_w0_val == -67108865, rs1_w0_val == 16384
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffdfffff00004000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffdfffff00004000, 0x000400fbffffff, x1, 464, x5)

inst_78:
// rs2_w0_val == -33554433, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffbffffff4afc;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffbffffff4afc, 0xfffffff8fdffffff, x1, 472, x5)

inst_79:
// rs2_w0_val == -16777217, rs1_w1_val == 32
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00002000000080;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x00002000000080, 0x55555554feffffff, x1, 480, x5)

inst_80:
// rs2_w0_val == -8388609, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x100000fffffffc;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x100000fffffffc, 0xffff7fffff7fffff, x1, 488, x5)

inst_81:
// rs2_w0_val == -4194305, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffff600000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffff600000000, 0x008000ffbfffff, x1, 496, x5)

inst_82:
// rs2_w0_val == -2097153, rs1_w1_val == 512
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000200c0000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x000200c0000000, 0x000000ffdfffff, x1, 504, x5)

inst_83:
// rs2_w0_val == -524289, rs1_w0_val == 2097152
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x3333333300200000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x3333333300200000, 0x000100fff7ffff, x1, 512, x5)

inst_84:
// rs2_w0_val == -131073, rs1_w0_val == 1431655765
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x3333333455555555;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x3333333455555555, 0x3ffffffffffdffff, x1, 520, x5)

inst_85:
// rs2_w0_val == -32769, rs1_w1_val == -2
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffffe00004000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffffe00004000, 0xbfffffffffff7fff, x1, 528, x5)

inst_86:
// rs2_w0_val == -16385, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xaaaaaaab00000400;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaab00000400, 0xfdffffffffffbfff, x1, 536, x5)

inst_87:
// rs2_w0_val == -8193, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x5555555600100000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x5555555600100000, 0x000009ffffdfff, x1, 544, x5)

inst_88:
// rs2_w0_val == -4097, rs1_w0_val == -257
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x080000fffffeff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x080000fffffeff, 0x00b505ffffefff, x1, 552, x5)

inst_89:
// rs2_w0_val == -2049, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000008fffffffa;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x000008fffffffa, 0xfffbfffffffff7ff, x1, 560, x5)

inst_90:
// rs2_w0_val == -513, rs1_w0_val == -1025
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffffff7ffffffbff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffbff, 0x020000fffffdff, x1, 568, x5)

inst_91:
// rs2_w0_val == -17, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00000333333333;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x00000333333333, 0xfffffff9ffffffef, x1, 576, x5)

inst_92:
// rs2_w0_val == -9, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x55555555fff7ffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x55555555fff7ffff, 0xffff4afcfffffff7, x1, 584, x5)

inst_93:
// rs2_w0_val == -3, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffffc00000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffffc00000000, 0x000000fffffffd, x1, 592, x5)

inst_94:
// rs2_w0_val == -2, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffffff7ffffffdff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffdff, 0x000002fffffffe, x1, 600, x5)

inst_95:
// rs2_w0_val == -2147483648, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x04000055555555;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x04000055555555, 0xffff7fff80000000, x1, 608, x5)

inst_96:
// rs2_w0_val == 536870912, rs1_w1_val == -1431655766
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xaaaaaaaa00000002;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000002, 0x00002020000000, x1, 616, x5)

inst_97:
// rs2_w0_val == 268435456, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00000000000100;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x00000000000100, 0x00400010000000, x1, 624, x5)

inst_98:
// rs2_w0_val == 67108864, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x55555555fffbffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x55555555fffbffff, 0xfffbffff04000000, x1, 632, x5)

inst_99:
// rs2_w0_val == 16777216, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfeffffff00000004;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000004, 0xbfffffff01000000, x1, 640, x5)

inst_100:
// rs2_w0_val == 8388608, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x3333333366666665;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x3333333366666665, 0xffffff7f00800000, x1, 648, x5)

inst_101:
// rs2_w0_val == 32, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x020000ff7fffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x020000ff7fffff, 0x2000000000000020, x1, 656, x5)

inst_102:
// rs2_w0_val == 16, rs1_w1_val == -1073741825
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xbfffffff33333333;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xbfffffff33333333, 0xfffffbff00000010, x1, 664, x5)

inst_103:
// rs2_w0_val == 2, rs1_w1_val == 4194304
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x40000000000006;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x40000000000006, 0x00800000000002, x1, 672, x5)

inst_104:
// rs1_w1_val == -536870913, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xdfffffff33333332;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xdfffffff33333332, 0xfffffffd00200000, x1, 680, x5)

inst_105:
// rs1_w1_val == -134217729, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xf7ffffff00080000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00080000, 0x00800033333333, x1, 688, x5)

inst_106:
// rs1_w1_val == -4194305, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffbfffff00000001;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000001, 0xfffbffffffff4afd, x1, 696, x5)

inst_107:
// rs1_w1_val == -1048577, rs2_w0_val == 4194304
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffefffffffff4afd;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffefffffffff4afd, 0x04000000400000, x1, 704, x5)

inst_108:
// rs1_w1_val == -524289, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfff7ffff33333333;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfff7ffff33333333, 0xffeffffffff7ffff, x1, 712, x5)

inst_109:
// rs1_w1_val == -262145, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffbffff00000080;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000080, 0xfffdffff00000004, x1, 720, x5)

inst_110:
// rs1_w1_val == -131073, rs1_w0_val == 67108864
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffdffff04000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffdffff04000000, 0xfff7ffff33333333, x1, 728, x5)

inst_111:
// rs1_w1_val == -65537, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffeffff00400000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffeffff00400000, 0xf7ffffffffff4afd, x1, 736, x5)

inst_112:
// rs1_w1_val == -32769, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffff7fff00000800;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000800, 0x3fffffff00004000, x1, 744, x5)

inst_113:
// rs1_w1_val == -16385, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffffbfffffbfffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffffbfffffbfffff, 0xffff4afc00000004, x1, 752, x5)

inst_114:
// rs1_w1_val == -8193, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffffdfffffff4afd;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffffdfffffff4afd, 0x000004fff7ffff, x1, 760, x5)

inst_115:
// rs1_w1_val == -2049, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffff7ff00000200;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000200, 0x80000000000020, x1, 768, x5)

inst_116:
// rs1_w1_val == -257, rs1_w0_val == 1073741824
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffeff40000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffeff40000000, 0xfffffffd00000000, x1, 776, x5)

inst_117:
// rs1_w1_val == -65, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffffffbf00080000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffffffbf00080000, 0x3ffffffffffffffd, x1, 784, x5)

inst_118:
// rs1_w1_val == -33, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffffffdf08000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffffffdf08000000, 0xfffffbff55555555, x1, 792, x5)

inst_119:
// rs1_w1_val == -9, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffff7fffffdff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffffdff, 0x55555556fffffff8, x1, 800, x5)

inst_120:
// rs1_w1_val == -5, rs1_w0_val == 8388608
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffffb00800000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffffb00800000, 0xfffffbffffff4afc, x1, 808, x5)

inst_121:
// rs1_w1_val == -3, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffffdfffdffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffdffff, 0xffff7fffffff7fff, x1, 816, x5)

inst_122:
// rs1_w1_val == 536870912, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x20000000fffff7ff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x20000000fffff7ff, 0x5555555500000800, x1, 824, x5)

inst_123:
// rs1_w1_val == 67108864, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x400000040000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x400000040000000, 0x000000fffeffff, x1, 832, x5)

inst_124:
// rs1_w1_val == 16777216, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x100000000800000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x100000000800000, 0xfdffffff40000000, x1, 840, x5)

inst_125:
// rs1_w1_val == 65536, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x010000ffff4afc;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x010000ffff4afc, 0x400000aaaaaaab, x1, 848, x5)

inst_126:
// rs1_w1_val == 8192, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00200000002000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x00200000002000, 0x00000900200000, x1, 856, x5)

inst_127:
// rs1_w1_val == 1024, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00040000000020;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x00040000000020, 0x55555554fffffeff, x1, 864, x5)

inst_128:
// rs1_w1_val == 2048, rs2_w0_val == 128
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000800ffbfffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x000800ffbfffff, 0xaaaaaaaa00000080, x1, 872, x5)

inst_129:
// rs1_w1_val == 256, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00010000000006;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x00010000000006, 0x000020ffff4afd, x1, 880, x5)

inst_130:
// rs1_w1_val == 1, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000001ffdfffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x000001ffdfffff, 0x6666666700000003, x1, 888, x5)

inst_131:
// rs1_w1_val == -1, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffffffffff7fffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffffffffff7fffff, 0xffffdfffaaaaaaaa, x1, 896, x5)

inst_132:
// rs1_w0_val == 2147483647, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x333333347fffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x333333347fffffff, 0xffff4afd00200000, x1, 904, x5)

inst_133:
// rs1_w0_val == -536870913, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00b505dfffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x00b505dfffffff, 0x02000000000001, x1, 912, x5)

inst_134:
// rs1_w0_val == -33554433, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000006fdffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x000006fdffffff, 0xfffffbff33333333, x1, 920, x5)

inst_135:
// rs1_w0_val == 32768, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffdff00008000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffdff00008000, 0x00000400080000, x1, 928, x5)

inst_136:
// rs1_w0_val == -16777217, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffffcfeffffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffffcfeffffff, 0xffffffef0000b504, x1, 936, x5)

inst_137:
// rs1_w0_val == -1048577, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x000005ffefffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x000005ffefffff, 0xffffffdf0000b504, x1, 944, x5)

inst_138:
// rs1_w0_val == -65537, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffffdffffffeffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffffdffffffeffff, 0xdfffffffff7fffff, x1, 952, x5)

inst_139:
// rs1_w0_val == -32769, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xdfffffffffff7fff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xdfffffffffff7fff, 0x00080000010000, x1, 960, x5)

inst_140:
// rs1_w0_val == -16385, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x008000ffffbfff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x008000ffffbfff, 0x0000403fffffff, x1, 968, x5)

inst_141:
// rs1_w0_val == -8193, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x55555555ffffdfff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x55555555ffffdfff, 0x00000604000000, x1, 976, x5)

inst_142:
// rs1_w0_val == -129, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffff4afdffffff7f;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffff4afdffffff7f, 0x00000400004000, x1, 984, x5)

inst_143:
// rs1_w0_val == -65, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x33333333ffffffbf;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x33333333ffffffbf, 0xffff4afc02000000, x1, 992, x5)

inst_144:
// rs1_w0_val == -33, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffffcffffffdf;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffffcffffffdf, 0xfffffff8ffff4afd, x1, 1000, x5)

inst_145:
// rs1_w0_val == -9, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x004000fffffff7;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x004000fffffff7, 0xffffffdf00000200, x1, 1008, x5)

inst_146:
// rs1_w1_val == 4096, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x001000fffffffd;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x001000fffffffd, 0xfffffffd55555554, x1, 1016, x5)

inst_147:
// rs1_w0_val == -2, rs2_w0_val == 262144
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xffeffffffffffffe;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffffe, 0x6666666500040000, x1, 1024, x5)

inst_148:
// rs2_w0_val == 1024, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfff7fffffffffff8;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffffff8, 0xfffff7ff00000400, x1, 1032, x5)

inst_149:
// rs1_w0_val == 268435456, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x5555555610000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x5555555610000000, 0x6666666600004000, x1, 1040, x5)

inst_150:
// rs1_w0_val == 33554432, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffbffff02000000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffbffff02000000, 0xffffffbffffffeff, x1, 1048, x5)

inst_151:
// rs2_w0_val == 131072, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffbffff00000400;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000400, 0xfffbffff00020000, x1, 1056, x5)

inst_152:
// rs2_w0_val == 8192, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffffffffeffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffffffffeffff, 0x00b50300002000, x1, 1064, x5)

inst_153:
// rs1_w0_val == 131072, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00000400020000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x00000400020000, 0xbfffffff00000080, x1, 1072, x5)

inst_154:
// rs1_w0_val == 65536, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x1000000000010000;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x1000000000010000, 0xffffffdf10000000, x1, 1080, x5)

inst_155:
// rs2_w0_val == 256, 
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0xfffffff60000b504;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffff60000b504, 0x00000500000100, x1, 1088, x5)

inst_156:
// rs2_w1_val == 2147483647, rs2_w0_val == 2048, rs1_w0_val == -513
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00b505fffffdff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x00b505fffffdff, 0x7fffffff00000800, x1, 1096, x5)

inst_157:
// rs2_w1_val == -268435457, rs1_w0_val == 2, rs2_w0_val == -1431655766
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x6666666700000002;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x6666666700000002, 0xefffffffaaaaaaaa, x1, 1104, x5)

inst_158:
// rs2_w1_val == -134217729, rs1_w0_val == 32, rs2_w0_val == 1048576, rs1_w1_val == 128
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x00008000000020;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x00008000000020, 0xf7ffffff00100000, x1, 1112, x5)

inst_159:
// rs2_w1_val == -5, rs1_w0_val == -4194305, rs1_w1_val == 32768
// opcode: smmul.u ; op1:x30; dest:x31; op1val:0x008000ffbfffff;  immval:$imm_val
TEST_RR_OP(smmul.u, x31, x30, x29, 0x0000000000000000, 0x008000ffbfffff, 0xfffffffb00000005, x1, 1120, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 141*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
