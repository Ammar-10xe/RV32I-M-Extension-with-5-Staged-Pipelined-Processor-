
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kslra16.u instruction of the RISC-V RV64PZicsr extension for the kslra16.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kslra16.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x13, rs2==x20, rd==x13, rs2_val == 6148914691236517205, rs1_h3_val == 1024, rs1_h1_val == 65519, rs1_h2_val == 64
// opcode: kslra16.u ; op1:x13; op2:x20; dest:x13; op1val:0x4000040ffef0005;  op2val:0x5555555555555555
TEST_PKRR_OP(kslra16.u, x13, x13, x20, 0x0000000000000000, 0x4000040ffef0005, 0x5555555555555555, x13, x6, 0, x22)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x20, rs2==x19, rd==x10, rs2_val == 9223372036854775807, rs1_h1_val == 2, rs1_h0_val == 65531, rs1_h3_val == 63487
// opcode: kslra16.u ; op1:x20; op2:x19; dest:x10; op1val:0xf7ff00400002fffb;  op2val:0x7fffffffffffffff
TEST_PKRR_OP(kslra16.u, x10, x20, x19, 0x0000000000000000, 0xf7ff00400002fffb, 0x7fffffffffffffff, x20, x6, 16, x22)

inst_2:
// rs1 == rs2 != rd, rs1==x15, rs2==x15, rd==x23, rs2_val == -4611686018427387905, rs1_h1_val == 64511, rs1_h2_val == 64511, rs1_h3_val == 16, rs1_h0_val == 32768
// opcode: kslra16.u ; op1:x15; op2:x15; dest:x23; op1val:0x10fbfffbff8000;  op2val:0xbfffffffffffffff
TEST_PKRR_OP(kslra16.u, x23, x15, x15, 0x0000000000000000, 0x10fbfffbff8000, 0xbfffffffffffffff, x15, x6, 32, x22)

inst_3:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs2_val == -2305843009213693953, rs1_h1_val == 1024, rs1_h2_val == 63487
// opcode: kslra16.u ; op1:x1; op2:x1; dest:x1; op1val:0x0ef7ff0400000e;  op2val:0xdfffffffffffffff
TEST_PKRR_OP(kslra16.u, x1, x1, x1, 0x0000000000000000, 0x0ef7ff0400000e, 0xdfffffffffffffff, x1, x6, 48, x22)

inst_4:
// rs2 == rd != rs1, rs1==x8, rs2==x9, rd==x9, rs2_val == -1152921504606846977, rs1_h1_val == 65023, rs1_h0_val == 128
// opcode: kslra16.u ; op1:x8; op2:x9; dest:x9; op1val:0x10000ffdff0080;  op2val:0xefffffffffffffff
TEST_PKRR_OP(kslra16.u, x9, x8, x9, 0x0000000000000000, 0x10000ffdff0080, 0xefffffffffffffff, x8, x6, 64, x22)

inst_5:
// rs1==x25, rs2==x12, rd==x3, rs2_val == -576460752303423489, rs1_h1_val == 65531, rs1_h3_val == 512, rs1_h0_val == 57343
// opcode: kslra16.u ; op1:x25; op2:x12; dest:x3; op1val:0x2000012fffbdfff;  op2val:0xf7ffffffffffffff
TEST_PKRR_OP(kslra16.u, x3, x25, x12, 0x0000000000000000, 0x2000012fffbdfff, 0xf7ffffffffffffff, x25, x6, 80, x22)

inst_6:
// rs1==x4, rs2==x23, rd==x5, rs2_val == -288230376151711745, rs1_h3_val == 16384, rs1_h2_val == 65023
// opcode: kslra16.u ; op1:x4; op2:x23; dest:x5; op1val:0x4000fdff00090003;  op2val:0xfbffffffffffffff
TEST_PKRR_OP(kslra16.u, x5, x4, x23, 0x0000000000000000, 0x4000fdff00090003, 0xfbffffffffffffff, x4, x6, 96, x22)

inst_7:
// rs1==x19, rs2==x8, rd==x27, rs2_val == -144115188075855873, rs1_h2_val == 65471, rs1_h0_val == 1
// opcode: kslra16.u ; op1:x19; op2:x8; dest:x27; op1val:0x09ffbffbff0001;  op2val:0xfdffffffffffffff
TEST_PKRR_OP(kslra16.u, x27, x19, x8, 0x0000000000000000, 0x09ffbffbff0001, 0xfdffffffffffffff, x19, x6, 112, x22)

inst_8:
// rs1==x3, rs2==x16, rd==x11, rs2_val == -72057594037927937, rs1_h0_val == 63487, rs1_h1_val == 65503, rs1_h2_val == 32768
// opcode: kslra16.u ; op1:x3; op2:x16; dest:x11; op1val:0x138000ffdff7ff;  op2val:0xfeffffffffffffff
TEST_PKRR_OP(kslra16.u, x11, x3, x16, 0x0000000000000000, 0x138000ffdff7ff, 0xfeffffffffffffff, x3, x6, 128, x22)

inst_9:
// rs1==x27, rs2==x17, rd==x16, rs2_val == -36028797018963969, rs1_h2_val == 16384, rs1_h3_val == 65533, rs1_h0_val == 16, rs1_h1_val == 65407
// opcode: kslra16.u ; op1:x27; op2:x17; dest:x16; op1val:0xfffd4000ff7f0010;  op2val:0xff7fffffffffffff
TEST_PKRR_OP(kslra16.u, x16, x27, x17, 0x0000000000000000, 0xfffd4000ff7f0010, 0xff7fffffffffffff, x27, x6, 144, x22)

inst_10:
// rs1==x29, rs2==x2, rd==x19, rs2_val == -18014398509481985, rs1_h1_val == 57343, rs1_h3_val == 2048
// opcode: kslra16.u ; op1:x29; op2:x2; dest:x19; op1val:0x8000011dfff000b;  op2val:0xffbfffffffffffff
TEST_PKRR_OP(kslra16.u, x19, x29, x2, 0x0000000000000000, 0x8000011dfff000b, 0xffbfffffffffffff, x29, x6, 160, x22)

inst_11:
// rs1==x21, rs2==x18, rd==x2, rs2_val == -9007199254740993, rs1_h2_val == 49151, rs1_h0_val == 32767
// opcode: kslra16.u ; op1:x21; op2:x18; dest:x2; op1val:0x0abffffffb7fff;  op2val:0xffdfffffffffffff
TEST_PKRR_OP(kslra16.u, x2, x21, x18, 0x0000000000000000, 0x0abffffffb7fff, 0xffdfffffffffffff, x21, x6, 176, x22)

inst_12:
// rs1==x10, rs2==x14, rd==x15, rs2_val == -4503599627370497, rs1_h0_val == 49151, rs1_h1_val == 49151, rs1_h2_val == 128
// opcode: kslra16.u ; op1:x10; op2:x14; dest:x15; op1val:0x030080bfffbfff;  op2val:0xffefffffffffffff
TEST_PKRR_OP(kslra16.u, x15, x10, x14, 0x0000000000000000, 0x030080bfffbfff, 0xffefffffffffffff, x10, x6, 192, x22)

inst_13:
// rs1==x23, rs2==x5, rd==x21, rs2_val == -2251799813685249, rs1_h0_val == 43690, rs1_h1_val == 32767, rs1_h2_val == 43690, rs1_h3_val == 4096
// opcode: kslra16.u ; op1:x23; op2:x5; dest:x21; op1val:0x1000aaaa7fffaaaa;  op2val:0xfff7ffffffffffff
TEST_PKRR_OP(kslra16.u, x21, x23, x5, 0x0000000000000000, 0x1000aaaa7fffaaaa, 0xfff7ffffffffffff, x23, x6, 208, x22)

inst_14:
// rs1==x7, rs2==x28, rd==x24, rs2_val == -1125899906842625, rs1_h3_val == 65534, rs1_h2_val == 4
// opcode: kslra16.u ; op1:x7; op2:x28; dest:x24; op1val:0xfffe0004000f0005;  op2val:0xfffbffffffffffff
TEST_PKRR_OP(kslra16.u, x24, x7, x28, 0x0000000000000000, 0xfffe0004000f0005, 0xfffbffffffffffff, x7, x6, 224, x22)

inst_15:
// rs1==x5, rs2==x26, rd==x14, rs2_val == -562949953421313, rs1_h1_val == 32, rs1_h0_val == 65535
// opcode: kslra16.u ; op1:x5; op2:x26; dest:x14; op1val:0x0e00050020ffff;  op2val:0xfffdffffffffffff
TEST_PKRR_OP(kslra16.u, x14, x5, x26, 0x0000000000000000, 0x0e00050020ffff, 0xfffdffffffffffff, x5, x6, 240, x13)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:
// rs1==x18, rs2==x25, rd==x12, rs2_val == -281474976710657, rs1_h1_val == 8
// opcode: kslra16.u ; op1:x18; op2:x25; dest:x12; op1val:0x0ef7ff0008000d;  op2val:0xfffeffffffffffff
TEST_PKRR_OP(kslra16.u, x12, x18, x25, 0x0000000000000000, 0x0ef7ff0008000d, 0xfffeffffffffffff, x18, x1, 0, x13)

inst_17:
// rs1==x11, rs2==x31, rd==x29, rs2_val == -140737488355329, rs1_h1_val == 256, rs1_h0_val == 512, rs1_h2_val == 2
// opcode: kslra16.u ; op1:x11; op2:x31; dest:x29; op1val:0x0b000201000200;  op2val:0xffff7fffffffffff
TEST_PKRR_OP(kslra16.u, x29, x11, x31, 0x0000000000000000, 0x0b000201000200, 0xffff7fffffffffff, x11, x1, 16, x13)

inst_18:
// rs1==x31, rs2==x29, rd==x22, rs2_val == -70368744177665, rs1_h2_val == 0
// opcode: kslra16.u ; op1:x31; op2:x29; dest:x22; op1val:0x03000000060200;  op2val:0xffffbfffffffffff
TEST_PKRR_OP(kslra16.u, x22, x31, x29, 0x0000000000000000, 0x03000000060200, 0xffffbfffffffffff, x31, x1, 32, x13)

inst_19:
// rs1==x2, rs2==x21, rd==x31, rs2_val == -35184372088833, rs1_h2_val == 65527, rs1_h3_val == 65503
// opcode: kslra16.u ; op1:x2; op2:x21; dest:x31; op1val:0xffdffff7bfff0009;  op2val:0xffffdfffffffffff
TEST_PKRR_OP(kslra16.u, x31, x2, x21, 0x0000000000000000, 0xffdffff7bfff0009, 0xffffdfffffffffff, x2, x1, 48, x13)

inst_20:
// rs1==x6, rs2==x22, rd==x8, rs2_val == -17592186044417, rs1_h0_val == 65471, rs1_h2_val == 1024, rs1_h1_val == 64
// opcode: kslra16.u ; op1:x6; op2:x22; dest:x8; op1val:0x0304000040ffbf;  op2val:0xffffefffffffffff
TEST_PKRR_OP(kslra16.u, x8, x6, x22, 0x0000000000000000, 0x0304000040ffbf, 0xffffefffffffffff, x6, x1, 64, x13)

inst_21:
// rs1==x12, rs2==x10, rd==x30, rs2_val == -8796093022209, rs1_h0_val == 64, rs1_h2_val == 512
// opcode: kslra16.u ; op1:x12; op2:x10; dest:x30; op1val:0x1302007fff0040;  op2val:0xfffff7ffffffffff
TEST_PKRR_OP(kslra16.u, x30, x12, x10, 0x0000000000000000, 0x1302007fff0040, 0xfffff7ffffffffff, x12, x1, 80, x13)

inst_22:
// rs1==x28, rs2==x30, rd==x20, rs2_val == -4398046511105, rs1_h3_val == 4, rs1_h0_val == 8
// opcode: kslra16.u ; op1:x28; op2:x30; dest:x20; op1val:0x04fdff04000008;  op2val:0xfffffbffffffffff
TEST_PKRR_OP(kslra16.u, x20, x28, x30, 0x0000000000000000, 0x04fdff04000008, 0xfffffbffffffffff, x28, x1, 96, x13)

inst_23:
// rs1==x26, rs2==x4, rd==x17, rs2_val == -2199023255553, rs1_h2_val == 65533
// opcode: kslra16.u ; op1:x26; op2:x4; dest:x17; op1val:0x0cfffdfffbf7ff;  op2val:0xfffffdffffffffff
TEST_PKRR_OP(kslra16.u, x17, x26, x4, 0x0000000000000000, 0x0cfffdfffbf7ff, 0xfffffdffffffffff, x26, x1, 112, x13)

inst_24:
// rs1==x9, rs2==x6, rd==x0, rs2_val == -1099511627777, rs1_h3_val == 21845, rs1_h2_val == 256
// opcode: kslra16.u ; op1:x9; op2:x6; dest:x0; op1val:0x55550100ffdf0013;  op2val:0xfffffeffffffffff
TEST_PKRR_OP(kslra16.u, x0, x9, x6, 0x0000000000000000, 0x55550100ffdf0013, 0xfffffeffffffffff, x9, x1, 128, x13)

inst_25:
// rs1==x14, rs2==x24, rd==x28, rs2_val == -549755813889, rs1_h3_val == 65279
// opcode: kslra16.u ; op1:x14; op2:x24; dest:x28; op1val:0xfeff000700050012;  op2val:0xffffff7fffffffff
TEST_PKRR_OP(kslra16.u, x28, x14, x24, 0x0000000000000000, 0xfeff000700050012, 0xffffff7fffffffff, x14, x1, 144, x13)

inst_26:
// rs1==x22, rs2==x3, rd==x7, rs2_val == -274877906945, rs1_h1_val == 43690, rs1_h3_val == 32
// opcode: kslra16.u ; op1:x22; op2:x3; dest:x7; op1val:0x208000aaaa0011;  op2val:0xffffffbfffffffff
TEST_PKRR_OP(kslra16.u, x7, x22, x3, 0x0000000000000000, 0x208000aaaa0011, 0xffffffbfffffffff, x22, x1, 160, x13)

inst_27:
// rs1==x0, rs2==x27, rd==x26, rs2_val == -137438953473, rs1_h1_val == 16384
// opcode: kslra16.u ; op1:x0; op2:x27; dest:x26; op1val:0x0afff74000000d;  op2val:0xffffffdfffffffff
TEST_PKRR_OP(kslra16.u, x26, x0, x27, 0x0000000000000000, 0x0afff74000000d, 0xffffffdfffffffff, x0, x1, 176, x13)

inst_28:
// rs1==x17, rs2==x0, rd==x25, rs2_val == -68719476737, rs1_h2_val == 32, rs1_h1_val == 512, rs1_h0_val == 65407
// opcode: kslra16.u ; op1:x17; op2:x0; dest:x25; op1val:0x1300200200ff7f;  op2val:0x0
TEST_PKRR_OP(kslra16.u, x25, x17, x0, 0x0000000000000000, 0x1300200200ff7f, 0x0, x17, x1, 192, x13)

inst_29:
// rs1==x16, rs2==x7, rd==x4, rs2_val == -34359738369, rs1_h1_val == 0, rs1_h0_val == 65534
// opcode: kslra16.u ; op1:x16; op2:x7; dest:x4; op1val:0x4000000d0000fffe;  op2val:0xfffffff7ffffffff
TEST_PKRR_OP(kslra16.u, x4, x16, x7, 0x0000000000000000, 0x4000000d0000fffe, 0xfffffff7ffffffff, x16, x1, 208, x13)

inst_30:
// rs1==x24, rs2==x13, rd==x18, rs2_val == -17179869185, rs1_h2_val == 2048
// opcode: kslra16.u ; op1:x24; op2:x13; dest:x18; op1val:0x0b0800000caaaa;  op2val:0xfffffffbffffffff
TEST_PKRR_OP(kslra16.u, x18, x24, x13, 0x0000000000000000, 0x0b0800000caaaa, 0xfffffffbffffffff, x24, x1, 224, x2)

inst_31:
// rs1==x30, rs2==x11, rd==x6, rs2_val == -8589934593, rs1_h2_val == 16, rs1_h0_val == 4096
// opcode: kslra16.u ; op1:x30; op2:x11; dest:x6; op1val:0x0a0010000f1000;  op2val:0xfffffffdffffffff
TEST_PKRR_OP(kslra16.u, x6, x30, x11, 0x0000000000000000, 0x0a0010000f1000, 0xfffffffdffffffff, x30, x1, 240, x2)

inst_32:
// rs2_val == -4294967297, rs1_h3_val == 64511, rs1_h1_val == 1, rs1_h2_val == 21845
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbff555500010040;  op2val:0xfffffffeffffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfbff555500010040, 0xfffffffeffffffff, x30, x1, 256, x2)

inst_33:
// rs2_val == -2147483649, rs1_h0_val == 32, rs1_h3_val == 65527
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7002000110020;  op2val:0xffffffff7fffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfff7002000110020, 0xffffffff7fffffff, x30, x1, 272, x2)

inst_34:
// rs2_val == -1073741825, rs1_h3_val == 61439, rs1_h1_val == 2048
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xefff000308000012;  op2val:0xffffffffbfffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xefff000308000012, 0xffffffffbfffffff, x30, x1, 288, x2)

inst_35:
// rs2_val == -536870913, rs1_h2_val == 65519
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x11ffef000c0008;  op2val:0xffffffffdfffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x11ffef000c0008, 0xffffffffdfffffff, x30, x1, 304, x2)

inst_36:
// rs2_val == -268435457, rs1_h2_val == 65535
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffff4000bfff;  op2val:0xffffffffefffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x1000ffff4000bfff, 0xffffffffefffffff, x30, x1, 320, x2)

inst_37:
// rs2_val == -134217729, rs1_h3_val == 65535, rs1_h2_val == 65407
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f0013bfff;  op2val:0xfffffffff7ffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xffffff7f0013bfff, 0xfffffffff7ffffff, x30, x1, 336, x2)

inst_38:
// rs2_val == -67108865, rs1_h0_val == 256
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x8000010ffef0100;  op2val:0xfffffffffbffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x8000010ffef0100, 0xfffffffffbffffff, x30, x1, 352, x2)

inst_39:
// rs2_val == -33554433, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x04000f0005000a;  op2val:0xfffffffffdffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x04000f0005000a, 0xfffffffffdffffff, x30, x1, 368, x2)

inst_40:
// rs2_val == -16777217, rs1_h2_val == 1
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x200001dfff000a;  op2val:0xfffffffffeffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x200001dfff000a, 0xfffffffffeffffff, x30, x1, 384, x2)

inst_41:
// rs2_val == -8388609, rs1_h1_val == 128, rs1_h3_val == 57343
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffef0080000e;  op2val:0xffffffffff7fffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xdfffffef0080000e, 0xffffffffff7fffff, x30, x1, 400, x2)

inst_42:
// rs2_val == -4194305, rs1_h2_val == 8
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x04000800400200;  op2val:0xffffffffffbfffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x04000800400200, 0xffffffffffbfffff, x30, x1, 416, x2)

inst_43:
// rs2_val == -2097153, rs1_h1_val == 32768
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7001180000010;  op2val:0xffffffffffdfffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfff7001180000010, 0xffffffffffdfffff, x30, x1, 432, x2)

inst_44:
// rs2_val == -1048577, rs1_h1_val == 65534
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0005fffeaaaa;  op2val:0xffffffffffefffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfffd0005fffeaaaa, 0xffffffffffefffff, x30, x1, 448, x2)

inst_45:
// rs2_val == -524289, rs1_h3_val == 8
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x08fffddfff0011;  op2val:0xfffffffffff7ffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x08fffddfff0011, 0xfffffffffff7ffff, x30, x1, 464, x2)

inst_46:
// rs2_val == -262145, rs1_h0_val == 65279
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x100011000afeff;  op2val:0xfffffffffffbffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x100011000afeff, 0xfffffffffffbffff, x30, x1, 480, x2)

inst_47:
// rs2_val == -131073, rs1_h0_val == 61439
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x800000b000cefff;  op2val:0xfffffffffffdffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x800000b000cefff, 0xfffffffffffdffff, x30, x1, 496, x2)

inst_48:
// rs2_val == -65537, rs1_h3_val == 65471
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbffbff0020fffe;  op2val:0xfffffffffffeffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xffbffbff0020fffe, 0xfffffffffffeffff, x30, x1, 512, x2)

inst_49:
// rs2_val == -32769, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000cffef0200;  op2val:0xffffffffffff7fff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xffdf000cffef0200, 0xffffffffffff7fff, x30, x1, 528, x2)

inst_50:
// rs2_val == -16385, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x20bfff000ffffe;  op2val:0xffffffffffffbfff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x20bfff000ffffe, 0xffffffffffffbfff, x30, x1, 544, x2)

inst_51:
// rs2_val == -8193, rs1_h3_val == 1, rs1_h1_val == 65535
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x010400fffff7ff;  op2val:0xffffffffffffdfff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x010400fffff7ff, 0xffffffffffffdfff, x30, x1, 560, x2)

inst_52:
// rs2_val == -4097, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffbff0008ffbf;  op2val:0xffffffffffffefff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfbfffbff0008ffbf, 0xffffffffffffefff, x30, x1, 576, x2)

inst_53:
// rs1_h0_val == 16384, rs1_h1_val == 4, rs2_val == 2305843009213693952
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xffff000000044000;  op2val:0x2000000000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xffff000000044000, 0x2000000000000000, x30, x1, 592, x2)

inst_54:
// rs1_h0_val == 8192, rs2_val == 8589934592
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x130400000a2000;  op2val:0x200000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x130400000a2000, 0x200000000, x30, x1, 608, x2)

inst_55:
// rs1_h0_val == 2048, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xdfff000200120800;  op2val:0xffffbfffffffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xdfff000200120800, 0xffffbfffffffffff, x30, x1, 624, x2)

inst_56:
// rs1_h0_val == 1024, rs2_val == -6148914691236517206
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x800000c000c0400;  op2val:0xaaaaaaaaaaaaaaaa
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x800000c000c0400, 0xaaaaaaaaaaaaaaaa, x30, x1, 640, x2)

inst_57:
// rs1_h0_val == 4, rs2_val == -17
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7000b00050004;  op2val:0xffffffffffffffef
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfff7000b00050004, 0xffffffffffffffef, x30, x1, 656, x2)

inst_58:
// rs1_h0_val == 2, rs2_val == -9223372036854775808, rs1_h3_val == 0
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000b00200002;  op2val:0x8000000000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x00000b00200002, 0x8000000000000000, x30, x1, 672, x2)

inst_59:
// rs1_h0_val == 0, rs2_val == 274877906944
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0020000b0000;  op2val:0x4000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xf7ff0020000b0000, 0x4000000000, x30, x1, 688, x2)

inst_60:
// rs2_val == -2049, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x800002000020200;  op2val:0xfffffffffffff7ff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x800002000020200, 0xfffffffffffff7ff, x30, x1, 704, x2)

inst_61:
// rs2_val == -1025, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x40040000004ff7f;  op2val:0xfffffffffffffbff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x40040000004ff7f, 0xfffffffffffffbff, x30, x1, 720, x2)

inst_62:
// rs2_val == -513, rs1_h2_val == 61439
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xefffefff000d0003;  op2val:0xfffffffffffffdff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xefffefff000d0003, 0xfffffffffffffdff, x30, x1, 736, x2)

inst_63:
// rs2_val == -257, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffef0013;  op2val:0xfffffffffffffeff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x200000fffef0013, 0xfffffffffffffeff, x30, x1, 752, x2)

inst_64:
// rs2_val == -129, rs1_h3_val == 128
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x80002080000003;  op2val:0xffffffffffffff7f
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x80002080000003, 0xffffffffffffff7f, x30, x1, 768, x2)

inst_65:
// rs2_val == -65, rs1_h2_val == 65279
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x09feff00070001;  op2val:0xffffffffffffffbf
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x09feff00070001, 0xffffffffffffffbf, x30, x1, 784, x2)

inst_66:
// rs2_val == -33, rs1_h1_val == 65471, rs1_h0_val == 65533
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0a0009ffbffffd;  op2val:0xffffffffffffffdf
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x0a0009ffbffffd, 0xffffffffffffffdf, x30, x1, 800, x2)

inst_67:
// rs2_val == -9, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xffff001000060013;  op2val:0xfffffffffffffff7
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xffff001000060013, 0xfffffffffffffff7, x30, x1, 816, x2)

inst_68:
// rs2_val == -5, rs1_h1_val == 61439
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x090001efff0001;  op2val:0xfffffffffffffffb
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x090001efff0001, 0xfffffffffffffffb, x30, x1, 832, x2)

inst_69:
// rs2_val == -3, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000007dfff0400;  op2val:0xfffffffffffffffd
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x40000007dfff0400, 0xfffffffffffffffd, x30, x1, 848, x2)

inst_70:
// rs2_val == -2, rs1_h3_val == 32767
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0003ffff0001;  op2val:0xfffffffffffffffe
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x7fff0003ffff0001, 0xfffffffffffffffe, x30, x1, 864, x2)

inst_71:
// rs2_val == 4611686018427387904, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0d000e04000040;  op2val:0x4000000000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x0d000e04000040, 0x4000000000000000, x30, x1, 880, x2)

inst_72:
// rs2_val == 1152921504606846976, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffbfffbf0100;  op2val:0x1000000000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x7fffffbfffbf0100, 0x1000000000000000, x30, x1, 896, x2)

inst_73:
// rs2_val == 576460752303423488, rs1_h3_val == 65023, rs1_h2_val == 32767
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdff7fff000e8000;  op2val:0x800000000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfdff7fff000e8000, 0x800000000000000, x30, x1, 912, x2)

inst_74:
// rs2_val == 288230376151711744, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0dfeff00070010;  op2val:0x400000000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x0dfeff00070010, 0x400000000000000, x30, x1, 928, x2)

inst_75:
// rs2_val == 144115188075855872, rs1_h3_val == 43690
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa040000030009;  op2val:0x200000000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xaaaa040000030009, 0x200000000000000, x30, x1, 944, x2)

inst_76:
// rs2_val == 72057594037927936, rs1_h0_val == 65519
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa08000004ffef;  op2val:0x100000000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xaaaa08000004ffef, 0x100000000000000, x30, x1, 960, x2)

inst_77:
// rs2_val == 36028797018963968, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x80fdff0800dfff;  op2val:0x80000000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x80fdff0800dfff, 0x80000000000000, x30, x1, 976, x2)

inst_78:
// rs2_val == 18014398509481984, rs1_h0_val == 65527
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0012000dfff7;  op2val:0x40000000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfbff0012000dfff7, 0x40000000000000, x30, x1, 992, x2)

inst_79:
// rs2_val == 9007199254740992, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0400fffb000c;  op2val:0x20000000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xf7ff0400fffb000c, 0x20000000000000, x30, x1, 1008, x2)

inst_80:
// rs2_val == 4503599627370496, rs1_h2_val == 8192
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x012000fffeffbf;  op2val:0x10000000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x012000fffeffbf, 0x10000000000000, x30, x1, 1024, x2)

inst_81:
// rs2_val == 2251799813685248, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0f0200000b0800;  op2val:0x8000000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x0f0200000b0800, 0x8000000000000, x30, x1, 1040, x2)

inst_82:
// rs2_val == 1125899906842624, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0e000f0003000f;  op2val:0x4000000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x0e000f0003000f, 0x4000000000000, x30, x1, 1056, x2)

inst_83:
// rs2_val == 562949953421312, rs1_h2_val == 65531
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0efffb000a0013;  op2val:0x2000000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x0efffb000a0013, 0x2000000000000, x30, x1, 1072, x2)

inst_84:
// rs2_val == 281474976710656, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000effef0011;  op2val:0x1000000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xaaaa000effef0011, 0x1000000000000, x30, x1, 1088, x2)

inst_85:
// rs2_val == 140737488355328, rs1_h1_val == 63487
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x800000f7ff0040;  op2val:0x800000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x800000f7ff0040, 0x800000000000, x30, x1, 1104, x2)

inst_86:
// rs2_val == 70368744177664, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x08fffffdfffeff;  op2val:0x400000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x08fffffdfffeff, 0x400000000000, x30, x1, 1120, x2)

inst_87:
// rs2_val == 35184372088832, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff70080efffaaaa;  op2val:0x200000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfff70080efffaaaa, 0x200000000000, x30, x1, 1136, x2)

inst_88:
// rs2_val == 17592186044416, rs1_h3_val == 49151, rs1_h1_val == 4096
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xbfff00071000000c;  op2val:0x100000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xbfff00071000000c, 0x100000000000, x30, x1, 1152, x2)

inst_89:
// rs2_val == 8796093022208, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0c000900110020;  op2val:0x80000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x0c000900110020, 0x80000000000, x30, x1, 1168, x2)

inst_90:
// rs2_val == 1, rs1_h0_val == 65503
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x060200bfffffdf;  op2val:0x1
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x060200bfffffdf, 0x1, x30, x1, 1184, x2)

inst_91:
// rs1_h3_val == 65407, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xff7f080010000020;  op2val:0xfffffffffffffff8
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xff7f080010000020, 0xfffffffffffffff8, x30, x1, 1200, x2)

inst_92:
// rs1_h3_val == 65519, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xffef00060003000e;  op2val:0xfffffffeffffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xffef00060003000e, 0xfffffffeffffffff, x30, x1, 1216, x2)

inst_93:
// rs1_h3_val == 65531, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000e00020010;  op2val:0x3
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfffb000e00020010, 0x3, x30, x1, 1232, x2)

inst_94:
// rs1_h3_val == 32768, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x80000800ff7f1000;  op2val:0xfffffff7ffffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x80000800ff7f1000, 0xfffffff7ffffffff, x30, x1, 1248, x2)

inst_95:
// rs1_h3_val == 8192, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000a000bfffe;  op2val:0x4000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x2000000a000bfffe, 0x4000000000, x30, x1, 1264, x2)

inst_96:
// rs1_h3_val == 256, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x100efff0006feff;  op2val:0xffffffffffffdfff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x100efff0006feff, 0xffffffffffffdfff, x30, x1, 1280, x2)

inst_97:
// rs2_val == 32, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0bff7f000f0009;  op2val:0x20
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x0bff7f000f0009, 0x20, x30, x1, 1296, x2)

inst_98:
// rs1_h3_val == 64, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x400200ffffbfff;  op2val:0x20
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x400200ffffbfff, 0x20, x30, x1, 1312, x2)

inst_99:
// rs1_h3_val == 2, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x02000e00040009;  op2val:0x4000000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x02000e00040009, 0x4000000000000, x30, x1, 1328, x2)

inst_100:
// rs2_val == 128, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0e000afbffdfff;  op2val:0x80
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x0e000afbffdfff, 0x80, x30, x1, 1344, x2)

inst_101:
// rs2_val == 2, rs1_h1_val == 65279
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x080012fefff7ff;  op2val:0x2
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x080012fefff7ff, 0x2, x30, x1, 1360, x2)

inst_102:
// rs1_h2_val == 57343, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x05dffffdffdfff;  op2val:0xffffffdfffffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x05dffffdffdfff, 0xffffffdfffffffff, x30, x1, 1376, x2)

inst_103:
// rs1_h2_val == 65503, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x10ffdf00120005;  op2val:0xefffffffffffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x10ffdf00120005, 0xefffffffffffffff, x30, x1, 1392, x2)

inst_104:
// rs2_val == 16, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x02dfff00090040;  op2val:0x10
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x02dfff00090040, 0x10, x30, x1, 1408, x2)

inst_105:
// rs1_h2_val == 65534, rs2_val == 524288
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x40fffe10000020;  op2val:0x80000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x40fffe10000020, 0x80000, x30, x1, 1424, x2)

inst_106:
// rs2_val == 512, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x01010001000007;  op2val:0x200
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x01010001000007, 0x200, x30, x1, 1440, x2)

inst_107:
// rs1_h2_val == 4096, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffe10000004fff7;  op2val:0xfffffeffffffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfffe10000004fff7, 0xfffffeffffffffff, x30, x1, 1456, x2)

inst_108:
// rs1_h1_val == 21845, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x07000a55550007;  op2val:0xffffffdfffffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x07000a55550007, 0xffffffdfffffffff, x30, x1, 1472, x2)

inst_109:
// rs2_val == 4398046511104, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x060200fffe0001;  op2val:0x40000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x060200fffe0001, 0x40000000000, x30, x1, 1488, x2)

inst_110:
// rs2_val == 2199023255552, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x8000001204000200;  op2val:0x20000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x8000001204000200, 0x20000000000, x30, x1, 1504, x2)

inst_111:
// rs1_h1_val == 65527, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x55554000fff70013;  op2val:0xffffffff7fffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x55554000fff70013, 0xffffffff7fffffff, x30, x1, 1520, x2)

inst_112:
// rs2_val == 1099511627776, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x08000800077fff;  op2val:0x10000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x08000800077fff, 0x10000000000, x30, x1, 1536, x2)

inst_113:
// rs2_val == 549755813888, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffd0020aaaa;  op2val:0x8000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x4000fffd0020aaaa, 0x8000000000, x30, x1, 1552, x2)

inst_114:
// rs1_h1_val == 65533, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x800004fffd0000;  op2val:0xffefffffffffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x800004fffd0000, 0xffefffffffffffff, x30, x1, 1568, x2)

inst_115:
// rs2_val == 137438953472, rs1_h0_val == 21845
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffb001000035555;  op2val:0x2000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfffb001000035555, 0x2000000000, x30, x1, 1584, x2)

inst_116:
// rs2_val == 68719476736, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0005fffbff7f;  op2val:0x1000000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xdfff0005fffbff7f, 0x1000000000, x30, x1, 1600, x2)

inst_117:
// rs1_h1_val == 8192, rs2_val == 16384, rs1_h0_val == 64511
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x11000c2000fbff;  op2val:0x4000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x11000c2000fbff, 0x4000, x30, x1, 1616, x2)

inst_118:
// rs2_val == 34359738368, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0800fbff0008;  op2val:0x800000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xbfff0800fbff0008, 0x800000000, x30, x1, 1632, x2)

inst_119:
// rs2_val == 17179869184, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffbaaaa0020000e;  op2val:0x400000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfffbaaaa0020000e, 0x400000000, x30, x1, 1648, x2)

inst_120:
// rs2_val == 4294967296, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0004fdff000d;  op2val:0x100000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfffe0004fdff000d, 0x100000000, x30, x1, 1664, x2)

inst_121:
// rs2_val == 2147483648, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x09000600004000;  op2val:0x80000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x09000600004000, 0x80000000, x30, x1, 1680, x2)

inst_122:
// rs2_val == 1073741824, rs1_h0_val == 65023
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0e000f0000fdff;  op2val:0x40000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x0e000f0000fdff, 0x40000000, x30, x1, 1696, x2)

inst_123:
// rs2_val == 536870912, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000000f0004ffef;  op2val:0x20000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x4000000f0004ffef, 0x20000000, x30, x1, 1712, x2)

inst_124:
// rs2_val == 268435456, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0012fbfffeff;  op2val:0x10000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfffe0012fbfffeff, 0x10000000, x30, x1, 1728, x2)

inst_125:
// rs2_val == 134217728, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x800ffef7fff0013;  op2val:0x8000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x800ffef7fff0013, 0x8000000, x30, x1, 1744, x2)

inst_126:
// rs1_h1_val == 16, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdff000e0010ffdf;  op2val:0x8000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfdff000e0010ffdf, 0x8000000, x30, x1, 1760, x2)

inst_127:
// rs2_val == 67108864, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x06fff7000b000b;  op2val:0x4000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x06fff7000b000b, 0x4000000, x30, x1, 1776, x2)

inst_128:
// rs2_val == 33554432, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x80000007ffefaaaa;  op2val:0x2000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x80000007ffefaaaa, 0x2000000, x30, x1, 1792, x2)

inst_129:
// rs2_val == 16777216, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x20dfff1000bfff;  op2val:0x1000000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x20dfff1000bfff, 0x1000000, x30, x1, 1808, x2)

inst_130:
// rs2_val == 8388608, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x11000d0012aaaa;  op2val:0x800000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x11000d0012aaaa, 0x800000, x30, x1, 1824, x2)

inst_131:
// rs2_val == 4194304, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0001fffd0400;  op2val:0x400000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfeff0001fffd0400, 0x400000, x30, x1, 1840, x2)

inst_132:
// rs2_val == 2097152, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffd02008000fffe;  op2val:0x200000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfffd02008000fffe, 0x200000, x30, x1, 1856, x2)

inst_133:
// rs2_val == 1048576, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffef00060009;  op2val:0x100000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfffdffef00060009, 0x100000, x30, x1, 1872, x2)

inst_134:
// rs2_val == 262144, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x12010000010000;  op2val:0x40000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x12010000010000, 0x40000, x30, x1, 1888, x2)

inst_135:
// rs2_val == 131072, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000fff7f7ffdfff;  op2val:0x20000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x2000fff7f7ffdfff, 0x20000, x30, x1, 1904, x2)

inst_136:
// rs2_val == 65536, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x400fff700030010;  op2val:0x10000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x400fff700030010, 0x10000, x30, x1, 1920, x2)

inst_137:
// rs2_val == 32768, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000074000f7ff;  op2val:0x8000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x40000074000f7ff, 0x8000, x30, x1, 1936, x2)

inst_138:
// rs2_val == 8192, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xffeffdff00800013;  op2val:0x2000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xffeffdff00800013, 0x2000, x30, x1, 1952, x2)

inst_139:
// rs2_val == 4096, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x030006efff2000;  op2val:0x1000
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x030006efff2000, 0x1000, x30, x1, 1968, x2)

inst_140:
// rs2_val == 2048, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0afffd00130003;  op2val:0x800
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x0afffd00130003, 0x800, x30, x1, 1984, x2)

inst_141:
// rs2_val == 1024, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x040400aaaa0007;  op2val:0x400
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x040400aaaa0007, 0x400, x30, x1, 2000, x2)

inst_142:
// rs2_val == 256, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0004000a000f;  op2val:0x100
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0xfbff0004000a000f, 0x100, x30, x1, 2016, x2)

inst_143:
// rs2_val == 64, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x07ffff00000012;  op2val:0x40
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x07ffff00000012, 0x40, x30, x1, 2032, x2)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_144:
// rs2_val == 8, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0f000dbfff1000;  op2val:0x8
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x0f000dbfff1000, 0x8, x30, x1, 0, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_145:
// rs2_val == 4, 
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x070003ffef0400;  op2val:0x4
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x070003ffef0400, 0x4, x30, x1, 0, x2)

inst_146:
// rs2_val == -4611686018427387905, rs1_h1_val == 64511, rs1_h2_val == 64511, rs1_h3_val == 16, rs1_h0_val == 32768
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x10fbfffbff8000;  op2val:0xbfffffffffffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x10fbfffbff8000, 0xbfffffffffffffff, x30, x1, 16, x2)

inst_147:
// rs2_val == -2305843009213693953, rs1_h1_val == 1024, rs1_h2_val == 63487
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x0ef7ff0400000e;  op2val:0xdfffffffffffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x0ef7ff0400000e, 0xdfffffffffffffff, x30, x1, 32, x2)

inst_148:
// rs2_val == -68719476737, rs1_h2_val == 32, rs1_h1_val == 512, rs1_h0_val == 65407
// opcode: kslra16.u ; op1:x30; op2:x29; dest:x31; op1val:0x1300200200ff7f;  op2val:0xffffffefffffffff
TEST_PKRR_OP(kslra16.u, x31, x30, x29, 0x0000000000000000, 0x1300200200ff7f, 0xffffffefffffffff, x30, x1, 48, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 8*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
