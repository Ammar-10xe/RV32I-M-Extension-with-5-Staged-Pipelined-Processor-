
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kslra8.u instruction of the RISC-V RV64PZicsr extension for the kslra8.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kslra8.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x13,signature_x13_1)

inst_0:
// rs1 == rd != rs2, rs1==x15, rs2==x27, rd==x15, rs2_val == 6148914691236517205, rs1_b3_val == 2, rs1_b4_val == 0, rs1_b2_val == 0, rs1_b0_val == 8, rs1_b6_val == 251
// opcode: kslra8.u ; op1:x15; op2:x27; dest:x15; op1val:0xdfb090002000a08;  op2val:0x5555555555555555
TEST_PKRR_OP(kslra8.u, x15, x15, x27, 0x0000000000000000, 0xdfb090002000a08, 0x5555555555555555, x15, x13, 0, x17)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x26, rs2==x7, rd==x19, rs2_val == 9223372036854775807, rs1_b7_val == 247, rs1_b5_val == 223, rs1_b6_val == 170, rs1_b2_val == 255, rs1_b4_val == 170
// opcode: kslra8.u ; op1:x26; op2:x7; dest:x19; op1val:0xf7aadfaa05ff070b;  op2val:0x7fffffffffffffff
TEST_PKRR_OP(kslra8.u, x19, x26, x7, 0x0000000000000000, 0xf7aadfaa05ff070b, 0x7fffffffffffffff, x26, x13, 16, x17)

inst_2:
// rs1 == rs2 != rd, rs1==x5, rs2==x5, rd==x22, rs2_val == -4611686018427387905, rs1_b1_val == 254, rs1_b7_val == 127, rs1_b6_val == 1, rs1_b5_val == 170, rs1_b0_val == 32
// opcode: kslra8.u ; op1:x5; op2:x5; dest:x22; op1val:0x7f01aa130a13fe20;  op2val:0xbfffffffffffffff
TEST_PKRR_OP(kslra8.u, x22, x5, x5, 0x0000000000000000, 0x7f01aa130a13fe20, 0xbfffffffffffffff, x5, x13, 32, x17)

inst_3:
// rs1 == rs2 == rd, rs1==x25, rs2==x25, rd==x25, rs2_val == -2305843009213693953, rs1_b6_val == 64, rs1_b4_val == 251
// opcode: kslra8.u ; op1:x25; op2:x25; dest:x25; op1val:0x54011fb0f050309;  op2val:0xdfffffffffffffff
TEST_PKRR_OP(kslra8.u, x25, x25, x25, 0x0000000000000000, 0x54011fb0f050309, 0xdfffffffffffffff, x25, x13, 48, x17)

inst_4:
// rs2 == rd != rs1, rs1==x21, rs2==x23, rd==x23, rs2_val == -1152921504606846977, rs1_b2_val == 127, rs1_b6_val == 0, rs1_b7_val == 253, rs1_b5_val == 128, rs1_b3_val == 16
// opcode: kslra8.u ; op1:x21; op2:x23; dest:x23; op1val:0xfd008006107f060b;  op2val:0xefffffffffffffff
TEST_PKRR_OP(kslra8.u, x23, x21, x23, 0x0000000000000000, 0xfd008006107f060b, 0xefffffffffffffff, x21, x13, 64, x17)

inst_5:
// rs1==x7, rs2==x6, rd==x14, rs2_val == -576460752303423489, rs1_b4_val == 253, rs1_b5_val == 254, rs1_b7_val == 255, rs1_b2_val == 2, rs1_b1_val == 223
// opcode: kslra8.u ; op1:x7; op2:x6; dest:x14; op1val:0xff03fefd0502df11;  op2val:0xf7ffffffffffffff
TEST_PKRR_OP(kslra8.u, x14, x7, x6, 0x0000000000000000, 0xff03fefd0502df11, 0xf7ffffffffffffff, x7, x13, 80, x17)

inst_6:
// rs1==x23, rs2==x26, rd==x0, rs2_val == -288230376151711745, rs1_b4_val == 223, rs1_b7_val == 251, rs1_b2_val == 253, rs1_b6_val == 247, rs1_b3_val == 8
// opcode: kslra8.u ; op1:x23; op2:x26; dest:x0; op1val:0xfbf705df08fd0312;  op2val:0xfbffffffffffffff
TEST_PKRR_OP(kslra8.u, x0, x23, x26, 0x0000000000000000, 0xfbf705df08fd0312, 0xfbffffffffffffff, x23, x13, 96, x17)

inst_7:
// rs1==x8, rs2==x21, rd==x26, rs2_val == -144115188075855873, rs1_b4_val == 239, rs1_b2_val == 247, rs1_b7_val == 4, rs1_b0_val == 4, rs1_b6_val == 128
// opcode: kslra8.u ; op1:x8; op2:x21; dest:x26; op1val:0x480aaef03f70b04;  op2val:0xfdffffffffffffff
TEST_PKRR_OP(kslra8.u, x26, x8, x21, 0x0000000000000000, 0x480aaef03f70b04, 0xfdffffffffffffff, x8, x13, 112, x17)

inst_8:
// rs1==x9, rs2==x10, rd==x4, rs2_val == -72057594037927937, rs1_b1_val == 255, rs1_b0_val == 0, rs1_b7_val == 128
// opcode: kslra8.u ; op1:x9; op2:x10; dest:x4; op1val:0x800603df1003ff00;  op2val:0xfeffffffffffffff
TEST_PKRR_OP(kslra8.u, x4, x9, x10, 0x0000000000000000, 0x800603df1003ff00, 0xfeffffffffffffff, x9, x13, 128, x17)

inst_9:
// rs1==x11, rs2==x3, rd==x30, rs2_val == -36028797018963969, rs1_b1_val == 2, rs1_b2_val == 8, rs1_b3_val == 32
// opcode: kslra8.u ; op1:x11; op2:x3; dest:x30; op1val:0x507fe0320080204;  op2val:0xff7fffffffffffff
TEST_PKRR_OP(kslra8.u, x30, x11, x3, 0x0000000000000000, 0x507fe0320080204, 0xff7fffffffffffff, x11, x13, 144, x17)

inst_10:
// rs1==x12, rs2==x2, rd==x28, rs2_val == -18014398509481985, rs1_b2_val == 223, rs1_b3_val == 239, rs1_b5_val == 8
// opcode: kslra8.u ; op1:x12; op2:x2; dest:x28; op1val:0xf800812efdf1203;  op2val:0xffbfffffffffffff
TEST_PKRR_OP(kslra8.u, x28, x12, x2, 0x0000000000000000, 0xf800812efdf1203, 0xffbfffffffffffff, x12, x13, 160, x17)

inst_11:
// rs1==x2, rs2==x14, rd==x3, rs2_val == -9007199254740993, rs1_b0_val == 223, rs1_b1_val == 32, rs1_b7_val == 8
// opcode: kslra8.u ; op1:x2; op2:x14; dest:x3; op1val:0x8010f07130f20df;  op2val:0xffdfffffffffffff
TEST_PKRR_OP(kslra8.u, x3, x2, x14, 0x0000000000000000, 0x8010f07130f20df, 0xffdfffffffffffff, x2, x13, 176, x17)

inst_12:
// rs1==x27, rs2==x30, rd==x2, rs2_val == -4503599627370497, rs1_b5_val == 255, rs1_b3_val == 191
// opcode: kslra8.u ; op1:x27; op2:x30; dest:x2; op1val:0x7f01ff11bf0e0f20;  op2val:0xffefffffffffffff
TEST_PKRR_OP(kslra8.u, x2, x27, x30, 0x0000000000000000, 0x7f01ff11bf0e0f20, 0xffefffffffffffff, x27, x13, 192, x17)

inst_13:
// rs1==x1, rs2==x20, rd==x5, rs2_val == -2251799813685249, rs1_b2_val == 239, rs1_b1_val == 127, rs1_b5_val == 32
// opcode: kslra8.u ; op1:x1; op2:x20; dest:x5; op1val:0xb0720aa10ef7f00;  op2val:0xfff7ffffffffffff
TEST_PKRR_OP(kslra8.u, x5, x1, x20, 0x0000000000000000, 0xb0720aa10ef7f00, 0xfff7ffffffffffff, x1, x13, 208, x17)

inst_14:
// rs1==x29, rs2==x9, rd==x16, rs2_val == -1125899906842625, rs1_b5_val == 247, rs1_b2_val == 32, rs1_b7_val == 1, rs1_b3_val == 127, rs1_b0_val == 16, rs1_b1_val == 247
// opcode: kslra8.u ; op1:x29; op2:x9; dest:x16; op1val:0x10ff7097f20f710;  op2val:0xfffbffffffffffff
TEST_PKRR_OP(kslra8.u, x16, x29, x9, 0x0000000000000000, 0x10ff7097f20f710, 0xfffbffffffffffff, x29, x13, 224, x17)

inst_15:
// rs1==x17, rs2==x4, rd==x9, rs2_val == -562949953421313, rs1_b5_val == 253, rs1_b7_val == 223, rs1_b4_val == 127
// opcode: kslra8.u ; op1:x17; op2:x4; dest:x9; op1val:0xdf03fd7f1003020a;  op2val:0xfffdffffffffffff
TEST_PKRR_OP(kslra8.u, x9, x17, x4, 0x0000000000000000, 0xdf03fd7f1003020a, 0xfffdffffffffffff, x17, x13, 240, x5)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_16:
// rs1==x31, rs2==x29, rd==x10, rs2_val == -281474976710657, rs1_b7_val == 170, rs1_b3_val == 255, rs1_b0_val == 251
// opcode: kslra8.u ; op1:x31; op2:x29; dest:x10; op1val:0xaa0bffdfff060afb;  op2val:0xfffeffffffffffff
TEST_PKRR_OP(kslra8.u, x10, x31, x29, 0x0000000000000000, 0xaa0bffdfff060afb, 0xfffeffffffffffff, x31, x2, 0, x5)

inst_17:
// rs1==x4, rs2==x17, rd==x8, rs2_val == -140737488355329, rs1_b1_val == 16, rs1_b4_val == 254, rs1_b2_val == 85, rs1_b0_val == 239, rs1_b3_val == 251
// opcode: kslra8.u ; op1:x4; op2:x17; dest:x8; op1val:0x41305fefb5510ef;  op2val:0xffff7fffffffffff
TEST_PKRR_OP(kslra8.u, x8, x4, x17, 0x0000000000000000, 0x41305fefb5510ef, 0xffff7fffffffffff, x4, x2, 16, x5)

inst_18:
// rs1==x16, rs2==x8, rd==x24, rs2_val == -70368744177665, rs1_b2_val == 16, rs1_b4_val == 8, rs1_b6_val == 255
// opcode: kslra8.u ; op1:x16; op2:x8; dest:x24; op1val:0xbff11080c102007;  op2val:0xffffbfffffffffff
TEST_PKRR_OP(kslra8.u, x24, x16, x8, 0x0000000000000000, 0xbff11080c102007, 0xffffbfffffffffff, x16, x2, 32, x5)

inst_19:
// rs1==x13, rs2==x11, rd==x17, rs2_val == -35184372088833, rs1_b4_val == 191, rs1_b6_val == 2, rs1_b7_val == 64, rs1_b0_val == 253, rs1_b3_val == 253, rs1_b5_val == 1
// opcode: kslra8.u ; op1:x13; op2:x11; dest:x17; op1val:0x400201bffd0503fd;  op2val:0xffffdfffffffffff
TEST_PKRR_OP(kslra8.u, x17, x13, x11, 0x0000000000000000, 0x400201bffd0503fd, 0xffffdfffffffffff, x13, x2, 48, x5)

inst_20:
// rs1==x6, rs2==x0, rd==x1, rs2_val == -17592186044417, rs1_b4_val == 16, rs1_b3_val == 1
// opcode: kslra8.u ; op1:x6; op2:x0; dest:x1; op1val:0x40f201001000d08;  op2val:0x0
TEST_PKRR_OP(kslra8.u, x1, x6, x0, 0x0000000000000000, 0x40f201001000d08, 0x0, x6, x2, 64, x5)

inst_21:
// rs1==x3, rs2==x13, rd==x21, rs2_val == -8796093022209, rs1_b3_val == 4, rs1_b7_val == 85, rs1_b1_val == 0, rs1_b4_val == 255
// opcode: kslra8.u ; op1:x3; op2:x13; dest:x21; op1val:0x55f7f7ff04020006;  op2val:0xfffff7ffffffffff
TEST_PKRR_OP(kslra8.u, x21, x3, x13, 0x0000000000000000, 0x55f7f7ff04020006, 0xfffff7ffffffffff, x3, x2, 80, x5)

inst_22:
// rs1==x24, rs2==x16, rd==x29, rs2_val == -4398046511105, 
// opcode: kslra8.u ; op1:x24; op2:x16; dest:x29; op1val:0x8f7fd09fb060b04;  op2val:0xfffffbffffffffff
TEST_PKRR_OP(kslra8.u, x29, x24, x16, 0x0000000000000000, 0x8f7fd09fb060b04, 0xfffffbffffffffff, x24, x2, 96, x5)

inst_23:
// rs1==x20, rs2==x19, rd==x13, rs2_val == -2199023255553, rs1_b6_val == 191
// opcode: kslra8.u ; op1:x20; op2:x19; dest:x13; op1val:0xf7bf03ff050613fd;  op2val:0xfffffdffffffffff
TEST_PKRR_OP(kslra8.u, x13, x20, x19, 0x0000000000000000, 0xf7bf03ff050613fd, 0xfffffdffffffffff, x20, x2, 112, x5)

inst_24:
// rs1==x19, rs2==x12, rd==x20, rs2_val == -1099511627777, rs1_b5_val == 2, rs1_b0_val == 127
// opcode: kslra8.u ; op1:x19; op2:x12; dest:x20; op1val:0xd1202090907027f;  op2val:0xfffffeffffffffff
TEST_PKRR_OP(kslra8.u, x20, x19, x12, 0x0000000000000000, 0xd1202090907027f, 0xfffffeffffffffff, x19, x2, 128, x5)

inst_25:
// rs1==x14, rs2==x31, rd==x11, rs2_val == -549755813889, 
// opcode: kslra8.u ; op1:x14; op2:x31; dest:x11; op1val:0xf701df0a0f0afffb;  op2val:0xffffff7fffffffff
TEST_PKRR_OP(kslra8.u, x11, x14, x31, 0x0000000000000000, 0xf701df0a0f0afffb, 0xffffff7fffffffff, x14, x2, 144, x5)

inst_26:
// rs1==x18, rs2==x1, rd==x12, rs2_val == -274877906945, rs1_b7_val == 239, rs1_b2_val == 254, rs1_b5_val == 64, rs1_b3_val == 247, rs1_b0_val == 64, rs1_b1_val == 170
// opcode: kslra8.u ; op1:x18; op2:x1; dest:x12; op1val:0xefaa400af7feaa40;  op2val:0xffffffbfffffffff
TEST_PKRR_OP(kslra8.u, x12, x18, x1, 0x0000000000000000, 0xefaa400af7feaa40, 0xffffffbfffffffff, x18, x2, 160, x5)

inst_27:
// rs1==x10, rs2==x18, rd==x31, rs2_val == -137438953473, rs1_b1_val == 8, rs1_b4_val == 32, rs1_b2_val == 128, rs1_b6_val == 85, rs1_b5_val == 4
// opcode: kslra8.u ; op1:x10; op2:x18; dest:x31; op1val:0x6550420fd800813;  op2val:0xffffffdfffffffff
TEST_PKRR_OP(kslra8.u, x31, x10, x18, 0x0000000000000000, 0x6550420fd800813, 0xffffffdfffffffff, x10, x2, 176, x5)

inst_28:
// rs1==x30, rs2==x24, rd==x6, rs2_val == -68719476737, rs1_b7_val == 191, rs1_b5_val == 239
// opcode: kslra8.u ; op1:x30; op2:x24; dest:x6; op1val:0xbf09ef1109fd7ffd;  op2val:0xffffffefffffffff
TEST_PKRR_OP(kslra8.u, x6, x30, x24, 0x0000000000000000, 0xbf09ef1109fd7ffd, 0xffffffefffffffff, x30, x2, 192, x5)

inst_29:
// rs1==x28, rs2==x22, rd==x27, rs2_val == -34359738369, rs1_b2_val == 251
// opcode: kslra8.u ; op1:x28; op2:x22; dest:x27; op1val:0x7f0f800ffdfb0c0c;  op2val:0xfffffff7ffffffff
TEST_PKRR_OP(kslra8.u, x27, x28, x22, 0x0000000000000000, 0x7f0f800ffdfb0c0c, 0xfffffff7ffffffff, x28, x2, 208, x5)

inst_30:
// rs1==x0, rs2==x28, rd==x7, rs2_val == -17179869185, rs1_b3_val == 0
// opcode: kslra8.u ; op1:x0; op2:x28; dest:x7; op1val:0xfd0c0bdf00f70d0a;  op2val:0xfffffffbffffffff
TEST_PKRR_OP(kslra8.u, x7, x0, x28, 0x0000000000000000, 0xfd0c0bdf00f70d0a, 0xfffffffbffffffff, x0, x2, 224, x5)

inst_31:
// rs1==x22, rs2==x15, rd==x18, rs2_val == -8589934593, rs1_b1_val == 251, rs1_b6_val == 254
// opcode: kslra8.u ; op1:x22; op2:x15; dest:x18; op1val:0x7fe0713070dfbfd;  op2val:0xfffffffdffffffff
TEST_PKRR_OP(kslra8.u, x18, x22, x15, 0x0000000000000000, 0x7fe0713070dfbfd, 0xfffffffdffffffff, x22, x2, 240, x5)

inst_32:
// rs2_val == -4294967297, rs1_b1_val == 85
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x9fefd0905805510;  op2val:0xfffffffeffffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x9fefd0905805510, 0xfffffffeffffffff, x30, x2, 256, x1)

inst_33:
// rs2_val == -2147483649, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x50c0a0c090e0f13;  op2val:0xffffffff7fffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x50c0a0c090e0f13, 0xffffffff7fffffff, x30, x2, 272, x1)

inst_34:
// rs2_val == -1073741825, rs1_b5_val == 127, rs1_b4_val == 247, rs1_b0_val == 85
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x13027ff77f031055;  op2val:0xffffffffbfffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x13027ff77f031055, 0xffffffffbfffffff, x30, x2, 288, x1)

inst_35:
// rs2_val == -536870913, rs1_b6_val == 239, rs1_b5_val == 0, rs1_b4_val == 128
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xbfef008009030d07;  op2val:0xffffffffdfffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xbfef008009030d07, 0xffffffffdfffffff, x30, x2, 304, x1)

inst_36:
// rs2_val == -268435457, rs1_b1_val == 253
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xafb40fe0b05fd0f;  op2val:0xffffffffefffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xafb40fe0b05fd0f, 0xffffffffefffffff, x30, x2, 320, x1)

inst_37:
// rs2_val == -134217729, rs1_b1_val == 4, rs1_b0_val == 255
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x50540df0c0704ff;  op2val:0xfffffffff7ffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x50540df0c0704ff, 0xfffffffff7ffffff, x30, x2, 336, x1)

inst_38:
// rs2_val == -67108865, rs1_b6_val == 253, rs1_b5_val == 16
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xdffd100c0712dfef;  op2val:0xfffffffffbffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xdffd100c0712dfef, 0xfffffffffbffffff, x30, x2, 352, x1)

inst_39:
// rs2_val == -33554433, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xf110c0f0e0aaa0b;  op2val:0xfffffffffdffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xf110c0f0e0aaa0b, 0xfffffffffdffffff, x30, x2, 368, x1)

inst_40:
// rs2_val == -16777217, rs1_b3_val == 254
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfb11aaf7fe091205;  op2val:0xfffffffffeffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xfb11aaf7fe091205, 0xfffffffffeffffff, x30, x2, 384, x1)

inst_41:
// rs2_val == -8388609, rs1_b1_val == 239, rs1_b0_val == 1
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x40720000fdfef01;  op2val:0xffffffffff7fffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x40720000fdfef01, 0xffffffffff7fffff, x30, x2, 400, x1)

inst_42:
// rs2_val == -4194305, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xaa037f0502fb5503;  op2val:0xffffffffffbfffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xaa037f0502fb5503, 0xffffffffffbfffff, x30, x2, 416, x1)

inst_43:
// rs1_b1_val == 128, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xff0bef10050980ef;  op2val:0xfffffffffffffffc
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xff0bef10050980ef, 0xfffffffffffffffc, x30, x2, 432, x1)

inst_44:
// rs1_b1_val == 64, rs2_val == 4294967296
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xf1108bf0b0d400e;  op2val:0x100000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xf1108bf0b0d400e, 0x100000000, x30, x2, 448, x1)

inst_45:
// rs1_b1_val == 1, rs1_b4_val == 64
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x110e104002fd0113;  op2val:0xffffdfffffffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x110e104002fd0113, 0xffffdfffffffffff, x30, x2, 464, x1)

inst_46:
// rs1_b0_val == 170, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdefef12070a7faa;  op2val:0xfffffffff7ffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xfdefef12070a7faa, 0xfffffffff7ffffff, x30, x2, 480, x1)

inst_47:
// rs1_b0_val == 191, rs1_b5_val == 191, rs2_val == 2251799813685248
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x30bbffd08ef0abf;  op2val:0x8000000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x30bbffd08ef0abf, 0x8000000000000, x30, x2, 496, x1)

inst_48:
// rs1_b0_val == 247, rs1_b6_val == 16, rs1_b7_val == 254, rs1_b1_val == 191, rs1_b4_val == 1
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfe100701f709bff7;  op2val:0x7
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xfe100701f709bff7, 0x7, x30, x2, 512, x1)

inst_49:
// rs1_b0_val == 254, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x7f80044004ff00fe;  op2val:0xfffffffeffffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x7f80044004ff00fe, 0xfffffffeffffffff, x30, x2, 528, x1)

inst_50:
// rs1_b0_val == 128, rs2_val == 34359738368
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x70faaf7110dff80;  op2val:0x800000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x70faaf7110dff80, 0x800000000, x30, x2, 544, x1)

inst_51:
// rs1_b0_val == 2, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xb40004010fbff02;  op2val:0xfffffffffffffff8
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xb40004010fbff02, 0xfffffffffffffff8, x30, x2, 560, x1)

inst_52:
// rs2_val == -6148914691236517206, rs1_b6_val == 32, rs1_b5_val == 85, rs1_b3_val == 64
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x42055ff4008f707;  op2val:0xaaaaaaaaaaaaaaaa
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x42055ff4008f707, 0xaaaaaaaaaaaaaaaa, x30, x2, 576, x1)

inst_53:
// rs2_val == -2097153, rs1_b6_val == 8
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x120813f7fe0002df;  op2val:0xffffffffffdfffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x120813f7fe0002df, 0xffffffffffdfffff, x30, x2, 592, x1)

inst_54:
// rs2_val == -1048577, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x120808fd0455ffff;  op2val:0xffffffffffefffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x120808fd0455ffff, 0xffffffffffefffff, x30, x2, 608, x1)

inst_55:
// rs2_val == -524289, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x80fe0f2008200402;  op2val:0xfffffffffff7ffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x80fe0f2008200402, 0xfffffffffff7ffff, x30, x2, 624, x1)

inst_56:
// rs2_val == -262145, rs1_b3_val == 85
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbf71309550f0c7f;  op2val:0xfffffffffffbffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xfbf71309550f0c7f, 0xfffffffffffbffff, x30, x2, 640, x1)

inst_57:
// rs2_val == -131073, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x11200fdfbf7fdf20;  op2val:0xfffffffffffdffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x11200fdfbf7fdf20, 0xfffffffffffdffff, x30, x2, 656, x1)

inst_58:
// rs2_val == -65537, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff114007df0a0f;  op2val:0xfffffffffffeffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xf7ff114007df0a0f, 0xfffffffffffeffff, x30, x2, 672, x1)

inst_59:
// rs2_val == -32769, rs1_b3_val == 170
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xd0108feaafb05aa;  op2val:0xffffffffffff7fff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xd0108feaafb05aa, 0xffffffffffff7fff, x30, x2, 688, x1)

inst_60:
// rs2_val == -16385, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xf708ef07ffef0206;  op2val:0xffffffffffffbfff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xf708ef07ffef0206, 0xffffffffffffbfff, x30, x2, 704, x1)

inst_61:
// rs2_val == -8193, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x5050b0d10fe10fb;  op2val:0xffffffffffffdfff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x5050b0d10fe10fb, 0xffffffffffffdfff, x30, x2, 720, x1)

inst_62:
// rs2_val == -4097, rs1_b6_val == 223
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x9df0fdf0d070b0c;  op2val:0xffffffffffffefff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x9df0fdf0d070b0c, 0xffffffffffffefff, x30, x2, 736, x1)

inst_63:
// rs2_val == -2049, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xafd101200f70800;  op2val:0xfffffffffffff7ff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xafd101200f70800, 0xfffffffffffff7ff, x30, x2, 752, x1)

inst_64:
// rs2_val == -1025, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xbf11fd80fe00110e;  op2val:0xfffffffffffffbff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xbf11fd80fe00110e, 0xfffffffffffffbff, x30, x2, 768, x1)

inst_65:
// rs2_val == -513, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xeef010b130c0212;  op2val:0xfffffffffffffdff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xeef010b130c0212, 0xfffffffffffffdff, x30, x2, 784, x1)

inst_66:
// rs2_val == -257, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x855127f050bdf7f;  op2val:0xfffffffffffffeff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x855127f050bdf7f, 0xfffffffffffffeff, x30, x2, 800, x1)

inst_67:
// rs2_val == -129, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x940df0e02067faa;  op2val:0xffffffffffffff7f
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x940df0e02067faa, 0xffffffffffffff7f, x30, x2, 816, x1)

inst_68:
// rs2_val == -65, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x40407f10050212ff;  op2val:0xffffffffffffffbf
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x40407f10050212ff, 0xffffffffffffffbf, x30, x2, 832, x1)

inst_69:
// rs2_val == -33, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xe12fd050d0f12df;  op2val:0xffffffffffffffdf
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xe12fd050d0f12df, 0xffffffffffffffdf, x30, x2, 848, x1)

inst_70:
// rs2_val == -17, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x7f05feaafef7550d;  op2val:0xffffffffffffffef
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x7f05feaafef7550d, 0xffffffffffffffef, x30, x2, 864, x1)

inst_71:
// rs2_val == -9, rs1_b7_val == 32
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x2009f7ff201012fb;  op2val:0xfffffffffffffff7
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x2009f7ff201012fb, 0xfffffffffffffff7, x30, x2, 880, x1)

inst_72:
// rs2_val == -5, rs1_b3_val == 223
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x40060f0cdf0b1210;  op2val:0xfffffffffffffffb
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x40060f0cdf0b1210, 0xfffffffffffffffb, x30, x2, 896, x1)

inst_73:
// rs2_val == -3, rs1_b2_val == 170
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfb000412aaaa0d0f;  op2val:0xfffffffffffffffd
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xfb000412aaaa0d0f, 0xfffffffffffffffd, x30, x2, 912, x1)

inst_74:
// rs2_val == -2, rs1_b7_val == 2
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x20f7f05010713fe;  op2val:0xfffffffffffffffe
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x20f7f05010713fe, 0xfffffffffffffffe, x30, x2, 928, x1)

inst_75:
// rs2_val == -9223372036854775808, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x6df05fd0610fd12;  op2val:0x8000000000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x6df05fd0610fd12, 0x8000000000000000, x30, x2, 944, x1)

inst_76:
// rs2_val == 4611686018427387904, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xf0180df01ef080a;  op2val:0x4000000000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xf0180df01ef080a, 0x4000000000000000, x30, x2, 960, x1)

inst_77:
// rs2_val == 2305843009213693952, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x20e55efef0e7f0e;  op2val:0x2000000000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x20e55efef0e7f0e, 0x2000000000000000, x30, x2, 976, x1)

inst_78:
// rs2_val == 1152921504606846976, rs1_b7_val == 0
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x02ff06110c1312;  op2val:0x1000000000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x02ff06110c1312, 0x1000000000000000, x30, x2, 992, x1)

inst_79:
// rs2_val == 576460752303423488, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x1313120a09dffb12;  op2val:0x800000000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x1313120a09dffb12, 0x800000000000000, x30, x2, 1008, x1)

inst_80:
// rs2_val == 288230376151711744, rs1_b6_val == 127
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xdf7f0313aa200411;  op2val:0x400000000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xdf7f0313aa200411, 0x400000000000000, x30, x2, 1024, x1)

inst_81:
// rs2_val == 144115188075855872, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x3df04fe021300df;  op2val:0x200000000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x3df04fe021300df, 0x200000000000000, x30, x2, 1040, x1)

inst_82:
// rs2_val == 72057594037927936, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x50902df09fb1055;  op2val:0x100000000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x50902df09fb1055, 0x100000000000000, x30, x2, 1056, x1)

inst_83:
// rs2_val == 36028797018963968, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x132010aabfffaafd;  op2val:0x80000000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x132010aabfffaafd, 0x80000000000000, x30, x2, 1072, x1)

inst_84:
// rs2_val == 1, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xd080cbfdf12ef55;  op2val:0x1
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xd080cbfdf12ef55, 0x1, x30, x2, 1088, x1)

inst_85:
// rs2_val == 256, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x90d03120b0f01df;  op2val:0x100
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x90d03120b0f01df, 0x100, x30, x2, 1104, x1)

inst_86:
// rs1_b7_val == 16, rs2_val == 2199023255552
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x1000ef11aa0b20bf;  op2val:0x20000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x1000ef11aa0b20bf, 0x20000000000, x30, x2, 1120, x1)

inst_87:
// rs1_b6_val == 4, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x20040708f709080f;  op2val:0xffffbfffffffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x20040708f709080f, 0xffffbfffffffffff, x30, x2, 1136, x1)

inst_88:
// rs2_val == 2048, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfd0c08100e02557f;  op2val:0x800
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xfd0c08100e02557f, 0x800, x30, x2, 1152, x1)

inst_89:
// rs2_val == 1024, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x701df8003110000;  op2val:0x400
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x701df8003110000, 0x400, x30, x2, 1168, x1)

inst_90:
// rs2_val == 2, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x47f0805fbf70408;  op2val:0x2
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x47f0805fbf70408, 0x2, x30, x2, 1184, x1)

inst_91:
// rs1_b5_val == 251, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfaafbdf0daa020c;  op2val:0x800
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xfaafbdf0daa020c, 0x800, x30, x2, 1200, x1)

inst_92:
// rs1_b4_val == 85, rs1_b3_val == 128
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x9071355800d5540;  op2val:0xffff7fffffffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x9071355800d5540, 0xffff7fffffffffff, x30, x2, 1216, x1)

inst_93:
// rs2_val == 18014398509481984, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x813f7fe090c0e00;  op2val:0x40000000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x813f7fe090c0e00, 0x40000000000000, x30, x2, 1232, x1)

inst_94:
// rs2_val == 9007199254740992, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x4001ff090adf0510;  op2val:0x20000000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x4001ff090adf0510, 0x20000000000000, x30, x2, 1248, x1)

inst_95:
// rs2_val == 4503599627370496, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x1103aa80050cfd05;  op2val:0x10000000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x1103aa80050cfd05, 0x10000000000000, x30, x2, 1264, x1)

inst_96:
// rs1_b4_val == 4, rs1_b2_val == 64
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x50355040440fd12;  op2val:0xefffffffffffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x50355040440fd12, 0xefffffffffffffff, x30, x2, 1280, x1)

inst_97:
// rs1_b4_val == 2, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xf202002ff55df55;  op2val:0x400000000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xf202002ff55df55, 0x400000000000000, x30, x2, 1296, x1)

inst_98:
// rs2_val == 1125899906842624, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x305fd0e0d0c05fb;  op2val:0x4000000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x305fd0e0d0c05fb, 0x4000000000000, x30, x2, 1312, x1)

inst_99:
// rs2_val == 562949953421312, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x2f700bffef711df;  op2val:0x2000000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x2f700bffef711df, 0x2000000000000, x30, x2, 1328, x1)

inst_100:
// rs2_val == 281474976710656, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xb0201027f40feef;  op2val:0x1000000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xb0201027f40feef, 0x1000000000000, x30, x2, 1344, x1)

inst_101:
// rs2_val == 140737488355328, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbf080cfb072004;  op2val:0x800000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xffbf080cfb072004, 0x800000000000, x30, x2, 1360, x1)

inst_102:
// rs2_val == 70368744177664, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xdf03bf0900f7040f;  op2val:0x400000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xdf03bf0900f7040f, 0x400000000000, x30, x2, 1376, x1)

inst_103:
// rs2_val == 35184372088832, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xbf100b1102ff0c80;  op2val:0x200000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xbf100b1102ff0c80, 0x200000000000, x30, x2, 1392, x1)

inst_104:
// rs2_val == 17592186044416, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x12408002800a7faa;  op2val:0x100000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x12408002800a7faa, 0x100000000000, x30, x2, 1408, x1)

inst_105:
// rs2_val == 8796093022208, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x20404aa02aa0402;  op2val:0x80000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x20404aa02aa0402, 0x80000000000, x30, x2, 1424, x1)

inst_106:
// rs2_val == 4398046511104, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x80050501ef111204;  op2val:0x40000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x80050501ef111204, 0x40000000000, x30, x2, 1440, x1)

inst_107:
// rs2_val == 1099511627776, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x8009800e07134005;  op2val:0x10000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x8009800e07134005, 0x10000000000, x30, x2, 1456, x1)

inst_108:
// rs2_val == 549755813888, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xdf0412050c0e0e0d;  op2val:0x8000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xdf0412050c0e0e0d, 0x8000000000, x30, x2, 1472, x1)

inst_109:
// rs2_val == 274877906944, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x200f0ddf0a20f713;  op2val:0x4000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x200f0ddf0a20f713, 0x4000000000, x30, x2, 1488, x1)

inst_110:
// rs2_val == 137438953472, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xb1320bf0def04bf;  op2val:0x2000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xb1320bf0def04bf, 0x2000000000, x30, x2, 1504, x1)

inst_111:
// rs2_val == 68719476736, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7200ffb800511;  op2val:0x1000000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xfff7200ffb800511, 0x1000000000, x30, x2, 1520, x1)

inst_112:
// rs2_val == 17179869184, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x4005020e02fb0220;  op2val:0x400000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x4005020e02fb0220, 0x400000000, x30, x2, 1536, x1)

inst_113:
// rs2_val == 8589934592, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xff101006fe11bf0d;  op2val:0x200000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xff101006fe11bf0d, 0x200000000, x30, x2, 1552, x1)

inst_114:
// rs2_val == 2147483648, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xff55aaaa0a0a0e12;  op2val:0x80000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xff55aaaa0a0a0e12, 0x80000000, x30, x2, 1568, x1)

inst_115:
// rs2_val == 1073741824, rs1_b2_val == 4
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xedf000c7f040910;  op2val:0x40000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xedf000c7f040910, 0x40000000, x30, x2, 1584, x1)

inst_116:
// rs2_val == 536870912, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7080ffb1200df11;  op2val:0x20000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xf7080ffb1200df11, 0x20000000, x30, x2, 1600, x1)

inst_117:
// rs2_val == 268435456, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xdf800208080a1012;  op2val:0x10000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xdf800208080a1012, 0x10000000, x30, x2, 1616, x1)

inst_118:
// rs2_val == 134217728, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xa05070c80070207;  op2val:0x8000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xa05070c80070207, 0x8000000, x30, x2, 1632, x1)

inst_119:
// rs2_val == 67108864, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x67f2003eff7f70a;  op2val:0x4000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x67f2003eff7f70a, 0x4000000, x30, x2, 1648, x1)

inst_120:
// rs2_val == 33554432, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x4012010d0f20fb0a;  op2val:0x2000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x4012010d0f20fb0a, 0x2000000, x30, x2, 1664, x1)

inst_121:
// rs1_b2_val == 191, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x7f0c130b06bf0505;  op2val:0x0
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x7f0c130b06bf0505, 0x0, x30, x2, 1680, x1)

inst_122:
// rs2_val == 16777216, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x10fbff040b0b097f;  op2val:0x1000000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x10fbff040b0b097f, 0x1000000, x30, x2, 1696, x1)

inst_123:
// rs2_val == 8388608, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xdf0f0dfd550ebf02;  op2val:0x800000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xdf0f0dfd550ebf02, 0x800000, x30, x2, 1712, x1)

inst_124:
// rs2_val == 4194304, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xeff706effd807f40;  op2val:0x400000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xeff706effd807f40, 0x400000, x30, x2, 1728, x1)

inst_125:
// rs2_val == 2097152, rs1_b2_val == 1
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x5f70e0f01010b03;  op2val:0x200000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x5f70e0f01010b03, 0x200000, x30, x2, 1744, x1)

inst_126:
// rs2_val == 1048576, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x210bf011113fefb;  op2val:0x100000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x210bf011113fefb, 0x100000, x30, x2, 1760, x1)

inst_127:
// rs2_val == 524288, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x80602fefb40fe02;  op2val:0x80000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x80602fefb40fe02, 0x80000, x30, x2, 1776, x1)

inst_128:
// rs2_val == 262144, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x60ffd200420bf0e;  op2val:0x40000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x60ffd200420bf0e, 0x40000, x30, x2, 1792, x1)

inst_129:
// rs2_val == 131072, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfb20010df70c090b;  op2val:0x20000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xfb20010df70c090b, 0x20000, x30, x2, 1808, x1)

inst_130:
// rs2_val == 65536, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x380df0c20800f13;  op2val:0x10000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x380df0c20800f13, 0x10000, x30, x2, 1824, x1)

inst_131:
// rs2_val == 32768, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x10b110540057fff;  op2val:0x8000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x10b110540057fff, 0x8000, x30, x2, 1840, x1)

inst_132:
// rs2_val == 16384, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfb12aa10aa120913;  op2val:0x4000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xfb12aa10aa120913, 0x4000, x30, x2, 1856, x1)

inst_133:
// rs2_val == 8192, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xc0adf8001110609;  op2val:0x2000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xc0adf8001110609, 0x2000, x30, x2, 1872, x1)

inst_134:
// rs2_val == 4096, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x2df8007aa1280ef;  op2val:0x1000
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x2df8007aa1280ef, 0x1000, x30, x2, 1888, x1)

inst_135:
// rs2_val == 512, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x80ef7f0d03effe06;  op2val:0x200
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x80ef7f0d03effe06, 0x200, x30, x2, 1904, x1)

inst_136:
// rs2_val == 128, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x11550b40100c8012;  op2val:0x80
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x11550b40100c8012, 0x80, x30, x2, 1920, x1)

inst_137:
// rs2_val == 64, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x60f0dfe010f1206;  op2val:0x40
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x60f0dfe010f1206, 0x40, x30, x2, 1936, x1)

inst_138:
// rs2_val == 32, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x13df400480110e0b;  op2val:0x20
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x13df400480110e0b, 0x20, x30, x2, 1952, x1)

inst_139:
// rs2_val == 16, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfe080704efbf0d01;  op2val:0x10
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xfe080704efbf0d01, 0x10, x30, x2, 1968, x1)

inst_140:
// rs2_val == 8, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xd400109fd0c0855;  op2val:0x8
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xd400109fd0c0855, 0x8, x30, x2, 1984, x1)

inst_141:
// rs2_val == 4, 
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xf74006ef10ff0e06;  op2val:0x4
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xf74006ef10ff0e06, 0x4, x30, x2, 2000, x1)

inst_142:
// rs2_val == -4611686018427387905, rs1_b1_val == 254, rs1_b7_val == 127, rs1_b6_val == 1, rs1_b5_val == 170, rs1_b0_val == 32
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x7f01aa130a13fe20;  op2val:0xbfffffffffffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x7f01aa130a13fe20, 0xbfffffffffffffff, x30, x2, 2016, x1)

inst_143:
// rs2_val == -2305843009213693953, rs1_b6_val == 64, rs1_b4_val == 251
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x54011fb0f050309;  op2val:0xdfffffffffffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x54011fb0f050309, 0xdfffffffffffffff, x30, x2, 2032, x1)
RVTEST_SIGBASE(x2,signature_x2_1)

inst_144:
// rs2_val == -288230376151711745, rs1_b4_val == 223, rs1_b7_val == 251, rs1_b2_val == 253, rs1_b6_val == 247, rs1_b3_val == 8
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbf705df08fd0312;  op2val:0xfbffffffffffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xfbf705df08fd0312, 0xfbffffffffffffff, x30, x2, 0, x1)
RVTEST_SIGBASE(x2,signature_x2_2)

inst_145:
// rs2_val == -17592186044417, rs1_b4_val == 16, rs1_b3_val == 1
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x40f201001000d08;  op2val:0xffffefffffffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0x40f201001000d08, 0xffffefffffffffff, x30, x2, 0, x1)

inst_146:
// rs2_val == -17179869185, rs1_b3_val == 0
// opcode: kslra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfd0c0bdf00f70d0a;  op2val:0xfffffffbffffffff
TEST_PKRR_OP(kslra8.u, x31, x30, x29, 0x0000000000000000, 0xfd0c0bdf00f70d0a, 0xfffffffbffffffff, x30, x2, 16, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x2_2:
    .fill 4*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
