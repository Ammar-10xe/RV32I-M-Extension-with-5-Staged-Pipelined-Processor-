
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smulx8 instruction of the RISC-V RV64PZicsr extension for the smulx8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smulx8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rd != rs2, rs1==x10, rs2==x31, rd==x10, rs1_b0_val == -128, rs1_b7_val != rs2_b7_val, rs1_b5_val == -2, rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b6_val != rs2_b6_val, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b5_val != rs2_b5_val, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b4_val != rs2_b4_val, rs1_b4_val > 0 and rs2_b4_val < 0, rs1_b3_val != rs2_b3_val, rs2_b2_val == -17, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b3_val == 85, rs1_b1_val != rs2_b1_val, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val < 0, rs2_b7_val == 16, rs2_b0_val == -33, rs1_b1_val == 85, rs2_b6_val == 64, rs2_b5_val == -33, rs1_b6_val == -65, rs2_b4_val == -5
// opcode: smulx8 ; op1:x10; op2:x31; dest:x10; op1val:0x3fbffe0955f85580;  op2val:0x1040dffb09ef07df
TEST_P64_PNN_OP(smulx8, x10, $rd_hi, x10, x31, 0x0000000000000000, $correctval_hi, 0x3fbffe0955f85580, 0x1040dffb09ef07df, x3, 0, x5)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x30, rs2==x2, rd==x24, rs1_b7_val == rs2_b7_val, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b0_val == 16, rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b1_val == -17, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b2_val == -86, rs1_b6_val == 2, rs1_b1_val == 32, rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b3_val > 0 and rs2_b3_val < 0
// opcode: smulx8 ; op1:x30; op2:x2; dest:x24; op1val:0xf802090903062010;  op2val:0xf8070703f9aaeffa
TEST_P64_PNN_OP(smulx8, x24, $rd_hi, x30, x2, 0x0000000000000000, $correctval_hi, 0xf802090903062010, 0xf8070703f9aaeffa, x3, 16, x5)

inst_2:
// rs1 == rs2 != rd, rs1==x1, rs2==x1, rd==x6, rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b7_val == 2, rs1_b0_val == -17, rs2_b3_val == -17, rs1_b5_val == 16, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b3_val == -17, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b1_val == -33, rs2_b1_val == -3, rs2_b6_val == 8, rs1_b4_val < 0 and rs2_b4_val > 0, rs1_b7_val == -17, rs1_b2_val == -5, rs2_b4_val == 64, rs1_b3_val == rs2_b3_val, rs1_b3_val < 0 and rs2_b3_val < 0
// opcode: smulx8 ; op1:x1; op2:x1; dest:x6; op1val:0xeff810fceffbdfef;  op2val:0x02080540ef07fd07
TEST_P64_PNN_OP(smulx8, x6, $rd_hi, x1, x1, 0x0000000000000000, $correctval_hi, 0xeff810fceffbdfef, 0x02080540ef07fd07, x3, 32, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x20, rs2==x20, rd==x20, rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b3_val == 127, rs1_b5_val == 64, rs1_b6_val == rs2_b6_val, rs2_b4_val == -86, rs2_b3_val == 2, rs2_b6_val == 4, rs1_b6_val == 4, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b1_val == 0, rs1_b7_val == 32
// opcode: smulx8 ; op1:x20; op2:x20; dest:x20; op1val:0x200440f97ffb00ef;  op2val:0xfc0409aa02c0f907
TEST_P64_PNN_OP(smulx8, x20, $rd_hi, x20, x20, 0x0000000000000000, $correctval_hi, 0x200440f97ffb00ef, 0xfc0409aa02c0f907, x3, 48, x5)

inst_4:
// rs2 == rd != rs1, rs1==x29, rs2==x12, rd==x12, rs1_b6_val < 0 and rs2_b6_val < 0, rs1_b2_val == rs2_b2_val, rs2_b0_val == -9, rs2_b5_val == 32, rs2_b6_val == -33, rs1_b3_val == -2, rs1_b5_val < 0 and rs2_b5_val > 0, rs2_b1_val == -5, rs1_b1_val == -9, rs2_b4_val == -128, rs2_b7_val == -5, rs1_b5_val == -86
// opcode: smulx8 ; op1:x29; op2:x12; dest:x12; op1val:0x06f8aa3ffefcf7f6;  op2val:0xfbdf2080f8fcfbf7
TEST_P64_PNN_OP(smulx8, x12, $rd_hi, x29, x12, 0x0000000000000000, $correctval_hi, 0x06f8aa3ffefcf7f6, 0xfbdf2080f8fcfbf7, x3, 64, x5)

inst_5:
// rs1==x11, rs2==x9, rd==x8, rs1_b6_val > 0 and rs2_b6_val < 0, rs1_b2_val == 0, rs2_b7_val == -128, rs1_b3_val == -3, rs1_b0_val == rs2_b0_val, rs1_b0_val == 1, rs2_b3_val == 16, rs2_b0_val == 1, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b5_val > 0 and rs2_b5_val < 0, rs1_b7_val == 85, rs1_b5_val == 127, rs1_b6_val == 1, rs2_b2_val == 127, rs1_b3_val < 0 and rs2_b3_val > 0
// opcode: smulx8 ; op1:x11; op2:x9; dest:x8; op1val:0x55017f3ffd000701;  op2val:0x80f9f8f6107ffa01
TEST_P64_PNN_OP(smulx8, x8, $rd_hi, x11, x9, 0x0000000000000000, $correctval_hi, 0x55017f3ffd000701, 0x80f9f8f6107ffa01, x3, 80, x5)

inst_6:
// rs1==x6, rs2==x28, rd==x14, rs1_b5_val == rs2_b5_val, rs1_b7_val == 4, rs1_b0_val == 85, rs1_b1_val == rs2_b1_val, rs2_b6_val == -65, rs1_b3_val == 64, rs2_b1_val == -33, rs2_b3_val == 4, rs1_b4_val == 1
// opcode: smulx8 ; op1:x6; op2:x28; dest:x14; op1val:0x043f3f014000df55;  op2val:0xc0bf3ff6047fdff6
TEST_P64_PNN_OP(smulx8, x14, $rd_hi, x6, x28, 0x0000000000000000, $correctval_hi, 0x043f3f014000df55, 0xc0bf3ff6047fdff6, x3, 96, x5)

inst_7:
// rs1==x25, rs2==x22, rd==x4, rs1_b4_val == rs2_b4_val, rs2_b3_val == -86, rs2_b0_val == -3, rs2_b6_val == 85, rs1_b5_val == 32, rs1_b2_val == -128, rs2_b1_val == -2, rs1_b4_val == -128, rs2_b5_val == -86, rs1_b7_val == 16, rs2_b2_val == -2, rs2_b7_val == 8
// opcode: smulx8 ; op1:x25; op2:x22; dest:x4; op1val:0x10072080fd80f703;  op2val:0x0855aa80aafefefd
TEST_P64_PNN_OP(smulx8, x4, $rd_hi, x25, x22, 0x0000000000000000, $correctval_hi, 0x10072080fd80f703, 0x0855aa80aafefefd, x3, 112, x5)

inst_8:
// rs1==x12, rs2==x15, rd==x26, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b2_val == 16, rs2_b3_val == -33, rs1_b5_val == 0, rs1_b6_val == -2, rs1_b0_val == -1, rs1_b4_val == 64, rs2_b7_val == -3, rs2_b4_val == 8, rs2_b5_val == -9
// opcode: smulx8 ; op1:x12; op2:x15; dest:x26; op1val:0xeffe0040fd1009ff;  op2val:0xfdf9f708df0909fa
TEST_P64_PNN_OP(smulx8, x26, $rd_hi, x12, x15, 0x0000000000000000, $correctval_hi, 0xeffe0040fd1009ff, 0xfdf9f708df0909fa, x3, 128, x5)

inst_9:
// rs1==x7, rs2==x23, rd==x30, rs1_b1_val < 0 and rs2_b1_val > 0, rs2_b0_val == -65, rs1_b7_val == 0, rs1_b0_val == -2, rs1_b5_val == 1, rs1_b1_val == -5, rs2_b7_val == -86, rs2_b6_val == 16, rs2_b4_val == -9, rs2_b1_val == 64, rs1_b3_val == 2, rs2_b5_val == -65, rs1_b2_val == -2
// opcode: smulx8 ; op1:x7; op2:x23; dest:x30; op1val:0x00fc013f02fefbfe;  op2val:0xaa10bff7f60640bf
TEST_P64_PNN_OP(smulx8, x30, $rd_hi, x7, x23, 0x0000000000000000, $correctval_hi, 0x00fc013f02fefbfe, 0xaa10bff7f60640bf, x3, 144, x5)

inst_10:
// rs1==x27, rs2==x21, rd==x18, rs2_b7_val == 85, rs1_b5_val == -3, rs2_b6_val == 127, rs1_b6_val == -33, rs2_b3_val == 32, rs2_b4_val == 85, rs2_b0_val == 0, rs1_b7_val == -3
// opcode: smulx8 ; op1:x27; op2:x21; dest:x18; op1val:0xfddffd01c0fb5505;  op2val:0x557f0555203fc000
TEST_P64_PNN_OP(smulx8, x18, $rd_hi, x27, x21, 0x0000000000000000, $correctval_hi, 0xfddffd01c0fb5505, 0x557f0555203fc000, x3, 160, x5)

inst_11:
// rs1==x28, rs2==x26, rd==x2, rs2_b7_val == 127, rs1_b3_val == -86, rs2_b2_val == 4, rs1_b7_val == -1, rs2_b0_val == -2, rs2_b6_val == -17, rs2_b5_val == 127, rs1_b4_val == -65, rs2_b1_val == 0, rs2_b4_val == 2
// opcode: smulx8 ; op1:x28; op2:x26; dest:x2; op1val:0xff0720bfaaf90706;  op2val:0x7fef7f02f60400fe
TEST_P64_PNN_OP(smulx8, x2, $rd_hi, x28, x26, 0x0000000000000000, $correctval_hi, 0xff0720bfaaf90706, 0x7fef7f02f60400fe, x3, 176, x5)

inst_12:
// rs1==x17, rs2==x10, rd==x16, rs2_b7_val == -65, rs1_b5_val == -5, rs1_b2_val == 64, rs2_b0_val == -17, rs1_b1_val == -86, rs2_b5_val == -1, rs2_b3_val == 8, rs1_b4_val == -3, rs2_b6_val == -1
// opcode: smulx8 ; op1:x17; op2:x10; dest:x16; op1val:0x03f9fbfd4040aac0;  op2val:0xbfffff3f0803efef
TEST_P64_PNN_OP(smulx8, x16, $rd_hi, x17, x10, 0x0000000000000000, $correctval_hi, 0x03f9fbfd4040aac0, 0xbfffff3f0803efef, x3, 192, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_13:
// rs1==x13, rs2==x16, rd==x22, rs2_b7_val == -33, rs1_b7_val == 1, rs1_b6_val == -17, rs2_b0_val == 2, rs1_b4_val == 16, rs1_b2_val == -3
// opcode: smulx8 ; op1:x13; op2:x16; dest:x22; op1val:0x01ef3f1002fddf3f;  op2val:0xdfefffc0083ff902
TEST_P64_PNN_OP(smulx8, x22, $rd_hi, x13, x16, 0x0000000000000000, $correctval_hi, 0x01ef3f1002fddf3f, 0xdfefffc0083ff902, x1, 0, x10)

inst_14:
// rs1==x3, rs2==x30, rd==x28, rs2_b7_val == -17, rs2_b3_val == 85, rs1_b5_val == -1, rs1_b7_val == -86, rs1_b1_val == 64, rs2_b1_val == 32, rs2_b4_val == -2, rs2_b2_val == -33, rs1_b4_val == 8, rs1_b0_val == 127
// opcode: smulx8 ; op1:x3; op2:x30; dest:x28; op1val:0xaa06ff0855fb407f;  op2val:0xefbfbffe55df20fa
TEST_P64_PNN_OP(smulx8, x28, $rd_hi, x3, x30, 0x0000000000000000, $correctval_hi, 0xaa06ff0855fb407f, 0xefbfbffe55df20fa, x1, 16, x10)

inst_15:
// rs1==x18, rs2==x17, rs2_b7_val == -9, rs2_b1_val == 1, rs2_b3_val == -128, rs2_b2_val == 0
// opcode: smulx8 ; op1:x18; op2:x17; dest:x21; op1val:0x03faf9f8f8c0c006;  op2val:0xf74020fc80000107
TEST_P64_PNN_OP(smulx8, x21, $rd_hi, x18, x17, 0x0000000000000000, $correctval_hi, 0x03faf9f8f8c0c006, 0xf74020fc80000107, x1, 32, x10)

inst_16:
// rs1==x16, rs2==x7, rs2_b7_val == -2, rs1_b4_val == -33, rs1_b3_val == -9, rs2_b0_val == 127
// opcode: smulx8 ; op1:x16; op2:x7; dest:x5; op1val:0xc007fadff7fc4009;  op2val:0xfe3fff023ff8037f
TEST_P64_PNN_OP(smulx8, x5, $rd_hi, x16, x7, 0x0000000000000000, $correctval_hi, 0xc007fadff7fc4009, 0xfe3fff023ff8037f, x1, 48, x10)

inst_17:
// rs1==x26, rs2==x8, rs2_b7_val == 64, rs2_b3_val == -5, rs2_b6_val == -2, rs1_b1_val == -17, rs2_b1_val == -128, rs2_b4_val == 0, rs2_b2_val == -128
// opcode: smulx8 ; op1:x26; op2:x8; dest:x21; op1val:0xfaf903010309effc;  op2val:0x40fef600fb808001
TEST_P64_PNN_OP(smulx8, x21, $rd_hi, x26, x8, 0x0000000000000000, $correctval_hi, 0xfaf903010309effc, 0x40fef600fb808001, x1, 64, x10)

inst_18:
// rs1==x22, rs2==x11, rs2_b7_val == 32, rs1_b3_val == -5, rs1_b2_val == -1, rs2_b2_val == 8
// opcode: smulx8 ; op1:x22; op2:x11; dest:x30; op1val:0xfdfcf9fcfbfffa10;  op2val:0x20ff0309aa08fdf9
TEST_P64_PNN_OP(smulx8, x30, $rd_hi, x22, x11, 0x0000000000000000, $correctval_hi, 0xfdfcf9fcfbfffa10, 0x20ff0309aa08fdf9, x1, 80, x10)

inst_19:
// rs1==x2, rs2==x19, rs2_b7_val == 4, rs2_b5_val == -128, rs1_b6_val == -128, rs1_b1_val == -3, rs2_b4_val == -17, rs2_b3_val == -1, rs2_b1_val == 16, rs1_b7_val == -5, rs1_b2_val == -33
// opcode: smulx8 ; op1:x2; op2:x19; dest:x7; op1val:0xfb8007fc55dffdfc;  op2val:0x04f680efff801003
TEST_P64_PNN_OP(smulx8, x7, $rd_hi, x2, x19, 0x0000000000000000, $correctval_hi, 0xfb8007fc55dffdfc, 0x04f680efff801003, x1, 96, x10)

inst_20:
// rs1==x31, rs2==x14, rs2_b7_val == 1, rs1_b2_val == 8, rs2_b6_val == -86, rs2_b1_val == 85, rs2_b3_val == 64, rs1_b0_val == 2, rs1_b1_val == 4
// opcode: smulx8 ; op1:x31; op2:x14; dest:x30; op1val:0xf8fafbfaf6080402;  op2val:0x01aa05fe400655fd
TEST_P64_PNN_OP(smulx8, x30, $rd_hi, x31, x14, 0x0000000000000000, $correctval_hi, 0xf8fafbfaf6080402, 0x01aa05fe400655fd, x1, 112, x10)

inst_21:
// rs1==x14, rs2==x18, rs2_b7_val == 0, rs2_b2_val == 16, rs2_b5_val == 0, rs1_b4_val == 0
// opcode: smulx8 ; op1:x14; op2:x18; dest:x28; op1val:0xffc001003ffd043f;  op2val:0x00fe00fc401040fd
TEST_P64_PNN_OP(smulx8, x28, $rd_hi, x14, x18, 0x0000000000000000, $correctval_hi, 0xffc001003ffd043f, 0x00fe00fc401040fd, x1, 128, x10)

inst_22:
// rs1==x19, rs2==x13, rs2_b7_val == -1, rs2_b0_val == 64, rs2_b5_val == 1, rs1_b5_val == -128
// opcode: smulx8 ; op1:x19; op2:x13; dest:x21; op1val:0x09df80dffddfef06;  op2val:0xffdf01ef4006fc40
TEST_P64_PNN_OP(smulx8, x21, $rd_hi, x19, x13, 0x0000000000000000, $correctval_hi, 0x09df80dffddfef06, 0xffdf01ef4006fc40, x1, 144, x10)

inst_23:
// rs1==x23, rs2==x27, rs2_b6_val == -9, rs2_b5_val == -3, rs1_b0_val == 8, rs2_b0_val == -1, rs1_b6_val == 64, rs1_b4_val == -17, rs1_b2_val == 85, rs1_b7_val == -9
// opcode: smulx8 ; op1:x23; op2:x27; dest:x4; op1val:0xf740f6eff855f708;  op2val:0x08f7fd5520f903ff
TEST_P64_PNN_OP(smulx8, x4, $rd_hi, x23, x27, 0x0000000000000000, $correctval_hi, 0xf740f6eff855f708, 0x08f7fd5520f903ff, x1, 160, x10)

inst_24:
// rs1==x5, rs2==x3, rs2_b6_val == -5, rs1_b7_val == 2, rs2_b1_val == -65, rs1_b3_val == -65
// opcode: smulx8 ; op1:x5; op2:x3; dest:x27; op1val:0x0204fd3fbf03f6fc;  op2val:0xdffb00554009bf01
TEST_P64_PNN_OP(smulx8, x27, $rd_hi, x5, x3, 0x0000000000000000, $correctval_hi, 0x0204fd3fbf03f6fc, 0xdffb00554009bf01, x1, 176, x10)

inst_25:
// rs1==x9, rs2==x24, rs2_b6_val == -3, rs1_b2_val == 2, rs2_b2_val == -1, rs2_b1_val == 127, rs1_b4_val == -5, rs2_b5_val == 85
// opcode: smulx8 ; op1:x9; op2:x24; dest:x22; op1val:0x2004fbfbfa02c005;  op2val:0xfafd55fc10ff7fef
TEST_P64_PNN_OP(smulx8, x22, $rd_hi, x9, x24, 0x0000000000000000, $correctval_hi, 0x2004fbfbfa02c005, 0xfafd55fc10ff7fef, x1, 192, x10)

inst_26:
// rs1==x0, rs2==x4, rs2_b6_val == -128, rs2_b3_val == -2
// opcode: smulx8 ; op1:x0; op2:x4; dest:x17; op1val:0xfa047f0802083f05;  op2val:0xfc800109fe10fefd
TEST_P64_PNN_OP(smulx8, x17, $rd_hi, x0, x4, 0x0000000000000000, $correctval_hi, 0xfa047f0802083f05, 0xfc800109fe10fefd, x1, 208, x10)

inst_27:
// rs1==x21, rs2==x0, rs1_b5_val == 8, rs1_b3_val == 0, rs2_b4_val == -3, rs2_b2_val == 85
// opcode: smulx8 ; op1:x21; op2:x0; dest:x16; op1val:0xf8bf0810000205fa;  op2val:0x04037ffd0655fa40
TEST_P64_PNN_OP(smulx8, x16, $rd_hi, x21, x0, 0x0000000000000000, $correctval_hi, 0xf8bf0810000205fa, 0x04037ffd0655fa40, x1, 224, x10)

inst_28:
// rs1==x4, rs2==x5, rs1_b5_val == 4, rs1_b0_val == -5, rs2_b3_val == -9
// opcode: smulx8 ; op1:x4; op2:x5; dest:x20; op1val:0xfafa043f7ffef9fb;  op2val:0x40c0bff6f7aa10f9
TEST_P64_PNN_OP(smulx8, x20, $rd_hi, x4, x5, 0x0000000000000000, $correctval_hi, 0xfafa043f7ffef9fb, 0x40c0bff6f7aa10f9, x1, 240, x10)

inst_29:
// rs1==x8, rs2==x6, rs1_b5_val == 2, rs2_b0_val == -128, rs1_b0_val == 0, rs1_b4_val == -2, rs1_b1_val == 1, rs2_b2_val == -3
// opcode: smulx8 ; op1:x8; op2:x6; dest:x28; op1val:0x05fe02fe00f60100;  op2val:0xff80bf3f05fd3f80
TEST_P64_PNN_OP(smulx8, x28, $rd_hi, x8, x6, 0x0000000000000000, $correctval_hi, 0x05fe02fe00f60100, 0xff80bf3f05fd3f80, x1, 256, x10)

inst_30:
// rs1==x15, rs2==x29, rs1_b4_val == -86, rs1_b3_val == 4, rs2_b4_val == 1, rs2_b1_val == 8
// opcode: smulx8 ; op1:x15; op2:x29; dest:x22; op1val:0xf7bf00aa04100506;  op2val:0xf7ff2001f80408f7
TEST_P64_PNN_OP(smulx8, x22, $rd_hi, x15, x29, 0x0000000000000000, $correctval_hi, 0xf7bf00aa04100506, 0xf7ff2001f80408f7, x1, 272, x10)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_31:
// rs1==x24, rs2==x25, rs1_b4_val == 85, rs2_b2_val == -9
// opcode: smulx8 ; op1:x24; op2:x25; dest:x16; op1val:0xf702c0557fdf05ff;  op2val:0x050709fdaaf755fd
TEST_P64_PNN_OP(smulx8, x16, $rd_hi, x24, x25, 0x0000000000000000, $correctval_hi, 0xf702c0557fdf05ff, 0x050709fdaaf755fd, x1, 0, x2)

inst_32:
// rs1_b4_val == 127, rs1_b0_val == 4, rs1_b1_val == -128, rs2_b3_val == 127
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x0702057ff8038004;  op2val:0xeff7dffe7f80fdf6
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0702057ff8038004, 0xeff7dffe7f80fdf6, x1, 16, x2)

inst_33:
// rs1_b4_val == -9, rs2_b4_val == 32, rs1_b7_val == -65
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf40f6f7fb405509;  op2val:0x03c0aa20067f7f3f
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbf40f6f7fb405509, 0x03c0aa20067f7f3f, x1, 32, x2)

inst_34:
// rs1_b4_val == 32, 
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x0909f8203f07fbf6;  op2val:0x8003f8fb037f20fe
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0909f8203f07fbf6, 0x8003f8fb037f20fe, x1, 48, x2)

inst_35:
// rs1_b4_val == 4, rs1_b2_val == 32, rs2_b0_val == 4, rs1_b3_val == -33, rs1_b0_val == 64
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfc060704df20fd40;  op2val:0x09ff06f7ef00f904
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfc060704df20fd40, 0x09ff06f7ef00f904, x1, 64, x2)

inst_36:
// rs1_b4_val == 2, rs2_b4_val == -1, rs2_b3_val == -3, rs1_b6_val == 16, rs1_b3_val == -128
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x091008028003807f;  op2val:0x0409dffffdef08fd
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x091008028003807f, 0x0409dffffdef08fd, x1, 80, x2)

inst_37:
// rs1_b4_val == -1, rs2_b3_val == 0
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfac03fff404000fb;  op2val:0xfd06068000df03fd
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfac03fff404000fb, 0xfd06068000df03fd, x1, 96, x2)

inst_38:
// rs1_b3_val == 32, rs1_b7_val == -33
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xdfc0050120f8f7ff;  op2val:0xaabff7f808f7bffc
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfc0050120f8f7ff, 0xaabff7f808f7bffc, x1, 112, x2)

inst_39:
// rs1_b3_val == 16, rs1_b0_val == -33, rs2_b5_val == 8, rs1_b1_val == -2, rs2_b4_val == 4, rs2_b0_val == -86
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xf6f8c0c010fcfedf;  op2val:0xf97f0804fb3f20aa
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf6f8c0c010fcfedf, 0xf97f0804fb3f20aa, x1, 128, x2)

inst_40:
// rs1_b3_val == 8, rs1_b0_val == 32, rs1_b6_val == 32
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa2001ff0802f720;  op2val:0xdffaf9fd1008fd05
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfa2001ff0802f720, 0xdffaf9fd1008fd05, x1, 144, x2)

inst_41:
// rs1_b3_val == 1, rs2_b1_val == 4, rs1_b2_val == -9
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xf9207f0001f740ff;  op2val:0xfefffd027f7f04fc
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf9207f0001f740ff, 0xfefffd027f7f04fc, x1, 160, x2)

inst_42:
// rs1_b3_val == -1, rs2_b0_val == 32
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf0580feff2080f8;  op2val:0xff0609f60605fd20
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdf0580feff2080f8, 0xff0609f60605fd20, x1, 176, x2)

inst_43:
// rs1_b2_val == -86, rs2_b1_val == -1, rs1_b5_val == -17
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa20ef8001aa0707;  op2val:0x3f0320fd08ffffef
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfa20ef8001aa0707, 0x3f0320fd08ffffef, x1, 192, x2)

inst_44:
// rs1_b2_val == 127, rs2_b2_val == 2
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfc103ffe207ffd01;  op2val:0xc006fc06040220c0
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfc103ffe207ffd01, 0xc006fc06040220c0, x1, 208, x2)

inst_45:
// rs2_b3_val == -65, rs1_b6_val == 127, rs2_b5_val == 4, rs2_b1_val == -86, rs2_b6_val == 0, rs2_b2_val == -65, rs1_b7_val == -2
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe7fc0bf0106aa7f;  op2val:0x0800043fbfbfaafe
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfe7fc0bf0106aa7f, 0x0800043fbfbfaafe, x1, 224, x2)

inst_46:
// rs1_b5_val == -9, rs2_b2_val == -5, rs2_b5_val == 16
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0eff7df09fd5509;  op2val:0x08f710f980fb55fc
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xc0eff7df09fd5509, 0x08f710f980fb55fc, x1, 240, x2)

inst_47:
// rs2_b3_val == 1, rs1_b2_val == 4
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xff01febff70400ef;  op2val:0xfd06075501fe40f9
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff01febff70400ef, 0xfd06075501fe40f9, x1, 256, x2)

inst_48:
// rs2_b2_val == 64, rs1_b0_val == -65
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x0440fe030308dfbf;  op2val:0x00fbfcf7fc402000
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0440fe030308dfbf, 0x00fbfcf7fc402000, x1, 272, x2)

inst_49:
// rs2_b2_val == 32, rs2_b5_val == 64
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xef07eff6f90507c0;  op2val:0xaafa40effd2080f8
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xef07eff6f90507c0, 0xaafa40effd2080f8, x1, 288, x2)

inst_50:
// rs2_b2_val == 1, rs1_b5_val == -65
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x207fbfc007aafafe;  op2val:0x4008f9fc08010407
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x207fbfc007aafafe, 0x4008f9fc08010407, x1, 304, x2)

inst_51:
// rs2_b1_val == -9, rs1_b6_val == -3
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x55fd0080075505fc;  op2val:0x05eff6fa00aaf700
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x55fd0080075505fc, 0x05eff6fa00aaf700, x1, 320, x2)

inst_52:
// rs1_b2_val == -65, rs1_b6_val == -1
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffb3faabf06fa;  op2val:0xfa3f033f55f9fc07
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdfffb3faabf06fa, 0xfa3f033f55f9fc07, x1, 336, x2)

inst_53:
// rs2_b1_val == 2, 
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x00ef0780557f3f3f;  op2val:0x20100303f98002c0
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00ef0780557f3f3f, 0x20100303f98002c0, x1, 352, x2)

inst_54:
// rs1_b2_val == -17, rs2_b6_val == 1
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x20f8ff01aaefc000;  op2val:0xdf0101fb2007f920
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x20f8ff01aaefc000, 0xdf0101fb2007f920, x1, 368, x2)

inst_55:
// rs2_b0_val == 85, 
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xaafcf806bf5504f9;  op2val:0x06f907021003f755
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaafcf806bf5504f9, 0x06f907021003f755, x1, 384, x2)

inst_56:
// rs2_b0_val == -5, rs2_b5_val == -2, rs1_b5_val == 85, rs1_b1_val == 16
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x05045510fff71001;  op2val:0x3ffbfe07f65502fb
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x05045510fff71001, 0x3ffbfe07f65502fb, x1, 400, x2)

inst_57:
// rs1_b2_val == 1, rs1_b7_val == 127
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x7ff955ff080120fa;  op2val:0x0110dff73f80f602
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7ff955ff080120fa, 0x0110dff73f80f602, x1, 416, x2)

inst_58:
// rs2_b0_val == 16, rs2_b4_val == 127
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xdfbff620dfc04000;  op2val:0xefeff77f4055fb10
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfbff620dfc04000, 0xefeff77f4055fb10, x1, 432, x2)

inst_59:
// rs1_b1_val == 127, rs1_b7_val == -128
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x8080f9f9f7207f40;  op2val:0xfc0720035503efff
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8080f9f9f7207f40, 0xfc0720035503efff, x1, 448, x2)

inst_60:
// rs2_b0_val == 8, rs1_b0_val == -9
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x3ff98055f8dff6f7;  op2val:0x03aa05c0fc035508
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3ff98055f8dff6f7, 0x03aa05c0fc035508, x1, 464, x2)

inst_61:
// rs1_b1_val == -65, 
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x80bf4001f9aabffa;  op2val:0x07ef0405fffa4005
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x80bf4001f9aabffa, 0x07ef0405fffa4005, x1, 480, x2)

inst_62:
// rs2_b6_val == 32, 
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf0920f7f9092005;  op2val:0xf6200306c00355bf
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdf0920f7f9092005, 0xf6200306c00355bf, x1, 496, x2)

inst_63:
// rs2_b6_val == 2, 
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f2055f7f7fd03df;  op2val:0x05023f3ffeff3f02
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7f2055f7f7fd03df, 0x05023f3ffeff3f02, x1, 512, x2)

inst_64:
// rs1_b1_val == 8, 
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbf8405507f80804;  op2val:0xfa050609043ffa01
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbf8405507f80804, 0xfa050609043ffa01, x1, 528, x2)

inst_65:
// rs1_b1_val == 2, rs1_b6_val == 8
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7081040090802fa;  op2val:0xfcff03048000f609
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7081040090802fa, 0xfcff03048000f609, x1, 544, x2)

inst_66:
// rs1_b7_val == 64, 
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x40fdf90806ef4040;  op2val:0x09c0090555bf5504
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x40fdf90806ef4040, 0x09c0090555bf5504, x1, 560, x2)

inst_67:
// rs1_b1_val == -1, rs2_b4_val == -33, rs1_b6_val == 85
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x0055fef7df20ffbf;  op2val:0x550800df3f07dffa
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0055fef7df20ffbf, 0x550800df3f07dffa, x1, 576, x2)

inst_68:
// rs2_b5_val == -5, rs2_b4_val == -65
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x0101fbfd20fb0909;  op2val:0x3ffefbbff74008df
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0101fbfd20fb0909, 0x3ffefbbff74008df, x1, 592, x2)

inst_69:
// rs1_b0_val == -3, 
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xff3f057ff9fdfafd;  op2val:0xaa4080f8f906093f
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff3f057ff9fdfafd, 0xaa4080f8f906093f, x1, 608, x2)

inst_70:
// rs1_b6_val == -86, rs2_b5_val == -17
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x80aa05fb08007fbf;  op2val:0x07efef093ff706fb
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x80aa05fb08007fbf, 0x07efef093ff706fb, x1, 624, x2)

inst_71:
// rs2_b5_val == 2, 
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x07f9400908f7aa02;  op2val:0x03fb0204050205bf
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x07f9400908f7aa02, 0x03fb0204050205bf, x1, 640, x2)

inst_72:
// rs1_b6_val == 0, 
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe00400101fffb07;  op2val:0xaa804008bff610bf
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfe00400101fffb07, 0xaa804008bff610bf, x1, 656, x2)

inst_73:
// rs1_b0_val == -86, 
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x10c08007fc80aaaa;  op2val:0xbf55f8c0050702fd
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x10c08007fc80aaaa, 0xbf55f8c0050702fd, x1, 672, x2)

inst_74:
// rs2_b4_val == 16, 
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfcfdf920204010;  op2val:0x0605bf1004fcf87f
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbfcfdf920204010, 0x0605bf1004fcf87f, x1, 688, x2)

inst_75:
// rs1_b6_val == -9, 
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xfaf710f80603f802;  op2val:0x09fa0409f67f0503
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfaf710f80603f802, 0x09fa0409f67f0503, x1, 704, x2)

inst_76:
// rs1_b6_val == -5, 
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x10fb1000f9c0807f;  op2val:0xffdffc09c0aabff9
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x10fb1000f9c0807f, 0xffdffc09c0aabff9, x1, 720, x2)

inst_77:
// rs1_b5_val == -33, 
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x80fedf7ffcf8ff02;  op2val:0x03aa06f8c0ff1008
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x80fedf7ffcf8ff02, 0x03aa06f8c0ff1008, x1, 736, x2)

inst_78:
// rs1_b7_val == 8, 
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x08f80806fdc0bf10;  op2val:0x1010efc0bf0207fe
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x08f80806fdc0bf10, 0x1010efc0bf0207fe, x1, 752, x2)

inst_79:
// rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b7_val == 2, rs1_b0_val == -17, rs2_b3_val == -17, rs1_b5_val == 16, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b3_val == -17, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b1_val == -33, rs2_b1_val == -3, rs2_b6_val == 8, rs1_b4_val < 0 and rs2_b4_val > 0, rs1_b7_val == -17, rs1_b2_val == -5, rs2_b4_val == 64, rs1_b3_val == rs2_b3_val, rs1_b3_val < 0 and rs2_b3_val < 0
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0xeff810fceffbdfef;  op2val:0x02080540ef07fd07
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xeff810fceffbdfef, 0x02080540ef07fd07, x1, 768, x2)

inst_80:
// rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b3_val == 127, rs1_b5_val == 64, rs1_b6_val == rs2_b6_val, rs2_b4_val == -86, rs2_b3_val == 2, rs2_b6_val == 4, rs1_b6_val == 4, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b1_val == 0, rs1_b7_val == 32
// opcode: smulx8 ; op1:x30; op2:x29; dest:x31; op1val:0x200440f97ffb00ef;  op2val:0xfc0409aa02c0f907
TEST_P64_PNN_OP(smulx8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x200440f97ffb00ef, 0xfc0409aa02c0f907, x1, 784, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 100*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
