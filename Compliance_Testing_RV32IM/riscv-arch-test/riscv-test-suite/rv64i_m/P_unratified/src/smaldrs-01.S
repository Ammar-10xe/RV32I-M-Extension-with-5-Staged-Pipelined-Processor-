
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smaldrs instruction of the RISC-V RV64PZicsr extension for the smaldrs covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smaldrs)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rd != rs2, rs1==x10, rs2==x11, rd==x10, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h0_val == -2049, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val == -16385, rs1_h0_val != rs2_h0_val, rs2_h1_val == -32768, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h3_val == -5, rs2_h2_val == 4, rs2_h3_val == -8193, rs1_h1_val == -9
// opcode: smaldrs ; op1:x10; op2:x11; dest:x10; op1val:0xfffbbffffff78000;  op2val:0xdfff00048000f7ff
TEST_P64_PNN_OP(smaldrs, x10, $rd_hi, x10, x11, 0x0000000000000000, $correctval_hi, 0xfffbbffffff78000, 0xdfff00048000f7ff, x3, 0, x15)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x6, rd==x24, rs1_h3_val == rs2_h3_val, rs2_h1_val == 4, rs1_h0_val == -65, rs2_h2_val == -65, rs1_h2_val == 64, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h3_val == -1, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == -1
// opcode: smaldrs ; op1:x23; op2:x6; dest:x24; op1val:0xffff00400006ffbf;  op2val:0xffffffbf0004fffa
TEST_P64_PNN_OP(smaldrs, x24, $rd_hi, x23, x6, 0x0000000000000000, $correctval_hi, 0xffff00400006ffbf, 0xffffffbf0004fffa, x3, 16, x15)

inst_2:
// rs1 == rs2 != rd, rs1==x25, rs2==x25, rd==x4, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == -33, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h0_val == 4096, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val == -257, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 256
// opcode: smaldrs ; op1:x25; op2:x25; dest:x4; op1val:0xfffbfeff3fff1000;  op2val:0x0006ffdffffc0100
TEST_P64_PNN_OP(smaldrs, x4, $rd_hi, x25, x25, 0x0000000000000000, $correctval_hi, 0xfffbfeff3fff1000, 0x0006ffdffffc0100, x3, 32, x15)

inst_3:
// rs1 == rs2 == rd, rs1==x22, rs2==x22, rd==x22, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 16, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == -65, rs1_h2_val == -65, rs1_h1_val == -33, rs1_h0_val == -129
// opcode: smaldrs ; op1:x22; op2:x22; dest:x22; op1val:0x0010ffbfffdfff7f;  op2val:0xfff8fffc3fffffbf
TEST_P64_PNN_OP(smaldrs, x22, $rd_hi, x22, x22, 0x0000000000000000, $correctval_hi, 0x0010ffbfffdfff7f, 0xfff8fffc3fffffbf, x3, 48, x15)

inst_4:
// rs2 == rd != rs1, rs1==x30, rs2==x26, rd==x26, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val == 16, rs2_h1_val == -129, rs1_h1_val == 2, rs2_h0_val == -32768, rs1_h3_val == 2048
// opcode: smaldrs ; op1:x30; op2:x26; dest:x26; op1val:0x080000100002fff6;  op2val:0x0005fff9ff7f8000
TEST_P64_PNN_OP(smaldrs, x26, $rd_hi, x30, x26, 0x0000000000000000, $correctval_hi, 0x080000100002fff6, 0x0005fff9ff7f8000, x3, 64, x15)

inst_5:
// rs1==x1, rs2==x9, rd==x16, rs1_h2_val == rs2_h2_val, rs2_h1_val == -257, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val == 64, rs1_h0_val == 256, rs2_h3_val == 256, rs1_h3_val == -65, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h2_val == 64
// opcode: smaldrs ; op1:x1; op2:x9; dest:x16; op1val:0xffbf004000400100;  op2val:0x01000040fefffff6
TEST_P64_PNN_OP(smaldrs, x16, $rd_hi, x1, x9, 0x0000000000000000, $correctval_hi, 0xffbf004000400100, 0x01000040fefffff6, x3, 80, x15)

inst_6:
// rs1==x19, rs2==x24, rd==x14, rs1_h1_val == rs2_h1_val, rs2_h1_val == 1, rs2_h0_val == -21846, rs2_h2_val == -2, rs1_h3_val == -513, rs1_h2_val == -8193, rs1_h1_val == 1, rs1_h0_val == 2, rs2_h3_val == 0
// opcode: smaldrs ; op1:x19; op2:x24; dest:x14; op1val:0xfdffdfff00010002;  op2val:0x0000fffe0001aaaa
TEST_P64_PNN_OP(smaldrs, x14, $rd_hi, x19, x24, 0x0000000000000000, $correctval_hi, 0xfdffdfff00010002, 0x0000fffe0001aaaa, x3, 96, x15)

inst_7:
// rs1==x5, rs2==x18, rd==x2, rs1_h0_val == rs2_h0_val, rs1_h0_val == -2, rs1_h3_val == 256, rs2_h0_val == -2, rs2_h3_val == -17
// opcode: smaldrs ; op1:x5; op2:x18; dest:x2; op1val:0x01000006fff6fffe;  op2val:0xffefc0000004fffe
TEST_P64_PNN_OP(smaldrs, x2, $rd_hi, x5, x18, 0x0000000000000000, $correctval_hi, 0x01000006fff6fffe, 0xffefc0000004fffe, x3, 112, x15)

inst_8:
// rs1==x7, rs2==x12, rd==x30, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 1, rs1_h2_val == 21845, rs1_h1_val == 4, rs2_h2_val == 256, rs2_h3_val == 16, rs2_h1_val == 1024, rs1_h3_val == 8192
// opcode: smaldrs ; op1:x7; op2:x12; dest:x30; op1val:0x200055550004fffa;  op2val:0x0010010004000001
TEST_P64_PNN_OP(smaldrs, x30, $rd_hi, x7, x12, 0x0000000000000000, $correctval_hi, 0x200055550004fffa, 0x0010010004000001, x3, 128, x15)

inst_9:
// rs1==x9, rs2==x17, rd==x12, rs2_h3_val == -21846, rs1_h2_val == 2048, rs1_h3_val == 64, rs2_h1_val == -4097
// opcode: smaldrs ; op1:x9; op2:x17; dest:x12; op1val:0x00400800fff70007;  op2val:0xaaaa0004efffaaaa
TEST_P64_PNN_OP(smaldrs, x12, $rd_hi, x9, x17, 0x0000000000000000, $correctval_hi, 0x00400800fff70007, 0xaaaa0004efffaaaa, x3, 144, x15)

inst_10:
// rs1==x28, rs2==x23, rd==x8, rs2_h3_val == 21845, rs2_h1_val == -8193, rs1_h2_val == -9, rs1_h1_val == -65, rs1_h0_val == -513, rs1_h3_val == 4096
// opcode: smaldrs ; op1:x28; op2:x23; dest:x8; op1val:0x1000fff7ffbffdff;  op2val:0x5555ffdfdfff0005
TEST_P64_PNN_OP(smaldrs, x8, $rd_hi, x28, x23, 0x0000000000000000, $correctval_hi, 0x1000fff7ffbffdff, 0x5555ffdfdfff0005, x3, 160, x15)

inst_11:
// rs1==x6, rs2==x16, rd==x18, rs2_h3_val == 32767, rs2_h1_val == -1, rs1_h1_val == 32, rs1_h2_val == 2, rs1_h0_val == 64, rs1_h3_val == -1025, rs2_h0_val == -17
// opcode: smaldrs ; op1:x6; op2:x16; dest:x18; op1val:0xfbff000200200040;  op2val:0x7fff0005ffffffef
TEST_P64_PNN_OP(smaldrs, x18, $rd_hi, x6, x16, 0x0000000000000000, $correctval_hi, 0xfbff000200200040, 0x7fff0005ffffffef, x3, 176, x15)

inst_12:
// rs1==x13, rs2==x1, rd==x6, rs2_h3_val == -16385, rs1_h2_val == 32, rs1_h0_val == 2048, rs1_h1_val == -1
// opcode: smaldrs ; op1:x13; op2:x1; dest:x6; op1val:0x00090020ffff0800;  op2val:0xbffffffc3ffffff8
TEST_P64_PNN_OP(smaldrs, x6, $rd_hi, x13, x1, 0x0000000000000000, $correctval_hi, 0x00090020ffff0800, 0xbffffffc3ffffff8, x3, 192, x15)

inst_13:
// rs1==x4, rs2==x7, rd==x28, rs2_h3_val == -4097, rs2_h2_val == 16384, rs1_h1_val == -1025, rs2_h1_val == 8
// opcode: smaldrs ; op1:x4; op2:x7; dest:x28; op1val:0xfffc0020fbff8000;  op2val:0xefff40000008fffa
TEST_P64_PNN_OP(smaldrs, x28, $rd_hi, x4, x7, 0x0000000000000000, $correctval_hi, 0xfffc0020fbff8000, 0xefff40000008fffa, x3, 208, x15)

inst_14:
// rs1==x21, rs2==x27, rd==x20, rs2_h3_val == -2049, rs1_h2_val == -513, rs1_h0_val == -17, rs2_h2_val == -3, rs2_h0_val == 21845
// opcode: smaldrs ; op1:x21; op2:x27; dest:x20; op1val:0x0006fdfffff9ffef;  op2val:0xf7fffffd00055555
TEST_P64_PNN_OP(smaldrs, x20, $rd_hi, x21, x27, 0x0000000000000000, $correctval_hi, 0x0006fdfffff9ffef, 0xf7fffffd00055555, x3, 224, x15)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_15:
// rs1==x26, rs2==x19, rs2_h3_val == -1025, rs1_h3_val == 4, rs1_h0_val == -2049, rs2_h0_val == 32767
// opcode: smaldrs ; op1:x26; op2:x19; dest:x31; op1val:0x0004dfff0009f7ff;  op2val:0xfbff0007ffff7fff
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x26, x19, 0x0000000000000000, $correctval_hi, 0x0004dfff0009f7ff, 0xfbff0007ffff7fff, x1, 0, x6)

inst_16:
// rs1==x27, rs2==x28, rs2_h3_val == -513, rs1_h2_val == 4096, rs2_h2_val == -17, rs2_h0_val == -9, rs1_h3_val == -8193
// opcode: smaldrs ; op1:x27; op2:x28; dest:x21; op1val:0xdfff1000fff80800;  op2val:0xfdffffef0006fff7
TEST_P64_PNN_OP(smaldrs, x21, $rd_hi, x27, x28, 0x0000000000000000, $correctval_hi, 0xdfff1000fff80800, 0xfdffffef0006fff7, x1, 16, x6)

inst_17:
// rs1==x15, rs2==x29, rs2_h3_val == -257, rs2_h0_val == 32, rs1_h2_val == -32768, rs1_h1_val == 256, rs2_h1_val == -2049
// opcode: smaldrs ; op1:x15; op2:x29; dest:x2; op1val:0xdfff800001000005;  op2val:0xfeff4000f7ff0020
TEST_P64_PNN_OP(smaldrs, x2, $rd_hi, x15, x29, 0x0000000000000000, $correctval_hi, 0xdfff800001000005, 0xfeff4000f7ff0020, x1, 32, x6)

inst_18:
// rs1==x12, rs2==x13, rs2_h3_val == -129, rs2_h0_val == -16385, rs1_h1_val == -21846
// opcode: smaldrs ; op1:x12; op2:x13; dest:x31; op1val:0xfbff0010aaaa0005;  op2val:0xff7f0100ff7fbfff
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x12, x13, 0x0000000000000000, $correctval_hi, 0xfbff0010aaaa0005, 0xff7f0100ff7fbfff, x1, 48, x6)

inst_19:
// rs1==x24, rs2==x8, rs2_h3_val == -65, rs1_h2_val == -1, rs1_h0_val == 32
// opcode: smaldrs ; op1:x24; op2:x8; dest:x13; op1val:0x0007ffff00090020;  op2val:0xffbffffcfff90009
TEST_P64_PNN_OP(smaldrs, x13, $rd_hi, x24, x8, 0x0000000000000000, $correctval_hi, 0x0007ffff00090020, 0xffbffffcfff90009, x1, 64, x6)

inst_20:
// rs1==x2, rs2==x30, rs2_h3_val == -33, rs1_h0_val == -33, rs1_h1_val == 1024, rs1_h2_val == -21846, rs2_h1_val == -9, rs1_h3_val == -17
// opcode: smaldrs ; op1:x2; op2:x30; dest:x21; op1val:0xffefaaaa0400ffdf;  op2val:0xffdffffdfff7fffc
TEST_P64_PNN_OP(smaldrs, x21, $rd_hi, x2, x30, 0x0000000000000000, $correctval_hi, 0xffefaaaa0400ffdf, 0xffdffffdfff7fffc, x1, 80, x6)

inst_21:
// rs1==x20, rs2==x10, rs2_h3_val == -9, rs2_h2_val == 32, rs1_h1_val == -129, rs1_h3_val == 2, rs2_h1_val == 32
// opcode: smaldrs ; op1:x20; op2:x10; dest:x14; op1val:0x0002fff9ff7ffffe;  op2val:0xfff700200020f7ff
TEST_P64_PNN_OP(smaldrs, x14, $rd_hi, x20, x10, 0x0000000000000000, $correctval_hi, 0x0002fff9ff7ffffe, 0xfff700200020f7ff, x1, 96, x6)

inst_22:
// rs1==x11, rs2==x4, rs2_h3_val == -5, rs1_h3_val == -16385, rs1_h0_val == 1
// opcode: smaldrs ; op1:x11; op2:x4; dest:x26; op1val:0xbffffff801000001;  op2val:0xfffb00400008aaaa
TEST_P64_PNN_OP(smaldrs, x26, $rd_hi, x11, x4, 0x0000000000000000, $correctval_hi, 0xbffffff801000001, 0xfffb00400008aaaa, x1, 112, x6)

inst_23:
// rs1==x3, rs2==x2, rs2_h3_val == -3, rs1_h1_val == -513, rs2_h2_val == -129
// opcode: smaldrs ; op1:x3; op2:x2; dest:x19; op1val:0x00053ffffdff0003;  op2val:0xfffdff7f0004fff6
TEST_P64_PNN_OP(smaldrs, x19, $rd_hi, x3, x2, 0x0000000000000000, $correctval_hi, 0x00053ffffdff0003, 0xfffdff7f0004fff6, x1, 128, x6)

inst_24:
// rs1==x29, rs2==x31, rs2_h3_val == -2, rs1_h1_val == 128, rs1_h0_val == 8192, rs1_h2_val == -1025, rs2_h2_val == -1025
// opcode: smaldrs ; op1:x29; op2:x31; dest:x15; op1val:0x0009fbff00802000;  op2val:0xfffefbfffff67fff
TEST_P64_PNN_OP(smaldrs, x15, $rd_hi, x29, x31, 0x0000000000000000, $correctval_hi, 0x0009fbff00802000, 0xfffefbfffff67fff, x1, 144, x6)

inst_25:
// rs1==x17, rs2==x3, rs2_h3_val == -32768, rs1_h0_val == 4, rs1_h1_val == 16384, rs2_h2_val == -257, rs1_h3_val == -2049
// opcode: smaldrs ; op1:x17; op2:x3; dest:x20; op1val:0xf7ff000240000004;  op2val:0x8000fefffffffff6
TEST_P64_PNN_OP(smaldrs, x20, $rd_hi, x17, x3, 0x0000000000000000, $correctval_hi, 0xf7ff000240000004, 0x8000fefffffffff6, x1, 160, x6)

inst_26:
// rs1==x18, rs2==x15, rs2_h3_val == 16384, rs1_h3_val == 32767, rs2_h2_val == 1
// opcode: smaldrs ; op1:x18; op2:x15; dest:x19; op1val:0x7ffffff90005fffe;  op2val:0x40000001ff7f5555
TEST_P64_PNN_OP(smaldrs, x19, $rd_hi, x18, x15, 0x0000000000000000, $correctval_hi, 0x7ffffff90005fffe, 0x40000001ff7f5555, x1, 176, x6)

inst_27:
// rs1==x16, rs2==x20, rs2_h3_val == 8192, rs1_h3_val == -2, rs2_h1_val == 21845, rs2_h0_val == 0
// opcode: smaldrs ; op1:x16; op2:x20; dest:x24; op1val:0xfffec000aaaaffef;  op2val:0x2000fff955550000
TEST_P64_PNN_OP(smaldrs, x24, $rd_hi, x16, x20, 0x0000000000000000, $correctval_hi, 0xfffec000aaaaffef, 0x2000fff955550000, x1, 192, x6)

inst_28:
// rs1==x0, rs2==x5, rs2_h3_val == 4096, rs2_h2_val == -5, rs1_h1_val == 0, rs1_h0_val == -8193, rs2_h0_val == 2048, rs1_h2_val == -2
// opcode: smaldrs ; op1:x0; op2:x5; dest:x27; op1val:0x0100fffe0000dfff;  op2val:0x1000fffb00200800
TEST_P64_PNN_OP(smaldrs, x27, $rd_hi, x0, x5, 0x0000000000000000, $correctval_hi, 0x0100fffe0000dfff, 0x1000fffb00200800, x1, 208, x6)

inst_29:
// rs1==x8, rs2==x14, rs2_h3_val == 2048, rs2_h0_val == -5, rs1_h0_val == 1024, rs2_h1_val == 64
// opcode: smaldrs ; op1:x8; op2:x14; dest:x2; op1val:0xffff000200800400;  op2val:0x0800fffc0040fffb
TEST_P64_PNN_OP(smaldrs, x2, $rd_hi, x8, x14, 0x0000000000000000, $correctval_hi, 0xffff000200800400, 0x0800fffc0040fffb, x1, 224, x6)

inst_30:
// rs1==x14, rs2==x0, rs2_h3_val == 1024, rs2_h2_val == -1, rs1_h0_val == -257
// opcode: smaldrs ; op1:x14; op2:x0; dest:x2; op1val:0xfffa0007fff9feff;  op2val:0x0400ffff00060007
TEST_P64_PNN_OP(smaldrs, x2, $rd_hi, x14, x0, 0x0000000000000000, $correctval_hi, 0xfffa0007fff9feff, 0x0400ffff00060007, x1, 240, x6)

inst_31:
// rs1==x31, rs2==x21, rs2_h3_val == 512, rs2_h0_val == -8193, rs1_h1_val == 32767, rs2_h2_val == 1024, rs1_h0_val == 0
// opcode: smaldrs ; op1:x31; op2:x21; dest:x25; op1val:0xfffefeff7fff0000;  op2val:0x02000400fff9dfff
TEST_P64_PNN_OP(smaldrs, x25, $rd_hi, x31, x21, 0x0000000000000000, $correctval_hi, 0xfffefeff7fff0000, 0x02000400fff9dfff, x1, 256, x6)

inst_32:
// rs2_h3_val == 128, rs2_h2_val == -16385, rs2_h0_val == 4096, rs1_h3_val == -4097, rs1_h2_val == 32767
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xefff7fffffbf0800;  op2val:0x0080bffffffc1000
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefff7fffffbf0800, 0x0080bffffffc1000, x1, 272, x6)

inst_33:
// rs2_h3_val == 64, rs2_h1_val == 2, rs2_h0_val == -33, rs1_h0_val == -1025
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00060001fbff;  op2val:0x0040ffbf0002ffdf
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbf00060001fbff, 0x0040ffbf0002ffdf, x1, 288, x6)

inst_34:
// rs1_h1_val == -5, rs1_h3_val == -33
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff7fffbfff9;  op2val:0x0800ff7f8000f7ff
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdffff7fffbfff9, 0x0800ff7f8000f7ff, x1, 304, x6)

inst_35:
// rs1_h1_val == -3, rs2_h1_val == -21846, rs2_h0_val == -129, rs1_h0_val == 8, rs2_h3_val == 2, rs2_h2_val == 2
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff60009fffd0008;  op2val:0x00020002aaaaff7f
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff60009fffd0008, 0x00020002aaaaff7f, x1, 320, x6)

inst_36:
// rs1_h1_val == -2, rs1_h0_val == -9, rs2_h1_val == 16384, rs2_h0_val == 2
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x0800c000fffefff7;  op2val:0xff7fbfff40000002
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800c000fffefff7, 0xff7fbfff40000002, x1, 336, x6)

inst_37:
// rs1_h1_val == -32768, rs1_h2_val == 8192, rs2_h0_val == -4097, rs2_h2_val == 512, rs1_h3_val == 8
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x000820008000fff7;  op2val:0xffbf02003fffefff
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000820008000fff7, 0xffbf02003fffefff, x1, 352, x6)

inst_38:
// rs1_h1_val == 8192, rs2_h1_val == 4096, rs1_h2_val == 256
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffc010020000000;  op2val:0xc000fffa1000ffbf
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffc010020000000, 0xc000fffa1000ffbf, x1, 368, x6)

inst_39:
// rs1_h1_val == 4096, rs2_h2_val == 8, rs2_h1_val == 8192, rs1_h2_val == -2049
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x0800f7ff1000fff9;  op2val:0xbfff00082000bfff
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800f7ff1000fff9, 0xbfff00082000bfff, x1, 384, x6)

inst_40:
// rs1_h1_val == 2048, rs2_h1_val == -2, rs2_h2_val == -513, rs1_h2_val == -129
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xfbffff7f08000001;  op2val:0x4000fdfffffefff6
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffff7f08000001, 0x4000fdfffffefff6, x1, 400, x6)

inst_41:
// rs1_h1_val == 512, rs1_h0_val == 16, rs1_h2_val == -33
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffdf02000010;  op2val:0xfffa000100400001
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff6ffdf02000010, 0xfffa000100400001, x1, 416, x6)

inst_42:
// rs1_h1_val == 16, rs2_h1_val == -1025
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffbf0010fffe;  op2val:0xfeff0400fbff3fff
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbfffbf0010fffe, 0xfeff0400fbff3fff, x1, 432, x6)

inst_43:
// rs1_h1_val == 8, rs1_h3_val == -257, rs2_h3_val == 8
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xfeff000700080400;  op2val:0x0008ff7f55557fff
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeff000700080400, 0x0008ff7f55557fff, x1, 448, x6)

inst_44:
// rs1_h0_val == -21846, rs1_h2_val == 16384, rs2_h2_val == 4096
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xffdf40002000aaaa;  op2val:0x00001000ffffc000
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdf40002000aaaa, 0x00001000ffffc000, x1, 464, x6)

inst_45:
// rs1_h0_val == 21845, rs2_h1_val == -513, rs2_h0_val == 8192, rs1_h2_val == -3, rs2_h2_val == 21845
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffdffbf5555;  op2val:0x40005555fdff2000
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffeffffdffbf5555, 0x40005555fdff2000, x1, 480, x6)

inst_46:
// rs1_h0_val == 32767, rs1_h3_val == 16384, rs1_h1_val == -2049
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x40008000f7ff7fff;  op2val:0xc00002004000aaaa
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x40008000f7ff7fff, 0xc00002004000aaaa, x1, 496, x6)

inst_47:
// rs1_h0_val == -16385, rs1_h3_val == 512, rs2_h2_val == -9, rs2_h1_val == 16
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x0200fffcffbfbfff;  op2val:0xfffafff700100006
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200fffcffbfbfff, 0xfffafff700100006, x1, 512, x6)

inst_48:
// rs1_h0_val == -4097, rs1_h2_val == 4, rs2_h0_val == -257
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x200000042000efff;  op2val:0x0002fff74000feff
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x200000042000efff, 0x0002fff74000feff, x1, 528, x6)

inst_49:
// rs1_h0_val == -5, rs2_h1_val == 256, rs1_h3_val == -9
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff75555f7fffffb;  op2val:0xffffff7f0100f7ff
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff75555f7fffffb, 0xffffff7f0100f7ff, x1, 544, x6)

inst_50:
// rs1_h0_val == -3, rs1_h3_val == 0
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x00000007fff8fffd;  op2val:0xffeffff7fffefeff
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000007fff8fffd, 0xffeffff7fffefeff, x1, 560, x6)

inst_51:
// rs1_h0_val == 16384, rs1_h3_val == -129
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffdf00404000;  op2val:0xdfff0005fff8fff9
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7fffdf00404000, 0xdfff0005fff8fff9, x1, 576, x6)

inst_52:
// rs1_h0_val == 512, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0006fff80200;  op2val:0x0010fffafff90002
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7f0006fff80200, 0x0010fffafff90002, x1, 592, x6)

inst_53:
// rs2_h1_val == 0, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff70020fffbbfff;  op2val:0xfffdfeff0000c000
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff70020fffbbfff, 0xfffdfeff0000c000, x1, 608, x6)

inst_54:
// rs2_h0_val == -1025, rs1_h3_val == 21845, rs1_h2_val == 128, rs2_h1_val == -16385, rs2_h2_val == 0
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x5555008000200001;  op2val:0xfff70000bffffbff
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x5555008000200001, 0xfff70000bffffbff, x1, 624, x6)

inst_55:
// rs2_h0_val == -513, rs1_h1_val == -8193
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffbbfffdfff0007;  op2val:0xffdffff9fffafdff
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffbbfffdfff0007, 0xffdffff9fffafdff, x1, 640, x6)

inst_56:
// rs2_h0_val == -3, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xffff01000001efff;  op2val:0xff7f02000008fffd
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff01000001efff, 0xff7f02000008fffd, x1, 656, x6)

inst_57:
// rs2_h0_val == 16384, rs2_h1_val == 512
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x0005dfffdfff0008;  op2val:0x0400ffef02004000
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0005dfffdfff0008, 0x0400ffef02004000, x1, 672, x6)

inst_58:
// rs2_h0_val == 1024, rs1_h0_val == 128
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x0100002008000080;  op2val:0xfff9fffbfbff0400
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0100002008000080, 0xfff9fffbfbff0400, x1, 688, x6)

inst_59:
// rs2_h0_val == 512, rs2_h1_val == 2048, rs2_h2_val == 32767
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0003ffff0200;  op2val:0xfff67fff08000200
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfff0003ffff0200, 0xfff67fff08000200, x1, 704, x6)

inst_60:
// rs2_h0_val == 128, rs1_h3_val == 32
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x00201000fff7dfff;  op2val:0x00090001fdff0080
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00201000fff7dfff, 0x00090001fdff0080, x1, 720, x6)

inst_61:
// rs2_h0_val == 64, rs2_h3_val == 4
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x0004ffbf0005fffe;  op2val:0x00047fff10000040
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0004ffbf0005fffe, 0x00047fff10000040, x1, 736, x6)

inst_62:
// rs2_h0_val == 16, rs1_h1_val == -16385
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x0200feffbfff3fff;  op2val:0xc000fffd3fff0010
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200feffbfff3fff, 0xc000fffd3fff0010, x1, 752, x6)

inst_63:
// rs2_h0_val == 8, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x0040fffefffffff9;  op2val:0x3fff0005feff0008
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040fffefffffff9, 0x3fff0005feff0008, x1, 768, x6)

inst_64:
// rs2_h0_val == 4, rs2_h2_val == 16, rs1_h2_val == 1
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xbfff000100030020;  op2val:0x00090010fdff0004
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbfff000100030020, 0x00090010fdff0004, x1, 784, x6)

inst_65:
// rs2_h0_val == -1, rs2_h2_val == -2049
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffe7ffffffd0400;  op2val:0x0200f7fffbffffff
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffe7ffffffd0400, 0x0200f7fffbffffff, x1, 800, x6)

inst_66:
// rs1_h3_val == -21846, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa7ffffff9aaaa;  op2val:0x00063fff3fff0000
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaa7ffffff9aaaa, 0x00063fff3fff0000, x1, 816, x6)

inst_67:
// rs2_h3_val == 32, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffdffbff4000;  op2val:0x0020fff900030006
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7fffdffbff4000, 0x0020fff900030006, x1, 832, x6)

inst_68:
// rs1_h0_val == -1, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x0800dfff0007ffff;  op2val:0xfffb0008fff90010
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800dfff0007ffff, 0xfffb0008fff90010, x1, 848, x6)

inst_69:
// rs1_h3_val == 1024, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x040000103fffdfff;  op2val:0x0010ffdf0800fff8
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x040000103fffdfff, 0x0010ffdf0800fff8, x1, 864, x6)

inst_70:
// rs2_h2_val == -8193, rs2_h1_val == 128
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x0008fdffbfffff7f;  op2val:0xffbfdfff00800003
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0008fdffbfffff7f, 0xffbfdfff00800003, x1, 880, x6)

inst_71:
// rs2_h2_val == -4097, rs2_h1_val == -17, rs1_h2_val == 0
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fff90200;  op2val:0xdfffefffffef0006
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x10000000fff90200, 0xdfffefffffef0006, x1, 896, x6)

inst_72:
// rs1_h3_val == 128, rs2_h3_val == 1
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x00800000fff60200;  op2val:0x0001effffffcfffd
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00800000fff60200, 0x0001effffffcfffd, x1, 912, x6)

inst_73:
// rs1_h3_val == 1, rs2_h1_val == -3
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x00010005aaaaaaaa;  op2val:0xfbffc000fffd7fff
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00010005aaaaaaaa, 0xfbffc000fffd7fff, x1, 928, x6)

inst_74:
// rs2_h2_val == -32768, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x04000040fffc0001;  op2val:0x00078000effffff8
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x04000040fffc0001, 0x00078000effffff8, x1, 944, x6)

inst_75:
// rs2_h2_val == 8192, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffdfffff7f;  op2val:0x40002000fdff8000
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffbffffdfffff7f, 0x40002000fdff8000, x1, 960, x6)

inst_76:
// rs1_h2_val == -4097, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x0100efff4000fff8;  op2val:0x00097ffffff75555
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0100efff4000fff8, 0x00097ffffff75555, x1, 976, x6)

inst_77:
// rs2_h2_val == 2048, rs1_h2_val == 8
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x10000008ff7fc000;  op2val:0xaaaa0800ffff0002
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x10000008ff7fc000, 0xaaaa0800ffff0002, x1, 992, x6)

inst_78:
// rs2_h2_val == 128, rs1_h2_val == 512
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x100002008000ff7f;  op2val:0x0005008000070007
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x100002008000ff7f, 0x0005008000070007, x1, 1008, x6)

inst_79:
// rs2_h1_val == 32767, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xaaaabfffbfffaaaa;  op2val:0x0020fff97fff5555
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaabfffbfffaaaa, 0x0020fff97fff5555, x1, 1024, x6)

inst_80:
// rs1_h2_val == 1024, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x0040040080002000;  op2val:0x02002000ff7f0006
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040040080002000, 0x02002000ff7f0006, x1, 1040, x6)

inst_81:
// rs1_h1_val == -257, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x0001bffffeff0009;  op2val:0x0000004040002000
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001bffffeff0009, 0x0000004040002000, x1, 1056, x6)

inst_82:
// rs2_h1_val == -65, rs1_h2_val == -5
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffb0004ff7f;  op2val:0xfffcfdffffbf5555
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x4000fffb0004ff7f, 0xfffcfdffffbf5555, x1, 1072, x6)

inst_83:
// rs2_h1_val == -33, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x000800400040ff7f;  op2val:0x00085555ffdffbff
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000800400040ff7f, 0x00085555ffdffbff, x1, 1088, x6)

inst_84:
// rs2_h1_val == -5, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffb7fffdffffff9;  op2val:0x0004fdfffffbbfff
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffb7fffdffffff9, 0x0004fdfffffbbfff, x1, 1104, x6)

inst_85:
// rs1_h1_val == 21845, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x0800000955550800;  op2val:0x2000ffef40004000
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800000955550800, 0x2000ffef40004000, x1, 1120, x6)

inst_86:
// rs1_h1_val == -4097, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x00040005effff7ff;  op2val:0xfff9fffc04000000
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00040005effff7ff, 0xfff9fffc04000000, x1, 1136, x6)

inst_87:
// rs1_h3_val == -3, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfeff00400003;  op2val:0xc0000200bfff0200
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffdfeff00400003, 0xc0000200bfff0200, x1, 1152, x6)

inst_88:
// rs1_h2_val == -17, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xc000ffef00080004;  op2val:0x0006fdff00030080
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xc000ffef00080004, 0x0006fdff00030080, x1, 1168, x6)

inst_89:
// rs1_h3_val == -32768, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x80000009fbfffffd;  op2val:0x40000001fff70000
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x80000009fbfffffd, 0x40000001fff70000, x1, 1184, x6)

inst_90:
// rs2_h2_val == -21846, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff9ffefffbf7fff;  op2val:0x0200aaaaffbfff7f
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff9ffefffbf7fff, 0x0200aaaaffbfff7f, x1, 1200, x6)

inst_91:
// rs1_h1_val == -17, 
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff9ffffffeffffe;  op2val:0xfff94000fff6fffa
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff9ffffffeffffe, 0xfff94000fff6fffa, x1, 1216, x6)

inst_92:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == -33, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h0_val == 4096, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val == -257, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 256
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfeff3fff1000;  op2val:0x0006ffdffffc0100
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffbfeff3fff1000, 0x0006ffdffffc0100, x1, 1232, x6)

inst_93:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 16, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == -65, rs1_h2_val == -65, rs1_h1_val == -33, rs1_h0_val == -129
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x0010ffbfffdfff7f;  op2val:0xfff8fffc3fffffbf
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0010ffbfffdfff7f, 0xfff8fffc3fffffbf, x1, 1248, x6)

inst_94:
// rs2_h3_val == 4096, rs2_h2_val == -5, rs1_h1_val == 0, rs1_h0_val == -8193, rs2_h0_val == 2048, rs1_h2_val == -2
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0x0100fffe0000dfff;  op2val:0x1000fffb00200800
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0100fffe0000dfff, 0x1000fffb00200800, x1, 1264, x6)

inst_95:
// rs2_h3_val == 1024, rs2_h2_val == -1, rs1_h0_val == -257
// opcode: smaldrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0007fff9feff;  op2val:0x0400ffff00060007
TEST_P64_PNN_OP(smaldrs, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffa0007fff9feff, 0x0400ffff00060007, x1, 1280, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 162*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
