
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kslraw.u instruction of the RISC-V RV64PZicsr extension for the kslraw.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kslraw.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x30, rs2==x25, rd==x30, rs1_w0_val == 0, rs1_w1_val == 4294967231, rs2_w1_val == 4096, rs2_w0_val == -2147483648
// opcode: kslraw.u ; op1:x30; op2:x25; dest:x30; op1val:0xffffffbf00000000;  op2val:0x00100080000000
TEST_PKRR_OP(kslraw.u, x30, x30, x25, 0x0000000000000000, 0xffffffbf00000000, 0x00100080000000, x30, x6, 0, x1)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x26, rs2==x19, rd==x2, rs2_w1_val == -1431655766, rs2_w0_val == 0
// opcode: kslraw.u ; op1:x26; op2:x19; dest:x2; op1val:0x00000c00000006;  op2val:0xaaaaaaaa00000000
TEST_PKRR_OP(kslraw.u, x2, x26, x19, 0x0000000000000000, 0x00000c00000006, 0xaaaaaaaa00000000, x26, x6, 16, x1)

inst_2:
// rs1 == rs2 != rd, rs1==x14, rs2==x14, rd==x0, rs2_w1_val == 1431655765, rs1_w1_val == 4292870143, rs1_w0_val == 4294967167
// opcode: kslraw.u ; op1:x14; op2:x14; dest:x0; op1val:0xffdfffffffffff7f;  op2val:0x55555555c0000000
TEST_PKRR_OP(kslraw.u, x0, x14, x14, 0x0000000000000000, 0xffdfffffffffff7f, 0x55555555c0000000, x14, x6, 32, x1)

inst_3:
// rs1 == rs2 == rd, rs1==x17, rs2==x17, rd==x17, rs2_w1_val == 2147483647, rs2_w0_val == 8, rs1_w0_val == 4227858431, rs1_w1_val == 8388608
// opcode: kslraw.u ; op1:x17; op2:x17; dest:x17; op1val:0x800000fbffffff;  op2val:0x7fffffff00000008
TEST_PKRR_OP(kslraw.u, x17, x17, x17, 0x0000000000000000, 0x800000fbffffff, 0x7fffffff00000008, x17, x6, 48, x1)

inst_4:
// rs2 == rd != rs1, rs1==x31, rs2==x24, rd==x24, rs2_w1_val == -1073741825, rs1_w1_val == 4294950911, rs1_w0_val == 128, rs2_w0_val == -129
// opcode: kslraw.u ; op1:x31; op2:x24; dest:x24; op1val:0xffffbfff00000080;  op2val:0xbfffffffffffff7f
TEST_PKRR_OP(kslraw.u, x24, x31, x24, 0x0000000000000000, 0xffffbfff00000080, 0xbfffffffffffff7f, x31, x6, 64, x1)

inst_5:
// rs1==x2, rs2==x20, rd==x5, rs2_w1_val == -536870913, rs2_w0_val == -16385
// opcode: kslraw.u ; op1:x2; op2:x20; dest:x5; op1val:0x00000cffffff7f;  op2val:0xdfffffffffffbfff
TEST_PKRR_OP(kslraw.u, x5, x2, x20, 0x0000000000000000, 0x00000cffffff7f, 0xdfffffffffffbfff, x2, x6, 80, x1)

inst_6:
// rs1==x20, rs2==x3, rd==x8, rs2_w1_val == -268435457, rs1_w1_val == 1048576, rs1_w0_val == 4294967291, rs2_w0_val == -16777217
// opcode: kslraw.u ; op1:x20; op2:x3; dest:x8; op1val:0x100000fffffffb;  op2val:0xeffffffffeffffff
TEST_PKRR_OP(kslraw.u, x8, x20, x3, 0x0000000000000000, 0x100000fffffffb, 0xeffffffffeffffff, x20, x6, 96, x1)

inst_7:
// rs1==x9, rs2==x4, rd==x10, rs2_w1_val == -134217729, rs2_w0_val == 4096, rs1_w1_val == 1073741824, rs1_w0_val == 4294967295
// opcode: kslraw.u ; op1:x9; op2:x4; dest:x10; op1val:0x40000000ffffffff;  op2val:0xf7ffffff00001000
TEST_PKRR_OP(kslraw.u, x10, x9, x4, 0x0000000000000000, 0x40000000ffffffff, 0xf7ffffff00001000, x9, x6, 112, x1)

inst_8:
// rs1==x25, rs2==x7, rd==x4, rs2_w1_val == -67108865, rs1_w1_val == 4294836223, rs1_w0_val == 134217728, rs2_w0_val == 65536
// opcode: kslraw.u ; op1:x25; op2:x7; dest:x4; op1val:0xfffdffff08000000;  op2val:0xfbffffff00010000
TEST_PKRR_OP(kslraw.u, x4, x25, x7, 0x0000000000000000, 0xfffdffff08000000, 0xfbffffff00010000, x25, x6, 128, x1)

inst_9:
// rs1==x23, rs2==x11, rd==x16, rs2_w1_val == -33554433, rs1_w1_val == 4293918719, rs2_w0_val == 1431655765
// opcode: kslraw.u ; op1:x23; op2:x11; dest:x16; op1val:0xffeffffffffffffb;  op2val:0xfdffffff55555555
TEST_PKRR_OP(kslraw.u, x16, x23, x11, 0x0000000000000000, 0xffeffffffffffffb, 0xfdffffff55555555, x23, x6, 144, x1)

inst_10:
// rs1==x13, rs2==x10, rd==x25, rs2_w1_val == -16777217, rs1_w0_val == 4294967293, rs1_w1_val == 8192, rs2_w0_val == -32769
// opcode: kslraw.u ; op1:x13; op2:x10; dest:x25; op1val:0x002000fffffffd;  op2val:0xfeffffffffff7fff
TEST_PKRR_OP(kslraw.u, x25, x13, x10, 0x0000000000000000, 0x002000fffffffd, 0xfeffffffffff7fff, x13, x6, 160, x1)

inst_11:
// rs1==x15, rs2==x27, rd==x14, rs2_w1_val == -8388609, rs2_w0_val == -4194305
// opcode: kslraw.u ; op1:x15; op2:x27; dest:x14; op1val:0xffdfffff00000000;  op2val:0xff7fffffffbfffff
TEST_PKRR_OP(kslraw.u, x14, x15, x27, 0x0000000000000000, 0xffdfffff00000000, 0xff7fffffffbfffff, x15, x6, 176, x1)

inst_12:
// rs1==x5, rs2==x0, rd==x29, rs2_w1_val == -4194305, rs1_w1_val == 4294705151, rs1_w0_val == 4294959103, rs2_w0_val == -262145
// opcode: kslraw.u ; op1:x5; op2:x0; dest:x29; op1val:0xfffbffffffffdfff;  op2val:0xffbffffffffbffff
TEST_PKRR_OP(kslraw.u, x29, x5, x0, 0x0000000000000000, 0xfffbffffffffdfff, 0xffbffffffffbffff, x5, x6, 192, x1)

inst_13:
// rs1==x10, rs2==x16, rd==x19, rs2_w1_val == -2097153, rs2_w0_val == 64, rs1_w0_val == 2097152, rs1_w1_val == 4294966271
// opcode: kslraw.u ; op1:x10; op2:x16; dest:x19; op1val:0xfffffbff00200000;  op2val:0xffdfffff00000040
TEST_PKRR_OP(kslraw.u, x19, x10, x16, 0x0000000000000000, 0xfffffbff00200000, 0xffdfffff00000040, x10, x6, 208, x1)

inst_14:
// rs1==x3, rs2==x28, rd==x21, rs2_w1_val == -1048577, 
// opcode: kslraw.u ; op1:x3; op2:x28; dest:x21; op1val:0x00200000000009;  op2val:0xffefffff00001000
TEST_PKRR_OP(kslraw.u, x21, x3, x28, 0x0000000000000000, 0x00200000000009, 0xffefffff00001000, x3, x6, 224, x1)

inst_15:
// rs1==x1, rs2==x26, rd==x12, rs2_w1_val == -524289, rs1_w1_val == 3758096383
// opcode: kslraw.u ; op1:x1; op2:x26; dest:x12; op1val:0xdfffffff0000000b;  op2val:0xfff7ffff00000005
TEST_PKRR_OP(kslraw.u, x12, x1, x26, 0x0000000000000000, 0xdfffffff0000000b, 0xfff7ffff00000005, x1, x6, 240, x14)
RVTEST_SIGBASE(x10,signature_x10_0)

inst_16:
// rs1==x11, rs2==x29, rd==x1, rs2_w1_val == -262145, rs1_w0_val == 4294705151, rs2_w0_val == 131072, rs1_w1_val == 2048
// opcode: kslraw.u ; op1:x11; op2:x29; dest:x1; op1val:0x000800fffbffff;  op2val:0xfffbffff00020000
TEST_PKRR_OP(kslraw.u, x1, x11, x29, 0x0000000000000000, 0x000800fffbffff, 0xfffbffff00020000, x11, x10, 0, x14)

inst_17:
// rs1==x0, rs2==x5, rd==x13, rs2_w1_val == -131073, rs1_w0_val == 4292870143
// opcode: kslraw.u ; op1:x0; op2:x5; dest:x13; op1val:0x000003ffdfffff;  op2val:0xfffdffff00000007
TEST_PKRR_OP(kslraw.u, x13, x0, x5, 0x0000000000000000, 0x000003ffdfffff, 0xfffdffff00000007, x0, x10, 16, x14)

inst_18:
// rs1==x8, rs2==x31, rd==x20, rs2_w1_val == -65537, rs2_w0_val == -1048577
// opcode: kslraw.u ; op1:x8; op2:x31; dest:x20; op1val:0xffdfffff00000005;  op2val:0xfffeffffffefffff
TEST_PKRR_OP(kslraw.u, x20, x8, x31, 0x0000000000000000, 0xffdfffff00000005, 0xfffeffffffefffff, x8, x10, 32, x14)

inst_19:
// rs1==x16, rs2==x15, rd==x9, rs2_w1_val == -32769, rs1_w0_val == 4294950911, rs2_w0_val == -257, rs1_w1_val == 4160749567
// opcode: kslraw.u ; op1:x16; op2:x15; dest:x9; op1val:0xf7ffffffffffbfff;  op2val:0xffff7ffffffffeff
TEST_PKRR_OP(kslraw.u, x9, x16, x15, 0x0000000000000000, 0xf7ffffffffffbfff, 0xffff7ffffffffeff, x16, x10, 48, x14)

inst_20:
// rs1==x19, rs2==x22, rd==x3, rs2_w1_val == -16385, rs2_w0_val == 128
// opcode: kslraw.u ; op1:x19; op2:x22; dest:x3; op1val:0x00000affffbfff;  op2val:0xffffbfff00000080
TEST_PKRR_OP(kslraw.u, x3, x19, x22, 0x0000000000000000, 0x00000affffbfff, 0xffffbfff00000080, x19, x10, 64, x14)

inst_21:
// rs1==x18, rs2==x2, rd==x6, rs2_w1_val == -8193, rs1_w0_val == 1431655765
// opcode: kslraw.u ; op1:x18; op2:x2; dest:x6; op1val:0x00000955555555;  op2val:0xffffdfffffff7fff
TEST_PKRR_OP(kslraw.u, x6, x18, x2, 0x0000000000000000, 0x00000955555555, 0xffffdfffffff7fff, x18, x10, 80, x14)

inst_22:
// rs1==x12, rs2==x21, rd==x15, rs2_w1_val == -4097, rs2_w0_val == 134217728, rs1_w1_val == 4194304
// opcode: kslraw.u ; op1:x12; op2:x21; dest:x15; op1val:0x4000000000000a;  op2val:0xffffefff08000000
TEST_PKRR_OP(kslraw.u, x15, x12, x21, 0x0000000000000000, 0x4000000000000a, 0xffffefff08000000, x12, x10, 96, x14)

inst_23:
// rs1==x29, rs2==x9, rd==x11, rs2_w1_val == -2049, rs2_w0_val == 1073741824, rs1_w0_val == 16, rs1_w1_val == 16
// opcode: kslraw.u ; op1:x29; op2:x9; dest:x11; op1val:0x00001000000010;  op2val:0xfffff7ff40000000
TEST_PKRR_OP(kslraw.u, x11, x29, x9, 0x0000000000000000, 0x00001000000010, 0xfffff7ff40000000, x29, x10, 112, x14)

inst_24:
// rs1==x7, rs2==x13, rd==x31, rs2_w1_val == -1025, rs2_w0_val == -17, rs1_w1_val == 3221225471, rs1_w0_val == 131072
// opcode: kslraw.u ; op1:x7; op2:x13; dest:x31; op1val:0xbfffffff00020000;  op2val:0xfffffbffffffffef
TEST_PKRR_OP(kslraw.u, x31, x7, x13, 0x0000000000000000, 0xbfffffff00020000, 0xfffffbffffffffef, x7, x10, 128, x14)

inst_25:
// rs1==x4, rs2==x1, rd==x26, rs2_w1_val == -513, 
// opcode: kslraw.u ; op1:x4; op2:x1; dest:x26; op1val:0x00200055555555;  op2val:0xfffffdff00000005
TEST_PKRR_OP(kslraw.u, x26, x4, x1, 0x0000000000000000, 0x00200055555555, 0xfffffdff00000005, x4, x10, 144, x14)

inst_26:
// rs1==x24, rs2==x23, rd==x7, rs2_w1_val == -257, rs2_w0_val == 2097152, rs1_w0_val == 4294443007
// opcode: kslraw.u ; op1:x24; op2:x23; dest:x7; op1val:0xffffbffffff7ffff;  op2val:0xfffffeff00200000
TEST_PKRR_OP(kslraw.u, x7, x24, x23, 0x0000000000000000, 0xffffbffffff7ffff, 0xfffffeff00200000, x24, x10, 160, x14)

inst_27:
// rs1==x28, rs2==x18, rd==x23, rs2_w1_val == -129, rs1_w0_val == 4290772991, rs1_w1_val == 4294967293
// opcode: kslraw.u ; op1:x28; op2:x18; dest:x23; op1val:0xfffffffdffbfffff;  op2val:0xffffff7f00000006
TEST_PKRR_OP(kslraw.u, x23, x28, x18, 0x0000000000000000, 0xfffffffdffbfffff, 0xffffff7f00000006, x28, x10, 176, x14)

inst_28:
// rs1==x22, rs2==x6, rd==x27, rs2_w1_val == -65, rs2_w0_val == -1073741825, rs1_w0_val == 4294901759
// opcode: kslraw.u ; op1:x22; op2:x6; dest:x27; op1val:0x000007fffeffff;  op2val:0xffffffbfbfffffff
TEST_PKRR_OP(kslraw.u, x27, x22, x6, 0x0000000000000000, 0x000007fffeffff, 0xffffffbfbfffffff, x22, x10, 192, x14)

inst_29:
// rs1==x21, rs2==x12, rd==x22, rs2_w1_val == -33, rs2_w0_val == 16384, rs1_w1_val == 4294967167
// opcode: kslraw.u ; op1:x21; op2:x12; dest:x22; op1val:0xffffff7f00000003;  op2val:0xffffffdf00004000
TEST_PKRR_OP(kslraw.u, x22, x21, x12, 0x0000000000000000, 0xffffff7f00000003, 0xffffffdf00004000, x21, x10, 208, x2)

inst_30:
// rs1==x6, rs2==x8, rd==x28, rs2_w1_val == -17, rs2_w0_val == 4
// opcode: kslraw.u ; op1:x6; op2:x8; dest:x28; op1val:0x0000120000000a;  op2val:0xffffffef00000004
TEST_PKRR_OP(kslraw.u, x28, x6, x8, 0x0000000000000000, 0x0000120000000a, 0xffffffef00000004, x6, x10, 224, x2)

inst_31:
// rs1==x27, rs2==x30, rd==x18, rs2_w1_val == -9, rs1_w0_val == 8, rs2_w0_val == -524289, rs1_w1_val == 4294967263
// opcode: kslraw.u ; op1:x27; op2:x30; dest:x18; op1val:0xffffffdf00000008;  op2val:0xfffffff7fff7ffff
TEST_PKRR_OP(kslraw.u, x18, x27, x30, 0x0000000000000000, 0xffffffdf00000008, 0xfffffff7fff7ffff, x27, x10, 240, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs2_w1_val == -5, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x0000060000000c;  op2val:0xfffffffbffffbfff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x0000060000000c, 0xfffffffbffffbfff, x30, x1, 0, x2)

inst_33:
// rs2_w1_val == -3, rs1_w0_val == 4261412863, rs2_w0_val == -131073
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000afdffffff;  op2val:0xfffffffdfffdffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00000afdffffff, 0xfffffffdfffdffff, x30, x1, 16, x2)

inst_34:
// rs2_w1_val == -2, rs2_w0_val == 1048576, rs1_w0_val == 1024
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000400;  op2val:0xfffffffe00100000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00000600000400, 0xfffffffe00100000, x30, x1, 32, x2)

inst_35:
// rs2_w1_val == -2147483648, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000bffffff7f;  op2val:0x8000000000100000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00000bffffff7f, 0x8000000000100000, x30, x1, 48, x2)

inst_36:
// rs2_w1_val == 1073741824, rs1_w1_val == 268435456
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000000b;  op2val:0x40000000fffdffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x100000000000000b, 0x40000000fffdffff, x30, x1, 64, x2)

inst_37:
// rs2_w1_val == 536870912, rs1_w0_val == 268435456, rs2_w0_val == 32768
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f10000000;  op2val:0x2000000000008000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffffff7f10000000, 0x2000000000008000, x30, x1, 80, x2)

inst_38:
// rs2_w1_val == 268435456, rs2_w0_val == -268435457
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff55555555;  op2val:0x10000000efffffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffffbfff55555555, 0x10000000efffffff, x30, x1, 96, x2)

inst_39:
// rs2_w1_val == 134217728, rs2_w0_val == 524288, rs1_w0_val == 256, rs1_w1_val == 4294443007
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000100;  op2val:0x800000000080000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000100, 0x800000000080000, x30, x1, 112, x2)

inst_40:
// rs2_w1_val == 67108864, rs1_w1_val == 4294967287
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fffffffb;  op2val:0x4000000bfffffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffffffb, 0x4000000bfffffff, x30, x1, 128, x2)

inst_41:
// rs2_w1_val == 33554432, rs1_w0_val == 16384, rs2_w0_val == -33
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00004000;  op2val:0x2000000ffffffdf
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffffffbf00004000, 0x2000000ffffffdf, x30, x1, 144, x2)

inst_42:
// rs2_w1_val == 16777216, rs1_w0_val == 1
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00001200000001;  op2val:0x10000003fffffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00001200000001, 0x10000003fffffff, x30, x1, 160, x2)

inst_43:
// rs2_w1_val == 8388608, rs1_w0_val == 4, rs2_w0_val == 8388608
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000004;  op2val:0x80000000800000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000004, 0x80000000800000, x30, x1, 176, x2)

inst_44:
// rs2_w1_val == 4194304, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x0020000000000f;  op2val:0x400000ffff7fff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x0020000000000f, 0x400000ffff7fff, x30, x1, 192, x2)

inst_45:
// rs2_w1_val == 2097152, rs1_w1_val == 4294967039
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000005;  op2val:0x20000000000040
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000005, 0x20000000000040, x30, x1, 208, x2)

inst_46:
// rs2_w1_val == 1048576, rs1_w0_val == 2048
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000800;  op2val:0x100000ffefffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000800, 0x100000ffefffff, x30, x1, 224, x2)

inst_47:
// rs2_w1_val == 524288, rs2_w0_val == -2097153
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000c08000000;  op2val:0x080000ffdfffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00000c08000000, 0x080000ffdfffff, x30, x1, 240, x2)

inst_48:
// rs2_w1_val == 262144, rs1_w0_val == 2863311530, rs2_w0_val == 33554432
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x000800aaaaaaaa;  op2val:0x04000002000000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x000800aaaaaaaa, 0x04000002000000, x30, x1, 256, x2)

inst_49:
// rs2_w1_val == 131072, rs2_w0_val == 8192, rs1_w1_val == 4286578687, rs1_w0_val == 524288
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00080000;  op2val:0x02000000002000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xff7fffff00080000, 0x02000000002000, x30, x1, 272, x2)

inst_50:
// rs2_w1_val == 65536, rs1_w1_val == 4227858431, rs2_w0_val == 32
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000009;  op2val:0x01000000000020
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000009, 0x01000000000020, x30, x1, 288, x2)

inst_51:
// rs2_w1_val == 32768, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffbffff;  op2val:0x008000fffffff9
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x800000fffbffff, 0x008000fffffff9, x30, x1, 304, x2)

inst_52:
// rs2_w1_val == 16384, rs2_w0_val == 262144
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffbffffff;  op2val:0x00400000040000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffffbffffbffffff, 0x00400000040000, x30, x1, 320, x2)

inst_53:
// rs1_w0_val == 8192, rs2_w0_val == -5
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00002000;  op2val:0x200000fffffffb
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffefffff00002000, 0x200000fffffffb, x30, x1, 336, x2)

inst_54:
// rs1_w0_val == 4096, rs1_w1_val == 4290772991
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00001000;  op2val:0xeffffffffffffff6
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffbfffff00001000, 0xeffffffffffffff6, x30, x1, 352, x2)

inst_55:
// rs1_w0_val == 512, rs1_w1_val == 4
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000200;  op2val:0xffffff7ffffffeff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00000400000200, 0xffffff7ffffffeff, x30, x1, 368, x2)

inst_56:
// rs1_w0_val == 64, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000040;  op2val:0xffbfffff00080000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000040, 0xffbfffff00080000, x30, x1, 384, x2)

inst_57:
// rs1_w0_val == 32, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000020;  op2val:0xaaaaaaaabfffffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000020, 0xaaaaaaaabfffffff, x30, x1, 400, x2)

inst_58:
// rs1_w0_val == 2, rs2_w0_val == 2048, rs1_w1_val == 4294967279
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000002;  op2val:0x00000300000800
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffffffef00000002, 0x00000300000800, x30, x1, 416, x2)

inst_59:
// rs2_w1_val == 8192, rs1_w0_val == 4194304
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00200000400000;  op2val:0x0020003fffffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00200000400000, 0x0020003fffffff, x30, x1, 432, x2)

inst_60:
// rs2_w1_val == 2048, rs1_w1_val == 262144, rs2_w0_val == 2, rs1_w0_val == 4278190079
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x040000feffffff;  op2val:0x00080000000002
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x040000feffffff, 0x00080000000002, x30, x1, 448, x2)

inst_61:
// rs2_w1_val == 1024, rs1_w1_val == 4294901759
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000020;  op2val:0x000400bfffffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000020, 0x000400bfffffff, x30, x1, 464, x2)

inst_62:
// rs2_w1_val == 512, rs1_w1_val == 16384
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x0040000000000c;  op2val:0x000200ffffffef
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x0040000000000c, 0x000200ffffffef, x30, x1, 480, x2)

inst_63:
// rs2_w1_val == 256, rs2_w0_val == -2
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x000007fffeffff;  op2val:0x000100fffffffe
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x000007fffeffff, 0x000100fffffffe, x30, x1, 496, x2)

inst_64:
// rs2_w1_val == 128, rs1_w1_val == 2147483647
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff0000000f;  op2val:0x00008000000080
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x7fffffff0000000f, 0x00008000000080, x30, x1, 512, x2)

inst_65:
// rs2_w1_val == 64, rs1_w1_val == 2
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000010;  op2val:0x000040ffdfffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00000200000010, 0x000040ffdfffff, x30, x1, 528, x2)

inst_66:
// rs2_w1_val == 32, rs1_w1_val == 64
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000011;  op2val:0x000020c0000000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00004000000011, 0x000020c0000000, x30, x1, 544, x2)

inst_67:
// rs2_w1_val == 16, rs1_w1_val == 4294963199
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00400000;  op2val:0x000010fffffeff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffffefff00400000, 0x000010fffffeff, x30, x1, 560, x2)

inst_68:
// rs2_w1_val == 8, rs1_w1_val == 4096
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000011;  op2val:0x00000800004000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00100000000011, 0x00000800004000, x30, x1, 576, x2)

inst_69:
// rs2_w1_val == 4, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000300000013;  op2val:0x000004fffffeff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00000300000013, 0x000004fffffeff, x30, x1, 592, x2)

inst_70:
// rs2_w1_val == 2, rs1_w1_val == 32
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00002010000000;  op2val:0x00000200010000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00002010000000, 0x00000200010000, x30, x1, 608, x2)

inst_71:
// rs2_w1_val == 1, rs1_w1_val == 4026531839
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000020;  op2val:0x00000180000000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xefffffff00000020, 0x00000180000000, x30, x1, 624, x2)

inst_72:
// rs2_w1_val == 0, rs1_w0_val == 3221225471
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffbfffffff;  op2val:0x00000000001000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xf7ffffffbfffffff, 0x00000000001000, x30, x1, 640, x2)

inst_73:
// rs2_w1_val == -1, rs2_w0_val == 256
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000012;  op2val:0xffffffff00000100
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x40000000000012, 0xffffffff00000100, x30, x1, 656, x2)

inst_74:
// rs2_w0_val == -1431655766, rs1_w1_val == 4294967291, rs1_w0_val == 4286578687
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbff7fffff;  op2val:0xf7ffffffaaaaaaaa
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfffffffbff7fffff, 0xf7ffffffaaaaaaaa, x30, x1, 672, x2)

inst_75:
// rs2_w0_val == 2147483647, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000800;  op2val:0x0000047fffffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000800, 0x0000047fffffff, x30, x1, 688, x2)

inst_76:
// rs2_w0_val == -536870913, rs1_w1_val == 65536
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x010000ff7fffff;  op2val:0x000006dfffffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x010000ff7fffff, 0x000006dfffffff, x30, x1, 704, x2)

inst_77:
// rs2_w0_val == -134217729, rs1_w0_val == 4294967279
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffffffef;  op2val:0x4000000f7ffffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffffffbfffffffef, 0x4000000f7ffffff, x30, x1, 720, x2)

inst_78:
// rs2_w0_val == -67108865, rs1_w0_val == 4294966783
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffffdff;  op2val:0xbffffffffbffffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x40000000fffffdff, 0xbffffffffbffffff, x30, x1, 736, x2)

inst_79:
// rs2_w0_val == -33554433, rs1_w1_val == 131072, rs1_w0_val == 4293918719
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x020000ffefffff;  op2val:0xffffffdffdffffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x020000ffefffff, 0xffffffdffdffffff, x30, x1, 752, x2)

inst_80:
// rs2_w0_val == -8388609, rs1_w1_val == 512
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x0002000000000e;  op2val:0x000400ff7fffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x0002000000000e, 0x000400ff7fffff, x30, x1, 768, x2)

inst_81:
// rs2_w0_val == -65537, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000001;  op2val:0xfffffefffffeffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffffffef00000001, 0xfffffefffffeffff, x30, x1, 784, x2)

inst_82:
// rs2_w0_val == -8193, rs1_w0_val == 4294967039
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffeff;  op2val:0x000009ffffdfff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffeff, 0x000009ffffdfff, x30, x1, 800, x2)

inst_83:
// rs2_w0_val == -4097, rs1_w1_val == 4294967294
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000012;  op2val:0x4000000ffffefff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000012, 0x4000000ffffefff, x30, x1, 816, x2)

inst_84:
// rs2_w0_val == -2049, rs1_w1_val == 4261412863
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff08000000;  op2val:0x000001fffff7ff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfdffffff08000000, 0x000001fffff7ff, x30, x1, 832, x2)

inst_85:
// rs2_w0_val == 16, rs1_w0_val == 2147483647
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff7fffffff;  op2val:0xffffffdf00000010
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xdfffffff7fffffff, 0xffffffdf00000010, x30, x1, 848, x2)

inst_86:
// rs2_w0_val == 1, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000e00000006;  op2val:0x800000000000001
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00000e00000006, 0x800000000000001, x30, x1, 864, x2)

inst_87:
// rs2_w0_val == -1, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00001300000009;  op2val:0xfffffff7ffffffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00001300000009, 0xfffffff7ffffffff, x30, x1, 880, x2)

inst_88:
// rs1_w1_val == 2863311530, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffffffff;  op2val:0xaaaaaaaafffffffc
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffffffff, 0xaaaaaaaafffffffc, x30, x1, 896, x2)

inst_89:
// rs1_w1_val == 1431655765, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000011;  op2val:0x200000fffffeff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x5555555500000011, 0x200000fffffeff, x30, x1, 912, x2)

inst_90:
// rs1_w1_val == 4278190079, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00002000;  op2val:0x80000000fffff7ff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfeffffff00002000, 0x80000000fffff7ff, x30, x1, 928, x2)

inst_91:
// rs1_w1_val == 4294934527, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff08000000;  op2val:0xbffffffffeffffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffff7fff08000000, 0xbffffffffeffffff, x30, x1, 944, x2)

inst_92:
// rs1_w1_val == 4294959103, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000004;  op2val:0x20000000fffffffe
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000004, 0x20000000fffffffe, x30, x1, 960, x2)

inst_93:
// rs1_w1_val == 4294965247, rs1_w0_val == 32768
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00008000;  op2val:0xfffffffe00008000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00008000, 0xfffffffe00008000, x30, x1, 976, x2)

inst_94:
// rs1_w1_val == 4294966783, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff0000000d;  op2val:0xfffffffadfffffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfffffdff0000000d, 0xfffffffadfffffff, x30, x1, 992, x2)

inst_95:
// rs1_w1_val == 2147483648, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000007;  op2val:0x000080ffffdfff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x8000000000000007, 0x000080ffffdfff, x30, x1, 1008, x2)

inst_96:
// rs1_w1_val == 536870912, rs2_w0_val == -1025
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000012;  op2val:0x008000fffffbff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x2000000000000012, 0x008000fffffbff, x30, x1, 1024, x2)

inst_97:
// rs1_w1_val == 134217728, rs2_w0_val == -65
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffffdff;  op2val:0xfffffff8ffffffbf
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x8000000fffffdff, 0xfffffff8ffffffbf, x30, x1, 1040, x2)

inst_98:
// rs1_w1_val == 67108864, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x400000000080000;  op2val:0xbfffffffdfffffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x400000000080000, 0xbfffffffdfffffff, x30, x1, 1056, x2)

inst_99:
// rs1_w1_val == 33554432, rs2_w0_val == -9
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000aaaaaaaa;  op2val:0xfffffffafffffff7
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x2000000aaaaaaaa, 0xfffffffafffffff7, x30, x1, 1072, x2)

inst_100:
// rs1_w1_val == 16777216, rs2_w0_val == -3
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000002;  op2val:0xfffffff7fffffffd
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x100000000000002, 0xfffffff7fffffffd, x30, x1, 1088, x2)

inst_101:
// rs1_w1_val == 2097152, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffbffff;  op2val:0xfeffffff00000800
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x200000fffbffff, 0xfeffffff00000800, x30, x1, 1104, x2)

inst_102:
// rs1_w1_val == 524288, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x080000aaaaaaaa;  op2val:0x000006efffffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x080000aaaaaaaa, 0x000006efffffff, x30, x1, 1120, x2)

inst_103:
// rs1_w1_val == 32768, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000002;  op2val:0x000004ffffbfff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00800000000002, 0x000004ffffbfff, x30, x1, 1136, x2)

inst_104:
// rs1_w1_val == 1024, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000003;  op2val:0x400000000200000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00040000000003, 0x400000000200000, x30, x1, 1152, x2)

inst_105:
// rs1_w1_val == 256, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x0001000000000a;  op2val:0xfffffffd00000002
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x0001000000000a, 0xfffffffd00000002, x30, x1, 1168, x2)

inst_106:
// rs1_w1_val == 128, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00008000000013;  op2val:0xfffffffbffffffef
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00008000000013, 0xfffffffbffffffef, x30, x1, 1184, x2)

inst_107:
// rs1_w1_val == 8, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x000008fff7ffff;  op2val:0xfefffffffffffeff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x000008fff7ffff, 0xfefffffffffffeff, x30, x1, 1200, x2)

inst_108:
// rs1_w1_val == 1, rs2_w0_val == 67108864
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x0000010000000c;  op2val:0xfffffffb04000000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x0000010000000c, 0xfffffffb04000000, x30, x1, 1216, x2)

inst_109:
// rs1_w1_val == 4294967295, rs2_w0_val == -513
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffff7f;  op2val:0x000080fffffdff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffffffffffffff7f, 0x000080fffffdff, x30, x1, 1232, x2)

inst_110:
// rs1_w1_val == 0, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000800;  op2val:0x200000ffffffbf
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00000000000800, 0x200000ffffffbf, x30, x1, 1248, x2)

inst_111:
// rs1_w0_val == 3758096383, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffdfffffff;  op2val:0x00000000008000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffefffffdfffffff, 0x00000000008000, x30, x1, 1264, x2)

inst_112:
// rs1_w0_val == 4026531839, rs2_w0_val == 268435456
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x000007efffffff;  op2val:0xffffffdf10000000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x000007efffffff, 0xffffffdf10000000, x30, x1, 1280, x2)

inst_113:
// rs1_w0_val == 4160749567, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffff7ffffff;  op2val:0xfffffffcfff7ffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x7ffffffff7ffffff, 0xfffffffcfff7ffff, x30, x1, 1296, x2)

inst_114:
// rs1_w0_val == 4294836223, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffdffff;  op2val:0xfffffff6fffeffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x000800fffdffff, 0xfffffff6fffeffff, x30, x1, 1312, x2)

inst_115:
// rs1_w0_val == 4294934527, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffff7fff;  op2val:0xfffffbfffffeffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x000400ffff7fff, 0xfffffbfffffeffff, x30, x1, 1328, x2)

inst_116:
// rs1_w0_val == 4294963199, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x040000ffffefff;  op2val:0x20000000fffffffb
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x040000ffffefff, 0x20000000fffffffb, x30, x1, 1344, x2)

inst_117:
// rs1_w0_val == 4294965247, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffff7ff;  op2val:0x000020fffffff9
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffffffeffffff7ff, 0x000020fffffff9, x30, x1, 1360, x2)

inst_118:
// rs1_w0_val == 4294966271, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffffbff;  op2val:0x80000000000007
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffffbff, 0x80000000000007, x30, x1, 1376, x2)

inst_119:
// rs1_w0_val == 4294967231, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffffbf;  op2val:0xffffffefffffffef
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffffdfffffffffbf, 0xffffffefffffffef, x30, x1, 1392, x2)

inst_120:
// rs2_w0_val == 536870912, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00001300000009;  op2val:0x08000020000000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00001300000009, 0x08000020000000, x30, x1, 1408, x2)

inst_121:
// rs1_w0_val == 4294967263, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffffffdf;  op2val:0xfffffff6aaaaaaaa
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffffefffffffffdf, 0xfffffff6aaaaaaaa, x30, x1, 1424, x2)

inst_122:
// rs1_w0_val == 4294967287, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffffff7;  op2val:0x00040004000000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x004000fffffff7, 0x00040004000000, x30, x1, 1440, x2)

inst_123:
// rs2_w0_val == 16777216, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffffff7ffff;  op2val:0x00020001000000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfffbfffffff7ffff, 0x00020001000000, x30, x1, 1456, x2)

inst_124:
// rs1_w0_val == 4294967294, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x000005fffffffe;  op2val:0x002000ffff7fff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x000005fffffffe, 0x002000ffff7fff, x30, x1, 1472, x2)

inst_125:
// rs1_w0_val == 2147483648, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff80000000;  op2val:0xfffeffff00000010
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffff7fff80000000, 0xfffeffff00000010, x30, x1, 1488, x2)

inst_126:
// rs2_w0_val == 4194304, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffbfffffff;  op2val:0x200000000400000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfdffffffbfffffff, 0x200000000400000, x30, x1, 1504, x2)

inst_127:
// rs1_w0_val == 1073741824, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf40000000;  op2val:0x1000000fffffffb
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffffffbf40000000, 0x1000000fffffffb, x30, x1, 1520, x2)

inst_128:
// rs2_w0_val == 1024, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd08000000;  op2val:0xfffffff900000400
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfffffffd08000000, 0xfffffff900000400, x30, x1, 1536, x2)

inst_129:
// rs1_w0_val == 536870912, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x400000020000000;  op2val:0x00080000000100
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x400000020000000, 0x00080000000100, x30, x1, 1552, x2)

inst_130:
// rs1_w0_val == 67108864, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000004000000;  op2val:0xfffff7ff00001000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x2000000004000000, 0xfffff7ff00001000, x30, x1, 1568, x2)

inst_131:
// rs1_w0_val == 33554432, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff02000000;  op2val:0xffffffbfc0000000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xf7ffffff02000000, 0xffffffbfc0000000, x30, x1, 1584, x2)

inst_132:
// rs1_w0_val == 16777216, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000701000000;  op2val:0x00200000000004
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00000701000000, 0x00200000000004, x30, x1, 1600, x2)

inst_133:
// rs1_w0_val == 8388608, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500800000;  op2val:0xfffffffefff7ffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x5555555500800000, 0xfffffffefff7ffff, x30, x1, 1616, x2)

inst_134:
// rs1_w0_val == 1048576, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00001200100000;  op2val:0x000040ffffefff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00001200100000, 0x000040ffffefff, x30, x1, 1632, x2)

inst_135:
// rs1_w0_val == 262144, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00020000040000;  op2val:0xfffffffc00000009
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00020000040000, 0xfffffffc00000009, x30, x1, 1648, x2)

inst_136:
// rs2_w0_val == 512, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffff7fff;  op2val:0x4000000000000200
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x001000ffff7fff, 0x4000000000000200, x30, x1, 1664, x2)

inst_137:
// rs1_w0_val == 65536, 
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x00010000010000;  op2val:0xfff7ffff00040000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x00010000010000, 0xfff7ffff00040000, x30, x1, 1680, x2)

inst_138:
// rs2_w1_val == 1431655765, rs1_w1_val == 4292870143, rs1_w0_val == 4294967167
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffffff7f;  op2val:0x55555555c0000000
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xffdfffffffffff7f, 0x55555555c0000000, x30, x1, 1696, x2)

inst_139:
// rs2_w1_val == 2147483647, rs2_w0_val == 8, rs1_w0_val == 4227858431, rs1_w1_val == 8388608
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x800000fbffffff;  op2val:0x7fffffff00000008
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x800000fbffffff, 0x7fffffff00000008, x30, x1, 1712, x2)

inst_140:
// rs2_w1_val == -4194305, rs1_w1_val == 4294705151, rs1_w0_val == 4294959103, rs2_w0_val == -262145
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffdfff;  op2val:0xffbffffffffbffff
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffdfff, 0xffbffffffffbffff, x30, x1, 1728, x2)

inst_141:
// rs2_w1_val == -131073, rs1_w0_val == 4292870143
// opcode: kslraw.u ; op1:x30; op2:x29; dest:x31; op1val:0x000003ffdfffff;  op2val:0xfffdffff00000007
TEST_PKRR_OP(kslraw.u, x31, x30, x29, 0x0000000000000000, 0x000003ffdfffff, 0xfffdffff00000007, x30, x1, 1744, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x10_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 220*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
