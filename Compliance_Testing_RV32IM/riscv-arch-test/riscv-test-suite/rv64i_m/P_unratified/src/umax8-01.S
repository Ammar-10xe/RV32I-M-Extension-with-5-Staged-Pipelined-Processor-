
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umax8 instruction of the RISC-V RV64PZicsr extension for the umax8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umax8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rd != rs2, rs1==x18, rs2==x29, rd==x18, rs1_b0_val == 0, rs1_b7_val != rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b0_val == 223, rs1_b6_val != rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b4_val == 255, rs1_b5_val != rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b4_val != rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b3_val != rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b3_val == 32, rs2_b3_val == 8, rs2_b6_val == 32, rs1_b1_val == 8, rs1_b7_val == 251, rs1_b5_val == 170, rs2_b2_val == 128
// opcode: umax8 ; op1:x18; op2:x29; dest:x18; op1val:0xfb06aaff20110800;  op2val:0xa201111088005df
TEST_RR_OP(umax8, x18, x18, x29, 0x0000000000000000, 0xfb06aaff20110800, 0xa201111088005df, x15, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x11, rs2==x19, rd==x29, rs1_b7_val == rs2_b7_val and rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b3_val == 170, rs1_b6_val == 251, rs2_b4_val == 170, rs2_b1_val == 223, rs1_b0_val != rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b1_val == 247
// opcode: umax8 ; op1:x11; op2:x19; dest:x29; op1val:0x9fb0b03aa09f70f;  op2val:0x9060eaa0b07df12
TEST_RR_OP(umax8, x29, x11, x19, 0x0000000000000000, 0x9fb0b03aa09f70f, 0x9060eaa0b07df12, x15, 8, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x25, rs2==x25, rd==x17, rs1_b6_val == rs2_b6_val and rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b4_val == 0, rs2_b7_val == 1, rs2_b1_val == 191, rs1_b1_val == 223, rs1_b7_val == 170, rs2_b3_val == 1, rs1_b4_val == 64, rs1_b2_val == 253, rs2_b2_val == 251, rs2_b0_val == 170, rs2_b5_val == 247
// opcode: umax8 ; op1:x25; op2:x25; dest:x17; op1val:0xaa0c13400dfddf0d;  op2val:0x10cf70001fbbfaa
TEST_RR_OP(umax8, x17, x25, x25, 0x0000000000000000, 0xaa0c13400dfddf0d, 0x10cf70001fbbfaa, x15, 16, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs1_b5_val == rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b7_val == 255, rs1_b3_val == 247, rs2_b2_val == 0, rs2_b0_val == 32, rs1_b0_val == 8, rs1_b6_val == 64, rs1_b4_val == 32, rs1_b2_val == 239
// opcode: umax8 ; op1:x6; op2:x6; dest:x6; op1val:0xaa401320f7efdf08;  op2val:0xff0a13030a000320
TEST_RR_OP(umax8, x6, x6, x6, 0x0000000000000000, 0xaa401320f7efdf08, 0xff0a13030a000320, x15, 24, x3)

inst_4:
// rs2 == rd != rs1, rs1==x9, rs2==x0, rd==x0, rs1_b4_val == rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b0_val == 191, rs2_b5_val == 64, rs2_b7_val == 191, rs2_b6_val == 2, rs2_b1_val == 2, rs1_b1_val == 1, rs2_b2_val == 253
// opcode: umax8 ; op1:x9; op2:x0; dest:x0; op1val:0x606060e06ef0107;  op2val:0xbf02400e0ffd02bf
TEST_RR_OP(umax8, x0, x9, x0, 0x0000000000000000, 0x606060e06ef0107, 0xbf02400e0ffd02bf, x15, 32, x3)

inst_5:
// rs1==x29, rs2==x30, rd==x22, rs1_b3_val == rs2_b3_val and rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b2_val == 32, rs1_b6_val == 127, rs2_b0_val == 64, rs1_b5_val == 255, rs1_b4_val == 128, rs2_b6_val == 0, rs1_b2_val == 223, rs1_b7_val == 128, rs2_b1_val == 4, rs2_b7_val == 16
// opcode: umax8 ; op1:x29; op2:x30; dest:x22; op1val:0x807fff800cdf060c;  op2val:0x10000e0e0c200440
TEST_RR_OP(umax8, x22, x29, x30, 0x0000000000000000, 0x807fff800cdf060c, 0x10000e0e0c200440, x15, 40, x3)

inst_6:
// rs1==x16, rs2==x24, rd==x8, rs1_b2_val == rs2_b2_val and rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b5_val == 251, rs1_b6_val == 85, rs1_b0_val == 16, rs2_b3_val == 128, rs2_b4_val == 4, rs2_b6_val == 8, rs1_b4_val == 253, rs2_b5_val == 191
// opcode: umax8 ; op1:x16; op2:x24; dest:x8; op1val:0x655fbfd110b0510;  op2val:0xf08bf04800b1309
TEST_RR_OP(umax8, x8, x16, x24, 0x0000000000000000, 0x655fbfd110b0510, 0xf08bf04800b1309, x15, 48, x3)

inst_7:
// rs1==x12, rs2==x2, rd==x11, rs1_b1_val == rs2_b1_val and rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b0_val == 247, rs1_b5_val == 128, rs2_b2_val == 2, rs2_b6_val == 127, rs2_b1_val == 253, rs2_b4_val == 239, rs2_b7_val == 127, rs1_b1_val == 253
// opcode: umax8 ; op1:x12; op2:x2; dest:x11; op1val:0xe0380130b07fd12;  op2val:0x7f7f07ef0702fdf7
TEST_RR_OP(umax8, x11, x12, x2, 0x0000000000000000, 0xe0380130b07fd12, 0x7f7f07ef0702fdf7, x15, 56, x3)

inst_8:
// rs1==x31, rs2==x26, rd==x4, rs1_b0_val == rs2_b0_val and rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b5_val == 254, rs2_b3_val == 127, rs1_b7_val == 255, rs2_b5_val == 170, rs2_b2_val == 247
// opcode: umax8 ; op1:x31; op2:x26; dest:x4; op1val:0xff12fe0f050d0805;  op2val:0xf05aa077ff70605
TEST_RR_OP(umax8, x4, x31, x26, 0x0000000000000000, 0xff12fe0f050d0805, 0xf05aa077ff70605, x15, 64, x3)

inst_9:
// rs1==x10, rs2==x4, rd==x25, rs2_b7_val == 170, rs2_b0_val == 128, rs2_b5_val == 8, rs1_b0_val == 1, rs1_b1_val == 251, rs1_b7_val == 85, rs1_b2_val == 85
// opcode: umax8 ; op1:x10; op2:x4; dest:x25; op1val:0x550faa111355fb01;  op2val:0xaa20080c06020e80
TEST_RR_OP(umax8, x25, x10, x4, 0x0000000000000000, 0x550faa111355fb01, 0xaa20080c06020e80, x15, 72, x3)

inst_10:
// rs1==x1, rs2==x13, rd==x7, rs2_b7_val == 85, rs2_b2_val == 64, rs1_b2_val == 32, rs2_b6_val == 239, rs1_b5_val == 0, rs1_b4_val == 127, rs1_b3_val == 1, rs2_b3_val == 255, rs2_b5_val == 223, rs1_b0_val == 85
// opcode: umax8 ; op1:x1; op2:x13; dest:x7; op1val:0xaa0e007f01200655;  op2val:0x55efdf05ff400b0b
TEST_RR_OP(umax8, x7, x1, x13, 0x0000000000000000, 0xaa0e007f01200655, 0x55efdf05ff400b0b, x15, 80, x3)

inst_11:
// rs1==x5, rs2==x10, rd==x31, rs2_b7_val == 223, rs1_b4_val == 0, rs1_b2_val == 8, rs2_b3_val == 32, rs1_b1_val == 32, rs1_b5_val == 127
// opcode: umax8 ; op1:x5; op2:x10; dest:x31; op1val:0x80407f0001082011;  op2val:0xdf00400c200c0b03
TEST_RR_OP(umax8, x31, x5, x10, 0x0000000000000000, 0x80407f0001082011, 0xdf00400c200c0b03, x15, 88, x3)

inst_12:
// rs1==x28, rs2==x14, rd==x23, rs2_b7_val == 239, rs1_b2_val == 1, rs2_b2_val == 255, rs1_b6_val == 239, rs2_b3_val == 16, rs1_b4_val == 191, rs1_b3_val == 255, rs1_b7_val == 191, rs2_b4_val == 128, rs1_b0_val == 127
// opcode: umax8 ; op1:x28; op2:x14; dest:x23; op1val:0xbfef12bfff01fd7f;  op2val:0xef02aa8010ff0213
TEST_RR_OP(umax8, x23, x28, x14, 0x0000000000000000, 0xbfef12bfff01fd7f, 0xef02aa8010ff0213, x15, 96, x3)

inst_13:
// rs1==x24, rs2==x12, rd==x28, rs2_b7_val == 247, rs1_b0_val == 223, rs1_b3_val == 127, rs2_b3_val == 223, rs2_b5_val == 255, rs1_b1_val == 191, rs2_b1_val == 239, rs2_b4_val == 32, rs1_b5_val == 85, rs1_b7_val == 32
// opcode: umax8 ; op1:x24; op2:x12; dest:x28; op1val:0x20ef55077fdfbfdf;  op2val:0xf70bff20df0eeff7
TEST_RR_OP(umax8, x28, x24, x12, 0x0000000000000000, 0x20ef55077fdfbfdf, 0xf70bff20df0eeff7, x15, 104, x6)

inst_14:
// rs1==x7, rs2==x22, rd==x3, rs2_b7_val == 251, rs1_b0_val == 64, rs2_b5_val == 0, rs2_b0_val == 1, rs1_b6_val == 128, rs1_b1_val == 239, rs2_b4_val == 16, rs1_b5_val == 223
// opcode: umax8 ; op1:x7; op2:x22; dest:x3; op1val:0xe80df0f0603ef40;  op2val:0xfb0900101007df01
TEST_RR_OP(umax8, x3, x7, x22, 0x0000000000000000, 0xe80df0f0603ef40, 0xfb0900101007df01, x15, 112, x6)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_15:
// rs1==x8, rs2==x23, rd==x5, rs2_b7_val == 253, rs2_b5_val == 4, rs2_b0_val == 4, rs2_b6_val == 254, rs1_b6_val == 8, rs1_b1_val == 0, rs2_b4_val == 255
// opcode: umax8 ; op1:x8; op2:x23; dest:x5; op1val:0xa080a060e0e0012;  op2val:0xfdfe04ffdf130504
TEST_RR_OP(umax8, x5, x8, x23, 0x0000000000000000, 0xa080a060e0e0012, 0xfdfe04ffdf130504, x4, 0, x6)

inst_16:
// rs1==x17, rs2==x5, rd==x15, rs2_b7_val == 254, rs2_b5_val == 32, rs2_b0_val == 254, rs1_b0_val == 128, rs2_b6_val == 223, rs1_b6_val == 223, rs2_b2_val == 127, rs2_b4_val == 64
// opcode: umax8 ; op1:x17; op2:x5; dest:x15; op1val:0x5dffb4006fdbf80;  op2val:0xfedf2040ff7f02fe
TEST_RR_OP(umax8, x15, x17, x5, 0x0000000000000000, 0x5dffb4006fdbf80, 0xfedf2040ff7f02fe, x4, 8, x6)

inst_17:
// rs1==x3, rs2==x21, rd==x13, rs2_b7_val == 128, rs2_b3_val == 170, rs1_b3_val == 85, rs2_b1_val == 251, rs1_b4_val == 223, rs1_b6_val == 16, rs1_b7_val == 247, rs2_b2_val == 239
// opcode: umax8 ; op1:x3; op2:x21; dest:x13; op1val:0xf71011df555508df;  op2val:0x800e0c13aaeffbbf
TEST_RR_OP(umax8, x13, x3, x21, 0x0000000000000000, 0xf71011df555508df, 0x800e0c13aaeffbbf, x4, 16, x6)

inst_18:
// rs1==x21, rs2==x27, rd==x30, rs2_b7_val == 64, rs2_b2_val == 4, rs2_b3_val == 254, rs2_b0_val == 8, rs2_b1_val == 85, rs1_b0_val == 4, rs2_b4_val == 253
// opcode: umax8 ; op1:x21; op2:x27; dest:x30; op1val:0x550e55070320f704;  op2val:0x400e12fdfe045508
TEST_RR_OP(umax8, x30, x21, x27, 0x0000000000000000, 0x550e55070320f704, 0x400e12fdfe045508, x4, 24, x6)

inst_19:
// rs1==x14, rs2==x31, rd==x21, rs2_b7_val == 32, rs2_b3_val == 85, rs1_b3_val == 239, rs1_b6_val == 191, rs2_b0_val == 2, rs2_b4_val == 85, rs1_b1_val == 16
// opcode: umax8 ; op1:x14; op2:x31; dest:x21; op1val:0xabf110fef0a1012;  op2val:0x207f065555f7bf02
TEST_RR_OP(umax8, x21, x14, x31, 0x0000000000000000, 0xabf110fef0a1012, 0x207f065555f7bf02, x4, 32, x6)

inst_20:
// rs1==x2, rs2==x1, rd==x9, rs2_b7_val == 8, rs1_b7_val == 2, rs2_b0_val == 239, rs1_b6_val == 2, rs2_b3_val == 247
// opcode: umax8 ; op1:x2; op2:x1; dest:x9; op1val:0x202050e0312bf0e;  op2val:0x80e030ef7fd03ef
TEST_RR_OP(umax8, x9, x2, x1, 0x0000000000000000, 0x202050e0312bf0e, 0x80e030ef7fd03ef, x4, 40, x6)

inst_21:
// rs1==x15, rs2==x18, rd==x12, rs2_b7_val == 4, rs1_b7_val == 0, rs1_b0_val == 251, rs2_b5_val == 16, rs1_b3_val == 128, rs1_b6_val == 4, rs1_b4_val == 4
// opcode: umax8 ; op1:x15; op2:x18; dest:x12; op1val:0x045504800611fb;  op2val:0x40e10aa070f0c05
TEST_RR_OP(umax8, x12, x15, x18, 0x0000000000000000, 0x045504800611fb, 0x40e10aa070f0c05, x4, 48, x6)

inst_22:
// rs1==x30, rs2==x20, rd==x14, rs2_b7_val == 2, rs1_b5_val == 2, rs1_b4_val == 247, rs1_b0_val == 255
// opcode: umax8 ; op1:x30; op2:x20; dest:x14; op1val:0xa0402f70101fbff;  op2val:0x2021107090f0e07
TEST_RR_OP(umax8, x14, x30, x20, 0x0000000000000000, 0xa0402f70101fbff, 0x2021107090f0e07, x4, 56, x6)

inst_23:
// rs1==x20, rs2==x28, rd==x10, rs2_b7_val == 0, rs1_b0_val == 32, rs1_b1_val == 127, rs1_b6_val == 253, rs2_b3_val == 4, rs2_b4_val == 247, rs1_b2_val == 127, rs1_b7_val == 64
// opcode: umax8 ; op1:x20; op2:x28; dest:x10; op1val:0x40fd7ff7f77f7f20;  op2val:0xfe0ff704201302
TEST_RR_OP(umax8, x10, x20, x28, 0x0000000000000000, 0x40fd7ff7f77f7f20, 0xfe0ff704201302, x4, 64, x6)

inst_24:
// rs1==x19, rs2==x16, rd==x2, rs2_b6_val == 170, rs1_b7_val == 16, rs2_b2_val == 170, rs2_b1_val == 32
// opcode: umax8 ; op1:x19; op2:x16; dest:x2; op1val:0x10120b052003df0e;  op2val:0x3aa001209aa200c
TEST_RR_OP(umax8, x2, x19, x16, 0x0000000000000000, 0x10120b052003df0e, 0x3aa001209aa200c, x4, 72, x6)

inst_25:
// rs1==x23, rs2==x11, rd==x27, rs2_b6_val == 85, rs2_b1_val == 170, rs1_b3_val == 16, rs1_b6_val == 255
// opcode: umax8 ; op1:x23; op2:x11; dest:x27; op1val:0xfffb0010fd0c03;  op2val:0x13550d40fff7aaf7
TEST_RR_OP(umax8, x27, x23, x11, 0x0000000000000000, 0xfffb0010fd0c03, 0x13550d40fff7aaf7, x4, 80, x6)

inst_26:
// rs1==x26, rs2==x9, rd==x16, rs2_b6_val == 191, rs1_b2_val == 0
// opcode: umax8 ; op1:x26; op2:x9; dest:x16; op1val:0xe0503070b000c0a;  op2val:0xefbf0e06f70baafe
TEST_RR_OP(umax8, x16, x26, x9, 0x0000000000000000, 0xe0503070b000c0a, 0xefbf0e06f70baafe, x4, 88, x5)

inst_27:
// rs1==x27, rs2==x3, rd==x20, rs1_b3_val == 191, rs2_b1_val == 16
// opcode: umax8 ; op1:x27; op2:x3; dest:x20; op1val:0xf70baa20bf122005;  op2val:0x6030bfdf713100e
TEST_RR_OP(umax8, x20, x27, x3, 0x0000000000000000, 0xf70baa20bf122005, 0x6030bfdf713100e, x4, 96, x5)

inst_28:
// rs1==x22, rs2==x8, rd==x19, rs1_b3_val == 223, rs2_b1_val == 255, rs1_b2_val == 170, rs1_b5_val == 16
// opcode: umax8 ; op1:x22; op2:x8; dest:x19; op1val:0x40ff1013dfaa0e00;  op2val:0xfb0513000aaaff0f
TEST_RR_OP(umax8, x19, x22, x8, 0x0000000000000000, 0x40ff1013dfaa0e00, 0xfb0513000aaaff0f, x4, 104, x5)

inst_29:
// rs1==x0, rs2==x7, rd==x24, rs1_b3_val == 251, rs2_b5_val == 85, rs2_b3_val == 191
// opcode: umax8 ; op1:x0; op2:x7; dest:x24; op1val:0x5800705fb090e0e;  op2val:0xd025512bf13ef06
TEST_RR_OP(umax8, x24, x0, x7, 0x0000000000000000, 0x5800705fb090e0e, 0xd025512bf13ef06, x4, 112, x5)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_30:
// rs1==x13, rs2==x17, rd==x1, rs1_b3_val == 253, rs2_b2_val == 8, rs1_b4_val == 8
// opcode: umax8 ; op1:x13; op2:x17; dest:x1; op1val:0x40065508fd130380;  op2val:0xd00090301080f0d
TEST_RR_OP(umax8, x1, x13, x17, 0x0000000000000000, 0x40065508fd130380, 0xd00090301080f0d, x2, 0, x5)

inst_31:
// rs1==x4, rs2==x15, rd==x26, rs1_b3_val == 254, rs2_b6_val == 4, rs1_b5_val == 239, rs2_b5_val == 239
// opcode: umax8 ; op1:x4; op2:x15; dest:x26; op1val:0xe04ef7ffe0ffb20;  op2val:0xa04ef12090c1303
TEST_RR_OP(umax8, x26, x4, x15, 0x0000000000000000, 0xe04ef7ffe0ffb20, 0xa04ef12090c1303, x2, 8, x5)

inst_32:
// rs1_b3_val == 64, rs1_b7_val == 254, rs1_b5_val == 32, rs1_b2_val == 255
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe0f201340ffdf7f;  op2val:0xadf05f72003550f
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xfe0f201340ffdf7f, 0xadf05f72003550f, x2, 16, x5)

inst_33:
// rs1_b3_val == 8, rs2_b3_val == 64
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x13092005080308ff;  op2val:0xdf040d07400955bf
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x13092005080308ff, 0xdf040d07400955bf, x2, 24, x5)

inst_34:
// rs1_b3_val == 4, rs1_b5_val == 4
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x110c04fd04070655;  op2val:0x80aef0fdf0d0e0e
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x110c04fd04070655, 0x80aef0fdf0d0e0e, x2, 32, x5)

inst_35:
// rs1_b3_val == 2, rs2_b1_val == 128, rs2_b3_val == 239
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa7f050a02030e08;  op2val:0x1007060eef0a80df
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xaa7f050a02030e08, 0x1007060eef0a80df, x2, 40, x5)

inst_36:
// rs1_b3_val == 0, rs1_b6_val == 32, rs1_b1_val == 255, rs2_b6_val == 1
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x5520550e0005ff13;  op2val:0x8001120c1003200e
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x5520550e0005ff13, 0x8001120c1003200e, x2, 48, x5)

inst_37:
// rs1_b2_val == 191, rs1_b0_val == 247, rs2_b6_val == 253, rs2_b4_val == 254
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x57ffe0afebf11f7;  op2val:0xfffd09fe08060480
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x57ffe0afebf11f7, 0xfffd09fe08060480, x2, 56, x5)

inst_38:
// rs1_b2_val == 247, rs2_b5_val == 251, rs1_b0_val == 191, rs2_b4_val == 223, rs1_b1_val == 254, rs2_b3_val == 0, rs1_b7_val == 239
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xef407ffd0af7febf;  op2val:0xe08fbdf0007bff7
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xef407ffd0af7febf, 0xe08fbdf0007bff7, x2, 64, x5)

inst_39:
// rs1_b2_val == 251, rs1_b5_val == 247
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x120bf70b0afb0c05;  op2val:0x0dfbefaafb06bf
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x120bf70b0afb0c05, 0x0dfbefaafb06bf, x2, 72, x5)

inst_40:
// rs1_b2_val == 254, rs2_b5_val == 2, rs1_b1_val == 128
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x5520112005fe8001;  op2val:0x55ef020baa05100f
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x5520112005fe8001, 0x55ef020baa05100f, x2, 80, x5)

inst_41:
// rs1_b2_val == 128, rs2_b0_val == 255
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x912fe05ef80080d;  op2val:0x7bf030b0b0a12ff
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x912fe05ef80080d, 0x7bf030b0b0a12ff, x2, 88, x5)

inst_42:
// rs1_b2_val == 64, rs2_b4_val == 2
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xa800d0e0440ef06;  op2val:0x800d1102090b0e20
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xa800d0e0440ef06, 0x800d1102090b0e20, x2, 96, x5)

inst_43:
// rs1_b2_val == 16, rs2_b5_val == 1, rs2_b0_val == 85
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb7fdf0680100cfb;  op2val:0xfb11010e06095555
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xfb7fdf0680100cfb, 0xfb11010e06095555, x2, 104, x5)

inst_44:
// rs1_b2_val == 4, rs2_b2_val == 85
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x550911087f04060c;  op2val:0x10b03feaa55040b
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x550911087f04060c, 0x10b03feaa55040b, x2, 112, x5)

inst_45:
// rs1_b2_val == 2, rs2_b3_val == 251
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa06aaff0402f704;  op2val:0x10030c04fb0b09aa
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xaa06aaff0402f704, 0x10030c04fb0b09aa, x2, 120, x5)

inst_46:
// rs1_b1_val == 170, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x1011ffdf0007aa00;  op2val:0x20ef0e061240df12
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x1011ffdf0007aa00, 0x20ef0e061240df12, x2, 128, x5)

inst_47:
// rs1_b1_val == 85, rs2_b0_val == 127
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x310201255f755bf;  op2val:0x1207ff12bff7117f
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x310201255f755bf, 0x1207ff12bff7117f, x2, 136, x5)

inst_48:
// rs2_b6_val == 247, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xa08fb0c0e0d070a;  op2val:0xfef7aa0d10800c05
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xa08fb0c0e0d070a, 0xfef7aa0d10800c05, x2, 144, x5)

inst_49:
// rs2_b6_val == 251, rs1_b1_val == 4, rs1_b0_val == 239
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x220aabf13aa04ef;  op2val:0x40fbbfaa0d062080
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x220aabf13aa04ef, 0x40fbbfaa0d062080, x2, 152, x5)

inst_50:
// rs2_b2_val == 16, rs1_b4_val == 16, rs2_b1_val == 127, rs1_b1_val == 64
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xf703801001004020;  op2val:0xef130faa05107fff
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xf703801001004020, 0xef130faa05107fff, x2, 160, x5)

inst_51:
// rs2_b2_val == 1, rs2_b3_val == 253, rs1_b4_val == 251, rs2_b1_val == 8
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xa1106fb0201207f;  op2val:0x7f041020fd01080f
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xa1106fb0201207f, 0x7f041020fd01080f, x2, 168, x5)

inst_52:
// rs2_b1_val == 247, rs1_b6_val == 0, rs1_b5_val == 1
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x1000010d7fdff703;  op2val:0x6120a0e4009f780
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x1000010d7fdff703, 0x6120a0e4009f780, x2, 176, x5)

inst_53:
// rs2_b1_val == 254, rs1_b4_val == 85
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0b5540550006;  op2val:0x6060155040cfe11
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xffdf0b5540550006, 0x6060155040cfe11, x2, 184, x5)

inst_54:
// rs2_b1_val == 64, rs2_b6_val == 255
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x9dff70405088004;  op2val:0xaaff00070a0a40df
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x9dff70405088004, 0xaaff00070a0a40df, x2, 192, x5)

inst_55:
// rs2_b1_val == 1, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x11200b06200f11ff;  op2val:0x20c06aa20fd0112
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x11200b06200f11ff, 0x20c06aa20fd0112, x2, 200, x5)

inst_56:
// rs2_b1_val == 0, rs2_b0_val == 0, rs2_b5_val == 254, rs2_b4_val == 251
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xa080bdf55017f04;  op2val:0xdfeffefb01060000
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xa080bdf55017f04, 0xdfeffefb01060000, x2, 208, x5)

inst_57:
// rs2_b0_val == 251, rs1_b4_val == 2
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0302200d0c08;  op2val:0xffebf0e13ffbffb
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xfbff0302200d0c08, 0xffebf0e13ffbffb, x2, 216, x5)

inst_58:
// rs2_b0_val == 253, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x70b55550f0c0601;  op2val:0xbff7bf20f7fd01fd
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x70b55550f0c0601, 0xbff7bf20f7fd01fd, x2, 224, x5)

inst_59:
// rs2_b0_val == 16, rs1_b5_val == 8
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7800807061180bf;  op2val:0x302ffaa0f7ff710
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xf7800807061180bf, 0x302ffaa0f7ff710, x2, 232, x5)

inst_60:
// rs2_b6_val == 128, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xef0f0f80ff011211;  op2val:0x4080df550b067f07
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xef0f0f80ff011211, 0x4080df550b067f07, x2, 240, x5)

inst_61:
// rs2_b6_val == 64, rs2_b5_val == 253
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x8080df000b0df707;  op2val:0x4040fd100d10fbef
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x8080df000b0df707, 0x4040fd100d10fbef, x2, 248, x5)

inst_62:
// rs2_b6_val == 16, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x100e0606fd55087f;  op2val:0x6102009fd02550a
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x100e0606fd55087f, 0x6102009fd02550a, x2, 256, x5)

inst_63:
// rs1_b7_val == 127, rs1_b1_val == 2
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f0801fb02020220;  op2val:0x805010b120f200d
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x7f0801fb02020220, 0x805010b120f200d, x2, 264, x5)

inst_64:
// rs1_b7_val == 4, rs2_b5_val == 128, rs1_b6_val == 247
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x4f7034055101303;  op2val:0xfb05801113000e0a
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x4f7034055101303, 0xfb05801113000e0a, x2, 272, x5)

inst_65:
// rs1_b7_val == 1, rs1_b5_val == 64
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x1ef400e020f5501;  op2val:0xc400e807f071010
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x1ef400e020f5501, 0xc400e807f071010, x2, 280, x5)

inst_66:
// rs1_b0_val == 253, rs2_b5_val == 127
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x20002010fd5510fd;  op2val:0x117f0011070655
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x20002010fd5510fd, 0x117f0011070655, x2, 288, x5)

inst_67:
// rs1_b6_val == 170, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x20aa0005408011fd;  op2val:0xdf40fdfb0d0f0903
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x20aa0005408011fd, 0xdf40fdfb0d0f0903, x2, 296, x5)

inst_68:
// rs1_b0_val == 254, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x550def7f55df40fe;  op2val:0xfb0a0403aaefdf09
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x550def7f55df40fe, 0xfb0a0403aaefdf09, x2, 304, x5)

inst_69:
// rs1_b0_val == 2, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe7f0c0afe044002;  op2val:0x4ef06ff030709ef
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xfe7f0c0afe044002, 0x4ef06ff030709ef, x2, 312, x5)

inst_70:
// rs1_b6_val == 254, rs1_b5_val == 253, rs1_b4_val == 254
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefdfe02df1312;  op2val:0x206aa120d550001
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xfffefdfe02df1312, 0x206aa120d550001, x2, 320, x5)

inst_71:
// rs2_b4_val == 127, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x2550308fb120b04;  op2val:0x312027f060f40ff
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x2550308fb120b04, 0x312027f060f40ff, x2, 328, x5)

inst_72:
// rs2_b4_val == 191, rs1_b7_val == 253
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd04fe7f0e0f0e06;  op2val:0xffaabfbffb0a0820
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xfd04fe7f0e0f0e06, 0xffaabfbffb0a0820, x2, 336, x5)

inst_73:
// rs1_b4_val == 170, rs1_b7_val == 8
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x8f703aafb04fd08;  op2val:0x9fe0e0d200508aa
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x8f703aafb04fd08, 0x9fe0e0d200508aa, x2, 344, x5)

inst_74:
// rs2_b3_val == 2, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xeaa0f060d06f7fb;  op2val:0x7bf80aa0255bfbf
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xeaa0f060d06f7fb, 0x7bf80aa0255bfbf, x2, 352, x5)

inst_75:
// rs1_b4_val == 239, rs1_b0_val == 170
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x50bffefaa00aaaa;  op2val:0x2550a0012020111
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x50bffefaa00aaaa, 0x2550a0012020111, x2, 360, x5)

inst_76:
// rs1_b7_val == 223, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xdffd070d070c0480;  op2val:0x87ff740ff065520
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xdffd070d070c0480, 0x87ff740ff065520, x2, 368, x5)

inst_77:
// rs1_b6_val == 1, rs2_b2_val == 254
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd01ff0dfe047f04;  op2val:0xbf0aef060dfe40aa
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xfd01ff0dfe047f04, 0xbf0aef060dfe40aa, x2, 376, x5)

inst_78:
// rs2_b4_val == 1, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xff02090cffbffe55;  op2val:0xef03ff01fb01000a
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xff02090cffbffe55, 0xef03ff01fb01000a, x2, 384, x5)

inst_79:
// rs2_b2_val == 191, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf11050655bf40;  op2val:0x122020fe09bff701
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xffbf11050655bf40, 0x122020fe09bff701, x2, 392, x5)

inst_80:
// rs2_b2_val == 223, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xdef0e0e000cfffb;  op2val:0x1213df40df1210
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xdef0e0e000cfffb, 0x1213df40df1210, x2, 400, x5)

inst_81:
// rs2_b4_val == 8, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x440f70a110dff03;  op2val:0xd0001080c035506
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x440f70a110dff03, 0xd0001080c035506, x2, 408, x5)

inst_82:
// rs1_b5_val == 191, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xff0abf071240dffd;  op2val:0x9010cffdf0ef7fe
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xff0abf071240dffd, 0x9010cffdf0ef7fe, x2, 416, x5)

inst_83:
// rs1_b4_val == 1, 
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x13060501020c0dfd;  op2val:0xa020f200804ef0b
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x13060501020c0dfd, 0xa020f200804ef0b, x2, 424, x5)

inst_84:
// rs1_b5_val == rs2_b5_val and rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b7_val == 255, rs1_b3_val == 247, rs2_b2_val == 0, rs2_b0_val == 32, rs1_b0_val == 8, rs1_b6_val == 64, rs1_b4_val == 32, rs1_b2_val == 239
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa401320f7efdf08;  op2val:0xff0a13030a000320
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0xaa401320f7efdf08, 0xff0a13030a000320, x2, 432, x5)

inst_85:
// rs1_b4_val == rs2_b4_val and rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b0_val == 191, rs2_b5_val == 64, rs2_b7_val == 191, rs2_b6_val == 2, rs2_b1_val == 2, rs1_b1_val == 1, rs2_b2_val == 253
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x606060e06ef0107;  op2val:0xbf02400e0ffd02bf
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x606060e06ef0107, 0xbf02400e0ffd02bf, x2, 440, x5)

inst_86:
// rs1_b3_val == 251, rs2_b5_val == 85, rs2_b3_val == 191
// opcode: umax8 ; op1:x30; op2:x29; dest:x31; op1val:0x5800705fb090e0e;  op2val:0xd025512bf13ef06
TEST_RR_OP(umax8, x31, x30, x29, 0x0000000000000000, 0x5800705fb090e0e, 0xd025512bf13ef06, x2, 448, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 57*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
