
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smalxds instruction of the RISC-V RV64PZicsr extension for the smalxds covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smalxds)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x17,signature_x17_1)

inst_0:
// rs1 == rd != rs2, rs1==x14, rs2==x26, rd==x14, rs1_h0_val == -32768, rs2_h3_val == -1025, rs1_h3_val != rs2_h3_val, rs1_h1_val == 16384, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h0_val == 21845, rs1_h2_val != rs2_h2_val, rs1_h3_val == 4, rs1_h2_val == 32, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h1_val == -65, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0
// opcode: smalxds ; op1:x14; op2:x26; dest:x14; op1val:0x0004002040008000;  op2val:0xfbffc000ffbf5555
TEST_P64_PNN_OP(smalxds, x14, $rd_hi, x14, x26, 0x0000000000000000, $correctval_hi, 0x0004002040008000, 0xfbffc000ffbf5555, x17, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x13, rs2==x14, rd==x4, rs1_h3_val == rs2_h3_val, rs2_h2_val == -1025, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h0_val == 2048, rs1_h3_val == -8193, rs2_h1_val == -3, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h3_val == -8193
// opcode: smalxds ; op1:x13; op2:x14; dest:x4; op1val:0xdfff3fff40000800;  op2val:0xdffffbfffffdfff8
TEST_P64_PNN_OP(smalxds, x4, $rd_hi, x13, x14, 0x0000000000000000, $correctval_hi, 0xdfff3fff40000800, 0xdffffbfffffdfff8, x17, 16, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x16, rs2==x16, rd==x18, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == 1, rs1_h1_val == 8192, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h3_val == 8192, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val == -513, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 1024, rs2_h2_val == 2
// opcode: smalxds ; op1:x16; op2:x16; dest:x18; op1val:0xfff9fdff20000800;  op2val:0x2000000200010400
TEST_P64_PNN_OP(smalxds, x18, $rd_hi, x16, x16, 0x0000000000000000, $correctval_hi, 0xfff9fdff20000800, 0x2000000200010400, x17, 32, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x20, rs2==x20, rd==x20, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h0_val == -9, rs1_h2_val == 256, rs1_h3_val == 2, rs2_h3_val == 32, rs1_h0_val < 0 and rs2_h0_val < 0
// opcode: smalxds ; op1:x20; op2:x20; dest:x20; op1val:0x000201003ffffff7;  op2val:0x0020fbff0009fff8
TEST_P64_PNN_OP(smalxds, x20, $rd_hi, x20, x20, 0x0000000000000000, $correctval_hi, 0x000201003ffffff7, 0x0020fbff0009fff8, x17, 48, x3)

inst_4:
// rs2 == rd != rs1, rs1==x30, rs2==x2, rd==x2, rs1_h2_val == rs2_h2_val, rs1_h1_val == 4096, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h3_val == -32768, rs2_h2_val == -2, rs1_h0_val == 32, rs2_h1_val == 16384, rs1_h3_val == -32768, rs1_h2_val == -2
// opcode: smalxds ; op1:x30; op2:x2; dest:x2; op1val:0x8000fffe10000020;  op2val:0x8000fffe4000fff9
TEST_P64_PNN_OP(smalxds, x2, $rd_hi, x30, x2, 0x0000000000000000, $correctval_hi, 0x8000fffe10000020, 0x8000fffe4000fff9, x17, 64, x3)

inst_5:
// rs1==x25, rs2==x0, rd==x28, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h0_val == -21846, rs1_h2_val == 4, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h3_val == 512, rs2_h2_val == 128, rs1_h0_val == -16385, rs1_h1_val == -257
// opcode: smalxds ; op1:x25; op2:x0; dest:x28; op1val:0x80000004feffbfff;  op2val:0x020000800005aaaa
TEST_P64_PNN_OP(smalxds, x28, $rd_hi, x25, x0, 0x0000000000000000, $correctval_hi, 0x80000004feffbfff, 0x020000800005aaaa, x17, 80, x3)

inst_6:
// rs1==x7, rs2==x5, rd==x10, rs1_h1_val == rs2_h1_val, rs1_h1_val == -32768, rs2_h0_val == -8193, rs1_h0_val == 512, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val == -4097, rs2_h1_val == -32768
// opcode: smalxds ; op1:x7; op2:x5; dest:x10; op1val:0x0002efff80000200;  op2val:0x000500098000dfff
TEST_P64_PNN_OP(smalxds, x10, $rd_hi, x7, x5, 0x0000000000000000, $correctval_hi, 0x0002efff80000200, 0x000500098000dfff, x17, 96, x3)

inst_7:
// rs1==x22, rs2==x21, rd==x8, rs1_h0_val == rs2_h0_val, rs2_h1_val == -1, rs2_h2_val == -513, rs1_h0_val == -3, rs1_h2_val == 21845, rs2_h3_val == 128, rs2_h0_val == -3, rs1_h3_val == -9
// opcode: smalxds ; op1:x22; op2:x21; dest:x8; op1val:0xfff75555fffafffd;  op2val:0x0080fdfffffffffd
TEST_P64_PNN_OP(smalxds, x8, $rd_hi, x22, x21, 0x0000000000000000, $correctval_hi, 0xfff75555fffafffd, 0x0080fdfffffffffd, x17, 112, x3)

inst_8:
// rs1==x9, rs2==x8, rd==x6, rs2_h3_val == -21846, rs1_h1_val == 1024, rs2_h2_val == -9, rs2_h1_val == -33, rs1_h0_val == 16, rs1_h2_val == -129
// opcode: smalxds ; op1:x9; op2:x8; dest:x6; op1val:0xfff9ff7f04000010;  op2val:0xaaaafff7ffdffffd
TEST_P64_PNN_OP(smalxds, x6, $rd_hi, x9, x8, 0x0000000000000000, $correctval_hi, 0xfff9ff7f04000010, 0xaaaafff7ffdffffd, x17, 128, x3)

inst_9:
// rs1==x4, rs2==x15, rd==x24, rs2_h3_val == 21845, rs2_h0_val == -513, rs2_h2_val == 1024, rs1_h0_val == 1, rs2_h1_val == 64, rs1_h2_val == -3
// opcode: smalxds ; op1:x4; op2:x15; dest:x24; op1val:0x0007fffdfff90001;  op2val:0x555504000040fdff
TEST_P64_PNN_OP(smalxds, x24, $rd_hi, x4, x15, 0x0000000000000000, $correctval_hi, 0x0007fffdfff90001, 0x555504000040fdff, x17, 144, x3)

inst_10:
// rs1==x28, rs2==x10, rd==x12, rs2_h3_val == 32767, rs1_h2_val == -17, rs2_h0_val == -5, rs2_h1_val == 16
// opcode: smalxds ; op1:x28; op2:x10; dest:x12; op1val:0xfffaffef10000006;  op2val:0x7fff3fff0010fffb
TEST_P64_PNN_OP(smalxds, x12, $rd_hi, x28, x10, 0x0000000000000000, $correctval_hi, 0xfffaffef10000006, 0x7fff3fff0010fffb, x17, 160, x3)

inst_11:
// rs1==x27, rs2==x19, rd==x26, rs2_h3_val == -16385, rs1_h2_val == -21846, rs2_h0_val == -33, rs1_h1_val == -1, rs2_h1_val == 8192, rs1_h3_val == 2048
// opcode: smalxds ; op1:x27; op2:x19; dest:x26; op1val:0x0800aaaaffff0200;  op2val:0xbfff3fff2000ffdf
TEST_P64_PNN_OP(smalxds, x26, $rd_hi, x27, x19, 0x0000000000000000, $correctval_hi, 0x0800aaaaffff0200, 0xbfff3fff2000ffdf, x17, 176, x3)

inst_12:
// rs1==x15, rs2==x23, rd==x16, rs2_h3_val == -4097, rs2_h1_val == 1024, rs2_h2_val == 16, rs1_h0_val == -513
// opcode: smalxds ; op1:x15; op2:x23; dest:x16; op1val:0xfff6fff61000fdff;  op2val:0xefff001004000400
TEST_P64_PNN_OP(smalxds, x16, $rd_hi, x15, x23, 0x0000000000000000, $correctval_hi, 0xfff6fff61000fdff, 0xefff001004000400, x17, 192, x3)

inst_13:
// rs1==x2, rs2==x18, rd==x22, rs2_h3_val == -2049, rs2_h0_val == 32, rs1_h0_val == -5, rs1_h2_val == 8, rs2_h2_val == 4096, rs1_h3_val == 4096
// opcode: smalxds ; op1:x2; op2:x18; dest:x22; op1val:0x100000084000fffb;  op2val:0xf7ff100080000020
TEST_P64_PNN_OP(smalxds, x22, $rd_hi, x2, x18, 0x0000000000000000, $correctval_hi, 0x100000084000fffb, 0xf7ff100080000020, x17, 208, x3)

inst_14:
// rs1==x19, rs2==x22, rd==x30, rs2_h3_val == -513, rs2_h0_val == 64, rs2_h2_val == -33, rs1_h1_val == 32, rs1_h3_val == -129, rs1_h0_val == -4097
// opcode: smalxds ; op1:x19; op2:x22; dest:x30; op1val:0xff7ffff80020efff;  op2val:0xfdffffdf3fff0040
TEST_P64_PNN_OP(smalxds, x30, $rd_hi, x19, x22, 0x0000000000000000, $correctval_hi, 0xff7ffff80020efff, 0xfdffffdf3fff0040, x17, 224, x3)

inst_15:
// rs1==x1, rs2==x30, rs2_h3_val == -257, rs1_h1_val == -8193
// opcode: smalxds ; op1:x1; op2:x30; dest:x23; op1val:0xfff60020dffffffc;  op2val:0xfeff000640000005
TEST_P64_PNN_OP(smalxds, x23, $rd_hi, x1, x30, 0x0000000000000000, $correctval_hi, 0xfff60020dffffffc, 0xfeff000640000005, x17, 240, x3)

inst_16:
// rs1==x3, rs2==x1, rs2_h3_val == -129, rs2_h1_val == -17, rs2_h0_val == -9, rs2_h2_val == 256, rs1_h1_val == 2048
// opcode: smalxds ; op1:x3; op2:x1; dest:x11; op1val:0x1000ffef08000800;  op2val:0xff7f0100ffeffff7
TEST_P64_PNN_OP(smalxds, x11, $rd_hi, x3, x1, 0x0000000000000000, $correctval_hi, 0x1000ffef08000800, 0xff7f0100ffeffff7, x17, 256, x14)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_17:
// rs1==x26, rs2==x6, rs2_h3_val == -65, rs1_h2_val == -1, rs1_h3_val == 256, rs2_h0_val == -4097, rs1_h0_val == 256
// opcode: smalxds ; op1:x26; op2:x6; dest:x10; op1val:0x0100ffff04000100;  op2val:0xffbf3fff2000efff
TEST_P64_PNN_OP(smalxds, x10, $rd_hi, x26, x6, 0x0000000000000000, $correctval_hi, 0x0100ffff04000100, 0xffbf3fff2000efff, x1, 0, x14)

inst_18:
// rs1==x11, rs2==x29, rs2_h3_val == -33, rs1_h2_val == 16384, rs1_h1_val == 2, rs2_h2_val == -2049, rs1_h0_val == -21846
// opcode: smalxds ; op1:x11; op2:x29; dest:x25; op1val:0x3fff40000002aaaa;  op2val:0xffdff7ff0040fffb
TEST_P64_PNN_OP(smalxds, x25, $rd_hi, x11, x29, 0x0000000000000000, $correctval_hi, 0x3fff40000002aaaa, 0xffdff7ff0040fffb, x1, 16, x14)

inst_19:
// rs1==x8, rs2==x28, rs2_h3_val == -17, rs1_h3_val == -513, rs2_h1_val == 21845, rs2_h0_val == 2048, rs1_h2_val == -9
// opcode: smalxds ; op1:x8; op2:x28; dest:x21; op1val:0xfdfffff7c000fff7;  op2val:0xffeffff955550800
TEST_P64_PNN_OP(smalxds, x21, $rd_hi, x8, x28, 0x0000000000000000, $correctval_hi, 0xfdfffff7c000fff7, 0xffeffff955550800, x1, 32, x14)

inst_20:
// rs1==x6, rs2==x17, rs2_h3_val == -9, rs1_h1_val == 512, rs2_h2_val == 2048
// opcode: smalxds ; op1:x6; op2:x17; dest:x20; op1val:0xfff755550200fffa;  op2val:0xfff70800ffdf0006
TEST_P64_PNN_OP(smalxds, x20, $rd_hi, x6, x17, 0x0000000000000000, $correctval_hi, 0xfff755550200fffa, 0xfff70800ffdf0006, x1, 48, x14)

inst_21:
// rs1==x18, rs2==x7, rs2_h3_val == -5, 
// opcode: smalxds ; op1:x18; op2:x7; dest:x5; op1val:0xfff83fff0009bfff;  op2val:0xfffbfffcfff63fff
TEST_P64_PNN_OP(smalxds, x5, $rd_hi, x18, x7, 0x0000000000000000, $correctval_hi, 0xfff83fff0009bfff, 0xfffbfffcfff63fff, x1, 64, x14)

inst_22:
// rs1==x5, rs2==x31, rs2_h3_val == -3, rs1_h3_val == -1025, rs1_h1_val == 8
// opcode: smalxds ; op1:x5; op2:x31; dest:x22; op1val:0xfbfffffd00083fff;  op2val:0xfffd0010ffdffffb
TEST_P64_PNN_OP(smalxds, x22, $rd_hi, x5, x31, 0x0000000000000000, $correctval_hi, 0xfbfffffd00083fff, 0xfffd0010ffdffffb, x1, 80, x14)

inst_23:
// rs1==x23, rs2==x4, rs2_h3_val == -2, rs1_h3_val == -4097, rs2_h1_val == 32, rs2_h2_val == 1
// opcode: smalxds ; op1:x23; op2:x4; dest:x3; op1val:0xefff000700083fff;  op2val:0xfffe00010020fff8
TEST_P64_PNN_OP(smalxds, x3, $rd_hi, x23, x4, 0x0000000000000000, $correctval_hi, 0xefff000700083fff, 0xfffe00010020fff8, x1, 96, x14)

inst_24:
// rs1==x0, rs2==x12, rs2_h3_val == 16384, rs2_h2_val == -4097, rs2_h1_val == 128, rs1_h0_val == 0, rs1_h3_val == 8
// opcode: smalxds ; op1:x0; op2:x12; dest:x20; op1val:0x0008ffefdfff0000;  op2val:0x4000efff0080ffdf
TEST_P64_PNN_OP(smalxds, x20, $rd_hi, x0, x12, 0x0000000000000000, $correctval_hi, 0x0008ffefdfff0000, 0x4000efff0080ffdf, x1, 112, x14)

inst_25:
// rs1==x29, rs2==x25, rs2_h3_val == 4096, rs1_h3_val == 0, rs1_h1_val == -65, rs1_h0_val == -2, rs2_h1_val == -2049
// opcode: smalxds ; op1:x29; op2:x25; dest:x12; op1val:0x0000fffdffbffffe;  op2val:0x1000effff7ff0006
TEST_P64_PNN_OP(smalxds, x12, $rd_hi, x29, x25, 0x0000000000000000, $correctval_hi, 0x0000fffdffbffffe, 0x1000effff7ff0006, x1, 128, x14)

inst_26:
// rs1==x24, rs2==x13, rs2_h3_val == 2048, rs1_h1_val == -1025, rs2_h1_val == 4, rs2_h2_val == 64, rs2_h0_val == 256, rs1_h2_val == -65
// opcode: smalxds ; op1:x24; op2:x13; dest:x2; op1val:0xfffaffbffbff0800;  op2val:0x0800004000040100
TEST_P64_PNN_OP(smalxds, x2, $rd_hi, x24, x13, 0x0000000000000000, $correctval_hi, 0xfffaffbffbff0800, 0x0800004000040100, x1, 144, x14)

inst_27:
// rs1==x21, rs2==x11, rs2_h3_val == 1024, rs1_h0_val == -33, rs1_h2_val == 2048, rs2_h0_val == -32768
// opcode: smalxds ; op1:x21; op2:x11; dest:x18; op1val:0xff7f0800fff8ffdf;  op2val:0x0400f7ffc0008000
TEST_P64_PNN_OP(smalxds, x18, $rd_hi, x21, x11, 0x0000000000000000, $correctval_hi, 0xff7f0800fff8ffdf, 0x0400f7ffc0008000, x1, 160, x14)

inst_28:
// rs1==x31, rs2==x24, rs2_h3_val == 256, rs1_h1_val == 21845, rs1_h2_val == 0
// opcode: smalxds ; op1:x31; op2:x24; dest:x17; op1val:0x000400005555fffb;  op2val:0x0100f7ffc000fffb
TEST_P64_PNN_OP(smalxds, x17, $rd_hi, x31, x24, 0x0000000000000000, $correctval_hi, 0x000400005555fffb, 0x0100f7ffc000fffb, x1, 176, x14)

inst_29:
// rs1==x17, rs2==x27, rs2_h3_val == 64, rs2_h0_val == 0, rs1_h3_val == 128, rs1_h1_val == 32767, rs2_h2_val == -129
// opcode: smalxds ; op1:x17; op2:x27; dest:x25; op1val:0x00803fff7fffefff;  op2val:0x0040ff7f40000000
TEST_P64_PNN_OP(smalxds, x25, $rd_hi, x17, x27, 0x0000000000000000, $correctval_hi, 0x00803fff7fffefff, 0x0040ff7f40000000, x1, 192, x14)

inst_30:
// rs1==x10, rs2==x9, rs2_h3_val == 16, rs1_h2_val == 32767, rs1_h0_val == -17, rs2_h0_val == 128
// opcode: smalxds ; op1:x10; op2:x9; dest:x27; op1val:0x10007fff2000ffef;  op2val:0x0010ffdff7ff0080
TEST_P64_PNN_OP(smalxds, x27, $rd_hi, x10, x9, 0x0000000000000000, $correctval_hi, 0x10007fff2000ffef, 0x0010ffdff7ff0080, x1, 208, x14)

inst_31:
// rs1==x12, rs2==x3, rs2_h3_val == 8, 
// opcode: smalxds ; op1:x12; op2:x3; dest:x13; op1val:0x0004fffc10000800;  op2val:0x0008fff9ffefffdf
TEST_P64_PNN_OP(smalxds, x13, $rd_hi, x12, x3, 0x0000000000000000, $correctval_hi, 0x0004fffc10000800, 0x0008fff9ffefffdf, x1, 224, x14)

inst_32:
// rs2_h3_val == 4, rs1_h1_val == -2, rs2_h0_val == 16, rs2_h1_val == 0, rs1_h0_val == -8193, rs2_h2_val == -21846
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x00065555fffedfff;  op2val:0x0004aaaa00000010
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00065555fffedfff, 0x0004aaaa00000010, x1, 240, x14)

inst_33:
// rs2_h3_val == 2, rs2_h2_val == 16384, rs1_h3_val == 32767, rs1_h1_val == -4097
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0000efffffdf;  op2val:0x00024000ffbf0000
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fff0000efffffdf, 0x00024000ffbf0000, x1, 256, x2)

inst_34:
// rs2_h3_val == 1, rs2_h0_val == -129, rs2_h2_val == 8192, rs1_h2_val == -2049, rs1_h1_val == -16385, rs1_h0_val == 2
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffcf7ffbfff0002;  op2val:0x00012000fff8ff7f
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffcf7ffbfff0002, 0x00012000fff8ff7f, x1, 272, x2)

inst_35:
// rs1_h1_val == -5, rs1_h0_val == -1
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffaff7ffffbffff;  op2val:0x00050006c000fff8
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffaff7ffffbffff, 0x00050006c000fff8, x1, 288, x2)

inst_36:
// rs1_h1_val == -3, rs2_h1_val == 32767
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x00020020fffdc000;  op2val:0xdfff01007ffffff9
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00020020fffdc000, 0xdfff01007ffffff9, x1, 304, x2)

inst_37:
// rs1_h1_val == 256, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x000300030100fffc;  op2val:0x0200f7ff0010fff7
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000300030100fffc, 0x0200f7ff0010fff7, x1, 320, x2)

inst_38:
// rs1_h1_val == 128, rs1_h3_val == 512, rs1_h2_val == -1025
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x0200fbff00800001;  op2val:0xdfffc00055553fff
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200fbff00800001, 0xdfffc00055553fff, x1, 336, x2)

inst_39:
// rs1_h1_val == 64, rs1_h3_val == -17
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xffeffbff00400007;  op2val:0xfdfffff820000009
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffeffbff00400007, 0xfdfffff820000009, x1, 352, x2)

inst_40:
// rs1_h1_val == 16, rs2_h1_val == 4096, rs2_h0_val == -2, rs1_h0_val == 21845
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x1000000800105555;  op2val:0xfeff00021000fffe
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x1000000800105555, 0xfeff00021000fffe, x1, 368, x2)

inst_41:
// rs1_h1_val == 4, rs2_h0_val == -17
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xffefffef00040002;  op2val:0xfff80400fffaffef
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffefffef00040002, 0xfff80400fffaffef, x1, 384, x2)

inst_42:
// rs1_h1_val == 1, rs2_h1_val == -2, rs1_h3_val == -1
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00010020;  op2val:0xf7fffffcfffe0010
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7fff00010020, 0xf7fffffcfffe0010, x1, 400, x2)

inst_43:
// rs1_h1_val == 0, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xefffff7f0000c000;  op2val:0x1000fff91000fff6
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefffff7f0000c000, 0x1000fff91000fff6, x1, 416, x2)

inst_44:
// rs1_h0_val == 32767, rs1_h2_val == -8193, rs2_h1_val == -16385, rs1_h3_val == 16
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x0010dfff00007fff;  op2val:0x00800100bfff3fff
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0010dfff00007fff, 0x00800100bfff3fff, x1, 432, x2)

inst_45:
// rs1_h0_val == -2049, rs2_h3_val == -1
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x0200fdfffffaf7ff;  op2val:0xffff00020007dfff
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200fdfffffaf7ff, 0xffff00020007dfff, x1, 448, x2)

inst_46:
// rs1_h0_val == -1025, rs1_h3_val == 1
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x0001ffeffff8fbff;  op2val:0x00200010fff60006
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001ffeffff8fbff, 0x00200010fff60006, x1, 464, x2)

inst_47:
// rs1_h0_val == -257, rs1_h3_val == -5, rs2_h2_val == 32767
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffb3fff0100feff;  op2val:0x20007ffff7ff0005
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffb3fff0100feff, 0x20007ffff7ff0005, x1, 480, x2)

inst_48:
// rs1_h0_val == -129, rs1_h1_val == -129, rs2_h0_val == 4, rs2_h1_val == -9
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0009ff7fff7f;  op2val:0x4000c000fff70004
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffa0009ff7fff7f, 0x4000c000fff70004, x1, 496, x2)

inst_49:
// rs1_h0_val == -65, rs1_h2_val == 8192, rs2_h2_val == -257
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x080020004000ffbf;  op2val:0x0001feffffbf0010
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x080020004000ffbf, 0x0001feffffbf0010, x1, 512, x2)

inst_50:
// rs1_h0_val == 16384, rs1_h2_val == 128
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xefff008000084000;  op2val:0xfdfffeff04000010
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefff008000084000, 0xfdfffeff04000010, x1, 528, x2)

inst_51:
// rs1_h0_val == 8192, rs2_h1_val == -257, rs1_h3_val == 16384
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x4000f7fffbff2000;  op2val:0xc000fff7fefffff9
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x4000f7fffbff2000, 0xc000fff7fefffff9, x1, 544, x2)

inst_52:
// rs1_h0_val == 4096, rs1_h2_val == 1024
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xfff80400fbff1000;  op2val:0xf7ff3fffffbffffd
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff80400fbff1000, 0xf7ff3fffffbffffd, x1, 560, x2)

inst_53:
// rs1_h0_val == 1024, rs2_h1_val == -129
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0000fff90400;  op2val:0x0001ff7fff7fff7f
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbff0000fff90400, 0x0001ff7fff7fff7f, x1, 576, x2)

inst_54:
// rs1_h0_val == 128, rs1_h2_val == 512, rs2_h0_val == 8, rs1_h3_val == 32
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x0020020002000080;  op2val:0x00400080fff70008
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020020002000080, 0x00400080fff70008, x1, 592, x2)

inst_55:
// rs1_h0_val == 64, rs1_h3_val == 1024, rs2_h1_val == 8
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x0400fffc00100040;  op2val:0x2000fffe00080007
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0400fffc00100040, 0x2000fffe00080007, x1, 608, x2)

inst_56:
// rs1_h0_val == 8, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x0007ff7ffffd0008;  op2val:0xf7ff1000fffa0040
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0007ff7ffffd0008, 0xf7ff1000fffa0040, x1, 624, x2)

inst_57:
// rs1_h0_val == 4, rs2_h0_val == -1, rs2_h1_val == -513
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x0002000755550004;  op2val:0x00080400fdffffff
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0002000755550004, 0x00080400fdffffff, x1, 640, x2)

inst_58:
// rs2_h3_val == 0, rs2_h0_val == 8192, rs1_h2_val == 64, rs1_h3_val == -16385, rs2_h1_val == 512, rs2_h2_val == 0
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xbfff004020000001;  op2val:0x0000000002002000
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbfff004020000001, 0x0000000002002000, x1, 656, x2)

inst_59:
// rs2_h1_val == 2, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x0100efff0080ffbf;  op2val:0xdffffdff0002fff7
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0100efff0080ffbf, 0xdffffdff0002fff7, x1, 672, x2)

inst_60:
// rs2_h0_val == 32767, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x000700060002ffdf;  op2val:0x0080fdffff7f7fff
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000700060002ffdf, 0x0080fdffff7f7fff, x1, 688, x2)

inst_61:
// rs2_h0_val == -16385, rs1_h3_val == 21845, rs1_h2_val == 16
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x55550010c0000002;  op2val:0x0003fffafff7bfff
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x55550010c0000002, 0x0003fffafff7bfff, x1, 704, x2)

inst_62:
// rs2_h0_val == -2049, rs1_h2_val == -5
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffb7fff0200;  op2val:0xdfff00000009f7ff
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff6fffb7fff0200, 0xdfff00000009f7ff, x1, 720, x2)

inst_63:
// rs2_h0_val == -1025, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0100fff9aaaa;  op2val:0xffef0006fff7fbff
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3fff0100fff9aaaa, 0xffef0006fff7fbff, x1, 736, x2)

inst_64:
// rs2_h0_val == -257, rs2_h2_val == -32768
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x0400200000400003;  op2val:0x000680007ffffeff
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0400200000400003, 0x000680007ffffeff, x1, 752, x2)

inst_65:
// rs2_h0_val == -65, rs1_h1_val == -21846
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0008aaaa0400;  op2val:0x0003fff70006ffbf
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfff0008aaaa0400, 0x0003fff70006ffbf, x1, 768, x2)

inst_66:
// rs2_h0_val == 16384, rs1_h2_val == -16385
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xc000bfff3fff4000;  op2val:0xaaaafeff00074000
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xc000bfff3fff4000, 0xaaaafeff00074000, x1, 784, x2)

inst_67:
// rs2_h0_val == 4096, rs2_h2_val == -16385, rs2_h1_val == 2048, rs1_h1_val == -2049
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x0010fff6f7ff0100;  op2val:0xfffebfff08001000
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0010fff6f7ff0100, 0xfffebfff08001000, x1, 800, x2)

inst_68:
// rs2_h0_val == 512, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x00090040fffd0200;  op2val:0x0010fff8fff90200
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00090040fffd0200, 0x0010fff8fff90200, x1, 816, x2)

inst_69:
// rs2_h0_val == 2, rs2_h1_val == -5, rs1_h1_val == -33
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x0080fffaffdffff6;  op2val:0xeffffbfffffb0002
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080fffaffdffff6, 0xeffffbfffffb0002, x1, 832, x2)

inst_70:
// rs2_h0_val == 1, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x000204000005aaaa;  op2val:0x0000080020000001
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000204000005aaaa, 0x0000080020000001, x1, 848, x2)

inst_71:
// rs1_h3_val == -21846, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0040ff7fffdf;  op2val:0x100010000080ffdf
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaa0040ff7fffdf, 0x100010000080ffdf, x1, 864, x2)

inst_72:
// rs1_h3_val == -2049, rs2_h2_val == -3
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000755558000;  op2val:0xfff8fffd0080fff9
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ff000755558000, 0xfff8fffd0080fff9, x1, 880, x2)

inst_73:
// rs1_h3_val == -257, rs2_h1_val == 256
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xfeffc00000010006;  op2val:0x0800fff601000000
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeffc00000010006, 0x0800fff601000000, x1, 896, x2)

inst_74:
// rs2_h2_val == -8193, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x0008fff600100400;  op2val:0xfbffdfff0009ffbf
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0008fff600100400, 0xfbffdfff0009ffbf, x1, 912, x2)

inst_75:
// rs1_h3_val == 64, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x00407fff0100fffd;  op2val:0x0002fbff0010ffbf
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00407fff0100fffd, 0x0002fbff0010ffbf, x1, 928, x2)

inst_76:
// rs2_h2_val == -65, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000600070005;  op2val:0x0007ffbffffaefff
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbff000600070005, 0x0007ffbffffaefff, x1, 944, x2)

inst_77:
// rs2_h2_val == -17, rs2_h1_val == -21846
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffbfff8f7ff;  op2val:0xfffdffefaaaa4000
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7fffffbfff8f7ff, 0xfffdffefaaaa4000, x1, 960, x2)

inst_78:
// rs2_h2_val == -5, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x00013ffffbff5555;  op2val:0x0080fffbf7ffff7f
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00013ffffbff5555, 0x0080fffbf7ffff7f, x1, 976, x2)

inst_79:
// rs2_h2_val == 512, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x00060100efff2000;  op2val:0xffff02007fff0800
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00060100efff2000, 0xffff02007fff0800, x1, 992, x2)

inst_80:
// rs1_h2_val == -257, rs1_h3_val == -2
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffefeff00400020;  op2val:0xdfff20000004aaaa
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffefeff00400020, 0xdfff20000004aaaa, x1, 1008, x2)

inst_81:
// rs2_h2_val == 32, rs1_h3_val == 8192
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x2000fff7fffb0002;  op2val:0xfeff0020fffeaaaa
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000fff7fffb0002, 0xfeff0020fffeaaaa, x1, 1024, x2)

inst_82:
// rs1_h2_val == -33, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x0007ffdf00070040;  op2val:0xfffe0100f7fffffb
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0007ffdf00070040, 0xfffe0100f7fffffb, x1, 1040, x2)

inst_83:
// rs2_h2_val == 8, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x0020fdff00040006;  op2val:0x3fff0008ff7fbfff
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020fdff00040006, 0x3fff0008ff7fbfff, x1, 1056, x2)

inst_84:
// rs2_h2_val == 4, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffcefff3fffefff;  op2val:0xfdff000401004000
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffcefff3fffefff, 0xfdff000401004000, x1, 1072, x2)

inst_85:
// rs2_h2_val == -1, rs1_h2_val == -32768
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffb8000ffbf0080;  op2val:0x0008ffff0008fff6
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffb8000ffbf0080, 0x0008ffff0008fff6, x1, 1088, x2)

inst_86:
// rs1_h2_val == 4096, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x008010000004fbff;  op2val:0x0004fefffdff0080
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x008010000004fbff, 0x0004fefffdff0080, x1, 1104, x2)

inst_87:
// rs1_h3_val == -3, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0040dfffff7f;  op2val:0x000700060000fffe
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffd0040dfffff7f, 0x000700060000fffe, x1, 1120, x2)

inst_88:
// rs2_h1_val == -8193, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff7ffffffc;  op2val:0xff7ffbffdfffbfff
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7fffff7ffffffc, 0xff7ffbffdfffbfff, x1, 1136, x2)

inst_89:
// rs2_h1_val == -4097, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x0080fffdfffbfdff;  op2val:0x00100010efffc000
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080fffdfffbfdff, 0x00100010efffc000, x1, 1152, x2)

inst_90:
// rs2_h1_val == -1025, rs1_h2_val == 1
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xffff00013fffffdf;  op2val:0xfff80007fbfffff9
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff00013fffffdf, 0xfff80007fbfffff9, x1, 1168, x2)

inst_91:
// rs1_h2_val == 2, rs1_h3_val == -65
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0002ffdf0040;  op2val:0xc000fff900802000
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbf0002ffdf0040, 0xc000fff900802000, x1, 1184, x2)

inst_92:
// rs1_h3_val == -33, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xffdfff7f00000800;  op2val:0x000908008000ffff
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdfff7f00000800, 0x000908008000ffff, x1, 1200, x2)

inst_93:
// rs2_h2_val == 21845, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0006fffb0100;  op2val:0x00055555fdff0002
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaa0006fffb0100, 0x00055555fdff0002, x1, 1216, x2)

inst_94:
// rs1_h1_val == -513, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0020fdfffffc;  op2val:0x0020aaaaf7fffeff
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbfff0020fdfffffc, 0x0020aaaaf7fffeff, x1, 1232, x2)

inst_95:
// rs1_h1_val == -17, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x08000002ffeffffb;  op2val:0xfffc8000ffbf1000
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x08000002ffeffffb, 0xfffc8000ffbf1000, x1, 1248, x2)

inst_96:
// rs1_h1_val == -9, 
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffff70040;  op2val:0x55550800f7ff0010
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xeffffffffff70040, 0x55550800f7ff0010, x1, 1264, x2)

inst_97:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == 1, rs1_h1_val == 8192, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h3_val == 8192, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val == -513, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 1024, rs2_h2_val == 2
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fdff20000800;  op2val:0x2000000200010400
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff9fdff20000800, 0x2000000200010400, x1, 1280, x2)

inst_98:
// rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h0_val == -21846, rs1_h2_val == 4, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h3_val == 512, rs2_h2_val == 128, rs1_h0_val == -16385, rs1_h1_val == -257
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x80000004feffbfff;  op2val:0x020000800005aaaa
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x80000004feffbfff, 0x020000800005aaaa, x1, 1296, x2)

inst_99:
// rs2_h3_val == 16384, rs2_h2_val == -4097, rs2_h1_val == 128, rs1_h0_val == 0, rs1_h3_val == 8
// opcode: smalxds ; op1:x30; op2:x29; dest:x31; op1val:0x0008ffefdfff0000;  op2val:0x4000efff0080ffdf
TEST_P64_PNN_OP(smalxds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0008ffefdfff0000, 0x4000efff0080ffdf, x1, 1312, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x17_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x17_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 166*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
