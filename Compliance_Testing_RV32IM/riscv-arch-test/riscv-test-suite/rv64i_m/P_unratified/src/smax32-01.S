
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smax32 instruction of the RISC-V RV64PZicsr extension for the smax32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smax32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rd != rs2, rs1==x27, rs2==x23, rd==x27, rs1_w0_val == -2147483648, rs1_w1_val == 4194304, rs1_w1_val != rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w0_val == -268435457, rs2_w1_val == 524288
// opcode: smax32 ; op1:x27; op2:x23; dest:x27; op1val:0x40000080000000;  op2val:0x080000efffffff
TEST_RR_OP(smax32, x27, x27, x23, 0x0000000000000000, 0x40000080000000, 0x080000efffffff, x8, 0, x11)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x16, rd==x19, rs1_w1_val == rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w0_val == 128, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == -3, rs1_w1_val == -3, rs1_w0_val == 67108864
// opcode: smax32 ; op1:x28; op2:x16; dest:x19; op1val:0xfffffffd04000000;  op2val:0xfffffffd00000080
TEST_RR_OP(smax32, x19, x28, x16, 0x0000000000000000, 0xfffffffd04000000, 0xfffffffd00000080, x8, 8, x11)

inst_2:
// rs1 == rs2 != rd, rs1==x0, rs2==x0, rd==x2, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == rs2_w0_val, rs2_w1_val == 8192, rs1_w1_val == -1
// opcode: smax32 ; op1:x0; op2:x0; dest:x2; op1val:0xfffffffffffffff6;  op2val:0x002000fffffff6
TEST_RR_OP(smax32, x2, x0, x0, 0x0000000000000000, 0xfffffffffffffff6, 0x002000fffffff6, x8, 16, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w1_val == -1048577, rs2_w0_val == 8192
// opcode: smax32 ; op1:x7; op2:x7; dest:x7; op1val:0x000006fffffff8;  op2val:0xffefffff00002000
TEST_RR_OP(smax32, x7, x7, x7, 0x0000000000000000, 0x000006fffffff8, 0xffefffff00002000, x8, 24, x11)

inst_4:
// rs2 == rd != rs1, rs1==x15, rs2==x9, rd==x9, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w1_val == -2097153, rs1_w1_val == -33, rs2_w0_val == -513, rs1_w0_val == 262144
// opcode: smax32 ; op1:x15; op2:x9; dest:x9; op1val:0xffffffdf00040000;  op2val:0xffdffffffffffdff
TEST_RR_OP(smax32, x9, x15, x9, 0x0000000000000000, 0xffffffdf00040000, 0xffdffffffffffdff, x8, 32, x11)

inst_5:
// rs1==x5, rs2==x1, rd==x20, rs2_w1_val == -1431655766, rs2_w0_val == 2
// opcode: smax32 ; op1:x5; op2:x1; dest:x20; op1val:0xc0000000fffffff6;  op2val:0xaaaaaaaa00000002
TEST_RR_OP(smax32, x20, x5, x1, 0x0000000000000000, 0xc0000000fffffff6, 0xaaaaaaaa00000002, x8, 40, x11)

inst_6:
// rs1==x12, rs2==x5, rd==x0, rs2_w1_val == 1431655765, rs1_w0_val == -67108865, rs2_w0_val == -65537, rs1_w1_val == 32768
// opcode: smax32 ; op1:x12; op2:x5; dest:x0; op1val:0x008000fbffffff;  op2val:0x55555555fffeffff
TEST_RR_OP(smax32, x0, x12, x5, 0x0000000000000000, 0x008000fbffffff, 0x55555555fffeffff, x8, 48, x11)

inst_7:
// rs1==x10, rs2==x31, rd==x6, rs2_w1_val == 2147483647, rs2_w0_val == 256, rs1_w0_val == -129, rs1_w1_val == 16777216
// opcode: smax32 ; op1:x10; op2:x31; dest:x6; op1val:0x1000000ffffff7f;  op2val:0x7fffffff00000100
TEST_RR_OP(smax32, x6, x10, x31, 0x0000000000000000, 0x1000000ffffff7f, 0x7fffffff00000100, x8, 56, x11)

inst_8:
// rs1==x19, rs2==x6, rd==x4, rs2_w1_val == -1073741825, rs1_w1_val == -4097, rs1_w0_val == 4194304
// opcode: smax32 ; op1:x19; op2:x6; dest:x4; op1val:0xffffefff00400000;  op2val:0xbfffffffefffffff
TEST_RR_OP(smax32, x4, x19, x6, 0x0000000000000000, 0xffffefff00400000, 0xbfffffffefffffff, x8, 64, x11)

inst_9:
// rs1==x30, rs2==x22, rd==x24, rs2_w1_val == -536870913, rs1_w0_val == 128, rs1_w1_val == 4
// opcode: smax32 ; op1:x30; op2:x22; dest:x24; op1val:0x00000400000080;  op2val:0xdffffffffffffff9
TEST_RR_OP(smax32, x24, x30, x22, 0x0000000000000000, 0x00000400000080, 0xdffffffffffffff9, x8, 72, x11)

inst_10:
// rs1==x22, rs2==x29, rd==x23, rs2_w1_val == -268435457, rs1_w0_val == -2097153
// opcode: smax32 ; op1:x22; op2:x29; dest:x23; op1val:0xfffffff6ffdfffff;  op2val:0xefffffff00000002
TEST_RR_OP(smax32, x23, x22, x29, 0x0000000000000000, 0xfffffff6ffdfffff, 0xefffffff00000002, x8, 80, x11)

inst_11:
// rs1==x24, rs2==x18, rd==x22, rs2_w1_val == -134217729, rs1_w1_val == 4096, rs2_w0_val == 16384, rs1_w0_val == -268435457
// opcode: smax32 ; op1:x24; op2:x18; dest:x22; op1val:0x001000efffffff;  op2val:0xf7ffffff00004000
TEST_RR_OP(smax32, x22, x24, x18, 0x0000000000000000, 0x001000efffffff, 0xf7ffffff00004000, x8, 88, x11)

inst_12:
// rs1==x3, rs2==x26, rd==x14, rs2_w1_val == -67108865, rs1_w1_val == -8388609, rs2_w0_val == 524288
// opcode: smax32 ; op1:x3; op2:x26; dest:x14; op1val:0xff7fffff00000080;  op2val:0xfbffffff00080000
TEST_RR_OP(smax32, x14, x3, x26, 0x0000000000000000, 0xff7fffff00000080, 0xfbffffff00080000, x8, 96, x11)

inst_13:
// rs1==x13, rs2==x20, rd==x16, rs2_w1_val == -33554433, rs1_w1_val == -5, rs2_w0_val == 2097152
// opcode: smax32 ; op1:x13; op2:x20; dest:x16; op1val:0xfffffffb00000006;  op2val:0xfdffffff00200000
TEST_RR_OP(smax32, x16, x13, x20, 0x0000000000000000, 0xfffffffb00000006, 0xfdffffff00200000, x8, 104, x11)

inst_14:
// rs1==x11, rs2==x13, rd==x31, rs2_w1_val == -16777217, rs2_w0_val == 0, rs1_w0_val == -4097
// opcode: smax32 ; op1:x11; op2:x13; dest:x31; op1val:0xfffffff9ffffefff;  op2val:0xfeffffff00000000
TEST_RR_OP(smax32, x31, x11, x13, 0x0000000000000000, 0xfffffff9ffffefff, 0xfeffffff00000000, x8, 112, x7)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_15:
// rs1==x23, rs2==x10, rd==x21, rs2_w1_val == -8388609, rs2_w0_val == -8193, rs1_w1_val == -131073
// opcode: smax32 ; op1:x23; op2:x10; dest:x21; op1val:0xfffdffff80000000;  op2val:0xff7fffffffffdfff
TEST_RR_OP(smax32, x21, x23, x10, 0x0000000000000000, 0xfffdffff80000000, 0xff7fffffffffdfff, x6, 0, x7)

inst_16:
// rs1==x9, rs2==x17, rd==x3, rs2_w1_val == -4194305, rs1_w0_val == -257, rs2_w0_val == 1, rs1_w1_val == -524289
// opcode: smax32 ; op1:x9; op2:x17; dest:x3; op1val:0xfff7fffffffffeff;  op2val:0xffbfffff00000001
TEST_RR_OP(smax32, x3, x9, x17, 0x0000000000000000, 0xfff7fffffffffeff, 0xffbfffff00000001, x6, 8, x7)

inst_17:
// rs1==x26, rs2==x27, rd==x15, rs2_w1_val == -524289, rs1_w1_val == 536870912, rs2_w0_val == -129
// opcode: smax32 ; op1:x26; op2:x27; dest:x15; op1val:0x2000000000000005;  op2val:0xfff7ffffffffff7f
TEST_RR_OP(smax32, x15, x26, x27, 0x0000000000000000, 0x2000000000000005, 0xfff7ffffffffff7f, x6, 16, x7)

inst_18:
// rs1==x16, rs2==x24, rd==x28, rs2_w1_val == -262145, rs2_w0_val == -2, rs1_w0_val == -134217729
// opcode: smax32 ; op1:x16; op2:x24; dest:x28; op1val:0xfffffff9f7ffffff;  op2val:0xfffbfffffffffffe
TEST_RR_OP(smax32, x28, x16, x24, 0x0000000000000000, 0xfffffff9f7ffffff, 0xfffbfffffffffffe, x6, 24, x7)

inst_19:
// rs1==x31, rs2==x15, rd==x8, rs2_w1_val == -131073, rs1_w1_val == -268435457, rs2_w0_val == -536870913, rs1_w0_val == 134217728
// opcode: smax32 ; op1:x31; op2:x15; dest:x8; op1val:0xefffffff08000000;  op2val:0xfffdffffdfffffff
TEST_RR_OP(smax32, x8, x31, x15, 0x0000000000000000, 0xefffffff08000000, 0xfffdffffdfffffff, x6, 32, x7)

inst_20:
// rs1==x18, rs2==x14, rd==x12, rs2_w1_val == -65537, rs1_w1_val == -9, rs1_w0_val == 1024
// opcode: smax32 ; op1:x18; op2:x14; dest:x12; op1val:0xfffffff700000400;  op2val:0xfffeffffefffffff
TEST_RR_OP(smax32, x12, x18, x14, 0x0000000000000000, 0xfffffff700000400, 0xfffeffffefffffff, x6, 40, x7)

inst_21:
// rs1==x1, rs2==x12, rd==x25, rs2_w1_val == -32769, rs1_w0_val == 256
// opcode: smax32 ; op1:x1; op2:x12; dest:x25; op1val:0xff7fffff00000100;  op2val:0xffff7ffffffffdff
TEST_RR_OP(smax32, x25, x1, x12, 0x0000000000000000, 0xff7fffff00000100, 0xffff7ffffffffdff, x6, 48, x7)

inst_22:
// rs1==x20, rs2==x25, rd==x18, rs2_w1_val == -16385, rs1_w0_val == -1025, rs1_w1_val == -16777217, rs2_w0_val == -17
// opcode: smax32 ; op1:x20; op2:x25; dest:x18; op1val:0xfefffffffffffbff;  op2val:0xffffbfffffffffef
TEST_RR_OP(smax32, x18, x20, x25, 0x0000000000000000, 0xfefffffffffffbff, 0xffffbfffffffffef, x6, 56, x7)

inst_23:
// rs1==x2, rs2==x8, rd==x5, rs2_w1_val == -8193, rs1_w1_val == 8
// opcode: smax32 ; op1:x2; op2:x8; dest:x5; op1val:0x000008efffffff;  op2val:0xffffdffffffffff8
TEST_RR_OP(smax32, x5, x2, x8, 0x0000000000000000, 0x000008efffffff, 0xffffdffffffffff8, x6, 64, x7)

inst_24:
// rs1==x17, rs2==x4, rd==x10, rs2_w1_val == -4097, rs1_w0_val == -262145, rs1_w1_val == -17, rs2_w0_val == -524289
// opcode: smax32 ; op1:x17; op2:x4; dest:x10; op1val:0xffffffeffffbffff;  op2val:0xffffeffffff7ffff
TEST_RR_OP(smax32, x10, x17, x4, 0x0000000000000000, 0xffffffeffffbffff, 0xffffeffffff7ffff, x6, 72, x7)

inst_25:
// rs1==x4, rs2==x3, rd==x26, rs2_w1_val == -2049, rs1_w0_val == -5, rs1_w1_val == 134217728
// opcode: smax32 ; op1:x4; op2:x3; dest:x26; op1val:0x8000000fffffffb;  op2val:0xfffff7ffffffdfff
TEST_RR_OP(smax32, x26, x4, x3, 0x0000000000000000, 0x8000000fffffffb, 0xfffff7ffffffdfff, x6, 80, x7)

inst_26:
// rs1==x29, rs2==x19, rd==x30, rs2_w1_val == -1025, rs2_w0_val == -8388609, rs1_w0_val == 268435456
// opcode: smax32 ; op1:x29; op2:x19; dest:x30; op1val:0xfffffff710000000;  op2val:0xfffffbffff7fffff
TEST_RR_OP(smax32, x30, x29, x19, 0x0000000000000000, 0xfffffff710000000, 0xfffffbffff7fffff, x6, 88, x7)

inst_27:
// rs1==x8, rs2==x11, rd==x29, rs2_w1_val == -513, rs1_w0_val == -16385
// opcode: smax32 ; op1:x8; op2:x11; dest:x29; op1val:0xefffffffffffbfff;  op2val:0xfffffdff00080000
TEST_RR_OP(smax32, x29, x8, x11, 0x0000000000000000, 0xefffffffffffbfff, 0xfffffdff00080000, x6, 96, x4)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_28:
// rs1==x6, rs2==x2, rd==x11, rs2_w1_val == -257, rs1_w1_val == 2
// opcode: smax32 ; op1:x6; op2:x2; dest:x11; op1val:0x000002ffffefff;  op2val:0xfffffefffffffffe
TEST_RR_OP(smax32, x11, x6, x2, 0x0000000000000000, 0x000002ffffefff, 0xfffffefffffffffe, x3, 0, x4)

inst_29:
// rs1==x21, rs2==x30, rd==x17, rs2_w1_val == -129, rs1_w0_val == 131072, rs2_w0_val == -3
// opcode: smax32 ; op1:x21; op2:x30; dest:x17; op1val:0xff7fffff00020000;  op2val:0xffffff7ffffffffd
TEST_RR_OP(smax32, x17, x21, x30, 0x0000000000000000, 0xff7fffff00020000, 0xffffff7ffffffffd, x3, 8, x4)

inst_30:
// rs1==x25, rs2==x21, rd==x13, rs2_w1_val == -65, rs1_w1_val == -257
// opcode: smax32 ; op1:x25; op2:x21; dest:x13; op1val:0xfffffeff10000000;  op2val:0xffffffbf00080000
TEST_RR_OP(smax32, x13, x25, x21, 0x0000000000000000, 0xfffffeff10000000, 0xffffffbf00080000, x3, 16, x4)

inst_31:
// rs1==x14, rs2==x28, rd==x1, rs2_w1_val == -33, rs1_w0_val == 524288
// opcode: smax32 ; op1:x14; op2:x28; dest:x1; op1val:0xfffffffa00080000;  op2val:0xffffffdffffffff8
TEST_RR_OP(smax32, x1, x14, x28, 0x0000000000000000, 0xfffffffa00080000, 0xffffffdffffffff8, x3, 24, x4)

inst_32:
// rs2_w1_val == -17, rs2_w0_val == 1073741824, rs1_w0_val == -17
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9ffffffef;  op2val:0xffffffef40000000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffffff9ffffffef, 0xffffffef40000000, x3, 32, x4)

inst_33:
// rs2_w1_val == -9, rs1_w0_val == 1431655765, rs2_w0_val == -65, rs1_w1_val == 256
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010055555555;  op2val:0xfffffff7ffffffbf
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x00010055555555, 0xfffffff7ffffffbf, x3, 40, x4)

inst_34:
// rs2_w1_val == -5, rs2_w0_val == 67108864, rs1_w1_val == 1431655765
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555580000000;  op2val:0xfffffffb04000000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x5555555580000000, 0xfffffffb04000000, x3, 48, x4)

inst_35:
// rs2_w1_val == -2, rs1_w1_val == -8193, rs2_w0_val == -4194305
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000005;  op2val:0xfffffffeffbfffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000005, 0xfffffffeffbfffff, x3, 56, x4)

inst_36:
// rs2_w1_val == -2147483648, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff955555555;  op2val:0x8000000040000000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffffff955555555, 0x8000000040000000, x3, 64, x4)

inst_37:
// rs2_w1_val == 1073741824, rs1_w1_val == 32, rs2_w0_val == -1073741825, rs1_w0_val == -513
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffffdff;  op2val:0x40000000bfffffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x000020fffffdff, 0x40000000bfffffff, x3, 72, x4)

inst_38:
// rs2_w1_val == 536870912, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000006;  op2val:0x2000000000000002
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xffffffff00000006, 0x2000000000000002, x3, 80, x4)

inst_39:
// rs2_w1_val == 268435456, rs1_w0_val == -33554433, rs1_w1_val == 16, rs2_w0_val == 4096
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010fdffffff;  op2val:0x1000000000001000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x000010fdffffff, 0x1000000000001000, x3, 88, x4)

inst_40:
// rs2_w1_val == 134217728, rs2_w0_val == -5
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000400;  op2val:0x8000000fffffffb
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x800000000000400, 0x8000000fffffffb, x3, 96, x4)

inst_41:
// rs2_w1_val == 67108864, rs1_w0_val == 33554432, rs1_w1_val == -1025, rs2_w0_val == 32
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff02000000;  op2val:0x400000000000020
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffffbff02000000, 0x400000000000020, x3, 104, x4)

inst_42:
// rs2_w1_val == 33554432, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000c0000000;  op2val:0x200000000000006
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x001000c0000000, 0x200000000000006, x3, 112, x4)

inst_43:
// rs2_w1_val == 16777216, rs1_w0_val == -9
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9fffffff7;  op2val:0x1000000fffffdff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffffff9fffffff7, 0x1000000fffffdff, x3, 120, x4)

inst_44:
// rs2_w1_val == 8388608, rs2_w0_val == -1431655766, rs1_w0_val == 1073741824
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000340000000;  op2val:0x800000aaaaaaaa
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x00000340000000, 0x800000aaaaaaaa, x3, 128, x4)

inst_45:
// rs2_w1_val == 4194304, rs1_w1_val == 1024
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x0004003fffffff;  op2val:0x40000000000009
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x0004003fffffff, 0x40000000000009, x3, 136, x4)

inst_46:
// rs2_w1_val == 2097152, rs1_w0_val == 64, rs2_w0_val == 536870912
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000040;  op2val:0x20000020000000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x00002000000040, 0x20000020000000, x3, 144, x4)

inst_47:
// rs2_w1_val == 1048576, rs2_w0_val == 1024, rs1_w0_val == 32
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000020;  op2val:0x10000000000400
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x00000900000020, 0x10000000000400, x3, 152, x4)

inst_48:
// rs2_w1_val == 262144, rs2_w0_val == -131073, rs1_w1_val == 2048
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000020;  op2val:0x040000fffdffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x00080000000020, 0x040000fffdffff, x3, 160, x4)

inst_49:
// rs2_w1_val == 131072, rs2_w0_val == -2147483648, rs1_w1_val == 262144
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000ffffefff;  op2val:0x02000080000000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x040000ffffefff, 0x02000080000000, x3, 168, x4)

inst_50:
// rs2_w1_val == 65536, rs1_w0_val == 1, rs2_w0_val == 1048576
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000001;  op2val:0x01000000100000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x00000400000001, 0x01000000100000, x3, 176, x4)

inst_51:
// rs1_w0_val == 16777216, rs2_w0_val == -33554433, rs1_w1_val == 268435456
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000001000000;  op2val:0x000005fdffffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x1000000001000000, 0x000005fdffffff, x3, 184, x4)

inst_52:
// rs1_w0_val == 8388608, rs1_w1_val == 8192
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000800000;  op2val:0xfffffffb04000000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x00200000800000, 0xfffffffb04000000, x3, 192, x4)

inst_53:
// rs1_w0_val == 2097152, rs2_w0_val == 131072, rs2_w1_val == 256
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000200000;  op2val:0x00010000020000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x00100000200000, 0x00010000020000, x3, 200, x4)

inst_54:
// rs1_w0_val == 1048576, rs2_w0_val == 32768
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000100000;  op2val:0x00000700008000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x800000000100000, 0x00000700008000, x3, 208, x4)

inst_55:
// rs1_w0_val == 65536, rs2_w0_val == -16777217, rs1_w1_val == -513
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00010000;  op2val:0x000003feffffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00010000, 0x000003feffffff, x3, 216, x4)

inst_56:
// rs1_w0_val == 32768, rs2_w1_val == 16
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700008000;  op2val:0x00001000020000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffffff700008000, 0x00001000020000, x3, 224, x4)

inst_57:
// rs1_w0_val == 16384, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00004000;  op2val:0x20000000004000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xefffffff00004000, 0x20000000004000, x3, 232, x4)

inst_58:
// rs1_w0_val == 8192, rs2_w1_val == -1
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00002000;  op2val:0xffffffffefffffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00002000, 0xffffffffefffffff, x3, 240, x4)

inst_59:
// rs1_w0_val == 4096, rs1_w1_val == 1073741824
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000001000;  op2val:0xc000000000080000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x4000000000001000, 0xc000000000080000, x3, 248, x4)

inst_60:
// rs1_w0_val == 2048, rs2_w0_val == -9
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000300000800;  op2val:0x080000fffffff7
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x00000300000800, 0x080000fffffff7, x3, 256, x4)

inst_61:
// rs1_w0_val == 512, rs2_w1_val == 8, rs2_w0_val == -2049
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000200;  op2val:0x000008fffff7ff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000200, 0x000008fffff7ff, x3, 264, x4)

inst_62:
// rs1_w0_val == 16, rs1_w1_val == -67108865, rs2_w0_val == -2097153, rs2_w1_val == 512
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000010;  op2val:0x000200ffdfffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000010, 0x000200ffdfffff, x3, 272, x4)

inst_63:
// rs1_w0_val == 8, rs1_w1_val == -2147483648, rs2_w0_val == 2048
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000008;  op2val:0xfffdffff00000800
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x8000000000000008, 0xfffdffff00000800, x3, 280, x4)

inst_64:
// rs1_w0_val == 4, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000004;  op2val:0xffffdffffffffffd
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000004, 0xffffdffffffffffd, x3, 288, x4)

inst_65:
// rs1_w0_val == 2, rs2_w0_val == -1
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000002;  op2val:0x8000000ffffffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x8000000000000002, 0x8000000ffffffff, x3, 296, x4)

inst_66:
// rs1_w0_val == 0, rs1_w1_val == 16384
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000000000;  op2val:0xfffffff7ffffffef
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x00400000000000, 0xfffffff7ffffffef, x3, 304, x4)

inst_67:
// rs1_w0_val == -1, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ffffffff;  op2val:0xf7ffffff00000005
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x8000000ffffffff, 0xf7ffffff00000005, x3, 312, x4)

inst_68:
// rs2_w1_val == 32768, rs1_w1_val == 131072
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000200;  op2val:0x008000dfffffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x02000000000200, 0x008000dfffffff, x3, 320, x4)

inst_69:
// rs2_w1_val == 16384, rs1_w1_val == -1431655766
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa02000000;  op2val:0x004000fffffff7
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa02000000, 0x004000fffffff7, x3, 328, x4)

inst_70:
// rs2_w1_val == 4096, rs1_w1_val == -262145, rs2_w0_val == 268435456
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000200;  op2val:0x00100010000000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000200, 0x00100010000000, x3, 336, x4)

inst_71:
// rs2_w1_val == 2048, rs1_w0_val == -8388609
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000ff7fffff;  op2val:0x000800ff7fffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xc0000000ff7fffff, 0x000800ff7fffff, x3, 344, x4)

inst_72:
// rs2_w1_val == 1024, rs1_w1_val == 524288
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000ff7fffff;  op2val:0x000400fffdffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x080000ff7fffff, 0x000400fffdffff, x3, 352, x4)

inst_73:
// rs2_w1_val == 128, rs1_w0_val == -1431655766
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9aaaaaaaa;  op2val:0x000080ffffffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffffff9aaaaaaaa, 0x000080ffffffff, x3, 360, x4)

inst_74:
// rs2_w1_val == 64, rs1_w1_val == 67108864
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000100;  op2val:0x000040feffffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x400000000000100, 0x000040feffffff, x3, 368, x4)

inst_75:
// rs2_w1_val == 32, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005efffffff;  op2val:0x00002004000000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x000005efffffff, 0x00002004000000, x3, 376, x4)

inst_76:
// rs2_w1_val == 4, rs1_w1_val == 64, rs1_w0_val == -536870913
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040dfffffff;  op2val:0x000004bfffffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x000040dfffffff, 0x000004bfffffff, x3, 384, x4)

inst_77:
// rs2_w1_val == 2, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000aaaaaaaa;  op2val:0x0000023fffffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x4000000aaaaaaaa, 0x0000023fffffff, x3, 392, x4)

inst_78:
// rs2_w1_val == 1, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100ffffffef;  op2val:0x00000100001000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x000100ffffffef, 0x00000100001000, x3, 400, x4)

inst_79:
// rs2_w1_val == 0, rs1_w1_val == -2049
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000006;  op2val:0x000000fff7ffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000006, 0x000000fff7ffff, x3, 408, x4)

inst_80:
// rs2_w0_val == 1431655765, rs1_w0_val == -1073741825
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7bfffffff;  op2val:0xf7ffffff55555555
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffffff7bfffffff, 0xf7ffffff55555555, x3, 416, x4)

inst_81:
// rs2_w0_val == 262144, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000955555555;  op2val:0x2000000000040000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x00000955555555, 0x2000000000040000, x3, 424, x4)

inst_82:
// rs2_w0_val == 65536, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000002;  op2val:0xfffeffff00010000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000002, 0xfffeffff00010000, x3, 432, x4)

inst_83:
// rs2_w0_val == 512, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffffff7;  op2val:0xfffffffb00000200
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x20000000fffffff7, 0xfffffffb00000200, x3, 440, x4)

inst_84:
// rs2_w0_val == 64, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffffffffeff;  op2val:0xf7ffffff00000040
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x3ffffffffffffeff, 0xf7ffffff00000040, x3, 448, x4)

inst_85:
// rs2_w0_val == 16, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00020000;  op2val:0x00000400000010
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xffffffff00020000, 0x00000400000010, x3, 456, x4)

inst_86:
// rs2_w0_val == 8, rs1_w1_val == -536870913
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00002000;  op2val:0x400000000000008
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00002000, 0x400000000000008, x3, 464, x4)

inst_87:
// rs2_w0_val == 4, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff655555555;  op2val:0xfffffffb00000004
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffffff655555555, 0xfffffffb00000004, x3, 472, x4)

inst_88:
// rs1_w1_val == 2147483647, rs2_w0_val == 16777216
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffffeff;  op2val:0x800000001000000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffffeff, 0x800000001000000, x3, 480, x4)

inst_89:
// rs1_w1_val == -1073741825, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00040000;  op2val:0xfffffffdfffffffc
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00040000, 0xfffffffdfffffffc, x3, 488, x4)

inst_90:
// rs1_w1_val == -134217729, rs1_w0_val == -33
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffffdf;  op2val:0xfeffffff00004000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffffdf, 0xfeffffff00004000, x3, 496, x4)

inst_91:
// rs1_w1_val == -33554433, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00800000;  op2val:0xfffffff6efffffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00800000, 0xfffffff6efffffff, x3, 504, x4)

inst_92:
// rs1_w1_val == -4194305, rs1_w0_val == -4194305
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffbfffff;  op2val:0xfffffffb00000005
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xffbfffffffbfffff, 0xfffffffb00000005, x3, 512, x4)

inst_93:
// rs1_w1_val == -2097153, rs2_w0_val == 134217728
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffdffffff;  op2val:0xfbffffff08000000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xffdffffffdffffff, 0xfbffffff08000000, x3, 520, x4)

inst_94:
// rs1_w1_val == -1048577, rs2_w0_val == -257
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffff7;  op2val:0xfffffffafffffeff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffff7, 0xfffffffafffffeff, x3, 528, x4)

inst_95:
// rs1_w1_val == -65537, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000003;  op2val:0xffff7ffffffffff8
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000003, 0xffff7ffffffffff8, x3, 536, x4)

inst_96:
// rs1_w1_val == -32769, rs2_w0_val == -16385
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000000;  op2val:0x100000ffffbfff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000000, 0x100000ffffbfff, x3, 544, x4)

inst_97:
// rs1_w1_val == -16385, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffffffff;  op2val:0xfffffeff00000040
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xffffbfffffffffff, 0xfffffeff00000040, x3, 552, x4)

inst_98:
// rs1_w1_val == -129, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000800;  op2val:0x000005ffffff7f
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000800, 0x000005ffffff7f, x3, 560, x4)

inst_99:
// rs1_w1_val == -65, rs2_w0_val == 8388608
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffffbfff;  op2val:0x00040000800000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xffffffbfffffbfff, 0x00040000800000, x3, 568, x4)

inst_100:
// rs1_w1_val == -2, rs2_w0_val == 33554432
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffedfffffff;  op2val:0xfdffffff02000000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffffffedfffffff, 0xfdffffff02000000, x3, 576, x4)

inst_101:
// rs1_w1_val == 33554432, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000020;  op2val:0x00000300000800
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x200000000000020, 0x00000300000800, x3, 584, x4)

inst_102:
// rs1_w1_val == 2097152, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffffeff;  op2val:0xffffdfff00000200
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x200000fffffeff, 0xffffdfff00000200, x3, 592, x4)

inst_103:
// rs1_w1_val == 1048576, rs2_w0_val == 4194304
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffffbfff;  op2val:0x00000800400000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x100000ffffbfff, 0x00000800400000, x3, 600, x4)

inst_104:
// rs1_w1_val == 65536, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffffff7f;  op2val:0x00100000000080
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x010000ffffff7f, 0x00100000000080, x3, 608, x4)

inst_105:
// rs1_w1_val == 512, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000010000;  op2val:0xffffffbf55555555
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x00020000010000, 0xffffffbf55555555, x3, 616, x4)

inst_106:
// rs1_w1_val == 128, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080fffbffff;  op2val:0xfffff7fffffffff9
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x000080fffbffff, 0xfffff7fffffffff9, x3, 624, x4)

inst_107:
// rs2_w0_val == 2147483647, rs1_w1_val == 0
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000200000;  op2val:0xfffffbff7fffffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x00000000200000, 0xfffffbff7fffffff, x3, 632, x4)

inst_108:
// rs1_w1_val == 1, rs1_w0_val == -131073
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffdffff;  op2val:0xffffffff00000004
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x000001fffdffff, 0xffffffff00000004, x3, 640, x4)

inst_109:
// rs2_w0_val == -134217729, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000001;  op2val:0x20000000f7ffffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x00000900000001, 0x20000000f7ffffff, x3, 648, x4)

inst_110:
// rs2_w0_val == -67108865, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffffbffff;  op2val:0xfffffdfffbffffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffffdfffffbffff, 0xfffffdfffbffffff, x3, 656, x4)

inst_111:
// rs1_w0_val == 2147483647, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x0020007fffffff;  op2val:0xffff7fff00000010
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x0020007fffffff, 0xffff7fff00000010, x3, 664, x4)

inst_112:
// rs2_w0_val == -1048577, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000080;  op2val:0xfbffffffffefffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000080, 0xfbffffffffefffff, x3, 672, x4)

inst_113:
// rs2_w0_val == -262145, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffff7f;  op2val:0x000100fffbffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffff7f, 0x000100fffbffff, x3, 680, x4)

inst_114:
// rs1_w0_val == -16777217, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfeffffff;  op2val:0x040000ffffffbf
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffffffbfeffffff, 0x040000ffffffbf, x3, 688, x4)

inst_115:
// rs2_w0_val == -32769, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff908000000;  op2val:0x000080ffff7fff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffffff908000000, 0x000080ffff7fff, x3, 696, x4)

inst_116:
// rs2_w0_val == -4097, rs1_w0_val == -65
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffffffbf;  op2val:0xdfffffffffffefff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x40000000ffffffbf, 0xdfffffffffffefff, x3, 704, x4)

inst_117:
// rs1_w0_val == -1048577, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009ffefffff;  op2val:0x40000000010000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x000009ffefffff, 0x40000000010000, x3, 712, x4)

inst_118:
// rs1_w0_val == -524289, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200fff7ffff;  op2val:0x000009ffffffef
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x000200fff7ffff, 0x000009ffffffef, x3, 720, x4)

inst_119:
// rs2_w0_val == -1025, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000008;  op2val:0xffffbffffffffbff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000008, 0xffffbffffffffbff, x3, 728, x4)

inst_120:
// rs1_w0_val == -65537, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffeffff;  op2val:0x02000000000100
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xbffffffffffeffff, 0x02000000000100, x3, 736, x4)

inst_121:
// rs1_w0_val == -32769, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffff7fff;  op2val:0x400000ffffff7f
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffffeffffff7fff, 0x400000ffffff7f, x3, 744, x4)

inst_122:
// rs1_w1_val == 8388608, rs1_w0_val == -8193
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffffdfff;  op2val:0xfffffff920000000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x800000ffffdfff, 0xfffffff920000000, x3, 752, x4)

inst_123:
// rs2_w0_val == -33, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000002;  op2val:0xefffffffffffffdf
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000002, 0xefffffffffffffdf, x3, 760, x4)

inst_124:
// rs1_w0_val == -3, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffffffd;  op2val:0xfffffbfff7ffffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x8000000fffffffd, 0xfffffbfff7ffffff, x3, 768, x4)

inst_125:
// rs1_w0_val == -2, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffffe;  op2val:0x00000500200000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffffe, 0x00000500200000, x3, 776, x4)

inst_126:
// rs1_w0_val == 536870912, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f20000000;  op2val:0xfffffffcfffffffb
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xffffff7f20000000, 0xfffffffcfffffffb, x3, 784, x4)

inst_127:
// rs1_w0_val == -2049, 
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffff7ff;  op2val:0xff7fffffffffbfff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xffdffffffffff7ff, 0xff7fffffffffbfff, x3, 792, x4)

inst_128:
// rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == rs2_w0_val, rs2_w1_val == 8192, rs1_w1_val == -1
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffff6;  op2val:0x002000fffffff6
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffff6, 0x002000fffffff6, x3, 800, x4)

inst_129:
// rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w1_val == -1048577, rs2_w0_val == 8192
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006fffffff8;  op2val:0xffefffff00002000
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x000006fffffff8, 0xffefffff00002000, x3, 808, x4)

inst_130:
// rs2_w1_val == 1431655765, rs1_w0_val == -67108865, rs2_w0_val == -65537, rs1_w1_val == 32768
// opcode: smax32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000fbffffff;  op2val:0x55555555fffeffff
TEST_RR_OP(smax32, x31, x30, x29, 0x0000000000000000, 0x008000fbffffff, 0x55555555fffeffff, x3, 816, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 13*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 103*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
