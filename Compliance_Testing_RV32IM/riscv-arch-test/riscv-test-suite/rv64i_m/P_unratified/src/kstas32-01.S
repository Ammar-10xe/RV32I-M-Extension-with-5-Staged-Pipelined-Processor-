
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kstas32 instruction of the RISC-V RV64PZicsr extension for the kstas32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kstas32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x18,signature_x18_1)

inst_0:
// rs1 == rd != rs2, rs1==x10, rs2==x2, rd==x10, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w0_val == -4097, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0
// opcode: kstas32 ; op1:x10; op2:x2; dest:x10; op1val:0x00000780000000;  op2val:0xfffffff8ffffefff
TEST_PKRR_OP(kstas32, x10, x10, x2, 0x0000000000000000, 0x00000780000000, 0xfffffff8ffffefff, x10, x18, 0, x17)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x16, rs2==x5, rd==x0, rs1_w1_val == rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val == 131072, rs2_w1_val == 32, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 32
// opcode: kstas32 ; op1:x16; op2:x5; dest:x0; op1val:0x00002000020000;  op2val:0x00002000000006
TEST_PKRR_OP(kstas32, x0, x16, x5, 0x0000000000000000, 0x00002000020000, 0x00002000000006, x16, x18, 16, x17)

inst_2:
// rs1 == rs2 != rd, rs1==x14, rs2==x14, rd==x4, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w1_val == 8192, rs1_w0_val == -8388609, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w1_val == -5, rs2_w0_val == 1073741824
// opcode: kstas32 ; op1:x14; op2:x14; dest:x4; op1val:0xfffffffbff7fffff;  op2val:0x00200040000000
TEST_PKRR_OP(kstas32, x4, x14, x14, 0x0000000000000000, 0xfffffffbff7fffff, 0x00200040000000, x14, x18, 32, x17)

inst_3:
// rs1 == rs2 == rd, rs1==x20, rs2==x20, rd==x20, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w1_val == -33554433, rs1_w1_val == -257, rs2_w0_val == -9
// opcode: kstas32 ; op1:x20; op2:x20; dest:x20; op1val:0xfffffeff00000009;  op2val:0xfdfffffffffffff7
TEST_PKRR_OP(kstas32, x20, x20, x20, 0x0000000000000000, 0xfffffeff00000009, 0xfdfffffffffffff7, x20, x18, 48, x17)

inst_4:
// rs2 == rd != rs1, rs1==x27, rs2==x29, rd==x29, rs1_w0_val == rs2_w0_val, rs2_w0_val == -1431655766, rs1_w0_val == -1431655766, rs2_w1_val == 2147483647
// opcode: kstas32 ; op1:x27; op2:x29; dest:x29; op1val:0x3fffffffaaaaaaaa;  op2val:0x7fffffffaaaaaaaa
TEST_PKRR_OP(kstas32, x29, x27, x29, 0x0000000000000000, 0x3fffffffaaaaaaaa, 0x7fffffffaaaaaaaa, x27, x18, 64, x17)

inst_5:
// rs1==x8, rs2==x4, rd==x6, rs2_w1_val == -1431655766, rs1_w1_val == -536870913, rs1_w0_val == -16777217, rs2_w0_val == 8388608
// opcode: kstas32 ; op1:x8; op2:x4; dest:x6; op1val:0xdffffffffeffffff;  op2val:0xaaaaaaaa00800000
TEST_PKRR_OP(kstas32, x6, x8, x4, 0x0000000000000000, 0xdffffffffeffffff, 0xaaaaaaaa00800000, x8, x18, 80, x17)

inst_6:
// rs1==x29, rs2==x11, rd==x30, rs2_w1_val == 1431655765, rs1_w0_val == -1073741825, rs2_w0_val == -2097153, rs1_w1_val == -1431655766
// opcode: kstas32 ; op1:x29; op2:x11; dest:x30; op1val:0xaaaaaaaabfffffff;  op2val:0x55555555ffdfffff
TEST_PKRR_OP(kstas32, x30, x29, x11, 0x0000000000000000, 0xaaaaaaaabfffffff, 0x55555555ffdfffff, x29, x18, 96, x17)

inst_7:
// rs1==x12, rs2==x23, rd==x26, rs2_w1_val == -1073741825, rs1_w1_val == 8, rs1_w0_val == 8192, rs2_w0_val == -134217729
// opcode: kstas32 ; op1:x12; op2:x23; dest:x26; op1val:0x00000800002000;  op2val:0xbffffffff7ffffff
TEST_PKRR_OP(kstas32, x26, x12, x23, 0x0000000000000000, 0x00000800002000, 0xbffffffff7ffffff, x12, x18, 112, x17)

inst_8:
// rs1==x28, rs2==x1, rd==x23, rs2_w1_val == -536870913, rs1_w1_val == 1048576, rs2_w0_val == 16, rs1_w0_val == -1048577
// opcode: kstas32 ; op1:x28; op2:x1; dest:x23; op1val:0x100000ffefffff;  op2val:0xdfffffff00000010
TEST_PKRR_OP(kstas32, x23, x28, x1, 0x0000000000000000, 0x100000ffefffff, 0xdfffffff00000010, x28, x18, 128, x17)

inst_9:
// rs1==x26, rs2==x16, rd==x27, rs2_w1_val == -268435457, rs1_w1_val == 2, rs2_w0_val == 1048576, rs1_w0_val == 524288
// opcode: kstas32 ; op1:x26; op2:x16; dest:x27; op1val:0x00000200080000;  op2val:0xefffffff00100000
TEST_PKRR_OP(kstas32, x27, x26, x16, 0x0000000000000000, 0x00000200080000, 0xefffffff00100000, x26, x18, 144, x17)

inst_10:
// rs1==x9, rs2==x25, rd==x3, rs2_w1_val == -134217729, rs1_w0_val == 1024, rs2_w0_val == 134217728
// opcode: kstas32 ; op1:x9; op2:x25; dest:x3; op1val:0xfffffffc00000400;  op2val:0xf7ffffff08000000
TEST_PKRR_OP(kstas32, x3, x9, x25, 0x0000000000000000, 0xfffffffc00000400, 0xf7ffffff08000000, x9, x18, 160, x17)

inst_11:
// rs1==x7, rs2==x21, rd==x13, rs2_w1_val == -67108865, rs2_w0_val == 512, rs1_w1_val == -67108865, rs1_w0_val == 16
// opcode: kstas32 ; op1:x7; op2:x21; dest:x13; op1val:0xfbffffff00000010;  op2val:0xfbffffff00000200
TEST_PKRR_OP(kstas32, x13, x7, x21, 0x0000000000000000, 0xfbffffff00000010, 0xfbffffff00000200, x7, x18, 176, x17)

inst_12:
// rs1==x23, rs2==x10, rd==x15, rs2_w1_val == -16777217, rs1_w1_val == -268435457, rs1_w0_val == 2048
// opcode: kstas32 ; op1:x23; op2:x10; dest:x15; op1val:0xefffffff00000800;  op2val:0xfeffffff00000006
TEST_PKRR_OP(kstas32, x15, x23, x10, 0x0000000000000000, 0xefffffff00000800, 0xfeffffff00000006, x23, x18, 192, x17)

inst_13:
// rs1==x22, rs2==x26, rd==x8, rs2_w1_val == -8388609, rs2_w0_val == -1025, rs1_w1_val == 2097152, rs1_w0_val == 8
// opcode: kstas32 ; op1:x22; op2:x26; dest:x8; op1val:0x20000000000008;  op2val:0xff7ffffffffffbff
TEST_PKRR_OP(kstas32, x8, x22, x26, 0x0000000000000000, 0x20000000000008, 0xff7ffffffffffbff, x22, x18, 208, x17)

inst_14:
// rs1==x1, rs2==x17, rd==x5, rs2_w1_val == -4194305, rs1_w0_val == 262144, rs1_w1_val == -129
// opcode: kstas32 ; op1:x1; op2:x17; dest:x5; op1val:0xffffff7f00040000;  op2val:0xffbfffffffffefff
TEST_PKRR_OP(kstas32, x5, x1, x17, 0x0000000000000000, 0xffffff7f00040000, 0xffbfffffffffefff, x1, x18, 224, x20)
RVTEST_SIGBASE(x10,signature_x10_0)

inst_15:
// rs1==x24, rs2==x31, rd==x14, rs2_w1_val == -2097153, rs1_w0_val == -65, rs2_w0_val == -8193, rs1_w1_val == -16777217
// opcode: kstas32 ; op1:x24; op2:x31; dest:x14; op1val:0xfeffffffffffffbf;  op2val:0xffdfffffffffdfff
TEST_PKRR_OP(kstas32, x14, x24, x31, 0x0000000000000000, 0xfeffffffffffffbf, 0xffdfffffffffdfff, x24, x10, 0, x20)

inst_16:
// rs1==x6, rs2==x0, rd==x11, rs2_w1_val == -1048577, rs1_w1_val == 8192, rs2_w0_val == -257, rs1_w0_val == 0
// opcode: kstas32 ; op1:x6; op2:x0; dest:x11; op1val:0x00200000000000;  op2val:0xffeffffffffffeff
TEST_PKRR_OP(kstas32, x11, x6, x0, 0x0000000000000000, 0x00200000000000, 0xffeffffffffffeff, x6, x10, 16, x20)

inst_17:
// rs1==x18, rs2==x15, rd==x16, rs2_w1_val == -524289, rs1_w0_val == 1431655765, rs2_w0_val == -129, rs1_w1_val == -1025
// opcode: kstas32 ; op1:x18; op2:x15; dest:x16; op1val:0xfffffbff55555555;  op2val:0xfff7ffffffffff7f
TEST_PKRR_OP(kstas32, x16, x18, x15, 0x0000000000000000, 0xfffffbff55555555, 0xfff7ffffffffff7f, x18, x10, 32, x20)

inst_18:
// rs1==x25, rs2==x8, rd==x9, rs2_w1_val == -262145, rs1_w1_val == 4194304, rs2_w0_val == -65, rs1_w0_val == -268435457
// opcode: kstas32 ; op1:x25; op2:x8; dest:x9; op1val:0x400000efffffff;  op2val:0xfffbffffffffffbf
TEST_PKRR_OP(kstas32, x9, x25, x8, 0x0000000000000000, 0x400000efffffff, 0xfffbffffffffffbf, x25, x10, 48, x20)

inst_19:
// rs1==x5, rs2==x7, rd==x12, rs2_w1_val == -131073, rs1_w0_val == -32769, rs2_w0_val == 4096, rs1_w1_val == 32768
// opcode: kstas32 ; op1:x5; op2:x7; dest:x12; op1val:0x008000ffff7fff;  op2val:0xfffdffff00001000
TEST_PKRR_OP(kstas32, x12, x5, x7, 0x0000000000000000, 0x008000ffff7fff, 0xfffdffff00001000, x5, x10, 64, x20)

inst_20:
// rs1==x0, rs2==x12, rd==x25, rs2_w1_val == -65537, rs2_w0_val == -5, rs1_w1_val == -4097, rs1_w0_val == 1048576
// opcode: kstas32 ; op1:x0; op2:x12; dest:x25; op1val:0xffffefff00100000;  op2val:0xfffefffffffffffb
TEST_PKRR_OP(kstas32, x25, x0, x12, 0x0000000000000000, 0xffffefff00100000, 0xfffefffffffffffb, x0, x10, 80, x20)

inst_21:
// rs1==x30, rs2==x3, rd==x17, rs2_w1_val == -32769, rs1_w0_val == -1, rs1_w1_val == -9
// opcode: kstas32 ; op1:x30; op2:x3; dest:x17; op1val:0xfffffff7ffffffff;  op2val:0xffff7fffffdfffff
TEST_PKRR_OP(kstas32, x17, x30, x3, 0x0000000000000000, 0xfffffff7ffffffff, 0xffff7fffffdfffff, x30, x10, 96, x20)

inst_22:
// rs1==x13, rs2==x30, rd==x1, rs2_w1_val == -16385, rs2_w0_val == -32769, rs1_w1_val == -524289
// opcode: kstas32 ; op1:x13; op2:x30; dest:x1; op1val:0xfff7ffff00000008;  op2val:0xffffbfffffff7fff
TEST_PKRR_OP(kstas32, x1, x13, x30, 0x0000000000000000, 0xfff7ffff00000008, 0xffffbfffffff7fff, x13, x10, 112, x20)

inst_23:
// rs1==x4, rs2==x6, rd==x21, rs2_w1_val == -8193, rs1_w0_val == -131073, rs1_w1_val == 33554432
// opcode: kstas32 ; op1:x4; op2:x6; dest:x21; op1val:0x2000000fffdffff;  op2val:0xffffdffffffffffa
TEST_PKRR_OP(kstas32, x21, x4, x6, 0x0000000000000000, 0x2000000fffdffff, 0xffffdffffffffffa, x4, x10, 128, x20)

inst_24:
// rs1==x15, rs2==x27, rd==x19, rs2_w1_val == -4097, rs1_w1_val == 16, rs1_w0_val == 1073741824, rs2_w0_val == -33
// opcode: kstas32 ; op1:x15; op2:x27; dest:x19; op1val:0x00001040000000;  op2val:0xffffefffffffffdf
TEST_PKRR_OP(kstas32, x19, x15, x27, 0x0000000000000000, 0x00001040000000, 0xffffefffffffffdf, x15, x10, 144, x20)

inst_25:
// rs1==x31, rs2==x19, rd==x18, rs2_w1_val == -2049, 
// opcode: kstas32 ; op1:x31; op2:x19; dest:x18; op1val:0xfffffff900100000;  op2val:0xfffff7ffaaaaaaaa
TEST_PKRR_OP(kstas32, x18, x31, x19, 0x0000000000000000, 0xfffffff900100000, 0xfffff7ffaaaaaaaa, x31, x10, 160, x20)

inst_26:
// rs1==x19, rs2==x9, rd==x22, rs2_w1_val == -1025, rs1_w0_val == -513
// opcode: kstas32 ; op1:x19; op2:x9; dest:x22; op1val:0xfffffffcfffffdff;  op2val:0xfffffbff00800000
TEST_PKRR_OP(kstas32, x22, x19, x9, 0x0000000000000000, 0xfffffffcfffffdff, 0xfffffbff00800000, x19, x10, 176, x20)

inst_27:
// rs1==x17, rs2==x18, rd==x31, rs2_w1_val == -513, rs1_w1_val == 1431655765
// opcode: kstas32 ; op1:x17; op2:x18; dest:x31; op1val:0x5555555500000003;  op2val:0xfffffdfffffffff8
TEST_PKRR_OP(kstas32, x31, x17, x18, 0x0000000000000000, 0x5555555500000003, 0xfffffdfffffffff8, x17, x10, 192, x20)

inst_28:
// rs1==x11, rs2==x13, rd==x7, rs2_w1_val == -257, rs2_w0_val == -262145, rs1_w0_val == -33, rs1_w1_val == 8388608
// opcode: kstas32 ; op1:x11; op2:x13; dest:x7; op1val:0x800000ffffffdf;  op2val:0xfffffefffffbffff
TEST_PKRR_OP(kstas32, x7, x11, x13, 0x0000000000000000, 0x800000ffffffdf, 0xfffffefffffbffff, x11, x10, 208, x20)

inst_29:
// rs1==x2, rs2==x22, rd==x28, rs2_w1_val == -129, rs2_w0_val == 1431655765, rs1_w1_val == 262144, rs1_w0_val == -134217729
// opcode: kstas32 ; op1:x2; op2:x22; dest:x28; op1val:0x040000f7ffffff;  op2val:0xffffff7f55555555
TEST_PKRR_OP(kstas32, x28, x2, x22, 0x0000000000000000, 0x040000f7ffffff, 0xffffff7f55555555, x2, x10, 224, x20)

inst_30:
// rs1==x21, rs2==x28, rd==x24, rs2_w1_val == -65, rs2_w0_val == 32768, rs1_w0_val == 4096, rs1_w1_val == 0
// opcode: kstas32 ; op1:x21; op2:x28; dest:x24; op1val:0x00000000001000;  op2val:0xffffffbf00008000
TEST_PKRR_OP(kstas32, x24, x21, x28, 0x0000000000000000, 0x00000000001000, 0xffffffbf00008000, x21, x10, 240, x4)

inst_31:
// rs1==x3, rs2==x24, rd==x2, rs2_w1_val == -33, 
// opcode: kstas32 ; op1:x3; op2:x24; dest:x2; op1val:0x04000000040000;  op2val:0xffffffdffffffff9
TEST_PKRR_OP(kstas32, x2, x3, x24, 0x0000000000000000, 0x04000000040000, 0xffffffdffffffff9, x3, x10, 256, x4)

inst_32:
// rs2_w1_val == -17, rs1_w0_val == 4194304, rs2_w0_val == -2147483648, rs1_w1_val == -134217729
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00400000;  op2val:0xffffffef80000000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00400000, 0xffffffef80000000, x30, x10, 272, x4)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs2_w1_val == -9, rs1_w1_val == -1048577, rs2_w0_val == -17
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffeffffff;  op2val:0xfffffff7ffffffef
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xffeffffffeffffff, 0xfffffff7ffffffef, x30, x1, 0, x4)

inst_34:
// rs2_w1_val == -5, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000100000;  op2val:0xfffffffbffffffdf
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xc000000000100000, 0xfffffffbffffffdf, x30, x1, 16, x4)

inst_35:
// rs2_w1_val == -3, rs2_w0_val == 65536, rs1_w1_val == 16777216
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffffc;  op2val:0xfffffffd00010000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x1000000fffffffc, 0xfffffffd00010000, x30, x1, 32, x4)

inst_36:
// rs2_w1_val == -2, rs1_w1_val == -17, rs2_w0_val == 16777216
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000009;  op2val:0xfffffffe01000000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xffffffef00000009, 0xfffffffe01000000, x30, x1, 48, x4)

inst_37:
// rs2_w1_val == -2147483648, rs1_w0_val == 1, rs2_w0_val == 4194304, rs1_w1_val == 128
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000000001;  op2val:0x8000000000400000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x00008000000001, 0x8000000000400000, x30, x1, 64, x4)

inst_38:
// rs2_w1_val == 1073741824, rs1_w1_val == -33
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000800;  op2val:0x40000000f7ffffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000800, 0x40000000f7ffffff, x30, x1, 80, x4)

inst_39:
// rs2_w1_val == 536870912, rs2_w0_val == -513
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000400;  op2val:0x20000000fffffdff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x00000600000400, 0x20000000fffffdff, x30, x1, 96, x4)

inst_40:
// rs2_w1_val == 268435456, rs2_w0_val == 67108864, rs1_w0_val == -8193
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffffdfff;  op2val:0x1000000004000000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x008000ffffdfff, 0x1000000004000000, x30, x1, 112, x4)

inst_41:
// rs2_w1_val == 134217728, rs1_w0_val == 64, rs2_w0_val == -8388609
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000040;  op2val:0x8000000ff7fffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x00800000000040, 0x8000000ff7fffff, x30, x1, 128, x4)

inst_42:
// rs2_w1_val == 67108864, rs1_w0_val == -536870913, rs1_w1_val == -33554433
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffdfffffff;  op2val:0x4000000ffffffef
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfdffffffdfffffff, 0x4000000ffffffef, x30, x1, 144, x4)

inst_43:
// rs2_w1_val == 33554432, rs1_w0_val == 32, rs2_w0_val == 536870912
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600000020;  op2val:0x200000020000000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfffffff600000020, 0x200000020000000, x30, x1, 160, x4)

inst_44:
// rs2_w1_val == 16777216, rs1_w0_val == 33554432, rs2_w0_val == -16777217, rs1_w1_val == 2048
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080002000000;  op2val:0x1000000feffffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x00080002000000, 0x1000000feffffff, x30, x1, 176, x4)

inst_45:
// rs2_w1_val == 8388608, rs2_w0_val == -33554433, rs1_w1_val == 67108864, rs1_w0_val == 2097152
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000200000;  op2val:0x800000fdffffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x400000000200000, 0x800000fdffffff, x30, x1, 192, x4)

inst_46:
// rs1_w0_val == 16777216, rs2_w0_val == -16385
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000201000000;  op2val:0x800000ffffbfff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x00000201000000, 0x800000ffffbfff, x30, x1, 208, x4)

inst_47:
// rs1_w0_val == 8388608, rs1_w1_val == -1
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00800000;  op2val:0xffffffefffdfffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xffffffff00800000, 0xffffffefffdfffff, x30, x1, 224, x4)

inst_48:
// rs1_w0_val == 65536, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000010000;  op2val:0xffffefff00400000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x00080000010000, 0xffffefff00400000, x30, x1, 240, x4)

inst_49:
// rs1_w0_val == 32768, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00008000;  op2val:0xfffffbff00000009
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00008000, 0xfffffbff00000009, x30, x1, 256, x4)

inst_50:
// rs1_w0_val == 16384, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00004000;  op2val:0xfffffbfffffffffb
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00004000, 0xfffffbfffffffffb, x30, x1, 272, x4)

inst_51:
// rs1_w0_val == 512, rs2_w0_val == 32
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000200;  op2val:0xfbffffff00000020
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x00200000000200, 0xfbffffff00000020, x30, x1, 288, x4)

inst_52:
// rs1_w0_val == 256, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000100;  op2val:0xfeffffff3fffffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x00000900000100, 0xfeffffff3fffffff, x30, x1, 304, x4)

inst_53:
// rs1_w0_val == 128, rs2_w0_val == 1024, rs1_w1_val == -513
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000080;  op2val:0xffffff7f00000400
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000080, 0xffffff7f00000400, x30, x1, 320, x4)

inst_54:
// rs1_w0_val == 4, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000004;  op2val:0xc0000000fffffff9
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000004, 0xc0000000fffffff9, x30, x1, 336, x4)

inst_55:
// rs1_w0_val == 2, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000002;  op2val:0x000020fdffffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x00000900000002, 0x000020fdffffff, x30, x1, 352, x4)

inst_56:
// rs2_w1_val == 4194304, rs1_w1_val == -2097153
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00800000;  op2val:0x400000fffffeff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00800000, 0x400000fffffeff, x30, x1, 368, x4)

inst_57:
// rs2_w1_val == 2097152, rs1_w0_val == -2, rs1_w1_val == 256
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100fffffffe;  op2val:0x200000ffffffbf
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x000100fffffffe, 0x200000ffffffbf, x30, x1, 384, x4)

inst_58:
// rs2_w1_val == 1048576, rs2_w0_val == -1048577, rs1_w0_val == -4097
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8ffffefff;  op2val:0x100000ffefffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfffffff8ffffefff, 0x100000ffefffff, x30, x1, 400, x4)

inst_59:
// rs2_w1_val == 524288, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700080000;  op2val:0x080000ffffefff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x00000700080000, 0x080000ffffefff, x30, x1, 416, x4)

inst_60:
// rs2_w1_val == 262144, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00004000;  op2val:0x040000fdffffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00004000, 0x040000fdffffff, x30, x1, 432, x4)

inst_61:
// rs2_w1_val == 131072, rs1_w0_val == -17
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100ffffffef;  op2val:0x02000080000000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x000100ffffffef, 0x02000080000000, x30, x1, 448, x4)

inst_62:
// rs2_w1_val == 65536, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000c0000000;  op2val:0x010000ffdfffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x040000c0000000, 0x010000ffdfffff, x30, x1, 464, x4)

inst_63:
// rs2_w1_val == 32768, rs1_w0_val == -262145
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fffbffff;  op2val:0x008000fffbffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x55555555fffbffff, 0x008000fffbffff, x30, x1, 480, x4)

inst_64:
// rs2_w1_val == 16384, rs2_w0_val == -524289
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffffffe;  op2val:0x004000fff7ffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x000020fffffffe, 0x004000fff7ffff, x30, x1, 496, x4)

inst_65:
// rs2_w1_val == 4096, rs1_w0_val == -33554433, rs2_w0_val == 128
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000fdffffff;  op2val:0x00100000000080
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x200000fdffffff, 0x00100000000080, x30, x1, 512, x4)

inst_66:
// rs2_w1_val == 2048, rs2_w0_val == -1073741825, rs1_w0_val == -9
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffffff7;  op2val:0x000800bfffffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x2000000fffffff7, 0x000800bfffffff, x30, x1, 528, x4)

inst_67:
// rs2_w1_val == 1024, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffff7ffffff;  op2val:0x000400ffdfffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xdffffffff7ffffff, 0x000400ffdfffff, x30, x1, 544, x4)

inst_68:
// rs2_w1_val == 512, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffdffff;  op2val:0x00020000000020
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x4000000fffdffff, 0x00020000000020, x30, x1, 560, x4)

inst_69:
// rs2_w1_val == 256, rs2_w0_val == 16384, rs1_w1_val == -32769
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000100;  op2val:0x00010000004000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000100, 0x00010000004000, x30, x1, 576, x4)

inst_70:
// rs2_w1_val == 128, rs1_w1_val == -8193, rs2_w0_val == 256
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffdfffffff;  op2val:0x00008000000100
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xffffdfffdfffffff, 0x00008000000100, x30, x1, 592, x4)

inst_71:
// rs2_w1_val == 64, rs1_w1_val == 536870912
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffff7fff;  op2val:0x00004000008000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x20000000ffff7fff, 0x00004000008000, x30, x1, 608, x4)

inst_72:
// rs2_w1_val == 16, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000ffffffff;  op2val:0x000010ffffffdf
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x200000ffffffff, 0x000010ffffffdf, x30, x1, 624, x4)

inst_73:
// rs2_w1_val == 8, rs2_w0_val == 8192
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00010000;  op2val:0x00000800002000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00010000, 0x00000800002000, x30, x1, 640, x4)

inst_74:
// rs2_w1_val == 4, rs1_w0_val == -2097153
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009ffdfffff;  op2val:0x00000400000020
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x000009ffdfffff, 0x00000400000020, x30, x1, 656, x4)

inst_75:
// rs2_w1_val == 2, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffffffff;  op2val:0x00000200100000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x000010ffffffff, 0x00000200100000, x30, x1, 672, x4)

inst_76:
// rs2_w1_val == 1, rs1_w1_val == -1073741825, rs2_w0_val == -536870913
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00800000;  op2val:0x000001dfffffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00800000, 0x000001dfffffff, x30, x1, 688, x4)

inst_77:
// rs2_w1_val == 0, rs2_w0_val == 4
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000008000;  op2val:0x00000000000004
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x00010000008000, 0x00000000000004, x30, x1, 704, x4)

inst_78:
// rs2_w1_val == -1, rs1_w1_val == 268435456, rs1_w0_val == -65537
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffeffff;  op2val:0xffffffff00000003
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x10000000fffeffff, 0xffffffff00000003, x30, x1, 720, x4)

inst_79:
// rs2_w0_val == 262144, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000200;  op2val:0x00010000040000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x100000000000200, 0x00010000040000, x30, x1, 736, x4)

inst_80:
// rs2_w0_val == 131072, rs1_w1_val == 2147483647
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffff7fffff;  op2val:0xfdffffff00020000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x7fffffffff7fffff, 0xfdffffff00020000, x30, x1, 752, x4)

inst_81:
// rs1_w0_val == 67108864, rs1_w1_val == -3
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd04000000;  op2val:0xbfffffffbfffffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffd04000000, 0xbfffffffbfffffff, x30, x1, 768, x4)

inst_82:
// rs2_w0_val == 2048, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000400;  op2val:0x3fffffff00000800
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xffffffff00000400, 0x3fffffff00000800, x30, x1, 784, x4)

inst_83:
// rs2_w0_val == 64, rs1_w1_val == 1073741824
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffffefff;  op2val:0x40000000000040
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x40000000ffffefff, 0x40000000000040, x30, x1, 800, x4)

inst_84:
// rs2_w0_val == 8, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000100;  op2val:0xfffffbff00000008
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000100, 0xfffffbff00000008, x30, x1, 816, x4)

inst_85:
// rs2_w0_val == 2, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000003fffffff;  op2val:0x00800000000002
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x10000003fffffff, 0x00800000000002, x30, x1, 832, x4)

inst_86:
// rs2_w0_val == 1, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000006;  op2val:0xffefffff00000001
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xffffffff00000006, 0xffefffff00000001, x30, x1, 848, x4)

inst_87:
// rs2_w0_val == 0, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffdffff;  op2val:0x00004000000000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfefffffffffdffff, 0x00004000000000, x30, x1, 864, x4)

inst_88:
// rs2_w0_val == -1, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffeffffff;  op2val:0xfdffffffffffffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffffeffffff, 0xfdffffffffffffff, x30, x1, 880, x4)

inst_89:
// rs1_w1_val == -8388609, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff80000000;  op2val:0x00200000000008
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xff7fffff80000000, 0x00200000000008, x30, x1, 896, x4)

inst_90:
// rs1_w1_val == -4194305, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffefffffff;  op2val:0xfffffffcf7ffffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xffbfffffefffffff, 0xfffffffcf7ffffff, x30, x1, 912, x4)

inst_91:
// rs1_w1_val == -262145, rs1_w0_val == -4194305, rs2_w0_val == -268435457
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffbfffff;  op2val:0xfdffffffefffffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfffbffffffbfffff, 0xfdffffffefffffff, x30, x1, 928, x4)

inst_92:
// rs1_w1_val == -131073, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000100;  op2val:0x00100000000020
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000100, 0x00100000000020, x30, x1, 944, x4)

inst_93:
// rs1_w1_val == -65537, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00020000;  op2val:0xffffffef20000000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00020000, 0xffffffef20000000, x30, x1, 960, x4)

inst_94:
// rs1_w1_val == -16385, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000001;  op2val:0x00800000000400
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000001, 0x00800000000400, x30, x1, 976, x4)

inst_95:
// rs1_w1_val == -2049, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff04000000;  op2val:0x55555555fffffeff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff04000000, 0x55555555fffffeff, x30, x1, 992, x4)

inst_96:
// rs1_w1_val == -65, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffff7fff;  op2val:0xffffbfffffffffef
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xffffffbfffff7fff, 0xffffbfffffffffef, x30, x1, 1008, x4)

inst_97:
// rs1_w1_val == -2, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffffff8;  op2val:0x0400003fffffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffefffffff8, 0x0400003fffffff, x30, x1, 1024, x4)

inst_98:
// rs1_w1_val == -2147483648, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000006;  op2val:0xfffffdfffffffffb
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x8000000000000006, 0xfffffdfffffffffb, x30, x1, 1040, x4)

inst_99:
// rs1_w1_val == 134217728, rs1_w0_val == -67108865
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fbffffff;  op2val:0xffffeffffffffffa
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x8000000fbffffff, 0xffffeffffffffffa, x30, x1, 1056, x4)

inst_100:
// rs1_w1_val == 524288, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000ffefffff;  op2val:0xfffbffff80000000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x080000ffefffff, 0xfffbffff80000000, x30, x1, 1072, x4)

inst_101:
// rs1_w1_val == 131072, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000004;  op2val:0x00010000000002
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x02000000000004, 0x00010000000002, x30, x1, 1088, x4)

inst_102:
// rs1_w1_val == 65536, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000001000000;  op2val:0x040000fffffff6
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x01000001000000, 0x040000fffffff6, x30, x1, 1104, x4)

inst_103:
// rs1_w1_val == 16384, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffffff9;  op2val:0x000008ffffefff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x004000fffffff9, 0x000008ffffefff, x30, x1, 1120, x4)

inst_104:
// rs1_w1_val == 4096, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000005;  op2val:0x00080020000000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x00100000000005, 0x00080020000000, x30, x1, 1136, x4)

inst_105:
// rs1_w1_val == 1024, rs2_w0_val == 2147483647
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffffffc;  op2val:0xc00000007fffffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x000400fffffffc, 0xc00000007fffffff, x30, x1, 1152, x4)

inst_106:
// rs1_w1_val == 512, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000006;  op2val:0x02000000004000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x00020000000006, 0x02000000004000, x30, x1, 1168, x4)

inst_107:
// rs1_w1_val == 64, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffbfffff;  op2val:0xffff7ffffffffffa
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x000040ffbfffff, 0xffff7ffffffffffa, x30, x1, 1184, x4)

inst_108:
// rs1_w1_val == 4, rs1_w0_val == 536870912
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000420000000;  op2val:0x08000000000400
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x00000420000000, 0x08000000000400, x30, x1, 1200, x4)

inst_109:
// rs1_w1_val == 1, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100040000;  op2val:0xfffbffffffffffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x00000100040000, 0xfffbffffffffffff, x30, x1, 1216, x4)

inst_110:
// rs2_w0_val == -67108865, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffbffffff;  op2val:0x000040fbffffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xf7fffffffbffffff, 0x000040fbffffff, x30, x1, 1232, x4)

inst_111:
// rs1_w0_val == 2147483647, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x0004007fffffff;  op2val:0x10000000ffffffbf
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x0004007fffffff, 0x10000000ffffffbf, x30, x1, 1248, x4)

inst_112:
// rs2_w0_val == -4194305, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003ffbfffff;  op2val:0xfffffdffffbfffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x000003ffbfffff, 0xfffffdffffbfffff, x30, x1, 1264, x4)

inst_113:
// rs1_w0_val == 268435456, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000010000000;  op2val:0x010000ffffff7f
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xc000000010000000, 0x010000ffffff7f, x30, x1, 1280, x4)

inst_114:
// rs2_w0_val == -131073, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000800000;  op2val:0x040000fffdffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x1000000000800000, 0x040000fffdffff, x30, x1, 1296, x4)

inst_115:
// rs2_w0_val == -65537, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000040;  op2val:0xfffbfffffffeffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000040, 0xfffbfffffffeffff, x30, x1, 1312, x4)

inst_116:
// rs2_w0_val == 33554432, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff20000000;  op2val:0x00000902000000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff20000000, 0x00000902000000, x30, x1, 1328, x4)

inst_117:
// rs2_w0_val == -2049, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffbffff;  op2val:0x8000000fffff7ff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x040000fffbffff, 0x8000000fffff7ff, x30, x1, 1344, x4)

inst_118:
// rs1_w0_val == -524289, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fff7ffff;  op2val:0x00000900000100
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x000020fff7ffff, 0x00000900000100, x30, x1, 1360, x4)

inst_119:
// rs1_w0_val == -16385, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffffbfff;  op2val:0x00200000000100
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x800000ffffbfff, 0x00200000000100, x30, x1, 1376, x4)

inst_120:
// rs1_w0_val == -2049, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffff7ff;  op2val:0x20000000f7ffffff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x040000fffff7ff, 0x20000000f7ffffff, x30, x1, 1392, x4)

inst_121:
// rs1_w0_val == -1025, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffffbff;  op2val:0x000003fffffbff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x040000fffffbff, 0x000003fffffbff, x30, x1, 1408, x4)

inst_122:
// rs2_w0_val == -3, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000040000;  op2val:0x7ffffffffffffffd
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x10000000040000, 0x7ffffffffffffffd, x30, x1, 1424, x4)

inst_123:
// rs2_w0_val == -2, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffffffe;  op2val:0x2000000fffffffe
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x000003fffffffe, 0x2000000fffffffe, x30, x1, 1440, x4)

inst_124:
// rs1_w0_val == -257, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffeff;  op2val:0xffff7fffffffffef
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x4000000fffffeff, 0xffff7fffffffffef, x30, x1, 1456, x4)

inst_125:
// rs1_w0_val == -129, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffffff7f;  op2val:0xdffffffffffffbff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xff7fffffffffff7f, 0xdffffffffffffbff, x30, x1, 1472, x4)

inst_126:
// rs2_w0_val == 268435456, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fffffdff;  op2val:0xfffffff610000000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfffffff6fffffdff, 0xfffffff610000000, x30, x1, 1488, x4)

inst_127:
// rs1_w0_val == -5, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffffffb;  op2val:0x4000000fffffffc
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x000003fffffffb, 0x4000000fffffffc, x30, x1, 1504, x4)

inst_128:
// rs1_w0_val == -3, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffffffd;  op2val:0xffff7ffffffffff6
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x8000000fffffffd, 0xffff7ffffffffff6, x30, x1, 1520, x4)

inst_129:
// rs2_w0_val == 2097152, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffff6;  op2val:0x40000000200000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x400000fffffff6, 0x40000000200000, x30, x1, 1536, x4)

inst_130:
// rs1_w0_val == 134217728, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff08000000;  op2val:0x010000fffffffb
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xefffffff08000000, 0x010000fffffffb, x30, x1, 1552, x4)

inst_131:
// rs2_w0_val == 524288, 
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffdfff;  op2val:0xffffffbf00080000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffdfff, 0xffffffbf00080000, x30, x1, 1568, x4)

inst_132:
// rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w1_val == 8192, rs1_w0_val == -8388609, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w1_val == -5, rs2_w0_val == 1073741824
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbff7fffff;  op2val:0x00200040000000
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfffffffbff7fffff, 0x00200040000000, x30, x1, 1584, x4)

inst_133:
// rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w1_val == -33554433, rs1_w1_val == -257, rs2_w0_val == -9
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000009;  op2val:0xfdfffffffffffff7
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000009, 0xfdfffffffffffff7, x30, x1, 1600, x4)

inst_134:
// rs2_w1_val == -1048577, rs1_w1_val == 8192, rs2_w0_val == -257, rs1_w0_val == 0
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000000;  op2val:0xffeffffffffffeff
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0x00200000000000, 0xffeffffffffffeff, x30, x1, 1616, x4)

inst_135:
// rs2_w1_val == -65537, rs2_w0_val == -5, rs1_w1_val == -4097, rs1_w0_val == 1048576
// opcode: kstas32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00100000;  op2val:0xfffefffffffffffb
TEST_PKRR_OP(kstas32, x31, x30, x29, 0x0000000000000000, 0xffffefff00100000, 0xfffefffffffffffb, x30, x1, 1632, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x18_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x18_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x10_0:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 206*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
