
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ursubw instruction of the RISC-V RV64PZicsr extension for the ursubw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ursubw)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x18,signature_x18_1)

inst_0:
// rs1 == rd != rs2, rs1==x12, rs2==x30, rd==x12, rs1_w0_val == 0, rs1_w1_val == 16777216, rs2_w0_val == 4294967167
// opcode: ursubw ; op1:x12; dest:x12; op1val:0x100000000000000;  immval:$imm_val
TEST_RR_OP(ursubw, x12, x12, x30, 0x0000000000000000, 0x100000000000000, 0x00000effffff7f, x18, 0, x10)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x1, rs2==x25, rd==x23, rs2_w1_val == 2863311530, rs1_w1_val == 8, rs1_w0_val == 8388608, rs2_w0_val == 4286578687
// opcode: ursubw ; op1:x1; dest:x23; op1val:0x00000800800000;  immval:$imm_val
TEST_RR_OP(ursubw, x23, x1, x25, 0x0000000000000000, 0x00000800800000, 0xaaaaaaaaff7fffff, x18, 8, x10)

inst_2:
// rs1 == rs2 != rd, rs1==x20, rs2==x20, rd==x24, rs2_w1_val == 1431655765, rs1_w0_val == 4293918719
// opcode: ursubw ; op1:x20; dest:x24; op1val:0x000003ffefffff;  immval:$imm_val
TEST_RR_OP(ursubw, x24, x20, x20, 0x0000000000000000, 0x000003ffefffff, 0x555555550000000b, x18, 16, x10)

inst_3:
// rs1 == rs2 == rd, rs1==x22, rs2==x22, rd==x22, rs2_w1_val == 2147483647, rs1_w1_val == 2147483647, rs2_w0_val == 4294934527
// opcode: ursubw ; op1:x22; dest:x22; op1val:0x7fffffff00000003;  immval:$imm_val
TEST_RR_OP(ursubw, x22, x22, x22, 0x0000000000000000, 0x7fffffff00000003, 0x7fffffffffff7fff, x18, 24, x10)

inst_4:
// rs2 == rd != rs1, rs1==x23, rs2==x1, rd==x1, rs2_w1_val == 3221225471, rs1_w1_val == 4294967039, rs2_w0_val == 4227858431, rs1_w0_val == 131072
// opcode: ursubw ; op1:x23; dest:x1; op1val:0xfffffeff00020000;  immval:$imm_val
TEST_RR_OP(ursubw, x1, x23, x1, 0x0000000000000000, 0xfffffeff00020000, 0xbffffffffbffffff, x18, 32, x10)

inst_5:
// rs1==x31, rs2==x6, rd==x14, rs2_w1_val == 3758096383, rs1_w1_val == 4294967291, rs2_w0_val == 4278190079
// opcode: ursubw ; op1:x31; dest:x14; op1val:0xfffffffb0000000c;  immval:$imm_val
TEST_RR_OP(ursubw, x14, x31, x6, 0x0000000000000000, 0xfffffffb0000000c, 0xdffffffffeffffff, x18, 40, x10)

inst_6:
// rs1==x5, rs2==x4, rd==x19, rs2_w1_val == 4026531839, rs2_w0_val == 4290772991, rs1_w1_val == 4294967293, rs1_w0_val == 4294967231
// opcode: ursubw ; op1:x5; dest:x19; op1val:0xfffffffdffffffbf;  immval:$imm_val
TEST_RR_OP(ursubw, x19, x5, x4, 0x0000000000000000, 0xfffffffdffffffbf, 0xefffffffffbfffff, x18, 48, x10)

inst_7:
// rs1==x26, rs2==x28, rd==x2, rs2_w1_val == 4160749567, rs2_w0_val == 3221225471, rs1_w0_val == 4294967294
// opcode: ursubw ; op1:x26; dest:x2; op1val:0xfffffffbfffffffe;  immval:$imm_val
TEST_RR_OP(ursubw, x2, x26, x28, 0x0000000000000000, 0xfffffffbfffffffe, 0xf7ffffffbfffffff, x18, 56, x10)

inst_8:
// rs1==x3, rs2==x14, rd==x28, rs2_w1_val == 4227858431, rs1_w1_val == 4294967295, rs1_w0_val == 4286578687
// opcode: ursubw ; op1:x3; dest:x28; op1val:0xffffffffff7fffff;  immval:$imm_val
TEST_RR_OP(ursubw, x28, x3, x14, 0x0000000000000000, 0xffffffffff7fffff, 0xfbffffff00000011, x18, 64, x10)

inst_9:
// rs1==x13, rs2==x7, rd==x16, rs2_w1_val == 4261412863, rs1_w1_val == 4294705151, rs1_w0_val == 2048, rs2_w0_val == 8
// opcode: ursubw ; op1:x13; dest:x16; op1val:0xfffbffff00000800;  immval:$imm_val
TEST_RR_OP(ursubw, x16, x13, x7, 0x0000000000000000, 0xfffbffff00000800, 0xfdffffff00000008, x18, 72, x10)

inst_10:
// rs1==x8, rs2==x9, rd==x11, rs2_w1_val == 4278190079, rs1_w1_val == 134217728, rs1_w0_val == 4294967287, rs2_w0_val == 32768
// opcode: ursubw ; op1:x8; dest:x11; op1val:0x8000000fffffff7;  immval:$imm_val
TEST_RR_OP(ursubw, x11, x8, x9, 0x0000000000000000, 0x8000000fffffff7, 0xfeffffff00008000, x18, 80, x10)

inst_11:
// rs1==x4, rs2==x13, rd==x3, rs2_w1_val == 4286578687, rs1_w1_val == 536870912
// opcode: ursubw ; op1:x4; dest:x3; op1val:0x2000000000000009;  immval:$imm_val
TEST_RR_OP(ursubw, x3, x4, x13, 0x0000000000000000, 0x2000000000000009, 0xff7fffff00000009, x18, 88, x10)

inst_12:
// rs1==x2, rs2==x15, rd==x9, rs2_w1_val == 4290772991, rs1_w0_val == 4026531839
// opcode: ursubw ; op1:x2; dest:x9; op1val:0x8000000efffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x9, x2, x15, 0x0000000000000000, 0x8000000efffffff, 0xffbfffffffff7fff, x18, 96, x10)

inst_13:
// rs1==x24, rs2==x11, rd==x29, rs2_w1_val == 4292870143, rs2_w0_val == 4096, rs1_w0_val == 4294967279
// opcode: ursubw ; op1:x24; dest:x29; op1val:0x8000000ffffffef;  immval:$imm_val
TEST_RR_OP(ursubw, x29, x24, x11, 0x0000000000000000, 0x8000000ffffffef, 0xffdfffff00001000, x18, 104, x10)

inst_14:
// rs1==x11, rs2==x31, rd==x13, rs2_w1_val == 4293918719, rs1_w1_val == 4294966783, rs1_w0_val == 262144
// opcode: ursubw ; op1:x11; dest:x13; op1val:0xfffffdff00040000;  immval:$imm_val
TEST_RR_OP(ursubw, x13, x11, x31, 0x0000000000000000, 0xfffffdff00040000, 0xffefffff00000008, x18, 112, x1)

inst_15:
// rs1==x0, rs2==x12, rd==x4, rs2_w1_val == 4294443007, rs1_w0_val == 4096, rs2_w0_val == 256
// opcode: ursubw ; op1:x0; dest:x4; op1val:0x00001300001000;  immval:$imm_val
TEST_RR_OP(ursubw, x4, x0, x12, 0x0000000000000000, 0x00001300001000, 0xfff7ffff00000100, x18, 120, x1)

inst_16:
// rs1==x17, rs2==x27, rd==x10, rs2_w1_val == 4294705151, rs2_w0_val == 4294959103
// opcode: ursubw ; op1:x17; dest:x10; op1val:0xfffffffd0000000a;  immval:$imm_val
TEST_RR_OP(ursubw, x10, x17, x27, 0x0000000000000000, 0xfffffffd0000000a, 0xfffbffffffffdfff, x18, 128, x1)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_17:
// rs1==x6, rs2==x24, rd==x30, rs2_w1_val == 4294836223, rs1_w1_val == 32
// opcode: ursubw ; op1:x6; dest:x30; op1val:0x00002000000009;  immval:$imm_val
TEST_RR_OP(ursubw, x30, x6, x24, 0x0000000000000000, 0x00002000000009, 0xfffdffff00000003, x4, 0, x1)

inst_18:
// rs1==x16, rs2==x2, rd==x7, rs2_w1_val == 4294901759, rs1_w0_val == 4294967291, rs2_w0_val == 4261412863
// opcode: ursubw ; op1:x16; dest:x7; op1val:0x000003fffffffb;  immval:$imm_val
TEST_RR_OP(ursubw, x7, x16, x2, 0x0000000000000000, 0x000003fffffffb, 0xfffefffffdffffff, x4, 8, x1)

inst_19:
// rs1==x15, rs2==x17, rd==x18, rs2_w1_val == 4294934527, rs1_w0_val == 4227858431, rs1_w1_val == 268435456
// opcode: ursubw ; op1:x15; dest:x18; op1val:0x10000000fbffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x18, x15, x17, 0x0000000000000000, 0x10000000fbffffff, 0xffff7fff0000000c, x4, 16, x1)

inst_20:
// rs1==x14, rs2==x3, rd==x20, rs2_w1_val == 4294950911, rs2_w0_val == 134217728, rs1_w1_val == 32768, rs1_w0_val == 524288
// opcode: ursubw ; op1:x14; dest:x20; op1val:0x00800000080000;  immval:$imm_val
TEST_RR_OP(ursubw, x20, x14, x3, 0x0000000000000000, 0x00800000080000, 0xffffbfff08000000, x4, 24, x1)

inst_21:
// rs1==x30, rs2==x19, rd==x0, rs2_w1_val == 4294959103, rs2_w0_val == 2147483648
// opcode: ursubw ; op1:x30; dest:x0; op1val:0x00001200040000;  immval:$imm_val
TEST_RR_OP(ursubw, x0, x30, x19, 0x0000000000000000, 0x00001200040000, 0xffffdfff80000000, x4, 32, x1)

inst_22:
// rs1==x28, rs2==x23, rd==x5, rs2_w1_val == 4294963199, rs2_w0_val == 1048576, rs1_w0_val == 16
// opcode: ursubw ; op1:x28; dest:x5; op1val:0x00000d00000010;  immval:$imm_val
TEST_RR_OP(ursubw, x5, x28, x23, 0x0000000000000000, 0x00000d00000010, 0xffffefff00100000, x4, 40, x1)

inst_23:
// rs1==x21, rs2==x0, rd==x15, rs2_w1_val == 4294965247, rs1_w0_val == 64, rs1_w1_val == 4261412863, rs2_w0_val == 268435456
// opcode: ursubw ; op1:x21; dest:x15; op1val:0xfdffffff00000040;  immval:$imm_val
TEST_RR_OP(ursubw, x15, x21, x0, 0x0000000000000000, 0xfdffffff00000040, 0xfffff7ff10000000, x4, 48, x1)

inst_24:
// rs1==x10, rs2==x5, rd==x8, rs2_w1_val == 4294966271, rs2_w0_val == 16, rs1_w0_val == 4294963199
// opcode: ursubw ; op1:x10; dest:x8; op1val:0x00000affffefff;  immval:$imm_val
TEST_RR_OP(ursubw, x8, x10, x5, 0x0000000000000000, 0x00000affffefff, 0xfffffbff00000010, x4, 56, x1)

inst_25:
// rs1==x7, rs2==x29, rd==x21, rs2_w1_val == 4294966783, rs1_w0_val == 3221225471
// opcode: ursubw ; op1:x7; dest:x21; op1val:0xfffffffbbfffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x21, x7, x29, 0x0000000000000000, 0xfffffffbbfffffff, 0xfffffdff0000000d, x4, 64, x1)

inst_26:
// rs1==x19, rs2==x10, rd==x31, rs2_w1_val == 4294967039, rs1_w1_val == 4294967167, rs1_w0_val == 32768
// opcode: ursubw ; op1:x19; dest:x31; op1val:0xffffff7f00008000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x19, x10, 0x0000000000000000, 0xffffff7f00008000, 0xfffffeff00000005, x4, 72, x1)

inst_27:
// rs1==x9, rs2==x26, rd==x6, rs2_w1_val == 4294967167, rs2_w0_val == 4294967263, rs1_w1_val == 4294950911
// opcode: ursubw ; op1:x9; dest:x6; op1val:0xffffbfff0000000a;  immval:$imm_val
TEST_RR_OP(ursubw, x6, x9, x26, 0x0000000000000000, 0xffffbfff0000000a, 0xffffff7fffffffdf, x4, 80, x1)

inst_28:
// rs1==x27, rs2==x21, rd==x25, rs2_w1_val == 4294967231, rs1_w1_val == 8388608, rs1_w0_val == 4294967293
// opcode: ursubw ; op1:x27; dest:x25; op1val:0x800000fffffffd;  immval:$imm_val
TEST_RR_OP(ursubw, x25, x27, x21, 0x0000000000000000, 0x800000fffffffd, 0xffffffbfbfffffff, x4, 88, x3)

inst_29:
// rs1==x29, rs2==x8, rd==x26, rs2_w1_val == 4294967263, 
// opcode: ursubw ; op1:x29; dest:x26; op1val:0x0000120000000f;  immval:$imm_val
TEST_RR_OP(ursubw, x26, x29, x8, 0x0000000000000000, 0x0000120000000f, 0xffffffdf80000000, x4, 96, x3)

inst_30:
// rs1==x25, rs2==x16, rd==x17, rs2_w1_val == 4294967279, rs1_w0_val == 3758096383
// opcode: ursubw ; op1:x25; dest:x17; op1val:0x000005dfffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x17, x25, x16, 0x0000000000000000, 0x000005dfffffff, 0xffffffef10000000, x4, 104, x3)

inst_31:
// rs1==x18, rs2_w1_val == 4294967287, rs2_w0_val == 16777216, rs1_w1_val == 4294965247
// opcode: ursubw ; op1:x18; dest:x9; op1val:0xfffff7ff0000000b;  immval:$imm_val
TEST_RR_OP(ursubw, x9, x18, x1, 0x0000000000000000, 0xfffff7ff0000000b, 0xfffffff701000000, x4, 112, x3)

inst_32:
// rs2==x18, rs2_w1_val == 4294967291, rs1_w1_val == 4286578687, rs2_w0_val == 4294836223
// opcode: ursubw ; op1:x14; dest:x2; op1val:0xff7fffff00000011;  immval:$imm_val
TEST_RR_OP(ursubw, x2, x14, x18, 0x0000000000000000, 0xff7fffff00000011, 0xfffffffbfffdffff, x4, 120, x3)

inst_33:
// rd==x27, rs2_w1_val == 4294967293, rs1_w1_val == 3221225471, rs2_w0_val == 67108864, rs1_w0_val == 4294967039
// opcode: ursubw ; op1:x25; dest:x27; op1val:0xbffffffffffffeff;  immval:$imm_val
TEST_RR_OP(ursubw, x27, x25, x12, 0x0000000000000000, 0xbffffffffffffeff, 0xfffffffd04000000, x4, 128, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_34:
// rs2_w1_val == 4294967294, rs1_w0_val == 16384
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfdffffff00004000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfdffffff00004000, 0xfffffffe00000100, x1, 0, x3)

inst_35:
// rs2_w1_val == 2147483648, rs1_w0_val == 2097152
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00000700200000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00000700200000, 0x8000000000000011, x1, 8, x3)

inst_36:
// rs2_w1_val == 1073741824, rs2_w0_val == 33554432
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xffffffff00000003;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xffffffff00000003, 0x4000000002000000, x1, 16, x3)

inst_37:
// rs2_w1_val == 536870912, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfffffffd0000000b;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfffffffd0000000b, 0x2000000000000007, x1, 24, x3)

inst_38:
// rs2_w1_val == 268435456, rs1_w0_val == 4294934527
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x000009ffff7fff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x000009ffff7fff, 0x100000000000000a, x1, 32, x3)

inst_39:
// rs2_w1_val == 134217728, rs1_w1_val == 4294836223
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfffdffffefffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfffdffffefffffff, 0x800000000008000, x1, 40, x3)

inst_40:
// rs2_w1_val == 67108864, rs1_w1_val == 4294959103
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xffffdfff00004000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xffffdfff00004000, 0x4000000fffdffff, x1, 48, x3)

inst_41:
// rs2_w1_val == 33554432, rs1_w0_val == 33554432, rs1_w1_val == 3758096383
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xdfffffff02000000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xdfffffff02000000, 0x200000000000012, x1, 56, x3)

inst_42:
// rs2_w1_val == 16777216, rs1_w1_val == 131072, rs2_w0_val == 4294963199, rs1_w0_val == 134217728
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x02000008000000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x02000008000000, 0x1000000ffffefff, x1, 64, x3)

inst_43:
// rs2_w1_val == 8388608, rs2_w0_val == 65536
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xdfffffffffffffbf;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffffbf, 0x80000000010000, x1, 72, x3)

inst_44:
// rs2_w1_val == 4194304, rs2_w0_val == 4293918719, rs1_w1_val == 2097152
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x200000fbffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x200000fbffffff, 0x400000ffefffff, x1, 80, x3)

inst_45:
// rs2_w1_val == 2097152, rs1_w1_val == 1073741824
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x40000000ffffefff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x40000000ffffefff, 0x200000ffffffdf, x1, 88, x3)

inst_46:
// rs2_w1_val == 1048576, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00001100000006;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00001100000006, 0x1000000000000b, x1, 96, x3)

inst_47:
// rs2_w1_val == 524288, rs2_w0_val == 4026531839, rs1_w1_val == 4160749567
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xf7ffffffdfffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xf7ffffffdfffffff, 0x080000efffffff, x1, 104, x3)

inst_48:
// rs2_w1_val == 262144, rs2_w0_val == 4294950911, rs1_w1_val == 2863311530
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xaaaaaaaaffffffbf;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffffffbf, 0x040000ffffbfff, x1, 112, x3)

inst_49:
// rs2_w1_val == 131072, rs1_w1_val == 4293918719
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xffefffff00000800;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xffefffff00000800, 0x0200000000000c, x1, 120, x3)

inst_50:
// rs2_w1_val == 65536, rs2_w0_val == 4294967279, rs1_w1_val == 4026531839
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xeffffffffffffffd;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xeffffffffffffffd, 0x010000ffffffef, x1, 128, x3)

inst_51:
// rs2_w1_val == 32768, rs2_w0_val == 536870912, rs1_w0_val == 4261412863, rs1_w1_val == 1048576
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x100000fdffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x100000fdffffff, 0x00800020000000, x1, 136, x3)

inst_52:
// rs2_w1_val == 16384, rs2_w0_val == 8192
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xff7fffff02000000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xff7fffff02000000, 0x00400000002000, x1, 144, x3)

inst_53:
// rs2_w1_val == 8192, rs1_w0_val == 4294965247, rs2_w0_val == 4294966783, rs1_w1_val == 524288
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x080000fffff7ff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x080000fffff7ff, 0x002000fffffdff, x1, 152, x3)

inst_54:
// rs1_w0_val == 8192, rs2_w0_val == 2097152
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00001300002000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00001300002000, 0xf7ffffff00200000, x1, 160, x3)

inst_55:
// rs1_w0_val == 1024, rs2_w0_val == 4294443007
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00000a00000400;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00000a00000400, 0xfffffdfffff7ffff, x1, 168, x3)

inst_56:
// rs1_w0_val == 512, rs2_w1_val == 32
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfffffffd00000200;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000200, 0x00002000002000, x1, 176, x3)

inst_57:
// rs1_w0_val == 256, rs2_w0_val == 4292870143
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x10000000000100;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x10000000000100, 0xfffffff7ffdfffff, x1, 184, x3)

inst_58:
// rs1_w0_val == 128, rs1_w1_val == 8192
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00200000000080;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00200000000080, 0x7fffffff00002000, x1, 192, x3)

inst_59:
// rs1_w0_val == 32, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x100000000000020;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x100000000000020, 0xff7fffff00008000, x1, 200, x3)

inst_60:
// rs1_w0_val == 8, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00000700000008;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00000700000008, 0xefffffffffff7fff, x1, 208, x3)

inst_61:
// rs1_w0_val == 4, rs1_w1_val == 0
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00000000000004;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00000000000004, 0x004000ff7fffff, x1, 216, x3)

inst_62:
// rs1_w0_val == 2, rs2_w0_val == 4194304, rs1_w1_val == 128
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00008000000002;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00008000000002, 0x01000000400000, x1, 224, x3)

inst_63:
// rs1_w0_val == 1, rs1_w1_val == 1024
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00040000000001;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00040000000001, 0x1000000000000012, x1, 232, x3)

inst_64:
// rs1_w0_val == 4294967295, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x10000000ffffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x10000000ffffffff, 0xffffffef0000000e, x1, 240, x3)

inst_65:
// rs2_w1_val == 4096, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x2000000000000006;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x2000000000000006, 0x00100008000000, x1, 248, x3)

inst_66:
// rs2_w1_val == 2048, rs1_w1_val == 4290772991
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xffbfffffffefffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xffbfffffffefffff, 0x000800efffffff, x1, 256, x3)

inst_67:
// rs2_w1_val == 1024, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00001100001000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00001100001000, 0x00040000008000, x1, 264, x3)

inst_68:
// rs2_w1_val == 512, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfffdfffffbffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfffdfffffbffffff, 0x00020000001000, x1, 272, x3)

inst_69:
// rs2_w1_val == 256, rs1_w1_val == 4294967231, rs2_w0_val == 4294705151
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xffffffbfffffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xffffffbfffffffff, 0x000100fffbffff, x1, 280, x3)

inst_70:
// rs2_w1_val == 128, rs2_w0_val == 3758096383
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00001100000006;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00001100000006, 0x000080dfffffff, x1, 288, x3)

inst_71:
// rs2_w1_val == 64, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x0000090000000c;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x0000090000000c, 0x0000400000000c, x1, 296, x3)

inst_72:
// rs2_w1_val == 16, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x7ffffffffffffffb;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffffffb, 0x00001000010000, x1, 304, x3)

inst_73:
// rs2_w1_val == 8, rs1_w1_val == 33554432
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x200000000800000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x200000000800000, 0x00000800000007, x1, 312, x3)

inst_74:
// rs2_w1_val == 4, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x80000000000040;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x80000000000040, 0x000004fff7ffff, x1, 320, x3)

inst_75:
// rs2_w1_val == 2, rs2_w0_val == 1, rs1_w0_val == 65536
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00000d00010000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00000d00010000, 0x00000200000001, x1, 328, x3)

inst_76:
// rs2_w1_val == 1, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x1000000000000200;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x1000000000000200, 0x00000100400000, x1, 336, x3)

inst_77:
// rs2_w1_val == 4294967295, rs2_w0_val == 4294966271
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xefffffffefffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xefffffffefffffff, 0xfffffffffffffbff, x1, 344, x3)

inst_78:
// rs2_w1_val == 0, rs2_w0_val == 1073741824
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x200000ffffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x200000ffffffff, 0x00000040000000, x1, 352, x3)

inst_79:
// rs2_w0_val == 2863311530, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x08000000000080;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x08000000000080, 0x000008aaaaaaaa, x1, 360, x3)

inst_80:
// rs2_w0_val == 1431655765, rs1_w0_val == 4294966783
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfffdfffffffffdff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfffdfffffffffdff, 0xfff7ffff55555555, x1, 368, x3)

inst_81:
// rs2_w0_val == 2147483647, rs1_w1_val == 4096
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00100000000005;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00100000000005, 0xffbfffff7fffffff, x1, 376, x3)

inst_82:
// rs2_w0_val == 4160749567, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xdfffffff0000000e;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xdfffffff0000000e, 0x000004f7ffffff, x1, 384, x3)

inst_83:
// rs2_w0_val == 4294901759, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x7fffffff00000020;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000020, 0xffeffffffffeffff, x1, 392, x3)

inst_84:
// rs2_w0_val == 4294965247, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x4000000000008000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x4000000000008000, 0x20000000fffff7ff, x1, 400, x3)

inst_85:
// rs2_w0_val == 4294967039, rs1_w1_val == 4227858431
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfbffffff00000080;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000080, 0x000006fffffeff, x1, 408, x3)

inst_86:
// rs2_w0_val == 4294967231, rs1_w1_val == 67108864
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x4000000ffefffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x4000000ffefffff, 0x10000000ffffffbf, x1, 416, x3)

inst_87:
// rs2_w0_val == 4294967287, rs1_w1_val == 4294963199
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xffffefff00000011;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xffffefff00000011, 0x000800fffffff7, x1, 424, x3)

inst_88:
// rs2_w0_val == 4294967291, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfffbffff0000000e;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfffbffff0000000e, 0x000002fffffffb, x1, 432, x3)

inst_89:
// rs2_w0_val == 4294967293, rs1_w1_val == 4278190079, rs1_w0_val == 4294967167
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfeffffffffffff7f;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfeffffffffffff7f, 0xff7ffffffffffffd, x1, 440, x3)

inst_90:
// rs2_w0_val == 4294967294, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00040000040000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00040000040000, 0x000800fffffffe, x1, 448, x3)

inst_91:
// rs2_w0_val == 64, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x800000ffffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x800000ffffffff, 0x10000000000040, x1, 456, x3)

inst_92:
// rs2_w0_val == 32, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00000c00000010;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00000c00000010, 0xfff7ffff00000020, x1, 464, x3)

inst_93:
// rs2_w0_val == 4, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x100000ffffffbf;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x100000ffffffbf, 0xffffbfff00000004, x1, 472, x3)

inst_94:
// rs2_w0_val == 2, rs1_w1_val == 64
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00004000010000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00004000010000, 0xfffffdff00000002, x1, 480, x3)

inst_95:
// rs2_w0_val == 4294967295, rs1_w0_val == 1431655765, rs1_w1_val == 2048
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00080055555555;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00080055555555, 0xfffbffffffffffff, x1, 488, x3)

inst_96:
// rs2_w0_val == 0, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfffffdff00000006;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000006, 0xffbfffff00000000, x1, 496, x3)

inst_97:
// rs1_w1_val == 1431655765, rs2_w0_val == 262144
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x5555555500000002;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x5555555500000002, 0xfffffff700040000, x1, 504, x3)

inst_98:
// rs1_w1_val == 4292870143, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xffdfffff0000000d;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xffdfffff0000000d, 0x00001000000040, x1, 512, x3)

inst_99:
// rs1_w1_val == 4294443007, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfff7ffffefffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfff7ffffefffffff, 0x55555555ffffdfff, x1, 520, x3)

inst_100:
// rs1_w1_val == 4294901759, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfffeffff0000000e;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfffeffff0000000e, 0x4000000080000000, x1, 528, x3)

inst_101:
// rs1_w1_val == 4294934527, rs1_w0_val == 268435456
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xffff7fff10000000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xffff7fff10000000, 0x00020000000004, x1, 536, x3)

inst_102:
// rs1_w1_val == 4294966271, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfffffbff0000000d;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfffffbff0000000d, 0x08000000000020, x1, 544, x3)

inst_103:
// rs1_w1_val == 4294967263, rs1_w0_val == 4294901759
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xffffffdffffeffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xffffffdffffeffff, 0x000800ffffffdf, x1, 552, x3)

inst_104:
// rs1_w1_val == 4294967279, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xffffffef00004000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xffffffef00004000, 0x80000000fffbffff, x1, 560, x3)

inst_105:
// rs1_w1_val == 4294967287, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfffffff700002000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfffffff700002000, 0x800000001000000, x1, 568, x3)

inst_106:
// rs1_w1_val == 4294967294, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfffffffefffffffd;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfffffffefffffffd, 0xffffbfff0000000c, x1, 576, x3)

inst_107:
// rs1_w1_val == 2147483648, rs2_w0_val == 131072
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x8000000000040000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x8000000000040000, 0xffdfffff00020000, x1, 584, x3)

inst_108:
// rs1_w1_val == 4194304, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x40000000200000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x40000000200000, 0x40000000000012, x1, 592, x3)

inst_109:
// rs1_w1_val == 262144, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x04000010000000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x04000010000000, 0x00000a20000000, x1, 600, x3)

inst_110:
// rs1_w1_val == 65536, rs2_w0_val == 524288, rs1_w0_val == 4294836223
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x010000fffdffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x010000fffdffff, 0x00001200080000, x1, 608, x3)

inst_111:
// rs1_w1_val == 16384, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00400000000080;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00400000000080, 0x20000000ffdfffff, x1, 616, x3)

inst_112:
// rs1_w1_val == 512, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x000200ffffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x000200ffffffff, 0x5555555500100000, x1, 624, x3)

inst_113:
// rs1_w1_val == 256, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x000100dfffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x000100dfffffff, 0xfffffffb00000009, x1, 632, x3)

inst_114:
// rs1_w1_val == 16, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00001000000009;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00001000000009, 0xffffffbfffffffdf, x1, 640, x3)

inst_115:
// rs1_w1_val == 4, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00000400000004;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00000400000004, 0x000012fbffffff, x1, 648, x3)

inst_116:
// rs1_w1_val == 2, rs2_w0_val == 128
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x0000020000000d;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x0000020000000d, 0xfffdffff00000080, x1, 656, x3)

inst_117:
// rs1_w1_val == 1, rs1_w0_val == 1073741824
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00000140000000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00000140000000, 0xefffffff00000020, x1, 664, x3)

inst_118:
// rs1_w0_val == 2863311530, rs2_w0_val == 2048
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00000daaaaaaaa;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00000daaaaaaaa, 0x400000000000800, x1, 672, x3)

inst_119:
// rs1_w0_val == 2147483647, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xf7ffffff7fffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xf7ffffff7fffffff, 0xffff7fffffffdfff, x1, 680, x3)

inst_120:
// rs1_w0_val == 4160749567, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x000008f7ffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x000008f7ffffff, 0xfffffff7fffdffff, x1, 688, x3)

inst_121:
// rs1_w0_val == 4278190079, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfffffbfffeffffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfffffbfffeffffff, 0xff7ffffffdffffff, x1, 696, x3)

inst_122:
// rs1_w0_val == 4290772991, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x020000ffbfffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x020000ffbfffff, 0x00000c00000005, x1, 704, x3)

inst_123:
// rs1_w0_val == 4292870143, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x000100ffdfffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x000100ffdfffff, 0x100000dfffffff, x1, 712, x3)

inst_124:
// rs1_w0_val == 4294443007, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x004000fff7ffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x004000fff7ffff, 0x7fffffffffff7fff, x1, 720, x3)

inst_125:
// rs1_w0_val == 4294950911, rs2_w0_val == 16384
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x200000ffffbfff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x200000ffffbfff, 0xfff7ffff00004000, x1, 728, x3)

inst_126:
// rs1_w0_val == 4294959103, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x008000ffffdfff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x008000ffffdfff, 0xfffdfffffffffdff, x1, 736, x3)

inst_127:
// rs1_w0_val == 4294966271, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x000008fffffbff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x000008fffffbff, 0xffffdfffffefffff, x1, 744, x3)

inst_128:
// rs1_w0_val == 4294967263, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x2000000ffffffdf;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x2000000ffffffdf, 0xffbfffff00000800, x1, 752, x3)

inst_129:
// rs2_w0_val == 8388608, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00000600004000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00000600004000, 0x00040000800000, x1, 760, x3)

inst_130:
// rs1_w0_val == 2147483648, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x00002080000000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x00002080000000, 0xfffbffff40000000, x1, 768, x3)

inst_131:
// rs2_w0_val == 1024, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x8000000000004000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x8000000000004000, 0xfeffffff00000400, x1, 776, x3)

inst_132:
// rs1_w0_val == 536870912, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xaaaaaaaa20000000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa20000000, 0x00400000001000, x1, 784, x3)

inst_133:
// rs1_w0_val == 67108864, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfffffff704000000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfffffff704000000, 0xbffffffffffffffb, x1, 792, x3)

inst_134:
// rs1_w0_val == 16777216, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x4000000001000000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x4000000001000000, 0x00000500000020, x1, 800, x3)

inst_135:
// rs1_w0_val == 4194304, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfeffffff00400000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfeffffff00400000, 0xfffeffffffffdfff, x1, 808, x3)

inst_136:
// rs1_w0_val == 1048576, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfffffffb00100000;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfffffffb00100000, 0x040000fffeffff, x1, 816, x3)

inst_137:
// rs1_w0_val == 4294705151, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfffffff7fffbffff;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffbffff, 0x008000dfffffff, x1, 824, x3)

inst_138:
// rs2_w0_val == 512, 
// opcode: ursubw ; op1:x30; dest:x31; op1val:0x0000090000000c;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0x0000090000000c, 0xffffffbf00000200, x1, 832, x3)

inst_139:
// rs2_w1_val == 4294965247, rs1_w0_val == 64, rs1_w1_val == 4261412863, rs2_w0_val == 268435456
// opcode: ursubw ; op1:x30; dest:x31; op1val:0xfdffffff00000040;  immval:$imm_val
TEST_RR_OP(ursubw, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000040, 0xfffff7ff10000000, x1, 840, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x18_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x18_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 106*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
