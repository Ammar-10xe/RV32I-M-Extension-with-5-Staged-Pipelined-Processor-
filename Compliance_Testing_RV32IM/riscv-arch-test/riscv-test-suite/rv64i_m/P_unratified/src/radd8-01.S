
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the radd8 instruction of the RISC-V RV64PZicsr extension for the radd8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",radd8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:// rs1 == rd != rs2, rs1==x15, rs2==x31, rd==x15, rs1_b0_val == -128, rs1_b7_val != rs2_b7_val, rs2_b3_val == -33, rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b6_val != rs2_b6_val, rs1_b6_val < 0 and rs2_b6_val < 0, rs1_b5_val == rs2_b5_val, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b4_val != rs2_b4_val, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b3_val != rs2_b3_val, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b2_val != rs2_b2_val, rs1_b1_val != rs2_b1_val, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b3_val == 8, rs2_b7_val == 127, rs2_b1_val == 16, rs1_b2_val == 0, rs2_b6_val == -33, rs1_b1_val == 2, rs1_b7_val == 1, rs1_b6_val == -86, rs2_b4_val == -5
// opcode: radd8 ; op1:x15; op2:x31; dest:x15; op1val:0x1aafaf608000280;  op2val:0x7fdffafbdfc010fc
TEST_RR_OP(radd8, x15, x15, x31, 0x0000000000000000, 0x1aafaf608000280, 0x7fdffafbdfc010fc, x11, 0, x17)

inst_1:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x6, rs2==x18, rd==x4, rs1_b7_val == rs2_b7_val, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b5_val == 64, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b5_val == 64, rs2_b0_val == 32, rs1_b2_val == 1, rs1_b6_val > 0 and rs2_b6_val < 0, rs2_b3_val == 16, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b3_val > 0 and rs2_b3_val > 0
// opcode: radd8 ; op1:x6; op2:x18; dest:x4; op1val:0xf80940093f01fc05;  op2val:0xf8df4005103f0520
TEST_RR_OP(radd8, x4, x6, x18, 0x0000000000000000, 0xf80940093f01fc05, 0xf8df4005103f0520, x11, 8, x17)

inst_2:// rs1 == rs2 != rd, rs1==x0, rs2==x0, rd==x3, rs1_b7_val < 0 and rs2_b7_val > 0, rs2_b0_val == -65, rs1_b2_val < 0 and rs2_b2_val < 0, rs2_b3_val == -9, rs1_b5_val != rs2_b5_val, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b4_val < 0 and rs2_b4_val > 0, rs2_b2_val == -86, rs1_b2_val == -17, rs1_b1_val == 0
// opcode: radd8 ; op1:x0; op2:x0; dest:x3; op1val:0xf6f93ff603ef0003;  op2val:0x3fa0709f7aafabf
TEST_RR_OP(radd8, x3, x0, x0, 0x0000000000000000, 0xf6f93ff603ef0003, 0x3fa0709f7aafabf, x11, 16, x17)

inst_3:// rs1 == rs2 == rd, rs1==x29, rs2==x29, rd==x29, rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b7_val == 4, rs2_b5_val == 8, rs1_b0_val == 32, rs2_b6_val == -9, rs2_b1_val == 127, rs1_b5_val == -1, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b4_val == -5, rs1_b2_val == -65, rs2_b7_val == -3, rs2_b2_val == -128
// opcode: radd8 ; op1:x29; op2:x29; dest:x29; op1val:0x409fffb08bff920;  op2val:0xfdf7080706807f06
TEST_RR_OP(radd8, x29, x29, x29, 0x0000000000000000, 0x409fffb08bff920, 0xfdf7080706807f06, x11, 24, x17)

inst_4:// rs2 == rd != rs1, rs1==x12, rs2==x9, rd==x9, rs1_b6_val == rs2_b6_val, rs1_b2_val == rs2_b2_val, rs2_b5_val == -2, rs2_b0_val == -2, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b4_val == rs2_b4_val, rs2_b6_val == 2, rs2_b7_val == -17, rs1_b6_val == 2, rs1_b3_val == -1, rs1_b4_val == 2, rs1_b3_val < 0 and rs2_b3_val < 0, rs2_b4_val == 2
// opcode: radd8 ; op1:x12; op2:x9; dest:x9; op1val:0xf602c002fffa0503;  op2val:0xef02fe02c0fa09fe
TEST_RR_OP(radd8, x9, x12, x9, 0x0000000000000000, 0xf602c002fffa0503, 0xef02fe02c0fa09fe, x11, 32, x17)

inst_5:// rs1==x5, rs2==x3, rd==x6, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b2_val == 64, rs1_b2_val > 0 and rs2_b2_val < 0, rs1_b7_val == 0, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b0_val == 4, rs2_b6_val == 1, rs2_b7_val == -9, rs2_b5_val == -65, rs2_b2_val == -3
// opcode: radd8 ; op1:x5; op2:x3; dest:x6; op1val:0xaaf80505400204;  op2val:0xf701bf09fcfdfc3f
TEST_RR_OP(radd8, x6, x5, x3, 0x0000000000000000, 0xaaf80505400204, 0xf701bf09fcfdfc3f, x11, 40, x17)

inst_6:// rs1==x14, rs2==x21, rd==x30, rs1_b5_val > 0 and rs2_b5_val < 0, rs1_b3_val == -65, rs2_b6_val == 127, rs1_b0_val == rs2_b0_val, rs1_b6_val == -3, rs2_b7_val == 85, rs2_b1_val == 8, rs1_b5_val == 85, rs1_b3_val < 0 and rs2_b3_val > 0
// opcode: radd8 ; op1:x14; op2:x21; dest:x30; op1val:0xfd5502bf070707;  op2val:0x557ffe073ff90807
TEST_RR_OP(radd8, x30, x14, x21, 0x0000000000000000, 0xfd5502bf070707, 0x557ffe073ff90807, x11, 48, x17)

inst_7:// rs1==x26, rs2==x8, rd==x0, rs1_b4_val > 0 and rs2_b4_val < 0, rs1_b0_val == -65, rs1_b5_val == 32, rs1_b3_val == -17, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b6_val == 16, rs2_b5_val == -17
// opcode: radd8 ; op1:x26; op2:x8; dest:x0; op1val:0x3102009efbffcbf;  op2val:0xf8f7effa10fcf9f9
TEST_RR_OP(radd8, x0, x26, x8, 0x0000000000000000, 0x3102009efbffcbf, 0xf8f7effa10fcf9f9, x11, 56, x17)

inst_8:// rs1==x16, rs2==x26, rd==x1, rs1_b3_val == rs2_b3_val, rs2_b2_val == 64, rs2_b7_val == 0, rs1_b5_val == 0, rs1_b6_val == 64, rs2_b3_val == 2, rs1_b3_val == 2, rs1_b1_val == 1, rs2_b4_val == 8
// opcode: radd8 ; op1:x16; op2:x26; dest:x1; op1val:0x40000902050103;  op2val:0x05400802400705
TEST_RR_OP(radd8, x1, x16, x26, 0x0000000000000000, 0x40000902050103, 0x05400802400705, x11, 64, x17)

inst_9:// rs1==x9, rs2==x24, rd==x7, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b5_val == -128, rs2_b3_val == 127, rs1_b0_val == -9, rs2_b0_val == -128, rs2_b6_val == -65, rs1_b3_val == 16, rs2_b4_val == -17, rs1_b4_val == 32, rs1_b2_val == -5, rs1_b7_val == 32
// opcode: radd8 ; op1:x9; op2:x24; dest:x7; op1val:0x2040f92010fb00f7;  op2val:0xfdbf80ef7f400380
TEST_RR_OP(radd8, x7, x9, x24, 0x0000000000000000, 0x2040f92010fb00f7, 0xfdbf80ef7f400380, x11, 72, x17)

inst_10:// rs1==x3, rs2==x10, rd==x25, rs1_b1_val == rs2_b1_val, rs1_b5_val == -128, rs2_b6_val == 85, rs2_b2_val == 0, rs2_b1_val == 85, rs2_b3_val == -128, rs1_b1_val == 85, rs1_b6_val == 32, rs2_b4_val == 32, rs2_b0_val == -86, rs1_b7_val == 16, rs1_b2_val == -128
// opcode: radd8 ; op1:x3; op2:x10; dest:x25; op1val:0x102080fcef8055f8;  op2val:0xef550320800055aa
TEST_RR_OP(radd8, x25, x3, x10, 0x0000000000000000, 0x102080fcef8055f8, 0xef550320800055aa, x11, 80, x17)

inst_11:// rs1==x27, rs2==x25, rd==x31, rs1_b0_val < 0 and rs2_b0_val > 0, rs2_b7_val == 2, rs2_b3_val == -65, rs1_b0_val == -5, rs2_b0_val == 16, rs2_b6_val == -3, rs1_b6_val == -2, rs1_b4_val == -17
// opcode: radd8 ; op1:x27; op2:x25; dest:x31; op1val:0xc0fe05ef0501c0fb;  op2val:0x2fd08fabffafc10
TEST_RR_OP(radd8, x31, x27, x25, 0x0000000000000000, 0xc0fe05ef0501c0fb, 0x2fd08fabffafc10, x11, 88, x17)

inst_12:// rs1==x22, rs2==x27, rd==x24, rs2_b7_val == -86, rs2_b2_val == 16, rs2_b5_val == 0, rs2_b1_val == -33, rs1_b1_val == -9, rs1_b7_val == 127, rs1_b3_val == 0, rs1_b4_val == -3, rs2_b4_val == 4
// opcode: radd8 ; op1:x22; op2:x27; dest:x24; op1val:0x7ff605fd00c0f720;  op2val:0xaa7f0004f710dfaa
TEST_RR_OP(radd8, x24, x22, x27, 0x0000000000000000, 0x7ff605fd00c0f720, 0xaa7f0004f710dfaa, x11, 96, x17)

inst_13:// rs1==x8, rs2==x13, rd==x27, rs2_b7_val == -65, rs2_b2_val == -65, rs1_b7_val == -3, rs1_b6_val == -1, rs1_b5_val == 4
// opcode: radd8 ; op1:x8; op2:x13; dest:x27; op1val:0xfdff04fa3ffafa05;  op2val:0xbff6bf07bfbf07f6
TEST_RR_OP(radd8, x27, x8, x13, 0x0000000000000000, 0xfdff04fa3ffafa05, 0xbff6bf07bfbf07f6, x11, 104, x17)

inst_14:// rs1==x19, rs2==x2, rd==x5, rs2_b7_val == -33, rs1_b6_val == 85, rs1_b5_val == 1, rs1_b4_val == -33, rs2_b1_val == 64, rs1_b7_val == -5, rs2_b0_val == 85
// opcode: radd8 ; op1:x19; op2:x2; dest:x5; op1val:0xfb5501dffa0105f6;  op2val:0xdffdc0023fbf4055
TEST_RR_OP(radd8, x5, x19, x2, 0x0000000000000000, 0xfb5501dffa0105f6, 0xdffdc0023fbf4055, x11, 112, x17)

inst_15:// rs1==x17, rs2==x12, rd==x20, rs2_b7_val == -5, rs1_b0_val == 16, rs2_b5_val == -1, rs2_b2_val == 127, rs2_b6_val == -1, rs2_b1_val == 2, rs1_b1_val == -1
// opcode: radd8 ; op1:x17; op2:x12; dest:x20; op1val:0xfa05fa07fa09ff10;  op2val:0xfbfffff9f97f0210
TEST_RR_OP(radd8, x20, x17, x12, 0x0000000000000000, 0xfa05fa07fa09ff10, 0xfbfffff9f97f0210, x11, 120, x6)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_16:// rs1==x31, rs2==x7, rd==x11, rs2_b7_val == -2, rs2_b1_val == 0, rs1_b0_val == 2, rs2_b0_val == -3, rs2_b4_val == 0
// opcode: radd8 ; op1:x31; op2:x7; dest:x11; op1val:0x9fc050306090502;  op2val:0xfef9fc00c0bf00fd
TEST_RR_OP(radd8, x11, x31, x7, 0x0000000000000000, 0x9fc050306090502, 0xfef9fc00c0bf00fd, x3, 0, x6)

inst_17:// rs1==x20, rs2==x17, rd==x12, rs2_b7_val == -128, rs1_b0_val == -3, rs1_b6_val == -17, rs1_b4_val == 85, rs2_b4_val == -65, rs1_b7_val == -9
// opcode: radd8 ; op1:x20; op2:x17; dest:x12; op1val:0xf7ef035502eff7fd;  op2val:0x800608bfbfc07fc0
TEST_RR_OP(radd8, x12, x20, x17, 0x0000000000000000, 0xf7ef035502eff7fd, 0x800608bfbfc07fc0, x3, 8, x6)

inst_18:// rs1==x10, rs2==x15, rd==x18, rs2_b7_val == 64, rs2_b4_val == -86, rs1_b1_val == -128, rs2_b6_val == 0, rs1_b4_val == -128, rs1_b5_val == -33
// opcode: radd8 ; op1:x10; op2:x15; dest:x18; op1val:0x405df80effb8003;  op2val:0x400040aafc07fac0
TEST_RR_OP(radd8, x18, x10, x15, 0x0000000000000000, 0x405df80effb8003, 0x400040aafc07fac0, x3, 16, x6)

inst_19:// rs1==x30, rs2==x11, rd==x21, rs2_b7_val == 32, rs2_b1_val == -9
// opcode: radd8 ; op1:x30; op2:x11; dest:x21; op1val:0x91004f9c0bf0305;  op2val:0x200205bf06aaf7f8
TEST_RR_OP(radd8, x21, x30, x11, 0x0000000000000000, 0x91004f9c0bf0305, 0x200205bf06aaf7f8, x3, 24, x6)

inst_20:// rs1==x21, rs2==x28, rd==x10, rs2_b7_val == 16, rs1_b5_val == -86, rs2_b2_val == -9, rs1_b0_val == 0
// opcode: radd8 ; op1:x21; op2:x28; dest:x10; op1val:0xf6c0aafcf8fcf800;  op2val:0x10550806faf7fc20
TEST_RR_OP(radd8, x10, x21, x28, 0x0000000000000000, 0xf6c0aafcf8fcf800, 0x10550806faf7fc20, x3, 32, x6)

inst_21:// rs1==x7, rs2==x19, rd==x28, rs2_b7_val == 8, rs1_b1_val == 4, rs2_b1_val == -17
// opcode: radd8 ; op1:x7; op2:x19; dest:x28; op1val:0xf9060406f60004fb;  op2val:0x805bf053fbfef05
TEST_RR_OP(radd8, x28, x7, x19, 0x0000000000000000, 0xf9060406f60004fb, 0x805bf053fbfef05, x3, 40, x6)

inst_22:// rs1==x23, rs2==x20, rd==x8, rs2_b7_val == 4, rs1_b3_val == -33, rs2_b3_val == -3, rs2_b0_val == 4, rs1_b7_val == 85, rs1_b1_val == 16, rs2_b4_val == 64, rs2_b5_val == -86, rs2_b2_val == -17, rs1_b2_val == -9
// opcode: radd8 ; op1:x23; op2:x20; dest:x8; op1val:0x55fefafddff710f9;  op2val:0x407aa40fdef5504
TEST_RR_OP(radd8, x8, x23, x20, 0x0000000000000000, 0x55fefafddff710f9, 0x407aa40fdef5504, x3, 48, x6)

inst_23:// rs1==x28, rs2==x4, rd==x19, rs2_b7_val == 1, rs1_b4_val == -1, rs1_b3_val == -86, rs2_b3_val == 32, rs1_b6_val == -128, rs2_b1_val == -128, rs2_b5_val == 127
// opcode: radd8 ; op1:x28; op2:x4; dest:x19; op1val:0x180ffffaaf90006;  op2val:0x1fc7f0420fd8003
TEST_RR_OP(radd8, x19, x28, x4, 0x0000000000000000, 0x180ffffaaf90006, 0x1fc7f0420fd8003, x3, 56, x6)

inst_24:// rs1==x25, rs2==x30, rd==x2, rs2_b7_val == -1, rs2_b1_val == 4, rs2_b0_val == 2
// opcode: radd8 ; op1:x25; op2:x30; dest:x2; op1val:0x10305df08f6fc03;  op2val:0xfffc06aaf8100402
TEST_RR_OP(radd8, x2, x25, x30, 0x0000000000000000, 0x10305df08f6fc03, 0xfffc06aaf8100402, x3, 64, x6)

inst_25:// rs1==x2, rs2==x23, rd==x17, rs2_b6_val == -86, rs1_b4_val == 4, rs1_b7_val == 64, rs1_b6_val == -5, rs2_b4_val == -128
// opcode: radd8 ; op1:x2; op2:x23; dest:x17; op1val:0x40fbf90406800000;  op2val:0xefaaf680f94055f6
TEST_RR_OP(radd8, x17, x2, x23, 0x0000000000000000, 0x40fbf90406800000, 0xefaaf680f94055f6, x3, 72, x6)

inst_26:// rs1==x4, rs2==x22, rd==x14, rs2_b6_val == -17, rs2_b2_val == -33, rs1_b4_val == -9, rs2_b3_val == 64, rs1_b2_val == 85
// opcode: radd8 ; op1:x4; op2:x22; dest:x14; op1val:0x13f09f7005507f6;  op2val:0x3ef03fa40dfef55
TEST_RR_OP(radd8, x14, x4, x22, 0x0000000000000000, 0x13f09f7005507f6, 0x3ef03fa40dfef55, x3, 80, x6)

inst_27:// rs1==x24, rs2==x5, rd==x23, rs2_b6_val == -5, rs1_b2_val == -33, rs2_b5_val == 85, rs2_b4_val == 1, rs1_b5_val == -9
// opcode: radd8 ; op1:x24; op2:x5; dest:x23; op1val:0x20faf70209df04bf;  op2val:0xaafb5501fcfc05aa
TEST_RR_OP(radd8, x23, x24, x5, 0x0000000000000000, 0x20faf70209df04bf, 0xaafb5501fcfc05aa, x3, 88, x6)

inst_28:// rs1==x18, rs2==x16, rd==x22, rs2_b6_val == -2, rs1_b3_val == -2, rs1_b2_val == -3
// opcode: radd8 ; op1:x18; op2:x16; dest:x22; op1val:0xf8c080fbfefdfffb;  op2val:0xc0fec003fcbf04c0
TEST_RR_OP(radd8, x22, x18, x16, 0x0000000000000000, 0xf8c080fbfefdfffb, 0xc0fec003fcbf04c0, x3, 96, x6)

inst_29:// rs1==x13, rs2==x1, rd==x26, rs2_b6_val == -128, 
// opcode: radd8 ; op1:x13; op2:x1; dest:x26; op1val:0xf8f6f60702090502;  op2val:0x80aaefc0f90410
TEST_RR_OP(radd8, x26, x13, x1, 0x0000000000000000, 0xf8f6f60702090502, 0x80aaefc0f90410, x3, 104, x6)

inst_30:// rs1==x1, rs2==x14, rd==x16, rs2_b6_val == 64, rs1_b0_val == 8, rs2_b0_val == 0, rs2_b3_val == 4, rs1_b3_val == 1, rs1_b6_val == 0
// opcode: radd8 ; op1:x1; op2:x14; dest:x16; op1val:0x7f0040fb01030208;  op2val:0x440000104060700
TEST_RR_OP(radd8, x16, x1, x14, 0x0000000000000000, 0x7f0040fb01030208, 0x440000104060700, x3, 112, x2)

inst_31:// rs1==x11, rs2==x6, rd==x13, rs2_b6_val == 32, rs2_b0_val == -17, rs2_b2_val == 8, rs1_b2_val == 2, rs1_b3_val == 32, rs1_b0_val == 85
// opcode: radd8 ; op1:x11; op2:x6; dest:x13; op1val:0x740800620020355;  op2val:0x1207ffc800808ef
TEST_RR_OP(radd8, x13, x11, x6, 0x0000000000000000, 0x740800620020355, 0x1207ffc800808ef, x3, 120, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:// rs1_b5_val == -5, rs1_b4_val == 16
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x700fb10aaf71010;  op2val:0xfb06077f80ef00
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x700fb10aaf71010, 0xfb06077f80ef00, x1, 0, x2)

inst_33:// rs1_b5_val == -3, rs1_b7_val == 2, rs1_b3_val == -128, rs2_b3_val == -1, rs1_b6_val == 4, rs1_b2_val == 127
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x204fdff807ff703;  op2val:0xfff60609ff050580
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x204fdff807ff703, 0xfff60609ff050580, x1, 8, x2)

inst_34:// rs1_b5_val == -2, rs2_b5_val == 32, rs2_b0_val == 8, rs1_b1_val == -5, rs2_b3_val == 1, rs1_b7_val == -17, rs1_b2_val == -2
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xefaafedffafefbc0;  op2val:0x20720fa01fdc008
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xefaafedffafefbc0, 0x20720fa01fdc008, x1, 16, x2)

inst_35:// rs1_b5_val == 16, rs2_b5_val == -5, rs1_b3_val == -3, rs2_b2_val == 32, rs2_b0_val == -33
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8f61055fd55fafc;  op2val:0xfdfdfb3ff72040df
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xf8f61055fd55fafc, 0xfdfdfb3ff72040df, x1, 24, x2)

inst_36:// rs1_b5_val == 8, rs2_b2_val == -1
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x060802f803f610;  op2val:0x9f8064002fff620
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x060802f803f610, 0x9f8064002fff620, x1, 32, x2)

inst_37:// rs1_b5_val == 2, rs2_b2_val == 4, rs2_b5_val == 16, rs2_b3_val == -2, rs1_b4_val == -86, rs2_b4_val == 85, rs2_b0_val == 1, rs1_b6_val == 1, rs2_b1_val == 1
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f0102aac005fcbf;  op2val:0x9fd1055fe040101
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x7f0102aac005fcbf, 0x9fd1055fe040101, x1, 40, x2)

inst_38:// rs1_b4_val == 127, rs1_b0_val == -33, rs2_b1_val == -1, rs1_b7_val == -65, rs1_b2_val == 4
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffc7f090405df;  op2val:0xef3ffcf640fcfff8
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xbffffc7f090405df, 0xef3ffcf640fcfff8, x1, 48, x2)

inst_39:// rs1_b4_val == -65, rs2_b5_val == 2
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfe08bfaafcfbfa;  op2val:0xf9c0023ffd0605c0
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xfdfe08bfaafcfbfa, 0xf9c0023ffd0605c0, x1, 56, x2)

inst_40:// rs1_b4_val == -2, rs1_b7_val == -2, rs2_b4_val == -9
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe0420fe07fef610;  op2val:0xf9bff9f70608c007
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xfe0420fe07fef610, 0xf9bff9f70608c007, x1, 64, x2)

inst_41:// rs1_b4_val == 64, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x5404040f80280fb;  op2val:0x78009204008ef08
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x5404040f80280fb, 0x78009204008ef08, x1, 72, x2)

inst_42:// rs1_b4_val == 8, rs2_b5_val == -33
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x72005080309fff7;  op2val:0x3dfdfc00508f901
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x72005080309fff7, 0x3dfdfc00508f901, x1, 80, x2)

inst_43:// rs1_b4_val == 1, rs1_b2_val == 16, rs1_b1_val == -17, rs1_b0_val == 127
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffac001fa10ef7f;  op2val:0xf9fcf9fbc07fc009
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x3ffac001fa10ef7f, 0xf9fcf9fbc07fc009, x1, 88, x2)

inst_44:// rs1_b4_val == 0, rs1_b1_val == 32, rs2_b5_val == -9
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x1fb060009f82007;  op2val:0xf8dff708f90900fe
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x1fb060009f82007, 0xf8dff708f90900fe, x1, 96, x2)

inst_45:// rs1_b3_val == 85, rs2_b4_val == -1
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x05faaa55fcef3f;  op2val:0x80aa08fff98006fc
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x05faaa55fcef3f, 0x80aa08fff98006fc, x1, 104, x2)

inst_46:// rs1_b3_val == 127, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfc2007557f8006f6;  op2val:0xfc00f7aac080c010
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xfc2007557f8006f6, 0xfc00f7aac080c010, x1, 112, x2)

inst_47:// rs1_b3_val == -9, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x20c00809f704f806;  op2val:0x7c0f8fb05dfff00
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x20c00809f704f806, 0x7c0f8fb05dfff00, x1, 120, x2)

inst_48:// rs1_b3_val == -5, rs2_b1_val == -5, rs1_b0_val == -17, rs1_b5_val == -17
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd07ef03fb0320ef;  op2val:0xf8ff20c001fdfb02
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xfd07ef03fb0320ef, 0xf8ff20c001fdfb02, x1, 128, x2)

inst_49:// rs1_b3_val == 64, rs2_b4_val == -3, rs1_b1_val == 8
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf93f4005400908c0;  op2val:0xfaf703fdfef87f01
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xf93f4005400908c0, 0xfaf703fdfef87f01, x1, 136, x2)

inst_50:// rs2_b3_val == -86, rs2_b0_val == -1, rs1_b1_val == 64, rs1_b7_val == -1
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xff4008fa08fe40f9;  op2val:0x20fbf93faabf09ff
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xff4008fa08fe40f9, 0x20fbf93faabf09ff, x1, 144, x2)

inst_51:// rs2_b3_val == 85, rs2_b0_val == 64, rs1_b6_val == -33, rs1_b0_val == -86, rs2_b2_val == 85
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x5df014001bf07aa;  op2val:0xbf0055f755551040
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x5df014001bf07aa, 0xbf0055f755551040, x1, 152, x2)

inst_52:// rs2_b3_val == -17, rs1_b7_val == -128
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x80fe100006550809;  op2val:0x80015580ef1009c0
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x80fe100006550809, 0x80015580ef1009c0, x1, 160, x2)

inst_53:// rs2_b3_val == -5, rs2_b0_val == -5
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8aaf8f8c0553f55;  op2val:0x4f707effb07f7fb
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xf8aaf8f8c0553f55, 0x4f707effb07f7fb, x1, 168, x2)

inst_54:// rs2_b3_val == 8, rs2_b4_val == -33, rs2_b1_val == 32
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf6f9f67fffc0f6fd;  op2val:0x55bf08df082020fe
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xf6f9f67fffc0f6fd, 0x55bf08df082020fe, x1, 176, x2)

inst_55:// rs2_b3_val == 0, rs2_b2_val == 1
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xff075500f8040409;  op2val:0x3f00f655000109f8
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xff075500f8040409, 0x3f00f655000109f8, x1, 184, x2)

inst_56:// rs2_b2_val == -5, rs2_b5_val == 4, rs2_b1_val == -65
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfcc00202c080fc00;  op2val:0xfefe04aafcfbbfc0
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xfcc00202c080fc00, 0xfefe04aafcfbbfc0, x1, 192, x2)

inst_57:// rs2_b2_val == -2, rs1_b7_val == -86, rs1_b1_val == -65
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa0206fbdf02bf05;  op2val:0x105dffa10fe0000
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xaa0206fbdf02bf05, 0x105dffa10fe0000, x1, 200, x2)

inst_58:// rs2_b2_val == 2, rs2_b4_val == 16, rs1_b5_val == 127
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x7047f04f60501fc;  op2val:0x5501f810040205fc
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x7047f04f60501fc, 0x5501f810040205fc, x1, 208, x2)

inst_59:// rs2_b1_val == -86, rs2_b5_val == -3, rs1_b6_val == -9
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x2f7100855bf2055;  op2val:0xdff8fdc0f6fdaa06
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x2f7100855bf2055, 0xdff8fdc0f6fdaa06, x1, 216, x2)

inst_60:// rs1_b3_val == 4, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x30002bf0480fbfa;  op2val:0xf97faa80fefcfc40
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x30002bf0480fbfa, 0xf97faa80fefcfc40, x1, 224, x2)

inst_61:// rs1_b2_val == 32, rs1_b1_val == 127
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x40c0fa40bf207f80;  op2val:0x7ffc040155f8ffff
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x40c0fa40bf207f80, 0x7ffc040155f8ffff, x1, 232, x2)

inst_62:// rs1_b2_val == 8, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x1080093ffc08fb02;  op2val:0x50700c006060540
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x1080093ffc08fb02, 0x50700c006060540, x1, 240, x2)

inst_63:// rs2_b0_val == -9, rs1_b1_val == -33
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x55aa40bffafcdfc0;  op2val:0x30908fa3f05fbf7
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x55aa40bffafcdfc0, 0x30908fa3f05fbf7, x1, 248, x2)

inst_64:// rs1_b2_val == -1, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x340fb7fefff4010;  op2val:0xffff2008f855f855
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x340fb7fefff4010, 0xffff2008f855f855, x1, 256, x2)

inst_65:// rs1_b1_val == -86, rs1_b6_val == -65
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x4bff720fcfcaa20;  op2val:0xdffefd40bfffbffb
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x4bff720fcfcaa20, 0xdffefd40bfffbffb, x1, 264, x2)

inst_66:// rs1_b1_val == -3, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x80fc3ff67f10fd80;  op2val:0xfdf9093f3ff707fb
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x80fc3ff67f10fd80, 0xfdf9093f3ff707fb, x1, 272, x2)

inst_67:// rs2_b6_val == 16, rs2_b0_val == 127
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xef4005090240557f;  op2val:0x51006fcf908f97f
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xef4005090240557f, 0x51006fcf908f97f, x1, 280, x2)

inst_68:// rs1_b1_val == -2, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x1aa2007ef7ffef8;  op2val:0x5fffbc0fbaaaa00
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x1aa2007ef7ffef8, 0x5fffbc0fbaaaa00, x1, 288, x2)

inst_69:// rs2_b6_val == 8, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf80c00020557f;  op2val:0x6087f06fd0380fc
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xffdf80c00020557f, 0x6087f06fd0380fc, x1, 296, x2)

inst_70:// rs2_b6_val == 4, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd0505f8c0effe09;  op2val:0xaa04fe0608fabffc
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xfd0505f8c0effe09, 0xaa04fe0608fabffc, x1, 304, x2)

inst_71:// rs1_b0_val == -2, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x9f804010604c0fe;  op2val:0x408f9f7ef0980ef
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x9f804010604c0fe, 0x408f9f7ef0980ef, x1, 312, x2)

inst_72:// rs1_b0_val == 64, rs1_b7_val == -33
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf80fa20fa551040;  op2val:0x7f880df08aa0780
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xdf80fa20fa551040, 0x7f880df08aa0780, x1, 320, x2)

inst_73:// rs1_b6_val == 127, rs1_b0_val == 1
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x47faaeffc087f01;  op2val:0xef08800303aaaa7f
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x47faaeffc087f01, 0xef08800303aaaa7f, x1, 328, x2)

inst_74:// rs2_b5_val == 1, rs2_b4_val == 127
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x2fbfd09fa0840fe;  op2val:0x3f20017f09c05503
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x2fbfd09fa0840fe, 0x3f20017f09c05503, x1, 336, x2)

inst_75:// rs1_b0_val == -1, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xff04f8fe7fc080ff;  op2val:0x100408fb03f803ff
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xff04f8fe7fc080ff, 0x100408fb03f803ff, x1, 344, x2)

inst_76:// rs2_b1_val == -3, rs1_b2_val == -86
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa06fe10aaaa0800;  op2val:0x40fdf9c0fe05fdf6
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xaa06fe10aaaa0800, 0x40fdf9c0fe05fdf6, x1, 352, x2)

inst_77:// rs2_b1_val == -2, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x3fbffd0400c0f905;  op2val:0x7ffaaa02c0fdfeef
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x3fbffd0400c0f905, 0x7ffaaa02c0fdfeef, x1, 360, x2)

inst_78:// rs1_b6_val == 8, rs1_b5_val == -65
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x108bffb0500fbdf;  op2val:0xc0f62055f9dffc09
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x108bffb0500fbdf, 0xc0f62055f9dffc09, x1, 368, x2)

inst_79:// rs2_b4_val == -2, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdf740f6fd0220fb;  op2val:0xfef600fe0080c010
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xfdf740f6fd0220fb, 0xfef600fe0080c010, x1, 376, x2)

inst_80:// rs1_b7_val == 8, 
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x8f62003f8030509;  op2val:0x550900f720ef7f10
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x8f62003f8030509, 0x550900f720ef7f10, x1, 384, x2)

inst_81:// rs1_b7_val < 0 and rs2_b7_val > 0, rs2_b0_val == -65, rs1_b2_val < 0 and rs2_b2_val < 0, rs2_b3_val == -9, rs1_b5_val != rs2_b5_val, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b4_val < 0 and rs2_b4_val > 0, rs2_b2_val == -86, rs1_b2_val == -17, rs1_b1_val == 0
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0xf6f93ff603ef0003;  op2val:0x3fa0709f7aafabf
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0xf6f93ff603ef0003, 0x3fa0709f7aafabf, x1, 392, x2)

inst_82:// rs1_b4_val > 0 and rs2_b4_val < 0, rs1_b0_val == -65, rs1_b5_val == 32, rs1_b3_val == -17, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b6_val == 16, rs2_b5_val == -17
// opcode: radd8 ; op1:x30; op2:x29; dest:x31; op1val:0x3102009efbffcbf;  op2val:0xf8f7effa10fcf9f9
TEST_RR_OP(radd8, x31, x30, x29, 0x0000000000000000, 0x3102009efbffcbf, 0xf8f7effa10fcf9f9, x1, 400, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 51*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
