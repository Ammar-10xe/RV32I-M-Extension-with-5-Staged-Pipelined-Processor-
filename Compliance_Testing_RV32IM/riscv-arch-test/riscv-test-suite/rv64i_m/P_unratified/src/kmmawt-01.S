
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmmawt instruction of the RISC-V RV64PZicsr extension for the kmmawt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmmawt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x10,signature_x10_1)

inst_0:
// rs1 == rd != rs2, rs1==x30, rs2==x11, rd==x30, rs1_w0_val == -2147483648, rs2_h3_val == 1024, rs2_h0_val == -8193, rs1_w1_val == 1048576, rs2_h2_val == -129
// opcode: kmmawt ; op1:x30; op2:x11; dest:x30; op1val:0x10000080000000;  op2val:0x400ff7ffff8dfff
TEST_PKRR_OP(kmmawt, x30, x30, x11, 0x0000000000000000, 0x10000080000000, 0x400ff7ffff8dfff, x30, x10, 0, x1)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x4, rs2==x17, rd==x21, rs2_h3_val == -21846, rs2_h2_val == 2, rs1_w1_val == 256, rs2_h1_val == -17, rs1_w0_val == 67108864, rs2_h0_val == -32768
// opcode: kmmawt ; op1:x4; op2:x17; dest:x21; op1val:0x00010004000000;  op2val:0xaaaa0002ffef8000
TEST_PKRR_OP(kmmawt, x21, x4, x17, 0x0000000000000000, 0x00010004000000, 0xaaaa0002ffef8000, x4, x10, 16, x1)

inst_2:
// rs1 == rs2 != rd, rs1==x16, rs2==x16, rd==x3, rs2_h3_val == 21845, rs1_w0_val == -4194305, rs2_h0_val == -513, rs1_w1_val == -1048577
// opcode: kmmawt ; op1:x16; op2:x16; dest:x3; op1val:0xffefffffffbfffff;  op2val:0x5555c000fff6fdff
TEST_PKRR_OP(kmmawt, x3, x16, x16, 0x0000000000000000, 0xffefffffffbfffff, 0x5555c000fff6fdff, x16, x10, 32, x1)

inst_3:
// rs1 == rs2 == rd, rs1==x8, rs2==x8, rd==x8, rs2_h3_val == 32767, rs2_h1_val == 16, rs2_h0_val == 32767, rs2_h2_val == -33, rs1_w0_val == -9, rs1_w1_val == 2097152
// opcode: kmmawt ; op1:x8; op2:x8; dest:x8; op1val:0x200000fffffff7;  op2val:0x7fffffdf00107fff
TEST_PKRR_OP(kmmawt, x8, x8, x8, 0x0000000000000000, 0x200000fffffff7, 0x7fffffdf00107fff, x8, x10, 48, x1)

inst_4:
// rs2 == rd != rs1, rs1==x27, rs2==x4, rd==x4, rs2_h3_val == -16385, rs2_h1_val == 512, rs2_h2_val == -8193, rs1_w0_val == -8193, rs2_h0_val == 4, rs1_w1_val == -536870913
// opcode: kmmawt ; op1:x27; op2:x4; dest:x4; op1val:0xdfffffffffffdfff;  op2val:0xbfffdfff02000004
TEST_PKRR_OP(kmmawt, x4, x27, x4, 0x0000000000000000, 0xdfffffffffffdfff, 0xbfffdfff02000004, x27, x10, 64, x1)

inst_5:
// rs1==x19, rs2==x18, rd==x23, rs2_h3_val == -8193, rs1_w1_val == 512, rs1_w0_val == 134217728, rs2_h1_val == 8192
// opcode: kmmawt ; op1:x19; op2:x18; dest:x23; op1val:0x00020008000000;  op2val:0xdfffc0002000fff8
TEST_PKRR_OP(kmmawt, x23, x19, x18, 0x0000000000000000, 0x00020008000000, 0xdfffc0002000fff8, x19, x10, 80, x1)

inst_6:
// rs1==x2, rs2==x7, rd==x13, rs2_h3_val == -4097, rs1_w0_val == 4194304
// opcode: kmmawt ; op1:x2; op2:x7; dest:x13; op1val:0x00000700400000;  op2val:0xeffffff63fffdfff
TEST_PKRR_OP(kmmawt, x13, x2, x7, 0x0000000000000000, 0x00000700400000, 0xeffffff63fffdfff, x2, x10, 96, x1)

inst_7:
// rs1==x6, rs2==x5, rd==x27, rs2_h3_val == -2049, rs1_w0_val == -17, rs2_h0_val == 4096, rs1_w1_val == 128, rs2_h2_val == 21845
// opcode: kmmawt ; op1:x6; op2:x5; dest:x27; op1val:0x000080ffffffef;  op2val:0xf7ff5555c0001000
TEST_PKRR_OP(kmmawt, x27, x6, x5, 0x0000000000000000, 0x000080ffffffef, 0xf7ff5555c0001000, x6, x10, 112, x1)

inst_8:
// rs1==x25, rs2==x28, rd==x14, rs2_h3_val == -1025, rs1_w1_val == -129, rs1_w0_val == -3
// opcode: kmmawt ; op1:x25; op2:x28; dest:x14; op1val:0xffffff7ffffffffd;  op2val:0xfbff0006fffcdfff
TEST_PKRR_OP(kmmawt, x14, x25, x28, 0x0000000000000000, 0xffffff7ffffffffd, 0xfbff0006fffcdfff, x25, x10, 128, x1)

inst_9:
// rs1==x29, rs2==x24, rd==x16, rs2_h3_val == -513, rs2_h1_val == 0, rs2_h0_val == -4097, rs2_h2_val == -9, rs1_w1_val == -134217729
// opcode: kmmawt ; op1:x29; op2:x24; dest:x16; op1val:0xf7fffffffffffff8;  op2val:0xfdfffff70000efff
TEST_PKRR_OP(kmmawt, x16, x29, x24, 0x0000000000000000, 0xf7fffffffffffff8, 0xfdfffff70000efff, x29, x10, 144, x1)

inst_10:
// rs1==x20, rs2==x14, rd==x9, rs2_h3_val == -257, rs1_w0_val == 536870912, rs2_h2_val == 0, rs2_h1_val == -513, rs2_h0_val == -65, rs1_w1_val == -33554433
// opcode: kmmawt ; op1:x20; op2:x14; dest:x9; op1val:0xfdffffff20000000;  op2val:0xfeff0000fdffffbf
TEST_PKRR_OP(kmmawt, x9, x20, x14, 0x0000000000000000, 0xfdffffff20000000, 0xfeff0000fdffffbf, x20, x10, 160, x1)

inst_11:
// rs1==x9, rs2==x0, rd==x17, rs2_h3_val == -129, rs2_h1_val == -4097
// opcode: kmmawt ; op1:x9; op2:x0; dest:x17; op1val:0x000003ffbfffff;  op2val:0xff7ffff7efffc000
TEST_PKRR_OP(kmmawt, x17, x9, x0, 0x0000000000000000, 0x000003ffbfffff, 0xff7ffff7efffc000, x9, x10, 176, x1)

inst_12:
// rs1==x11, rs2==x12, rd==x22, rs2_h3_val == -65, rs1_w0_val == 4096, rs2_h1_val == 21845, rs1_w1_val == 16, rs2_h0_val == 128
// opcode: kmmawt ; op1:x11; op2:x12; dest:x22; op1val:0x00001000001000;  op2val:0xffbf000255550080
TEST_PKRR_OP(kmmawt, x22, x11, x12, 0x0000000000000000, 0x00001000001000, 0xffbf000255550080, x11, x10, 192, x1)

inst_13:
// rs1==x1, rs2==x22, rd==x15, rs2_h3_val == -33, rs1_w0_val == -268435457, rs2_h1_val == -257, rs2_h2_val == 1
// opcode: kmmawt ; op1:x1; op2:x22; dest:x15; op1val:0xfffffffaefffffff;  op2val:0xffdf0001feff0006
TEST_PKRR_OP(kmmawt, x15, x1, x22, 0x0000000000000000, 0xfffffffaefffffff, 0xffdf0001feff0006, x1, x10, 208, x8)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_14:
// rs1==x12, rs2==x2, rd==x28, rs2_h3_val == -17, rs2_h1_val == -1025, rs1_w0_val == 16, rs2_h0_val == 512, rs1_w1_val == 268435456
// opcode: kmmawt ; op1:x12; op2:x2; dest:x28; op1val:0x1000000000000010;  op2val:0xffeffff9fbff0200
TEST_PKRR_OP(kmmawt, x28, x12, x2, 0x0000000000000000, 0x1000000000000010, 0xffeffff9fbff0200, x12, x4, 0, x8)

inst_15:
// rs1==x23, rs2==x27, rd==x5, rs2_h3_val == -9, rs1_w0_val == -16385, rs2_h0_val == -2049, rs2_h1_val == 64, rs1_w1_val == -17
// opcode: kmmawt ; op1:x23; op2:x27; dest:x5; op1val:0xffffffefffffbfff;  op2val:0xfff700090040f7ff
TEST_PKRR_OP(kmmawt, x5, x23, x27, 0x0000000000000000, 0xffffffefffffbfff, 0xfff700090040f7ff, x23, x4, 16, x8)

inst_16:
// rs1==x28, rs2==x23, rd==x7, rs2_h3_val == -5, rs2_h2_val == -4097, rs1_w1_val == 536870912
// opcode: kmmawt ; op1:x28; op2:x23; dest:x7; op1val:0x2000000000000010;  op2val:0xfffbefff00008000
TEST_PKRR_OP(kmmawt, x7, x28, x23, 0x0000000000000000, 0x2000000000000010, 0xfffbefff00008000, x28, x4, 32, x8)

inst_17:
// rs1==x5, rs2==x26, rd==x29, rs2_h3_val == -3, rs2_h2_val == 4
// opcode: kmmawt ; op1:x5; op2:x26; dest:x29; op1val:0x000200fffffffc;  op2val:0xfffd00040003f7ff
TEST_PKRR_OP(kmmawt, x29, x5, x26, 0x0000000000000000, 0x000200fffffffc, 0xfffd00040003f7ff, x5, x4, 48, x8)

inst_18:
// rs1==x26, rs2==x20, rd==x6, rs2_h3_val == -2, rs2_h0_val == 16384, rs2_h1_val == 16384, rs1_w0_val == -129
// opcode: kmmawt ; op1:x26; op2:x20; dest:x6; op1val:0x200000ffffff7f;  op2val:0xfffe000740004000
TEST_PKRR_OP(kmmawt, x6, x26, x20, 0x0000000000000000, 0x200000ffffff7f, 0xfffe000740004000, x26, x4, 64, x8)

inst_19:
// rs1==x31, rs2==x29, rd==x25, rs2_h3_val == -32768, rs1_w1_val == -67108865, rs2_h0_val == 32, rs2_h2_val == -21846
// opcode: kmmawt ; op1:x31; op2:x29; dest:x25; op1val:0xfbfffffffffffffd;  op2val:0x8000aaaa00000020
TEST_PKRR_OP(kmmawt, x25, x31, x29, 0x0000000000000000, 0xfbfffffffffffffd, 0x8000aaaa00000020, x31, x4, 80, x8)

inst_20:
// rs1==x10, rs2==x31, rd==x0, rs2_h3_val == 16384, rs2_h2_val == -16385, rs1_w0_val == 262144
// opcode: kmmawt ; op1:x10; op2:x31; dest:x0; op1val:0xf7ffffff00040000;  op2val:0x4000bfff0003fffc
TEST_PKRR_OP(kmmawt, x0, x10, x31, 0x0000000000000000, 0xf7ffffff00040000, 0x4000bfff0003fffc, x10, x4, 96, x8)

inst_21:
// rs1==x3, rs2==x21, rd==x18, rs2_h3_val == 8192, rs1_w0_val == 512
// opcode: kmmawt ; op1:x3; op2:x21; dest:x18; op1val:0x00000300000200;  op2val:0x20000007fffa0080
TEST_PKRR_OP(kmmawt, x18, x3, x21, 0x0000000000000000, 0x00000300000200, 0x20000007fffa0080, x3, x4, 112, x8)

inst_22:
// rs1==x15, rs2==x1, rd==x10, rs2_h3_val == 4096, rs1_w1_val == -5, rs2_h0_val == -2
// opcode: kmmawt ; op1:x15; op2:x1; dest:x10; op1val:0xfffffffb00000200;  op2val:0x1000dffffbfffffe
TEST_PKRR_OP(kmmawt, x10, x15, x1, 0x0000000000000000, 0xfffffffb00000200, 0x1000dffffbfffffe, x15, x4, 128, x8)

inst_23:
// rs1==x18, rs2==x25, rd==x11, rs2_h3_val == 2048, rs2_h1_val == 1024, rs1_w0_val == 64, rs2_h2_val == 128
// opcode: kmmawt ; op1:x18; op2:x25; dest:x11; op1val:0xfffffffa00000040;  op2val:0x800008004000020
TEST_PKRR_OP(kmmawt, x11, x18, x25, 0x0000000000000000, 0xfffffffa00000040, 0x800008004000020, x18, x4, 144, x8)

inst_24:
// rs1==x21, rs2==x15, rd==x20, rs2_h3_val == 512, rs2_h2_val == 32, rs1_w0_val == 8, rs2_h1_val == 32767, rs1_w1_val == 524288
// opcode: kmmawt ; op1:x21; op2:x15; dest:x20; op1val:0x08000000000008;  op2val:0x20000207ffffffc
TEST_PKRR_OP(kmmawt, x20, x21, x15, 0x0000000000000000, 0x08000000000008, 0x20000207ffffffc, x21, x4, 160, x8)

inst_25:
// rs1==x13, rs2==x9, rd==x2, rs2_h3_val == 256, rs2_h2_val == -65, rs1_w1_val == -1073741825, rs2_h1_val == -16385, rs2_h0_val == 256
// opcode: kmmawt ; op1:x13; op2:x9; dest:x2; op1val:0xbfffffff20000000;  op2val:0x100ffbfbfff0100
TEST_PKRR_OP(kmmawt, x2, x13, x9, 0x0000000000000000, 0xbfffffff20000000, 0x100ffbfbfff0100, x13, x4, 176, x8)

inst_26:
// rs1==x7, rs2==x6, rd==x24, rs2_h3_val == 128, rs2_h2_val == 8, rs1_w1_val == 32768, rs2_h0_val == 1, rs2_h1_val == -2049, rs1_w0_val == -5
// opcode: kmmawt ; op1:x7; op2:x6; dest:x24; op1val:0x008000fffffffb;  op2val:0x800008f7ff0001
TEST_PKRR_OP(kmmawt, x24, x7, x6, 0x0000000000000000, 0x008000fffffffb, 0x800008f7ff0001, x7, x4, 192, x8)

inst_27:
// rs1==x14, rs2==x10, rd==x1, rs2_h3_val == 64, rs1_w1_val == -65, rs1_w0_val == 16384
// opcode: kmmawt ; op1:x14; op2:x10; dest:x1; op1val:0xffffffbf00004000;  op2val:0x400002bfff0009
TEST_PKRR_OP(kmmawt, x1, x14, x10, 0x0000000000000000, 0xffffffbf00004000, 0x400002bfff0009, x14, x4, 208, x8)

inst_28:
// rs1==x22, rs2==x13, rd==x31, rs2_h3_val == 32, rs2_h2_val == 64, rs1_w1_val == -65537, rs1_w0_val == -1431655766
// opcode: kmmawt ; op1:x22; op2:x13; dest:x31; op1val:0xfffeffffaaaaaaaa;  op2val:0x200040fbfffff6
TEST_PKRR_OP(kmmawt, x31, x22, x13, 0x0000000000000000, 0xfffeffffaaaaaaaa, 0x200040fbfffff6, x22, x4, 224, x8)

inst_29:
// rs1==x17, rs2==x3, rd==x12, rs2_h3_val == 16, rs2_h1_val == 4, rs1_w0_val == -257, rs1_w1_val == -524289
// opcode: kmmawt ; op1:x17; op2:x3; dest:x12; op1val:0xfff7fffffffffeff;  op2val:0x1000400004fff6
TEST_PKRR_OP(kmmawt, x12, x17, x3, 0x0000000000000000, 0xfff7fffffffffeff, 0x1000400004fff6, x17, x4, 240, x8)

inst_30:
// rs1==x0, rs2==x19, rd==x26, rs2_h3_val == 8, rs2_h1_val == -32768, rs2_h2_val == -5, rs2_h0_val == 2048
// opcode: kmmawt ; op1:x0; op2:x19; dest:x26; op1val:0xffffffbf00000007;  op2val:0x08fffb80000800
TEST_PKRR_OP(kmmawt, x26, x0, x19, 0x0000000000000000, 0xffffffbf00000007, 0x08fffb80000800, x0, x4, 256, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x24, rs2==x30, rd==x19, rs2_h3_val == 4, rs2_h1_val == 2048
// opcode: kmmawt ; op1:x24; op2:x30; dest:x19; op1val:0xfffffff8ffffdfff;  op2val:0x04fffa0800fffc
TEST_PKRR_OP(kmmawt, x19, x24, x30, 0x0000000000000000, 0xfffffff8ffffdfff, 0x04fffa0800fffc, x24, x1, 0, x2)

inst_32:
// rs2_h3_val == 2, rs2_h2_val == 4096, rs2_h1_val == 256, rs1_w0_val == -1
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8ffffffff;  op2val:0x0210000100fffe
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfffffff8ffffffff, 0x0210000100fffe, x30, x1, 16, x2)

inst_33:
// rs2_h3_val == 1, rs2_h1_val == 1, rs2_h0_val == 2, rs1_w0_val == 8388608, rs1_w1_val == -2049
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00800000;  op2val:0x01dfff00010002
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00800000, 0x01dfff00010002, x30, x1, 32, x2)

inst_34:
// rs2_h3_val == 0, rs1_w1_val == 67108864
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffffc;  op2val:0x00effffbff0100
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x4000000fffffffc, 0x00effffbff0100, x30, x1, 48, x2)

inst_35:
// rs2_h3_val == -1, rs1_w1_val == 16384, rs2_h0_val == 8, rs2_h1_val == -8193, rs2_h2_val == -513, rs1_w0_val == 4
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x00400000000004;  op2val:0xfffffdffdfff0008
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x00400000000004, 0xfffffdffdfff0008, x30, x1, 64, x2)

inst_36:
// rs2_h2_val == 32767, rs1_w0_val == -32769, rs1_w1_val == 2048
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffff7fff;  op2val:0x047fffefff0800
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x000800ffff7fff, 0x047fffefff0800, x30, x1, 80, x2)

inst_37:
// rs2_h2_val == -2049, rs1_w1_val == 2147483647
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000006;  op2val:0x05f7ffdffff7ff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000006, 0x05f7ffdffff7ff, x30, x1, 96, x2)

inst_38:
// rs2_h2_val == -1025, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffefffffff;  op2val:0x01fbfffdff0080
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xffefffffefffffff, 0x01fbfffdff0080, x30, x1, 112, x2)

inst_39:
// rs1_w0_val == 2097152, rs1_w1_val == -4097
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00200000;  op2val:0x3fff004000001000
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xffffefff00200000, 0x3fff004000001000, x30, x1, 128, x2)

inst_40:
// rs1_w0_val == 1048576, rs1_w1_val == -1
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00100000;  op2val:0x40000955550003
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xffffffff00100000, 0x40000955550003, x30, x1, 144, x2)

inst_41:
// rs1_w0_val == 524288, rs2_h2_val == -1, rs2_h1_val == 2
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00080000;  op2val:0xaaaaffff00020006
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfdffffff00080000, 0xaaaaffff00020006, x30, x1, 160, x2)

inst_42:
// rs1_w0_val == 131072, rs2_h1_val == -1
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00020000;  op2val:0xffff0080ffff0200
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfffffffa00020000, 0xffff0080ffff0200, x30, x1, 176, x2)

inst_43:
// rs1_w0_val == 65536, rs1_w1_val == -2147483648, rs2_h1_val == -9
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000010000;  op2val:0x06fdfffff7fff9
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x8000000000010000, 0x06fdfffff7fff9, x30, x1, 192, x2)

inst_44:
// rs1_w0_val == 32768, rs1_w1_val == -32769, rs2_h1_val == -33
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00008000;  op2val:0xffff3fffffdfefff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xffff7fff00008000, 0xffff3fffffdfefff, x30, x1, 208, x2)

inst_45:
// rs1_w0_val == 8192, rs1_w1_val == 33554432, rs2_h2_val == 256
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x200000000002000;  op2val:0x55550100ffff0008
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x200000000002000, 0x55550100ffff0008, x30, x1, 224, x2)

inst_46:
// rs1_w0_val == 2048, rs1_w1_val == 65536, rs2_h1_val == -2, rs2_h0_val == -5
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000800;  op2val:0xff7f0080fffefffb
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x01000000000800, 0xff7f0080fffefffb, x30, x1, 240, x2)

inst_47:
// rs1_w0_val == 1024, rs2_h0_val == -1025
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000400;  op2val:0xfff60002f7fffbff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000400, 0xfff60002f7fffbff, x30, x1, 256, x2)

inst_48:
// rs1_w0_val == 256, rs2_h1_val == -5, rs2_h0_val == -33, rs1_w1_val == 8
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000100;  op2val:0x7fff0040fffbffdf
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x00000800000100, 0x7fff0040fffbffdf, x30, x1, 272, x2)

inst_49:
// rs1_w0_val == 128, rs1_w1_val == -2, rs2_h2_val == 1024
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000080;  op2val:0xfffe0400bffffff6
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000080, 0xfffe0400bffffff6, x30, x1, 288, x2)

inst_50:
// rs1_w0_val == 32, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000020;  op2val:0xfff70001bfff1000
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000020, 0xfff70001bfff1000, x30, x1, 304, x2)

inst_51:
// rs1_w0_val == 2, rs2_h1_val == -129
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000002;  op2val:0x3ffffffcff7ffffe
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x8000000000000002, 0x3ffffffcff7ffffe, x30, x1, 320, x2)

inst_52:
// rs1_w0_val == 1, rs1_w1_val == -9
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000001;  op2val:0xf7ff000900030007
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfffffff700000001, 0xf7ff000900030007, x30, x1, 336, x2)

inst_53:
// rs1_w0_val == 0, rs2_h0_val == 64, rs2_h2_val == 16, rs1_w1_val == 4194304, rs2_h1_val == 32
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000000;  op2val:0xfeff001000200040
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x40000000000000, 0xfeff001000200040, x30, x1, 352, x2)

inst_54:
// rs2_h2_val == -257, rs2_h1_val == -65
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00001000;  op2val:0xfbfffeffffbf0005
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xffffefff00001000, 0xfbfffeffffbf0005, x30, x1, 368, x2)

inst_55:
// rs2_h2_val == -17, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00002000;  op2val:0x02ffeffdffc000
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xffffffef00002000, 0x02ffeffdffc000, x30, x1, 384, x2)

inst_56:
// rs2_h2_val == -3, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x1000003fffffff;  op2val:0x01fffd0010fbff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x1000003fffffff, 0x01fffd0010fbff, x30, x1, 400, x2)

inst_57:
// rs2_h2_val == -2, rs1_w0_val == -1073741825
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000008bfffffff;  op2val:0x10fffeffefffdf
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x000008bfffffff, 0x10fffeffefffdf, x30, x1, 416, x2)

inst_58:
// rs2_h2_val == -32768, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000007fffffffd;  op2val:0x0380007fffffdf
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x000007fffffffd, 0x0380007fffffdf, x30, x1, 432, x2)

inst_59:
// rs2_h2_val == 16384, rs1_w1_val == -257, rs2_h0_val == -9
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00010000;  op2val:0x074000fff9fff7
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfffffeff00010000, 0x074000fff9fff7, x30, x1, 448, x2)

inst_60:
// rs2_h2_val == 8192, rs1_w1_val == -2097153
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000200;  op2val:0x200020000010fffa
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000200, 0x200020000010fffa, x30, x1, 464, x2)

inst_61:
// rs2_h2_val == 2048, rs1_w0_val == -2
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffffffe;  op2val:0x0908000010ffbf
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x20000000fffffffe, 0x0908000010ffbf, x30, x1, 480, x2)

inst_62:
// rs2_h2_val == 512, rs1_w1_val == -131073, rs2_h1_val == 4096, rs1_w0_val == -8388609
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffff7fffff;  op2val:0xffdf020010000100
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfffdffffff7fffff, 0xffdf020010000100, x30, x1, 496, x2)

inst_63:
// rs2_h1_val == -21846, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff08000000;  op2val:0x01fffcaaaa0005
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xbfffffff08000000, 0x01fffcaaaa0005, x30, x1, 512, x2)

inst_64:
// rs2_h1_val == -3, rs1_w1_val == 131072, rs1_w0_val == 268435456
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x02000010000000;  op2val:0xeffffffffffdfff6
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x02000010000000, 0xeffffffffffdfff6, x30, x1, 528, x2)

inst_65:
// rs2_h1_val == 128, rs1_w1_val == -3
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd20000000;  op2val:0xf7ffbfff0080fffb
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfffffffd20000000, 0xf7ffbfff0080fffb, x30, x1, 544, x2)

inst_66:
// rs2_h0_val == 8192, rs1_w0_val == -65537
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffeffff;  op2val:0xaaaa004008002000
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffeffff, 0xaaaa004008002000, x30, x1, 560, x2)

inst_67:
// rs2_h0_val == 1024, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000008;  op2val:0x08fffd3fff0400
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000008, 0x08fffd3fff0400, x30, x1, 576, x2)

inst_68:
// rs2_h0_val == 16, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000009;  op2val:0x8000fff900400010
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000009, 0x8000fff900400010, x30, x1, 592, x2)

inst_69:
// rs2_h0_val == 0, rs1_w1_val == -4194305, rs2_h1_val == 8
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff80000000;  op2val:0xfffd7fff00080000
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xffbfffff80000000, 0xfffd7fff00080000, x30, x1, 608, x2)

inst_70:
// rs2_h0_val == -1, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x00000800001000;  op2val:0xfff88000f7ffffff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x00000800001000, 0xfff88000f7ffffff, x30, x1, 624, x2)

inst_71:
// rs1_w1_val == -1431655766, rs1_w0_val == -33554433
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafdffffff;  op2val:0xfff81000feff0020
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafdffffff, 0xfff81000feff0020, x30, x1, 640, x2)

inst_72:
// rs1_w1_val == 1431655765, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x5555555580000000;  op2val:0x5555fff8fdfffffa
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x5555555580000000, 0x5555fff8fdfffffa, x30, x1, 656, x2)

inst_73:
// rs1_w1_val == -268435457, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00800000;  op2val:0xfff8fffdc0003fff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xefffffff00800000, 0xfff8fffdc0003fff, x30, x1, 672, x2)

inst_74:
// rs1_w1_val == -16777217, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffffbfff;  op2val:0xefff080040000800
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfeffffffffffbfff, 0xefff080040000800, x30, x1, 688, x2)

inst_75:
// rs1_w1_val == -8388609, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000009;  op2val:0xfdff00050100fff6
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000009, 0xfdff00050100fff6, x30, x1, 704, x2)

inst_76:
// rs1_w1_val == -262145, rs2_h0_val == -257
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000080;  op2val:0xfff900010006feff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000080, 0xfff900010006feff, x30, x1, 720, x2)

inst_77:
// rs1_w1_val == -16385, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000002;  op2val:0x06002000010009
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000002, 0x06002000010009, x30, x1, 736, x2)

inst_78:
// rs1_w1_val == -8193, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffffffffd;  op2val:0xfff7fff8dfff0400
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xffffdffffffffffd, 0xfff7fff8dfff0400, x30, x1, 752, x2)

inst_79:
// rs1_w1_val == -1025, rs2_h0_val == -129
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00020000;  op2val:0x030003efffff7f
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfffffbff00020000, 0x030003efffff7f, x30, x1, 768, x2)

inst_80:
// rs1_w1_val == -513, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000020;  op2val:0xfffbfffcfff6fffc
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000020, 0xfffbfffcfff6fffc, x30, x1, 784, x2)

inst_81:
// rs1_w1_val == -33, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffffc;  op2val:0xfbfffff655550020
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffffc, 0xfbfffff655550020, x30, x1, 800, x2)

inst_82:
// rs1_w1_val == 1073741824, rs1_w0_val == -134217729
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x40000000f7ffffff;  op2val:0x3fff0040fff7ffff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x40000000f7ffffff, 0x3fff0040fff7ffff, x30, x1, 816, x2)

inst_83:
// rs1_w1_val == 134217728, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x8000000ffffdfff;  op2val:0x20fff7fffdfffa
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x8000000ffffdfff, 0x20fff7fffdfffa, x30, x1, 832, x2)

inst_84:
// rs1_w1_val == 16777216, rs1_w0_val == -33
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x1000000ffffffdf;  op2val:0xfdff001000050200
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x1000000ffffffdf, 0xfdff001000050200, x30, x1, 848, x2)

inst_85:
// rs1_w1_val == 8388608, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x800000fdffffff;  op2val:0x2000005ffbf0003
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x800000fdffffff, 0x2000005ffbf0003, x30, x1, 864, x2)

inst_86:
// rs1_w1_val == 262144, rs1_w0_val == -262145
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffbffff;  op2val:0x400ffffc000ffff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x040000fffbffff, 0x400ffffc000ffff, x30, x1, 880, x2)

inst_87:
// rs1_w1_val == 8192, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x002000bfffffff;  op2val:0xfffd20003fff0020
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x002000bfffffff, 0xfffd20003fff0020, x30, x1, 896, x2)

inst_88:
// rs1_w1_val == 4096, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffffffef;  op2val:0x00004000000001
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x001000ffffffef, 0x00004000000001, x30, x1, 912, x2)

inst_89:
// rs1_w1_val == 1024, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x00040010000000;  op2val:0x07fff6fff9ff7f
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x00040010000000, 0x07fff6fff9ff7f, x30, x1, 928, x2)

inst_90:
// rs1_w1_val == 64, rs1_w0_val == -65
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffffffbf;  op2val:0xdfff0020fff6dfff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x000040ffffffbf, 0xdfff0020fff6dfff, x30, x1, 944, x2)

inst_91:
// rs1_w1_val == 32, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffffff7;  op2val:0xfff600020003ffdf
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x000020fffffff7, 0xfff600020003ffdf, x30, x1, 960, x2)

inst_92:
// rs1_w1_val == 4, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x00000400040000;  op2val:0xfbfffffdffff0005
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x00000400040000, 0xfbfffffdffff0005, x30, x1, 976, x2)

inst_93:
// rs1_w1_val == 2, rs2_h0_val == -3
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffffffb;  op2val:0xeffffffc0004fffd
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x000002fffffffb, 0xeffffffc0004fffd, x30, x1, 992, x2)

inst_94:
// rs1_w1_val == 1, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000008;  op2val:0x7fff000100200020
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x00000100000008, 0x7fff000100200020, x30, x1, 1008, x2)

inst_95:
// rs1_w1_val == 0, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x0000003fffffff;  op2val:0xfefffffa8000ffff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x0000003fffffff, 0xfefffffa8000ffff, x30, x1, 1024, x2)

inst_96:
// rs1_w0_val == 1431655765, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x00000855555555;  op2val:0xaaaa004000020003
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x00000855555555, 0xaaaa004000020003, x30, x1, 1040, x2)

inst_97:
// rs1_w0_val == 2147483647, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x0004007fffffff;  op2val:0x09fff9fff87fff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x0004007fffffff, 0x09fff9fff87fff, x30, x1, 1056, x2)

inst_98:
// rs1_w0_val == -536870913, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffdfffffff;  op2val:0xffff3ffffdff4000
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xff7fffffdfffffff, 0xffff3ffffdff4000, x30, x1, 1072, x2)

inst_99:
// rs1_w0_val == -67108865, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000002fbffffff;  op2val:0x1000000502000010
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x000002fbffffff, 0x1000000502000010, x30, x1, 1088, x2)

inst_100:
// rs1_w0_val == -16777217, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffeffffff;  op2val:0xffbffff60009feff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfffffbfffeffffff, 0xffbffff60009feff, x30, x1, 1104, x2)

inst_101:
// rs1_w0_val == -2097153, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffdfffff;  op2val:0xfffd0200ffff1000
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xffffefffffdfffff, 0xfffd0200ffff1000, x30, x1, 1120, x2)

inst_102:
// rs1_w0_val == -1048577, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffefffff;  op2val:0xfffe0080efff0200
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xffbfffffffefffff, 0xfffe0080efff0200, x30, x1, 1136, x2)

inst_103:
// rs1_w0_val == -524289, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x200000fff7ffff;  op2val:0x0800400004fff9
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x200000fff7ffff, 0x0800400004fff9, x30, x1, 1152, x2)

inst_104:
// rs1_w0_val == -131073, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffdffff;  op2val:0xfbff0003fff90009
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x002000fffdffff, 0xfbff0003fff90009, x30, x1, 1168, x2)

inst_105:
// rs1_w0_val == -4097, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffffefff;  op2val:0xefffeffffff8fbff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x000040ffffefff, 0xefffeffffff8fbff, x30, x1, 1184, x2)

inst_106:
// rs1_w0_val == -2049, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffff7ff;  op2val:0xfffdfffcfdfffbff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x002000fffff7ff, 0xfffdfffcfdfffbff, x30, x1, 1200, x2)

inst_107:
// rs1_w0_val == -1025, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffffbff;  op2val:0x1000003ff7ffff8
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x000800fffffbff, 0x1000003ff7ffff8, x30, x1, 1216, x2)

inst_108:
// rs2_h0_val == -21846, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00040000;  op2val:0x800040aaaaaaaa
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xffffffef00040000, 0x800040aaaaaaaa, x30, x1, 1232, x2)

inst_109:
// rs2_h0_val == -16385, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f08000000;  op2val:0x03effffff8bfff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xffffff7f08000000, 0x03effffff8bfff, x30, x1, 1248, x2)

inst_110:
// rs1_w0_val == 1073741824, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff40000000;  op2val:0x021000ff7fbfff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xffffffff40000000, 0x021000ff7fbfff, x30, x1, 1264, x2)

inst_111:
// rs1_w0_val == 16777216, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x00020001000000;  op2val:0xfff60007fff90200
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x00020001000000, 0xfff60007fff90200, x30, x1, 1280, x2)

inst_112:
// rs2_h0_val == -17, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x000080feffffff;  op2val:0xfff7bfffdfffffef
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x000080feffffff, 0xfff7bfffdfffffef, x30, x1, 1296, x2)

inst_113:
// rs1_w0_val == 33554432, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff02000000;  op2val:0x4000000108000080
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xfffffbff02000000, 0x4000000108000080, x30, x1, 1312, x2)

inst_114:
// rs1_w0_val == -513, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffffdff;  op2val:0xfdffffef0009fffe
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x004000fffffdff, 0xfdffffef0009fffe, x30, x1, 1328, x2)

inst_115:
// rs2_h0_val == 21845, 
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffffffffffa;  op2val:0xefff020001005555
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x3ffffffffffffffa, 0xefff020001005555, x30, x1, 1344, x2)

inst_116:
// rs2_h3_val == 21845, rs1_w0_val == -4194305, rs2_h0_val == -513, rs1_w1_val == -1048577
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffbfffff;  op2val:0x5555c000fff6fdff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xffefffffffbfffff, 0x5555c000fff6fdff, x30, x1, 1360, x2)

inst_117:
// rs2_h3_val == 32767, rs2_h1_val == 16, rs2_h0_val == 32767, rs2_h2_val == -33, rs1_w0_val == -9, rs1_w1_val == 2097152
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffffff7;  op2val:0x7fffffdf00107fff
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0x200000fffffff7, 0x7fffffdf00107fff, x30, x1, 1376, x2)

inst_118:
// rs2_h3_val == 8, rs2_h1_val == -32768, rs2_h2_val == -5, rs2_h0_val == 2048
// opcode: kmmawt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000007;  op2val:0x08fffb80000800
TEST_PKRR_OP(kmmawt, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000007, 0x08fffb80000800, x30, x1, 1392, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 176*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
