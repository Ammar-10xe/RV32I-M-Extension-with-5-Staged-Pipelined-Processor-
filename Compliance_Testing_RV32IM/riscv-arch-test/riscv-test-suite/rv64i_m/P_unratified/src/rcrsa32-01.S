
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rcrsa32 instruction of the RISC-V RV64PZicsr extension for the rcrsa32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",rcrsa32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rd != rs2, rs1==x14, rs2==x30, rd==x14, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w1_val == -1431655766, rs2_w1_val == 4194304
// opcode: rcrsa32 ; op1:x14; op2:x30; dest:x14; op1val:0xaaaaaaaa80000000;  op2val:0x400000fffffffc
TEST_RR_OP(rcrsa32, x14, x14, x30, 0x0000000000000000, 0xaaaaaaaa80000000, 0x400000fffffffc, x8, 0, x6)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x7, rs2==x15, rd==x31, rs1_w1_val == rs2_w1_val, rs2_w0_val == 262144, rs1_w0_val == 1048576, rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 64, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 64
// opcode: rcrsa32 ; op1:x7; op2:x15; dest:x31; op1val:0x00004000100000;  op2val:0x00004000040000
TEST_RR_OP(rcrsa32, x31, x7, x15, 0x0000000000000000, 0x00004000100000, 0x00004000040000, x8, 8, x6)

inst_2:
// rs1 == rs2 != rd, rs1==x19, rs2==x19, rd==x21, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w1_val == -134217729, rs2_w0_val == -65, rs1_w0_val == -9
// opcode: rcrsa32 ; op1:x19; op2:x19; dest:x21; op1val:0xf7fffffffffffff7;  op2val:0xfffffff8ffffffbf
TEST_RR_OP(rcrsa32, x21, x19, x19, 0x0000000000000000, 0xf7fffffffffffff7, 0xfffffff8ffffffbf, x8, 16, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x11, rs2==x11, rd==x11, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val == -33554433, rs2_w0_val == -16777217, rs1_w1_val == 1
// opcode: rcrsa32 ; op1:x11; op2:x11; dest:x11; op1val:0x000001fdffffff;  op2val:0xfffffff9feffffff
TEST_RR_OP(rcrsa32, x11, x11, x11, 0x0000000000000000, 0x000001fdffffff, 0xfffffff9feffffff, x8, 24, x6)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x29, rd==x29, rs1_w0_val == rs2_w0_val, rs2_w1_val == 4096, rs1_w1_val == 524288, rs1_w0_val == 16, rs2_w0_val == 16
// opcode: rcrsa32 ; op1:x5; op2:x29; dest:x29; op1val:0x08000000000010;  op2val:0x00100000000010
TEST_RR_OP(rcrsa32, x29, x5, x29, 0x0000000000000000, 0x08000000000010, 0x00100000000010, x8, 32, x6)

inst_5:
// rs1==x30, rs2==x28, rd==x10, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w1_val == -16385, rs1_w0_val == -2, rs2_w0_val == 32768
// opcode: rcrsa32 ; op1:x30; op2:x28; dest:x10; op1val:0xfffffff6fffffffe;  op2val:0xffffbfff00008000
TEST_RR_OP(rcrsa32, x10, x30, x28, 0x0000000000000000, 0xfffffff6fffffffe, 0xffffbfff00008000, x8, 40, x6)

inst_6:
// rs1==x18, rs2==x7, rd==x13, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w0_val == -32769, rs2_w1_val == -1025, rs1_w0_val == 2048
// opcode: rcrsa32 ; op1:x18; op2:x7; dest:x13; op1val:0x08000000000800;  op2val:0xfffffbffffff7fff
TEST_RR_OP(rcrsa32, x13, x18, x7, 0x0000000000000000, 0x08000000000800, 0xfffffbffffff7fff, x8, 48, x6)

inst_7:
// rs1==x26, rs2==x5, rd==x3, rs2_w1_val == -1431655766, rs2_w0_val == -2147483648, rs1_w0_val == -8388609
// opcode: rcrsa32 ; op1:x26; op2:x5; dest:x3; op1val:0x000005ff7fffff;  op2val:0xaaaaaaaa80000000
TEST_RR_OP(rcrsa32, x3, x26, x5, 0x0000000000000000, 0x000005ff7fffff, 0xaaaaaaaa80000000, x8, 56, x6)

inst_8:
// rs1==x4, rs2==x24, rd==x27, rs2_w1_val == 1431655765, rs1_w1_val == -33, rs2_w0_val == -257, rs1_w0_val == 4096
// opcode: rcrsa32 ; op1:x4; op2:x24; dest:x27; op1val:0xffffffdf00001000;  op2val:0x55555555fffffeff
TEST_RR_OP(rcrsa32, x27, x4, x24, 0x0000000000000000, 0xffffffdf00001000, 0x55555555fffffeff, x8, 64, x6)

inst_9:
// rs1==x15, rs2==x12, rd==x1, rs2_w1_val == 2147483647, rs2_w0_val == -1431655766, rs1_w0_val == 8388608
// opcode: rcrsa32 ; op1:x15; op2:x12; dest:x1; op1val:0xffffffdf00800000;  op2val:0x7fffffffaaaaaaaa
TEST_RR_OP(rcrsa32, x1, x15, x12, 0x0000000000000000, 0xffffffdf00800000, 0x7fffffffaaaaaaaa, x8, 72, x6)

inst_10:
// rs1==x28, rs2==x0, rd==x30, rs2_w1_val == -1073741825, rs2_w0_val == 64, rs1_w1_val == 2
// opcode: rcrsa32 ; op1:x28; op2:x0; dest:x30; op1val:0x000002fffffffe;  op2val:0xbfffffff00000040
TEST_RR_OP(rcrsa32, x30, x28, x0, 0x0000000000000000, 0x000002fffffffe, 0xbfffffff00000040, x8, 80, x6)

inst_11:
// rs1==x17, rs2==x9, rd==x18, rs2_w1_val == -536870913, rs1_w1_val == 4194304, rs1_w0_val == -262145, rs2_w0_val == -134217729
// opcode: rcrsa32 ; op1:x17; op2:x9; dest:x18; op1val:0x400000fffbffff;  op2val:0xdffffffff7ffffff
TEST_RR_OP(rcrsa32, x18, x17, x9, 0x0000000000000000, 0x400000fffbffff, 0xdffffffff7ffffff, x8, 88, x6)

inst_12:
// rs1==x2, rs2==x20, rd==x7, rs2_w1_val == -268435457, rs1_w0_val == 64, rs1_w1_val == -2, rs2_w0_val == 524288
// opcode: rcrsa32 ; op1:x2; op2:x20; dest:x7; op1val:0xfffffffe00000040;  op2val:0xefffffff00080000
TEST_RR_OP(rcrsa32, x7, x2, x20, 0x0000000000000000, 0xfffffffe00000040, 0xefffffff00080000, x8, 96, x6)

inst_13:
// rs1==x10, rs2==x1, rd==x15, rs2_w1_val == -134217729, rs2_w0_val == -33554433, rs1_w1_val == -524289
// opcode: rcrsa32 ; op1:x10; op2:x1; dest:x15; op1val:0xfff7ffff00100000;  op2val:0xf7fffffffdffffff
TEST_RR_OP(rcrsa32, x15, x10, x1, 0x0000000000000000, 0xfff7ffff00100000, 0xf7fffffffdffffff, x8, 104, x6)

inst_14:
// rs1==x1, rs2==x23, rd==x26, rs2_w1_val == -67108865, rs1_w0_val == 2, rs2_w0_val == 128
// opcode: rcrsa32 ; op1:x1; op2:x23; dest:x26; op1val:0x00000100000002;  op2val:0xfbffffff00000080
TEST_RR_OP(rcrsa32, x26, x1, x23, 0x0000000000000000, 0x00000100000002, 0xfbffffff00000080, x8, 112, x6)

inst_15:
// rs1==x6, rs2==x26, rd==x9, rs2_w1_val == -33554433, rs1_w0_val == -1073741825
// opcode: rcrsa32 ; op1:x6; op2:x26; dest:x9; op1val:0x400000bfffffff;  op2val:0xfdfffffffffffff9
TEST_RR_OP(rcrsa32, x9, x6, x26, 0x0000000000000000, 0x400000bfffffff, 0xfdfffffffffffff9, x8, 120, x7)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_16:
// rs1==x16, rs2==x27, rd==x20, rs2_w1_val == -16777217, rs1_w0_val == -1025, rs2_w0_val == 512, rs1_w1_val == -2097153
// opcode: rcrsa32 ; op1:x16; op2:x27; dest:x20; op1val:0xffdffffffffffbff;  op2val:0xfeffffff00000200
TEST_RR_OP(rcrsa32, x20, x16, x27, 0x0000000000000000, 0xffdffffffffffbff, 0xfeffffff00000200, x1, 0, x7)

inst_17:
// rs1==x3, rs2==x31, rd==x2, rs2_w1_val == -8388609, rs1_w0_val == -524289, rs1_w1_val == 0
// opcode: rcrsa32 ; op1:x3; op2:x31; dest:x2; op1val:0x000000fff7ffff;  op2val:0xff7fffff00000006
TEST_RR_OP(rcrsa32, x2, x3, x31, 0x0000000000000000, 0x000000fff7ffff, 0xff7fffff00000006, x1, 8, x7)

inst_18:
// rs1==x13, rs2==x3, rd==x16, rs2_w1_val == -4194305, 
// opcode: rcrsa32 ; op1:x13; op2:x3; dest:x16; op1val:0x08000000001000;  op2val:0xffbfffffffffffbf
TEST_RR_OP(rcrsa32, x16, x13, x3, 0x0000000000000000, 0x08000000001000, 0xffbfffffffffffbf, x1, 16, x7)

inst_19:
// rs1==x23, rs2==x10, rd==x4, rs2_w1_val == -2097153, rs1_w0_val == 256, rs1_w1_val == -67108865, rs2_w0_val == -17
// opcode: rcrsa32 ; op1:x23; op2:x10; dest:x4; op1val:0xfbffffff00000100;  op2val:0xffdfffffffffffef
TEST_RR_OP(rcrsa32, x4, x23, x10, 0x0000000000000000, 0xfbffffff00000100, 0xffdfffffffffffef, x1, 24, x7)

inst_20:
// rs1==x12, rs2==x6, rd==x28, rs2_w1_val == -1048577, rs1_w1_val == 268435456, rs1_w0_val == 262144
// opcode: rcrsa32 ; op1:x12; op2:x6; dest:x28; op1val:0x1000000000040000;  op2val:0xffefffff00040000
TEST_RR_OP(rcrsa32, x28, x12, x6, 0x0000000000000000, 0x1000000000040000, 0xffefffff00040000, x1, 32, x7)

inst_21:
// rs1==x31, rs2==x17, rd==x6, rs2_w1_val == -524289, rs1_w1_val == -129
// opcode: rcrsa32 ; op1:x31; op2:x17; dest:x6; op1val:0xffffff7f00000005;  op2val:0xfff7fffffffffff6
TEST_RR_OP(rcrsa32, x6, x31, x17, 0x0000000000000000, 0xffffff7f00000005, 0xfff7fffffffffff6, x1, 40, x7)

inst_22:
// rs1==x8, rs2==x25, rd==x22, rs2_w1_val == -262145, rs1_w0_val == 128, rs1_w1_val == 8388608
// opcode: rcrsa32 ; op1:x8; op2:x25; dest:x22; op1val:0x80000000000080;  op2val:0xfffbfffffeffffff
TEST_RR_OP(rcrsa32, x22, x8, x25, 0x0000000000000000, 0x80000000000080, 0xfffbfffffeffffff, x1, 48, x7)

inst_23:
// rs1==x22, rs2==x16, rd==x17, rs2_w1_val == -131073, rs1_w0_val == 16777216, rs1_w1_val == -1025
// opcode: rcrsa32 ; op1:x22; op2:x16; dest:x17; op1val:0xfffffbff01000000;  op2val:0xfffdfffffffffff8
TEST_RR_OP(rcrsa32, x17, x22, x16, 0x0000000000000000, 0xfffffbff01000000, 0xfffdfffffffffff8, x1, 56, x7)

inst_24:
// rs1==x29, rs2==x21, rd==x0, rs2_w1_val == -65537, rs1_w0_val == 16384, rs1_w1_val == -3
// opcode: rcrsa32 ; op1:x29; op2:x21; dest:x0; op1val:0xfffffffd00004000;  op2val:0xfffeffff00000010
TEST_RR_OP(rcrsa32, x0, x29, x21, 0x0000000000000000, 0xfffffffd00004000, 0xfffeffff00000010, x1, 64, x7)

inst_25:
// rs1==x24, rs2==x8, rd==x12, rs2_w1_val == -32769, rs1_w0_val == 4194304, rs1_w1_val == 262144
// opcode: rcrsa32 ; op1:x24; op2:x8; dest:x12; op1val:0x04000000400000;  op2val:0xffff7fff00008000
TEST_RR_OP(rcrsa32, x12, x24, x8, 0x0000000000000000, 0x04000000400000, 0xffff7fff00008000, x1, 72, x7)

inst_26:
// rs1==x27, rs2==x14, rd==x8, rs2_w1_val == -8193, rs2_w0_val == 4194304
// opcode: rcrsa32 ; op1:x27; op2:x14; dest:x8; op1val:0xaaaaaaaa00000007;  op2val:0xffffdfff00400000
TEST_RR_OP(rcrsa32, x8, x27, x14, 0x0000000000000000, 0xaaaaaaaa00000007, 0xffffdfff00400000, x1, 80, x7)

inst_27:
// rs1==x21, rs2==x18, rd==x5, rs2_w1_val == -4097, rs1_w1_val == -5, rs2_w0_val == 134217728
// opcode: rcrsa32 ; op1:x21; op2:x18; dest:x5; op1val:0xfffffffbfff7ffff;  op2val:0xffffefff08000000
TEST_RR_OP(rcrsa32, x5, x21, x18, 0x0000000000000000, 0xfffffffbfff7ffff, 0xffffefff08000000, x1, 88, x7)

inst_28:
// rs1==x20, rs2==x22, rd==x25, rs2_w1_val == -2049, rs2_w0_val == 67108864, rs1_w1_val == 16384
// opcode: rcrsa32 ; op1:x20; op2:x22; dest:x25; op1val:0x00400000100000;  op2val:0xfffff7ff04000000
TEST_RR_OP(rcrsa32, x25, x20, x22, 0x0000000000000000, 0x00400000100000, 0xfffff7ff04000000, x1, 96, x7)

inst_29:
// rs1==x25, rs2==x2, rd==x23, rs2_w1_val == -513, rs1_w1_val == 4096, rs2_w0_val == 2048
// opcode: rcrsa32 ; op1:x25; op2:x2; dest:x23; op1val:0x00100000800000;  op2val:0xfffffdff00000800
TEST_RR_OP(rcrsa32, x23, x25, x2, 0x0000000000000000, 0x00100000800000, 0xfffffdff00000800, x1, 104, x7)

inst_30:
// rs1==x0, rs2==x13, rd==x24, rs2_w1_val == -257, 
// opcode: rcrsa32 ; op1:x0; op2:x13; dest:x24; op1val:0x00000680000000;  op2val:0xfffffeff00080000
TEST_RR_OP(rcrsa32, x24, x0, x13, 0x0000000000000000, 0x00000680000000, 0xfffffeff00080000, x1, 112, x7)

inst_31:
// rs1==x9, rs2==x4, rd==x19, rs2_w1_val == -129, rs1_w1_val == 4
// opcode: rcrsa32 ; op1:x9; op2:x4; dest:x19; op1val:0x00000400800000;  op2val:0xffffff7ffffffff9
TEST_RR_OP(rcrsa32, x19, x9, x4, 0x0000000000000000, 0x00000400800000, 0xffffff7ffffffff9, x1, 120, x7)

inst_32:
// rs2_w1_val == -65, rs2_w0_val == 131072, rs1_w1_val == -2049, rs1_w0_val == 8192
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00002000;  op2val:0xffffffbf00020000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00002000, 0xffffffbf00020000, x1, 128, x2)

inst_33:
// rs2_w1_val == -33, rs1_w0_val == 1, rs2_w0_val == -2097153
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000001;  op2val:0xffffffdfffdfffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x08000000000001, 0xffffffdfffdfffff, x1, 136, x2)

inst_34:
// rs2_w1_val == -17, rs1_w0_val == 1431655765, rs2_w0_val == -2, rs1_w1_val == -9
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff755555555;  op2val:0xffffffeffffffffe
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff755555555, 0xffffffeffffffffe, x1, 144, x2)

inst_35:
// rs2_w1_val == -9, rs2_w0_val == 4, rs1_w1_val == 1073741824
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffffff6;  op2val:0xfffffff700000004
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x40000000fffffff6, 0xfffffff700000004, x1, 152, x2)

inst_36:
// rs2_w1_val == -5, rs2_w0_val == -67108865, rs1_w1_val == -4097, rs1_w0_val == -2097153
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffdfffff;  op2val:0xfffffffbfbffffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffefffffdfffff, 0xfffffffbfbffffff, x1, 160, x2)

inst_37:
// rs2_w1_val == -3, rs2_w0_val == -16385, rs1_w0_val == 2097152
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00200000;  op2val:0xfffffffdffffbfff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00200000, 0xfffffffdffffbfff, x1, 168, x2)

inst_38:
// rs2_w1_val == -2, rs1_w1_val == 67108864, rs2_w0_val == -1048577, rs1_w0_val == -17
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000ffffffef;  op2val:0xfffffffeffefffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x4000000ffffffef, 0xfffffffeffefffff, x1, 176, x2)

inst_39:
// rs2_w1_val == -2147483648, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009fff7ffff;  op2val:0x8000000000040000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000009fff7ffff, 0x8000000000040000, x1, 184, x2)

inst_40:
// rs2_w1_val == 1073741824, rs1_w1_val == -262145
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffffffffffc;  op2val:0x40000000fffffff9
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffbfffffffffffc, 0x40000000fffffff9, x1, 192, x2)

inst_41:
// rs2_w1_val == 536870912, rs2_w0_val == 2, rs1_w0_val == -65
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffffffbf;  op2val:0x2000000000000002
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x40000000ffffffbf, 0x2000000000000002, x1, 200, x2)

inst_42:
// rs2_w1_val == 268435456, rs2_w0_val == -131073, rs1_w0_val == 1073741824
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf40000000;  op2val:0x10000000fffdffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffffdf40000000, 0x10000000fffdffff, x1, 208, x2)

inst_43:
// rs2_w1_val == 134217728, rs2_w0_val == -8193, rs1_w0_val == 524288
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00080000;  op2val:0x8000000ffffdfff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00080000, 0x8000000ffffdfff, x1, 216, x2)

inst_44:
// rs2_w1_val == 67108864, rs1_w1_val == -32769
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000009;  op2val:0x4000000ffdfffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000009, 0x4000000ffdfffff, x1, 224, x2)

inst_45:
// rs2_w1_val == 33554432, rs1_w1_val == -65537
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000002;  op2val:0x200000000000040
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000002, 0x200000000000040, x1, 232, x2)

inst_46:
// rs2_w1_val == 16777216, rs2_w0_val == -513
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffff9;  op2val:0x1000000fffffdff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x4000000fffffff9, 0x1000000fffffdff, x1, 240, x2)

inst_47:
// rs2_w1_val == 8388608, rs2_w0_val == -4194305, rs1_w0_val == -536870913
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffdfffffff;  op2val:0x800000ffbfffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xffdfffffdfffffff, 0x800000ffbfffff, x1, 248, x2)

inst_48:
// rs2_w1_val == 2097152, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f40000000;  op2val:0x200000ffffffbf
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffff7f40000000, 0x200000ffffffbf, x1, 256, x2)

inst_49:
// rs2_w1_val == 1048576, rs2_w0_val == -2049
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffffbf;  op2val:0x100000fffff7ff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffffbf, 0x100000fffff7ff, x1, 264, x2)

inst_50:
// rs2_w1_val == 524288, rs2_w0_val == 256, rs1_w1_val == 131072
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000040000000;  op2val:0x08000000000100
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x02000040000000, 0x08000000000100, x1, 272, x2)

inst_51:
// rs1_w0_val == 33554432, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100002000000;  op2val:0xfff7fffffffffeff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x00100002000000, 0xfff7fffffffffeff, x1, 280, x2)

inst_52:
// rs1_w0_val == 131072, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700020000;  op2val:0x00000600000006
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff700020000, 0x00000600000006, x1, 288, x2)

inst_53:
// rs1_w0_val == 65536, rs2_w0_val == 8
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800010000;  op2val:0xffffdfff00000008
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff800010000, 0xffffdfff00000008, x1, 296, x2)

inst_54:
// rs1_w0_val == 32768, rs2_w0_val == 536870912
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00008000;  op2val:0x40000020000000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00008000, 0x40000020000000, x1, 304, x2)

inst_55:
// rs1_w0_val == 1024, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000400;  op2val:0x100000ffff7fff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff700000400, 0x100000ffff7fff, x1, 312, x2)

inst_56:
// rs1_w0_val == 512, rs2_w0_val == -65537, rs1_w1_val == -16777217
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000200;  op2val:0xfffffbfffffeffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000200, 0xfffffbfffffeffff, x1, 320, x2)

inst_57:
// rs1_w0_val == 32, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900000020;  op2val:0x55555555ffffffbf
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff900000020, 0x55555555ffffffbf, x1, 328, x2)

inst_58:
// rs1_w0_val == 8, rs2_w0_val == -9
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00000008;  op2val:0xffbffffffffffff7
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffc00000008, 0xffbffffffffffff7, x1, 336, x2)

inst_59:
// rs1_w0_val == 4, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000004;  op2val:0x000005ffefffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000004, 0x000005ffefffff, x1, 344, x2)

inst_60:
// rs1_w0_val == 0, rs1_w1_val == -513
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000000;  op2val:0x00000304000000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000000, 0x00000304000000, x1, 352, x2)

inst_61:
// rs1_w0_val == -1, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffffffff;  op2val:0x00004000000008
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfeffffffffffffff, 0x00004000000008, x1, 360, x2)

inst_62:
// rs2_w1_val == 262144, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00040000;  op2val:0x040000ffff7fff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffc00040000, 0x040000ffff7fff, x1, 368, x2)

inst_63:
// rs2_w1_val == 131072, rs1_w0_val == -131073
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007fffdffff;  op2val:0x02000000000080
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000007fffdffff, 0x02000000000080, x1, 376, x2)

inst_64:
// rs2_w1_val == 65536, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000800;  op2val:0x01000080000000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000000000800, 0x01000080000000, x1, 384, x2)

inst_65:
// rs2_w1_val == 32768, rs1_w1_val == -16385, rs1_w0_val == -5
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffffb;  op2val:0x008000fffffff8
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffffb, 0x008000fffffff8, x1, 392, x2)

inst_66:
// rs2_w1_val == 16384, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003fffffff8;  op2val:0x004000ffdfffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000003fffffff8, 0x004000ffdfffff, x1, 400, x2)

inst_67:
// rs2_w1_val == 8192, rs2_w0_val == -8388609, rs1_w1_val == 1024
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffffffc;  op2val:0x002000ff7fffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000400fffffffc, 0x002000ff7fffff, x1, 408, x2)

inst_68:
// rs2_w1_val == 2048, rs1_w1_val == 256
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100fffffffe;  op2val:0x00080000000005
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000100fffffffe, 0x00080000000005, x1, 416, x2)

inst_69:
// rs2_w1_val == 1024, rs1_w0_val == -8193
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffffdfff;  op2val:0x00040000400000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000040ffffdfff, 0x00040000400000, x1, 424, x2)

inst_70:
// rs2_w1_val == 512, rs1_w0_val == -16385, rs2_w0_val == -524289
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffbfff;  op2val:0x000200fff7ffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffbfff, 0x000200fff7ffff, x1, 432, x2)

inst_71:
// rs2_w1_val == 256, rs1_w1_val == -17, rs2_w0_val == 16777216, rs1_w0_val == 67108864
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef04000000;  op2val:0x00010001000000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffffef04000000, 0x00010001000000, x1, 440, x2)

inst_72:
// rs2_w1_val == 128, rs1_w0_val == 2147483647
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000037fffffff;  op2val:0x000080ffbfffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x0000037fffffff, 0x000080ffbfffff, x1, 448, x2)

inst_73:
// rs2_w1_val == 32, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fffffffc;  op2val:0x00002020000000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffffffc, 0x00002020000000, x1, 456, x2)

inst_74:
// rs2_w1_val == 16, rs1_w1_val == 2048
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000004000;  op2val:0x0000103fffffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x00080000004000, 0x0000103fffffff, x1, 464, x2)

inst_75:
// rs2_w1_val == 8, rs1_w1_val == 2097152
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000ffffffef;  op2val:0x000008ffffdfff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x200000ffffffef, 0x000008ffffdfff, x1, 472, x2)

inst_76:
// rs2_w1_val == 4, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000020;  op2val:0x000004ffffdfff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000020, 0x000004ffffdfff, x1, 480, x2)

inst_77:
// rs2_w1_val == 2, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffbffff;  op2val:0x00000200000003
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x40000000fffbffff, 0x00000200000003, x1, 488, x2)

inst_78:
// rs2_w1_val == 1, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000100;  op2val:0x00000100000002
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x20000000000100, 0x00000100000002, x1, 496, x2)

inst_79:
// rs2_w1_val == 0, rs1_w1_val == -65
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000800;  op2val:0x000000fffffffc
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000800, 0x000000fffffffc, x1, 504, x2)

inst_80:
// rs2_w1_val == -1, rs1_w0_val == -268435457
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffefffffff;  op2val:0xffffffff00000010
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfbffffffefffffff, 0xffffffff00000010, x1, 512, x2)

inst_81:
// rs2_w0_val == 1431655765, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fffffffe;  op2val:0x00000955555555
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff6fffffffe, 0x00000955555555, x1, 520, x2)

inst_82:
// rs2_w0_val == 2147483647, rs1_w1_val == 8192
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffffbff;  op2val:0xbfffffff7fffffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x002000fffffbff, 0xbfffffff7fffffff, x1, 528, x2)

inst_83:
// rs2_w0_val == -1073741825, rs1_w0_val == -1431655766
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009aaaaaaaa;  op2val:0xfffffff9bfffffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000009aaaaaaaa, 0xfffffff9bfffffff, x1, 536, x2)

inst_84:
// rs2_w0_val == -536870913, rs1_w1_val == -8193
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffffffffa;  op2val:0x080000dfffffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffdffffffffffa, 0x080000dfffffff, x1, 544, x2)

inst_85:
// rs2_w0_val == -268435457, rs1_w0_val == -16777217
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003feffffff;  op2val:0xffffffffefffffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000003feffffff, 0xffffffffefffffff, x1, 552, x2)

inst_86:
// rs2_w0_val == -262145, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006ffffffbf;  op2val:0x000040fffbffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000006ffffffbf, 0x000040fffbffff, x1, 560, x2)

inst_87:
// rs2_w0_val == 65536, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffffff7;  op2val:0xffffefff00010000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000000fffffff7, 0xffffefff00010000, x1, 568, x2)

inst_88:
// rs2_w0_val == 16384, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005fff7ffff;  op2val:0xaaaaaaaa00004000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000005fff7ffff, 0xaaaaaaaa00004000, x1, 576, x2)

inst_89:
// rs2_w0_val == 8192, rs1_w1_val == -536870913
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff55555555;  op2val:0x20000000002000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xdfffffff55555555, 0x20000000002000, x1, 584, x2)

inst_90:
// rs2_w0_val == 4096, rs1_w1_val == 65536, rs1_w0_val == -134217729
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000f7ffffff;  op2val:0x2000000000001000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x010000f7ffffff, 0x2000000000001000, x1, 592, x2)

inst_91:
// rs2_w0_val == 1024, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00040000;  op2val:0x00020000000400
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00040000, 0x00020000000400, x1, 600, x2)

inst_92:
// rs2_w0_val == 32, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000009;  op2val:0x00100000000020
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000009, 0x00100000000020, x1, 608, x2)

inst_93:
// rs2_w0_val == 1, rs1_w1_val == -33554433
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff04000000;  op2val:0x04000000000001
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfdffffff04000000, 0x04000000000001, x1, 616, x2)

inst_94:
// rs2_w0_val == 0, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffffff9;  op2val:0x00000900000000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000000fffffff9, 0x00000900000000, x1, 624, x2)

inst_95:
// rs2_w0_val == -1, rs1_w1_val == 8
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000400;  op2val:0x002000ffffffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000800000400, 0x002000ffffffff, x1, 632, x2)

inst_96:
// rs1_w1_val == 1431655765, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000003;  op2val:0xf7ffffff00000000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x5555555500000003, 0xf7ffffff00000000, x1, 640, x2)

inst_97:
// rs1_w1_val == 2147483647, rs1_w0_val == -67108865
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffbffffff;  op2val:0x800000ffbfffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x7ffffffffbffffff, 0x800000ffbfffff, x1, 648, x2)

inst_98:
// rs1_w1_val == -1073741825, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff40000000;  op2val:0xffffff7ffffbffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xbfffffff40000000, 0xffffff7ffffbffff, x1, 656, x2)

inst_99:
// rs1_w1_val == -268435457, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff02000000;  op2val:0xffbfffffdfffffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xefffffff02000000, 0xffbfffffdfffffff, x1, 664, x2)

inst_100:
// rs1_w1_val == -8388609, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff40000000;  op2val:0x2000000000000008
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xff7fffff40000000, 0x2000000000000008, x1, 672, x2)

inst_101:
// rs1_w1_val == -4194305, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00002000;  op2val:0xffffefff00000003
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00002000, 0xffffefff00000003, x1, 680, x2)

inst_102:
// rs1_w1_val == -1048577, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00200000;  op2val:0xbffffffffeffffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xffefffff00200000, 0xbffffffffeffffff, x1, 688, x2)

inst_103:
// rs1_w1_val == -131073, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffffff;  op2val:0xffffbfffffffbfff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffffff, 0xffffbfffffffbfff, x1, 696, x2)

inst_104:
// rs1_w1_val == -257, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000040;  op2val:0xfdffffff80000000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000040, 0xfdffffff80000000, x1, 704, x2)

inst_105:
// rs1_w1_val == -2147483648, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000080000;  op2val:0x08000000000008
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x8000000000080000, 0x08000000000008, x1, 712, x2)

inst_106:
// rs1_w1_val == 536870912, rs2_w0_val == 8388608
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000100;  op2val:0x8000000000800000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x2000000000000100, 0x8000000000800000, x1, 720, x2)

inst_107:
// rs1_w1_val == 134217728, rs1_w0_val == 536870912
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000020000000;  op2val:0xff7fffff00000020
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x800000020000000, 0xff7fffff00000020, x1, 728, x2)

inst_108:
// rs1_w1_val == 33554432, rs2_w0_val == -129
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000007fffffff;  op2val:0x80000000ffffff7f
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x20000007fffffff, 0x80000000ffffff7f, x1, 736, x2)

inst_109:
// rs1_w1_val == 16777216, rs2_w0_val == -3
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000009;  op2val:0x000005fffffffd
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x100000000000009, 0x000005fffffffd, x1, 744, x2)

inst_110:
// rs1_w1_val == 1048576, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000001000000;  op2val:0x1000000ff7fffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x10000001000000, 0x1000000ff7fffff, x1, 752, x2)

inst_111:
// rs1_w1_val == 32768, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000080;  op2val:0x000008fffffff7
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x00800000000080, 0x000008fffffff7, x1, 760, x2)

inst_112:
// rs1_w1_val == 512, rs1_w0_val == -2049
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200fffff7ff;  op2val:0x7fffffffffdfffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000200fffff7ff, 0x7fffffffffdfffff, x1, 768, x2)

inst_113:
// rs1_w1_val == 128, rs1_w0_val == -32769
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080ffff7fff;  op2val:0x000006efffffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000080ffff7fff, 0x000006efffffff, x1, 776, x2)

inst_114:
// rs1_w1_val == 32, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fbffffff;  op2val:0x00400000040000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000020fbffffff, 0x00400000040000, x1, 784, x2)

inst_115:
// rs1_w1_val == 16, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010fffffffc;  op2val:0xfffffffd80000000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000010fffffffc, 0xfffffffd80000000, x1, 792, x2)

inst_116:
// rs1_w1_val == -1, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff01000000;  op2val:0xffffff7f00002000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffffff01000000, 0xffffff7f00002000, x1, 800, x2)

inst_117:
// rs1_w0_val == 268435456, rs2_w0_val == 268435456
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001010000000;  op2val:0xfffffffc10000000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x00001010000000, 0xfffffffc10000000, x1, 808, x2)

inst_118:
// rs2_w0_val == 33554432, rs1_w0_val == -4194305
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000ffbfffff;  op2val:0xfffffffb02000000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x4000000ffbfffff, 0xfffffffb02000000, x1, 816, x2)

inst_119:
// rs2_w0_val == -4097, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000005;  op2val:0xfffffff8ffffefff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000400000005, 0xfffffff8ffffefff, x1, 824, x2)

inst_120:
// rs1_w0_val == -1048577, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000ffefffff;  op2val:0xdffffffffdffffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x10000000ffefffff, 0xdffffffffdffffff, x1, 832, x2)

inst_121:
// rs2_w0_val == -1025, rs1_w0_val == -513
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffffdff;  op2val:0xfffffffbfffffbff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xeffffffffffffdff, 0xfffffffbfffffbff, x1, 840, x2)

inst_122:
// rs1_w0_val == -65537, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffeffff;  op2val:0x000009fbffffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x1000000fffeffff, 0x000009fbffffff, x1, 848, x2)

inst_123:
// rs2_w0_val == -33, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007fffffffc;  op2val:0x000005ffffffdf
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000007fffffffc, 0x000005ffffffdf, x1, 856, x2)

inst_124:
// rs1_w0_val == -4097, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffffefff;  op2val:0x000040fffff7ff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffeffffffefff, 0x000040fffff7ff, x1, 864, x2)

inst_125:
// rs2_w0_val == -5, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000005;  op2val:0x080000fffffffb
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xffffffff00000005, 0x080000fffffffb, x1, 872, x2)

inst_126:
// rs1_w0_val == -257, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafffffeff;  op2val:0x00010000000003
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffafffffeff, 0x00010000000003, x1, 880, x2)

inst_127:
// rs1_w0_val == -129, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x002000ffffff7f;  op2val:0xbfffffff00000009
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x002000ffffff7f, 0xbfffffff00000009, x1, 888, x2)

inst_128:
// rs2_w0_val == 1073741824, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000100;  op2val:0xfffffff740000000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x1000000000000100, 0xfffffff740000000, x1, 896, x2)

inst_129:
// rs1_w0_val == -33, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffffffdf;  op2val:0x000800fffffffa
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x004000ffffffdf, 0x000800fffffffa, x1, 904, x2)

inst_130:
// rs1_w0_val == -3, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffffffd;  op2val:0x200000fffffbff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffffffd, 0x200000fffffbff, x1, 912, x2)

inst_131:
// rs2_w0_val == 2097152, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000006;  op2val:0xffffffff00200000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff700000006, 0xffffffff00200000, x1, 920, x2)

inst_132:
// rs2_w0_val == 1048576, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00100000;  op2val:0xfffffff700100000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00100000, 0xfffffff700100000, x1, 928, x2)

inst_133:
// rs1_w0_val == 134217728, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff808000000;  op2val:0x00000400400000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff808000000, 0x00000400400000, x1, 936, x2)

inst_134:
// rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w1_val == -134217729, rs2_w0_val == -65, rs1_w0_val == -9
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffffff7;  op2val:0xfffffff8ffffffbf
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffffff7, 0xfffffff8ffffffbf, x1, 944, x2)

inst_135:
// rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val == -33554433, rs2_w0_val == -16777217, rs1_w1_val == 1
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fdffffff;  op2val:0xfffffff9feffffff
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000001fdffffff, 0xfffffff9feffffff, x1, 952, x2)

inst_136:
// rs2_w1_val == -1073741825, rs2_w0_val == 64, rs1_w1_val == 2
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffffffe;  op2val:0xbfffffff00000040
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x000002fffffffe, 0xbfffffff00000040, x1, 960, x2)

inst_137:
// rs2_w1_val == -65537, rs1_w0_val == 16384, rs1_w1_val == -3
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00004000;  op2val:0xfffeffff00000010
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00004000, 0xfffeffff00000010, x1, 968, x2)

inst_138:
// rs2_w1_val == -257, 
// opcode: rcrsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000680000000;  op2val:0xfffffeff00080000
TEST_RR_OP(rcrsa32, x31, x30, x29, 0x0000000000000000, 0x00000680000000, 0xfffffeff00080000, x1, 976, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 123*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
