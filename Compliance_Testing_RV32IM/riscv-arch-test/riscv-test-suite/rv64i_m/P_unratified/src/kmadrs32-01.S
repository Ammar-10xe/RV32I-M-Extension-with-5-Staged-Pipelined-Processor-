
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmadrs32 instruction of the RISC-V RV64PZicsr extension for the kmadrs32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmadrs32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 == rd != rs2, rs1==x16, rs2==x24, rd==x16, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs2_w1_val == -8193, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w1_val == 1, rs2_w0_val == 524288
// opcode: kmadrs32 ; op1:x16; op2:x24; dest:x16; op1val:0x00000180000000;  op2val:0xffffdfff00080000
TEST_PKRR_OP(kmadrs32, x16, x16, x24, 0x0000000000000000, 0x00000180000000, 0xffffdfff00080000, x16, x4, 0, x5)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x25, rs2==x19, rd==x26, rs1_w1_val == rs2_w1_val, rs1_w1_val == 262144, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w0_val == -134217729, rs1_w0_val == 1, rs2_w1_val == 262144
// opcode: kmadrs32 ; op1:x25; op2:x19; dest:x26; op1val:0x04000000000001;  op2val:0x040000f7ffffff
TEST_PKRR_OP(kmadrs32, x26, x25, x19, 0x0000000000000000, 0x04000000000001, 0x040000f7ffffff, x25, x4, 16, x5)

inst_2:
// rs1 == rs2 != rd, rs1==x6, rs2==x6, rd==x3, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w0_val == 2, rs1_w1_val == -5, rs1_w0_val == -8388609, rs2_w1_val == 4
// opcode: kmadrs32 ; op1:x6; op2:x6; dest:x3; op1val:0xfffffffbff7fffff;  op2val:0x00000400000002
TEST_PKRR_OP(kmadrs32, x3, x6, x6, 0x0000000000000000, 0xfffffffbff7fffff, 0x00000400000002, x6, x4, 32, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x12, rs2==x12, rd==x12, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w1_val == -33554433
// opcode: kmadrs32 ; op1:x12; op2:x12; dest:x12; op1val:0xfffffff8fffffffc;  op2val:0xfdfffffff7ffffff
TEST_PKRR_OP(kmadrs32, x12, x12, x12, 0x0000000000000000, 0xfffffff8fffffffc, 0xfdfffffff7ffffff, x12, x4, 48, x5)

inst_4:
// rs2 == rd != rs1, rs1==x17, rs2==x8, rd==x8, rs1_w0_val == rs2_w0_val, rs1_w1_val == -262145, rs2_w0_val == 4096, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 4096, rs2_w1_val == 1
// opcode: kmadrs32 ; op1:x17; op2:x8; dest:x8; op1val:0xfffbffff00001000;  op2val:0x00000100001000
TEST_PKRR_OP(kmadrs32, x8, x17, x8, 0x0000000000000000, 0xfffbffff00001000, 0x00000100001000, x17, x4, 64, x5)

inst_5:
// rs1==x11, rs2==x17, rd==x30, rs2_w1_val == -1431655766, rs2_w0_val == -3, rs1_w1_val == -1048577, rs1_w0_val == -2
// opcode: kmadrs32 ; op1:x11; op2:x17; dest:x30; op1val:0xffeffffffffffffe;  op2val:0xaaaaaaaafffffffd
TEST_PKRR_OP(kmadrs32, x30, x11, x17, 0x0000000000000000, 0xffeffffffffffffe, 0xaaaaaaaafffffffd, x11, x4, 80, x5)

inst_6:
// rs1==x14, rs2==x28, rd==x18, rs2_w1_val == 1431655765, rs1_w0_val == 64
// opcode: kmadrs32 ; op1:x14; op2:x28; dest:x18; op1val:0x00000500000040;  op2val:0x55555555fffffff9
TEST_PKRR_OP(kmadrs32, x18, x14, x28, 0x0000000000000000, 0x00000500000040, 0x55555555fffffff9, x14, x4, 96, x5)

inst_7:
// rs1==x15, rs2==x2, rd==x11, rs2_w1_val == 2147483647, rs1_w1_val == -4097, rs1_w0_val == -134217729
// opcode: kmadrs32 ; op1:x15; op2:x2; dest:x11; op1val:0xffffeffff7ffffff;  op2val:0x7fffffff00000002
TEST_PKRR_OP(kmadrs32, x11, x15, x2, 0x0000000000000000, 0xffffeffff7ffffff, 0x7fffffff00000002, x15, x4, 112, x5)

inst_8:
// rs1==x13, rs2==x22, rd==x7, rs2_w1_val == -1073741825, rs1_w0_val == 8192
// opcode: kmadrs32 ; op1:x13; op2:x22; dest:x7; op1val:0xc000000000002000;  op2val:0xbffffffffffffffa
TEST_PKRR_OP(kmadrs32, x7, x13, x22, 0x0000000000000000, 0xc000000000002000, 0xbffffffffffffffa, x13, x4, 128, x5)

inst_9:
// rs1==x31, rs2==x21, rd==x17, rs2_w1_val == -536870913, rs2_w0_val == 32768, rs1_w0_val == -65, rs1_w1_val == -2049
// opcode: kmadrs32 ; op1:x31; op2:x21; dest:x17; op1val:0xfffff7ffffffffbf;  op2val:0xdfffffff00008000
TEST_PKRR_OP(kmadrs32, x17, x31, x21, 0x0000000000000000, 0xfffff7ffffffffbf, 0xdfffffff00008000, x31, x4, 144, x5)

inst_10:
// rs1==x23, rs2==x27, rd==x2, rs2_w1_val == -268435457, rs1_w1_val == 2097152, rs2_w0_val == -257, rs1_w0_val == 1024
// opcode: kmadrs32 ; op1:x23; op2:x27; dest:x2; op1val:0x20000000000400;  op2val:0xeffffffffffffeff
TEST_PKRR_OP(kmadrs32, x2, x23, x27, 0x0000000000000000, 0x20000000000400, 0xeffffffffffffeff, x23, x4, 160, x5)

inst_11:
// rs1==x18, rs2==x20, rd==x1, rs2_w1_val == -134217729, rs2_w0_val == -2147483648
// opcode: kmadrs32 ; op1:x18; op2:x20; dest:x1; op1val:0xfffffff880000000;  op2val:0xf7ffffff80000000
TEST_PKRR_OP(kmadrs32, x1, x18, x20, 0x0000000000000000, 0xfffffff880000000, 0xf7ffffff80000000, x18, x4, 176, x5)

inst_12:
// rs1==x26, rs2==x31, rd==x9, rs2_w1_val == -67108865, rs1_w0_val == -32769
// opcode: kmadrs32 ; op1:x26; op2:x31; dest:x9; op1val:0x200000ffff7fff;  op2val:0xfbffffff00001000
TEST_PKRR_OP(kmadrs32, x9, x26, x31, 0x0000000000000000, 0x200000ffff7fff, 0xfbffffff00001000, x26, x4, 192, x6)
RVTEST_SIGBASE(x12,signature_x12_0)

inst_13:
// rs1==x28, rs2==x13, rd==x14, rs2_w1_val == -16777217, rs1_w1_val == -16385, rs1_w0_val == -3, rs2_w0_val == -1
// opcode: kmadrs32 ; op1:x28; op2:x13; dest:x14; op1val:0xffffbffffffffffd;  op2val:0xfeffffffffffffff
TEST_PKRR_OP(kmadrs32, x14, x28, x13, 0x0000000000000000, 0xffffbffffffffffd, 0xfeffffffffffffff, x28, x12, 0, x6)

inst_14:
// rs1==x4, rs2==x5, rd==x23, rs2_w1_val == -8388609, rs1_w0_val == 8388608, rs2_w0_val == 16384, rs1_w1_val == -3
// opcode: kmadrs32 ; op1:x4; op2:x5; dest:x23; op1val:0xfffffffd00800000;  op2val:0xff7fffff00004000
TEST_PKRR_OP(kmadrs32, x23, x4, x5, 0x0000000000000000, 0xfffffffd00800000, 0xff7fffff00004000, x4, x12, 16, x6)

inst_15:
// rs1==x20, rs2==x23, rd==x22, rs2_w1_val == -4194305, rs1_w1_val == -8193, rs2_w0_val == -268435457, rs1_w0_val == 4
// opcode: kmadrs32 ; op1:x20; op2:x23; dest:x22; op1val:0xffffdfff00000004;  op2val:0xffbfffffefffffff
TEST_PKRR_OP(kmadrs32, x22, x20, x23, 0x0000000000000000, 0xffffdfff00000004, 0xffbfffffefffffff, x20, x12, 32, x6)

inst_16:
// rs1==x2, rs2==x11, rd==x10, rs2_w1_val == -2097153, rs2_w0_val == -32769, rs1_w0_val == 134217728, rs1_w1_val == -8388609
// opcode: kmadrs32 ; op1:x2; op2:x11; dest:x10; op1val:0xff7fffff08000000;  op2val:0xffdfffffffff7fff
TEST_PKRR_OP(kmadrs32, x10, x2, x11, 0x0000000000000000, 0xff7fffff08000000, 0xffdfffffffff7fff, x2, x12, 48, x6)

inst_17:
// rs1==x21, rs2==x16, rd==x29, rs2_w1_val == -1048577, rs2_w0_val == -67108865, rs1_w0_val == 1048576, rs1_w1_val == -4194305
// opcode: kmadrs32 ; op1:x21; op2:x16; dest:x29; op1val:0xffbfffff00100000;  op2val:0xffeffffffbffffff
TEST_PKRR_OP(kmadrs32, x29, x21, x16, 0x0000000000000000, 0xffbfffff00100000, 0xffeffffffbffffff, x21, x12, 64, x6)

inst_18:
// rs1==x30, rs2==x15, rd==x5, rs2_w1_val == -524289, rs2_w0_val == -8388609, rs1_w1_val == -16777217, rs1_w0_val == -2049
// opcode: kmadrs32 ; op1:x30; op2:x15; dest:x5; op1val:0xfefffffffffff7ff;  op2val:0xfff7ffffff7fffff
TEST_PKRR_OP(kmadrs32, x5, x30, x15, 0x0000000000000000, 0xfefffffffffff7ff, 0xfff7ffffff7fffff, x30, x12, 80, x6)

inst_19:
// rs1==x1, rs2==x10, rd==x25, rs2_w1_val == -262145, rs2_w0_val == 67108864
// opcode: kmadrs32 ; op1:x1; op2:x10; dest:x25; op1val:0xfffff7ff00800000;  op2val:0xfffbffff04000000
TEST_PKRR_OP(kmadrs32, x25, x1, x10, 0x0000000000000000, 0xfffff7ff00800000, 0xfffbffff04000000, x1, x12, 96, x6)

inst_20:
// rs1==x3, rs2==x1, rd==x4, rs2_w1_val == -131073, rs2_w0_val == -65537, rs1_w1_val == -9, rs1_w0_val == 16
// opcode: kmadrs32 ; op1:x3; op2:x1; dest:x4; op1val:0xfffffff700000010;  op2val:0xfffdfffffffeffff
TEST_PKRR_OP(kmadrs32, x4, x3, x1, 0x0000000000000000, 0xfffffff700000010, 0xfffdfffffffeffff, x3, x12, 112, x6)

inst_21:
// rs1==x7, rs2==x30, rd==x0, rs2_w1_val == -65537, rs1_w1_val == -524289, rs1_w0_val == -33, rs2_w0_val == 1048576
// opcode: kmadrs32 ; op1:x7; op2:x30; dest:x0; op1val:0xfff7ffffffffffdf;  op2val:0xfffeffff00100000
TEST_PKRR_OP(kmadrs32, x0, x7, x30, 0x0000000000000000, 0xfff7ffffffffffdf, 0xfffeffff00100000, x7, x12, 128, x6)

inst_22:
// rs1==x8, rs2==x9, rd==x21, rs2_w1_val == -32769, rs1_w1_val == 268435456
// opcode: kmadrs32 ; op1:x8; op2:x9; dest:x21; op1val:0x10000000fffffff9;  op2val:0xffff7fff00000003
TEST_PKRR_OP(kmadrs32, x21, x8, x9, 0x0000000000000000, 0x10000000fffffff9, 0xffff7fff00000003, x8, x12, 144, x6)

inst_23:
// rs1==x9, rs2==x7, rd==x28, rs2_w1_val == -16385, rs2_w0_val == 2048
// opcode: kmadrs32 ; op1:x9; op2:x7; dest:x28; op1val:0xfffffff800000006;  op2val:0xffffbfff00000800
TEST_PKRR_OP(kmadrs32, x28, x9, x7, 0x0000000000000000, 0xfffffff800000006, 0xffffbfff00000800, x9, x12, 160, x6)

inst_24:
// rs1==x24, rs2==x0, rd==x13, rs2_w1_val == -4097, 
// opcode: kmadrs32 ; op1:x24; op2:x0; dest:x13; op1val:0xfffffffbfffffffe;  op2val:0xffffefff00008000
TEST_PKRR_OP(kmadrs32, x13, x24, x0, 0x0000000000000000, 0xfffffffbfffffffe, 0xffffefff00008000, x24, x12, 176, x6)

inst_25:
// rs1==x29, rs2==x3, rd==x19, rs2_w1_val == -2049, rs2_w0_val == -1048577
// opcode: kmadrs32 ; op1:x29; op2:x3; dest:x19; op1val:0x00000700001000;  op2val:0xfffff7ffffefffff
TEST_PKRR_OP(kmadrs32, x19, x29, x3, 0x0000000000000000, 0x00000700001000, 0xfffff7ffffefffff, x29, x12, 192, x6)

inst_26:
// rs1==x27, rs2==x18, rd==x24, rs2_w1_val == -1025, 
// opcode: kmadrs32 ; op1:x27; op2:x18; dest:x24; op1val:0x000003c0000000;  op2val:0xfffffbfffffffffa
TEST_PKRR_OP(kmadrs32, x24, x27, x18, 0x0000000000000000, 0x000003c0000000, 0xfffffbfffffffffa, x27, x12, 208, x2)

inst_27:
// rs1==x5, rs2==x14, rd==x27, rs2_w1_val == -513, rs2_w0_val == 262144, rs1_w0_val == 256
// opcode: kmadrs32 ; op1:x5; op2:x14; dest:x27; op1val:0xfffffffa00000100;  op2val:0xfffffdff00040000
TEST_PKRR_OP(kmadrs32, x27, x5, x14, 0x0000000000000000, 0xfffffffa00000100, 0xfffffdff00040000, x5, x12, 224, x2)

inst_28:
// rs1==x22, rs2==x26, rd==x6, rs2_w1_val == -257, rs1_w0_val == -8193
// opcode: kmadrs32 ; op1:x22; op2:x26; dest:x6; op1val:0xfffffffaffffdfff;  op2val:0xfffffefffffffff9
TEST_PKRR_OP(kmadrs32, x6, x22, x26, 0x0000000000000000, 0xfffffffaffffdfff, 0xfffffefffffffff9, x22, x12, 240, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x19, rs2==x4, rd==x15, rs2_w1_val == -129, rs2_w0_val == -262145, rs1_w1_val == 1048576, rs1_w0_val == -16777217
// opcode: kmadrs32 ; op1:x19; op2:x4; dest:x15; op1val:0x100000feffffff;  op2val:0xffffff7ffffbffff
TEST_PKRR_OP(kmadrs32, x15, x19, x4, 0x0000000000000000, 0x100000feffffff, 0xffffff7ffffbffff, x19, x1, 0, x2)

inst_30:
// rs1==x10, rs2==x25, rd==x20, rs2_w1_val == -65, rs1_w0_val == 512, rs1_w1_val == 536870912
// opcode: kmadrs32 ; op1:x10; op2:x25; dest:x20; op1val:0x2000000000000200;  op2val:0xffffffbfffefffff
TEST_PKRR_OP(kmadrs32, x20, x10, x25, 0x0000000000000000, 0x2000000000000200, 0xffffffbfffefffff, x10, x1, 16, x2)

inst_31:
// rs1==x0, rs2==x29, rd==x31, rs2_w1_val == -33, rs1_w0_val == -1431655766
// opcode: kmadrs32 ; op1:x0; op2:x29; dest:x31; op1val:0xfffffff9aaaaaaaa;  op2val:0xffffffdf00040000
TEST_PKRR_OP(kmadrs32, x31, x0, x29, 0x0000000000000000, 0xfffffff9aaaaaaaa, 0xffffffdf00040000, x0, x1, 32, x2)

inst_32:
// rs2_w1_val == -17, rs1_w0_val == 268435456, rs2_w0_val == 32
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff10000000;  op2val:0xffffffef00000020
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x3fffffff10000000, 0xffffffef00000020, x30, x1, 48, x2)

inst_33:
// rs2_w1_val == -9, rs2_w0_val == -33, rs1_w0_val == 524288
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00080000;  op2val:0xfffffff7ffffffdf
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00080000, 0xfffffff7ffffffdf, x30, x1, 64, x2)

inst_34:
// rs2_w1_val == -5, rs1_w0_val == -67108865, rs1_w1_val == -2097153
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffbffffff;  op2val:0xfffffffb00040000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffdffffffbffffff, 0xfffffffb00040000, x30, x1, 80, x2)

inst_35:
// rs2_w1_val == -3, rs1_w1_val == 512
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000080000;  op2val:0xfffffffdfffffff6
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x00020000080000, 0xfffffffdfffffff6, x30, x1, 96, x2)

inst_36:
// rs2_w1_val == -2, rs2_w0_val == 1431655765, rs1_w1_val == 16777216, rs1_w0_val == -4097
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000ffffefff;  op2val:0xfffffffe55555555
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x1000000ffffefff, 0xfffffffe55555555, x30, x1, 112, x2)

inst_37:
// rs2_w1_val == -2147483648, rs2_w0_val == 2147483647, rs1_w0_val == -4194305, rs1_w1_val == 8388608
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffbfffff;  op2val:0x800000007fffffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x800000ffbfffff, 0x800000007fffffff, x30, x1, 128, x2)

inst_38:
// rs2_w1_val == 1073741824, rs2_w0_val == -513
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffffd;  op2val:0x40000000fffffdff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffffd, 0x40000000fffffdff, x30, x1, 144, x2)

inst_39:
// rs2_w1_val == 536870912, rs2_w0_val == 536870912
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000300002000;  op2val:0x2000000020000000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x00000300002000, 0x2000000020000000, x30, x1, 160, x2)

inst_40:
// rs2_w1_val == 268435456, rs1_w0_val == 536870912, rs2_w0_val == 1073741824, rs1_w1_val == 33554432
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000020000000;  op2val:0x1000000040000000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x200000020000000, 0x1000000040000000, x30, x1, 176, x2)

inst_41:
// rs2_w1_val == 134217728, rs1_w1_val == -513
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000009;  op2val:0x800000000004000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000009, 0x800000000004000, x30, x1, 192, x2)

inst_42:
// rs2_w1_val == 67108864, rs1_w0_val == -131073, rs1_w1_val == 524288
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffdffff;  op2val:0x4000000fffeffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x080000fffdffff, 0x4000000fffeffff, x30, x1, 208, x2)

inst_43:
// rs2_w1_val == 33554432, rs2_w0_val == 1, rs1_w0_val == 2097152
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00200000;  op2val:0x200000000000001
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00200000, 0x200000000000001, x30, x1, 224, x2)

inst_44:
// rs2_w1_val == 16777216, rs1_w0_val == 16777216, rs1_w1_val == -17
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef01000000;  op2val:0x1000000ffffffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffffffef01000000, 0x1000000ffffffff, x30, x1, 240, x2)

inst_45:
// rs2_w1_val == 8388608, rs2_w0_val == 16
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000c0000000;  op2val:0x80000000000010
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x2000000c0000000, 0x80000000000010, x30, x1, 256, x2)

inst_46:
// rs2_w1_val == 4194304, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000001;  op2val:0x400000f7ffffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffffff800000001, 0x400000f7ffffff, x30, x1, 272, x2)

inst_47:
// rs2_w1_val == 2097152, rs1_w1_val == 1024, rs2_w0_val == -1073741825, rs1_w0_val == 32
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000020;  op2val:0x200000bfffffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x00040000000020, 0x200000bfffffff, x30, x1, 288, x2)

inst_48:
// rs2_w1_val == 1048576, rs2_w0_val == 33554432
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500000200;  op2val:0x10000002000000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x00000500000200, 0x10000002000000, x30, x1, 304, x2)

inst_49:
// rs2_w1_val == 524288, rs1_w0_val == 4194304, rs2_w0_val == -129
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00400000;  op2val:0x080000ffffff7f
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00400000, 0x080000ffffff7f, x30, x1, 320, x2)

inst_50:
// rs2_w1_val == 131072, rs1_w0_val == -1073741825
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7bfffffff;  op2val:0x020000fffffdff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffffff7bfffffff, 0x020000fffffdff, x30, x1, 336, x2)

inst_51:
// rs1_w0_val == 33554432, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff02000000;  op2val:0xc000000000000005
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffffdfff02000000, 0xc000000000000005, x30, x1, 352, x2)

inst_52:
// rs1_w0_val == 262144, rs2_w0_val == -33554433, rs1_w1_val == -33554433
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00040000;  op2val:0x3ffffffffdffffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00040000, 0x3ffffffffdffffff, x30, x1, 368, x2)

inst_53:
// rs1_w0_val == 131072, rs2_w1_val == 8, rs1_w1_val == 1431655765
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500020000;  op2val:0x0000083fffffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x5555555500020000, 0x0000083fffffff, x30, x1, 384, x2)

inst_54:
// rs1_w0_val == 65536, rs2_w0_val == -65
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500010000;  op2val:0x7fffffffffffffbf
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x5555555500010000, 0x7fffffffffffffbf, x30, x1, 400, x2)

inst_55:
// rs1_w0_val == 32768, rs1_w1_val == 16, rs2_w0_val == 0
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000008000;  op2val:0x200000000000000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x00001000008000, 0x200000000000000, x30, x1, 416, x2)

inst_56:
// rs1_w0_val == 16384, rs2_w1_val == 4096, rs2_w0_val == 134217728
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000004000;  op2val:0x00100008000000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x1000000000004000, 0x00100008000000, x30, x1, 432, x2)

inst_57:
// rs1_w0_val == 2048, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000800;  op2val:0x200000000000010
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffffff800000800, 0x200000000000010, x30, x1, 448, x2)

inst_58:
// rs1_w0_val == 128, rs1_w1_val == 16384, rs2_w0_val == -524289
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000000080;  op2val:0xfbfffffffff7ffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x00400000000080, 0xfbfffffffff7ffff, x30, x1, 464, x2)

inst_59:
// rs1_w0_val == 8, rs1_w1_val == 8192, rs2_w1_val == 512
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000008;  op2val:0x000200ffffffdf
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x00200000000008, 0x000200ffffffdf, x30, x1, 480, x2)

inst_60:
// rs1_w0_val == 2, rs1_w1_val == -65, rs2_w0_val == 64
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000002;  op2val:0xfffffdff00000040
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000002, 0xfffffdff00000040, x30, x1, 496, x2)

inst_61:
// rs1_w0_val == 0, rs1_w1_val == -1431655766
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000000;  op2val:0xffeffffffff7ffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000000, 0xffeffffffff7ffff, x30, x1, 512, x2)

inst_62:
// rs1_w0_val == -1, rs2_w0_val == -8193
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003ffffffff;  op2val:0xfeffffffffffdfff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x000003ffffffff, 0xfeffffffffffdfff, x30, x1, 528, x2)

inst_63:
// rs2_w1_val == 65536, rs1_w0_val == -2097153, rs2_w0_val == -2097153
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000ffdfffff;  op2val:0x010000ffdfffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x2000000ffdfffff, 0x010000ffdfffff, x30, x1, 544, x2)

inst_64:
// rs2_w1_val == 32768, rs1_w1_val == 8, rs2_w0_val == 2097152
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000810000000;  op2val:0x00800000200000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x00000810000000, 0x00800000200000, x30, x1, 560, x2)

inst_65:
// rs2_w1_val == 16384, rs2_w0_val == -4097
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffffff9;  op2val:0x004000ffffefff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffffffbffffffff9, 0x004000ffffefff, x30, x1, 576, x2)

inst_66:
// rs2_w1_val == 8192, rs1_w1_val == -32769
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffbfffff;  op2val:0x002000ffdfffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffff7fffffbfffff, 0x002000ffdfffff, x30, x1, 592, x2)

inst_67:
// rs2_w1_val == 2048, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000400;  op2val:0x00080000000005
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000400, 0x00080000000005, x30, x1, 608, x2)

inst_68:
// rs2_w1_val == 1024, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffffbf;  op2val:0x00040000000040
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffffbf, 0x00040000000040, x30, x1, 624, x2)

inst_69:
// rs2_w1_val == 256, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00002000;  op2val:0x00010000040000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00002000, 0x00010000040000, x30, x1, 640, x2)

inst_70:
// rs2_w1_val == 128, rs2_w0_val == 8388608
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00000400;  op2val:0x00008000800000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffc00000400, 0x00008000800000, x30, x1, 656, x2)

inst_71:
// rs2_w1_val == 64, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffc0000000;  op2val:0x00004000000001
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffefffffc0000000, 0x00004000000001, x30, x1, 672, x2)

inst_72:
// rs2_w1_val == 32, rs1_w1_val == -2147483648
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffefff;  op2val:0x000020fffffdff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x80000000ffffefff, 0x000020fffffdff, x30, x1, 688, x2)

inst_73:
// rs2_w1_val == 16, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffff8;  op2val:0x00001000000003
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x1000000fffffff8, 0x00001000000003, x30, x1, 704, x2)

inst_74:
// rs2_w1_val == 2, rs1_w1_val == -33, rs2_w0_val == -9
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00020000;  op2val:0x000002fffffff7
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00020000, 0x000002fffffff7, x30, x1, 720, x2)

inst_75:
// rs2_w1_val == 0, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000009;  op2val:0x00000000008000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x04000000000009, 0x00000000008000, x30, x1, 736, x2)

inst_76:
// rs2_w1_val == -1, rs1_w1_val == 4194304, rs2_w0_val == 65536
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000008000000;  op2val:0xffffffff00010000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x40000008000000, 0xffffffff00010000, x30, x1, 752, x2)

inst_77:
// rs2_w0_val == -1431655766, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000001;  op2val:0xfffffffcaaaaaaaa
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000001, 0xfffffffcaaaaaaaa, x30, x1, 768, x2)

inst_78:
// rs2_w0_val == -536870913, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00008000;  op2val:0xffffffdfdfffffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00008000, 0xffffffdfdfffffff, x30, x1, 784, x2)

inst_79:
// rs2_w0_val == -16777217, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000007;  op2val:0xfffff7fffeffffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000007, 0xfffff7fffeffffff, x30, x1, 800, x2)

inst_80:
// rs2_w0_val == -4194305, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000100;  op2val:0xfffffff6ffbfffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000100, 0xfffffff6ffbfffff, x30, x1, 816, x2)

inst_81:
// rs2_w0_val == -131073, rs1_w0_val == -536870913
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfdfffffff;  op2val:0x40000000fffdffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffffffdfdfffffff, 0x40000000fffdffff, x30, x1, 832, x2)

inst_82:
// rs2_w0_val == -16385, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000400;  op2val:0x000000ffffbfff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffffffef00000400, 0x000000ffffbfff, x30, x1, 848, x2)

inst_83:
// rs2_w0_val == 131072, rs1_w1_val == -257
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000007;  op2val:0x8000000000020000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000007, 0x8000000000020000, x30, x1, 864, x2)

inst_84:
// rs2_w0_val == 8192, rs1_w0_val == -524289
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008fff7ffff;  op2val:0xfdffffff00002000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x000008fff7ffff, 0xfdffffff00002000, x30, x1, 880, x2)

inst_85:
// rs2_w0_val == 1024, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000100;  op2val:0x00000600000400
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x00000700000100, 0x00000600000400, x30, x1, 896, x2)

inst_86:
// rs2_w0_val == 512, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000040;  op2val:0xfffffffb00000200
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000040, 0xfffffffb00000200, x30, x1, 912, x2)

inst_87:
// rs2_w0_val == 256, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00004000;  op2val:0xffffff7f00000100
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00004000, 0xffffff7f00000100, x30, x1, 928, x2)

inst_88:
// rs2_w0_val == 128, rs1_w0_val == -5, rs1_w1_val == -1025
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffffffffb;  op2val:0x01000000000080
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffffffb, 0x01000000000080, x30, x1, 944, x2)

inst_89:
// rs2_w0_val == 8, rs1_w1_val == 134217728
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000dfffffff;  op2val:0xfffffff600000008
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x8000000dfffffff, 0xfffffff600000008, x30, x1, 960, x2)

inst_90:
// rs2_w0_val == 4, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500010000;  op2val:0xc000000000000004
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x00000500010000, 0xc000000000000004, x30, x1, 976, x2)

inst_91:
// rs1_w1_val == 2147483647, rs1_w0_val == 1431655765
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff55555555;  op2val:0xfffffff9fffffff9
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x7fffffff55555555, 0xfffffff9fffffff9, x30, x1, 992, x2)

inst_92:
// rs1_w1_val == -1073741825, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff08000000;  op2val:0x4000000000000040
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xbfffffff08000000, 0x4000000000000040, x30, x1, 1008, x2)

inst_93:
// rs1_w1_val == -536870913, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffff7ffffff;  op2val:0xfbffffff00000200
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xdffffffff7ffffff, 0xfbffffff00000200, x30, x1, 1024, x2)

inst_94:
// rs1_w1_val == -268435457, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000800;  op2val:0x000003ffffff7f
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xefffffff00000800, 0x000003ffffff7f, x30, x1, 1040, x2)

inst_95:
// rs1_w1_val == -134217729, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff08000000;  op2val:0xaaaaaaaa02000000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff08000000, 0xaaaaaaaa02000000, x30, x1, 1056, x2)

inst_96:
// rs1_w1_val == -67108865, rs2_w0_val == 4194304
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffff7ff;  op2val:0xfffffff700400000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffff7ff, 0xfffffff700400000, x30, x1, 1072, x2)

inst_97:
// rs1_w1_val == -131073, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000010;  op2val:0xfffdfffffffffff9
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000010, 0xfffdfffffffffff9, x30, x1, 1088, x2)

inst_98:
// rs1_w1_val == -65537, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000200;  op2val:0xffffff7f40000000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000200, 0xffffff7f40000000, x30, x1, 1104, x2)

inst_99:
// rs1_w1_val == -129, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00100000;  op2val:0xfffffbff00000080
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00100000, 0xfffffbff00000080, x30, x1, 1120, x2)

inst_100:
// rs1_w1_val == -2, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe80000000;  op2val:0x000001fdffffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffe80000000, 0x000001fdffffff, x30, x1, 1136, x2)

inst_101:
// rs1_w1_val == 1073741824, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000005;  op2val:0xfffdffffffffffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x4000000000000005, 0xfffdffffffffffff, x30, x1, 1152, x2)

inst_102:
// rs1_w1_val == 67108864, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000020000;  op2val:0xfffffbff00000040
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x400000000020000, 0xfffffbff00000040, x30, x1, 1168, x2)

inst_103:
// rs1_w1_val == 131072, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000fbffffff;  op2val:0x0000207fffffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x020000fbffffff, 0x0000207fffffff, x30, x1, 1184, x2)

inst_104:
// rs1_w1_val == 65536, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffbfffff;  op2val:0xfffffff7fffffeff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x010000ffbfffff, 0xfffffff7fffffeff, x30, x1, 1200, x2)

inst_105:
// rs1_w1_val == 32768, rs1_w0_val == -129
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffffff7f;  op2val:0xfffffffc00000008
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x008000ffffff7f, 0xfffffffc00000008, x30, x1, 1216, x2)

inst_106:
// rs1_w1_val == 4096, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffff7ff;  op2val:0xfffdffff20000000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x001000fffff7ff, 0xfffdffff20000000, x30, x1, 1232, x2)

inst_107:
// rs1_w1_val == 2048, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffffffc;  op2val:0xfffffffe00000010
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x000800fffffffc, 0xfffffffe00000010, x30, x1, 1248, x2)

inst_108:
// rs1_w1_val == 256, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100fffffffe;  op2val:0xfffffffe20000000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x000100fffffffe, 0xfffffffe20000000, x30, x1, 1264, x2)

inst_109:
// rs1_w1_val == 128, rs1_w0_val == -33554433
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080fdffffff;  op2val:0x2000000ffffff7f
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x000080fdffffff, 0x2000000ffffff7f, x30, x1, 1280, x2)

inst_110:
// rs1_w1_val == 64, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000080000;  op2val:0x00000455555555
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x00004000080000, 0x00000455555555, x30, x1, 1296, x2)

inst_111:
// rs1_w1_val == 32, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020feffffff;  op2val:0x000005ffffffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x000020feffffff, 0x000005ffffffff, x30, x1, 1312, x2)

inst_112:
// rs1_w1_val == 4, rs1_w0_val == -513
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004fffffdff;  op2val:0x55555555fffffffd
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x000004fffffdff, 0x55555555fffffffd, x30, x1, 1328, x2)

inst_113:
// rs1_w1_val == 2, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000280000000;  op2val:0x000009c0000000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x00000280000000, 0x000009c0000000, x30, x1, 1344, x2)

inst_114:
// rs1_w1_val == 0, rs1_w0_val == -268435457
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000efffffff;  op2val:0x00040020000000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x000000efffffff, 0x00040020000000, x30, x1, 1360, x2)

inst_115:
// rs1_w1_val == -1, rs1_w0_val == -65537
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffeffff;  op2val:0x00800000001000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffffffeffff, 0x00800000001000, x30, x1, 1376, x2)

inst_116:
// rs1_w0_val == 2147483647, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x0400007fffffff;  op2val:0xfffffff700000800
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x0400007fffffff, 0xfffffff700000800, x30, x1, 1392, x2)

inst_117:
// rs1_w0_val == -1048577, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffffefffff;  op2val:0x00000900000100
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x3fffffffffefffff, 0x00000900000100, x30, x1, 1408, x2)

inst_118:
// rs2_w0_val == -2049, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007aaaaaaaa;  op2val:0xfffffffdfffff7ff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x000007aaaaaaaa, 0xfffffffdfffff7ff, x30, x1, 1424, x2)

inst_119:
// rs2_w0_val == -1025, rs1_w0_val == -9
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffff7;  op2val:0x1000000fffffbff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffff7, 0x1000000fffffbff, x30, x1, 1440, x2)

inst_120:
// rs1_w0_val == -262145, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007fffbffff;  op2val:0xfffffffb7fffffff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x000007fffbffff, 0xfffffffb7fffffff, x30, x1, 1456, x2)

inst_121:
// rs1_w0_val == -16385, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200ffffbfff;  op2val:0xfffffff6fffffdff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x000200ffffbfff, 0xfffffff6fffffdff, x30, x1, 1472, x2)

inst_122:
// rs2_w0_val == -17, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000800;  op2val:0xfffffdffffffffef
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x5555555500000800, 0xfffffdffffffffef, x30, x1, 1488, x2)

inst_123:
// rs2_w0_val == -5, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffff8;  op2val:0x010000fffffffb
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x080000fffffff8, 0x010000fffffffb, x30, x1, 1504, x2)

inst_124:
// rs1_w0_val == -1025, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffffbff;  op2val:0xffffffdfffff7fff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xbffffffffffffbff, 0xffffffdfffff7fff, x30, x1, 1520, x2)

inst_125:
// rs2_w0_val == -2, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffffbf;  op2val:0xfdfffffffffffffe
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffffbf, 0xfdfffffffffffffe, x30, x1, 1536, x2)

inst_126:
// rs1_w0_val == -257, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005fffffeff;  op2val:0xdfffffffc0000000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x000005fffffeff, 0xdfffffffc0000000, x30, x1, 1552, x2)

inst_127:
// rs2_w0_val == 268435456, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100efffffff;  op2val:0xfffffff810000000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x000100efffffff, 0xfffffff810000000, x30, x1, 1568, x2)

inst_128:
// rs2_w0_val == 16777216, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffffffb;  op2val:0x800000001000000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0x004000fffffffb, 0x800000001000000, x30, x1, 1584, x2)

inst_129:
// rs1_w0_val == 1073741824, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff40000000;  op2val:0xfff7ffff10000000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffefffff40000000, 0xfff7ffff10000000, x30, x1, 1600, x2)

inst_130:
// rs1_w0_val == -17, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffef;  op2val:0x800000fffffff7
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffef, 0x800000fffffff7, x30, x1, 1616, x2)

inst_131:
// rs1_w0_val == 67108864, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff04000000;  op2val:0xbffffffffffffdff
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xffffbfff04000000, 0xbffffffffffffdff, x30, x1, 1632, x2)

inst_132:
// rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w0_val == 2, rs1_w1_val == -5, rs1_w0_val == -8388609, rs2_w1_val == 4
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbff7fffff;  op2val:0x00000400000002
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffbff7fffff, 0x00000400000002, x30, x1, 1648, x2)

inst_133:
// rs2_w1_val == -65537, rs1_w1_val == -524289, rs1_w0_val == -33, rs2_w0_val == 1048576
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffffdf;  op2val:0xfffeffff00100000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffffffdf, 0xfffeffff00100000, x30, x1, 1664, x2)

inst_134:
// rs2_w1_val == -4097, 
// opcode: kmadrs32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffffffe;  op2val:0xffffefff00008000
TEST_PKRR_OP(kmadrs32, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffffffe, 0xffffefff00008000, x30, x1, 1680, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x12_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 212*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
