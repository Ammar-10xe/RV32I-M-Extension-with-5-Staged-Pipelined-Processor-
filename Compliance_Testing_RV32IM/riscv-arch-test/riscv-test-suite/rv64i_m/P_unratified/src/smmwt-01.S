
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smmwt instruction of the RISC-V RV64PZicsr extension for the smmwt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smmwt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x10,signature_x10_1)

inst_0:
// rs1 == rd != rs2, rs1==x26, rs2==x13, rd==x26, rs1_w0_val == -2147483648, rs2_h2_val == 8, rs1_w1_val == 2048, rs2_h1_val == 4, rs2_h3_val == 2048, rs2_h0_val == -129
// opcode: smmwt ; op1:x26; op2:x13; dest:x26; op1val:0x00080080000000;  op2val:0x80000080004ff7f
TEST_RR_OP(smmwt, x26, x26, x13, 0x0000000000000000, 0x00080080000000, 0x80000080004ff7f, x10, 0, x7)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x17, rs2==x18, rd==x19, rs2_h3_val == -21846, rs1_w1_val == -3, rs2_h0_val == 1, rs2_h2_val == 128
// opcode: smmwt ; op1:x17; op2:x18; dest:x19; op1val:0xfffffffd00000005;  op2val:0xaaaa008000090001
TEST_RR_OP(smmwt, x19, x17, x18, 0x0000000000000000, 0xfffffffd00000005, 0xaaaa008000090001, x10, 8, x7)

inst_2:
// rs1 == rs2 != rd, rs1==x19, rs2==x19, rd==x9, rs2_h3_val == 21845, rs2_h2_val == -1, rs2_h1_val == 128, rs1_w1_val == -1073741825, rs1_w0_val == -3
// opcode: smmwt ; op1:x19; op2:x19; dest:x9; op1val:0xbffffffffffffffd;  op2val:0x5555ffff00800007
TEST_RR_OP(smmwt, x9, x19, x19, 0x0000000000000000, 0xbffffffffffffffd, 0x5555ffff00800007, x10, 16, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x5, rs2==x5, rd==x5, rs2_h3_val == 32767, rs1_w0_val == -524289, rs2_h2_val == 1, rs2_h1_val == 2, rs2_h0_val == 32767, rs1_w1_val == 1
// opcode: smmwt ; op1:x5; op2:x5; dest:x5; op1val:0x000001fff7ffff;  op2val:0x7fff000100027fff
TEST_RR_OP(smmwt, x5, x5, x5, 0x0000000000000000, 0x000001fff7ffff, 0x7fff000100027fff, x10, 24, x7)

inst_4:
// rs2 == rd != rs1, rs1==x30, rs2==x6, rd==x6, rs2_h3_val == -16385, rs1_w0_val == 262144, rs2_h0_val == 256, rs1_w1_val == 2097152, rs2_h1_val == -3, rs2_h2_val == 512
// opcode: smmwt ; op1:x30; op2:x6; dest:x6; op1val:0x20000000040000;  op2val:0xbfff0200fffd0100
TEST_RR_OP(smmwt, x6, x30, x6, 0x0000000000000000, 0x20000000040000, 0xbfff0200fffd0100, x10, 32, x7)

inst_5:
// rs1==x11, rs2==x23, rd==x24, rs2_h3_val == -8193, rs1_w0_val == -67108865, rs1_w1_val == 8192
// opcode: smmwt ; op1:x11; op2:x23; dest:x24; op1val:0x002000fbffffff;  op2val:0xdfffc00000030006
TEST_RR_OP(smmwt, x24, x11, x23, 0x0000000000000000, 0x002000fbffffff, 0xdfffc00000030006, x10, 40, x7)

inst_6:
// rs1==x4, rs2==x1, rd==x2, rs2_h3_val == -4097, rs2_h0_val == 64, rs1_w0_val == -17, rs2_h2_val == -21846
// opcode: smmwt ; op1:x4; op2:x1; dest:x2; op1val:0xfffffffaffffffef;  op2val:0xefffaaaafff90040
TEST_RR_OP(smmwt, x2, x4, x1, 0x0000000000000000, 0xfffffffaffffffef, 0xefffaaaafff90040, x10, 48, x7)

inst_7:
// rs1==x27, rs2==x15, rd==x13, rs2_h3_val == -2049, rs1_w0_val == -131073, rs1_w1_val == 268435456, rs2_h1_val == 8192, rs2_h0_val == 21845
// opcode: smmwt ; op1:x27; op2:x15; dest:x13; op1val:0x10000000fffdffff;  op2val:0xf7ff000320005555
TEST_RR_OP(smmwt, x13, x27, x15, 0x0000000000000000, 0x10000000fffdffff, 0xf7ff000320005555, x10, 56, x7)

inst_8:
// rs1==x6, rs2==x22, rd==x25, rs2_h3_val == -1025, rs2_h0_val == 2, rs1_w0_val == 16384
// opcode: smmwt ; op1:x6; op2:x22; dest:x25; op1val:0xbfffffff00004000;  op2val:0xfbffaaaafff90002
TEST_RR_OP(smmwt, x25, x6, x22, 0x0000000000000000, 0xbfffffff00004000, 0xfbffaaaafff90002, x10, 64, x7)

inst_9:
// rs1==x20, rs2==x2, rd==x3, rs2_h3_val == -513, rs2_h1_val == -17, rs1_w0_val == 134217728, rs2_h0_val == 1024, rs2_h2_val == -257
// opcode: smmwt ; op1:x20; op2:x2; dest:x3; op1val:0x1000000008000000;  op2val:0xfdfffeffffef0400
TEST_RR_OP(smmwt, x3, x20, x2, 0x0000000000000000, 0x1000000008000000, 0xfdfffeffffef0400, x10, 72, x7)

inst_10:
// rs1==x1, rs2==x29, rd==x22, rs2_h3_val == -257, rs1_w1_val == -5, rs1_w0_val == 0, rs2_h2_val == 32767
// opcode: smmwt ; op1:x1; op2:x29; dest:x22; op1val:0xfffffffb00000000;  op2val:0xfeff7fff00053fff
TEST_RR_OP(smmwt, x22, x1, x29, 0x0000000000000000, 0xfffffffb00000000, 0xfeff7fff00053fff, x10, 80, x7)

inst_11:
// rs1==x28, rs2==x9, rd==x17, rs2_h3_val == -129, rs1_w1_val == 256, rs1_w0_val == -32769, rs2_h0_val == -32768
// opcode: smmwt ; op1:x28; op2:x9; dest:x17; op1val:0x000100ffff7fff;  op2val:0xff7ffff8fff98000
TEST_RR_OP(smmwt, x17, x28, x9, 0x0000000000000000, 0x000100ffff7fff, 0xff7ffff8fff98000, x10, 88, x7)

inst_12:
// rs1==x8, rs2==x4, rd==x18, rs2_h3_val == -65, rs2_h1_val == -65, rs1_w0_val == 65536
// opcode: smmwt ; op1:x8; op2:x4; dest:x18; op1val:0x3fffffff00010000;  op2val:0xffbffff8ffbf0400
TEST_RR_OP(smmwt, x18, x8, x4, 0x0000000000000000, 0x3fffffff00010000, 0xffbffff8ffbf0400, x10, 96, x7)

inst_13:
// rs1==x18, rs2==x27, rd==x11, rs2_h3_val == -33, rs1_w0_val == 8192, rs2_h0_val == -9, rs2_h2_val == 4
// opcode: smmwt ; op1:x18; op2:x27; dest:x11; op1val:0x20000000002000;  op2val:0xffdf00040003fff7
TEST_RR_OP(smmwt, x11, x18, x27, 0x0000000000000000, 0x20000000002000, 0xffdf00040003fff7, x10, 104, x7)

inst_14:
// rs1==x14, rs2==x26, rd==x31, rs2_h3_val == -17, rs1_w0_val == 32, rs1_w1_val == -17
// opcode: smmwt ; op1:x14; op2:x26; dest:x31; op1val:0xffffffef00000020;  op2val:0xffef0009fffc0009
TEST_RR_OP(smmwt, x31, x14, x26, 0x0000000000000000, 0xffffffef00000020, 0xffef0009fffc0009, x10, 112, x7)

inst_15:
// rs1==x29, rs2==x25, rd==x0, rs2_h3_val == -9, rs2_h1_val == -1025, rs1_w0_val == 2097152, rs2_h2_val == -17
// opcode: smmwt ; op1:x29; op2:x25; dest:x0; op1val:0x00000600200000;  op2val:0xfff7ffeffbfffff8
TEST_RR_OP(smmwt, x0, x29, x25, 0x0000000000000000, 0x00000600200000, 0xfff7ffeffbfffff8, x10, 120, x5)

inst_16:
// rs1==x2, rs2==x3, rd==x4, rs2_h3_val == -5, rs2_h2_val == -65, rs1_w0_val == -536870913, rs2_h0_val == -257
// opcode: smmwt ; op1:x2; op2:x3; dest:x4; op1val:0x000100dfffffff;  op2val:0xfffbffbffff8feff
TEST_RR_OP(smmwt, x4, x2, x3, 0x0000000000000000, 0x000100dfffffff, 0xfffbffbffff8feff, x10, 128, x5)

inst_17:
// rs1==x7, rs2==x17, rd==x23, rs2_h3_val == -3, rs1_w1_val == -67108865, rs2_h0_val == -8193, rs1_w0_val == 1048576
// opcode: smmwt ; op1:x7; op2:x17; dest:x23; op1val:0xfbffffff00100000;  op2val:0xfffdfeff0004dfff
TEST_RR_OP(smmwt, x23, x7, x17, 0x0000000000000000, 0xfbffffff00100000, 0xfffdfeff0004dfff, x10, 136, x5)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_18:
// rs1==x23, rs2==x0, rd==x30, rs2_h3_val == -2, rs2_h1_val == 1, rs2_h0_val == -513
// opcode: smmwt ; op1:x23; op2:x0; dest:x30; op1val:0x10000000fffffffa;  op2val:0xfffeffef0001fdff
TEST_RR_OP(smmwt, x30, x23, x0, 0x0000000000000000, 0x10000000fffffffa, 0xfffeffef0001fdff, x2, 0, x5)

inst_19:
// rs1==x22, rs2==x31, rd==x27, rs2_h3_val == -32768, rs2_h2_val == 64, rs2_h1_val == 512, rs2_h0_val == 8192, rs1_w0_val == -4097
// opcode: smmwt ; op1:x22; op2:x31; dest:x27; op1val:0x000003ffffefff;  op2val:0x8000004002002000
TEST_RR_OP(smmwt, x27, x22, x31, 0x0000000000000000, 0x000003ffffefff, 0x8000004002002000, x2, 8, x5)

inst_20:
// rs1==x21, rs2==x11, rd==x29, rs2_h3_val == 16384, rs1_w1_val == -262145, rs1_w0_val == 8, rs2_h1_val == 16
// opcode: smmwt ; op1:x21; op2:x11; dest:x29; op1val:0xfffbffff00000008;  op2val:0x40003fff00100005
TEST_RR_OP(smmwt, x29, x21, x11, 0x0000000000000000, 0xfffbffff00000008, 0x40003fff00100005, x2, 16, x5)

inst_21:
// rs1==x13, rs2==x12, rd==x14, rs2_h3_val == 8192, rs1_w0_val == -1073741825, rs1_w1_val == 16384, rs2_h1_val == -8193
// opcode: smmwt ; op1:x13; op2:x12; dest:x14; op1val:0x004000bfffffff;  op2val:0x20000006dffffdff
TEST_RR_OP(smmwt, x14, x13, x12, 0x0000000000000000, 0x004000bfffffff, 0x20000006dffffdff, x2, 24, x5)

inst_22:
// rs1==x3, rs2==x10, rd==x20, rs2_h3_val == 4096, rs1_w1_val == 16777216, rs1_w0_val == -1431655766, rs2_h1_val == 2048
// opcode: smmwt ; op1:x3; op2:x10; dest:x20; op1val:0x1000000aaaaaaaa;  op2val:0x1000000608000009
TEST_RR_OP(smmwt, x20, x3, x10, 0x0000000000000000, 0x1000000aaaaaaaa, 0x1000000608000009, x2, 32, x5)

inst_23:
// rs1==x0, rs2==x14, rd==x10, rs2_h3_val == 1024, rs2_h1_val == 256, rs1_w1_val == 8388608, rs1_w0_val == -33554433, rs2_h0_val == 0
// opcode: smmwt ; op1:x0; op2:x14; dest:x10; op1val:0x800000fdffffff;  op2val:0x4003fff01000000
TEST_RR_OP(smmwt, x10, x0, x14, 0x0000000000000000, 0x800000fdffffff, 0x4003fff01000000, x2, 40, x5)

inst_24:
// rs1==x9, rs2==x24, rd==x7, rs2_h3_val == 512, rs2_h1_val == -5, rs1_w1_val == -1431655766, rs1_w0_val == 131072
// opcode: smmwt ; op1:x9; op2:x24; dest:x7; op1val:0xaaaaaaaa00020000;  op2val:0x200ffeffffb0007
TEST_RR_OP(smmwt, x7, x9, x24, 0x0000000000000000, 0xaaaaaaaa00020000, 0x200ffeffffb0007, x2, 48, x5)

inst_25:
// rs1==x31, rs2==x7, rd==x12, rs2_h3_val == 256, rs1_w0_val == -268435457, rs1_w1_val == -16777217
// opcode: smmwt ; op1:x31; op2:x7; dest:x12; op1val:0xfeffffffefffffff;  op2val:0x100ffbf2000fff9
TEST_RR_OP(smmwt, x12, x31, x7, 0x0000000000000000, 0xfeffffffefffffff, 0x100ffbf2000fff9, x2, 56, x5)

inst_26:
// rs1==x25, rs2==x30, rd==x16, rs2_h3_val == 128, rs1_w0_val == -2097153, rs2_h2_val == 1024
// opcode: smmwt ; op1:x25; op2:x30; dest:x16; op1val:0x000003ffdfffff;  op2val:0x8004000005dfff
TEST_RR_OP(smmwt, x16, x25, x30, 0x0000000000000000, 0x000003ffdfffff, 0x8004000005dfff, x2, 64, x5)

inst_27:
// rs1==x12, rs2==x8, rd==x21, rs2_h3_val == 64, rs2_h0_val == -65, rs2_h2_val == 2048, rs1_w1_val == -8193
// opcode: smmwt ; op1:x12; op2:x8; dest:x21; op1val:0xffffdfff08000000;  op2val:0x4008000009ffbf
TEST_RR_OP(smmwt, x21, x12, x8, 0x0000000000000000, 0xffffdfff08000000, 0x4008000009ffbf, x2, 72, x5)

inst_28:
// rs1==x16, rs2==x21, rd==x8, rs2_h3_val == 32, rs2_h1_val == -2, rs1_w0_val == 1024
// opcode: smmwt ; op1:x16; op2:x21; dest:x8; op1val:0x00000300000400;  op2val:0x207ffffffe0400
TEST_RR_OP(smmwt, x8, x16, x21, 0x0000000000000000, 0x00000300000400, 0x207ffffffe0400, x2, 80, x5)

inst_29:
// rs1==x10, rs2==x16, rd==x15, rs2_h3_val == 16, rs2_h2_val == 16, rs2_h0_val == -5, rs1_w0_val == 1431655765
// opcode: smmwt ; op1:x10; op2:x16; dest:x15; op1val:0xfffffff655555555;  op2val:0x1000100003fffb
TEST_RR_OP(smmwt, x15, x10, x16, 0x0000000000000000, 0xfffffff655555555, 0x1000100003fffb, x2, 88, x5)

inst_30:
// rs1==x15, rs2==x20, rd==x28, rs2_h3_val == 8, rs1_w1_val == 134217728, rs2_h2_val == -4097, rs1_w0_val == -262145, rs2_h0_val == 128
// opcode: smmwt ; op1:x15; op2:x20; dest:x28; op1val:0x8000000fffbffff;  op2val:0x08effffffd0080
TEST_RR_OP(smmwt, x28, x15, x20, 0x0000000000000000, 0x8000000fffbffff, 0x08effffffd0080, x2, 96, x5)

inst_31:
// rs1==x24, rs2==x28, rd==x1, rs2_h3_val == 4, rs2_h0_val == -2049, rs1_w1_val == -4097
// opcode: smmwt ; op1:x24; op2:x28; dest:x1; op1val:0xffffefff00010000;  op2val:0x04feffffbff7ff
TEST_RR_OP(smmwt, x1, x24, x28, 0x0000000000000000, 0xffffefff00010000, 0x04feffffbff7ff, x2, 104, x5)

inst_32:
// rs2_h3_val == 2, rs1_w1_val == -131073, rs2_h1_val == 32767, rs2_h0_val == 512
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffffffffa;  op2val:0x02ffbf7fff0200
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfffdfffffffffffa, 0x02ffbf7fff0200, x2, 112, x5)

inst_33:
// rs2_h3_val == 1, rs1_w1_val == 32768, rs1_w0_val == -1025, rs2_h1_val == -4097, rs2_h2_val == 16384, rs2_h0_val == -33
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffffbff;  op2val:0x014000efffffdf
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x008000fffffbff, 0x014000efffffdf, x2, 120, x5)

inst_34:
// rs2_h3_val == 0, rs1_w0_val == 4096
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00001000;  op2val:0x000040fffaf7ff
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfffbffff00001000, 0x000040fffaf7ff, x2, 128, x5)

inst_35:
// rs2_h3_val == -1, rs2_h1_val == -33, rs1_w0_val == 128
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000080;  op2val:0xffffffffffdffff6
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000080, 0xffffffffffdffff6, x2, 136, x5)

inst_36:
// rs2_h2_val == 21845, rs1_w0_val == 4194304, rs1_w1_val == 8
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x00000800400000;  op2val:0xfffa55550007fdff
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x00000800400000, 0xfffa55550007fdff, x2, 144, x5)

inst_37:
// rs2_h2_val == -16385, rs2_h1_val == -9
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x000003fbffffff;  op2val:0x5555bffffff7fff6
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x000003fbffffff, 0x5555bffffff7fff6, x2, 152, x5)

inst_38:
// rs2_h2_val == -8193, rs1_w1_val == -513, rs1_w0_val == 16
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000010;  op2val:0x1000dffffffd0009
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000010, 0x1000dffffffd0009, x2, 160, x5)

inst_39:
// rs2_h2_val == -2049, rs1_w1_val == 128, rs2_h1_val == 16384
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x00008000100000;  op2val:0xfefff7ff40000040
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x00008000100000, 0xfefff7ff40000040, x2, 168, x5)

inst_40:
// rs1_w0_val == 524288, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00080000;  op2val:0xfefffff8fff70040
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xffffdfff00080000, 0xfefffff8fff70040, x2, 176, x5)

inst_41:
// rs1_w0_val == 32768, rs1_w1_val == -4194305
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00008000;  op2val:0x05bffffffa0080
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xffbfffff00008000, 0x05bffffffa0080, x2, 184, x5)

inst_42:
// rs1_w0_val == 2048, rs2_h0_val == -17
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000800;  op2val:0x0900040080ffef
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x20000000000800, 0x0900040080ffef, x2, 192, x5)

inst_43:
// rs1_w0_val == 512, rs2_h2_val == -32768
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00000200;  op2val:0x1080000800fffb
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfffffffc00000200, 0x1080000800fffb, x2, 200, x5)

inst_44:
// rs1_w0_val == 256, rs1_w1_val == -33
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000100;  op2val:0x800080000037fff
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000100, 0x800080000037fff, x2, 208, x5)

inst_45:
// rs1_w0_val == 64, rs2_h2_val == -3
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x00400000000040;  op2val:0x01fffdffdffff9
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x00400000000040, 0x01fffdffdffff9, x2, 216, x5)

inst_46:
// rs1_w0_val == 4, rs2_h0_val == 16, rs2_h2_val == 2, rs1_w1_val == -1048577
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000004;  op2val:0x10000200070010
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xffefffff00000004, 0x10000200070010, x2, 224, x5)

inst_47:
// rs1_w0_val == 2, rs1_w1_val == 4
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000002;  op2val:0x015555ffdf0006
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x00000400000002, 0x015555ffdf0006, x2, 232, x5)

inst_48:
// rs1_w0_val == 1, rs2_h2_val == -1025
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600000001;  op2val:0xf7fffbff01002000
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfffffff600000001, 0xf7fffbff01002000, x2, 240, x5)

inst_49:
// rs1_w0_val == -1, rs2_h2_val == -129
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffffff;  op2val:0xaaaaff7fffbf0007
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffffff, 0xaaaaff7fffbf0007, x2, 248, x5)

inst_50:
// rs2_h2_val == -513, rs2_h1_val == -32768
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffffffd;  op2val:0xbffffdff80000080
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xffffeffffffffffd, 0xbffffdff80000080, x2, 256, x5)

inst_51:
// rs2_h2_val == -33, rs2_h1_val == -21846
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000800;  op2val:0xc000ffdfaaaa2000
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x00000700000800, 0xc000ffdfaaaa2000, x2, 264, x5)

inst_52:
// rs2_h2_val == -9, rs2_h0_val == 8, rs1_w0_val == -257
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffffeff;  op2val:0xf7fffff7fbff0008
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x8000000fffffeff, 0xf7fffff7fbff0008, x2, 272, x5)

inst_53:
// rs2_h2_val == -5, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000010;  op2val:0x03fffb7ffffff6
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x00010000000010, 0x03fffb7ffffff6, x2, 280, x5)

inst_54:
// rs2_h2_val == -2, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900000400;  op2val:0xffbffffedfff3fff
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfffffff900000400, 0xffbffffedfff3fff, x2, 288, x5)

inst_55:
// rs2_h2_val == 8192, rs1_w0_val == -8193, rs2_h1_val == 4096, rs1_w1_val == -2049
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffdfff;  op2val:0x100200010000400
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffdfff, 0x100200010000400, x2, 296, x5)

inst_56:
// rs2_h2_val == 4096, rs2_h0_val == -16385, rs1_w0_val == -1048577
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x000100ffefffff;  op2val:0xbfff10000006bfff
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x000100ffefffff, 0xbfff10000006bfff, x2, 304, x5)

inst_57:
// rs2_h2_val == 256, rs2_h0_val == 2048, rs1_w1_val == 524288
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x08000000010000;  op2val:0xefff010040000800
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x08000000010000, 0xefff010040000800, x2, 312, x5)

inst_58:
// rs2_h2_val == 32, rs2_h1_val == 21845
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000200;  op2val:0x20000205555ff7f
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000200, 0x20000205555ff7f, x2, 320, x5)

inst_59:
// rs2_h2_val == 0, rs1_w1_val == -268435457
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffff7fff;  op2val:0x800000000062000
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xefffffffffff7fff, 0x800000000062000, x2, 328, x5)

inst_60:
// rs2_h1_val == -16385, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x00000300000001;  op2val:0xffef0006bffffdff
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x00000300000001, 0xffef0006bffffdff, x2, 336, x5)

inst_61:
// rs2_h1_val == -2049, rs1_w1_val == 2, rs1_w0_val == -2
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffffffe;  op2val:0xffef0200f7fffff7
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x000002fffffffe, 0xffef0200f7fffff7, x2, 344, x5)

inst_62:
// rs2_h1_val == -513, rs1_w1_val == 33554432, rs2_h0_val == -3
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000009;  op2val:0xfdff0002fdfffffd
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x200000000000009, 0xfdff0002fdfffffd, x2, 352, x5)

inst_63:
// rs2_h1_val == -257, rs1_w0_val == -8388609
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffff7fffff;  op2val:0xffffff7ffefffff7
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xffffdfffff7fffff, 0xffffff7ffefffff7, x2, 360, x5)

inst_64:
// rs2_h1_val == -129, rs1_w0_val == -16385, rs2_h0_val == 4096
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffffbfff;  op2val:0x090100ff7f1000
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x008000ffffbfff, 0x090100ff7f1000, x2, 368, x5)

inst_65:
// rs2_h1_val == 1024, rs1_w1_val == -257
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffffbfff;  op2val:0x057fff04000080
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfffffeffffffbfff, 0x057fff04000080, x2, 376, x5)

inst_66:
// rs2_h1_val == 64, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x80000055555555;  op2val:0x4000400040c000
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x80000055555555, 0x4000400040c000, x2, 384, x5)

inst_67:
// rs2_h1_val == 32, rs1_w0_val == -129
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffff7f;  op2val:0xfffb000900200009
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffff7f, 0xfffb000900200009, x2, 392, x5)

inst_68:
// rs2_h0_val == 16384, rs1_w0_val == -65
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x000002ffffffbf;  op2val:0xfff8aaaa3fff4000
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x000002ffffffbf, 0xfff8aaaa3fff4000, x2, 400, x5)

inst_69:
// rs2_h0_val == 32, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff80000000;  op2val:0x55552000efff0020
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xefffffff80000000, 0x55552000efff0020, x2, 408, x5)

inst_70:
// rs2_h0_val == 4, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffffbfff;  op2val:0xffdffffc00800004
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x800000ffffbfff, 0xffdffffc00800004, x2, 416, x5)

inst_71:
// rs2_h0_val == -1, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000008;  op2val:0x04f7ffff7fffff
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000008, 0x04f7ffff7fffff, x2, 424, x5)

inst_72:
// rs1_w1_val == 1431655765, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fffdffff;  op2val:0xf7ff00030007ffbf
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x55555555fffdffff, 0xf7ff00030007ffbf, x2, 432, x5)

inst_73:
// rs1_w1_val == 2147483647, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffbfff;  op2val:0x20000006fffafff8
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffbfff, 0x20000006fffafff8, x2, 440, x5)

inst_74:
// rs1_w1_val == -536870913, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000040;  op2val:0xfffe000000400003
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000040, 0xfffe000000400003, x2, 448, x5)

inst_75:
// rs1_w1_val == -134217729, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffdfffffff;  op2val:0x40007fff02004000
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xf7ffffffdfffffff, 0x40007fff02004000, x2, 456, x5)

inst_76:
// rs1_w1_val == -33554433, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000002;  op2val:0x10000097fff7fff
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000002, 0x10000097fff7fff, x2, 464, x5)

inst_77:
// rs1_w1_val == -8388609, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffffefff;  op2val:0x040007fff80003
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xff7fffffffffefff, 0x040007fff80003, x2, 472, x5)

inst_78:
// rs1_w1_val == -2097153, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff55555555;  op2val:0x0820002000fff6
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xffdfffff55555555, 0x0820002000fff6, x2, 480, x5)

inst_79:
// rs1_w1_val == -524289, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffbffffff;  op2val:0x2000fff7fff80200
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfff7fffffbffffff, 0x2000fff7fff80200, x2, 488, x5)

inst_80:
// rs1_w1_val == -65537, rs2_h1_val == 0
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00020000;  op2val:0xfeff020000000080
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfffeffff00020000, 0xfeff020000000080, x2, 496, x5)

inst_81:
// rs1_w1_val == -32769, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00020000;  op2val:0x7ffffbff0001ffef
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xffff7fff00020000, 0x7ffffbff0001ffef, x2, 504, x5)

inst_82:
// rs1_w1_val == -16385, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffffdfff;  op2val:0xffdf00022000fff8
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xffffbfffffffdfff, 0xffdf00022000fff8, x2, 512, x5)

inst_83:
// rs1_w1_val == -1025, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffefffffff;  op2val:0x06000300040040
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfffffbffefffffff, 0x06000300040040, x2, 520, x5)

inst_84:
// rs1_w1_val == -129, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000080;  op2val:0xfdfffeff3ffffff9
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000080, 0xfdfffeff3ffffff9, x2, 528, x5)

inst_85:
// rs1_w1_val == -65, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000010;  op2val:0x8000fff6ffef0006
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000010, 0x8000fff6ffef0006, x2, 536, x5)

inst_86:
// rs1_w1_val == -9, rs1_w0_val == 16777216
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff701000000;  op2val:0x05fff90200ffef
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfffffff701000000, 0x05fff90200ffef, x2, 544, x5)

inst_87:
// rs1_w1_val == -2, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000008;  op2val:0xfff60001fff6fdff
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000008, 0xfff60001fff6fdff, x2, 552, x5)

inst_88:
// rs1_w1_val == -2147483648, rs2_h1_val == 8
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000001000;  op2val:0x2000fff600087fff
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x8000000000001000, 0x2000fff600087fff, x2, 560, x5)

inst_89:
// rs1_w1_val == 1073741824, rs1_w0_val == -33
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffffffdf;  op2val:0xefff00090005fff8
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x40000000ffffffdf, 0xefff00090005fff8, x2, 568, x5)

inst_90:
// rs1_w1_val == 536870912, rs1_w0_val == 8388608
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000800000;  op2val:0xfbffc000ffef3fff
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x2000000000800000, 0xfbffc000ffef3fff, x2, 576, x5)

inst_91:
// rs1_w1_val == 67108864, rs1_w0_val == -9
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffff7;  op2val:0x08fff908000200
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x4000000fffffff7, 0x08fff908000200, x2, 584, x5)

inst_92:
// rs1_w1_val == 4194304, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x40000000001000;  op2val:0x407fff0002fffd
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x40000000001000, 0x407fff0002fffd, x2, 592, x5)

inst_93:
// rs1_w1_val == 262144, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x04000000010000;  op2val:0x06000600080010
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x04000000010000, 0x06000600080010, x2, 600, x5)

inst_94:
// rs1_w1_val == 131072, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x020000fffffffc;  op2val:0x800fff7fbfffeff
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x020000fffffffc, 0x800fff7fbfffeff, x2, 608, x5)

inst_95:
// rs1_w1_val == 65536, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000004;  op2val:0xfffbbfffbfffff7f
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x01000000000004, 0xfffbbfffbfffff7f, x2, 616, x5)

inst_96:
// rs1_w1_val == 4096, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffefffff;  op2val:0x4008000001fdff
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x001000ffefffff, 0x4008000001fdff, x2, 624, x5)

inst_97:
// rs1_w1_val == 1024, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x00040080000000;  op2val:0x02bfff00080001
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x00040080000000, 0x02bfff00080001, x2, 632, x5)

inst_98:
// rs1_w1_val == 512, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000010;  op2val:0x073fff0400ff7f
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x00020000000010, 0x073fff0400ff7f, x2, 640, x5)

inst_99:
// rs1_w1_val == 64, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000005;  op2val:0x01ffdffff7ffdf
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x00004000000005, 0x01ffdffff7ffdf, x2, 648, x5)

inst_100:
// rs1_w1_val == 32, rs1_w0_val == 536870912
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x00002020000000;  op2val:0x03dffffff8fdff
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x00002020000000, 0x03dffffff8fdff, x2, 656, x5)

inst_101:
// rs1_w1_val == 16, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000006;  op2val:0xfbff3fff2000fffd
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x00001000000006, 0xfbff3fff2000fffd, x2, 664, x5)

inst_102:
// rs1_w1_val == 0, rs2_h0_val == -1025
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x000000fbffffff;  op2val:0xfffdc000ffbffbff
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x000000fbffffff, 0xfffdc000ffbffbff, x2, 672, x5)

inst_103:
// rs1_w1_val == -1, rs1_w0_val == -134217729
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffff7ffffff;  op2val:0x200ffef0007ffdf
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfffffffff7ffffff, 0x200ffef0007ffdf, x2, 680, x5)

inst_104:
// rs1_w0_val == 2147483647, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xc00000007fffffff;  op2val:0x03ff7f80004000
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xc00000007fffffff, 0x03ff7f80004000, x2, 688, x5)

inst_105:
// rs1_w0_val == -4194305, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffbfffff;  op2val:0x8000ffbf0400fff8
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xbfffffffffbfffff, 0x8000ffbf0400fff8, x2, 696, x5)

inst_106:
// rs1_w0_val == -65537, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fffeffff;  op2val:0xfeffdfffdffff7ff
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffeffff, 0xfeffdfffdffff7ff, x2, 704, x5)

inst_107:
// rs1_w0_val == -2049, rs2_h0_val == -21846
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffff7ff;  op2val:0x04bfff0005aaaa
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x200000fffff7ff, 0x04bfff0005aaaa, x2, 712, x5)

inst_108:
// rs2_h1_val == -1, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000040;  op2val:0x2000fefffffffffc
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000040, 0x2000fefffffffffc, x2, 720, x5)

inst_109:
// rs1_w0_val == -513, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffdff;  op2val:0x072000c0000003
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x10000000fffffdff, 0x072000c0000003, x2, 728, x5)

inst_110:
// rs1_w1_val == 1048576, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x100000fffffffc;  op2val:0x4000010aaaa0080
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x100000fffffffc, 0x4000010aaaa0080, x2, 736, x5)

inst_111:
// rs2_h0_val == -4097, rs1_w0_val == 67108864
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x00008004000000;  op2val:0x400080000006efff
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x00008004000000, 0x400080000006efff, x2, 744, x5)

inst_112:
// rs1_w0_val == -5, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffffffb;  op2val:0x01008001000007
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x000800fffffffb, 0x01008001000007, x2, 752, x5)

inst_113:
// rs1_w0_val == 1073741824, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x00000740000000;  op2val:0xfff8fff9fbfffffc
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x00000740000000, 0xfff8fff9fbfffffc, x2, 760, x5)

inst_114:
// rs1_w0_val == 268435456, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff10000000;  op2val:0xfffcfdfffffefff7
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfffffeff10000000, 0xfffcfdfffffefff7, x2, 768, x5)

inst_115:
// rs2_h0_val == -2, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffff7ffff;  op2val:0xff7ffffb0200fffe
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xfff7fffffff7ffff, 0xff7ffffb0200fffe, x2, 776, x5)

inst_116:
// rs1_w0_val == 33554432, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff02000000;  op2val:0xfffcfff800100008
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0xffff7fff02000000, 0xfffcfff800100008, x2, 784, x5)

inst_117:
// rs1_w0_val == -16777217, 
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x200000feffffff;  op2val:0x8000fdff7fff0007
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x200000feffffff, 0x8000fdff7fff0007, x2, 792, x5)

inst_118:
// rs2_h3_val == 32767, rs1_w0_val == -524289, rs2_h2_val == 1, rs2_h1_val == 2, rs2_h0_val == 32767, rs1_w1_val == 1
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x000001fff7ffff;  op2val:0x7fff000100027fff
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x000001fff7ffff, 0x7fff000100027fff, x2, 800, x5)

inst_119:
// rs2_h3_val == -9, rs2_h1_val == -1025, rs1_w0_val == 2097152, rs2_h2_val == -17
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x00000600200000;  op2val:0xfff7ffeffbfffff8
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x00000600200000, 0xfff7ffeffbfffff8, x2, 808, x5)

inst_120:
// rs2_h3_val == 1024, rs2_h1_val == 256, rs1_w1_val == 8388608, rs1_w0_val == -33554433, rs2_h0_val == 0
// opcode: smmwt ; op1:x30; op2:x29; dest:x31; op1val:0x800000fdffffff;  op2val:0x4003fff01000000
TEST_RR_OP(smmwt, x31, x30, x29, 0x0000000000000000, 0x800000fdffffff, 0x4003fff01000000, x2, 816, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 103*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
