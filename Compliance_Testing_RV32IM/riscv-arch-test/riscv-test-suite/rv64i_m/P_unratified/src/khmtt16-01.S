
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the khmtt16 instruction of the RISC-V RV64PZicsr extension for the khmtt16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",khmtt16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x4, rs2==x18, rd==x4, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h1_val == -21846, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h3_val == -33, rs1_h2_val != rs2_h2_val, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -65
// opcode: khmtt16 ; op1:x4; op2:x18; dest:x4; op1val:0x050005ffbf8000;  op2val:0xffdfc000aaaa0006
TEST_PKRR_OP(khmtt16, x4, x4, x18, 0x0000000000000000, 0x050005ffbf8000, 0xffdfc000aaaa0006, x4, x1, 0, x12)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x30, rs2==x14, rd==x20, rs1_h3_val == rs2_h3_val, rs1_h3_val == 128, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h2_val == -21846, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 128, rs1_h1_val == 21845, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == -16385
// opcode: khmtt16 ; op1:x30; op2:x14; dest:x20; op1val:0x80aaaa5555bfff;  op2val:0x8000030007fff9
TEST_PKRR_OP(khmtt16, x20, x30, x14, 0x0000000000000000, 0x80aaaa5555bfff, 0x8000030007fff9, x30, x1, 16, x12)

inst_2:
// rs1 == rs2 != rd, rs1==x15, rs2==x15, rd==x23, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h1_val == 4096, rs1_h0_val == 2048, rs2_h3_val == 16384, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -32768, rs1_h3_val == -17, rs2_h2_val == 128, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: khmtt16 ; op1:x15; op2:x15; dest:x23; op1val:0xffefc00010000800;  op2val:0x4000008080000003
TEST_PKRR_OP(khmtt16, x23, x15, x15, 0x0000000000000000, 0xffefc00010000800, 0x4000008080000003, x15, x1, 32, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x5, rs2==x5, rd==x5, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h0_val == -21846, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val == 4, rs1_h3_val == -65, rs1_h2_val == -257, rs2_h1_val == 128, rs2_h3_val == -16385
// opcode: khmtt16 ; op1:x5; op2:x5; dest:x5; op1val:0xffbffeff0004fff8;  op2val:0xbffffff80080aaaa
TEST_PKRR_OP(khmtt16, x5, x5, x5, 0x0000000000000000, 0xffbffeff0004fff8, 0xbffffff80080aaaa, x5, x1, 48, x12)

inst_4:
// rs2 == rd != rs1, rs1==x8, rs2==x6, rd==x6, rs1_h2_val == rs2_h2_val, rs2_h1_val == 4, rs1_h0_val == -2049, rs2_h0_val == 21845, rs2_h3_val == -2049
// opcode: khmtt16 ; op1:x8; op2:x6; dest:x6; op1val:0x05fff60009f7ff;  op2val:0xf7fffff600045555
TEST_PKRR_OP(khmtt16, x6, x8, x6, 0x0000000000000000, 0x05fff60009f7ff, 0xf7fffff600045555, x8, x1, 64, x12)

inst_5:
// rs1==x31, rs2==x7, rd==x3, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 16384, rs2_h3_val == 256, rs1_h3_val == -4097, rs1_h1_val == 16
// opcode: khmtt16 ; op1:x31; op2:x7; dest:x3; op1val:0xefff40000010f7ff;  op2val:0x1000003fffa0006
TEST_PKRR_OP(khmtt16, x3, x31, x7, 0x0000000000000000, 0xefff40000010f7ff, 0x1000003fffa0006, x31, x1, 80, x12)

inst_6:
// rs1==x17, rs2==x2, rd==x7, rs1_h1_val == rs2_h1_val, rs1_h1_val == 32, rs1_h0_val == 256, rs2_h0_val == -129, rs2_h3_val == 1024, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 32, rs1_h2_val == -32768
// opcode: khmtt16 ; op1:x17; op2:x2; dest:x7; op1val:0xfffc800000200100;  op2val:0x400fffc0020ff7f
TEST_PKRR_OP(khmtt16, x7, x17, x2, 0x0000000000000000, 0xfffc800000200100, 0x400fffc0020ff7f, x17, x1, 96, x12)

inst_7:
// rs1==x18, rs2==x28, rd==x17, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val == -5, rs2_h0_val == 32767, rs2_h3_val == -32768, rs1_h2_val == -1, rs1_h1_val == -17
// opcode: khmtt16 ; op1:x18; op2:x28; dest:x17; op1val:0xc000ffffffeffffb;  op2val:0x8000fffa00807fff
TEST_PKRR_OP(khmtt16, x17, x18, x28, 0x0000000000000000, 0xc000ffffffeffffb, 0x8000fffa00807fff, x18, x1, 112, x12)

inst_8:
// rs1==x10, rs2==x29, rd==x30, rs1_h0_val == rs2_h0_val, rs2_h1_val == -257, rs2_h2_val == -1025, rs1_h3_val == -33, rs1_h0_val == -129
// opcode: khmtt16 ; op1:x10; op2:x29; dest:x30; op1val:0xffdf0009fff8ff7f;  op2val:0xfffafbfffeffff7f
TEST_PKRR_OP(khmtt16, x30, x10, x29, 0x0000000000000000, 0xffdf0009fff8ff7f, 0xfffafbfffeffff7f, x10, x1, 128, x12)

inst_9:
// rs1==x3, rs2==x17, rd==x14, rs2_h3_val == -21846, rs2_h1_val == -513, rs1_h2_val == 16, rs1_h0_val == -21846, rs2_h0_val == 1
// opcode: khmtt16 ; op1:x3; op2:x17; dest:x14; op1val:0xc00000103fffaaaa;  op2val:0xaaaafff6fdff0001
TEST_PKRR_OP(khmtt16, x14, x3, x17, 0x0000000000000000, 0xc00000103fffaaaa, 0xaaaafff6fdff0001, x3, x1, 144, x12)

inst_10:
// rs1==x21, rs2==x4, rd==x2, rs2_h3_val == 21845, rs1_h3_val == 256, rs2_h2_val == -5, rs2_h1_val == -33, rs1_h1_val == -1025, rs2_h0_val == 2048
// opcode: khmtt16 ; op1:x21; op2:x4; dest:x2; op1val:0x100fff9fbff0800;  op2val:0x5555fffbffdf0800
TEST_PKRR_OP(khmtt16, x2, x21, x4, 0x0000000000000000, 0x100fff9fbff0800, 0x5555fffbffdf0800, x21, x1, 160, x12)

inst_11:
// rs1==x0, rs2==x11, rd==x10, rs2_h3_val == 32767, rs2_h1_val == 32767, rs2_h0_val == 2, rs1_h2_val == -8193, rs1_h0_val == 21845, rs2_h2_val == 64
// opcode: khmtt16 ; op1:x0; op2:x11; dest:x10; op1val:0xfff6dfff55555555;  op2val:0x7fff00407fff0002
TEST_PKRR_OP(khmtt16, x10, x0, x11, 0x0000000000000000, 0xfff6dfff55555555, 0x7fff00407fff0002, x0, x1, 176, x12)

inst_12:
// rs1==x27, rs2==x3, rd==x15, rs2_h3_val == -8193, rs2_h0_val == 4096, rs1_h0_val == 1, rs1_h3_val == -2049
// opcode: khmtt16 ; op1:x27; op2:x3; dest:x15; op1val:0xf7ff000700200001;  op2val:0xdffffff800051000
TEST_PKRR_OP(khmtt16, x15, x27, x3, 0x0000000000000000, 0xf7ff000700200001, 0xdffffff800051000, x27, x1, 192, x12)

inst_13:
// rs1==x7, rs2==x24, rd==x9, rs2_h3_val == -4097, rs2_h0_val == -1, rs1_h3_val == -8193, rs1_h0_val == 2, rs2_h1_val == 512, rs1_h2_val == -9
// opcode: khmtt16 ; op1:x7; op2:x24; dest:x9; op1val:0xdffffff700050002;  op2val:0xefff00030200ffff
TEST_PKRR_OP(khmtt16, x9, x7, x24, 0x0000000000000000, 0xdffffff700050002, 0xefff00030200ffff, x7, x1, 208, x12)

inst_14:
// rs1==x29, rs2==x20, rd==x19, rs2_h3_val == -1025, rs2_h1_val == 21845, rs1_h0_val == 16384, rs2_h2_val == 16384, rs2_h0_val == -2, rs1_h2_val == -129, rs1_h3_val == -5
// opcode: khmtt16 ; op1:x29; op2:x20; dest:x19; op1val:0xfffbff7f55554000;  op2val:0xfbff40005555fffe
TEST_PKRR_OP(khmtt16, x19, x29, x20, 0x0000000000000000, 0xfffbff7f55554000, 0xfbff40005555fffe, x29, x1, 224, x12)

inst_15:
// rs1==x25, rs2==x8, rd==x16, rs2_h3_val == -513, rs1_h0_val == -2, rs2_h1_val == -2049
// opcode: khmtt16 ; op1:x25; op2:x8; dest:x16; op1val:0xffeffffcfff8fffe;  op2val:0xfdff4000f7ff0003
TEST_PKRR_OP(khmtt16, x16, x25, x8, 0x0000000000000000, 0xffeffffcfff8fffe, 0xfdff4000f7ff0003, x25, x1, 240, x12)

inst_16:
// rs1==x13, rs2==x19, rd==x22, rs2_h3_val == -257, rs1_h0_val == -17, rs2_h1_val == -129, rs2_h2_val == 1
// opcode: khmtt16 ; op1:x13; op2:x19; dest:x22; op1val:0xfffbc0000003ffef;  op2val:0xfeff0001ff7f0009
TEST_PKRR_OP(khmtt16, x22, x13, x19, 0x0000000000000000, 0xfffbc0000003ffef, 0xfeff0001ff7f0009, x13, x1, 256, x4)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_17:
// rs1==x1, rs2==x30, rd==x29, rs2_h3_val == -129, rs1_h2_val == -17, rs2_h0_val == 4, rs2_h2_val == 2
// opcode: khmtt16 ; op1:x1; op2:x30; dest:x29; op1val:0xfffbffeffbff5555;  op2val:0xff7f00023fff0004
TEST_PKRR_OP(khmtt16, x29, x1, x30, 0x0000000000000000, 0xfffbffeffbff5555, 0xff7f00023fff0004, x1, x3, 0, x4)

inst_18:
// rs1==x16, rs2==x10, rd==x11, rs2_h3_val == -65, rs2_h2_val == 0
// opcode: khmtt16 ; op1:x16; op2:x10; dest:x11; op1val:0xfffa0003fff9ffef;  op2val:0xffbf00008000c000
TEST_PKRR_OP(khmtt16, x11, x16, x10, 0x0000000000000000, 0xfffa0003fff9ffef, 0xffbf00008000c000, x16, x3, 16, x4)

inst_19:
// rs1==x19, rs2==x0, rd==x13, rs2_h3_val == -17, rs2_h1_val == -1025, rs2_h0_val == -2049, rs1_h2_val == 2048
// opcode: khmtt16 ; op1:x19; op2:x0; dest:x13; op1val:0x090800ffbfffef;  op2val:0xffeffff9fbfff7ff
TEST_PKRR_OP(khmtt16, x13, x19, x0, 0x0000000000000000, 0x090800ffbfffef, 0xffeffff9fbfff7ff, x19, x3, 32, x4)

inst_20:
// rs1==x2, rs2==x31, rd==x28, rs2_h3_val == -9, rs2_h0_val == 32, rs1_h1_val == -32768, rs1_h2_val == 8, rs1_h3_val == -129, rs1_h0_val == 32767
// opcode: khmtt16 ; op1:x2; op2:x31; dest:x28; op1val:0xff7f000880007fff;  op2val:0xfff7fffb80000020
TEST_PKRR_OP(khmtt16, x28, x2, x31, 0x0000000000000000, 0xff7f000880007fff, 0xfff7fffb80000020, x2, x3, 48, x4)

inst_21:
// rs1==x23, rs2==x13, rd==x12, rs2_h3_val == -5, rs2_h1_val == -65, rs2_h0_val == -257, rs1_h2_val == -1025, rs2_h2_val == 32, rs1_h3_val == -2, rs1_h1_val == -33
// opcode: khmtt16 ; op1:x23; op2:x13; dest:x12; op1val:0xfffefbffffdffffc;  op2val:0xfffb0020ffbffeff
TEST_PKRR_OP(khmtt16, x12, x23, x13, 0x0000000000000000, 0xfffefbffffdffffc, 0xfffb0020ffbffeff, x23, x3, 64, x4)

inst_22:
// rs1==x12, rs2==x27, rd==x31, rs2_h3_val == -3, rs1_h2_val == 2, rs2_h1_val == 16, rs2_h2_val == 32767
// opcode: khmtt16 ; op1:x12; op2:x27; dest:x31; op1val:0x0300020010bfff;  op2val:0xfffd7fff0010fff6
TEST_PKRR_OP(khmtt16, x31, x12, x27, 0x0000000000000000, 0x0300020010bfff, 0xfffd7fff0010fff6, x12, x3, 80, x4)

inst_23:
// rs1==x14, rs2==x12, rd==x26, rs2_h3_val == -2, rs2_h2_val == -65, rs1_h3_val == -21846, rs1_h1_val == -2049
// opcode: khmtt16 ; op1:x14; op2:x12; dest:x26; op1val:0xaaaa0007f7fffff9;  op2val:0xfffeffbffdff0020
TEST_PKRR_OP(khmtt16, x26, x14, x12, 0x0000000000000000, 0xaaaa0007f7fffff9, 0xfffeffbffdff0020, x14, x3, 96, x4)

inst_24:
// rs1==x20, rs2==x25, rd==x21, rs2_h3_val == 8192, rs2_h2_val == -8193
// opcode: khmtt16 ; op1:x20; op2:x25; dest:x21; op1val:0xffdf80000005ff7f;  op2val:0x2000dfffff7ff7ff
TEST_PKRR_OP(khmtt16, x21, x20, x25, 0x0000000000000000, 0xffdf80000005ff7f, 0x2000dfffff7ff7ff, x20, x3, 112, x4)

inst_25:
// rs1==x6, rs2==x1, rd==x24, rs2_h3_val == 4096, rs1_h3_val == 4096, rs2_h0_val == 128
// opcode: khmtt16 ; op1:x6; op2:x1; dest:x24; op1val:0x1000ffffc000bfff;  op2val:0x10000006fbff0080
TEST_PKRR_OP(khmtt16, x24, x6, x1, 0x0000000000000000, 0x1000ffffc000bfff, 0x10000006fbff0080, x6, x3, 128, x4)

inst_26:
// rs1==x9, rs2==x26, rd==x8, rs2_h3_val == 2048, rs1_h3_val == 64, rs1_h2_val == 32, rs2_h2_val == -17, rs2_h0_val == -33, rs1_h1_val == 0, rs2_h1_val == 64
// opcode: khmtt16 ; op1:x9; op2:x26; dest:x8; op1val:0x4000200000fff8;  op2val:0x800ffef0040ffdf
TEST_PKRR_OP(khmtt16, x8, x9, x26, 0x0000000000000000, 0x4000200000fff8, 0x800ffef0040ffdf, x9, x3, 144, x4)

inst_27:
// rs1==x28, rs2==x22, rd==x25, rs2_h3_val == 512, rs1_h3_val == 2, rs2_h2_val == -2, rs1_h2_val == -2049, rs2_h1_val == 8192, rs1_h1_val == -9
// opcode: khmtt16 ; op1:x28; op2:x22; dest:x25; op1val:0x02f7fffff7f7ff;  op2val:0x200fffe20000005
TEST_PKRR_OP(khmtt16, x25, x28, x22, 0x0000000000000000, 0x02f7fffff7f7ff, 0x200fffe20000005, x28, x3, 160, x4)

inst_28:
// rs1==x26, rs2==x9, rd==x27, rs2_h3_val == 64, rs1_h1_val == 2048, rs1_h0_val == 8192, rs1_h2_val == 0, rs2_h2_val == 8192, rs2_h1_val == -2
// opcode: khmtt16 ; op1:x26; op2:x9; dest:x27; op1val:0x40000008002000;  op2val:0x402000fffefeff
TEST_PKRR_OP(khmtt16, x27, x26, x9, 0x0000000000000000, 0x40000008002000, 0x402000fffefeff, x26, x3, 176, x4)

inst_29:
// rs1==x24, rs2==x21, rd==x18, rs2_h3_val == 32, rs2_h0_val == 64, rs1_h1_val == -129
// opcode: khmtt16 ; op1:x24; op2:x21; dest:x18; op1val:0x03ff7fff7f0009;  op2val:0x20000200200040
TEST_PKRR_OP(khmtt16, x18, x24, x21, 0x0000000000000000, 0x03ff7fff7f0009, 0x20000200200040, x24, x3, 192, x4)

inst_30:
// rs1==x11, rs2==x16, rd==x0, rs2_h3_val == 16, rs1_h3_val == -513, rs1_h1_val == 256, rs1_h0_val == 8, rs1_h2_val == 21845
// opcode: khmtt16 ; op1:x11; op2:x16; dest:x0; op1val:0xfdff555501000008;  op2val:0x10000500400007
TEST_PKRR_OP(khmtt16, x0, x11, x16, 0x0000000000000000, 0xfdff555501000008, 0x10000500400007, x11, x3, 208, x4)

inst_31:
// rs1==x22, rs2==x23, rd==x1, rs2_h3_val == 8, rs2_h1_val == -5, rs2_h0_val == -8193, rs1_h1_val == 16384
// opcode: khmtt16 ; op1:x22; op2:x23; dest:x1; op1val:0xaaaafff64000fff8;  op2val:0x080020fffbdfff
TEST_PKRR_OP(khmtt16, x1, x22, x23, 0x0000000000000000, 0xaaaafff64000fff8, 0x080020fffbdfff, x22, x3, 224, x4)

inst_32:
// rs2_h3_val == 4, rs1_h0_val == -4097, rs2_h0_val == -9
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x05ffffff7fefff;  op2val:0x04fff8fff8fff7
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x05ffffff7fefff, 0x04fff8fff8fff7, x30, x3, 240, x4)

inst_33:
// rs2_h3_val == 2, rs1_h0_val == 4, rs1_h2_val == -2
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffe00000004;  op2val:0x020009fffb0007
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xff7ffffe00000004, 0x020009fffb0007, x30, x3, 256, x4)

inst_34:
// rs2_h3_val == 1, rs2_h2_val == -9, rs1_h2_val == 4
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x070004ffdf7fff;  op2val:0x01fff7fffc1000
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x070004ffdf7fff, 0x01fff7fffc1000, x30, x3, 272, x4)

inst_35:
// rs2_h3_val == 0, rs2_h0_val == -17, rs2_h2_val == 8, rs1_h2_val == 32767
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x037fff00097fff;  op2val:0x000008ffdfffef
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x037fff00097fff, 0x000008ffdfffef, x30, x3, 288, x4)

inst_36:
// rs1_h1_val == -5, rs1_h2_val == -65, rs2_h0_val == -4097, rs2_h1_val == 0, rs1_h3_val == 32767
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffbffffbffef;  op2val:0x0600800000efff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x7fffffbffffbffef, 0x0600800000efff, x30, x3, 304, x4)

inst_37:
// rs1_h1_val == -3, rs1_h2_val == 8192, rs1_h0_val == -9, rs2_h0_val == 1024
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1002000fffdfff7;  op2val:0x4000040ffdf0400
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x1002000fffdfff7, 0x4000040ffdf0400, x30, x3, 320, x4)

inst_38:
// rs1_h1_val == -2, rs2_h0_val == -65, rs1_h2_val == 512
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400200fffe0001;  op2val:0x20fffa0020ffbf
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x400200fffe0001, 0x20fffa0020ffbf, x30, x3, 336, x4)

inst_39:
// rs1_h1_val == 8192, rs2_h2_val == 4
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000072000fff6;  op2val:0xfffc0004ffdffffc
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x100000072000fff6, 0xfffc0004ffdffffc, x30, x3, 352, x4)

inst_40:
// rs1_h1_val == 1024, rs1_h2_val == 64, rs1_h3_val == -3
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd004004000002;  op2val:0xfff70020fff60400
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfffd004004000002, 0xfff70020fff60400, x30, x3, 368, x4)

inst_41:
// rs1_h1_val == 512, rs1_h2_val == -3
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000fffd02000002;  op2val:0x04dffffff87fff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xc000fffd02000002, 0x04dffffff87fff, x30, x3, 384, x4)

inst_42:
// rs1_h1_val == 128, rs2_h1_val == 2, rs2_h2_val == 1024
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000800800007;  op2val:0xffef04000002ffdf
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x40000800800007, 0xffef04000002ffdf, x30, x3, 400, x4)

inst_43:
// rs1_h1_val == 64, rs2_h1_val == 16384, rs1_h2_val == 128
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff00800040fff8;  op2val:0x2000ffbf4000fff9
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xf7ff00800040fff8, 0x2000ffbf4000fff9, x30, x3, 416, x4)

inst_44:
// rs1_h1_val == 8, rs2_h1_val == -3, rs2_h0_val == -32768
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0700000008fff6;  op2val:0x200fff9fffd8000
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x0700000008fff6, 0x200fff9fffd8000, x30, x3, 432, x4)

inst_45:
// rs1_h1_val == 2, rs1_h2_val == -5, rs1_h3_val == 8
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fffb0002ffef;  op2val:0x10c000fefff7ff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x08fffb0002ffef, 0x10c000fefff7ff, x30, x3, 448, x4)

inst_46:
// rs1_h1_val == 1, rs2_h1_val == 4096
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff800100001fff6;  op2val:0x20fff81000ff7f
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfff800100001fff6, 0x20fff81000ff7f, x30, x3, 464, x4)

inst_47:
// rs1_h1_val == -1, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfc000ffffffef;  op2val:0x1000ffbf0200ffbf
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xffbfc000ffffffef, 0x1000ffbf0200ffbf, x30, x3, 480, x4)

inst_48:
// rs1_h0_val == -8193, rs2_h0_val == 8, rs2_h2_val == 21845
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000dfffc000dfff;  op2val:0xfffd555500800008
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x1000dfffc000dfff, 0xfffd555500800008, x30, x3, 496, x4)

inst_49:
// rs1_h0_val == -1025, rs2_h0_val == -16385
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0755550008fbff;  op2val:0x4000fffa1000bfff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x0755550008fbff, 0x4000fffa1000bfff, x30, x3, 512, x4)

inst_50:
// rs1_h0_val == -513, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffd0010fdff;  op2val:0x0700400002feff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfffdfffd0010fdff, 0x0700400002feff, x30, x3, 528, x4)

inst_51:
// rs1_h0_val == -257, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09ffbf0008feff;  op2val:0xffdf00011000fff9
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x09ffbf0008feff, 0xffdf00011000fff9, x30, x3, 544, x4)

inst_52:
// rs1_h0_val == -65, rs1_h2_val == -4097, rs2_h2_val == -21846, rs2_h0_val == -3, rs2_h1_val == 2048
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffefffff7fffbf;  op2val:0x01aaaa0800fffd
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfdffefffff7fffbf, 0x01aaaa0800fffd, x30, x3, 560, x4)

inst_53:
// rs1_h0_val == -33, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffffbffffdf;  op2val:0x06000408000400
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfffafffffbffffdf, 0x06000408000400, x30, x3, 576, x4)

inst_54:
// rs1_h0_val == -3, rs1_h1_val == -21846, rs2_h2_val == -4097
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff9aaaafffd;  op2val:0xfff7effffffd0020
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xf7fffff9aaaafffd, 0xfff7effffffd0020, x30, x3, 592, x4)

inst_55:
// rs1_h0_val == 4096, rs1_h3_val == 16
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10080010001000;  op2val:0x2000009ffdf3fff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x10080010001000, 0x2000009ffdf3fff, x30, x3, 608, x4)

inst_56:
// rs1_h0_val == 1024, rs1_h3_val == 4, rs2_h0_val == 16, rs2_h1_val == 8
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fffdfff70400;  op2val:0x01000100080010
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x04fffdfff70400, 0x01000100080010, x30, x3, 624, x4)

inst_57:
// rs1_h0_val == 512, rs2_h2_val == -1, rs2_h1_val == -9
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8f7ffffff0200;  op2val:0xff7ffffffff7aaaa
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfff8f7ffffff0200, 0xff7ffffffff7aaaa, x30, x3, 640, x4)

inst_58:
// rs1_h0_val == 128, rs1_h3_val == -9
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7002000070080;  op2val:0x055555aaaafff6
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfff7002000070080, 0x055555aaaafff6, x30, x3, 656, x4)

inst_59:
// rs2_h1_val == 1, rs1_h3_val == 512
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x200000202000080;  op2val:0xc00040000001fff9
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x200000202000080, 0xc00040000001fff9, x30, x3, 672, x4)

inst_60:
// rs2_h1_val == -1, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fff9ffeffffc;  op2val:0xfff60000fffffff7
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x10fff9ffeffffc, 0xfff60000fffffff7, x30, x3, 688, x4)

inst_61:
// rs2_h0_val == -1025, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0002fff8ffef;  op2val:0x405555fdfffbff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xffbf0002fff8ffef, 0x405555fdfffbff, x30, x3, 704, x4)

inst_62:
// rs2_h0_val == -513, rs2_h2_val == -2049
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8aaaa0004efff;  op2val:0x10f7fffffefdff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfff8aaaa0004efff, 0x10f7fffffefdff, x30, x3, 720, x4)

inst_63:
// rs2_h0_val == -5, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x08efff0008fffc;  op2val:0x1000fbfffbfffffb
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x08efff0008fffc, 0x1000fbfffbfffffb, x30, x3, 736, x4)

inst_64:
// rs2_h0_val == 16384, rs1_h3_val == -32768, rs2_h2_val == -129
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800000080040ffef;  op2val:0x05ff7ff7ff4000
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x800000080040ffef, 0x05ff7ff7ff4000, x30, x3, 752, x4)

inst_65:
// rs2_h0_val == 8192, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff2000ffbf0004;  op2val:0xffdf000400012000
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x3fff2000ffbf0004, 0xffdf000400012000, x30, x3, 768, x4)

inst_66:
// rs2_h0_val == 512, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xc00000050800fffc;  op2val:0xffef0005fffb0200
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xc00000050800fffc, 0xffef0005fffb0200, x30, x3, 784, x4)

inst_67:
// rs2_h0_val == 256, rs1_h3_val == 8192
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffdf7fffbff;  op2val:0x02fff700020100
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x2000fffdf7fffbff, 0x02fff700020100, x30, x3, 800, x4)

inst_68:
// rs2_h0_val == 0, rs1_h0_val == 32, rs2_h2_val == 256, rs1_h3_val == -1025
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffaf7ff0020;  op2val:0x3fff010000080000
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfbfffffaf7ff0020, 0x3fff010000080000, x30, x3, 816, x4)

inst_69:
// rs1_h3_val == 21845, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x555500020400fffb;  op2val:0x7fffffbffff6fff9
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x555500020400fffb, 0x7fffffbffff6fff9, x30, x3, 832, x4)

inst_70:
// rs1_h3_val == -16385, rs2_h2_val == -257
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff000020000005;  op2val:0xfbfffeff00400001
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xbfff000020000005, 0xfbfffeff00400001, x30, x3, 848, x4)

inst_71:
// rs1_h0_val == 64, rs1_h3_val == 1024
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400dffffffc0040;  op2val:0x00000108000006
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x400dffffffc0040, 0x00000108000006, x30, x3, 864, x4)

inst_72:
// rs1_h0_val == 16, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x055555ffdf0010;  op2val:0xfffcfeffff7f4000
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x055555ffdf0010, 0xfffcfeffff7f4000, x30, x3, 880, x4)

inst_73:
// rs1_h3_val == -257, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffaaaafffe3fff;  op2val:0x40000201000feff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfeffaaaafffe3fff, 0x40000201000feff, x30, x3, 896, x4)

inst_74:
// rs1_h0_val == 0, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10080002000000;  op2val:0xffeffffa0000feff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x10080002000000, 0xffeffffa0000feff, x30, x3, 912, x4)

inst_75:
// rs1_h0_val == -1, rs1_h1_val == -16385
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x030009bfffffff;  op2val:0xfffd0005fffcfff7
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x030009bfffffff, 0xfffd0005fffcfff7, x30, x3, 928, x4)

inst_76:
// rs2_h3_val == -1, rs1_h1_val == -8193, rs2_h1_val == -4097
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0000dffffffd;  op2val:0xfffffff7efff5555
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfbff0000dffffffd, 0xfffffff7efff5555, x30, x3, 944, x4)

inst_77:
// rs1_h3_val == 16384, rs2_h2_val == -33
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40005555ffdffff9;  op2val:0x10ffdffbfffff9
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x40005555ffdffff9, 0x10ffdffbfffff9, x30, x3, 960, x4)

inst_78:
// rs2_h2_val == -16385, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff7fff0003fff6;  op2val:0xbfffbfff00804000
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfdff7fff0003fff6, 0xbfffbfff00804000, x30, x3, 976, x4)

inst_79:
// rs2_h2_val == -513, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000002c0000002;  op2val:0xf7fffdff8000fff6
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x1000002c0000002, 0xf7fffdff8000fff6, x30, x3, 992, x4)

inst_80:
// rs1_h3_val == 32, rs2_h1_val == 1024
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20efff0002feff;  op2val:0xfffffdff0400c000
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x20efff0002feff, 0xfffffdff0400c000, x30, x3, 1008, x4)

inst_81:
// rs1_h3_val == 1, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0100403ffffff6;  op2val:0xfffffffafffcfffd
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x0100403ffffff6, 0xfffffffafffcfffd, x30, x3, 1024, x4)

inst_82:
// rs1_h3_val == 0, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0000200001ffef;  op2val:0xffdfffff10007fff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x0000200001ffef, 0xffdfffff10007fff, x30, x3, 1040, x4)

inst_83:
// rs1_h3_val == -1, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff40001000fbff;  op2val:0x4002000fff6dfff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xffff40001000fbff, 0x4002000fff6dfff, x30, x3, 1056, x4)

inst_84:
// rs2_h2_val == -3, rs1_h2_val == -33
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffdf4000fff6;  op2val:0xfffafffd8000fffd
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xffdfffdf4000fff6, 0xfffafffd8000fffd, x30, x3, 1072, x4)

inst_85:
// rs2_h2_val == -32768, rs1_h2_val == 1
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800001fffafffb;  op2val:0x40008000fffddfff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x800001fffafffb, 0x40008000fffddfff, x30, x3, 1088, x4)

inst_86:
// rs1_h2_val == -16385, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x00bffffff8ff7f;  op2val:0x03fff7aaaadfff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x00bffffff8ff7f, 0x03fff7aaaadfff, x30, x3, 1104, x4)

inst_87:
// rs2_h2_val == 4096, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffc000fffbfff8;  op2val:0x10001000fbffc000
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xbfffc000fffbfff8, 0x10001000fbffc000, x30, x3, 1120, x4)

inst_88:
// rs2_h2_val == 2048, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0008fffd0020;  op2val:0x0408007fff0001
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xf7ff0008fffd0020, 0x0408007fff0001, x30, x3, 1136, x4)

inst_89:
// rs1_h2_val == 4096, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9100000020002;  op2val:0x4000fff9feff0400
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfff9100000020002, 0x4000fff9feff0400, x30, x3, 1152, x4)

inst_90:
// rs2_h1_val == -16385, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfff7c0000100;  op2val:0xfff6fffabfffdfff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfffbfff7c0000100, 0xfff6fffabfffdfff, x30, x3, 1168, x4)

inst_91:
// rs1_h2_val == 1024, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0400ffffdfff;  op2val:0x40000050001fffd
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xbfff0400ffffdfff, 0x40000050001fffd, x30, x3, 1184, x4)

inst_92:
// rs2_h1_val == -8193, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x07c000dfffaaaa;  op2val:0x40fff6dfffefff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x07c000dfffaaaa, 0x40fff6dfffefff, x30, x3, 1200, x4)

inst_93:
// rs1_h2_val == 256, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff01000100ff7f;  op2val:0x800fffbfff60400
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfbff01000100ff7f, 0x800fffbfff60400, x30, x3, 1216, x4)

inst_94:
// rs2_h2_val == 16, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffeff7ffdfff;  op2val:0xfffc00100005ffbf
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfeffffeff7ffdfff, 0xfffc00100005ffbf, x30, x3, 1232, x4)

inst_95:
// rs2_h1_val == 256, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff3fff00043fff;  op2val:0x3fff55550100ffff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xefff3fff00043fff, 0x3fff55550100ffff, x30, x3, 1248, x4)

inst_96:
// rs2_h1_val == -17, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fffb0200fffc;  op2val:0x800c000ffefaaaa
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x09fffb0200fffc, 0x800c000ffefaaaa, x30, x3, 1264, x4)

inst_97:
// rs1_h1_val == 32767, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffc7fff0100;  op2val:0x400fff7aaaadfff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfffafffc7fff0100, 0x400fff7aaaadfff, x30, x3, 1280, x4)

inst_98:
// rs2_h2_val == 512, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa8000fffafff9;  op2val:0xfff6020000087fff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfffa8000fffafff9, 0xfff6020000087fff, x30, x3, 1296, x4)

inst_99:
// rs1_h2_val == -513, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fdff0200efff;  op2val:0x8000fff8fdffdfff
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x00fdff0200efff, 0x8000fff8fdffdfff, x30, x3, 1312, x4)

inst_100:
// rs1_h1_val == -513, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100800fdff0003;  op2val:0x80fffe00080200
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x100800fdff0003, 0x80fffe00080200, x30, x3, 1328, x4)

inst_101:
// rs1_h1_val == -257, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fff8feff0004;  op2val:0xfff6c0000100fffc
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x80fff8feff0004, 0xfff6c0000100fffc, x30, x3, 1344, x4)

inst_102:
// rs1_h1_val == -4097, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffefeffff7ff;  op2val:0x04fffedfff4000
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfff6ffefeffff7ff, 0x04fffedfff4000, x30, x3, 1360, x4)

inst_103:
// rs1_h3_val == 2048, 
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800fbfffffdfbff;  op2val:0xf7ff020001000080
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0x800fbfffffdfbff, 0xf7ff020001000080, x30, x3, 1376, x4)

inst_104:
// rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h0_val == -21846, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val == 4, rs1_h3_val == -65, rs1_h2_val == -257, rs2_h1_val == 128, rs2_h3_val == -16385
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffeff0004fff8;  op2val:0xbffffff80080aaaa
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xffbffeff0004fff8, 0xbffffff80080aaaa, x30, x3, 1392, x4)

inst_105:
// rs2_h3_val == 32767, rs2_h1_val == 32767, rs2_h0_val == 2, rs1_h2_val == -8193, rs1_h0_val == 21845, rs2_h2_val == 64
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6dfff55555555;  op2val:0x7fff00407fff0002
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfff6dfff55555555, 0x7fff00407fff0002, x30, x3, 1408, x4)

inst_106:
// rs2_h3_val == 16, rs1_h3_val == -513, rs1_h1_val == 256, rs1_h0_val == 8, rs1_h2_val == 21845
// opcode: khmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff555501000008;  op2val:0x10000500400007
TEST_PKRR_OP(khmtt16, x31, x30, x29, 0x0000000000000000, 0xfdff555501000008, 0x10000500400007, x30, x3, 1424, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 180*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
