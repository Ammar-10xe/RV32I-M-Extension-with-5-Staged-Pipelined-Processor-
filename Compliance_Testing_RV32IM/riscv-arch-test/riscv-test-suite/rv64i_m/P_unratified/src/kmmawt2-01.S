
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmmawt2 instruction of the RISC-V RV64PZicsr extension for the kmmawt2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmmawt2)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x5, rs2==x22, rd==x5, rs1_w0_val == -2147483648, rs2_h2_val == -1, rs2_h3_val == -32768, rs1_w1_val == 0
// opcode: kmmawt2 ; op1:x5; op2:x22; dest:x5; op1val:0x00000080000000;  op2val:0x8000fffffffc0007
TEST_PKRR_OP(kmmawt2, x5, x5, x22, 0x0000000000000000, 0x00000080000000, 0x8000fffffffc0007, x5, x6, 0, x15)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x4, rs2==x9, rd==x13, rs2_h3_val == -21846, rs1_w0_val == -1025, rs2_h0_val == -513, rs1_w1_val == 1048576
// opcode: kmmawt2 ; op1:x4; op2:x9; dest:x13; op1val:0x100000fffffbff;  op2val:0xaaaac0000006fdff
TEST_PKRR_OP(kmmawt2, x13, x4, x9, 0x0000000000000000, 0x100000fffffbff, 0xaaaac0000006fdff, x4, x6, 16, x15)

inst_2:
// rs1 == rs2 != rd, rs1==x7, rs2==x7, rd==x1, rs2_h3_val == 21845, rs2_h2_val == 8, rs2_h1_val == 32767, rs2_h0_val == 0, rs1_w0_val == 8, rs1_w1_val == -16777217
// opcode: kmmawt2 ; op1:x7; op2:x7; dest:x1; op1val:0xfeffffff00000008;  op2val:0x555500087fff0000
TEST_PKRR_OP(kmmawt2, x1, x7, x7, 0x0000000000000000, 0xfeffffff00000008, 0x555500087fff0000, x7, x6, 32, x15)

inst_3:
// rs1 == rs2 == rd, rs1==x20, rs2==x20, rd==x20, rs2_h3_val == 32767, rs1_w1_val == 67108864, rs2_h0_val == 4, rs1_w0_val == 512, rs2_h1_val == -4097
// opcode: kmmawt2 ; op1:x20; op2:x20; dest:x20; op1val:0x400000000000200;  op2val:0x7fffffffefff0004
TEST_PKRR_OP(kmmawt2, x20, x20, x20, 0x0000000000000000, 0x400000000000200, 0x7fffffffefff0004, x20, x6, 48, x15)

inst_4:
// rs2 == rd != rs1, rs1==x0, rs2==x31, rd==x31, rs2_h3_val == -16385, rs1_w1_val == -257, rs1_w0_val == 32, rs2_h0_val == -4097, rs2_h2_val == -9
// opcode: kmmawt2 ; op1:x0; op2:x31; dest:x31; op1val:0xfffffeff00000020;  op2val:0xbffffff70009efff
TEST_PKRR_OP(kmmawt2, x31, x0, x31, 0x0000000000000000, 0xfffffeff00000020, 0xbffffff70009efff, x0, x6, 64, x15)

inst_5:
// rs1==x28, rs2==x14, rd==x22, rs2_h3_val == -8193, rs1_w1_val == 1431655765, rs2_h1_val == 32, rs1_w0_val == 64
// opcode: kmmawt2 ; op1:x28; op2:x14; dest:x22; op1val:0x5555555500000040;  op2val:0xdfff000900200000
TEST_PKRR_OP(kmmawt2, x22, x28, x14, 0x0000000000000000, 0x5555555500000040, 0xdfff000900200000, x28, x6, 80, x15)

inst_6:
// rs1==x24, rs2==x27, rd==x14, rs2_h3_val == -4097, rs2_h1_val == -16385, rs2_h2_val == 256
// opcode: kmmawt2 ; op1:x24; op2:x27; dest:x14; op1val:0x00000000000009;  op2val:0xefff0100bfff0000
TEST_PKRR_OP(kmmawt2, x14, x24, x27, 0x0000000000000000, 0x00000000000009, 0xefff0100bfff0000, x24, x6, 96, x15)

inst_7:
// rs1==x30, rs2==x2, rd==x16, rs2_h3_val == -2049, rs2_h1_val == -1025, rs1_w1_val == -3, rs1_w0_val == 4194304
// opcode: kmmawt2 ; op1:x30; op2:x2; dest:x16; op1val:0xfffffffd00400000;  op2val:0xf7fffffafbff0000
TEST_PKRR_OP(kmmawt2, x16, x30, x2, 0x0000000000000000, 0xfffffffd00400000, 0xf7fffffafbff0000, x30, x6, 112, x15)

inst_8:
// rs1==x11, rs2==x24, rd==x3, rs2_h3_val == -1025, rs1_w1_val == 16384, rs1_w0_val == 2147483647
// opcode: kmmawt2 ; op1:x11; op2:x24; dest:x3; op1val:0x0040007fffffff;  op2val:0xfbfffffafffa3fff
TEST_PKRR_OP(kmmawt2, x3, x11, x24, 0x0000000000000000, 0x0040007fffffff, 0xfbfffffafffa3fff, x11, x6, 128, x15)

inst_9:
// rs1==x19, rs2==x5, rd==x7, rs2_h3_val == -513, rs1_w0_val == 16384, rs2_h2_val == -2, rs2_h0_val == -129, rs2_h1_val == -3, rs1_w1_val == 8388608
// opcode: kmmawt2 ; op1:x19; op2:x5; dest:x7; op1val:0x80000000004000;  op2val:0xfdfffffefffdff7f
TEST_PKRR_OP(kmmawt2, x7, x19, x5, 0x0000000000000000, 0x80000000004000, 0xfdfffffefffdff7f, x19, x6, 144, x15)

inst_10:
// rs1==x10, rs2==x18, rd==x29, rs2_h3_val == -257, rs2_h0_val == 1024, rs2_h2_val == 1, rs2_h1_val == -5, rs1_w0_val == -268435457, rs1_w1_val == 2097152
// opcode: kmmawt2 ; op1:x10; op2:x18; dest:x29; op1val:0x200000efffffff;  op2val:0xfeff0001fffb0400
TEST_PKRR_OP(kmmawt2, x29, x10, x18, 0x0000000000000000, 0x200000efffffff, 0xfeff0001fffb0400, x10, x6, 160, x15)

inst_11:
// rs1==x27, rs2==x8, rd==x0, rs2_h3_val == -129, rs1_w0_val == -4097, rs2_h0_val == -1025, rs2_h2_val == 0
// opcode: kmmawt2 ; op1:x27; op2:x8; dest:x0; op1val:0xfffffff8ffffefff;  op2val:0xff7f00003ffffbff
TEST_PKRR_OP(kmmawt2, x0, x27, x8, 0x0000000000000000, 0xfffffff8ffffefff, 0xff7f00003ffffbff, x27, x6, 176, x15)

inst_12:
// rs1==x21, rs2==x0, rd==x25, rs2_h3_val == -65, rs2_h2_val == -16385, rs1_w1_val == 256, rs2_h1_val == -2, rs1_w0_val == 67108864
// opcode: kmmawt2 ; op1:x21; op2:x0; dest:x25; op1val:0x00010004000000;  op2val:0xffbfbffffffefffa
TEST_PKRR_OP(kmmawt2, x25, x21, x0, 0x0000000000000000, 0x00010004000000, 0xffbfbffffffefffa, x21, x6, 192, x15)

inst_13:
// rs1==x1, rs2==x28, rd==x12, rs2_h3_val == -33, rs1_w1_val == 131072, rs2_h1_val == -33, rs2_h2_val == -513
// opcode: kmmawt2 ; op1:x1; op2:x28; dest:x12; op1val:0x020000c0000000;  op2val:0xffdffdffffdfefff
TEST_PKRR_OP(kmmawt2, x12, x1, x28, 0x0000000000000000, 0x020000c0000000, 0xffdffdffffdfefff, x1, x6, 208, x15)

inst_14:
// rs1==x29, rs2==x23, rd==x17, rs2_h3_val == -17, rs2_h2_val == 16384, rs1_w0_val == -2097153, rs1_w1_val == 4194304, rs2_h1_val == 16384
// opcode: kmmawt2 ; op1:x29; op2:x23; dest:x17; op1val:0x400000ffdfffff;  op2val:0xffef400040003fff
TEST_PKRR_OP(kmmawt2, x17, x29, x23, 0x0000000000000000, 0x400000ffdfffff, 0xffef400040003fff, x29, x6, 224, x3)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_15:
// rs1==x25, rs2==x6, rd==x4, rs2_h3_val == -9, rs1_w0_val == -17, rs1_w1_val == -1, rs2_h0_val == -3, rs2_h1_val == -9
// opcode: kmmawt2 ; op1:x25; op2:x6; dest:x4; op1val:0xffffffffffffffef;  op2val:0xfff70100fff7fffd
TEST_PKRR_OP(kmmawt2, x4, x25, x6, 0x0000000000000000, 0xffffffffffffffef, 0xfff70100fff7fffd, x25, x5, 0, x3)

inst_16:
// rs1==x15, rs2==x16, rd==x2, rs2_h3_val == -5, rs2_h2_val == 4096, rs1_w0_val == 32768
// opcode: kmmawt2 ; op1:x15; op2:x16; dest:x2; op1val:0xfffffeff00008000;  op2val:0xfffb1000fff9fffd
TEST_PKRR_OP(kmmawt2, x2, x15, x16, 0x0000000000000000, 0xfffffeff00008000, 0xfffb1000fff9fffd, x15, x5, 16, x3)

inst_17:
// rs1==x13, rs2==x19, rd==x23, rs2_h3_val == -3, rs2_h1_val == 256, rs1_w1_val == -1025, rs1_w0_val == 1073741824, rs2_h0_val == -9, rs2_h2_val == 128
// opcode: kmmawt2 ; op1:x13; op2:x19; dest:x23; op1val:0xfffffbff40000000;  op2val:0xfffd00800100fff7
TEST_PKRR_OP(kmmawt2, x23, x13, x19, 0x0000000000000000, 0xfffffbff40000000, 0xfffd00800100fff7, x13, x5, 32, x3)

inst_18:
// rs1==x6, rs2==x15, rd==x11, rs2_h3_val == -2, rs2_h2_val == 32, rs1_w1_val == -32769, rs1_w0_val == -65537
// opcode: kmmawt2 ; op1:x6; op2:x15; dest:x11; op1val:0xffff7ffffffeffff;  op2val:0xfffe0020effffffd
TEST_PKRR_OP(kmmawt2, x11, x6, x15, 0x0000000000000000, 0xffff7ffffffeffff, 0xfffe0020effffffd, x6, x5, 48, x3)

inst_19:
// rs1==x26, rs2==x10, rd==x30, rs2_h3_val == 16384, rs1_w1_val == -513, rs2_h1_val == 1, rs2_h0_val == 1
// opcode: kmmawt2 ; op1:x26; op2:x10; dest:x30; op1val:0xfffffdff00000006;  op2val:0x4000000100010001
TEST_PKRR_OP(kmmawt2, x30, x26, x10, 0x0000000000000000, 0xfffffdff00000006, 0x4000000100010001, x26, x5, 64, x3)

inst_20:
// rs1==x17, rs2==x30, rd==x28, rs2_h3_val == 8192, rs2_h2_val == -8193, rs1_w1_val == -33, rs2_h0_val == 21845
// opcode: kmmawt2 ; op1:x17; op2:x30; dest:x28; op1val:0xffffffdf00004000;  op2val:0x2000dfff00035555
TEST_PKRR_OP(kmmawt2, x28, x17, x30, 0x0000000000000000, 0xffffffdf00004000, 0x2000dfff00035555, x17, x5, 80, x3)

inst_21:
// rs1==x14, rs2==x4, rd==x18, rs2_h3_val == 4096, rs2_h2_val == 8192, rs1_w1_val == -2, rs2_h1_val == -8193, rs2_h0_val == 128
// opcode: kmmawt2 ; op1:x14; op2:x4; dest:x18; op1val:0xfffffffe00000008;  op2val:0x10002000dfff0080
TEST_PKRR_OP(kmmawt2, x18, x14, x4, 0x0000000000000000, 0xfffffffe00000008, 0x10002000dfff0080, x14, x5, 96, x3)

inst_22:
// rs1==x18, rs2==x17, rd==x24, rs2_h3_val == 2048, rs2_h2_val == -33, rs1_w1_val == 512, rs1_w0_val == 256
// opcode: kmmawt2 ; op1:x18; op2:x17; dest:x24; op1val:0x00020000000100;  op2val:0x800ffdf0003fdff
TEST_PKRR_OP(kmmawt2, x24, x18, x17, 0x0000000000000000, 0x00020000000100, 0x800ffdf0003fdff, x18, x5, 112, x3)

inst_23:
// rs1==x22, rs2==x25, rd==x26, rs2_h3_val == 1024, rs1_w1_val == -131073, rs1_w0_val == 128, rs2_h2_val == -32768
// opcode: kmmawt2 ; op1:x22; op2:x25; dest:x26; op1val:0xfffdffff00000080;  op2val:0x400800000090005
TEST_PKRR_OP(kmmawt2, x26, x22, x25, 0x0000000000000000, 0xfffdffff00000080, 0x400800000090005, x22, x5, 128, x3)

inst_24:
// rs1==x12, rs2==x1, rd==x8, rs2_h3_val == 512, rs2_h0_val == 16384, rs1_w1_val == -262145, rs2_h1_val == -2049
// opcode: kmmawt2 ; op1:x12; op2:x1; dest:x8; op1val:0xfffbffff00000200;  op2val:0x200fff7f7ff4000
TEST_PKRR_OP(kmmawt2, x8, x12, x1, 0x0000000000000000, 0xfffbffff00000200, 0x200fff7f7ff4000, x12, x5, 144, x3)

inst_25:
// rs1==x31, rs2==x11, rd==x10, rs2_h3_val == 256, rs2_h1_val == -21846, rs1_w0_val == -33, rs2_h2_val == -21846, rs1_w1_val == 134217728
// opcode: kmmawt2 ; op1:x31; op2:x11; dest:x10; op1val:0x8000000ffffffdf;  op2val:0x100aaaaaaaa0000
TEST_PKRR_OP(kmmawt2, x10, x31, x11, 0x0000000000000000, 0x8000000ffffffdf, 0x100aaaaaaaa0000, x31, x5, 160, x3)

inst_26:
// rs1==x8, rs2==x12, rd==x9, rs2_h3_val == 128, rs2_h0_val == -33, rs1_w1_val == -524289
// opcode: kmmawt2 ; op1:x8; op2:x12; dest:x9; op1val:0xfff7ffff00000007;  op2val:0x8000064000ffdf
TEST_PKRR_OP(kmmawt2, x9, x8, x12, 0x0000000000000000, 0xfff7ffff00000007, 0x8000064000ffdf, x8, x5, 176, x3)

inst_27:
// rs1==x2, rs2==x29, rd==x27, rs2_h3_val == 64, rs2_h0_val == 32767
// opcode: kmmawt2 ; op1:x2; op2:x29; dest:x27; op1val:0x800000000000005;  op2val:0x4040003fff7fff
TEST_PKRR_OP(kmmawt2, x27, x2, x29, 0x0000000000000000, 0x800000000000005, 0x4040003fff7fff, x2, x5, 192, x3)

inst_28:
// rs1==x9, rs2==x3, rd==x19, rs2_h3_val == 32, rs1_w1_val == 33554432, rs2_h2_val == 512, rs1_w0_val == -129
// opcode: kmmawt2 ; op1:x9; op2:x3; dest:x19; op1val:0x2000000ffffff7f;  op2val:0x200200fff6fffd
TEST_PKRR_OP(kmmawt2, x19, x9, x3, 0x0000000000000000, 0x2000000ffffff7f, 0x200200fff6fffd, x9, x5, 208, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x16, rs2==x26, rd==x21, rs2_h3_val == 16, rs2_h2_val == 2048, rs1_w0_val == -16777217, rs2_h0_val == -32768
// opcode: kmmawt2 ; op1:x16; op2:x26; dest:x21; op1val:0xfffbfffffeffffff;  op2val:0x100800bfff8000
TEST_PKRR_OP(kmmawt2, x21, x16, x26, 0x0000000000000000, 0xfffbfffffeffffff, 0x100800bfff8000, x16, x1, 0, x2)

inst_30:
// rs1==x3, rs2==x21, rd==x6, rs2_h3_val == 8, rs1_w1_val == 64, rs2_h2_val == 1024, rs2_h1_val == -17, rs1_w0_val == -2049
// opcode: kmmawt2 ; op1:x3; op2:x21; dest:x6; op1val:0x000040fffff7ff;  op2val:0x080400ffef0080
TEST_PKRR_OP(kmmawt2, x6, x3, x21, 0x0000000000000000, 0x000040fffff7ff, 0x080400ffef0080, x3, x1, 16, x2)

inst_31:
// rs1==x23, rs2==x13, rd==x15, rs2_h3_val == 4, rs1_w1_val == -17
// opcode: kmmawt2 ; op1:x23; op2:x13; dest:x15; op1val:0xffffffef40000000;  op2val:0x04dffffffc8000
TEST_PKRR_OP(kmmawt2, x15, x23, x13, 0x0000000000000000, 0xffffffef40000000, 0x04dffffffc8000, x23, x1, 32, x2)

inst_32:
// rs2_h3_val == 2, rs2_h0_val == -8193, rs1_w1_val == 4096
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x0010007fffffff;  op2val:0x02c0000001dfff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x0010007fffffff, 0x02c0000001dfff, x30, x1, 48, x2)

inst_33:
// rs2_h3_val == 1, rs2_h0_val == -2049, rs2_h2_val == 21845, rs1_w0_val == -257
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffeff;  op2val:0x015555fffcf7ff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x4000000fffffeff, 0x015555fffcf7ff, x30, x1, 64, x2)

inst_34:
// rs2_h3_val == 0, rs2_h2_val == 16, rs1_w1_val == -1048577
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000007;  op2val:0x000010efff0005
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xffefffff00000007, 0x000010efff0005, x30, x1, 80, x2)

inst_35:
// rs2_h3_val == -1, rs2_h1_val == 16
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000009;  op2val:0xffff000000100004
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x02000000000009, 0xffff000000100004, x30, x1, 96, x2)

inst_36:
// rs2_h2_val == 32767, rs2_h0_val == -65, rs2_h1_val == -257, rs1_w0_val == 1024
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000400;  op2val:0x3fff7ffffeffffbf
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x80000000000400, 0x3fff7ffffeffffbf, x30, x1, 112, x2)

inst_37:
// rs2_h2_val == -4097, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000040;  op2val:0x20efffffef0007
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x00000900000040, 0x20efffffef0007, x30, x1, 128, x2)

inst_38:
// rs1_w0_val == 2097152, rs2_h1_val == 64, rs2_h0_val == -257
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00200000;  op2val:0x0400000040feff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfffffffe00200000, 0x0400000040feff, x30, x1, 144, x2)

inst_39:
// rs1_w0_val == 1048576, rs1_w1_val == -2049
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00100000;  op2val:0x80005555f7fffff6
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00100000, 0x80005555f7fffff6, x30, x1, 160, x2)

inst_40:
// rs1_w0_val == 524288, rs2_h1_val == 512
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000080000;  op2val:0xfffa000502000005
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x02000000080000, 0xfffa000502000005, x30, x1, 176, x2)

inst_41:
// rs1_w0_val == 262144, rs1_w1_val == -1073741825, rs2_h1_val == 0, rs2_h2_val == 4
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00040000;  op2val:0x01000400000006
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xbfffffff00040000, 0x01000400000006, x30, x1, 192, x2)

inst_42:
// rs1_w0_val == 131072, rs2_h0_val == 2048
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00020000;  op2val:0xfff90010fffa0800
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xffffffff00020000, 0xfff90010fffa0800, x30, x1, 208, x2)

inst_43:
// rs1_w0_val == 65536, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000010000;  op2val:0x1000000dfffffdf
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x02000000010000, 0x1000000dfffffdf, x30, x1, 224, x2)

inst_44:
// rs1_w0_val == 8192, rs2_h0_val == 16
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00002000;  op2val:0xfff6040002000010
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xffffffff00002000, 0xfff6040002000010, x30, x1, 240, x2)

inst_45:
// rs1_w0_val == 4096, rs1_w1_val == 32
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000001000;  op2val:0x7fffc00000010400
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x00002000001000, 0x7fffc00000010400, x30, x1, 256, x2)

inst_46:
// rs1_w0_val == 2048, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00000800;  op2val:0xfffcfff701000000
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000800, 0xfffcfff701000000, x30, x1, 272, x2)

inst_47:
// rs1_w0_val == 16, rs2_h0_val == -17, rs2_h2_val == -129
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000010;  op2val:0xefffff7f4000ffef
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x800000000000010, 0xefffff7f4000ffef, x30, x1, 288, x2)

inst_48:
// rs1_w0_val == 4, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000004;  op2val:0xfffdfffafffdc000
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x5555555500000004, 0xfffdfffafffdc000, x30, x1, 304, x2)

inst_49:
// rs1_w0_val == 2, rs2_h2_val == -17
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000002;  op2val:0x09ffeffffec000
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000002, 0x09ffeffffec000, x30, x1, 320, x2)

inst_50:
// rs1_w0_val == 1, rs1_w1_val == -4097
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000001;  op2val:0xffbf0000efff0080
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xffffefff00000001, 0xffbf0000efff0080, x30, x1, 336, x2)

inst_51:
// rs1_w0_val == 0, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000000;  op2val:0xfffbfff63fff4000
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x00000600000000, 0xfffbfff63fff4000, x30, x1, 352, x2)

inst_52:
// rs1_w0_val == -1, rs1_w1_val == -536870913
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffffff;  op2val:0xaaaa3ffff7ff0004
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffffff, 0xaaaa3ffff7ff0004, x30, x1, 368, x2)

inst_53:
// rs2_h2_val == -2049, rs1_w0_val == -8193
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffffdfff;  op2val:0x100f7fffffbfffc
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xffffffdfffffdfff, 0x100f7fffffbfffc, x30, x1, 384, x2)

inst_54:
// rs2_h2_val == -1025, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00002000;  op2val:0x04fbff7ffffff9
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfffffffe00002000, 0x04fbff7ffffff9, x30, x1, 400, x2)

inst_55:
// rs2_h2_val == -257, rs2_h0_val == 64, rs2_h1_val == 4096
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffffff9;  op2val:0x07feff10000040
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffffff9, 0x07feff10000040, x30, x1, 416, x2)

inst_56:
// rs2_h2_val == -65, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000003;  op2val:0x80ffbffffb7fff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x400000000000003, 0x80ffbffffb7fff, x30, x1, 432, x2)

inst_57:
// rs2_h2_val == -5, rs1_w0_val == 33554432, rs1_w1_val == 8192
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00200002000000;  op2val:0x4000fffbf7ff0004
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x00200002000000, 0x4000fffbf7ff0004, x30, x1, 448, x2)

inst_58:
// rs2_h2_val == -3, rs1_w1_val == -65
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffeffffff;  op2val:0x02fffd01007fff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xffffffbffeffffff, 0x02fffd01007fff, x30, x1, 464, x2)

inst_59:
// rs2_h2_val == 64, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000002;  op2val:0xffbf004000097fff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000002, 0xffbf004000097fff, x30, x1, 480, x2)

inst_60:
// rs2_h2_val == 2, rs1_w1_val == -67108865, rs2_h1_val == 21845, rs2_h0_val == 2
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffdfff;  op2val:0xffef000255550002
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfbffffffffffdfff, 0xffef000255550002, x30, x1, 496, x2)

inst_61:
// rs2_h1_val == -513, rs1_w0_val == -3
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffffffd;  op2val:0xfffa0400fdffff7f
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffffffd, 0xfffa0400fdffff7f, x30, x1, 512, x2)

inst_62:
// rs2_h1_val == -129, rs2_h0_val == -21846, rs1_w0_val == 8388608
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000800000;  op2val:0x7fff0008ff7faaaa
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x800000000800000, 0x7fff0008ff7faaaa, x30, x1, 528, x2)

inst_63:
// rs2_h1_val == -65, rs2_h0_val == -16385
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffffff7ff;  op2val:0x06efffffbfbfff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfffffdfffffff7ff, 0x06efffffbfbfff, x30, x1, 544, x2)

inst_64:
// rs2_h1_val == -32768, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000006;  op2val:0xffdf00408000fbff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xffffefff00000006, 0xffdf00408000fbff, x30, x1, 560, x2)

inst_65:
// rs2_h1_val == 8192, rs1_w1_val == 2
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000001;  op2val:0xc000c00020007fff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x00000200000001, 0xc000c00020007fff, x30, x1, 576, x2)

inst_66:
// rs2_h1_val == 2048, rs2_h0_val == 256
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000007;  op2val:0x8000fffd08000100
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000007, 0x8000fffd08000100, x30, x1, 592, x2)

inst_67:
// rs2_h1_val == 1024, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x000007c0000000;  op2val:0xaaaafff804003fff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x000007c0000000, 0xaaaafff804003fff, x30, x1, 608, x2)

inst_68:
// rs2_h1_val == 128, rs1_w1_val == 268435456
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffffc;  op2val:0x400aaaa0080ffbf
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x10000000fffffffc, 0x400aaaa0080ffbf, x30, x1, 624, x2)

inst_69:
// rs2_h1_val == 8, rs2_h0_val == 4096, rs1_w1_val == 524288
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x080000ffffffdf;  op2val:0xfffdfffe00081000
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x080000ffffffdf, 0xfffdfffe00081000, x30, x1, 640, x2)

inst_70:
// rs2_h1_val == 4, rs1_w1_val == 8
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffeffff;  op2val:0x04fff900040001
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x000008fffeffff, 0x04fff900040001, x30, x1, 656, x2)

inst_71:
// rs2_h0_val == 8192, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffffdf;  op2val:0xeffff7ff00402000
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffffdf, 0xeffff7ff00402000, x30, x1, 672, x2)

inst_72:
// rs2_h0_val == 512, rs1_w1_val == -2147483648
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000008000;  op2val:0xfdff0200fffa0200
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x8000000000008000, 0xfdff0200fffa0200, x30, x1, 688, x2)

inst_73:
// rs2_h0_val == 32, rs1_w1_val == 262144
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000200;  op2val:0xbffffffb7fff0020
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x04000000000200, 0xbffffffb7fff0020, x30, x1, 704, x2)

inst_74:
// rs2_h0_val == 8, rs1_w1_val == 4, rs1_w0_val == -1431655766
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x000004aaaaaaaa;  op2val:0x20008000dfff0008
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x000004aaaaaaaa, 0x20008000dfff0008, x30, x1, 720, x2)

inst_75:
// rs2_h0_val == -1, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffffa;  op2val:0xfffafefffffbffff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffffa, 0xfffafefffffbffff, x30, x1, 736, x2)

inst_76:
// rs1_w1_val == -1431655766, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000200;  op2val:0x4000fffdfffeffef
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000200, 0x4000fffdfffeffef, x30, x1, 752, x2)

inst_77:
// rs1_w1_val == 2147483647, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffffff8;  op2val:0xaaaaffeffffaffff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffffff8, 0xaaaaffeffffaffff, x30, x1, 768, x2)

inst_78:
// rs1_w1_val == -268435457, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffffff6;  op2val:0xdfffbfff80000009
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xeffffffffffffff6, 0xdfffbfff80000009, x30, x1, 784, x2)

inst_79:
// rs1_w1_val == -134217729, rs2_h1_val == -1
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff7fffffff;  op2val:0xfff84000ffffaaaa
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xf7ffffff7fffffff, 0xfff84000ffffaaaa, x30, x1, 800, x2)

inst_80:
// rs1_w1_val == -33554433, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000009;  op2val:0x3fff0040f7ff2000
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000009, 0x3fff0040f7ff2000, x30, x1, 816, x2)

inst_81:
// rs1_w1_val == -8388609, rs2_h0_val == -2
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff7fffffff;  op2val:0xffef7ffffefffffe
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xff7fffff7fffffff, 0xffef7ffffefffffe, x30, x1, 832, x2)

inst_82:
// rs1_w1_val == -4194305, rs2_h1_val == 2
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffff7ff;  op2val:0xfdff00090002fffd
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xffbffffffffff7ff, 0xfdff00090002fffd, x30, x1, 848, x2)

inst_83:
// rs1_w1_val == -2097153, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000400;  op2val:0xaaaa00090800fffc
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000400, 0xaaaa00090800fffc, x30, x1, 864, x2)

inst_84:
// rs1_w1_val == -65537, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffefff;  op2val:0x100800000010009
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffefff, 0x100800000010009, x30, x1, 880, x2)

inst_85:
// rs1_w1_val == -16385, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff04000000;  op2val:0xfefffffefffa7fff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xffffbfff04000000, 0xfefffffefffa7fff, x30, x1, 896, x2)

inst_86:
// rs1_w1_val == -8193, rs1_w0_val == -134217729
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffff7ffffff;  op2val:0xf7ff2000fff70004
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xffffdffff7ffffff, 0xf7ff2000fff70004, x30, x1, 912, x2)

inst_87:
// rs1_w1_val == -129, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000400;  op2val:0xfbffffff4000fffd
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000400, 0xfbffffff4000fffd, x30, x1, 928, x2)

inst_88:
// rs1_w1_val == -9, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000400;  op2val:0xfff7ffdf3fff0009
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfffffff700000400, 0xfff7ffdf3fff0009, x30, x1, 944, x2)

inst_89:
// rs1_w1_val == -5, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000400;  op2val:0xfffc40000008fff6
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000400, 0xfffc40000008fff6, x30, x1, 960, x2)

inst_90:
// rs1_w1_val == 1073741824, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000000;  op2val:0x05010000013fff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x4000000000000000, 0x05010000013fff, x30, x1, 976, x2)

inst_91:
// rs1_w1_val == 536870912, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffffbff;  op2val:0xfffafff6fbff0000
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x20000000fffffbff, 0xfffafff6fbff0000, x30, x1, 992, x2)

inst_92:
// rs1_w1_val == 65536, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x010000f7ffffff;  op2val:0xffdffffd00022000
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x010000f7ffffff, 0xffdffffd00022000, x30, x1, 1008, x2)

inst_93:
// rs1_w1_val == 32768, rs1_w0_val == 134217728
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00800008000000;  op2val:0xbfffdffffbff0800
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x00800008000000, 0xbfffdffffbff0800, x30, x1, 1024, x2)

inst_94:
// rs1_w1_val == 2048, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x000800aaaaaaaa;  op2val:0x030003fffffeff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x000800aaaaaaaa, 0x030003fffffeff, x30, x1, 1040, x2)

inst_95:
// rs1_w1_val == 1024, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x0004007fffffff;  op2val:0x3fff20001000ffbf
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x0004007fffffff, 0x3fff20001000ffbf, x30, x1, 1056, x2)

inst_96:
// rs1_w1_val == 128, rs1_w0_val == -513
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x000080fffffdff;  op2val:0xfbffffff0080fffc
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x000080fffffdff, 0xfbffffff0080fffc, x30, x1, 1072, x2)

inst_97:
// rs1_w1_val == 16, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000007;  op2val:0x09800010000040
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x00001000000007, 0x09800010000040, x30, x1, 1088, x2)

inst_98:
// rs1_w1_val == 1, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100080000;  op2val:0xfff80400fff6fdff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x00000100080000, 0xfff80400fff6fdff, x30, x1, 1104, x2)

inst_99:
// rs1_w0_val == 1431655765, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff55555555;  op2val:0x7ffffffcfefffff6
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xffffffff55555555, 0x7ffffffcfefffff6, x30, x1, 1120, x2)

inst_100:
// rs1_w0_val == -1073741825, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6bfffffff;  op2val:0x200fffa0002fff8
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfffffff6bfffffff, 0x200fffa0002fff8, x30, x1, 1136, x2)

inst_101:
// rs1_w0_val == -536870913, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffdfffffff;  op2val:0x06fffe00200005
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfff7ffffdfffffff, 0x06fffe00200005, x30, x1, 1152, x2)

inst_102:
// rs1_w0_val == -67108865, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x000002fbffffff;  op2val:0x80055550003f7ff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x000002fbffffff, 0x80055550003f7ff, x30, x1, 1168, x2)

inst_103:
// rs1_w0_val == -33554433, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x000007fdffffff;  op2val:0xfeff00037fff7fff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x000007fdffffff, 0xfeff00037fff7fff, x30, x1, 1184, x2)

inst_104:
// rs1_w0_val == -8388609, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x200000ff7fffff;  op2val:0xff7f0000fff80005
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x200000ff7fffff, 0xff7f0000fff80005, x30, x1, 1200, x2)

inst_105:
// rs1_w0_val == -4194305, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffbfffff;  op2val:0x800000080800fffc
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x7fffffffffbfffff, 0x800000080800fffc, x30, x1, 1216, x2)

inst_106:
// rs1_w0_val == -1048577, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffefffff;  op2val:0x2000400008000009
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x40000000ffefffff, 0x2000400008000009, x30, x1, 1232, x2)

inst_107:
// rs1_w0_val == -524289, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefff7ffff;  op2val:0xfff9effff7ff0020
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfffffffefff7ffff, 0xfff9effff7ff0020, x30, x1, 1248, x2)

inst_108:
// rs1_w0_val == -262145, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x000006fffbffff;  op2val:0x02fbff10000001
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x000006fffbffff, 0x02fbff10000001, x30, x1, 1264, x2)

inst_109:
// rs1_w0_val == -131073, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffdffff;  op2val:0xffeffffbfff9fffc
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffdffff, 0xffeffffbfff9fffc, x30, x1, 1280, x2)

inst_110:
// rs1_w0_val == -32769, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffff7fff;  op2val:0x0108000080fff9
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x010000ffff7fff, 0x0108000080fff9, x30, x1, 1296, x2)

inst_111:
// rs1_w0_val == -16385, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffffbfff;  op2val:0xffdffffe4000f7ff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfffffeffffffbfff, 0xffdffffe4000f7ff, x30, x1, 1312, x2)

inst_112:
// rs1_w0_val == -65, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555ffffffbf;  op2val:0xfffe00030007bfff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x55555555ffffffbf, 0xfffe00030007bfff, x30, x1, 1328, x2)

inst_113:
// rs1_w0_val == -9, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffffff7;  op2val:0x3fff0040f7ff0040
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x80000000fffffff7, 0x3fff0040f7ff0040, x30, x1, 1344, x2)

inst_114:
// rs1_w0_val == -5, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffffb;  op2val:0x400fffffffffdff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x4000000fffffffb, 0x400fffffffffdff, x30, x1, 1360, x2)

inst_115:
// rs1_w0_val == -2, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffafffffffe;  op2val:0x7fffff7f0100feff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfffffffafffffffe, 0x7fffff7f0100feff, x30, x1, 1376, x2)

inst_116:
// rs1_w0_val == 536870912, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000020000000;  op2val:0xaaaa0006aaaaffef
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x4000000020000000, 0xaaaa0006aaaaffef, x30, x1, 1392, x2)

inst_117:
// rs1_w0_val == 268435456, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00100010000000;  op2val:0x0300040008c000
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x00100010000000, 0x0300040008c000, x30, x1, 1408, x2)

inst_118:
// rs1_w1_val == 16777216, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x100000080000000;  op2val:0x40000010fdff8000
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x100000080000000, 0x40000010fdff8000, x30, x1, 1424, x2)

inst_119:
// rs2_h0_val == -5, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffdffff;  op2val:0xfff61000fffcfffb
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xffffffdffffdffff, 0xfff61000fffcfffb, x30, x1, 1440, x2)

inst_120:
// rs1_w0_val == 16777216, 
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00080001000000;  op2val:0x09ffff7ffffff6
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x00080001000000, 0x09ffff7ffffff6, x30, x1, 1456, x2)

inst_121:
// rs2_h3_val == 21845, rs2_h2_val == 8, rs2_h1_val == 32767, rs2_h0_val == 0, rs1_w0_val == 8, rs1_w1_val == -16777217
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000008;  op2val:0x555500087fff0000
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000008, 0x555500087fff0000, x30, x1, 1472, x2)

inst_122:
// rs2_h3_val == -16385, rs1_w1_val == -257, rs1_w0_val == 32, rs2_h0_val == -4097, rs2_h2_val == -9
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000020;  op2val:0xbffffff70009efff
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000020, 0xbffffff70009efff, x30, x1, 1488, x2)

inst_123:
// rs2_h3_val == -65, rs2_h2_val == -16385, rs1_w1_val == 256, rs2_h1_val == -2, rs1_w0_val == 67108864
// opcode: kmmawt2 ; op1:x30; op2:x29; dest:x31; op1val:0x00010004000000;  op2val:0xffbfbffffffefffa
TEST_PKRR_OP(kmmawt2, x31, x30, x29, 0x0000000000000000, 0x00010004000000, 0xffbfbffffffefffa, x30, x1, 1504, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 190*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
