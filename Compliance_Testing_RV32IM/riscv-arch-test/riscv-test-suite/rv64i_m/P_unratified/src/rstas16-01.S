
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rstas16 instruction of the RISC-V RV64PZicsr extension for the rstas16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",rstas16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:// rs1 == rd != rs2, rs1==x8, rs2==x23, rd==x8, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val == -21846, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs2_h0_val == -5, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 2048, rs2_h2_val == 1
// opcode: rstas16 ; op1:x8; op2:x23; dest:x8; op1val:0xaaaafffa3fff8000;  op2val:0xfff900010800fffb
TEST_RR_OP(rstas16, x8, x8, x23, 0x0000000000000000, 0xaaaafffa3fff8000, 0xfff900010800fffb, x3, 0, x7)

inst_1:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x27, rd==x22, rs1_h3_val == rs2_h3_val, rs2_h1_val == -4097, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h0_val == 4096, rs2_h0_val == -513, rs1_h1_val == 16, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h2_val == 32767
// opcode: rstas16 ; op1:x31; op2:x27; dest:x22; op1val:0x09fff800101000;  op2val:0x097fffeffffdff
TEST_RR_OP(rstas16, x22, x31, x27, 0x0000000000000000, 0x09fff800101000, 0x097fffeffffdff, x3, 8, x7)

inst_2:// rs1 == rs2 != rd, rs1==x24, rs2==x24, rd==x21, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 32, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == -33, rs2_h3_val == 8192, rs1_h3_val == -2049, rs1_h1_val == 32767, rs2_h0_val == -3, rs1_h0_val == 21845
// opcode: rstas16 ; op1:x24; op2:x24; dest:x21; op1val:0xf7ff00207fff5555;  op2val:0x20007fffffdffffd
TEST_RR_OP(rstas16, x21, x24, x24, 0x0000000000000000, 0xf7ff00207fff5555, 0x20007fffffdffffd, x3, 16, x7)

inst_3:// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val == 512, rs1_h3_val == 16, rs1_h1_val == 128, rs1_h0_val == 8, rs2_h0_val == -32768, rs2_h3_val == -21846, rs2_h2_val == 0
// opcode: rstas16 ; op1:x4; op2:x4; dest:x4; op1val:0x10020000800008;  op2val:0xaaaa000000078000
TEST_RR_OP(rstas16, x4, x4, x4, 0x0000000000000000, 0x10020000800008, 0xaaaa000000078000, x3, 24, x7)

inst_4:// rs2 == rd != rs1, rs1==x28, rs2==x11, rd==x11, rs1_h2_val == rs2_h2_val, rs2_h1_val == 4, rs1_h3_val == 512, rs1_h1_val == -32768, rs2_h0_val == 1, rs1_h0_val == -2, rs1_h2_val == 64, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h2_val == 64
// opcode: rstas16 ; op1:x28; op2:x11; dest:x11; op1val:0x20000408000fffe;  op2val:0x3fff004000040001
TEST_RR_OP(rstas16, x11, x28, x11, 0x0000000000000000, 0x20000408000fffe, 0x3fff004000040001, x3, 32, x7)

inst_5:// rs1==x29, rs2==x5, rd==x19, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == -17, rs2_h2_val == -2, rs2_h0_val == 32767
// opcode: rstas16 ; op1:x29; op2:x5; dest:x19; op1val:0xfff9fff900800008;  op2val:0x07fffeffef7fff
TEST_RR_OP(rstas16, x19, x29, x5, 0x0000000000000000, 0xfff9fff900800008, 0x07fffeffef7fff, x3, 40, x7)

inst_6:// rs1==x14, rs2==x15, rd==x9, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h3_val == 128, rs1_h2_val == 1, rs2_h2_val == -32768, rs2_h3_val == 64, rs1_h1_val == -1, rs1_h0_val == 0
// opcode: rstas16 ; op1:x14; op2:x15; dest:x9; op1val:0x800001ffff0000;  op2val:0x40800000093fff
TEST_RR_OP(rstas16, x9, x14, x15, 0x0000000000000000, 0x800001ffff0000, 0x40800000093fff, x3, 48, x7)

inst_7:// rs1==x12, rs2==x17, rd==x29, rs1_h1_val == rs2_h1_val, rs2_h2_val == -513, rs1_h3_val == 1, rs2_h0_val == -2049, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == 4, rs2_h3_val == 8
// opcode: rstas16 ; op1:x12; op2:x17; dest:x29; op1val:0x010020c0000004;  op2val:0x08fdffc000f7ff
TEST_RR_OP(rstas16, x29, x12, x17, 0x0000000000000000, 0x010020c0000004, 0x08fdffc000f7ff, x3, 56, x7)

inst_8:// rs1==x27, rs2==x2, rd==x0, rs1_h0_val == rs2_h0_val, rs1_h2_val == -21846, rs2_h0_val == 8192, rs1_h0_val == 8192, rs2_h3_val == -8193
// opcode: rstas16 ; op1:x27; op2:x2; dest:x0; op1val:0x10aaaa00062000;  op2val:0xdfff3fff00052000
TEST_RR_OP(rstas16, x0, x27, x2, 0x0000000000000000, 0x10aaaa00062000, 0xdfff3fff00052000, x3, 64, x7)

inst_9:// rs1==x25, rs2==x22, rd==x17, rs2_h3_val == 21845, rs2_h1_val == 1, rs1_h1_val == -2, rs1_h3_val == -8193, rs2_h2_val == 16384, rs1_h0_val == 16, rs1_h2_val == -2
// opcode: rstas16 ; op1:x25; op2:x22; dest:x17; op1val:0xdffffffefffe0010;  op2val:0x555540000001fdff
TEST_RR_OP(rstas16, x17, x25, x22, 0x0000000000000000, 0xdffffffefffe0010, 0x555540000001fdff, x3, 72, x7)

inst_10:// rs1==x0, rs2==x8, rd==x1, rs2_h3_val == 32767, rs2_h0_val == 4, rs1_h0_val == 16384, rs2_h2_val == 21845, rs1_h2_val == 32767
// opcode: rstas16 ; op1:x0; op2:x8; dest:x1; op1val:0xdfff7ffffffa4000;  op2val:0x7fff5555efff0004
TEST_RR_OP(rstas16, x1, x0, x8, 0x0000000000000000, 0xdfff7ffffffa4000, 0x7fff5555efff0004, x3, 80, x7)

inst_11:// rs1==x9, rs2==x16, rd==x10, rs2_h3_val == -16385, rs1_h3_val == 32, rs2_h2_val == 256, rs2_h1_val == 1024, rs1_h1_val == -65, rs1_h2_val == -65
// opcode: rstas16 ; op1:x9; op2:x16; dest:x10; op1val:0x20ffbfffbf1000;  op2val:0xbfff010004002000
TEST_RR_OP(rstas16, x10, x9, x16, 0x0000000000000000, 0x20ffbfffbf1000, 0xbfff010004002000, x3, 88, x7)

inst_12:// rs1==x21, rs2==x26, rd==x31, rs2_h3_val == -4097, rs2_h1_val == -1025, rs1_h0_val == 128, rs1_h3_val == -3, rs2_h2_val == 16, rs2_h0_val == 512
// opcode: rstas16 ; op1:x21; op2:x26; dest:x31; op1val:0xfffd000600030080;  op2val:0xefff0010fbff0200
TEST_RR_OP(rstas16, x31, x21, x26, 0x0000000000000000, 0xfffd000600030080, 0xefff0010fbff0200, x3, 96, x7)

inst_13:// rs1==x18, rs2==x12, rd==x24, rs2_h3_val == -2049, rs2_h1_val == 21845, rs1_h1_val == -257, rs1_h2_val == -513
// opcode: rstas16 ; op1:x18; op2:x12; dest:x24; op1val:0x01fdfffeff1000;  op2val:0xf7fffffa5555fff6
TEST_RR_OP(rstas16, x24, x18, x12, 0x0000000000000000, 0x01fdfffeff1000, 0xf7fffffa5555fff6, x3, 104, x7)

inst_14:// rs1==x10, rs2==x19, rd==x27, rs2_h3_val == -1025, rs2_h0_val == 64, rs1_h3_val == -257, rs1_h0_val == 2, rs2_h2_val == 2, rs1_h1_val == -9
// opcode: rstas16 ; op1:x10; op2:x19; dest:x27; op1val:0xfeff3ffffff70002;  op2val:0xfbff000204000040
TEST_RR_OP(rstas16, x27, x10, x19, 0x0000000000000000, 0xfeff3ffffff70002, 0xfbff000204000040, x3, 112, x7)

inst_15:// rs1==x23, rs2==x31, rd==x12, rs2_h3_val == -513, rs1_h0_val == 1024, rs1_h3_val == 21845, rs1_h1_val == 256, rs1_h2_val == -1025
// opcode: rstas16 ; op1:x23; op2:x31; dest:x12; op1val:0x5555fbff01000400;  op2val:0xfdff3ffffbff0005
TEST_RR_OP(rstas16, x12, x23, x31, 0x0000000000000000, 0x5555fbff01000400, 0xfdff3ffffbff0005, x3, 120, x7)

inst_16:// rs1==x13, rs2==x6, rd==x2, rs2_h3_val == -257, rs2_h0_val == 4096, rs1_h2_val == 1024, rs1_h0_val == 512
// opcode: rstas16 ; op1:x13; op2:x6; dest:x2; op1val:0x200400ffbf0200;  op2val:0xfeff0002fff81000
TEST_RR_OP(rstas16, x2, x13, x6, 0x0000000000000000, 0x200400ffbf0200, 0xfeff0002fff81000, x3, 128, x7)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_17:// rs1==x17, rs2==x1, rd==x3, rs2_h3_val == -129, rs2_h1_val == -3, rs1_h0_val == -4097, rs1_h3_val == 64, rs1_h2_val == -257
// opcode: rstas16 ; op1:x17; op2:x1; dest:x3; op1val:0x40feff7fffefff;  op2val:0xff7f0007fffd0040
TEST_RR_OP(rstas16, x3, x17, x1, 0x0000000000000000, 0x40feff7fffefff, 0xff7f0007fffd0040, x4, 0, x8)

inst_18:// rs1==x22, rs2==x30, rd==x13, rs2_h3_val == -65, rs2_h1_val == 2, rs1_h1_val == 16384, rs1_h2_val == 16, rs1_h3_val == -4097, rs1_h0_val == 1
// opcode: rstas16 ; op1:x22; op2:x30; dest:x13; op1val:0xefff001040000001;  op2val:0xffbffdff0002fdff
TEST_RR_OP(rstas16, x13, x22, x30, 0x0000000000000000, 0xefff001040000001, 0xffbffdff0002fdff, x4, 8, x8)

inst_19:// rs1==x19, rs2==x7, rd==x25, rs2_h3_val == -33, rs1_h0_val == -16385, rs1_h3_val == -2, rs2_h0_val == -1025, rs1_h2_val == 128
// opcode: rstas16 ; op1:x19; op2:x7; dest:x25; op1val:0xfffe0080fff8bfff;  op2val:0xffdfc0000002fbff
TEST_RR_OP(rstas16, x25, x19, x7, 0x0000000000000000, 0xfffe0080fff8bfff, 0xffdfc0000002fbff, x4, 16, x8)

inst_20:// rs1==x7, rs2==x21, rd==x23, rs2_h3_val == -17, rs2_h1_val == 256, rs2_h2_val == 4, rs1_h1_val == -17
// opcode: rstas16 ; op1:x7; op2:x21; dest:x23; op1val:0x3fffffbfffefbfff;  op2val:0xffef000401003fff
TEST_RR_OP(rstas16, x23, x7, x21, 0x0000000000000000, 0x3fffffbfffefbfff, 0xffef000401003fff, x4, 24, x8)

inst_21:// rs1==x30, rs2==x28, rd==x14, rs2_h3_val == -9, rs1_h2_val == -17, rs1_h3_val == -32768, rs1_h1_val == -8193
// opcode: rstas16 ; op1:x30; op2:x28; dest:x14; op1val:0x8000ffefdfff1000;  op2val:0xfff7fff90004fff9
TEST_RR_OP(rstas16, x14, x30, x28, 0x0000000000000000, 0x8000ffefdfff1000, 0xfff7fff90004fff9, x4, 32, x8)

inst_22:// rs1==x20, rs2==x13, rd==x30, rs2_h3_val == -5, rs1_h1_val == -513, rs2_h1_val == 32767
// opcode: rstas16 ; op1:x20; op2:x13; dest:x30; op1val:0x01ffbffdff0001;  op2val:0xfffbfffe7fff0200
TEST_RR_OP(rstas16, x30, x20, x13, 0x0000000000000000, 0x01ffbffdff0001, 0xfffbfffe7fff0200, x4, 40, x8)

inst_23:// rs1==x5, rs2==x10, rd==x16, rs2_h3_val == -3, rs1_h1_val == -3, rs1_h3_val == 8, rs1_h0_val == 32767, rs2_h2_val == -21846, rs2_h0_val == 128
// opcode: rstas16 ; op1:x5; op2:x10; dest:x16; op1val:0x08fffefffd7fff;  op2val:0xfffdaaaa00070080
TEST_RR_OP(rstas16, x16, x5, x10, 0x0000000000000000, 0x08fffefffd7fff, 0xfffdaaaa00070080, x4, 48, x8)

inst_24:// rs1==x16, rs2==x0, rd==x18, rs2_h3_val == -2, rs2_h2_val == -33, rs2_h0_val == -33, rs1_h0_val == -5, rs1_h1_val == 2
// opcode: rstas16 ; op1:x16; op2:x0; dest:x18; op1val:0x40fdff0002fffb;  op2val:0xfffeffdf0009ffdf
TEST_RR_OP(rstas16, x18, x16, x0, 0x0000000000000000, 0x40fdff0002fffb, 0xfffeffdf0009ffdf, x4, 56, x8)

inst_25:// rs1==x6, rs2==x9, rd==x28, rs2_h3_val == -32768, rs1_h2_val == -33
// opcode: rstas16 ; op1:x6; op2:x9; dest:x28; op1val:0x09ffdf00050009;  op2val:0x8000ffdffbff0001
TEST_RR_OP(rstas16, x28, x6, x9, 0x0000000000000000, 0x09ffdf00050009, 0x8000ffdffbff0001, x4, 64, x8)

inst_26:// rs1==x3, rs2==x20, rd==x7, rs2_h3_val == 16384, rs2_h0_val == 2, rs1_h3_val == 4, rs2_h2_val == -5, rs2_h1_val == -9, rs1_h2_val == -16385
// opcode: rstas16 ; op1:x3; op2:x20; dest:x7; op1val:0x04bffffff90080;  op2val:0x4000fffbfff70002
TEST_RR_OP(rstas16, x7, x3, x20, 0x0000000000000000, 0x04bffffff90080, 0x4000fffbfff70002, x4, 72, x8)

inst_27:// rs1==x26, rs2==x29, rd==x20, rs2_h3_val == 4096, rs1_h0_val == -3, rs1_h1_val == 8, rs2_h1_val == -5, rs2_h2_val == 8192, rs2_h0_val == 16384
// opcode: rstas16 ; op1:x26; op2:x29; dest:x20; op1val:0x07ffbf0008fffd;  op2val:0x10002000fffb4000
TEST_RR_OP(rstas16, x20, x26, x29, 0x0000000000000000, 0x07ffbf0008fffd, 0x10002000fffb4000, x4, 80, x8)

inst_28:// rs1==x2, rs2==x18, rd==x5, rs2_h3_val == 2048, rs1_h2_val == 16384, rs2_h2_val == -1025, rs1_h0_val == 2048, rs1_h1_val == 21845, rs2_h0_val == 256
// opcode: rstas16 ; op1:x2; op2:x18; dest:x5; op1val:0x06400055550800;  op2val:0x800fbff00090100
TEST_RR_OP(rstas16, x5, x2, x18, 0x0000000000000000, 0x06400055550800, 0x800fbff00090100, x4, 88, x8)

inst_29:// rs1==x11, rs2==x25, rd==x15, rs2_h3_val == 1024, rs2_h0_val == -4097, rs2_h2_val == 512
// opcode: rstas16 ; op1:x11; op2:x25; dest:x15; op1val:0x2000001fffefff8;  op2val:0x4000200fffdefff
TEST_RR_OP(rstas16, x15, x11, x25, 0x0000000000000000, 0x2000001fffefff8, 0x4000200fffdefff, x4, 96, x8)

inst_30:// rs1==x1, rs2==x3, rd==x26, rs2_h3_val == 512, 
// opcode: rstas16 ; op1:x1; op2:x3; dest:x26; op1val:0xfffc0009fff70003;  op2val:0x200fbff7fff0080
TEST_RR_OP(rstas16, x26, x1, x3, 0x0000000000000000, 0xfffc0009fff70003, 0x200fbff7fff0080, x4, 104, x8)

inst_31:// rs1==x15, rs2==x14, rd==x6, rs2_h3_val == 256, rs1_h3_val == -1025, rs1_h1_val == -21846, rs2_h1_val == 64
// opcode: rstas16 ; op1:x15; op2:x14; dest:x6; op1val:0xfbfffff9aaaafffd;  op2val:0x100ffdf00400009
TEST_RR_OP(rstas16, x6, x15, x14, 0x0000000000000000, 0xfbfffff9aaaafffd, 0x100ffdf00400009, x4, 112, x8)

inst_32:// rs2_h3_val == 128, rs1_h1_val == -129, rs2_h1_val == 8192, rs1_h3_val == -17
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefaaaaff7f0200;  op2val:0x80fff920000004
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xffefaaaaff7f0200, 0x80fff920000004, x4, 120, x8)

inst_33:// rs2_h3_val == 32, rs2_h1_val == -129, rs2_h0_val == -17, rs2_h2_val == 2048
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000c0000010fffa;  op2val:0x200800ff7fffef
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xc000c0000010fffa, 0x200800ff7fffef, x4, 128, x1)

inst_34:// rs1_h1_val == -5, rs2_h1_val == -16385, rs1_h0_val == 64
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x06aaaafffb0040;  op2val:0x7fff0009bfff0006
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x06aaaafffb0040, 0x7fff0009bfff0006, x4, 136, x1)

inst_35:// rs1_h1_val == 8192, rs1_h3_val == 256, rs1_h2_val == 8
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000820004000;  op2val:0x40020000001f7ff
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x100000820004000, 0x40020000001f7ff, x4, 144, x1)

inst_36:// rs1_h1_val == 4096, rs1_h2_val == 4, rs1_h3_val == -33
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf00041000fff9;  op2val:0xfffdfbff0400fdff
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xffdf00041000fff9, 0xfffdfbff0400fdff, x4, 152, x1)

inst_37:// rs1_h1_val == 2048, rs2_h0_val == -16385, rs1_h3_val == 32767, rs1_h2_val == 2
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000208000008;  op2val:0x7fff0200fff9bfff
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x7fff000208000008, 0x7fff0200fff9bfff, x4, 160, x1)

inst_38:// rs1_h1_val == 1024, rs1_h0_val == -9, rs1_h3_val == -1
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff00030400fff7;  op2val:0xfdff3fffffdf0004
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xffff00030400fff7, 0xfdff3fffffdf0004, x4, 168, x1)

inst_39:// rs1_h1_val == 512, rs2_h2_val == -65
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff00060200fff9;  op2val:0xfff6ffbf00010003
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x3fff00060200fff9, 0xfff6ffbf00010003, x4, 176, x1)

inst_40:// rs1_h1_val == 64, rs2_h2_val == -17, rs2_h0_val == 21845, rs1_h0_val == -129
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x40feff0040ff7f;  op2val:0x100ffefff7f5555
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x40feff0040ff7f, 0x100ffefff7f5555, x4, 184, x1)

inst_41:// rs1_h1_val == 32, rs2_h3_val == 0, rs1_h2_val == 256
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0101000020fffc;  op2val:0x000009fffb2000
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x0101000020fffc, 0x000009fffb2000, x4, 192, x1)

inst_42:// rs1_h1_val == 4, rs2_h2_val == 1024
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafdff00040004;  op2val:0xff7f040000030003
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xaaaafdff00040004, 0xff7f040000030003, x4, 200, x1)

inst_43:// rs1_h1_val == 1, rs2_h2_val == -16385, rs1_h0_val == -1025, rs2_h0_val == 0
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fffe0001fbff;  op2val:0x07bfffefff0000
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x80fffe0001fbff, 0x07bfffefff0000, x4, 208, x1)

inst_44:// rs1_h1_val == 0, rs2_h1_val == 8
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0600030000fbff;  op2val:0x09fff900080080
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x0600030000fbff, 0x09fff900080080, x4, 216, x1)

inst_45:// rs1_h0_val == -21846, rs2_h2_val == 32, rs2_h3_val == 1, rs1_h3_val == -129
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7faaaa0020aaaa;  op2val:0x01002008000006
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xff7faaaa0020aaaa, 0x01002008000006, x4, 224, x1)

inst_46:// rs1_h0_val == -8193, rs1_h1_val == -1025
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffff9fbffdfff;  op2val:0x10000040fffbfffd
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xff7ffff9fbffdfff, 0x10000040fffbfffd, x4, 232, x1)

inst_47:// rs1_h0_val == -2049, rs2_h0_val == -65, rs2_h1_val == -32768, rs1_h1_val == -16385
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff7fffbffff7ff;  op2val:0x400080008000ffbf
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xdfff7fffbffff7ff, 0x400080008000ffbf, x4, 240, x1)

inst_48:// rs1_h0_val == -513, rs1_h3_val == 1024, rs2_h0_val == -2
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x400fff6fff7fdff;  op2val:0x030007fffbfffe
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x400fff6fff7fdff, 0x030007fffbfffe, x4, 248, x1)

inst_49:// rs1_h0_val == -257, rs2_h3_val == 2, rs2_h2_val == -9
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fbfffefffeff;  op2val:0x02fff780000002
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x5555fbfffefffeff, 0x02fff780000002, x4, 256, x1)

inst_50:// rs1_h0_val == -65, rs1_h2_val == 8192
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0620000010ffbf;  op2val:0x40000000100fff9
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x0620000010ffbf, 0x40000000100fff9, x4, 264, x1)

inst_51:// rs1_h0_val == -33, rs2_h2_val == -129
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffaffdf5555ffdf;  op2val:0x5555ff7f0100ffef
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xfffaffdf5555ffdf, 0x5555ff7f0100ffef, x4, 272, x1)

inst_52:// rs1_h0_val == -17, rs1_h1_val == -33, rs2_h3_val == 16
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x080010ffdfffef;  op2val:0x103fffc0004000
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x080010ffdfffef, 0x103fffc0004000, x4, 280, x1)

inst_53:// rs1_h0_val == 256, rs2_h1_val == -513, rs2_h2_val == 8, rs2_h0_val == -129
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef000500050100;  op2val:0x80000008fdffff7f
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xffef000500050100, 0x80000008fdffff7f, x4, 288, x1)

inst_54:// rs1_h0_val == 32, rs1_h1_val == -2049, rs1_h2_val == -129
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffff7ff7ff0020;  op2val:0x400100fffbfff6
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xfeffff7ff7ff0020, 0x400100fffbfff6, x4, 296, x1)

inst_55:// rs2_h1_val == 0, rs2_h0_val == 2048
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0400fff84000;  op2val:0x07000900000800
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xfbff0400fff84000, 0x07000900000800, x4, 304, x1)

inst_56:// rs2_h1_val == -1, rs1_h2_val == 0
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0000ffdf0002;  op2val:0xf7ff0200ffff2000
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xfeff0000ffdf0002, 0xf7ff0200ffff2000, x4, 312, x1)

inst_57:// rs2_h0_val == -21846, 
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6020000050009;  op2val:0xfff87ffffbffaaaa
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xfff6020000050009, 0xfff87ffffbffaaaa, x4, 320, x1)

inst_58:// rs2_h0_val == -8193, rs1_h3_val == 2, rs2_h1_val == -21846
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x02000100802000;  op2val:0x8000fffeaaaadfff
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x02000100802000, 0x8000fffeaaaadfff, x4, 328, x1)

inst_59:// rs2_h0_val == -257, rs1_h3_val == -65, rs1_h2_val == 21845
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf5555feff0100;  op2val:0x020006ffeffeff
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xffbf5555feff0100, 0x020006ffeffeff, x4, 336, x1)

inst_60:// rs2_h0_val == -9, rs1_h3_val == 16384
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000005fff6;  op2val:0xffbf00010002fff7
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x400000000005fff6, 0xffbf00010002fff7, x4, 344, x1)

inst_61:// rs2_h0_val == 1024, rs2_h2_val == -3
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x40ffbf5555fffe;  op2val:0x400fffdfffd0400
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x40ffbf5555fffe, 0x400fffdfffd0400, x4, 352, x1)

inst_62:// rs2_h0_val == 32, rs2_h1_val == -2049
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x200002fdffffbf;  op2val:0xfffeffdff7ff0020
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x200002fdffffbf, 0xfffeffdff7ff0020, x4, 360, x1)

inst_63:// rs2_h0_val == 16, rs2_h1_val == 512
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x10c000fbff0003;  op2val:0x02000002000010
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x10c000fbff0003, 0x02000002000010, x4, 368, x1)

inst_64:// rs2_h0_val == 8, rs2_h2_val == -4097
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x400fffa0200dfff;  op2val:0x100efffffef0008
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x400fffa0200dfff, 0x100efffffef0008, x4, 376, x1)

inst_65:// rs2_h0_val == -1, rs1_h2_val == 2048, rs1_h3_val == 8192
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x200008003ffffeff;  op2val:0xfbff40003fffffff
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x200008003ffffeff, 0xfbff40003fffffff, x4, 384, x1)

inst_66:// rs1_h3_val == -16385, 
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffbfff04000010;  op2val:0x3fff0004fff9fffe
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xbfffbfff04000010, 0x3fff0004fff9fffe, x4, 392, x1)

inst_67:// rs1_h3_val == -513, rs1_h2_val == -2049
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfff7fff7fffffd;  op2val:0xdfff0200bfff0003
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xfdfff7fff7fffffd, 0xdfff0200bfff0003, x4, 400, x1)

inst_68:// rs1_h0_val == -1, rs2_h1_val == 16384
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x4020000400ffff;  op2val:0x8000fffe40000400
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x4020000400ffff, 0x8000fffe40000400, x4, 408, x1)

inst_69:// rs2_h2_val == -8193, 
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x1007fff0003fffa;  op2val:0xfff7dfff00030800
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x1007fff0003fffa, 0xfff7dfff00030800, x4, 416, x1)

inst_70:// rs2_h2_val == -2049, 
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffbffffff80200;  op2val:0x01f7ff00070001
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xefffbffffff80200, 0x01f7ff00070001, x4, 424, x1)

inst_71:// rs2_h2_val == -257, 
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffdff0100feff;  op2val:0x00fefffff6fff7
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xbffffdff0100feff, 0x00fefffff6fff7, x4, 432, x1)

inst_72:// rs1_h3_val == 0, rs2_h2_val == 4096, rs1_h2_val == -5
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fffb0400fffa;  op2val:0x101000fff80003
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x00fffb0400fffa, 0x101000fff80003, x4, 440, x1)

inst_73:// rs1_h2_val == -8193, rs2_h1_val == 4096
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x02dfff00400200;  op2val:0x1000fff61000fdff
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x02dfff00400200, 0x1000fff61000fdff, x4, 448, x1)

inst_74:// rs1_h2_val == -4097, 
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9effffffc0010;  op2val:0x100800080002000
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xfff9effffffc0010, 0x100800080002000, x4, 456, x1)

inst_75:// rs2_h2_val == 128, 
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0040fff8fff9;  op2val:0x080080fffb0800
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xffef0040fff8fff9, 0x080080fffb0800, x4, 464, x1)

inst_76:// rs2_h3_val == 4, rs2_h1_val == -2
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfbfff7fffeff;  op2val:0x04ffdffffefff9
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xfffcfbfff7fffeff, 0x04ffdffffefff9, x4, 472, x1)

inst_77:// rs1_h2_val == -9, rs2_h1_val == 16
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x40fff700041000;  op2val:0x03fff80010fff8
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x40fff700041000, 0x03fff80010fff8, x4, 480, x1)

inst_78:// rs1_h2_val == -3, 
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x06fffdfffeefff;  op2val:0xfffac0000200fdff
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x06fffdfffeefff, 0xfffac0000200fdff, x4, 488, x1)

inst_79:// rs2_h2_val == -1, 
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x400ffbfffef4000;  op2val:0x5555ffff80000000
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x400ffbfffef4000, 0x5555ffff80000000, x4, 496, x1)

inst_80:// rs1_h2_val == 4096, 
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa10000000f7ff;  op2val:0xfff800013fff0002
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xfffa10000000f7ff, 0xfff800013fff0002, x4, 504, x1)

inst_81:// rs1_h3_val == 2048, 
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x800000220000040;  op2val:0x3fff040002000007
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x800000220000040, 0x3fff040002000007, x4, 512, x1)

inst_82:// rs2_h1_val == -8193, rs2_h3_val == -1
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefff7f20000003;  op2val:0xfffffffadfff0040
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xffefff7f20000003, 0xfffffffadfff0040, x4, 520, x1)

inst_83:// rs2_h1_val == -257, rs1_h2_val == -1
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x06ffffffff0001;  op2val:0x80000002feff0009
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x06ffffffff0001, 0x80000002feff0009, x4, 528, x1)

inst_84:// rs2_h1_val == -65, 
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0002fffffff6;  op2val:0xff7f0002ffbf0004
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x3fff0002fffffff6, 0xff7f0002ffbf0004, x4, 536, x1)

inst_85:// rs1_h1_val == -4097, rs1_h3_val == 4096
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffdeffffffd;  op2val:0xfffbfeff0006fffb
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x1000fffdeffffffd, 0xfffbfeff0006fffb, x4, 544, x1)

inst_86:// rs1_h3_val == -9, 
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff72000bffffff6;  op2val:0x200fff90004ffdf
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xfff72000bffffff6, 0x200fff90004ffdf, x4, 552, x1)

inst_87:// rs1_h3_val == -5, 
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffbffef0200;  op2val:0xfff6ffeffffe0100
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xfffbfffbffef0200, 0xfff6ffeffffe0100, x4, 560, x1)

inst_88:// rs2_h1_val == 128, 
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff710002000fff8;  op2val:0x7ffffffa00800007
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xfff710002000fff8, 0x7ffffffa00800007, x4, 568, x1)

inst_89:// rs2_h1_val == 32, 
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0900100010ff7f;  op2val:0x1000fffa0020ffff
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x0900100010ff7f, 0x1000fffa0020ffff, x4, 576, x1)

inst_90:// rs1_h2_val == -32768, 
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6800000200008;  op2val:0xc000fffedfff0004
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xfff6800000200008, 0xc000fffedfff0004, x4, 584, x1)

inst_91:// rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 32, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == -33, rs2_h3_val == 8192, rs1_h3_val == -2049, rs1_h1_val == 32767, rs2_h0_val == -3, rs1_h0_val == 21845
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff00207fff5555;  op2val:0x20007fffffdffffd
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xf7ff00207fff5555, 0x20007fffffdffffd, x4, 592, x1)

inst_92:// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val == 512, rs1_h3_val == 16, rs1_h1_val == 128, rs1_h0_val == 8, rs2_h0_val == -32768, rs2_h3_val == -21846, rs2_h2_val == 0
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x10020000800008;  op2val:0xaaaa000000078000
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x10020000800008, 0xaaaa000000078000, x4, 600, x1)

inst_93:// rs1_h0_val == rs2_h0_val, rs1_h2_val == -21846, rs2_h0_val == 8192, rs1_h0_val == 8192, rs2_h3_val == -8193
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x10aaaa00062000;  op2val:0xdfff3fff00052000
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x10aaaa00062000, 0xdfff3fff00052000, x4, 608, x1)

inst_94:// rs2_h3_val == 32767, rs2_h0_val == 4, rs1_h0_val == 16384, rs2_h2_val == 21845, rs1_h2_val == 32767
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff7ffffffa4000;  op2val:0x7fff5555efff0004
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0xdfff7ffffffa4000, 0x7fff5555efff0004, x4, 616, x1)

inst_95:// rs2_h3_val == -2, rs2_h2_val == -33, rs2_h0_val == -33, rs1_h0_val == -5, rs1_h1_val == 2
// opcode: rstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x40fdff0002fffb;  op2val:0xfffeffdf0009ffdf
TEST_RR_OP(rstas16, x31, x30, x29, 0x0000000000000000, 0x40fdff0002fffb, 0xfffeffdf0009ffdf, x4, 624, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 79*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
