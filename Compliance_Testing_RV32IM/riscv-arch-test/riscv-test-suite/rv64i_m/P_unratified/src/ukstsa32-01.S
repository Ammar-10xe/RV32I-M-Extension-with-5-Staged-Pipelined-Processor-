
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukstsa32 instruction of the RISC-V RV64PZicsr extension for the ukstsa32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukstsa32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x14,signature_x14_1)

inst_0:
// rs1 == rd != rs2, rs1==x17, rs2==x15, rd==x17, rs1_w0_val == 0, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 4, rs2_w0_val == 4290772991, rs2_w1_val == 2097152
// opcode: ukstsa32 ; op1:x17; op2:x15; dest:x17; op1val:0x00000400000000;  op2val:0x200000ffbfffff
TEST_PKRR_OP(ukstsa32, x17, x17, x15, 0x0000000000000000, 0x00000400000000, 0x200000ffbfffff, x17, x14, 0, x7)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x1, rs2==x11, rd==x5, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 4294967294, rs2_w0_val == 4, rs1_w0_val == 64, rs1_w1_val == 4294967294
// opcode: ukstsa32 ; op1:x1; op2:x11; dest:x5; op1val:0xfffffffe00000040;  op2val:0xfffffffe00000004
TEST_PKRR_OP(ukstsa32, x5, x1, x11, 0x0000000000000000, 0xfffffffe00000040, 0xfffffffe00000004, x1, x14, 16, x7)

inst_2:
// rs1 == rs2 != rd, rs1==x8, rs2==x8, rd==x27, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 8192, rs2_w0_val == 4294967294, rs1_w0_val == 4294967294, rs1_w1_val == 2147483647
// opcode: ukstsa32 ; op1:x8; op2:x8; dest:x27; op1val:0x7ffffffffffffffe;  op2val:0x002000fffffffe
TEST_PKRR_OP(ukstsa32, x27, x8, x8, 0x0000000000000000, 0x7ffffffffffffffe, 0x002000fffffffe, x8, x14, 32, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x23, rs2==x23, rd==x23, rs2_w1_val == 2863311530, rs2_w0_val == 4294901759, rs1_w0_val == 2147483648
// opcode: ukstsa32 ; op1:x23; op2:x23; dest:x23; op1val:0x00000a80000000;  op2val:0xaaaaaaaafffeffff
TEST_PKRR_OP(ukstsa32, x23, x23, x23, 0x0000000000000000, 0x00000a80000000, 0xaaaaaaaafffeffff, x23, x14, 48, x7)

inst_4:
// rs2 == rd != rs1, rs1==x25, rs2==x9, rd==x9, rs2_w1_val == 1431655765, rs2_w0_val == 256, rs1_w1_val == 2048, rs1_w0_val == 16384
// opcode: ukstsa32 ; op1:x25; op2:x9; dest:x9; op1val:0x00080000004000;  op2val:0x5555555500000100
TEST_PKRR_OP(ukstsa32, x9, x25, x9, 0x0000000000000000, 0x00080000004000, 0x5555555500000100, x25, x14, 64, x7)

inst_5:
// rs1==x26, rs2==x5, rd==x20, rs2_w1_val == 2147483647, rs1_w0_val == 4294967291, rs1_w1_val == 4294967291, rs2_w0_val == 64
// opcode: ukstsa32 ; op1:x26; op2:x5; dest:x20; op1val:0xfffffffbfffffffb;  op2val:0x7fffffff00000040
TEST_PKRR_OP(ukstsa32, x20, x26, x5, 0x0000000000000000, 0xfffffffbfffffffb, 0x7fffffff00000040, x26, x14, 80, x7)

inst_6:
// rs1==x30, rs2==x2, rd==x15, rs2_w1_val == 3221225471, rs2_w0_val == 512, rs1_w1_val == 4294963199, rs1_w0_val == 4294963199
// opcode: ukstsa32 ; op1:x30; op2:x2; dest:x15; op1val:0xffffefffffffefff;  op2val:0xbfffffff00000200
TEST_PKRR_OP(ukstsa32, x15, x30, x2, 0x0000000000000000, 0xffffefffffffefff, 0xbfffffff00000200, x30, x14, 96, x7)

inst_7:
// rs1==x6, rs2==x12, rd==x3, rs2_w1_val == 3758096383, rs2_w0_val == 4227858431, rs1_w0_val == 4294967231, rs1_w1_val == 4294901759
// opcode: ukstsa32 ; op1:x6; op2:x12; dest:x3; op1val:0xfffeffffffffffbf;  op2val:0xdffffffffbffffff
TEST_PKRR_OP(ukstsa32, x3, x6, x12, 0x0000000000000000, 0xfffeffffffffffbf, 0xdffffffffbffffff, x6, x14, 112, x7)

inst_8:
// rs1==x9, rs2==x30, rd==x18, rs2_w1_val == 4026531839, rs2_w0_val == 3758096383
// opcode: ukstsa32 ; op1:x9; op2:x30; dest:x18; op1val:0x00001200000003;  op2val:0xefffffffdfffffff
TEST_PKRR_OP(ukstsa32, x18, x9, x30, 0x0000000000000000, 0x00001200000003, 0xefffffffdfffffff, x9, x14, 128, x7)

inst_9:
// rs1==x11, rs2==x0, rd==x28, rs2_w1_val == 4160749567, rs1_w1_val == 4294967263, rs1_w0_val == 1, rs2_w0_val == 4286578687
// opcode: ukstsa32 ; op1:x11; op2:x0; dest:x28; op1val:0xffffffdf00000001;  op2val:0xf7ffffffff7fffff
TEST_PKRR_OP(ukstsa32, x28, x11, x0, 0x0000000000000000, 0xffffffdf00000001, 0xf7ffffffff7fffff, x11, x14, 144, x7)

inst_10:
// rs1==x16, rs2==x1, rd==x4, rs2_w1_val == 4227858431, rs2_w0_val == 524288
// opcode: ukstsa32 ; op1:x16; op2:x1; dest:x4; op1val:0x00000300000000;  op2val:0xfbffffff00080000
TEST_PKRR_OP(ukstsa32, x4, x16, x1, 0x0000000000000000, 0x00000300000000, 0xfbffffff00080000, x16, x14, 160, x7)

inst_11:
// rs1==x13, rs2==x29, rd==x0, rs2_w1_val == 4261412863, rs2_w0_val == 4294967167, rs1_w0_val == 4292870143
// opcode: ukstsa32 ; op1:x13; op2:x29; dest:x0; op1val:0x000003ffdfffff;  op2val:0xfdffffffffffff7f
TEST_PKRR_OP(ukstsa32, x0, x13, x29, 0x0000000000000000, 0x000003ffdfffff, 0xfdffffffffffff7f, x13, x14, 176, x7)

inst_12:
// rs1==x20, rs2==x10, rd==x13, rs2_w1_val == 4278190079, rs1_w0_val == 4294901759, rs1_w1_val == 512, rs2_w0_val == 2048
// opcode: ukstsa32 ; op1:x20; op2:x10; dest:x13; op1val:0x000200fffeffff;  op2val:0xfeffffff00000800
TEST_PKRR_OP(ukstsa32, x13, x20, x10, 0x0000000000000000, 0x000200fffeffff, 0xfeffffff00000800, x20, x14, 192, x7)

inst_13:
// rs1==x5, rs2==x16, rd==x11, rs2_w1_val == 4286578687, rs2_w0_val == 1073741824, rs1_w0_val == 4194304
// opcode: ukstsa32 ; op1:x5; op2:x16; dest:x11; op1val:0x00001200400000;  op2val:0xff7fffff40000000
TEST_PKRR_OP(ukstsa32, x11, x5, x16, 0x0000000000000000, 0x00001200400000, 0xff7fffff40000000, x5, x14, 208, x7)

inst_14:
// rs1==x12, rs2==x18, rd==x24, rs2_w1_val == 4290772991, rs1_w1_val == 4160749567, rs1_w0_val == 3758096383
// opcode: ukstsa32 ; op1:x12; op2:x18; dest:x24; op1val:0xf7ffffffdfffffff;  op2val:0xffbfffffffffff7f
TEST_PKRR_OP(ukstsa32, x24, x12, x18, 0x0000000000000000, 0xf7ffffffdfffffff, 0xffbfffffffffff7f, x12, x14, 224, x7)

inst_15:
// rs1==x15, rs2==x26, rd==x1, rs2_w1_val == 4292870143, rs1_w1_val == 4294967167
// opcode: ukstsa32 ; op1:x15; op2:x26; dest:x1; op1val:0xffffff7ffffeffff;  op2val:0xffdfffff0000000a
TEST_PKRR_OP(ukstsa32, x1, x15, x26, 0x0000000000000000, 0xffffff7ffffeffff, 0xffdfffff0000000a, x15, x14, 240, x7)

inst_16:
// rs1==x21, rs2==x4, rd==x26, rs2_w1_val == 4293918719, rs1_w1_val == 134217728
// opcode: ukstsa32 ; op1:x21; op2:x4; dest:x26; op1val:0x800000000000011;  op2val:0xffefffff00000200
TEST_PKRR_OP(ukstsa32, x26, x21, x4, 0x0000000000000000, 0x800000000000011, 0xffefffff00000200, x21, x14, 256, x7)

inst_17:
// rs1==x27, rs2==x24, rd==x29, rs2_w1_val == 4294443007, rs1_w1_val == 1
// opcode: ukstsa32 ; op1:x27; op2:x24; dest:x29; op1val:0x000001fffeffff;  op2val:0xfff7ffff0000000d
TEST_PKRR_OP(ukstsa32, x29, x27, x24, 0x0000000000000000, 0x000001fffeffff, 0xfff7ffff0000000d, x27, x14, 272, x5)

inst_18:
// rs1==x19, rs2==x27, rd==x7, rs2_w1_val == 4294705151, rs2_w0_val == 128, rs1_w0_val == 32
// opcode: ukstsa32 ; op1:x19; op2:x27; dest:x7; op1val:0xffffefff00000020;  op2val:0xfffbffff00000080
TEST_PKRR_OP(ukstsa32, x7, x19, x27, 0x0000000000000000, 0xffffefff00000020, 0xfffbffff00000080, x19, x14, 288, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_19:
// rs1==x22, rs2==x3, rd==x14, rs2_w1_val == 4294836223, rs1_w0_val == 4294967263, rs1_w1_val == 4294934527
// opcode: ukstsa32 ; op1:x22; op2:x3; dest:x14; op1val:0xffff7fffffffffdf;  op2val:0xfffdffff0000000a
TEST_PKRR_OP(ukstsa32, x14, x22, x3, 0x0000000000000000, 0xffff7fffffffffdf, 0xfffdffff0000000a, x22, x1, 0, x5)

inst_20:
// rs1==x14, rs2==x28, rd==x8, rs2_w1_val == 4294901759, rs2_w0_val == 1024, rs1_w1_val == 4294967279, rs1_w0_val == 4294443007
// opcode: ukstsa32 ; op1:x14; op2:x28; dest:x8; op1val:0xffffffeffff7ffff;  op2val:0xfffeffff00000400
TEST_PKRR_OP(ukstsa32, x8, x14, x28, 0x0000000000000000, 0xffffffeffff7ffff, 0xfffeffff00000400, x14, x1, 16, x5)

inst_21:
// rs1==x28, rs2==x31, rd==x2, rs2_w1_val == 4294934527, rs1_w0_val == 4261412863, rs1_w1_val == 4294967287, rs2_w0_val == 4294963199
// opcode: ukstsa32 ; op1:x28; op2:x31; dest:x2; op1val:0xfffffff7fdffffff;  op2val:0xffff7fffffffefff
TEST_PKRR_OP(ukstsa32, x2, x28, x31, 0x0000000000000000, 0xfffffff7fdffffff, 0xffff7fffffffefff, x28, x1, 32, x5)

inst_22:
// rs1==x7, rs2==x22, rd==x10, rs2_w1_val == 4294950911, rs2_w0_val == 4261412863, rs1_w0_val == 4294967039, rs1_w1_val == 4294966271
// opcode: ukstsa32 ; op1:x7; op2:x22; dest:x10; op1val:0xfffffbfffffffeff;  op2val:0xffffbffffdffffff
TEST_PKRR_OP(ukstsa32, x10, x7, x22, 0x0000000000000000, 0xfffffbfffffffeff, 0xffffbffffdffffff, x7, x1, 48, x5)

inst_23:
// rs1==x18, rs2==x13, rd==x16, rs2_w1_val == 4294959103, rs1_w0_val == 4294967293, rs1_w1_val == 4261412863
// opcode: ukstsa32 ; op1:x18; op2:x13; dest:x16; op1val:0xfdfffffffffffffd;  op2val:0xffffdfff0000000d
TEST_PKRR_OP(ukstsa32, x16, x18, x13, 0x0000000000000000, 0xfdfffffffffffffd, 0xffffdfff0000000d, x18, x1, 64, x5)

inst_24:
// rs1==x24, rs2==x21, rd==x12, rs2_w1_val == 4294963199, rs2_w0_val == 67108864, rs1_w0_val == 4096
// opcode: ukstsa32 ; op1:x24; op2:x21; dest:x12; op1val:0x7fffffff00001000;  op2val:0xffffefff04000000
TEST_PKRR_OP(ukstsa32, x12, x24, x21, 0x0000000000000000, 0x7fffffff00001000, 0xffffefff04000000, x24, x1, 80, x5)

inst_25:
// rs1==x3, rs2==x17, rd==x6, rs2_w1_val == 4294965247, rs1_w0_val == 4294965247
// opcode: ukstsa32 ; op1:x3; op2:x17; dest:x6; op1val:0x000200fffff7ff;  op2val:0xfffff7ff00080000
TEST_PKRR_OP(ukstsa32, x6, x3, x17, 0x0000000000000000, 0x000200fffff7ff, 0xfffff7ff00080000, x3, x1, 96, x5)

inst_26:
// rs1==x31, rs2==x19, rd==x21, rs2_w1_val == 4294966271, rs1_w0_val == 4294966783
// opcode: ukstsa32 ; op1:x31; op2:x19; dest:x21; op1val:0x000001fffffdff;  op2val:0xfffffbffffffefff
TEST_PKRR_OP(ukstsa32, x21, x31, x19, 0x0000000000000000, 0x000001fffffdff, 0xfffffbffffffefff, x31, x1, 112, x5)

inst_27:
// rs1==x0, rs2==x7, rd==x22, rs2_w1_val == 4294966783, rs1_w1_val == 16384, rs2_w0_val == 4294967039, rs1_w0_val == 4293918719
// opcode: ukstsa32 ; op1:x0; op2:x7; dest:x22; op1val:0x004000ffefffff;  op2val:0xfffffdfffffffeff
TEST_PKRR_OP(ukstsa32, x22, x0, x7, 0x0000000000000000, 0x004000ffefffff, 0xfffffdfffffffeff, x0, x1, 128, x5)

inst_28:
// rs1==x4, rs2==x14, rd==x25, rs2_w1_val == 4294967039, rs1_w1_val == 4294967293, rs1_w0_val == 8
// opcode: ukstsa32 ; op1:x4; op2:x14; dest:x25; op1val:0xfffffffd00000008;  op2val:0xfffffeff00000800
TEST_PKRR_OP(ukstsa32, x25, x4, x14, 0x0000000000000000, 0xfffffffd00000008, 0xfffffeff00000800, x4, x1, 144, x5)

inst_29:
// rs1==x29, rs2==x6, rd==x19, rs2_w1_val == 4294967167, rs2_w0_val == 4294934527, rs1_w1_val == 4294966783
// opcode: ukstsa32 ; op1:x29; op2:x6; dest:x19; op1val:0xfffffdff00400000;  op2val:0xffffff7fffff7fff
TEST_PKRR_OP(ukstsa32, x19, x29, x6, 0x0000000000000000, 0xfffffdff00400000, 0xffffff7fffff7fff, x29, x1, 160, x5)

inst_30:
// rs1==x10, rs2==x25, rd==x30, rs2_w1_val == 4294967231, rs1_w0_val == 4026531839
// opcode: ukstsa32 ; op1:x10; op2:x25; dest:x30; op1val:0xffff7fffefffffff;  op2val:0xffffffbf40000000
TEST_PKRR_OP(ukstsa32, x30, x10, x25, 0x0000000000000000, 0xffff7fffefffffff, 0xffffffbf40000000, x10, x1, 176, x5)

inst_31:
// rs1==x2, rs2==x20, rd==x31, rs2_w1_val == 4294967263, rs1_w1_val == 4194304
// opcode: ukstsa32 ; op1:x2; op2:x20; dest:x31; op1val:0x4000000000000a;  op2val:0xffffffdfffffff7f
TEST_PKRR_OP(ukstsa32, x31, x2, x20, 0x0000000000000000, 0x4000000000000a, 0xffffffdfffffff7f, x2, x1, 192, x5)

inst_32:
// rs2_w1_val == 4294967279, rs1_w0_val == 4160749567
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000f7ffffff;  op2val:0xffffffef00000800
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x004000f7ffffff, 0xffffffef00000800, x30, x1, 208, x5)

inst_33:
// rs2_w1_val == 4294967287, rs2_w0_val == 33554432, rs1_w0_val == 32768
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00008000;  op2val:0xfffffff702000000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00008000, 0xfffffff702000000, x30, x1, 224, x5)

inst_34:
// rs2_w1_val == 4294967291, rs1_w1_val == 67108864
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000000a;  op2val:0xfffffffbffffefff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x40000000000000a, 0xfffffffbffffefff, x30, x1, 240, x5)

inst_35:
// rs2_w1_val == 4294967293, rs1_w1_val == 16, rs2_w0_val == 1
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000008000;  op2val:0xfffffffd00000001
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00001000008000, 0xfffffffd00000001, x30, x1, 256, x5)

inst_36:
// rs2_w1_val == 2147483648, rs1_w0_val == 4294950911, rs1_w1_val == 131072
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000ffffbfff;  op2val:0x8000000000000100
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x020000ffffbfff, 0x8000000000000100, x30, x1, 272, x5)

inst_37:
// rs2_w1_val == 1073741824, rs1_w0_val == 65536
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00010000;  op2val:0x40000000ffffff7f
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00010000, 0x40000000ffffff7f, x30, x1, 288, x5)

inst_38:
// rs2_w1_val == 536870912, rs1_w1_val == 4096, rs2_w0_val == 3221225471
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffffbfff;  op2val:0x20000000bfffffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x001000ffffbfff, 0x20000000bfffffff, x30, x1, 304, x5)

inst_39:
// rs2_w1_val == 268435456, rs2_w0_val == 4160749567
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000000;  op2val:0x10000000f7ffffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00000700000000, 0x10000000f7ffffff, x30, x1, 320, x5)

inst_40:
// rs2_w1_val == 134217728, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004fffffffb;  op2val:0x8000000fffffffe
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x000004fffffffb, 0x8000000fffffffe, x30, x1, 336, x5)

inst_41:
// rs2_w1_val == 67108864, rs1_w1_val == 4026531839, rs1_w0_val == 4294934527
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffff7fff;  op2val:0x4000000ffffefff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xefffffffffff7fff, 0x4000000ffffefff, x30, x1, 352, x5)

inst_42:
// rs2_w1_val == 33554432, rs2_w0_val == 65536
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000001000;  op2val:0x200000000010000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x400000000001000, 0x200000000010000, x30, x1, 368, x5)

inst_43:
// rs2_w1_val == 16777216, rs1_w1_val == 4294705151
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffffdf;  op2val:0x1000000fffffeff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffffdf, 0x1000000fffffeff, x30, x1, 384, x5)

inst_44:
// rs2_w1_val == 8388608, rs1_w1_val == 64
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000003;  op2val:0x800000fdffffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00004000000003, 0x800000fdffffff, x30, x1, 400, x5)

inst_45:
// rs2_w1_val == 4194304, rs2_w0_val == 4294967263
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00001000;  op2val:0x400000ffffffdf
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00001000, 0x400000ffffffdf, x30, x1, 416, x5)

inst_46:
// rs2_w1_val == 1048576, rs1_w1_val == 2863311530, rs2_w0_val == 16
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffffffd;  op2val:0x10000000000010
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffffffd, 0x10000000000010, x30, x1, 432, x5)

inst_47:
// rs2_w1_val == 524288, rs1_w0_val == 131072, rs1_w1_val == 65536
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000020000;  op2val:0x08000000000001
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x01000000020000, 0x08000000000001, x30, x1, 448, x5)

inst_48:
// rs2_w1_val == 262144, rs1_w0_val == 1431655765
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004055555555;  op2val:0x04000000010000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00004055555555, 0x04000000010000, x30, x1, 464, x5)

inst_49:
// rs2_w1_val == 131072, rs1_w0_val == 4278190079, rs1_w1_val == 262144, rs2_w0_val == 2097152
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000feffffff;  op2val:0x02000000200000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x040000feffffff, 0x02000000200000, x30, x1, 480, x5)

inst_50:
// rs2_w1_val == 65536, rs2_w0_val == 1431655765
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000040;  op2val:0x01000055555555
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00080000000040, 0x01000055555555, x30, x1, 496, x5)

inst_51:
// rs1_w0_val == 262144, rs1_w1_val == 268435456
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000040000;  op2val:0x00000cfdffffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x1000000000040000, 0x00000cfdffffff, x30, x1, 512, x5)

inst_52:
// rs1_w0_val == 8192, rs2_w1_val == 2048, rs1_w1_val == 4294965247
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00002000;  op2val:0x00080000000040
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00002000, 0x00080000000040, x30, x1, 528, x5)

inst_53:
// rs1_w0_val == 2048, rs2_w0_val == 134217728
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000800;  op2val:0xfdffffff08000000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000800, 0xfdffffff08000000, x30, x1, 544, x5)

inst_54:
// rs1_w0_val == 1024, rs1_w1_val == 1073741824
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000400;  op2val:0x00080000000040
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x4000000000000400, 0x00080000000040, x30, x1, 560, x5)

inst_55:
// rs1_w0_val == 512, rs2_w0_val == 4294950911
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000200;  op2val:0xfffffffbffffbfff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00000600000200, 0xfffffffbffffbfff, x30, x1, 576, x5)

inst_56:
// rs1_w0_val == 256, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000100;  op2val:0xfeffffff00000010
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000100, 0xfeffffff00000010, x30, x1, 592, x5)

inst_57:
// rs1_w0_val == 128, rs2_w0_val == 268435456
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000080;  op2val:0x00001210000000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000080, 0x00001210000000, x30, x1, 608, x5)

inst_58:
// rs1_w0_val == 16, rs2_w0_val == 4194304
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000010;  op2val:0xfffffffd00400000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00004000000010, 0xfffffffd00400000, x30, x1, 624, x5)

inst_59:
// rs1_w0_val == 4, rs2_w0_val == 4294967291
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000004;  op2val:0x20000000fffffffb
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000004, 0x20000000fffffffb, x30, x1, 640, x5)

inst_60:
// rs1_w0_val == 2, rs1_w1_val == 536870912, rs2_w1_val == 16
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000002;  op2val:0x00001055555555
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x2000000000000002, 0x00001055555555, x30, x1, 656, x5)

inst_61:
// rs1_w0_val == 4294967295, rs2_w0_val == 4096, rs2_w1_val == 256
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000affffffff;  op2val:0x00010000001000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00000affffffff, 0x00010000001000, x30, x1, 672, x5)

inst_62:
// rs2_w1_val == 32768, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000001;  op2val:0x008000fffffeff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x400000000000001, 0x008000fffffeff, x30, x1, 688, x5)

inst_63:
// rs2_w1_val == 16384, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000080000000;  op2val:0x00400000000200
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x04000080000000, 0x00400000000200, x30, x1, 704, x5)

inst_64:
// rs2_w1_val == 4096, rs1_w0_val == 16777216, rs1_w1_val == 32768
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800001000000;  op2val:0x00100004000000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00800001000000, 0x00100004000000, x30, x1, 720, x5)

inst_65:
// rs2_w1_val == 1024, rs1_w1_val == 4293918719
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000000;  op2val:0x00040000000004
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xffefffff00000000, 0x00040000000004, x30, x1, 736, x5)

inst_66:
// rs2_w1_val == 512, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff01000000;  op2val:0x000200fffffeff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff01000000, 0x000200fffffeff, x30, x1, 752, x5)

inst_67:
// rs2_w1_val == 128, rs1_w0_val == 1048576
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00100000;  op2val:0x00008000000009
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00100000, 0x00008000000009, x30, x1, 768, x5)

inst_68:
// rs2_w1_val == 64, rs1_w1_val == 4227858431, rs2_w0_val == 8192
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000040;  op2val:0x00004000002000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000040, 0x00004000002000, x30, x1, 784, x5)

inst_69:
// rs2_w1_val == 32, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000012;  op2val:0x000020f7ffffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00004000000012, 0x000020f7ffffff, x30, x1, 800, x5)

inst_70:
// rs2_w1_val == 8, rs1_w1_val == 2
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000003;  op2val:0x00000800000100
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00000200000003, 0x00000800000100, x30, x1, 816, x5)

inst_71:
// rs2_w1_val == 4, rs2_w0_val == 2147483648, rs1_w0_val == 134217728
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000908000000;  op2val:0x00000480000000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00000908000000, 0x00000480000000, x30, x1, 832, x5)

inst_72:
// rs2_w1_val == 2, rs2_w0_val == 262144, rs1_w1_val == 1431655765
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x555555550000000b;  op2val:0x00000200040000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x555555550000000b, 0x00000200040000, x30, x1, 848, x5)

inst_73:
// rs2_w1_val == 1, rs1_w1_val == 32
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fff7ffff;  op2val:0x000001bfffffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x000020fff7ffff, 0x000001bfffffff, x30, x1, 864, x5)

inst_74:
// rs2_w1_val == 4294967295, rs1_w1_val == 16777216
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000000a;  op2val:0xffffffff00000100
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x10000000000000a, 0xffffffff00000100, x30, x1, 880, x5)

inst_75:
// rs2_w1_val == 0, rs1_w1_val == 8388608
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000f7ffffff;  op2val:0x0000000000000f
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x800000f7ffffff, 0x0000000000000f, x30, x1, 896, x5)

inst_76:
// rs2_w0_val == 2863311530, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffdfffffff;  op2val:0x000011aaaaaaaa
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x7fffffffdfffffff, 0x000011aaaaaaaa, x30, x1, 912, x5)

inst_77:
// rs2_w0_val == 2147483647, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff0000000a;  op2val:0xfffffeff7fffffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff0000000a, 0xfffffeff7fffffff, x30, x1, 928, x5)

inst_78:
// rs2_w0_val == 4026531839, rs1_w0_val == 524288
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00080000;  op2val:0xfeffffffefffffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00080000, 0xfeffffffefffffff, x30, x1, 944, x5)

inst_79:
// rs2_w0_val == 4278190079, rs1_w0_val == 4294966271
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200fffffbff;  op2val:0x100000feffffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x000200fffffbff, 0x100000feffffff, x30, x1, 960, x5)

inst_80:
// rs2_w0_val == 4292870143, rs1_w0_val == 4294967279
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffffffef;  op2val:0x000009ffdfffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xefffffffffffffef, 0x000009ffdfffff, x30, x1, 976, x5)

inst_81:
// rs2_w0_val == 4293918719, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000008000;  op2val:0x000020ffefffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x80000000008000, 0x000020ffefffff, x30, x1, 992, x5)

inst_82:
// rs2_w0_val == 4294443007, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000200;  op2val:0xfdfffffffff7ffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000200, 0xfdfffffffff7ffff, x30, x1, 1008, x5)

inst_83:
// rs2_w0_val == 4294705151, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600010000;  op2val:0xff7ffffffffbffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00000600010000, 0xff7ffffffffbffff, x30, x1, 1024, x5)

inst_84:
// rs2_w0_val == 32, rs1_w0_val == 4294959103
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003ffffdfff;  op2val:0xffffbfff00000020
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x000003ffffdfff, 0xffffbfff00000020, x30, x1, 1040, x5)

inst_85:
// rs2_w0_val == 8, rs1_w0_val == 4227858431
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007fbffffff;  op2val:0xfffffffb00000008
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x000007fbffffff, 0xfffffffb00000008, x30, x1, 1056, x5)

inst_86:
// rs2_w0_val == 2, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000d00000100;  op2val:0x00000800000002
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00000d00000100, 0x00000800000002, x30, x1, 1072, x5)

inst_87:
// rs2_w0_val == 4294967295, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffffbff;  op2val:0xf7ffffffffffffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x004000fffffbff, 0xf7ffffffffffffff, x30, x1, 1088, x5)

inst_88:
// rs2_w0_val == 0, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000010;  op2val:0x01000000000000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000010, 0x01000000000000, x30, x1, 1104, x5)

inst_89:
// rs1_w1_val == 3221225471, rs1_w0_val == 4294836223
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffdffff;  op2val:0x000200fbffffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xbffffffffffdffff, 0x000200fbffffff, x30, x1, 1120, x5)

inst_90:
// rs1_w1_val == 3758096383, rs2_w0_val == 32768
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000400;  op2val:0x5555555500008000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000400, 0x5555555500008000, x30, x1, 1136, x5)

inst_91:
// rs1_w1_val == 4278190079, rs2_w0_val == 16384
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000080;  op2val:0xfffffffe00004000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000080, 0xfffffffe00004000, x30, x1, 1152, x5)

inst_92:
// rs1_w1_val == 4286578687, rs2_w0_val == 1048576
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff55555555;  op2val:0xfffffff700100000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xff7fffff55555555, 0xfffffff700100000, x30, x1, 1168, x5)

inst_93:
// rs1_w1_val == 4290772991, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000012;  op2val:0x400000000000008
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000012, 0x400000000000008, x30, x1, 1184, x5)

inst_94:
// rs1_w1_val == 4292870143, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffff7ffffff;  op2val:0x00000d00000400
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xffdffffff7ffffff, 0x00000d00000400, x30, x1, 1200, x5)

inst_95:
// rs1_w1_val == 4294443007, rs2_w0_val == 4294967279
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000012;  op2val:0xffffffdfffffffef
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000012, 0xffffffdfffffffef, x30, x1, 1216, x5)

inst_96:
// rs1_w1_val == 4294836223, rs1_w0_val == 4286578687
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffff7fffff;  op2val:0x20000004000000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xfffdffffff7fffff, 0x20000004000000, x30, x1, 1232, x5)

inst_97:
// rs1_w1_val == 4294950911, rs2_w0_val == 4294967287
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffdfffff;  op2val:0x00000ffffffff7
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xffffbfffffdfffff, 0x00000ffffffff7, x30, x1, 1248, x5)

inst_98:
// rs1_w1_val == 4294959103, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000007;  op2val:0x10000000000004
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000007, 0x10000000000004, x30, x1, 1264, x5)

inst_99:
// rs1_w1_val == 4294967039, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff0000000b;  op2val:0xfbffffff00000200
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffeff0000000b, 0xfbffffff00000200, x30, x1, 1280, x5)

inst_100:
// rs1_w1_val == 4294967231, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffff7ff;  op2val:0xffffffef0000000c
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffbffffff7ff, 0xffffffef0000000c, x30, x1, 1296, x5)

inst_101:
// rs1_w1_val == 2147483648, rs1_w0_val == 2147483647
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000007fffffff;  op2val:0x000007ff7fffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x800000007fffffff, 0x000007ff7fffff, x30, x1, 1312, x5)

inst_102:
// rs1_w1_val == 33554432, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000008000;  op2val:0xfffbffff00000009
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x200000000008000, 0xfffbffff00000009, x30, x1, 1328, x5)

inst_103:
// rs1_w1_val == 2097152, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000800;  op2val:0xfffffffb00000080
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x20000000000800, 0xfffffffb00000080, x30, x1, 1344, x5)

inst_104:
// rs1_w1_val == 1048576, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000200;  op2val:0x000011ffff7fff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x10000000000200, 0x000011ffff7fff, x30, x1, 1360, x5)

inst_105:
// rs1_w1_val == 524288, rs2_w0_val == 131072
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000080;  op2val:0xffbfffff00020000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x08000000000080, 0xffbfffff00020000, x30, x1, 1376, x5)

inst_106:
// rs1_w1_val == 8192, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200080000000;  op2val:0xfffffff7dfffffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00200080000000, 0xfffffff7dfffffff, x30, x1, 1392, x5)

inst_107:
// rs1_w1_val == 1024, rs1_w0_val == 2863311530
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400aaaaaaaa;  op2val:0xffffffdffffeffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x000400aaaaaaaa, 0xffffffdffffeffff, x30, x1, 1408, x5)

inst_108:
// rs1_w1_val == 256, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100fffffffd;  op2val:0xfffffff7ffffff7f
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x000100fffffffd, 0xfffffff7ffffff7f, x30, x1, 1424, x5)

inst_109:
// rs1_w1_val == 128, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000000400;  op2val:0x00000500100000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00008000000400, 0x00000500100000, x30, x1, 1440, x5)

inst_110:
// rs1_w1_val == 8, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800400000;  op2val:0xffffffdfffffbfff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00000800400000, 0xffffffdfffffbfff, x30, x1, 1456, x5)

inst_111:
// rs1_w1_val == 4294967295, rs1_w0_val == 268435456
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff10000000;  op2val:0x10000000fffeffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffff10000000, 0x10000000fffeffff, x30, x1, 1472, x5)

inst_112:
// rs1_w1_val == 0, rs1_w0_val == 4294705151
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffbffff;  op2val:0xfffbffff00000002
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x000000fffbffff, 0xfffbffff00000002, x30, x1, 1488, x5)

inst_113:
// rs1_w0_val == 3221225471, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400bfffffff;  op2val:0x02000000100000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x000400bfffffff, 0x02000000100000, x30, x1, 1504, x5)

inst_114:
// rs2_w0_val == 4294836223, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffff7fff;  op2val:0x00000bfffdffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x20000000ffff7fff, 0x00000bfffdffff, x30, x1, 1520, x5)

inst_115:
// rs1_w0_val == 4290772991, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000013ffbfffff;  op2val:0xffefffffff7fffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x000013ffbfffff, 0xffefffffff7fffff, x30, x1, 1536, x5)

inst_116:
// rs2_w0_val == 4294959103, rs1_w0_val == 33554432
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff02000000;  op2val:0x10000000ffffdfff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xbfffffff02000000, 0x10000000ffffdfff, x30, x1, 1552, x5)

inst_117:
// rs2_w0_val == 4294965247, rs1_w0_val == 1073741824
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000040000000;  op2val:0x000003fffff7ff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x10000040000000, 0x000003fffff7ff, x30, x1, 1568, x5)

inst_118:
// rs2_w0_val == 4294966271, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f0000000a;  op2val:0x00000afffffbff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xffffff7f0000000a, 0x00000afffffbff, x30, x1, 1584, x5)

inst_119:
// rs2_w0_val == 4294966783, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000080000000;  op2val:0x00000afffffdff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x40000080000000, 0x00000afffffdff, x30, x1, 1600, x5)

inst_120:
// rs2_w0_val == 4294967231, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffeff;  op2val:0x40000000ffffffbf
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x800000fffffeff, 0x40000000ffffffbf, x30, x1, 1616, x5)

inst_121:
// rs2_w0_val == 4294967293, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007ffff7fff;  op2val:0xffbffffffffffffd
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x000007ffff7fff, 0xffbffffffffffffd, x30, x1, 1632, x5)

inst_122:
// rs1_w0_val == 4294967167, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffffff7f;  op2val:0x00001210000000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x40000000ffffff7f, 0x00001210000000, x30, x1, 1648, x5)

inst_123:
// rs2_w0_val == 536870912, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00040000;  op2val:0x00000220000000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xffefffff00040000, 0x00000220000000, x30, x1, 1664, x5)

inst_124:
// rs2_w0_val == 16777216, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000000a;  op2val:0x00000e01000000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x80000000000000a, 0x00000e01000000, x30, x1, 1680, x5)

inst_125:
// rs2_w0_val == 8388608, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000008;  op2val:0x02000000800000
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffef00000008, 0x02000000800000, x30, x1, 1696, x5)

inst_126:
// rs1_w0_val == 536870912, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff20000000;  op2val:0xffffffdf00000003
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xffffbfff20000000, 0xffffffdf00000003, x30, x1, 1712, x5)

inst_127:
// rs1_w0_val == 67108864, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000004000000;  op2val:0xfffffbfffeffffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x100000004000000, 0xfffffbfffeffffff, x30, x1, 1728, x5)

inst_128:
// rs1_w0_val == 8388608, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001100800000;  op2val:0x00000400000040
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00001100800000, 0x00000400000040, x30, x1, 1744, x5)

inst_129:
// rs1_w0_val == 2097152, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00200000;  op2val:0xffbfffffffbfffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00200000, 0xffbfffffffbfffff, x30, x1, 1760, x5)

inst_130:
// rs1_w0_val == 4294967287, 
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffffff7;  op2val:0xfffffffbfffffffd
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x200000fffffff7, 0xfffffffbfffffffd, x30, x1, 1776, x5)

inst_131:
// rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == 8192, rs2_w0_val == 4294967294, rs1_w0_val == 4294967294, rs1_w1_val == 2147483647
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffffffe;  op2val:0x002000fffffffe
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffffffe, 0x002000fffffffe, x30, x1, 1792, x5)

inst_132:
// rs2_w1_val == 2863311530, rs2_w0_val == 4294901759, rs1_w0_val == 2147483648
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000a80000000;  op2val:0xaaaaaaaafffeffff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x00000a80000000, 0xaaaaaaaafffeffff, x30, x1, 1808, x5)

inst_133:
// rs2_w1_val == 4294966783, rs1_w1_val == 16384, rs2_w0_val == 4294967039, rs1_w0_val == 4293918719
// opcode: ukstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffefffff;  op2val:0xfffffdfffffffeff
TEST_PKRR_OP(ukstsa32, x31, x30, x29, 0x0000000000000000, 0x004000ffefffff, 0xfffffdfffffffeff, x30, x1, 1824, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x14_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x14_1:
    .fill 38*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 230*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
