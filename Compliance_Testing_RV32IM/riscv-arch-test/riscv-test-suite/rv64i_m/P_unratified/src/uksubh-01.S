
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uksubh instruction of the RISC-V RV64PZicsr extension for the uksubh covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uksubh)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1 == rd != rs2, rs1==x27, rs2==x14, rd==x27, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h3_val == 64, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 32768, rs2_h2_val == 0, rs1_h1_val == 64, rs1_h3_val == 63487
// opcode: uksubh ; op1:x27; op2:x14; dest:x27; op1val:0xf7ff000e00400000;  op2val:0x40000000078000
TEST_PKRR_OP(uksubh, x27, x27, x14, 0x0000000000000000, 0xf7ff000e00400000, 0x40000000078000, x27, x9, 0, x7)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x29, rs2==x15, rd==x16, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h1_val == 43690, rs2_h1_val == 32768, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 256, rs1_h0_val == 65503, rs2_h2_val == 65471
// opcode: uksubh ; op1:x29; op2:x15; dest:x16; op1val:0x0b0011aaaaffdf;  op2val:0x0bffbf80000100
TEST_PKRR_OP(uksubh, x16, x29, x15, 0x0000000000000000, 0x0b0011aaaaffdf, 0x0bffbf80000100, x29, x9, 16, x7)

inst_2:
// rs1 == rs2 != rd, rs1==x0, rs2==x0, rd==x23, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h3_val == 65407, rs2_h3_val == 128, rs2_h2_val == 43690, rs1_h1_val == 2048, rs1_h2_val == 43690
// opcode: uksubh ; op1:x0; op2:x0; dest:x23; op1val:0xff7faaaa08000000;  op2val:0x80aaaa8000000f
TEST_PKRR_OP(uksubh, x23, x0, x0, 0x0000000000000000, 0xff7faaaa08000000, 0x80aaaa8000000f, x0, x9, 32, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h2_val == 4096, rs1_h1_val == 65519, rs1_h2_val == 512, rs1_h0_val == 32768, rs1_h3_val == 1, rs2_h1_val == 65519
// opcode: uksubh ; op1:x4; op2:x4; dest:x4; op1val:0x010200ffef8000;  op2val:0x801000ffef0006
TEST_PKRR_OP(uksubh, x4, x4, x4, 0x0000000000000000, 0x010200ffef8000, 0x801000ffef0006, x4, x9, 48, x7)

inst_4:
// rs2 == rd != rs1, rs1==x6, rs2==x21, rd==x21, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 16, rs2_h2_val == 32767, rs1_h1_val == 65533, rs2_h0_val == 16, rs1_h3_val == 2
// opcode: uksubh ; op1:x6; op2:x21; dest:x21; op1val:0x020009fffd0010;  op2val:0x0c7fff00030010
TEST_PKRR_OP(uksubh, x21, x6, x21, 0x0000000000000000, 0x020009fffd0010, 0x0c7fff00030010, x6, x9, 64, x7)

inst_5:
// rs1==x30, rs2==x12, rd==x6, rs2_h3_val == 43690, rs1_h1_val == 1, rs2_h1_val == 16384, rs1_h2_val == 65471, rs1_h3_val == 65534, rs2_h2_val == 2, rs1_h0_val == 65023
// opcode: uksubh ; op1:x30; op2:x12; dest:x6; op1val:0xfffeffbf0001fdff;  op2val:0xaaaa000240008000
TEST_PKRR_OP(uksubh, x6, x30, x12, 0x0000000000000000, 0xfffeffbf0001fdff, 0xaaaa000240008000, x30, x9, 80, x7)

inst_6:
// rs1==x20, rs2==x24, rd==x0, rs2_h3_val == 21845, rs2_h0_val == 32, rs1_h0_val == 64511, rs2_h2_val == 65533, rs1_h2_val == 32767
// opcode: uksubh ; op1:x20; op2:x24; dest:x0; op1val:0x037fffffeffbff;  op2val:0x5555fffd000a0020
TEST_PKRR_OP(uksubh, x0, x20, x24, 0x0000000000000000, 0x037fffffeffbff, 0x5555fffd000a0020, x20, x9, 96, x7)

inst_7:
// rs1==x16, rs2==x27, rd==x22, rs2_h3_val == 32767, rs2_h1_val == 65533, rs1_h2_val == 65534, rs1_h1_val == 32768, rs1_h3_val == 8, rs2_h0_val == 49151, rs1_h0_val == 512
// opcode: uksubh ; op1:x16; op2:x27; dest:x22; op1val:0x08fffe80000200;  op2val:0x7fff7ffffffdbfff
TEST_PKRR_OP(uksubh, x22, x16, x27, 0x0000000000000000, 0x08fffe80000200, 0x7fff7ffffffdbfff, x16, x9, 112, x7)

inst_8:
// rs1==x17, rs2==x3, rd==x20, rs2_h3_val == 49151, rs2_h1_val == 512, rs2_h0_val == 1024, rs1_h2_val == 32768, rs1_h1_val == 8192, rs1_h3_val == 49151
// opcode: uksubh ; op1:x17; op2:x3; dest:x20; op1val:0xbfff800020000006;  op2val:0xbfff000702000400
TEST_PKRR_OP(uksubh, x20, x17, x3, 0x0000000000000000, 0xbfff800020000006, 0xbfff000702000400, x17, x9, 128, x7)

inst_9:
// rs1==x5, rs2==x19, rd==x11, rs2_h3_val == 57343, rs1_h2_val == 64511, rs2_h0_val == 65533, rs1_h0_val == 4, rs1_h1_val == 63487, rs2_h1_val == 1
// opcode: uksubh ; op1:x5; op2:x19; dest:x11; op1val:0x03fbfff7ff0004;  op2val:0xdfff00070001fffd
TEST_PKRR_OP(uksubh, x11, x5, x19, 0x0000000000000000, 0x03fbfff7ff0004, 0xdfff00070001fffd, x5, x9, 144, x7)

inst_10:
// rs1==x8, rs2==x10, rd==x28, rs2_h3_val == 61439, rs2_h1_val == 1024, rs1_h3_val == 43690, rs1_h2_val == 65531, rs1_h1_val == 0
// opcode: uksubh ; op1:x8; op2:x10; dest:x28; op1val:0xaaaafffb00000009;  op2val:0xeffffffd04000006
TEST_PKRR_OP(uksubh, x28, x8, x10, 0x0000000000000000, 0xaaaafffb00000009, 0xeffffffd04000006, x8, x9, 160, x7)

inst_11:
// rs1==x1, rs2==x8, rd==x24, rs2_h3_val == 63487, rs1_h1_val == 65531, rs2_h1_val == 65534, rs1_h2_val == 4, rs1_h3_val == 57343
// opcode: uksubh ; op1:x1; op2:x8; dest:x24; op1val:0xdfff0004fffb0000;  op2val:0xf7ff0006fffe000e
TEST_PKRR_OP(uksubh, x24, x1, x8, 0x0000000000000000, 0xdfff0004fffb0000, 0xf7ff0006fffe000e, x1, x9, 176, x7)

inst_12:
// rs1==x25, rs2==x23, rd==x17, rs2_h3_val == 64511, rs2_h1_val == 8192, rs1_h3_val == 16384, rs1_h0_val == 65533, rs2_h0_val == 0, rs1_h2_val == 64
// opcode: uksubh ; op1:x25; op2:x23; dest:x17; op1val:0x40000040ffeffffd;  op2val:0xfbffffbf20000000
TEST_PKRR_OP(uksubh, x17, x25, x23, 0x0000000000000000, 0x40000040ffeffffd, 0xfbffffbf20000000, x25, x9, 192, x7)

inst_13:
// rs1==x23, rs2==x2, rd==x13, rs2_h3_val == 65023, rs1_h2_val == 65519, rs1_h0_val == 63487, rs2_h2_val == 21845
// opcode: uksubh ; op1:x23; op2:x2; dest:x13; op1val:0x03ffef0000f7ff;  op2val:0xfdff55550003000c
TEST_PKRR_OP(uksubh, x13, x23, x2, 0x0000000000000000, 0x03ffef0000f7ff, 0xfdff55550003000c, x23, x9, 208, x7)

inst_14:
// rs1==x14, rs2==x7, rd==x18, rs2_h3_val == 65279, rs2_h2_val == 16384, rs1_h3_val == 64511, rs2_h1_val == 256, rs1_h0_val == 1024, rs1_h1_val == 16
// opcode: uksubh ; op1:x14; op2:x7; dest:x18; op1val:0xfbfffffb00100400;  op2val:0xfeff400001000006
TEST_PKRR_OP(uksubh, x18, x14, x7, 0x0000000000000000, 0xfbfffffb00100400, 0xfeff400001000006, x14, x9, 224, x3)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_15:
// rs1==x7, rs2==x16, rd==x1, rs2_h3_val == 65407, rs1_h3_val == 65519, rs2_h1_val == 2048, rs1_h0_val == 65407, rs1_h2_val == 32, rs2_h0_val == 63487
// opcode: uksubh ; op1:x7; op2:x16; dest:x1; op1val:0xffef00200012ff7f;  op2val:0xff7f7fff0800f7ff
TEST_PKRR_OP(uksubh, x1, x7, x16, 0x0000000000000000, 0xffef00200012ff7f, 0xff7f7fff0800f7ff, x7, x4, 0, x3)

inst_16:
// rs1==x10, rs2==x13, rd==x14, rs2_h3_val == 65471, rs1_h3_val == 512, rs1_h2_val == 57343, rs2_h1_val == 61439, rs1_h0_val == 32
// opcode: uksubh ; op1:x10; op2:x13; dest:x14; op1val:0x200dfff00070020;  op2val:0xffbf4000efff0005
TEST_PKRR_OP(uksubh, x14, x10, x13, 0x0000000000000000, 0x200dfff00070020, 0xffbf4000efff0005, x10, x4, 16, x3)

inst_17:
// rs1==x11, rs2==x18, rd==x25, rs2_h3_val == 65503, rs1_h0_val == 49151, rs2_h2_val == 4, rs1_h3_val == 256, rs2_h0_val == 4, rs2_h1_val == 65503
// opcode: uksubh ; op1:x11; op2:x18; dest:x25; op1val:0x1000011000ebfff;  op2val:0xffdf0004ffdf0004
TEST_PKRR_OP(uksubh, x25, x11, x18, 0x0000000000000000, 0x1000011000ebfff, 0xffdf0004ffdf0004, x11, x4, 32, x3)

inst_18:
// rs1==x19, rs2==x29, rd==x26, rs2_h3_val == 65519, rs1_h2_val == 128, rs1_h0_val == 32767, rs2_h2_val == 65407
// opcode: uksubh ; op1:x19; op2:x29; dest:x26; op1val:0x02008000017fff;  op2val:0xffefff7f02000013
TEST_PKRR_OP(uksubh, x26, x19, x29, 0x0000000000000000, 0x02008000017fff, 0xffefff7f02000013, x19, x4, 48, x3)

inst_19:
// rs1==x18, rs2==x6, rd==x29, rs2_h3_val == 65527, rs1_h1_val == 32, rs2_h2_val == 65534, rs2_h1_val == 65527
// opcode: uksubh ; op1:x18; op2:x6; dest:x29; op1val:0x0e00120020000c;  op2val:0xfff7fffefff70005
TEST_PKRR_OP(uksubh, x29, x18, x6, 0x0000000000000000, 0x0e00120020000c, 0xfff7fffefff70005, x18, x4, 64, x3)

inst_20:
// rs1==x9, rs2==x22, rd==x31, rs2_h3_val == 65531, rs1_h3_val == 1024, rs2_h2_val == 61439, rs1_h2_val == 1
// opcode: uksubh ; op1:x9; op2:x22; dest:x31; op1val:0x4000001000efdff;  op2val:0xfffbefff08000006
TEST_PKRR_OP(uksubh, x31, x9, x22, 0x0000000000000000, 0x4000001000efdff, 0xfffbefff08000006, x9, x4, 80, x3)

inst_21:
// rs1==x31, rs2==x25, rd==x9, rs2_h3_val == 65533, rs1_h2_val == 0, rs1_h3_val == 128, rs1_h0_val == 65531, rs2_h0_val == 2
// opcode: uksubh ; op1:x31; op2:x25; dest:x9; op1val:0x8000000011fffb;  op2val:0xfffdff7f000e0002
TEST_PKRR_OP(uksubh, x9, x31, x25, 0x0000000000000000, 0x8000000011fffb, 0xfffdff7f000e0002, x31, x4, 96, x3)

inst_22:
// rs1==x21, rs2==x5, rd==x8, rs2_h3_val == 65534, rs2_h1_val == 43690
// opcode: uksubh ; op1:x21; op2:x5; dest:x8; op1val:0x130005000d000b;  op2val:0xfffe0005aaaa0011
TEST_PKRR_OP(uksubh, x8, x21, x5, 0x0000000000000000, 0x130005000d000b, 0xfffe0005aaaa0011, x21, x4, 112, x3)

inst_23:
// rs1==x15, rs2==x30, rd==x5, rs2_h3_val == 32768, rs2_h0_val == 21845, rs2_h2_val == 256, rs2_h1_val == 63487
// opcode: uksubh ; op1:x15; op2:x30; dest:x5; op1val:0x0700120006f7ff;  op2val:0x80000100f7ff5555
TEST_PKRR_OP(uksubh, x5, x15, x30, 0x0000000000000000, 0x0700120006f7ff, 0x80000100f7ff5555, x15, x4, 128, x3)

inst_24:
// rs1==x2, rs2==x11, rd==x15, rs2_h3_val == 16384, rs1_h0_val == 16384, rs2_h0_val == 8192, rs1_h1_val == 2
// opcode: uksubh ; op1:x2; op2:x11; dest:x15; op1val:0x4000000e00024000;  op2val:0x40000007000f2000
TEST_PKRR_OP(uksubh, x15, x2, x11, 0x0000000000000000, 0x4000000e00024000, 0x40000007000f2000, x2, x4, 144, x3)

inst_25:
// rs1==x28, rs2==x31, rd==x12, rs2_h3_val == 8192, rs2_h0_val == 61439, rs1_h3_val == 65535
// opcode: uksubh ; op1:x28; op2:x31; dest:x12; op1val:0xffff00120007fbff;  op2val:0x2000000f0100efff
TEST_PKRR_OP(uksubh, x12, x28, x31, 0x0000000000000000, 0xffff00120007fbff, 0x2000000f0100efff, x28, x4, 160, x3)

inst_26:
// rs1==x22, rs2==x17, rd==x19, rs2_h3_val == 4096, rs1_h1_val == 61439
// opcode: uksubh ; op1:x22; op2:x17; dest:x19; op1val:0xdfffffefefff000e;  op2val:0x10000007f7ff0003
TEST_PKRR_OP(uksubh, x19, x22, x17, 0x0000000000000000, 0xdfffffefefff000e, 0x10000007f7ff0003, x22, x4, 176, x3)

inst_27:
// rs1==x24, rs2==x26, rd==x7, rs2_h3_val == 2048, rs1_h3_val == 32767
// opcode: uksubh ; op1:x24; op2:x26; dest:x7; op1val:0x7ffffbff000a0005;  op2val:0x800efff0005000e
TEST_PKRR_OP(uksubh, x7, x24, x26, 0x0000000000000000, 0x7ffffbff000a0005, 0x800efff0005000e, x24, x4, 192, x3)

inst_28:
// rs1==x3, rs2==x9, rd==x30, rs2_h3_val == 1024, rs1_h2_val == 63487
// opcode: uksubh ; op1:x3; op2:x9; dest:x30; op1val:0x0ff7ff000a000a;  op2val:0x400001200070010
TEST_PKRR_OP(uksubh, x30, x3, x9, 0x0000000000000000, 0x0ff7ff000a000a, 0x400001200070010, x3, x4, 208, x5)
RVTEST_SIGBASE(x4,signature_x4_1)

inst_29:
// rs1==x26, rs2==x1, rd==x3, rs2_h3_val == 512, 
// opcode: uksubh ; op1:x26; op2:x1; dest:x3; op1val:0x0700000012ffdf;  op2val:0x200ff7f04008000
TEST_PKRR_OP(uksubh, x3, x26, x1, 0x0000000000000000, 0x0700000012ffdf, 0x200ff7f04008000, x26, x4, 0, x5)

inst_30:
// rs1==x13, rs2==x20, rd==x2, rs2_h3_val == 256, rs2_h2_val == 49151, rs1_h0_val == 65535, rs1_h2_val == 65535
// opcode: uksubh ; op1:x13; op2:x20; dest:x2; op1val:0x06ffff0010ffff;  op2val:0x100bfff0100f7ff
TEST_PKRR_OP(uksubh, x2, x13, x20, 0x0000000000000000, 0x06ffff0010ffff, 0x100bfff0100f7ff, x13, x4, 16, x5)

inst_31:
// rs1==x12, rs2==x28, rd==x10, rs2_h3_val == 32, rs2_h0_val == 65471, rs2_h2_val == 8192, rs1_h3_val == 65279, rs1_h2_val == 61439
// opcode: uksubh ; op1:x12; op2:x28; dest:x10; op1val:0xfeffefffffef0010;  op2val:0x2020004000ffbf
TEST_PKRR_OP(uksubh, x10, x12, x28, 0x0000000000000000, 0xfeffefffffef0010, 0x2020004000ffbf, x12, x4, 32, x5)

inst_32:
// rs2_h3_val == 16, rs1_h3_val == 65023, rs2_h2_val == 16
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0012000dfffd;  op2val:0x10001000138000
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xfdff0012000dfffd, 0x10001000138000, x30, x4, 48, x5)

inst_33:
// rs2_h3_val == 8, rs1_h0_val == 1
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x4000000100090001;  op2val:0x08ff7f00090003
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x4000000100090001, 0x08ff7f00090003, x30, x4, 64, x5)

inst_34:
// rs2_h3_val == 4, rs2_h0_val == 64, rs1_h3_val == 65471, rs2_h2_val == 65279, rs1_h0_val == 128
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xffbfdfffefff0080;  op2val:0x04feff000c0040
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xffbfdfffefff0080, 0x04feff000c0040, x30, x4, 80, x5)

inst_35:
// rs2_h3_val == 2, rs1_h0_val == 256
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffbf000e0100;  op2val:0x020011000e000b
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xfeffffbf000e0100, 0x020011000e000b, x30, x4, 96, x5)

inst_36:
// rs2_h3_val == 1, rs1_h3_val == 8192, rs2_h0_val == 512, rs2_h2_val == 128
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffbf000f0003;  op2val:0x01008000030200
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x2000ffbf000f0003, 0x01008000030200, x30, x4, 112, x5)

inst_37:
// rs2_h3_val == 65535, rs2_h2_val == 57343, rs1_h0_val == 65519, rs1_h2_val == 256, rs1_h3_val == 61439
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xefff01000012ffef;  op2val:0xffffdfffaaaa0004
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xefff01000012ffef, 0xffffdfffaaaa0004, x30, x4, 128, x5)

inst_38:
// rs1_h1_val == 4, rs2_h1_val == 64, rs2_h2_val == 65531, rs1_h0_val == 21845
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x0cfffb00045555;  op2val:0xfff7fffb00400012
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x0cfffb00045555, 0xfff7fffb00400012, x30, x4, 144, x5)

inst_39:
// rs1_h1_val == 65535, rs1_h2_val == 4096, rs2_h2_val == 65535
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x031000ffff0000;  op2val:0xefffffffaaaabfff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x031000ffff0000, 0xefffffffaaaabfff, x30, x4, 160, x5)

inst_40:
// rs1_h0_val == 43690, rs1_h3_val == 0, rs1_h1_val == 49151, rs2_h0_val == 65279
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x000200bfffaaaa;  op2val:0x2000ffff000afeff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x000200bfffaaaa, 0x2000ffff000afeff, x30, x4, 176, x5)

inst_41:
// rs1_h0_val == 57343, rs1_h2_val == 8, rs2_h2_val == 1
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x2000008f7ffdfff;  op2val:0xfeff000100070020
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x2000008f7ffdfff, 0xfeff000100070020, x30, x4, 192, x5)

inst_42:
// rs1_h0_val == 61439, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xffef000b0000efff;  op2val:0x12008004000040
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xffef000b0000efff, 0x12008004000040, x30, x4, 208, x5)

inst_43:
// rs1_h0_val == 65279, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x0301000001feff;  op2val:0x80000e00030003
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x0301000001feff, 0x80000e00030003, x30, x4, 224, x5)

inst_44:
// rs1_h0_val == 65471, rs1_h1_val == 8, rs2_h0_val == 65535
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x11efff0008ffbf;  op2val:0x7fff000c0400ffff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x11efff0008ffbf, 0x7fff000c0400ffff, x30, x4, 240, x5)

inst_45:
// rs1_h0_val == 65527, rs1_h1_val == 1024, rs2_h2_val == 32, rs2_h0_val == 65503
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x03f7ff0400fff7;  op2val:0xffff0020000affdf
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x03f7ff0400fff7, 0xffff0020000affdf, x30, x4, 256, x5)

inst_46:
// rs1_h0_val == 65534, rs1_h1_val == 21845, rs2_h0_val == 65023
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x0502005555fffe;  op2val:0x0a00072000fdff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x0502005555fffe, 0x0a00072000fdff, x30, x4, 272, x5)

inst_47:
// rs1_h0_val == 8192, rs1_h3_val == 65533, rs2_h0_val == 43690
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffd000504002000;  op2val:0x7fffffbf8000aaaa
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xfffd000504002000, 0x7fffffbf8000aaaa, x30, x4, 288, x5)

inst_48:
// rs1_h0_val == 4096, rs1_h1_val == 512, rs2_h0_val == 4096
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x00000502001000;  op2val:0x10bfff00091000
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x00000502001000, 0x10bfff00091000, x30, x4, 304, x5)

inst_49:
// rs1_h0_val == 2048, rs2_h2_val == 65503, rs2_h1_val == 65279, rs1_h3_val == 32, rs1_h2_val == 16
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x20001000070800;  op2val:0x12ffdffefffeff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x20001000070800, 0x12ffdffefffeff, x30, x4, 320, x5)

inst_50:
// rs1_h0_val == 64, rs2_h1_val == 32767, rs1_h3_val == 4096, rs2_h0_val == 65534
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x1000000900060040;  op2val:0x0200027ffffffe
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x1000000900060040, 0x0200027ffffffe, x30, x4, 336, x5)

inst_51:
// rs1_h0_val == 8, rs2_h1_val == 65407, rs1_h3_val == 64
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x40000000400008;  op2val:0x061000ff7f0000
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x40000000400008, 0x061000ff7f0000, x30, x4, 352, x5)

inst_52:
// rs1_h0_val == 2, rs2_h1_val == 65023, rs2_h2_val == 1024, rs1_h1_val == 65471, rs1_h2_val == 21845
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa5555ffbf0002;  op2val:0x1000400fdfff7ff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xaaaa5555ffbf0002, 0x1000400fdfff7ff, x30, x4, 368, x5)

inst_53:
// rs2_h3_val == 0, rs2_h1_val == 21845
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffd00085555000b;  op2val:0x0000065555ffdf
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xfffd00085555000b, 0x0000065555ffdf, x30, x4, 384, x5)

inst_54:
// rs2_h2_val == 63487, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x020040000fffbf;  op2val:0x06f7ff00070010
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x020040000fffbf, 0x06f7ff00070010, x30, x4, 400, x5)

inst_55:
// rs2_h2_val == 64511, rs1_h2_val == 65023
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x08fdff0001ffef;  op2val:0x04fbff000f8000
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x08fdff0001ffef, 0x04fbff000f8000, x30, x4, 416, x5)

inst_56:
// rs2_h2_val == 65023, rs2_h0_val == 65527, rs1_h2_val == 65533
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x0dfffdfffd0003;  op2val:0x0afdff0013fff7
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x0dfffdfffd0003, 0x0afdff0013fff7, x30, x4, 432, x5)

inst_57:
// rs2_h2_val == 65519, rs1_h1_val == 65023, rs1_h2_val == 65279
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffefffdff0020;  op2val:0x13ffef08000400
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xf7fffefffdff0020, 0x13ffef08000400, x30, x4, 448, x5)

inst_58:
// rs2_h0_val == 65519, rs2_h1_val == 64511, rs1_h1_val == 32767
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xefffffef7fff0010;  op2val:0x110400fbffffef
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xefffffef7fff0010, 0x110400fbffffef, x30, x4, 464, x5)

inst_59:
// rs2_h0_val == 65531, rs1_h2_val == 16384, rs2_h2_val == 8
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x0d400080000007;  op2val:0xffdf0008ff7ffffb
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x0d400080000007, 0xffdf0008ff7ffffb, x30, x4, 480, x5)

inst_60:
// rs2_h0_val == 16384, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffdaaaa0003;  op2val:0x0bfdff00404000
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x2000fffdaaaa0003, 0x0bfdff00404000, x30, x4, 496, x5)

inst_61:
// rs2_h0_val == 2048, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x0c0001000c0800;  op2val:0xfffe040000120800
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x0c0001000c0800, 0xfffe040000120800, x30, x4, 512, x5)

inst_62:
// rs2_h0_val == 128, rs2_h2_val == 32768
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x08fbff00090800;  op2val:0x8008000fff70080
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x08fbff00090800, 0x8008000fff70080, x30, x4, 528, x5)

inst_63:
// rs2_h0_val == 8, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfeff000f000e0200;  op2val:0x1000000500060008
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xfeff000f000e0200, 0x1000000500060008, x30, x4, 544, x5)

inst_64:
// rs2_h0_val == 1, rs2_h1_val == 16
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0007ffff7fff;  op2val:0x10000900100001
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xbfff0007ffff7fff, 0x10000900100001, x30, x4, 560, x5)

inst_65:
// rs1_h3_val == 21845, rs1_h1_val == 65279
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x5555000ffeff1000;  op2val:0x13000655550003
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x5555000ffeff1000, 0x13000655550003, x30, x4, 576, x5)

inst_66:
// rs1_h3_val == 65503, rs2_h1_val == 49151, rs1_h2_val == 2
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000200130007;  op2val:0xffef0011bfff8000
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xffdf000200130007, 0xffef0011bfff8000, x30, x4, 592, x5)

inst_67:
// rs1_h3_val == 65527, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfff7000e80000012;  op2val:0x0afffffeff4000
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xfff7000e80000012, 0x0afffffeff4000, x30, x4, 608, x5)

inst_68:
// rs1_h3_val == 65531, rs2_h1_val == 2
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000e000cf7ff;  op2val:0x0efbff00028000
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xfffb000e000cf7ff, 0x0efbff00028000, x30, x4, 624, x5)

inst_69:
// rs1_h3_val == 32768, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffef000ddfff;  op2val:0x800fbfff7ff1000
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x8000ffef000ddfff, 0x800fbfff7ff1000, x30, x4, 640, x5)

inst_70:
// rs1_h3_val == 2048, rs1_h2_val == 65503, rs2_h1_val == 32
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x800ffdf00080011;  op2val:0x2000fbff0020000a
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x800ffdf00080011, 0x2000fbff0020000a, x30, x4, 656, x5)

inst_71:
// rs1_h3_val == 16, rs1_h1_val == 65407
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x100001ff7f0400;  op2val:0x0cfffbffdf0009
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x100001ff7f0400, 0x0cfffbffdf0009, x30, x4, 672, x5)

inst_72:
// rs1_h3_val == 4, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x04fffd00020005;  op2val:0xfeff8000000aaaaa
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x04fffd00020005, 0xfeff8000000aaaaa, x30, x4, 688, x5)

inst_73:
// rs2_h2_val == 65527, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00070007;  op2val:0xfffefff755550008
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xfbffffff00070007, 0xfffefff755550008, x30, x4, 704, x5)

inst_74:
// rs1_h2_val == 49151, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xff7fbfffff7fbfff;  op2val:0x120011000a0003
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xff7fbfffff7fbfff, 0x120011000a0003, x30, x4, 720, x5)

inst_75:
// rs2_h2_val == 2048, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x0faaaa000c0012;  op2val:0x80000800000b000b
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x0faaaa000c0012, 0x80000800000b000b, x30, x4, 736, x5)

inst_76:
// rs2_h2_val == 512, rs2_h1_val == 57343
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x200010000e0003;  op2val:0x4000200dfff0400
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x200010000e0003, 0x4000200dfff0400, x30, x4, 752, x5)

inst_77:
// rs1_h2_val == 65407, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xefffff7faaaa0013;  op2val:0x8000feff0011fff7
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xefffff7faaaa0013, 0x8000feff0011fff7, x30, x4, 768, x5)

inst_78:
// rs2_h2_val == 64, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x12000b0010efff;  op2val:0xffdf004000124000
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x12000b0010efff, 0xffdf004000124000, x30, x4, 784, x5)

inst_79:
// rs1_h2_val == 65527, rs2_h0_val == 57343, rs2_h1_val == 128, rs1_h1_val == 65527
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff7fff7fff7;  op2val:0x4000000c0080dfff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xbffffff7fff7fff7, 0x4000000c0080dfff, x30, x4, 800, x5)

inst_80:
// rs1_h2_val == 8192, rs1_h1_val == 65503
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfbff2000ffdf0040;  op2val:0x05000800200013
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xfbff2000ffdf0040, 0x05000800200013, x30, x4, 816, x5)

inst_81:
// rs1_h2_val == 2048, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x02080055550009;  op2val:0xfdff00050005fff7
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x02080055550009, 0xfdff00050005fff7, x30, x4, 832, x5)

inst_82:
// rs1_h2_val == 1024, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x8000040000110006;  op2val:0x0500130080efff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x8000040000110006, 0x0500130080efff, x30, x4, 848, x5)

inst_83:
// rs2_h1_val == 65471, rs1_h1_val == 57343
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x060009dfffefff;  op2val:0x075555ffbf0200
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x060009dfffefff, 0x075555ffbf0200, x30, x4, 864, x5)

inst_84:
// rs2_h1_val == 65531, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x13feff04000006;  op2val:0x107ffffffbdfff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x13feff04000006, 0x107ffffffbdfff, x30, x4, 880, x5)

inst_85:
// rs2_h1_val == 4096, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x04feff0013f7ff;  op2val:0x08001310000400
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x04feff0013f7ff, 0x08001310000400, x30, x4, 896, x5)

inst_86:
// rs1_h1_val == 64511, rs2_h0_val == 65407
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x4000ff7ffbff0008;  op2val:0xffeffbfffffdff7f
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x4000ff7ffbff0008, 0xffeffbfffffdff7f, x30, x4, 912, x5)

inst_87:
// rs2_h1_val == 8, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x0efffefdff0001;  op2val:0x0e000100080012
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x0efffefdff0001, 0x0e000100080012, x30, x4, 928, x5)

inst_88:
// rs2_h1_val == 4, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fbff00030013;  op2val:0x0b00020004ff7f
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xfff7fbff00030013, 0x0b00020004ff7f, x30, x4, 944, x5)

inst_89:
// rs1_h1_val == 65534, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x068000fffeff7f;  op2val:0xfdff000e000f0020
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x068000fffeff7f, 0xfdff000e000f0020, x30, x4, 960, x5)

inst_90:
// rs2_h1_val == 65535, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0400f7fffff7;  op2val:0x0d0004ffff000c
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x7fff0400f7fffff7, 0x0d0004ffff000c, x30, x4, 976, x5)

inst_91:
// rs2_h1_val == 0, rs1_h1_val == 4096, rs2_h0_val == 32767
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x07000310000002;  op2val:0x0df7ff00007fff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x07000310000002, 0x0df7ff00007fff, x30, x4, 992, x5)

inst_92:
// rs2_h0_val == 64511, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x100200000120020;  op2val:0xaaaa00082000fbff
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x100200000120020, 0xaaaa00082000fbff, x30, x4, 1008, x5)

inst_93:
// rs1_h1_val == 256, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x0c00100100fffe;  op2val:0xffeffff70008fff7
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x0c00100100fffe, 0xffeffff70008fff7, x30, x4, 1024, x5)

inst_94:
// rs1_h1_val == 128, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x0afffd00800020;  op2val:0x8000800efff0004
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x0afffd00800020, 0x8000800efff0004, x30, x4, 1040, x5)

inst_95:
// rs1_h1_val == 16384, 
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x4000fbff40000000;  op2val:0x400fffb000a2000
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x4000fbff40000000, 0x400fffb000a2000, x30, x4, 1056, x5)

inst_96:
// rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h3_val == 65407, rs2_h3_val == 128, rs2_h2_val == 43690, rs1_h1_val == 2048, rs1_h2_val == 43690
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0xff7faaaa08000000;  op2val:0x80aaaa8000000f
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0xff7faaaa08000000, 0x80aaaa8000000f, x30, x4, 1072, x5)

inst_97:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h2_val == 4096, rs1_h1_val == 65519, rs1_h2_val == 512, rs1_h0_val == 32768, rs1_h3_val == 1, rs2_h1_val == 65519
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x010200ffef8000;  op2val:0x801000ffef0006
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x010200ffef8000, 0x801000ffef0006, x30, x4, 1088, x5)

inst_98:
// rs2_h3_val == 21845, rs2_h0_val == 32, rs1_h0_val == 64511, rs2_h2_val == 65533, rs1_h2_val == 32767
// opcode: uksubh ; op1:x30; op2:x29; dest:x31; op1val:0x037fffffeffbff;  op2val:0x5555fffd000a0020
TEST_PKRR_OP(uksubh, x31, x30, x29, 0x0000000000000000, 0x037fffffeffbff, 0x5555fffd000a0020, x30, x4, 1104, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 140*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
