
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmxda instruction of the RISC-V RV64PZicsr extension for the kmxda covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmxda)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x10,signature_x10_1)

inst_0:
// rs1 == rd != rs2, rs1==x11, rs2==x23, rd==x11, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h1_val == 32767, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h3_val == -1025, rs1_h2_val == -16385, rs1_h0_val == rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -32768, rs2_h3_val == -1
// opcode: kmxda ; op1:x11; op2:x23; dest:x11; op1val:0xfbffbffffff88000;  op2val:0xfffffff97fff8000
TEST_PKRR_OP(kmxda, x11, x11, x23, 0x0000000000000000, 0xfbffbffffff88000, 0xfffffff97fff8000, x11, x10, 0, x16)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x5, rs2==x11, rd==x25, rs1_h3_val == rs2_h3_val, rs1_h1_val == -3, rs2_h3_val == -33, rs2_h0_val == 32767, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h1_val == -129, rs1_h2_val == 32767, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h3_val == -33
// opcode: kmxda ; op1:x5; op2:x11; dest:x25; op1val:0xffdf7ffffffdc000;  op2val:0xffdffffcff7f7fff
TEST_PKRR_OP(kmxda, x25, x5, x11, 0x0000000000000000, 0xffdf7ffffffdc000, 0xffdffffcff7f7fff, x5, x10, 16, x16)

inst_2:
// rs1 == rs2 != rd, rs1==x25, rs2==x25, rd==x3, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == -2049, rs1_h1_val == 2048, rs2_h1_val == -65, rs2_h3_val == 2048, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val == -16385, rs2_h0_val == 4096, rs1_h2_val == -32768
// opcode: kmxda ; op1:x25; op2:x25; dest:x3; op1val:0xfffc80000800bfff;  op2val:0x800f7ffffbf1000
TEST_PKRR_OP(kmxda, x3, x25, x25, 0x0000000000000000, 0xfffc80000800bfff, 0x800f7ffffbf1000, x25, x10, 32, x16)

inst_3:
// rs1 == rs2 == rd, rs1==x24, rs2==x24, rd==x24, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h0_val == -1, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h0_val == 2048, rs1_h3_val == 32767, rs1_h1_val == 16, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h2_val == 1024, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 256, rs1_h2_val == -2
// opcode: kmxda ; op1:x24; op2:x24; dest:x24; op1val:0x7ffffffe00100800;  op2val:0xffff04000100ffff
TEST_PKRR_OP(kmxda, x24, x24, x24, 0x0000000000000000, 0x7ffffffe00100800, 0xffff04000100ffff, x24, x10, 48, x16)

inst_4:
// rs2 == rd != rs1, rs1==x21, rs2==x6, rd==x6, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h1_val == -1025, rs2_h2_val == 8192, rs2_h0_val == -8193, rs1_h0_val == 512
// opcode: kmxda ; op1:x21; op2:x6; dest:x6; op1val:0x078000fbff0200;  op2val:0x032000fff8dfff
TEST_PKRR_OP(kmxda, x6, x21, x6, 0x0000000000000000, 0x078000fbff0200, 0x032000fff8dfff, x21, x10, 64, x16)

inst_5:
// rs1==x2, rs2==x20, rd==x14, rs1_h2_val == rs2_h2_val, rs1_h3_val == 1, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val == -21846, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 1024
// opcode: kmxda ; op1:x2; op2:x20; dest:x14; op1val:0x010006aaaa0009;  op2val:0xc000000600090400
TEST_PKRR_OP(kmxda, x14, x2, x20, 0x0000000000000000, 0x010006aaaa0009, 0xc000000600090400, x2, x10, 80, x16)

inst_6:
// rs1==x3, rs2==x0, rd==x30, rs1_h1_val == rs2_h1_val, rs1_h3_val == 16384, rs1_h0_val == 16384, rs2_h3_val == -9
// opcode: kmxda ; op1:x3; op2:x0; dest:x30; op1val:0x4000000900064000;  op2val:0xfff700030006c000
TEST_PKRR_OP(kmxda, x30, x3, x0, 0x0000000000000000, 0x4000000900064000, 0xfff700030006c000, x3, x10, 96, x16)

inst_7:
// rs1==x9, rs2==x1, rd==x29, rs2_h3_val == -21846, rs2_h0_val == 16384, rs1_h1_val == -2, rs1_h0_val == -129, rs2_h2_val == 32767
// opcode: kmxda ; op1:x9; op2:x1; dest:x29; op1val:0x050006fffeff7f;  op2val:0xaaaa7ffffff94000
TEST_PKRR_OP(kmxda, x29, x9, x1, 0x0000000000000000, 0x050006fffeff7f, 0xaaaa7ffffff94000, x9, x10, 112, x16)

inst_8:
// rs1==x20, rs2==x28, rd==x0, rs2_h3_val == 21845, rs1_h0_val == -3, rs2_h2_val == 4096, rs1_h1_val == -2049, rs2_h1_val == 128, rs1_h2_val == -3, rs1_h3_val == 2048
// opcode: kmxda ; op1:x20; op2:x28; dest:x0; op1val:0x800fffdf7fffffd;  op2val:0x5555100000800009
TEST_PKRR_OP(kmxda, x0, x20, x28, 0x0000000000000000, 0x800fffdf7fffffd, 0x5555100000800009, x20, x10, 128, x16)

inst_9:
// rs1==x23, rs2==x8, rd==x4, rs2_h3_val == 32767, rs1_h1_val == -32768, rs1_h0_val == -2, rs1_h3_val == 0, rs2_h1_val == 16384, rs2_h2_val == 128
// opcode: kmxda ; op1:x23; op2:x8; dest:x4; op1val:0x00fffa8000fffe;  op2val:0x7fff008040007fff
TEST_PKRR_OP(kmxda, x4, x23, x8, 0x0000000000000000, 0x00fffa8000fffe, 0x7fff008040007fff, x23, x10, 144, x16)

inst_10:
// rs1==x15, rs2==x18, rd==x12, rs2_h3_val == -16385, rs2_h1_val == -5, rs1_h2_val == 8192, rs1_h3_val == -32768, rs2_h2_val == -21846
// opcode: kmxda ; op1:x15; op2:x18; dest:x12; op1val:0x800020000006c000;  op2val:0xbfffaaaafffb0009
TEST_PKRR_OP(kmxda, x12, x15, x18, 0x0000000000000000, 0x800020000006c000, 0xbfffaaaafffb0009, x15, x10, 160, x16)

inst_11:
// rs1==x28, rs2==x15, rd==x13, rs2_h3_val == -8193, rs1_h2_val == 4, rs2_h0_val == 512, rs2_h2_val == -257
// opcode: kmxda ; op1:x28; op2:x15; dest:x13; op1val:0xfff600040006bfff;  op2val:0xdffffeff00050200
TEST_PKRR_OP(kmxda, x13, x28, x15, 0x0000000000000000, 0xfff600040006bfff, 0xdffffeff00050200, x28, x10, 176, x16)

inst_12:
// rs1==x13, rs2==x2, rd==x5, rs2_h3_val == -4097, rs1_h1_val == 1, rs1_h3_val == -8193
// opcode: kmxda ; op1:x13; op2:x2; dest:x5; op1val:0xdfffbfff00010800;  op2val:0xeffffefffff80400
TEST_PKRR_OP(kmxda, x5, x13, x2, 0x0000000000000000, 0xdfffbfff00010800, 0xeffffefffff80400, x13, x10, 192, x16)

inst_13:
// rs1==x27, rs2==x22, rd==x18, rs2_h3_val == -2049, rs1_h2_val == 32, rs2_h0_val == -4097, rs1_h1_val == 256, rs2_h1_val == 512, rs1_h0_val == -513
// opcode: kmxda ; op1:x27; op2:x22; dest:x18; op1val:0xfff600200100fdff;  op2val:0xf7ff00060200efff
TEST_PKRR_OP(kmxda, x18, x27, x22, 0x0000000000000000, 0xfff600200100fdff, 0xf7ff00060200efff, x27, x10, 208, x16)

inst_14:
// rs1==x18, rs2==x17, rd==x28, rs2_h3_val == -1025, rs1_h0_val == 2
// opcode: kmxda ; op1:x18; op2:x17; dest:x28; op1val:0x8000fff600050002;  op2val:0xfbff0080fffc0003
TEST_PKRR_OP(kmxda, x28, x18, x17, 0x0000000000000000, 0x8000fff600050002, 0xfbff0080fffc0003, x18, x10, 224, x16)

inst_15:
// rs1==x0, rs2==x19, rd==x7, rs2_h3_val == -513, rs2_h1_val == 4, rs1_h1_val == 4096, rs2_h2_val == -65, rs1_h3_val == -2049, rs1_h2_val == -1025, rs2_h0_val == 2048
// opcode: kmxda ; op1:x0; op2:x19; dest:x7; op1val:0xf7fffbff10000800;  op2val:0xfdffffbf00040800
TEST_PKRR_OP(kmxda, x7, x0, x19, 0x0000000000000000, 0xf7fffbff10000800, 0xfdffffbf00040800, x0, x10, 240, x16)
RVTEST_SIGBASE(x11,signature_x11_0)

inst_16:
// rs1==x31, rs2==x5, rd==x19, rs2_h3_val == -257, rs1_h3_val == 32, rs2_h2_val == 16384, rs1_h2_val == -1, rs2_h1_val == -2, rs1_h0_val == 32767, rs2_h0_val == 256
// opcode: kmxda ; op1:x31; op2:x5; dest:x19; op1val:0x20ffff00017fff;  op2val:0xfeff4000fffe0100
TEST_PKRR_OP(kmxda, x19, x31, x5, 0x0000000000000000, 0x20ffff00017fff, 0xfeff4000fffe0100, x31, x11, 0, x18)

inst_17:
// rs1==x7, rs2==x21, rd==x31, rs2_h3_val == -129, rs2_h1_val == 2, rs2_h0_val == -513, rs2_h2_val == -2, rs1_h3_val == -257, rs1_h2_val == -33
// opcode: kmxda ; op1:x7; op2:x21; dest:x31; op1val:0xfeffffdf0800ff7f;  op2val:0xff7ffffe0002fdff
TEST_PKRR_OP(kmxda, x31, x7, x21, 0x0000000000000000, 0xfeffffdf0800ff7f, 0xff7ffffe0002fdff, x7, x11, 16, x18)

inst_18:
// rs1==x26, rs2==x31, rd==x8, rs2_h3_val == -65, rs2_h2_val == -3, rs2_h0_val == -2, rs1_h3_val == -9
// opcode: kmxda ; op1:x26; op2:x31; dest:x8; op1val:0xfff7fbfffbff0200;  op2val:0xffbffffdfff9fffe
TEST_PKRR_OP(kmxda, x8, x26, x31, 0x0000000000000000, 0xfff7fbfffbff0200, 0xffbffffdfff9fffe, x26, x11, 32, x18)

inst_19:
// rs1==x19, rs2==x9, rd==x15, rs2_h3_val == -17, rs2_h1_val == 21845, rs1_h2_val == 2048, rs2_h2_val == 64, rs1_h3_val == -5, rs1_h0_val == -257
// opcode: kmxda ; op1:x19; op2:x9; dest:x15; op1val:0xfffb08008000feff;  op2val:0xffef004055551000
TEST_PKRR_OP(kmxda, x15, x19, x9, 0x0000000000000000, 0xfffb08008000feff, 0xffef004055551000, x19, x11, 48, x18)

inst_20:
// rs1==x17, rs2==x26, rd==x21, rs2_h3_val == -5, rs1_h3_val == -1, rs1_h1_val == -8193, rs2_h2_val == 0
// opcode: kmxda ; op1:x17; op2:x26; dest:x21; op1val:0xffff0800dffffffe;  op2val:0xfffb0000ffbf0005
TEST_PKRR_OP(kmxda, x21, x17, x26, 0x0000000000000000, 0xffff0800dffffffe, 0xfffb0000ffbf0005, x17, x11, 64, x18)

inst_21:
// rs1==x12, rs2==x13, rd==x2, rs2_h3_val == -3, rs1_h2_val == 8, rs2_h1_val == 32, rs2_h0_val == 21845, rs1_h1_val == -129
// opcode: kmxda ; op1:x12; op2:x13; dest:x2; op1val:0x8000008ff7ffff8;  op2val:0xfffd3fff00205555
TEST_PKRR_OP(kmxda, x2, x12, x13, 0x0000000000000000, 0x8000008ff7ffff8, 0xfffd3fff00205555, x12, x11, 80, x18)

inst_22:
// rs1==x10, rs2==x14, rd==x26, rs2_h3_val == -2, rs1_h3_val == -3, rs2_h1_val == 0, rs1_h0_val == 128
// opcode: kmxda ; op1:x10; op2:x14; dest:x26; op1val:0xfffdc00000060080;  op2val:0xfffe000700000009
TEST_PKRR_OP(kmxda, x26, x10, x14, 0x0000000000000000, 0xfffdc00000060080, 0xfffe000700000009, x10, x11, 96, x18)

inst_23:
// rs1==x22, rs2==x3, rd==x10, rs2_h3_val == -32768, rs1_h1_val == 21845
// opcode: kmxda ; op1:x22; op2:x3; dest:x10; op1val:0xf7fffffd5555c000;  op2val:0x8000400000070100
TEST_PKRR_OP(kmxda, x10, x22, x3, 0x0000000000000000, 0xf7fffffd5555c000, 0x8000400000070100, x22, x11, 112, x18)

inst_24:
// rs1==x14, rs2==x7, rd==x23, rs2_h3_val == 16384, rs2_h1_val == -1025, rs1_h1_val == -33
// opcode: kmxda ; op1:x14; op2:x7; dest:x23; op1val:0x7ffffff8ffdfc000;  op2val:0x4000fffcfbfffffc
TEST_PKRR_OP(kmxda, x23, x14, x7, 0x0000000000000000, 0x7ffffff8ffdfc000, 0x4000fffcfbfffffc, x14, x11, 128, x18)

inst_25:
// rs1==x30, rs2==x12, rd==x1, rs2_h3_val == 8192, rs2_h2_val == 16, rs2_h1_val == 64
// opcode: kmxda ; op1:x30; op2:x12; dest:x1; op1val:0x40000004fff63fff;  op2val:0x2000001000400003
TEST_PKRR_OP(kmxda, x1, x30, x12, 0x0000000000000000, 0x40000004fff63fff, 0x2000001000400003, x30, x11, 144, x18)

inst_26:
// rs1==x4, rs2==x27, rd==x22, rs2_h3_val == 4096, rs1_h3_val == -2
// opcode: kmxda ; op1:x4; op2:x27; dest:x22; op1val:0xfffefffd0010bfff;  op2val:0x100000050009fff6
TEST_PKRR_OP(kmxda, x22, x4, x27, 0x0000000000000000, 0xfffefffd0010bfff, 0x100000050009fff6, x4, x11, 160, x18)

inst_27:
// rs1==x8, rs2==x29, rd==x27, rs2_h3_val == 1024, rs1_h0_val == -4097, rs2_h1_val == -1
// opcode: kmxda ; op1:x8; op2:x29; dest:x27; op1val:0x05fff8ff7fefff;  op2val:0x4000080ffff3fff
TEST_PKRR_OP(kmxda, x27, x8, x29, 0x0000000000000000, 0x05fff8ff7fefff, 0x4000080ffff3fff, x8, x11, 176, x18)

inst_28:
// rs1==x1, rs2==x10, rd==x20, rs2_h3_val == 512, rs1_h0_val == -65, rs2_h2_val == -33, rs1_h2_val == 4096, rs2_h1_val == -33
// opcode: kmxda ; op1:x1; op2:x10; dest:x20; op1val:0xfff81000dfffffbf;  op2val:0x200ffdfffdf0009
TEST_PKRR_OP(kmxda, x20, x1, x10, 0x0000000000000000, 0xfff81000dfffffbf, 0x200ffdfffdf0009, x1, x11, 192, x18)

inst_29:
// rs1==x6, rs2==x30, rd==x16, rs2_h3_val == 256, rs2_h2_val == -8193, rs2_h1_val == -32768
// opcode: kmxda ; op1:x6; op2:x30; dest:x16; op1val:0x05080000060800;  op2val:0x100dfff80004000
TEST_PKRR_OP(kmxda, x16, x6, x30, 0x0000000000000000, 0x05080000060800, 0x100dfff80004000, x6, x11, 208, x18)

inst_30:
// rs1==x29, rs2==x4, rd==x17, rs2_h3_val == 128, rs1_h2_val == -21846, rs1_h1_val == 512, rs2_h2_val == 2048, rs2_h0_val == -21846
// opcode: kmxda ; op1:x29; op2:x4; dest:x17; op1val:0x06aaaa02000200;  op2val:0x8008000040aaaa
TEST_PKRR_OP(kmxda, x17, x29, x4, 0x0000000000000000, 0x06aaaa02000200, 0x8008000040aaaa, x29, x11, 224, x1)

inst_31:
// rs1==x16, rs2_h3_val == 64, rs1_h1_val == 1024, rs1_h3_val == -16385, rs2_h1_val == -2049
// opcode: kmxda ; op1:x16; op2:x30; dest:x8; op1val:0xbfff800004000200;  op2val:0x40aaaaf7ff0003
TEST_PKRR_OP(kmxda, x8, x16, x30, 0x0000000000000000, 0xbfff800004000200, 0x40aaaaf7ff0003, x16, x11, 240, x1)

inst_32:
// rs2==x16, rs2_h3_val == 32, rs1_h3_val == 8192, rs1_h2_val == 128
// opcode: kmxda ; op1:x6; op2:x16; dest:x23; op1val:0x20000080fff93fff;  op2val:0x20c00000070007
TEST_PKRR_OP(kmxda, x23, x6, x16, 0x0000000000000000, 0x20000080fff93fff, 0x20c00000070007, x6, x11, 256, x1)

inst_33:
// rd==x9, rs2_h3_val == 16, rs2_h2_val == -1025, rs1_h2_val == -513
// opcode: kmxda ; op1:x26; op2:x23; dest:x9; op1val:0xfff9fdffffdf0002;  op2val:0x10fbff3fffaaaa
TEST_PKRR_OP(kmxda, x9, x26, x23, 0x0000000000000000, 0xfff9fdffffdf0002, 0x10fbff3fffaaaa, x26, x11, 272, x1)

inst_34:
// rs2_h3_val == 8, rs2_h2_val == -16385
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x203fff10000200;  op2val:0x08bfff0200fffc
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x203fff10000200, 0x08bfff0200fffc, x30, x11, 288, x1)

inst_35:
// rs2_h3_val == 4, rs1_h1_val == 2
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffaffff0002fff8;  op2val:0x040400c0000400
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfffaffff0002fff8, 0x040400c0000400, x30, x11, 304, x1)

inst_36:
// rs2_h3_val == 2, rs1_h3_val == 21845
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x555508000100fffa;  op2val:0x02400080000003
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x555508000100fffa, 0x02400080000003, x30, x11, 320, x1)

inst_37:
// rs2_h3_val == 1, rs1_h3_val == 256, rs2_h0_val == -9, rs1_h0_val == -17
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x10010000001ffef;  op2val:0x01aaaa0009fff7
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x10010000001ffef, 0x01aaaa0009fff7, x30, x11, 336, x1)

inst_38:
// rs2_h3_val == 0, rs2_h2_val == -1, rs2_h0_val == -2049, rs1_h3_val == -17, rs2_h1_val == -4097
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xffef00083ffffff9;  op2val:0x00ffffeffff7ff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xffef00083ffffff9, 0x00ffffeffff7ff, x30, x11, 352, x1)

inst_39:
// rs1_h1_val == -5, rs1_h3_val == -129, rs2_h2_val == -513, rs1_h0_val == 1
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xff7f8000fffb0001;  op2val:0xbffffdff02005555
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xff7f8000fffb0001, 0xbffffdff02005555, x30, x11, 368, x1)

inst_40:
// rs1_h1_val == 16384, rs1_h2_val == 1024, rs2_h2_val == -5, rs1_h0_val == -21846, rs2_h0_val == 128
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xffdf04004000aaaa;  op2val:0x09fffb00000080
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xffdf04004000aaaa, 0x09fffb00000080, x30, x11, 384, x1)

inst_41:
// rs1_h1_val == 8192, rs2_h0_val == -5
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x8000002020000200;  op2val:0x02fffefffefffb
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x8000002020000200, 0x02fffefffefffb, x30, x11, 400, x1)

inst_42:
// rs1_h1_val == 128, rs1_h0_val == -5
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffb04000080fffb;  op2val:0xfffbfffd0200fff6
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfffb04000080fffb, 0xfffbfffd0200fff6, x30, x11, 416, x1)

inst_43:
// rs1_h1_val == 64, rs2_h0_val == -3
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff600200040ff7f;  op2val:0x3ffffffa7ffffffd
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfff600200040ff7f, 0x3ffffffa7ffffffd, x30, x11, 432, x1)

inst_44:
// rs1_h1_val == 32, rs2_h0_val == -17, rs2_h1_val == 16, rs1_h0_val == -1
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfbff7fff0020ffff;  op2val:0xfeff00100010ffef
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfbff7fff0020ffff, 0xfeff00100010ffef, x30, x11, 448, x1)

inst_45:
// rs1_h1_val == 8, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x20100000088000;  op2val:0xfff6f7ff0100fff6
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x20100000088000, 0xfff6f7ff0100fff6, x30, x11, 464, x1)

inst_46:
// rs1_h1_val == 4, rs1_h2_val == 2, rs2_h1_val == 4096
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x5555000200040080;  op2val:0x100fffa1000fff6
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x5555000200040080, 0x100fffa1000fff6, x30, x11, 480, x1)

inst_47:
// rs1_h1_val == 0, rs2_h1_val == -21846
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x09fffc00000006;  op2val:0xff7ffffeaaaadfff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x09fffc00000006, 0xff7ffffeaaaadfff, x30, x11, 496, x1)

inst_48:
// rs1_h1_val == -1, rs2_h1_val == -3
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff6ffffaaaa;  op2val:0xfff9fffffffdfffa
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x7ffffff6ffffaaaa, 0xfff9fffffffdfffa, x30, x11, 512, x1)

inst_49:
// rs1_h0_val == 21845, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x4000000202005555;  op2val:0x3ffffffdfffcfffd
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x4000000202005555, 0x3ffffffdfffcfffd, x30, x11, 528, x1)

inst_50:
// rs1_h0_val == -8193, rs2_h1_val == 8192, rs2_h0_val == 1
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffdfffffedfff;  op2val:0xdfffffff20000001
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xff7ffdfffffedfff, 0xdfffffff20000001, x30, x11, 544, x1)

inst_51:
// rs1_h0_val == -2049, rs2_h2_val == -17, rs2_h0_val == 2
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff90800f7ff;  op2val:0xefffffef00050002
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x7ffffff90800f7ff, 0xefffffef00050002, x30, x11, 560, x1)

inst_52:
// rs1_h0_val == -1025, rs1_h1_val == -16385
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff8aaaabffffbff;  op2val:0x4000fff6fff90800
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfff8aaaabffffbff, 0x4000fff6fff90800, x30, x11, 576, x1)

inst_53:
// rs1_h0_val == -33, rs1_h3_val == -65, rs1_h2_val == -257
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xffbffefffffbffdf;  op2val:0xfff8200001000007
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xffbffefffffbffdf, 0xfff8200001000007, x30, x11, 592, x1)

inst_54:
// rs1_h0_val == -9, rs1_h3_val == -513
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00050001fff7;  op2val:0xffff4000ff7f0080
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfdff00050001fff7, 0xffff4000ff7f0080, x30, x11, 608, x1)

inst_55:
// rs1_h0_val == 8192, rs1_h1_val == -257, rs2_h2_val == -32768
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x100fff8feff2000;  op2val:0x10008000c0000400
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x100fff8feff2000, 0x10008000c0000400, x30, x11, 624, x1)

inst_56:
// rs1_h0_val == 4096, rs1_h2_val == 64, rs1_h3_val == -21846, rs2_h1_val == -257
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa004000021000;  op2val:0xeffffffcfeffc000
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xaaaa004000021000, 0xeffffffcfeffc000, x30, x11, 640, x1)

inst_57:
// rs1_h0_val == 1024, rs2_h1_val == 2048, rs1_h1_val == -4097, rs2_h2_val == -129
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8efff0400;  op2val:0x40ff7f08000007
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfffffff8efff0400, 0x40ff7f08000007, x30, x11, 656, x1)

inst_58:
// rs1_h0_val == 256, rs2_h0_val == 64, rs2_h2_val == 32
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffd7fff00090100;  op2val:0x200020fffa0040
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfffd7fff00090100, 0x200020fffa0040, x30, x11, 672, x1)

inst_59:
// rs1_h0_val == 64, rs2_h2_val == 8
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffa100000100040;  op2val:0xffff0008fffefffe
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfffa100000100040, 0xffff0008fffefffe, x30, x11, 688, x1)

inst_60:
// rs1_h0_val == 32, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffbc00002000020;  op2val:0xfff7000700000040
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfffbc00002000020, 0xfff7000700000040, x30, x11, 704, x1)

inst_61:
// rs2_h1_val == 1, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xc000040040002000;  op2val:0xeffffff800010080
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xc000040040002000, 0xeffffff800010080, x30, x11, 720, x1)

inst_62:
// rs2_h0_val == -16385, rs1_h2_val == 512
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xffbf020000200001;  op2val:0xffbf0009fffdbfff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xffbf020000200001, 0xffbf0009fffdbfff, x30, x11, 736, x1)

inst_63:
// rs1_h1_val == -9, rs2_h1_val == -513, rs2_h0_val == 4, rs1_h2_val == 0
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0000fff7fffd;  op2val:0xffef0080fdff0004
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x3fff0000fff7fffd, 0xffef0080fdff0004, x30, x11, 752, x1)

inst_64:
// rs2_h0_val == -1025, rs1_h2_val == -5, rs2_h1_val == -8193
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x00fffbfffd0005;  op2val:0x09fdffdffffbff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x00fffbfffd0005, 0x09fdffdffffbff, x30, x11, 768, x1)

inst_65:
// rs2_h0_val == -257, rs1_h3_val == 64, rs2_h2_val == 512
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x40100000020002;  op2val:0xfff60200c000feff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x40100000020002, 0xfff60200c000feff, x30, x11, 784, x1)

inst_66:
// rs2_h0_val == -129, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffc000fffa;  op2val:0x013fff0004ff7f
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfffffdffc000fffa, 0x013fff0004ff7f, x30, x11, 800, x1)

inst_67:
// rs2_h0_val == -65, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x000000fff7ffef;  op2val:0xfff7ffbf0001ffbf
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x000000fff7ffef, 0xfff7ffbf0001ffbf, x30, x11, 816, x1)

inst_68:
// rs2_h0_val == -33, rs2_h2_val == -4097, rs2_h1_val == -17
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x7fff00070002fff9;  op2val:0xfff9efffffefffdf
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x7fff00070002fff9, 0xfff9efffffefffdf, x30, x11, 832, x1)

inst_69:
// rs2_h0_val == 8192, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x3fff00800400feff;  op2val:0x08ffdf00002000
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x3fff00800400feff, 0x08ffdf00002000, x30, x11, 848, x1)

inst_70:
// rs2_h0_val == 32, rs1_h2_val == -4097
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff9efff0000efff;  op2val:0x1000400f7ff0020
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfff9efff0000efff, 0x1000400f7ff0020, x30, x11, 864, x1)

inst_71:
// rs2_h0_val == 16, rs1_h2_val == 16384, rs2_h2_val == 4
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x00400000094000;  op2val:0x07000408000010
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x00400000094000, 0x07000408000010, x30, x11, 880, x1)

inst_72:
// rs2_h0_val == 8, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfefffff900031000;  op2val:0x100fefffffd0008
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfefffff900031000, 0x100fefffffd0008, x30, x11, 896, x1)

inst_73:
// rs2_h0_val == 0, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffff8dfffefff;  op2val:0x02ffff08000000
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfdfffff8dfffefff, 0x02ffff08000000, x30, x11, 912, x1)

inst_74:
// rs1_h3_val == -4097, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xefff0007fbff0400;  op2val:0xff7ff7ffffbffffb
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xefff0007fbff0400, 0xff7ff7ffffbffffb, x30, x11, 928, x1)

inst_75:
// rs1_h0_val == 16, rs1_h1_val == -513, rs1_h2_val == -129
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xff7fff7ffdff0010;  op2val:0xfeff0000c0005555
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xff7fff7ffdff0010, 0xfeff0000c0005555, x30, x11, 944, x1)

inst_76:
// rs1_h0_val == 8, rs2_h1_val == -9
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0020feff0008;  op2val:0x20000004fff78000
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x3fff0020feff0008, 0x20000004fff78000, x30, x11, 960, x1)

inst_77:
// rs1_h3_val == 1024, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x40040000020fff8;  op2val:0x09000580000010
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x40040000020fff8, 0x09000580000010, x30, x11, 976, x1)

inst_78:
// rs1_h3_val == 512, rs1_h2_val == 16
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x2000010bffffbff;  op2val:0x7fff000000070020
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x2000010bffffbff, 0x7fff000000070020, x30, x11, 992, x1)

inst_79:
// rs1_h3_val == 128, rs2_h2_val == 1
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x80aaaabffff7ff;  op2val:0xffff0001aaaafff8
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x80aaaabffff7ff, 0xffff0001aaaafff8, x30, x11, 1008, x1)

inst_80:
// rs1_h3_val == 16, rs1_h2_val == -9, rs1_h1_val == -65
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x10fff7ffbf0020;  op2val:0xffdfffdf0007aaaa
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x10fff7ffbf0020, 0xffdfffdf0007aaaa, x30, x11, 1024, x1)

inst_81:
// rs1_h3_val == 8, rs1_h2_val == -17
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x08ffeffff70001;  op2val:0x8000400001003fff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x08ffeffff70001, 0x8000400001003fff, x30, x11, 1040, x1)

inst_82:
// rs1_h3_val == 4, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x048000ff7fc000;  op2val:0x05ffefffdffffa
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x048000ff7fc000, 0x05ffefffdffffa, x30, x11, 1056, x1)

inst_83:
// rs1_h3_val == 2, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x02ffdf00800007;  op2val:0x7fffffdffdfff7ff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x02ffdf00800007, 0x7fffffdffdfff7ff, x30, x11, 1072, x1)

inst_84:
// rs2_h2_val == -9, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x007fff00040005;  op2val:0xfffefff70200ffdf
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x007fff00040005, 0xfffefff70200ffdf, x30, x11, 1088, x1)

inst_85:
// rs1_h2_val == 21845, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x4055550003fffd;  op2val:0xfff90000fff60008
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x4055550003fffd, 0xfff90000fff60008, x30, x11, 1104, x1)

inst_86:
// rs1_h2_val == -8193, rs1_h3_val == 4096
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x1000dfff0080ffbf;  op2val:0x06fffe0020fff8
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x1000dfff0080ffbf, 0x06fffe0020fff8, x30, x11, 1120, x1)

inst_87:
// rs2_h1_val == -16385, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff80008000aaaa;  op2val:0x100200bfff0040
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xf7ff80008000aaaa, 0x100200bfff0040, x30, x11, 1136, x1)

inst_88:
// rs1_h2_val == 256, rs1_h0_val == 0
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0100fbff0000;  op2val:0x10000009efff0006
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xdfff0100fbff0000, 0x10000009efff0006, x30, x11, 1152, x1)

inst_89:
// rs1_h2_val == 1, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0001fffafeff;  op2val:0xfdffefff0007dfff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfffa0001fffafeff, 0xfdffefff0007dfff, x30, x11, 1168, x1)

inst_90:
// rs1_h2_val == -2049, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x200f7ffffff3fff;  op2val:0x5555004000018000
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x200f7ffffff3fff, 0x5555004000018000, x30, x11, 1184, x1)

inst_91:
// rs1_h0_val == 4, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x4000feffffff0004;  op2val:0xfff60800ffef3fff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x4000feffffff0004, 0xfff60800ffef3fff, x30, x11, 1200, x1)

inst_92:
// rs1_h1_val == 32767, rs2_h1_val == 1024
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x02fff77fff3fff;  op2val:0xfffac0000400fffb
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x02fff77fff3fff, 0xfffac0000400fffb, x30, x11, 1216, x1)

inst_93:
// rs2_h2_val == 256, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xc000aaaa0100ff7f;  op2val:0xfffe01000010fdff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xc000aaaa0100ff7f, 0xfffe01000010fdff, x30, x11, 1232, x1)

inst_94:
// rs1_h2_val == -65, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff9ffbffbfffbff;  op2val:0x400efff0400c000
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfff9ffbffbfffbff, 0x400efff0400c000, x30, x11, 1248, x1)

inst_95:
// rs2_h1_val == 8, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffb0800fff7;  op2val:0xfeff00070008f7ff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfffcfffb0800fff7, 0xfeff00070008f7ff, x30, x11, 1264, x1)

inst_96:
// rs2_h2_val == 2, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x05000900010002;  op2val:0xfdff0002fdffefff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x05000900010002, 0xfdff0002fdffefff, x30, x11, 1280, x1)

inst_97:
// rs2_h2_val == 21845, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff72000efffbfff;  op2val:0xfeff5555dffffff6
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfff72000efffbfff, 0xfeff5555dffffff6, x30, x11, 1296, x1)

inst_98:
// rs1_h1_val == -17, 
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffff9ffeffff8;  op2val:0xaaaafff60000ffdf
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x3ffffff9ffeffff8, 0xaaaafff60000ffdf, x30, x11, 1312, x1)

inst_99:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == -2049, rs1_h1_val == 2048, rs2_h1_val == -65, rs2_h3_val == 2048, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val == -16385, rs2_h0_val == 4096, rs1_h2_val == -32768
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffc80000800bfff;  op2val:0x800f7ffffbf1000
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0xfffc80000800bfff, 0x800f7ffffbf1000, x30, x11, 1328, x1)

inst_100:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h0_val == -1, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h0_val == 2048, rs1_h3_val == 32767, rs1_h1_val == 16, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h2_val == 1024, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 256, rs1_h2_val == -2
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffe00100800;  op2val:0xffff04000100ffff
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x7ffffffe00100800, 0xffff04000100ffff, x30, x11, 1344, x1)

inst_101:
// rs1_h1_val == rs2_h1_val, rs1_h3_val == 16384, rs1_h0_val == 16384, rs2_h3_val == -9
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x4000000900064000;  op2val:0xfff700030006c000
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x4000000900064000, 0xfff700030006c000, x30, x11, 1360, x1)

inst_102:
// rs2_h3_val == 21845, rs1_h0_val == -3, rs2_h2_val == 4096, rs1_h1_val == -2049, rs2_h1_val == 128, rs1_h2_val == -3, rs1_h3_val == 2048
// opcode: kmxda ; op1:x30; op2:x29; dest:x31; op1val:0x800fffdf7fffffd;  op2val:0x5555100000800009
TEST_PKRR_OP(kmxda, x31, x30, x29, 0x0000000000000000, 0x800fffdf7fffffd, 0x5555100000800009, x30, x11, 1376, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x11_0:
    .fill 174*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
