
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smalds instruction of the RISC-V RV64PZicsr extension for the smalds covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smalds)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1 == rd != rs2, rs1==x14, rs2==x30, rd==x14, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs2_h2_val == 2048, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == -32768, rs2_h3_val == 32767, rs1_h2_val == -32768
// opcode: smalds ; op1:x14; op2:x30; dest:x14; op1val:0xfff68000fff68000;  op2val:0x7fff080080000007
TEST_P64_PNN_OP(smalds, x14, $rd_hi, x14, x30, 0x0000000000000000, $correctval_hi, 0xfff68000fff68000, 0x7fff080080000007, x9, 0, x17)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x13, rd==x2, rs1_h3_val == rs2_h3_val, rs1_h1_val == -5, rs1_h2_val == 4096, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 2, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val == 4, rs2_h1_val == 2048, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == 2, rs2_h0_val == 256
// opcode: smalds ; op1:x28; op2:x13; dest:x2; op1val:0x00021000fffb0004;  op2val:0x0002fff908000100
TEST_P64_PNN_OP(smalds, x2, $rd_hi, x28, x13, 0x0000000000000000, $correctval_hi, 0x00021000fffb0004, 0x0002fff908000100, x9, 16, x17)

inst_2:
// rs1 == rs2 != rd, rs1==x21, rs2==x21, rd==x24, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -1025, rs2_h1_val == -21846, rs2_h0_val == 32767, rs1_h1_val == -2049, rs2_h2_val == 64, rs1_h2_val == -3
// opcode: smalds ; op1:x21; op2:x21; dest:x24; op1val:0xfff8fffdf7fffff9;  op2val:0xfbff0040aaaa7fff
TEST_P64_PNN_OP(smalds, x24, $rd_hi, x21, x21, 0x0000000000000000, $correctval_hi, 0xfff8fffdf7fffff9, 0xfbff0040aaaa7fff, x9, 32, x17)

inst_3:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == -8193, rs1_h3_val == 21845, rs1_h1_val == 32, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -2, rs1_h2_val == -9, rs2_h3_val == -4097, rs2_h2_val == 32767
// opcode: smalds ; op1:x18; op2:x18; dest:x18; op1val:0x5555fff700208000;  op2val:0xefff7fffdffffffe
TEST_P64_PNN_OP(smalds, x18, $rd_hi, x18, x18, 0x0000000000000000, $correctval_hi, 0x5555fff700208000, 0xefff7fffdffffffe, x9, 48, x17)

inst_4:
// rs2 == rd != rs1, rs1==x13, rs2==x22, rd==x22, rs1_h2_val == rs2_h2_val, rs2_h2_val == -1, rs1_h3_val == 1024, rs1_h1_val == 4096, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h0_val == 256, rs1_h2_val == -1, rs2_h0_val == -9, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: smalds ; op1:x13; op2:x22; dest:x22; op1val:0x0400ffff10000100;  op2val:0x0006fffffff8fff7
TEST_P64_PNN_OP(smalds, x22, $rd_hi, x13, x22, 0x0000000000000000, $correctval_hi, 0x0400ffff10000100, 0x0006fffffff8fff7, x9, 64, x17)

inst_5:
// rs1==x12, rs2==x26, rd==x8, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 8192, rs1_h3_val == 32, rs2_h3_val == -32768, rs1_h1_val == 0, rs2_h0_val == -5, rs1_h0_val == 1, rs2_h1_val == 64
// opcode: smalds ; op1:x12; op2:x26; dest:x8; op1val:0x0020200000000001;  op2val:0x800000060040fffb
TEST_P64_PNN_OP(smalds, x8, $rd_hi, x12, x26, 0x0000000000000000, $correctval_hi, 0x0020200000000001, 0x800000060040fffb, x9, 80, x17)

inst_6:
// rs1==x23, rs2==x3, rd==x26, rs1_h1_val == rs2_h1_val, rs2_h3_val == -129, rs1_h2_val == 1024, rs2_h0_val == -32768
// opcode: smalds ; op1:x23; op2:x3; dest:x26; op1val:0xfff90400c0000005;  op2val:0xff7f0007c0008000
TEST_P64_PNN_OP(smalds, x26, $rd_hi, x23, x3, 0x0000000000000000, $correctval_hi, 0xfff90400c0000005, 0xff7f0007c0008000, x9, 96, x17)

inst_7:
// rs1==x31, rs2==x14, rd==x28, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 1, rs1_h2_val == 256, rs2_h1_val == 16, rs2_h3_val == -2049
// opcode: smalds ; op1:x31; op2:x14; dest:x28; op1val:0x0007010000010003;  op2val:0xf7fffff600103fff
TEST_P64_PNN_OP(smalds, x28, $rd_hi, x31, x14, 0x0000000000000000, $correctval_hi, 0x0007010000010003, 0xf7fffff600103fff, x9, 112, x17)

inst_8:
// rs1==x26, rs2==x5, rd==x6, rs1_h0_val == rs2_h0_val, rs2_h0_val == -21846, rs2_h3_val == -2, rs2_h2_val == -3, rs1_h2_val == 0, rs1_h1_val == 21845, rs1_h0_val == -21846, rs2_h1_val == 32
// opcode: smalds ; op1:x26; op2:x5; dest:x6; op1val:0x000600005555aaaa;  op2val:0xfffefffd0020aaaa
TEST_P64_PNN_OP(smalds, x6, $rd_hi, x26, x5, 0x0000000000000000, $correctval_hi, 0x000600005555aaaa, 0xfffefffd0020aaaa, x9, 128, x17)

inst_9:
// rs1==x15, rs2==x11, rd==x4, rs2_h3_val == -21846, rs1_h3_val == 256, rs1_h2_val == -8193, rs2_h1_val == 256, rs2_h2_val == 1, rs1_h0_val == -129
// opcode: smalds ; op1:x15; op2:x11; dest:x4; op1val:0x0100dffffff8ff7f;  op2val:0xaaaa000101008000
TEST_P64_PNN_OP(smalds, x4, $rd_hi, x15, x11, 0x0000000000000000, $correctval_hi, 0x0100dffffff8ff7f, 0xaaaa000101008000, x9, 144, x17)

inst_10:
// rs1==x8, rs2==x28, rd==x20, rs2_h3_val == 21845, rs2_h1_val == 512, rs2_h0_val == -1, rs1_h2_val == 16, rs2_h2_val == 32, rs1_h3_val == 16384
// opcode: smalds ; op1:x8; op2:x28; dest:x20; op1val:0x40000010fffb8000;  op2val:0x555500200200ffff
TEST_P64_PNN_OP(smalds, x20, $rd_hi, x8, x28, 0x0000000000000000, $correctval_hi, 0x40000010fffb8000, 0x555500200200ffff, x9, 160, x17)

inst_11:
// rs1==x1, rs2==x19, rd==x12, rs2_h3_val == -16385, rs1_h1_val == 256
// opcode: smalds ; op1:x1; op2:x19; dest:x12; op1val:0x0100ffff0100ff7f;  op2val:0xbfff0006fffafffa
TEST_P64_PNN_OP(smalds, x12, $rd_hi, x1, x19, 0x0000000000000000, $correctval_hi, 0x0100ffff0100ff7f, 0xbfff0006fffafffa, x9, 176, x17)

inst_12:
// rs1==x30, rs2==x1, rd==x10, rs2_h3_val == -8193, rs1_h2_val == -16385, rs2_h2_val == -9, rs1_h0_val == 512
// opcode: smalds ; op1:x30; op2:x1; dest:x10; op1val:0x0100bfff00030200;  op2val:0xdffffff7fff60100
TEST_P64_PNN_OP(smalds, x10, $rd_hi, x30, x1, 0x0000000000000000, $correctval_hi, 0x0100bfff00030200, 0xdffffff7fff60100, x9, 192, x17)

inst_13:
// rs1==x24, rs2==x31, rd==x16, rs2_h3_val == -513, rs1_h0_val == -17, rs2_h2_val == 8, rs1_h2_val == 2048
// opcode: smalds ; op1:x24; op2:x31; dest:x16; op1val:0x555508000001ffef;  op2val:0xfdff00080010fff8
TEST_P64_PNN_OP(smalds, x16, $rd_hi, x24, x31, 0x0000000000000000, $correctval_hi, 0x555508000001ffef, 0xfdff00080010fff8, x9, 208, x17)

inst_14:
// rs1==x7, rs2==x25, rd==x30, rs2_h3_val == -257, rs2_h1_val == 1024, rs2_h0_val == 16384
// opcode: smalds ; op1:x7; op2:x25; dest:x30; op1val:0x00070006fff9fff8;  op2val:0xfefffffd04004000
TEST_P64_PNN_OP(smalds, x30, $rd_hi, x7, x25, 0x0000000000000000, $correctval_hi, 0x00070006fff9fff8, 0xfefffffd04004000, x9, 224, x17)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_15:
// rs1==x5, rs2==x8, rs2_h3_val == -65, rs2_h0_val == -33, rs2_h1_val == 21845, rs1_h2_val == 32
// opcode: smalds ; op1:x5; op2:x8; dest:x29; op1val:0x0002002000030100;  op2val:0xffbf00405555ffdf
TEST_P64_PNN_OP(smalds, x29, $rd_hi, x5, x8, 0x0000000000000000, $correctval_hi, 0x0002002000030100, 0xffbf00405555ffdf, x1, 0, x13)

inst_16:
// rs1==x6, rs2==x9, rs2_h3_val == -33, rs1_h0_val == 8192, rs1_h3_val == 1, rs1_h1_val == 128
// opcode: smalds ; op1:x6; op2:x9; dest:x21; op1val:0x0001dfff00802000;  op2val:0xffdf0003c000fffa
TEST_P64_PNN_OP(smalds, x21, $rd_hi, x6, x9, 0x0000000000000000, $correctval_hi, 0x0001dfff00802000, 0xffdf0003c000fffa, x1, 16, x13)

inst_17:
// rs1==x27, rs2==x6, rs2_h3_val == -17, rs2_h0_val == 2, rs1_h0_val == -3, rs1_h2_val == 1, rs2_h1_val == -5, rs1_h1_val == -21846, rs1_h3_val == -5
// opcode: smalds ; op1:x27; op2:x6; dest:x18; op1val:0xfffb0001aaaafffd;  op2val:0xffeffff6fffb0002
TEST_P64_PNN_OP(smalds, x18, $rd_hi, x27, x6, 0x0000000000000000, $correctval_hi, 0xfffb0001aaaafffd, 0xffeffff6fffb0002, x1, 32, x13)

inst_18:
// rs1==x17, rs2==x24, rs2_h3_val == -9, rs2_h1_val == -1025, rs1_h3_val == -2, rs1_h1_val == 32767, rs2_h0_val == -3
// opcode: smalds ; op1:x17; op2:x24; dest:x22; op1val:0xfffe00107fffff7f;  op2val:0xfff70005fbfffffd
TEST_P64_PNN_OP(smalds, x22, $rd_hi, x17, x24, 0x0000000000000000, $correctval_hi, 0xfffe00107fffff7f, 0xfff70005fbfffffd, x1, 48, x13)

inst_19:
// rs1==x10, rs2==x7, rs2_h3_val == -5, rs2_h2_val == -129, rs2_h0_val == -4097, rs1_h3_val == -1, rs1_h2_val == 32767, rs1_h1_val == -65
// opcode: smalds ; op1:x10; op2:x7; dest:x17; op1val:0xffff7fffffbffffc;  op2val:0xfffbff7ffbffefff
TEST_P64_PNN_OP(smalds, x17, $rd_hi, x10, x7, 0x0000000000000000, $correctval_hi, 0xffff7fffffbffffc, 0xfffbff7ffbffefff, x1, 64, x13)

inst_20:
// rs1==x22, rs2==x17, rs2_h3_val == -3, rs2_h2_val == -4097, rs1_h2_val == 64, rs2_h1_val == -129, rs2_h0_val == -129, rs1_h3_val == -17
// opcode: smalds ; op1:x22; op2:x17; dest:x18; op1val:0xffef0040fff8c000;  op2val:0xfffdefffff7fff7f
TEST_P64_PNN_OP(smalds, x18, $rd_hi, x22, x17, 0x0000000000000000, $correctval_hi, 0xffef0040fff8c000, 0xfffdefffff7fff7f, x1, 80, x13)

inst_21:
// rs1==x25, rs2==x16, rs2_h3_val == 16384, rs1_h2_val == 16384, rs1_h1_val == -3, rs1_h0_val == -5, rs1_h3_val == -8193, rs2_h1_val == -3
// opcode: smalds ; op1:x25; op2:x16; dest:x15; op1val:0xdfff4000fffdfffb;  op2val:0x40000001fffd4000
TEST_P64_PNN_OP(smalds, x15, $rd_hi, x25, x16, 0x0000000000000000, $correctval_hi, 0xdfff4000fffdfffb, 0x40000001fffd4000, x1, 96, x13)

inst_22:
// rs1==x4, rs2==x0, rs2_h3_val == 8192, rs2_h1_val == -9
// opcode: smalds ; op1:x4; op2:x0; dest:x2; op1val:0xfff8fff600092000;  op2val:0x2000fff6fff7fff8
TEST_P64_PNN_OP(smalds, x2, $rd_hi, x4, x0, 0x0000000000000000, $correctval_hi, 0xfff8fff600092000, 0x2000fff6fff7fff8, x1, 112, x13)

inst_23:
// rs1==x2, rs2==x4, rs2_h3_val == 4096, rs1_h2_val == -65, rs1_h3_val == 128, rs2_h2_val == -21846
// opcode: smalds ; op1:x2; op2:x4; dest:x21; op1val:0x0080ffbf0007fffd;  op2val:0x1000aaaac000fff9
TEST_P64_PNN_OP(smalds, x21, $rd_hi, x2, x4, 0x0000000000000000, $correctval_hi, 0x0080ffbf0007fffd, 0x1000aaaac000fff9, x1, 128, x13)

inst_24:
// rs1==x29, rs2==x10, rs2_h3_val == 2048, rs2_h2_val == 16384, rs1_h3_val == 64, rs2_h1_val == 8
// opcode: smalds ; op1:x29; op2:x10; dest:x11; op1val:0x00400010f7fffffc;  op2val:0x0800400000080003
TEST_P64_PNN_OP(smalds, x11, $rd_hi, x29, x10, 0x0000000000000000, $correctval_hi, 0x00400010f7fffffc, 0x0800400000080003, x1, 144, x13)

inst_25:
// rs1==x0, rs2==x15, rs2_h3_val == 1024, rs2_h0_val == 16, rs2_h2_val == -2049, rs1_h1_val == -8193, rs1_h0_val == 0
// opcode: smalds ; op1:x0; op2:x15; dest:x19; op1val:0xc000fff8dfff0000;  op2val:0x0400f7fffffa0010
TEST_P64_PNN_OP(smalds, x19, $rd_hi, x0, x15, 0x0000000000000000, $correctval_hi, 0xc000fff8dfff0000, 0x0400f7fffffa0010, x1, 160, x13)

inst_26:
// rs1==x3, rs2==x20, rs2_h3_val == 512, rs1_h2_val == 512, rs1_h1_val == 2, rs1_h0_val == 8, rs2_h1_val == 16384, rs2_h2_val == 256, rs1_h3_val == -3
// opcode: smalds ; op1:x3; op2:x20; dest:x23; op1val:0xfffd020000020008;  op2val:0x020001004000fff7
TEST_P64_PNN_OP(smalds, x23, $rd_hi, x3, x20, 0x0000000000000000, $correctval_hi, 0xfffd020000020008, 0x020001004000fff7, x1, 176, x13)

inst_27:
// rs1==x20, rs2==x2, rs2_h3_val == 256, rs1_h3_val == 16, rs2_h0_val == -16385, rs2_h1_val == -257, rs2_h2_val == -5, rs1_h2_val == -1025
// opcode: smalds ; op1:x20; op2:x2; dest:x5; op1val:0x0010fbfffff8fffb;  op2val:0x0100fffbfeffbfff
TEST_P64_PNN_OP(smalds, x5, $rd_hi, x20, x2, 0x0000000000000000, $correctval_hi, 0x0010fbfffff8fffb, 0x0100fffbfeffbfff, x1, 192, x13)

inst_28:
// rs1==x19, rs2==x29, rs2_h3_val == 128, rs1_h1_val == -257, rs1_h3_val == 32767, rs1_h2_val == -21846, rs2_h1_val == 4096
// opcode: smalds ; op1:x19; op2:x29; dest:x11; op1val:0x7fffaaaafeffaaaa;  op2val:0x0080f7ff10000003
TEST_P64_PNN_OP(smalds, x11, $rd_hi, x19, x29, 0x0000000000000000, $correctval_hi, 0x7fffaaaafeffaaaa, 0x0080f7ff10000003, x1, 208, x13)

inst_29:
// rs1==x16, rs2==x23, rs2_h3_val == 64, rs2_h1_val == -2, rs2_h2_val == 2, rs2_h0_val == 21845
// opcode: smalds ; op1:x16; op2:x23; dest:x22; op1val:0x0400000701000001;  op2val:0x00400002fffe5555
TEST_P64_PNN_OP(smalds, x22, $rd_hi, x16, x23, 0x0000000000000000, $correctval_hi, 0x0400000701000001, 0x00400002fffe5555, x1, 224, x13)

inst_30:
// rs1==x11, rs2==x27, rs2_h3_val == 32, rs2_h2_val == -17, rs1_h1_val == -1, rs1_h0_val == 2
// opcode: smalds ; op1:x11; op2:x27; dest:x14; op1val:0xdfff0001ffff0002;  op2val:0x0020ffeffffeaaaa
TEST_P64_PNN_OP(smalds, x14, $rd_hi, x11, x27, 0x0000000000000000, $correctval_hi, 0xdfff0001ffff0002, 0x0020ffeffffeaaaa, x1, 240, x13)

inst_31:
// rs1==x9, rs2==x12, rs2_h3_val == 16, rs2_h1_val == 4, rs2_h2_val == 21845, rs1_h3_val == 4
// opcode: smalds ; op1:x9; op2:x12; dest:x21; op1val:0x0004040055550004;  op2val:0x001055550004fff8
TEST_P64_PNN_OP(smalds, x21, $rd_hi, x9, x12, 0x0000000000000000, $correctval_hi, 0x0004040055550004, 0x001055550004fff8, x1, 256, x13)

inst_32:
// rs2_h3_val == 8, rs1_h1_val == 1024, rs2_h2_val == -1025, rs1_h3_val == 8192, rs2_h0_val == 1
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x200000400400fffc;  op2val:0x0008fbff00400001
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x200000400400fffc, 0x0008fbff00400001, x1, 272, x13)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33:
// rs1_h1_val == -2, rs1_h0_val == 1024
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0005fffe0400;  op2val:0x020055553fffc000
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffb0005fffe0400, 0x020055553fffc000, x1, 0, x2)

inst_34:
// rs1_h1_val == -32768, rs1_h3_val == 4096, rs2_h0_val == 0
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x1000c00080003fff;  op2val:0x00020020fff80000
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x1000c00080003fff, 0x00020020fff80000, x1, 16, x2)

inst_35:
// rs1_h1_val == 16384, rs2_h0_val == -1025, rs2_h2_val == 8192, rs1_h2_val == -2049, rs1_h0_val == -16385, rs2_h3_val == -1
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x2000f7ff4000bfff;  op2val:0xffff2000dffffbff
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000f7ff4000bfff, 0xffff2000dffffbff, x1, 32, x2)

inst_36:
// rs1_h1_val == 8192, rs1_h0_val == 32, rs2_h0_val == 8192
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x0009020020000020;  op2val:0x0080010000202000
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0009020020000020, 0x0080010000202000, x1, 48, x2)

inst_37:
// rs1_h1_val == 2048, rs1_h0_val == -8193, rs2_h1_val == -16385
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x200020000800dfff;  op2val:0x04003fffbffffff9
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x200020000800dfff, 0x04003fffbffffff9, x1, 64, x2)

inst_38:
// rs1_h1_val == 512, rs2_h3_val == 4, rs2_h1_val == 32767
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x0020aaaa0200fff9;  op2val:0x000400057fffffff
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020aaaa0200fff9, 0x000400057fffffff, x1, 80, x2)

inst_39:
// rs1_h1_val == 64, rs2_h0_val == 4096, rs2_h1_val == 0
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x0009ffff0040fff9;  op2val:0xbfff400000001000
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0009ffff0040fff9, 0xbfff400000001000, x1, 96, x2)

inst_40:
// rs1_h1_val == 16, rs1_h0_val == 32767
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffff00107fff;  op2val:0x2000fff7fff60010
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x1000ffff00107fff, 0x2000fff7fff60010, x1, 112, x2)

inst_41:
// rs1_h1_val == 8, rs2_h1_val == -1, rs1_h0_val == -513
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fff90008fdff;  op2val:0xfffdefffffff2000
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff9fff90008fdff, 0xfffdefffffff2000, x1, 128, x2)

inst_42:
// rs1_h1_val == 4, rs1_h2_val == -257
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfeff0004aaaa;  op2val:0x7ffffff70009c000
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffcfeff0004aaaa, 0x7ffffff70009c000, x1, 144, x2)

inst_43:
// rs1_h0_val == 21845, rs1_h3_val == -129, rs2_h2_val == 128
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffeff00055555;  op2val:0x00400080fffc0006
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7ffeff00055555, 0x00400080fffc0006, x1, 160, x2)

inst_44:
// rs1_h0_val == -4097, rs1_h3_val == -32768, rs2_h0_val == 4, rs1_h2_val == -2, rs2_h2_val == -2
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffe0200efff;  op2val:0xfffdfffe80000004
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000fffe0200efff, 0xfffdfffe80000004, x1, 176, x2)

inst_45:
// rs1_h0_val == -2049, rs2_h2_val == -513
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x0006dfff1000f7ff;  op2val:0x8000fdff80007fff
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0006dfff1000f7ff, 0x8000fdff80007fff, x1, 192, x2)

inst_46:
// rs1_h0_val == -1025, rs1_h3_val == 512, rs2_h0_val == 8, rs2_h1_val == -4097
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x02003ffffffdfbff;  op2val:0xffff0100efff0008
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x02003ffffffdfbff, 0xffff0100efff0008, x1, 208, x2)

inst_47:
// rs1_h0_val == -257, rs1_h2_val == 4
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xfffb00040200feff;  op2val:0x1000004010004000
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffb00040200feff, 0x1000004010004000, x1, 224, x2)

inst_48:
// rs1_h0_val == -65, rs1_h2_val == 8, rs1_h3_val == -16385
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0008fff6ffbf;  op2val:0x0006fffafefffff7
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbfff0008fff6ffbf, 0x0006fffafefffff7, x1, 240, x2)

inst_49:
// rs1_h0_val == -33, rs2_h2_val == 0
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x000400060002ffdf;  op2val:0x0080000055557fff
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000400060002ffdf, 0x0080000055557fff, x1, 256, x2)

inst_50:
// rs1_h0_val == -9, rs1_h2_val == 2
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x40000002c000fff7;  op2val:0x0006ffef00071000
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x40000002c000fff7, 0x0006ffef00071000, x1, 272, x2)

inst_51:
// rs1_h0_val == -2, rs2_h2_val == -16385, rs1_h2_val == -17
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffef2000fffe;  op2val:0x0100bfff0020fffc
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3fffffef2000fffe, 0x0100bfff0020fffc, x1, 288, x2)

inst_52:
// rs1_h0_val == 16384, rs2_h0_val == -257
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xffef000000054000;  op2val:0xfff70020fffffeff
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffef000000054000, 0xfff70020fffffeff, x1, 304, x2)

inst_53:
// rs1_h0_val == 4096, rs1_h2_val == -5, rs1_h3_val == 8
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x0008fffb7fff1000;  op2val:0x0003000980002000
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0008fffb7fff1000, 0x0003000980002000, x1, 320, x2)

inst_54:
// rs1_h0_val == 2048, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x0004fffcfffd0800;  op2val:0xdffffff600400007
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0004fffcfffd0800, 0xdffffff600400007, x1, 336, x2)

inst_55:
// rs2_h1_val == 2, rs2_h2_val == -65, rs1_h3_val == -513
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xfdff01000001feff;  op2val:0x0005ffbf0002fffe
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdff01000001feff, 0x0005ffbf0002fffe, x1, 352, x2)

inst_56:
// rs2_h1_val == 1, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffff600030000;  op2val:0x3fff55550001feff
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3ffffff600030000, 0x3fff55550001feff, x1, 368, x2)

inst_57:
// rs2_h0_val == -8193, rs2_h1_val == -2049, rs1_h3_val == -9
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffd00000400;  op2val:0x20004000f7ffdfff
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7fffd00000400, 0x20004000f7ffdfff, x1, 384, x2)

inst_58:
// rs2_h0_val == -2049, rs1_h3_val == -65
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00061000fffd;  op2val:0xc000fffc8000f7ff
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbf00061000fffd, 0xc000fffc8000f7ff, x1, 400, x2)

inst_59:
// rs2_h0_val == -513, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xff7f00040005fffd;  op2val:0xfffeff7f0100fdff
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7f00040005fffd, 0xfffeff7f0100fdff, x1, 416, x2)

inst_60:
// rs2_h0_val == -65, rs1_h0_val == 16, rs2_h2_val == 1024
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xc000000500100010;  op2val:0x20000400fff6ffbf
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xc000000500100010, 0x20000400fff6ffbf, x1, 432, x2)

inst_61:
// rs2_h0_val == -17, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x0020fffb08000002;  op2val:0x8000aaaa8000ffef
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020fffb08000002, 0x8000aaaa8000ffef, x1, 448, x2)

inst_62:
// rs2_h0_val == 2048, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xfff93ffffffe1000;  op2val:0x0003fff8fff70800
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff93ffffffe1000, 0x0003fff8fff70800, x1, 464, x2)

inst_63:
// rs2_h0_val == 1024, rs1_h2_val == -33
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xffefffdf3fff0009;  op2val:0x0010200002000400
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffefffdf3fff0009, 0x0010200002000400, x1, 480, x2)

inst_64:
// rs2_h0_val == 512, rs2_h3_val == 0, rs1_h1_val == -9
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xc0004000fff7fff8;  op2val:0x0000ff7ffffb0200
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xc0004000fff7fff8, 0x0000ff7ffffb0200, x1, 496, x2)

inst_65:
// rs2_h0_val == 128, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xffef3fff00070002;  op2val:0x0040fffcfffc0080
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffef3fff00070002, 0x0040fffcfffc0080, x1, 512, x2)

inst_66:
// rs2_h0_val == 64, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x0001fff6fffbc000;  op2val:0xffdffffd00070040
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001fff6fffbc000, 0xffdffffd00070040, x1, 528, x2)

inst_67:
// rs2_h0_val == 32, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x0040ffdffff9fffd;  op2val:0x5555000600200020
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040ffdffff9fffd, 0x5555000600200020, x1, 544, x2)

inst_68:
// rs1_h3_val == -21846, rs2_h3_val == 1
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa3ffffff6fffe;  op2val:0x0001200040000002
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaa3ffffff6fffe, 0x0001200040000002, x1, 560, x2)

inst_69:
// rs1_h0_val == 128, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xfff60001ffbf0080;  op2val:0xfffc00200800fffa
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff60001ffbf0080, 0xfffc00200800fffa, x1, 576, x2)

inst_70:
// rs1_h3_val == -4097, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xefff0002dffff7ff;  op2val:0x1000fff900408000
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefff0002dffff7ff, 0x1000fff900408000, x1, 592, x2)

inst_71:
// rs1_h0_val == 64, rs2_h1_val == 8192, rs1_h3_val == 2048
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x0800aaaafffd0040;  op2val:0x000600032000efff
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800aaaafffd0040, 0x000600032000efff, x1, 608, x2)

inst_72:
// rs1_h3_val == -2049, rs1_h2_val == -4097, rs2_h1_val == 128
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffefff0080efff;  op2val:0x0040fffa00807fff
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ffefff0080efff, 0x0040fffa00807fff, x1, 624, x2)

inst_73:
// rs2_h2_val == -8193, rs1_h2_val == 128
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xfff6008000200800;  op2val:0x2000dfffc0000040
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff6008000200800, 0x2000dfffc0000040, x1, 640, x2)

inst_74:
// rs2_h2_val == -257, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x200001000400ff7f;  op2val:0xfff8feff20007fff
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x200001000400ff7f, 0xfff8feff20007fff, x1, 656, x2)

inst_75:
// rs2_h2_val == -33, rs1_h3_val == -33
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xffdf3fff80000007;  op2val:0x0000ffdfffffbfff
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdf3fff80000007, 0x0000ffdfffffbfff, x1, 672, x2)

inst_76:
// rs1_h3_val == 0, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x00003ffffffc0000;  op2val:0x0040fffe0020aaaa
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00003ffffffc0000, 0x0040fffe0020aaaa, x1, 688, x2)

inst_77:
// rs1_h2_val == 21845, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fff6fffb;  op2val:0xaaaa000640000800
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x55555555fff6fffb, 0xaaaa000640000800, x1, 704, x2)

inst_78:
// rs2_h2_val == -32768, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x00020007fffc2000;  op2val:0xff7f800040000200
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00020007fffc2000, 0xff7f800040000200, x1, 720, x2)

inst_79:
// rs2_h2_val == 4096, rs1_h1_val == -4097, rs1_h0_val == -1
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xc000ffefefffffff;  op2val:0x08001000ffff0008
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xc000ffefefffffff, 0x08001000ffff0008, x1, 736, x2)

inst_80:
// rs2_h2_val == 512, rs1_h3_val == -1025
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0009fffc0009;  op2val:0x00200200ff7fff7f
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbff0009fffc0009, 0x00200200ff7fff7f, x1, 752, x2)

inst_81:
// rs1_h2_val == -513, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x0200fdff80000200;  op2val:0xffbf3fff00010002
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200fdff80000200, 0xffbf3fff00010002, x1, 768, x2)

inst_82:
// rs2_h1_val == -513, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x0100200000200008;  op2val:0xfff97ffffdff0002
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0100200000200008, 0xfff97ffffdff0002, x1, 784, x2)

inst_83:
// rs2_h1_val == -65, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x04007fff00200200;  op2val:0xfefffdffffbf4000
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x04007fff00200200, 0xfefffdffffbf4000, x1, 800, x2)

inst_84:
// rs2_h1_val == -33, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fff9fffb3fff;  op2val:0x0008f7ffffdfc000
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff9fff9fffb3fff, 0x0008f7ffffdfc000, x1, 816, x2)

inst_85:
// rs2_h1_val == -17, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x02000040dfffbfff;  op2val:0x0002fff6ffeffff6
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x02000040dfffbfff, 0x0002fff6ffeffff6, x1, 832, x2)

inst_86:
// rs1_h3_val == -257, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xfeff2000aaaabfff;  op2val:0x8000ff7fdfff0006
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeff2000aaaabfff, 0x8000ff7fdfff0006, x1, 848, x2)

inst_87:
// rs1_h1_val == -16385, rs1_h2_val == -129
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xfeffff7fbfff0001;  op2val:0xff7ff7ffc0000400
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeffff7fbfff0001, 0xff7ff7ffc0000400, x1, 864, x2)

inst_88:
// rs1_h1_val == -1025, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x00070002fbff3fff;  op2val:0xfeff000600000020
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00070002fbff3fff, 0xfeff000600000020, x1, 880, x2)

inst_89:
// rs1_h1_val == -513, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xfff62000fdfffffc;  op2val:0xfff90006fff8ff7f
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff62000fdfffffc, 0xfff90006fff8ff7f, x1, 896, x2)

inst_90:
// rs2_h2_val == 16, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x08000005aaaafff6;  op2val:0x00080010fdff0020
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x08000005aaaafff6, 0x00080010fdff0020, x1, 912, x2)

inst_91:
// rs1_h1_val == -129, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x0800feffff7ffdff;  op2val:0x0004fbffaaaa0000
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800feffff7ffdff, 0x0004fbffaaaa0000, x1, 928, x2)

inst_92:
// rs2_h2_val == 4, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x0040ff7f0000fbff;  op2val:0x00100004fff90020
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040ff7f0000fbff, 0x00100004fff90020, x1, 944, x2)

inst_93:
// rs1_h1_val == -33, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0020ffdfefff;  op2val:0xff7ff7ff04002000
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdf0020ffdfefff, 0xff7ff7ff04002000, x1, 960, x2)

inst_94:
// rs1_h1_val == -17, 
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x0020fbffffefffdf;  op2val:0xfbff55557fff0005
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020fbffffefffdf, 0xfbff55557fff0005, x1, 976, x2)

inst_95:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == -8193, rs1_h3_val == 21845, rs1_h1_val == 32, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h0_val == -2, rs1_h2_val == -9, rs2_h3_val == -4097, rs2_h2_val == 32767
// opcode: smalds ; op1:x30; op2:x29; dest:x31; op1val:0x5555fff700208000;  op2val:0xefff7fffdffffffe
TEST_P64_PNN_OP(smalds, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x5555fff700208000, 0xefff7fffdffffffe, x1, 992, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 126*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
