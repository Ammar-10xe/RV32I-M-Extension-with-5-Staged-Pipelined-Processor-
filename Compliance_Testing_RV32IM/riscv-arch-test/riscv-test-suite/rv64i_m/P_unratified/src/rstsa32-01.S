
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rstsa32 instruction of the RISC-V RV64PZicsr extension for the rstsa32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",rstsa32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x2, rs2==x25, rd==x2, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w1_val == 128, rs2_w1_val == 134217728, rs2_w0_val == 1048576
// opcode: rstsa32 ; op1:x2; op2:x25; dest:x2; op1val:0x00008080000000;  op2val:0x800000000100000
TEST_RR_OP(rstsa32, x2, x2, x25, 0x0000000000000000, 0x00008080000000, 0x800000000100000, x7, 0, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x3, rs2==x19, rd==x14, rs1_w1_val == rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w0_val == 16384, rs1_w0_val == rs2_w0_val, rs1_w0_val == 16384, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w1_val == -536870913, rs1_w1_val == -536870913
// opcode: rstsa32 ; op1:x3; op2:x19; dest:x14; op1val:0xdfffffff00004000;  op2val:0xdfffffff00004000
TEST_RR_OP(rstsa32, x14, x3, x19, 0x0000000000000000, 0xdfffffff00004000, 0xdfffffff00004000, x7, 8, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x6, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val == -1, rs2_w0_val == 8388608, rs2_w1_val == 2
// opcode: rstsa32 ; op1:x31; op2:x31; dest:x6; op1val:0xdfffffffffffffff;  op2val:0x00000200800000
TEST_RR_OP(rstsa32, x6, x31, x31, 0x0000000000000000, 0xdfffffffffffffff, 0x00000200800000, x7, 16, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x9, rs2==x9, rd==x9, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val == 2, rs1_w1_val == 4, rs2_w0_val == 134217728, rs2_w1_val == -32769
// opcode: rstsa32 ; op1:x9; op2:x9; dest:x9; op1val:0x00000400000002;  op2val:0xffff7fff08000000
TEST_RR_OP(rstsa32, x9, x9, x9, 0x0000000000000000, 0x00000400000002, 0xffff7fff08000000, x7, 24, x8)

inst_4:
// rs2 == rd != rs1, rs1==x0, rs2==x18, rd==x18, rs1_w0_val < 0 and rs2_w0_val < 0, rs1_w0_val == -131073, rs2_w1_val == 131072
// opcode: rstsa32 ; op1:x0; op2:x18; dest:x18; op1val:0xc0000000fffdffff;  op2val:0x020000fffffff6
TEST_RR_OP(rstsa32, x18, x0, x18, 0x0000000000000000, 0xc0000000fffdffff, 0x020000fffffff6, x7, 32, x8)

inst_5:
// rs1==x22, rs2==x3, rd==x13, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w1_val == 64, rs1_w0_val == 65536, rs1_w1_val == -262145, rs2_w0_val == -65
// opcode: rstsa32 ; op1:x22; op2:x3; dest:x13; op1val:0xfffbffff00010000;  op2val:0x000040ffffffbf
TEST_RR_OP(rstsa32, x13, x22, x3, 0x0000000000000000, 0xfffbffff00010000, 0x000040ffffffbf, x7, 40, x8)

inst_6:
// rs1==x1, rs2==x16, rd==x15, rs2_w1_val == -1431655766, rs1_w1_val == -8193, rs2_w0_val == -32769, rs1_w0_val == 8192
// opcode: rstsa32 ; op1:x1; op2:x16; dest:x15; op1val:0xffffdfff00002000;  op2val:0xaaaaaaaaffff7fff
TEST_RR_OP(rstsa32, x15, x1, x16, 0x0000000000000000, 0xffffdfff00002000, 0xaaaaaaaaffff7fff, x7, 48, x8)

inst_7:
// rs1==x5, rs2==x27, rd==x30, rs2_w1_val == 1431655765, rs1_w1_val == -33, rs2_w0_val == 2147483647, rs1_w0_val == -1073741825
// opcode: rstsa32 ; op1:x5; op2:x27; dest:x30; op1val:0xffffffdfbfffffff;  op2val:0x555555557fffffff
TEST_RR_OP(rstsa32, x30, x5, x27, 0x0000000000000000, 0xffffffdfbfffffff, 0x555555557fffffff, x7, 56, x8)

inst_8:
// rs1==x28, rs2==x17, rd==x23, rs2_w1_val == 2147483647, rs2_w0_val == -3, rs1_w0_val == 536870912
// opcode: rstsa32 ; op1:x28; op2:x17; dest:x23; op1val:0xfffffff620000000;  op2val:0x7ffffffffffffffd
TEST_RR_OP(rstsa32, x23, x28, x17, 0x0000000000000000, 0xfffffff620000000, 0x7ffffffffffffffd, x7, 64, x8)

inst_9:
// rs1==x4, rs2==x13, rd==x12, rs2_w1_val == -1073741825, rs1_w0_val == -67108865, rs1_w1_val == 32768
// opcode: rstsa32 ; op1:x4; op2:x13; dest:x12; op1val:0x008000fbffffff;  op2val:0xbffffffffffffffa
TEST_RR_OP(rstsa32, x12, x4, x13, 0x0000000000000000, 0x008000fbffffff, 0xbffffffffffffffa, x7, 72, x8)

inst_10:
// rs1==x12, rs2==x5, rd==x4, rs2_w1_val == -268435457, rs2_w0_val == -1073741825, rs1_w1_val == 131072
// opcode: rstsa32 ; op1:x12; op2:x5; dest:x4; op1val:0x02000020000000;  op2val:0xefffffffbfffffff
TEST_RR_OP(rstsa32, x4, x12, x5, 0x0000000000000000, 0x02000020000000, 0xefffffffbfffffff, x7, 80, x8)

inst_11:
// rs1==x20, rs2==x10, rd==x5, rs2_w1_val == -134217729, rs1_w1_val == -1, rs2_w0_val == 1, rs1_w0_val == 32768
// opcode: rstsa32 ; op1:x20; op2:x10; dest:x5; op1val:0xffffffff00008000;  op2val:0xf7ffffff00000001
TEST_RR_OP(rstsa32, x5, x20, x10, 0x0000000000000000, 0xffffffff00008000, 0xf7ffffff00000001, x7, 88, x8)

inst_12:
// rs1==x13, rs2==x22, rd==x19, rs2_w1_val == -67108865, rs1_w0_val == 2048, rs2_w0_val == -134217729
// opcode: rstsa32 ; op1:x13; op2:x22; dest:x19; op1val:0xfffffff900000800;  op2val:0xfbfffffff7ffffff
TEST_RR_OP(rstsa32, x19, x13, x22, 0x0000000000000000, 0xfffffff900000800, 0xfbfffffff7ffffff, x7, 96, x8)

inst_13:
// rs1==x29, rs2==x1, rd==x21, rs2_w1_val == -33554433, rs2_w0_val == -33, rs1_w1_val == 1431655765
// opcode: rstsa32 ; op1:x29; op2:x1; dest:x21; op1val:0x5555555500000006;  op2val:0xfdffffffffffffdf
TEST_RR_OP(rstsa32, x21, x29, x1, 0x0000000000000000, 0x5555555500000006, 0xfdffffffffffffdf, x7, 104, x8)

inst_14:
// rs1==x17, rs2==x0, rd==x31, rs2_w1_val == -16777217, rs1_w0_val == -2, rs1_w1_val == -16777217
// opcode: rstsa32 ; op1:x17; op2:x0; dest:x31; op1val:0xfefffffffffffffe;  op2val:0xfeffffff00000003
TEST_RR_OP(rstsa32, x31, x17, x0, 0x0000000000000000, 0xfefffffffffffffe, 0xfeffffff00000003, x7, 112, x2)

inst_15:
// rs1==x19, rs2==x12, rd==x24, rs2_w1_val == -8388609, rs2_w0_val == -131073, rs1_w1_val == 1, rs1_w0_val == -17
// opcode: rstsa32 ; op1:x19; op2:x12; dest:x24; op1val:0x000001ffffffef;  op2val:0xff7ffffffffdffff
TEST_RR_OP(rstsa32, x24, x19, x12, 0x0000000000000000, 0x000001ffffffef, 0xff7ffffffffdffff, x7, 120, x2)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_16:
// rs1==x30, rs2==x29, rd==x1, rs2_w1_val == -4194305, rs1_w1_val == 512, rs1_w0_val == 1073741824, rs2_w0_val == 32
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x1; op1val:0x00020040000000;  op2val:0xffbfffff00000020
TEST_RR_OP(rstsa32, x1, x30, x29, 0x0000000000000000, 0x00020040000000, 0xffbfffff00000020, x5, 0, x2)

inst_17:
// rs1==x23, rs2==x24, rd==x11, rs2_w1_val == -2097153, rs2_w0_val == -1025, rs1_w1_val == 268435456, rs1_w0_val == 32
// opcode: rstsa32 ; op1:x23; op2:x24; dest:x11; op1val:0x1000000000000020;  op2val:0xffdffffffffffbff
TEST_RR_OP(rstsa32, x11, x23, x24, 0x0000000000000000, 0x1000000000000020, 0xffdffffffffffbff, x5, 8, x2)

inst_18:
// rs1==x8, rs2==x4, rd==x29, rs2_w1_val == -1048577, rs1_w1_val == 1048576, rs1_w0_val == -4097
// opcode: rstsa32 ; op1:x8; op2:x4; dest:x29; op1val:0x100000ffffefff;  op2val:0xffefffff00800000
TEST_RR_OP(rstsa32, x29, x8, x4, 0x0000000000000000, 0x100000ffffefff, 0xffefffff00800000, x5, 16, x2)

inst_19:
// rs1==x24, rs2==x15, rd==x26, rs2_w1_val == -524289, rs1_w0_val == -513, rs2_w0_val == -2147483648, rs1_w1_val == -32769
// opcode: rstsa32 ; op1:x24; op2:x15; dest:x26; op1val:0xffff7ffffffffdff;  op2val:0xfff7ffff80000000
TEST_RR_OP(rstsa32, x26, x24, x15, 0x0000000000000000, 0xffff7ffffffffdff, 0xfff7ffff80000000, x5, 24, x2)

inst_20:
// rs1==x11, rs2==x23, rd==x17, rs2_w1_val == -262145, rs1_w0_val == -65537, rs2_w0_val == 268435456
// opcode: rstsa32 ; op1:x11; op2:x23; dest:x17; op1val:0xfffffffcfffeffff;  op2val:0xfffbffff10000000
TEST_RR_OP(rstsa32, x17, x11, x23, 0x0000000000000000, 0xfffffffcfffeffff, 0xfffbffff10000000, x5, 32, x2)

inst_21:
// rs1==x6, rs2==x11, rd==x22, rs2_w1_val == -131073, rs1_w0_val == -257, rs2_w0_val == 2097152
// opcode: rstsa32 ; op1:x6; op2:x11; dest:x22; op1val:0x000005fffffeff;  op2val:0xfffdffff00200000
TEST_RR_OP(rstsa32, x22, x6, x11, 0x0000000000000000, 0x000005fffffeff, 0xfffdffff00200000, x5, 40, x2)

inst_22:
// rs1==x10, rs2==x7, rd==x3, rs2_w1_val == -65537, rs2_w0_val == -5, rs1_w1_val == 16777216
// opcode: rstsa32 ; op1:x10; op2:x7; dest:x3; op1val:0x1000000ffffffff;  op2val:0xfffefffffffffffb
TEST_RR_OP(rstsa32, x3, x10, x7, 0x0000000000000000, 0x1000000ffffffff, 0xfffefffffffffffb, x5, 48, x2)

inst_23:
// rs1==x7, rs2==x28, rd==x8, rs2_w1_val == -16385, rs1_w0_val == 33554432, rs1_w1_val == 536870912, rs2_w0_val == -16777217
// opcode: rstsa32 ; op1:x7; op2:x28; dest:x8; op1val:0x2000000002000000;  op2val:0xffffbffffeffffff
TEST_RR_OP(rstsa32, x8, x7, x28, 0x0000000000000000, 0x2000000002000000, 0xffffbffffeffffff, x5, 56, x2)

inst_24:
// rs1==x27, rs2==x21, rd==x0, rs2_w1_val == -8193, 
// opcode: rstsa32 ; op1:x27; op2:x21; dest:x0; op1val:0xfffffff9fffffdff;  op2val:0xffffdffff7ffffff
TEST_RR_OP(rstsa32, x0, x27, x21, 0x0000000000000000, 0xfffffff9fffffdff, 0xffffdffff7ffffff, x5, 64, x2)

inst_25:
// rs1==x15, rs2==x14, rd==x10, rs2_w1_val == -4097, 
// opcode: rstsa32 ; op1:x15; op2:x14; dest:x10; op1val:0x00008000008000;  op2val:0xffffefff00000007
TEST_RR_OP(rstsa32, x10, x15, x14, 0x0000000000000000, 0x00008000008000, 0xffffefff00000007, x5, 72, x2)

inst_26:
// rs1==x18, rs2==x30, rd==x28, rs2_w1_val == -2049, rs2_w0_val == -513, rs1_w0_val == 4
// opcode: rstsa32 ; op1:x18; op2:x30; dest:x28; op1val:0x10000000000004;  op2val:0xfffff7fffffffdff
TEST_RR_OP(rstsa32, x28, x18, x30, 0x0000000000000000, 0x10000000000004, 0xfffff7fffffffdff, x5, 80, x2)

inst_27:
// rs1==x26, rs2==x20, rd==x7, rs2_w1_val == -1025, rs1_w0_val == -32769
// opcode: rstsa32 ; op1:x26; op2:x20; dest:x7; op1val:0x000003ffff7fff;  op2val:0xfffffbff00004000
TEST_RR_OP(rstsa32, x7, x26, x20, 0x0000000000000000, 0x000003ffff7fff, 0xfffffbff00004000, x5, 88, x2)

inst_28:
// rs1==x25, rs2==x6, rd==x20, rs2_w1_val == -513, rs1_w1_val == -16385, rs2_w0_val == -4194305, rs1_w0_val == -2097153
// opcode: rstsa32 ; op1:x25; op2:x6; dest:x20; op1val:0xffffbfffffdfffff;  op2val:0xfffffdffffbfffff
TEST_RR_OP(rstsa32, x20, x25, x6, 0x0000000000000000, 0xffffbfffffdfffff, 0xfffffdffffbfffff, x5, 96, x2)

inst_29:
// rs1==x21, rs2==x2, rd==x16, rs2_w1_val == -257, rs1_w0_val == 2147483647, rs1_w1_val == -129
// opcode: rstsa32 ; op1:x21; op2:x2; dest:x16; op1val:0xffffff7f7fffffff;  op2val:0xfffffeff00000007
TEST_RR_OP(rstsa32, x16, x21, x2, 0x0000000000000000, 0xffffff7f7fffffff, 0xfffffeff00000007, x5, 104, x1)

inst_30:
// rs1==x14, rs2==x26, rd==x25, rs2_w1_val == -129, rs1_w0_val == -262145
// opcode: rstsa32 ; op1:x14; op2:x26; dest:x25; op1val:0x000004fffbffff;  op2val:0xffffff7ff7ffffff
TEST_RR_OP(rstsa32, x25, x14, x26, 0x0000000000000000, 0x000004fffbffff, 0xffffff7ff7ffffff, x5, 112, x1)

inst_31:
// rs1==x16, rs2==x8, rd==x27, rs2_w1_val == -65, rs1_w1_val == -2097153, rs2_w0_val == 128
// opcode: rstsa32 ; op1:x16; op2:x8; dest:x27; op1val:0xffdfffff20000000;  op2val:0xffffffbf00000080
TEST_RR_OP(rstsa32, x27, x16, x8, 0x0000000000000000, 0xffdfffff20000000, 0xffffffbf00000080, x5, 120, x1)

inst_32:
// rs2_w1_val == -33, rs2_w0_val == 262144
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffdffff;  op2val:0xffffffdf00040000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffdffffdffff, 0xffffffdf00040000, x5, 128, x1)

inst_33:
// rs2_w1_val == -17, rs1_w0_val == 8388608, rs1_w1_val == -8388609
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00800000;  op2val:0xffffffef00000001
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00800000, 0xffffffef00000001, x5, 136, x1)

inst_34:
// rs2_w1_val == -9, rs1_w1_val == -65, rs1_w0_val == -5
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffffffb;  op2val:0xfffffff7fffffbff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffbffffffffb, 0xfffffff7fffffbff, x5, 144, x1)

inst_35:
// rs2_w1_val == -5, rs1_w1_val == -134217729
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff02000000;  op2val:0xfffffffbfffffdff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff02000000, 0xfffffffbfffffdff, x5, 152, x1)

inst_36:
// rs2_w1_val == -3, rs1_w1_val == -33554433
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000003;  op2val:0xfffffffd00000005
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000003, 0xfffffffd00000005, x5, 160, x1)

inst_37:
// rs2_w1_val == -2, rs2_w0_val == 33554432, rs1_w0_val == -16385, rs1_w1_val == -257
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffffbfff;  op2val:0xfffffffe02000000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffeffffffbfff, 0xfffffffe02000000, x5, 168, x1)

inst_38:
// rs2_w1_val == -2147483648, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000080000000;  op2val:0x80000000fffffff6
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x10000080000000, 0x80000000fffffff6, x5, 176, x1)

inst_39:
// rs2_w1_val == 1073741824, rs2_w0_val == -2049
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000fffffff6;  op2val:0x40000000fffff7ff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x100000fffffff6, 0x40000000fffff7ff, x5, 184, x1)

inst_40:
// rs2_w1_val == 536870912, rs1_w1_val == -65537, rs2_w0_val == 8
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffffffff8;  op2val:0x2000000000000008
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffefffffffffff8, 0x2000000000000008, x5, 192, x1)

inst_41:
// rs2_w1_val == 268435456, rs2_w0_val == 1073741824, rs1_w0_val == -33
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffffdf;  op2val:0x1000000040000000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffffdf, 0x1000000040000000, x5, 200, x1)

inst_42:
// rs2_w1_val == 67108864, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcfffffff9;  op2val:0x400000010000000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffcfffffff9, 0x400000010000000, x5, 208, x1)

inst_43:
// rs2_w1_val == 33554432, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000000003;  op2val:0x200000000040000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x00008000000003, 0x200000000040000, x5, 216, x1)

inst_44:
// rs2_w1_val == 16777216, rs2_w0_val == 67108864, rs1_w1_val == 2097152, rs1_w0_val == 134217728
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000008000000;  op2val:0x100000004000000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x20000008000000, 0x100000004000000, x5, 224, x1)

inst_45:
// rs2_w1_val == 8388608, rs1_w0_val == 1431655765, rs1_w1_val == 256
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010055555555;  op2val:0x80000040000000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x00010055555555, 0x80000040000000, x5, 232, x1)

inst_46:
// rs2_w1_val == 4194304, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffdffff;  op2val:0x400000ffbfffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffdffff, 0x400000ffbfffff, x5, 240, x1)

inst_47:
// rs2_w1_val == 2097152, rs2_w0_val == -129
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8bfffffff;  op2val:0x200000ffffff7f
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff8bfffffff, 0x200000ffffff7f, x5, 248, x1)

inst_48:
// rs2_w1_val == 1048576, rs1_w1_val == 8388608
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffdffff;  op2val:0x100000ffffffbf
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x800000fffdffff, 0x100000ffffffbf, x5, 256, x1)

inst_49:
// rs2_w1_val == 524288, rs1_w0_val == -8193
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffffdfff;  op2val:0x080000fffffff9
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffeffffffdfff, 0x080000fffffff9, x5, 264, x1)

inst_50:
// rs2_w1_val == 262144, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffffa;  op2val:0x04000000000003
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x1000000fffffffa, 0x04000000000003, x5, 272, x1)

inst_51:
// rs2_w1_val == 65536, rs2_w0_val == 2, rs1_w0_val == -3, rs1_w1_val == -2147483648
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffffffd;  op2val:0x01000000000002
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x80000000fffffffd, 0x01000000000002, x5, 280, x1)

inst_52:
// rs1_w0_val == 16777216, rs2_w0_val == -536870913
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000901000000;  op2val:0xfffff7ffdfffffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x00000901000000, 0xfffff7ffdfffffff, x5, 288, x1)

inst_53:
// rs1_w0_val == 4194304, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500400000;  op2val:0xffffff7f40000000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x5555555500400000, 0xffffff7f40000000, x5, 296, x1)

inst_54:
// rs1_w0_val == 2097152, rs2_w0_val == 512, rs1_w1_val == 134217728
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000200000;  op2val:0xfdffffff00000200
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x800000000200000, 0xfdffffff00000200, x5, 304, x1)

inst_55:
// rs1_w0_val == 1048576, rs2_w0_val == -8193
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00100000;  op2val:0xffdfffffffffdfff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffff00100000, 0xffdfffffffffdfff, x5, 312, x1)

inst_56:
// rs1_w0_val == 524288, rs2_w1_val == 16384
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000080000;  op2val:0x00400000000002
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x00010000080000, 0x00400000000002, x5, 320, x1)

inst_57:
// rs1_w0_val == 262144, rs2_w0_val == -65537
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000040000;  op2val:0xffffbffffffeffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x00010000040000, 0xffffbffffffeffff, x5, 328, x1)

inst_58:
// rs1_w0_val == 131072, rs1_w1_val == 2
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200020000;  op2val:0x2000000000000001
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x00000200020000, 0x2000000000000001, x5, 336, x1)

inst_59:
// rs1_w0_val == 4096, rs1_w1_val == -2
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00001000;  op2val:0x4000000fffffdff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00001000, 0x4000000fffffdff, x5, 344, x1)

inst_60:
// rs1_w0_val == 1024, rs2_w0_val == 524288
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000400;  op2val:0x2000000000080000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x02000000000400, 0x2000000000080000, x5, 352, x1)

inst_61:
// rs1_w0_val == 512, rs2_w1_val == -1, rs1_w1_val == 33554432
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000200;  op2val:0xffffffffffffffbf
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x200000000000200, 0xffffffffffffffbf, x5, 360, x1)

inst_62:
// rs1_w0_val == 256, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000100;  op2val:0xffefffffffffff7f
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000100, 0xffefffffffffff7f, x5, 368, x1)

inst_63:
// rs1_w0_val == 128, rs1_w1_val == -1025
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000080;  op2val:0x0000067fffffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000080, 0x0000067fffffff, x5, 376, x1)

inst_64:
// rs1_w0_val == 64, rs1_w1_val == -2049
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000040;  op2val:0xfffffff7ffbfffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000040, 0xfffffff7ffbfffff, x5, 384, x1)

inst_65:
// rs1_w0_val == 16, rs2_w0_val == -2097153, rs1_w1_val == -131073
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000010;  op2val:0xfbffffffffdfffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000010, 0xfbffffffffdfffff, x5, 392, x1)

inst_66:
// rs1_w0_val == 8, rs1_w1_val == -268435457, rs2_w0_val == 0
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000008;  op2val:0x00000600000000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xefffffff00000008, 0x00000600000000, x5, 400, x1)

inst_67:
// rs1_w0_val == 1, rs1_w1_val == -1073741825
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000001;  op2val:0xffffeffffffeffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000001, 0xffffeffffffeffff, x5, 408, x1)

inst_68:
// rs1_w0_val == 0, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000000;  op2val:0x010000fffffffa
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000000, 0x010000fffffffa, x5, 416, x1)

inst_69:
// rs2_w1_val == 32768, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff01000000;  op2val:0x008000fffffff9
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xffffdfff01000000, 0x008000fffffff9, x5, 424, x1)

inst_70:
// rs2_w1_val == 8192, rs2_w0_val == 1431655765, rs1_w1_val == -1431655766
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000020;  op2val:0x00200055555555
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000020, 0x00200055555555, x5, 432, x1)

inst_71:
// rs2_w1_val == 4096, rs2_w0_val == -257
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600020000;  op2val:0x001000fffffeff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff600020000, 0x001000fffffeff, x5, 440, x1)

inst_72:
// rs2_w1_val == 2048, rs2_w0_val == -16385
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000007;  op2val:0x000800ffffbfff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x1000000000000007, 0x000800ffffbfff, x5, 448, x1)

inst_73:
// rs2_w1_val == 1024, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000008000000;  op2val:0x00040000000003
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x8000000008000000, 0x00040000000003, x5, 456, x1)

inst_74:
// rs2_w1_val == 512, rs1_w0_val == -524289
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fff7ffff;  op2val:0x000200bfffffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x80000000fff7ffff, 0x000200bfffffff, x5, 464, x1)

inst_75:
// rs2_w1_val == 256, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006ffffffef;  op2val:0x000100fffffffc
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x000006ffffffef, 0x000100fffffffc, x5, 472, x1)

inst_76:
// rs2_w1_val == 128, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500000400;  op2val:0x00008000004000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x00000500000400, 0x00008000004000, x5, 480, x1)

inst_77:
// rs2_w1_val == 32, rs1_w1_val == 2147483647
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffffdf;  op2val:0x000020ffffbfff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffffdf, 0x000020ffffbfff, x5, 488, x1)

inst_78:
// rs2_w1_val == 16, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006fffffffb;  op2val:0x000010fffffffd
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x000006fffffffb, 0x000010fffffffd, x5, 496, x1)

inst_79:
// rs2_w1_val == 8, rs2_w0_val == 32768
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000023fffffff;  op2val:0x00000800008000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x0000023fffffff, 0x00000800008000, x5, 504, x1)

inst_80:
// rs2_w1_val == 4, rs1_w1_val == -9, rs1_w0_val == -65
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffffffbf;  op2val:0x000004feffffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffffffbf, 0x000004feffffff, x5, 512, x1)

inst_81:
// rs2_w1_val == 1, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffdff;  op2val:0x00000100040000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffdff, 0x00000100040000, x5, 520, x1)

inst_82:
// rs2_w1_val == 0, rs2_w0_val == -9
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffff7ffff;  op2val:0x000000fffffff7
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xffff7ffffff7ffff, 0x000000fffffff7, x5, 528, x1)

inst_83:
// rs2_w0_val == -1431655766, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000080;  op2val:0x200000aaaaaaaa
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x00000100000080, 0x200000aaaaaaaa, x5, 536, x1)

inst_84:
// rs2_w0_val == -268435457, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000200000;  op2val:0x000002efffffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x800000000200000, 0x000002efffffff, x5, 544, x1)

inst_85:
// rs2_w0_val == 131072, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00001000;  op2val:0xff7fffff00020000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00001000, 0xff7fffff00020000, x5, 552, x1)

inst_86:
// rs2_w0_val == 65536, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000010;  op2val:0x200000000010000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x1000000000000010, 0x200000000010000, x5, 560, x1)

inst_87:
// rs2_w0_val == 8192, rs1_w1_val == -17
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000200;  op2val:0x20000000002000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffef00000200, 0x20000000002000, x5, 568, x1)

inst_88:
// rs2_w0_val == 4096, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffffff8;  op2val:0xc000000000001000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x000002fffffff8, 0xc000000000001000, x5, 576, x1)

inst_89:
// rs2_w0_val == 2048, rs1_w1_val == 16
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000010fbffffff;  op2val:0x800000000000800
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x000010fbffffff, 0x800000000000800, x5, 584, x1)

inst_90:
// rs2_w0_val == 1024, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff20000000;  op2val:0xfffeffff00000400
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff20000000, 0xfffeffff00000400, x5, 592, x1)

inst_91:
// rs2_w0_val == 256, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00010000;  op2val:0x4000000000000100
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00010000, 0x4000000000000100, x5, 600, x1)

inst_92:
// rs2_w0_val == 64, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000100;  op2val:0x3fffffff00000040
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x00010000000100, 0x3fffffff00000040, x5, 608, x1)

inst_93:
// rs2_w0_val == 16, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002ffffffff;  op2val:0x00001000000010
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x000002ffffffff, 0x00001000000010, x5, 616, x1)

inst_94:
// rs2_w0_val == 4, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000080;  op2val:0x08000000000004
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000080, 0x08000000000004, x5, 624, x1)

inst_95:
// rs2_w0_val == -1, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600010000;  op2val:0xffffffffffffffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff600010000, 0xffffffffffffffff, x5, 632, x1)

inst_96:
// rs1_w1_val == -67108865, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000080;  op2val:0x00400000000100
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000080, 0x00400000000100, x5, 640, x1)

inst_97:
// rs1_w1_val == -4194305, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffeffff;  op2val:0xfffefffffffffdff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xffbffffffffeffff, 0xfffefffffffffdff, x5, 648, x1)

inst_98:
// rs1_w1_val == -1048577, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff08000000;  op2val:0xfffffff600800000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xffefffff08000000, 0xfffffff600800000, x5, 656, x1)

inst_99:
// rs1_w1_val == -524289, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffeffff;  op2val:0x000004aaaaaaaa
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffeffff, 0x000004aaaaaaaa, x5, 664, x1)

inst_100:
// rs1_w1_val == -4097, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000004;  op2val:0xfffffffb00040000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xffffefff00000004, 0xfffffffb00040000, x5, 672, x1)

inst_101:
// rs1_w1_val == -513, rs1_w0_val == -129
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffff7f;  op2val:0xfffffff7ffffff7f
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffff7f, 0xfffffff7ffffff7f, x5, 680, x1)

inst_102:
// rs1_w1_val == -5, rs1_w0_val == -134217729, rs2_w0_val == -524289
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbf7ffffff;  op2val:0xfffffffafff7ffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffbf7ffffff, 0xfffffffafff7ffff, x5, 688, x1)

inst_103:
// rs1_w1_val == -3, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000006;  op2val:0xfffffff6dfffffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000006, 0xfffffff6dfffffff, x5, 696, x1)

inst_104:
// rs1_w1_val == 1073741824, rs2_w0_val == -4097
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffff7fff;  op2val:0x010000ffffefff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x40000000ffff7fff, 0x010000ffffefff, x5, 704, x1)

inst_105:
// rs1_w1_val == 67108864, rs2_w0_val == -67108865
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000020;  op2val:0xc0000000fbffffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x400000000000020, 0xc0000000fbffffff, x5, 712, x1)

inst_106:
// rs1_w1_val == 4194304, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffff6;  op2val:0xffdfffffffffdfff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x400000fffffff6, 0xffdfffffffffdfff, x5, 720, x1)

inst_107:
// rs1_w1_val == 524288, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000040000000;  op2val:0x010000fff7ffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x08000040000000, 0x010000fff7ffff, x5, 728, x1)

inst_108:
// rs1_w1_val == 262144, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000020000;  op2val:0x00010000020000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x04000000020000, 0x00010000020000, x5, 736, x1)

inst_109:
// rs1_w1_val == 65536, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000008000000;  op2val:0x010000fffffff7
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x01000008000000, 0x010000fffffff7, x5, 744, x1)

inst_110:
// rs1_w1_val == 16384, rs1_w0_val == -1431655766
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000aaaaaaaa;  op2val:0xefffffff80000000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x004000aaaaaaaa, 0xefffffff80000000, x5, 752, x1)

inst_111:
// rs1_w1_val == 8192, rs1_w0_val == 67108864
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200004000000;  op2val:0x3fffffff00008000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x00200004000000, 0x3fffffff00008000, x5, 760, x1)

inst_112:
// rs1_w1_val == 4096, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100055555555;  op2val:0x1000000aaaaaaaa
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x00100055555555, 0x1000000aaaaaaaa, x5, 768, x1)

inst_113:
// rs1_w1_val == 2048, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x0008007fffffff;  op2val:0x555555553fffffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x0008007fffffff, 0x555555553fffffff, x5, 776, x1)

inst_114:
// rs1_w1_val == 1024, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffffff6;  op2val:0xffefffffffbfffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x000400fffffff6, 0xffefffffffbfffff, x5, 784, x1)

inst_115:
// rs1_w1_val == 64, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000001000;  op2val:0x0000107fffffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x00004000001000, 0x0000107fffffff, x5, 792, x1)

inst_116:
// rs1_w1_val == 32, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000100000;  op2val:0xffff7fff00010000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x00002000100000, 0xffff7fff00010000, x5, 800, x1)

inst_117:
// rs1_w1_val == 8, rs1_w0_val == -8388609
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ff7fffff;  op2val:0x2000000ffbfffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x000008ff7fffff, 0x2000000ffbfffff, x5, 808, x1)

inst_118:
// rs1_w1_val == 0, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffffffd;  op2val:0xfffffffc00100000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x000000fffffffd, 0xfffffffc00100000, x5, 816, x1)

inst_119:
// rs2_w0_val == -33554433, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000fff7ffff;  op2val:0xffff7ffffdffffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x020000fff7ffff, 0xffff7ffffdffffff, x5, 824, x1)

inst_120:
// rs2_w0_val == -8388609, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000020000;  op2val:0x000800ff7fffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xc000000000020000, 0x000800ff7fffff, x5, 832, x1)

inst_121:
// rs1_w0_val == -536870913, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000dfffffff;  op2val:0xfffffffc3fffffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x1000000dfffffff, 0xfffffffc3fffffff, x5, 840, x1)

inst_122:
// rs2_w0_val == -1048577, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000400000;  op2val:0x000003ffefffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x04000000400000, 0x000003ffefffff, x5, 848, x1)

inst_123:
// rs2_w0_val == -262145, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00080000;  op2val:0x020000fffbffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xffefffff00080000, 0x020000fffbffff, x5, 856, x1)

inst_124:
// rs1_w0_val == -33554433, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffdffffff;  op2val:0x8000000fffffdff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xffeffffffdffffff, 0x8000000fffffdff, x5, 864, x1)

inst_125:
// rs1_w0_val == -16777217, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006feffffff;  op2val:0xfffffdff7fffffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x000006feffffff, 0xfffffdff7fffffff, x5, 872, x1)

inst_126:
// rs1_w0_val == -4194305, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffbfffff;  op2val:0x000400fffffbff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffbfffff, 0x000400fffffbff, x5, 880, x1)

inst_127:
// rs1_w0_val == -1048577, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffefffff;  op2val:0x00100004000000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x7fffffffffefffff, 0x00100004000000, x5, 888, x1)

inst_128:
// rs2_w0_val == -17, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00010000;  op2val:0xfffffff7ffffffef
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00010000, 0xfffffff7ffffffef, x5, 896, x1)

inst_129:
// rs1_w0_val == -2049, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffff7ff;  op2val:0xffff7fff00001000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xffbffffffffff7ff, 0xffff7fff00001000, x5, 904, x1)

inst_130:
// rs1_w0_val == -1025, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffffbff;  op2val:0x00000200200000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffffbff, 0x00000200200000, x5, 912, x1)

inst_131:
// rs2_w0_val == -2, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffffdfff;  op2val:0xffffbffffffffffe
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffefffffdfff, 0xffffbffffffffffe, x5, 920, x1)

inst_132:
// rs2_w0_val == 536870912, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffffffbff;  op2val:0xfffffff820000000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xffffdffffffffbff, 0xfffffff820000000, x5, 928, x1)

inst_133:
// rs1_w0_val == -9, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffffff7;  op2val:0x00000000000000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xbffffffffffffff7, 0x00000000000000, x5, 936, x1)

inst_134:
// rs2_w0_val == 16777216, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000087fffffff;  op2val:0x00000001000000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x0000087fffffff, 0x00000001000000, x5, 944, x1)

inst_135:
// rs2_w0_val == 4194304, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00002000;  op2val:0xfffeffff00400000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00002000, 0xfffeffff00400000, x5, 952, x1)

inst_136:
// rs1_w0_val == 268435456, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000010000000;  op2val:0x00400000000800
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x02000010000000, 0x00400000000800, x5, 960, x1)

inst_137:
// rs1_w0_val == -268435457, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800efffffff;  op2val:0x08000000010000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x000800efffffff, 0x08000000010000, x5, 968, x1)

inst_138:
// rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val == 2, rs1_w1_val == 4, rs2_w0_val == 134217728, rs2_w1_val == -32769
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000002;  op2val:0xffff7fff08000000
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0x00000400000002, 0xffff7fff08000000, x5, 976, x1)

inst_139:
// rs2_w1_val == -16777217, rs1_w0_val == -2, rs1_w1_val == -16777217
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffffe;  op2val:0xfeffffff00000003
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfefffffffffffffe, 0xfeffffff00000003, x5, 984, x1)

inst_140:
// rs2_w1_val == -8193, 
// opcode: rstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9fffffdff;  op2val:0xffffdffff7ffffff
TEST_RR_OP(rstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff9fffffdff, 0xffffdffff7ffffff, x5, 992, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 125*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
