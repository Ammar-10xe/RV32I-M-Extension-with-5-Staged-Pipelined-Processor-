
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smslxda instruction of the RISC-V RV64PZicsr extension for the smslxda covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smslxda)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 == rd != rs2, rs1==x22, rs2==x20, rd==x22, rs1_h0_val == -32768, rs1_h2_val == 16384, rs1_h3_val != rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs1_h3_val == 16, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h1_val == 4, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h2_val == 64, rs2_h0_val == 8192, rs2_h1_val == 64
// opcode: smslxda ; op1:x22; op2:x20; dest:x22; op1val:0x0010400000048000;  op2val:0x0009004000402000
TEST_P64_PNN_OP(smslxda, x22, $rd_hi, x22, x20, 0x0000000000000000, $correctval_hi, 0x0010400000048000, 0x0009004000402000, x5, 0, x7)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x24, rs2==x19, rd==x10, rs1_h3_val == rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h0_val == 21845, rs2_h3_val == -3, rs2_h1_val == -65, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val == -1, rs1_h3_val == -3, rs2_h2_val == 0
// opcode: smslxda ; op1:x24; op2:x19; dest:x10; op1val:0xfffd0007fff9ffff;  op2val:0xfffd0000ffbf5555
TEST_P64_PNN_OP(smslxda, x10, $rd_hi, x24, x19, 0x0000000000000000, $correctval_hi, 0xfffd0007fff9ffff, 0xfffd0000ffbf5555, x5, 16, x7)

inst_2:
// rs1 == rs2 != rd, rs1==x8, rs2==x8, rd==x24, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h0_val == -21846, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h2_val == -3, rs1_h2_val == 1, rs1_h1_val == 16, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -3, rs1_h0_val == 2, rs2_h3_val == 32, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h3_val == -5
// opcode: smslxda ; op1:x8; op2:x8; dest:x24; op1val:0xfffb000100100002;  op2val:0x0020fffdfffdaaaa
TEST_P64_PNN_OP(smslxda, x24, $rd_hi, x8, x8, 0x0000000000000000, $correctval_hi, 0xfffb000100100002, 0x0020fffdfffdaaaa, x5, 32, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h2_val == -16385, rs2_h1_val == -2049, rs1_h2_val == rs2_h2_val, rs1_h3_val == 4, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val == 64, rs1_h2_val == -16385, rs1_h0_val == -257
// opcode: smslxda ; op1:x6; op2:x6; dest:x6; op1val:0x0004bfff0040feff;  op2val:0xfff6bffff7ff5555
TEST_P64_PNN_OP(smslxda, x6, $rd_hi, x6, x6, 0x0000000000000000, $correctval_hi, 0x0004bfff0040feff, 0xfff6bffff7ff5555, x5, 48, x7)

inst_4:
// rs2 == rd != rs1, rs1==x9, rs2==x2, rd==x2, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val == -3, rs2_h3_val == -9, rs1_h3_val == -16385, rs1_h0_val == 512, rs2_h0_val == -257, rs2_h2_val == 16384, rs2_h1_val == -5
// opcode: smslxda ; op1:x9; op2:x2; dest:x2; op1val:0xbffffff8fffd0200;  op2val:0xfff74000fffbfeff
TEST_P64_PNN_OP(smslxda, x2, $rd_hi, x9, x2, 0x0000000000000000, $correctval_hi, 0xbffffff8fffd0200, 0xfff74000fffbfeff, x5, 64, x7)

inst_5:
// rs1==x3, rs2==x16, rd==x20, rs1_h1_val == rs2_h1_val, rs2_h3_val == -1025, rs1_h1_val == 128, rs2_h0_val == -129, rs2_h2_val == 2048, rs1_h0_val == 4, rs1_h2_val == -257, rs2_h1_val == 128, rs1_h3_val == 4096
// opcode: smslxda ; op1:x3; op2:x16; dest:x20; op1val:0x1000feff00800004;  op2val:0xfbff08000080ff7f
TEST_P64_PNN_OP(smslxda, x20, $rd_hi, x3, x16, 0x0000000000000000, $correctval_hi, 0x1000feff00800004, 0xfbff08000080ff7f, x5, 80, x7)

inst_6:
// rs1==x4, rs2==x13, rd==x26, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val == 1024, rs1_h0_val == -5, rs1_h3_val == 21845, rs2_h3_val == -2, rs2_h1_val == 8192, rs1_h1_val == -4097
// opcode: smslxda ; op1:x4; op2:x13; dest:x26; op1val:0x55550400effffffb;  op2val:0xfffec00020000006
TEST_P64_PNN_OP(smslxda, x26, $rd_hi, x4, x13, 0x0000000000000000, $correctval_hi, 0x55550400effffffb, 0xfffec00020000006, x5, 96, x7)

inst_7:
// rs1==x18, rs2==x23, rd==x8, rs1_h0_val == rs2_h0_val, rs1_h3_val == -1, rs1_h2_val == -2049, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == 4, rs2_h2_val == 4
// opcode: smslxda ; op1:x18; op2:x23; dest:x8; op1val:0xfffff7ff00090007;  op2val:0x00040004f7ff0007
TEST_P64_PNN_OP(smslxda, x8, $rd_hi, x18, x23, 0x0000000000000000, $correctval_hi, 0xfffff7ff00090007, 0x00040004f7ff0007, x5, 112, x7)

inst_8:
// rs1==x1, rs2==x0, rd==x16, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h3_val == -21846, rs2_h1_val == 4096, rs2_h0_val == -9, rs2_h2_val == -2
// opcode: smslxda ; op1:x1; op2:x0; dest:x16; op1val:0xaaaac000fffdfffb;  op2val:0xfbfffffe1000fff7
TEST_P64_PNN_OP(smslxda, x16, $rd_hi, x1, x0, 0x0000000000000000, $correctval_hi, 0xaaaac000fffdfffb, 0xfbfffffe1000fff7, x5, 128, x7)

inst_9:
// rs1==x23, rs2==x28, rd==x14, rs2_h3_val == -21846, rs1_h0_val == -33, rs2_h1_val == 0, rs2_h0_val == 1, rs1_h3_val == -2049, rs1_h1_val == -33
// opcode: smslxda ; op1:x23; op2:x28; dest:x14; op1val:0xf7ff3fffffdfffdf;  op2val:0xaaaafffc00000001
TEST_P64_PNN_OP(smslxda, x14, $rd_hi, x23, x28, 0x0000000000000000, $correctval_hi, 0xf7ff3fffffdfffdf, 0xaaaafffc00000001, x5, 144, x7)

inst_10:
// rs1==x28, rs2==x24, rd==x18, rs2_h3_val == 21845, rs2_h2_val == -513, rs1_h0_val == -8193, rs1_h1_val == -129, rs1_h3_val == 16384, rs1_h2_val == -2
// opcode: smslxda ; op1:x28; op2:x24; dest:x18; op1val:0x4000fffeff7fdfff;  op2val:0x5555fdff00060005
TEST_P64_PNN_OP(smslxda, x18, $rd_hi, x28, x24, 0x0000000000000000, $correctval_hi, 0x4000fffeff7fdfff, 0x5555fdff00060005, x5, 160, x7)

inst_11:
// rs1==x10, rs2==x26, rd==x12, rs2_h3_val == 32767, rs1_h2_val == -8193, rs1_h3_val == 256, rs1_h1_val == -16385, rs2_h1_val == -33
// opcode: smslxda ; op1:x10; op2:x26; dest:x12; op1val:0x0100dfffbffffff9;  op2val:0x7fff0009ffdf0001
TEST_P64_PNN_OP(smslxda, x12, $rd_hi, x10, x26, 0x0000000000000000, $correctval_hi, 0x0100dfffbffffff9, 0x7fff0009ffdf0001, x5, 176, x7)

inst_12:
// rs1==x20, rs2==x25, rd==x28, rs2_h3_val == -16385, rs1_h0_val == -16385, rs1_h3_val == 32
// opcode: smslxda ; op1:x20; op2:x25; dest:x28; op1val:0x0020c0000040bfff;  op2val:0xbffffffd20002000
TEST_P64_PNN_OP(smslxda, x28, $rd_hi, x20, x25, 0x0000000000000000, $correctval_hi, 0x0020c0000040bfff, 0xbffffffd20002000, x5, 192, x7)

inst_13:
// rs1==x15, rs2==x14, rd==x30, rs2_h3_val == -8193, rs1_h3_val == 2, rs2_h0_val == -33, rs2_h2_val == 128, rs1_h2_val == -17, rs2_h1_val == 8
// opcode: smslxda ; op1:x15; op2:x14; dest:x30; op1val:0x0002ffef00408000;  op2val:0xdfff00800008ffdf
TEST_P64_PNN_OP(smslxda, x30, $rd_hi, x15, x14, 0x0000000000000000, $correctval_hi, 0x0002ffef00408000, 0xdfff00800008ffdf, x5, 208, x7)

inst_14:
// rs1==x16, rs2==x11, rd==x4, rs2_h3_val == -4097, rs2_h1_val == 4, rs1_h0_val == 1024, rs2_h0_val == -513, rs1_h3_val == -1025, rs1_h2_val == -3, rs1_h1_val == -9
// opcode: smslxda ; op1:x16; op2:x11; dest:x4; op1val:0xfbfffffdfff70400;  op2val:0xefff00040004fdff
TEST_P64_PNN_OP(smslxda, x4, $rd_hi, x16, x11, 0x0000000000000000, $correctval_hi, 0xfbfffffdfff70400, 0xefff00040004fdff, x5, 224, x7)

inst_15:
// rs1==x13, rs2==x21, rs2_h3_val == -2049, rs2_h0_val == 16384, rs1_h0_val == -21846
// opcode: smslxda ; op1:x13; op2:x21; dest:x14; op1val:0xfff8feffff7faaaa;  op2val:0xf7ff008000084000
TEST_P64_PNN_OP(smslxda, x14, $rd_hi, x13, x21, 0x0000000000000000, $correctval_hi, 0xfff8feffff7faaaa, 0xf7ff008000084000, x5, 240, x7)

inst_16:
// rs1==x21, rs2==x9, rs2_h3_val == -513, rs2_h0_val == 8, rs1_h0_val == -513, rs1_h3_val == 128, rs1_h2_val == -129
// opcode: smslxda ; op1:x21; op2:x9; dest:x31; op1val:0x0080ff7ffffafdff;  op2val:0xfdff0000fff60008
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x21, x9, 0x0000000000000000, $correctval_hi, 0x0080ff7ffffafdff, 0xfdff0000fff60008, x5, 256, x7)

inst_17:
// rs1==x2, rs2==x31, rs2_h3_val == -257, rs2_h2_val == 1
// opcode: smslxda ; op1:x2; op2:x31; dest:x11; op1val:0xfffdfffdfffd3fff;  op2val:0xfeff00013fff0007
TEST_P64_PNN_OP(smslxda, x11, $rd_hi, x2, x31, 0x0000000000000000, $correctval_hi, 0xfffdfffdfffd3fff, 0xfeff00013fff0007, x5, 272, x6)

inst_18:
// rs1==x25, rs2==x18, rs2_h3_val == -129, rs2_h2_val == -33, rs1_h1_val == -32768, rs1_h2_val == -21846
// opcode: smslxda ; op1:x25; op2:x18; dest:x29; op1val:0xfffcaaaa80000200;  op2val:0xff7fffdf00090003
TEST_P64_PNN_OP(smslxda, x29, $rd_hi, x25, x18, 0x0000000000000000, $correctval_hi, 0xfffcaaaa80000200, 0xff7fffdf00090003, x5, 288, x6)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_19:
// rs1==x5, rs2==x22, rs2_h3_val == -65, rs1_h1_val == -513, rs1_h0_val == -9, rs2_h1_val == 16, rs1_h2_val == 128
// opcode: smslxda ; op1:x5; op2:x22; dest:x28; op1val:0xfffc0080fdfffff7;  op2val:0xffbf00050010fffc
TEST_P64_PNN_OP(smslxda, x28, $rd_hi, x5, x22, 0x0000000000000000, $correctval_hi, 0xfffc0080fdfffff7, 0xffbf00050010fffc, x2, 0, x6)

inst_20:
// rs1==x19, rs2==x7, rs2_h3_val == -33, rs1_h2_val == 8192, rs2_h1_val == -257, rs2_h2_val == 8
// opcode: smslxda ; op1:x19; op2:x7; dest:x15; op1val:0xfffb20000006ffff;  op2val:0xffdf0008feff3fff
TEST_P64_PNN_OP(smslxda, x15, $rd_hi, x19, x7, 0x0000000000000000, $correctval_hi, 0xfffb20000006ffff, 0xffdf0008feff3fff, x2, 16, x6)

inst_21:
// rs1==x14, rs2==x3, rs2_h3_val == -17, rs1_h0_val == -129, rs2_h1_val == -16385, rs2_h0_val == 512, rs1_h3_val == 2048
// opcode: smslxda ; op1:x14; op2:x3; dest:x15; op1val:0x0800bffffff8ff7f;  op2val:0xffef0006bfff0200
TEST_P64_PNN_OP(smslxda, x15, $rd_hi, x14, x3, 0x0000000000000000, $correctval_hi, 0x0800bffffff8ff7f, 0xffef0006bfff0200, x2, 32, x6)

inst_22:
// rs1==x30, rs2==x12, rs2_h3_val == -5, rs2_h0_val == 4, rs2_h1_val == -4097, rs1_h1_val == 32, rs1_h3_val == -33, rs1_h2_val == -32768
// opcode: smslxda ; op1:x30; op2:x12; dest:x18; op1val:0xffdf80000020fff6;  op2val:0xfffb0080efff0004
TEST_P64_PNN_OP(smslxda, x18, $rd_hi, x30, x12, 0x0000000000000000, $correctval_hi, 0xffdf80000020fff6, 0xfffb0080efff0004, x2, 48, x6)

inst_23:
// rs1==x29, rs2==x5, rs2_h3_val == -32768, rs2_h2_val == 4096
// opcode: smslxda ; op1:x29; op2:x5; dest:x24; op1val:0x0010fffe0003ffdf;  op2val:0x8000100000083fff
TEST_P64_PNN_OP(smslxda, x24, $rd_hi, x29, x5, 0x0000000000000000, $correctval_hi, 0x0010fffe0003ffdf, 0x8000100000083fff, x2, 64, x6)

inst_24:
// rs1==x26, rs2==x1, rs2_h3_val == 16384, rs1_h3_val == 64
// opcode: smslxda ; op1:x26; op2:x1; dest:x22; op1val:0x00408000fff60002;  op2val:0x40000001fff80007
TEST_P64_PNN_OP(smslxda, x22, $rd_hi, x26, x1, 0x0000000000000000, $correctval_hi, 0x00408000fff60002, 0x40000001fff80007, x2, 80, x6)

inst_25:
// rs1==x17, rs2==x29, rs2_h3_val == 8192, rs1_h2_val == -65, rs1_h0_val == 8, rs1_h1_val == -65
// opcode: smslxda ; op1:x17; op2:x29; dest:x3; op1val:0xfbffffbfffbf0008;  op2val:0x2000fff90005feff
TEST_P64_PNN_OP(smslxda, x3, $rd_hi, x17, x29, 0x0000000000000000, $correctval_hi, 0xfbffffbfffbf0008, 0x2000fff90005feff, x2, 96, x6)

inst_26:
// rs1==x7, rs2==x15, rs2_h3_val == 4096, rs1_h1_val == -5, rs1_h2_val == 4
// opcode: smslxda ; op1:x7; op2:x15; dest:x29; op1val:0xffdf0004fffbfff7;  op2val:0x1000fdff00090005
TEST_P64_PNN_OP(smslxda, x29, $rd_hi, x7, x15, 0x0000000000000000, $correctval_hi, 0xffdf0004fffbfff7, 0x1000fdff00090005, x2, 112, x6)

inst_27:
// rs1==x0, rs2==x30, rs2_h3_val == 2048, rs2_h1_val == 1024, rs2_h2_val == -17, rs1_h0_val == -17, rs2_h0_val == 64
// opcode: smslxda ; op1:x0; op2:x30; dest:x26; op1val:0x0020ff7ffff8ffef;  op2val:0x0800ffef04000040
TEST_P64_PNN_OP(smslxda, x26, $rd_hi, x0, x30, 0x0000000000000000, $correctval_hi, 0x0020ff7ffff8ffef, 0x0800ffef04000040, x2, 128, x6)

inst_28:
// rs1==x12, rs2==x27, rs2_h3_val == 1024, rs1_h3_val == -257, rs2_h1_val == 512, rs2_h2_val == -4097, rs2_h0_val == -2
// opcode: smslxda ; op1:x12; op2:x27; dest:x31; op1val:0xfeffbffffffcfeff;  op2val:0x0400efff0200fffe
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x12, x27, 0x0000000000000000, $correctval_hi, 0xfeffbffffffcfeff, 0x0400efff0200fffe, x2, 144, x6)

inst_29:
// rs1==x31, rs2==x17, rs2_h3_val == 512, rs1_h0_val == 1, rs1_h1_val == 8
// opcode: smslxda ; op1:x31; op2:x17; dest:x30; op1val:0x5555000100080001;  op2val:0x02000080f7ff0200
TEST_P64_PNN_OP(smslxda, x30, $rd_hi, x31, x17, 0x0000000000000000, $correctval_hi, 0x5555000100080001, 0x02000080f7ff0200, x2, 160, x6)

inst_30:
// rs1==x27, rs2==x10, rs2_h3_val == 256, rs2_h0_val == 128, rs2_h2_val == 8192, rs1_h2_val == -1, rs2_h1_val == -9
// opcode: smslxda ; op1:x27; op2:x10; dest:x28; op1val:0xfffdfffffffcfdff;  op2val:0x01002000fff70080
TEST_P64_PNN_OP(smslxda, x28, $rd_hi, x27, x10, 0x0000000000000000, $correctval_hi, 0xfffdfffffffcfdff, 0x01002000fff70080, x2, 176, x6)

inst_31:
// rs1==x11, rs2==x4, rs2_h3_val == 128, rs1_h2_val == 8, rs2_h2_val == -257
// opcode: smslxda ; op1:x11; op2:x4; dest:x24; op1val:0x555500080004fff6;  op2val:0x0080feff3ffffdff
TEST_P64_PNN_OP(smslxda, x24, $rd_hi, x11, x4, 0x0000000000000000, $correctval_hi, 0x555500080004fff6, 0x0080feff3ffffdff, x2, 192, x6)

inst_32:
// rs2_h3_val == 64, rs1_h1_val == 1, rs2_h0_val == 32767
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa00040001c000;  op2val:0x00400007fff87fff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaa00040001c000, 0x00400007fff87fff, x2, 208, x6)

inst_33:
// rs2_h3_val == 16, rs1_h3_val == 8, rs2_h2_val == -32768
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x0008f7fffff7c000;  op2val:0x0010800000100006
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0008f7fffff7c000, 0x0010800000100006, x2, 224, x6)

inst_34:
// rs2_h3_val == 8, rs1_h2_val == -1025
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffafbffff7ffff6;  op2val:0x0008fffe00400200
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffafbffff7ffff6, 0x0008fffe00400200, x2, 240, x6)

inst_35:
// rs1_h1_val == -2, rs1_h3_val == 512, rs2_h1_val == 1, rs2_h2_val == -9, rs2_h0_val == -65, rs1_h0_val == -1025
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x0200fffafffefbff;  op2val:0xff7ffff70001ffbf
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200fffafffefbff, 0xff7ffff70001ffbf, x2, 256, x6)

inst_36:
// rs1_h1_val == 16384, rs2_h3_val == 2, rs2_h1_val == -129, rs2_h2_val == 1024, rs2_h0_val == 256
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x100040004000feff;  op2val:0x00020400ff7f0100
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x100040004000feff, 0x00020400ff7f0100, x2, 272, x6)

inst_37:
// rs1_h1_val == 8192, rs2_h0_val == -1025
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaff7f20000006;  op2val:0x10003fff0400fbff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaaff7f20000006, 0x10003fff0400fbff, x2, 288, x6)

inst_38:
// rs1_h1_val == 4096, rs1_h2_val == 2
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x0009000210000003;  op2val:0xffbffffd00087fff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0009000210000003, 0xffbffffd00087fff, x2, 304, x6)

inst_39:
// rs1_h1_val == 2048, rs2_h1_val == -2
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff8dfff0800aaaa;  op2val:0xfffe0008fffe0007
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff8dfff0800aaaa, 0xfffe0008fffe0007, x2, 320, x6)

inst_40:
// rs1_h1_val == 1024, rs2_h0_val == 4096
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x00043fff0400ffff;  op2val:0x0080000000051000
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00043fff0400ffff, 0x0080000000051000, x2, 336, x6)

inst_41:
// rs1_h1_val == 512, rs2_h3_val == 0
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff02000001;  op2val:0x0000ffef00050200
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffdfff02000001, 0x0000ffef00050200, x2, 352, x6)

inst_42:
// rs1_h1_val == 256, rs2_h0_val == -1, rs1_h0_val == -3, rs1_h2_val == 32767
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffa7fff0100fffd;  op2val:0x00100006c000ffff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffa7fff0100fffd, 0x00100006c000ffff, x2, 368, x6)

inst_43:
// rs1_h1_val == 2, rs1_h3_val == 8192
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x2000000400028000;  op2val:0x3fff4000f7ff0001
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000000400028000, 0x3fff4000f7ff0001, x2, 384, x6)

inst_44:
// rs1_h1_val == 0, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffbf0000fbff;  op2val:0xaaaa0009ffbfffff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ffffbf0000fbff, 0xaaaa0009ffbfffff, x2, 400, x6)

inst_45:
// rs1_h1_val == -1, rs1_h2_val == 0, rs2_h2_val == -1025, rs1_h0_val == 16384
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0000ffff4000;  op2val:0x0005fbffefff0001
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeff0000ffff4000, 0x0005fbffefff0001, x2, 416, x6)

inst_46:
// rs1_h0_val == 21845, rs2_h1_val == -17
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x1000ff7f00005555;  op2val:0xff7f0800ffeffbff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x1000ff7f00005555, 0xff7f0800ffeffbff, x2, 432, x6)

inst_47:
// rs1_h0_val == 32767, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffbfbfff7fff;  op2val:0x0800fff600087fff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdfffbfbfff7fff, 0x0800fff600087fff, x2, 448, x6)

inst_48:
// rs1_h0_val == -4097, rs2_h2_val == 32, rs2_h3_val == -1, rs1_h2_val == -33
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffdfffbfefff;  op2val:0xffff00200005fff6
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x5555ffdfffbfefff, 0xffff00200005fff6, x2, 464, x6)

inst_49:
// rs1_h0_val == -2049, rs1_h3_val == -4097
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xeffffefffff7f7ff;  op2val:0xfff60005fff6fff7
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xeffffefffff7f7ff, 0xfff60005fff6fff7, x2, 480, x6)

inst_50:
// rs1_h0_val == -65, rs1_h3_val == -65, rs2_h0_val == -32768
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xffbf80000001ffbf;  op2val:0x40000003ff7f8000
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbf80000001ffbf, 0x40000003ff7f8000, x2, 496, x6)

inst_51:
// rs1_h0_val == -2, rs2_h0_val == -2049
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x00052000fdfffffe;  op2val:0x00070040c000f7ff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00052000fdfffffe, 0x00070040c000f7ff, x2, 512, x6)

inst_52:
// rs1_h0_val == 8192, rs2_h2_val == 2
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xeffffff6fff82000;  op2val:0xbfff000200100001
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xeffffff6fff82000, 0xbfff000200100001, x2, 528, x6)

inst_53:
// rs1_h0_val == 4096, rs2_h0_val == 16, rs1_h2_val == 2048, rs1_h3_val == -17
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xffef080000031000;  op2val:0xfffb040000800010
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffef080000031000, 0xfffb040000800010, x2, 544, x6)

inst_54:
// rs1_h0_val == 2048, rs1_h2_val == -513
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x0003fdff00070800;  op2val:0xfefffffc3ffffffe
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0003fdff00070800, 0xfefffffc3ffffffe, x2, 560, x6)

inst_55:
// rs1_h0_val == 256, rs2_h1_val == -1025, rs1_h2_val == -4097
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00030100;  op2val:0xfff6c000fbffaaaa
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffefff00030100, 0xfff6c000fbffaaaa, x2, 576, x6)

inst_56:
// rs1_h0_val == 128, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x0200efff80000080;  op2val:0x00803fff0004fffc
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200efff80000080, 0x00803fff0004fffc, x2, 592, x6)

inst_57:
// rs1_h0_val == 64, rs2_h0_val == -8193, rs1_h3_val == 32767
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000600000040;  op2val:0xdfff08000040dfff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fff000600000040, 0xdfff08000040dfff, x2, 608, x6)

inst_58:
// rs1_h0_val == 32, rs2_h1_val == 2, rs1_h1_val == 32767
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x1000efff7fff0020;  op2val:0x0008fffe0002fdff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x1000efff7fff0020, 0x0008fffe0002fdff, x2, 624, x6)

inst_59:
// rs2_h1_val == -1, rs2_h2_val == 256
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x0008fbfffffeffff;  op2val:0x00060100fffff7ff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0008fbfffffeffff, 0x00060100fffff7ff, x2, 640, x6)

inst_60:
// rs2_h0_val == -16385, rs1_h1_val == 21845, rs2_h1_val == 32767
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x0004fffe5555fff9;  op2val:0xf7ff00047fffbfff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0004fffe5555fff9, 0xf7ff00047fffbfff, x2, 656, x6)

inst_61:
// rs2_h0_val == -4097, rs2_h2_val == -1
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x0020fff6bfff5555;  op2val:0x0100ffff0400efff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020fff6bfff5555, 0x0100ffff0400efff, x2, 672, x6)

inst_62:
// rs2_h0_val == -17, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x0007aaaa0008ff7f;  op2val:0xbfff3fff0010ffef
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0007aaaa0008ff7f, 0xbfff3fff0010ffef, x2, 688, x6)

inst_63:
// rs2_h0_val == -5, rs1_h2_val == 4096
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x020010003fff0004;  op2val:0xffbf0080fefffffb
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x020010003fff0004, 0xffbf0080fefffffb, x2, 704, x6)

inst_64:
// rs2_h0_val == -3, rs1_h0_val == 16
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x0006aaaafffa0010;  op2val:0xfffd20000004fffd
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0006aaaafffa0010, 0xfffd20000004fffd, x2, 720, x6)

inst_65:
// rs2_h0_val == 2048, rs1_h2_val == 256
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff6010000054000;  op2val:0xbfffbfffffef0800
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff6010000054000, 0xbfffbfffffef0800, x2, 736, x6)

inst_66:
// rs2_h0_val == 1024, rs1_h1_val == -1025
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xefff0800fbffffef;  op2val:0xc000fffeefff0400
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefff0800fbffffef, 0xc000fffeefff0400, x2, 752, x6)

inst_67:
// rs2_h0_val == 32, rs1_h3_val == -2, rs1_h2_val == 16, rs2_h2_val == -5
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffe001000040008;  op2val:0x0008fffbffbf0020
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffe001000040008, 0x0008fffbffbf0020, x2, 768, x6)

inst_68:
// rs2_h0_val == 2, rs1_h1_val == -21846, rs1_h3_val == -32768, rs2_h2_val == -129
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x80000008aaaafdff;  op2val:0x0040ff7f00020002
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x80000008aaaafdff, 0x0040ff7f00020002, x2, 784, x6)

inst_69:
// rs2_h0_val == 0, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xefffffefefff0001;  op2val:0x01000000bfff0000
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefffffefefff0001, 0x01000000bfff0000, x2, 800, x6)

inst_70:
// rs1_h3_val == -8193, rs1_h2_val == 64, rs2_h2_val == -8193
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xdfff00400008efff;  op2val:0xffbfdfff00047fff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfff00400008efff, 0xffbfdfff00047fff, x2, 816, x6)

inst_71:
// rs1_h3_val == -513, rs2_h2_val == -65
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xfdff80000007aaaa;  op2val:0x4000ffbf0003fffb
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdff80000007aaaa, 0x4000ffbf0003fffb, x2, 832, x6)

inst_72:
// rs1_h3_val == -129, rs2_h3_val == 1
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xff7f010000022000;  op2val:0x0001fffb00800003
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7f010000022000, 0x0001fffb00800003, x2, 848, x6)

inst_73:
// rs1_h3_val == 1024, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x0400ffffffffffef;  op2val:0x0007ffef00000100
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0400ffffffffffef, 0x0007ffef00000100, x2, 864, x6)

inst_74:
// rs2_h2_val == -2049, rs1_h1_val == -257, rs2_h1_val == -8193
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x00800800feff0002;  op2val:0x3ffff7ffdfff0080
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00800800feff0002, 0x3ffff7ffdfff0080, x2, 880, x6)

inst_75:
// rs1_h3_val == 1, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x0001ffdffbff0400;  op2val:0x0001fffbfff80003
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001ffdffbff0400, 0x0001fffbfff80003, x2, 896, x6)

inst_76:
// rs1_h3_val == 0, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x0000aaaa0040ffff;  op2val:0xaaaaeffffffd0020
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000aaaa0040ffff, 0xaaaaeffffffd0020, x2, 912, x6)

inst_77:
// rs1_h2_val == 21845, rs2_h2_val == 21845
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x00205555fffbfffc;  op2val:0x7fff5555fff6ff7f
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00205555fffbfffc, 0x7fff5555fff6ff7f, x2, 928, x6)

inst_78:
// rs2_h2_val == 512, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xc000fff8fffa1000;  op2val:0xffef0200fffe0000
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xc000fff8fffa1000, 0xffef0200fffe0000, x2, 944, x6)

inst_79:
// rs2_h1_val == 2048, rs1_h2_val == -9
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff70007fff6;  op2val:0x0100efff0800fffe
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdffffff70007fff6, 0x0100efff0800fffe, x2, 960, x6)

inst_80:
// rs1_h3_val == -9, rs2_h2_val == 32767
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff71000ffdf0040;  op2val:0xdfff7ffffffffbff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff71000ffdf0040, 0xdfff7ffffffffbff, x2, 976, x6)

inst_81:
// rs2_h2_val == 16, rs1_h2_val == -5
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffbff7f0003;  op2val:0xffbf001008000007
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff6fffbff7f0003, 0xffbf001008000007, x2, 992, x6)

inst_82:
// rs2_h1_val == -21846, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x0010fffcffbf0005;  op2val:0xfff72000aaaaefff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0010fffcffbf0005, 0xfff72000aaaaefff, x2, 1008, x6)

inst_83:
// rs2_h1_val == 21845, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff7f7fffffcefff;  op2val:0x0005000155550400
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7f7fffffcefff, 0x0005000155550400, x2, 1024, x6)

inst_84:
// rs1_h2_val == 512, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0200fffafdff;  op2val:0x00010010fefffff7
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdff0200fffafdff, 0x00010010fefffff7, x2, 1040, x6)

inst_85:
// rs2_h1_val == -513, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x0020c000fefffff9;  op2val:0xfff77ffffdfffffc
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020c000fefffff9, 0xfff77ffffdfffffc, x2, 1056, x6)

inst_86:
// rs1_h2_val == 32, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x08000020fff78000;  op2val:0x2000c000aaaaaaaa
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x08000020fff78000, 0x2000c000aaaaaaaa, x2, 1072, x6)

inst_87:
// rs2_h1_val == -32768, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xfbff008000057fff;  op2val:0xc000c0008000efff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbff008000057fff, 0xc000c0008000efff, x2, 1088, x6)

inst_88:
// rs2_h2_val == -21846, rs2_h1_val == 256
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffeffdffc000;  op2val:0x0800aaaa01003fff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff6ffeffdffc000, 0x0800aaaa01003fff, x2, 1104, x6)

inst_89:
// rs2_h1_val == 16384, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x00057fff04000010;  op2val:0xfffefff74000bfff
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00057fff04000010, 0xfffefff74000bfff, x2, 1120, x6)

inst_90:
// rs1_h1_val == -8193, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff70005dffffffd;  op2val:0x1000c0000004fffe
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff70005dffffffd, 0x1000c0000004fffe, x2, 1136, x6)

inst_91:
// rs1_h1_val == -17, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0007ffef0002;  op2val:0xefff04000400fff9
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdf0007ffef0002, 0xefff04000400fff9, x2, 1152, x6)

inst_92:
// rs2_h1_val == 32, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x000200018000fffe;  op2val:0x000000020020ffef
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000200018000fffe, 0x000000020020ffef, x2, 1168, x6)

inst_93:
// rs1_h0_val == 0, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa5555ffef0000;  op2val:0x00000001feff0008
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaa5555ffef0000, 0x00000001feff0008, x2, 1184, x6)

inst_94:
// rs1_h1_val == -2049, 
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x4000fbfff7ffdfff;  op2val:0xfdfffeff3fff0004
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x4000fbfff7ffdfff, 0xfdfffeff3fff0004, x2, 1200, x6)

inst_95:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h0_val == -21846, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h2_val == -3, rs1_h2_val == 1, rs1_h1_val == 16, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -3, rs1_h0_val == 2, rs2_h3_val == 32, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h3_val == -5
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000100100002;  op2val:0x0020fffdfffdaaaa
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffb000100100002, 0x0020fffdfffdaaaa, x2, 1216, x6)

inst_96:
// rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h3_val == -21846, rs2_h1_val == 4096, rs2_h0_val == -9, rs2_h2_val == -2
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0xaaaac000fffdfffb;  op2val:0xfbfffffe1000fff7
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaac000fffdfffb, 0xfbfffffe1000fff7, x2, 1232, x6)

inst_97:
// rs2_h3_val == 2048, rs2_h1_val == 1024, rs2_h2_val == -17, rs1_h0_val == -17, rs2_h0_val == 64
// opcode: smslxda ; op1:x30; op2:x29; dest:x31; op1val:0x0020ff7ffff8ffef;  op2val:0x0800ffef04000040
TEST_P64_PNN_OP(smslxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020ff7ffff8ffef, 0x0800ffef04000040, x2, 1248, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 38*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 158*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
