
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smtt32 instruction of the RISC-V RV64PZicsr extension for the smtt32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smtt32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x13,signature_x13_1)

inst_0:
// rs1 == rd != rs2, rs1==x12, rs2==x23, rd==x12, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val == -1048577, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val, rs2_w0_val == 1024, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w1_val == 1431655765
// opcode: smtt32 ; op1:x12; op2:x23; dest:x12; op1val:0xffefffff80000000;  op2val:0x5555555500000400
TEST_RR_OP(smtt32, x12, x12, x23, 0x0000000000000000, 0xffefffff80000000, 0x5555555500000400, x13, 0, x20)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x14, rs2==x5, rd==x0, rs1_w1_val == rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val == -2097153, rs1_w1_val == -131073, rs2_w0_val == 1, rs2_w1_val == -131073
// opcode: smtt32 ; op1:x14; op2:x5; dest:x0; op1val:0xfffdffffffdfffff;  op2val:0xfffdffff00000001
TEST_RR_OP(smtt32, x0, x14, x5, 0x0000000000000000, 0xfffdffffffdfffff, 0xfffdffff00000001, x13, 8, x20)

inst_2:
// rs1 == rs2 != rd, rs1==x24, rs2==x24, rd==x22, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w0_val == -33
// opcode: smtt32 ; op1:x24; op2:x24; dest:x22; op1val:0x000003fffffffa;  op2val:0xfffffffcffffffdf
TEST_RR_OP(smtt32, x22, x24, x24, 0x0000000000000000, 0x000003fffffffa, 0xfffffffcffffffdf, x13, 16, x20)

inst_3:
// rs1 == rs2 == rd, rs1==x11, rs2==x11, rd==x11, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 8, rs2_w0_val == 16384
// opcode: smtt32 ; op1:x11; op2:x11; dest:x11; op1val:0x000008c0000000;  op2val:0x5555555500004000
TEST_RR_OP(smtt32, x11, x11, x11, 0x0000000000000000, 0x000008c0000000, 0x5555555500004000, x13, 24, x20)

inst_4:
// rs2 == rd != rs1, rs1==x4, rs2==x1, rd==x1, rs1_w0_val == rs2_w0_val, rs2_w0_val == -262145, rs1_w0_val == -262145, rs2_w1_val == -67108865, rs1_w1_val == -513
// opcode: smtt32 ; op1:x4; op2:x1; dest:x1; op1val:0xfffffdfffffbffff;  op2val:0xfbfffffffffbffff
TEST_RR_OP(smtt32, x1, x4, x1, 0x0000000000000000, 0xfffffdfffffbffff, 0xfbfffffffffbffff, x13, 32, x20)

inst_5:
// rs1==x16, rs2==x26, rd==x7, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w1_val == -8193, rs1_w0_val == 2097152, rs2_w0_val == -17, rs1_w1_val == -129
// opcode: smtt32 ; op1:x16; op2:x26; dest:x7; op1val:0xffffff7f00200000;  op2val:0xffffdfffffffffef
TEST_RR_OP(smtt32, x7, x16, x26, 0x0000000000000000, 0xffffff7f00200000, 0xffffdfffffffffef, x13, 40, x20)

inst_6:
// rs1==x2, rs2==x3, rd==x24, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == -33, rs2_w1_val == 1048576, rs1_w0_val == 1024
// opcode: smtt32 ; op1:x2; op2:x3; dest:x24; op1val:0xffffffdf00000400;  op2val:0x10000000000001
TEST_RR_OP(smtt32, x24, x2, x3, 0x0000000000000000, 0xffffffdf00000400, 0x10000000000001, x13, 48, x20)

inst_7:
// rs1==x3, rs2==x19, rd==x29, rs2_w1_val == -1431655766, rs1_w0_val == -131073, rs1_w1_val == -1025
// opcode: smtt32 ; op1:x3; op2:x19; dest:x29; op1val:0xfffffbfffffdffff;  op2val:0xaaaaaaaa00000003
TEST_RR_OP(smtt32, x29, x3, x19, 0x0000000000000000, 0xfffffbfffffdffff, 0xaaaaaaaa00000003, x13, 56, x20)

inst_8:
// rs1==x1, rs2==x15, rd==x10, rs2_w1_val == 2147483647, rs2_w0_val == 128, rs1_w0_val == 8192
// opcode: smtt32 ; op1:x1; op2:x15; dest:x10; op1val:0xfffffffa00002000;  op2val:0x7fffffff00000080
TEST_RR_OP(smtt32, x10, x1, x15, 0x0000000000000000, 0xfffffffa00002000, 0x7fffffff00000080, x13, 64, x20)

inst_9:
// rs1==x5, rs2==x16, rd==x15, rs2_w1_val == -1073741825, rs1_w1_val == 268435456, rs2_w0_val == 32
// opcode: smtt32 ; op1:x5; op2:x16; dest:x15; op1val:0x10000000fffbffff;  op2val:0xbfffffff00000020
TEST_RR_OP(smtt32, x15, x5, x16, 0x0000000000000000, 0x10000000fffbffff, 0xbfffffff00000020, x13, 72, x20)

inst_10:
// rs1==x6, rs2==x2, rd==x3, rs2_w1_val == -536870913, rs1_w1_val == -2049
// opcode: smtt32 ; op1:x6; op2:x2; dest:x3; op1val:0xfffff7ff00000400;  op2val:0xdfffffff00000007
TEST_RR_OP(smtt32, x3, x6, x2, 0x0000000000000000, 0xfffff7ff00000400, 0xdfffffff00000007, x13, 80, x20)

inst_11:
// rs1==x25, rs2==x0, rd==x26, rs2_w1_val == -268435457, rs1_w0_val == -32769
// opcode: smtt32 ; op1:x25; op2:x0; dest:x26; op1val:0x3fffffffffff7fff;  op2val:0xefffffff00000400
TEST_RR_OP(smtt32, x26, x25, x0, 0x0000000000000000, 0x3fffffffffff7fff, 0xefffffff00000400, x13, 88, x20)

inst_12:
// rs1==x8, rs2==x29, rd==x4, rs2_w1_val == -134217729, rs1_w1_val == 64, rs1_w0_val == 16777216, rs2_w0_val == -2
// opcode: smtt32 ; op1:x8; op2:x29; dest:x4; op1val:0x00004001000000;  op2val:0xf7fffffffffffffe
TEST_RR_OP(smtt32, x4, x8, x29, 0x0000000000000000, 0x00004001000000, 0xf7fffffffffffffe, x13, 96, x20)

inst_13:
// rs1==x0, rs2==x9, rd==x17, rs2_w1_val == -33554433, rs1_w1_val == -1073741825, rs2_w0_val == 33554432, rs1_w0_val == -8388609
// opcode: smtt32 ; op1:x0; op2:x9; dest:x17; op1val:0xbfffffffff7fffff;  op2val:0xfdffffff02000000
TEST_RR_OP(smtt32, x17, x0, x9, 0x0000000000000000, 0xbfffffffff7fffff, 0xfdffffff02000000, x13, 104, x20)

inst_14:
// rs1==x7, rs2==x4, rd==x31, rs2_w1_val == -16777217, rs1_w0_val == 268435456, rs2_w0_val == 2097152
// opcode: smtt32 ; op1:x7; op2:x4; dest:x31; op1val:0xbfffffff10000000;  op2val:0xfeffffff00200000
TEST_RR_OP(smtt32, x31, x7, x4, 0x0000000000000000, 0xbfffffff10000000, 0xfeffffff00200000, x13, 112, x20)

inst_15:
// rs1==x22, rs2==x7, rd==x5, rs2_w1_val == -8388609, rs2_w0_val == 131072, rs1_w0_val == -4097, rs1_w1_val == 32768
// opcode: smtt32 ; op1:x22; op2:x7; dest:x5; op1val:0x008000ffffefff;  op2val:0xff7fffff00020000
TEST_RR_OP(smtt32, x5, x22, x7, 0x0000000000000000, 0x008000ffffefff, 0xff7fffff00020000, x13, 120, x20)

inst_16:
// rs1==x19, rs2==x25, rd==x16, rs2_w1_val == -4194305, rs2_w0_val == 8388608
// opcode: smtt32 ; op1:x19; op2:x25; dest:x16; op1val:0x000003fffffffc;  op2val:0xffbfffff00800000
TEST_RR_OP(smtt32, x16, x19, x25, 0x0000000000000000, 0x000003fffffffc, 0xffbfffff00800000, x13, 128, x20)

inst_17:
// rs1==x31, rs2==x8, rd==x21, rs2_w1_val == -2097153, rs1_w1_val == -268435457
// opcode: smtt32 ; op1:x31; op2:x8; dest:x21; op1val:0xefffffffff7fffff;  op2val:0xffdfffff02000000
TEST_RR_OP(smtt32, x21, x31, x8, 0x0000000000000000, 0xefffffffff7fffff, 0xffdfffff02000000, x13, 136, x20)

inst_18:
// rs1==x18, rs2==x12, rd==x30, rs2_w1_val == -1048577, rs2_w0_val == 4, rs1_w0_val == 67108864
// opcode: smtt32 ; op1:x18; op2:x12; dest:x30; op1val:0x00800004000000;  op2val:0xffefffff00000004
TEST_RR_OP(smtt32, x30, x18, x12, 0x0000000000000000, 0x00800004000000, 0xffefffff00000004, x13, 144, x20)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_19:
// rs1==x29, rs2==x17, rd==x27, rs2_w1_val == -524289, rs1_w0_val == -33
// opcode: smtt32 ; op1:x29; op2:x17; dest:x27; op1val:0xfffffdffffffffdf;  op2val:0xfff7fffffffffff9
TEST_RR_OP(smtt32, x27, x29, x17, 0x0000000000000000, 0xfffffdffffffffdf, 0xfff7fffffffffff9, x1, 0, x3)

inst_20:
// rs1==x9, rs2==x28, rd==x13, rs2_w1_val == -262145, rs1_w0_val == 64
// opcode: smtt32 ; op1:x9; op2:x28; dest:x13; op1val:0xc000000000000040;  op2val:0xfffbffffffffffef
TEST_RR_OP(smtt32, x13, x9, x28, 0x0000000000000000, 0xc000000000000040, 0xfffbffffffffffef, x1, 8, x3)

inst_21:
// rs1==x20, rs2==x22, rd==x6, rs2_w1_val == -65537, 
// opcode: smtt32 ; op1:x20; op2:x22; dest:x6; op1val:0xc000000000000040;  op2val:0xfffeffff3fffffff
TEST_RR_OP(smtt32, x6, x20, x22, 0x0000000000000000, 0xc000000000000040, 0xfffeffff3fffffff, x1, 16, x3)

inst_22:
// rs1==x28, rs2==x10, rd==x19, rs2_w1_val == -32769, rs1_w1_val == -32769
// opcode: smtt32 ; op1:x28; op2:x10; dest:x19; op1val:0xffff7fff00000003;  op2val:0xffff7fffffffffdf
TEST_RR_OP(smtt32, x19, x28, x10, 0x0000000000000000, 0xffff7fff00000003, 0xffff7fffffffffdf, x1, 24, x3)

inst_23:
// rs1==x10, rs2==x31, rd==x28, rs2_w1_val == -16385, rs1_w0_val == -8193, rs1_w1_val == -16777217, rs2_w0_val == 134217728
// opcode: smtt32 ; op1:x10; op2:x31; dest:x28; op1val:0xfeffffffffffdfff;  op2val:0xffffbfff08000000
TEST_RR_OP(smtt32, x28, x10, x31, 0x0000000000000000, 0xfeffffffffffdfff, 0xffffbfff08000000, x1, 32, x3)

inst_24:
// rs1==x23, rs2==x6, rd==x20, rs2_w1_val == -4097, rs1_w0_val == 16, rs1_w1_val == -257
// opcode: smtt32 ; op1:x23; op2:x6; dest:x20; op1val:0xfffffeff00000010;  op2val:0xffffeffffffffff8
TEST_RR_OP(smtt32, x20, x23, x6, 0x0000000000000000, 0xfffffeff00000010, 0xffffeffffffffff8, x1, 40, x3)

inst_25:
// rs1==x30, rs2==x21, rd==x14, rs2_w1_val == -2049, rs2_w0_val == 2, rs1_w1_val == 4096, rs1_w0_val == -9
// opcode: smtt32 ; op1:x30; op2:x21; dest:x14; op1val:0x001000fffffff7;  op2val:0xfffff7ff00000002
TEST_RR_OP(smtt32, x14, x30, x21, 0x0000000000000000, 0x001000fffffff7, 0xfffff7ff00000002, x1, 48, x3)

inst_26:
// rs1==x27, rs2==x14, rd==x2, rs2_w1_val == -1025, rs1_w0_val == 128
// opcode: smtt32 ; op1:x27; op2:x14; dest:x2; op1val:0xfffffdff00000080;  op2val:0xfffffbfffffffff9
TEST_RR_OP(smtt32, x2, x27, x14, 0x0000000000000000, 0xfffffdff00000080, 0xfffffbfffffffff9, x1, 56, x3)

inst_27:
// rs1==x26, rs2==x20, rd==x18, rs2_w1_val == -513, rs1_w0_val == -3, rs2_w0_val == 268435456
// opcode: smtt32 ; op1:x26; op2:x20; dest:x18; op1val:0xfffffbfffffffffd;  op2val:0xfffffdff10000000
TEST_RR_OP(smtt32, x18, x26, x20, 0x0000000000000000, 0xfffffbfffffffffd, 0xfffffdff10000000, x1, 64, x3)

inst_28:
// rs1==x17, rs2==x13, rd==x23, rs2_w1_val == -257, rs1_w0_val == -129, rs2_w0_val == -8193, rs1_w1_val == 128
// opcode: smtt32 ; op1:x17; op2:x13; dest:x23; op1val:0x000080ffffff7f;  op2val:0xfffffeffffffdfff
TEST_RR_OP(smtt32, x23, x17, x13, 0x0000000000000000, 0x000080ffffff7f, 0xfffffeffffffdfff, x1, 72, x3)

inst_29:
// rs1==x15, rs2==x30, rd==x8, rs2_w1_val == -129, rs2_w0_val == 512, rs1_w0_val == 1431655765, rs1_w1_val == 2
// opcode: smtt32 ; op1:x15; op2:x30; dest:x8; op1val:0x00000255555555;  op2val:0xffffff7f00000200
TEST_RR_OP(smtt32, x8, x15, x30, 0x0000000000000000, 0x00000255555555, 0xffffff7f00000200, x1, 80, x3)

inst_30:
// rs1==x13, rs2==x27, rd==x9, rs2_w1_val == -65, rs1_w1_val == 1073741824, rs2_w0_val == 32768
// opcode: smtt32 ; op1:x13; op2:x27; dest:x9; op1val:0x40000000fffffffc;  op2val:0xffffffbf00008000
TEST_RR_OP(smtt32, x9, x13, x27, 0x0000000000000000, 0x40000000fffffffc, 0xffffffbf00008000, x1, 88, x3)

inst_31:
// rs1==x21, rs2==x18, rd==x25, rs2_w1_val == -33, rs2_w0_val == -1073741825
// opcode: smtt32 ; op1:x21; op2:x18; dest:x25; op1val:0xbfffffffffffefff;  op2val:0xffffffdfbfffffff
TEST_RR_OP(smtt32, x25, x21, x18, 0x0000000000000000, 0xbfffffffffffefff, 0xffffffdfbfffffff, x1, 96, x3)

inst_32:
// rs2_w1_val == -17, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000009;  op2val:0xffffffef00200000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000009, 0xffffffef00200000, x1, 104, x3)

inst_33:
// rs2_w1_val == -9, rs2_w0_val == -1431655766, rs1_w1_val == 67108864
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000ffffefff;  op2val:0xfffffff7aaaaaaaa
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x4000000ffffefff, 0xfffffff7aaaaaaaa, x1, 112, x3)

inst_34:
// rs2_w1_val == -5, rs2_w0_val == 1431655765
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffffff7;  op2val:0xfffffffb55555555
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffffff7, 0xfffffffb55555555, x1, 120, x3)

inst_35:
// rs2_w1_val == -3, rs1_w1_val == 0, rs1_w0_val == -65537, rs2_w0_val == 8
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffeffff;  op2val:0xfffffffd00000008
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x000000fffeffff, 0xfffffffd00000008, x1, 128, x3)

inst_36:
// rs2_w1_val == -2, rs1_w0_val == 512, rs2_w0_val == -2147483648
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000200;  op2val:0xfffffffe80000000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000200, 0xfffffffe80000000, x1, 136, x3)

inst_37:
// rs2_w1_val == -2147483648, rs1_w1_val == -16385, rs2_w0_val == -8388609
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00002000;  op2val:0x80000000ff7fffff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00002000, 0x80000000ff7fffff, x1, 144, x3)

inst_38:
// rs2_w1_val == 1073741824, rs1_w0_val == 1073741824
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff40000000;  op2val:0x4000000000000001
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffffdff40000000, 0x4000000000000001, x1, 152, x3)

inst_39:
// rs2_w1_val == 536870912, rs2_w0_val == -3, rs1_w1_val == 4
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004fffffffc;  op2val:0x20000000fffffffd
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x000004fffffffc, 0x20000000fffffffd, x1, 160, x3)

inst_40:
// rs2_w1_val == 268435456, rs1_w1_val == -1, rs1_w0_val == 524288, rs2_w0_val == -9
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00080000;  op2val:0x10000000fffffff7
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xffffffff00080000, 0x10000000fffffff7, x1, 168, x3)

inst_41:
// rs2_w1_val == 134217728, rs2_w0_val == -257, rs1_w1_val == 524288, rs1_w0_val == -268435457
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000efffffff;  op2val:0x8000000fffffeff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x080000efffffff, 0x8000000fffffeff, x1, 176, x3)

inst_42:
// rs2_w1_val == 67108864, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffdfffff;  op2val:0x4000000fffffeff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffffeffffdfffff, 0x4000000fffffeff, x1, 184, x3)

inst_43:
// rs2_w1_val == 33554432, rs2_w0_val == 262144
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8ff7fffff;  op2val:0x200000000040000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffffff8ff7fffff, 0x200000000040000, x1, 192, x3)

inst_44:
// rs2_w1_val == 16777216, rs1_w1_val == 16777216
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000002000;  op2val:0x100000000000200
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x100000000002000, 0x100000000000200, x1, 200, x3)

inst_45:
// rs2_w1_val == 8388608, rs1_w0_val == -2, rs2_w0_val == -536870913
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffffffe;  op2val:0x800000dfffffff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffffffe, 0x800000dfffffff, x1, 208, x3)

inst_46:
// rs2_w1_val == 4194304, rs2_w0_val == 64, rs1_w0_val == -16385
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffaffffbfff;  op2val:0x40000000000040
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffffffaffffbfff, 0x40000000000040, x1, 216, x3)

inst_47:
// rs2_w1_val == 2097152, rs2_w0_val == -65537, rs1_w1_val == 1
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000110000000;  op2val:0x200000fffeffff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x00000110000000, 0x200000fffeffff, x1, 224, x3)

inst_48:
// rs2_w1_val == 524288, rs2_w0_val == 16777216, rs1_w1_val == 262144, rs1_w0_val == -524289
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000fff7ffff;  op2val:0x08000001000000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x040000fff7ffff, 0x08000001000000, x1, 232, x3)

inst_49:
// rs2_w1_val == 262144, rs1_w1_val == -2097153, rs1_w0_val == 4194304
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00400000;  op2val:0x04000055555555
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00400000, 0x04000055555555, x1, 240, x3)

inst_50:
// rs2_w1_val == 131072, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffff7fff;  op2val:0x02000000020000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x000008ffff7fff, 0x02000000020000, x1, 248, x3)

inst_51:
// rs2_w1_val == 65536, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000200000;  op2val:0x01000000000007
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xc000000000200000, 0x01000000000007, x1, 256, x3)

inst_52:
// rs1_w0_val == 33554432, rs1_w1_val == -9, rs2_w1_val == 2
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff702000000;  op2val:0x000002ffffffef
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffffff702000000, 0x000002ffffffef, x1, 264, x3)

inst_53:
// rs1_w0_val == 8388608, rs2_w1_val == 64, rs1_w1_val == 131072
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000800000;  op2val:0x000040fffffffc
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x02000000800000, 0x000040fffffffc, x1, 272, x3)

inst_54:
// rs1_w0_val == 1048576, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000100000;  op2val:0xffff7fff00200000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x02000000100000, 0xffff7fff00200000, x1, 280, x3)

inst_55:
// rs1_w0_val == 262144, rs2_w0_val == 256, rs1_w1_val == -1431655766
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00040000;  op2val:0xfffbffff00000100
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00040000, 0xfffbffff00000100, x1, 288, x3)

inst_56:
// rs1_w0_val == 131072, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900020000;  op2val:0xfffffbfffffffffd
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x00000900020000, 0xfffffbfffffffffd, x1, 296, x3)

inst_57:
// rs1_w0_val == 65536, rs1_w1_val == -67108865, rs2_w0_val == -16385
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00010000;  op2val:0x000007ffffbfff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00010000, 0x000007ffffbfff, x1, 304, x3)

inst_58:
// rs1_w0_val == 32768, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00008000;  op2val:0xfbfffffffffffff6
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00008000, 0xfbfffffffffffff6, x1, 312, x3)

inst_59:
// rs1_w0_val == 16384, rs1_w1_val == 8388608
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000004000;  op2val:0xfffdfffffffffff9
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x80000000004000, 0xfffdfffffffffff9, x1, 320, x3)

inst_60:
// rs1_w0_val == 4096, rs2_w0_val == 4194304
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200001000;  op2val:0x00000600400000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x00000200001000, 0x00000600400000, x1, 328, x3)

inst_61:
// rs1_w0_val == 2048, rs2_w0_val == -513
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500000800;  op2val:0xaaaaaaaafffffdff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x00000500000800, 0xaaaaaaaafffffdff, x1, 336, x3)

inst_62:
// rs1_w0_val == 256, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000100;  op2val:0x2000000c0000000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x04000000000100, 0x2000000c0000000, x1, 344, x3)

inst_63:
// rs1_w0_val == 32, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000020;  op2val:0x55555555bfffffff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x00000400000020, 0x55555555bfffffff, x1, 352, x3)

inst_64:
// rs1_w0_val == 8, rs2_w0_val == -4097
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000008;  op2val:0xfffffff6ffffefff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x04000000000008, 0xfffffff6ffffefff, x1, 360, x3)

inst_65:
// rs1_w0_val == 4, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00000004;  op2val:0xffffbffffffffffc
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000004, 0xffffbffffffffffc, x1, 368, x3)

inst_66:
// rs1_w0_val == 2, rs1_w1_val == -8193
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000002;  op2val:0xfffffffcffffffef
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000002, 0xfffffffcffffffef, x1, 376, x3)

inst_67:
// rs1_w0_val == 1, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000001;  op2val:0xdfffffff80000000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000001, 0xdfffffff80000000, x1, 384, x3)

inst_68:
// rs1_w0_val == 0, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000000;  op2val:0x4000000ffffdfff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000000, 0x4000000ffffdfff, x1, 392, x3)

inst_69:
// rs1_w0_val == -1, rs1_w1_val == -262145
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffffff;  op2val:0x3ffffffffffffdff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffffff, 0x3ffffffffffffdff, x1, 400, x3)

inst_70:
// rs2_w1_val == 32768, rs1_w1_val == -8388609
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff3fffffff;  op2val:0x008000fffffffd
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xff7fffff3fffffff, 0x008000fffffffd, x1, 408, x3)

inst_71:
// rs2_w1_val == 16384, rs1_w0_val == -4194305
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffbfffff;  op2val:0x004000fffffeff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x001000ffbfffff, 0x004000fffffeff, x1, 416, x3)

inst_72:
// rs2_w1_val == 8192, rs1_w0_val == -257
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffeff;  op2val:0x002000fffbffff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffeff, 0x002000fffbffff, x1, 424, x3)

inst_73:
// rs2_w1_val == 4096, rs2_w0_val == 67108864
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000055555555;  op2val:0x00100004000000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x04000055555555, 0x00100004000000, x1, 432, x3)

inst_74:
// rs2_w1_val == 2048, rs2_w0_val == -33554433
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000010;  op2val:0x000800fdffffff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffffff800000010, 0x000800fdffffff, x1, 440, x3)

inst_75:
// rs2_w1_val == 1024, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000040;  op2val:0x000400dfffffff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000040, 0x000400dfffffff, x1, 448, x3)

inst_76:
// rs2_w1_val == 512, rs1_w0_val == -536870913
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffdfffffff;  op2val:0x00020000000100
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x3fffffffdfffffff, 0x00020000000100, x1, 456, x3)

inst_77:
// rs2_w1_val == 256, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffffefff;  op2val:0x00010000000006
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xffff7fffffffefff, 0x00010000000006, x1, 464, x3)

inst_78:
// rs2_w1_val == 128, rs1_w0_val == -134217729
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffff7ffffff;  op2val:0x000080fffffffe
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfbfffffff7ffffff, 0x000080fffffffe, x1, 472, x3)

inst_79:
// rs2_w1_val == 32, rs2_w0_val == 0
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900000007;  op2val:0x00002000000000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffffff900000007, 0x00002000000000, x1, 480, x3)

inst_80:
// rs2_w1_val == 16, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000020;  op2val:0x000010fffffff7
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000020, 0x000010fffffff7, x1, 488, x3)

inst_81:
// rs2_w1_val == 8, rs2_w0_val == -1025, rs1_w1_val == 16
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000004000;  op2val:0x000008fffffbff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x00001000004000, 0x000008fffffbff, x1, 496, x3)

inst_82:
// rs2_w1_val == 4, rs1_w1_val == 65536
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000009;  op2val:0x000004ffffffef
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x01000000000009, 0x000004ffffffef, x1, 504, x3)

inst_83:
// rs2_w1_val == 1, rs1_w1_val == -4097, rs2_w0_val == 16
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff04000000;  op2val:0x00000100000010
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xffffefff04000000, 0x00000100000010, x1, 512, x3)

inst_84:
// rs2_w1_val == 0, rs1_w0_val == -1025
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffffbff;  op2val:0x00000000000200
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x010000fffffbff, 0x00000000000200, x1, 520, x3)

inst_85:
// rs2_w1_val == -1, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00010000;  op2val:0xffffffffaaaaaaaa
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00010000, 0xffffffffaaaaaaaa, x1, 528, x3)

inst_86:
// rs2_w0_val == 2147483647, rs1_w0_val == -1073741825
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffbfffffff;  op2val:0xfffeffff7fffffff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfeffffffbfffffff, 0xfffeffff7fffffff, x1, 536, x3)

inst_87:
// rs2_w0_val == -268435457, rs1_w0_val == -5
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffffb;  op2val:0x000007efffffff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x4000000fffffffb, 0x000007efffffff, x1, 544, x3)

inst_88:
// rs2_w0_val == 65536, rs1_w1_val == -33554433
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000003;  op2val:0xffdfffff00010000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000003, 0xffdfffff00010000, x1, 552, x3)

inst_89:
// rs2_w0_val == 8192, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffdfffff;  op2val:0x04000000002000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfdffffffffdfffff, 0x04000000002000, x1, 560, x3)

inst_90:
// rs2_w0_val == 4096, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000004000000;  op2val:0xffffffef00001000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x02000004000000, 0xffffffef00001000, x1, 568, x3)

inst_91:
// rs2_w0_val == 2048, rs1_w1_val == 33554432
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000009;  op2val:0xfffffffd00000800
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x200000000000009, 0xfffffffd00000800, x1, 576, x3)

inst_92:
// rs2_w0_val == -1, rs1_w0_val == -16777217, rs1_w1_val == 256
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100feffffff;  op2val:0x080000ffffffff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x000100feffffff, 0x080000ffffffff, x1, 584, x3)

inst_93:
// rs1_w1_val == 1431655765, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fffbffff;  op2val:0x2000000010000000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x55555555fffbffff, 0x2000000010000000, x1, 592, x3)

inst_94:
// rs1_w1_val == 2147483647, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffffffffc;  op2val:0xfffffffd00000800
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x7ffffffffffffffc, 0xfffffffd00000800, x1, 600, x3)

inst_95:
// rs1_w1_val == -536870913, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00800000;  op2val:0x008000aaaaaaaa
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00800000, 0x008000aaaaaaaa, x1, 608, x3)

inst_96:
// rs1_w1_val == -134217729, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff80000000;  op2val:0x00080000000020
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff80000000, 0x00080000000020, x1, 616, x3)

inst_97:
// rs1_w1_val == -4194305, rs2_w0_val == -4194305
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffbfffff;  op2val:0x000008ffbfffff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xffbfffffffbfffff, 0x000008ffbfffff, x1, 624, x3)

inst_98:
// rs1_w1_val == -524289, rs2_w0_val == -2049
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffbffff;  op2val:0xfffffff7fffff7ff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffbffff, 0xfffffff7fffff7ff, x1, 632, x3)

inst_99:
// rs1_w1_val == -65537, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000006;  op2val:0xfbffffff00000001
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000006, 0xfbffffff00000001, x1, 640, x3)

inst_100:
// rs1_w1_val == -65, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00008000;  op2val:0x00000104000000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00008000, 0x00000104000000, x1, 648, x3)

inst_101:
// rs1_w1_val == -17, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffffffe;  op2val:0x100000ffffefff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xffffffeffffffffe, 0x100000ffffefff, x1, 656, x3)

inst_102:
// rs1_w1_val == -5, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00800000;  op2val:0xff7fffff00010000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00800000, 0xff7fffff00010000, x1, 664, x3)

inst_103:
// rs1_w1_val == -3, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000009;  op2val:0x000400ffffffef
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000009, 0x000400ffffffef, x1, 672, x3)

inst_104:
// rs1_w1_val == -2, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffffffa;  op2val:0xfffffffb00000400
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffffffefffffffa, 0xfffffffb00000400, x1, 680, x3)

inst_105:
// rs1_w1_val == -2147483648, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000002;  op2val:0xbfffffff00000001
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x8000000000000002, 0xbfffffff00000001, x1, 688, x3)

inst_106:
// rs1_w1_val == 536870912, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffbffff;  op2val:0x02000000000400
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x20000000fffbffff, 0x02000000000400, x1, 696, x3)

inst_107:
// rs1_w1_val == 134217728, rs1_w0_val == 134217728
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000008000000;  op2val:0xfffffffbfffffff7
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x800000008000000, 0xfffffffbfffffff7, x1, 704, x3)

inst_108:
// rs1_w1_val == 4194304, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000003;  op2val:0x000005fffffff9
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x40000000000003, 0x000005fffffff9, x1, 712, x3)

inst_109:
// rs1_w1_val == 2097152, rs1_w0_val == -17
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000ffffffef;  op2val:0x55555555fffffff8
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x200000ffffffef, 0x55555555fffffff8, x1, 720, x3)

inst_110:
// rs1_w1_val == 1048576, rs1_w0_val == -1431655766
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000aaaaaaaa;  op2val:0xfffffeff00000400
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x100000aaaaaaaa, 0xfffffeff00000400, x1, 728, x3)

inst_111:
// rs1_w1_val == 16384, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x0040003fffffff;  op2val:0xfffdfffffffffdff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x0040003fffffff, 0xfffdfffffffffdff, x1, 736, x3)

inst_112:
// rs1_w1_val == 8192, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200001000000;  op2val:0x000080fffffff6
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x00200001000000, 0x000080fffffff6, x1, 744, x3)

inst_113:
// rs1_w1_val == 2048, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000010;  op2val:0x00000300001000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x00080000000010, 0x00000300001000, x1, 752, x3)

inst_114:
// rs1_w1_val == 1024, rs2_w0_val == 524288
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400f7ffffff;  op2val:0x01000000080000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x000400f7ffffff, 0x01000000080000, x1, 760, x3)

inst_115:
// rs1_w1_val == 512, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200fffffeff;  op2val:0xaaaaaaaa00040000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x000200fffffeff, 0xaaaaaaaa00040000, x1, 768, x3)

inst_116:
// rs1_w1_val == 32, rs2_w0_val == -32769
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000010;  op2val:0xfffffffeffff7fff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x00002000000010, 0xfffffffeffff7fff, x1, 776, x3)

inst_117:
// rs2_w0_val == -134217729, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000100;  op2val:0xffffffdff7ffffff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x00020000000100, 0xffffffdff7ffffff, x1, 784, x3)

inst_118:
// rs2_w0_val == -67108865, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9fff7ffff;  op2val:0x000080fbffffff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffffff9fff7ffff, 0x000080fbffffff, x1, 792, x3)

inst_119:
// rs2_w0_val == -16777217, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffff7;  op2val:0x200000feffffff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfefffffffffffff7, 0x200000feffffff, x1, 800, x3)

inst_120:
// rs1_w0_val == 2147483647, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000807fffffff;  op2val:0xfffffffafffffbff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x0000807fffffff, 0xfffffffafffffbff, x1, 808, x3)

inst_121:
// rs2_w0_val == -2097153, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200100000;  op2val:0xfffffdffffdfffff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x00000200100000, 0xfffffdffffdfffff, x1, 816, x3)

inst_122:
// rs2_w0_val == -1048577, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffbffff;  op2val:0xefffffffffefffff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x008000fffbffff, 0xefffffffffefffff, x1, 824, x3)

inst_123:
// rs1_w0_val == -67108865, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fbffffff;  op2val:0x000008aaaaaaaa
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x40000000fbffffff, 0x000008aaaaaaaa, x1, 832, x3)

inst_124:
// rs2_w0_val == -131073, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005dfffffff;  op2val:0xfdfffffffffdffff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x000005dfffffff, 0xfdfffffffffdffff, x1, 840, x3)

inst_125:
// rs1_w0_val == -33554433, rs2_w0_val == -65
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fdffffff;  op2val:0x3fffffffffffffbf
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x10000000fdffffff, 0x3fffffffffffffbf, x1, 848, x3)

inst_126:
// rs1_w0_val == -1048577, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003ffefffff;  op2val:0x002000ffffefff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x000003ffefffff, 0x002000ffffefff, x1, 856, x3)

inst_127:
// rs2_w0_val == -129, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffffffff6;  op2val:0xfffffffeffffff7f
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffffff6, 0xfffffffeffffff7f, x1, 864, x3)

inst_128:
// rs1_w0_val == -2049, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffff7ff;  op2val:0xffff7ffffffffff6
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xdffffffffffff7ff, 0xffff7ffffffffff6, x1, 872, x3)

inst_129:
// rs2_w0_val == -5, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffbfffffff;  op2val:0x002000fffffffb
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xffefffffbfffffff, 0x002000fffffffb, x1, 880, x3)

inst_130:
// rs1_w0_val == -513, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffffdff;  op2val:0x4000000000001000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x002000fffffdff, 0x4000000000001000, x1, 888, x3)

inst_131:
// rs2_w0_val == 1073741824, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000004;  op2val:0xdfffffff40000000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x01000000000004, 0xdfffffff40000000, x1, 896, x3)

inst_132:
// rs1_w0_val == -65, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9ffffffbf;  op2val:0x1000000ffffffdf
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffffff9ffffffbf, 0x1000000ffffffdf, x1, 904, x3)

inst_133:
// rs1_w0_val == 536870912, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff20000000;  op2val:0x400000000040000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffbffff20000000, 0x400000000040000, x1, 912, x3)

inst_134:
// rs2_w0_val == 536870912, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffffa;  op2val:0x08000020000000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffffa, 0x08000020000000, x1, 920, x3)

inst_135:
// rs2_w0_val == 1048576, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x002000ffffff7f;  op2val:0x08000000100000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x002000ffffff7f, 0x08000000100000, x1, 928, x3)

inst_136:
// rs2_w0_val == -524289, 
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x0040003fffffff;  op2val:0x100000fff7ffff
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x0040003fffffff, 0x100000fff7ffff, x1, 936, x3)

inst_137:
// rs1_w1_val == rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val == -2097153, rs1_w1_val == -131073, rs2_w0_val == 1, rs2_w1_val == -131073
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffdfffff;  op2val:0xfffdffff00000001
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0xfffdffffffdfffff, 0xfffdffff00000001, x1, 944, x3)

inst_138:
// rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 8, rs2_w0_val == 16384
// opcode: smtt32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008c0000000;  op2val:0x5555555500004000
TEST_RR_OP(smtt32, x31, x30, x29, 0x0000000000000000, 0x000008c0000000, 0x5555555500004000, x1, 952, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 120*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
