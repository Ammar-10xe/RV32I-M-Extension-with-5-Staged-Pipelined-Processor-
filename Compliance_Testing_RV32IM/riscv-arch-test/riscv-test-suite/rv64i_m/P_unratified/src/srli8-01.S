
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srli8 instruction of the RISC-V RV64PZicsr extension for the srli8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srli8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd, rs1==x24, rd==x24, rs1_b0_val == 0, imm_val == 0, rs1_b7_val == 255
// opcode: srli8 ; op1:x24; dest:x24; op1val:0xff060b05110a0a00;  immval:0x0
TEST_IMM_OP( srli8, x24, x24, 0x0000000000000000, 0xff060b05110a0a00, 0x0, x7, 0, x8)

inst_1:
// rs1 != rd, rs1==x9, rd==x31, imm_val == 7, rs1_b3_val == 16, rs1_b4_val == 247, rs1_b1_val == 16, rs1_b5_val == 170, rs1_b0_val == 170
// opcode: srli8 ; op1:x9; dest:x31; op1val:0x70faaf7100910aa;  immval:0x7
TEST_IMM_OP( srli8, x31, x9, 0x0000000000000000, 0x70faaf7100910aa, 0x7, x7, 8, x8)

inst_2:
// rs1==x25, rd==x29, imm_val == 6, rs1_b5_val == 4, rs1_b3_val == 254, rs1_b1_val == 32, rs1_b2_val == 251, rs1_b4_val == 1, rs1_b0_val == 127
// opcode: srli8 ; op1:x25; dest:x29; op1val:0xa090401fefb207f;  immval:0x6
TEST_IMM_OP( srli8, x29, x25, 0x0000000000000000, 0xa090401fefb207f, 0x6, x7, 16, x8)

inst_3:
// rs1==x14, rd==x30, imm_val == 5, rs1_b6_val == 191, rs1_b3_val == 4, rs1_b7_val == 251, rs1_b1_val == 1, rs1_b5_val == 32
// opcode: srli8 ; op1:x14; dest:x30; op1val:0xfbbf2003040e0100;  immval:0x5
TEST_IMM_OP( srli8, x30, x14, 0x0000000000000000, 0xfbbf2003040e0100, 0x5, x7, 24, x8)

inst_4:
// rs1==x28, rd==x19, imm_val == 4, rs1_b7_val == 253, rs1_b6_val == 8, rs1_b2_val == 4, rs1_b3_val == 2
// opcode: srli8 ; op1:x28; dest:x19; op1val:0xfd08110702040d12;  immval:0x4
TEST_IMM_OP( srli8, x19, x28, 0x0000000000000000, 0xfd08110702040d12, 0x4, x7, 32, x8)

inst_5:
// rs1==x1, rd==x27, imm_val == 3, rs1_b4_val == 254
// opcode: srli8 ; op1:x1; dest:x27; op1val:0xa1309fe05fb0d0a;  immval:0x3
TEST_IMM_OP( srli8, x27, x1, 0x0000000000000000, 0xa1309fe05fb0d0a, 0x3, x7, 40, x8)

inst_6:
// rs1==x11, rd==x1, imm_val == 2, rs1_b1_val == 4, rs1_b6_val == 223, rs1_b7_val == 127, rs1_b0_val == 254
// opcode: srli8 ; op1:x11; dest:x1; op1val:0x7fdf0f0bfe0d04fe;  immval:0x2
TEST_IMM_OP( srli8, x1, x11, 0x0000000000000000, 0x7fdf0f0bfe0d04fe, 0x2, x7, 48, x8)

inst_7:
// rs1==x5, rd==x10, imm_val == 1, rs1_b4_val == 0, rs1_b5_val == 85, rs1_b0_val == 191, rs1_b6_val == 128
// opcode: srli8 ; op1:x5; dest:x10; op1val:0x38055000b050abf;  immval:0x1
TEST_IMM_OP( srli8, x10, x5, 0x0000000000000000, 0x38055000b050abf, 0x1, x7, 56, x8)

inst_8:
// rs1==x30, rd==x25, rs1_b7_val == 170, rs1_b5_val == 239
// opcode: srli8 ; op1:x30; dest:x25; op1val:0xaa07ef0e030e0912;  immval:0x3
TEST_IMM_OP( srli8, x25, x30, 0x0000000000000000, 0xaa07ef0e030e0912, 0x3, x7, 64, x8)

inst_9:
// rs1==x12, rd==x6, rs1_b7_val == 85, rs1_b1_val == 127, rs1_b5_val == 0, rs1_b2_val == 1, rs1_b3_val == 247
// opcode: srli8 ; op1:x12; dest:x6; op1val:0x550b00f7f7017ffe;  immval:0x2
TEST_IMM_OP( srli8, x6, x12, 0x0000000000000000, 0x550b00f7f7017ffe, 0x2, x7, 72, x8)

inst_10:
// rs1==x17, rd==x26, rs1_b7_val == 191, rs1_b6_val == 0, rs1_b5_val == 255, rs1_b3_val == 64, rs1_b2_val == 170
// opcode: srli8 ; op1:x17; dest:x26; op1val:0xbf00ff0740aa0303;  immval:0x5
TEST_IMM_OP( srli8, x26, x17, 0x0000000000000000, 0xbf00ff0740aa0303, 0x5, x7, 80, x8)

inst_11:
// rs1==x10, rd==x20, rs1_b7_val == 223, rs1_b3_val == 255, rs1_b1_val == 0
// opcode: srli8 ; op1:x10; dest:x20; op1val:0xdf0c0e0fff050007;  immval:0x1
TEST_IMM_OP( srli8, x20, x10, 0x0000000000000000, 0xdf0c0e0fff050007, 0x1, x7, 88, x8)

inst_12:
// rs1==x21, rd==x9, rs1_b7_val == 239, rs1_b1_val == 255, rs1_b4_val == 4, rs1_b0_val == 1
// opcode: srli8 ; op1:x21; dest:x9; op1val:0xef800d04400fff01;  immval:0x7
TEST_IMM_OP( srli8, x9, x21, 0x0000000000000000, 0xef800d04400fff01, 0x7, x7, 96, x8)

inst_13:
// rs1==x22, rd==x17, rs1_b7_val == 247, rs1_b2_val == 253
// opcode: srli8 ; op1:x22; dest:x17; op1val:0xf70b0f0502fd0401;  immval:0x6
TEST_IMM_OP( srli8, x17, x22, 0x0000000000000000, 0xf70b0f0502fd0401, 0x6, x7, 104, x8)

inst_14:
// rs1==x19, rd==x18, rs1_b7_val == 254, rs1_b2_val == 64, rs1_b5_val == 191, rs1_b3_val == 32, rs1_b6_val == 1
// opcode: srli8 ; op1:x19; dest:x18; op1val:0xfe01bf1120400b13;  immval:0x7
TEST_IMM_OP( srli8, x18, x19, 0x0000000000000000, 0xfe01bf1120400b13, 0x7, x7, 112, x8)

inst_15:
// rs1==x20, rd==x3, rs1_b7_val == 128, rs1_b0_val == 255, rs1_b4_val == 239, rs1_b3_val == 85, rs1_b1_val == 247
// opcode: srli8 ; op1:x20; dest:x3; op1val:0x80050eef550ef7ff;  immval:0x1
TEST_IMM_OP( srli8, x3, x20, 0x0000000000000000, 0x80050eef550ef7ff, 0x1, x7, 120, x8)

inst_16:
// rs1==x27, rd==x5, rs1_b7_val == 64, rs1_b5_val == 223, rs1_b1_val == 239
// opcode: srli8 ; op1:x27; dest:x5; op1val:0x4013df0bfefdef00;  immval:0x0
TEST_IMM_OP( srli8, x5, x27, 0x0000000000000000, 0x4013df0bfefdef00, 0x0, x7, 128, x8)

inst_17:
// rs1==x4, rd==x11, rs1_b7_val == 32, rs1_b0_val == 32
// opcode: srli8 ; op1:x4; dest:x11; op1val:0x200a0a06feaa0a20;  immval:0x4
TEST_IMM_OP( srli8, x11, x4, 0x0000000000000000, 0x200a0a06feaa0a20, 0x4, x7, 136, x8)

inst_18:
// rs1==x2, rd==x16, rs1_b7_val == 16, rs1_b4_val == 16, rs1_b5_val == 8, rs1_b6_val == 127
// opcode: srli8 ; op1:x2; dest:x16; op1val:0x107f081010fbff0b;  immval:0x6
TEST_IMM_OP( srli8, x16, x2, 0x0000000000000000, 0x107f081010fbff0b, 0x6, x7, 144, x8)

inst_19:
// rs1==x6, rd==x22, rs1_b7_val == 8, rs1_b2_val == 191, rs1_b4_val == 223
// opcode: srli8 ; op1:x6; dest:x22; op1val:0x80a05df06bf0013;  immval:0x4
TEST_IMM_OP( srli8, x22, x6, 0x0000000000000000, 0x80a05df06bf0013, 0x4, x7, 152, x8)

inst_20:
// rs1==x13, rd==x0, rs1_b7_val == 4, rs1_b6_val == 16, rs1_b4_val == 170
// opcode: srli8 ; op1:x13; dest:x0; op1val:0x41020aa020605ff;  immval:0x2
TEST_IMM_OP( srli8, x0, x13, 0x0000000000000000, 0x41020aa020605ff, 0x2, x7, 160, x8)

inst_21:
// rs1==x26, rd==x12, rs1_b7_val == 2, 
// opcode: srli8 ; op1:x26; dest:x12; op1val:0x20e04ef13fb0013;  immval:0x2
TEST_IMM_OP( srli8, x12, x26, 0x0000000000000000, 0x20e04ef13fb0013, 0x2, x7, 168, x5)

inst_22:
// rs1==x29, rd==x4, rs1_b7_val == 1, 
// opcode: srli8 ; op1:x29; dest:x4; op1val:0x1090f0ffe1104aa;  immval:0x4
TEST_IMM_OP( srli8, x4, x29, 0x0000000000000000, 0x1090f0ffe1104aa, 0x4, x7, 176, x5)

inst_23:
// rs1==x18, rd==x21, rs1_b7_val == 0, rs1_b1_val == 64
// opcode: srli8 ; op1:x18; dest:x21; op1val:0x06050720064007;  immval:0x7
TEST_IMM_OP( srli8, x21, x18, 0x0000000000000000, 0x06050720064007, 0x7, x7, 184, x5)

inst_24:
// rs1==x16, rd==x28, rs1_b6_val == 170, rs1_b5_val == 1, rs1_b2_val == 128
// opcode: srli8 ; op1:x16; dest:x28; op1val:0x1aa01df02800f01;  immval:0x4
TEST_IMM_OP( srli8, x28, x16, 0x0000000000000000, 0x1aa01df02800f01, 0x4, x7, 192, x5)

inst_25:
// rs1==x8, rd==x23, rs1_b6_val == 85, rs1_b2_val == 127
// opcode: srli8 ; op1:x8; dest:x23; op1val:0x8555500097f1101;  immval:0x0
TEST_IMM_OP( srli8, x23, x8, 0x0000000000000000, 0x8555500097f1101, 0x0, x7, 200, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_26:
// rs1==x31, rd==x13, rs1_b6_val == 239, 
// opcode: srli8 ; op1:x31; dest:x13; op1val:0xaef0909200a0a0a;  immval:0x7
TEST_IMM_OP( srli8, x13, x31, 0x0000000000000000, 0xaef0909200a0a0a, 0x7, x1, 0, x5)

inst_27:
// rs1==x23, rd==x7, rs1_b6_val == 247, rs1_b4_val == 64
// opcode: srli8 ; op1:x23; dest:x7; op1val:0x3f71240120a070c;  immval:0x0
TEST_IMM_OP( srli8, x7, x23, 0x0000000000000000, 0x3f71240120a070c, 0x0, x1, 8, x5)

inst_28:
// rs1==x15, rd==x2, rs1_b6_val == 251, rs1_b2_val == 16, rs1_b0_val == 85
// opcode: srli8 ; op1:x15; dest:x2; op1val:0x8fb0340fe100d55;  immval:0x5
TEST_IMM_OP( srli8, x2, x15, 0x0000000000000000, 0x8fb0340fe100d55, 0x5, x1, 16, x5)

inst_29:
// rs1==x3, rd==x14, rs1_b6_val == 253, rs1_b4_val == 253
// opcode: srli8 ; op1:x3; dest:x14; op1val:0x4fd0dfd0c80040d;  immval:0x7
TEST_IMM_OP( srli8, x14, x3, 0x0000000000000000, 0x4fd0dfd0c80040d, 0x7, x1, 24, x5)

inst_30:
// rs1==x0, rd==x15, rs1_b6_val == 254, rs1_b1_val == 251
// opcode: srli8 ; op1:x0; dest:x15; op1val:0x8fe0b0f0bfdfbfe;  immval:0x2
TEST_IMM_OP( srli8, x15, x0, 0x0000000000000000, 0x8fe0b0f0bfdfbfe, 0x2, x1, 32, x5)

inst_31:
// rs1==x7, rd==x8, rs1_b6_val == 64, rs1_b2_val == 2
// opcode: srli8 ; op1:x7; dest:x8; op1val:0xa400eef11027f0a;  immval:0x1
TEST_IMM_OP( srli8, x8, x7, 0x0000000000000000, 0xa400eef11027f0a, 0x1, x1, 40, x5)

inst_32:
// rs1_b2_val == 0, rs1_b5_val == 247, rs1_b4_val == 127, rs1_b1_val == 8
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xaa0ef77f0d00087f;  immval:0x2
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0xaa0ef77f0d00087f, 0x2, x1, 48, x5)

inst_33:
// rs1_b1_val == 170, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x55070faaf7bfaa06;  immval:0x0
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x55070faaf7bfaa06, 0x0, x1, 56, x5)

inst_34:
// rs1_b1_val == 85, rs1_b2_val == 32, rs1_b3_val == 239
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x4ef200eef2055ff;  immval:0x4
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x4ef200eef2055ff, 0x4, x1, 64, x5)

inst_35:
// rs1_b1_val == 191, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xff7f0f0d0a07bf0a;  immval:0x2
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0xff7f0f0d0a07bf0a, 0x2, x1, 72, x5)

inst_36:
// rs1_b1_val == 223, rs1_b5_val == 251, rs1_b3_val == 0, rs1_b2_val == 85
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x40efb110055df00;  immval:0x6
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x40efb110055df00, 0x6, x1, 80, x5)

inst_37:
// rs1_b1_val == 253, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x7df12df02aafd06;  immval:0x3
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x7df12df02aafd06, 0x3, x1, 88, x5)

inst_38:
// rs1_b1_val == 254, rs1_b6_val == 4, rs1_b3_val == 223
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x5040140df55fe09;  immval:0x7
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x5040140df55fe09, 0x7, x1, 96, x5)

inst_39:
// rs1_b1_val == 128, rs1_b4_val == 8, rs1_b6_val == 255
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x1ff1208114080aa;  immval:0x3
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x1ff1208114080aa, 0x3, x1, 104, x5)

inst_40:
// rs1_b1_val == 2, rs1_b2_val == 247, rs1_b6_val == 32, rs1_b3_val == 128, rs1_b0_val == 253
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xc20200e80f702fd;  immval:0x3
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0xc20200e80f702fd, 0x3, x1, 112, x5)

inst_41:
// rs1_b0_val == 223, rs1_b5_val == 64
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x20fb40110402bfdf;  immval:0x5
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x20fb40110402bfdf, 0x5, x1, 120, x5)

inst_42:
// rs1_b0_val == 239, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xaa110e07200daaef;  immval:0x5
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0xaa110e07200daaef, 0x5, x1, 128, x5)

inst_43:
// rs1_b0_val == 247, rs1_b3_val == 191
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x4aaaa05bf0f0bf7;  immval:0x0
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x4aaaa05bf0f0bf7, 0x0, x1, 136, x5)

inst_44:
// rs1_b0_val == 251, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x10fe03df0e000efb;  immval:0x2
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x10fe03df0e000efb, 0x2, x1, 144, x5)

inst_45:
// rs1_b5_val == 2, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xfd0c020f550f1312;  immval:0x7
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0xfd0c020f550f1312, 0x7, x1, 152, x5)

inst_46:
// rs1_b4_val == 85, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x9200d550baa40fb;  immval:0x7
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x9200d550baa40fb, 0x7, x1, 160, x5)

inst_47:
// rs1_b4_val == 191, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x55bffbbf0e0e0b07;  immval:0x2
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x55bffbbf0e0e0b07, 0x2, x1, 168, x5)

inst_48:
// rs1_b4_val == 251, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xabf05fb11aa090a;  immval:0x0
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0xabf05fb11aa090a, 0x0, x1, 176, x5)

inst_49:
// rs1_b4_val == 128, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x7fd008080050511;  immval:0x1
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x7fd008080050511, 0x1, x1, 184, x5)

inst_50:
// rs1_b4_val == 32, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xeaa0820ff110aaa;  immval:0x4
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0xeaa0820ff110aaa, 0x4, x1, 192, x5)

inst_51:
// rs1_b4_val == 2, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xef400a0211400700;  immval:0x7
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0xef400a0211400700, 0x7, x1, 200, x5)

inst_52:
// rs1_b4_val == 255, rs1_b5_val == 128
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x200580ff2007fb13;  immval:0x7
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x200580ff2007fb13, 0x7, x1, 208, x5)

inst_53:
// rs1_b3_val == 170, rs1_b0_val == 4
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xdfbf1212aa0d0b04;  immval:0x1
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0xdfbf1212aa0d0b04, 0x1, x1, 216, x5)

inst_54:
// rs1_b3_val == 127, rs1_b0_val == 64, rs1_b6_val == 2
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xdf020a037ffbff40;  immval:0x3
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0xdf020a037ffbff40, 0x3, x1, 224, x5)

inst_55:
// rs1_b0_val == 128, rs1_b2_val == 254
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xbf0d06bf00fedf80;  immval:0x4
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0xbf0d06bf00fedf80, 0x4, x1, 232, x5)

inst_56:
// rs1_b3_val == 251, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xdfff0a20fb12090c;  immval:0x0
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0xdfff0a20fb12090c, 0x0, x1, 240, x5)

inst_57:
// rs1_b3_val == 253, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x2006020dfd0e0203;  immval:0x6
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x2006020dfd0e0203, 0x6, x1, 248, x5)

inst_58:
// rs1_b0_val == 16, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x100d0d13aabffe10;  immval:0x0
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x100d0d13aabffe10, 0x0, x1, 256, x5)

inst_59:
// rs1_b0_val == 8, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x60a0c0a050a0208;  immval:0x6
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x60a0c0a050a0208, 0x6, x1, 264, x5)

inst_60:
// rs1_b0_val == 2, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x7fdf0faa120e0302;  immval:0x7
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x7fdf0faa120e0302, 0x7, x1, 272, x5)

inst_61:
// rs1_b3_val == 8, rs1_b5_val == 253
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xfffdfd04080cfb13;  immval:0x0
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0xfffdfd04080cfb13, 0x0, x1, 280, x5)

inst_62:
// rs1_b3_val == 1, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xdf060e080140aaf7;  immval:0x1
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0xdf060e080140aaf7, 0x1, x1, 288, x5)

inst_63:
// rs1_b2_val == 223, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xbffb0a13bfdf00ef;  immval:0x5
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0xbffb0a13bfdf00ef, 0x5, x1, 296, x5)

inst_64:
// rs1_b2_val == 239, rs1_b5_val == 127
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x55067ffe13ef1011;  immval:0x2
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x55067ffe13ef1011, 0x2, x1, 304, x5)

inst_65:
// rs1_b5_val == 254, rs1_b2_val == 8
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xfd0cfe06090840ff;  immval:0x3
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0xfd0cfe06090840ff, 0x3, x1, 312, x5)

inst_66:
// rs1_b5_val == 16, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x6111055000d80ff;  immval:0x2
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x6111055000d80ff, 0x2, x1, 320, x5)

inst_67:
// rs1_b2_val == 255, 
// opcode: srli8 ; op1:x30; dest:x31; op1val:0xc045500feff4080;  immval:0x4
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0xc045500feff4080, 0x4, x1, 328, x5)

inst_68:
// rs1_b7_val == 4, rs1_b6_val == 16, rs1_b4_val == 170
// opcode: srli8 ; op1:x30; dest:x31; op1val:0x41020aa020605ff;  immval:0x2
TEST_IMM_OP( srli8, x31, x30, 0x0000000000000000, 0x41020aa020605ff, 0x2, x1, 336, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 43*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
