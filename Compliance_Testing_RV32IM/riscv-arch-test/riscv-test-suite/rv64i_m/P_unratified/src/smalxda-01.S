
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smalxda instruction of the RISC-V RV64PZicsr extension for the smalxda covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smalxda)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 == rd != rs2, rs1==x30, rs2==x24, rd==x30, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val == 256, rs1_h2_val != rs2_h2_val, rs1_h1_val == 2048, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs2_h0_val == -9, rs2_h2_val == 512, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h3_val == -8193
// opcode: smalxda ; op1:x30; op2:x24; dest:x30; op1val:0xfff8010008008000;  op2val:0xdfff0200fff8fff7
TEST_P64_PNN_OP(smalxda, x30, $rd_hi, x30, x24, 0x0000000000000000, $correctval_hi, 0xfff8010008008000, 0xdfff0200fff8fff7, x5, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x11, rs2==x26, rd==x28, rs1_h3_val == rs2_h3_val, rs1_h1_val == -513, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h1_val == -257, rs1_h0_val == 64, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 8192, rs1_h2_val == -5
// opcode: smalxda ; op1:x11; op2:x26; dest:x28; op1val:0xc000fffbfdff0040;  op2val:0xc000fff6feff2000
TEST_P64_PNN_OP(smalxda, x28, $rd_hi, x11, x26, 0x0000000000000000, $correctval_hi, 0xc000fffbfdff0040, 0xc000fff6feff2000, x5, 16, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x23, rs2==x23, rd==x18, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h0_val == 16, rs1_h0_val == -9, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val == -21846, rs2_h1_val == -129, rs1_h2_val == -21846, rs2_h3_val == 512, rs1_h0_val < 0 and rs2_h0_val > 0
// opcode: smalxda ; op1:x23; op2:x23; dest:x18; op1val:0xaaaaaaaa0005fff7;  op2val:0x02000009ff7f0010
TEST_P64_PNN_OP(smalxda, x18, $rd_hi, x23, x23, 0x0000000000000000, $correctval_hi, 0xaaaaaaaa0005fff7, 0x02000009ff7f0010, x5, 32, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h1_val == -3, rs2_h3_val == -3, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h2_val == 4096, rs2_h0_val == -3, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 32767, rs2_h1_val == 16
// opcode: smalxda ; op1:x6; op2:x6; dest:x6; op1val:0x0003fff9fffd7fff;  op2val:0xfffd10000010fffd
TEST_P64_PNN_OP(smalxda, x6, $rd_hi, x6, x6, 0x0000000000000000, $correctval_hi, 0x0003fff9fffd7fff, 0xfffd10000010fffd, x5, 48, x3)

inst_4:
// rs2 == rd != rs1, rs1==x17, rs2==x2, rd==x2, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h3_val == 8192, rs2_h2_val == 8192, rs1_h0_val == 2, rs1_h1_val == -4097, rs2_h1_val == 2048, rs1_h3_val == 16384
// opcode: smalxda ; op1:x17; op2:x2; dest:x2; op1val:0x4000fff9efff0002;  op2val:0x2000200008000006
TEST_P64_PNN_OP(smalxda, x2, $rd_hi, x17, x2, 0x0000000000000000, $correctval_hi, 0x4000fff9efff0002, 0x2000200008000006, x5, 64, x3)

inst_5:
// rs1==x22, rs2==x20, rd==x10, rs1_h2_val == rs2_h2_val, rs2_h1_val == -1, rs1_h3_val == 8, rs2_h2_val == -2, rs1_h1_val == -8193, rs2_h0_val == 4096, rs1_h2_val == -2
// opcode: smalxda ; op1:x22; op2:x20; dest:x10; op1val:0x0008fffedfff0003;  op2val:0xfff8fffeffff1000
TEST_P64_PNN_OP(smalxda, x10, $rd_hi, x22, x20, 0x0000000000000000, $correctval_hi, 0x0008fffedfff0003, 0xfff8fffeffff1000, x5, 80, x3)

inst_6:
// rs1==x26, rs2==x15, rd==x4, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h1_val == 4, rs2_h2_val == -8193, rs1_h2_val == 2, rs1_h1_val == -2049, rs2_h3_val == 4, rs1_h0_val == -4097, rs2_h0_val == 256, rs1_h3_val == 4096
// opcode: smalxda ; op1:x26; op2:x15; dest:x4; op1val:0x10000002f7ffefff;  op2val:0x0004dfff00040100
TEST_P64_PNN_OP(smalxda, x4, $rd_hi, x26, x15, 0x0000000000000000, $correctval_hi, 0x10000002f7ffefff, 0x0004dfff00040100, x5, 96, x3)

inst_7:
// rs1==x27, rs2==x30, rd==x22, rs1_h1_val == rs2_h1_val, rs2_h0_val == 64, rs2_h3_val == -513, rs1_h2_val == 2048, rs1_h0_val == 2048, rs1_h3_val == -16385, rs1_h1_val == -129, rs2_h2_val == 8
// opcode: smalxda ; op1:x27; op2:x30; dest:x22; op1val:0xbfff0800ff7f0800;  op2val:0xfdff0008ff7f0040
TEST_P64_PNN_OP(smalxda, x22, $rd_hi, x27, x30, 0x0000000000000000, $correctval_hi, 0xbfff0800ff7f0800, 0xfdff0008ff7f0040, x5, 112, x3)

inst_8:
// rs1==x7, rs2==x4, rd==x14, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 4096, rs1_h0_val == 4096, rs1_h3_val == -65, rs2_h1_val == 1024, rs2_h0_val == 128
// opcode: smalxda ; op1:x7; op2:x4; dest:x14; op1val:0xffbf000710001000;  op2val:0xfffafffc04000080
TEST_P64_PNN_OP(smalxda, x14, $rd_hi, x7, x4, 0x0000000000000000, $correctval_hi, 0xffbf000710001000, 0xfffafffc04000080, x5, 128, x3)

inst_9:
// rs1==x1, rs2==x13, rd==x16, rs1_h0_val == rs2_h0_val, rs2_h0_val == -33, rs2_h3_val == 0, rs1_h0_val == -33
// opcode: smalxda ; op1:x1; op2:x13; dest:x16; op1val:0xfff6fffefff8ffdf;  op2val:0x0000fff80006ffdf
TEST_P64_PNN_OP(smalxda, x16, $rd_hi, x1, x13, 0x0000000000000000, $correctval_hi, 0xfff6fffefff8ffdf, 0x0000fff80006ffdf, x5, 144, x3)

inst_10:
// rs1==x24, rs2==x10, rd==x26, rs2_h3_val == -21846, rs1_h1_val == -32768, rs2_h0_val == -21846
// opcode: smalxda ; op1:x24; op2:x10; dest:x26; op1val:0x000708008000efff;  op2val:0xaaaa3ffffffcaaaa
TEST_P64_PNN_OP(smalxda, x26, $rd_hi, x24, x10, 0x0000000000000000, $correctval_hi, 0x000708008000efff, 0xaaaa3ffffffcaaaa, x5, 160, x3)

inst_11:
// rs1==x19, rs2==x28, rd==x20, rs2_h3_val == 21845, rs1_h2_val == -33, rs1_h0_val == 8, rs2_h1_val == 32767
// opcode: smalxda ; op1:x19; op2:x28; dest:x20; op1val:0xfff6ffdffff90008;  op2val:0x555500077fff0100
TEST_P64_PNN_OP(smalxda, x20, $rd_hi, x19, x28, 0x0000000000000000, $correctval_hi, 0xfff6ffdffff90008, 0x555500077fff0100, x5, 176, x3)

inst_12:
// rs1==x31, rs2==x9, rd==x24, rs2_h3_val == 32767, rs1_h3_val == 256, rs2_h0_val == 21845, rs1_h1_val == 512, rs1_h0_val == 256, rs1_h2_val == 1, rs2_h1_val == 8
// opcode: smalxda ; op1:x31; op2:x9; dest:x24; op1val:0x0100000102000100;  op2val:0x7fffdfff00085555
TEST_P64_PNN_OP(smalxda, x24, $rd_hi, x31, x9, 0x0000000000000000, $correctval_hi, 0x0100000102000100, 0x7fffdfff00085555, x5, 192, x3)

inst_13:
// rs1==x12, rs2==x18, rd==x8, rs2_h3_val == -16385, rs2_h2_val == 16384, rs1_h2_val == 16384, rs1_h3_val == -129, rs1_h1_val == 32
// opcode: smalxda ; op1:x12; op2:x18; dest:x8; op1val:0xff7f400000200009;  op2val:0xbfff4000c0000080
TEST_P64_PNN_OP(smalxda, x8, $rd_hi, x12, x18, 0x0000000000000000, $correctval_hi, 0xff7f400000200009, 0xbfff4000c0000080, x5, 208, x3)

inst_14:
// rs1==x8, rs2==x31, rd==x12, rs2_h3_val == -4097, rs2_h0_val == -16385, rs1_h1_val == 1, rs1_h0_val == -1025, rs1_h3_val == 16
// opcode: smalxda ; op1:x8; op2:x31; dest:x12; op1val:0x0010aaaa0001fbff;  op2val:0xeffffff60003bfff
TEST_P64_PNN_OP(smalxda, x12, $rd_hi, x8, x31, 0x0000000000000000, $correctval_hi, 0x0010aaaa0001fbff, 0xeffffff60003bfff, x5, 224, x15)

inst_15:
// rs1==x10, rs2==x8, rs2_h3_val == -2049, rs1_h2_val == -8193, rs2_h1_val == -33, rs2_h2_val == 256
// opcode: smalxda ; op1:x10; op2:x8; dest:x4; op1val:0x0010dfff00097fff;  op2val:0xf7ff0100ffdf3fff
TEST_P64_PNN_OP(smalxda, x4, $rd_hi, x10, x8, 0x0000000000000000, $correctval_hi, 0x0010dfff00097fff, 0xf7ff0100ffdf3fff, x5, 240, x15)

inst_16:
// rs1==x16, rs2==x11, rs2_h3_val == -1025, rs1_h1_val == 1024, rs2_h2_val == -17, rs1_h0_val == 16384, rs1_h3_val == 2048
// opcode: smalxda ; op1:x16; op2:x11; dest:x31; op1val:0x08003fff04004000;  op2val:0xfbffffef0006fffa
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x16, x11, 0x0000000000000000, $correctval_hi, 0x08003fff04004000, 0xfbffffef0006fffa, x5, 256, x15)

inst_17:
// rs1==x3, rs2==x19, rs2_h3_val == -257, rs1_h1_val == -2, rs2_h1_val == -8193, rs1_h3_val == 4, rs2_h2_val == -9, rs1_h0_val == 512
// opcode: smalxda ; op1:x3; op2:x19; dest:x8; op1val:0x0004c000fffe0200;  op2val:0xfefffff7dfff3fff
TEST_P64_PNN_OP(smalxda, x8, $rd_hi, x3, x19, 0x0000000000000000, $correctval_hi, 0x0004c000fffe0200, 0xfefffff7dfff3fff, x5, 272, x15)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_18:
// rs1==x18, rs2==x17, rs2_h3_val == -129, rs2_h2_val == -4097, rs2_h1_val == 8192
// opcode: smalxda ; op1:x18; op2:x17; dest:x11; op1val:0x10000006ff7ffff7;  op2val:0xff7fefff2000fffa
TEST_P64_PNN_OP(smalxda, x11, $rd_hi, x18, x17, 0x0000000000000000, $correctval_hi, 0x10000006ff7ffff7, 0xff7fefff2000fffa, x6, 0, x15)

inst_19:
// rs1==x13, rs2==x3, rs2_h3_val == -65, rs2_h0_val == 32, rs2_h2_val == -1025
// opcode: smalxda ; op1:x13; op2:x3; dest:x16; op1val:0x0009aaaaf7fffffa;  op2val:0xffbffbffc0000020
TEST_P64_PNN_OP(smalxda, x16, $rd_hi, x13, x3, 0x0000000000000000, $correctval_hi, 0x0009aaaaf7fffffa, 0xffbffbffc0000020, x6, 16, x15)

inst_20:
// rs1==x29, rs2==x0, rs2_h3_val == -33, rs2_h1_val == 2, rs1_h3_val == -1, rs2_h2_val == -5, rs1_h1_val == 32767
// opcode: smalxda ; op1:x29; op2:x0; dest:x19; op1val:0xffffffdf7fff0200;  op2val:0xffdffffb00021000
TEST_P64_PNN_OP(smalxda, x19, $rd_hi, x29, x0, 0x0000000000000000, $correctval_hi, 0xffffffdf7fff0200, 0xffdffffb00021000, x6, 32, x15)

inst_21:
// rs1==x14, rs2==x12, rs2_h3_val == -17, rs1_h2_val == 16, rs2_h0_val == -17, rs2_h1_val == 0, rs1_h1_val == 8192
// opcode: smalxda ; op1:x14; op2:x12; dest:x18; op1val:0xfff9001020000040;  op2val:0xffeffff90000ffef
TEST_P64_PNN_OP(smalxda, x18, $rd_hi, x14, x12, 0x0000000000000000, $correctval_hi, 0xfff9001020000040, 0xffeffff90000ffef, x6, 48, x15)

inst_22:
// rs1==x5, rs2==x27, rs2_h3_val == -9, rs2_h2_val == 16, rs1_h2_val == -9, rs1_h0_val == 21845
// opcode: smalxda ; op1:x5; op2:x27; dest:x26; op1val:0x3ffffff7ff7f5555;  op2val:0xfff70010ff7ffff6
TEST_P64_PNN_OP(smalxda, x26, $rd_hi, x5, x27, 0x0000000000000000, $correctval_hi, 0x3ffffff7ff7f5555, 0xfff70010ff7ffff6, x6, 64, x15)

inst_23:
// rs1==x25, rs2==x21, rs2_h3_val == -5, rs2_h0_val == -65, rs2_h2_val == 2048
// opcode: smalxda ; op1:x25; op2:x21; dest:x19; op1val:0x00030010fff90005;  op2val:0xfffb08000400ffbf
TEST_P64_PNN_OP(smalxda, x19, $rd_hi, x25, x21, 0x0000000000000000, $correctval_hi, 0x00030010fff90005, 0xfffb08000400ffbf, x6, 80, x15)

inst_24:
// rs1==x2, rs2==x14, rs2_h3_val == -2, rs2_h2_val == -33, rs1_h3_val == 21845, rs1_h2_val == 21845, rs1_h1_val == 8
// opcode: smalxda ; op1:x2; op2:x14; dest:x22; op1val:0x555555550008ffdf;  op2val:0xfffeffdf0006aaaa
TEST_P64_PNN_OP(smalxda, x22, $rd_hi, x2, x14, 0x0000000000000000, $correctval_hi, 0x555555550008ffdf, 0xfffeffdf0006aaaa, x6, 96, x15)

inst_25:
// rs1==x28, rs2==x5, rs2_h3_val == -32768, rs1_h0_val == -16385, rs2_h1_val == 128
// opcode: smalxda ; op1:x28; op2:x5; dest:x25; op1val:0x00090005fdffbfff;  op2val:0x800000080080fffa
TEST_P64_PNN_OP(smalxda, x25, $rd_hi, x28, x5, 0x0000000000000000, $correctval_hi, 0x00090005fdffbfff, 0x800000080080fffa, x6, 112, x15)

inst_26:
// rs1==x0, rs2==x29, rs2_h3_val == 16384, rs2_h2_val == -2049, rs2_h0_val == 0, rs1_h2_val == 64, rs2_h1_val == 4096, rs1_h3_val == -9, rs1_h0_val == -257
// opcode: smalxda ; op1:x0; op2:x29; dest:x21; op1val:0xfff700401000feff;  op2val:0x4000f7ff10000000
TEST_P64_PNN_OP(smalxda, x21, $rd_hi, x0, x29, 0x0000000000000000, $correctval_hi, 0xfff700401000feff, 0x4000f7ff10000000, x6, 128, x15)

inst_27:
// rs1==x4, rs2==x22, rs2_h3_val == 4096, 
// opcode: smalxda ; op1:x4; op2:x22; dest:x26; op1val:0x0009dfff3ffffff7;  op2val:0x1000fff80006bfff
TEST_P64_PNN_OP(smalxda, x26, $rd_hi, x4, x22, 0x0000000000000000, $correctval_hi, 0x0009dfff3ffffff7, 0x1000fff80006bfff, x6, 144, x15)

inst_28:
// rs1==x20, rs2==x7, rs2_h3_val == 2048, 
// opcode: smalxda ; op1:x20; op2:x7; dest:x9; op1val:0xfffc0040c000c000;  op2val:0x080008001000fffa
TEST_P64_PNN_OP(smalxda, x9, $rd_hi, x20, x7, 0x0000000000000000, $correctval_hi, 0xfffc0040c000c000, 0x080008001000fffa, x6, 160, x15)

inst_29:
// rs1==x21, rs2==x16, rs2_h3_val == 1024, rs2_h2_val == -16385, rs1_h1_val == -5, rs2_h1_val == 21845, rs1_h0_val == -2, rs2_h0_val == -8193
// opcode: smalxda ; op1:x21; op2:x16; dest:x9; op1val:0x0009fffefffbfffe;  op2val:0x0400bfff5555dfff
TEST_P64_PNN_OP(smalxda, x9, $rd_hi, x21, x16, 0x0000000000000000, $correctval_hi, 0x0009fffefffbfffe, 0x0400bfff5555dfff, x6, 176, x15)

inst_30:
// rs1==x9, rs2==x1, rs2_h3_val == 256, rs1_h2_val == -65, rs1_h1_val == 2, rs1_h3_val == 8192, rs2_h2_val == 0
// opcode: smalxda ; op1:x9; op2:x1; dest:x10; op1val:0x2000ffbf00020009;  op2val:0x0100000000090100
TEST_P64_PNN_OP(smalxda, x10, $rd_hi, x9, x1, 0x0000000000000000, $correctval_hi, 0x2000ffbf00020009, 0x0100000000090100, x6, 192, x15)

inst_31:
// rs1==x15, rs2==x25, rs2_h3_val == 128, 
// opcode: smalxda ; op1:x15; op2:x25; dest:x20; op1val:0xfff6080008000200;  op2val:0x00800008fffcfffd
TEST_P64_PNN_OP(smalxda, x20, $rd_hi, x15, x25, 0x0000000000000000, $correctval_hi, 0xfff6080008000200, 0x00800008fffcfffd, x6, 208, x2)

inst_32:
// rs2_h3_val == 64, rs2_h1_val == -5, rs1_h1_val == 128, rs1_h0_val == -3
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0003aaaa0080fffd;  op2val:0x00400009fffbfff9
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0003aaaa0080fffd, 0x00400009fffbfff9, x6, 224, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs2_h3_val == 32, rs1_h1_val == -65
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffbfffbf7fff;  op2val:0x0020000710000100
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbfffbfffbf7fff, 0x0020000710000100, x1, 0, x2)

inst_34:
// rs2_h3_val == 16, rs1_h3_val == -1025, rs1_h0_val == -17, rs1_h2_val == 128
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xfbff00803fffffef;  op2val:0x0010fff95555fffc
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbff00803fffffef, 0x0010fff95555fffc, x1, 16, x2)

inst_35:
// rs2_h3_val == 8, rs2_h1_val == -32768, rs2_h0_val == -1025, rs1_h3_val == -32768
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x8000aaaa20007fff;  op2val:0x0008c0008000fbff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000aaaa20007fff, 0x0008c0008000fbff, x1, 32, x2)

inst_36:
// rs2_h3_val == 2, rs1_h2_val == 4, rs1_h0_val == 1
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xc000000400800001;  op2val:0x00020200fffc0100
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xc000000400800001, 0x00020200fffc0100, x1, 48, x2)

inst_37:
// rs1_h1_val == 16384, rs2_h1_val == -16385, rs1_h3_val == -17
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xffefc0004000fff7;  op2val:0xaaaafffebfff0010
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffefc0004000fff7, 0xaaaafffebfff0010, x1, 64, x2)

inst_38:
// rs1_h1_val == 256, rs2_h0_val == -5, rs2_h2_val == 2
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0100000601005555;  op2val:0x000900020400fffb
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0100000601005555, 0x000900020400fffb, x1, 80, x2)

inst_39:
// rs1_h1_val == 64, rs1_h2_val == 32, rs2_h2_val == 4, rs2_h0_val == -2
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0100002000405555;  op2val:0x002000040009fffe
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0100002000405555, 0x002000040009fffe, x1, 96, x2)

inst_40:
// rs1_h1_val == 16, rs1_h3_val == -3, rs1_h2_val == -17, rs2_h2_val == -129
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffef00100006;  op2val:0xfff6ff7ffff65555
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffdffef00100006, 0xfff6ff7ffff65555, x1, 112, x2)

inst_41:
// rs1_h1_val == 4, rs2_h1_val == 512, rs2_h0_val == -513
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xff7f400000040007;  op2val:0x0010fffa0200fdff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7f400000040007, 0x0010fffa0200fdff, x1, 128, x2)

inst_42:
// rs1_h1_val == 0, rs1_h3_val == 2, rs2_h3_val == -1, rs1_h2_val == -1, rs1_h0_val == 4, rs2_h0_val == 1024
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0002ffff00000004;  op2val:0xffff000704000400
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0002ffff00000004, 0xffff000704000400, x1, 144, x2)

inst_43:
// rs1_h1_val == -1, rs1_h2_val == -4097, rs2_h1_val == -2, rs1_h0_val == -129
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0006efffffffff7f;  op2val:0xff7f0004fffe0040
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0006efffffffff7f, 0xff7f0004fffe0040, x1, 160, x2)

inst_44:
// rs1_h0_val == -21846, rs2_h0_val == 1, rs1_h3_val == -33, rs2_h1_val == -4097
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xffdf55550100aaaa;  op2val:0x5555ff7fefff0001
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdf55550100aaaa, 0x5555ff7fefff0001, x1, 176, x2)

inst_45:
// rs1_h0_val == -8193, rs2_h0_val == -1, rs1_h3_val == -513
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffcfff6dfff;  op2val:0xffdfffefffdfffff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdfffffcfff6dfff, 0xffdfffefffdfffff, x1, 192, x2)

inst_46:
// rs1_h0_val == -2049, rs1_h2_val == -2049
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0800f7fffffaf7ff;  op2val:0xfffffffcfffabfff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800f7fffffaf7ff, 0xfffffffcfffabfff, x1, 208, x2)

inst_47:
// rs1_h0_val == -513, rs1_h1_val == -21846, rs1_h2_val == 1024, rs2_h0_val == -257
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0400aaaafdff;  op2val:0x002000038000feff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3fff0400aaaafdff, 0x002000038000feff, x1, 224, x2)

inst_48:
// rs1_h0_val == -65, rs2_h1_val == 16384, rs2_h2_val == 21845
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffc1000ffbf;  op2val:0x5555555540000007
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffdfffc1000ffbf, 0x5555555540000007, x1, 240, x2)

inst_49:
// rs1_h0_val == -5, rs2_h2_val == 128
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0800aaaafffb;  op2val:0xfffc0080fff80100
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdf0800aaaafffb, 0xfffc0080fff80100, x1, 256, x2)

inst_50:
// rs1_h0_val == 8192, rs1_h2_val == 4096, rs1_h3_val == -2049
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff100020002000;  op2val:0xff7f40002000ffff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ff100020002000, 0xff7f40002000ffff, x1, 272, x2)

inst_51:
// rs1_h0_val == 1024, rs2_h0_val == -4097, rs1_h2_val == -513, rs1_h3_val == -4097
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xeffffdffdfff0400;  op2val:0xffef00028000efff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xeffffdffdfff0400, 0xffef00028000efff, x1, 288, x2)

inst_52:
// rs1_h0_val == 128, rs2_h1_val == -1025, rs1_h3_val == 512
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0200fffc00080080;  op2val:0xf7fffff9fbfffff6
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200fffc00080080, 0xf7fffff9fbfffff6, x1, 304, x2)

inst_53:
// rs1_h0_val == 32, rs2_h1_val == -3
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0200040002000020;  op2val:0x00800005fffdfffd
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200040002000020, 0x00800005fffdfffd, x1, 320, x2)

inst_54:
// rs1_h0_val == 16, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffc00200010;  op2val:0x0400fff82000ffff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffcfffc00200010, 0x0400fff82000ffff, x1, 336, x2)

inst_55:
// rs1_h0_val == 0, rs2_h3_val == 1
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff9ffefaaaa0000;  op2val:0x0001fff70400fffd
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff9ffefaaaa0000, 0x0001fff70400fffd, x1, 352, x2)

inst_56:
// rs2_h1_val == 1, rs2_h0_val == 8, rs2_h2_val == -21846
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x02000003fff98000;  op2val:0xf7ffaaaa00010008
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x02000003fff98000, 0xf7ffaaaa00010008, x1, 368, x2)

inst_57:
// rs2_h0_val == 32767, rs1_h1_val == -9
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x00060020fff70003;  op2val:0x00080200dfff7fff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00060020fff70003, 0x00080200dfff7fff, x1, 384, x2)

inst_58:
// rs2_h0_val == -2049, rs1_h2_val == 0
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x4000000040000007;  op2val:0x02000003fbfff7ff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x4000000040000007, 0x02000003fbfff7ff, x1, 400, x2)

inst_59:
// rs2_h0_val == -129, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff00400020fffd;  op2val:0xffff55550800ff7f
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ff00400020fffd, 0xffff55550800ff7f, x1, 416, x2)

inst_60:
// rs2_h0_val == -32768, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0006fff840003fff;  op2val:0xfffb0008fffe8000
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0006fff840003fff, 0xfffb0008fffe8000, x1, 432, x2)

inst_61:
// rs2_h0_val == 16384, rs2_h2_val == -513
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0800aaaa0003fdff;  op2val:0xfff8fdff00094000
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800aaaa0003fdff, 0xfff8fdff00094000, x1, 448, x2)

inst_62:
// rs2_h0_val == 2048, rs1_h2_val == 8192
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x08002000fff60000;  op2val:0xff7ffffcfeff0800
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x08002000fff60000, 0xff7ffffcfeff0800, x1, 464, x2)

inst_63:
// rs2_h0_val == 512, rs1_h3_val == -257
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xfeffaaaa00100009;  op2val:0xfffcfff9feff0200
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeffaaaa00100009, 0xfffcfff9feff0200, x1, 480, x2)

inst_64:
// rs2_h0_val == 4, rs1_h3_val == -2
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffefff700408000;  op2val:0xfff9fbff00000004
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffefff700408000, 0xfff9fbff00000004, x1, 496, x2)

inst_65:
// rs2_h0_val == 2, rs1_h3_val == 1, rs2_h1_val == 64
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0001fff7fffb0003;  op2val:0xfbff000400400002
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001fff7fffb0003, 0xfbff000400400002, x1, 512, x2)

inst_66:
// rs1_h3_val == 32767, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff70006dfff;  op2val:0x80000003fffd5555
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7ffffff70006dfff, 0x80000003fffd5555, x1, 528, x2)

inst_67:
// rs1_h3_val == -8193, rs2_h2_val == -32768
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xdfffc0000005fff8;  op2val:0x00408000fffdefff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfffc0000005fff8, 0x00408000fffdefff, x1, 544, x2)

inst_68:
// rs1_h0_val == -1, rs1_h1_val == -1025
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xfefff7fffbffffff;  op2val:0x0005000400805555
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfefff7fffbffffff, 0x0005000400805555, x1, 560, x2)

inst_69:
// rs1_h3_val == -5, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0020fffdffef;  op2val:0xfff6020000050004
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffb0020fffdffef, 0xfff6020000050004, x1, 576, x2)

inst_70:
// rs2_h2_val == 32767, rs1_h2_val == 512
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0007020000030004;  op2val:0x00057ffffffef7ff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0007020000030004, 0x00057ffffffef7ff, x1, 592, x2)

inst_71:
// rs1_h3_val == 1024, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0400fffafff90008;  op2val:0xffbf00083fff0007
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0400fffafff90008, 0xffbf00083fff0007, x1, 608, x2)

inst_72:
// rs1_h3_val == 128, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0080080000080009;  op2val:0x0200fffa0009aaaa
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080080000080009, 0x0200fffa0009aaaa, x1, 624, x2)

inst_73:
// rs1_h3_val == 64, rs1_h1_val == 21845
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0040000455550002;  op2val:0x0010fffe0800fffc
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040000455550002, 0x0010fffe0800fffc, x1, 640, x2)

inst_74:
// rs1_h3_val == 32, rs2_h2_val == -257, rs2_h1_val == -2049
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0020fff70000bfff;  op2val:0xdffffefff7fffffd
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020fff70000bfff, 0xdffffefff7fffffd, x1, 656, x2)

inst_75:
// rs2_h2_val == -65, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x5555f7fffffc4000;  op2val:0xfff7ffbfdffffeff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x5555f7fffffc4000, 0xfff7ffbfdffffeff, x1, 672, x2)

inst_76:
// rs1_h3_val == 0, rs1_h2_val == -32768
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x00008000fffcfffd;  op2val:0xff7f0005fffffff9
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00008000fffcfffd, 0xff7f0005fffffff9, x1, 688, x2)

inst_77:
// rs2_h2_val == -3, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0007001001003fff;  op2val:0xfffbfffdffdffffe
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0007001001003fff, 0xfffbfffdffdffffe, x1, 704, x2)

inst_78:
// rs1_h2_val == 32767, rs2_h1_val == 32
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffb7fff00040001;  op2val:0x0007fffc0020fffe
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffb7fff00040001, 0x0007fffc0020fffe, x1, 720, x2)

inst_79:
// rs1_h2_val == -16385, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0008bffffffcfffd;  op2val:0xfffa010020000010
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0008bffffffcfffd, 0xfffa010020000010, x1, 736, x2)

inst_80:
// rs2_h2_val == 1024, rs1_h2_val == 8, rs2_h1_val == -17
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff00080001bfff;  op2val:0x00060400ffeffeff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ff00080001bfff, 0x00060400ffeffeff, x1, 752, x2)

inst_81:
// rs1_h2_val == -1025, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fbff00200080;  op2val:0x00017fff00047fff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff8fbff00200080, 0x00017fff00047fff, x1, 768, x2)

inst_82:
// rs1_h2_val == -257, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0005feff00020001;  op2val:0xfff80009dfffdfff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0005feff00020001, 0xfff80009dfffdfff, x1, 784, x2)

inst_83:
// rs2_h2_val == -1, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x00010020fffa3fff;  op2val:0xf7ffffff0020ffbf
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00010020fffa3fff, 0xf7ffffff0020ffbf, x1, 800, x2)

inst_84:
// rs2_h1_val == -21846, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0007fff90004bfff;  op2val:0xff7f0200aaaaffdf
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0007fff90004bfff, 0xff7f0200aaaaffdf, x1, 816, x2)

inst_85:
// rs2_h1_val == 256, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0008fffefff90100;  op2val:0x0003fffa01000020
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0008fffefff90100, 0x0003fffa01000020, x1, 832, x2)

inst_86:
// rs2_h1_val == -513, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xff7f7ffffff60006;  op2val:0x0800fbfffdfffff6
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7f7ffffff60006, 0x0800fbfffdfffff6, x1, 848, x2)

inst_87:
// rs2_h1_val == -65, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x00408000dfff5555;  op2val:0xffef0800ffbfaaaa
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00408000dfff5555, 0xffef0800ffbfaaaa, x1, 864, x2)

inst_88:
// rs2_h1_val == -9, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0005fff6fff9efff;  op2val:0x0010fffbfff7fdff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0005fff6fff9efff, 0x0010fffbfff7fdff, x1, 880, x2)

inst_89:
// rs1_h1_val == -16385, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x02000001bffffeff;  op2val:0x02000010bfff0040
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x02000001bffffeff, 0x02000010bfff0040, x1, 896, x2)

inst_90:
// rs1_h2_val == -3, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0040fffd0008ffff;  op2val:0xfffe1000fffb3fff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040fffd0008ffff, 0xfffe1000fffb3fff, x1, 912, x2)

inst_91:
// rs1_h1_val == -17, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x08001000ffef3fff;  op2val:0xfff8200002000020
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x08001000ffef3fff, 0xfff8200002000020, x1, 928, x2)

inst_92:
// rs1_h2_val == -129, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xc000ff7fffbffdff;  op2val:0xffbf000500090000
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xc000ff7fffbffdff, 0xffbf000500090000, x1, 944, x2)

inst_93:
// rs2_h2_val == 64, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xaaaac000fffeffdf;  op2val:0xfffe004000202000
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaac000fffeffdf, 0xfffe004000202000, x1, 960, x2)

inst_94:
// rs2_h2_val == 32, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffcefff0002;  op2val:0xaaaa0020fbff4000
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfefffffcefff0002, 0xaaaa0020fbff4000, x1, 976, x2)

inst_95:
// rs1_h1_val == -257, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0009feff0007;  op2val:0x0200ff7ffffffffe
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbff0009feff0007, 0x0200ff7ffffffffe, x1, 992, x2)

inst_96:
// rs1_h1_val == -33, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0080ff7fffdf1000;  op2val:0x80000000bffffbff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080ff7fffdf1000, 0x80000000bffffbff, x1, 1008, x2)

inst_97:
// rs2_h2_val == 1, 
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x00070040efffdfff;  op2val:0x00200001fff9dfff
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00070040efffdfff, 0x00200001fff9dfff, x1, 1024, x2)

inst_98:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h1_val == -3, rs2_h3_val == -3, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h2_val == 4096, rs2_h0_val == -3, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h0_val == 32767, rs2_h1_val == 16
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0x0003fff9fffd7fff;  op2val:0xfffd10000010fffd
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0003fff9fffd7fff, 0xfffd10000010fffd, x1, 1040, x2)

inst_99:
// rs2_h3_val == -33, rs2_h1_val == 2, rs1_h3_val == -1, rs2_h2_val == -5, rs1_h1_val == 32767
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf7fff0200;  op2val:0xffdffffb00021000
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdf7fff0200, 0xffdffffb00021000, x1, 1056, x2)

inst_100:
// rs2_h3_val == 16384, rs2_h2_val == -2049, rs2_h0_val == 0, rs1_h2_val == 64, rs2_h1_val == 4096, rs1_h3_val == -9, rs1_h0_val == -257
// opcode: smalxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff700401000feff;  op2val:0x4000f7ff10000000
TEST_P64_PNN_OP(smalxda, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff700401000feff, 0x4000f7ff10000000, x1, 1072, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 136*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
