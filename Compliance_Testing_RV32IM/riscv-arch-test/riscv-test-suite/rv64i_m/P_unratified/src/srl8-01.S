
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srl8 instruction of the RISC-V RV64PZicsr extension for the srl8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srl8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 == rd != rs2, rs1==x28, rs2==x23, rd==x28, rs2_val == 5, rs1_b6_val == 4, rs1_b5_val == 239
// opcode: srl8 ; op1:x28; op2:x23; dest:x28; op1val:0xc04ef0e120c090d;  op2val:0x5
TEST_RR_OP(srl8, x28, x28, x23, 0x0000000000000000, 0xc04ef0e120c090d, 0x5, x5, 0, x13)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x16, rs2==x0, rd==x14, rs2_val == 3, rs1_b6_val == 0, rs1_b0_val == 85, rs1_b4_val == 255, rs1_b2_val == 32, rs1_b3_val == 85
// opcode: srl8 ; op1:x16; op2:x0; dest:x14; op1val:0x120013ff55200a55;  op2val:0x0
TEST_RR_OP(srl8, x14, x16, x0, 0x0000000000000000, 0x120013ff55200a55, 0x0, x5, 8, x13)

inst_2:
// rs1 == rs2 != rd, rs1==x6, rs2==x6, rd==x20, rs2_val == 6, rs1_b2_val == 8, rs1_b4_val == 4, rs1_b6_val == 254, rs1_b1_val == 255
// opcode: srl8 ; op1:x6; op2:x6; dest:x20; op1val:0xafe03040e08ff0e;  op2val:0x6
TEST_RR_OP(srl8, x20, x6, x6, 0x0000000000000000, 0xafe03040e08ff0e, 0x6, x5, 16, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x26, rs2==x26, rd==x26, rs2_val == 4, rs1_b3_val == 16, rs1_b1_val == 239, rs1_b4_val == 247, rs1_b6_val == 255, rs1_b7_val == 128, rs1_b0_val == 127, rs1_b5_val == 4
// opcode: srl8 ; op1:x26; op2:x26; dest:x26; op1val:0x80ff04f7100bef7f;  op2val:0x4
TEST_RR_OP(srl8, x26, x26, x26, 0x0000000000000000, 0x80ff04f7100bef7f, 0x4, x5, 24, x13)

inst_4:
// rs2 == rd != rs1, rs1==x15, rs2==x16, rd==x16, rs2_val == 2, rs1_b2_val == 253, rs1_b4_val == 1, rs1_b3_val == 4, rs1_b0_val == 253
// opcode: srl8 ; op1:x15; op2:x16; dest:x16; op1val:0x800d060104fdeffd;  op2val:0x2
TEST_RR_OP(srl8, x16, x15, x16, 0x0000000000000000, 0x800d060104fdeffd, 0x2, x5, 32, x13)

inst_5:
// rs1==x12, rs2==x21, rd==x29, rs2_val == 1, rs1_b6_val == 251, rs1_b2_val == 0, rs1_b5_val == 251
// opcode: srl8 ; op1:x12; op2:x21; dest:x29; op1val:0x3fbfb070e00090d;  op2val:0x1
TEST_RR_OP(srl8, x29, x12, x21, 0x0000000000000000, 0x3fbfb070e00090d, 0x1, x5, 40, x13)

inst_6:
// rs1==x7, rs2==x8, rd==x19, rs1_b7_val == 170, rs1_b0_val == 1
// opcode: srl8 ; op1:x7; op2:x8; dest:x19; op1val:0xaa0f0c0b090b1101;  op2val:0x2
TEST_RR_OP(srl8, x19, x7, x8, 0x0000000000000000, 0xaa0f0c0b090b1101, 0x2, x5, 48, x13)

inst_7:
// rs1==x30, rs2==x11, rd==x6, rs1_b7_val == 85, rs1_b3_val == 128, rs1_b6_val == 1, rs1_b2_val == 223
// opcode: srl8 ; op1:x30; op2:x11; dest:x6; op1val:0x55010d1280df1306;  op2val:0x5
TEST_RR_OP(srl8, x6, x30, x11, 0x0000000000000000, 0x55010d1280df1306, 0x5, x5, 56, x13)

inst_8:
// rs1==x9, rs2==x3, rd==x21, rs1_b7_val == 127, rs1_b1_val == 128, rs1_b3_val == 239, rs1_b6_val == 191, rs1_b0_val == 16
// opcode: srl8 ; op1:x9; op2:x3; dest:x21; op1val:0x7fbf0401ef0e8010;  op2val:0xa
TEST_RR_OP(srl8, x21, x9, x3, 0x0000000000000000, 0x7fbf0401ef0e8010, 0xa, x5, 64, x13)

inst_9:
// rs1==x10, rs2==x18, rd==x0, rs1_b7_val == 191, rs1_b5_val == 64, rs1_b1_val == 0, rs1_b4_val == 128
// opcode: srl8 ; op1:x10; op2:x18; dest:x0; op1val:0xbf0e408004200009;  op2val:0xa
TEST_RR_OP(srl8, x0, x10, x18, 0x0000000000000000, 0xbf0e408004200009, 0xa, x5, 72, x13)

inst_10:
// rs1==x2, rs2==x4, rd==x1, rs1_b7_val == 223, rs1_b5_val == 170, rs1_b4_val == 16
// opcode: srl8 ; op1:x2; op2:x4; dest:x1; op1val:0xdf11aa10ef050f7f;  op2val:0x9
TEST_RR_OP(srl8, x1, x2, x4, 0x0000000000000000, 0xdf11aa10ef050f7f, 0x9, x5, 80, x13)

inst_11:
// rs1==x25, rs2==x17, rd==x22, rs1_b7_val == 239, rs1_b0_val == 128, rs1_b5_val == 1
// opcode: srl8 ; op1:x25; op2:x17; dest:x22; op1val:0xef0b010903060b80;  op2val:0xf
TEST_RR_OP(srl8, x22, x25, x17, 0x0000000000000000, 0xef0b010903060b80, 0xf, x5, 88, x13)

inst_12:
// rs1==x4, rs2==x10, rd==x25, rs1_b7_val == 247, rs1_b3_val == 191, rs1_b1_val == 253, rs1_b0_val == 254, rs1_b5_val == 253
// opcode: srl8 ; op1:x4; op2:x10; dest:x25; op1val:0xf70bfd0ebf0efdfe;  op2val:0xf
TEST_RR_OP(srl8, x25, x4, x10, 0x0000000000000000, 0xf70bfd0ebf0efdfe, 0xf, x5, 96, x1)

inst_13:
// rs1==x22, rs2==x7, rd==x31, rs1_b7_val == 251, rs1_b1_val == 223, rs1_b4_val == 85, rs1_b0_val == 64
// opcode: srl8 ; op1:x22; op2:x7; dest:x31; op1val:0xfb030955120edf40;  op2val:0xc
TEST_RR_OP(srl8, x31, x22, x7, 0x0000000000000000, 0xfb030955120edf40, 0xc, x5, 104, x1)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_14:
// rs1==x19, rs2==x22, rd==x10, rs1_b7_val == 253, rs1_b3_val == 0, rs1_b6_val == 253, rs1_b4_val == 254, rs1_b5_val == 8
// opcode: srl8 ; op1:x19; op2:x22; dest:x10; op1val:0xfdfd08fe00200efe;  op2val:0x7
TEST_RR_OP(srl8, x10, x19, x22, 0x0000000000000000, 0xfdfd08fe00200efe, 0x7, x6, 0, x1)

inst_15:
// rs1==x29, rs2==x20, rd==x7, rs1_b7_val == 254, rs1_b2_val == 64
// opcode: srl8 ; op1:x29; op2:x20; dest:x7; op1val:0xfe0705111140ff12;  op2val:0x9
TEST_RR_OP(srl8, x7, x29, x20, 0x0000000000000000, 0xfe0705111140ff12, 0x9, x6, 8, x1)

inst_16:
// rs1==x11, rs2==x29, rd==x17, rs1_b7_val == 64, rs1_b6_val == 170
// opcode: srl8 ; op1:x11; op2:x29; dest:x17; op1val:0x40aa130c100b0312;  op2val:0x9
TEST_RR_OP(srl8, x17, x11, x29, 0x0000000000000000, 0x40aa130c100b0312, 0x9, x6, 16, x1)

inst_17:
// rs1==x17, rs2==x24, rd==x30, rs1_b7_val == 32, rs1_b6_val == 128, rs1_b5_val == 2
// opcode: srl8 ; op1:x17; op2:x24; dest:x30; op1val:0x2080028005fd070a;  op2val:0x11
TEST_RR_OP(srl8, x30, x17, x24, 0x0000000000000000, 0x2080028005fd070a, 0x11, x6, 24, x1)

inst_18:
// rs1==x27, rs2==x12, rd==x18, rs1_b7_val == 16, rs1_b0_val == 8
// opcode: srl8 ; op1:x27; op2:x12; dest:x18; op1val:0x100cfb0500060308;  op2val:0x2
TEST_RR_OP(srl8, x18, x27, x12, 0x0000000000000000, 0x100cfb0500060308, 0x2, x6, 32, x1)

inst_19:
// rs1==x5, rs2==x14, rd==x3, rs1_b7_val == 8, rs1_b5_val == 191, rs1_b1_val == 64, rs1_b2_val == 191
// opcode: srl8 ; op1:x5; op2:x14; dest:x3; op1val:0x806bf8006bf40fd;  op2val:0x1
TEST_RR_OP(srl8, x3, x5, x14, 0x0000000000000000, 0x806bf8006bf40fd, 0x1, x6, 40, x1)

inst_20:
// rs1==x14, rs2==x27, rd==x15, rs1_b7_val == 4, rs1_b1_val == 251, rs1_b3_val == 170, rs1_b0_val == 0
// opcode: srl8 ; op1:x14; op2:x27; dest:x15; op1val:0x40604f7aa0dfb00;  op2val:0xc
TEST_RR_OP(srl8, x15, x14, x27, 0x0000000000000000, 0x40604f7aa0dfb00, 0xc, x6, 48, x1)

inst_21:
// rs1==x20, rs2==x9, rd==x27, rs1_b7_val == 2, rs1_b4_val == 64
// opcode: srl8 ; op1:x20; op2:x9; dest:x27; op1val:0x2130f400e080500;  op2val:0xd
TEST_RR_OP(srl8, x27, x20, x9, 0x0000000000000000, 0x2130f400e080500, 0xd, x6, 56, x1)

inst_22:
// rs1==x13, rs2==x2, rd==x12, rs1_b7_val == 1, rs1_b2_val == 1, rs1_b6_val == 64, rs1_b3_val == 2
// opcode: srl8 ; op1:x13; op2:x2; dest:x12; op1val:0x1400b1302011211;  op2val:0x11
TEST_RR_OP(srl8, x12, x13, x2, 0x0000000000000000, 0x1400b1302011211, 0x11, x6, 64, x1)

inst_23:
// rs1==x0, rs2==x30, rd==x13, rs1_b7_val == 255, rs1_b2_val == 247, rs1_b5_val == 0, rs1_b1_val == 32, rs1_b0_val == 4
// opcode: srl8 ; op1:x0; op2:x30; dest:x13; op1val:0xff0e005512f72004;  op2val:0x2
TEST_RR_OP(srl8, x13, x0, x30, 0x0000000000000000, 0xff0e005512f72004, 0x2, x6, 72, x1)

inst_24:
// rs1==x23, rs2==x13, rd==x4, rs1_b7_val == 0, rs1_b2_val == 170
// opcode: srl8 ; op1:x23; op2:x13; dest:x4; op1val:0x060b0f0baa0d7f;  op2val:0xa
TEST_RR_OP(srl8, x4, x23, x13, 0x0000000000000000, 0x060b0f0baa0d7f, 0xa, x6, 80, x1)

inst_25:
// rs1==x21, rs2==x15, rd==x5, rs1_b6_val == 85, rs1_b4_val == 191
// opcode: srl8 ; op1:x21; op2:x15; dest:x5; op1val:0x1055bfbf0503060d;  op2val:0x1
TEST_RR_OP(srl8, x5, x21, x15, 0x0000000000000000, 0x1055bfbf0503060d, 0x1, x6, 88, x1)

inst_26:
// rs1==x24, rs2==x31, rd==x9, rs1_b6_val == 127, rs1_b2_val == 128
// opcode: srl8 ; op1:x24; op2:x31; dest:x9; op1val:0xb7f0e0e11800780;  op2val:0xe
TEST_RR_OP(srl8, x9, x24, x31, 0x0000000000000000, 0xb7f0e0e11800780, 0xe, x6, 96, x1)

inst_27:
// rs1==x3, rs2==x25, rd==x2, rs1_b6_val == 223, rs1_b4_val == 251, rs1_b5_val == 247
// opcode: srl8 ; op1:x3; op2:x25; dest:x2; op1val:0x80dff7fb0e0a0708;  op2val:0x5
TEST_RR_OP(srl8, x2, x3, x25, 0x0000000000000000, 0x80dff7fb0e0a0708, 0x5, x6, 104, x1)

inst_28:
// rs1==x8, rs2==x19, rd==x23, rs1_b6_val == 239, rs1_b1_val == 2
// opcode: srl8 ; op1:x8; op2:x19; dest:x23; op1val:0xeef120104200213;  op2val:0x7
TEST_RR_OP(srl8, x23, x8, x19, 0x0000000000000000, 0xeef120104200213, 0x7, x6, 112, x1)

inst_29:
// rs1==x18, rs2==x5, rd==x8, rs1_b1_val == 127, rs1_b5_val == 127, rs1_b3_val == 255, rs1_b4_val == 239
// opcode: srl8 ; op1:x18; op2:x5; dest:x8; op1val:0x17f7fefff067f04;  op2val:0xb
TEST_RR_OP(srl8, x8, x18, x5, 0x0000000000000000, 0x17f7fefff067f04, 0xb, x6, 120, x3)

inst_30:
// rs1==x31, rs2==x1, rd==x11, rs1_b1_val == 191, rs1_b3_val == 251
// opcode: srl8 ; op1:x31; op2:x1; dest:x11; op1val:0x11bf0340fb13bf05;  op2val:0xb
TEST_RR_OP(srl8, x11, x31, x1, 0x0000000000000000, 0x11bf0340fb13bf05, 0xb, x6, 128, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_31:
// rs1==x1, rs2==x28, rd==x24, rs1_b1_val == 247, rs1_b5_val == 128, rs1_b0_val == 223
// opcode: srl8 ; op1:x1; op2:x28; dest:x24; op1val:0xa0e800eff00f7df;  op2val:0x6
TEST_RR_OP(srl8, x24, x1, x28, 0x0000000000000000, 0xa0e800eff00f7df, 0x6, x2, 0, x3)

inst_32:
// rs1_b1_val == 254, rs1_b2_val == 254
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x1004800f13fefefd;  op2val:0x8
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x1004800f13fefefd, 0x8, x2, 8, x3)

inst_33:
// rs1_b1_val == 16, rs1_b4_val == 170, rs1_b6_val == 16
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x111001aaef00100e;  op2val:0xa
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x111001aaef00100e, 0xa, x2, 16, x3)

inst_34:
// rs1_b1_val == 8, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x8040060e1180080f;  op2val:0xd
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x8040060e1180080f, 0xd, x2, 24, x3)

inst_35:
// rs1_b1_val == 4, rs1_b2_val == 4
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x130c7f0aaa0404df;  op2val:0x8
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x130c7f0aaa0404df, 0x8, x2, 32, x3)

inst_36:
// rs1_b1_val == 1, rs1_b2_val == 85, rs1_b0_val == 191
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa030f0b125501bf;  op2val:0xc
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0xaa030f0b125501bf, 0xc, x2, 40, x3)

inst_37:
// rs1_b0_val == 170, rs1_b1_val == 85
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb0bbf80801355aa;  op2val:0xa
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0xfb0bbf80801355aa, 0xa, x2, 48, x3)

inst_38:
// rs1_b0_val == 239, rs1_b4_val == 2
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x8070a02800707ef;  op2val:0x2
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x8070a02800707ef, 0x2, x2, 56, x3)

inst_39:
// rs1_b0_val == 247, rs1_b3_val == 8
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0xbbff70908050ef7;  op2val:0x4
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0xbbff70908050ef7, 0x4, x2, 64, x3)

inst_40:
// rs1_b0_val == 251, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x70405bf00bf0afb;  op2val:0x13
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x70405bf00bf0afb, 0x13, x2, 72, x3)

inst_41:
// rs1_b0_val == 32, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd0f7ff705120f20;  op2val:0x4
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0xfd0f7ff705120f20, 0x4, x2, 80, x3)

inst_42:
// rs1_b6_val == 247, rs1_b1_val == 170
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x20f713ff0000aa00;  op2val:0x13
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x20f713ff0000aa00, 0x13, x2, 88, x3)

inst_43:
// rs1_b0_val == 2, rs1_b2_val == 2, rs1_b4_val == 32
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x8013fb200d02fb02;  op2val:0x13
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x8013fb200d02fb02, 0x13, x2, 96, x3)

inst_44:
// rs1_b5_val == 255, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0xf701fff70820ef11;  op2val:0x2
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0xf701fff70820ef11, 0x2, x2, 104, x3)

inst_45:
// rs1_b4_val == 127, rs1_b3_val == 223, rs1_b2_val == 255
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x103aa7fdfff8005;  op2val:0x0
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x103aa7fdfff8005, 0x0, x2, 112, x3)

inst_46:
// rs1_b4_val == 223, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x711fddf120efefe;  op2val:0x0
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x711fddf120efefe, 0x0, x2, 120, x3)

inst_47:
// rs1_b4_val == 253, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x407effd00060002;  op2val:0xd
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x407effd00060002, 0xd, x2, 128, x3)

inst_48:
// rs1_b4_val == 8, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x130c0308800a0c01;  op2val:0x12
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x130c0308800a0c01, 0x12, x2, 136, x3)

inst_49:
// rs1_b4_val == 0, rs1_b3_val == 32
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7030900200807fe;  op2val:0x1
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0xf7030900200807fe, 0x1, x2, 144, x3)

inst_50:
// rs1_b2_val == 16, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x50c03fe0b100500;  op2val:0x2
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x50c03fe0b100500, 0x2, x2, 152, x3)

inst_51:
// rs1_b3_val == 127, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x40dffb017f100212;  op2val:0x9
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x40dffb017f100212, 0x9, x2, 160, x3)

inst_52:
// rs1_b3_val == 247, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0xcf7000ff70ffd20;  op2val:0x3
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0xcf7000ff70ffd20, 0x3, x2, 168, x3)

inst_53:
// rs1_b3_val == 253, rs1_b6_val == 32
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb20aa13fd100cdf;  op2val:0x8
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0xfb20aa13fd100cdf, 0x8, x2, 176, x3)

inst_54:
// rs1_b3_val == 64, rs1_b6_val == 2
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x80027faa40f709df;  op2val:0x7
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x80027faa40f709df, 0x7, x2, 184, x3)

inst_55:
// rs1_b0_val == 255, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0xffb07bfff1155ff;  op2val:0x0
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0xffb07bfff1155ff, 0x0, x2, 192, x3)

inst_56:
// rs1_b3_val == 1, rs1_b2_val == 127
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x6ef0aaa017f0bfb;  op2val:0xb
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x6ef0aaa017f0bfb, 0xb, x2, 200, x3)

inst_57:
// rs1_b6_val == 8, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x808800caa7f0713;  op2val:0x6
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x808800caa7f0713, 0x6, x2, 208, x3)

inst_58:
// rs1_b5_val == 85, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0xb07550b07aa0212;  op2val:0xb
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0xb07550b07aa0212, 0xb, x2, 216, x3)

inst_59:
// rs1_b2_val == 251, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x60f01effbfb1309;  op2val:0x10
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x60f01effbfb1309, 0x10, x2, 224, x3)

inst_60:
// rs1_b5_val == 223, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x7fdfdf40f7055580;  op2val:0xf
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x7fdfdf40f7055580, 0xf, x2, 232, x3)

inst_61:
// rs1_b5_val == 254, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x1312fe0655048004;  op2val:0x7
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x1312fe0655048004, 0x7, x2, 240, x3)

inst_62:
// rs1_b5_val == 32, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x80f201255ff1280;  op2val:0x7
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x80f201255ff1280, 0x7, x2, 248, x3)

inst_63:
// rs1_b5_val == 16, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x32010fe550106fe;  op2val:0x10
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x32010fe550106fe, 0x10, x2, 256, x3)

inst_64:
// rs1_b2_val == 239, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x00021100ef0c04;  op2val:0x3
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x00021100ef0c04, 0x3, x2, 264, x3)

inst_65:
// rs1_b3_val == 254, 
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x506000cfe03df01;  op2val:0xa
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x506000cfe03df01, 0xa, x2, 272, x3)

inst_66:
// rs2_val == 3, rs1_b6_val == 0, rs1_b0_val == 85, rs1_b4_val == 255, rs1_b2_val == 32, rs1_b3_val == 85
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x120013ff55200a55;  op2val:0x3
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x120013ff55200a55, 0x3, x2, 280, x3)

inst_67:
// rs2_val == 6, rs1_b2_val == 8, rs1_b4_val == 4, rs1_b6_val == 254, rs1_b1_val == 255
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0xafe03040e08ff0e;  op2val:0x6
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0xafe03040e08ff0e, 0x6, x2, 288, x3)

inst_68:
// rs2_val == 4, rs1_b3_val == 16, rs1_b1_val == 239, rs1_b4_val == 247, rs1_b6_val == 255, rs1_b7_val == 128, rs1_b0_val == 127, rs1_b5_val == 4
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0x80ff04f7100bef7f;  op2val:0x4
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0x80ff04f7100bef7f, 0x4, x2, 296, x3)

inst_69:
// rs1_b7_val == 191, rs1_b5_val == 64, rs1_b1_val == 0, rs1_b4_val == 128
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf0e408004200009;  op2val:0xa
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0xbf0e408004200009, 0xa, x2, 304, x3)

inst_70:
// rs1_b7_val == 255, rs1_b2_val == 247, rs1_b5_val == 0, rs1_b1_val == 32, rs1_b0_val == 4
// opcode: srl8 ; op1:x30; op2:x29; dest:x31; op1val:0xff0e005512f72004;  op2val:0x2
TEST_RR_OP(srl8, x31, x30, x29, 0x0000000000000000, 0xff0e005512f72004, 0x2, x2, 312, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 40*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
