
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uradd16 instruction of the RISC-V RV64PZicsr extension for the uradd16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uradd16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x1, rs2==x27, rd==x1, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h1_val == 43690, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 61439, rs1_h2_val == 65534, rs2_h0_val == 4, rs2_h1_val == 64511, rs2_h2_val == 32768
// opcode: uradd16 ; op1:x1; op2:x27; dest:x1; op1val:0x0bfffeaaaa0000;  op2val:0xefff8000fbff0004
TEST_RR_OP(uradd16, x1, x1, x27, 0x0000000000000000, 0x0bfffeaaaa0000, 0xefff8000fbff0004, x7, 0, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x27, rs2==x12, rd==x17, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h1_val == 49151, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == 65531, rs1_h3_val == 16384, rs1_h0_val == 1024, rs2_h1_val == 65279, rs2_h3_val == 16384
// opcode: uradd16 ; op1:x27; op2:x12; dest:x17; op1val:0x4000fffbbfff0400;  op2val:0x40000012feff0013
TEST_RR_OP(uradd16, x17, x27, x12, 0x0000000000000000, 0x4000fffbbfff0400, 0x40000012feff0013, x7, 8, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x11, rs2==x11, rd==x26, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h3_val == 1, rs1_h3_val == 8192, rs1_h0_val == 65471, rs2_h1_val == 0, rs1_h1_val == 64
// opcode: uradd16 ; op1:x11; op2:x11; dest:x26; op1val:0x200000060040ffbf;  op2val:0x0100060000000c
TEST_RR_OP(uradd16, x26, x11, x11, 0x0000000000000000, 0x200000060040ffbf, 0x0100060000000c, x7, 16, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x3, rs2==x3, rd==x3, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val == 64, rs1_h0_val == 8, rs2_h0_val == 65531, rs2_h3_val == 57343
// opcode: uradd16 ; op1:x3; op2:x3; dest:x3; op1val:0x0e0040000f0008;  op2val:0xdfff8000000ffffb
TEST_RR_OP(uradd16, x3, x3, x3, 0x0000000000000000, 0x0e0040000f0008, 0xdfff8000000ffffb, x7, 24, x8)

inst_4:
// rs2 == rd != rs1, rs1==x14, rs2==x23, rd==x23, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == 0, rs1_h0_val == 2, rs1_h3_val == 65531, rs2_h2_val == 57343, rs2_h0_val == 2
// opcode: uradd16 ; op1:x14; op2:x23; dest:x23; op1val:0xfffb001300000002;  op2val:0x0fdfff00030002
TEST_RR_OP(uradd16, x23, x14, x23, 0x0000000000000000, 0xfffb001300000002, 0x0fdfff00030002, x7, 32, x8)

inst_5:
// rs1==x30, rs2==x2, rd==x5, rs2_h3_val == 43690, rs1_h0_val == 64, rs2_h1_val == 65519, rs1_h1_val == 65519
// opcode: uradd16 ; op1:x30; op2:x2; dest:x5; op1val:0x0afffeffef0040;  op2val:0xaaaa0011ffef000f
TEST_RR_OP(uradd16, x5, x30, x2, 0x0000000000000000, 0x0afffeffef0040, 0xaaaa0011ffef000f, x7, 40, x8)

inst_6:
// rs1==x25, rs2==x6, rd==x18, rs2_h3_val == 21845, rs2_h0_val == 65534, rs2_h2_val == 256, rs1_h3_val == 32768, rs1_h2_val == 16384, rs1_h1_val == 65533, rs2_h1_val == 65503
// opcode: uradd16 ; op1:x25; op2:x6; dest:x18; op1val:0x80004000fffd0002;  op2val:0x55550100ffdffffe
TEST_RR_OP(uradd16, x18, x25, x6, 0x0000000000000000, 0x80004000fffd0002, 0x55550100ffdffffe, x7, 48, x8)

inst_7:
// rs1==x12, rs2==x31, rd==x27, rs2_h3_val == 32767, rs1_h0_val == 65279, rs2_h1_val == 8, rs1_h2_val == 4096, rs1_h1_val == 16384, rs2_h2_val == 65503
// opcode: uradd16 ; op1:x12; op2:x31; dest:x27; op1val:0x400010004000feff;  op2val:0x7fffffdf0008000a
TEST_RR_OP(uradd16, x27, x12, x31, 0x0000000000000000, 0x400010004000feff, 0x7fffffdf0008000a, x7, 56, x8)

inst_8:
// rs1==x20, rs2==x0, rd==x2, rs2_h3_val == 49151, rs1_h0_val == 32, rs2_h2_val == 128, rs1_h2_val == 65503, rs2_h1_val == 65407, rs2_h0_val == 64511
// opcode: uradd16 ; op1:x20; op2:x0; dest:x2; op1val:0x0bffdf000c0020;  op2val:0xbfff0080ff7ffbff
TEST_RR_OP(uradd16, x2, x20, x0, 0x0000000000000000, 0x0bffdf000c0020, 0xbfff0080ff7ffbff, x7, 64, x8)

inst_9:
// rs1==x13, rs2==x19, rd==x9, rs2_h3_val == 63487, rs2_h2_val == 32, rs1_h1_val == 32, rs1_h0_val == 65534
// opcode: uradd16 ; op1:x13; op2:x19; dest:x9; op1val:0x800000130020fffe;  op2val:0xf7ff00200009000d
TEST_RR_OP(uradd16, x9, x13, x19, 0x0000000000000000, 0x800000130020fffe, 0xf7ff00200009000d, x7, 72, x8)

inst_10:
// rs1==x21, rs2==x30, rd==x0, rs2_h3_val == 64511, rs1_h0_val == 65527, rs2_h1_val == 32767, rs2_h2_val == 65534, rs1_h2_val == 32768
// opcode: uradd16 ; op1:x21; op2:x30; dest:x0; op1val:0x200080000009fff7;  op2val:0xfbfffffe7fff0013
TEST_RR_OP(uradd16, x0, x21, x30, 0x0000000000000000, 0x200080000009fff7, 0xfbfffffe7fff0013, x7, 80, x8)

inst_11:
// rs1==x23, rs2==x4, rd==x12, rs2_h3_val == 65023, rs1_h1_val == 65527, rs1_h0_val == 65023, rs2_h2_val == 1, rs2_h1_val == 65527
// opcode: uradd16 ; op1:x23; op2:x4; dest:x12; op1val:0x0c0013fff7fdff;  op2val:0xfdff0001fff70011
TEST_RR_OP(uradd16, x12, x23, x4, 0x0000000000000000, 0x0c0013fff7fdff, 0xfdff0001fff70011, x7, 88, x8)

inst_12:
// rs1==x15, rs2==x29, rd==x30, rs2_h3_val == 65279, rs2_h1_val == 21845, rs1_h0_val == 65519, rs1_h1_val == 4096, rs1_h3_val == 49151, rs1_h2_val == 43690, rs2_h0_val == 65407
// opcode: uradd16 ; op1:x15; op2:x29; dest:x30; op1val:0xbfffaaaa1000ffef;  op2val:0xfeff80005555ff7f
TEST_RR_OP(uradd16, x30, x15, x29, 0x0000000000000000, 0xbfffaaaa1000ffef, 0xfeff80005555ff7f, x7, 96, x8)

inst_13:
// rs1==x19, rs2==x13, rd==x22, rs2_h3_val == 65407, rs2_h0_val == 1024, rs1_h3_val == 43690, rs2_h2_val == 1024, rs1_h0_val == 65533
// opcode: uradd16 ; op1:x19; op2:x13; dest:x22; op1val:0xaaaa000d0000fffd;  op2val:0xff7f0400000c0400
TEST_RR_OP(uradd16, x22, x19, x13, 0x0000000000000000, 0xaaaa000d0000fffd, 0xff7f0400000c0400, x7, 104, x8)

inst_14:
// rs1==x16, rs2==x17, rd==x31, rs2_h3_val == 65471, rs1_h0_val == 61439, rs2_h2_val == 43690, rs1_h3_val == 32
// opcode: uradd16 ; op1:x16; op2:x17; dest:x31; op1val:0x2000050020efff;  op2val:0xffbfaaaafeff0013
TEST_RR_OP(uradd16, x31, x16, x17, 0x0000000000000000, 0x2000050020efff, 0xffbfaaaafeff0013, x7, 112, x8)

inst_15:
// rs1==x6, rs2==x10, rd==x14, rs2_h3_val == 65503, rs1_h0_val == 65503, rs2_h0_val == 43690
// opcode: uradd16 ; op1:x6; op2:x10; dest:x14; op1val:0x4000fffe000bffdf;  op2val:0xffdf000fffefaaaa
TEST_RR_OP(uradd16, x14, x6, x10, 0x0000000000000000, 0x4000fffe000bffdf, 0xffdf000fffefaaaa, x7, 120, x12)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_16:
// rs1==x29, rs2==x26, rd==x25, rs2_h3_val == 65519, rs2_h0_val == 65527
// opcode: uradd16 ; op1:x29; op2:x26; dest:x25; op1val:0xaaaa004000030002;  op2val:0xffeffffe0011fff7
TEST_RR_OP(uradd16, x25, x29, x26, 0x0000000000000000, 0xaaaa004000030002, 0xffeffffe0011fff7, x3, 0, x12)

inst_17:
// rs1==x22, rs2==x15, rd==x20, rs2_h3_val == 65527, rs1_h3_val == 2, rs2_h1_val == 32768, rs2_h2_val == 65533
// opcode: uradd16 ; op1:x22; op2:x15; dest:x20; op1val:0x02aaaa0000efff;  op2val:0xfff7fffd80000400
TEST_RR_OP(uradd16, x20, x22, x15, 0x0000000000000000, 0x02aaaa0000efff, 0xfff7fffd80000400, x3, 8, x12)

inst_18:
// rs1==x5, rs2==x20, rd==x7, rs2_h3_val == 65531, rs1_h2_val == 65471, rs1_h1_val == 65023, rs1_h0_val == 1
// opcode: uradd16 ; op1:x5; op2:x20; dest:x7; op1val:0x03ffbffdff0001;  op2val:0xfffb80000011000e
TEST_RR_OP(uradd16, x7, x5, x20, 0x0000000000000000, 0x03ffbffdff0001, 0xfffb80000011000e, x3, 16, x12)

inst_19:
// rs1==x26, rs2==x7, rd==x21, rs2_h3_val == 65533, rs1_h3_val == 4, rs1_h1_val == 65531, rs1_h0_val == 21845, rs2_h1_val == 63487
// opcode: uradd16 ; op1:x26; op2:x7; dest:x21; op1val:0x040013fffb5555;  op2val:0xfffdaaaaf7ff0004
TEST_RR_OP(uradd16, x21, x26, x7, 0x0000000000000000, 0x040013fffb5555, 0xfffdaaaaf7ff0004, x3, 24, x12)

inst_20:
// rs1==x18, rs2==x1, rd==x29, rs2_h3_val == 65534, rs1_h2_val == 0, rs1_h0_val == 65535, rs2_h2_val == 64, rs2_h1_val == 512, rs1_h3_val == 4096, rs1_h1_val == 256
// opcode: uradd16 ; op1:x18; op2:x1; dest:x29; op1val:0x100000000100ffff;  op2val:0xfffe004002000011
TEST_RR_OP(uradd16, x29, x18, x1, 0x0000000000000000, 0x100000000100ffff, 0xfffe004002000011, x3, 32, x12)

inst_21:
// rs1==x4, rs2==x28, rd==x16, rs2_h3_val == 32768, rs2_h0_val == 49151, rs2_h1_val == 128, rs1_h3_val == 65471, rs1_h2_val == 65535
// opcode: uradd16 ; op1:x4; op2:x28; dest:x16; op1val:0xffbffffffffdfeff;  op2val:0x800000030080bfff
TEST_RR_OP(uradd16, x16, x4, x28, 0x0000000000000000, 0xffbffffffffdfeff, 0x800000030080bfff, x3, 40, x12)

inst_22:
// rs1==x2, rs2==x25, rd==x19, rs2_h3_val == 8192, rs2_h0_val == 32, rs1_h3_val == 65535, rs1_h1_val == 512
// opcode: uradd16 ; op1:x2; op2:x25; dest:x19; op1val:0xfffffffb0200ffef;  op2val:0x20000009f7ff0020
TEST_RR_OP(uradd16, x19, x2, x25, 0x0000000000000000, 0xfffffffb0200ffef, 0x20000009f7ff0020, x3, 48, x12)

inst_23:
// rs1==x9, rs2==x16, rd==x4, rs2_h3_val == 4096, rs2_h1_val == 65533, rs1_h0_val == 16, rs1_h2_val == 63487, rs1_h1_val == 63487
// opcode: uradd16 ; op1:x9; op2:x16; dest:x4; op1val:0x0af7fff7ff0010;  op2val:0x10000013fffdfffe
TEST_RR_OP(uradd16, x4, x9, x16, 0x0000000000000000, 0x0af7fff7ff0010, 0x10000013fffdfffe, x3, 56, x12)

inst_24:
// rs1==x17, rs2==x5, rd==x6, rs2_h3_val == 2048, rs1_h1_val == 65535, rs1_h0_val == 43690
// opcode: uradd16 ; op1:x17; op2:x5; dest:x6; op1val:0x20000013ffffaaaa;  op2val:0x80000070000000a
TEST_RR_OP(uradd16, x6, x17, x5, 0x0000000000000000, 0x20000013ffffaaaa, 0x80000070000000a, x3, 64, x12)

inst_25:
// rs1==x7, rs2==x21, rd==x11, rs2_h3_val == 1024, rs1_h1_val == 2, rs2_h0_val == 65533, rs1_h2_val == 65407
// opcode: uradd16 ; op1:x7; op2:x21; dest:x11; op1val:0xbfffff7f00020005;  op2val:0x400000f000ffffd
TEST_RR_OP(uradd16, x11, x7, x21, 0x0000000000000000, 0xbfffff7f00020005, 0x400000f000ffffd, x3, 72, x12)

inst_26:
// rs1==x28, rs2==x8, rd==x15, rs2_h3_val == 512, rs1_h2_val == 64511, rs2_h0_val == 65535
// opcode: uradd16 ; op1:x28; op2:x8; dest:x15; op1val:0x1000fbfff7ff5555;  op2val:0x200000d0011ffff
TEST_RR_OP(uradd16, x15, x28, x8, 0x0000000000000000, 0x1000fbfff7ff5555, 0x200000d0011ffff, x3, 80, x12)

inst_27:
// rs1==x8, rs2==x24, rd==x13, rs2_h3_val == 256, rs2_h2_val == 8, rs1_h2_val == 21845, rs1_h3_val == 65527
// opcode: uradd16 ; op1:x8; op2:x24; dest:x13; op1val:0xfff75555fdff0007;  op2val:0x1000008fff7bfff
TEST_RR_OP(uradd16, x13, x8, x24, 0x0000000000000000, 0xfff75555fdff0007, 0x1000008fff7bfff, x3, 88, x12)

inst_28:
// rs1==x31, rs2==x9, rd==x24, rs2_h3_val == 128, rs1_h0_val == 49151, rs1_h2_val == 65527, rs2_h1_val == 4, rs2_h0_val == 16, rs2_h2_val == 65519
// opcode: uradd16 ; op1:x31; op2:x9; dest:x24; op1val:0xfffffff70009bfff;  op2val:0x80ffef00040010
TEST_RR_OP(uradd16, x24, x31, x9, 0x0000000000000000, 0xfffffff70009bfff, 0x80ffef00040010, x3, 96, x12)

inst_29:
// rs1==x0, rs2==x18, rd==x10, rs2_h3_val == 64, rs1_h3_val == 65503, rs2_h2_val == 16, rs1_h1_val == 65471, rs1_h0_val == 8192, rs1_h2_val == 2
// opcode: uradd16 ; op1:x0; op2:x18; dest:x10; op1val:0xffdf0002ffbf2000;  op2val:0x40001000130400
TEST_RR_OP(uradd16, x10, x0, x18, 0x0000000000000000, 0xffdf0002ffbf2000, 0x40001000130400, x3, 104, x2)

inst_30:
// rs1==x10, rs2==x22, rd==x28, rs2_h3_val == 32, rs1_h1_val == 61439, rs2_h0_val == 32768, rs2_h1_val == 65023, rs1_h2_val == 16, rs1_h3_val == 32767
// opcode: uradd16 ; op1:x10; op2:x22; dest:x28; op1val:0x7fff0010efff0008;  op2val:0x200013fdff8000
TEST_RR_OP(uradd16, x28, x10, x22, 0x0000000000000000, 0x7fff0010efff0008, 0x200013fdff8000, x3, 112, x2)

inst_31:
// rs1==x24, rs2==x14, rd==x8, rs2_h3_val == 16, rs2_h2_val == 16384, rs1_h1_val == 1024, rs1_h2_val == 2048, rs2_h1_val == 4096
// opcode: uradd16 ; op1:x24; op2:x14; dest:x8; op1val:0xffbf08000400fffd;  op2val:0x1040001000ffff
TEST_RR_OP(uradd16, x8, x24, x14, 0x0000000000000000, 0xffbf08000400fffd, 0x1040001000ffff, x3, 120, x2)

inst_32:
// rs2_h3_val == 8, rs1_h0_val == 16384, rs2_h0_val == 57343, rs2_h1_val == 16384
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffdf000c4000;  op2val:0x0800064000dfff
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x02ffdf000c4000, 0x0800064000dfff, x3, 128, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs2_h3_val == 4, rs2_h2_val == 65527
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e000bfffb5555;  op2val:0x04fff700050005
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x0e000bfffb5555, 0x04fff700050005, x1, 0, x2)

inst_34:
// rs1_h1_val == 4, rs1_h2_val == 65279
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7feff00040011;  op2val:0x1000009fdff0400
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xfff7feff00040011, 0x1000009fdff0400, x1, 8, x2)

inst_35:
// rs1_h1_val == 1, rs2_h2_val == 65023
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x03000b00010013;  op2val:0x0efdff0080fff7
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x03000b00010013, 0x0efdff0080fff7, x1, 16, x2)

inst_36:
// rs1_h0_val == 32767, rs2_h1_val == 1
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0010efff7fff;  op2val:0x09001000010020
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xfffb0010efff7fff, 0x09001000010020, x1, 24, x2)

inst_37:
// rs1_h0_val == 57343, rs1_h3_val == 64, rs1_h2_val == 32767
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x407fff0003dfff;  op2val:0x01000bffdfff7f
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x407fff0003dfff, 0x01000bffdfff7f, x1, 32, x2)

inst_38:
// rs1_h0_val == 63487, rs1_h1_val == 32767, rs2_h0_val == 65023
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0608007ffff7ff;  op2val:0x08fffd8000fdff
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x0608007ffff7ff, 0x08fffd8000fdff, x1, 40, x2)

inst_39:
// rs1_h0_val == 64511, rs2_h2_val == 2048
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0010000afbff;  op2val:0x7fff0800000d000c
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x7fff0010000afbff, 0x7fff0800000d000c, x1, 48, x2)

inst_40:
// rs1_h0_val == 65407, rs1_h3_val == 128
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x80ff7ff7ffff7f;  op2val:0x07000f00000400
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x80ff7ff7ffff7f, 0x07000f00000400, x1, 56, x2)

inst_41:
// rs1_h0_val == 65531, rs2_h0_val == 64
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0dfbff0005fffb;  op2val:0x80000800010040
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x0dfbff0005fffb, 0x80000800010040, x1, 64, x2)

inst_42:
// rs1_h0_val == 32768, rs2_h0_val == 2048
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000c000d8000;  op2val:0xdfffffdf00070800
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x2000000c000d8000, 0xdfffffdf00070800, x1, 72, x2)

inst_43:
// rs1_h0_val == 4096, rs1_h3_val == 65533, rs2_h2_val == 4
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd000cfffb1000;  op2val:0x040004000cfbff
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xfffd000cfffb1000, 0x040004000cfbff, x1, 80, x2)

inst_44:
// rs1_h0_val == 2048, rs1_h1_val == 32768
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fffe80000800;  op2val:0xf7ff000f0001000d
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x20fffe80000800, 0xf7ff000f0001000d, x1, 88, x2)

inst_45:
// rs1_h0_val == 512, rs1_h2_val == 57343, rs2_h1_val == 256, rs1_h1_val == 21845, rs1_h3_val == 16
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x10dfff55550200;  op2val:0xffbf002001000003
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x10dfff55550200, 0xffbf002001000003, x1, 96, x2)

inst_46:
// rs1_h0_val == 256, rs2_h0_val == 256, rs2_h2_val == 65407
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7080000030100;  op2val:0xffdfff7f00120100
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xfff7080000030100, 0xffdfff7f00120100, x1, 104, x2)

inst_47:
// rs1_h0_val == 128, rs1_h2_val == 8192, rs2_h1_val == 65535
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf200001000080;  op2val:0x100ffefffff0006
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xffdf200001000080, 0x100ffefffff0006, x1, 112, x2)

inst_48:
// rs1_h0_val == 4, rs2_h0_val == 8, rs1_h2_val == 4, rs2_h1_val == 57343, rs1_h1_val == 128
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x12000400800004;  op2val:0xefff0004dfff0008
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x12000400800004, 0xefff0004dfff0008, x1, 120, x2)

inst_49:
// rs2_h3_val == 2, rs2_h1_val == 2, rs2_h0_val == 8192, rs2_h2_val == 2, rs1_h1_val == 65503
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff74000ffdf0002;  op2val:0x02000200022000
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xfff74000ffdf0002, 0x02000200022000, x1, 128, x2)

inst_50:
// rs2_h3_val == 65535, rs1_h2_val == 65023
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafdff0020bfff;  op2val:0xffff0004ffef0100
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xaaaafdff0020bfff, 0xffff0004ffef0100, x1, 136, x2)

inst_51:
// rs2_h3_val == 0, rs1_h3_val == 65407, rs2_h0_val == 32767
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0010fffd000f;  op2val:0x00001100047fff
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xff7f0010fffd000f, 0x00001100047fff, x1, 144, x2)

inst_52:
// rs2_h2_val == 21845, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x025555aaaa0013;  op2val:0x205555ffeffffb
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x025555aaaa0013, 0x205555ffeffffb, x1, 152, x2)

inst_53:
// rs2_h2_val == 32767, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x03200000200004;  op2val:0x20007fff0013fffb
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x03200000200004, 0x20007fff0013fffb, x1, 160, x2)

inst_54:
// rs2_h2_val == 49151, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000e55550004;  op2val:0x0dbfff00120009
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x2000000e55550004, 0x0dbfff00120009, x1, 168, x2)

inst_55:
// rs2_h2_val == 61439, rs2_h1_val == 1024, rs2_h0_val == 16384
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0f5555000f0400;  op2val:0x08efff04004000
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x0f5555000f0400, 0x08efff04004000, x1, 176, x2)

inst_56:
// rs2_h2_val == 63487, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x800000127fff000d;  op2val:0x06f7ff00020008
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x800000127fff000d, 0x06f7ff00020008, x1, 184, x2)

inst_57:
// rs2_h2_val == 64511, rs1_h2_val == 1024
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x100400000efffb;  op2val:0xeffffbff7fff0004
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x100400000efffb, 0xeffffbff7fff0004, x1, 192, x2)

inst_58:
// rs2_h2_val == 65279, rs1_h2_val == 65519, rs1_h3_val == 65534
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffefbffffffe;  op2val:0x0afeff00000006
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xfffeffefbffffffe, 0x0afeff00000006, x1, 200, x2)

inst_59:
// rs2_h2_val == 65471, rs2_h1_val == 65531
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x100009000d0001;  op2val:0xffffffbffffbffff
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x100009000d0001, 0xffffffbffffbffff, x1, 208, x2)

inst_60:
// rs2_h0_val == 65471, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffefffbfffb;  op2val:0x080020feffffbf
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x8000fffefffbfffb, 0x080020feffffbf, x1, 216, x2)

inst_61:
// rs2_h0_val == 65503, rs1_h2_val == 512
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x09020000090008;  op2val:0xfffb4000000affdf
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x09020000090008, 0xfffb4000000affdf, x1, 224, x2)

inst_62:
// rs2_h0_val == 65519, rs1_h2_val == 65533, rs2_h2_val == 512
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0dfffd0001ffdf;  op2val:0x130200000dffef
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x0dfffd0001ffdf, 0x130200000dffef, x1, 232, x2)

inst_63:
// rs2_h0_val == 4096, rs2_h1_val == 32
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0affdffffb0800;  op2val:0xff7f008000201000
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x0affdffffb0800, 0xff7f008000201000, x1, 240, x2)

inst_64:
// rs2_h0_val == 512, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000aaaaaffef;  op2val:0x08fffe000e0200
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xffdf000aaaaaffef, 0x08fffe000e0200, x1, 248, x2)

inst_65:
// rs2_h0_val == 128, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000ff7fefff000c;  op2val:0x2000080fff70080
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x4000ff7fefff000c, 0x2000080fff70080, x1, 256, x2)

inst_66:
// rs2_h0_val == 1, rs1_h3_val == 256, rs1_h1_val == 8
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000f00080012;  op2val:0xfffe0020ffff0001
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x100000f00080012, 0xfffe0020ffff0001, x1, 264, x2)

inst_67:
// rs2_h0_val == 0, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x10008000ffef0002;  op2val:0x11fff7feff0000
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x10008000ffef0002, 0x11fff7feff0000, x1, 272, x2)

inst_68:
// rs1_h3_val == 21845, rs1_h1_val == 2048
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x555500020800efff;  op2val:0x00010000011000
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x555500020800efff, 0x00010000011000, x1, 280, x2)

inst_69:
// rs1_h3_val == 57343, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0800000cffbf;  op2val:0xffdf000604000002
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xdfff0800000cffbf, 0xffdf000604000002, x1, 288, x2)

inst_70:
// rs1_h3_val == 61439, rs2_h2_val == 65531, rs2_h1_val == 61439
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff80000020fffd;  op2val:0x01fffbefff4000
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xefff80000020fffd, 0x01fffbefff4000, x1, 296, x2)

inst_71:
// rs1_h3_val == 63487, rs2_h2_val == 4096
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000400091000;  op2val:0x03100040000800
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xf7ff000400091000, 0x03100040000800, x1, 304, x2)

inst_72:
// rs1_h3_val == 64511, rs1_h2_val == 256
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff010000110007;  op2val:0xaaaa000c000efffe
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xfbff010000110007, 0xaaaa000c000efffe, x1, 312, x2)

inst_73:
// rs1_h3_val == 65023, rs2_h1_val == 43690
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffbffffb0200;  op2val:0x040007aaaabfff
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xfdffffbffffb0200, 0x040007aaaabfff, x1, 320, x2)

inst_74:
// rs1_h3_val == 65279, rs2_h1_val == 65534
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffef0002000e;  op2val:0xffbffff7fffe000b
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xfeffffef0002000e, 0xffbffff7fffe000b, x1, 328, x2)

inst_75:
// rs1_h3_val == 65519, rs1_h1_val == 16, rs2_h1_val == 2048
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffbf00100001;  op2val:0x07002008001000
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xffefffbf00100001, 0x07002008001000, x1, 336, x2)

inst_76:
// rs1_h3_val == 2048, rs2_h1_val == 64
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000100ffef0000;  op2val:0xfbffffef00400011
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x8000100ffef0000, 0xfbffffef00400011, x1, 344, x2)

inst_77:
// rs1_h2_val == 49151, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff0004000e;  op2val:0xbfffffdf0005ffbf
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xffffbfff0004000e, 0xbfffffdf0005ffbf, x1, 352, x2)

inst_78:
// rs2_h2_val == 8192, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c00090020ffbf;  op2val:0x112000000d0020
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x0c00090020ffbf, 0x112000000d0020, x1, 360, x2)

inst_79:
// rs1_h2_val == 61439, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffefff000a0013;  op2val:0x2000010fbff0040
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x7fffefff000a0013, 0x2000010fbff0040, x1, 368, x2)

inst_80:
// rs2_h2_val == 65535, rs1_h1_val == 64511
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x060004fbff000a;  op2val:0xffdfffff04002000
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x060004fbff000a, 0xffdfffff04002000, x1, 376, x2)

inst_81:
// rs2_h2_val == 0, rs1_h1_val == 65534, rs1_h2_val == 1
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0001fffe0002;  op2val:0x55550000ffff0013
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xfffb0001fffe0002, 0x55550000ffff0013, x1, 384, x2)

inst_82:
// rs2_h1_val == 49151, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff00130800ffef;  op2val:0xfffd8000bfff000b
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xf7ff00130800ffef, 0xfffd8000bfff000b, x1, 392, x2)

inst_83:
// rs1_h2_val == 128, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0700800003ffbf;  op2val:0x06fffd0100000f
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x0700800003ffbf, 0x06fffd0100000f, x1, 400, x2)

inst_84:
// rs1_h2_val == 32, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000200013000c;  op2val:0x20000005ffdf0011
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x1000200013000c, 0x20000005ffdf0011, x1, 408, x2)

inst_85:
// rs1_h2_val == 8, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0008000eff7f;  op2val:0xbfff000b00120800
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xdfff0008000eff7f, 0xbfff000b00120800, x1, 416, x2)

inst_86:
// rs2_h1_val == 65471, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff7fff0004ffdf;  op2val:0xfbffffdfffbf000f
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xdfff7fff0004ffdf, 0xfbffffdfffbf000f, x1, 424, x2)

inst_87:
// rs2_h1_val == 8192, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x13ffdf0004000a;  op2val:0x04000a20000800
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x13ffdf0004000a, 0x04000a20000800, x1, 432, x2)

inst_88:
// rs1_h1_val == 57343, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0ff7ffdfff0040;  op2val:0x1004000ffef000f
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x0ff7ffdfff0040, 0x1004000ffef000f, x1, 440, x2)

inst_89:
// rs2_h0_val == 61439, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000006;  op2val:0x070800ffffefff
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xffffffef00000006, 0x070800ffffefff, x1, 448, x2)

inst_90:
// rs1_h1_val == 65279, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b0020fefffffe;  op2val:0x2000000255550100
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x0b0020fefffffe, 0x2000000255550100, x1, 456, x2)

inst_91:
// rs1_h1_val == 65407, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0a1000ff7f0004;  op2val:0x100ffffff7f0200
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x0a1000ff7f0004, 0x100ffffff7f0200, x1, 464, x2)

inst_92:
// rs2_h1_val == 16, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff80000008fdff;  op2val:0x2000000600100003
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xdfff80000008fdff, 0x2000000600100003, x1, 472, x2)

inst_93:
// rs1_h3_val == 1024, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000097fff0007;  op2val:0x2000040efffffef
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x40000097fff0007, 0x2000040efffffef, x1, 480, x2)

inst_94:
// rs1_h3_val == 512, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fdffdfffdfff;  op2val:0x80000700040007
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x200fdffdfffdfff, 0x80000700040007, x1, 488, x2)

inst_95:
// rs1_h1_val == 8192, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c00132000fffe;  op2val:0x7fffdfff000c8000
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x0c00132000fffe, 0x7fffdfff000c8000, x1, 496, x2)

inst_96:
// rs2_h0_val == 21845, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0009000f000f;  op2val:0x015555ffff5555
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xdfff0009000f000f, 0x015555ffff5555, x1, 504, x2)

inst_97:
// rs1_h3_val == 8, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x08000700098000;  op2val:0x0c0012000c0010
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x08000700098000, 0x0c0012000c0010, x1, 512, x2)

inst_98:
// rs1_h3_val == 1, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x01000c04000008;  op2val:0x20feff00060040
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x01000c04000008, 0x20feff00060040, x1, 520, x2)

inst_99:
// rs2_h0_val == 63487, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000a000b0004;  op2val:0xff7f55550009f7ff
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x7fff000a000b0004, 0xff7f55550009f7ff, x1, 528, x2)

inst_100:
// rs1_h3_val == 0, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0000090800000c;  op2val:0xf7ff000500110003
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x0000090800000c, 0xf7ff000500110003, x1, 536, x2)

inst_101:
// rs2_h0_val == 65279, 
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x03000c000ffbff;  op2val:0xffbfffdffdfffeff
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x03000c000ffbff, 0xffbfffdffdfffeff, x1, 544, x2)

inst_102:
// rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h3_val == 1, rs1_h3_val == 8192, rs1_h0_val == 65471, rs2_h1_val == 0, rs1_h1_val == 64
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x200000060040ffbf;  op2val:0x0100060000000c
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x200000060040ffbf, 0x0100060000000c, x1, 552, x2)

inst_103:
// rs2_h3_val == 49151, rs1_h0_val == 32, rs2_h2_val == 128, rs1_h2_val == 65503, rs2_h1_val == 65407, rs2_h0_val == 64511
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0bffdf000c0020;  op2val:0xbfff0080ff7ffbff
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x0bffdf000c0020, 0xbfff0080ff7ffbff, x1, 560, x2)

inst_104:
// rs2_h3_val == 64511, rs1_h0_val == 65527, rs2_h1_val == 32767, rs2_h2_val == 65534, rs1_h2_val == 32768
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0x200080000009fff7;  op2val:0xfbfffffe7fff0013
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0x200080000009fff7, 0xfbfffffe7fff0013, x1, 568, x2)

inst_105:
// rs2_h3_val == 64, rs1_h3_val == 65503, rs2_h2_val == 16, rs1_h1_val == 65471, rs1_h0_val == 8192, rs1_h2_val == 2
// opcode: uradd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0002ffbf2000;  op2val:0x40001000130400
TEST_RR_OP(uradd16, x31, x30, x29, 0x0000000000000000, 0xffdf0002ffbf2000, 0x40001000130400, x1, 576, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 73*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
