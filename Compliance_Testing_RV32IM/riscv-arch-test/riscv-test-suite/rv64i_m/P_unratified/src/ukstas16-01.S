
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukstas16 instruction of the RISC-V RV64PZicsr extension for the ukstas16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukstas16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x13,signature_x13_1)

inst_0:// rs1 == rd != rs2, rs1==x4, rs2==x6, rd==x4, rs1_h0_val == 0, rs1_h2_val == 49151, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h1_val == 1, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 64511, rs1_h3_val == 32767
// opcode: ukstas16 ; op1:x4; op2:x6; dest:x4; op1val:0x7fffbfff00010000;  op2val:0xfbff000a00110013
TEST_RR_OP(ukstas16, x4, x4, x6, 0x0000000000000000, 0x7fffbfff00010000, 0xfbff000a00110013, x13, 0, x10)

inst_1:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x7, rd==x12, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h2_val == 4096, rs1_h1_val == 0, rs1_h0_val == 32767, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 1
// opcode: ukstas16 ; op1:x23; op2:x7; dest:x12; op1val:0x06000600007fff;  op2val:0x0610000001000f
TEST_RR_OP(ukstas16, x12, x23, x7, 0x0000000000000000, 0x06000600007fff, 0x0610000001000f, x13, 16, x10)

inst_2:// rs1 == rs2 != rd, rs1==x11, rs2==x11, rd==x9, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h3_val == 512, rs2_h1_val == 21845, rs1_h1_val == 128, rs1_h3_val == 4096
// opcode: ukstas16 ; op1:x11; op2:x11; dest:x9; op1val:0x1000000700800000;  op2val:0x20000075555000f
TEST_RR_OP(ukstas16, x9, x11, x11, 0x0000000000000000, 0x1000000700800000, 0x20000075555000f, x13, 32, x10)

inst_3:// rs1 == rs2 == rd, rs1==x8, rs2==x8, rd==x8, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h3_val == 65531, rs2_h3_val == 65471, rs1_h2_val == 65533, rs2_h0_val == 65534
// opcode: ukstas16 ; op1:x8; op2:x8; dest:x8; op1val:0xfffbfffd000a0009;  op2val:0xffbf0005000afffe
TEST_RR_OP(ukstas16, x8, x8, x8, 0x0000000000000000, 0xfffbfffd000a0009, 0xffbf0005000afffe, x13, 48, x10)

inst_4:// rs2 == rd != rs1, rs1==x18, rs2==x26, rd==x26, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h2_val == 8192, rs2_h1_val == 65534, rs1_h1_val == 43690, rs2_h0_val == 65533, rs1_h2_val == 65503, rs1_h0_val == 65533, rs1_h3_val == 4
// opcode: ukstas16 ; op1:x18; op2:x26; dest:x26; op1val:0x04ffdfaaaafffd;  op2val:0x112000fffefffd
TEST_RR_OP(ukstas16, x26, x18, x26, 0x0000000000000000, 0x04ffdfaaaafffd, 0x112000fffefffd, x13, 64, x10)

inst_5:// rs1==x15, rs2==x22, rd==x2, rs2_h3_val == 43690, rs1_h3_val == 65023, rs1_h0_val == 65023, rs2_h1_val == 0, rs1_h1_val == 49151
// opcode: ukstas16 ; op1:x15; op2:x22; dest:x2; op1val:0xfdff000cbffffdff;  op2val:0xaaaa00090000000d
TEST_RR_OP(ukstas16, x2, x15, x22, 0x0000000000000000, 0xfdff000cbffffdff, 0xaaaa00090000000d, x13, 80, x10)

inst_6:// rs1==x26, rs2==x30, rd==x15, rs2_h3_val == 21845, rs1_h3_val == 63487, rs1_h1_val == 2048, rs2_h0_val == 32767
// opcode: ukstas16 ; op1:x26; op2:x30; dest:x15; op1val:0xf7ffbfff08000006;  op2val:0x5555000700077fff
TEST_RR_OP(ukstas16, x15, x26, x30, 0x0000000000000000, 0xf7ffbfff08000006, 0x5555000700077fff, x13, 96, x10)

inst_7:// rs1==x21, rs2==x16, rd==x30, rs2_h3_val == 32767, rs2_h1_val == 16384, rs1_h3_val == 65519, rs1_h2_val == 1024, rs2_h0_val == 43690, rs1_h1_val == 512, rs1_h0_val == 512
// opcode: ukstas16 ; op1:x21; op2:x16; dest:x30; op1val:0xffef040002000200;  op2val:0x7fff20004000aaaa
TEST_RR_OP(ukstas16, x30, x21, x16, 0x0000000000000000, 0xffef040002000200, 0x7fff20004000aaaa, x13, 112, x10)

inst_8:// rs1==x24, rs2==x12, rd==x25, rs2_h3_val == 49151, rs2_h1_val == 64, rs1_h3_val == 8
// opcode: ukstas16 ; op1:x24; op2:x12; dest:x25; op1val:0x08ffdf000a000a;  op2val:0xbfff000c0040000e
TEST_RR_OP(ukstas16, x25, x24, x12, 0x0000000000000000, 0x08ffdf000a000a, 0xbfff000c0040000e, x13, 128, x10)

inst_9:// rs1==x17, rs2==x3, rd==x22, rs2_h3_val == 57343, rs1_h2_val == 64511, rs1_h1_val == 63487, rs1_h0_val == 49151, rs2_h1_val == 65023, rs2_h0_val == 63487
// opcode: ukstas16 ; op1:x17; op2:x3; dest:x22; op1val:0x06fbfff7ffbfff;  op2val:0xdfff0005fdfff7ff
TEST_RR_OP(ukstas16, x22, x17, x3, 0x0000000000000000, 0x06fbfff7ffbfff, 0xdfff0005fdfff7ff, x13, 144, x10)

inst_10:// rs1==x28, rs2==x24, rd==x27, rs2_h3_val == 61439, rs1_h2_val == 65023
// opcode: ukstas16 ; op1:x28; op2:x24; dest:x27; op1val:0x05fdffbffffdff;  op2val:0xefff0012000af7ff
TEST_RR_OP(ukstas16, x27, x28, x24, 0x0000000000000000, 0x05fdffbffffdff, 0xefff0012000af7ff, x13, 160, x10)

inst_11:// rs1==x5, rs2==x1, rd==x29, rs2_h3_val == 63487, rs2_h1_val == 61439, rs1_h1_val == 65503, rs2_h2_val == 21845, rs1_h0_val == 21845
// opcode: ukstas16 ; op1:x5; op2:x1; dest:x29; op1val:0x06000affdf5555;  op2val:0xf7ff5555efff000f
TEST_RR_OP(ukstas16, x29, x5, x1, 0x0000000000000000, 0x06000affdf5555, 0xf7ff5555efff000f, x13, 176, x10)

inst_12:// rs1==x29, rs2==x31, rd==x16, rs2_h3_val == 65023, rs1_h2_val == 65531, rs1_h1_val == 57343, rs2_h1_val == 65519, rs2_h2_val == 128
// opcode: ukstas16 ; op1:x29; op2:x31; dest:x16; op1val:0x07fffbdfff000d;  op2val:0xfdff0080ffeff7ff
TEST_RR_OP(ukstas16, x16, x29, x31, 0x0000000000000000, 0x07fffbdfff000d, 0xfdff0080ffeff7ff, x13, 192, x10)

inst_13:// rs1==x31, rs2==x14, rd==x10, rs2_h3_val == 65279, rs2_h0_val == 32768, rs1_h0_val == 61439, rs1_h3_val == 512, rs1_h1_val == 32, rs2_h1_val == 65503
// opcode: ukstas16 ; op1:x31; op2:x14; dest:x10; op1val:0x20000070020efff;  op2val:0xfeff0009ffdf8000
TEST_RR_OP(ukstas16, x10, x31, x14, 0x0000000000000000, 0x20000070020efff, 0xfeff0009ffdf8000, x13, 208, x21)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_14:// rs1==x10, rs2==x20, rd==x28, rs2_h3_val == 65407, rs2_h0_val == 8192, rs2_h1_val == 32, rs1_h3_val == 8192
// opcode: ukstas16 ; op1:x10; op2:x20; dest:x28; op1val:0x200000130007000b;  op2val:0xff7f000f00202000
TEST_RR_OP(ukstas16, x28, x10, x20, 0x0000000000000000, 0x200000130007000b, 0xff7f000f00202000, x8, 0, x21)

inst_15:// rs1==x1, rs2==x4, rd==x14, rs2_h3_val == 65503, rs2_h0_val == 64, rs1_h0_val == 16384, rs1_h3_val == 65279, rs2_h2_val == 65533
// opcode: ukstas16 ; op1:x1; op2:x4; dest:x14; op1val:0xfeffffdf000b4000;  op2val:0xffdffffd00090040
TEST_RR_OP(ukstas16, x14, x1, x4, 0x0000000000000000, 0xfeffffdf000b4000, 0xffdffffd00090040, x8, 16, x21)

inst_16:// rs1==x13, rs2==x10, rd==x17, rs2_h3_val == 65519, rs2_h2_val == 16384, rs1_h0_val == 4, rs1_h1_val == 65023, rs2_h0_val == 4096, rs1_h3_val == 49151
// opcode: ukstas16 ; op1:x13; op2:x10; dest:x17; op1val:0xbfff000dfdff0004;  op2val:0xffef400000001000
TEST_RR_OP(ukstas16, x17, x13, x10, 0x0000000000000000, 0xbfff000dfdff0004, 0xffef400000001000, x8, 32, x21)

inst_17:// rs1==x19, rs2==x29, rd==x13, rs2_h3_val == 65527, rs2_h2_val == 64, rs1_h0_val == 65407, rs2_h0_val == 0, rs2_h1_val == 65471, rs1_h3_val == 61439
// opcode: ukstas16 ; op1:x19; op2:x29; dest:x13; op1val:0xefff00090200ff7f;  op2val:0xfff70040ffbf0000
TEST_RR_OP(ukstas16, x13, x19, x29, 0x0000000000000000, 0xefff00090200ff7f, 0xfff70040ffbf0000, x8, 48, x21)

inst_18:// rs1==x12, rs2==x9, rd==x0, rs2_h3_val == 65531, rs1_h2_val == 65471, rs1_h0_val == 8192, rs2_h0_val == 1024, rs1_h1_val == 16
// opcode: ukstas16 ; op1:x12; op2:x9; dest:x0; op1val:0x1000ffbf00102000;  op2val:0xfffb001100120400
TEST_RR_OP(ukstas16, x0, x12, x9, 0x0000000000000000, 0x1000ffbf00102000, 0xfffb001100120400, x8, 64, x21)

inst_19:// rs1==x3, rs2==x5, rd==x11, rs2_h3_val == 65533, rs1_h3_val == 64511, rs2_h2_val == 61439, rs2_h0_val == 65279, rs1_h1_val == 65527
// opcode: ukstas16 ; op1:x3; op2:x5; dest:x11; op1val:0xfbfffbfffff7efff;  op2val:0xfffdefff000ffeff
TEST_RR_OP(ukstas16, x11, x3, x5, 0x0000000000000000, 0xfbfffbfffff7efff, 0xfffdefff000ffeff, x8, 80, x21)

inst_20:// rs1==x16, rs2==x23, rd==x1, rs2_h3_val == 65534, rs1_h1_val == 2, rs1_h2_val == 65407, rs2_h0_val == 128, rs2_h2_val == 57343, rs1_h3_val == 256
// opcode: ukstas16 ; op1:x16; op2:x23; dest:x1; op1val:0x100ff7f0002000e;  op2val:0xfffedfff00030080
TEST_RR_OP(ukstas16, x1, x16, x23, 0x0000000000000000, 0x100ff7f0002000e, 0xfffedfff00030080, x8, 96, x21)

inst_21:// rs1==x2, rs2==x13, rd==x24, rs2_h3_val == 32768, rs1_h1_val == 65533, rs2_h2_val == 1
// opcode: ukstas16 ; op1:x2; op2:x13; dest:x24; op1val:0x0fbffffffd0009;  op2val:0x8000000100010012
TEST_RR_OP(ukstas16, x24, x2, x13, 0x0000000000000000, 0x0fbffffffd0009, 0x8000000100010012, x8, 112, x21)

inst_22:// rs1==x14, rs2==x15, rd==x5, rs2_h3_val == 16384, rs1_h0_val == 64511, rs2_h2_val == 65023, rs1_h2_val == 65534
// opcode: ukstas16 ; op1:x14; op2:x15; dest:x5; op1val:0x05fffefdfffbff;  op2val:0x4000fdff00038000
TEST_RR_OP(ukstas16, x5, x14, x15, 0x0000000000000000, 0x05fffefdfffbff, 0x4000fdff00038000, x8, 128, x21)

inst_23:// rs1==x7, rs2==x0, rd==x23, rs2_h3_val == 8192, rs1_h2_val == 4096
// opcode: ukstas16 ; op1:x7; op2:x0; dest:x23; op1val:0x0b1000bfff0009;  op2val:0x200000400000000b
TEST_RR_OP(ukstas16, x23, x7, x0, 0x0000000000000000, 0x0b1000bfff0009, 0x200000400000000b, x8, 144, x21)

inst_24:// rs1==x30, rs2==x18, rd==x31, rs2_h3_val == 4096, rs2_h2_val == 0, rs1_h3_val == 65503, rs1_h0_val == 256
// opcode: ukstas16 ; op1:x30; op2:x18; dest:x31; op1val:0xffdf000900130100;  op2val:0x100000000003000f
TEST_RR_OP(ukstas16, x31, x30, x18, 0x0000000000000000, 0xffdf000900130100, 0x100000000003000f, x8, 160, x21)

inst_25:// rs1==x6, rs2==x28, rd==x3, rs2_h3_val == 2048, rs2_h0_val == 65519, rs2_h1_val == 1024, rs1_h1_val == 4096, rs1_h0_val == 32768, rs1_h2_val == 43690
// opcode: ukstas16 ; op1:x6; op2:x28; dest:x3; op1val:0x09aaaa10008000;  op2val:0x80000010400ffef
TEST_RR_OP(ukstas16, x3, x6, x28, 0x0000000000000000, 0x09aaaa10008000, 0x80000010400ffef, x8, 176, x21)

inst_26:// rs1==x22, rs2==x17, rd==x19, rs2_h3_val == 1024, rs1_h1_val == 1024, rs2_h1_val == 256, rs1_h3_val == 32768
// opcode: ukstas16 ; op1:x22; op2:x17; dest:x19; op1val:0x8000fdff0400000a;  op2val:0x40000070100aaaa
TEST_RR_OP(ukstas16, x19, x22, x17, 0x0000000000000000, 0x8000fdff0400000a, 0x40000070100aaaa, x8, 192, x21)

inst_27:// rs1==x0, rs2==x21, rd==x7, rs2_h3_val == 256, rs1_h0_val == 8, rs2_h2_val == 43690, rs2_h0_val == 65407
// opcode: ukstas16 ; op1:x0; op2:x21; dest:x7; op1val:0x0d000902000008;  op2val:0x100aaaa0007ff7f
TEST_RR_OP(ukstas16, x7, x0, x21, 0x0000000000000000, 0x0d000902000008, 0x100aaaa0007ff7f, x8, 208, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_28:// rs1==x9, rs2==x2, rd==x18, rs2_h3_val == 128, rs2_h0_val == 32, rs1_h2_val == 8, rs1_h3_val == 16
// opcode: ukstas16 ; op1:x9; op2:x2; dest:x18; op1val:0x10000800000003;  op2val:0x801000ffbf0020
TEST_RR_OP(ukstas16, x18, x9, x2, 0x0000000000000000, 0x10000800000003, 0x801000ffbf0020, x1, 0, x3)

inst_29:// rs1==x25, rs2==x27, rd==x20, rs2_h3_val == 64, rs2_h2_val == 49151, rs1_h3_val == 65533
// opcode: ukstas16 ; op1:x25; op2:x27; dest:x20; op1val:0xfffdbfff00050200;  op2val:0x40bfff000f0003
TEST_RR_OP(ukstas16, x20, x25, x27, 0x0000000000000000, 0xfffdbfff00050200, 0x40bfff000f0003, x1, 16, x3)

inst_30:// rs1==x20, rs2==x19, rd==x21, rs2_h3_val == 32, rs2_h0_val == 512, rs2_h2_val == 65535
// opcode: ukstas16 ; op1:x20; op2:x19; dest:x21; op1val:0x12001300130006;  op2val:0x20ffff00200200
TEST_RR_OP(ukstas16, x21, x20, x19, 0x0000000000000000, 0x12001300130006, 0x20ffff00200200, x1, 32, x3)

inst_31:// rs1==x27, rs2==x25, rd==x6, rs2_h3_val == 16, rs1_h0_val == 63487, rs2_h0_val == 256, rs2_h1_val == 63487
// opcode: ukstas16 ; op1:x27; op2:x25; dest:x6; op1val:0xfeff00080000f7ff;  op2val:0x100011f7ff0100
TEST_RR_OP(ukstas16, x6, x27, x25, 0x0000000000000000, 0xfeff00080000f7ff, 0x100011f7ff0100, x1, 48, x3)

inst_32:// rs2_h3_val == 8, rs2_h0_val == 65471, rs1_h0_val == 32, rs2_h1_val == 4096, rs2_h2_val == 63487, rs1_h1_val == 8192
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x04000820000020;  op2val:0x08f7ff1000ffbf
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x04000820000020, 0x08f7ff1000ffbf, x1, 64, x3)

inst_33:// rs2_h3_val == 4, rs1_h0_val == 2048
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x05ffbff7ff0800;  op2val:0x044000000b0200
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x05ffbff7ff0800, 0x044000000b0200, x1, 80, x3)

inst_34:// rs2_h3_val == 2, rs1_h1_val == 21845, rs2_h0_val == 64511
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000e55550005;  op2val:0x0200060009fbff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x2000000e55550005, 0x0200060009fbff, x1, 96, x3)

inst_35:// rs2_h3_val == 1, rs2_h1_val == 2, rs2_h2_val == 8
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x050400000cff7f;  op2val:0x0100080002ffef
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x050400000cff7f, 0x0100080002ffef, x1, 112, x3)

inst_36:// rs2_h3_val == 65535, rs1_h2_val == 0, rs1_h0_val == 65519
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000005ffef;  op2val:0xffff000100130200
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x1000000005ffef, 0xffff000100130200, x1, 128, x3)

inst_37:// rs2_h3_val == 0, rs1_h3_val == 43690, rs2_h0_val == 1
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000b00100004;  op2val:0x00000000010001
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xaaaa000b00100004, 0x00000000010001, x1, 144, x3)

inst_38:// rs1_h1_val == 4, rs1_h2_val == 61439, rs1_h0_val == 128
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffefff00040080;  op2val:0xffffbffff7ff000f
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xfbffefff00040080, 0xffffbffff7ff000f, x1, 160, x3)

inst_39:// rs1_h1_val == 65535, rs2_h2_val == 65527, rs1_h2_val == 32767
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa7fffffff0004;  op2val:0xffeffff7efff7fff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xaaaa7fffffff0004, 0xffeffff7efff7fff, x1, 176, x3)

inst_40:// rs1_h0_val == 43690, rs1_h3_val == 1024, rs2_h2_val == 65503, rs1_h2_val == 32, rs1_h1_val == 65531
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000020fffbaaaa;  op2val:0x09ffdf01000020
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x4000020fffbaaaa, 0x09ffdf01000020, x1, 192, x3)

inst_41:// rs1_h0_val == 57343, rs2_h0_val == 57343
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x200000a0005dfff;  op2val:0x4000000a0007dfff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x200000a0005dfff, 0x4000000a0007dfff, x1, 208, x3)

inst_42:// rs1_h0_val == 65279, rs1_h3_val == 2, rs2_h2_val == 65407
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0200080009feff;  op2val:0x0eff7fffbf0009
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x0200080009feff, 0x0eff7fffbf0009, x1, 224, x3)

inst_43:// rs1_h0_val == 65471, rs1_h3_val == 65535, rs2_h2_val == 32768
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff00130005ffbf;  op2val:0xfffd80004000ffef
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xffff00130005ffbf, 0xfffd80004000ffef, x1, 240, x3)

inst_44:// rs1_h0_val == 65503, rs1_h2_val == 128, rs2_h2_val == 65279, rs2_h1_val == 8
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x070080000cffdf;  op2val:0x80feff00082000
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x070080000cffdf, 0x80feff00082000, x1, 256, x3)

inst_45:// rs1_h0_val == 65527, rs2_h2_val == 4, rs1_h2_val == 16384, rs1_h3_val == 64, rs2_h0_val == 21845, rs1_h1_val == 8
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x4040000008fff7;  op2val:0x03000400205555
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x4040000008fff7, 0x03000400205555, x1, 272, x3)

inst_46:// rs1_h0_val == 65531, rs1_h3_val == 65534, rs1_h1_val == 65279, rs2_h1_val == 49151, rs2_h2_val == 32767
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffbffefffffb;  op2val:0x0d7fffbfffdfff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xfffeffbffefffffb, 0x0d7fffbfffdfff, x1, 288, x3)

inst_47:// rs1_h0_val == 65534, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0a000cfff7fffe;  op2val:0x40000d0040000c
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x0a000cfff7fffe, 0x40000d0040000c, x1, 304, x3)

inst_48:// rs1_h0_val == 4096, rs2_h2_val == 16, rs2_h0_val == 16
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffbf00071000;  op2val:0x0a001000030010
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xfffbffbf00071000, 0x0a001000030010, x1, 320, x3)

inst_49:// rs1_h0_val == 1024, rs2_h2_val == 2
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000005000d0400;  op2val:0x0600020002ff7f
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x4000005000d0400, 0x0600020002ff7f, x1, 336, x3)

inst_50:// rs1_h0_val == 64, rs2_h1_val == 65279, rs1_h3_val == 128
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000aaaaa0040;  op2val:0xffffeffffeffdfff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x80000aaaaa0040, 0xffffeffffeffdfff, x1, 352, x3)

inst_51:// rs1_h0_val == 16, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0013ffdf0010;  op2val:0xffdf0002f7ff0001
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xfffb0013ffdf0010, 0xffdf0002f7ff0001, x1, 368, x3)

inst_52:// rs1_h0_val == 2, rs2_h2_val == 65519, rs1_h1_val == 65407, rs1_h3_val == 57343
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffeff7f0002;  op2val:0x0bffeffeff1000
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xdffffffeff7f0002, 0x0bffeffeff1000, x1, 384, x3)

inst_53:// rs1_h0_val == 1, rs1_h1_val == 64511, rs2_h2_val == 32, rs1_h2_val == 16
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000010fbff0001;  op2val:0x200020000cffbf
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x1000010fbff0001, 0x200020000cffbf, x1, 400, x3)

inst_54:// rs1_h0_val == 65535, rs1_h1_val == 65534, rs1_h3_val == 16384, rs2_h0_val == 2
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000ff7ffffeffff;  op2val:0x040020000e0002
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x4000ff7ffffeffff, 0x040020000e0002, x1, 416, x3)

inst_55:// rs2_h2_val == 64511, rs2_h1_val == 32767, rs1_h2_val == 65527
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfff7ffdf0040;  op2val:0xf7fffbff7fff0009
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xfffbfff7ffdf0040, 0xf7fffbff7fff0009, x1, 432, x3)

inst_56:// rs2_h2_val == 65471, rs1_h2_val == 2
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000210000004;  op2val:0xfffeffbf000d000c
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x7fff000210000004, 0xfffeffbf000d000c, x1, 448, x3)

inst_57:// rs2_h0_val == 65503, rs1_h2_val == 2048
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x100800000e1000;  op2val:0x060012000bffdf
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x100800000e1000, 0x060012000bffdf, x1, 464, x3)

inst_58:// rs2_h0_val == 65527, rs2_h1_val == 512, rs2_h2_val == 65534
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfbffbfffffef;  op2val:0x02fffe0200fff7
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xfffbfbffbfffffef, 0x02fffe0200fff7, x1, 480, x3)

inst_59:// rs2_h0_val == 65531, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffedfff0012;  op2val:0x5555000cfefffffb
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x7ffffffedfff0012, 0x5555000cfefffffb, x1, 496, x3)

inst_60:// rs2_h0_val == 16384, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0010000c000a;  op2val:0x10001300114000
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xfeff0010000c000a, 0x10001300114000, x1, 512, x3)

inst_61:// rs2_h0_val == 2048, rs2_h2_val == 2048
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x400000800006000d;  op2val:0x080800ffdf0800
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x400000800006000d, 0x080800ffdf0800, x1, 528, x3)

inst_62:// rs2_h0_val == 8, rs2_h1_val == 8192, rs1_h2_val == 65535
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0effff00804000;  op2val:0x100000a20000008
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x0effff00804000, 0x100000a20000008, x1, 544, x3)

inst_63:// rs2_h0_val == 4, rs1_h3_val == 65527
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fbff0012aaaa;  op2val:0x200007f7ff0004
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xfff7fbff0012aaaa, 0x200007f7ff0004, x1, 560, x3)

inst_64:// rs2_h0_val == 65535, rs1_h1_val == 16384, rs1_h2_val == 21845
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x1355554000000b;  op2val:0x12fefffffeffff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x1355554000000b, 0x12fefffffeffff, x1, 576, x3)

inst_65:// rs1_h3_val == 21845, rs2_h1_val == 128, rs1_h1_val == 65519
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffbffeffdff;  op2val:0xfffffffd0080fffd
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x5555fffbffeffdff, 0xfffffffd0080fffd, x1, 592, x3)

inst_66:// rs1_h3_val == 65407, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f000ebfff4000;  op2val:0xfffe0003000f000c
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xff7f000ebfff4000, 0xfffe0003000f000c, x1, 608, x3)

inst_67:// rs1_h3_val == 65471, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf001300120013;  op2val:0xfffffdff00020006
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xffbf001300120013, 0xfffffdff00020006, x1, 624, x3)

inst_68:// rs1_h3_val == 2048, rs1_h2_val == 256
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x80001000001ffff;  op2val:0x0adfffffdf0003
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x80001000001ffff, 0x0adfffffdf0003, x1, 640, x3)

inst_69:// rs1_h3_val == 32, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x204000fffd5555;  op2val:0x04000e000c0012
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x204000fffd5555, 0x04000e000c0012, x1, 656, x3)

inst_70:// rs1_h3_val == 1, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x01000d00007fff;  op2val:0x7ffffbff000dfffe
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x01000d00007fff, 0x7ffffbff000dfffe, x1, 672, x3)

inst_71:// rs2_h2_val == 65531, rs2_h0_val == 65023
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffeffffffbffbf;  op2val:0x20fffb0006fdff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xf7ffeffffffbffbf, 0x20fffb0006fdff, x1, 688, x3)

inst_72:// rs1_h3_val == 0, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x00000c000baaaa;  op2val:0x0affffffefaaaa
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x00000c000baaaa, 0x0affffffefaaaa, x1, 704, x3)

inst_73:// rs1_h2_val == 57343, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffdffffeff0007;  op2val:0x10000d10007fff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xdfffdffffeff0007, 0x10000d10007fff, x1, 720, x3)

inst_74:// rs1_h2_val == 63487, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x01f7ff0013000c;  op2val:0x13fffd00800020
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x01f7ff0013000c, 0x13fffd00800020, x1, 736, x3)

inst_75:// rs2_h2_val == 1024, rs1_h2_val == 8192
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x002000f7ffefff;  op2val:0x030400f7ff0100
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x002000f7ffefff, 0x030400f7ff0100, x1, 752, x3)

inst_76:// rs2_h2_val == 512, rs2_h0_val == 61439, rs1_h1_val == 64
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000d0040000d;  op2val:0xffff0200efffefff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x40000d0040000d, 0xffff0200efffefff, x1, 768, x3)

inst_77:// rs2_h2_val == 256, rs1_h1_val == 61439
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0012efffffbf;  op2val:0x0e01000100fbff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xdfff0012efffffbf, 0x0e01000100fbff, x1, 784, x3)

inst_78:// rs1_h2_val == 65279, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x02feff0010000d;  op2val:0x10fdff00050100
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x02feff0010000d, 0x10fdff00050100, x1, 800, x3)

inst_79:// rs1_h2_val == 65519, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffeffffb2000;  op2val:0xfbff00110002000e
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xfffbffeffffb2000, 0xfbff00110002000e, x1, 816, x3)

inst_80:// rs1_h2_val == 32768, rs2_h1_val == 32768
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd800000800400;  op2val:0x400000b8000ffbf
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xfffd800000800400, 0x400000b8000ffbf, x1, 832, x3)

inst_81:// rs2_h1_val == 43690, rs1_h1_val == 65471, rs1_h2_val == 1
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x090001ffbf000d;  op2val:0xfbfffbffaaaa0005
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x090001ffbf000d, 0xfbfffbffaaaa0005, x1, 848, x3)

inst_82:// rs2_h1_val == 57343, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555000055550000;  op2val:0x110010dfff000c
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x5555000055550000, 0x110010dfff000c, x1, 864, x3)

inst_83:// rs1_h2_val == 512, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0200fff7efff;  op2val:0x07000640002000
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xfffd0200fff7efff, 0x07000640002000, x1, 880, x3)

inst_84:// rs2_h1_val == 65531, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x06fffd04000040;  op2val:0xff7ff7fffffb000d
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x06fffd04000040, 0xff7ff7fffffb000d, x1, 896, x3)

inst_85:// rs2_h1_val == 65533, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff000efffffffd;  op2val:0x2000001fffd0000
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xbfff000efffffffd, 0x2000001fffd0000, x1, 912, x3)

inst_86:// rs1_h1_val == 32767, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff7fffff7f;  op2val:0xaaaaefff000a000a
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xbfffffff7fffff7f, 0xaaaaefff000a000a, x1, 928, x3)

inst_87:// rs2_h1_val == 2048, rs1_h1_val == 32768
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000a80000100;  op2val:0xfdff000b0800f7ff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x10000a80000100, 0xfdff000b0800f7ff, x1, 944, x3)

inst_88:// rs2_h1_val == 65407, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550001000ffeff;  op2val:0x070006ff7f0008
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x55550001000ffeff, 0x070006ff7f0008, x1, 960, x3)

inst_89:// rs2_h1_val == 16, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x800001100120011;  op2val:0x7fffffdf00100008
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x800001100120011, 0x7fffffdf00100008, x1, 976, x3)

inst_90:// rs2_h0_val == 49151, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb40000040bfff;  op2val:0xdfff000d5555bfff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xfffb40000040bfff, 0xdfff000d5555bfff, x1, 992, x3)

inst_91:// rs2_h1_val == 4, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffff70020aaaa;  op2val:0xdfff400000040000
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xfdfffff70020aaaa, 0xdfff400000040000, x1, 1008, x3)

inst_92:// rs2_h1_val == 65535, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffefff0080efff;  op2val:0x080006fffffdff
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xfbffefff0080efff, 0x080006fffffdff, x1, 1024, x3)

inst_93:// rs1_h2_val == 64, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x1100407fff0002;  op2val:0x400020fffe0012
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x1100407fff0002, 0x400020fffe0012, x1, 1040, x3)

inst_94:// rs2_h1_val == 64511, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd5555ffbf000b;  op2val:0x200fbfffbff0008
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xfffd5555ffbf000b, 0x200fbfffbff0008, x1, 1056, x3)

inst_95:// rs1_h1_val == 256, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x03001101000080;  op2val:0xaaaafffffbfffff7
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x03001101000080, 0xaaaafffffbfffff7, x1, 1072, x3)

inst_96:// rs1_h2_val == 4, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x070004bfff0005;  op2val:0x2000efff55550009
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x070004bfff0005, 0x2000efff55550009, x1, 1088, x3)

inst_97:// rs2_h1_val == 65527, 
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000003fffe000a;  op2val:0x05ffeffff70009
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x20000003fffe000a, 0x05ffeffff70009, x1, 1104, x3)

inst_98:// rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h3_val == 512, rs2_h1_val == 21845, rs1_h1_val == 128, rs1_h3_val == 4096
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000700800000;  op2val:0x20000075555000f
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x1000000700800000, 0x20000075555000f, x1, 1120, x3)

inst_99:// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h3_val == 65531, rs2_h3_val == 65471, rs1_h2_val == 65533, rs2_h0_val == 65534
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffd000a0009;  op2val:0xffbf0005000afffe
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0xfffbfffd000a0009, 0xffbf0005000afffe, x1, 1136, x3)

inst_100:// rs2_h3_val == 65531, rs1_h2_val == 65471, rs1_h0_val == 8192, rs2_h0_val == 1024, rs1_h1_val == 16
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffbf00102000;  op2val:0xfffb001100120400
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x1000ffbf00102000, 0xfffb001100120400, x1, 1152, x3)

inst_101:// rs2_h3_val == 8192, rs1_h2_val == 4096
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b1000bfff0009;  op2val:0x200000400000000b
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x0b1000bfff0009, 0x200000400000000b, x1, 1168, x3)

inst_102:// rs2_h3_val == 256, rs1_h0_val == 8, rs2_h2_val == 43690, rs2_h0_val == 65407
// opcode: ukstas16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d000902000008;  op2val:0x100aaaa0007ff7f
TEST_RR_OP(ukstas16, x31, x30, x29, 0x0000000000000000, 0x0d000902000008, 0x100aaaa0007ff7f, x1, 1184, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x8_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 150*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
