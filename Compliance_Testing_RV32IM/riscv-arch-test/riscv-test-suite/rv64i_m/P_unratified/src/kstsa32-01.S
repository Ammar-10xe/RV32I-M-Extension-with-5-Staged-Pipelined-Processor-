
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kstsa32 instruction of the RISC-V RV64PZicsr extension for the kstsa32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kstsa32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 == rd != rs2, rs1==x8, rs2==x20, rd==x8, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val == -524289, rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w0_val == -8193, rs1_w0_val != rs2_w0_val, rs2_w1_val == -33, rs1_w0_val < 0 and rs2_w0_val < 0
// opcode: kstsa32 ; op1:x8; op2:x20; dest:x8; op1val:0xfff7ffff80000000;  op2val:0xffffffdfffffdfff
TEST_PKRR_OP(kstsa32, x8, x8, x20, 0x0000000000000000, 0xfff7ffff80000000, 0xffffffdfffffdfff, x8, x5, 0, x15)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x19, rs2==x10, rd==x21, rs1_w1_val == rs2_w1_val, rs1_w0_val > 0 and rs2_w0_val < 0, rs2_w1_val == -1073741825, rs1_w0_val == 16, rs2_w0_val == -536870913, rs1_w1_val == -1073741825
// opcode: kstsa32 ; op1:x19; op2:x10; dest:x21; op1val:0xbfffffff00000010;  op2val:0xbfffffffdfffffff
TEST_PKRR_OP(kstsa32, x21, x19, x10, 0x0000000000000000, 0xbfffffff00000010, 0xbfffffffdfffffff, x19, x5, 16, x15)

inst_2:
// rs1 == rs2 != rd, rs1==x4, rs2==x4, rd==x30, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w0_val == -1025, rs2_w1_val == 134217728
// opcode: kstsa32 ; op1:x4; op2:x4; dest:x30; op1val:0xfffffff980000000;  op2val:0x8000000fffffbff
TEST_PKRR_OP(kstsa32, x30, x4, x4, 0x0000000000000000, 0xfffffff980000000, 0x8000000fffffbff, x4, x5, 32, x15)

inst_3:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w1_val == 65536
// opcode: kstsa32 ; op1:x18; op2:x18; dest:x18; op1val:0x0100003fffffff;  op2val:0xfffffffadfffffff
TEST_PKRR_OP(kstsa32, x18, x18, x18, 0x0000000000000000, 0x0100003fffffff, 0xfffffffadfffffff, x18, x5, 48, x15)

inst_4:
// rs2 == rd != rs1, rs1==x31, rs2==x23, rd==x23, rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 64, rs2_w0_val == 64, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 16777216
// opcode: kstsa32 ; op1:x31; op2:x23; dest:x23; op1val:0x00000601000000;  op2val:0x00004000000040
TEST_PKRR_OP(kstsa32, x23, x31, x23, 0x0000000000000000, 0x00000601000000, 0x00004000000040, x31, x5, 64, x15)

inst_5:
// rs1==x27, rs2==x1, rd==x29, rs1_w0_val == rs2_w0_val, rs1_w1_val == 8
// opcode: kstsa32 ; op1:x27; op2:x1; dest:x29; op1val:0x000008fffffff9;  op2val:0x000007fffffff9
TEST_PKRR_OP(kstsa32, x29, x27, x1, 0x0000000000000000, 0x000008fffffff9, 0x000007fffffff9, x27, x5, 80, x15)

inst_6:
// rs1==x20, rs2==x30, rd==x4, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w1_val == 1073741824, rs1_w0_val == -2049
// opcode: kstsa32 ; op1:x20; op2:x30; dest:x4; op1val:0xc0000000fffff7ff;  op2val:0x4000000000000040
TEST_PKRR_OP(kstsa32, x4, x20, x30, 0x0000000000000000, 0xc0000000fffff7ff, 0x4000000000000040, x20, x5, 96, x15)

inst_7:
// rs1==x6, rs2==x3, rd==x11, rs2_w1_val == -1431655766, rs1_w1_val == -67108865, rs2_w0_val == 1073741824, rs1_w0_val == 268435456
// opcode: kstsa32 ; op1:x6; op2:x3; dest:x11; op1val:0xfbffffff10000000;  op2val:0xaaaaaaaa40000000
TEST_PKRR_OP(kstsa32, x11, x6, x3, 0x0000000000000000, 0xfbffffff10000000, 0xaaaaaaaa40000000, x6, x5, 112, x15)

inst_8:
// rs1==x7, rs2==x26, rd==x20, rs2_w1_val == 1431655765, rs1_w1_val == 32, rs2_w0_val == 1, rs1_w0_val == 4096
// opcode: kstsa32 ; op1:x7; op2:x26; dest:x20; op1val:0x00002000001000;  op2val:0x5555555500000001
TEST_PKRR_OP(kstsa32, x20, x7, x26, 0x0000000000000000, 0x00002000001000, 0x5555555500000001, x7, x5, 128, x15)

inst_9:
// rs1==x2, rs2==x21, rd==x1, rs2_w1_val == 2147483647, rs1_w1_val == 64, rs2_w0_val == 2, rs1_w0_val == -131073
// opcode: kstsa32 ; op1:x2; op2:x21; dest:x1; op1val:0x000040fffdffff;  op2val:0x7fffffff00000002
TEST_PKRR_OP(kstsa32, x1, x2, x21, 0x0000000000000000, 0x000040fffdffff, 0x7fffffff00000002, x2, x5, 144, x15)

inst_10:
// rs1==x3, rs2==x12, rd==x6, rs2_w1_val == -536870913, rs1_w0_val == -8193, rs2_w0_val == 1431655765, rs1_w1_val == -3
// opcode: kstsa32 ; op1:x3; op2:x12; dest:x6; op1val:0xfffffffdffffdfff;  op2val:0xdfffffff55555555
TEST_PKRR_OP(kstsa32, x6, x3, x12, 0x0000000000000000, 0xfffffffdffffdfff, 0xdfffffff55555555, x3, x5, 160, x15)

inst_11:
// rs1==x22, rs2==x24, rd==x10, rs2_w1_val == -268435457, rs2_w0_val == 4096, rs1_w0_val == 262144
// opcode: kstsa32 ; op1:x22; op2:x24; dest:x10; op1val:0x01000000040000;  op2val:0xefffffff00001000
TEST_PKRR_OP(kstsa32, x10, x22, x24, 0x0000000000000000, 0x01000000040000, 0xefffffff00001000, x22, x5, 176, x15)

inst_12:
// rs1==x14, rs2==x9, rd==x24, rs2_w1_val == -134217729, rs2_w0_val == 512, rs1_w0_val == 1024
// opcode: kstsa32 ; op1:x14; op2:x9; dest:x24; op1val:0x3fffffff00000400;  op2val:0xf7ffffff00000200
TEST_PKRR_OP(kstsa32, x24, x14, x9, 0x0000000000000000, 0x3fffffff00000400, 0xf7ffffff00000200, x14, x5, 192, x15)

inst_13:
// rs1==x25, rs2==x29, rd==x12, rs2_w1_val == -67108865, rs2_w0_val == -262145, rs1_w1_val == 268435456
// opcode: kstsa32 ; op1:x25; op2:x29; dest:x12; op1val:0x1000000010000000;  op2val:0xfbfffffffffbffff
TEST_PKRR_OP(kstsa32, x12, x25, x29, 0x0000000000000000, 0x1000000010000000, 0xfbfffffffffbffff, x25, x5, 208, x15)

inst_14:
// rs1==x16, rs2==x19, rd==x13, rs2_w1_val == -33554433, rs2_w0_val == 536870912, rs1_w0_val == -4097
// opcode: kstsa32 ; op1:x16; op2:x19; dest:x13; op1val:0x000003ffffefff;  op2val:0xfdffffff20000000
TEST_PKRR_OP(kstsa32, x13, x16, x19, 0x0000000000000000, 0x000003ffffefff, 0xfdffffff20000000, x16, x5, 224, x15)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_15:
// rs1==x29, rs2==x15, rd==x31, rs2_w1_val == -16777217, rs1_w1_val == -4097, rs2_w0_val == -16777217, rs1_w0_val == -268435457
// opcode: kstsa32 ; op1:x29; op2:x15; dest:x31; op1val:0xffffefffefffffff;  op2val:0xfefffffffeffffff
TEST_PKRR_OP(kstsa32, x31, x29, x15, 0x0000000000000000, 0xffffefffefffffff, 0xfefffffffeffffff, x29, x4, 0, x14)

inst_16:
// rs1==x23, rs2==x6, rd==x26, rs2_w1_val == -8388609, rs1_w1_val == -268435457, rs2_w0_val == 2147483647, rs1_w0_val == -4194305
// opcode: kstsa32 ; op1:x23; op2:x6; dest:x26; op1val:0xefffffffffbfffff;  op2val:0xff7fffff7fffffff
TEST_PKRR_OP(kstsa32, x26, x23, x6, 0x0000000000000000, 0xefffffffffbfffff, 0xff7fffff7fffffff, x23, x4, 16, x14)

inst_17:
// rs1==x24, rs2==x2, rd==x28, rs2_w1_val == -4194305, rs1_w1_val == 1073741824, rs2_w0_val == 32768, rs1_w0_val == 4
// opcode: kstsa32 ; op1:x24; op2:x2; dest:x28; op1val:0x4000000000000004;  op2val:0xffbfffff00008000
TEST_PKRR_OP(kstsa32, x28, x24, x2, 0x0000000000000000, 0x4000000000000004, 0xffbfffff00008000, x24, x4, 32, x14)

inst_18:
// rs1==x17, rs2==x13, rd==x7, rs2_w1_val == -2097153, rs2_w0_val == -2147483648, rs1_w0_val == 8192
// opcode: kstsa32 ; op1:x17; op2:x13; dest:x7; op1val:0x00002000002000;  op2val:0xffdfffff80000000
TEST_PKRR_OP(kstsa32, x7, x17, x13, 0x0000000000000000, 0x00002000002000, 0xffdfffff80000000, x17, x4, 48, x14)

inst_19:
// rs1==x10, rs2==x17, rd==x22, rs2_w1_val == -1048577, rs1_w0_val == -129, rs1_w1_val == -2
// opcode: kstsa32 ; op1:x10; op2:x17; dest:x22; op1val:0xfffffffeffffff7f;  op2val:0xffefffffc0000000
TEST_PKRR_OP(kstsa32, x22, x10, x17, 0x0000000000000000, 0xfffffffeffffff7f, 0xffefffffc0000000, x10, x4, 64, x14)

inst_20:
// rs1==x5, rs2==x27, rd==x0, rs2_w1_val == -524289, rs2_w0_val == 0, rs1_w0_val == -524289
// opcode: kstsa32 ; op1:x5; op2:x27; dest:x0; op1val:0xeffffffffff7ffff;  op2val:0xfff7ffff00000000
TEST_PKRR_OP(kstsa32, x0, x5, x27, 0x0000000000000000, 0xeffffffffff7ffff, 0xfff7ffff00000000, x5, x4, 80, x14)

inst_21:
// rs1==x12, rs2==x22, rd==x25, rs2_w1_val == -262145, rs1_w0_val == 4194304, rs1_w1_val == 524288, rs2_w0_val == -1048577
// opcode: kstsa32 ; op1:x12; op2:x22; dest:x25; op1val:0x08000000400000;  op2val:0xfffbffffffefffff
TEST_PKRR_OP(kstsa32, x25, x12, x22, 0x0000000000000000, 0x08000000400000, 0xfffbffffffefffff, x12, x4, 96, x14)

inst_22:
// rs1==x1, rs2==x25, rd==x9, rs2_w1_val == -131073, rs2_w0_val == -131073, rs1_w0_val == 1
// opcode: kstsa32 ; op1:x1; op2:x25; dest:x9; op1val:0x00000700000001;  op2val:0xfffdfffffffdffff
TEST_PKRR_OP(kstsa32, x9, x1, x25, 0x0000000000000000, 0x00000700000001, 0xfffdfffffffdffff, x1, x4, 112, x14)

inst_23:
// rs1==x9, rs2==x28, rd==x3, rs2_w1_val == -65537, rs1_w0_val == -8388609
// opcode: kstsa32 ; op1:x9; op2:x28; dest:x3; op1val:0x40000000ff7fffff;  op2val:0xfffeffff00000040
TEST_PKRR_OP(kstsa32, x3, x9, x28, 0x0000000000000000, 0x40000000ff7fffff, 0xfffeffff00000040, x9, x4, 128, x14)

inst_24:
// rs1==x26, rs2==x5, rd==x2, rs2_w1_val == -32769, rs2_w0_val == 1024, rs1_w1_val == 8388608
// opcode: kstsa32 ; op1:x26; op2:x5; dest:x2; op1val:0x80000000001000;  op2val:0xffff7fff00000400
TEST_PKRR_OP(kstsa32, x2, x26, x5, 0x0000000000000000, 0x80000000001000, 0xffff7fff00000400, x26, x4, 144, x14)

inst_25:
// rs1==x30, rs2==x11, rd==x15, rs2_w1_val == -16385, rs2_w0_val == 131072, rs1_w0_val == -65, rs1_w1_val == -32769
// opcode: kstsa32 ; op1:x30; op2:x11; dest:x15; op1val:0xffff7fffffffffbf;  op2val:0xffffbfff00020000
TEST_PKRR_OP(kstsa32, x15, x30, x11, 0x0000000000000000, 0xffff7fffffffffbf, 0xffffbfff00020000, x30, x4, 160, x14)

inst_26:
// rs1==x28, rs2==x8, rd==x5, rs2_w1_val == -8193, rs2_w0_val == -4194305
// opcode: kstsa32 ; op1:x28; op2:x8; dest:x5; op1val:0x00000600000005;  op2val:0xffffdfffffbfffff
TEST_PKRR_OP(kstsa32, x5, x28, x8, 0x0000000000000000, 0x00000600000005, 0xffffdfffffbfffff, x28, x4, 176, x14)

inst_27:
// rs1==x21, rs2==x7, rd==x16, rs2_w1_val == -4097, rs1_w0_val == 8, rs2_w0_val == 8
// opcode: kstsa32 ; op1:x21; op2:x7; dest:x16; op1val:0x01000000000008;  op2val:0xffffefff00000008
TEST_PKRR_OP(kstsa32, x16, x21, x7, 0x0000000000000000, 0x01000000000008, 0xffffefff00000008, x21, x4, 192, x14)

inst_28:
// rs1==x15, rs2==x16, rd==x17, rs2_w1_val == -2049, rs1_w1_val == 1
// opcode: kstsa32 ; op1:x15; op2:x16; dest:x17; op1val:0x00000180000000;  op2val:0xfffff7ff00000200
TEST_PKRR_OP(kstsa32, x17, x15, x16, 0x0000000000000000, 0x00000180000000, 0xfffff7ff00000200, x15, x4, 208, x2)

inst_29:
// rs1==x13, rs2==x31, rd==x19, rs2_w1_val == -1025, rs1_w0_val == 128
// opcode: kstsa32 ; op1:x13; op2:x31; dest:x19; op1val:0xfffffffd00000080;  op2val:0xfffffbff80000000
TEST_PKRR_OP(kstsa32, x19, x13, x31, 0x0000000000000000, 0xfffffffd00000080, 0xfffffbff80000000, x13, x4, 224, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x0, rs2==x14, rd==x27, rs2_w1_val == -513, rs1_w0_val == 2147483647
// opcode: kstsa32 ; op1:x0; op2:x14; dest:x27; op1val:0xfffffffd7fffffff;  op2val:0xfffffdff20000000
TEST_PKRR_OP(kstsa32, x27, x0, x14, 0x0000000000000000, 0xfffffffd7fffffff, 0xfffffdff20000000, x0, x1, 0, x2)

inst_31:
// rs1==x11, rs2==x0, rd==x14, rs2_w1_val == -257, rs2_w0_val == -268435457
// opcode: kstsa32 ; op1:x11; op2:x0; dest:x14; op1val:0x00000900000004;  op2val:0xfffffeffefffffff
TEST_PKRR_OP(kstsa32, x14, x11, x0, 0x0000000000000000, 0x00000900000004, 0xfffffeffefffffff, x11, x1, 16, x2)

inst_32:
// rs2_w1_val == -129, rs1_w1_val == -129
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00040000;  op2val:0xffffff7f00000006
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00040000, 0xffffff7f00000006, x30, x1, 32, x2)

inst_33:
// rs2_w1_val == -65, rs1_w0_val == -67108865, rs1_w1_val == 2048, rs2_w0_val == -2097153
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800fbffffff;  op2val:0xffffffbfffdfffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x000800fbffffff, 0xffffffbfffdfffff, x30, x1, 48, x2)

inst_34:
// rs2_w1_val == -17, rs1_w1_val == 8192
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x0020007fffffff;  op2val:0xffffffef55555555
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x0020007fffffff, 0xffffffef55555555, x30, x1, 64, x2)

inst_35:
// rs2_w1_val == -9, rs1_w1_val == -65
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf3fffffff;  op2val:0xfffffff7ffdfffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffbf3fffffff, 0xfffffff7ffdfffff, x30, x1, 80, x2)

inst_36:
// rs2_w1_val == -5, rs1_w1_val == -257, rs2_w0_val == 524288
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffffffbf;  op2val:0xfffffffb00080000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffeffffffffbf, 0xfffffffb00080000, x30, x1, 96, x2)

inst_37:
// rs2_w1_val == -3, rs1_w1_val == -2097153
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffff7fffff;  op2val:0xfffffffd00000007
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xffdfffffff7fffff, 0xfffffffd00000007, x30, x1, 112, x2)

inst_38:
// rs2_w1_val == -2, rs1_w1_val == 2097152
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000010000000;  op2val:0xfffffffeffbfffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x20000010000000, 0xfffffffeffbfffff, x30, x1, 128, x2)

inst_39:
// rs2_w1_val == -2147483648, rs2_w0_val == 4194304, rs1_w1_val == -8388609
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000010;  op2val:0x8000000000400000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000010, 0x8000000000400000, x30, x1, 144, x2)

inst_40:
// rs2_w1_val == 536870912, rs1_w0_val == -257, rs2_w0_val == -33
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffeff;  op2val:0x20000000ffffffdf
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffeff, 0x20000000ffffffdf, x30, x1, 160, x2)

inst_41:
// rs2_w1_val == 268435456, rs2_w0_val == -65537
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffffdfff;  op2val:0x10000000fffeffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xffdfffffffffdfff, 0x10000000fffeffff, x30, x1, 176, x2)

inst_42:
// rs2_w1_val == 67108864, rs1_w0_val == 64, rs2_w0_val == -16385
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000040;  op2val:0x4000000ffffbfff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000040, 0x4000000ffffbfff, x30, x1, 192, x2)

inst_43:
// rs2_w1_val == 33554432, rs1_w0_val == -65537, rs2_w0_val == 2097152
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffeffff;  op2val:0x200000000200000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffeffff, 0x200000000200000, x30, x1, 208, x2)

inst_44:
// rs2_w1_val == 16777216, rs1_w0_val == 512, rs2_w0_val == 134217728
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000200;  op2val:0x100000008000000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x00002000000200, 0x100000008000000, x30, x1, 224, x2)

inst_45:
// rs2_w1_val == 8388608, rs2_w0_val == -3
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000080;  op2val:0x800000fffffffd
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x00080000000080, 0x800000fffffffd, x30, x1, 240, x2)

inst_46:
// rs2_w1_val == 4194304, rs1_w1_val == 536870912, rs2_w0_val == 16
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000010;  op2val:0x40000000000010
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x2000000000000010, 0x40000000000010, x30, x1, 256, x2)

inst_47:
// rs2_w1_val == 2097152, rs1_w1_val == -1, rs2_w0_val == 268435456
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000040;  op2val:0x20000010000000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffff00000040, 0x20000010000000, x30, x1, 272, x2)

inst_48:
// rs2_w1_val == 1048576, rs2_w0_val == -1073741825
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffffffbf;  op2val:0x100000bfffffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x000008ffffffbf, 0x100000bfffffff, x30, x1, 288, x2)

inst_49:
// rs2_w1_val == 524288, rs1_w0_val == 134217728
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000108000000;  op2val:0x08000000001000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x00000108000000, 0x08000000001000, x30, x1, 304, x2)

inst_50:
// rs2_w1_val == 262144, rs1_w0_val == -1431655766, rs2_w0_val == -65
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000aaaaaaaa;  op2val:0x040000ffffffbf
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x20000000aaaaaaaa, 0x040000ffffffbf, x30, x1, 320, x2)

inst_51:
// rs2_w1_val == 131072, rs1_w1_val == -131073, rs1_w0_val == 2048
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000800;  op2val:0x020000fffffffd
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000800, 0x020000fffffffd, x30, x1, 336, x2)

inst_52:
// rs1_w0_val == 33554432, rs2_w0_val == 67108864, rs1_w1_val == 128
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008002000000;  op2val:0x3fffffff04000000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x00008002000000, 0x3fffffff04000000, x30, x1, 352, x2)

inst_53:
// rs1_w0_val == 8388608, rs1_w1_val == -5
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00800000;  op2val:0x400000000000200
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00800000, 0x400000000000200, x30, x1, 368, x2)

inst_54:
// rs1_w0_val == 2097152, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600200000;  op2val:0x80000000fffffffc
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x00000600200000, 0x80000000fffffffc, x30, x1, 384, x2)

inst_55:
// rs1_w0_val == 1048576, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00100000;  op2val:0xfffffff6fffffff9
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00100000, 0xfffffff6fffffff9, x30, x1, 400, x2)

inst_56:
// rs1_w0_val == 524288, rs1_w1_val == 131072
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000080000;  op2val:0xfffffffc00000001
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x02000000080000, 0xfffffffc00000001, x30, x1, 416, x2)

inst_57:
// rs1_w0_val == 131072, rs2_w0_val == 16777216
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00020000;  op2val:0xefffffff01000000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00020000, 0xefffffff01000000, x30, x1, 432, x2)

inst_58:
// rs1_w0_val == 65536, rs2_w1_val == -1, rs1_w1_val == -262145
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00010000;  op2val:0xffffffff00001000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00010000, 0xffffffff00001000, x30, x1, 448, x2)

inst_59:
// rs1_w0_val == 32768, rs2_w0_val == -5, rs1_w1_val == -16385
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00008000;  op2val:0xc0000000fffffffb
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00008000, 0xc0000000fffffffb, x30, x1, 464, x2)

inst_60:
// rs1_w0_val == 16384, rs2_w1_val == 16384
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000004000;  op2val:0x004000ffffdfff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xc000000000004000, 0x004000ffffdfff, x30, x1, 480, x2)

inst_61:
// rs1_w0_val == 256, rs2_w0_val == -513, rs1_w1_val == -513
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000100;  op2val:0xaaaaaaaafffffdff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000100, 0xaaaaaaaafffffdff, x30, x1, 496, x2)

inst_62:
// rs1_w0_val == 32, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000020;  op2val:0xffefffffffffbfff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xffffefff00000020, 0xffefffffffffbfff, x30, x1, 512, x2)

inst_63:
// rs1_w0_val == 2, rs1_w1_val == 134217728
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000002;  op2val:0xffffbfffffefffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x800000000000002, 0xffffbfffffefffff, x30, x1, 528, x2)

inst_64:
// rs1_w0_val == 0, rs2_w0_val == -32769, rs1_w1_val == 262144
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000000;  op2val:0x080000ffff7fff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x04000000000000, 0x080000ffff7fff, x30, x1, 544, x2)

inst_65:
// rs1_w0_val == -1, rs2_w1_val == 4096, rs2_w0_val == 2048
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000003ffffffff;  op2val:0x00100000000800
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x000003ffffffff, 0x00100000000800, x30, x1, 560, x2)

inst_66:
// rs2_w1_val == 65536, rs1_w1_val == -8193, rs1_w0_val == -16777217
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffeffffff;  op2val:0x010000fffffff8
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xffffdffffeffffff, 0x010000fffffff8, x30, x1, 576, x2)

inst_67:
// rs2_w1_val == 32768, rs2_w0_val == -8388609
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000400;  op2val:0x008000ff7fffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000400, 0x008000ff7fffff, x30, x1, 592, x2)

inst_68:
// rs2_w1_val == 8192, rs1_w1_val == 1431655765
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555ffffefff;  op2val:0x00200008000000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x55555555ffffefff, 0x00200008000000, x30, x1, 608, x2)

inst_69:
// rs2_w1_val == 2048, rs1_w0_val == -17
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffffef;  op2val:0x00080000000000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffffef, 0x00080000000000, x30, x1, 624, x2)

inst_70:
// rs2_w1_val == 1024, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000009;  op2val:0x000400ffffffbf
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffff00000009, 0x000400ffffffbf, x30, x1, 640, x2)

inst_71:
// rs2_w1_val == 512, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000003;  op2val:0x00020040000000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x00080000000003, 0x00020040000000, x30, x1, 656, x2)

inst_72:
// rs2_w1_val == 256, rs1_w0_val == -2
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffffffe;  op2val:0x00010001000000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x000001fffffffe, 0x00010001000000, x30, x1, 672, x2)

inst_73:
// rs2_w1_val == 128, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffffef;  op2val:0x00008000000007
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffffef, 0x00008000000007, x30, x1, 688, x2)

inst_74:
// rs2_w1_val == 32, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000000400;  op2val:0x000020fffffff8
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x00008000000400, 0x000020fffffff8, x30, x1, 704, x2)

inst_75:
// rs2_w1_val == 16, rs2_w0_val == 4, rs1_w1_val == -1431655766
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffffff9;  op2val:0x00001000000004
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffffff9, 0x00001000000004, x30, x1, 720, x2)

inst_76:
// rs2_w1_val == 8, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000000;  op2val:0x000008fffffffd
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000000, 0x000008fffffffd, x30, x1, 736, x2)

inst_77:
// rs2_w1_val == 4, rs1_w0_val == -1025, rs2_w0_val == -2
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800fffffbff;  op2val:0x000004fffffffe
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x000800fffffbff, 0x000004fffffffe, x30, x1, 752, x2)

inst_78:
// rs2_w1_val == 2, rs1_w1_val == -33, rs2_w0_val == 16384
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf08000000;  op2val:0x00000200004000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffdf08000000, 0x00000200004000, x30, x1, 768, x2)

inst_79:
// rs2_w1_val == 1, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800000001;  op2val:0x00000100000200
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff800000001, 0x00000100000200, x30, x1, 784, x2)

inst_80:
// rs2_w1_val == 0, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000003;  op2val:0x000000ffdfffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x1000000000000003, 0x000000ffdfffff, x30, x1, 800, x2)

inst_81:
// rs2_w0_val == -1431655766, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000feffffff;  op2val:0x000007aaaaaaaa
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x010000feffffff, 0x000007aaaaaaaa, x30, x1, 816, x2)

inst_82:
// rs2_w0_val == -134217729, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000009;  op2val:0x10000000f7ffffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x04000000000009, 0x10000000f7ffffff, x30, x1, 832, x2)

inst_83:
// rs2_w0_val == -67108865, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffffff;  op2val:0x040000fbffffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffffff, 0x040000fbffffff, x30, x1, 848, x2)

inst_84:
// rs2_w0_val == -33554433, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000007;  op2val:0x000002fdffffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000007, 0x000002fdffffff, x30, x1, 864, x2)

inst_85:
// rs2_w0_val == 262144, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500002000;  op2val:0x00000300040000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x5555555500002000, 0x00000300040000, x30, x1, 880, x2)

inst_86:
// rs2_w0_val == 65536, rs1_w1_val == 1048576, rs1_w0_val == -32769
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffff7fff;  op2val:0x00004000010000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x100000ffff7fff, 0x00004000010000, x30, x1, 896, x2)

inst_87:
// rs2_w0_val == 8192, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600010000;  op2val:0x100000000002000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x00000600010000, 0x100000000002000, x30, x1, 912, x2)

inst_88:
// rs2_w0_val == 256, rs1_w1_val == 16384
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ff7fffff;  op2val:0x00080000000100
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x004000ff7fffff, 0x00080000000100, x30, x1, 928, x2)

inst_89:
// rs2_w0_val == 128, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009fffffffc;  op2val:0xfdffffff00000080
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x000009fffffffc, 0xfdffffff00000080, x30, x1, 944, x2)

inst_90:
// rs2_w0_val == 32, rs1_w0_val == 1073741824, rs1_w1_val == -2147483648
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000040000000;  op2val:0xfffff7ff00000020
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x8000000040000000, 0xfffff7ff00000020, x30, x1, 960, x2)

inst_91:
// rs2_w0_val == -1, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009aaaaaaaa;  op2val:0x008000ffffffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x000009aaaaaaaa, 0x008000ffffffff, x30, x1, 976, x2)

inst_92:
// rs1_w1_val == 2147483647, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000005;  op2val:0x02000000000007
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000005, 0x02000000000007, x30, x1, 992, x2)

inst_93:
// rs1_w1_val == -536870913, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000008;  op2val:0x00000800040000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000008, 0x00000800040000, x30, x1, 1008, x2)

inst_94:
// rs1_w1_val == -134217729, rs1_w0_val == 67108864
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff04000000;  op2val:0x200000000000800
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff04000000, 0x200000000000800, x30, x1, 1024, x2)

inst_95:
// rs1_w1_val == -33554433, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000005;  op2val:0xffffbffffeffffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000005, 0xffffbffffeffffff, x30, x1, 1040, x2)

inst_96:
// rs1_w1_val == -16777217, rs2_w0_val == -17
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00200000;  op2val:0xfffffffcffffffef
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00200000, 0xfffffffcffffffef, x30, x1, 1056, x2)

inst_97:
// rs1_w1_val == -4194305, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000006;  op2val:0x00000601000000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000006, 0x00000601000000, x30, x1, 1072, x2)

inst_98:
// rs1_w1_val == -1048577, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00001000;  op2val:0xfffffffb00000008
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xffefffff00001000, 0xfffffffb00000008, x30, x1, 1088, x2)

inst_99:
// rs1_w1_val == -65537, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffdfff;  op2val:0xfffffff6ffffbfff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffdfff, 0xfffffff6ffffbfff, x30, x1, 1104, x2)

inst_100:
// rs1_w1_val == -2049, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000040;  op2val:0xfffffeff00000200
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000040, 0xfffffeff00000200, x30, x1, 1120, x2)

inst_101:
// rs1_w1_val == -1025, rs1_w0_val == -513
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffffffdff;  op2val:0xffff7fff00020000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffffdff, 0xffff7fff00020000, x30, x1, 1136, x2)

inst_102:
// rs1_w1_val == -17, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffffeff;  op2val:0x01000010000000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffeffffffeff, 0x01000010000000, x30, x1, 1152, x2)

inst_103:
// rs1_w1_val == -9, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000002;  op2val:0xffffff7fffdfffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff700000002, 0xffffff7fffdfffff, x30, x1, 1168, x2)

inst_104:
// rs1_w1_val == 67108864, rs2_w0_val == 1048576
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000800000;  op2val:0x08000000100000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x400000000800000, 0x08000000100000, x30, x1, 1184, x2)

inst_105:
// rs1_w1_val == 33554432, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000010000000;  op2val:0xfffffffb00200000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x200000010000000, 0xfffffffb00200000, x30, x1, 1200, x2)

inst_106:
// rs1_w1_val == 16777216, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000feffffff;  op2val:0x000800ffffdfff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x1000000feffffff, 0x000800ffffdfff, x30, x1, 1216, x2)

inst_107:
// rs1_w1_val == 4194304, rs2_w0_val == -257, rs1_w0_val == -134217729
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000f7ffffff;  op2val:0x020000fffffeff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x400000f7ffffff, 0x020000fffffeff, x30, x1, 1232, x2)

inst_108:
// rs1_w1_val == 32768, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffffbff;  op2val:0x00000900004000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x008000fffffbff, 0x00000900004000, x30, x1, 1248, x2)

inst_109:
// rs1_w1_val == 4096, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffff7ff;  op2val:0xffffffff80000000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x001000fffff7ff, 0xffffffff80000000, x30, x1, 1264, x2)

inst_110:
// rs1_w1_val == 1024, rs1_w0_val == -536870913, rs2_w0_val == -524289
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400dfffffff;  op2val:0x000002fff7ffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x000400dfffffff, 0x000002fff7ffff, x30, x1, 1280, x2)

inst_111:
// rs1_w1_val == 512, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200fffffdff;  op2val:0x00004000000005
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x000200fffffdff, 0x00004000000005, x30, x1, 1296, x2)

inst_112:
// rs1_w1_val == 256, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100feffffff;  op2val:0xfffffffbbfffffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x000100feffffff, 0xfffffffbbfffffff, x30, x1, 1312, x2)

inst_113:
// rs1_w1_val == 16, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001080000000;  op2val:0xf7ffffff80000000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x00001080000000, 0xf7ffffff80000000, x30, x1, 1328, x2)

inst_114:
// rs1_w1_val == 4, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000008;  op2val:0x40000000400000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x00000400000008, 0x40000000400000, x30, x1, 1344, x2)

inst_115:
// rs1_w1_val == 2, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffffffe;  op2val:0xfffffeff00000040
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x000002fffffffe, 0xfffffeff00000040, x30, x1, 1360, x2)

inst_116:
// rs1_w1_val == 0, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffffffa;  op2val:0x200000fffffdff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x000000fffffffa, 0x200000fffffdff, x30, x1, 1376, x2)

inst_117:
// rs1_w0_val == 1431655765, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000955555555;  op2val:0x8000000ffbfffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x00000955555555, 0x8000000ffbfffff, x30, x1, 1392, x2)

inst_118:
// rs1_w0_val == -1073741825, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfbfffffff;  op2val:0x20000000008000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xffffffdfbfffffff, 0x20000000008000, x30, x1, 1408, x2)

inst_119:
// rs1_w0_val == -33554433, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fdffffff;  op2val:0x000010fff7ffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x080000fdffffff, 0x000010fff7ffff, x30, x1, 1424, x2)

inst_120:
// rs1_w0_val == -2097153, rs2_w0_val == 8388608
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffdfffff;  op2val:0x00010000800000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffdffdfffff, 0x00010000800000, x30, x1, 1440, x2)

inst_121:
// rs2_w0_val == 33554432, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000902000000;  op2val:0xfffdffff02000000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x00000902000000, 0xfffdffff02000000, x30, x1, 1456, x2)

inst_122:
// rs2_w0_val == -4097, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000004;  op2val:0x000000ffffefff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000004, 0x000000ffffefff, x30, x1, 1472, x2)

inst_123:
// rs1_w0_val == -1048577, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffefffff;  op2val:0xfffffff87fffffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x000800ffefffff, 0xfffffff87fffffff, x30, x1, 1488, x2)

inst_124:
// rs2_w0_val == -2049, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700020000;  op2val:0xfffffffefffff7ff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff700020000, 0xfffffffefffff7ff, x30, x1, 1504, x2)

inst_125:
// rs1_w0_val == -262145, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffffffbffff;  op2val:0x7fffffffffffefff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x3ffffffffffbffff, 0x7fffffffffffefff, x30, x1, 1520, x2)

inst_126:
// rs2_w0_val == -129, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6ffffffbf;  op2val:0x000200ffffff7f
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff6ffffffbf, 0x000200ffffff7f, x30, x1, 1536, x2)

inst_127:
// rs1_w0_val == 536870912, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000020000000;  op2val:0xfffffeff00008000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x800000020000000, 0xfffffeff00008000, x30, x1, 1552, x2)

inst_128:
// rs1_w0_val == -33, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000ffffffdf;  op2val:0x8000000008000000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x1000000ffffffdf, 0x8000000008000000, x30, x1, 1568, x2)

inst_129:
// rs1_w0_val == -9, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfffffff7;  op2val:0x004000fffffff8
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffbfffffff7, 0x004000fffffff8, x30, x1, 1584, x2)

inst_130:
// rs1_w0_val == -5, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffffffb;  op2val:0x00200040000000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x040000fffffffb, 0x00200040000000, x30, x1, 1600, x2)

inst_131:
// rs1_w0_val == -3, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffd;  op2val:0xfffffffffffffffa
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffffd, 0xfffffffffffffffa, x30, x1, 1616, x2)

inst_132:
// rs1_w0_val == -16385, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004ffffbfff;  op2val:0x000400c0000000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x000004ffffbfff, 0x000400c0000000, x30, x1, 1632, x2)

inst_133:
// rs2_w0_val == -9, 
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500040000;  op2val:0x010000fffffff7
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x5555555500040000, 0x010000fffffff7, x30, x1, 1648, x2)

inst_134:
// rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w0_val == -1025, rs2_w1_val == 134217728
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff980000000;  op2val:0x8000000fffffbff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffff980000000, 0x8000000fffffbff, x30, x1, 1664, x2)

inst_135:
// rs2_w1_val == -524289, rs2_w0_val == 0, rs1_w0_val == -524289
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffff7ffff;  op2val:0xfff7ffff00000000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xeffffffffff7ffff, 0xfff7ffff00000000, x30, x1, 1680, x2)

inst_136:
// rs2_w1_val == -513, rs1_w0_val == 2147483647
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd7fffffff;  op2val:0xfffffdff20000000
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0xfffffffd7fffffff, 0xfffffdff20000000, x30, x1, 1696, x2)

inst_137:
// rs2_w1_val == -257, rs2_w0_val == -268435457
// opcode: kstsa32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000004;  op2val:0xfffffeffefffffff
TEST_PKRR_OP(kstsa32, x31, x30, x29, 0x0000000000000000, 0x00000900000004, 0xfffffeffefffffff, x30, x1, 1712, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 216*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
