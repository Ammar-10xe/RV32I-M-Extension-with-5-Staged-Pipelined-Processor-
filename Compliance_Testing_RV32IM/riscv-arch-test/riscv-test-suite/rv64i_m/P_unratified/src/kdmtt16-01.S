
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kdmtt16 instruction of the RISC-V RV64PZicsr extension for the kdmtt16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kdmtt16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x25, rs2==x29, rd==x25, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h3_val == -129, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 16, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val == 128, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs2_h2_val == 4096, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 2048, rs2_h0_val == 2048
// opcode: kdmtt16 ; op1:x25; op2:x29; dest:x25; op1val:0x10c00000808000;  op2val:0xff7f100008000800
TEST_PKRR_OP(kdmtt16, x25, x25, x29, 0x0000000000000000, 0x10c00000808000, 0xff7f100008000800, x25, x2, 0, x6)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x24, rs2==x0, rd==x5, rs1_h3_val == rs2_h3_val, rs2_h0_val == 2, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h2_val == -65, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val == -1025, rs2_h3_val == 16, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -257, rs2_h1_val == 1024
// opcode: kdmtt16 ; op1:x24; op2:x0; dest:x5; op1val:0x10fbfffeff0005;  op2val:0x10ffbf04000002
TEST_PKRR_OP(kdmtt16, x5, x24, x0, 0x0000000000000000, 0x10fbfffeff0005, 0x10ffbf04000002, x24, x2, 16, x6)

inst_2:
// rs1 == rs2 != rd, rs1==x9, rs2==x9, rd==x3, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h0_val == -3, rs2_h2_val == -129, rs1_h1_val == 64, rs1_h3_val == -8193, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val == -65
// opcode: kdmtt16 ; op1:x9; op2:x9; dest:x3; op1val:0xdfffffbf0040fffd;  op2val:0x05ff7ffff90005
TEST_PKRR_OP(kdmtt16, x3, x9, x9, 0x0000000000000000, 0xdfffffbf0040fffd, 0x05ff7ffff90005, x9, x2, 32, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h3_val == -513, rs1_h2_val == -2049, rs1_h0_val == -21846, rs1_h1_val == -4097, rs2_h2_val == 64
// opcode: kdmtt16 ; op1:x7; op2:x7; dest:x7; op1val:0xfdfff7ffefffaaaa;  op2val:0xfffc004000090007
TEST_PKRR_OP(kdmtt16, x7, x7, x7, 0x0000000000000000, 0xfdfff7ffefffaaaa, 0xfffc004000090007, x7, x2, 48, x6)

inst_4:
// rs2 == rd != rs1, rs1==x21, rs2==x13, rd==x13, rs1_h2_val == rs2_h2_val, rs1_h1_val == -5, rs1_h3_val == 256, rs2_h3_val == -16385, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == 1024
// opcode: kdmtt16 ; op1:x21; op2:x13; dest:x13; op1val:0x100c000fffb0006;  op2val:0xbfffc000fff80400
TEST_PKRR_OP(kdmtt16, x13, x21, x13, 0x0000000000000000, 0x100c000fffb0006, 0xbfffc000fff80400, x21, x2, 64, x6)

inst_5:
// rs1==x8, rs2==x21, rd==x1, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h2_val == -16385, rs1_h2_val == 64, rs2_h1_val == 16384, rs1_h0_val == 1, rs1_h1_val == -9
// opcode: kdmtt16 ; op1:x8; op2:x21; dest:x1; op1val:0xfff60040fff70001;  op2val:0x03bfff40000006
TEST_PKRR_OP(kdmtt16, x1, x8, x21, 0x0000000000000000, 0xfff60040fff70001, 0x03bfff40000006, x8, x2, 80, x6)

inst_6:
// rs1==x18, rs2==x30, rd==x4, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 512, rs2_h3_val == -17, rs2_h0_val == 0, rs1_h3_val == 32767, rs1_h1_val == 4
// opcode: kdmtt16 ; op1:x18; op2:x30; dest:x4; op1val:0x7fff02000004fff8;  op2val:0xffef3fffc0000000
TEST_PKRR_OP(kdmtt16, x4, x18, x30, 0x0000000000000000, 0x7fff02000004fff8, 0xffef3fffc0000000, x18, x2, 96, x6)

inst_7:
// rs1==x14, rs2==x27, rd==x12, rs1_h1_val == rs2_h1_val, rs2_h2_val == -2049, rs2_h1_val == 0, rs2_h0_val == -129, rs1_h2_val == -4097, rs1_h1_val == 0, rs1_h0_val < 0 and rs2_h0_val < 0
// opcode: kdmtt16 ; op1:x14; op2:x27; dest:x12; op1val:0xfff6efff0000fff6;  op2val:0x06f7ff0000ff7f
TEST_PKRR_OP(kdmtt16, x12, x14, x27, 0x0000000000000000, 0xfff6efff0000fff6, 0x06f7ff0000ff7f, x14, x2, 112, x6)

inst_8:
// rs1==x30, rs2==x19, rd==x22, rs1_h0_val == rs2_h0_val, rs2_h1_val == -8193, rs1_h1_val == 2048, rs2_h0_val == -16385, rs2_h3_val == 2048, rs2_h2_val == 128, rs1_h0_val == -16385, rs1_h3_val == 8192, rs1_h2_val == -32768
// opcode: kdmtt16 ; op1:x30; op2:x19; dest:x22; op1val:0x200080000800bfff;  op2val:0x8000080dfffbfff
TEST_PKRR_OP(kdmtt16, x22, x30, x19, 0x0000000000000000, 0x200080000800bfff, 0x8000080dfffbfff, x30, x2, 128, x6)

inst_9:
// rs1==x16, rs2==x20, rd==x19, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 2, rs2_h0_val == -2049, rs1_h2_val == 1, rs2_h3_val == 512, rs1_h3_val == -9
// opcode: kdmtt16 ; op1:x16; op2:x20; dest:x19; op1val:0xfff70001fff90007;  op2val:0x200fffa0002f7ff
TEST_PKRR_OP(kdmtt16, x19, x16, x20, 0x0000000000000000, 0xfff70001fff90007, 0x200fffa0002f7ff, x16, x2, 144, x6)

inst_10:
// rs1==x4, rs2==x25, rd==x8, rs2_h3_val == -21846, rs1_h1_val == -3, rs1_h0_val == -33, rs1_h2_val == 2048, rs2_h1_val == -1, rs2_h0_val == -1025
// opcode: kdmtt16 ; op1:x4; op2:x25; dest:x8; op1val:0xfff70800fffdffdf;  op2val:0xaaaafffafffffbff
TEST_PKRR_OP(kdmtt16, x8, x4, x25, 0x0000000000000000, 0xfff70800fffdffdf, 0xaaaafffafffffbff, x4, x2, 160, x6)

inst_11:
// rs1==x22, rs2==x28, rd==x9, rs2_h3_val == 21845, rs1_h1_val == 16384, rs2_h0_val == 21845, rs1_h3_val == 4, rs2_h1_val == -129, rs1_h2_val == -8193, rs1_h0_val == 21845
// opcode: kdmtt16 ; op1:x22; op2:x28; dest:x9; op1val:0x04dfff40005555;  op2val:0x5555ffbfff7f5555
TEST_PKRR_OP(kdmtt16, x9, x22, x28, 0x0000000000000000, 0x04dfff40005555, 0x5555ffbfff7f5555, x22, x2, 176, x6)

inst_12:
// rs1==x15, rs2==x16, rd==x17, rs2_h3_val == 32767, rs1_h3_val == -257
// opcode: kdmtt16 ; op1:x15; op2:x16; dest:x17; op1val:0xfeff0001fffafff8;  op2val:0x7fff3fff0000c000
TEST_PKRR_OP(kdmtt16, x17, x15, x16, 0x0000000000000000, 0xfeff0001fffafff8, 0x7fff3fff0000c000, x15, x2, 192, x6)

inst_13:
// rs1==x0, rs2==x14, rd==x11, rs2_h3_val == -8193, rs1_h3_val == -21846, rs2_h1_val == -2, rs1_h1_val == -513, rs2_h0_val == -17
// opcode: kdmtt16 ; op1:x0; op2:x14; dest:x11; op1val:0xaaaafff8fdfffffd;  op2val:0xdfffc000fffeffef
TEST_PKRR_OP(kdmtt16, x11, x0, x14, 0x0000000000000000, 0xaaaafff8fdfffffd, 0xdfffc000fffeffef, x0, x2, 208, x6)

inst_14:
// rs1==x28, rs2==x26, rd==x21, rs2_h3_val == -4097, rs2_h2_val == -32768
// opcode: kdmtt16 ; op1:x28; op2:x26; dest:x21; op1val:0x10fff90007fff9;  op2val:0xefff8000fffcfff9
TEST_PKRR_OP(kdmtt16, x21, x28, x26, 0x0000000000000000, 0x10fff90007fff9, 0xefff8000fffcfff9, x28, x2, 224, x6)

inst_15:
// rs1==x20, rs2==x23, rd==x31, rs2_h3_val == -2049, rs1_h1_val == -1025, rs2_h2_val == 16, rs1_h3_val == 32
// opcode: kdmtt16 ; op1:x20; op2:x23; dest:x31; op1val:0x20fff6fbff3fff;  op2val:0xf7ff001000090005
TEST_PKRR_OP(kdmtt16, x31, x20, x23, 0x0000000000000000, 0x20fff6fbff3fff, 0xf7ff001000090005, x20, x2, 240, x9)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_16:
// rs1==x11, rs2==x15, rd==x14, rs2_h3_val == -1025, rs2_h2_val == 1024, rs2_h1_val == 4096, rs1_h0_val == -257
// opcode: kdmtt16 ; op1:x11; op2:x15; dest:x14; op1val:0xfffcfffafff9feff;  op2val:0xfbff04001000fff6
TEST_PKRR_OP(kdmtt16, x14, x11, x15, 0x0000000000000000, 0xfffcfffafff9feff, 0xfbff04001000fff6, x11, x7, 0, x9)

inst_17:
// rs1==x27, rs2==x10, rd==x20, rs2_h3_val == -513, rs1_h1_val == 8192, rs1_h0_val == 2, rs2_h2_val == -21846
// opcode: kdmtt16 ; op1:x27; op2:x10; dest:x20; op1val:0xfeff000120000002;  op2val:0xfdffaaaa0400c000
TEST_PKRR_OP(kdmtt16, x20, x27, x10, 0x0000000000000000, 0xfeff000120000002, 0xfdffaaaa0400c000, x27, x7, 16, x9)

inst_18:
// rs1==x19, rs2==x24, rd==x10, rs2_h3_val == -257, rs2_h2_val == -1025, rs1_h1_val == -2049
// opcode: kdmtt16 ; op1:x19; op2:x24; dest:x10; op1val:0xfffc0001f7fffffc;  op2val:0xfefffbffffff0009
TEST_PKRR_OP(kdmtt16, x10, x19, x24, 0x0000000000000000, 0xfffc0001f7fffffc, 0xfefffbffffff0009, x19, x7, 32, x9)

inst_19:
// rs1==x12, rs2==x1, rd==x27, rs2_h3_val == -65, rs1_h2_val == -16385, rs1_h1_val == -2, rs2_h2_val == 8, rs1_h3_val == -65
// opcode: kdmtt16 ; op1:x12; op2:x1; dest:x27; op1val:0xffbfbffffffe0001;  op2val:0xffbf000808000007
TEST_PKRR_OP(kdmtt16, x27, x12, x1, 0x0000000000000000, 0xffbfbffffffe0001, 0xffbf000808000007, x12, x7, 48, x9)

inst_20:
// rs1==x5, rs2==x12, rd==x24, rs2_h3_val == -33, rs2_h0_val == 64, rs1_h2_val == -1, rs1_h0_val == 2048, rs2_h1_val == -2049
// opcode: kdmtt16 ; op1:x5; op2:x12; dest:x24; op1val:0xc000fffffff60800;  op2val:0xffdf0010f7ff0040
TEST_PKRR_OP(kdmtt16, x24, x5, x12, 0x0000000000000000, 0xc000fffffff60800, 0xffdf0010f7ff0040, x5, x7, 64, x9)

inst_21:
// rs1==x13, rs2==x6, rd==x18, rs2_h3_val == -9, rs2_h1_val == -4097, rs1_h0_val == 8192, rs1_h2_val == 2, rs1_h1_val == -21846, rs2_h2_val == 0
// opcode: kdmtt16 ; op1:x13; op2:x6; dest:x18; op1val:0x7fff0002aaaa2000;  op2val:0xfff70000efff0800
TEST_PKRR_OP(kdmtt16, x18, x13, x6, 0x0000000000000000, 0x7fff0002aaaa2000, 0xfff70000efff0800, x13, x7, 80, x9)

inst_22:
// rs1==x17, rs2==x18, rd==x29, rs2_h3_val == -5, rs2_h1_val == 21845, rs1_h3_val == -1, rs2_h2_val == 4
// opcode: kdmtt16 ; op1:x17; op2:x18; dest:x29; op1val:0xfffff7fffff60009;  op2val:0xfffb000455553fff
TEST_PKRR_OP(kdmtt16, x29, x17, x18, 0x0000000000000000, 0xfffff7fffff60009, 0xfffb000455553fff, x17, x7, 96, x9)

inst_23:
// rs1==x29, rs2==x22, rd==x2, rs2_h3_val == -3, rs2_h1_val == -16385, rs2_h0_val == -1, rs1_h1_val == 8, rs1_h0_val == -8193, rs1_h3_val == 4096, rs2_h2_val == 32767
// opcode: kdmtt16 ; op1:x29; op2:x22; dest:x2; op1val:0x100002000008dfff;  op2val:0xfffd7fffbfffffff
TEST_PKRR_OP(kdmtt16, x2, x29, x22, 0x0000000000000000, 0x100002000008dfff, 0xfffd7fffbfffffff, x29, x7, 112, x9)

inst_24:
// rs1==x6, rs2==x4, rd==x23, rs2_h3_val == -2, rs2_h0_val == -65, rs1_h1_val == 21845, rs2_h1_val == -65
// opcode: kdmtt16 ; op1:x6; op2:x4; dest:x23; op1val:0x7fff000255553fff;  op2val:0xfffe0003ffbfffbf
TEST_PKRR_OP(kdmtt16, x23, x6, x4, 0x0000000000000000, 0x7fff000255553fff, 0xfffe0003ffbfffbf, x6, x7, 128, x9)

inst_25:
// rs1==x3, rs2==x11, rd==x6, rs2_h3_val == -32768, rs2_h2_val == 8192, rs2_h1_val == -3, rs1_h3_val == 8
// opcode: kdmtt16 ; op1:x3; op2:x11; dest:x6; op1val:0x080007fbfffff8;  op2val:0x80002000fffdbfff
TEST_PKRR_OP(kdmtt16, x6, x3, x11, 0x0000000000000000, 0x080007fbfffff8, 0x80002000fffdbfff, x3, x7, 144, x9)

inst_26:
// rs1==x1, rs2==x5, rd==x15, rs2_h3_val == 16384, rs1_h0_val == 16, rs2_h0_val == -4097, rs1_h2_val == -9, rs1_h1_val == 4096
// opcode: kdmtt16 ; op1:x1; op2:x5; dest:x15; op1val:0x3ffffff710000010;  op2val:0x4000f7ff0000efff
TEST_PKRR_OP(kdmtt16, x15, x1, x5, 0x0000000000000000, 0x3ffffff710000010, 0x4000f7ff0000efff, x1, x7, 160, x9)

inst_27:
// rs1==x31, rs2==x2, rd==x30, rs2_h3_val == 8192, rs2_h2_val == -1, rs2_h0_val == 8, rs1_h3_val == 64, rs2_h1_val == -5, rs1_h0_val == 32, rs1_h2_val == -513
// opcode: kdmtt16 ; op1:x31; op2:x2; dest:x30; op1val:0x40fdfffffd0020;  op2val:0x2000fffffffb0008
TEST_PKRR_OP(kdmtt16, x30, x31, x2, 0x0000000000000000, 0x40fdfffffd0020, 0x2000fffffffb0008, x31, x7, 176, x9)

inst_28:
// rs1==x2, rs2==x8, rd==x28, rs2_h3_val == 4096, rs2_h2_val == -33, rs2_h0_val == 8192, rs2_h1_val == -32768, rs1_h0_val == 256
// opcode: kdmtt16 ; op1:x2; op2:x8; dest:x28; op1val:0xfff8000508000100;  op2val:0x1000ffdf80002000
TEST_PKRR_OP(kdmtt16, x28, x2, x8, 0x0000000000000000, 0xfff8000508000100, 0x1000ffdf80002000, x2, x7, 192, x9)

inst_29:
// rs1==x26, rs2==x3, rd==x16, rs2_h3_val == 1024, rs2_h2_val == 2
// opcode: kdmtt16 ; op1:x26; op2:x3; dest:x16; op1val:0x40fff900060001;  op2val:0x4000002fffb0003
TEST_PKRR_OP(kdmtt16, x16, x26, x3, 0x0000000000000000, 0x40fff900060001, 0x4000002fffb0003, x26, x7, 208, x9)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x10, rs2==x31, rd==x0, rs2_h3_val == 256, rs2_h0_val == -8193, rs1_h2_val == 32, rs2_h2_val == 512
// opcode: kdmtt16 ; op1:x10; op2:x31; dest:x0; op1val:0xaaaa002040000002;  op2val:0x1000200fffbdfff
TEST_PKRR_OP(kdmtt16, x0, x10, x31, 0x0000000000000000, 0xaaaa002040000002, 0x1000200fffbdfff, x10, x1, 0, x2)

inst_31:
// rs1==x23, rs2==x17, rd==x26, rs2_h3_val == 128, rs2_h0_val == -33, rs1_h0_val == 128, rs1_h2_val == 0
// opcode: kdmtt16 ; op1:x23; op2:x17; dest:x26; op1val:0x030000fffd0080;  op2val:0x8000000005ffdf
TEST_PKRR_OP(kdmtt16, x26, x23, x17, 0x0000000000000000, 0x030000fffd0080, 0x8000000005ffdf, x23, x1, 16, x2)

inst_32:
// rs2_h3_val == 64, rs1_h2_val == 256
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10010010005555;  op2val:0x40800000063fff
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x10010010005555, 0x40800000063fff, x30, x1, 32, x2)

inst_33:
// rs2_h3_val == 32, rs1_h3_val == -32768, rs2_h1_val == 8192
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000020000000006;  op2val:0x203fff20000800
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x8000020000000006, 0x203fff20000800, x30, x1, 48, x2)

inst_34:
// rs2_h3_val == 8, rs1_h3_val == 16384, rs2_h1_val == 32, rs2_h0_val == -21846, rs1_h1_val == 16
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000ffff00100002;  op2val:0x08fffc0020aaaa
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x4000ffff00100002, 0x08fffc0020aaaa, x30, x1, 64, x2)

inst_35:
// rs2_h3_val == 4, rs1_h2_val == -5, rs2_h2_val == 2048, rs2_h0_val == -9, rs1_h3_val == -4097
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffbfffa0007;  op2val:0x0408008000fff7
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xeffffffbfffa0007, 0x0408008000fff7, x30, x1, 80, x2)

inst_36:
// rs1_h1_val == -32768, rs1_h0_val == -17
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0700008000ffef;  op2val:0x04ffbf0009efff
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x0700008000ffef, 0x04ffbf0009efff, x30, x1, 96, x2)

inst_37:
// rs1_h1_val == 1024, rs1_h2_val == 128, rs2_h3_val == -1, rs1_h0_val == -1
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000800400ffff;  op2val:0xffff2000fffe0007
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x100000800400ffff, 0xffff2000fffe0007, x30, x1, 112, x2)

inst_38:
// rs1_h1_val == 512, rs2_h0_val == 512
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x03c00002002000;  op2val:0xfefffff6fffd0200
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x03c00002002000, 0xfefffff6fffd0200, x30, x1, 128, x2)

inst_39:
// rs1_h1_val == 256, rs2_h1_val == -1025, rs1_h3_val == 21845, rs2_h2_val == -17
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x555580000100fff6;  op2val:0x4000ffeffbfffbff
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x555580000100fff6, 0x4000ffeffbfffbff, x30, x1, 144, x2)

inst_40:
// rs1_h1_val == 32, rs2_h0_val == 256
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000100200010;  op2val:0x06001000050100
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x8000000100200010, 0x06001000050100, x30, x1, 160, x2)

inst_41:
// rs1_h1_val == 2, rs1_h0_val == -2
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaac0000002fffe;  op2val:0x55550009ffbfbfff
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xaaaac0000002fffe, 0x55550009ffbfbfff, x30, x1, 176, x2)

inst_42:
// rs1_h1_val == 1, rs2_h2_val == -257
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffb00010100;  op2val:0xaaaafeff0005c000
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x7ffffffb00010100, 0xaaaafeff0005c000, x30, x1, 192, x2)

inst_43:
// rs1_h1_val == -1, rs1_h0_val == 4096, rs2_h2_val == -2
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x07ffffffff1000;  op2val:0x400fffe0800efff
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x07ffffffff1000, 0x400fffe0800efff, x30, x1, 208, x2)

inst_44:
// rs1_h0_val == 32767, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffff7ffefff7fff;  op2val:0x8000ff7fbfffaaaa
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xeffff7ffefff7fff, 0x8000ff7fbfffaaaa, x30, x1, 224, x2)

inst_45:
// rs1_h0_val == -4097, rs2_h0_val == 32, rs1_h2_val == -21846
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffaaaafff7efff;  op2val:0x10c0003fff0020
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xfdffaaaafff7efff, 0x10c0003fff0020, x30, x1, 240, x2)

inst_46:
// rs1_h0_val == -2049, rs2_h3_val == 0, rs1_h2_val == -129
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f0004f7ff;  op2val:0x0008008000fff7
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xffffff7f0004f7ff, 0x0008008000fff7, x30, x1, 256, x2)

inst_47:
// rs1_h0_val == -1025, rs2_h1_val == 8
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fbfffefffbff;  op2val:0x5555fff80008c000
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x09fbfffefffbff, 0x5555fff80008c000, x30, x1, 272, x2)

inst_48:
// rs1_h0_val == -513, rs2_h3_val == 2, rs1_h1_val == -17
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000ff7fffeffdff;  op2val:0x02040000030005
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x4000ff7fffeffdff, 0x02040000030005, x30, x1, 288, x2)

inst_49:
// rs1_h0_val == -129, rs1_h2_val == -17
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffef0080ff7f;  op2val:0xfbfffffc04000005
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xffbfffef0080ff7f, 0xfbfffffc04000005, x30, x1, 304, x2)

inst_50:
// rs1_h0_val == -65, rs1_h2_val == 16384, rs1_h1_val == -33, rs2_h1_val == -33
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x404000ffdfffbf;  op2val:0x55550003ffdfaaaa
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x404000ffdfffbf, 0x55550003ffdfaaaa, x30, x1, 320, x2)

inst_51:
// rs1_h0_val == -9, rs1_h3_val == 2, rs2_h2_val == -9
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffef3ffffff7;  op2val:0x100fff7fbff5555
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x02ffef3ffffff7, 0x100fff7fbff5555, x30, x1, 336, x2)

inst_52:
// rs1_h0_val == -5, rs2_h1_val == 512, rs1_h2_val == 4, rs2_h0_val == -513
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff600040200fffb;  op2val:0x7fff00060200fdff
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xfff600040200fffb, 0x7fff00060200fdff, x30, x1, 352, x2)

inst_53:
// rs1_h0_val == 16384, rs2_h1_val == -513, rs1_h3_val == -2049
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffdfff10004000;  op2val:0xff7ffffcfdff0100
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xf7ffdfff10004000, 0xff7ffffcfdff0100, x30, x1, 368, x2)

inst_54:
// rs1_h0_val == 1024, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x08000100030400;  op2val:0xfffe080000070200
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x08000100030400, 0xfffe080000070200, x30, x1, 384, x2)

inst_55:
// rs1_h0_val == 512, rs1_h2_val == 21845, rs2_h0_val == 1
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff555500010200;  op2val:0x08fffafffc0001
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xf7ff555500010200, 0x08fffafffc0001, x30, x1, 400, x2)

inst_56:
// rs1_h0_val == 64, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09efff00010040;  op2val:0xffef1000effffff6
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x09efff00010040, 0xffef1000effffff6, x30, x1, 416, x2)

inst_57:
// rs1_h0_val == 8, rs2_h1_val == -17
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x06020000060008;  op2val:0x4000bfffffef3fff
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x06020000060008, 0x4000bfffffef3fff, x30, x1, 432, x2)

inst_58:
// rs1_h0_val == 4, rs1_h3_val == 1024, rs2_h2_val == -8193, rs1_h2_val == 1024
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400040040000004;  op2val:0xfff7dfff40000040
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x400040040000004, 0xfff7dfff40000040, x30, x1, 448, x2)

inst_59:
// rs2_h1_val == 4, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0100aaaa7fff;  op2val:0xff7f00800004fff8
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x3fff0100aaaa7fff, 0xff7f00800004fff8, x30, x1, 464, x2)

inst_60:
// rs2_h1_val == 1, rs1_h0_val == 0
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09004000010000;  op2val:0xefff08000001fff7
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x09004000010000, 0xefff08000001fff7, x30, x1, 480, x2)

inst_61:
// rs2_h0_val == 32767, rs2_h1_val == -21846, rs1_h2_val == -3
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffd55554000;  op2val:0xfff90040aaaa7fff
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x1000fffd55554000, 0xfff90040aaaa7fff, x30, x1, 496, x2)

inst_62:
// rs2_h0_val == -257, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20c00000070007;  op2val:0xfbfffff7fff9feff
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x20c00000070007, 0xfbfffff7fff9feff, x30, x1, 512, x2)

inst_63:
// rs2_h0_val == -5, rs2_h2_val == 21845
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fbffaaaafffd;  op2val:0x205555f7fffffb
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xfff9fbffaaaafffd, 0x205555f7fffffb, x30, x1, 528, x2)

inst_64:
// rs2_h0_val == -3, rs1_h3_val == 0, rs2_h2_val == -3
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x00bfff00200100;  op2val:0x09fffdfff8fffd
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x00bfff00200100, 0x09fffdfff8fffd, x30, x1, 544, x2)

inst_65:
// rs2_h0_val == -2, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10003ffffff9dfff;  op2val:0xf7ffff7fbffffffe
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x10003ffffff9dfff, 0xf7ffff7fbffffffe, x30, x1, 560, x2)

inst_66:
// rs2_h0_val == -32768, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffef08000009;  op2val:0xffefbffffff68000
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xfff6ffef08000009, 0xffefbffffff68000, x30, x1, 576, x2)

inst_67:
// rs2_h0_val == 16384, rs1_h1_val == -129
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40ffbfff7f0004;  op2val:0xffef000400034000
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x40ffbfff7f0004, 0xffef000400034000, x30, x1, 592, x2)

inst_68:
// rs2_h0_val == 4096, rs1_h2_val == 4096
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x401000aaaa0400;  op2val:0xfffefff7bfff1000
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x401000aaaa0400, 0xfffefff7bfff1000, x30, x1, 608, x2)

inst_69:
// rs2_h0_val == 128, rs1_h1_val == -65
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0040ffbf0800;  op2val:0x5555ff7f00070080
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xffbf0040ffbf0800, 0x5555ff7f00070080, x30, x1, 624, x2)

inst_70:
// rs2_h0_val == 16, rs2_h2_val == 32, rs2_h1_val == -9
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000200fffffff6;  op2val:0x3fff0020fff70010
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xc0000200fffffff6, 0x3fff0020fff70010, x30, x1, 640, x2)

inst_71:
// rs2_h0_val == 4, rs1_h3_val == -3, rs1_h1_val == 32767
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdf7ff7fff0007;  op2val:0x10bfff00200004
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xfffdf7ff7fff0007, 0x10bfff00200004, x30, x1, 656, x2)

inst_72:
// rs1_h3_val == -16385, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffff0001;  op2val:0x200020000003ff7f
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xbfffffffffff0001, 0x200020000003ff7f, x30, x1, 672, x2)

inst_73:
// rs1_h3_val == -1025, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0005ffefdfff;  op2val:0x4000fff9fff8ffff
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xfbff0005ffefdfff, 0x4000fff9fff8ffff, x30, x1, 688, x2)

inst_74:
// rs1_h3_val == 512, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20040008000efff;  op2val:0x080008ffbffffc
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x20040008000efff, 0x080008ffbffffc, x30, x1, 704, x2)

inst_75:
// rs2_h2_val == -4097, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffefff00058000;  op2val:0xffdfefffff7fff7f
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xdfffefff00058000, 0xffdfefffff7fff7f, x30, x1, 720, x2)

inst_76:
// rs1_h3_val == 128, rs1_h2_val == 8192
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x802000fbff0800;  op2val:0x400008000004feff
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x802000fbff0800, 0x400008000004feff, x30, x1, 736, x2)

inst_77:
// rs2_h2_val == -513, rs1_h2_val == -2
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fffefffc0200;  op2val:0xfdfffdffff7f8000
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x00fffefffc0200, 0xfdfffdffff7f8000, x30, x1, 752, x2)

inst_78:
// rs1_h3_val == 1, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fffafffa0400;  op2val:0xffbf00101000fff7
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x01fffafffa0400, 0xffbf00101000fff7, x30, x1, 768, x2)

inst_79:
// rs2_h2_val == -5, rs2_h1_val == 256
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0001fff90010;  op2val:0xfffbfffb0100fff6
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xfbff0001fff90010, 0xfffbfffb0100fff6, x30, x1, 784, x2)

inst_80:
// rs1_h2_val == 32767, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x097ffffffa8000;  op2val:0xc000555502000010
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x097ffffffa8000, 0xc000555502000010, x30, x1, 800, x2)

inst_81:
// rs2_h2_val == 16384, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x09000600040008;  op2val:0x004000fff80008
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x09000600040008, 0x004000fff80008, x30, x1, 816, x2)

inst_82:
// rs2_h2_val == 256, rs2_h3_val == 1, rs2_h1_val == 16
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60003feff1000;  op2val:0x01010000100002
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xfff60003feff1000, 0x01010000100002, x30, x1, 832, x2)

inst_83:
// rs1_h2_val == -257, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9feff1000fffa;  op2val:0xfffffff92000fffd
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xfff9feff1000fffa, 0xfffffff92000fffd, x30, x1, 848, x2)

inst_84:
// rs1_h2_val == -33, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffdfffdfefff;  op2val:0x0400020004fffa
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x1000ffdfffdfefff, 0x0400020004fffa, x30, x1, 864, x2)

inst_85:
// rs2_h1_val == 32767, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x08000680001000;  op2val:0x02fffc7fffffff
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x08000680001000, 0x02fffc7fffffff, x30, x1, 880, x2)

inst_86:
// rs2_h1_val == -257, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fffaff7ffdff;  op2val:0x000020feff0100
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x03fffaff7ffdff, 0x000020feff0100, x30, x1, 896, x2)

inst_87:
// rs1_h2_val == 16, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff001055550002;  op2val:0x07fffafbff0010
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xbfff001055550002, 0x07fffafbff0010, x30, x1, 912, x2)

inst_88:
// rs1_h2_val == 8, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc00080003bfff;  op2val:0xffbffeffffbfffef
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xfffc00080003bfff, 0xffbffeffffbfffef, x30, x1, 928, x2)

inst_89:
// rs1_h3_val == -129, rs1_h1_val == -16385
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fc000bffffff9;  op2val:0xdfffefff0008fbff
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xff7fc000bffffff9, 0xdfffefff0008fbff, x30, x1, 944, x2)

inst_90:
// rs1_h3_val == -33, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf00080004fff8;  op2val:0x00004002000007
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xffdf00080004fff8, 0x00004002000007, x30, x1, 960, x2)

inst_91:
// rs1_h1_val == -8193, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40004000dffff7ff;  op2val:0xffef800000200040
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x40004000dffff7ff, 0xffef800000200040, x30, x1, 976, x2)

inst_92:
// rs1_h3_val == -17, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef00804000fdff;  op2val:0x80dfffdfffdfff
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xffef00804000fdff, 0x80dfffdfffdfff, x30, x1, 992, x2)

inst_93:
// rs1_h3_val == -5, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbbffff7ffffef;  op2val:0x04000700053fff
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xfffbbffff7ffffef, 0x04000700053fff, x30, x1, 1008, x2)

inst_94:
// rs1_h3_val == -2, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0100ff7f0000;  op2val:0x200fbff01000007
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xfffe0100ff7f0000, 0x200fbff01000007, x30, x1, 1024, x2)

inst_95:
// rs2_h1_val == 128, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x07ffefaaaa0100;  op2val:0xdfff00800080ff7f
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x07ffefaaaa0100, 0xdfff00800080ff7f, x30, x1, 1040, x2)

inst_96:
// rs2_h1_val == 64, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000dffffbff0080;  op2val:0xffbf01000040fffd
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x2000dffffbff0080, 0xffbf01000040fffd, x30, x1, 1056, x2)

inst_97:
// rs2_h2_val == 1, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000100fff90800;  op2val:0x4000001ffffffdf
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x10000100fff90800, 0x4000001ffffffdf, x30, x1, 1072, x2)

inst_98:
// rs1_h3_val == 2048, 
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000008fff9c000;  op2val:0xffeffff9fffffbff
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0x8000008fff9c000, 0xffeffff9fffffbff, x30, x1, 1088, x2)

inst_99:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h0_val == -3, rs2_h2_val == -129, rs1_h1_val == 64, rs1_h3_val == -8193, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val == -65
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffbf0040fffd;  op2val:0x05ff7ffff90005
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xdfffffbf0040fffd, 0x05ff7ffff90005, x30, x1, 1104, x2)

inst_100:
// rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h3_val == -513, rs1_h2_val == -2049, rs1_h0_val == -21846, rs1_h1_val == -4097, rs2_h2_val == 64
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfff7ffefffaaaa;  op2val:0xfffc004000090007
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xfdfff7ffefffaaaa, 0xfffc004000090007, x30, x1, 1120, x2)

inst_101:
// rs2_h3_val == -8193, rs1_h3_val == -21846, rs2_h1_val == -2, rs1_h1_val == -513, rs2_h0_val == -17
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafff8fdfffffd;  op2val:0xdfffc000fffeffef
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xaaaafff8fdfffffd, 0xdfffc000fffeffef, x30, x1, 1136, x2)

inst_102:
// rs2_h3_val == 256, rs2_h0_val == -8193, rs1_h2_val == 32, rs2_h2_val == 512
// opcode: kdmtt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa002040000002;  op2val:0x1000200fffbdfff
TEST_PKRR_OP(kdmtt16, x31, x30, x29, 0x0000000000000000, 0xaaaa002040000002, 0x1000200fffbdfff, x30, x1, 1152, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 146*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
