
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the urstsa16 instruction of the RISC-V RV64PZicsr extension for the urstsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",urstsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x10,signature_x10_1)

inst_0:// rs1 == rd != rs2, rs1==x13, rs2==x17, rd==x13, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 8192, rs1_h2_val == 65533, rs2_h3_val == 65531, rs2_h1_val == 65527
// opcode: urstsa16 ; op1:x13; op2:x17; dest:x13; op1val:0x0ffffd00050000;  op2val:0xfffb0011fff72000
TEST_RR_OP(urstsa16, x13, x13, x17, 0x0000000000000000, 0x0ffffd00050000, 0xfffb0011fff72000, x10, 0, x16)

inst_1:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x5, rd==x22, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h0_val == 65471, rs1_h2_val == 65407, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 512, rs1_h1_val == 32
// opcode: urstsa16 ; op1:x2; op2:x5; dest:x22; op1val:0x09ff7f00200006;  op2val:0x0900050200ffbf
TEST_RR_OP(urstsa16, x22, x2, x5, 0x0000000000000000, 0x09ff7f00200006, 0x0900050200ffbf, x10, 8, x16)

inst_2:// rs1 == rs2 != rd, rs1==x18, rs2==x18, rd==x26, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h0_val == 16, rs2_h2_val == 8, rs2_h3_val == 65023, rs1_h3_val == 43690, rs1_h2_val == 8, rs2_h0_val == 65279
// opcode: urstsa16 ; op1:x18; op2:x18; dest:x26; op1val:0xaaaa0008000d0010;  op2val:0xfdff00080003feff
TEST_RR_OP(urstsa16, x26, x18, x18, 0x0000000000000000, 0xaaaa0008000d0010, 0xfdff00080003feff, x10, 16, x16)

inst_3:// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 2, rs2_h0_val == 4096, rs2_h1_val == 128, rs1_h3_val == 32768, rs1_h0_val == 1024, rs2_h2_val == 65471, rs1_h1_val == 128, rs1_h2_val == 4
// opcode: urstsa16 ; op1:x7; op2:x7; dest:x7; op1val:0x8000000400800400;  op2val:0x02ffbf00801000
TEST_RR_OP(urstsa16, x7, x7, x7, 0x0000000000000000, 0x8000000400800400, 0x02ffbf00801000, x10, 24, x16)

inst_4:// rs2 == rd != rs1, rs1==x22, rs2==x9, rd==x9, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 49151, rs2_h2_val == 65503, rs1_h3_val == 65471, rs1_h0_val == 49151
// opcode: urstsa16 ; op1:x22; op2:x9; dest:x9; op1val:0xffbf000d000cbfff;  op2val:0x12ffdf000abfff
TEST_RR_OP(urstsa16, x9, x22, x9, 0x0000000000000000, 0xffbf000d000cbfff, 0x12ffdf000abfff, x10, 32, x16)

inst_5:// rs1==x31, rs2==x1, rd==x19, rs2_h3_val == 43690, rs1_h2_val == 64511, rs1_h3_val == 65534, rs1_h1_val == 65407, rs2_h2_val == 21845, rs2_h0_val == 4, rs2_h1_val == 65471
// opcode: urstsa16 ; op1:x31; op2:x1; dest:x19; op1val:0xfffefbffff7f0000;  op2val:0xaaaa5555ffbf0004
TEST_RR_OP(urstsa16, x19, x31, x1, 0x0000000000000000, 0xfffefbffff7f0000, 0xaaaa5555ffbf0004, x10, 40, x16)

inst_6:// rs1==x27, rs2==x25, rd==x30, rs2_h3_val == 21845, rs2_h2_val == 2048, rs1_h0_val == 2, rs2_h1_val == 4, rs2_h0_val == 8, rs1_h3_val == 21845
// opcode: urstsa16 ; op1:x27; op2:x25; dest:x30; op1val:0x5555000800200002;  op2val:0x5555080000040008
TEST_RR_OP(urstsa16, x30, x27, x25, 0x0000000000000000, 0x5555000800200002, 0x5555080000040008, x10, 48, x16)

inst_7:// rs1==x8, rs2==x6, rd==x12, rs2_h3_val == 32767, rs1_h2_val == 64, rs2_h1_val == 49151, rs2_h2_val == 65533, rs1_h3_val == 8192
// opcode: urstsa16 ; op1:x8; op2:x6; dest:x12; op1val:0x20000040000c0007;  op2val:0x7ffffffdbfff000e
TEST_RR_OP(urstsa16, x12, x8, x6, 0x0000000000000000, 0x20000040000c0007, 0x7ffffffdbfff000e, x10, 56, x16)

inst_8:// rs1==x14, rs2==x19, rd==x3, rs2_h3_val == 49151, rs2_h1_val == 1024, rs1_h2_val == 65527, rs2_h2_val == 63487, rs2_h0_val == 61439, rs1_h3_val == 32767, rs1_h1_val == 8
// opcode: urstsa16 ; op1:x14; op2:x19; dest:x3; op1val:0x7ffffff70008000c;  op2val:0xbffff7ff0400efff
TEST_RR_OP(urstsa16, x3, x14, x19, 0x0000000000000000, 0x7ffffff70008000c, 0xbffff7ff0400efff, x10, 64, x16)

inst_9:// rs1==x5, rs2==x0, rd==x28, rs2_h3_val == 57343, rs1_h3_val == 65407, rs2_h0_val == 65407, rs1_h0_val == 64511, rs2_h2_val == 32767
// opcode: urstsa16 ; op1:x5; op2:x0; dest:x28; op1val:0xff7f00070003fbff;  op2val:0xdfff7fff0400ff7f
TEST_RR_OP(urstsa16, x28, x5, x0, 0x0000000000000000, 0xff7f00070003fbff, 0xdfff7fff0400ff7f, x10, 72, x16)

inst_10:// rs1==x15, rs2==x27, rd==x20, rs2_h3_val == 61439, rs1_h1_val == 2, rs1_h0_val == 4, rs2_h0_val == 65534, rs2_h2_val == 65535, rs1_h3_val == 65535
// opcode: urstsa16 ; op1:x15; op2:x27; dest:x20; op1val:0xffff000a00020004;  op2val:0xefffffff0004fffe
TEST_RR_OP(urstsa16, x20, x15, x27, 0x0000000000000000, 0xffff000a00020004, 0xefffffff0004fffe, x10, 80, x16)

inst_11:// rs1==x1, rs2==x4, rd==x11, rs2_h3_val == 63487, rs1_h1_val == 49151, rs1_h0_val == 1, rs2_h2_val == 16, rs2_h1_val == 43690, rs2_h0_val == 16
// opcode: urstsa16 ; op1:x1; op2:x4; dest:x11; op1val:0xffff0009bfff0001;  op2val:0xf7ff0010aaaa0010
TEST_RR_OP(urstsa16, x11, x1, x4, 0x0000000000000000, 0xffff0009bfff0001, 0xf7ff0010aaaa0010, x10, 88, x16)

inst_12:// rs1==x6, rs2==x23, rd==x5, rs2_h3_val == 64511, rs1_h1_val == 65535, rs2_h2_val == 2, rs1_h3_val == 32, rs1_h0_val == 32768, rs2_h1_val == 65503
// opcode: urstsa16 ; op1:x6; op2:x23; dest:x5; op1val:0x20ff7fffff8000;  op2val:0xfbff0002ffdf0011
TEST_RR_OP(urstsa16, x5, x6, x23, 0x0000000000000000, 0x20ff7fffff8000, 0xfbff0002ffdf0011, x10, 96, x16)

inst_13:// rs1==x25, rs2==x24, rd==x15, rs2_h3_val == 65279, rs2_h1_val == 65535, rs1_h2_val == 65531, rs1_h0_val == 128, rs1_h3_val == 2048
// opcode: urstsa16 ; op1:x25; op2:x24; dest:x15; op1val:0x800fffb00130080;  op2val:0xfeffffdfffff0009
TEST_RR_OP(urstsa16, x15, x25, x24, 0x0000000000000000, 0x800fffb00130080, 0xfeffffdfffff0009, x10, 104, x6)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_14:// rs1==x0, rs2==x14, rd==x29, rs2_h3_val == 65407, rs2_h0_val == 32, rs1_h0_val == 2048, rs1_h2_val == 256, rs1_h3_val == 61439
// opcode: urstsa16 ; op1:x0; op2:x14; dest:x29; op1val:0xefff0100ffff0800;  op2val:0xff7f0800ffdf0020
TEST_RR_OP(urstsa16, x29, x0, x14, 0x0000000000000000, 0xefff0100ffff0800, 0xff7f0800ffdf0020, x5, 0, x6)

inst_15:// rs1==x28, rs2==x21, rd==x2, rs2_h3_val == 65471, rs1_h1_val == 32768, rs2_h0_val == 64511, rs1_h3_val == 4096
// opcode: urstsa16 ; op1:x28; op2:x21; dest:x2; op1val:0x1000fffd80000012;  op2val:0xffbf08000080fbff
TEST_RR_OP(urstsa16, x2, x28, x21, 0x0000000000000000, 0x1000fffd80000012, 0xffbf08000080fbff, x5, 8, x6)

inst_16:// rs1==x9, rs2==x26, rd==x24, rs2_h3_val == 65503, rs2_h0_val == 256
// opcode: urstsa16 ; op1:x9; op2:x26; dest:x24; op1val:0x0ffffdffff0000;  op2val:0xffdf000a00060100
TEST_RR_OP(urstsa16, x24, x9, x26, 0x0000000000000000, 0x0ffffdffff0000, 0xffdf000a00060100, x5, 16, x6)

inst_17:// rs1==x29, rs2==x28, rd==x10, rs2_h3_val == 65519, rs2_h2_val == 16384, rs1_h1_val == 4, rs1_h0_val == 21845, rs1_h3_val == 65533, rs1_h2_val == 65519, rs2_h0_val == 2048
// opcode: urstsa16 ; op1:x29; op2:x28; dest:x10; op1val:0xfffdffef00045555;  op2val:0xffef4000aaaa0800
TEST_RR_OP(urstsa16, x10, x29, x28, 0x0000000000000000, 0xfffdffef00045555, 0xffef4000aaaa0800, x5, 24, x6)

inst_18:// rs1==x24, rs2==x8, rd==x25, rs2_h3_val == 65527, rs1_h0_val == 8192, rs2_h1_val == 65534, rs1_h3_val == 8
// opcode: urstsa16 ; op1:x24; op2:x8; dest:x25; op1val:0x08000d00112000;  op2val:0xfff7ffbffffe0011
TEST_RR_OP(urstsa16, x25, x24, x8, 0x0000000000000000, 0x08000d00112000, 0xfff7ffbffffe0011, x5, 32, x6)

inst_19:// rs1==x3, rs2==x29, rd==x21, rs2_h3_val == 65533, rs2_h0_val == 65533, rs1_h1_val == 65519
// opcode: urstsa16 ; op1:x3; op2:x29; dest:x21; op1val:0x030100ffef000f;  op2val:0xfffd00120006fffd
TEST_RR_OP(urstsa16, x21, x3, x29, 0x0000000000000000, 0x030100ffef000f, 0xfffd00120006fffd, x5, 40, x6)

inst_20:// rs1==x23, rs2==x20, rd==x17, rs2_h3_val == 65534, rs1_h2_val == 57343, rs2_h1_val == 32768, rs2_h0_val == 2, rs2_h2_val == 65407
// opcode: urstsa16 ; op1:x23; op2:x20; dest:x17; op1val:0x0bdfff000a0007;  op2val:0xfffeff7f80000002
TEST_RR_OP(urstsa16, x17, x23, x20, 0x0000000000000000, 0x0bdfff000a0007, 0xfffeff7f80000002, x5, 48, x6)

inst_21:// rs1==x30, rs2==x22, rd==x4, rs2_h3_val == 32768, rs2_h1_val == 2, rs1_h0_val == 256, rs2_h0_val == 57343, rs1_h3_val == 63487
// opcode: urstsa16 ; op1:x30; op2:x22; dest:x4; op1val:0xf7ff000f00200100;  op2val:0x800040000002dfff
TEST_RR_OP(urstsa16, x4, x30, x22, 0x0000000000000000, 0xf7ff000f00200100, 0x800040000002dfff, x5, 56, x6)

inst_22:// rs1==x20, rs2==x13, rd==x18, rs2_h3_val == 16384, rs2_h1_val == 65531, rs2_h2_val == 65527, rs1_h2_val == 43690
// opcode: urstsa16 ; op1:x20; op2:x13; dest:x18; op1val:0xff7faaaaffff8000;  op2val:0x4000fff7fffb1000
TEST_RR_OP(urstsa16, x18, x20, x13, 0x0000000000000000, 0xff7faaaaffff8000, 0x4000fff7fffb1000, x5, 64, x6)

inst_23:// rs1==x21, rs2==x11, rd==x0, rs2_h3_val == 8192, rs2_h1_val == 65533, rs1_h1_val == 65471, rs2_h2_val == 1, rs1_h0_val == 65279, rs1_h3_val == 256, rs2_h0_val == 0
// opcode: urstsa16 ; op1:x21; op2:x11; dest:x0; op1val:0x1000040ffbffeff;  op2val:0x20000001fffd0000
TEST_RR_OP(urstsa16, x0, x21, x11, 0x0000000000000000, 0x1000040ffbffeff, 0x20000001fffd0000, x5, 72, x6)

inst_24:// rs1==x4, rs2==x16, rd==x1, rs2_h3_val == 4096, rs2_h2_val == 64, rs1_h2_val == 65503, rs2_h1_val == 2048
// opcode: urstsa16 ; op1:x4; op2:x16; dest:x1; op1val:0xaaaaffdf00060005;  op2val:0x1000004008000008
TEST_RR_OP(urstsa16, x1, x4, x16, 0x0000000000000000, 0xaaaaffdf00060005, 0x1000004008000008, x5, 80, x6)

inst_25:// rs1==x10, rs2==x31, rd==x8, rs2_h3_val == 2048, rs1_h2_val == 65023, rs2_h2_val == 128
// opcode: urstsa16 ; op1:x10; op2:x31; dest:x8; op1val:0x100fdff000ffbff;  op2val:0x80000800012000f
TEST_RR_OP(urstsa16, x8, x10, x31, 0x0000000000000000, 0x100fdff000ffbff, 0x80000800012000f, x5, 88, x6)

inst_26:// rs1==x12, rs2==x10, rd==x16, rs2_h3_val == 1024, rs1_h1_val == 512
// opcode: urstsa16 ; op1:x12; op2:x10; dest:x16; op1val:0x0affdf02000800;  op2val:0x4000010bfff0012
TEST_RR_OP(urstsa16, x16, x12, x10, 0x0000000000000000, 0x0affdf02000800, 0x4000010bfff0012, x5, 96, x6)

inst_27:// rs1==x17, rs2==x3, rd==x27, rs2_h3_val == 512, rs2_h2_val == 65531, rs1_h1_val == 63487
// opcode: urstsa16 ; op1:x17; op2:x3; dest:x27; op1val:0xaaaa0006f7ffbfff;  op2val:0x200fffb000a0011
TEST_RR_OP(urstsa16, x27, x17, x3, 0x0000000000000000, 0xaaaa0006f7ffbfff, 0x200fffb000a0011, x5, 104, x4)

inst_28:// rs1==x19, rs2==x12, rd==x31, rs2_h3_val == 256, rs2_h2_val == 61439, rs2_h0_val == 1024, rs1_h2_val == 65534, rs1_h3_val == 65519
// opcode: urstsa16 ; op1:x19; op2:x12; dest:x31; op1val:0xffeffffe00050009;  op2val:0x100efff00040400
TEST_RR_OP(urstsa16, x31, x19, x12, 0x0000000000000000, 0xffeffffe00050009, 0x100efff00040400, x5, 112, x4)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:// rs1==x26, rs2==x2, rd==x23, rs2_h3_val == 128, rs2_h0_val == 21845, rs1_h3_val == 49151, rs2_h1_val == 4096, rs1_h2_val == 128
// opcode: urstsa16 ; op1:x26; op2:x2; dest:x23; op1val:0xbfff008000050012;  op2val:0x80008010005555
TEST_RR_OP(urstsa16, x23, x26, x2, 0x0000000000000000, 0xbfff008000050012, 0x80008010005555, x1, 0, x4)

inst_30:// rs1==x11, rs2==x30, rd==x6, rs2_h3_val == 64, rs1_h1_val == 43690, rs2_h1_val == 8192, rs2_h0_val == 64, rs2_h2_val == 65023, rs1_h2_val == 1
// opcode: urstsa16 ; op1:x11; op2:x30; dest:x6; op1val:0x8000001aaaa0012;  op2val:0x40fdff20000040
TEST_RR_OP(urstsa16, x6, x11, x30, 0x0000000000000000, 0x8000001aaaa0012, 0x40fdff20000040, x1, 8, x4)

inst_31:// rs1==x16, rs2==x15, rd==x14, rs2_h3_val == 32, rs2_h2_val == 4, rs2_h0_val == 43690, rs1_h1_val == 65527
// opcode: urstsa16 ; op1:x16; op2:x15; dest:x14; op1val:0x0a000bfff70004;  op2val:0x2000048000aaaa
TEST_RR_OP(urstsa16, x14, x16, x15, 0x0000000000000000, 0x0a000bfff70004, 0x2000048000aaaa, x1, 16, x4)

inst_32:// rs2_h3_val == 16, rs1_h1_val == 32767, rs1_h3_val == 64
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000f7fff0002;  op2val:0x100011bfff000a
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x40000f7fff0002, 0x100011bfff000a, x1, 24, x4)

inst_33:// rs2_h3_val == 8, rs2_h1_val == 0, rs1_h1_val == 65503
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100dfffffdf0005;  op2val:0x0800030000000a
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x100dfffffdf0005, 0x0800030000000a, x1, 32, x4)

inst_34:// rs1_h1_val == 1, rs1_h0_val == 65519, rs1_h3_val == 57343, rs2_h1_val == 256
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffdff0001ffef;  op2val:0x1000ffdf01002000
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xdffffdff0001ffef, 0x1000ffdf01002000, x1, 40, x4)

inst_35:// rs1_h1_val == 0, rs1_h2_val == 8192, rs2_h2_val == 65519, rs2_h1_val == 32767, rs2_h0_val == 128
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d20000000000f;  op2val:0x11ffef7fff0080
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x0d20000000000f, 0x11ffef7fff0080, x1, 48, x4)

inst_36:// rs1_h0_val == 43690, rs2_h0_val == 65531
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0300060004aaaa;  op2val:0x20040000013fffb
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x0300060004aaaa, 0x20040000013fffb, x1, 56, x4)

inst_37:// rs1_h0_val == 32767, rs1_h2_val == 0, rs2_h1_val == 65023, rs2_h0_val == 65519, rs2_h2_val == 256
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x070000bfff7fff;  op2val:0x030100fdffffef
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x070000bfff7fff, 0x030100fdffffef, x1, 64, x4)

inst_38:// rs1_h0_val == 57343, rs1_h2_val == 4096, rs2_h0_val == 1
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf10007fffdfff;  op2val:0x13fffb00000001
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xffbf10007fffdfff, 0x13fffb00000001, x1, 72, x4)

inst_39:// rs1_h0_val == 61439, rs2_h1_val == 64511, rs1_h1_val == 64511, rs2_h2_val == 512
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff1000fbffefff;  op2val:0x070200fbff0400
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xbfff1000fbffefff, 0x070200fbff0400, x1, 80, x4)

inst_40:// rs1_h0_val == 63487, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x08000cffeff7ff;  op2val:0x020007000eefff
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x08000cffeff7ff, 0x020007000eefff, x1, 88, x4)

inst_41:// rs1_h0_val == 65023, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0500000001fdff;  op2val:0xf7ff0800bfff0100
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x0500000001fdff, 0xf7ff0800bfff0100, x1, 96, x4)

inst_42:// rs1_h0_val == 65407, rs1_h3_val == 128, rs2_h2_val == 64511, rs1_h1_val == 2048
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000130800ff7f;  op2val:0x200fbff00020010
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x8000130800ff7f, 0x200fbff00020010, x1, 104, x4)

inst_43:// rs1_h0_val == 65471, rs2_h0_val == 65535, rs2_h1_val == 63487
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffef0003ffbf;  op2val:0x1005555f7ffffff
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xefffffef0003ffbf, 0x1005555f7ffffff, x1, 112, x4)

inst_44:// rs1_h0_val == 65503, rs2_h2_val == 0, rs2_h0_val == 63487, rs1_h1_val == 64, rs1_h2_val == 32767
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf7fff0040ffdf;  op2val:0x0800000005f7ff
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xffbf7fff0040ffdf, 0x0800000005f7ff, x1, 120, x4)

inst_45:// rs1_h0_val == 65527, rs1_h2_val == 65279, rs2_h1_val == 61439
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafeff8000fff7;  op2val:0x800fffbeffff7ff
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xaaaafeff8000fff7, 0x800fffbeffff7ff, x1, 128, x4)

inst_46:// rs1_h0_val == 65531, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x03000c0200fffb;  op2val:0x0e000b00070100
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x03000c0200fffb, 0x0e000b00070100, x1, 136, x4)

inst_47:// rs1_h0_val == 65533, rs2_h1_val == 65407
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffdfff7fffffd;  op2val:0x03ffdfff7f0012
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xbffffdfff7fffffd, 0x03ffdfff7f0012, x1, 144, x4)

inst_48:// rs1_h0_val == 65534, rs1_h2_val == 65471, rs1_h1_val == 1024
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x13ffbf0400fffe;  op2val:0x0b000680000002
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x13ffbf0400fffe, 0x0b000680000002, x1, 152, x4)

inst_49:// rs1_h0_val == 16384, rs1_h2_val == 49151, rs2_h2_val == 57343, rs2_h0_val == 65023
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555bfff00024000;  op2val:0x4000dffffff7fdff
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x5555bfff00024000, 0x4000dffffff7fdff, x1, 160, x4)

inst_50:// rs1_h0_val == 4096, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff000f00131000;  op2val:0xfbff0004000dffbf
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xffff000f00131000, 0xfbff0004000dffbf, x1, 168, x4)

inst_51:// rs1_h0_val == 512, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fefffff70200;  op2val:0xfffeff7f0002bfff
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x1000fefffff70200, 0xfffeff7f0002bfff, x1, 176, x4)

inst_52:// rs1_h0_val == 64, rs1_h3_val == 512
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000008f7ff0040;  op2val:0xaaaaff7f000c0006
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x2000008f7ff0040, 0xaaaaff7f000c0006, x1, 184, x4)

inst_53:// rs1_h0_val == 32, rs1_h1_val == 65531, rs2_h2_val == 8192
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff000efffb0020;  op2val:0x0d200001000007
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xffff000efffb0020, 0x0d200001000007, x1, 192, x4)

inst_54:// rs1_h0_val == 8, rs2_h3_val == 4
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0009000a0008;  op2val:0x0408000004000d
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x7fff0009000a0008, 0x0408000004000d, x1, 200, x4)

inst_55:// rs1_h0_val == 65535, rs1_h2_val == 16384
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa4000fbffffff;  op2val:0x06001100090004
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xaaaa4000fbffffff, 0x06001100090004, x1, 208, x4)

inst_56:// rs2_h3_val == 1, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0a200000400012;  op2val:0x01ff7ffff7bfff
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x0a200000400012, 0x01ff7ffff7bfff, x1, 216, x4)

inst_57:// rs2_h0_val == 65503, rs1_h3_val == 64511
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000ffbff0020;  op2val:0x130000000affdf
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xfbff000ffbff0020, 0x130000000affdf, x1, 224, x4)

inst_58:// rs2_h0_val == 65527, rs2_h2_val == 43690, rs1_h3_val == 16
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fbffffef000b;  op2val:0x01aaaa0013fff7
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x10fbffffef000b, 0x01aaaa0013fff7, x1, 232, x4)

inst_59:// rs2_h0_val == 32768, rs1_h2_val == 61439, rs1_h3_val == 1, rs1_h1_val == 16
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x01efff0010dfff;  op2val:0x800010000098000
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x01efff0010dfff, 0x800010000098000, x1, 240, x4)

inst_60:// rs2_h0_val == 16384, rs1_h1_val == 65533
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x130003fffdfffb;  op2val:0x40000d00094000
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x130003fffdfffb, 0x40000d00094000, x1, 248, x4)

inst_61:// rs2_h0_val == 512, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd000bfff70003;  op2val:0xfff7400020000200
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xfffd000bfff70003, 0xfff7400020000200, x1, 256, x4)

inst_62:// rs1_h3_val == 65023, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff000b02000008;  op2val:0x20ffef0080ffdf
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xfdff000b02000008, 0x20ffef0080ffdf, x1, 264, x4)

inst_63:// rs1_h3_val == 65279, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffdfff00200200;  op2val:0x5555000a04000200
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xfeffdfff00200200, 0x5555000a04000200, x1, 272, x4)

inst_64:// rs1_h3_val == 65503, rs1_h1_val == 16384, rs1_h2_val == 2
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000240000080;  op2val:0x40f7ff000a0011
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xffdf000240000080, 0x40f7ff000a0011, x1, 280, x4)

inst_65:// rs1_h3_val == 65527, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7000e0004dfff;  op2val:0x0effefffdf0080
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xfff7000e0004dfff, 0x0effefffdf0080, x1, 288, x4)

inst_66:// rs1_h3_val == 65531, rs1_h1_val == 65534
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb7ffffffe0007;  op2val:0x20000100000bfffd
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xfffb7ffffffe0007, 0x20000100000bfffd, x1, 296, x4)

inst_67:// rs2_h3_val == 65535, rs1_h2_val == 16
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0010000afffd;  op2val:0xfffffffd00074000
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xdfff0010000afffd, 0xfffffffd00074000, x1, 304, x4)

inst_68:// rs2_h3_val == 0, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000008000012;  op2val:0x00ffdf000b0006
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x100000008000012, 0x00ffdf000b0006, x1, 312, x4)

inst_69:// rs1_h3_val == 16384, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000affdfdfff;  op2val:0x2000001fffe000e
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x4000000affdfdfff, 0x2000001fffe000e, x1, 320, x4)

inst_70:// rs2_h2_val == 49151, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000012000a0006;  op2val:0x2000bfff00114000
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x80000012000a0006, 0x2000bfff00114000, x1, 328, x4)

inst_71:// rs1_h3_val == 1024, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400000afffe000e;  op2val:0x00ff7ffbffbfff
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x400000afffe000e, 0x00ff7ffbffbfff, x1, 336, x4)

inst_72:// rs2_h2_val == 65279, rs2_h0_val == 32767
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b000b0003dfff;  op2val:0xfdfffeff00127fff
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x0b000b0003dfff, 0xfdfffeff00127fff, x1, 344, x4)

inst_73:// rs1_h3_val == 4, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x04000e000a0009;  op2val:0x10bfff0012ffbf
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x04000e000a0009, 0x10bfff0012ffbf, x1, 352, x4)

inst_74:// rs1_h3_val == 2, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0200060012fdff;  op2val:0x0155557fff000e
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x0200060012fdff, 0x0155557fff000e, x1, 360, x4)

inst_75:// rs1_h3_val == 0, rs1_h1_val == 65279
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fffefeff0012;  op2val:0x8000fffbfff7000c
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x00fffefeff0012, 0x8000fffbfff7000c, x1, 368, x4)

inst_76:// rs2_h2_val == 4096, rs2_h1_val == 65279, rs1_h1_val == 4096, rs1_h2_val == 32768
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e800010000005;  op2val:0x091000feff2000
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x0e800010000005, 0x091000feff2000, x1, 376, x4)

inst_77:// rs1_h2_val == 63487, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0af7ff0004bfff;  op2val:0xbfff000a000ebfff
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x0af7ff0004bfff, 0xbfff000a000ebfff, x1, 384, x4)

inst_78:// rs2_h2_val == 1024, rs2_h1_val == 64
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80aaaaffdffdff;  op2val:0x0a040000400003
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x80aaaaffdffdff, 0x0a040000400003, x1, 392, x4)

inst_79:// rs2_h2_val == 32, rs2_h1_val == 16
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000faaaaffdf;  op2val:0xffff002000105555
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xaaaa000faaaaffdf, 0xffff002000105555, x1, 400, x4)

inst_80:// rs2_h1_val == 21845, rs1_h1_val == 21845
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000115555ffbf;  op2val:0x80000455550010
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x80000115555ffbf, 0x80000455550010, x1, 408, x4)

inst_81:// rs1_h2_val == 2048, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x01080000045555;  op2val:0xfff7000720000007
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x01080000045555, 0xfff7000720000007, x1, 416, x4)

inst_82:// rs1_h2_val == 1024, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf040000060004;  op2val:0x2000000cefff0004
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xffbf040000060004, 0x2000000cefff0004, x1, 424, x4)

inst_83:// rs2_h1_val == 57343, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff00060003ff7f;  op2val:0x8000000ddfffbfff
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xffff00060003ff7f, 0x8000000ddfffbfff, x1, 432, x4)

inst_84:// rs1_h2_val == 512, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x06020002008000;  op2val:0x0e000100100400
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x06020002008000, 0x0e000100100400, x1, 440, x4)

inst_85:// rs2_h1_val == 16384, rs1_h1_val == 256
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0f000b01005555;  op2val:0x0500124000000d
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x0f000b01005555, 0x0500124000000d, x1, 448, x4)

inst_86:// rs1_h2_val == 65535, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x06ffff00080007;  op2val:0xfffd55557fff0013
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x06ffff00080007, 0xfffd55557fff0013, x1, 456, x4)

inst_87:// rs1_h1_val == 57343, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffdfdfff0003;  op2val:0x4000004fff70009
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xfff7ffdfdfff0003, 0x4000004fff70009, x1, 464, x4)

inst_88:// rs1_h1_val == 61439, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0004efff2000;  op2val:0x100bfffdfff0005
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xffbf0004efff2000, 0x100bfffdfff0005, x1, 472, x4)

inst_89:// rs1_h1_val == 65023, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0efff7fdfffbff;  op2val:0xffffff7ffffd0200
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x0efff7fdfffbff, 0xffffff7ffffd0200, x1, 480, x4)

inst_90:// rs2_h1_val == 32, rs1_h1_val == 8192
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000092000efff;  op2val:0x200000900200010
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x8000092000efff, 0x200000900200010, x1, 488, x4)

inst_91:// rs2_h1_val == 8, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfff7ff000d1000;  op2val:0xdfff000b0008000b
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xfbfff7ff000d1000, 0xdfff000b0008000b, x1, 496, x4)

inst_92:// rs2_h1_val == 1, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000003000f0002;  op2val:0x1000feff0001ff7f
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x40000003000f0002, 0x1000feff0001ff7f, x1, 504, x4)

inst_93:// rs2_h2_val == 65534, rs1_h2_val == 21845
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b555500208000;  op2val:0x07fffe01004000
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x0b555500208000, 0x07fffe01004000, x1, 512, x4)

inst_94:// rs1_h2_val == 32, rs2_h1_val == 65519
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000200800000c;  op2val:0xff7f0001ffef0011
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x80000200800000c, 0xff7f0001ffef0011, x1, 520, x4)

inst_95:// rs2_h2_val == 32768, 
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x00ffff00050013;  op2val:0x5555800000800009
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x00ffff00050013, 0x5555800000800009, x1, 528, x4)

inst_96:// rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h0_val == 16, rs2_h2_val == 8, rs2_h3_val == 65023, rs1_h3_val == 43690, rs1_h2_val == 8, rs2_h0_val == 65279
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0008000d0010;  op2val:0xfdff00080003feff
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xaaaa0008000d0010, 0xfdff00080003feff, x1, 536, x4)

inst_97:// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 2, rs2_h0_val == 4096, rs2_h1_val == 128, rs1_h3_val == 32768, rs1_h0_val == 1024, rs2_h2_val == 65471, rs1_h1_val == 128, rs1_h2_val == 4
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000400800400;  op2val:0x02ffbf00801000
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x8000000400800400, 0x02ffbf00801000, x1, 544, x4)

inst_98:// rs2_h3_val == 57343, rs1_h3_val == 65407, rs2_h0_val == 65407, rs1_h0_val == 64511, rs2_h2_val == 32767
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f00070003fbff;  op2val:0xdfff7fff0400ff7f
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xff7f00070003fbff, 0xdfff7fff0400ff7f, x1, 552, x4)

inst_99:// rs2_h3_val == 65407, rs2_h0_val == 32, rs1_h0_val == 2048, rs1_h2_val == 256, rs1_h3_val == 61439
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0100ffff0800;  op2val:0xff7f0800ffdf0020
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0xefff0100ffff0800, 0xff7f0800ffdf0020, x1, 560, x4)

inst_100:// rs2_h3_val == 8192, rs2_h1_val == 65533, rs1_h1_val == 65471, rs2_h2_val == 1, rs1_h0_val == 65279, rs1_h3_val == 256, rs2_h0_val == 0
// opcode: urstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000040ffbffeff;  op2val:0x20000001fffd0000
TEST_RR_OP(urstsa16, x31, x30, x29, 0x0000000000000000, 0x1000040ffbffeff, 0x20000001fffd0000, x1, 568, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 72*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
