
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kcras16 instruction of the RISC-V RV64PZicsr extension for the kcras16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kcras16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:// rs1 == rd != rs2, rs1==x9, rs2==x31, rd==x9, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == 32767, rs1_h2_val != rs2_h2_val, rs2_h2_val == -129, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val != rs2_h1_val, rs1_h1_val == 4, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h3_val == 4, rs1_h3_val == -32768
// opcode: kcras16 ; op1:x9; op2:x31; dest:x9; op1val:0x8000000700048000;  op2val:0x04ff7f7fff0009
TEST_RR_OP(kcras16, x9, x9, x31, 0x0000000000000000, 0x8000000700048000, 0x04ff7f7fff0009, x2, 0, x11)

inst_1:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x5, rs2==x7, rd==x8, rs1_h3_val == rs2_h3_val, rs2_h1_val == -21846, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h2_val == -257, rs1_h2_val == 8, rs1_h1_val == 64, rs2_h3_val == 4096, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val == 0, rs1_h3_val == 4096, rs2_h0_val == 128
// opcode: kcras16 ; op1:x5; op2:x7; dest:x8; op1val:0x1000000800400000;  op2val:0x1000feffaaaa0080
TEST_RR_OP(kcras16, x8, x5, x7, 0x0000000000000000, 0x1000000800400000, 0x1000feffaaaa0080, x2, 16, x11)

inst_2:// rs1 == rs2 != rd, rs1==x8, rs2==x8, rd==x31, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h1_val == -8193, rs1_h2_val == 128, rs1_h0_val == 4096, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val == 8, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h2_val == 16, rs2_h3_val == -1, rs2_h0_val == 16384
// opcode: kcras16 ; op1:x8; op2:x8; dest:x31; op1val:0xfffc008000081000;  op2val:0xffff0010dfff4000
TEST_RR_OP(kcras16, x31, x8, x8, 0x0000000000000000, 0xfffc008000081000, 0xffff0010dfff4000, x2, 32, x11)

inst_3:// rs1 == rs2 == rd, rs1==x3, rs2==x3, rd==x3, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h2_val == -16385, rs2_h0_val == -129, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h2_val == 0, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == -16385, rs2_h3_val == -8193
// opcode: kcras16 ; op1:x3; op2:x3; dest:x3; op1val:0x030000fffcbfff;  op2val:0xdfffbfff0006ff7f
TEST_RR_OP(kcras16, x3, x3, x3, 0x0000000000000000, 0x030000fffcbfff, 0xdfffbfff0006ff7f, x2, 48, x11)

inst_4:// rs2 == rd != rs1, rs1==x6, rs2==x30, rd==x30, rs1_h2_val == rs2_h2_val, rs1_h3_val == -16385, rs1_h2_val == 4, rs1_h0_val == 256, rs2_h0_val == -2, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h2_val == 4, rs2_h1_val == 8
// opcode: kcras16 ; op1:x6; op2:x30; dest:x30; op1val:0xbfff0004fff80100;  op2val:0x0300040008fffe
TEST_RR_OP(kcras16, x30, x6, x30, 0x0000000000000000, 0xbfff0004fff80100, 0x0300040008fffe, x2, 64, x11)

inst_5:// rs1==x1, rs2==x16, rd==x4, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h1_val == 4, rs1_h1_val == 0, rs1_h2_val == -1025, rs1_h0_val == rs2_h0_val, rs2_h3_val == 1, rs2_h2_val == 8
// opcode: kcras16 ; op1:x1; op2:x16; dest:x4; op1val:0x8000fbff00000003;  op2val:0x01000800040003
TEST_RR_OP(kcras16, x4, x1, x16, 0x0000000000000000, 0x8000fbff00000003, 0x01000800040003, x2, 80, x11)

inst_6:// rs1==x21, rs2==x19, rd==x1, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h3_val == -513, rs2_h0_val == -16385, rs1_h0_val == 1, rs2_h1_val == 8192, rs1_h2_val == -2
// opcode: kcras16 ; op1:x21; op2:x19; dest:x1; op1val:0x3ffffffefff60001;  op2val:0xfdfffffa2000bfff
TEST_RR_OP(kcras16, x1, x21, x19, 0x0000000000000000, 0x3ffffffefff60001, 0xfdfffffa2000bfff, x2, 96, x11)

inst_7:// rs1==x31, rs2==x21, rd==x10, rs1_h1_val == rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == 32, rs2_h3_val == 256, rs1_h0_val == -33
// opcode: kcras16 ; op1:x31; op2:x21; dest:x10; op1val:0x033fffc000ffdf;  op2val:0x1000020c000fffe
TEST_RR_OP(kcras16, x10, x31, x21, 0x0000000000000000, 0x033fffc000ffdf, 0x1000020c000fffe, x2, 112, x11)

inst_8:// rs1==x30, rs2==x24, rd==x16, rs2_h3_val == -21846, rs2_h1_val == 21845, rs1_h2_val == 4096, rs1_h1_val == -17
// opcode: kcras16 ; op1:x30; op2:x24; dest:x16; op1val:0xbfff1000ffef0009;  op2val:0xaaaa000455553fff
TEST_RR_OP(kcras16, x16, x30, x24, 0x0000000000000000, 0xbfff1000ffef0009, 0xaaaa000455553fff, x2, 128, x11)

inst_9:// rs1==x19, rs2==x22, rd==x0, rs2_h3_val == 21845, rs1_h2_val == -5
// opcode: kcras16 ; op1:x19; op2:x22; dest:x0; op1val:0x1000fffb0000c000;  op2val:0x5555000400090080
TEST_RR_OP(kcras16, x0, x19, x22, 0x0000000000000000, 0x1000fffb0000c000, 0x5555000400090080, x2, 144, x11)

inst_10:// rs1==x7, rs2==x9, rd==x25, rs2_h3_val == 32767, rs2_h2_val == -65, rs1_h2_val == -513, rs2_h1_val == -9
// opcode: kcras16 ; op1:x7; op2:x9; dest:x25; op1val:0xfffafdfffff80000;  op2val:0x7fffffbffff74000
TEST_RR_OP(kcras16, x25, x7, x9, 0x0000000000000000, 0xfffafdfffff80000, 0x7fffffbffff74000, x2, 160, x11)

inst_11:// rs1==x15, rs2==x0, rd==x28, rs2_h3_val == -16385, rs2_h1_val == -33, rs1_h0_val == -1
// opcode: kcras16 ; op1:x15; op2:x0; dest:x28; op1val:0xfffa0005ffefffff;  op2val:0xbfff0004ffdf0006
TEST_RR_OP(kcras16, x28, x15, x0, 0x0000000000000000, 0xfffa0005ffefffff, 0xbfff0004ffdf0006, x2, 176, x11)

inst_12:// rs1==x13, rs2==x26, rd==x19, rs2_h3_val == -4097, rs2_h1_val == -129, rs2_h2_val == -9, rs1_h2_val == -257
// opcode: kcras16 ; op1:x13; op2:x26; dest:x19; op1val:0xfff6feff00050007;  op2val:0xeffffff7ff7fc000
TEST_RR_OP(kcras16, x19, x13, x26, 0x0000000000000000, 0xfff6feff00050007, 0xeffffff7ff7fc000, x2, 192, x11)

inst_13:// rs1==x29, rs2==x10, rd==x24, rs2_h3_val == -2049, rs1_h1_val == 1024, rs2_h2_val == -8193, rs1_h3_val == -513, rs1_h0_val == 4
// opcode: kcras16 ; op1:x29; op2:x10; dest:x24; op1val:0xfdfffffc04000004;  op2val:0xf7ffdffffffc0003
TEST_RR_OP(kcras16, x24, x29, x10, 0x0000000000000000, 0xfdfffffc04000004, 0xf7ffdffffffc0003, x2, 208, x11)

inst_14:// rs1==x27, rs2==x4, rd==x22, rs2_h3_val == -1025, rs2_h2_val == -1, rs2_h0_val == 512, rs1_h0_val == -257, rs1_h3_val == 8
// opcode: kcras16 ; op1:x27; op2:x4; dest:x22; op1val:0x080000c000feff;  op2val:0xfbffffff00070200
TEST_RR_OP(kcras16, x22, x27, x4, 0x0000000000000000, 0x080000c000feff, 0xfbffffff00070200, x2, 224, x11)

inst_15:// rs1==x24, rs2==x1, rd==x7, rs2_h3_val == -257, rs1_h0_val == -9, rs1_h3_val == -129, rs2_h1_val == 16384, rs1_h2_val == -9
// opcode: kcras16 ; op1:x24; op2:x1; dest:x7; op1val:0xff7ffff70008fff7;  op2val:0xfeff3fff40000005
TEST_RR_OP(kcras16, x7, x24, x1, 0x0000000000000000, 0xff7ffff70008fff7, 0xfeff3fff40000005, x2, 240, x11)

inst_16:// rs1==x20, rs2==x29, rd==x12, rs2_h3_val == -129, rs2_h1_val == -2049, rs2_h0_val == -1, rs1_h3_val == -21846, rs1_h1_val == -16385, rs1_h2_val == -33, rs1_h0_val == -1025, rs2_h2_val == -21846
// opcode: kcras16 ; op1:x20; op2:x29; dest:x12; op1val:0xaaaaffdfbffffbff;  op2val:0xff7faaaaf7ffffff
TEST_RR_OP(kcras16, x12, x20, x29, 0x0000000000000000, 0xaaaaffdfbffffbff, 0xff7faaaaf7ffffff, x2, 256, x11)

inst_17:// rs1==x14, rs2==x12, rd==x13, rs2_h3_val == -65, rs1_h3_val == -3, rs1_h1_val == -21846, rs2_h0_val == 2, rs1_h2_val == 256
// opcode: kcras16 ; op1:x14; op2:x12; dest:x13; op1val:0xfffd0100aaaabfff;  op2val:0xffbf3fff7fff0002
TEST_RR_OP(kcras16, x13, x14, x12, 0x0000000000000000, 0xfffd0100aaaabfff, 0xffbf3fff7fff0002, x2, 272, x11)

inst_18:// rs1==x12, rs2==x5, rd==x17, rs2_h3_val == -33, rs2_h2_val == -33, rs1_h2_val == -4097, rs2_h1_val == 0
// opcode: kcras16 ; op1:x12; op2:x5; dest:x17; op1val:0x3fffeffffff80100;  op2val:0xffdfffdf00000002
TEST_RR_OP(kcras16, x17, x12, x5, 0x0000000000000000, 0x3fffeffffff80100, 0xffdfffdf00000002, x2, 288, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_19:// rs1==x25, rs2==x23, rd==x2, rs2_h3_val == -17, rs1_h1_val == 8192, rs2_h1_val == -257, rs1_h2_val == 1, rs1_h0_val == 21845, rs2_h2_val == 2
// opcode: kcras16 ; op1:x25; op2:x23; dest:x2; op1val:0x09000120005555;  op2val:0xffef0002fefffffe
TEST_RR_OP(kcras16, x2, x25, x23, 0x0000000000000000, 0x09000120005555, 0xffef0002fefffffe, x1, 0, x3)

inst_20:// rs1==x11, rs2==x20, rd==x23, rs2_h3_val == -9, rs2_h1_val == -1, rs2_h0_val == -21846, rs1_h1_val == 256, rs1_h3_val == -2049, rs2_h2_val == 256, rs1_h2_val == -129, rs1_h0_val == 32767
// opcode: kcras16 ; op1:x11; op2:x20; dest:x23; op1val:0xf7ffff7f01007fff;  op2val:0xfff70100ffffaaaa
TEST_RR_OP(kcras16, x23, x11, x20, 0x0000000000000000, 0xf7ffff7f01007fff, 0xfff70100ffffaaaa, x1, 16, x3)

inst_21:// rs1==x26, rs2==x28, rd==x15, rs2_h3_val == -5, rs2_h0_val == -33, rs1_h1_val == 2
// opcode: kcras16 ; op1:x26; op2:x28; dest:x15; op1val:0xbffffffc0002feff;  op2val:0xfffbfff6fffcffdf
TEST_RR_OP(kcras16, x15, x26, x28, 0x0000000000000000, 0xbffffffc0002feff, 0xfffbfff6fffcffdf, x1, 32, x3)

inst_22:// rs1==x23, rs2==x14, rd==x20, rs2_h3_val == -3, rs1_h3_val == 2, rs1_h2_val == 32767, rs1_h1_val == -32768, rs2_h0_val == -32768
// opcode: kcras16 ; op1:x23; op2:x14; dest:x20; op1val:0x027fff8000fff6;  op2val:0xfffd000400068000
TEST_RR_OP(kcras16, x20, x23, x14, 0x0000000000000000, 0x027fff8000fff6, 0xfffd000400068000, x1, 48, x3)

inst_23:// rs1==x18, rs2==x15, rd==x29, rs2_h3_val == -2, rs2_h1_val == 2, rs1_h1_val == 128, rs1_h2_val == 32
// opcode: kcras16 ; op1:x18; op2:x15; dest:x29; op1val:0x0800200080fffa;  op2val:0xfffefffa00020003
TEST_RR_OP(kcras16, x29, x18, x15, 0x0000000000000000, 0x0800200080fffa, 0xfffefffa00020003, x1, 64, x3)

inst_24:// rs1==x17, rs2==x25, rd==x27, rs2_h3_val == -32768, rs1_h3_val == 64, rs1_h0_val == 512, rs2_h1_val == 16, rs2_h0_val == 32767
// opcode: kcras16 ; op1:x17; op2:x25; dest:x27; op1val:0x40efff3fff0200;  op2val:0x80003fff00107fff
TEST_RR_OP(kcras16, x27, x17, x25, 0x0000000000000000, 0x40efff3fff0200, 0x80003fff00107fff, x1, 80, x3)

inst_25:// rs1==x22, rs2==x13, rd==x18, rs2_h3_val == 16384, rs2_h1_val == -65, rs2_h2_val == -2
// opcode: kcras16 ; op1:x22; op2:x13; dest:x18; op1val:0x08efffffeffff9;  op2val:0x4000fffeffbffff6
TEST_RR_OP(kcras16, x18, x22, x13, 0x0000000000000000, 0x08efffffeffff9, 0x4000fffeffbffff6, x1, 96, x3)

inst_26:// rs1==x4, rs2==x6, rd==x14, rs2_h3_val == 8192, rs1_h3_val == 256, rs1_h1_val == 16384, rs1_h0_val == 8192, rs1_h2_val == -21846, rs2_h0_val == -5
// opcode: kcras16 ; op1:x4; op2:x6; dest:x14; op1val:0x100aaaa40002000;  op2val:0x20000002f7fffffb
TEST_RR_OP(kcras16, x14, x4, x6, 0x0000000000000000, 0x100aaaa40002000, 0x20000002f7fffffb, x1, 112, x3)

inst_27:// rs1==x2, rs2==x11, rd==x26, rs2_h3_val == 2048, rs1_h0_val == -17, rs2_h0_val == 1, rs1_h3_val == 32767, rs1_h2_val == -2049, rs1_h1_val == -1
// opcode: kcras16 ; op1:x2; op2:x11; dest:x26; op1val:0x7ffff7ffffffffef;  op2val:0x8000020ffbf0001
TEST_RR_OP(kcras16, x26, x2, x11, 0x0000000000000000, 0x7ffff7ffffffffef, 0x8000020ffbf0001, x1, 128, x3)

inst_28:// rs1==x28, rs2==x17, rd==x11, rs2_h3_val == 1024, rs2_h0_val == 64, rs1_h0_val == -4097
// opcode: kcras16 ; op1:x28; op2:x17; dest:x11; op1val:0x100fdff0000efff;  op2val:0x400ffdfc0000040
TEST_RR_OP(kcras16, x11, x28, x17, 0x0000000000000000, 0x100fdff0000efff, 0x400ffdfc0000040, x1, 144, x3)

inst_29:// rs1==x16, rs2==x18, rd==x5, rs2_h3_val == 512, rs1_h1_val == 21845, rs1_h2_val == 16, rs2_h0_val == 8, rs1_h0_val == 8
// opcode: kcras16 ; op1:x16; op2:x18; dest:x5; op1val:0x8000001055550008;  op2val:0x2000009feff0008
TEST_RR_OP(kcras16, x5, x16, x18, 0x0000000000000000, 0x8000001055550008, 0x2000009feff0008, x1, 160, x3)

inst_30:// rs1==x10, rs2==x27, rd==x21, rs2_h3_val == 128, rs2_h0_val == 4096, rs1_h2_val == 512, rs2_h2_val == 0
// opcode: kcras16 ; op1:x10; op2:x27; dest:x21; op1val:0x020200aaaa0008;  op2val:0x80000000061000
TEST_RR_OP(kcras16, x21, x10, x27, 0x0000000000000000, 0x020200aaaa0008, 0x80000000061000, x1, 176, x3)

inst_31:// rs1==x0, rs2==x2, rd==x6, rs2_h3_val == 64, rs2_h2_val == 8192, rs2_h0_val == 21845
// opcode: kcras16 ; op1:x0; op2:x2; dest:x6; op1val:0x3fffc0000009bfff;  op2val:0x402000fff65555
TEST_RR_OP(kcras16, x6, x0, x2, 0x0000000000000000, 0x3fffc0000009bfff, 0x402000fff65555, x1, 192, x3)

inst_32:// rs2_h3_val == 32, rs1_h1_val == 512, rs2_h1_val == -32768
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x093fff02000100;  op2val:0x20fffe80000200
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x093fff02000100, 0x20fffe80000200, x1, 208, x3)

inst_33:// rs2_h3_val == 16, rs1_h3_val == -1
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffc000ffef0000;  op2val:0x10c00000100006
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xffffc000ffef0000, 0x10c00000100006, x1, 224, x3)

inst_34:// rs2_h3_val == 8, rs2_h0_val == -4097, rs1_h0_val == 16384
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffe02004000;  op2val:0x08fff9fffaefff
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xaaaafffe02004000, 0x08fff9fffaefff, x1, 240, x3)

inst_35:// rs1_h1_val == -5, rs2_h2_val == 4096
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0005fffbffef;  op2val:0x3fff10007fffffff
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xfdff0005fffbffef, 0x3fff10007fffffff, x1, 256, x3)

inst_36:// rs1_h1_val == -3, rs2_h2_val == -4097, rs2_h1_val == -4097
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfefffffd7fff;  op2val:0x2000efffefff1000
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xfffdfefffffd7fff, 0x2000efffefff1000, x1, 272, x3)

inst_37:// rs1_h1_val == -2, rs1_h2_val == 8192, rs2_h1_val == 256, rs1_h3_val == 128
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x802000fffe2000;  op2val:0x2000feff01000006
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x802000fffe2000, 0x2000feff01000006, x1, 288, x3)

inst_38:// rs1_h1_val == 4096, rs2_h0_val == 32, rs1_h3_val == 512
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x200c0001000fff9;  op2val:0xfff7ffbf00100020
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x200c0001000fff9, 0xfff7ffbf00100020, x1, 304, x3)

inst_39:// rs1_h1_val == 2048, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0500200800c000;  op2val:0x20fffe00038000
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x0500200800c000, 0x20fffe00038000, x1, 320, x3)

inst_40:// rs1_h1_val == 32, rs2_h0_val == -8193, rs1_h3_val == -9, rs1_h0_val == -129
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff700050020ff7f;  op2val:0xefff00024000dfff
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xfff700050020ff7f, 0xefff00024000dfff, x1, 336, x3)

inst_41:// rs1_h1_val == 16, rs2_h0_val == -17
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000800100004;  op2val:0xc0000006fff7ffef
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xaaaa000800100004, 0xc0000006fff7ffef, x1, 352, x3)

inst_42:// rs1_h1_val == 1, rs2_h2_val == 64, rs1_h0_val == -8193, rs1_h3_val == 21845
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x555500070001dfff;  op2val:0x4000400002fff9
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x555500070001dfff, 0x4000400002fff9, x1, 368, x3)

inst_43:// rs1_h0_val == -21846, rs2_h2_val == 1024, rs2_h0_val == 0
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff97fff0020aaaa;  op2val:0x80000400ffdf0000
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xfff97fff0020aaaa, 0x80000400ffdf0000, x1, 384, x3)

inst_44:// rs1_h0_val == -2049, rs2_h2_val == 2048, rs1_h3_val == -65
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff60003f7ff;  op2val:0x10000800fff70006
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xffbffff60003f7ff, 0x10000800fff70006, x1, 400, x3)

inst_45:// rs1_h0_val == -513, rs1_h2_val == -1, rs2_h2_val == -17
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000ffff0010fdff;  op2val:0x01ffeffffc0000
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xc000ffff0010fdff, 0x01ffeffffc0000, x1, 416, x3)

inst_46:// rs1_h0_val == -65, rs1_h2_val == 64, rs2_h1_val == -3, rs2_h0_val == 256
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000040fffeffbf;  op2val:0x8000000fffd0100
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x80000040fffeffbf, 0x8000000fffd0100, x1, 432, x3)

inst_47:// rs1_h0_val == -5, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x06aaaa0007fffb;  op2val:0x800040f7fffff9
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x06aaaa0007fffb, 0x800040f7fffff9, x1, 448, x3)

inst_48:// rs1_h0_val == -3, rs1_h3_val == -5, rs1_h1_val == -33
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffaffdffffd;  op2val:0x07ffeffffc8000
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xfffbfffaffdffffd, 0x07ffeffffc8000, x1, 464, x3)

inst_49:// rs1_h0_val == -2, rs2_h2_val == 16384, rs1_h3_val == 8192
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffefff8fffe;  op2val:0x064000efff5555
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x2000fffefff8fffe, 0x064000efff5555, x1, 480, x3)

inst_50:// rs1_h0_val == 2048, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f000100080800;  op2val:0xfbff10007fff0006
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xff7f000100080800, 0xfbff10007fff0006, x1, 496, x3)

inst_51:// rs1_h0_val == 1024, rs1_h3_val == 16
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fffa80000400;  op2val:0x800aaaac0001000
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x10fffa80000400, 0x800aaaac0001000, x1, 512, x3)

inst_52:// rs1_h0_val == 128, rs1_h2_val == -8193
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555dfffffdf0080;  op2val:0xfffc0005fffdffdf
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x5555dfffffdf0080, 0xfffc0005fffdffdf, x1, 528, x3)

inst_53:// rs1_h0_val == 64, rs2_h1_val == -16385, rs2_h0_val == -257
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbc00000800040;  op2val:0xfffb0800bffffeff
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xfffbc00000800040, 0xfffb0800bffffeff, x1, 544, x3)

inst_54:// rs1_h0_val == 32, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x03000680000020;  op2val:0xfffe1000feff0008
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x03000680000020, 0xfffe1000feff0008, x1, 560, x3)

inst_55:// rs1_h0_val == 16, rs1_h3_val == -1025
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000000080010;  op2val:0xffff3fff00090006
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xfbff000000080010, 0xffff3fff00090006, x1, 576, x3)

inst_56:// rs1_h0_val == 2, rs1_h2_val == -65
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x03ffbf20000002;  op2val:0x07feff0007ff7f
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x03ffbf20000002, 0x07feff0007ff7f, x1, 592, x3)

inst_57:// rs2_h3_val == 2, rs2_h0_val == 2048
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffdf0005ffef;  op2val:0x02fff7aaaa0800
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x7fffffdf0005ffef, 0x02fff7aaaa0800, x1, 608, x3)

inst_58:// rs2_h3_val == 0, rs1_h3_val == 32
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000040002feff;  op2val:0x000800f7ff0100
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x2000040002feff, 0x000800f7ff0100, x1, 624, x3)

inst_59:// rs2_h2_val == 21845, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fbff00803fff;  op2val:0x025555dfff0000
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xfff6fbff00803fff, 0x025555dfff0000, x1, 640, x3)

inst_60:// rs2_h2_val == 32767, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555200010000020;  op2val:0xff7f7fffff7f0000
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x5555200010000020, 0xff7f7fffff7f0000, x1, 656, x3)

inst_61:// rs2_h1_val == 1, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x800100fffb0010;  op2val:0xfff6080000017fff
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x800100fffb0010, 0xfff6080000017fff, x1, 672, x3)

inst_62:// rs2_h0_val == -2049, rs1_h1_val == -8193
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfc000dfff0000;  op2val:0x200000020002f7ff
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xffbfc000dfff0000, 0x200000020002f7ff, x1, 688, x3)

inst_63:// rs2_h0_val == -1025, rs1_h2_val == 16384, rs2_h1_val == -17, rs1_h3_val == 2048
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x80040000004fbff;  op2val:0x010003ffeffbff
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x80040000004fbff, 0x010003ffeffbff, x1, 704, x3)

inst_64:// rs2_h0_val == -513, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fdff00050020;  op2val:0x0700070002fdff
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x09fdff00050020, 0x0700070002fdff, x1, 720, x3)

inst_65:// rs2_h0_val == -65, rs1_h3_val == -2, rs1_h2_val == -3
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffdfff9ffef;  op2val:0xfeff00095555ffbf
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xfffefffdfff9ffef, 0xfeff00095555ffbf, x1, 736, x3)

inst_66:// rs2_h0_val == -9, rs1_h3_val == 1, rs2_h1_val == 128, rs2_h2_val == 512
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fdff20000200;  op2val:0xfdff02000080fff7
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x01fdff20000200, 0xfdff02000080fff7, x1, 752, x3)

inst_67:// rs2_h0_val == -3, rs1_h2_val == 2
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0100020008fff8;  op2val:0xfff7fffc0007fffd
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x0100020008fff8, 0xfff7fffc0007fffd, x1, 768, x3)

inst_68:// rs2_h0_val == 8192, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0001fffefeff;  op2val:0x20080080002000
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x7fff0001fffefeff, 0x20080080002000, x1, 784, x3)

inst_69:// rs2_h0_val == 1024, rs2_h2_val == 128
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000001dfffff7f;  op2val:0x07008000060400
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x80000001dfffff7f, 0x07008000060400, x1, 800, x3)

inst_70:// rs2_h0_val == 16, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x07ffdf00034000;  op2val:0xfffe100000040010
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x07ffdf00034000, 0xfffe100000040010, x1, 816, x3)

inst_71:// rs2_h0_val == 4, rs2_h1_val == -5
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000200020040;  op2val:0xfffaff7ffffb0004
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x20000200020040, 0xfffaff7ffffb0004, x1, 832, x3)

inst_72:// rs1_h3_val == -8193, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffd80000009;  op2val:0x035555effffff6
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xdffffffd80000009, 0x035555effffff6, x1, 848, x3)

inst_73:// rs1_h3_val == -4097, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0005fffe0004;  op2val:0x2000bfff00050002
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xefff0005fffe0004, 0x2000bfff00050002, x1, 864, x3)

inst_74:// rs1_h3_val == -257, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffaaaa0040feff;  op2val:0x040400fffb0004
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xfeffaaaa0040feff, 0x040400fffb0004, x1, 880, x3)

inst_75:// rs1_h3_val == -33, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0010dfff0800;  op2val:0xffeffff90004efff
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xffdf0010dfff0800, 0xffeffff90004efff, x1, 896, x3)

inst_76:// rs1_h3_val == -17, rs2_h2_val == -1025
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffff8fffbffef;  op2val:0x09fbfffff70080
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xffeffff8fffbffef, 0x09fbfffff70080, x1, 912, x3)

inst_77:// rs1_h3_val == 16384, rs1_h2_val == 1024, rs2_h1_val == 2048
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000400fff60009;  op2val:0x5555004008000004
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x40000400fff60009, 0x5555004008000004, x1, 928, x3)

inst_78:// rs1_h3_val == 1024, rs2_h1_val == 512
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x400ff7f00050100;  op2val:0x20feff0200fffe
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x400ff7f00050100, 0x20feff0200fffe, x1, 944, x3)

inst_79:// rs2_h2_val == -2049, rs1_h1_val == -129
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ffffff7f0003;  op2val:0xfffaf7ffffeffff8
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x01ffffff7f0003, 0xfffaf7ffffeffff8, x1, 960, x3)

inst_80:// rs2_h2_val == -513, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00094000fffc;  op2val:0x07fdffdfff0200
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xfdff00094000fffc, 0x07fdffdfff0200, x1, 976, x3)

inst_81:// rs1_h3_val == 4, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x04ffbf0009efff;  op2val:0x03dfff7fff0080
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x04ffbf0009efff, 0x03dfff7fff0080, x1, 992, x3)

inst_82:// rs1_h3_val == 0, rs2_h1_val == 32
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fff702000080;  op2val:0x0900030020fffc
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x00fff702000080, 0x0900030020fffc, x1, 1008, x3)

inst_83:// rs2_h2_val == -5, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6000040001000;  op2val:0xfffdfffb3fff0006
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xfff6000040001000, 0xfffdfffb3fff0006, x1, 1024, x3)

inst_84:// rs2_h2_val == -3, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff000108000040;  op2val:0x05fffdfffc0020
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xfeff000108000040, 0x05fffdfffc0020, x1, 1040, x3)

inst_85:// rs1_h2_val == 21845, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000555501000001;  op2val:0xfffbbfff0005dfff
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x2000555501000001, 0xfffbbfff0005dfff, x1, 1056, x3)

inst_86:// rs2_h2_val == -32768, rs2_h1_val == -1025
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fffb00060080;  op2val:0x078000fbfffff8
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x08fffb00060080, 0x078000fbfffff8, x1, 1072, x3)

inst_87:// rs1_h2_val == -16385, rs2_h1_val == -513, rs1_h1_val == 32767
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x100bfff7fff0200;  op2val:0x100fffbfdff0200
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x100bfff7fff0200, 0x100fffbfdff0200, x1, 1088, x3)

inst_88:// rs1_h2_val == -17, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x100ffefff7ff7ff;  op2val:0xdffffbff3fffdfff
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x100ffefff7ff7ff, 0xdffffbff3fffdfff, x1, 1104, x3)

inst_89:// rs1_h1_val == -1025, rs2_h1_val == 1024
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x060020fbfffffa;  op2val:0xff7ffffb0400fffc
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x060020fbfffffa, 0xff7ffffb0400fffc, x1, 1120, x3)

inst_90:// rs1_h2_val == -32768, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x55558000fffd5555;  op2val:0xfff60020ffeffdff
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x55558000fffd5555, 0xfff60020ffeffdff, x1, 1136, x3)

inst_91:// rs1_h2_val == 2048, rs1_h1_val == -65
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0800ffbfff7f;  op2val:0xdfff0003fbff0008
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xf7ff0800ffbfff7f, 0xdfff0003fbff0008, x1, 1152, x3)

inst_92:// rs2_h1_val == 64, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x400ffdffffefffe;  op2val:0xfff800090040fdff
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x400ffdffffefffe, 0xfff800090040fdff, x1, 1168, x3)

inst_93:// rs2_h1_val == -2, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffefff80008;  op2val:0xfffdfff6fffe0020
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xfffafffefff80008, 0xfffdfff6fffe0020, x1, 1184, x3)

inst_94:// rs2_h1_val == 4096, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000600030007;  op2val:0x8000ff7f1000fffb
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x8000000600030007, 0x8000ff7f1000fffb, x1, 1200, x3)

inst_95:// rs1_h1_val == -4097, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff7fffefff5555;  op2val:0x09fdff7fff0003
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xfbff7fffefff5555, 0x09fdff7fff0003, x1, 1216, x3)

inst_96:// rs1_h1_val == -2049, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x100001f7fffff8;  op2val:0xfffcc000fff70400
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x100001f7fffff8, 0xfffcc000fff70400, x1, 1232, x3)

inst_97:// rs1_h1_val == -513, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fdff0080;  op2val:0xaaaadfffffef0004
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x4000000fdff0080, 0xaaaadfffffef0004, x1, 1248, x3)

inst_98:// rs1_h1_val == -257, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000ff7ffeffff7f;  op2val:0x200fff60100aaaa
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x1000ff7ffeffff7f, 0x200fff60100aaaa, x1, 1264, x3)

inst_99:// rs2_h2_val == 1, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfeff20005555;  op2val:0x20000001fff9fdff
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xfffcfeff20005555, 0x20000001fff9fdff, x1, 1280, x3)

inst_100:// rs1_h1_val == -9, 
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0003fff7fff9;  op2val:0xfffafff70006dfff
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xffef0003fff7fff9, 0xfffafff70006dfff, x1, 1296, x3)

inst_101:// rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h1_val == -8193, rs1_h2_val == 128, rs1_h0_val == 4096, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val == 8, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h2_val == 16, rs2_h3_val == -1, rs2_h0_val == 16384
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc008000081000;  op2val:0xffff0010dfff4000
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xfffc008000081000, 0xffff0010dfff4000, x1, 1312, x3)

inst_102:// rs2_h3_val == -16385, rs2_h1_val == -33, rs1_h0_val == -1
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0005ffefffff;  op2val:0xbfff0004ffdf0006
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0xfffa0005ffefffff, 0xbfff0004ffdf0006, x1, 1328, x3)

inst_103:// rs2_h3_val == 64, rs2_h2_val == 8192, rs2_h0_val == 21845
// opcode: kcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffc0000009bfff;  op2val:0x402000fff65555
TEST_RR_OP(kcras16, x31, x30, x29, 0x0000000000000000, 0x3fffc0000009bfff, 0x402000fff65555, x1, 1344, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 38*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 170*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
