
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmsxda instruction of the RISC-V RV64PZicsr extension for the kmsxda covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmsxda)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x7, rs2==x20, rd==x7, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs1_h3_val == 16, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h2_val == -5, rs1_h1_val != rs2_h1_val, rs1_h2_val == 4, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 256
// opcode: kmsxda ; op1:x7; op2:x20; dest:x7; op1val:0x10000400098000;  op2val:0x07fffb0100fffa
TEST_PKRR_OP(kmsxda, x7, x7, x20, 0x0000000000000000, 0x10000400098000, 0x07fffb0100fffa, x7, x2, 0, x9)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x20, rs2==x16, rd==x24, rs1_h3_val == rs2_h3_val, rs1_h0_val == -9, rs1_h1_val == 128, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h3_val == 16384, rs2_h2_val == 8192, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h3_val == 16384
// opcode: kmsxda ; op1:x20; op2:x16; dest:x24; op1val:0x40003fff0080fff7;  op2val:0x40002000c0000009
TEST_PKRR_OP(kmsxda, x24, x20, x16, 0x0000000000000000, 0x40003fff0080fff7, 0x40002000c0000009, x20, x2, 16, x9)

inst_2:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x5, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == -2049, rs1_h1_val == 2048, rs1_h0_val == 8192, rs1_h2_val == 8, rs1_h3_val == -1, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h3_val == 21845
// opcode: kmsxda ; op1:x31; op2:x31; dest:x5; op1val:0xffff000808002000;  op2val:0x5555f7fffff8c000
TEST_PKRR_OP(kmsxda, x5, x31, x31, 0x0000000000000000, 0xffff000808002000, 0x5555f7fffff8c000, x31, x2, 32, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x12, rs2==x12, rd==x12, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -21846, rs2_h1_val == -65, rs1_h0_val == -1
// opcode: kmsxda ; op1:x12; op2:x12; dest:x12; op1val:0xfff900030006ffff;  op2val:0xaaaa2000ffbf0003
TEST_PKRR_OP(kmsxda, x12, x12, x12, 0x0000000000000000, 0xfff900030006ffff, 0xaaaa2000ffbf0003, x12, x2, 48, x9)

inst_4:
// rs2 == rd != rs1, rs1==x3, rs2==x15, rd==x15, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 1024, rs2_h2_val == -513, rs2_h0_val == 1, rs1_h1_val == 512, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h0_val == 0
// opcode: kmsxda ; op1:x3; op2:x15; dest:x15; op1val:0x400c00002000000;  op2val:0xc000fdffc0000001
TEST_PKRR_OP(kmsxda, x15, x3, x15, 0x0000000000000000, 0x400c00002000000, 0xc000fdffc0000001, x3, x2, 64, x9)

inst_5:
// rs1==x29, rs2==x1, rd==x27, rs1_h2_val == rs2_h2_val, rs2_h0_val == -21846, rs2_h3_val == -9, rs1_h1_val == 256, rs1_h2_val == 1, rs2_h2_val == 1
// opcode: kmsxda ; op1:x29; op2:x1; dest:x27; op1val:0xfffc000101000005;  op2val:0xfff700010006aaaa
TEST_PKRR_OP(kmsxda, x27, x29, x1, 0x0000000000000000, 0xfffc000101000005, 0xfff700010006aaaa, x29, x2, 80, x9)

inst_6:
// rs1==x5, rs2==x3, rd==x30, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h1_val == 0, rs2_h3_val == 1024, rs1_h2_val == -257, rs2_h2_val == 256, rs1_h1_val == -2049
// opcode: kmsxda ; op1:x5; op2:x3; dest:x30; op1val:0xc000fefff7ff0006;  op2val:0x40001000000fffc
TEST_PKRR_OP(kmsxda, x30, x5, x3, 0x0000000000000000, 0xc000fefff7ff0006, 0x40001000000fffc, x5, x2, 96, x9)

inst_7:
// rs1==x22, rs2==x13, rd==x16, rs1_h1_val == rs2_h1_val, rs2_h3_val == -1025, rs2_h1_val == -8193, rs1_h0_val == -2, rs2_h0_val == -4097, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val == -2049, rs1_h1_val == -8193
// opcode: kmsxda ; op1:x22; op2:x13; dest:x16; op1val:0xfffaf7ffdffffffe;  op2val:0xfbff0005dfffefff
TEST_PKRR_OP(kmsxda, x16, x22, x13, 0x0000000000000000, 0xfffaf7ffdffffffe, 0xfbff0005dfffefff, x22, x2, 112, x9)

inst_8:
// rs1==x23, rs2==x11, rd==x10, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h3_val == -513, rs2_h2_val == -1025, rs1_h2_val == 32767, rs1_h0_val == rs2_h0_val, rs1_h1_val == -16385, rs1_h0_val == 1, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h3_val == 4096
// opcode: kmsxda ; op1:x23; op2:x11; dest:x10; op1val:0x10007fffbfff0001;  op2val:0xfdfffbff00060001
TEST_PKRR_OP(kmsxda, x10, x23, x11, 0x0000000000000000, 0x10007fffbfff0001, 0xfdfffbff00060001, x23, x2, 128, x9)

inst_9:
// rs1==x18, rs2==x23, rd==x29, rs2_h3_val == 32767, rs1_h3_val == 8192, rs1_h1_val == -17, rs1_h2_val == 0
// opcode: kmsxda ; op1:x18; op2:x23; dest:x29; op1val:0x20000000ffef0005;  op2val:0x7ffffff9fffafff6
TEST_PKRR_OP(kmsxda, x29, x18, x23, 0x0000000000000000, 0x20000000ffef0005, 0x7ffffff9fffafff6, x18, x2, 144, x9)

inst_10:
// rs1==x25, rs2==x14, rd==x31, rs2_h3_val == -16385, rs2_h1_val == -1025, rs1_h3_val == -4097, rs1_h2_val == -16385, rs1_h1_val == 32767, rs1_h0_val == 4, rs2_h0_val == 1024
// opcode: kmsxda ; op1:x25; op2:x14; dest:x31; op1val:0xefffbfff7fff0004;  op2val:0xbffffdfffbff0400
TEST_PKRR_OP(kmsxda, x31, x25, x14, 0x0000000000000000, 0xefffbfff7fff0004, 0xbffffdfffbff0400, x25, x2, 160, x9)

inst_11:
// rs1==x8, rs2==x4, rd==x25, rs2_h3_val == -8193, rs1_h0_val == 512, rs2_h0_val == 512, rs2_h1_val == 16, rs1_h3_val == -33
// opcode: kmsxda ; op1:x8; op2:x4; dest:x25; op1val:0xffdfc000dfff0200;  op2val:0xdffffdff00100200
TEST_PKRR_OP(kmsxda, x25, x8, x4, 0x0000000000000000, 0xffdfc000dfff0200, 0xdffffdff00100200, x8, x2, 176, x9)

inst_12:
// rs1==x21, rs2==x7, rd==x23, rs2_h3_val == -4097, rs1_h2_val == -65, rs1_h3_val == -21846, rs1_h0_val == 16, rs2_h1_val == 2048
// opcode: kmsxda ; op1:x21; op2:x7; dest:x23; op1val:0xaaaaffbf00060010;  op2val:0xefff00060800aaaa
TEST_PKRR_OP(kmsxda, x23, x21, x7, 0x0000000000000000, 0xaaaaffbf00060010, 0xefff00060800aaaa, x21, x2, 192, x9)

inst_13:
// rs1==x6, rs2==x26, rd==x18, rs2_h3_val == -2049, rs1_h3_val == 2048, rs1_h2_val == 2048, rs2_h2_val == -21846, rs2_h0_val == 2
// opcode: kmsxda ; op1:x6; op2:x26; dest:x18; op1val:0x8000800fffc0000;  op2val:0xf7ffaaaafff80002
TEST_PKRR_OP(kmsxda, x18, x6, x26, 0x0000000000000000, 0x8000800fffc0000, 0xf7ffaaaafff80002, x6, x2, 208, x9)

inst_14:
// rs1==x11, rs2==x21, rd==x19, rs2_h3_val == -257, rs2_h1_val == 21845, rs2_h0_val == -2049, rs1_h1_val == -9
// opcode: kmsxda ; op1:x11; op2:x21; dest:x19; op1val:0xaaaa0800fff7fff8;  op2val:0xfefffff85555f7ff
TEST_PKRR_OP(kmsxda, x19, x11, x21, 0x0000000000000000, 0xaaaa0800fff7fff8, 0xfefffff85555f7ff, x11, x2, 224, x12)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_15:
// rs1==x1, rs2==x10, rd==x2, rs2_h3_val == -129, rs2_h0_val == 16384, rs2_h1_val == -257, rs2_h2_val == -257
// opcode: kmsxda ; op1:x1; op2:x10; dest:x2; op1val:0x10000900030006;  op2val:0xff7ffefffeff4000
TEST_PKRR_OP(kmsxda, x2, x1, x10, 0x0000000000000000, 0x10000900030006, 0xff7ffefffeff4000, x1, x7, 0, x12)

inst_16:
// rs1==x4, rs2==x6, rd==x0, rs2_h3_val == -65, rs2_h0_val == 64, rs2_h1_val == -513, rs1_h3_val == 21845, rs2_h2_val == 4096, rs1_h1_val == -513, rs1_h2_val == -3
// opcode: kmsxda ; op1:x4; op2:x6; dest:x0; op1val:0x5555fffdfdfffff9;  op2val:0xffbf1000fdff0040
TEST_PKRR_OP(kmsxda, x0, x4, x6, 0x0000000000000000, 0x5555fffdfdfffff9, 0xffbf1000fdff0040, x4, x7, 16, x12)

inst_17:
// rs1==x17, rs2==x19, rd==x28, rs2_h3_val == -33, rs2_h0_val == -1, rs1_h3_val == -513, rs2_h1_val == 8192
// opcode: kmsxda ; op1:x17; op2:x19; dest:x28; op1val:0xfdff08000003fffe;  op2val:0xffdffeff2000ffff
TEST_PKRR_OP(kmsxda, x28, x17, x19, 0x0000000000000000, 0xfdff08000003fffe, 0xffdffeff2000ffff, x17, x7, 32, x12)

inst_18:
// rs1==x30, rs2==x28, rd==x8, rs2_h3_val == -17, rs1_h2_val == 32, rs1_h0_val == 4096, rs1_h1_val == 32, rs2_h2_val == -2, rs1_h3_val == -257
// opcode: kmsxda ; op1:x30; op2:x28; dest:x8; op1val:0xfeff002000201000;  op2val:0xffeffffe0005ffff
TEST_PKRR_OP(kmsxda, x8, x30, x28, 0x0000000000000000, 0xfeff002000201000, 0xffeffffe0005ffff, x30, x7, 48, x12)

inst_19:
// rs1==x13, rs2==x17, rd==x6, rs2_h3_val == -5, rs1_h3_val == -65, rs2_h1_val == 16384, rs2_h2_val == 2, rs2_h0_val == -2
// opcode: kmsxda ; op1:x13; op2:x17; dest:x6; op1val:0xffbf7ffffffa0003;  op2val:0xfffb00024000fffe
TEST_PKRR_OP(kmsxda, x6, x13, x17, 0x0000000000000000, 0xffbf7ffffffa0003, 0xfffb00024000fffe, x13, x7, 64, x12)

inst_20:
// rs1==x15, rs2==x29, rd==x26, rs2_h3_val == -3, rs2_h1_val == 1024, rs1_h0_val == -1025, rs1_h2_val == 256, rs1_h3_val == 4
// opcode: kmsxda ; op1:x15; op2:x29; dest:x26; op1val:0x040100fff8fbff;  op2val:0xfffd3fff04000002
TEST_PKRR_OP(kmsxda, x26, x15, x29, 0x0000000000000000, 0x040100fff8fbff, 0xfffd3fff04000002, x15, x7, 80, x12)

inst_21:
// rs1==x9, rs2==x5, rd==x13, rs2_h3_val == -2, rs1_h3_val == -32768, rs1_h2_val == 2
// opcode: kmsxda ; op1:x9; op2:x5; dest:x13; op1val:0x8000000208008000;  op2val:0xfffefffcfff8efff
TEST_PKRR_OP(kmsxda, x13, x9, x5, 0x0000000000000000, 0x8000000208008000, 0xfffefffcfff8efff, x9, x7, 96, x12)

inst_22:
// rs1==x24, rs2==x2, rd==x17, rs2_h3_val == -32768, rs1_h1_val == 0
// opcode: kmsxda ; op1:x24; op2:x2; dest:x17; op1val:0x10f7ff0000ffff;  op2val:0x8000feffc0000200
TEST_PKRR_OP(kmsxda, x17, x24, x2, 0x0000000000000000, 0x10f7ff0000ffff, 0x8000feffc0000200, x24, x7, 112, x12)

inst_23:
// rs1==x27, rs2==x30, rd==x3, rs2_h3_val == 8192, rs1_h3_val == 512, rs1_h1_val == -2, rs2_h0_val == -16385, rs2_h1_val == -5, rs1_h2_val == -9
// opcode: kmsxda ; op1:x27; op2:x30; dest:x3; op1val:0x200fff7fffe8000;  op2val:0x2000fefffffbbfff
TEST_PKRR_OP(kmsxda, x3, x27, x30, 0x0000000000000000, 0x200fff7fffe8000, 0x2000fefffffbbfff, x27, x7, 128, x12)

inst_24:
// rs1==x26, rs2==x25, rd==x14, rs2_h3_val == 4096, rs1_h1_val == 1024, rs1_h0_val == 8, rs2_h2_val == 128, rs2_h0_val == 4096, rs2_h1_val == 8
// opcode: kmsxda ; op1:x26; op2:x25; dest:x14; op1val:0xfffffeff04000008;  op2val:0x1000008000081000
TEST_PKRR_OP(kmsxda, x14, x26, x25, 0x0000000000000000, 0xfffffeff04000008, 0x1000008000081000, x26, x7, 144, x12)

inst_25:
// rs1==x28, rs2==x8, rd==x20, rs2_h3_val == 2048, rs2_h0_val == -33, rs2_h2_val == 16, rs1_h3_val == -3, rs1_h0_val == -17
// opcode: kmsxda ; op1:x28; op2:x8; dest:x20; op1val:0xfffdfffc0006ffef;  op2val:0x80000105555ffdf
TEST_PKRR_OP(kmsxda, x20, x28, x8, 0x0000000000000000, 0xfffdfffc0006ffef, 0x80000105555ffdf, x28, x7, 160, x12)

inst_26:
// rs1==x10, rs2==x27, rd==x1, rs2_h3_val == 512, rs1_h1_val == -1025, rs2_h1_val == -21846
// opcode: kmsxda ; op1:x10; op2:x27; dest:x1; op1val:0xfffafff7fbff0000;  op2val:0x200fffeaaaafffa
TEST_PKRR_OP(kmsxda, x1, x10, x27, 0x0000000000000000, 0xfffafff7fbff0000, 0x200fffeaaaafffa, x10, x7, 176, x12)

inst_27:
// rs1==x19, rs2==x24, rd==x4, rs2_h3_val == 256, rs1_h2_val == 64, rs2_h2_val == 32, rs2_h1_val == -4097
// opcode: kmsxda ; op1:x19; op2:x24; dest:x4; op1val:0xfff600403fff8000;  op2val:0x1000020efffffdf
TEST_PKRR_OP(kmsxda, x4, x19, x24, 0x0000000000000000, 0xfff600403fff8000, 0x1000020efffffdf, x19, x7, 192, x12)

inst_28:
// rs1==x0, rs2==x22, rd==x9, rs2_h3_val == 128, rs1_h1_val == -32768, rs1_h2_val == -8193, rs1_h3_val == -129, rs1_h0_val == -8193
// opcode: kmsxda ; op1:x0; op2:x22; dest:x9; op1val:0xff7fdfff8000dfff;  op2val:0x80f7ff0010fff8
TEST_PKRR_OP(kmsxda, x9, x0, x22, 0x0000000000000000, 0xff7fdfff8000dfff, 0x80f7ff0010fff8, x0, x7, 208, x12)

inst_29:
// rs1==x14, rs2==x18, rd==x11, rs2_h3_val == 64, rs1_h3_val == -2, rs2_h2_val == -17, rs2_h1_val == 32767, rs1_h1_val == -1
// opcode: kmsxda ; op1:x14; op2:x18; dest:x11; op1val:0xfffefffdffffffef;  op2val:0x40ffef7fff0006
TEST_PKRR_OP(kmsxda, x11, x14, x18, 0x0000000000000000, 0xfffefffdffffffef, 0x40ffef7fff0006, x14, x7, 224, x12)

inst_30:
// rs1==x2, rs2==x0, rd==x22, rs2_h3_val == 32, rs1_h0_val == 64, rs2_h0_val == -513, rs1_h1_val == 8
// opcode: kmsxda ; op1:x2; op2:x0; dest:x22; op1val:0x5555fffa00080040;  op2val:0x2020000008fdff
TEST_PKRR_OP(kmsxda, x22, x2, x0, 0x0000000000000000, 0x5555fffa00080040, 0x2020000008fdff, x2, x7, 240, x3)

inst_31:
// rs1==x16, rs2==x9, rd==x21, rs2_h3_val == 16, rs2_h1_val == 4096
// opcode: kmsxda ; op1:x16; op2:x9; dest:x21; op1val:0x04fff83fff0001;  op2val:0x10008010000003
TEST_PKRR_OP(kmsxda, x21, x16, x9, 0x0000000000000000, 0x04fff83fff0001, 0x10008010000003, x16, x7, 256, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs2_h3_val == 8, rs2_h0_val == 0, rs1_h3_val == 1, rs1_h1_val == 4, rs1_h2_val == -4097, rs2_h1_val == 512
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x01efff0004fff8;  op2val:0x083fff02000000
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x01efff0004fff8, 0x083fff02000000, x30, x1, 0, x3)

inst_33:
// rs2_h3_val == 4, rs1_h1_val == -5, rs2_h2_val == -8193, rs2_h0_val == 16, rs1_h2_val == 16, rs1_h0_val == 32
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x4000010fffb0020;  op2val:0x04dfff40000010
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x4000010fffb0020, 0x04dfff40000010, x30, x1, 16, x3)

inst_34:
// rs2_h3_val == 2, rs2_h0_val == -17, rs2_h2_val == 21845, rs2_h1_val == -9
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffcf7ff8000fff7;  op2val:0x025555fff7ffef
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfffcf7ff8000fff7, 0x025555fff7ffef, x30, x1, 32, x3)

inst_35:
// rs1_h1_val == -3, rs1_h0_val == -65, rs1_h2_val == -21846, rs1_h3_val == -8193
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xdfffaaaafffdffbf;  op2val:0xfbfffffbaaaaaaaa
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xdfffaaaafffdffbf, 0xfbfffffbaaaaaaaa, x30, x1, 48, x3)

inst_36:
// rs1_h1_val == 16384, rs2_h3_val == -1
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff800104000c000;  op2val:0xffffdfff0009fffe
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfff800104000c000, 0xffffdfff0009fffe, x30, x1, 64, x3)

inst_37:
// rs1_h1_val == 8192, rs2_h0_val == 32, rs1_h2_val == 8192
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff8200020002000;  op2val:0xfff90010fdff0020
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfff8200020002000, 0xfff90010fdff0020, x30, x1, 80, x3)

inst_38:
// rs1_h1_val == 4096, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x200000021000fffa;  op2val:0xfff8010000051000
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x200000021000fffa, 0xfff8010000051000, x30, x1, 96, x3)

inst_39:
// rs1_h1_val == 64, rs1_h0_val == 2048, rs2_h1_val == -32768
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfeff000200400800;  op2val:0xffeffffa80000009
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfeff000200400800, 0xffeffffa80000009, x30, x1, 112, x3)

inst_40:
// rs1_h1_val == 16, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffd000300100003;  op2val:0x07fffbdfffefff
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfffd000300100003, 0x07fffbdfffefff, x30, x1, 128, x3)

inst_41:
// rs1_h1_val == 2, rs2_h1_val == -129, rs2_h0_val == 32767
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x05fff600020003;  op2val:0x042000ff7f7fff
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x05fff600020003, 0x042000ff7f7fff, x30, x1, 144, x3)

inst_42:
// rs1_h1_val == 1, rs2_h0_val == 8192, rs2_h2_val == 8
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x01fffa0001fffa;  op2val:0xefff00087fff2000
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x01fffa0001fffa, 0xefff00087fff2000, x30, x1, 160, x3)

inst_43:
// rs1_h0_val == -21846, rs2_h2_val == -4097
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0003fffeaaaa;  op2val:0xfbffefff00050006
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x3fff0003fffeaaaa, 0xfbffefff00050006, x30, x1, 176, x3)

inst_44:
// rs1_h0_val == 21845, rs1_h2_val == 4096
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffa1000fff75555;  op2val:0xfffe3fff0008ffff
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfffa1000fff75555, 0xfffe3fff0008ffff, x30, x1, 192, x3)

inst_45:
// rs1_h0_val == 32767, rs1_h2_val == -2
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffe7fff7fff;  op2val:0x07fff8fff73fff
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfffefffe7fff7fff, 0x07fff8fff73fff, x30, x1, 208, x3)

inst_46:
// rs1_h0_val == -16385, rs2_h3_val == 1
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffefdffbfff;  op2val:0x0100100200fdff
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xffbffffefdffbfff, 0x0100100200fdff, x30, x1, 224, x3)

inst_47:
// rs1_h0_val == -4097, rs2_h0_val == 8, rs2_h1_val == -17, rs1_h3_val == 0
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x00fff60006efff;  op2val:0x100aaaaffef0008
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x00fff60006efff, 0x100aaaaffef0008, x30, x1, 240, x3)

inst_48:
// rs1_h0_val == -2049, rs1_h1_val == -129
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0040ff7ff7ff;  op2val:0x09008020003fff
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xffbf0040ff7ff7ff, 0x09008020003fff, x30, x1, 256, x3)

inst_49:
// rs1_h0_val == -513, rs2_h2_val == -16385, rs2_h1_val == 64, rs1_h3_val == -5, rs1_h2_val == -129
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffbff7fffeffdff;  op2val:0xaaaabfff0040fff9
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfffbff7fffeffdff, 0xaaaabfff0040fff9, x30, x1, 272, x3)

inst_50:
// rs1_h0_val == -257, rs1_h1_val == -257
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff8bffffefffeff;  op2val:0xfff8fdffff7ffdff
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfff8bffffefffeff, 0xfff8fdffff7ffdff, x30, x1, 288, x3)

inst_51:
// rs1_h0_val == -129, rs2_h1_val == 2
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xffff00057fffff7f;  op2val:0x200fffc00020002
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xffff00057fffff7f, 0x200fffc00020002, x30, x1, 304, x3)

inst_52:
// rs1_h0_val == -33, rs2_h2_val == -65, rs2_h0_val == -129
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x037fff0003ffdf;  op2val:0xfff7ffbfffbfff7f
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x037fff0003ffdf, 0xfff7ffbfffbfff7f, x30, x1, 320, x3)

inst_53:
// rs1_h0_val == -5, rs1_h2_val == -1025, rs2_h2_val == 512
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fbff0001fffb;  op2val:0xfeff0200fff70010
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfff9fbff0001fffb, 0xfeff0200fff70010, x30, x1, 336, x3)

inst_54:
// rs1_h0_val == -3, rs1_h3_val == 64
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x40fff80004fffd;  op2val:0x400bfff20000200
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x40fff80004fffd, 0x400bfff20000200, x30, x1, 352, x3)

inst_55:
// rs1_h0_val == 16384, rs2_h2_val == -3
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff7fffe4000;  op2val:0xfffdfffd02000040
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xdffffff7fffe4000, 0xfffdfffd02000040, x30, x1, 368, x3)

inst_56:
// rs1_h0_val == 1024, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x06fffdbfff0400;  op2val:0xfff6effffff7fffa
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x06fffdbfff0400, 0xfff6effffff7fffa, x30, x1, 384, x3)

inst_57:
// rs1_h0_val == 256, rs2_h0_val == -3
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x400c00000020100;  op2val:0x7ffffffc4000fffd
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x400c00000020100, 0x7ffffffc4000fffd, x30, x1, 400, x3)

inst_58:
// rs1_h0_val == 128, rs2_h0_val == -32768
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xffdf7fff7fff0080;  op2val:0xfff8000380008000
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xffdf7fff7fff0080, 0xfff8000380008000, x30, x1, 416, x3)

inst_59:
// rs2_h1_val == 4, rs2_h0_val == -257
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x800010010008000;  op2val:0xfeff00070004feff
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x800010010008000, 0xfeff00070004feff, x30, x1, 432, x3)

inst_60:
// rs2_h1_val == 1, rs1_h2_val == -17, rs2_h2_val == 2048
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffef00000100;  op2val:0xfff708000001ff7f
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x1000ffef00000100, 0xfff708000001ff7f, x30, x1, 448, x3)

inst_61:
// rs2_h1_val == -1, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffefffff70400;  op2val:0x3fff0010ffffffff
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x3ffffefffff70400, 0x3fff0010ffffffff, x30, x1, 464, x3)

inst_62:
// rs2_h0_val == 21845, rs1_h2_val == -33, rs1_h3_val == 8
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x08ffdf20000006;  op2val:0xdffffffdc0005555
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x08ffdf20000006, 0xdffffffdc0005555, x30, x1, 480, x3)

inst_63:
// rs2_h0_val == -8193, rs2_h2_val == -32768
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x003fff0020bfff;  op2val:0x2080000002dfff
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x003fff0020bfff, 0x2080000002dfff, x30, x1, 496, x3)

inst_64:
// rs2_h0_val == -1025, rs1_h1_val == -4097
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x04bfffefff0100;  op2val:0x01ffbf0040fbff
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x04bfffefff0100, 0x01ffbf0040fbff, x30, x1, 512, x3)

inst_65:
// rs2_h0_val == -65, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffa00020200;  op2val:0xefffbffffff7ffbf
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xdffffffa00020200, 0xefffbffffff7ffbf, x30, x1, 528, x3)

inst_66:
// rs2_h0_val == -9, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x050002fff7feff;  op2val:0xfff610000200fff7
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x050002fff7feff, 0xfff610000200fff7, x30, x1, 544, x3)

inst_67:
// rs2_h0_val == -5, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffdf00070000;  op2val:0x2000fff6fffbfffb
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfeffffdf00070000, 0x2000fff6fffbfffb, x30, x1, 560, x3)

inst_68:
// rs2_h0_val == 2048, rs1_h2_val == 128
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x080080fffe0200;  op2val:0x04c00010000800
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x080080fffe0200, 0x04c00010000800, x30, x1, 576, x3)

inst_69:
// rs2_h0_val == 256, rs1_h2_val == 21845
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xffbf5555fff9c000;  op2val:0x1000efff3fff0100
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xffbf5555fff9c000, 0x1000efff3fff0100, x30, x1, 592, x3)

inst_70:
// rs2_h0_val == 128, rs1_h2_val == -513
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x05fdff00050800;  op2val:0xffbffdff00050080
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x05fdff00050800, 0xffbffdff00050080, x30, x1, 608, x3)

inst_71:
// rs2_h0_val == 4, rs1_h3_val == -17
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xffefaaaadfff0100;  op2val:0x2000006fffa0004
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xffefaaaadfff0100, 0x2000006fffa0004, x30, x1, 624, x3)

inst_72:
// rs1_h3_val == 32767, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x7fff00800003ffff;  op2val:0xfff6ffbffff9f7ff
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x7fff00800003ffff, 0xfff6ffbffff9f7ff, x30, x1, 640, x3)

inst_73:
// rs1_h3_val == -16385, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0040ffff0040;  op2val:0x5555fffa0001fffa
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xbfff0040ffff0040, 0x5555fffa0001fffa, x30, x1, 656, x3)

inst_74:
// rs1_h3_val == -2049, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff10002000fffc;  op2val:0x0100090200dfff
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xf7ff10002000fffc, 0x0100090200dfff, x30, x1, 672, x3)

inst_75:
// rs1_h3_val == -1025, rs2_h2_val == 64
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfbff00020800ff7f;  op2val:0xfffb0040c000ffdf
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfbff00020800ff7f, 0xfffb0040c000ffdf, x30, x1, 688, x3)

inst_76:
// rs1_h0_val == 2, rs1_h3_val == 256, rs2_h1_val == 128
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x1005555fffb0002;  op2val:0x1000000100800008
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x1005555fffb0002, 0x1000000100800008, x30, x1, 704, x3)

inst_77:
// rs1_h3_val == -9, rs1_h2_val == 512
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff7020000205555;  op2val:0xffeffffafff7fffc
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfff7020000205555, 0xffeffffafff7fffc, x30, x1, 720, x3)

inst_78:
// rs1_h3_val == 128, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x80fff6c0004000;  op2val:0x1000000300080080
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x80fff6c0004000, 0x1000000300080080, x30, x1, 736, x3)

inst_79:
// rs1_h3_val == 32, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x20fbff0008ff7f;  op2val:0x7fff0001fffc1000
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x20fbff0008ff7f, 0x7fff0001fffc1000, x30, x1, 752, x3)

inst_80:
// rs2_h2_val == -129, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x10c000effffdff;  op2val:0xfffaff7f0005fff8
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x10c000effffdff, 0xfffaff7f0005fff8, x30, x1, 768, x3)

inst_81:
// rs2_h2_val == -33, rs1_h1_val == -65
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffaffbf8000;  op2val:0xfdffffdf0004ffff
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfffefffaffbf8000, 0xfdffffdf0004ffff, x30, x1, 784, x3)

inst_82:
// rs1_h3_val == 2, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x02ffdf0003fff8;  op2val:0x400000908000008
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x02ffdf0003fff8, 0x400000908000008, x30, x1, 800, x3)

inst_83:
// rs2_h2_val == -9, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff8000804000008;  op2val:0xfff7fff700055555
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfff8000804000008, 0xfff7fff700055555, x30, x1, 816, x3)

inst_84:
// rs2_h2_val == 16384, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xefff000101000400;  op2val:0x044000fff94000
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xefff000101000400, 0x044000fff94000, x30, x1, 832, x3)

inst_85:
// rs2_h2_val == 1024, rs2_h1_val == -16385
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x4000001000040200;  op2val:0x800400bfff2000
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x4000001000040200, 0x800400bfff2000, x30, x1, 848, x3)

inst_86:
// rs2_h2_val == 4, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff7dfff0001dfff;  op2val:0xbfff0004bfff0002
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfff7dfff0001dfff, 0xbfff0004bfff0002, x30, x1, 864, x3)

inst_87:
// rs1_h2_val == -5, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffb04000200;  op2val:0x803fff00080006
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfff6fffb04000200, 0x803fff00080006, x30, x1, 880, x3)

inst_88:
// rs2_h2_val == 0, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x047fff80000100;  op2val:0x070000fff9ffff
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x047fff80000100, 0x070000fff9ffff, x30, x1, 896, x3)

inst_89:
// rs2_h2_val == -1, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fefffffb0080;  op2val:0xffefffff00060200
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfff7fefffffb0080, 0xffefffff00060200, x30, x1, 912, x3)

inst_90:
// rs1_h2_val == 16384, rs1_h1_val == -33
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x204000ffdf0020;  op2val:0xffdffffefff90010
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x204000ffdf0020, 0xffdffffefff90010, x30, x1, 928, x3)

inst_91:
// rs1_h2_val == 1024, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xc00004000000fffd;  op2val:0xfffe00017fff0008
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xc00004000000fffd, 0xfffe00017fff0008, x30, x1, 944, x3)

inst_92:
// rs1_h2_val == -32768, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xfffe8000c000dfff;  op2val:0x20000006fff6fff7
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xfffe8000c000dfff, 0x20000006fff6fff7, x30, x1, 960, x3)

inst_93:
// rs2_h1_val == -2049, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x10feffff7fffbf;  op2val:0x3fffffdff7fffffe
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x10feffff7fffbf, 0x3fffffdff7fffffe, x30, x1, 976, x3)

inst_94:
// rs2_h1_val == -33, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0400fefffdff;  op2val:0xdffffeffffdf0002
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xff7f0400fefffdff, 0xdffffeffffdf0002, x30, x1, 992, x3)

inst_95:
// rs1_h2_val == -1, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffffff1000;  op2val:0xfffdfeffffbf5555
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x3fffffffffff1000, 0xfffdfeffffbf5555, x30, x1, 1008, x3)

inst_96:
// rs2_h1_val == -3, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x800080bfff0008;  op2val:0xefff0002fffdefff
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x800080bfff0008, 0xefff0002fffdefff, x30, x1, 1024, x3)

inst_97:
// rs1_h1_val == -21846, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x2000010aaaafffc;  op2val:0xffef3fff0200fffb
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x2000010aaaafffc, 0xffef3fff0200fffb, x30, x1, 1040, x3)

inst_98:
// rs2_h1_val == -2, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x3ffff7ff04000008;  op2val:0x050008fffec000
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x3ffff7ff04000008, 0x050008fffec000, x30, x1, 1056, x3)

inst_99:
// rs1_h1_val == 21845, rs2_h3_val == 0
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffbf5555aaaa;  op2val:0x00000100060000
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xdfffffbf5555aaaa, 0x00000100060000, x30, x1, 1072, x3)

inst_100:
// rs2_h1_val == 32, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x1003fff0080f7ff;  op2val:0xffefff7f0020bfff
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x1003fff0080f7ff, 0xffefff7f0020bfff, x30, x1, 1088, x3)

inst_101:
// rs2_h2_val == 32767, 
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x02ffbffffeff7f;  op2val:0x407fffffff7fff
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x02ffbffffeff7f, 0x407fffffff7fff, x30, x1, 1104, x3)

inst_102:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == -2049, rs1_h1_val == 2048, rs1_h0_val == 8192, rs1_h2_val == 8, rs1_h3_val == -1, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h3_val == 21845
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0xffff000808002000;  op2val:0x5555f7fffff8c000
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0xffff000808002000, 0x5555f7fffff8c000, x30, x1, 1120, x3)

inst_103:
// rs2_h3_val == -65, rs2_h0_val == 64, rs2_h1_val == -513, rs1_h3_val == 21845, rs2_h2_val == 4096, rs1_h1_val == -513, rs1_h2_val == -3
// opcode: kmsxda ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffdfdfffff9;  op2val:0xffbf1000fdff0040
TEST_PKRR_OP(kmsxda, x31, x30, x29, 0x0000000000000000, 0x5555fffdfdfffff9, 0xffbf1000fdff0040, x30, x1, 1136, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 144*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
