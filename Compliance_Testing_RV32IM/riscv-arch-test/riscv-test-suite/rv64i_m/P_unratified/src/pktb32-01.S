
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the pktb32 instruction of the RISC-V RV64PZicsr extension for the pktb32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",pktb32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 == rd != rs2, rs1==x30, rs2==x22, rd==x30, rs1_w0_val == 0, rs1_w1_val == 64, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 134217728, rs2_w0_val == 4294967293
// opcode: pktb32 ; op1:x30; op2:x22; dest:x30; op1val:0x00004000000000;  op2val:0x8000000fffffffd
TEST_RR_OP(pktb32, x30, x30, x22, 0x0000000000000000, 0x00004000000000, 0x8000000fffffffd, x11, 0, x17)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x14, rs2==x16, rd==x27, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 4294967287, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 4294967287, rs1_w0_val == 2863311530, rs2_w0_val == 4293918719
// opcode: pktb32 ; op1:x14; op2:x16; dest:x27; op1val:0xfffffff7aaaaaaaa;  op2val:0xfffffff7ffefffff
TEST_RR_OP(pktb32, x27, x14, x16, 0x0000000000000000, 0xfffffff7aaaaaaaa, 0xfffffff7ffefffff, x11, 8, x17)

inst_2:
// rs1 == rs2 != rd, rs1==x28, rs2==x28, rd==x21, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 4290772991, rs1_w0_val == 536870912, rs2_w1_val == 4294967279, rs2_w0_val == 536870912
// opcode: pktb32 ; op1:x28; op2:x28; dest:x21; op1val:0xffbfffff20000000;  op2val:0xffffffef20000000
TEST_RR_OP(pktb32, x21, x28, x28, 0x0000000000000000, 0xffbfffff20000000, 0xffffffef20000000, x11, 16, x17)

inst_3:
// rs1 == rs2 == rd, rs1==x2, rs2==x2, rd==x2, rs2_w1_val == 2863311530, rs1_w0_val == 2147483647, rs1_w1_val == 1024
// opcode: pktb32 ; op1:x2; op2:x2; dest:x2; op1val:0x0004007fffffff;  op2val:0xaaaaaaaa0000000f
TEST_RR_OP(pktb32, x2, x2, x2, 0x0000000000000000, 0x0004007fffffff, 0xaaaaaaaa0000000f, x11, 24, x17)

inst_4:
// rs2 == rd != rs1, rs1==x15, rs2==x12, rd==x12, rs2_w1_val == 1431655765, rs1_w0_val == 3758096383, rs1_w1_val == 16777216
// opcode: pktb32 ; op1:x15; op2:x12; dest:x12; op1val:0x1000000dfffffff;  op2val:0x555555550000000c
TEST_RR_OP(pktb32, x12, x15, x12, 0x0000000000000000, 0x1000000dfffffff, 0x555555550000000c, x11, 32, x17)

inst_5:
// rs1==x22, rs2==x29, rd==x9, rs2_w1_val == 2147483647, rs2_w0_val == 262144, rs1_w0_val == 1431655765, rs1_w1_val == 33554432
// opcode: pktb32 ; op1:x22; op2:x29; dest:x9; op1val:0x200000055555555;  op2val:0x7fffffff00040000
TEST_RR_OP(pktb32, x9, x22, x29, 0x0000000000000000, 0x200000055555555, 0x7fffffff00040000, x11, 40, x17)

inst_6:
// rs1==x8, rs2==x3, rd==x18, rs2_w1_val == 3221225471, rs2_w0_val == 2863311530, rs1_w1_val == 4160749567, rs1_w0_val == 524288
// opcode: pktb32 ; op1:x8; op2:x3; dest:x18; op1val:0xf7ffffff00080000;  op2val:0xbfffffffaaaaaaaa
TEST_RR_OP(pktb32, x18, x8, x3, 0x0000000000000000, 0xf7ffffff00080000, 0xbfffffffaaaaaaaa, x11, 48, x17)

inst_7:
// rs1==x19, rs2==x18, rd==x4, rs2_w1_val == 3758096383, rs1_w1_val == 4292870143, rs2_w0_val == 4194304, rs1_w0_val == 33554432
// opcode: pktb32 ; op1:x19; op2:x18; dest:x4; op1val:0xffdfffff02000000;  op2val:0xdfffffff00400000
TEST_RR_OP(pktb32, x4, x19, x18, 0x0000000000000000, 0xffdfffff02000000, 0xdfffffff00400000, x11, 56, x17)

inst_8:
// rs1==x13, rs2==x1, rd==x6, rs2_w1_val == 4026531839, rs1_w1_val == 4294965247, rs1_w0_val == 4292870143, rs2_w0_val == 2048
// opcode: pktb32 ; op1:x13; op2:x1; dest:x6; op1val:0xfffff7ffffdfffff;  op2val:0xefffffff00000800
TEST_RR_OP(pktb32, x6, x13, x1, 0x0000000000000000, 0xfffff7ffffdfffff, 0xefffffff00000800, x11, 64, x17)

inst_9:
// rs1==x12, rs2==x13, rd==x8, rs2_w1_val == 4160749567, rs1_w0_val == 2, rs1_w1_val == 4278190079
// opcode: pktb32 ; op1:x12; op2:x13; dest:x8; op1val:0xfeffffff00000002;  op2val:0xf7ffffff00400000
TEST_RR_OP(pktb32, x8, x12, x13, 0x0000000000000000, 0xfeffffff00000002, 0xf7ffffff00400000, x11, 72, x17)

inst_10:
// rs1==x5, rs2==x6, rd==x10, rs2_w1_val == 4227858431, rs1_w1_val == 0, rs1_w0_val == 268435456
// opcode: pktb32 ; op1:x5; op2:x6; dest:x10; op1val:0x00000010000000;  op2val:0xfbfffffffffffffd
TEST_RR_OP(pktb32, x10, x5, x6, 0x0000000000000000, 0x00000010000000, 0xfbfffffffffffffd, x11, 80, x17)

inst_11:
// rs1==x0, rs2==x31, rd==x15, rs2_w1_val == 4261412863, rs1_w1_val == 512
// opcode: pktb32 ; op1:x0; op2:x31; dest:x15; op1val:0x0002007fffffff;  op2val:0xfdffffff0000000a
TEST_RR_OP(pktb32, x15, x0, x31, 0x0000000000000000, 0x0002007fffffff, 0xfdffffff0000000a, x11, 88, x17)

inst_12:
// rs1==x4, rs2==x0, rd==x23, rs2_w1_val == 4278190079, rs1_w0_val == 4294443007
// opcode: pktb32 ; op1:x4; op2:x0; dest:x23; op1val:0x000003fff7ffff;  op2val:0xfeffffffaaaaaaaa
TEST_RR_OP(pktb32, x23, x4, x0, 0x0000000000000000, 0x000003fff7ffff, 0xfeffffffaaaaaaaa, x11, 96, x17)

inst_13:
// rs1==x1, rs2==x4, rd==x28, rs2_w1_val == 4286578687, rs2_w0_val == 4261412863
// opcode: pktb32 ; op1:x1; op2:x4; dest:x28; op1val:0x00000eaaaaaaaa;  op2val:0xff7ffffffdffffff
TEST_RR_OP(pktb32, x28, x1, x4, 0x0000000000000000, 0x00000eaaaaaaaa, 0xff7ffffffdffffff, x11, 104, x17)

inst_14:
// rs1==x9, rs2==x25, rd==x29, rs2_w1_val == 4290772991, rs1_w0_val == 16
// opcode: pktb32 ; op1:x9; op2:x25; dest:x29; op1val:0xfeffffff00000010;  op2val:0xffbfffff00400000
TEST_RR_OP(pktb32, x29, x9, x25, 0x0000000000000000, 0xfeffffff00000010, 0xffbfffff00400000, x11, 112, x17)

inst_15:
// rs1==x7, rs2==x10, rd==x22, rs2_w1_val == 4292870143, rs1_w0_val == 512, rs1_w1_val == 2048
// opcode: pktb32 ; op1:x7; op2:x10; dest:x22; op1val:0x00080000000200;  op2val:0xffdfffff00000011
TEST_RR_OP(pktb32, x22, x7, x10, 0x0000000000000000, 0x00080000000200, 0xffdfffff00000011, x11, 120, x17)

inst_16:
// rs1==x10, rs2==x17, rd==x24, rs2_w1_val == 4293918719, rs1_w0_val == 16777216, rs1_w1_val == 16, rs2_w0_val == 8388608
// opcode: pktb32 ; op1:x10; op2:x17; dest:x24; op1val:0x00001001000000;  op2val:0xffefffff00800000
TEST_RR_OP(pktb32, x24, x10, x17, 0x0000000000000000, 0x00001001000000, 0xffefffff00800000, x11, 128, x4)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_17:
// rs1==x27, rs2==x21, rd==x3, rs2_w1_val == 4294443007, rs1_w0_val == 4026531839, rs1_w1_val == 8388608
// opcode: pktb32 ; op1:x27; op2:x21; dest:x3; op1val:0x800000efffffff;  op2val:0xfff7ffff00000009
TEST_RR_OP(pktb32, x3, x27, x21, 0x0000000000000000, 0x800000efffffff, 0xfff7ffff00000009, x2, 0, x4)

inst_18:
// rs1==x17, rs2==x26, rd==x7, rs2_w1_val == 4294705151, rs1_w1_val == 3221225471, rs1_w0_val == 8388608
// opcode: pktb32 ; op1:x17; op2:x26; dest:x7; op1val:0xbfffffff00800000;  op2val:0xfffbffff00000800
TEST_RR_OP(pktb32, x7, x17, x26, 0x0000000000000000, 0xbfffffff00800000, 0xfffbffff00000800, x2, 8, x4)

inst_19:
// rs1==x25, rs2==x19, rd==x13, rs2_w1_val == 4294836223, rs2_w0_val == 4294901759, rs1_w0_val == 32, rs1_w1_val == 4294967039
// opcode: pktb32 ; op1:x25; op2:x19; dest:x13; op1val:0xfffffeff00000020;  op2val:0xfffdfffffffeffff
TEST_RR_OP(pktb32, x13, x25, x19, 0x0000000000000000, 0xfffffeff00000020, 0xfffdfffffffeffff, x2, 16, x4)

inst_20:
// rs1==x6, rs2==x8, rd==x1, rs2_w1_val == 4294901759, rs2_w0_val == 4294966271
// opcode: pktb32 ; op1:x6; op2:x8; dest:x1; op1val:0x00000f0000000b;  op2val:0xfffefffffffffbff
TEST_RR_OP(pktb32, x1, x6, x8, 0x0000000000000000, 0x00000f0000000b, 0xfffefffffffffbff, x2, 24, x4)

inst_21:
// rs1==x3, rs2==x30, rd==x20, rs2_w1_val == 4294934527, rs1_w0_val == 4294967293, rs1_w1_val == 4294901759
// opcode: pktb32 ; op1:x3; op2:x30; dest:x20; op1val:0xfffefffffffffffd;  op2val:0xffff7fffaaaaaaaa
TEST_RR_OP(pktb32, x20, x3, x30, 0x0000000000000000, 0xfffefffffffffffd, 0xffff7fffaaaaaaaa, x2, 32, x4)

inst_22:
// rs1==x21, rs2==x15, rd==x19, rs2_w1_val == 4294950911, rs1_w0_val == 4096, rs1_w1_val == 2147483647
// opcode: pktb32 ; op1:x21; op2:x15; dest:x19; op1val:0x7fffffff00001000;  op2val:0xffffbfff00000006
TEST_RR_OP(pktb32, x19, x21, x15, 0x0000000000000000, 0x7fffffff00001000, 0xffffbfff00000006, x2, 40, x4)

inst_23:
// rs1==x26, rs2==x14, rd==x25, rs2_w1_val == 4294959103, rs1_w1_val == 1073741824, rs1_w0_val == 1073741824, rs2_w0_val == 134217728
// opcode: pktb32 ; op1:x26; op2:x14; dest:x25; op1val:0x4000000040000000;  op2val:0xffffdfff08000000
TEST_RR_OP(pktb32, x25, x26, x14, 0x0000000000000000, 0x4000000040000000, 0xffffdfff08000000, x2, 48, x4)

inst_24:
// rs1==x11, rs2==x7, rd==x17, rs2_w1_val == 4294963199, 
// opcode: pktb32 ; op1:x11; op2:x7; dest:x17; op1val:0x00000000000012;  op2val:0xffffefff00000007
TEST_RR_OP(pktb32, x17, x11, x7, 0x0000000000000000, 0x00000000000012, 0xffffefff00000007, x2, 56, x4)

inst_25:
// rs1==x31, rs2==x24, rd==x5, rs2_w1_val == 4294965247, rs1_w1_val == 4294967291, rs2_w0_val == 4026531839
// opcode: pktb32 ; op1:x31; op2:x24; dest:x5; op1val:0xfffffffbdfffffff;  op2val:0xfffff7ffefffffff
TEST_RR_OP(pktb32, x5, x31, x24, 0x0000000000000000, 0xfffffffbdfffffff, 0xfffff7ffefffffff, x2, 64, x4)

inst_26:
// rs1==x18, rs2==x9, rd==x26, rs2_w1_val == 4294966271, rs1_w1_val == 131072
// opcode: pktb32 ; op1:x18; op2:x9; dest:x26; op1val:0x02000000000013;  op2val:0xfffffbff00000003
TEST_RR_OP(pktb32, x26, x18, x9, 0x0000000000000000, 0x02000000000013, 0xfffffbff00000003, x2, 72, x4)

inst_27:
// rs1==x23, rs2==x5, rd==x0, rs2_w1_val == 4294966783, rs2_w0_val == 512, rs1_w0_val == 4261412863
// opcode: pktb32 ; op1:x23; op2:x5; dest:x0; op1val:0x40000000fdffffff;  op2val:0xfffffdff00000200
TEST_RR_OP(pktb32, x0, x23, x5, 0x0000000000000000, 0x40000000fdffffff, 0xfffffdff00000200, x2, 80, x4)

inst_28:
// rs1==x24, rs2==x20, rd==x31, rs2_w1_val == 4294967039, rs1_w0_val == 3221225471, rs1_w1_val == 67108864
// opcode: pktb32 ; op1:x24; op2:x20; dest:x31; op1val:0x4000000bfffffff;  op2val:0xfffffeff0000000e
TEST_RR_OP(pktb32, x31, x24, x20, 0x0000000000000000, 0x4000000bfffffff, 0xfffffeff0000000e, x2, 88, x4)

inst_29:
// rs1==x20, rs2==x23, rd==x16, rs2_w1_val == 4294967167, rs1_w0_val == 262144, rs1_w1_val == 256, rs2_w0_val == 4294965247
// opcode: pktb32 ; op1:x20; op2:x23; dest:x16; op1val:0x00010000040000;  op2val:0xffffff7ffffff7ff
TEST_RR_OP(pktb32, x16, x20, x23, 0x0000000000000000, 0x00010000040000, 0xffffff7ffffff7ff, x2, 96, x4)

inst_30:
// rs1==x16, rs2==x27, rd==x11, rs2_w1_val == 4294967231, 
// opcode: pktb32 ; op1:x16; op2:x27; dest:x11; op1val:0xbfffffff0000000b;  op2val:0xffffffbf0000000f
TEST_RR_OP(pktb32, x11, x16, x27, 0x0000000000000000, 0xbfffffff0000000b, 0xffffffbf0000000f, x2, 104, x4)

inst_31:
// rs1==x29, rs2==x11, rd==x14, rs2_w1_val == 4294967263, rs2_w0_val == 4294950911, rs1_w1_val == 4294967294
// opcode: pktb32 ; op1:x29; op2:x11; dest:x14; op1val:0xfffffffe40000000;  op2val:0xffffffdfffffbfff
TEST_RR_OP(pktb32, x14, x29, x11, 0x0000000000000000, 0xfffffffe40000000, 0xffffffdfffffbfff, x2, 112, x4)

inst_32:
// rs2_w1_val == 4294967291, rs2_w0_val == 131072, rs1_w0_val == 4294901759
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffeffff;  op2val:0xfffffffb00020000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfffffffefffeffff, 0xfffffffb00020000, x2, 120, x1)

inst_33:
// rs2_w1_val == 4294967293, rs2_w0_val == 4294934527
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff02000000;  op2val:0xfffffffdffff7fff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xffbfffff02000000, 0xfffffffdffff7fff, x2, 128, x1)

inst_34:
// rs2_w1_val == 4294967294, rs1_w0_val == 2147483648, rs1_w1_val == 32768
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800080000000;  op2val:0xfffffffefffeffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00800080000000, 0xfffffffefffeffff, x2, 136, x1)

inst_35:
// rs2_w1_val == 2147483648, rs2_w0_val == 1
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000012;  op2val:0x8000000000000001
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000012, 0x8000000000000001, x2, 144, x1)

inst_36:
// rs2_w1_val == 1073741824, rs1_w1_val == 262144, rs2_w0_val == 4294443007
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000fdffffff;  op2val:0x40000000fff7ffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x040000fdffffff, 0x40000000fff7ffff, x2, 152, x1)

inst_37:
// rs2_w1_val == 536870912, rs2_w0_val == 1073741824
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000bfffffff;  op2val:0x2000000040000000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x000000bfffffff, 0x2000000040000000, x2, 160, x1)

inst_38:
// rs2_w1_val == 268435456, rs2_w0_val == 4286578687, rs1_w1_val == 4294705151
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00080000;  op2val:0x10000000ff7fffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00080000, 0x10000000ff7fffff, x2, 168, x1)

inst_39:
// rs2_w1_val == 67108864, rs1_w1_val == 268435456, rs2_w0_val == 4294967263
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000001000;  op2val:0x4000000ffffffdf
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x1000000000001000, 0x4000000ffffffdf, x2, 176, x1)

inst_40:
// rs2_w1_val == 33554432, rs1_w1_val == 4026531839
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffdffffff;  op2val:0x200000040000000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xeffffffffdffffff, 0x200000040000000, x2, 184, x1)

inst_41:
// rs2_w1_val == 16777216, rs2_w0_val == 4294967287
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000dfffffff;  op2val:0x1000000fffffff7
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x4000000dfffffff, 0x1000000fffffff7, x2, 192, x1)

inst_42:
// rs2_w1_val == 8388608, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff80000000;  op2val:0x80000000000200
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfffbffff80000000, 0x80000000000200, x2, 200, x1)

inst_43:
// rs2_w1_val == 4194304, rs2_w0_val == 4
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000000;  op2val:0x40000000000004
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00010000000000, 0x40000000000004, x2, 208, x1)

inst_44:
// rs2_w1_val == 2097152, rs1_w0_val == 4294967167
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000ffffff7f;  op2val:0x20000000000001
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x4000000ffffff7f, 0x20000000000001, x2, 216, x1)

inst_45:
// rs2_w1_val == 1048576, rs1_w1_val == 4294836223, rs1_w0_val == 4294967279
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffffef;  op2val:0x1000000000000c
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffffef, 0x1000000000000c, x2, 224, x1)

inst_46:
// rs2_w1_val == 524288, rs1_w1_val == 1, rs1_w0_val == 8
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000008;  op2val:0x0800000000000f
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00000100000008, 0x0800000000000f, x2, 232, x1)

inst_47:
// rs2_w1_val == 262144, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000ffffffef;  op2val:0x040000ff7fffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x000000ffffffef, 0x040000ff7fffff, x2, 240, x1)

inst_48:
// rs2_w1_val == 131072, rs1_w0_val == 4
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000300000004;  op2val:0x020000fffffbff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00000300000004, 0x020000fffffbff, x2, 248, x1)

inst_49:
// rs2_w1_val == 65536, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000005;  op2val:0x0100000000000c
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xefffffff00000005, 0x0100000000000c, x2, 256, x1)

inst_50:
// rs2_w1_val == 32768, rs2_w0_val == 8
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000cfff7ffff;  op2val:0x00800000000008
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00000cfff7ffff, 0x00800000000008, x2, 264, x1)

inst_51:
// rs2_w1_val == 16384, rs2_w0_val == 4294967039, rs1_w0_val == 128
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000080;  op2val:0x004000fffffeff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x1000000000000080, 0x004000fffffeff, x2, 272, x1)

inst_52:
// rs2_w1_val == 8192, rs1_w0_val == 4294967294
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040fffffffe;  op2val:0x002000ffff7fff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x000040fffffffe, 0x002000ffff7fff, x2, 280, x1)

inst_53:
// rs2_w1_val == 4096, rs2_w0_val == 4294959103
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00040000;  op2val:0x001000ffffdfff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xefffffff00040000, 0x001000ffffdfff, x2, 288, x1)

inst_54:
// rs1_w0_val == 131072, rs1_w1_val == 16384
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00400000020000;  op2val:0x40000000000013
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00400000020000, 0x40000000000013, x2, 296, x1)

inst_55:
// rs1_w0_val == 65536, rs1_w1_val == 2
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200010000;  op2val:0xfffdffff0000000e
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00000200010000, 0xfffdffff0000000e, x2, 304, x1)

inst_56:
// rs1_w0_val == 32768, rs2_w0_val == 4294967231
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000008000;  op2val:0xffffefffffffffbf
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x4000000000008000, 0xffffefffffffffbf, x2, 312, x1)

inst_57:
// rs1_w0_val == 16384, rs2_w0_val == 4290772991
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000b00004000;  op2val:0xffffffefffbfffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00000b00004000, 0xffffffefffbfffff, x2, 320, x1)

inst_58:
// rs1_w0_val == 8192, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000002000;  op2val:0x20000000020000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00004000002000, 0x20000000020000, x2, 328, x1)

inst_59:
// rs1_w0_val == 2048, rs2_w1_val == 32, rs1_w1_val == 2147483648
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000800;  op2val:0x00002000000004
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x8000000000000800, 0x00002000000004, x2, 336, x1)

inst_60:
// rs1_w0_val == 1024, rs2_w0_val == 16384, rs1_w1_val == 65536
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000400;  op2val:0x00000d00004000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x01000000000400, 0x00000d00004000, x2, 344, x1)

inst_61:
// rs1_w0_val == 256, rs2_w0_val == 2147483648
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000100;  op2val:0x00000380000000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00040000000100, 0x00000380000000, x2, 352, x1)

inst_62:
// rs1_w0_val == 64, rs2_w0_val == 4096, rs1_w1_val == 4294967167
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000040;  op2val:0xfff7ffff00001000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000040, 0xfff7ffff00001000, x2, 360, x1)

inst_63:
// rs1_w0_val == 1, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000001;  op2val:0x002000fff7ffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00000100000001, 0x002000fff7ffff, x2, 368, x1)

inst_64:
// rs1_w0_val == 4294967295, rs2_w0_val == 4278190079
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffffff;  op2val:0xffff7ffffeffffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffffff, 0xffff7ffffeffffff, x2, 376, x1)

inst_65:
// rs2_w1_val == 2048, rs2_w0_val == 3221225471
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000700040000;  op2val:0x000800bfffffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00000700040000, 0x000800bfffffff, x2, 384, x1)

inst_66:
// rs2_w1_val == 1024, rs1_w0_val == 4194304
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00400000;  op2val:0x000400ffbfffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00400000, 0x000400ffbfffff, x2, 392, x1)

inst_67:
// rs2_w1_val == 512, rs1_w0_val == 67108864, rs2_w0_val == 4294967167
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000004000000;  op2val:0x000200ffffff7f
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x04000004000000, 0x000200ffffff7f, x2, 400, x1)

inst_68:
// rs2_w1_val == 256, rs1_w0_val == 4294967231
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001ffffffbf;  op2val:0x0001000000000e
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x000001ffffffbf, 0x0001000000000e, x2, 408, x1)

inst_69:
// rs2_w1_val == 128, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000040;  op2val:0x00008000001000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x200000000000040, 0x00008000001000, x2, 416, x1)

inst_70:
// rs2_w1_val == 64, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffffffe;  op2val:0x00004000000200
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x000000fffffffe, 0x00004000000200, x2, 424, x1)

inst_71:
// rs2_w1_val == 16, rs2_w0_val == 1048576
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000006;  op2val:0x00001000100000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000006, 0x00001000100000, x2, 432, x1)

inst_72:
// rs2_w1_val == 8, rs1_w0_val == 4227858431
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100fbffffff;  op2val:0x00000808000000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x000100fbffffff, 0x00000808000000, x2, 440, x1)

inst_73:
// rs2_w1_val == 4, rs2_w0_val == 2147483647, rs1_w0_val == 2097152
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00200000;  op2val:0x0000047fffffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00200000, 0x0000047fffffff, x2, 448, x1)

inst_74:
// rs2_w1_val == 2, rs1_w1_val == 4294966783
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffbfffffff;  op2val:0x000002fdffffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfffffdffbfffffff, 0x000002fdffffff, x2, 456, x1)

inst_75:
// rs2_w1_val == 1, rs2_w0_val == 4294705151
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000b00000007;  op2val:0x000001fffbffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00000b00000007, 0x000001fffbffff, x2, 464, x1)

inst_76:
// rs2_w1_val == 4294967295, rs2_w0_val == 4294967291, rs1_w1_val == 8, rs1_w0_val == 4294934527
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffff7fff;  op2val:0xfffffffffffffffb
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x000008ffff7fff, 0xfffffffffffffffb, x2, 472, x1)

inst_77:
// rs2_w1_val == 0, rs1_w1_val == 4293918719
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff0000000d;  op2val:0x000000efffffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xffefffff0000000d, 0x000000efffffff, x2, 480, x1)

inst_78:
// rs2_w0_val == 1431655765, rs1_w1_val == 4294963199
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000400;  op2val:0x00000655555555
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xffffefff00000400, 0x00000655555555, x2, 488, x1)

inst_79:
// rs2_w0_val == 3758096383, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200fff7ffff;  op2val:0xfeffffffdfffffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x000200fff7ffff, 0xfeffffffdfffffff, x2, 496, x1)

inst_80:
// rs2_w0_val == 4160749567, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000011ffffffff;  op2val:0xfffbfffff7ffffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x000011ffffffff, 0xfffbfffff7ffffff, x2, 504, x1)

inst_81:
// rs2_w0_val == 4227858431, rs1_w0_val == 4294967287
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000cfffffff7;  op2val:0x000005fbffffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00000cfffffff7, 0x000005fbffffff, x2, 512, x1)

inst_82:
// rs2_w0_val == 4292870143, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000820000000;  op2val:0x040000ffdfffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00000820000000, 0x040000ffdfffff, x2, 520, x1)

inst_83:
// rs2_w0_val == 4294836223, rs1_w1_val == 4294967293
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00001000;  op2val:0xfffffffdfffdffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00001000, 0xfffffffdfffdffff, x2, 528, x1)

inst_84:
// rs2_w0_val == 4294963199, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffffffd;  op2val:0x008000ffffefff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffffffd, 0x008000ffffefff, x2, 536, x1)

inst_85:
// rs2_w0_val == 4294966783, rs1_w1_val == 1431655765
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500400000;  op2val:0xfffffbfffffffdff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x5555555500400000, 0xfffffbfffffffdff, x2, 544, x1)

inst_86:
// rs2_w0_val == 4294967279, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000004;  op2val:0xefffffffffffffef
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x01000000000004, 0xefffffffffffffef, x2, 552, x1)

inst_87:
// rs2_w0_val == 1024, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100200000;  op2val:0xfffffffd00000400
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00000100200000, 0xfffffffd00000400, x2, 560, x1)

inst_88:
// rs2_w0_val == 256, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000110000000;  op2val:0x10000000000100
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00000110000000, 0x10000000000100, x2, 568, x1)

inst_89:
// rs2_w0_val == 128, rs1_w0_val == 4294967263
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffffffdf;  op2val:0x00001200000080
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xffdfffffffffffdf, 0x00001200000080, x2, 576, x1)

inst_90:
// rs2_w0_val == 64, rs1_w0_val == 4294836223
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffffffdffff;  op2val:0x00000000000040
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfffbfffffffdffff, 0x00000000000040, x2, 584, x1)

inst_91:
// rs2_w0_val == 32, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000000a;  op2val:0xfffffbff00000020
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x20000000000000a, 0xfffffbff00000020, x2, 592, x1)

inst_92:
// rs2_w0_val == 16, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000200;  op2val:0xfffffffe00000010
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000200, 0xfffffffe00000010, x2, 600, x1)

inst_93:
// rs2_w0_val == 2, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000100;  op2val:0x1000000000000002
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000100, 0x1000000000000002, x2, 608, x1)

inst_94:
// rs2_w0_val == 4294967295, rs1_w1_val == 4294959103
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffdfffff;  op2val:0x8000000ffffffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xffffdfffffdfffff, 0x8000000ffffffff, x2, 616, x1)

inst_95:
// rs2_w0_val == 0, rs1_w0_val == 4294966271, rs1_w1_val == 4294967279
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffffbff;  op2val:0xffffff7f00000000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xffffffeffffffbff, 0xffffff7f00000000, x2, 624, x1)

inst_96:
// rs1_w1_val == 2863311530, rs2_w0_val == 65536
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000007;  op2val:0x00004000010000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000007, 0x00004000010000, x2, 632, x1)

inst_97:
// rs1_w1_val == 3758096383, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffff7ffff;  op2val:0x000003fffdffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xdffffffffff7ffff, 0x000003fffdffff, x2, 640, x1)

inst_98:
// rs1_w1_val == 4227858431, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff20000000;  op2val:0x000009fdffffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfbffffff20000000, 0x000009fdffffff, x2, 648, x1)

inst_99:
// rs1_w1_val == 4261412863, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000006;  op2val:0x1000000fffff7ff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000006, 0x1000000fffff7ff, x2, 656, x1)

inst_100:
// rs1_w1_val == 4286578687, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000040;  op2val:0xfffffff70000000f
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000040, 0xfffffff70000000f, x2, 664, x1)

inst_101:
// rs1_w1_val == 4294443007, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff20000000;  op2val:0x0000040000000a
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff20000000, 0x0000040000000a, x2, 672, x1)

inst_102:
// rs1_w1_val == 4294934527, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff0000000c;  op2val:0x000000ffbfffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xffff7fff0000000c, 0x000000ffbfffff, x2, 680, x1)

inst_103:
// rs1_w1_val == 4294950911, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff04000000;  op2val:0x000013aaaaaaaa
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xffffbfff04000000, 0x000013aaaaaaaa, x2, 688, x1)

inst_104:
// rs1_w1_val == 4294966271, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffaaaaaaaa;  op2val:0x000009aaaaaaaa
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfffffbffaaaaaaaa, 0x000009aaaaaaaa, x2, 696, x1)

inst_105:
// rs1_w1_val == 4294967231, rs1_w0_val == 4294963199
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffffefff;  op2val:0xdfffffff40000000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xffffffbfffffefff, 0xdfffffff40000000, x2, 704, x1)

inst_106:
// rs1_w1_val == 4294967263, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffbff;  op2val:0xbfffffffffffffef
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffbff, 0xbfffffffffffffef, x2, 712, x1)

inst_107:
// rs1_w1_val == 536870912, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000002000;  op2val:0x20000000800000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x2000000000002000, 0x20000000800000, x2, 720, x1)

inst_108:
// rs1_w1_val == 134217728, rs1_w0_val == 4294967039
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffffeff;  op2val:0xfffbffffffff7fff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x8000000fffffeff, 0xfffbffffffff7fff, x2, 728, x1)

inst_109:
// rs1_w1_val == 4194304, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffbff;  op2val:0x00001200000003
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x400000fffffbff, 0x00001200000003, x2, 736, x1)

inst_110:
// rs1_w1_val == 8192, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000200000;  op2val:0xfffffbff00100000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00200000200000, 0xfffffbff00100000, x2, 744, x1)

inst_111:
// rs1_w1_val == 4096, rs1_w0_val == 4293918719
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffefffff;  op2val:0x00000befffffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x001000ffefffff, 0x00000befffffff, x2, 752, x1)

inst_112:
// rs1_w1_val == 128, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008000000010;  op2val:0x400000aaaaaaaa
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00008000000010, 0x400000aaaaaaaa, x2, 760, x1)

inst_113:
// rs1_w1_val == 32, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000400;  op2val:0x20000000020000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00002000000400, 0x20000000020000, x2, 768, x1)

inst_114:
// rs1_w1_val == 4, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000404000000;  op2val:0xfffff7ff00400000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00000404000000, 0xfffff7ff00400000, x2, 776, x1)

inst_115:
// rs1_w1_val == 4294967295, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff80000000;  op2val:0x400000040000000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xffffffff80000000, 0x400000040000000, x2, 784, x1)

inst_116:
// rs1_w0_val == 4160749567, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffff7ffffff;  op2val:0x2000000000000020
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfdfffffff7ffffff, 0x2000000000000020, x2, 792, x1)

inst_117:
// rs1_w0_val == 4278190079, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7feffffff;  op2val:0xfffefffffffffff7
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfffffff7feffffff, 0xfffefffffffffff7, x2, 800, x1)

inst_118:
// rs2_w0_val == 524288, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000efffffff;  op2val:0x00000700080000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x80000000efffffff, 0x00000700080000, x2, 808, x1)

inst_119:
// rs1_w0_val == 4286578687, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000ff7fffff;  op2val:0xfffffff7fffbffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x800000ff7fffff, 0xfffffff7fffbffff, x2, 816, x1)

inst_120:
// rs1_w0_val == 4290772991, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009ffbfffff;  op2val:0xffdffffffffff7ff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x000009ffbfffff, 0xffdffffffffff7ff, x2, 824, x1)

inst_121:
// rs1_w0_val == 4294705151, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000afffbffff;  op2val:0x80000000dfffffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00000afffbffff, 0x80000000dfffffff, x2, 832, x1)

inst_122:
// rs1_w0_val == 4294950911, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffffbfff;  op2val:0x00000efffeffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfeffffffffffbfff, 0x00000efffeffff, x2, 840, x1)

inst_123:
// rs1_w0_val == 4294959103, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffffdfff;  op2val:0x00000600000011
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xffbfffffffffdfff, 0x00000600000011, x2, 848, x1)

inst_124:
// rs1_w0_val == 4294965247, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040fffff7ff;  op2val:0xffffffdfff7fffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x000040fffff7ff, 0xffffffdfff7fffff, x2, 856, x1)

inst_125:
// rs1_w0_val == 4294966783, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffdff;  op2val:0x00001308000000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x800000fffffdff, 0x00001308000000, x2, 864, x1)

inst_126:
// rs2_w0_val == 4294967294, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffeff;  op2val:0x020000fffffffe
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffeff, 0x020000fffffffe, x2, 872, x1)

inst_127:
// rs1_w1_val == 524288, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000200;  op2val:0x00000100000007
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x08000000000200, 0x00000100000007, x2, 880, x1)

inst_128:
// rs2_w0_val == 268435456, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffff7ff;  op2val:0xfffffffe10000000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffff7ff, 0xfffffffe10000000, x2, 888, x1)

inst_129:
// rs2_w0_val == 67108864, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000000;  op2val:0x00800004000000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00001000000000, 0x00800004000000, x2, 896, x1)

inst_130:
// rs1_w0_val == 4294967291, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffffb;  op2val:0xffffffbfffff7fff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffffb, 0xffffffbfffff7fff, x2, 904, x1)

inst_131:
// rs2_w0_val == 33554432, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001bfffffff;  op2val:0x00000f02000000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x000001bfffffff, 0x00000f02000000, x2, 912, x1)

inst_132:
// rs2_w0_val == 16777216, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000effffffff;  op2val:0x08000001000000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00000effffffff, 0x08000001000000, x2, 920, x1)

inst_133:
// rs2_w0_val == 2097152, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000013;  op2val:0xfffbffff00200000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000013, 0xfffbffff00200000, x2, 928, x1)

inst_134:
// rs1_w0_val == 134217728, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001208000000;  op2val:0x8000000000000f
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00001208000000, 0x8000000000000f, x2, 936, x1)

inst_135:
// rs1_w1_val == 2097152, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000100;  op2val:0x000020aaaaaaaa
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x20000000000100, 0x000020aaaaaaaa, x2, 944, x1)

inst_136:
// rs1_w1_val == 1048576, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000800;  op2val:0x7fffffffffffffff
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x10000000000800, 0x7fffffffffffffff, x2, 952, x1)

inst_137:
// rs2_w0_val == 32768, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffffff7f;  op2val:0x00000300008000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x100000ffffff7f, 0x00000300008000, x2, 960, x1)

inst_138:
// rs2_w0_val == 8192, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000dfffbffff;  op2val:0x01000000002000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x00000dfffbffff, 0x01000000002000, x2, 968, x1)

inst_139:
// rs1_w0_val == 1048576, 
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00100000;  op2val:0x10000010000000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00100000, 0x10000010000000, x2, 976, x1)

inst_140:
// rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 4290772991, rs1_w0_val == 536870912, rs2_w1_val == 4294967279, rs2_w0_val == 536870912
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff20000000;  op2val:0xffffffef20000000
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0xffbfffff20000000, 0xffffffef20000000, x2, 984, x1)

inst_141:
// rs2_w1_val == 2863311530, rs1_w0_val == 2147483647, rs1_w1_val == 1024
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x0004007fffffff;  op2val:0xaaaaaaaa0000000f
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x0004007fffffff, 0xaaaaaaaa0000000f, x2, 992, x1)

inst_142:
// rs2_w1_val == 4261412863, rs1_w1_val == 512
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x0002007fffffff;  op2val:0xfdffffff0000000a
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x0002007fffffff, 0xfdffffff0000000a, x2, 1000, x1)

inst_143:
// rs2_w1_val == 4294966783, rs2_w0_val == 512, rs1_w0_val == 4261412863
// opcode: pktb32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fdffffff;  op2val:0xfffffdff00000200
TEST_RR_OP(pktb32, x31, x30, x29, 0x0000000000000000, 0x40000000fdffffff, 0xfffffdff00000200, x2, 1008, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 127*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
