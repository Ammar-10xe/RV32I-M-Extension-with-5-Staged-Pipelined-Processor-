
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the add16 instruction of the RISC-V RV64PZicsr extension for the add16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",add16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x12,signature_x12_1)

inst_0:
// rs1 == rd != rs2, rs1==x13, rs2==x17, rd==x13, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h1_val == 4, rs2_h2_val == 8192, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs2_h3_val == 256, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h2_val == -9, rs1_h3_val == 16384
// opcode: add16 ; op1:x13; op2:x17; dest:x13; op1val:0x4000fff700048000;  op2val:0x100200000090003
TEST_RR_OP(add16, x13, x13, x17, 0x0000000000000000, 0x4000fff700048000, 0x100200000090003, x12, 0, x19)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x4, rd==x18, rs1_h3_val == rs2_h3_val, rs2_h3_val == -513, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h1_val == -4097, rs2_h0_val == -129, rs1_h2_val == 0, rs1_h3_val == -513, rs1_h1_val == 0, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h2_val == -21846
// opcode: add16 ; op1:x28; op2:x4; dest:x18; op1val:0xfdff00000000fffc;  op2val:0xfdffaaaaefffff7f
TEST_RR_OP(add16, x18, x28, x4, 0x0000000000000000, 0xfdff00000000fffc, 0xfdffaaaaefffff7f, x12, 8, x19)

inst_2:
// rs1 == rs2 != rd, rs1==x27, rs2==x27, rd==x30, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 16384, rs2_h2_val == -8193, rs2_h1_val == -257, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val == 256, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h3_val == 64, rs1_h0_val == -1
// opcode: add16 ; op1:x27; op2:x27; dest:x30; op1val:0xfffc40000100ffff;  op2val:0x40dffffeff0005
TEST_RR_OP(add16, x30, x27, x27, 0x0000000000000000, 0xfffc40000100ffff, 0x40dffffeff0005, x12, 16, x19)

inst_3:
// rs1 == rs2 == rd, rs1==x3, rs2==x3, rd==x3, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val == 1024, rs1_h3_val == 32, rs1_h0_val == -5, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h1_val == 128, rs1_h1_val == -9
// opcode: add16 ; op1:x3; op2:x3; dest:x3; op1val:0x200400fff7fffb;  op2val:0xfff8fff900800005
TEST_RR_OP(add16, x3, x3, x3, 0x0000000000000000, 0x200400fff7fffb, 0xfff8fff900800005, x12, 24, x19)

inst_4:
// rs2 == rd != rs1, rs1==x4, rs2==x9, rd==x9, rs1_h2_val == rs2_h2_val, rs2_h2_val == -1025, rs2_h0_val == 21845, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h1_val == -129, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val == -1025, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == -21846
// opcode: add16 ; op1:x4; op2:x9; dest:x9; op1val:0xfffcfbfffff93fff;  op2val:0xaaaafbffff7f5555
TEST_RR_OP(add16, x9, x4, x9, 0x0000000000000000, 0xfffcfbfffff93fff, 0xaaaafbffff7f5555, x12, 32, x19)

inst_5:
// rs1==x14, rs2==x16, rd==x7, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h3_val == -65, rs1_h2_val == 21845, rs2_h0_val == -33, rs1_h1_val == 2, rs2_h2_val == 21845
// opcode: add16 ; op1:x14; op2:x16; dest:x7; op1val:0xc00055550002c000;  op2val:0xffbf55550006ffdf
TEST_RR_OP(add16, x7, x14, x16, 0x0000000000000000, 0xc00055550002c000, 0xffbf55550006ffdf, x12, 40, x19)

inst_6:
// rs1==x26, rs2==x15, rd==x1, rs1_h1_val == rs2_h1_val, rs1_h1_val == -3, rs1_h0_val == 2048, rs1_h3_val == 32767, rs1_h2_val == 8, rs2_h3_val == 8192, rs2_h1_val == -3, rs2_h2_val == 64
// opcode: add16 ; op1:x26; op2:x15; dest:x1; op1val:0x7fff0008fffd0800;  op2val:0x20000040fffd0009
TEST_RR_OP(add16, x1, x26, x15, 0x0000000000000000, 0x7fff0008fffd0800, 0x20000040fffd0009, x12, 48, x19)

inst_7:
// rs1==x10, rs2==x21, rd==x25, rs1_h0_val == rs2_h0_val, rs2_h0_val == 0, rs2_h2_val == -3, rs1_h3_val == -65, rs1_h0_val == 0, rs1_h1_val == -1025
// opcode: add16 ; op1:x10; op2:x21; dest:x25; op1val:0xffbf0008fbff0000;  op2val:0xfff6fffdff7f0000
TEST_RR_OP(add16, x25, x10, x21, 0x0000000000000000, 0xffbf0008fbff0000, 0xfff6fffdff7f0000, x12, 56, x19)

inst_8:
// rs1==x21, rs2==x2, rd==x0, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h3_val == -32768, rs2_h2_val == -32768, rs1_h1_val == -1, rs2_h0_val == -32768, rs1_h2_val == -33, rs2_h1_val == 64
// opcode: add16 ; op1:x21; op2:x2; dest:x0; op1val:0x3fffffdfffff0800;  op2val:0x8000800000408000
TEST_RR_OP(add16, x0, x21, x2, 0x0000000000000000, 0x3fffffdfffff0800, 0x8000800000408000, x12, 64, x19)

inst_9:
// rs1==x18, rs2==x8, rd==x28, rs2_h3_val == 21845, rs1_h3_val == -5, rs1_h0_val == -1025, rs2_h0_val == -2
// opcode: add16 ; op1:x18; op2:x8; dest:x28; op1val:0xfffbfffc0003fbff;  op2val:0x55550003fff6fffe
TEST_RR_OP(add16, x28, x18, x8, 0x0000000000000000, 0xfffbfffc0003fbff, 0x55550003fff6fffe, x12, 72, x19)

inst_10:
// rs1==x31, rs2==x0, rd==x5, rs2_h3_val == 32767, rs1_h2_val == 32, rs2_h0_val == -4097, rs1_h1_val == -65
// opcode: add16 ; op1:x31; op2:x0; dest:x5; op1val:0x7fff0020ffbf8000;  op2val:0x7ffffffd0080efff
TEST_RR_OP(add16, x5, x31, x0, 0x0000000000000000, 0x7fff0020ffbf8000, 0x7ffffffd0080efff, x12, 80, x19)

inst_11:
// rs1==x9, rs2==x11, rd==x15, rs2_h3_val == -16385, rs1_h0_val == -65, rs2_h0_val == -2049
// opcode: add16 ; op1:x9; op2:x11; dest:x15; op1val:0x7fff40003fffffbf;  op2val:0xbfff5555fefff7ff
TEST_RR_OP(add16, x15, x9, x11, 0x0000000000000000, 0x7fff40003fffffbf, 0xbfff5555fefff7ff, x12, 88, x19)

inst_12:
// rs1==x0, rs2==x5, rd==x26, rs2_h3_val == -8193, rs1_h1_val == -8193, rs1_h0_val == 1, rs2_h1_val == -8193
// opcode: add16 ; op1:x0; op2:x5; dest:x26; op1val:0x204000dfff0001;  op2val:0xdfff5555dfff3fff
TEST_RR_OP(add16, x26, x0, x5, 0x0000000000000000, 0x204000dfff0001, 0xdfff5555dfff3fff, x12, 96, x19)

inst_13:
// rs1==x20, rs2==x31, rd==x10, rs2_h3_val == -4097, rs2_h1_val == 4, rs1_h1_val == -257, rs1_h2_val == 2, rs2_h2_val == 1
// opcode: add16 ; op1:x20; op2:x31; dest:x10; op1val:0x030002feff0009;  op2val:0xefff00010004c000
TEST_RR_OP(add16, x10, x20, x31, 0x0000000000000000, 0x030002feff0009, 0xefff00010004c000, x12, 104, x19)

inst_14:
// rs1==x25, rs2==x6, rd==x23, rs2_h3_val == -2049, rs2_h0_val == 32767, rs1_h3_val == -16385, rs2_h2_val == -5, rs1_h0_val == 128, rs2_h1_val == -32768, rs1_h1_val == -16385
// opcode: add16 ; op1:x25; op2:x6; dest:x23; op1val:0xbffffff8bfff0080;  op2val:0xf7fffffb80007fff
TEST_RR_OP(add16, x23, x25, x6, 0x0000000000000000, 0xbffffff8bfff0080, 0xf7fffffb80007fff, x12, 112, x19)

inst_15:
// rs1==x19, rs2==x1, rd==x31, rs2_h3_val == -1025, rs1_h3_val == 1024, rs2_h1_val == 256, rs1_h1_val == 32767, rs2_h0_val == -17
// opcode: add16 ; op1:x19; op2:x1; dest:x31; op1val:0x400ffdf7fff3fff;  op2val:0xfbfffffc0100ffef
TEST_RR_OP(add16, x31, x19, x1, 0x0000000000000000, 0x400ffdf7fff3fff, 0xfbfffffc0100ffef, x12, 120, x7)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_16:
// rs1==x16, rs2==x20, rd==x12, rs2_h3_val == -257, rs2_h2_val == -16385, rs1_h0_val == 16384, rs1_h1_val == 512, rs1_h2_val == 1, rs1_h3_val == -257, rs2_h1_val == 2048
// opcode: add16 ; op1:x16; op2:x20; dest:x12; op1val:0xfeff000102004000;  op2val:0xfeffbfff08000006
TEST_RR_OP(add16, x12, x16, x20, 0x0000000000000000, 0xfeff000102004000, 0xfeffbfff08000006, x3, 0, x7)

inst_17:
// rs1==x23, rs2==x10, rd==x24, rs2_h3_val == -129, rs1_h0_val == 8192, rs1_h2_val == 16, rs2_h1_val == 0, rs2_h0_val == 128
// opcode: add16 ; op1:x23; op2:x10; dest:x24; op1val:0x070010ffbf2000;  op2val:0xff7f000700000080
TEST_RR_OP(add16, x24, x23, x10, 0x0000000000000000, 0x070010ffbf2000, 0xff7f000700000080, x3, 8, x7)

inst_18:
// rs1==x5, rs2==x28, rd==x22, rs2_h3_val == -33, rs1_h1_val == -2, rs2_h2_val == -2049, rs2_h1_val == -5, rs2_h0_val == -5, rs1_h3_val == -33
// opcode: add16 ; op1:x5; op2:x28; dest:x22; op1val:0xffdffffcfffefff8;  op2val:0xffdff7fffffbfffb
TEST_RR_OP(add16, x22, x5, x28, 0x0000000000000000, 0xffdffffcfffefff8, 0xffdff7fffffbfffb, x3, 16, x7)

inst_19:
// rs1==x17, rs2==x22, rd==x29, rs2_h3_val == -17, rs2_h2_val == 16, rs1_h3_val == 8, rs1_h0_val == 8, rs2_h1_val == -9
// opcode: add16 ; op1:x17; op2:x22; dest:x29; op1val:0x083fff02000008;  op2val:0xffef0010fff70005
TEST_RR_OP(add16, x29, x17, x22, 0x0000000000000000, 0x083fff02000008, 0xffef0010fff70005, x3, 24, x7)

inst_20:
// rs1==x2, rs2==x19, rd==x8, rs2_h3_val == -9, rs2_h0_val == 64, rs1_h1_val == -4097
// opcode: add16 ; op1:x2; op2:x19; dest:x8; op1val:0x204000effffffa;  op2val:0xfff7fffd00090040
TEST_RR_OP(add16, x8, x2, x19, 0x0000000000000000, 0x204000effffffa, 0xfff7fffd00090040, x3, 32, x7)

inst_21:
// rs1==x24, rs2==x29, rd==x6, rs2_h3_val == -5, rs2_h0_val == 16, rs1_h2_val == -2
// opcode: add16 ; op1:x24; op2:x29; dest:x6; op1val:0xfefffffe3fff0009;  op2val:0xfffb3fff00000010
TEST_RR_OP(add16, x6, x24, x29, 0x0000000000000000, 0xfefffffe3fff0009, 0xfffb3fff00000010, x3, 40, x7)

inst_22:
// rs1==x15, rs2==x25, rd==x16, rs2_h3_val == -3, rs1_h0_val == -4097, rs2_h0_val == 4
// opcode: add16 ; op1:x15; op2:x25; dest:x16; op1val:0x0500060009efff;  op2val:0xfffd000508000004
TEST_RR_OP(add16, x16, x15, x25, 0x0000000000000000, 0x0500060009efff, 0xfffd000508000004, x3, 48, x7)

inst_23:
// rs1==x1, rs2==x30, rd==x21, rs2_h3_val == -2, rs2_h0_val == -16385, rs1_h0_val == -33, rs1_h1_val == -129
// opcode: add16 ; op1:x1; op2:x30; dest:x21; op1val:0xfdff5555ff7fffdf;  op2val:0xfffe00100100bfff
TEST_RR_OP(add16, x21, x1, x30, 0x0000000000000000, 0xfdff5555ff7fffdf, 0xfffe00100100bfff, x3, 56, x7)

inst_24:
// rs1==x29, rs2==x18, rd==x17, rs2_h3_val == 16384, rs1_h1_val == 1024
// opcode: add16 ; op1:x29; op2:x18; dest:x17; op1val:0xfff93fff04002000;  op2val:0x40000006efff0004
TEST_RR_OP(add16, x17, x29, x18, 0x0000000000000000, 0xfff93fff04002000, 0x40000006efff0004, x3, 64, x7)

inst_25:
// rs1==x30, rs2==x13, rd==x4, rs2_h3_val == 4096, rs1_h3_val == -21846, rs2_h1_val == -1, rs1_h0_val == -129
// opcode: add16 ; op1:x30; op2:x13; dest:x4; op1val:0xaaaafffe7fffff7f;  op2val:0x1000dfffffff0080
TEST_RR_OP(add16, x4, x30, x13, 0x0000000000000000, 0xaaaafffe7fffff7f, 0x1000dfffffff0080, x3, 72, x7)

inst_26:
// rs1==x22, rs2==x26, rd==x27, rs2_h3_val == 2048, rs1_h2_val == -4097
// opcode: add16 ; op1:x22; op2:x26; dest:x27; op1val:0x06efff04000008;  op2val:0x800c000fffcffdf
TEST_RR_OP(add16, x27, x22, x26, 0x0000000000000000, 0x06efff04000008, 0x800c000fffcffdf, x3, 80, x7)

inst_27:
// rs1==x12, rs2==x7, rd==x14, rs2_h3_val == 1024, rs2_h1_val == 32767, rs1_h3_val == 64
// opcode: add16 ; op1:x12; op2:x7; dest:x14; op1val:0x40fff6dfff0007;  op2val:0x400fffb7fff0005
TEST_RR_OP(add16, x14, x12, x7, 0x0000000000000000, 0x40fff6dfff0007, 0x400fffb7fff0005, x3, 88, x4)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_28:
// rs1==x6, rs2==x12, rd==x2, rs2_h3_val == 512, rs2_h2_val == -257, rs2_h1_val == -1025, rs1_h1_val == 32, rs1_h0_val == 2, rs2_h0_val == 16384
// opcode: add16 ; op1:x6; op2:x12; dest:x2; op1val:0x08fffa00200002;  op2val:0x200fefffbff4000
TEST_RR_OP(add16, x2, x6, x12, 0x0000000000000000, 0x08fffa00200002, 0x200fefffbff4000, x1, 0, x4)

inst_29:
// rs1==x8, rs2==x24, rd==x20, rs2_h3_val == 128, rs1_h3_val == 2, rs2_h1_val == 16384, rs1_h2_val == 128
// opcode: add16 ; op1:x8; op2:x24; dest:x20; op1val:0x020080fffdefff;  op2val:0x80fff64000fff8
TEST_RR_OP(add16, x20, x8, x24, 0x0000000000000000, 0x020080fffdefff, 0x80fff64000fff8, x1, 8, x4)

inst_30:
// rs1==x11, rs2==x14, rd==x19, rs2_h3_val == 32, rs1_h1_val == 16384, rs1_h2_val == 4, rs2_h2_val == 16384, rs1_h0_val == 21845, rs1_h3_val == -9, rs2_h1_val == 16
// opcode: add16 ; op1:x11; op2:x14; dest:x19; op1val:0xfff7000440005555;  op2val:0x2040000010bfff
TEST_RR_OP(add16, x19, x11, x14, 0x0000000000000000, 0xfff7000440005555, 0x2040000010bfff, x1, 16, x4)

inst_31:
// rs1==x7, rs2==x23, rd==x11, rs2_h3_val == 16, rs2_h0_val == -65, rs2_h2_val == 2048, rs1_h3_val == -32768, rs1_h0_val == -2
// opcode: add16 ; op1:x7; op2:x23; dest:x11; op1val:0x8000efffeffffffe;  op2val:0x1008007fffffbf
TEST_RR_OP(add16, x11, x7, x23, 0x0000000000000000, 0x8000efffeffffffe, 0x1008007fffffbf, x1, 24, x4)

inst_32:
// rs2_h3_val == 8, rs1_h2_val == 8192, rs1_h3_val == -129
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f20000200fbff;  op2val:0x08000940000080
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xff7f20000200fbff, 0x08000940000080, x1, 32, x4)

inst_33:
// rs2_h3_val == 4, rs1_h2_val == -5
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffbbfff4000;  op2val:0x040010feff0003
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfffcfffbbfff4000, 0x040010feff0003, x1, 40, x4)

inst_34:
// rs2_h3_val == 2, rs1_h0_val == 512
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000005feff0200;  op2val:0x02fff90080ffef
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xc0000005feff0200, 0x02fff90080ffef, x1, 48, x4)

inst_35:
// rs2_h3_val == 1, rs1_h1_val == -21846
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffcaaaaffff;  op2val:0x01fff80003ff7f
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfffcfffcaaaaffff, 0x01fff80003ff7f, x1, 56, x4)

inst_36:
// rs1_h1_val == -5, rs2_h3_val == 0
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffafffbfffe;  op2val:0x000009fbfff7ff
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfffafffafffbfffe, 0x000009fbfff7ff, x1, 64, x4)

inst_37:
// rs1_h1_val == -32768, rs1_h3_val == -1
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff88000ff7f;  op2val:0x20c0007fffc000
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfffffff88000ff7f, 0x20c0007fffc000, x1, 72, x4)

inst_38:
// rs1_h1_val == 8192, rs1_h3_val == -2049
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000920000000;  op2val:0x083fff00090009
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xf7ff000920000000, 0x083fff00090009, x1, 80, x4)

inst_39:
// rs1_h1_val == 4096, rs2_h2_val == -9, rs1_h2_val == -257
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000feff10000000;  op2val:0xfffafff7fffbffdf
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x8000feff10000000, 0xfffafff7fffbffdf, x1, 88, x4)

inst_40:
// rs1_h1_val == 2048, rs1_h2_val == 512, rs2_h2_val == 512
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x06020008008000;  op2val:0x060200fff70009
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x06020008008000, 0x060200fff70009, x1, 96, x4)

inst_41:
// rs1_h1_val == 128, rs1_h2_val == -21846, rs2_h0_val == -1025, rs1_h3_val == -8193
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffaaaa0080efff;  op2val:0x0400038000fbff
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xdfffaaaa0080efff, 0x0400038000fbff, x1, 104, x4)

inst_42:
// rs1_h1_val == 64, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff400000408000;  op2val:0x7fff004000094000
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xbfff400000408000, 0x7fff004000094000, x1, 112, x4)

inst_43:
// rs1_h1_val == 16, rs1_h2_val == -16385, rs2_h2_val == 4096
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x06bfff0010c000;  op2val:0x20010007fff0080
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x06bfff0010c000, 0x20010007fff0080, x1, 120, x4)

inst_44:
// rs1_h1_val == 8, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6000400080007;  op2val:0xeffffff7ff7fffdf
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfff6000400080007, 0xeffffff7ff7fffdf, x1, 128, x4)

inst_45:
// rs1_h1_val == 1, rs2_h1_val == 512
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa00200001ffbf;  op2val:0x7ffffeff0200fff9
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xaaaa00200001ffbf, 0x7ffffeff0200fff9, x1, 136, x4)

inst_46:
// rs1_h0_val == -21846, rs2_h2_val == -4097
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0020efffaaaa;  op2val:0xfff9efff0003fff8
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfeff0020efffaaaa, 0xfff9efff0003fff8, x1, 144, x4)

inst_47:
// rs1_h0_val == 32767, rs2_h0_val == -1, rs2_h1_val == -16385, rs1_h2_val == -513, rs2_h2_val == 32767
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffdff00057fff;  op2val:0x4007fffbfffffff
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xf7fffdff00057fff, 0x4007fffbfffffff, x1, 152, x4)

inst_48:
// rs1_h0_val == -16385, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x090003fffbbfff;  op2val:0x8000007fffbefff
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x090003fffbbfff, 0x8000007fffbefff, x1, 160, x4)

inst_49:
// rs1_h0_val == -8193, rs2_h0_val == -257, rs2_h2_val == 0
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x05c0000001dfff;  op2val:0xfffa00000004feff
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x05c0000001dfff, 0xfffa00000004feff, x1, 168, x4)

inst_50:
// rs1_h0_val == -2049, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000008000f7ff;  op2val:0x10003ffffeff0040
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x2000008000f7ff, 0x10003ffffeff0040, x1, 176, x4)

inst_51:
// rs1_h0_val == -513, rs1_h3_val == -4097
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff00090080fdff;  op2val:0xefff5555fff80080
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xefff00090080fdff, 0xefff5555fff80080, x1, 184, x4)

inst_52:
// rs1_h0_val == -257, rs2_h1_val == -513, rs1_h3_val == 1
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x0102001000feff;  op2val:0x8000fffbfdfffff8
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x0102001000feff, 0x8000fffbfdfffff8, x1, 192, x4)

inst_53:
// rs1_h0_val == -17, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff55550040ffef;  op2val:0xffefaaaafdfff7ff
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xffff55550040ffef, 0xffefaaaafdfff7ff, x1, 200, x4)

inst_54:
// rs1_h0_val == -9, rs2_h0_val == -8193
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffff80040fff7;  op2val:0xf7ff55550006dfff
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfefffff80040fff7, 0xf7ff55550006dfff, x1, 208, x4)

inst_55:
// rs1_h0_val == -3, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffaaaafffd;  op2val:0xfffa00400080fbff
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfffffeffaaaafffd, 0xfffa00400080fbff, x1, 216, x4)

inst_56:
// rs1_h0_val == 4096, rs1_h1_val == 21845, rs2_h1_val == -2049
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9000655551000;  op2val:0x200006f7fffff9
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfff9000655551000, 0x200006f7fffff9, x1, 224, x4)

inst_57:
// rs1_h0_val == 1024, rs1_h3_val == 4096
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000008000400400;  op2val:0x2000fffb8000fffb
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x1000008000400400, 0x2000fffb8000fffb, x1, 232, x4)

inst_58:
// rs1_h0_val == 256, rs2_h2_val == 32, rs2_h1_val == -17
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfff9feff0100;  op2val:0x10000020ffeffeff
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfffcfff9feff0100, 0x10000020ffeffeff, x1, 240, x4)

inst_59:
// rs1_h0_val == 64, rs1_h2_val == -2049, rs2_h2_val == -513
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9f7fffbff0040;  op2val:0x200fdfff7ff3fff
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfff9f7fffbff0040, 0x200fdfff7ff3fff, x1, 248, x4)

inst_60:
// rs1_h0_val == 32, rs2_h1_val == 1024, rs1_h3_val == 4
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x043fffff7f0020;  op2val:0xfffdfbff0400ff7f
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x043fffff7f0020, 0xfffdfbff0400ff7f, x1, 256, x4)

inst_61:
// rs1_h0_val == 16, rs2_h2_val == -2, rs1_h1_val == -2049
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fff6f7ff0010;  op2val:0x100fffeff7f7fff
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x08fff6f7ff0010, 0x100fffeff7f7fff, x1, 264, x4)

inst_62:
// rs1_h0_val == 4, rs1_h3_val == -2, rs2_h0_val == -3
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefff802000004;  op2val:0xff7f40000005fffd
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfffefff802000004, 0xff7f40000005fffd, x1, 272, x4)

inst_63:
// rs2_h3_val == -1, rs2_h0_val == 8192, rs1_h3_val == 8192
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000140000008;  op2val:0xfffff7fffeff2000
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x2000000140000008, 0xfffff7fffeff2000, x1, 280, x4)

inst_64:
// rs2_h1_val == 2, rs2_h0_val == -9
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00070006;  op2val:0xffef00030002fff7
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfffffffe00070006, 0xffef00030002fff7, x1, 288, x4)

inst_65:
// rs2_h1_val == 1, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffc00080080;  op2val:0xdfff000000010040
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xff7ffffc00080080, 0xdfff000000010040, x1, 296, x4)

inst_66:
// rs2_h0_val == -21846, rs2_h1_val == 8
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffc00800003;  op2val:0xaaaafff90008aaaa
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfff9fffc00800003, 0xaaaafff90008aaaa, x1, 304, x4)

inst_67:
// rs2_h0_val == -513, rs2_h2_val == 1024
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff8aaaa0001;  op2val:0xffef0400ffeffdff
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x4000fff8aaaa0001, 0xffef0400ffeffdff, x1, 312, x4)

inst_68:
// rs2_h0_val == 4096, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffa5555dfff;  op2val:0x060006ffff1000
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xeffffffa5555dfff, 0x060006ffff1000, x1, 320, x4)

inst_69:
// rs2_h0_val == 2048, rs1_h1_val == -513, rs1_h3_val == 16
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x100002fdff0003;  op2val:0xffbffffcfff70800
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x100002fdff0003, 0xffbffffcfff70800, x1, 328, x4)

inst_70:
// rs2_h0_val == 1024, rs1_h2_val == 2048
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x400800ffbf4000;  op2val:0x100fff880000400
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x400800ffbf4000, 0x100fff880000400, x1, 336, x4)

inst_71:
// rs2_h0_val == 512, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fff9fffb2000;  op2val:0x1000004000090200
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x20fff9fffb2000, 0x1000004000090200, x1, 344, x4)

inst_72:
// rs2_h0_val == 256, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70200fff8fffc;  op2val:0xf7ff555502000100
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfff70200fff8fffc, 0xf7ff555502000100, x1, 352, x4)

inst_73:
// rs2_h0_val == 32, rs2_h1_val == -33
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x400003fbff0400;  op2val:0xf7ff4000ffdf0020
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x400003fbff0400, 0xf7ff4000ffdf0020, x1, 360, x4)

inst_74:
// rs2_h0_val == 8, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0006ffffaaaa;  op2val:0xfeff000900080008
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfffe0006ffffaaaa, 0xfeff000900080008, x1, 368, x4)

inst_75:
// rs2_h0_val == 2, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf20007fffffdf;  op2val:0x090007fffd0002
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xffdf20007fffffdf, 0x090007fffd0002, x1, 376, x4)

inst_76:
// rs2_h0_val == 1, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0007dffffff9;  op2val:0x01080000070001
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xff7f0007dffffff9, 0x01080000070001, x1, 384, x4)

inst_77:
// rs1_h3_val == 21845, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x555500200004ffdf;  op2val:0x0300090005c000
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x555500200004ffdf, 0x0300090005c000, x1, 392, x4)

inst_78:
// rs1_h3_val == -1025, rs2_h2_val == -17
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0400effffff6;  op2val:0x04ffef0800fff9
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfbff0400effffff6, 0x04ffef0800fff9, x1, 400, x4)

inst_79:
// rs1_h3_val == -17, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffa00050200;  op2val:0xfeff004000080002
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xffeffffa00050200, 0xfeff004000080002, x1, 408, x4)

inst_80:
// rs1_h3_val == -3, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffc80000100;  op2val:0x200040000070800
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfffdfffc80000100, 0x200040000070800, x1, 416, x4)

inst_81:
// rs1_h3_val == 2048, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x8003ffffff60009;  op2val:0xfffe1000ffff0020
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x8003ffffff60009, 0xfffe1000ffff0020, x1, 424, x4)

inst_82:
// rs1_h3_val == 512, rs1_h2_val == -17
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x200ffeffeff0100;  op2val:0x2000090040ffbf
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x200ffeffeff0100, 0x2000090040ffbf, x1, 432, x4)

inst_83:
// rs1_h3_val == 256, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fff700058000;  op2val:0xfffd0400fffdfbff
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x100fff700058000, 0xfffd0400fffdfbff, x1, 440, x4)

inst_84:
// rs1_h3_val == 128, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fffb55550010;  op2val:0xff7fc000fffaffef
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x80fffb55550010, 0xff7fc000fffaffef, x1, 448, x4)

inst_85:
// rs2_h2_val == -129, rs1_h2_val == -3
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffd8000fffc;  op2val:0x2000ff7fbfffaaaa
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfffbfffd8000fffc, 0x2000ff7fbfffaaaa, x1, 456, x4)

inst_86:
// rs2_h2_val == -65, rs2_h1_val == 4096
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000009aaaa5555;  op2val:0xfdffffbf10007fff
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x1000009aaaa5555, 0xfdffffbf10007fff, x1, 464, x4)

inst_87:
// rs2_h2_val == -33, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x200800ff7f0003;  op2val:0xf7ffffdf0003ff7f
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x200800ff7f0003, 0xf7ffffdf0003ff7f, x1, 472, x4)

inst_88:
// rs1_h3_val == 0, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000075555;  op2val:0xfffc3fffffff0800
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x00000000075555, 0xfffc3fffffff0800, x1, 480, x4)

inst_89:
// rs1_h2_val == 32767, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x037fff0100bfff;  op2val:0x08fffcfff9ffef
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x037fff0100bfff, 0x08fffcfff9ffef, x1, 488, x4)

inst_90:
// rs1_h2_val == -8193, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcdfff1000fffa;  op2val:0xfffffff601000007
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfffcdfff1000fffa, 0xfffffff601000007, x1, 496, x4)

inst_91:
// rs2_h2_val == 256, rs1_h1_val == -33
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffdffffdfffff;  op2val:0x1000010000400400
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfdfffdffffdfffff, 0x1000010000400400, x1, 504, x4)

inst_92:
// rs2_h2_val == 128, rs2_h1_val == 21845
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffbfffaaaa5555;  op2val:0x40008055551000
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfbffbfffaaaa5555, 0x40008055551000, x1, 512, x4)

inst_93:
// rs1_h2_val == -129, rs2_h1_val == -2
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfff7f7fff7fff;  op2val:0x5555fbfffffe0004
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xffdfff7f7fff7fff, 0x5555fbfffffe0004, x1, 520, x4)

inst_94:
// rs1_h2_val == -65, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffbf0080fff6;  op2val:0xfffa0009fff80400
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xffbfffbf0080fff6, 0xfffa0009fff80400, x1, 528, x4)

inst_95:
// rs2_h2_val == -1, rs1_h1_val == -17
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x08efffffef0200;  op2val:0xaaaaffffeffffffe
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x08efffffef0200, 0xaaaaffffeffffffe, x1, 536, x4)

inst_96:
// rs2_h1_val == -21846, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff02000004ffef;  op2val:0x1001000aaaa0800
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x3fff02000004ffef, 0x1001000aaaa0800, x1, 544, x4)

inst_97:
// rs1_h2_val == 4096, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd100000400003;  op2val:0xff7ffffbfff90006
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfffd100000400003, 0xff7ffffbfff90006, x1, 552, x4)

inst_98:
// rs1_h2_val == 256, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff01001000f7ff;  op2val:0x7fff40000002fdff
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xefff01001000f7ff, 0x7fff40000002fdff, x1, 560, x4)

inst_99:
// rs1_h2_val == 64, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000040efff0000;  op2val:0xffef0009aaaafffb
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x1000040efff0000, 0xffef0009aaaafffb, x1, 568, x4)

inst_100:
// rs2_h1_val == -65, rs2_h2_val == 4
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc400000400080;  op2val:0x010004ffbf0005
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfffc400000400080, 0x010004ffbf0005, x1, 576, x4)

inst_101:
// rs1_h2_val == -1, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x09fffffffc0007;  op2val:0x03fff9dfff0040
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x09fffffffc0007, 0x03fff9dfff0040, x1, 584, x4)

inst_102:
// rs2_h1_val == 8192, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x20003fffdffffeff;  op2val:0xefffbfff2000c000
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x20003fffdffffeff, 0xefffbfff2000c000, x1, 592, x4)

inst_103:
// rs2_h2_val == 8, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaabfff2000ffbf;  op2val:0xefff000880000800
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xaaaabfff2000ffbf, 0xefff000880000800, x1, 600, x4)

inst_104:
// rs2_h1_val == 32, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffac00000020040;  op2val:0x02bfff00200400
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0xfffac00000020040, 0x02bfff00200400, x1, 608, x4)

inst_105:
// rs2_h2_val == 2, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x08010040000800;  op2val:0xfff800027fff0200
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x08010040000800, 0xfff800027fff0200, x1, 616, x4)

inst_106:
// rs1_h2_val == -32768, 
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x80008000fffd0800;  op2val:0x01000708007fff
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x80008000fffd0800, 0x01000708007fff, x1, 624, x4)

inst_107:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val == 1024, rs1_h3_val == 32, rs1_h0_val == -5, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h1_val == 128, rs1_h1_val == -9
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x200400fff7fffb;  op2val:0xfff8fff900800005
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x200400fff7fffb, 0xfff8fff900800005, x1, 632, x4)

inst_108:
// rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h3_val == -32768, rs2_h2_val == -32768, rs1_h1_val == -1, rs2_h0_val == -32768, rs1_h2_val == -33, rs2_h1_val == 64
// opcode: add16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffdfffff0800;  op2val:0x8000800000408000
TEST_RR_OP(add16, x31, x30, x29, 0x0000000000000000, 0x3fffffdfffff0800, 0x8000800000408000, x1, 640, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x12_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x12_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 12*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 81*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
