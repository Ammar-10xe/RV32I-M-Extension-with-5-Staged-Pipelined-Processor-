
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the khmbt16 instruction of the RISC-V RV64PZicsr extension for the khmbt16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",khmbt16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x9, rs2==x2, rd==x9, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h0_val == 21845, rs1_h2_val != rs2_h2_val, rs2_h3_val == -9, rs2_h1_val == -65, rs1_h1_val != rs2_h1_val, rs1_h3_val == -16385, rs1_h2_val == 0, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 21845, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h2_val == -21846
// opcode: khmbt16 ; op1:x9; op2:x2; dest:x9; op1val:0xbfff000055558000;  op2val:0xfff7aaaaffbf5555
TEST_PKRR_OP(khmbt16, x9, x9, x2, 0x0000000000000000, 0xbfff000055558000, 0xfff7aaaaffbf5555, x9, x6, 0, x14)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x1, rd==x26, rs1_h3_val == rs2_h3_val, rs2_h2_val == -257, rs1_h1_val == 512, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h3_val == -8193, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == -8193
// opcode: khmbt16 ; op1:x23; op2:x1; dest:x26; op1val:0xdfff3fff0200fffc;  op2val:0xdffffeff00070009
TEST_PKRR_OP(khmbt16, x26, x23, x1, 0x0000000000000000, 0xdfff3fff0200fffc, 0xdffffeff00070009, x23, x6, 16, x14)

inst_2:
// rs1 == rs2 != rd, rs1==x11, rs2==x11, rd==x28, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == -65, rs1_h0_val == -65, rs1_h3_val == -4097
// opcode: khmbt16 ; op1:x11; op2:x11; dest:x28; op1val:0xefff00060009ffbf;  op2val:0x05ffbf3fff0003
TEST_PKRR_OP(khmbt16, x28, x11, x11, 0x0000000000000000, 0xefff00060009ffbf, 0x05ffbf3fff0003, x11, x6, 32, x14)

inst_3:
// rs1 == rs2 == rd, rs1==x10, rs2==x10, rd==x10, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h1_val == -2, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h3_val == -32768, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val == 16, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 512, rs2_h2_val == 2
// opcode: khmbt16 ; op1:x10; op2:x10; dest:x10; op1val:0x05c000fffe0010;  op2val:0x800000020200fffc
TEST_PKRR_OP(khmbt16, x10, x10, x10, 0x0000000000000000, 0x05c000fffe0010, 0x800000020200fffc, x10, x6, 48, x14)

inst_4:
// rs2 == rd != rs1, rs1==x25, rs2==x19, rd==x19, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 8, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == -2, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h3_val == 21845
// opcode: khmbt16 ; op1:x25; op2:x19; dest:x19; op1val:0x08fff9fff9fffc;  op2val:0x5555fffcfffafffe
TEST_PKRR_OP(khmbt16, x19, x25, x19, 0x0000000000000000, 0x08fff9fff9fffc, 0x5555fffcfffafffe, x25, x6, 64, x14)

inst_5:
// rs1==x21, rs2==x8, rd==x29, rs1_h2_val == rs2_h2_val, rs2_h2_val == -4097, rs1_h1_val == 1024, rs1_h2_val == -4097, rs2_h3_val == 8, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 8
// opcode: khmbt16 ; op1:x21; op2:x8; dest:x29; op1val:0xfff6efff04003fff;  op2val:0x08efff00085555
TEST_PKRR_OP(khmbt16, x29, x21, x8, 0x0000000000000000, 0xfff6efff04003fff, 0x08efff00085555, x21, x6, 80, x14)

inst_6:
// rs1==x15, rs2==x21, rd==x12, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h3_val == 4, rs1_h1_val == 128, rs2_h2_val == 2048, rs1_h0_val == 2, rs2_h1_val == 4096, rs2_h3_val == -21846, rs2_h0_val == 512
// opcode: khmbt16 ; op1:x15; op2:x21; dest:x12; op1val:0x04000600800002;  op2val:0xaaaa080010000200
TEST_PKRR_OP(khmbt16, x12, x15, x21, 0x0000000000000000, 0x04000600800002, 0xaaaa080010000200, x15, x6, 96, x14)

inst_7:
// rs1==x20, rs2==x27, rd==x22, rs1_h1_val == rs2_h1_val, rs1_h1_val == 16384, rs2_h2_val == 4096, rs2_h1_val == 16384, rs2_h3_val == 32767, rs1_h3_val == 8192
// opcode: khmbt16 ; op1:x20; op2:x27; dest:x22; op1val:0x2000fff840000006;  op2val:0x7fff100040000200
TEST_PKRR_OP(khmbt16, x22, x20, x27, 0x0000000000000000, 0x2000fff840000006, 0x7fff100040000200, x20, x6, 112, x14)

inst_8:
// rs1==x19, rs2==x20, rd==x30, rs1_h0_val == rs2_h0_val, rs1_h1_val == -21846, rs2_h3_val == 0, rs1_h3_val == -32768, rs1_h2_val == 2048
// opcode: khmbt16 ; op1:x19; op2:x20; dest:x30; op1val:0x80000800aaaafff8;  op2val:0x000800fffcfff8
TEST_PKRR_OP(khmbt16, x30, x19, x20, 0x0000000000000000, 0x80000800aaaafff8, 0x000800fffcfff8, x19, x6, 128, x14)

inst_9:
// rs1==x3, rs2==x4, rd==x27, rs2_h3_val == -16385, rs1_h2_val == -16385, rs2_h0_val == -9, rs1_h1_val == -129, rs2_h2_val == 4, rs1_h0_val == -257
// opcode: khmbt16 ; op1:x3; op2:x4; dest:x27; op1val:0x05bfffff7ffeff;  op2val:0xbfff00041000fff7
TEST_PKRR_OP(khmbt16, x27, x3, x4, 0x0000000000000000, 0x05bfffff7ffeff, 0xbfff00041000fff7, x3, x6, 144, x14)

inst_10:
// rs1==x5, rs2==x22, rd==x31, rs2_h3_val == -4097, rs2_h0_val == 8, rs1_h1_val == 2048, rs2_h2_val == -129, rs1_h2_val == 8, rs1_h0_val == 32767
// opcode: khmbt16 ; op1:x5; op2:x22; dest:x31; op1val:0xfffc000808007fff;  op2val:0xefffff7f3fff0008
TEST_PKRR_OP(khmbt16, x31, x5, x22, 0x0000000000000000, 0xfffc000808007fff, 0xefffff7f3fff0008, x5, x6, 160, x14)

inst_11:
// rs1==x22, rs2==x18, rd==x25, rs2_h3_val == -2049, rs2_h2_val == -1, rs2_h0_val == -2049, rs1_h2_val == 4, rs1_h1_val == 1, rs1_h0_val == -16385
// opcode: khmbt16 ; op1:x22; op2:x18; dest:x25; op1val:0x200000040001bfff;  op2val:0xf7ffffff3ffff7ff
TEST_PKRR_OP(khmbt16, x25, x22, x18, 0x0000000000000000, 0x200000040001bfff, 0xf7ffffff3ffff7ff, x22, x6, 176, x14)

inst_12:
// rs1==x7, rs2==x9, rd==x5, rs2_h3_val == -1025, rs2_h0_val == 64, rs1_h1_val == -257, rs1_h2_val == -1, rs2_h1_val == 256, rs2_h2_val == 0
// opcode: khmbt16 ; op1:x7; op2:x9; dest:x5; op1val:0x04fffffeffffbf;  op2val:0xfbff000001000040
TEST_PKRR_OP(khmbt16, x5, x7, x9, 0x0000000000000000, 0x04fffffeffffbf, 0xfbff000001000040, x7, x6, 192, x14)

inst_13:
// rs1==x18, rs2==x15, rd==x23, rs2_h3_val == -513, rs2_h1_val == 32767, rs1_h1_val == 8192, rs1_h3_val == -21846, rs2_h0_val == -513, rs1_h2_val == -2049, rs2_h2_val == 512
// opcode: khmbt16 ; op1:x18; op2:x15; dest:x23; op1val:0xaaaaf7ff20000009;  op2val:0xfdff02007ffffdff
TEST_PKRR_OP(khmbt16, x23, x18, x15, 0x0000000000000000, 0xaaaaf7ff20000009, 0xfdff02007ffffdff, x18, x6, 208, x14)

inst_14:
// rs1==x31, rs2==x13, rd==x0, rs2_h3_val == -257, rs1_h2_val == 1024, rs1_h1_val == 4096, rs1_h0_val == 512, rs2_h0_val == -17, rs2_h1_val == 8192, rs1_h3_val == -5
// opcode: khmbt16 ; op1:x31; op2:x13; dest:x0; op1val:0xfffb040010000200;  op2val:0xfeff3fff2000ffef
TEST_PKRR_OP(khmbt16, x0, x31, x13, 0x0000000000000000, 0xfffb040010000200, 0xfeff3fff2000ffef, x31, x6, 224, x14)

inst_15:
// rs1==x14, rs2==x7, rd==x20, rs2_h3_val == -129, rs2_h2_val == -2049, rs2_h1_val == -16385, rs1_h3_val == 128, rs2_h0_val == -1, rs1_h2_val == -21846, rs1_h1_val == 2
// opcode: khmbt16 ; op1:x14; op2:x7; dest:x20; op1val:0x80aaaa00027fff;  op2val:0xff7ff7ffbfffffff
TEST_PKRR_OP(khmbt16, x20, x14, x7, 0x0000000000000000, 0x80aaaa00027fff, 0xff7ff7ffbfffffff, x14, x6, 240, x10)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_16:
// rs1==x1, rs2==x16, rd==x21, rs2_h3_val == -65, rs1_h3_val == 1, rs1_h0_val == -1, rs2_h2_val == 128
// opcode: khmbt16 ; op1:x1; op2:x16; dest:x21; op1val:0x0100080400ffff;  op2val:0xffbf00800006fffc
TEST_PKRR_OP(khmbt16, x21, x1, x16, 0x0000000000000000, 0x0100080400ffff, 0xffbf00800006fffc, x1, x9, 0, x10)

inst_17:
// rs1==x24, rs2==x28, rd==x17, rs2_h3_val == -33, rs1_h2_val == -3, rs2_h1_val == -257, rs2_h0_val == -21846, rs1_h0_val == 128
// opcode: khmbt16 ; op1:x24; op2:x28; dest:x17; op1val:0xbffffffd00030080;  op2val:0xffdf0002feffaaaa
TEST_PKRR_OP(khmbt16, x17, x24, x28, 0x0000000000000000, 0xbffffffd00030080, 0xffdf0002feffaaaa, x24, x9, 16, x10)

inst_18:
// rs1==x12, rs2==x14, rd==x7, rs2_h3_val == -17, rs1_h2_val == -5, rs1_h3_val == 64, rs2_h1_val == 32
// opcode: khmbt16 ; op1:x12; op2:x14; dest:x7; op1val:0x40fffbfffefff6;  op2val:0xffef3fff00200040
TEST_PKRR_OP(khmbt16, x7, x12, x14, 0x0000000000000000, 0x40fffbfffefff6, 0xffef3fff00200040, x12, x9, 32, x10)

inst_19:
// rs1==x4, rs2==x26, rd==x18, rs2_h3_val == -5, rs2_h0_val == -16385, rs1_h2_val == -9
// opcode: khmbt16 ; op1:x4; op2:x26; dest:x18; op1val:0x04fff7aaaa0010;  op2val:0xfffbfff8fffcbfff
TEST_PKRR_OP(khmbt16, x18, x4, x26, 0x0000000000000000, 0x04fff7aaaa0010, 0xfffbfff8fffcbfff, x4, x9, 48, x10)

inst_20:
// rs1==x0, rs2==x12, rd==x3, rs2_h3_val == -3, rs1_h1_val == 256, rs2_h1_val == -129, rs1_h3_val == 2048
// opcode: khmbt16 ; op1:x0; op2:x12; dest:x3; op1val:0x800000401000006;  op2val:0xfffdaaaaff7f0007
TEST_PKRR_OP(khmbt16, x3, x0, x12, 0x0000000000000000, 0x800000401000006, 0xfffdaaaaff7f0007, x0, x9, 64, x10)

inst_21:
// rs1==x30, rs2==x17, rd==x15, rs2_h3_val == -2, rs1_h0_val == -2049, rs2_h2_val == -8193, rs1_h3_val == -129, rs1_h1_val == -65
// opcode: khmbt16 ; op1:x30; op2:x17; dest:x15; op1val:0xff7fc000ffbff7ff;  op2val:0xfffedfffbfff3fff
TEST_PKRR_OP(khmbt16, x15, x30, x17, 0x0000000000000000, 0xff7fc000ffbff7ff, 0xfffedfffbfff3fff, x30, x9, 80, x10)

inst_22:
// rs1==x2, rs2==x24, rd==x6, rs2_h3_val == 16384, rs1_h0_val == 1, rs2_h0_val == -1025, rs1_h1_val == -16385
// opcode: khmbt16 ; op1:x2; op2:x24; dest:x6; op1val:0xfffc0003bfff0001;  op2val:0x4000fffcfffcfbff
TEST_PKRR_OP(khmbt16, x6, x2, x24, 0x0000000000000000, 0xfffc0003bfff0001, 0x4000fffcfffcfbff, x2, x9, 96, x10)

inst_23:
// rs1==x29, rs2==x30, rd==x8, rs2_h3_val == 8192, rs1_h2_val == 128, rs2_h1_val == -5, rs2_h0_val == -65, rs1_h3_val == -3, rs1_h0_val == -513, rs1_h1_val == -17
// opcode: khmbt16 ; op1:x29; op2:x30; dest:x8; op1val:0xfffd0080ffeffdff;  op2val:0x20000080fffbffbf
TEST_PKRR_OP(khmbt16, x8, x29, x30, 0x0000000000000000, 0xfffd0080ffeffdff, 0x20000080fffbffbf, x29, x9, 112, x10)

inst_24:
// rs1==x6, rs2==x25, rd==x4, rs2_h3_val == 4096, rs1_h3_val == 256, rs2_h0_val == 4096, rs1_h0_val == 2048, rs2_h2_val == 32767
// opcode: khmbt16 ; op1:x6; op2:x25; dest:x4; op1val:0x100fff604000800;  op2val:0x10007fff00051000
TEST_PKRR_OP(khmbt16, x4, x6, x25, 0x0000000000000000, 0x100fff604000800, 0x10007fff00051000, x6, x9, 128, x10)

inst_25:
// rs1==x16, rs2==x23, rd==x14, rs2_h3_val == 2048, rs2_h2_val == -16385, rs1_h2_val == 8192, rs1_h1_val == 16
// opcode: khmbt16 ; op1:x16; op2:x23; dest:x14; op1val:0xfff6200000100009;  op2val:0x800bfff01000009
TEST_PKRR_OP(khmbt16, x14, x16, x23, 0x0000000000000000, 0xfff6200000100009, 0x800bfff01000009, x16, x9, 144, x10)

inst_26:
// rs1==x17, rs2==x6, rd==x1, rs2_h3_val == 1024, rs1_h3_val == -65, rs2_h1_val == 16
// opcode: khmbt16 ; op1:x17; op2:x6; dest:x1; op1val:0xffbf000940000010;  op2val:0x400000700100007
TEST_PKRR_OP(khmbt16, x1, x17, x6, 0x0000000000000000, 0xffbf000940000010, 0x400000700100007, x17, x9, 160, x10)

inst_27:
// rs1==x28, rs2==x29, rd==x2, rs2_h3_val == 512, rs2_h1_val == 64, rs1_h3_val == 4096
// opcode: khmbt16 ; op1:x28; op2:x29; dest:x2; op1val:0x1000fffd0003fffa;  op2val:0x200000000400040
TEST_PKRR_OP(khmbt16, x2, x28, x29, 0x0000000000000000, 0x1000fffd0003fffa, 0x200000000400040, x28, x9, 176, x10)

inst_28:
// rs1==x27, rs2==x5, rd==x16, rs2_h3_val == 256, rs1_h3_val == -9, rs1_h2_val == 4096, rs1_h1_val == 32767, rs2_h0_val == 32767
// opcode: khmbt16 ; op1:x27; op2:x5; dest:x16; op1val:0xfff710007ffff7ff;  op2val:0x100fff600077fff
TEST_PKRR_OP(khmbt16, x16, x27, x5, 0x0000000000000000, 0xfff710007ffff7ff, 0x100fff600077fff, x27, x9, 192, x10)

inst_29:
// rs1==x13, rs2==x0, rd==x11, rs2_h3_val == 128, rs1_h0_val == 32
// opcode: khmbt16 ; op1:x13; op2:x0; dest:x11; op1val:0xfff90005ffef0020;  op2val:0x80bfff0003fff7
TEST_PKRR_OP(khmbt16, x11, x13, x0, 0x0000000000000000, 0xfff90005ffef0020, 0x80bfff0003fff7, x13, x9, 208, x10)

inst_30:
// rs1==x26, rs2==x31, rd==x13, rs2_h3_val == 64, rs1_h0_val == 4, rs1_h1_val == -8193, rs2_h0_val == 256
// opcode: khmbt16 ; op1:x26; op2:x31; dest:x13; op1val:0x090800dfff0004;  op2val:0x400005ff7f0100
TEST_PKRR_OP(khmbt16, x13, x26, x31, 0x0000000000000000, 0x090800dfff0004, 0x400005ff7f0100, x26, x9, 224, x1)

inst_31:
// rs1==x8, rs2==x3, rd==x24, rs2_h3_val == 32, rs2_h1_val == 1024, rs1_h3_val == -257
// opcode: khmbt16 ; op1:x8; op2:x3; dest:x24; op1val:0xfeff0000ff7ffffa;  op2val:0x20aaaa04001000
TEST_PKRR_OP(khmbt16, x24, x8, x3, 0x0000000000000000, 0xfeff0000ff7ffffa, 0x20aaaa04001000, x8, x9, 240, x1)

inst_32:
// rs2_h3_val == 16, rs1_h0_val == 4096, rs1_h1_val == 32
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9100000201000;  op2val:0x10fff820003fff
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xfff9100000201000, 0x10fff820003fff, x30, x9, 256, x1)

inst_33:
// rs2_h3_val == 4, rs2_h2_val == 16384, rs1_h0_val == -3, rs1_h3_val == -2049
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fff7ffaaaafffd;  op2val:0x044000fff80006
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xf7fff7ffaaaafffd, 0x044000fff80006, x30, x9, 272, x1)

inst_34:
// rs2_h3_val == 2, rs2_h0_val == 2048, rs1_h3_val == -33, rs2_h1_val == -17
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff800070009;  op2val:0x02dfffffef0800
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xffdffff800070009, 0x02dfffffef0800, x30, x9, 288, x1)

inst_35:
// rs1_h1_val == -5, rs2_h2_val == -17, rs1_h0_val == -129
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70400fffbff7f;  op2val:0xfffcffef0200fff6
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xfff70400fffbff7f, 0xfffcffef0200fff6, x30, x9, 304, x1)

inst_36:
// rs1_h1_val == -3, rs2_h0_val == 8192, rs2_h1_val == -32768, rs2_h2_val == -1025
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0007fffd0800;  op2val:0xfffafbff80002000
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xffbf0007fffd0800, 0xfffafbff80002000, x30, x9, 320, x1)

inst_37:
// rs1_h1_val == -32768, rs1_h2_val == -129, rs2_h0_val == 0
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffff7f80008000;  op2val:0xefff0000fffc0000
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xf7ffff7f80008000, 0xefff0000fffc0000, x30, x9, 336, x1)

inst_38:
// rs1_h1_val == 64, rs2_h1_val == -3, rs1_h2_val == -1025, rs1_h3_val == -1
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00400200;  op2val:0xfffdffbffffd1000
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xfffffbff00400200, 0xfffdffbffffd1000, x30, x9, 352, x1)

inst_39:
// rs1_h1_val == 8, rs1_h0_val == -2
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffa0008fffe;  op2val:0x200002fff90005
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x1000fffa0008fffe, 0x200002fff90005, x30, x9, 368, x1)

inst_40:
// rs1_h1_val == 4, rs2_h2_val == 32, rs1_h0_val == -1025, rs2_h1_val == -21846
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff00050004fbff;  op2val:0x090020aaaa0100
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x3fff00050004fbff, 0x090020aaaa0100, x30, x9, 384, x1)

inst_41:
// rs1_h1_val == 0, rs1_h3_val == 21845, rs2_h3_val == -1
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555008000000080;  op2val:0xffff00000010fbff
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x5555008000000080, 0xffff00000010fbff, x30, x9, 400, x1)

inst_42:
// rs1_h1_val == -1, rs1_h0_val == 256, rs1_h3_val == -17
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0400ffff0100;  op2val:0x7fffffeffffa0007
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xffef0400ffff0100, 0x7fffffeffffa0007, x30, x9, 416, x1)

inst_43:
// rs1_h0_val == -21846, rs2_h2_val == 64
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x070080aaaaaaaa;  op2val:0x00004001000100
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x070080aaaaaaaa, 0x00004001000100, x30, x9, 432, x1)

inst_44:
// rs1_h0_val == 21845, rs1_h2_val == 16, rs2_h2_val == -3
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0010fff65555;  op2val:0x4000fffd8000fff6
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xefff0010fff65555, 0x4000fffd8000fff6, x30, x9, 448, x1)

inst_45:
// rs1_h0_val == -8193, rs1_h3_val == -1025, rs2_h0_val == -5
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0003dfffdfff;  op2val:0xffff0004bffffffb
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xfbff0003dfffdfff, 0xffff0004bffffffb, x30, x9, 464, x1)

inst_46:
// rs1_h0_val == -4097, rs1_h2_val == 1
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0500012000efff;  op2val:0x400bfff02001000
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x0500012000efff, 0x400bfff02001000, x30, x9, 480, x1)

inst_47:
// rs1_h0_val == -33, rs2_h0_val == 2
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800fff90006ffdf;  op2val:0xfdff004000050002
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x800fff90006ffdf, 0xfdff004000050002, x30, x9, 496, x1)

inst_48:
// rs1_h0_val == -17, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fffd0400ffef;  op2val:0x06c000fff6fffb
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x01fffd0400ffef, 0x06c000fff6fffb, x30, x9, 512, x1)

inst_49:
// rs1_h0_val == -9, rs1_h1_val == -1025
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffdfbfffff7;  op2val:0xbfffffef0003ffef
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xffdffffdfbfffff7, 0xbfffffef0003ffef, x30, x9, 528, x1)

inst_50:
// rs1_h0_val == -5, rs2_h0_val == -32768
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fff80040fffb;  op2val:0x2000fffc00088000
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x08fff80040fffb, 0x2000fffc00088000, x30, x9, 544, x1)

inst_51:
// rs1_h0_val == 16384, rs1_h2_val == -2
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffeffff4000;  op2val:0xdfff1000bffffff7
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xfff8fffeffff4000, 0xdfff1000bffffff7, x30, x9, 560, x1)

inst_52:
// rs1_h0_val == 8192, rs2_h0_val == 32, rs1_h2_val == -32768
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff98000c0002000;  op2val:0xfffc000910000020
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xfff98000c0002000, 0xfffc000910000020, x30, x9, 576, x1)

inst_53:
// rs1_h0_val == 1024, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fffb01000400;  op2val:0x40000009fff80003
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x03fffb01000400, 0x40000009fff80003, x30, x9, 592, x1)

inst_54:
// rs1_h0_val == 64, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x061000ffef0040;  op2val:0x100007ff7ffff6
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x061000ffef0040, 0x100007ff7ffff6, x30, x9, 608, x1)

inst_55:
// rs1_h0_val == 8, rs2_h1_val == -1025
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000010ffbf0008;  op2val:0xf7ff1000fbff0100
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x80000010ffbf0008, 0xf7ff1000fbff0100, x30, x9, 624, x1)

inst_56:
// rs1_h0_val == 0, rs1_h3_val == 512, rs2_h1_val == -9
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000800ffef0000;  op2val:0x1000005fff70000
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x2000800ffef0000, 0x1000005fff70000, x30, x9, 640, x1)

inst_57:
// rs2_h3_val == 1, rs2_h2_val == -9, rs2_h1_val == -8193
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0000ffefffef;  op2val:0x01fff7dfff0007
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xfffc0000ffefffef, 0x01fff7dfff0007, x30, x9, 656, x1)

inst_58:
// rs2_h2_val == 21845, rs1_h1_val == -33
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800fffcffdf0400;  op2val:0x55555555aaaa7fff
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x800fffcffdf0400, 0x55555555aaaa7fff, x30, x9, 672, x1)

inst_59:
// rs2_h2_val == -513, rs1_h3_val == -513
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffff800010004;  op2val:0xeffffdffbfff0006
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xfdfffff800010004, 0xeffffdffbfff0006, x30, x9, 688, x1)

inst_60:
// rs2_h1_val == 4, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000200000020020;  op2val:0xff7f100000047fff
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x1000200000020020, 0xff7f100000047fff, x30, x9, 704, x1)

inst_61:
// rs2_h1_val == 2, rs1_h3_val == 32767, rs2_h2_val == 1024
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffbff0000fff7;  op2val:0x80040000027fff
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x7ffffbff0000fff7, 0x80040000027fff, x30, x9, 720, x1)

inst_62:
// rs2_h1_val == 1, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf000600800008;  op2val:0x023fff0001fdff
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xffbf000600800008, 0x023fff0001fdff, x30, x9, 736, x1)

inst_63:
// rs2_h1_val == 0, rs1_h2_val == 21845
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500025555;  op2val:0x3fff004000000002
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x5555555500025555, 0x3fff004000000002, x30, x9, 752, x1)

inst_64:
// rs2_h1_val == -1, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff640000005;  op2val:0x20000007ffff0100
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x7ffffff640000005, 0x20000007ffff0100, x30, x9, 768, x1)

inst_65:
// rs2_h0_val == -8193, rs1_h2_val == -8193
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x05dfff2000efff;  op2val:0x02fdff0100dfff
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x05dfff2000efff, 0x02fdff0100dfff, x30, x9, 784, x1)

inst_66:
// rs2_h0_val == -4097, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10080007fff1000;  op2val:0x80fffd0020efff
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x10080007fff1000, 0x80fffd0020efff, x30, x9, 800, x1)

inst_67:
// rs2_h0_val == -257, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000fff70100f7ff;  op2val:0xfffafffd0009feff
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xc000fff70100f7ff, 0xfffafffd0009feff, x30, x9, 816, x1)

inst_68:
// rs2_h0_val == -129, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400007fffcfeff;  op2val:0x0008000003ff7f
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x400007fffcfeff, 0x0008000003ff7f, x30, x9, 832, x1)

inst_69:
// rs2_h0_val == -33, rs1_h2_val == -65
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x06ffbf00010010;  op2val:0x3fffdfff0040ffdf
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x06ffbf00010010, 0x3fffdfff0040ffdf, x30, x9, 848, x1)

inst_70:
// rs2_h0_val == -3, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff3fff00200200;  op2val:0x04f7ff3ffffffd
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xfeff3fff00200200, 0x04f7ff3ffffffd, x30, x9, 864, x1)

inst_71:
// rs2_h0_val == 16384, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x07fff900032000;  op2val:0xaaaa7fff02004000
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x07fff900032000, 0xaaaa7fff02004000, x30, x9, 880, x1)

inst_72:
// rs2_h0_val == 1024, rs2_h2_val == -2
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0001fffffff8;  op2val:0x80fffeff7f0400
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xefff0001fffffff8, 0x80fffeff7f0400, x30, x9, 896, x1)

inst_73:
// rs2_h0_val == 128, rs2_h1_val == 21845, rs2_h2_val == 8
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800010005555fffa;  op2val:0x01000855550080
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x800010005555fffa, 0x01000855550080, x30, x9, 912, x1)

inst_74:
// rs2_h0_val == 16, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff80000009fff7;  op2val:0xfff7fbff80000010
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xfeff80000009fff7, 0xfff7fbff80000010, x30, x9, 928, x1)

inst_75:
// rs2_h0_val == 4, rs1_h1_val == -9
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x07fff9fff70006;  op2val:0x00000810000004
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x07fff9fff70006, 0x00000810000004, x30, x9, 944, x1)

inst_76:
// rs2_h0_val == 1, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000300100005;  op2val:0x1000fffdfffb0001
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x40000300100005, 0x1000fffdfffb0001, x30, x9, 960, x1)

inst_77:
// rs1_h3_val == -2, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffef7fffff60400;  op2val:0x00f7ff01000008
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xfffef7fffff60400, 0x00f7ff01000008, x30, x9, 976, x1)

inst_78:
// rs1_h3_val == 16384, rs1_h2_val == 16384
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400040000001aaaa;  op2val:0xc000040040003fff
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x400040000001aaaa, 0xc000040040003fff, x30, x9, 992, x1)

inst_79:
// rs1_h3_val == 1024, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400000700060008;  op2val:0xff7feffffff9ffdf
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x400000700060008, 0xff7feffffff9ffdf, x30, x9, 1008, x1)

inst_80:
// rs1_h3_val == 32, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fffedffffff7;  op2val:0xc00010000010fffb
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x20fffedffffff7, 0xc00010000010fffb, x30, x9, 1024, x1)

inst_81:
// rs1_h3_val == 16, rs1_h2_val == -17
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10ffef00400002;  op2val:0xffbf080010000800
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x10ffef00400002, 0xffbf080010000800, x30, x9, 1040, x1)

inst_82:
// rs2_h2_val == -33, rs1_h1_val == -2049
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8effff7ff0200;  op2val:0xdfffffdf1000feff
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xfff8effff7ff0200, 0xdfffffdf1000feff, x30, x9, 1056, x1)

inst_83:
// rs1_h3_val == 2, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x02080000060020;  op2val:0xfff600400008ff7f
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x02080000060020, 0xfff600400008ff7f, x30, x9, 1072, x1)

inst_84:
// rs1_h3_val == 0, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x00ff7f10004000;  op2val:0x06ffef1000fff6
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x00ff7f10004000, 0x06ffef1000fff6, x30, x9, 1088, x1)

inst_85:
// rs2_h2_val == -5, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x000004fff90800;  op2val:0x03fffb00200020
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x000004fff90800, 0x03fffb00200020, x30, x9, 1104, x1)

inst_86:
// rs2_h2_val == -32768, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0920000004fff8;  op2val:0x07800000060100
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x0920000004fff8, 0x07800000060100, x30, x9, 1120, x1)

inst_87:
// rs1_h2_val == 32767, rs2_h1_val == 2048
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff97ffffffcffdf;  op2val:0xfff8080008003fff
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xfff97ffffffcffdf, 0xfff8080008003fff, x30, x9, 1136, x1)

inst_88:
// rs2_h2_val == 8192, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fff6fffc0009;  op2val:0x4002000fff8fffc
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x8000fff6fffc0009, 0x4002000fff8fffc, x30, x9, 1152, x1)

inst_89:
// rs1_h2_val == -513, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fdff55550400;  op2val:0x2000aaaa7fff0020
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x4000fdff55550400, 0x2000aaaa7fff0020, x30, x9, 1168, x1)

inst_90:
// rs2_h2_val == 256, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc04000005fdff;  op2val:0xffbf01003ffffdff
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xfffc04000005fdff, 0xffbf01003ffffdff, x30, x9, 1184, x1)

inst_91:
// rs1_h2_val == -257, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x07feff00080003;  op2val:0xfdffffbf0003fff9
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x07feff00080003, 0xfdffffbf0003fff9, x30, x9, 1200, x1)

inst_92:
// rs1_h2_val == -33, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffdf0007fff8;  op2val:0xfbfffffd08005555
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xffdfffdf0007fff8, 0xfbfffffd08005555, x30, x9, 1216, x1)

inst_93:
// rs1_h2_val == 512, rs2_h2_val == 1
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000200ffbf0004;  op2val:0xfffe000100060004
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x40000200ffbf0004, 0xfffe000100060004, x30, x9, 1232, x1)

inst_94:
// rs2_h1_val == -4097, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffbbffffff7;  op2val:0x00fff8effff7ff
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xfff6fffbbffffff7, 0x00fff8effff7ff, x30, x9, 1248, x1)

inst_95:
// rs1_h2_val == 256, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff01000800fdff;  op2val:0x07ffbf5555ffbf
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xffff01000800fdff, 0x07ffbf5555ffbf, x30, x9, 1264, x1)

inst_96:
// rs2_h1_val == -2049, rs1_h2_val == 2
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x06000200060200;  op2val:0x20000800f7fffff9
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x06000200060200, 0x20000800f7fffff9, x30, x9, 1280, x1)

inst_97:
// rs1_h2_val == 64, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000004000400040;  op2val:0xfff7fff70003f7ff
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xc000004000400040, 0xfff7fff70003f7ff, x30, x9, 1296, x1)

inst_98:
// rs2_h1_val == -513, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fbff00000100;  op2val:0xff7f0005fdff0005
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x08fbff00000100, 0xff7f0005fdff0005, x30, x9, 1312, x1)

inst_99:
// rs2_h1_val == -2, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffa00090020;  op2val:0x20fffefffedfff
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xdffffffa00090020, 0x20fffefffedfff, x30, x9, 1328, x1)

inst_100:
// rs1_h2_val == 32, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000020fff8ff7f;  op2val:0xbffffff7fff92000
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x10000020fff8ff7f, 0xbffffff7fff92000, x30, x9, 1344, x1)

inst_101:
// rs1_h1_val == -4097, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffc000efff0004;  op2val:0xdffffffb00050002
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xf7ffc000efff0004, 0xdffffffb00050002, x30, x9, 1360, x1)

inst_102:
// rs1_h1_val == -513, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40fffefdff0200;  op2val:0xfff97ffffff80800
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x40fffefdff0200, 0xfff97ffffff80800, x30, x9, 1376, x1)

inst_103:
// rs2_h2_val == 16, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fff602000007;  op2val:0x0700100007fff7
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x1000fff602000007, 0x0700100007fff7, x30, x9, 1392, x1)

inst_104:
// rs2_h1_val == 128, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafbfffeff0004;  op2val:0x400fff90080ffdf
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xaaaafbfffeff0004, 0x400fff90080ffdf, x30, x9, 1408, x1)

inst_105:
// rs2_h1_val == -33, 
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0005fff80020;  op2val:0x80fff7ffdf7fff
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xfffb0005fff80020, 0x80fff7ffdf7fff, x30, x9, 1424, x1)

inst_106:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h1_val == -2, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h3_val == -32768, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val == 16, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 512, rs2_h2_val == 2
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x05c000fffe0010;  op2val:0x800000020200fffc
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0x05c000fffe0010, 0x800000020200fffc, x30, x9, 1440, x1)

inst_107:
// rs2_h3_val == -257, rs1_h2_val == 1024, rs1_h1_val == 4096, rs1_h0_val == 512, rs2_h0_val == -17, rs2_h1_val == 8192, rs1_h3_val == -5
// opcode: khmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb040010000200;  op2val:0xfeff3fff2000ffef
TEST_PKRR_OP(khmbt16, x31, x30, x29, 0x0000000000000000, 0xfffb040010000200, 0xfeff3fff2000ffef, x30, x9, 1456, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x9_0:
    .fill 184*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
