
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kslra16 instruction of the RISC-V RV64PZicsr extension for the kslra16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kslra16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rd != rs2, rs1==x5, rs2==x10, rd==x5, rs2_val == 6148914691236517205, rs1_h0_val == 64, rs1_h2_val == 8192, rs1_h3_val == 16
// opcode: kslra16 ; op1:x5; op2:x10; dest:x5; op1val:0x102000fffc0040;  op2val:0x5555555555555555
TEST_PKRR_OP(kslra16, x5, x5, x10, 0x0000000000000000, 0x102000fffc0040, 0x5555555555555555, x5, x8, 0, x9)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x21, rs2==x0, rd==x11, rs2_val == 9223372036854775807, rs1_h1_val == 32, rs1_h0_val == -129
// opcode: kslra16 ; op1:x21; op2:x0; dest:x11; op1val:0xfffafff60020ff7f;  op2val:0x0
TEST_PKRR_OP(kslra16, x11, x21, x0, 0x0000000000000000, 0xfffafff60020ff7f, 0x0, x21, x8, 16, x9)

inst_2:
// rs1 == rs2 != rd, rs1==x23, rs2==x23, rd==x16, rs2_val == -4611686018427387905, rs1_h1_val == 4, rs1_h3_val == -129
// opcode: kslra16 ; op1:x23; op2:x23; dest:x16; op1val:0xff7ffff60004c000;  op2val:0xbfffffffffffffff
TEST_PKRR_OP(kslra16, x16, x23, x23, 0x0000000000000000, 0xff7ffff60004c000, 0xbfffffffffffffff, x23, x8, 32, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x24, rs2==x24, rd==x24, rs2_val == -2305843009213693953, rs1_h0_val == 4, rs1_h3_val == 0, rs1_h1_val == 64, rs1_h2_val == -9
// opcode: kslra16 ; op1:x24; op2:x24; dest:x24; op1val:0x00fff700400004;  op2val:0xdfffffffffffffff
TEST_PKRR_OP(kslra16, x24, x24, x24, 0x0000000000000000, 0x00fff700400004, 0xdfffffffffffffff, x24, x8, 48, x9)

inst_4:
// rs2 == rd != rs1, rs1==x18, rs2==x25, rd==x25, rs2_val == -1152921504606846977, rs1_h1_val == 4096, rs1_h3_val == 32, rs1_h2_val == -257
// opcode: kslra16 ; op1:x18; op2:x25; dest:x25; op1val:0x20feff1000fffa;  op2val:0xefffffffffffffff
TEST_PKRR_OP(kslra16, x25, x18, x25, 0x0000000000000000, 0x20feff1000fffa, 0xefffffffffffffff, x18, x8, 64, x9)

inst_5:
// rs1==x28, rs2==x19, rd==x17, rs2_val == -576460752303423489, rs1_h3_val == 1024, rs1_h2_val == 32, rs1_h1_val == -2, rs1_h0_val == -1025
// opcode: kslra16 ; op1:x28; op2:x19; dest:x17; op1val:0x4000020fffefbff;  op2val:0xf7ffffffffffffff
TEST_PKRR_OP(kslra16, x17, x28, x19, 0x0000000000000000, 0x4000020fffefbff, 0xf7ffffffffffffff, x28, x8, 80, x9)

inst_6:
// rs1==x31, rs2==x11, rd==x30, rs2_val == -288230376151711745, rs1_h0_val == -33, rs1_h3_val == -2049
// opcode: kslra16 ; op1:x31; op2:x11; dest:x30; op1val:0xf7fffff7fffaffdf;  op2val:0xfbffffffffffffff
TEST_PKRR_OP(kslra16, x30, x31, x11, 0x0000000000000000, 0xf7fffff7fffaffdf, 0xfbffffffffffffff, x31, x8, 96, x9)

inst_7:
// rs1==x30, rs2==x21, rd==x3, rs2_val == -144115188075855873, rs1_h0_val == 1024, rs1_h2_val == -513, rs1_h1_val == 8
// opcode: kslra16 ; op1:x30; op2:x21; dest:x3; op1val:0x00fdff00080400;  op2val:0xfdffffffffffffff
TEST_PKRR_OP(kslra16, x3, x30, x21, 0x0000000000000000, 0x00fdff00080400, 0xfdffffffffffffff, x30, x8, 112, x9)

inst_8:
// rs1==x11, rs2==x6, rd==x18, rs2_val == -72057594037927937, rs1_h0_val == 16384, rs1_h2_val == 16
// opcode: kslra16 ; op1:x11; op2:x6; dest:x18; op1val:0xfffc0010fff94000;  op2val:0xfeffffffffffffff
TEST_PKRR_OP(kslra16, x18, x11, x6, 0x0000000000000000, 0xfffc0010fff94000, 0xfeffffffffffffff, x11, x8, 128, x9)

inst_9:
// rs1==x12, rs2==x1, rd==x4, rs2_val == -36028797018963969, rs1_h1_val == -2049, rs1_h2_val == 2, rs1_h3_val == 2048
// opcode: kslra16 ; op1:x12; op2:x1; dest:x4; op1val:0x8000002f7ff3fff;  op2val:0xff7fffffffffffff
TEST_PKRR_OP(kslra16, x4, x12, x1, 0x0000000000000000, 0x8000002f7ff3fff, 0xff7fffffffffffff, x12, x8, 144, x9)

inst_10:
// rs1==x15, rs2==x7, rd==x23, rs2_val == -18014398509481985, rs1_h0_val == 8192
// opcode: kslra16 ; op1:x15; op2:x7; dest:x23; op1val:0x09000300402000;  op2val:0xffbfffffffffffff
TEST_PKRR_OP(kslra16, x23, x15, x7, 0x0000000000000000, 0x09000300402000, 0xffbfffffffffffff, x15, x8, 160, x9)

inst_11:
// rs1==x22, rs2==x27, rd==x21, rs2_val == -9007199254740993, rs1_h2_val == 1024, rs1_h1_val == 2048
// opcode: kslra16 ; op1:x22; op2:x27; dest:x21; op1val:0x06040008002000;  op2val:0xffdfffffffffffff
TEST_PKRR_OP(kslra16, x21, x22, x27, 0x0000000000000000, 0x06040008002000, 0xffdfffffffffffff, x22, x8, 176, x9)

inst_12:
// rs1==x3, rs2==x22, rd==x19, rs2_val == -4503599627370497, rs1_h1_val == -65, rs1_h3_val == -65
// opcode: kslra16 ; op1:x3; op2:x22; dest:x19; op1val:0xffbf0009ffbfc000;  op2val:0xffefffffffffffff
TEST_PKRR_OP(kslra16, x19, x3, x22, 0x0000000000000000, 0xffbf0009ffbfc000, 0xffefffffffffffff, x3, x8, 192, x9)

inst_13:
// rs1==x2, rs2==x13, rd==x12, rs2_val == -2251799813685249, rs1_h0_val == -1, rs1_h2_val == 4096, rs1_h3_val == -8193
// opcode: kslra16 ; op1:x2; op2:x13; dest:x12; op1val:0xdfff1000fffeffff;  op2val:0xfff7ffffffffffff
TEST_PKRR_OP(kslra16, x12, x2, x13, 0x0000000000000000, 0xdfff1000fffeffff, 0xfff7ffffffffffff, x2, x8, 208, x9)

inst_14:
// rs1==x14, rs2==x3, rd==x20, rs2_val == -1125899906842625, 
// opcode: kslra16 ; op1:x14; op2:x3; dest:x20; op1val:0x20fff70009fffa;  op2val:0xfffbffffffffffff
TEST_PKRR_OP(kslra16, x20, x14, x3, 0x0000000000000000, 0x20fff70009fffa, 0xfffbffffffffffff, x14, x8, 224, x9)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_15:
// rs1==x10, rs2==x15, rd==x0, rs2_val == -562949953421313, rs1_h3_val == -257, rs1_h1_val == 128, rs1_h2_val == -2, rs1_h0_val == 256
// opcode: kslra16 ; op1:x10; op2:x15; dest:x0; op1val:0xfefffffe00800100;  op2val:0xfffdffffffffffff
TEST_PKRR_OP(kslra16, x0, x10, x15, 0x0000000000000000, 0xfefffffe00800100, 0xfffdffffffffffff, x10, x3, 0, x11)

inst_16:
// rs1==x6, rs2==x17, rd==x9, rs2_val == -281474976710657, rs1_h1_val == -32768
// opcode: kslra16 ; op1:x6; op2:x17; dest:x9; op1val:0x10fffc80003fff;  op2val:0xfffeffffffffffff
TEST_PKRR_OP(kslra16, x9, x6, x17, 0x0000000000000000, 0x10fffc80003fff, 0xfffeffffffffffff, x6, x3, 16, x11)

inst_17:
// rs1==x17, rs2==x20, rd==x2, rs2_val == -140737488355329, 
// opcode: kslra16 ; op1:x17; op2:x20; dest:x2; op1val:0xff7f00053fff4000;  op2val:0xffff7fffffffffff
TEST_PKRR_OP(kslra16, x2, x17, x20, 0x0000000000000000, 0xff7f00053fff4000, 0xffff7fffffffffff, x17, x3, 32, x11)

inst_18:
// rs1==x7, rs2==x16, rd==x8, rs2_val == -70368744177665, rs1_h2_val == -129
// opcode: kslra16 ; op1:x7; op2:x16; dest:x8; op1val:0xfff8ff7f0009fff8;  op2val:0xffffbfffffffffff
TEST_PKRR_OP(kslra16, x8, x7, x16, 0x0000000000000000, 0xfff8ff7f0009fff8, 0xffffbfffffffffff, x7, x3, 48, x11)

inst_19:
// rs1==x0, rs2==x28, rd==x7, rs2_val == -35184372088833, rs1_h0_val == 16, rs1_h1_val == 16384, rs1_h2_val == -1025
// opcode: kslra16 ; op1:x0; op2:x28; dest:x7; op1val:0xfffafbff40000010;  op2val:0xffffdfffffffffff
TEST_PKRR_OP(kslra16, x7, x0, x28, 0x0000000000000000, 0xfffafbff40000010, 0xffffdfffffffffff, x0, x3, 64, x11)

inst_20:
// rs1==x27, rs2==x8, rd==x14, rs2_val == -17592186044417, rs1_h3_val == -1025
// opcode: kslra16 ; op1:x27; op2:x8; dest:x14; op1val:0xfbfffbffc0000400;  op2val:0xffffefffffffffff
TEST_PKRR_OP(kslra16, x14, x27, x8, 0x0000000000000000, 0xfbfffbffc0000400, 0xffffefffffffffff, x27, x3, 80, x11)

inst_21:
// rs1==x1, rs2==x29, rd==x22, rs2_val == -8796093022209, rs1_h2_val == -5, rs1_h1_val == -4097
// opcode: kslra16 ; op1:x1; op2:x29; dest:x22; op1val:0x00fffbeffffffc;  op2val:0xfffff7ffffffffff
TEST_PKRR_OP(kslra16, x22, x1, x29, 0x0000000000000000, 0x00fffbeffffffc, 0xfffff7ffffffffff, x1, x3, 96, x11)

inst_22:
// rs1==x16, rs2==x26, rd==x29, rs2_val == -4398046511105, rs1_h3_val == -5, rs1_h1_val == 2
// opcode: kslra16 ; op1:x16; op2:x26; dest:x29; op1val:0xfffbfff600020100;  op2val:0xfffffbffffffffff
TEST_PKRR_OP(kslra16, x29, x16, x26, 0x0000000000000000, 0xfffbfff600020100, 0xfffffbffffffffff, x16, x3, 112, x11)

inst_23:
// rs1==x4, rs2==x5, rd==x28, rs2_val == -2199023255553, rs1_h1_val == -1025, rs1_h3_val == 2
// opcode: kslra16 ; op1:x4; op2:x5; dest:x28; op1val:0x02fefffbfffff6;  op2val:0xfffffdffffffffff
TEST_PKRR_OP(kslra16, x28, x4, x5, 0x0000000000000000, 0x02fefffbfffff6, 0xfffffdffffffffff, x4, x3, 128, x11)

inst_24:
// rs1==x20, rs2==x2, rd==x10, rs2_val == -1099511627777, rs1_h3_val == -32768
// opcode: kslra16 ; op1:x20; op2:x2; dest:x10; op1val:0x8000fffcfff60003;  op2val:0xfffffeffffffffff
TEST_PKRR_OP(kslra16, x10, x20, x2, 0x0000000000000000, 0x8000fffcfff60003, 0xfffffeffffffffff, x20, x3, 144, x11)

inst_25:
// rs1==x13, rs2==x14, rd==x31, rs2_val == -549755813889, rs1_h0_val == 128
// opcode: kslra16 ; op1:x13; op2:x14; dest:x31; op1val:0x03c000fffc0080;  op2val:0xffffff7fffffffff
TEST_PKRR_OP(kslra16, x31, x13, x14, 0x0000000000000000, 0x03c000fffc0080, 0xffffff7fffffffff, x13, x3, 160, x11)

inst_26:
// rs1==x25, rs2==x31, rd==x15, rs2_val == -274877906945, rs1_h0_val == -17, rs1_h3_val == 21845, rs1_h2_val == 2048
// opcode: kslra16 ; op1:x25; op2:x31; dest:x15; op1val:0x555508003fffffef;  op2val:0xffffffbfffffffff
TEST_PKRR_OP(kslra16, x15, x25, x31, 0x0000000000000000, 0x555508003fffffef, 0xffffffbfffffffff, x25, x3, 176, x11)

inst_27:
// rs1==x19, rs2==x30, rd==x26, rs2_val == -137438953473, 
// opcode: kslra16 ; op1:x19; op2:x30; dest:x26; op1val:0x030800fffafffa;  op2val:0xffffffdfffffffff
TEST_PKRR_OP(kslra16, x26, x19, x30, 0x0000000000000000, 0x030800fffafffa, 0xffffffdfffffffff, x19, x3, 192, x11)

inst_28:
// rs1==x8, rs2==x4, rd==x13, rs2_val == -68719476737, 
// opcode: kslra16 ; op1:x8; op2:x4; dest:x13; op1val:0x05fffe3fff0005;  op2val:0xffffffefffffffff
TEST_PKRR_OP(kslra16, x13, x8, x4, 0x0000000000000000, 0x05fffe3fff0005, 0xffffffefffffffff, x8, x3, 208, x11)

inst_29:
// rs1==x9, rs2==x12, rd==x1, rs2_val == -34359738369, rs1_h2_val == 8, rs1_h0_val == 0
// opcode: kslra16 ; op1:x9; op2:x12; dest:x1; op1val:0x800000810000000;  op2val:0xfffffff7ffffffff
TEST_PKRR_OP(kslra16, x1, x9, x12, 0x0000000000000000, 0x800000810000000, 0xfffffff7ffffffff, x9, x3, 224, x11)

inst_30:
// rs1==x26, rs2==x9, rd==x6, rs2_val == -17179869185, rs1_h2_val == 0
// opcode: kslra16 ; op1:x26; op2:x9; dest:x6; op1val:0xfff90000fff6fff8;  op2val:0xfffffffbffffffff
TEST_PKRR_OP(kslra16, x6, x26, x9, 0x0000000000000000, 0xfff90000fff6fff8, 0xfffffffbffffffff, x26, x3, 240, x11)

inst_31:
// rs1==x29, rs2==x18, rd==x27, rs2_val == -8589934593, rs1_h2_val == -3
// opcode: kslra16 ; op1:x29; op2:x18; dest:x27; op1val:0xffbffffd0005fff9;  op2val:0xfffffffdffffffff
TEST_PKRR_OP(kslra16, x27, x29, x18, 0x0000000000000000, 0xffbffffd0005fff9, 0xfffffffdffffffff, x29, x3, 256, x11)

inst_32:
// rs2_val == -4294967297, rs1_h1_val == -16385
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffbbfff0005;  op2val:0xfffffffeffffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xffbffffbbfff0005, 0xfffffffeffffffff, x30, x3, 272, x1)

inst_33:
// rs2_val == -2147483649, rs1_h0_val == 2048
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffa00400800;  op2val:0xffffffff7fffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfff9fffa00400800, 0xffffffff7fffffff, x30, x3, 288, x1)

inst_34:
// rs2_val == -1073741825, rs1_h3_val == 32767, rs1_h2_val == 512
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0200ffbfffdf;  op2val:0xffffffffbfffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x7fff0200ffbfffdf, 0xffffffffbfffffff, x30, x3, 304, x1)

inst_35:
// rs2_val == -536870913, rs1_h2_val == -17, rs1_h1_val == 1024, rs1_h3_val == 1
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ffef04003fff;  op2val:0xffffffffdfffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x01ffef04003fff, 0xffffffffdfffffff, x30, x3, 320, x1)

inst_36:
// rs2_val == -268435457, rs1_h0_val == -65
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000fffcbfffffbf;  op2val:0xffffffffefffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xc000fffcbfffffbf, 0xffffffffefffffff, x30, x3, 336, x1)

inst_37:
// rs2_val == -134217729, rs1_h2_val == -2049, rs1_h1_val == -17, rs1_h3_val == 8
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x08f7ffffef0400;  op2val:0xfffffffff7ffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x08f7ffffef0400, 0xfffffffff7ffffff, x30, x3, 352, x1)

inst_38:
// rs2_val == -67108865, rs1_h1_val == -5, rs1_h2_val == -4097
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x10effffffbffff;  op2val:0xfffffffffbffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x10effffffbffff, 0xfffffffffbffffff, x30, x3, 368, x1)

inst_39:
// rs2_val == -33554433, rs1_h2_val == 128
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x0000800005fff6;  op2val:0xfffffffffdffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x0000800005fff6, 0xfffffffffdffffff, x30, x3, 384, x1)

inst_40:
// rs2_val == -16777217, rs1_h2_val == -8193, rs1_h0_val == 4096
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffdffffffb1000;  op2val:0xfffffffffeffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfbffdffffffb1000, 0xfffffffffeffffff, x30, x3, 400, x1)

inst_41:
// rs2_val == -8388609, rs1_h1_val == 32767
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff87ffffbff;  op2val:0xffffffffff7fffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x7ffffff87ffffbff, 0xffffffffff7fffff, x30, x3, 416, x1)

inst_42:
// rs2_val == -4194305, rs1_h2_val == -33
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffdf00800010;  op2val:0xffffffffffbfffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xff7fffdf00800010, 0xffffffffffbfffff, x30, x3, 432, x1)

inst_43:
// rs2_val == -2097153, rs1_h0_val == 8, rs1_h3_val == 4096
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffafffa0008;  op2val:0xffffffffffdfffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x1000fffafffa0008, 0xffffffffffdfffff, x30, x3, 448, x1)

inst_44:
// rs2_val == -1048577, rs1_h1_val == -1
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x080080ffff4000;  op2val:0xffffffffffefffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x080080ffff4000, 0xffffffffffefffff, x30, x3, 464, x1)

inst_45:
// rs2_val == -524289, rs1_h2_val == 16384, rs1_h3_val == -17
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef400000200008;  op2val:0xfffffffffff7ffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xffef400000200008, 0xfffffffffff7ffff, x30, x3, 480, x1)

inst_46:
// rs2_val == -262145, rs1_h1_val == 512
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x10f7ff02000005;  op2val:0xfffffffffffbffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x10f7ff02000005, 0xfffffffffffbffff, x30, x3, 496, x1)

inst_47:
// rs2_val == -131073, rs1_h3_val == -4097
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff020000090000;  op2val:0xfffffffffffdffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xefff020000090000, 0xfffffffffffdffff, x30, x3, 512, x1)

inst_48:
// rs2_val == -65537, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60005fff9fffa;  op2val:0xfffffffffffeffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfff60005fff9fffa, 0xfffffffffffeffff, x30, x3, 528, x1)

inst_49:
// rs2_val == -32769, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff94000bfff0080;  op2val:0xffffffffffff7fff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfff94000bfff0080, 0xffffffffffff7fff, x30, x3, 544, x1)

inst_50:
// rs2_val == -16385, rs1_h0_val == -513
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000071000fdff;  op2val:0xffffffffffffbfff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x1000071000fdff, 0xffffffffffffbfff, x30, x3, 560, x1)

inst_51:
// rs2_val == -8193, rs1_h0_val == -21846, rs1_h2_val == -32768
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff680000008aaaa;  op2val:0xffffffffffffdfff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfff680000008aaaa, 0xffffffffffffdfff, x30, x3, 576, x1)

inst_52:
// rs2_val == -4097, rs1_h3_val == 128
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fffb0002c000;  op2val:0xffffffffffffefff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x80fffb0002c000, 0xffffffffffffefff, x30, x3, 592, x1)

inst_53:
// rs2_val == -2049, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfeff00020000;  op2val:0xfffffffffffff7ff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfffcfeff00020000, 0xfffffffffffff7ff, x30, x3, 608, x1)

inst_54:
// rs2_val == -1025, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffeffffff90009;  op2val:0xfffffffffffffbff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xf7ffeffffff90009, 0xfffffffffffffbff, x30, x3, 624, x1)

inst_55:
// rs2_val == -513, rs1_h1_val == -21846
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x000020aaaa0009;  op2val:0xfffffffffffffdff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x000020aaaa0009, 0xfffffffffffffdff, x30, x3, 640, x1)

inst_56:
// rs2_val == -257, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffff7fff90000;  op2val:0xfffffffffffffeff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfbfffff7fff90000, 0xfffffffffffffeff, x30, x3, 656, x1)

inst_57:
// rs1_h0_val == 512, rs2_val == -6148914691236517206
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x800feff00070200;  op2val:0xaaaaaaaaaaaaaaaa
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x800feff00070200, 0xaaaaaaaaaaaaaaaa, x30, x3, 672, x1)

inst_58:
// rs1_h0_val == 32, rs1_h1_val == -513
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfff6fdff0020;  op2val:0xfffbffffffffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfffcfff6fdff0020, 0xfffbffffffffffff, x30, x3, 688, x1)

inst_59:
// rs1_h0_val == 2, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffff6fffa0002;  op2val:0xfffffbffffffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xdffffff6fffa0002, 0xfffffbffffffffff, x30, x3, 704, x1)

inst_60:
// rs1_h0_val == 1, rs2_val == 281474976710656, rs1_h3_val == -1, rs1_h2_val == 32767
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00020001;  op2val:0x1000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xffff7fff00020001, 0x1000000000000, x30, x3, 720, x1)

inst_61:
// rs2_val == -129, rs1_h2_val == 64, rs1_h0_val == -16385, rs1_h1_val == 16
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x555500400010bfff;  op2val:0xffffffffffffff7f
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x555500400010bfff, 0xffffffffffffff7f, x30, x3, 736, x1)

inst_62:
// rs2_val == -65, rs1_h0_val == -8193, rs1_h2_val == 4
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff90004fdffdfff;  op2val:0xffffffffffffffbf
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfff90004fdffdfff, 0xffffffffffffffbf, x30, x3, 752, x1)

inst_63:
// rs2_val == -33, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0009fbff0010;  op2val:0xffffffffffffffdf
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x7fff0009fbff0010, 0xffffffffffffffdf, x30, x3, 768, x1)

inst_64:
// rs2_val == -17, rs1_h0_val == -3
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x003fff1000fffd;  op2val:0xffffffffffffffef
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x003fff1000fffd, 0xffffffffffffffef, x30, x3, 784, x1)

inst_65:
// rs2_val == -9, rs1_h1_val == 256, rs1_h0_val == 32767
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffc01007fff;  op2val:0xfffffffffffffff7
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xffeffffc01007fff, 0xfffffffffffffff7, x30, x3, 800, x1)

inst_66:
// rs2_val == -5, rs1_h1_val == -3
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0002fffd0800;  op2val:0xfffffffffffffffb
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xffef0002fffd0800, 0xfffffffffffffffb, x30, x3, 816, x1)

inst_67:
// rs2_val == -3, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x06020000040000;  op2val:0xfffffffffffffffd
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x06020000040000, 0xfffffffffffffffd, x30, x3, 832, x1)

inst_68:
// rs2_val == -2, rs1_h3_val == -2
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0080ffefffff;  op2val:0xfffffffffffffffe
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfffe0080ffefffff, 0xfffffffffffffffe, x30, x3, 848, x1)

inst_69:
// rs2_val == -9223372036854775808, rs1_h3_val == -33
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf1000f7fffff9;  op2val:0x8000000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xffdf1000f7fffff9, 0x8000000000000000, x30, x3, 864, x1)

inst_70:
// rs2_val == 4611686018427387904, rs1_h3_val == 8192
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x20007fff1000fffa;  op2val:0x4000000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x20007fff1000fffa, 0x4000000000000000, x30, x3, 880, x1)

inst_71:
// rs2_val == 2305843009213693952, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffc0005ffbf;  op2val:0x2000000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xffeffffc0005ffbf, 0x2000000000000000, x30, x3, 896, x1)

inst_72:
// rs2_val == 1152921504606846976, rs1_h2_val == -1, rs1_h0_val == -32768
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffbf8000;  op2val:0x1000000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xffffffffffbf8000, 0x1000000000000000, x30, x3, 912, x1)

inst_73:
// rs2_val == 576460752303423488, rs1_h3_val == -21846
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000480000200;  op2val:0x800000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xaaaa000480000200, 0x800000000000000, x30, x3, 928, x1)

inst_74:
// rs2_val == 288230376151711744, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x064000aaaa0080;  op2val:0x400000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x064000aaaa0080, 0x400000000000000, x30, x3, 944, x1)

inst_75:
// rs2_val == 144115188075855872, rs1_h3_val == -9
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ff7ffbffdfff;  op2val:0x200000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfff7ff7ffbffdfff, 0x200000000000000, x30, x3, 960, x1)

inst_76:
// rs2_val == 72057594037927936, rs1_h1_val == 8192, rs1_h2_val == 256
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x06010020000010;  op2val:0x100000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x06010020000010, 0x100000000000000, x30, x3, 976, x1)

inst_77:
// rs2_val == 36028797018963968, rs1_h1_val == 1
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000efff0001ff7f;  op2val:0x80000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x8000efff0001ff7f, 0x80000000000000, x30, x3, 992, x1)

inst_78:
// rs2_val == 18014398509481984, rs1_h3_val == 256
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffc0800;  op2val:0x40000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x1000000fffc0800, 0x40000000000000, x30, x3, 1008, x1)

inst_79:
// rs2_val == 9007199254740992, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000400031000;  op2val:0x20000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfffb000400031000, 0x20000000000000, x30, x3, 1024, x1)

inst_80:
// rs2_val == 4503599627370496, rs1_h3_val == 512
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fffb00400080;  op2val:0x10000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x200fffb00400080, 0x10000000000000, x30, x3, 1040, x1)

inst_81:
// rs2_val == 2251799813685248, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x555500202000bfff;  op2val:0x8000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x555500202000bfff, 0x8000000000000, x30, x3, 1056, x1)

inst_82:
// rs2_val == 1125899906842624, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8efffffbfffef;  op2val:0x4000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfff8efffffbfffef, 0x4000000000000, x30, x3, 1072, x1)

inst_83:
// rs2_val == 562949953421312, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9000010003fff;  op2val:0x2000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfff9000010003fff, 0x2000000000000, x30, x3, 1088, x1)

inst_84:
// rs2_val == 140737488355328, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb00073ffffdff;  op2val:0x800000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfffb00073ffffdff, 0x800000000000, x30, x3, 1104, x1)

inst_85:
// rs2_val == 70368744177664, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fff90002fff8;  op2val:0x400000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x200fff90002fff8, 0x400000000000, x30, x3, 1120, x1)

inst_86:
// rs2_val == 35184372088832, rs1_h1_val == -129
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fbffff7f0020;  op2val:0x200000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x10fbffff7f0020, 0x200000000000, x30, x3, 1136, x1)

inst_87:
// rs2_val == 17592186044416, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8efff0400aaaa;  op2val:0x100000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfff8efff0400aaaa, 0x100000000000, x30, x3, 1152, x1)

inst_88:
// rs2_val == 8796093022208, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff71000fffaffbf;  op2val:0x80000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfff71000fffaffbf, 0x80000000000, x30, x3, 1168, x1)

inst_89:
// rs2_val == 4398046511104, rs1_h1_val == 21845
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfc00055553fff;  op2val:0x40000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xffdfc00055553fff, 0x40000000000, x30, x3, 1184, x1)

inst_90:
// rs2_val == 2199023255552, rs1_h2_val == -65
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x06ffbf08000009;  op2val:0x20000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x06ffbf08000009, 0x20000000000, x30, x3, 1200, x1)

inst_91:
// rs2_val == 1099511627776, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff100008002000;  op2val:0x10000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xffff100008002000, 0x10000000000, x30, x3, 1216, x1)

inst_92:
// rs2_val == 1, rs1_h2_val == 21845, rs1_h0_val == 21845
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x01555500025555;  op2val:0x1
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x01555500025555, 0x1, x30, x3, 1232, x1)

inst_93:
// rs1_h3_val == -16385, rs2_val == 8589934592
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff000200012000;  op2val:0x200000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xbfff000200012000, 0x200000000, x30, x3, 1248, x1)

inst_94:
// rs1_h3_val == -513, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff002000040007;  op2val:0xc000000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfdff002000040007, 0xc000000000000000, x30, x3, 1264, x1)

inst_95:
// rs1_h3_val == -3, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffeffffffbff;  op2val:0x4000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfffdffeffffffbff, 0x4000000000000, x30, x3, 1280, x1)

inst_96:
// rs1_h3_val == 16384, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000002ffeffff9;  op2val:0x1000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x40000002ffeffff9, 0x1000000000000, x30, x3, 1296, x1)

inst_97:
// rs2_val == 32, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffefaaaafff9;  op2val:0x20
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xff7fffefaaaafff9, 0x20, x30, x3, 1312, x1)

inst_98:
// rs1_h3_val == 64, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x40f7ffbfffbfff;  op2val:0xfffeffffffffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x40f7ffbfffbfff, 0xfffeffffffffffff, x30, x3, 1328, x1)

inst_99:
// rs1_h3_val == 4, rs2_val == 4294967296
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x040006ffbfdfff;  op2val:0x100000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x040006ffbfdfff, 0x100000000, x30, x3, 1344, x1)

inst_100:
// rs2_val == 64, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf000200030008;  op2val:0x40
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xffbf000200030008, 0x40, x30, x3, 1360, x1)

inst_101:
// rs2_val == 128, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000200ff7fffef;  op2val:0x80
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x1000200ff7fffef, 0x80, x30, x3, 1376, x1)

inst_102:
// rs1_h2_val == -21846, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfaaaa00200800;  op2val:0x200000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xffbfaaaa00200800, 0x200000000000, x30, x3, 1392, x1)

inst_103:
// rs2_val == 2, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffe0020ffef;  op2val:0x2
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x8000fffe0020ffef, 0x2, x30, x3, 1408, x1)

inst_104:
// rs1_h2_val == -16385, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000bfff0001ffef;  op2val:0xfffffffffbffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x2000bfff0001ffef, 0xfffffffffbffffff, x30, x3, 1424, x1)

inst_105:
// rs2_val == 16, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fff90008dfff;  op2val:0x10
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x00fff90008dfff, 0x10, x30, x3, 1440, x1)

inst_106:
// rs1_h2_val == 1, rs2_val == 16384
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0001fff8fffa;  op2val:0x4000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xdfff0001fff8fffa, 0x4000, x30, x3, 1456, x1)

inst_107:
// rs2_val == 4, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x80f7ffbfff0400;  op2val:0x4
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x80f7ffbfff0400, 0x4, x30, x3, 1472, x1)

inst_108:
// rs1_h1_val == -8193, rs2_val == 536870912
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fc000dfff3fff;  op2val:0x20000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xff7fc000dfff3fff, 0x20000000, x30, x3, 1488, x1)

inst_109:
// rs1_h1_val == -257, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffbffeff5555;  op2val:0xfffffdffffffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfffdffbffeff5555, 0xfffffdffffffffff, x30, x3, 1504, x1)

inst_110:
// rs1_h1_val == -33, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x07ff7fffdf0040;  op2val:0xfffffffffdffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x07ff7fffdf0040, 0xfffffffffdffffff, x30, x3, 1520, x1)

inst_111:
// rs1_h1_val == -9, rs2_val == 8388608
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff8000fff7c000;  op2val:0x800000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfbff8000fff7c000, 0x800000, x30, x3, 1536, x1)

inst_112:
// rs2_val == 549755813888, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9f7ffefff0100;  op2val:0x8000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfff9f7ffefff0100, 0x8000000000, x30, x3, 1552, x1)

inst_113:
// rs2_val == 274877906944, rs1_h0_val == -9
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x0000100020fff7;  op2val:0x4000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x0000100020fff7, 0x4000000000, x30, x3, 1568, x1)

inst_114:
// rs2_val == 137438953472, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff6fff70100;  op2val:0x2000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xf7fffff6fff70100, 0x2000000000, x30, x3, 1584, x1)

inst_115:
// rs2_val == 68719476736, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0004fff60100;  op2val:0x1000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfffa0004fff60100, 0x1000000000, x30, x3, 1600, x1)

inst_116:
// rs2_val == 34359738368, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffdffbf0100;  op2val:0x800000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfffafffdffbf0100, 0x800000000, x30, x3, 1616, x1)

inst_117:
// rs2_val == 17179869184, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffffdffffff;  op2val:0x400000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x4000fffffdffffff, 0x400000000, x30, x3, 1632, x1)

inst_118:
// rs2_val == 2147483648, rs1_h0_val == -5
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0400fff7fffb;  op2val:0x80000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfdff0400fff7fffb, 0x80000000, x30, x3, 1648, x1)

inst_119:
// rs2_val == 1073741824, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffa04000009;  op2val:0x40000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xff7ffffa04000009, 0x40000000, x30, x3, 1664, x1)

inst_120:
// rs2_val == 268435456, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffcdfffffdf;  op2val:0x10000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfffcfffcdfffffdf, 0x10000000, x30, x3, 1680, x1)

inst_121:
// rs2_val == 134217728, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00092000fbff;  op2val:0x8000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfdff00092000fbff, 0x8000000, x30, x3, 1696, x1)

inst_122:
// rs2_val == 67108864, rs1_h0_val == -2049
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x030009bffff7ff;  op2val:0x4000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x030009bffff7ff, 0x4000000, x30, x3, 1712, x1)

inst_123:
// rs2_val == 33554432, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x0880000007fff9;  op2val:0x2000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x0880000007fff9, 0x2000000, x30, x3, 1728, x1)

inst_124:
// rs2_val == 16777216, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x55551000fff72000;  op2val:0x1000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x55551000fff72000, 0x1000000, x30, x3, 1744, x1)

inst_125:
// rs2_val == 4194304, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fff71000aaaa;  op2val:0x400000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfff9fff71000aaaa, 0x400000, x30, x3, 1760, x1)

inst_126:
// rs1_h1_val == 0, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x80003fff0000ffff;  op2val:0x1000000000000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x80003fff0000ffff, 0x1000000000000000, x30, x3, 1776, x1)

inst_127:
// rs2_val == 2097152, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x01000400040000;  op2val:0x200000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x01000400040000, 0x200000, x30, x3, 1792, x1)

inst_128:
// rs2_val == 1048576, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb00800040f7ff;  op2val:0x100000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfffb00800040f7ff, 0x100000, x30, x3, 1808, x1)

inst_129:
// rs2_val == 524288, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff08000008fbff;  op2val:0x80000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xdfff08000008fbff, 0x80000, x30, x3, 1824, x1)

inst_130:
// rs2_val == 262144, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffa1000fffb;  op2val:0x40000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x5555fffa1000fffb, 0x40000, x30, x3, 1840, x1)

inst_131:
// rs2_val == 131072, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x10007fff7fff0040;  op2val:0x20000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x10007fff7fff0040, 0x20000, x30, x3, 1856, x1)

inst_132:
// rs2_val == 65536, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000810001000;  op2val:0x10000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x7fff000810001000, 0x10000, x30, x3, 1872, x1)

inst_133:
// rs2_val == 32768, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0000dfff0002;  op2val:0x8000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfffb0000dfff0002, 0x8000, x30, x3, 1888, x1)

inst_134:
// rs1_h0_val == -4097, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff95555bfffefff;  op2val:0xffefffffffffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfff95555bfffefff, 0xffefffffffffffff, x30, x3, 1904, x1)

inst_135:
// rs2_val == 8192, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfff7ff0400fdff;  op2val:0x2000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfdfff7ff0400fdff, 0x2000, x30, x3, 1920, x1)

inst_136:
// rs2_val == 4096, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff55558000fff6;  op2val:0x1000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfbff55558000fff6, 0x1000, x30, x3, 1936, x1)

inst_137:
// rs2_val == 2048, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0010aaaa0040;  op2val:0x800
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfffe0010aaaa0040, 0x800, x30, x3, 1952, x1)

inst_138:
// rs1_h0_val == -257, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0004fff8feff;  op2val:0x10000000
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xffdf0004fff8feff, 0x10000000, x30, x3, 1968, x1)

inst_139:
// rs2_val == 1024, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0008f7fffff7;  op2val:0x400
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfbff0008f7fffff7, 0x400, x30, x3, 1984, x1)

inst_140:
// rs2_val == 256, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x40fffd0010ffff;  op2val:0x100
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x40fffd0010ffff, 0x100, x30, x3, 2000, x1)

inst_141:
// rs2_val == 8, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x0101004000fbff;  op2val:0x8
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x0101004000fbff, 0x8, x30, x3, 2016, x1)

inst_142:
// rs1_h0_val == -2, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000f7ff0100fffe;  op2val:0xfffffffeffffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x1000f7ff0100fffe, 0xfffffffeffffffff, x30, x3, 2032, x1)
RVTEST_SIGBASE(x3,signature_x3_1)

inst_143:
// rs2_val == 512, 
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffbfffffbff7f;  op2val:0x200
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xf7fffbfffffbff7f, 0x200, x30, x3, 0, x1)
RVTEST_SIGBASE(x3,signature_x3_2)

inst_144:
// rs2_val == 9223372036854775807, rs1_h1_val == 32, rs1_h0_val == -129
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffafff60020ff7f;  op2val:0x7fffffffffffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfffafff60020ff7f, 0x7fffffffffffffff, x30, x3, 0, x1)

inst_145:
// rs2_val == -4611686018427387905, rs1_h1_val == 4, rs1_h3_val == -129
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffff60004c000;  op2val:0xbfffffffffffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xff7ffff60004c000, 0xbfffffffffffffff, x30, x3, 16, x1)

inst_146:
// rs2_val == -2305843009213693953, rs1_h0_val == 4, rs1_h3_val == 0, rs1_h1_val == 64, rs1_h2_val == -9
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fff700400004;  op2val:0xdfffffffffffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0x00fff700400004, 0xdfffffffffffffff, x30, x3, 32, x1)

inst_147:
// rs2_val == -562949953421313, rs1_h3_val == -257, rs1_h1_val == 128, rs1_h2_val == -2, rs1_h0_val == 256
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffe00800100;  op2val:0xfffdffffffffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfefffffe00800100, 0xfffdffffffffffff, x30, x3, 48, x1)

inst_148:
// rs2_val == -35184372088833, rs1_h0_val == 16, rs1_h1_val == 16384, rs1_h2_val == -1025
// opcode: kslra16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffafbff40000010;  op2val:0xffffdfffffffffff
TEST_PKRR_OP(kslra16, x31, x30, x29, 0x0000000000000000, 0xfffafbff40000010, 0xffffdfffffffffff, x30, x3, 64, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x3_2:
    .fill 10*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
