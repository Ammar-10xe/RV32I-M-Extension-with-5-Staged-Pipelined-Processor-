
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kcrsa16 instruction of the RISC-V RV64PZicsr extension for the kcrsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kcrsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:// rs1 == rd != rs2, rs1==x21, rs2==x19, rd==x21, rs1_h0_val == -32768, rs1_h3_val == 1024, rs1_h3_val != rs2_h3_val, rs2_h2_val == -513, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs2_h0_val == 32767, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs2_h3_val == 128, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h2_val == -257, rs1_h1_val == -65
// opcode: kcrsa16 ; op1:x21; op2:x19; dest:x21; op1val:0x400feffffbf8000;  op2val:0x80fdff3fff7fff
TEST_RR_OP(kcrsa16, x21, x21, x19, 0x0000000000000000, 0x400feffffbf8000, 0x80fdff3fff7fff, x9, 0, x23)

inst_1:// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x3, rs2==x24, rd==x8, rs1_h3_val == rs2_h3_val, rs2_h2_val == -16385, rs2_h0_val == 8, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h3_val == 16384, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -1, rs1_h0_val == -16385, rs1_h3_val == 16384
// opcode: kcrsa16 ; op1:x3; op2:x24; dest:x8; op1val:0x40000007ffffbfff;  op2val:0x4000bffffffc0008
TEST_RR_OP(kcrsa16, x8, x3, x24, 0x0000000000000000, 0x40000007ffffbfff, 0x4000bffffffc0008, x9, 16, x23)

inst_2:// rs1 == rs2 != rd, rs1==x20, rs2==x20, rd==x25, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h0_val == -9, rs2_h2_val == -65, rs1_h1_val == 256, rs2_h0_val == -1025, rs1_h3_val == -4097, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val < 0
// opcode: kcrsa16 ; op1:x20; op2:x20; dest:x25; op1val:0xeffffeff0100fff7;  op2val:0x06ffbf0003fbff
TEST_RR_OP(kcrsa16, x25, x20, x20, 0x0000000000000000, 0xeffffeff0100fff7, 0x06ffbf0003fbff, x9, 32, x23)

inst_3:// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h0_val == -129, rs2_h3_val == -257, rs2_h1_val == -2049
// opcode: kcrsa16 ; op1:x6; op2:x6; dest:x6; op1val:0xfffc0003fff6fff6;  op2val:0xfefffff9f7ffff7f
TEST_RR_OP(kcrsa16, x6, x6, x6, 0x0000000000000000, 0xfffc0003fff6fff6, 0xfefffff9f7ffff7f, x9, 48, x23)

inst_4:// rs2 == rd != rs1, rs1==x11, rs2==x17, rd==x17, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h0_val == -21846, rs1_h3_val == 32767, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == -33, rs1_h2_val == 21845, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val == 2, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: kcrsa16 ; op1:x11; op2:x17; dest:x17; op1val:0x7fff555500030002;  op2val:0xc0003fffffdfaaaa
TEST_RR_OP(kcrsa16, x17, x11, x17, 0x0000000000000000, 0x7fff555500030002, 0xc0003fffffdfaaaa, x9, 64, x23)

inst_5:// rs1==x10, rs2==x18, rd==x3, rs1_h2_val == rs2_h2_val, rs1_h1_val == -5, rs2_h3_val == -5, rs1_h3_val == 0, rs1_h2_val == -513, rs1_h0_val == -2049
// opcode: kcrsa16 ; op1:x10; op2:x18; dest:x3; op1val:0x00fdfffffbf7ff;  op2val:0xfffbfdfffff8fff8
TEST_RR_OP(kcrsa16, x3, x10, x18, 0x0000000000000000, 0x00fdfffffbf7ff, 0xfffbfdfffff8fff8, x9, 80, x23)

inst_6:// rs1==x4, rs2==x25, rd==x18, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h0_val == -2, rs2_h3_val == -9, rs1_h3_val == -16385, rs1_h2_val == -1, rs2_h0_val == -5, rs2_h2_val == 32, rs1_h1_val == -129, rs2_h1_val == 64
// opcode: kcrsa16 ; op1:x4; op2:x25; dest:x18; op1val:0xbfffffffff7ffffe;  op2val:0xfff700200040fffb
TEST_RR_OP(kcrsa16, x18, x4, x25, 0x0000000000000000, 0xbfffffffff7ffffe, 0xfff700200040fffb, x9, 96, x23)

inst_7:// rs1==x14, rs2==x0, rd==x2, rs1_h1_val == rs2_h1_val, rs2_h0_val == -33, rs2_h2_val == -2049, rs1_h3_val == -33, rs2_h3_val == -17
// opcode: kcrsa16 ; op1:x14; op2:x0; dest:x2; op1val:0xffdf3ffffffcfffa;  op2val:0xffeff7fffffcffdf
TEST_RR_OP(kcrsa16, x2, x14, x0, 0x0000000000000000, 0xffdf3ffffffcfffa, 0xffeff7fffffcffdf, x9, 112, x23)

inst_8:// rs1==x27, rs2==x13, rd==x1, rs1_h0_val == rs2_h0_val, rs2_h0_val == 16, rs2_h2_val == -257, rs2_h3_val == 512, rs1_h0_val == 16, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == -2
// opcode: kcrsa16 ; op1:x27; op2:x13; dest:x1; op1val:0x09fffe00090010;  op2val:0x200fefff7ff0010
TEST_RR_OP(kcrsa16, x1, x27, x13, 0x0000000000000000, 0x09fffe00090010, 0x200fefff7ff0010, x9, 128, x23)

inst_9:// rs1==x2, rs2==x3, rd==x12, rs2_h3_val == -21846, rs2_h1_val == 2, rs1_h0_val == 256, rs1_h2_val == -21846, rs2_h2_val == -32768
// opcode: kcrsa16 ; op1:x2; op2:x3; dest:x12; op1val:0xefffaaaa3fff0100;  op2val:0xaaaa800000020005
TEST_RR_OP(kcrsa16, x12, x2, x3, 0x0000000000000000, 0xefffaaaa3fff0100, 0xaaaa800000020005, x9, 144, x23)

inst_10:// rs1==x17, rs2==x15, rd==x0, rs2_h3_val == 21845, rs2_h0_val == 64, rs1_h1_val == 64, rs2_h2_val == -5, rs2_h1_val == -9, rs1_h2_val == -3
// opcode: kcrsa16 ; op1:x17; op2:x15; dest:x0; op1val:0x06fffd0040f7ff;  op2val:0x5555fffbfff70040
TEST_RR_OP(kcrsa16, x0, x17, x15, 0x0000000000000000, 0x06fffd0040f7ff, 0x5555fffbfff70040, x9, 160, x23)

inst_11:// rs1==x16, rs2==x11, rd==x28, rs2_h3_val == 32767, rs1_h0_val == 8192
// opcode: kcrsa16 ; op1:x16; op2:x11; dest:x28; op1val:0x00fffa00062000;  op2val:0x7ffffff6f7ff0006
TEST_RR_OP(kcrsa16, x28, x16, x11, 0x0000000000000000, 0x00fffa00062000, 0x7ffffff6f7ff0006, x9, 176, x23)

inst_12:// rs1==x24, rs2==x7, rd==x22, rs2_h3_val == -16385, rs1_h2_val == -1025, rs1_h1_val == -33, rs2_h0_val == -257
// opcode: kcrsa16 ; op1:x24; op2:x7; dest:x22; op1val:0xbffffbffffdf0010;  op2val:0xbffffdfffffcfeff
TEST_RR_OP(kcrsa16, x22, x24, x7, 0x0000000000000000, 0xbffffbffffdf0010, 0xbffffdfffffcfeff, x9, 192, x23)

inst_13:// rs1==x15, rs2==x5, rd==x30, rs2_h3_val == -8193, rs2_h1_val == -257, rs1_h0_val == 21845, rs2_h0_val == -2, rs1_h2_val == -32768
// opcode: kcrsa16 ; op1:x15; op2:x5; dest:x30; op1val:0xfff6800000405555;  op2val:0xdfff0005fefffffe
TEST_RR_OP(kcrsa16, x30, x15, x5, 0x0000000000000000, 0xfff6800000405555, 0xdfff0005fefffffe, x9, 208, x23)

inst_14:// rs1==x5, rs2==x22, rd==x27, rs2_h3_val == -4097, rs2_h2_val == 16384, rs1_h1_val == -257, rs1_h2_val == -9
// opcode: kcrsa16 ; op1:x5; op2:x22; dest:x27; op1val:0xfff8fff7fefffff8;  op2val:0xefff4000f7ff0007
TEST_RR_OP(kcrsa16, x27, x5, x22, 0x0000000000000000, 0xfff8fff7fefffff8, 0xefff4000f7ff0007, x9, 224, x6)

inst_15:// rs1==x28, rs2==x23, rd==x14, rs2_h3_val == -2049, rs1_h3_val == 512, rs1_h2_val == 4
// opcode: kcrsa16 ; op1:x28; op2:x23; dest:x14; op1val:0x20000040009fffc;  op2val:0xf7fffffcfffc3fff
TEST_RR_OP(kcrsa16, x14, x28, x23, 0x0000000000000000, 0x20000040009fffc, 0xf7fffffcfffc3fff, x9, 240, x6)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_16:// rs1==x13, rs2==x30, rd==x23, rs2_h3_val == -1025, rs1_h2_val == -4097, rs2_h1_val == -2, rs2_h2_val == -3
// opcode: kcrsa16 ; op1:x13; op2:x30; dest:x23; op1val:0x03effffffb0100;  op2val:0xfbfffffdfffeff7f
TEST_RR_OP(kcrsa16, x23, x13, x30, 0x0000000000000000, 0x03effffffb0100, 0xfbfffffdfffeff7f, x3, 0, x6)

inst_17:// rs1==x26, rs2==x21, rd==x7, rs2_h3_val == -513, rs1_h2_val == 64, rs2_h1_val == -17, rs1_h1_val == 2048
// opcode: kcrsa16 ; op1:x26; op2:x21; dest:x7; op1val:0xbfff004008002000;  op2val:0xfdff0003ffeffffc
TEST_RR_OP(kcrsa16, x7, x26, x21, 0x0000000000000000, 0xbfff004008002000, 0xfdff0003ffeffffc, x3, 16, x6)

inst_18:// rs1==x18, rs2==x8, rd==x24, rs2_h3_val == -129, rs2_h1_val == -16385, rs2_h0_val == 2, rs1_h3_val == -21846, rs2_h2_val == -17, rs1_h1_val == -16385, rs1_h2_val == -65
// opcode: kcrsa16 ; op1:x18; op2:x8; dest:x24; op1val:0xaaaaffbfbffffffc;  op2val:0xff7fffefbfff0002
TEST_RR_OP(kcrsa16, x24, x18, x8, 0x0000000000000000, 0xaaaaffbfbffffffc, 0xff7fffefbfff0002, x3, 32, x6)

inst_19:// rs1==x22, rs2==x14, rd==x5, rs2_h3_val == -65, rs1_h0_val == -513
// opcode: kcrsa16 ; op1:x22; op2:x14; dest:x5; op1val:0xefff3ffffff8fdff;  op2val:0xffbffffc3fff3fff
TEST_RR_OP(kcrsa16, x5, x22, x14, 0x0000000000000000, 0xefff3ffffff8fdff, 0xffbffffc3fff3fff, x3, 48, x6)

inst_20:// rs1==x30, rs2==x31, rd==x9, rs2_h3_val == -33, rs2_h1_val == -21846, rs1_h2_val == 2048, rs1_h0_val == 16384, rs2_h2_val == 256, rs2_h0_val == 256
// opcode: kcrsa16 ; op1:x30; op2:x31; dest:x9; op1val:0xaaaa0800fff84000;  op2val:0xffdf0100aaaa0100
TEST_RR_OP(kcrsa16, x9, x30, x31, 0x0000000000000000, 0xaaaa0800fff84000, 0xffdf0100aaaa0100, x3, 64, x6)

inst_21:// rs1==x0, rs2==x28, rd==x31, rs2_h3_val == -3, rs1_h2_val == -16385, rs2_h1_val == -32768, rs1_h0_val == -8193, rs1_h3_val == 4096, rs2_h2_val == 0
// opcode: kcrsa16 ; op1:x0; op2:x28; dest:x31; op1val:0x1000bfff0009dfff;  op2val:0xfffd000080000005
TEST_RR_OP(kcrsa16, x31, x0, x28, 0x0000000000000000, 0x1000bfff0009dfff, 0xfffd000080000005, x3, 80, x6)

inst_22:// rs1==x25, rs2==x12, rd==x4, rs2_h3_val == -2, rs1_h3_val == 21845, rs2_h1_val == -65, rs1_h2_val == -8193, rs1_h0_val == 4, rs2_h0_val == -3
// opcode: kcrsa16 ; op1:x25; op2:x12; dest:x4; op1val:0x5555dfff00060004;  op2val:0xfffefff8ffbffffd
TEST_RR_OP(kcrsa16, x4, x25, x12, 0x0000000000000000, 0x5555dfff00060004, 0xfffefff8ffbffffd, x3, 96, x6)

inst_23:// rs1==x23, rs2==x26, rd==x10, rs2_h3_val == -32768, rs2_h0_val == 4096, rs1_h2_val == 8, rs1_h1_val == 32767, rs2_h2_val == -129
// opcode: kcrsa16 ; op1:x23; op2:x26; dest:x10; op1val:0xffdf00087fff0005;  op2val:0x8000ff7ffffe1000
TEST_RR_OP(kcrsa16, x10, x23, x26, 0x0000000000000000, 0xffdf00087fff0005, 0x8000ff7ffffe1000, x3, 112, x6)

inst_24:// rs1==x9, rs2==x16, rd==x20, rs2_h3_val == 8192, rs1_h0_val == -65, rs2_h0_val == 32, rs2_h2_val == 8, rs1_h3_val == 32
// opcode: kcrsa16 ; op1:x9; op2:x16; dest:x20; op1val:0x20dffffeffffbf;  op2val:0x20000008c0000020
TEST_RR_OP(kcrsa16, x20, x9, x16, 0x0000000000000000, 0x20dffffeffffbf, 0x20000008c0000020, x3, 128, x6)

inst_25:// rs1==x8, rs2==x1, rd==x13, rs2_h3_val == 4096, rs1_h1_val == 1024, rs2_h1_val == 16
// opcode: kcrsa16 ; op1:x8; op2:x1; dest:x13; op1val:0xaaaa00080400fffa;  op2val:0x1000c0000010fffa
TEST_RR_OP(kcrsa16, x13, x8, x1, 0x0000000000000000, 0xaaaa00080400fffa, 0x1000c0000010fffa, x3, 144, x6)

inst_26:// rs1==x12, rs2==x27, rd==x26, rs2_h3_val == 2048, rs1_h0_val == 8, rs2_h2_val == 512
// opcode: kcrsa16 ; op1:x12; op2:x27; dest:x26; op1val:0xfffc000600090008;  op2val:0x8000200f7ff3fff
TEST_RR_OP(kcrsa16, x26, x12, x27, 0x0000000000000000, 0xfffc000600090008, 0x8000200f7ff3fff, x3, 160, x6)

inst_27:// rs1==x1, rs2==x2, rd==x29, rs2_h3_val == 1024, rs2_h2_val == 4096, rs1_h3_val == -32768, rs1_h2_val == 1
// opcode: kcrsa16 ; op1:x1; op2:x2; dest:x29; op1val:0x80000001ffdf0002;  op2val:0x4001000fff9fff8
TEST_RR_OP(kcrsa16, x29, x1, x2, 0x0000000000000000, 0x80000001ffdf0002, 0x4001000fff9fff8, x3, 176, x6)

inst_28:// rs1==x7, rs2==x10, rd==x15, rs2_h3_val == 256, rs2_h2_val == 128
// opcode: kcrsa16 ; op1:x7; op2:x10; dest:x15; op1val:0xfff6efff00030100;  op2val:0x1000080ffdf0020
TEST_RR_OP(kcrsa16, x15, x7, x10, 0x0000000000000000, 0xfff6efff00030100, 0x1000080ffdf0020, x3, 192, x6)

inst_29:// rs1==x29, rs2==x4, rd==x19, rs2_h3_val == 64, rs1_h2_val == 8192
// opcode: kcrsa16 ; op1:x29; op2:x4; dest:x19; op1val:0xbfff2000ffdffffe;  op2val:0x40fff60003fff8
TEST_RR_OP(kcrsa16, x19, x29, x4, 0x0000000000000000, 0xbfff2000ffdffffe, 0x40fff60003fff8, x3, 208, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:// rs1==x19, rs2==x29, rd==x16, rs2_h3_val == 32, rs1_h3_val == -257, rs1_h1_val == 16384, rs1_h0_val == -21846, rs2_h0_val == 128
// opcode: kcrsa16 ; op1:x19; op2:x29; dest:x16; op1val:0xfeff08004000aaaa;  op2val:0x200100fff70080
TEST_RR_OP(kcrsa16, x16, x19, x29, 0x0000000000000000, 0xfeff08004000aaaa, 0x200100fff70080, x1, 0, x2)

inst_31:// rs1==x31, rs2==x9, rd==x11, rs2_h3_val == 16, rs1_h1_val == 128, rs1_h2_val == 2, rs2_h1_val == -5, rs2_h2_val == 1024, rs1_h3_val == -2
// opcode: kcrsa16 ; op1:x31; op2:x9; dest:x11; op1val:0xfffe000200804000;  op2val:0x100400fffbfeff
TEST_RR_OP(kcrsa16, x11, x31, x9, 0x0000000000000000, 0xfffe000200804000, 0x100400fffbfeff, x1, 16, x2)

inst_32:// rs2_h3_val == 8, rs2_h1_val == -1025, rs1_h0_val == 64, rs1_h3_val == -2049, rs2_h0_val == 16384, rs1_h2_val == -5
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffb00400040;  op2val:0x080008fbff4000
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xf7fffffb00400040, 0x080008fbff4000, x1, 32, x2)

inst_33:// rs2_h3_val == 4, rs1_h1_val == -8193, rs1_h2_val == -129
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffff7fdffffdff;  op2val:0x04002000060020
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x3fffff7fdffffdff, 0x04002000060020, x1, 48, x2)

inst_34:// rs2_h3_val == 2, rs1_h3_val == 4
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fffbfff90003;  op2val:0x02fdff0003feff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x04fffbfff90003, 0x02fdff0003feff, x1, 64, x2)

inst_35:// rs2_h3_val == 1, rs2_h1_val == 512, rs1_h0_val == 1, rs1_h1_val == 16
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fffb00100001;  op2val:0x01ff7f0200fff6
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x04fffb00100001, 0x01ff7f0200fff6, x1, 80, x2)

inst_36:// rs2_h3_val == 0, rs2_h0_val == -65, rs2_h1_val == -4097
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff6fff60040;  op2val:0x004000efffffbf
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x4000fff6fff60040, 0x004000efffffbf, x1, 96, x2)

inst_37:// rs1_h1_val == -3, rs2_h2_val == 8192, rs2_h0_val == -8193, rs2_h1_val == 16384, rs1_h0_val == 128
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffbffffd0080;  op2val:0xfffe20004000dfff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffeffbffffd0080, 0xfffe20004000dfff, x1, 112, x2)

inst_38:// rs1_h1_val == -2, rs1_h0_val == 4096, rs2_h2_val == 2048, rs2_h0_val == -513, rs1_h3_val == -8193
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffff7ffffe1000;  op2val:0x000800c000fdff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xdfffff7ffffe1000, 0x000800c000fdff, x1, 128, x2)

inst_39:// rs1_h1_val == -32768, rs2_h2_val == -1, rs2_h1_val == -8193, rs1_h2_val == 128
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff00808000c000;  op2val:0xffbfffffdfff0007
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x7fff00808000c000, 0xffbfffffdfff0007, x1, 144, x2)

inst_40:// rs1_h1_val == 8192, rs1_h2_val == 16384
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0340002000fff7;  op2val:0x01fff6fbff0009
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x0340002000fff7, 0x01fff6fbff0009, x1, 160, x2)

inst_41:// rs1_h1_val == 4096, rs1_h0_val == -5
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000401000fffb;  op2val:0xfffcffff3fffff7f
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x40000401000fffb, 0xfffcffff3fffff7f, x1, 176, x2)

inst_42:// rs1_h1_val == 512, rs2_h1_val == 0
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffff7f02000040;  op2val:0xfffdffff0000fffd
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xbfffff7f02000040, 0xfffdffff0000fffd, x1, 192, x2)

inst_43:// rs1_h1_val == 32, rs2_h2_val == -33, rs2_h0_val == 21845, rs2_h1_val == -3, rs1_h3_val == 8
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x08bfff0020c000;  op2val:0xfffbffdffffd5555
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x08bfff0020c000, 0xfffbffdffffd5555, x1, 208, x2)

inst_44:// rs1_h1_val == 8, rs2_h1_val == -513, rs1_h3_val == -1, rs1_h2_val == 0
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff000000080007;  op2val:0x80000080fdfffff9
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xffff000000080007, 0x80000080fdfffff9, x1, 224, x2)

inst_45:// rs1_h1_val == 4, rs1_h0_val == 32, rs1_h2_val == -17
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffef00040020;  op2val:0x800000060006fff6
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xefffffef00040020, 0x800000060006fff6, x1, 240, x2)

inst_46:// rs1_h1_val == 2, rs2_h1_val == 128
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000100020080;  op2val:0xfff7fffa0080fffb
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x1000000100020080, 0xfff7fffa0080fffb, x1, 256, x2)

inst_47:// rs1_h1_val == 1, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa00030001fff7;  op2val:0x40fff9ffbffffc
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xaaaa00030001fff7, 0x40fff9ffbffffc, x1, 272, x2)

inst_48:// rs1_h1_val == 0, rs2_h0_val == -1
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffefff0000bfff;  op2val:0xbffffff60040ffff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xfeffefff0000bfff, 0xbffffff60040ffff, x1, 288, x2)

inst_49:// rs1_h0_val == 32767, rs2_h0_val == 2048
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000900077fff;  op2val:0xfdfffdffffdf0800
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x7fff000900077fff, 0xfdfffdffffdf0800, x1, 304, x2)

inst_50:// rs1_h0_val == -4097, rs2_h0_val == -17, rs1_h3_val == 16
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000080100efff;  op2val:0x7fffc0000002ffef
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x1000080100efff, 0x7fffc0000002ffef, x1, 320, x2)

inst_51:// rs1_h0_val == -1025, rs1_h3_val == -129, rs1_h1_val == -17
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0000ffeffbff;  op2val:0x06bffffffdaaaa
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xff7f0000ffeffbff, 0x06bffffffdaaaa, x1, 336, x2)

inst_52:// rs1_h0_val == -257, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfbfff0009feff;  op2val:0xfbff00800000ffbf
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xffdfbfff0009feff, 0xfbff00800000ffbf, x1, 352, x2)

inst_53:// rs1_h0_val == -129, rs2_h1_val == 1
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffac000ff7f;  op2val:0x4000080000010006
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xfff6fffac000ff7f, 0x4000080000010006, x1, 368, x2)

inst_54:// rs1_h0_val == -33, rs1_h3_val == 1
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0100097fffffdf;  op2val:0x07c000fff70080
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x0100097fffffdf, 0x07c000fff70080, x1, 384, x2)

inst_55:// rs1_h0_val == -17, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fff7fff8ffef;  op2val:0xfefffeffffdffeff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x03fff7fff8ffef, 0xfefffeffffdffeff, x1, 400, x2)

inst_56:// rs1_h0_val == -3, rs1_h1_val == -2049
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffaf7fffffd;  op2val:0xfffdfff9fff70010
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x1000fffaf7fffffd, 0xfffdfff9fff70010, x1, 416, x2)

inst_57:// rs1_h0_val == 2048, rs2_h2_val == 21845
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20ff7ffff60800;  op2val:0x085555fffa0020
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x20ff7ffff60800, 0x085555fffa0020, x1, 432, x2)

inst_58:// rs1_h0_val == 1024, rs1_h3_val == -5, rs1_h2_val == 512
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0200feff0400;  op2val:0x805555ffbffbff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffb0200feff0400, 0x805555ffbffbff, x1, 448, x2)

inst_59:// rs1_h0_val == 512, rs2_h2_val == 64, rs1_h3_val == 2, rs1_h2_val == 32
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x02002080000200;  op2val:0xfbff0040fdff7fff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x02002080000200, 0xfbff0040fdff7fff, x1, 464, x2)

inst_60:// rs1_h0_val == 0, rs1_h2_val == 4096, rs1_h1_val == -9, rs2_h1_val == 32, rs2_h0_val == 0
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10001000fff70000;  op2val:0xfff8800000200000
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x10001000fff70000, 0xfff8800000200000, x1, 480, x2)

inst_61:// rs2_h1_val == 4, rs1_h3_val == -65
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf3ffffffa0200;  op2val:0x100001000004fff6
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xffbf3ffffffa0200, 0x100001000004fff6, x1, 496, x2)

inst_62:// rs2_h1_val == -1, rs2_h2_val == 4
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0003ffef0040;  op2val:0x8000004ffff4000
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffa0003ffef0040, 0x8000004ffff4000, x1, 512, x2)

inst_63:// rs2_h0_val == -16385, rs1_h3_val == 8192
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20002000fff9fff7;  op2val:0xff7ffffbffefbfff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x20002000fff9fff7, 0xff7ffffbffefbfff, x1, 528, x2)

inst_64:// rs2_h0_val == -4097, rs1_h1_val == -513
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x082000fdfffeff;  op2val:0xffdffffa4000efff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x082000fdfffeff, 0xffdffffa4000efff, x1, 544, x2)

inst_65:// rs2_h0_val == -2049, rs1_h3_val == -3
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd8000fff70080;  op2val:0xfff700038000f7ff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffd8000fff70080, 0xfff700038000f7ff, x1, 560, x2)

inst_66:// rs2_h0_val == -9, rs1_h2_val == -2049
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ff7ff0005efff;  op2val:0xfffdfffb0003fff7
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xff7ff7ff0005efff, 0xfffdfffb0003fff7, x1, 576, x2)

inst_67:// rs2_h0_val == -32768, rs2_h2_val == 16
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000ff7f04000003;  op2val:0xfffb001000408000
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x4000ff7f04000003, 0xfffb001000408000, x1, 592, x2)

inst_68:// rs2_h0_val == 8192, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x030000ffefefff;  op2val:0x7fff0003aaaa2000
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x030000ffefefff, 0x7fff0003aaaa2000, x1, 608, x2)

inst_69:// rs2_h0_val == 1024, rs2_h1_val == 256
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffe0080fffa;  op2val:0xefff080001000400
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xdffffffe0080fffa, 0xefff080001000400, x1, 624, x2)

inst_70:// rs2_h0_val == 512, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000fbff20000010;  op2val:0xfdfffdfffdff0200
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xc000fbff20000010, 0xfdfffdfffdff0200, x1, 640, x2)

inst_71:// rs2_h0_val == 4, rs2_h1_val == 1024
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffff7fffffe8000;  op2val:0x03004004000004
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xeffff7fffffe8000, 0x03004004000004, x1, 656, x2)

inst_72:// rs2_h0_val == 1, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffeffffdfffb;  op2val:0xfff7ffdffff90001
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xefffffeffffdfffb, 0xfff7ffdffff90001, x1, 672, x2)

inst_73:// rs1_h3_val == -1025, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffff980000005;  op2val:0x07c0000020bfff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xfbfffff980000005, 0x07c0000020bfff, x1, 688, x2)

inst_74:// rs1_h3_val == -513, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff5555fffb5555;  op2val:0x02ffdf0001fffd
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xfdff5555fffb5555, 0x02ffdf0001fffd, x1, 704, x2)

inst_75:// rs1_h3_val == -17, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef008000000040;  op2val:0x555540000003feff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xffef008000000040, 0x555540000003feff, x1, 720, x2)

inst_76:// rs1_h0_val == -1, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffef7fffffff;  op2val:0x07fff60010fff6
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xffefffef7fffffff, 0x07fff60010fff6, x1, 736, x2)

inst_77:// rs1_h3_val == 2048, rs2_h1_val == 21845, rs2_h2_val == -21846
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000004feff0800;  op2val:0xfff7aaaa5555fff6
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x8000004feff0800, 0xfff7aaaa5555fff6, x1, 752, x2)

inst_78:// rs2_h2_val == -8193, rs1_h1_val == -1025, rs1_h2_val == 256, rs2_h1_val == 2048
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000100fbff0004;  op2val:0xfff7dfff08000020
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x4000100fbff0004, 0xfff7dfff08000020, x1, 768, x2)

inst_79:// rs2_h2_val == -4097, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x09ffbffffefff6;  op2val:0xffbfeffffdff5555
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x09ffbffffefff6, 0xffbfeffffdff5555, x1, 784, x2)

inst_80:// rs1_h3_val == 256, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fff9dffffffd;  op2val:0x2000ffef3fff0040
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x100fff9dffffffd, 0x2000ffef3fff0040, x1, 800, x2)

inst_81:// rs1_h3_val == 128, rs2_h2_val == 1
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x800007fdfffffc;  op2val:0x40000013fff0006
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x800007fdfffffc, 0x40000013fff0006, x1, 816, x2)

inst_82:// rs2_h2_val == -1025, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555000608000008;  op2val:0xfff9fbff0080ffef
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x5555000608000008, 0xfff9fbff0080ffef, x1, 832, x2)

inst_83:// rs1_h3_val == 64, rs1_h1_val == -4097, rs1_h2_val == 32767
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x407fffefff2000;  op2val:0xfff8ff7ffdffaaaa
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x407fffefff2000, 0xfff8ff7ffdffaaaa, x1, 848, x2)

inst_84:// rs2_h2_val == -9, rs2_h1_val == 32767
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafeffffefffff;  op2val:0x7ffffff77ffffffd
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xaaaafeffffefffff, 0x7ffffff77ffffffd, x1, 864, x2)

inst_85:// rs1_h2_val == 1024, rs2_h1_val == 8
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x060400fff60080;  op2val:0xfffc00060008ffff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x060400fff60080, 0xfffc00060008ffff, x1, 880, x2)

inst_86:// rs1_h2_val == 16, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe00100200fff7;  op2val:0x093ffffbff0000
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffe00100200fff7, 0x093ffffbff0000, x1, 896, x2)

inst_87:// rs2_h1_val == -129, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff8000ffdf2000;  op2val:0x3ffffeffff7f0002
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xfeff8000ffdf2000, 0x3ffffeffff7f0002, x1, 912, x2)

inst_88:// rs2_h2_val == -2, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40080000005ff7f;  op2val:0x1000fffeffdffff7
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x40080000005ff7f, 0x1000fffeffdffff7, x1, 928, x2)

inst_89:// rs1_h1_val == -21846, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffdaaaafff8;  op2val:0x80000006ffbfffef
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffbfffdaaaafff8, 0x80000006ffbfffef, x1, 944, x2)

inst_90:// rs1_h1_val == 21845, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff000155557fff;  op2val:0x4000fffc00048000
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x3fff000155557fff, 0x4000fffc00048000, x1, 960, x2)

inst_91:// rs2_h1_val == 8192, rs2_h2_val == 2
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa400055550100;  op2val:0x400000220007fff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffa400055550100, 0x400000220007fff, x1, 976, x2)

inst_92:// rs2_h1_val == 4096, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x07aaaa0004ffef;  op2val:0xfffef7ff1000ffdf
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x07aaaa0004ffef, 0xfffef7ff1000ffdf, x1, 992, x2)

inst_93:// rs1_h2_val == -33, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200ffdfbffffff6;  op2val:0xffef1000ffdf0200
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x200ffdfbffffff6, 0xffef1000ffdf0200, x1, 1008, x2)

inst_94:// rs1_h3_val == -9, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7040000074000;  op2val:0xbffffeff40000002
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xfff7040000074000, 0xbffffeff40000002, x1, 1024, x2)

inst_95:// rs2_h3_val == -1, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x060008fffdffdf;  op2val:0xffff55555555ffef
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x060008fffdffdf, 0xffff55555555ffef, x1, 1040, x2)

inst_96:// rs2_h2_val == 32767, 
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfdfffffcaaaa;  op2val:0xfffb7fff0100fffb
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffcfdfffffcaaaa, 0xfffb7fff0100fffb, x1, 1056, x2)

inst_97:// rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h0_val == -9, rs2_h2_val == -65, rs1_h1_val == 256, rs2_h0_val == -1025, rs1_h3_val == -4097, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val < 0
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffeff0100fff7;  op2val:0x06ffbf0003fbff
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0xeffffeff0100fff7, 0x06ffbf0003fbff, x1, 1072, x2)

inst_98:// rs2_h3_val == -3, rs1_h2_val == -16385, rs2_h1_val == -32768, rs1_h0_val == -8193, rs1_h3_val == 4096, rs2_h2_val == 0
// opcode: kcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000bfff0009dfff;  op2val:0xfffd000080000005
TEST_RR_OP(kcrsa16, x31, x30, x29, 0x0000000000000000, 0x1000bfff0009dfff, 0xfffd000080000005, x1, 1088, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 138*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
