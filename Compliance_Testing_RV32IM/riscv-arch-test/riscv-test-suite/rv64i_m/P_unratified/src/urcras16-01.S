
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the urcras16 instruction of the RISC-V RV64PZicsr extension for the urcras16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",urcras16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x3, rs2==x30, rd==x3, rs1_h0_val == 0, rs2_h0_val == 65503, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val == 65279, rs1_h3_val == 65527, rs2_h3_val == 0, rs2_h1_val == 32, rs2_h2_val == 49151
// opcode: urcras16 ; op1:x3; op2:x30; dest:x3; op1val:0xfff7feff000e0000;  op2val:0x00bfff0020ffdf
TEST_RR_OP(urcras16, x3, x3, x30, 0x0000000000000000, 0xfff7feff000e0000, 0x00bfff0020ffdf, x2, 0, x5)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x7, rs2==x12, rd==x23, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h1_val == 32767, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 65535, rs2_h3_val == 43690, rs1_h2_val == 65519, rs2_h1_val == 65471, rs1_h3_val == 63487
// opcode: urcras16 ; op1:x7; op2:x12; dest:x23; op1val:0xf7ffffef7fffffff;  op2val:0xaaaa000dffbf000f
TEST_RR_OP(urcras16, x23, x7, x12, 0x0000000000000000, 0xf7ffffef7fffffff, 0xaaaa000dffbf000f, x2, 8, x5)

inst_2:
// rs1 == rs2 != rd, rs1==x15, rs2==x15, rd==x28, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 65471, rs1_h2_val == 65023, rs1_h0_val == 57343, rs1_h1_val == 65279, rs2_h3_val == 65471, rs2_h0_val == 32767, rs2_h1_val == 65519
// opcode: urcras16 ; op1:x15; op2:x15; dest:x28; op1val:0xffbffdfffeffdfff;  op2val:0xffbf000affef7fff
TEST_RR_OP(urcras16, x28, x15, x15, 0x0000000000000000, 0xffbffdfffeffdfff, 0xffbf000affef7fff, x2, 16, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x14, rs2==x14, rd==x14, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h0_val == 4, rs1_h1_val == 57343, rs2_h1_val == 65279, rs1_h3_val == 61439, rs2_h3_val == 2048
// opcode: urcras16 ; op1:x14; op2:x14; dest:x14; op1val:0xefff0006dfff0004;  op2val:0x8000006feff0011
TEST_RR_OP(urcras16, x14, x14, x14, 0x0000000000000000, 0xefff0006dfff0004, 0x8000006feff0011, x2, 24, x5)

inst_4:
// rs2 == rd != rs1, rs1==x17, rs2==x9, rd==x9, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 57343, rs1_h3_val == 4096, rs2_h1_val == 16, rs2_h2_val == 61439, rs2_h0_val == 49151, rs1_h1_val == 16
// opcode: urcras16 ; op1:x17; op2:x9; dest:x9; op1val:0x100000030010ffff;  op2val:0xdfffefff0010bfff
TEST_RR_OP(urcras16, x9, x17, x9, 0x0000000000000000, 0x100000030010ffff, 0xdfffefff0010bfff, x2, 32, x5)

inst_5:
// rs1==x26, rs2==x11, rd==x24, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 8192, rs1_h3_val == 65534, rs1_h0_val == 8192
// opcode: urcras16 ; op1:x26; op2:x11; dest:x24; op1val:0xfffe000500112000;  op2val:0x110013feff2000
TEST_RR_OP(urcras16, x24, x26, x11, 0x0000000000000000, 0xfffe000500112000, 0x110013feff2000, x2, 40, x5)

inst_6:
// rs1==x1, rs2==x29, rd==x20, rs2_h3_val == 21845, rs2_h1_val == 8192, rs1_h3_val == 256, rs1_h2_val == 512, rs2_h2_val == 65279, rs1_h0_val == 1024
// opcode: urcras16 ; op1:x1; op2:x29; dest:x20; op1val:0x100020000130400;  op2val:0x5555feff20000011
TEST_RR_OP(urcras16, x20, x1, x29, 0x0000000000000000, 0x100020000130400, 0x5555feff20000011, x2, 48, x5)

inst_7:
// rs1==x31, rs2==x28, rd==x13, rs2_h3_val == 32767, rs1_h1_val == 0, rs2_h0_val == 65534, rs1_h2_val == 65471, rs1_h0_val == 63487, rs1_h3_val == 21845
// opcode: urcras16 ; op1:x31; op2:x28; dest:x13; op1val:0x5555ffbf0000f7ff;  op2val:0x7fff00072000fffe
TEST_RR_OP(urcras16, x13, x31, x28, 0x0000000000000000, 0x5555ffbf0000f7ff, 0x7fff00072000fffe, x2, 56, x5)

inst_8:
// rs1==x6, rs2==x26, rd==x12, rs2_h3_val == 49151, rs2_h0_val == 65519, rs2_h2_val == 2048, rs1_h0_val == 16, rs1_h1_val == 65407, rs1_h2_val == 256, rs1_h3_val == 4
// opcode: urcras16 ; op1:x6; op2:x26; dest:x12; op1val:0x040100ff7f0010;  op2val:0xbfff08000013ffef
TEST_RR_OP(urcras16, x12, x6, x26, 0x0000000000000000, 0x040100ff7f0010, 0xbfff08000013ffef, x2, 64, x5)

inst_9:
// rs1==x24, rs2==x13, rd==x26, rs2_h3_val == 61439, rs1_h0_val == 65023, rs2_h2_val == 57343, rs2_h0_val == 2, rs2_h1_val == 63487, rs1_h2_val == 32
// opcode: urcras16 ; op1:x24; op2:x13; dest:x26; op1val:0x130020000dfdff;  op2val:0xefffdffff7ff0002
TEST_RR_OP(urcras16, x26, x24, x13, 0x0000000000000000, 0x130020000dfdff, 0xefffdffff7ff0002, x2, 72, x5)

inst_10:
// rs1==x27, rs2==x19, rd==x1, rs2_h3_val == 63487, rs1_h1_val == 1, rs1_h3_val == 65503, rs2_h2_val == 1
// opcode: urcras16 ; op1:x27; op2:x19; dest:x1; op1val:0xffdffeff0001ffff;  op2val:0xf7ff0001ffbf0003
TEST_RR_OP(urcras16, x1, x27, x19, 0x0000000000000000, 0xffdffeff0001ffff, 0xf7ff0001ffbf0003, x2, 80, x5)

inst_11:
// rs1==x13, rs2==x22, rd==x25, rs2_h3_val == 64511, rs1_h2_val == 0, rs2_h1_val == 65533, rs1_h3_val == 43690
// opcode: urcras16 ; op1:x13; op2:x22; dest:x25; op1val:0xaaaa0000feff0400;  op2val:0xfbff000efffd0013
TEST_RR_OP(urcras16, x25, x13, x22, 0x0000000000000000, 0xaaaa0000feff0400, 0xfbff000efffd0013, x2, 88, x5)

inst_12:
// rs1==x18, rs2==x17, rd==x22, rs2_h3_val == 65023, rs2_h0_val == 4096, rs1_h2_val == 65527, rs2_h2_val == 65023, rs1_h1_val == 4096, rs1_h3_val == 8
// opcode: urcras16 ; op1:x18; op2:x17; dest:x22; op1val:0x08fff71000000e;  op2val:0xfdfffdffffef1000
TEST_RR_OP(urcras16, x22, x18, x17, 0x0000000000000000, 0x08fff71000000e, 0xfdfffdffffef1000, x2, 96, x5)

inst_13:
// rs1==x20, rs2==x4, rd==x16, rs2_h3_val == 65279, rs2_h1_val == 65531, rs2_h2_val == 1024, rs1_h0_val == 64511, rs1_h2_val == 128, rs2_h0_val == 63487, rs1_h1_val == 64
// opcode: urcras16 ; op1:x20; op2:x4; dest:x16; op1val:0x0f00800040fbff;  op2val:0xfeff0400fffbf7ff
TEST_RR_OP(urcras16, x16, x20, x4, 0x0000000000000000, 0x0f00800040fbff, 0xfeff0400fffbf7ff, x2, 104, x5)

inst_14:
// rs1==x10, rs2==x5, rd==x4, rs2_h3_val == 65407, rs2_h1_val == 512, rs2_h2_val == 512, rs2_h0_val == 65533, rs1_h2_val == 32768
// opcode: urcras16 ; op1:x10; op2:x5; dest:x4; op1val:0x0480000003000b;  op2val:0xff7f02000200fffd
TEST_RR_OP(urcras16, x4, x10, x5, 0x0000000000000000, 0x0480000003000b, 0xff7f02000200fffd, x2, 112, x13)
RVTEST_SIGBASE(x11,signature_x11_0)

inst_15:
// rs1==x19, rs2==x0, rd==x7, rs2_h3_val == 65503, rs1_h3_val == 64, rs2_h0_val == 65531
// opcode: urcras16 ; op1:x19; op2:x0; dest:x7; op1val:0x40ffbf000dffff;  op2val:0xffdf0007000afffb
TEST_RR_OP(urcras16, x7, x19, x0, 0x0000000000000000, 0x40ffbf000dffff, 0xffdf0007000afffb, x11, 0, x13)

inst_16:
// rs1==x21, rs2==x10, rd==x31, rs2_h3_val == 65519, rs2_h1_val == 61439, rs1_h3_val == 2048
// opcode: urcras16 ; op1:x21; op2:x10; dest:x31; op1val:0x800fff7000a000c;  op2val:0xffef000aefff000f
TEST_RR_OP(urcras16, x31, x21, x10, 0x0000000000000000, 0x800fff7000a000c, 0xffef000aefff000f, x11, 8, x13)

inst_17:
// rs1==x30, rs2==x25, rd==x18, rs2_h3_val == 65527, rs1_h1_val == 65531, rs1_h3_val == 32767, rs1_h0_val == 65279
// opcode: urcras16 ; op1:x30; op2:x25; dest:x18; op1val:0x7fff000afffbfeff;  op2val:0xfff7000fffbf0012
TEST_RR_OP(urcras16, x18, x30, x25, 0x0000000000000000, 0x7fff000afffbfeff, 0xfff7000fffbf0012, x11, 16, x13)

inst_18:
// rs1==x4, rs2==x23, rd==x10, rs2_h3_val == 65531, rs2_h1_val == 65534, rs1_h0_val == 8, rs1_h2_val == 65503, rs2_h0_val == 32, rs2_h2_val == 65407, rs1_h1_val == 32
// opcode: urcras16 ; op1:x4; op2:x23; dest:x10; op1val:0x0dffdf00200008;  op2val:0xfffbff7ffffe0020
TEST_RR_OP(urcras16, x10, x4, x23, 0x0000000000000000, 0x0dffdf00200008, 0xfffbff7ffffe0020, x11, 24, x13)

inst_19:
// rs1==x9, rs2==x18, rd==x5, rs2_h3_val == 65533, rs1_h1_val == 65535, rs2_h2_val == 16, rs2_h1_val == 32767, rs2_h0_val == 4
// opcode: urcras16 ; op1:x9; op2:x18; dest:x5; op1val:0x110011fffffdff;  op2val:0xfffd00107fff0004
TEST_RR_OP(urcras16, x5, x9, x18, 0x0000000000000000, 0x110011fffffdff, 0xfffd00107fff0004, x11, 32, x13)

inst_20:
// rs1==x16, rs2==x6, rd==x29, rs2_h3_val == 65534, rs2_h1_val == 1024, rs1_h2_val == 49151, rs2_h0_val == 128
// opcode: urcras16 ; op1:x16; op2:x6; dest:x29; op1val:0xaaaabfff00090010;  op2val:0xfffe000b04000080
TEST_RR_OP(urcras16, x29, x16, x6, 0x0000000000000000, 0xaaaabfff00090010, 0xfffe000b04000080, x11, 40, x13)

inst_21:
// rs1==x29, rs2==x7, rd==x2, rs2_h3_val == 32768, rs1_h2_val == 61439, rs2_h1_val == 57343, rs2_h2_val == 256, rs2_h0_val == 65407
// opcode: urcras16 ; op1:x29; op2:x7; dest:x2; op1val:0x5555efffffffdfff;  op2val:0x80000100dfffff7f
TEST_RR_OP(urcras16, x2, x29, x7, 0x0000000000000000, 0x5555efffffffdfff, 0x80000100dfffff7f, x11, 48, x13)

inst_22:
// rs1==x0, rs2==x1, rd==x6, rs2_h3_val == 16384, rs1_h3_val == 65279, rs2_h0_val == 16384, rs2_h2_val == 32767, rs1_h2_val == 64, rs1_h0_val == 2048
// opcode: urcras16 ; op1:x0; op2:x1; dest:x6; op1val:0xfeff0040000e0800;  op2val:0x40007fff000b4000
TEST_RR_OP(urcras16, x6, x0, x1, 0x0000000000000000, 0xfeff0040000e0800, 0x40007fff000b4000, x11, 56, x13)

inst_23:
// rs1==x12, rs2==x31, rd==x27, rs2_h3_val == 8192, rs1_h3_val == 32768, rs2_h1_val == 65535, rs1_h1_val == 32768, rs2_h2_val == 65527, rs1_h2_val == 32767
// opcode: urcras16 ; op1:x12; op2:x31; dest:x27; op1val:0x80007fff8000000b;  op2val:0x2000fff7ffff0009
TEST_RR_OP(urcras16, x27, x12, x31, 0x0000000000000000, 0x80007fff8000000b, 0x2000fff7ffff0009, x11, 64, x13)

inst_24:
// rs1==x23, rs2==x3, rd==x21, rs2_h3_val == 4096, rs1_h3_val == 65023, rs1_h2_val == 57343, rs2_h2_val == 2
// opcode: urcras16 ; op1:x23; op2:x3; dest:x21; op1val:0xfdffdfff0005000b;  op2val:0x1000000200100013
TEST_RR_OP(urcras16, x21, x23, x3, 0x0000000000000000, 0xfdffdfff0005000b, 0x1000000200100013, x11, 72, x13)

inst_25:
// rs1==x22, rs2==x27, rd==x8, rs2_h3_val == 1024, rs1_h2_val == 1, rs2_h2_val == 128
// opcode: urcras16 ; op1:x22; op2:x27; dest:x8; op1val:0x070001dffffbff;  op2val:0x4000080fffe000f
TEST_RR_OP(urcras16, x8, x22, x27, 0x0000000000000000, 0x070001dffffbff, 0x4000080fffe000f, x11, 80, x13)

inst_26:
// rs1==x5, rs2==x8, rd==x0, rs2_h3_val == 512, rs2_h1_val == 21845
// opcode: urcras16 ; op1:x5; op2:x8; dest:x0; op1val:0x100000010011fdff;  op2val:0x200000b5555fffe
TEST_RR_OP(urcras16, x0, x5, x8, 0x0000000000000000, 0x100000010011fdff, 0x200000b5555fffe, x11, 88, x13)

inst_27:
// rs1==x28, rs2==x20, rd==x19, rs2_h3_val == 256, rs2_h1_val == 43690, rs2_h2_val == 65503, rs1_h1_val == 21845, rs1_h0_val == 65503
// opcode: urcras16 ; op1:x28; op2:x20; dest:x19; op1val:0x0680005555ffdf;  op2val:0x100ffdfaaaa0003
TEST_RR_OP(urcras16, x19, x28, x20, 0x0000000000000000, 0x0680005555ffdf, 0x100ffdfaaaa0003, x11, 96, x13)

inst_28:
// rs1==x25, rs2==x21, rd==x30, rs2_h3_val == 128, rs1_h1_val == 49151, rs1_h0_val == 512
// opcode: urcras16 ; op1:x25; op2:x21; dest:x30; op1val:0x1000012bfff0200;  op2val:0x800006ffff0005
TEST_RR_OP(urcras16, x30, x25, x21, 0x0000000000000000, 0x1000012bfff0200, 0x800006ffff0005, x11, 104, x13)

inst_29:
// rs1==x2, rs2==x16, rd==x15, rs2_h3_val == 64, rs1_h0_val == 4096, rs2_h2_val == 4096, rs2_h1_val == 65407
// opcode: urcras16 ; op1:x2; op2:x16; dest:x15; op1val:0xefff000e000d1000;  op2val:0x401000ff7fffdf
TEST_RR_OP(urcras16, x15, x2, x16, 0x0000000000000000, 0xefff000e000d1000, 0x401000ff7fffdf, x11, 112, x13)

inst_30:
// rs1==x8, rs2==x24, rd==x17, rs2_h3_val == 32, rs1_h1_val == 64511
// opcode: urcras16 ; op1:x8; op2:x24; dest:x17; op1val:0x05fdfffbff000e;  op2val:0x20000aaaaa0009
TEST_RR_OP(urcras16, x17, x8, x24, 0x0000000000000000, 0x05fdfffbff000e, 0x20000aaaaa0009, x11, 120, x13)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x11, rs2_h3_val == 16, rs2_h1_val == 65503
// opcode: urcras16 ; op1:x11; op2:x29; dest:x30; op1val:0x0c0001fbfffbff;  op2val:0x10000effdf0006
TEST_RR_OP(urcras16, x30, x11, x29, 0x0000000000000000, 0x0c0001fbfffbff, 0x10000effdf0006, x1, 0, x3)

inst_32:
// rs2==x2, rs2_h3_val == 8, rs1_h0_val == 65519, rs2_h2_val == 43690
// opcode: urcras16 ; op1:x28; op2:x2; dest:x20; op1val:0x0c00110011ffef;  op2val:0x08aaaa0006fffb
TEST_RR_OP(urcras16, x20, x28, x2, 0x0000000000000000, 0x0c00110011ffef, 0x08aaaa0006fffb, x1, 8, x3)

inst_33:
// rd==x11, rs2_h3_val == 4, rs1_h3_val == 65533, rs1_h1_val == 128, rs2_h1_val == 16384, rs1_h2_val == 65535
// opcode: urcras16 ; op1:x0; op2:x22; dest:x11; op1val:0xfffdffff0080ffdf;  op2val:0x04000d4000000b
TEST_RR_OP(urcras16, x11, x0, x22, 0x0000000000000000, 0xfffdffff0080ffdf, 0x04000d4000000b, x1, 16, x3)

inst_34:
// rs2_h3_val == 2, rs2_h1_val == 64, rs1_h1_val == 2, rs2_h2_val == 65531
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x09bfff00022000;  op2val:0x02fffb00400003
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x09bfff00022000, 0x02fffb00400003, x1, 24, x3)

inst_35:
// rs1_h1_val == 4, rs2_h2_val == 65471, rs2_h0_val == 8
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x1300400004000c;  op2val:0xfbffffbffffd0008
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x1300400004000c, 0xfbffffbffffd0008, x1, 32, x3)

inst_36:
// rs1_h0_val == 43690, rs2_h2_val == 8192, rs1_h2_val == 16
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x060010000eaaaa;  op2val:0x11200002000005
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x060010000eaaaa, 0x11200002000005, x1, 40, x3)

inst_37:
// rs1_h0_val == 21845, rs1_h2_val == 65534
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0bfffe55555555;  op2val:0xfffedfff02000013
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x0bfffe55555555, 0xfffedfff02000013, x1, 48, x3)

inst_38:
// rs1_h0_val == 32767, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x06ffef00107fff;  op2val:0x110007000b4000
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x06ffef00107fff, 0x110007000b4000, x1, 56, x3)

inst_39:
// rs1_h0_val == 49151, rs1_h1_val == 256, rs1_h2_val == 8
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00080100bfff;  op2val:0xfffe0005aaaa7fff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xffbf00080100bfff, 0xfffe0005aaaa7fff, x1, 64, x3)

inst_40:
// rs1_h0_val == 61439, rs2_h2_val == 4
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffe0007efff;  op2val:0x040004dfff000a
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xfdfffffe0007efff, 0x040004dfff000a, x1, 72, x3)

inst_41:
// rs1_h0_val == 65407, rs1_h1_val == 65527, rs1_h3_val == 49151, rs2_h1_val == 2048
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffdffff7ff7f;  op2val:0xfdff000408000012
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xbfffffdffff7ff7f, 0xfdff000408000012, x1, 80, x3)

inst_42:
// rs1_h0_val == 65471, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0800070100ffbf;  op2val:0xf7ff1000000b1000
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x0800070100ffbf, 0xf7ff1000000b1000, x1, 88, x3)

inst_43:
// rs1_h0_val == 65527, rs1_h3_val == 64511, rs2_h2_val == 32, rs1_h2_val == 65531
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffb000ffff7;  op2val:0x1100200006ff7f
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xfbfffffb000ffff7, 0x1100200006ff7f, x1, 96, x3)

inst_44:
// rs1_h0_val == 65531, rs1_h2_val == 63487
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffef7ff0003fffb;  op2val:0xfefffff7000ffffb
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xfffef7ff0003fffb, 0xfefffff7000ffffb, x1, 104, x3)

inst_45:
// rs1_h0_val == 65533, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fff71000fffd;  op2val:0x200000a00090002
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x04fff71000fffd, 0x200000a00090002, x1, 112, x3)

inst_46:
// rs1_h0_val == 65534, rs1_h1_val == 512, rs2_h0_val == 512
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff70200fffe;  op2val:0x40000f00090200
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xffbffff70200fffe, 0x40000f00090200, x1, 120, x3)

inst_47:
// rs1_h0_val == 32768, rs2_h0_val == 64511
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x08ffff000f8000;  op2val:0x040007ffeffbff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x08ffff000f8000, 0x040007ffeffbff, x1, 128, x3)

inst_48:
// rs1_h0_val == 16384, rs2_h1_val == 0, rs1_h1_val == 65471, rs2_h2_val == 21845
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000100ffbf4000;  op2val:0xffbf555500000013
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x8000100ffbf4000, 0xffbf555500000013, x1, 136, x3)

inst_49:
// rs1_h0_val == 256, rs2_h0_val == 0, rs2_h2_val == 65533
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000200feff0100;  op2val:0x4000fffdffdf0000
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x1000200feff0100, 0x4000fffdffdf0000, x1, 144, x3)

inst_50:
// rs1_h0_val == 128, rs2_h1_val == 4, rs1_h3_val == 1, rs2_h0_val == 1024
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x01f7ff00100080;  op2val:0x80000a00040400
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x01f7ff00100080, 0x80000a00040400, x1, 152, x3)

inst_51:
// rs1_h0_val == 64, rs1_h1_val == 65533, rs2_h0_val == 1
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x13fffffffd0040;  op2val:0x7fff0006ffff0001
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x13fffffffd0040, 0x7fff0006ffff0001, x1, 160, x3)

inst_52:
// rs1_h0_val == 32, rs2_h1_val == 49151, rs2_h2_val == 32768
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x04000afff70020;  op2val:0x0f8000bfffbfff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x04000afff70020, 0x0f8000bfffbfff, x1, 168, x3)

inst_53:
// rs1_h0_val == 2, rs1_h2_val == 1024
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x03040010000002;  op2val:0xf7ff100000100011
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x03040010000002, 0xf7ff100000100011, x1, 176, x3)

inst_54:
// rs1_h0_val == 1, rs2_h1_val == 65023, rs2_h3_val == 65535
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0100ff7f0001;  op2val:0xffff0010fdffffef
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xfffe0100ff7f0001, 0xffff0010fdffffef, x1, 184, x3)

inst_55:
// rs2_h3_val == 1, rs1_h2_val == 65533, rs2_h0_val == 43690
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x11fffd000b000b;  op2val:0x01fff70006aaaa
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x11fffd000b000b, 0x01fff70006aaaa, x1, 192, x3)

inst_56:
// rs2_h2_val == 63487, rs1_h3_val == 57343
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff000e80000013;  op2val:0x05f7fffffdbfff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xdfff000e80000013, 0x05f7fffffdbfff, x1, 200, x3)

inst_57:
// rs2_h2_val == 64511, rs1_h3_val == 2
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x02000100130200;  op2val:0x80fbff00007fff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x02000100130200, 0x80fbff00007fff, x1, 208, x3)

inst_58:
// rs2_h2_val == 65519, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0009ffbf0010;  op2val:0x1000ffefbfff0001
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xdfff0009ffbf0010, 0x1000ffefbfff0001, x1, 216, x3)

inst_59:
// rs2_h0_val == 65471, rs1_h2_val == 64511
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fbff01001000;  op2val:0x1308000005ffbf
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x05fbff01001000, 0x1308000005ffbf, x1, 224, x3)

inst_60:
// rs2_h0_val == 65527, rs1_h1_val == 2048
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000001208000012;  op2val:0x200000800400fff7
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x8000001208000012, 0x200000800400fff7, x1, 232, x3)

inst_61:
// rs2_h0_val == 32768, rs1_h2_val == 4
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0100040000fffd;  op2val:0x11000300108000
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x0100040000fffd, 0x11000300108000, x1, 240, x3)

inst_62:
// rs2_h0_val == 2048, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000f8000fffe;  op2val:0x09efff000f0800
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xfbff000f8000fffe, 0x09efff000f0800, x1, 248, x3)

inst_63:
// rs2_h0_val == 256, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7000900050011;  op2val:0x40002000ffef0100
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xfff7000900050011, 0x40002000ffef0100, x1, 256, x3)

inst_64:
// rs2_h0_val == 64, rs1_h1_val == 8192, rs2_h2_val == 65535
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff7fff2000ff7f;  op2val:0xbffffffffffb0040
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xdfff7fff2000ff7f, 0xbffffffffffb0040, x1, 264, x3)

inst_65:
// rs2_h0_val == 16, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x04000e8000efff;  op2val:0x80100004000010
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x04000e8000efff, 0x80100004000010, x1, 272, x3)

inst_66:
// rs2_h0_val == 65535, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x098000000f7fff;  op2val:0x0200030400ffff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x098000000f7fff, 0x0200030400ffff, x1, 280, x3)

inst_67:
// rs1_h3_val == 65407, rs2_h0_val == 65023
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffdff7ffffffb;  op2val:0x03000d0000fdff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xff7ffdff7ffffffb, 0x03000d0000fdff, x1, 288, x3)

inst_68:
// rs1_h3_val == 65519, rs2_h1_val == 32768
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0011000c0012;  op2val:0x03008080001000
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xffef0011000c0012, 0x03008080001000, x1, 296, x3)

inst_69:
// rs1_h3_val == 65531, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0020fffbffef;  op2val:0xffef0013000d000c
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xfffb0020fffbffef, 0xffef0013000d000c, x1, 304, x3)

inst_70:
// rs1_h3_val == 16384, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x400000400011fffe;  op2val:0x0100090013000a
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x400000400011fffe, 0x0100090013000a, x1, 312, x3)

inst_71:
// rs1_h3_val == 8192, rs1_h2_val == 4096
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x200010001000dfff;  op2val:0x02ffdfaaaabfff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x200010001000dfff, 0x02ffdfaaaabfff, x1, 320, x3)

inst_72:
// rs1_h3_val == 1024, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x400001320000003;  op2val:0x0f2000effffffe
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x400001320000003, 0x0f2000effffffe, x1, 328, x3)

inst_73:
// rs1_h3_val == 512, rs2_h2_val == 65534
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x200800020000080;  op2val:0x06fffebfff0040
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x200800020000080, 0x06fffebfff0040, x1, 336, x3)

inst_74:
// rs1_h3_val == 128, rs1_h2_val == 16384, rs1_h1_val == 65023
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x804000fdff5555;  op2val:0x11000afffefffb
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x804000fdff5555, 0x11000afffefffb, x1, 344, x3)

inst_75:
// rs1_h3_val == 32, rs1_h2_val == 65407
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x20ff7f0200000c;  op2val:0xfff7000400100011
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x20ff7f0200000c, 0xfff7000400100011, x1, 352, x3)

inst_76:
// rs1_h3_val == 16, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x107fff00008000;  op2val:0x01ffff08000020
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x107fff00008000, 0x01ffff08000020, x1, 360, x3)

inst_77:
// rs1_h3_val == 65535, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff0020aaaa;  op2val:0x40fdffffbffbff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xfffffdff0020aaaa, 0x40fdffffbffbff, x1, 368, x3)

inst_78:
// rs2_h2_val == 16384, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x101000000c0040;  op2val:0xffbf4000000a1000
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x101000000c0040, 0xffbf4000000a1000, x1, 376, x3)

inst_79:
// rs2_h2_val == 64, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fffe8000ffff;  op2val:0xfff700400005fbff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x01fffe8000ffff, 0xfff700400005fbff, x1, 384, x3)

inst_80:
// rs2_h2_val == 8, rs1_h2_val == 43690
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x08aaaafffb0013;  op2val:0xfeff00082000ffff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x08aaaafffb0013, 0xfeff00082000ffff, x1, 392, x3)

inst_81:
// rs2_h2_val == 0, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffd00002000;  op2val:0x060000fdff4000
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xfdfffffd00002000, 0x060000fdff4000, x1, 400, x3)

inst_82:
// rs1_h2_val == 8192, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x08200000070008;  op2val:0x804000000baaaa
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x08200000070008, 0x804000000baaaa, x1, 408, x3)

inst_83:
// rs1_h2_val == 2048, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0800ffbf0008;  op2val:0xfeffaaaaffefbfff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xfffb0800ffbf0008, 0xfeffaaaaffefbfff, x1, 416, x3)

inst_84:
// rs2_h1_val == 64511, rs1_h1_val == 61439
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0080efff000f;  op2val:0x400000ffbffff7f
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x7fff0080efff000f, 0x400000ffbffff7f, x1, 424, x3)

inst_85:
// rs1_h2_val == 2, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0002000f0008;  op2val:0xffeffeff0009fffb
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xfffb0002000f0008, 0xffeffeff0009fffb, x1, 432, x3)

inst_86:
// rs2_h1_val == 65527, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff000a00000012;  op2val:0x000012fff7fdff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xffff000a00000012, 0x000012fff7fdff, x1, 440, x3)

inst_87:
// rs1_h1_val == 43690, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x12fff7aaaa000e;  op2val:0x20000080fdff0800
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x12fff7aaaa000e, 0x20000080fdff0800, x1, 448, x3)

inst_88:
// rs2_h0_val == 65279, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fff7f0001dfff;  op2val:0xfeffefff0200feff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xff7fff7f0001dfff, 0xfeffefff0200feff, x1, 456, x3)

inst_89:
// rs2_h1_val == 4096, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffbdfff0003;  op2val:0x0400121000ffbf
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xfdfffffbdfff0003, 0x0400121000ffbf, x1, 464, x3)

inst_90:
// rs1_h1_val == 63487, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ffeff7ff000f;  op2val:0x02f7ff0040000d
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x01ffeff7ff000f, 0x02f7ff0040000d, x1, 472, x3)

inst_91:
// rs2_h1_val == 256, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffb7fff0040;  op2val:0xfffe00000100fffb
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x1000fffb7fff0040, 0xfffe00000100fffb, x1, 480, x3)

inst_92:
// rs2_h1_val == 128, rs1_h2_val == 21845
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c5555ff7ffff7;  op2val:0x100004000800100
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x0c5555ff7ffff7, 0x100004000800100, x1, 488, x3)

inst_93:
// rs1_h1_val == 65503, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0dff7fffdf0011;  op2val:0xffff000e000f0013
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x0dff7fffdf0011, 0xffff000e000f0013, x1, 496, x3)

inst_94:
// rs1_h1_val == 65519, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x13ffbfffef000e;  op2val:0xefff0001fffffdff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x13ffbfffef000e, 0xefff0001fffffdff, x1, 504, x3)

inst_95:
// rs2_h1_val == 8, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000020003ffff;  op2val:0x06feff00088000
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x1000020003ffff, 0x06feff00088000, x1, 512, x3)

inst_96:
// rs2_h1_val == 2, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x800ffef0005000a;  op2val:0xfffdffff00020008
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x800ffef0005000a, 0xfffdffff00020008, x1, 520, x3)

inst_97:
// rs2_h1_val == 1, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x010010ffef0012;  op2val:0x200000090001feff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x010010ffef0012, 0x200000090001feff, x1, 528, x3)

inst_98:
// rs1_h1_val == 65534, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b0006fffefeff;  op2val:0x07dfff04000005
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x0b0006fffefeff, 0x07dfff04000005, x1, 536, x3)

inst_99:
// rs1_h1_val == 16384, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x200efff4000ffdf;  op2val:0x0d4000fffe0000
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x200efff4000ffdf, 0x0d4000fffe0000, x1, 544, x3)

inst_100:
// rs2_h0_val == 21845, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x13f7ff000e4000;  op2val:0xffdf7fff00125555
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x13f7ff000e4000, 0xffdf7fff00125555, x1, 552, x3)

inst_101:
// rs1_h1_val == 1024, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000a0400ff7f;  op2val:0x400fff7ffff0001
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xf7ff000a0400ff7f, 0x400fff7ffff0001, x1, 560, x3)

inst_102:
// rs2_h0_val == 57343, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff200055550020;  op2val:0xfffe20004000dfff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xfeff200055550020, 0xfffe20004000dfff, x1, 568, x3)

inst_103:
// rs2_h0_val == 61439, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef00200400fffd;  op2val:0x800000f000aefff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xffef00200400fffd, 0x800000f000aefff, x1, 576, x3)

inst_104:
// rs1_h3_val == 0, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x007fff0007efff;  op2val:0xefff0003000ddfff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x007fff0007efff, 0xefff0003000ddfff, x1, 584, x3)

inst_105:
// rs1_h1_val == 8, 
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff00800008feff;  op2val:0x0c000100050040
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xffff00800008feff, 0x0c000100050040, x1, 592, x3)

inst_106:
// rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 65471, rs1_h2_val == 65023, rs1_h0_val == 57343, rs1_h1_val == 65279, rs2_h3_val == 65471, rs2_h0_val == 32767, rs2_h1_val == 65519
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffdfffeffdfff;  op2val:0xffbf000affef7fff
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xffbffdfffeffdfff, 0xffbf000affef7fff, x1, 600, x3)

inst_107:
// rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h0_val == 4, rs1_h1_val == 57343, rs2_h1_val == 65279, rs1_h3_val == 61439, rs2_h3_val == 2048
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0006dfff0004;  op2val:0x8000006feff0011
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xefff0006dfff0004, 0x8000006feff0011, x1, 608, x3)

inst_108:
// rs2_h3_val == 65503, rs1_h3_val == 64, rs2_h0_val == 65531
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x40ffbf000dffff;  op2val:0xffdf0007000afffb
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x40ffbf000dffff, 0xffdf0007000afffb, x1, 616, x3)

inst_109:
// rs2_h3_val == 16384, rs1_h3_val == 65279, rs2_h0_val == 16384, rs2_h2_val == 32767, rs1_h2_val == 64, rs1_h0_val == 2048
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0040000e0800;  op2val:0x40007fff000b4000
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xfeff0040000e0800, 0x40007fff000b4000, x1, 624, x3)

inst_110:
// rs2_h3_val == 512, rs2_h1_val == 21845
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000010011fdff;  op2val:0x200000b5555fffe
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0x100000010011fdff, 0x200000b5555fffe, x1, 632, x3)

inst_111:
// rs2_h3_val == 4, rs1_h3_val == 65533, rs1_h1_val == 128, rs2_h1_val == 16384, rs1_h2_val == 65535
// opcode: urcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff0080ffdf;  op2val:0x04000d4000000b
TEST_RR_OP(urcras16, x31, x30, x29, 0x0000000000000000, 0xfffdffff0080ffdf, 0x04000d4000000b, x1, 640, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x11_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 81*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
