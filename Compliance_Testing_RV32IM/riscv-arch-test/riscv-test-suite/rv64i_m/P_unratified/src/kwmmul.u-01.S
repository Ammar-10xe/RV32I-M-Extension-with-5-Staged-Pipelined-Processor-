
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kwmmul.u instruction of the RISC-V RV64PZicsr extension for the kwmmul.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kwmmul.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 == rd != rs2, rs1==x7, rs2==x6, rd==x7, rs1_w0_val == -2147483648, rs2_w1_val == 2
// opcode: kwmmul.u ; op1:x7; dest:x7; op1val:0x5555555680000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x7, x7, x6, 0x0000000000000000, 0x5555555680000000, 0x00000200000006, x7, x5, 0, x19)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x15, rs2==x9, rd==x22, rs2_w1_val == -1431655766, rs1_w1_val == 32768, rs2_w0_val == 1024, rs1_w0_val == 16777216
// opcode: kwmmul.u ; op1:x15; dest:x22; op1val:0x00800001000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x22, x15, x9, 0x0000000000000000, 0x00800001000000, 0xaaaaaaaa00000400, x15, x5, 16, x19)

inst_2:
// rs1 == rs2 != rd, rs1==x2, rs2==x2, rd==x26, rs2_w1_val == 1431655765, rs1_w1_val == 8192
// opcode: kwmmul.u ; op1:x2; dest:x26; op1val:0x00200033333333;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x26, x2, x2, 0x0000000000000000, 0x00200033333333, 0x55555555ffff4afc, x2, x5, 32, x19)

inst_3:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs2_w1_val == 2147483647, rs1_w0_val == -16385, rs2_w0_val == -33
// opcode: kwmmul.u ; op1:x18; dest:x18; op1val:0x55555556ffffbfff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x18, x18, x18, 0x0000000000000000, 0x55555556ffffbfff, 0x7fffffffffffffdf, x18, x5, 48, x19)

inst_4:
// rs2 == rd != rs1, rs1==x11, rs2==x21, rd==x21, rs2_w1_val == -1073741825, rs1_w1_val == 2147483647, rs1_w0_val == 128
// opcode: kwmmul.u ; op1:x11; dest:x21; op1val:0x7fffffff00000080;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x21, x11, x21, 0x0000000000000000, 0x7fffffff00000080, 0xbfffffffaaaaaaab, x11, x5, 64, x19)

inst_5:
// rs1==x0, rs2==x23, rd==x20, rs2_w1_val == -536870913, rs2_w0_val == -1431655766
// opcode: kwmmul.u ; op1:x0; dest:x20; op1val:0x5555555600000003;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x20, x0, x23, 0x0000000000000000, 0x5555555600000003, 0xdfffffffaaaaaaaa, x0, x5, 80, x19)

inst_6:
// rs1==x6, rs2==x1, rd==x0, rs2_w1_val == -268435457, rs2_w0_val == 1, rs1_w1_val == 2048
// opcode: kwmmul.u ; op1:x6; dest:x0; op1val:0x00080000000005;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x0, x6, x1, 0x0000000000000000, 0x00080000000005, 0xefffffff00000001, x6, x5, 96, x19)

inst_7:
// rs1==x20, rs2==x31, rd==x11, rs2_w1_val == -134217729, rs1_w1_val == -8388609, rs1_w0_val == -3
// opcode: kwmmul.u ; op1:x20; dest:x11; op1val:0xff7ffffffffffffd;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x11, x20, x31, 0x0000000000000000, 0xff7ffffffffffffd, 0xf7ffffffaaaaaaaa, x20, x5, 112, x19)

inst_8:
// rs1==x16, rs2==x25, rd==x3, rs2_w1_val == -67108865, rs1_w0_val == -4097, rs2_w0_val == 4
// opcode: kwmmul.u ; op1:x16; dest:x3; op1val:0x000006ffffefff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x3, x16, x25, 0x0000000000000000, 0x000006ffffefff, 0xfbffffff00000004, x16, x5, 128, x19)

inst_9:
// rs1==x17, rs2==x20, rd==x24, rs2_w1_val == -33554433, rs1_w0_val == -2
// opcode: kwmmul.u ; op1:x17; dest:x24; op1val:0x008000fffffffe;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x24, x17, x20, 0x0000000000000000, 0x008000fffffffe, 0xfdfffffffffffff8, x17, x5, 144, x19)

inst_10:
// rs1==x28, rs2==x0, rd==x2, rs2_w1_val == -16777217, rs2_w0_val == -17, rs1_w1_val == 4096
// opcode: kwmmul.u ; op1:x28; dest:x2; op1val:0x001000fffffffa;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x2, x28, x0, 0x0000000000000000, 0x001000fffffffa, 0xfeffffffffffffef, x28, x5, 160, x19)

inst_11:
// rs1==x23, rs2==x8, rd==x10, rs2_w1_val == -8388609, rs1_w0_val == 536870912, rs1_w1_val == 2097152
// opcode: kwmmul.u ; op1:x23; dest:x10; op1val:0x20000020000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x10, x23, x8, 0x0000000000000000, 0x20000020000000, 0xff7fffff0000b504, x23, x5, 176, x19)

inst_12:
// rs1==x21, rs2==x16, rd==x12, rs2_w1_val == -4194305, rs1_w0_val == -1073741825, rs1_w1_val == 16
// opcode: kwmmul.u ; op1:x21; dest:x12; op1val:0x000010bfffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x12, x21, x16, 0x0000000000000000, 0x000010bfffffff, 0xffbfffff00000004, x21, x5, 192, x19)

inst_13:
// rs1==x14, rs2==x11, rd==x13, rs2_w1_val == -2097153, rs2_w0_val == 8192, rs1_w1_val == -9
// opcode: kwmmul.u ; op1:x14; dest:x13; op1val:0xfffffff700000005;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x13, x14, x11, 0x0000000000000000, 0xfffffff700000005, 0xffdfffff00002000, x14, x5, 208, x19)

inst_14:
// rs1==x4, rs2==x26, rd==x25, rs2_w1_val == -1048577, rs1_w1_val == -2049, rs1_w0_val == 64, rs2_w0_val == 0
// opcode: kwmmul.u ; op1:x4; dest:x25; op1val:0xfffff7ff00000040;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x25, x4, x26, 0x0000000000000000, 0xfffff7ff00000040, 0xffefffff00000000, x4, x5, 224, x19)

inst_15:
// rs1==x31, rs2==x30, rd==x6, rs2_w1_val == -524289, 
// opcode: kwmmul.u ; op1:x31; dest:x6; op1val:0xc0000000aaaaaaab;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x6, x31, x30, 0x0000000000000000, 0xc0000000aaaaaaab, 0xfff7ffff00000000, x31, x5, 240, x11)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_16:
// rs1==x22, rs2==x5, rd==x27, rs2_w1_val == -262145, rs1_w0_val == 4, rs1_w1_val == 128
// opcode: kwmmul.u ; op1:x22; dest:x27; op1val:0x00008000000004;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x27, x22, x5, 0x0000000000000000, 0x00008000000004, 0xfffbffffffff4afc, x22, x2, 0, x11)

inst_17:
// rs1==x3, rs2==x10, rd==x16, rs2_w1_val == -131073, rs2_w0_val == 4194304
// opcode: kwmmul.u ; op1:x3; dest:x16; op1val:0xfffffff633333334;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x16, x3, x10, 0x0000000000000000, 0xfffffff633333334, 0xfffdffff00400000, x3, x2, 16, x11)

inst_18:
// rs1==x8, rs2==x28, rd==x23, rs2_w1_val == -65537, rs1_w0_val == 4194304
// opcode: kwmmul.u ; op1:x8; dest:x23; op1val:0xaaaaaaab00400000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x23, x8, x28, 0x0000000000000000, 0xaaaaaaab00400000, 0xfffeffff00002000, x8, x2, 32, x11)

inst_19:
// rs1==x24, rs2==x3, rd==x4, rs2_w1_val == -32769, rs1_w1_val == 512, rs2_w0_val == -524289, rs1_w0_val == 8388608
// opcode: kwmmul.u ; op1:x24; dest:x4; op1val:0x00020000800000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x4, x24, x3, 0x0000000000000000, 0x00020000800000, 0xffff7ffffff7ffff, x24, x2, 48, x11)

inst_20:
// rs1==x19, rs2==x14, rd==x8, rs2_w1_val == -16385, rs2_w0_val == 33554432
// opcode: kwmmul.u ; op1:x19; dest:x8; op1val:0x3333333300000009;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x8, x19, x14, 0x0000000000000000, 0x3333333300000009, 0xffffbfff02000000, x19, x2, 64, x11)

inst_21:
// rs1==x29, rs2==x24, rd==x5, rs2_w1_val == -8193, rs1_w0_val == -268435457, rs1_w1_val == -65537, rs2_w0_val == -262145
// opcode: kwmmul.u ; op1:x29; dest:x5; op1val:0xfffeffffefffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x5, x29, x24, 0x0000000000000000, 0xfffeffffefffffff, 0xffffdffffffbffff, x29, x2, 80, x11)

inst_22:
// rs1==x5, rs2==x13, rd==x15, rs2_w1_val == -4097, rs1_w1_val == 1431655765, rs2_w0_val == -8388609
// opcode: kwmmul.u ; op1:x5; dest:x15; op1val:0x55555555fffffffc;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x15, x5, x13, 0x0000000000000000, 0x55555555fffffffc, 0xffffefffff7fffff, x5, x2, 96, x11)

inst_23:
// rs1==x10, rs2==x15, rd==x31, rs2_w1_val == -2049, rs1_w0_val == -65, rs1_w1_val == -1431655766, rs2_w0_val == -129
// opcode: kwmmul.u ; op1:x10; dest:x31; op1val:0xaaaaaaaaffffffbf;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x10, x15, 0x0000000000000000, 0xaaaaaaaaffffffbf, 0xfffff7ffffffff7f, x10, x2, 112, x11)

inst_24:
// rs1==x12, rs2==x29, rd==x30, rs2_w1_val == -1025, rs2_w0_val == -4097
// opcode: kwmmul.u ; op1:x12; dest:x30; op1val:0xff7ffffffffffffa;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x30, x12, x29, 0x0000000000000000, 0xff7ffffffffffffa, 0xfffffbffffffefff, x12, x2, 128, x11)

inst_25:
// rs1==x9, rs2==x22, rd==x29, rs2_w1_val == -513, rs1_w1_val == -3, rs2_w0_val == 2
// opcode: kwmmul.u ; op1:x9; dest:x29; op1val:0xfffffffd00000005;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x29, x9, x22, 0x0000000000000000, 0xfffffffd00000005, 0xfffffdff00000002, x9, x2, 144, x11)

inst_26:
// rs1==x13, rs2==x4, rd==x19, rs2_w1_val == -257, rs1_w1_val == 134217728
// opcode: kwmmul.u ; op1:x13; dest:x19; op1val:0x8000000ffff4afd;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x19, x13, x4, 0x0000000000000000, 0x8000000ffff4afd, 0xfffffeffffff4afc, x13, x2, 160, x11)

inst_27:
// rs1==x1, rs2==x19, rd==x28, rs2_w1_val == -129, rs1_w1_val == -8193, rs2_w0_val == 256, rs1_w0_val == 0
// opcode: kwmmul.u ; op1:x1; dest:x28; op1val:0xffffdfff00000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x28, x1, x19, 0x0000000000000000, 0xffffdfff00000000, 0xffffff7f00000100, x1, x2, 176, x11)

inst_28:
// rs1==x26, rs2==x7, rd==x1, rs2_w1_val == -65, rs1_w0_val == 1431655765
// opcode: kwmmul.u ; op1:x26; dest:x1; op1val:0xfffffffa55555555;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x1, x26, x7, 0x0000000000000000, 0xfffffffa55555555, 0xffffffbf00000007, x26, x2, 192, x11)

inst_29:
// rs1==x30, rs2==x12, rd==x14, rs2_w1_val == -33, rs2_w0_val == 1073741824
// opcode: kwmmul.u ; op1:x30; dest:x14; op1val:0x00b50333333333;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x14, x30, x12, 0x0000000000000000, 0x00b50333333333, 0xffffffdf40000000, x30, x2, 208, x11)

inst_30:
// rs1==x25, rs2==x27, rd==x17, rs2_w1_val == -17, rs1_w1_val == 262144, rs1_w0_val == -1431655766
// opcode: kwmmul.u ; op1:x25; dest:x17; op1val:0x040000aaaaaaaa;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x17, x25, x27, 0x0000000000000000, 0x040000aaaaaaaa, 0xffffffefffffff7f, x25, x2, 224, x11)

inst_31:
// rs1==x27, rs2==x17, rd==x9, rs2_w1_val == -9, rs1_w1_val == 33554432, rs2_w0_val == 131072, rs1_w0_val == -32769
// opcode: kwmmul.u ; op1:x27; dest:x9; op1val:0x2000000ffff7fff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x9, x27, x17, 0x0000000000000000, 0x2000000ffff7fff, 0xfffffff700020000, x27, x2, 240, x1)

inst_32:
// rs2_w1_val == -5, rs2_w0_val == 1048576, rs1_w1_val == -17
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffffffeffffffffd;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffffffeffffffffd, 0xfffffffb00100000, x30, x2, 256, x1)

inst_33:
// rs2_w1_val == -3, rs1_w1_val == -33
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffffffdffffffff9;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffff9, 0xfffffffdaaaaaaaa, x30, x2, 272, x1)

inst_34:
// rs2_w1_val == -2, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x00100033333334;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x00100033333334, 0xfffffffeffff4afc, x30, x2, 288, x1)

inst_35:
// rs2_w1_val == -2147483648, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xaaaaaaab0000b503;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaab0000b503, 0x80000000fffffffa, x30, x2, 304, x1)

inst_36:
// rs2_w1_val == 1073741824, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x800000001000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x800000001000000, 0x4000000000000005, x30, x2, 320, x1)

inst_37:
// rs2_w1_val == 536870912, rs1_w1_val == -131073, rs2_w0_val == 32768
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfffdffff80000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfffdffff80000000, 0x2000000000008000, x30, x2, 336, x1)

inst_38:
// rs2_w1_val == 268435456, rs1_w1_val == 4
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x00000400000006;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x00000400000006, 0x1000000000000006, x30, x2, 352, x1)

inst_39:
// rs2_w1_val == 134217728, rs2_w0_val == -16385, rs1_w1_val == 8388608
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x80000000000006;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x80000000000006, 0x8000000ffffbfff, x30, x2, 368, x1)

inst_40:
// rs2_w1_val == 67108864, rs2_w0_val == 4096, rs1_w0_val == 2048
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x200000000000800;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x200000000000800, 0x400000000001000, x30, x2, 384, x1)

inst_41:
// rs2_w1_val == 33554432, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffff4afc00000009;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffff4afc00000009, 0x200000000000100, x30, x2, 400, x1)

inst_42:
// rs2_w1_val == 16777216, rs1_w0_val == -8388609
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffffdfffff7fffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffffdfffff7fffff, 0x100000000000001, x30, x2, 416, x1)

inst_43:
// rs2_w1_val == 8388608, rs1_w1_val == -2147483648
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x80000000ffff7fff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x80000000ffff7fff, 0x80000000000004, x30, x2, 432, x1)

inst_44:
// rs2_w1_val == 4194304, rs1_w0_val == -134217729
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x000009f7ffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x000009f7ffffff, 0x400000fffffff9, x30, x2, 448, x1)

inst_45:
// rs2_w1_val == 2097152, rs2_w0_val == 32, rs1_w0_val == 268435456
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xc000000010000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xc000000010000000, 0x20000000000020, x30, x2, 464, x1)

inst_46:
// rs2_w1_val == 1048576, rs1_w0_val == -262145, rs2_w0_val == -2147483648
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x66666667fffbffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x66666667fffbffff, 0x10000080000000, x30, x2, 480, x1)

inst_47:
// rs2_w1_val == 524288, rs1_w1_val == 2, rs2_w0_val == -65537, rs1_w0_val == -129
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x000002ffffff7f;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x000002ffffff7f, 0x080000fffeffff, x30, x2, 496, x1)

inst_48:
// rs2_w1_val == 262144, rs2_w0_val == 64, rs1_w1_val == 16777216, rs1_w0_val == -16777217
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x1000000feffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x1000000feffffff, 0x04000000000040, x30, x2, 512, x1)

inst_49:
// rs2_w1_val == 131072, rs2_w0_val == 67108864
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x00000500000004;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x00000500000004, 0x02000004000000, x30, x2, 528, x1)

inst_50:
// rs2_w1_val == 65536, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffff4afd00000003;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffff4afd00000003, 0x01000000100000, x30, x2, 544, x1)

inst_51:
// rs2_w1_val == 32768, rs1_w1_val == 1
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x000001fffffffa;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x000001fffffffa, 0x008000fffeffff, x30, x2, 560, x1)

inst_52:
// rs2_w1_val == 16384, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x66666665aaaaaaaa;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x66666665aaaaaaaa, 0x00400004000000, x30, x2, 576, x1)

inst_53:
// rs2_w1_val == 8192, rs1_w0_val == 131072
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x00080000020000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x00080000020000, 0x002000ffff4afc, x30, x2, 592, x1)

inst_54:
// rs2_w1_val == 4096, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffffffef00400000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffffffef00400000, 0x00100000000100, x30, x2, 608, x1)

inst_55:
// rs2_w1_val == 2048, rs1_w0_val == 256, rs1_w1_val == 8
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x00000800000100;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x00000800000100, 0x000800fffffffc, x30, x2, 624, x1)

inst_56:
// rs2_w1_val == 1024, rs2_w0_val == -1048577
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x00080000000005;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x00080000000005, 0x000400ffefffff, x30, x2, 640, x1)

inst_57:
// rs2_w1_val == 512, rs1_w1_val == 0
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x000000ffff4afd;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x000000ffff4afd, 0x00020000400000, x30, x2, 656, x1)

inst_58:
// rs1_w0_val == 8192, rs1_w1_val == 67108864
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x400000000002000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x400000000002000, 0x01000055555554, x30, x2, 672, x1)

inst_59:
// rs1_w0_val == 4096, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffffdfff00001000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffffdfff00001000, 0x5555555500000020, x30, x2, 688, x1)

inst_60:
// rs1_w0_val == 1024, rs2_w0_val == -33554433
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x5555555400000400;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x5555555400000400, 0x66666667fdffffff, x30, x2, 704, x1)

inst_61:
// rs1_w0_val == 512, rs1_w1_val == -1025
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfffffbff00000200;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000200, 0xffffefff00000000, x30, x2, 720, x1)

inst_62:
// rs1_w0_val == 32, rs2_w0_val == 65536
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x00000600000020;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x00000600000020, 0xfffffeff00010000, x30, x2, 736, x1)

inst_63:
// rs1_w0_val == 16, rs2_w0_val == -65
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x3333333200000010;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x3333333200000010, 0xfffffbffffffffbf, x30, x2, 752, x1)

inst_64:
// rs1_w0_val == 8, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfffffbff00000008;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000008, 0xffffff7f00000040, x30, x2, 768, x1)

inst_65:
// rs1_w0_val == 2, rs1_w1_val == 1048576
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x10000000000002;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x10000000000002, 0xfffffffd00020000, x30, x2, 784, x1)

inst_66:
// rs1_w0_val == 1, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffffffdf00000001;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000001, 0xc000000000000400, x30, x2, 800, x1)

inst_67:
// rs1_w0_val == -1, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x800000ffffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x800000ffffffff, 0x00800000002000, x30, x2, 816, x1)

inst_68:
// rs2_w1_val == 256, rs1_w0_val == 67108864
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x00800004000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x00800004000000, 0x000100fffffff9, x30, x2, 832, x1)

inst_69:
// rs2_w1_val == 128, rs1_w0_val == -8193, rs2_w0_val == 8
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x00b504ffffdfff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x00b504ffffdfff, 0x00008000000008, x30, x2, 848, x1)

inst_70:
// rs2_w1_val == 64, rs2_w0_val == -32769
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfffffffdffff4afc;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffffdffff4afc, 0x000040ffff7fff, x30, x2, 864, x1)

inst_71:
// rs2_w1_val == 32, rs2_w0_val == -1073741825, rs1_w0_val == -536870913, rs1_w1_val == -524289
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfff7ffffdfffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfff7ffffdfffffff, 0x000020bfffffff, x30, x2, 880, x1)

inst_72:
// rs2_w1_val == 16, rs1_w1_val == -262145, rs2_w0_val == 536870912
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfffbfffffffffffa;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfffbfffffffffffa, 0x00001020000000, x30, x2, 896, x1)

inst_73:
// rs2_w1_val == 8, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x8000000c0000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x8000000c0000000, 0x00000800000009, x30, x2, 912, x1)

inst_74:
// rs2_w1_val == 4, rs2_w0_val == 8388608
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfffeffff00000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000000, 0x00000400800000, x30, x2, 928, x1)

inst_75:
// rs2_w1_val == 1, rs2_w0_val == -5
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfffffffa00000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000000, 0x000001fffffffb, x30, x2, 944, x1)

inst_76:
// rs2_w1_val == 0, rs1_w1_val == -1048577
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffefffffaaaaaaab;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffefffffaaaaaaab, 0x000000fffffffb, x30, x2, 960, x1)

inst_77:
// rs2_w1_val == -1, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x00000900800000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x00000900800000, 0xffffffff00000004, x30, x2, 976, x1)

inst_78:
// rs2_w0_val == 1431655765, rs1_w1_val == -268435457
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xefffffff55555555;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xefffffff55555555, 0xfffffbff55555555, x30, x2, 992, x1)

inst_79:
// rs2_w0_val == 2147483647, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x000004fffbffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x000004fffbffff, 0xffffff7f7fffffff, x30, x2, 1008, x1)

inst_80:
// rs2_w0_val == -536870913, rs1_w1_val == -2, rs1_w0_val == 33554432
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfffffffe02000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffffe02000000, 0x000400dfffffff, x30, x2, 1024, x1)

inst_81:
// rs2_w0_val == -268435457, rs1_w0_val == 1048576
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfffffffa00100000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffffa00100000, 0xfffffff9efffffff, x30, x2, 1040, x1)

inst_82:
// rs2_w0_val == -134217729, rs1_w1_val == 536870912
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x2000000055555555;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x2000000055555555, 0xffffff7ff7ffffff, x30, x2, 1056, x1)

inst_83:
// rs2_w0_val == -67108865, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x000001fffbffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x000001fffbffff, 0x80000000fbffffff, x30, x2, 1072, x1)

inst_84:
// rs2_w0_val == -16777217, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x000006ffff4afc;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x000006ffff4afc, 0x7ffffffffeffffff, x30, x2, 1088, x1)

inst_85:
// rs2_w0_val == -4194305, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x000010ffffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x000010ffffffff, 0xfffffffdffbfffff, x30, x2, 1104, x1)

inst_86:
// rs2_w0_val == -2097153, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x000000ffffff7f;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x000000ffffff7f, 0xffffffdfffdfffff, x30, x2, 1120, x1)

inst_87:
// rs2_w0_val == -131073, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfffffffc0000b505;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffffc0000b505, 0x000040fffdffff, x30, x2, 1136, x1)

inst_88:
// rs2_w0_val == -8193, rs1_w1_val == 1073741824
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x40000000ffffefff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x40000000ffffefff, 0x000010ffffdfff, x30, x2, 1152, x1)

inst_89:
// rs2_w0_val == -2049, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x2000000000000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x2000000000000000, 0xfffefffffffff7ff, x30, x2, 1168, x1)

inst_90:
// rs2_w0_val == -1025, rs1_w0_val == 1073741824
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xaaaaaaaa40000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa40000000, 0xffffffeffffffbff, x30, x2, 1184, x1)

inst_91:
// rs2_w0_val == -513, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x0000000000b503;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x0000000000b503, 0x100000fffffdff, x30, x2, 1200, x1)

inst_92:
// rs2_w0_val == -257, rs1_w0_val == 2147483647
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x40000007fffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x40000007fffffff, 0xffdffffffffffeff, x30, x2, 1216, x1)

inst_93:
// rs2_w0_val == -9, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x00000400000080;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x00000400000080, 0x080000fffffff7, x30, x2, 1232, x1)

inst_94:
// rs2_w0_val == -3, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x3333333300800000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x3333333300800000, 0xffffffeffffffffd, x30, x2, 1248, x1)

inst_95:
// rs2_w0_val == 16, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x6666666600400000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x6666666600400000, 0xffffbfff00000010, x30, x2, 1264, x1)

inst_96:
// rs2_w0_val == -1, rs1_w1_val == 16384
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x00400033333333;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x00400033333333, 0xffbfffffffffffff, x30, x2, 1280, x1)

inst_97:
// rs1_w0_val == 16384, rs1_w1_val == 65536
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x01000000004000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x01000000004000, 0xfff7ffff55555554, x30, x2, 1296, x1)

inst_98:
// rs1_w1_val == -1073741825, rs1_w0_val == -131073
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xbffffffffffdffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xbffffffffffdffff, 0x000000efffffff, x30, x2, 1312, x1)

inst_99:
// rs1_w1_val == -536870913, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xdfffffff20000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xdfffffff20000000, 0x00800000000100, x30, x2, 1328, x1)

inst_100:
// rs1_w1_val == -134217729, rs2_w0_val == 2048
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xf7fffffffffffffc;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffffffc, 0xefffffff00000800, x30, x2, 1344, x1)

inst_101:
// rs1_w1_val == -67108865, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfbfffffffffffff8;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffffff8, 0xefffffffffbfffff, x30, x2, 1360, x1)

inst_102:
// rs1_w1_val == -33554433, rs1_w0_val == -2097153, rs2_w0_val == -2
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfdffffffffdfffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfdffffffffdfffff, 0x7ffffffffffffffe, x30, x2, 1376, x1)

inst_103:
// rs1_w1_val == -16777217, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfeffffff33333332;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfeffffff33333332, 0xffffffeff7ffffff, x30, x2, 1392, x1)

inst_104:
// rs1_w1_val == -4194305, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffbfffff55555556;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffbfffff55555556, 0xffff7fffaaaaaaaa, x30, x2, 1408, x1)

inst_105:
// rs1_w1_val == -2097153, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffdffffffffffffe;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffdffffffffffffe, 0x000080ffffffbf, x30, x2, 1424, x1)

inst_106:
// rs1_w1_val == -32769, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffff7ffffffbffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffbffff, 0x0000070000b505, x30, x2, 1440, x1)

inst_107:
// rs1_w1_val == -16385, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffffbfff66666667;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffffbfff66666667, 0x00100000001000, x30, x2, 1456, x1)

inst_108:
// rs1_w1_val == -4097, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffffefff00000010;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffffefff00000010, 0x00b505fffffff7, x30, x2, 1472, x1)

inst_109:
// rs1_w1_val == -513, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfffffdff00000004;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000004, 0xffff4afd00000010, x30, x2, 1488, x1)

inst_110:
// rs1_w1_val == -257, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfffffeff00000007;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000007, 0xfffffff7fffffff8, x30, x2, 1504, x1)

inst_111:
// rs1_w1_val == -129, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffffff7f00000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000000, 0xff7fffff00000020, x30, x2, 1520, x1)

inst_112:
// rs1_w1_val == -65, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffffffbfbfffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffffffbfbfffffff, 0xfffffffa00000008, x30, x2, 1536, x1)

inst_113:
// rs1_w1_val == -5, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfffffffb00000006;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000006, 0xfffeffffc0000000, x30, x2, 1552, x1)

inst_114:
// rs1_w1_val == 268435456, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x1000000000000400;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x1000000000000400, 0xffffefff00000004, x30, x2, 1568, x1)

inst_115:
// rs1_w1_val == 4194304, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x400000ffdfffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x400000ffdfffff, 0xf7ffffff00000000, x30, x2, 1584, x1)

inst_116:
// rs1_w1_val == 524288, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x08000000000002;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x08000000000002, 0xfffffff8ffff4afd, x30, x2, 1600, x1)

inst_117:
// rs1_w1_val == 131072, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x02000002000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x02000002000000, 0x00000202000000, x30, x2, 1616, x1)

inst_118:
// rs1_w1_val == 1024, rs1_w0_val == -513
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x000400fffffdff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x000400fffffdff, 0x400000000000040, x30, x2, 1632, x1)

inst_119:
// rs1_w1_val == 256, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x000100fffffff8;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x000100fffffff8, 0xfffffffbffff4afc, x30, x2, 1648, x1)

inst_120:
// rs1_w1_val == 64, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x00004033333334;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x00004033333334, 0x00000755555555, x30, x2, 1664, x1)

inst_121:
// rs1_w1_val == 32, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x00002066666666;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x00002066666666, 0x55555554feffffff, x30, x2, 1680, x1)

inst_122:
// rs1_w1_val == -1, rs2_w0_val == 16384
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffffffffffffdfff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffffffffffffdfff, 0x80000000004000, x30, x2, 1696, x1)

inst_123:
// rs1_w0_val == -67108865, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xaaaaaaaafbffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafbffffff, 0x000006ffbfffff, x30, x2, 1712, x1)

inst_124:
// rs1_w0_val == -33554433, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x80000000fdffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x80000000fdffffff, 0x000004ff7fffff, x30, x2, 1728, x1)

inst_125:
// rs1_w0_val == -4194305, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xaaaaaaaaffbfffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffbfffff, 0xaaaaaaaa00800000, x30, x2, 1744, x1)

inst_126:
// rs1_w0_val == -1048577, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x000006ffefffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x000006ffefffff, 0x001000efffffff, x30, x2, 1760, x1)

inst_127:
// rs1_w0_val == -524289, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x001000fff7ffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x001000fff7ffff, 0xffff4afcffffff7f, x30, x2, 1776, x1)

inst_128:
// rs1_w0_val == -65537, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfff7fffffffeffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffeffff, 0x6666666520000000, x30, x2, 1792, x1)

inst_129:
// rs1_w0_val == -2049, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfdfffffffffff7ff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffff7ff, 0x3333333255555554, x30, x2, 1808, x1)

inst_130:
// rs1_w0_val == -1025, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x000003fffffbff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x000003fffffbff, 0xff7fffffffff7fff, x30, x2, 1824, x1)

inst_131:
// rs1_w0_val == -257, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffffffbffffffeff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffffffbffffffeff, 0xfeffffffaaaaaaab, x30, x2, 1840, x1)

inst_132:
// rs1_w0_val == -33, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x10000000ffffffdf;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x10000000ffffffdf, 0xefffffff00008000, x30, x2, 1856, x1)

inst_133:
// rs2_w0_val == 268435456, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x5555555555555555;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x00000610000000, x30, x2, 1872, x1)

inst_134:
// rs1_w0_val == -17, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x000003ffffffef;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x000003ffffffef, 0x7fffffff00000020, x30, x2, 1888, x1)

inst_135:
// rs2_w0_val == 134217728, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xaaaaaaaaf7ffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaf7ffffff, 0x00000008000000, x30, x2, 1904, x1)

inst_136:
// rs1_w0_val == -9, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x000003fffffff7;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x000003fffffff7, 0xfffdffff00002000, x30, x2, 1920, x1)

inst_137:
// rs1_w0_val == -5, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xff7ffffffffffffb;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffffffb, 0x000004fffffffe, x30, x2, 1936, x1)

inst_138:
// rs2_w0_val == 16777216, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x01000000000005;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x01000000000005, 0xfffffffe01000000, x30, x2, 1952, x1)

inst_139:
// rs2_w0_val == 2097152, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xaaaaaaaabfffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaabfffffff, 0xfffffffd00200000, x30, x2, 1968, x1)

inst_140:
// rs1_w0_val == 134217728, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x00000108000000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x00000108000000, 0x000000ffffffff, x30, x2, 1984, x1)

inst_141:
// rs2_w0_val == 524288, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x400000ffffdfff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x400000ffffdfff, 0x00000900080000, x30, x2, 2000, x1)

inst_142:
// rs2_w0_val == 262144, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x000002ffbfffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x000002ffbfffff, 0x00000400040000, x30, x2, 2016, x1)

inst_143:
// rs1_w0_val == 2097152, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xdfffffff00200000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xdfffffff00200000, 0xefffffffbfffffff, x30, x2, 2032, x1)
RVTEST_SIGBASE(x2,signature_x2_1)

inst_144:
// rs2_w0_val == 512, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x40000000400000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x40000000400000, 0x8000000000000200, x30, x2, 0, x1)
RVTEST_SIGBASE(x2,signature_x2_2)

inst_145:
// rs1_w0_val == 524288, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xfffffff700080000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xfffffff700080000, 0x66666667fff7ffff, x30, x2, 0, x1)

inst_146:
// rs1_w0_val == 262144, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0xffff4afc00040000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0xffff4afc00040000, 0xffffffefffff4afd, x30, x2, 16, x1)

inst_147:
// rs1_w0_val == 65536, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x3333333200010000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x3333333200010000, 0x3fffffff40000000, x30, x2, 32, x1)

inst_148:
// rs1_w0_val == 32768, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x00002000008000;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x00002000008000, 0xffff7ffffffffff6, x30, x2, 48, x1)

inst_149:
// rs2_w0_val == 128, 
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x0000003fffffff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x0000003fffffff, 0xffffffbf00000080, x30, x2, 64, x1)

inst_150:
// rs2_w1_val == 1431655765, rs1_w1_val == 8192
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x00200033333333;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x00200033333333, 0x55555555ffff4afc, x30, x2, 80, x1)

inst_151:
// rs2_w1_val == 2147483647, rs1_w0_val == -16385, rs2_w0_val == -33
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x55555556ffffbfff;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x55555556ffffbfff, 0x7fffffffffffffdf, x30, x2, 96, x1)

inst_152:
// rs2_w1_val == -536870913, rs2_w0_val == -1431655766
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x5555555600000003;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x5555555600000003, 0xdfffffffaaaaaaaa, x30, x2, 112, x1)

inst_153:
// rs2_w1_val == -16777217, rs2_w0_val == -17, rs1_w1_val == 4096
// opcode: kwmmul.u ; op1:x30; dest:x31; op1val:0x001000fffffffa;  immval:$imm_val
TEST_PKRR_OP(kwmmul.u, x31, x30, x29, 0x0000000000000000, 0x001000fffffffa, 0xfeffffffffffffef, x30, x2, 128, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x2_2:
    .fill 18*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
