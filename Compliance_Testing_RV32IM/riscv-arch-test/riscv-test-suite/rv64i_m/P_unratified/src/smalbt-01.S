
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smalbt instruction of the RISC-V RV64PZicsr extension for the smalbt covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smalbt)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rd != rs2, rs1==x8, rs2==x31, rd==x8, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h1_val == -21846, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs2_h0_val == -513, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs2_h2_val == 2048, rs1_h3_val == -129, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h2_val == -65
// opcode: smalbt ; op1:x8; op2:x31; dest:x8; op1val:0xff7fffbf00078000;  op2val:0x00030800aaaafdff
TEST_P64_PNN_OP(smalbt, x8, $rd_hi, x8, x31, 0x0000000000000000, $correctval_hi, 0xff7fffbf00078000, 0x00030800aaaafdff, x15, 0, x21)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x7, rd==x12, rs1_h3_val == rs2_h3_val, rs2_h0_val == 8, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h3_val == 8, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val == 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h3_val == 8, rs1_h0_val == -1025, rs2_h1_val == 32
// opcode: smalbt ; op1:x2; op2:x7; dest:x12; op1val:0x000800030000fbff;  op2val:0x0008fff800200008
TEST_P64_PNN_OP(smalbt, x12, $rd_hi, x2, x7, 0x0000000000000000, $correctval_hi, 0x000800030000fbff, 0x0008fff800200008, x15, 16, x21)

inst_2:
// rs1 == rs2 != rd, rs1==x9, rs2==x9, rd==x16, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h1_val == -3, rs2_h3_val == -129, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == 1024, rs1_h3_val == -33, rs1_h0_val == -4097, rs2_h1_val == 64, rs2_h2_val == -21846
// opcode: smalbt ; op1:x9; op2:x9; dest:x16; op1val:0xffdffff9fffdefff;  op2val:0xff7faaaa00400400
TEST_P64_PNN_OP(smalbt, x16, $rd_hi, x9, x9, 0x0000000000000000, $correctval_hi, 0xffdffff9fffdefff, 0xff7faaaa00400400, x15, 32, x21)

inst_3:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 64, rs2_h3_val == -33, rs1_h1_val == 16384, rs2_h2_val == -129, rs1_h0_val == 32, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == -17, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: smalbt ; op1:x18; op2:x18; dest:x18; op1val:0x0040ffbf40000020;  op2val:0xffdfff7f0040ffef
TEST_P64_PNN_OP(smalbt, x18, $rd_hi, x18, x18, 0x0000000000000000, $correctval_hi, 0x0040ffbf40000020, 0xffdfff7f0040ffef, x15, 48, x21)

inst_4:
// rs2 == rd != rs1, rs1==x28, rs2==x26, rd==x26, rs1_h2_val == rs2_h2_val, rs1_h0_val == 8192, rs1_h3_val == 21845, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == -9, rs1_h1_val == 4, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == 4, rs2_h0_val == 512
// opcode: smalbt ; op1:x28; op2:x26; dest:x26; op1val:0x5555000700042000;  op2val:0x00040007fff70200
TEST_P64_PNN_OP(smalbt, x26, $rd_hi, x28, x26, 0x0000000000000000, $correctval_hi, 0x5555000700042000, 0x00040007fff70200, x15, 64, x21)

inst_5:
// rs1==x12, rs2==x16, rd==x24, rs1_h1_val == rs2_h1_val, rs1_h1_val == -9, rs2_h2_val == -17, rs1_h2_val == 1, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == 8192, rs2_h3_val == 21845, rs1_h3_val == 2048
// opcode: smalbt ; op1:x12; op2:x16; dest:x24; op1val:0x08000001fff7fff9;  op2val:0x5555ffeffff72000
TEST_P64_PNN_OP(smalbt, x24, $rd_hi, x12, x16, 0x0000000000000000, $correctval_hi, 0x08000001fff7fff9, 0x5555ffeffff72000, x15, 80, x21)

inst_6:
// rs1==x22, rs2==x25, rd==x14, rs1_h0_val == rs2_h0_val, rs1_h0_val == 1024, rs2_h3_val == 128, rs2_h1_val == -65, rs2_h2_val == -513
// opcode: smalbt ; op1:x22; op2:x25; dest:x14; op1val:0xfff80005c0000400;  op2val:0x0080fdffffbf0400
TEST_P64_PNN_OP(smalbt, x14, $rd_hi, x22, x25, 0x0000000000000000, $correctval_hi, 0xfff80005c0000400, 0x0080fdffffbf0400, x15, 96, x21)

inst_7:
// rs1==x26, rs2==x8, rd==x4, rs2_h3_val == -21846, rs2_h1_val == -257, rs1_h2_val == -2049, rs1_h0_val == 21845, rs1_h1_val == -1025, rs2_h0_val == 128
// opcode: smalbt ; op1:x26; op2:x8; dest:x4; op1val:0x0005f7fffbff5555;  op2val:0xaaaafffcfeff0080
TEST_P64_PNN_OP(smalbt, x4, $rd_hi, x26, x8, 0x0000000000000000, $correctval_hi, 0x0005f7fffbff5555, 0xaaaafffcfeff0080, x15, 112, x21)

inst_8:
// rs1==x31, rs2==x1, rd==x6, rs2_h3_val == 32767, rs1_h0_val == 512, rs2_h0_val == -9, rs1_h2_val == -513, rs1_h3_val == -5, rs1_h1_val == -513
// opcode: smalbt ; op1:x31; op2:x1; dest:x6; op1val:0xfffbfdfffdff0200;  op2val:0x7fff3ffffff9fff7
TEST_P64_PNN_OP(smalbt, x6, $rd_hi, x31, x1, 0x0000000000000000, $correctval_hi, 0xfffbfdfffdff0200, 0x7fff3ffffff9fff7, x15, 128, x21)

inst_9:
// rs1==x3, rs2==x17, rd==x2, rs2_h3_val == -16385, rs1_h1_val == 2, rs2_h1_val == -129, rs1_h2_val == -3, rs2_h0_val == -2
// opcode: smalbt ; op1:x3; op2:x17; dest:x2; op1val:0xfff8fffd00025555;  op2val:0xbfff0007ff7ffffe
TEST_P64_PNN_OP(smalbt, x2, $rd_hi, x3, x17, 0x0000000000000000, $correctval_hi, 0xfff8fffd00025555, 0xbfff0007ff7ffffe, x15, 144, x21)

inst_10:
// rs1==x1, rs2==x12, rd==x20, rs2_h3_val == -8193, rs1_h1_val == 2048, rs2_h1_val == -5, rs1_h0_val == 0, rs2_h0_val == 16384, rs1_h3_val == -32768, rs1_h2_val == -5
// opcode: smalbt ; op1:x1; op2:x12; dest:x20; op1val:0x8000fffb08000000;  op2val:0xdfff0800fffb4000
TEST_P64_PNN_OP(smalbt, x20, $rd_hi, x1, x12, 0x0000000000000000, $correctval_hi, 0x8000fffb08000000, 0xdfff0800fffb4000, x15, 160, x21)

inst_11:
// rs1==x17, rs2==x13, rd==x10, rs2_h3_val == -4097, rs1_h3_val == -3, rs2_h0_val == 4096, rs2_h2_val == 1, rs1_h0_val == 32767
// opcode: smalbt ; op1:x17; op2:x13; dest:x10; op1val:0xfffdfffafdff7fff;  op2val:0xefff0001fff81000
TEST_P64_PNN_OP(smalbt, x10, $rd_hi, x17, x13, 0x0000000000000000, $correctval_hi, 0xfffdfffafdff7fff, 0xefff0001fff81000, x15, 176, x21)

inst_12:
// rs1==x19, rs2==x0, rd==x28, rs2_h3_val == -2049, rs1_h3_val == 2, rs2_h1_val == -1, rs1_h2_val == 8192
// opcode: smalbt ; op1:x19; op2:x0; dest:x28; op1val:0x00022000fff6fffc;  op2val:0xf7ffaaaaffff2000
TEST_P64_PNN_OP(smalbt, x28, $rd_hi, x19, x0, 0x0000000000000000, $correctval_hi, 0x00022000fff6fffc, 0xf7ffaaaaffff2000, x15, 192, x21)

inst_13:
// rs1==x11, rs2==x5, rd==x22, rs2_h3_val == -1025, rs1_h2_val == -4097, rs2_h1_val == 16384, rs1_h1_val == 64, rs1_h0_val == -1
// opcode: smalbt ; op1:x11; op2:x5; dest:x22; op1val:0x5555efff0040ffff;  op2val:0xfbfffff84000ffef
TEST_P64_PNN_OP(smalbt, x22, $rd_hi, x11, x5, 0x0000000000000000, $correctval_hi, 0x5555efff0040ffff, 0xfbfffff84000ffef, x15, 208, x21)

inst_14:
// rs1==x16, rs2==x6, rd==x30, rs2_h3_val == -513, rs1_h1_val == 256, rs1_h3_val == -65, rs1_h2_val == 128
// opcode: smalbt ; op1:x16; op2:x6; dest:x30; op1val:0xffbf008001000000;  op2val:0xfdff000500060005
TEST_P64_PNN_OP(smalbt, x30, $rd_hi, x16, x6, 0x0000000000000000, $correctval_hi, 0xffbf008001000000, 0xfdff000500060005, x15, 224, x21)

inst_15:
// rs1==x0, rs2==x14, rs2_h3_val == -257, rs1_h3_val == 512, rs2_h0_val == 16, rs2_h2_val == -3, rs1_h0_val == 64
// opcode: smalbt ; op1:x0; op2:x14; dest:x20; op1val:0x0200f7ffc0000040;  op2val:0xfefffffdffff0010
TEST_P64_PNN_OP(smalbt, x20, $rd_hi, x0, x14, 0x0000000000000000, $correctval_hi, 0x0200f7ffc0000040, 0xfefffffdffff0010, x15, 240, x12)

inst_16:
// rs1==x23, rs2==x4, rs2_h3_val == -65, rs1_h1_val == -32768, rs1_h0_val == -2, rs1_h2_val == 16, rs1_h3_val == -8193, rs2_h2_val == 4096, rs2_h1_val == 512
// opcode: smalbt ; op1:x23; op2:x4; dest:x20; op1val:0xdfff00108000fffe;  op2val:0xffbf100002003fff
TEST_P64_PNN_OP(smalbt, x20, $rd_hi, x23, x4, 0x0000000000000000, $correctval_hi, 0xdfff00108000fffe, 0xffbf100002003fff, x15, 256, x12)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_17:
// rs1==x4, rs2==x28, rs2_h3_val == -17, rs2_h1_val == -4097, rs2_h2_val == -257, rs1_h2_val == 2, rs1_h0_val == 16, rs1_h3_val == -257
// opcode: smalbt ; op1:x4; op2:x28; dest:x21; op1val:0xfeff000200400010;  op2val:0xffeffeffefff0007
TEST_P64_PNN_OP(smalbt, x21, $rd_hi, x4, x28, 0x0000000000000000, $correctval_hi, 0xfeff000200400010, 0xffeffeffefff0007, x1, 0, x12)

inst_18:
// rs1==x30, rs2==x23, rs2_h3_val == -9, rs2_h2_val == -16385, rs2_h1_val == 2, rs1_h3_val == -1, rs1_h2_val == -21846
// opcode: smalbt ; op1:x30; op2:x23; dest:x2; op1val:0xffffaaaafff6fffa;  op2val:0xfff7bfff00024000
TEST_P64_PNN_OP(smalbt, x2, $rd_hi, x30, x23, 0x0000000000000000, $correctval_hi, 0xffffaaaafff6fffa, 0xfff7bfff00024000, x1, 16, x12)

inst_19:
// rs1==x25, rs2==x30, rs2_h3_val == -5, rs2_h2_val == 8, rs2_h1_val == -16385, rs1_h1_val == -33, rs1_h3_val == -9
// opcode: smalbt ; op1:x25; op2:x30; dest:x8; op1val:0xfff7f7ffffdffffa;  op2val:0xfffb0008bffffffa
TEST_P64_PNN_OP(smalbt, x8, $rd_hi, x25, x30, 0x0000000000000000, $correctval_hi, 0xfff7f7ffffdffffa, 0xfffb0008bffffffa, x1, 32, x12)

inst_20:
// rs1==x20, rs2==x19, rs2_h3_val == -3, rs1_h0_val == 4096, rs2_h0_val == -1025, rs1_h2_val == -257
// opcode: smalbt ; op1:x20; op2:x19; dest:x7; op1val:0x0800feff00021000;  op2val:0xfffd00070005fbff
TEST_P64_PNN_OP(smalbt, x7, $rd_hi, x20, x19, 0x0000000000000000, $correctval_hi, 0x0800feff00021000, 0xfffd00070005fbff, x1, 48, x12)

inst_21:
// rs1==x10, rs2==x20, rs2_h3_val == -2, rs1_h0_val == -3, rs2_h2_val == 21845
// opcode: smalbt ; op1:x10; op2:x20; dest:x9; op1val:0xfff820000800fffd;  op2val:0xfffe55550007fffa
TEST_P64_PNN_OP(smalbt, x9, $rd_hi, x10, x20, 0x0000000000000000, $correctval_hi, 0xfff820000800fffd, 0xfffe55550007fffa, x1, 64, x12)

inst_22:
// rs1==x24, rs2==x27, rs2_h3_val == -32768, rs2_h1_val == -3, rs1_h3_val == -16385, rs1_h1_val == -21846
// opcode: smalbt ; op1:x24; op2:x27; dest:x18; op1val:0xbfffc000aaaafff9;  op2val:0x8000c000fffd4000
TEST_P64_PNN_OP(smalbt, x18, $rd_hi, x24, x27, 0x0000000000000000, $correctval_hi, 0xbfffc000aaaafff9, 0x8000c000fffd4000, x1, 80, x12)

inst_23:
// rs1==x29, rs2==x10, rs2_h3_val == 16384, rs2_h1_val == 256, rs2_h2_val == -2049, rs1_h2_val == 1024
// opcode: smalbt ; op1:x29; op2:x10; dest:x6; op1val:0xfffd040000030020;  op2val:0x4000f7ff01002000
TEST_P64_PNN_OP(smalbt, x6, $rd_hi, x29, x10, 0x0000000000000000, $correctval_hi, 0xfffd040000030020, 0x4000f7ff01002000, x1, 96, x12)

inst_24:
// rs1==x13, rs2==x11, rs2_h3_val == 8192, rs2_h0_val == -4097, rs1_h3_val == -4097, rs1_h0_val == -257
// opcode: smalbt ; op1:x13; op2:x11; dest:x3; op1val:0xefff00010006feff;  op2val:0x20005555c000efff
TEST_P64_PNN_OP(smalbt, x3, $rd_hi, x13, x11, 0x0000000000000000, $correctval_hi, 0xefff00010006feff, 0x20005555c000efff, x1, 112, x12)

inst_25:
// rs1==x5, rs2==x2, rs2_h3_val == 4096, rs1_h2_val == 4, rs2_h0_val == 0
// opcode: smalbt ; op1:x5; op2:x2; dest:x11; op1val:0x00400004fffc0010;  op2val:0x1000bffffffb0000
TEST_P64_PNN_OP(smalbt, x11, $rd_hi, x5, x2, 0x0000000000000000, $correctval_hi, 0x00400004fffc0010, 0x1000bffffffb0000, x1, 128, x12)

inst_26:
// rs1==x6, rs2==x15, rs2_h3_val == 2048, rs2_h0_val == 32, rs1_h1_val == -8193
// opcode: smalbt ; op1:x6; op2:x15; dest:x18; op1val:0xfffaffbfdffffffe;  op2val:0x0800fefffff80020
TEST_P64_PNN_OP(smalbt, x18, $rd_hi, x6, x15, 0x0000000000000000, $correctval_hi, 0xfffaffbfdffffffe, 0x0800fefffff80020, x1, 144, x12)

inst_27:
// rs1==x14, rs2==x29, rs2_h3_val == 1024, rs2_h1_val == -2, rs1_h3_val == 16384
// opcode: smalbt ; op1:x14; op2:x29; dest:x19; op1val:0x4000fff93ffffffe;  op2val:0x04005555fffe0200
TEST_P64_PNN_OP(smalbt, x19, $rd_hi, x14, x29, 0x0000000000000000, $correctval_hi, 0x4000fff93ffffffe, 0x04005555fffe0200, x1, 160, x12)

inst_28:
// rs1==x15, rs2==x3, rs2_h3_val == 512, rs2_h0_val == -2049, rs2_h2_val == -2, rs1_h1_val == -129
// opcode: smalbt ; op1:x15; op2:x3; dest:x4; op1val:0xfff60005ff7fffff;  op2val:0x0200fffefffdf7ff
TEST_P64_PNN_OP(smalbt, x4, $rd_hi, x15, x3, 0x0000000000000000, $correctval_hi, 0xfff60005ff7fffff, 0x0200fffefffdf7ff, x1, 176, x12)

inst_29:
// rs1==x27, rs2==x24, rs2_h3_val == 256, rs2_h1_val == 128, rs1_h0_val == 256, rs1_h2_val == 21845, rs1_h1_val == 32767
// opcode: smalbt ; op1:x27; op2:x24; dest:x18; op1val:0xfff755557fff0100;  op2val:0x0100fff900800006
TEST_P64_PNN_OP(smalbt, x18, $rd_hi, x27, x24, 0x0000000000000000, $correctval_hi, 0xfff755557fff0100, 0x0100fff900800006, x1, 192, x12)

inst_30:
// rs1==x7, rs2==x21, rs2_h3_val == 64, rs2_h1_val == 4, rs2_h0_val == 21845, rs2_h2_val == 128, rs1_h2_val == -2, rs1_h0_val == -129
// opcode: smalbt ; op1:x7; op2:x21; dest:x29; op1val:0xeffffffe7fffff7f;  op2val:0x0040008000045555
TEST_P64_PNN_OP(smalbt, x29, $rd_hi, x7, x21, 0x0000000000000000, $correctval_hi, 0xeffffffe7fffff7f, 0x0040008000045555, x1, 208, x12)

inst_31:
// rs1==x21, rs2==x22, rs2_h3_val == 32, rs1_h2_val == 64, rs2_h2_val == 1024
// opcode: smalbt ; op1:x21; op2:x22; dest:x20; op1val:0xfff800400040fff6;  op2val:0x0020040000020200
TEST_P64_PNN_OP(smalbt, x20, $rd_hi, x21, x22, 0x0000000000000000, $correctval_hi, 0xfff800400040fff6, 0x0020040000020200, x1, 224, x12)

inst_32:
// rs2_h3_val == 16, rs1_h3_val == 32767, rs2_h1_val == -8193, rs2_h0_val == -21846, rs1_h2_val == -9
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff7fffcfffa;  op2val:0x0010fffcdfffaaaa
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7ffffff7fffcfffa, 0x0010fffcdfffaaaa, x1, 240, x12)

inst_33:
// rs2_h3_val == 2, rs1_h1_val == 8
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xffbf04000008fffd;  op2val:0x00025555dfff2000
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbf04000008fffd, 0x00025555dfff2000, x1, 256, x2)

inst_34:
// rs1_h1_val == -5, rs2_h1_val == -513
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffefffbfbff;  op2val:0x10001000fdfffff6
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfefffffefffbfbff, 0x10001000fdfffff6, x1, 272, x2)

inst_35:
// rs1_h1_val == -2, rs2_h0_val == -32768, rs2_h1_val == 32767, rs2_h2_val == -32768
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff90010fffe0020;  op2val:0x800080007fff8000
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff90010fffe0020, 0x800080007fff8000, x1, 288, x2)

inst_36:
// rs1_h1_val == 8192, rs2_h2_val == -1025, rs1_h3_val == -17
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xffef000420000020;  op2val:0xbffffbffbffffff8
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffef000420000020, 0xbffffbffbffffff8, x1, 304, x2)

inst_37:
// rs1_h1_val == 4096, rs1_h2_val == -17, rs2_h0_val == 4, rs1_h3_val == 16
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x0010ffef1000feff;  op2val:0xfffdfffc00800004
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0010ffef1000feff, 0xfffdfffc00800004, x1, 320, x2)

inst_38:
// rs1_h1_val == 1024, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xffff04000400ff7f;  op2val:0x08000008fffdfffc
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff04000400ff7f, 0x08000008fffdfffc, x1, 336, x2)

inst_39:
// rs1_h1_val == 512, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffc02000007;  op2val:0x100055554000ffef
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff8fffc02000007, 0x100055554000ffef, x1, 352, x2)

inst_40:
// rs1_h1_val == 128, rs1_h3_val == 1024, rs1_h2_val == 512, rs2_h1_val == 4096
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x040002000080fffa;  op2val:0x0009aaaa10005555
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x040002000080fffa, 0x0009aaaa10005555, x1, 368, x2)

inst_41:
// rs1_h1_val == 32, rs2_h2_val == -65, rs1_h2_val == 2048, rs2_h0_val == 1
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff7080000200003;  op2val:0xaaaaffbf10000001
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7080000200003, 0xaaaaffbf10000001, x1, 384, x2)

inst_42:
// rs1_h1_val == 16, rs1_h3_val == 4
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x0004200000100007;  op2val:0x0200000600070006
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0004200000100007, 0x0200000600070006, x1, 400, x2)

inst_43:
// rs1_h1_val == 1, rs2_h3_val == 0
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffef0001fffa;  op2val:0x0000f7ffffbffffa
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbfffef0001fffa, 0x0000f7ffffbffffa, x1, 416, x2)

inst_44:
// rs1_h1_val == -1, rs1_h3_val == 256
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x01000007fffffff9;  op2val:0xfffafffc0009fffe
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x01000007fffffff9, 0xfffafffc0009fffe, x1, 432, x2)

inst_45:
// rs1_h0_val == -21846, rs1_h3_val == -1025
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfbff00800800aaaa;  op2val:0xbfffffef0006c000
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbff00800800aaaa, 0xbfffffef0006c000, x1, 448, x2)

inst_46:
// rs1_h0_val == -16385, rs2_h1_val == -1025
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x55553fff0000bfff;  op2val:0xefff0008fbff4000
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x55553fff0000bfff, 0xefff0008fbff4000, x1, 464, x2)

inst_47:
// rs1_h0_val == -8193, rs2_h1_val == 0, rs1_h2_val == 8
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfeff00080010dfff;  op2val:0xff7f08000000fffa
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeff00080010dfff, 0xff7f08000000fffa, x1, 480, x2)

inst_48:
// rs1_h0_val == -2049, rs2_h3_val == 1, rs2_h0_val == 2, rs2_h2_val == 32767
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xc000f7ff7ffff7ff;  op2val:0x00017fffffbf0002
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xc000f7ff7ffff7ff, 0x00017fffffbf0002, x1, 496, x2)

inst_49:
// rs1_h0_val == -513, rs2_h1_val == 1024, rs2_h0_val == 64
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xffeffff77ffffdff;  op2val:0xfbff000804000040
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffeffff77ffffdff, 0xfbff000804000040, x1, 512, x2)

inst_50:
// rs1_h0_val == -65, rs1_h2_val == 4096, rs2_h0_val == -5
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x08001000fffaffbf;  op2val:0xfff63fffffbffffb
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x08001000fffaffbf, 0xfff63fffffbffffb, x1, 528, x2)

inst_51:
// rs1_h0_val == -33, rs1_h1_val == 21845
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x010008005555ffdf;  op2val:0xfffefeffdffffffe
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x010008005555ffdf, 0xfffefeffdffffffe, x1, 544, x2)

inst_52:
// rs1_h0_val == -17, rs1_h3_val == 128, rs1_h2_val == -32768
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x008080000800ffef;  op2val:0x0006000901005555
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x008080000800ffef, 0x0006000901005555, x1, 560, x2)

inst_53:
// rs1_h0_val == -9, rs2_h2_val == -1, rs1_h2_val == -1025, rs1_h1_val == -4097
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffbffeffffff7;  op2val:0x0004ffffdfff4000
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7ffffbffeffffff7, 0x0004ffffdfff4000, x1, 576, x2)

inst_54:
// rs1_h0_val == -5, rs1_h3_val == 8192, rs2_h2_val == 256
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x20005555ffdffffb;  op2val:0x000501003fff0003
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x20005555ffdffffb, 0x000501003fff0003, x1, 592, x2)

inst_55:
// rs1_h0_val == 16384, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x0004fdfffff84000;  op2val:0x01000006fdfffff9
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0004fdfffff84000, 0x01000006fdfffff9, x1, 608, x2)

inst_56:
// rs1_h0_val == 2048, rs2_h2_val == 32, rs2_h0_val == -257
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfeffc00008000800;  op2val:0x3fff0020fffffeff
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfeffc00008000800, 0x3fff0020fffffeff, x1, 624, x2)

inst_57:
// rs1_h0_val == 128, rs2_h2_val == 16384
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0040fff80080;  op2val:0xfdff4000aaaafff9
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffb0040fff80080, 0xfdff4000aaaafff9, x1, 640, x2)

inst_58:
// rs2_h1_val == 1, rs1_h3_val == -2
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0010fffbffbf;  op2val:0x3fff00050001feff
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffe0010fffbffbf, 0x3fff00050001feff, x1, 656, x2)

inst_59:
// rs2_h0_val == 32767, rs2_h2_val == -5, rs1_h1_val == -17, rs1_h2_val == -129
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffbff7fffeffff9;  op2val:0xfffbfffb01007fff
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffbff7fffeffff9, 0xfffbfffb01007fff, x1, 672, x2)

inst_60:
// rs2_h0_val == -16385, rs1_h1_val == -16385, rs2_h2_val == 0
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x8000fff6bffffffa;  op2val:0xfff70000bfffbfff
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x8000fff6bffffffa, 0xfff70000bfffbfff, x1, 688, x2)

inst_61:
// rs2_h0_val == -8193, rs1_h3_val == -21846
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0002fbfff7ff;  op2val:0x0100ffff0080dfff
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaa0002fbfff7ff, 0x0100ffff0080dfff, x1, 704, x2)

inst_62:
// rs2_h0_val == -129, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfffdff7f0000fff8;  op2val:0x00085555ffffff7f
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffdff7f0000fff8, 0x00085555ffffff7f, x1, 720, x2)

inst_63:
// rs2_h0_val == -65, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fff6fff91000;  op2val:0x555500070004ffbf
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff6fff6fff91000, 0x555500070004ffbf, x1, 736, x2)

inst_64:
// rs2_h0_val == -33, rs1_h2_val == 256
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x00800100fffa0010;  op2val:0xfffefffffffeffdf
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00800100fffa0010, 0xfffefffffffeffdf, x1, 752, x2)

inst_65:
// rs2_h0_val == -3, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffeff0200fffe;  op2val:0x00080001aaaafffd
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbfffeff0200fffe, 0x00080001aaaafffd, x1, 768, x2)

inst_66:
// rs2_h0_val == 2048, rs1_h1_val == -257
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffbffefffff6;  op2val:0xfffb0009efff0800
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffffbffefffff6, 0xfffb0009efff0800, x1, 784, x2)

inst_67:
// rs2_h0_val == 256, rs2_h2_val == -4097
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xefff0400ffefffff;  op2val:0xff7fefffaaaa0100
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefff0400ffefffff, 0xff7fefffaaaa0100, x1, 800, x2)

inst_68:
// rs2_h0_val == -1, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000801000800;  op2val:0xbfff0009ff7fffff
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbff000801000800, 0xbfff0009ff7fffff, x1, 816, x2)

inst_69:
// rs1_h3_val == -2049, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffdff00085555;  op2val:0x0005fff904000007
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7fffdff00085555, 0x0005fff904000007, x1, 832, x2)

inst_70:
// rs1_h3_val == -513, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfdff2000fbffaaaa;  op2val:0x55550008fff8efff
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdff2000fbffaaaa, 0x55550008fff8efff, x1, 848, x2)

inst_71:
// rs1_h0_val == 8, rs1_h3_val == 1, rs2_h1_val == 8
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x0001000200090008;  op2val:0x001004000008fff6
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001000200090008, 0x001004000008fff6, x1, 864, x2)

inst_72:
// rs1_h0_val == 4, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000402000004;  op2val:0x4000c000fffcfbff
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdf000402000004, 0x4000c000fffcfbff, x1, 880, x2)

inst_73:
// rs1_h0_val == 2, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x0009ff7f20000002;  op2val:0xf7ff002000030006
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0009ff7f20000002, 0xf7ff002000030006, x1, 896, x2)

inst_74:
// rs1_h0_val == 1, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff9004080000001;  op2val:0x800040000007ffdf
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff9004080000001, 0x800040000007ffdf, x1, 912, x2)

inst_75:
// rs2_h2_val == -8193, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffbf00050004;  op2val:0xffdfdfff00200200
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000ffbf00050004, 0xffdfdfff00200200, x1, 928, x2)

inst_76:
// rs1_h3_val == 32, rs1_h2_val == 32767
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x00207fff0080fffc;  op2val:0xfffeffff01000400
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00207fff0080fffc, 0xfffeffff01000400, x1, 944, x2)

inst_77:
// rs2_h2_val == -33, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfdffff7f00200002;  op2val:0xfffcffdf0001fffa
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdffff7f00200002, 0xfffcffdf0001fffa, x1, 960, x2)

inst_78:
// rs2_h2_val == -9, rs2_h1_val == -17
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x0400000302000020;  op2val:0x0020fff7ffef5555
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0400000302000020, 0x0020fff7ffef5555, x1, 976, x2)

inst_79:
// rs1_h3_val == 0, rs2_h1_val == -33, rs1_h2_val == 0
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x000000000400fff7;  op2val:0x0010fff6ffdffff9
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000000000400fff7, 0x0010fff6ffdffff9, x1, 992, x2)

inst_80:
// rs1_h2_val == -16385, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x0000bffffff81000;  op2val:0xfffeffefff7f0005
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000bffffff81000, 0xfffeffefff7f0005, x1, 1008, x2)

inst_81:
// rs2_h2_val == 8192, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fff9fbff8000;  op2val:0xfffb20000003fff8
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff8fff9fbff8000, 0xfffb20000003fff8, x1, 1024, x2)

inst_82:
// rs1_h2_val == -8193, rs2_h2_val == 64
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x4000dfff0000ffff;  op2val:0x00100040aaaac000
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x4000dfff0000ffff, 0x00100040aaaac000, x1, 1040, x2)

inst_83:
// rs2_h2_val == 512, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xefffc00001000008;  op2val:0xfff90200c0000009
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefffc00001000008, 0xfff90200c0000009, x1, 1056, x2)

inst_84:
// rs1_h2_val == -33, rs2_h2_val == 16
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x0003ffdfffefdfff;  op2val:0xff7f001000000040
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0003ffdfffefdfff, 0xff7f001000000040, x1, 1072, x2)

inst_85:
// rs2_h1_val == 2048, rs1_h2_val == 32
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x0007002002000100;  op2val:0xf7ff040008000000
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0007002002000100, 0xf7ff040008000000, x1, 1088, x2)

inst_86:
// rs1_h2_val == 16384, rs2_h1_val == 21845
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa400020000010;  op2val:0x3fff000655557fff
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaa400020000010, 0x3fff000655557fff, x1, 1104, x2)

inst_87:
// rs2_h1_val == -2049, rs1_h2_val == -1
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x0003ffff0002ffbf;  op2val:0x00080040f7fffdff
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0003ffff0002ffbf, 0x00080040f7fffdff, x1, 1120, x2)

inst_88:
// rs1_h3_val == 4096, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x10003fff80008000;  op2val:0xffefc000fff70010
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x10003fff80008000, 0xffefc000fff70010, x1, 1136, x2)

inst_89:
// rs2_h2_val == 4, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffa00048000;  op2val:0x00800004dfffffff
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbffffa00048000, 0x00800004dfffffff, x1, 1152, x2)

inst_90:
// rs2_h1_val == -32768, rs1_h1_val == -65
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x01000006ffbf0009;  op2val:0x1000aaaa80000008
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x01000006ffbf0009, 0x1000aaaa80000008, x1, 1168, x2)

inst_91:
// rs2_h1_val == 8192, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x00040800fefffff9;  op2val:0xfff6fffa20000001
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00040800fefffff9, 0xfff6fffa20000001, x1, 1184, x2)

inst_92:
// rs2_h3_val == -1, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x0100fff70010ffff;  op2val:0xfffffeff00200004
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0100fff70010ffff, 0xfffffeff00200004, x1, 1200, x2)

inst_93:
// rs2_h2_val == 2, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x00030040fdffffbf;  op2val:0x00080002ff7f2000
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00030040fdffffbf, 0x00080002ff7f2000, x1, 1216, x2)

inst_94:
// rs2_h1_val == 16, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x0080c00000012000;  op2val:0xfff755550010fffd
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080c00000012000, 0xfff755550010fffd, x1, 1232, x2)

inst_95:
// rs1_h1_val == -2049, 
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xfff9effff7ff4000;  op2val:0x0200efff00800004
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff9effff7ff4000, 0x0200efff00800004, x1, 1248, x2)

inst_96:
// rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h1_val == -3, rs2_h3_val == -129, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == 1024, rs1_h3_val == -33, rs1_h0_val == -4097, rs2_h1_val == 64, rs2_h2_val == -21846
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff9fffdefff;  op2val:0xff7faaaa00400400
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdffff9fffdefff, 0xff7faaaa00400400, x1, 1264, x2)

inst_97:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 64, rs2_h3_val == -33, rs1_h1_val == 16384, rs2_h2_val == -129, rs1_h0_val == 32, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == -17, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x0040ffbf40000020;  op2val:0xffdfff7f0040ffef
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040ffbf40000020, 0xffdfff7f0040ffef, x1, 1280, x2)

inst_98:
// rs2_h3_val == -2049, rs1_h3_val == 2, rs2_h1_val == -1, rs1_h2_val == 8192
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x00022000fff6fffc;  op2val:0xf7ffaaaaffff2000
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00022000fff6fffc, 0xf7ffaaaaffff2000, x1, 1296, x2)

inst_99:
// rs2_h3_val == -257, rs1_h3_val == 512, rs2_h0_val == 16, rs2_h2_val == -3, rs1_h0_val == 64
// opcode: smalbt ; op1:x30; op2:x29; dest:x31; op1val:0x0200f7ffc0000040;  op2val:0xfefffffdffff0010
TEST_P64_PNN_OP(smalbt, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0200f7ffc0000040, 0xfefffffdffff0010, x1, 1312, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 166*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
