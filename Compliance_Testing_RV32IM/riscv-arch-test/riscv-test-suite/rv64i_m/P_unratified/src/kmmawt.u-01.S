
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmmawt.u instruction of the RISC-V RV64PZicsr extension for the kmmawt.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmmawt.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 == rd != rs2, rs1==x11, rs2==x9, rd==x11, rs1_w0_val == -2147483648, rs2_h0_val == 8192, rs1_w1_val == 4194304, rs2_h1_val == -17
// opcode: kmmawt.u ; op1:x11; op2:x9; dest:x11; op1val:0x40000080000000;  op2val:0xfff93fffffef2000
TEST_PKRR_OP(kmmawt.u, x11, x11, x9, 0x0000000000000000, 0x40000080000000, 0xfff93fffffef2000, x11, x4, 0, x17)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x2, rs2==x25, rd==x26, rs2_h3_val == -21846, rs2_h1_val == -2, rs2_h0_val == 512, rs2_h2_val == 21845, rs1_w0_val == -32769
// opcode: kmmawt.u ; op1:x2; op2:x25; dest:x26; op1val:0xfffffffaffff7fff;  op2val:0xaaaa5555fffe0200
TEST_PKRR_OP(kmmawt.u, x26, x2, x25, 0x0000000000000000, 0xfffffffaffff7fff, 0xaaaa5555fffe0200, x2, x4, 16, x17)

inst_2:
// rs1 == rs2 != rd, rs1==x13, rs2==x13, rd==x0, rs2_h3_val == 21845, rs1_w0_val == 33554432, rs2_h1_val == 8192, rs2_h0_val == 2, rs2_h2_val == 32767
// opcode: kmmawt.u ; op1:x13; op2:x13; dest:x0; op1val:0xfffffff602000000;  op2val:0x55557fff20000002
TEST_PKRR_OP(kmmawt.u, x0, x13, x13, 0x0000000000000000, 0xfffffff602000000, 0x55557fff20000002, x13, x4, 32, x17)

inst_3:
// rs1 == rs2 == rd, rs1==x10, rs2==x10, rd==x10, rs2_h3_val == 32767, rs2_h1_val == 1024, rs2_h0_val == 8, rs2_h2_val == -513, rs1_w0_val == -1, rs1_w1_val == -67108865
// opcode: kmmawt.u ; op1:x10; op2:x10; dest:x10; op1val:0xfbffffffffffffff;  op2val:0x7ffffdff04000008
TEST_PKRR_OP(kmmawt.u, x10, x10, x10, 0x0000000000000000, 0xfbffffffffffffff, 0x7ffffdff04000008, x10, x4, 48, x17)

inst_4:
// rs2 == rd != rs1, rs1==x6, rs2==x19, rd==x19, rs2_h3_val == -16385, rs1_w0_val == -4194305, rs2_h0_val == 16, rs1_w1_val == 2147483647, rs2_h2_val == -2
// opcode: kmmawt.u ; op1:x6; op2:x19; dest:x19; op1val:0x7fffffffffbfffff;  op2val:0xbffffffefffa0010
TEST_PKRR_OP(kmmawt.u, x19, x6, x19, 0x0000000000000000, 0x7fffffffffbfffff, 0xbffffffefffa0010, x6, x4, 64, x17)

inst_5:
// rs1==x16, rs2==x18, rd==x25, rs2_h3_val == -8193, rs2_h2_val == -129, rs2_h0_val == -16385, rs1_w0_val == -65, rs1_w1_val == -4194305, rs2_h1_val == 2048
// opcode: kmmawt.u ; op1:x16; op2:x18; dest:x25; op1val:0xffbfffffffffffbf;  op2val:0xdfffff7f0800bfff
TEST_PKRR_OP(kmmawt.u, x25, x16, x18, 0x0000000000000000, 0xffbfffffffffffbf, 0xdfffff7f0800bfff, x16, x4, 80, x17)

inst_6:
// rs1==x30, rs2==x23, rd==x5, rs2_h3_val == -4097, rs2_h2_val == -16385, rs1_w1_val == 32, rs1_w0_val == 64
// opcode: kmmawt.u ; op1:x30; op2:x23; dest:x5; op1val:0x00002000000040;  op2val:0xefffbfff0007fff8
TEST_PKRR_OP(kmmawt.u, x5, x30, x23, 0x0000000000000000, 0x00002000000040, 0xefffbfff0007fff8, x30, x4, 96, x17)

inst_7:
// rs1==x3, rs2==x7, rd==x28, rs2_h3_val == -2049, rs1_w1_val == -5, rs1_w0_val == -524289, rs2_h1_val == -9, rs2_h2_val == 0
// opcode: kmmawt.u ; op1:x3; op2:x7; dest:x28; op1val:0xfffffffbfff7ffff;  op2val:0xf7ff0000fff70005
TEST_PKRR_OP(kmmawt.u, x28, x3, x7, 0x0000000000000000, 0xfffffffbfff7ffff, 0xf7ff0000fff70005, x3, x4, 112, x17)

inst_8:
// rs1==x14, rs2==x11, rd==x13, rs2_h3_val == -1025, rs2_h0_val == 1024, rs1_w1_val == 0, rs2_h2_val == -5, rs1_w0_val == 1, rs2_h1_val == 16384
// opcode: kmmawt.u ; op1:x14; op2:x11; dest:x13; op1val:0x00000000000001;  op2val:0xfbfffffb40000400
TEST_PKRR_OP(kmmawt.u, x13, x14, x11, 0x0000000000000000, 0x00000000000001, 0xfbfffffb40000400, x14, x4, 128, x17)

inst_9:
// rs1==x21, rs2==x24, rd==x1, rs2_h3_val == -513, rs1_w1_val == 512, rs1_w0_val == 1024, rs2_h1_val == -8193
// opcode: kmmawt.u ; op1:x21; op2:x24; dest:x1; op1val:0x00020000000400;  op2val:0xfdff7fffdfff0003
TEST_PKRR_OP(kmmawt.u, x1, x21, x24, 0x0000000000000000, 0x00020000000400, 0xfdff7fffdfff0003, x21, x4, 144, x17)

inst_10:
// rs1==x26, rs2==x14, rd==x30, rs2_h3_val == -257, rs2_h0_val == 16384, rs1_w1_val == 8192, rs2_h1_val == -16385, rs2_h2_val == 8192, rs1_w0_val == -33554433
// opcode: kmmawt.u ; op1:x26; op2:x14; dest:x30; op1val:0x002000fdffffff;  op2val:0xfeff2000bfff4000
TEST_PKRR_OP(kmmawt.u, x30, x26, x14, 0x0000000000000000, 0x002000fdffffff, 0xfeff2000bfff4000, x26, x4, 160, x17)

inst_11:
// rs1==x24, rs2==x2, rd==x22, rs2_h3_val == -129, rs2_h2_val == -1, rs2_h0_val == -33, rs2_h1_val == -129, rs1_w0_val == -2097153
// opcode: kmmawt.u ; op1:x24; op2:x2; dest:x22; op1val:0x3fffffffffdfffff;  op2val:0xff7fffffff7fffdf
TEST_PKRR_OP(kmmawt.u, x22, x24, x2, 0x0000000000000000, 0x3fffffffffdfffff, 0xff7fffffff7fffdf, x24, x4, 176, x17)

inst_12:
// rs1==x1, rs2==x22, rd==x2, rs2_h3_val == -65, rs1_w0_val == 268435456, rs2_h1_val == 256, rs1_w1_val == 536870912
// opcode: kmmawt.u ; op1:x1; op2:x22; dest:x2; op1val:0x2000000010000000;  op2val:0xffbffff801002000
TEST_PKRR_OP(kmmawt.u, x2, x1, x22, 0x0000000000000000, 0x2000000010000000, 0xffbffff801002000, x1, x4, 192, x17)

inst_13:
// rs1==x23, rs2==x12, rd==x7, rs2_h3_val == -33, rs2_h1_val == 128, rs2_h2_val == 2, rs2_h0_val == 32767, rs1_w0_val == -2, rs1_w1_val == 2097152
// opcode: kmmawt.u ; op1:x23; op2:x12; dest:x7; op1val:0x200000fffffffe;  op2val:0xffdf000200807fff
TEST_PKRR_OP(kmmawt.u, x7, x23, x12, 0x0000000000000000, 0x200000fffffffe, 0xffdf000200807fff, x23, x4, 208, x17)

inst_14:
// rs1==x25, rs2==x5, rd==x15, rs2_h3_val == -17, rs1_w1_val == -16385, rs1_w0_val == -5, rs2_h1_val == -1, rs2_h0_val == -3
// opcode: kmmawt.u ; op1:x25; op2:x5; dest:x15; op1val:0xffffbffffffffffb;  op2val:0xffefbffffffffffd
TEST_PKRR_OP(kmmawt.u, x15, x25, x5, 0x0000000000000000, 0xffffbffffffffffb, 0xffefbffffffffffd, x25, x4, 224, x17)

inst_15:
// rs1==x8, rs2==x28, rd==x9, rs2_h3_val == -9, rs1_w0_val == 536870912
// opcode: kmmawt.u ; op1:x8; op2:x28; dest:x9; op1val:0x00000020000000;  op2val:0xfff7ffffdfff0003
TEST_PKRR_OP(kmmawt.u, x9, x8, x28, 0x0000000000000000, 0x00000020000000, 0xfff7ffffdfff0003, x8, x4, 240, x17)

inst_16:
// rs1==x31, rs2==x1, rd==x24, rs2_h3_val == -5, rs2_h0_val == 64, rs1_w1_val == -268435457
// opcode: kmmawt.u ; op1:x31; op2:x1; dest:x24; op1val:0xefffffff00000006;  op2val:0xfffbfffcfff90040
TEST_PKRR_OP(kmmawt.u, x24, x31, x1, 0x0000000000000000, 0xefffffff00000006, 0xfffbfffcfff90040, x31, x4, 256, x17)

inst_17:
// rs1==x22, rs2==x16, rd==x31, rs2_h3_val == -3, rs2_h1_val == 1, rs1_w1_val == 268435456, rs2_h2_val == 256
// opcode: kmmawt.u ; op1:x22; op2:x16; dest:x31; op1val:0x10000000ffff7fff;  op2val:0xfffd01000001fffa
TEST_PKRR_OP(kmmawt.u, x31, x22, x16, 0x0000000000000000, 0x10000000ffff7fff, 0xfffd01000001fffa, x22, x4, 272, x1)

inst_18:
// rs1==x19, rs2==x15, rd==x3, rs2_h3_val == -2, rs2_h2_val == -33, rs1_w1_val == -65, rs1_w0_val == 1073741824
// opcode: kmmawt.u ; op1:x19; op2:x15; dest:x3; op1val:0xffffffbf40000000;  op2val:0xfffeffdfc000fffc
TEST_PKRR_OP(kmmawt.u, x3, x19, x15, 0x0000000000000000, 0xffffffbf40000000, 0xfffeffdfc000fffc, x19, x4, 288, x1)

inst_19:
// rs1==x0, rs2==x17, rd==x21, rs2_h3_val == -32768, rs1_w1_val == -3, rs2_h2_val == 4, rs2_h0_val == 128
// opcode: kmmawt.u ; op1:x0; op2:x17; dest:x21; op1val:0xfffffffd40000000;  op2val:0x8000000400090080
TEST_PKRR_OP(kmmawt.u, x21, x0, x17, 0x0000000000000000, 0xfffffffd40000000, 0x8000000400090080, x0, x4, 304, x1)
RVTEST_SIGBASE(x10,signature_x10_0)

inst_20:
// rs1==x4, rs2==x30, rd==x29, rs2_h3_val == 16384, rs2_h2_val == 2048, rs2_h1_val == -2049
// opcode: kmmawt.u ; op1:x4; op2:x30; dest:x29; op1val:0xfffffff6c0000000;  op2val:0x40000800f7ffbfff
TEST_PKRR_OP(kmmawt.u, x29, x4, x30, 0x0000000000000000, 0xfffffff6c0000000, 0x40000800f7ffbfff, x4, x10, 0, x1)

inst_21:
// rs1==x9, rs2==x20, rd==x17, rs2_h3_val == 8192, rs2_h1_val == 4, rs2_h2_val == 4096, rs1_w0_val == 0, rs1_w1_val == -16777217
// opcode: kmmawt.u ; op1:x9; op2:x20; dest:x17; op1val:0xfeffffff00000000;  op2val:0x2000100000040400
TEST_PKRR_OP(kmmawt.u, x17, x9, x20, 0x0000000000000000, 0xfeffffff00000000, 0x2000100000040400, x9, x10, 16, x1)

inst_22:
// rs1==x12, rs2==x8, rd==x18, rs2_h3_val == 4096, rs1_w1_val == -131073, rs1_w0_val == -2049, rs2_h2_val == -257
// opcode: kmmawt.u ; op1:x12; op2:x8; dest:x18; op1val:0xfffdfffffffff7ff;  op2val:0x1000fefffff8fff6
TEST_PKRR_OP(kmmawt.u, x18, x12, x8, 0x0000000000000000, 0xfffdfffffffff7ff, 0x1000fefffff8fff6, x12, x10, 32, x1)

inst_23:
// rs1==x15, rs2==x4, rd==x20, rs2_h3_val == 2048, rs2_h1_val == -3, rs1_w0_val == 134217728, rs2_h0_val == -2049, rs1_w1_val == 8
// opcode: kmmawt.u ; op1:x15; op2:x4; dest:x20; op1val:0x00000808000000;  op2val:0x800fffbfffdf7ff
TEST_PKRR_OP(kmmawt.u, x20, x15, x4, 0x0000000000000000, 0x00000808000000, 0x800fffbfffdf7ff, x15, x10, 48, x1)

inst_24:
// rs1==x17, rs2==x0, rd==x14, rs2_h3_val == 1024, rs1_w1_val == 65536, rs2_h0_val == 2048, rs2_h2_val == -21846, rs1_w0_val == 1431655765
// opcode: kmmawt.u ; op1:x17; op2:x0; dest:x14; op1val:0x01000055555555;  op2val:0x400aaaa40000800
TEST_PKRR_OP(kmmawt.u, x14, x17, x0, 0x0000000000000000, 0x01000055555555, 0x400aaaa40000800, x17, x10, 64, x1)

inst_25:
// rs1==x18, rs2==x6, rd==x12, rs2_h3_val == 512, rs1_w1_val == 128, rs2_h1_val == 64, rs2_h0_val == 1
// opcode: kmmawt.u ; op1:x18; op2:x6; dest:x12; op1val:0x000080ffffffff;  op2val:0x200ffff00400001
TEST_PKRR_OP(kmmawt.u, x12, x18, x6, 0x0000000000000000, 0x000080ffffffff, 0x200ffff00400001, x18, x10, 80, x1)

inst_26:
// rs1==x20, rs2==x29, rd==x27, rs2_h3_val == 256, rs2_h1_val == 2
// opcode: kmmawt.u ; op1:x20; op2:x29; dest:x27; op1val:0xfffffffa00000040;  op2val:0x100555500020400
TEST_PKRR_OP(kmmawt.u, x27, x20, x29, 0x0000000000000000, 0xfffffffa00000040, 0x100555500020400, x20, x10, 96, x1)

inst_27:
// rs1==x29, rs2==x31, rd==x4, rs2_h3_val == 128, rs2_h0_val == 4096, rs2_h1_val == -32768, rs1_w1_val == -1073741825, rs1_w0_val == 128
// opcode: kmmawt.u ; op1:x29; op2:x31; dest:x4; op1val:0xbfffffff00000080;  op2val:0x807fff80001000
TEST_PKRR_OP(kmmawt.u, x4, x29, x31, 0x0000000000000000, 0xbfffffff00000080, 0x807fff80001000, x29, x10, 112, x1)

inst_28:
// rs1==x28, rs2==x26, rd==x23, rs2_h3_val == 64, rs2_h2_val == -8193, rs1_w0_val == 256
// opcode: kmmawt.u ; op1:x28; op2:x26; dest:x23; op1val:0x2000000000000100;  op2val:0x40dfff00060200
TEST_PKRR_OP(kmmawt.u, x23, x28, x26, 0x0000000000000000, 0x2000000000000100, 0x40dfff00060200, x28, x10, 128, x1)

inst_29:
// rs1==x7, rs2==x3, rd==x16, rs2_h3_val == 32, rs2_h1_val == -21846, rs1_w1_val == 16, rs2_h0_val == -257
// opcode: kmmawt.u ; op1:x7; op2:x3; dest:x16; op1val:0x00001000000000;  op2val:0x20fdffaaaafeff
TEST_PKRR_OP(kmmawt.u, x16, x7, x3, 0x0000000000000000, 0x00001000000000, 0x20fdffaaaafeff, x7, x10, 144, x1)

inst_30:
// rs1==x5, rs2==x21, rd==x8, rs2_h3_val == 16, rs1_w0_val == -268435457, rs1_w1_val == -134217729
// opcode: kmmawt.u ; op1:x5; op2:x21; dest:x8; op1val:0xf7ffffffefffffff;  op2val:0x10dffffff90080
TEST_PKRR_OP(kmmawt.u, x8, x5, x21, 0x0000000000000000, 0xf7ffffffefffffff, 0x10dffffff90080, x5, x10, 160, x1)

inst_31:
// rs1==x27, rs2_h3_val == 8, rs1_w1_val == 64, rs1_w0_val == -513
// opcode: kmmawt.u ; op1:x27; op2:x25; dest:x2; op1val:0x000040fffffdff;  op2val:0x08fff9fffe0080
TEST_PKRR_OP(kmmawt.u, x2, x27, x25, 0x0000000000000000, 0x000040fffffdff, 0x08fff9fffe0080, x27, x10, 176, x1)

inst_32:
// rs2==x27, rs2_h3_val == 4, rs2_h0_val == 32
// opcode: kmmawt.u ; op1:x2; op2:x27; dest:x1; op1val:0xeffffffffdffffff;  op2val:0x04bfff00400020
TEST_PKRR_OP(kmmawt.u, x1, x2, x27, 0x0000000000000000, 0xeffffffffdffffff, 0x04bfff00400020, x2, x10, 192, x3)

inst_33:
// rd==x6, rs2_h3_val == 2, rs1_w0_val == -4097, rs2_h2_val == 1
// opcode: kmmawt.u ; op1:x9; op2:x8; dest:x6; op1val:0x400000ffffefff;  op2val:0x020001ff7f4000
TEST_PKRR_OP(kmmawt.u, x6, x9, x8, 0x0000000000000000, 0x400000ffffefff, 0x020001ff7f4000, x9, x10, 208, x3)

inst_34:
// rs2_h3_val == 1, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffffffe;  op2val:0x01ff7f0040fff6
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x002000fffffffe, 0x01ff7f0040fff6, x30, x10, 224, x3)

inst_35:
// rs2_h3_val == 0, rs1_w1_val == 131072, rs1_w0_val == -16777217, rs2_h0_val == -129
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x020000feffffff;  op2val:0x00aaaafff9ff7f
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x020000feffffff, 0x00aaaafff9ff7f, x30, x10, 240, x3)

inst_36:
// rs2_h3_val == -1, rs2_h1_val == -257, rs1_w1_val == -536870913
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffffc;  op2val:0xffff0003feff0006
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffffc, 0xffff0003feff0006, x30, x10, 256, x3)

inst_37:
// rs2_h2_val == -4097, rs1_w1_val == -257
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff3fffffff;  op2val:0x07effffeff3fff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffffeff3fffffff, 0x07effffeff3fff, x30, x10, 272, x3)

inst_38:
// rs1_w0_val == 2097152, rs2_h0_val == -4097, rs1_w1_val == -17
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00200000;  op2val:0x80000030006efff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xffffffef00200000, 0x80000030006efff, x30, x10, 288, x3)

inst_39:
// rs1_w0_val == 1048576, rs1_w1_val == 1073741824, rs2_h2_val == -32768
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000100000;  op2val:0x1000800000400400
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x4000000000100000, 0x1000800000400400, x30, x10, 304, x3)

inst_40:
// rs1_w0_val == 524288, rs1_w1_val == -33
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00080000;  op2val:0x05fffc00033fff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xffffffdf00080000, 0x05fffc00033fff, x30, x10, 320, x3)

inst_41:
// rs1_w0_val == 262144, rs2_h2_val == -2049
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00040000;  op2val:0xfffaf7ff80004000
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffffeff00040000, 0xfffaf7ff80004000, x30, x10, 336, x3)

inst_42:
// rs1_w0_val == 131072, rs2_h1_val == 4096, rs1_w1_val == -9
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700020000;  op2val:0x01ffff10003fff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffffff700020000, 0x01ffff10003fff, x30, x10, 352, x3)

inst_43:
// rs1_w0_val == 65536, rs2_h1_val == 21845, rs1_w1_val == 4096, rs2_h2_val == 128
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00100000010000;  op2val:0xfffe008055550003
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x00100000010000, 0xfffe008055550003, x30, x10, 368, x3)

inst_44:
// rs1_w0_val == 32768, rs1_w1_val == 8388608, rs2_h0_val == -2
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x80000000008000;  op2val:0x200000010007fffe
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x80000000008000, 0x200000010007fffe, x30, x10, 384, x3)

inst_45:
// rs1_w0_val == 16384, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00004000;  op2val:0xff7f00090004ff7f
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x3fffffff00004000, 0xff7f00090004ff7f, x30, x10, 400, x3)

inst_46:
// rs1_w0_val == 8192, rs1_w1_val == -33554433, rs2_h1_val == -4097
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00002000;  op2val:0x100c000effffffe
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfdffffff00002000, 0x100c000effffffe, x30, x10, 416, x3)

inst_47:
// rs1_w0_val == 4096, rs2_h2_val == -65, rs2_h0_val == -21846
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00001000;  op2val:0x04ffbffff6aaaa
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xffffffdf00001000, 0x04ffbffff6aaaa, x30, x10, 432, x3)

inst_48:
// rs1_w0_val == 2048, rs2_h0_val == -1025, rs1_w1_val == -1048577
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000800;  op2val:0x07feff0005fbff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xffefffff00000800, 0x07feff0005fbff, x30, x10, 448, x3)

inst_49:
// rs1_w0_val == 512, rs2_h0_val == -8193
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000200;  op2val:0x400c000fffddfff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x2000000000000200, 0x400c000fffddfff, x30, x10, 464, x3)

inst_50:
// rs1_w0_val == 32, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000020;  op2val:0xbfff800004000006
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x4000000000000020, 0xbfff800004000006, x30, x10, 480, x3)

inst_51:
// rs1_w0_val == 16, rs2_h1_val == -5
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000010;  op2val:0xeffffefffffbefff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000010, 0xeffffefffffbefff, x30, x10, 496, x3)

inst_52:
// rs1_w0_val == 8, rs2_h0_val == -1, rs2_h1_val == 32767
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000008;  op2val:0x0100017fffffff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x00000900000008, 0x0100017fffffff, x30, x10, 512, x3)

inst_53:
// rs1_w0_val == 4, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000004;  op2val:0xfffd00010080c000
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xffffffef00000004, 0xfffd00010080c000, x30, x10, 528, x3)

inst_54:
// rs1_w0_val == 2, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000002;  op2val:0x100f7fffffdfeff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x00002000000002, 0x100f7fffffdfeff, x30, x10, 544, x3)

inst_55:
// rs2_h2_val == -1025, rs1_w1_val == 16777216, rs2_h1_val == -65, rs2_h0_val == 256, rs1_w0_val == -65537
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffeffff;  op2val:0xfffdfbffffbf0100
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x1000000fffeffff, 0xfffdfbffffbf0100, x30, x10, 560, x3)

inst_56:
// rs2_h2_val == -17, rs1_w0_val == 2147483647
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x0000207fffffff;  op2val:0xfffcffef1000bfff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x0000207fffffff, 0xfffcffef1000bfff, x30, x10, 576, x3)

inst_57:
// rs2_h2_val == -9, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x80000000100000;  op2val:0x10fff7feff3fff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x80000000100000, 0x10fff7feff3fff, x30, x10, 592, x3)

inst_58:
// rs2_h2_val == -3, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000006;  op2val:0x07fffd0001dfff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x1000000000000006, 0x07fffd0001dfff, x30, x10, 608, x3)

inst_59:
// rs2_h2_val == 16384, rs1_w1_val == 2048
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00080080000000;  op2val:0x55554000ffeffffe
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x00080080000000, 0x55554000ffeffffe, x30, x10, 624, x3)

inst_60:
// rs2_h2_val == 1024, rs1_w1_val == -2147483648, rs2_h1_val == 32
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x8000000040000000;  op2val:0x0404000020f7ff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x8000000040000000, 0x0404000020f7ff, x30, x10, 640, x3)

inst_61:
// rs2_h2_val == 512, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000006;  op2val:0xfffd02007ffffff9
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000006, 0xfffd02007ffffff9, x30, x10, 656, x3)

inst_62:
// rs2_h2_val == 64, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff3fffffff;  op2val:0x0100404000ffff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfbffffff3fffffff, 0x0100404000ffff, x30, x10, 672, x3)

inst_63:
// rs2_h2_val == 32, rs1_w0_val == -1025
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffffbff;  op2val:0x5555002020000200
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x40000000fffffbff, 0x5555002020000200, x30, x10, 688, x3)

inst_64:
// rs2_h2_val == 16, rs1_w0_val == 16777216, rs1_w1_val == -524289
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff01000000;  op2val:0xfdff001010000800
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfff7ffff01000000, 0xfdff001010000800, x30, x10, 704, x3)

inst_65:
// rs2_h2_val == 8, rs1_w1_val == -32769
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffffffa;  op2val:0xffff000810000020
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffffffa, 0xffff000810000020, x30, x10, 720, x3)

inst_66:
// rs2_h1_val == -1025, rs2_h0_val == -9
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffffc;  op2val:0xfff6fff7fbfffff7
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x10000000fffffffc, 0xfff6fff7fbfffff7, x30, x10, 736, x3)

inst_67:
// rs1_w0_val == 4194304, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00008000400000;  op2val:0xfffb0002aaaa0020
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x00008000400000, 0xfffb0002aaaa0020, x30, x10, 752, x3)

inst_68:
// rs2_h0_val == 4, rs1_w1_val == 1
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000001;  op2val:0x030200ffef0004
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x00000100000001, 0x030200ffef0004, x30, x10, 768, x3)

inst_69:
// rs2_h0_val == 0, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffffefff;  op2val:0xefff0007efff0000
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x000010ffffefff, 0xefff0007efff0000, x30, x10, 784, x3)

inst_70:
// rs1_w1_val == -1431655766, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00020000;  op2val:0xfffcffdf0020c000
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00020000, 0xfffcffdf0020c000, x30, x10, 800, x3)

inst_71:
// rs1_w1_val == 1431655765, rs2_h1_val == 8
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000000;  op2val:0xf7fffdff0008ff7f
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x5555555500000000, 0xf7fffdff0008ff7f, x30, x10, 816, x3)

inst_72:
// rs1_w1_val == -8388609, rs1_w0_val == -8388609
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffff7fffff;  op2val:0x555500030005feff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xff7fffffff7fffff, 0x555500030005feff, x30, x10, 832, x3)

inst_73:
// rs1_w1_val == -2097153, rs1_w0_val == -262145
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffbffff;  op2val:0x200003ff7f0003
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xffdffffffffbffff, 0x200003ff7f0003, x30, x10, 848, x3)

inst_74:
// rs1_w1_val == -262145, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffffffffffa;  op2val:0x10000003fffafffe
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffbfffffffffffa, 0x10000003fffafffe, x30, x10, 864, x3)

inst_75:
// rs1_w1_val == -65537, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00010000;  op2val:0xfffa00020800dfff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffeffff00010000, 0xfffa00020800dfff, x30, x10, 880, x3)

inst_76:
// rs1_w1_val == -8193, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000002;  op2val:0xffbffffc3fff0009
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000002, 0xffbffffc3fff0009, x30, x10, 896, x3)

inst_77:
// rs1_w1_val == -4097, rs1_w0_val == -1073741825
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffbfffffff;  op2val:0x0810000001fff7
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xffffefffbfffffff, 0x0810000001fff7, x30, x10, 912, x3)

inst_78:
// rs1_w1_val == -2049, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffbfffffff;  op2val:0xaaaa7fff80000006
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffff7ffbfffffff, 0xaaaa7fff80000006, x30, x10, 928, x3)

inst_79:
// rs1_w1_val == -1025, rs2_h0_val == 21845
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff55555555;  op2val:0xffdfffbf00075555
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffffbff55555555, 0xffdfffbf00075555, x30, x10, 944, x3)

inst_80:
// rs1_w1_val == -513, rs2_h1_val == -513
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff08000000;  op2val:0xfefffffbfdfffff9
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffffdff08000000, 0xfefffffbfdfffff9, x30, x10, 960, x3)

inst_81:
// rs1_w1_val == -129, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffefff;  op2val:0xffdffffa01000000
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffefff, 0xffdffffa01000000, x30, x10, 976, x3)

inst_82:
// rs1_w1_val == -2, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00002000;  op2val:0xffff3fff0006fff9
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffffffe00002000, 0xffff3fff0006fff9, x30, x10, 992, x3)

inst_83:
// rs1_w1_val == 134217728, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fdffffff;  op2val:0x0000400009c000
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x8000000fdffffff, 0x0000400009c000, x30, x10, 1008, x3)

inst_84:
// rs1_w1_val == 67108864, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffffe;  op2val:0xfffc0040fffffff6
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x4000000fffffffe, 0xfffc0040fffffff6, x30, x10, 1024, x3)

inst_85:
// rs1_w1_val == 33554432, rs1_w0_val == -536870913
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000dfffffff;  op2val:0xfffaf7ff0007feff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x2000000dfffffff, 0xfffaf7ff0007feff, x30, x10, 1040, x3)

inst_86:
// rs1_w1_val == 1048576, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x100000fffffffe;  op2val:0xfffc00400100feff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x100000fffffffe, 0xfffc00400100feff, x30, x10, 1056, x3)

inst_87:
// rs1_w1_val == 524288, rs1_w0_val == -1431655766
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x080000aaaaaaaa;  op2val:0xfeff0000fffa0000
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x080000aaaaaaaa, 0xfeff0000fffa0000, x30, x10, 1072, x3)

inst_88:
// rs1_w1_val == 262144, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffffffa;  op2val:0xfff700003fff0002
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x040000fffffffa, 0xfff700003fff0002, x30, x10, 1088, x3)

inst_89:
// rs1_w1_val == 32768, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000400;  op2val:0x7fffffef00070000
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x00800000000400, 0x7fffffef00070000, x30, x10, 1104, x3)

inst_90:
// rs1_w1_val == 16384, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00400010000000;  op2val:0x7fffffdfffffffdf
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x00400010000000, 0x7fffffdfffffffdf, x30, x10, 1120, x3)

inst_91:
// rs1_w1_val == 1024, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000007;  op2val:0x0500400008ffdf
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x00040000000007, 0x0500400008ffdf, x30, x10, 1136, x3)

inst_92:
// rs1_w1_val == 256, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000007;  op2val:0x004000fffc0000
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x00010000000007, 0x004000fffc0000, x30, x10, 1152, x3)

inst_93:
// rs1_w1_val == 4, rs1_w0_val == -134217729
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x000004f7ffffff;  op2val:0xfffe00053ffffbff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x000004f7ffffff, 0xfffe00053ffffbff, x30, x10, 1168, x3)

inst_94:
// rs1_w1_val == 2, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000200080000;  op2val:0xfffa7fffffffc000
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x00000200080000, 0xfffa7fffffffc000, x30, x10, 1184, x3)

inst_95:
// rs1_w1_val == -1, rs1_w0_val == -129
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffff7f;  op2val:0x030200ffff2000
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xffffffffffffff7f, 0x030200ffff2000, x30, x10, 1200, x3)

inst_96:
// rs2_h1_val == -33, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8aaaaaaaa;  op2val:0x06aaaaffdffff6
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffffff8aaaaaaaa, 0x06aaaaffdffff6, x30, x10, 1216, x3)

inst_97:
// rs1_w0_val == -67108865, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffbffffff;  op2val:0xfffa7fffbfff0400
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xffffffbffbffffff, 0xfffa7fffbfff0400, x30, x10, 1232, x3)

inst_98:
// rs2_h1_val == 512, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000400;  op2val:0x100fff702000005
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xc000000000000400, 0x100fff702000005, x30, x10, 1248, x3)

inst_99:
// rs1_w0_val == -1048577, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffefffff;  op2val:0x2001000fbfffff9
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x010000ffefffff, 0x2001000fbfffff9, x30, x10, 1264, x3)

inst_100:
// rs1_w0_val == -131073, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffdffff;  op2val:0x100ff7fffbf0000
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xdffffffffffdffff, 0x100ff7fffbf0000, x30, x10, 1280, x3)

inst_101:
// rs2_h1_val == 16, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffefffffff;  op2val:0xefffc00000100002
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffff7ffefffffff, 0xefffc00000100002, x30, x10, 1296, x3)

inst_102:
// rs1_w0_val == -16385, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffaffffbfff;  op2val:0x03400000040001
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffffffaffffbfff, 0x03400000040001, x30, x10, 1312, x3)

inst_103:
// rs1_w0_val == -8193, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffffdfff;  op2val:0x050400f7ff0200
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffffdfff, 0x050400f7ff0200, x30, x10, 1328, x3)

inst_104:
// rs2_h1_val == 0, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff40000000;  op2val:0x4000fffb0000ffdf
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfeffffff40000000, 0x4000fffb0000ffdf, x30, x10, 1344, x3)

inst_105:
// rs1_w0_val == -257, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x020000fffffeff;  op2val:0xffeffffe3fff5555
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x020000fffffeff, 0xffeffffe3fff5555, x30, x10, 1360, x3)

inst_106:
// rs1_w0_val == -33, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffffffdf;  op2val:0xffdf0010bfff2000
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffffffdffffffdf, 0xffdf0010bfff2000, x30, x10, 1376, x3)

inst_107:
// rs1_w0_val == -17, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffffef;  op2val:0xffff0400aaaa0000
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffffef, 0xffff0400aaaa0000, x30, x10, 1392, x3)

inst_108:
// rs1_w0_val == -9, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffff7;  op2val:0x2000ffdf00080008
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfefffffffffffff7, 0x2000ffdf00080008, x30, x10, 1408, x3)

inst_109:
// rs2_h0_val == -513, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000040;  op2val:0x05fffe0400fdff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x10000000000040, 0x05fffe0400fdff, x30, x10, 1424, x3)

inst_110:
// rs1_w0_val == -3, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fffffffd;  op2val:0xfff90008fbff0008
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffffffd, 0xfff90008fbff0008, x30, x10, 1440, x3)

inst_111:
// rs2_h0_val == -65, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffff9;  op2val:0x2000bfff0000ffbf
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffff9, 0x2000bfff0000ffbf, x30, x10, 1456, x3)

inst_112:
// rs2_h0_val == -17, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000800;  op2val:0xffdffff80100ffef
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000800, 0xffdffff80100ffef, x30, x10, 1472, x3)

inst_113:
// rs1_w0_val == 67108864, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff04000000;  op2val:0xfbff000620007fff
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfff7ffff04000000, 0xfbff000620007fff, x30, x10, 1488, x3)

inst_114:
// rs2_h0_val == -5, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00080020000000;  op2val:0x7fff10000002fffb
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x00080020000000, 0x7fff10000002fffb, x30, x10, 1504, x3)

inst_115:
// rs1_w0_val == 8388608, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0x00080000800000;  op2val:0x09fffe00070002
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0x00080000800000, 0x09fffe00070002, x30, x10, 1520, x3)

inst_116:
// rs2_h0_val == -32768, 
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffffbfff;  op2val:0xffbffffdf7ff8000
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffffbfff, 0xffbffffdf7ff8000, x30, x10, 1536, x3)

inst_117:
// rs2_h3_val == 21845, rs1_w0_val == 33554432, rs2_h1_val == 8192, rs2_h0_val == 2, rs2_h2_val == 32767
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff602000000;  op2val:0x55557fff20000002
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffffff602000000, 0x55557fff20000002, x30, x10, 1552, x3)

inst_118:
// rs2_h3_val == -32768, rs1_w1_val == -3, rs2_h2_val == 4, rs2_h0_val == 128
// opcode: kmmawt.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd40000000;  op2val:0x8000000400090080
TEST_PKRR_OP(kmmawt.u, x31, x30, x29, 0x0000000000000000, 0xfffffffd40000000, 0x8000000400090080, x30, x10, 1568, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 40*(XLEN/32),4,0xdeadbeef


signature_x10_0:
    .fill 198*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
