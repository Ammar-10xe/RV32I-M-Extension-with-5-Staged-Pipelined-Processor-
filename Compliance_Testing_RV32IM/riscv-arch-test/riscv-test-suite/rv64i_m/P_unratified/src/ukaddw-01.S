
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukaddw instruction of the RISC-V RV64PZicsr extension for the ukaddw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukaddw)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 == rd != rs2, rs1==x31, rs2==x9, rd==x31, rs1_w0_val == 0, rs2_w0_val == 1024, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 4294967291, rs1_w1_val == 4294967039
// opcode: ukaddw ; op1:x31; op2:x9; dest:x31; op1val:0xfffffeff00000000;  op2val:0xfffffffb00000400
TEST_PKRR_OP(ukaddw, x31, x31, x9, 0x0000000000000000, 0xfffffeff00000000, 0xfffffffb00000400, x31, x11, 0, x19)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x18, rs2==x7, rd==x1, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 2048, rs1_w0_val == 1431655765, rs2_w0_val == 4294705151, rs2_w1_val == 2048
// opcode: ukaddw ; op1:x18; op2:x7; dest:x1; op1val:0x00080055555555;  op2val:0x000800fffbffff
TEST_PKRR_OP(ukaddw, x1, x18, x7, 0x0000000000000000, 0x00080055555555, 0x000800fffbffff, x18, x11, 16, x19)

inst_2:
// rs1 == rs2 != rd, rs1==x3, rs2==x3, rd==x9, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 4278190079, rs2_w0_val == 4278190079, rs1_w1_val == 67108864, rs2_w1_val == 128
// opcode: ukaddw ; op1:x3; op2:x3; dest:x9; op1val:0x4000000feffffff;  op2val:0x000080feffffff
TEST_PKRR_OP(ukaddw, x9, x3, x3, 0x0000000000000000, 0x4000000feffffff, 0x000080feffffff, x3, x11, 32, x19)

inst_3:
// rs1 == rs2 == rd, rs1==x24, rs2==x24, rd==x24, rs2_w1_val == 2863311530, rs1_w0_val == 134217728, rs2_w0_val == 268435456, rs1_w1_val == 4294967167
// opcode: ukaddw ; op1:x24; op2:x24; dest:x24; op1val:0xffffff7f08000000;  op2val:0xaaaaaaaa10000000
TEST_PKRR_OP(ukaddw, x24, x24, x24, 0x0000000000000000, 0xffffff7f08000000, 0xaaaaaaaa10000000, x24, x11, 48, x19)

inst_4:
// rs2 == rd != rs1, rs1==x22, rs2==x15, rd==x15, rs2_w1_val == 1431655765, rs2_w0_val == 4294836223, rs1_w1_val == 4294967291, rs1_w0_val == 4293918719
// opcode: ukaddw ; op1:x22; op2:x15; dest:x15; op1val:0xfffffffbffefffff;  op2val:0x55555555fffdffff
TEST_PKRR_OP(ukaddw, x15, x22, x15, 0x0000000000000000, 0xfffffffbffefffff, 0x55555555fffdffff, x22, x11, 64, x19)

inst_5:
// rs1==x29, rs2==x10, rd==x16, rs2_w1_val == 2147483647, rs2_w0_val == 67108864, rs1_w0_val == 4290772991, rs1_w1_val == 2
// opcode: ukaddw ; op1:x29; op2:x10; dest:x16; op1val:0x000002ffbfffff;  op2val:0x7fffffff04000000
TEST_PKRR_OP(ukaddw, x16, x29, x10, 0x0000000000000000, 0x000002ffbfffff, 0x7fffffff04000000, x29, x11, 80, x19)

inst_6:
// rs1==x8, rs2==x20, rd==x30, rs2_w1_val == 3221225471, rs1_w0_val == 4294967291, rs1_w1_val == 134217728, rs2_w0_val == 536870912
// opcode: ukaddw ; op1:x8; op2:x20; dest:x30; op1val:0x8000000fffffffb;  op2val:0xbfffffff20000000
TEST_PKRR_OP(ukaddw, x30, x8, x20, 0x0000000000000000, 0x8000000fffffffb, 0xbfffffff20000000, x8, x11, 96, x19)

inst_7:
// rs1==x6, rs2==x2, rd==x4, rs2_w1_val == 3758096383, rs2_w0_val == 4294967167, rs1_w1_val == 4294965247, rs1_w0_val == 16
// opcode: ukaddw ; op1:x6; op2:x2; dest:x4; op1val:0xfffff7ff00000010;  op2val:0xdfffffffffffff7f
TEST_PKRR_OP(ukaddw, x4, x6, x2, 0x0000000000000000, 0xfffff7ff00000010, 0xdfffffffffffff7f, x6, x11, 112, x19)

inst_8:
// rs1==x14, rs2==x31, rd==x8, rs2_w1_val == 4026531839, rs1_w0_val == 131072, rs1_w1_val == 4286578687
// opcode: ukaddw ; op1:x14; op2:x31; dest:x8; op1val:0xff7fffff00020000;  op2val:0xefffffff0000000c
TEST_PKRR_OP(ukaddw, x8, x14, x31, 0x0000000000000000, 0xff7fffff00020000, 0xefffffff0000000c, x14, x11, 128, x19)

inst_9:
// rs1==x20, rs2==x6, rd==x0, rs2_w1_val == 4160749567, rs1_w0_val == 2097152, rs1_w1_val == 4261412863, rs2_w0_val == 4294967279
// opcode: ukaddw ; op1:x20; op2:x6; dest:x0; op1val:0xfdffffff00200000;  op2val:0xf7ffffffffffffef
TEST_PKRR_OP(ukaddw, x0, x20, x6, 0x0000000000000000, 0xfdffffff00200000, 0xf7ffffffffffffef, x20, x11, 144, x19)

inst_10:
// rs1==x23, rs2==x16, rd==x28, rs2_w1_val == 4227858431, rs1_w0_val == 4294967039, rs2_w0_val == 4096
// opcode: ukaddw ; op1:x23; op2:x16; dest:x28; op1val:0x4000000fffffeff;  op2val:0xfbffffff00001000
TEST_PKRR_OP(ukaddw, x28, x23, x16, 0x0000000000000000, 0x4000000fffffeff, 0xfbffffff00001000, x23, x11, 160, x19)

inst_11:
// rs1==x26, rs2==x1, rd==x17, rs2_w1_val == 4261412863, rs2_w0_val == 4, rs1_w0_val == 4292870143, rs1_w1_val == 4294967295
// opcode: ukaddw ; op1:x26; op2:x1; dest:x17; op1val:0xffffffffffdfffff;  op2val:0xfdffffff00000004
TEST_PKRR_OP(ukaddw, x17, x26, x1, 0x0000000000000000, 0xffffffffffdfffff, 0xfdffffff00000004, x26, x11, 176, x19)

inst_12:
// rs1==x5, rs2==x21, rd==x3, rs2_w1_val == 4278190079, rs1_w0_val == 4227858431
// opcode: ukaddw ; op1:x5; op2:x21; dest:x3; op1val:0x000011fbffffff;  op2val:0xfeffffff0000000c
TEST_PKRR_OP(ukaddw, x3, x5, x21, 0x0000000000000000, 0x000011fbffffff, 0xfeffffff0000000c, x5, x11, 192, x19)

inst_13:
// rs1==x12, rs2==x13, rd==x14, rs2_w1_val == 4286578687, rs2_w0_val == 33554432, rs1_w0_val == 2147483647, rs1_w1_val == 131072
// opcode: ukaddw ; op1:x12; op2:x13; dest:x14; op1val:0x0200007fffffff;  op2val:0xff7fffff02000000
TEST_PKRR_OP(ukaddw, x14, x12, x13, 0x0000000000000000, 0x0200007fffffff, 0xff7fffff02000000, x12, x11, 208, x19)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_14:
// rs1==x25, rs2==x26, rd==x2, rs2_w1_val == 4290772991, rs1_w0_val == 67108864, rs1_w1_val == 524288, rs2_w0_val == 134217728
// opcode: ukaddw ; op1:x25; op2:x26; dest:x2; op1val:0x08000004000000;  op2val:0xffbfffff08000000
TEST_PKRR_OP(ukaddw, x2, x25, x26, 0x0000000000000000, 0x08000004000000, 0xffbfffff08000000, x25, x3, 0, x8)

inst_15:
// rs1==x19, rs2==x27, rd==x18, rs2_w1_val == 4292870143, rs2_w0_val == 4261412863, rs1_w1_val == 4294959103
// opcode: ukaddw ; op1:x19; op2:x27; dest:x18; op1val:0xffffdfff0000000a;  op2val:0xffdffffffdffffff
TEST_PKRR_OP(ukaddw, x18, x19, x27, 0x0000000000000000, 0xffffdfff0000000a, 0xffdffffffdffffff, x19, x3, 16, x8)

inst_16:
// rs1==x11, rs2==x12, rd==x10, rs2_w1_val == 4293918719, rs2_w0_val == 4286578687, rs1_w1_val == 256
// opcode: ukaddw ; op1:x11; op2:x12; dest:x10; op1val:0x000100fffffffb;  op2val:0xffefffffff7fffff
TEST_PKRR_OP(ukaddw, x10, x11, x12, 0x0000000000000000, 0x000100fffffffb, 0xffefffffff7fffff, x11, x3, 32, x8)

inst_17:
// rs1==x28, rs2==x11, rd==x29, rs2_w1_val == 4294443007, rs1_w1_val == 4096, rs2_w0_val == 8388608
// opcode: ukaddw ; op1:x28; op2:x11; dest:x29; op1val:0x00100000000003;  op2val:0xfff7ffff00800000
TEST_PKRR_OP(ukaddw, x29, x28, x11, 0x0000000000000000, 0x00100000000003, 0xfff7ffff00800000, x28, x3, 48, x8)

inst_18:
// rs1==x1, rs2==x5, rd==x13, rs2_w1_val == 4294705151, rs1_w1_val == 4294967263, rs2_w0_val == 8192
// opcode: ukaddw ; op1:x1; op2:x5; dest:x13; op1val:0xffffffdfffbfffff;  op2val:0xfffbffff00002000
TEST_PKRR_OP(ukaddw, x13, x1, x5, 0x0000000000000000, 0xffffffdfffbfffff, 0xfffbffff00002000, x1, x3, 64, x8)

inst_19:
// rs1==x10, rs2==x4, rd==x21, rs2_w1_val == 4294836223, rs2_w0_val == 4294959103
// opcode: ukaddw ; op1:x10; op2:x4; dest:x21; op1val:0xffffdfff00000007;  op2val:0xfffdffffffffdfff
TEST_PKRR_OP(ukaddw, x21, x10, x4, 0x0000000000000000, 0xffffdfff00000007, 0xfffdffffffffdfff, x10, x3, 80, x8)

inst_20:
// rs1==x0, rs2==x30, rd==x27, rs2_w1_val == 4294901759, rs2_w0_val == 4294901759, rs1_w0_val == 4096, rs1_w1_val == 4293918719
// opcode: ukaddw ; op1:x0; op2:x30; dest:x27; op1val:0xffefffff00001000;  op2val:0xfffefffffffeffff
TEST_PKRR_OP(ukaddw, x27, x0, x30, 0x0000000000000000, 0xffefffff00001000, 0xfffefffffffeffff, x0, x3, 96, x8)

inst_21:
// rs1==x7, rs2==x14, rd==x23, rs2_w1_val == 4294934527, rs2_w0_val == 4294966783, rs1_w1_val == 2863311530, rs1_w0_val == 4026531839
// opcode: ukaddw ; op1:x7; op2:x14; dest:x23; op1val:0xaaaaaaaaefffffff;  op2val:0xffff7ffffffffdff
TEST_PKRR_OP(ukaddw, x23, x7, x14, 0x0000000000000000, 0xaaaaaaaaefffffff, 0xffff7ffffffffdff, x7, x3, 112, x8)

inst_22:
// rs1==x27, rs2==x23, rd==x20, rs2_w1_val == 4294950911, rs1_w1_val == 536870912, rs2_w0_val == 64
// opcode: ukaddw ; op1:x27; op2:x23; dest:x20; op1val:0x20000000ffefffff;  op2val:0xffffbfff00000040
TEST_PKRR_OP(ukaddw, x20, x27, x23, 0x0000000000000000, 0x20000000ffefffff, 0xffffbfff00000040, x27, x3, 128, x8)

inst_23:
// rs1==x30, rs2==x29, rd==x11, rs2_w1_val == 4294959103, rs2_w0_val == 0, rs1_w1_val == 4294966783, rs1_w0_val == 524288
// opcode: ukaddw ; op1:x30; op2:x29; dest:x11; op1val:0xfffffdff00080000;  op2val:0xffffdfff00000000
TEST_PKRR_OP(ukaddw, x11, x30, x29, 0x0000000000000000, 0xfffffdff00080000, 0xffffdfff00000000, x30, x3, 144, x8)

inst_24:
// rs1==x2, rs2==x0, rd==x25, rs2_w1_val == 4294963199, rs2_w0_val == 1, rs1_w1_val == 32768
// opcode: ukaddw ; op1:x2; op2:x0; dest:x25; op1val:0x0080000000000f;  op2val:0xffffefff00000001
TEST_PKRR_OP(ukaddw, x25, x2, x0, 0x0000000000000000, 0x0080000000000f, 0xffffefff00000001, x2, x3, 160, x8)

inst_25:
// rs1==x9, rs2==x19, rd==x5, rs2_w1_val == 4294965247, rs1_w0_val == 4294967293, rs1_w1_val == 4, rs2_w0_val == 4292870143
// opcode: ukaddw ; op1:x9; op2:x19; dest:x5; op1val:0x000004fffffffd;  op2val:0xfffff7ffffdfffff
TEST_PKRR_OP(ukaddw, x5, x9, x19, 0x0000000000000000, 0x000004fffffffd, 0xfffff7ffffdfffff, x9, x3, 176, x8)

inst_26:
// rs1==x16, rs2==x22, rd==x6, rs2_w1_val == 4294966271, rs1_w0_val == 1, rs2_w0_val == 4026531839
// opcode: ukaddw ; op1:x16; op2:x22; dest:x6; op1val:0x00000500000001;  op2val:0xfffffbffefffffff
TEST_PKRR_OP(ukaddw, x6, x16, x22, 0x0000000000000000, 0x00000500000001, 0xfffffbffefffffff, x16, x3, 192, x8)

inst_27:
// rs1==x15, rs2==x18, rd==x19, rs2_w1_val == 4294966783, rs1_w0_val == 4294966783
// opcode: ukaddw ; op1:x15; op2:x18; dest:x19; op1val:0x001000fffffdff;  op2val:0xfffffdff00800000
TEST_PKRR_OP(ukaddw, x19, x15, x18, 0x0000000000000000, 0x001000fffffdff, 0xfffffdff00800000, x15, x3, 208, x8)

inst_28:
// rs1==x13, rs2==x17, rd==x12, rs2_w1_val == 4294967039, rs2_w0_val == 4294963199
// opcode: ukaddw ; op1:x13; op2:x17; dest:x12; op1val:0xfffff7ffefffffff;  op2val:0xfffffeffffffefff
TEST_PKRR_OP(ukaddw, x12, x13, x17, 0x0000000000000000, 0xfffff7ffefffffff, 0xfffffeffffffefff, x13, x3, 224, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_29:
// rs1==x21, rs2==x25, rd==x7, rs2_w1_val == 4294967167, rs1_w0_val == 2863311530, rs1_w1_val == 512, rs2_w0_val == 1048576
// opcode: ukaddw ; op1:x21; op2:x25; dest:x7; op1val:0x000200aaaaaaaa;  op2val:0xffffff7f00100000
TEST_PKRR_OP(ukaddw, x7, x21, x25, 0x0000000000000000, 0x000200aaaaaaaa, 0xffffff7f00100000, x21, x1, 0, x2)

inst_30:
// rs1==x17, rs2==x28, rd==x22, rs2_w1_val == 4294967231, rs2_w0_val == 131072, rs1_w0_val == 4194304
// opcode: ukaddw ; op1:x17; op2:x28; dest:x22; op1val:0xfffffdff00400000;  op2val:0xffffffbf00020000
TEST_PKRR_OP(ukaddw, x22, x17, x28, 0x0000000000000000, 0xfffffdff00400000, 0xffffffbf00020000, x17, x1, 16, x2)

inst_31:
// rs1==x4, rs2==x8, rd==x26, rs2_w1_val == 4294967263, rs1_w1_val == 3221225471
// opcode: ukaddw ; op1:x4; op2:x8; dest:x26; op1val:0xbfffffffaaaaaaaa;  op2val:0xffffffdf0000000a
TEST_PKRR_OP(ukaddw, x26, x4, x8, 0x0000000000000000, 0xbfffffffaaaaaaaa, 0xffffffdf0000000a, x4, x1, 32, x2)

inst_32:
// rs2_w1_val == 4294967279, rs1_w0_val == 1024, rs1_w1_val == 16
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000400;  op2val:0xffffffef00100000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00001000000400, 0xffffffef00100000, x30, x1, 48, x2)

inst_33:
// rs2_w1_val == 4294967287, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffdfffff;  op2val:0xfffffff7fdffffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffffff7fffdfffff, 0xfffffff7fdffffff, x30, x1, 64, x2)

inst_34:
// rs2_w1_val == 4294967293, rs1_w1_val == 4292870143, rs2_w0_val == 4294967039
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000007;  op2val:0xfffffffdfffffeff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000007, 0xfffffffdfffffeff, x30, x1, 80, x2)

inst_35:
// rs2_w1_val == 4294967294, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000007;  op2val:0xfffffffe00000003
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000007, 0xfffffffe00000003, x30, x1, 96, x2)

inst_36:
// rs2_w1_val == 2147483648, rs2_w0_val == 4294950911
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00000f00000010;  op2val:0x80000000ffffbfff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00000f00000010, 0x80000000ffffbfff, x30, x1, 112, x2)

inst_37:
// rs2_w1_val == 1073741824, rs2_w0_val == 2, rs1_w0_val == 8388608
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00000a00800000;  op2val:0x4000000000000002
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00000a00800000, 0x4000000000000002, x30, x1, 128, x2)

inst_38:
// rs2_w1_val == 536870912, rs2_w0_val == 4294967263
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00000604000000;  op2val:0x20000000ffffffdf
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00000604000000, 0x20000000ffffffdf, x30, x1, 144, x2)

inst_39:
// rs2_w1_val == 268435456, rs2_w0_val == 262144, rs1_w1_val == 4294901759
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffbfffff;  op2val:0x1000000000040000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xfffeffffffbfffff, 0x1000000000040000, x30, x1, 160, x2)

inst_40:
// rs2_w1_val == 134217728, rs1_w0_val == 8
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00001200000008;  op2val:0x8000000efffffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00001200000008, 0x8000000efffffff, x30, x1, 176, x2)

inst_41:
// rs2_w1_val == 67108864, rs1_w0_val == 268435456
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00000710000000;  op2val:0x400000010000000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00000710000000, 0x400000010000000, x30, x1, 192, x2)

inst_42:
// rs2_w1_val == 33554432, rs1_w1_val == 8388608
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffdfffff;  op2val:0x200000002000000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x800000ffdfffff, 0x200000002000000, x30, x1, 208, x2)

inst_43:
// rs2_w1_val == 16777216, rs1_w1_val == 4294836223
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000010;  op2val:0x1000000ffffffdf
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000010, 0x1000000ffffffdf, x30, x1, 224, x2)

inst_44:
// rs2_w1_val == 8388608, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff0000000b;  op2val:0x8000000000000e
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffefffff0000000b, 0x8000000000000e, x30, x1, 240, x2)

inst_45:
// rs2_w1_val == 4194304, rs2_w0_val == 4294967287
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00080000;  op2val:0x400000fffffff7
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xfdffffff00080000, 0x400000fffffff7, x30, x1, 256, x2)

inst_46:
// rs2_w1_val == 2097152, rs1_w1_val == 0, rs1_w0_val == 2048
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000800;  op2val:0x20000000000009
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00000000000800, 0x20000000000009, x30, x1, 272, x2)

inst_47:
// rs2_w1_val == 1048576, rs1_w1_val == 1048576, rs1_w0_val == 4294967231
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffffffbf;  op2val:0x10000000020000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x100000ffffffbf, 0x10000000020000, x30, x1, 288, x2)

inst_48:
// rs2_w1_val == 524288, rs1_w0_val == 4294836223
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x100000fffdffff;  op2val:0x08000000002000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x100000fffdffff, 0x08000000002000, x30, x1, 304, x2)

inst_49:
// rs2_w1_val == 262144, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000007;  op2val:0x0400000000000f
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00000600000007, 0x0400000000000f, x30, x1, 320, x2)

inst_50:
// rs1_w0_val == 262144, rs1_w1_val == 4294967231, rs2_w1_val == 2
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00040000;  op2val:0x00000210000000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffffffbf00040000, 0x00000210000000, x30, x1, 336, x2)

inst_51:
// rs1_w0_val == 65536, rs2_w0_val == 128
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00000a00010000;  op2val:0x4000000000000080
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00000a00010000, 0x4000000000000080, x30, x1, 352, x2)

inst_52:
// rs1_w0_val == 32768, rs2_w0_val == 4294965247, rs2_w1_val == 4294967295
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x800000000008000;  op2val:0xfffffffffffff7ff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x800000000008000, 0xfffffffffffff7ff, x30, x1, 368, x2)

inst_53:
// rs1_w0_val == 16384, rs1_w1_val == 1024
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00040000004000;  op2val:0x00000b00000002
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00040000004000, 0x00000b00000002, x30, x1, 384, x2)

inst_54:
// rs1_w0_val == 8192, rs2_w1_val == 1024
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00002000;  op2val:0x000400feffffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xfffeffff00002000, 0x000400feffffff, x30, x1, 400, x2)

inst_55:
// rs1_w0_val == 512, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00001100000200;  op2val:0xfbffffff00000080
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00001100000200, 0xfbffffff00000080, x30, x1, 416, x2)

inst_56:
// rs1_w0_val == 256, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000100;  op2val:0xaaaaaaaa0000000e
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x2000000000000100, 0xaaaaaaaa0000000e, x30, x1, 432, x2)

inst_57:
// rs1_w0_val == 128, rs2_w0_val == 512
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000080;  op2val:0xfffdffff00000200
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000080, 0xfffdffff00000200, x30, x1, 448, x2)

inst_58:
// rs1_w0_val == 64, rs2_w0_val == 2863311530, rs1_w1_val == 2147483647
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000040;  op2val:0xffffffdfaaaaaaaa
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000040, 0xffffffdfaaaaaaaa, x30, x1, 464, x2)

inst_59:
// rs1_w0_val == 32, rs1_w1_val == 4290772991, rs2_w1_val == 1
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000020;  op2val:0x00000100001000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000020, 0x00000100001000, x30, x1, 480, x2)

inst_60:
// rs1_w0_val == 4, rs1_w1_val == 64
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000004;  op2val:0xffffdfffffdfffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00004000000004, 0xffffdfffffdfffff, x30, x1, 496, x2)

inst_61:
// rs1_w0_val == 2, rs2_w0_val == 256, rs2_w1_val == 65536
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00000d00000002;  op2val:0x01000000000100
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00000d00000002, 0x01000000000100, x30, x1, 512, x2)

inst_62:
// rs1_w0_val == 4294967295, rs1_w1_val == 65536
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffffffff;  op2val:0xfdffffffefffffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x010000ffffffff, 0xfdffffffefffffff, x30, x1, 528, x2)

inst_63:
// rs2_w1_val == 131072, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000003;  op2val:0x020000fffffeff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000003, 0x020000fffffeff, x30, x1, 544, x2)

inst_64:
// rs2_w1_val == 32768, rs1_w0_val == 4286578687, rs2_w0_val == 1073741824
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x020000ff7fffff;  op2val:0x00800040000000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x020000ff7fffff, 0x00800040000000, x30, x1, 560, x2)

inst_65:
// rs2_w1_val == 16384, rs1_w1_val == 4278190079
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffeffffff;  op2val:0x0040000000000b
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xfefffffffeffffff, 0x0040000000000b, x30, x1, 576, x2)

inst_66:
// rs2_w1_val == 8192, rs1_w1_val == 4160749567
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000020;  op2val:0x002000ffffff7f
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000020, 0x002000ffffff7f, x30, x1, 592, x2)

inst_67:
// rs2_w1_val == 4096, rs1_w0_val == 3221225471
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffbfffffff;  op2val:0x001000fffffff7
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffefffffbfffffff, 0x001000fffffff7, x30, x1, 608, x2)

inst_68:
// rs2_w1_val == 512, rs2_w0_val == 32
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00002000;  op2val:0x00020000000020
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffffffff00002000, 0x00020000000020, x30, x1, 624, x2)

inst_69:
// rs2_w1_val == 256, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00000bbfffffff;  op2val:0x000100ffdfffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00000bbfffffff, 0x000100ffdfffff, x30, x1, 640, x2)

inst_70:
// rs2_w1_val == 64, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000200;  op2val:0x000040fffffeff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000200, 0x000040fffffeff, x30, x1, 656, x2)

inst_71:
// rs2_w1_val == 32, rs2_w0_val == 8
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000004;  op2val:0x00002000000008
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000004, 0x00002000000008, x30, x1, 672, x2)

inst_72:
// rs2_w1_val == 16, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffffffff;  op2val:0x0000100000000c
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffbfffffffffffff, 0x0000100000000c, x30, x1, 688, x2)

inst_73:
// rs2_w1_val == 8, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00000001;  op2val:0x00000800000002
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000001, 0x00000800000002, x30, x1, 704, x2)

inst_74:
// rs2_w1_val == 4, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00000d00000000;  op2val:0x0000040000000e
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00000d00000000, 0x0000040000000e, x30, x1, 720, x2)

inst_75:
// rs2_w1_val == 0, rs1_w0_val == 4294966271
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000040fffffbff;  op2val:0x0000000000000e
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x000040fffffbff, 0x0000000000000e, x30, x1, 736, x2)

inst_76:
// rs2_w0_val == 1431655765, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x4000000efffffff;  op2val:0xfdffffff55555555
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x4000000efffffff, 0xfdffffff55555555, x30, x1, 752, x2)

inst_77:
// rs2_w0_val == 2147483647, rs1_w0_val == 4294967287
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffffff7;  op2val:0x0020007fffffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffbffffffffffff7, 0x0020007fffffff, x30, x1, 768, x2)

inst_78:
// rs2_w0_val == 3221225471, rs1_w1_val == 4294705151
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff0000000d;  op2val:0x100000bfffffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xfffbffff0000000d, 0x100000bfffffff, x30, x1, 784, x2)

inst_79:
// rs2_w0_val == 3758096383, rs1_w0_val == 4294705151, rs1_w1_val == 32
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000020fffbffff;  op2val:0x8000000dfffffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x000020fffbffff, 0x8000000dfffffff, x30, x1, 800, x2)

inst_80:
// rs2_w0_val == 4160749567, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00000e00000003;  op2val:0xffffdffff7ffffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00000e00000003, 0xffffdffff7ffffff, x30, x1, 816, x2)

inst_81:
// rs2_w0_val == 4227858431, rs1_w1_val == 4294950911
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffffffbf;  op2val:0x000002fbffffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffffbfffffffffbf, 0x000002fbffffff, x30, x1, 832, x2)

inst_82:
// rs2_w0_val == 4290772991, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000000e;  op2val:0x000007ffbfffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x200000000000000e, 0x000007ffbfffff, x30, x1, 848, x2)

inst_83:
// rs2_w0_val == 4293918719, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00400000;  op2val:0x800000ffefffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffffffff00400000, 0x800000ffefffff, x30, x1, 864, x2)

inst_84:
// rs2_w0_val == 16, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x01000000400000;  op2val:0xffdfffff00000010
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x01000000400000, 0xffdfffff00000010, x30, x1, 880, x2)

inst_85:
// rs2_w0_val == 4294967295, rs1_w0_val == 4294967294, rs1_w1_val == 4294967293
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffffffe;  op2val:0x000013ffffffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffffffe, 0x000013ffffffff, x30, x1, 896, x2)

inst_86:
// rs1_w1_val == 1431655765, rs1_w0_val == 3758096383
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x55555555dfffffff;  op2val:0x200000fffeffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x55555555dfffffff, 0x200000fffeffff, x30, x1, 912, x2)

inst_87:
// rs1_w1_val == 3758096383, rs1_w0_val == 4294967167
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffff7f;  op2val:0x000200ff7fffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffff7f, 0x000200ff7fffff, x30, x1, 928, x2)

inst_88:
// rs1_w1_val == 4026531839, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffffff7f;  op2val:0xdfffffff00000200
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xefffffffffffff7f, 0xdfffffff00000200, x30, x1, 944, x2)

inst_89:
// rs1_w1_val == 4227858431, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000020;  op2val:0xffbfffff10000000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000020, 0xffbfffff10000000, x30, x1, 960, x2)

inst_90:
// rs1_w1_val == 4294443007, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000013;  op2val:0x0002000000000e
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000013, 0x0002000000000e, x30, x1, 976, x2)

inst_91:
// rs1_w1_val == 4294934527, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000100;  op2val:0x00000300000005
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000100, 0x00000300000005, x30, x1, 992, x2)

inst_92:
// rs1_w1_val == 4294963199, rs1_w0_val == 2147483648
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff80000000;  op2val:0xfffffff700000013
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffffefff80000000, 0xfffffff700000013, x30, x1, 1008, x2)

inst_93:
// rs1_w1_val == 4294966271, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000013;  op2val:0x00001204000000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000013, 0x00001204000000, x30, x1, 1024, x2)

inst_94:
// rs1_w1_val == 4294967279, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef0000000b;  op2val:0xffffff7f00000080
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffffffef0000000b, 0xffffff7f00000080, x30, x1, 1040, x2)

inst_95:
// rs1_w1_val == 4294967287, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700080000;  op2val:0xffffffbf00000012
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xfffffff700080000, 0xffffffbf00000012, x30, x1, 1056, x2)

inst_96:
// rs1_w1_val == 4294967294, rs1_w0_val == 4294934527
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffff7fff;  op2val:0x80000000000080
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xfffffffeffff7fff, 0x80000000000080, x30, x1, 1072, x2)

inst_97:
// rs1_w1_val == 2147483648, rs2_w0_val == 65536, rs1_w0_val == 4294963199
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffefff;  op2val:0x80000000010000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x80000000ffffefff, 0x80000000010000, x30, x1, 1088, x2)

inst_98:
// rs1_w1_val == 1073741824, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000000d;  op2val:0x00000c0000000f
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x400000000000000d, 0x00000c0000000f, x30, x1, 1104, x2)

inst_99:
// rs1_w1_val == 268435456, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffbffff;  op2val:0xfffff7ffffffffdf
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x10000000fffbffff, 0xfffff7ffffffffdf, x30, x1, 1120, x2)

inst_100:
// rs1_w1_val == 33554432, rs2_w0_val == 16777216
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x200000080000000;  op2val:0x00000701000000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x200000080000000, 0x00000701000000, x30, x1, 1136, x2)

inst_101:
// rs1_w1_val == 16777216, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffbffff;  op2val:0x000004ffffff7f
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x1000000fffbffff, 0x000004ffffff7f, x30, x1, 1152, x2)

inst_102:
// rs1_w1_val == 4194304, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x400000efffffff;  op2val:0x0800000000000a
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x400000efffffff, 0x0800000000000a, x30, x1, 1168, x2)

inst_103:
// rs1_w1_val == 2097152, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x20000000020000;  op2val:0xffdfffff00000000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x20000000020000, 0xffdfffff00000000, x30, x1, 1184, x2)

inst_104:
// rs1_w1_val == 262144, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffffdff;  op2val:0x40000000efffffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x040000fffffdff, 0x40000000efffffff, x30, x1, 1200, x2)

inst_105:
// rs1_w1_val == 16384, rs1_w0_val == 4294967263
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffffffdf;  op2val:0x00000200000005
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x004000ffffffdf, 0x00000200000005, x30, x1, 1216, x2)

inst_106:
// rs1_w1_val == 8192, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000002;  op2val:0x0000040000000c
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00200000000002, 0x0000040000000c, x30, x1, 1232, x2)

inst_107:
// rs1_w1_val == 128, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00008080000000;  op2val:0x5555555500000000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00008080000000, 0x5555555500000000, x30, x1, 1248, x2)

inst_108:
// rs1_w1_val == 8, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffbffff;  op2val:0xfff7ffff0000000f
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x000008fffbffff, 0xfff7ffff0000000f, x30, x1, 1264, x2)

inst_109:
// rs1_w1_val == 1, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000001ff7fffff;  op2val:0x00000300000007
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x000001ff7fffff, 0x00000300000007, x30, x1, 1280, x2)

inst_110:
// rs2_w0_val == 4294443007, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfbffffff;  op2val:0xffdffffffff7ffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xfffffffdfbffffff, 0xffdffffffff7ffff, x30, x1, 1296, x2)

inst_111:
// rs1_w0_val == 4160749567, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x080000f7ffffff;  op2val:0x200000efffffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x080000f7ffffff, 0x200000efffffff, x30, x1, 1312, x2)

inst_112:
// rs1_w0_val == 4261412863, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffdffffff;  op2val:0x00200000000002
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xf7fffffffdffffff, 0x00200000000002, x30, x1, 1328, x2)

inst_113:
// rs2_w0_val == 4294934527, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000004;  op2val:0xaaaaaaaaffff7fff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x01000000000004, 0xaaaaaaaaffff7fff, x30, x1, 1344, x2)

inst_114:
// rs1_w0_val == 4294443007, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000003fff7ffff;  op2val:0x400000ffffffef
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x000003fff7ffff, 0x400000ffffffef, x30, x1, 1360, x2)

inst_115:
// rs2_w0_val == 4294966271, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffdfffffff;  op2val:0x000080fffffbff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffbfffffdfffffff, 0x000080fffffbff, x30, x1, 1376, x2)

inst_116:
// rs1_w0_val == 4294901759, rs2_w0_val == 4294967294
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffeffff;  op2val:0x10000000fffffffe
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x040000fffeffff, 0x10000000fffffffe, x30, x1, 1392, x2)

inst_117:
// rs2_w0_val == 4294967231, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00400000800000;  op2val:0x010000ffffffbf
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00400000800000, 0x010000ffffffbf, x30, x1, 1408, x2)

inst_118:
// rs1_w0_val == 4294950911, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffbfff;  op2val:0x00000afffdffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffbfff, 0x00000afffdffff, x30, x1, 1424, x2)

inst_119:
// rs1_w0_val == 4294959103, rs2_w0_val == 32768
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00000fffffdfff;  op2val:0x00000e00008000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00000fffffdfff, 0x00000e00008000, x30, x1, 1440, x2)

inst_120:
// rs1_w0_val == 4294965247, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffff7ff;  op2val:0xdfffffff10000000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xfefffffffffff7ff, 0xdfffffff10000000, x30, x1, 1456, x2)

inst_121:
// rs2_w0_val == 4294967291, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00000800000011;  op2val:0x000012fffffffb
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00000800000011, 0x000012fffffffb, x30, x1, 1472, x2)

inst_122:
// rs2_w0_val == 4294967293, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000007fffffbff;  op2val:0xffff7ffffffffffd
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x000007fffffbff, 0xffff7ffffffffffd, x30, x1, 1488, x2)

inst_123:
// rs2_w0_val == 2147483648, rs1_w0_val == 16777216
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff01000000;  op2val:0x00000480000000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xfffffdff01000000, 0x00000480000000, x30, x1, 1504, x2)

inst_124:
// rs1_w0_val == 4294967279, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffffffef;  op2val:0x00100000020000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x001000ffffffef, 0x00100000020000, x30, x1, 1520, x2)

inst_125:
// rs2_w0_val == 4194304, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffffff7f;  op2val:0x40000000400000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffefffffffffff7f, 0x40000000400000, x30, x1, 1536, x2)

inst_126:
// rs1_w0_val == 1073741824, rs2_w0_val == 16384
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00001240000000;  op2val:0xffdfffff00004000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00001240000000, 0xffdfffff00004000, x30, x1, 1552, x2)

inst_127:
// rs1_w0_val == 536870912, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x00010020000000;  op2val:0xf7ffffff00100000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x00010020000000, 0xf7ffffff00100000, x30, x1, 1568, x2)

inst_128:
// rs2_w0_val == 2097152, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000005efffffff;  op2val:0xfffdffff00200000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x000005efffffff, 0xfffdffff00200000, x30, x1, 1584, x2)

inst_129:
// rs1_w0_val == 33554432, rs2_w0_val == 2048
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff02000000;  op2val:0x00000200000800
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffff7fff02000000, 0x00000200000800, x30, x1, 1600, x2)

inst_130:
// rs1_w0_val == 1048576, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x800000000100000;  op2val:0x400000ffffdfff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x800000000100000, 0x400000ffffdfff, x30, x1, 1616, x2)

inst_131:
// rs2_w0_val == 524288, 
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x000040f7ffffff;  op2val:0xf7ffffff00080000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x000040f7ffffff, 0xf7ffffff00080000, x30, x1, 1632, x2)

inst_132:
// rs2_w1_val == 2863311530, rs1_w0_val == 134217728, rs2_w0_val == 268435456, rs1_w1_val == 4294967167
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f08000000;  op2val:0xaaaaaaaa10000000
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffffff7f08000000, 0xaaaaaaaa10000000, x30, x1, 1648, x2)

inst_133:
// rs2_w1_val == 4160749567, rs1_w0_val == 2097152, rs1_w1_val == 4261412863, rs2_w0_val == 4294967279
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00200000;  op2val:0xf7ffffffffffffef
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xfdffffff00200000, 0xf7ffffffffffffef, x30, x1, 1664, x2)

inst_134:
// rs2_w1_val == 4294901759, rs2_w0_val == 4294901759, rs1_w0_val == 4096, rs1_w1_val == 4293918719
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00001000;  op2val:0xfffefffffffeffff
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0xffefffff00001000, 0xfffefffffffeffff, x30, x1, 1680, x2)

inst_135:
// rs2_w1_val == 4294963199, rs2_w0_val == 1, rs1_w1_val == 32768
// opcode: ukaddw ; op1:x30; op2:x29; dest:x31; op1val:0x0080000000000f;  op2val:0xffffefff00000001
TEST_PKRR_OP(ukaddw, x31, x30, x29, 0x0000000000000000, 0x0080000000000f, 0xffffefff00000001, x30, x1, 1696, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 214*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
