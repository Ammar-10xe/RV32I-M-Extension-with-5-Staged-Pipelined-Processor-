
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kadd32 instruction of the RISC-V RV64PZicsr extension for the kadd32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kadd32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 == rd != rs2, rs1==x20, rs2==x29, rd==x20, rs1_w0_val == -2147483648, rs2_w0_val == -262145, rs1_w1_val != rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w1_val == 16777216, rs1_w1_val == -1073741825
// opcode: kadd32 ; op1:x20; op2:x29; dest:x20; op1val:0xbfffffff80000000;  op2val:0x1000000fffbffff
TEST_PKRR_OP(kadd32, x20, x20, x29, 0x0000000000000000, 0xbfffffff80000000, 0x1000000fffbffff, x20, x5, 0, x12)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x3, rs2==x1, rd==x2, rs1_w1_val == rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w1_val == -513, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w1_val == -513, rs2_w0_val == -2097153, rs1_w0_val == 67108864
// opcode: kadd32 ; op1:x3; op2:x1; dest:x2; op1val:0xfffffdff04000000;  op2val:0xfffffdffffdfffff
TEST_PKRR_OP(kadd32, x2, x3, x1, 0x0000000000000000, 0xfffffdff04000000, 0xfffffdffffdfffff, x3, x5, 16, x12)

inst_2:
// rs1 == rs2 != rd, rs1==x23, rs2==x23, rd==x11, rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w1_val == -1073741825, rs1_w1_val == 524288, rs1_w0_val == 262144, rs2_w0_val == -9
// opcode: kadd32 ; op1:x23; op2:x23; dest:x11; op1val:0x08000000040000;  op2val:0xbffffffffffffff7
TEST_PKRR_OP(kadd32, x11, x23, x23, 0x0000000000000000, 0x08000000040000, 0xbffffffffffffff7, x23, x5, 32, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x30, rs2==x30, rd==x30, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 1073741824, rs2_w0_val == -3, rs2_w1_val == 2147483647
// opcode: kadd32 ; op1:x30; op2:x30; dest:x30; op1val:0x4000000000000009;  op2val:0x7ffffffffffffffd
TEST_PKRR_OP(kadd32, x30, x30, x30, 0x0000000000000000, 0x4000000000000009, 0x7ffffffffffffffd, x30, x5, 48, x12)

inst_4:
// rs2 == rd != rs1, rs1==x7, rs2==x9, rd==x9, rs1_w0_val == rs2_w0_val, rs1_w0_val == 0, rs2_w0_val == 0, rs1_w1_val == 131072, rs2_w1_val == -8388609
// opcode: kadd32 ; op1:x7; op2:x9; dest:x9; op1val:0x02000000000000;  op2val:0xff7fffff00000000
TEST_PKRR_OP(kadd32, x9, x7, x9, 0x0000000000000000, 0x02000000000000, 0xff7fffff00000000, x7, x5, 64, x12)

inst_5:
// rs1==x18, rs2==x19, rd==x6, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w0_val == 512, rs1_w1_val == 8, rs2_w1_val == 262144, rs1_w0_val == -16385
// opcode: kadd32 ; op1:x18; op2:x19; dest:x6; op1val:0x000008ffffbfff;  op2val:0x04000000000200
TEST_PKRR_OP(kadd32, x6, x18, x19, 0x0000000000000000, 0x000008ffffbfff, 0x04000000000200, x18, x5, 80, x12)

inst_6:
// rs1==x26, rs2==x28, rd==x23, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 16, rs2_w0_val == 268435456, rs2_w1_val == 1431655765
// opcode: kadd32 ; op1:x26; op2:x28; dest:x23; op1val:0x0000103fffffff;  op2val:0x5555555510000000
TEST_PKRR_OP(kadd32, x23, x26, x28, 0x0000000000000000, 0x0000103fffffff, 0x5555555510000000, x26, x5, 96, x12)

inst_7:
// rs1==x1, rs2==x26, rd==x8, rs2_w1_val == -1431655766, rs1_w0_val == -131073, rs1_w1_val == 1048576, rs2_w0_val == -2049
// opcode: kadd32 ; op1:x1; op2:x26; dest:x8; op1val:0x100000fffdffff;  op2val:0xaaaaaaaafffff7ff
TEST_PKRR_OP(kadd32, x8, x1, x26, 0x0000000000000000, 0x100000fffdffff, 0xaaaaaaaafffff7ff, x1, x5, 112, x12)

inst_8:
// rs1==x14, rs2==x21, rd==x7, rs2_w1_val == -536870913, rs1_w1_val == 4096, rs1_w0_val == -32769
// opcode: kadd32 ; op1:x14; op2:x21; dest:x7; op1val:0x001000ffff7fff;  op2val:0xdffffffffffffff9
TEST_PKRR_OP(kadd32, x7, x14, x21, 0x0000000000000000, 0x001000ffff7fff, 0xdffffffffffffff9, x14, x5, 128, x12)

inst_9:
// rs1==x15, rs2==x24, rd==x25, rs2_w1_val == -268435457, rs1_w0_val == -3, rs2_w0_val == 256, rs1_w1_val == 2147483647
// opcode: kadd32 ; op1:x15; op2:x24; dest:x25; op1val:0x7ffffffffffffffd;  op2val:0xefffffff00000100
TEST_PKRR_OP(kadd32, x25, x15, x24, 0x0000000000000000, 0x7ffffffffffffffd, 0xefffffff00000100, x15, x5, 144, x12)

inst_10:
// rs1==x8, rs2==x0, rd==x26, rs2_w1_val == -134217729, rs1_w1_val == 64, rs2_w0_val == 2, rs1_w0_val == -65
// opcode: kadd32 ; op1:x8; op2:x0; dest:x26; op1val:0x000040ffffffbf;  op2val:0xf7ffffff00000002
TEST_PKRR_OP(kadd32, x26, x8, x0, 0x0000000000000000, 0x000040ffffffbf, 0xf7ffffff00000002, x8, x5, 160, x12)

inst_11:
// rs1==x11, rs2==x15, rd==x27, rs2_w1_val == -67108865, rs1_w0_val == -262145, rs2_w0_val == -33554433, rs1_w1_val == -5
// opcode: kadd32 ; op1:x11; op2:x15; dest:x27; op1val:0xfffffffbfffbffff;  op2val:0xfbfffffffdffffff
TEST_PKRR_OP(kadd32, x27, x11, x15, 0x0000000000000000, 0xfffffffbfffbffff, 0xfbfffffffdffffff, x11, x5, 176, x12)

inst_12:
// rs1==x19, rs2==x4, rd==x15, rs2_w1_val == -33554433, rs1_w0_val == -1, rs2_w0_val == 536870912
// opcode: kadd32 ; op1:x19; op2:x4; dest:x15; op1val:0xfffffdffffffffff;  op2val:0xfdffffff20000000
TEST_PKRR_OP(kadd32, x15, x19, x4, 0x0000000000000000, 0xfffffdffffffffff, 0xfdffffff20000000, x19, x5, 192, x12)

inst_13:
// rs1==x21, rs2==x22, rd==x28, rs2_w1_val == -16777217, rs2_w0_val == -524289
// opcode: kadd32 ; op1:x21; op2:x22; dest:x28; op1val:0x00000600000007;  op2val:0xfefffffffff7ffff
TEST_PKRR_OP(kadd32, x28, x21, x22, 0x0000000000000000, 0x00000600000007, 0xfefffffffff7ffff, x21, x5, 208, x12)

inst_14:
// rs1==x25, rs2==x10, rd==x16, rs2_w1_val == -4194305, rs2_w0_val == 1431655765, rs1_w1_val == 512, rs1_w0_val == 1024
// opcode: kadd32 ; op1:x25; op2:x10; dest:x16; op1val:0x00020000000400;  op2val:0xffbfffff55555555
TEST_PKRR_OP(kadd32, x16, x25, x10, 0x0000000000000000, 0x00020000000400, 0xffbfffff55555555, x25, x5, 224, x12)

inst_15:
// rs1==x13, rs2==x3, rd==x22, rs2_w1_val == -2097153, rs1_w1_val == 8192
// opcode: kadd32 ; op1:x13; op2:x3; dest:x22; op1val:0x002000fffffff6;  op2val:0xffdfffff00000009
TEST_PKRR_OP(kadd32, x22, x13, x3, 0x0000000000000000, 0x002000fffffff6, 0xffdfffff00000009, x13, x5, 240, x23)
RVTEST_SIGBASE(x15,signature_x15_0)

inst_16:
// rs1==x4, rs2==x11, rd==x3, rs2_w1_val == -1048577, rs2_w0_val == 2097152
// opcode: kadd32 ; op1:x4; op2:x11; dest:x3; op1val:0x000005fffbffff;  op2val:0xffefffff00200000
TEST_PKRR_OP(kadd32, x3, x4, x11, 0x0000000000000000, 0x000005fffbffff, 0xffefffff00200000, x4, x15, 0, x23)

inst_17:
// rs1==x31, rs2==x6, rd==x24, rs2_w1_val == -524289, rs2_w0_val == 64, rs1_w0_val == 134217728
// opcode: kadd32 ; op1:x31; op2:x6; dest:x24; op1val:0x3fffffff08000000;  op2val:0xfff7ffff00000040
TEST_PKRR_OP(kadd32, x24, x31, x6, 0x0000000000000000, 0x3fffffff08000000, 0xfff7ffff00000040, x31, x15, 16, x23)

inst_18:
// rs1==x28, rs2==x5, rd==x10, rs2_w1_val == -262145, rs1_w1_val == 4194304, rs2_w0_val == -1073741825, rs1_w0_val == -2049
// opcode: kadd32 ; op1:x28; op2:x5; dest:x10; op1val:0x400000fffff7ff;  op2val:0xfffbffffbfffffff
TEST_PKRR_OP(kadd32, x10, x28, x5, 0x0000000000000000, 0x400000fffff7ff, 0xfffbffffbfffffff, x28, x15, 32, x23)

inst_19:
// rs1==x5, rs2==x8, rd==x1, rs2_w1_val == -131073, rs2_w0_val == -16777217, rs1_w0_val == 2147483647
// opcode: kadd32 ; op1:x5; op2:x8; dest:x1; op1val:0xfffffff87fffffff;  op2val:0xfffdfffffeffffff
TEST_PKRR_OP(kadd32, x1, x5, x8, 0x0000000000000000, 0xfffffff87fffffff, 0xfffdfffffeffffff, x5, x15, 48, x23)

inst_20:
// rs1==x6, rs2==x16, rd==x31, rs2_w1_val == -65537, rs1_w1_val == 1431655765, rs1_w0_val == 536870912, rs2_w0_val == -17
// opcode: kadd32 ; op1:x6; op2:x16; dest:x31; op1val:0x5555555520000000;  op2val:0xfffeffffffffffef
TEST_PKRR_OP(kadd32, x31, x6, x16, 0x0000000000000000, 0x5555555520000000, 0xfffeffffffffffef, x6, x15, 64, x23)

inst_21:
// rs1==x12, rs2==x14, rd==x0, rs2_w1_val == -32769, rs1_w0_val == 33554432, rs2_w0_val == -1431655766, rs1_w1_val == -257
// opcode: kadd32 ; op1:x12; op2:x14; dest:x0; op1val:0xfffffeff02000000;  op2val:0xffff7fffaaaaaaaa
TEST_PKRR_OP(kadd32, x0, x12, x14, 0x0000000000000000, 0xfffffeff02000000, 0xffff7fffaaaaaaaa, x12, x15, 80, x23)

inst_22:
// rs1==x16, rs2==x25, rd==x19, rs2_w1_val == -16385, rs1_w1_val == -1
// opcode: kadd32 ; op1:x16; op2:x25; dest:x19; op1val:0xffffffffffffffff;  op2val:0xffffbfffffdfffff
TEST_PKRR_OP(kadd32, x19, x16, x25, 0x0000000000000000, 0xffffffffffffffff, 0xffffbfffffdfffff, x16, x15, 96, x23)

inst_23:
// rs1==x22, rs2==x12, rd==x21, rs2_w1_val == -8193, rs1_w0_val == -2
// opcode: kadd32 ; op1:x22; op2:x12; dest:x21; op1val:0xfffffefffffffffe;  op2val:0xffffdffffffff7ff
TEST_PKRR_OP(kadd32, x21, x22, x12, 0x0000000000000000, 0xfffffefffffffffe, 0xffffdffffffff7ff, x22, x15, 112, x23)

inst_24:
// rs1==x2, rs2==x31, rd==x14, rs2_w1_val == -4097, rs2_w0_val == 131072, rs1_w0_val == 65536
// opcode: kadd32 ; op1:x2; op2:x31; dest:x14; op1val:0xfffffff600010000;  op2val:0xffffefff00020000
TEST_PKRR_OP(kadd32, x14, x2, x31, 0x0000000000000000, 0xfffffff600010000, 0xffffefff00020000, x2, x15, 128, x23)

inst_25:
// rs1==x27, rs2==x13, rd==x18, rs2_w1_val == -2049, rs1_w0_val == 2, rs1_w1_val == 4, rs2_w0_val == -16385
// opcode: kadd32 ; op1:x27; op2:x13; dest:x18; op1val:0x00000400000002;  op2val:0xfffff7ffffffbfff
TEST_PKRR_OP(kadd32, x18, x27, x13, 0x0000000000000000, 0x00000400000002, 0xfffff7ffffffbfff, x27, x15, 144, x23)

inst_26:
// rs1==x0, rs2==x7, rd==x12, rs2_w1_val == -1025, rs1_w1_val == -65, rs1_w0_val == -4097, rs2_w0_val == 134217728
// opcode: kadd32 ; op1:x0; op2:x7; dest:x12; op1val:0xffffffbfffffefff;  op2val:0xfffffbff08000000
TEST_PKRR_OP(kadd32, x12, x0, x7, 0x0000000000000000, 0xffffffbfffffefff, 0xfffffbff08000000, x0, x15, 160, x23)

inst_27:
// rs1==x24, rs2==x27, rd==x4, rs2_w1_val == -257, rs1_w0_val == 64, rs1_w1_val == -67108865, rs2_w0_val == -4097
// opcode: kadd32 ; op1:x24; op2:x27; dest:x4; op1val:0xfbffffff00000040;  op2val:0xfffffeffffffefff
TEST_PKRR_OP(kadd32, x4, x24, x27, 0x0000000000000000, 0xfbffffff00000040, 0xfffffeffffffefff, x24, x15, 176, x23)

inst_28:
// rs1==x29, rs2==x2, rd==x13, rs2_w1_val == -129, rs1_w0_val == 16777216, rs2_w0_val == -134217729
// opcode: kadd32 ; op1:x29; op2:x2; dest:x13; op1val:0xfffffff801000000;  op2val:0xffffff7ff7ffffff
TEST_PKRR_OP(kadd32, x13, x29, x2, 0x0000000000000000, 0xfffffff801000000, 0xffffff7ff7ffffff, x29, x15, 192, x23)

inst_29:
// rs1==x10, rs2==x17, rd==x29, rs2_w1_val == -65, rs1_w1_val == 32, rs1_w0_val == -4194305
// opcode: kadd32 ; op1:x10; op2:x17; dest:x29; op1val:0x000020ffbfffff;  op2val:0xffffffbf55555555
TEST_PKRR_OP(kadd32, x29, x10, x17, 0x0000000000000000, 0x000020ffbfffff, 0xffffffbf55555555, x10, x15, 208, x23)

inst_30:
// rs1==x17, rs2==x18, rd==x5, rs2_w1_val == -33, rs2_w0_val == 4194304, rs1_w1_val == -16777217
// opcode: kadd32 ; op1:x17; op2:x18; dest:x5; op1val:0xfeffffff00000040;  op2val:0xffffffdf00400000
TEST_PKRR_OP(kadd32, x5, x17, x18, 0x0000000000000000, 0xfeffffff00000040, 0xffffffdf00400000, x17, x15, 224, x23)

inst_31:
// rs1==x9, rs2==x20, rd==x17, rs2_w1_val == -17, rs1_w1_val == -536870913, rs1_w0_val == 1431655765, rs2_w0_val == 524288
// opcode: kadd32 ; op1:x9; op2:x20; dest:x17; op1val:0xdfffffff55555555;  op2val:0xffffffef00080000
TEST_PKRR_OP(kadd32, x17, x9, x20, 0x0000000000000000, 0xdfffffff55555555, 0xffffffef00080000, x9, x15, 240, x23)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs2_w1_val == -9, rs1_w1_val == -4194305
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000007;  op2val:0xfffffff755555555
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000007, 0xfffffff755555555, x30, x1, 0, x2)

inst_33:
// rs2_w1_val == -5, rs2_w0_val == 4, rs1_w1_val == -65537
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffffffff6;  op2val:0xfffffffb00000004
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffefffffffffff6, 0xfffffffb00000004, x30, x1, 16, x2)

inst_34:
// rs2_w1_val == -3, rs1_w0_val == 4194304
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00400000;  op2val:0xfffffffdffdfffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00400000, 0xfffffffdffdfffff, x30, x1, 32, x2)

inst_35:
// rs2_w1_val == -2, rs1_w1_val == 2097152, rs2_w0_val == 8388608
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffffffa;  op2val:0xfffffffe00800000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x200000fffffffa, 0xfffffffe00800000, x30, x1, 48, x2)

inst_36:
// rs2_w1_val == -2147483648, rs2_w0_val == 1024, rs1_w0_val == 1048576
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000100000;  op2val:0x8000000000000400
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x40000000100000, 0x8000000000000400, x30, x1, 64, x2)

inst_37:
// rs2_w1_val == 1073741824, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555501000000;  op2val:0x40000000fffffffd
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x5555555501000000, 0x40000000fffffffd, x30, x1, 80, x2)

inst_38:
// rs2_w1_val == 536870912, rs1_w1_val == -8193
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffffffffd;  op2val:0x2000000000000003
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xffffdffffffffffd, 0x2000000000000003, x30, x1, 96, x2)

inst_39:
// rs2_w1_val == 268435456, rs2_w0_val == -5
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000000;  op2val:0x10000000fffffffb
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000000, 0x10000000fffffffb, x30, x1, 112, x2)

inst_40:
// rs2_w1_val == 134217728, rs1_w1_val == -17
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000005;  op2val:0x8000000fff7ffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xffffffef00000005, 0x8000000fff7ffff, x30, x1, 128, x2)

inst_41:
// rs2_w1_val == 67108864, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00000040;  op2val:0x4000000fffbffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000040, 0x4000000fffbffff, x30, x1, 144, x2)

inst_42:
// rs2_w1_val == 33554432, rs1_w0_val == 131072
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000020000;  op2val:0x200000000000006
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x08000000020000, 0x200000000000006, x30, x1, 160, x2)

inst_43:
// rs2_w1_val == 8388608, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffffd;  op2val:0x80000008000000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffffd, 0x80000008000000, x30, x1, 176, x2)

inst_44:
// rs2_w1_val == 4194304, rs1_w0_val == -5, rs2_w0_val == 16777216, rs1_w1_val == 65536
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffffffb;  op2val:0x40000001000000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x010000fffffffb, 0x40000001000000, x30, x1, 192, x2)

inst_45:
// rs2_w1_val == 2097152, rs1_w0_val == -524289
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020fff7ffff;  op2val:0x20000000400000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x000020fff7ffff, 0x20000000400000, x30, x1, 208, x2)

inst_46:
// rs2_w1_val == 1048576, rs1_w0_val == -134217729
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffff7ffffff;  op2val:0x100000c0000000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xdffffffff7ffffff, 0x100000c0000000, x30, x1, 224, x2)

inst_47:
// rs2_w1_val == 524288, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffffbffff;  op2val:0x080000fffffff6
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffffdfffffbffff, 0x080000fffffff6, x30, x1, 240, x2)

inst_48:
// rs2_w1_val == 131072, rs1_w1_val == 2048, rs1_w0_val == 4096
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000001000;  op2val:0x020000fffff7ff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x00080000001000, 0x020000fffff7ff, x30, x1, 256, x2)

inst_49:
// rs2_w1_val == 65536, rs1_w0_val == 32768
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000008000;  op2val:0x01000000000200
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x08000000008000, 0x01000000000200, x30, x1, 272, x2)

inst_50:
// rs1_w0_val == 8388608, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00800000;  op2val:0x200000fffffff8
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00800000, 0x200000fffffff8, x30, x1, 288, x2)

inst_51:
// rs1_w0_val == 2097152, rs1_w1_val == -1048577
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00200000;  op2val:0x1000000000000005
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xffefffff00200000, 0x1000000000000005, x30, x1, 304, x2)

inst_52:
// rs1_w0_val == 524288, rs1_w1_val == -134217729, rs2_w0_val == 32
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00080000;  op2val:0x800000000000020
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00080000, 0x800000000000020, x30, x1, 320, x2)

inst_53:
// rs1_w0_val == 16384, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00004000;  op2val:0xfffffdffc0000000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00004000, 0xfffffdffc0000000, x30, x1, 336, x2)

inst_54:
// rs1_w0_val == 8192, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff800002000;  op2val:0xfffffff8fffffffc
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffffff800002000, 0xfffffff8fffffffc, x30, x1, 352, x2)

inst_55:
// rs1_w0_val == 2048, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000800;  op2val:0xfffff7ff00400000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x01000000000800, 0xfffff7ff00400000, x30, x1, 368, x2)

inst_56:
// rs1_w0_val == 512, rs2_w0_val == 262144
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000200;  op2val:0x10000000040000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000200, 0x10000000040000, x30, x1, 384, x2)

inst_57:
// rs1_w0_val == 256, rs2_w1_val == 8192
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000100;  op2val:0x00200000000100
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x00000600000100, 0x00200000000100, x30, x1, 400, x2)

inst_58:
// rs1_w0_val == 128, rs2_w0_val == -1025, rs2_w1_val == 0
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000080;  op2val:0x000000fffffbff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x00001000000080, 0x000000fffffbff, x30, x1, 416, x2)

inst_59:
// rs1_w0_val == 32, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000020;  op2val:0xfffffeff00000020
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x00000400000020, 0xfffffeff00000020, x30, x1, 432, x2)

inst_60:
// rs1_w0_val == 16, rs2_w0_val == -33
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000010;  op2val:0xfffff7ffffffffdf
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x00000400000010, 0xfffff7ffffffffdf, x30, x1, 448, x2)

inst_61:
// rs1_w0_val == 8, rs2_w0_val == -4194305
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000008;  op2val:0x80000000ffbfffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000008, 0x80000000ffbfffff, x30, x1, 464, x2)

inst_62:
// rs1_w0_val == 4, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000004;  op2val:0xffdfffff55555555
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x00100000000004, 0xffdfffff55555555, x30, x1, 480, x2)

inst_63:
// rs1_w0_val == 1, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000001;  op2val:0x1000000010000000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x08000000000001, 0x1000000010000000, x30, x1, 496, x2)

inst_64:
// rs2_w1_val == 32768, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffffbfff;  op2val:0x0080003fffffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x000008ffffbfff, 0x0080003fffffff, x30, x1, 512, x2)

inst_65:
// rs2_w1_val == 16384, rs2_w0_val == 1073741824, rs1_w1_val == -131073
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000400;  op2val:0x00400040000000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000400, 0x00400040000000, x30, x1, 528, x2)

inst_66:
// rs2_w1_val == 4096, rs2_w0_val == -1
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000004000000;  op2val:0x001000ffffffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x20000004000000, 0x001000ffffffff, x30, x1, 544, x2)

inst_67:
// rs2_w1_val == 2048, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000006;  op2val:0x00080000000006
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000006, 0x00080000000006, x30, x1, 560, x2)

inst_68:
// rs2_w1_val == 1024, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00008000;  op2val:0x00040000000000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00008000, 0x00040000000000, x30, x1, 576, x2)

inst_69:
// rs2_w1_val == 512, rs2_w0_val == 16
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000004;  op2val:0x00020000000010
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x00000400000004, 0x00020000000010, x30, x1, 592, x2)

inst_70:
// rs2_w1_val == 256, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000001;  op2val:0x00010055555555
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x00100000000001, 0x00010055555555, x30, x1, 608, x2)

inst_71:
// rs2_w1_val == 128, rs2_w0_val == -32769, rs1_w1_val == -2049
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffffffa;  op2val:0x000080ffff7fff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffffffa, 0x000080ffff7fff, x30, x1, 624, x2)

inst_72:
// rs2_w1_val == 64, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000fffffffe;  op2val:0x00004000000200
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xc0000000fffffffe, 0x00004000000200, x30, x1, 640, x2)

inst_73:
// rs2_w1_val == 32, rs1_w1_val == -262145
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff80000000;  op2val:0x000020ffbfffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffbffff80000000, 0x000020ffbfffff, x30, x1, 656, x2)

inst_74:
// rs2_w1_val == 16, rs1_w0_val == -268435457
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffefffffff;  op2val:0x00001055555555
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffbffffefffffff, 0x00001055555555, x30, x1, 672, x2)

inst_75:
// rs2_w1_val == 8, rs1_w1_val == 32768
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000040;  op2val:0x000008fdffffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x00800000000040, 0x000008fdffffff, x30, x1, 688, x2)

inst_76:
// rs2_w1_val == 4, rs1_w0_val == -33554433, rs2_w0_val == 32768
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040fdffffff;  op2val:0x00000400008000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x000040fdffffff, 0x00000400008000, x30, x1, 704, x2)

inst_77:
// rs2_w1_val == 2, rs2_w0_val == -67108865, rs1_w1_val == -524289
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000002;  op2val:0x000002fbffffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000002, 0x000002fbffffff, x30, x1, 720, x2)

inst_78:
// rs2_w1_val == 1, rs1_w1_val == 134217728
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffffffc;  op2val:0x000001fdffffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x8000000fffffffc, 0x000001fdffffff, x30, x1, 736, x2)

inst_79:
// rs2_w1_val == -1, rs1_w0_val == -65537
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffeffff;  op2val:0xffffffff00000007
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffeffff, 0xffffffff00000007, x30, x1, 752, x2)

inst_80:
// rs2_w0_val == 2147483647, rs1_w0_val == 1073741824
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000040000000;  op2val:0xfffffffb7fffffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x20000040000000, 0xfffffffb7fffffff, x30, x1, 768, x2)

inst_81:
// rs2_w0_val == -536870913, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004055555555;  op2val:0xffffffefdfffffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x00004055555555, 0xffffffefdfffffff, x30, x1, 784, x2)

inst_82:
// rs2_w0_val == -268435457, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000003;  op2val:0xfffff7ffefffffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000003, 0xfffff7ffefffffff, x30, x1, 800, x2)

inst_83:
// rs2_w0_val == -8388609, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000000;  op2val:0x080000ff7fffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xc000000000000000, 0x080000ff7fffff, x30, x1, 816, x2)

inst_84:
// rs2_w0_val == -1048577, rs1_w1_val == -1025
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000006;  op2val:0xfffffffbffefffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000006, 0xfffffffbffefffff, x30, x1, 832, x2)

inst_85:
// rs2_w0_val == -131073, rs1_w1_val == 16384
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x0040007fffffff;  op2val:0x3ffffffffffdffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x0040007fffffff, 0x3ffffffffffdffff, x30, x1, 848, x2)

inst_86:
// rs2_w0_val == -65537, rs1_w0_val == -2097153
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009ffdfffff;  op2val:0x000008fffeffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x000009ffdfffff, 0x000008fffeffff, x30, x1, 864, x2)

inst_87:
// rs2_w0_val == 65536, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9f7ffffff;  op2val:0x10000000010000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffffff9f7ffffff, 0x10000000010000, x30, x1, 880, x2)

inst_88:
// rs2_w0_val == 16384, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffdffffff;  op2val:0xffffffef00004000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffffbfffdffffff, 0xffffffef00004000, x30, x1, 896, x2)

inst_89:
// rs2_w0_val == 8192, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006ffffefff;  op2val:0xfffffffd00002000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x000006ffffefff, 0xfffffffd00002000, x30, x1, 912, x2)

inst_90:
// rs2_w0_val == 4096, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffdfffff;  op2val:0x00200000001000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x7fffffffffdfffff, 0x00200000001000, x30, x1, 928, x2)

inst_91:
// rs2_w0_val == 2048, rs1_w1_val == 536870912, rs1_w0_val == -513
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffffdff;  op2val:0xffefffff00000800
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x20000000fffffdff, 0xffefffff00000800, x30, x1, 944, x2)

inst_92:
// rs2_w0_val == 128, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000200;  op2val:0xc000000000000080
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x01000000000200, 0xc000000000000080, x30, x1, 960, x2)

inst_93:
// rs2_w0_val == 8, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffff7ffff;  op2val:0x2000000000000008
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffffbfffff7ffff, 0x2000000000000008, x30, x1, 976, x2)

inst_94:
// rs2_w0_val == 1, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000002;  op2val:0x800000000000001
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x00001000000002, 0x800000000000001, x30, x1, 992, x2)

inst_95:
// rs1_w1_val == -1431655766, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaffffffbf;  op2val:0x10000000ffffffef
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaffffffbf, 0x10000000ffffffef, x30, x1, 1008, x2)

inst_96:
// rs1_w1_val == -268435457, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffffffc;  op2val:0xffffffeffffffff8
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xeffffffffffffffc, 0xffffffeffffffff8, x30, x1, 1024, x2)

inst_97:
// rs1_w1_val == -33554433, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffff7fff;  op2val:0x200000ffff7fff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfdffffffffff7fff, 0x200000ffff7fff, x30, x1, 1040, x2)

inst_98:
// rs1_w1_val == -8388609, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffffffbf;  op2val:0x008000ffffefff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xff7fffffffffffbf, 0x008000ffffefff, x30, x1, 1056, x2)

inst_99:
// rs1_w1_val == -2097153, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00800000;  op2val:0x00000000000100
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00800000, 0x00000000000100, x30, x1, 1072, x2)

inst_100:
// rs1_w1_val == -32769, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffbffff;  op2val:0x02000001000000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffbffff, 0x02000001000000, x30, x1, 1088, x2)

inst_101:
// rs1_w1_val == -16385, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00004000;  op2val:0xfffffdfffffffbff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00004000, 0xfffffdfffffffbff, x30, x1, 1104, x2)

inst_102:
// rs1_w1_val == -4097, rs2_w0_val == -2, rs1_w0_val == -257
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffffffeff;  op2val:0x000008fffffffe
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xffffeffffffffeff, 0x000008fffffffe, x30, x1, 1120, x2)

inst_103:
// rs1_w1_val == -129, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffffffffe;  op2val:0x00000300000005
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xffffff7ffffffffe, 0x00000300000005, x30, x1, 1136, x2)

inst_104:
// rs1_w1_val == -33, rs1_w0_val == -1431655766
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfaaaaaaaa;  op2val:0xfffffbff00000080
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xffffffdfaaaaaaaa, 0xfffffbff00000080, x30, x1, 1152, x2)

inst_105:
// rs1_w1_val == -9, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700100000;  op2val:0x1000000000000020
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffffff700100000, 0x1000000000000020, x30, x1, 1168, x2)

inst_106:
// rs1_w1_val == -3, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffffff9;  op2val:0xfffffffb00000100
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffffff9, 0xfffffffb00000100, x30, x1, 1184, x2)

inst_107:
// rs1_w1_val == -2, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00008000;  op2val:0xefffffff00000080
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00008000, 0xefffffff00000080, x30, x1, 1200, x2)

inst_108:
// rs1_w1_val == -2147483648, rs2_w0_val == -2147483648
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000004;  op2val:0x00010080000000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x8000000000000004, 0x00010080000000, x30, x1, 1216, x2)

inst_109:
// rs1_w1_val == 268435456, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000080000000;  op2val:0x2000000aaaaaaaa
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x1000000080000000, 0x2000000aaaaaaaa, x30, x1, 1232, x2)

inst_110:
// rs1_w1_val == 67108864, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000020000000;  op2val:0x00040000000007
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x400000020000000, 0x00040000000007, x30, x1, 1248, x2)

inst_111:
// rs1_w1_val == 262144, rs2_w0_val == 67108864
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffeffff;  op2val:0x08000004000000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x040000fffeffff, 0x08000004000000, x30, x1, 1264, x2)

inst_112:
// rs1_w1_val == 1024, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffdfffff;  op2val:0x000800fbffffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x000400ffdfffff, 0x000800fbffffff, x30, x1, 1280, x2)

inst_113:
// rs1_w1_val == 256, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010040000000;  op2val:0xffefffff00080000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x00010040000000, 0xffefffff00080000, x30, x1, 1296, x2)

inst_114:
// rs1_w1_val == 128, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080ffffbfff;  op2val:0x00001000000005
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x000080ffffbfff, 0x00001000000005, x30, x1, 1312, x2)

inst_115:
// rs1_w1_val == 2, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000200;  op2val:0x00000700000007
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x00000200000200, 0x00000700000007, x30, x1, 1328, x2)

inst_116:
// rs1_w1_val == 33554432, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000800;  op2val:0x000009ff7fffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x200000000000800, 0x000009ff7fffff, x30, x1, 1344, x2)

inst_117:
// rs1_w1_val == 1, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000000;  op2val:0x000010fdffffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x00000100000000, 0x000010fdffffff, x30, x1, 1360, x2)

inst_118:
// rs1_w1_val == 0, rs1_w0_val == -9
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffffff7;  op2val:0x000080ffff7fff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x000000fffffff7, 0x000080ffff7fff, x30, x1, 1376, x2)

inst_119:
// rs1_w0_val == -1073741825, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000bfffffff;  op2val:0xffffefff7fffffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x008000bfffffff, 0xffffefff7fffffff, x30, x1, 1392, x2)

inst_120:
// rs1_w0_val == -536870913, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000dfffffff;  op2val:0x80000040000000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x001000dfffffff, 0x80000040000000, x30, x1, 1408, x2)

inst_121:
// rs1_w0_val == -67108865, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffbffffff;  op2val:0xefffffffbfffffff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xffff7ffffbffffff, 0xefffffffbfffffff, x30, x1, 1424, x2)

inst_122:
// rs1_w0_val == -16777217, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfeffffff;  op2val:0xfffffbff10000000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffffffbfeffffff, 0xfffffbff10000000, x30, x1, 1440, x2)

inst_123:
// rs1_w0_val == -8388609, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbff7fffff;  op2val:0x7fffffff00010000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffffffbff7fffff, 0x7fffffff00010000, x30, x1, 1456, x2)

inst_124:
// rs2_w0_val == -8193, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfeffffff;  op2val:0xfffffff9ffffdfff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffffffdfeffffff, 0xfffffff9ffffdfff, x30, x1, 1472, x2)

inst_125:
// rs1_w0_val == -1048577, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000800ffefffff;  op2val:0x00000600040000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x000800ffefffff, 0x00000600040000, x30, x1, 1488, x2)

inst_126:
// rs2_w0_val == -513, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00020000;  op2val:0xfffffff9fffffdff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00020000, 0xfffffff9fffffdff, x30, x1, 1504, x2)

inst_127:
// rs2_w0_val == -257, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000ffffefff;  op2val:0xdffffffffffffeff
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x200000ffffefff, 0xdffffffffffffeff, x30, x1, 1520, x2)

inst_128:
// rs2_w0_val == -129, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000009;  op2val:0xfffffdffffffff7f
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000009, 0xfffffdffffffff7f, x30, x1, 1536, x2)

inst_129:
// rs2_w0_val == -65, rs1_w0_val == -33
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffffdf;  op2val:0x000040ffffffbf
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffffdf, 0x000040ffffffbf, x30, x1, 1552, x2)

inst_130:
// rs1_w0_val == -8193, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400ffffdfff;  op2val:0xfffeffff00000009
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x000400ffffdfff, 0xfffeffff00000009, x30, x1, 1568, x2)

inst_131:
// rs1_w0_val == -1025, rs2_w0_val == 1048576
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffffbff;  op2val:0xfffffffe00100000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x8000000fffffbff, 0xfffffffe00100000, x30, x1, 1584, x2)

inst_132:
// rs1_w0_val == -129, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffffff7f;  op2val:0x8000000fffffff9
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xff7fffffffffff7f, 0x8000000fffffff9, x30, x1, 1600, x2)

inst_133:
// rs1_w0_val == -17, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000ffffffef;  op2val:0x04000000400000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x2000000ffffffef, 0x04000000400000, x30, x1, 1616, x2)

inst_134:
// rs2_w0_val == 33554432, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xc0000000ffffefff;  op2val:0x8000000002000000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xc0000000ffffefff, 0x8000000002000000, x30, x1, 1632, x2)

inst_135:
// rs1_w0_val == 268435456, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff10000000;  op2val:0xfffbffff00001000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff10000000, 0xfffbffff00001000, x30, x1, 1648, x2)

inst_136:
// rs1_w1_val == 16777216, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000ffffffdf;  op2val:0x3ffffffffffffffb
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x1000000ffffffdf, 0x3ffffffffffffffb, x30, x1, 1664, x2)

inst_137:
// rs1_w1_val == 8388608, 
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000400;  op2val:0xfffffff600000080
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x80000000000400, 0xfffffff600000080, x30, x1, 1680, x2)

inst_138:
// rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w1_val == -1073741825, rs1_w1_val == 524288, rs1_w0_val == 262144, rs2_w0_val == -9
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000040000;  op2val:0xbffffffffffffff7
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x08000000040000, 0xbffffffffffffff7, x30, x1, 1696, x2)

inst_139:
// rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 1073741824, rs2_w0_val == -3, rs2_w1_val == 2147483647
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000009;  op2val:0x7ffffffffffffffd
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x4000000000000009, 0x7ffffffffffffffd, x30, x1, 1712, x2)

inst_140:
// rs2_w1_val == -134217729, rs1_w1_val == 64, rs2_w0_val == 2, rs1_w0_val == -65
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040ffffffbf;  op2val:0xf7ffffff00000002
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0x000040ffffffbf, 0xf7ffffff00000002, x30, x1, 1728, x2)

inst_141:
// rs2_w1_val == -32769, rs1_w0_val == 33554432, rs2_w0_val == -1431655766, rs1_w1_val == -257
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff02000000;  op2val:0xffff7fffaaaaaaaa
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xfffffeff02000000, 0xffff7fffaaaaaaaa, x30, x1, 1744, x2)

inst_142:
// rs2_w1_val == -1025, rs1_w1_val == -65, rs1_w0_val == -4097, rs2_w0_val == 134217728
// opcode: kadd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffffefff;  op2val:0xfffffbff08000000
TEST_PKRR_OP(kadd32, x31, x30, x29, 0x0000000000000000, 0xffffffbfffffefff, 0xfffffbff08000000, x30, x1, 1760, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x15_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 222*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
