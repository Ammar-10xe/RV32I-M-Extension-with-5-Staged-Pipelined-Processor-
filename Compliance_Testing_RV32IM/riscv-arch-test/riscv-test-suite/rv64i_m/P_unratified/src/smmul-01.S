
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smmul instruction of the RISC-V RV64PZicsr extension for the smmul covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smmul)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x17, rs2==x12, rd==x17, rs1_w0_val == -2147483648, rs2_w0_val == 4194304, rs2_w1_val == -65537, rs1_w1_val == 1073741824
// opcode: smmul ; op1:x17; dest:x17; op1val:0x4000000080000000;  immval:$imm_val
TEST_RR_OP(smmul, x17, x17, x12, 0x0000000000000000, 0x4000000080000000, 0xfffeffff00400000, x2, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x25, rs2==x0, rd==x7, rs2_w1_val == -1431655766, rs2_w0_val == -536870913, rs1_w1_val == -33554433, rs1_w0_val == 8
// opcode: smmul ; op1:x25; dest:x7; op1val:0xfdffffff00000008;  immval:$imm_val
TEST_RR_OP(smmul, x7, x25, x0, 0x0000000000000000, 0xfdffffff00000008, 0xaaaaaaaadfffffff, x2, 8, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x1, rs2==x1, rd==x0, rs2_w1_val == 1431655765, rs2_w0_val == -9, rs1_w1_val == 8388608, rs1_w0_val == 128
// opcode: smmul ; op1:x1; dest:x0; op1val:0x80000000000080;  immval:$imm_val
TEST_RR_OP(smmul, x0, x1, x1, 0x0000000000000000, 0x80000000000080, 0x55555555fffffff7, x2, 16, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x31, rs2==x31, rd==x31, rs2_w1_val == 2147483647, rs1_w0_val == -33, rs2_w0_val == -17, rs1_w1_val == 16
// opcode: smmul ; op1:x31; dest:x31; op1val:0x000010ffffffdf;  immval:$imm_val
TEST_RR_OP(smmul, x31, x31, x31, 0x0000000000000000, 0x000010ffffffdf, 0x7fffffffffffffef, x2, 24, x3)

inst_4:
// rs2 == rd != rs1, rs1==x4, rs2==x8, rd==x8, rs2_w1_val == -1073741825, rs2_w0_val == 8192, rs1_w1_val == 4096
// opcode: smmul ; op1:x4; dest:x8; op1val:0x00100000000009;  immval:$imm_val
TEST_RR_OP(smmul, x8, x4, x8, 0x0000000000000000, 0x00100000000009, 0xbfffffff00002000, x2, 32, x3)

inst_5:
// rs1==x18, rs2==x30, rd==x12, rs2_w1_val == -536870913, rs1_w1_val == 65536, rs2_w0_val == -5, rs1_w0_val == -33554433
// opcode: smmul ; op1:x18; dest:x12; op1val:0x010000fdffffff;  immval:$imm_val
TEST_RR_OP(smmul, x12, x18, x30, 0x0000000000000000, 0x010000fdffffff, 0xdffffffffffffffb, x2, 40, x3)

inst_6:
// rs1==x30, rs2==x19, rd==x10, rs2_w1_val == -268435457, rs1_w0_val == 16
// opcode: smmul ; op1:x30; dest:x10; op1val:0x00001000000010;  immval:$imm_val
TEST_RR_OP(smmul, x10, x30, x19, 0x0000000000000000, 0x00001000000010, 0xeffffffffffffffc, x2, 48, x3)

inst_7:
// rs1==x22, rs2==x10, rd==x26, rs2_w1_val == -134217729, rs2_w0_val == -4097, rs1_w0_val == -16777217
// opcode: smmul ; op1:x22; dest:x26; op1val:0xfffffffcfeffffff;  immval:$imm_val
TEST_RR_OP(smmul, x26, x22, x10, 0x0000000000000000, 0xfffffffcfeffffff, 0xf7ffffffffffefff, x2, 56, x3)

inst_8:
// rs1==x19, rs2==x29, rd==x18, rs2_w1_val == -67108865, rs1_w1_val == -513, rs1_w0_val == 1024
// opcode: smmul ; op1:x19; dest:x18; op1val:0xfffffdff00000400;  immval:$imm_val
TEST_RR_OP(smmul, x18, x19, x29, 0x0000000000000000, 0xfffffdff00000400, 0xfbffffff00002000, x2, 64, x3)

inst_9:
// rs1==x13, rs2==x26, rd==x20, rs2_w1_val == -33554433, rs2_w0_val == 65536, rs1_w0_val == -8388609
// opcode: smmul ; op1:x13; dest:x20; op1val:0xfffffffcff7fffff;  immval:$imm_val
TEST_RR_OP(smmul, x20, x13, x26, 0x0000000000000000, 0xfffffffcff7fffff, 0xfdffffff00010000, x2, 72, x3)

inst_10:
// rs1==x27, rs2==x16, rd==x28, rs2_w1_val == -16777217, rs1_w0_val == 2097152, rs1_w1_val == -32769, rs2_w0_val == 32768
// opcode: smmul ; op1:x27; dest:x28; op1val:0xffff7fff00200000;  immval:$imm_val
TEST_RR_OP(smmul, x28, x27, x16, 0x0000000000000000, 0xffff7fff00200000, 0xfeffffff00008000, x2, 80, x3)

inst_11:
// rs1==x14, rs2==x22, rd==x27, rs2_w1_val == -8388609, rs1_w1_val == 1431655765
// opcode: smmul ; op1:x14; dest:x27; op1val:0x55555555fffffff8;  immval:$imm_val
TEST_RR_OP(smmul, x27, x14, x22, 0x0000000000000000, 0x55555555fffffff8, 0xff7fffffffffefff, x2, 88, x3)

inst_12:
// rs1==x20, rs2==x25, rd==x14, rs2_w1_val == -4194305, rs1_w0_val == -1073741825, rs2_w0_val == 268435456, rs1_w1_val == -4097
// opcode: smmul ; op1:x20; dest:x14; op1val:0xffffefffbfffffff;  immval:$imm_val
TEST_RR_OP(smmul, x14, x20, x25, 0x0000000000000000, 0xffffefffbfffffff, 0xffbfffff10000000, x2, 96, x3)

inst_13:
// rs1==x15, rs2==x17, rd==x1, rs2_w1_val == -2097153, rs1_w0_val == -1048577, rs1_w1_val == 16384
// opcode: smmul ; op1:x15; dest:x1; op1val:0x004000ffefffff;  immval:$imm_val
TEST_RR_OP(smmul, x1, x15, x17, 0x0000000000000000, 0x004000ffefffff, 0xffdffffffffffff8, x2, 104, x3)

inst_14:
// rs1==x12, rs2==x14, rd==x5, rs2_w1_val == -1048577, rs1_w0_val == -2097153, rs1_w1_val == -2097153
// opcode: smmul ; op1:x12; dest:x5; op1val:0xffdfffffffdfffff;  immval:$imm_val
TEST_RR_OP(smmul, x5, x12, x14, 0x0000000000000000, 0xffdfffffffdfffff, 0xffefffff10000000, x2, 112, x3)

inst_15:
// rs1==x21, rs2==x27, rd==x16, rs2_w1_val == -524289, rs1_w0_val == -536870913, rs2_w0_val == -262145, rs1_w1_val == 2048
// opcode: smmul ; op1:x21; dest:x16; op1val:0x000800dfffffff;  immval:$imm_val
TEST_RR_OP(smmul, x16, x21, x27, 0x0000000000000000, 0x000800dfffffff, 0xfff7fffffffbffff, x2, 120, x3)

inst_16:
// rs1==x6, rs2==x4, rd==x21, rs2_w1_val == -262145, rs1_w0_val == 4096, rs1_w1_val == -65, rs2_w0_val == -33554433
// opcode: smmul ; op1:x6; dest:x21; op1val:0xffffffbf00001000;  immval:$imm_val
TEST_RR_OP(smmul, x21, x6, x4, 0x0000000000000000, 0xffffffbf00001000, 0xfffbfffffdffffff, x2, 128, x3)

inst_17:
// rs1==x7, rs2==x5, rd==x25, rs2_w1_val == -131073, rs1_w1_val == -1431655766, rs1_w0_val == -513
// opcode: smmul ; op1:x7; dest:x25; op1val:0xaaaaaaaafffffdff;  immval:$imm_val
TEST_RR_OP(smmul, x25, x7, x5, 0x0000000000000000, 0xaaaaaaaafffffdff, 0xfffdfffffffffffa, x2, 136, x3)

inst_18:
// rs1==x11, rs2==x23, rd==x9, rs2_w1_val == -32769, rs1_w0_val == 32, rs1_w1_val == -268435457
// opcode: smmul ; op1:x11; dest:x9; op1val:0xefffffff00000020;  immval:$imm_val
TEST_RR_OP(smmul, x9, x11, x23, 0x0000000000000000, 0xefffffff00000020, 0xffff7ffffffffff6, x2, 144, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_19:
// rs1==x2, rs2==x21, rd==x4, rs2_w1_val == -16385, rs2_w0_val == -257
// opcode: smmul ; op1:x2; dest:x4; op1val:0x555555553fffffff;  immval:$imm_val
TEST_RR_OP(smmul, x4, x2, x21, 0x0000000000000000, 0x555555553fffffff, 0xffffbffffffffeff, x1, 0, x12)

inst_20:
// rs1==x9, rs2==x18, rd==x11, rs2_w1_val == -8193, rs1_w0_val == -131073
// opcode: smmul ; op1:x9; dest:x11; op1val:0xeffffffffffdffff;  immval:$imm_val
TEST_RR_OP(smmul, x11, x9, x18, 0x0000000000000000, 0xeffffffffffdffff, 0xffffdffffffffeff, x1, 8, x12)

inst_21:
// rs1==x16, rs2==x28, rd==x22, rs2_w1_val == -4097, rs2_w0_val == -65
// opcode: smmul ; op1:x16; dest:x22; op1val:0x001000fffffdff;  immval:$imm_val
TEST_RR_OP(smmul, x22, x16, x28, 0x0000000000000000, 0x001000fffffdff, 0xffffefffffffffbf, x1, 16, x12)

inst_22:
// rs1==x3, rs2==x15, rd==x2, rs2_w1_val == -2049, rs1_w1_val == 67108864, rs2_w0_val == -32769
// opcode: smmul ; op1:x3; dest:x2; op1val:0x4000000fffdffff;  immval:$imm_val
TEST_RR_OP(smmul, x2, x3, x15, 0x0000000000000000, 0x4000000fffdffff, 0xfffff7ffffff7fff, x1, 24, x12)

inst_23:
// rs1==x0, rs2==x6, rd==x24, rs2_w1_val == -1025, rs2_w0_val == 8
// opcode: smmul ; op1:x0; dest:x24; op1val:0x00400000000007;  immval:$imm_val
TEST_RR_OP(smmul, x24, x0, x6, 0x0000000000000000, 0x00400000000007, 0xfffffbff00000008, x1, 32, x12)

inst_24:
// rs1==x8, rs2==x2, rd==x19, rs2_w1_val == -513, rs1_w1_val == 131072
// opcode: smmul ; op1:x8; dest:x19; op1val:0x02000000000400;  immval:$imm_val
TEST_RR_OP(smmul, x19, x8, x2, 0x0000000000000000, 0x02000000000400, 0xfffffdfffffffffb, x1, 40, x12)

inst_25:
// rs1==x24, rs2==x9, rd==x3, rs2_w1_val == -257, rs1_w0_val == -262145
// opcode: smmul ; op1:x24; dest:x3; op1val:0x000003fffbffff;  immval:$imm_val
TEST_RR_OP(smmul, x3, x24, x9, 0x0000000000000000, 0x000003fffbffff, 0xfffffeff00000005, x1, 48, x12)

inst_26:
// rs1==x29, rs2==x20, rd==x13, rs2_w1_val == -129, rs1_w1_val == 33554432
// opcode: smmul ; op1:x29; dest:x13; op1val:0x2000000fffbffff;  immval:$imm_val
TEST_RR_OP(smmul, x13, x29, x20, 0x0000000000000000, 0x2000000fffbffff, 0xffffff7f00002000, x1, 56, x12)

inst_27:
// rs1==x23, rs2==x13, rd==x6, rs2_w1_val == -65, 
// opcode: smmul ; op1:x23; dest:x6; op1val:0x00001000000006;  immval:$imm_val
TEST_RR_OP(smmul, x6, x23, x13, 0x0000000000000000, 0x00001000000006, 0xffffffbffffffff8, x1, 64, x12)

inst_28:
// rs1==x28, rs2==x3, rd==x30, rs2_w1_val == -33, rs1_w1_val == -16777217, rs1_w0_val == -2
// opcode: smmul ; op1:x28; dest:x30; op1val:0xfefffffffffffffe;  immval:$imm_val
TEST_RR_OP(smmul, x30, x28, x3, 0x0000000000000000, 0xfefffffffffffffe, 0xffffffdf00010000, x1, 72, x12)

inst_29:
// rs1==x26, rs2==x7, rd==x15, rs2_w1_val == -17, rs1_w1_val == -5, rs1_w0_val == -17, rs2_w0_val == 33554432
// opcode: smmul ; op1:x26; dest:x15; op1val:0xfffffffbffffffef;  immval:$imm_val
TEST_RR_OP(smmul, x15, x26, x7, 0x0000000000000000, 0xfffffffbffffffef, 0xffffffef02000000, x1, 80, x12)

inst_30:
// rs1==x5, rs2==x24, rd==x29, rs2_w1_val == -9, rs2_w0_val == 32, rs1_w1_val == 32, rs1_w0_val == -65537
// opcode: smmul ; op1:x5; dest:x29; op1val:0x000020fffeffff;  immval:$imm_val
TEST_RR_OP(smmul, x29, x5, x24, 0x0000000000000000, 0x000020fffeffff, 0xfffffff700000020, x1, 88, x12)

inst_31:
// rs1==x10, rs2==x11, rd==x23, rs2_w1_val == -5, rs1_w0_val == -8193, rs1_w1_val == 64
// opcode: smmul ; op1:x10; dest:x23; op1val:0x000040ffffdfff;  immval:$imm_val
TEST_RR_OP(smmul, x23, x10, x11, 0x0000000000000000, 0x000040ffffdfff, 0xfffffffbffff7fff, x1, 96, x12)

inst_32:
// rs2_w1_val == -3, rs1_w0_val == 131072
// opcode: smmul ; op1:x30; dest:x31; op1val:0xaaaaaaaa00020000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00020000, 0xfffffffdfffbffff, x1, 104, x12)

inst_33:
// rs2_w1_val == -2, rs1_w1_val == -9
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffffff700000006;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffffff700000006, 0xfffffffefffffffc, x1, 112, x12)

inst_34:
// rs2_w1_val == -2147483648, rs2_w0_val == -2049, rs1_w0_val == 1073741824
// opcode: smmul ; op1:x30; dest:x31; op1val:0x00000540000000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x00000540000000, 0x80000000fffff7ff, x1, 120, x12)

inst_35:
// rs2_w1_val == 1073741824, rs1_w1_val == -8388609, rs1_w0_val == -5
// opcode: smmul ; op1:x30; dest:x31; op1val:0xff7ffffffffffffb;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffffffb, 0x40000000ffffffbf, x1, 128, x12)

inst_36:
// rs2_w1_val == 536870912, rs1_w0_val == -16385, rs1_w1_val == -1048577
// opcode: smmul ; op1:x30; dest:x31; op1val:0xffefffffffffbfff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xffefffffffffbfff, 0x2000000000010000, x1, 136, x12)

inst_37:
// rs2_w1_val == 268435456, rs1_w0_val == 1048576, rs1_w1_val == -2147483648, rs2_w0_val == 1
// opcode: smmul ; op1:x30; dest:x31; op1val:0x8000000000100000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x8000000000100000, 0x1000000000000001, x1, 144, x12)

inst_38:
// rs2_w1_val == 134217728, rs2_w0_val == -67108865
// opcode: smmul ; op1:x30; dest:x31; op1val:0xff7ffffffffbffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffbffff, 0x8000000fbffffff, x1, 152, x12)

inst_39:
// rs2_w1_val == 67108864, rs1_w1_val == 128, rs2_w0_val == -2147483648
// opcode: smmul ; op1:x30; dest:x31; op1val:0x00008000000400;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x00008000000400, 0x400000080000000, x1, 160, x12)

inst_40:
// rs2_w1_val == 33554432, rs1_w0_val == 134217728
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfdffffff08000000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfdffffff08000000, 0x200000000010000, x1, 168, x12)

inst_41:
// rs2_w1_val == 16777216, rs1_w1_val == 512, rs2_w0_val == 67108864
// opcode: smmul ; op1:x30; dest:x31; op1val:0x000200ffffffef;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x000200ffffffef, 0x100000004000000, x1, 176, x12)

inst_42:
// rs2_w1_val == 8388608, rs1_w1_val == -131073, rs1_w0_val == -268435457, rs2_w0_val == -65537
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffdffffefffffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffdffffefffffff, 0x800000fffeffff, x1, 184, x12)

inst_43:
// rs2_w1_val == 4194304, rs1_w1_val == -1073741825, rs1_w0_val == 256, rs2_w0_val == 128
// opcode: smmul ; op1:x30; dest:x31; op1val:0xbfffffff00000100;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000100, 0x40000000000080, x1, 192, x12)

inst_44:
// rs2_w1_val == 2097152, rs1_w1_val == 4, rs2_w0_val == 536870912
// opcode: smmul ; op1:x30; dest:x31; op1val:0x000004fffffdff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x000004fffffdff, 0x20000020000000, x1, 200, x12)

inst_45:
// rs2_w1_val == 1048576, rs1_w0_val == 2147483647, rs2_w0_val == 8388608
// opcode: smmul ; op1:x30; dest:x31; op1val:0xffdfffff7fffffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xffdfffff7fffffff, 0x10000000800000, x1, 208, x12)

inst_46:
// rs2_w1_val == 524288, rs2_w0_val == -268435457
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffdffffbfffffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffdffffbfffffff, 0x080000efffffff, x1, 216, x12)

inst_47:
// rs2_w1_val == 262144, rs2_w0_val == -524289, rs1_w0_val == -257, rs1_w1_val == 524288
// opcode: smmul ; op1:x30; dest:x31; op1val:0x080000fffffeff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x080000fffffeff, 0x040000fff7ffff, x1, 224, x12)

inst_48:
// rs2_w1_val == 131072, rs2_w0_val == -16385, rs1_w0_val == 4, rs1_w1_val == 1048576
// opcode: smmul ; op1:x30; dest:x31; op1val:0x10000000000004;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x10000000000004, 0x020000ffffbfff, x1, 232, x12)

inst_49:
// rs2_w1_val == 65536, rs1_w1_val == -257, rs2_w0_val == -134217729
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffffeffff7fffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffffeffff7fffff, 0x010000f7ffffff, x1, 240, x12)

inst_50:
// rs1_w0_val == 8192, rs2_w0_val == -16777217
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffffeff00002000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffffeff00002000, 0xffbffffffeffffff, x1, 248, x12)

inst_51:
// rs1_w0_val == 2048, rs2_w1_val == 4, rs1_w1_val == 1
// opcode: smmul ; op1:x30; dest:x31; op1val:0x00000100000800;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x00000100000800, 0x000004fffffff6, x1, 256, x12)

inst_52:
// rs1_w0_val == 512, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0x80000000000200;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x80000000000200, 0xff7fffff3fffffff, x1, 264, x12)

inst_53:
// rs1_w0_val == 64, rs1_w1_val == 134217728
// opcode: smmul ; op1:x30; dest:x31; op1val:0x800000000000040;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x800000000000040, 0x00000700000003, x1, 272, x12)

inst_54:
// rs1_w0_val == 2, rs2_w0_val == 4, rs2_w1_val == 64, rs1_w1_val == 2
// opcode: smmul ; op1:x30; dest:x31; op1val:0x00000200000002;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x00000200000002, 0x00004000000004, x1, 280, x12)

inst_55:
// rs1_w0_val == 1, rs2_w0_val == 1073741824, rs1_w1_val == -33
// opcode: smmul ; op1:x30; dest:x31; op1val:0xffffffdf00000001;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000001, 0xfffffdff40000000, x1, 288, x12)

inst_56:
// rs1_w0_val == 0, rs2_w0_val == 4096, rs2_w1_val == 8
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffffff700000000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffffff700000000, 0x00000800001000, x1, 296, x12)

inst_57:
// rs1_w0_val == -1, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xc0000000ffffffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xc0000000ffffffff, 0xffffefffffffefff, x1, 304, x12)

inst_58:
// rs2_w1_val == 32768, rs1_w1_val == -3, rs1_w0_val == -67108865
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffffffdfbffffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffffffdfbffffff, 0x008000fdffffff, x1, 312, x12)

inst_59:
// rs2_w1_val == 16384, rs1_w1_val == -262145, rs2_w0_val == 2
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffbffff00000000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000000, 0x00400000000002, x1, 320, x12)

inst_60:
// rs2_w1_val == 8192, rs2_w0_val == -1048577
// opcode: smmul ; op1:x30; dest:x31; op1val:0x000002fffffffc;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x000002fffffffc, 0x002000ffefffff, x1, 328, x12)

inst_61:
// rs2_w1_val == 4096, rs2_w0_val == 16384, rs1_w1_val == 8
// opcode: smmul ; op1:x30; dest:x31; op1val:0x000008feffffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x000008feffffff, 0x00100000004000, x1, 336, x12)

inst_62:
// rs2_w1_val == 2048, rs2_w0_val == 1048576
// opcode: smmul ; op1:x30; dest:x31; op1val:0x000008fbffffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x000008fbffffff, 0x00080000100000, x1, 344, x12)

inst_63:
// rs2_w1_val == 1024, rs1_w1_val == 2147483647, rs2_w0_val == -8388609
// opcode: smmul ; op1:x30; dest:x31; op1val:0x7fffffff00002000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x7fffffff00002000, 0x000400ff7fffff, x1, 352, x12)

inst_64:
// rs2_w1_val == 512, rs1_w0_val == 536870912, rs2_w0_val == 131072
// opcode: smmul ; op1:x30; dest:x31; op1val:0x3fffffff20000000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x3fffffff20000000, 0x00020000020000, x1, 360, x12)

inst_65:
// rs2_w1_val == 256, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0x55555555fbffffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x55555555fbffffff, 0x00010004000000, x1, 368, x12)

inst_66:
// rs2_w1_val == 128, rs1_w0_val == 8388608, rs2_w0_val == 2147483647
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffffffb00800000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffffffb00800000, 0x0000807fffffff, x1, 376, x12)

inst_67:
// rs2_w1_val == 32, rs1_w1_val == -2, rs1_w0_val == -4097
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffffffeffffefff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffefff, 0x000020fffffffa, x1, 384, x12)

inst_68:
// rs2_w1_val == 16, rs1_w0_val == 33554432, rs1_w1_val == 268435456
// opcode: smmul ; op1:x30; dest:x31; op1val:0x1000000002000000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x1000000002000000, 0x000010feffffff, x1, 392, x12)

inst_69:
// rs2_w1_val == 2, rs1_w0_val == -65
// opcode: smmul ; op1:x30; dest:x31; op1val:0x000200ffffffbf;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x000200ffffffbf, 0x000002fffffffa, x1, 400, x12)

inst_70:
// rs2_w1_val == 1, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffffffadfffffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffffffadfffffff, 0x00000100008000, x1, 408, x12)

inst_71:
// rs2_w1_val == 0, rs1_w1_val == 16777216, rs1_w0_val == 524288, rs2_w0_val == 0
// opcode: smmul ; op1:x30; dest:x31; op1val:0x100000000080000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x100000000080000, 0x00000000000000, x1, 416, x12)

inst_72:
// rs2_w1_val == -1, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0x100000000000010;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x100000000000010, 0xfffffffffffffffa, x1, 424, x12)

inst_73:
// rs2_w0_val == -1431655766, rs1_w0_val == -1431655766
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffffff9aaaaaaaa;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffffff9aaaaaaaa, 0x000001aaaaaaaa, x1, 432, x12)

inst_74:
// rs2_w0_val == 1431655765, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xffff7ffffffffff8;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffffff8, 0xdfffffff55555555, x1, 440, x12)

inst_75:
// rs2_w0_val == 64, rs1_w0_val == 67108864
// opcode: smmul ; op1:x30; dest:x31; op1val:0x00002004000000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x00002004000000, 0x00000200000040, x1, 448, x12)

inst_76:
// rs2_w0_val == 16, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xefffffff00100000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xefffffff00100000, 0x08000000000010, x1, 456, x12)

inst_77:
// rs2_w0_val == -1, rs1_w1_val == -1025, rs1_w0_val == 65536
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffffbff00010000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffffbff00010000, 0x10000000ffffffff, x1, 464, x12)

inst_78:
// rs1_w1_val == -536870913, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xdfffffff00002000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xdfffffff00002000, 0xf7ffffffefffffff, x1, 472, x12)

inst_79:
// rs1_w1_val == -134217729, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xf7ffffff00000200;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000200, 0xfffffffc00100000, x1, 480, x12)

inst_80:
// rs1_w1_val == -67108865, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfbfffffffffbffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffbffff, 0xfffffffb00000007, x1, 488, x12)

inst_81:
// rs1_w1_val == -4194305, rs2_w0_val == -513
// opcode: smmul ; op1:x30; dest:x31; op1val:0xffbfffffdfffffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xffbfffffdfffffff, 0xfbfffffffffffdff, x1, 496, x12)

inst_82:
// rs1_w1_val == -524289, rs1_w0_val == -3
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfff7fffffffffffd;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffffffd, 0x00000900001000, x1, 504, x12)

inst_83:
// rs1_w1_val == -65537, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffefffffffffffa;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffefffffffffffa, 0xffbfffff00000010, x1, 512, x12)

inst_84:
// rs1_w1_val == -16385, rs1_w0_val == -2049
// opcode: smmul ; op1:x30; dest:x31; op1val:0xffffbffffffff7ff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xffffbffffffff7ff, 0xfffffbff00000002, x1, 520, x12)

inst_85:
// rs1_w1_val == -8193, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xffffdfffdfffffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xffffdfffdfffffff, 0xffffbffffeffffff, x1, 528, x12)

inst_86:
// rs1_w1_val == -2049, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffff7fffffffffd;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffffffd, 0x00000700000006, x1, 536, x12)

inst_87:
// rs1_w1_val == -129, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xffffff7f00000040;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000040, 0x04000000000020, x1, 544, x12)

inst_88:
// rs1_w1_val == -17, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xffffffef00001000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xffffffef00001000, 0xc0000000fffeffff, x1, 552, x12)

inst_89:
// rs1_w1_val == 536870912, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0x20000000ffffffbf;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x20000000ffffffbf, 0xffffff7ffffffffa, x1, 560, x12)

inst_90:
// rs1_w1_val == 4194304, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0x40000040000000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x40000040000000, 0x40000000000004, x1, 568, x12)

inst_91:
// rs1_w1_val == 2097152, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0x20000002000000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x20000002000000, 0x04000000000003, x1, 576, x12)

inst_92:
// rs1_w1_val == 262144, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0x040000fffffff8;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x040000fffffff8, 0x020000fffffff6, x1, 584, x12)

inst_93:
// rs1_w1_val == 32768, rs1_w0_val == 1431655765
// opcode: smmul ; op1:x30; dest:x31; op1val:0x00800055555555;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x00800055555555, 0x10000000ff7fffff, x1, 592, x12)

inst_94:
// rs1_w1_val == 8192, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0x002000fffffffc;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x002000fffffffc, 0x00008000000006, x1, 600, x12)

inst_95:
// rs1_w1_val == 1024, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0x000400fffeffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x000400fffeffff, 0xdffffffffffffff9, x1, 608, x12)

inst_96:
// rs1_w1_val == 256, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0x00010000000005;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x00010000000005, 0xffffffbf00000040, x1, 616, x12)

inst_97:
// rs2_w0_val == -1073741825, rs1_w0_val == -9
// opcode: smmul ; op1:x30; dest:x31; op1val:0x004000fffffff7;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x004000fffffff7, 0xefffffffbfffffff, x1, 624, x12)

inst_98:
// rs1_w1_val == 0, rs2_w0_val == 256
// opcode: smmul ; op1:x30; dest:x31; op1val:0x00000000000006;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x00000000000006, 0xffffdfff00000100, x1, 632, x12)

inst_99:
// rs1_w1_val == -1, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xffffffff00020000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xffffffff00020000, 0xdfffffffc0000000, x1, 640, x12)

inst_100:
// rs2_w0_val == -4194305, rs1_w0_val == 268435456
// opcode: smmul ; op1:x30; dest:x31; op1val:0x00040010000000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x00040010000000, 0xfff7ffffffbfffff, x1, 648, x12)

inst_101:
// rs2_w0_val == -2097153, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffffff6fffffff7;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffffff6fffffff7, 0xffbfffffffdfffff, x1, 656, x12)

inst_102:
// rs1_w0_val == -134217729, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffffffef7ffffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffffffef7ffffff, 0xfffffffbffff7fff, x1, 664, x12)

inst_103:
// rs2_w0_val == -131073, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0x20000000bfffffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x20000000bfffffff, 0xfffffff7fffdffff, x1, 672, x12)

inst_104:
// rs1_w0_val == -4194305, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0x1000000ffbfffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x1000000ffbfffff, 0x00000600000004, x1, 680, x12)

inst_105:
// rs2_w0_val == -8193, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0x10000000fffffff7;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x10000000fffffff7, 0x000080ffffdfff, x1, 688, x12)

inst_106:
// rs1_w0_val == -524289, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xeffffffffff7ffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xeffffffffff7ffff, 0x200000fffffff8, x1, 696, x12)

inst_107:
// rs2_w0_val == -1025, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffffffdfffdffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffdffff, 0x000005fffffbff, x1, 704, x12)

inst_108:
// rs2_w0_val == -129, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0x00000400000200;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x00000400000200, 0x8000000ffffff7f, x1, 712, x12)

inst_109:
// rs1_w0_val == -32769, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffff7ffffff7fff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffff7fff, 0x00002000020000, x1, 720, x12)

inst_110:
// rs2_w0_val == -33, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0x000006f7ffffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x000006f7ffffff, 0xdfffffffffffffdf, x1, 728, x12)

inst_111:
// rs1_w0_val == -1025, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xffffffeffffffbff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xffffffeffffffbff, 0xfffffffe00000005, x1, 736, x12)

inst_112:
// rs2_w0_val == -3, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffeffffffffefff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffefff, 0xffbffffffffffffd, x1, 744, x12)

inst_113:
// rs2_w0_val == -2, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffffff600000020;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffffff600000020, 0xfbfffffffffffffe, x1, 752, x12)

inst_114:
// rs1_w0_val == -129, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0x2000000ffffff7f;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x2000000ffffff7f, 0x00100000000010, x1, 760, x12)

inst_115:
// rs2_w0_val == 134217728, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfff7ffffbfffffff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfff7ffffbfffffff, 0xfffffdff08000000, x1, 768, x12)

inst_116:
// rs2_w0_val == 2048, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffffeff00800000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffffeff00800000, 0x00100000000800, x1, 776, x12)

inst_117:
// rs2_w0_val == 16777216, rs1_w0_val == 4194304
// opcode: smmul ; op1:x30; dest:x31; op1val:0x00000200400000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x00000200400000, 0x2000000001000000, x1, 784, x12)

inst_118:
// rs2_w0_val == 2097152, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xff7fffffffffbfff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xff7fffffffffbfff, 0x00000200200000, x1, 792, x12)

inst_119:
// rs2_w0_val == 524288, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xffffffdf00000200;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000200, 0x00000600080000, x1, 800, x12)

inst_120:
// rs2_w0_val == 262144, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xffffbfff00000200;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000200, 0xffffffff00040000, x1, 808, x12)

inst_121:
// rs1_w0_val == 16777216, rs2_w0_val == 1024
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffbffff01000000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffbffff01000000, 0x800000000000400, x1, 816, x12)

inst_122:
// rs1_w0_val == 262144, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffffeff00040000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffffeff00040000, 0xfffffeff00000800, x1, 824, x12)

inst_123:
// rs2_w0_val == 512, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0x8000000fffffdff;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x8000000fffffdff, 0xdfffffff00000200, x1, 832, x12)

inst_124:
// rs1_w0_val == 32768, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfffffff800008000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfffffff800008000, 0xfff7ffff00000008, x1, 840, x12)

inst_125:
// rs1_w0_val == 16384, 
// opcode: smmul ; op1:x30; dest:x31; op1val:0x20000000004000;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x20000000004000, 0x00000104000000, x1, 848, x12)

inst_126:
// rs2_w1_val == -1431655766, rs2_w0_val == -536870913, rs1_w1_val == -33554433, rs1_w0_val == 8
// opcode: smmul ; op1:x30; dest:x31; op1val:0xfdffffff00000008;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000008, 0xaaaaaaaadfffffff, x1, 856, x12)

inst_127:
// rs2_w1_val == 1431655765, rs2_w0_val == -9, rs1_w1_val == 8388608, rs1_w0_val == 128
// opcode: smmul ; op1:x30; dest:x31; op1val:0x80000000000080;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x80000000000080, 0x55555555fffffff7, x1, 864, x12)

inst_128:
// rs2_w1_val == 2147483647, rs1_w0_val == -33, rs2_w0_val == -17, rs1_w1_val == 16
// opcode: smmul ; op1:x30; dest:x31; op1val:0x000010ffffffdf;  immval:$imm_val
TEST_RR_OP(smmul, x31, x30, x29, 0x0000000000000000, 0x000010ffffffdf, 0x7fffffffffffffef, x1, 872, x12)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 110*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
