
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmar64 instruction of the RISC-V RV64PZicsr extension for the kmar64 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmar64)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x16, rs2==x2, rd==x16, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val != rs2_w0_val, rs2_w1_val == -65, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w0_val == -17, rs1_w1_val == 8
// opcode: kmar64 ; op1:x16; op2:x2; dest:x16; op1val:0x0000000880000000;  op2val:0xffffffbfffffffef
TEST_PK64_PNN_OP(kmar64, x16, $rd_hi, x16, x2, 0x0000000000000000, $correctval_hi, 0x0000000880000000, 0xffffffbfffffffef, x16, x1, 0, x3)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x20, rs2==x4, rd==x24, rs1_w1_val == rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 32768, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w0_val == 256, rs2_w0_val == 1431655765, rs2_w1_val == 32768
// opcode: kmar64 ; op1:x20; op2:x4; dest:x24; op1val:0x0000800000000100;  op2val:0x0000800055555555
TEST_PK64_PNN_OP(kmar64, x24, $rd_hi, x20, x4, 0x0000000000000000, $correctval_hi, 0x0000800000000100, 0x0000800055555555, x20, x1, 24, x3)

inst_2:
// rs1 == rs2 != rd, rs1==x29, rs2==x29, rd==x20, rs1_w1_val < 0 and rs2_w1_val > 0, rs2_w0_val == 0, rs1_w0_val == -8388609, rs1_w1_val == -32769
// opcode: kmar64 ; op1:x29; op2:x29; dest:x20; op1val:0xffff7fffff7fffff;  op2val:0x0000000600000000
TEST_PK64_PNN_OP(kmar64, x20, $rd_hi, x29, x29, 0x0000000000000000, $correctval_hi, 0xffff7fffff7fffff, 0x0000000600000000, x29, x1, 48, x3)

inst_3:
// rs1 == rs2 == rd, rs1==x22, rs2==x22, rd==x22, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w1_val == -65537, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val == -1025, rs2_w1_val == -524289, rs2_w0_val == 1048576
// opcode: kmar64 ; op1:x22; op2:x22; dest:x22; op1val:0xfffefffffffffbff;  op2val:0xfff7ffff00100000
TEST_PK64_PNN_OP(kmar64, x22, $rd_hi, x22, x22, 0x0000000000000000, $correctval_hi, 0xfffefffffffffbff, 0xfff7ffff00100000, x22, x1, 72, x3)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x12, rd==x12, rs1_w0_val == rs2_w0_val, rs1_w1_val == -4194305, rs2_w0_val == 268435456, rs1_w0_val == 268435456, rs2_w1_val == 65536
// opcode: kmar64 ; op1:x5; op2:x12; dest:x12; op1val:0xffbfffff10000000;  op2val:0x0001000010000000
TEST_PK64_PNN_OP(kmar64, x12, $rd_hi, x5, x12, 0x0000000000000000, $correctval_hi, 0xffbfffff10000000, 0x0001000010000000, x5, x1, 96, x3)

inst_5:
// rs1==x10, rs2==x20, rd==x4, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w0_val == 1, rs1_w1_val == -9, rs2_w1_val == -1431655766
// opcode: kmar64 ; op1:x10; op2:x20; dest:x4; op1val:0xfffffff700000001;  op2val:0xaaaaaaaafffffffa
TEST_PK64_PNN_OP(kmar64, x4, $rd_hi, x10, x20, 0x0000000000000000, $correctval_hi, 0xfffffff700000001, 0xaaaaaaaafffffffa, x10, x1, 120, x3)

inst_6:
// rs1==x14, rs2==x15, rd==x26, rs2_w1_val == 1431655765, rs2_w0_val == -4097
// opcode: kmar64 ; op1:x14; op2:x15; dest:x26; op1val:0xffff7fff00000001;  op2val:0x55555555ffffefff
TEST_PK64_PNN_OP(kmar64, x26, $rd_hi, x14, x15, 0x0000000000000000, $correctval_hi, 0xffff7fff00000001, 0x55555555ffffefff, x14, x1, 144, x3)

inst_7:
// rs1==x0, rs2==x13, rd==x2, rs2_w1_val == 2147483647, rs2_w0_val == 4194304, rs1_w1_val == 33554432
// opcode: kmar64 ; op1:x0; op2:x13; dest:x2; op1val:0x0200000000000009;  op2val:0x7fffffff00400000
TEST_PK64_PNN_OP(kmar64, x2, $rd_hi, x0, x13, 0x0000000000000000, $correctval_hi, 0x0200000000000009, 0x7fffffff00400000, x0, x1, 168, x3)

inst_8:
// rs1==x24, rs2==x5, rd==x28, rs2_w1_val == -1073741825, rs2_w0_val == -2147483648, rs1_w1_val == -8388609
// opcode: kmar64 ; op1:x24; op2:x5; dest:x28; op1val:0xff7ffffffffffffc;  op2val:0xbfffffff80000000
TEST_PK64_PNN_OP(kmar64, x28, $rd_hi, x24, x5, 0x0000000000000000, $correctval_hi, 0xff7ffffffffffffc, 0xbfffffff80000000, x24, x1, 192, x3)

inst_9:
// rs1==x28, rs2==x0, rd==x14, rs2_w1_val == -536870913, rs2_w0_val == 33554432, rs1_w0_val == 536870912
// opcode: kmar64 ; op1:x28; op2:x0; dest:x14; op1val:0x0000000520000000;  op2val:0xdfffffff02000000
TEST_PK64_PNN_OP(kmar64, x14, $rd_hi, x28, x0, 0x0000000000000000, $correctval_hi, 0x0000000520000000, 0xdfffffff02000000, x28, x1, 216, x3)

inst_10:
// rs1==x13, rs2==x31, rd==x10, rs2_w1_val == -268435457, rs1_w0_val == 32
// opcode: kmar64 ; op1:x13; op2:x31; dest:x10; op1val:0x3fffffff00000020;  op2val:0xeffffffffffffff9
TEST_PK64_PNN_OP(kmar64, x10, $rd_hi, x13, x31, 0x0000000000000000, $correctval_hi, 0x3fffffff00000020, 0xeffffffffffffff9, x13, x1, 240, x3)

inst_11:
// rs1==x4, rs2==x7, rd==x18, rs2_w1_val == -134217729, rs1_w0_val == -33554433, rs1_w1_val == 4096
// opcode: kmar64 ; op1:x4; op2:x7; dest:x18; op1val:0x00001000fdffffff;  op2val:0xf7ffffff00000007
TEST_PK64_PNN_OP(kmar64, x18, $rd_hi, x4, x7, 0x0000000000000000, $correctval_hi, 0x00001000fdffffff, 0xf7ffffff00000007, x4, x1, 264, x3)

inst_12:
// rs1==x2, rs2==x28, rd==x8, rs2_w1_val == -67108865, rs1_w1_val == 8388608, rs1_w0_val == -1, rs2_w0_val == -134217729
// opcode: kmar64 ; op1:x2; op2:x28; dest:x8; op1val:0x00800000ffffffff;  op2val:0xfbfffffff7ffffff
TEST_PK64_PNN_OP(kmar64, x8, $rd_hi, x2, x28, 0x0000000000000000, $correctval_hi, 0x00800000ffffffff, 0xfbfffffff7ffffff, x2, x1, 288, x3)

inst_13:
// rs1==x23, rs2==x21, rd==x30, rs2_w1_val == -33554433, rs1_w1_val == 4194304, rs2_w0_val == -131073, rs1_w0_val == 262144
// opcode: kmar64 ; op1:x23; op2:x21; dest:x30; op1val:0x0040000000040000;  op2val:0xfdfffffffffdffff
TEST_PK64_PNN_OP(kmar64, x30, $rd_hi, x23, x21, 0x0000000000000000, $correctval_hi, 0x0040000000040000, 0xfdfffffffffdffff, x23, x1, 312, x3)

inst_14:
// rs1==x21, rs2==x23, rd==x6, rs2_w1_val == -16777217, rs1_w1_val == 32
// opcode: kmar64 ; op1:x21; op2:x23; dest:x6; op1val:0x00000020fffffffc;  op2val:0xfeffffff02000000
TEST_PK64_PNN_OP(kmar64, x6, $rd_hi, x21, x23, 0x0000000000000000, $correctval_hi, 0x00000020fffffffc, 0xfeffffff02000000, x21, x1, 336, x3)

inst_15:
// rs1==x11, rs2==x8, rs2_w1_val == -8388609, rs2_w0_val == -65, rs1_w1_val == -33554433
// opcode: kmar64 ; op1:x11; op2:x8; dest:x16; op1val:0xfdfffffffffffffa;  op2val:0xff7fffffffffffbf
TEST_PK64_PNN_OP(kmar64, x16, $rd_hi, x11, x8, 0x0000000000000000, $correctval_hi, 0xfdfffffffffffffa, 0xff7fffffffffffbf, x11, x1, 360, x3)

inst_16:
// rs1==x30, rs2==x25, rs2_w1_val == -4194305, rs2_w0_val == -33554433, rs1_w1_val == 128
// opcode: kmar64 ; op1:x30; op2:x25; dest:x13; op1val:0x0000008000000003;  op2val:0xffbffffffdffffff
TEST_PK64_PNN_OP(kmar64, x13, $rd_hi, x30, x25, 0x0000000000000000, $correctval_hi, 0x0000008000000003, 0xffbffffffdffffff, x30, x1, 384, x3)

inst_17:
// rs1==x31, rs2==x27, rs2_w1_val == -2097153, rs1_w0_val == -513, rs1_w1_val == -1025, rs2_w0_val == 32
// opcode: kmar64 ; op1:x31; op2:x27; dest:x28; op1val:0xfffffbfffffffdff;  op2val:0xffdfffff00000020
TEST_PK64_PNN_OP(kmar64, x28, $rd_hi, x31, x27, 0x0000000000000000, $correctval_hi, 0xfffffbfffffffdff, 0xffdfffff00000020, x31, x1, 408, x3)

inst_18:
// rs1==x7, rs2==x17, rs2_w1_val == -1048577, rs1_w1_val == 16, rs1_w0_val == 1073741824
// opcode: kmar64 ; op1:x7; op2:x17; dest:x4; op1val:0x0000001040000000;  op2val:0xffefffff55555555
TEST_PK64_PNN_OP(kmar64, x4, $rd_hi, x7, x17, 0x0000000000000000, $correctval_hi, 0x0000001040000000, 0xffefffff55555555, x7, x1, 432, x5)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_19:
// rs1==x9, rs2==x19, rs2_w1_val == -262145, rs1_w1_val == 64
// opcode: kmar64 ; op1:x9; op2:x19; dest:x23; op1val:0x0000004000040000;  op2val:0xfffbffffffffffef
TEST_PK64_PNN_OP(kmar64, x23, $rd_hi, x9, x19, 0x0000000000000000, $correctval_hi, 0x0000004000040000, 0xfffbffffffffffef, x9, x2, 0, x5)

inst_20:
// rs1==x26, rs2==x9, rs2_w1_val == -131073, rs1_w0_val == 16384
// opcode: kmar64 ; op1:x26; op2:x9; dest:x16; op1val:0xff7fffff00004000;  op2val:0xfffdffffc0000000
TEST_PK64_PNN_OP(kmar64, x16, $rd_hi, x26, x9, 0x0000000000000000, $correctval_hi, 0xff7fffff00004000, 0xfffdffffc0000000, x26, x2, 24, x5)

inst_21:
// rs1==x19, rs2==x26, rs2_w1_val == -65537, rs1_w1_val == 8192, rs2_w0_val == 8192
// opcode: kmar64 ; op1:x19; op2:x26; dest:x21; op1val:0x0000200040000000;  op2val:0xfffeffff00002000
TEST_PK64_PNN_OP(kmar64, x21, $rd_hi, x19, x26, 0x0000000000000000, $correctval_hi, 0x0000200040000000, 0xfffeffff00002000, x19, x2, 48, x5)

inst_22:
// rs1==x17, rs2==x30, rs2_w1_val == -32769, rs1_w0_val == -16385, rs1_w1_val == 1431655765
// opcode: kmar64 ; op1:x17; op2:x30; dest:x21; op1val:0x55555555ffffbfff;  op2val:0xffff7fff02000000
TEST_PK64_PNN_OP(kmar64, x21, $rd_hi, x17, x30, 0x0000000000000000, $correctval_hi, 0x55555555ffffbfff, 0xffff7fff02000000, x17, x2, 72, x5)

inst_23:
// rs1==x27, rs2==x3, rs2_w1_val == -16385, 
// opcode: kmar64 ; op1:x27; op2:x3; dest:x17; op1val:0x00000020ffffffff;  op2val:0xffffbffffffffff8
TEST_PK64_PNN_OP(kmar64, x17, $rd_hi, x27, x3, 0x0000000000000000, $correctval_hi, 0x00000020ffffffff, 0xffffbffffffffff8, x27, x2, 96, x5)

inst_24:
// rs1==x6, rs2==x16, rs2_w1_val == -8193, rs2_w0_val == 4096, rs1_w1_val == -2147483648
// opcode: kmar64 ; op1:x6; op2:x16; dest:x28; op1val:0x8000000000000003;  op2val:0xffffdfff00001000
TEST_PK64_PNN_OP(kmar64, x28, $rd_hi, x6, x16, 0x0000000000000000, $correctval_hi, 0x8000000000000003, 0xffffdfff00001000, x6, x2, 120, x5)

inst_25:
// rs1==x12, rs2==x10, rs2_w1_val == -4097, rs1_w1_val == 134217728, rs2_w0_val == 1073741824
// opcode: kmar64 ; op1:x12; op2:x10; dest:x28; op1val:0x0800000000004000;  op2val:0xffffefff40000000
TEST_PK64_PNN_OP(kmar64, x28, $rd_hi, x12, x10, 0x0000000000000000, $correctval_hi, 0x0800000000004000, 0xffffefff40000000, x12, x2, 144, x5)

inst_26:
// rs1==x8, rs2==x14, rs2_w1_val == -2049, rs2_w0_val == -8388609, rs1_w0_val == 4096
// opcode: kmar64 ; op1:x8; op2:x14; dest:x30; op1val:0xffff7fff00001000;  op2val:0xfffff7ffff7fffff
TEST_PK64_PNN_OP(kmar64, x30, $rd_hi, x8, x14, 0x0000000000000000, $correctval_hi, 0xffff7fff00001000, 0xfffff7ffff7fffff, x8, x2, 168, x5)

inst_27:
// rs1==x18, rs2==x24, rs2_w1_val == -1025, rs1_w0_val == -65537, rs2_w0_val == -268435457
// opcode: kmar64 ; op1:x18; op2:x24; dest:x30; op1val:0x00000080fffeffff;  op2val:0xfffffbffefffffff
TEST_PK64_PNN_OP(kmar64, x30, $rd_hi, x18, x24, 0x0000000000000000, $correctval_hi, 0x00000080fffeffff, 0xfffffbffefffffff, x18, x2, 192, x5)

inst_28:
// rs1==x25, rs2==x1, rs2_w1_val == -513, rs1_w1_val == -16385, rs1_w0_val == -1073741825
// opcode: kmar64 ; op1:x25; op2:x1; dest:x31; op1val:0xffffbfffbfffffff;  op2val:0xfffffdff00000003
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x25, x1, 0x0000000000000000, $correctval_hi, 0xffffbfffbfffffff, 0xfffffdff00000003, x25, x2, 216, x5)

inst_29:
// rs1==x1, rs2==x18, rs2_w1_val == -257, rs1_w0_val == -17
// opcode: kmar64 ; op1:x1; op2:x18; dest:x9; op1val:0x00001000ffffffef;  op2val:0xfffffeffefffffff
TEST_PK64_PNN_OP(kmar64, x9, $rd_hi, x1, x18, 0x0000000000000000, $correctval_hi, 0x00001000ffffffef, 0xfffffeffefffffff, x1, x2, 240, x5)

inst_30:
// rs1==x3, rs2==x11, rs2_w1_val == -129, rs1_w0_val == 512, rs2_w0_val == -257
// opcode: kmar64 ; op1:x3; op2:x11; dest:x27; op1val:0xfffffff700000200;  op2val:0xffffff7ffffffeff
TEST_PK64_PNN_OP(kmar64, x27, $rd_hi, x3, x11, 0x0000000000000000, $correctval_hi, 0xfffffff700000200, 0xffffff7ffffffeff, x3, x2, 264, x5)

inst_31:
// rs1==x15, rs2==x6, rs2_w1_val == -33, rs2_w0_val == 1
// opcode: kmar64 ; op1:x15; op2:x6; dest:x11; op1val:0x0080000000000005;  op2val:0xffffffdf00000001
TEST_PK64_PNN_OP(kmar64, x11, $rd_hi, x15, x6, 0x0000000000000000, $correctval_hi, 0x0080000000000005, 0xffffffdf00000001, x15, x2, 288, x5)

inst_32:
// rs2_w1_val == -17, rs2_w0_val == 67108864, rs1_w0_val == 2
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000002;  op2val:0xffffffef04000000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffff7fff00000002, 0xffffffef04000000, x30, x2, 312, x5)

inst_33:
// rs2_w1_val == -9, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000800080000000;  op2val:0xfffffff7fffffff6
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000800080000000, 0xfffffff7fffffff6, x30, x2, 336, x1)

inst_34:
// rs2_w1_val == -5, rs1_w1_val == -1, rs2_w0_val == -33
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffbfff;  op2val:0xfffffffbffffffdf
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffffffffbfff, 0xfffffffbffffffdf, x30, x2, 360, x1)

inst_35:
// rs2_w1_val == -3, rs2_w0_val == -262145, rs1_w1_val == -3
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffffffc;  op2val:0xfffffffdfffbffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffdfffffffc, 0xfffffffdfffbffff, x30, x2, 384, x1)

inst_36:
// rs2_w1_val == -2, rs1_w1_val == -65, rs1_w0_val == -8193
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffffdfff;  op2val:0xfffffffe00400000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffbfffffdfff, 0xfffffffe00400000, x30, x2, 408, x1)

inst_37:
// rs2_w1_val == -2147483648, rs1_w1_val == -1073741825
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000100;  op2val:0x8000000000000006
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbfffffff00000100, 0x8000000000000006, x30, x2, 432, x1)

inst_38:
// rs2_w1_val == 1073741824, rs1_w1_val == 2048, rs1_w0_val == -32769
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000800ffff7fff;  op2val:0x4000000000000005
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000800ffff7fff, 0x4000000000000005, x30, x2, 456, x1)

inst_39:
// rs2_w1_val == 536870912, rs1_w0_val == 33554432, rs2_w0_val == -9
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd02000000;  op2val:0x20000000fffffff7
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffd02000000, 0x20000000fffffff7, x30, x2, 480, x1)

inst_40:
// rs2_w1_val == 268435456, rs2_w0_val == -2097153, rs1_w1_val == -129
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000020;  op2val:0x10000000ffdfffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffff7f00000020, 0x10000000ffdfffff, x30, x2, 504, x1)

inst_41:
// rs2_w1_val == 134217728, rs2_w0_val == 131072
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000009;  op2val:0x0800000000020000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3fffffff00000009, 0x0800000000020000, x30, x2, 528, x1)

inst_42:
// rs2_w1_val == 67108864, rs2_w0_val == 4
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000001040000000;  op2val:0x0400000000000004
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000001040000000, 0x0400000000000004, x30, x2, 552, x1)

inst_43:
// rs2_w1_val == 33554432, rs1_w1_val == 524288, rs1_w0_val == -2097153
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000ffdfffff;  op2val:0x0200000000001000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00080000ffdfffff, 0x0200000000001000, x30, x2, 576, x1)

inst_44:
// rs2_w1_val == 16777216, rs1_w0_val == -1431655766, rs2_w0_val == 2097152
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555aaaaaaaa;  op2val:0x0100000000200000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x55555555aaaaaaaa, 0x0100000000200000, x30, x2, 600, x1)

inst_45:
// rs2_w1_val == 8388608, rs1_w0_val == -131073, rs2_w0_val == 32768, rs1_w1_val == 512
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200fffdffff;  op2val:0x0080000000008000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000200fffdffff, 0x0080000000008000, x30, x2, 624, x1)

inst_46:
// rs2_w1_val == 4194304, rs2_w0_val == -1073741825, rs1_w1_val == 131072
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0002000020000000;  op2val:0x00400000bfffffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0002000020000000, 0x00400000bfffffff, x30, x2, 648, x1)

inst_47:
// rs2_w1_val == 2097152, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcffffffff;  op2val:0x00200000f7ffffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffcffffffff, 0x00200000f7ffffff, x30, x2, 672, x1)

inst_48:
// rs2_w1_val == 1048576, rs2_w0_val == -3
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000fffffbff;  op2val:0x00100000fffffffd
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00080000fffffbff, 0x00100000fffffffd, x30, x2, 696, x1)

inst_49:
// rs2_w1_val == 524288, rs2_w0_val == -5
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffaaaaaaaa;  op2val:0x00080000fffffffb
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7fffffaaaaaaaa, 0x00080000fffffffb, x30, x2, 720, x1)

inst_50:
// rs2_w1_val == 262144, rs2_w0_val == -65537
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000ffffffef;  op2val:0x00040000fffeffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00020000ffffffef, 0x00040000fffeffff, x30, x2, 744, x1)

inst_51:
// rs2_w1_val == 131072, rs1_w1_val == -134217729
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000007;  op2val:0x0002000000000005
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ffffff00000007, 0x0002000000000005, x30, x2, 768, x1)

inst_52:
// rs2_w1_val == 16384, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffdff;  op2val:0x0000400000000005
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffbffffffffdff, 0x0000400000000005, x30, x2, 792, x1)

inst_53:
// rs1_w0_val == 16777216, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000100001000000;  op2val:0x2000000000000001
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000100001000000, 0x2000000000000001, x30, x2, 816, x1)

inst_54:
// rs1_w0_val == 8388608, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0800000000800000;  op2val:0xffffffdffffffeff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800000000800000, 0xffffffdffffffeff, x30, x2, 840, x1)

inst_55:
// rs1_w0_val == 4194304, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00400000;  op2val:0x00020000ffffffef
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffbff00400000, 0x00020000ffffffef, x30, x2, 864, x1)

inst_56:
// rs1_w0_val == 2097152, rs2_w0_val == -4194305
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700200000;  op2val:0x00008000ffbfffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff700200000, 0x00008000ffbfffff, x30, x2, 888, x1)

inst_57:
// rs1_w0_val == 1048576, rs1_w1_val == -17, rs2_w1_val == 4096
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00100000;  op2val:0x00001000efffffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffef00100000, 0x00001000efffffff, x30, x2, 912, x1)

inst_58:
// rs1_w0_val == 524288, rs2_w0_val == 64
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000700080000;  op2val:0xfffeffff00000040
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000700080000, 0xfffeffff00000040, x30, x2, 936, x1)

inst_59:
// rs1_w0_val == 131072, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000080000020000;  op2val:0xfffffff7fffffffa
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000080000020000, 0xfffffff7fffffffa, x30, x2, 960, x1)

inst_60:
// rs1_w0_val == 65536, rs2_w0_val == 262144, rs1_w1_val == -257
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00010000;  op2val:0x5555555500040000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffeff00010000, 0x5555555500040000, x30, x2, 984, x1)

inst_61:
// rs1_w0_val == 32768, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0800000000008000;  op2val:0x00800000fffeffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800000000008000, 0x00800000fffeffff, x30, x2, 1008, x1)

inst_62:
// rs1_w0_val == 8192, rs2_w0_val == 65536
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000500002000;  op2val:0x0000000700010000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000500002000, 0x0000000700010000, x30, x2, 1032, x1)

inst_63:
// rs1_w0_val == 2048, rs1_w1_val == 1048576
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0010000000000800;  op2val:0xffff7ffffffffff8
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0010000000000800, 0xffff7ffffffffff8, x30, x2, 1056, x1)

inst_64:
// rs1_w0_val == 1024, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0040000000000400;  op2val:0xffffbffffffffeff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040000000000400, 0xffffbffffffffeff, x30, x2, 1080, x1)

inst_65:
// rs1_w0_val == 128, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00000080;  op2val:0xfffeffff00008000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffa00000080, 0xfffeffff00008000, x30, x2, 1104, x1)

inst_66:
// rs1_w0_val == 64, rs2_w0_val == -67108865, rs1_w1_val == 2147483647
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000040;  op2val:0xfff7fffffbffffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fffffff00000040, 0xfff7fffffbffffff, x30, x2, 1128, x1)

inst_67:
// rs1_w0_val == 16, rs2_w1_val == 0
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000200000000010;  op2val:0x00000000c0000000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000200000000010, 0x00000000c0000000, x30, x2, 1152, x1)

inst_68:
// rs1_w0_val == 8, rs2_w1_val == 64, rs2_w0_val == 16384
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000008;  op2val:0x0000004000004000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ffffff00000008, 0x0000004000004000, x30, x2, 1176, x1)

inst_69:
// rs1_w0_val == 4, rs1_w1_val == -5
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000004;  op2val:0x7ffffffffffffffd
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffb00000004, 0x7ffffffffffffffd, x30, x2, 1200, x1)

inst_70:
// rs1_w0_val == 0, rs2_w0_val == -1, rs2_w1_val == 128
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000100000000000;  op2val:0x00000080ffffffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000100000000000, 0x00000080ffffffff, x30, x2, 1224, x1)

inst_71:
// rs2_w1_val == 8192, rs1_w0_val == -268435457
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000080efffffff;  op2val:0x00002000fffffff9
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000080efffffff, 0x00002000fffffff9, x30, x2, 1248, x1)

inst_72:
// rs2_w1_val == 2048, rs1_w0_val == -67108865
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fbffffff;  op2val:0x00000800fffeffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x80000000fbffffff, 0x00000800fffeffff, x30, x2, 1272, x1)

inst_73:
// rs2_w1_val == 1024, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0002000000000005;  op2val:0x0000040000000000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0002000000000005, 0x0000040000000000, x30, x2, 1296, x1)

inst_74:
// rs2_w1_val == 512, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9ff7fffff;  op2val:0x0000020000010000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff9ff7fffff, 0x0000020000010000, x30, x2, 1320, x1)

inst_75:
// rs2_w1_val == 256, rs2_w0_val == -129, rs1_w1_val == 2
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000210000000;  op2val:0x00000100ffffff7f
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000210000000, 0x00000100ffffff7f, x30, x2, 1344, x1)

inst_76:
// rs2_w1_val == 32, rs1_w1_val == 16384, rs2_w0_val == -16385
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000400001000000;  op2val:0x00000020ffffbfff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000400001000000, 0x00000020ffffbfff, x30, x2, 1368, x1)

inst_77:
// rs2_w1_val == 16, rs2_w0_val == -513
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0040000040000000;  op2val:0x00000010fffffdff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040000040000000, 0x00000010fffffdff, x30, x2, 1392, x1)

inst_78:
// rs2_w1_val == 8, rs1_w1_val == -1431655766
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00100000;  op2val:0x00000008efffffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaaaaaa00100000, 0x00000008efffffff, x30, x2, 1416, x1)

inst_79:
// rs2_w1_val == 4, rs1_w1_val == 268435456
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffdff;  op2val:0x0000000400004000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x10000000fffffdff, 0x0000000400004000, x30, x2, 1440, x1)

inst_80:
// rs2_w1_val == 2, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000fffffff9;  op2val:0x0000000200400000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x02000000fffffff9, 0x0000000200400000, x30, x2, 1464, x1)

inst_81:
// rs2_w1_val == 1, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffffff9;  op2val:0x00000001c0000000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffdfffffff9, 0x00000001c0000000, x30, x2, 1488, x1)

inst_82:
// rs2_w1_val == -1, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x000080003fffffff;  op2val:0xffffffff02000000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000080003fffffff, 0xffffffff02000000, x30, x2, 1512, x1)

inst_83:
// rs2_w0_val == -1431655766, rs1_w1_val == 536870912
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000020;  op2val:0xffffffefaaaaaaaa
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000000000000020, 0xffffffefaaaaaaaa, x30, x2, 1536, x1)

inst_84:
// rs2_w0_val == 2147483647, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000002080000000;  op2val:0xffffefff7fffffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000002080000000, 0xffffefff7fffffff, x30, x2, 1560, x1)

inst_85:
// rs2_w0_val == -536870913, rs1_w0_val == -1048577
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffefffff;  op2val:0xfffffffcdfffffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffdffefffff, 0xfffffffcdfffffff, x30, x2, 1584, x1)

inst_86:
// rs2_w0_val == -16777217, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00020000;  op2val:0xffffffbffeffffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fffffff00020000, 0xffffffbffeffffff, x30, x2, 1608, x1)

inst_87:
// rs2_w0_val == -1048577, rs1_w1_val == -131073, rs1_w0_val == -2049
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffffffff7ff;  op2val:0x00010000ffefffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffdfffffffff7ff, 0x00010000ffefffff, x30, x2, 1632, x1)

inst_88:
// rs2_w0_val == -524289, rs1_w0_val == -536870913
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9dfffffff;  op2val:0x00000100fff7ffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff9dfffffff, 0x00000100fff7ffff, x30, x2, 1656, x1)

inst_89:
// rs1_w0_val == 67108864, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0002000004000000;  op2val:0x00400000bfffffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0002000004000000, 0x00400000bfffffff, x30, x2, 1680, x1)

inst_90:
// rs2_w0_val == 2048, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000200080000;  op2val:0xffffffef00000800
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000200080000, 0xffffffef00000800, x30, x2, 1704, x1)

inst_91:
// rs2_w0_val == 1024, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00001000;  op2val:0x0000800000000400
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffc00001000, 0x0000800000000400, x30, x2, 1728, x1)

inst_92:
// rs2_w0_val == 512, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffdfff;  op2val:0xfffffff900000200
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x80000000ffffdfff, 0xfffffff900000200, x30, x2, 1752, x1)

inst_93:
// rs2_w0_val == 256, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000020000000009;  op2val:0x3fffffff00000100
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000020000000009, 0x3fffffff00000100, x30, x2, 1776, x1)

inst_94:
// rs2_w0_val == 128, rs1_w1_val == 1024
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000040004000000;  op2val:0x8000000000000080
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000040004000000, 0x8000000000000080, x30, x2, 1800, x1)

inst_95:
// rs2_w0_val == 16, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600010000;  op2val:0xfffffffa00000010
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff600010000, 0xfffffffa00000010, x30, x2, 1824, x1)

inst_96:
// rs2_w0_val == 8, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0002000000000005;  op2val:0x0100000000000008
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0002000000000005, 0x0100000000000008, x30, x2, 1848, x1)

inst_97:
// rs2_w0_val == 2, rs1_w1_val == 1
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000100000010;  op2val:0x0000004000000002
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000100000010, 0x0000004000000002, x30, x2, 1872, x1)

inst_98:
// rs1_w1_val == -536870913, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff3fffffff;  op2val:0x0080000000000005
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfffffff3fffffff, 0x0080000000000005, x30, x2, 1896, x1)

inst_99:
// rs1_w1_val == -268435457, rs1_w0_val == -134217729
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffff7ffffff;  op2val:0x80000000fffffff7
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xeffffffff7ffffff, 0x80000000fffffff7, x30, x2, 1920, x1)

inst_100:
// rs1_w1_val == -67108865, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000800;  op2val:0xffffffdfffdfffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffffff00000800, 0xffffffdfffdfffff, x30, x2, 1944, x1)

inst_101:
// rs1_w1_val == -16777217, rs1_w0_val == -262145
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffbffff;  op2val:0x00000004efffffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfefffffffffbffff, 0x00000004efffffff, x30, x2, 1968, x1)

inst_102:
// rs1_w1_val == -2097153, rs2_w0_val == -8193
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000006;  op2val:0xffffff7fffffdfff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdfffff00000006, 0xffffff7fffffdfff, x30, x2, 1992, x1)

inst_103:
// rs1_w1_val == -1048577, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffff7fffff;  op2val:0x40000000bfffffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffefffffff7fffff, 0x40000000bfffffff, x30, x2, 2016, x1)
RVTEST_SIGBASE(x2,signature_x2_1)

inst_104:
// rs1_w1_val == -524289, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00001000;  op2val:0xf7ffffff7fffffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7ffff00001000, 0xf7ffffff7fffffff, x30, x2, 0, x1)
RVTEST_SIGBASE(x2,signature_x2_2)

inst_105:
// rs1_w1_val == -262145, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffc0000000;  op2val:0x10000000ffdfffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffbffffc0000000, 0x10000000ffdfffff, x30, x2, 0, x1)

inst_106:
// rs1_w1_val == -8193, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff01000000;  op2val:0xffffdffffdffffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffdfff01000000, 0xffffdffffdffffff, x30, x2, 24, x1)

inst_107:
// rs1_w1_val == -4097, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00400000;  op2val:0x0200000000000001
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffefff00400000, 0x0200000000000001, x30, x2, 48, x1)

inst_108:
// rs1_w1_val == -2049, rs2_w0_val == -2
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffbffff;  op2val:0xffffbffffffffffe
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffff7fffffbffff, 0xffffbffffffffffe, x30, x2, 72, x1)

inst_109:
// rs1_w1_val == -513, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000004;  op2val:0xffff7fff04000000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffdff00000004, 0xffff7fff04000000, x30, x2, 96, x1)

inst_110:
// rs1_w1_val == -33, rs1_w0_val == -257
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffeff;  op2val:0xffffffefdfffffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffdffffffeff, 0xffffffefdfffffff, x30, x2, 120, x1)

inst_111:
// rs1_w1_val == -2, rs2_w0_val == 8388608
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00100000;  op2val:0xc000000000800000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffe00100000, 0xc000000000800000, x30, x2, 144, x1)

inst_112:
// rs1_w1_val == 2097152, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000aaaaaaaa;  op2val:0xfffffdff00000001
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00200000aaaaaaaa, 0xfffffdff00000001, x30, x2, 168, x1)

inst_113:
// rs1_w1_val == 262144, rs2_w0_val == -32769
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0004000000008000;  op2val:0x00010000ffff7fff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0004000000008000, 0x00010000ffff7fff, x30, x2, 192, x1)

inst_114:
// rs1_w1_val == 65536, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0001000000000100;  op2val:0x0400000000200000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0001000000000100, 0x0400000000200000, x30, x2, 216, x1)

inst_115:
// rs1_w1_val == 256, rs1_w0_val == -5
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100fffffffb;  op2val:0x0000040000000007
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00000100fffffffb, 0x0000040000000007, x30, x2, 240, x1)

inst_116:
// rs1_w1_val == 4, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000400100000;  op2val:0xbfffffff00000002
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000400100000, 0xbfffffff00000002, x30, x2, 264, x1)

inst_117:
// rs1_w1_val == 0, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000000000009;  op2val:0x00000100fffffffe
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000000000009, 0x00000100fffffffe, x30, x2, 288, x1)

inst_118:
// rs1_w0_val == 134217728, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff08000000;  op2val:0x40000000fff7ffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffefff08000000, 0x40000000fff7ffff, x30, x2, 312, x1)

inst_119:
// rs1_w0_val == 1431655765, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000010055555555;  op2val:0xfffffffcffffbfff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000010055555555, 0xfffffffcffffbfff, x30, x2, 336, x1)

inst_120:
// rs2_w0_val == 134217728, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000800004000000;  op2val:0x0200000008000000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000800004000000, 0x0200000008000000, x30, x2, 360, x1)

inst_121:
// rs1_w0_val == 2147483647, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x000080007fffffff;  op2val:0x0010000000200000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000080007fffffff, 0x0010000000200000, x30, x2, 384, x1)

inst_122:
// rs1_w0_val == -16777217, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000feffffff;  op2val:0x0000000600000040
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00200000feffffff, 0x0000000600000040, x30, x2, 408, x1)

inst_123:
// rs1_w0_val == -4194305, rs2_w0_val == 536870912
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffbfffff;  op2val:0xfbffffff20000000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff7ffbfffff, 0xfbffffff20000000, x30, x2, 432, x1)

inst_124:
// rs2_w0_val == 16777216, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffcefffffff;  op2val:0xfffffffc01000000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffffcefffffff, 0xfffffffc01000000, x30, x2, 456, x1)

inst_125:
// rs2_w0_val == -2049, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000009;  op2val:0xfffffffbfffff7ff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffefff00000009, 0xfffffffbfffff7ff, x30, x2, 480, x1)

inst_126:
// rs1_w0_val == -524289, rs2_w0_val == -1025
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8fff7ffff;  op2val:0x00000003fffffbff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff8fff7ffff, 0x00000003fffffbff, x30, x2, 504, x1)

inst_127:
// rs1_w0_val == -4097, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000ffffefff;  op2val:0xfffffeff00000006
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00020000ffffefff, 0xfffffeff00000006, x30, x2, 528, x1)

inst_128:
// rs1_w0_val == -129, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffffff7f;  op2val:0xfffffbfffff7ffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffffefffffff7f, 0xfffffbfffff7ffff, x30, x2, 552, x1)

inst_129:
// rs1_w0_val == -65, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffffbf;  op2val:0x0000100000000020
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbffffffffffffbf, 0x0000100000000020, x30, x2, 576, x1)

inst_130:
// rs1_w0_val == -33, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffffdf;  op2val:0x02000000ffffff7f
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ffffffffffffdf, 0x02000000ffffff7f, x30, x2, 600, x1)

inst_131:
// rs1_w0_val == -9, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffffff7;  op2val:0xf7ffffff00000800
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfefffffffffffff7, 0xf7ffffff00000800, x30, x2, 624, x1)

inst_132:
// rs1_w1_val == 1073741824, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000008000000;  op2val:0x0002000001000000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x4000000008000000, 0x0002000001000000, x30, x2, 648, x1)

inst_133:
// rs1_w0_val == -3, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffffffd;  op2val:0xffbffffffffffeff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7fffffffffffd, 0xffbffffffffffeff, x30, x2, 672, x1)

inst_134:
// rs1_w0_val == -2, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000fffffffe;  op2val:0xfffffffeffefffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x08000000fffffffe, 0xfffffffeffefffff, x30, x2, 696, x1)

inst_135:
// rs1_w1_val == 67108864, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0400000000200000;  op2val:0xbfffffffffefffff
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0400000000200000, 0xbfffffffffefffff, x30, x2, 720, x1)

inst_136:
// rs1_w1_val == 16777216, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000ff7fffff;  op2val:0xffefffff00020000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x01000000ff7fffff, 0xffefffff00020000, x30, x2, 744, x1)

inst_137:
// rs2_w0_val == 524288, 
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ff7ffffff;  op2val:0xfffffffc00080000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffffff7ff7ffffff, 0xfffffffc00080000, x30, x2, 768, x1)

inst_138:
// rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w1_val == -65537, rs1_w0_val < 0 and rs2_w0_val > 0, rs1_w0_val == -1025, rs2_w1_val == -524289, rs2_w0_val == 1048576
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffffffbff;  op2val:0xfff7ffff00100000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffefffffffffbff, 0xfff7ffff00100000, x30, x2, 792, x1)

inst_139:
// rs2_w1_val == -536870913, rs2_w0_val == 33554432, rs1_w0_val == 536870912
// opcode: kmar64 ; op1:x30; op2:x29; dest:x31; op1val:0x0000000520000000;  op2val:0xdfffffff02000000
TEST_PK64_PNN_OP(kmar64, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000000520000000, 0xdfffffff02000000, x30, x2, 816, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 57*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 255*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 3*(XLEN/32),4,0xdeadbeef


signature_x2_2:
    .fill 105*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
