
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the slli8 instruction of the RISC-V RV64PZicsr extension for the slli8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",slli8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd, rs1==x26, rd==x26, rs1_b0_val == 0, imm_val == 0, rs1_b6_val == 32, rs1_b7_val == 251, rs1_b2_val == 223, rs1_b1_val == 255, rs1_b5_val == 128
// opcode: slli8 ; op1:x26; dest:x26; op1val:0xfb2080030bdfff00;  immval:0x0
TEST_IMM_OP( slli8, x26, x26, 0x0000000000000000, 0xfb2080030bdfff00, 0x0, x1, 0, x18)

inst_1:
// rs1 != rd, rs1==x19, rd==x6, imm_val == 7, rs1_b3_val == 16, rs1_b1_val == 32, rs1_b5_val == 85, rs1_b0_val == 191, rs1_b2_val == 255
// opcode: slli8 ; op1:x19; dest:x6; op1val:0xc0b550710ff20bf;  immval:0x7
TEST_IMM_OP( slli8, x6, x19, 0x0000000000000000, 0xc0b550710ff20bf, 0x7, x1, 8, x18)

inst_2:
// rs1==x4, rd==x22, imm_val == 6, rs1_b1_val == 191, rs1_b3_val == 32, rs1_b6_val == 254, rs1_b4_val == 254, rs1_b7_val == 2, rs1_b5_val == 32
// opcode: slli8 ; op1:x4; dest:x22; op1val:0x2fe20fe2009bfbf;  immval:0x6
TEST_IMM_OP( slli8, x22, x4, 0x0000000000000000, 0x2fe20fe2009bfbf, 0x6, x1, 16, x18)

inst_3:
// rs1==x30, rd==x8, imm_val == 5, rs1_b7_val == 4, rs1_b1_val == 127, rs1_b2_val == 191, rs1_b4_val == 85
// opcode: slli8 ; op1:x30; dest:x8; op1val:0x40c09550bbf7f12;  immval:0x5
TEST_IMM_OP( slli8, x8, x30, 0x0000000000000000, 0x40c09550bbf7f12, 0x5, x1, 24, x18)

inst_4:
// rs1==x11, rd==x21, imm_val == 4, rs1_b3_val == 2, rs1_b5_val == 0, rs1_b4_val == 128, rs1_b6_val == 128
// opcode: slli8 ; op1:x11; dest:x21; op1val:0x980008002dfbf0a;  immval:0x4
TEST_IMM_OP( slli8, x21, x11, 0x0000000000000000, 0x980008002dfbf0a, 0x4, x1, 32, x18)

inst_5:
// rs1==x13, rd==x7, imm_val == 3, rs1_b0_val == 247, rs1_b5_val == 8
// opcode: slli8 ; op1:x13; dest:x7; op1val:0xd090880061103f7;  immval:0x3
TEST_IMM_OP( slli8, x7, x13, 0x0000000000000000, 0xd090880061103f7, 0x3, x1, 40, x18)

inst_6:
// rs1==x29, rd==x12, imm_val == 2, rs1_b1_val == 239, rs1_b3_val == 128, rs1_b2_val == 1, rs1_b6_val == 127
// opcode: slli8 ; op1:x29; dest:x12; op1val:0x37f13808001ef06;  immval:0x2
TEST_IMM_OP( slli8, x12, x29, 0x0000000000000000, 0x37f13808001ef06, 0x2, x1, 48, x18)

inst_7:
// rs1==x5, rd==x17, imm_val == 1, rs1_b6_val == 0, rs1_b4_val == 251, rs1_b3_val == 8
// opcode: slli8 ; op1:x5; dest:x17; op1val:0x60006fb080b200d;  immval:0x1
TEST_IMM_OP( slli8, x17, x5, 0x0000000000000000, 0x60006fb080b200d, 0x1, x1, 56, x18)

inst_8:
// rs1==x12, rd==x20, rs1_b7_val == 170, rs1_b1_val == 4, rs1_b3_val == 191, rs1_b0_val == 254
// opcode: slli8 ; op1:x12; dest:x20; op1val:0xaa0e1205bf0d04fe;  immval:0x1
TEST_IMM_OP( slli8, x20, x12, 0x0000000000000000, 0xaa0e1205bf0d04fe, 0x1, x1, 64, x18)

inst_9:
// rs1==x3, rd==x25, rs1_b7_val == 85, rs1_b6_val == 16, rs1_b2_val == 16
// opcode: slli8 ; op1:x3; dest:x25; op1val:0x55100c0f1010110b;  immval:0x3
TEST_IMM_OP( slli8, x25, x3, 0x0000000000000000, 0x55100c0f1010110b, 0x3, x1, 72, x18)

inst_10:
// rs1==x20, rd==x31, rs1_b7_val == 127, rs1_b3_val == 239
// opcode: slli8 ; op1:x20; dest:x31; op1val:0x7f100703ef010505;  immval:0x6
TEST_IMM_OP( slli8, x31, x20, 0x0000000000000000, 0x7f100703ef010505, 0x6, x1, 80, x18)

inst_11:
// rs1==x31, rd==x3, rs1_b7_val == 191, rs1_b1_val == 251, rs1_b5_val == 1, rs1_b6_val == 8, rs1_b4_val == 170
// opcode: slli8 ; op1:x31; dest:x3; op1val:0xbf0801aa1009fbfe;  immval:0x4
TEST_IMM_OP( slli8, x3, x31, 0x0000000000000000, 0xbf0801aa1009fbfe, 0x4, x1, 88, x18)

inst_12:
// rs1==x14, rd==x15, rs1_b7_val == 223, rs1_b2_val == 251, rs1_b0_val == 251, rs1_b3_val == 64
// opcode: slli8 ; op1:x14; dest:x15; op1val:0xdf10010d40fb0bfb;  immval:0x5
TEST_IMM_OP( slli8, x15, x14, 0x0000000000000000, 0xdf10010d40fb0bfb, 0x5, x1, 96, x18)

inst_13:
// rs1==x16, rd==x4, rs1_b7_val == 239, rs1_b5_val == 253, rs1_b4_val == 16, rs1_b1_val == 85
// opcode: slli8 ; op1:x16; dest:x4; op1val:0xef0ffd1005055500;  immval:0x4
TEST_IMM_OP( slli8, x4, x16, 0x0000000000000000, 0xef0ffd1005055500, 0x4, x1, 104, x18)

inst_14:
// rs1==x2, rd==x11, rs1_b7_val == 247, rs1_b5_val == 4, rs1_b6_val == 239, rs1_b1_val == 0
// opcode: slli8 ; op1:x2; dest:x11; op1val:0xf7ef0455131300bf;  immval:0x7
TEST_IMM_OP( slli8, x11, x2, 0x0000000000000000, 0xf7ef0455131300bf, 0x7, x1, 112, x18)

inst_15:
// rs1==x21, rd==x27, rs1_b7_val == 253, rs1_b3_val == 251, rs1_b6_val == 251, rs1_b0_val == 255, rs1_b4_val == 253, rs1_b2_val == 127, rs1_b5_val == 64
// opcode: slli8 ; op1:x21; dest:x27; op1val:0xfdfb40fdfb7f07ff;  immval:0x6
TEST_IMM_OP( slli8, x27, x21, 0x0000000000000000, 0xfdfb40fdfb7f07ff, 0x6, x1, 120, x18)

inst_16:
// rs1==x10, rd==x24, rs1_b7_val == 254, rs1_b4_val == 191, rs1_b2_val == 0, rs1_b5_val == 223, rs1_b0_val == 128
// opcode: slli8 ; op1:x10; dest:x24; op1val:0xfefbdfbf0f000c80;  immval:0x4
TEST_IMM_OP( slli8, x24, x10, 0x0000000000000000, 0xfefbdfbf0f000c80, 0x4, x1, 128, x18)

inst_17:
// rs1==x22, rd==x9, rs1_b7_val == 128, rs1_b5_val == 2, rs1_b0_val == 223, rs1_b1_val == 223
// opcode: slli8 ; op1:x22; dest:x9; op1val:0x800502060211dfdf;  immval:0x2
TEST_IMM_OP( slli8, x9, x22, 0x0000000000000000, 0x800502060211dfdf, 0x2, x1, 136, x18)

inst_18:
// rs1==x9, rd==x16, rs1_b7_val == 64, rs1_b2_val == 253, rs1_b4_val == 1
// opcode: slli8 ; op1:x9; dest:x16; op1val:0x40efdf010bfd0dfe;  immval:0x0
TEST_IMM_OP( slli8, x16, x9, 0x0000000000000000, 0x40efdf010bfd0dfe, 0x0, x1, 144, x4)

inst_19:
// rs1==x8, rd==x10, rs1_b7_val == 32, rs1_b0_val == 16, rs1_b4_val == 247, rs1_b5_val == 16
// opcode: slli8 ; op1:x8; dest:x10; op1val:0x201110f70709df10;  immval:0x1
TEST_IMM_OP( slli8, x10, x8, 0x0000000000000000, 0x201110f70709df10, 0x1, x1, 152, x4)

inst_20:
// rs1==x28, rd==x0, rs1_b7_val == 16, rs1_b5_val == 127
// opcode: slli8 ; op1:x28; dest:x0; op1val:0x10807ffb100006ff;  immval:0x7
TEST_IMM_OP( slli8, x0, x28, 0x0000000000000000, 0x10807ffb100006ff, 0x7, x1, 160, x4)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_21:
// rs1==x17, rd==x13, rs1_b7_val == 8, rs1_b5_val == 170
// opcode: slli8 ; op1:x17; dest:x13; op1val:0x809aa0540130a0f;  immval:0x1
TEST_IMM_OP( slli8, x13, x17, 0x0000000000000000, 0x809aa0540130a0f, 0x1, x3, 0, x4)

inst_22:
// rs1==x23, rd==x2, rs1_b7_val == 1, rs1_b5_val == 251, rs1_b3_val == 170
// opcode: slli8 ; op1:x23; dest:x2; op1val:0x17ffb12aa102012;  immval:0x0
TEST_IMM_OP( slli8, x2, x23, 0x0000000000000000, 0x17ffb12aa102012, 0x0, x3, 8, x4)

inst_23:
// rs1==x7, rd==x14, rs1_b7_val == 255, rs1_b0_val == 32
// opcode: slli8 ; op1:x7; dest:x14; op1val:0xff100ebf12fbdf20;  immval:0x1
TEST_IMM_OP( slli8, x14, x7, 0x0000000000000000, 0xff100ebf12fbdf20, 0x1, x3, 16, x4)

inst_24:
// rs1==x1, rd==x30, rs1_b7_val == 0, rs1_b1_val == 2, rs1_b4_val == 255
// opcode: slli8 ; op1:x1; dest:x30; op1val:0x0712fffbff0210;  immval:0x3
TEST_IMM_OP( slli8, x30, x1, 0x0000000000000000, 0x0712fffbff0210, 0x3, x3, 24, x4)

inst_25:
// rs1==x25, rd==x1, rs1_b6_val == 170, rs1_b1_val == 16
// opcode: slli8 ; op1:x25; dest:x1; op1val:0xfdaadf11030d1003;  immval:0x3
TEST_IMM_OP( slli8, x1, x25, 0x0000000000000000, 0xfdaadf11030d1003, 0x3, x3, 32, x4)

inst_26:
// rs1==x18, rd==x23, rs1_b6_val == 85, rs1_b1_val == 254, rs1_b5_val == 239
// opcode: slli8 ; op1:x18; dest:x23; op1val:0x5555efbf1212fe13;  immval:0x5
TEST_IMM_OP( slli8, x23, x18, 0x0000000000000000, 0x5555efbf1212fe13, 0x5, x3, 40, x4)

inst_27:
// rs1==x0, rd==x5, rs1_b1_val == 170, rs1_b3_val == 127, rs1_b6_val == 255
// opcode: slli8 ; op1:x0; dest:x5; op1val:0xbff050c7f00aa00;  immval:0x7
TEST_IMM_OP( slli8, x5, x0, 0x0000000000000000, 0xbff050c7f00aa00, 0x7, x3, 48, x4)

inst_28:
// rs1==x6, rd==x19, rs1_b1_val == 247, rs1_b2_val == 64, rs1_b3_val == 85
// opcode: slli8 ; op1:x6; dest:x19; op1val:0xef8008075540f70f;  immval:0x5
TEST_IMM_OP( slli8, x19, x6, 0x0000000000000000, 0xef8008075540f70f, 0x5, x3, 56, x4)

inst_29:
// rs1==x24, rd==x18, rs1_b1_val == 253, rs1_b6_val == 191, rs1_b2_val == 247, rs1_b4_val == 4, rs1_b0_val == 85
// opcode: slli8 ; op1:x24; dest:x18; op1val:0x7bf550405f7fd55;  immval:0x6
TEST_IMM_OP( slli8, x18, x24, 0x0000000000000000, 0x7bf550405f7fd55, 0x6, x3, 64, x4)

inst_30:
// rs1==x27, rd==x29, rs1_b1_val == 128, rs1_b0_val == 127
// opcode: slli8 ; op1:x27; dest:x29; op1val:0x11120b058001807f;  immval:0x0
TEST_IMM_OP( slli8, x29, x27, 0x0000000000000000, 0x11120b058001807f, 0x0, x3, 72, x4)

inst_31:
// rs1==x15, rd==x28, rs1_b1_val == 64, rs1_b2_val == 239
// opcode: slli8 ; op1:x15; dest:x28; op1val:0x13050b0910ef4012;  immval:0x6
TEST_IMM_OP( slli8, x28, x15, 0x0000000000000000, 0x13050b0910ef4012, 0x6, x3, 80, x4)

inst_32:
// rs1_b1_val == 8, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x55130f0b05df080c;  immval:0x0
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0x55130f0b05df080c, 0x0, x3, 88, x4)

inst_33:
// rs1_b1_val == 1, rs1_b2_val == 32
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x7f7f04070c200155;  immval:0x6
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0x7f7f04070c200155, 0x6, x3, 96, x4)

inst_34:
// rs1_b0_val == 170, rs1_b4_val == 0, rs1_b3_val == 254, rs1_b2_val == 254
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x3000200fefe09aa;  immval:0x1
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0x3000200fefe09aa, 0x1, x3, 104, x4)

inst_35:
// rs1_b0_val == 239, rs1_b4_val == 223, rs1_b2_val == 8
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x2110cdf4008feef;  immval:0x7
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0x2110cdf4008feef, 0x7, x3, 112, x4)

inst_36:
// rs1_b0_val == 253, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xeaafdbf0c050bfd;  immval:0x1
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0xeaafdbf0c050bfd, 0x1, x3, 120, x4)

inst_37:
// rs1_b0_val == 64, rs1_b2_val == 170
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xf70512fe0daa0840;  immval:0x0
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0xf70512fe0daa0840, 0x0, x3, 128, x4)

inst_38:
// rs1_b6_val == 223, rs1_b5_val == 254
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x5dffefb80080a0a;  immval:0x4
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0x5dffefb80080a0a, 0x4, x3, 136, x4)

inst_39:
// rs1_b5_val == 255, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x10efffff02100780;  immval:0x6
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0x10efffff02100780, 0x6, x3, 144, x4)

inst_40:
// rs1_b4_val == 127, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xd05067f08127f07;  immval:0x3
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0xd05067f08127f07, 0x3, x3, 152, x4)

inst_41:
// rs1_b4_val == 239, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xf1355effb13090e;  immval:0x0
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0xf1355effb13090e, 0x0, x3, 160, x4)

inst_42:
// rs1_b4_val == 64, rs1_b3_val == 255, rs1_b6_val == 247
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xcf70140fff75540;  immval:0x6
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0xcf70140fff75540, 0x6, x3, 168, x4)

inst_43:
// rs1_b4_val == 32, rs1_b2_val == 4
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xe0f402080040efb;  immval:0x2
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0xe0f402080040efb, 0x2, x3, 176, x4)

inst_44:
// rs1_b4_val == 8, rs1_b3_val == 0, rs1_b6_val == 2
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xfd020508000b0ebf;  immval:0x0
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0xfd020508000b0ebf, 0x0, x3, 184, x4)

inst_45:
// rs1_b4_val == 2, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x12ffff02ff0a7f10;  immval:0x0
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0x12ffff02ff0a7f10, 0x0, x3, 192, x4)

inst_46:
// rs1_b5_val == 247, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x40cf7ffbf0f0303;  immval:0x2
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0x40cf7ffbf0f0303, 0x2, x3, 200, x4)

inst_47:
// rs1_b3_val == 223, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xd0dff0cdf090707;  immval:0x2
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0xd0dff0cdf090707, 0x2, x3, 208, x4)

inst_48:
// rs1_b3_val == 247, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xfb110c11f70b0d12;  immval:0x1
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0xfb110c11f70b0d12, 0x1, x3, 216, x4)

inst_49:
// rs1_b3_val == 253, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x80090203fd0af7df;  immval:0x2
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0x80090203fd0af7df, 0x2, x3, 224, x4)

inst_50:
// rs1_b0_val == 8, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x100540fd03050608;  immval:0x6
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0x100540fd03050608, 0x6, x3, 232, x4)

inst_51:
// rs1_b0_val == 4, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xfbf400a02df5504;  immval:0x1
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0xfbf400a02df5504, 0x1, x3, 240, x4)

inst_52:
// rs1_b6_val == 253, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x9fd000906097f07;  immval:0x5
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0x9fd000906097f07, 0x5, x3, 248, x4)

inst_53:
// rs1_b0_val == 2, rs1_b3_val == 4
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x55bf0cfe040d5502;  immval:0x4
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0x55bf0cfe040d5502, 0x4, x3, 256, x4)

inst_54:
// rs1_b0_val == 1, rs1_b2_val == 85
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xdffb0cf700550f01;  immval:0x5
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0xdffb0cf700550f01, 0x5, x3, 264, x4)

inst_55:
// rs1_b6_val == 64, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xef4003ef070903f7;  immval:0x0
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0xef4003ef070903f7, 0x0, x3, 272, x4)

inst_56:
// rs1_b5_val == 191, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x550dbf0713df0840;  immval:0x3
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0x550dbf0713df0840, 0x3, x3, 280, x4)

inst_57:
// rs1_b2_val == 128, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xfe0240050f802020;  immval:0x5
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0xfe0240050f802020, 0x5, x3, 288, x4)

inst_58:
// rs1_b3_val == 1, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x1012dffd010b800e;  immval:0x7
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0x1012dffd010b800e, 0x7, x3, 296, x4)

inst_59:
// rs1_b6_val == 4, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xff040f0f0e800f0d;  immval:0x6
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0xff040f0f0e800f0d, 0x6, x3, 304, x4)

inst_60:
// rs1_b2_val == 2, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x12f78080ef0220ef;  immval:0x4
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0x12f78080ef0220ef, 0x4, x3, 312, x4)

inst_61:
// rs1_b6_val == 1, 
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xfe01040e07110a06;  immval:0x4
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0xfe01040e07110a06, 0x4, x3, 320, x4)

inst_62:
// rs1_b7_val == 16, rs1_b5_val == 127
// opcode: slli8 ; op1:x30; dest:x31; op1val:0x10807ffb100006ff;  immval:0x7
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0x10807ffb100006ff, 0x7, x3, 328, x4)

inst_63:
// rs1_b1_val == 170, rs1_b3_val == 127, rs1_b6_val == 255
// opcode: slli8 ; op1:x30; dest:x31; op1val:0xbff050c7f00aa00;  immval:0x7
TEST_IMM_OP( slli8, x31, x30, 0x0000000000000000, 0xbff050c7f00aa00, 0x7, x3, 336, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 43*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
