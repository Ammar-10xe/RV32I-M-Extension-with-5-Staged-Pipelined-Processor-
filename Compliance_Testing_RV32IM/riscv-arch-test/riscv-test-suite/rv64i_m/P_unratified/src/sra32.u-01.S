
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sra32.u instruction of the RISC-V RV64PZicsr extension for the sra32.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sra32.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 == rd != rs2, rs1==x5, rs2==x11, rd==x5, rs2_val == 21, rs1_w1_val == -257, rs1_w0_val == 262144
// opcode: sra32.u ; op1:x5; op2:x11; dest:x5; op1val:0xfffffeff00040000;  op2val:0x15
TEST_RR_OP(sra32.u, x5, x5, x11, 0x0000000000000000, 0xfffffeff00040000, 0x15, x4, 0, x6)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x17, rs2==x22, rd==x3, rs2_val == 15, rs1_w0_val == -1048577
// opcode: sra32.u ; op1:x17; op2:x22; dest:x3; op1val:0xfffffeffffefffff;  op2val:0xf
TEST_RR_OP(sra32.u, x3, x17, x22, 0x0000000000000000, 0xfffffeffffefffff, 0xf, x4, 8, x6)

inst_2:
// rs1 == rs2 != rd, rs1==x7, rs2==x7, rd==x24, rs2_val == 23, rs1_w0_val == 64, rs1_w1_val == -65537
// opcode: sra32.u ; op1:x7; op2:x7; dest:x24; op1val:0xfffeffff00000040;  op2val:0x17
TEST_RR_OP(sra32.u, x24, x7, x7, 0x0000000000000000, 0xfffeffff00000040, 0x17, x4, 16, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, rs2_val == 27, rs1_w0_val == -131073
// opcode: sra32.u ; op1:x28; op2:x28; dest:x28; op1val:0x3ffffffffffdffff;  op2val:0x1b
TEST_RR_OP(sra32.u, x28, x28, x28, 0x0000000000000000, 0x3ffffffffffdffff, 0x1b, x4, 24, x6)

inst_4:
// rs2 == rd != rs1, rs1==x12, rs2==x13, rd==x13, rs2_val == 29, rs1_w0_val == -268435457
// opcode: sra32.u ; op1:x12; op2:x13; dest:x13; op1val:0xc0000000efffffff;  op2val:0x1d
TEST_RR_OP(sra32.u, x13, x12, x13, 0x0000000000000000, 0xc0000000efffffff, 0x1d, x4, 32, x6)

inst_5:
// rs1==x23, rs2==x15, rd==x1, rs2_val == 30, rs1_w1_val == 8, rs1_w0_val == 2097152
// opcode: sra32.u ; op1:x23; op2:x15; dest:x1; op1val:0x00000800200000;  op2val:0x1e
TEST_RR_OP(sra32.u, x1, x23, x15, 0x0000000000000000, 0x00000800200000, 0x1e, x4, 40, x6)

inst_6:
// rs1==x10, rs2==x0, rd==x17, rs2_val == 16, rs1_w0_val == -2147483648, rs1_w1_val == -513
// opcode: sra32.u ; op1:x10; op2:x0; dest:x17; op1val:0xfffffdff80000000;  op2val:0x0
TEST_RR_OP(sra32.u, x17, x10, x0, 0x0000000000000000, 0xfffffdff80000000, 0x0, x4, 48, x6)

inst_7:
// rs1==x11, rs2==x8, rd==x31, rs2_val == 8, rs1_w0_val == 65536, rs1_w1_val == 0
// opcode: sra32.u ; op1:x11; op2:x8; dest:x31; op1val:0x00000000010000;  op2val:0x8
TEST_RR_OP(sra32.u, x31, x11, x8, 0x0000000000000000, 0x00000000010000, 0x8, x4, 56, x6)

inst_8:
// rs1==x8, rs2==x19, rd==x14, rs2_val == 4, rs1_w1_val == 128
// opcode: sra32.u ; op1:x8; op2:x19; dest:x14; op1val:0x000080c0000000;  op2val:0x4
TEST_RR_OP(sra32.u, x14, x8, x19, 0x0000000000000000, 0x000080c0000000, 0x4, x4, 64, x6)

inst_9:
// rs1==x18, rs2==x5, rd==x8, rs2_val == 2, rs1_w0_val == -9, rs1_w1_val == -33
// opcode: sra32.u ; op1:x18; op2:x5; dest:x8; op1val:0xffffffdffffffff7;  op2val:0x2
TEST_RR_OP(sra32.u, x8, x18, x5, 0x0000000000000000, 0xffffffdffffffff7, 0x2, x4, 72, x6)

inst_10:
// rs1==x14, rs2==x29, rd==x9, rs2_val == 1, 
// opcode: sra32.u ; op1:x14; op2:x29; dest:x9; op1val:0x00000800000007;  op2val:0x1
TEST_RR_OP(sra32.u, x9, x14, x29, 0x0000000000000000, 0x00000800000007, 0x1, x4, 80, x6)

inst_11:
// rs1==x24, rs2==x25, rd==x16, rs1_w1_val == -1431655766, rs1_w0_val == -1073741825
// opcode: sra32.u ; op1:x24; op2:x25; dest:x16; op1val:0xaaaaaaaabfffffff;  op2val:0x17
TEST_RR_OP(sra32.u, x16, x24, x25, 0x0000000000000000, 0xaaaaaaaabfffffff, 0x17, x4, 88, x6)

inst_12:
// rs1==x20, rs2==x2, rd==x7, rs1_w1_val == 1431655765, 
// opcode: sra32.u ; op1:x20; op2:x2; dest:x7; op1val:0x55555555fffffff6;  op2val:0xc
TEST_RR_OP(sra32.u, x7, x20, x2, 0x0000000000000000, 0x55555555fffffff6, 0xc, x4, 96, x6)

inst_13:
// rs1==x26, rs2==x12, rd==x20, rs1_w1_val == 2147483647, rs1_w0_val == -33
// opcode: sra32.u ; op1:x26; op2:x12; dest:x20; op1val:0x7fffffffffffffdf;  op2val:0x13
TEST_RR_OP(sra32.u, x20, x26, x12, 0x0000000000000000, 0x7fffffffffffffdf, 0x13, x4, 104, x6)

inst_14:
// rs1==x3, rs2==x20, rd==x29, rs1_w1_val == -1073741825, 
// opcode: sra32.u ; op1:x3; op2:x20; dest:x29; op1val:0xbfffffffc0000000;  op2val:0x7
TEST_RR_OP(sra32.u, x29, x3, x20, 0x0000000000000000, 0xbfffffffc0000000, 0x7, x4, 112, x7)

inst_15:
// rs1==x19, rs2==x10, rd==x25, rs1_w1_val == -536870913, rs1_w0_val == 131072
// opcode: sra32.u ; op1:x19; op2:x10; dest:x25; op1val:0xdfffffff00020000;  op2val:0x17
TEST_RR_OP(sra32.u, x25, x19, x10, 0x0000000000000000, 0xdfffffff00020000, 0x17, x4, 120, x7)

inst_16:
// rs1==x16, rs2==x30, rd==x6, rs1_w1_val == -268435457, rs1_w0_val == -2
// opcode: sra32.u ; op1:x16; op2:x30; dest:x6; op1val:0xeffffffffffffffe;  op2val:0xf
TEST_RR_OP(sra32.u, x6, x16, x30, 0x0000000000000000, 0xeffffffffffffffe, 0xf, x4, 128, x7)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_17:
// rs1==x15, rs2==x14, rd==x23, rs1_w1_val == -134217729, rs1_w0_val == -257
// opcode: sra32.u ; op1:x15; op2:x14; dest:x23; op1val:0xf7fffffffffffeff;  op2val:0xc
TEST_RR_OP(sra32.u, x23, x15, x14, 0x0000000000000000, 0xf7fffffffffffeff, 0xc, x5, 0, x7)

inst_18:
// rs1==x1, rs2==x21, rd==x4, rs1_w1_val == -67108865, rs1_w0_val == 4096
// opcode: sra32.u ; op1:x1; op2:x21; dest:x4; op1val:0xfbffffff00001000;  op2val:0x12
TEST_RR_OP(sra32.u, x4, x1, x21, 0x0000000000000000, 0xfbffffff00001000, 0x12, x5, 8, x7)

inst_19:
// rs1==x29, rs2==x23, rd==x19, rs1_w1_val == -33554433, rs1_w0_val == 4
// opcode: sra32.u ; op1:x29; op2:x23; dest:x19; op1val:0xfdffffff00000004;  op2val:0x7
TEST_RR_OP(sra32.u, x19, x29, x23, 0x0000000000000000, 0xfdffffff00000004, 0x7, x5, 16, x7)

inst_20:
// rs1==x4, rs2==x24, rd==x27, rs1_w1_val == -16777217, 
// opcode: sra32.u ; op1:x4; op2:x24; dest:x27; op1val:0xfeffffffffefffff;  op2val:0xd
TEST_RR_OP(sra32.u, x27, x4, x24, 0x0000000000000000, 0xfeffffffffefffff, 0xd, x5, 24, x7)

inst_21:
// rs1==x0, rs2==x27, rd==x2, rs1_w1_val == -8388609, rs1_w0_val == -65
// opcode: sra32.u ; op1:x0; op2:x27; dest:x2; op1val:0xff7fffffffffffbf;  op2val:0x9
TEST_RR_OP(sra32.u, x2, x0, x27, 0x0000000000000000, 0xff7fffffffffffbf, 0x9, x5, 32, x7)

inst_22:
// rs1==x22, rs2==x16, rd==x30, rs1_w1_val == -4194305, rs1_w0_val == 1431655765
// opcode: sra32.u ; op1:x22; op2:x16; dest:x30; op1val:0xffbfffff55555555;  op2val:0x17
TEST_RR_OP(sra32.u, x30, x22, x16, 0x0000000000000000, 0xffbfffff55555555, 0x17, x5, 40, x7)

inst_23:
// rs1==x31, rs2==x3, rd==x15, rs1_w1_val == -2097153, 
// opcode: sra32.u ; op1:x31; op2:x3; dest:x15; op1val:0xffdfffff00010000;  op2val:0xf
TEST_RR_OP(sra32.u, x15, x31, x3, 0x0000000000000000, 0xffdfffff00010000, 0xf, x5, 48, x7)

inst_24:
// rs1==x6, rs2==x9, rd==x0, rs1_w1_val == -1048577, rs1_w0_val == 524288
// opcode: sra32.u ; op1:x6; op2:x9; dest:x0; op1val:0xffefffff00080000;  op2val:0x1
TEST_RR_OP(sra32.u, x0, x6, x9, 0x0000000000000000, 0xffefffff00080000, 0x1, x5, 56, x7)

inst_25:
// rs1==x21, rs2==x26, rd==x11, rs1_w1_val == -524289, 
// opcode: sra32.u ; op1:x21; op2:x26; dest:x11; op1val:0xfff7fffffffffffc;  op2val:0x1
TEST_RR_OP(sra32.u, x11, x21, x26, 0x0000000000000000, 0xfff7fffffffffffc, 0x1, x5, 64, x7)

inst_26:
// rs1==x9, rs2==x6, rd==x26, rs1_w1_val == -262145, 
// opcode: sra32.u ; op1:x9; op2:x6; dest:x26; op1val:0xfffbffff00000004;  op2val:0x8
TEST_RR_OP(sra32.u, x26, x9, x6, 0x0000000000000000, 0xfffbffff00000004, 0x8, x5, 72, x7)

inst_27:
// rs1==x25, rs2==x31, rd==x21, rs1_w1_val == -131073, 
// opcode: sra32.u ; op1:x25; op2:x31; dest:x21; op1val:0xfffdffff00040000;  op2val:0x7
TEST_RR_OP(sra32.u, x21, x25, x31, 0x0000000000000000, 0xfffdffff00040000, 0x7, x5, 80, x7)

inst_28:
// rs1==x13, rs2==x4, rd==x10, rs1_w1_val == -32769, rs1_w0_val == -3
// opcode: sra32.u ; op1:x13; op2:x4; dest:x10; op1val:0xffff7ffffffffffd;  op2val:0xd
TEST_RR_OP(sra32.u, x10, x13, x4, 0x0000000000000000, 0xffff7ffffffffffd, 0xd, x5, 88, x7)

inst_29:
// rs1==x2, rs2==x1, rd==x18, rs1_w1_val == -16385, rs1_w0_val == -524289
// opcode: sra32.u ; op1:x2; op2:x1; dest:x18; op1val:0xffffbffffff7ffff;  op2val:0x6
TEST_RR_OP(sra32.u, x18, x2, x1, 0x0000000000000000, 0xffffbffffff7ffff, 0x6, x5, 96, x7)

inst_30:
// rs1==x27, rs2==x18, rd==x12, rs1_w1_val == -8193, 
// opcode: sra32.u ; op1:x27; op2:x18; dest:x12; op1val:0xffffdfffffefffff;  op2val:0x9
TEST_RR_OP(sra32.u, x12, x27, x18, 0x0000000000000000, 0xffffdfffffefffff, 0x9, x5, 104, x7)

inst_31:
// rs1==x30, rs2==x17, rd==x22, rs1_w1_val == -4097, rs1_w0_val == 8192
// opcode: sra32.u ; op1:x30; op2:x17; dest:x22; op1val:0xffffefff00002000;  op2val:0xd
TEST_RR_OP(sra32.u, x22, x30, x17, 0x0000000000000000, 0xffffefff00002000, 0xd, x5, 112, x1)

inst_32:
// rs1_w1_val == -2049, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffffffc;  op2val:0x1e
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffffffc, 0x1e, x5, 120, x1)

inst_33:
// rs1_w1_val == -1025, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffff7ffff;  op2val:0x15
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffbfffff7ffff, 0x15, x5, 128, x1)

inst_34:
// rs1_w1_val == -129, rs1_w0_val == 33554432
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f02000000;  op2val:0x12
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xffffff7f02000000, 0x12, x5, 136, x1)

inst_35:
// rs1_w1_val == -65, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00020000;  op2val:0x1b
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xffffffbf00020000, 0x1b, x5, 144, x1)

inst_36:
// rs1_w1_val == -17, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef3fffffff;  op2val:0xb
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xffffffef3fffffff, 0xb, x5, 152, x1)

inst_37:
// rs1_w1_val == -9, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7bfffffff;  op2val:0x0
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffff7bfffffff, 0x0, x5, 160, x1)

inst_38:
// rs1_w1_val == -5, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbbfffffff;  op2val:0x11
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffffbbfffffff, 0x11, x5, 168, x1)

inst_39:
// rs1_w1_val == -3, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffffffe;  op2val:0x1f
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffffffe, 0x1f, x5, 176, x1)

inst_40:
// rs1_w1_val == -2, rs1_w0_val == -4194305
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffbfffff;  op2val:0x10
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffffeffbfffff, 0x10, x5, 184, x1)

inst_41:
// rs1_w1_val == -2147483648, rs1_w0_val == 16
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000010;  op2val:0x10
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x8000000000000010, 0x10, x5, 192, x1)

inst_42:
// rs1_w1_val == 1073741824, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000003;  op2val:0x10
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x4000000000000003, 0x10, x5, 200, x1)

inst_43:
// rs1_w1_val == 536870912, rs1_w0_val == 16777216
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000001000000;  op2val:0x6
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x2000000001000000, 0x6, x5, 208, x1)

inst_44:
// rs1_w1_val == 268435456, rs1_w0_val == -65537
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffeffff;  op2val:0x2
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x10000000fffeffff, 0x2, x5, 216, x1)

inst_45:
// rs1_w1_val == 134217728, rs1_w0_val == 2048
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000800;  op2val:0x15
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x800000000000800, 0x15, x5, 224, x1)

inst_46:
// rs1_w1_val == 67108864, rs1_w0_val == -1
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000000ffffffff;  op2val:0x2
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x4000000ffffffff, 0x2, x5, 232, x1)

inst_47:
// rs1_w1_val == 33554432, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000010;  op2val:0x10
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x200000000000010, 0x10, x5, 240, x1)

inst_48:
// rs1_w1_val == 16777216, rs1_w0_val == 8388608
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x100000000800000;  op2val:0x8
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x100000000800000, 0x8, x5, 248, x1)

inst_49:
// rs1_w0_val == 32768, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00008000;  op2val:0x12
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffffa00008000, 0x12, x5, 256, x1)

inst_50:
// rs1_w0_val == 16384, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x800000000004000;  op2val:0x17
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x800000000004000, 0x17, x5, 264, x1)

inst_51:
// rs1_w0_val == 1024, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00008000000400;  op2val:0xe
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x00008000000400, 0xe, x5, 272, x1)

inst_52:
// rs1_w0_val == 512, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000200;  op2val:0xd
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000200, 0xd, x5, 280, x1)

inst_53:
// rs1_w0_val == 256, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000100;  op2val:0x11
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xc000000000000100, 0x11, x5, 288, x1)

inst_54:
// rs1_w0_val == 128, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000080;  op2val:0x0
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x800000000000080, 0x0, x5, 296, x1)

inst_55:
// rs1_w0_val == 32, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000020;  op2val:0x1e
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000020, 0x1e, x5, 304, x1)

inst_56:
// rs1_w0_val == 8, rs1_w1_val == 524288
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000008;  op2val:0xe
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x08000000000008, 0xe, x5, 312, x1)

inst_57:
// rs1_w0_val == 2, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000002;  op2val:0x7
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000002, 0x7, x5, 320, x1)

inst_58:
// rs1_w0_val == 1, rs2_val == 10
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff600000001;  op2val:0xa
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffff600000001, 0xa, x5, 328, x1)

inst_59:
// rs1_w0_val == 0, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000000;  op2val:0xc
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xffffffef00000000, 0xc, x5, 336, x1)

inst_60:
// rs1_w1_val == 8388608, rs1_w0_val == 536870912
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x80000020000000;  op2val:0x8
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x80000020000000, 0x8, x5, 344, x1)

inst_61:
// rs1_w1_val == 4194304, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000000008000;  op2val:0xa
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x40000000008000, 0xa, x5, 352, x1)

inst_62:
// rs1_w1_val == 2097152, rs1_w0_val == -1025
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffffbff;  op2val:0xd
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x200000fffffbff, 0xd, x5, 360, x1)

inst_63:
// rs1_w1_val == 1048576, rs1_w0_val == -513
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x100000fffffdff;  op2val:0x2
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x100000fffffdff, 0x2, x5, 368, x1)

inst_64:
// rs1_w1_val == 262144, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x04000000001000;  op2val:0x12
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x04000000001000, 0x12, x5, 376, x1)

inst_65:
// rs1_w1_val == 131072, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x02000000008000;  op2val:0x6
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x02000000008000, 0x6, x5, 384, x1)

inst_66:
// rs1_w1_val == 65536, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000001;  op2val:0x11
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x01000000000001, 0x11, x5, 392, x1)

inst_67:
// rs1_w1_val == 32768, rs1_w0_val == -134217729
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x008000f7ffffff;  op2val:0xc
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x008000f7ffffff, 0xc, x5, 400, x1)

inst_68:
// rs1_w1_val == 16384, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffffffc;  op2val:0xd
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x004000fffffffc, 0xd, x5, 408, x1)

inst_69:
// rs1_w1_val == 8192, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x002000fffffff7;  op2val:0x11
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x002000fffffff7, 0x11, x5, 416, x1)

inst_70:
// rs1_w1_val == 4096, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000003;  op2val:0x6
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x00100000000003, 0x6, x5, 424, x1)

inst_71:
// rs1_w1_val == 2048, rs1_w0_val == 4194304
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00080000400000;  op2val:0x8
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x00080000400000, 0x8, x5, 432, x1)

inst_72:
// rs1_w1_val == 1024, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000400f7ffffff;  op2val:0x11
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x000400f7ffffff, 0x11, x5, 440, x1)

inst_73:
// rs1_w1_val == 512, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00020000040000;  op2val:0x12
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x00020000040000, 0x12, x5, 448, x1)

inst_74:
// rs1_w1_val == 256, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000200;  op2val:0xc
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x00010000000200, 0xc, x5, 456, x1)

inst_75:
// rs1_w1_val == 64, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000040fffffeff;  op2val:0xa
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x000040fffffeff, 0xa, x5, 464, x1)

inst_76:
// rs1_w1_val == 32, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000003;  op2val:0xf
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x00002000000003, 0xf, x5, 472, x1)

inst_77:
// rs1_w1_val == 16, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000040;  op2val:0x3
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x00001000000040, 0x3, x5, 480, x1)

inst_78:
// rs1_w1_val == 4, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000000;  op2val:0x2
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x00000400000000, 0x2, x5, 488, x1)

inst_79:
// rs1_w1_val == 2, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffffff8;  op2val:0x2
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x000002fffffff8, 0x2, x5, 496, x1)

inst_80:
// rs1_w1_val == 1, rs1_w0_val == -5
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffffffb;  op2val:0x15
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x000001fffffffb, 0x15, x5, 504, x1)

inst_81:
// rs1_w1_val == -1, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000400;  op2val:0x15
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xffffffff00000400, 0x15, x5, 512, x1)

inst_82:
// rs1_w0_val == -1431655766, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffaaaaaaaa;  op2val:0x12
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xfbffffffaaaaaaaa, 0x12, x5, 520, x1)

inst_83:
// rs1_w0_val == 2147483647, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x0000207fffffff;  op2val:0x6
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x0000207fffffff, 0x6, x5, 528, x1)

inst_84:
// rs1_w0_val == -536870913, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffdfffffff;  op2val:0x8
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xfffff7ffdfffffff, 0x8, x5, 536, x1)

inst_85:
// rs1_w0_val == -67108865, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffbffffff;  op2val:0x4
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xffbffffffbffffff, 0x4, x5, 544, x1)

inst_86:
// rs1_w0_val == -33554433, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fdffffff;  op2val:0x1
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x10000000fdffffff, 0x1, x5, 552, x1)

inst_87:
// rs1_w0_val == -16777217, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffeffffff;  op2val:0xf
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xfdfffffffeffffff, 0xf, x5, 560, x1)

inst_88:
// rs1_w0_val == -32769, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffffff7fff;  op2val:0x17
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x3fffffffffff7fff, 0x17, x5, 568, x1)

inst_89:
// rs1_w0_val == -16385, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x040000ffffbfff;  op2val:0xf
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x040000ffffbfff, 0xf, x5, 576, x1)

inst_90:
// rs1_w0_val == -8193, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffdfff;  op2val:0xc
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffdfff, 0xc, x5, 584, x1)

inst_91:
// rs1_w0_val == -4097, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9ffffefff;  op2val:0x1d
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffff9ffffefff, 0x1d, x5, 592, x1)

inst_92:
// rs1_w0_val == -2049, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x008000fffff7ff;  op2val:0x10
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x008000fffff7ff, 0x10, x5, 600, x1)

inst_93:
// rs1_w0_val == -129, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000001ffffff7f;  op2val:0xd
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x000001ffffff7f, 0xd, x5, 608, x1)

inst_94:
// rs1_w0_val == -17, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffffffef;  op2val:0xb
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x001000ffffffef, 0xb, x5, 616, x1)

inst_95:
// rs1_w0_val == 1073741824, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x01000040000000;  op2val:0x5
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x01000040000000, 0x5, x5, 624, x1)

inst_96:
// rs1_w0_val == 268435456, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff10000000;  op2val:0x8
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xfdffffff10000000, 0x8, x5, 632, x1)

inst_97:
// rs1_w0_val == 134217728, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef08000000;  op2val:0x13
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xffffffef08000000, 0x13, x5, 640, x1)

inst_98:
// rs1_w0_val == 67108864, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x400000004000000;  op2val:0x1e
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x400000004000000, 0x1e, x5, 648, x1)

inst_99:
// rs1_w0_val == -8388609, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaff7fffff;  op2val:0x11
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaff7fffff, 0x11, x5, 656, x1)

inst_100:
// rs1_w0_val == -2097153, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000000ffdfffff;  op2val:0x13
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x000000ffdfffff, 0x13, x5, 664, x1)

inst_101:
// rs1_w0_val == 1048576, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000100000;  op2val:0x2
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x8000000000100000, 0x2, x5, 672, x1)

inst_102:
// rs1_w0_val == -262145, 
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000010fffbffff;  op2val:0x7
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x000010fffbffff, 0x7, x5, 680, x1)

inst_103:
// rs2_val == 23, rs1_w0_val == 64, rs1_w1_val == -65537
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000040;  op2val:0x17
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000040, 0x17, x5, 688, x1)

inst_104:
// rs2_val == 27, rs1_w0_val == -131073
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffffffdffff;  op2val:0x1b
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0x3ffffffffffdffff, 0x1b, x5, 696, x1)

inst_105:
// rs2_val == 16, rs1_w0_val == -2147483648, rs1_w1_val == -513
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff80000000;  op2val:0x10
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffdff80000000, 0x10, x5, 704, x1)

inst_106:
// rs1_w1_val == -8388609, rs1_w0_val == -65
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffffffbf;  op2val:0x9
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xff7fffffffffffbf, 0x9, x5, 712, x1)

inst_107:
// rs1_w1_val == -1048577, rs1_w0_val == 524288
// opcode: sra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00080000;  op2val:0x1
TEST_RR_OP(sra32.u, x31, x30, x29, 0x0000000000000000, 0xffefffff00080000, 0x1, x5, 720, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 91*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
