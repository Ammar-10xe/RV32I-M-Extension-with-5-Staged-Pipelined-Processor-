
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the cras16 instruction of the RISC-V RV64PZicsr extension for the cras16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",cras16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x25, rs2==x14, rd==x25, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h0_val == 2, rs1_h2_val != rs2_h2_val, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h1_val == 8, rs2_h3_val == 1024, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -3, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h3_val == -17
// opcode: cras16 ; op1:x25; op2:x14; dest:x25; op1val:0xffef000300088000;  op2val:0x4003ffffffd0002
TEST_RR_OP(cras16, x25, x25, x14, 0x0000000000000000, 0xffef000300088000, 0x4003ffffffd0002, x2, 0, x7)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x3, rs2==x22, rd==x28, rs1_h3_val == rs2_h3_val, rs2_h0_val == 8, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h2_val == -21846, rs2_h3_val == 2048, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == 1024, rs1_h1_val == -33, rs1_h3_val == 2048
// opcode: cras16 ; op1:x3; op2:x22; dest:x28; op1val:0x800aaaaffdffffc;  op2val:0x8000400fffd0008
TEST_RR_OP(cras16, x28, x3, x22, 0x0000000000000000, 0x800aaaaffdffffc, 0x8000400fffd0008, x2, 8, x7)

inst_2:
// rs1 == rs2 != rd, rs1==x8, rs2==x8, rd==x3, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h0_val == 16384, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 4, rs2_h1_val == -17, rs1_h3_val == -4097, rs2_h0_val == -33, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h3_val == -4097
// opcode: cras16 ; op1:x8; op2:x8; dest:x3; op1val:0xefff0004fff64000;  op2val:0xefffc000ffefffdf
TEST_RR_OP(cras16, x3, x8, x8, 0x0000000000000000, 0xefff0004fff64000, 0xefffc000ffefffdf, x2, 16, x7)

inst_3:
// rs1 == rs2 == rd, rs1==x12, rs2==x12, rd==x12, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == 2, rs2_h3_val == -129, rs1_h3_val == 32767, rs1_h2_val == 32767, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == -513
// opcode: cras16 ; op1:x12; op2:x12; dest:x12; op1val:0x7fff7fff0006fdff;  op2val:0xff7f00050002fffc
TEST_RR_OP(cras16, x12, x12, x12, 0x0000000000000000, 0x7fff7fff0006fdff, 0xff7f00050002fffc, x2, 24, x7)

inst_4:
// rs2 == rd != rs1, rs1==x1, rs2==x5, rd==x5, rs1_h2_val == rs2_h2_val, rs2_h2_val == -16385, rs2_h0_val == 1, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val == 128, rs1_h2_val == -16385, rs1_h0_val == -21846, rs2_h1_val == 8
// opcode: cras16 ; op1:x1; op2:x5; dest:x5; op1val:0x07bfff0080aaaa;  op2val:0xfffcbfff00080001
TEST_RR_OP(cras16, x5, x1, x5, 0x0000000000000000, 0x07bfff0080aaaa, 0xfffcbfff00080001, x2, 32, x7)

inst_5:
// rs1==x14, rs2==x30, rd==x13, rs1_h1_val == rs2_h1_val, rs2_h3_val == -1025, rs1_h3_val == 512, rs2_h0_val == -1, rs1_h1_val == 16, rs2_h2_val == 8192, rs2_h1_val == 16
// opcode: cras16 ; op1:x14; op2:x30; dest:x13; op1val:0x200000700100005;  op2val:0xfbff20000010ffff
TEST_RR_OP(cras16, x13, x14, x30, 0x0000000000000000, 0x200000700100005, 0xfbff20000010ffff, x2, 40, x7)

inst_6:
// rs1==x29, rs2==x28, rd==x0, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h1_val == -21846, rs1_h3_val == -8193, rs2_h0_val == -2
// opcode: cras16 ; op1:x29; op2:x28; dest:x0; op1val:0xdffffff9aaaafff9;  op2val:0xefffc0000006fffe
TEST_RR_OP(cras16, x0, x29, x28, 0x0000000000000000, 0xdffffff9aaaafff9, 0xefffc0000006fffe, x2, 48, x7)

inst_7:
// rs1==x16, rs2==x15, rd==x27, rs1_h0_val == rs2_h0_val, rs1_h2_val == 16, rs1_h0_val == -129, rs1_h1_val == 32, rs2_h0_val == -129
// opcode: cras16 ; op1:x16; op2:x15; dest:x27; op1val:0xdfff00100020ff7f;  op2val:0xfff62000fff9ff7f
TEST_RR_OP(cras16, x27, x16, x15, 0x0000000000000000, 0xdfff00100020ff7f, 0xfff62000fff9ff7f, x2, 56, x7)

inst_8:
// rs1==x11, rs2==x18, rd==x14, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 4, rs2_h3_val == -3, rs1_h2_val == 8, rs1_h0_val == 64, rs2_h1_val == 256, rs1_h1_val == -65
// opcode: cras16 ; op1:x11; op2:x18; dest:x14; op1val:0x050008ffbf0040;  op2val:0xfffdfffa01000004
TEST_RR_OP(cras16, x14, x11, x18, 0x0000000000000000, 0x050008ffbf0040, 0xfffdfffa01000004, x2, 64, x7)

inst_9:
// rs1==x6, rs2==x3, rd==x9, rs2_h3_val == -21846, rs1_h3_val == -257, rs2_h1_val == -257, rs1_h2_val == 4096, rs2_h2_val == -129
// opcode: cras16 ; op1:x6; op2:x3; dest:x9; op1val:0xfeff100000063fff;  op2val:0xaaaaff7ffefffff8
TEST_RR_OP(cras16, x9, x6, x3, 0x0000000000000000, 0xfeff100000063fff, 0xaaaaff7ffefffff8, x2, 72, x7)

inst_10:
// rs1==x27, rs2==x17, rd==x8, rs2_h3_val == 21845, rs2_h2_val == -33, rs2_h0_val == 4096, rs1_h2_val == -129
// opcode: cras16 ; op1:x27; op2:x17; dest:x8; op1val:0xefffff7ffff8fffc;  op2val:0x5555ffdffffd1000
TEST_RR_OP(cras16, x8, x27, x17, 0x0000000000000000, 0xefffff7ffff8fffc, 0x5555ffdffffd1000, x2, 80, x7)

inst_11:
// rs1==x17, rs2==x31, rd==x6, rs2_h3_val == 32767, rs1_h0_val == -33, rs2_h0_val == -4097, rs1_h3_val == -16385, rs2_h2_val == -32768, rs1_h1_val == -4097
// opcode: cras16 ; op1:x17; op2:x31; dest:x6; op1val:0xbffffff8efffffdf;  op2val:0x7fff8000fffcefff
TEST_RR_OP(cras16, x6, x17, x31, 0x0000000000000000, 0xbffffff8efffffdf, 0x7fff8000fffcefff, x2, 88, x7)

inst_12:
// rs1==x28, rs2==x11, rd==x10, rs2_h3_val == -16385, rs2_h0_val == 64, rs2_h1_val == -2049, rs1_h3_val == -2049, rs2_h2_val == 256, rs1_h0_val == -1, rs1_h2_val == -33
// opcode: cras16 ; op1:x28; op2:x11; dest:x10; op1val:0xf7ffffdf0009ffff;  op2val:0xbfff0100f7ff0040
TEST_RR_OP(cras16, x10, x28, x11, 0x0000000000000000, 0xf7ffffdf0009ffff, 0xbfff0100f7ff0040, x2, 96, x7)

inst_13:
// rs1==x23, rs2==x19, rd==x17, rs2_h3_val == -8193, rs1_h2_val == -9, rs2_h0_val == -1025, rs1_h0_val == 32767, rs2_h1_val == -9
// opcode: cras16 ; op1:x23; op2:x19; dest:x17; op1val:0xc000fff700067fff;  op2val:0xdfff3ffffff7fbff
TEST_RR_OP(cras16, x17, x23, x19, 0x0000000000000000, 0xc000fff700067fff, 0xdfff3ffffff7fbff, x2, 104, x7)

inst_14:
// rs1==x22, rs2==x29, rd==x20, rs2_h3_val == -2049, rs2_h1_val == 1, rs1_h1_val == 64, rs1_h0_val == 21845
// opcode: cras16 ; op1:x22; op2:x29; dest:x20; op1val:0x09000500405555;  op2val:0xf7fffffa0001ff7f
TEST_RR_OP(cras16, x20, x22, x29, 0x0000000000000000, 0x09000500405555, 0xf7fffffa0001ff7f, x2, 112, x7)

inst_15:
// rs1==x26, rs2==x20, rd==x4, rs2_h3_val == -513, rs1_h3_val == 16384, rs1_h0_val == 1, rs2_h1_val == 16384, rs2_h2_val == -513
// opcode: cras16 ; op1:x26; op2:x20; dest:x4; op1val:0x4000000800070001;  op2val:0xfdfffdff40000008
TEST_RR_OP(cras16, x4, x26, x20, 0x0000000000000000, 0x4000000800070001, 0xfdfffdff40000008, x2, 120, x7)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_16:
// rs1==x31, rs2==x27, rd==x19, rs2_h3_val == -257, rs1_h0_val == 8192, rs1_h1_val == 1
// opcode: cras16 ; op1:x31; op2:x27; dest:x19; op1val:0x800000600012000;  op2val:0xfefffffc00020007
TEST_RR_OP(cras16, x19, x31, x27, 0x0000000000000000, 0x800000600012000, 0xfefffffc00020007, x3, 0, x8)

inst_17:
// rs1==x20, rs2==x1, rd==x30, rs2_h3_val == -65, rs2_h2_val == -65, rs1_h3_val == -513, rs1_h0_val == -3, rs1_h1_val == 8192
// opcode: cras16 ; op1:x20; op2:x1; dest:x30; op1val:0xfdff00082000fffd;  op2val:0xffbfffbf00030002
TEST_RR_OP(cras16, x30, x20, x1, 0x0000000000000000, 0xfdff00082000fffd, 0xffbfffbf00030002, x3, 8, x8)

inst_18:
// rs1==x24, rs2==x7, rd==x23, rs2_h3_val == -33, rs1_h3_val == 128, rs1_h0_val == 2048, rs1_h2_val == 1, rs2_h1_val == 2048, rs2_h0_val == 2048
// opcode: cras16 ; op1:x24; op2:x7; dest:x23; op1val:0x800001aaaa0800;  op2val:0xffdfffdf08000800
TEST_RR_OP(cras16, x23, x24, x7, 0x0000000000000000, 0x800001aaaa0800, 0xffdfffdf08000800, x3, 16, x8)

inst_19:
// rs1==x0, rs2==x24, rd==x2, rs2_h3_val == -17, rs1_h1_val == -3
// opcode: cras16 ; op1:x0; op2:x24; dest:x2; op1val:0xefff1000fffdff7f;  op2val:0xffeffff90100ff7f
TEST_RR_OP(cras16, x2, x0, x24, 0x0000000000000000, 0xefff1000fffdff7f, 0xffeffff90100ff7f, x3, 24, x8)

inst_20:
// rs1==x18, rs2==x6, rd==x7, rs2_h3_val == -9, rs1_h3_val == 2, rs2_h1_val == 32767, rs2_h0_val == -5, rs2_h2_val == 1
// opcode: cras16 ; op1:x18; op2:x6; dest:x7; op1val:0x02ff7fc0002000;  op2val:0xfff700017ffffffb
TEST_RR_OP(cras16, x7, x18, x6, 0x0000000000000000, 0x02ff7fc0002000, 0xfff700017ffffffb, x3, 32, x8)

inst_21:
// rs1==x21, rs2==x4, rd==x26, rs2_h3_val == -5, rs1_h3_val == -65, rs2_h1_val == -65, rs1_h1_val == -16385, rs1_h2_val == 0
// opcode: cras16 ; op1:x21; op2:x4; dest:x26; op1val:0xffbf0000bfff0800;  op2val:0xfffb0009ffbfff7f
TEST_RR_OP(cras16, x26, x21, x4, 0x0000000000000000, 0xffbf0000bfff0800, 0xfffb0009ffbfff7f, x3, 40, x8)

inst_22:
// rs1==x30, rs2==x10, rd==x24, rs2_h3_val == -2, rs1_h3_val == -3, rs2_h1_val == 64, rs2_h2_val == 2
// opcode: cras16 ; op1:x30; op2:x10; dest:x24; op1val:0xfffd0009fff9c000;  op2val:0xfffe00020040fffe
TEST_RR_OP(cras16, x24, x30, x10, 0x0000000000000000, 0xfffd0009fff9c000, 0xfffe00020040fffe, x3, 48, x8)

inst_23:
// rs1==x2, rs2==x9, rd==x15, rs2_h3_val == -32768, rs1_h2_val == -4097, rs1_h1_val == -1, rs2_h2_val == 512, rs1_h0_val == -4097, rs2_h0_val == 256
// opcode: cras16 ; op1:x2; op2:x9; dest:x15; op1val:0xfff6efffffffefff;  op2val:0x80000200ffef0100
TEST_RR_OP(cras16, x15, x2, x9, 0x0000000000000000, 0xfff6efffffffefff, 0x80000200ffef0100, x3, 56, x8)

inst_24:
// rs1==x13, rs2==x16, rd==x18, rs2_h3_val == 16384, rs1_h1_val == -5, rs2_h2_val == -8193, rs1_h3_val == -2, rs2_h0_val == 128
// opcode: cras16 ; op1:x13; op2:x16; dest:x18; op1val:0xfffefff8fffb0007;  op2val:0x4000dfff00020080
TEST_RR_OP(cras16, x18, x13, x16, 0x0000000000000000, 0xfffefff8fffb0007, 0x4000dfff00020080, x3, 64, x8)

inst_25:
// rs1==x9, rs2==x25, rd==x22, rs2_h3_val == 8192, rs2_h1_val == 128, rs2_h2_val == -3
// opcode: cras16 ; op1:x9; op2:x25; dest:x22; op1val:0x4000ffdf0010fff8;  op2val:0x2000fffd0080efff
TEST_RR_OP(cras16, x22, x9, x25, 0x0000000000000000, 0x4000ffdf0010fff8, 0x2000fffd0080efff, x3, 72, x8)

inst_26:
// rs1==x10, rs2==x21, rd==x29, rs2_h3_val == 4096, rs1_h1_val == -1025, rs1_h3_val == 21845, rs2_h2_val == -21846
// opcode: cras16 ; op1:x10; op2:x21; dest:x29; op1val:0x5555aaaafbff0003;  op2val:0x1000aaaa00010006
TEST_RR_OP(cras16, x29, x10, x21, 0x0000000000000000, 0x5555aaaafbff0003, 0x1000aaaa00010006, x3, 80, x8)

inst_27:
// rs1==x15, rs2==x23, rd==x31, rs2_h3_val == 512, rs2_h2_val == -1025, rs1_h3_val == 4096
// opcode: cras16 ; op1:x15; op2:x23; dest:x31; op1val:0x1000efff0005ff7f;  op2val:0x200fbfffff81000
TEST_RR_OP(cras16, x31, x15, x23, 0x0000000000000000, 0x1000efff0005ff7f, 0x200fbfffff81000, x3, 88, x8)

inst_28:
// rs1==x4, rs2==x2, rd==x21, rs2_h3_val == 256, rs1_h1_val == -32768, rs2_h0_val == 16, rs2_h1_val == -32768, rs1_h0_val == 128
// opcode: cras16 ; op1:x4; op2:x2; dest:x21; op1val:0x3fffefff80000080;  op2val:0x100fffa80000010
TEST_RR_OP(cras16, x21, x4, x2, 0x0000000000000000, 0x3fffefff80000080, 0x100fffa80000010, x3, 96, x8)

inst_29:
// rs1==x19, rs2==x0, rd==x16, rs2_h3_val == 128, rs1_h1_val == -9, rs1_h2_val == 2048, rs2_h0_val == 1024, rs1_h3_val == -9
// opcode: cras16 ; op1:x19; op2:x0; dest:x16; op1val:0xfff70800fff7fdff;  op2val:0x80020000020400
TEST_RR_OP(cras16, x16, x19, x0, 0x0000000000000000, 0xfff70800fff7fdff, 0x80020000020400, x3, 104, x8)

inst_30:
// rs1==x7, rs2==x26, rd==x11, rs2_h3_val == 64, rs1_h2_val == 32, rs1_h3_val == -32768
// opcode: cras16 ; op1:x7; op2:x26; dest:x11; op1val:0x80000020fff80080;  op2val:0x40000700030001
TEST_RR_OP(cras16, x11, x7, x26, 0x0000000000000000, 0x80000020fff80080, 0x40000700030001, x3, 112, x8)

inst_31:
// rs1==x5, rs2==x13, rd==x1, rs2_h3_val == 32, rs2_h0_val == -21846
// opcode: cras16 ; op1:x5; op2:x13; dest:x1; op1val:0x800008000005c000;  op2val:0x2000010800aaaa
TEST_RR_OP(cras16, x1, x5, x13, 0x0000000000000000, 0x800008000005c000, 0x2000010800aaaa, x3, 120, x8)

inst_32:
// rs2_h3_val == 16, rs2_h1_val == 21845, rs2_h0_val == -257, rs2_h2_val == 4096, rs1_h1_val == 32767, rs1_h2_val == -5
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffb7ffffdff;  op2val:0x1010005555feff
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfff9fffb7ffffdff, 0x1010005555feff, x3, 128, x8)

inst_33:
// rs2_h3_val == 8, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0700090010ffff;  op2val:0x0800030001fff9
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x0700090010ffff, 0x0800030001fff9, x3, 136, x8)

inst_34:
// rs2_h3_val == 4, rs2_h1_val == 1024, rs2_h2_val == -2
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00043fffffff;  op2val:0x04fffe04000009
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfdff00043fffffff, 0x04fffe04000009, x3, 144, x8)

inst_35:
// rs2_h3_val == 2, rs2_h0_val == -65, rs2_h1_val == -21846, rs1_h1_val == -2049
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffebffff7ffaaaa;  op2val:0x02fffeaaaaffbf
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfffebffff7ffaaaa, 0x02fffeaaaaffbf, x3, 152, x8)

inst_36:
// rs1_h1_val == -2, rs2_h1_val == 4
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0007fffefffd;  op2val:0xfff8fffa00040010
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xffbf0007fffefffd, 0xfff8fffa00040010, x3, 160, x8)

inst_37:
// rs1_h1_val == 16384, rs1_h2_val == -65
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x03ffbf40000006;  op2val:0x800fbff3fff0080
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x03ffbf40000006, 0x800fbff3fff0080, x3, 168, x8)

inst_38:
// rs1_h1_val == 4096, rs1_h3_val == -5, rs1_h0_val == -2049
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbaaaa1000f7ff;  op2val:0xfff8fff9fffd0003
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfffbaaaa1000f7ff, 0xfff8fff9fffd0003, x3, 176, x8)

inst_39:
// rs1_h1_val == 2048, rs2_h2_val == -1, rs1_h0_val == 2, rs2_h0_val == 32767
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffb08000002;  op2val:0x09fffffff97fff
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfffdfffb08000002, 0x09fffffff97fff, x3, 184, x8)

inst_40:
// rs1_h1_val == 1024, rs1_h3_val == 8192, rs1_h2_val == -257
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000feff0400efff;  op2val:0xaaaaaaaafff90002
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x2000feff0400efff, 0xaaaaaaaafff90002, x3, 192, x8)

inst_41:
// rs1_h1_val == 512, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000aaaa0200fff8;  op2val:0x203fff0004efff
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xc000aaaa0200fff8, 0x203fff0004efff, x3, 200, x8)

inst_42:
// rs1_h1_val == 256, rs2_h1_val == -513, rs2_h0_val == 21845
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x80ff7f01007fff;  op2val:0x02ffbffdff5555
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x80ff7f01007fff, 0x02ffbffdff5555, x3, 208, x8)

inst_43:
// rs1_h1_val == 4, rs2_h2_val == 2048, rs2_h1_val == 32, rs1_h2_val == -2
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffe0004aaaa;  op2val:0x7fff080000200100
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x3ffffffe0004aaaa, 0x7fff080000200100, x3, 216, x8)

inst_44:
// rs1_h1_val == 2, rs1_h0_val == -8193
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc7fff0002dfff;  op2val:0xfdfffff9fff6efff
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfffc7fff0002dfff, 0xfdfffff9fff6efff, x3, 224, x8)

inst_45:
// rs1_h1_val == 0, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff000800000002;  op2val:0xffbfdffffff6fffb
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfdff000800000002, 0xffbfdffffff6fffb, x3, 232, x8)

inst_46:
// rs1_h0_val == -16385, rs2_h0_val == 16384, rs2_h1_val == -1, rs2_h2_val == 0
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff9fffebfff;  op2val:0xaaaa0000ffff4000
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xbffffff9fffebfff, 0xaaaa0000ffff4000, x3, 240, x8)

inst_47:
// rs1_h0_val == -1025, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffcfff6fbff;  op2val:0x2000bfff0003aaaa
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x3ffffffcfff6fbff, 0x2000bfff0003aaaa, x3, 248, x8)

inst_48:
// rs1_h0_val == -257, rs2_h0_val == -16385, rs2_h2_val == 4
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fffe0400feff;  op2val:0xfbff00040080bfff
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x02fffe0400feff, 0xfbff00040080bfff, x3, 256, x8)

inst_49:
// rs1_h0_val == -65, rs2_h0_val == 0
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000090007ffbf;  op2val:0x07fff900060000
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x8000090007ffbf, 0x07fff900060000, x3, 264, x8)

inst_50:
// rs1_h0_val == -17, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x55551000fbffffef;  op2val:0x100fff980000100
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x55551000fbffffef, 0x100fff980000100, x3, 272, x8)

inst_51:
// rs1_h0_val == -9, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6aaaa0800fff7;  op2val:0xdffffdff04000400
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfff6aaaa0800fff7, 0xdffffdff04000400, x3, 280, x8)

inst_52:
// rs1_h0_val == -5, rs1_h3_val == 4, rs2_h3_val == 1
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fffe0007fffb;  op2val:0x010000fff97fff
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x04fffe0007fffb, 0x010000fff97fff, x3, 288, x8)

inst_53:
// rs1_h0_val == -2, rs1_h2_val == -17
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffef7ffffffe;  op2val:0x100800000100400
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xffbfffef7ffffffe, 0x100800000100400, x3, 296, x8)

inst_54:
// rs1_h0_val == 4096, rs1_h1_val == -8193, rs1_h3_val == 16
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x10bfffdfff1000;  op2val:0xffbf0200fffa0005
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x10bfffdfff1000, 0xffbf0200fffa0005, x3, 304, x8)

inst_55:
// rs1_h0_val == 1024, rs1_h3_val == 0, rs1_h2_val == 1024
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffb0400;  op2val:0x5555ffbf00200100
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x000400fffb0400, 0x5555ffbf00200100, x3, 312, x8)

inst_56:
// rs1_h0_val == 512, rs2_h2_val == 32767
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x100020fffe0200;  op2val:0xfff87fffffffff7f
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x100020fffe0200, 0xfff87fffffffff7f, x3, 320, x8)

inst_57:
// rs1_h0_val == 256, rs1_h2_val == -2049, rs1_h1_val == -129
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcf7ffff7f0100;  op2val:0xfffb7fff04005555
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfffcf7ffff7f0100, 0xfffb7fff04005555, x3, 328, x8)

inst_58:
// rs1_h0_val == 32, rs1_h2_val == 8192, rs2_h0_val == -17
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff2000fffc0020;  op2val:0x5555dffffffaffef
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfdff2000fffc0020, 0x5555dffffffaffef, x3, 336, x8)

inst_59:
// rs1_h0_val == 16, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fff8ffff0010;  op2val:0xfefffffc00407fff
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfff9fff8ffff0010, 0xfefffffc00407fff, x3, 344, x8)

inst_60:
// rs1_h0_val == 8, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000008ffdf0008;  op2val:0x400fffe00063fff
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x20000008ffdf0008, 0x400fffe00063fff, x3, 352, x8)

inst_61:
// rs1_h0_val == 4, rs1_h3_val == -129
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f7fff01000004;  op2val:0xfff7080000040008
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xff7f7fff01000004, 0xfff7080000040008, x3, 360, x8)

inst_62:
// rs1_h0_val == 0, rs1_h2_val == -1
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffffffdf0000;  op2val:0x200aaaa0006ffff
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x02ffffffdf0000, 0x200aaaa0006ffff, x3, 368, x8)

inst_63:
// rs2_h1_val == 0, rs1_h2_val == 64
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0040fffbefff;  op2val:0x20ff7f0000fffe
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfffd0040fffbefff, 0x20ff7f0000fffe, x3, 376, x8)

inst_64:
// rs2_h0_val == -8193, rs2_h1_val == -4097
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff0007fffd;  op2val:0x200200efffdfff
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfffbffff0007fffd, 0x200200efffdfff, x3, 384, x8)

inst_65:
// rs2_h0_val == -2049, rs2_h1_val == -2, rs2_h2_val == 21845
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x06fff8fff90006;  op2val:0xdfff5555fffef7ff
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x06fff8fff90006, 0xdfff5555fffef7ff, x3, 392, x8)

inst_66:
// rs2_h0_val == -513, rs2_h2_val == 64, rs1_h2_val == -8193
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffdfff00063fff;  op2val:0x050040ffbffdff
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x7fffdfff00063fff, 0x050040ffbffdff, x3, 400, x8)

inst_67:
// rs2_h0_val == -9, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x031000aaaa0009;  op2val:0x0300075555fff7
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x031000aaaa0009, 0x0300075555fff7, x3, 408, x8)

inst_68:
// rs2_h0_val == -3, rs1_h1_val == -257
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000005feff0008;  op2val:0xfffdfffd0006fffd
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x20000005feff0008, 0xfffdfffd0006fffd, x3, 416, x8)

inst_69:
// rs2_h0_val == -32768, rs2_h3_val == 0
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff60004f7ffffbf;  op2val:0x00fff900058000
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfff60004f7ffffbf, 0x00fff900058000, x3, 424, x8)

inst_70:
// rs2_h0_val == 8192, rs2_h1_val == -1025, rs1_h1_val == -513, rs1_h2_val == 512
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0200fdff0010;  op2val:0xfffb0800fbff2000
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfffb0200fdff0010, 0xfffb0800fbff2000, x3, 432, x8)

inst_71:
// rs2_h0_val == 512, rs2_h2_val == -5, rs1_h2_val == -513
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fdfffffdfff6;  op2val:0x100fffb00070200
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x1000fdfffffdfff6, 0x100fffb00070200, x3, 440, x8)

inst_72:
// rs2_h0_val == 32, rs2_h2_val == 128
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9000400010001;  op2val:0xfffe008055550020
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfff9000400010001, 0xfffe008055550020, x3, 448, x8)

inst_73:
// rs1_h3_val == -21846, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaadffffffa0002;  op2val:0x7ffffbff0400efff
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xaaaadffffffa0002, 0x7ffffbff0400efff, x3, 456, x8)

inst_74:
// rs1_h3_val == -1025, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffb20007fff;  op2val:0xfffdffffc0000007
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfbfffffb20007fff, 0xfffdffffc0000007, x3, 464, x8)

inst_75:
// rs1_h3_val == -33, rs1_h2_val == 21845
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf55553fffbfff;  op2val:0xfffdfdff80000400
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xffdf55553fffbfff, 0xfffdfdff80000400, x3, 472, x8)

inst_76:
// rs2_h3_val == -1, rs2_h1_val == -8193
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x03020000800005;  op2val:0xffff0006dfff0100
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x03020000800005, 0xffff0006dfff0100, x3, 480, x8)

inst_77:
// rs1_h3_val == 1024, rs2_h2_val == -17
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x400aaaafffc5555;  op2val:0xfff9ffeffff7fbff
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x400aaaafffc5555, 0xfff9ffeffff7fbff, x3, 488, x8)

inst_78:
// rs2_h2_val == -4097, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffeffffffcfffd;  op2val:0x07effffff6fffb
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x7fffeffffffcfffd, 0x07effffff6fffb, x3, 496, x8)

inst_79:
// rs1_h3_val == 256, rs2_h2_val == 16384, rs2_h1_val == 4096
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fffb00100004;  op2val:0xc000400010000400
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x100fffb00100004, 0xc000400010000400, x3, 504, x8)

inst_80:
// rs2_h2_val == -2049, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff00050040fffd;  op2val:0xdffff7fffffc2000
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x7fff00050040fffd, 0xdffff7fffffc2000, x3, 512, x8)

inst_81:
// rs1_h3_val == 64, rs2_h2_val == -9
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x400400fffdfff9;  op2val:0xfbfffff708000040
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x400400fffdfff9, 0xfbfffff708000040, x3, 520, x8)

inst_82:
// rs1_h3_val == 32, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x20aaaafeff7fff;  op2val:0xc0000800fffcbfff
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x20aaaafeff7fff, 0xc0000800fffcbfff, x3, 528, x8)

inst_83:
// rs2_h2_val == -257, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffc00000070080;  op2val:0x20fefff7ff0010
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfbffc00000070080, 0x20fefff7ff0010, x3, 536, x8)

inst_84:
// rs1_h3_val == 8, rs2_h2_val == 16
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x08dfff4000aaaa;  op2val:0xfff6001004008000
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x08dfff4000aaaa, 0xfff6001004008000, x3, 544, x8)

inst_85:
// rs1_h3_val == 1, rs1_h2_val == 128
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0100800010fff7;  op2val:0xeffffffbdfff0002
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x0100800010fff7, 0xeffffffbdfff0002, x3, 552, x8)

inst_86:
// rs1_h3_val == -1, rs1_h2_val == 16384
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff4000fdff0009;  op2val:0x800fff600067fff
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xffff4000fdff0009, 0x800fff600067fff, x3, 560, x8)

inst_87:
// rs1_h2_val == -1025, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fbff00011000;  op2val:0xfff6004000200010
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfff7fbff00011000, 0xfff6004000200010, x3, 568, x8)

inst_88:
// rs2_h1_val == 512, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff700083ffff7ff;  op2val:0x4055550200ffdf
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfff700083ffff7ff, 0x4055550200ffdf, x3, 576, x8)

inst_89:
// rs2_h1_val == -16385, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fffc8000fbff;  op2val:0x10004000bffffff6
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x05fffc8000fbff, 0x10004000bffffff6, x3, 584, x8)

inst_90:
// rs1_h2_val == 256, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550100dffffbff;  op2val:0xdffffdff01000000
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x55550100dffffbff, 0xdffffdff01000000, x3, 592, x8)

inst_91:
// rs2_h1_val == -129, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0006f7ff5555;  op2val:0x40c000ff7ffeff
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfbff0006f7ff5555, 0x40c000ff7ffeff, x3, 600, x8)

inst_92:
// rs2_h1_val == -33, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0600080000ffef;  op2val:0xfbff0000ffdf0002
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x0600080000ffef, 0xfbff0000ffdf0002, x3, 608, x8)

inst_93:
// rs1_h2_val == 2, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0002fffffff6;  op2val:0xbffffff9fff80005
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfffd0002fffffff6, 0xbffffff9fff80005, x3, 616, x8)

inst_94:
// rs2_h1_val == -5, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x04000200020100;  op2val:0x2000ffbffffb0008
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x04000200020100, 0x2000ffbffffb0008, x3, 624, x8)

inst_95:
// rs1_h1_val == 21845, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000045555ffdf;  op2val:0xff7f080001000100
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x80000045555ffdf, 0xff7f080001000100, x3, 632, x8)

inst_96:
// rs2_h1_val == 8192, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff908002000;  op2val:0xfff8000720004000
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xffdffff908002000, 0xfff8000720004000, x3, 640, x8)

inst_97:
// rs2_h2_val == 32, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf4000fffeefff;  op2val:0x55550020ffef0005
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xffbf4000fffeefff, 0x55550020ffef0005, x3, 648, x8)

inst_98:
// rs2_h2_val == 8, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff1000fffc0009;  op2val:0xf7ff0008dfffffef
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xdfff1000fffc0009, 0xf7ff0008dfffffef, x3, 656, x8)

inst_99:
// rs1_h2_val == -3, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x07fffd0007dfff;  op2val:0xfff64000effffff8
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x07fffd0007dfff, 0xfff64000effffff8, x3, 664, x8)

inst_100:
// rs1_h1_val == -17, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x010001ffeffff7;  op2val:0xfff6fff7fffc4000
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x010001ffeffff7, 0xfff6fff7fffc4000, x3, 672, x8)

inst_101:
// rs1_h2_val == -32768, 
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0x408000bfffffef;  op2val:0x20040000200001
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0x408000bfffffef, 0x20040000200001, x3, 680, x8)

inst_102:
// rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h0_val == 16384, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 4, rs2_h1_val == -17, rs1_h3_val == -4097, rs2_h0_val == -33, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h3_val == -4097
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0004fff64000;  op2val:0xefffc000ffefffdf
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xefff0004fff64000, 0xefffc000ffefffdf, x3, 688, x8)

inst_103:
// rs2_h3_val == -17, rs1_h1_val == -3
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff1000fffdff7f;  op2val:0xffeffff90100ff7f
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xefff1000fffdff7f, 0xffeffff90100ff7f, x3, 696, x8)

inst_104:
// rs2_h3_val == 128, rs1_h1_val == -9, rs1_h2_val == 2048, rs2_h0_val == 1024, rs1_h3_val == -9
// opcode: cras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70800fff7fdff;  op2val:0x80020000020400
TEST_RR_OP(cras16, x31, x30, x29, 0x0000000000000000, 0xfff70800fff7fdff, 0x80020000020400, x3, 704, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 89*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
