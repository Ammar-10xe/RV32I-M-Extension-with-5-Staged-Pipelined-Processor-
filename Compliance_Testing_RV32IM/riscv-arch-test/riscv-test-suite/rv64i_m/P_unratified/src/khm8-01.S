
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the khm8 instruction of the RISC-V RV64PZicsr extension for the khm8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",khm8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x10,signature_x10_1)

inst_0:
// rs1 == rd != rs2, rs1==x7, rs2==x12, rd==x7, rs1_b0_val == -128, rs1_b5_val == -5, rs1_b7_val != rs2_b7_val, rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b6_val != rs2_b6_val, rs1_b5_val != rs2_b5_val, rs2_b3_val == 8, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b4_val != rs2_b4_val, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b3_val == rs2_b3_val, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b1_val != rs2_b1_val, rs2_b2_val == -1, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b3_val == 8, rs1_b2_val == -5, rs2_b7_val == 1, rs2_b6_val == 0
// opcode: khm8 ; op1:x7; op2:x12; dest:x7; op1val:0xf8fafbf808fb0580;  op2val:0x100c0f608ff0905
TEST_PKRR_OP(khm8, x7, x7, x12, 0x0000000000000000, 0xf8fafbf808fb0580, 0x100c0f608ff0905, x7, x10, 0, x6)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x13, rs2==x0, rd==x17, rs1_b7_val == rs2_b7_val, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b0_val == -2, rs1_b1_val < 0 and rs2_b1_val > 0, rs2_b5_val == 2, rs1_b6_val < 0 and rs2_b6_val < 0, rs1_b6_val == -9, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b1_val == -128, rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b3_val != rs2_b3_val, rs2_b4_val == 16, rs1_b4_val == 8, rs1_b3_val < 0 and rs2_b3_val < 0
// opcode: khm8 ; op1:x13; op2:x0; dest:x17; op1val:0xf6f7fc08f6c080fe;  op2val:0xf6f60210fc0606fa
TEST_PKRR_OP(khm8, x17, x13, x0, 0x0000000000000000, 0xf6f7fc08f6c080fe, 0xf6f60210fc0606fa, x13, x10, 16, x6)

inst_2:
// rs1 == rs2 != rd, rs1==x29, rs2==x29, rd==x14, rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b7_val == 2, rs1_b2_val == 0, rs1_b1_val < 0 and rs2_b1_val < 0, rs2_b5_val == 127, rs1_b6_val > 0 and rs2_b6_val < 0, rs2_b3_val == 64, rs1_b4_val == -86, rs1_b3_val == 1, rs1_b4_val < 0 and rs2_b4_val > 0, rs2_b7_val == -128, rs2_b4_val == 2
// opcode: khm8 ; op1:x29; op2:x29; dest:x14; op1val:0x205fcaa0100fcc0;  op2val:0x80f87f0240c0f903
TEST_PKRR_OP(khm8, x14, x29, x29, 0x0000000000000000, 0x205fcaa0100fcc0, 0x80f87f0240c0f903, x29, x10, 32, x6)

inst_3:
// rs1 == rs2 == rd, rs1==x23, rs2==x23, rd==x23, rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b6_val == -17, rs2_b5_val == 0, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b1_val == -3, rs1_b7_val == 85, rs1_b5_val == 85, rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b7_val == 32, rs1_b2_val == -128
// opcode: khm8 ; op1:x23; op2:x23; dest:x23; op1val:0x55ef5507fc80f93f;  op2val:0x20f600050906fdf8
TEST_PKRR_OP(khm8, x23, x23, x23, 0x0000000000000000, 0x55ef5507fc80f93f, 0x20f600050906fdf8, x23, x10, 48, x6)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x8, rd==x8, rs1_b6_val == rs2_b6_val, rs1_b0_val == -3, rs2_b6_val == 85, rs2_b3_val == -17, rs1_b6_val == 85, rs1_b1_val == 2, rs2_b1_val == 85, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b5_val == rs2_b5_val, rs2_b0_val == 1, rs1_b7_val == -86, rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b4_val == -33, rs2_b4_val == 32, rs1_b2_val == -3, rs1_b3_val > 0 and rs2_b3_val < 0
// opcode: khm8 ; op1:x5; op2:x8; dest:x8; op1val:0xaa5505df01fd02fd;  op2val:0x3550520ef095501
TEST_PKRR_OP(khm8, x8, x5, x8, 0x0000000000000000, 0xaa5505df01fd02fd, 0x3550520ef095501, x5, x10, 64, x6)

inst_5:
// rs1==x11, rs2==x18, rd==x30, rs1_b6_val < 0 and rs2_b6_val > 0, rs2_b0_val == -33, rs1_b2_val == 32, rs1_b2_val > 0 and rs2_b2_val < 0, rs2_b3_val == -65, rs2_b1_val == -2, rs2_b6_val == 8, rs1_b4_val > 0 and rs2_b4_val < 0, rs1_b6_val == -1, rs1_b7_val == -128, rs2_b5_val == -65, rs2_b2_val == -3
// opcode: khm8 ; op1:x11; op2:x18; dest:x30; op1val:0x80fff6080620fcf9;  op2val:0x908bff6bffdfedf
TEST_PKRR_OP(khm8, x30, x11, x18, 0x0000000000000000, 0x80fff6080620fcf9, 0x908bff6bffdfedf, x11, x10, 80, x6)

inst_6:
// rs1==x26, rs2==x15, rd==x22, rs1_b5_val > 0 and rs2_b5_val < 0, rs1_b5_val == 64, rs1_b1_val == -9, rs1_b0_val == -1, rs2_b3_val == 2, rs2_b7_val == 85, rs1_b3_val == -1, rs1_b7_val == -17
// opcode: khm8 ; op1:x26; op2:x15; dest:x22; op1val:0xeffa4009ff00f7ff;  op2val:0x5507f8f80207033f
TEST_PKRR_OP(khm8, x22, x26, x15, 0x0000000000000000, 0xeffa4009ff00f7ff, 0x5507f8f80207033f, x26, x10, 96, x6)

inst_7:
// rs1==x14, rs2==x21, rd==x20, rs1_b4_val == rs2_b4_val, rs1_b2_val == rs2_b2_val, rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b2_val == 1, rs1_b2_val == 1, rs1_b0_val == 8, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b6_val == 64, rs2_b7_val == 127, rs2_b1_val == 32
// opcode: khm8 ; op1:x14; op2:x21; dest:x20; op1val:0x540f9f607013f08;  op2val:0x7f08f6f606012006
TEST_PKRR_OP(khm8, x20, x14, x21, 0x0000000000000000, 0x540f9f607013f08, 0x7f08f6f606012006, x14, x10, 112, x6)

inst_8:
// rs1==x2, rs2==x5, rd==x0, rs1_b1_val == rs2_b1_val, rs2_b3_val == -86, rs2_b5_val == 64, rs2_b2_val == 2, rs1_b5_val == 32, rs1_b4_val == 16, rs1_b7_val == -2, rs1_b0_val == -86, rs2_b0_val == 85
// opcode: khm8 ; op1:x2; op2:x5; dest:x0; op1val:0xfe0520100500c0aa;  op2val:0x7554005aa02c055
TEST_PKRR_OP(khm8, x0, x2, x5, 0x0000000000000000, 0xfe0520100500c0aa, 0x7554005aa02c055, x2, x10, 128, x6)

inst_9:
// rs1==x8, rs2==x27, rd==x16, rs1_b1_val > 0 and rs2_b1_val < 0, rs2_b6_val == 64, rs2_b2_val == -33, rs1_b3_val == 85, rs1_b2_val == 2
// opcode: khm8 ; op1:x8; op2:x27; dest:x16; op1val:0x9053ff955023f3f;  op2val:0x20400307bfdffcdf
TEST_PKRR_OP(khm8, x16, x8, x27, 0x0000000000000000, 0x9053ff955023f3f, 0x20400307bfdffcdf, x8, x10, 144, x6)

inst_10:
// rs1==x27, rs2==x28, rd==x13, rs1_b0_val == rs2_b0_val, rs1_b0_val == 127, rs1_b5_val == -1, rs2_b6_val == -128, rs1_b4_val == -65, rs2_b7_val == -86, rs2_b2_val == -9, rs1_b7_val == 64, rs2_b0_val == 127
// opcode: khm8 ; op1:x27; op2:x28; dest:x13; op1val:0x40ffffbffa02027f;  op2val:0xaa800706faf7077f
TEST_PKRR_OP(khm8, x13, x27, x28, 0x0000000000000000, 0x40ffffbffa02027f, 0xaa800706faf7077f, x27, x10, 160, x6)

inst_11:
// rs1==x1, rs2==x25, rd==x29, rs2_b7_val == -65, rs2_b5_val == -3, rs2_b3_val == 127, rs2_b2_val == -17, rs1_b5_val == 127, rs2_b4_val == 4
// opcode: khm8 ; op1:x1; op2:x25; dest:x29; op1val:0x2f77fc0f8c00503;  op2val:0xbfc0fd047fef0507
TEST_PKRR_OP(khm8, x29, x1, x25, 0x0000000000000000, 0x2f77fc0f8c00503, 0xbfc0fd047fef0507, x1, x10, 176, x6)

inst_12:
// rs1==x30, rs2==x24, rd==x12, rs2_b7_val == -33, rs1_b5_val == -2, rs1_b0_val == -17, rs2_b0_val == -128, rs2_b1_val == -33, rs2_b4_val == -86, rs1_b7_val == 127, rs2_b6_val == 4, rs1_b6_val == 8, rs2_b2_val == 127
// opcode: khm8 ; op1:x30; op2:x24; dest:x12; op1val:0x7f08fedff6f909ef;  op2val:0xdf04c0aa097fdf80
TEST_PKRR_OP(khm8, x12, x30, x24, 0x0000000000000000, 0x7f08fedff6f909ef, 0xdf04c0aa097fdf80, x30, x10, 192, x6)

inst_13:
// rs1==x15, rs2==x4, rd==x28, rs2_b7_val == -17, rs1_b2_val == 16, rs1_b5_val == 16, rs1_b3_val == -128, rs2_b6_val == -3, rs1_b6_val == 32, rs1_b7_val == -33, rs1_b1_val == 0
// opcode: khm8 ; op1:x15; op2:x4; dest:x28; op1val:0xdf2010f6801000fc;  op2val:0xeffdf9aa0905f8f8
TEST_PKRR_OP(khm8, x28, x15, x4, 0x0000000000000000, 0xdf2010f6801000fc, 0xeffdf9aa0905f8f8, x15, x10, 208, x6)

inst_14:
// rs1==x28, rs2==x3, rd==x24, rs2_b7_val == -9, rs2_b5_val == -5, rs2_b2_val == 4, rs1_b3_val == -17, rs1_b6_val == -65, rs1_b5_val == 4, rs2_b1_val == -9, rs2_b4_val == 64
// opcode: khm8 ; op1:x28; op2:x3; dest:x24; op1val:0x7bf0408efc0c080;  op2val:0xf740fb40aa04f701
TEST_PKRR_OP(khm8, x24, x28, x3, 0x0000000000000000, 0x7bf0408efc0c080, 0xf740fb40aa04f701, x28, x10, 224, x6)

inst_15:
// rs1==x9, rs2==x6, rd==x27, rs2_b7_val == -5, rs2_b2_val == -65, rs2_b0_val == 16, rs2_b4_val == -5, rs1_b2_val == -17
// opcode: khm8 ; op1:x9; op2:x6; dest:x27; op1val:0x9030303fcef8009;  op2val:0xfb07fcfb7fbf0710
TEST_PKRR_OP(khm8, x27, x9, x6, 0x0000000000000000, 0x9030303fcef8009, 0xfb07fcfb7fbf0710, x9, x10, 240, x5)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_16:
// rs1==x12, rs2==x31, rd==x4, rs2_b7_val == -3, rs2_b3_val == -3, rs1_b4_val == 4, rs2_b2_val == -5, rs2_b0_val == -86, rs2_b4_val == 1, rs2_b5_val == -9
// opcode: khm8 ; op1:x12; op2:x31; dest:x4; op1val:0xf903fa0406ef00f8;  op2val:0xfdfcf701fdfbf8aa
TEST_PKRR_OP(khm8, x4, x12, x31, 0x0000000000000000, 0xf903fa0406ef00f8, 0xfdfcf701fdfbf8aa, x12, x8, 0, x5)

inst_17:
// rs1==x4, rs2==x30, rd==x10, rs2_b7_val == -2, rs1_b2_val == 4, rs2_b5_val == 4, rs1_b4_val == -17, rs2_b4_val == -2, rs2_b2_val == -128
// opcode: khm8 ; op1:x4; op2:x30; dest:x10; op1val:0x609feef0104faf9;  op2val:0xfe8004fe4080f706
TEST_PKRR_OP(khm8, x10, x4, x30, 0x0000000000000000, 0x609feef0104faf9, 0xfe8004fe4080f706, x4, x8, 16, x5)

inst_18:
// rs1==x16, rs2==x7, rd==x9, rs2_b7_val == 64, rs2_b1_val == -86, rs1_b3_val == -3, rs1_b0_val == 4, rs1_b7_val == -5, rs1_b5_val == -86
// opcode: khm8 ; op1:x16; op2:x7; dest:x9; op1val:0xfbf7aafafd090604;  op2val:0x4008073ff8f8aa10
TEST_PKRR_OP(khm8, x9, x16, x7, 0x0000000000000000, 0xfbf7aafafd090604, 0x4008073ff8f8aa10, x16, x8, 32, x5)

inst_19:
// rs1==x6, rs2==x17, rd==x1, rs2_b7_val == 16, rs1_b3_val == -65, rs1_b6_val == -86, rs2_b6_val == -2, rs2_b0_val == 0, rs1_b1_val == 64, rs2_b2_val == -86, rs2_b1_val == -1
// opcode: khm8 ; op1:x6; op2:x17; dest:x1; op1val:0xf6aaaa04bffb4003;  op2val:0x10fe0505f6aaff00
TEST_PKRR_OP(khm8, x1, x6, x17, 0x0000000000000000, 0xf6aaaa04bffb4003, 0x10fe0505f6aaff00, x6, x8, 48, x5)

inst_20:
// rs1==x20, rs2==x19, rd==x11, rs2_b7_val == 8, rs1_b1_val == 4, rs2_b1_val == -128, rs2_b0_val == 4, rs2_b2_val == 0
// opcode: khm8 ; op1:x20; op2:x19; dest:x11; op1val:0x7fffaaf9088004f9;  op2val:0x80805f6f6008004
TEST_PKRR_OP(khm8, x11, x20, x19, 0x0000000000000000, 0x7fffaaf9088004f9, 0x80805f6f6008004, x20, x8, 64, x5)

inst_21:
// rs1==x3, rs2==x13, rd==x25, rs2_b7_val == 4, rs2_b3_val == 32, rs1_b0_val == 0, rs2_b4_val == -3, rs1_b2_val == -33, rs1_b1_val == 1, rs1_b5_val == -17
// opcode: khm8 ; op1:x3; op2:x13; dest:x25; op1val:0xdf40eff908df0100;  op2val:0x4fcf8fd2006f7fc
TEST_PKRR_OP(khm8, x25, x3, x13, 0x0000000000000000, 0xdf40eff908df0100, 0x4fcf8fd2006f7fc, x3, x8, 80, x5)

inst_22:
// rs1==x0, rs2==x26, rd==x2, rs2_b7_val == 2, rs1_b4_val == 64, rs1_b0_val == -65
// opcode: khm8 ; op1:x0; op2:x26; dest:x2; op1val:0xaa0303400503fcbf;  op2val:0x24007aaaa7ff903
TEST_PKRR_OP(khm8, x2, x0, x26, 0x0000000000000000, 0xaa0303400503fcbf, 0x24007aaaa7ff903, x0, x8, 96, x5)

inst_23:
// rs1==x24, rs2==x20, rd==x31, rs2_b7_val == 0, rs1_b3_val == 2
// opcode: khm8 ; op1:x24; op2:x20; dest:x31; op1val:0x40403fdf02ef05f8;  op2val:0x55043ff8c0f701
TEST_PKRR_OP(khm8, x31, x24, x20, 0x0000000000000000, 0x40403fdf02ef05f8, 0x55043ff8c0f701, x24, x8, 112, x5)

inst_24:
// rs1==x31, rs2==x10, rd==x18, rs2_b7_val == -1, rs1_b2_val == -65, rs1_b0_val == 16, rs2_b6_val == 16, rs1_b4_val == -128
// opcode: khm8 ; op1:x31; op2:x10; dest:x18; op1val:0xf6fcaa80fdbffa10;  op2val:0xff107f3f06f907df
TEST_PKRR_OP(khm8, x18, x31, x10, 0x0000000000000000, 0xf6fcaa80fdbffa10, 0xff107f3f06f907df, x31, x8, 128, x5)

inst_25:
// rs1==x18, rs2==x2, rd==x21, rs2_b6_val == -86, rs1_b0_val == 32, rs2_b3_val == 1, rs1_b3_val == 0, rs2_b1_val == -17
// opcode: khm8 ; op1:x18; op2:x2; dest:x21; op1val:0x3fcfb0800040120;  op2val:0x55aa03f901fceff6
TEST_PKRR_OP(khm8, x21, x18, x2, 0x0000000000000000, 0x3fcfb0800040120, 0x55aa03f901fceff6, x18, x8, 144, x5)

inst_26:
// rs1==x25, rs2==x14, rd==x3, rs2_b6_val == 127, rs1_b3_val == -86, rs2_b3_val == 85, rs2_b2_val == 85, rs2_b5_val == 85, rs1_b2_val == -2, rs1_b5_val == -9
// opcode: khm8 ; op1:x25; op2:x14; dest:x3; op1val:0x55f8f7aaaafefcbf;  op2val:0x47f55fe5555f755
TEST_PKRR_OP(khm8, x3, x25, x14, 0x0000000000000000, 0x55f8f7aaaafefcbf, 0x47f55fe5555f755, x25, x8, 160, x5)

inst_27:
// rs1==x10, rs2==x1, rd==x6, rs2_b6_val == -65, rs1_b1_val == 16, rs2_b1_val == 1, rs2_b3_val == 16
// opcode: khm8 ; op1:x10; op2:x1; dest:x6; op1val:0xaaf9fff880031009;  op2val:0x80bf0206100901c0
TEST_PKRR_OP(khm8, x6, x10, x1, 0x0000000000000000, 0xaaf9fff880031009, 0x80bf0206100901c0, x10, x8, 176, x5)

inst_28:
// rs1==x22, rs2==x11, rd==x19, rs2_b6_val == -33, rs1_b0_val == -33, rs1_b5_val == 8, rs1_b1_val == -5, rs1_b2_val == 85, rs1_b4_val == 0
// opcode: khm8 ; op1:x22; op2:x11; dest:x19; op1val:0x3ff80800ff55fbdf;  op2val:0xbfdff603100307f8
TEST_PKRR_OP(khm8, x19, x22, x11, 0x0000000000000000, 0x3ff80800ff55fbdf, 0xbfdff603100307f8, x22, x8, 192, x5)

inst_29:
// rs1==x21, rs2==x22, rd==x26, rs2_b6_val == -17, rs2_b0_val == 8, rs1_b0_val == 64
// opcode: khm8 ; op1:x21; op2:x22; dest:x26; op1val:0x55ef09bf5505fa40;  op2val:0xdfef04fa55bff708
TEST_PKRR_OP(khm8, x26, x21, x22, 0x0000000000000000, 0x55ef09bf5505fa40, 0xdfef04fa55bff708, x21, x8, 208, x5)

inst_30:
// rs1==x17, rs2==x9, rd==x15, rs2_b6_val == -9, rs2_b3_val == 0, rs1_b1_val == 32
// opcode: khm8 ; op1:x17; op2:x9; dest:x15; op1val:0x4006f808aa0520ef;  op2val:0x3f7fbaa00fc80df
TEST_PKRR_OP(khm8, x15, x17, x9, 0x0000000000000000, 0x4006f808aa0520ef, 0x3f7fbaa00fc80df, x17, x8, 224, x5)

inst_31:
// rs1==x19, rs2==x16, rd==x5, rs1_b5_val == -3, rs1_b3_val == -2, rs1_b6_val == -3, rs2_b4_val == 0
// opcode: khm8 ; op1:x19; op2:x16; dest:x5; op1val:0xf6fdfd10fe0305fe;  op2val:0xfa0900000809c07f
TEST_PKRR_OP(khm8, x5, x19, x16, 0x0000000000000000, 0xf6fdfd10fe0305fe, 0xfa0900000809c07f, x19, x8, 240, x2)

inst_32:
// rs1_b5_val == -128, rs2_b3_val == -9, rs1_b6_val == -2, rs2_b4_val == -17, rs1_b4_val == -9, rs1_b7_val == -65, rs2_b1_val == 0
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xbffe80f707f9f700;  op2val:0xfaef06eff7f600c0
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xbffe80f707f9f700, 0xfaef06eff7f600c0, x30, x8, 256, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs1_b5_val == 2, rs1_b3_val == 127, rs2_b3_val == -1, rs1_b6_val == 4, rs1_b4_val == 1
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f0402017ff607ff;  op2val:0x8f9f601fff80307
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x7f0402017ff607ff, 0x8f9f601fff80307, x30, x1, 0, x2)

inst_34:
// rs1_b5_val == 1, rs1_b0_val == -5, rs1_b7_val == 1, rs2_b6_val == -5, rs2_b0_val == -1
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1fa01eff801fafb;  op2val:0xf8fbf9fe06fcf9ff
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x1fa01eff801fafb, 0xf8fbf9fe06fcf9ff, x30, x1, 16, x2)

inst_35:
// rs1_b5_val == 0, rs1_b2_val == -1, rs2_b0_val == -5, rs1_b6_val == -5
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x80fb00fa05ff03ff;  op2val:0xc0fd55fe000101fb
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x80fb00fa05ff03ff, 0xc0fd55fe000101fb, x30, x1, 32, x2)

inst_36:
// rs1_b4_val == 85, rs2_b5_val == -86
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0955ff0503fd;  op2val:0xffdfaac0fd550109
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x7fff0955ff0503fd, 0xffdfaac0fd550109, x30, x1, 48, x2)

inst_37:
// rs1_b4_val == 127, rs2_b0_val == -17, rs2_b2_val == 8, rs2_b4_val == 85, rs1_b1_val == -3, rs1_b2_val == -86
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x6ffff7f3faafd04;  op2val:0x40f80255fa0805ef
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x6ffff7f3faafd04, 0x40f80255fa0805ef, x30, x1, 64, x2)

inst_38:
// rs1_b4_val == -5, rs2_b6_val == 32, rs1_b1_val == -1, rs2_b5_val == -33
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffa55fbc009fff8;  op2val:0x320dffbf6faf606
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x7ffa55fbc009fff8, 0x320dffbf6faf606, x30, x1, 80, x2)

inst_39:
// rs1_b4_val == -3, rs1_b0_val == 1, rs2_b6_val == 2
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc00780fd02800201;  op2val:0x102f9feaabffcfa
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xc00780fd02800201, 0x102f9feaabffcfa, x30, x1, 96, x2)

inst_40:
// rs1_b4_val == -2, rs1_b3_val == 64, rs1_b1_val == 8
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x5fafafe4002083f;  op2val:0xf65506fd7f092004
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x5fafafe4002083f, 0xf65506fd7f092004, x30, x1, 112, x2)

inst_41:
// rs1_b4_val == 32, rs2_b0_val == 32, rs2_b5_val == -1, rs1_b0_val == 85
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x400900207fefc055;  op2val:0x3ffeff01aadff820
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x400900207fefc055, 0x3ffeff01aadff820, x30, x1, 128, x2)

inst_42:
// rs1_b4_val == 2, rs1_b1_val == 85, rs2_b4_val == 8, rs1_b7_val == 16, rs1_b6_val == -128
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x10805502bfbf55ef;  op2val:0x955df08ff02fddf
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x10805502bfbf55ef, 0x955df08ff02fddf, x30, x1, 144, x2)

inst_43:
// rs1_b4_val == -1, rs1_b2_val == 8, rs1_b7_val == 32, rs2_b2_val == -2
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x20c006ff55080240;  op2val:0xef55f9203ffef6ff
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x20c006ff55080240, 0xef55f9203ffef6ff, x30, x1, 160, x2)

inst_44:
// rs1_b3_val == -33, rs1_b1_val == -2, rs1_b0_val == 2
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1005f640dff8fe02;  op2val:0x40fa04aaf800dffa
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x1005f640dff8fe02, 0x40fa04aaf800dffa, x30, x1, 176, x2)

inst_45:
// rs1_b3_val == -9, rs2_b0_val == -2
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x10310c0f71002ff;  op2val:0xfbf6fbaaf6fcf8fe
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x10310c0f71002ff, 0xfbf6fbaaf6fcf8fe, x30, x1, 192, x2)

inst_46:
// rs1_b3_val == -5, rs2_b2_val == 64, rs2_b5_val == -128, rs2_b4_val == 127
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0aa01aafbf6fafe;  op2val:0xf9f8807faa40fc7f
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xc0aa01aafbf6fafe, 0xf9f8807faa40fc7f, x30, x1, 208, x2)

inst_47:
// rs2_b4_val == -1, rs2_b5_val == -2, rs1_b2_val == -9
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfafdc020c0f72003;  op2val:0xc0dffeff010707f8
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xfafdc020c0f72003, 0xc0dffeff010707f8, x30, x1, 224, x2)

inst_48:
// rs2_b3_val == -33, rs1_b7_val == -9, rs1_b3_val == 16, rs1_b2_val == 127
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7f83ffc107ff909;  op2val:0x407f05fadffd55fc
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xf7f83ffc107ff909, 0x407f05fadffd55fc, x30, x1, 240, x2)

inst_49:
// rs2_b3_val == -5, rs1_b2_val == 64, rs2_b2_val == 32, rs1_b6_val == 16, rs2_b6_val == 1, rs2_b1_val == 4
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x80107ff8f9405501;  op2val:0x8001f701fb2004f9
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x80107ff8f9405501, 0x8001f701fb2004f9, x30, x1, 256, x2)

inst_50:
// rs2_b3_val == -2, rs1_b1_val == -65, rs2_b1_val == 16, rs2_b5_val == 8
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x20f7fcf9ff40bfef;  op2val:0x8f608fffe3f1080
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x20f7fcf9ff40bfef, 0x8f608fffe3f1080, x30, x1, 272, x2)

inst_51:
// rs2_b3_val == -128, rs1_b7_val == 4
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x40406fcfb063ffd;  op2val:0x604bf0780fb01fe
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x40406fcfb063ffd, 0x604bf0780fb01fe, x30, x1, 288, x2)

inst_52:
// rs2_b3_val == 4, rs2_b1_val == 2, rs2_b2_val == 16, rs1_b1_val == 127, rs1_b7_val == -3
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd052005aaf67f10;  op2val:0xaaf6f7ff04100207
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xfd052005aaf67f10, 0xaaf6f7ff04100207, x30, x1, 304, x2)

inst_53:
// rs2_b1_val == 127, rs1_b7_val == 0
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x20ef8007105509;  op2val:0x20df40043f077ffa
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x20ef8007105509, 0x20df40043f077ffa, x30, x1, 320, x2)

inst_54:
// rs2_b1_val == -65, rs2_b0_val == -65
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfaf7f8bfc0ff8001;  op2val:0x7c03f03047fbfbf
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xfaf7f8bfc0ff8001, 0x7c03f03047fbfbf, x30, x1, 336, x2)

inst_55:
// rs1_b3_val == 32, rs2_b0_val == 64, rs1_b6_val == 2
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf902000120f80355;  op2val:0xbfc0f655200640
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xf902000120f80355, 0xbfc0f655200640, x30, x1, 352, x2)

inst_56:
// rs2_b0_val == -9, rs1_b3_val == 4, rs1_b0_val == -9
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x8006fff904febff7;  op2val:0x605fc05bf7faaf7
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x8006fff904febff7, 0x605fc05bf7faaf7, x30, x1, 368, x2)

inst_57:
// rs2_b0_val == -3, rs2_b4_val == -33, rs2_b1_val == 64
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x1f9fcff3f200306;  op2val:0xf90808dfff0540fd
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x1f9fcff3f200306, 0xf90808dfff0540fd, x30, x1, 384, x2)

inst_58:
// rs1_b1_val == -86, 
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x5bff7f6fc55aafa;  op2val:0x10fcf90609200300
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x5bff7f6fc55aafa, 0x10fcf90609200300, x30, x1, 400, x2)

inst_59:
// rs1_b1_val == -33, rs1_b5_val == -65
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf10bff9fc01df07;  op2val:0xf9fc071055207faa
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xdf10bff9fc01df07, 0xf9fc071055207faa, x30, x1, 416, x2)

inst_60:
// rs2_b0_val == 2, 
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x5fa07f708c0c0f7;  op2val:0xf6bff9faf8070002
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x5fa07f708c0c0f7, 0xf6bff9faf8070002, x30, x1, 432, x2)

inst_61:
// rs1_b1_val == -17, rs2_b6_val == -1, rs1_b7_val == 8
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x8f8f97f7f06ef80;  op2val:0x5ffdf08fa08fef8
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x8f8f97f7f06ef80, 0x5ffdf08fa08fef8, x30, x1, 448, x2)

inst_62:
// rs2_b4_val == -128, 
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfcbffa0955094009;  op2val:0x1bfc080aa043ff7
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xfcbffa0955094009, 0x1bfc080aa043ff7, x30, x1, 464, x2)

inst_63:
// rs1_b7_val == -1, 
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xff100000fc7fff10;  op2val:0x3dff620effcfc09
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xff100000fc7fff10, 0x3dff620effcfc09, x30, x1, 480, x2)

inst_64:
// rs2_b5_val == 32, 
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf10f7f7f70207fc;  op2val:0xfefe2080fc03aabf
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xbf10f7f7f70207fc, 0xfefe2080fc03aabf, x30, x1, 496, x2)

inst_65:
// rs2_b5_val == 16, 
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf804ffdffe4080fc;  op2val:0xc02010fb04050700
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xf804ffdffe4080fc, 0xc02010fb04050700, x30, x1, 512, x2)

inst_66:
// rs1_b6_val == 127, 
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf77ff6fafffe407f;  op2val:0xaa030804f755bf40
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xf77ff6fafffe407f, 0xaa030804f755bf40, x30, x1, 528, x2)

inst_67:
// rs1_b6_val == -33, 
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x40df03fcdfc0aa00;  op2val:0xfc037f000080bf00
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x40df03fcdfc0aa00, 0xfc037f000080bf00, x30, x1, 544, x2)

inst_68:
// rs2_b5_val == 1, 
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x3401009f6bffac0;  op2val:0x18001200005fefa
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x3401009f6bffac0, 0x18001200005fefa, x30, x1, 560, x2)

inst_69:
// rs2_b1_val == -5, 
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x2feaa2008c0fc08;  op2val:0xfafb5505bf40fb02
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x2feaa2008c0fc08, 0xfafb5505bf40fb02, x30, x1, 576, x2)

inst_70:
// rs2_b4_val == -65, rs1_b6_val == 0
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x00fef780f75502;  op2val:0x550310bffbdfbff9
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x00fef780f75502, 0x550310bffbdfbff9, x30, x1, 592, x2)

inst_71:
// rs2_b4_val == -9, 
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xff3ff93f0640fe20;  op2val:0x60504f705f70610
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xff3ff93f0640fe20, 0x60504f705f70610, x30, x1, 608, x2)

inst_72:
// rs2_b5_val == -17, 
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa05fefcef08f9ff;  op2val:0x109effc55094000
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xaa05fefcef08f9ff, 0x109effc55094000, x30, x1, 624, x2)

inst_73:
// rs1_b5_val == -33, 
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x5ffdfbf037f1006;  op2val:0x7ff6fbfbfdfac0f8
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x5ffdfbf037f1006, 0x7ff6fbfbfdfac0f8, x30, x1, 640, x2)

inst_74:
// rs1_b6_val == 1, 
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x55017f013faaf7f6;  op2val:0x5fb7ffe05fdf700
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x55017f013faaf7f6, 0x5fb7ffe05fdf700, x30, x1, 656, x2)

inst_75:
// rs2_b1_val == 8, 
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8aa02bf02f602f6;  op2val:0x50520bff6ef0840
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xf8aa02bf02f602f6, 0x50520bff6ef0840, x30, x1, 672, x2)

inst_76:
// rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b7_val == 2, rs1_b2_val == 0, rs1_b1_val < 0 and rs2_b1_val < 0, rs2_b5_val == 127, rs1_b6_val > 0 and rs2_b6_val < 0, rs2_b3_val == 64, rs1_b4_val == -86, rs1_b3_val == 1, rs1_b4_val < 0 and rs2_b4_val > 0, rs2_b7_val == -128, rs2_b4_val == 2
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0x205fcaa0100fcc0;  op2val:0x80f87f0240c0f903
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0x205fcaa0100fcc0, 0x80f87f0240c0f903, x30, x1, 688, x2)

inst_77:
// rs1_b1_val == rs2_b1_val, rs2_b3_val == -86, rs2_b5_val == 64, rs2_b2_val == 2, rs1_b5_val == 32, rs1_b4_val == 16, rs1_b7_val == -2, rs1_b0_val == -86, rs2_b0_val == 85
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe0520100500c0aa;  op2val:0x7554005aa02c055
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xfe0520100500c0aa, 0x7554005aa02c055, x30, x1, 704, x2)

inst_78:
// rs2_b7_val == 2, rs1_b4_val == 64, rs1_b0_val == -65
// opcode: khm8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa0303400503fcbf;  op2val:0x24007aaaa7ff903
TEST_PKRR_OP(khm8, x31, x30, x29, 0x0000000000000000, 0xaa0303400503fcbf, 0x24007aaaa7ff903, x30, x1, 720, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x8_0:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 92*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
