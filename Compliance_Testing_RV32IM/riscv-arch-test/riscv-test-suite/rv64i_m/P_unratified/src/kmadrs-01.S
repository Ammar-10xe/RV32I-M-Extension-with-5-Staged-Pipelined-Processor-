
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmadrs instruction of the RISC-V RV64PZicsr extension for the kmadrs covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmadrs)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rd != rs2, rs1==x26, rs2==x24, rd==x26, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == -4097, rs1_h1_val != rs2_h1_val, rs2_h2_val == -2, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs2_h3_val == 128, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 32, rs1_h1_val == -17
// opcode: kmadrs ; op1:x26; op2:x24; dest:x26; op1val:0x07fffaffef8000;  op2val:0x80fffe0020efff
TEST_PKRR_OP(kmadrs, x26, x26, x24, 0x0000000000000000, 0x07fffaffef8000, 0x80fffe0020efff, x26, x3, 0, x9)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x18, rs2==x6, rd==x21, rs1_h3_val == rs2_h3_val, rs1_h0_val == -33, rs2_h0_val == 8, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h1_val == -17, rs2_h3_val == 2048, rs1_h1_val == 16, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h2_val == -2, rs1_h3_val == 2048
// opcode: kmadrs ; op1:x18; op2:x6; dest:x21; op1val:0x800fffe0010ffdf;  op2val:0x8000006ffef0008
TEST_PKRR_OP(kmadrs, x21, x18, x6, 0x0000000000000000, 0x800fffe0010ffdf, 0x8000006ffef0008, x18, x3, 16, x9)

inst_2:
// rs1 == rs2 != rd, rs1==x10, rs2==x10, rd==x5, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h1_val == -5, rs2_h1_val == -16385, rs2_h0_val == -1, rs2_h3_val == 8192, rs1_h0_val == 64, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == 2048, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: kmadrs ; op1:x10; op2:x10; dest:x5; op1val:0xfff6fffcfffb0040;  op2val:0x20000800bfffffff
TEST_PKRR_OP(kmadrs, x5, x10, x10, 0x0000000000000000, 0xfff6fffcfffb0040, 0x20000800bfffffff, x10, x3, 32, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h3_val == -21846, rs1_h0_val == 1, rs2_h1_val == 4096, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == -21846, rs1_h2_val == -32768
// opcode: kmadrs ; op1:x7; op2:x7; dest:x7; op1val:0xaaaa8000fff60001;  op2val:0xaaaac00010000005
TEST_PKRR_OP(kmadrs, x7, x7, x7, 0x0000000000000000, 0xaaaa8000fff60001, 0xaaaac00010000005, x7, x3, 48, x9)

inst_4:
// rs2 == rd != rs1, rs1==x4, rs2==x8, rd==x8, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h3_val == -65, rs1_h3_val == 32, rs1_h0_val == 2048, rs2_h0_val == -1025, rs1_h2_val == 0, rs1_h1_val == 8, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 1024
// opcode: kmadrs ; op1:x4; op2:x8; dest:x8; op1val:0x20000000080800;  op2val:0xffbf00060400fbff
TEST_PKRR_OP(kmadrs, x8, x4, x8, 0x0000000000000000, 0x20000000080800, 0xffbf00060400fbff, x4, x3, 64, x9)

inst_5:
// rs1==x14, rs2==x17, rd==x0, rs1_h2_val == rs2_h2_val, rs1_h0_val == -65, rs1_h3_val == 256, rs2_h0_val == -32768
// opcode: kmadrs ; op1:x14; op2:x17; dest:x0; op1val:0x100c000fffcffbf;  op2val:0xc000c00004008000
TEST_PKRR_OP(kmadrs, x0, x14, x17, 0x0000000000000000, 0x100c000fffcffbf, 0xc000c00004008000, x14, x3, 80, x9)

inst_6:
// rs1==x29, rs2==x5, rd==x11, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h2_val == -16385, rs1_h1_val == 8192, rs1_h0_val == -3, rs2_h0_val == -16385, rs2_h1_val == -129, rs2_h3_val == -16385
// opcode: kmadrs ; op1:x29; op2:x5; dest:x11; op1val:0xaaaa00072000fffd;  op2val:0xbfffbfffff7fbfff
TEST_PKRR_OP(kmadrs, x11, x29, x5, 0x0000000000000000, 0xaaaa00072000fffd, 0xbfffbfffff7fbfff, x29, x3, 96, x9)

inst_7:
// rs1==x0, rs2==x15, rd==x20, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == 21845, rs1_h0_val == -9, rs1_h2_val == 32, rs2_h3_val == 16, rs2_h2_val == 1
// opcode: kmadrs ; op1:x0; op2:x15; dest:x20; op1val:0x0600200009fff7;  op2val:0x10000155550006
TEST_PKRR_OP(kmadrs, x20, x0, x15, 0x0000000000000000, 0x0600200009fff7, 0x10000155550006, x0, x3, 112, x9)

inst_8:
// rs1==x6, rs2==x18, rd==x23, rs1_h1_val == rs2_h1_val, rs1_h3_val == 16, rs1_h2_val == 2, rs2_h2_val == 256, rs2_h0_val == 512, rs2_h3_val == -4097
// opcode: kmadrs ; op1:x6; op2:x18; dest:x23; op1val:0x10000200070001;  op2val:0xefff010000070200
TEST_PKRR_OP(kmadrs, x23, x6, x18, 0x0000000000000000, 0x10000200070001, 0xefff010000070200, x6, x3, 128, x9)

inst_9:
// rs1==x21, rs2==x11, rd==x2, rs1_h0_val == rs2_h0_val, rs1_h1_val == 2048, rs2_h2_val == -9, rs2_h0_val == -33, rs2_h3_val == 64, rs2_h1_val == 256, rs1_h2_val == -3
// opcode: kmadrs ; op1:x21; op2:x11; dest:x2; op1val:0xc000fffd0800ffdf;  op2val:0x40fff70100ffdf
TEST_PKRR_OP(kmadrs, x2, x21, x11, 0x0000000000000000, 0xc000fffd0800ffdf, 0x40fff70100ffdf, x21, x3, 144, x9)

inst_10:
// rs1==x12, rs2==x19, rd==x28, rs2_h3_val == 21845, rs1_h1_val == 1, rs1_h0_val == 8, rs1_h2_val == -257, rs1_h3_val == -2049
// opcode: kmadrs ; op1:x12; op2:x19; dest:x28; op1val:0xf7fffeff00010008;  op2val:0x555500030006fffc
TEST_PKRR_OP(kmadrs, x28, x12, x19, 0x0000000000000000, 0xf7fffeff00010008, 0x555500030006fffc, x12, x3, 160, x9)

inst_11:
// rs1==x25, rs2==x28, rd==x12, rs2_h3_val == 32767, rs1_h2_val == 1024, rs2_h0_val == -21846, rs2_h1_val == -2049, rs2_h2_val == -65, rs1_h3_val == -4097
// opcode: kmadrs ; op1:x25; op2:x28; dest:x12; op1val:0xefff04003fff0009;  op2val:0x7fffffbff7ffaaaa
TEST_PKRR_OP(kmadrs, x12, x25, x28, 0x0000000000000000, 0xefff04003fff0009, 0x7fffffbff7ffaaaa, x25, x3, 176, x9)

inst_12:
// rs1==x13, rs2==x4, rd==x1, rs2_h3_val == -8193, rs2_h1_val == -2, rs2_h0_val == 2048, rs1_h3_val == 4096
// opcode: kmadrs ; op1:x13; op2:x4; dest:x1; op1val:0x100000050003fff6;  op2val:0xdfffbffffffe0800
TEST_PKRR_OP(kmadrs, x1, x13, x4, 0x0000000000000000, 0x100000050003fff6, 0xdfffbffffffe0800, x13, x3, 192, x9)

inst_13:
// rs1==x20, rs2==x1, rd==x15, rs2_h3_val == -2049, rs2_h2_val == -1, rs1_h3_val == 32767, rs2_h0_val == 1024, rs1_h2_val == -2049
// opcode: kmadrs ; op1:x20; op2:x1; dest:x15; op1val:0x7ffff7ff00100007;  op2val:0xf7fffffff7ff0400
TEST_PKRR_OP(kmadrs, x15, x20, x1, 0x0000000000000000, 0x7ffff7ff00100007, 0xf7fffffff7ff0400, x20, x3, 208, x9)

inst_14:
// rs1==x31, rs2==x12, rd==x24, rs2_h3_val == -1025, rs2_h1_val == -1025, rs1_h2_val == 16, rs1_h1_val == 32, rs1_h0_val == -16385, rs2_h0_val == 256
// opcode: kmadrs ; op1:x31; op2:x12; dest:x24; op1val:0xfff800100020bfff;  op2val:0xfbfffffefbff0100
TEST_PKRR_OP(kmadrs, x24, x31, x12, 0x0000000000000000, 0xfff800100020bfff, 0xfbfffffefbff0100, x31, x3, 224, x9)

inst_15:
// rs1==x17, rs2==x30, rd==x31, rs2_h3_val == -513, rs1_h1_val == -9, rs2_h2_val == -21846, rs1_h2_val == 1, rs2_h0_val == -129
// opcode: kmadrs ; op1:x17; op2:x30; dest:x31; op1val:0xfffa0001fff7fffa;  op2val:0xfdffaaaa1000ff7f
TEST_PKRR_OP(kmadrs, x31, x17, x30, 0x0000000000000000, 0xfffa0001fff7fffa, 0xfdffaaaa1000ff7f, x17, x3, 240, x9)

inst_16:
// rs1==x24, rs2==x20, rd==x14, rs2_h3_val == -257, rs1_h1_val == 1024, rs2_h2_val == 8192, rs2_h1_val == -257, rs1_h3_val == 64
// opcode: kmadrs ; op1:x24; op2:x20; dest:x14; op1val:0x40f7ff04000001;  op2val:0xfeff2000fefffff9
TEST_PKRR_OP(kmadrs, x14, x24, x20, 0x0000000000000000, 0x40f7ff04000001, 0xfeff2000fefffff9, x24, x3, 256, x1)

inst_17:
// rs1==x22, rs2==x0, rd==x30, rs2_h3_val == -129, rs1_h3_val == 1024, rs1_h0_val == -2, rs2_h2_val == 128
// opcode: kmadrs ; op1:x22; op2:x0; dest:x30; op1val:0x40000090006fffe;  op2val:0xff7f0080ffefbfff
TEST_PKRR_OP(kmadrs, x30, x22, x0, 0x0000000000000000, 0x40000090006fffe, 0xff7f0080ffefbfff, x22, x3, 272, x1)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_18:
// rs1==x9, rs2==x3, rd==x13, rs2_h3_val == -33, rs1_h3_val == 21845, rs2_h0_val == 16, rs1_h2_val == -65, rs2_h2_val == 0
// opcode: kmadrs ; op1:x9; op2:x3; dest:x13; op1val:0x5555ffbf3ffffffc;  op2val:0xffdf0000feff0010
TEST_PKRR_OP(kmadrs, x13, x9, x3, 0x0000000000000000, 0x5555ffbf3ffffffc, 0xffdf0000feff0010, x9, x7, 0, x1)

inst_19:
// rs1==x2, rs2==x23, rd==x22, rs2_h3_val == -17, rs2_h1_val == 4, rs2_h2_val == 512, rs2_h0_val == 64
// opcode: kmadrs ; op1:x2; op2:x23; dest:x22; op1val:0x10fffc08000007;  op2val:0xffef020000040040
TEST_PKRR_OP(kmadrs, x22, x2, x23, 0x0000000000000000, 0x10fffc08000007, 0xffef020000040040, x2, x7, 16, x1)

inst_20:
// rs1==x5, rs2==x26, rd==x19, rs2_h3_val == -9, rs1_h1_val == 32767, rs2_h1_val == 8192
// opcode: kmadrs ; op1:x5; op2:x26; dest:x19; op1val:0xfffa04007ffffffd;  op2val:0xfff700032000ff7f
TEST_PKRR_OP(kmadrs, x19, x5, x26, 0x0000000000000000, 0xfffa04007ffffffd, 0xfff700032000ff7f, x5, x7, 32, x1)

inst_21:
// rs1==x3, rs2==x29, rd==x4, rs2_h3_val == -5, rs1_h0_val == 32, rs1_h3_val == 0, rs2_h2_val == -513
// opcode: kmadrs ; op1:x3; op2:x29; dest:x4; op1val:0x000005fffc0020;  op2val:0xfffbfdff00070008
TEST_PKRR_OP(kmadrs, x4, x3, x29, 0x0000000000000000, 0x000005fffc0020, 0xfffbfdff00070008, x3, x7, 48, x1)

inst_22:
// rs1==x27, rs2==x22, rd==x29, rs2_h3_val == -3, rs2_h1_val == -513, rs1_h0_val == 4, rs1_h1_val == -16385
// opcode: kmadrs ; op1:x27; op2:x22; dest:x29; op1val:0x20f7ffbfff0004;  op2val:0xfffdfffefdff0200
TEST_PKRR_OP(kmadrs, x29, x27, x22, 0x0000000000000000, 0x20f7ffbfff0004, 0xfffdfffefdff0200, x27, x7, 64, x1)

inst_23:
// rs1==x28, rs2==x13, rd==x6, rs2_h3_val == -2, rs1_h1_val == -257, rs1_h3_val == 8192, rs2_h0_val == 1, rs1_h0_val == 32767
// opcode: kmadrs ; op1:x28; op2:x13; dest:x6; op1val:0x2000fffefeff7fff;  op2val:0xfffe0001fffe0001
TEST_PKRR_OP(kmadrs, x6, x28, x13, 0x0000000000000000, 0x2000fffefeff7fff, 0xfffe0001fffe0001, x28, x7, 80, x1)

inst_24:
// rs1==x16, rs2==x31, rd==x3, rs2_h3_val == -32768, rs2_h2_val == 32, rs1_h2_val == -9, rs1_h1_val == -33, rs2_h0_val == 21845
// opcode: kmadrs ; op1:x16; op2:x31; dest:x3; op1val:0xfff9fff7ffdffffa;  op2val:0x8000002010005555
TEST_PKRR_OP(kmadrs, x3, x16, x31, 0x0000000000000000, 0xfff9fff7ffdffffa, 0x8000002010005555, x16, x7, 96, x1)

inst_25:
// rs1==x23, rs2==x21, rd==x25, rs2_h3_val == 16384, rs1_h2_val == 64
// opcode: kmadrs ; op1:x23; op2:x21; dest:x25; op1val:0x1000403fff8000;  op2val:0x40000000fff8ffdf
TEST_PKRR_OP(kmadrs, x25, x23, x21, 0x0000000000000000, 0x1000403fff8000, 0x40000000fff8ffdf, x23, x7, 112, x1)

inst_26:
// rs1==x30, rs2==x14, rd==x18, rs2_h3_val == 4096, rs2_h2_val == -8193, rs1_h0_val == -1025, rs2_h0_val == 128
// opcode: kmadrs ; op1:x30; op2:x14; dest:x18; op1val:0x80000100008fbff;  op2val:0x1000dfff00070080
TEST_PKRR_OP(kmadrs, x18, x30, x14, 0x0000000000000000, 0x80000100008fbff, 0x1000dfff00070080, x30, x7, 128, x1)

inst_27:
// rs1==x11, rs2==x25, rd==x17, rs2_h3_val == 1024, rs1_h0_val == -2049, rs2_h1_val == -21846, rs1_h1_val == 128, rs1_h3_val == -8193
// opcode: kmadrs ; op1:x11; op2:x25; dest:x17; op1val:0xdfff00050080f7ff;  op2val:0x400fff9aaaa5555
TEST_PKRR_OP(kmadrs, x17, x11, x25, 0x0000000000000000, 0xdfff00050080f7ff, 0x400fff9aaaa5555, x11, x7, 144, x1)

inst_28:
// rs1==x15, rs2==x16, rd==x10, rs2_h3_val == 512, rs1_h3_val == -16385, rs1_h2_val == 21845
// opcode: kmadrs ; op1:x15; op2:x16; dest:x10; op1val:0xbfff55550800bfff;  op2val:0x200fff600040400
TEST_PKRR_OP(kmadrs, x10, x15, x16, 0x0000000000000000, 0xbfff55550800bfff, 0x200fff600040400, x15, x7, 160, x1)

inst_29:
// rs1==x1, rs2==x2, rd==x16, rs2_h3_val == 256, rs1_h1_val == -1025, rs2_h0_val == 8192, rs1_h2_val == -5
// opcode: kmadrs ; op1:x1; op2:x2; dest:x16; op1val:0x5555fffbfbffc000;  op2val:0x1002000fffe2000
TEST_PKRR_OP(kmadrs, x16, x1, x2, 0x0000000000000000, 0x5555fffbfbffc000, 0x1002000fffe2000, x1, x7, 176, x3)

inst_30:
// rs1==x19, rs2==x9, rd==x27, rs2_h3_val == 32, rs2_h1_val == -5, rs2_h2_val == -2049, rs1_h2_val == 4, rs1_h3_val == -129
// opcode: kmadrs ; op1:x19; op2:x9; dest:x27; op1val:0xff7f000408000004;  op2val:0x20f7fffffb0005
TEST_PKRR_OP(kmadrs, x27, x19, x9, 0x0000000000000000, 0xff7f000408000004, 0x20f7fffffb0005, x19, x7, 192, x3)

inst_31:
// rs1==x8, rs2==x27, rd==x9, rs2_h3_val == 8, rs1_h1_val == -2, rs1_h3_val == -65, rs2_h1_val == 2048
// opcode: kmadrs ; op1:x8; op2:x27; dest:x9; op1val:0xffbf0004fffebfff;  op2val:0x0801000800fff9
TEST_PKRR_OP(kmadrs, x9, x8, x27, 0x0000000000000000, 0xffbf0004fffebfff, 0x0801000800fff9, x8, x7, 208, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs2_h3_val == 4, rs2_h1_val == -4097, rs2_h0_val == 32767, rs1_h3_val == -1, rs2_h2_val == -3, rs1_h2_val == -1
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff0008fffe;  op2val:0x04fffdefff7fff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xffffffff0008fffe, 0x04fffdefff7fff, x30, x1, 0, x3)

inst_33:
// rs2_h3_val == 2, rs2_h2_val == 16384, rs2_h0_val == 32, rs1_h0_val == -513
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff90002fffafdff;  op2val:0x024000ffef0020
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfff90002fffafdff, 0x024000ffef0020, x30, x1, 16, x3)

inst_34:
// rs2_h3_val == 1, rs1_h3_val == 2, rs2_h2_val == 16, rs1_h2_val == 128
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x0200800003fff7;  op2val:0x010010fff63fff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x0200800003fff7, 0x010010fff63fff, x30, x1, 32, x3)

inst_35:
// rs1_h1_val == -3, rs2_h2_val == -5
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x55550040fffd0006;  op2val:0xfdfffffbfffabfff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x55550040fffd0006, 0xfdfffffbfffabfff, x30, x1, 48, x3)

inst_36:
// rs1_h1_val == -32768, rs2_h2_val == -4097, rs1_h0_val == 512
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x06fffa80000200;  op2val:0xf7ffefff5555bfff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x06fffa80000200, 0xf7ffefff5555bfff, x30, x1, 64, x3)

inst_37:
// rs1_h1_val == 16384, rs1_h3_val == -257, rs2_h0_val == -2049
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfeff00004000f7ff;  op2val:0x1000020ff7ff7ff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfeff00004000f7ff, 0x1000020ff7ff7ff, x30, x1, 80, x3)

inst_38:
// rs1_h1_val == 4096, rs1_h2_val == -16385, rs2_h0_val == -9
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x40bfff10000005;  op2val:0xfffefff8ffeffff7
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x40bfff10000005, 0xfffefff8ffeffff7, x30, x1, 96, x3)

inst_39:
// rs1_h1_val == 512, rs2_h1_val == 512
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x07000502000040;  op2val:0xfff7fffb0200fffc
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x07000502000040, 0xfff7fffb0200fffc, x30, x1, 112, x3)

inst_40:
// rs1_h1_val == 256, rs1_h0_val == 4096, rs1_h3_val == 16384, rs2_h1_val == -32768, rs2_h2_val == 4
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x4000f7ff01001000;  op2val:0xfffe00048000fff6
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x4000f7ff01001000, 0xfffe00048000fff6, x30, x1, 128, x3)

inst_41:
// rs1_h1_val == 64, rs2_h0_val == 16384
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x06000600400005;  op2val:0x100200080004000
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x06000600400005, 0x100200080004000, x30, x1, 144, x3)

inst_42:
// rs1_h1_val == 4, rs2_h2_val == -1025, rs1_h2_val == 256, rs2_h1_val == 8
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x0301000004fffa;  op2val:0xfff7fbff00083fff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x0301000004fffa, 0xfff7fbff00083fff, x30, x1, 160, x3)

inst_43:
// rs1_h1_val == 2, rs2_h1_val == -65, rs1_h0_val == 16384
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x06000500024000;  op2val:0xf7fffff9ffbffff7
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x06000500024000, 0xf7fffff9ffbffff7, x30, x1, 176, x3)

inst_44:
// rs1_h1_val == 0, rs2_h1_val == -9
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffa00003fff;  op2val:0xfff9dffffff70005
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xf7fffffa00003fff, 0xfff9dffffff70005, x30, x1, 192, x3)

inst_45:
// rs1_h1_val == -1, rs2_h2_val == -17, rs1_h3_val == -9
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffdffffc000;  op2val:0xbfffffefff7ffffa
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfff7fffdffffc000, 0xbfffffefff7ffffa, x30, x1, 208, x3)

inst_46:
// rs1_h0_val == -21846, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0040fbffaaaa;  op2val:0x400fff9ffbf0007
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xf7ff0040fbffaaaa, 0x400fff9ffbf0007, x30, x1, 224, x3)

inst_47:
// rs1_h0_val == 21845, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x05f7ff02005555;  op2val:0x200aaaaffef0200
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x05f7ff02005555, 0x200aaaaffef0200, x30, x1, 240, x3)

inst_48:
// rs1_h0_val == -8193, rs2_h0_val == -8193, rs2_h1_val == 64, rs1_h1_val == -4097
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x40000009efffdfff;  op2val:0x200000040040dfff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x40000009efffdfff, 0x200000040040dfff, x30, x1, 256, x3)

inst_49:
// rs1_h0_val == -4097, rs2_h1_val == 128, rs2_h2_val == 1024
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffbf0080efff;  op2val:0x02040000800100
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xffbfffbf0080efff, 0x02040000800100, x30, x1, 272, x3)

inst_50:
// rs1_h0_val == -257, rs2_h0_val == -17
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffcfefffeff;  op2val:0xfeff0009fff7ffef
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x1000fffcfefffeff, 0xfeff0009fff7ffef, x30, x1, 288, x3)

inst_51:
// rs1_h0_val == -129, rs1_h3_val == -17
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xffefbfffffefff7f;  op2val:0xfffafffaaaaa0200
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xffefbfffffefff7f, 0xfffafffaaaaa0200, x30, x1, 304, x3)

inst_52:
// rs1_h0_val == -17, rs2_h1_val == 16
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x0200100000ffef;  op2val:0x3ffffffd00100007
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x0200100000ffef, 0x3ffffffd00100007, x30, x1, 320, x3)

inst_53:
// rs1_h0_val == -5, rs2_h3_val == -1
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffa80008000fffb;  op2val:0xffffffeffff75555
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfffa80008000fffb, 0xffffffeffff75555, x30, x1, 336, x3)

inst_54:
// rs1_h0_val == 8192, rs1_h2_val == 512
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x060200fffe2000;  op2val:0x040100fffefff6
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x060200fffe2000, 0x040100fffefff6, x30, x1, 352, x3)

inst_55:
// rs1_h0_val == 1024, rs2_h2_val == 64, rs1_h3_val == -3, rs2_h0_val == -3
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffd000400030400;  op2val:0x4000040fff8fffd
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfffd000400030400, 0x4000040fff8fffd, x30, x1, 368, x3)

inst_56:
// rs1_h0_val == 256, rs2_h1_val == -1
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x40fffc3fff0100;  op2val:0xfff64000ffff0020
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x40fffc3fff0100, 0xfff64000ffff0020, x30, x1, 384, x3)

inst_57:
// rs1_h0_val == 128, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0080fff60080;  op2val:0xf7ffaaaafff60008
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfffd0080fff60080, 0xf7ffaaaafff60008, x30, x1, 400, x3)

inst_58:
// rs2_h1_val == 2, rs1_h1_val == -21846, rs1_h2_val == -129
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x100ff7faaaaff7f;  op2val:0xfff600400002aaaa
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x100ff7faaaaff7f, 0xfff600400002aaaa, x30, x1, 416, x3)

inst_59:
// rs2_h1_val == 1, rs1_h3_val == -5, rs1_h2_val == -21846, rs2_h0_val == 2
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffbaaaa0040fdff;  op2val:0x01200000010002
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfffbaaaa0040fdff, 0x01200000010002, x30, x1, 432, x3)

inst_60:
// rs2_h1_val == 0, rs2_h0_val == -2
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x06fffafff90020;  op2val:0x08ffbf0000fffe
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x06fffafff90020, 0x08ffbf0000fffe, x30, x1, 448, x3)

inst_61:
// rs2_h0_val == -513, rs1_h3_val == -1025, rs1_h2_val == 2048
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0800fff60001;  op2val:0xdffff7ffffbffdff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfbff0800fff60001, 0xdffff7ffffbffdff, x30, x1, 464, x3)

inst_62:
// rs2_h0_val == -257, rs1_h3_val == 4
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x04fff80000ffbf;  op2val:0xdffffff65555feff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x04fff80000ffbf, 0xdffffff65555feff, x30, x1, 480, x3)

inst_63:
// rs2_h0_val == -65, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x1001000006fffd;  op2val:0x20000001ffbfffbf
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x1001000006fffd, 0x20000001ffbfffbf, x30, x1, 496, x3)

inst_64:
// rs2_h0_val == -5, rs1_h2_val == -8193
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff7dfff2000aaaa;  op2val:0x7fff00060004fffb
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfff7dfff2000aaaa, 0x7fff00060004fffb, x30, x1, 512, x3)

inst_65:
// rs2_h0_val == 4096, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x03fffe00060006;  op2val:0x203fffffff1000
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x03fffe00060006, 0x203fffffff1000, x30, x1, 528, x3)

inst_66:
// rs2_h0_val == 4, rs1_h2_val == 8192
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff82000fffcefff;  op2val:0xfffbeffffbff0004
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfff82000fffcefff, 0xfffbeffffbff0004, x30, x1, 544, x3)

inst_67:
// rs2_h0_val == 0, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x5555fff7fbfffff6;  op2val:0x55550040fff60000
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x5555fff7fbfffff6, 0x55550040fff60000, x30, x1, 560, x3)

inst_68:
// rs1_h0_val == 16, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x090200fffb0010;  op2val:0xffeffbfffdffefff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x090200fffb0010, 0xffeffbfffdffefff, x30, x1, 576, x3)

inst_69:
// rs1_h3_val == -513, rs1_h2_val == -33
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffdf0004fff6;  op2val:0x040020c0004000
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfdffffdf0004fff6, 0x040020c0004000, x30, x1, 592, x3)

inst_70:
// rs1_h0_val == 2, rs1_h2_val == 16384
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x10400000080002;  op2val:0x090010fdff5555
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x10400000080002, 0x090010fdff5555, x30, x1, 608, x3)

inst_71:
// rs1_h3_val == -33, rs1_h2_val == -513
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xffdffdffbffffff7;  op2val:0xfbfffff800000008
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xffdffdffbffffff7, 0xfbfffff800000008, x30, x1, 624, x3)

inst_72:
// rs1_h0_val == 0, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x05fffafbff0000;  op2val:0xfffafffffff6dfff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x05fffafbff0000, 0xfffafffffff6dfff, x30, x1, 640, x3)

inst_73:
// rs1_h0_val == -1, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0040bfffffff;  op2val:0x400400000095555
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfffd0040bfffffff, 0x400400000095555, x30, x1, 656, x3)

inst_74:
// rs1_h3_val == -2, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffefff7fff90400;  op2val:0xfff8fff90020dfff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfffefff7fff90400, 0xfff8fff90020dfff, x30, x1, 672, x3)

inst_75:
// rs2_h3_val == 0, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfbff000580000005;  op2val:0x004000fdff0005
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfbff000580000005, 0x004000fdff0005, x30, x1, 688, x3)

inst_76:
// rs1_h3_val == 512, rs2_h2_val == 2
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x2003fff00060006;  op2val:0xffff00023fff1000
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x2003fff00060006, 0xffff00023fff1000, x30, x1, 704, x3)

inst_77:
// rs1_h3_val == 128, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x80feff0010ffff;  op2val:0xdfffffbf00080200
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x80feff0010ffff, 0xdfffffbf00080200, x30, x1, 720, x3)

inst_78:
// rs2_h2_val == -257, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00040000fffc;  op2val:0xdffffeff55552000
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfdff00040000fffc, 0xdffffeff55552000, x30, x1, 736, x3)

inst_79:
// rs2_h2_val == -129, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fff7fbff0100;  op2val:0x04ff7f02005555
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfff8fff7fbff0100, 0x04ff7f02005555, x30, x1, 752, x3)

inst_80:
// rs1_h3_val == 8, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x0800070007ffff;  op2val:0x0500020020fffd
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x0800070007ffff, 0x0500020020fffd, x30, x1, 768, x3)

inst_81:
// rs2_h2_val == -33, rs1_h1_val == -129
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0005ff7fffbf;  op2val:0x01ffdf00050006
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xf7ff0005ff7fffbf, 0x01ffdf00050006, x30, x1, 784, x3)

inst_82:
// rs1_h3_val == 1, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x01010080000200;  op2val:0xfffbfffcfff70200
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x01010080000200, 0xfffbfffcfff70200, x30, x1, 800, x3)

inst_83:
// rs2_h2_val == -32768, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x05fffeaaaa0002;  op2val:0xfff78000ffff0010
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x05fffeaaaa0002, 0xfff78000ffff0010, x30, x1, 816, x3)

inst_84:
// rs1_h2_val == 32767, rs2_h2_val == 8, rs2_h1_val == -8193
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x067fff00090020;  op2val:0x40000008dfffffbf
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x067fff00090020, 0x40000008dfffffbf, x30, x1, 832, x3)

inst_85:
// rs2_h2_val == 4096, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0004efff4000;  op2val:0xffdf1000ff7f0010
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfeff0004efff4000, 0xffdf1000ff7f0010, x30, x1, 848, x3)

inst_86:
// rs1_h2_val == -4097, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x40efff00090007;  op2val:0x3fffbfffff7f8000
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x40efff00090007, 0x3fffbfffff7f8000, x30, x1, 864, x3)

inst_87:
// rs1_h2_val == -1025, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x00fbff00090200;  op2val:0xfdffffeffffffff8
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x00fbff00090200, 0xfdffffeffffffff8, x30, x1, 880, x3)

inst_88:
// rs1_h2_val == 4096, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffb1000ffef0040;  op2val:0xfff8fff9fffe0000
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfffb1000ffef0040, 0xfff8fff9fffe0000, x30, x1, 896, x3)

inst_89:
// rs2_h1_val == 32767, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffbfffffe0040;  op2val:0x4000efff7fff0400
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x3ffffbfffffe0040, 0x4000efff7fff0400, x30, x1, 912, x3)

inst_90:
// rs1_h2_val == 8, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x00000800808000;  op2val:0xfff6fff7dfff0400
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x00000800808000, 0xfff6fff7dfff0400, x30, x1, 928, x3)

inst_91:
// rs2_h1_val == -33, rs1_h1_val == -2049
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffbf7ff0003;  op2val:0xffdf0080ffdf0009
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xbffffffbf7ff0003, 0xffdf0080ffdf0009, x30, x1, 944, x3)

inst_92:
// rs2_h1_val == -3, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa00010005f7ff;  op2val:0xfffafdfffffd0020
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xaaaa00010005f7ff, 0xfffafdfffffd0020, x30, x1, 960, x3)

inst_93:
// rs1_h1_val == 21845, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xbfffc0005555dfff;  op2val:0xfff9004000090009
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xbfffc0005555dfff, 0xfff9004000090009, x30, x1, 976, x3)

inst_94:
// rs2_h1_val == 16384, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff600020006;  op2val:0x20000740000200
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x7ffffff600020006, 0x20000740000200, x30, x1, 992, x3)

inst_95:
// rs1_h1_val == -8193, rs2_h2_val == 32767
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaf7ffdfff0001;  op2val:0xfbff7ffffff70008
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xaaaaf7ffdfff0001, 0xfbff7ffffff70008, x30, x1, 1008, x3)

inst_96:
// rs1_h1_val == -513, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0004fdff0040;  op2val:0x09bffffdff0008
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfffb0004fdff0040, 0x09bffffdff0008, x30, x1, 1024, x3)

inst_97:
// rs1_h2_val == -17, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffef00200007;  op2val:0xaaaa008001000100
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xdfffffef00200007, 0xaaaa008001000100, x30, x1, 1040, x3)

inst_98:
// rs1_h3_val == -32768, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffb00090005;  op2val:0x03ffbf0003efff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x8000fffb00090005, 0x03ffbf0003efff, x30, x1, 1056, x3)

inst_99:
// rs1_h1_val == -65, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x80000020ffbfc000;  op2val:0x400fff800202000
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x80000020ffbfc000, 0x400fff800202000, x30, x1, 1072, x3)

inst_100:
// rs2_h2_val == 21845, 
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0200dffffffd;  op2val:0xffef55550080efff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xbfff0200dffffffd, 0xffef55550080efff, x30, x1, 1088, x3)

inst_101:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h1_val == -5, rs2_h1_val == -16385, rs2_h0_val == -1, rs2_h3_val == 8192, rs1_h0_val == 64, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h2_val == 2048, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffcfffb0040;  op2val:0x20000800bfffffff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0xfff6fffcfffb0040, 0x20000800bfffffff, x30, x1, 1104, x3)

inst_102:
// rs1_h2_val == rs2_h2_val, rs1_h0_val == -65, rs1_h3_val == 256, rs2_h0_val == -32768
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x100c000fffcffbf;  op2val:0xc000c00004008000
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x100c000fffcffbf, 0xc000c00004008000, x30, x1, 1120, x3)

inst_103:
// rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == 21845, rs1_h0_val == -9, rs1_h2_val == 32, rs2_h3_val == 16, rs2_h2_val == 1
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x0600200009fff7;  op2val:0x10000155550006
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x0600200009fff7, 0x10000155550006, x30, x1, 1136, x3)

inst_104:
// rs2_h3_val == -129, rs1_h3_val == 1024, rs1_h0_val == -2, rs2_h2_val == 128
// opcode: kmadrs ; op1:x30; op2:x29; dest:x31; op1val:0x40000090006fffe;  op2val:0xff7f0080ffefbfff
TEST_PKRR_OP(kmadrs, x31, x30, x29, 0x0000000000000000, 0x40000090006fffe, 0xff7f0080ffefbfff, x30, x1, 1152, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 36*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 146*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
