
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kslra32.u instruction of the RISC-V RV64PZicsr extension for the kslra32.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kslra32.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x21, rs2==x6, rd==x21, rs2_val == 6148914691236517205, rs1_w0_val == 4294966783, rs1_w1_val == 4294963199
// opcode: kslra32.u ; op1:x21; op2:x6; dest:x21; op1val:0xffffeffffffffdff;  op2val:0x5555555555555555
TEST_PKRR_OP(kslra32.u, x21, x21, x6, 0x0000000000000000, 0xffffeffffffffdff, 0x5555555555555555, x21, x1, 0, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x22, rd==x3, rs2_val == 9223372036854775807, rs1_w1_val == 4294967279
// opcode: kslra32.u ; op1:x23; op2:x22; dest:x3; op1val:0xffffffef0000000a;  op2val:0x7fffffffffffffff
TEST_PKRR_OP(kslra32.u, x3, x23, x22, 0x0000000000000000, 0xffffffef0000000a, 0x7fffffffffffffff, x23, x1, 16, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x29, rs2==x29, rd==x15, rs2_val == -4611686018427387905, rs1_w0_val == 3758096383, rs1_w1_val == 4294967231
// opcode: kslra32.u ; op1:x29; op2:x29; dest:x15; op1val:0xffffffbfdfffffff;  op2val:0xbfffffffffffffff
TEST_PKRR_OP(kslra32.u, x15, x29, x29, 0x0000000000000000, 0xffffffbfdfffffff, 0xbfffffffffffffff, x29, x1, 32, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x30, rs2==x30, rd==x30, rs2_val == -2305843009213693953, rs1_w1_val == 1073741824, rs1_w0_val == 65536
// opcode: kslra32.u ; op1:x30; op2:x30; dest:x30; op1val:0x4000000000010000;  op2val:0xdfffffffffffffff
TEST_PKRR_OP(kslra32.u, x30, x30, x30, 0x0000000000000000, 0x4000000000010000, 0xdfffffffffffffff, x30, x1, 48, x8)

inst_4:
// rs2 == rd != rs1, rs1==x17, rs2==x9, rd==x9, rs2_val == -1152921504606846977, rs1_w1_val == 4026531839, rs1_w0_val == 128
// opcode: kslra32.u ; op1:x17; op2:x9; dest:x9; op1val:0xefffffff00000080;  op2val:0xefffffffffffffff
TEST_PKRR_OP(kslra32.u, x9, x17, x9, 0x0000000000000000, 0xefffffff00000080, 0xefffffffffffffff, x17, x1, 64, x8)

inst_5:
// rs1==x10, rs2==x20, rd==x22, rs2_val == -576460752303423489, rs1_w1_val == 4294967039
// opcode: kslra32.u ; op1:x10; op2:x20; dest:x22; op1val:0xfffffeff00000009;  op2val:0xf7ffffffffffffff
TEST_PKRR_OP(kslra32.u, x22, x10, x20, 0x0000000000000000, 0xfffffeff00000009, 0xf7ffffffffffffff, x10, x1, 80, x8)

inst_6:
// rs1==x7, rs2==x5, rd==x2, rs2_val == -288230376151711745, rs1_w0_val == 16384, rs1_w1_val == 4294443007
// opcode: kslra32.u ; op1:x7; op2:x5; dest:x2; op1val:0xfff7ffff00004000;  op2val:0xfbffffffffffffff
TEST_PKRR_OP(kslra32.u, x2, x7, x5, 0x0000000000000000, 0xfff7ffff00004000, 0xfbffffffffffffff, x7, x1, 96, x8)

inst_7:
// rs1==x16, rs2==x17, rd==x29, rs2_val == -144115188075855873, rs1_w0_val == 524288, rs1_w1_val == 64
// opcode: kslra32.u ; op1:x16; op2:x17; dest:x29; op1val:0x00004000080000;  op2val:0xfdffffffffffffff
TEST_PKRR_OP(kslra32.u, x29, x16, x17, 0x0000000000000000, 0x00004000080000, 0xfdffffffffffffff, x16, x1, 112, x8)

inst_8:
// rs1==x14, rs2==x0, rd==x23, rs2_val == -72057594037927937, rs1_w0_val == 2097152, rs1_w1_val == 4160749567
// opcode: kslra32.u ; op1:x14; op2:x0; dest:x23; op1val:0xf7ffffff00200000;  op2val:0x0
TEST_PKRR_OP(kslra32.u, x23, x14, x0, 0x0000000000000000, 0xf7ffffff00200000, 0x0, x14, x1, 128, x8)

inst_9:
// rs1==x3, rs2==x31, rd==x19, rs2_val == -36028797018963969, rs1_w1_val == 16777216
// opcode: kslra32.u ; op1:x3; op2:x31; dest:x19; op1val:0x100000000000011;  op2val:0xff7fffffffffffff
TEST_PKRR_OP(kslra32.u, x19, x3, x31, 0x0000000000000000, 0x100000000000011, 0xff7fffffffffffff, x3, x1, 144, x8)

inst_10:
// rs1==x26, rs2==x11, rd==x28, rs2_val == -18014398509481985, rs1_w0_val == 4194304, rs1_w1_val == 4261412863
// opcode: kslra32.u ; op1:x26; op2:x11; dest:x28; op1val:0xfdffffff00400000;  op2val:0xffbfffffffffffff
TEST_PKRR_OP(kslra32.u, x28, x26, x11, 0x0000000000000000, 0xfdffffff00400000, 0xffbfffffffffffff, x26, x1, 160, x8)

inst_11:
// rs1==x27, rs2==x4, rd==x17, rs2_val == -9007199254740993, rs1_w0_val == 67108864
// opcode: kslra32.u ; op1:x27; op2:x4; dest:x17; op1val:0xefffffff04000000;  op2val:0xffdfffffffffffff
TEST_PKRR_OP(kslra32.u, x17, x27, x4, 0x0000000000000000, 0xefffffff04000000, 0xffdfffffffffffff, x27, x1, 176, x8)

inst_12:
// rs1==x24, rs2==x12, rd==x6, rs2_val == -4503599627370497, rs1_w0_val == 4286578687
// opcode: kslra32.u ; op1:x24; op2:x12; dest:x6; op1val:0xfff7ffffff7fffff;  op2val:0xffefffffffffffff
TEST_PKRR_OP(kslra32.u, x6, x24, x12, 0x0000000000000000, 0xfff7ffffff7fffff, 0xffefffffffffffff, x24, x1, 192, x8)

inst_13:
// rs1==x19, rs2==x3, rd==x5, rs2_val == -2251799813685249, rs1_w1_val == 131072
// opcode: kslra32.u ; op1:x19; op2:x3; dest:x5; op1val:0x02000000400000;  op2val:0xfff7ffffffffffff
TEST_PKRR_OP(kslra32.u, x5, x19, x3, 0x0000000000000000, 0x02000000400000, 0xfff7ffffffffffff, x19, x1, 208, x17)

inst_14:
// rs1==x11, rs2==x26, rd==x7, rs2_val == -1125899906842625, rs1_w1_val == 4294967295, rs1_w0_val == 1024
// opcode: kslra32.u ; op1:x11; op2:x26; dest:x7; op1val:0xffffffff00000400;  op2val:0xfffbffffffffffff
TEST_PKRR_OP(kslra32.u, x7, x11, x26, 0x0000000000000000, 0xffffffff00000400, 0xfffbffffffffffff, x11, x1, 224, x17)

inst_15:
// rs1==x4, rs2==x7, rd==x16, rs2_val == -562949953421313, rs1_w0_val == 64
// opcode: kslra32.u ; op1:x4; op2:x7; dest:x16; op1val:0xfdffffff00000040;  op2val:0xfffdffffffffffff
TEST_PKRR_OP(kslra32.u, x16, x4, x7, 0x0000000000000000, 0xfdffffff00000040, 0xfffdffffffffffff, x4, x1, 240, x17)

inst_16:
// rs1==x31, rs2==x2, rd==x13, rs2_val == -281474976710657, rs1_w1_val == 2863311530, rs1_w0_val == 134217728
// opcode: kslra32.u ; op1:x31; op2:x2; dest:x13; op1val:0xaaaaaaaa08000000;  op2val:0xfffeffffffffffff
TEST_PKRR_OP(kslra32.u, x13, x31, x2, 0x0000000000000000, 0xaaaaaaaa08000000, 0xfffeffffffffffff, x31, x1, 256, x17)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_17:
// rs1==x28, rs2==x18, rd==x1, rs2_val == -140737488355329, rs1_w1_val == 1, rs1_w0_val == 33554432
// opcode: kslra32.u ; op1:x28; op2:x18; dest:x1; op1val:0x00000102000000;  op2val:0xffff7fffffffffff
TEST_PKRR_OP(kslra32.u, x1, x28, x18, 0x0000000000000000, 0x00000102000000, 0xffff7fffffffffff, x28, x3, 0, x17)

inst_18:
// rs1==x2, rs2==x19, rd==x18, rs2_val == -70368744177665, rs1_w1_val == 4194304
// opcode: kslra32.u ; op1:x2; op2:x19; dest:x18; op1val:0x40000000400000;  op2val:0xffffbfffffffffff
TEST_PKRR_OP(kslra32.u, x18, x2, x19, 0x0000000000000000, 0x40000000400000, 0xffffbfffffffffff, x2, x3, 16, x17)

inst_19:
// rs1==x6, rs2==x27, rd==x11, rs2_val == -35184372088833, rs1_w0_val == 4294934527
// opcode: kslra32.u ; op1:x6; op2:x27; dest:x11; op1val:0x000011ffff7fff;  op2val:0xffffdfffffffffff
TEST_PKRR_OP(kslra32.u, x11, x6, x27, 0x0000000000000000, 0x000011ffff7fff, 0xffffdfffffffffff, x6, x3, 32, x17)

inst_20:
// rs1==x5, rs2==x14, rd==x12, rs2_val == -17592186044417, rs1_w0_val == 8
// opcode: kslra32.u ; op1:x5; op2:x14; dest:x12; op1val:0xf7ffffff00000008;  op2val:0xffffefffffffffff
TEST_PKRR_OP(kslra32.u, x12, x5, x14, 0x0000000000000000, 0xf7ffffff00000008, 0xffffefffffffffff, x5, x3, 48, x17)

inst_21:
// rs1==x0, rs2==x10, rd==x4, rs2_val == -8796093022209, rs1_w1_val == 4294965247
// opcode: kslra32.u ; op1:x0; op2:x10; dest:x4; op1val:0xfffff7ffdfffffff;  op2val:0xfffff7ffffffffff
TEST_PKRR_OP(kslra32.u, x4, x0, x10, 0x0000000000000000, 0xfffff7ffdfffffff, 0xfffff7ffffffffff, x0, x3, 64, x17)

inst_22:
// rs1==x15, rs2==x13, rd==x25, rs2_val == -4398046511105, rs1_w1_val == 2097152
// opcode: kslra32.u ; op1:x15; op2:x13; dest:x25; op1val:0x200000ffff7fff;  op2val:0xfffffbffffffffff
TEST_PKRR_OP(kslra32.u, x25, x15, x13, 0x0000000000000000, 0x200000ffff7fff, 0xfffffbffffffffff, x15, x3, 80, x17)

inst_23:
// rs1==x12, rs2==x28, rd==x31, rs2_val == -2199023255553, 
// opcode: kslra32.u ; op1:x12; op2:x28; dest:x31; op1val:0x00000aff7fffff;  op2val:0xfffffdffffffffff
TEST_PKRR_OP(kslra32.u, x31, x12, x28, 0x0000000000000000, 0x00000aff7fffff, 0xfffffdffffffffff, x12, x3, 96, x17)

inst_24:
// rs1==x1, rs2==x8, rd==x14, rs2_val == -1099511627777, rs1_w1_val == 33554432
// opcode: kslra32.u ; op1:x1; op2:x8; dest:x14; op1val:0x2000000fffffdff;  op2val:0xfffffeffffffffff
TEST_PKRR_OP(kslra32.u, x14, x1, x8, 0x0000000000000000, 0x2000000fffffdff, 0xfffffeffffffffff, x1, x3, 112, x17)

inst_25:
// rs1==x25, rs2==x24, rd==x0, rs2_val == -549755813889, rs1_w0_val == 4292870143, rs1_w1_val == 65536
// opcode: kslra32.u ; op1:x25; op2:x24; dest:x0; op1val:0x010000ffdfffff;  op2val:0xffffff7fffffffff
TEST_PKRR_OP(kslra32.u, x0, x25, x24, 0x0000000000000000, 0x010000ffdfffff, 0xffffff7fffffffff, x25, x3, 128, x17)

inst_26:
// rs1==x9, rs2==x15, rd==x24, rs2_val == -274877906945, rs1_w0_val == 4294901759
// opcode: kslra32.u ; op1:x9; op2:x15; dest:x24; op1val:0x00000afffeffff;  op2val:0xffffffbfffffffff
TEST_PKRR_OP(kslra32.u, x24, x9, x15, 0x0000000000000000, 0x00000afffeffff, 0xffffffbfffffffff, x9, x3, 144, x17)

inst_27:
// rs1==x22, rs2==x21, rd==x20, rs2_val == -137438953473, rs1_w1_val == 8192
// opcode: kslra32.u ; op1:x22; op2:x21; dest:x20; op1val:0x002000ff7fffff;  op2val:0xffffffdfffffffff
TEST_PKRR_OP(kslra32.u, x20, x22, x21, 0x0000000000000000, 0x002000ff7fffff, 0xffffffdfffffffff, x22, x3, 160, x17)

inst_28:
// rs1==x18, rs2==x1, rd==x26, rs2_val == -68719476737, rs1_w0_val == 4294965247, rs1_w1_val == 3221225471
// opcode: kslra32.u ; op1:x18; op2:x1; dest:x26; op1val:0xbffffffffffff7ff;  op2val:0xffffffefffffffff
TEST_PKRR_OP(kslra32.u, x26, x18, x1, 0x0000000000000000, 0xbffffffffffff7ff, 0xffffffefffffffff, x18, x3, 176, x2)

inst_29:
// rs1==x20, rs2==x23, rd==x27, rs2_val == -34359738369, 
// opcode: kslra32.u ; op1:x20; op2:x23; dest:x27; op1val:0xffffefff00000400;  op2val:0xfffffff7ffffffff
TEST_PKRR_OP(kslra32.u, x27, x20, x23, 0x0000000000000000, 0xffffefff00000400, 0xfffffff7ffffffff, x20, x3, 192, x2)

inst_30:
// rs1==x13, rs2==x25, rd==x8, rs2_val == -17179869185, rs1_w0_val == 4294967279, rs1_w1_val == 524288
// opcode: kslra32.u ; op1:x13; op2:x25; dest:x8; op1val:0x080000ffffffef;  op2val:0xfffffffbffffffff
TEST_PKRR_OP(kslra32.u, x8, x13, x25, 0x0000000000000000, 0x080000ffffffef, 0xfffffffbffffffff, x13, x3, 208, x2)

inst_31:
// rs1==x8, rs2==x16, rd==x10, rs2_val == -8589934593, rs1_w1_val == 268435456
// opcode: kslra32.u ; op1:x8; op2:x16; dest:x10; op1val:0x1000000000080000;  op2val:0xfffffffdffffffff
TEST_PKRR_OP(kslra32.u, x10, x8, x16, 0x0000000000000000, 0x1000000000080000, 0xfffffffdffffffff, x8, x3, 224, x2)

inst_32:
// rs2_val == -4294967297, rs1_w1_val == 4286578687, rs1_w0_val == 4294967039
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffffffeff;  op2val:0xfffffffeffffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffffeff, 0xfffffffeffffffff, x30, x3, 240, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_33:
// rs2_val == -2147483649, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000080;  op2val:0xffffffff7fffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x01000000000080, 0xffffffff7fffffff, x30, x1, 0, x2)

inst_34:
// rs2_val == -1073741825, rs1_w1_val == 256, rs1_w0_val == 16777216
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00010001000000;  op2val:0xffffffffbfffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00010001000000, 0xffffffffbfffffff, x30, x1, 16, x2)

inst_35:
// rs2_val == -536870913, rs1_w0_val == 536870912
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000920000000;  op2val:0xffffffffdfffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00000920000000, 0xffffffffdfffffff, x30, x1, 32, x2)

inst_36:
// rs2_val == -268435457, rs1_w0_val == 4294443007
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffff7ffff;  op2val:0xffffffffefffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffffffbffff7ffff, 0xffffffffefffffff, x30, x1, 48, x2)

inst_37:
// rs2_val == -134217729, rs1_w1_val == 128, rs1_w0_val == 4227858431
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000080fbffffff;  op2val:0xfffffffff7ffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x000080fbffffff, 0xfffffffff7ffffff, x30, x1, 64, x2)

inst_38:
// rs2_val == -67108865, rs1_w1_val == 4290772991
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00004000;  op2val:0xfffffffffbffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffbfffff00004000, 0xfffffffffbffffff, x30, x1, 80, x2)

inst_39:
// rs2_val == -33554433, rs1_w0_val == 4294967231, rs1_w1_val == 4294836223
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffffbf;  op2val:0xfffffffffdffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffffbf, 0xfffffffffdffffff, x30, x1, 96, x2)

inst_40:
// rs2_val == -16777217, rs1_w1_val == 16
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffff7fff;  op2val:0xfffffffffeffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x000010ffff7fff, 0xfffffffffeffffff, x30, x1, 112, x2)

inst_41:
// rs2_val == -8388609, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff0000000a;  op2val:0xffffffffff7fffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xefffffff0000000a, 0xffffffffff7fffff, x30, x1, 128, x2)

inst_42:
// rs2_val == -4194305, rs1_w1_val == 67108864, rs1_w0_val == 4293918719
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000000ffefffff;  op2val:0xffffffffffbfffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x4000000ffefffff, 0xffffffffffbfffff, x30, x1, 144, x2)

inst_43:
// rs2_val == -2097153, rs1_w0_val == 4294967295
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000006ffffffff;  op2val:0xffffffffffdfffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x000006ffffffff, 0xffffffffffdfffff, x30, x1, 160, x2)

inst_44:
// rs2_val == -1048577, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00010020000000;  op2val:0xffffffffffefffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00010020000000, 0xffffffffffefffff, x30, x1, 176, x2)

inst_45:
// rs2_val == -524289, rs1_w0_val == 4261412863
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffdffffff;  op2val:0xfffffffffff7ffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfdfffffffdffffff, 0xfffffffffff7ffff, x30, x1, 192, x2)

inst_46:
// rs2_val == -262145, rs1_w0_val == 4096
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00001000;  op2val:0xfffffffffffbffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfdffffff00001000, 0xfffffffffffbffff, x30, x1, 208, x2)

inst_47:
// rs2_val == -131073, rs1_w1_val == 4293918719, rs1_w0_val == 4294967167
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffffff7f;  op2val:0xfffffffffffdffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffefffffffffff7f, 0xfffffffffffdffff, x30, x1, 224, x2)

inst_48:
// rs2_val == -65537, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x08000008000000;  op2val:0xfffffffffffeffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x08000008000000, 0xfffffffffffeffff, x30, x1, 240, x2)

inst_49:
// rs2_val == -32769, rs1_w1_val == 4294950911
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000400;  op2val:0xffffffffffff7fff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000400, 0xffffffffffff7fff, x30, x1, 256, x2)

inst_50:
// rs2_val == -16385, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000003fbffffff;  op2val:0xffffffffffffbfff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x000003fbffffff, 0xffffffffffffbfff, x30, x1, 272, x2)

inst_51:
// rs2_val == -8193, rs1_w1_val == 4, rs1_w0_val == 3221225471
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000004bfffffff;  op2val:0xffffffffffffdfff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x000004bfffffff, 0xffffffffffffdfff, x30, x1, 288, x2)

inst_52:
// rs2_val == -4097, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000010ffffff7f;  op2val:0xffffffffffffefff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x000010ffffff7f, 0xffffffffffffefff, x30, x1, 304, x2)

inst_53:
// rs2_val == -2049, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffeff;  op2val:0xfffffffffffff7ff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffeff, 0xfffffffffffff7ff, x30, x1, 320, x2)

inst_54:
// rs2_val == -1025, rs1_w1_val == 4294967294, rs1_w0_val == 1431655765
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe55555555;  op2val:0xfffffffffffffbff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffffe55555555, 0xfffffffffffffbff, x30, x1, 336, x2)

inst_55:
// rs2_val == -513, rs1_w1_val == 536870912
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffeffff;  op2val:0xfffffffffffffdff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x20000000fffeffff, 0xfffffffffffffdff, x30, x1, 352, x2)

inst_56:
// rs2_val == -257, rs1_w0_val == 131072, rs1_w1_val == 32
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00002000020000;  op2val:0xfffffffffffffeff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00002000020000, 0xfffffffffffffeff, x30, x1, 368, x2)

inst_57:
// rs2_val == -129, rs1_w1_val == 4278190079
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff55555555;  op2val:0xffffffffffffff7f
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfeffffff55555555, 0xffffffffffffff7f, x30, x1, 384, x2)

inst_58:
// rs2_val == -65, rs1_w0_val == 4160749567
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000ff7ffffff;  op2val:0xffffffffffffffbf
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00000ff7ffffff, 0xffffffffffffffbf, x30, x1, 400, x2)

inst_59:
// rs2_val == -33, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffff7ff;  op2val:0xffffffffffffffdf
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x200000fffff7ff, 0xffffffffffffffdf, x30, x1, 416, x2)

inst_60:
// rs2_val == -17, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x400000000400000;  op2val:0xffffffffffffffef
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x400000000400000, 0xffffffffffffffef, x30, x1, 432, x2)

inst_61:
// rs2_val == -9, rs1_w0_val == 2863311530
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000006aaaaaaaa;  op2val:0xfffffffffffffff7
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x000006aaaaaaaa, 0xfffffffffffffff7, x30, x1, 448, x2)

inst_62:
// rs2_val == -5, rs1_w0_val == 4026531839
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000020efffffff;  op2val:0xfffffffffffffffb
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x000020efffffff, 0xfffffffffffffffb, x30, x1, 464, x2)

inst_63:
// rs2_val == -3, rs1_w0_val == 268435456
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000e10000000;  op2val:0xfffffffffffffffd
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00000e10000000, 0xfffffffffffffffd, x30, x1, 480, x2)

inst_64:
// rs1_w0_val == 32, rs2_val == 8388608
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000300000020;  op2val:0x800000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00000300000020, 0x800000, x30, x1, 496, x2)

inst_65:
// rs1_w0_val == 16, rs2_val == 262144
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000010;  op2val:0x40000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000010, 0x40000, x30, x1, 512, x2)

inst_66:
// rs1_w0_val == 4, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000004;  op2val:0xffffffffffbfffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x02000000000004, 0xffffffffffbfffff, x30, x1, 528, x2)

inst_67:
// rs1_w0_val == 2, rs2_val == 1099511627776
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000c00000002;  op2val:0x10000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00000c00000002, 0x10000000000, x30, x1, 544, x2)

inst_68:
// rs1_w0_val == 1, rs2_val == 4503599627370496, rs1_w1_val == 4292870143
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000001;  op2val:0x10000000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000001, 0x10000000000000, x30, x1, 560, x2)

inst_69:
// rs1_w0_val == 0, rs2_val == 2048
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000000;  op2val:0x800
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000000, 0x800, x30, x1, 576, x2)

inst_70:
// rs2_val == -6148914691236517206, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000d00000001;  op2val:0xaaaaaaaaaaaaaaaa
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00000d00000001, 0xaaaaaaaaaaaaaaaa, x30, x1, 592, x2)

inst_71:
// rs2_val == -2, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffff7ffffff;  op2val:0xfffffffffffffffe
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffffbffff7ffffff, 0xfffffffffffffffe, x30, x1, 608, x2)

inst_72:
// rs2_val == -9223372036854775808, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000010000000;  op2val:0x8000000000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x40000010000000, 0x8000000000000000, x30, x1, 624, x2)

inst_73:
// rs2_val == 4611686018427387904, rs1_w0_val == 4294836223
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffdffff;  op2val:0x4000000000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffdffffffffdffff, 0x4000000000000000, x30, x1, 640, x2)

inst_74:
// rs2_val == 2305843009213693952, rs1_w0_val == 4290772991
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x020000ffbfffff;  op2val:0x2000000000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x020000ffbfffff, 0x2000000000000000, x30, x1, 656, x2)

inst_75:
// rs2_val == 1152921504606846976, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff0000000e;  op2val:0x1000000000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffdffff0000000e, 0x1000000000000000, x30, x1, 672, x2)

inst_76:
// rs2_val == 576460752303423488, rs1_w1_val == 8388608
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffbfffff;  op2val:0x800000000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x800000ffbfffff, 0x800000000000000, x30, x1, 688, x2)

inst_77:
// rs2_val == 288230376151711744, rs1_w1_val == 4294966783
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000007;  op2val:0x400000000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000007, 0x400000000000000, x30, x1, 704, x2)

inst_78:
// rs2_val == 144115188075855872, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x40000008000000;  op2val:0x200000000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x40000008000000, 0x200000000000000, x30, x1, 720, x2)

inst_79:
// rs2_val == 72057594037927936, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x0000100000000a;  op2val:0x100000000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x0000100000000a, 0x100000000000000, x30, x1, 736, x2)

inst_80:
// rs2_val == 36028797018963968, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x080000ffffffbf;  op2val:0x80000000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x080000ffffffbf, 0x80000000000000, x30, x1, 752, x2)

inst_81:
// rs2_val == 18014398509481984, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fff7ffff;  op2val:0x40000000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x1000000fff7ffff, 0x40000000000000, x30, x1, 768, x2)

inst_82:
// rs2_val == 9007199254740992, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000002;  op2val:0x20000000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000002, 0x20000000000000, x30, x1, 784, x2)

inst_83:
// rs2_val == 2251799813685248, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffaaaaaaaa;  op2val:0x8000000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffdffffaaaaaaaa, 0x8000000000000, x30, x1, 800, x2)

inst_84:
// rs2_val == 1125899906842624, rs1_w1_val == 4227858431, rs1_w0_val == 262144
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00040000;  op2val:0x4000000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfbffffff00040000, 0x4000000000000, x30, x1, 816, x2)

inst_85:
// rs2_val == 562949953421312, rs1_w1_val == 4294967293
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00004000;  op2val:0x2000000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffffd00004000, 0x2000000000000, x30, x1, 832, x2)

inst_86:
// rs2_val == 281474976710656, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffdff;  op2val:0x1000000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x1000000fffffdff, 0x1000000000000, x30, x1, 848, x2)

inst_87:
// rs2_val == 140737488355328, rs1_w0_val == 8388608
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00800000;  op2val:0x800000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffbfffff00800000, 0x800000000000, x30, x1, 864, x2)

inst_88:
// rs2_val == 70368744177664, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000003;  op2val:0x400000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000003, 0x400000000000, x30, x1, 880, x2)

inst_89:
// rs2_val == 35184372088832, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffdffff;  op2val:0x200000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x2000000fffdffff, 0x200000000000, x30, x1, 896, x2)

inst_90:
// rs2_val == 17592186044416, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffaaaaaaaa;  op2val:0x100000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffdfffffaaaaaaaa, 0x100000000000, x30, x1, 912, x2)

inst_91:
// rs2_val == 8796093022208, rs1_w0_val == 4294950911
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000fffffbfff;  op2val:0x80000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00000fffffbfff, 0x80000000000, x30, x1, 928, x2)

inst_92:
// rs2_val == 4398046511104, rs1_w0_val == 4294967293
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x10000000fffffffd;  op2val:0x40000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x10000000fffffffd, 0x40000000000, x30, x1, 944, x2)

inst_93:
// rs2_val == 2199023255552, rs1_w0_val == 256
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000100;  op2val:0x20000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00000700000100, 0x20000000000, x30, x1, 960, x2)

inst_94:
// rs2_val == 549755813888, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000011;  op2val:0x8000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x80000000000011, 0x8000000000, x30, x1, 976, x2)

inst_95:
// rs2_val == 274877906944, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000000;  op2val:0x4000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffefffff00000000, 0x4000000000, x30, x1, 992, x2)

inst_96:
// rs2_val == 137438953472, rs1_w1_val == 4294966271
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000005;  op2val:0x2000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000005, 0x2000000000, x30, x1, 1008, x2)

inst_97:
// rs2_val == 68719476736, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffffffbf;  op2val:0x1000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffbffffffffbf, 0x1000000000, x30, x1, 1024, x2)

inst_98:
// rs2_val == 34359738368, rs1_w1_val == 8
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x0000080000000e;  op2val:0x800000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x0000080000000e, 0x800000000, x30, x1, 1040, x2)

inst_99:
// rs2_val == 17179869184, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff02000000;  op2val:0x400000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffffefff02000000, 0x400000000, x30, x1, 1056, x2)

inst_100:
// rs2_val == 8589934592, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000b55555555;  op2val:0x200000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00000b55555555, 0x200000000, x30, x1, 1072, x2)

inst_101:
// rs2_val == 4294967296, rs1_w1_val == 4096
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffffdff;  op2val:0x100000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x001000fffffdff, 0x100000000, x30, x1, 1088, x2)

inst_102:
// rs2_val == 2147483648, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000700000005;  op2val:0x80000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00000700000005, 0x80000000, x30, x1, 1104, x2)

inst_103:
// rs2_val == 1073741824, rs1_w1_val == 4294705151
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffbfffff;  op2val:0x40000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffbffffffbfffff, 0x40000000, x30, x1, 1120, x2)

inst_104:
// rs2_val == 536870912, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000006;  op2val:0x20000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000006, 0x20000000, x30, x1, 1136, x2)

inst_105:
// rs2_val == 268435456, rs1_w0_val == 4294967263
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000003ffffffdf;  op2val:0x10000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x000003ffffffdf, 0x10000000, x30, x1, 1152, x2)

inst_106:
// rs2_val == 1, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffffffd;  op2val:0x1
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffbffffffffffffd, 0x1, x30, x1, 1168, x2)

inst_107:
// rs1_w1_val == 1431655765, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500040000;  op2val:0xffffffffffdfffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x5555555500040000, 0xffffffffffdfffff, x30, x1, 1184, x2)

inst_108:
// rs1_w1_val == 2147483647, rs1_w0_val == 32768
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00008000;  op2val:0x10000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x7fffffff00008000, 0x10000000000, x30, x1, 1200, x2)

inst_109:
// rs1_w1_val == 3758096383, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffefffff;  op2val:0x1000000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xdfffffffffefffff, 0x1000000000000, x30, x1, 1216, x2)

inst_110:
// rs1_w1_val == 4294901759, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000000;  op2val:0xfffffeffffffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000000, 0xfffffeffffffffff, x30, x1, 1232, x2)

inst_111:
// rs1_w1_val == 4294934527, rs1_w0_val == 2147483647
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff7fffffff;  op2val:0xfeffffffffffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffff7fff7fffffff, 0xfeffffffffffffff, x30, x1, 1248, x2)

inst_112:
// rs1_w1_val == 4294959103, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffffffffd;  op2val:0xffdfffffffffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffffdffffffffffd, 0xffdfffffffffffff, x30, x1, 1264, x2)

inst_113:
// rs2_val == 32, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd02000000;  op2val:0x20
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffffd02000000, 0x20, x30, x1, 1280, x2)

inst_114:
// rs1_w1_val == 4294967167, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000013;  op2val:0xfffffeffffffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000013, 0xfffffeffffffffff, x30, x1, 1296, x2)

inst_115:
// rs1_w1_val == 4294967263, rs2_val == 64
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdff7ffffff;  op2val:0x40
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffffffdff7ffffff, 0x40, x30, x1, 1312, x2)

inst_116:
// rs1_w1_val == 4294967287, rs1_w0_val == 4278190079, rs2_val == 33554432
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7feffffff;  op2val:0x2000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffff7feffffff, 0x2000000, x30, x1, 1328, x2)

inst_117:
// rs1_w1_val == 4294967291, rs1_w0_val == 4294959103
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffdfff;  op2val:0xffffffffbfffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffdfff, 0xffffffffbfffffff, x30, x1, 1344, x2)

inst_118:
// rs1_w1_val == 2147483648, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000009;  op2val:0xffffffffbfffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x8000000000000009, 0xffffffffbfffffff, x30, x1, 1360, x2)

inst_119:
// rs1_w1_val == 134217728, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffdffff;  op2val:0xffffffffffffdfff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x8000000fffdffff, 0xffffffffffffdfff, x30, x1, 1376, x2)

inst_120:
// rs1_w1_val == 1048576, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000400;  op2val:0xfffbffffffffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x10000000000400, 0xfffbffffffffffff, x30, x1, 1392, x2)

inst_121:
// rs1_w1_val == 262144, rs1_w0_val == 4294967287
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffffff7;  op2val:0x400000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x040000fffffff7, 0x400000000, x30, x1, 1408, x2)

inst_122:
// rs1_w1_val == 32768, rs2_val == 1024
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffffffbf;  op2val:0x400
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x008000ffffffbf, 0x400, x30, x1, 1424, x2)

inst_123:
// rs1_w1_val == 16384, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00400000004000;  op2val:0xffffffffbfffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00400000004000, 0xffffffffbfffffff, x30, x1, 1440, x2)

inst_124:
// rs1_w1_val == 2048, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x0008007fffffff;  op2val:0x40000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x0008007fffffff, 0x40000000, x30, x1, 1456, x2)

inst_125:
// rs1_w1_val == 1024, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00040001000000;  op2val:0xfffffffffffffbff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00040001000000, 0xfffffffffffffbff, x30, x1, 1472, x2)

inst_126:
// rs1_w1_val == 512, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000020;  op2val:0xffffffffffbfffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00020000000020, 0xffffffffffbfffff, x30, x1, 1488, x2)

inst_127:
// rs1_w1_val == 2, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000200020000;  op2val:0xffffffffefffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00000200020000, 0xffffffffefffffff, x30, x1, 1504, x2)

inst_128:
// rs1_w1_val == 0, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000011;  op2val:0x100000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00000000000011, 0x100000000, x30, x1, 1520, x2)

inst_129:
// rs1_w0_val == 4294705151, rs2_val == 1048576
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000002fffbffff;  op2val:0x100000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x000002fffbffff, 0x100000, x30, x1, 1536, x2)

inst_130:
// rs1_w0_val == 4294963199, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffffefff;  op2val:0x3
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffffdffffefff, 0x3, x30, x1, 1552, x2)

inst_131:
// rs1_w0_val == 4294966271, rs2_val == 4
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffffbff;  op2val:0x4
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x2000000fffffbff, 0x4, x30, x1, 1568, x2)

inst_132:
// rs2_val == 128, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffffff7;  op2val:0x80
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffffffbffffffff7, 0x80, x30, x1, 1584, x2)

inst_133:
// rs1_w0_val == 512, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000200;  op2val:0x10000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffefffff00000200, 0x10000000000, x30, x1, 1600, x2)

inst_134:
// rs1_w0_val == 4294967291, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffffffb;  op2val:0x0
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x80000000fffffffb, 0x0, x30, x1, 1616, x2)

inst_135:
// rs2_val == 134217728, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000200;  op2val:0x8000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xefffffff00000200, 0x8000000, x30, x1, 1632, x2)

inst_136:
// rs2_val == 67108864, rs1_w0_val == 1048576
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00100000;  op2val:0x4000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffffe00100000, 0x4000000, x30, x1, 1648, x2)

inst_137:
// rs1_w0_val == 4294967294, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000006fffffffe;  op2val:0xffffffffbfffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x000006fffffffe, 0xffffffffbfffffff, x30, x1, 1664, x2)

inst_138:
// rs1_w0_val == 2147483648, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000d80000000;  op2val:0xffffffffffffbfff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00000d80000000, 0xffffffffffffbfff, x30, x1, 1680, x2)

inst_139:
// rs1_w0_val == 1073741824, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x5555555540000000;  op2val:0x100000000000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x5555555540000000, 0x100000000000000, x30, x1, 1696, x2)

inst_140:
// rs2_val == 16777216, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffaaaaaaaa;  op2val:0x1000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffff7ffaaaaaaaa, 0x1000000, x30, x1, 1712, x2)

inst_141:
// rs2_val == 4194304, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000007fffffbff;  op2val:0x400000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x000007fffffbff, 0x400000, x30, x1, 1728, x2)

inst_142:
// rs2_val == 2097152, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff0000000a;  op2val:0x200000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffbffff0000000a, 0x200000, x30, x1, 1744, x2)

inst_143:
// rs2_val == 524288, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x020000bfffffff;  op2val:0x80000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x020000bfffffff, 0x80000, x30, x1, 1760, x2)

inst_144:
// rs2_val == 131072, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x000005fffffbff;  op2val:0x20000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x000005fffffbff, 0x20000, x30, x1, 1776, x2)

inst_145:
// rs2_val == 65536, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x020000fff7ffff;  op2val:0x10000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x020000fff7ffff, 0x10000, x30, x1, 1792, x2)

inst_146:
// rs2_val == 32768, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000008;  op2val:0x8000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00000200000008, 0x8000, x30, x1, 1808, x2)

inst_147:
// rs2_val == 16384, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000f20000000;  op2val:0x4000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00000f20000000, 0x4000, x30, x1, 1824, x2)

inst_148:
// rs2_val == 8192, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000000b;  op2val:0x2000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x200000000000000b, 0x2000, x30, x1, 1840, x2)

inst_149:
// rs2_val == 4096, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x04000004000000;  op2val:0x1000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x04000004000000, 0x1000, x30, x1, 1856, x2)

inst_150:
// rs2_val == 512, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000006;  op2val:0x200
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000006, 0x200, x30, x1, 1872, x2)

inst_151:
// rs2_val == 256, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffffff;  op2val:0x100
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x80000000ffffffff, 0x100, x30, x1, 1888, x2)

inst_152:
// rs1_w0_val == 8192, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00002000;  op2val:0xfffffffffffffeff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffffdfff00002000, 0xfffffffffffffeff, x30, x1, 1904, x2)

inst_153:
// rs1_w0_val == 2048, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000800;  op2val:0x80000000
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x00010000000800, 0x80000000, x30, x1, 1920, x2)

inst_154:
// rs2_val == 16, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000010;  op2val:0x10
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000010, 0x10, x30, x1, 1936, x2)

inst_155:
// rs2_val == 8, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffffff7;  op2val:0x8
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xbffffffffffffff7, 0x8, x30, x1, 1952, x2)

inst_156:
// rs2_val == 2, 
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000004;  op2val:0x2
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x20000000000004, 0x2, x30, x1, 1968, x2)

inst_157:
// rs2_val == -4611686018427387905, rs1_w0_val == 3758096383, rs1_w1_val == 4294967231
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfdfffffff;  op2val:0xbfffffffffffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xffffffbfdfffffff, 0xbfffffffffffffff, x30, x1, 1984, x2)

inst_158:
// rs2_val == -2305843009213693953, rs1_w1_val == 1073741824, rs1_w0_val == 65536
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000010000;  op2val:0xdfffffffffffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x4000000000010000, 0xdfffffffffffffff, x30, x1, 2000, x2)

inst_159:
// rs2_val == -72057594037927937, rs1_w0_val == 2097152, rs1_w1_val == 4160749567
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00200000;  op2val:0xfeffffffffffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00200000, 0xfeffffffffffffff, x30, x1, 2016, x2)

inst_160:
// rs2_val == -8796093022209, rs1_w1_val == 4294965247
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffdfffffff;  op2val:0xfffff7ffffffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0xfffff7ffdfffffff, 0xfffff7ffffffffff, x30, x1, 2032, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_161:
// rs2_val == -549755813889, rs1_w0_val == 4292870143, rs1_w1_val == 65536
// opcode: kslra32.u ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffdfffff;  op2val:0xffffff7fffffffff
TEST_PKRR_OP(kslra32.u, x31, x30, x29, 0x0000000000000000, 0x010000ffdfffff, 0xffffff7fffffffff, x30, x1, 0, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x1_2:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x1_3:
    .fill 2*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
