
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smalbb instruction of the RISC-V RV64PZicsr extension for the smalbb covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smalbb)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x17,signature_x17_1)

inst_0:
// rs1 == rd != rs2, rs1==x6, rs2==x9, rd==x6, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val == 256, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 16384, rs1_h1_val == -513, rs2_h3_val == 21845
// opcode: smalbb ; op1:x6; op2:x9; dest:x6; op1val:0x0100fff9fdff8000;  op2val:0x5555fff8c0004000
TEST_P64_PNN_OP(smalbb, x6, $rd_hi, x6, x9, 0x0000000000000000, $correctval_hi, 0x0100fff9fdff8000, 0x5555fff8c0004000, x17, 0, x25)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x30, rs2==x24, rd==x16, rs1_h3_val == rs2_h3_val, rs2_h1_val == 2, rs1_h1_val == -2, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -2, rs2_h2_val == -5, rs1_h2_val == -21846, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == -5, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == -8193, rs1_h3_val == -2
// opcode: smalbb ; op1:x30; op2:x24; dest:x16; op1val:0xfffeaaaafffedfff;  op2val:0xfffefffb0002fffb
TEST_P64_PNN_OP(smalbb, x16, $rd_hi, x30, x24, 0x0000000000000000, $correctval_hi, 0xfffeaaaafffedfff, 0xfffefffb0002fffb, x17, 16, x25)

inst_2:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x10, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h0_val == 4096, rs2_h2_val == -17, rs2_h1_val == -17, rs1_h3_val == -33, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -129
// opcode: smalbb ; op1:x26; op2:x26; dest:x10; op1val:0xffdffff8ff7f1000;  op2val:0x0009ffefffef0007
TEST_P64_PNN_OP(smalbb, x10, $rd_hi, x26, x26, 0x0000000000000000, $correctval_hi, 0xffdffff8ff7f1000, 0x0009ffefffef0007, x17, 32, x25)

inst_3:
// rs1 == rs2 == rd, rs1==x20, rs2==x20, rd==x20, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 1024, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h0_val == 32, rs2_h1_val == 8192, rs2_h0_val == 8192, rs1_h1_val == -65, rs2_h2_val == 2
// opcode: smalbb ; op1:x20; op2:x20; dest:x20; op1val:0x04000009ffbf0020;  op2val:0xfffc000220002000
TEST_P64_PNN_OP(smalbb, x20, $rd_hi, x20, x20, 0x0000000000000000, $correctval_hi, 0x04000009ffbf0020, 0xfffc000220002000, x17, 48, x25)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x28, rd==x28, rs1_h2_val == rs2_h2_val, rs1_h0_val == -17, rs2_h1_val == -1, rs2_h2_val == -129, rs1_h3_val == 1, rs2_h0_val == -257, rs1_h2_val == -129, rs1_h1_val == -9
// opcode: smalbb ; op1:x5; op2:x28; dest:x28; op1val:0x0001ff7ffff7ffef;  op2val:0x0009ff7ffffffeff
TEST_P64_PNN_OP(smalbb, x28, $rd_hi, x5, x28, 0x0000000000000000, $correctval_hi, 0x0001ff7ffff7ffef, 0x0009ff7ffffffeff, x17, 64, x25)

inst_5:
// rs1==x3, rs2==x19, rd==x22, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val == 21845, rs1_h0_val == 8, rs1_h1_val == -8193, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == 32
// opcode: smalbb ; op1:x3; op2:x19; dest:x22; op1val:0x5555fffadfff0008;  op2val:0xfffe00030020fffb
TEST_P64_PNN_OP(smalbb, x22, $rd_hi, x3, x19, 0x0000000000000000, $correctval_hi, 0x5555fffadfff0008, 0xfffe00030020fffb, x17, 80, x25)

inst_6:
// rs1==x14, rs2==x8, rd==x4, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h0_val == -5, rs2_h1_val == -8193, rs1_h2_val == 21845, rs2_h2_val == -2, rs2_h3_val == 64
// opcode: smalbb ; op1:x14; op2:x8; dest:x4; op1val:0x55555555fdfffffb;  op2val:0x0040fffedfff0005
TEST_P64_PNN_OP(smalbb, x4, $rd_hi, x14, x8, 0x0000000000000000, $correctval_hi, 0x55555555fdfffffb, 0x0040fffedfff0005, x17, 96, x25)

inst_7:
// rs1==x8, rs2==x6, rd==x24, rs1_h1_val == rs2_h1_val, rs2_h1_val == 21845, rs2_h0_val == -21846, rs1_h2_val == 512, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 21845, rs2_h2_val == 256, rs2_h3_val == -16385, rs1_h0_val == -513
// opcode: smalbb ; op1:x8; op2:x6; dest:x24; op1val:0xfffe02005555fdff;  op2val:0xbfff01005555aaaa
TEST_P64_PNN_OP(smalbb, x24, $rd_hi, x8, x6, 0x0000000000000000, $correctval_hi, 0xfffe02005555fdff, 0xbfff01005555aaaa, x17, 112, x25)

inst_8:
// rs1==x2, rs2==x7, rd==x8, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val == -1, rs1_h3_val == -32768, rs2_h3_val == -9
// opcode: smalbb ; op1:x2; op2:x7; dest:x8; op1val:0x8000ffff0005fff8;  op2val:0xfff70005fff8aaaa
TEST_P64_PNN_OP(smalbb, x8, $rd_hi, x2, x7, 0x0000000000000000, $correctval_hi, 0x8000ffff0005fff8, 0xfff70005fff8aaaa, x17, 128, x25)

inst_9:
// rs1==x1, rs2==x13, rd==x14, rs1_h0_val == rs2_h0_val, rs1_h0_val == 8192, rs1_h2_val == -4097, rs2_h2_val == 16, rs2_h3_val == -1
// opcode: smalbb ; op1:x1; op2:x13; dest:x14; op1val:0x0007effffff72000;  op2val:0xffff00103fff2000
TEST_P64_PNN_OP(smalbb, x14, $rd_hi, x1, x13, 0x0000000000000000, $correctval_hi, 0x0007effffff72000, 0xffff00103fff2000, x17, 144, x25)

inst_10:
// rs1==x12, rs2==x3, rd==x18, rs2_h3_val == -21846, rs1_h1_val == -5, rs2_h1_val == -3, rs1_h2_val == 128
// opcode: smalbb ; op1:x12; op2:x3; dest:x18; op1val:0x00070080fffbc000;  op2val:0xaaaa3ffffffd0007
TEST_P64_PNN_OP(smalbb, x18, $rd_hi, x12, x3, 0x0000000000000000, $correctval_hi, 0x00070080fffbc000, 0xaaaa3ffffffd0007, x17, 160, x25)

inst_11:
// rs1==x9, rs2==x5, rd==x30, rs2_h3_val == 32767, rs2_h2_val == 64, rs2_h0_val == -33, rs1_h2_val == 4096
// opcode: smalbb ; op1:x9; op2:x5; dest:x30; op1val:0xfff81000fff63fff;  op2val:0x7fff00400007ffdf
TEST_P64_PNN_OP(smalbb, x30, $rd_hi, x9, x5, 0x0000000000000000, $correctval_hi, 0xfff81000fff63fff, 0x7fff00400007ffdf, x17, 176, x25)

inst_12:
// rs1==x21, rs2==x23, rd==x2, rs2_h3_val == -8193, rs2_h1_val == 16384, rs1_h0_val == 64
// opcode: smalbb ; op1:x21; op2:x23; dest:x2; op1val:0x0005ff7f00070040;  op2val:0xdfff01004000fff9
TEST_P64_PNN_OP(smalbb, x2, $rd_hi, x21, x23, 0x0000000000000000, $correctval_hi, 0x0005ff7f00070040, 0xdfff01004000fff9, x17, 192, x25)

inst_13:
// rs1==x28, rs2==x15, rd==x26, rs2_h3_val == -4097, rs2_h1_val == 0, rs1_h3_val == 64, rs2_h2_val == -33, rs1_h2_val == 32, rs1_h0_val == 256, rs2_h0_val == 2048
// opcode: smalbb ; op1:x28; op2:x15; dest:x26; op1val:0x00400020fff60100;  op2val:0xefffffdf00000800
TEST_P64_PNN_OP(smalbb, x26, $rd_hi, x28, x15, 0x0000000000000000, $correctval_hi, 0x00400020fff60100, 0xefffffdf00000800, x17, 208, x25)

inst_14:
// rs1==x24, rs2==x18, rd==x12, rs2_h3_val == -2049, rs2_h2_val == 8192, rs1_h3_val == -257, rs1_h2_val == -5, rs1_h0_val == -2
// opcode: smalbb ; op1:x24; op2:x18; dest:x12; op1val:0xfefffffbff7ffffe;  op2val:0xf7ff20004000aaaa
TEST_P64_PNN_OP(smalbb, x12, $rd_hi, x24, x18, 0x0000000000000000, $correctval_hi, 0xfefffffbff7ffffe, 0xf7ff20004000aaaa, x17, 224, x25)

inst_15:
// rs1==x27, rs2==x11, rs2_h3_val == -1025, rs2_h2_val == -1, rs1_h1_val == 32767, rs1_h0_val == -1, rs2_h1_val == 1024, rs1_h3_val == -3
// opcode: smalbb ; op1:x27; op2:x11; dest:x12; op1val:0xfffdff7f7fffffff;  op2val:0xfbffffff0400ffdf
TEST_P64_PNN_OP(smalbb, x12, $rd_hi, x27, x11, 0x0000000000000000, $correctval_hi, 0xfffdff7f7fffffff, 0xfbffffff0400ffdf, x17, 240, x25)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_16:
// rs1==x10, rs2==x2, rs2_h3_val == -513, rs1_h0_val == 128, rs1_h2_val == -16385, rs1_h1_val == -2049, rs2_h2_val == 8, rs1_h3_val == 16384
// opcode: smalbb ; op1:x10; op2:x2; dest:x27; op1val:0x4000bffff7ff0080;  op2val:0xfdff00085555c000
TEST_P64_PNN_OP(smalbb, x27, $rd_hi, x10, x2, 0x0000000000000000, $correctval_hi, 0x4000bffff7ff0080, 0xfdff00085555c000, x5, 0, x8)

inst_17:
// rs1==x7, rs2==x14, rs2_h3_val == -257, rs1_h3_val == 512, rs1_h0_val == -129, rs2_h0_val == 512, rs1_h2_val == 32767
// opcode: smalbb ; op1:x7; op2:x14; dest:x3; op1val:0x02007ffffdffff7f;  op2val:0xfefffffefffc0200
TEST_P64_PNN_OP(smalbb, x3, $rd_hi, x7, x14, 0x0000000000000000, $correctval_hi, 0x02007ffffdffff7f, 0xfefffffefffc0200, x5, 16, x8)

inst_18:
// rs1==x18, rs2==x4, rs2_h3_val == -129, rs2_h2_val == -9, rs2_h0_val == -1025, rs2_h1_val == -9
// opcode: smalbb ; op1:x18; op2:x4; dest:x23; op1val:0x0200c00000090040;  op2val:0xff7ffff7fff7fbff
TEST_P64_PNN_OP(smalbb, x23, $rd_hi, x18, x4, 0x0000000000000000, $correctval_hi, 0x0200c00000090040, 0xff7ffff7fff7fbff, x5, 32, x8)

inst_19:
// rs1==x4, rs2==x16, rs2_h3_val == -65, rs1_h1_val == 8192, rs2_h1_val == 2048
// opcode: smalbb ; op1:x4; op2:x16; dest:x22; op1val:0x3fff000320000008;  op2val:0xffbffffb0800fffc
TEST_P64_PNN_OP(smalbb, x22, $rd_hi, x4, x16, 0x0000000000000000, $correctval_hi, 0x3fff000320000008, 0xffbffffb0800fffc, x5, 48, x8)

inst_20:
// rs1==x23, rs2==x12, rs2_h3_val == -33, rs1_h3_val == -8193, rs2_h2_val == -513, rs2_h0_val == 21845, rs2_h1_val == -2049
// opcode: smalbb ; op1:x23; op2:x12; dest:x29; op1val:0xdfff000900051000;  op2val:0xffdffdfff7ff5555
TEST_P64_PNN_OP(smalbb, x29, $rd_hi, x23, x12, 0x0000000000000000, $correctval_hi, 0xdfff000900051000, 0xffdffdfff7ff5555, x5, 64, x8)

inst_21:
// rs1==x15, rs2==x0, rs2_h3_val == -17, rs2_h2_val == -8193, rs2_h0_val == -2
// opcode: smalbb ; op1:x15; op2:x0; dest:x14; op1val:0x55550009dfff2000;  op2val:0xffefdffffff8fffe
TEST_P64_PNN_OP(smalbb, x14, $rd_hi, x15, x0, 0x0000000000000000, $correctval_hi, 0x55550009dfff2000, 0xffefdffffff8fffe, x5, 80, x8)

inst_22:
// rs1==x17, rs2==x10, rs2_h3_val == -5, rs1_h2_val == 8192, rs1_h0_val == 32767, rs2_h2_val == -257, rs1_h1_val == 2
// opcode: smalbb ; op1:x17; op2:x10; dest:x18; op1val:0x0100200000027fff;  op2val:0xfffbfefffffd0007
TEST_P64_PNN_OP(smalbb, x18, $rd_hi, x17, x10, 0x0000000000000000, $correctval_hi, 0x0100200000027fff, 0xfffbfefffffd0007, x5, 96, x8)

inst_23:
// rs1==x19, rs2==x1, rs2_h3_val == -3, rs1_h0_val == -21846, rs2_h2_val == 2048, rs1_h1_val == -33
// opcode: smalbb ; op1:x19; op2:x1; dest:x26; op1val:0x0001bfffffdfaaaa;  op2val:0xfffd08000400fff6
TEST_P64_PNN_OP(smalbb, x26, $rd_hi, x19, x1, 0x0000000000000000, $correctval_hi, 0x0001bfffffdfaaaa, 0xfffd08000400fff6, x5, 112, x8)

inst_24:
// rs1==x13, rs2==x22, rs2_h3_val == -32768, rs2_h1_val == -5, rs2_h2_val == 32, rs1_h1_val == 512
// opcode: smalbb ; op1:x13; op2:x22; dest:x20; op1val:0x0009fff90200fff8;  op2val:0x80000020fffb3fff
TEST_P64_PNN_OP(smalbb, x20, $rd_hi, x13, x22, 0x0000000000000000, $correctval_hi, 0x0009fff90200fff8, 0x80000020fffb3fff, x5, 128, x8)

inst_25:
// rs1==x25, rs2==x17, rs2_h3_val == 16384, rs2_h0_val == -32768, rs2_h2_val == 4, rs1_h3_val == 4096, rs2_h1_val == 8
// opcode: smalbb ; op1:x25; op2:x17; dest:x29; op1val:0x10005555fffb0080;  op2val:0x4000000400088000
TEST_P64_PNN_OP(smalbb, x29, $rd_hi, x25, x17, 0x0000000000000000, $correctval_hi, 0x10005555fffb0080, 0x4000000400088000, x5, 144, x8)

inst_26:
// rs1==x11, rs2==x27, rs2_h3_val == 8192, rs2_h1_val == -65, rs1_h2_val == 1, rs1_h3_val == -9
// opcode: smalbb ; op1:x11; op2:x27; dest:x10; op1val:0xfff7000100060009;  op2val:0x2000fff6ffbffffa
TEST_P64_PNN_OP(smalbb, x10, $rd_hi, x11, x27, 0x0000000000000000, $correctval_hi, 0xfff7000100060009, 0x2000fff6ffbffffa, x5, 160, x8)

inst_27:
// rs1==x31, rs2==x25, rs2_h3_val == 4096, rs2_h0_val == -8193, rs1_h1_val == -21846, rs1_h3_val == 8192
// opcode: smalbb ; op1:x31; op2:x25; dest:x6; op1val:0x2000fffcaaaa0003;  op2val:0x1000fff9fffadfff
TEST_P64_PNN_OP(smalbb, x6, $rd_hi, x31, x25, 0x0000000000000000, $correctval_hi, 0x2000fffcaaaa0003, 0x1000fff9fffadfff, x5, 176, x8)

inst_28:
// rs1==x22, rs2==x21, rs2_h3_val == 2048, rs2_h1_val == -257, rs2_h2_val == -2049, rs1_h2_val == 4
// opcode: smalbb ; op1:x22; op2:x21; dest:x27; op1val:0x00050004ffdffff6;  op2val:0x0800f7fffeff3fff
TEST_P64_PNN_OP(smalbb, x27, $rd_hi, x22, x21, 0x0000000000000000, $correctval_hi, 0x00050004ffdffff6, 0x0800f7fffeff3fff, x5, 192, x8)

inst_29:
// rs1==x29, rs2==x31, rs2_h3_val == 1024, rs2_h0_val == 2
// opcode: smalbb ; op1:x29; op2:x31; dest:x26; op1val:0x0100c000aaaaff7f;  op2val:0x04003fff00080002
TEST_P64_PNN_OP(smalbb, x26, $rd_hi, x29, x31, 0x0000000000000000, $correctval_hi, 0x0100c000aaaaff7f, 0x04003fff00080002, x5, 208, x8)

inst_30:
// rs1==x16, rs2==x29, rs2_h3_val == 512, rs1_h0_val == -4097, rs1_h1_val == -1
// opcode: smalbb ; op1:x16; op2:x29; dest:x12; op1val:0x3ffffff8ffffefff;  op2val:0x02000020fffbfbff
TEST_P64_PNN_OP(smalbb, x12, $rd_hi, x16, x29, 0x0000000000000000, $correctval_hi, 0x3ffffff8ffffefff, 0x02000020fffbfbff, x5, 224, x8)

inst_31:
// rs1==x0, rs2==x30, rs2_h3_val == 256, rs2_h0_val == -1, rs2_h1_val == -129, rs1_h3_val == -5, rs1_h2_val == 2048
// opcode: smalbb ; op1:x0; op2:x30; dest:x12; op1val:0xfffb08000005ffff;  op2val:0x01002000ff7fffff
TEST_P64_PNN_OP(smalbb, x12, $rd_hi, x0, x30, 0x0000000000000000, $correctval_hi, 0xfffb08000005ffff, 0x01002000ff7fffff, x5, 240, x8)

inst_32:
// rs2_h3_val == 128, rs1_h2_val == -32768
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x40008000ffbf0080;  op2val:0x0080fff63ffffffc
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x40008000ffbf0080, 0x0080fff63ffffffc, x5, 256, x1)

inst_33:
// rs2_h3_val == 32, rs2_h1_val == 1, rs1_h1_val == 2048, rs1_h3_val == 32767, rs1_h0_val == 2, rs2_h0_val == -3, rs2_h2_val == 128
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000508000002;  op2val:0x002000800001fffd
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fff000508000002, 0x002000800001fffd, x5, 272, x1)

inst_34:
// rs2_h3_val == 16, rs2_h0_val == 8, rs1_h3_val == -2049, rs1_h1_val == -16385, rs1_h0_val == 1, rs1_h2_val == -2
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffebfff0001;  op2val:0x0010fffc00000008
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7fffffebfff0001, 0x0010fffc00000008, x5, 288, x1)

inst_35:
// rs2_h3_val == 8, rs1_h1_val == -32768, rs2_h2_val == -21846, rs1_h3_val == -4097, rs2_h0_val == 128
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xefff555580001000;  op2val:0x0008aaaafeff0080
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xefff555580001000, 0x0008aaaafeff0080, x5, 304, x1)

inst_36:
// rs1_h1_val == -3, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffefffdfffc;  op2val:0xfffcaaaafff80002
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffafffefffdfffc, 0xfffcaaaafff80002, x5, 320, x1)

inst_37:
// rs1_h1_val == 16384, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffa4000ffef;  op2val:0xfffe000500083fff
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7fffa4000ffef, 0xfffe000500083fff, x5, 336, x1)

inst_38:
// rs1_h1_val == 4096, rs2_h0_val == -65, rs2_h1_val == -513, rs1_h0_val == -1025, rs1_h3_val == -17
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xffef00041000fbff;  op2val:0x0009c000fdffffbf
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffef00041000fbff, 0x0009c000fdffffbf, x5, 352, x1)

inst_39:
// rs1_h1_val == 1024, rs2_h0_val == 1024, rs2_h1_val == 64
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x0009fff80400dfff;  op2val:0xfefffffa00400400
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0009fff80400dfff, 0xfefffffa00400400, x5, 368, x1)

inst_40:
// rs1_h1_val == 256, rs1_h0_val == -3
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffb0100fffd;  op2val:0xfffcfffcfeff3fff
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3ffffffb0100fffd, 0xfffcfffcfeff3fff, x5, 384, x1)

inst_41:
// rs1_h1_val == 128, rs1_h3_val == 4, rs1_h2_val == -33, rs1_h0_val == 2048, rs2_h0_val == 4096
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x0004ffdf00800800;  op2val:0x00400800fffd1000
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0004ffdf00800800, 0x00400800fffd1000, x5, 400, x1)

inst_42:
// rs1_h1_val == 64, rs1_h0_val == 16384, rs1_h2_val == 16, rs2_h0_val == -4097, rs1_h3_val == -65, rs2_h1_val == 256
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xffbf001000404000;  op2val:0xfbfffffa0100efff
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbf001000404000, 0xfbfffffa0100efff, x5, 416, x1)

inst_43:
// rs1_h1_val == 32, rs2_h3_val == 1, rs1_h2_val == 2
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x000400020020ff7f;  op2val:0x0001ffdf0003fbff
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000400020020ff7f, 0x0001ffdf0003fbff, x5, 432, x1)

inst_44:
// rs1_h1_val == 16, rs2_h2_val == -16385, rs2_h0_val == 4, rs1_h3_val == -1025, rs1_h2_val == -1025, rs2_h3_val == 0
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffbff0010fffc;  op2val:0x0000bffffff80004
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfbfffbff0010fffc, 0x0000bffffff80004, x5, 448, x1)

inst_45:
// rs1_h1_val == 8, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xc000020000080007;  op2val:0x0080bffffffd0008
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xc000020000080007, 0x0080bffffffd0008, x5, 464, x1)

inst_46:
// rs1_h1_val == 4, rs2_h2_val == 0
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffdf00040005;  op2val:0xf7ff0000ff7f0003
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7ffdf00040005, 0xf7ff0000ff7f0003, x5, 480, x1)

inst_47:
// rs1_h1_val == 1, rs2_h2_val == 32767
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xffbfbfff00014000;  op2val:0x08007ffffff6fff6
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbfbfff00014000, 0x08007ffffff6fff6, x5, 496, x1)

inst_48:
// rs1_h1_val == 0, rs2_h1_val == -21846
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x000500100000fffe;  op2val:0x3fff0006aaaa0008
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000500100000fffe, 0x3fff0006aaaa0008, x5, 512, x1)

inst_49:
// rs1_h0_val == 21845, rs2_h0_val == -17, rs1_h2_val == -513
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x0003fdff00025555;  op2val:0x40000000f7ffffef
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0003fdff00025555, 0x40000000f7ffffef, x5, 528, x1)

inst_50:
// rs1_h0_val == -16385, rs2_h0_val == 16, rs2_h2_val == 512
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x0100fffe0200bfff;  op2val:0xfdff0200fff90010
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0100fffe0200bfff, 0xfdff0200fff90010, x5, 544, x1)

inst_51:
// rs1_h0_val == -2049, rs2_h3_val == 2
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffcff7fdffff7ff;  op2val:0x000202003fff0002
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffcff7fdffff7ff, 0x000202003fff0002, x5, 560, x1)

inst_52:
// rs1_h0_val == -257, rs2_h0_val == 32
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x0400fdff0020feff;  op2val:0x5555000700200020
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0400fdff0020feff, 0x5555000700200020, x5, 576, x1)

inst_53:
// rs1_h0_val == -65, rs1_h3_val == -129
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xff7f00208000ffbf;  op2val:0x4000ffdfc000fffd
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7f00208000ffbf, 0x4000ffdfc000fffd, x5, 592, x1)

inst_54:
// rs1_h0_val == -33, rs1_h3_val == 32, rs2_h2_val == 1
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x0020ff7fffbfffdf;  op2val:0x8000000100060010
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020ff7fffbfffdf, 0x8000000100060010, x5, 608, x1)

inst_55:
// rs1_h0_val == -9, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x7fffefff0020fff7;  op2val:0x10000001fff70007
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fffefff0020fff7, 0x10000001fff70007, x5, 624, x1)

inst_56:
// rs1_h0_val == 1024, rs2_h0_val == -16385, rs1_h2_val == -9
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fff755550400;  op2val:0x7fff0007ffbfbfff
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7fff755550400, 0x7fff0007ffbfbfff, x5, 640, x1)

inst_57:
// rs2_h1_val == 4, rs1_h1_val == -17
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0200ffefaaaa;  op2val:0x000202000004ffdf
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7f0200ffefaaaa, 0x000202000004ffdf, x5, 656, x1)

inst_58:
// rs2_h0_val == 32767, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x000400050040fffb;  op2val:0xfff80020fffc7fff
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x000400050040fffb, 0xfff80020fffc7fff, x5, 672, x1)

inst_59:
// rs2_h0_val == -2049, rs2_h2_val == -3
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xff7fff7f00000100;  op2val:0xffeffffd0040f7ff
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff7fff7f00000100, 0xffeffffd0040f7ff, x5, 688, x1)

inst_60:
// rs2_h0_val == -513, rs1_h3_val == -513
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0200ff7fc000;  op2val:0xfff6aaaa0002fdff
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdff0200ff7fc000, 0xfff6aaaa0002fdff, x5, 704, x1)

inst_61:
// rs2_h0_val == -129, rs1_h3_val == -21846
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0001bffffffa;  op2val:0x0008fefff7ffff7f
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaa0001bffffffa, 0x0008fefff7ffff7f, x5, 720, x1)

inst_62:
// rs2_h0_val == -9, rs2_h2_val == 4096, rs2_h1_val == -33
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x0040000220001000;  op2val:0x00071000ffdffff7
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0040000220001000, 0x00071000ffdffff7, x5, 736, x1)

inst_63:
// rs2_h0_val == 256, rs2_h3_val == 4
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffbffffeffffb;  op2val:0x0004fefffeff0100
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3ffffbffffeffffb, 0x0004fefffeff0100, x5, 752, x1)

inst_64:
// rs2_h0_val == 64, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x3fff8000ffdf0009;  op2val:0xfffb0008fff70040
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3fff8000ffdf0009, 0xfffb0008fff70040, x5, 768, x1)

inst_65:
// rs2_h0_val == 1, rs1_h2_val == -8193
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x1000dffffff60002;  op2val:0xffff200020000001
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x1000dffffff60002, 0xffff200020000001, x5, 784, x1)

inst_66:
// rs2_h0_val == 0, rs2_h2_val == 21845
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffefffc0040;  op2val:0x00045555fffd0000
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3ffffffefffc0040, 0x00045555fffd0000, x5, 800, x1)

inst_67:
// rs1_h0_val == 512, rs2_h1_val == 16
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x0009000700400200;  op2val:0x008000080010aaaa
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0009000700400200, 0x008000080010aaaa, x5, 816, x1)

inst_68:
// rs1_h3_val == -16385, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xbfffdffffff8bfff;  op2val:0xfeff00030002bfff
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbfffdffffff8bfff, 0xfeff00030002bfff, x5, 832, x1)

inst_69:
// rs1_h0_val == 16, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff555500400010;  op2val:0xffdf55553fff0009
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ff555500400010, 0xffdf55553fff0009, x5, 848, x1)

inst_70:
// rs1_h0_val == 4, rs1_h1_val == -1025, rs2_h2_val == -4097, rs1_h3_val == 8
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x0008fffffbff0004;  op2val:0xc000efff00000003
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0008fffffbff0004, 0xc000efff00000003, x5, 864, x1)

inst_71:
// rs1_h0_val == 0, rs1_h2_val == -3, rs1_h3_val == 16
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x0010fffd00020000;  op2val:0x7fffefff0007ffdf
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0010fffd00020000, 0x7fffefff0007ffdf, x5, 880, x1)

inst_72:
// rs1_h3_val == 2048, rs2_h1_val == -4097
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x0800efffdfffaaaa;  op2val:0xfff6ffefefffffdf
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0800efffdfffaaaa, 0xfff6ffefefffffdf, x5, 896, x1)

inst_73:
// rs1_h3_val == 128, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x0080fffffdffbfff;  op2val:0x0007ff7f0004fdff
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0080fffffdffbfff, 0x0007ff7f0004fdff, x5, 912, x1)

inst_74:
// rs2_h2_val == -1025, rs1_h2_val == 0
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xdfff00000004feff;  op2val:0x0000fbff08005555
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdfff00000004feff, 0x0000fbff08005555, x5, 928, x1)

inst_75:
// rs2_h2_val == -65, rs2_h1_val == 128
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fff9c000ffff;  op2val:0x8000ffbf00800009
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff7fff9c000ffff, 0x8000ffbf00800009, x5, 944, x1)

inst_76:
// rs1_h3_val == 2, rs1_h2_val == -17, rs2_h2_val == -32768
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x0002ffeffffbfff7;  op2val:0x01008000aaaa4000
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0002ffeffffbfff7, 0x01008000aaaa4000, x5, 960, x1)

inst_77:
// rs1_h3_val == 0, rs1_h2_val == 64, rs2_h1_val == 32767
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x0000004020000800;  op2val:0x000255557fffaaaa
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0000004020000800, 0x000255557fffaaaa, x5, 976, x1)

inst_78:
// rs1_h3_val == -1, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff84000ffff;  op2val:0xfeff00020080fffc
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffffff84000ffff, 0xfeff00020080fffc, x5, 992, x1)

inst_79:
// rs2_h2_val == 16384, rs1_h2_val == 16384
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa4000ffff8000;  op2val:0xfffe4000f7ffbfff
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaaaa4000ffff8000, 0xfffe4000f7ffbfff, x5, 1008, x1)

inst_80:
// rs1_h2_val == -2049, rs2_h1_val == 4096
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xffeff7fffffd0009;  op2val:0x000100051000fdff
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffeff7fffffd0009, 0x000100051000fdff, x5, 1024, x1)

inst_81:
// rs2_h1_val == 512, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x00400005fdff4000;  op2val:0x3ffffffb0200aaaa
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00400005fdff4000, 0x3ffffffb0200aaaa, x5, 1040, x1)

inst_82:
// rs2_h1_val == -16385, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff6ffbf0010;  op2val:0x3fff7fffbfff0006
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffbffff6ffbf0010, 0x3fff7fffbfff0006, x5, 1056, x1)

inst_83:
// rs1_h2_val == 1024, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x040004000003fffe;  op2val:0xffff4000dfff1000
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x040004000003fffe, 0xffff4000dfff1000, x5, 1072, x1)

inst_84:
// rs1_h2_val == 256, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0100c000c000;  op2val:0x0009fffa0005efff
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3fff0100c000c000, 0x0009fffa0005efff, x5, 1088, x1)

inst_85:
// rs2_h1_val == -1025, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x5555dffffffcfff8;  op2val:0x0003fffbfbff4000
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x5555dffffffcfff8, 0x0003fffbfbff4000, x5, 1104, x1)

inst_86:
// rs1_h2_val == 8, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x0008000801000200;  op2val:0x000200050001c000
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0008000801000200, 0x000200050001c000, x5, 1120, x1)

inst_87:
// rs2_h1_val == -2, rs1_h1_val == -257
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x0020fffbfefffffd;  op2val:0x00000005fffefeff
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0020fffbfefffffd, 0x00000005fffefeff, x5, 1136, x1)

inst_88:
// rs2_h1_val == -32768, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xfff80400fff6fffd;  op2val:0x008000098000fff7
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff80400fff6fffd, 0x008000098000fff7, x5, 1152, x1)

inst_89:
// rs1_h2_val == -65, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffcffbf0010fff8;  op2val:0xfff8200000800001
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffcffbf0010fff8, 0xfff8200000800001, x5, 1168, x1)

inst_90:
// rs2_h2_val == 1024, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xdffff7ffaaaafdff;  op2val:0xffff0400fff7fff7
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdffff7ffaaaafdff, 0xffff0400fff7fff7, x5, 1184, x1)

inst_91:
// rs1_h2_val == -257, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x0003fefffff8f7ff;  op2val:0x08000006fff7fffe
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0003fefffff8f7ff, 0x08000006fff7fffe, x5, 1200, x1)

inst_92:
// rs1_h1_val == -4097, 
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x00404000efff0009;  op2val:0xfffb0009fffafffc
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00404000efff0009, 0xfffb0009fffafffc, x5, 1216, x1)

inst_93:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h0_val == 4096, rs2_h2_val == -17, rs2_h1_val == -17, rs1_h3_val == -33, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h1_val == -129
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff8ff7f1000;  op2val:0x0009ffefffef0007
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xffdffff8ff7f1000, 0x0009ffefffef0007, x5, 1232, x1)

inst_94:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 1024, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h0_val == 32, rs2_h1_val == 8192, rs2_h0_val == 8192, rs1_h1_val == -65, rs2_h2_val == 2
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x04000009ffbf0020;  op2val:0xfffc000220002000
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x04000009ffbf0020, 0xfffc000220002000, x5, 1248, x1)

inst_95:
// rs2_h3_val == -17, rs2_h2_val == -8193, rs2_h0_val == -2
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0x55550009dfff2000;  op2val:0xffefdffffff8fffe
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x55550009dfff2000, 0xffefdffffff8fffe, x5, 1264, x1)

inst_96:
// rs2_h3_val == 256, rs2_h0_val == -1, rs2_h1_val == -129, rs1_h3_val == -5, rs1_h2_val == 2048
// opcode: smalbb ; op1:x30; op2:x29; dest:x31; op1val:0xfffb08000005ffff;  op2val:0x01002000ff7fffff
TEST_P64_PNN_OP(smalbb, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfffb08000005ffff, 0x01002000ff7fffff, x5, 1280, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x17_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x17_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 162*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
