
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sra8 instruction of the RISC-V RV64PZicsr extension for the sra8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sra8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x3, rs2==x24, rd==x3, rs2_val == 5, rs1_b7_val == 127, rs1_b1_val == -17, rs1_b2_val == -128
// opcode: sra8 ; op1:x3; op2:x24; dest:x3; op1val:0x7fc0fcc0fc80ef03;  op2val:0x5
TEST_RR_OP(sra8, x3, x3, x24, 0x0000000000000000, 0x7fc0fcc0fc80ef03, 0x5, x2, 0, x11)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x7, rs2==x16, rd==x29, rs2_val == 3, rs1_b3_val == -1, rs1_b2_val == -65, rs1_b5_val == -86, rs1_b4_val == -1, rs1_b7_val == 2
// opcode: sra8 ; op1:x7; op2:x16; dest:x29; op1val:0x2faaaffffbf05f6;  op2val:0x3
TEST_RR_OP(sra8, x29, x7, x16, 0x0000000000000000, 0x2faaaffffbf05f6, 0x3, x2, 8, x11)

inst_2:
// rs1 == rs2 != rd, rs1==x10, rs2==x10, rd==x27, rs2_val == 6, rs1_b1_val == 127, rs1_b6_val == 64, rs1_b7_val == -2, rs1_b0_val == 127, rs1_b5_val == 4
// opcode: sra8 ; op1:x10; op2:x10; dest:x27; op1val:0xfe40040903fa7f7f;  op2val:0x6
TEST_RR_OP(sra8, x27, x10, x10, 0x0000000000000000, 0xfe40040903fa7f7f, 0x6, x2, 16, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x6, rs2==x6, rd==x6, rs2_val == 4, rs1_b5_val == 0, rs1_b7_val == 85, rs1_b3_val == -86, rs1_b0_val == -3, rs1_b2_val == 1
// opcode: sra8 ; op1:x6; op2:x6; dest:x6; op1val:0x553f0007aa0103fd;  op2val:0x4
TEST_RR_OP(sra8, x6, x6, x6, 0x0000000000000000, 0x553f0007aa0103fd, 0x4, x2, 24, x11)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x23, rd==x23, rs2_val == 2, rs1_b1_val == 64, rs1_b2_val == 32, rs1_b3_val == -3
// opcode: sra8 ; op1:x5; op2:x23; dest:x23; op1val:0xf807faf9fd2040fd;  op2val:0x2
TEST_RR_OP(sra8, x23, x5, x23, 0x0000000000000000, 0xf807faf9fd2040fd, 0x2, x2, 32, x11)

inst_5:
// rs1==x12, rs2==x8, rd==x21, rs2_val == 1, rs1_b6_val == -9, rs1_b2_val == -86, rs1_b1_val == 32
// opcode: sra8 ; op1:x12; op2:x8; dest:x21; op1val:0x7ff7f8c0ffaa207f;  op2val:0x1
TEST_RR_OP(sra8, x21, x12, x8, 0x0000000000000000, 0x7ff7f8c0ffaa207f, 0x1, x2, 40, x11)

inst_6:
// rs1==x1, rs2==x21, rd==x13, rs1_b7_val == -86, rs1_b5_val == 127, rs1_b2_val == 4, rs1_b1_val == -9, rs1_b0_val == 16
// opcode: sra8 ; op1:x1; op2:x21; dest:x13; op1val:0xaa407fc0fa04f710;  op2val:0xd
TEST_RR_OP(sra8, x13, x1, x21, 0x0000000000000000, 0xaa407fc0fa04f710, 0xd, x2, 48, x11)

inst_7:
// rs1==x17, rs2==x0, rd==x8, rs1_b7_val == -65, rs1_b2_val == -9, rs1_b5_val == -65, rs1_b6_val == 2, rs1_b3_val == 64
// opcode: sra8 ; op1:x17; op2:x0; dest:x8; op1val:0xbf02bf0540f706f9;  op2val:0x0
TEST_RR_OP(sra8, x8, x17, x0, 0x0000000000000000, 0xbf02bf0540f706f9, 0x0, x2, 56, x11)

inst_8:
// rs1==x29, rs2==x13, rd==x28, rs1_b7_val == -33, rs1_b4_val == -5, rs1_b0_val == -5
// opcode: sra8 ; op1:x29; op2:x13; dest:x28; op1val:0xdfc0aafb0705f8fb;  op2val:0xb
TEST_RR_OP(sra8, x28, x29, x13, 0x0000000000000000, 0xdfc0aafb0705f8fb, 0xb, x2, 64, x11)

inst_9:
// rs1==x24, rs2==x31, rd==x14, rs1_b7_val == -17, rs1_b6_val == 1, rs1_b4_val == 32
// opcode: sra8 ; op1:x24; op2:x31; dest:x14; op1val:0xef01fa2003f7fafb;  op2val:0x4
TEST_RR_OP(sra8, x14, x24, x31, 0x0000000000000000, 0xef01fa2003f7fafb, 0x4, x2, 72, x11)

inst_10:
// rs1==x23, rs2==x17, rd==x16, rs1_b7_val == -9, rs1_b0_val == -9, rs1_b1_val == -1, rs1_b6_val == -3, rs1_b2_val == -3
// opcode: sra8 ; op1:x23; op2:x17; dest:x16; op1val:0xf7fd0420fffdfff7;  op2val:0x1
TEST_RR_OP(sra8, x16, x23, x17, 0x0000000000000000, 0xf7fd0420fffdfff7, 0x1, x2, 80, x11)

inst_11:
// rs1==x15, rs2==x9, rd==x26, rs1_b7_val == -5, rs1_b3_val == 127, rs1_b4_val == -3, rs1_b0_val == -1
// opcode: sra8 ; op1:x15; op2:x9; dest:x26; op1val:0xfbc0c0fd7fc0efff;  op2val:0xb
TEST_RR_OP(sra8, x26, x15, x9, 0x0000000000000000, 0xfbc0c0fd7fc0efff, 0xb, x2, 88, x11)

inst_12:
// rs1==x9, rs2==x29, rd==x4, rs1_b7_val == -3, rs1_b5_val == -1, rs1_b2_val == 127, rs1_b0_val == 64
// opcode: sra8 ; op1:x9; op2:x29; dest:x4; op1val:0xfd03ffff037fef40;  op2val:0x13
TEST_RR_OP(sra8, x4, x9, x29, 0x0000000000000000, 0xfd03ffff037fef40, 0x13, x2, 96, x11)

inst_13:
// rs1==x25, rs2==x28, rd==x18, rs1_b7_val == -128, rs1_b3_val == -128, rs1_b0_val == 1, rs1_b4_val == 16
// opcode: sra8 ; op1:x25; op2:x28; dest:x18; op1val:0x80f6f91080f6ef01;  op2val:0x5
TEST_RR_OP(sra8, x18, x25, x28, 0x0000000000000000, 0x80f6f91080f6ef01, 0x5, x2, 104, x11)

inst_14:
// rs1==x31, rs2==x5, rd==x19, rs1_b7_val == 64, rs1_b2_val == -5, rs1_b6_val == 0, rs1_b4_val == -128
// opcode: sra8 ; op1:x31; op2:x5; dest:x19; op1val:0x40000080c0fbffff;  op2val:0x5
TEST_RR_OP(sra8, x19, x31, x5, 0x0000000000000000, 0x40000080c0fbffff, 0x5, x2, 112, x11)

inst_15:
// rs1==x8, rs2==x22, rd==x30, rs1_b7_val == 32, rs1_b3_val == 8, rs1_b1_val == -3
// opcode: sra8 ; op1:x8; op2:x22; dest:x30; op1val:0x20f906f808fbfdf7;  op2val:0x11
TEST_RR_OP(sra8, x30, x8, x22, 0x0000000000000000, 0x20f906f808fbfdf7, 0x11, x2, 120, x5)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_16:
// rs1==x27, rs2==x3, rd==x1, rs1_b7_val == 16, rs1_b6_val == 8, rs1_b1_val == -33, rs1_b2_val == -2, rs1_b3_val == 2
// opcode: sra8 ; op1:x27; op2:x3; dest:x1; op1val:0x100809fa02fedf3f;  op2val:0x12
TEST_RR_OP(sra8, x1, x27, x3, 0x0000000000000000, 0x100809fa02fedf3f, 0x12, x6, 0, x5)

inst_17:
// rs1==x28, rs2==x19, rd==x24, rs1_b7_val == 8, rs1_b4_val == -9, rs1_b2_val == 64, rs1_b1_val == -86
// opcode: sra8 ; op1:x28; op2:x19; dest:x24; op1val:0x8f8fff7f840aafc;  op2val:0x10
TEST_RR_OP(sra8, x24, x28, x19, 0x0000000000000000, 0x8f8fff7f840aafc, 0x10, x6, 8, x5)

inst_18:
// rs1==x11, rs2==x2, rd==x0, rs1_b7_val == 4, rs1_b4_val == 8, rs1_b5_val == 16
// opcode: sra8 ; op1:x11; op2:x2; dest:x0; op1val:0x40610087faa09ff;  op2val:0x7
TEST_RR_OP(sra8, x0, x11, x2, 0x0000000000000000, 0x40610087faa09ff, 0x7, x6, 16, x5)

inst_19:
// rs1==x19, rs2==x4, rd==x11, rs1_b7_val == 1, rs1_b1_val == 16
// opcode: sra8 ; op1:x19; op2:x4; dest:x11; op1val:0x106fa0706401005;  op2val:0x1
TEST_RR_OP(sra8, x11, x19, x4, 0x0000000000000000, 0x106fa0706401005, 0x1, x6, 24, x5)

inst_20:
// rs1==x22, rs2==x27, rd==x20, rs1_b7_val == 0, rs1_b4_val == -86, rs1_b6_val == -128, rs1_b1_val == 85, rs1_b3_val == 85, rs1_b2_val == 0, rs1_b5_val == 1
// opcode: sra8 ; op1:x22; op2:x27; dest:x20; op1val:0x8001aa5500557f;  op2val:0xc
TEST_RR_OP(sra8, x20, x22, x27, 0x0000000000000000, 0x8001aa5500557f, 0xc, x6, 32, x5)

inst_21:
// rs1==x14, rs2==x15, rd==x10, rs1_b7_val == -1, 
// opcode: sra8 ; op1:x14; op2:x15; dest:x10; op1val:0xff40f80340fbdf03;  op2val:0x5
TEST_RR_OP(sra8, x10, x14, x15, 0x0000000000000000, 0xff40f80340fbdf03, 0x5, x6, 40, x5)

inst_22:
// rs1==x20, rs2==x18, rd==x2, rs1_b6_val == -86, rs1_b0_val == -65, rs1_b5_val == 2, rs1_b1_val == -2
// opcode: sra8 ; op1:x20; op2:x18; dest:x2; op1val:0x1aa02f608aafebf;  op2val:0x3
TEST_RR_OP(sra8, x2, x20, x18, 0x0000000000000000, 0x1aa02f608aafebf, 0x3, x6, 48, x5)

inst_23:
// rs1==x4, rs2==x26, rd==x15, rs1_b6_val == 85, rs1_b0_val == -2
// opcode: sra8 ; op1:x4; op2:x26; dest:x15; op1val:0x5555f810093fc0fe;  op2val:0x5
TEST_RR_OP(sra8, x15, x4, x26, 0x0000000000000000, 0x5555f810093fc0fe, 0x5, x6, 56, x5)

inst_24:
// rs1==x2, rs2==x11, rd==x12, rs1_b6_val == 127, rs1_b0_val == 8, rs1_b5_val == -2
// opcode: sra8 ; op1:x2; op2:x11; dest:x12; op1val:0x97ffef809fefa08;  op2val:0x13
TEST_RR_OP(sra8, x12, x2, x11, 0x0000000000000000, 0x97ffef809fefa08, 0x13, x6, 64, x5)

inst_25:
// rs1==x18, rs2==x1, rd==x9, rs1_b6_val == -65, rs1_b5_val == 64, rs1_b3_val == -5, rs1_b4_val == -17
// opcode: sra8 ; op1:x18; op2:x1; dest:x9; op1val:0x40bf40effbbffcfa;  op2val:0xc
TEST_RR_OP(sra8, x9, x18, x1, 0x0000000000000000, 0x40bf40effbbffcfa, 0xc, x6, 72, x5)

inst_26:
// rs1==x0, rs2==x20, rd==x22, rs1_b6_val == -33, rs1_b3_val == 1
// opcode: sra8 ; op1:x0; op2:x20; dest:x22; op1val:0x80df00f90105fd07;  op2val:0x11
TEST_RR_OP(sra8, x22, x0, x20, 0x0000000000000000, 0x80df00f90105fd07, 0x11, x6, 80, x5)

inst_27:
// rs1==x21, rs2==x25, rd==x31, rs1_b1_val == -65, rs1_b0_val == 4, rs1_b4_val == -33
// opcode: sra8 ; op1:x21; op2:x25; dest:x31; op1val:0xfcaafadf0820bf04;  op2val:0x9
TEST_RR_OP(sra8, x31, x21, x25, 0x0000000000000000, 0xfcaafadf0820bf04, 0x9, x6, 88, x5)

inst_28:
// rs1==x13, rs2==x30, rd==x7, rs1_b1_val == -5, rs1_b5_val == -33
// opcode: sra8 ; op1:x13; op2:x30; dest:x7; op1val:0x9f6dff7fcfdfb3f;  op2val:0x6
TEST_RR_OP(sra8, x7, x13, x30, 0x0000000000000000, 0x9f6dff7fcfdfb3f, 0x6, x6, 96, x5)

inst_29:
// rs1==x16, rs2==x12, rd==x25, rs1_b1_val == -128, rs1_b2_val == -1
// opcode: sra8 ; op1:x16; op2:x12; dest:x25; op1val:0x80dfdf08faff8004;  op2val:0x0
TEST_RR_OP(sra8, x25, x16, x12, 0x0000000000000000, 0x80dfdf08faff8004, 0x0, x6, 104, x5)

inst_30:
// rs1==x26, rs2==x14, rd==x5, rs1_b1_val == 8, rs1_b5_val == -9
// opcode: sra8 ; op1:x26; op2:x14; dest:x5; op1val:0xdf06f7f6800508f9;  op2val:0x4
TEST_RR_OP(sra8, x5, x26, x14, 0x0000000000000000, 0xdf06f7f6800508f9, 0x4, x6, 112, x2)

inst_31:
// rs1==x30, rs2==x7, rd==x17, rs1_b1_val == 4, rs1_b4_val == 2
// opcode: sra8 ; op1:x30; op2:x7; dest:x17; op1val:0x2060502aaf80409;  op2val:0x10
TEST_RR_OP(sra8, x17, x30, x7, 0x0000000000000000, 0x2060502aaf80409, 0x10, x6, 120, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs1_b1_val == 2, rs1_b2_val == 8, rs1_b6_val == -1
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfcff03f7c00802bf;  op2val:0x5
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0xfcff03f7c00802bf, 0x5, x1, 0, x2)

inst_33:
// rs1_b1_val == 1, rs1_b2_val == 85, rs1_b5_val == 8, rs1_b6_val == 16
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x3100802f85501fa;  op2val:0x12
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x3100802f85501fa, 0x12, x1, 8, x2)

inst_34:
// rs1_b1_val == 0, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x1c04010fdfd0010;  op2val:0xf
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x1c04010fdfd0010, 0xf, x1, 16, x2)

inst_35:
// rs1_b0_val == -86, rs1_b3_val == 16, rs1_b5_val == -5
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x8fafb0210c0f7aa;  op2val:0x7
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x8fafb0210c0f7aa, 0x7, x1, 24, x2)

inst_36:
// rs1_b0_val == 85, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x1f8ffef05400455;  op2val:0x5
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x1f8ffef05400455, 0x5, x1, 32, x2)

inst_37:
// rs1_b0_val == -33, rs1_b3_val == 0
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe0504ef000455df;  op2val:0x10
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0xfe0504ef000455df, 0x10, x1, 40, x2)

inst_38:
// rs1_b0_val == -17, rs1_b3_val == -17, rs1_b4_val == 0
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd7f4000efaa00ef;  op2val:0x2
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0xfd7f4000efaa00ef, 0x2, x1, 48, x2)

inst_39:
// rs1_b0_val == -128, rs1_b2_val == 2
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xaafffc02f802f880;  op2val:0xa
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0xaafffc02f802f880, 0xa, x1, 56, x2)

inst_40:
// rs1_b4_val == 85, rs1_b2_val == -17
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd060255c0efff7f;  op2val:0x13
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0xfd060255c0efff7f, 0x13, x1, 64, x2)

inst_41:
// rs1_b4_val == 127, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x9073f7f063f0807;  op2val:0x3
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x9073f7f063f0807, 0x3, x1, 72, x2)

inst_42:
// rs1_b4_val == -65, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f808bf00f6efaa;  op2val:0xd
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x7f808bf00f6efaa, 0xd, x1, 80, x2)

inst_43:
// rs1_b4_val == -2, rs1_b5_val == -128, rs1_b2_val == -33
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xef0180feaadf09f9;  op2val:0x12
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0xef0180feaadf09f9, 0x12, x1, 88, x2)

inst_44:
// rs1_b4_val == 64, rs1_b0_val == 0
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x550180404000fb00;  op2val:0xb
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x550180404000fb00, 0xb, x1, 96, x2)

inst_45:
// rs1_b4_val == 4, rs1_b3_val == 4
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f403f040407c040;  op2val:0xe
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x3f403f040407c040, 0xe, x1, 104, x2)

inst_46:
// rs1_b4_val == 1, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xff40fb01fcbffd10;  op2val:0x6
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0xff40fb01fcbffd10, 0x6, x1, 112, x2)

inst_47:
// rs1_b3_val == -65, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x55f7f940bf07bf04;  op2val:0x3
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x55f7f940bf07bf04, 0x3, x1, 120, x2)

inst_48:
// rs1_b3_val == -33, rs1_b0_val == 2
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x406fcefdf3f0602;  op2val:0x1
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x406fcefdf3f0602, 0x1, x1, 128, x2)

inst_49:
// rs1_b6_val == -5, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x9fbfb0701fafe08;  op2val:0x8
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x9fbfb0701fafe08, 0x8, x1, 136, x2)

inst_50:
// rs1_b3_val == 32, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x77f04802000f6f8;  op2val:0x0
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x77f04802000f6f8, 0x0, x1, 144, x2)

inst_51:
// rs1_b6_val == -2, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfef904dffa0710;  op2val:0xf
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0xfef904dffa0710, 0xf, x1, 152, x2)

inst_52:
// rs1_b6_val == 32, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x5520aa01010303fa;  op2val:0x10
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x5520aa01010303fa, 0x10, x1, 160, x2)

inst_53:
// rs1_b6_val == 4, rs1_b2_val == 16
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xef04f709ef1002f6;  op2val:0xf
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0xef04f709ef1002f6, 0xf, x1, 168, x2)

inst_54:
// rs1_b6_val == -17, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x80eff7fc7ff9fe55;  op2val:0x7
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x80eff7fc7ff9fe55, 0x7, x1, 176, x2)

inst_55:
// rs1_b5_val == -17, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf705effcaa0755bf;  op2val:0x10
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0xf705effcaa0755bf, 0x10, x1, 184, x2)

inst_56:
// rs1_b5_val == -3, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x93ffdfbdfef0508;  op2val:0xc
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x93ffdfbdfef0508, 0xc, x1, 192, x2)

inst_57:
// rs1_b3_val == -2, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf7fdf3ffedf07df;  op2val:0x13
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0xbf7fdf3ffedf07df, 0x13, x1, 200, x2)

inst_58:
// rs1_b5_val == 32, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x10fb20fef809f8c0;  op2val:0xb
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x10fb20fef809f8c0, 0xb, x1, 208, x2)

inst_59:
// rs1_b3_val == -9, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xf810fd06f7032004;  op2val:0x12
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0xf810fd06f7032004, 0x12, x1, 216, x2)

inst_60:
// rs1_b0_val == 32, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x2550201067f3f20;  op2val:0x13
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x2550201067f3f20, 0x13, x1, 224, x2)

inst_61:
// rs1_b5_val == 85, 
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xbffd553ffaf901c0;  op2val:0x12
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0xbffd553ffaf901c0, 0x12, x1, 232, x2)

inst_62:
// rs2_val == 6, rs1_b1_val == 127, rs1_b6_val == 64, rs1_b7_val == -2, rs1_b0_val == 127, rs1_b5_val == 4
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe40040903fa7f7f;  op2val:0x6
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0xfe40040903fa7f7f, 0x6, x1, 240, x2)

inst_63:
// rs2_val == 4, rs1_b5_val == 0, rs1_b7_val == 85, rs1_b3_val == -86, rs1_b0_val == -3, rs1_b2_val == 1
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x553f0007aa0103fd;  op2val:0x4
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x553f0007aa0103fd, 0x4, x1, 248, x2)

inst_64:
// rs1_b7_val == -65, rs1_b2_val == -9, rs1_b5_val == -65, rs1_b6_val == 2, rs1_b3_val == 64
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf02bf0540f706f9;  op2val:0x0
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0xbf02bf0540f706f9, 0x0, x1, 256, x2)

inst_65:
// rs1_b7_val == 4, rs1_b4_val == 8, rs1_b5_val == 16
// opcode: sra8 ; op1:x30; op2:x29; dest:x31; op1val:0x40610087faa09ff;  op2val:0x7
TEST_RR_OP(sra8, x31, x30, x29, 0x0000000000000000, 0x40610087faa09ff, 0x7, x1, 264, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 34*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
