
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kstsa16 instruction of the RISC-V RV64PZicsr extension for the kstsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kstsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x13,signature_x13_1)

inst_0:
// rs1 == rd != rs2, rs1==x0, rs2==x29, rd==x0, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val == 32, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs2_h3_val == 8192, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h2_val == -2049, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -9
// opcode: kstsa16 ; op1:x0; op2:x29; dest:x0; op1val:0x20f7fffff78000;  op2val:0x2000000500060009
TEST_PKRR_OP(kstsa16, x0, x0, x29, 0x0000000000000000, 0x20f7fffff78000, 0x2000000500060009, x0, x13, 0, x17)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x18, rs2==x4, rd==x23, rs1_h3_val == rs2_h3_val, rs1_h1_val == 16384, rs2_h0_val == -21846, rs1_h3_val == 0, rs1_h0_val == 32, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h3_val == 0, rs2_h2_val == 21845, rs2_h1_val == 8
// opcode: kstsa16 ; op1:x18; op2:x4; dest:x23; op1val:0x00fff640000020;  op2val:0x0055550008aaaa
TEST_PKRR_OP(kstsa16, x23, x18, x4, 0x0000000000000000, 0x00fff640000020, 0x0055550008aaaa, x18, x13, 16, x17)

inst_2:
// rs1 == rs2 != rd, rs1==x8, rs2==x8, rd==x11, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h0_val == -65, rs1_h0_val == 16, rs1_h3_val == -33, rs2_h2_val == 64, rs2_h3_val == 2, rs2_h1_val == 256
// opcode: kstsa16 ; op1:x8; op2:x8; dest:x11; op1val:0xffdffff6fffa0010;  op2val:0x0200400100ffbf
TEST_PKRR_OP(kstsa16, x11, x8, x8, 0x0000000000000000, 0xffdffff6fffa0010, 0x0200400100ffbf, x8, x13, 32, x17)

inst_3:
// rs1 == rs2 == rd, rs1==x19, rs2==x19, rd==x19, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h0_val == 16, rs2_h2_val == -4097, rs1_h0_val == -17, rs2_h3_val == -9, rs1_h2_val == 16, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h3_val == -2049, rs1_h1_val == 8, rs1_h1_val > 0 and rs2_h1_val < 0
// opcode: kstsa16 ; op1:x19; op2:x19; dest:x19; op1val:0xf7ff00100008ffef;  op2val:0xfff7efffc0000010
TEST_PKRR_OP(kstsa16, x19, x19, x19, 0x0000000000000000, 0xf7ff00100008ffef, 0xfff7efffc0000010, x19, x13, 48, x17)

inst_4:
// rs2 == rd != rs1, rs1==x23, rs2==x6, rd==x6, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == 1, rs1_h2_val == 128, rs2_h3_val == -2, rs1_h3_val == 32767, rs1_h0_val == 2048, rs2_h0_val == -3
// opcode: kstsa16 ; op1:x23; op2:x6; dest:x6; op1val:0x7fff008000050800;  op2val:0xfffefff80001fffd
TEST_PKRR_OP(kstsa16, x6, x23, x6, 0x0000000000000000, 0x7fff008000050800, 0xfffefff80001fffd, x23, x13, 64, x17)

inst_5:
// rs1==x10, rs2==x2, rd==x5, rs1_h2_val == rs2_h2_val, rs2_h2_val == -8193, rs1_h0_val == -16385, rs2_h0_val == 2, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h3_val == -513, rs1_h2_val == -8193, rs2_h3_val == 8, rs2_h1_val == 1024, rs1_h1_val == -129
// opcode: kstsa16 ; op1:x10; op2:x2; dest:x5; op1val:0xfdffdfffff7fbfff;  op2val:0x08dfff04000002
TEST_PKRR_OP(kstsa16, x5, x10, x2, 0x0000000000000000, 0xfdffdfffff7fbfff, 0x08dfff04000002, x10, x13, 80, x17)

inst_6:
// rs1==x12, rs2==x30, rd==x27, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h0_val == -33, rs1_h1_val == 256, rs1_h2_val == 1, rs2_h3_val == 2048, rs2_h0_val == 8192, rs2_h2_val == 1
// opcode: kstsa16 ; op1:x12; op2:x30; dest:x27; op1val:0x2000010100ffdf;  op2val:0x8000001fffc2000
TEST_PKRR_OP(kstsa16, x27, x12, x30, 0x0000000000000000, 0x2000010100ffdf, 0x8000001fffc2000, x12, x13, 96, x17)

inst_7:
// rs1==x25, rs2==x3, rd==x7, rs1_h1_val == rs2_h1_val, rs2_h0_val == -16385, rs1_h2_val == 4, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h0_val == -4097
// opcode: kstsa16 ; op1:x25; op2:x3; dest:x7; op1val:0xf7ff0004c000efff;  op2val:0xfff8fffcc000bfff
TEST_PKRR_OP(kstsa16, x7, x25, x3, 0x0000000000000000, 0xf7ff0004c000efff, 0xfff8fffcc000bfff, x25, x13, 112, x17)

inst_8:
// rs1==x15, rs2==x0, rd==x29, rs1_h0_val == rs2_h0_val, rs1_h1_val == -3, rs2_h0_val == -4097, rs2_h3_val == 256, rs1_h3_val == -129, rs2_h2_val == 4096, rs2_h1_val == 16
// opcode: kstsa16 ; op1:x15; op2:x0; dest:x29; op1val:0xff7ffff8fffdefff;  op2val:0x10010000010efff
TEST_PKRR_OP(kstsa16, x29, x15, x0, 0x0000000000000000, 0xff7ffff8fffdefff, 0x10010000010efff, x15, x13, 128, x17)

inst_9:
// rs1==x28, rs2==x24, rd==x22, rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 1024, rs2_h3_val == -8193, rs2_h1_val == -4097, rs2_h0_val == 512
// opcode: kstsa16 ; op1:x28; op2:x24; dest:x22; op1val:0xfff800093fff0400;  op2val:0xdffffff9efff0200
TEST_PKRR_OP(kstsa16, x22, x28, x24, 0x0000000000000000, 0xfff800093fff0400, 0xdffffff9efff0200, x28, x13, 144, x17)

inst_10:
// rs1==x30, rs2==x21, rd==x1, rs2_h3_val == -21846, rs1_h2_val == 512, rs1_h1_val == 128, rs2_h2_val == -5, rs1_h3_val == -3, rs2_h0_val == 4096
// opcode: kstsa16 ; op1:x30; op2:x21; dest:x1; op1val:0xfffd02000080c000;  op2val:0xaaaafffb00101000
TEST_PKRR_OP(kstsa16, x1, x30, x21, 0x0000000000000000, 0xfffd02000080c000, 0xaaaafffb00101000, x30, x13, 160, x17)

inst_11:
// rs1==x3, rs2==x9, rd==x24, rs2_h3_val == 21845, rs1_h3_val == 1024, rs1_h2_val == -33, rs2_h2_val == -1025, rs1_h1_val == 2
// opcode: kstsa16 ; op1:x3; op2:x9; dest:x24; op1val:0x400ffdf0002bfff;  op2val:0x5555fbff0100efff
TEST_PKRR_OP(kstsa16, x24, x3, x9, 0x0000000000000000, 0x400ffdf0002bfff, 0x5555fbff0100efff, x3, x13, 176, x17)

inst_12:
// rs1==x16, rs2==x14, rd==x26, rs2_h3_val == 32767, rs2_h0_val == 128, rs2_h1_val == -21846, rs1_h3_val == 1, rs1_h0_val == 8, rs1_h2_val == -32768
// opcode: kstsa16 ; op1:x16; op2:x14; dest:x26; op1val:0x018000fff60008;  op2val:0x7ffffffcaaaa0080
TEST_PKRR_OP(kstsa16, x26, x16, x14, 0x0000000000000000, 0x018000fff60008, 0x7ffffffcaaaa0080, x16, x13, 192, x17)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_13:
// rs1==x22, rs2==x7, rd==x21, rs2_h3_val == -16385, rs1_h0_val == -65, rs2_h1_val == -5, rs1_h2_val == -16385, rs1_h3_val == -5, rs2_h2_val == 16, rs2_h0_val == 256
// opcode: kstsa16 ; op1:x22; op2:x7; dest:x21; op1val:0xfffbbfffc000ffbf;  op2val:0xbfff0010fffb0100
TEST_PKRR_OP(kstsa16, x21, x22, x7, 0x0000000000000000, 0xfffbbfffc000ffbf, 0xbfff0010fffb0100, x22, x1, 0, x8)

inst_14:
// rs1==x5, rs2==x23, rd==x25, rs2_h3_val == -4097, rs2_h0_val == -8193, rs2_h2_val == 256
// opcode: kstsa16 ; op1:x5; op2:x23; dest:x25; op1val:0xff7ffff9fff8fff6;  op2val:0xefff0100efffdfff
TEST_PKRR_OP(kstsa16, x25, x5, x23, 0x0000000000000000, 0xff7ffff9fff8fff6, 0xefff0100efffdfff, x5, x1, 16, x8)

inst_15:
// rs1==x17, rs2==x12, rd==x18, rs2_h3_val == -2049, rs2_h2_val == -513, rs2_h0_val == 0, rs2_h1_val == -129, rs1_h3_val == -257, rs1_h1_val == 32767
// opcode: kstsa16 ; op1:x17; op2:x12; dest:x18; op1val:0xfefffff67ffffffa;  op2val:0xf7fffdffff7f0000
TEST_PKRR_OP(kstsa16, x18, x17, x12, 0x0000000000000000, 0xfefffff67ffffffa, 0xf7fffdffff7f0000, x17, x1, 32, x8)

inst_16:
// rs1==x14, rs2==x11, rd==x2, rs2_h3_val == -1025, rs1_h2_val == 0, rs2_h0_val == -5, rs2_h2_val == -129
// opcode: kstsa16 ; op1:x14; op2:x11; dest:x2; op1val:0xfffc0000fff6efff;  op2val:0xfbffff7ffff6fffb
TEST_PKRR_OP(kstsa16, x2, x14, x11, 0x0000000000000000, 0xfffc0000fff6efff, 0xfbffff7ffff6fffb, x14, x1, 48, x8)

inst_17:
// rs1==x6, rs2==x25, rd==x10, rs2_h3_val == -513, rs2_h1_val == -3, rs1_h2_val == -1025, rs1_h1_val == 16
// opcode: kstsa16 ; op1:x6; op2:x25; dest:x10; op1val:0x7ffffbff0010c000;  op2val:0xfdff0001fffdfffc
TEST_PKRR_OP(kstsa16, x10, x6, x25, 0x0000000000000000, 0x7ffffbff0010c000, 0xfdff0001fffdfffc, x6, x1, 64, x8)

inst_18:
// rs1==x2, rs2==x15, rd==x16, rs2_h3_val == -257, 
// opcode: kstsa16 ; op1:x2; op2:x15; dest:x16; op1val:0xffdf0200fff6fffa;  op2val:0xfeff01000400efff
TEST_PKRR_OP(kstsa16, x16, x2, x15, 0x0000000000000000, 0xffdf0200fff6fffa, 0xfeff01000400efff, x2, x1, 80, x8)

inst_19:
// rs1==x20, rs2==x13, rd==x9, rs2_h3_val == -129, rs1_h2_val == -5, rs2_h0_val == -513
// opcode: kstsa16 ; op1:x20; op2:x13; dest:x9; op1val:0xfffcfffb0005ffbf;  op2val:0xff7ffffb0010fdff
TEST_PKRR_OP(kstsa16, x9, x20, x13, 0x0000000000000000, 0xfffcfffb0005ffbf, 0xff7ffffb0010fdff, x20, x1, 96, x8)

inst_20:
// rs1==x13, rs2==x17, rd==x28, rs2_h3_val == -65, rs2_h2_val == 1024, rs1_h2_val == -21846
// opcode: kstsa16 ; op1:x13; op2:x17; dest:x28; op1val:0x09aaaafffd0005;  op2val:0xffbf04000009aaaa
TEST_PKRR_OP(kstsa16, x28, x13, x17, 0x0000000000000000, 0x09aaaafffd0005, 0xffbf04000009aaaa, x13, x1, 112, x8)

inst_21:
// rs1==x26, rs2==x5, rd==x13, rs2_h3_val == -33, rs2_h0_val == 32, rs2_h2_val == 2048, rs2_h1_val == 16384
// opcode: kstsa16 ; op1:x26; op2:x5; dest:x13; op1val:0x0500050080c000;  op2val:0xffdf080040000020
TEST_PKRR_OP(kstsa16, x13, x26, x5, 0x0000000000000000, 0x0500050080c000, 0xffdf080040000020, x26, x1, 128, x8)

inst_22:
// rs1==x31, rs2==x28, rd==x4, rs2_h3_val == -17, rs1_h1_val == 1024, rs1_h0_val == -8193, rs2_h0_val == -2, rs2_h2_val == -257
// opcode: kstsa16 ; op1:x31; op2:x28; dest:x4; op1val:0x2000060400dfff;  op2val:0xffeffefffffcfffe
TEST_PKRR_OP(kstsa16, x4, x31, x28, 0x0000000000000000, 0x2000060400dfff, 0xffeffefffffcfffe, x31, x1, 144, x8)

inst_23:
// rs1==x7, rs2==x31, rd==x12, rs2_h3_val == -5, rs1_h3_val == 2, rs2_h2_val == 16384, rs1_h1_val == 1, rs2_h1_val == 4096, rs1_h0_val == -513
// opcode: kstsa16 ; op1:x7; op2:x31; dest:x12; op1val:0x02c0000001fdff;  op2val:0xfffb40001000bfff
TEST_PKRR_OP(kstsa16, x12, x7, x31, 0x0000000000000000, 0x02c0000001fdff, 0xfffb40001000bfff, x7, x1, 160, x8)

inst_24:
// rs1==x4, rs2==x16, rd==x3, rs2_h3_val == -3, rs2_h2_val == 4, rs2_h1_val == 32, rs1_h3_val == -9
// opcode: kstsa16 ; op1:x4; op2:x16; dest:x3; op1val:0xfff7f7fffff8dfff;  op2val:0xfffd00040020efff
TEST_PKRR_OP(kstsa16, x3, x4, x16, 0x0000000000000000, 0xfff7f7fffff8dfff, 0xfffd00040020efff, x4, x1, 176, x8)

inst_25:
// rs1==x21, rs2==x27, rd==x14, rs2_h3_val == -32768, rs1_h3_val == 64, rs2_h1_val == -2049, rs1_h0_val == 512, rs1_h2_val == -513, rs2_h2_val == -21846
// opcode: kstsa16 ; op1:x21; op2:x27; dest:x14; op1val:0x40fdff00030200;  op2val:0x8000aaaaf7fffff9
TEST_PKRR_OP(kstsa16, x14, x21, x27, 0x0000000000000000, 0x40fdff00030200, 0x8000aaaaf7fffff9, x21, x1, 192, x8)

inst_26:
// rs1==x9, rs2==x26, rd==x20, rs2_h3_val == 16384, rs2_h1_val == 2, rs1_h1_val == -513, rs1_h0_val == 64, rs2_h2_val == 32, rs2_h0_val == 2048
// opcode: kstsa16 ; op1:x9; op2:x26; dest:x20; op1val:0xfff7fbfffdff0040;  op2val:0x4000002000020800
TEST_PKRR_OP(kstsa16, x20, x9, x26, 0x0000000000000000, 0xfff7fbfffdff0040, 0x4000002000020800, x9, x1, 208, x8)

inst_27:
// rs1==x29, rs2==x22, rd==x31, rs2_h3_val == 4096, rs1_h0_val == 4096, rs1_h1_val == -8193
// opcode: kstsa16 ; op1:x29; op2:x22; dest:x31; op1val:0x4000000dfff1000;  op2val:0x1000fff800050010
TEST_PKRR_OP(kstsa16, x31, x29, x22, 0x0000000000000000, 0x4000000dfff1000, 0x1000fff800050010, x29, x1, 224, x8)

inst_28:
// rs1==x27, rs2==x10, rd==x8, rs2_h3_val == 1024, rs2_h0_val == -2049, rs2_h1_val == 64, rs1_h3_val == 16, rs1_h0_val == 21845
// opcode: kstsa16 ; op1:x27; op2:x10; dest:x8; op1val:0x10dffffff65555;  op2val:0x40010000040f7ff
TEST_PKRR_OP(kstsa16, x8, x27, x10, 0x0000000000000000, 0x10dffffff65555, 0x40010000040f7ff, x27, x1, 240, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_29:
// rs1==x24, rs2==x1, rd==x17, rs2_h3_val == 512, rs2_h1_val == 32767, rs1_h3_val == -65, rs1_h0_val == -1
// opcode: kstsa16 ; op1:x24; op2:x1; dest:x17; op1val:0xffbf0200fff9ffff;  op2val:0x200c0007fff0005
TEST_PKRR_OP(kstsa16, x17, x24, x1, 0x0000000000000000, 0xffbf0200fff9ffff, 0x200c0007fff0005, x24, x2, 0, x3)

inst_30:
// rs1==x11, rs2==x20, rd==x15, rs2_h3_val == 128, rs1_h0_val == 0
// opcode: kstsa16 ; op1:x11; op2:x20; dest:x15; op1val:0xf7ff8000fff80000;  op2val:0x80dfff04000020
TEST_PKRR_OP(kstsa16, x15, x11, x20, 0x0000000000000000, 0xf7ff8000fff80000, 0x80dfff04000020, x11, x2, 16, x3)

inst_31:
// rs1==x1, rs2==x18, rd==x30, rs2_h3_val == 64, rs2_h0_val == 8, rs2_h2_val == -33, rs2_h1_val == -65, rs1_h1_val == -1025, rs1_h2_val == -9, rs1_h0_val == -1025
// opcode: kstsa16 ; op1:x1; op2:x18; dest:x30; op1val:0xfff9fff7fbfffbff;  op2val:0x40ffdfffbf0008
TEST_PKRR_OP(kstsa16, x30, x1, x18, 0x0000000000000000, 0xfff9fff7fbfffbff, 0x40ffdfffbf0008, x1, x2, 32, x3)

inst_32:
// rs2_h3_val == 32, rs1_h1_val == -257, rs1_h0_val == 128
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0009feff0080;  op2val:0x200001ff7ffff8
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xfffc0009feff0080, 0x200001ff7ffff8, x30, x2, 48, x3)

inst_33:
// rs2_h3_val == 16, rs2_h1_val == 4, rs1_h1_val == 32, rs2_h0_val == 16384
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbc00000200010;  op2val:0x10fffa00044000
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xfffbc00000200010, 0x10fffa00044000, x30, x2, 64, x3)

inst_34:
// rs1_h1_val == -5, rs1_h2_val == 16384, rs2_h2_val == 8192, rs2_h0_val == -32768
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x404000fffbfff8;  op2val:0xfffe2000efff8000
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x404000fffbfff8, 0xfffe2000efff8000, x30, x2, 80, x3)

inst_35:
// rs1_h1_val == -2, rs2_h1_val == -2, rs1_h2_val == -3, rs2_h0_val == 32767
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffdfffe0007;  op2val:0xc000ff7ffffe7fff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xfff9fffdfffe0007, 0xc000ff7ffffe7fff, x30, x2, 96, x3)

inst_36:
// rs1_h1_val == -32768, rs1_h3_val == 256, rs2_h2_val == -3
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fff680000000;  op2val:0xfbfffffd10000100
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x100fff680000000, 0xfbfffffd10000100, x30, x2, 112, x3)

inst_37:
// rs1_h1_val == 8192, rs1_h3_val == 512
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fff820000007;  op2val:0x0000200020bfff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x200fff820000007, 0x0000200020bfff, x30, x2, 128, x3)

inst_38:
// rs1_h1_val == 4096, rs1_h2_val == -17, rs1_h3_val == -16385
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffef1000efff;  op2val:0xfff8fffd0004fffc
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xbfffffef1000efff, 0xfff8fffd0004fffc, x30, x2, 144, x3)

inst_39:
// rs1_h1_val == 2048, rs2_h1_val == 21845, rs1_h2_val == 21845, rs1_h3_val == 4096
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000555508000010;  op2val:0xfffa100055552000
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x1000555508000010, 0xfffa100055552000, x30, x2, 160, x3)

inst_40:
// rs1_h1_val == 512, rs2_h3_val == -1, rs2_h1_val == 2048
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcf7ff0200ffdf;  op2val:0xffff40000800f7ff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xfffcf7ff0200ffdf, 0xffff40000800f7ff, x30, x2, 176, x3)

inst_41:
// rs1_h1_val == 64, rs1_h3_val == 4, rs1_h0_val == 16384
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000404000;  op2val:0xff7f01000100bfff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x04000000404000, 0xff7f01000100bfff, x30, x2, 192, x3)

inst_42:
// rs1_h1_val == 4, rs1_h0_val == -5, rs2_h0_val == 21845, rs2_h1_val == -9
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff900000004fffb;  op2val:0x40000040fff75555
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xfff900000004fffb, 0x40000040fff75555, x30, x2, 208, x3)

inst_43:
// rs1_h1_val == 0, rs2_h2_val == -65, rs1_h2_val == -2
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffe00000009;  op2val:0x7fffffbf0020c000
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xbffffffe00000009, 0x7fffffbf0020c000, x30, x2, 224, x3)

inst_44:
// rs1_h1_val == -1, rs1_h0_val == 256, rs1_h3_val == 8
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x080200ffff0100;  op2val:0x8001000003bfff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x080200ffff0100, 0x8001000003bfff, x30, x2, 240, x3)

inst_45:
// rs1_h0_val == -21846, rs2_h1_val == -257, rs1_h1_val == -4097
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400fffcefffaaaa;  op2val:0xfff70020feff0007
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x400fffcefffaaaa, 0xfff70020feff0007, x30, x2, 256, x3)

inst_46:
// rs1_h0_val == 32767, rs2_h1_val == 128, rs1_h2_val == 2
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000201007fff;  op2val:0x09aaaa0080fff6
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x40000201007fff, 0x09aaaa0080fff6, x30, x2, 272, x3)

inst_47:
// rs1_h0_val == -2049, rs1_h3_val == -21846, rs1_h1_val == 21845
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa40005555f7ff;  op2val:0xaaaa08000002fdff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xaaaa40005555f7ff, 0xaaaa08000002fdff, x30, x2, 288, x3)

inst_48:
// rs1_h0_val == -257, rs1_h2_val == 64
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f00400004feff;  op2val:0xfffc002000095555
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xff7f00400004feff, 0xfffc002000095555, x30, x2, 304, x3)

inst_49:
// rs1_h0_val == -129, rs2_h1_val == 8192
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100002008000ff7f;  op2val:0xf7ff004020000200
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x100002008000ff7f, 0xf7ff004020000200, x30, x2, 320, x3)

inst_50:
// rs1_h0_val == -9, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x00dfff0800fff7;  op2val:0x20fffd55552000
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x00dfff0800fff7, 0x20fffd55552000, x30, x2, 336, x3)

inst_51:
// rs1_h0_val == -3, rs2_h0_val == -1025
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000040100fffd;  op2val:0xdffffeff0006fbff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x100000040100fffd, 0xdffffeff0006fbff, x30, x2, 352, x3)

inst_52:
// rs1_h0_val == -2, rs1_h1_val == -16385, rs1_h3_val == -4097
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffff8bffffffe;  op2val:0xfefffbff00800009
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xeffffff8bffffffe, 0xfefffbff00800009, x30, x2, 368, x3)

inst_53:
// rs1_h0_val == 8192, rs1_h2_val == 8192, rs2_h2_val == 32767
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa2000fff82000;  op2val:0xbfff7fff0003fffb
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xfffa2000fff82000, 0xbfff7fff0003fffb, x30, x2, 384, x3)

inst_54:
// rs1_h0_val == 4, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fff904000004;  op2val:0xfbffff7faaaa0002
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x10fff904000004, 0xfbffff7faaaa0002, x30, x2, 400, x3)

inst_55:
// rs1_h0_val == 2, rs1_h2_val == -129
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40ff7f04000002;  op2val:0xc000fdff00801000
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x40ff7f04000002, 0xc000fdff00801000, x30, x2, 416, x3)

inst_56:
// rs2_h1_val == 0, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fdff00010004;  op2val:0xfff9dfff00000002
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x10fdff00010004, 0xfff9dfff00000002, x30, x2, 432, x3)

inst_57:
// rs2_h1_val == -1, rs1_h2_val == -4097, rs1_h1_val == -2049
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffceffff7ffaaaa;  op2val:0xffeffff8ffff0006
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xfffceffff7ffaaaa, 0xffeffff8ffff0006, x30, x2, 448, x3)

inst_58:
// rs2_h0_val == -257, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa4000ff7ffffe;  op2val:0x050005fefffeff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xfffa4000ff7ffffe, 0x050005fefffeff, x30, x2, 464, x3)

inst_59:
// rs2_h0_val == -129, rs1_h2_val == 32
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x06002000010008;  op2val:0x55550006fff7ff7f
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x06002000010008, 0x55550006fff7ff7f, x30, x2, 480, x3)

inst_60:
// rs2_h0_val == -33, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffe8000fffc;  op2val:0x40000060000ffdf
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xff7ffffe8000fffc, 0x40000060000ffdf, x30, x2, 496, x3)

inst_61:
// rs2_h0_val == -17, rs2_h2_val == -17
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x024000fbfffff6;  op2val:0xfffeffeffffcffef
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x024000fbfffff6, 0xfffeffeffffcffef, x30, x2, 512, x3)

inst_62:
// rs2_h0_val == -9, rs2_h2_val == -9
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0009f7fffff6;  op2val:0x80fff7fffffff7
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xfffb0009f7fffff6, 0x80fff7fffffff7, x30, x2, 528, x3)

inst_63:
// rs2_h0_val == 1024, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd00090006ffff;  op2val:0xffbf3ffffffb0400
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xfffd00090006ffff, 0xffbf3ffffffb0400, x30, x2, 544, x3)

inst_64:
// rs2_h0_val == 64, rs2_h1_val == -8193, rs2_h2_val == 128
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xc00000030007fff9;  op2val:0xffef0080dfff0040
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xc00000030007fff9, 0xffef0080dfff0040, x30, x2, 560, x3)

inst_65:
// rs2_h0_val == 4, rs2_h3_val == 4
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x09020040008000;  op2val:0x040006aaaa0004
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x09020040008000, 0x040006aaaa0004, x30, x2, 576, x3)

inst_66:
// rs2_h0_val == 1, rs1_h1_val == -21846, rs1_h3_val == -32768
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000dfffaaaa0200;  op2val:0x3fff3fff55550001
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x8000dfffaaaa0200, 0x3fff3fff55550001, x30, x2, 592, x3)

inst_67:
// rs2_h0_val == -1, rs1_h3_val == 8192
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000040efff;  op2val:0x041000efffffff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x200000000040efff, 0x041000efffffff, x30, x2, 608, x3)

inst_68:
// rs1_h3_val == 21845, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555aaaa55550800;  op2val:0x7fff0020aaaaefff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x5555aaaa55550800, 0x7fff0020aaaaefff, x30, x2, 624, x3)

inst_69:
// rs1_h3_val == -8193, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0005fffe1000;  op2val:0xdfffaaaafff70020
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xdfff0005fffe1000, 0xdfffaaaafff70020, x30, x2, 640, x3)

inst_70:
// rs1_h3_val == -1025, rs1_h2_val == -65, rs2_h1_val == -1025
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffbf00093fff;  op2val:0x03fffcfbff0005
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xfbffffbf00093fff, 0x03fffcfbff0005, x30, x2, 656, x3)

inst_71:
// rs1_h0_val == 1, rs1_h3_val == 128
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80008040000001;  op2val:0xfdff0001fffc7fff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x80008040000001, 0xfdff0001fffc7fff, x30, x2, 672, x3)

inst_72:
// rs1_h3_val == -17, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef40000800fbff;  op2val:0xfff90006ffff0006
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xffef40000800fbff, 0xfff90006ffff0006, x30, x2, 688, x3)

inst_73:
// rs2_h2_val == -16385, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa00040006f7ff;  op2val:0x08bffffffa0000
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xaaaa00040006f7ff, 0x08bffffffa0000, x30, x2, 704, x3)

inst_74:
// rs2_h2_val == -2049, rs2_h3_val == 1
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x07dfff0000fff9;  op2val:0x01f7ffffff0400
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x07dfff0000fff9, 0x01f7ffffff0400, x30, x2, 720, x3)

inst_75:
// rs1_h3_val == -1, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffefffffe;  op2val:0x00ffdf0040aaaa
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xffffffdffefffffe, 0x00ffdf0040aaaa, x30, x2, 736, x3)

inst_76:
// rs2_h2_val == -2, rs1_h3_val == 2048
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000003fefff7ff;  op2val:0x01fffefff7ffbf
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x8000003fefff7ff, 0x01fffefff7ffbf, x30, x2, 752, x3)

inst_77:
// rs2_h2_val == -32768, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff800000007fff6;  op2val:0x400080000006bfff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xfff800000007fff6, 0x400080000006bfff, x30, x2, 768, x3)

inst_78:
// rs1_h2_val == 32767, rs1_h3_val == -2
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe7fff20000001;  op2val:0xff7fc000f7ff0005
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xfffe7fff20000001, 0xff7fc000f7ff0005, x30, x2, 784, x3)

inst_79:
// rs2_h2_val == 512, rs1_h1_val == -17
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0001ffef0004;  op2val:0x2000200fefffffb
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xaaaa0001ffef0004, 0x2000200fefffffb, x30, x2, 800, x3)

inst_80:
// rs1_h2_val == -257, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100feff0400efff;  op2val:0xdfff20000001ffdf
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x100feff0400efff, 0xdfff20000001ffdf, x30, x2, 816, x3)

inst_81:
// rs2_h2_val == 8, rs1_h2_val == 1024
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x06040000010004;  op2val:0xc0000008fff8bfff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x06040000010004, 0xc0000008fff8bfff, x30, x2, 832, x3)

inst_82:
// rs2_h2_val == 2, rs2_h1_val == 512, rs1_h1_val == -65
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffff6ffbf0200;  op2val:0xfeff00020200feff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x3ffffff6ffbf0200, 0xfeff00020200feff, x30, x2, 848, x3)

inst_83:
// rs2_h2_val == 0, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffafffa2000ffef;  op2val:0x04000001000020
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xfffafffa2000ffef, 0x04000001000020, x30, x2, 864, x3)

inst_84:
// rs2_h2_val == -1, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fffbfffbfdff;  op2val:0xbfffffff00040006
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x02fffbfffbfdff, 0xbfffffff00040006, x30, x2, 880, x3)

inst_85:
// rs1_h2_val == 4096, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc10000003c000;  op2val:0xc000000940000003
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xfffc10000003c000, 0xc000000940000003, x30, x2, 896, x3)

inst_86:
// rs1_h2_val == 2048, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000800fffb0004;  op2val:0xfff9c00000028000
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x10000800fffb0004, 0xfff9c00000028000, x30, x2, 912, x3)

inst_87:
// rs2_h1_val == -16385, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff008000800006;  op2val:0x400009bfffaaaa
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xfeff008000800006, 0x400009bfffaaaa, x30, x2, 928, x3)

inst_88:
// rs1_h2_val == 256, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff01000002ffbf;  op2val:0x09aaaa0001efff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xbfff01000002ffbf, 0x09aaaa0001efff, x30, x2, 944, x3)

inst_89:
// rs2_h1_val == -513, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0000fff80005;  op2val:0xffbffffffdffdfff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xffef0000fff80005, 0xffbffffffdffdfff, x30, x2, 960, x3)

inst_90:
// rs1_h2_val == -1, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100ffff00010020;  op2val:0xaaaa8000ff7f0040
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x100ffff00010020, 0xaaaa8000ff7f0040, x30, x2, 976, x3)

inst_91:
// rs2_h1_val == -32768, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000020ffff0002;  op2val:0xfeff00018000f7ff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x1000020ffff0002, 0xfeff00018000f7ff, x30, x2, 992, x3)

inst_92:
// rs1_h1_val == -33, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0004ffdff7ff;  op2val:0x40040003fff0008
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xffff0004ffdff7ff, 0x40040003fff0008, x30, x2, 1008, x3)

inst_93:
// rs1_h2_val == 8, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0008fff82000;  op2val:0x00fff60007f7ff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xffef0008fff82000, 0x00fff60007f7ff, x30, x2, 1024, x3)

inst_94:
// rs1_h3_val == 16384, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffffffb2000;  op2val:0xaaaa800010002000
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x4000fffffffb2000, 0xaaaa800010002000, x30, x2, 1040, x3)

inst_95:
// rs2_h1_val == -33, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000002fffdfff6;  op2val:0x06ffbfffdf0000
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x1000002fffdfff6, 0x06ffbfffdf0000, x30, x2, 1056, x3)

inst_96:
// rs2_h1_val == -17, 
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffeffffd0800;  op2val:0xfffb0002ffef0800
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xfdffffeffffd0800, 0xfffb0002ffef0800, x30, x2, 1072, x3)

inst_97:
// rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val == 32, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs2_h3_val == 8192, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h2_val == -2049, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h1_val == -9
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20f7fffff78000;  op2val:0x2000000500060009
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0x20f7fffff78000, 0x2000000500060009, x30, x2, 1088, x3)

inst_98:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h0_val == -65, rs1_h0_val == 16, rs1_h3_val == -33, rs2_h2_val == 64, rs2_h3_val == 2, rs2_h1_val == 256
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff6fffa0010;  op2val:0x0200400100ffbf
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xffdffff6fffa0010, 0x0200400100ffbf, x30, x2, 1104, x3)

inst_99:
// rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h0_val == 16, rs2_h2_val == -4097, rs1_h0_val == -17, rs2_h3_val == -9, rs1_h2_val == 16, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h3_val == -2049, rs1_h1_val == 8, rs1_h1_val > 0 and rs2_h1_val < 0
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff00100008ffef;  op2val:0xfff7efffc0000010
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xf7ff00100008ffef, 0xfff7efffc0000010, x30, x2, 1120, x3)

inst_100:
// rs1_h0_val == rs2_h0_val, rs1_h1_val == -3, rs2_h0_val == -4097, rs2_h3_val == 256, rs1_h3_val == -129, rs2_h2_val == 4096, rs2_h1_val == 16
// opcode: kstsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffff8fffdefff;  op2val:0x10010000010efff
TEST_PKRR_OP(kstsa16, x31, x30, x29, 0x0000000000000000, 0xff7ffff8fffdefff, 0x10010000010efff, x30, x2, 1136, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x13_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x13_1:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 144*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
