
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the stsa16 instruction of the RISC-V RV64PZicsr extension for the stsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",stsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x9, rs2==x28, rd==x9, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 512, rs1_h2_val != rs2_h2_val, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h3_val == -2049, rs1_h1_val == -21846, rs2_h3_val == 256, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 2048, rs2_h2_val == 64, rs2_h0_val == 1024
// opcode: stsa16 ; op1:x9; op2:x28; dest:x9; op1val:0xf7ff0200aaaa8000;  op2val:0x100004008000400
TEST_RR_OP(stsa16, x9, x9, x28, 0x0000000000000000, 0xf7ff0200aaaa8000, 0x100004008000400, x6, 0, x1)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x0, rd==x10, rs1_h3_val == rs2_h3_val, rs1_h3_val == 512, rs1_h0_val == -17, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h0_val == -257, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h3_val == 512, rs2_h1_val == -32768, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == -513
// opcode: stsa16 ; op1:x31; op2:x0; dest:x10; op1val:0x2000005fdffffef;  op2val:0x200fff98000feff
TEST_RR_OP(stsa16, x10, x31, x0, 0x0000000000000000, 0x2000005fdffffef, 0x200fff98000feff, x6, 8, x1)

inst_2:
// rs1 == rs2 != rd, rs1==x27, rs2==x27, rd==x0, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h3_val == -33, rs2_h1_val == -1025, rs1_h0_val == 2048, rs1_h2_val == 32767, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: stsa16 ; op1:x27; op2:x27; dest:x0; op1val:0xfff87ffffff90800;  op2val:0xffdffff6fbff0005
TEST_RR_OP(stsa16, x0, x27, x27, 0x0000000000000000, 0xfff87ffffff90800, 0xffdffff6fbff0005, x6, 16, x1)

inst_3:
// rs1 == rs2 == rd, rs1==x5, rs2==x5, rd==x5, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h3_val == -3, rs1_h2_val == 8, rs1_h1_val == 16, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -17, rs2_h2_val == 1024, rs1_h0_val == -16385
// opcode: stsa16 ; op1:x5; op2:x5; dest:x5; op1val:0x3fff00080010bfff;  op2val:0xfffd0400fff8ffef
TEST_RR_OP(stsa16, x5, x5, x5, 0x0000000000000000, 0x3fff00080010bfff, 0xfffd0400fff8ffef, x6, 24, x1)

inst_4:
// rs2 == rd != rs1, rs1==x30, rs2==x29, rd==x29, rs1_h2_val == rs2_h2_val, rs2_h2_val == -257, rs1_h0_val == 4096, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h0_val == -65, rs1_h2_val == -257, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h3_val == -8193
// opcode: stsa16 ; op1:x30; op2:x29; dest:x29; op1val:0xfff6fefffdff1000;  op2val:0xdffffeff3fffffbf
TEST_RR_OP(stsa16, x29, x30, x29, 0x0000000000000000, 0xfff6fefffdff1000, 0xdffffeff3fffffbf, x6, 32, x1)

inst_5:
// rs1==x14, rs2==x16, rd==x30, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h3_val == 16384, rs1_h3_val == -8193, rs2_h2_val == 16384, rs2_h0_val == -3, rs1_h1_val == -8193, rs1_h2_val == -129
// opcode: stsa16 ; op1:x14; op2:x16; dest:x30; op1val:0xdfffff7fdffffffa;  op2val:0x40004000fbfffffd
TEST_RR_OP(stsa16, x30, x14, x16, 0x0000000000000000, 0xdfffff7fdffffffa, 0x40004000fbfffffd, x6, 40, x1)

inst_6:
// rs1==x28, rs2==x15, rd==x21, rs1_h1_val == rs2_h1_val, rs2_h2_val == 32, rs2_h1_val == -513
// opcode: stsa16 ; op1:x28; op2:x15; dest:x21; op1val:0x07fff9fdffbfff;  op2val:0x030020fdffc000
TEST_RR_OP(stsa16, x21, x28, x15, 0x0000000000000000, 0x07fff9fdffbfff, 0x030020fdffc000, x6, 48, x1)

inst_7:
// rs1==x13, rs2==x25, rd==x3, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h2_val == -16385, rs1_h2_val == -2049, rs1_h1_val == 64, rs2_h0_val == -1
// opcode: stsa16 ; op1:x13; op2:x25; dest:x3; op1val:0xfffaf7ff00400005;  op2val:0x100bfff0006ffff
TEST_RR_OP(stsa16, x3, x13, x25, 0x0000000000000000, 0xfffaf7ff00400005, 0x100bfff0006ffff, x6, 56, x1)

inst_8:
// rs1==x7, rs2==x11, rd==x28, rs1_h0_val == rs2_h0_val, rs2_h2_val == -8193, rs2_h0_val == 16, rs1_h2_val == 1, rs1_h1_val == 8, rs1_h0_val == 16, rs2_h3_val == 8, rs1_h3_val == -32768
// opcode: stsa16 ; op1:x7; op2:x11; dest:x28; op1val:0x8000000100080010;  op2val:0x08dfff00090010
TEST_RR_OP(stsa16, x28, x7, x11, 0x0000000000000000, 0x8000000100080010, 0x08dfff00090010, x6, 64, x1)

inst_9:
// rs1==x2, rs2==x13, rd==x14, rs2_h3_val == -21846, rs2_h2_val == -4097, rs2_h0_val == -16385, rs1_h3_val == 2, rs1_h0_val == 256, rs1_h1_val == -2049
// opcode: stsa16 ; op1:x2; op2:x13; dest:x14; op1val:0x02fefff7ff0100;  op2val:0xaaaaefff0006bfff
TEST_RR_OP(stsa16, x14, x2, x13, 0x0000000000000000, 0x02fefff7ff0100, 0xaaaaefff0006bfff, x6, 72, x1)

inst_10:
// rs1==x23, rs2==x24, rd==x12, rs2_h3_val == 21845, rs1_h1_val == -32768, rs2_h2_val == -1025, rs2_h0_val == -21846, rs1_h3_val == -1, rs1_h0_val == 32, rs1_h2_val == -17
// opcode: stsa16 ; op1:x23; op2:x24; dest:x12; op1val:0xffffffef80000020;  op2val:0x5555fbff0800aaaa
TEST_RR_OP(stsa16, x12, x23, x24, 0x0000000000000000, 0xffffffef80000020, 0x5555fbff0800aaaa, x6, 80, x1)

inst_11:
// rs1==x8, rs2==x3, rd==x20, rs2_h3_val == 32767, rs2_h2_val == -1, rs1_h1_val == -33, rs1_h3_val == 64, rs1_h2_val == 2
// opcode: stsa16 ; op1:x8; op2:x3; dest:x20; op1val:0x400002ffdffffc;  op2val:0x7ffffffffffcfffa
TEST_RR_OP(stsa16, x20, x8, x3, 0x0000000000000000, 0x400002ffdffffc, 0x7ffffffffffcfffa, x6, 88, x1)

inst_12:
// rs1==x25, rs2==x4, rd==x7, rs2_h3_val == -16385, rs1_h3_val == -65, rs2_h2_val == 2, rs1_h2_val == 256, rs1_h0_val == 64
// opcode: stsa16 ; op1:x25; op2:x4; dest:x7; op1val:0xffbf0100fdff0040;  op2val:0xbfff0002fbff0006
TEST_RR_OP(stsa16, x7, x25, x4, 0x0000000000000000, 0xffbf0100fdff0040, 0xbfff0002fbff0006, x6, 96, x1)

inst_13:
// rs1==x29, rs2==x12, rd==x25, rs2_h3_val == -4097, rs1_h2_val == -8193, rs2_h2_val == 16, rs2_h1_val == -129, rs2_h0_val == -2
// opcode: stsa16 ; op1:x29; op2:x12; dest:x25; op1val:0x02dfff0008fff8;  op2val:0xefff0010ff7ffffe
TEST_RR_OP(stsa16, x25, x29, x12, 0x0000000000000000, 0x02dfff0008fff8, 0xefff0010ff7ffffe, x6, 104, x1)

inst_14:
// rs1==x3, rs2==x7, rd==x19, rs2_h3_val == -2049, rs2_h0_val == 16384, rs1_h1_val == 1024
// opcode: stsa16 ; op1:x3; op2:x7; dest:x19; op1val:0x0701000400fff6;  op2val:0xf7ff0009fffa4000
TEST_RR_OP(stsa16, x19, x3, x7, 0x0000000000000000, 0x0701000400fff6, 0xf7ff0009fffa4000, x6, 112, x1)

inst_15:
// rs1==x15, rs2==x26, rd==x11, rs2_h3_val == -1025, rs1_h2_val == 16384, rs2_h1_val == 1, rs2_h2_val == 4
// opcode: stsa16 ; op1:x15; op2:x26; dest:x11; op1val:0x074000fdff0800;  op2val:0xfbff00040001fffc
TEST_RR_OP(stsa16, x11, x15, x26, 0x0000000000000000, 0x074000fdff0800, 0xfbff00040001fffc, x6, 120, x1)

inst_16:
// rs1==x1, rs2==x8, rd==x24, rs2_h3_val == -513, rs1_h3_val == 4, rs2_h0_val == -129, rs1_h2_val == -4097, rs2_h1_val == 64, rs1_h1_val == -17
// opcode: stsa16 ; op1:x1; op2:x8; dest:x24; op1val:0x04efffffef0040;  op2val:0xfdff00040040ff7f
TEST_RR_OP(stsa16, x24, x1, x8, 0x0000000000000000, 0x04efffffef0040, 0xfdff00040040ff7f, x6, 128, x5)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_17:
// rs1==x17, rs2==x2, rd==x23, rs2_h3_val == -257, rs1_h1_val == -5, rs1_h3_val == 16, rs2_h2_val == -32768, rs1_h0_val == 2, rs2_h0_val == 8192, rs1_h2_val == -3
// opcode: stsa16 ; op1:x17; op2:x2; dest:x23; op1val:0x10fffdfffb0002;  op2val:0xfeff800080002000
TEST_RR_OP(stsa16, x23, x17, x2, 0x0000000000000000, 0x10fffdfffb0002, 0xfeff800080002000, x3, 0, x5)

inst_18:
// rs1==x4, rs2==x22, rd==x18, rs2_h3_val == -129, rs1_h3_val == -129, rs1_h2_val == 4, rs1_h0_val == -3
// opcode: stsa16 ; op1:x4; op2:x22; dest:x18; op1val:0xff7f0004f7fffffd;  op2val:0xff7f00053fff0400
TEST_RR_OP(stsa16, x18, x4, x22, 0x0000000000000000, 0xff7f0004f7fffffd, 0xff7f00053fff0400, x3, 8, x5)

inst_19:
// rs1==x6, rs2==x21, rd==x16, rs2_h3_val == -65, rs2_h2_val == -17, rs1_h2_val == -2
// opcode: stsa16 ; op1:x6; op2:x21; dest:x16; op1val:0xfffffffe00030002;  op2val:0xffbfffef0005fffa
TEST_RR_OP(stsa16, x16, x6, x21, 0x0000000000000000, 0xfffffffe00030002, 0xffbfffef0005fffa, x3, 16, x5)

inst_20:
// rs1==x16, rs2==x10, rd==x26, rs2_h3_val == -17, rs1_h3_val == -3, rs1_h1_val == 8192, rs2_h0_val == -32768
// opcode: stsa16 ; op1:x16; op2:x10; dest:x26; op1val:0xfffd3fff20000006;  op2val:0xffeffeff00018000
TEST_RR_OP(stsa16, x26, x16, x10, 0x0000000000000000, 0xfffd3fff20000006, 0xffeffeff00018000, x3, 24, x5)

inst_21:
// rs1==x24, rs2==x23, rd==x17, rs2_h3_val == -9, rs2_h1_val == 2, rs1_h2_val == 128, rs2_h2_val == 8, rs1_h3_val == 4096, rs1_h0_val == -129
// opcode: stsa16 ; op1:x24; op2:x23; dest:x17; op1val:0x10000080fffcff7f;  op2val:0xfff7000800028000
TEST_RR_OP(stsa16, x17, x24, x23, 0x0000000000000000, 0x10000080fffcff7f, 0xfff7000800028000, x3, 32, x5)

inst_22:
// rs1==x0, rs2==x18, rd==x31, rs2_h3_val == -5, rs1_h2_val == 16, rs2_h2_val == -3, rs1_h0_val == 32767, rs1_h3_val == -2, rs1_h1_val == -129
// opcode: stsa16 ; op1:x0; op2:x18; dest:x31; op1val:0xfffe0010ff7f7fff;  op2val:0xfffbfffdc000fffe
TEST_RR_OP(stsa16, x31, x0, x18, 0x0000000000000000, 0xfffe0010ff7f7fff, 0xfffbfffdc000fffe, x3, 40, x5)

inst_23:
// rs1==x11, rs2==x20, rd==x4, rs2_h3_val == -2, rs1_h1_val == -2, rs2_h0_val == -1025
// opcode: stsa16 ; op1:x11; op2:x20; dest:x4; op1val:0xfff6ffeffffe1000;  op2val:0xfffec000fbfffbff
TEST_RR_OP(stsa16, x4, x11, x20, 0x0000000000000000, 0xfff6ffeffffe1000, 0xfffec000fbfffbff, x3, 48, x5)

inst_24:
// rs1==x20, rs2==x14, rd==x2, rs2_h3_val == -32768, rs1_h2_val == 4096, rs1_h3_val == -16385, rs1_h1_val == -1, rs2_h1_val == 4096, rs2_h0_val == 2048
// opcode: stsa16 ; op1:x20; op2:x14; dest:x2; op1val:0xbfff1000fffffff8;  op2val:0x8000dfff10000800
TEST_RR_OP(stsa16, x2, x20, x14, 0x0000000000000000, 0xbfff1000fffffff8, 0x8000dfff10000800, x3, 56, x5)

inst_25:
// rs1==x21, rs2==x6, rd==x15, rs2_h3_val == 8192, rs2_h1_val == -257, rs1_h0_val == 4, rs1_h1_val == 2048
// opcode: stsa16 ; op1:x21; op2:x6; dest:x15; op1val:0x40000608000004;  op2val:0x20000004feff0800
TEST_RR_OP(stsa16, x15, x21, x6, 0x0000000000000000, 0x40000608000004, 0x20000004feff0800, x3, 64, x5)

inst_26:
// rs1==x18, rs2==x30, rd==x1, rs2_h3_val == 4096, rs1_h3_val == -21846, rs2_h2_val == 2048, rs2_h0_val == 0
// opcode: stsa16 ; op1:x18; op2:x30; dest:x1; op1val:0xaaaaefff0009bfff;  op2val:0x1000080000050000
TEST_RR_OP(stsa16, x1, x18, x30, 0x0000000000000000, 0xaaaaefff0009bfff, 0x1000080000050000, x3, 72, x5)

inst_27:
// rs1==x22, rs2==x17, rd==x13, rs2_h3_val == 2048, rs1_h2_val == -33, rs2_h1_val == 8192
// opcode: stsa16 ; op1:x22; op2:x17; dest:x13; op1val:0xc000ffdfc0000009;  op2val:0x8003fff2000fffe
TEST_RR_OP(stsa16, x13, x22, x17, 0x0000000000000000, 0xc000ffdfc0000009, 0x8003fff2000fffe, x3, 80, x5)

inst_28:
// rs1==x10, rs2==x31, rd==x27, rs2_h3_val == 1024, rs1_h0_val == 0, rs2_h1_val == -65, rs2_h2_val == 1, rs1_h1_val == -4097
// opcode: stsa16 ; op1:x10; op2:x31; dest:x27; op1val:0x090006efff0000;  op2val:0x4000001ffbffffd
TEST_RR_OP(stsa16, x27, x10, x31, 0x0000000000000000, 0x090006efff0000, 0x4000001ffbffffd, x3, 88, x5)

inst_29:
// rs1==x19, rs2==x1, rd==x6, rs2_h3_val == 128, rs1_h0_val == -33, rs1_h3_val == 21845
// opcode: stsa16 ; op1:x19; op2:x1; dest:x6; op1val:0x5555f7ff0006ffdf;  op2val:0x8000200003fffe
TEST_RR_OP(stsa16, x6, x19, x1, 0x0000000000000000, 0x5555f7ff0006ffdf, 0x8000200003fffe, x3, 96, x5)

inst_30:
// rs1==x12, rs2==x19, rd==x8, rs2_h3_val == 64, rs1_h0_val == -8193, rs1_h1_val == 256, rs2_h1_val == -4097, rs2_h2_val == 32767
// opcode: stsa16 ; op1:x12; op2:x19; dest:x8; op1val:0x07fff60100dfff;  op2val:0x407fffefff4000
TEST_RR_OP(stsa16, x8, x12, x19, 0x0000000000000000, 0x07fff60100dfff, 0x407fffefff4000, x3, 104, x5)

inst_31:
// rs1==x26, rs2==x9, rd==x22, rs2_h3_val == 32, rs1_h2_val == 21845, rs1_h3_val == -4097
// opcode: stsa16 ; op1:x26; op2:x9; dest:x22; op1val:0xefff5555dfff0004;  op2val:0x20fffcfdff0007
TEST_RR_OP(stsa16, x22, x26, x9, 0x0000000000000000, 0xefff5555dfff0004, 0x20fffcfdff0007, x3, 112, x5)

inst_32:
// rs2_h3_val == 16, rs2_h1_val == 16384
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x077fff0009fffd;  op2val:0x1000074000ffef
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x077fff0009fffd, 0x1000074000ffef, x3, 120, x5)

inst_33:
// rs2_h3_val == 4, rs2_h1_val == 4, rs2_h0_val == 4096, rs1_h1_val == 32767, rs2_h2_val == -513
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000feff7ffffff9;  op2val:0x04fdff00041000
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x8000feff7ffffff9, 0x04fdff00041000, x3, 128, x1)

inst_34:
// rs2_h3_val == 2, rs2_h0_val == 32, rs2_h1_val == -2, rs1_h2_val == 0
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa00007fff8000;  op2val:0x02fdfffffe0020
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfffa00007fff8000, 0x02fdfffffe0020, x3, 136, x1)

inst_35:
// rs1_h1_val == -3, rs1_h0_val == 1
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x105555fffd0001;  op2val:0x400000040006fffe
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x105555fffd0001, 0x400000040006fffe, x3, 144, x1)

inst_36:
// rs1_h1_val == 16384, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x06fffc40000001;  op2val:0x5555fff8fff60003
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x06fffc40000001, 0x5555fff8fff60003, x3, 152, x1)

inst_37:
// rs1_h1_val == 4096, rs2_h2_val == 4096, rs2_h1_val == -8193, rs1_h3_val == 8
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x08000610000009;  op2val:0x061000dfffaaaa
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x08000610000009, 0x061000dfffaaaa, x3, 160, x1)

inst_38:
// rs1_h1_val == 512, rs2_h0_val == -513, rs1_h2_val == -32768
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff800002000800;  op2val:0x20fdfffff9fdff
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xffff800002000800, 0x20fdfffff9fdff, x3, 168, x1)

inst_39:
// rs1_h1_val == 128, rs1_h0_val == 1024
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000800800400;  op2val:0xfbff10000003fffa
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xc000000800800400, 0xfbff10000003fffa, x3, 176, x1)

inst_40:
// rs1_h1_val == 32, rs1_h2_val == 2048
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf08000020c000;  op2val:0xfff900103fff3fff
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xffbf08000020c000, 0xfff900103fff3fff, x3, 184, x1)

inst_41:
// rs1_h1_val == 4, rs1_h3_val == 1, rs2_h1_val == 21845, rs2_h0_val == -2049, rs1_h2_val == -513
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fdff0004ffef;  op2val:0xfff8feff5555f7ff
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x01fdff0004ffef, 0xfff8feff5555f7ff, x3, 192, x1)

inst_42:
// rs1_h1_val == 2, rs2_h1_val == -5, rs1_h2_val == -5, rs2_h2_val == 512
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb0002fffd;  op2val:0x070200fffbc000
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfffffffb0002fffd, 0x070200fffbc000, x3, 200, x1)

inst_43:
// rs1_h1_val == 1, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x06ff7f00013fff;  op2val:0xf7ffc000fffeff7f
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x06ff7f00013fff, 0xf7ffc000fffeff7f, x3, 208, x1)

inst_44:
// rs1_h1_val == 0, rs1_h0_val == 128
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10008000000080;  op2val:0xff7f8000fffe0000
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x10008000000080, 0xff7f8000fffe0000, x3, 216, x1)

inst_45:
// rs1_h0_val == -21846, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd80000001aaaa;  op2val:0xefffffffefffaaaa
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfffd80000001aaaa, 0xefffffffefffaaaa, x3, 224, x1)

inst_46:
// rs1_h0_val == 21845, rs1_h2_val == 8192, rs2_h0_val == -9, rs1_h3_val == -9
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff720003fff5555;  op2val:0xffeffff8fffafff7
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfff720003fff5555, 0xffeffff8fffafff7, x3, 232, x1)

inst_47:
// rs1_h0_val == -4097, rs2_h1_val == -2049
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff40000800efff;  op2val:0x100c000f7ffc000
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x3fff40000800efff, 0x100c000f7ffc000, x3, 240, x1)

inst_48:
// rs1_h0_val == -2049, rs2_h3_val == -1, rs1_h2_val == -21846
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcaaaa0040f7ff;  op2val:0xffff0008ff7ffffc
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfffcaaaa0040f7ff, 0xffff0008ff7ffffc, x3, 248, x1)

inst_49:
// rs1_h0_val == -1025, rs1_h3_val == 32767
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffaaaafffafbff;  op2val:0x8000fffa3fff2000
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x7fffaaaafffafbff, 0x8000fffa3fff2000, x3, 256, x1)

inst_50:
// rs1_h0_val == -513, rs2_h1_val == 128, rs2_h0_val == 4
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100080ffeffdff;  op2val:0x80100000800004
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x100080ffeffdff, 0x80100000800004, x3, 264, x1)

inst_51:
// rs1_h0_val == -257, rs2_h1_val == -16385
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40fffd8000feff;  op2val:0x09fff6bfffffbf
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x40fffd8000feff, 0x09fff6bfffffbf, x3, 272, x1)

inst_52:
// rs1_h0_val == -65, rs2_h1_val == 32767, rs2_h2_val == -21846, rs2_h0_val == 1
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe00040004ffbf;  op2val:0x800aaaa7fff0001
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfffe00040004ffbf, 0x800aaaa7fff0001, x3, 280, x1)

inst_53:
// rs1_h0_val == -9, rs2_h1_val == -17
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9aaaa0003fff7;  op2val:0xfffcffffffef2000
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfff9aaaa0003fff7, 0xfffcffffffef2000, x3, 288, x1)

inst_54:
// rs1_h0_val == -5, rs1_h2_val == -1
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000fffffffefffb;  op2val:0x05effffffbffbf
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xc000fffffffefffb, 0x05effffffbffbf, x3, 296, x1)

inst_55:
// rs1_h0_val == -2, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x08ffef0001fffe;  op2val:0x08feff0040fff7
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x08ffef0001fffe, 0x08feff0040fff7, x3, 304, x1)

inst_56:
// rs1_h0_val == 16384, rs1_h1_val == -16385
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x08aaaabfff4000;  op2val:0xfffffffd0040fdff
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x08aaaabfff4000, 0xfffffffd0040fdff, x3, 312, x1)

inst_57:
// rs1_h0_val == 8192, rs1_h3_val == -1025, rs1_h2_val == 1024
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0400fff92000;  op2val:0x07fff6fffefff7
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfbff0400fff92000, 0x07fff6fffefff7, x3, 320, x1)

inst_58:
// rs1_h0_val == 512, rs2_h0_val == 2
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x08fffc00050200;  op2val:0x800001fffa0002
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x08fffc00050200, 0x800001fffa0002, x3, 328, x1)

inst_59:
// rs1_h0_val == 8, rs2_h0_val == 512, rs1_h1_val == -9
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff1000fff70008;  op2val:0xfdff4000ffef0200
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xefff1000fff70008, 0xfdff4000ffef0200, x3, 336, x1)

inst_60:
// rs2_h1_val == 0, rs2_h2_val == -129
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffefffff7ffffd;  op2val:0x09ff7f00000009
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfbffefffff7ffffd, 0x09ff7f00000009, x3, 344, x1)

inst_61:
// rs2_h1_val == -1, rs1_h2_val == 32, rs1_h3_val == 8192, rs2_h2_val == 0
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200000207fff4000;  op2val:0xfbff0000ffff3fff
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x200000207fff4000, 0xfbff0000ffff3fff, x3, 352, x1)

inst_62:
// rs2_h0_val == 21845, rs2_h2_val == -65, rs2_h1_val == 1024
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fffb4000bfff;  op2val:0xff7fffbf04005555
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x03fffb4000bfff, 0xff7fffbf04005555, x3, 360, x1)

inst_63:
// rs2_h0_val == 32767, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x040002ffff5555;  op2val:0xfff80004fffc7fff
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x040002ffff5555, 0xfff80004fffc7fff, x3, 368, x1)

inst_64:
// rs2_h0_val == -8193, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffdf0010fffc;  op2val:0xfffb10000080dfff
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xffbfffdf0010fffc, 0xfffb10000080dfff, x3, 376, x1)

inst_65:
// rs2_h0_val == -4097, rs1_h3_val == 32
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2001000080fbff;  op2val:0x200feff2000efff
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x2001000080fbff, 0x200feff2000efff, x3, 384, x1)

inst_66:
// rs2_h0_val == -33, rs1_h2_val == 64, rs2_h2_val == -33
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x010040bffffff8;  op2val:0x800ffdf0002ffdf
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x010040bffffff8, 0x800ffdf0002ffdf, x3, 392, x1)

inst_67:
// rs2_h0_val == -5, rs1_h3_val == 2048
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000001fdffc000;  op2val:0x4000dffff7fffffb
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x8000001fdffc000, 0x4000dffff7fffffb, x3, 400, x1)

inst_68:
// rs2_h0_val == 256, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff600801000fbff;  op2val:0xfbfffbff00040100
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfff600801000fbff, 0xfbfffbff00040100, x3, 408, x1)

inst_69:
// rs2_h0_val == 128, rs2_h2_val == 256
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffeff00064000;  op2val:0xbfff0100ffef0080
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x7ffffeff00064000, 0xbfff0100ffef0080, x3, 416, x1)

inst_70:
// rs2_h0_val == 64, rs2_h3_val == 1, rs2_h1_val == -9
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0040fffa0400;  op2val:0x014000fff70040
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x3fff0040fffa0400, 0x014000fff70040, x3, 424, x1)

inst_71:
// rs2_h0_val == 8, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x800000040800efff;  op2val:0xfdffffff00070008
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x800000040800efff, 0xfdffffff00070008, x3, 432, x1)

inst_72:
// rs1_h3_val == -513, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff5555f7ff0080;  op2val:0xffffeffffffb0004
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfdff5555f7ff0080, 0xffffeffffffb0004, x3, 440, x1)

inst_73:
// rs1_h3_val == -257, rs1_h1_val == -1025
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefff7fffbff0400;  op2val:0x01efffff7ffeff
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfefff7fffbff0400, 0x01efffff7ffeff, x3, 448, x1)

inst_74:
// rs1_h3_val == -33, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffff93fff4000;  op2val:0x057fff0040ffff
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xffdffff93fff4000, 0x057fff0040ffff, x3, 456, x1)

inst_75:
// rs1_h3_val == 1024, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400ffdfffef0003;  op2val:0xffdf00403fff0400
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x400ffdfffef0003, 0xffdf00403fff0400, x3, 464, x1)

inst_76:
// rs1_h3_val == 256, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000006fff8ffdf;  op2val:0x08fefffff8fffd
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x1000006fff8ffdf, 0x08fefffff8fffd, x3, 472, x1)

inst_77:
// rs2_h2_val == -2049, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fdff00074000;  op2val:0xfffef7ff0040fff9
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfff8fdff00074000, 0xfffef7ff0040fff9, x3, 480, x1)

inst_78:
// rs1_h3_val == 128, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fff8ffefc000;  op2val:0xffbf0004efff8000
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x80fff8ffefc000, 0xffbf0004efff8000, x3, 488, x1)

inst_79:
// rs2_h2_val == -9, rs1_h1_val == -257, rs2_h3_val == 0, rs2_h1_val == -33
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10dffffefffff8;  op2val:0x00fff7ffdf1000
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x10dffffefffff8, 0x00fff7ffdf1000, x3, 496, x1)

inst_80:
// rs1_h3_val == 0, rs1_h1_val == -65
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x008000ffbf0004;  op2val:0xfff6ffefdffffbff
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x008000ffbf0004, 0xfff6ffefdffffbff, x3, 504, x1)

inst_81:
// rs2_h2_val == -5, rs1_h3_val == -5
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffeffbf0800;  op2val:0x10fffbffeffff9
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfffbfffeffbf0800, 0x10fffbffeffff9, x3, 512, x1)

inst_82:
// rs2_h2_val == -2, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafff6fff7;  op2val:0xfff9fffeefff0400
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafff6fff7, 0xfff9fffeefff0400, x3, 520, x1)

inst_83:
// rs1_h2_val == -16385, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10bfff0007fffe;  op2val:0xfeffffbffff80020
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x10bfff0007fffe, 0xfeffffbffff80020, x3, 528, x1)

inst_84:
// rs2_h2_val == 8192, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff83fff00090000;  op2val:0xffdf20001000c000
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfff83fff00090000, 0xffdf20001000c000, x3, 536, x1)

inst_85:
// rs1_h2_val == -1025, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fbff7fff0800;  op2val:0xfff6ffff00022000
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x10fbff7fff0800, 0xfff6ffff00022000, x3, 544, x1)

inst_86:
// rs2_h1_val == -21846, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x060000dfff0400;  op2val:0xfffc0008aaaac000
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x060000dfff0400, 0xfffc0008aaaac000, x3, 552, x1)

inst_87:
// rs2_h1_val == 16, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffff7fffffb0040;  op2val:0x06200000105555
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xdffff7fffffb0040, 0x06200000105555, x3, 560, x1)

inst_88:
// rs2_h1_val == 8, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0004fefffffe;  op2val:0xfffabfff0008fff6
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfffd0004fefffffe, 0xfffabfff0008fff6, x3, 568, x1)

inst_89:
// rs2_h1_val == -3, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000007fffeffdf;  op2val:0x010003fffdfffd
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x80000007fffeffdf, 0x010003fffdfffd, x3, 576, x1)

inst_90:
// rs1_h1_val == 21845, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffef55550100;  op2val:0xfffc0003ffbf7fff
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x7fffffef55550100, 0xfffc0003ffbf7fff, x3, 584, x1)

inst_91:
// rs1_h3_val == -17, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefc0008000fff9;  op2val:0xc000002000020200
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xffefc0008000fff9, 0xc000002000020200, x3, 592, x1)

inst_92:
// rs2_h2_val == 128, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff7fff0004aaaa;  op2val:0xfeff00807fff0008
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xdfff7fff0004aaaa, 0xfeff00807fff0008, x3, 600, x1)

inst_93:
// rs1_h0_val == -1, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400fff9ffdfffff;  op2val:0xffff0005fffe0000
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x400fff9ffdfffff, 0xffff0005fffe0000, x3, 608, x1)

inst_94:
// rs1_h2_val == -65, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcffbf0002ffef;  op2val:0xfbff08000000fff6
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfffcffbf0002ffef, 0xfbff08000000fff6, x3, 616, x1)

inst_95:
// rs2_h1_val == 512, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x09008000010003;  op2val:0xfff7ffff0200f7ff
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x09008000010003, 0xfff7ffff0200f7ff, x3, 624, x1)

inst_96:
// rs2_h1_val == 256, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa002000060020;  op2val:0x0908000100c000
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfffa002000060020, 0x0908000100c000, x3, 632, x1)

inst_97:
// rs1_h2_val == -9, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700060010;  op2val:0xbffffff60007ff7f
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfffffff700060010, 0xbffffff60007ff7f, x3, 640, x1)

inst_98:
// rs1_h3_val == 16384, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000001ffbf0800;  op2val:0x05ffdf00800006
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x40000001ffbf0800, 0x05ffdf00800006, x3, 648, x1)

inst_99:
// rs2_h1_val == 32, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000404000020;  op2val:0xfff9000300200400
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x7fff000404000020, 0xfff9000300200400, x3, 656, x1)

inst_100:
// rs2_h2_val == 21845, 
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x090020f7ff0040;  op2val:0xffdf5555fffefff9
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x090020f7ff0040, 0xffdf5555fffefff9, x3, 664, x1)

inst_101:
// rs1_h3_val == rs2_h3_val, rs1_h3_val == 512, rs1_h0_val == -17, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h0_val == -257, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h3_val == 512, rs2_h1_val == -32768, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h1_val == -513
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000005fdffffef;  op2val:0x200fff98000feff
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x2000005fdffffef, 0x200fff98000feff, x3, 672, x1)

inst_102:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h3_val == -3, rs1_h2_val == 8, rs1_h1_val == 16, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h0_val == -17, rs2_h2_val == 1024, rs1_h0_val == -16385
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff00080010bfff;  op2val:0xfffd0400fff8ffef
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0x3fff00080010bfff, 0xfffd0400fff8ffef, x3, 680, x1)

inst_103:
// rs2_h3_val == -5, rs1_h2_val == 16, rs2_h2_val == -3, rs1_h0_val == 32767, rs1_h3_val == -2, rs1_h1_val == -129
// opcode: stsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0010ff7f7fff;  op2val:0xfffbfffdc000fffe
TEST_RR_OP(stsa16, x31, x30, x29, 0x0000000000000000, 0xfffe0010ff7f7fff, 0xfffbfffdc000fffe, x3, 688, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 87*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
