
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uksub32 instruction of the RISC-V RV64PZicsr extension for the uksub32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uksub32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x2, rs2==x31, rd==x2, rs1_w0_val == 0, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w0_val == 8192, rs1_w1_val == 4, rs2_w1_val == 4294967293
// opcode: uksub32 ; op1:x2; op2:x31; dest:x2; op1val:0x00000400000000;  op2val:0xfffffffd00002000
TEST_PKRR_OP(uksub32, x2, x2, x31, 0x0000000000000000, 0x00000400000000, 0xfffffffd00002000, x2, x6, 0, x16)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x5, rs2==x9, rd==x26, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w0_val == 262144, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 4261412863, rs2_w1_val == 524288, rs1_w1_val == 524288
// opcode: uksub32 ; op1:x5; op2:x9; dest:x26; op1val:0x08000000040000;  op2val:0x080000fdffffff
TEST_PKRR_OP(uksub32, x26, x5, x9, 0x0000000000000000, 0x08000000040000, 0x080000fdffffff, x5, x6, 16, x16)

inst_2:
// rs1 == rs2 != rd, rs1==x10, rs2==x10, rd==x21, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 4294934527, rs1_w0_val == 4294934527
// opcode: uksub32 ; op1:x10; op2:x10; dest:x21; op1val:0x000006ffff7fff;  op2val:0x080000ffff7fff
TEST_PKRR_OP(uksub32, x21, x10, x10, 0x0000000000000000, 0x000006ffff7fff, 0x080000ffff7fff, x10, x6, 32, x16)

inst_3:
// rs1 == rs2 == rd, rs1==x15, rs2==x15, rd==x15, rs2_w1_val == 2863311530, rs2_w0_val == 4294967291, rs1_w1_val == 1431655765
// opcode: uksub32 ; op1:x15; op2:x15; dest:x15; op1val:0x555555550000000c;  op2val:0xaaaaaaaafffffffb
TEST_PKRR_OP(uksub32, x15, x15, x15, 0x0000000000000000, 0x555555550000000c, 0xaaaaaaaafffffffb, x15, x6, 48, x16)

inst_4:
// rs2 == rd != rs1, rs1==x3, rs2==x14, rd==x14, rs2_w1_val == 1431655765, rs1_w1_val == 4294967231, rs1_w0_val == 4294965247
// opcode: uksub32 ; op1:x3; op2:x14; dest:x14; op1val:0xffffffbffffff7ff;  op2val:0x555555550000000d
TEST_PKRR_OP(uksub32, x14, x3, x14, 0x0000000000000000, 0xffffffbffffff7ff, 0x555555550000000d, x3, x6, 64, x16)

inst_5:
// rs1==x27, rs2==x2, rd==x4, rs2_w1_val == 2147483647, rs1_w0_val == 4227858431, rs1_w1_val == 256, rs2_w0_val == 4293918719
// opcode: uksub32 ; op1:x27; op2:x2; dest:x4; op1val:0x000100fbffffff;  op2val:0x7fffffffffefffff
TEST_PKRR_OP(uksub32, x4, x27, x2, 0x0000000000000000, 0x000100fbffffff, 0x7fffffffffefffff, x27, x6, 80, x16)

inst_6:
// rs1==x4, rs2==x12, rd==x13, rs2_w1_val == 3221225471, rs2_w0_val == 512, rs1_w1_val == 4294967287, rs1_w0_val == 134217728
// opcode: uksub32 ; op1:x4; op2:x12; dest:x13; op1val:0xfffffff708000000;  op2val:0xbfffffff00000200
TEST_PKRR_OP(uksub32, x13, x4, x12, 0x0000000000000000, 0xfffffff708000000, 0xbfffffff00000200, x4, x6, 96, x16)

inst_7:
// rs1==x9, rs2==x5, rd==x7, rs2_w1_val == 3758096383, rs1_w0_val == 2, rs2_w0_val == 1, rs1_w1_val == 2
// opcode: uksub32 ; op1:x9; op2:x5; dest:x7; op1val:0x00000200000002;  op2val:0xdfffffff00000001
TEST_PKRR_OP(uksub32, x7, x9, x5, 0x0000000000000000, 0x00000200000002, 0xdfffffff00000001, x9, x6, 112, x16)

inst_8:
// rs1==x30, rs2==x28, rd==x25, rs2_w1_val == 4026531839, rs2_w0_val == 1024, rs1_w0_val == 256, rs1_w1_val == 2147483647
// opcode: uksub32 ; op1:x30; op2:x28; dest:x25; op1val:0x7fffffff00000100;  op2val:0xefffffff00000400
TEST_PKRR_OP(uksub32, x25, x30, x28, 0x0000000000000000, 0x7fffffff00000100, 0xefffffff00000400, x30, x6, 128, x16)

inst_9:
// rs1==x20, rs2==x7, rd==x12, rs2_w1_val == 4160749567, rs1_w1_val == 4294901759
// opcode: uksub32 ; op1:x20; op2:x7; dest:x12; op1val:0xfffefffffbffffff;  op2val:0xf7ffffff00000400
TEST_PKRR_OP(uksub32, x12, x20, x7, 0x0000000000000000, 0xfffefffffbffffff, 0xf7ffffff00000400, x20, x6, 144, x16)

inst_10:
// rs1==x31, rs2==x8, rd==x11, rs2_w1_val == 4227858431, rs2_w0_val == 4194304, rs1_w0_val == 4294963199
// opcode: uksub32 ; op1:x31; op2:x8; dest:x11; op1val:0x00000bffffefff;  op2val:0xfbffffff00400000
TEST_PKRR_OP(uksub32, x11, x31, x8, 0x0000000000000000, 0x00000bffffefff, 0xfbffffff00400000, x31, x6, 160, x16)

inst_11:
// rs1==x1, rs2==x19, rd==x20, rs2_w1_val == 4261412863, rs1_w0_val == 1024, rs2_w0_val == 8
// opcode: uksub32 ; op1:x1; op2:x19; dest:x20; op1val:0xffffffbf00000400;  op2val:0xfdffffff00000008
TEST_PKRR_OP(uksub32, x20, x1, x19, 0x0000000000000000, 0xffffffbf00000400, 0xfdffffff00000008, x1, x6, 176, x16)

inst_12:
// rs1==x17, rs2==x25, rd==x10, rs2_w1_val == 4278190079, rs1_w1_val == 4294967263, rs2_w0_val == 256
// opcode: uksub32 ; op1:x17; op2:x25; dest:x10; op1val:0xffffffdffbffffff;  op2val:0xfeffffff00000100
TEST_PKRR_OP(uksub32, x10, x17, x25, 0x0000000000000000, 0xffffffdffbffffff, 0xfeffffff00000100, x17, x6, 192, x16)

inst_13:
// rs1==x29, rs2==x0, rd==x8, rs2_w1_val == 4286578687, rs2_w0_val == 4294967293, rs1_w1_val == 4294967039, rs1_w0_val == 268435456
// opcode: uksub32 ; op1:x29; op2:x0; dest:x8; op1val:0xfffffeff10000000;  op2val:0xff7ffffffffffffd
TEST_PKRR_OP(uksub32, x8, x29, x0, 0x0000000000000000, 0xfffffeff10000000, 0xff7ffffffffffffd, x29, x6, 208, x16)

inst_14:
// rs1==x21, rs2==x4, rd==x31, rs2_w1_val == 4290772991, rs1_w0_val == 131072, rs1_w1_val == 4294967291
// opcode: uksub32 ; op1:x21; op2:x4; dest:x31; op1val:0xfffffffb00020000;  op2val:0xffbfffff00400000
TEST_PKRR_OP(uksub32, x31, x21, x4, 0x0000000000000000, 0xfffffffb00020000, 0xffbfffff00400000, x21, x6, 224, x16)

inst_15:
// rs1==x7, rs2==x23, rd==x18, rs2_w1_val == 4292870143, rs2_w0_val == 4294967231
// opcode: uksub32 ; op1:x7; op2:x23; dest:x18; op1val:0x00000c00040000;  op2val:0xffdfffffffffffbf
TEST_PKRR_OP(uksub32, x18, x7, x23, 0x0000000000000000, 0x00000c00040000, 0xffdfffffffffffbf, x7, x6, 240, x16)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_16:
// rs1==x12, rs2==x30, rd==x19, rs2_w1_val == 4293918719, rs1_w0_val == 64
// opcode: uksub32 ; op1:x12; op2:x30; dest:x19; op1val:0x00001300000040;  op2val:0xffefffff00000008
TEST_PKRR_OP(uksub32, x19, x12, x30, 0x0000000000000000, 0x00001300000040, 0xffefffff00000008, x12, x2, 0, x4)

inst_17:
// rs1==x0, rs2==x29, rd==x24, rs2_w1_val == 4294443007, rs2_w0_val == 3758096383
// opcode: uksub32 ; op1:x0; op2:x29; dest:x24; op1val:0xfffffffb00000013;  op2val:0xfff7ffffdfffffff
TEST_PKRR_OP(uksub32, x24, x0, x29, 0x0000000000000000, 0xfffffffb00000013, 0xfff7ffffdfffffff, x0, x2, 16, x4)

inst_18:
// rs1==x23, rs2==x13, rd==x3, rs2_w1_val == 4294705151, rs1_w0_val == 3758096383, rs1_w1_val == 131072
// opcode: uksub32 ; op1:x23; op2:x13; dest:x3; op1val:0x020000dfffffff;  op2val:0xfffbfffffffffffb
TEST_PKRR_OP(uksub32, x3, x23, x13, 0x0000000000000000, 0x020000dfffffff, 0xfffbfffffffffffb, x23, x2, 32, x4)

inst_19:
// rs1==x19, rs2==x27, rd==x9, rs2_w1_val == 4294836223, rs2_w0_val == 16384, rs1_w0_val == 1048576
// opcode: uksub32 ; op1:x19; op2:x27; dest:x9; op1val:0x00010000100000;  op2val:0xfffdffff00004000
TEST_PKRR_OP(uksub32, x9, x19, x27, 0x0000000000000000, 0x00010000100000, 0xfffdffff00004000, x19, x2, 48, x4)

inst_20:
// rs1==x18, rs2==x1, rd==x17, rs2_w1_val == 4294901759, rs1_w0_val == 4294967293, rs2_w0_val == 4292870143
// opcode: uksub32 ; op1:x18; op2:x1; dest:x17; op1val:0x000009fffffffd;  op2val:0xfffeffffffdfffff
TEST_PKRR_OP(uksub32, x17, x18, x1, 0x0000000000000000, 0x000009fffffffd, 0xfffeffffffdfffff, x18, x2, 64, x4)

inst_21:
// rs1==x6, rs2==x26, rd==x30, rs2_w1_val == 4294934527, rs1_w1_val == 4294963199
// opcode: uksub32 ; op1:x6; op2:x26; dest:x30; op1val:0xffffefff00000100;  op2val:0xffff7fff00000200
TEST_PKRR_OP(uksub32, x30, x6, x26, 0x0000000000000000, 0xffffefff00000100, 0xffff7fff00000200, x6, x2, 80, x4)

inst_22:
// rs1==x24, rs2==x21, rd==x6, rs2_w1_val == 4294950911, rs1_w0_val == 8192
// opcode: uksub32 ; op1:x24; op2:x21; dest:x6; op1val:0xfffffff700002000;  op2val:0xffffbfff00000009
TEST_PKRR_OP(uksub32, x6, x24, x21, 0x0000000000000000, 0xfffffff700002000, 0xffffbfff00000009, x24, x2, 96, x4)

inst_23:
// rs1==x14, rs2==x22, rd==x28, rs2_w1_val == 4294959103, rs2_w0_val == 4227858431
// opcode: uksub32 ; op1:x14; op2:x22; dest:x28; op1val:0x00000bffffefff;  op2val:0xffffdffffbffffff
TEST_PKRR_OP(uksub32, x28, x14, x22, 0x0000000000000000, 0x00000bffffefff, 0xffffdffffbffffff, x14, x2, 112, x4)

inst_24:
// rs1==x28, rs2==x20, rd==x16, rs2_w1_val == 4294963199, rs1_w1_val == 16384, rs1_w0_val == 2147483647, rs2_w0_val == 4294443007
// opcode: uksub32 ; op1:x28; op2:x20; dest:x16; op1val:0x0040007fffffff;  op2val:0xffffeffffff7ffff
TEST_PKRR_OP(uksub32, x16, x28, x20, 0x0000000000000000, 0x0040007fffffff, 0xffffeffffff7ffff, x28, x2, 128, x4)

inst_25:
// rs1==x11, rs2==x16, rd==x0, rs2_w1_val == 4294965247, rs1_w0_val == 4294967263
// opcode: uksub32 ; op1:x11; op2:x16; dest:x0; op1val:0x000002ffffffdf;  op2val:0xfffff7fffff7ffff
TEST_PKRR_OP(uksub32, x0, x11, x16, 0x0000000000000000, 0x000002ffffffdf, 0xfffff7fffff7ffff, x11, x2, 144, x4)

inst_26:
// rs1==x25, rs2==x17, rd==x29, rs2_w1_val == 4294966271, 
// opcode: uksub32 ; op1:x25; op2:x17; dest:x29; op1val:0xfffffeff0000000d;  op2val:0xfffffbfffdffffff
TEST_PKRR_OP(uksub32, x29, x25, x17, 0x0000000000000000, 0xfffffeff0000000d, 0xfffffbfffdffffff, x25, x2, 160, x4)

inst_27:
// rs1==x26, rs2==x3, rd==x22, rs2_w1_val == 4294966783, rs2_w0_val == 4294967295
// opcode: uksub32 ; op1:x26; op2:x3; dest:x22; op1val:0x00000200000005;  op2val:0xfffffdffffffffff
TEST_PKRR_OP(uksub32, x22, x26, x3, 0x0000000000000000, 0x00000200000005, 0xfffffdffffffffff, x26, x2, 176, x4)

inst_28:
// rs1==x22, rs2==x11, rd==x27, rs2_w1_val == 4294967039, rs1_w0_val == 4292870143, rs1_w1_val == 4278190079
// opcode: uksub32 ; op1:x22; op2:x11; dest:x27; op1val:0xfeffffffffdfffff;  op2val:0xfffffeff0000000b
TEST_PKRR_OP(uksub32, x27, x22, x11, 0x0000000000000000, 0xfeffffffffdfffff, 0xfffffeff0000000b, x22, x2, 192, x4)

inst_29:
// rs1==x8, rs2==x6, rd==x1, rs2_w1_val == 4294967167, rs1_w1_val == 1
// opcode: uksub32 ; op1:x8; op2:x6; dest:x1; op1val:0x0000010000000c;  op2val:0xffffff7f00000200
TEST_PKRR_OP(uksub32, x1, x8, x6, 0x0000000000000000, 0x0000010000000c, 0xffffff7f00000200, x8, x2, 208, x4)

inst_30:
// rs1==x13, rs2==x24, rd==x23, rs2_w1_val == 4294967231, 
// opcode: uksub32 ; op1:x13; op2:x24; dest:x23; op1val:0x00000700000013;  op2val:0xffffffbf00000012
TEST_PKRR_OP(uksub32, x23, x13, x24, 0x0000000000000000, 0x00000700000013, 0xffffffbf00000012, x13, x2, 224, x4)

inst_31:
// rs1==x16, rs2==x18, rd==x5, rs2_w1_val == 4294967263, rs2_w0_val == 33554432, rs1_w0_val == 4278190079, rs1_w1_val == 4227858431
// opcode: uksub32 ; op1:x16; op2:x18; dest:x5; op1val:0xfbfffffffeffffff;  op2val:0xffffffdf02000000
TEST_PKRR_OP(uksub32, x5, x16, x18, 0x0000000000000000, 0xfbfffffffeffffff, 0xffffffdf02000000, x16, x2, 240, x4)

inst_32:
// rs2_w1_val == 4294967279, rs2_w0_val == 2097152
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000d0000000d;  op2val:0xffffffef00200000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00000d0000000d, 0xffffffef00200000, x30, x2, 256, x4)

inst_33:
// rs2_w1_val == 4294967287, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffdfffff;  op2val:0xfffffff7ffefffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xffffffbfffdfffff, 0xfffffff7ffefffff, x30, x2, 272, x1)

inst_34:
// rs2_w1_val == 4294967291, rs1_w1_val == 1048576, rs1_w0_val == 1
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000001;  op2val:0xfffffffb00200000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x10000000000001, 0xfffffffb00200000, x30, x2, 288, x1)

inst_35:
// rs2_w1_val == 4294967294, rs2_w0_val == 65536, rs1_w1_val == 4160749567
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffdfffffff;  op2val:0xfffffffe00010000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xf7ffffffdfffffff, 0xfffffffe00010000, x30, x2, 304, x1)

inst_36:
// rs2_w1_val == 2147483648, rs1_w1_val == 512, rs1_w0_val == 16
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000010;  op2val:0x800000000000000f
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00020000000010, 0x800000000000000f, x30, x2, 320, x1)

inst_37:
// rs2_w1_val == 1073741824, rs2_w0_val == 4294967167, rs1_w0_val == 2147483648
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf80000000;  op2val:0x40000000ffffff7f
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xffffffdf80000000, 0x40000000ffffff7f, x30, x2, 336, x1)

inst_38:
// rs2_w1_val == 536870912, rs1_w1_val == 4294967293
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffddfffffff;  op2val:0x20000000fffffffb
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfffffffddfffffff, 0x20000000fffffffb, x30, x2, 352, x1)

inst_39:
// rs2_w1_val == 268435456, rs1_w1_val == 134217728
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffffffd;  op2val:0x1000000000002000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x8000000fffffffd, 0x1000000000002000, x30, x2, 368, x1)

inst_40:
// rs2_w1_val == 134217728, rs2_w0_val == 4294950911
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffffdf;  op2val:0x8000000ffffbfff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffffdf, 0x8000000ffffbfff, x30, x2, 384, x1)

inst_41:
// rs2_w1_val == 67108864, rs2_w0_val == 4294836223, rs1_w0_val == 32768
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00008000;  op2val:0x4000000fffdffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00008000, 0x4000000fffdffff, x30, x2, 400, x1)

inst_42:
// rs2_w1_val == 33554432, rs1_w1_val == 4294967167
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000005;  op2val:0x2000000fbffffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000005, 0x2000000fbffffff, x30, x2, 416, x1)

inst_43:
// rs2_w1_val == 16777216, rs1_w0_val == 16777216, rs2_w0_val == 64
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000f01000000;  op2val:0x100000000000040
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00000f01000000, 0x100000000000040, x30, x2, 432, x1)

inst_44:
// rs2_w1_val == 8388608, rs1_w1_val == 4294967279, rs2_w0_val == 4096
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000000;  op2val:0x80000000001000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xffffffef00000000, 0x80000000001000, x30, x2, 448, x1)

inst_45:
// rs2_w1_val == 4194304, rs2_w0_val == 32768
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00000000;  op2val:0x40000000008000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xffffefff00000000, 0x40000000008000, x30, x2, 464, x1)

inst_46:
// rs2_w1_val == 2097152, rs1_w0_val == 4194304, rs1_w1_val == 4261412863, rs2_w0_val == 268435456
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00400000;  op2val:0x20000010000000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00400000, 0x20000010000000, x30, x2, 480, x1)

inst_47:
// rs2_w1_val == 1048576, rs1_w1_val == 32
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000020ffffffdf;  op2val:0x10000000000040
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x000020ffffffdf, 0x10000000000040, x30, x2, 496, x1)

inst_48:
// rs2_w1_val == 262144, rs1_w0_val == 512
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000200;  op2val:0x04000000000006
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00000400000200, 0x04000000000006, x30, x2, 512, x1)

inst_49:
// rs2_w1_val == 131072, rs1_w0_val == 4290772991, rs2_w0_val == 4026531839
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffbfffff;  op2val:0x020000efffffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x7fffffffffbfffff, 0x020000efffffff, x30, x2, 528, x1)

inst_50:
// rs2_w1_val == 65536, rs1_w1_val == 4293918719, rs1_w0_val == 4294967039, rs2_w0_val == 4160749567
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffeff;  op2val:0x010000f7ffffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffeff, 0x010000f7ffffff, x30, x2, 544, x1)

inst_51:
// rs2_w1_val == 32768, rs2_w0_val == 4294967263
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000006;  op2val:0x008000ffffffdf
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfffffff700000006, 0x008000ffffffdf, x30, x2, 560, x1)

inst_52:
// rs2_w1_val == 16384, rs1_w1_val == 0, rs2_w0_val == 4294967039
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000000000010;  op2val:0x004000fffffeff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00000000000010, 0x004000fffffeff, x30, x2, 576, x1)

inst_53:
// rs2_w1_val == 8192, rs1_w1_val == 4294967294
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffdfffff;  op2val:0x00200000004000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfffffffeffdfffff, 0x00200000004000, x30, x2, 592, x1)

inst_54:
// rs1_w0_val == 65536, rs1_w1_val == 64, rs2_w0_val == 536870912
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000010000;  op2val:0x00200020000000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00004000010000, 0x00200020000000, x30, x2, 608, x1)

inst_55:
// rs1_w0_val == 16384, rs1_w1_val == 65536
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000004000;  op2val:0xfffdffff00010000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x01000000004000, 0xfffdffff00010000, x30, x2, 624, x1)

inst_56:
// rs1_w0_val == 4096, rs1_w1_val == 3758096383
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff00001000;  op2val:0xfffbfffff7ffffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xdfffffff00001000, 0xfffbfffff7ffffff, x30, x2, 640, x1)

inst_57:
// rs1_w0_val == 2048, rs1_w1_val == 262144
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000800;  op2val:0xfffffdff0000000b
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x04000000000800, 0xfffffdff0000000b, x30, x2, 656, x1)

inst_58:
// rs1_w0_val == 128, rs2_w0_val == 4294967279
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000080;  op2val:0xefffffffffffffef
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000080, 0xefffffffffffffef, x30, x2, 672, x1)

inst_59:
// rs1_w0_val == 32, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000020;  op2val:0x00000f00004000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000020, 0x00000f00004000, x30, x2, 688, x1)

inst_60:
// rs1_w0_val == 8, rs2_w0_val == 32, rs1_w1_val == 2863311530
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00000008;  op2val:0xf7ffffff00000020
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000008, 0xf7ffffff00000020, x30, x2, 704, x1)

inst_61:
// rs1_w0_val == 4, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000004;  op2val:0x00400000000100
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfffffff700000004, 0x00400000000100, x30, x2, 720, x1)

inst_62:
// rs1_w0_val == 4294967295, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000ffffffff;  op2val:0x2000000000008000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x010000ffffffff, 0x2000000000008000, x30, x2, 736, x1)

inst_63:
// rs2_w1_val == 4096, rs1_w1_val == 4026531839
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00000010;  op2val:0x00100000400000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xefffffff00000010, 0x00100000400000, x30, x2, 752, x1)

inst_64:
// rs2_w1_val == 2048, rs2_w0_val == 4294967287
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000020000000a;  op2val:0x000800fffffff7
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x0000020000000a, 0x000800fffffff7, x30, x2, 768, x1)

inst_65:
// rs2_w1_val == 1024, rs2_w0_val == 2147483647, rs1_w1_val == 4294443007
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000003;  op2val:0x0004007fffffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000003, 0x0004007fffffff, x30, x2, 784, x1)

inst_66:
// rs2_w1_val == 512, rs1_w0_val == 2863311530
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffaaaaaaaa;  op2val:0x000200fffdffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfbffffffaaaaaaaa, 0x000200fffdffff, x30, x2, 800, x1)

inst_67:
// rs2_w1_val == 256, rs1_w1_val == 4294934527
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000005;  op2val:0x00010000000001
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000005, 0x00010000000001, x30, x2, 816, x1)

inst_68:
// rs2_w1_val == 128, rs2_w0_val == 4294959103
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaafffffffd;  op2val:0x000080ffffdfff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaafffffffd, 0x000080ffffdfff, x30, x2, 832, x1)

inst_69:
// rs2_w1_val == 64, rs1_w1_val == 4294959103
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff80000000;  op2val:0x00004000000005
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xffffdfff80000000, 0x00004000000005, x30, x2, 848, x1)

inst_70:
// rs2_w1_val == 32, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00004000;  op2val:0x00002000000100
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00004000, 0x00002000000100, x30, x2, 864, x1)

inst_71:
// rs2_w1_val == 16, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900040000;  op2val:0x000010fbffffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00000900040000, 0x000010fbffffff, x30, x2, 880, x1)

inst_72:
// rs2_w1_val == 8, rs2_w0_val == 1073741824, rs1_w1_val == 16777216
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000003;  op2val:0x00000840000000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x100000000000003, 0x00000840000000, x30, x2, 896, x1)

inst_73:
// rs2_w1_val == 4, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000d00000010;  op2val:0x000004fffffffd
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00000d00000010, 0x000004fffffffd, x30, x2, 912, x1)

inst_74:
// rs2_w1_val == 2, rs2_w0_val == 4278190079, rs1_w0_val == 8388608, rs1_w1_val == 8388608
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000800000;  op2val:0x000002feffffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x80000000800000, 0x000002feffffff, x30, x2, 928, x1)

inst_75:
// rs2_w1_val == 1, rs1_w1_val == 2097152, rs2_w0_val == 2048
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000007fffffff;  op2val:0x00000100000800
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x2000007fffffff, 0x00000100000800, x30, x2, 944, x1)

inst_76:
// rs2_w1_val == 4294967295, rs1_w0_val == 4294836223
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffefffdffff;  op2val:0xfffffffffffdffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfffffffefffdffff, 0xfffffffffffdffff, x30, x2, 960, x1)

inst_77:
// rs2_w1_val == 0, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000000080;  op2val:0x00000040000000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x02000000000080, 0x00000040000000, x30, x2, 976, x1)

inst_78:
// rs2_w0_val == 2863311530, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000012ffff7fff;  op2val:0xfffbffffaaaaaaaa
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x000012ffff7fff, 0xfffbffffaaaaaaaa, x30, x2, 992, x1)

inst_79:
// rs2_w0_val == 1431655765, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffbfffff;  op2val:0x200000055555555
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x100000ffbfffff, 0x200000055555555, x30, x2, 1008, x1)

inst_80:
// rs2_w0_val == 3221225471, rs1_w0_val == 2097152
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff00200000;  op2val:0x040000bfffffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xffffefff00200000, 0x040000bfffffff, x30, x2, 1024, x1)

inst_81:
// rs2_w0_val == 4286578687, rs1_w0_val == 67108864, rs1_w1_val == 128
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008004000000;  op2val:0xffdfffffff7fffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00008004000000, 0xffdfffffff7fffff, x30, x2, 1040, x1)

inst_82:
// rs2_w0_val == 4290772991, rs1_w1_val == 4294965247, rs1_w0_val == 4294967167
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffff7f;  op2val:0x000002ffbfffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffff7f, 0x000002ffbfffff, x30, x2, 1056, x1)

inst_83:
// rs2_w0_val == 4294705151, rs1_w0_val == 33554432
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff02000000;  op2val:0x2000000fffbffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff02000000, 0x2000000fffbffff, x30, x2, 1072, x1)

inst_84:
// rs2_w0_val == 4294901759, rs1_w1_val == 3221225471, rs1_w0_val == 524288
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00080000;  op2val:0x1000000fffeffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00080000, 0x1000000fffeffff, x30, x2, 1088, x1)

inst_85:
// rs2_w0_val == 4294963199, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000010000000;  op2val:0xdfffffffffffefff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x20000010000000, 0xdfffffffffffefff, x30, x2, 1104, x1)

inst_86:
// rs2_w0_val == 128, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000a00004000;  op2val:0x200000000000080
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00000a00004000, 0x200000000000080, x30, x2, 1120, x1)

inst_87:
// rs2_w0_val == 16, rs1_w1_val == 16
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000001000;  op2val:0x00002000000010
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00001000001000, 0x00002000000010, x30, x2, 1136, x1)

inst_88:
// rs2_w0_val == 4, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200000011;  op2val:0x00000400000004
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00000200000011, 0x00000400000004, x30, x2, 1152, x1)

inst_89:
// rs2_w0_val == 2, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000002000000;  op2val:0xffefffff00000002
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x01000002000000, 0xffefffff00000002, x30, x2, 1168, x1)

inst_90:
// rs2_w0_val == 0, rs1_w0_val == 4160749567
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000f7ffffff;  op2val:0x00000c00000000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x080000f7ffffff, 0x00000c00000000, x30, x2, 1184, x1)

inst_91:
// rs1_w1_val == 4286578687, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000008;  op2val:0x00000710000000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000008, 0x00000710000000, x30, x2, 1200, x1)

inst_92:
// rs1_w1_val == 4290772991, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff80000000;  op2val:0xefffffff0000000c
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xffbfffff80000000, 0xefffffff0000000c, x30, x2, 1216, x1)

inst_93:
// rs1_w1_val == 4292870143, rs1_w0_val == 4293918719
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffefffff;  op2val:0x000010fffffffb
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xffdfffffffefffff, 0x000010fffffffb, x30, x2, 1232, x1)

inst_94:
// rs1_w1_val == 4294705151, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff0000000b;  op2val:0x00008000000400
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfffbffff0000000b, 0x00008000000400, x30, x2, 1248, x1)

inst_95:
// rs1_w1_val == 4294836223, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00080000;  op2val:0xdfffffffffdfffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00080000, 0xdfffffffffdfffff, x30, x2, 1264, x1)

inst_96:
// rs1_w1_val == 4294950911, rs1_w0_val == 4294966271
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbffffffffbff;  op2val:0x4000000fbffffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xffffbffffffffbff, 0x4000000fbffffff, x30, x2, 1280, x1)

inst_97:
// rs1_w1_val == 4294966271, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffefffff;  op2val:0x000800dfffffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfffffbffffefffff, 0x000800dfffffff, x30, x2, 1296, x1)

inst_98:
// rs1_w1_val == 4294966783, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00010000;  op2val:0x000013ffff7fff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00010000, 0x000013ffff7fff, x30, x2, 1312, x1)

inst_99:
// rs1_w1_val == 2147483648, rs2_w0_val == 524288
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000020000;  op2val:0x00000200080000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x8000000000020000, 0x00000200080000, x30, x2, 1328, x1)

inst_100:
// rs1_w1_val == 1073741824, rs1_w0_val == 4294967279
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffffffef;  op2val:0x8000000fffeffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x40000000ffffffef, 0x8000000fffeffff, x30, x2, 1344, x1)

inst_101:
// rs1_w1_val == 536870912, rs1_w0_val == 4294967291
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffffffb;  op2val:0xfff7fffffffffffb
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x20000000fffffffb, 0xfff7fffffffffffb, x30, x2, 1360, x1)

inst_102:
// rs1_w1_val == 268435456, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000ffffefff;  op2val:0xffbfffff00000001
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x10000000ffffefff, 0xffbfffff00000001, x30, x2, 1376, x1)

inst_103:
// rs1_w1_val == 67108864, rs2_w0_val == 2147483648
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000200000;  op2val:0x00000280000000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x400000000200000, 0x00000280000000, x30, x2, 1392, x1)

inst_104:
// rs1_w1_val == 33554432, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000010000000;  op2val:0xfffffdff0000000e
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x200000010000000, 0xfffffdff0000000e, x30, x2, 1408, x1)

inst_105:
// rs1_w1_val == 4194304, rs2_w0_val == 4294966783
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000002000000;  op2val:0x00000afffffdff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x40000002000000, 0x00000afffffdff, x30, x2, 1424, x1)

inst_106:
// rs1_w1_val == 32768, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000010000;  op2val:0xfffffffe00000080
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00800000010000, 0xfffffffe00000080, x30, x2, 1440, x1)

inst_107:
// rs1_w1_val == 8192, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000020;  op2val:0x00000900000020
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00200000000020, 0x00000900000020, x30, x2, 1456, x1)

inst_108:
// rs1_w1_val == 4096, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100001000000;  op2val:0x000000dfffffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00100001000000, 0x000000dfffffff, x30, x2, 1472, x1)

inst_109:
// rs1_w1_val == 2048, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080008000000;  op2val:0x40000000fbffffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00080008000000, 0x40000000fbffffff, x30, x2, 1488, x1)

inst_110:
// rs1_w1_val == 1024, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000002;  op2val:0xffff7fff00010000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00040000000002, 0xffff7fff00010000, x30, x2, 1504, x1)

inst_111:
// rs1_w1_val == 8, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffffffb;  op2val:0x00000efffffff7
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x000008fffffffb, 0x00000efffffff7, x30, x2, 1520, x1)

inst_112:
// rs1_w1_val == 4294967295, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff00000020;  op2val:0x00020000000000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xffffffff00000020, 0x00020000000000, x30, x2, 1536, x1)

inst_113:
// rs1_w0_val == 1431655765, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd55555555;  op2val:0xfeffffffffffffef
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfffffffd55555555, 0xfeffffffffffffef, x30, x2, 1552, x1)

inst_114:
// rs1_w0_val == 3221225471, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000bfffffff;  op2val:0x00020000004000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x800000bfffffff, 0x00020000004000, x30, x2, 1568, x1)

inst_115:
// rs1_w0_val == 4026531839, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffefffffff;  op2val:0xffdfffff00080000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xffffefffefffffff, 0xffdfffff00080000, x30, x2, 1584, x1)

inst_116:
// rs1_w0_val == 4261412863, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdffffdffffff;  op2val:0xfffbffff0000000d
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xffffdffffdffffff, 0xfffbffff0000000d, x30, x2, 1600, x1)

inst_117:
// rs1_w0_val == 4286578687, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffff7fffff;  op2val:0xffbfffff00004000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfffffeffff7fffff, 0xffbfffff00004000, x30, x2, 1616, x1)

inst_118:
// rs2_w0_val == 4294965247, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000bf7ffffff;  op2val:0xfdfffffffffff7ff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00000bf7ffffff, 0xfdfffffffffff7ff, x30, x2, 1632, x1)

inst_119:
// rs1_w0_val == 4294443007, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000ffff7ffff;  op2val:0x00000d00000005
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00000ffff7ffff, 0x00000d00000005, x30, x2, 1648, x1)

inst_120:
// rs2_w0_val == 4294966271, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555ff7fffff;  op2val:0x800000fffffbff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x55555555ff7fffff, 0x800000fffffbff, x30, x2, 1664, x1)

inst_121:
// rs1_w0_val == 4294705151, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffffffbffff;  op2val:0xfffbffffffffff7f
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfbfffffffffbffff, 0xfffbffffffffff7f, x30, x2, 1680, x1)

inst_122:
// rs1_w0_val == 4294901759, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006fffeffff;  op2val:0xffffdfff00000012
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x000006fffeffff, 0xffffdfff00000012, x30, x2, 1696, x1)

inst_123:
// rs1_w0_val == 4294950911, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffffbfff;  op2val:0xfbffffff02000000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x000008ffffbfff, 0xfbffffff02000000, x30, x2, 1712, x1)

inst_124:
// rs1_w0_val == 4294959103, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffffdfff;  op2val:0x000002ffdfffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x001000ffffdfff, 0x000002ffdfffff, x30, x2, 1728, x1)

inst_125:
// rs1_w0_val == 4294966783, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffdff;  op2val:0xffffeffffffeffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x080000fffffdff, 0xffffeffffffeffff, x30, x2, 1744, x1)

inst_126:
// rs2_w0_val == 4294967294, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb55555555;  op2val:0x000003fffffffe
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfffffffb55555555, 0x000003fffffffe, x30, x2, 1760, x1)

inst_127:
// rs1_w0_val == 4294967231, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffffbf;  op2val:0xffffdffffeffffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffffbf, 0xffffdffffeffffff, x30, x2, 1776, x1)

inst_128:
// rs2_w0_val == 134217728, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff08000000;  op2val:0xfff7ffff08000000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x7fffffff08000000, 0xfff7ffff08000000, x30, x2, 1792, x1)

inst_129:
// rs1_w0_val == 4294967287, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000012fffffff7;  op2val:0x400000fff7ffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x000012fffffff7, 0x400000fff7ffff, x30, x2, 1808, x1)

inst_130:
// rs2_w0_val == 67108864, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff0000000d;  op2val:0x00000a04000000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfeffffff0000000d, 0x00000a04000000, x30, x2, 1824, x1)

inst_131:
// rs2_w0_val == 16777216, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000dfffffff;  op2val:0xefffffff01000000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x100000dfffffff, 0xefffffff01000000, x30, x2, 1840, x1)

inst_132:
// rs1_w0_val == 4294967294, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000fffffffe;  op2val:0xffefffff00000006
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x200000fffffffe, 0xffefffff00000006, x30, x2, 1856, x1)

inst_133:
// rs2_w0_val == 8388608, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000005;  op2val:0x00010000800000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x800000000000005, 0x00010000800000, x30, x2, 1872, x1)

inst_134:
// rs1_w0_val == 1073741824, rs2_w0_val == 262144
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x00008040000000;  op2val:0x00200000040000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x00008040000000, 0x00200000040000, x30, x2, 1888, x1)

inst_135:
// rs2_w0_val == 131072, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000011ffff7fff;  op2val:0xffbfffff00020000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x000011ffff7fff, 0xffbfffff00020000, x30, x2, 1904, x1)

inst_136:
// rs1_w0_val == 536870912, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff20000000;  op2val:0x00000100000001
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x7fffffff20000000, 0x00000100000001, x30, x2, 1920, x1)

inst_137:
// rs2_w0_val == 1048576, 
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000aaaaaaaa;  op2val:0xffffffff00100000
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x008000aaaaaaaa, 0xffffffff00100000, x30, x2, 1936, x1)

inst_138:
// rs2_w1_val == 2863311530, rs2_w0_val == 4294967291, rs1_w1_val == 1431655765
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x555555550000000c;  op2val:0xaaaaaaaafffffffb
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x555555550000000c, 0xaaaaaaaafffffffb, x30, x2, 1952, x1)

inst_139:
// rs2_w1_val == 4286578687, rs2_w0_val == 4294967293, rs1_w1_val == 4294967039, rs1_w0_val == 268435456
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff10000000;  op2val:0xff7ffffffffffffd
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0xfffffeff10000000, 0xff7ffffffffffffd, x30, x2, 1968, x1)

inst_140:
// rs2_w1_val == 4294965247, rs1_w0_val == 4294967263
// opcode: uksub32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002ffffffdf;  op2val:0xfffff7fffff7ffff
TEST_PKRR_OP(uksub32, x31, x30, x29, 0x0000000000000000, 0x000002ffffffdf, 0xfffff7fffff7ffff, x30, x2, 1984, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 250*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
