
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the umax32 instruction of the RISC-V RV64PZicsr extension for the umax32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",umax32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x9,signature_x9_1)

inst_0:
// rs1 == rd != rs2, rs1==x11, rs2==x21, rd==x11, rs1_w0_val == 0, rs1_w1_val != rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w0_val == 4294950911, rs1_w1_val == 32768
// opcode: umax32 ; op1:x11; op2:x21; dest:x11; op1val:0x00800000000000;  op2val:0x00000affffbfff
TEST_RR_OP(umax32, x11, x11, x21, 0x0000000000000000, 0x00800000000000, 0x00000affffbfff, x9, 0, x13)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x27, rs2==x19, rd==x22, rs1_w1_val == rs2_w1_val and rs1_w1_val > 0 and rs2_w1_val > 0, rs2_w1_val == 64, rs1_w0_val == 128, rs1_w0_val != rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 64
// opcode: umax32 ; op1:x27; op2:x19; dest:x22; op1val:0x00004000000080;  op2val:0x0000400000000d
TEST_RR_OP(umax32, x22, x27, x19, 0x0000000000000000, 0x00004000000080, 0x0000400000000d, x9, 8, x13)

inst_2:
// rs1 == rs2 != rd, rs1==x15, rs2==x15, rd==x8, rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 4294934527, rs2_w1_val == 512, rs1_w1_val == 8, rs1_w0_val == 4294934527
// opcode: umax32 ; op1:x15; op2:x15; dest:x8; op1val:0x000008ffff7fff;  op2val:0x000200ffff7fff
TEST_RR_OP(umax32, x8, x15, x15, 0x0000000000000000, 0x000008ffff7fff, 0x000200ffff7fff, x9, 16, x13)

inst_3:
// rs1 == rs2 == rd, rs1==x20, rs2==x20, rd==x20, rs2_w1_val == 2863311530, rs2_w0_val == 2, rs1_w1_val == 8192
// opcode: umax32 ; op1:x20; op2:x20; dest:x20; op1val:0x00200000000006;  op2val:0xaaaaaaaa00000002
TEST_RR_OP(umax32, x20, x20, x20, 0x0000000000000000, 0x00200000000006, 0xaaaaaaaa00000002, x9, 24, x13)

inst_4:
// rs2 == rd != rs1, rs1==x2, rs2==x3, rd==x3, rs2_w1_val == 1431655765, rs1_w1_val == 4294959103, rs1_w0_val == 4293918719
// opcode: umax32 ; op1:x2; op2:x3; dest:x3; op1val:0xffffdfffffefffff;  op2val:0x5555555500000003
TEST_RR_OP(umax32, x3, x2, x3, 0x0000000000000000, 0xffffdfffffefffff, 0x5555555500000003, x9, 32, x13)

inst_5:
// rs1==x16, rs2==x24, rd==x12, rs2_w1_val == 2147483647, rs2_w0_val == 3221225471, rs1_w0_val == 1073741824, rs1_w1_val == 2147483647
// opcode: umax32 ; op1:x16; op2:x24; dest:x12; op1val:0x7fffffff40000000;  op2val:0x7fffffffbfffffff
TEST_RR_OP(umax32, x12, x16, x24, 0x0000000000000000, 0x7fffffff40000000, 0x7fffffffbfffffff, x9, 40, x13)

inst_6:
// rs1==x10, rs2==x4, rd==x18, rs2_w1_val == 3221225471, rs1_w1_val == 2, rs1_w0_val == 134217728
// opcode: umax32 ; op1:x10; op2:x4; dest:x18; op1val:0x00000208000000;  op2val:0xbfffffff0000000d
TEST_RR_OP(umax32, x18, x10, x4, 0x0000000000000000, 0x00000208000000, 0xbfffffff0000000d, x9, 48, x13)

inst_7:
// rs1==x25, rs2==x8, rd==x15, rs2_w1_val == 3758096383, rs2_w0_val == 1024, rs1_w0_val == 3758096383
// opcode: umax32 ; op1:x25; op2:x8; dest:x15; op1val:0x000040dfffffff;  op2val:0xdfffffff00000400
TEST_RR_OP(umax32, x15, x25, x8, 0x0000000000000000, 0x000040dfffffff, 0xdfffffff00000400, x9, 56, x13)

inst_8:
// rs1==x8, rs2==x7, rd==x19, rs2_w1_val == 4026531839, rs1_w0_val == 2147483648, rs1_w1_val == 4294967167
// opcode: umax32 ; op1:x8; op2:x7; dest:x19; op1val:0xffffff7f80000000;  op2val:0xefffffffffff7fff
TEST_RR_OP(umax32, x19, x8, x7, 0x0000000000000000, 0xffffff7f80000000, 0xefffffffffff7fff, x9, 64, x13)

inst_9:
// rs1==x26, rs2==x6, rd==x5, rs2_w1_val == 4160749567, rs1_w0_val == 4, rs2_w0_val == 1431655765, rs1_w1_val == 128
// opcode: umax32 ; op1:x26; op2:x6; dest:x5; op1val:0x00008000000004;  op2val:0xf7ffffff55555555
TEST_RR_OP(umax32, x5, x26, x6, 0x0000000000000000, 0x00008000000004, 0xf7ffffff55555555, x9, 72, x13)

inst_10:
// rs1==x18, rs2==x16, rd==x27, rs2_w1_val == 4227858431, rs1_w0_val == 1
// opcode: umax32 ; op1:x18; op2:x16; dest:x27; op1val:0x00000b00000001;  op2val:0xfbffffff00000003
TEST_RR_OP(umax32, x27, x18, x16, 0x0000000000000000, 0x00000b00000001, 0xfbffffff00000003, x9, 80, x13)

inst_11:
// rs1==x31, rs2==x30, rd==x21, rs2_w1_val == 4261412863, rs2_w0_val == 2863311530, rs1_w0_val == 4294967231, rs1_w1_val == 1431655765
// opcode: umax32 ; op1:x31; op2:x30; dest:x21; op1val:0x55555555ffffffbf;  op2val:0xfdffffffaaaaaaaa
TEST_RR_OP(umax32, x21, x31, x30, 0x0000000000000000, 0x55555555ffffffbf, 0xfdffffffaaaaaaaa, x9, 88, x13)

inst_12:
// rs1==x5, rs2==x29, rd==x10, rs2_w1_val == 4278190079, rs1_w0_val == 4294966271, rs1_w1_val == 3758096383, rs2_w0_val == 1073741824
// opcode: umax32 ; op1:x5; op2:x29; dest:x10; op1val:0xdffffffffffffbff;  op2val:0xfeffffff40000000
TEST_RR_OP(umax32, x10, x5, x29, 0x0000000000000000, 0xdffffffffffffbff, 0xfeffffff40000000, x9, 96, x13)

inst_13:
// rs1==x1, rs2==x0, rd==x28, rs2_w1_val == 4286578687, rs2_w0_val == 4286578687, rs1_w0_val == 16, rs1_w1_val == 4294934527
// opcode: umax32 ; op1:x1; op2:x0; dest:x28; op1val:0xffff7fff00000010;  op2val:0xff7fffffff7fffff
TEST_RR_OP(umax32, x28, x1, x0, 0x0000000000000000, 0xffff7fff00000010, 0xff7fffffff7fffff, x9, 104, x13)

inst_14:
// rs1==x30, rs2==x26, rd==x7, rs2_w1_val == 4290772991, rs1_w1_val == 4293918719, rs2_w0_val == 4294967167
// opcode: umax32 ; op1:x30; op2:x26; dest:x7; op1val:0xffefffff00000012;  op2val:0xffbfffffffffff7f
TEST_RR_OP(umax32, x7, x30, x26, 0x0000000000000000, 0xffefffff00000012, 0xffbfffffffffff7f, x9, 112, x6)

inst_15:
// rs1==x28, rs2==x23, rd==x1, rs2_w1_val == 4292870143, rs1_w0_val == 4286578687, rs2_w0_val == 4294967287
// opcode: umax32 ; op1:x28; op2:x23; dest:x1; op1val:0x000008ff7fffff;  op2val:0xffdffffffffffff7
TEST_RR_OP(umax32, x1, x28, x23, 0x0000000000000000, 0x000008ff7fffff, 0xffdffffffffffff7, x9, 120, x6)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_16:
// rs1==x0, rs2==x31, rd==x17, rs2_w1_val == 4293918719, rs1_w0_val == 2147483647, rs2_w0_val == 4294967263
// opcode: umax32 ; op1:x0; op2:x31; dest:x17; op1val:0x00000b7fffffff;  op2val:0xffefffffffffffdf
TEST_RR_OP(umax32, x17, x0, x31, 0x0000000000000000, 0x00000b7fffffff, 0xffefffffffffffdf, x8, 0, x6)

inst_17:
// rs1==x13, rs2==x10, rd==x14, rs2_w1_val == 4294443007, rs2_w0_val == 131072
// opcode: umax32 ; op1:x13; op2:x10; dest:x14; op1val:0xffffdfffffffffbf;  op2val:0xfff7ffff00020000
TEST_RR_OP(umax32, x14, x13, x10, 0x0000000000000000, 0xffffdfffffffffbf, 0xfff7ffff00020000, x8, 8, x6)

inst_18:
// rs1==x3, rs2==x11, rd==x9, rs2_w1_val == 4294705151, rs1_w0_val == 65536, rs1_w1_val == 4294705151
// opcode: umax32 ; op1:x3; op2:x11; dest:x9; op1val:0xfffbffff00010000;  op2val:0xfffbffff00000011
TEST_RR_OP(umax32, x9, x3, x11, 0x0000000000000000, 0xfffbffff00010000, 0xfffbffff00000011, x8, 16, x6)

inst_19:
// rs1==x29, rs2==x14, rd==x0, rs2_w1_val == 4294836223, rs1_w1_val == 524288, rs1_w0_val == 64, rs2_w0_val == 4294965247
// opcode: umax32 ; op1:x29; op2:x14; dest:x0; op1val:0x08000000000040;  op2val:0xfffdfffffffff7ff
TEST_RR_OP(umax32, x0, x29, x14, 0x0000000000000000, 0x08000000000040, 0xfffdfffffffff7ff, x8, 24, x6)

inst_20:
// rs1==x14, rs2==x22, rd==x23, rs2_w1_val == 4294901759, rs1_w1_val == 4026531839, rs2_w0_val == 0
// opcode: umax32 ; op1:x14; op2:x22; dest:x23; op1val:0xeffffffffffffbff;  op2val:0xfffeffff00000000
TEST_RR_OP(umax32, x23, x14, x22, 0x0000000000000000, 0xeffffffffffffbff, 0xfffeffff00000000, x8, 32, x6)

inst_21:
// rs1==x12, rs2==x9, rd==x31, rs2_w1_val == 4294934527, rs1_w1_val == 4294950911, rs1_w0_val == 2863311530
// opcode: umax32 ; op1:x12; op2:x9; dest:x31; op1val:0xffffbfffaaaaaaaa;  op2val:0xffff7fff00000013
TEST_RR_OP(umax32, x31, x12, x9, 0x0000000000000000, 0xffffbfffaaaaaaaa, 0xffff7fff00000013, x8, 40, x6)

inst_22:
// rs1==x7, rs2==x27, rd==x2, rs2_w1_val == 4294950911, rs1_w0_val == 4294967039, rs1_w1_val == 4227858431
// opcode: umax32 ; op1:x7; op2:x27; dest:x2; op1val:0xfbfffffffffffeff;  op2val:0xffffbfff0000000e
TEST_RR_OP(umax32, x2, x7, x27, 0x0000000000000000, 0xfbfffffffffffeff, 0xffffbfff0000000e, x8, 48, x6)

inst_23:
// rs1==x4, rs2==x13, rd==x24, rs2_w1_val == 4294959103, rs1_w1_val == 4194304, rs1_w0_val == 262144, rs2_w0_val == 536870912
// opcode: umax32 ; op1:x4; op2:x13; dest:x24; op1val:0x40000000040000;  op2val:0xffffdfff20000000
TEST_RR_OP(umax32, x24, x4, x13, 0x0000000000000000, 0x40000000040000, 0xffffdfff20000000, x8, 56, x6)

inst_24:
// rs1==x19, rs2==x12, rd==x25, rs2_w1_val == 4294963199, rs1_w1_val == 1024, rs1_w0_val == 4294967263
// opcode: umax32 ; op1:x19; op2:x12; dest:x25; op1val:0x000400ffffffdf;  op2val:0xffffefff0000000c
TEST_RR_OP(umax32, x25, x19, x12, 0x0000000000000000, 0x000400ffffffdf, 0xffffefff0000000c, x8, 64, x6)

inst_25:
// rs1==x17, rs2==x1, rd==x4, rs2_w1_val == 4294965247, rs1_w1_val == 4, rs2_w0_val == 16
// opcode: umax32 ; op1:x17; op2:x1; dest:x4; op1val:0x000004ff7fffff;  op2val:0xfffff7ff00000010
TEST_RR_OP(umax32, x4, x17, x1, 0x0000000000000000, 0x000004ff7fffff, 0xfffff7ff00000010, x8, 72, x6)

inst_26:
// rs1==x24, rs2==x5, rd==x13, rs2_w1_val == 4294966271, rs1_w1_val == 4294967263, rs2_w0_val == 2048
// opcode: umax32 ; op1:x24; op2:x5; dest:x13; op1val:0xffffffdf00000012;  op2val:0xfffffbff00000800
TEST_RR_OP(umax32, x13, x24, x5, 0x0000000000000000, 0xffffffdf00000012, 0xfffffbff00000800, x8, 80, x6)

inst_27:
// rs1==x22, rs2==x25, rd==x30, rs2_w1_val == 4294966783, rs1_w0_val == 131072, rs1_w1_val == 4294966271
// opcode: umax32 ; op1:x22; op2:x25; dest:x30; op1val:0xfffffbff00020000;  op2val:0xfffffdff00000002
TEST_RR_OP(umax32, x30, x22, x25, 0x0000000000000000, 0xfffffbff00020000, 0xfffffdff00000002, x8, 88, x6)

inst_28:
// rs1==x21, rs2==x18, rd==x26, rs2_w1_val == 4294967039, rs2_w0_val == 4294967039
// opcode: umax32 ; op1:x21; op2:x18; dest:x26; op1val:0x00040000000007;  op2val:0xfffffefffffffeff
TEST_RR_OP(umax32, x26, x21, x18, 0x0000000000000000, 0x00040000000007, 0xfffffefffffffeff, x8, 96, x6)

inst_29:
// rs1==x6, rs2==x28, rd==x29, rs2_w1_val == 4294967167, rs2_w0_val == 4194304
// opcode: umax32 ; op1:x6; op2:x28; dest:x29; op1val:0xfffbffff00000004;  op2val:0xffffff7f00400000
TEST_RR_OP(umax32, x29, x6, x28, 0x0000000000000000, 0xfffbffff00000004, 0xffffff7f00400000, x8, 104, x3)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x9, rs2==x17, rd==x6, rs2_w1_val == 4294967231, rs1_w1_val == 536870912, rs2_w0_val == 8
// opcode: umax32 ; op1:x9; op2:x17; dest:x6; op1val:0x2000000000000006;  op2val:0xffffffbf00000008
TEST_RR_OP(umax32, x6, x9, x17, 0x0000000000000000, 0x2000000000000006, 0xffffffbf00000008, x1, 0, x3)

inst_31:
// rs1==x23, rs2==x2, rd==x16, rs2_w1_val == 4294967263, rs1_w1_val == 32, rs2_w0_val == 1048576
// opcode: umax32 ; op1:x23; op2:x2; dest:x16; op1val:0x00002000000000;  op2val:0xffffffdf00100000
TEST_RR_OP(umax32, x16, x23, x2, 0x0000000000000000, 0x00002000000000, 0xffffffdf00100000, x1, 8, x3)

inst_32:
// rs2_w1_val == 4294967279, rs2_w0_val == 4294967294
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x0000110000000a;  op2val:0xffffffeffffffffe
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x0000110000000a, 0xffffffeffffffffe, x1, 16, x3)

inst_33:
// rs2_w1_val == 4294967287, rs2_w0_val == 4293918719, rs1_w0_val == 8
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000500000008;  op2val:0xfffffff7ffefffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00000500000008, 0xfffffff7ffefffff, x1, 24, x3)

inst_34:
// rs2_w1_val == 4294967291, rs1_w0_val == 4294901759, rs2_w0_val == 4294959103, rs1_w1_val == 4278190079
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffffffeffff;  op2val:0xfffffffbffffdfff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfefffffffffeffff, 0xfffffffbffffdfff, x1, 32, x3)

inst_35:
// rs2_w1_val == 4294967293, rs2_w0_val == 4294836223, rs1_w1_val == 268435456, rs1_w0_val == 4026531839
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000efffffff;  op2val:0xfffffffdfffdffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x10000000efffffff, 0xfffffffdfffdffff, x1, 40, x3)

inst_36:
// rs2_w1_val == 4294967294, rs2_w0_val == 4096, rs1_w0_val == 524288
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000080000;  op2val:0xfffffffe00001000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x08000000080000, 0xfffffffe00001000, x1, 48, x3)

inst_37:
// rs2_w1_val == 2147483648, rs2_w0_val == 8388608
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200040000;  op2val:0x8000000000800000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00000200040000, 0x8000000000800000, x1, 56, x3)

inst_38:
// rs2_w1_val == 1073741824, rs1_w0_val == 4294967291, rs1_w1_val == 4286578687
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffffffffb;  op2val:0x4000000055555555
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffffffb, 0x4000000055555555, x1, 64, x3)

inst_39:
// rs2_w1_val == 536870912, rs1_w0_val == 4294966783, rs1_w1_val == 16777216
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffdff;  op2val:0x200000000000000f
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x1000000fffffdff, 0x200000000000000f, x1, 72, x3)

inst_40:
// rs2_w1_val == 268435456, rs2_w0_val == 256, rs1_w1_val == 4294967293
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd80000000;  op2val:0x1000000000000100
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfffffffd80000000, 0x1000000000000100, x1, 80, x3)

inst_41:
// rs2_w1_val == 134217728, rs2_w0_val == 8192
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000400000080;  op2val:0x800000000002000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00000400000080, 0x800000000002000, x1, 88, x3)

inst_42:
// rs2_w1_val == 67108864, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000000009;  op2val:0x4000000fffffeff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00004000000009, 0x4000000fffffeff, x1, 96, x3)

inst_43:
// rs2_w1_val == 33554432, rs1_w0_val == 4294965247
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfffffffff7ff;  op2val:0x200000055555555
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfffbfffffffff7ff, 0x200000055555555, x1, 104, x3)

inst_44:
// rs2_w1_val == 16777216, rs2_w0_val == 128
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000009;  op2val:0x100000000000080
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffefffff00000009, 0x100000000000080, x1, 112, x3)

inst_45:
// rs2_w1_val == 8388608, rs2_w0_val == 4294705151, rs1_w1_val == 4292870143, rs1_w0_val == 8388608
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00800000;  op2val:0x800000fffbffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffdfffff00800000, 0x800000fffbffff, x1, 120, x3)

inst_46:
// rs2_w1_val == 4194304, rs2_w0_val == 32, rs1_w1_val == 33554432
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000dfffffff;  op2val:0x40000000000020
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x2000000dfffffff, 0x40000000000020, x1, 128, x3)

inst_47:
// rs2_w1_val == 2097152, rs1_w0_val == 4294967279
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffffffef;  op2val:0x20000000000009
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffff7fffffffffef, 0x20000000000009, x1, 136, x3)

inst_48:
// rs2_w1_val == 1048576, rs1_w0_val == 33554432, rs2_w0_val == 4294967231
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff02000000;  op2val:0x100000ffffffbf
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xdfffffff02000000, 0x100000ffffffbf, x1, 144, x3)

inst_49:
// rs2_w1_val == 524288, rs1_w0_val == 4294967167, rs1_w1_val == 4294967295
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffff7f;  op2val:0x08000000400000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffffffffffffff7f, 0x08000000400000, x1, 152, x3)

inst_50:
// rs1_w0_val == 32768, rs1_w1_val == 4294965247, rs2_w1_val == 1
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00008000;  op2val:0x00000100000005
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00008000, 0x00000100000005, x1, 160, x3)

inst_51:
// rs1_w0_val == 16384, rs2_w0_val == 4294967291, rs1_w1_val == 131072
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x02000000004000;  op2val:0x000007fffffffb
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x02000000004000, 0x000007fffffffb, x1, 168, x3)

inst_52:
// rs1_w0_val == 8192, rs1_w1_val == 4294967231
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00002000;  op2val:0x00000300000008
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00002000, 0x00000300000008, x1, 176, x3)

inst_53:
// rs1_w0_val == 4096, rs1_w1_val == 134217728
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000001000;  op2val:0x80000000000009
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x800000000001000, 0x80000000000009, x1, 184, x3)

inst_54:
// rs1_w0_val == 2048, rs2_w1_val == 8
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000800;  op2val:0x00000800000005
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000800, 0x00000800000005, x1, 192, x3)

inst_55:
// rs1_w0_val == 1024, rs1_w1_val == 4294967291, rs2_w0_val == 4294963199
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000400;  op2val:0x80000000ffffefff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000400, 0x80000000ffffefff, x1, 200, x3)

inst_56:
// rs1_w0_val == 512, rs2_w0_val == 512, rs1_w1_val == 1
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000100000200;  op2val:0xffffffef00000200
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00000100000200, 0xffffffef00000200, x1, 208, x3)

inst_57:
// rs1_w0_val == 256, rs1_w1_val == 4294967279
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef00000100;  op2val:0xdfffffff00400000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffffffef00000100, 0xdfffffff00400000, x1, 216, x3)

inst_58:
// rs1_w0_val == 32, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000020;  op2val:0x00000800000100
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000020, 0x00000800000100, x1, 224, x3)

inst_59:
// rs1_w0_val == 2, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000002;  op2val:0xfffeffffffffffbf
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00800000000002, 0xfffeffffffffffbf, x1, 232, x3)

inst_60:
// rs1_w0_val == 4294967295, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffffffff;  op2val:0x400000fffff7ff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffffbfffffffffff, 0x400000fffff7ff, x1, 240, x3)

inst_61:
// rs2_w1_val == 262144, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x000012ffffffbf;  op2val:0x04000000100000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x000012ffffffbf, 0x04000000100000, x1, 248, x3)

inst_62:
// rs2_w1_val == 131072, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000001000;  op2val:0x0200000000000c
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x100000000001000, 0x0200000000000c, x1, 256, x3)

inst_63:
// rs2_w1_val == 65536, rs1_w0_val == 4294836223
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbffffdffff;  op2val:0x01000000800000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffffffbffffdffff, 0x01000000800000, x1, 264, x3)

inst_64:
// rs2_w1_val == 32768, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf08000000;  op2val:0x00800000000011
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffffffdf08000000, 0x00800000000011, x1, 272, x3)

inst_65:
// rs2_w1_val == 16384, rs2_w0_val == 4261412863
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000020;  op2val:0x004000fdffffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00000900000020, 0x004000fdffffff, x1, 280, x3)

inst_66:
// rs2_w1_val == 8192, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f00000000;  op2val:0x002000aaaaaaaa
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffffff7f00000000, 0x002000aaaaaaaa, x1, 288, x3)

inst_67:
// rs2_w1_val == 4096, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00002000;  op2val:0x00100000000400
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00002000, 0x00100000000400, x1, 296, x3)

inst_68:
// rs2_w1_val == 2048, rs2_w0_val == 65536
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffeffff;  op2val:0x00080000010000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffeffffffffeffff, 0x00080000010000, x1, 304, x3)

inst_69:
// rs2_w1_val == 1024, rs1_w1_val == 512
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000800000;  op2val:0x00040000000100
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00020000800000, 0x00040000000100, x1, 312, x3)

inst_70:
// rs2_w1_val == 256, rs1_w1_val == 1073741824
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffeffff;  op2val:0x0001000000000f
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x40000000fffeffff, 0x0001000000000f, x1, 320, x3)

inst_71:
// rs2_w1_val == 128, rs2_w0_val == 2147483647
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000002000000;  op2val:0x0000807fffffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x100000002000000, 0x0000807fffffff, x1, 328, x3)

inst_72:
// rs2_w1_val == 32, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff0000000c;  op2val:0x000020fffff7ff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffff7fff0000000c, 0x000020fffff7ff, x1, 336, x3)

inst_73:
// rs2_w1_val == 16, rs2_w0_val == 4294967293, rs1_w1_val == 4294443007
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff00000040;  op2val:0x000010fffffffd
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfff7ffff00000040, 0x000010fffffffd, x1, 344, x3)

inst_74:
// rs2_w1_val == 4, rs1_w1_val == 256
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x0001000000000b;  op2val:0x000004fdffffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x0001000000000b, 0x000004fdffffff, x1, 352, x3)

inst_75:
// rs2_w1_val == 2, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffffeff;  op2val:0x000002ff7fffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x2000000fffffeff, 0x000002ff7fffff, x1, 360, x3)

inst_76:
// rs2_w1_val == 4294967295, rs1_w1_val == 4294963199
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffff7fffff;  op2val:0xfffffffffffff7ff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffffefffff7fffff, 0xfffffffffffff7ff, x1, 368, x3)

inst_77:
// rs2_w1_val == 0, rs1_w0_val == 4294967287
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffff7;  op2val:0x000000ffffefff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffff7, 0x000000ffffefff, x1, 376, x3)

inst_78:
// rs2_w0_val == 3758096383, rs1_w0_val == 4294967294
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x55555555fffffffe;  op2val:0xffffffffdfffffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x55555555fffffffe, 0xffffffffdfffffff, x1, 384, x3)

inst_79:
// rs2_w0_val == 4026531839, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ffffff7f;  op2val:0xfffdffffefffffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x20000000ffffff7f, 0xfffdffffefffffff, x1, 392, x3)

inst_80:
// rs2_w0_val == 4160749567, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000cffffffef;  op2val:0x00000ff7ffffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00000cffffffef, 0x00000ff7ffffff, x1, 400, x3)

inst_81:
// rs2_w0_val == 4227858431, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000cfffffff7;  op2val:0xfffffffffbffffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00000cfffffff7, 0xfffffffffbffffff, x1, 408, x3)

inst_82:
// rs2_w0_val == 4278190079, rs1_w1_val == 8388608
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fffffeff;  op2val:0x10000000feffffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x800000fffffeff, 0x10000000feffffff, x1, 416, x3)

inst_83:
// rs2_w0_val == 4290772991, rs1_w1_val == 0, rs1_w0_val == 268435456
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000010000000;  op2val:0x000200ffbfffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00000010000000, 0x000200ffbfffff, x1, 424, x3)

inst_84:
// rs2_w0_val == 4292870143, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000040;  op2val:0x2000000ffdfffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000040, 0x2000000ffdfffff, x1, 432, x3)

inst_85:
// rs2_w0_val == 64, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffff7fffff;  op2val:0xffffbfff00000040
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffffffffff7fffff, 0xffffbfff00000040, x1, 440, x3)

inst_86:
// rs2_w0_val == 4, rs1_w0_val == 4290772991
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffbfffff;  op2val:0x00040000000004
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffffffdfffbfffff, 0x00040000000004, x1, 448, x3)

inst_87:
// rs2_w0_val == 1, rs1_w0_val == 1048576
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000100000;  op2val:0xff7fffff00000001
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00004000100000, 0xff7fffff00000001, x1, 456, x3)

inst_88:
// rs2_w0_val == 4294967295, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00800000000004;  op2val:0xffefffffffffffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00800000000004, 0xffefffffffffffff, x1, 464, x3)

inst_89:
// rs1_w1_val == 2863311530, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x20000000000000a
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0x20000000000000a, x1, 472, x3)

inst_90:
// rs1_w1_val == 3221225471, rs1_w0_val == 4194304
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00400000;  op2val:0x40000000000020
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00400000, 0x40000000000020, x1, 480, x3)

inst_91:
// rs1_w1_val == 4160749567, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000007;  op2val:0x20000000000005
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000007, 0x20000000000005, x1, 488, x3)

inst_92:
// rs1_w1_val == 4261412863, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00000080;  op2val:0x00000500000010
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00000080, 0x00000500000010, x1, 496, x3)

inst_93:
// rs1_w1_val == 4290772991, rs2_w0_val == 4294966271
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffdffff;  op2val:0x2000000fffffbff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffbffffffffdffff, 0x2000000fffffbff, x1, 504, x3)

inst_94:
// rs1_w1_val == 4294836223, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffff7f;  op2val:0x00000bfffffffd
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffff7f, 0x00000bfffffffd, x1, 512, x3)

inst_95:
// rs1_w1_val == 4294901759, rs1_w0_val == 4261412863
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffdffffff;  op2val:0x000012fffffff7
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfffefffffdffffff, 0x000012fffffff7, x1, 520, x3)

inst_96:
// rs1_w1_val == 4294966783, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000003;  op2val:0xffffffefffffffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000003, 0xffffffefffffffff, x1, 528, x3)

inst_97:
// rs1_w1_val == 4294967039, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00010000;  op2val:0x80000000feffffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00010000, 0x80000000feffffff, x1, 536, x3)

inst_98:
// rs1_w1_val == 4294967287, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700040000;  op2val:0xfffffbfffeffffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfffffff700040000, 0xfffffbfffeffffff, x1, 544, x3)

inst_99:
// rs1_w1_val == 4294967294, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000004;  op2val:0x1000000fffffeff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000004, 0x1000000fffffeff, x1, 552, x3)

inst_100:
// rs1_w1_val == 2147483648, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000000c;  op2val:0xfbffffff00000400
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x800000000000000c, 0xfbffffff00000400, x1, 560, x3)

inst_101:
// rs1_w1_val == 67108864, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000005;  op2val:0x800000000000400
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x400000000000005, 0x800000000000400, x1, 568, x3)

inst_102:
// rs1_w1_val == 2097152, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000aaaaaaaa;  op2val:0xfffffeff00000400
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x200000aaaaaaaa, 0xfffffeff00000400, x1, 576, x3)

inst_103:
// rs1_w1_val == 1048576, rs2_w0_val == 32768
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffefffff;  op2val:0xffefffff00008000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x100000ffefffff, 0xffefffff00008000, x1, 584, x3)

inst_104:
// rs1_w1_val == 262144, rs1_w0_val == 4294705151
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000fffbffff;  op2val:0x00000c00000200
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x040000fffbffff, 0x00000c00000200, x1, 592, x3)

inst_105:
// rs1_w1_val == 65536, rs2_w0_val == 262144
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffffeff;  op2val:0x00002000040000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x010000fffffeff, 0x00002000040000, x1, 600, x3)

inst_106:
// rs1_w1_val == 16384, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000ffffff7f;  op2val:0x00000800000200
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x004000ffffff7f, 0x00000800000200, x1, 608, x3)

inst_107:
// rs1_w1_val == 4096, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x0010007fffffff;  op2val:0x20000000000007
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x0010007fffffff, 0x20000000000007, x1, 616, x3)

inst_108:
// rs1_w1_val == 2048, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x0008000000000d;  op2val:0xfff7ffff00000009
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x0008000000000d, 0xfff7ffff00000009, x1, 624, x3)

inst_109:
// rs1_w1_val == 16, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000040000;  op2val:0xfffffffdfdffffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00001000040000, 0xfffffffdfdffffff, x1, 632, x3)

inst_110:
// rs1_w0_val == 1431655765, rs2_w0_val == 268435456
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000c55555555;  op2val:0x00000910000000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00000c55555555, 0x00000910000000, x1, 640, x3)

inst_111:
// rs1_w0_val == 3221225471, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000bfffffff;  op2val:0xffffdfff00040000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x040000bfffffff, 0xffffdfff00040000, x1, 648, x3)

inst_112:
// rs2_w0_val == 4294443007, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000110000000;  op2val:0xfffffffffff7ffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00000110000000, 0xfffffffffff7ffff, x1, 656, x3)

inst_113:
// rs1_w0_val == 4160749567, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006f7ffffff;  op2val:0x0800000000000a
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x000006f7ffffff, 0x0800000000000a, x1, 664, x3)

inst_114:
// rs1_w0_val == 4227858431, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffbffffff;  op2val:0xffdffffffffffffe
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffffeffffbffffff, 0xffdffffffffffffe, x1, 672, x3)

inst_115:
// rs2_w0_val == 4294901759, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000ffffff7f;  op2val:0xffff7ffffffeffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x1000000ffffff7f, 0xffff7ffffffeffff, x1, 680, x3)

inst_116:
// rs1_w0_val == 4278190079, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbfeffffff;  op2val:0x00000c00000200
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfffffffbfeffffff, 0x00000c00000200, x1, 688, x3)

inst_117:
// rs1_w0_val == 4292870143, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffdfffff;  op2val:0x001000bfffffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfffffffdffdfffff, 0x001000bfffffff, x1, 696, x3)

inst_118:
// rs1_w0_val == 4294443007, rs2_w0_val == 67108864
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffff7ffff;  op2val:0x00000804000000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfdfffffffff7ffff, 0x00000804000000, x1, 704, x3)

inst_119:
// rs2_w0_val == 4294966783, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000ff7fffff;  op2val:0xfffffff7fffffdff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x2000000ff7fffff, 0xfffffff7fffffdff, x1, 712, x3)

inst_120:
// rs1_w0_val == 4294950911, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffbfff;  op2val:0x00010000010000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffbfff, 0x00010000010000, x1, 720, x3)

inst_121:
// rs1_w0_val == 4294959103, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffffdfff;  op2val:0x008000fdffffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfffffbffffffdfff, 0x008000fdffffff, x1, 728, x3)

inst_122:
// rs2_w0_val == 4294967279, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffbfffff;  op2val:0xfffffdffffffffef
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x100000ffbfffff, 0xfffffdffffffffef, x1, 736, x3)

inst_123:
// rs1_w0_val == 4294963199, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffefff;  op2val:0xffffffdf00010000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffefff, 0xffffffdf00010000, x1, 744, x3)

inst_124:
// rs2_w0_val == 2147483648, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffffff;  op2val:0xffdfffff80000000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffffff, 0xffdfffff80000000, x1, 752, x3)

inst_125:
// rs2_w0_val == 134217728, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffbffff;  op2val:0xbfffffff08000000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x004000fffbffff, 0xbfffffff08000000, x1, 760, x3)

inst_126:
// rs2_w0_val == 33554432, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef10000000;  op2val:0x00000602000000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffffffef10000000, 0x00000602000000, x1, 768, x3)

inst_127:
// rs1_w0_val == 4294967293, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffffffffffffd;  op2val:0x020000fffbffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xdffffffffffffffd, 0x020000fffbffff, x1, 776, x3)

inst_128:
// rs2_w0_val == 16777216, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00100000000008;  op2val:0xefffffff01000000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00100000000008, 0xefffffff01000000, x1, 784, x3)

inst_129:
// rs2_w0_val == 2097152, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffffff7;  op2val:0xf7ffffff00200000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x2000000fffffff7, 0xf7ffffff00200000, x1, 792, x3)

inst_130:
// rs1_w0_val == 536870912, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000020000000;  op2val:0x00000000000006
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x10000020000000, 0x00000000000006, x1, 800, x3)

inst_131:
// rs2_w0_val == 524288, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa80000000;  op2val:0x4000000000080000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa80000000, 0x4000000000080000, x1, 808, x3)

inst_132:
// rs1_w0_val == 67108864, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000004000000;  op2val:0x000011ffffefff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x4000000004000000, 0x000011ffffefff, x1, 816, x3)

inst_133:
// rs1_w0_val == 16777216, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080001000000;  op2val:0xaaaaaaaa00020000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00080001000000, 0xaaaaaaaa00020000, x1, 824, x3)

inst_134:
// rs2_w0_val == 16384, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff701000000;  op2val:0xff7fffff00004000
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xfffffff701000000, 0xff7fffff00004000, x1, 832, x3)

inst_135:
// rs1_w0_val == 2097152, 
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x08000000200000;  op2val:0x0000050000000e
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x08000000200000, 0x0000050000000e, x1, 840, x3)

inst_136:
// rs1_w0_val == rs2_w0_val and rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 4294934527, rs2_w1_val == 512, rs1_w1_val == 8, rs1_w0_val == 4294934527
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008ffff7fff;  op2val:0x000200ffff7fff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x000008ffff7fff, 0x000200ffff7fff, x1, 848, x3)

inst_137:
// rs2_w1_val == 2863311530, rs2_w0_val == 2, rs1_w1_val == 8192
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200000000006;  op2val:0xaaaaaaaa00000002
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00200000000006, 0xaaaaaaaa00000002, x1, 856, x3)

inst_138:
// rs2_w1_val == 4286578687, rs2_w0_val == 4286578687, rs1_w0_val == 16, rs1_w1_val == 4294934527
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00000010;  op2val:0xff7fffffff7fffff
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00000010, 0xff7fffffff7fffff, x1, 864, x3)

inst_139:
// rs2_w1_val == 4293918719, rs1_w0_val == 2147483647, rs2_w0_val == 4294967263
// opcode: umax32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000b7fffffff;  op2val:0xffefffffffffffdf
TEST_RR_OP(umax32, x31, x30, x29, 0x0000000000000000, 0x00000b7fffffff, 0xffefffffffffffdf, x1, 872, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x8_0:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 110*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
