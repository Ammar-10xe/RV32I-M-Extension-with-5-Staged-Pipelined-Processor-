
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmda instruction of the RISC-V RV64PZicsr extension for the kmda covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmda)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rd != rs2, rs1==x11, rs2==x16, rd==x11, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h2_val == -4097, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val == rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val != rs2_h1_val, rs2_h1_val == -9, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val == -4097, rs1_h0_val != rs2_h0_val, rs1_h1_val == 32767, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h3_val == 32, rs1_h3_val == 4096
// opcode: kmda ; op1:x11; op2:x16; dest:x11; op1val:0x1000efff7fff8000;  op2val:0x20effffff70005
TEST_PKRR_OP(kmda, x11, x11, x16, 0x0000000000000000, 0x1000efff7fff8000, 0x20effffff70005, x11, x8, 0, x19)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x21, rs2==x12, rd==x27, rs1_h3_val == rs2_h3_val, rs2_h1_val == 4, rs1_h1_val == -3, rs1_h2_val == 2048, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h3_val == -8193, rs1_h1_val < 0 and rs2_h1_val > 0, rs2_h0_val == -3, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h3_val == -8193
// opcode: kmda ; op1:x21; op2:x12; dest:x27; op1val:0xdfff0800fffdfffc;  op2val:0xdfff00090004fffd
TEST_PKRR_OP(kmda, x27, x21, x12, 0x0000000000000000, 0xdfff0800fffdfffc, 0xdfff00090004fffd, x21, x8, 16, x19)

inst_2:
// rs1 == rs2 != rd, rs1==x14, rs2==x14, rd==x12, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == -8193, rs1_h0_val == 8192, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val == 0, rs2_h2_val == 1024, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h2_val == -65
// opcode: kmda ; op1:x14; op2:x14; dest:x12; op1val:0xc000ffbf00002000;  op2val:0x3fff0400dffffff9
TEST_PKRR_OP(kmda, x12, x14, x14, 0x0000000000000000, 0xc000ffbf00002000, 0x3fff0400dffffff9, x14, x8, 32, x19)

inst_3:
// rs1 == rs2 == rd, rs1==x9, rs2==x9, rd==x9, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h2_val == -16385, rs2_h0_val == 32, rs2_h1_val == -16385, rs1_h3_val == 21845, rs2_h3_val == -32768, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val < 0 and rs2_h1_val < 0
// opcode: kmda ; op1:x9; op2:x9; dest:x9; op1val:0x55550006fffcfff6;  op2val:0x8000bfffbfff0020
TEST_PKRR_OP(kmda, x9, x9, x9, 0x0000000000000000, 0x55550006fffcfff6, 0x8000bfffbfff0020, x9, x8, 48, x19)

inst_4:
// rs2 == rd != rs1, rs1==x13, rs2==x3, rd==x3, rs1_h1_val == rs2_h1_val, rs1_h2_val == 64, rs2_h0_val == -257, rs2_h3_val == 2048
// opcode: kmda ; op1:x13; op2:x3; dest:x3; op1val:0x050040fffafff9;  op2val:0x800effffffafeff
TEST_PKRR_OP(kmda, x3, x13, x3, 0x0000000000000000, 0x050040fffafff9, 0x800effffffafeff, x13, x8, 64, x19)

inst_5:
// rs1==x7, rs2==x29, rd==x1, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == -33, rs1_h1_val == 512, rs2_h2_val == 128, rs2_h1_val == 2048, rs2_h0_val == 16384, rs1_h3_val == -32768
// opcode: kmda ; op1:x7; op2:x29; dest:x1; op1val:0x800008000200ffdf;  op2val:0x05008008004000
TEST_PKRR_OP(kmda, x1, x7, x29, 0x0000000000000000, 0x800008000200ffdf, 0x05008008004000, x7, x8, 80, x19)

inst_6:
// rs1==x23, rs2==x0, rd==x31, rs1_h0_val == rs2_h0_val, rs1_h2_val == 4, rs2_h0_val == -513, rs2_h3_val == 1024, rs1_h0_val == -513, rs2_h2_val == 32767, rs1_h1_val == -9
// opcode: kmda ; op1:x23; op2:x0; dest:x31; op1val:0x060004fff7fdff;  op2val:0x4007fff0005fdff
TEST_PKRR_OP(kmda, x31, x23, x0, 0x0000000000000000, 0x060004fff7fdff, 0x4007fff0005fdff, x23, x8, 96, x19)

inst_7:
// rs1==x12, rs2==x18, rd==x20, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 4, rs1_h3_val == -21846, rs2_h1_val == -2, rs1_h2_val == -2049, rs1_h1_val == 1, rs1_h0_val == 21845, rs2_h3_val == 8
// opcode: kmda ; op1:x12; op2:x18; dest:x20; op1val:0xaaaaf7ff00015555;  op2val:0x080080fffe0004
TEST_PKRR_OP(kmda, x20, x12, x18, 0x0000000000000000, 0xaaaaf7ff00015555, 0x080080fffe0004, x12, x8, 112, x19)

inst_8:
// rs1==x27, rs2==x13, rd==x18, rs2_h3_val == -21846, rs2_h2_val == -65, rs1_h1_val == -1025, rs1_h3_val == -17
// opcode: kmda ; op1:x27; op2:x13; dest:x18; op1val:0xffef0007fbff8000;  op2val:0xaaaaffbffffa0007
TEST_PKRR_OP(kmda, x18, x27, x13, 0x0000000000000000, 0xffef0007fbff8000, 0xaaaaffbffffa0007, x27, x8, 128, x19)

inst_9:
// rs1==x2, rs2==x26, rd==x6, rs2_h3_val == 21845, rs2_h1_val == -5, rs1_h0_val == 1024, rs2_h2_val == -21846
// opcode: kmda ; op1:x2; op2:x26; dest:x6; op1val:0xfff90009fff90400;  op2val:0x5555aaaafffb0004
TEST_PKRR_OP(kmda, x6, x2, x26, 0x0000000000000000, 0xfff90009fff90400, 0x5555aaaafffb0004, x2, x8, 144, x19)

inst_10:
// rs1==x20, rs2==x2, rd==x5, rs2_h3_val == 32767, rs2_h2_val == 16384, rs2_h0_val == 4096, rs1_h1_val == 21845
// opcode: kmda ; op1:x20; op2:x2; dest:x5; op1val:0x555508005555ffdf;  op2val:0x7fff4000fff81000
TEST_PKRR_OP(kmda, x5, x20, x2, 0x0000000000000000, 0x555508005555ffdf, 0x7fff4000fff81000, x20, x8, 160, x19)

inst_11:
// rs1==x1, rs2==x21, rd==x4, rs2_h3_val == -16385, rs1_h0_val == -17, rs2_h1_val == -1025, rs1_h3_val == 4, rs2_h2_val == -5, rs1_h2_val == -16385, rs1_h1_val == -4097
// opcode: kmda ; op1:x1; op2:x21; dest:x4; op1val:0x04bfffefffffef;  op2val:0xbffffffbfbff0009
TEST_PKRR_OP(kmda, x4, x1, x21, 0x0000000000000000, 0x04bfffefffffef, 0xbffffffbfbff0009, x1, x8, 176, x19)

inst_12:
// rs1==x15, rs2==x5, rd==x30, rs2_h3_val == -4097, rs2_h0_val == -16385, rs1_h3_val == 8192, rs1_h0_val == -129
// opcode: kmda ; op1:x15; op2:x5; dest:x30; op1val:0x2000ffbfc000ff7f;  op2val:0xeffffff60007bfff
TEST_PKRR_OP(kmda, x30, x15, x5, 0x0000000000000000, 0x2000ffbfc000ff7f, 0xeffffff60007bfff, x15, x8, 192, x19)

inst_13:
// rs1==x16, rs2==x31, rd==x10, rs2_h3_val == -2049, rs1_h1_val == 1024, rs1_h2_val == 1024, rs1_h3_val == 32, rs2_h2_val == -2
// opcode: kmda ; op1:x16; op2:x31; dest:x10; op1val:0x2004000400fffc;  op2val:0xf7fffffefffefff8
TEST_PKRR_OP(kmda, x10, x16, x31, 0x0000000000000000, 0x2004000400fffc, 0xf7fffffefffefff8, x16, x8, 208, x19)

inst_14:
// rs1==x0, rs2==x6, rd==x17, rs2_h3_val == -1025, rs2_h1_val == 32767, rs1_h1_val == 32, rs1_h3_val == -4097, rs2_h2_val == 4096, rs1_h2_val == -9
// opcode: kmda ; op1:x0; op2:x6; dest:x17; op1val:0xeffffff700202000;  op2val:0xfbff10007fff4000
TEST_PKRR_OP(kmda, x17, x0, x6, 0x0000000000000000, 0xeffffff700202000, 0xfbff10007fff4000, x0, x8, 224, x19)

inst_15:
// rs1==x28, rs2==x20, rd==x29, rs2_h3_val == -513, rs1_h3_val == 64, rs1_h1_val == 8192, rs1_h2_val == 0, rs2_h2_val == 512, rs1_h0_val == -1
// opcode: kmda ; op1:x28; op2:x20; dest:x29; op1val:0x4000002000ffff;  op2val:0xfdff0200dfff0020
TEST_PKRR_OP(kmda, x29, x28, x20, 0x0000000000000000, 0x4000002000ffff, 0xfdff0200dfff0020, x28, x8, 240, x19)

inst_16:
// rs1==x29, rs2==x24, rd==x25, rs2_h3_val == -257, rs1_h1_val == 128, rs2_h1_val == 128, rs1_h2_val == 8, rs2_h0_val == 32767
// opcode: kmda ; op1:x29; op2:x24; dest:x25; op1val:0x05000800803fff;  op2val:0xfeffefff00807fff
TEST_PKRR_OP(kmda, x25, x29, x24, 0x0000000000000000, 0x05000800803fff, 0xfeffefff00807fff, x29, x8, 256, x12)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_17:
// rs1==x5, rs2==x15, rd==x0, rs2_h3_val == -129, rs2_h1_val == 2, rs2_h0_val == -1, rs1_h2_val == 32767, rs1_h3_val == -1025, rs2_h2_val == 16, rs1_h0_val == -257
// opcode: kmda ; op1:x5; op2:x15; dest:x0; op1val:0xfbff7fff0080feff;  op2val:0xff7f00100002ffff
TEST_PKRR_OP(kmda, x0, x5, x15, 0x0000000000000000, 0xfbff7fff0080feff, 0xff7f00100002ffff, x5, x9, 0, x12)

inst_18:
// rs1==x30, rs2==x19, rd==x23, rs2_h3_val == -65, rs2_h0_val == -65, rs1_h3_val == 2
// opcode: kmda ; op1:x30; op2:x19; dest:x23; op1val:0x02000502000005;  op2val:0xffbfeffffffaffbf
TEST_PKRR_OP(kmda, x23, x30, x19, 0x0000000000000000, 0x02000502000005, 0xffbfeffffffaffbf, x30, x9, 16, x12)

inst_19:
// rs1==x17, rs2==x22, rd==x8, rs2_h3_val == -33, rs2_h0_val == 8192, rs1_h0_val == -4097, rs2_h2_val == 8, rs1_h1_val == 8
// opcode: kmda ; op1:x17; op2:x22; dest:x8; op1val:0x4000080008efff;  op2val:0xffdf0008fff72000
TEST_PKRR_OP(kmda, x8, x17, x22, 0x0000000000000000, 0x4000080008efff, 0xffdf0008fff72000, x17, x9, 32, x12)

inst_20:
// rs1==x3, rs2==x8, rd==x24, rs2_h3_val == -17, rs1_h1_val == -129, rs1_h2_val == 1, rs1_h3_val == 8
// opcode: kmda ; op1:x3; op2:x8; dest:x24; op1val:0x080001ff7f0007;  op2val:0xffeffff9fffa4000
TEST_PKRR_OP(kmda, x24, x3, x8, 0x0000000000000000, 0x080001ff7f0007, 0xffeffff9fffa4000, x3, x9, 48, x12)

inst_21:
// rs1==x31, rs2==x1, rd==x13, rs2_h3_val == -9, rs1_h0_val == -65, rs1_h3_val == 128, rs2_h2_val == -129, rs1_h1_val == -513, rs1_h2_val == -17
// opcode: kmda ; op1:x31; op2:x1; dest:x13; op1val:0x80ffeffdffffbf;  op2val:0xfff7ff7f3fffbfff
TEST_PKRR_OP(kmda, x13, x31, x1, 0x0000000000000000, 0x80ffeffdffffbf, 0xfff7ff7f3fffbfff, x31, x9, 64, x12)

inst_22:
// rs1==x22, rs2==x10, rd==x7, rs2_h3_val == -5, rs2_h2_val == 32, rs2_h0_val == -4097, rs1_h3_val == -513
// opcode: kmda ; op1:x22; op2:x10; dest:x7; op1val:0xfdffeffffbff0009;  op2val:0xfffb0020fff8efff
TEST_PKRR_OP(kmda, x7, x22, x10, 0x0000000000000000, 0xfdffeffffbff0009, 0xfffb0020fff8efff, x22, x9, 80, x12)

inst_23:
// rs1==x6, rs2==x23, rd==x21, rs2_h3_val == -3, 
// opcode: kmda ; op1:x6; op2:x23; dest:x21; op1val:0xc000ffbfff7f8000;  op2val:0xfffdffbffff9fffc
TEST_PKRR_OP(kmda, x21, x6, x23, 0x0000000000000000, 0xc000ffbfff7f8000, 0xfffdffbffff9fffc, x6, x9, 96, x12)

inst_24:
// rs1==x25, rs2==x28, rd==x2, rs2_h3_val == -2, rs1_h0_val == 256, rs1_h3_val == -33, rs1_h2_val == -129
// opcode: kmda ; op1:x25; op2:x28; dest:x2; op1val:0xffdfff7f00050100;  op2val:0xfffe0080dfff1000
TEST_PKRR_OP(kmda, x2, x25, x28, 0x0000000000000000, 0xffdfff7f00050100, 0xfffe0080dfff1000, x25, x9, 112, x12)

inst_25:
// rs1==x4, rs2==x7, rd==x19, rs2_h3_val == 16384, rs1_h2_val == -1025, rs2_h0_val == -5, rs2_h2_val == -3
// opcode: kmda ; op1:x4; op2:x7; dest:x19; op1val:0xaaaafbff7fffffbf;  op2val:0x4000fffdfff9fffb
TEST_PKRR_OP(kmda, x19, x4, x7, 0x0000000000000000, 0xaaaafbff7fffffbf, 0x4000fffdfff9fffb, x4, x9, 128, x12)

inst_26:
// rs1==x8, rs2==x11, rd==x16, rs2_h3_val == 8192, rs1_h0_val == 128, rs2_h0_val == 8, rs2_h1_val == 16, rs1_h3_val == 0
// opcode: kmda ; op1:x8; op2:x11; dest:x16; op1val:0x00bffffffd0080;  op2val:0x2000000700100008
TEST_PKRR_OP(kmda, x16, x8, x11, 0x0000000000000000, 0x00bffffffd0080, 0x2000000700100008, x8, x9, 144, x12)

inst_27:
// rs1==x26, rs2==x17, rd==x15, rs2_h3_val == 4096, rs1_h2_val == 2, rs2_h1_val == 16384, rs1_h0_val == 0, rs2_h2_val == 256, rs1_h1_val == -2049
// opcode: kmda ; op1:x26; op2:x17; dest:x15; op1val:0x090002f7ff0000;  op2val:0x100001004000efff
TEST_PKRR_OP(kmda, x15, x26, x17, 0x0000000000000000, 0x090002f7ff0000, 0x100001004000efff, x26, x9, 160, x12)

inst_28:
// rs1==x10, rs2==x30, rd==x26, rs2_h3_val == 512, rs2_h1_val == -513, rs1_h0_val == -5
// opcode: kmda ; op1:x10; op2:x30; dest:x26; op1val:0xdfff0009fff9fffb;  op2val:0x2000020fdff0008
TEST_PKRR_OP(kmda, x26, x10, x30, 0x0000000000000000, 0xdfff0009fff9fffb, 0x2000020fdff0008, x10, x9, 176, x12)

inst_29:
// rs1==x24, rs2==x25, rd==x28, rs2_h3_val == 256, rs2_h0_val == -1025, rs2_h1_val == -4097
// opcode: kmda ; op1:x24; op2:x25; dest:x28; op1val:0x05fff9fff7fff6;  op2val:0x1000003effffbff
TEST_PKRR_OP(kmda, x28, x24, x25, 0x0000000000000000, 0x05fff9fff7fff6, 0x1000003effffbff, x24, x9, 192, x12)

inst_30:
// rs1==x19, rs2==x27, rd==x14, rs2_h3_val == 128, rs1_h1_val == -2, rs2_h0_val == 21845, rs1_h0_val == -2, rs2_h1_val == -65, rs1_h3_val == -2049, rs2_h2_val == -32768, rs1_h2_val == -8193
// opcode: kmda ; op1:x19; op2:x27; dest:x14; op1val:0xf7ffdffffffefffe;  op2val:0x808000ffbf5555
TEST_PKRR_OP(kmda, x14, x19, x27, 0x0000000000000000, 0xf7ffdffffffefffe, 0x808000ffbf5555, x19, x9, 208, x12)

inst_31:
// rs1==x18, rs2==x4, rd==x22, rs2_h3_val == 64, rs1_h1_val == 2, rs1_h3_val == -16385
// opcode: kmda ; op1:x18; op2:x4; dest:x22; op1val:0xbfff000800020400;  op2val:0x40fff60800bfff
TEST_PKRR_OP(kmda, x22, x18, x4, 0x0000000000000000, 0xbfff000800020400, 0x40fff60800bfff, x18, x9, 224, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs2_h3_val == 16, rs1_h0_val == -9
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff00000003fff7;  op2val:0x10010000060004
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xf7ff00000003fff7, 0x10010000060004, x30, x1, 0, x2)

inst_33:
// rs2_h3_val == 4, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x080008fff6ffbf;  op2val:0x0400103fff0005
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x080008fff6ffbf, 0x0400103fff0005, x30, x1, 16, x2)

inst_34:
// rs2_h3_val == 2, rs1_h2_val == 4096, rs2_h2_val == 2
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfff81000fff7ffbf;  op2val:0x020002ffbf0008
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfff81000fff7ffbf, 0x020002ffbf0008, x30, x1, 32, x2)

inst_35:
// rs2_h3_val == 1, rs2_h1_val == 1, rs1_h0_val == 16384
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0400ff7f4000;  op2val:0x01fff80001feff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfdff0400ff7f4000, 0x01fff80001feff, x30, x1, 48, x2)

inst_36:
// rs1_h1_val == -5, rs1_h3_val == -5, rs1_h0_val == 2048, rs2_h0_val == -21846
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0000fffb0800;  op2val:0xfffa00090006aaaa
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfffb0000fffb0800, 0xfffa00090006aaaa, x30, x1, 64, x2)

inst_37:
// rs1_h1_val == -32768, rs2_h1_val == -21846, rs1_h2_val == 32
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xffef002080005555;  op2val:0x1000fff8aaaafffc
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xffef002080005555, 0x1000fff8aaaafffc, x30, x1, 80, x2)

inst_38:
// rs1_h1_val == 16384, rs2_h2_val == 8192, rs1_h0_val == -2049, rs1_h2_val == -5
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfff8fffb4000f7ff;  op2val:0xffef2000fdffefff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfff8fffb4000f7ff, 0xffef2000fdffefff, x30, x1, 96, x2)

inst_39:
// rs1_h1_val == 4096, rs1_h0_val == -8193, rs2_h1_val == 512
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x0004001000dfff;  op2val:0xfffb000602000004
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x0004001000dfff, 0xfffb000602000004, x30, x1, 112, x2)

inst_40:
// rs1_h1_val == 2048, rs1_h0_val == 32, rs2_h1_val == 256
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x04dfff08000020;  op2val:0x02fff801005555
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x04dfff08000020, 0x02fff801005555, x30, x1, 128, x2)

inst_41:
// rs1_h1_val == 256, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x1000bfff01004000;  op2val:0xff7f04003fffc000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x1000bfff01004000, 0xff7f04003fffc000, x30, x1, 144, x2)

inst_42:
// rs1_h1_val == 64, rs2_h0_val == -17, rs2_h3_val == 0
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfff900010040fff7;  op2val:0x000002fffbffef
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfff900010040fff7, 0x000002fffbffef, x30, x1, 160, x2)

inst_43:
// rs1_h1_val == 16, rs1_h3_val == 1024, rs2_h3_val == -1
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x400efff0010c000;  op2val:0xffff0006fffac000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x400efff0010c000, 0xffff0006fffac000, x30, x1, 176, x2)

inst_44:
// rs1_h1_val == 4, rs2_h2_val == 64, rs1_h3_val == 2048
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x800000700043fff;  op2val:0xfffb004000030004
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x800000700043fff, 0xfffb004000030004, x30, x1, 192, x2)

inst_45:
// rs1_h1_val == -1, rs1_h2_val == -513
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xffeffdfffffffff7;  op2val:0xffbfc000fff8fff8
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xffeffdfffffffff7, 0xffbfc000fff8fff8, x30, x1, 208, x2)

inst_46:
// rs1_h0_val == -21846, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x0710007fffaaaa;  op2val:0xfeffffbfbffffbff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x0710007fffaaaa, 0xfeffffbfbffffbff, x30, x1, 224, x2)

inst_47:
// rs1_h0_val == 32767, rs2_h0_val == 16, rs2_h1_val == -33
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fdfffff97fff;  op2val:0xffffefffffdf0010
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfff9fdfffff97fff, 0xffffefffffdf0010, x30, x1, 240, x2)

inst_48:
// rs1_h0_val == -16385, rs2_h0_val == -32768
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xdfffdfff0100bfff;  op2val:0x010080fff98000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xdfffdfff0100bfff, 0x010080fff98000, x30, x1, 256, x2)

inst_49:
// rs1_h0_val == -1025, rs2_h1_val == 4096
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xffdf00060040fbff;  op2val:0xfff6fff81000fffc
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xffdf00060040fbff, 0xfff6fff81000fffc, x30, x1, 272, x2)

inst_50:
// rs1_h0_val == -3, rs1_h2_val == -257
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfefffffcfffd;  op2val:0x800000500021000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfffbfefffffcfffd, 0x800000500021000, x30, x1, 288, x2)

inst_51:
// rs1_h0_val == 4096, rs2_h1_val == -32768, rs1_h2_val == 128
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x400008000401000;  op2val:0x02bfff80000006
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x400008000401000, 0x02bfff80000006, x30, x1, 304, x2)

inst_52:
// rs1_h0_val == 512, rs1_h2_val == 16384, rs2_h0_val == 128
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x1000400001000200;  op2val:0xc000efff00030080
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x1000400001000200, 0xc000efff00030080, x30, x1, 320, x2)

inst_53:
// rs1_h0_val == 64, rs2_h2_val == 4
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x4000006fbff0040;  op2val:0x3fff0004fff9fffc
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x4000006fbff0040, 0x3fff0004fff9fffc, x30, x1, 336, x2)

inst_54:
// rs1_h0_val == 16, rs2_h2_val == -17
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfffaffef40000010;  op2val:0x80ffef00805555
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfffaffef40000010, 0x80ffef00805555, x30, x1, 352, x2)

inst_55:
// rs1_h0_val == 8, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0003fff90008;  op2val:0x20000003aaaabfff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfbff0003fff90008, 0x20000003aaaabfff, x30, x1, 368, x2)

inst_56:
// rs1_h0_val == 4, rs2_h2_val == -1025
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x02fff9fff80004;  op2val:0xfffffbff0080ffbf
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x02fff9fff80004, 0xfffffbff0080ffbf, x30, x1, 384, x2)

inst_57:
// rs1_h0_val == 2, rs1_h3_val == 32767, rs2_h0_val == 2, rs2_h1_val == 8
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x7fff008040000002;  op2val:0xffef010000080002
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x7fff008040000002, 0xffef010000080002, x30, x1, 400, x2)

inst_58:
// rs1_h0_val == 1, rs1_h3_val == 512, rs2_h1_val == 64
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x200efff00020001;  op2val:0xfff9fff80040fffd
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x200efff00020001, 0xfff9fff80040fffd, x30, x1, 416, x2)

inst_59:
// rs2_h2_val == 21845, rs2_h0_val == 512
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffc20005555;  op2val:0xdfff5555fdff0200
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xeffffffc20005555, 0xdfff5555fdff0200, x30, x1, 432, x2)

inst_60:
// rs2_h1_val == 0, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x800ffbf2000fffe;  op2val:0x1000ffef00008000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x800ffbf2000fffe, 0x1000ffef00008000, x30, x1, 448, x2)

inst_61:
// rs2_h1_val == -1, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfffafbff00000009;  op2val:0xfefffffbffff3fff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfffafbff00000009, 0xfefffffbffff3fff, x30, x1, 464, x2)

inst_62:
// rs2_h0_val == -8193, rs1_h3_val == -9
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfff70008f7ffbfff;  op2val:0x7ffffff60002dfff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfff70008f7ffbfff, 0x7ffffff60002dfff, x30, x1, 480, x2)

inst_63:
// rs2_h0_val == -2049, rs1_h2_val == -33
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x09ffdf02000080;  op2val:0x042000fffaf7ff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x09ffdf02000080, 0x042000fffaf7ff, x30, x1, 496, x2)

inst_64:
// rs2_h0_val == -129, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfff900040080efff;  op2val:0x400000093fffff7f
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfff900040080efff, 0x400000093fffff7f, x30, x1, 512, x2)

inst_65:
// rs2_h0_val == -33, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffdfffff7ffdf;  op2val:0xf7ffc000fff9ffdf
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xf7fffdfffff7ffdf, 0xf7ffc000fff9ffdf, x30, x1, 528, x2)

inst_66:
// rs2_h0_val == -9, rs2_h2_val == -33
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x03fff700404000;  op2val:0x40ffdffbfffff7
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x03fff700404000, 0x40ffdffbfffff7, x30, x1, 544, x2)

inst_67:
// rs2_h0_val == -2, rs1_h2_val == 8192
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x55552000fffefeff;  op2val:0x80003ffffff9fffe
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x55552000fffefeff, 0x80003ffffff9fffe, x30, x1, 560, x2)

inst_68:
// rs2_h0_val == 2048, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x0500800040ffbf;  op2val:0x5555fff908000800
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x0500800040ffbf, 0x5555fff908000800, x30, x1, 576, x2)

inst_69:
// rs2_h0_val == 1024, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffbf0800ff7f;  op2val:0x04040002000400
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfff6ffbf0800ff7f, 0x04040002000400, x30, x1, 592, x2)

inst_70:
// rs2_h0_val == 256, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x20fffc0800aaaa;  op2val:0x09100000100100
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x20fffc0800aaaa, 0x09100000100100, x30, x1, 608, x2)

inst_71:
// rs2_h0_val == 64, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x063fff7fffbfff;  op2val:0xffbfff7f01000040
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x063fff7fffbfff, 0xffbfff7f01000040, x30, x1, 624, x2)

inst_72:
// rs2_h0_val == 1, rs1_h3_val == 256
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x1000006efffffff;  op2val:0x04efffffbf0001
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x1000006efffffff, 0x04efffffbf0001, x30, x1, 640, x2)

inst_73:
// rs2_h0_val == 0, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xbfff4000fffa2000;  op2val:0xfff6ffdf00040000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xbfff4000fffa2000, 0xfff6ffdf00040000, x30, x1, 656, x2)

inst_74:
// rs1_h3_val == -257, rs2_h1_val == -129
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0008fffefffc;  op2val:0x060002ff7fffff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfeff0008fffefffc, 0x060002ff7fffff, x30, x1, 672, x2)

inst_75:
// rs1_h3_val == -129, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xff7f002000080009;  op2val:0xffdf000300070002
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xff7f002000080009, 0xffdf000300070002, x30, x1, 688, x2)

inst_76:
// rs1_h3_val == -65, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xffbff7fffffa0003;  op2val:0x2000c00000030010
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xffbff7fffffa0003, 0x2000c00000030010, x30, x1, 704, x2)

inst_77:
// rs1_h3_val == -3, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0040fffb0009;  op2val:0x40bfff0005aaaa
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfffd0040fffb0009, 0x40bfff0005aaaa, x30, x1, 720, x2)

inst_78:
// rs1_h3_val == -2, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfffe00007fff0200;  op2val:0xfff70003fffc0006
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfffe00007fff0200, 0xfff70003fffc0006, x30, x1, 736, x2)

inst_79:
// rs1_h3_val == 16384, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x40007fff0008bfff;  op2val:0xf7fffffafffe0003
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x40007fff0008bfff, 0xf7fffffafffe0003, x30, x1, 752, x2)

inst_80:
// rs2_h2_val == -8193, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x5555004000200007;  op2val:0x2000dfff02000040
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x5555004000200007, 0x2000dfff02000040, x30, x1, 768, x2)

inst_81:
// rs2_h2_val == -2049, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x200000207ffff7ff;  op2val:0x05f7ff1000bfff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x200000207ffff7ff, 0x05f7ff1000bfff, x30, x1, 784, x2)

inst_82:
// rs2_h2_val == -513, rs1_h2_val == 256
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x0901008000aaaa;  op2val:0xfbfffdff0008fffb
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x0901008000aaaa, 0xfbfffdff0008fffb, x30, x1, 800, x2)

inst_83:
// rs2_h2_val == -257, rs1_h2_val == -2
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffe08000400;  op2val:0x7ffffefffffcfffa
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xf7fffffe08000400, 0x7ffffefffffcfffa, x30, x1, 816, x2)

inst_84:
// rs1_h3_val == 16, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x10ffeffff7bfff;  op2val:0x04fffbfffc0000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x10ffeffff7bfff, 0x04fffbfffc0000, x30, x1, 832, x2)

inst_85:
// rs1_h3_val == 1, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x0100060006fff6;  op2val:0x8000ffdf08000040
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x0100060006fff6, 0x8000ffdf08000040, x30, x1, 848, x2)

inst_86:
// rs2_h2_val == -9, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffafffdfffb;  op2val:0x05fff70009fffc
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfffcfffafffdfffb, 0x05fff70009fffc, x30, x1, 864, x2)

inst_87:
// rs1_h3_val == -1, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff7fff5555;  op2val:0x05fdff00053fff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfffffbff7fff5555, 0x05fdff00053fff, x30, x1, 880, x2)

inst_88:
// rs1_h2_val == -21846, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x10aaaa80000100;  op2val:0xffef1000fff74000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x10aaaa80000100, 0xffef1000fff74000, x30, x1, 896, x2)

inst_89:
// rs1_h2_val == 21845, rs2_h2_val == 0
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x400555500003fff;  op2val:0x07000002000200
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x400555500003fff, 0x07000002000200, x30, x1, 912, x2)

inst_90:
// rs2_h2_val == 2048, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfeff3fff00050002;  op2val:0x7fff08007fff4000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfeff3fff00050002, 0x7fff08007fff4000, x30, x1, 928, x2)

inst_91:
// rs1_h2_val == -3, rs2_h2_val == 1
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffdfffe8000;  op2val:0xefff00013fff0007
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xffbffffdfffe8000, 0xefff00013fff0007, x30, x1, 944, x2)

inst_92:
// rs1_h2_val == -32768, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff8000fff9fffc;  op2val:0xfeffffbf00090400
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xf7ff8000fff9fffc, 0xfeffffbf00090400, x30, x1, 960, x2)

inst_93:
// rs2_h2_val == -1, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x800fffcfff8fffc;  op2val:0xffdfffffaaaafff9
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x800fffcfff8fffc, 0xffdfffffaaaafff9, x30, x1, 976, x2)

inst_94:
// rs2_h1_val == 21845, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x400aaaaff7fc000;  op2val:0xfff900105555ff7f
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x400aaaaff7fc000, 0xfff900105555ff7f, x30, x1, 992, x2)

inst_95:
// rs1_h2_val == 512, rs2_h1_val == 8192
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x0702000100fffe;  op2val:0x02fff82000efff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x0702000100fffe, 0x02fff82000efff, x30, x1, 1008, x2)

inst_96:
// rs2_h1_val == -2049, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0006ffff3fff;  op2val:0x060200f7fffdff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xf7ff0006ffff3fff, 0x060200f7fffdff, x30, x1, 1024, x2)

inst_97:
// rs2_h1_val == -257, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000310000100;  op2val:0x030800feff7fff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xaaaa000310000100, 0x030800feff7fff, x30, x1, 1040, x2)

inst_98:
// rs1_h2_val == 16, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0010fffb4000;  op2val:0xfffafeffc0000008
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfffe0010fffb4000, 0xfffafeffc0000008, x30, x1, 1056, x2)

inst_99:
// rs2_h1_val == -17, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfefffefffffbbfff;  op2val:0x020040ffeff7ff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfefffefffffbbfff, 0x020040ffeff7ff, x30, x1, 1072, x2)

inst_100:
// rs1_h2_val == -1, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x10fffffdff0010;  op2val:0x09f7fffffa0008
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x10fffffdff0010, 0x09f7fffffa0008, x30, x1, 1088, x2)

inst_101:
// rs2_h1_val == -3, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x10000400fffe4000;  op2val:0x060400fffdfff7
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x10000400fffe4000, 0x060400fffdfff7, x30, x1, 1104, x2)

inst_102:
// rs1_h1_val == -21846, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x060800aaaa0006;  op2val:0x8000003fbfffdff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x060800aaaa0006, 0x8000003fbfffdff, x30, x1, 1120, x2)

inst_103:
// rs1_h1_val == -16385, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xffef4000bffffffb;  op2val:0x100fffdff7ffffb
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xffef4000bffffffb, 0x100fffdff7ffffb, x30, x1, 1136, x2)

inst_104:
// rs1_h1_val == -8193, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x400feffdffff7ff;  op2val:0xff7f0005f7ff8000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x400feffdffff7ff, 0xff7f0005f7ff8000, x30, x1, 1152, x2)

inst_105:
// rs2_h1_val == 32, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x01dfff55550001;  op2val:0xfff6f7ff0020c000
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x01dfff55550001, 0xfff6f7ff0020c000, x30, x1, 1168, x2)

inst_106:
// rs2_h1_val == 1024, rs1_h1_val == -17
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x7fff4000ffeffeff;  op2val:0xfffbaaaa04000004
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x7fff4000ffeffeff, 0xfffbaaaa04000004, x30, x1, 1184, x2)

inst_107:
// rs1_h1_val == -257, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x200fff9feffffdf;  op2val:0x04fff9fffdffff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x200fff9feffffdf, 0x04fff9fffdffff, x30, x1, 1200, x2)

inst_108:
// rs1_h1_val == -65, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x400fdffffbfff7f;  op2val:0xf7ff0080ffef0003
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x400fdffffbfff7f, 0xf7ff0080ffef0003, x30, x1, 1216, x2)

inst_109:
// rs1_h1_val == -33, 
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0010ffdfaaaa;  op2val:0x4000010000400002
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0xfdff0010ffdfaaaa, 0x4000010000400002, x30, x1, 1232, x2)

inst_110:
// rs1_h0_val == rs2_h0_val, rs1_h2_val == 4, rs2_h0_val == -513, rs2_h3_val == 1024, rs1_h0_val == -513, rs2_h2_val == 32767, rs1_h1_val == -9
// opcode: kmda ; op1:x30; op2:x29; dest:x31; op1val:0x060004fff7fdff;  op2val:0x4007fff0005fdff
TEST_PKRR_OP(kmda, x31, x30, x29, 0x0000000000000000, 0x060004fff7fdff, 0x4007fff0005fdff, x30, x1, 1248, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x9_0:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 158*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
