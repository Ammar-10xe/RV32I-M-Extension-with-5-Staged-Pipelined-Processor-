
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the radd32 instruction of the RISC-V RV64PZicsr extension for the radd32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",radd32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x21, rs2==x24, rd==x21, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w0_val == 128, rs2_w1_val == 4, rs1_w1_val == -67108865
// opcode: radd32 ; op1:x21; op2:x24; dest:x21; op1val:0xfbffffff80000000;  op2val:0x00000400000080
TEST_RR_OP(radd32, x21, x21, x24, 0x0000000000000000, 0xfbffffff80000000, 0x00000400000080, x2, 0, x4)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x6, rs2==x23, rd==x1, rs1_w1_val == rs2_w1_val, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 32768, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w0_val == -1073741825, rs1_w0_val == -268435457, rs2_w1_val == 32768
// opcode: radd32 ; op1:x6; op2:x23; dest:x1; op1val:0x008000efffffff;  op2val:0x008000bfffffff
TEST_RR_OP(radd32, x1, x6, x23, 0x0000000000000000, 0x008000efffffff, 0x008000bfffffff, x2, 8, x4)

inst_2:
// rs1 == rs2 != rd, rs1==x0, rs2==x0, rd==x26, rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val == 16777216, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 1, rs1_w1_val == -5, rs2_w1_val == -8388609
// opcode: radd32 ; op1:x0; op2:x0; dest:x26; op1val:0xfffffffb01000000;  op2val:0xff7fffff00000001
TEST_RR_OP(radd32, x26, x0, x0, 0x0000000000000000, 0xfffffffb01000000, 0xff7fffff00000001, x2, 16, x4)

inst_3:
// rs1 == rs2 == rd, rs1==x15, rs2==x15, rd==x15, rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w0_val == 2, rs1_w1_val == 268435456, rs1_w0_val == 16384, rs2_w1_val == -513
// opcode: radd32 ; op1:x15; op2:x15; dest:x15; op1val:0x1000000000004000;  op2val:0xfffffdff00000002
TEST_RR_OP(radd32, x15, x15, x15, 0x0000000000000000, 0x1000000000004000, 0xfffffdff00000002, x2, 24, x4)

inst_4:
// rs2 == rd != rs1, rs1==x31, rs2==x12, rd==x12, rs1_w0_val == rs2_w0_val, rs1_w1_val == -16777217
// opcode: radd32 ; op1:x31; op2:x12; dest:x12; op1val:0xfeffffff00000009;  op2val:0x00000300000009
TEST_RR_OP(radd32, x12, x31, x12, 0x0000000000000000, 0xfeffffff00000009, 0x00000300000009, x2, 32, x4)

inst_5:
// rs1==x14, rs2==x1, rd==x29, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w1_val == 32, rs1_w0_val == 536870912
// opcode: radd32 ; op1:x14; op2:x1; dest:x29; op1val:0x00002020000000;  op2val:0xfffffff6fffffff6
TEST_RR_OP(radd32, x29, x14, x1, 0x0000000000000000, 0x00002020000000, 0xfffffff6fffffff6, x2, 40, x4)

inst_6:
// rs1==x29, rs2==x27, rd==x17, rs2_w1_val == -1431655766, 
// opcode: radd32 ; op1:x29; op2:x27; dest:x17; op1val:0x008000c0000000;  op2val:0xaaaaaaaa00000006
TEST_RR_OP(radd32, x17, x29, x27, 0x0000000000000000, 0x008000c0000000, 0xaaaaaaaa00000006, x2, 48, x4)

inst_7:
// rs1==x25, rs2==x8, rd==x14, rs2_w1_val == 1431655765, rs1_w1_val == -1073741825, rs1_w0_val == 131072, rs2_w0_val == -536870913
// opcode: radd32 ; op1:x25; op2:x8; dest:x14; op1val:0xbfffffff00020000;  op2val:0x55555555dfffffff
TEST_RR_OP(radd32, x14, x25, x8, 0x0000000000000000, 0xbfffffff00020000, 0x55555555dfffffff, x2, 56, x4)

inst_8:
// rs1==x26, rs2==x17, rd==x20, rs2_w1_val == 2147483647, rs1_w1_val == 2048, rs2_w0_val == 2097152, rs1_w0_val == 2048
// opcode: radd32 ; op1:x26; op2:x17; dest:x20; op1val:0x00080000000800;  op2val:0x7fffffff00200000
TEST_RR_OP(radd32, x20, x26, x17, 0x0000000000000000, 0x00080000000800, 0x7fffffff00200000, x2, 64, x4)

inst_9:
// rs1==x23, rs2==x16, rd==x10, rs2_w1_val == -1073741825, rs1_w0_val == 67108864, rs2_w0_val == -268435457, rs1_w1_val == 128
// opcode: radd32 ; op1:x23; op2:x16; dest:x10; op1val:0x00008004000000;  op2val:0xbfffffffefffffff
TEST_RR_OP(radd32, x10, x23, x16, 0x0000000000000000, 0x00008004000000, 0xbfffffffefffffff, x2, 72, x4)

inst_10:
// rs1==x24, rs2==x29, rd==x13, rs2_w1_val == -536870913, rs1_w1_val == 64, rs2_w0_val == 1073741824
// opcode: radd32 ; op1:x24; op2:x29; dest:x13; op1val:0x000040fffffffa;  op2val:0xdfffffff40000000
TEST_RR_OP(radd32, x13, x24, x29, 0x0000000000000000, 0x000040fffffffa, 0xdfffffff40000000, x2, 80, x4)

inst_11:
// rs1==x3, rs2==x30, rd==x22, rs2_w1_val == -268435457, rs1_w1_val == -4097, rs1_w0_val == 256, rs2_w0_val == -16777217
// opcode: radd32 ; op1:x3; op2:x30; dest:x22; op1val:0xffffefff00000100;  op2val:0xeffffffffeffffff
TEST_RR_OP(radd32, x22, x3, x30, 0x0000000000000000, 0xffffefff00000100, 0xeffffffffeffffff, x2, 88, x4)

inst_12:
// rs1==x12, rs2==x21, rd==x11, rs2_w1_val == -134217729, rs1_w1_val == 16384, rs1_w0_val == -4194305
// opcode: radd32 ; op1:x12; op2:x21; dest:x11; op1val:0x004000ffbfffff;  op2val:0xf7ffffff3fffffff
TEST_RR_OP(radd32, x11, x12, x21, 0x0000000000000000, 0x004000ffbfffff, 0xf7ffffff3fffffff, x2, 96, x4)

inst_13:
// rs1==x11, rs2==x6, rd==x23, rs2_w1_val == -67108865, rs2_w0_val == 2147483647, rs1_w1_val == 524288, rs1_w0_val == -4097
// opcode: radd32 ; op1:x11; op2:x6; dest:x23; op1val:0x080000ffffefff;  op2val:0xfbffffff7fffffff
TEST_RR_OP(radd32, x23, x11, x6, 0x0000000000000000, 0x080000ffffefff, 0xfbffffff7fffffff, x2, 104, x4)

inst_14:
// rs1==x18, rs2==x14, rd==x5, rs2_w1_val == -33554433, rs1_w1_val == -536870913, rs2_w0_val == -4097, rs1_w0_val == 524288
// opcode: radd32 ; op1:x18; op2:x14; dest:x5; op1val:0xdfffffff00080000;  op2val:0xfdffffffffffefff
TEST_RR_OP(radd32, x5, x18, x14, 0x0000000000000000, 0xdfffffff00080000, 0xfdffffffffffefff, x2, 112, x4)

inst_15:
// rs1==x27, rs2==x7, rd==x9, rs2_w1_val == -16777217, rs2_w0_val == 65536, rs1_w0_val == 1048576
// opcode: radd32 ; op1:x27; op2:x7; dest:x9; op1val:0x00400000100000;  op2val:0xfeffffff00010000
TEST_RR_OP(radd32, x9, x27, x7, 0x0000000000000000, 0x00400000100000, 0xfeffffff00010000, x2, 120, x4)
RVTEST_SIGBASE(x12,signature_x12_0)

inst_16:
// rs1==x8, rs2==x28, rd==x18, rs2_w1_val == -4194305, rs2_w0_val == -1431655766, rs1_w1_val == 4
// opcode: radd32 ; op1:x8; op2:x28; dest:x18; op1val:0x00000400000007;  op2val:0xffbfffffaaaaaaaa
TEST_RR_OP(radd32, x18, x8, x28, 0x0000000000000000, 0x00000400000007, 0xffbfffffaaaaaaaa, x12, 0, x14)

inst_17:
// rs1==x1, rs2==x19, rd==x24, rs2_w1_val == -2097153, rs1_w1_val == 67108864
// opcode: radd32 ; op1:x1; op2:x19; dest:x24; op1val:0x400000000004000;  op2val:0xffdfffff40000000
TEST_RR_OP(radd32, x24, x1, x19, 0x0000000000000000, 0x400000000004000, 0xffdfffff40000000, x12, 8, x14)

inst_18:
// rs1==x28, rs2==x10, rd==x8, rs2_w1_val == -1048577, rs1_w1_val == -8193, rs2_w0_val == 8388608
// opcode: radd32 ; op1:x28; op2:x10; dest:x8; op1val:0xffffdffffffffff6;  op2val:0xffefffff00800000
TEST_RR_OP(radd32, x8, x28, x10, 0x0000000000000000, 0xffffdffffffffff6, 0xffefffff00800000, x12, 16, x14)

inst_19:
// rs1==x2, rs2==x25, rd==x30, rs2_w1_val == -524289, rs1_w1_val == -16385
// opcode: radd32 ; op1:x2; op2:x25; dest:x30; op1val:0xffffbfffffffefff;  op2val:0xfff7ffffffffefff
TEST_RR_OP(radd32, x30, x2, x25, 0x0000000000000000, 0xffffbfffffffefff, 0xfff7ffffffffefff, x12, 24, x14)

inst_20:
// rs1==x19, rs2==x26, rd==x2, rs2_w1_val == -262145, rs2_w0_val == -2049
// opcode: radd32 ; op1:x19; op2:x26; dest:x2; op1val:0x000005fffffff6;  op2val:0xfffbfffffffff7ff
TEST_RR_OP(radd32, x2, x19, x26, 0x0000000000000000, 0x000005fffffff6, 0xfffbfffffffff7ff, x12, 32, x14)

inst_21:
// rs1==x17, rs2==x20, rd==x0, rs2_w1_val == -131073, rs1_w0_val == -65, rs1_w1_val == 256
// opcode: radd32 ; op1:x17; op2:x20; dest:x0; op1val:0x000100ffffffbf;  op2val:0xfffdffff00000009
TEST_RR_OP(radd32, x0, x17, x20, 0x0000000000000000, 0x000100ffffffbf, 0xfffdffff00000009, x12, 40, x14)

inst_22:
// rs1==x9, rs2==x3, rd==x16, rs2_w1_val == -65537, rs1_w0_val == 64, rs1_w1_val == 33554432
// opcode: radd32 ; op1:x9; op2:x3; dest:x16; op1val:0x200000000000040;  op2val:0xfffefffffffffff8
TEST_RR_OP(radd32, x16, x9, x3, 0x0000000000000000, 0x200000000000040, 0xfffefffffffffff8, x12, 48, x14)

inst_23:
// rs1==x7, rs2==x9, rd==x25, rs2_w1_val == -32769, rs1_w1_val == -2, rs1_w0_val == -1048577
// opcode: radd32 ; op1:x7; op2:x9; dest:x25; op1val:0xfffffffeffefffff;  op2val:0xffff7fff00000080
TEST_RR_OP(radd32, x25, x7, x9, 0x0000000000000000, 0xfffffffeffefffff, 0xffff7fff00000080, x12, 56, x14)

inst_24:
// rs1==x4, rs2==x5, rd==x28, rs2_w1_val == -16385, rs1_w1_val == 1431655765
// opcode: radd32 ; op1:x4; op2:x5; dest:x28; op1val:0x55555555fffffffc;  op2val:0xffffbfff00800000
TEST_RR_OP(radd32, x28, x4, x5, 0x0000000000000000, 0x55555555fffffffc, 0xffffbfff00800000, x12, 64, x14)

inst_25:
// rs1==x20, rs2==x31, rd==x6, rs2_w1_val == -8193, rs1_w1_val == 8192, rs1_w0_val == 134217728, rs2_w0_val == -524289
// opcode: radd32 ; op1:x20; op2:x31; dest:x6; op1val:0x00200008000000;  op2val:0xffffdffffff7ffff
TEST_RR_OP(radd32, x6, x20, x31, 0x0000000000000000, 0x00200008000000, 0xffffdffffff7ffff, x12, 72, x14)

inst_26:
// rs1==x22, rs2==x2, rd==x4, rs2_w1_val == -4097, rs1_w0_val == 4096
// opcode: radd32 ; op1:x22; op2:x2; dest:x4; op1val:0xfffffff600001000;  op2val:0xffffefff00800000
TEST_RR_OP(radd32, x4, x22, x2, 0x0000000000000000, 0xfffffff600001000, 0xffffefff00800000, x12, 80, x14)

inst_27:
// rs1==x13, rs2==x4, rd==x19, rs2_w1_val == -2049, rs1_w0_val == -65537
// opcode: radd32 ; op1:x13; op2:x4; dest:x19; op1val:0x000020fffeffff;  op2val:0xfffff7ff00000003
TEST_RR_OP(radd32, x19, x13, x4, 0x0000000000000000, 0x000020fffeffff, 0xfffff7ff00000003, x12, 88, x14)

inst_28:
// rs1==x10, rs2==x22, rd==x27, rs2_w1_val == -1025, rs1_w1_val == -2097153, rs2_w0_val == -8388609, rs1_w0_val == -16385
// opcode: radd32 ; op1:x10; op2:x22; dest:x27; op1val:0xffdfffffffffbfff;  op2val:0xfffffbffff7fffff
TEST_RR_OP(radd32, x27, x10, x22, 0x0000000000000000, 0xffdfffffffffbfff, 0xfffffbffff7fffff, x12, 96, x14)

inst_29:
// rs1==x5, rs2==x11, rd==x7, rs2_w1_val == -257, rs1_w1_val == -1048577
// opcode: radd32 ; op1:x5; op2:x11; dest:x7; op1val:0xffefffff80000000;  op2val:0xfffffeff00800000
TEST_RR_OP(radd32, x7, x5, x11, 0x0000000000000000, 0xffefffff80000000, 0xfffffeff00800000, x12, 104, x14)

inst_30:
// rs1==x16, rs2==x13, rd==x31, rs2_w1_val == -129, rs1_w0_val == 0, rs1_w1_val == -513
// opcode: radd32 ; op1:x16; op2:x13; dest:x31; op1val:0xfffffdff00000000;  op2val:0xffffff7ffffff7ff
TEST_RR_OP(radd32, x31, x16, x13, 0x0000000000000000, 0xfffffdff00000000, 0xffffff7ffffff7ff, x12, 112, x14)

inst_31:
// rs1==x30, rs2==x18, rd==x3, rs2_w1_val == -65, rs2_w0_val == 16384
// opcode: radd32 ; op1:x30; op2:x18; dest:x3; op1val:0x2000000ffffffbf;  op2val:0xffffffbf00004000
TEST_RR_OP(radd32, x3, x30, x18, 0x0000000000000000, 0x2000000ffffffbf, 0xffffffbf00004000, x12, 120, x14)

inst_32:
// rs2_w1_val == -33, rs1_w0_val == 1431655765, rs2_w0_val == 536870912
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200055555555;  op2val:0xffffffdf20000000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x00200055555555, 0xffffffdf20000000, x12, 128, x14)

inst_33:
// rs2_w1_val == -17, rs1_w1_val == 4194304
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffffffa;  op2val:0xffffffef40000000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x400000fffffffa, 0xffffffef40000000, x12, 136, x1)

inst_34:
// rs2_w1_val == -9, rs2_w0_val == 1431655765
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffff00000800;  op2val:0xfffffff755555555
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x3fffffff00000800, 0xfffffff755555555, x12, 144, x1)

inst_35:
// rs2_w1_val == -5, rs1_w1_val == 134217728, rs1_w0_val == -9
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000fffffff7;  op2val:0xfffffffb40000000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x8000000fffffff7, 0xfffffffb40000000, x12, 152, x1)

inst_36:
// rs2_w1_val == -3, rs2_w0_val == -67108865
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000900000000;  op2val:0xfffffffdfbffffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x00000900000000, 0xfffffffdfbffffff, x12, 160, x1)

inst_37:
// rs2_w1_val == -2, rs1_w1_val == 1024, rs2_w0_val == 2048
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400c0000000;  op2val:0xfffffffe00000800
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x000400c0000000, 0xfffffffe00000800, x12, 168, x1)

inst_38:
// rs2_w1_val == -2147483648, rs1_w0_val == -2097153
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffdfffff;  op2val:0x8000000000010000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xdfffffffffdfffff, 0x8000000000010000, x12, 176, x1)

inst_39:
// rs2_w1_val == 1073741824, rs1_w0_val == -131073, rs2_w0_val == 524288
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000006fffdffff;  op2val:0x4000000000080000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x000006fffdffff, 0x4000000000080000, x12, 184, x1)

inst_40:
// rs2_w1_val == 536870912, rs1_w1_val == 16, rs2_w0_val == -16385, rs1_w0_val == 1024
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000400;  op2val:0x20000000ffffbfff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x00001000000400, 0x20000000ffffbfff, x12, 192, x1)

inst_41:
// rs2_w1_val == 268435456, rs2_w0_val == -33554433, rs1_w0_val == -8193, rs1_w1_val == -32769
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffffdfff;  op2val:0x10000000fdffffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffff7fffffffdfff, 0x10000000fdffffff, x12, 200, x1)

inst_42:
// rs2_w1_val == 134217728, rs1_w0_val == 1, rs2_w0_val == 1048576
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000001;  op2val:0x800000000100000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000001, 0x800000000100000, x12, 208, x1)

inst_43:
// rs2_w1_val == 67108864, rs2_w0_val == -32769, rs1_w1_val == 16777216
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000001;  op2val:0x4000000ffff7fff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x100000000000001, 0x4000000ffff7fff, x12, 216, x1)

inst_44:
// rs2_w1_val == 33554432, rs2_w0_val == 4194304
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000007;  op2val:0x200000000400000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x1000000000000007, 0x200000000400000, x12, 224, x1)

inst_45:
// rs2_w1_val == 16777216, rs2_w0_val == -2147483648
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000ffbfffff;  op2val:0x100000080000000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x10000000ffbfffff, 0x100000080000000, x12, 232, x1)

inst_46:
// rs2_w1_val == 8388608, rs1_w0_val == -8388609, rs2_w0_val == 268435456, rs1_w1_val == -8388609
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffff7fffff;  op2val:0x80000010000000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xff7fffffff7fffff, 0x80000010000000, x12, 240, x1)

inst_47:
// rs2_w1_val == 4194304, rs1_w0_val == -67108865, rs2_w0_val == 512, rs1_w1_val == 8388608
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000fbffffff;  op2val:0x40000000000200
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x800000fbffffff, 0x40000000000200, x12, 248, x1)

inst_48:
// rs2_w1_val == 2097152, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00000001;  op2val:0x20000000010000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00000001, 0x20000000010000, x12, 256, x1)

inst_49:
// rs2_w1_val == 1048576, rs1_w0_val == -33554433
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x008000fdffffff;  op2val:0x10000000000009
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x008000fdffffff, 0x10000000000009, x12, 264, x1)

inst_50:
// rs2_w1_val == 524288, rs1_w0_val == -134217729
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004f7ffffff;  op2val:0x080000fbffffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x000004f7ffffff, 0x080000fbffffff, x12, 272, x1)

inst_51:
// rs1_w0_val == 33554432, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff602000000;  op2val:0xffffff7fffffefff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffffff602000000, 0xffffff7fffffefff, x12, 280, x1)

inst_52:
// rs1_w0_val == 8388608, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600800000;  op2val:0x20000000fffffff6
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x00000600800000, 0x20000000fffffff6, x12, 288, x1)

inst_53:
// rs1_w0_val == 4194304, rs2_w0_val == -5
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000400000;  op2val:0x200000fffffffb
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x00080000400000, 0x200000fffffffb, x12, 296, x1)

inst_54:
// rs1_w0_val == 2097152, rs1_w1_val == 1048576
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000200000;  op2val:0xffdfffff00000005
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x10000000200000, 0xffdfffff00000005, x12, 304, x1)

inst_55:
// rs1_w0_val == 262144, rs2_w0_val == 262144
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00004000040000;  op2val:0x00000400040000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x00004000040000, 0x00000400040000, x12, 312, x1)

inst_56:
// rs1_w0_val == 65536, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff900010000;  op2val:0xffffff7ffffffff9
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffffff900010000, 0xffffff7ffffffff9, x12, 320, x1)

inst_57:
// rs1_w0_val == 32768, rs1_w1_val == -65, rs2_w0_val == -1048577
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf00008000;  op2val:0xfffffbffffefffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffffffbf00008000, 0xfffffbffffefffff, x12, 328, x1)

inst_58:
// rs1_w0_val == 8192, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000002000;  op2val:0xffbfffffaaaaaaaa
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x10000000002000, 0xffbfffffaaaaaaaa, x12, 336, x1)

inst_59:
// rs1_w0_val == 512, rs1_w1_val == 65536
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000200;  op2val:0xfffffffafbffffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x01000000000200, 0xfffffffafbffffff, x12, 344, x1)

inst_60:
// rs1_w0_val == 128, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000080;  op2val:0xfffffffa00200000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000080, 0xfffffffa00200000, x12, 352, x1)

inst_61:
// rs1_w0_val == 32, rs2_w0_val == 1024, rs2_w1_val == 4096
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000020;  op2val:0x00100000000400
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000020, 0x00100000000400, x12, 360, x1)

inst_62:
// rs1_w0_val == 16, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff00000010;  op2val:0xfffffeff00000200
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000010, 0xfffffeff00000200, x12, 368, x1)

inst_63:
// rs1_w0_val == 8, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000008;  op2val:0x80000007fffffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x100000000000008, 0x80000007fffffff, x12, 376, x1)

inst_64:
// rs1_w0_val == 4, rs2_w0_val == 8192
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000004;  op2val:0x00000500002000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x00000600000004, 0x00000500002000, x12, 384, x1)

inst_65:
// rs1_w0_val == 2, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000300000002;  op2val:0x10000000dfffffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x00000300000002, 0x10000000dfffffff, x12, 392, x1)

inst_66:
// rs1_w0_val == -1, rs2_w0_val == 33554432, rs1_w1_val == -2049
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffffff;  op2val:0xefffffff02000000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffffff, 0xefffffff02000000, x12, 400, x1)

inst_67:
// rs2_w1_val == 262144, rs1_w0_val == -1073741825
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6bfffffff;  op2val:0x040000ffffefff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffffff6bfffffff, 0x040000ffffefff, x12, 408, x1)

inst_68:
// rs2_w1_val == 131072, rs1_w1_val == -3
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00400000;  op2val:0x02000000010000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00400000, 0x02000000010000, x12, 416, x1)

inst_69:
// rs2_w1_val == 65536, rs1_w0_val == -2049
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7ffffffff7ff;  op2val:0x010000fffffff6
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffff7ff, 0x010000fffffff6, x12, 424, x1)

inst_70:
// rs2_w1_val == 16384, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000400;  op2val:0x00400000000001
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x01000000000400, 0x00400000000001, x12, 432, x1)

inst_71:
// rs2_w1_val == 8192, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00400000;  op2val:0x00200002000000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00400000, 0x00200002000000, x12, 440, x1)

inst_72:
// rs2_w1_val == 2048, rs2_w0_val == 67108864, rs1_w1_val == -129
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fc0000000;  op2val:0x00080004000000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffffff7fc0000000, 0x00080004000000, x12, 448, x1)

inst_73:
// rs2_w1_val == 1024, rs1_w1_val == -134217729
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffdffff;  op2val:0x000400fff7ffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffdffff, 0x000400fff7ffff, x12, 456, x1)

inst_74:
// rs2_w1_val == 512, rs1_w1_val == -2147483648, rs2_w0_val == 8
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffffff9;  op2val:0x00020000000008
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x80000000fffffff9, 0x00020000000008, x12, 464, x1)

inst_75:
// rs2_w1_val == 256, rs1_w1_val == -1025
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffffff7ff;  op2val:0x00010000000006
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffff7ff, 0x00010000000006, x12, 472, x1)

inst_76:
// rs2_w1_val == 128, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000fffffff8;  op2val:0x00008000000006
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x1000000fffffff8, 0x00008000000006, x12, 480, x1)

inst_77:
// rs2_w1_val == 64, rs2_w0_val == 256
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000006;  op2val:0x00004000000100
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000006, 0x00004000000100, x12, 488, x1)

inst_78:
// rs2_w1_val == 32, rs1_w0_val == -257
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffffeff;  op2val:0x00002080000000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x80000000fffffeff, 0x00002080000000, x12, 496, x1)

inst_79:
// rs2_w1_val == 16, rs2_w0_val == -513, rs1_w1_val == 2097152
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000003fffffff;  op2val:0x000010fffffdff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x2000003fffffff, 0x000010fffffdff, x12, 504, x1)

inst_80:
// rs2_w1_val == 8, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00000007;  op2val:0x00000820000000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfeffffff00000007, 0x00000820000000, x12, 512, x1)

inst_81:
// rs2_w1_val == 2, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00200000;  op2val:0x000002feffffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00200000, 0x000002feffffff, x12, 520, x1)

inst_82:
// rs2_w1_val == 1, rs2_w0_val == -8193
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500004000;  op2val:0x000001ffffdfff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x5555555500004000, 0x000001ffffdfff, x12, 528, x1)

inst_83:
// rs2_w1_val == 0, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00000005;  op2val:0x000000fbffffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00000005, 0x000000fbffffff, x12, 536, x1)

inst_84:
// rs2_w1_val == -1, rs1_w1_val == 1073741824, rs2_w0_val == -3
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000ffffbfff;  op2val:0xfffffffffffffffd
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x40000000ffffbfff, 0xfffffffffffffffd, x12, 544, x1)

inst_85:
// rs2_w0_val == -134217729, rs1_w0_val == -5, rs1_w1_val == -17
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffffffb;  op2val:0xfffdfffff7ffffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffffffeffffffffb, 0xfffdfffff7ffffff, x12, 552, x1)

inst_86:
// rs2_w0_val == -4194305, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00000006;  op2val:0xfffffffcffbfffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000006, 0xfffffffcffbfffff, x12, 560, x1)

inst_87:
// rs2_w0_val == 131072, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fffffff9;  op2val:0xfff7ffff00020000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffffff6fffffff9, 0xfff7ffff00020000, x12, 568, x1)

inst_88:
// rs2_w0_val == 32768, rs1_w1_val == -1, rs1_w0_val == -536870913
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffdfffffff;  op2val:0xc000000000008000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffffffffdfffffff, 0xc000000000008000, x12, 576, x1)

inst_89:
// rs2_w0_val == 4096, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7fffffffffb;  op2val:0x100000000001000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffff7fffffffffb, 0x100000000001000, x12, 584, x1)

inst_90:
// rs2_w0_val == 64, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff6fffeffff;  op2val:0x00000200000040
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffffff6fffeffff, 0x00000200000040, x12, 592, x1)

inst_91:
// rs2_w0_val == 32, rs1_w1_val == -65537
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00000200;  op2val:0xfffffbff00000020
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00000200, 0xfffffbff00000020, x12, 600, x1)

inst_92:
// rs2_w0_val == 16, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00040000;  op2val:0x00004000000010
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00040000, 0x00004000000010, x12, 608, x1)

inst_93:
// rs2_w0_val == 4, rs1_w1_val == 131072
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x020000bfffffff;  op2val:0xdfffffff00000004
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x020000bfffffff, 0xdfffffff00000004, x12, 616, x1)

inst_94:
// rs2_w0_val == 0, rs1_w1_val == -9
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700040000;  op2val:0xffffdfff00000000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffffff700040000, 0xffffdfff00000000, x12, 624, x1)

inst_95:
// rs1_w0_val == -2, rs2_w0_val == -257
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffffffe;  op2val:0x020000fffffeff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x080000fffffffe, 0x020000fffffeff, x12, 632, x1)

inst_96:
// rs2_w0_val == -1, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x00200004000000;  op2val:0xc0000000ffffffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x00200004000000, 0xc0000000ffffffff, x12, 640, x1)

inst_97:
// rs1_w1_val == -1431655766, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa00001000;  op2val:0x10000000000020
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00001000, 0x10000000000020, x12, 648, x1)

inst_98:
// rs1_w1_val == 2147483647, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000005;  op2val:0xffffbfff00000006
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000005, 0xffffbfff00000006, x12, 656, x1)

inst_99:
// rs1_w1_val == -268435457, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffffdfff;  op2val:0x3fffffff00040000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xefffffffffffdfff, 0x3fffffff00040000, x12, 664, x1)

inst_100:
// rs1_w1_val == -33554433, rs2_w0_val == 134217728
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfffffffffffeff;  op2val:0x8000000008000000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfdfffffffffffeff, 0x8000000008000000, x12, 672, x1)

inst_101:
// rs1_w1_val == -4194305, rs1_w0_val == -33
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffffffdf;  op2val:0x020000ffffefff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffbfffffffffffdf, 0x020000ffffefff, x12, 680, x1)

inst_102:
// rs1_w1_val == -524289, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffffff9;  op2val:0xfffeffff00020000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffffff9, 0xfffeffff00020000, x12, 688, x1)

inst_103:
// rs1_w1_val == -262145, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffdfff;  op2val:0xffbfffffffffefff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffdfff, 0xffbfffffffffefff, x12, 696, x1)

inst_104:
// rs1_w1_val == -131073, rs1_w0_val == -32769
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffff7fff;  op2val:0xffffdffffffffff6
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffdffffffff7fff, 0xffffdffffffffff6, x12, 704, x1)

inst_105:
// rs1_w1_val == -257, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff00000008;  op2val:0xfffffdff00000008
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffffeff00000008, 0xfffffdff00000008, x12, 712, x1)

inst_106:
// rs1_w1_val == -33, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000200;  op2val:0x00010000040000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000200, 0x00010000040000, x12, 720, x1)

inst_107:
// rs1_w1_val == 536870912, rs1_w0_val == 1073741824
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000040000000;  op2val:0x00000000080000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x2000000040000000, 0x00000000080000, x12, 728, x1)

inst_108:
// rs1_w1_val == 262144, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000040000;  op2val:0x00000200008000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x04000000040000, 0x00000200008000, x12, 736, x1)

inst_109:
// rs1_w1_val == 4096, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000ffffbfff;  op2val:0xfffffffd00000100
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x001000ffffbfff, 0xfffffffd00000100, x12, 744, x1)

inst_110:
// rs1_w1_val == 512, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200ffdfffff;  op2val:0xfffeffff00000006
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x000200ffdfffff, 0xfffeffff00000006, x12, 752, x1)

inst_111:
// rs1_w1_val == 8, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffffffc;  op2val:0xff7fffffbfffffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x000008fffffffc, 0xff7fffffbfffffff, x12, 760, x1)

inst_112:
// rs1_w1_val == 2, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000002ffdfffff;  op2val:0x2000003fffffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x000002ffdfffff, 0x2000003fffffff, x12, 768, x1)

inst_113:
// rs1_w1_val == 1, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffffffc;  op2val:0xffff7fffdfffffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x000001fffffffc, 0xffff7fffdfffffff, x12, 776, x1)

inst_114:
// rs1_w1_val == 0, rs1_w0_val == -17
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000000ffffffef;  op2val:0xffbfffff00000005
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x000000ffffffef, 0xffbfffff00000005, x12, 784, x1)

inst_115:
// rs1_w0_val == -1431655766, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffaaaaaaaa;  op2val:0x002000dfffffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffffdfffaaaaaaaa, 0x002000dfffffff, x12, 792, x1)

inst_116:
// rs1_w0_val == 2147483647, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa7fffffff;  op2val:0xfffffffb00000800
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa7fffffff, 0xfffffffb00000800, x12, 800, x1)

inst_117:
// rs2_w0_val == -2097153, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000ffbfffff;  op2val:0x020000ffdfffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x400000ffbfffff, 0x020000ffdfffff, x12, 808, x1)

inst_118:
// rs2_w0_val == -262145, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff8fffeffff;  op2val:0xffffff7ffffbffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffffff8fffeffff, 0xffffff7ffffbffff, x12, 816, x1)

inst_119:
// rs2_w0_val == -131073, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00008000;  op2val:0x4000000fffdffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00008000, 0x4000000fffdffff, x12, 824, x1)

inst_120:
// rs2_w0_val == -65537, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000000002000;  op2val:0xffffffeffffeffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x100000000002000, 0xffffffeffffeffff, x12, 832, x1)

inst_121:
// rs1_w0_val == -16777217, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000feffffff;  op2val:0xfffffeff00000800
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x1000000feffffff, 0xfffffeff00000800, x12, 840, x1)

inst_122:
// rs1_w0_val == -524289, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7ffff7ffff;  op2val:0x08000000040000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffffff7ffff7ffff, 0x08000000040000, x12, 848, x1)

inst_123:
// rs2_w0_val == -1025, rs1_w0_val == -262145
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffbffff;  op2val:0xfffbfffffffffbff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffffffeffffbffff, 0xfffbfffffffffbff, x12, 856, x1)

inst_124:
// rs2_w0_val == -129, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000ff7fffff;  op2val:0xaaaaaaaaffffff7f
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x080000ff7fffff, 0xaaaaaaaaffffff7f, x12, 864, x1)

inst_125:
// rs2_w0_val == -65, rs1_w0_val == -3
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffffffffffd;  op2val:0xfff7ffffffffffbf
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xbffffffffffffffd, 0xfff7ffffffffffbf, x12, 872, x1)

inst_126:
// rs2_w0_val == -33, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffc0000000;  op2val:0x200000ffffffdf
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffffffffc0000000, 0x200000ffffffdf, x12, 880, x1)

inst_127:
// rs2_w0_val == -17, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7fffbffff;  op2val:0x000010ffffffef
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffffff7fffbffff, 0x000010ffffffef, x12, 888, x1)

inst_128:
// rs1_w0_val == -1025, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x040000fffeffff
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x040000fffeffff, x12, 896, x1)

inst_129:
// rs1_w0_val == -513, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffdff;  op2val:0xbfffffffffffff7f
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x4000000fffffdff, 0xbfffffffffffff7f, x12, 904, x1)

inst_130:
// rs2_w0_val == -2, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000ffffefff;  op2val:0xfffffffafffffffe
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x100000ffffefff, 0xfffffffafffffffe, x12, 912, x1)

inst_131:
// rs2_w0_val == 16777216, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00800000;  op2val:0xffffdfff01000000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xffbfffff00800000, 0xffffdfff01000000, x12, 920, x1)

inst_132:
// rs1_w0_val == -129, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffff7f;  op2val:0xfffdffff00400000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfbffffffffffff7f, 0xfffdffff00400000, x12, 928, x1)

inst_133:
// rs1_w0_val == 268435456, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000010000000;  op2val:0x4000000000040000
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x10000010000000, 0x4000000000040000, x12, 936, x1)

inst_134:
// rs2_w0_val == -9, 
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000c0000000;  op2val:0xffeffffffffffff7
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x080000c0000000, 0xffeffffffffffff7, x12, 944, x1)

inst_135:
// rs1_w1_val < 0 and rs2_w1_val < 0, rs1_w0_val == 16777216, rs1_w0_val > 0 and rs2_w0_val > 0, rs2_w0_val == 1, rs1_w1_val == -5, rs2_w1_val == -8388609
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb01000000;  op2val:0xff7fffff00000001
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0xfffffffb01000000, 0xff7fffff00000001, x12, 952, x1)

inst_136:
// rs1_w1_val > 0 and rs2_w1_val < 0, rs2_w0_val == 2, rs1_w1_val == 268435456, rs1_w0_val == 16384, rs2_w1_val == -513
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000004000;  op2val:0xfffffdff00000002
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x1000000000004000, 0xfffffdff00000002, x12, 960, x1)

inst_137:
// rs2_w1_val == -131073, rs1_w0_val == -65, rs1_w1_val == 256
// opcode: radd32 ; op1:x30; op2:x29; dest:x31; op1val:0x000100ffffffbf;  op2val:0xfffdffff00000009
TEST_RR_OP(radd32, x31, x30, x29, 0x0000000000000000, 0x000100ffffffbf, 0xfffdffff00000009, x12, 968, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x12_0:
    .fill 122*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
