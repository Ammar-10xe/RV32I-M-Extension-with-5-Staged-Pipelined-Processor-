
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kdmbt16 instruction of the RISC-V RV64PZicsr extension for the kdmbt16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kdmbt16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x11, rs2==x21, rd==x11, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h1_val == -257, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h1_val == 21845, rs1_h0_val != rs2_h0_val, rs1_h2_val == -5, rs1_h0_val < 0 and rs2_h0_val > 0, rs1_h3_val == -17, rs2_h2_val == 4, rs2_h0_val == 128
// opcode: kdmbt16 ; op1:x11; op2:x21; dest:x11; op1val:0xffeffffb55558000;  op2val:0xfff80004feff0080
TEST_PKRR_OP(kdmbt16, x11, x11, x21, 0x0000000000000000, 0xffeffffb55558000, 0xfff80004feff0080, x11, x2, 0, x1)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x4, rs2==x5, rd==x3, rs1_h3_val == rs2_h3_val, rs1_h1_val == 16384, rs2_h0_val == -8193, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 32767, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h2_val == 8
// opcode: kdmbt16 ; op1:x4; op2:x5; dest:x3; op1val:0xc0007fff4000c000;  op2val:0xc0000008fffcdfff
TEST_PKRR_OP(kdmbt16, x3, x4, x5, 0x0000000000000000, 0xc0007fff4000c000, 0xc0000008fffcdfff, x4, x2, 16, x1)

inst_2:
// rs1 == rs2 != rd, rs1==x8, rs2==x8, rd==x5, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h3_val == 2, rs2_h0_val == -9, rs2_h2_val == 2, rs1_h2_val == 21845
// opcode: kdmbt16 ; op1:x8; op2:x8; dest:x5; op1val:0xfff955550006c000;  op2val:0x020002c000fff7
TEST_PKRR_OP(kdmbt16, x5, x8, x8, 0x0000000000000000, 0xfff955550006c000, 0x020002c000fff7, x8, x2, 32, x1)

inst_3:
// rs1 == rs2 == rd, rs1==x29, rs2==x29, rd==x29, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 64, rs2_h2_val == -17, rs2_h3_val == -32768, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h0_val == 4, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: kdmbt16 ; op1:x29; op2:x29; dest:x29; op1val:0x403fff00070004;  op2val:0x8000ffeffeff0005
TEST_PKRR_OP(kdmbt16, x29, x29, x29, 0x0000000000000000, 0x403fff00070004, 0x8000ffeffeff0005, x29, x2, 48, x1)

inst_4:
// rs2 == rd != rs1, rs1==x15, rs2==x24, rd==x24, rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h0_val == 1, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val == 8, rs1_h3_val == 8192, rs2_h1_val == 2048, rs1_h1_val == -1025, rs2_h3_val == 32767, rs2_h2_val == -21846
// opcode: kdmbt16 ; op1:x15; op2:x24; dest:x24; op1val:0x20003ffffbff0008;  op2val:0x7fffaaaa08000001
TEST_PKRR_OP(kdmbt16, x24, x15, x24, 0x0000000000000000, 0x20003ffffbff0008, 0x7fffaaaa08000001, x15, x2, 64, x1)

inst_5:
// rs1==x14, rs2==x30, rd==x31, rs1_h2_val == rs2_h2_val, rs2_h0_val == 4, rs2_h2_val == -1025, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h0_val == 32, rs1_h1_val == 0, rs1_h2_val == -1025, rs1_h3_val == 16384, rs2_h1_val == 32
// opcode: kdmbt16 ; op1:x14; op2:x30; dest:x31; op1val:0x4000fbff00000020;  op2val:0x05fbff00200004
TEST_PKRR_OP(kdmbt16, x31, x14, x30, 0x0000000000000000, 0x4000fbff00000020, 0x05fbff00200004, x14, x2, 80, x1)

inst_6:
// rs1==x6, rs2==x10, rd==x20, rs1_h1_val == rs2_h1_val, rs2_h3_val == -65, rs2_h1_val == -129, rs2_h2_val == -9, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h2_val == -1, rs1_h1_val == -129
// opcode: kdmbt16 ; op1:x6; op2:x10; dest:x20; op1val:0x4000ffffff7ffffc;  op2val:0xffbffff7ff7f0007
TEST_PKRR_OP(kdmbt16, x20, x6, x10, 0x0000000000000000, 0x4000ffffff7ffffc, 0xffbffff7ff7f0007, x6, x2, 96, x1)

inst_7:
// rs1==x7, rs2==x18, rd==x25, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val == 8192, rs2_h0_val == 4096, rs1_h3_val == 0, rs2_h1_val == 8
// opcode: kdmbt16 ; op1:x7; op2:x18; dest:x25; op1val:0x00fff855552000;  op2val:0x07fffa00081000
TEST_PKRR_OP(kdmbt16, x25, x7, x18, 0x0000000000000000, 0x00fff855552000, 0x07fffa00081000, x7, x2, 112, x1)

inst_8:
// rs1==x23, rs2==x26, rd==x7, rs1_h0_val == rs2_h0_val, rs1_h2_val == -8193, rs1_h3_val == 128, rs1_h1_val == -17, rs2_h1_val == -2049
// opcode: kdmbt16 ; op1:x23; op2:x26; dest:x7; op1val:0x80dfffffeffff9;  op2val:0xc0000004f7fffff9
TEST_PKRR_OP(kdmbt16, x7, x23, x26, 0x0000000000000000, 0x80dfffffeffff9, 0xc0000004f7fffff9, x23, x2, 128, x1)

inst_9:
// rs1==x12, rs2==x27, rd==x26, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h3_val == 256, rs2_h2_val == -2049, rs2_h0_val == -2049, rs1_h3_val == -9
// opcode: kdmbt16 ; op1:x12; op2:x27; dest:x26; op1val:0xfff700093fff0020;  op2val:0x100f7fffff9f7ff
TEST_PKRR_OP(kdmbt16, x26, x12, x27, 0x0000000000000000, 0xfff700093fff0020, 0x100f7fffff9f7ff, x12, x2, 144, x1)

inst_10:
// rs1==x17, rs2==x14, rd==x18, rs2_h3_val == -21846, rs2_h0_val == -21846, rs1_h1_val == 1024, rs1_h0_val == 4096, rs1_h2_val == -257, rs2_h2_val == 16
// opcode: kdmbt16 ; op1:x17; op2:x14; dest:x18; op1val:0xfffcfeff04001000;  op2val:0xaaaa0010ff7faaaa
TEST_PKRR_OP(kdmbt16, x18, x17, x14, 0x0000000000000000, 0xfffcfeff04001000, 0xaaaa0010ff7faaaa, x17, x2, 160, x1)

inst_11:
// rs1==x9, rs2==x28, rd==x4, rs2_h3_val == 21845, rs1_h3_val == 1, rs1_h2_val == -2049, rs2_h0_val == -257
// opcode: kdmbt16 ; op1:x9; op2:x28; dest:x4; op1val:0x01f7ff3fff0005;  op2val:0x555500070008feff
TEST_PKRR_OP(kdmbt16, x4, x9, x28, 0x0000000000000000, 0x01f7ff3fff0005, 0x555500070008feff, x9, x2, 176, x1)

inst_12:
// rs1==x13, rs2==x9, rd==x17, rs2_h3_val == -16385, rs1_h3_val == -1025, rs2_h1_val == 8192, rs2_h0_val == -32768
// opcode: kdmbt16 ; op1:x13; op2:x9; dest:x17; op1val:0xfbfffbfffff9c000;  op2val:0xbffffff720008000
TEST_PKRR_OP(kdmbt16, x17, x13, x9, 0x0000000000000000, 0xfbfffbfffff9c000, 0xbffffff720008000, x13, x2, 192, x1)

inst_13:
// rs1==x1, rs2==x3, rd==x0, rs2_h3_val == -8193, rs2_h1_val == -513, rs1_h0_val == -8193, rs1_h2_val == -129
// opcode: kdmbt16 ; op1:x1; op2:x3; dest:x0; op1val:0x80ff7ffffadfff;  op2val:0xdffffff6fdff0009
TEST_PKRR_OP(kdmbt16, x0, x1, x3, 0x0000000000000000, 0x80ff7ffffadfff, 0xdffffff6fdff0009, x1, x2, 208, x17)
RVTEST_SIGBASE(x11,signature_x11_0)

inst_14:
// rs1==x27, rs2==x12, rd==x8, rs2_h3_val == -4097, rs1_h2_val == 4096, rs2_h2_val == -129, rs1_h3_val == -21846, rs1_h1_val == -4097, rs2_h1_val == 4096, rs1_h0_val == -513
// opcode: kdmbt16 ; op1:x27; op2:x12; dest:x8; op1val:0xaaaa1000effffdff;  op2val:0xefffff7f1000c000
TEST_PKRR_OP(kdmbt16, x8, x27, x12, 0x0000000000000000, 0xaaaa1000effffdff, 0xefffff7f1000c000, x27, x11, 0, x17)

inst_15:
// rs1==x22, rs2==x20, rd==x14, rs2_h3_val == -2049, rs1_h0_val == -33, rs1_h2_val == 32, rs1_h1_val == 64, rs1_h3_val == -2049, rs2_h2_val == 2048, rs2_h0_val == 8192, rs2_h1_val == 128
// opcode: kdmbt16 ; op1:x22; op2:x20; dest:x14; op1val:0xf7ff00200040ffdf;  op2val:0xf7ff080000802000
TEST_PKRR_OP(kdmbt16, x14, x22, x20, 0x0000000000000000, 0xf7ff00200040ffdf, 0xf7ff080000802000, x22, x11, 16, x17)

inst_16:
// rs1==x20, rs2==x16, rd==x12, rs2_h3_val == -1025, rs1_h1_val == 256, rs2_h0_val == -33, rs2_h2_val == 4096, rs1_h2_val == 2048
// opcode: kdmbt16 ; op1:x20; op2:x16; dest:x12; op1val:0x40080001002000;  op2val:0xfbff1000fdffffdf
TEST_PKRR_OP(kdmbt16, x12, x20, x16, 0x0000000000000000, 0x40080001002000, 0xfbff1000fdffffdf, x20, x11, 32, x17)

inst_17:
// rs1==x21, rs2==x23, rd==x10, rs2_h3_val == -513, rs1_h3_val == -129, rs1_h2_val == 4
// opcode: kdmbt16 ; op1:x21; op2:x23; dest:x10; op1val:0xff7f000440000007;  op2val:0xfdff0006fff88000
TEST_PKRR_OP(kdmbt16, x10, x21, x23, 0x0000000000000000, 0xff7f000440000007, 0xfdff0006fff88000, x21, x11, 48, x17)

inst_18:
// rs1==x2, rs2==x7, rd==x15, rs2_h3_val == -257, rs1_h1_val == -32768, rs1_h0_val == 256, rs2_h0_val == 2048, rs2_h2_val == 512
// opcode: kdmbt16 ; op1:x2; op2:x7; dest:x15; op1val:0x09dfff80000100;  op2val:0xfeff0200fdff0800
TEST_PKRR_OP(kdmbt16, x15, x2, x7, 0x0000000000000000, 0x09dfff80000100, 0xfeff0200fdff0800, x2, x11, 64, x17)

inst_19:
// rs1==x5, rs2==x2, rd==x6, rs2_h3_val == -129, rs2_h1_val == 2, rs2_h2_val == -257, rs2_h0_val == 32767, rs1_h3_val == 4, rs1_h2_val == -3
// opcode: kdmbt16 ; op1:x5; op2:x2; dest:x6; op1val:0x04fffdfffc0006;  op2val:0xff7ffeff00027fff
TEST_PKRR_OP(kdmbt16, x6, x5, x2, 0x0000000000000000, 0x04fffdfffc0006, 0xff7ffeff00027fff, x5, x11, 80, x17)

inst_20:
// rs1==x3, rs2==x25, rd==x21, rs2_h3_val == -33, rs1_h0_val == 2, rs1_h3_val == 4096, rs1_h1_val == 2048
// opcode: kdmbt16 ; op1:x3; op2:x25; dest:x21; op1val:0x1000fff908000002;  op2val:0xffdf0009c0000004
TEST_PKRR_OP(kdmbt16, x21, x3, x25, 0x0000000000000000, 0x1000fff908000002, 0xffdf0009c0000004, x3, x11, 96, x17)

inst_21:
// rs1==x19, rs2==x1, rd==x9, rs2_h3_val == -17, rs2_h1_val == -65, rs1_h3_val == 2048
// opcode: kdmbt16 ; op1:x19; op2:x1; dest:x9; op1val:0x800000708000002;  op2val:0xffef0200ffbf0006
TEST_PKRR_OP(kdmbt16, x9, x19, x1, 0x0000000000000000, 0x800000708000002, 0xffef0200ffbf0006, x19, x11, 112, x17)

inst_22:
// rs1==x24, rs2==x31, rd==x19, rs2_h3_val == -9, rs2_h2_val == -16385
// opcode: kdmbt16 ; op1:x24; op2:x31; dest:x19; op1val:0x050007fbffffdf;  op2val:0xfff7bffffff8fffc
TEST_PKRR_OP(kdmbt16, x19, x24, x31, 0x0000000000000000, 0x050007fbffffdf, 0xfff7bffffff8fffc, x24, x11, 128, x17)

inst_23:
// rs1==x26, rs2==x13, rd==x2, rs2_h3_val == -5, rs2_h2_val == -8193, rs1_h2_val == -33, rs1_h3_val == -4097, rs1_h0_val == -1
// opcode: kdmbt16 ; op1:x26; op2:x13; dest:x2; op1val:0xefffffdf8000ffff;  op2val:0xfffbdfffffbf0006
TEST_PKRR_OP(kdmbt16, x2, x26, x13, 0x0000000000000000, 0xefffffdf8000ffff, 0xfffbdfffffbf0006, x26, x11, 144, x17)

inst_24:
// rs1==x30, rs2==x4, rd==x16, rs2_h3_val == -3, rs1_h3_val == -257, rs1_h1_val == 8192, rs1_h0_val == 32767
// opcode: kdmbt16 ; op1:x30; op2:x4; dest:x16; op1val:0xfefffffb20007fff;  op2val:0xfffd00060002c000
TEST_PKRR_OP(kdmbt16, x16, x30, x4, 0x0000000000000000, 0xfefffffb20007fff, 0xfffd00060002c000, x30, x11, 160, x17)

inst_25:
// rs1==x10, rs2==x22, rd==x27, rs2_h3_val == -2, rs1_h3_val == 512, rs2_h1_val == 0, rs1_h2_val == 1024
// opcode: kdmbt16 ; op1:x10; op2:x22; dest:x27; op1val:0x2000400fffa0008;  op2val:0xfffefff70000f7ff
TEST_PKRR_OP(kdmbt16, x27, x10, x22, 0x0000000000000000, 0x2000400fffa0008, 0xfffefff70000f7ff, x10, x11, 176, x3)

inst_26:
// rs1==x28, rs2==x6, rd==x23, rs2_h3_val == 16384, rs1_h1_val == -33
// opcode: kdmbt16 ; op1:x28; op2:x6; dest:x23; op1val:0xfff7fff6ffdfffdf;  op2val:0x4000c0000003f7ff
TEST_PKRR_OP(kdmbt16, x23, x28, x6, 0x0000000000000000, 0xfff7fff6ffdfffdf, 0x4000c0000003f7ff, x28, x11, 192, x3)
RVTEST_SIGBASE(x2,signature_x2_2)

inst_27:
// rs1==x31, rs2==x0, rd==x28, rs2_h3_val == 8192, rs1_h1_val == -65
// opcode: kdmbt16 ; op1:x31; op2:x0; dest:x28; op1val:0x3fffdfffffbf0003;  op2val:0x2000c00010000001
TEST_PKRR_OP(kdmbt16, x28, x31, x0, 0x0000000000000000, 0x3fffdfffffbf0003, 0x2000c00010000001, x31, x2, 0, x3)

inst_28:
// rs1==x18, rs2==x17, rd==x1, rs2_h3_val == 4096, rs2_h1_val == 32767, rs1_h2_val == 8, rs2_h0_val == -1025, rs1_h3_val == -8193, rs1_h0_val == 512
// opcode: kdmbt16 ; op1:x18; op2:x17; dest:x1; op1val:0xdfff000800070200;  op2val:0x1000c0007ffffbff
TEST_PKRR_OP(kdmbt16, x1, x18, x17, 0x0000000000000000, 0xdfff000800070200, 0x1000c0007ffffbff, x18, x2, 16, x3)

inst_29:
// rs1==x0, rs2==x15, rd==x22, rs2_h3_val == 2048, rs2_h1_val == -8193, rs2_h2_val == -2
// opcode: kdmbt16 ; op1:x0; op2:x15; dest:x22; op1val:0x20008000100ffdf;  op2val:0x800fffedfff2000
TEST_PKRR_OP(kdmbt16, x22, x0, x15, 0x0000000000000000, 0x20008000100ffdf, 0x800fffedfff2000, x0, x2, 32, x3)

inst_30:
// rs1==x25, rs2==x11, rd==x13, rs2_h3_val == 1024, rs1_h3_val == 21845, rs2_h1_val == -33, rs1_h2_val == 128
// opcode: kdmbt16 ; op1:x25; op2:x11; dest:x13; op1val:0x55550080fff9fffc;  op2val:0x400aaaaffdf0004
TEST_PKRR_OP(kdmbt16, x13, x25, x11, 0x0000000000000000, 0x55550080fff9fffc, 0x400aaaaffdf0004, x25, x2, 48, x3)

inst_31:
// rs1==x16, rs2==x19, rd==x30, rs2_h3_val == 512, rs2_h2_val == -65, rs1_h0_val == -1025, rs2_h0_val == 16384
// opcode: kdmbt16 ; op1:x16; op2:x19; dest:x30; op1val:0xefffffdf0005fbff;  op2val:0x200ffbf00004000
TEST_PKRR_OP(kdmbt16, x30, x16, x19, 0x0000000000000000, 0xefffffdf0005fbff, 0x200ffbf00004000, x16, x2, 64, x3)

inst_32:
// rs2_h3_val == 128, rs2_h0_val == -1, rs1_h1_val == 4
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800fff900040006;  op2val:0x80fff8fff6ffff
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x800fff900040006, 0x80fff8fff6ffff, x30, x2, 80, x3)

inst_33:
// rs2_h3_val == 64, rs1_h1_val == 1, rs1_h2_val == 1
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff700010001fffa;  op2val:0x40000900070005
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfff700010001fffa, 0x40000900070005, x30, x2, 96, x3)

inst_34:
// rs2_h3_val == 32, rs2_h2_val == 64, rs1_h2_val == 16384, rs1_h0_val == -129, rs1_h3_val == 8
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x084000fff6ff7f;  op2val:0x200040fff67fff
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x084000fff6ff7f, 0x200040fff67fff, x30, x2, 112, x3)

inst_35:
// rs2_h3_val == 16, rs2_h1_val == 512, rs1_h1_val == 32767
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fffd7fff0006;  op2val:0x10fff602000003
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x05fffd7fff0006, 0x10fff602000003, x30, x2, 128, x3)

inst_36:
// rs2_h3_val == 8, rs2_h2_val == -5
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8c00000050200;  op2val:0x08fffbfeff0001
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfff8c00000050200, 0x08fffbfeff0001, x30, x2, 144, x3)

inst_37:
// rs2_h3_val == 4, rs2_h0_val == 32, rs1_h3_val == 32, rs1_h1_val == 2
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000700020006;  op2val:0x04fbff00200020
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x20000700020006, 0x04fbff00200020, x30, x2, 160, x3)

inst_38:
// rs1_h1_val == -5, rs2_h1_val == 16, rs2_h0_val == -2, rs1_h0_val == -2
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fffffffbfffe;  op2val:0x04fffa0010fffe
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x00fffffffbfffe, 0x04fffa0010fffe, x30, x2, 176, x3)

inst_39:
// rs1_h1_val == -3, rs1_h3_val == -32768, rs1_h0_val == -257, rs2_h2_val == 32767
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000005fffdfeff;  op2val:0xfff77fff00200004
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x80000005fffdfeff, 0xfff77fff00200004, x30, x2, 192, x3)

inst_40:
// rs1_h1_val == -2, rs2_h1_val == 1, rs1_h0_val == -9
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefffc000fffefff7;  op2val:0x4000080000011000
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xefffc000fffefff7, 0x4000080000011000, x30, x2, 208, x3)

inst_41:
// rs1_h1_val == 4096, rs1_h2_val == 2, rs2_h2_val == 0, rs1_h0_val == 64
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x06000210000040;  op2val:0xaaaa00000080dfff
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x06000210000040, 0xaaaa00000080dfff, x30, x2, 224, x3)

inst_42:
// rs1_h1_val == 512, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff002002000100;  op2val:0x4000ff7fffdffff8
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xf7ff002002000100, 0x4000ff7fffdffff8, x30, x2, 240, x3)

inst_43:
// rs1_h1_val == 128, rs2_h3_val == -1, rs1_h0_val == -21846, rs2_h2_val == 21845
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffcfffd0080aaaa;  op2val:0xffff555508000009
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfffcfffd0080aaaa, 0xffff555508000009, x30, x2, 256, x3)

inst_44:
// rs1_h1_val == 32, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffc000600200100;  op2val:0xffdf000400090001
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfffc000600200100, 0xffdf000400090001, x30, x2, 272, x3)

inst_45:
// rs1_h1_val == 16, rs2_h1_val == -17
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x05000700102000;  op2val:0x40fffaffeffffc
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x05000700102000, 0x40fffaffeffffc, x30, x2, 288, x3)

inst_46:
// rs1_h1_val == 8, rs2_h1_val == 64
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x200c00000080004;  op2val:0xfffb55550040fff8
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x200c00000080004, 0xfffb55550040fff8, x30, x2, 304, x3)

inst_47:
// rs1_h1_val == -1, rs2_h2_val == -513, rs2_h0_val == 2
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fff9ffffc000;  op2val:0xfffefdff00060002
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x5555fff9ffffc000, 0xfffefdff00060002, x30, x2, 320, x3)

inst_48:
// rs1_h0_val == 21845, rs2_h1_val == 4, rs1_h1_val == -513, rs1_h2_val == -32768
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff98000fdff5555;  op2val:0xfff9fffa00040006
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfff98000fdff5555, 0xfff9fffa00040006, x30, x2, 336, x3)

inst_49:
// rs1_h0_val == -16385, rs1_h2_val == -4097
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffeffffff6bfff;  op2val:0x020800fffcfff8
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfbffeffffff6bfff, 0x020800fffcfff8, x30, x2, 352, x3)

inst_50:
// rs1_h0_val == -4097, rs2_h0_val == 64, rs1_h3_val == 32767
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffff84000efff;  op2val:0xfffffff800050040
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x7ffffff84000efff, 0xfffffff800050040, x30, x2, 368, x3)

inst_51:
// rs1_h0_val == -2049, rs1_h3_val == -3, rs2_h0_val == -4097, rs2_h2_val == -3
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffddfff2000f7ff;  op2val:0xfdfffffd0005efff
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfffddfff2000f7ff, 0xfdfffffd0005efff, x30, x2, 384, x3)

inst_52:
// rs1_h0_val == -65, rs1_h3_val == -33
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf5555ffbfffbf;  op2val:0xfffb0003fffa1000
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xffdf5555ffbfffbf, 0xfffb0003fffa1000, x30, x2, 400, x3)

inst_53:
// rs1_h0_val == -17, rs1_h1_val == -16385, rs2_h2_val == -32768
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f7fffbfffffef;  op2val:0xff7f800000080003
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xff7f7fffbfffffef, 0xff7f800000080003, x30, x2, 416, x3)

inst_54:
// rs1_h0_val == -5, rs2_h2_val == 16384
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000020c000fffb;  op2val:0xbfff4000fff6efff
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x10000020c000fffb, 0xbfff4000fff6efff, x30, x2, 432, x3)

inst_55:
// rs1_h0_val == -3, rs1_h2_val == 8192
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf2000ffdffffd;  op2val:0xeffffeff00062000
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xffdf2000ffdffffd, 0xeffffeff00062000, x30, x2, 448, x3)

inst_56:
// rs1_h0_val == 16384, rs2_h1_val == 1024, rs2_h2_val == -33
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000080020004000;  op2val:0xdfffffdf04000040
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x8000080020004000, 0xdfffffdf04000040, x30, x2, 464, x3)

inst_57:
// rs1_h0_val == 2048, rs2_h0_val == -17
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7feffffbf0800;  op2val:0x05ff7f0008ffef
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfff7feffffbf0800, 0x05ff7f0008ffef, x30, x2, 480, x3)

inst_58:
// rs1_h0_val == 1024, rs1_h2_val == 0
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff90000ffff0400;  op2val:0x7fff000400202000
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfff90000ffff0400, 0x7fff000400202000, x30, x2, 496, x3)

inst_59:
// rs1_h0_val == 128, rs2_h0_val == 21845, rs2_h2_val == 1
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffafbff0080;  op2val:0xffdf000102005555
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfefffffafbff0080, 0xffdf000102005555, x30, x2, 512, x3)

inst_60:
// rs1_h0_val == 16, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f4000efff0010;  op2val:0xff7ff7ff0003ffff
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xff7f4000efff0010, 0xff7ff7ff0003ffff, x30, x2, 528, x3)

inst_61:
// rs2_h1_val == -1, rs2_h2_val == 1024
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfdffffff97fff;  op2val:0xfffb0400ffffffef
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xffdfdffffff97fff, 0xfffb0400ffffffef, x30, x2, 544, x3)

inst_62:
// rs2_h0_val == -16385, rs2_h1_val == -2, rs1_h2_val == 256
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000100fff80020;  op2val:0xfffe1000fffebfff
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x2000100fff80020, 0xfffe1000fffebfff, x30, x2, 560, x3)

inst_63:
// rs2_h0_val == -513, rs1_h0_val == 1
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffcffff0001;  op2val:0x55557fff0005fdff
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfbfffffcffff0001, 0x55557fff0005fdff, x30, x2, 576, x3)

inst_64:
// rs2_h0_val == -129, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0020fffa3fff;  op2val:0xfffebffffdffff7f
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xdfff0020fffa3fff, 0xfffebffffdffff7f, x30, x2, 592, x3)

inst_65:
// rs2_h0_val == -65, rs2_h1_val == -32768, rs1_h3_val == -16385
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff00030004fff7;  op2val:0x4000fdff8000ffbf
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xbfff00030004fff7, 0x4000fdff8000ffbf, x30, x2, 608, x3)

inst_66:
// rs2_h0_val == -5, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0100fffe8000;  op2val:0xfefffdfffff9fffb
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfffa0100fffe8000, 0xfefffdfffff9fffb, x30, x2, 624, x3)

inst_67:
// rs2_h0_val == -3, rs2_h1_val == 16384
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x07ff7f0003fff9;  op2val:0x7fff3fff4000fffd
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x07ff7f0003fff9, 0x7fff3fff4000fffd, x30, x2, 640, x3)

inst_68:
// rs2_h0_val == 1024, rs2_h1_val == -1025, rs2_h2_val == 128
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff2000ffdf0020;  op2val:0xffef0080fbff0400
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xbfff2000ffdf0020, 0xffef0080fbff0400, x30, x2, 656, x3)

inst_69:
// rs2_h0_val == 512, rs1_h1_val == -257
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa2000feffbfff;  op2val:0xfbff0001fff80200
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xaaaa2000feffbfff, 0xfbff0001fff80200, x30, x2, 672, x3)

inst_70:
// rs2_h0_val == 256, rs2_h2_val == -1, rs1_h2_val == 64
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800000400002ff7f;  op2val:0xfff8ffff00100100
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x800000400002ff7f, 0xfff8ffff00100100, x30, x2, 688, x3)

inst_71:
// rs2_h0_val == 16, rs2_h1_val == -16385, rs1_h2_val == -2
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fffe00050003;  op2val:0xfeff0006bfff0010
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x00fffe00050003, 0xfeff0006bfff0010, x30, x2, 704, x3)

inst_72:
// rs2_h0_val == 8, rs2_h2_val == 8192
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x01c00000030020;  op2val:0x5555200000100008
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x01c00000030020, 0x5555200000100008, x30, x2, 720, x3)

inst_73:
// rs2_h0_val == 0, rs2_h1_val == -21846
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfbfffbff0200;  op2val:0x10fbffaaaa0000
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfffdfbfffbff0200, 0x10fbffaaaa0000, x30, x2, 736, x3)

inst_74:
// rs1_h3_val == -513, rs2_h2_val == 256
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffdfff00035555;  op2val:0xfff6010000094000
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfdffdfff00035555, 0xfff6010000094000, x30, x2, 752, x3)

inst_75:
// rs1_h3_val == -65, rs1_h2_val == -16385
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfbfff0200fffd;  op2val:0xaaaafffe8000c000
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xffbfbfff0200fffd, 0xaaaafffe8000c000, x30, x2, 768, x3)

inst_76:
// rs1_h3_val == 1024, rs2_h1_val == -9
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400fbfffffd0005;  op2val:0x200009fff7fff8
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x400fbfffffd0005, 0x200009fff7fff8, x30, x2, 784, x3)

inst_77:
// rs2_h2_val == -4097, rs2_h1_val == -4097
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fbfffbff0003;  op2val:0xaaaaefffefff1000
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x05fbfffbff0003, 0xaaaaefffefff1000, x30, x2, 800, x3)

inst_78:
// rs1_h3_val == 256, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10080000000fff9;  op2val:0xfffcffdffdfffffc
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x10080000000fff9, 0xfffcffdffdfffffc, x30, x2, 816, x3)

inst_79:
// rs1_h3_val == 16, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100100effffffc;  op2val:0x2000fff98000fff9
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x100100effffffc, 0x2000fff98000fff9, x30, x2, 832, x3)

inst_80:
// rs1_h3_val == 2, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffff8000dfff;  op2val:0xfffa0400ffffc000
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x02ffff8000dfff, 0xfffa0400ffffc000, x30, x2, 848, x3)

inst_81:
// rs1_h3_val == -1, rs2_h1_val == 256, rs2_h3_val == 0
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00400006;  op2val:0x0010000100fff7
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfffffbff00400006, 0x0010000100fff7, x30, x2, 864, x3)

inst_82:
// rs1_h2_val == -21846, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555aaaafffcfffd;  op2val:0xfffa00050000ffef
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x5555aaaafffcfffd, 0xfffa00050000ffef, x30, x2, 880, x3)

inst_83:
// rs1_h2_val == -513, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfdff7fff0008;  op2val:0x02ff7f08000008
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfffdfdff7fff0008, 0x02ff7f08000008, x30, x2, 896, x3)

inst_84:
// rs1_h2_val == -65, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100ffbf02005555;  op2val:0x20000050200bfff
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x100ffbf02005555, 0x20000050200bfff, x30, x2, 912, x3)

inst_85:
// rs2_h2_val == 32, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000053ffffffa;  op2val:0x02002020000100
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x2000053ffffffa, 0x02002020000100, x30, x2, 928, x3)

inst_86:
// rs2_h1_val == 21845, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe0080fffe;  op2val:0x07ffbf5555f7ff
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfffffffe0080fffe, 0x07ffbf5555f7ff, x30, x2, 944, x3)

inst_87:
// rs1_h2_val == 512, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000020020000006;  op2val:0xefff0040fff60003
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x4000020020000006, 0xefff0040fff60003, x30, x2, 960, x3)

inst_88:
// rs2_h3_val == 1, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x05bffffeff0010;  op2val:0x01fff600018000
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x05bffffeff0010, 0x01fff600018000, x30, x2, 976, x3)

inst_89:
// rs1_h3_val == -2, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe555500050006;  op2val:0x40020000000fdff
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfffe555500050006, 0x40020000000fdff, x30, x2, 992, x3)

inst_90:
// rs1_h2_val == 16, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9001000085555;  op2val:0x1080000001fdff
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfff9001000085555, 0x1080000001fdff, x30, x2, 1008, x3)

inst_91:
// rs2_h1_val == -5, rs1_h1_val == -2049
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x205555f7fffff7;  op2val:0x1000aaaafffbfffc
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x205555f7fffff7, 0x1000aaaafffbfffc, x30, x2, 1024, x3)

inst_92:
// rs2_h1_val == -3, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffffffffff90004;  op2val:0xbffffffffffdff7f
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x7ffffffffff90004, 0xbffffffffffdff7f, x30, x2, 1040, x3)

inst_93:
// rs1_h1_val == -21846, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fff6aaaa0003;  op2val:0xfeff0005fffefffc
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x80fff6aaaa0003, 0xfeff0005fffefffc, x30, x2, 1056, x3)

inst_94:
// rs1_h1_val == -8193, rs1_h2_val == -17
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6ffefdfff0008;  op2val:0x10000071000ffef
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfff6ffefdfff0008, 0x10000071000ffef, x30, x2, 1072, x3)

inst_95:
// rs1_h3_val == -5, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0800ffbf3fff;  op2val:0xff7faaaa00060002
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfffb0800ffbf3fff, 0xff7faaaa00060002, x30, x2, 1088, x3)

inst_96:
// rs1_h2_val == -9, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x02fff7ff7ffffe;  op2val:0xfffdaaaa3ffffffd
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x02fff7ff7ffffe, 0xfffdaaaa3ffffffd, x30, x2, 1104, x3)

inst_97:
// rs1_h0_val == 0, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffff7f0000;  op2val:0xaaaafffa20000008
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfffbffffff7f0000, 0xaaaafffa20000008, x30, x2, 1120, x3)

inst_98:
// rs1_h1_val == -9, 
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x060006fff7fffa;  op2val:0xfdff0007ffdffeff
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x060006fff7fffa, 0xfdff0007ffdffeff, x30, x2, 1136, x3)

inst_99:
// rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h3_val == 2, rs2_h0_val == -9, rs2_h2_val == 2, rs1_h2_val == 21845
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff955550006c000;  op2val:0x020002c000fff7
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0xfff955550006c000, 0x020002c000fff7, x30, x2, 1152, x3)

inst_100:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 64, rs2_h2_val == -17, rs2_h3_val == -32768, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h0_val == 4, rs1_h0_val > 0 and rs2_h0_val > 0
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x403fff00070004;  op2val:0x8000ffeffeff0005
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x403fff00070004, 0x8000ffeffeff0005, x30, x2, 1168, x3)

inst_101:
// rs2_h3_val == 2048, rs2_h1_val == -8193, rs2_h2_val == -2
// opcode: kdmbt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20008000100ffdf;  op2val:0x800fffedfff2000
TEST_PKRR_OP(kdmbt16, x31, x30, x29, 0x0000000000000000, 0x20008000100ffdf, 0x800fffedfff2000, x30, x2, 1184, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x11_0:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x2_2:
    .fill 150*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
