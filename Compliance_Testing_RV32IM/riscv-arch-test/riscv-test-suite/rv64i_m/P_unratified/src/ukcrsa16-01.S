
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukcrsa16 instruction of the RISC-V RV64PZicsr extension for the ukcrsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukcrsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x15, rs2==x5, rd==x15, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val == 65407, rs1_h3_val == 4096, rs2_h1_val == 49151, rs1_h1_val == 512, rs2_h0_val == 65407
// opcode: ukcrsa16 ; op1:x15; op2:x5; dest:x15; op1val:0x1000ff7f02000000;  op2val:0x060012bfffff7f
TEST_PKRR_OP(ukcrsa16, x15, x15, x5, 0x0000000000000000, 0x1000ff7f02000000, 0x060012bfffff7f, x15, x2, 0, x16)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x1, rs2==x10, rd==x25, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h2_val == 4096, rs1_h0_val == 8, rs1_h1_val == 65535, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 64511
// opcode: ukcrsa16 ; op1:x1; op2:x10; dest:x25; op1val:0x0b000cffff0008;  op2val:0x0b1000fbff0012
TEST_PKRR_OP(ukcrsa16, x25, x1, x10, 0x0000000000000000, 0x0b000cffff0008, 0x0b1000fbff0012, x1, x2, 16, x16)

inst_2:
// rs1 == rs2 != rd, rs1==x14, rs2==x14, rd==x26, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h2_val == 1, rs1_h0_val == 65471, rs2_h1_val == 43690, rs2_h0_val == 2, rs1_h1_val == 1024, rs1_h2_val == 1
// opcode: ukcrsa16 ; op1:x14; op2:x14; dest:x26; op1val:0x0d00010400ffbf;  op2val:0x070001aaaa0002
TEST_PKRR_OP(ukcrsa16, x26, x14, x14, 0x0000000000000000, 0x0d00010400ffbf, 0x070001aaaa0002, x14, x2, 32, x16)

inst_3:
// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h2_val == 57343, rs1_h0_val == 65519, rs2_h2_val == 63487, rs2_h0_val == 65534
// opcode: ukcrsa16 ; op1:x7; op2:x7; dest:x7; op1val:0x0cdfff0012ffef;  op2val:0x0bf7ff0012fffe
TEST_PKRR_OP(ukcrsa16, x7, x7, x7, 0x0000000000000000, 0x0cdfff0012ffef, 0x0bf7ff0012fffe, x7, x2, 48, x16)

inst_4:
// rs2 == rd != rs1, rs1==x24, rs2==x27, rd==x27, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h2_val == 64, rs1_h3_val == 65527, rs2_h1_val == 2048
// opcode: ukcrsa16 ; op1:x24; op2:x27; dest:x27; op1val:0xfff70012000e0011;  op2val:0x0b004008000011
TEST_PKRR_OP(ukcrsa16, x27, x24, x27, 0x0000000000000000, 0xfff70012000e0011, 0x0b004008000011, x24, x2, 64, x16)

inst_5:
// rs1==x4, rs2==x15, rd==x8, rs2_h3_val == 43690, rs1_h1_val == 32767, rs1_h2_val == 65533, rs2_h0_val == 65535, rs2_h1_val == 65279, rs1_h0_val == 2048
// opcode: ukcrsa16 ; op1:x4; op2:x15; dest:x8; op1val:0x0cfffd7fff0800;  op2val:0xaaaa000bfeffffff
TEST_PKRR_OP(ukcrsa16, x8, x4, x15, 0x0000000000000000, 0x0cfffd7fff0800, 0xaaaa000bfeffffff, x4, x2, 80, x16)

inst_6:
// rs1==x27, rs2==x21, rd==x13, rs2_h3_val == 21845, rs1_h0_val == 4, rs2_h2_val == 512, rs2_h1_val == 21845, rs2_h0_val == 4, rs1_h3_val == 4
// opcode: ukcrsa16 ; op1:x27; op2:x21; dest:x13; op1val:0x04000e02000004;  op2val:0x5555020055550004
TEST_PKRR_OP(ukcrsa16, x13, x27, x21, 0x0000000000000000, 0x04000e02000004, 0x5555020055550004, x27, x2, 96, x16)

inst_7:
// rs1==x23, rs2==x1, rd==x12, rs2_h3_val == 32767, rs2_h2_val == 4, rs2_h0_val == 64, rs2_h1_val == 1, rs1_h0_val == 4096, rs1_h2_val == 2
// opcode: ukcrsa16 ; op1:x23; op2:x1; dest:x12; op1val:0x0e000200091000;  op2val:0x7fff000400010040
TEST_PKRR_OP(ukcrsa16, x12, x23, x1, 0x0000000000000000, 0x0e000200091000, 0x7fff000400010040, x23, x2, 112, x16)

inst_8:
// rs1==x3, rs2==x23, rd==x21, rs2_h3_val == 49151, rs1_h2_val == 64511, rs1_h1_val == 63487, rs2_h2_val == 21845, rs1_h3_val == 512, rs1_h0_val == 1024, rs2_h1_val == 65471
// opcode: ukcrsa16 ; op1:x3; op2:x23; dest:x21; op1val:0x200fbfff7ff0400;  op2val:0xbfff5555ffbf0012
TEST_PKRR_OP(ukcrsa16, x21, x3, x23, 0x0000000000000000, 0x200fbfff7ff0400, 0xbfff5555ffbf0012, x3, x2, 128, x16)

inst_9:
// rs1==x26, rs2==x4, rd==x9, rs2_h3_val == 57343, rs2_h0_val == 49151, rs1_h0_val == 57343, rs1_h1_val == 128
// opcode: ukcrsa16 ; op1:x26; op2:x4; dest:x9; op1val:0x11ff7f0080dfff;  op2val:0xdfff00060005bfff
TEST_PKRR_OP(ukcrsa16, x9, x26, x4, 0x0000000000000000, 0x11ff7f0080dfff, 0xdfff00060005bfff, x26, x2, 144, x16)

inst_10:
// rs1==x22, rs2==x6, rd==x20, rs2_h3_val == 61439, rs1_h1_val == 4, rs1_h3_val == 65503, rs2_h2_val == 32, rs2_h1_val == 65407, rs1_h0_val == 512
// opcode: ukcrsa16 ; op1:x22; op2:x6; dest:x20; op1val:0xffdf000e00040200;  op2val:0xefff0020ff7fffff
TEST_PKRR_OP(ukcrsa16, x20, x22, x6, 0x0000000000000000, 0xffdf000e00040200, 0xefff0020ff7fffff, x22, x2, 160, x16)

inst_11:
// rs1==x0, rs2==x28, rd==x19, rs2_h3_val == 63487, rs1_h0_val == 21845, rs1_h2_val == 65531, rs2_h1_val == 16, rs2_h2_val == 0, rs1_h3_val == 32, rs1_h1_val == 2048
// opcode: ukcrsa16 ; op1:x0; op2:x28; dest:x19; op1val:0x20fffb08005555;  op2val:0xf7ff00000010000d
TEST_PKRR_OP(ukcrsa16, x19, x0, x28, 0x0000000000000000, 0x20fffb08005555, 0xf7ff00000010000d, x0, x2, 176, x16)

inst_12:
// rs1==x11, rs2==x19, rd==x17, rs2_h3_val == 64511, rs1_h2_val == 0, rs2_h2_val == 57343, rs1_h1_val == 43690, rs1_h3_val == 57343
// opcode: ukcrsa16 ; op1:x11; op2:x19; dest:x17; op1val:0xdfff0000aaaa0009;  op2val:0xfbffdfff00060012
TEST_PKRR_OP(ukcrsa16, x17, x11, x19, 0x0000000000000000, 0xdfff0000aaaa0009, 0xfbffdfff00060012, x11, x2, 192, x16)

inst_13:
// rs1==x13, rs2==x30, rd==x18, rs2_h3_val == 65023, rs1_h1_val == 65279, rs1_h2_val == 65527, rs1_h0_val == 1
// opcode: ukcrsa16 ; op1:x13; op2:x30; dest:x18; op1val:0x13fff7feff0001;  op2val:0xfdff000f000e0013
TEST_PKRR_OP(ukcrsa16, x18, x13, x30, 0x0000000000000000, 0x13fff7feff0001, 0xfdff000f000e0013, x13, x2, 208, x16)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_14:
// rs1==x8, rs2==x16, rd==x10, rs2_h3_val == 65279, rs2_h0_val == 65527, rs1_h3_val == 65407, rs2_h2_val == 128, rs1_h2_val == 4096, rs1_h1_val == 32768
// opcode: ukcrsa16 ; op1:x8; op2:x16; dest:x10; op1val:0xff7f100080000005;  op2val:0xfeff00800005fff7
TEST_PKRR_OP(ukcrsa16, x10, x8, x16, 0x0000000000000000, 0xff7f100080000005, 0xfeff00800005fff7, x8, x7, 0, x13)

inst_15:
// rs1==x28, rs2==x0, rd==x24, rs2_h3_val == 65407, rs1_h3_val == 32767, rs1_h1_val == 16384, rs2_h0_val == 256
// opcode: ukcrsa16 ; op1:x28; op2:x0; dest:x24; op1val:0x7fff000340000008;  op2val:0xff7f0003000c0100
TEST_PKRR_OP(ukcrsa16, x24, x28, x0, 0x0000000000000000, 0x7fff000340000008, 0xff7f0003000c0100, x28, x7, 16, x13)

inst_16:
// rs1==x6, rs2==x12, rd==x2, rs2_h3_val == 65471, rs1_h1_val == 2, rs1_h2_val == 16, rs2_h1_val == 4096
// opcode: ukcrsa16 ; op1:x6; op2:x12; dest:x2; op1val:0x11001000021000;  op2val:0xffbf001210000003
TEST_PKRR_OP(ukcrsa16, x2, x6, x12, 0x0000000000000000, 0x11001000021000, 0xffbf001210000003, x6, x7, 32, x13)

inst_17:
// rs1==x2, rs2==x18, rd==x31, rs2_h3_val == 65503, rs2_h0_val == 0, rs1_h0_val == 64511, rs1_h3_val == 49151, rs2_h1_val == 57343
// opcode: ukcrsa16 ; op1:x2; op2:x18; dest:x31; op1val:0xbffffffd0080fbff;  op2val:0xffdfdfffdfff0000
TEST_PKRR_OP(ukcrsa16, x31, x2, x18, 0x0000000000000000, 0xbffffffd0080fbff, 0xffdfdfffdfff0000, x2, x7, 48, x13)

inst_18:
// rs1==x5, rs2==x24, rd==x6, rs2_h3_val == 65519, rs1_h0_val == 65527, rs1_h3_val == 65471, rs1_h1_val == 57343, rs2_h2_val == 65535
// opcode: ukcrsa16 ; op1:x5; op2:x24; dest:x6; op1val:0xffbf0009dffffff7;  op2val:0xffefffffff7f000d
TEST_PKRR_OP(ukcrsa16, x6, x5, x24, 0x0000000000000000, 0xffbf0009dffffff7, 0xffefffffff7f000d, x5, x7, 64, x13)

inst_19:
// rs1==x19, rs2==x17, rd==x3, rs2_h3_val == 65527, rs2_h0_val == 512, rs2_h2_val == 61439, rs2_h1_val == 0, rs1_h2_val == 256, rs1_h3_val == 8
// opcode: ukcrsa16 ; op1:x19; op2:x17; dest:x3; op1val:0x08010000050004;  op2val:0xfff7efff00000200
TEST_PKRR_OP(ukcrsa16, x3, x19, x17, 0x0000000000000000, 0x08010000050004, 0xfff7efff00000200, x19, x7, 80, x13)

inst_20:
// rs1==x9, rs2==x20, rd==x11, rs2_h3_val == 65531, rs1_h3_val == 1024, rs2_h2_val == 65023, rs1_h0_val == 16384, rs2_h1_val == 65023, rs1_h1_val == 32
// opcode: ukcrsa16 ; op1:x9; op2:x20; dest:x11; op1val:0x400fbff00204000;  op2val:0xfffbfdfffdffbfff
TEST_PKRR_OP(ukcrsa16, x11, x9, x20, 0x0000000000000000, 0x400fbff00204000, 0xfffbfdfffdffbfff, x9, x7, 96, x13)

inst_21:
// rs1==x25, rs2==x31, rd==x14, rs2_h3_val == 65533, rs2_h0_val == 16384, rs1_h0_val == 65531, rs1_h2_val == 16384
// opcode: ukcrsa16 ; op1:x25; op2:x31; dest:x14; op1val:0x100040000020fffb;  op2val:0xfffd000100094000
TEST_PKRR_OP(ukcrsa16, x14, x25, x31, 0x0000000000000000, 0x100040000020fffb, 0xfffd000100094000, x25, x7, 112, x13)

inst_22:
// rs1==x31, rs2==x11, rd==x5, rs2_h3_val == 65534, rs1_h1_val == 65533, rs2_h2_val == 8, rs2_h1_val == 64
// opcode: ukcrsa16 ; op1:x31; op2:x11; dest:x5; op1val:0x13000afffddfff;  op2val:0xfffe000800400002
TEST_PKRR_OP(ukcrsa16, x5, x31, x11, 0x0000000000000000, 0x13000afffddfff, 0xfffe000800400002, x31, x7, 128, x13)

inst_23:
// rs1==x21, rs2==x25, rd==x1, rs2_h3_val == 32768, rs1_h3_val == 63487
// opcode: ukcrsa16 ; op1:x21; op2:x25; dest:x1; op1val:0xf7ff10000013000b;  op2val:0x800000400012fffe
TEST_PKRR_OP(ukcrsa16, x1, x21, x25, 0x0000000000000000, 0xf7ff10000013000b, 0x800000400012fffe, x21, x7, 144, x13)

inst_24:
// rs1==x29, rs2==x2, rd==x22, rs2_h3_val == 16384, rs2_h0_val == 65471, rs1_h3_val == 64, rs2_h1_val == 65527
// opcode: ukcrsa16 ; op1:x29; op2:x2; dest:x22; op1val:0x40fff70005000a;  op2val:0x40000006fff7ffbf
TEST_PKRR_OP(ukcrsa16, x22, x29, x2, 0x0000000000000000, 0x40fff70005000a, 0x40000006fff7ffbf, x29, x7, 160, x13)

inst_25:
// rs1==x20, rs2==x3, rd==x23, rs2_h3_val == 8192, rs2_h0_val == 32, rs2_h1_val == 256, rs1_h1_val == 1, rs1_h2_val == 65534
// opcode: ukcrsa16 ; op1:x20; op2:x3; dest:x23; op1val:0x03fffe0001fff7;  op2val:0x2000004001000020
TEST_PKRR_OP(ukcrsa16, x23, x20, x3, 0x0000000000000000, 0x03fffe0001fff7, 0x2000004001000020, x20, x7, 176, x13)

inst_26:
// rs1==x18, rs2==x9, rd==x4, rs2_h3_val == 4096, rs1_h0_val == 65503, rs2_h2_val == 65531, rs1_h2_val == 65535
// opcode: ukcrsa16 ; op1:x18; op2:x9; dest:x4; op1val:0x06ffff000cffdf;  op2val:0x1000fffb000f0020
TEST_PKRR_OP(ukcrsa16, x4, x18, x9, 0x0000000000000000, 0x06ffff000cffdf, 0x1000fffb000f0020, x18, x7, 192, x13)

inst_27:
// rs1==x16, rs2==x26, rd==x30, rs2_h3_val == 2048, rs1_h0_val == 64, rs2_h0_val == 65519, rs1_h2_val == 65279
// opcode: ukcrsa16 ; op1:x16; op2:x26; dest:x30; op1val:0xffbffeff00060040;  op2val:0x800efffff7fffef
TEST_PKRR_OP(ukcrsa16, x30, x16, x26, 0x0000000000000000, 0xffbffeff00060040, 0x800efffff7fffef, x16, x7, 208, x13)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_28:
// rs1==x12, rs2==x8, rd==x0, rs2_h3_val == 1024, rs1_h3_val == 21845, rs1_h0_val == 61439, rs2_h2_val == 43690, rs1_h1_val == 61439
// opcode: ukcrsa16 ; op1:x12; op2:x8; dest:x0; op1val:0x55550000efffefff;  op2val:0x400aaaa00120200
TEST_PKRR_OP(ukcrsa16, x0, x12, x8, 0x0000000000000000, 0x55550000efffefff, 0x400aaaa00120200, x12, x1, 0, x2)

inst_29:
// rs1==x10, rs2==x29, rd==x16, rs2_h3_val == 512, rs2_h2_val == 65471, rs1_h1_val == 49151
// opcode: ukcrsa16 ; op1:x10; op2:x29; dest:x16; op1val:0x03dfffbfff000f;  op2val:0x200ffbffdff0011
TEST_PKRR_OP(ukcrsa16, x16, x10, x29, 0x0000000000000000, 0x03dfffbfff000f, 0x200ffbffdff0011, x10, x1, 16, x2)

inst_30:
// rs1==x17, rs2==x13, rd==x29, rs2_h3_val == 256, rs1_h1_val == 65534, rs2_h0_val == 61439, rs2_h1_val == 65535, rs1_h2_val == 63487
// opcode: ukcrsa16 ; op1:x17; op2:x13; dest:x29; op1val:0x05f7fffffefffb;  op2val:0x1000080ffffefff
TEST_PKRR_OP(ukcrsa16, x29, x17, x13, 0x0000000000000000, 0x05f7fffffefffb, 0x1000080ffffefff, x17, x1, 32, x2)

inst_31:
// rs1==x30, rs2==x22, rd==x28, rs2_h3_val == 128, rs1_h0_val == 2, rs1_h1_val == 4096
// opcode: ukcrsa16 ; op1:x30; op2:x22; dest:x28; op1val:0x5555400010000002;  op2val:0x8000130005000e
TEST_PKRR_OP(ukcrsa16, x28, x30, x22, 0x0000000000000000, 0x5555400010000002, 0x8000130005000e, x30, x1, 48, x2)

inst_32:
// rs2_h3_val == 64, rs1_h2_val == 65471, rs2_h0_val == 65531, rs2_h2_val == 65407
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffbf00010000;  op2val:0x40ff7f0000fffb
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xffbfffbf00010000, 0x40ff7f0000fffb, x30, x1, 64, x2)

inst_33:
// rs2_h3_val == 32, rs2_h2_val == 8192, rs2_h0_val == 65279
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e010002000003;  op2val:0x202000ff7ffeff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x0e010002000003, 0x202000ff7ffeff, x30, x1, 80, x2)

inst_34:
// rs2_h3_val == 16, rs2_h1_val == 4, rs2_h2_val == 65533, rs1_h0_val == 128
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x04000a10000080;  op2val:0x10fffd0004ffff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x04000a10000080, 0x10fffd0004ffff, x30, x1, 96, x2)

inst_35:
// rs1_h1_val == 0, rs1_h0_val == 49151, rs2_h2_val == 65534
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000a0000bfff;  op2val:0x0efffe00400003
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x40000a0000bfff, 0x0efffe00400003, x30, x1, 112, x2)

inst_36:
// rs1_h0_val == 43690, rs2_h1_val == 512, rs2_h2_val == 65519, rs2_h0_val == 65533
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x07000e0012aaaa;  op2val:0xfdffffef0200fffd
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x07000e0012aaaa, 0xfdffffef0200fffd, x30, x1, 128, x2)

inst_37:
// rs1_h0_val == 32767, rs1_h3_val == 64511, rs1_h1_val == 65527
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0005fff77fff;  op2val:0x0f001302000011
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xfbff0005fff77fff, 0x0f001302000011, x30, x1, 144, x2)

inst_38:
// rs1_h0_val == 63487, rs2_h0_val == 65503, rs1_h2_val == 61439
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffefff0001f7ff;  op2val:0x10000000fbffffdf
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xfbffefff0001f7ff, 0x10000000fbffffdf, x30, x1, 160, x2)

inst_39:
// rs1_h0_val == 65023, rs2_h0_val == 64511, rs1_h2_val == 21845
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x405555000dfdff;  op2val:0x090008aaaafbff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x405555000dfdff, 0x090008aaaafbff, x30, x1, 176, x2)

inst_40:
// rs1_h0_val == 65279, rs2_h0_val == 63487
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x07ffbf000afeff;  op2val:0xffef0004fffff7ff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x07ffbf000afeff, 0xffef0004fffff7ff, x30, x1, 192, x2)

inst_41:
// rs1_h0_val == 65407, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000f000cff7f;  op2val:0xf7ffaaaa000b0012
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x20000f000cff7f, 0xf7ffaaaa000b0012, x30, x1, 208, x2)

inst_42:
// rs1_h0_val == 65533, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000efffd;  op2val:0x10002000dffffbff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x4000000000efffd, 0x10002000dffffbff, x30, x1, 224, x2)

inst_43:
// rs1_h0_val == 65534, rs1_h3_val == 0, rs1_h2_val == 32767
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x007fffbffffffe;  op2val:0x800000131000ffff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x007fffbffffffe, 0x800000131000ffff, x30, x1, 240, x2)

inst_44:
// rs1_h0_val == 32768, rs1_h3_val == 65279
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff001300208000;  op2val:0xffbf000d00030000
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xfeff001300208000, 0xffbf000d00030000, x30, x1, 256, x2)

inst_45:
// rs1_h0_val == 8192, rs2_h2_val == 16
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffff7000f2000;  op2val:0xffef0010000a000e
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xffbffff7000f2000, 0xffef0010000a000e, x30, x1, 272, x2)

inst_46:
// rs1_h0_val == 256, rs1_h3_val == 256, rs1_h2_val == 65503, rs2_h0_val == 4096
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100ffdf04000100;  op2val:0xdfff0007ffbf1000
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x100ffdf04000100, 0xdfff0007ffbf1000, x30, x1, 288, x2)

inst_47:
// rs1_h0_val == 32, rs1_h1_val == 8192
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x117fff20000020;  op2val:0xffbf0013bfff0100
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x117fff20000020, 0xffbf0013bfff0100, x30, x1, 304, x2)

inst_48:
// rs1_h0_val == 16, rs1_h3_val == 43690, rs1_h2_val == 43690
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa20000010;  op2val:0x1300050012ffdf
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa20000010, 0x1300050012ffdf, x30, x1, 320, x2)

inst_49:
// rs2_h3_val == 8, rs1_h1_val == 65023, rs1_h3_val == 8192
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fff7fdffffef;  op2val:0x08001100060020
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x2000fff7fdffffef, 0x08001100060020, x30, x1, 336, x2)

inst_50:
// rs1_h0_val == 65535, rs2_h0_val == 8192
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffe0002ffff;  op2val:0xffdf001000012000
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xaaaafffe0002ffff, 0xffdf001000012000, x30, x1, 352, x2)

inst_51:
// rs2_h3_val == 4, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff000daaaafffb;  op2val:0x0400200100000b
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xfeff000daaaafffb, 0x0400200100000b, x30, x1, 368, x2)

inst_52:
// rs2_h3_val == 2, rs1_h3_val == 65531, rs1_h1_val == 65503
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb0010ffdf5555;  op2val:0x02ffbf0005fbff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffb0010ffdf5555, 0x02ffbf0005fbff, x30, x1, 384, x2)

inst_53:
// rs2_h3_val == 1, rs1_h2_val == 1024, rs2_h1_val == 8192
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0400fff7ffdf;  op2val:0x01f7ff20000200
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xff7f0400fff7ffdf, 0x01f7ff20000200, x30, x1, 400, x2)

inst_54:
// rs2_h3_val == 65535, rs2_h2_val == 16384, rs1_h2_val == 2048, rs2_h0_val == 21845
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb08008000000a;  op2val:0xffff400000105555
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffb08008000000a, 0xffff400000105555, x30, x1, 416, x2)

inst_55:
// rs2_h3_val == 0, rs1_h1_val == 65407
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x037fffff7f0020;  op2val:0x000040ffff000b
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x037fffff7f0020, 0x000040ffff000b, x30, x1, 432, x2)

inst_56:
// rs2_h2_val == 32767, rs1_h3_val == 16384
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400000060007dfff;  op2val:0x0f7fffdffffffe
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x400000060007dfff, 0x0f7fffdffffffe, x30, x1, 448, x2)

inst_57:
// rs2_h2_val == 49151, rs1_h3_val == 65519
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef00008000fbff;  op2val:0x0fbfff0013fbff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xffef00008000fbff, 0x0fbfff0013fbff, x30, x1, 464, x2)

inst_58:
// rs2_h2_val == 64511, rs2_h0_val == 57343, rs1_h2_val == 65519
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x05ffeffff7000a;  op2val:0xfffffbfffdffdfff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x05ffeffff7000a, 0xfffffbfffdffdfff, x30, x1, 480, x2)

inst_59:
// rs2_h2_val == 65279, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0801000003f7ff;  op2val:0x0cfeffff7ff7ff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x0801000003f7ff, 0x0cfeffff7ff7ff, x30, x1, 496, x2)

inst_60:
// rs2_h0_val == 32768, rs1_h3_val == 65023
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff000f00130200;  op2val:0xffdfffbfffff8000
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xfdff000f00130200, 0xffdfffbfffff8000, x30, x1, 512, x2)

inst_61:
// rs2_h0_val == 2048, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c080000070009;  op2val:0xfdffaaaa000d0800
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x0c080000070009, 0xfdffaaaa000d0800, x30, x1, 528, x2)

inst_62:
// rs2_h0_val == 1024, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf000ffffefffb;  op2val:0xffbfffef00100400
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xffbf000ffffefffb, 0xffbfffef00100400, x30, x1, 544, x2)

inst_63:
// rs2_h0_val == 128, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff000aeffffffe;  op2val:0x0c002010000080
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xdfff000aeffffffe, 0x0c002010000080, x30, x1, 560, x2)

inst_64:
// rs2_h0_val == 16, rs1_h2_val == 4
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000004ffdffffb;  op2val:0x11dfff10000010
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x10000004ffdffffb, 0x11dfff10000010, x30, x1, 576, x2)

inst_65:
// rs2_h0_val == 8, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0efeffffff000f;  op2val:0xfffefeff00120008
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x0efeffffff000f, 0xfffefeff00120008, x30, x1, 592, x2)

inst_66:
// rs2_h0_val == 1, rs1_h1_val == 16
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef000000108000;  op2val:0x02000b000c0001
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xffef000000108000, 0x02000b000c0001, x30, x1, 608, x2)

inst_67:
// rs1_h3_val == 61439, rs1_h2_val == 128
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff0080ff7ffffe;  op2val:0x0bfbff01000800
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xefff0080ff7ffffe, 0x0bfbff01000800, x30, x1, 624, x2)

inst_68:
// rs1_h3_val == 65533, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd00800010fbff;  op2val:0xf7fffdff000bdfff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffd00800010fbff, 0xf7fffdff000bdfff, x30, x1, 640, x2)

inst_69:
// rs1_h3_val == 65534, rs2_h2_val == 2
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0000000c0800;  op2val:0xbfff0002dfff0000
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffe0000000c0800, 0xbfff0002dfff0000, x30, x1, 656, x2)

inst_70:
// rs1_h3_val == 32768, rs2_h1_val == 61439
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x800000070200efff;  op2val:0x2000bfffefff0004
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x800000070200efff, 0x2000bfffefff0004, x30, x1, 672, x2)

inst_71:
// rs1_h3_val == 2048, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000120004000b;  op2val:0x12dfff00050005
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x80000120004000b, 0x12dfff00050005, x30, x1, 688, x2)

inst_72:
// rs1_h3_val == 128, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000020012000f;  op2val:0xfdff00030006000b
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x8000020012000f, 0xfdff00030006000b, x30, x1, 704, x2)

inst_73:
// rs1_h3_val == 16, rs2_h2_val == 32768
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100002ffdfdfff;  op2val:0xffdf8000000dfbff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x100002ffdfdfff, 0xffdf8000000dfbff, x30, x1, 720, x2)

inst_74:
// rs2_h2_val == 65503, rs1_h1_val == 65471
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0002ffbf0080;  op2val:0x06ffdf000a8000
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xbfff0002ffbf0080, 0x06ffdf000a8000, x30, x1, 736, x2)

inst_75:
// rs1_h3_val == 2, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x020013efff000d;  op2val:0x0dffdfbfff000e
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x020013efff000d, 0x0dffdfbfff000e, x30, x1, 752, x2)

inst_76:
// rs1_h3_val == 1, rs2_h0_val == 43690
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x010002fdffffef;  op2val:0x040010000daaaa
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x010002fdffffef, 0x040010000daaaa, x30, x1, 768, x2)

inst_77:
// rs2_h2_val == 65527, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x03000adffffeff;  op2val:0xbffffff700070200
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x03000adffffeff, 0xbffffff700070200, x30, x1, 784, x2)

inst_78:
// rs1_h3_val == 65535, rs2_h1_val == 32768
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf8000f7ff;  op2val:0xfffffff78000f7ff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xffffffdf8000f7ff, 0xfffffff78000f7ff, x30, x1, 800, x2)

inst_79:
// rs1_h2_val == 49151, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000bfff7fff0100;  op2val:0x09ff7fff7f0800
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x1000bfff7fff0100, 0x09ff7fff7f0800, x30, x1, 816, x2)

inst_80:
// rs2_h2_val == 2048, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000080fffd0200;  op2val:0xfbff0800dfff0011
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x8000080fffd0200, 0xfbff0800dfff0011, x30, x1, 832, x2)

inst_81:
// rs2_h2_val == 1024, rs2_h1_val == 32
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000400000005555;  op2val:0x0d04000020efff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x4000400000005555, 0x0d04000020efff, x30, x1, 848, x2)

inst_82:
// rs1_h2_val == 65023, rs2_h1_val == 65519
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fdff00130080;  op2val:0x1004000ffeffffd
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xfff7fdff00130080, 0x1004000ffeffffd, x30, x1, 864, x2)

inst_83:
// rs2_h2_val == 256, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d000f08000400;  op2val:0x08010080001000
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x0d000f08000400, 0x08010080001000, x30, x1, 880, x2)

inst_84:
// rs1_h2_val == 32768, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x118000ffff0001;  op2val:0x00aaaa08000010
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x118000ffff0001, 0x00aaaa08000010, x30, x1, 896, x2)

inst_85:
// rs1_h2_val == 8192, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf200000070080;  op2val:0x2000000900130012
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xffdf200000070080, 0x2000000900130012, x30, x1, 912, x2)

inst_86:
// rs2_h1_val == 32767, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0a0011000dfdff;  op2val:0x0c04007fff0012
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x0a0011000dfdff, 0x0c04007fff0012, x30, x1, 928, x2)

inst_87:
// rs1_h2_val == 512, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e0200ffdf0011;  op2val:0xbfff0002fdff0800
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x0e0200ffdf0011, 0xbfff0002fdff0800, x30, x1, 944, x2)

inst_88:
// rs2_h1_val == 63487, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffefffffdf0007;  op2val:0x06ff7ff7ffffef
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xfdffefffffdf0007, 0x06ff7ff7ffffef, x30, x1, 960, x2)

inst_89:
// rs1_h2_val == 64, rs1_h1_val == 64
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000400040000e;  op2val:0x02ffdfaaaaaaaa
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x100000400040000e, 0x02ffdfaaaaaaaa, x30, x1, 976, x2)

inst_90:
// rs1_h2_val == 32, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff700200200ffef;  op2val:0x1300805555ffff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xfff700200200ffef, 0x1300805555ffff, x30, x1, 992, x2)

inst_91:
// rs1_h2_val == 8, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000080200fdff;  op2val:0x40004000000aff7f
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x10000080200fdff, 0x40004000000aff7f, x30, x1, 1008, x2)

inst_92:
// rs2_h1_val == 65503, rs1_h1_val == 65519
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e000cffef0001;  op2val:0x800005ffdf0005
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x0e000cffef0001, 0x800005ffdf0005, x30, x1, 1024, x2)

inst_93:
// rs2_h1_val == 65531, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x12ffff00005555;  op2val:0xff7f000dfffbffef
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x12ffff00005555, 0xff7f000dfffbffef, x30, x1, 1040, x2)

inst_94:
// rs2_h1_val == 65533, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x07fffd20000012;  op2val:0xf7ffaaaafffdefff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x07fffd20000012, 0xf7ffaaaafffdefff, x30, x1, 1056, x2)

inst_95:
// rs2_h1_val == 65534, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1200130080fbff;  op2val:0x55550400fffe0010
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x1200130080fbff, 0x55550400fffe0010, x30, x1, 1072, x2)

inst_96:
// rs1_h1_val == 21845, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0600405555fbff;  op2val:0x0600200100000f
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x0600405555fbff, 0x0600200100000f, x30, x1, 1088, x2)

inst_97:
// rs2_h1_val == 16384, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ff7f0011ffdf;  op2val:0x0dffbf40004000
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x01ff7f0011ffdf, 0x0dffbf40004000, x30, x1, 1104, x2)

inst_98:
// rs2_h1_val == 1024, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000800020800;  op2val:0x2000080004000003
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x7fff000800020800, 0x2000080004000003, x30, x1, 1120, x2)

inst_99:
// rs1_h1_val == 64511, rs2_h0_val == 65023
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffeffbff2000;  op2val:0x1000000013fdff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0xff7fffeffbff2000, 0x1000000013fdff, x30, x1, 1136, x2)

inst_100:
// rs2_h1_val == 128, rs1_h1_val == 8
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000555500084000;  op2val:0x0f001000800003
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x2000555500084000, 0x0f001000800003, x30, x1, 1152, x2)

inst_101:
// rs2_h1_val == 8, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x120008fffffff7;  op2val:0xbfff00400008ffdf
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x120008fffffff7, 0xbfff00400008ffdf, x30, x1, 1168, x2)

inst_102:
// rs1_h1_val == 65531, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x110005fffbffef;  op2val:0x060000000b0008
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x110005fffbffef, 0x060000000b0008, x30, x1, 1184, x2)

inst_103:
// rs2_h1_val == 2, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x13000308000005;  op2val:0x0420000002fdff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x13000308000005, 0x0420000002fdff, x30, x1, 1200, x2)

inst_104:
// rs1_h1_val == 256, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x03aaaa0100fff7;  op2val:0x555504000009aaaa
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x03aaaa0100fff7, 0x555504000009aaaa, x30, x1, 1216, x2)

inst_105:
// rs2_h0_val == 32767, 
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x07ff7f0001ffbf;  op2val:0xfffb100080007fff
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x07ff7f0001ffbf, 0xfffb100080007fff, x30, x1, 1232, x2)

inst_106:
// rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h2_val == 1, rs1_h0_val == 65471, rs2_h1_val == 43690, rs2_h0_val == 2, rs1_h1_val == 1024, rs1_h2_val == 1
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d00010400ffbf;  op2val:0x070001aaaa0002
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x0d00010400ffbf, 0x070001aaaa0002, x30, x1, 1248, x2)

inst_107:
// rs2_h3_val == 63487, rs1_h0_val == 21845, rs1_h2_val == 65531, rs2_h1_val == 16, rs2_h2_val == 0, rs1_h3_val == 32, rs1_h1_val == 2048
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fffb08005555;  op2val:0xf7ff00000010000d
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x20fffb08005555, 0xf7ff00000010000d, x30, x1, 1264, x2)

inst_108:
// rs2_h3_val == 65407, rs1_h3_val == 32767, rs1_h1_val == 16384, rs2_h0_val == 256
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000340000008;  op2val:0xff7f0003000c0100
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x7fff000340000008, 0xff7f0003000c0100, x30, x1, 1280, x2)

inst_109:
// rs2_h3_val == 1024, rs1_h3_val == 21845, rs1_h0_val == 61439, rs2_h2_val == 43690, rs1_h1_val == 61439
// opcode: ukcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550000efffefff;  op2val:0x400aaaa00120200
TEST_PKRR_OP(ukcrsa16, x31, x30, x29, 0x0000000000000000, 0x55550000efffefff, 0x400aaaa00120200, x30, x1, 1296, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 164*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
