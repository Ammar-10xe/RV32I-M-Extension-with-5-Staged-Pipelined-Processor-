
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the uraddw instruction of the RISC-V RV64PZicsr extension for the uraddw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",uraddw)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rd != rs2, rs1==x9, rs2==x24, rd==x9, rs1_w0_val == 0, rs2_w1_val == 4293918719, rs2_w0_val == 32768
// opcode: uraddw ; op1:x9; dest:x9; op1val:0x00000a00000000;  immval:$imm_val
TEST_RR_OP(uraddw, x9, x9, x24, 0x0000000000000000, 0x00000a00000000, 0xffefffff00008000, x8, 0, x12)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x2, rd==x18, rs2_w1_val == 2863311530, rs1_w0_val == 3221225471, rs2_w0_val == 67108864, rs1_w1_val == 4293918719
// opcode: uraddw ; op1:x23; dest:x18; op1val:0xffefffffbfffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x18, x23, x2, 0x0000000000000000, 0xffefffffbfffffff, 0xaaaaaaaa04000000, x8, 8, x12)

inst_2:
// rs1 == rs2 != rd, rs1==x31, rs2==x31, rd==x1, rs2_w1_val == 1431655765, rs1_w0_val == 4294966783, rs1_w1_val == 0, rs2_w0_val == 512
// opcode: uraddw ; op1:x31; dest:x1; op1val:0x000000fffffdff;  immval:$imm_val
TEST_RR_OP(uraddw, x1, x31, x31, 0x0000000000000000, 0x000000fffffdff, 0x5555555500000200, x8, 16, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x13, rs2==x13, rd==x13, rs2_w1_val == 2147483647, rs1_w1_val == 4294959103, rs2_w0_val == 1, rs1_w0_val == 4294967294
// opcode: uraddw ; op1:x13; dest:x13; op1val:0xffffdffffffffffe;  immval:$imm_val
TEST_RR_OP(uraddw, x13, x13, x13, 0x0000000000000000, 0xffffdffffffffffe, 0x7fffffff00000001, x8, 24, x12)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x6, rd==x6, rs2_w1_val == 3221225471, rs1_w0_val == 4294950911, rs2_w0_val == 4096, rs1_w1_val == 1431655765
// opcode: uraddw ; op1:x5; dest:x6; op1val:0x55555555ffffbfff;  immval:$imm_val
TEST_RR_OP(uraddw, x6, x5, x6, 0x0000000000000000, 0x55555555ffffbfff, 0xbfffffff00001000, x8, 32, x12)

inst_5:
// rs1==x21, rs2==x4, rd==x10, rs2_w1_val == 3758096383, rs1_w1_val == 32768, rs1_w0_val == 128
// opcode: uraddw ; op1:x21; dest:x10; op1val:0x00800000000080;  immval:$imm_val
TEST_RR_OP(uraddw, x10, x21, x4, 0x0000000000000000, 0x00800000000080, 0xdfffffff0000000c, x8, 40, x12)

inst_6:
// rs1==x15, rs2==x18, rd==x4, rs2_w1_val == 4026531839, rs1_w0_val == 4292870143, rs1_w1_val == 2147483648, rs2_w0_val == 4
// opcode: uraddw ; op1:x15; dest:x4; op1val:0x80000000ffdfffff;  immval:$imm_val
TEST_RR_OP(uraddw, x4, x15, x18, 0x0000000000000000, 0x80000000ffdfffff, 0xefffffff00000004, x8, 48, x12)

inst_7:
// rs1==x30, rs2==x7, rd==x22, rs2_w1_val == 4160749567, rs1_w1_val == 4294934527, rs1_w0_val == 2147483647
// opcode: uraddw ; op1:x30; dest:x22; op1val:0xffff7fff7fffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x22, x30, x7, 0x0000000000000000, 0xffff7fff7fffffff, 0xf7ffffff00000006, x8, 56, x12)

inst_8:
// rs1==x26, rs2==x23, rd==x29, rs2_w1_val == 4227858431, 
// opcode: uraddw ; op1:x26; dest:x29; op1val:0x00000d00000012;  immval:$imm_val
TEST_RR_OP(uraddw, x29, x26, x23, 0x0000000000000000, 0x00000d00000012, 0xfbffffff00008000, x8, 64, x12)

inst_9:
// rs1==x16, rs2==x15, rd==x28, rs2_w1_val == 4261412863, rs1_w1_val == 4294966783, rs2_w0_val == 4294967279, rs1_w0_val == 4294705151
// opcode: uraddw ; op1:x16; dest:x28; op1val:0xfffffdfffffbffff;  immval:$imm_val
TEST_RR_OP(uraddw, x28, x16, x15, 0x0000000000000000, 0xfffffdfffffbffff, 0xfdffffffffffffef, x8, 72, x12)

inst_10:
// rs1==x17, rs2==x21, rd==x26, rs2_w1_val == 4278190079, rs1_w0_val == 4194304, rs1_w1_val == 1048576, rs2_w0_val == 8388608
// opcode: uraddw ; op1:x17; dest:x26; op1val:0x10000000400000;  immval:$imm_val
TEST_RR_OP(uraddw, x26, x17, x21, 0x0000000000000000, 0x10000000400000, 0xfeffffff00800000, x8, 80, x12)

inst_11:
// rs1==x29, rs2==x26, rd==x16, rs2_w1_val == 4286578687, rs1_w1_val == 131072, rs1_w0_val == 4294965247, rs2_w0_val == 4261412863
// opcode: uraddw ; op1:x29; dest:x16; op1val:0x020000fffff7ff;  immval:$imm_val
TEST_RR_OP(uraddw, x16, x29, x26, 0x0000000000000000, 0x020000fffff7ff, 0xff7ffffffdffffff, x8, 88, x12)

inst_12:
// rs1==x0, rs2==x17, rd==x15, rs2_w1_val == 4290772991, rs1_w0_val == 1048576, rs1_w1_val == 4096, rs2_w0_val == 2147483648
// opcode: uraddw ; op1:x0; dest:x15; op1val:0x00100000100000;  immval:$imm_val
TEST_RR_OP(uraddw, x15, x0, x17, 0x0000000000000000, 0x00100000100000, 0xffbfffff80000000, x8, 96, x12)

inst_13:
// rs1==x3, rs2==x25, rd==x5, rs2_w1_val == 4292870143, rs2_w0_val == 268435456
// opcode: uraddw ; op1:x3; dest:x5; op1val:0x0200000000000e;  immval:$imm_val
TEST_RR_OP(uraddw, x5, x3, x25, 0x0000000000000000, 0x0200000000000e, 0xffdfffff10000000, x8, 104, x12)

inst_14:
// rs1==x20, rs2==x11, rd==x0, rs2_w1_val == 4294443007, rs1_w1_val == 4294705151
// opcode: uraddw ; op1:x20; dest:x0; op1val:0xfffbffffffdfffff;  immval:$imm_val
TEST_RR_OP(uraddw, x0, x20, x11, 0x0000000000000000, 0xfffbffffffdfffff, 0xfff7ffff0000000f, x8, 112, x12)

inst_15:
// rs1==x10, rs2==x1, rd==x30, rs2_w1_val == 4294705151, rs2_w0_val == 4290772991, rs1_w1_val == 33554432, rs1_w0_val == 2
// opcode: uraddw ; op1:x10; dest:x30; op1val:0x200000000000002;  immval:$imm_val
TEST_RR_OP(uraddw, x30, x10, x1, 0x0000000000000000, 0x200000000000002, 0xfffbffffffbfffff, x8, 120, x15)

inst_16:
// rs1==x27, rs2==x29, rd==x12, rs2_w1_val == 4294836223, rs1_w1_val == 4294950911, rs1_w0_val == 16777216
// opcode: uraddw ; op1:x27; dest:x12; op1val:0xffffbfff01000000;  immval:$imm_val
TEST_RR_OP(uraddw, x12, x27, x29, 0x0000000000000000, 0xffffbfff01000000, 0xfffdffff0000000a, x8, 128, x15)
RVTEST_SIGBASE(x13,signature_x13_0)

inst_17:
// rs1==x11, rs2==x20, rd==x19, rs2_w1_val == 4294901759, rs2_w0_val == 4293918719
// opcode: uraddw ; op1:x11; dest:x19; op1val:0x000013fffffdff;  immval:$imm_val
TEST_RR_OP(uraddw, x19, x11, x20, 0x0000000000000000, 0x000013fffffdff, 0xfffeffffffefffff, x13, 0, x15)

inst_18:
// rs1==x2, rs2==x16, rd==x21, rs2_w1_val == 4294934527, rs1_w1_val == 4026531839
// opcode: uraddw ; op1:x2; dest:x21; op1val:0xefffffff0000000a;  immval:$imm_val
TEST_RR_OP(uraddw, x21, x2, x16, 0x0000000000000000, 0xefffffff0000000a, 0xffff7fff00000006, x13, 8, x15)

inst_19:
// rs1==x1, rs2==x14, rd==x23, rs2_w1_val == 4294950911, rs1_w1_val == 512, rs1_w0_val == 4293918719, rs2_w0_val == 4294967293
// opcode: uraddw ; op1:x1; dest:x23; op1val:0x000200ffefffff;  immval:$imm_val
TEST_RR_OP(uraddw, x23, x1, x14, 0x0000000000000000, 0x000200ffefffff, 0xffffbffffffffffd, x13, 16, x15)

inst_20:
// rs1==x28, rs2==x12, rd==x8, rs2_w1_val == 4294959103, rs2_w0_val == 3221225471, rs1_w1_val == 32
// opcode: uraddw ; op1:x28; dest:x8; op1val:0x000020ffdfffff;  immval:$imm_val
TEST_RR_OP(uraddw, x8, x28, x12, 0x0000000000000000, 0x000020ffdfffff, 0xffffdfffbfffffff, x13, 24, x15)

inst_21:
// rs1==x7, rs2==x28, rd==x2, rs2_w1_val == 4294963199, rs2_w0_val == 134217728, rs1_w0_val == 8388608
// opcode: uraddw ; op1:x7; dest:x2; op1val:0xffefffff00800000;  immval:$imm_val
TEST_RR_OP(uraddw, x2, x7, x28, 0x0000000000000000, 0xffefffff00800000, 0xffffefff08000000, x13, 32, x15)

inst_22:
// rs1==x22, rs2==x30, rd==x27, rs2_w1_val == 4294965247, rs1_w0_val == 512
// opcode: uraddw ; op1:x22; dest:x27; op1val:0x8000000000000200;  immval:$imm_val
TEST_RR_OP(uraddw, x27, x22, x30, 0x0000000000000000, 0x8000000000000200, 0xfffff7ff80000000, x13, 40, x15)

inst_23:
// rs1==x4, rs2==x10, rd==x17, rs2_w1_val == 4294966271, rs2_w0_val == 16, rs1_w1_val == 4294967167
// opcode: uraddw ; op1:x4; dest:x17; op1val:0xffffff7f00000007;  immval:$imm_val
TEST_RR_OP(uraddw, x17, x4, x10, 0x0000000000000000, 0xffffff7f00000007, 0xfffffbff00000010, x13, 48, x15)

inst_24:
// rs1==x14, rs2==x5, rd==x11, rs2_w1_val == 4294966783, rs1_w0_val == 32, rs2_w0_val == 4227858431
// opcode: uraddw ; op1:x14; dest:x11; op1val:0xfffffdff00000020;  immval:$imm_val
TEST_RR_OP(uraddw, x11, x14, x5, 0x0000000000000000, 0xfffffdff00000020, 0xfffffdfffbffffff, x13, 56, x15)

inst_25:
// rs1==x18, rs2==x0, rd==x20, rs2_w1_val == 4294967039, rs1_w1_val == 4294967231, rs1_w0_val == 67108864
// opcode: uraddw ; op1:x18; dest:x20; op1val:0xffffffbf04000000;  immval:$imm_val
TEST_RR_OP(uraddw, x20, x18, x0, 0x0000000000000000, 0xffffffbf04000000, 0xfffffeff10000000, x13, 64, x15)

inst_26:
// rs1==x8, rs2==x27, rd==x3, rs2_w1_val == 4294967167, rs1_w0_val == 4294967231, rs2_w0_val == 8192
// opcode: uraddw ; op1:x8; dest:x3; op1val:0x000200ffffffbf;  immval:$imm_val
TEST_RR_OP(uraddw, x3, x8, x27, 0x0000000000000000, 0x000200ffffffbf, 0xffffff7f00002000, x13, 72, x15)

inst_27:
// rs1==x24, rs2==x19, rd==x14, rs2_w1_val == 4294967231, rs1_w0_val == 8192
// opcode: uraddw ; op1:x24; dest:x14; op1val:0x00100000002000;  immval:$imm_val
TEST_RR_OP(uraddw, x14, x24, x19, 0x0000000000000000, 0x00100000002000, 0xffffffbf00000003, x13, 80, x15)

inst_28:
// rs1==x12, rs2==x22, rd==x25, rs2_w1_val == 4294967263, rs1_w0_val == 4294967279, rs1_w1_val == 4294901759, rs2_w0_val == 4294967287
// opcode: uraddw ; op1:x12; dest:x25; op1val:0xfffeffffffffffef;  immval:$imm_val
TEST_RR_OP(uraddw, x25, x12, x22, 0x0000000000000000, 0xfffeffffffffffef, 0xffffffdffffffff7, x13, 88, x15)

inst_29:
// rs1==x19, rs2==x8, rd==x24, rs2_w1_val == 4294967279, rs1_w1_val == 134217728, rs1_w0_val == 4286578687, rs2_w0_val == 4294934527
// opcode: uraddw ; op1:x19; dest:x24; op1val:0x8000000ff7fffff;  immval:$imm_val
TEST_RR_OP(uraddw, x24, x19, x8, 0x0000000000000000, 0x8000000ff7fffff, 0xffffffefffff7fff, x13, 96, x15)

inst_30:
// rs1==x25, rs2==x3, rd==x7, rs2_w1_val == 4294967287, 
// opcode: uraddw ; op1:x25; dest:x7; op1val:0x00000600000006;  immval:$imm_val
TEST_RR_OP(uraddw, x7, x25, x3, 0x0000000000000000, 0x00000600000006, 0xfffffff700000005, x13, 104, x15)

inst_31:
// rs1==x6, rs2==x9, rd==x31, rs2_w1_val == 4294967291, rs1_w1_val == 4294965247
// opcode: uraddw ; op1:x6; dest:x31; op1val:0xfffff7ff0000000c;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x6, x9, 0x0000000000000000, 0xfffff7ff0000000c, 0xfffffffb08000000, x13, 112, x15)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_32:
// rs2_w1_val == 4294967293, rs1_w0_val == 4294966271, rs2_w0_val == 2
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x000006fffffbff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x000006fffffbff, 0xfffffffd00000002, x1, 0, x2)

inst_33:
// rs2_w1_val == 4294967294, rs1_w1_val == 4294967294, rs2_w0_val == 16777216
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfffffffebfffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfffffffebfffffff, 0xfffffffe01000000, x1, 8, x2)

inst_34:
// rs2_w1_val == 2147483648, rs1_w1_val == 4294966271
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfffffbff00000020;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000020, 0x80000000ffffffef, x1, 16, x2)

inst_35:
// rs2_w1_val == 1073741824, rs2_w0_val == 4294967263, rs1_w1_val == 2
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x000002bfffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x000002bfffffff, 0x40000000ffffffdf, x1, 24, x2)

inst_36:
// rs2_w1_val == 536870912, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x001000ff7fffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x001000ff7fffff, 0x2000000000000001, x1, 32, x2)

inst_37:
// rs2_w1_val == 268435456, rs1_w1_val == 65536, rs2_w0_val == 33554432, rs1_w0_val == 4294967167
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x010000ffffff7f;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x010000ffffff7f, 0x1000000002000000, x1, 40, x2)

inst_38:
// rs2_w1_val == 134217728, rs1_w0_val == 8, rs1_w1_val == 3758096383
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xdfffffff00000008;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xdfffffff00000008, 0x8000000fdffffff, x1, 48, x2)

inst_39:
// rs2_w1_val == 67108864, rs1_w0_val == 2863311530, rs2_w0_val == 4294836223
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x80000000aaaaaaaa;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x80000000aaaaaaaa, 0x4000000fffdffff, x1, 56, x2)

inst_40:
// rs2_w1_val == 33554432, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfffefffffffffdff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfffefffffffffdff, 0x2000000fffffffd, x1, 64, x2)

inst_41:
// rs2_w1_val == 16777216, rs2_w0_val == 8
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x100000ffffff7f;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x100000ffffff7f, 0x100000000000008, x1, 72, x2)

inst_42:
// rs2_w1_val == 8388608, rs1_w0_val == 4294959103, rs1_w1_val == 1073741824
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x40000000ffffdfff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x40000000ffffdfff, 0x800000bfffffff, x1, 80, x2)

inst_43:
// rs2_w1_val == 4194304, rs1_w1_val == 64, rs2_w0_val == 4294967291, rs1_w0_val == 1024
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00004000000400;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00004000000400, 0x400000fffffffb, x1, 88, x2)

inst_44:
// rs2_w1_val == 2097152, rs1_w1_val == 1024, rs2_w0_val == 4294959103, rs1_w0_val == 134217728
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00040008000000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00040008000000, 0x200000ffffdfff, x1, 96, x2)

inst_45:
// rs2_w1_val == 1048576, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffffffbfffffdfff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffffffbfffffdfff, 0x1000000000000d, x1, 104, x2)

inst_46:
// rs2_w1_val == 524288, rs2_w0_val == 4294966271
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00800008000000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00800008000000, 0x080000fffffbff, x1, 112, x2)

inst_47:
// rs2_w1_val == 262144, rs1_w0_val == 32768, rs1_w1_val == 4290772991, rs2_w0_val == 128
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffbfffff00008000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffbfffff00008000, 0x04000000000080, x1, 120, x2)

inst_48:
// rs2_w1_val == 131072, rs1_w1_val == 4261412863
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfdffffff08000000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfdffffff08000000, 0x02000000000007, x1, 128, x2)

inst_49:
// rs2_w1_val == 65536, rs1_w0_val == 16384
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00000a00004000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00000a00004000, 0x01000000002000, x1, 136, x2)

inst_50:
// rs2_w1_val == 32768, rs1_w1_val == 16777216, rs1_w0_val == 262144, rs2_w0_val == 131072
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x100000000040000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x100000000040000, 0x00800000020000, x1, 144, x2)

inst_51:
// rs1_w0_val == 4096, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x800000000001000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x800000000001000, 0xdffffffffffffbff, x1, 152, x2)

inst_52:
// rs1_w0_val == 2048, rs2_w0_val == 4194304
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00800000000800;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00800000000800, 0x40000000400000, x1, 160, x2)

inst_53:
// rs1_w0_val == 256, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffffffbf00000100;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffffffbf00000100, 0x00000efffffffb, x1, 168, x2)

inst_54:
// rs1_w0_val == 64, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00000000000040;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00000000000040, 0x00000d80000000, x1, 176, x2)

inst_55:
// rs1_w0_val == 16, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00000c00000010;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00000c00000010, 0x10000000001000, x1, 184, x2)

inst_56:
// rs1_w0_val == 4, rs1_w1_val == 4286578687, rs2_w0_val == 4286578687
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xff7fffff00000004;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xff7fffff00000004, 0xefffffffff7fffff, x1, 192, x2)

inst_57:
// rs1_w0_val == 1, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00000700000001;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00000700000001, 0xfff7ffff00400000, x1, 200, x2)

inst_58:
// rs1_w0_val == 4294967295, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x001000ffffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x001000ffffffff, 0xaaaaaaaa00002000, x1, 208, x2)

inst_59:
// rs2_w1_val == 16384, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x000002ffffffef;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x000002ffffffef, 0x004000ffffffef, x1, 216, x2)

inst_60:
// rs2_w1_val == 8192, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x2000000ffffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x2000000ffffffff, 0x002000ffffffdf, x1, 224, x2)

inst_61:
// rs2_w1_val == 4096, rs2_w0_val == 524288, rs1_w1_val == 4294967279
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffffffef00002000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffffffef00002000, 0x00100000080000, x1, 232, x2)

inst_62:
// rs2_w1_val == 2048, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00000300100000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00000300100000, 0x0008000000000f, x1, 240, x2)

inst_63:
// rs2_w1_val == 1024, rs2_w0_val == 3758096383, rs1_w1_val == 1
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00000100000012;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00000100000012, 0x000400dfffffff, x1, 248, x2)

inst_64:
// rs2_w1_val == 512, rs1_w0_val == 2097152
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffefffff00200000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffefffff00200000, 0x000200ffffffdf, x1, 256, x2)

inst_65:
// rs2_w1_val == 256, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00100000001000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00100000001000, 0x00010000000004, x1, 264, x2)

inst_66:
// rs2_w1_val == 128, rs2_w0_val == 2097152
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffefffff00000800;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffefffff00000800, 0x00008000200000, x1, 272, x2)

inst_67:
// rs2_w1_val == 64, rs2_w0_val == 4294967295
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x8000000ffffffef;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x8000000ffffffef, 0x000040ffffffff, x1, 280, x2)

inst_68:
// rs2_w1_val == 32, rs2_w0_val == 65536, rs1_w1_val == 8
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00000800008000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00000800008000, 0x00002000010000, x1, 288, x2)

inst_69:
// rs2_w1_val == 16, rs1_w0_val == 4294967291
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x010000fffffffb;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x010000fffffffb, 0x000010ffffdfff, x1, 296, x2)

inst_70:
// rs2_w1_val == 8, rs2_w0_val == 4160749567
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfffeffffffffdfff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffdfff, 0x000008f7ffffff, x1, 304, x2)

inst_71:
// rs2_w1_val == 4, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfffffdff00000400;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000400, 0x0000040000000c, x1, 312, x2)

inst_72:
// rs2_w1_val == 2, rs2_w0_val == 4294967039
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00000bffdfffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00000bffdfffff, 0x000002fffffeff, x1, 320, x2)

inst_73:
// rs2_w1_val == 1, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfffff7ff00000400;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000400, 0x000001ffffffdf, x1, 328, x2)

inst_74:
// rs2_w1_val == 4294967295, rs2_w0_val == 4294963199, rs1_w0_val == 524288
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfffbffff00080000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfffbffff00080000, 0xffffffffffffefff, x1, 336, x2)

inst_75:
// rs2_w1_val == 0, rs2_w0_val == 4026531839
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00000200004000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00000200004000, 0x000000efffffff, x1, 344, x2)

inst_76:
// rs2_w0_val == 2863311530, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffffbfff00400000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffffbfff00400000, 0xffffefffaaaaaaaa, x1, 352, x2)

inst_77:
// rs2_w0_val == 1431655765, rs1_w0_val == 4294836223, rs1_w1_val == 8192
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x002000fffdffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x002000fffdffff, 0x00000e55555555, x1, 360, x2)

inst_78:
// rs2_w0_val == 2147483647, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x000001ffffff7f;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x000001ffffff7f, 0x0080007fffffff, x1, 368, x2)

inst_79:
// rs2_w0_val == 4278190079, rs1_w1_val == 67108864
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x4000000ffffffbf;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x4000000ffffffbf, 0xffff7ffffeffffff, x1, 376, x2)

inst_80:
// rs2_w0_val == 4292870143, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00020000002000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00020000002000, 0xffffbfffffdfffff, x1, 384, x2)

inst_81:
// rs2_w0_val == 4294443007, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00000f0000000e;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00000f0000000e, 0x000006fff7ffff, x1, 392, x2)

inst_82:
// rs2_w0_val == 4294705151, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x0200000000000e;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x0200000000000e, 0x000012fffbffff, x1, 400, x2)

inst_83:
// rs2_w0_val == 4294901759, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffffbfffbfffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffffbfffbfffffff, 0xff7ffffffffeffff, x1, 408, x2)

inst_84:
// rs2_w0_val == 4294950911, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x0000050000000c;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x0000050000000c, 0x00000cffffbfff, x1, 416, x2)

inst_85:
// rs2_w0_val == 4294965247, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00000fbfffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00000fbfffffff, 0x000100fffff7ff, x1, 424, x2)

inst_86:
// rs2_w0_val == 4294966783, rs1_w1_val == 4
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x000004fffffffe;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x000004fffffffe, 0x000100fffffdff, x1, 432, x2)

inst_87:
// rs2_w0_val == 4294967167, rs1_w1_val == 4294967039, rs1_w0_val == 33554432
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfffffeff02000000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfffffeff02000000, 0x008000ffffff7f, x1, 440, x2)

inst_88:
// rs2_w0_val == 4294967231, rs1_w0_val == 4278190079
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x000007feffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x000007feffffff, 0x000013ffffffbf, x1, 448, x2)

inst_89:
// rs2_w0_val == 64, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfffff7ff00000009;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000009, 0x00001000000040, x1, 456, x2)

inst_90:
// rs2_w0_val == 32, rs1_w1_val == 2048
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x000800fffdffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x000800fffdffff, 0x20000000000020, x1, 464, x2)

inst_91:
// rs2_w0_val == 0, rs1_w0_val == 4294901759
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffff7ffffffeffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffff7ffffffeffff, 0x80000000000000, x1, 472, x2)

inst_92:
// rs1_w1_val == 2863311530, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xaaaaaaaa00000400;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa00000400, 0x00000bfff7ffff, x1, 480, x2)

inst_93:
// rs1_w1_val == 2147483647, rs1_w0_val == 4294443007
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x7ffffffffff7ffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x7ffffffffff7ffff, 0xffffbffffffeffff, x1, 488, x2)

inst_94:
// rs1_w1_val == 3221225471, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xbffffffffffffbff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xbffffffffffffbff, 0xdfffffffefffffff, x1, 496, x2)

inst_95:
// rs1_w1_val == 4160749567, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xf7ffffff0000000d;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xf7ffffff0000000d, 0x010000fffffffd, x1, 504, x2)

inst_96:
// rs1_w1_val == 4227858431, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfbfffffffeffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfbfffffffeffffff, 0x00010000002000, x1, 512, x2)

inst_97:
// rs1_w1_val == 4278190079, rs1_w0_val == 131072
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfeffffff00020000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfeffffff00020000, 0x000013ffffefff, x1, 520, x2)

inst_98:
// rs1_w1_val == 4292870143, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffdfffffffdfffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffdfffffffdfffff, 0x000003ffffdfff, x1, 528, x2)

inst_99:
// rs1_w1_val == 4294443007, rs1_w0_val == 268435456
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfff7ffff10000000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfff7ffff10000000, 0x008000feffffff, x1, 536, x2)

inst_100:
// rs1_w1_val == 4294836223, rs1_w0_val == 4026531839
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfffdffffefffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfffdffffefffffff, 0x00000200000080, x1, 544, x2)

inst_101:
// rs1_w1_val == 4294963199, rs1_w0_val == 65536
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffffefff00010000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffffefff00010000, 0xfffffeff00000007, x1, 552, x2)

inst_102:
// rs1_w1_val == 4294967263, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffffffdfffffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffffffdfffffffff, 0x7fffffff01000000, x1, 560, x2)

inst_103:
// rs1_w1_val == 4294967287, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfffffff7bfffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfffffff7bfffffff, 0x00000f00080000, x1, 568, x2)

inst_104:
// rs1_w1_val == 4294967291, rs2_w0_val == 256
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfffffffb00000010;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000010, 0x1000000000000100, x1, 576, x2)

inst_105:
// rs1_w1_val == 4294967293, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfffffffd00000009;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000009, 0x00000fffefffff, x1, 584, x2)

inst_106:
// rs1_w1_val == 536870912, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x2000000002000000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x2000000002000000, 0x00200000080000, x1, 592, x2)

inst_107:
// rs1_w1_val == 268435456, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x100000000000000c;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x100000000000000c, 0x01000008000000, x1, 600, x2)

inst_108:
// rs1_w1_val == 8388608, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x80000000400000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x80000000400000, 0xffff7fffffffffff, x1, 608, x2)

inst_109:
// rs1_w1_val == 4194304, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x40000000002000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x40000000002000, 0xfff7ffff00000009, x1, 616, x2)

inst_110:
// rs1_w1_val == 256, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00010000000009;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00010000000009, 0x00001200200000, x1, 624, x2)

inst_111:
// rs1_w1_val == 128, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00008000000007;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00008000000007, 0xfffffbff00000004, x1, 632, x2)

inst_112:
// rs1_w1_val == 16, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x000010fffffbff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x000010fffffbff, 0x00200000000040, x1, 640, x2)

inst_113:
// rs1_w1_val == 4294967295, rs2_w0_val == 4294967294
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffffffff00000001;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffffffff00000001, 0xffdffffffffffffe, x1, 648, x2)

inst_114:
// rs1_w0_val == 1431655765, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfffffffe55555555;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfffffffe55555555, 0xfeffffff55555555, x1, 656, x2)

inst_115:
// rs1_w0_val == 3758096383, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffffffbfdfffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffffffbfdfffffff, 0x000800ff7fffff, x1, 664, x2)

inst_116:
// rs1_w0_val == 4160749567, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x001000f7ffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x001000f7ffffff, 0x000008ffffdfff, x1, 672, x2)

inst_117:
// rs1_w0_val == 4227858431, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfffbfffffbffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfffbfffffbffffff, 0x020000efffffff, x1, 680, x2)

inst_118:
// rs1_w0_val == 4261412863, rs2_w0_val == 1048576
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x000006fdffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x000006fdffffff, 0xffffffdf00100000, x1, 688, x2)

inst_119:
// rs1_w0_val == 4290772991, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfbffffffffbfffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfbffffffffbfffff, 0x00100000000008, x1, 696, x2)

inst_120:
// rs2_w0_val == 16384, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00000d00020000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00000d00020000, 0x10000000004000, x1, 704, x2)

inst_121:
// rs1_w0_val == 4294934527, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x000007ffff7fff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x000007ffff7fff, 0x55555555ffdfffff, x1, 712, x2)

inst_122:
// rs1_w0_val == 4294963199, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x001000ffffefff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x001000ffffefff, 0xfffffffdfffffdff, x1, 720, x2)

inst_123:
// rs1_w0_val == 4294967039, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x000003fffffeff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x000003fffffeff, 0x0000807fffffff, x1, 728, x2)

inst_124:
// rs2_w0_val == 1073741824, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffffdfffffffff7f;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffffdfffffffff7f, 0x01000040000000, x1, 736, x2)

inst_125:
// rs2_w0_val == 536870912, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffffbfff00000100;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffffbfff00000100, 0x01000020000000, x1, 744, x2)

inst_126:
// rs1_w0_val == 4294967263, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x010000ffffffdf;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x010000ffffffdf, 0x0002000000000f, x1, 752, x2)

inst_127:
// rs1_w0_val == 4294967287, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffffffbffffffff7;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffffffbffffffff7, 0xfffffffebfffffff, x1, 760, x2)

inst_128:
// rs1_w0_val == 4294967293, rs1_w1_val == 262144
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x040000fffffffd;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x040000fffffffd, 0x200000008000000, x1, 768, x2)

inst_129:
// rs1_w0_val == 2147483648, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00000f80000000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00000f80000000, 0x5555555500080000, x1, 776, x2)

inst_130:
// rs1_w0_val == 1073741824, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xfffdffff40000000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xfffdffff40000000, 0xfffeffff00000005, x1, 784, x2)

inst_131:
// rs1_w0_val == 536870912, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00000f20000000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00000f20000000, 0x00001100400000, x1, 792, x2)

inst_132:
// rs2_w0_val == 1024, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x000020efffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x000020efffffff, 0x00000f00000400, x1, 800, x2)

inst_133:
// rs2_w0_val == 262144, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffdfffff10000000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffdfffff10000000, 0x02000000040000, x1, 808, x2)

inst_134:
// rs2_w0_val == 2048, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x80000000fff7ffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x80000000fff7ffff, 0xf7ffffff00000800, x1, 816, x2)

inst_135:
// rs1_w1_val == 16384, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x004000bfffffff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x004000bfffffff, 0xfffffffeffffbfff, x1, 824, x2)

inst_136:
// rs1_w1_val == 2097152, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x200000aaaaaaaa;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x200000aaaaaaaa, 0x000012ffffbfff, x1, 832, x2)

inst_137:
// rs1_w1_val == 524288, 
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x0800000000000c;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x0800000000000c, 0xffffffbfffffbfff, x1, 840, x2)

inst_138:
// rs2_w1_val == 1431655765, rs1_w0_val == 4294966783, rs1_w1_val == 0, rs2_w0_val == 512
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x000000fffffdff;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x000000fffffdff, 0x5555555500000200, x1, 848, x2)

inst_139:
// rs2_w1_val == 4290772991, rs1_w0_val == 1048576, rs1_w1_val == 4096, rs2_w0_val == 2147483648
// opcode: uraddw ; op1:x30; dest:x31; op1val:0x00100000100000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0x00100000100000, 0xffbfffff80000000, x1, 856, x2)

inst_140:
// rs2_w1_val == 4294967039, rs1_w1_val == 4294967231, rs1_w0_val == 67108864
// opcode: uraddw ; op1:x30; dest:x31; op1val:0xffffffbf04000000;  immval:$imm_val
TEST_RR_OP(uraddw, x31, x30, x29, 0x0000000000000000, 0xffffffbf04000000, 0xfffffeff10000000, x1, 864, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x13_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 109*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
