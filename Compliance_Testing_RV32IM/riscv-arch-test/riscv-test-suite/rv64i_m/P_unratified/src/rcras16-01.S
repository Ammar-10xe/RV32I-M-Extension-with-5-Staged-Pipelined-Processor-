
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rcras16 instruction of the RISC-V RV64PZicsr extension for the rcras16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",rcras16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x14, rs2==x2, rd==x14, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h3_val == -513, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h2_val == -9, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h1_val == 128, rs1_h1_val == -9
// opcode: rcras16 ; op1:x14; op2:x2; dest:x14; op1val:0xc000fff9fff78000;  op2val:0xfdfffff700800003
TEST_RR_OP(rcras16, x14, x14, x2, 0x0000000000000000, 0xc000fff9fff78000, 0xfdfffff700800003, x7, 0, x10)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x20, rs2==x3, rd==x12, rs1_h3_val == rs2_h3_val, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val < 0 and rs2_h2_val > 0, rs2_h1_val == -129, rs1_h1_val == 32, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val == rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h2_val == -33, rs2_h2_val == 4
// opcode: rcras16 ; op1:x20; op2:x3; dest:x12; op1val:0x09ffdf0020fffa;  op2val:0x090004ff7ffffa
TEST_RR_OP(rcras16, x12, x20, x3, 0x0000000000000000, 0x09ffdf0020fffa, 0x090004ff7ffffa, x7, 8, x10)

inst_2:
// rs1 == rs2 != rd, rs1==x9, rs2==x9, rd==x23, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h0_val == -3, rs2_h0_val == 21845, rs2_h3_val == 2048, rs2_h1_val == -2, rs1_h3_val == -33, rs1_h2_val == -257
// opcode: rcras16 ; op1:x9; op2:x9; dest:x23; op1val:0xffdffeff0020fffd;  op2val:0x800fff7fffe5555
TEST_RR_OP(rcras16, x23, x9, x9, 0x0000000000000000, 0xffdffeff0020fffd, 0x800fff7fffe5555, x7, 16, x10)

inst_3:
// rs1 == rs2 == rd, rs1==x8, rs2==x8, rd==x8, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == -1, rs2_h3_val == -65, rs2_h0_val == -3, rs1_h2_val == -17, rs2_h2_val == 8, rs1_h0_val == -129
// opcode: rcras16 ; op1:x8; op2:x8; dest:x8; op1val:0x03ffef0020ff7f;  op2val:0xffbf0008fffffffd
TEST_RR_OP(rcras16, x8, x8, x8, 0x0000000000000000, 0x03ffef0020ff7f, 0xffbf0008fffffffd, x7, 24, x10)

inst_4:
// rs2 == rd != rs1, rs1==x18, rs2==x17, rd==x17, rs1_h2_val == rs2_h2_val, rs1_h3_val == 256, rs1_h1_val == -2, rs2_h1_val == -1025, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h3_val == 1, rs1_h2_val == -9
// opcode: rcras16 ; op1:x18; op2:x17; dest:x17; op1val:0x100fff7fffefffd;  op2val:0x01fff7fbff0007
TEST_RR_OP(rcras16, x17, x18, x17, 0x0000000000000000, 0x100fff7fffefffd, 0x01fff7fbff0007, x7, 32, x10)

inst_5:
// rs1==x31, rs2==x0, rd==x15, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h2_val == 16384, rs2_h0_val == 2, rs2_h2_val == -33, rs1_h1_val == 16, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 8, rs2_h1_val == 256, rs1_h3_val == 8192
// opcode: rcras16 ; op1:x31; op2:x0; dest:x15; op1val:0x200040000010c000;  op2val:0x08ffdf01000002
TEST_RR_OP(rcras16, x15, x31, x0, 0x0000000000000000, 0x200040000010c000, 0x08ffdf01000002, x7, 40, x10)

inst_6:
// rs1==x2, rs2==x14, rd==x19, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 8192, rs2_h1_val == -16385, rs1_h3_val == -2049, rs2_h3_val == 128, rs1_h0_val == 2, rs1_h0_val > 0 and rs2_h0_val < 0
// opcode: rcras16 ; op1:x2; op2:x14; dest:x19; op1val:0xf7ff200000200002;  op2val:0x803fffbffffff9
TEST_RR_OP(rcras16, x19, x2, x14, 0x0000000000000000, 0xf7ff200000200002, 0x803fffbffffff9, x7, 48, x10)

inst_7:
// rs1==x26, rs2==x25, rd==x18, rs1_h1_val == rs2_h1_val, rs2_h3_val == 2, rs1_h2_val == 8, rs2_h1_val == 32, rs2_h0_val == 512
// opcode: rcras16 ; op1:x26; op2:x25; dest:x18; op1val:0xfff9000800208000;  op2val:0x02000600200200
TEST_RR_OP(rcras16, x18, x26, x25, 0x0000000000000000, 0xfff9000800208000, 0x02000600200200, x7, 56, x10)

inst_8:
// rs1==x13, rs2==x26, rd==x0, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 32767, rs1_h0_val == 4096, rs1_h1_val == 128, rs2_h1_val == -65, rs1_h3_val == -32768
// opcode: rcras16 ; op1:x13; op2:x26; dest:x0; op1val:0x8000000700801000;  op2val:0xffbffffcffbf7fff
TEST_RR_OP(rcras16, x0, x13, x26, 0x0000000000000000, 0x8000000700801000, 0xffbffffcffbf7fff, x7, 64, x10)

inst_9:
// rs1==x28, rs2==x21, rd==x30, rs2_h3_val == -21846, rs1_h0_val == -5, rs1_h1_val == 4096, rs1_h3_val == 4, rs2_h0_val == -32768, rs2_h2_val == -21846
// opcode: rcras16 ; op1:x28; op2:x21; dest:x30; op1val:0x04fffa1000fffb;  op2val:0xaaaaaaaa00808000
TEST_RR_OP(rcras16, x30, x28, x21, 0x0000000000000000, 0x04fffa1000fffb, 0xaaaaaaaa00808000, x7, 72, x10)

inst_10:
// rs1==x25, rs2==x31, rd==x29, rs2_h3_val == 21845, rs1_h1_val == -5, rs2_h1_val == -17, rs1_h3_val == -17, rs2_h2_val == -257
// opcode: rcras16 ; op1:x25; op2:x31; dest:x29; op1val:0xffeffff8fffb3fff;  op2val:0x5555feffffef0003
TEST_RR_OP(rcras16, x29, x25, x31, 0x0000000000000000, 0xffeffff8fffb3fff, 0x5555feffffef0003, x7, 80, x10)

inst_11:
// rs1==x0, rs2==x5, rd==x4, rs2_h3_val == 32767, rs1_h0_val == -65, rs2_h0_val == 32, rs1_h2_val == 1, rs2_h2_val == 4096, rs1_h3_val == 4096, rs1_h1_val == -17
// opcode: rcras16 ; op1:x0; op2:x5; dest:x4; op1val:0x10000001ffefffbf;  op2val:0x7fff1000ff7f0020
TEST_RR_OP(rcras16, x4, x0, x5, 0x0000000000000000, 0x10000001ffefffbf, 0x7fff1000ff7f0020, x7, 88, x10)

inst_12:
// rs1==x19, rs2==x15, rd==x5, rs2_h3_val == -16385, rs2_h0_val == -16385, rs1_h3_val == -3, rs2_h1_val == 16384, rs2_h2_val == 32767
// opcode: rcras16 ; op1:x19; op2:x15; dest:x5; op1val:0xfffdfeff0010c000;  op2val:0xbfff7fff4000bfff
TEST_RR_OP(rcras16, x5, x19, x15, 0x0000000000000000, 0xfffdfeff0010c000, 0xbfff7fff4000bfff, x7, 96, x10)

inst_13:
// rs1==x3, rs2==x19, rd==x6, rs2_h3_val == -8193, rs1_h3_val == -513, rs1_h0_val == 256, rs2_h0_val == -1025, rs1_h2_val == 4
// opcode: rcras16 ; op1:x3; op2:x19; dest:x6; op1val:0xfdff0004fffe0100;  op2val:0xdfffaaaafffefbff
TEST_RR_OP(rcras16, x6, x3, x19, 0x0000000000000000, 0xfdff0004fffe0100, 0xdfffaaaafffefbff, x7, 104, x10)

inst_14:
// rs1==x15, rs2==x13, rd==x22, rs2_h3_val == -4097, rs2_h2_val == -1, rs1_h3_val == 64, rs1_h2_val == 2, rs2_h1_val == -9, rs1_h0_val == -257
// opcode: rcras16 ; op1:x15; op2:x13; dest:x22; op1val:0x400002c000feff;  op2val:0xeffffffffff7fff9
TEST_RR_OP(rcras16, x22, x15, x13, 0x0000000000000000, 0x400002c000feff, 0xeffffffffff7fff9, x7, 112, x10)

inst_15:
// rs1==x21, rs2==x29, rd==x1, rs2_h3_val == -2049, rs1_h3_val == 1024, rs2_h1_val == 0
// opcode: rcras16 ; op1:x21; op2:x29; dest:x1; op1val:0x4000006fff6fff9;  op2val:0xf7ff00080000fff8
TEST_RR_OP(rcras16, x1, x21, x29, 0x0000000000000000, 0x4000006fff6fff9, 0xf7ff00080000fff8, x7, 120, x10)

inst_16:
// rs1==x29, rs2==x23, rd==x11, rs2_h3_val == -1025, rs2_h0_val == -65, rs2_h2_val == 128, rs1_h0_val == -513, rs1_h1_val == -65, rs1_h2_val == -3, rs2_h1_val == 8
// opcode: rcras16 ; op1:x29; op2:x23; dest:x11; op1val:0xfff8fffdffbffdff;  op2val:0xfbff00800008ffbf
TEST_RR_OP(rcras16, x11, x29, x23, 0x0000000000000000, 0xfff8fffdffbffdff, 0xfbff00800008ffbf, x7, 128, x10)

inst_17:
// rs1==x4, rs2==x24, rd==x28, rs2_h3_val == -257, rs1_h0_val == 32, rs1_h1_val == -3, rs2_h0_val == -9, rs1_h2_val == 0
// opcode: rcras16 ; op1:x4; op2:x24; dest:x28; op1val:0xfff60000fffd0020;  op2val:0xfeff0004fff9fff7
TEST_RR_OP(rcras16, x28, x4, x24, 0x0000000000000000, 0xfff60000fffd0020, 0xfeff0004fff9fff7, x7, 136, x14)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_18:
// rs1==x30, rs2==x27, rd==x21, rs2_h3_val == -129, rs2_h2_val == -17, rs1_h2_val == -4097, rs1_h1_val == -16385, rs1_h0_val == -2049, rs2_h0_val == 128
// opcode: rcras16 ; op1:x30; op2:x27; dest:x21; op1val:0x8000efffbffff7ff;  op2val:0xff7fffef01000080
TEST_RR_OP(rcras16, x21, x30, x27, 0x0000000000000000, 0x8000efffbffff7ff, 0xff7fffef01000080, x8, 0, x14)

inst_19:
// rs1==x23, rs2==x22, rd==x9, rs2_h3_val == -33, rs1_h0_val == 1024, rs1_h3_val == 8
// opcode: rcras16 ; op1:x23; op2:x22; dest:x9; op1val:0x08fff7fffe0400;  op2val:0xffdf0003fff70007
TEST_RR_OP(rcras16, x9, x23, x22, 0x0000000000000000, 0x08fff7fffe0400, 0xffdf0003fff70007, x8, 8, x14)

inst_20:
// rs1==x12, rs2==x4, rd==x16, rs2_h3_val == -17, rs1_h1_val == 0, rs2_h2_val == 2048, rs1_h2_val == 256
// opcode: rcras16 ; op1:x12; op2:x4; dest:x16; op1val:0x0601000000fff9;  op2val:0xffef0800fff8bfff
TEST_RR_OP(rcras16, x16, x12, x4, 0x0000000000000000, 0x0601000000fff9, 0xffef0800fff8bfff, x8, 16, x14)

inst_21:
// rs1==x16, rs2==x11, rd==x31, rs2_h3_val == -9, rs1_h0_val == -8193, rs1_h3_val == -4097
// opcode: rcras16 ; op1:x16; op2:x11; dest:x31; op1val:0xeffffff90000dfff;  op2val:0xfff7c0003ffffff7
TEST_RR_OP(rcras16, x31, x16, x11, 0x0000000000000000, 0xeffffff90000dfff, 0xfff7c0003ffffff7, x8, 24, x14)

inst_22:
// rs1==x5, rs2==x16, rd==x24, rs2_h3_val == -5, rs1_h0_val == 128
// opcode: rcras16 ; op1:x5; op2:x16; dest:x24; op1val:0xc00000093fff0080;  op2val:0xfffb0005fffa0006
TEST_RR_OP(rcras16, x24, x5, x16, 0x0000000000000000, 0xc00000093fff0080, 0xfffb0005fffa0006, x8, 32, x14)

inst_23:
// rs1==x6, rs2==x7, rd==x20, rs2_h3_val == -3, rs1_h1_val == -2049
// opcode: rcras16 ; op1:x6; op2:x7; dest:x20; op1val:0xc0000002f7fffff9;  op2val:0xfffdfffffff7bfff
TEST_RR_OP(rcras16, x20, x6, x7, 0x0000000000000000, 0xc0000002f7fffff9, 0xfffdfffffff7bfff, x8, 40, x14)

inst_24:
// rs1==x1, rs2==x10, rd==x26, rs2_h3_val == -2, rs2_h2_val == -513, rs2_h0_val == 0, rs1_h3_val == -1025, rs1_h1_val == 4, rs2_h1_val == 4096, rs1_h0_val == 21845
// opcode: rcras16 ; op1:x1; op2:x10; dest:x26; op1val:0xfbff000900045555;  op2val:0xfffefdff10000000
TEST_RR_OP(rcras16, x26, x1, x10, 0x0000000000000000, 0xfbff000900045555, 0xfffefdff10000000, x8, 48, x14)

inst_25:
// rs1==x7, rs2==x28, rd==x2, rs2_h3_val == -32768, rs2_h0_val == -33, rs1_h0_val == 16
// opcode: rcras16 ; op1:x7; op2:x28; dest:x2; op1val:0xefffffefffef0010;  op2val:0x8000fffcfbffffdf
TEST_RR_OP(rcras16, x2, x7, x28, 0x0000000000000000, 0xefffffefffef0010, 0x8000fffcfbffffdf, x8, 56, x14)

inst_26:
// rs1==x10, rs2==x6, rd==x7, rs2_h3_val == 16384, rs2_h1_val == -257, rs1_h3_val == 128, rs2_h0_val == 4, rs1_h1_val == 16384
// opcode: rcras16 ; op1:x10; op2:x6; dest:x7; op1val:0x8000014000fffa;  op2val:0x40007ffffeff0004
TEST_RR_OP(rcras16, x7, x10, x6, 0x0000000000000000, 0x8000014000fffa, 0x40007ffffeff0004, x8, 64, x14)

inst_27:
// rs1==x24, rs2==x20, rd==x25, rs2_h3_val == 8192, rs1_h2_val == 128
// opcode: rcras16 ; op1:x24; op2:x20; dest:x25; op1val:0xfffa00800004fff8;  op2val:0x200000090003fff8
TEST_RR_OP(rcras16, x25, x24, x20, 0x0000000000000000, 0xfffa00800004fff8, 0x200000090003fff8, x8, 72, x14)

inst_28:
// rs1==x11, rs2==x12, rd==x13, rs2_h3_val == 4096, rs2_h2_val == 64, rs1_h2_val == -8193, rs1_h1_val == -257, rs1_h3_val == -129
// opcode: rcras16 ; op1:x11; op2:x12; dest:x13; op1val:0xff7fdffffefffff6;  op2val:0x100000400006fff7
TEST_RR_OP(rcras16, x13, x11, x12, 0x0000000000000000, 0xff7fdffffefffff6, 0x100000400006fff7, x8, 80, x14)

inst_29:
// rs1==x27, rs2==x30, rd==x10, rs2_h3_val == 1024, rs1_h0_val == -16385, rs2_h2_val == 0
// opcode: rcras16 ; op1:x27; op2:x30; dest:x10; op1val:0xfdfffffdfffbbfff;  op2val:0x4000000ffbf0002
TEST_RR_OP(rcras16, x10, x27, x30, 0x0000000000000000, 0xfdfffffdfffbbfff, 0x4000000ffbf0002, x8, 88, x14)

inst_30:
// rs1==x17, rs2==x18, rd==x3, rs2_h3_val == 512, rs2_h2_val == 16384, rs1_h1_val == 1024, rs2_h0_val == 16
// opcode: rcras16 ; op1:x17; op2:x18; dest:x3; op1val:0x2000200004001000;  op2val:0x2004000fff80010
TEST_RR_OP(rcras16, x3, x17, x18, 0x0000000000000000, 0x2000200004001000, 0x2004000fff80010, x8, 96, x14)

inst_31:
// rs1==x22, rs2==x1, rd==x27, rs2_h3_val == 256, rs1_h1_val == -513, rs1_h2_val == 21845, rs2_h1_val == -33, rs2_h2_val == 21845
// opcode: rcras16 ; op1:x22; op2:x1; dest:x27; op1val:0xf7ff5555fdff0005;  op2val:0x1005555ffdf0010
TEST_RR_OP(rcras16, x27, x22, x1, 0x0000000000000000, 0xf7ff5555fdff0005, 0x1005555ffdf0010, x8, 104, x2)

inst_32:
// rs2_h3_val == 64, rs2_h1_val == -513, rs2_h2_val == -2049
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x05010040000080;  op2val:0x40f7fffdff5555
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x05010040000080, 0x40f7fffdff5555, x8, 112, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_33:
// rs2_h3_val == 32, rs1_h0_val == 8192, rs1_h3_val == -16385
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff000800202000;  op2val:0x200008fff8fbff
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xbfff000800202000, 0x200008fff8fbff, x1, 0, x2)

inst_34:
// rs2_h3_val == 16, rs2_h1_val == 1, rs2_h0_val == -5, rs2_h2_val == -32768
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf4000f7ff1000;  op2val:0x1080000001fffb
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xffdf4000f7ff1000, 0x1080000001fffb, x1, 8, x2)

inst_35:
// rs2_h3_val == 4, rs1_h2_val == 32767
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x807ffffff9feff;  op2val:0x04000500060020
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x807ffffff9feff, 0x04000500060020, x1, 16, x2)

inst_36:
// rs1_h1_val == -32768, rs1_h2_val == 32, rs1_h3_val == 32767
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff00208000dfff;  op2val:0xfffdfeffc000ffbf
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x7fff00208000dfff, 0xfffdfeffc000ffbf, x1, 24, x2)

inst_37:
// rs1_h1_val == 8192, rs2_h2_val == -8193, rs1_h0_val == -9
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0540002000fff7;  op2val:0x8000dfff00060000
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x0540002000fff7, 0x8000dfff00060000, x1, 32, x2)

inst_38:
// rs1_h1_val == 2048, rs2_h2_val == -16385, rs1_h0_val == 16384
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x400fffc08004000;  op2val:0x08bffffff6fffc
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x400fffc08004000, 0x08bffffff6fffc, x1, 40, x2)

inst_39:
// rs1_h1_val == 512, rs2_h1_val == 32767
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8002002000080;  op2val:0xfffb00007ffffbff
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xfff8002002000080, 0xfffb00007ffffbff, x1, 48, x2)

inst_40:
// rs1_h1_val == 256, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff01000100fffa;  op2val:0xc000c000c0000010
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xf7ff01000100fffa, 0xc000c000c0000010, x1, 56, x2)

inst_41:
// rs1_h1_val == 64, rs1_h3_val == -257
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff00050040bfff;  op2val:0xefffbfff00050080
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xfeff00050040bfff, 0xefffbfff00050080, x1, 64, x2)

inst_42:
// rs1_h1_val == 8, rs2_h0_val == -1, rs1_h0_val == -1025
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x100fffd0008fbff;  op2val:0x10000008c000ffff
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x100fffd0008fbff, 0x10000008c000ffff, x1, 72, x2)

inst_43:
// rs1_h1_val == 2, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffc0002fffb;  op2val:0x7fff0040fffa0080
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xfbfffffc0002fffb, 0x7fff0040fffa0080, x1, 80, x2)

inst_44:
// rs1_h1_val == 1, rs2_h0_val == -8193, rs1_h0_val == -17
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0500000001ffef;  op2val:0x8000bffffff7dfff
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x0500000001ffef, 0x8000bffffff7dfff, x1, 88, x2)

inst_45:
// rs1_h1_val == -1, rs1_h2_val == 16, rs2_h1_val == -2049
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef0010fffffffc;  op2val:0x108000f7ff0004
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xffef0010fffffffc, 0x108000f7ff0004, x1, 96, x2)

inst_46:
// rs1_h0_val == -21846, rs2_h0_val == 16384
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff800090100aaaa;  op2val:0x80ffff00084000
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xfff800090100aaaa, 0x80ffff00084000, x1, 104, x2)

inst_47:
// rs1_h0_val == 32767, rs2_h1_val == -32768, rs1_h3_val == 16
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fffafff97fff;  op2val:0xaaaa55558000ffbf
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x10fffafff97fff, 0xaaaa55558000ffbf, x1, 112, x2)

inst_48:
// rs1_h0_val == -4097, rs2_h1_val == 8192
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0000fffcefff;  op2val:0xfff8fff82000c000
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xfbff0000fffcefff, 0xfff8fff82000c000, x1, 120, x2)

inst_49:
// rs1_h0_val == -33, rs1_h3_val == 2, rs2_h2_val == -4097, rs2_h3_val == -1
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0200000200ffdf;  op2val:0xffffefffffef5555
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x0200000200ffdf, 0xffffefffffef5555, x1, 128, x2)

inst_50:
// rs1_h0_val == -2, rs2_h1_val == -3, rs2_h2_val == 1
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x07fefffefffffe;  op2val:0xfff60001fffdfbff
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x07fefffefffffe, 0xfff60001fffdfbff, x1, 136, x2)

inst_51:
// rs1_h0_val == 2048, rs1_h2_val == -21846
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x400aaaafffe0800;  op2val:0x01fff6fffa0080
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x400aaaafffe0800, 0x01fff6fffa0080, x1, 144, x2)

inst_52:
// rs1_h0_val == 512, rs2_h1_val == 1024, rs2_h0_val == -2049, rs1_h3_val == 16384
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff900070200;  op2val:0x8000ffdf0400f7ff
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x4000fff900070200, 0x8000ffdf0400f7ff, x1, 152, x2)

inst_53:
// rs1_h0_val == 64, rs2_h2_val == -2
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffeffffc0040;  op2val:0x40fffe00090200
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xffefffeffffc0040, 0x40fffe00090200, x1, 160, x2)

inst_54:
// rs1_h0_val == 8, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000093fff0008;  op2val:0x100fffa00050006
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x100000093fff0008, 0x100fffa00050006, x1, 168, x2)

inst_55:
// rs1_h0_val == 4, rs2_h1_val == -5, rs1_h2_val == 1024, rs1_h3_val == 32
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x200400c0000004;  op2val:0xaaaa4000fffb3fff
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x200400c0000004, 0xaaaa4000fffb3fff, x1, 176, x2)

inst_56:
// rs1_h0_val == 1, rs1_h2_val == -65, rs1_h3_val == 512
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x200ffbffff80001;  op2val:0x40fff7ffefffbf
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x200ffbffff80001, 0x40fff7ffefffbf, x1, 184, x2)

inst_57:
// rs1_h0_val == 0, rs1_h3_val == 1
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ffbf01000000;  op2val:0xefffc000ffdfbfff
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x01ffbf01000000, 0xefffc000ffdfbfff, x1, 192, x2)

inst_58:
// rs1_h0_val == -1, rs2_h1_val == 2
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000050008ffff;  op2val:0x10010000002fff8
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x100000050008ffff, 0x10010000002fff8, x1, 200, x2)

inst_59:
// rs2_h3_val == 0, rs2_h0_val == -4097, rs2_h1_val == -4097
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffdffff7fff7;  op2val:0x000003efffefff
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x8000ffdffff7fff7, 0x000003efffefff, x1, 208, x2)

inst_60:
// rs2_h2_val == -1025, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0100074000fbff;  op2val:0x4000fbfffff8fffa
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x0100074000fbff, 0x4000fbfffff8fffa, x1, 216, x2)

inst_61:
// rs2_h2_val == -129, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef555500807fff;  op2val:0x03ff7f0400ffff
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xffef555500807fff, 0x03ff7f0400ffff, x1, 224, x2)

inst_62:
// rs2_h1_val == 4, rs2_h0_val == 1024
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfdfff00030400;  op2val:0xfffb000600040400
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xffdfdfff00030400, 0xfffb000600040400, x1, 232, x2)

inst_63:
// rs2_h0_val == -21846, rs1_h2_val == -5
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x400fffbfff94000;  op2val:0xfff9fff6ffdfaaaa
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x400fffbfff94000, 0xfff9fff6ffdfaaaa, x1, 240, x2)

inst_64:
// rs2_h0_val == -513, rs2_h2_val == -65
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffdfff8fffe;  op2val:0x02ffbffffefdff
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x2000fffdfff8fffe, 0x02ffbffffefdff, x1, 248, x2)

inst_65:
// rs2_h0_val == -257, rs1_h1_val == 32767, rs1_h3_val == 2048
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x800feff7fff0100;  op2val:0xff7fbfff0008feff
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x800feff7fff0100, 0xff7fbfff0008feff, x1, 256, x2)

inst_66:
// rs2_h0_val == -129, rs1_h2_val == -16385
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x03bfff7fffc000;  op2val:0x400efffefffff7f
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x03bfff7fffc000, 0x400efffefffff7f, x1, 264, x2)

inst_67:
// rs2_h0_val == -17, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fff700010005;  op2val:0xff7fffff0002ffef
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x03fff700010005, 0xff7fffff0002ffef, x1, 272, x2)

inst_68:
// rs2_h0_val == -2, rs1_h2_val == 2048
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x020800bffffeff;  op2val:0x0000400007fffe
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x020800bffffeff, 0x0000400007fffe, x1, 280, x2)

inst_69:
// rs2_h0_val == 8192, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffdf3fff0000;  op2val:0x03ffeffffa2000
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x8000ffdf3fff0000, 0x03ffeffffa2000, x1, 288, x2)

inst_70:
// rs2_h0_val == 4096, rs2_h2_val == -5
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000004f7ffffbf;  op2val:0xeffffffb00051000
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x8000004f7ffffbf, 0xeffffffb00051000, x1, 296, x2)

inst_71:
// rs2_h0_val == 2048, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x010007fff6efff;  op2val:0x10fffbffbf0800
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x010007fff6efff, 0x10fffbffbf0800, x1, 304, x2)

inst_72:
// rs2_h0_val == 256, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff40000800aaaa;  op2val:0x8000bfffffdf0100
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xf7ff40000800aaaa, 0x8000bfffffdf0100, x1, 312, x2)

inst_73:
// rs2_h0_val == 64, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000bfff0003ffef;  op2val:0xffdff7fffffc0040
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x1000bfff0003ffef, 0xffdff7fffffc0040, x1, 320, x2)

inst_74:
// rs2_h0_val == 8, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x05feff2000ff7f;  op2val:0xdfffefff04000008
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x05feff2000ff7f, 0xdfffefff04000008, x1, 328, x2)

inst_75:
// rs2_h0_val == 1, rs1_h2_val == 64
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0040fdff0010;  op2val:0x09fefffbff0001
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xffdf0040fdff0010, 0x09fefffbff0001, x1, 336, x2)

inst_76:
// rs1_h3_val == -21846, rs1_h1_val == 21845
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffd55550400;  op2val:0xaaaabfffc000f7ff
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xaaaafffd55550400, 0xaaaabfffc000f7ff, x1, 344, x2)

inst_77:
// rs1_h3_val == 21845, rs1_h1_val == -1025, rs1_h2_val == 512
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x55550200fbff0000;  op2val:0xdfffffef0100fffe
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x55550200fbff0000, 0xdfffffef0100fffe, x1, 352, x2)

inst_78:
// rs1_h3_val == -8193, rs1_h2_val == -1025
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffbff00072000;  op2val:0xfeff0005fff80008
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xdffffbff00072000, 0xfeff0005fff80008, x1, 360, x2)

inst_79:
// rs1_h3_val == -65, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0002fffa2000;  op2val:0x8000000000200008
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xffbf0002fffa2000, 0x8000000000200008, x1, 368, x2)

inst_80:
// rs1_h3_val == -9, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff70020fffbffff;  op2val:0x80003fff00074000
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xfff70020fffbffff, 0x80003fff00074000, x1, 376, x2)

inst_81:
// rs1_h3_val == 0, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x0000011000fffe;  op2val:0x064000fffa0006
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x0000011000fffe, 0x064000fffa0006, x1, 384, x2)

inst_82:
// rs1_h3_val == -1, rs2_h2_val == -3, rs2_h1_val == 2048
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0003fffeffdf;  op2val:0x1000fffd0800fbff
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xffff0003fffeffdf, 0x1000fffd0800fbff, x1, 392, x2)

inst_83:
// rs2_h2_val == 8192, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff000802000400;  op2val:0xfbff200008008000
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xefff000802000400, 0xfbff200008008000, x1, 400, x2)

inst_84:
// rs1_h2_val == -2049, rs1_h3_val == -2
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffef7ff00000001;  op2val:0xbfffbffffff6aaaa
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xfffef7ff00000001, 0xbfffbffffff6aaaa, x1, 408, x2)

inst_85:
// rs2_h2_val == 1024, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff0100ffeffdff;  op2val:0xfff904003fff2000
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xdfff0100ffeffdff, 0xfff904003fff2000, x1, 416, x2)

inst_86:
// rs2_h2_val == 512, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fbfffff7fffb;  op2val:0x3fff02000000fffe
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x1000fbfffff7fffb, 0x3fff02000000fffe, x1, 424, x2)

inst_87:
// rs1_h2_val == -513, rs2_h1_val == 16
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x800fdff0004bfff;  op2val:0x800000500102000
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x800fdff0004bfff, 0x800000500102000, x1, 432, x2)

inst_88:
// rs2_h2_val == 256, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x40003fff00020008;  op2val:0xfffa0100ffeffff8
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x40003fff00020008, 0xfffa0100ffeffff8, x1, 440, x2)

inst_89:
// rs1_h2_val == -129, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffff7ffdffff7f;  op2val:0x3fffaaaa0020fff8
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xdfffff7ffdffff7f, 0x3fffaaaa0020fff8, x1, 448, x2)

inst_90:
// rs2_h2_val == 32, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fff90010ffdf;  op2val:0xdfff00200000efff
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x200fff90010ffdf, 0xdfff00200000efff, x1, 456, x2)

inst_91:
// rs2_h2_val == 16, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffeff00092000;  op2val:0x0600100007c000
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xeffffeff00092000, 0x0600100007c000, x1, 464, x2)

inst_92:
// rs2_h2_val == 2, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff8bffffffbfffa;  op2val:0xfdff0002ffdffff8
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xfff8bffffffbfffa, 0xfdff0002ffdffff8, x1, 472, x2)

inst_93:
// rs2_h1_val == -21846, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fffcbfff0100;  op2val:0xbffffff8aaaaaaaa
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x200fffcbfff0100, 0xbffffff8aaaaaaaa, x1, 480, x2)

inst_94:
// rs2_h1_val == 21845, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x40aaaa00047fff;  op2val:0x20200055550400
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x40aaaa00047fff, 0x20200055550400, x1, 488, x2)

inst_95:
// rs1_h2_val == 4096, rs2_h1_val == 64
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa1000fdfffffc;  op2val:0x800f7ff00402000
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xaaaa1000fdfffffc, 0x800f7ff00402000, x1, 496, x2)

inst_96:
// rs2_h1_val == -8193, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x05004000015555;  op2val:0x800009dffffffa
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x05004000015555, 0x800009dffffffa, x1, 504, x2)

inst_97:
// rs1_h2_val == -1, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00400400;  op2val:0xfff7100000000200
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00400400, 0xfff7100000000200, x1, 512, x2)

inst_98:
// rs1_h1_val == -21846, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0004aaaafffe;  op2val:0x06fdff08000040
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xffdf0004aaaafffe, 0x06fdff08000040, x1, 520, x2)

inst_99:
// rs1_h1_val == -8193, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0010dfffffef;  op2val:0xfffeffdffdfffeff
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xfffe0010dfffffef, 0xfffeffdffdfffeff, x1, 528, x2)

inst_100:
// rs1_h1_val == -4097, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff8efff0080;  op2val:0x5555effffefffffd
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xf7fffff8efff0080, 0x5555effffefffffd, x1, 536, x2)

inst_101:
// rs1_h3_val == -5, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbf7fffefff7ff;  op2val:0x200008000058000
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xfffbf7fffefff7ff, 0x200008000058000, x1, 544, x2)

inst_102:
// rs2_h1_val == 512, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x20f7ff0009ffff;  op2val:0x05ff7f0200ffef
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x20f7ff0009ffff, 0x05ff7f0200ffef, x1, 552, x2)

inst_103:
// rs1_h1_val == -129, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000dfffff7fdfff;  op2val:0x0700800005ffdf
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xc000dfffff7fdfff, 0x0700800005ffdf, x1, 560, x2)

inst_104:
// rs1_h1_val == -33, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000008ffdf8000;  op2val:0xfffdff7ffeff0100
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x10000008ffdf8000, 0xfffdff7ffeff0100, x1, 568, x2)

inst_105:
// rs1_h2_val == -2, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffeffdf0006;  op2val:0x030007fff90040
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xeffffffeffdf0006, 0x030007fff90040, x1, 576, x2)

inst_106:
// rs1_h2_val == -32768, 
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa800000104000;  op2val:0x40080000008aaaa
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0xaaaa800000104000, 0x40080000008aaaa, x1, 584, x2)

inst_107:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == -1, rs2_h3_val == -65, rs2_h0_val == -3, rs1_h2_val == -17, rs2_h2_val == 8, rs1_h0_val == -129
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x03ffef0020ff7f;  op2val:0xffbf0008fffffffd
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x03ffef0020ff7f, 0xffbf0008fffffffd, x1, 592, x2)

inst_108:
// rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 32767, rs1_h0_val == 4096, rs1_h1_val == 128, rs2_h1_val == -65, rs1_h3_val == -32768
// opcode: rcras16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000000700801000;  op2val:0xffbffffcffbf7fff
TEST_RR_OP(rcras16, x31, x30, x29, 0x0000000000000000, 0x8000000700801000, 0xffbffffcffbf7fff, x1, 600, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x8_0:
    .fill 15*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 76*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
