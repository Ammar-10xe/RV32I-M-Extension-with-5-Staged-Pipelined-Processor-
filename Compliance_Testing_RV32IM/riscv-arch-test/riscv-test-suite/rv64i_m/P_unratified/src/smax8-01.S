
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smax8 instruction of the RISC-V RV64PZicsr extension for the smax8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smax8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x10,signature_x10_1)

inst_0:
// rs1 == rd != rs2, rs1==x0, rs2==x23, rd==x0, rs1_b0_val == -128, rs2_b4_val == -1, rs1_b7_val != rs2_b7_val, rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b6_val != rs2_b6_val, rs1_b6_val < 0 and rs2_b6_val < 0, rs2_b3_val == -2, rs1_b5_val != rs2_b5_val, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b4_val != rs2_b4_val, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b3_val != rs2_b3_val, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b2_val != rs2_b2_val, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val, rs2_b2_val == 1, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val < 0, rs2_b1_val == -5, rs2_b7_val == 85, rs1_b2_val == -9, rs2_b0_val == -65, rs2_b6_val == -33, rs1_b7_val == -33, rs1_b1_val == 2, rs2_b5_val == -5, rs1_b5_val == -9
// opcode: smax8 ; op1:x0; op2:x23; dest:x0; op1val:0xdff6f7fc05f70280;  op2val:0x55dffbfffe01fbbf
TEST_RR_OP(smax8, x0, x0, x23, 0x0000000000000000, 0xdff6f7fc05f70280, 0x55dffbfffe01fbbf, x10, 0, x18)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x15, rd==x8, rs1_b7_val == rs2_b7_val, rs2_b5_val == -3, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b7_val < 0 and rs2_b7_val < 0, rs1_b2_val == -1, rs2_b0_val == 16, rs1_b6_val > 0 and rs2_b6_val < 0, rs1_b3_val == 32, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b4_val == -65, rs2_b3_val == -1, rs1_b1_val == 16, rs1_b4_val > 0 and rs2_b4_val < 0, rs2_b6_val == -1, rs1_b4_val == 2
// opcode: smax8 ; op1:x31; op2:x15; dest:x8; op1val:0xf609f90220ff1005;  op2val:0xf6fffdbffff8fb10
TEST_RR_OP(smax8, x8, x31, x15, 0x0000000000000000, 0xf609f90220ff1005, 0xf6fffdbffff8fb10, x10, 8, x18)

inst_2:
// rs1 == rs2 != rd, rs1==x6, rs2==x6, rd==x15, rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b2_val == 64, rs1_b5_val == -3, rs1_b2_val > 0 and rs2_b2_val < 0, rs2_b6_val == 85, rs2_b0_val == -2, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b0_val == 127, rs2_b5_val == 0, rs1_b6_val == -5, rs1_b3_val == 64, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b1_val == -1, rs1_b7_val == 32, rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b2_val == -128
// opcode: smax8 ; op1:x6; op2:x6; dest:x15; op1val:0x20fbfdfc4040f97f;  op2val:0xf65500bf0780fffe
TEST_RR_OP(smax8, x15, x6, x6, 0x0000000000000000, 0x20fbfdfc4040f97f, 0xf65500bf0780fffe, x10, 16, x18)

inst_3:
// rs1 == rs2 == rd, rs1==x7, rs2==x7, rd==x7, rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b0_val == -9, rs2_b3_val == -33, rs1_b6_val == 127, rs2_b5_val == 4, rs1_b0_val == 32, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b4_val == -65, rs1_b7_val == 85, rs1_b1_val == 64, rs1_b2_val == -33
// opcode: smax8 ; op1:x7; op2:x7; dest:x7; op1val:0x557ff7bf07df4020;  op2val:0x3fa04f9df01fcf7
TEST_RR_OP(smax8, x7, x7, x7, 0x0000000000000000, 0x557ff7bf07df4020, 0x3fa04f9df01fcf7, x10, 24, x18)

inst_4:
// rs2 == rd != rs1, rs1==x12, rs2==x21, rd==x21, rs1_b6_val == rs2_b6_val, rs1_b0_val == -9, rs2_b5_val == 16, rs1_b3_val == 8, rs2_b0_val == -1, rs2_b3_val == 2, rs1_b4_val == rs2_b4_val, rs1_b2_val == -65, rs2_b7_val == -2
// opcode: smax8 ; op1:x12; op2:x21; dest:x21; op1val:0xc0f8fcf608bff9f7;  op2val:0xfef810f602c0fcff
TEST_RR_OP(smax8, x21, x12, x21, 0x0000000000000000, 0xc0f8fcf608bff9f7, 0xfef810f602c0fcff, x10, 32, x18)

inst_5:
// rs1==x16, rs2==x28, rd==x19, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b5_val == -5, rs2_b3_val == -86, rs1_b2_val == -2, rs1_b7_val == -1, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val == 85, rs2_b5_val == -1, rs1_b0_val < 0 and rs2_b0_val > 0, rs2_b0_val == 4, rs2_b1_val == 64, rs2_b2_val == 85, rs1_b3_val < 0 and rs2_b3_val < 0, rs2_b7_val == 16
// opcode: smax8 ; op1:x16; op2:x28; dest:x19; op1val:0xff3ffb06f8fe5580;  op2val:0x103ffff6aa554004
TEST_RR_OP(smax8, x19, x16, x28, 0x0000000000000000, 0xff3ffb06f8fe5580, 0x103ffff6aa554004, x10, 40, x18)

inst_6:
// rs1==x26, rs2==x13, rd==x9, rs1_b5_val == rs2_b5_val, rs1_b0_val == -33, rs2_b2_val == 16, rs1_b7_val == 0, rs1_b2_val > 0 and rs2_b2_val > 0, rs2_b1_val == -86, rs1_b5_val == -1, rs2_b6_val == -3, rs2_b7_val == -65, rs2_b4_val == -2, rs1_b2_val == 127
// opcode: smax8 ; op1:x26; op2:x13; dest:x9; op1val:0x09ff07407ffadf;  op2val:0xbffdfffef810aa05
TEST_RR_OP(smax8, x9, x26, x13, 0x0000000000000000, 0x09ff07407ffadf, 0xbffdfffef810aa05, x10, 48, x18)

inst_7:
// rs1==x5, rs2==x12, rd==x4, rs1_b5_val > 0 and rs2_b5_val < 0, rs2_b0_val == -17, rs1_b1_val == 4, rs1_b3_val == -65, rs1_b0_val == 2, rs1_b7_val == -128, rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b1_val == 2, rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b5_val == -33
// opcode: smax8 ; op1:x5; op2:x12; dest:x4; op1val:0x80f90903bf090402;  op2val:0xf8c0df0902f602ef
TEST_RR_OP(smax8, x4, x5, x12, 0x0000000000000000, 0x80f90903bf090402, 0xf8c0df0902f602ef, x10, 56, x18)

inst_8:
// rs1==x2, rs2==x16, rd==x28, rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b2_val == 4, rs2_b5_val == 8, rs2_b0_val == -128, rs2_b1_val == 127, rs2_b4_val == -86, rs1_b7_val == 127, rs1_b1_val == 8, rs1_b2_val == -3, rs1_b4_val == 4, rs2_b7_val == 32
// opcode: smax8 ; op1:x2; op2:x16; dest:x28; op1val:0x7fc00504c0fd08df;  op2val:0x20c008aa09047f80
TEST_RR_OP(smax8, x28, x2, x16, 0x0000000000000000, 0x7fc00504c0fd08df, 0x20c008aa09047f80, x10, 64, x18)

inst_9:
// rs1==x17, rs2==x29, rd==x20, rs1_b4_val < 0 and rs2_b4_val > 0, rs1_b2_val == 32, rs2_b2_val == 2, rs2_b3_val == -17, rs2_b1_val == 85, rs2_b6_val == -5, rs1_b6_val == 64, rs1_b4_val == -2, rs1_b1_val == 1, rs1_b0_val == -86, rs2_b4_val == 1
// opcode: smax8 ; op1:x17; op2:x29; dest:x20; op1val:0x7f4006fef92001aa;  op2val:0x5fb0501ef025506
TEST_RR_OP(smax8, x20, x17, x29, 0x0000000000000000, 0x7f4006fef92001aa, 0x5fb0501ef025506, x10, 72, x18)

inst_10:
// rs1==x30, rs2==x4, rd==x31, rs1_b3_val == rs2_b3_val, rs1_b2_val == rs2_b2_val, rs1_b2_val == -5, rs2_b1_val == 4, rs2_b4_val == 8, rs2_b2_val == -5, rs2_b5_val == -9
// opcode: smax8 ; op1:x30; op2:x4; dest:x31; op1val:0xfa40fdf906fb40f7;  op2val:0x7faf70806fb0406
TEST_RR_OP(smax8, x31, x30, x4, 0x0000000000000000, 0xfa40fdf906fb40f7, 0x7faf70806fb0406, x10, 80, x18)

inst_11:
// rs1==x21, rs2==x31, rd==x6, rs1_b1_val == rs2_b1_val, rs1_b3_val == 127, rs1_b0_val == 64, rs1_b6_val == -17, rs1_b4_val == 8, rs1_b5_val == -65
// opcode: smax8 ; op1:x21; op2:x31; dest:x6; op1val:0xfcefbf087ffac040;  op2val:0x100606090709c005
TEST_RR_OP(smax8, x6, x21, x31, 0x0000000000000000, 0xfcefbf087ffac040, 0x100606090709c005, x10, 88, x18)

inst_12:
// rs1==x27, rs2==x17, rd==x29, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b6_val == -86, rs1_b1_val == -86, rs2_b6_val == 4, rs2_b4_val == 64, rs2_b1_val == 1
// opcode: smax8 ; op1:x27; op2:x17; dest:x29; op1val:0xdfaabf3f40f6aaf6;  op2val:0xfe040340ff050180
TEST_RR_OP(smax8, x29, x27, x17, 0x0000000000000000, 0xdfaabf3f40f6aaf6, 0xfe040340ff050180, x10, 96, x18)

inst_13:
// rs1==x28, rs2==x2, rd==x1, rs1_b0_val == rs2_b0_val, rs2_b7_val == 2, rs1_b3_val == 85, rs2_b2_val == -1, rs2_b0_val == 64, rs2_b1_val == -9, rs2_b3_val == 4, rs2_b6_val == 16, rs1_b7_val == -17, rs1_b5_val == -86
// opcode: smax8 ; op1:x28; op2:x2; dest:x1; op1val:0xef03aafa553f0440;  op2val:0x210c0f904fff740
TEST_RR_OP(smax8, x1, x28, x2, 0x0000000000000000, 0xef03aafa553f0440, 0x210c0f904fff740, x10, 104, x18)

inst_14:
// rs1==x23, rs2==x5, rd==x12, rs2_b7_val == -86, rs2_b3_val == -9, rs2_b2_val == 0, rs1_b0_val == 16, rs1_b4_val == 16, rs1_b3_val == 0, rs2_b4_val == -128, rs1_b5_val == 85
// opcode: smax8 ; op1:x23; op2:x5; dest:x12; op1val:0x90955100009fc10;  op2val:0xaafb1080f70009ef
TEST_RR_OP(smax8, x12, x23, x5, 0x0000000000000000, 0x90955100009fc10, 0xaafb1080f70009ef, x10, 112, x18)

inst_15:
// rs1==x29, rs2==x27, rd==x13, rs2_b7_val == 127, rs2_b0_val == -33, rs2_b5_val == -2, rs2_b3_val == 127, rs1_b2_val == 2, rs2_b1_val == -33, rs1_b1_val == -9, rs2_b4_val == -33, rs1_b4_val == 32, rs2_b2_val == -9
// opcode: smax8 ; op1:x29; op2:x27; dest:x13; op1val:0x9fcf720f602f77f;  op2val:0x7ffbfedf7ff7dfdf
TEST_RR_OP(smax8, x13, x29, x27, 0x0000000000000000, 0x9fcf720f602f77f, 0x7ffbfedf7ff7dfdf, x10, 120, x18)

inst_16:
// rs1==x14, rs2==x3, rd==x17, rs2_b7_val == -33, rs1_b0_val == 4, rs2_b6_val == 32, rs2_b2_val == -17, rs1_b3_val == -128
// opcode: smax8 ; op1:x14; op2:x3; dest:x17; op1val:0x6fbfd0680fb0904;  op2val:0xdf20fcfa02ef05fa
TEST_RR_OP(smax8, x17, x14, x3, 0x0000000000000000, 0x6fbfd0680fb0904, 0xdf20fcfa02ef05fa, x10, 128, x18)

inst_17:
// rs1==x11, rs2==x30, rd==x14, rs2_b7_val == -17, rs1_b2_val == 16, rs2_b5_val == 2, rs1_b6_val == -9, rs2_b3_val == 64, rs1_b7_val == -65, rs2_b1_val == 0, rs1_b4_val == 1
// opcode: smax8 ; op1:x11; op2:x30; dest:x14; op1val:0xbff7f601bf105505;  op2val:0xef3f0208400500df
TEST_RR_OP(smax8, x14, x11, x30, 0x0000000000000000, 0xbff7f601bf105505, 0xef3f0208400500df, x10, 136, x18)

inst_18:
// rs1==x25, rs2==x18, rd==x30, rs2_b7_val == -9, rs2_b2_val == -33, rs1_b2_val == -17, rs2_b5_val == 64, rs1_b1_val == 32
// opcode: smax8 ; op1:x25; op2:x18; dest:x30; op1val:0x7f7ff8fe00ef2040;  op2val:0xf709400302df03f9
TEST_RR_OP(smax8, x30, x25, x18, 0x0000000000000000, 0x7f7ff8fe00ef2040, 0xf709400302df03f9, x10, 144, x7)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_19:
// rs1==x18, rs2==x20, rd==x2, rs2_b7_val == -5, rs1_b1_val == -5, rs1_b6_val == 2, rs2_b6_val == -9, rs2_b4_val == -3
// opcode: smax8 ; op1:x18; op2:x20; dest:x2; op1val:0x2002aa04fa7ffbf8;  op2val:0xfbf708fd07eff805
TEST_RR_OP(smax8, x2, x18, x20, 0x0000000000000000, 0x2002aa04fa7ffbf8, 0xfbf708fd07eff805, x6, 0, x7)

inst_20:
// rs1==x24, rs2==x26, rd==x27, rs2_b7_val == -3, rs2_b4_val == -17, rs1_b0_val == 1, rs1_b4_val == -86, rs2_b5_val == -17
// opcode: smax8 ; op1:x24; op2:x26; dest:x27; op1val:0x7f02fcaabf030101;  op2val:0xfdffefeff6f85510
TEST_RR_OP(smax8, x27, x24, x26, 0x0000000000000000, 0x7f02fcaabf030101, 0xfdffefeff6f85510, x6, 8, x7)

inst_21:
// rs1==x19, rs2==x24, rd==x23, rs2_b7_val == -128, rs1_b3_val == -2, rs1_b1_val == -1, rs1_b6_val == 1, rs1_b4_val == 85
// opcode: smax8 ; op1:x19; op2:x24; dest:x23; op1val:0x9010955febfff20;  op2val:0x80fcf909c0c005f8
TEST_RR_OP(smax8, x23, x19, x24, 0x0000000000000000, 0x9010955febfff20, 0x80fcf909c0c005f8, x6, 16, x7)

inst_22:
// rs1==x13, rs2==x25, rd==x22, rs2_b7_val == 64, rs1_b5_val == 32, rs2_b0_val == 32, rs1_b0_val == 8, rs2_b4_val == 85, rs1_b3_val == 4, rs2_b5_val == 85
// opcode: smax8 ; op1:x13; op2:x25; dest:x22; op1val:0x2007203f04fc0708;  op2val:0x40f655553fef0320
TEST_RR_OP(smax8, x22, x13, x25, 0x0000000000000000, 0x2007203f04fc0708, 0x40f655553fef0320, x6, 24, x7)

inst_23:
// rs1==x4, rs2==x8, rd==x10, rs2_b7_val == 8, rs2_b0_val == 85, rs2_b1_val == -17
// opcode: smax8 ; op1:x4; op2:x8; dest:x10; op1val:0xeffc55010907f6df;  op2val:0x80605f80306ef55
TEST_RR_OP(smax8, x10, x4, x8, 0x0000000000000000, 0xeffc55010907f6df, 0x80605f80306ef55, x6, 32, x7)

inst_24:
// rs1==x10, rs2==x11, rd==x18, rs2_b7_val == 4, rs1_b2_val == 1, rs1_b3_val == -17, rs1_b0_val == 0, rs2_b4_val == 127, rs2_b1_val == 32, rs2_b5_val == -65
// opcode: smax8 ; op1:x10; op2:x11; dest:x18; op1val:0x705073fef01f600;  op2val:0x4fabf7ff9102005
TEST_RR_OP(smax8, x18, x10, x11, 0x0000000000000000, 0x705073fef01f600, 0x4fabf7ff9102005, x6, 40, x7)

inst_25:
// rs1==x1, rs2==x14, rd==x3, rs2_b7_val == 1, rs1_b4_val == -17, rs2_b1_val == 16, rs2_b4_val == 2, rs2_b2_val == -3
// opcode: smax8 ; op1:x1; op2:x14; dest:x3; op1val:0xf909f7efef404002;  op2val:0x155f602aafd1080
TEST_RR_OP(smax8, x3, x1, x14, 0x0000000000000000, 0xf909f7efef404002, 0x155f602aafd1080, x6, 48, x7)

inst_26:
// rs1==x22, rs2==x1, rd==x5, rs2_b7_val == 0, rs1_b7_val == 1, rs1_b5_val == 0, rs2_b6_val == -86
// opcode: smax8 ; op1:x22; op2:x1; dest:x5; op1val:0x13f00bf0640103f;  op2val:0xaafe7fdf05f6fe
TEST_RR_OP(smax8, x5, x22, x1, 0x0000000000000000, 0x13f00bf0640103f, 0xaafe7fdf05f6fe, x6, 56, x7)

inst_27:
// rs1==x9, rs2==x10, rd==x11, rs1_b5_val == -2, rs2_b7_val == -1, rs2_b3_val == 8
// opcode: smax8 ; op1:x9; op2:x10; dest:x11; op1val:0xdf01febf7fdffbdf;  op2val:0xfff706fd08f9fbff
TEST_RR_OP(smax8, x11, x9, x10, 0x0000000000000000, 0xdf01febf7fdffbdf, 0xfff706fd08f9fbff, x6, 64, x7)

inst_28:
// rs1==x20, rs2==x9, rd==x26, rs1_b5_val == -128, rs2_b6_val == 64, rs1_b2_val == 8, rs1_b1_val == -65, rs2_b1_val == -128
// opcode: smax8 ; op1:x20; op2:x9; dest:x26; op1val:0x10280f68008bfdf;  op2val:0xbf4055fac0fa8010
TEST_RR_OP(smax8, x26, x20, x9, 0x0000000000000000, 0x10280f68008bfdf, 0xbf4055fac0fa8010, x6, 72, x7)

inst_29:
// rs1==x15, rs2==x22, rd==x24, rs1_b5_val == 64, rs1_b0_val == -65, rs2_b3_val == -5, rs1_b4_val == -9, rs2_b2_val == -65, rs2_b5_val == 127
// opcode: smax8 ; op1:x15; op2:x22; dest:x24; op1val:0xf90640f7f80310bf;  op2val:0xbffb7f09fbbf80df
TEST_RR_OP(smax8, x24, x15, x22, 0x0000000000000000, 0xf90640f7f80310bf, 0xbffb7f09fbbf80df, x6, 80, x7)

inst_30:
// rs1==x8, rs2==x19, rd==x25, rs1_b5_val == 16, rs2_b4_val == 32, rs1_b7_val == 8, rs2_b2_val == 32, rs1_b4_val == -128
// opcode: smax8 ; op1:x8; op2:x19; dest:x25; op1val:0x8ef108007fa1005;  op2val:0xf9fc5520fb200609
TEST_RR_OP(smax8, x25, x8, x19, 0x0000000000000000, 0x8ef108007fa1005, 0xf9fc5520fb200609, x6, 88, x7)

inst_31:
// rs1==x3, rs2==x0, rd==x16, rs1_b5_val == 8, rs2_b0_val == -3, rs1_b3_val == -1, rs2_b6_val == 0, rs2_b4_val == 16, rs1_b4_val == 0
// opcode: smax8 ; op1:x3; op2:x0; dest:x16; op1val:0x80ef0800fff9fc20;  op2val:0xef003f1008fa3ffd
TEST_RR_OP(smax8, x16, x3, x0, 0x0000000000000000, 0x80ef0800fff9fc20, 0xef003f1008fa3ffd, x6, 96, x7)

inst_32:
// rs1_b5_val == 4, rs2_b5_val == 32, rs2_b0_val == -86
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xeffa04f93ffafc40;  op2val:0x72020fd040307aa
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xeffa04f93ffafc40, 0x72020fd040307aa, x6, 104, x7)

inst_33:
// rs1_b5_val == 2, rs1_b0_val == 85, rs1_b7_val == -3, rs1_b1_val == -17
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdaa02c0557fef55;  op2val:0xdf10057f09c0aa3f
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xfdaa02c0557fef55, 0xdf10057f09c0aa3f, x6, 112, x7)

inst_34:
// rs1_b5_val == 1, rs1_b6_val == 16
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x9100109557f0910;  op2val:0xf9065540f8f8df10
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x9100109557f0910, 0xf9065540f8f8df10, x6, 120, x7)

inst_35:
// rs1_b4_val == 127, rs2_b1_val == -3, rs1_b2_val == -86
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x5540037ff8aa0900;  op2val:0xf6dffa3f04f7fd3f
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x5540037ff8aa0900, 0xf6dffa3f04f7fd3f, x6, 128, x7)

inst_36:
// rs1_b4_val == -33, rs1_b7_val == -5, rs2_b4_val == -5, rs1_b6_val == -3, rs2_b2_val == -2
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfd04df3f0709df;  op2val:0x10610fbf8fe05bf
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xfbfd04df3f0709df, 0x10610fbf8fe05bf, x6, 136, x7)

inst_37:
// rs1_b4_val == -5, rs1_b1_val == -128, rs2_b3_val == -65, rs1_b0_val == -1
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x55fcfefb20f980ff;  op2val:0x209ff07bf0704bf
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x55fcfefb20f980ff, 0x209ff07bf0704bf, x6, 144, x7)

inst_38:
// rs1_b4_val == -3, rs1_b3_val == -5, rs2_b6_val == 8, rs1_b6_val == -2
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x5fe06fdfb06093f;  op2val:0xbf084080403f7f05
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x5fe06fdfb06093f, 0xbf084080403f7f05, x6, 152, x7)

inst_39:
// rs1_b4_val == 64, rs2_b0_val == -5, rs1_b1_val == -33
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfa55407f03df07;  op2val:0xf6070710fcfc40fb
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xfdfa55407f03df07, 0xf6070710fcfc40fb, x6, 160, x7)

inst_40:
// rs1_b4_val == -1, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f093ffffe01ff04;  op2val:0xc0fcfdfbf8090307
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x3f093ffffe01ff04, 0xc0fcfdfbf8090307, x6, 168, x7)

inst_41:
// rs1_b3_val == -86, rs2_b6_val == -128
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdf920aaf8aa09;  op2val:0x8080f606faef2040
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xfdf920aaf8aa09, 0x8080f606faef2040, x6, 176, x7)

inst_42:
// rs1_b3_val == -33, rs2_b6_val == -65, rs1_b7_val == -9, rs1_b1_val == 0, rs2_b0_val == 127
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7f80104dffc0003;  op2val:0x3fbf7ffff7fcf97f
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xf7f80104dffc0003, 0x3fbf7ffff7fcf97f, x6, 184, x7)

inst_43:
// rs1_b3_val == -9, rs2_b0_val == 8
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xf909bffff705f805;  op2val:0x3f04fcfd09c0fb08
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xf909bffff705f805, 0x3f04fcfd09c0fb08, x6, 192, x7)

inst_44:
// rs2_b3_val == 85, rs2_b5_val == -86, rs2_b2_val == 8, rs1_b2_val == 0
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x20fd08fc3f000220;  op2val:0xfdf9aaf65508f7ff
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x20fd08fc3f000220, 0xfdf9aaf65508f7ff, x6, 200, x7)

inst_45:
// rs2_b3_val == -3, rs2_b4_val == 4, rs2_b6_val == 127
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfc0f70520018000;  op2val:0xbf7fdf04fdf701fa
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xbfc0f70520018000, 0xbf7fdf04fdf701fa, x6, 208, x7)

inst_46:
// rs2_b3_val == -128, rs2_b2_val == 64, rs1_b0_val == -5, rs2_b6_val == -2, rs1_b6_val == -128
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfc804002c020c0fb;  op2val:0xdffeaafa80407f04
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xfc804002c020c0fb, 0xdffeaafa80407f04, x6, 216, x7)

inst_47:
// rs2_b3_val == 32, rs1_b0_val == -2
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x55c0c0faaabfdffe;  op2val:0xfaf809fc20fef77f
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x55c0c0faaabfdffe, 0xfaf809fc20fef77f, x6, 224, x7)

inst_48:
// rs2_b3_val == 16, rs1_b7_val == -86, rs2_b6_val == 1
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa10faf9fa06f701;  op2val:0xef01c05510fe09ff
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xaa10faf9fa06f701, 0xef01c05510fe09ff, x6, 232, x7)

inst_49:
// rs2_b3_val == 1, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfffafafeeff80306;  op2val:0x1000aa0701ffc040
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xfffafafeeff80306, 0x1000aa0701ffc040, x6, 240, x7)

inst_50:
// rs2_b3_val == 0, rs1_b7_val == -2, rs1_b3_val == 1, rs2_b6_val == -17
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfefcc0100105f709;  op2val:0x9ef7fbf008000ef
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xfefcc0100105f709, 0x9ef7fbf008000ef, x6, 248, x7)

inst_51:
// rs2_b2_val == -86, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f80c0c07f08ff05;  op2val:0xf809fdf6c0aaff05
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x7f80c0c07f08ff05, 0xf809fdf6c0aaff05, x6, 256, x7)

inst_52:
// rs2_b2_val == 127, rs1_b7_val == 4, rs1_b3_val == -3
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x4f6fa01fd038003;  op2val:0xdf107f3ff97f03f8
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x4f6fa01fd038003, 0xdf107f3ff97f03f8, x6, 264, x7)

inst_53:
// rs2_b1_val == -65, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xf6f8f7bf40f7ef3f;  op2val:0xfd062010dff8bf40
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xf6f8f7bf40f7ef3f, 0xfd062010dff8bf40, x6, 272, x7)

inst_54:
// rs1_b3_val == 16, rs1_b6_val == 85
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xf755400210aabf80;  op2val:0xfe00ef3f07060410
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xf755400210aabf80, 0xfe00ef3f07060410, x6, 280, x7)

inst_55:
// rs1_b3_val == 2, rs1_b7_val == 16
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x100340fa02f9f980;  op2val:0xfeefc0f9203ffb08
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x100340fa02f9f980, 0xfeefc0f9203ffb08, x6, 288, x7)

inst_56:
// rs1_b2_val == 4, rs1_b1_val == 127
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x20f8207faa047ffa;  op2val:0x803f08ef07ff10f7
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x20f8207faa047ffa, 0x803f08ef07ff10f7, x6, 296, x7)

inst_57:
// rs1_b2_val == -128, rs1_b6_val == -1, rs2_b5_val == -128, rs2_b0_val == 1
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x6ff107ff9807ff6;  op2val:0xf60880fcaafdf601
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x6ff107ff9807ff6, 0xf60880fcaafdf601, x6, 304, x7)

inst_58:
// rs2_b0_val == 2, rs2_b4_val == 0
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa09070455c0f7fe;  op2val:0x8001fe00fe10f902
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xfa09070455c0f7fe, 0x8001fe00fe10f902, x6, 312, x7)

inst_59:
// rs2_b0_val == 0, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xf83ffe40fbf97ffb;  op2val:0xfd5540fefa40fd00
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xf83ffe40fbf97ffb, 0xfd5540fefa40fd00, x6, 320, x7)

inst_60:
// rs1_b1_val == -3, rs1_b5_val == -17
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffdefc00420fdaa;  op2val:0x701fefa01fdfbf6
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x3ffdefc00420fdaa, 0x701fefa01fdfbf6, x6, 328, x7)

inst_61:
// rs1_b1_val == -2, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8f80809fef8fec0;  op2val:0x8087f08bf0140fe
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xf8f80809fef8fec0, 0x8087f08bf0140fe, x6, 336, x7)

inst_62:
// rs2_b6_val == 2, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x33faabff70007fb;  op2val:0xf60205fafa090503
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x33faabff70007fb, 0xf60205fafa090503, x6, 344, x7)

inst_63:
// rs2_b1_val == 8, rs1_b5_val == -33
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x55fedf08047fdf08;  op2val:0x40800855073f0806
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x55fedf08047fdf08, 0x40800855073f0806, x6, 352, x7)

inst_64:
// rs1_b7_val == 64, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x400104fabf0380c0;  op2val:0x605f9ef55c08009
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x400104fabf0380c0, 0x605f9ef55c08009, x6, 360, x7)

inst_65:
// rs1_b7_val == 2, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x2fe090807fdeffa;  op2val:0x91003030540ef20
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x2fe090807fdeffa, 0x91003030540ef20, x6, 368, x7)

inst_66:
// rs1_b0_val == -17, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xf93ffdf7dffe3fef;  op2val:0xaafcf605fd3f03f7
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xf93ffdf7dffe3fef, 0xaafcf605fd3f03f7, x6, 376, x7)

inst_67:
// rs1_b0_val == -3, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x803f0955df0505fd;  op2val:0x7400000fbfbf8f9
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x803f0955df0505fd, 0x7400000fbfbf8f9, x6, 384, x7)

inst_68:
// rs1_b6_val == -65, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf08df0004fd7f;  op2val:0xdff8f6107f06fdff
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xffbf08df0004fd7f, 0xdff8f6107f06fdff, x6, 392, x7)

inst_69:
// rs1_b6_val == -33, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xf6df0055070408f6;  op2val:0xbf7f0820030709fb
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xf6df0055070408f6, 0xbf7f0820030709fb, x6, 400, x7)

inst_70:
// rs2_b5_val == 1, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x1dfffaa04dff9df;  op2val:0x407f0107df00fd03
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x1dfffaa04dff9df, 0x407f0107df00fd03, x6, 408, x7)

inst_71:
// rs1_b6_val == 32, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb2002aadf00fbbf;  op2val:0xff0102fcfc05df80
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xfb2002aadf00fbbf, 0xff0102fcfc05df80, x6, 416, x7)

inst_72:
// rs2_b1_val == -2, rs2_b4_val == -9, rs1_b2_val == 85, rs1_b6_val == 0
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe0004050255c001;  op2val:0x2003fcf7df7ffe07
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xfe0004050255c001, 0x2003fcf7df7ffe07, x6, 424, x7)

inst_73:
// rs1_b6_val == 8, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x408553f7f020020;  op2val:0xf6f940feaaf7fe06
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x408553f7f020020, 0xf6f940feaaf7fe06, x6, 432, x7)

inst_74:
// rs1_b5_val == 127, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0fb7ff707dffdfa;  op2val:0x7f5580ffc006effe
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xc0fb7ff707dffdfa, 0x7f5580ffc006effe, x6, 440, x7)

inst_75:
// rs1_b6_val == 4, 
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x704f80202f60780;  op2val:0xaa7f40f6808080f6
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x704f80202f60780, 0xaa7f40f6808080f6, x6, 448, x7)

inst_76:
// rs1_b0_val == -128, rs2_b4_val == -1, rs1_b7_val != rs2_b7_val, rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b6_val != rs2_b6_val, rs1_b6_val < 0 and rs2_b6_val < 0, rs2_b3_val == -2, rs1_b5_val != rs2_b5_val, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b4_val != rs2_b4_val, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b3_val != rs2_b3_val, rs1_b3_val > 0 and rs2_b3_val < 0, rs1_b2_val != rs2_b2_val, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val, rs2_b2_val == 1, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val < 0, rs2_b1_val == -5, rs2_b7_val == 85, rs1_b2_val == -9, rs2_b0_val == -65, rs2_b6_val == -33, rs1_b7_val == -33, rs1_b1_val == 2, rs2_b5_val == -5, rs1_b5_val == -9
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0xdff6f7fc05f70280;  op2val:0x55dffbfffe01fbbf
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0xdff6f7fc05f70280, 0x55dffbfffe01fbbf, x6, 456, x7)

inst_77:
// rs1_b7_val > 0 and rs2_b7_val > 0, rs2_b0_val == -9, rs2_b3_val == -33, rs1_b6_val == 127, rs2_b5_val == 4, rs1_b0_val == 32, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b4_val == -65, rs1_b7_val == 85, rs1_b1_val == 64, rs1_b2_val == -33
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x557ff7bf07df4020;  op2val:0x3fa04f9df01fcf7
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x557ff7bf07df4020, 0x3fa04f9df01fcf7, x6, 464, x7)

inst_78:
// rs1_b5_val == 8, rs2_b0_val == -3, rs1_b3_val == -1, rs2_b6_val == 0, rs2_b4_val == 16, rs1_b4_val == 0
// opcode: smax8 ; op1:x30; op2:x29; dest:x31; op1val:0x80ef0800fff9fc20;  op2val:0xef003f1008fa3ffd
TEST_RR_OP(smax8, x31, x30, x29, 0x0000000000000000, 0x80ef0800fff9fc20, 0xef003f1008fa3ffd, x6, 472, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 19*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 60*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
