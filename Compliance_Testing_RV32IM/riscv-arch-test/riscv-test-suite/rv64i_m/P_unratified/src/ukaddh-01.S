
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukaddh instruction of the RISC-V RV64PZicsr extension for the ukaddh covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukaddh)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x22, rs2==x19, rd==x22, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 16384, rs1_h1_val == 65531, rs2_h1_val == 1, rs1_h3_val == 256, rs2_h2_val == 65471, rs2_h3_val == 2048
// opcode: ukaddh ; op1:x22; op2:x19; dest:x22; op1val:0x1000012fffb0000;  op2val:0x800ffbf00014000
TEST_PKRR_OP(ukaddh, x22, x22, x19, 0x0000000000000000, 0x1000012fffb0000, 0x800ffbf00014000, x22, x1, 0, x15)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x25, rs2==x22, rd==x18, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == 4, rs1_h1_val == 64511, rs2_h1_val == 4, rs1_h2_val == 8192, rs2_h0_val == 2, rs1_h3_val == 4, rs2_h2_val == 65531
// opcode: ukaddh ; op1:x25; op2:x22; dest:x18; op1val:0x042000fbff0013;  op2val:0x04fffb00040002
TEST_PKRR_OP(ukaddh, x18, x25, x22, 0x0000000000000000, 0x042000fbff0013, 0x04fffb00040002, x25, x1, 16, x15)

inst_2:
// rs1 == rs2 != rd, rs1==x0, rs2==x0, rd==x14, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h2_val == 256, rs1_h0_val == 64511, rs1_h1_val == 128, rs2_h1_val == 2, rs1_h2_val == 256, rs1_h3_val == 32767, rs2_h0_val == 65023, rs2_h3_val == 4096
// opcode: ukaddh ; op1:x0; op2:x0; dest:x14; op1val:0x7fff01000080fbff;  op2val:0x100001000002fdff
TEST_PKRR_OP(ukaddh, x14, x0, x0, 0x0000000000000000, 0x7fff01000080fbff, 0x100001000002fdff, x0, x1, 32, x15)

inst_3:
// rs1 == rs2 == rd, rs1==x3, rs2==x3, rd==x3, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 65471, rs1_h0_val == 21845, rs2_h3_val == 64511, rs1_h3_val == 32, rs2_h2_val == 65503, rs1_h2_val == 43690
// opcode: ukaddh ; op1:x3; op2:x3; dest:x3; op1val:0x20aaaa00135555;  op2val:0xfbffffdf0013ffbf
TEST_PKRR_OP(ukaddh, x3, x3, x3, 0x0000000000000000, 0x20aaaa00135555, 0xfbffffdf0013ffbf, x3, x1, 48, x15)

inst_4:
// rs2 == rd != rs1, rs1==x2, rs2==x24, rd==x24, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 65534, rs1_h2_val == 65519, rs1_h1_val == 65534, rs1_h3_val == 64, rs2_h3_val == 65534, rs2_h0_val == 64511
// opcode: ukaddh ; op1:x2; op2:x24; dest:x24; op1val:0x40ffeffffefbff;  op2val:0xfffe000bfffefbff
TEST_PKRR_OP(ukaddh, x24, x2, x24, 0x0000000000000000, 0x40ffeffffefbff, 0xfffe000bfffefbff, x2, x1, 64, x15)

inst_5:
// rs1==x23, rs2==x11, rd==x30, rs2_h3_val == 43690, rs1_h2_val == 0, rs1_h3_val == 2048, rs2_h2_val == 32767
// opcode: ukaddh ; op1:x23; op2:x11; dest:x30; op1val:0x800000000090011;  op2val:0xaaaa7fff00054000
TEST_PKRR_OP(ukaddh, x30, x23, x11, 0x0000000000000000, 0x800000000090011, 0xaaaa7fff00054000, x23, x1, 80, x15)

inst_6:
// rs1==x29, rs2==x8, rd==x12, rs2_h3_val == 21845, rs2_h1_val == 1024, rs2_h2_val == 4, rs2_h0_val == 16, rs1_h1_val == 2048, rs1_h3_val == 49151
// opcode: ukaddh ; op1:x29; op2:x8; dest:x12; op1val:0xbfff000b08000009;  op2val:0x5555000404000010
TEST_PKRR_OP(ukaddh, x12, x29, x8, 0x0000000000000000, 0xbfff000b08000009, 0x5555000404000010, x29, x1, 96, x15)

inst_7:
// rs1==x7, rs2==x30, rd==x25, rs2_h3_val == 32767, rs1_h2_val == 2, rs1_h1_val == 512, rs2_h0_val == 512, rs2_h2_val == 21845
// opcode: ukaddh ; op1:x7; op2:x30; dest:x25; op1val:0x13000202000013;  op2val:0x7fff555500070200
TEST_PKRR_OP(ukaddh, x25, x7, x30, 0x0000000000000000, 0x13000202000013, 0x7fff555500070200, x7, x1, 112, x15)

inst_8:
// rs1==x12, rs2==x25, rd==x13, rs2_h3_val == 49151, rs1_h0_val == 65279, rs1_h2_val == 65279, rs2_h1_val == 8
// opcode: ukaddh ; op1:x12; op2:x25; dest:x13; op1val:0x20feff0013feff;  op2val:0xbfff000d00080003
TEST_PKRR_OP(ukaddh, x13, x12, x25, 0x0000000000000000, 0x20feff0013feff, 0xbfff000d00080003, x12, x1, 128, x15)

inst_9:
// rs1==x19, rs2==x4, rd==x9, rs2_h3_val == 57343, rs2_h2_val == 65527, rs1_h2_val == 65023, rs1_h0_val == 256
// opcode: ukaddh ; op1:x19; op2:x4; dest:x9; op1val:0x05fdff000e0100;  op2val:0xdffffff7fffe0007
TEST_PKRR_OP(ukaddh, x9, x19, x4, 0x0000000000000000, 0x05fdff000e0100, 0xdffffff7fffe0007, x19, x1, 144, x15)

inst_10:
// rs1==x4, rs2==x5, rd==x26, rs2_h3_val == 61439, rs1_h2_val == 63487, rs1_h3_val == 128, rs2_h0_val == 21845, rs1_h1_val == 32, rs1_h0_val == 512
// opcode: ukaddh ; op1:x4; op2:x5; dest:x26; op1val:0x80f7ff00200200;  op2val:0xefff000600045555
TEST_PKRR_OP(ukaddh, x26, x4, x5, 0x0000000000000000, 0x80f7ff00200200, 0xefff000600045555, x4, x1, 160, x15)

inst_11:
// rs1==x10, rs2==x12, rd==x29, rs2_h3_val == 63487, rs1_h3_val == 65279, rs2_h1_val == 32768, rs2_h0_val == 2048, rs1_h1_val == 65519, rs1_h2_val == 32
// opcode: ukaddh ; op1:x10; op2:x12; dest:x29; op1val:0xfeff0020ffef000b;  op2val:0xf7ff000780000800
TEST_PKRR_OP(ukaddh, x29, x10, x12, 0x0000000000000000, 0xfeff0020ffef000b, 0xf7ff000780000800, x10, x1, 176, x15)

inst_12:
// rs1==x30, rs2==x14, rd==x5, rs2_h3_val == 65023, rs1_h2_val == 4096, rs1_h1_val == 16384, rs1_h0_val == 43690, rs1_h3_val == 16
// opcode: ukaddh ; op1:x30; op2:x14; dest:x5; op1val:0x1010004000aaaa;  op2val:0xfdff000f0005000b
TEST_PKRR_OP(ukaddh, x5, x30, x14, 0x0000000000000000, 0x1010004000aaaa, 0xfdff000f0005000b, x30, x1, 192, x15)

inst_13:
// rs1==x13, rs2==x26, rd==x10, rs2_h3_val == 65279, rs2_h0_val == 65535, rs1_h0_val == 64, rs1_h3_val == 65531, rs2_h1_val == 63487
// opcode: ukaddh ; op1:x13; op2:x26; dest:x10; op1val:0xfffbfeff000c0040;  op2val:0xfeff000ff7ffffff
TEST_PKRR_OP(ukaddh, x10, x13, x26, 0x0000000000000000, 0xfffbfeff000c0040, 0xfeff000ff7ffffff, x13, x1, 208, x15)

inst_14:
// rs1==x31, rs2==x7, rd==x17, rs2_h3_val == 65407, rs1_h1_val == 65533, rs1_h2_val == 512, rs1_h0_val == 65534, rs2_h0_val == 32767
// opcode: ukaddh ; op1:x31; op2:x7; dest:x17; op1val:0x7fff0200fffdfffe;  op2val:0xff7f0009000e7fff
TEST_PKRR_OP(ukaddh, x17, x31, x7, 0x0000000000000000, 0x7fff0200fffdfffe, 0xff7f0009000e7fff, x31, x1, 224, x15)

inst_15:
// rs1==x6, rs2==x23, rd==x16, rs2_h3_val == 65471, rs2_h2_val == 49151, rs1_h3_val == 43690, rs1_h2_val == 64511
// opcode: ukaddh ; op1:x6; op2:x23; dest:x16; op1val:0xaaaafbff0800000e;  op2val:0xffbfbfff00080005
TEST_PKRR_OP(ukaddh, x16, x6, x23, 0x0000000000000000, 0xaaaafbff0800000e, 0xffbfbfff00080005, x6, x1, 240, x15)

inst_16:
// rs1==x14, rs2==x6, rd==x8, rs2_h3_val == 65503, rs1_h0_val == 65471, rs2_h1_val == 512, rs2_h2_val == 8, rs1_h3_val == 4096
// opcode: ukaddh ; op1:x14; op2:x6; dest:x8; op1val:0x1000000bfffdffbf;  op2val:0xffdf000802000005
TEST_PKRR_OP(ukaddh, x8, x14, x6, 0x0000000000000000, 0x1000000bfffdffbf, 0xffdf000802000005, x14, x1, 256, x15)

inst_17:
// rs1==x27, rs2==x31, rd==x6, rs2_h3_val == 65519, rs2_h2_val == 16, rs2_h0_val == 1024, rs2_h1_val == 65279, rs1_h2_val == 8, rs1_h3_val == 61439
// opcode: ukaddh ; op1:x27; op2:x31; dest:x6; op1val:0xefff0008fbff000a;  op2val:0xffef0010feff0400
TEST_PKRR_OP(ukaddh, x6, x27, x31, 0x0000000000000000, 0xefff0008fbff000a, 0xffef0010feff0400, x27, x1, 272, x15)

inst_18:
// rs1==x16, rs2==x20, rd==x23, rs2_h3_val == 65527, rs1_h0_val == 49151, rs2_h0_val == 32768
// opcode: ukaddh ; op1:x16; op2:x20; dest:x23; op1val:0x13000c000cbfff;  op2val:0xfff70006fffe8000
TEST_PKRR_OP(ukaddh, x23, x16, x20, 0x0000000000000000, 0x13000c000cbfff, 0xfff70006fffe8000, x16, x1, 288, x6)
RVTEST_SIGBASE(x3,signature_x3_0)

inst_19:
// rs1==x28, rs2==x21, rd==x11, rs2_h3_val == 65531, rs1_h3_val == 65519, rs2_h1_val == 61439, rs1_h1_val == 4096
// opcode: ukaddh ; op1:x28; op2:x21; dest:x11; op1val:0xffef010010000100;  op2val:0xfffb000aefff5555
TEST_PKRR_OP(ukaddh, x11, x28, x21, 0x0000000000000000, 0xffef010010000100, 0xfffb000aefff5555, x28, x3, 0, x6)

inst_20:
// rs1==x18, rs2==x15, rd==x19, rs2_h3_val == 65533, rs1_h2_val == 16, rs1_h1_val == 8
// opcode: ukaddh ; op1:x18; op2:x15; dest:x19; op1val:0x1300100008fffe;  op2val:0xfffd0010000f0009
TEST_PKRR_OP(ukaddh, x19, x18, x15, 0x0000000000000000, 0x1300100008fffe, 0xfffd0010000f0009, x18, x3, 16, x6)

inst_21:
// rs1==x11, rs2==x13, rd==x4, rs2_h3_val == 32768, rs1_h0_val == 65531, rs2_h0_val == 1
// opcode: ukaddh ; op1:x11; op2:x13; dest:x4; op1val:0x120002ffeffffb;  op2val:0x80000003000f0001
TEST_PKRR_OP(ukaddh, x4, x11, x13, 0x0000000000000000, 0x120002ffeffffb, 0x80000003000f0001, x11, x3, 32, x6)

inst_22:
// rs1==x8, rs2==x17, rd==x28, rs2_h3_val == 16384, 
// opcode: ukaddh ; op1:x8; op2:x17; dest:x28; op1val:0x12000d10000011;  op2val:0x400000090009ffbf
TEST_PKRR_OP(ukaddh, x28, x8, x17, 0x0000000000000000, 0x12000d10000011, 0x400000090009ffbf, x8, x3, 48, x6)

inst_23:
// rs1==x15, rs2==x2, rd==x1, rs2_h3_val == 8192, rs2_h2_val == 61439, rs1_h0_val == 4096, rs2_h0_val == 65531, rs2_h1_val == 256
// opcode: ukaddh ; op1:x15; op2:x2; dest:x1; op1val:0x200012000c1000;  op2val:0x2000efff0100fffb
TEST_PKRR_OP(ukaddh, x1, x15, x2, 0x0000000000000000, 0x200012000c1000, 0x2000efff0100fffb, x15, x3, 64, x6)

inst_24:
// rs1==x1, rs2==x29, rd==x21, rs2_h3_val == 1024, rs1_h1_val == 1, rs2_h0_val == 8, rs2_h1_val == 65503
// opcode: ukaddh ; op1:x1; op2:x29; dest:x21; op1val:0x100010000010011;  op2val:0x4000007ffdf0008
TEST_PKRR_OP(ukaddh, x21, x1, x29, 0x0000000000000000, 0x100010000010011, 0x4000007ffdf0008, x1, x3, 80, x6)

inst_25:
// rs1==x21, rs2==x18, rd==x20, rs2_h3_val == 512, rs1_h1_val == 2, rs2_h1_val == 8192, rs2_h2_val == 128
// opcode: ukaddh ; op1:x21; op2:x18; dest:x20; op1val:0x800000c00020200;  op2val:0x200008020000011
TEST_PKRR_OP(ukaddh, x20, x21, x18, 0x0000000000000000, 0x800000c00020200, 0x200008020000011, x21, x3, 96, x6)

inst_26:
// rs1==x9, rs2==x10, rd==x7, rs2_h3_val == 256, rs2_h2_val == 1024
// opcode: ukaddh ; op1:x9; op2:x10; dest:x7; op1val:0x80000030005000b;  op2val:0x10004000002000c
TEST_PKRR_OP(ukaddh, x7, x9, x10, 0x0000000000000000, 0x80000030005000b, 0x10004000002000c, x9, x3, 112, x6)

inst_27:
// rs1==x5, rs2==x9, rd==x27, rs2_h3_val == 128, rs2_h1_val == 65535, rs1_h2_val == 65534, rs2_h2_val == 32768
// opcode: ukaddh ; op1:x5; op2:x9; dest:x27; op1val:0x0bfffe0020000e;  op2val:0x808000ffff0007
TEST_PKRR_OP(ukaddh, x27, x5, x9, 0x0000000000000000, 0x0bfffe0020000e, 0x808000ffff0007, x5, x3, 128, x6)

inst_28:
// rs1==x17, rs2==x1, rd==x31, rs2_h3_val == 64, rs1_h2_val == 65407, rs2_h2_val == 1, rs1_h1_val == 65527, rs1_h0_val == 65519, rs2_h1_val == 65023
// opcode: ukaddh ; op1:x17; op2:x1; dest:x31; op1val:0x12ff7ffff7ffef;  op2val:0x400001fdff5555
TEST_PKRR_OP(ukaddh, x31, x17, x1, 0x0000000000000000, 0x12ff7ffff7ffef, 0x400001fdff5555, x17, x3, 144, x6)

inst_29:
// rs1==x26, rs2==x16, rd==x15, rs2_h3_val == 32, rs1_h2_val == 16384, rs2_h1_val == 43690, rs1_h3_val == 1
// opcode: ukaddh ; op1:x26; op2:x16; dest:x15; op1val:0x01400000070200;  op2val:0x207fffaaaa000f
TEST_PKRR_OP(ukaddh, x15, x26, x16, 0x0000000000000000, 0x01400000070200, 0x207fffaaaa000f, x26, x3, 160, x6)

inst_30:
// rs1==x20, rs2==x28, rd==x2, rs2_h3_val == 16, 
// opcode: ukaddh ; op1:x20; op2:x28; dest:x2; op1val:0x0d000510000003;  op2val:0x100400000e0400
TEST_PKRR_OP(ukaddh, x2, x20, x28, 0x0000000000000000, 0x0d000510000003, 0x100400000e0400, x20, x3, 176, x6)

inst_31:
// rs1==x24, rs2==x27, rd==x0, rs2_h3_val == 8, rs1_h3_val == 32768, rs2_h1_val == 65471, rs1_h0_val == 65023, rs1_h2_val == 65527
// opcode: ukaddh ; op1:x24; op2:x27; dest:x0; op1val:0x8000fff74000fdff;  op2val:0x080010ffbf0006
TEST_PKRR_OP(ukaddh, x0, x24, x27, 0x0000000000000000, 0x8000fff74000fdff, 0x080010ffbf0006, x24, x3, 192, x6)

inst_32:
// rs2_h3_val == 2, rs1_h1_val == 16
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x4000030010000e;  op2val:0x020009000f0005
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x4000030010000e, 0x020009000f0005, x30, x3, 208, x6)

inst_33:
// rs2_h3_val == 1, rs2_h2_val == 64, rs2_h1_val == 49151, rs1_h2_val == 1
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x090001000b000f;  op2val:0x010040bfff0007
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x090001000b000f, 0x010040bfff0007, x30, x3, 224, x6)

inst_34:
// rs2_h3_val == 65535, rs1_h0_val == 1024, rs2_h2_val == 43690, rs2_h1_val == 65527
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x8000000900020400;  op2val:0xffffaaaafff7000d
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x8000000900020400, 0xffffaaaafff7000d, x30, x3, 240, x6)

inst_35:
// rs2_h3_val == 0, rs1_h1_val == 8192
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x0300112000feff;  op2val:0x00ffbf00117fff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x0300112000feff, 0x00ffbf00117fff, x30, x3, 256, x6)

inst_36:
// rs2_h2_val == 57343, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x09fdff0011000d;  op2val:0xfffedffffeff000d
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x09fdff0011000d, 0xfffedffffeff000d, x30, x3, 272, x6)

inst_37:
// rs1_h1_val == 4, rs2_h1_val == 65531, rs1_h3_val == 512, rs1_h0_val == 65535
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x20010000004ffff;  op2val:0xffff0004fffb5555
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x20010000004ffff, 0xffff0004fffb5555, x30, x3, 288, x6)

inst_38:
// rs1_h1_val == 65535, rs1_h3_val == 65527, rs2_h2_val == 65023, rs1_h0_val == 65407
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfff72000ffffff7f;  op2val:0xffeffdff0009000f
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0xfff72000ffffff7f, 0xffeffdff0009000f, x30, x3, 304, x6)

inst_39:
// rs1_h1_val == 0, rs2_h2_val == 8192, rs2_h1_val == 65533
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x03feff0000ffff;  op2val:0xbfff2000fffd0001
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x03feff0000ffff, 0xbfff2000fffd0001, x30, x3, 320, x6)

inst_40:
// rs1_h0_val == 32767, rs2_h2_val == 65519, rs1_h3_val == 8192, rs2_h1_val == 2048
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x2000000800097fff;  op2val:0xffffffef08000200
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x2000000800097fff, 0xffffffef08000200, x30, x3, 336, x6)

inst_41:
// rs1_h0_val == 57343, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x070006ffefdfff;  op2val:0x13010020000200
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x070006ffefdfff, 0x13010020000200, x30, x3, 352, x6)

inst_42:
// rs1_h0_val == 61439, rs1_h3_val == 16384
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffbefff;  op2val:0x80fffb00030010
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x40000000fffbefff, 0x80fffb00030010, x30, x3, 368, x6)

inst_43:
// rs1_h0_val == 63487, rs1_h1_val == 256, rs1_h3_val == 65471
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00000100f7ff;  op2val:0x8000000efffbfffb
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0xffbf00000100f7ff, 0x8000000efffbfffb, x30, x3, 384, x6)

inst_44:
// rs1_h0_val == 65503, rs2_h0_val == 65533, rs1_h2_val == 32768
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x7fff80000007ffdf;  op2val:0xdfff000cfdfffffd
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x7fff80000007ffdf, 0xdfff000cfdfffffd, x30, x3, 400, x6)

inst_45:
// rs1_h0_val == 65527, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x13000c1000fff7;  op2val:0x08efff0011fffb
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x13000c1000fff7, 0x08efff0011fffb, x30, x3, 416, x6)

inst_46:
// rs1_h0_val == 65533, rs2_h0_val == 65503, rs1_h3_val == 65407, rs1_h2_val == 65531
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffb0080fffd;  op2val:0x40000800013ffdf
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0xff7ffffb0080fffd, 0x40000800013ffdf, x30, x3, 432, x6)

inst_47:
// rs1_h0_val == 32768, rs1_h1_val == 21845, rs2_h1_val == 64, rs2_h0_val == 65407
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x12fbff55558000;  op2val:0xefff00110040ff7f
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x12fbff55558000, 0xefff00110040ff7f, x30, x3, 448, x6)

inst_48:
// rs1_h0_val == 16384, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfefffffe00114000;  op2val:0x40000dffdf0006
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0xfefffffe00114000, 0x40000dffdf0006, x30, x3, 464, x6)

inst_49:
// rs1_h0_val == 8192, rs2_h1_val == 57343
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfff7400000072000;  op2val:0xaaaa0008dfffffdf
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0xfff7400000072000, 0xaaaa0008dfffffdf, x30, x3, 480, x6)

inst_50:
// rs1_h0_val == 2048, rs1_h1_val == 65407, rs2_h2_val == 65407
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x05000bff7f0800;  op2val:0x200ff7f0400fdff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x05000bff7f0800, 0x200ff7f0400fdff, x30, x3, 496, x6)

inst_51:
// rs1_h0_val == 128, rs1_h2_val == 49151
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x7fffbfff00120080;  op2val:0x100000c00110012
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x7fffbfff00120080, 0x100000c00110012, x30, x3, 512, x6)

inst_52:
// rs1_h0_val == 32, rs2_h0_val == 4096
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x80001100100020;  op2val:0x04ffef00121000
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x80001100100020, 0x04ffef00121000, x30, x3, 528, x6)

inst_53:
// rs1_h0_val == 16, rs2_h0_val == 4
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x09001255550010;  op2val:0x7fff000dfffb0004
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x09001255550010, 0x7fff000dfffb0004, x30, x3, 544, x6)

inst_54:
// rs1_h0_val == 8, rs2_h1_val == 65407, rs2_h0_val == 65279, rs1_h2_val == 128
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x2000008000060008;  op2val:0x8005555ff7ffeff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x2000008000060008, 0x8005555ff7ffeff, x30, x3, 560, x6)

inst_55:
// rs1_h0_val == 4, rs2_h0_val == 64, rs2_h1_val == 16, rs1_h3_val == 8
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x08008000000004;  op2val:0x06000600100040
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x08008000000004, 0x06000600100040, x30, x3, 576, x6)

inst_56:
// rs1_h0_val == 2, rs2_h2_val == 64511
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x05800000200002;  op2val:0xfffbfbff00130005
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x05800000200002, 0xfffbfbff00130005, x30, x3, 592, x6)

inst_57:
// rs1_h0_val == 1, rs1_h1_val == 43690
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x80fbffaaaa0001;  op2val:0xff7f0008f7ff8000
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x80fbffaaaa0001, 0xff7f0008f7ff8000, x30, x3, 608, x6)

inst_58:
// rs2_h2_val == 63487, rs2_h0_val == 57343, rs1_h3_val == 65533
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffd001300000800;  op2val:0x0af7fffeffdfff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0xfffd001300000800, 0x0af7fffeffdfff, x30, x3, 624, x6)

inst_59:
// rs2_h2_val == 65279, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffef00090080;  op2val:0x1000feff0009ff7f
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x7fffffef00090080, 0x1000feff0009ff7f, x30, x3, 640, x6)

inst_60:
// rs2_h2_val == 65533, rs2_h1_val == 64511
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x05000e02000012;  op2val:0x02fffdfbff0011
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x05000e02000012, 0x02fffdfbff0011, x30, x3, 656, x6)

inst_61:
// rs2_h2_val == 65534, rs2_h1_val == 16384
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x06aaaa10000010;  op2val:0x0ffffe40005555
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x06aaaa10000010, 0x0ffffe40005555, x30, x3, 672, x6)

inst_62:
// rs2_h0_val == 65519, rs2_h1_val == 21845
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfff7001200067fff;  op2val:0x200ffdf5555ffef
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0xfff7001200067fff, 0x200ffdf5555ffef, x30, x3, 688, x6)

inst_63:
// rs2_h0_val == 65527, rs1_h2_val == 64, rs2_h1_val == 32, rs1_h3_val == 63487
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff004000800200;  op2val:0x10feff0020fff7
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0xf7ff004000800200, 0x10feff0020fff7, x30, x3, 704, x6)

inst_64:
// rs2_h0_val == 65534, rs2_h2_val == 0, rs1_h2_val == 21845
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x0a5555000cffbf;  op2val:0x1000004000fffe
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x0a5555000cffbf, 0x1000004000fffe, x30, x3, 720, x6)

inst_65:
// rs2_h0_val == 8192, rs2_h2_val == 2
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x13fdff0800bfff;  op2val:0x11000255552000
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x13fdff0800bfff, 0x11000255552000, x30, x3, 736, x6)

inst_66:
// rs2_h0_val == 256, rs1_h3_val == 57343
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xdfff000cfbfffeff;  op2val:0xffbf008000110100
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0xdfff000cfbfffeff, 0xffbf008000110100, x30, x3, 752, x6)

inst_67:
// rs2_h0_val == 128, rs1_h1_val == 65023, rs1_h3_val == 65534
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffeffdfffffb;  op2val:0x1000dfff00040080
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0xfffeffeffdfffffb, 0x1000dfff00040080, x30, x3, 768, x6)

inst_68:
// rs2_h0_val == 32, rs2_h2_val == 512
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x0320000010000e;  op2val:0xfffb0200aaaa0020
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x0320000010000e, 0xfffb0200aaaa0020, x30, x3, 784, x6)

inst_69:
// rs2_h0_val == 0, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfff7000c2000000e;  op2val:0xf7ff000f00050000
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0xfff7000c2000000e, 0xf7ff000f00050000, x30, x3, 800, x6)

inst_70:
// rs1_h3_val == 21845, rs2_h0_val == 61439
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x55551000000e0007;  op2val:0xeffffffb000cefff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x55551000000e0007, 0xeffffffb000cefff, x30, x3, 816, x6)

inst_71:
// rs1_h3_val == 64511, rs1_h1_val == 32767, rs2_h1_val == 0
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfbff02007ffffbff;  op2val:0xfff7efff0000fffb
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0xfbff02007ffffbff, 0xfff7efff0000fffb, x30, x3, 832, x6)

inst_72:
// rs1_h3_val == 65023, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfdff000f0007000f;  op2val:0x02000500038000
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0xfdff000f0007000f, 0x02000500038000, x30, x3, 848, x6)

inst_73:
// rs1_h3_val == 65503, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffef02000100;  op2val:0x097fffefffefff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0xffdfffef02000100, 0x097fffefffefff, x30, x3, 864, x6)

inst_74:
// rs1_h3_val == 1024, rs1_h2_val == 61439
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x400efff00110080;  op2val:0xff7f000b08000009
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x400efff00110080, 0xff7f000b08000009, x30, x3, 880, x6)

inst_75:
// rs1_h3_val == 2, rs2_h2_val == 16384
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x02fff70001bfff;  op2val:0x084000000e1000
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x02fff70001bfff, 0x084000000e1000, x30, x3, 896, x6)

inst_76:
// rs1_h3_val == 65535, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xffff0010000d0003;  op2val:0x080400000a0009
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0xffff0010000d0003, 0x080400000a0009, x30, x3, 912, x6)

inst_77:
// rs1_h2_val == 57343, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x2000dfff000c0080;  op2val:0x110001fffb0010
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x2000dfff000c0080, 0x110001fffb0010, x30, x3, 928, x6)

inst_78:
// rs2_h2_val == 4096, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfdff00127fff0800;  op2val:0x801000fffb0009
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0xfdff00127fff0800, 0x801000fffb0009, x30, x3, 944, x6)

inst_79:
// rs2_h2_val == 2048, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x7fffeffffffe000c;  op2val:0x0c080055550013
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x7fffeffffffe000c, 0x0c080055550013, x30, x3, 960, x6)

inst_80:
// rs1_h2_val == 65471, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffbf00090007;  op2val:0x0d080020000001
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x1000ffbf00090007, 0x0d080020000001, x30, x3, 976, x6)

inst_81:
// rs2_h2_val == 32, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x0a02000013000d;  op2val:0xaaaa002000111000
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x0a02000013000d, 0xaaaa002000111000, x30, x3, 992, x6)

inst_82:
// rs1_h2_val == 65503, rs2_h1_val == 128, rs1_h1_val == 57343
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x02ffdfdfff0012;  op2val:0x2000002000800400
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x02ffdfdfff0012, 0x2000002000800400, x30, x3, 1008, x6)

inst_83:
// rs1_h2_val == 65533, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x11fffd00137fff;  op2val:0x020040ffbfffdf
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x11fffd00137fff, 0x020040ffbfffdf, x30, x3, 1024, x6)

inst_84:
// rs2_h2_val == 65535, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xffffaaaa4000fbff;  op2val:0xfffdffff00050400
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0xffffaaaa4000fbff, 0xfffdffff00050400, x30, x3, 1040, x6)

inst_85:
// rs2_h1_val == 32767, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x0840000020000e;  op2val:0x0400017fff0001
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x0840000020000e, 0x0400017fff0001, x30, x3, 1056, x6)

inst_86:
// rs1_h2_val == 2048, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x1000080000111000;  op2val:0xdfff0005fffd0040
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x1000080000111000, 0xdfff0005fffd0040, x30, x3, 1072, x6)

inst_87:
// rs1_h2_val == 1024, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x0504000002000b;  op2val:0x200aaaa00080005
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x0504000002000b, 0x200aaaa00080005, x30, x3, 1088, x6)

inst_88:
// rs1_h2_val == 4, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x050004fffddfff;  op2val:0x2000008000b0013
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x050004fffddfff, 0x2000008000b0013, x30, x3, 1104, x6)

inst_89:
// rs2_h0_val == 49151, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x11000a40000100;  op2val:0xfdff00060000bfff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x11000a40000100, 0xfdff00060000bfff, x30, x3, 1120, x6)

inst_90:
// rs2_h1_val == 65519, rs1_h3_val == 0
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x000008aaaa8000;  op2val:0xaaaadfffffef0012
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x000008aaaa8000, 0xaaaadfffffef0012, x30, x3, 1136, x6)

inst_91:
// rs1_h2_val == 32767, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x027fff00030001;  op2val:0x800000018000fdff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x027fff00030001, 0x800000018000fdff, x30, x3, 1152, x6)

inst_92:
// rs1_h1_val == 49151, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x06fbffbfffbfff;  op2val:0x060080000c000c
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x06fbffbfffbfff, 0x060080000c000c, x30, x3, 1168, x6)

inst_93:
// rs2_h1_val == 4096, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x010011000ef7ff;  op2val:0x09080010000800
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x010011000ef7ff, 0x09080010000800, x30, x3, 1184, x6)

inst_94:
// rs1_h1_val == 61439, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfbff7fffefffff7f;  op2val:0x13f7fffeffff7f
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0xfbff7fffefffff7f, 0x13f7fffeffff7f, x30, x3, 1200, x6)

inst_95:
// rs1_h1_val == 63487, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x020013f7ff0009;  op2val:0x03bfff01001000
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x020013f7ff0009, 0x03bfff01001000, x30, x3, 1216, x6)

inst_96:
// rs1_h1_val == 65279, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x20000ffeff4000;  op2val:0xffdf000700800004
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x20000ffeff4000, 0xffdf000700800004, x30, x3, 1232, x6)

inst_97:
// rs1_h1_val == 65471, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x02fffdffbf000b;  op2val:0x12010020007fff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x02fffdffbf000b, 0x12010020007fff, x30, x3, 1248, x6)

inst_98:
// rs1_h1_val == 32768, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x800000088000000a;  op2val:0xf7ffffbf0400ffff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x800000088000000a, 0xf7ffffbf0400ffff, x30, x3, 1264, x6)

inst_99:
// rs2_h0_val == 43690, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x02000dbffff7ff;  op2val:0xff7f000abfffaaaa
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x02000dbffff7ff, 0xff7f000abfffaaaa, x30, x3, 1280, x6)

inst_100:
// rs1_h1_val == 1024, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x0e80000400dfff;  op2val:0xbfffffef0004ffff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x0e80000400dfff, 0xbfffffef0004ffff, x30, x3, 1296, x6)

inst_101:
// rs2_h0_val == 63487, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x130001bffffdff;  op2val:0xdfff0800fffef7ff
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x130001bffffdff, 0xdfff0800fffef7ff, x30, x3, 1312, x6)

inst_102:
// rs1_h1_val == 64, rs1_h2_val == 65535
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00402000;  op2val:0x030040dfff0005
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x7fffffff00402000, 0x030040dfff0005, x30, x3, 1328, x6)

inst_103:
// rs1_h1_val == 65503, 
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x80000003ffdf0008;  op2val:0x2000040000020080
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x80000003ffdf0008, 0x2000040000020080, x30, x3, 1344, x6)

inst_104:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 65471, rs1_h0_val == 21845, rs2_h3_val == 64511, rs1_h3_val == 32, rs2_h2_val == 65503, rs1_h2_val == 43690
// opcode: ukaddh ; op1:x30; op2:x29; dest:x31; op1val:0x20aaaa00135555;  op2val:0xfbffffdf0013ffbf
TEST_PKRR_OP(ukaddh, x31, x30, x29, 0x0000000000000000, 0x20aaaa00135555, 0xfbffffdf0013ffbf, x30, x3, 1360, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 38*(XLEN/32),4,0xdeadbeef


signature_x3_0:
    .fill 172*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
