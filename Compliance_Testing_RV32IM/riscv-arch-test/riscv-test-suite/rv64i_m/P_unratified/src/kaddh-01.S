
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kaddh instruction of the RISC-V RV64PZicsr extension for the kaddh covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kaddh)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x29, rs2==x8, rd==x29, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val == 256, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h2_val != rs2_h2_val, rs2_h0_val == -16385, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val != rs2_h1_val, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h2_val == -2049, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h1_val == 16, rs1_h1_val == -9
// opcode: kaddh ; op1:x29; op2:x8; dest:x29; op1val:0x100f7fffff78000;  op2val:0xfffafffc0010bfff
TEST_PKRR_OP(kaddh, x29, x29, x8, 0x0000000000000000, 0x100f7fffff78000, 0xfffafffc0010bfff, x29, x1, 0, x5)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x10, rs2==x16, rd==x9, rs1_h3_val == rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val < 0, rs1_h0_val == 16384, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h3_val == -16385, rs2_h0_val == -257, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h1_val == 1, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h3_val == -16385, rs1_h2_val == -3
// opcode: kaddh ; op1:x10; op2:x16; dest:x9; op1val:0xbffffffd00014000;  op2val:0xbfff00030010feff
TEST_PKRR_OP(kaddh, x9, x10, x16, 0x0000000000000000, 0xbffffffd00014000, 0xbfff00030010feff, x10, x1, 16, x5)

inst_2:
// rs1 == rs2 != rd, rs1==x19, rs2==x19, rd==x7, rs1_h3_val < 0 and rs2_h3_val > 0, rs1_h2_val == 0, rs1_h1_val > 0 and rs2_h1_val < 0, rs2_h1_val == -32768, rs2_h2_val == 2048, rs1_h3_val == -65, rs1_h0_val == -1025
// opcode: kaddh ; op1:x19; op2:x19; dest:x7; op1val:0xffbf00003ffffbff;  op2val:0x0508008000fff9
TEST_PKRR_OP(kaddh, x7, x19, x19, 0x0000000000000000, 0xffbf00003ffffbff, 0x0508008000fff9, x19, x1, 32, x5)

inst_3:
// rs1 == rs2 == rd, rs1==x14, rs2==x14, rd==x14, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h1_val == 64, rs1_h2_val == 1024, rs2_h0_val == -2
// opcode: kaddh ; op1:x14; op2:x14; dest:x14; op1val:0x3fff0400fffa4000;  op2val:0x03fffa0040fffe
TEST_PKRR_OP(kaddh, x14, x14, x14, 0x0000000000000000, 0x3fff0400fffa4000, 0x03fffa0040fffe, x14, x1, 48, x5)

inst_4:
// rs2 == rd != rs1, rs1==x8, rs2==x18, rd==x18, rs1_h2_val == rs2_h2_val, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h0_val == -9, rs1_h0_val == 2, rs1_h1_val == -33, rs2_h3_val == 1, rs1_h3_val == 8192
// opcode: kaddh ; op1:x8; op2:x18; dest:x18; op1val:0x20000006ffdf0002;  op2val:0x010006c000fff7
TEST_PKRR_OP(kaddh, x18, x8, x18, 0x0000000000000000, 0x20000006ffdf0002, 0x010006c000fff7, x8, x1, 64, x5)

inst_5:
// rs1==x31, rs2==x3, rd==x8, rs1_h1_val == rs2_h1_val, rs1_h1_val == 4096, rs1_h3_val == 21845, rs1_h0_val == 1024, rs2_h1_val == 4096, rs2_h0_val == -32768
// opcode: kaddh ; op1:x31; op2:x3; dest:x8; op1val:0x5555000310000400;  op2val:0x01fff910008000
TEST_PKRR_OP(kaddh, x8, x31, x3, 0x0000000000000000, 0x5555000310000400, 0x01fff910008000, x31, x1, 80, x5)

inst_6:
// rs1==x16, rs2==x29, rd==x10, rs1_h0_val == rs2_h0_val, rs1_h1_val == 16384, rs2_h0_val == 32767, rs2_h2_val == -2, rs1_h3_val == -2049, rs1_h0_val == 32767, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h3_val == 2
// opcode: kaddh ; op1:x16; op2:x29; dest:x10; op1val:0xf7ff000040007fff;  op2val:0x02fffefffc7fff
TEST_PKRR_OP(kaddh, x10, x16, x29, 0x0000000000000000, 0xf7ff000040007fff, 0x02fffefffc7fff, x16, x1, 96, x5)

inst_7:
// rs1==x7, rs2==x13, rd==x16, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h0_val == 64, rs1_h3_val == 16, rs1_h1_val == 1024, rs2_h3_val == 2048, rs1_h0_val == -1
// opcode: kaddh ; op1:x7; op2:x13; dest:x16; op1val:0x10fff90400ffff;  op2val:0x800fff9fffa0040
TEST_PKRR_OP(kaddh, x16, x7, x13, 0x0000000000000000, 0x10fff90400ffff, 0x800fff9fffa0040, x7, x1, 112, x5)

inst_8:
// rs1==x21, rs2==x26, rd==x23, rs2_h3_val == -21846, rs2_h1_val == 2, rs1_h3_val == 32767, rs2_h0_val == 2, rs1_h2_val == -9
// opcode: kaddh ; op1:x21; op2:x26; dest:x23; op1val:0x7ffffff71000fffa;  op2val:0xaaaa000300020002
TEST_PKRR_OP(kaddh, x23, x21, x26, 0x0000000000000000, 0x7ffffff71000fffa, 0xaaaa000300020002, x21, x1, 128, x5)

inst_9:
// rs1==x17, rs2==x12, rd==x28, rs2_h3_val == 21845, rs2_h0_val == 32, rs2_h1_val == -1, rs1_h0_val == 512, rs1_h2_val == 21845, rs2_h2_val == -21846
// opcode: kaddh ; op1:x17; op2:x12; dest:x28; op1val:0xf7ff555500030200;  op2val:0x5555aaaaffff0020
TEST_PKRR_OP(kaddh, x28, x17, x12, 0x0000000000000000, 0xf7ff555500030200, 0x5555aaaaffff0020, x17, x1, 144, x5)

inst_10:
// rs1==x30, rs2==x4, rd==x21, rs2_h3_val == 32767, rs2_h1_val == 4, rs1_h0_val == -5, rs2_h2_val == -9, rs1_h1_val == -257, rs1_h3_val == 16384
// opcode: kaddh ; op1:x30; op2:x4; dest:x21; op1val:0x40000006fefffffb;  op2val:0x7ffffff700040020
TEST_PKRR_OP(kaddh, x21, x30, x4, 0x0000000000000000, 0x40000006fefffffb, 0x7ffffff700040020, x30, x1, 160, x5)

inst_11:
// rs1==x13, rs2==x17, rd==x11, rs2_h3_val == -8193, rs1_h3_val == 2, rs2_h1_val == 1, rs1_h1_val == 8192, rs1_h2_val == -129
// opcode: kaddh ; op1:x13; op2:x17; dest:x11; op1val:0x02ff7f2000fff9;  op2val:0xdffffff80001fffe
TEST_PKRR_OP(kaddh, x11, x13, x17, 0x0000000000000000, 0x02ff7f2000fff9, 0xdffffff80001fffe, x13, x1, 176, x5)

inst_12:
// rs1==x23, rs2==x2, rd==x20, rs2_h3_val == -4097, rs2_h1_val == -3, rs1_h2_val == -33, rs2_h2_val == 16, rs1_h3_val == 4096, rs2_h0_val == 128
// opcode: kaddh ; op1:x23; op2:x2; dest:x20; op1val:0x1000ffdf40000009;  op2val:0xefff0010fffd0080
TEST_PKRR_OP(kaddh, x20, x23, x2, 0x0000000000000000, 0x1000ffdf40000009, 0xefff0010fffd0080, x23, x1, 192, x5)

inst_13:
// rs1==x0, rs2==x27, rd==x3, rs2_h3_val == -2049, rs2_h0_val == 2048, rs2_h1_val == 16384, rs2_h2_val == 256
// opcode: kaddh ; op1:x0; op2:x27; dest:x3; op1val:0x1000000300030002;  op2val:0xf7ff010040000800
TEST_PKRR_OP(kaddh, x3, x0, x27, 0x0000000000000000, 0x1000000300030002, 0xf7ff010040000800, x0, x1, 208, x5)

inst_14:
// rs1==x4, rs2==x7, rd==x19, rs2_h3_val == -1025, rs2_h2_val == 32, rs1_h2_val == 16, rs2_h0_val == 8, rs1_h3_val == 128
// opcode: kaddh ; op1:x4; op2:x7; dest:x19; op1val:0x8000100001fbff;  op2val:0xfbff0020fff80008
TEST_PKRR_OP(kaddh, x19, x4, x7, 0x0000000000000000, 0x8000100001fbff, 0xfbff0020fff80008, x4, x1, 224, x5)

inst_15:
// rs1==x27, rs2==x22, rd==x24, rs2_h3_val == -513, rs1_h0_val == -2049, rs1_h1_val == 32767, rs2_h0_val == 21845
// opcode: kaddh ; op1:x27; op2:x22; dest:x24; op1val:0x5555f7ff7ffff7ff;  op2val:0xfdfffff7fffc5555
TEST_PKRR_OP(kaddh, x24, x27, x22, 0x0000000000000000, 0x5555f7ff7ffff7ff, 0xfdfffff7fffc5555, x27, x1, 240, x5)

inst_16:
// rs1==x15, rs2==x31, rd==x13, rs2_h3_val == -257, rs1_h1_val == -21846, rs1_h2_val == 32767
// opcode: kaddh ; op1:x15; op2:x31; dest:x13; op1val:0x077fffaaaa7fff;  op2val:0xfeff001000035555
TEST_PKRR_OP(kaddh, x13, x15, x31, 0x0000000000000000, 0x077fffaaaa7fff, 0xfeff001000035555, x15, x1, 256, x8)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_17:
// rs1==x25, rs2==x0, rd==x4, rs2_h3_val == -129, rs1_h1_val == 4, rs1_h3_val == -1, rs2_h1_val == -33
// opcode: kaddh ; op1:x25; op2:x0; dest:x4; op1val:0xffff000900040005;  op2val:0xff7ffff7ffdf0040
TEST_PKRR_OP(kaddh, x4, x25, x0, 0x0000000000000000, 0xffff000900040005, 0xff7ffff7ffdf0040, x25, x7, 0, x8)

inst_18:
// rs1==x28, rs2==x11, rd==x0, rs2_h3_val == -65, rs2_h2_val == -65, rs1_h1_val == -3, rs1_h0_val == 8, rs1_h3_val == -4097
// opcode: kaddh ; op1:x28; op2:x11; dest:x0; op1val:0xeffffff9fffd0008;  op2val:0xffbfffbf3fff0003
TEST_PKRR_OP(kaddh, x0, x28, x11, 0x0000000000000000, 0xeffffff9fffd0008, 0xffbfffbf3fff0003, x28, x7, 16, x8)

inst_19:
// rs1==x3, rs2==x1, rd==x30, rs2_h3_val == -33, rs1_h0_val == -33, rs2_h2_val == -17, rs2_h1_val == -65, rs1_h1_val == -16385
// opcode: kaddh ; op1:x3; op2:x1; dest:x30; op1val:0x3fff7fffbfffffdf;  op2val:0xffdfffefffbf0080
TEST_PKRR_OP(kaddh, x30, x3, x1, 0x0000000000000000, 0x3fff7fffbfffffdf, 0xffdfffefffbf0080, x3, x7, 32, x8)

inst_20:
// rs1==x9, rs2==x15, rd==x17, rs2_h3_val == -17, rs2_h2_val == -8193, rs1_h1_val == -32768, rs2_h1_val == -2049, rs1_h3_val == 0, rs1_h0_val == -21846
// opcode: kaddh ; op1:x9; op2:x15; dest:x17; op1val:0x00ff7f8000aaaa;  op2val:0xffefdffff7ff8000
TEST_PKRR_OP(kaddh, x17, x9, x15, 0x0000000000000000, 0x00ff7f8000aaaa, 0xffefdffff7ff8000, x9, x7, 48, x8)

inst_21:
// rs1==x1, rs2==x25, rd==x26, rs2_h3_val == -9, rs1_h1_val == 128, rs1_h3_val == -1025, rs1_h0_val == 0, rs1_h2_val == -17, rs2_h0_val == 1024
// opcode: kaddh ; op1:x1; op2:x25; dest:x26; op1val:0xfbffffef00800000;  op2val:0xfff7fff6c0000400
TEST_PKRR_OP(kaddh, x26, x1, x25, 0x0000000000000000, 0xfbffffef00800000, 0xfff7fff6c0000400, x1, x7, 64, x8)

inst_22:
// rs1==x24, rs2==x5, rd==x15, rs2_h3_val == -5, rs2_h2_val == -1, rs1_h1_val == 256, rs1_h3_val == -129, rs2_h0_val == -65
// opcode: kaddh ; op1:x24; op2:x5; dest:x15; op1val:0xff7f55550100ffdf;  op2val:0xfffbffffc000ffbf
TEST_PKRR_OP(kaddh, x15, x24, x5, 0x0000000000000000, 0xff7f55550100ffdf, 0xfffbffffc000ffbf, x24, x7, 80, x8)

inst_23:
// rs1==x12, rs2==x28, rd==x27, rs2_h3_val == -3, rs1_h2_val == 16384, rs2_h1_val == 256, rs2_h2_val == -1025
// opcode: kaddh ; op1:x12; op2:x28; dest:x27; op1val:0xfbff4000fffcaaaa;  op2val:0xfffdfbff0100fffa
TEST_PKRR_OP(kaddh, x27, x12, x28, 0x0000000000000000, 0xfbff4000fffcaaaa, 0xfffdfbff0100fffa, x12, x7, 96, x8)

inst_24:
// rs1==x6, rs2==x10, rd==x22, rs2_h3_val == -2, rs2_h0_val == -33
// opcode: kaddh ; op1:x6; op2:x10; dest:x22; op1val:0x037fff7ffffff9;  op2val:0xfffefffcf7ffffdf
TEST_PKRR_OP(kaddh, x22, x6, x10, 0x0000000000000000, 0x037fff7ffffff9, 0xfffefffcf7ffffdf, x6, x7, 112, x8)

inst_25:
// rs1==x2, rs2==x20, rd==x31, rs2_h3_val == -32768, rs2_h1_val == -129, rs1_h2_val == 8, rs1_h1_val == -4097, rs2_h2_val == 1, rs1_h0_val == -257
// opcode: kaddh ; op1:x2; op2:x20; dest:x31; op1val:0xffff0008effffeff;  op2val:0x80000001ff7f0040
TEST_PKRR_OP(kaddh, x31, x2, x20, 0x0000000000000000, 0xffff0008effffeff, 0x80000001ff7f0040, x2, x7, 128, x8)

inst_26:
// rs1==x22, rs2==x24, rd==x5, rs2_h3_val == 16384, rs1_h0_val == -9, rs1_h2_val == 2, rs1_h3_val == -8193, rs2_h2_val == 4, rs2_h0_val == 512
// opcode: kaddh ; op1:x22; op2:x24; dest:x5; op1val:0xdfff00028000fff7;  op2val:0x4000000401000200
TEST_PKRR_OP(kaddh, x5, x22, x24, 0x0000000000000000, 0xdfff00028000fff7, 0x4000000401000200, x22, x7, 144, x8)

inst_27:
// rs1==x11, rs2==x23, rd==x6, rs2_h3_val == 8192, rs1_h1_val == -2, rs2_h1_val == 0, rs1_h2_val == 256, rs1_h3_val == 1, rs2_h2_val == -32768
// opcode: kaddh ; op1:x11; op2:x23; dest:x6; op1val:0x010100fffefffc;  op2val:0x2000800000000080
TEST_PKRR_OP(kaddh, x6, x11, x23, 0x0000000000000000, 0x010100fffefffc, 0x2000800000000080, x11, x7, 160, x8)

inst_28:
// rs1==x18, rs2==x30, rd==x2, rs2_h3_val == 4096, rs1_h1_val == 32, rs2_h1_val == 2048
// opcode: kaddh ; op1:x18; op2:x30; dest:x2; op1val:0xfff6ff7f0020feff;  op2val:0x1000aaaa08000800
TEST_PKRR_OP(kaddh, x2, x18, x30, 0x0000000000000000, 0xfff6ff7f0020feff, 0x1000aaaa08000800, x18, x7, 176, x8)

inst_29:
// rs1==x20, rs2==x21, rd==x1, rs2_h3_val == 1024, rs1_h0_val == 4096, rs2_h2_val == 4096, rs1_h2_val == -21846, rs1_h1_val == -17
// opcode: kaddh ; op1:x20; op2:x21; dest:x1; op1val:0xfbffaaaaffef1000;  op2val:0x40010004000fff8
TEST_PKRR_OP(kaddh, x1, x20, x21, 0x0000000000000000, 0xfbffaaaaffef1000, 0x40010004000fff8, x20, x7, 192, x8)

inst_30:
// rs1==x5, rs2==x9, rd==x25, rs2_h3_val == 512, rs2_h0_val == 1
// opcode: kaddh ; op1:x5; op2:x9; dest:x25; op1val:0x0000067fff8000;  op2val:0x2000020fffc0001
TEST_PKRR_OP(kaddh, x25, x5, x9, 0x0000000000000000, 0x0000067fff8000, 0x2000020fffc0001, x5, x7, 208, x8)

inst_31:
// rs1==x26, rs2==x6, rd==x12, rs2_h3_val == 256, rs1_h1_val == 512
// opcode: kaddh ; op1:x26; op2:x6; dest:x12; op1val:0x09000302000000;  op2val:0x1008000fff60800
TEST_PKRR_OP(kaddh, x12, x26, x6, 0x0000000000000000, 0x09000302000000, 0x1008000fff60800, x26, x7, 224, x8)

inst_32:
// rs2_h3_val == 128, rs1_h0_val == -2
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xff7f3fff0200fffe;  op2val:0x80fff90100fff8
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xff7f3fff0200fffe, 0x80fff90100fff8, x30, x7, 240, x8)

inst_33:
// rs2_h3_val == 64, rs1_h2_val == 32, rs2_h0_val == -3
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xbfff00200001fff9;  op2val:0x40fff60005fffd
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xbfff00200001fff9, 0x40fff60005fffd, x30, x7, 256, x1)

inst_34:
// rs2_h3_val == 32, rs1_h2_val == 64, rs1_h3_val == -9, rs2_h1_val == 32, rs2_h2_val == 32767
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfff70040fefffffb;  op2val:0x207fff0020c000
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfff70040fefffffb, 0x207fff0020c000, x30, x7, 272, x1)

inst_35:
// rs2_h3_val == 16, rs1_h0_val == 128
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xffff000800040080;  op2val:0x10000300060040
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xffff000800040080, 0x10000300060040, x30, x7, 288, x1)

inst_36:
// rs1_h1_val == -5, rs1_h2_val == 128, rs1_h0_val == 1, rs1_h3_val == 8
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x080080fffb0001;  op2val:0xfbfffbff00030002
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x080080fffb0001, 0xfbfffbff00030002, x30, x7, 304, x1)

inst_37:
// rs1_h1_val == 2048, rs1_h3_val == -2, rs2_h2_val == 512, rs1_h2_val == -257
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffefeff08001000;  op2val:0xff7f0200ff7f0002
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfffefeff08001000, 0xff7f0200ff7f0002, x30, x7, 320, x1)

inst_38:
// rs1_h1_val == 64, rs2_h2_val == -513, rs1_h0_val == 256, rs1_h3_val == -17, rs2_h1_val == -9
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xffef002000400100;  op2val:0x02fdfffff70800
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xffef002000400100, 0x02fdfffff70800, x30, x7, 336, x1)

inst_39:
// rs1_h1_val == 16, rs1_h0_val == 32, rs1_h2_val == -513, rs2_h0_val == 16384
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffdff00100020;  op2val:0x40fff800054000
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xff7ffdff00100020, 0x40fff800054000, x30, x7, 352, x1)

inst_40:
// rs1_h1_val == 8, rs1_h0_val == 16, rs2_h1_val == 128
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x3fff555500080010;  op2val:0xfeffffef0080bfff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x3fff555500080010, 0xfeffffef0080bfff, x30, x7, 368, x1)

inst_41:
// rs1_h1_val == 2, rs2_h2_val == -16385
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xc00000090002c000;  op2val:0x7fffbfff00100006
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xc00000090002c000, 0x7fffbfff00100006, x30, x7, 384, x1)

inst_42:
// rs1_h1_val == 0, rs1_h3_val == -21846, rs1_h2_val == 4, rs2_h2_val == -257
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa00040000fff8;  op2val:0x40fefffff64000
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xaaaa00040000fff8, 0x40fefffff64000, x30, x7, 400, x1)

inst_43:
// rs1_h1_val == -1, rs1_h2_val == -1, rs1_h0_val == -17, rs2_h3_val == -1
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfff9ffffffffffef;  op2val:0xfffffff91000bfff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfff9ffffffffffef, 0xfffffff91000bfff, x30, x7, 416, x1)

inst_44:
// rs1_h0_val == 21845, rs1_h3_val == -32768, rs2_h2_val == -5
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fffe5555;  op2val:0x400fffb80007fff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x80000000fffe5555, 0x400fffb80007fff, x30, x7, 432, x1)

inst_45:
// rs1_h0_val == -16385, rs2_h0_val == -129
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x08f7ffbfffbfff;  op2val:0x7ffffff8fffaff7f
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x08f7ffbfffbfff, 0x7ffffff8fffaff7f, x30, x7, 448, x1)

inst_46:
// rs1_h0_val == -8193, rs1_h3_val == -257, rs2_h0_val == 0
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfefffdfffff7dfff;  op2val:0xfff8fffb00060000
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfefffdfffff7dfff, 0xfff8fffb00060000, x30, x7, 464, x1)

inst_47:
// rs1_h0_val == -4097, rs2_h1_val == -21846, rs2_h0_val == -2049
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffa0008efff;  op2val:0xc0000007aaaaf7ff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfffefffa0008efff, 0xc0000007aaaaf7ff, x30, x7, 480, x1)

inst_48:
// rs1_h0_val == -513, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x1000feff2000fdff;  op2val:0xfdff08000007f7ff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x1000feff2000fdff, 0xfdff08000007f7ff, x30, x7, 496, x1)

inst_49:
// rs1_h0_val == -129, rs2_h2_val == 64
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0006fff8ff7f;  op2val:0x070040aaaa0400
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfffe0006fff8ff7f, 0x070040aaaa0400, x30, x7, 512, x1)

inst_50:
// rs1_h0_val == -65, rs1_h2_val == 8192
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xdfff20000008ffbf;  op2val:0xfffcfffefff9c000
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xdfff20000008ffbf, 0xfffcfffefff9c000, x30, x7, 528, x1)

inst_51:
// rs1_h0_val == -3, rs2_h0_val == 4, rs2_h1_val == 8
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffdfffcfffd;  op2val:0x2007fff00080004
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x5555fffdfffcfffd, 0x2007fff00080004, x30, x7, 544, x1)

inst_52:
// rs1_h0_val == 8192, rs1_h3_val == 512
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x200fdfffff92000;  op2val:0x400ffff0009fffe
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x200fdfffff92000, 0x400ffff0009fffe, x30, x7, 560, x1)

inst_53:
// rs1_h0_val == 2048, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffffc0800;  op2val:0x800000580000007
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfffffdfffffc0800, 0x800000580000007, x30, x7, 576, x1)

inst_54:
// rs1_h0_val == 64, rs1_h2_val == -65
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x4000ffbf00050040;  op2val:0xfff8ffbf00030001
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x4000ffbf00050040, 0xfff8ffbf00030001, x30, x7, 592, x1)

inst_55:
// rs1_h0_val == 4, rs2_h0_val == 8192
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x200ffff20000004;  op2val:0xfff9000900072000
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x200ffff20000004, 0xfff9000900072000, x30, x7, 608, x1)

inst_56:
// rs2_h3_val == 8, rs2_h1_val == -1025
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x02f7ff4000fffe;  op2val:0x08dffffbff0006
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x02f7ff4000fffe, 0x08dffffbff0006, x30, x7, 624, x1)

inst_57:
// rs2_h3_val == 4, rs1_h1_val == 21845, rs2_h2_val == 8
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xefff000855550020;  op2val:0x0400083fff0400
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xefff000855550020, 0x0400083fff0400, x30, x7, 640, x1)

inst_58:
// rs2_h3_val == 0, rs1_h2_val == 4096
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x001000c0000100;  op2val:0x00fff7c000feff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x001000c0000100, 0x00fff7c000feff, x30, x7, 656, x1)

inst_59:
// rs2_h0_val == -21846, rs1_h1_val == -129
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0080ff7fffff;  op2val:0xfff8c0000006aaaa
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xffbf0080ff7fffff, 0xfff8c0000006aaaa, x30, x7, 672, x1)

inst_60:
// rs2_h0_val == -8193, rs1_h3_val == 32, rs2_h1_val == -4097
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x20ff7ffffdfffe;  op2val:0x10000005efffdfff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x20ff7ffffdfffe, 0x10000005efffdfff, x30, x7, 688, x1)

inst_61:
// rs2_h0_val == -4097, rs1_h2_val == -2, rs2_h2_val == 21845
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfff9fffefff7f7ff;  op2val:0xbfff5555ff7fefff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfff9fffefff7f7ff, 0xbfff5555ff7fefff, x30, x7, 704, x1)

inst_62:
// rs2_h0_val == -1025, rs2_h1_val == 32767
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffaaaa;  op2val:0xdfff00097ffffbff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffaaaa, 0xdfff00097ffffbff, x30, x7, 720, x1)

inst_63:
// rs2_h0_val == -513, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfbff55553fff0005;  op2val:0xf7ffffbffff8fdff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfbff55553fff0005, 0xf7ffffbffff8fdff, x30, x7, 736, x1)

inst_64:
// rs2_h0_val == -17, rs2_h1_val == -513
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffa008008005555;  op2val:0xc0000020fdffffef
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfffa008008005555, 0xc0000020fdffffef, x30, x7, 752, x1)

inst_65:
// rs2_h0_val == -5, rs2_h1_val == -2
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffdfffefffbf;  op2val:0xc0008000fffefffb
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x8000ffdfffefffbf, 0xc0008000fffefffb, x30, x7, 768, x1)

inst_66:
// rs2_h0_val == 4096, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0000fffe4000;  op2val:0x80fffcfff91000
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfbff0000fffe4000, 0x80fffcfff91000, x30, x7, 784, x1)

inst_67:
// rs2_h0_val == 256, rs1_h2_val == -8193
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x3fffdfff0080dfff;  op2val:0x037ffffff90100
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x3fffdfff0080dfff, 0x037ffffff90100, x30, x7, 800, x1)

inst_68:
// rs2_h0_val == 16, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x07fff900105555;  op2val:0xff7ffffeff7f0010
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x07fff900105555, 0xff7ffffeff7f0010, x30, x7, 816, x1)

inst_69:
// rs2_h0_val == -1, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x010020ffff0020;  op2val:0x08dfff1000ffff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x010020ffff0020, 0x08dfff1000ffff, x30, x7, 832, x1)

inst_70:
// rs1_h3_val == -513, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffffaaaa;  op2val:0xfdffdffff7ff0003
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfdffffffffffaaaa, 0xfdffdffff7ff0003, x30, x7, 848, x1)

inst_71:
// rs1_h3_val == -33, rs1_h1_val == -513
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0100fdff0009;  op2val:0xffbffff87ffffbff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xffdf0100fdff0009, 0xffbffff87ffffbff, x30, x7, 864, x1)

inst_72:
// rs1_h3_val == -5, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffb00800040ffef;  op2val:0xfff8ffefaaaa0005
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfffb00800040ffef, 0xfff8ffefaaaa0005, x30, x7, 880, x1)

inst_73:
// rs1_h3_val == -3, rs2_h2_val == 16384, rs2_h1_val == -257
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0009feff0009;  op2val:0x024000feff0005
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfffd0009feff0009, 0x024000feff0005, x30, x7, 896, x1)

inst_74:
// rs1_h3_val == 2048, rs2_h2_val == -33
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x800c00010005555;  op2val:0x05ffdf0008fffd
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x800c00010005555, 0x05ffdf0008fffd, x30, x7, 912, x1)

inst_75:
// rs1_h3_val == 1024, rs2_h2_val == 2
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x400000380000010;  op2val:0xdfff00020080fdff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x400000380000010, 0xdfff00020080fdff, x30, x7, 928, x1)

inst_76:
// rs2_h2_val == -4097, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x05f7fffffef7ff;  op2val:0xc000effffffaffff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x05f7fffffef7ff, 0xc000effffffaffff, x30, x7, 944, x1)

inst_77:
// rs2_h2_val == -2049, rs1_h1_val == -1025, rs2_h1_val == 21845
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x10fffffbff7fff;  op2val:0x10f7ff5555ffbf
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x10fffffbff7fff, 0x10f7ff5555ffbf, x30, x7, 960, x1)

inst_78:
// rs1_h3_val == 64, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x403fff0004ffbf;  op2val:0x030010fffe0004
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x403fff0004ffbf, 0x030010fffe0004, x30, x7, 976, x1)

inst_79:
// rs2_h2_val == -129, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x40000900103fff;  op2val:0xf7ffff7ffdff7fff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x40000900103fff, 0xf7ffff7ffdff7fff, x30, x7, 992, x1)

inst_80:
// rs1_h3_val == 4, rs2_h1_val == -16385
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x04f7ffaaaa0200;  op2val:0xdfff0008bfffffff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x04f7ffaaaa0200, 0xdfff0008bfffffff, x30, x7, 1008, x1)

inst_81:
// rs2_h2_val == -3, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x03fffaffdf5555;  op2val:0xfefffffdfffdaaaa
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x03fffaffdf5555, 0xfefffffdfffdaaaa, x30, x7, 1024, x1)

inst_82:
// rs1_h2_val == -16385, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x2000bfff5555ffbf;  op2val:0xfbfffffdbffffbff
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x2000bfff5555ffbf, 0xfbfffffdbffffbff, x30, x7, 1040, x1)

inst_83:
// rs2_h2_val == 8192, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x800ff7ffff8fffc;  op2val:0xefff20001000fff7
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x800ff7ffff8fffc, 0xefff20001000fff7, x30, x7, 1056, x1)

inst_84:
// rs1_h2_val == -4097, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x100efff00020200;  op2val:0xbfff00080001ffbf
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x100efff00020200, 0xbfff00080001ffbf, x30, x7, 1072, x1)

inst_85:
// rs2_h2_val == 1024, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x10fff8fffc1000;  op2val:0xffef040000400007
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x10fff8fffc1000, 0xffef040000400007, x30, x7, 1088, x1)

inst_86:
// rs1_h2_val == -1025, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x40fbffff7f0009;  op2val:0x08fbffff7ffff9
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x40fbffff7f0009, 0x08fbffff7ffff9, x30, x7, 1104, x1)

inst_87:
// rs2_h2_val == 128, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xefffaaaa00070400;  op2val:0x80008080000002
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xefffaaaa00070400, 0x80008080000002, x30, x7, 1120, x1)

inst_88:
// rs1_h2_val == -32768, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffa80000007ffbf;  op2val:0xfffb0003ffdf0400
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfffa80000007ffbf, 0xfffb0003ffdf0400, x30, x7, 1136, x1)

inst_89:
// rs1_h2_val == 2048, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x060800fffafffe;  op2val:0x400ff7fc000fffd
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x060800fffafffe, 0x400ff7fc000fffd, x30, x7, 1152, x1)

inst_90:
// rs2_h1_val == -8193, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffc0006fff6fbff;  op2val:0x800fff6dfff0800
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfffc0006fff6fbff, 0x800fff6dfff0800, x30, x7, 1168, x1)

inst_91:
// rs1_h2_val == 512, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x0202008000f7ff;  op2val:0x20ffbfc000fffe
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x0202008000f7ff, 0x20ffbfc000fffe, x30, x7, 1184, x1)

inst_92:
// rs2_h1_val == -17, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xffbf3ffffffc0010;  op2val:0xff7f0200ffef2000
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xffbf3ffffffc0010, 0xff7f0200ffef2000, x30, x7, 1200, x1)

inst_93:
// rs1_h2_val == 1, rs2_h2_val == 0
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0001fffa8000;  op2val:0x4000000055550001
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfbff0001fffa8000, 0x4000000055550001, x30, x7, 1216, x1)

inst_94:
// rs2_h1_val == -5, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffafff83fff0009;  op2val:0xfffc0008fffb0100
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfffafff83fff0009, 0xfffc0008fffb0100, x30, x7, 1232, x1)

inst_95:
// rs1_h2_val == -5, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00070001;  op2val:0xfdffffdfffbfff7f
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xfffffffb00070001, 0xfdffffdfffbfff7f, x30, x7, 1248, x1)

inst_96:
// rs2_h1_val == 8192, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x100000720000003;  op2val:0x20000082000ffef
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x100000720000003, 0x20000082000ffef, x30, x7, 1264, x1)

inst_97:
// rs1_h1_val == -8193, rs2_h1_val == 1024
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x4000fff9dfffdfff;  op2val:0xf7fffffc0400fff6
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x4000fff9dfffdfff, 0xf7fffffc0400fff6, x30, x7, 1280, x1)

inst_98:
// rs2_h1_val == 512, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x000007fffe0200;  op2val:0xffbf01000200ffbf
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x000007fffe0200, 0xffbf01000200ffbf, x30, x7, 1296, x1)

inst_99:
// rs1_h1_val == -65, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x800fdffffbfffff;  op2val:0x03bffffeff0002
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x800fdffffbfffff, 0x03bffffeff0002, x30, x7, 1312, x1)

inst_100:
// rs1_h1_val == -2049, 
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x05fffff7ffbfff;  op2val:0xaaaa4000fbff2000
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x05fffff7ffbfff, 0xaaaa4000fbff2000, x30, x7, 1328, x1)

inst_101:
// rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val > 0 and rs2_h2_val < 0, rs2_h1_val == 64, rs1_h2_val == 1024, rs2_h0_val == -2
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0x3fff0400fffa4000;  op2val:0x03fffa0040fffe
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0x3fff0400fffa4000, 0x03fffa0040fffe, x30, x7, 1344, x1)

inst_102:
// rs2_h3_val == -65, rs2_h2_val == -65, rs1_h1_val == -3, rs1_h0_val == 8, rs1_h3_val == -4097
// opcode: kaddh ; op1:x30; op2:x29; dest:x31; op1val:0xeffffff9fffd0008;  op2val:0xffbfffbf3fff0003
TEST_PKRR_OP(kaddh, x31, x30, x29, 0x0000000000000000, 0xeffffff9fffd0008, 0xffbfffbf3fff0003, x30, x7, 1360, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 34*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 172*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
