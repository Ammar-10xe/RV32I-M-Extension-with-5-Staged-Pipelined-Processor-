
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srli32.u instruction of the RISC-V RV64PZicsr extension for the srli32.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srli32.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd, rs1==x11, rd==x11, rs1_w0_val == 0, imm_val == 20
// opcode: srli32.u ; op1:x11; dest:x11; op1val:0x00000f00000000;  immval:0x14
TEST_IMM_OP( srli32.u, x11, x11, 0x0000000000000000, 0x00000f00000000, 0x14, x1, 0, x2)

inst_1:
// rs1 != rd, rs1==x31, rd==x25, imm_val == 31, rs1_w1_val == 131072, rs1_w0_val == 4294966271
// opcode: srli32.u ; op1:x31; dest:x25; op1val:0x020000fffffbff;  immval:0x1f
TEST_IMM_OP( srli32.u, x25, x31, 0x0000000000000000, 0x020000fffffbff, 0x1f, x1, 8, x2)

inst_2:
// rs1==x27, rd==x13, imm_val == 30, rs1_w1_val == 4294967167
// opcode: srli32.u ; op1:x27; dest:x13; op1val:0xffffff7f00000012;  immval:0x1e
TEST_IMM_OP( srli32.u, x13, x27, 0x0000000000000000, 0xffffff7f00000012, 0x1e, x1, 16, x2)

inst_3:
// rs1==x10, rd==x8, imm_val == 29, rs1_w1_val == 2048
// opcode: srli32.u ; op1:x10; dest:x8; op1val:0x0008000000000c;  immval:0x1d
TEST_IMM_OP( srli32.u, x8, x10, 0x0000000000000000, 0x0008000000000c, 0x1d, x1, 24, x2)

inst_4:
// rs1==x25, rd==x31, imm_val == 28, rs1_w1_val == 4294967231
// opcode: srli32.u ; op1:x25; dest:x31; op1val:0xffffffbf0000000a;  immval:0x1c
TEST_IMM_OP( srli32.u, x31, x25, 0x0000000000000000, 0xffffffbf0000000a, 0x1c, x1, 32, x2)

inst_5:
// rs1==x28, rd==x5, imm_val == 27, rs1_w0_val == 4194304, rs1_w1_val == 4194304
// opcode: srli32.u ; op1:x28; dest:x5; op1val:0x40000000400000;  immval:0x1b
TEST_IMM_OP( srli32.u, x5, x28, 0x0000000000000000, 0x40000000400000, 0x1b, x1, 40, x2)

inst_6:
// rs1==x9, rd==x23, imm_val == 26, rs1_w0_val == 4293918719
// opcode: srli32.u ; op1:x9; dest:x23; op1val:0x000012ffefffff;  immval:0x1a
TEST_IMM_OP( srli32.u, x23, x9, 0x0000000000000000, 0x000012ffefffff, 0x1a, x1, 48, x2)

inst_7:
// rs1==x21, rd==x17, imm_val == 25, rs1_w1_val == 33554432, rs1_w0_val == 128
// opcode: srli32.u ; op1:x21; dest:x17; op1val:0x200000000000080;  immval:0x19
TEST_IMM_OP( srli32.u, x17, x21, 0x0000000000000000, 0x200000000000080, 0x19, x1, 56, x2)

inst_8:
// rs1==x30, rd==x14, imm_val == 24, 
// opcode: srli32.u ; op1:x30; dest:x14; op1val:0x00000b00000006;  immval:0x18
TEST_IMM_OP( srli32.u, x14, x30, 0x0000000000000000, 0x00000b00000006, 0x18, x1, 64, x2)

inst_9:
// rs1==x26, rd==x18, imm_val == 23, rs1_w0_val == 134217728
// opcode: srli32.u ; op1:x26; dest:x18; op1val:0x00000708000000;  immval:0x17
TEST_IMM_OP( srli32.u, x18, x26, 0x0000000000000000, 0x00000708000000, 0x17, x1, 72, x2)

inst_10:
// rs1==x18, rd==x21, imm_val == 22, rs1_w0_val == 4290772991, rs1_w1_val == 256
// opcode: srli32.u ; op1:x18; dest:x21; op1val:0x000100ffbfffff;  immval:0x16
TEST_IMM_OP( srli32.u, x21, x18, 0x0000000000000000, 0x000100ffbfffff, 0x16, x1, 80, x2)

inst_11:
// rs1==x20, rd==x30, imm_val == 21, rs1_w1_val == 4294967291
// opcode: srli32.u ; op1:x20; dest:x30; op1val:0xfffffffbfffffbff;  immval:0x15
TEST_IMM_OP( srli32.u, x30, x20, 0x0000000000000000, 0xfffffffbfffffbff, 0x15, x1, 88, x2)

inst_12:
// rs1==x24, rd==x9, imm_val == 19, rs1_w0_val == 2147483648
// opcode: srli32.u ; op1:x24; dest:x9; op1val:0x40000080000000;  immval:0x13
TEST_IMM_OP( srli32.u, x9, x24, 0x0000000000000000, 0x40000080000000, 0x13, x1, 96, x2)

inst_13:
// rs1==x19, rd==x22, imm_val == 18, rs1_w1_val == 3758096383
// opcode: srli32.u ; op1:x19; dest:x22; op1val:0xdfffffff00000013;  immval:0x12
TEST_IMM_OP( srli32.u, x22, x19, 0x0000000000000000, 0xdfffffff00000013, 0x12, x1, 104, x2)

inst_14:
// rs1==x14, rd==x15, imm_val == 17, rs1_w0_val == 3221225471, rs1_w1_val == 4294967293
// opcode: srli32.u ; op1:x14; dest:x15; op1val:0xfffffffdbfffffff;  immval:0x11
TEST_IMM_OP( srli32.u, x15, x14, 0x0000000000000000, 0xfffffffdbfffffff, 0x11, x1, 112, x2)

inst_15:
// rs1==x17, rd==x10, imm_val == 16, rs1_w1_val == 4227858431
// opcode: srli32.u ; op1:x17; dest:x10; op1val:0xfbffffff00400000;  immval:0x10
TEST_IMM_OP( srli32.u, x10, x17, 0x0000000000000000, 0xfbffffff00400000, 0x10, x1, 120, x2)

inst_16:
// rs1==x15, rd==x20, imm_val == 15, rs1_w1_val == 4294934527
// opcode: srli32.u ; op1:x15; dest:x20; op1val:0xffff7fffffbfffff;  immval:0xf
TEST_IMM_OP( srli32.u, x20, x15, 0x0000000000000000, 0xffff7fffffbfffff, 0xf, x1, 128, x2)

inst_17:
// rs1==x6, rd==x16, imm_val == 14, rs1_w0_val == 4294443007, rs1_w1_val == 4294965247
// opcode: srli32.u ; op1:x6; dest:x16; op1val:0xfffff7fffff7ffff;  immval:0xe
TEST_IMM_OP( srli32.u, x16, x6, 0x0000000000000000, 0xfffff7fffff7ffff, 0xe, x1, 136, x2)

inst_18:
// rs1==x29, rd==x0, imm_val == 13, rs1_w1_val == 1024, rs1_w0_val == 16384
// opcode: srli32.u ; op1:x29; dest:x0; op1val:0x00040000004000;  immval:0xd
TEST_IMM_OP( srli32.u, x0, x29, 0x0000000000000000, 0x00040000004000, 0xd, x1, 144, x2)

inst_19:
// rs1==x4, rd==x7, imm_val == 12, rs1_w0_val == 4286578687
// opcode: srli32.u ; op1:x4; dest:x7; op1val:0x00000dff7fffff;  immval:0xc
TEST_IMM_OP( srli32.u, x7, x4, 0x0000000000000000, 0x00000dff7fffff, 0xc, x1, 152, x2)

inst_20:
// rs1==x7, rd==x2, imm_val == 11, 
// opcode: srli32.u ; op1:x7; dest:x2; op1val:0x00080000000013;  immval:0xb
TEST_IMM_OP( srli32.u, x2, x7, 0x0000000000000000, 0x00080000000013, 0xb, x1, 160, x9)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_21:
// rs1==x16, rd==x26, imm_val == 10, rs1_w0_val == 3758096383, rs1_w1_val == 16777216
// opcode: srli32.u ; op1:x16; dest:x26; op1val:0x1000000dfffffff;  immval:0xa
TEST_IMM_OP( srli32.u, x26, x16, 0x0000000000000000, 0x1000000dfffffff, 0xa, x7, 0, x9)

inst_22:
// rs1==x3, rd==x29, imm_val == 9, rs1_w0_val == 536870912, rs1_w1_val == 1073741824
// opcode: srli32.u ; op1:x3; dest:x29; op1val:0x4000000020000000;  immval:0x9
TEST_IMM_OP( srli32.u, x29, x3, 0x0000000000000000, 0x4000000020000000, 0x9, x7, 8, x9)

inst_23:
// rs1==x0, rd==x3, imm_val == 8, rs1_w0_val == 262144, rs1_w1_val == 4160749567
// opcode: srli32.u ; op1:x0; dest:x3; op1val:0xf7ffffff00040000;  immval:0x8
TEST_IMM_OP( srli32.u, x3, x0, 0x0000000000000000, 0xf7ffffff00040000, 0x8, x7, 16, x9)

inst_24:
// rs1==x22, rd==x28, imm_val == 7, rs1_w0_val == 4294967294
// opcode: srli32.u ; op1:x22; dest:x28; op1val:0x000800fffffffe;  immval:0x7
TEST_IMM_OP( srli32.u, x28, x22, 0x0000000000000000, 0x000800fffffffe, 0x7, x7, 24, x9)

inst_25:
// rs1==x12, rd==x27, imm_val == 6, rs1_w1_val == 536870912
// opcode: srli32.u ; op1:x12; dest:x27; op1val:0x2000000000000000;  immval:0x6
TEST_IMM_OP( srli32.u, x27, x12, 0x0000000000000000, 0x2000000000000000, 0x6, x7, 32, x9)

inst_26:
// rs1==x8, rd==x6, imm_val == 5, rs1_w1_val == 4294967294
// opcode: srli32.u ; op1:x8; dest:x6; op1val:0xfffffffe00000012;  immval:0x5
TEST_IMM_OP( srli32.u, x6, x8, 0x0000000000000000, 0xfffffffe00000012, 0x5, x7, 40, x9)

inst_27:
// rs1==x1, rd==x12, imm_val == 4, rs1_w1_val == 4294967263
// opcode: srli32.u ; op1:x1; dest:x12; op1val:0xffffffdf00000006;  immval:0x4
TEST_IMM_OP( srli32.u, x12, x1, 0x0000000000000000, 0xffffffdf00000006, 0x4, x7, 48, x9)

inst_28:
// rs1==x13, rd==x4, imm_val == 3, rs1_w0_val == 4294963199
// opcode: srli32.u ; op1:x13; dest:x4; op1val:0xfffffffdffffefff;  immval:0x3
TEST_IMM_OP( srli32.u, x4, x13, 0x0000000000000000, 0xfffffffdffffefff, 0x3, x7, 56, x9)

inst_29:
// rs1==x2, rd==x1, imm_val == 2, rs1_w1_val == 4294966271
// opcode: srli32.u ; op1:x2; dest:x1; op1val:0xfffffbffffefffff;  immval:0x2
TEST_IMM_OP( srli32.u, x1, x2, 0x0000000000000000, 0xfffffbffffefffff, 0x2, x7, 64, x9)

inst_30:
// rs1==x5, rd==x24, imm_val == 1, 
// opcode: srli32.u ; op1:x5; dest:x24; op1val:0xf7ffffff0000000d;  immval:0x1
TEST_IMM_OP( srli32.u, x24, x5, 0x0000000000000000, 0xf7ffffff0000000d, 0x1, x7, 72, x9)

inst_31:
// rs1==x23, rd==x19, imm_val == 0, rs1_w0_val == 4294836223
// opcode: srli32.u ; op1:x23; dest:x19; op1val:0x000100fffdffff;  immval:0x0
TEST_IMM_OP( srli32.u, x19, x23, 0x0000000000000000, 0x000100fffdffff, 0x0, x7, 80, x9)

inst_32:
// rs1_w1_val == 2863311530, rs1_w0_val == 1
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xaaaaaaaa00000001;  immval:0x19
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xaaaaaaaa00000001, 0x19, x7, 88, x9)

inst_33:
// rs1_w1_val == 1431655765, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x55555555ffefffff;  immval:0x1b
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x55555555ffefffff, 0x1b, x7, 96, x9)

inst_34:
// rs1_w1_val == 2147483647, rs1_w0_val == 4
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x7fffffff00000004;  immval:0x1b
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x7fffffff00000004, 0x1b, x7, 104, x9)

inst_35:
// rs1_w1_val == 3221225471, rs1_w0_val == 1073741824
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xbfffffff40000000;  immval:0x10
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xbfffffff40000000, 0x10, x7, 112, x9)

inst_36:
// rs1_w1_val == 4026531839, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xefffffff0000000c;  immval:0x1c
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xefffffff0000000c, 0x1c, x7, 120, x9)

inst_37:
// rs1_w1_val == 4261412863, rs1_w0_val == 67108864
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xfdffffff04000000;  immval:0xb
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xfdffffff04000000, 0xb, x7, 128, x9)

inst_38:
// rs1_w1_val == 4278190079, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xfeffffff00000001;  immval:0x17
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xfeffffff00000001, 0x17, x7, 136, x9)

inst_39:
// rs1_w1_val == 4286578687, rs1_w0_val == 4261412863
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xff7ffffffdffffff;  immval:0x18
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xff7ffffffdffffff, 0x18, x7, 144, x9)

inst_40:
// rs1_w1_val == 4290772991, rs1_w0_val == 16
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xffbfffff00000010;  immval:0x7
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xffbfffff00000010, 0x7, x7, 152, x9)

inst_41:
// rs1_w1_val == 4292870143, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xffdfffff00000012;  immval:0xd
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xffdfffff00000012, 0xd, x7, 160, x9)

inst_42:
// rs1_w1_val == 4293918719, rs1_w0_val == 4026531839
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xffefffffefffffff;  immval:0x1b
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xffefffffefffffff, 0x1b, x7, 168, x9)

inst_43:
// rs1_w1_val == 4294443007, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xfff7ffffbfffffff;  immval:0x11
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xfff7ffffbfffffff, 0x11, x7, 176, x9)

inst_44:
// rs1_w1_val == 4294705151, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xfffbffff00040000;  immval:0x11
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xfffbffff00040000, 0x11, x7, 184, x9)

inst_45:
// rs1_w1_val == 4294836223, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xfffdffff00000005;  immval:0xf
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xfffdffff00000005, 0xf, x7, 192, x9)

inst_46:
// rs1_w1_val == 4294901759, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xfffeffffffffefff;  immval:0x18
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xfffeffffffffefff, 0x18, x7, 200, x9)

inst_47:
// rs1_w1_val == 4294950911, rs1_w0_val == 4294967279
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xffffbfffffffffef;  immval:0x17
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xffffbfffffffffef, 0x17, x7, 208, x9)

inst_48:
// rs1_w1_val == 4294959103, rs1_w0_val == 2097152
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xffffdfff00200000;  immval:0x17
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xffffdfff00200000, 0x17, x7, 216, x9)

inst_49:
// rs1_w1_val == 4294963199, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xffffefff04000000;  immval:0x19
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xffffefff04000000, 0x19, x7, 224, x9)

inst_50:
// rs1_w1_val == 4294966783, rs1_w0_val == 8
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xfffffdff00000008;  immval:0x0
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xfffffdff00000008, 0x0, x7, 232, x9)

inst_51:
// rs1_w1_val == 4294967039, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xfffffeffffffffef;  immval:0x11
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xfffffeffffffffef, 0x11, x7, 240, x9)

inst_52:
// rs1_w1_val == 4294967279, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xffffffefdfffffff;  immval:0x1c
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xffffffefdfffffff, 0x1c, x7, 248, x9)

inst_53:
// rs1_w1_val == 4294967287, rs1_w0_val == 4294705151
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xfffffff7fffbffff;  immval:0x11
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xfffffff7fffbffff, 0x11, x7, 256, x9)

inst_54:
// rs1_w1_val == 2147483648, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x8000000080000000;  immval:0x1e
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x8000000080000000, 0x1e, x7, 264, x9)

inst_55:
// rs1_w0_val == 4294967231, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x000012ffffffbf;  immval:0xa
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x000012ffffffbf, 0xa, x7, 272, x9)

inst_56:
// rs1_w0_val == 4294967263, rs1_w1_val == 1048576
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x100000ffffffdf;  immval:0x1a
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x100000ffffffdf, 0x1a, x7, 280, x9)

inst_57:
// rs1_w0_val == 4294967287, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00000cfffffff7;  immval:0xc
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00000cfffffff7, 0xc, x7, 288, x9)

inst_58:
// rs1_w0_val == 4294967291, rs1_w1_val == 262144
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x040000fffffffb;  immval:0x1d
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x040000fffffffb, 0x1d, x7, 296, x9)

inst_59:
// rs1_w0_val == 4294967293, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xfffbfffffffffffd;  immval:0x18
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xfffbfffffffffffd, 0x18, x7, 304, x9)

inst_60:
// rs1_w0_val == 268435456, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xfffeffff10000000;  immval:0x1
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xfffeffff10000000, 0x1, x7, 312, x9)

inst_61:
// rs1_w0_val == 33554432, rs1_w1_val == 0
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00000002000000;  immval:0xb
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00000002000000, 0xb, x7, 320, x9)

inst_62:
// rs1_w0_val == 16777216, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00001201000000;  immval:0xf
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00001201000000, 0xf, x7, 328, x9)

inst_63:
// rs1_w0_val == 8388608, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xffbfffff00800000;  immval:0xb
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xffbfffff00800000, 0xb, x7, 336, x9)

inst_64:
// rs1_w0_val == 1048576, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xffffffdf00100000;  immval:0x16
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xffffffdf00100000, 0x16, x7, 344, x9)

inst_65:
// rs1_w0_val == 524288, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xffffff7f00080000;  immval:0x5
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xffffff7f00080000, 0x5, x7, 352, x9)

inst_66:
// rs1_w0_val == 131072, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xefffffff00020000;  immval:0xe
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xefffffff00020000, 0xe, x7, 360, x9)

inst_67:
// rs1_w0_val == 65536, rs1_w1_val == 16384
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00400000010000;  immval:0x7
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00400000010000, 0x7, x7, 368, x9)

inst_68:
// rs1_w0_val == 32768, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00000700008000;  immval:0x5
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00000700008000, 0x5, x7, 376, x9)

inst_69:
// rs1_w0_val == 8192, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xfeffffff00002000;  immval:0x1
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xfeffffff00002000, 0x1, x7, 384, x9)

inst_70:
// rs1_w0_val == 4096, rs1_w1_val == 8388608
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x80000000001000;  immval:0x9
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x80000000001000, 0x9, x7, 392, x9)

inst_71:
// rs1_w0_val == 2048, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00001300000800;  immval:0x1a
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00001300000800, 0x1a, x7, 400, x9)

inst_72:
// rs1_w0_val == 1024, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00040000000400;  immval:0x8
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00040000000400, 0x8, x7, 408, x9)

inst_73:
// rs1_w0_val == 512, rs1_w1_val == 2
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00000200000200;  immval:0x6
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00000200000200, 0x6, x7, 416, x9)

inst_74:
// rs1_w0_val == 256, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xefffffff00000100;  immval:0x1c
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xefffffff00000100, 0x1c, x7, 424, x9)

inst_75:
// rs1_w0_val == 64, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xffdfffff00000040;  immval:0x6
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xffdfffff00000040, 0x6, x7, 432, x9)

inst_76:
// rs1_w0_val == 32, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00000c00000020;  immval:0x2
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00000c00000020, 0x2, x7, 440, x9)

inst_77:
// rs1_w0_val == 2, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00000200000002;  immval:0x0
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00000200000002, 0x0, x7, 448, x9)

inst_78:
// rs1_w0_val == 4294967295, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x40000000ffffffff;  immval:0x10
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x40000000ffffffff, 0x10, x7, 456, x9)

inst_79:
// rs1_w1_val == 268435456, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x1000000000000400;  immval:0xb
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x1000000000000400, 0xb, x7, 464, x9)

inst_80:
// rs1_w1_val == 134217728, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x800000000010000;  immval:0x1
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x800000000010000, 0x1, x7, 472, x9)

inst_81:
// rs1_w1_val == 67108864, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x400000000000400;  immval:0xe
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x400000000000400, 0xe, x7, 480, x9)

inst_82:
// rs1_w1_val == 2097152, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x20000000000004;  immval:0x8
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x20000000000004, 0x8, x7, 488, x9)

inst_83:
// rs1_w1_val == 524288, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x08000000000002;  immval:0x1a
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x08000000000002, 0x1a, x7, 496, x9)

inst_84:
// rs1_w1_val == 65536, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x01000000004000;  immval:0x2
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x01000000004000, 0x2, x7, 504, x9)

inst_85:
// rs1_w1_val == 32768, rs1_w0_val == 1431655765
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00800055555555;  immval:0x0
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00800055555555, 0x0, x7, 512, x9)

inst_86:
// rs1_w1_val == 8192, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00200000000008;  immval:0x11
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00200000000008, 0x11, x7, 520, x9)

inst_87:
// rs1_w1_val == 4096, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00100000400000;  immval:0x1d
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00100000400000, 0x1d, x7, 528, x9)

inst_88:
// rs1_w1_val == 512, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00020000000008;  immval:0x19
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00020000000008, 0x19, x7, 536, x9)

inst_89:
// rs1_w1_val == 128, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00008000010000;  immval:0x0
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00008000010000, 0x0, x7, 544, x9)

inst_90:
// rs1_w1_val == 64, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00004001000000;  immval:0xb
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00004001000000, 0xb, x7, 552, x9)

inst_91:
// rs1_w1_val == 32, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x0000200000000d;  immval:0xd
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x0000200000000d, 0xd, x7, 560, x9)

inst_92:
// rs1_w1_val == 16, rs1_w0_val == 4278190079
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x000010feffffff;  immval:0x2
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x000010feffffff, 0x2, x7, 568, x9)

inst_93:
// rs1_w1_val == 8, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00000800000200;  immval:0x4
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00000800000200, 0x4, x7, 576, x9)

inst_94:
// rs1_w1_val == 4, rs1_w0_val == 2863311530
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x000004aaaaaaaa;  immval:0x3
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x000004aaaaaaaa, 0x3, x7, 584, x9)

inst_95:
// rs1_w1_val == 1, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00000108000000;  immval:0x11
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00000108000000, 0x11, x7, 592, x9)

inst_96:
// rs1_w1_val == 4294967295, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xffffffff00200000;  immval:0x2
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xffffffff00200000, 0x2, x7, 600, x9)

inst_97:
// rs1_w0_val == 2147483647, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xfeffffff7fffffff;  immval:0x17
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xfeffffff7fffffff, 0x17, x7, 608, x9)

inst_98:
// rs1_w0_val == 4160749567, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xffffff7ff7ffffff;  immval:0xe
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xffffff7ff7ffffff, 0xe, x7, 616, x9)

inst_99:
// rs1_w0_val == 4227858431, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xeffffffffbffffff;  immval:0xd
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xeffffffffbffffff, 0xd, x7, 624, x9)

inst_100:
// rs1_w0_val == 4292870143, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x00000cffdfffff;  immval:0x1
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x00000cffdfffff, 0x1, x7, 632, x9)

inst_101:
// rs1_w0_val == 4294901759, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x10000000fffeffff;  immval:0x18
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x10000000fffeffff, 0x18, x7, 640, x9)

inst_102:
// rs1_w0_val == 4294934527, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x200000ffff7fff;  immval:0x11
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x200000ffff7fff, 0x11, x7, 648, x9)

inst_103:
// rs1_w0_val == 4294950911, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xfffff7ffffffbfff;  immval:0x19
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xfffff7ffffffbfff, 0x19, x7, 656, x9)

inst_104:
// rs1_w0_val == 4294959103, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x000100ffffdfff;  immval:0x8
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x000100ffffdfff, 0x8, x7, 664, x9)

inst_105:
// rs1_w0_val == 4294965247, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xdffffffffffff7ff;  immval:0x7
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xdffffffffffff7ff, 0x7, x7, 672, x9)

inst_106:
// rs1_w0_val == 4294966783, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xfffff7fffffffdff;  immval:0x1b
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xfffff7fffffffdff, 0x1b, x7, 680, x9)

inst_107:
// rs1_w0_val == 4294967039, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0xfefffffffffffeff;  immval:0xa
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0xfefffffffffffeff, 0xa, x7, 688, x9)

inst_108:
// rs1_w0_val == 4294967167, 
// opcode: srli32.u ; op1:x30; dest:x31; op1val:0x040000ffffff7f;  immval:0x4
TEST_IMM_OP( srli32.u, x31, x30, 0x0000000000000000, 0x040000ffffff7f, 0x4, x7, 696, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 88*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
