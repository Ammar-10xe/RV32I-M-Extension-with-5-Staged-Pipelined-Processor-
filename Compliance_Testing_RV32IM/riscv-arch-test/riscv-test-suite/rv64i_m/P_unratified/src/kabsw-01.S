
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kabsw instruction of the RISC-V RV64PZicsr extension for the kabsw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kabsw)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x14,signature_x14_1)

inst_0:
// rs1==x2, rd==x7, rs1_w0_val == -2147483648, rs1_w1_val == -8388609
// opcode: kabsw ; op1:x2; dest:x7; op1val:0xff7fffff80000000;
TEST_PKR_OP( kabsw, x7, x2, 0x0000000000000000, 0xff7fffff80000000, x2, x14, 0, x24)

inst_1:
// rs1==x16, rd==x30, rs1_w1_val == -1431655766, 
// opcode: kabsw ; op1:x16; dest:x30; op1val:0xaaaaaaaa3fffffff;
TEST_PKR_OP( kabsw, x30, x16, 0x0000000000000000, 0xaaaaaaaa3fffffff, x16, x14, 16, x24)

inst_2:
// rs1==x10, rd==x26, rs1_w1_val == 1431655765, rs1_w0_val == -9
// opcode: kabsw ; op1:x10; dest:x26; op1val:0x55555555fffffff7;
TEST_PKR_OP( kabsw, x26, x10, 0x0000000000000000, 0x55555555fffffff7, x10, x14, 32, x24)

inst_3:
// rs1==x6, rd==x1, rs1_w1_val == 2147483647, rs1_w0_val == 33554432
// opcode: kabsw ; op1:x6; dest:x1; op1val:0x7fffffff02000000;
TEST_PKR_OP( kabsw, x1, x6, 0x0000000000000000, 0x7fffffff02000000, x6, x14, 48, x24)

inst_4:
// rs1==x5, rd==x18, rs1_w1_val == -1073741825, 
// opcode: kabsw ; op1:x5; dest:x18; op1val:0xbfffffff02000000;
TEST_PKR_OP( kabsw, x18, x5, 0x0000000000000000, 0xbfffffff02000000, x5, x14, 64, x24)

inst_5:
// rs1==x3, rd==x8, rs1_w1_val == -536870913, rs1_w0_val == 8
// opcode: kabsw ; op1:x3; dest:x8; op1val:0xdfffffff00000008;
TEST_PKR_OP( kabsw, x8, x3, 0x0000000000000000, 0xdfffffff00000008, x3, x14, 80, x24)

inst_6:
// rs1==x26, rd==x21, rs1_w1_val == -268435457, rs1_w0_val == 256
// opcode: kabsw ; op1:x26; dest:x21; op1val:0xefffffff00000100;
TEST_PKR_OP( kabsw, x21, x26, 0x0000000000000000, 0xefffffff00000100, x26, x14, 96, x24)

inst_7:
// rs1==x27, rd==x6, rs1_w1_val == -134217729, 
// opcode: kabsw ; op1:x27; dest:x6; op1val:0xf7ffffff00000100;
TEST_PKR_OP( kabsw, x6, x27, 0x0000000000000000, 0xf7ffffff00000100, x27, x14, 112, x24)

inst_8:
// rs1==x15, rd==x19, rs1_w1_val == -67108865, 
// opcode: kabsw ; op1:x15; dest:x19; op1val:0xfbffffff3fffffff;
TEST_PKR_OP( kabsw, x19, x15, 0x0000000000000000, 0xfbffffff3fffffff, x15, x14, 128, x24)

inst_9:
// rs1==x1, rd==x11, rs1_w1_val == -33554433, rs1_w0_val == 2
// opcode: kabsw ; op1:x1; dest:x11; op1val:0xfdffffff00000002;
TEST_PKR_OP( kabsw, x11, x1, 0x0000000000000000, 0xfdffffff00000002, x1, x14, 144, x24)

inst_10:
// rs1==x7, rd==x0, rs1_w1_val == -16777217, rs1_w0_val == 1048576
// opcode: kabsw ; op1:x7; dest:x0; op1val:0xfeffffff00100000;
TEST_PKR_OP( kabsw, x0, x7, 0x0000000000000000, 0xfeffffff00100000, x7, x14, 160, x24)

inst_11:
// rs1==x17, rd==x28, rs1_w1_val == -4194305, rs1_w0_val == 16777216
// opcode: kabsw ; op1:x17; dest:x28; op1val:0xffbfffff01000000;
TEST_PKR_OP( kabsw, x28, x17, 0x0000000000000000, 0xffbfffff01000000, x17, x14, 176, x24)

inst_12:
// rs1==x13, rd==x3, rs1_w1_val == -2097153, rs1_w0_val == -262145
// opcode: kabsw ; op1:x13; dest:x3; op1val:0xffdffffffffbffff;
TEST_PKR_OP( kabsw, x3, x13, 0x0000000000000000, 0xffdffffffffbffff, x13, x14, 192, x24)

inst_13:
// rs1==x23, rd==x4, rs1_w1_val == -1048577, rs1_w0_val == -1431655766
// opcode: kabsw ; op1:x23; dest:x4; op1val:0xffefffffaaaaaaaa;
TEST_PKR_OP( kabsw, x4, x23, 0x0000000000000000, 0xffefffffaaaaaaaa, x23, x14, 208, x24)

inst_14:
// rs1==x28, rd==x23, rs1_w1_val == -524289, 
// opcode: kabsw ; op1:x28; dest:x23; op1val:0xfff7ffff00000002;
TEST_PKR_OP( kabsw, x23, x28, 0x0000000000000000, 0xfff7ffff00000002, x28, x14, 224, x24)

inst_15:
// rs1==x11, rd==x10, rs1_w1_val == -262145, 
// opcode: kabsw ; op1:x11; dest:x10; op1val:0xfffbffff00000009;
TEST_PKR_OP( kabsw, x10, x11, 0x0000000000000000, 0xfffbffff00000009, x11, x14, 240, x24)

inst_16:
// rs1==x22, rd==x12, rs1_w1_val == -131073, rs1_w0_val == -513
// opcode: kabsw ; op1:x22; dest:x12; op1val:0xfffdfffffffffdff;
TEST_PKR_OP( kabsw, x12, x22, 0x0000000000000000, 0xfffdfffffffffdff, x22, x14, 256, x24)

inst_17:
// rs1==x9, rd==x22, rs1_w1_val == -65537, rs1_w0_val == -65
// opcode: kabsw ; op1:x9; dest:x22; op1val:0xfffeffffffffffbf;
TEST_PKR_OP( kabsw, x22, x9, 0x0000000000000000, 0xfffeffffffffffbf, x9, x14, 272, x24)

inst_18:
// rs1==x20, rd==x13, rs1_w1_val == -32769, rs1_w0_val == 268435456
// opcode: kabsw ; op1:x20; dest:x13; op1val:0xffff7fff10000000;
TEST_PKR_OP( kabsw, x13, x20, 0x0000000000000000, 0xffff7fff10000000, x20, x14, 288, x24)

inst_19:
// rs1==x25, rd==x2, rs1_w1_val == -16385, 
// opcode: kabsw ; op1:x25; dest:x2; op1val:0xffffbfff80000000;
TEST_PKR_OP( kabsw, x2, x25, 0x0000000000000000, 0xffffbfff80000000, x25, x14, 304, x24)

inst_20:
// rs1==x24, rd==x31, rs1_w1_val == -8193, rs1_w0_val == -257
// opcode: kabsw ; op1:x24; dest:x31; op1val:0xffffdffffffffeff;
TEST_PKR_OP( kabsw, x31, x24, 0x0000000000000000, 0xffffdffffffffeff, x24, x14, 320, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_21:
// rs1==x12, rd==x16, rs1_w1_val == -4097, rs1_w0_val == 64
// opcode: kabsw ; op1:x12; dest:x16; op1val:0xffffefff00000040;
TEST_PKR_OP( kabsw, x16, x12, 0x0000000000000000, 0xffffefff00000040, x12, x1, 0, x2)

inst_22:
// rs1==x21, rd==x17, rs1_w1_val == -2049, rs1_w0_val == 0
// opcode: kabsw ; op1:x21; dest:x17; op1val:0xfffff7ff00000000;
TEST_PKR_OP( kabsw, x17, x21, 0x0000000000000000, 0xfffff7ff00000000, x21, x1, 16, x2)

inst_23:
// rs1==x30, rd==x15, rs1_w1_val == -1025, rs1_w0_val == -268435457
// opcode: kabsw ; op1:x30; dest:x15; op1val:0xfffffbffefffffff;
TEST_PKR_OP( kabsw, x15, x30, 0x0000000000000000, 0xfffffbffefffffff, x30, x1, 32, x2)

inst_24:
// rs1==x14, rd==x25, rs1_w1_val == -513, rs1_w0_val == -134217729
// opcode: kabsw ; op1:x14; dest:x25; op1val:0xfffffdfff7ffffff;
TEST_PKR_OP( kabsw, x25, x14, 0x0000000000000000, 0xfffffdfff7ffffff, x14, x1, 48, x2)

inst_25:
// rs1==x19, rd==x20, rs1_w1_val == -257, rs1_w0_val == 1024
// opcode: kabsw ; op1:x19; dest:x20; op1val:0xfffffeff00000400;
TEST_PKR_OP( kabsw, x20, x19, 0x0000000000000000, 0xfffffeff00000400, x19, x1, 64, x2)

inst_26:
// rs1==x29, rd==x14, rs1_w1_val == -129, 
// opcode: kabsw ; op1:x29; dest:x14; op1val:0xffffff7faaaaaaaa;
TEST_PKR_OP( kabsw, x14, x29, 0x0000000000000000, 0xffffff7faaaaaaaa, x29, x1, 80, x2)

inst_27:
// rs1==x4, rd==x29, rs1_w1_val == -65, rs1_w0_val == -1073741825
// opcode: kabsw ; op1:x4; dest:x29; op1val:0xffffffbfbfffffff;
TEST_PKR_OP( kabsw, x29, x4, 0x0000000000000000, 0xffffffbfbfffffff, x4, x1, 96, x2)

inst_28:
// rs1==x18, rd==x9, rs1_w1_val == -33, rs1_w0_val == 131072
// opcode: kabsw ; op1:x18; dest:x9; op1val:0xffffffdf00020000;
TEST_PKR_OP( kabsw, x9, x18, 0x0000000000000000, 0xffffffdf00020000, x18, x1, 112, x2)

inst_29:
// rs1==x31, rd==x5, rs1_w1_val == -17, 
// opcode: kabsw ; op1:x31; dest:x5; op1val:0xffffffeffffffff8;
TEST_PKR_OP( kabsw, x5, x31, 0x0000000000000000, 0xffffffeffffffff8, x31, x1, 128, x2)

inst_30:
// rs1==x8, rd==x24, rs1_w1_val == -9, rs1_w0_val == -3
// opcode: kabsw ; op1:x8; dest:x24; op1val:0xfffffff7fffffffd;
TEST_PKR_OP( kabsw, x24, x8, 0x0000000000000000, 0xfffffff7fffffffd, x8, x1, 144, x2)

inst_31:
// rs1==x0, rd==x27, rs1_w1_val == -5, rs1_w0_val == 32
// opcode: kabsw ; op1:x0; dest:x27; op1val:0xfffffffb00000020;
TEST_PKR_OP( kabsw, x27, x0, 0x0000000000000000, 0xfffffffb00000020, x0, x1, 160, x2)

inst_32:
// rs1_w1_val == -3, rs1_w0_val == 262144
// opcode: kabsw ; op1:x30; dest:x31; op1val:0xfffffffd00040000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0xfffffffd00040000, x30, x1, 176, x2)

inst_33:
// rs1_w1_val == -2, rs1_w0_val == 1073741824
// opcode: kabsw ; op1:x30; dest:x31; op1val:0xfffffffe40000000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0xfffffffe40000000, x30, x1, 192, x2)

inst_34:
// rs1_w1_val == -2147483648, rs1_w0_val == -1025
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x80000000fffffbff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x80000000fffffbff, x30, x1, 208, x2)

inst_35:
// rs1_w1_val == 1073741824, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x40000000aaaaaaaa;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x40000000aaaaaaaa, x30, x1, 224, x2)

inst_36:
// rs1_w1_val == 536870912, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x2000000010000000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x2000000010000000, x30, x1, 240, x2)

inst_37:
// rs1_w1_val == 268435456, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x10000000fffffffc;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x10000000fffffffc, x30, x1, 256, x2)

inst_38:
// rs1_w1_val == 134217728, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x800000000000006;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x800000000000006, x30, x1, 272, x2)

inst_39:
// rs1_w1_val == 67108864, rs1_w0_val == -8388609
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x4000000ff7fffff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x4000000ff7fffff, x30, x1, 288, x2)

inst_40:
// rs1_w1_val == 33554432, rs1_w0_val == 8192
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x200000000002000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x200000000002000, x30, x1, 304, x2)

inst_41:
// rs1_w1_val == 16777216, rs1_w0_val == 67108864
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x100000004000000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x100000004000000, x30, x1, 320, x2)

inst_42:
// rs1_w1_val == 8388608, rs1_w0_val == -16777217
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x800000feffffff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x800000feffffff, x30, x1, 336, x2)

inst_43:
// rs1_w1_val == 4194304, rs1_w0_val == -17
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x400000ffffffef;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x400000ffffffef, x30, x1, 352, x2)

inst_44:
// rs1_w0_val == 16, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0xfffffdff00000010;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0xfffffdff00000010, x30, x1, 368, x2)

inst_45:
// rs1_w0_val == 4, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0xfffff7ff00000004;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0xfffff7ff00000004, x30, x1, 384, x2)

inst_46:
// rs1_w0_val == 1, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0xffbfffff00000001;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0xffbfffff00000001, x30, x1, 400, x2)

inst_47:
// rs1_w0_val == -1, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x2000000ffffffff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x2000000ffffffff, x30, x1, 416, x2)

inst_48:
// rs1_w1_val == 2097152, rs1_w0_val == 134217728
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x20000008000000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x20000008000000, x30, x1, 432, x2)

inst_49:
// rs1_w1_val == 1048576, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x10000000002000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x10000000002000, x30, x1, 448, x2)

inst_50:
// rs1_w1_val == 524288, rs1_w0_val == 4194304
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x08000000400000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x08000000400000, x30, x1, 464, x2)

inst_51:
// rs1_w1_val == 262144, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x040000fffffeff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x040000fffffeff, x30, x1, 480, x2)

inst_52:
// rs1_w1_val == 131072, rs1_w0_val == 8388608
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x02000000800000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x02000000800000, x30, x1, 496, x2)

inst_53:
// rs1_w1_val == 65536, rs1_w0_val == -1048577
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x010000ffefffff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x010000ffefffff, x30, x1, 512, x2)

inst_54:
// rs1_w1_val == 32768, rs1_w0_val == -33
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x008000ffffffdf;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x008000ffffffdf, x30, x1, 528, x2)

inst_55:
// rs1_w1_val == 16384, rs1_w0_val == 512
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x00400000000200;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x00400000000200, x30, x1, 544, x2)

inst_56:
// rs1_w1_val == 8192, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x00200000800000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x00200000800000, x30, x1, 560, x2)

inst_57:
// rs1_w1_val == 4096, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x00100000000040;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x00100000000040, x30, x1, 576, x2)

inst_58:
// rs1_w1_val == 2048, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x000800ffffffef;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x000800ffffffef, x30, x1, 592, x2)

inst_59:
// rs1_w1_val == 1024, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x000400fffffffd;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x000400fffffffd, x30, x1, 608, x2)

inst_60:
// rs1_w1_val == 512, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x000200fffffffa;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x000200fffffffa, x30, x1, 624, x2)

inst_61:
// rs1_w1_val == 256, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x00010000000003;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x00010000000003, x30, x1, 640, x2)

inst_62:
// rs1_w1_val == 128, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x000080fffbffff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x000080fffbffff, x30, x1, 656, x2)

inst_63:
// rs1_w1_val == 64, rs1_w0_val == -536870913
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x000040dfffffff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x000040dfffffff, x30, x1, 672, x2)

inst_64:
// rs1_w1_val == 32, rs1_w0_val == -65537
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x000020fffeffff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x000020fffeffff, x30, x1, 688, x2)

inst_65:
// rs1_w1_val == 16, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x000010aaaaaaaa;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x000010aaaaaaaa, x30, x1, 704, x2)

inst_66:
// rs1_w1_val == 4, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x00000402000000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x00000402000000, x30, x1, 720, x2)

inst_67:
// rs1_w1_val == 2, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x000002ffffffff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x000002ffffffff, x30, x1, 736, x2)

inst_68:
// rs1_w1_val == 1, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x000001c0000000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x000001c0000000, x30, x1, 752, x2)

inst_69:
// rs1_w1_val == 0, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x00000000000000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x00000000000000, x30, x1, 768, x2)

inst_70:
// rs1_w1_val == -1, rs1_w0_val == 65536
// opcode: kabsw ; op1:x30; dest:x31; op1val:0xffffffff00010000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0xffffffff00010000, x30, x1, 784, x2)

inst_71:
// rs1_w0_val == 1431655765, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x7fffffff55555555;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x7fffffff55555555, x30, x1, 800, x2)

inst_72:
// rs1_w0_val == 2147483647, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0xfffffffd7fffffff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0xfffffffd7fffffff, x30, x1, 816, x2)

inst_73:
// rs1_w0_val == -67108865, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x10000000fbffffff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x10000000fbffffff, x30, x1, 832, x2)

inst_74:
// rs1_w0_val == -33554433, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x002000fdffffff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x002000fdffffff, x30, x1, 848, x2)

inst_75:
// rs1_w0_val == -4194305, rs1_w1_val == 8
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x000008ffbfffff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x000008ffbfffff, x30, x1, 864, x2)

inst_76:
// rs1_w0_val == -2097153, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x100000ffdfffff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x100000ffdfffff, x30, x1, 880, x2)

inst_77:
// rs1_w0_val == -524289, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x000006fff7ffff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x000006fff7ffff, x30, x1, 896, x2)

inst_78:
// rs1_w0_val == -131073, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x8000000fffdffff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x8000000fffdffff, x30, x1, 912, x2)

inst_79:
// rs1_w0_val == -32769, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x010000ffff7fff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x010000ffff7fff, x30, x1, 928, x2)

inst_80:
// rs1_w0_val == 4096, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x80000000001000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x80000000001000, x30, x1, 944, x2)

inst_81:
// rs1_w0_val == -5, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x000006fffffffb;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x000006fffffffb, x30, x1, 960, x2)

inst_82:
// rs1_w0_val == -2, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x000100fffffffe;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x000100fffffffe, x30, x1, 976, x2)

inst_83:
// rs1_w0_val == -4097, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x000008ffffefff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x000008ffffefff, x30, x1, 992, x2)

inst_84:
// rs1_w0_val == 536870912, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x00000420000000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x00000420000000, x30, x1, 1008, x2)

inst_85:
// rs1_w0_val == 2097152, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x200000000200000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x200000000200000, x30, x1, 1024, x2)

inst_86:
// rs1_w0_val == 524288, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x00000000080000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x00000000080000, x30, x1, 1040, x2)

inst_87:
// rs1_w0_val == 32768, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x40000000008000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x40000000008000, x30, x1, 1056, x2)

inst_88:
// rs1_w0_val == 16384, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x400000000004000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x400000000004000, x30, x1, 1072, x2)

inst_89:
// rs1_w0_val == -16385, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0xdfffffffffffbfff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0xdfffffffffffbfff, x30, x1, 1088, x2)

inst_90:
// rs1_w0_val == -8193, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x40000000ffffdfff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x40000000ffffdfff, x30, x1, 1104, x2)

inst_91:
// rs1_w0_val == 2048, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0xfffffdff00000800;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0xfffffdff00000800, x30, x1, 1120, x2)

inst_92:
// rs1_w0_val == -2049, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0x000008fffff7ff;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0x000008fffff7ff, x30, x1, 1136, x2)

inst_93:
// rs1_w0_val == 128, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0xfffffffd00000080;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0xfffffffd00000080, x30, x1, 1152, x2)

inst_94:
// rs1_w0_val == -129, 
// opcode: kabsw ; op1:x30; dest:x31; op1val:0xffefffffffffff7f;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0xffefffffffffff7f, x30, x1, 1168, x2)

inst_95:
// rs1_w1_val == -16777217, rs1_w0_val == 1048576
// opcode: kabsw ; op1:x30; dest:x31; op1val:0xfeffffff00100000;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0xfeffffff00100000, x30, x1, 1184, x2)

inst_96:
// rs1_w1_val == -5, rs1_w0_val == 32
// opcode: kabsw ; op1:x30; dest:x31; op1val:0xfffffffb00000020;
TEST_PKR_OP( kabsw, x31, x30, 0x0000000000000000, 0xfffffffb00000020, x30, x1, 1200, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x14_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x14_1:
    .fill 42*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 152*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
