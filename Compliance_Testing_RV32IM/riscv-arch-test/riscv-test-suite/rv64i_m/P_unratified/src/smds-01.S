
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smds instruction of the RISC-V RV64PZicsr extension for the smds covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smds)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x10,signature_x10_1)

inst_0:
// rs1 == rd != rs2, rs1==x5, rs2==x30, rd==x5, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs2_h2_val == -8193, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h1_val == 32767, rs1_h2_val == 2048, rs1_h2_val != rs2_h2_val, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val != rs2_h1_val, rs1_h1_val == 2, rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h3_val == 21845, rs1_h3_val == -32768
// opcode: smds ; op1:x5; op2:x30; dest:x5; op1val:0x8000080000028000;  op2val:0x5555dfff7fff0005
TEST_RR_OP(smds, x5, x5, x30, 0x0000000000000000, 0x8000080000028000, 0x5555dfff7fff0005, x10, 0, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x0, rs2==x4, rd==x26, rs1_h3_val == rs2_h3_val, rs2_h0_val == 4, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h1_val == -513, rs1_h2_val < 0 and rs2_h2_val < 0, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h2_val == -2049, rs1_h0_val == 0
// opcode: smds ; op1:x0; op2:x4; dest:x26; op1val:0xfff6f7ff00060000;  op2val:0xfff6fffafdff0004
TEST_RR_OP(smds, x26, x0, x4, 0x0000000000000000, 0xfff6f7ff00060000, 0xfff6fffafdff0004, x10, 8, x2)

inst_2:
// rs1 == rs2 != rd, rs1==x28, rs2==x28, rd==x20, rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == -21846, rs1_h3_val == 8, rs2_h3_val == -5, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val == 128, rs2_h0_val == -3, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h2_val == 256, rs1_h0_val == -257
// opcode: smds ; op1:x28; op2:x28; dest:x20; op1val:0x08fffa0080feff;  op2val:0xfffb0100aaaafffd
TEST_RR_OP(smds, x20, x28, x28, 0x0000000000000000, 0x08fffa0080feff, 0xfffb0100aaaafffd, x10, 16, x2)

inst_3:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val == 16, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == -5, rs1_h1_val == 0, rs1_h0_val == 4, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 16384
// opcode: smds ; op1:x1; op2:x1; dest:x1; op1val:0x05001000000004;  op2val:0x55550003fffb4000
TEST_RR_OP(smds, x1, x1, x1, 0x0000000000000000, 0x05001000000004, 0x55550003fffb4000, x10, 24, x2)

inst_4:
// rs2 == rd != rs1, rs1==x29, rs2==x16, rd==x16, rs1_h2_val == rs2_h2_val, rs1_h0_val == 256, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h3_val == -65, rs1_h1_val == -16385, rs2_h1_val == 2048, rs2_h0_val == 2048
// opcode: smds ; op1:x29; op2:x16; dest:x16; op1val:0xffbf0003bfff0100;  op2val:0xfff6000308000800
TEST_RR_OP(smds, x16, x29, x16, 0x0000000000000000, 0xffbf0003bfff0100, 0xfff6000308000800, x10, 32, x2)

inst_5:
// rs1==x9, rs2==x26, rd==x18, rs1_h1_val == rs2_h1_val, rs2_h1_val == -1, rs1_h2_val == 32, rs1_h1_val < 0 and rs2_h1_val < 0, rs1_h1_val == -1, rs1_h3_val == -33, rs2_h3_val == 1
// opcode: smds ; op1:x9; op2:x26; dest:x18; op1val:0xffdf0020fffffeff;  op2val:0x01fff9ffff0009
TEST_RR_OP(smds, x18, x9, x26, 0x0000000000000000, 0xffdf0020fffffeff, 0x01fff9ffff0009, x10, 40, x2)

inst_6:
// rs1==x6, rs2==x8, rd==x11, rs1_h0_val == rs2_h0_val, rs2_h0_val == 1, rs2_h1_val == -3, rs2_h3_val == 128, rs2_h2_val == 512, rs1_h0_val == 1, rs1_h1_val == -17
// opcode: smds ; op1:x6; op2:x8; dest:x11; op1val:0x090003ffef0001;  op2val:0x800200fffd0001
TEST_RR_OP(smds, x11, x6, x8, 0x0000000000000000, 0x090003ffef0001, 0x800200fffd0001, x10, 48, x2)

inst_7:
// rs1==x7, rs2==x19, rd==x25, rs1_h0_val > 0 and rs2_h0_val < 0, rs2_h1_val == -65, rs1_h3_val == -4097, rs2_h0_val == -129, rs1_h0_val == 64, rs2_h3_val == 512, rs2_h2_val == 1024, rs1_h1_val == -65, rs1_h2_val == -3
// opcode: smds ; op1:x7; op2:x19; dest:x25; op1val:0xeffffffdffbf0040;  op2val:0x2000400ffbfff7f
TEST_RR_OP(smds, x25, x7, x19, 0x0000000000000000, 0xeffffffdffbf0040, 0x2000400ffbfff7f, x10, 56, x2)

inst_8:
// rs1==x27, rs2==x17, rd==x13, rs2_h3_val == -21846, rs1_h2_val == 2, rs2_h2_val == -9, rs2_h1_val == -8193
// opcode: smds ; op1:x27; op2:x17; dest:x13; op1val:0x060002c0000007;  op2val:0xaaaafff7dfff0005
TEST_RR_OP(smds, x13, x27, x17, 0x0000000000000000, 0x060002c0000007, 0xaaaafff7dfff0005, x10, 64, x2)

inst_9:
// rs1==x22, rs2==x3, rd==x28, rs2_h3_val == 32767, rs2_h0_val == -21846, rs1_h3_val == 2, rs2_h2_val == -2, rs1_h0_val == 16, rs1_h2_val == -129, rs1_h1_val == -257
// opcode: smds ; op1:x22; op2:x3; dest:x28; op1val:0x02ff7ffeff0010;  op2val:0x7ffffffeaaaaaaaa
TEST_RR_OP(smds, x28, x22, x3, 0x0000000000000000, 0x02ff7ffeff0010, 0x7ffffffeaaaaaaaa, x10, 72, x2)

inst_10:
// rs1==x19, rs2==x14, rd==x7, rs2_h3_val == -16385, rs2_h0_val == -17, rs1_h2_val == -32768
// opcode: smds ; op1:x19; op2:x14; dest:x7; op1val:0xffbf800000800006;  op2val:0xbfff0003fffdffef
TEST_RR_OP(smds, x7, x19, x14, 0x0000000000000000, 0xffbf800000800006, 0xbfff0003fffdffef, x10, 80, x2)

inst_11:
// rs1==x26, rs2==x0, rd==x27, rs2_h3_val == -8193, rs1_h2_val == -16385, rs2_h2_val == 8192, rs2_h0_val == 16
// opcode: smds ; op1:x26; op2:x0; dest:x27; op1val:0xffdfbfff3fff3fff;  op2val:0xdfff2000aaaa0010
TEST_RR_OP(smds, x27, x26, x0, 0x0000000000000000, 0xffdfbfff3fff3fff, 0xdfff2000aaaa0010, x10, 88, x2)

inst_12:
// rs1==x24, rs2==x6, rd==x22, rs2_h3_val == -4097, rs1_h3_val == 0, rs1_h2_val == -1025, rs2_h2_val == -257, rs1_h0_val == 2
// opcode: smds ; op1:x24; op2:x6; dest:x22; op1val:0x00fbff00060002;  op2val:0xeffffeff3fff0009
TEST_RR_OP(smds, x22, x24, x6, 0x0000000000000000, 0x00fbff00060002, 0xeffffeff3fff0009, x10, 96, x2)

inst_13:
// rs1==x21, rs2==x24, rd==x15, rs2_h3_val == -2049, rs2_h1_val == 1, rs2_h0_val == -257, rs1_h2_val == 0, rs2_h2_val == 16384, rs1_h3_val == 16384
// opcode: smds ; op1:x21; op2:x24; dest:x15; op1val:0x40000000fff9fff6;  op2val:0xf7ff40000001feff
TEST_RR_OP(smds, x15, x21, x24, 0x0000000000000000, 0x40000000fff9fff6, 0xf7ff40000001feff, x10, 104, x2)

inst_14:
// rs1==x11, rs2==x5, rd==x21, rs2_h3_val == -1025, rs2_h0_val == 2, rs1_h2_val == -8193, rs2_h2_val == 4096, rs2_h1_val == 16384, rs1_h1_val == -8193
// opcode: smds ; op1:x11; op2:x5; dest:x21; op1val:0x07dfffdfff0000;  op2val:0xfbff100040000002
TEST_RR_OP(smds, x21, x11, x5, 0x0000000000000000, 0x07dfffdfff0000, 0xfbff100040000002, x10, 112, x12)

inst_15:
// rs1==x14, rs2==x9, rd==x3, rs2_h3_val == -513, rs2_h1_val == 512, rs1_h1_val == 1
// opcode: smds ; op1:x14; op2:x9; dest:x3; op1val:0xffdf002000010006;  op2val:0xfdff20000200fff9
TEST_RR_OP(smds, x3, x14, x9, 0x0000000000000000, 0xffdf002000010006, 0xfdff20000200fff9, x10, 120, x12)

inst_16:
// rs1==x2, rs2==x22, rd==x30, rs2_h3_val == -257, rs1_h1_val == -5, rs2_h1_val == -257, rs2_h0_val == -9, rs1_h3_val == -9, rs2_h2_val == 64
// opcode: smds ; op1:x2; op2:x22; dest:x30; op1val:0xfff7fffafffb0005;  op2val:0xfeff0040fefffff7
TEST_RR_OP(smds, x30, x2, x22, 0x0000000000000000, 0xfff7fffafffb0005, 0xfeff0040fefffff7, x10, 128, x12)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_17:
// rs1==x16, rs2==x7, rd==x8, rs2_h3_val == -129, rs2_h0_val == 32767, rs2_h2_val == -32768, rs1_h3_val == -257, rs1_h0_val == -2049, rs1_h2_val == -2
// opcode: smds ; op1:x16; op2:x7; dest:x8; op1val:0xfefffffe0000f7ff;  op2val:0xff7f8000feff7fff
TEST_RR_OP(smds, x8, x16, x7, 0x0000000000000000, 0xfefffffe0000f7ff, 0xff7f8000feff7fff, x1, 0, x12)

inst_18:
// rs1==x31, rs2==x29, rd==x10, rs2_h3_val == -65, rs1_h2_val == -17, rs1_h3_val == -16385, rs2_h1_val == 64, rs1_h1_val == -513
// opcode: smds ; op1:x31; op2:x29; dest:x10; op1val:0xbfffffeffdff0005;  op2val:0xffbffffc0040fff7
TEST_RR_OP(smds, x10, x31, x29, 0x0000000000000000, 0xbfffffeffdff0005, 0xffbffffc0040fff7, x1, 8, x12)

inst_19:
// rs1==x20, rs2==x25, rd==x6, rs2_h3_val == -33, rs1_h2_val == 16384, rs1_h1_val == -33, rs2_h1_val == -33
// opcode: smds ; op1:x20; op2:x25; dest:x6; op1val:0x3fff4000ffdf0003;  op2val:0xffdf0007ffdfaaaa
TEST_RR_OP(smds, x6, x20, x25, 0x0000000000000000, 0x3fff4000ffdf0003, 0xffdf0007ffdfaaaa, x1, 16, x12)

inst_20:
// rs1==x15, rs2==x27, rd==x19, rs2_h3_val == -17, rs2_h0_val == 8
// opcode: smds ; op1:x15; op2:x27; dest:x19; op1val:0xc0000007fffffff6;  op2val:0xffef10007fff0008
TEST_RR_OP(smds, x19, x15, x27, 0x0000000000000000, 0xc0000007fffffff6, 0xffef10007fff0008, x1, 24, x12)

inst_21:
// rs1==x8, rs2==x18, rd==x4, rs2_h3_val == -9, rs2_h2_val == -1, rs2_h0_val == 32, rs1_h2_val == 8192, rs1_h3_val == 128, rs1_h1_val == 4096
// opcode: smds ; op1:x8; op2:x18; dest:x4; op1val:0x80200010000007;  op2val:0xfff7ffffaaaa0020
TEST_RR_OP(smds, x4, x8, x18, 0x0000000000000000, 0x80200010000007, 0xfff7ffffaaaa0020, x1, 32, x12)

inst_22:
// rs1==x13, rs2==x23, rd==x24, rs2_h3_val == -3, rs2_h1_val == 21845, rs1_h1_val == -2, rs2_h0_val == 128
// opcode: smds ; op1:x13; op2:x23; dest:x24; op1val:0x06fffefffefff9;  op2val:0xfffdfff855550080
TEST_RR_OP(smds, x24, x13, x23, 0x0000000000000000, 0x06fffefffefff9, 0xfffdfff855550080, x1, 40, x12)

inst_23:
// rs1==x3, rs2==x20, rd==x0, rs2_h3_val == -2, rs2_h1_val == -1025, rs1_h1_val == -21846, rs2_h2_val == -4097, rs1_h0_val == -3
// opcode: smds ; op1:x3; op2:x20; dest:x0; op1val:0x02f7ffaaaafffd;  op2val:0xfffeeffffbfffff7
TEST_RR_OP(smds, x0, x3, x20, 0x0000000000000000, 0x02f7ffaaaafffd, 0xfffeeffffbfffff7, x1, 48, x5)

inst_24:
// rs1==x12, rs2==x2, rd==x17, rs2_h3_val == -32768, rs1_h0_val == 8192, rs1_h1_val == 32767, rs2_h0_val == -2, rs1_h2_val == -257, rs2_h2_val == 1
// opcode: smds ; op1:x12; op2:x2; dest:x17; op1val:0x3ffffeff7fff2000;  op2val:0x800000010005fffe
TEST_RR_OP(smds, x17, x12, x2, 0x0000000000000000, 0x3ffffeff7fff2000, 0x800000010005fffe, x1, 56, x5)

inst_25:
// rs1==x30, rs2==x11, rd==x2, rs2_h3_val == 16384, rs2_h0_val == -1, rs2_h1_val == -4097
// opcode: smds ; op1:x30; op2:x11; dest:x2; op1val:0xfff8fff8dfff0040;  op2val:0x4000fff7efffffff
TEST_RR_OP(smds, x2, x30, x11, 0x0000000000000000, 0xfff8fff8dfff0040, 0x4000fff7efffffff, x1, 64, x5)

inst_26:
// rs1==x4, rs2==x13, rd==x29, rs2_h3_val == 8192, rs1_h2_val == -9
// opcode: smds ; op1:x4; op2:x13; dest:x29; op1val:0x08fff7fffc0006;  op2val:0x2000fff8fff60008
TEST_RR_OP(smds, x29, x4, x13, 0x0000000000000000, 0x08fff7fffc0006, 0x2000fff8fff60008, x1, 72, x5)

inst_27:
// rs1==x25, rs2==x10, rd==x12, rs2_h3_val == 4096, rs1_h3_val == 1024, rs1_h2_val == -21846
// opcode: smds ; op1:x25; op2:x10; dest:x12; op1val:0x400aaaafefffeff;  op2val:0x10002000fffb0004
TEST_RR_OP(smds, x12, x25, x10, 0x0000000000000000, 0x400aaaafefffeff, 0x10002000fffb0004, x1, 80, x5)

inst_28:
// rs1==x10, rs2==x21, rd==x14, rs2_h3_val == 2048, rs1_h0_val == 128, rs1_h3_val == 512, rs2_h0_val == -1025, rs1_h2_val == 21845
// opcode: smds ; op1:x10; op2:x21; dest:x14; op1val:0x200555500050080;  op2val:0x80080000009fbff
TEST_RR_OP(smds, x14, x10, x21, 0x0000000000000000, 0x200555500050080, 0x80080000009fbff, x1, 88, x5)

inst_29:
// rs1==x23, rs2==x31, rd==x9, rs2_h3_val == 1024, rs1_h3_val == 21845, rs1_h2_val == 1024, rs1_h0_val == 16384, rs1_h1_val == 2048
// opcode: smds ; op1:x23; op2:x31; dest:x9; op1val:0x5555040008004000;  op2val:0x400fffadfff0020
TEST_RR_OP(smds, x9, x23, x31, 0x0000000000000000, 0x5555040008004000, 0x400fffadfff0020, x1, 96, x5)

inst_30:
// rs1==x17, rs2==x15, rd==x31, rs2_h3_val == 256, rs2_h2_val == -1025, rs1_h0_val == -2
// opcode: smds ; op1:x17; op2:x15; dest:x31; op1val:0xfffaffef1000fffe;  op2val:0x100fbffc000fff7
TEST_RR_OP(smds, x31, x17, x15, 0x0000000000000000, 0xfffaffef1000fffe, 0x100fbffc000fff7, x1, 104, x5)

inst_31:
// rs1==x18, rs2==x12, rd==x23, rs2_h3_val == 64, rs2_h0_val == 8192, rs2_h2_val == 16, rs1_h2_val == 128
// opcode: smds ; op1:x18; op2:x12; dest:x23; op1val:0x060080fdff4000;  op2val:0x400010feff2000
TEST_RR_OP(smds, x23, x18, x12, 0x0000000000000000, 0x060080fdff4000, 0x400010feff2000, x1, 112, x5)

inst_32:
// rs2_h3_val == 32, rs2_h2_val == -33, rs2_h1_val == 2, rs1_h3_val == 16, rs1_h1_val == -4097
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x10bfffeffffffd;  op2val:0x20ffdf0002fffa
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x10bfffeffffffd, 0x20ffdf0002fffa, x1, 120, x5)

inst_33:
// rs2_h3_val == 16, rs1_h2_val == 4, rs1_h0_val == 512
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfeff000400090200;  op2val:0x100003c0007fff
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xfeff000400090200, 0x100003c0007fff, x1, 128, x5)

inst_34:
// rs2_h3_val == 8, rs1_h2_val == 1, rs1_h0_val == -129
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x0500010001ff7f;  op2val:0x0840003fff0010
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x0500010001ff7f, 0x0840003fff0010, x1, 136, x5)

inst_35:
// rs1_h1_val == -3, rs1_h3_val == 64, rs1_h0_val == -21846, rs2_h0_val == 512
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x40fbfffffdaaaa;  op2val:0x08000900060200
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x40fbfffffdaaaa, 0x08000900060200, x1, 144, x5)

inst_36:
// rs1_h1_val == -32768, rs1_h0_val == 32, rs2_h3_val == -1
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x02000580000020;  op2val:0xfffffff87fff0007
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x02000580000020, 0xfffffff87fff0007, x1, 152, x5)

inst_37:
// rs1_h1_val == 16384, rs1_h3_val == -5, rs2_h0_val == -5, rs2_h2_val == 128
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfeff4000fff9;  op2val:0x100080fdfffffb
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xfffbfeff4000fff9, 0x100080fdfffffb, x1, 160, x5)

inst_38:
// rs1_h1_val == 8192, rs1_h3_val == 4, rs2_h2_val == -5
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x04fffa20000002;  op2val:0x40fffbfdfffffa
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x04fffa20000002, 0x40fffbfdfffffa, x1, 168, x5)

inst_39:
// rs1_h1_val == 1024, rs1_h3_val == -21846, rs2_h1_val == -17
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xaaaafffd0400fffd;  op2val:0x3fff1000ffef0006
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xaaaafffd0400fffd, 0x3fff1000ffef0006, x1, 176, x5)

inst_40:
// rs1_h1_val == 512, rs1_h3_val == -2049
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffff90200ff7f;  op2val:0x100fffe0005feff
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xf7fffff90200ff7f, 0x100fffe0005feff, x1, 184, x5)

inst_41:
// rs1_h1_val == 256, rs2_h2_val == 32767
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfffc00030100fffe;  op2val:0xffff7ffffdfffffe
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xfffc00030100fffe, 0xffff7ffffdfffffe, x1, 192, x5)

inst_42:
// rs1_h1_val == 64, rs2_h0_val == -33, rs1_h0_val == 8, rs2_h2_val == 8
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x8000000400400008;  op2val:0x20000080006ffdf
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x8000000400400008, 0x20000080006ffdf, x1, 200, x5)

inst_43:
// rs1_h1_val == 32, rs1_h0_val == -9, rs2_h2_val == 4
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x0040000020fff7;  op2val:0xfff900040001fffc
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x0040000020fff7, 0xfff900040001fffc, x1, 208, x5)

inst_44:
// rs1_h1_val == 16, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500100020;  op2val:0x200100ffbffff9
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x5555555500100020, 0x200100ffbffff9, x1, 216, x5)

inst_45:
// rs1_h1_val == 8, rs2_h1_val == -2, rs2_h2_val == 0
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fffa0008fffd;  op2val:0xfffe0000fffefbff
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xfff6fffa0008fffd, 0xfffe0000fffefbff, x1, 224, x5)

inst_46:
// rs1_h1_val == 4, rs1_h3_val == 4096, rs2_h0_val == 21845
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffc00043fff;  op2val:0xfff70003fffa5555
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x1000fffc00043fff, 0xfff70003fffa5555, x1, 232, x5)

inst_47:
// rs1_h0_val == 21845, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x03040010005555;  op2val:0xfffc8000fffc0010
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x03040010005555, 0xfffc8000fffc0010, x1, 240, x5)

inst_48:
// rs1_h0_val == 32767, rs2_h1_val == -129
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x08ffefc0007fff;  op2val:0x800003ff7fffef
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x08ffefc0007fff, 0x800003ff7fffef, x1, 248, x5)

inst_49:
// rs1_h0_val == -16385, rs1_h3_val == -1025, rs2_h2_val == -17, rs2_h3_val == 0
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0005aaaabfff;  op2val:0x00ffeffbfffffb
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xfbff0005aaaabfff, 0x00ffeffbfffffb, x1, 256, x5)

inst_50:
// rs1_h0_val == -8193, rs1_h1_val == -2049
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x3fffc000f7ffdfff;  op2val:0x3fff0100fffbfeff
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x3fffc000f7ffdfff, 0x3fff0100fffbfeff, x1, 264, x5)

inst_51:
// rs1_h0_val == -4097, rs2_h1_val == 4
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x8000c000ffefefff;  op2val:0xfffcfff900045555
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x8000c000ffefefff, 0xfffcfff900045555, x1, 272, x5)

inst_52:
// rs1_h0_val == -1025, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xffbfaaaa3ffffbff;  op2val:0x40400000030004
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xffbfaaaa3ffffbff, 0x40400000030004, x1, 280, x5)

inst_53:
// rs1_h0_val == -513, rs1_h2_val == 8
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfff70008fff8fdff;  op2val:0x40000050002aaaa
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xfff70008fff8fdff, 0x40000050002aaaa, x1, 288, x5)

inst_54:
// rs1_h0_val == -65, rs2_h0_val == -65, rs1_h2_val == -33, rs2_h1_val == 128, rs1_h1_val == -9
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffdffff7ffbf;  op2val:0x07fff80080ffbf
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xfff7ffdffff7ffbf, 0x07fff80080ffbf, x1, 296, x5)

inst_55:
// rs1_h0_val == -33, rs1_h3_val == 1, rs1_h2_val == -5, rs2_h1_val == -16385, rs2_h0_val == -32768
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x01fffbfeffffdf;  op2val:0x80ffefbfff8000
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x01fffbfeffffdf, 0x80ffefbfff8000, x1, 304, x5)

inst_56:
// rs1_h0_val == -17, rs1_h3_val == -2
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfffe00000009ffef;  op2val:0x10004000072000
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xfffe00000009ffef, 0x10004000072000, x1, 312, x5)

inst_57:
// rs2_h1_val == 0, rs1_h1_val == 21845, rs2_h2_val == -513, rs1_h2_val == 256
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x0601005555f7ff;  op2val:0xdffffdff0000ff7f
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x0601005555f7ff, 0xdffffdff0000ff7f, x1, 320, x5)

inst_58:
// rs2_h0_val == -16385, rs1_h0_val == -1
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x00fff94000ffff;  op2val:0x10fffe0004bfff
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x00fff94000ffff, 0x10fffe0004bfff, x1, 328, x5)

inst_59:
// rs2_h0_val == -8193, rs1_h3_val == -8193, rs2_h2_val == -129
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xdfffbfff0007fbff;  op2val:0x20ff7f0003dfff
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xdfffbfff0007fbff, 0x20ff7f0003dfff, x1, 336, x5)

inst_60:
// rs2_h0_val == -4097, rs1_h0_val == 1024, rs1_h2_val == 512
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xc0000200fff80400;  op2val:0x1000040fff8efff
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xc0000200fff80400, 0x1000040fff8efff, x1, 344, x5)

inst_61:
// rs2_h0_val == -2049, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x00fffa0400bfff;  op2val:0x407fff0200f7ff
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x00fffa0400bfff, 0x407fff0200f7ff, x1, 352, x5)

inst_62:
// rs2_h0_val == -513, rs1_h2_val == -1, rs1_h3_val == -1
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffaaaa3fff;  op2val:0x00ff7fffbffdff
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xffffffffaaaa3fff, 0x00ff7fffbffdff, x1, 360, x5)

inst_63:
// rs2_h0_val == 4096, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xbffffffa00200009;  op2val:0x4000ff7f40001000
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xbffffffa00200009, 0x4000ff7f40001000, x1, 368, x5)

inst_64:
// rs2_h0_val == 1024, rs2_h2_val == -3, rs1_h3_val == 2048
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x800000400800100;  op2val:0xaaaafffdfdff0400
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x800000400800100, 0xaaaafffdfdff0400, x1, 376, x5)

inst_65:
// rs2_h0_val == 256, rs1_h3_val == -3, rs2_h1_val == 32
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfffdf7fffff90100;  op2val:0x2000000500200100
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xfffdf7fffff90100, 0x2000000500200100, x1, 384, x5)

inst_66:
// rs2_h0_val == 64, rs1_h2_val == 64, rs1_h1_val == -1025
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x030040fbfffff8;  op2val:0xfffc000300030040
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x030040fbfffff8, 0xfffc000300030040, x1, 392, x5)

inst_67:
// rs1_h0_val == -5, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xffbf0000ffbffffb;  op2val:0xfff600400001fff8
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xffbf0000ffbffffb, 0xfff600400001fff8, x1, 400, x5)

inst_68:
// rs2_h0_val == 0, rs1_h2_val == -513
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x00fdff0010c000;  op2val:0xdffffff93fff0000
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x00fdff0010c000, 0xdffffff93fff0000, x1, 408, x5)

inst_69:
// rs1_h0_val == 4096, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x06fdff10001000;  op2val:0xefffffff00200009
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x06fdff10001000, 0xefffffff00200009, x1, 416, x5)

inst_70:
// rs1_h0_val == 2048, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0003fbff0800;  op2val:0xdfffffffffdffeff
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xfffa0003fbff0800, 0xdfffffffffdffeff, x1, 424, x5)

inst_71:
// rs2_h2_val == -16385, rs1_h2_val == -4097
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x10efff1000c000;  op2val:0xdfffbfff7fffffef
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x10efff1000c000, 0xdfffbfff7fffffef, x1, 432, x5)

inst_72:
// rs1_h3_val == 256, rs2_h3_val == 4
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x100c000feffefff;  op2val:0x04fbffaaaa0001
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x100c000feffefff, 0x04fbffaaaa0001, x1, 440, x5)

inst_73:
// rs2_h2_val == -2049, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfbff0020efff0002;  op2val:0x03f7ff0004ffef
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xfbff0020efff0002, 0x03f7ff0004ffef, x1, 448, x5)

inst_74:
// rs1_h3_val == 32, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x20fffefff60001;  op2val:0xfff700070002fdff
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x20fffefff60001, 0xfff700070002fdff, x1, 456, x5)

inst_75:
// rs2_h2_val == -65, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0009feff0008;  op2val:0xdfffffbf00073fff
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xffdf0009feff0008, 0xdfffffbf00073fff, x1, 464, x5)

inst_76:
// rs1_h2_val == 32767, rs2_h1_val == 1024
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x8007fff00400100;  op2val:0x800000904000001
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x8007fff00400100, 0x800000904000001, x1, 472, x5)

inst_77:
// rs2_h2_val == 2048, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfbffc000ffffbfff;  op2val:0xfffb080004000040
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xfbffc000ffffbfff, 0xfffb080004000040, x1, 480, x5)

inst_78:
// rs1_h2_val == -65, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x05ffbfaaaa0400;  op2val:0xffef0007feff0005
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x05ffbfaaaa0400, 0xffef0007feff0005, x1, 488, x5)

inst_79:
// rs1_h3_val == 8192, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x2000000880000400;  op2val:0x0402000200fffe
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x2000000880000400, 0x0402000200fffe, x1, 496, x5)

inst_80:
// rs2_h2_val == 32, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfff9001004000400;  op2val:0x060020fffefffe
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xfff9001004000400, 0x060020fffefffe, x1, 504, x5)

inst_81:
// rs2_h2_val == 2, rs1_h3_val == -129
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xff7f000802005555;  op2val:0x10000200090005
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xff7f000802005555, 0x10000200090005, x1, 512, x5)

inst_82:
// rs1_h2_val == 4096, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x1000100001008000;  op2val:0xfbff00095555dfff
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x1000100001008000, 0xfbff00095555dfff, x1, 520, x5)

inst_83:
// rs2_h1_val == 16, rs2_h3_val == 2
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x40000600100001;  op2val:0x02bfff0010c000
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x40000600100001, 0x02bfff0010c000, x1, 528, x5)

inst_84:
// rs2_h1_val == -2049, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x20feffc000f7ff;  op2val:0xffbf0001f7fff7ff
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x20feffc000f7ff, 0xffbf0001f7fff7ff, x1, 536, x5)

inst_85:
// rs1_h3_val == 32767, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0003fbff0009;  op2val:0x80000020800ffbf
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x7fff0003fbff0009, 0x80000020800ffbf, x1, 544, x5)

inst_86:
// rs2_h1_val == -9, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x3fff00070400fbff;  op2val:0x000004fff70400
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x3fff00070400fbff, 0x000004fff70400, x1, 552, x5)

inst_87:
// rs1_h3_val == -513, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfdffff7f55550010;  op2val:0x100fffa0003fffa
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xfdffff7f55550010, 0x100fffa0003fffa, x1, 560, x5)

inst_88:
// rs2_h1_val == -32768, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfff80007fff61000;  op2val:0x07fff78000fff9
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xfff80007fff61000, 0x07fff78000fff9, x1, 568, x5)

inst_89:
// rs2_h1_val == 8192, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x01fffcffdf0040;  op2val:0xfffafffd20000005
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x01fffcffdf0040, 0xfffafffd20000005, x1, 576, x5)

inst_90:
// rs1_h3_val == -17, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xffefaaaa20000000;  op2val:0x40000003fffd0100
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xffefaaaa20000000, 0x40000003fffd0100, x1, 584, x5)

inst_91:
// rs2_h1_val == 4096, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xfff8feffffdf0003;  op2val:0x06fff61000fff9
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xfff8feffffdf0003, 0x06fff61000fff9, x1, 592, x5)

inst_92:
// rs2_h1_val == 256, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xff7f001000800004;  op2val:0x100ffef0100ffdf
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xff7f001000800004, 0x100ffef0100ffdf, x1, 600, x5)

inst_93:
// rs1_h1_val == -129, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffefff7ffeff;  op2val:0x02000900400007
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0xff7fffefff7ffeff, 0x02000900400007, x1, 608, x5)

inst_94:
// rs2_h2_val == -21846, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x20008007ffffff9;  op2val:0x02aaaaefffdfff
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x20008007ffffff9, 0x02aaaaefffdfff, x1, 616, x5)

inst_95:
// rs2_h2_val == 21845, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x20000100060003;  op2val:0xefff5555ffff0008
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x20000100060003, 0xefff5555ffff0008, x1, 624, x5)

inst_96:
// rs2_h1_val == 8, 
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x80003fff0002fbff;  op2val:0x3fff3fff00088000
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x80003fff0002fbff, 0x3fff3fff00088000, x1, 632, x5)

inst_97:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs2_h1_val == -21846, rs1_h3_val == 8, rs2_h3_val == -5, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val == 128, rs2_h0_val == -3, rs1_h0_val < 0 and rs2_h0_val < 0, rs2_h2_val == 256, rs1_h0_val == -257
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x08fffa0080feff;  op2val:0xfffb0100aaaafffd
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x08fffa0080feff, 0xfffb0100aaaafffd, x1, 640, x5)

inst_98:
// rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val == 16, rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h1_val == -5, rs1_h1_val == 0, rs1_h0_val == 4, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 16384
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x05001000000004;  op2val:0x55550003fffb4000
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x05001000000004, 0x55550003fffb4000, x1, 648, x5)

inst_99:
// rs2_h3_val == -2, rs2_h1_val == -1025, rs1_h1_val == -21846, rs2_h2_val == -4097, rs1_h0_val == -3
// opcode: smds ; op1:x30; op2:x29; dest:x31; op1val:0x02f7ffaaaafffd;  op2val:0xfffeeffffbfffff7
TEST_RR_OP(smds, x31, x30, x29, 0x0000000000000000, 0x02f7ffaaaafffd, 0xfffeeffffbfffff7, x1, 656, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x10_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x10_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 83*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
