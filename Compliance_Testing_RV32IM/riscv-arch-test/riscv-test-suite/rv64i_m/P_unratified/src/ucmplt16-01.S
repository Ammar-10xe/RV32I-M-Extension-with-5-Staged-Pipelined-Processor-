
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ucmplt16 instruction of the RISC-V RV64PZicsr extension for the ucmplt16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ucmplt16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rd != rs2, rs1==x19, rs2==x8, rd==x19, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs2_h0_val == 65503, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h3_val == 65534, rs2_h2_val == 43690, rs1_h2_val == 16384, rs2_h3_val == 65279
// opcode: ucmplt16 ; op1:x19; op2:x8; dest:x19; op1val:0xfffe400000120000;  op2val:0xfeffaaaa0012ffdf
TEST_RR_OP(ucmplt16, x19, x19, x8, 0x0000000000000000, 0xfffe400000120000, 0xfeffaaaa0012ffdf, x3, 0, x10)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x6, rd==x11, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h0_val == 128, rs2_h2_val == 32767, rs1_h3_val == 2048, rs2_h3_val == 2048
// opcode: ucmplt16 ; op1:x28; op2:x6; dest:x11; op1val:0x800000500090011;  op2val:0x8007fff000b0080
TEST_RR_OP(ucmplt16, x11, x28, x6, 0x0000000000000000, 0x800000500090011, 0x8007fff000b0080, x3, 8, x10)

inst_2:
// rs1 == rs2 != rd, rs1==x7, rs2==x7, rd==x21, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h2_val == 8192, rs1_h2_val == 8192, rs1_h0_val == 1024, rs1_h3_val == 61439
// opcode: ucmplt16 ; op1:x7; op2:x7; dest:x21; op1val:0xefff200000120400;  op2val:0x0c200000120006
TEST_RR_OP(ucmplt16, x21, x7, x7, 0x0000000000000000, 0xefff200000120400, 0x0c200000120006, x3, 16, x10)

inst_3:
// rs1 == rs2 == rd, rs1==x25, rs2==x25, rd==x25, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 16, rs2_h2_val == 8, rs1_h2_val == 65527, rs2_h3_val == 64511, rs2_h0_val == 16, rs1_h3_val == 32
// opcode: ucmplt16 ; op1:x25; op2:x25; dest:x25; op1val:0x20fff700130010;  op2val:0xfbff0008000b0010
TEST_RR_OP(ucmplt16, x25, x25, x25, 0x0000000000000000, 0x20fff700130010, 0xfbff0008000b0010, x3, 24, x10)

inst_4:
// rs2 == rd != rs1, rs1==x5, rs2==x23, rd==x23, rs2_h3_val == 43690, rs1_h2_val == 61439, rs1_h1_val == 65471, rs1_h0_val == 64511, rs2_h0_val == 65279
// opcode: ucmplt16 ; op1:x5; op2:x23; dest:x23; op1val:0x11efffffbffbff;  op2val:0xaaaa0011000ffeff
TEST_RR_OP(ucmplt16, x23, x5, x23, 0x0000000000000000, 0x11efffffbffbff, 0xaaaa0011000ffeff, x3, 32, x10)

inst_5:
// rs1==x4, rs2==x12, rd==x5, rs2_h3_val == 21845, rs2_h1_val == 8192, rs2_h2_val == 32, rs1_h3_val == 4096, rs2_h0_val == 32, rs1_h2_val == 256
// opcode: ucmplt16 ; op1:x4; op2:x12; dest:x5; op1val:0x100001000007000d;  op2val:0x5555002020000020
TEST_RR_OP(ucmplt16, x5, x4, x12, 0x0000000000000000, 0x100001000007000d, 0x5555002020000020, x3, 40, x10)

inst_6:
// rs1==x13, rs2==x20, rd==x28, rs2_h3_val == 32767, rs1_h0_val == 65471, rs2_h1_val == 1, rs2_h0_val == 61439, rs2_h2_val == 128
// opcode: ucmplt16 ; op1:x13; op2:x20; dest:x28; op1val:0x0300030003ffbf;  op2val:0x7fff00800001efff
TEST_RR_OP(ucmplt16, x28, x13, x20, 0x0000000000000000, 0x0300030003ffbf, 0x7fff00800001efff, x3, 48, x10)

inst_7:
// rs1==x20, rs2==x9, rd==x26, rs2_h3_val == 49151, rs2_h1_val == 65531, rs1_h0_val == 4, rs1_h3_val == 32768, rs1_h1_val == 65533, rs2_h0_val == 1, rs1_h2_val == 32767
// opcode: ucmplt16 ; op1:x20; op2:x9; dest:x26; op1val:0x80007ffffffd0004;  op2val:0xbfff0006fffb0001
TEST_RR_OP(ucmplt16, x26, x20, x9, 0x0000000000000000, 0x80007ffffffd0004, 0xbfff0006fffb0001, x3, 56, x10)

inst_8:
// rs1==x0, rs2==x17, rd==x14, rs2_h3_val == 57343, rs2_h1_val == 64511, rs1_h3_val == 32767, rs2_h0_val == 4, rs1_h0_val == 128
// opcode: ucmplt16 ; op1:x0; op2:x17; dest:x14; op1val:0x7fff000a00130080;  op2val:0xdfff2000fbff0004
TEST_RR_OP(ucmplt16, x14, x0, x17, 0x0000000000000000, 0x7fff000a00130080, 0xdfff2000fbff0004, x3, 64, x10)

inst_9:
// rs1==x27, rs2==x11, rd==x20, rs2_h3_val == 61439, rs2_h1_val == 64, rs1_h1_val == 65503, rs2_h0_val == 32767
// opcode: ucmplt16 ; op1:x27; op2:x11; dest:x20; op1val:0x11000effdf0003;  op2val:0xefff000c00407fff
TEST_RR_OP(ucmplt16, x20, x27, x11, 0x0000000000000000, 0x11000effdf0003, 0xefff000c00407fff, x3, 72, x10)

inst_10:
// rs1==x29, rs2==x1, rd==x12, rs2_h3_val == 63487, rs1_h2_val == 32, rs1_h1_val == 21845, rs2_h1_val == 16384, rs2_h2_val == 2
// opcode: ucmplt16 ; op1:x29; op2:x1; dest:x12; op1val:0x0e002055550009;  op2val:0xf7ff000240000005
TEST_RR_OP(ucmplt16, x12, x29, x1, 0x0000000000000000, 0x0e002055550009, 0xf7ff000240000005, x3, 80, x10)

inst_11:
// rs1==x31, rs2==x2, rd==x6, rs2_h3_val == 65023, rs2_h1_val == 32, rs1_h3_val == 512, rs1_h0_val == 65533, rs1_h2_val == 16, rs2_h2_val == 65527
// opcode: ucmplt16 ; op1:x31; op2:x2; dest:x6; op1val:0x20000100009fffd;  op2val:0xfdfffff70020000f
TEST_RR_OP(ucmplt16, x6, x31, x2, 0x0000000000000000, 0x20000100009fffd, 0xfdfffff70020000f, x3, 88, x10)

inst_12:
// rs1==x22, rs2==x30, rd==x4, rs2_h3_val == 65407, rs2_h0_val == 65533, rs1_h0_val == 32767, rs1_h3_val == 16384, rs2_h1_val == 65471, rs1_h1_val == 64
// opcode: ucmplt16 ; op1:x22; op2:x30; dest:x4; op1val:0x40007fff00407fff;  op2val:0xff7f000effbffffd
TEST_RR_OP(ucmplt16, x4, x22, x30, 0x0000000000000000, 0x40007fff00407fff, 0xff7f000effbffffd, x3, 96, x10)

inst_13:
// rs1==x23, rs2==x28, rd==x2, rs2_h3_val == 65471, rs2_h1_val == 32767, rs1_h1_val == 8192, rs2_h0_val == 43690, rs1_h0_val == 4096, rs1_h3_val == 0
// opcode: ucmplt16 ; op1:x23; op2:x28; dest:x2; op1val:0x00001220001000;  op2val:0xffbf00137fffaaaa
TEST_RR_OP(ucmplt16, x2, x23, x28, 0x0000000000000000, 0x00001220001000, 0xffbf00137fffaaaa, x3, 104, x10)

inst_14:
// rs1==x1, rs2==x18, rd==x30, rs2_h3_val == 65503, rs2_h0_val == 57343, rs1_h3_val == 21845, rs2_h1_val == 61439
// opcode: ucmplt16 ; op1:x1; op2:x18; dest:x30; op1val:0x55552000000c0009;  op2val:0xffdf0012efffdfff
TEST_RR_OP(ucmplt16, x30, x1, x18, 0x0000000000000000, 0x55552000000c0009, 0xffdf0012efffdfff, x3, 112, x10)

inst_15:
// rs1==x26, rs2==x5, rd==x13, rs2_h3_val == 65519, rs1_h1_val == 32767, rs2_h2_val == 65533, rs1_h0_val == 256
// opcode: ucmplt16 ; op1:x26; op2:x5; dest:x13; op1val:0x0600097fff0100;  op2val:0xffeffffd0013000a
TEST_RR_OP(ucmplt16, x13, x26, x5, 0x0000000000000000, 0x0600097fff0100, 0xffeffffd0013000a, x3, 120, x20)

inst_16:
// rs1==x21, rs2==x19, rd==x17, rs2_h3_val == 65527, rs2_h2_val == 16, rs1_h2_val == 2048, rs1_h3_val == 63487
// opcode: ucmplt16 ; op1:x21; op2:x19; dest:x17; op1val:0xf7ff0800fffd000d;  op2val:0xfff7001000200004
TEST_RR_OP(ucmplt16, x17, x21, x19, 0x0000000000000000, 0xf7ff0800fffd000d, 0xfff7001000200004, x3, 128, x20)

inst_17:
// rs1==x17, rs2==x14, rd==x10, rs2_h3_val == 65531, rs1_h3_val == 2, rs1_h0_val == 63487, rs2_h2_val == 64511, rs2_h0_val == 65023
// opcode: ucmplt16 ; op1:x17; op2:x14; dest:x10; op1val:0x0200200009f7ff;  op2val:0xfffbfbff4000fdff
TEST_RR_OP(ucmplt16, x10, x17, x14, 0x0000000000000000, 0x0200200009f7ff, 0xfffbfbff4000fdff, x3, 136, x20)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_18:
// rs1==x15, rs2==x24, rd==x22, rs2_h3_val == 65533, rs2_h0_val == 0, rs2_h1_val == 65533, rs1_h0_val == 43690
// opcode: ucmplt16 ; op1:x15; op2:x24; dest:x22; op1val:0x110005000daaaa;  op2val:0xfffdaaaafffd0000
TEST_RR_OP(ucmplt16, x22, x15, x24, 0x0000000000000000, 0x110005000daaaa, 0xfffdaaaafffd0000, x5, 0, x20)

inst_19:
// rs1==x8, rs2==x15, rd==x18, rs2_h3_val == 65534, rs2_h0_val == 65519, rs1_h0_val == 1, rs1_h1_val == 61439, rs1_h2_val == 65503, rs2_h1_val == 57343
// opcode: ucmplt16 ; op1:x8; op2:x15; dest:x18; op1val:0x00ffdfefff0001;  op2val:0xfffe0006dfffffef
TEST_RR_OP(ucmplt16, x18, x8, x15, 0x0000000000000000, 0x00ffdfefff0001, 0xfffe0006dfffffef, x5, 8, x20)

inst_20:
// rs1==x11, rs2==x31, rd==x9, rs2_h3_val == 32768, rs1_h3_val == 128, rs2_h0_val == 65527, rs2_h2_val == 512, rs1_h1_val == 65519
// opcode: ucmplt16 ; op1:x11; op2:x31; dest:x9; op1val:0x804000ffef000a;  op2val:0x800002000012fff7
TEST_RR_OP(ucmplt16, x9, x11, x31, 0x0000000000000000, 0x804000ffef000a, 0x800002000012fff7, x5, 16, x20)

inst_21:
// rs1==x2, rs2==x27, rd==x24, rs2_h3_val == 16384, rs1_h1_val == 2, rs1_h0_val == 8, rs2_h1_val == 1024, rs1_h2_val == 65471, rs2_h2_val == 65279
// opcode: ucmplt16 ; op1:x2; op2:x27; dest:x24; op1val:0x13ffbf00020008;  op2val:0x4000feff0400fffd
TEST_RR_OP(ucmplt16, x24, x2, x27, 0x0000000000000000, 0x13ffbf00020008, 0x4000feff0400fffd, x5, 24, x20)

inst_22:
// rs1==x24, rs2==x22, rd==x16, rs2_h3_val == 8192, rs2_h1_val == 65534, rs1_h2_val == 65519, rs2_h2_val == 65535, rs2_h0_val == 2, rs1_h1_val == 1024
// opcode: ucmplt16 ; op1:x24; op2:x22; dest:x16; op1val:0x0dffef04000400;  op2val:0x2000fffffffe0002
TEST_RR_OP(ucmplt16, x16, x24, x22, 0x0000000000000000, 0x0dffef04000400, 0x2000fffffffe0002, x5, 32, x20)

inst_23:
// rs1==x10, rs2==x21, rd==x1, rs2_h3_val == 4096, rs1_h3_val == 65535, rs2_h0_val == 21845, rs1_h2_val == 65535
// opcode: ucmplt16 ; op1:x10; op2:x21; dest:x1; op1val:0xffffffff0012000e;  op2val:0x1000000620005555
TEST_RR_OP(ucmplt16, x1, x10, x21, 0x0000000000000000, 0xffffffff0012000e, 0x1000000620005555, x5, 40, x20)

inst_24:
// rs1==x16, rs2==x4, rd==x3, rs2_h3_val == 1024, rs2_h2_val == 64, rs2_h1_val == 2, rs1_h3_val == 65527, rs2_h0_val == 65407
// opcode: ucmplt16 ; op1:x16; op2:x4; dest:x3; op1val:0xfff77fffffef000b;  op2val:0x40000400002ff7f
TEST_RR_OP(ucmplt16, x3, x16, x4, 0x0000000000000000, 0xfff77fffffef000b, 0x40000400002ff7f, x5, 48, x20)

inst_25:
// rs1==x18, rs2==x10, rd==x15, rs2_h3_val == 512, rs1_h1_val == 63487, rs1_h0_val == 61439, rs2_h0_val == 2048, rs2_h2_val == 21845, rs2_h1_val == 63487, rs1_h3_val == 43690
// opcode: ucmplt16 ; op1:x18; op2:x10; dest:x15; op1val:0xaaaa000cf7ffefff;  op2val:0x2005555f7ff0800
TEST_RR_OP(ucmplt16, x15, x18, x10, 0x0000000000000000, 0xaaaa000cf7ffefff, 0x2005555f7ff0800, x5, 56, x20)

inst_26:
// rs1==x6, rs2==x26, rd==x31, rs2_h3_val == 256, rs1_h1_val == 0, rs1_h0_val == 57343, rs2_h0_val == 64, rs1_h3_val == 4, rs1_h2_val == 43690
// opcode: ucmplt16 ; op1:x6; op2:x26; dest:x31; op1val:0x04aaaa0000dfff;  op2val:0x100000300130040
TEST_RR_OP(ucmplt16, x31, x6, x26, 0x0000000000000000, 0x04aaaa0000dfff, 0x100000300130040, x5, 64, x20)

inst_27:
// rs1==x30, rs2==x0, rd==x29, rs2_h3_val == 128, rs1_h1_val == 57343, rs2_h1_val == 65503, rs1_h2_val == 65407
// opcode: ucmplt16 ; op1:x30; op2:x0; dest:x29; op1val:0x8000ff7fdfff000b;  op2val:0x80ffffffdf000f
TEST_RR_OP(ucmplt16, x29, x30, x0, 0x0000000000000000, 0x8000ff7fdfff000b, 0x80ffffffdf000f, x5, 72, x20)

inst_28:
// rs1==x3, rs2==x13, rd==x27, rs2_h3_val == 64, rs2_h0_val == 8, rs2_h2_val == 256
// opcode: ucmplt16 ; op1:x3; op2:x13; dest:x27; op1val:0x0c001304000012;  op2val:0x40010040000008
TEST_RR_OP(ucmplt16, x27, x3, x13, 0x0000000000000000, 0x0c001304000012, 0x40010040000008, x5, 80, x20)

inst_29:
// rs1==x12, rs2==x3, rd==x7, rs2_h3_val == 32, rs1_h1_val == 128, rs1_h3_val == 16, rs1_h0_val == 65534
// opcode: ucmplt16 ; op1:x12; op2:x3; dest:x7; op1val:0x1001000080fffe;  op2val:0x20000900010001
TEST_RR_OP(ucmplt16, x7, x12, x3, 0x0000000000000000, 0x1001000080fffe, 0x20000900010001, x5, 88, x20)

inst_30:
// rs1==x14, rs2==x16, rd==x8, rs2_h3_val == 16, rs1_h3_val == 65531, rs2_h2_val == 65023, rs1_h1_val == 65527
// opcode: ucmplt16 ; op1:x14; op2:x16; dest:x8; op1val:0xfffb0003fff70000;  op2val:0x10fdffffbf000b
TEST_RR_OP(ucmplt16, x8, x14, x16, 0x0000000000000000, 0xfffb0003fff70000, 0x10fdffffbf000b, x5, 96, x1)

inst_31:
// rs1==x9, rs2==x29, rd==x0, rs2_h3_val == 8, rs2_h1_val == 4, rs1_h1_val == 65535, rs1_h0_val == 21845, rs2_h0_val == 65535
// opcode: ucmplt16 ; op1:x9; op2:x29; dest:x0; op1val:0x800000affff5555;  op2val:0x08000e0004ffff
TEST_RR_OP(ucmplt16, x0, x9, x29, 0x0000000000000000, 0x800000affff5555, 0x08000e0004ffff, x5, 104, x1)

inst_32:
// rs2_h3_val == 4, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff000adfff0007;  op2val:0x040020fffdff7f
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xffff000adfff0007, 0x040020fffdff7f, x5, 112, x1)

inst_33:
// rs1_h1_val == 4, rs1_h2_val == 65533, rs2_h2_val == 65534, rs2_h0_val == 32768
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffd0004fffd;  op2val:0xf7fffffe00208000
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x5555fffd0004fffd, 0xf7fffffe00208000, x5, 120, x1)

inst_34:
// rs1_h1_val == 1, rs1_h2_val == 4096, rs2_h2_val == 65519, rs1_h3_val == 57343
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff10000001000a;  op2val:0xaaaaffef000d0001
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xdfff10000001000a, 0xaaaaffef000d0001, x5, 128, x1)

inst_35:
// rs1_h0_val == 49151, rs1_h2_val == 63487, rs2_h2_val == 1024, rs1_h1_val == 32768
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x03f7ff8000bfff;  op2val:0x0c04000009ffdf
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x03f7ff8000bfff, 0x0c04000009ffdf, x5, 136, x1)

inst_36:
// rs1_h0_val == 65023, rs1_h1_val == 65534, rs1_h2_val == 65531
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fffbfffefdff;  op2val:0x0efff7fffe000c
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x03fffbfffefdff, 0x0efff7fffe000c, x5, 144, x1)

inst_37:
// rs1_h0_val == 65279, rs2_h3_val == 65535
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff01000011feff;  op2val:0xffff000600040010
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xdfff01000011feff, 0xffff000600040010, x5, 152, x1)

inst_38:
// rs1_h0_val == 65407, rs2_h2_val == 57343, rs2_h0_val == 63487, rs1_h2_val == 1024, rs1_h1_val == 65407
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0400ff7fff7f;  op2val:0xffdfdfffeffff7ff
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xfffe0400ff7fff7f, 0xffdfdfffeffff7ff, x5, 160, x1)

inst_39:
// rs1_h0_val == 65503, rs1_h3_val == 64511, rs2_h3_val == 0
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffbfff7fffdf;  op2val:0x00000f000affef
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xfbffffbfff7fffdf, 0x00000f000affef, x5, 168, x1)

inst_40:
// rs1_h0_val == 65519, rs2_h1_val == 4096, rs1_h2_val == 32768
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0080007fffffef;  op2val:0x100000101000ff7f
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x0080007fffffef, 0x100000101000ff7f, x5, 176, x1)

inst_41:
// rs1_h0_val == 65527, rs2_h1_val == 43690, rs2_h0_val == 4096, rs1_h2_val == 65534
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fffe0006fff7;  op2val:0x0b000baaaa1000
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x8000fffe0006fff7, 0x0b000baaaa1000, x5, 184, x1)

inst_42:
// rs1_h0_val == 65531, rs1_h3_val == 65503
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdfaaaa0400fffb;  op2val:0xbfff000340000010
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xffdfaaaa0400fffb, 0xbfff000340000010, x5, 192, x1)

inst_43:
// rs1_h0_val == 32768, rs1_h1_val == 2048
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x07010008008000;  op2val:0xaaaa001000040008
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x07010008008000, 0xaaaa001000040008, x5, 200, x1)

inst_44:
// rs1_h0_val == 16384, rs1_h3_val == 256, rs2_h2_val == 2048, rs1_h2_val == 8
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000087fff4000;  op2val:0x200080000041000
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x10000087fff4000, 0x200080000041000, x5, 208, x1)

inst_45:
// rs1_h0_val == 8192, rs1_h2_val == 49151, rs1_h3_val == 65279, rs1_h1_val == 49151, rs2_h0_val == 1024, rs2_h1_val == 65519
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffbfffbfff2000;  op2val:0xffff0080ffef0400
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xfeffbfffbfff2000, 0xffff0080ffef0400, x5, 216, x1)

inst_46:
// rs1_h0_val == 2048, rs1_h3_val == 65023
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff010000050800;  op2val:0x1000020fffdfffd
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xfdff010000050800, 0x1000020fffdfffd, x5, 224, x1)

inst_47:
// rs1_h0_val == 512, rs2_h2_val == 0, rs1_h3_val == 1024, rs1_h1_val == 8
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400ffef00080200;  op2val:0x120000000fefff
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x400ffef00080200, 0x120000000fefff, x5, 232, x1)

inst_48:
// rs1_h0_val == 64, rs1_h2_val == 57343, rs2_h2_val == 65407
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800dfff00030040;  op2val:0x07ff7f0007f7ff
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x800dfff00030040, 0x07ff7f0007f7ff, x5, 240, x1)

inst_49:
// rs1_h0_val == 32, rs2_h2_val == 61439
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff1000000b0020;  op2val:0xaaaaefff00010012
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xdfff1000000b0020, 0xaaaaefff00010012, x5, 248, x1)

inst_50:
// rs1_h0_val == 2, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x400f7ff00070002;  op2val:0xfffe000a7fff000d
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x400f7ff00070002, 0xfffe000a7fff000d, x5, 256, x1)

inst_51:
// rs1_h0_val == 65535, rs2_h2_val == 65531, rs2_h1_val == 65527
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0300090003ffff;  op2val:0x8000fffbfff7ffdf
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x0300090003ffff, 0x8000fffbfff7ffdf, x5, 264, x1)

inst_52:
// rs2_h3_val == 2, rs2_h1_val == 256
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0afff700130009;  op2val:0x0204000100000f
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x0afff700130009, 0x0204000100000f, x5, 272, x1)

inst_53:
// rs2_h3_val == 1, rs1_h1_val == 256
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x07ffdf0100ff7f;  op2val:0x01000700060020
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x07ffdf0100ff7f, 0x01000700060020, x5, 280, x1)

inst_54:
// rs2_h0_val == 65471, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x00000b0080ffbf;  op2val:0x4000fbffffdfffbf
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x00000b0080ffbf, 0x4000fbffffdfffbf, x5, 288, x1)

inst_55:
// rs2_h0_val == 65531, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10008000ffef0010;  op2val:0xfeff0040fffefffb
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x10008000ffef0010, 0xfeff0040fffefffb, x5, 296, x1)

inst_56:
// rs2_h0_val == 65534, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x05ff7f0040000f;  op2val:0x40000012fff7fffe
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x05ff7f0040000f, 0x40000012fff7fffe, x5, 304, x1)

inst_57:
// rs2_h0_val == 16384, rs1_h2_val == 64, rs2_h1_val == 32768
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff00402000fff7;  op2val:0xdfff000b80004000
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xefff00402000fff7, 0xdfff000b80004000, x5, 312, x1)

inst_58:
// rs2_h0_val == 8192, rs2_h2_val == 32768
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000900030200;  op2val:0xfdff800000122000
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xffdf000900030200, 0xfdff800000122000, x5, 320, x1)

inst_59:
// rs2_h0_val == 512, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x13fffd0100000f;  op2val:0x09fffb000a0200
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x13fffd0100000f, 0x09fffb000a0200, x5, 328, x1)

inst_60:
// rs2_h0_val == 256, rs1_h2_val == 1
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x110001fffd5555;  op2val:0x20007fff10000100
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x110001fffd5555, 0x20007fff10000100, x5, 336, x1)

inst_61:
// rs1_h3_val == 49151, rs2_h1_val == 2048
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffdf08000011;  op2val:0x1000000800fffe
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xbfffffdf08000011, 0x1000000800fffe, x5, 344, x1)

inst_62:
// rs1_h3_val == 65407, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff0005000e;  op2val:0xffbffffe00090040
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xff7fffff0005000e, 0xffbffffe00090040, x5, 352, x1)

inst_63:
// rs1_h3_val == 65471, rs1_h1_val == 65531
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf1000fffbffbf;  op2val:0xaaaa7fffffbf7fff
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xffbf1000fffbffbf, 0xaaaa7fffffbf7fff, x5, 360, x1)

inst_64:
// rs1_h3_val == 65519, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef002080000011;  op2val:0x130002ffbf0001
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xffef002080000011, 0x130002ffbf0001, x5, 368, x1)

inst_65:
// rs1_h3_val == 65533, rs1_h2_val == 65279
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfeff00000010;  op2val:0x090008aaaafffd
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xfffdfeff00000010, 0x090008aaaafffd, x5, 376, x1)

inst_66:
// rs1_h3_val == 8192, rs2_h1_val == 65407
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000ffefffffaaaa;  op2val:0x0a000aff7f0012
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x2000ffefffffaaaa, 0x0a000aff7f0012, x5, 384, x1)

inst_67:
// rs2_h2_val == 49151, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x200ffbf0080dfff;  op2val:0x8000bffff7ffff7f
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x200ffbf0080dfff, 0x8000bffff7ffff7f, x5, 392, x1)

inst_68:
// rs2_h2_val == 63487, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0006000affbf;  op2val:0xf7fff7ffefffffff
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xfffd0006000affbf, 0xf7fff7ffefffffff, x5, 400, x1)

inst_69:
// rs1_h3_val == 64, rs2_h1_val == 8
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40dfff20000020;  op2val:0xfeffaaaa00088000
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x40dfff20000020, 0xfeffaaaa00088000, x5, 408, x1)

inst_70:
// rs1_h3_val == 8, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x08800020001000;  op2val:0xfffdf7ffffef0100
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x08800020001000, 0xfffdf7ffffef0100, x5, 416, x1)

inst_71:
// rs2_h2_val == 65471, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000005f7ff0040;  op2val:0xffbfffbfdfffffdf
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x40000005f7ff0040, 0xffbfffbfdfffffdf, x5, 424, x1)

inst_72:
// rs2_h2_val == 65503, rs2_h1_val == 21845
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10008000fff7000c;  op2val:0xfbffffdf55551000
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x10008000fff7000c, 0xfbffffdf55551000, x5, 432, x1)

inst_73:
// rs1_h3_val == 1, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x01efffffdf1000;  op2val:0x06fdff00080007
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x01efffffdf1000, 0x06fdff00080007, x5, 440, x1)

inst_74:
// rs2_h2_val == 16384, rs1_h1_val == 65023, rs1_h2_val == 64511
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x03fbfffdff0020;  op2val:0x1000400000200005
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x03fbfffdff0020, 0x1000400000200005, x5, 448, x1)

inst_75:
// rs2_h2_val == 4096, rs1_h2_val == 0
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x07000004000013;  op2val:0x1001000000caaaa
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x07000004000013, 0x1001000000caaaa, x5, 456, x1)

inst_76:
// rs1_h2_val == 65023, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000fdff0000ffbf;  op2val:0xf7ff100000030100
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x8000fdff0000ffbf, 0xf7ff100000030100, x5, 464, x1)

inst_77:
// rs2_h2_val == 4, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffffffbffffb;  op2val:0x8000047fff0009
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x8000ffffffbffffb, 0x8000047fff0009, x5, 472, x1)

inst_78:
// rs2_h2_val == 1, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000fffdffef0003;  op2val:0x000001000f0800
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x2000fffdffef0003, 0x000001000f0800, x5, 480, x1)

inst_79:
// rs2_h1_val == 49151, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000009fdff2000;  op2val:0x00efffbfff2000
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x80000009fdff2000, 0x00efffbfff2000, x5, 488, x1)

inst_80:
// rs1_h2_val == 512, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000200fdff1000;  op2val:0x10bfff00110009
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x8000200fdff1000, 0x10bfff00110009, x5, 496, x1)

inst_81:
// rs1_h2_val == 128, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x110080000e0100;  op2val:0x20000080040f7ff
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x110080000e0100, 0x20000080040f7ff, x5, 504, x1)

inst_82:
// rs2_h1_val == 65023, rs1_h1_val == 32
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff710000020f7ff;  op2val:0x80000100fdff0003
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xfff710000020f7ff, 0x80000100fdff0003, x5, 512, x1)

inst_83:
// rs2_h1_val == 65279, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x08002000050800;  op2val:0x067ffffefffff7
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x08002000050800, 0x067ffffefffff7, x5, 520, x1)

inst_84:
// rs1_h2_val == 4, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x80000004ffbffffb;  op2val:0x110006000e0012
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x80000004ffbffffb, 0x110006000e0012, x5, 528, x1)

inst_85:
// rs1_h2_val == 2, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b0002000b000f;  op2val:0x0a000100050040
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x0b0002000b000f, 0x0a000100050040, x5, 536, x1)

inst_86:
// rs1_h1_val == 43690, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffbfaaaa0400;  op2val:0xfff7000efff70012
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x02ffbfaaaa0400, 0xfff7000efff70012, x5, 544, x1)

inst_87:
// rs1_h1_val == 64511, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0010fbfffffd;  op2val:0x100fffd00020200
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xfffe0010fbfffffd, 0x100fffd00020200, x5, 552, x1)

inst_88:
// rs2_h1_val == 512, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0f00040080ffef;  op2val:0xf7ff000702000400
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x0f00040080ffef, 0xf7ff000702000400, x5, 560, x1)

inst_89:
// rs1_h1_val == 65279, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x02000efefffffb;  op2val:0xfffffffe4000000b
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x02000efefffffb, 0xfffffffe4000000b, x5, 568, x1)

inst_90:
// rs2_h1_val == 128, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000011effffdff;  op2val:0x02000700800003
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x10000011effffdff, 0x02000700800003, x5, 576, x1)

inst_91:
// rs1_h2_val == 21845, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf5555000c0200;  op2val:0x0901000004fffe
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xffbf5555000c0200, 0x0901000004fffe, x5, 584, x1)

inst_92:
// rs2_h1_val == 16, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fffd000dff7f;  op2val:0xefff000100107fff
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x200fffd000dff7f, 0xefff000100107fff, x5, 592, x1)

inst_93:
// rs2_h1_val == 65535, rs1_h1_val == 512
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x100000040200ffdf;  op2val:0x098000ffff000d
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x100000040200ffdf, 0x098000ffff000d, x5, 600, x1)

inst_94:
// rs2_h1_val == 0, rs2_h0_val == 49151
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f001200118000;  op2val:0x1000ffbf0000bfff
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xff7f001200118000, 0x1000ffbf0000bfff, x5, 608, x1)

inst_95:
// rs2_h0_val == 64511, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c000e0012fffb;  op2val:0x0100050080fbff
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x0c000e0012fffb, 0x0100050080fbff, x5, 616, x1)

inst_96:
// rs1_h1_val == 16384, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff800040000008;  op2val:0x041000feff0080
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x7fff800040000008, 0x041000feff0080, x5, 624, x1)

inst_97:
// rs1_h1_val == 4096, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe000a1000dfff;  op2val:0x10fefffbff0009
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xfffe000a1000dfff, 0x10fefffbff0009, x5, 632, x1)

inst_98:
// rs1_h1_val == 16, 
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d000100100013;  op2val:0x200efffaaaa0100
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x0d000100100013, 0x200efffaaaa0100, x5, 640, x1)

inst_99:
// rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h2_val == 8192, rs1_h2_val == 8192, rs1_h0_val == 1024, rs1_h3_val == 61439
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff200000120400;  op2val:0x0c200000120006
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0xefff200000120400, 0x0c200000120006, x5, 648, x1)

inst_100:
// rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 16, rs2_h2_val == 8, rs1_h2_val == 65527, rs2_h3_val == 64511, rs2_h0_val == 16, rs1_h3_val == 32
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fff700130010;  op2val:0xfbff0008000b0010
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x20fff700130010, 0xfbff0008000b0010, x5, 656, x1)

inst_101:
// rs2_h3_val == 57343, rs2_h1_val == 64511, rs1_h3_val == 32767, rs2_h0_val == 4, rs1_h0_val == 128
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff000a00130080;  op2val:0xdfff2000fbff0004
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x7fff000a00130080, 0xdfff2000fbff0004, x5, 664, x1)

inst_102:
// rs2_h3_val == 8, rs2_h1_val == 4, rs1_h1_val == 65535, rs1_h0_val == 21845, rs2_h0_val == 65535
// opcode: ucmplt16 ; op1:x30; op2:x29; dest:x31; op1val:0x800000affff5555;  op2val:0x08000e0004ffff
TEST_RR_OP(ucmplt16, x31, x30, x29, 0x0000000000000000, 0x800000affff5555, 0x08000e0004ffff, x5, 672, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 18*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 85*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
