
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srli16.u instruction of the RISC-V RV64PZicsr extension for the srli16.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srli16.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rd, rs1==x1, rd==x1, rs1_h0_val == 0, imm_val == 11, rs1_h3_val == 61439
// opcode: srli16.u ; op1:x1; dest:x1; op1val:0xefff0013000c0000;  immval:0xb
TEST_IMM_OP( srli16.u, x1, x1, 0x0000000000000000, 0xefff0013000c0000, 0xb, x8, 0, x7)

inst_1:
// rs1 != rd, rs1==x22, rd==x14, imm_val == 15, rs1_h3_val == 2, rs1_h1_val == 128, rs1_h2_val == 4
// opcode: srli16.u ; op1:x22; dest:x14; op1val:0x0200040080000f;  immval:0xf
TEST_IMM_OP( srli16.u, x14, x22, 0x0000000000000000, 0x0200040080000f, 0xf, x8, 8, x7)

inst_2:
// rs1==x3, rd==x20, imm_val == 14, rs1_h3_val == 21845, rs1_h1_val == 65519, rs1_h2_val == 65534, rs1_h0_val == 32768
// opcode: srli16.u ; op1:x3; dest:x20; op1val:0x5555fffeffef8000;  immval:0xe
TEST_IMM_OP( srli16.u, x20, x3, 0x0000000000000000, 0x5555fffeffef8000, 0xe, x8, 16, x7)

inst_3:
// rs1==x5, rd==x22, imm_val == 13, rs1_h3_val == 43690, rs1_h1_val == 21845, rs1_h2_val == 65533, rs1_h0_val == 61439
// opcode: srli16.u ; op1:x5; dest:x22; op1val:0xaaaafffd5555efff;  immval:0xd
TEST_IMM_OP( srli16.u, x22, x5, 0x0000000000000000, 0xaaaafffd5555efff, 0xd, x8, 24, x7)

inst_4:
// rs1==x31, rd==x4, imm_val == 12, 
// opcode: srli16.u ; op1:x31; dest:x4; op1val:0x07000d0011000c;  immval:0xc
TEST_IMM_OP( srli16.u, x4, x31, 0x0000000000000000, 0x07000d0011000c, 0xc, x8, 32, x7)

inst_5:
// rs1==x16, rd==x9, imm_val == 10, rs1_h3_val == 512, rs1_h0_val == 65534, rs1_h1_val == 2
// opcode: srli16.u ; op1:x16; dest:x9; op1val:0x20000030002fffe;  immval:0xa
TEST_IMM_OP( srli16.u, x9, x16, 0x0000000000000000, 0x20000030002fffe, 0xa, x8, 40, x7)

inst_6:
// rs1==x24, rd==x12, imm_val == 9, rs1_h1_val == 32, rs1_h3_val == 8192
// opcode: srli16.u ; op1:x24; dest:x12; op1val:0x2000fffd00200005;  immval:0x9
TEST_IMM_OP( srli16.u, x12, x24, 0x0000000000000000, 0x2000fffd00200005, 0x9, x8, 48, x7)

inst_7:
// rs1==x13, rd==x29, imm_val == 8, rs1_h2_val == 16384, rs1_h3_val == 65471
// opcode: srli16.u ; op1:x13; dest:x29; op1val:0xffbf40000002000a;  immval:0x8
TEST_IMM_OP( srli16.u, x29, x13, 0x0000000000000000, 0xffbf40000002000a, 0x8, x8, 56, x7)

inst_8:
// rs1==x0, rd==x19, imm_val == 7, rs1_h1_val == 4096, rs1_h2_val == 65535
// opcode: srli16.u ; op1:x0; dest:x19; op1val:0x11ffff10000013;  immval:0x7
TEST_IMM_OP( srli16.u, x19, x0, 0x0000000000000000, 0x11ffff10000013, 0x7, x8, 64, x7)

inst_9:
// rs1==x2, rd==x10, imm_val == 6, rs1_h0_val == 128
// opcode: srli16.u ; op1:x2; dest:x10; op1val:0x02400000050080;  immval:0x6
TEST_IMM_OP( srli16.u, x10, x2, 0x0000000000000000, 0x02400000050080, 0x6, x8, 72, x7)

inst_10:
// rs1==x12, rd==x15, imm_val == 5, rs1_h3_val == 16
// opcode: srli16.u ; op1:x12; dest:x15; op1val:0x10000c00130011;  immval:0x5
TEST_IMM_OP( srli16.u, x15, x12, 0x0000000000000000, 0x10000c00130011, 0x5, x8, 80, x7)

inst_11:
// rs1==x11, rd==x30, imm_val == 4, rs1_h2_val == 49151, rs1_h0_val == 63487
// opcode: srli16.u ; op1:x11; dest:x30; op1val:0x11bfff1000f7ff;  immval:0x4
TEST_IMM_OP( srli16.u, x30, x11, 0x0000000000000000, 0x11bfff1000f7ff, 0x4, x8, 88, x7)

inst_12:
// rs1==x25, rd==x31, imm_val == 3, rs1_h3_val == 128, rs1_h0_val == 32767
// opcode: srli16.u ; op1:x25; dest:x31; op1val:0x80000700067fff;  immval:0x3
TEST_IMM_OP( srli16.u, x31, x25, 0x0000000000000000, 0x80000700067fff, 0x3, x8, 96, x7)

inst_13:
// rs1==x18, rd==x5, imm_val == 2, rs1_h2_val == 2, rs1_h0_val == 512
// opcode: srli16.u ; op1:x18; dest:x5; op1val:0x070002000f0200;  immval:0x2
TEST_IMM_OP( srli16.u, x5, x18, 0x0000000000000000, 0x070002000f0200, 0x2, x8, 104, x7)

inst_14:
// rs1==x19, rd==x27, imm_val == 1, rs1_h0_val == 65533, rs1_h2_val == 1
// opcode: srli16.u ; op1:x19; dest:x27; op1val:0x030001ffeffffd;  immval:0x1
TEST_IMM_OP( srli16.u, x27, x19, 0x0000000000000000, 0x030001ffeffffd, 0x1, x8, 112, x7)

inst_15:
// rs1==x30, rd==x3, imm_val == 0, rs1_h3_val == 65531, rs1_h0_val == 4096, rs1_h1_val == 65471, rs1_h2_val == 65279
// opcode: srli16.u ; op1:x30; dest:x3; op1val:0xfffbfeffffbf1000;  immval:0x0
TEST_IMM_OP( srli16.u, x3, x30, 0x0000000000000000, 0xfffbfeffffbf1000, 0x0, x8, 120, x7)

inst_16:
// rs1==x28, rd==x11, rs1_h3_val == 32767, rs1_h1_val == 2048, rs1_h2_val == 128
// opcode: srli16.u ; op1:x28; dest:x11; op1val:0x7fff008008000011;  immval:0x6
TEST_IMM_OP( srli16.u, x11, x28, 0x0000000000000000, 0x7fff008008000011, 0x6, x8, 128, x7)

inst_17:
// rs1==x17, rd==x2, rs1_h3_val == 49151, 
// opcode: srli16.u ; op1:x17; dest:x2; op1val:0xbfffbfffffbf8000;  immval:0x2
TEST_IMM_OP( srli16.u, x2, x17, 0x0000000000000000, 0xbfffbfffffbf8000, 0x2, x8, 136, x7)

inst_18:
// rs1==x6, rd==x25, rs1_h3_val == 57343, rs1_h1_val == 65531
// opcode: srli16.u ; op1:x6; dest:x25; op1val:0xdfff0012fffbefff;  immval:0x1
TEST_IMM_OP( srli16.u, x25, x6, 0x0000000000000000, 0xdfff0012fffbefff, 0x1, x8, 144, x7)

inst_19:
// rs1==x9, rd==x16, rs1_h3_val == 63487, rs1_h1_val == 65503
// opcode: srli16.u ; op1:x9; dest:x16; op1val:0xf7ff0003ffdf000c;  immval:0x5
TEST_IMM_OP( srli16.u, x16, x9, 0x0000000000000000, 0xf7ff0003ffdf000c, 0x5, x8, 152, x7)

inst_20:
// rs1==x26, rd==x0, rs1_h3_val == 64511, 
// opcode: srli16.u ; op1:x26; dest:x0; op1val:0xfbff0006000c0013;  immval:0x6
TEST_IMM_OP( srli16.u, x0, x26, 0x0000000000000000, 0xfbff0006000c0013, 0x6, x8, 160, x7)

inst_21:
// rs1==x10, rd==x6, rs1_h3_val == 65023, rs1_h2_val == 43690
// opcode: srli16.u ; op1:x10; dest:x6; op1val:0xfdffaaaa0013000b;  immval:0xf
TEST_IMM_OP( srli16.u, x6, x10, 0x0000000000000000, 0xfdffaaaa0013000b, 0xf, x8, 168, x2)

inst_22:
// rs1==x20, rd==x7, rs1_h3_val == 65279, rs1_h2_val == 64511
// opcode: srli16.u ; op1:x20; dest:x7; op1val:0xfefffbff0011fffd;  immval:0x4
TEST_IMM_OP( srli16.u, x7, x20, 0x0000000000000000, 0xfefffbff0011fffd, 0x4, x8, 176, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_23:
// rs1==x21, rd==x17, rs1_h3_val == 65407, rs1_h1_val == 32768
// opcode: srli16.u ; op1:x21; dest:x17; op1val:0xff7fffff80000011;  immval:0x7
TEST_IMM_OP( srli16.u, x17, x21, 0x0000000000000000, 0xff7fffff80000011, 0x7, x1, 0, x2)

inst_24:
// rs1==x4, rd==x8, rs1_h3_val == 65503, 
// opcode: srli16.u ; op1:x4; dest:x8; op1val:0xffdf000f00111000;  immval:0xa
TEST_IMM_OP( srli16.u, x8, x4, 0x0000000000000000, 0xffdf000f00111000, 0xa, x1, 8, x2)

inst_25:
// rs1==x7, rd==x18, rs1_h3_val == 65519, rs1_h0_val == 65531
// opcode: srli16.u ; op1:x7; dest:x18; op1val:0xffeffffffffbfffb;  immval:0xf
TEST_IMM_OP( srli16.u, x18, x7, 0x0000000000000000, 0xffeffffffffbfffb, 0xf, x1, 16, x2)

inst_26:
// rs1==x8, rd==x21, rs1_h3_val == 65527, rs1_h0_val == 8, rs1_h1_val == 16384
// opcode: srli16.u ; op1:x8; dest:x21; op1val:0xfff7000440000008;  immval:0x1
TEST_IMM_OP( srli16.u, x21, x8, 0x0000000000000000, 0xfff7000440000008, 0x1, x1, 24, x2)

inst_27:
// rs1==x27, rd==x23, rs1_h3_val == 65533, rs1_h0_val == 65023
// opcode: srli16.u ; op1:x27; dest:x23; op1val:0xfffd0003fffbfdff;  immval:0xe
TEST_IMM_OP( srli16.u, x23, x27, 0x0000000000000000, 0xfffd0003fffbfdff, 0xe, x1, 32, x2)

inst_28:
// rs1==x23, rd==x13, rs1_h3_val == 65534, rs1_h1_val == 64511, rs1_h0_val == 1024, rs1_h2_val == 32768
// opcode: srli16.u ; op1:x23; dest:x13; op1val:0xfffe8000fbff0400;  immval:0x9
TEST_IMM_OP( srli16.u, x13, x23, 0x0000000000000000, 0xfffe8000fbff0400, 0x9, x1, 40, x2)

inst_29:
// rs1==x15, rd==x24, rs1_h3_val == 32768, rs1_h0_val == 65527, rs1_h1_val == 0, rs1_h2_val == 65023
// opcode: srli16.u ; op1:x15; dest:x24; op1val:0x8000fdff0000fff7;  immval:0x5
TEST_IMM_OP( srli16.u, x24, x15, 0x0000000000000000, 0x8000fdff0000fff7, 0x5, x1, 48, x2)

inst_30:
// rs1==x14, rd==x26, rs1_h3_val == 16384, 
// opcode: srli16.u ; op1:x14; dest:x26; op1val:0x4000000f0005fffb;  immval:0x9
TEST_IMM_OP( srli16.u, x26, x14, 0x0000000000000000, 0x4000000f0005fffb, 0x9, x1, 56, x2)

inst_31:
// rs1==x29, rd==x28, rs1_h3_val == 4096, rs1_h2_val == 0, rs1_h1_val == 65533, rs1_h0_val == 65503
// opcode: srli16.u ; op1:x29; dest:x28; op1val:0x10000000fffdffdf;  immval:0xd
TEST_IMM_OP( srli16.u, x28, x29, 0x0000000000000000, 0x10000000fffdffdf, 0xd, x1, 64, x2)

inst_32:
// rs1_h3_val == 2048, rs1_h0_val == 16384, rs1_h2_val == 1024
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x800040000134000;  immval:0xe
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x800040000134000, 0xe, x1, 72, x2)

inst_33:
// rs1_h3_val == 1024, rs1_h1_val == 8192, rs1_h2_val == 21845
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x400555520000003;  immval:0x3
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x400555520000003, 0x3, x1, 80, x2)

inst_34:
// rs1_h3_val == 256, rs1_h1_val == 65023, rs1_h2_val == 512
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x1000200fdff000c;  immval:0xf
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x1000200fdff000c, 0xf, x1, 88, x2)

inst_35:
// rs1_h3_val == 64, rs1_h0_val == 65407
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x400006fffdff7f;  immval:0x5
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x400006fffdff7f, 0x5, x1, 96, x2)

inst_36:
// rs1_h0_val == 49151, rs1_h2_val == 61439
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xfffdeffffdffbfff;  immval:0x0
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0xfffdeffffdffbfff, 0x0, x1, 104, x2)

inst_37:
// rs1_h0_val == 57343, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xffdf0009000ddfff;  immval:0x6
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0xffdf0009000ddfff, 0x6, x1, 112, x2)

inst_38:
// rs1_h0_val == 64511, rs1_h2_val == 256
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x40001000013fbff;  immval:0x4
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x40001000013fbff, 0x4, x1, 120, x2)

inst_39:
// rs1_h0_val == 65279, rs1_h2_val == 65519
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x8000ffeffdfffeff;  immval:0x4
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x8000ffeffdfffeff, 0x4, x1, 128, x2)

inst_40:
// rs1_h0_val == 65471, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x0f000a2000ffbf;  immval:0x0
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x0f000a2000ffbf, 0x0, x1, 136, x2)

inst_41:
// rs1_h0_val == 65519, rs1_h2_val == 65503
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xfffdffdf0007ffef;  immval:0xf
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0xfffdffdf0007ffef, 0xf, x1, 144, x2)

inst_42:
// rs1_h0_val == 8192, rs1_h2_val == 8192
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x0f200000032000;  immval:0x7
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x0f200000032000, 0x7, x1, 152, x2)

inst_43:
// rs1_h0_val == 2048, rs1_h2_val == 63487
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xfbfff7ff10000800;  immval:0x0
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0xfbfff7ff10000800, 0x0, x1, 160, x2)

inst_44:
// rs1_h0_val == 256, rs1_h3_val == 4, rs1_h1_val == 16, rs1_h2_val == 65407
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x04ff7f00100100;  immval:0xf
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x04ff7f00100100, 0xf, x1, 168, x2)

inst_45:
// rs1_h0_val == 64, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x05feffffbf0040;  immval:0xf
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x05feffffbf0040, 0xf, x1, 176, x2)

inst_46:
// rs1_h0_val == 32, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x120000fffd0020;  immval:0x3
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x120000fffd0020, 0x3, x1, 184, x2)

inst_47:
// rs1_h0_val == 16, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x11fffeffef0010;  immval:0xe
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x11fffeffef0010, 0xe, x1, 192, x2)

inst_48:
// rs1_h0_val == 4, rs1_h2_val == 32
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x4000020000d0004;  immval:0xf
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x4000020000d0004, 0xf, x1, 200, x2)

inst_49:
// rs1_h0_val == 2, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x11feff00100002;  immval:0x1
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x11feff00100002, 0x1, x1, 208, x2)

inst_50:
// rs1_h0_val == 1, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xbfff5555000d0001;  immval:0x2
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0xbfff5555000d0001, 0x2, x1, 216, x2)

inst_51:
// rs1_h0_val == 65535, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x0efffe000affff;  immval:0xa
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x0efffe000affff, 0xa, x1, 224, x2)

inst_52:
// rs1_h3_val == 32, rs1_h1_val == 43690
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x208000aaaa000d;  immval:0x8
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x208000aaaa000d, 0x8, x1, 232, x2)

inst_53:
// rs1_h3_val == 8, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x080400000b0800;  immval:0x9
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x080400000b0800, 0x9, x1, 240, x2)

inst_54:
// rs1_h3_val == 1, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x0100020005fffe;  immval:0x6
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x0100020005fffe, 0x6, x1, 248, x2)

inst_55:
// rs1_h2_val == 65471, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xff7fffbf0080ffdf;  immval:0x8
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0xff7fffbf0080ffdf, 0x8, x1, 256, x2)

inst_56:
// rs1_h2_val == 65527, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xf7fffff700030010;  immval:0x8
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0xf7fffff700030010, 0x8, x1, 264, x2)

inst_57:
// rs1_h2_val == 65531, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x8000fffb8000000a;  immval:0xc
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x8000fffb8000000a, 0xc, x1, 272, x2)

inst_58:
// rs1_h2_val == 4096, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x7fff1000000f0012;  immval:0x3
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x7fff1000000f0012, 0x3, x1, 280, x2)

inst_59:
// rs1_h2_val == 2048, rs1_h1_val == 65534
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x060800fffe4000;  immval:0x7
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x060800fffe4000, 0x7, x1, 288, x2)

inst_60:
// rs1_h2_val == 64, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x13004000120040;  immval:0x0
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x13004000120040, 0x0, x1, 296, x2)

inst_61:
// rs1_h2_val == 16, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xfbff00100003000b;  immval:0x7
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0xfbff00100003000b, 0x7, x1, 304, x2)

inst_62:
// rs1_h2_val == 8, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xfffb00080003efff;  immval:0xc
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0xfffb00080003efff, 0xc, x1, 312, x2)

inst_63:
// rs1_h1_val == 8, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xfffd04000008000a;  immval:0x3
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0xfffd04000008000a, 0x3, x1, 320, x2)

inst_64:
// rs1_h1_val == 32767, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x800ffff7ffffdff;  immval:0xc
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x800ffff7ffffdff, 0xc, x1, 328, x2)

inst_65:
// rs1_h1_val == 49151, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x55550005bfff0003;  immval:0x0
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x55550005bfff0003, 0x0, x1, 336, x2)

inst_66:
// rs1_h1_val == 57343, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x010007dfff0010;  immval:0xa
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x010007dfff0010, 0xa, x1, 344, x2)

inst_67:
// rs1_h1_val == 61439, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xbffffeffefff8000;  immval:0x7
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0xbffffeffefff8000, 0x7, x1, 352, x2)

inst_68:
// rs1_h1_val == 63487, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x034000f7fffffe;  immval:0xf
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x034000f7fffffe, 0xf, x1, 360, x2)

inst_69:
// rs1_h1_val == 65279, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xfffe1000feff0400;  immval:0xc
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0xfffe1000feff0400, 0xc, x1, 368, x2)

inst_70:
// rs1_h1_val == 65407, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x020007ff7f0400;  immval:0xa
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x020007ff7f0400, 0xa, x1, 376, x2)

inst_71:
// rs1_h1_val == 65527, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x120011fff70040;  immval:0x7
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x120011fff70040, 0x7, x1, 384, x2)

inst_72:
// rs1_h1_val == 1024, rs1_h2_val == 57343
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xaaaadfff0400ffdf;  immval:0x8
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0xaaaadfff0400ffdf, 0x8, x1, 392, x2)

inst_73:
// rs1_h1_val == 512, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x09200002000006;  immval:0x5
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x09200002000006, 0x5, x1, 400, x2)

inst_74:
// rs1_h1_val == 256, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xf7ff001101000002;  immval:0x3
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0xf7ff001101000002, 0x3, x1, 408, x2)

inst_75:
// rs1_h3_val == 65535, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xffffffbf40000009;  immval:0x1
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0xffffffbf40000009, 0x1, x1, 416, x2)

inst_76:
// rs1_h3_val == 0, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x00200000060013;  immval:0x8
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x00200000060013, 0x8, x1, 424, x2)

inst_77:
// rs1_h1_val == 64, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x0a000e00402000;  immval:0xd
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x0a000e00402000, 0xd, x1, 432, x2)

inst_78:
// rs1_h2_val == 32767, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x127fffffbf000d;  immval:0xa
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x127fffffbf000d, 0xa, x1, 440, x2)

inst_79:
// rs1_h1_val == 4, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xffef00060004fffd;  immval:0x1
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0xffef00060004fffd, 0x1, x1, 448, x2)

inst_80:
// rs1_h1_val == 1, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x07feff00010008;  immval:0xb
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x07feff00010008, 0xb, x1, 456, x2)

inst_81:
// rs1_h1_val == 65535, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xaaaafdffffff8000;  immval:0xa
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0xaaaafdffffff8000, 0xa, x1, 464, x2)

inst_82:
// rs1_h0_val == 43690, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0x0ffbff0013aaaa;  immval:0xe
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0x0ffbff0013aaaa, 0xe, x1, 472, x2)

inst_83:
// rs1_h0_val == 21845, 
// opcode: srli16.u ; op1:x30; dest:x31; op1val:0xffef000d00135555;  immval:0xf
TEST_IMM_OP( srli16.u, x31, x30, 0x0000000000000000, 0xffef000d00135555, 0xf, x1, 480, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 23*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 61*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
