
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smin32 instruction of the RISC-V RV64PZicsr extension for the smin32 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smin32)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x22,signature_x22_1)

inst_0:
// rs1 == rd != rs2, rs1==x11, rs2==x21, rd==x11, rs1_w0_val == -2147483648, rs1_w1_val != rs2_w1_val, rs1_w1_val < 0 and rs2_w1_val > 0, rs1_w1_val == -65537, rs1_w0_val != rs2_w0_val, rs1_w0_val < 0 and rs2_w0_val < 0, rs2_w1_val == 2147483647, rs2_w0_val == -4194305
// opcode: smin32 ; op1:x11; op2:x21; dest:x11; op1val:0xfffeffff80000000;  op2val:0x7fffffffffbfffff
TEST_RR_OP(smin32, x11, x11, x21, 0x0000000000000000, 0xfffeffff80000000, 0x7fffffffffbfffff, x22, 0, x12)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x5, rs2==x23, rd==x28, rs1_w1_val == rs2_w1_val, rs1_w0_val == -4194305, rs2_w0_val == -33, rs1_w1_val > 0 and rs2_w1_val > 0, rs1_w1_val == 2147483647
// opcode: smin32 ; op1:x5; op2:x23; dest:x28; op1val:0x7fffffffffbfffff;  op2val:0x7fffffffffffffdf
TEST_RR_OP(smin32, x28, x5, x23, 0x0000000000000000, 0x7fffffffffbfffff, 0x7fffffffffffffdf, x22, 8, x12)

inst_2:
// rs1 == rs2 != rd, rs1==x4, rs2==x4, rd==x8, rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w0_val == -131073, rs2_w1_val == -33554433, rs1_w1_val == -3
// opcode: smin32 ; op1:x4; op2:x4; dest:x8; op1val:0xfffffffdc0000000;  op2val:0xfdfffffffffdffff
TEST_RR_OP(smin32, x8, x4, x4, 0x0000000000000000, 0xfffffffdc0000000, 0xfdfffffffffdffff, x22, 16, x12)

inst_3:
// rs1 == rs2 == rd, rs1==x29, rs2==x29, rd==x29, rs1_w1_val > 0 and rs2_w1_val < 0, rs1_w0_val == 1073741824, rs1_w0_val > 0 and rs2_w0_val > 0, rs1_w1_val == 16777216, rs2_w1_val == -1025
// opcode: smin32 ; op1:x29; op2:x29; dest:x29; op1val:0x100000040000000;  op2val:0xfffffbff00000006
TEST_RR_OP(smin32, x29, x29, x29, 0x0000000000000000, 0x100000040000000, 0xfffffbff00000006, x22, 24, x12)

inst_4:
// rs2 == rd != rs1, rs1==x21, rs2==x6, rd==x6, rs1_w0_val == rs2_w0_val, rs1_w1_val == -1, rs2_w0_val == -4097, rs1_w0_val == -4097
// opcode: smin32 ; op1:x21; op2:x6; dest:x6; op1val:0xffffffffffffefff;  op2val:0x7fffffffffffefff
TEST_RR_OP(smin32, x6, x21, x6, 0x0000000000000000, 0xffffffffffffefff, 0x7fffffffffffefff, x22, 32, x12)

inst_5:
// rs1==x23, rs2==x30, rd==x13, rs1_w0_val < 0 and rs2_w0_val > 0, rs2_w1_val == -4097, rs1_w0_val == -32769, rs2_w0_val == 16384, rs1_w1_val == -268435457
// opcode: smin32 ; op1:x23; op2:x30; dest:x13; op1val:0xefffffffffff7fff;  op2val:0xffffefff00004000
TEST_RR_OP(smin32, x13, x23, x30, 0x0000000000000000, 0xefffffffffff7fff, 0xffffefff00004000, x22, 40, x12)

inst_6:
// rs1==x3, rs2==x17, rd==x27, rs1_w0_val > 0 and rs2_w0_val < 0, rs1_w0_val == 536870912, rs1_w1_val == -33554433
// opcode: smin32 ; op1:x3; op2:x17; dest:x27; op1val:0xfdffffff20000000;  op2val:0x000009ffbfffff
TEST_RR_OP(smin32, x27, x3, x17, 0x0000000000000000, 0xfdffffff20000000, 0x000009ffbfffff, x22, 48, x12)

inst_7:
// rs1==x9, rs2==x3, rd==x4, rs2_w1_val == -1431655766, rs1_w1_val == 8192, rs2_w0_val == -65, rs1_w0_val == -65
// opcode: smin32 ; op1:x9; op2:x3; dest:x4; op1val:0x002000ffffffbf;  op2val:0xaaaaaaaaffffffbf
TEST_RR_OP(smin32, x4, x9, x3, 0x0000000000000000, 0x002000ffffffbf, 0xaaaaaaaaffffffbf, x22, 56, x12)

inst_8:
// rs1==x19, rs2==x2, rd==x9, rs2_w1_val == 1431655765, rs2_w0_val == 0, rs1_w1_val == -32769
// opcode: smin32 ; op1:x19; op2:x2; dest:x9; op1val:0xffff7fff00000003;  op2val:0x5555555500000000
TEST_RR_OP(smin32, x9, x19, x2, 0x0000000000000000, 0xffff7fff00000003, 0x5555555500000000, x22, 64, x12)

inst_9:
// rs1==x14, rs2==x10, rd==x16, rs2_w1_val == -1073741825, rs1_w1_val == -4194305, rs1_w0_val == 64
// opcode: smin32 ; op1:x14; op2:x10; dest:x16; op1val:0xffbfffff00000040;  op2val:0xbfffffff00004000
TEST_RR_OP(smin32, x16, x14, x10, 0x0000000000000000, 0xffbfffff00000040, 0xbfffffff00004000, x22, 72, x12)

inst_10:
// rs1==x10, rs2==x11, rd==x2, rs2_w1_val == -536870913, rs1_w1_val == -17, rs1_w0_val == -134217729
// opcode: smin32 ; op1:x10; op2:x11; dest:x2; op1val:0xffffffeff7ffffff;  op2val:0xdfffffffffffffbf
TEST_RR_OP(smin32, x2, x10, x11, 0x0000000000000000, 0xffffffeff7ffffff, 0xdfffffffffffffbf, x22, 80, x12)

inst_11:
// rs1==x1, rs2==x5, rd==x3, rs2_w1_val == -268435457, rs2_w0_val == -5, rs1_w1_val == 2097152, rs1_w0_val == 67108864
// opcode: smin32 ; op1:x1; op2:x5; dest:x3; op1val:0x20000004000000;  op2val:0xeffffffffffffffb
TEST_RR_OP(smin32, x3, x1, x5, 0x0000000000000000, 0x20000004000000, 0xeffffffffffffffb, x22, 88, x12)

inst_12:
// rs1==x20, rs2==x28, rd==x19, rs2_w1_val == -134217729, rs1_w1_val == 536870912, rs2_w0_val == -65537
// opcode: smin32 ; op1:x20; op2:x28; dest:x19; op1val:0x2000000000000007;  op2val:0xf7fffffffffeffff
TEST_RR_OP(smin32, x19, x20, x28, 0x0000000000000000, 0x2000000000000007, 0xf7fffffffffeffff, x22, 96, x12)

inst_13:
// rs1==x6, rs2==x7, rd==x17, rs2_w1_val == -67108865, rs2_w0_val == 8192, rs1_w0_val == 134217728
// opcode: smin32 ; op1:x6; op2:x7; dest:x17; op1val:0xffffffef08000000;  op2val:0xfbffffff00002000
TEST_RR_OP(smin32, x17, x6, x7, 0x0000000000000000, 0xffffffef08000000, 0xfbffffff00002000, x22, 104, x12)

inst_14:
// rs1==x26, rs2==x14, rd==x7, rs2_w1_val == -16777217, rs1_w1_val == 4, rs2_w0_val == 4096
// opcode: smin32 ; op1:x26; op2:x14; dest:x7; op1val:0x00000400000005;  op2val:0xfeffffff00001000
TEST_RR_OP(smin32, x7, x26, x14, 0x0000000000000000, 0x00000400000005, 0xfeffffff00001000, x22, 112, x12)

inst_15:
// rs1==x16, rs2==x18, rd==x24, rs2_w1_val == -8388609, rs2_w0_val == 128, rs1_w0_val == -2097153
// opcode: smin32 ; op1:x16; op2:x18; dest:x24; op1val:0xfffffffaffdfffff;  op2val:0xff7fffff00000080
TEST_RR_OP(smin32, x24, x16, x18, 0x0000000000000000, 0xfffffffaffdfffff, 0xff7fffff00000080, x22, 120, x12)

inst_16:
// rs1==x2, rs2==x12, rd==x15, rs2_w1_val == -4194305, rs1_w0_val == -3, rs1_w1_val == 1048576, rs2_w0_val == -129
// opcode: smin32 ; op1:x2; op2:x12; dest:x15; op1val:0x100000fffffffd;  op2val:0xffbfffffffffff7f
TEST_RR_OP(smin32, x15, x2, x12, 0x0000000000000000, 0x100000fffffffd, 0xffbfffffffffff7f, x22, 128, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_17:
// rs1==x24, rs2==x19, rd==x10, rs2_w1_val == -2097153, rs1_w1_val == -16777217, rs1_w0_val == -8193, rs2_w0_val == -268435457
// opcode: smin32 ; op1:x24; op2:x19; dest:x10; op1val:0xfeffffffffffdfff;  op2val:0xffdfffffefffffff
TEST_RR_OP(smin32, x10, x24, x19, 0x0000000000000000, 0xfeffffffffffdfff, 0xffdfffffefffffff, x2, 0, x3)

inst_18:
// rs1==x8, rs2==x25, rd==x21, rs2_w1_val == -1048577, rs1_w0_val == 65536
// opcode: smin32 ; op1:x8; op2:x25; dest:x21; op1val:0xfffffffd00010000;  op2val:0xffefffff00001000
TEST_RR_OP(smin32, x21, x8, x25, 0x0000000000000000, 0xfffffffd00010000, 0xffefffff00001000, x2, 8, x3)

inst_19:
// rs1==x0, rs2==x26, rd==x31, rs2_w1_val == -524289, rs1_w1_val == 16
// opcode: smin32 ; op1:x0; op2:x26; dest:x31; op1val:0x000010fffffffd;  op2val:0xfff7fffffffffff6
TEST_RR_OP(smin32, x31, x0, x26, 0x0000000000000000, 0x000010fffffffd, 0xfff7fffffffffff6, x2, 16, x3)

inst_20:
// rs1==x12, rs2==x20, rd==x18, rs2_w1_val == -262145, rs2_w0_val == 131072, rs1_w0_val == -131073, rs1_w1_val == -257
// opcode: smin32 ; op1:x12; op2:x20; dest:x18; op1val:0xfffffefffffdffff;  op2val:0xfffbffff00020000
TEST_RR_OP(smin32, x18, x12, x20, 0x0000000000000000, 0xfffffefffffdffff, 0xfffbffff00020000, x2, 24, x3)

inst_21:
// rs1==x17, rs2==x22, rd==x23, rs2_w1_val == -131073, rs1_w1_val == 33554432, rs1_w0_val == -17
// opcode: smin32 ; op1:x17; op2:x22; dest:x23; op1val:0x2000000ffffffef;  op2val:0xfffdffff00001000
TEST_RR_OP(smin32, x23, x17, x22, 0x0000000000000000, 0x2000000ffffffef, 0xfffdffff00001000, x2, 32, x3)

inst_22:
// rs1==x25, rs2==x16, rd==x22, rs2_w1_val == -65537, rs1_w0_val == 16384
// opcode: smin32 ; op1:x25; op2:x16; dest:x22; op1val:0x2000000000004000;  op2val:0xfffefffffffeffff
TEST_RR_OP(smin32, x22, x25, x16, 0x0000000000000000, 0x2000000000004000, 0xfffefffffffeffff, x2, 40, x3)

inst_23:
// rs1==x7, rs2==x8, rd==x14, rs2_w1_val == -32769, rs2_w0_val == 134217728
// opcode: smin32 ; op1:x7; op2:x8; dest:x14; op1val:0xffffffeffffffff6;  op2val:0xffff7fff08000000
TEST_RR_OP(smin32, x14, x7, x8, 0x0000000000000000, 0xffffffeffffffff6, 0xffff7fff08000000, x2, 48, x3)

inst_24:
// rs1==x13, rs2==x15, rd==x0, rs2_w1_val == -16385, rs1_w1_val == 2048
// opcode: smin32 ; op1:x13; op2:x15; dest:x0; op1val:0x00080080000000;  op2val:0xffffbffffffdffff
TEST_RR_OP(smin32, x0, x13, x15, 0x0000000000000000, 0x00080080000000, 0xffffbffffffdffff, x2, 56, x3)

inst_25:
// rs1==x18, rs2==x27, rd==x26, rs2_w1_val == -8193, rs1_w1_val == -33
// opcode: smin32 ; op1:x18; op2:x27; dest:x26; op1val:0xffffffdf04000000;  op2val:0xffffdfffffffefff
TEST_RR_OP(smin32, x26, x18, x27, 0x0000000000000000, 0xffffffdf04000000, 0xffffdfffffffefff, x2, 64, x3)

inst_26:
// rs1==x27, rs2==x0, rd==x30, rs2_w1_val == -2049, rs2_w0_val == -513, rs1_w1_val == -2049
// opcode: smin32 ; op1:x27; op2:x0; dest:x30; op1val:0xfffff7ff00000009;  op2val:0xfffff7fffffffdff
TEST_RR_OP(smin32, x30, x27, x0, 0x0000000000000000, 0xfffff7ff00000009, 0xfffff7fffffffdff, x2, 72, x3)

inst_27:
// rs1==x28, rs2==x24, rd==x20, rs2_w1_val == -513, rs1_w1_val == 16384, rs2_w0_val == -3
// opcode: smin32 ; op1:x28; op2:x24; dest:x20; op1val:0x004000c0000000;  op2val:0xfffffdfffffffffd
TEST_RR_OP(smin32, x20, x28, x24, 0x0000000000000000, 0x004000c0000000, 0xfffffdfffffffffd, x2, 80, x3)

inst_28:
// rs1==x22, rs2==x31, rd==x25, rs2_w1_val == -257, rs1_w1_val == 131072
// opcode: smin32 ; op1:x22; op2:x31; dest:x25; op1val:0x02000080000000;  op2val:0xfffffeffffffffdf
TEST_RR_OP(smin32, x25, x22, x31, 0x0000000000000000, 0x02000080000000, 0xfffffeffffffffdf, x2, 88, x3)

inst_29:
// rs1==x15, rs2==x9, rd==x5, rs2_w1_val == -129, rs2_w0_val == -1, rs1_w0_val == 4096
// opcode: smin32 ; op1:x15; op2:x9; dest:x5; op1val:0x00000900001000;  op2val:0xffffff7fffffffff
TEST_RR_OP(smin32, x5, x15, x9, 0x0000000000000000, 0x00000900001000, 0xffffff7fffffffff, x2, 96, x3)

inst_30:
// rs1==x30, rs2==x13, rd==x12, rs2_w1_val == -65, rs2_w0_val == 4, rs1_w1_val == 256
// opcode: smin32 ; op1:x30; op2:x13; dest:x12; op1val:0x000100ffffffef;  op2val:0xffffffbf00000004
TEST_RR_OP(smin32, x12, x30, x13, 0x0000000000000000, 0x000100ffffffef, 0xffffffbf00000004, x2, 104, x3)

inst_31:
// rs1==x31, rs2_w1_val == -33, rs1_w0_val == 33554432, rs2_w0_val == -524289
// opcode: smin32 ; op1:x31; op2:x20; dest:x25; op1val:0xffffffef02000000;  op2val:0xffffffdffff7ffff
TEST_RR_OP(smin32, x25, x31, x20, 0x0000000000000000, 0xffffffef02000000, 0xffffffdffff7ffff, x2, 112, x3)

inst_32:
// rs2==x1, rs2_w1_val == -17, rs1_w0_val == -513, rs1_w1_val == 32768
// opcode: smin32 ; op1:x5; op2:x1; dest:x17; op1val:0x008000fffffdff;  op2val:0xffffffeffffffffa
TEST_RR_OP(smin32, x17, x5, x1, 0x0000000000000000, 0x008000fffffdff, 0xffffffeffffffffa, x2, 120, x3)

inst_33:
// rd==x1, rs2_w1_val == -9, rs1_w0_val == 0
// opcode: smin32 ; op1:x28; op2:x25; dest:x1; op1val:0xfffeffff00000000;  op2val:0xfffffff7c0000000
TEST_RR_OP(smin32, x1, x28, x25, 0x0000000000000000, 0xfffeffff00000000, 0xfffffff7c0000000, x2, 128, x3)

inst_34:
// rs2_w1_val == -5, rs1_w0_val == -9, rs2_w0_val == -9
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000fffffff7;  op2val:0xfffffffbfffffff7
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x20000000fffffff7, 0xfffffffbfffffff7, x2, 136, x3)

inst_35:
// rs2_w1_val == -3, rs2_w0_val == -1048577
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010008000000;  op2val:0xfffffffdffefffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x00010008000000, 0xfffffffdffefffff, x2, 144, x1)

inst_36:
// rs2_w1_val == -2, rs1_w1_val == -2
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00001000;  op2val:0xfffffffefffffffa
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffffffe00001000, 0xfffffffefffffffa, x2, 152, x1)

inst_37:
// rs2_w1_val == -2147483648, rs1_w0_val == -67108865, rs2_w0_val == -257
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x3ffffffffbffffff;  op2val:0x80000000fffffeff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x3ffffffffbffffff, 0x80000000fffffeff, x2, 160, x1)

inst_38:
// rs2_w1_val == 1073741824, rs1_w1_val == -134217729, rs1_w0_val == -8388609
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffff7fffff;  op2val:0x40000000ffffefff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xf7ffffffff7fffff, 0x40000000ffffefff, x2, 168, x1)

inst_39:
// rs2_w1_val == 536870912, rs1_w1_val == -524289
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffffffffff9;  op2val:0x20000000ffffffbf
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfff7fffffffffff9, 0x20000000ffffffbf, x2, 176, x1)

inst_40:
// rs2_w1_val == 268435456, rs2_w0_val == -16385, rs1_w0_val == 32
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000020;  op2val:0x10000000ffffbfff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000020, 0x10000000ffffbfff, x2, 184, x1)

inst_41:
// rs2_w1_val == 134217728, rs1_w0_val == 2147483647
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000007fffffff;  op2val:0x8000000fffffdff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x1000007fffffff, 0x8000000fffffdff, x2, 192, x1)

inst_42:
// rs2_w1_val == 67108864, rs1_w1_val == -16385, rs2_w0_val == 1
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffdfffff;  op2val:0x400000000000001
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xffffbfffffdfffff, 0x400000000000001, x2, 200, x1)

inst_43:
// rs2_w1_val == 33554432, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000ff7fffff;  op2val:0x2000000fffffff7
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x20000000ff7fffff, 0x2000000fffffff7, x2, 208, x1)

inst_44:
// rs2_w1_val == 16777216, rs1_w1_val == -4097, rs2_w0_val == -8388609, rs1_w0_val == -129
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffffff7f;  op2val:0x1000000ff7fffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xffffefffffffff7f, 0x1000000ff7fffff, x2, 216, x1)

inst_45:
// rs2_w1_val == 8388608, rs1_w0_val == 1431655765
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff55555555;  op2val:0x80000000000080
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xffffffff55555555, 0x80000000000080, x2, 224, x1)

inst_46:
// rs2_w1_val == 4194304, rs2_w0_val == -1025
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00001000;  op2val:0x400000fffffbff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00001000, 0x400000fffffbff, x2, 232, x1)

inst_47:
// rs2_w1_val == 2097152, rs1_w1_val == 65536, rs1_w0_val == 262144
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000000040000;  op2val:0x20000000000009
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x01000000040000, 0x20000000000009, x2, 240, x1)

inst_48:
// rs2_w1_val == 1048576, rs1_w0_val == -16777217
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffeffffeffffff;  op2val:0x100000ffbfffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xffffeffffeffffff, 0x100000ffbfffff, x2, 248, x1)

inst_49:
// rs2_w1_val == 524288, rs1_w1_val == -1025
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff08000000;  op2val:0x080000fffffff8
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffffbff08000000, 0x080000fffffff8, x2, 256, x1)

inst_50:
// rs2_w1_val == 262144, rs2_w0_val == 2147483647
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x200000000010000;  op2val:0x0400007fffffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x200000000010000, 0x0400007fffffff, x2, 264, x1)

inst_51:
// rs2_w1_val == 131072, rs1_w0_val == 2097152, rs2_w0_val == 16
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000200000;  op2val:0x02000000000010
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x00080000200000, 0x02000000000010, x2, 272, x1)

inst_52:
// rs2_w1_val == 65536, rs1_w0_val == 131072, rs2_w0_val == 512, rs1_w1_val == 2
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000200020000;  op2val:0x01000000000200
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x00000200020000, 0x01000000000200, x2, 280, x1)

inst_53:
// rs1_w0_val == 16777216, rs1_w1_val == 0
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000001000000;  op2val:0xc0000000ffffffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x00000001000000, 0xc0000000ffffffff, x2, 288, x1)

inst_54:
// rs1_w0_val == 8388608, rs2_w0_val == 268435456
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000800000;  op2val:0xaaaaaaaa10000000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x00080000800000, 0xaaaaaaaa10000000, x2, 296, x1)

inst_55:
// rs1_w0_val == 4194304, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00400000;  op2val:0x000007ffbfffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00400000, 0x000007ffbfffff, x2, 304, x1)

inst_56:
// rs1_w0_val == 1048576, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff00100000;  op2val:0x2000000fff7ffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffeffff00100000, 0x2000000fff7ffff, x2, 312, x1)

inst_57:
// rs1_w0_val == 524288, rs2_w0_val == 2
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000080000;  op2val:0xfffbffff00000002
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x10000000080000, 0xfffbffff00000002, x2, 320, x1)

inst_58:
// rs1_w0_val == 32768, rs2_w0_val == 1431655765
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff00008000;  op2val:0xfffffffe55555555
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfdffffff00008000, 0xfffffffe55555555, x2, 328, x1)

inst_59:
// rs1_w0_val == 8192, rs2_w0_val == -1431655766, rs2_w1_val == 512
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00001000002000;  op2val:0x000200aaaaaaaa
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x00001000002000, 0x000200aaaaaaaa, x2, 336, x1)

inst_60:
// rs1_w0_val == 2048, rs1_w1_val == 32
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000800;  op2val:0x010000fffffffa
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x00002000000800, 0x010000fffffffa, x2, 344, x1)

inst_61:
// rs1_w0_val == 1024, rs2_w0_val == 32768, rs2_w1_val == 1024
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000400;  op2val:0x00040000008000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x20000000000400, 0x00040000008000, x2, 352, x1)

inst_62:
// rs1_w0_val == 512, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00000200;  op2val:0x000006ffffff7f
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000200, 0x000006ffffff7f, x2, 360, x1)

inst_63:
// rs1_w0_val == 256, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000100;  op2val:0xff7fffff00000010
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x20000000000100, 0xff7fffff00000010, x2, 368, x1)

inst_64:
// rs1_w0_val == 128, rs1_w1_val == 1431655765, rs2_w1_val == 32768
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000080;  op2val:0x008000fff7ffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x5555555500000080, 0x008000fff7ffff, x2, 376, x1)

inst_65:
// rs1_w0_val == 16, rs1_w1_val == 512, rs2_w1_val == 2
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00020000000010;  op2val:0x000002fffffeff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x00020000000010, 0x000002fffffeff, x2, 384, x1)

inst_66:
// rs1_w0_val == 8, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00010000000008;  op2val:0xfffffffa00000005
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x00010000000008, 0xfffffffa00000005, x2, 392, x1)

inst_67:
// rs1_w0_val == 4, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000004;  op2val:0xaaaaaaaaffffffbf
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x00080000000004, 0xaaaaaaaaffffffbf, x2, 400, x1)

inst_68:
// rs1_w0_val == 2, rs1_w1_val == 4194304, rs2_w0_val == -2097153
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000002;  op2val:0xfbffffffffdfffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x40000000000002, 0xfbffffffffdfffff, x2, 408, x1)

inst_69:
// rs1_w0_val == 1, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xc000000000000001;  op2val:0x020000fffffffc
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xc000000000000001, 0x020000fffffffc, x2, 416, x1)

inst_70:
// rs1_w0_val == -1, rs2_w0_val == -2147483648
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffffffff;  op2val:0x00000980000000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xffffffefffffffff, 0x00000980000000, x2, 424, x1)

inst_71:
// rs2_w1_val == 16384, rs2_w0_val == 32
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9c0000000;  op2val:0x00400000000020
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffffff9c0000000, 0x00400000000020, x2, 432, x1)

inst_72:
// rs2_w1_val == 8192, rs2_w0_val == 2097152
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00080000000200;  op2val:0x00200000200000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x00080000000200, 0x00200000200000, x2, 440, x1)

inst_73:
// rs2_w1_val == 4096, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600001000;  op2val:0x001000efffffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x00000600001000, 0x001000efffffff, x2, 448, x1)

inst_74:
// rs2_w1_val == 2048, rs1_w1_val == -8388609
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffffffffffa;  op2val:0x000800ffdfffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xff7ffffffffffffa, 0x000800ffdfffff, x2, 456, x1)

inst_75:
// rs2_w1_val == 256, rs2_w0_val == 8388608, rs1_w1_val == -262145
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000100;  op2val:0x00010000800000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000100, 0x00010000800000, x2, 464, x1)

inst_76:
// rs2_w1_val == 128, rs1_w0_val == -65537
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffffffffeffff;  op2val:0x00008000004000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xf7fffffffffeffff, 0x00008000004000, x2, 472, x1)

inst_77:
// rs2_w1_val == 64, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000300001000;  op2val:0x000040fffffff9
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x00000300001000, 0x000040fffffff9, x2, 480, x1)

inst_78:
// rs2_w1_val == 32, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf00000008;  op2val:0x00002000000002
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xffffffdf00000008, 0x00002000000002, x2, 488, x1)

inst_79:
// rs2_w1_val == 16, rs1_w0_val == -33
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004ffffffdf;  op2val:0x00001000000004
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x000004ffffffdf, 0x00001000000004, x2, 496, x1)

inst_80:
// rs2_w1_val == 8, rs1_w1_val == -536870913
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffbfffff;  op2val:0x000008ffffffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xdfffffffffbfffff, 0x000008ffffffff, x2, 504, x1)

inst_81:
// rs2_w1_val == 4, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x01000055555555;  op2val:0x000004fffffff8
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x01000055555555, 0x000004fffffff8, x2, 512, x1)

inst_82:
// rs2_w1_val == 1, rs2_w0_val == -17
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00002000020000;  op2val:0x000001ffffffef
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x00002000020000, 0x000001ffffffef, x2, 520, x1)

inst_83:
// rs2_w1_val == 0, rs1_w1_val == 262144
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x04000000000800;  op2val:0x00000055555555
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x04000000000800, 0x00000055555555, x2, 528, x1)

inst_84:
// rs2_w1_val == -1, rs1_w0_val == -2049
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x400000fffff7ff;  op2val:0xffffffff7fffffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x400000fffff7ff, 0xffffffff7fffffff, x2, 536, x1)

inst_85:
// rs2_w0_val == -1073741825, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd00000200;  op2val:0xfffffdffbfffffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffffffd00000200, 0xfffffdffbfffffff, x2, 544, x1)

inst_86:
// rs2_w0_val == -536870913, rs1_w1_val == -513
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00800000;  op2val:0xfffdffffdfffffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffffdff00800000, 0xfffdffffdfffffff, x2, 552, x1)

inst_87:
// rs2_w0_val == 262144, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x000004ffffffef;  op2val:0x00800000040000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x000004ffffffef, 0x00800000040000, x2, 560, x1)

inst_88:
// rs2_w0_val == 65536, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x000005fffffff7;  op2val:0xffefffff00010000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x000005fffffff7, 0xffefffff00010000, x2, 568, x1)

inst_89:
// rs2_w0_val == 2048, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x040000ffdfffff;  op2val:0xdfffffff00000800
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x040000ffdfffff, 0xdfffffff00000800, x2, 576, x1)

inst_90:
// rs2_w0_val == 1024, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x000007ffffffbf;  op2val:0xfffffffe00000400
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x000007ffffffbf, 0xfffffffe00000400, x2, 584, x1)

inst_91:
// rs2_w0_val == 256, rs1_w0_val == -16385
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffbfff;  op2val:0x800000000000100
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffbfff, 0x800000000000100, x2, 592, x1)

inst_92:
// rs2_w0_val == 64, rs1_w1_val == 1024
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00040000000001;  op2val:0x10000000000040
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x00040000000001, 0x10000000000040, x2, 600, x1)

inst_93:
// rs2_w0_val == 8, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff08000000;  op2val:0xfbffffff00000008
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffbffff08000000, 0xfbffffff00000008, x2, 608, x1)

inst_94:
// rs1_w1_val == -1431655766, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa3fffffff;  op2val:0x00001000000002
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaa3fffffff, 0x00001000000002, x2, 616, x1)

inst_95:
// rs1_w1_val == -1073741825, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000100;  op2val:0xfffffff908000000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000100, 0xfffffff908000000, x2, 624, x1)

inst_96:
// rs1_w1_val == -67108865, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff00000004;  op2val:0x00000700000003
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfbffffff00000004, 0x00000700000003, x2, 632, x1)

inst_97:
// rs1_w1_val == -2097153, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffffffffdff;  op2val:0xdfffffff00000080
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xffdffffffffffdff, 0xdfffffff00000080, x2, 640, x1)

inst_98:
// rs1_w1_val == -1048577, rs1_w0_val == -5
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffffffffffffb;  op2val:0x55555555fffffff7
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xffeffffffffffffb, 0x55555555fffffff7, x2, 648, x1)

inst_99:
// rs1_w1_val == -131073, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff00000005;  op2val:0x00100000000800
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffdffff00000005, 0x00100000000800, x2, 656, x1)

inst_100:
// rs1_w1_val == -8193, rs2_w0_val == -2049
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff00100000;  op2val:0xfffffff7fffff7ff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xffffdfff00100000, 0xfffffff7fffff7ff, x2, 664, x1)

inst_101:
// rs1_w1_val == -129, rs2_w0_val == -33554433
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f40000000;  op2val:0xff7ffffffdffffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xffffff7f40000000, 0xff7ffffffdffffff, x2, 672, x1)

inst_102:
// rs1_w1_val == -65, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffffffef;  op2val:0xfffffffd00000001
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xffffffbfffffffef, 0xfffffffd00000001, x2, 680, x1)

inst_103:
// rs1_w1_val == -9, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000007;  op2val:0x40000000ffffffef
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffffff700000007, 0x40000000ffffffef, x2, 688, x1)

inst_104:
// rs1_w1_val == -5, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00000080;  op2val:0xfffffff600800000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffffffb00000080, 0xfffffff600800000, x2, 696, x1)

inst_105:
// rs1_w1_val == -2147483648, rs1_w0_val == -33554433
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000000fdffffff;  op2val:0x000001fffdffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x80000000fdffffff, 0x000001fffdffff, x2, 704, x1)

inst_106:
// rs1_w1_val == 1073741824, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffffff9;  op2val:0x00100000010000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x40000000fffffff9, 0x00100000010000, x2, 712, x1)

inst_107:
// rs1_w1_val == 268435456, rs1_w0_val == -536870913
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x10000000dfffffff;  op2val:0xfeffffff00000400
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x10000000dfffffff, 0xfeffffff00000400, x2, 720, x1)

inst_108:
// rs1_w1_val == 134217728, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x800000000080000;  op2val:0x10000000000008
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x800000000080000, 0x10000000000008, x2, 728, x1)

inst_109:
// rs1_w1_val == 67108864, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffffffd;  op2val:0xbfffffff00000040
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x4000000fffffffd, 0xbfffffff00000040, x2, 736, x1)

inst_110:
// rs1_w1_val == 8388608, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x80000008000000;  op2val:0xffffffdfffffffef
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x80000008000000, 0xffffffdfffffffef, x2, 744, x1)

inst_111:
// rs1_w1_val == 524288, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x080000fffdffff;  op2val:0xffffbfff00000007
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x080000fffdffff, 0xffffbfff00000007, x2, 752, x1)

inst_112:
// rs1_w1_val == 4096, rs2_w0_val == -2
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x001000fffffff7;  op2val:0x000000fffffffe
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x001000fffffff7, 0x000000fffffffe, x2, 760, x1)

inst_113:
// rs1_w1_val == 128, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x000080ff7fffff;  op2val:0x04000000000000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x000080ff7fffff, 0x04000000000000, x2, 768, x1)

inst_114:
// rs1_w1_val == 64, rs2_w0_val == 33554432
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x000040dfffffff;  op2val:0x00000502000000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x000040dfffffff, 0x00000502000000, x2, 776, x1)

inst_115:
// rs1_w1_val == 8, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000820000000;  op2val:0xfffffff600010000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x00000820000000, 0xfffffff600010000, x2, 784, x1)

inst_116:
// rs1_w1_val == 1, rs1_w0_val == -1025
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffffbff;  op2val:0xffbfffff00200000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x000001fffffbff, 0xffbfffff00200000, x2, 792, x1)

inst_117:
// rs2_w0_val == -134217729, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff00100000;  op2val:0x1000000f7ffffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xffff7fff00100000, 0x1000000f7ffffff, x2, 800, x1)

inst_118:
// rs2_w0_val == -67108865, rs1_w0_val == -257
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x000400fffffeff;  op2val:0xfffffbfffbffffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x000400fffffeff, 0xfffffbfffbffffff, x2, 808, x1)

inst_119:
// rs1_w0_val == -1431655766, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x000200aaaaaaaa;  op2val:0x80000000efffffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x000200aaaaaaaa, 0x80000000efffffff, x2, 816, x1)

inst_120:
// rs2_w0_val == -16777217, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000010;  op2val:0x000009feffffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x1000000000000010, 0x000009feffffff, x2, 824, x1)

inst_121:
// rs1_w0_val == -1073741825, rs2_w0_val == 1048576
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffbfffffff;  op2val:0x8000000000100000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffbffffbfffffff, 0x8000000000100000, x2, 832, x1)

inst_122:
// rs1_w0_val == -268435457, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x3fffffffefffffff;  op2val:0x55555555f7ffffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x3fffffffefffffff, 0x55555555f7ffffff, x2, 840, x1)

inst_123:
// rs2_w0_val == -262145, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff00000001;  op2val:0x8000000fffbffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xffefffff00000001, 0x8000000fffbffff, x2, 848, x1)

inst_124:
// rs2_w0_val == -32769, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00000001;  op2val:0x3fffffffffff7fff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffffffa00000001, 0x3fffffffffff7fff, x2, 856, x1)

inst_125:
// rs2_w0_val == -8193, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff00800000;  op2val:0xfffffff6ffffdfff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xefffffff00800000, 0xfffffff6ffffdfff, x2, 864, x1)

inst_126:
// rs1_w0_val == -1048577, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffefffff;  op2val:0xf7ffffff00800000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfbffffffffefffff, 0xf7ffffff00800000, x2, 872, x1)

inst_127:
// rs1_w0_val == -524289, rs2_w0_val == 536870912
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffff7ffff;  op2val:0x00000720000000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffffbfffff7ffff, 0x00000720000000, x2, 880, x1)

inst_128:
// rs2_w0_val == 16777216, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff02000000;  op2val:0xfffffffd01000000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xffffbfff02000000, 0xfffffffd01000000, x2, 888, x1)

inst_129:
// rs2_w0_val == 4194304, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700000008;  op2val:0xfffffff800400000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffffff700000008, 0xfffffff800400000, x2, 896, x1)

inst_130:
// rs2_w0_val == 1073741824, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000600000800;  op2val:0xfff7ffff40000000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x00000600000800, 0xfff7ffff40000000, x2, 904, x1)

inst_131:
// rs1_w0_val == -262145, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x40000000fffbffff;  op2val:0xffffeffffffff7ff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x40000000fffbffff, 0xffffeffffffff7ff, x2, 912, x1)

inst_132:
// rs2_w0_val == 67108864, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x000009fffffffb;  op2val:0x00000004000000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x000009fffffffb, 0x00000004000000, x2, 920, x1)

inst_133:
// rs1_w0_val == -2, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffffffffe;  op2val:0x1000000000100000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xffffffeffffffffe, 0x1000000000100000, x2, 928, x1)

inst_134:
// rs1_w0_val == 268435456, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x100000010000000;  op2val:0xff7fffff80000000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x100000010000000, 0xff7fffff80000000, x2, 936, x1)

inst_135:
// rs2_w0_val == 524288, 
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0x00000102000000;  op2val:0xfffffffa00080000
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0x00000102000000, 0xfffffffa00080000, x2, 944, x1)

inst_136:
// rs1_w1_val < 0 and rs2_w1_val < 0, rs2_w0_val == -131073, rs2_w1_val == -33554433, rs1_w1_val == -3
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdc0000000;  op2val:0xfdfffffffffdffff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffffffdc0000000, 0xfdfffffffffdffff, x2, 952, x1)

inst_137:
// rs2_w1_val == -2049, rs2_w0_val == -513, rs1_w1_val == -2049
// opcode: smin32 ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff00000009;  op2val:0xfffff7fffffffdff
TEST_RR_OP(smin32, x31, x30, x29, 0x0000000000000000, 0xfffff7ff00000009, 0xfffff7fffffffdff, x2, 960, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x22_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x22_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 121*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
