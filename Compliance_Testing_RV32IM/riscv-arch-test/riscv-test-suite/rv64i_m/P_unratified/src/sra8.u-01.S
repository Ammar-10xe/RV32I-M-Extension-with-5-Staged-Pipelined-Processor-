
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sra8.u instruction of the RISC-V RV64PZicsr extension for the sra8.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sra8.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x8,signature_x8_1)

inst_0:
// rs1 == rd != rs2, rs1==x10, rs2==x31, rd==x10, rs2_val == 5, rs1_b6_val == -1, rs1_b7_val == 4, rs1_b0_val == -65
// opcode: sra8.u ; op1:x10; op2:x31; dest:x10; op1val:0x4fff8c003fcc0bf;  op2val:0x5
TEST_RR_OP(sra8.u, x10, x10, x31, 0x0000000000000000, 0x4fff8c003fcc0bf, 0x5, x8, 0, x11)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x13, rd==x21, rs2_val == 3, rs1_b0_val == 4, rs1_b4_val == 85, rs1_b7_val == 85, rs1_b1_val == 2, rs1_b3_val == -2
// opcode: sra8.u ; op1:x28; op2:x13; dest:x21; op1val:0x55f93f55fef90204;  op2val:0x3
TEST_RR_OP(sra8.u, x21, x28, x13, 0x0000000000000000, 0x55f93f55fef90204, 0x3, x8, 8, x11)

inst_2:
// rs1 == rs2 != rd, rs1==x20, rs2==x20, rd==x7, rs2_val == 6, rs1_b0_val == -9, rs1_b6_val == -65, rs1_b1_val == -5, rs1_b4_val == 16
// opcode: sra8.u ; op1:x20; op2:x20; dest:x7; op1val:0x55bf03100905fbf7;  op2val:0x6
TEST_RR_OP(sra8.u, x7, x20, x20, 0x0000000000000000, 0x55bf03100905fbf7, 0x6, x8, 16, x11)

inst_3:
// rs1 == rs2 == rd, rs1==x16, rs2==x16, rd==x16, rs2_val == 4, rs1_b1_val == 4, rs1_b5_val == -3
// opcode: sra8.u ; op1:x16; op2:x16; dest:x16; op1val:0xc0bffd55fafa04f9;  op2val:0x4
TEST_RR_OP(sra8.u, x16, x16, x16, 0x0000000000000000, 0xc0bffd55fafa04f9, 0x4, x8, 24, x11)

inst_4:
// rs2 == rd != rs1, rs1==x6, rs2==x28, rd==x28, rs2_val == 2, rs1_b6_val == 16, rs1_b7_val == 127, rs1_b1_val == 32, rs1_b4_val == 8, rs1_b3_val == 127
// opcode: sra8.u ; op1:x6; op2:x28; dest:x28; op1val:0x7f1005087f0620f8;  op2val:0x2
TEST_RR_OP(sra8.u, x28, x6, x28, 0x0000000000000000, 0x7f1005087f0620f8, 0x2, x8, 32, x11)

inst_5:
// rs1==x30, rs2==x23, rd==x26, rs2_val == 1, rs1_b3_val == 8, rs1_b6_val == 1, rs1_b4_val == 127
// opcode: sra8.u ; op1:x30; op2:x23; dest:x26; op1val:0xc001f97f083fc007;  op2val:0x1
TEST_RR_OP(sra8.u, x26, x30, x23, 0x0000000000000000, 0xc001f97f083fc007, 0x1, x8, 40, x11)

inst_6:
// rs1==x15, rs2==x4, rd==x13, rs1_b7_val == -86, rs1_b2_val == 2, rs1_b4_val == -2
// opcode: sra8.u ; op1:x15; op2:x4; dest:x13; op1val:0xaa053ffe7f0206fc;  op2val:0xa
TEST_RR_OP(sra8.u, x13, x15, x4, 0x0000000000000000, 0xaa053ffe7f0206fc, 0xa, x8, 48, x11)

inst_7:
// rs1==x25, rs2==x21, rd==x14, rs1_b7_val == -65, rs1_b5_val == 8, rs1_b6_val == -17
// opcode: sra8.u ; op1:x25; op2:x21; dest:x14; op1val:0xbfef08c0fe3f07bf;  op2val:0x12
TEST_RR_OP(sra8.u, x14, x25, x21, 0x0000000000000000, 0xbfef08c0fe3f07bf, 0x12, x8, 56, x11)

inst_8:
// rs1==x5, rs2==x24, rd==x3, rs1_b7_val == -33, rs1_b3_val == -3, rs1_b1_val == -17, rs1_b0_val == 64, rs1_b6_val == -33
// opcode: sra8.u ; op1:x5; op2:x24; dest:x3; op1val:0xdfdff808fd06ef40;  op2val:0x6
TEST_RR_OP(sra8.u, x3, x5, x24, 0x0000000000000000, 0xdfdff808fd06ef40, 0x6, x8, 64, x11)

inst_9:
// rs1==x9, rs2==x25, rd==x0, rs1_b7_val == -17, rs1_b6_val == -9, rs1_b2_val == -5, rs1_b5_val == 127, rs1_b3_val == 32
// opcode: sra8.u ; op1:x9; op2:x25; dest:x0; op1val:0xeff77ff920fb06bf;  op2val:0x6
TEST_RR_OP(sra8.u, x0, x9, x25, 0x0000000000000000, 0xeff77ff920fb06bf, 0x6, x8, 72, x11)

inst_10:
// rs1==x26, rs2==x22, rd==x17, rs1_b7_val == -9, rs1_b1_val == -65, rs1_b5_val == -33, rs1_b4_val == -65
// opcode: sra8.u ; op1:x26; op2:x22; dest:x17; op1val:0xf7bfdfbffa07bfc0;  op2val:0x13
TEST_RR_OP(sra8.u, x17, x26, x22, 0x0000000000000000, 0xf7bfdfbffa07bfc0, 0x13, x8, 80, x11)

inst_11:
// rs1==x7, rs2==x18, rd==x23, rs1_b7_val == -5, rs1_b6_val == -2, rs1_b1_val == -128, rs1_b4_val == 4, rs1_b5_val == -65, rs1_b2_val == -2
// opcode: sra8.u ; op1:x7; op2:x18; dest:x23; op1val:0xfbfebf0405fe8007;  op2val:0x13
TEST_RR_OP(sra8.u, x23, x7, x18, 0x0000000000000000, 0xfbfebf0405fe8007, 0x13, x8, 88, x11)

inst_12:
// rs1==x18, rs2==x3, rd==x5, rs1_b7_val == -3, rs1_b2_val == -9, rs1_b3_val == -1, rs1_b0_val == 2, rs1_b5_val == -86
// opcode: sra8.u ; op1:x18; op2:x3; dest:x5; op1val:0xfd07aa3ffff70502;  op2val:0x4
TEST_RR_OP(sra8.u, x5, x18, x3, 0x0000000000000000, 0xfd07aa3ffff70502, 0x4, x8, 96, x11)

inst_13:
// rs1==x14, rs2==x9, rd==x19, rs1_b7_val == -2, rs1_b2_val == 4, rs1_b4_val == 64, rs1_b3_val == 2
// opcode: sra8.u ; op1:x14; op2:x9; dest:x19; op1val:0xfe05084002042007;  op2val:0xf
TEST_RR_OP(sra8.u, x19, x14, x9, 0x0000000000000000, 0xfe05084002042007, 0xf, x8, 104, x11)

inst_14:
// rs1==x24, rs2==x12, rd==x30, rs1_b7_val == -128, rs1_b0_val == 127
// opcode: sra8.u ; op1:x24; op2:x12; dest:x30; op1val:0x8006fcfefe06fb7f;  op2val:0xf
TEST_RR_OP(sra8.u, x30, x24, x12, 0x0000000000000000, 0x8006fcfefe06fb7f, 0xf, x8, 112, x11)

inst_15:
// rs1==x17, rs2==x19, rd==x12, rs1_b7_val == 64, 
// opcode: sra8.u ; op1:x17; op2:x19; dest:x12; op1val:0x40c0dff9c0fafb06;  op2val:0xa
TEST_RR_OP(sra8.u, x12, x17, x19, 0x0000000000000000, 0x40c0dff9c0fafb06, 0xa, x8, 120, x11)

inst_16:
// rs1==x12, rs2==x1, rd==x2, rs1_b7_val == 32, rs1_b1_val == 0, rs1_b2_val == 16, rs1_b5_val == 85
// opcode: sra8.u ; op1:x12; op2:x1; dest:x2; op1val:0x20fa55fcfa1000c0;  op2val:0x5
TEST_RR_OP(sra8.u, x2, x12, x1, 0x0000000000000000, 0x20fa55fcfa1000c0, 0x5, x8, 128, x11)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_17:
// rs1==x3, rs2==x8, rd==x1, rs1_b7_val == 16, rs1_b6_val == -86, rs1_b4_val == -3
// opcode: sra8.u ; op1:x3; op2:x8; dest:x1; op1val:0x10aabffdfd07fbf8;  op2val:0x12
TEST_RR_OP(sra8.u, x1, x3, x8, 0x0000000000000000, 0x10aabffdfd07fbf8, 0x12, x9, 0, x10)

inst_18:
// rs1==x27, rs2==x15, rd==x8, rs1_b7_val == 8, rs1_b0_val == -128
// opcode: sra8.u ; op1:x27; op2:x15; dest:x8; op1val:0x8fabf07f9fa0280;  op2val:0x1
TEST_RR_OP(sra8.u, x8, x27, x15, 0x0000000000000000, 0x8fabf07f9fa0280, 0x1, x9, 8, x10)

inst_19:
// rs1==x29, rs2==x26, rd==x6, rs1_b7_val == 2, rs1_b2_val == -3, rs1_b5_val == -17, rs1_b0_val == -2, rs1_b4_val == -17
// opcode: sra8.u ; op1:x29; op2:x26; dest:x6; op1val:0x2c0efefc0fdf6fe;  op2val:0xf
TEST_RR_OP(sra8.u, x6, x29, x26, 0x0000000000000000, 0x2c0efefc0fdf6fe, 0xf, x9, 16, x10)

inst_20:
// rs1==x19, rs2==x2, rd==x25, rs1_b7_val == 1, rs1_b2_val == -86, rs1_b0_val == 0, rs1_b4_val == -1, rs1_b5_val == -2
// opcode: sra8.u ; op1:x19; op2:x2; dest:x25; op1val:0x1fcfefffeaa0000;  op2val:0xf
TEST_RR_OP(sra8.u, x25, x19, x2, 0x0000000000000000, 0x1fcfefffeaa0000, 0xf, x9, 24, x10)

inst_21:
// rs1==x1, rs2==x5, rd==x31, rs1_b7_val == 0, rs1_b6_val == -5, rs1_b4_val == -86, rs1_b2_val == 64, rs1_b0_val == -3
// opcode: sra8.u ; op1:x1; op2:x5; dest:x31; op1val:0xfb06aaf940effd;  op2val:0x11
TEST_RR_OP(sra8.u, x31, x1, x5, 0x0000000000000000, 0xfb06aaf940effd, 0x11, x9, 32, x10)

inst_22:
// rs1==x22, rs2==x30, rd==x20, rs1_b7_val == -1, rs1_b5_val == -5, rs1_b3_val == 1
// opcode: sra8.u ; op1:x22; op2:x30; dest:x20; op1val:0xff05fb7f0109fbf8;  op2val:0x3
TEST_RR_OP(sra8.u, x20, x22, x30, 0x0000000000000000, 0xff05fb7f0109fbf8, 0x3, x9, 40, x10)

inst_23:
// rs1==x21, rs2==x14, rd==x11, rs1_b6_val == 85, rs1_b0_val == -86, rs1_b3_val == 16
// opcode: sra8.u ; op1:x21; op2:x14; dest:x11; op1val:0x405508fd10c009aa;  op2val:0x4
TEST_RR_OP(sra8.u, x11, x21, x14, 0x0000000000000000, 0x405508fd10c009aa, 0x4, x9, 48, x10)

inst_24:
// rs1==x2, rs2==x7, rd==x27, rs1_b6_val == 127, rs1_b0_val == -5, rs1_b4_val == -128
// opcode: sra8.u ; op1:x2; op2:x7; dest:x27; op1val:0x67f558008fd00fb;  op2val:0x5
TEST_RR_OP(sra8.u, x27, x2, x7, 0x0000000000000000, 0x67f558008fd00fb, 0x5, x9, 56, x10)

inst_25:
// rs1==x23, rs2==x17, rd==x15, rs1_b6_val == -3, rs1_b3_val == -17
// opcode: sra8.u ; op1:x23; op2:x17; dest:x15; op1val:0x9fd09ffef07fbfb;  op2val:0x3
TEST_RR_OP(sra8.u, x15, x23, x17, 0x0000000000000000, 0x9fd09ffef07fbfb, 0x3, x9, 64, x10)

inst_26:
// rs1==x13, rs2==x11, rd==x24, rs1_b6_val == -128, rs1_b1_val == 127, rs1_b3_val == -33, rs1_b0_val == 85, rs1_b4_val == 32
// opcode: sra8.u ; op1:x13; op2:x11; dest:x24; op1val:0x5800520dffc7f55;  op2val:0x3
TEST_RR_OP(sra8.u, x24, x13, x11, 0x0000000000000000, 0x5800520dffc7f55, 0x3, x9, 72, x10)

inst_27:
// rs1==x8, rs2==x0, rd==x4, rs1_b6_val == 64, rs1_b5_val == 32
// opcode: sra8.u ; op1:x8; op2:x0; dest:x4; op1val:0x64020051007f8bf;  op2val:0x0
TEST_RR_OP(sra8.u, x4, x8, x0, 0x0000000000000000, 0x64020051007f8bf, 0x0, x9, 80, x10)

inst_28:
// rs1==x0, rs2==x27, rd==x22, rs1_b1_val == -33, rs1_b2_val == -65, rs1_b6_val == 32
// opcode: sra8.u ; op1:x0; op2:x27; dest:x22; op1val:0xaa20fe80fcbfdf7f;  op2val:0x3
TEST_RR_OP(sra8.u, x22, x0, x27, 0x0000000000000000, 0xaa20fe80fcbfdf7f, 0x3, x9, 88, x10)

inst_29:
// rs1==x4, rs2==x29, rd==x18, rs1_b1_val == -9, rs1_b2_val == -128
// opcode: sra8.u ; op1:x4; op2:x29; dest:x18; op1val:0xaa7f0680c080f7f7;  op2val:0xb
TEST_RR_OP(sra8.u, x18, x4, x29, 0x0000000000000000, 0xaa7f0680c080f7f7, 0xb, x9, 96, x10)

inst_30:
// rs1==x31, rs2==x10, rd==x29, rs1_b1_val == -3, 
// opcode: sra8.u ; op1:x31; op2:x10; dest:x29; op1val:0xf9fd0507c004fd03;  op2val:0xb
TEST_RR_OP(sra8.u, x29, x31, x10, 0x0000000000000000, 0xf9fd0507c004fd03, 0xb, x9, 104, x2)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x11, rs2==x6, rd==x9, rs1_b1_val == -2, rs1_b4_val == 1
// opcode: sra8.u ; op1:x11; op2:x6; dest:x9; op1val:0xfdf60901fdf9fe80;  op2val:0x7
TEST_RR_OP(sra8.u, x9, x11, x6, 0x0000000000000000, 0xfdf60901fdf9fe80, 0x7, x1, 0, x2)

inst_32:
// rs1_b1_val == 64, rs1_b5_val == -9
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x340f7207ffa403f;  op2val:0x7
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0x340f7207ffa403f, 0x7, x1, 8, x2)

inst_33:
// rs1_b1_val == 16, rs1_b3_val == 0, rs1_b2_val == -17
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7fc3ffe00ef1000;  op2val:0x10
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0xf7fc3ffe00ef1000, 0x10, x1, 16, x2)

inst_34:
// rs1_b1_val == 8, rs1_b0_val == 8
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xbff609c0feef0808;  op2val:0x0
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0xbff609c0feef0808, 0x0, x1, 24, x2)

inst_35:
// rs1_b1_val == 1, rs1_b5_val == -128, rs1_b2_val == 127
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x5df8009037f01c0;  op2val:0x4
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0x5df8009037f01c0, 0x4, x1, 32, x2)

inst_36:
// rs1_b1_val == -1, rs1_b3_val == -128
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xaabff68003ff03;  op2val:0x3
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0xaabff68003ff03, 0x3, x1, 40, x2)

inst_37:
// rs1_b0_val == -33, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdef0309fcfbf6df;  op2val:0x3
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0xfdef0309fcfbf6df, 0x3, x1, 48, x2)

inst_38:
// rs1_b0_val == -17, rs1_b6_val == 2, rs1_b3_val == 4
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xbf02030504bf01ef;  op2val:0x2
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0xbf02030504bf01ef, 0x2, x1, 56, x2)

inst_39:
// rs1_b0_val == 32, rs1_b4_val == -9
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x4f908f7c0060820;  op2val:0x6
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0x4f908f7c0060820, 0x6, x1, 64, x2)

inst_40:
// rs1_b0_val == 16, rs1_b4_val == -5
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x7fbfbffb07fcfa10;  op2val:0x11
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0x7fbfbffb07fcfa10, 0x11, x1, 72, x2)

inst_41:
// rs1_b5_val == 0, rs1_b0_val == -1
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x557f00fd7f40feff;  op2val:0x2
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0x557f00fd7f40feff, 0x2, x1, 80, x2)

inst_42:
// rs1_b5_val == -1, rs1_b6_val == 8
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xbf08ff40fa40bf40;  op2val:0xc
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0xbf08ff40fa40bf40, 0xc, x1, 88, x2)

inst_43:
// rs1_b4_val == -33, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xaafafadffdfe02aa;  op2val:0xf
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0xaafafadffdfe02aa, 0xf, x1, 96, x2)

inst_44:
// rs1_b4_val == 2, rs1_b5_val == 1
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x400102dffa0206;  op2val:0x3
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0x400102dffa0206, 0x3, x1, 104, x2)

inst_45:
// rs1_b4_val == 0, rs1_b1_val == -86, rs1_b3_val == -86
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xef05fd00aa05aafd;  op2val:0x4
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0xef05fd00aa05aafd, 0x4, x1, 112, x2)

inst_46:
// rs1_b3_val == 85, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x6f720ef5504043f;  op2val:0x5
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0x6f720ef5504043f, 0x5, x1, 120, x2)

inst_47:
// rs1_b3_val == -65, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x308fe01bfc0dffe;  op2val:0x10
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0x308fe01bfc0dffe, 0x10, x1, 128, x2)

inst_48:
// rs1_b3_val == -9, rs1_b0_val == 1
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfb01fd00f703ef01;  op2val:0xe
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0xfb01fd00f703ef01, 0xe, x1, 136, x2)

inst_49:
// rs1_b3_val == -5, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x203f708fb3f07f7;  op2val:0x6
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0x203f708fb3f07f7, 0x6, x1, 144, x2)

inst_50:
// rs1_b3_val == 64, rs1_b5_val == 4
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xf806045540c0bff8;  op2val:0x7
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0xf806045540c0bff8, 0x7, x1, 152, x2)

inst_51:
// rs1_b6_val == 4, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x2004fb03fcf9023f;  op2val:0x8
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0x2004fb03fcf9023f, 0x8, x1, 160, x2)

inst_52:
// rs1_b5_val == 16, rs1_b2_val == 32
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x70610c0df2005fa;  op2val:0xb
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0x70610c0df2005fa, 0xb, x1, 168, x2)

inst_53:
// rs1_b2_val == 85, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfd205507ff551000;  op2val:0x7
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0xfd205507ff551000, 0x7, x1, 176, x2)

inst_54:
// rs1_b6_val == 0, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xbf00043ffff90540;  op2val:0x3
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0xbf00043ffff90540, 0x3, x1, 184, x2)

inst_55:
// rs1_b2_val == -33, rs1_b1_val == 85
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x40088003efdf55f7;  op2val:0xf
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0x40088003efdf55f7, 0xf, x1, 192, x2)

inst_56:
// rs1_b2_val == 8, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfd0403020108aafe;  op2val:0xc
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0xfd0403020108aafe, 0xc, x1, 200, x2)

inst_57:
// rs1_b5_val == 64, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x3ef40077f07f9fa;  op2val:0x11
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0x3ef40077f07f9fa, 0x11, x1, 208, x2)

inst_58:
// rs1_b2_val == 1, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x3f61009f701df03;  op2val:0x11
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0x3f61009f701df03, 0x11, x1, 216, x2)

inst_59:
// rs1_b2_val == 0, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xf709fe10fe00fabf;  op2val:0x8
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0xf709fe10fe00fabf, 0x8, x1, 224, x2)

inst_60:
// rs1_b2_val == -1, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xfcfa01f808fffb05;  op2val:0x8
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0xfcfa01f808fffb05, 0x8, x1, 232, x2)

inst_61:
// rs1_b5_val == 2, 
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0x40ff02047f400000;  op2val:0xf
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0x40ff02047f400000, 0xf, x1, 240, x2)

inst_62:
// rs1_b7_val == -17, rs1_b6_val == -9, rs1_b2_val == -5, rs1_b5_val == 127, rs1_b3_val == 32
// opcode: sra8.u ; op1:x30; op2:x29; dest:x31; op1val:0xeff77ff920fb06bf;  op2val:0x6
TEST_RR_OP(sra8.u, x31, x30, x29, 0x0000000000000000, 0xeff77ff920fb06bf, 0x6, x1, 248, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x8_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x8_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x9_0:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 32*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
