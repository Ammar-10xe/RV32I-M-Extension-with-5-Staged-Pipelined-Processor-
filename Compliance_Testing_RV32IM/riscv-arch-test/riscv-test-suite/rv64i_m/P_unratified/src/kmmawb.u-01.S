
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the kmmawb.u instruction of the RISC-V RV64PZicsr extension for the kmmawb.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",kmmawb.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x2,signature_x2_1)

inst_0:
// rs1 == rd != rs2, rs1==x0, rs2==x19, rd==x0, rs1_w0_val == -2147483648, rs2_h0_val == -8193, rs2_h1_val == 21845, rs2_h3_val == 8192
// opcode: kmmawb.u ; op1:x0; op2:x19; dest:x0; op1val:0xfffffff980000000;  op2val:0x2000fff65555dfff
TEST_PKRR_OP(kmmawb.u, x0, x0, x19, 0x0000000000000000, 0xfffffff980000000, 0x2000fff65555dfff, x0, x2, 0, x1)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x20, rs2==x17, rd==x10, rs2_h3_val == -21846, rs1_w0_val == -524289, rs2_h2_val == 21845, rs2_h0_val == 32767, rs1_w1_val == -3, rs2_h1_val == 2048
// opcode: kmmawb.u ; op1:x20; op2:x17; dest:x10; op1val:0xfffffffdfff7ffff;  op2val:0xaaaa555508007fff
TEST_PKRR_OP(kmmawb.u, x10, x20, x17, 0x0000000000000000, 0xfffffffdfff7ffff, 0xaaaa555508007fff, x20, x2, 16, x1)

inst_2:
// rs1 == rs2 != rd, rs1==x29, rs2==x29, rd==x21, rs2_h3_val == 21845, rs2_h1_val == 512, rs2_h2_val == 2048, rs1_w0_val == -1431655766, rs1_w1_val == -1048577
// opcode: kmmawb.u ; op1:x29; op2:x29; dest:x21; op1val:0xffefffffaaaaaaaa;  op2val:0x5555080002000003
TEST_PKRR_OP(kmmawb.u, x21, x29, x29, 0x0000000000000000, 0xffefffffaaaaaaaa, 0x5555080002000003, x29, x2, 32, x1)

inst_3:
// rs1 == rs2 == rd, rs1==x4, rs2==x4, rd==x4, rs2_h3_val == 32767, rs2_h2_val == 1024, rs1_w0_val == 131072, rs2_h0_val == 256, rs2_h1_val == -16385
// opcode: kmmawb.u ; op1:x4; op2:x4; dest:x4; op1val:0x3fffffff00020000;  op2val:0x7fff0400bfff0100
TEST_PKRR_OP(kmmawb.u, x4, x4, x4, 0x0000000000000000, 0x3fffffff00020000, 0x7fff0400bfff0100, x4, x2, 48, x1)

inst_4:
// rs2 == rd != rs1, rs1==x19, rs2==x23, rd==x23, rs2_h3_val == -16385, rs1_w1_val == 262144, rs1_w0_val == -8193, rs2_h1_val == -2049
// opcode: kmmawb.u ; op1:x19; op2:x23; dest:x23; op1val:0x040000ffffdfff;  op2val:0xbfff3ffff7ff7fff
TEST_PKRR_OP(kmmawb.u, x23, x19, x23, 0x0000000000000000, 0x040000ffffdfff, 0xbfff3ffff7ff7fff, x19, x2, 64, x1)

inst_5:
// rs1==x25, rs2==x13, rd==x27, rs2_h3_val == -8193, rs2_h1_val == 16384, rs2_h0_val == -21846, rs1_w0_val == 8388608, rs1_w1_val == 2097152
// opcode: kmmawb.u ; op1:x25; op2:x13; dest:x27; op1val:0x20000000800000;  op2val:0xdfff00094000aaaa
TEST_PKRR_OP(kmmawb.u, x27, x25, x13, 0x0000000000000000, 0x20000000800000, 0xdfff00094000aaaa, x25, x2, 80, x1)

inst_6:
// rs1==x21, rs2==x25, rd==x14, rs2_h3_val == -4097, rs1_w0_val == -4194305, rs2_h2_val == -4097, rs1_w1_val == -129, rs2_h0_val == 1, rs2_h1_val == -129
// opcode: kmmawb.u ; op1:x21; op2:x25; dest:x14; op1val:0xffffff7fffbfffff;  op2val:0xefffefffff7f0001
TEST_PKRR_OP(kmmawb.u, x14, x21, x25, 0x0000000000000000, 0xffffff7fffbfffff, 0xefffefffff7f0001, x21, x2, 96, x1)

inst_7:
// rs1==x31, rs2==x15, rd==x24, rs2_h3_val == -2049, rs2_h1_val == 128, rs2_h2_val == 1, rs2_h0_val == -16385, rs1_w1_val == -8388609, rs1_w0_val == 33554432
// opcode: kmmawb.u ; op1:x31; op2:x15; dest:x24; op1val:0xff7fffff02000000;  op2val:0xf7ff00010080bfff
TEST_PKRR_OP(kmmawb.u, x24, x31, x15, 0x0000000000000000, 0xff7fffff02000000, 0xf7ff00010080bfff, x31, x2, 112, x1)

inst_8:
// rs1==x24, rs2==x0, rd==x5, rs2_h3_val == -1025, rs1_w1_val == 1, rs1_w0_val == -65537, rs2_h2_val == -2, rs2_h0_val == -32768
// opcode: kmmawb.u ; op1:x24; op2:x0; dest:x5; op1val:0x000001fffeffff;  op2val:0xfbfffffefff88000
TEST_PKRR_OP(kmmawb.u, x5, x24, x0, 0x0000000000000000, 0x000001fffeffff, 0xfbfffffefff88000, x24, x2, 128, x1)

inst_9:
// rs1==x6, rs2==x3, rd==x17, rs2_h3_val == -513, rs2_h2_val == 64, rs1_w1_val == 4194304, rs1_w0_val == -5, rs2_h1_val == 8
// opcode: kmmawb.u ; op1:x6; op2:x3; dest:x17; op1val:0x400000fffffffb;  op2val:0xfdff00400008fff8
TEST_PKRR_OP(kmmawb.u, x17, x6, x3, 0x0000000000000000, 0x400000fffffffb, 0xfdff00400008fff8, x6, x2, 144, x1)

inst_10:
// rs1==x27, rs2==x8, rd==x15, rs2_h3_val == -257, rs1_w1_val == -67108865, rs1_w0_val == -16385, rs2_h1_val == -17
// opcode: kmmawb.u ; op1:x27; op2:x8; dest:x15; op1val:0xfbffffffffffbfff;  op2val:0xfeffefffffef0006
TEST_PKRR_OP(kmmawb.u, x15, x27, x8, 0x0000000000000000, 0xfbffffffffffbfff, 0xfeffefffffef0006, x27, x2, 160, x1)

inst_11:
// rs1==x12, rs2==x27, rd==x31, rs2_h3_val == -129, rs1_w0_val == 2097152, rs2_h1_val == 8192, rs2_h0_val == -257
// opcode: kmmawb.u ; op1:x12; op2:x27; dest:x31; op1val:0xffffff7f00200000;  op2val:0xff7ffff62000feff
TEST_PKRR_OP(kmmawb.u, x31, x12, x27, 0x0000000000000000, 0xffffff7f00200000, 0xff7ffff62000feff, x12, x2, 176, x1)

inst_12:
// rs1==x5, rs2==x20, rd==x18, rs2_h3_val == -65, rs2_h2_val == 16384, rs2_h0_val == -513, rs1_w1_val == 4096, rs2_h1_val == -9
// opcode: kmmawb.u ; op1:x5; op2:x20; dest:x18; op1val:0x00100080000000;  op2val:0xffbf4000fff7fdff
TEST_PKRR_OP(kmmawb.u, x18, x5, x20, 0x0000000000000000, 0x00100080000000, 0xffbf4000fff7fdff, x5, x2, 192, x1)

inst_13:
// rs1==x28, rs2==x11, rd==x9, rs2_h3_val == -33, rs2_h1_val == 2, rs1_w1_val == 32768, rs2_h2_val == -257, rs1_w0_val == -2
// opcode: kmmawb.u ; op1:x28; op2:x11; dest:x9; op1val:0x008000fffffffe;  op2val:0xffdffeff0002fffc
TEST_PKRR_OP(kmmawb.u, x9, x28, x11, 0x0000000000000000, 0x008000fffffffe, 0xffdffeff0002fffc, x28, x2, 208, x1)

inst_14:
// rs1==x3, rs2==x14, rd==x28, rs2_h3_val == -17, rs2_h2_val == 8192, rs2_h1_val == 256, rs1_w0_val == -268435457, rs1_w1_val == -2049
// opcode: kmmawb.u ; op1:x3; op2:x14; dest:x28; op1val:0xfffff7ffefffffff;  op2val:0xffef20000100fffa
TEST_PKRR_OP(kmmawb.u, x28, x3, x14, 0x0000000000000000, 0xfffff7ffefffffff, 0xffef20000100fffa, x3, x2, 224, x1)

inst_15:
// rs1==x15, rs2==x21, rd==x25, rs2_h3_val == -9, rs1_w1_val == -131073, rs1_w0_val == -67108865
// opcode: kmmawb.u ; op1:x15; op2:x21; dest:x25; op1val:0xfffdfffffbffffff;  op2val:0xfff7effffff9fff6
TEST_PKRR_OP(kmmawb.u, x25, x15, x21, 0x0000000000000000, 0xfffdfffffbffffff, 0xfff7effffff9fff6, x15, x2, 240, x1)

inst_16:
// rs1==x9, rs2==x26, rd==x20, rs2_h3_val == -5, rs1_w1_val == 67108864, rs2_h1_val == -21846
// opcode: kmmawb.u ; op1:x9; op2:x26; dest:x20; op1val:0x4000000fffffffa;  op2val:0xfffbfffeaaaadfff
TEST_PKRR_OP(kmmawb.u, x20, x9, x26, 0x0000000000000000, 0x4000000fffffffa, 0xfffbfffeaaaadfff, x9, x2, 256, x1)

inst_17:
// rs1==x10, rs2==x16, rd==x6, rs2_h3_val == -3, rs2_h2_val == 4, rs1_w1_val == 32
// opcode: kmmawb.u ; op1:x10; op2:x16; dest:x6; op1val:0x000020efffffff;  op2val:0xfffd0004fffcbfff
TEST_PKRR_OP(kmmawb.u, x6, x10, x16, 0x0000000000000000, 0x000020efffffff, 0xfffd0004fffcbfff, x10, x2, 272, x1)

inst_18:
// rs1==x14, rs2==x1, rd==x30, rs2_h3_val == -2, rs1_w1_val == -65, rs1_w0_val == -33554433
// opcode: kmmawb.u ; op1:x14; op2:x1; dest:x30; op1val:0xffffffbffdffffff;  op2val:0xfffefeff00090006
TEST_PKRR_OP(kmmawb.u, x30, x14, x1, 0x0000000000000000, 0xffffffbffdffffff, 0xfffefeff00090006, x14, x2, 288, x15)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_19:
// rs1==x2, rs2==x7, rd==x26, rs2_h3_val == -32768, rs2_h2_val == -9, rs1_w0_val == 128
// opcode: kmmawb.u ; op1:x2; op2:x7; dest:x26; op1val:0xfffffff600000080;  op2val:0x8000fff7fff9fffa
TEST_PKRR_OP(kmmawb.u, x26, x2, x7, 0x0000000000000000, 0xfffffff600000080, 0x8000fff7fff9fffa, x2, x4, 0, x15)

inst_20:
// rs1==x1, rs2==x5, rd==x11, rs2_h3_val == 16384, rs1_w0_val == 16777216, rs1_w1_val == 134217728
// opcode: kmmawb.u ; op1:x1; op2:x5; dest:x11; op1val:0x800000001000000;  op2val:0x4000000402003fff
TEST_PKRR_OP(kmmawb.u, x11, x1, x5, 0x0000000000000000, 0x800000001000000, 0x4000000402003fff, x1, x4, 16, x15)

inst_21:
// rs1==x7, rs2==x22, rd==x8, rs2_h3_val == 4096, rs2_h2_val == -16385, rs1_w0_val == 32
// opcode: kmmawb.u ; op1:x7; op2:x22; dest:x8; op1val:0xfffffff800000020;  op2val:0x1000bffffffcfff8
TEST_PKRR_OP(kmmawb.u, x8, x7, x22, 0x0000000000000000, 0xfffffff800000020, 0x1000bffffffcfff8, x7, x4, 32, x15)

inst_22:
// rs1==x23, rs2==x9, rd==x3, rs2_h3_val == 2048, rs1_w0_val == 4194304, rs1_w1_val == 8388608, rs2_h0_val == 0
// opcode: kmmawb.u ; op1:x23; op2:x9; dest:x3; op1val:0x80000000400000;  op2val:0x800fffe08000000
TEST_PKRR_OP(kmmawb.u, x3, x23, x9, 0x0000000000000000, 0x80000000400000, 0x800fffe08000000, x23, x4, 48, x15)

inst_23:
// rs1==x11, rs2==x18, rd==x2, rs2_h3_val == 1024, rs2_h2_val == -33, rs2_h1_val == -2, rs1_w1_val == 1073741824, rs2_h0_val == -3
// opcode: kmmawb.u ; op1:x11; op2:x18; dest:x2; op1val:0x4000000000400000;  op2val:0x400ffdffffefffd
TEST_PKRR_OP(kmmawb.u, x2, x11, x18, 0x0000000000000000, 0x4000000000400000, 0x400ffdffffefffd, x11, x4, 64, x15)

inst_24:
// rs1==x16, rs2==x24, rd==x12, rs2_h3_val == 512, rs1_w0_val == -1073741825, rs2_h0_val == 1024, rs1_w1_val == 268435456
// opcode: kmmawb.u ; op1:x16; op2:x24; dest:x12; op1val:0x10000000bfffffff;  op2val:0x200000400800400
TEST_PKRR_OP(kmmawb.u, x12, x16, x24, 0x0000000000000000, 0x10000000bfffffff, 0x200000400800400, x16, x4, 80, x15)

inst_25:
// rs1==x22, rs2==x10, rd==x29, rs2_h3_val == 256, rs2_h0_val == 16384, rs1_w1_val == -1431655766, rs2_h2_val == 2
// opcode: kmmawb.u ; op1:x22; op2:x10; dest:x29; op1val:0xaaaaaaaa00800000;  op2val:0x1000002c0004000
TEST_PKRR_OP(kmmawb.u, x29, x22, x10, 0x0000000000000000, 0xaaaaaaaa00800000, 0x1000002c0004000, x22, x4, 96, x15)

inst_26:
// rs1==x13, rs2==x30, rd==x19, rs2_h3_val == 128, rs1_w1_val == 536870912
// opcode: kmmawb.u ; op1:x13; op2:x30; dest:x19; op1val:0x20000000bfffffff;  op2val:0x80080000050007
TEST_PKRR_OP(kmmawb.u, x19, x13, x30, 0x0000000000000000, 0x20000000bfffffff, 0x80080000050007, x13, x4, 112, x15)

inst_27:
// rs1==x18, rs2==x28, rd==x16, rs2_h3_val == 64, rs1_w1_val == 1431655765, rs2_h2_val == -21846
// opcode: kmmawb.u ; op1:x18; op2:x28; dest:x16; op1val:0x55555555fffffffa;  op2val:0x40aaaa00060007
TEST_PKRR_OP(kmmawb.u, x16, x18, x28, 0x0000000000000000, 0x55555555fffffffa, 0x40aaaa00060007, x18, x4, 128, x15)

inst_28:
// rs1==x26, rs2==x6, rd==x22, rs2_h3_val == 32, rs2_h2_val == -65, rs1_w1_val == 64, rs1_w0_val == 256, rs2_h1_val == 4096
// opcode: kmmawb.u ; op1:x26; op2:x6; dest:x22; op1val:0x00004000000100;  op2val:0x20ffbf10000100
TEST_PKRR_OP(kmmawb.u, x22, x26, x6, 0x0000000000000000, 0x00004000000100, 0x20ffbf10000100, x26, x4, 144, x15)

inst_29:
// rs1==x17, rs2==x31, rd==x13, rs2_h3_val == 16, rs1_w0_val == -536870913, rs1_w1_val == 16384, rs2_h1_val == -65
// opcode: kmmawb.u ; op1:x17; op2:x31; dest:x13; op1val:0x004000dfffffff;  op2val:0x10aaaaffbf0005
TEST_PKRR_OP(kmmawb.u, x13, x17, x31, 0x0000000000000000, 0x004000dfffffff, 0x10aaaaffbf0005, x17, x4, 160, x15)

inst_30:
// rs1==x8, rs2==x2, rd==x1, rs2_h3_val == 8, rs2_h2_val == 32, rs2_h0_val == 4096
// opcode: kmmawb.u ; op1:x8; op2:x2; dest:x1; op1val:0x000040ffffbfff;  op2val:0x080020aaaa1000
TEST_PKRR_OP(kmmawb.u, x1, x8, x2, 0x0000000000000000, 0x000040ffffbfff, 0x080020aaaa1000, x8, x4, 176, x15)

inst_31:
// rs1==x30, rs2==x12, rd==x7, rs2_h3_val == 4, rs2_h2_val == -8193, rs1_w1_val == -513, rs2_h0_val == 21845
// opcode: kmmawb.u ; op1:x30; op2:x12; dest:x7; op1val:0xfffffdffc0000000;  op2val:0x04dfffffef5555
TEST_PKRR_OP(kmmawb.u, x7, x30, x12, 0x0000000000000000, 0xfffffdffc0000000, 0x04dfffffef5555, x30, x4, 192, x15)

inst_32:
// rs2_h3_val == 2, rs1_w1_val == -257
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffefffffffff6;  op2val:0x02002000080001
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffffefffffffff6, 0x02002000080001, x30, x4, 208, x15)

inst_33:
// rs2_h3_val == 1, rs2_h1_val == 1024, rs1_w0_val == -1025
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9fffffbff;  op2val:0x01fff604000400
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffffff9fffffbff, 0x01fff604000400, x30, x4, 224, x15)

inst_34:
// rs2_h3_val == 0, rs1_w0_val == 268435456, rs1_w1_val == -2, rs2_h2_val == -32768
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe10000000;  op2val:0x008000fff70005
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffffffe10000000, 0x008000fff70005, x30, x4, 240, x15)

inst_35:
// rs2_h3_val == -1, rs1_w1_val == 4, rs1_w0_val == -134217729, rs2_h2_val == 0
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x000004f7ffffff;  op2val:0xffff00001000c000
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x000004f7ffffff, 0xffff00001000c000, x30, x4, 256, x15)

inst_36:
// rs2_h2_val == 32767, rs1_w1_val == -16777217, rs2_h1_val == -4097
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff00400000;  op2val:0xfdff7fffefffc000
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfeffffff00400000, 0xfdff7fffefffc000, x30, x4, 272, x15)

inst_37:
// rs2_h2_val == -2049, rs2_h0_val == 512, rs2_h1_val == 16
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x004000fffffffc;  op2val:0x20f7ff00100200
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x004000fffffffc, 0x20f7ff00100200, x30, x4, 288, x15)

inst_38:
// rs2_h2_val == -1025, rs1_w1_val == -1025
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff00000020;  op2val:0x5555fbff20000400
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffffbff00000020, 0x5555fbff20000400, x30, x4, 304, x15)

inst_39:
// rs1_w0_val == 1048576, rs1_w1_val == 524288, rs2_h0_val == -129
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x08000000100000;  op2val:0x00fffc0008ff7f
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x08000000100000, 0x00fffc0008ff7f, x30, x4, 320, x15)

inst_40:
// rs1_w0_val == 524288, rs1_w1_val == 16777216
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x100000000080000;  op2val:0xff7f00040005fff6
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x100000000080000, 0xff7f00040005fff6, x30, x4, 336, x15)

inst_41:
// rs1_w0_val == 262144, rs2_h2_val == -5
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffa00040000;  op2val:0x100fffb0002fffd
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffffffa00040000, 0x100fffb0002fffd, x30, x4, 352, x15)

inst_42:
// rs1_w0_val == 65536, rs2_h0_val == -1, rs1_w1_val == 1024
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x00040000010000;  op2val:0xfff900051000ffff
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x00040000010000, 0xfff900051000ffff, x30, x4, 368, x15)

inst_43:
// rs1_w0_val == 32768, rs1_w1_val == -5
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb00008000;  op2val:0xfff8fbff02008000
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffffffb00008000, 0xfff8fbff02008000, x30, x4, 384, x15)

inst_44:
// rs1_w0_val == 16384, rs2_h2_val == 16, rs2_h0_val == 4
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x00040000004000;  op2val:0x030010aaaa0004
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x00040000004000, 0x030010aaaa0004, x30, x4, 400, x15)

inst_45:
// rs1_w0_val == 8192, rs2_h1_val == -1025, rs2_h0_val == 8
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000700002000;  op2val:0x400800fbff0008
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x00000700002000, 0x400800fbff0008, x30, x4, 416, x15)

inst_46:
// rs1_w0_val == 4096, rs1_w1_val == -16385, rs2_h2_val == 512
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff00001000;  op2val:0x01020000020006
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xffffbfff00001000, 0x01020000020006, x30, x4, 432, x15)

inst_47:
// rs1_w0_val == 2048, rs1_w1_val == -262145
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff00000800;  op2val:0xff7f7fff00070006
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffbffff00000800, 0xff7f7fff00070006, x30, x4, 448, x15)

inst_48:
// rs1_w0_val == 1024, rs2_h1_val == -5, rs2_h0_val == 16
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000400;  op2val:0x200ffbffffb0010
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000400, 0x200ffbffffb0010, x30, x4, 464, x15)

inst_49:
// rs1_w0_val == 512, rs2_h1_val == -32768
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000200;  op2val:0xfff700068000fffd
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x400000000000200, 0xfff700068000fffd, x30, x4, 480, x15)

inst_50:
// rs1_w0_val == 64, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x00002000000040;  op2val:0xfff700035555fffd
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x00002000000040, 0xfff700035555fffd, x30, x4, 496, x15)

inst_51:
// rs1_w0_val == 16, rs2_h2_val == -17
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x08000000000010;  op2val:0x200ffef0010fffa
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x08000000000010, 0x200ffef0010fffa, x30, x4, 512, x15)

inst_52:
// rs1_w0_val == 8, rs2_h2_val == 256
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000008;  op2val:0x20001000200ff7f
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x1000000000000008, 0x20001000200ff7f, x30, x4, 528, x15)

inst_53:
// rs1_w0_val == 4, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000004;  op2val:0x04fffbfff60007
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x2000000000000004, 0x04fffbfff60007, x30, x4, 544, x15)

inst_54:
// rs1_w0_val == 2, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500000002;  op2val:0x100020bfff3fff
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x5555555500000002, 0x100020bfff3fff, x30, x4, 560, x15)

inst_55:
// rs1_w0_val == 1, rs1_w1_val == -4194305, rs2_h0_val == -2
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff00000001;  op2val:0x090001fbfffffe
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xffbfffff00000001, 0x090001fbfffffe, x30, x4, 576, x15)

inst_56:
// rs1_w0_val == 0, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000000;  op2val:0xc00004000002ff7f
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x800000000000000, 0xc00004000002ff7f, x30, x4, 592, x15)

inst_57:
// rs1_w0_val == -1, rs2_h0_val == -33
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9ffffffff;  op2val:0xbffffff90006ffdf
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffffff9ffffffff, 0xbffffff90006ffdf, x30, x4, 608, x15)

inst_58:
// rs2_h2_val == -513, rs1_w0_val == -32769, rs2_h0_val == 128
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x080000ffff7fff;  op2val:0xfffefdfffffa0080
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x080000ffff7fff, 0xfffefdfffffa0080, x30, x4, 624, x15)

inst_59:
// rs2_h2_val == -129, rs2_h0_val == -4097
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x5555555500002000;  op2val:0x4000ff7f0009efff
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x5555555500002000, 0x4000ff7f0009efff, x30, x4, 640, x15)

inst_60:
// rs2_h2_val == -3, rs1_w1_val == 65536, rs2_h1_val == -257
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x01000000000007;  op2val:0xeffffffdfeffff7f
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x01000000000007, 0xeffffffdfeffff7f, x30, x4, 656, x15)

inst_61:
// rs2_h2_val == 4096, rs2_h1_val == 0, rs1_w1_val == 2048
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x00080000040000;  op2val:0xfffd10000000ffdf
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x00080000040000, 0xfffd10000000ffdf, x30, x4, 672, x15)

inst_62:
// rs2_h2_val == 128, rs1_w1_val == -134217729
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff00000006;  op2val:0x800080fff7fff6
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xf7ffffff00000006, 0x800080fff7fff6, x30, x4, 688, x15)

inst_63:
// rs2_h2_val == 8, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffc00008000;  op2val:0xfdff0008fff80009
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffffffc00008000, 0xfdff0008fff80009, x30, x4, 704, x15)

inst_64:
// rs2_h2_val == -1, rs2_h1_val == -1, rs1_w1_val == -17
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffeffff7ffff;  op2val:0xfff9ffffffffbfff
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xffffffeffff7ffff, 0xfff9ffffffffbfff, x30, x4, 720, x15)

inst_65:
// rs2_h1_val == 32767, rs2_h0_val == 64
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe00080000;  op2val:0xffef00207fff0040
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffffffe00080000, 0xffef00207fff0040, x30, x4, 736, x15)

inst_66:
// rs2_h1_val == -8193, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x000040fbffffff;  op2val:0xfff90400dffffffc
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x000040fbffffff, 0xfff90400dffffffc, x30, x4, 752, x15)

inst_67:
// rs2_h1_val == -513, rs1_w1_val == 33554432, rs2_h0_val == -17
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x2000000fffffffa;  op2val:0x034000fdffffef
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x2000000fffffffa, 0x034000fdffffef, x30, x4, 768, x15)

inst_68:
// rs2_h1_val == -33, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x00100000004000;  op2val:0x3ffffff8ffdf0005
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x00100000004000, 0x3ffffff8ffdf0005, x30, x4, 784, x15)

inst_69:
// rs2_h0_val == 8192, rs1_w1_val == 2147483647
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff00000003;  op2val:0xffefc000fff62000
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x7fffffff00000003, 0xffefc000fff62000, x30, x4, 800, x15)

inst_70:
// rs2_h0_val == 2048, rs1_w0_val == -2049
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffffff7ff;  op2val:0xffff040020000800
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffffbfffffff7ff, 0xffff040020000800, x30, x4, 816, x15)

inst_71:
// rs2_h0_val == 32, rs1_w0_val == -131073
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdfffffdffff;  op2val:0x7ffffffe00080020
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffffdfffffdffff, 0x7ffffffe00080020, x30, x4, 832, x15)

inst_72:
// rs2_h0_val == 2, rs1_w0_val == -33, rs2_h1_val == 64
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x800000ffffffdf;  op2val:0x7fff000600400002
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x800000ffffffdf, 0x7fff000600400002, x30, x4, 848, x15)

inst_73:
// rs1_w1_val == -1073741825, rs2_h0_val == -1025
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff00000003;  op2val:0x04fff60005fbff
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xbfffffff00000003, 0x04fff60005fbff, x30, x4, 864, x15)

inst_74:
// rs1_w1_val == -536870913, rs1_w0_val == 2147483647
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff7fffffff;  op2val:0x2003fff80000000
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xdfffffff7fffffff, 0x2003fff80000000, x30, x4, 880, x15)

inst_75:
// rs1_w1_val == -268435457, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffffffffffc;  op2val:0xfff7008000060008
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xeffffffffffffffc, 0xfff7008000060008, x30, x4, 896, x15)

inst_76:
// rs1_w1_val == -33554433, rs1_w0_val == -4097
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffffefff;  op2val:0x55557fff0000fff6
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfdffffffffffefff, 0x55557fff0000fff6, x30, x4, 912, x15)

inst_77:
// rs1_w1_val == -2097153, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00000080;  op2val:0xfdffbffffefffffe
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xffdfffff00000080, 0xfdffbffffefffffe, x30, x4, 928, x15)

inst_78:
// rs1_w1_val == -524289, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffdfffffff;  op2val:0xfff7efff00030009
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfff7ffffdfffffff, 0xfff7efff00030009, x30, x4, 944, x15)

inst_79:
// rs1_w1_val == -65537, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffdfff;  op2val:0xffdf0100aaaac000
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffdfff, 0xffdf0100aaaac000, x30, x4, 960, x15)

inst_80:
// rs1_w1_val == -32769, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffc0000000;  op2val:0xffefc000aaaa7fff
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xffff7fffc0000000, 0xffefc000aaaa7fff, x30, x4, 976, x15)

inst_81:
// rs1_w1_val == -8193, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffffdf;  op2val:0xfbfffff80100aaaa
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xffffdfffffffffdf, 0xfbfffff80100aaaa, x30, x4, 992, x15)

inst_82:
// rs1_w1_val == -4097, rs2_h1_val == 1, rs1_w0_val == 67108864
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff04000000;  op2val:0xfff7ffff0001fffc
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xffffefff04000000, 0xfff7ffff0001fffc, x30, x4, 1008, x15)

inst_83:
// rs1_w1_val == -33, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdffffffffe;  op2val:0x3fffffbfffdffffc
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xffffffdffffffffe, 0x3fffffbfffdffffc, x30, x4, 1024, x15)

inst_84:
// rs1_w1_val == -9, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff700020000;  op2val:0xfff70010c0002000
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffffff700020000, 0xfff70010c0002000, x30, x4, 1040, x15)

inst_85:
// rs1_w1_val == -2147483648, rs1_w0_val == -17
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x80000000ffffffef;  op2val:0x0700065555efff
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x80000000ffffffef, 0x0700065555efff, x30, x4, 1056, x15)

inst_86:
// rs1_w1_val == 1048576, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x100000fffffffe;  op2val:0xeffffff8fdff8000
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x100000fffffffe, 0xeffffff8fdff8000, x30, x4, 1072, x15)

inst_87:
// rs1_w1_val == 131072, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x02000000002000;  op2val:0xff7f0020feff0200
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x02000000002000, 0xff7f0020feff0200, x30, x4, 1088, x15)

inst_88:
// rs1_w1_val == 8192, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x00200000020000;  op2val:0x4080000002fbff
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x00200000020000, 0x4080000002fbff, x30, x4, 1104, x15)

inst_89:
// rs1_w1_val == 512, rs1_w0_val == -1048577
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x000200ffefffff;  op2val:0x3ffffffa00027fff
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x000200ffefffff, 0x3ffffffa00027fff, x30, x4, 1120, x15)

inst_90:
// rs1_w1_val == 256, rs1_w0_val == -129
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x000100ffffff7f;  op2val:0x40007fff0003efff
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x000100ffffff7f, 0x40007fff0003efff, x30, x4, 1136, x15)

inst_91:
// rs1_w1_val == 128, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x00008002000000;  op2val:0x40fff6fffc0005
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x00008002000000, 0x40fff6fffc0005, x30, x4, 1152, x15)

inst_92:
// rs1_w1_val == 16, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x00001000000000;  op2val:0x1000ff7f40000009
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x00001000000000, 0x1000ff7f40000009, x30, x4, 1168, x15)

inst_93:
// rs1_w1_val == 8, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x000008fffffffc;  op2val:0x800055554000fffe
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x000008fffffffc, 0x800055554000fffe, x30, x4, 1184, x15)

inst_94:
// rs1_w1_val == 2, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x000002c0000000;  op2val:0x2000005aaaa2000
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x000002c0000000, 0x2000005aaaa2000, x30, x4, 1200, x15)

inst_95:
// rs1_w1_val == 0, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x000000c0000000;  op2val:0xdfff04000200feff
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x000000c0000000, 0xdfff04000200feff, x30, x4, 1216, x15)

inst_96:
// rs1_w1_val == -1, rs2_h0_val == -9
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffbfffff;  op2val:0x3fff0001fdfffff7
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xffffffffffbfffff, 0x3fff0001fdfffff7, x30, x4, 1232, x15)

inst_97:
// rs1_w0_val == 1431655765, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x20000055555555;  op2val:0x04feff0005fff9
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x20000055555555, 0x04feff0005fff9, x30, x4, 1248, x15)

inst_98:
// rs2_h1_val == -3, rs2_h0_val == -5
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff00000200;  op2val:0xfdff0007fffdfffb
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffffdff00000200, 0xfdff0007fffdfffb, x30, x4, 1264, x15)

inst_99:
// rs1_w0_val == -16777217, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbfffeffffff;  op2val:0xaaaa20003ffffbff
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffffbfffeffffff, 0xaaaa20003ffffbff, x30, x4, 1280, x15)

inst_100:
// rs1_w0_val == -2097153, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffdfffff;  op2val:0xfbff08000000bfff
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xffbfffffffdfffff, 0xfbff08000000bfff, x30, x4, 1296, x15)

inst_101:
// rs1_w0_val == -262145, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x4000000fffbffff;  op2val:0xefff8000fffd4000
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x4000000fffbffff, 0xefff8000fffd4000, x30, x4, 1312, x15)

inst_102:
// rs2_h1_val == 32, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x000000ffffffff;  op2val:0x04feff00200020
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x000000ffffffff, 0x04feff00200020, x30, x4, 1328, x15)

inst_103:
// rs2_h1_val == 4, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff00400000;  op2val:0x05fffc00040001
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xffdfffff00400000, 0x05fffc00040001, x30, x4, 1344, x15)

inst_104:
// rs1_w0_val == -513, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdfffffdff;  op2val:0xdfffbffffff70004
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffffffdfffffdff, 0xdfffbffffff70004, x30, x4, 1360, x15)

inst_105:
// rs1_w0_val == -257, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffefffffffffeff;  op2val:0x070200fefffffa
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffefffffffffeff, 0x070200fefffffa, x30, x4, 1376, x15)

inst_106:
// rs1_w0_val == -65, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffffffbf;  op2val:0x01fdfffefffffe
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xffefffffffffffbf, 0x01fdfffefffffe, x30, x4, 1392, x15)

inst_107:
// rs2_h0_val == -2049, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x000005ffffbfff;  op2val:0x55550004f7fff7ff
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x000005ffffbfff, 0x55550004f7fff7ff, x30, x4, 1408, x15)

inst_108:
// rs1_w0_val == -9, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x010000fffffff7;  op2val:0x200010fbff0009
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x010000fffffff7, 0x200010fbff0009, x30, x4, 1424, x15)

inst_109:
// rs1_w0_val == -3, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x000000fffffffd;  op2val:0x107fffffffffef
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x000000fffffffd, 0x107fffffffffef, x30, x4, 1440, x15)

inst_110:
// rs1_w0_val == 1073741824, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff40000000;  op2val:0x050005aaaa0001
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xffffdfff40000000, 0x050005aaaa0001, x30, x4, 1456, x15)

inst_111:
// rs1_w0_val == 536870912, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff820000000;  op2val:0x03fff7fff60800
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffffff820000000, 0x03fff7fff60800, x30, x4, 1472, x15)

inst_112:
// rs2_h0_val == -65, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xffbffffffffffffa;  op2val:0x050040bfffffbf
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xffbffffffffffffa, 0x050040bfffffbf, x30, x4, 1488, x15)

inst_113:
// rs1_w0_val == 134217728, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x00000708000000;  op2val:0xfff7fffeefffc000
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x00000708000000, 0xfff7fffeefffc000, x30, x4, 1504, x15)

inst_114:
// rs1_w0_val == -8388609, 
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffff7fffff;  op2val:0xfffe00100000fffe
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffbffffff7fffff, 0xfffe00100000fffe, x30, x4, 1520, x15)

inst_115:
// rs1_w0_val == -2147483648, rs2_h0_val == -8193, rs2_h1_val == 21845, rs2_h3_val == 8192
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff980000000;  op2val:0x2000fff65555dfff
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xfffffff980000000, 0x2000fff65555dfff, x30, x4, 1536, x15)

inst_116:
// rs2_h3_val == 21845, rs2_h1_val == 512, rs2_h2_val == 2048, rs1_w0_val == -1431655766, rs1_w1_val == -1048577
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffaaaaaaaa;  op2val:0x5555080002000003
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0xffefffffaaaaaaaa, 0x5555080002000003, x30, x4, 1552, x15)

inst_117:
// rs2_h3_val == -1025, rs1_w1_val == 1, rs1_w0_val == -65537, rs2_h2_val == -2, rs2_h0_val == -32768
// opcode: kmmawb.u ; op1:x30; op2:x29; dest:x31; op1val:0x000001fffeffff;  op2val:0xfbfffffefff88000
TEST_PKRR_OP(kmmawb.u, x31, x30, x29, 0x0000000000000000, 0x000001fffeffff, 0xfbfffffefff88000, x30, x4, 1568, x15)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x2_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 38*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 198*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
