
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the ukadd16 instruction of the RISC-V RV64PZicsr extension for the ukadd16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",ukadd16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x6,signature_x6_1)

inst_0:
// rs1 == rd != rs2, rs1==x10, rs2==x16, rd==x10, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h0_val == 512, rs1_h1_val == 65531, rs2_h3_val == 65519, rs1_h2_val == 16
// opcode: ukadd16 ; op1:x10; op2:x16; dest:x10; op1val:0x130010fffb0000;  op2val:0xffef000500070200
TEST_PKRR_OP(ukadd16, x10, x10, x16, 0x0000000000000000, 0x130010fffb0000, 0xffef000500070200, x10, x6, 0, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x30, rs2==x8, rd==x20, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h1_val == 65535, rs2_h0_val == 1024, rs1_h3_val == 2048, rs2_h2_val == 0, rs1_h2_val == 43690, rs2_h3_val == 2048
// opcode: ukadd16 ; op1:x30; op2:x8; dest:x20; op1val:0x800aaaaffff0000;  op2val:0x8000000000a0400
TEST_PKRR_OP(ukadd16, x20, x30, x8, 0x0000000000000000, 0x800aaaaffff0000, 0x8000000000a0400, x30, x6, 16, x2)

inst_2:
// rs1 == rs2 != rd, rs1==x18, rs2==x18, rd==x1, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h0_val == 65519, rs1_h1_val == 61439, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == 65471, rs2_h3_val == 43690, rs1_h0_val == 65503, rs2_h1_val == 32767, rs2_h2_val == 65471
// opcode: ukadd16 ; op1:x18; op2:x18; dest:x1; op1val:0x06ffbfefffffdf;  op2val:0xaaaaffbf7fffffef
TEST_PKRR_OP(ukadd16, x1, x18, x18, 0x0000000000000000, 0x06ffbfefffffdf, 0xaaaaffbf7fffffef, x18, x6, 32, x2)

inst_3:
// rs1 == rs2 == rd, rs1==x17, rs2==x17, rd==x17, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 65533, rs2_h2_val == 65535, rs1_h1_val == 65533, rs2_h3_val == 65407, rs1_h3_val == 4, rs2_h0_val == 57343, rs1_h0_val == 4096, rs1_h2_val == 8
// opcode: ukadd16 ; op1:x17; op2:x17; dest:x17; op1val:0x040008fffd1000;  op2val:0xff7ffffffffddfff
TEST_PKRR_OP(ukadd16, x17, x17, x17, 0x0000000000000000, 0x040008fffd1000, 0xff7ffffffffddfff, x17, x6, 48, x2)

inst_4:
// rs2 == rd != rs1, rs1==x14, rs2==x23, rd==x23, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h2_val == 1024, rs1_h0_val == 65535, rs1_h3_val == 65534, rs1_h1_val == 65279, rs2_h0_val == 65535, rs1_h2_val == 32, rs2_h1_val == 65527
// opcode: ukadd16 ; op1:x14; op2:x23; dest:x23; op1val:0xfffe0020feffffff;  op2val:0xff7f0400fff7ffff
TEST_PKRR_OP(ukadd16, x23, x14, x23, 0x0000000000000000, 0xfffe0020feffffff, 0xff7f0400fff7ffff, x14, x6, 64, x2)

inst_5:
// rs1==x28, rs2==x10, rd==x9, rs2_h3_val == 21845, rs1_h1_val == 1, rs1_h0_val == 8, rs2_h1_val == 57343, rs2_h0_val == 49151, rs2_h2_val == 65527
// opcode: ukadd16 ; op1:x28; op2:x10; dest:x9; op1val:0xfffe000300010008;  op2val:0x5555fff7dfffbfff
TEST_PKRR_OP(ukadd16, x9, x28, x10, 0x0000000000000000, 0xfffe000300010008, 0x5555fff7dfffbfff, x28, x6, 80, x2)

inst_6:
// rs1==x8, rs2==x13, rd==x21, rs2_h3_val == 32767, rs2_h2_val == 57343, rs2_h1_val == 256, rs1_h1_val == 32768
// opcode: ukadd16 ; op1:x8; op2:x13; dest:x21; op1val:0x0e001180000000;  op2val:0x7fffdfff0100bfff
TEST_PKRR_OP(ukadd16, x21, x8, x13, 0x0000000000000000, 0x0e001180000000, 0x7fffdfff0100bfff, x8, x6, 96, x2)

inst_7:
// rs1==x7, rs2==x25, rd==x19, rs2_h3_val == 49151, rs2_h2_val == 4, rs1_h1_val == 65503, rs2_h0_val == 0, rs2_h1_val == 65023, rs1_h0_val == 512
// opcode: ukadd16 ; op1:x7; op2:x25; dest:x19; op1val:0x0caaaaffdf0200;  op2val:0xbfff0004fdff0000
TEST_PKRR_OP(ukadd16, x19, x7, x25, 0x0000000000000000, 0x0caaaaffdf0200, 0xbfff0004fdff0000, x7, x6, 112, x2)

inst_8:
// rs1==x0, rs2==x15, rd==x18, rs2_h3_val == 57343, rs1_h2_val == 57343, rs2_h2_val == 512, rs1_h0_val == 8192, rs1_h1_val == 65471, rs1_h3_val == 2, rs2_h1_val == 65471
// opcode: ukadd16 ; op1:x0; op2:x15; dest:x18; op1val:0x02dfffffbf2000;  op2val:0xdfff0200ffbfbfff
TEST_PKRR_OP(ukadd16, x18, x0, x15, 0x0000000000000000, 0x02dfffffbf2000, 0xdfff0200ffbfbfff, x0, x6, 128, x2)

inst_9:
// rs1==x22, rs2==x9, rd==x26, rs2_h3_val == 61439, rs1_h2_val == 65527, rs1_h0_val == 1024, rs1_h3_val == 65519
// opcode: ukadd16 ; op1:x22; op2:x9; dest:x26; op1val:0xffeffff7000a0400;  op2val:0xefff0004000a0012
TEST_PKRR_OP(ukadd16, x26, x22, x9, 0x0000000000000000, 0xffeffff7000a0400, 0xefff0004000a0012, x22, x6, 144, x2)

inst_10:
// rs1==x24, rs2==x11, rd==x29, rs2_h3_val == 63487, rs2_h0_val == 65471, rs2_h1_val == 16384, rs1_h3_val == 512, rs2_h2_val == 61439, rs1_h1_val == 256
// opcode: ukadd16 ; op1:x24; op2:x11; dest:x29; op1val:0x200000701000003;  op2val:0xf7ffefff4000ffbf
TEST_PKRR_OP(ukadd16, x29, x24, x11, 0x0000000000000000, 0x200000701000003, 0xf7ffefff4000ffbf, x24, x6, 160, x2)

inst_11:
// rs1==x3, rs2==x4, rd==x14, rs2_h3_val == 64511, rs2_h1_val == 32768, rs1_h3_val == 65503, rs2_h2_val == 8, rs1_h0_val == 65471, rs1_h2_val == 64, rs1_h1_val == 512
// opcode: ukadd16 ; op1:x3; op2:x4; dest:x14; op1val:0xffdf00400200ffbf;  op2val:0xfbff00088000000a
TEST_PKRR_OP(ukadd16, x14, x3, x4, 0x0000000000000000, 0xffdf00400200ffbf, 0xfbff00088000000a, x3, x6, 176, x2)

inst_12:
// rs1==x16, rs2==x20, rd==x3, rs2_h3_val == 65023, rs1_h1_val == 1024, rs2_h2_val == 32, rs2_h0_val == 8192, rs1_h2_val == 65535
// opcode: ukadd16 ; op1:x16; op2:x20; dest:x3; op1val:0x0fffff0400000c;  op2val:0xfdff002001002000
TEST_PKRR_OP(ukadd16, x3, x16, x20, 0x0000000000000000, 0x0fffff0400000c, 0xfdff002001002000, x16, x6, 192, x2)

inst_13:
// rs1==x15, rs2==x7, rd==x12, rs2_h3_val == 65279, rs2_h2_val == 64, rs1_h1_val == 65023, rs1_h3_val == 65471
// opcode: ukadd16 ; op1:x15; op2:x7; dest:x12; op1val:0xffbfaaaafdff0012;  op2val:0xfeff004000060011
TEST_PKRR_OP(ukadd16, x12, x15, x7, 0x0000000000000000, 0xffbfaaaafdff0012, 0xfeff004000060011, x15, x6, 208, x2)

inst_14:
// rs1==x5, rs2==x24, rd==x2, rs2_h3_val == 65471, rs1_h1_val == 0, rs2_h2_val == 128, rs1_h3_val == 65531, rs1_h2_val == 2048, rs1_h0_val == 32768
// opcode: ukadd16 ; op1:x5; op2:x24; dest:x2; op1val:0xfffb080000008000;  op2val:0xffbf0080000a0006
TEST_PKRR_OP(ukadd16, x2, x5, x24, 0x0000000000000000, 0xfffb080000008000, 0xffbf0080000a0006, x5, x6, 224, x4)
RVTEST_SIGBASE(x10,signature_x10_0)

inst_15:
// rs1==x11, rs2==x1, rd==x15, rs2_h3_val == 65503, rs2_h1_val == 4, rs2_h2_val == 2048, rs2_h0_val == 64
// opcode: ukadd16 ; op1:x11; op2:x1; dest:x15; op1val:0x800000602001000;  op2val:0xffdf080000040040
TEST_PKRR_OP(ukadd16, x15, x11, x1, 0x0000000000000000, 0x800000602001000, 0xffdf080000040040, x11, x10, 0, x4)

inst_16:
// rs1==x26, rs2==x6, rd==x28, rs2_h3_val == 65527, rs2_h1_val == 128, rs2_h0_val == 65534
// opcode: ukadd16 ; op1:x26; op2:x6; dest:x28; op1val:0x05000c0009000e;  op2val:0xfff700400080fffe
TEST_PKRR_OP(ukadd16, x28, x26, x6, 0x0000000000000000, 0x05000c0009000e, 0xfff700400080fffe, x26, x10, 16, x4)

inst_17:
// rs1==x19, rs2==x29, rd==x31, rs2_h3_val == 65531, rs1_h2_val == 16384, rs1_h1_val == 8192
// opcode: ukadd16 ; op1:x19; op2:x29; dest:x31; op1val:0x02400020000009;  op2val:0xfffb000bfdffffef
TEST_PKRR_OP(ukadd16, x31, x19, x29, 0x0000000000000000, 0x02400020000009, 0xfffb000bfdffffef, x19, x10, 32, x4)

inst_18:
// rs1==x2, rs2==x14, rd==x22, rs2_h3_val == 65533, rs1_h2_val == 2, rs1_h1_val == 57343, rs2_h2_val == 65533
// opcode: ukadd16 ; op1:x2; op2:x14; dest:x22; op1val:0x0e0002dfff0007;  op2val:0xfffdfffd0006000c
TEST_PKRR_OP(ukadd16, x22, x2, x14, 0x0000000000000000, 0x0e0002dfff0007, 0xfffdfffd0006000c, x2, x10, 48, x4)

inst_19:
// rs1==x29, rs2==x0, rd==x16, rs2_h3_val == 65534, rs1_h3_val == 128, rs2_h2_val == 2
// opcode: ukadd16 ; op1:x29; op2:x0; dest:x16; op1val:0x800013ffbf0012;  op2val:0xfffe00020005fffe
TEST_PKRR_OP(ukadd16, x16, x29, x0, 0x0000000000000000, 0x800013ffbf0012, 0xfffe00020005fffe, x29, x10, 64, x4)

inst_20:
// rs1==x23, rs2==x26, rd==x7, rs2_h3_val == 32768, rs1_h1_val == 32, rs2_h0_val == 4096, rs1_h2_val == 256, rs2_h1_val == 4096
// opcode: ukadd16 ; op1:x23; op2:x26; dest:x7; op1val:0xffdf010000200013;  op2val:0x8000040010001000
TEST_PKRR_OP(ukadd16, x7, x23, x26, 0x0000000000000000, 0xffdf010000200013, 0x8000040010001000, x23, x10, 80, x4)

inst_21:
// rs1==x13, rs2==x28, rd==x25, rs2_h3_val == 16384, rs1_h3_val == 21845, rs1_h1_val == 49151, rs2_h1_val == 8
// opcode: ukadd16 ; op1:x13; op2:x28; dest:x25; op1val:0x55550007bfff0013;  op2val:0x400002000008ffbf
TEST_PKRR_OP(ukadd16, x25, x13, x28, 0x0000000000000000, 0x55550007bfff0013, 0x400002000008ffbf, x13, x10, 96, x4)

inst_22:
// rs1==x20, rs2==x19, rd==x5, rs2_h3_val == 8192, rs2_h1_val == 1024
// opcode: ukadd16 ; op1:x20; op2:x19; dest:x5; op1val:0x02001200060006;  op2val:0x200000800400000e
TEST_PKRR_OP(ukadd16, x5, x20, x19, 0x0000000000000000, 0x02001200060006, 0x200000800400000e, x20, x10, 112, x4)

inst_23:
// rs1==x9, rs2==x2, rd==x11, rs2_h3_val == 4096, rs1_h1_val == 4, rs1_h0_val == 57343, rs2_h1_val == 65534, rs1_h2_val == 65407
// opcode: ukadd16 ; op1:x9; op2:x2; dest:x11; op1val:0xffbfff7f0004dfff;  op2val:0x1000000dfffe0000
TEST_PKRR_OP(ukadd16, x11, x9, x2, 0x0000000000000000, 0xffbfff7f0004dfff, 0x1000000dfffe0000, x9, x10, 128, x4)

inst_24:
// rs1==x12, rs2==x21, rd==x8, rs2_h3_val == 1024, rs2_h0_val == 32768, rs1_h0_val == 64511, rs1_h1_val == 65527, rs2_h2_val == 64511, rs2_h1_val == 49151
// opcode: ukadd16 ; op1:x12; op2:x21; dest:x8; op1val:0xfffb0040fff7fbff;  op2val:0x400fbffbfff8000
TEST_PKRR_OP(ukadd16, x8, x12, x21, 0x0000000000000000, 0xfffb0040fff7fbff, 0x400fbffbfff8000, x12, x10, 144, x4)

inst_25:
// rs1==x27, rs2==x3, rd==x13, rs2_h3_val == 512, rs1_h2_val == 65503, rs1_h0_val == 4
// opcode: ukadd16 ; op1:x27; op2:x3; dest:x13; op1val:0x200ffdf04000004;  op2val:0x2000002000f0011
TEST_PKRR_OP(ukadd16, x13, x27, x3, 0x0000000000000000, 0x200ffdf04000004, 0x2000002000f0011, x27, x10, 160, x4)

inst_26:
// rs1==x31, rs2==x30, rd==x27, rs2_h3_val == 256, rs2_h0_val == 16, rs1_h0_val == 2
// opcode: ukadd16 ; op1:x31; op2:x30; dest:x27; op1val:0x13aaaa00010002;  op2val:0x100001100070010
TEST_PKRR_OP(ukadd16, x27, x31, x30, 0x0000000000000000, 0x13aaaa00010002, 0x100001100070010, x31, x10, 176, x3)

inst_27:
// rs1==x25, rs2==x22, rd==x4, rs2_h3_val == 128, rs1_h2_val == 65519, rs2_h2_val == 4096, rs1_h3_val == 4096, rs2_h1_val == 1
// opcode: ukadd16 ; op1:x25; op2:x22; dest:x4; op1val:0x1000ffef0001ffbf;  op2val:0x80100000010003
TEST_PKRR_OP(ukadd16, x4, x25, x22, 0x0000000000000000, 0x1000ffef0001ffbf, 0x80100000010003, x25, x10, 192, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_28:
// rs1==x21, rs2==x27, rd==x30, rs2_h3_val == 64, rs1_h2_val == 64511, rs2_h0_val == 128
// opcode: ukadd16 ; op1:x21; op2:x27; dest:x30; op1val:0x13fbff80000012;  op2val:0x40fffffffe0080
TEST_PKRR_OP(ukadd16, x30, x21, x27, 0x0000000000000000, 0x13fbff80000012, 0x40fffffffe0080, x21, x2, 0, x3)

inst_29:
// rs1==x6, rs2==x5, rd==x24, rs2_h3_val == 32, rs1_h3_val == 49151, rs1_h1_val == 64, rs2_h2_val == 21845
// opcode: ukadd16 ; op1:x6; op2:x5; dest:x24; op1val:0xbfff000d00401000;  op2val:0x20555580000006
TEST_PKRR_OP(ukadd16, x24, x6, x5, 0x0000000000000000, 0xbfff000d00401000, 0x20555580000006, x6, x2, 16, x3)

inst_30:
// rs1==x1, rs2==x31, rd==x6, rs2_h3_val == 16, rs2_h0_val == 2048, rs1_h3_val == 0, rs1_h1_val == 32767
// opcode: ukadd16 ; op1:x1; op2:x31; dest:x6; op1val:0x0000407fff0008;  op2val:0x10fffffdff0800
TEST_PKRR_OP(ukadd16, x6, x1, x31, 0x0000000000000000, 0x0000407fff0008, 0x10fffffdff0800, x1, x2, 32, x3)

inst_31:
// rs1==x4, rs2==x12, rd==x0, rs2_h3_val == 8, rs2_h2_val == 16384, rs2_h1_val == 63487
// opcode: ukadd16 ; op1:x4; op2:x12; dest:x0; op1val:0x13000a20008000;  op2val:0x084000f7ff000b
TEST_PKRR_OP(ukadd16, x0, x4, x12, 0x0000000000000000, 0x13000a20008000, 0x084000f7ff000b, x4, x2, 48, x3)

inst_32:
// rs2_h3_val == 4, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x020009000d000c;  op2val:0x04fffd01000007
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x020009000d000c, 0x04fffd01000007, x30, x2, 64, x3)

inst_33:
// rs2_h3_val == 2, rs2_h0_val == 32, rs1_h3_val == 16384, rs1_h2_val == 65533, rs1_h0_val == 32
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000fffd000f0020;  op2val:0x020800fdff0020
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x4000fffd000f0020, 0x020800fdff0020, x30, x2, 80, x3)

inst_34:
// rs2_h3_val == 1, rs2_h0_val == 65531, rs2_h1_val == 8192
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0a0011fffd0003;  op2val:0x0100402000fffb
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x0a0011fffd0003, 0x0100402000fffb, x30, x2, 96, x3)

inst_35:
// rs2_h3_val == 65535, rs1_h2_val == 8192, rs1_h0_val == 65527, rs2_h1_val == 61439, rs2_h2_val == 65519, rs2_h0_val == 65279
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0f20000009fff7;  op2val:0xffffffefeffffeff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x0f20000009fff7, 0xffffffefeffffeff, x30, x2, 112, x3)

inst_36:
// rs1_h1_val == 2, rs1_h3_val == 256, rs2_h0_val == 64511
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x100001300020002;  op2val:0xf7ff0012ffbffbff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x100001300020002, 0xf7ff0012ffbffbff, x30, x2, 128, x3)

inst_37:
// rs1_h0_val == 43690, rs1_h2_val == 32767, rs1_h3_val == 57343, rs2_h0_val == 65407
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfff7fff0020aaaa;  op2val:0x1000000c000bff7f
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xdfff7fff0020aaaa, 0x1000000c000bff7f, x30, x2, 144, x3)

inst_38:
// rs1_h0_val == 21845, rs1_h2_val == 49151
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x100bfff00205555;  op2val:0xefffdfff00120013
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x100bfff00205555, 0xefffdfff00120013, x30, x2, 160, x3)

inst_39:
// rs1_h0_val == 32767, rs2_h2_val == 49151, rs2_h1_val == 43690, rs1_h2_val == 63487
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbf7ff000a7fff;  op2val:0xfffdbfffaaaa0003
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xfffbf7ff000a7fff, 0xfffdbfffaaaa0003, x30, x2, 176, x3)

inst_40:
// rs1_h0_val == 49151, rs1_h1_val == 64511, rs2_h2_val == 65503, rs2_h1_val == 21845
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x040800fbffbfff;  op2val:0xfffdffdf5555000b
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x040800fbffbfff, 0xfffdffdf5555000b, x30, x2, 192, x3)

inst_41:
// rs1_h0_val == 61439, rs2_h1_val == 2, rs1_h1_val == 21845, rs1_h2_val == 65534, rs2_h2_val == 65407
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000fffe5555efff;  op2val:0x4000ff7f00020010
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x1000fffe5555efff, 0x4000ff7f00020010, x30, x2, 208, x3)

inst_42:
// rs1_h0_val == 63487, rs1_h3_val == 65527, rs2_h0_val == 32767
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff700050009f7ff;  op2val:0x11dffffffd7fff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xfff700050009f7ff, 0x11dffffffd7fff, x30, x2, 224, x3)

inst_43:
// rs1_h0_val == 65023, rs2_h1_val == 32, rs2_h0_val == 43690, rs1_h3_val == 61439, rs1_h2_val == 21845, rs2_h2_val == 32768
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff55550020fdff;  op2val:0x0e80000020aaaa
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xefff55550020fdff, 0x0e80000020aaaa, x30, x2, 240, x3)

inst_44:
// rs1_h0_val == 65279, rs2_h1_val == 65531, rs2_h0_val == 61439, rs2_h2_val == 65279
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x06000e7ffffeff;  op2val:0xfbfffefffffbefff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x06000e7ffffeff, 0xfbfffefffffbefff, x30, x2, 256, x3)

inst_45:
// rs1_h0_val == 65407, rs1_h1_val == 8
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x100bfff0008ff7f;  op2val:0x11efff01000200
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x100bfff0008ff7f, 0x11efff01000200, x30, x2, 272, x3)

inst_46:
// rs1_h0_val == 65519, rs2_h0_val == 65527, rs1_h2_val == 4, rs2_h1_val == 65519, rs1_h3_val == 63487
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff0004000cffef;  op2val:0xbfffffffffeffff7
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xf7ff0004000cffef, 0xbfffffffffeffff7, x30, x2, 288, x3)

inst_47:
// rs1_h0_val == 65531, rs1_h2_val == 32768
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x048000000dfffb;  op2val:0x05001200090011
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x048000000dfffb, 0x05001200090011, x30, x2, 304, x3)

inst_48:
// rs1_h0_val == 65533, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x800ff7fffbffffd;  op2val:0xffdf0002fffb0007
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x800ff7fffbffffd, 0xffdf0002fffb0007, x30, x2, 320, x3)

inst_49:
// rs1_h0_val == 65534, rs1_h1_val == 63487, rs1_h2_val == 1024, rs2_h2_val == 32767
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000400f7fffffe;  op2val:0x077ffffffefff7
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x10000400f7fffffe, 0x077ffffffefff7, x30, x2, 336, x3)

inst_50:
// rs1_h0_val == 16384, rs1_h1_val == 2048
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0b000408004000;  op2val:0x05000a8000000d
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x0b000408004000, 0x05000a8000000d, x30, x2, 352, x3)

inst_51:
// rs1_h0_val == 2048, rs2_h2_val == 16, rs2_h1_val == 2048
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x200ffef20000800;  op2val:0xaaaa00100800ffbf
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x200ffef20000800, 0xaaaa00100800ffbf, x30, x2, 368, x3)

inst_52:
// rs1_h0_val == 256, rs2_h0_val == 2
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffeffff70100;  op2val:0x07000cffbf0002
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xfff7ffeffff70100, 0x07000cffbf0002, x30, x2, 384, x3)

inst_53:
// rs1_h0_val == 128, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffef000700400080;  op2val:0x0abfffbfff0011
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xffef000700400080, 0x0abfffbfff0011, x30, x2, 400, x3)

inst_54:
// rs1_h0_val == 64, rs2_h0_val == 65533
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xeffffffdfffd0040;  op2val:0x0440000020fffd
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xeffffffdfffd0040, 0x0440000020fffd, x30, x2, 416, x3)

inst_55:
// rs2_h0_val == 65503, rs1_h1_val == 65519
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x040008ffefffef;  op2val:0xfffd00070009ffdf
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x040008ffefffef, 0xfffd00070009ffdf, x30, x2, 432, x3)

inst_56:
// rs2_h0_val == 16384, rs1_h3_val == 32768
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x800000080800ffff;  op2val:0xfbff0004bfff4000
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x800000080800ffff, 0xfbff0004bfff4000, x30, x2, 448, x3)

inst_57:
// rs2_h0_val == 256, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e001300060009;  op2val:0x125555dfff0100
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x0e001300060009, 0x125555dfff0100, x30, x2, 464, x3)

inst_58:
// rs2_h0_val == 8, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x09000b0040000b;  op2val:0x02000500120008
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x09000b0040000b, 0x02000500120008, x30, x2, 480, x3)

inst_59:
// rs2_h0_val == 4, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000002000f0003;  op2val:0x200200fdff0004
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x10000002000f0003, 0x200200fdff0004, x30, x2, 496, x3)

inst_60:
// rs2_h0_val == 1, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfffdfffffffbfff;  op2val:0x0c0005000d0001
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xbfffdfffffffbfff, 0x0c0005000d0001, x30, x2, 512, x3)

inst_61:
// rs1_h3_val == 43690, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa0002fffb0008;  op2val:0xff7f000800091000
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xaaaa0002fffb0008, 0xff7f000800091000, x30, x2, 528, x3)

inst_62:
// rs1_h3_val == 32767, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0003fffbffef;  op2val:0xffff00125555000e
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x7fff0003fffbffef, 0xffff00125555000e, x30, x2, 544, x3)

inst_63:
// rs1_h3_val == 64511, rs2_h2_val == 1
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff80000009fff7;  op2val:0x80000001ffbf2000
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xfbff80000009fff7, 0x80000001ffbf2000, x30, x2, 560, x3)

inst_64:
// rs1_h3_val == 65023, rs2_h2_val == 63487
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff000e00037fff;  op2val:0x0df7ff80002000
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xfdff000e00037fff, 0x0df7ff80002000, x30, x2, 576, x3)

inst_65:
// rs1_h0_val == 16, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0afffe000e0010;  op2val:0x09ffff00041000
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x0afffe000e0010, 0x09ffff00041000, x30, x2, 592, x3)

inst_66:
// rs1_h3_val == 65279, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff002004005555;  op2val:0x09fffd000c000d
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xfeff002004005555, 0x09fffd000c000d, x30, x2, 608, x3)

inst_67:
// rs1_h3_val == 65407, rs2_h1_val == 0
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f0004fffbff7f;  op2val:0xfbff080000000400
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xff7f0004fffbff7f, 0xfbff080000000400, x30, x2, 624, x3)

inst_68:
// rs1_h0_val == 1, rs1_h3_val == 1, rs1_h2_val == 128
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x01008002000001;  op2val:0x0104000400fffd
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x01008002000001, 0x0104000400fffd, x30, x2, 640, x3)

inst_69:
// rs1_h3_val == 65533, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff000bffbf;  op2val:0x0f4000fdffffbf
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xfffdffff000bffbf, 0x0f4000fdffffbf, x30, x2, 656, x3)

inst_70:
// rs2_h3_val == 0, rs1_h1_val == 65534
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0080fffe0080;  op2val:0x000004aaaaffbf
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xfeff0080fffe0080, 0x000004aaaaffbf, x30, x2, 672, x3)

inst_71:
// rs2_h2_val == 43690, rs2_h1_val == 65407, rs1_h3_val == 65535
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffff0013dfffdfff;  op2val:0x0faaaaff7ffff7
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xffff0013dfffdfff, 0x0faaaaff7ffff7, x30, x2, 688, x3)

inst_72:
// rs1_h3_val == 8192, rs2_h2_val == 8192, rs1_h1_val == 4096
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000b10000800;  op2val:0xffef2000000b1000
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x2000000b10000800, 0xffef2000000b1000, x30, x2, 704, x3)

inst_73:
// rs1_h3_val == 1024, rs1_h2_val == 0
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000000ffdf0001;  op2val:0xffefff7f00000100
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x4000000ffdf0001, 0xffefff7f00000100, x30, x2, 720, x3)

inst_74:
// rs1_h2_val == 61439, rs2_h1_val == 65535
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x00effff7ff000c;  op2val:0x200005ffff0004
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x00effff7ff000c, 0x200005ffff0004, x30, x2, 736, x3)

inst_75:
// rs1_h2_val == 65023, rs2_h1_val == 65279, rs1_h3_val == 32
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x20fdfff7ffbfff;  op2val:0x13fbfffeff000b
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x20fdfff7ffbfff, 0x13fbfffeff000b, x30, x2, 752, x3)

inst_76:
// rs2_h2_val == 256, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff000dffdfaaaa;  op2val:0x0b0100ffef0007
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xf7ff000dffdfaaaa, 0x0b0100ffef0007, x30, x2, 768, x3)

inst_77:
// rs1_h2_val == 65279, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffeffefffffeefff;  op2val:0x071000dfff0012
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xffeffefffffeefff, 0x071000dfff0012, x30, x2, 784, x3)

inst_78:
// rs1_h2_val == 65531, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0dfffbfbffffff;  op2val:0xfeff0010f7ff0006
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x0dfffbfbffffff, 0xfeff0010f7ff0006, x30, x2, 800, x3)

inst_79:
// rs1_h2_val == 4096, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff10000200fff7;  op2val:0xffff0005aaaa0009
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xfdff10000200fff7, 0xffff0005aaaa0009, x30, x2, 816, x3)

inst_80:
// rs1_h1_val == 16, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x400fff70010bfff;  op2val:0xfefffbffaaaa0013
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x400fff70010bfff, 0xfefffbffaaaa0013, x30, x2, 832, x3)

inst_81:
// rs1_h2_val == 512, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x130200fdfffeff;  op2val:0x80000041000feff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x130200fdfffeff, 0x80000041000feff, x30, x2, 848, x3)

inst_82:
// rs2_h1_val == 64511, rs1_h2_val == 1
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf0001efff0800;  op2val:0x094000fbff000a
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xffdf0001efff0800, 0x094000fbff000a, x30, x2, 864, x3)

inst_83:
// rs2_h1_val == 65503, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff0400000e4000;  op2val:0x800005ffdf8000
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xbfff0400000e4000, 0x800005ffdf8000, x30, x2, 880, x3)

inst_84:
// rs1_h1_val == 43690, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d0009aaaafeff;  op2val:0x0b0800bfffffbf
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x0d0009aaaafeff, 0x0b0800bfffffbf, x30, x2, 896, x3)

inst_85:
// rs2_h1_val == 512, rs1_h1_val == 128
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x03efff00800012;  op2val:0x20000110200ff7f
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x03efff00800012, 0x20000110200ff7f, x30, x2, 912, x3)

inst_86:
// rs1_h1_val == 65407, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x00feffff7f0000;  op2val:0xffbf00060200000d
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x00feffff7f0000, 0xffbf00060200000d, x30, x2, 928, x3)

inst_87:
// rs2_h1_val == 64, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0800fdff0007;  op2val:0xffdf01000040000c
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xfdff0800fdff0007, 0xffdf01000040000c, x30, x2, 944, x3)

inst_88:
// rs2_h1_val == 16, rs1_h3_val == 16
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x100001ffff0080;  op2val:0x10000800010fffd
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x100001ffff0080, 0x10000800010fffd, x30, x2, 960, x3)

inst_89:
// rs1_h3_val == 64, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x400009000dfff7;  op2val:0x10000602002000
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x400009000dfff7, 0x10000602002000, x30, x2, 976, x3)

inst_90:
// rs1_h1_val == 16384, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x0dfffe40008000;  op2val:0x0e000040007fff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x0dfffe40008000, 0x0e000040007fff, x30, x2, 992, x3)

inst_91:
// rs2_h2_val == 65023, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x044000efff0002;  op2val:0x05fdff0003fffb
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x044000efff0002, 0x05fdff0003fffb, x30, x2, 1008, x3)

inst_92:
// rs2_h0_val == 21845, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff000c000a0005;  op2val:0xffdf0200feff5555
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0xbfff000c000a0005, 0xffdf0200feff5555, x30, x2, 1024, x3)

inst_93:
// rs1_h3_val == 8, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x08040000400005;  op2val:0x05dfff7fff0009
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x08040000400005, 0x05dfff7fff0009, x30, x2, 1040, x3)

inst_94:
// rs2_h0_val == 63487, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x400001ffbfdfff;  op2val:0x0700801000f7ff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x400001ffbfdfff, 0x0700801000f7ff, x30, x2, 1056, x3)

inst_95:
// rs2_h2_val == 65531, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000004000c0080;  op2val:0x01fffb80000002
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x40000004000c0080, 0x01fffb80000002, x30, x2, 1072, x3)

inst_96:
// rs2_h0_val == 65023, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x050007ffff0006;  op2val:0x80000cfffffdff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x050007ffff0006, 0x80000cfffffdff, x30, x2, 1088, x3)

inst_97:
// rs2_h2_val == 65534, 
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x06010000050007;  op2val:0xfffefffef7ff0080
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x06010000050007, 0xfffefffef7ff0080, x30, x2, 1104, x3)

inst_98:
// rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h0_val == 65519, rs1_h1_val == 61439, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h2_val == 65471, rs2_h3_val == 43690, rs1_h0_val == 65503, rs2_h1_val == 32767, rs2_h2_val == 65471
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x06ffbfefffffdf;  op2val:0xaaaaffbf7fffffef
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x06ffbfefffffdf, 0xaaaaffbf7fffffef, x30, x2, 1120, x3)

inst_99:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 65533, rs2_h2_val == 65535, rs1_h1_val == 65533, rs2_h3_val == 65407, rs1_h3_val == 4, rs2_h0_val == 57343, rs1_h0_val == 4096, rs1_h2_val == 8
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x040008fffd1000;  op2val:0xff7ffffffffddfff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x040008fffd1000, 0xff7ffffffffddfff, x30, x2, 1136, x3)

inst_100:
// rs2_h3_val == 57343, rs1_h2_val == 57343, rs2_h2_val == 512, rs1_h0_val == 8192, rs1_h1_val == 65471, rs1_h3_val == 2, rs2_h1_val == 65471
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x02dfffffbf2000;  op2val:0xdfff0200ffbfbfff
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x02dfffffbf2000, 0xdfff0200ffbfbfff, x30, x2, 1152, x3)

inst_101:
// rs2_h3_val == 65534, rs1_h3_val == 128, rs2_h2_val == 2
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x800013ffbf0012;  op2val:0xfffe00020005fffe
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x800013ffbf0012, 0xfffe00020005fffe, x30, x2, 1168, x3)

inst_102:
// rs2_h3_val == 8, rs2_h2_val == 16384, rs2_h1_val == 63487
// opcode: ukadd16 ; op1:x30; op2:x29; dest:x31; op1val:0x13000a20008000;  op2val:0x084000f7ff000b
TEST_PKRR_OP(ukadd16, x31, x30, x29, 0x0000000000000000, 0x13000a20008000, 0x084000f7ff000b, x30, x2, 1184, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x6_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x6_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x10_0:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 150*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
