
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smin16 instruction of the RISC-V RV64PZicsr extension for the smin16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smin16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd != rs2, rs1==x15, rs2==x14, rd==x15, rs1_h0_val == -32768, rs1_h3_val != rs2_h3_val, rs1_h3_val < 0 and rs2_h3_val > 0, rs2_h2_val == -2049, rs1_h2_val == 512, rs1_h1_val == 4096, rs1_h2_val != rs2_h2_val, rs2_h1_val == -513, rs1_h2_val > 0 and rs2_h2_val < 0, rs1_h1_val != rs2_h1_val, rs1_h1_val > 0 and rs2_h1_val < 0, rs1_h0_val != rs2_h0_val, rs1_h0_val < 0 and rs2_h0_val > 0, rs2_h3_val == 4, rs1_h3_val == -2
// opcode: smin16 ; op1:x15; op2:x14; dest:x15; op1val:0xfffe020010008000;  op2val:0x04f7fffdff0003
TEST_RR_OP(smin16, x15, x15, x14, 0x0000000000000000, 0xfffe020010008000, 0x04f7fffdff0003, x1, 0, x9)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x18, rs2==x7, rd==x25, rs1_h3_val == rs2_h3_val, rs1_h0_val == -17, rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val < 0 and rs2_h2_val > 0, rs1_h1_val == 256, rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h2_val == 8, rs2_h1_val == 64
// opcode: smin16 ; op1:x18; op2:x7; dest:x25; op1val:0x03fff60100ffef;  op2val:0x03000800403fff
TEST_RR_OP(smin16, x25, x18, x7, 0x0000000000000000, 0x03fff60100ffef, 0x03000800403fff, x1, 8, x9)

inst_2:
// rs1 == rs2 != rd, rs1==x5, rs2==x5, rd==x22, rs1_h3_val < 0 and rs2_h3_val < 0, rs2_h1_val == 1, rs2_h2_val == -513, rs1_h2_val == 64, rs1_h3_val == -2049, rs1_h1_val < 0 and rs2_h1_val > 0, rs1_h0_val == -2049, rs1_h1_val == -16385, rs2_h0_val == 2048
// opcode: smin16 ; op1:x5; op2:x5; dest:x22; op1val:0xf7ff0040bffff7ff;  op2val:0xfff8fdff00010800
TEST_RR_OP(smin16, x22, x5, x5, 0x0000000000000000, 0xf7ff0040bffff7ff, 0xfff8fdff00010800, x1, 16, x9)

inst_3:
// rs1 == rs2 == rd, rs1==x0, rs2==x0, rd==x0, rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 64, rs2_h3_val == -5, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h1_val == -3, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h2_val == -1025, rs2_h2_val == 128, rs1_h1_val == -257
// opcode: smin16 ; op1:x0; op2:x0; dest:x0; op1val:0x40fbfffeff0006;  op2val:0xfffb0080fffdfffa
TEST_RR_OP(smin16, x0, x0, x0, 0x0000000000000000, 0x40fbfffeff0006, 0xfffb0080fffdfffa, x1, 24, x9)

inst_4:
// rs2 == rd != rs1, rs1==x29, rs2==x27, rd==x27, rs1_h2_val == rs2_h2_val, rs2_h0_val == 32, rs2_h2_val == -4097, rs1_h2_val < 0 and rs2_h2_val < 0, rs2_h1_val == -9, rs1_h2_val == -4097, rs1_h3_val == -65, rs2_h3_val == 21845, rs1_h0_val == -257
// opcode: smin16 ; op1:x29; op2:x27; dest:x27; op1val:0xffbfefff0006feff;  op2val:0x5555effffff70020
TEST_RR_OP(smin16, x27, x29, x27, 0x0000000000000000, 0xffbfefff0006feff, 0x5555effffff70020, x1, 32, x9)

inst_5:
// rs1==x3, rs2==x4, rd==x7, rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h2_val == 2048, rs1_h3_val == -4097, rs2_h3_val == 32, rs1_h1_val == -129, rs2_h0_val == 128
// opcode: smin16 ; op1:x3; op2:x4; dest:x7; op1val:0xefff0800ff7ffff8;  op2val:0x20000300070080
TEST_RR_OP(smin16, x7, x3, x4, 0x0000000000000000, 0xefff0800ff7ffff8, 0x20000300070080, x1, 40, x9)

inst_6:
// rs1==x21, rs2==x26, rd==x20, rs1_h1_val == rs2_h1_val, rs2_h0_val == 32767, rs1_h1_val == 1024, rs2_h3_val == -2, rs1_h3_val == 32767, rs2_h2_val == -32768, rs1_h0_val > 0 and rs2_h0_val > 0, rs2_h1_val == 1024
// opcode: smin16 ; op1:x21; op2:x26; dest:x20; op1val:0x7fff000904000007;  op2val:0xfffe800004007fff
TEST_RR_OP(smin16, x20, x21, x26, 0x0000000000000000, 0x7fff000904000007, 0xfffe800004007fff, x1, 48, x9)

inst_7:
// rs1==x14, rs2==x8, rd==x13, rs1_h0_val == rs2_h0_val, rs2_h3_val == -513, rs1_h0_val == 8, rs2_h0_val == 8, rs1_h3_val == 0
// opcode: smin16 ; op1:x14; op2:x8; dest:x13; op1val:0x00efffff7f0008;  op2val:0xfdfffdfffff60008
TEST_RR_OP(smin16, x13, x14, x8, 0x0000000000000000, 0x00efffff7f0008, 0xfdfffdfffff60008, x1, 56, x9)

inst_8:
// rs1==x16, rs2==x22, rd==x17, rs1_h0_val < 0 and rs2_h0_val < 0, rs1_h2_val == 256, rs2_h0_val == -16385, rs2_h2_val == 16384, rs1_h1_val == 2, rs1_h3_val == -33, rs2_h1_val == 256
// opcode: smin16 ; op1:x16; op2:x22; dest:x17; op1val:0xffdf01000002ffef;  op2val:0x0940000100bfff
TEST_RR_OP(smin16, x17, x16, x22, 0x0000000000000000, 0xffdf01000002ffef, 0x0940000100bfff, x1, 64, x9)

inst_9:
// rs1==x2, rs2==x13, rd==x28, rs2_h3_val == -21846, rs1_h2_val == -1, rs1_h0_val == -4097, rs1_h1_val == -65
// opcode: smin16 ; op1:x2; op2:x13; dest:x28; op1val:0x06ffffffbfefff;  op2val:0xaaaafff80005c000
TEST_RR_OP(smin16, x28, x2, x13, 0x0000000000000000, 0x06ffffffbfefff, 0xaaaafff80005c000, x1, 72, x9)

inst_10:
// rs1==x24, rs2==x23, rd==x11, rs2_h3_val == 32767, rs2_h2_val == -8193, rs1_h2_val == 32767, rs1_h1_val == -4097, rs2_h1_val == 8
// opcode: smin16 ; op1:x24; op2:x23; dest:x11; op1val:0xfffe7fffeffffffa;  op2val:0x7fffdfff0008fffc
TEST_RR_OP(smin16, x11, x24, x23, 0x0000000000000000, 0xfffe7fffeffffffa, 0x7fffdfff0008fffc, x1, 80, x9)

inst_11:
// rs1==x30, rs2==x15, rd==x23, rs2_h3_val == -16385, rs2_h1_val == 4, rs1_h2_val == -21846
// opcode: smin16 ; op1:x30; op2:x15; dest:x23; op1val:0x05aaaaffbffffa;  op2val:0xbfff800000040080
TEST_RR_OP(smin16, x23, x30, x15, 0x0000000000000000, 0x05aaaaffbffffa, 0xbfff800000040080, x1, 88, x9)

inst_12:
// rs1==x6, rs2==x2, rd==x4, rs2_h3_val == -8193, rs1_h3_val == 128, rs2_h0_val == -2049, rs1_h2_val == -16385, rs1_h1_val == -8193, rs2_h2_val == 1
// opcode: smin16 ; op1:x6; op2:x2; dest:x4; op1val:0x80bfffdfff0006;  op2val:0xdfff00010100f7ff
TEST_RR_OP(smin16, x4, x6, x2, 0x0000000000000000, 0x80bfffdfff0006, 0xdfff00010100f7ff, x1, 96, x9)

inst_13:
// rs1==x23, rs2==x29, rd==x16, rs2_h3_val == -4097, rs2_h1_val == 0, rs1_h3_val == -17, rs2_h2_val == -2
// opcode: smin16 ; op1:x23; op2:x29; dest:x16; op1val:0xffeffff80005ffef;  op2val:0xeffffffe0000fff8
TEST_RR_OP(smin16, x16, x23, x29, 0x0000000000000000, 0xffeffff80005ffef, 0xeffffffe0000fff8, x1, 104, x9)

inst_14:
// rs1==x26, rs2==x28, rd==x19, rs2_h3_val == -2049, rs2_h2_val == 4, rs2_h0_val == 512, rs1_h1_val == 16
// opcode: smin16 ; op1:x26; op2:x28; dest:x19; op1val:0x40ffff0010c000;  op2val:0xf7ff0004fdff0200
TEST_RR_OP(smin16, x19, x26, x28, 0x0000000000000000, 0x40ffff0010c000, 0xf7ff0004fdff0200, x1, 112, x9)

inst_15:
// rs1==x17, rs2==x24, rd==x21, rs2_h3_val == -1025, rs2_h1_val == -8193, rs2_h0_val == -17, rs1_h0_val == 4, rs2_h2_val == 256, rs1_h3_val == 16384
// opcode: smin16 ; op1:x17; op2:x24; dest:x21; op1val:0x4000ffff00050004;  op2val:0xfbff0100dfffffef
TEST_RR_OP(smin16, x21, x17, x24, 0x0000000000000000, 0x4000ffff00050004, 0xfbff0100dfffffef, x1, 120, x15)

inst_16:
// rs1==x13, rs2==x10, rd==x6, rs2_h3_val == -257, rs1_h1_val == 64, rs1_h2_val == 128
// opcode: smin16 ; op1:x13; op2:x10; dest:x6; op1val:0xc000008000400008;  op2val:0xfeff008000060200
TEST_RR_OP(smin16, x6, x13, x10, 0x0000000000000000, 0xc000008000400008, 0xfeff008000060200, x1, 128, x15)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_17:
// rs1==x19, rs2==x17, rd==x24, rs2_h3_val == -129, rs1_h3_val == 512, rs1_h1_val == -3, rs1_h2_val == 8, rs1_h0_val == -16385, rs2_h2_val == 21845
// opcode: smin16 ; op1:x19; op2:x17; dest:x24; op1val:0x2000008fffdbfff;  op2val:0xff7f555500080008
TEST_RR_OP(smin16, x24, x19, x17, 0x0000000000000000, 0x2000008fffdbfff, 0xff7f555500080008, x4, 0, x15)

inst_18:
// rs1==x28, rs2==x3, rd==x14, rs2_h3_val == -65, rs2_h0_val == 2, rs2_h1_val == -257, rs1_h0_val == 512, rs2_h2_val == -3, rs1_h3_val == -1025
// opcode: smin16 ; op1:x28; op2:x3; dest:x14; op1val:0xfbff0005efff0200;  op2val:0xffbffffdfeff0002
TEST_RR_OP(smin16, x14, x28, x3, 0x0000000000000000, 0xfbff0005efff0200, 0xffbffffdfeff0002, x4, 8, x15)

inst_19:
// rs1==x8, rs2==x12, rd==x29, rs2_h3_val == -33, rs1_h0_val == -2, rs2_h0_val == 0, rs1_h1_val == 512, rs2_h1_val == 128, rs1_h3_val == 2048
// opcode: smin16 ; op1:x8; op2:x12; dest:x29; op1val:0x8003fff0200fffe;  op2val:0xffdffff900800000
TEST_RR_OP(smin16, x29, x8, x12, 0x0000000000000000, 0x8003fff0200fffe, 0xffdffff900800000, x4, 16, x15)

inst_20:
// rs1==x25, rs2==x21, rd==x18, rs2_h3_val == -17, rs1_h2_val == 2, rs2_h2_val == 2, rs1_h0_val == -8193, rs2_h1_val == 32, rs1_h3_val == 4096
// opcode: smin16 ; op1:x25; op2:x21; dest:x18; op1val:0x10000002ffbfdfff;  op2val:0xffef000200200007
TEST_RR_OP(smin16, x18, x25, x21, 0x0000000000000000, 0x10000002ffbfdfff, 0xffef000200200007, x4, 24, x15)

inst_21:
// rs1==x12, rs2==x16, rd==x10, rs2_h3_val == -9, rs2_h0_val == -8193, rs1_h3_val == 8192, rs1_h2_val == 0
// opcode: smin16 ; op1:x12; op2:x16; dest:x10; op1val:0x20000000fffcfffa;  op2val:0xfff7fffefff6dfff
TEST_RR_OP(smin16, x10, x12, x16, 0x0000000000000000, 0x20000000fffcfffa, 0xfff7fffefff6dfff, x4, 32, x15)

inst_22:
// rs1==x20, rs2==x30, rd==x1, rs2_h3_val == -3, rs2_h2_val == 4096, rs1_h0_val == 256, rs2_h0_val == -2, rs1_h2_val == -32768
// opcode: smin16 ; op1:x20; op2:x30; dest:x1; op1val:0x098000ffbf0100;  op2val:0xfffd10000040fffe
TEST_RR_OP(smin16, x1, x20, x30, 0x0000000000000000, 0x098000ffbf0100, 0xfffd10000040fffe, x4, 40, x15)

inst_23:
// rs1==x11, rs2==x18, rd==x26, rs2_h3_val == -32768, rs2_h1_val == 21845, rs1_h0_val == -3, rs1_h1_val == 32, rs2_h2_val == 8192, rs2_h0_val == 8192
// opcode: smin16 ; op1:x11; op2:x18; dest:x26; op1val:0xfffefff60020fffd;  op2val:0x8000200055552000
TEST_RR_OP(smin16, x26, x11, x18, 0x0000000000000000, 0xfffefff60020fffd, 0x8000200055552000, x4, 48, x15)

inst_24:
// rs1==x22, rs2==x9, rd==x12, rs2_h3_val == 16384, rs1_h2_val == 8192, rs1_h3_val == -32768, rs1_h0_val == 16384
// opcode: smin16 ; op1:x22; op2:x9; dest:x12; op1val:0x8000200000404000;  op2val:0x4000fdffc000fff9
TEST_RR_OP(smin16, x12, x22, x9, 0x0000000000000000, 0x8000200000404000, 0x4000fdffc000fff9, x4, 56, x15)

inst_25:
// rs1==x27, rs2==x6, rd==x5, rs2_h3_val == 8192, rs2_h0_val == 64, rs1_h2_val == 16384, rs2_h1_val == -129, rs2_h2_val == -5, rs1_h3_val == -513
// opcode: smin16 ; op1:x27; op2:x6; dest:x5; op1val:0xfdff400002003fff;  op2val:0x2000fffbff7f0040
TEST_RR_OP(smin16, x5, x27, x6, 0x0000000000000000, 0xfdff400002003fff, 0x2000fffbff7f0040, x4, 64, x15)

inst_26:
// rs1==x7, rs2==x1, rd==x2, rs2_h3_val == 4096, rs2_h2_val == 32, rs2_h1_val == -1, rs1_h3_val == 8
// opcode: smin16 ; op1:x7; op2:x1; dest:x2; op1val:0x080007ffbffffa;  op2val:0x10000020ffffffef
TEST_RR_OP(smin16, x2, x7, x1, 0x0000000000000000, 0x080007ffbffffa, 0x10000020ffffffef, x4, 72, x15)

inst_27:
// rs1==x9, rs2==x19, rd==x31, rs2_h3_val == 2048, rs2_h2_val == -16385, rs1_h1_val == 21845, rs2_h1_val == 4096, rs1_h2_val == 1
// opcode: smin16 ; op1:x9; op2:x19; dest:x31; op1val:0x2000000155550007;  op2val:0x800bfff10000002
TEST_RR_OP(smin16, x31, x9, x19, 0x0000000000000000, 0x2000000155550007, 0x800bfff10000002, x4, 80, x5)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_28:
// rs1==x4, rs2==x11, rd==x9, rs2_h3_val == 1024, rs2_h0_val == 16, rs1_h2_val == 1024, rs1_h3_val == -1, rs2_h2_val == 2048, rs1_h0_val == -21846
// opcode: smin16 ; op1:x4; op2:x11; dest:x9; op1val:0xffff0400fffaaaaa;  op2val:0x4000800ffff0010
TEST_RR_OP(smin16, x9, x4, x11, 0x0000000000000000, 0xffff0400fffaaaaa, 0x4000800ffff0010, x2, 0, x5)

inst_29:
// rs1==x10, rs2==x31, rd==x3, rs2_h3_val == 512, rs2_h0_val == -65, rs1_h3_val == 256, rs1_h0_val == -65, rs1_h1_val == 2048
// opcode: smin16 ; op1:x10; op2:x31; dest:x3; op1val:0x10000090800ffbf;  op2val:0x200dfff0080ffbf
TEST_RR_OP(smin16, x3, x10, x31, 0x0000000000000000, 0x10000090800ffbf, 0x200dfff0080ffbf, x2, 8, x5)

inst_30:
// rs1==x31, rs2==x25, rd==x8, rs2_h3_val == 256, 
// opcode: smin16 ; op1:x31; op2:x25; dest:x8; op1val:0x09000955550006;  op2val:0x1000002fdff2000
TEST_RR_OP(smin16, x8, x31, x25, 0x0000000000000000, 0x09000955550006, 0x1000002fdff2000, x2, 16, x5)

inst_31:
// rs1==x1, rs2==x20, rd==x30, rs2_h3_val == 128, rs2_h1_val == -5, rs1_h1_val == -9
// opcode: smin16 ; op1:x1; op2:x20; dest:x30; op1val:0xfffefff9fff7ffef;  op2val:0x80fffafffbf7ff
TEST_RR_OP(smin16, x30, x1, x20, 0x0000000000000000, 0xfffefff9fff7ffef, 0x80fffafffbf7ff, x2, 24, x5)

inst_32:
// rs2_h3_val == 64, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6200002003fff;  op2val:0x40fffafeff2000
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfff6200002003fff, 0x40fffafeff2000, x2, 32, x5)

inst_33:
// rs1_h1_val == -5, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x4000aaaafffbfffe;  op2val:0x100fffc0020ffbf
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x4000aaaafffbfffe, 0x100fffc0020ffbf, x2, 40, x5)

inst_34:
// rs1_h1_val == -2, rs2_h2_val == -1, rs2_h0_val == -33, rs1_h3_val == -3, rs1_h2_val == -5
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdfffbfffefffc;  op2val:0x100ffffffffffdf
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfffdfffbfffefffc, 0x100ffffffffffdf, x2, 48, x5)

inst_35:
// rs1_h1_val == -32768, rs2_h1_val == -33, rs2_h2_val == 0
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x100aaaa80000003;  op2val:0x20000000ffdf3fff
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x100aaaa80000003, 0x20000000ffdf3fff, x2, 56, x5)

inst_36:
// rs1_h1_val == 16384, rs1_h2_val == -9, rs2_h0_val == 1, rs2_h3_val == 8
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6fff74000f7ff;  op2val:0x08000800070001
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfff6fff74000f7ff, 0x08000800070001, x2, 64, x5)

inst_37:
// rs1_h1_val == 8192, rs1_h3_val == -9
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff702002000feff;  op2val:0xbfff0002fff8dfff
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfff702002000feff, 0xbfff0002fff8dfff, x2, 72, x5)

inst_38:
// rs1_h1_val == 128, rs2_h0_val == 1024, rs1_h0_val == 32767
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x07fff600807fff;  op2val:0x05fff900010400
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x07fff600807fff, 0x05fff900010400, x2, 80, x5)

inst_39:
// rs1_h1_val == 8, rs2_h0_val == 4, rs1_h0_val == 1, rs2_h3_val == 16
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff080000080001;  op2val:0x10000100040004
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfbff080000080001, 0x10000100040004, x2, 88, x5)

inst_40:
// rs1_h1_val == 4, rs1_h2_val == -33
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x200ffdf0004fff8;  op2val:0xfbff2000fff9dfff
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x200ffdf0004fff8, 0xfbff2000fff9dfff, x2, 96, x5)

inst_41:
// rs1_h1_val == 1, rs2_h0_val == -1025
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9080000018000;  op2val:0x100efff0040fbff
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfff9080000018000, 0x100efff0040fbff, x2, 104, x5)

inst_42:
// rs1_h1_val == 0, rs1_h2_val == -2049, rs2_h1_val == -4097
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdf7ff0000c000;  op2val:0xffbffff9efff0004
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfffdf7ff0000c000, 0xffbffff9efff0004, x2, 112, x5)

inst_43:
// rs1_h1_val == -1, rs1_h3_val == -16385
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xbffffff8fffffffa;  op2val:0xaaaa00010005ffef
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xbffffff8fffffffa, 0xaaaa00010005ffef, x2, 120, x5)

inst_44:
// rs1_h0_val == 21845, rs1_h3_val == 32, rs1_h1_val == -33, rs2_h0_val == -21846
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x20ffffffdf5555;  op2val:0x1000006ffdfaaaa
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x20ffffffdf5555, 0x1000006ffdfaaaa, x2, 128, x5)

inst_45:
// rs1_h0_val == -1025, rs2_h3_val == 0, rs2_h0_val == -5
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdefff0400fbff;  op2val:0x00f7fffffafffb
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfffdefff0400fbff, 0x00f7fffffafffb, x2, 136, x5)

inst_46:
// rs1_h0_val == -513, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf00090002fdff;  op2val:0xfffb000900000006
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xffbf00090002fdff, 0xfffb000900000006, x2, 144, x5)

inst_47:
// rs1_h0_val == -129, rs2_h1_val == 16384
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf2000bfffff7f;  op2val:0xdffff7ff40000080
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xffbf2000bfffff7f, 0xdffff7ff40000080, x2, 152, x5)

inst_48:
// rs1_h0_val == -33, rs1_h2_val == 4096, rs2_h1_val == 2048
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x20010008000ffdf;  op2val:0x04c0000800fff8
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x20010008000ffdf, 0x04c0000800fff8, x2, 160, x5)

inst_49:
// rs1_h0_val == -9, rs1_h2_val == -513, rs2_h1_val == -2049
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fdffc000fff7;  op2val:0x07bffff7ffaaaa
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x05fdffc000fff7, 0x07bffff7ffaaaa, x2, 168, x5)

inst_50:
// rs1_h0_val == -5, rs1_h3_val == 21845, rs2_h3_val == 1, rs2_h0_val == -4097
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555ffff8000fffb;  op2val:0x01fffd0003efff
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x5555ffff8000fffb, 0x01fffd0003efff, x2, 176, x5)

inst_51:
// rs1_h0_val == 8192, rs2_h2_val == 512, rs1_h2_val == 21845
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff555500012000;  op2val:0x5555020000050400
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xefff555500012000, 0x5555020000050400, x2, 184, x5)

inst_52:
// rs1_h0_val == 4096, rs2_h0_val == -1
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffdc000fff91000;  op2val:0x0700000009ffff
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfffdc000fff91000, 0x0700000009ffff, x2, 192, x5)

inst_53:
// rs1_h0_val == 2048, rs2_h2_val == -129
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff93ffffff70800;  op2val:0x03ff7fc0000000
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfff93ffffff70800, 0x03ff7fc0000000, x2, 200, x5)

inst_54:
// rs1_h0_val == 1024, rs1_h2_val == -3
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdffffdfff60400;  op2val:0x07dfff0020fffa
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xffdffffdfff60400, 0x07dfff0020fffa, x2, 208, x5)

inst_55:
// rs1_h0_val == 128, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xffdf000100090080;  op2val:0xfffaff7fefffffbf
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xffdf000100090080, 0xfffaff7fefffffbf, x2, 216, x5)

inst_56:
// rs1_h0_val == 64, rs1_h3_val == 1
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x01fff900010040;  op2val:0xff7f0004fff7fffc
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x01fff900010040, 0xff7f0004fff7fffc, x2, 224, x5)

inst_57:
// rs1_h0_val == 32, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff9555500070020;  op2val:0x000001f7ff3fff
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfff9555500070020, 0x000001f7ff3fff, x2, 232, x5)

inst_58:
// rs2_h1_val == 2, rs1_h3_val == -129, rs1_h1_val == -2049
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffff7f7ff3fff;  op2val:0x7fffff7f00020800
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xff7ffff7f7ff3fff, 0x7fffff7f00020800, x2, 240, x5)

inst_59:
// rs2_h0_val == 21845, rs2_h3_val == 2, rs1_h3_val == -257, rs1_h2_val == 32
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0020dffffffe;  op2val:0x02000100015555
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfeff0020dffffffe, 0x02000100015555, x2, 248, x5)

inst_60:
// rs2_h0_val == -513, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff7fff00010100;  op2val:0xffeffffb0080fdff
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x7fff7fff00010100, 0xffeffffb0080fdff, x2, 256, x5)

inst_61:
// rs2_h0_val == -257, rs1_h2_val == -65, rs2_h1_val == 512
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x01ffbffffdfffb;  op2val:0xbfff10000200feff
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x01ffbffffdfffb, 0xbfff10000200feff, x2, 264, x5)

inst_62:
// rs2_h0_val == -129, rs2_h1_val == 32767
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0600400010fffc;  op2val:0x40fff97fffff7f
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x0600400010fffc, 0x40fff97fffff7f, x2, 272, x5)

inst_63:
// rs2_h0_val == -9, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fbff0010fff6;  op2val:0x4000bfff0008fff7
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfff7fbff0010fff6, 0x4000bfff0008fff7, x2, 280, x5)

inst_64:
// rs2_h0_val == -3, rs2_h2_val == 32767
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7fffdfff74000;  op2val:0xfbff7fffffdffffd
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfff7fffdfff74000, 0xfbff7fffffdffffd, x2, 288, x5)

inst_65:
// rs2_h0_val == -32768, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x07000704003fff;  op2val:0xfff8008010008000
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x07000704003fff, 0xfff8008010008000, x2, 296, x5)

inst_66:
// rs2_h0_val == 16384, rs2_h2_val == -257
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x40000005fff6fffd;  op2val:0xfdfffeff00044000
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x40000005fff6fffd, 0xfdfffeff00044000, x2, 304, x5)

inst_67:
// rs2_h0_val == 4096, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffe0007f7ff4000;  op2val:0xfff7efff00011000
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfffe0007f7ff4000, 0xfff7efff00011000, x2, 312, x5)

inst_68:
// rs2_h0_val == 256, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0901000400aaaa;  op2val:0xfffa000700070100
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x0901000400aaaa, 0xfffa000700070100, x2, 320, x5)

inst_69:
// rs1_h3_val == -21846, rs2_h2_val == -21846
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa200000000800;  op2val:0xfeffaaaafff80200
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xaaaa200000000800, 0xfeffaaaafff80200, x2, 328, x5)

inst_70:
// rs1_h3_val == -8193, rs2_h2_val == 1024
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xdffffbff00801000;  op2val:0x100400dfff0009
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xdffffbff00801000, 0x100400dfff0009, x2, 336, x5)

inst_71:
// rs1_h0_val == 16, rs2_h1_val == -1025
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000aaaaffdf0010;  op2val:0xfff90020fbff0020
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x1000aaaaffdf0010, 0xfff90020fbff0020, x2, 344, x5)

inst_72:
// rs1_h0_val == 2, rs2_h1_val == -21846
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xc000002000020002;  op2val:0xffef0800aaaafff7
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xc000002000020002, 0xffef0800aaaafff7, x2, 352, x5)

inst_73:
// rs1_h0_val == 0, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffbffffe0000;  op2val:0x800fefffbff4000
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfeffffbffffe0000, 0x800fefffbff4000, x2, 360, x5)

inst_74:
// rs1_h0_val == -1, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff80007ffffffff;  op2val:0x2000effffffaff7f
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfff80007ffffffff, 0x2000effffffaff7f, x2, 368, x5)

inst_75:
// rs1_h3_val == -5, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffbfdff0004efff;  op2val:0x08fefffffffffb
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfffbfdff0004efff, 0x08fefffffffffb, x2, 376, x5)

inst_76:
// rs1_h3_val == 1024, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x400400000104000;  op2val:0x0700020003fffb
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x400400000104000, 0x0700020003fffb, x2, 384, x5)

inst_77:
// rs2_h2_val == -1025, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffaffdf0007;  op2val:0x7ffffbff00000400
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfffffffaffdf0007, 0x7ffffbff00000400, x2, 392, x5)

inst_78:
// rs1_h3_val == 16, rs2_h1_val == -65
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x100002fffafbff;  op2val:0x107fffffbfffbf
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x100002fffafbff, 0x107fffffbfffbf, x2, 400, x5)

inst_79:
// rs2_h2_val == -65, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x200006f7ff0004;  op2val:0x00ffbf00080020
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x200006f7ff0004, 0x00ffbf00080020, x2, 408, x5)

inst_80:
// rs1_h3_val == 4, rs2_h1_val == -17
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x04000101000080;  op2val:0xbfff0007ffeff7ff
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x04000101000080, 0xbfff0007ffeff7ff, x2, 416, x5)

inst_81:
// rs2_h2_val == -33, rs2_h1_val == -2
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x3fff5555efffc000;  op2val:0xffefffdffffefffd
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x3fff5555efffc000, 0xffefffdffffefffd, x2, 424, x5)

inst_82:
// rs1_h3_val == 2, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x02ffff4000f7ff;  op2val:0xfffefbffefffaaaa
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x02ffff4000f7ff, 0xfffefbffefffaaaa, x2, 432, x5)

inst_83:
// rs2_h2_val == -17, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x03040000025555;  op2val:0x5555ffeffbffffdf
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x03040000025555, 0x5555ffeffbffffdf, x2, 440, x5)

inst_84:
// rs2_h2_val == -9, rs2_h1_val == -16385, rs1_h2_val == -2
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7ffffe80000040;  op2val:0xfefffff7bfff1000
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xff7ffffe80000040, 0xfefffff7bfff1000, x2, 448, x5)

inst_85:
// rs1_h2_val == -8193, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfdfff0040fff6;  op2val:0x07ffff00080400
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xffbfdfff0040fff6, 0x07ffff00080400, x2, 456, x5)

inst_86:
// rs1_h2_val == -257, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fffefffff7efff;  op2val:0x200003fffbff7f
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xf7fffefffff7efff, 0x200003fffbff7f, x2, 464, x5)

inst_87:
// rs1_h1_val == -1025, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff5555fbffff7f;  op2val:0xfffbdfff0000fffd
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xefff5555fbffff7f, 0xfffbdfff0000fffd, x2, 472, x5)

inst_88:
// rs2_h2_val == 16, rs1_h1_val == -17
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x08ffffffef4000;  op2val:0xaaaa00100005ff7f
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x08ffffffef4000, 0xaaaa00100005ff7f, x2, 480, x5)

inst_89:
// rs2_h1_val == 16, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff90100ffff0080;  op2val:0x5555fff80010fffd
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfff90100ffff0080, 0x5555fff80010fffd, x2, 488, x5)

inst_90:
// rs1_h2_val == 16, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffa0010fffe0080;  op2val:0xfffafffbfdffff7f
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfffa0010fffe0080, 0xfffafffbfdffff7f, x2, 496, x5)

inst_91:
// rs1_h2_val == 4, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfeff0004fffd0009;  op2val:0x80000000aaaa0800
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfeff0004fffd0009, 0x80000000aaaa0800, x2, 504, x5)

inst_92:
// rs1_h1_val == -21846, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000200aaaa4000;  op2val:0x4020000200ffdf
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x10000200aaaa4000, 0x4020000200ffdf, x2, 512, x5)

inst_93:
// rs2_h1_val == -32768, rs2_h2_val == 64
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0004000001fffe;  op2val:0xfffb004080000100
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x0004000001fffe, 0xfffb004080000100, x2, 520, x5)

inst_94:
// rs1_h1_val == 32767, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000ffdf7fffc000;  op2val:0x200009f7fffffa
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x8000ffdf7fffc000, 0x200009f7fffffa, x2, 528, x5)

inst_95:
// rs2_h1_val == 8192, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x0820000004fffb;  op2val:0x0500202000fff7
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x0820000004fffb, 0x0500202000fff7, x2, 536, x5)

inst_96:
// rs1_h1_val == -513, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x03ffdffdfffffd;  op2val:0xfffb000340005555
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x03ffdffdfffffd, 0xfffb000340005555, x2, 544, x5)

inst_97:
// rs1_h2_val == -17, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xffefffef0005c000;  op2val:0x200020007ffffbff
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xffefffef0005c000, 0x200020007ffffbff, x2, 552, x5)

inst_98:
// rs2_h3_val == -1, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff002000400100;  op2val:0xfffffffc40007fff
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0xfdff002000400100, 0xfffffffc40007fff, x2, 560, x5)

inst_99:
// rs1_h2_val == -129, 
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x40ff7f0100ffbf;  op2val:0xdfff02000000fdff
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x40ff7f0100ffbf, 0xdfff02000000fdff, x2, 568, x5)

inst_100:
// rs1_h3_val > 0 and rs2_h3_val < 0, rs1_h3_val == 64, rs2_h3_val == -5, rs1_h1_val < 0 and rs2_h1_val < 0, rs2_h1_val == -3, rs1_h0_val > 0 and rs2_h0_val < 0, rs1_h2_val == -1025, rs2_h2_val == 128, rs1_h1_val == -257
// opcode: smin16 ; op1:x30; op2:x29; dest:x31; op1val:0x40fbfffeff0006;  op2val:0xfffb0080fffdfffa
TEST_RR_OP(smin16, x31, x30, x29, 0x0000000000000000, 0x40fbfffeff0006, 0xfffb0080fffdfffa, x2, 576, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 11*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 73*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
