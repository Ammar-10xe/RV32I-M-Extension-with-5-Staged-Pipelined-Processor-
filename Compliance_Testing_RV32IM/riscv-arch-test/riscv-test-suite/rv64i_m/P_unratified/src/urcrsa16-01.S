
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the urcrsa16 instruction of the RISC-V RV64PZicsr extension for the urcrsa16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",urcrsa16)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:
// rs1 == rd != rs2, rs1==x4, rs2==x6, rd==x4, rs1_h0_val == 0, rs1_h3_val != rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val != rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs1_h1_val != rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h3_val == 4, rs1_h3_val == 65533, rs1_h1_val == 64511, rs2_h1_val == 61439, rs2_h0_val == 32767
// opcode: urcrsa16 ; op1:x4; op2:x6; dest:x4; op1val:0xfffd0009fbff0000;  op2val:0x040012efff7fff
TEST_RR_OP(urcrsa16, x4, x4, x6, 0x0000000000000000, 0xfffd0009fbff0000, 0x040012efff7fff, x5, 0, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x18, rs2==x15, rd==x6, rs1_h3_val == rs2_h3_val and rs1_h3_val > 0 and rs2_h3_val > 0, rs1_h2_val == 49151, rs2_h0_val == 65519, rs1_h0_val != rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h0_val == 65503, rs2_h2_val == 65519
// opcode: urcrsa16 ; op1:x18; op2:x15; dest:x6; op1val:0x0bbfff000fffdf;  op2val:0x0bffef000bffef
TEST_RR_OP(urcrsa16, x6, x18, x15, 0x0000000000000000, 0x0bbfff000fffdf, 0x0bffef000bffef, x5, 8, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x10, rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h2_val == 1024, rs2_h3_val == 1, rs1_h0_val == 65279, rs1_h1_val == 65533, rs1_h2_val == 1024, rs2_h1_val == 57343, rs2_h0_val == 0, rs1_h3_val == 32767
// opcode: urcrsa16 ; op1:x30; op2:x30; dest:x10; op1val:0x7fff0400fffdfeff;  op2val:0x010400dfff0000
TEST_RR_OP(urcrsa16, x10, x30, x30, 0x0000000000000000, 0x7fff0400fffdfeff, 0x010400dfff0000, x5, 16, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x9, rs2==x9, rd==x9, rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 16384, rs2_h3_val == 0, rs1_h1_val == 16384, rs2_h2_val == 65279, rs1_h2_val == 64
// opcode: urcrsa16 ; op1:x9; op2:x9; dest:x9; op1val:0x0d00404000000e;  op2val:0x00feff4000000f
TEST_RR_OP(urcrsa16, x9, x9, x9, 0x0000000000000000, 0x0d00404000000e, 0x00feff4000000f, x5, 24, x8)

inst_4:
// rs2 == rd != rs1, rs1==x23, rs2==x31, rd==x31, rs1_h0_val == rs2_h0_val and rs1_h0_val > 0 and rs2_h0_val > 0, rs1_h3_val == 65503, rs1_h1_val == 57343, rs1_h0_val == 64511, rs2_h3_val == 57343, rs2_h2_val == 21845, rs2_h1_val == 65471, rs1_h2_val == 8192, rs2_h0_val == 64511
// opcode: urcrsa16 ; op1:x23; op2:x31; dest:x31; op1val:0xffdf2000dffffbff;  op2val:0xdfff5555ffbffbff
TEST_RR_OP(urcrsa16, x31, x23, x31, 0x0000000000000000, 0xffdf2000dffffbff, 0xdfff5555ffbffbff, x5, 32, x8)

inst_5:
// rs1==x14, rs2==x26, rd==x25, rs2_h3_val == 43690, rs1_h1_val == 49151, rs1_h0_val == 65023, rs2_h2_val == 57343, rs1_h2_val == 256, rs1_h3_val == 16
// opcode: urcrsa16 ; op1:x14; op2:x26; dest:x25; op1val:0x100100bffffdff;  op2val:0xaaaadfff4000ffef
TEST_RR_OP(urcrsa16, x25, x14, x26, 0x0000000000000000, 0x100100bffffdff, 0xaaaadfff4000ffef, x5, 40, x8)

inst_6:
// rs1==x25, rs2==x11, rd==x26, rs2_h3_val == 21845, rs2_h0_val == 32, rs1_h2_val == 1, rs2_h2_val == 65534, rs1_h1_val == 32
// opcode: urcrsa16 ; op1:x25; op2:x11; dest:x26; op1val:0x10000100200011;  op2val:0x5555fffe00090020
TEST_RR_OP(urcrsa16, x26, x25, x11, 0x0000000000000000, 0x10000100200011, 0x5555fffe00090020, x5, 48, x8)

inst_7:
// rs1==x31, rs2==x17, rd==x12, rs2_h3_val == 32767, rs2_h0_val == 65503, rs1_h3_val == 65279, rs1_h1_val == 61439, rs2_h2_val == 4, rs2_h1_val == 16, rs1_h0_val == 256
// opcode: urcrsa16 ; op1:x31; op2:x17; dest:x12; op1val:0xfeff000cefff0100;  op2val:0x7fff00040010ffdf
TEST_RR_OP(urcrsa16, x12, x31, x17, 0x0000000000000000, 0xfeff000cefff0100, 0x7fff00040010ffdf, x5, 56, x8)

inst_8:
// rs1==x16, rs2==x4, rd==x17, rs2_h3_val == 49151, rs1_h3_val == 512, rs1_h1_val == 1, rs2_h0_val == 1024
// opcode: urcrsa16 ; op1:x16; op2:x4; dest:x17; op1val:0x200000a0001000a;  op2val:0xbfff0400dfff0400
TEST_RR_OP(urcrsa16, x17, x16, x4, 0x0000000000000000, 0x200000a0001000a, 0xbfff0400dfff0400, x5, 64, x8)

inst_9:
// rs1==x11, rs2==x20, rd==x1, rs2_h3_val == 61439, rs2_h2_val == 8192, rs1_h0_val == 1, rs2_h0_val == 65535, rs1_h2_val == 16, rs1_h1_val == 64
// opcode: urcrsa16 ; op1:x11; op2:x20; dest:x1; op1val:0x7fff001000400001;  op2val:0xefff20000007ffff
TEST_RR_OP(urcrsa16, x1, x11, x20, 0x0000000000000000, 0x7fff001000400001, 0xefff20000007ffff, x5, 72, x8)

inst_10:
// rs1==x12, rs2==x13, rd==x14, rs2_h3_val == 63487, rs2_h1_val == 4, rs1_h1_val == 65279, rs1_h3_val == 16384, rs2_h0_val == 21845
// opcode: urcrsa16 ; op1:x12; op2:x13; dest:x14; op1val:0x40000400feff000c;  op2val:0xf7fffeff00045555
TEST_RR_OP(urcrsa16, x14, x12, x13, 0x0000000000000000, 0x40000400feff000c, 0xf7fffeff00045555, x5, 80, x8)

inst_11:
// rs1==x21, rs2==x29, rd==x3, rs2_h3_val == 64511, rs2_h1_val == 65531, rs2_h0_val == 61439, rs1_h3_val == 64, rs1_h0_val == 65534
// opcode: urcrsa16 ; op1:x21; op2:x29; dest:x3; op1val:0x40000a000efffe;  op2val:0xfbffdffffffbefff
TEST_RR_OP(urcrsa16, x3, x21, x29, 0x0000000000000000, 0x40000a000efffe, 0xfbffdffffffbefff, x5, 88, x8)

inst_12:
// rs1==x22, rs2==x14, rd==x24, rs2_h3_val == 65023, rs1_h3_val == 4, rs1_h2_val == 65527
// opcode: urcrsa16 ; op1:x22; op2:x14; dest:x24; op1val:0x04fff700070001;  op2val:0xfdff00090005ffff
TEST_RR_OP(urcrsa16, x24, x22, x14, 0x0000000000000000, 0x04fff700070001, 0xfdff00090005ffff, x5, 96, x8)

inst_13:
// rs1==x2, rs2==x7, rd==x27, rs2_h3_val == 65279, rs2_h2_val == 16384, rs1_h1_val == 256
// opcode: urcrsa16 ; op1:x2; op2:x7; dest:x27; op1val:0x0700030100ffdf;  op2val:0xfeff40000003ffef
TEST_RR_OP(urcrsa16, x27, x2, x7, 0x0000000000000000, 0x0700030100ffdf, 0xfeff40000003ffef, x5, 104, x8)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_14:
// rs1==x27, rs2==x25, rd==x30, rs2_h3_val == 65407, rs2_h0_val == 2048, rs1_h2_val == 21845, rs1_h1_val == 65471, rs1_h3_val == 65519
// opcode: urcrsa16 ; op1:x27; op2:x25; dest:x30; op1val:0xffef5555ffbf000b;  op2val:0xff7ffeff000f0800
TEST_RR_OP(urcrsa16, x30, x27, x25, 0x0000000000000000, 0xffef5555ffbf000b, 0xff7ffeff000f0800, x4, 0, x3)

inst_15:
// rs1==x6, rs2==x5, rd==x19, rs2_h3_val == 65471, rs1_h3_val == 43690, rs2_h1_val == 65279, rs1_h1_val == 43690, rs2_h0_val == 4096
// opcode: urcrsa16 ; op1:x6; op2:x5; dest:x19; op1val:0xaaaa0011aaaafffe;  op2val:0xffbf000dfeff1000
TEST_RR_OP(urcrsa16, x19, x6, x5, 0x0000000000000000, 0xaaaa0011aaaafffe, 0xffbf000dfeff1000, x4, 8, x3)

inst_16:
// rs1==x13, rs2==x22, rd==x21, rs2_h3_val == 65503, rs2_h2_val == 65471, rs2_h0_val == 32768
// opcode: urcrsa16 ; op1:x13; op2:x22; dest:x21; op1val:0x1301000100ffdf;  op2val:0xffdfffbf00138000
TEST_RR_OP(urcrsa16, x21, x13, x22, 0x0000000000000000, 0x1301000100ffdf, 0xffdfffbf00138000, x4, 16, x3)

inst_17:
// rs1==x7, rs2==x24, rd==x29, rs2_h3_val == 65519, rs1_h2_val == 65471, rs2_h1_val == 64, rs2_h0_val == 512, rs2_h2_val == 63487, rs1_h0_val == 2048
// opcode: urcrsa16 ; op1:x7; op2:x24; dest:x29; op1val:0x13ffbf000a0800;  op2val:0xffeff7ff00400200
TEST_RR_OP(urcrsa16, x29, x7, x24, 0x0000000000000000, 0x13ffbf000a0800, 0xffeff7ff00400200, x4, 24, x3)

inst_18:
// rs1==x5, rs2==x18, rd==x11, rs2_h3_val == 65527, rs2_h1_val == 43690, rs2_h0_val == 65407
// opcode: urcrsa16 ; op1:x5; op2:x18; dest:x11; op1val:0x0501000007fbff;  op2val:0xfff75555aaaaff7f
TEST_RR_OP(urcrsa16, x11, x5, x18, 0x0000000000000000, 0x0501000007fbff, 0xfff75555aaaaff7f, x4, 32, x3)

inst_19:
// rs1==x15, rs2==x12, rd==x18, rs2_h3_val == 65531, rs2_h1_val == 8, rs2_h2_val == 65535
// opcode: urcrsa16 ; op1:x15; op2:x12; dest:x18; op1val:0x0e040000110005;  op2val:0xfffbffff00080200
TEST_RR_OP(urcrsa16, x18, x15, x12, 0x0000000000000000, 0x0e040000110005, 0xfffbffff00080200, x4, 40, x3)

inst_20:
// rs1==x26, rs2==x23, rd==x28, rs2_h3_val == 65533, rs1_h2_val == 61439, rs2_h2_val == 65527, rs1_h3_val == 32768
// opcode: urcrsa16 ; op1:x26; op2:x23; dest:x28; op1val:0x8000effffeff0100;  op2val:0xfffdfff7000e0013
TEST_RR_OP(urcrsa16, x28, x26, x23, 0x0000000000000000, 0x8000effffeff0100, 0xfffdfff7000e0013, x4, 48, x3)

inst_21:
// rs1==x1, rs2==x19, rd==x7, rs2_h3_val == 65534, rs1_h3_val == 1024, rs1_h2_val == 2048, rs1_h0_val == 128, rs1_h1_val == 8
// opcode: urcrsa16 ; op1:x1; op2:x19; dest:x7; op1val:0x400080000080080;  op2val:0xfffe0011000e0020
TEST_RR_OP(urcrsa16, x7, x1, x19, 0x0000000000000000, 0x400080000080080, 0xfffe0011000e0020, x4, 56, x3)

inst_22:
// rs1==x29, rs2==x8, rd==x22, rs2_h3_val == 32768, rs2_h2_val == 4096, rs2_h1_val == 128, rs1_h2_val == 512, rs1_h0_val == 8192, rs2_h0_val == 65023
// opcode: urcrsa16 ; op1:x29; op2:x8; dest:x22; op1val:0x0d0200feff2000;  op2val:0x800010000080fdff
TEST_RR_OP(urcrsa16, x22, x29, x8, 0x0000000000000000, 0x0d0200feff2000, 0x800010000080fdff, x4, 64, x3)

inst_23:
// rs1==x28, rs2==x10, rd==x23, rs2_h3_val == 16384, rs1_h0_val == 49151, rs2_h0_val == 128
// opcode: urcrsa16 ; op1:x28; op2:x10; dest:x23; op1val:0x0abfff0009bfff;  op2val:0x4000feff00130080
TEST_RR_OP(urcrsa16, x23, x28, x10, 0x0000000000000000, 0x0abfff0009bfff, 0x4000feff00130080, x4, 72, x3)

inst_24:
// rs1==x17, rs2==x27, rd==x20, rs2_h3_val == 8192, rs1_h0_val == 57343, rs2_h2_val == 16, rs1_h2_val == 65531, rs1_h1_val == 65527, rs2_h0_val == 1, rs1_h3_val == 65535
// opcode: urcrsa16 ; op1:x17; op2:x27; dest:x20; op1val:0xfffffffbfff7dfff;  op2val:0x2000001000080001
TEST_RR_OP(urcrsa16, x20, x17, x27, 0x0000000000000000, 0xfffffffbfff7dfff, 0x2000001000080001, x4, 80, x3)

inst_25:
// rs1==x20, rs2==x28, rd==x0, rs2_h3_val == 4096, rs2_h2_val == 43690
// opcode: urcrsa16 ; op1:x20; op2:x28; dest:x0; op1val:0xfffd0200fbff0009;  op2val:0x1000aaaafffb0005
TEST_RR_OP(urcrsa16, x0, x20, x28, 0x0000000000000000, 0xfffd0200fbff0009, 0x1000aaaafffb0005, x4, 88, x3)

inst_26:
// rs1==x8, rs2==x16, rd==x5, rs2_h3_val == 2048, rs2_h0_val == 65534, rs2_h2_val == 32, rs1_h0_val == 65471, rs1_h2_val == 4096, rs1_h3_val == 1
// opcode: urcrsa16 ; op1:x8; op2:x16; dest:x5; op1val:0x0110000001ffbf;  op2val:0x80000200010fffe
TEST_RR_OP(urcrsa16, x5, x8, x16, 0x0000000000000000, 0x0110000001ffbf, 0x80000200010fffe, x4, 96, x3)

inst_27:
// rs1==x0, rs2==x1, rd==x2, rs2_h3_val == 1024, rs2_h2_val == 64, rs1_h2_val == 32
// opcode: urcrsa16 ; op1:x0; op2:x1; dest:x2; op1val:0x400020feff0003;  op2val:0x40000400009efff
TEST_RR_OP(urcrsa16, x2, x0, x1, 0x0000000000000000, 0x400020feff0003, 0x40000400009efff, x4, 104, x3)

inst_28:
// rs1==x10, rs2==x2, rd==x13, rs2_h3_val == 512, rs2_h0_val == 57343, rs2_h1_val == 8192
// opcode: urcrsa16 ; op1:x10; op2:x2; dest:x13; op1val:0xfffd2000000b0080;  op2val:0x20040002000dfff
TEST_RR_OP(urcrsa16, x13, x10, x2, 0x0000000000000000, 0xfffd2000000b0080, 0x20040002000dfff, x4, 112, x5)

inst_29:
// rs1==x19, rs2==x21, rd==x16, rs2_h3_val == 256, rs2_h1_val == 2, rs2_h2_val == 65407
// opcode: urcrsa16 ; op1:x19; op2:x21; dest:x16; op1val:0x07000c000c0012;  op2val:0x100ff7f00020200
TEST_RR_OP(urcrsa16, x16, x19, x21, 0x0000000000000000, 0x07000c000c0012, 0x100ff7f00020200, x4, 120, x5)

inst_30:
// rs1==x24, rs2==x3, rd==x8, rs2_h3_val == 128, rs1_h1_val == 65503, rs2_h2_val == 32767
// opcode: urcrsa16 ; op1:x24; op2:x3; dest:x8; op1val:0xfeff000fffdf0013;  op2val:0x807fff00070012
TEST_RR_OP(urcrsa16, x8, x24, x3, 0x0000000000000000, 0xfeff000fffdf0013, 0x807fff00070012, x4, 128, x5)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_31:
// rs1==x3, rs2==x0, rd==x15, rs2_h3_val == 64, rs1_h3_val == 64511, rs2_h0_val == 65531, rs1_h0_val == 1024
// opcode: urcrsa16 ; op1:x3; op2:x0; dest:x15; op1val:0xfbff5555000c0400;  op2val:0x407fff0006fffb
TEST_RR_OP(urcrsa16, x15, x3, x0, 0x0000000000000000, 0xfbff5555000c0400, 0x407fff0006fffb, x1, 0, x5)

inst_32:
// rs2_h3_val == 32, rs1_h3_val == 65531, rs1_h0_val == 32767, rs2_h2_val == 32768
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffb000f00117fff;  op2val:0x20800040000009
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffb000f00117fff, 0x20800040000009, x1, 8, x5)

inst_33:
// rs2_h3_val == 16, rs1_h1_val == 63487
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd0013f7ff000d;  op2val:0x100010000cdfff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffd0013f7ff000d, 0x100010000cdfff, x1, 16, x5)

inst_34:
// rs2_h3_val == 8, rs2_h1_val == 1024, rs2_h2_val == 65533, rs1_h2_val == 16384
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x05400001000009;  op2val:0x08fffd0400fbff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x05400001000009, 0x08fffd0400fbff, x1, 24, x5)

inst_35:
// rs2_h3_val == 2, rs2_h1_val == 32
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0c0100fbffdfff;  op2val:0x02ffbf0020000e
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x0c0100fbffdfff, 0x02ffbf0020000e, x1, 32, x5)

inst_36:
// rs2_h3_val == 65535, rs2_h0_val == 65527, rs1_h0_val == 2, rs2_h1_val == 2048, rs1_h2_val == 65519, rs1_h3_val == 4096
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000ffef00120002;  op2val:0xffffaaaa0800fff7
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x1000ffef00120002, 0xffffaaaa0800fff7, x1, 40, x5)

inst_37:
// rs1_h1_val == 4, rs1_h3_val == 49151
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xbfff00400004000d;  op2val:0xfffeffbf20000013
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xbfff00400004000d, 0xfffeffbf20000013, x1, 48, x5)

inst_38:
// rs1_h1_val == 2, rs2_h2_val == 65023, rs1_h2_val == 65534
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10fffe0002ffbf;  op2val:0xfefffdffdfff0800
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x10fffe0002ffbf, 0xfefffdffdfff0800, x1, 56, x5)

inst_39:
// rs1_h1_val == 65535, rs2_h0_val == 63487, rs1_h0_val == 43690
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000cffffaaaa;  op2val:0x0a7fff0006f7ff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xaaaa000cffffaaaa, 0x0a7fff0006f7ff, x1, 64, x5)

inst_40:
// rs1_h1_val == 0, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x13000d00000000;  op2val:0x10fffd00068000
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x13000d00000000, 0x10fffd00068000, x1, 72, x5)

inst_41:
// rs1_h0_val == 21845, rs2_h1_val == 32767
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1000000500065555;  op2val:0x100000097fff000f
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x1000000500065555, 0x100000097fff000f, x1, 80, x5)

inst_42:
// rs1_h0_val == 61439, rs2_h1_val == 21845
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0dfffb0011efff;  op2val:0x0c001255550800
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x0dfffb0011efff, 0x0c001255550800, x1, 88, x5)

inst_43:
// rs1_h0_val == 63487, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x051000ffdff7ff;  op2val:0x0dfeffefff8000
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x051000ffdff7ff, 0x0dfeffefff8000, x1, 96, x5)

inst_44:
// rs1_h0_val == 65407, rs2_h0_val == 49151, rs1_h1_val == 65519
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa000effefff7f;  op2val:0x10000105555bfff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xaaaa000effefff7f, 0x10000105555bfff, x1, 104, x5)

inst_45:
// rs1_h0_val == 65519, rs2_h1_val == 32768, rs1_h3_val == 65471
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf40000006ffef;  op2val:0x800800080000005
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xffbf40000006ffef, 0x800800080000005, x1, 112, x5)

inst_46:
// rs1_h0_val == 65527, rs2_h1_val == 1, rs1_h3_val == 61439
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xefff00060011fff7;  op2val:0x1100130001ffef
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xefff00060011fff7, 0x1100130001ffef, x1, 120, x5)

inst_47:
// rs1_h0_val == 65531, rs2_h2_val == 0
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e00090004fffb;  op2val:0x0e0000000b0800
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x0e00090004fffb, 0x0e0000000b0800, x1, 128, x5)

inst_48:
// rs1_h0_val == 65533, rs1_h2_val == 43690, rs1_h1_val == 16, rs1_h3_val == 65527
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfff7aaaa0010fffd;  op2val:0x7fff000d00040800
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xfff7aaaa0010fffd, 0x7fff000d00040800, x1, 136, x5)

inst_49:
// rs1_h0_val == 32768, rs1_h2_val == 64511
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0dfbff00088000;  op2val:0x03000a000a0012
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x0dfbff00088000, 0x03000a000a0012, x1, 144, x5)

inst_50:
// rs1_h0_val == 16384, rs2_h1_val == 512
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x034000000c4000;  op2val:0x2000120200fffb
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x034000000c4000, 0x2000120200fffb, x1, 152, x5)

inst_51:
// rs1_h0_val == 4096, rs1_h2_val == 128, rs2_h0_val == 43690, rs1_h1_val == 4096, rs2_h1_val == 65527
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x07008010001000;  op2val:0xbfff5555fff7aaaa
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x07008010001000, 0xbfff5555fff7aaaa, x1, 160, x5)

inst_52:
// rs1_h0_val == 512, rs1_h3_val == 63487
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffeff7ff0200;  op2val:0x0f0020feff8000
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xf7ffffeff7ff0200, 0x0f0020feff8000, x1, 168, x5)

inst_53:
// rs1_h0_val == 64, rs2_h0_val == 64, rs2_h2_val == 8
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10efff00060040;  op2val:0x0f00087fff0040
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x10efff00060040, 0x0f00087fff0040, x1, 176, x5)

inst_54:
// rs1_h0_val == 32, rs2_h1_val == 65407
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x04fbfffffd0020;  op2val:0x400008ff7f0013
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x04fbfffffd0020, 0x400008ff7f0013, x1, 184, x5)

inst_55:
// rs1_h0_val == 16, rs1_h3_val == 8192
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000000a00000010;  op2val:0x800011fff7fbff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x2000000a00000010, 0x800011fff7fbff, x1, 192, x5)

inst_56:
// rs1_h0_val == 8, rs1_h2_val == 65023, rs1_h1_val == 65023, rs2_h2_val == 49151, rs2_h0_val == 16, rs1_h3_val == 128
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80fdfffdff0008;  op2val:0x5555bfff00020010
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x80fdfffdff0008, 0x5555bfff00020010, x1, 200, x5)

inst_57:
// rs1_h0_val == 4, rs2_h2_val == 512, rs1_h2_val == 32768
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e8000f7ff0004;  op2val:0x40000200000c000e
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x0e8000f7ff0004, 0x40000200000c000e, x1, 208, x5)

inst_58:
// rs1_h0_val == 65535, rs1_h1_val == 8192, rs2_h2_val == 256
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x05fff72000ffff;  op2val:0xfbff0100fff70010
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x05fff72000ffff, 0xfbff0100fff70010, x1, 216, x5)

inst_59:
// rs2_h2_val == 61439, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200fffbffdf1000;  op2val:0x06efff00090005
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x200fffbffdf1000, 0x06efff00090005, x1, 224, x5)

inst_60:
// rs2_h0_val == 65471, rs2_h1_val == 65503, rs1_h3_val == 57343
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xdfffbffffdff000e;  op2val:0xfdff000fffdfffbf
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xdfffbffffdff000e, 0xfdff000fffdfffbf, x1, 232, x5)

inst_61:
// rs2_h0_val == 65533, rs1_h3_val == 2
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x02000bf7ff0013;  op2val:0xffdf0010fefffffd
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x02000bf7ff0013, 0xffdf0010fefffffd, x1, 240, x5)

inst_62:
// rs2_h0_val == 16384, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200000500030009;  op2val:0x0d000cefff4000
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x200000500030009, 0x0d000cefff4000, x1, 248, x5)

inst_63:
// rs2_h0_val == 8192, rs1_h1_val == 2048, rs1_h3_val == 8
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0800070800000a;  op2val:0x01001100402000
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x0800070800000a, 0x01001100402000, x1, 256, x5)

inst_64:
// rs2_h0_val == 256, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x1300120005fffb;  op2val:0x09000d000e0100
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x1300120005fffb, 0x09000d000e0100, x1, 264, x5)

inst_65:
// rs2_h0_val == 8, rs2_h2_val == 1
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x050100feff7fff;  op2val:0x1000000100080008
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x050100feff7fff, 0x1000000100080008, x1, 272, x5)

inst_66:
// rs2_h0_val == 4, rs1_h2_val == 65533
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfffffdfff70001;  op2val:0x80000640000004
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xfbfffffdfff70001, 0x80000640000004, x1, 280, x5)

inst_67:
// rs2_h0_val == 2, rs1_h2_val == 32767
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e7ffffffffffd;  op2val:0x13f7ff00080002
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x0e7ffffffffffd, 0x13f7ff00080002, x1, 288, x5)

inst_68:
// rs1_h3_val == 21845, rs1_h1_val == 32768, rs2_h1_val == 65519
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x5555fffb8000fffe;  op2val:0x07fdffffef000e
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x5555fffb8000fffe, 0x07fdffffef000e, x1, 296, x5)

inst_69:
// rs1_h3_val == 65023, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfdff0013000dffef;  op2val:0x10ffff000d0003
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xfdff0013000dffef, 0x10ffff000d0003, x1, 304, x5)

inst_70:
// rs1_h3_val == 65407, rs2_h1_val == 256, rs2_h2_val == 2048, rs1_h1_val == 32767
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xff7f000b7fff000c;  op2val:0xaaaa08000100fffd
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xff7f000b7fff000c, 0xaaaa08000100fffd, x1, 312, x5)

inst_71:
// rs1_h3_val == 65534, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffefdff8000000d;  op2val:0x02001200110800
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffefdff8000000d, 0x02001200110800, x1, 320, x5)

inst_72:
// rs1_h3_val == 2048, rs2_h1_val == 49151
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000007ffefff7f;  op2val:0xffff0100bfffaaaa
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x8000007ffefff7f, 0xffff0100bfffaaaa, x1, 328, x5)

inst_73:
// rs1_h3_val == 256, rs1_h2_val == 4, rs2_h2_val == 64511
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x10000040004000d;  op2val:0xaaaafbff0012aaaa
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x10000040004000d, 0xaaaafbff0012aaaa, x1, 336, x5)

inst_74:
// rs1_h3_val == 32, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200006efff0006;  op2val:0x200020000d7fff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x200006efff0006, 0x200020000d7fff, x1, 344, x5)

inst_75:
// rs1_h2_val == 57343, rs1_h1_val == 1024
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x200dfff04000004;  op2val:0xffef555555557fff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x200dfff04000004, 0xffef555555557fff, x1, 352, x5)

inst_76:
// rs1_h2_val == 63487, rs2_h1_val == 0
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0af7ffdfff8000;  op2val:0x800000700000000
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x0af7ffdfff8000, 0x800000700000000, x1, 360, x5)

inst_77:
// rs1_h2_val == 65279, rs2_h1_val == 65534, rs2_h0_val == 65279
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x80feff0013000c;  op2val:0xffff0800fffefeff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x80feff0013000c, 0xffff0800fffefeff, x1, 368, x5)

inst_78:
// rs2_h2_val == 128, rs2_h1_val == 65533
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x06bfffffff2000;  op2val:0x070080fffd7fff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x06bfffffff2000, 0x070080fffd7fff, x1, 376, x5)

inst_79:
// rs1_h2_val == 65407, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x2000ff7f7ffffbff;  op2val:0x20000000001fdff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x2000ff7f7ffffbff, 0x20000000001fdff, x1, 384, x5)

inst_80:
// rs1_h2_val == 65503, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0dffdfffeffffb;  op2val:0x05ffff000e0006
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x0dffdfffeffffb, 0x05ffff000e0006, x1, 392, x5)

inst_81:
// rs2_h2_val == 2, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x030800dfffff7f;  op2val:0x0d0002fff7000c
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x030800dfffff7f, 0x0d0002fff7000c, x1, 400, x5)

inst_82:
// rs2_h1_val == 63487, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x04efff0006ffbf;  op2val:0xffdff7fff7ff000a
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x04efff0006ffbf, 0xffdff7fff7ff000a, x1, 408, x5)

inst_83:
// rs2_h1_val == 64511, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbf08000002000a;  op2val:0xffefffbffbff0012
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xffbf08000002000a, 0xffefffbffbff0012, x1, 416, x5)

inst_84:
// rs2_h1_val == 65023, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0155550008fffd;  op2val:0x800bffffdffaaaa
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x0155550008fffd, 0x800bffffdffaaaa, x1, 424, x5)

inst_85:
// rs1_h2_val == 0, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0e0000000ddfff;  op2val:0x800080fffe2000
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x0e0000000ddfff, 0x800080fffe2000, x1, 432, x5)

inst_86:
// rs1_h1_val == 21845, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf55552000;  op2val:0x00ffff4000fff7
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xffffffdf55552000, 0x00ffff4000fff7, x1, 440, x5)

inst_87:
// rs2_h1_val == 4096, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbfefff20000011;  op2val:0x0c400010000040
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xffbfefff20000011, 0x0c400010000040, x1, 448, x5)

inst_88:
// rs1_h1_val == 512, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x04ffbf0200000d;  op2val:0xbfff000501000080
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x04ffbf0200000d, 0xbfff000501000080, x1, 456, x5)

inst_89:
// rs1_h1_val == 65407, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400000bff7ffffd;  op2val:0x8000bfff02000006
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x400000bff7ffffd, 0x8000bfff02000006, x1, 464, x5)

inst_90:
// rs1_h2_val == 8, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x20000080009feff;  op2val:0x0e020080000007
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x20000080009feff, 0x0e020080000007, x1, 472, x5)

inst_91:
// rs1_h1_val == 65531, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfffd4000fffb0040;  op2val:0x7fffffbf08000003
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xfffd4000fffb0040, 0x7fffffbf08000003, x1, 480, x5)

inst_92:
// rs2_h2_val == 65531, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xaaaa00050008dfff;  op2val:0x04fffb80000001
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xaaaa00050008dfff, 0x04fffb80000001, x1, 488, x5)

inst_93:
// rs1_h1_val == 65534, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xffbffdfffffefbff;  op2val:0x12000afdfffeff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xffbffdfffffefbff, 0x12000afdfffeff, x1, 496, x5)

inst_94:
// rs2_h1_val == 65535, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x010011000f0200;  op2val:0x000000ffffaaaa
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x010011000f0200, 0x000000ffffaaaa, x1, 504, x5)

inst_95:
// rs2_h2_val == 65503, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x07000510005555;  op2val:0x5555ffdfffdf0400
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x07000510005555, 0x5555ffdfffdf0400, x1, 512, x5)

inst_96:
// rs1_h1_val == 128, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x11dfff00805555;  op2val:0x80000200feffffbf
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x11dfff00805555, 0x80000200feffffbf, x1, 520, x5)

inst_97:
// rs1_h3_val == 0, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x00fdff0200ffef;  op2val:0x080001ff7fffdf
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x00fdff0200ffef, 0x080001ff7fffdf, x1, 528, x5)

inst_98:
// rs1_h2_val == 2, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x8000002fbffffff;  op2val:0x09010000060008
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x8000002fbffffff, 0x09010000060008, x1, 536, x5)

inst_99:
// rs1_h2_val == 65535, 
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x08ffffffdffffd;  op2val:0x040003fffffbff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x08ffffffdffffd, 0x040003fffffbff, x1, 544, x5)

inst_100:
// rs1_h2_val == rs2_h2_val and rs1_h2_val > 0 and rs2_h2_val > 0, rs2_h2_val == 1024, rs2_h3_val == 1, rs1_h0_val == 65279, rs1_h1_val == 65533, rs1_h2_val == 1024, rs2_h1_val == 57343, rs2_h0_val == 0, rs1_h3_val == 32767
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff0400fffdfeff;  op2val:0x010400dfff0000
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x7fff0400fffdfeff, 0x010400dfff0000, x1, 552, x5)

inst_101:
// rs1_h1_val == rs2_h1_val and rs1_h1_val > 0 and rs2_h1_val > 0, rs2_h1_val == 16384, rs2_h3_val == 0, rs1_h1_val == 16384, rs2_h2_val == 65279, rs1_h2_val == 64
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x0d00404000000e;  op2val:0x00feff4000000f
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x0d00404000000e, 0x00feff4000000f, x1, 560, x5)

inst_102:
// rs2_h3_val == 1024, rs2_h2_val == 64, rs1_h2_val == 32
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0x400020feff0003;  op2val:0x40000400009efff
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0x400020feff0003, 0x40000400009efff, x1, 568, x5)

inst_103:
// rs2_h3_val == 64, rs1_h3_val == 64511, rs2_h0_val == 65531, rs1_h0_val == 1024
// opcode: urcrsa16 ; op1:x30; op2:x29; dest:x31; op1val:0xfbff5555000c0400;  op2val:0x407fff0006fffb
TEST_RR_OP(urcrsa16, x31, x30, x29, 0x0000000000000000, 0xfbff5555000c0400, 0x407fff0006fffb, x1, 576, x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 73*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
