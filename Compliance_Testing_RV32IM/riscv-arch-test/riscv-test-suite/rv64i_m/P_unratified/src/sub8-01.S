
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sub8 instruction of the RISC-V RV64PZicsr extension for the sub8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sub8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x4,signature_x4_1)

inst_0:
// rs1 == rd != rs2, rs1==x12, rs2==x9, rd==x12, rs1_b0_val == -128, rs1_b7_val != rs2_b7_val, rs2_b3_val == -65, rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b6_val != rs2_b6_val, rs1_b6_val > 0 and rs2_b6_val > 0, rs1_b5_val != rs2_b5_val, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b4_val != rs2_b4_val, rs1_b4_val == -3, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b3_val != rs2_b3_val, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b2_val != rs2_b2_val, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val, rs2_b2_val == 2, rs1_b1_val > 0 and rs2_b1_val < 0, rs1_b3_val == -2, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val > 0, rs1_b2_val == 85, rs2_b0_val == 127, rs2_b5_val == 32, rs2_b4_val == -17, rs1_b5_val == -86
// opcode: sub8 ; op1:x12; op2:x9; dest:x12; op1val:0x905aafdfe550580;  op2val:0xc00620efbf02fa7f
TEST_RR_OP(sub8, x12, x12, x9, 0x0000000000000000, 0x905aafdfe550580, 0xc00620efbf02fa7f, x4, 0, x23)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x15, rs2==x20, rd==x16, rs1_b7_val == rs2_b7_val, rs1_b2_val < 0 and rs2_b2_val > 0, rs2_b0_val == -5, rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b1_val < 0 and rs2_b1_val > 0, rs2_b3_val == -9, rs1_b3_val == -3, rs1_b0_val == 64, rs2_b5_val == -1, rs1_b0_val > 0 and rs2_b0_val < 0, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b4_val == -9, rs1_b4_val < 0 and rs2_b4_val > 0, rs2_b2_val == 85, rs2_b4_val == 64, rs1_b5_val == -17
// opcode: sub8 ; op1:x15; op2:x20; dest:x16; op1val:0x505eff7fdf9f940;  op2val:0x53fff40f75507fb
TEST_RR_OP(sub8, x16, x15, x20, 0x0000000000000000, 0x505eff7fdf9f940, 0x53fff40f75507fb, x4, 8, x23)

inst_2:
// rs1 == rs2 != rd, rs1==x14, rs2==x14, rd==x5, rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b4_val == -1, rs1_b2_val < 0 and rs2_b2_val < 0, rs1_b3_val == -9, rs2_b2_val == -1, rs1_b6_val < 0 and rs2_b6_val < 0, rs1_b1_val > 0 and rs2_b1_val > 0, rs1_b1_val == 85, rs1_b0_val < 0 and rs2_b0_val < 0, rs1_b5_val == -33, rs2_b7_val == 32, rs1_b2_val == -2
// opcode: sub8 ; op1:x14; op2:x14; dest:x5; op1val:0xf6f8dffff7fe55f8;  op2val:0x20fc0506fcff05fa
TEST_RR_OP(sub8, x5, x14, x14, 0x0000000000000000, 0xf6f8dffff7fe55f8, 0x20fc0506fcff05fa, x4, 16, x23)

inst_3:
// rs1 == rs2 == rd, rs1==x18, rs2==x18, rd==x18, rs1_b7_val < 0 and rs2_b7_val < 0, rs2_b0_val == -17, rs2_b5_val == 16, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b6_val > 0 and rs2_b6_val < 0, rs2_b3_val == -128, rs2_b1_val == -9, rs1_b6_val == 4, rs2_b7_val == -17, rs2_b6_val == -1, rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b4_val == 1
// opcode: sub8 ; op1:x18; op2:x18; dest:x18; op1val:0xf904fcf93ff8f603;  op2val:0xefff10018005f7ef
TEST_RR_OP(sub8, x18, x18, x18, 0x0000000000000000, 0xf904fcf93ff8f603, 0xefff10018005f7ef, x4, 24, x23)

inst_4:
// rs2 == rd != rs1, rs1==x31, rs2==x1, rd==x1, rs1_b6_val == rs2_b6_val, rs1_b5_val == -9, rs1_b3_val == -5, rs2_b6_val == -3, rs2_b4_val == 85, rs1_b6_val == -3, rs2_b0_val == -1, rs2_b1_val == -2, rs1_b4_val == -5, rs1_b2_val == -65, rs1_b3_val < 0 and rs2_b3_val > 0, rs2_b7_val == 8
// opcode: sub8 ; op1:x31; op2:x1; dest:x1; op1val:0x9fdf7fbfbbf0503;  op2val:0x8fd105503f8feff
TEST_RR_OP(sub8, x1, x31, x1, 0x0000000000000000, 0x9fdf7fbfbbf0503, 0x8fd105503f8feff, x4, 32, x23)

inst_5:
// rs1==x3, rs2==x6, rd==x14, rs1_b6_val < 0 and rs2_b6_val > 0, rs2_b3_val == -86, rs1_b6_val == -86, rs2_b0_val == 32, rs1_b1_val == 127, rs1_b3_val == 64, rs1_b0_val == 4, rs1_b0_val > 0 and rs2_b0_val > 0, rs1_b5_val > 0 and rs2_b5_val > 0, rs1_b4_val == -17, rs2_b6_val == 1, rs1_b7_val == -5, rs2_b5_val == 127
// opcode: sub8 ; op1:x3; op2:x6; dest:x14; op1val:0xfbaa05ef40077f04;  op2val:0xef017f03aa05f820
TEST_RR_OP(sub8, x14, x3, x6, 0x0000000000000000, 0xfbaa05ef40077f04, 0xef017f03aa05f820, x4, 40, x23)

inst_6:
// rs1==x8, rs2==x13, rd==x2, rs1_b5_val == rs2_b5_val, rs1_b2_val == 4, rs2_b0_val == -2, rs1_b0_val == 2, rs1_b1_val == 8, rs2_b7_val == 16, rs2_b1_val == 1, rs1_b7_val == -128, rs2_b5_val == -17, rs2_b4_val == 0
// opcode: sub8 ; op1:x8; op2:x13; dest:x2; op1val:0x8006effac0040802;  op2val:0x10faef003f0701fe
TEST_RR_OP(sub8, x2, x8, x13, 0x0000000000000000, 0x8006effac0040802, 0x10faef003f0701fe, x4, 48, x23)

inst_7:
// rs1==x25, rs2==x15, rd==x3, rs1_b5_val > 0 and rs2_b5_val < 0, rs1_b3_val == -33, rs2_b0_val == 8, rs2_b6_val == -2, rs1_b7_val == 127, rs1_b5_val == 85
// opcode: sub8 ; op1:x25; op2:x15; dest:x3; op1val:0x7ffa55f7dffe0602;  op2val:0x20fef8f80506c008
TEST_RR_OP(sub8, x3, x25, x15, 0x0000000000000000, 0x7ffa55f7dffe0602, 0x20fef8f80506c008, x4, 56, x23)

inst_8:
// rs1==x21, rs2==x12, rd==x9, rs1_b4_val == rs2_b4_val, rs1_b5_val == -128, rs2_b4_val == 16, rs1_b7_val == -2, rs1_b4_val == 16, rs1_b6_val == -5, rs2_b0_val == 0, rs1_b1_val == -5, rs1_b4_val > 0 and rs2_b4_val > 0, rs1_b2_val == -33, rs2_b7_val == -2, rs1_b0_val == -86, rs2_b5_val == -9
// opcode: sub8 ; op1:x21; op2:x12; dest:x9; op1val:0xfefb8010fedffbaa;  op2val:0xfefcf710bf03fe00
TEST_RR_OP(sub8, x9, x21, x12, 0x0000000000000000, 0xfefb8010fedffbaa, 0xfefcf710bf03fe00, x4, 64, x23)

inst_9:
// rs1==x20, rs2==x28, rd==x21, rs1_b4_val > 0 and rs2_b4_val < 0, rs1_b0_val == -9, rs1_b3_val == -17, rs2_b3_val == -5, rs2_b6_val == -17, rs1_b4_val == 85, rs1_b1_val == -3, rs2_b4_val == -128, rs1_b6_val == 0
// opcode: sub8 ; op1:x20; op2:x28; dest:x21; op1val:0x5005555eff9fdf7;  op2val:0x3efc080fb05093f
TEST_RR_OP(sub8, x21, x20, x28, 0x0000000000000000, 0x5005555eff9fdf7, 0x3efc080fb05093f, x4, 72, x23)

inst_10:
// rs1==x10, rs2==x5, rd==x28, rs1_b3_val == rs2_b3_val, rs1_b0_val == -2, rs1_b2_val == 0, rs1_b6_val == -17, rs2_b6_val == 2, rs2_b1_val == 2
// opcode: sub8 ; op1:x10; op2:x5; dest:x28; op1val:0xfbef0603f700fbfe;  op2val:0x1002f9eff70902fc
TEST_RR_OP(sub8, x28, x10, x5, 0x0000000000000000, 0xfbef0603f700fbfe, 0x1002f9eff70902fc, x4, 80, x23)

inst_11:
// rs1==x9, rs2==x29, rd==x8, rs1_b3_val > 0 and rs2_b3_val > 0, rs2_b4_val == -1, rs2_b5_val == -2, rs1_b2_val > 0 and rs2_b2_val < 0, rs2_b3_val == 127, rs1_b1_val == rs2_b1_val, rs2_b6_val == 127, rs1_b6_val == -9, rs1_b3_val == 32, rs2_b2_val == -65, rs1_b5_val == -65
// opcode: sub8 ; op1:x9; op2:x29; dest:x8; op1val:0xfef7bf1020070902;  op2val:0x107ffeff7fbf09fc
TEST_RR_OP(sub8, x8, x9, x29, 0x0000000000000000, 0xfef7bf1020070902, 0x107ffeff7fbf09fc, x4, 88, x23)

inst_12:
// rs1==x7, rs2==x26, rd==x22, rs1_b2_val == rs2_b2_val, rs2_b2_val == 32, rs2_b7_val == 1, rs1_b2_val == 32, rs1_b5_val == 64, rs1_b0_val == 8, rs2_b3_val == 64, rs1_b6_val == 16, rs2_b4_val == 4
// opcode: sub8 ; op1:x7; op2:x26; dest:x22; op1val:0x610405503200908;  op2val:0x1fcf6044020f6f9
TEST_RR_OP(sub8, x22, x7, x26, 0x0000000000000000, 0x610405503200908, 0x1fcf6044020f6f9, x4, 96, x23)

inst_13:
// rs1==x17, rs2==x22, rd==x0, rs1_b0_val == rs2_b0_val, rs2_b0_val == 64, rs1_b5_val == -1, rs1_b6_val == -128, rs2_b3_val == 2, rs2_b4_val == -2, rs2_b6_val == 0, rs1_b4_val == 64, rs1_b1_val == 2
// opcode: sub8 ; op1:x17; op2:x22; dest:x0; op1val:0x8080ff40fafc0240;  op2val:0xef00f8fe02550240
TEST_RR_OP(sub8, x0, x17, x22, 0x0000000000000000, 0x8080ff40fafc0240, 0xef00f8fe02550240, x4, 104, x23)

inst_14:
// rs1==x11, rs2==x19, rd==x10, rs2_b7_val == -86, rs1_b5_val == -5, rs2_b2_val == 8, rs1_b6_val == 127, rs2_b5_val == 2, rs2_b1_val == -86, rs2_b3_val == 4, rs1_b7_val == -17, rs1_b4_val == 32
// opcode: sub8 ; op1:x11; op2:x19; dest:x10; op1val:0xef7ffb20c005c0aa;  op2val:0xaafc02fc0408aaef
TEST_RR_OP(sub8, x10, x11, x19, 0x0000000000000000, 0xef7ffb20c005c0aa, 0xaafc02fc0408aaef, x4, 112, x23)

inst_15:
// rs1==x22, rs2==x30, rd==x20, rs2_b7_val == 85, rs1_b6_val == -2
// opcode: sub8 ; op1:x22; op2:x30; dest:x20; op1val:0x5fe060640dfc0fc;  op2val:0x553f07faf9f8fc06
TEST_RR_OP(sub8, x20, x22, x30, 0x0000000000000000, 0x5fe060640dfc0fc, 0x553f07faf9f8fc06, x4, 120, x5)
RVTEST_SIGBASE(x9,signature_x9_0)

inst_16:
// rs1==x2, rs2==x10, rd==x25, rs2_b7_val == 127, rs1_b7_val == 0, rs2_b2_val == 4, rs1_b3_val == -128, rs1_b4_val == -65, rs2_b4_val == 8
// opcode: sub8 ; op1:x2; op2:x10; dest:x25; op1val:0x07f8bf80df0780;  op2val:0x7fc0fe083f040505
TEST_RR_OP(sub8, x25, x2, x10, 0x0000000000000000, 0x07f8bf80df0780, 0x7fc0fe083f040505, x9, 0, x5)

inst_17:
// rs1==x27, rs2==x31, rd==x29, rs2_b7_val == -65, rs1_b3_val == 4, rs1_b6_val == -33, rs2_b2_val == -5
// opcode: sub8 ; op1:x27; op2:x31; dest:x29; op1val:0x80dfdff80409fbf8;  op2val:0xbff62004f6fb09f8
TEST_RR_OP(sub8, x29, x27, x31, 0x0000000000000000, 0x80dfdff80409fbf8, 0xbff62004f6fb09f8, x9, 8, x5)

inst_18:
// rs1==x23, rs2==x3, rd==x24, rs2_b7_val == -33, rs2_b5_val == -128, rs2_b6_val == -5, rs2_b1_val == -5, rs2_b2_val == 127, rs2_b4_val == 32
// opcode: sub8 ; op1:x23; op2:x3; dest:x24; op1val:0xfef6f740fd0003f8;  op2val:0xdffb8020c07ffb3f
TEST_RR_OP(sub8, x24, x23, x3, 0x0000000000000000, 0xfef6f740fd0003f8, 0xdffb8020c07ffb3f, x9, 16, x5)

inst_19:
// rs1==x6, rs2==x0, rd==x26, rs2_b7_val == -9, rs1_b5_val == 1, rs2_b0_val == 4, rs2_b3_val == 16, rs1_b6_val == 64, rs1_b3_val == 1, rs2_b5_val == -33
// opcode: sub8 ; op1:x6; op2:x0; dest:x26; op1val:0x4001c001f83fc0;  op2val:0xf7f8dff910c00504
TEST_RR_OP(sub8, x26, x6, x0, 0x0000000000000000, 0x4001c001f83fc0, 0xf7f8dff910c00504, x9, 24, x5)

inst_20:
// rs1==x24, rs2==x8, rd==x19, rs2_b7_val == -5, rs2_b4_val == -5, rs1_b1_val == 32, rs1_b7_val == 8
// opcode: sub8 ; op1:x24; op2:x8; dest:x19; op1val:0x8effbf7f9042080;  op2val:0xfb0080fb1009f907
TEST_RR_OP(sub8, x19, x24, x8, 0x0000000000000000, 0x8effbf7f9042080, 0xfb0080fb1009f907, x9, 32, x5)

inst_21:
// rs1==x1, rs2==x21, rd==x4, rs2_b7_val == -3, rs2_b2_val == 64, rs2_b3_val == -17, rs1_b0_val == 0, rs1_b4_val == 127, rs2_b1_val == 32, rs1_b1_val == 1, rs1_b7_val == 32
// opcode: sub8 ; op1:x1; op2:x21; dest:x4; op1val:0x2007f87feff90100;  op2val:0xfd070904ef402008
TEST_RR_OP(sub8, x4, x1, x21, 0x0000000000000000, 0x2007f87feff90100, 0xfd070904ef402008, x9, 40, x5)

inst_22:
// rs1==x28, rs2==x25, rd==x17, rs2_b7_val == -128, rs2_b1_val == 16
// opcode: sub8 ; op1:x28; op2:x25; dest:x17; op1val:0x6053f0606c0fdf7;  op2val:0x8005203f3f0410f8
TEST_RR_OP(sub8, x17, x28, x25, 0x0000000000000000, 0x6053f0606c0fdf7, 0x8005203f3f0410f8, x9, 48, x5)

inst_23:
// rs1==x16, rs2==x23, rd==x27, rs2_b7_val == 64, rs2_b4_val == -9, rs2_b6_val == 8, rs1_b4_val == -128
// opcode: sub8 ; op1:x16; op2:x23; dest:x27; op1val:0x80df3f800320f9fa;  op2val:0x400803f70407f706
TEST_RR_OP(sub8, x27, x16, x23, 0x0000000000000000, 0x80df3f800320f9fa, 0x400803f70407f706, x9, 56, x5)

inst_24:
// rs1==x26, rs2==x17, rd==x6, rs2_b7_val == 4, rs2_b0_val == -33, rs2_b5_val == -3, rs2_b6_val == -33, rs1_b0_val == -1, rs1_b2_val == -5
// opcode: sub8 ; op1:x26; op2:x17; dest:x6; op1val:0x0480fcfcfb55ff;  op2val:0x4dffd06fb083fdf
TEST_RR_OP(sub8, x6, x26, x17, 0x0000000000000000, 0x0480fcfcfb55ff, 0x4dffd06fb083fdf, x9, 64, x5)

inst_25:
// rs1==x30, rs2==x4, rd==x23, rs2_b7_val == 2, rs2_b1_val == 4, rs2_b3_val == 1, rs2_b6_val == 4
// opcode: sub8 ; op1:x30; op2:x4; dest:x23; op1val:0x5f8ff3f3f00fc07;  op2val:0x204f9fb01400407
TEST_RR_OP(sub8, x23, x30, x4, 0x0000000000000000, 0x5f8ff3f3f00fc07, 0x204f9fb01400407, x9, 72, x5)

inst_26:
// rs1==x19, rs2==x7, rd==x15, rs2_b7_val == 0, rs1_b0_val == -17, rs1_b2_val == 1, rs2_b2_val == 0, rs2_b6_val == -128, rs1_b3_val == 0, rs2_b3_val == -1, rs2_b1_val == -1
// opcode: sub8 ; op1:x19; op2:x7; dest:x15; op1val:0xf6f7f7030001f6ef;  op2val:0x8020f9ff00fff6
TEST_RR_OP(sub8, x15, x19, x7, 0x0000000000000000, 0xf6f7f7030001f6ef, 0x8020f9ff00fff6, x9, 80, x5)

inst_27:
// rs1==x4, rs2==x2, rd==x11, rs2_b7_val == -1, 
// opcode: sub8 ; op1:x4; op2:x2; dest:x11; op1val:0xfb0401f8f801f9c0;  op2val:0xffc02055f9c007f6
TEST_RR_OP(sub8, x11, x4, x2, 0x0000000000000000, 0xfb0401f8f801f9c0, 0xffc02055f9c007f6, x9, 88, x5)

inst_28:
// rs1==x13, rs2==x24, rd==x7, rs2_b6_val == -86, rs1_b1_val == -86, rs1_b2_val == -9
// opcode: sub8 ; op1:x13; op2:x24; dest:x7; op1val:0x80fdfffbfdf7aa00;  op2val:0xefaaf8fcf8faf709
TEST_RR_OP(sub8, x7, x13, x24, 0x0000000000000000, 0x80fdfffbfdf7aa00, 0xefaaf8fcf8faf709, x9, 96, x5)

inst_29:
// rs1==x5, rs2==x27, rd==x30, rs2_b6_val == 85, rs1_b0_val == -3, rs1_b1_val == -33, rs2_b0_val == -86, rs1_b7_val == -9
// opcode: sub8 ; op1:x5; op2:x27; dest:x30; op1val:0xf780f67ffb09dffd;  op2val:0xff550301f8f8fbaa
TEST_RR_OP(sub8, x30, x5, x27, 0x0000000000000000, 0xf780f67ffb09dffd, 0xff550301f8f8fbaa, x9, 104, x1)

inst_30:
// rs1==x29, rs2==x11, rd==x31, rs2_b6_val == -65, rs1_b5_val == 32, rs1_b2_val == -3, rs1_b1_val == 64, rs2_b4_val == 2
// opcode: sub8 ; op1:x29; op2:x11; dest:x31; op1val:0x93f20fffafd40aa;  op2val:0xdfbf0502c0fa07ff
TEST_RR_OP(sub8, x31, x29, x11, 0x0000000000000000, 0x93f20fffafd40aa, 0xdfbf0502c0fa07ff, x9, 112, x1)

inst_31:
// rs1==x0, rs2==x16, rd==x13, rs1_b5_val == -3, rs2_b2_val == 16, rs2_b3_val == -2, rs1_b0_val == 1
// opcode: sub8 ; op1:x0; op2:x16; dest:x13; op1val:0x806fdfc3f000601;  op2val:0x5032009fe103f03
TEST_RR_OP(sub8, x13, x0, x16, 0x0000000000000000, 0x806fdfc3f000601, 0x5032009fe103f03, x9, 120, x1)

inst_32:
// rs1_b5_val == -2, rs2_b1_val == -3, rs2_b2_val == -86, rs1_b2_val == -128
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7fdfebf8080f604;  op2val:0x4f9fd08f7aafd40
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xf7fdfebf8080f604, 0x4f9fd08f7aafd40, x9, 128, x1)

inst_33:
// rs1_b5_val == 16, rs1_b0_val == 32, rs1_b3_val == 85, rs1_b7_val == -65, rs1_b1_val == -2
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xbfef103f55bffe20;  op2val:0x655f6f802aa04f8
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xbfef103f55bffe20, 0x655f6f802aa04f8, x9, 136, x1)

inst_34:
// rs1_b5_val == 8, rs1_b7_val == 85, rs2_b1_val == -17, rs1_b3_val == 16, rs2_b4_val == 127
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x55f608fb10050980;  op2val:0x10fe7f7f7f00effe
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x55f608fb10050980, 0x10fe7f7f7f00effe, x9, 144, x1)

inst_35:
// rs1_b5_val == 4, rs1_b4_val == 4, rs1_b3_val == -1
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe090404ff0555f7;  op2val:0xf7f6f855bfaafc40
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xfe090404ff0555f7, 0xf7f6f855bfaafc40, x9, 152, x1)

inst_36:
// rs1_b5_val == 2, rs1_b0_val == -33, rs1_b7_val == -86, rs1_b4_val == 2
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xaafe0202effa55df;  op2val:0x707f90207bf20aa
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xaafe0202effa55df, 0x707f90207bf20aa, x9, 160, x1)

inst_37:
// rs1_b5_val == 0, rs1_b7_val == 2
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x2ef0004f7c0aafe;  op2val:0xaa04c006c010f7ef
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x2ef0004f7c0aafe, 0xaa04c006c010f7ef, x9, 168, x1)

inst_38:
// rs1_b4_val == -86, rs2_b1_val == -33
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x55fec0aa20f703c0;  op2val:0xaa0810200740dff6
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x55fec0aa20f703c0, 0xaa0810200740dff6, x9, 176, x1)

inst_39:
// rs1_b4_val == -33, rs1_b2_val == 64, rs2_b2_val == -9, rs2_b4_val == -86, rs2_b3_val == 32
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfeaa09df044055fc;  op2val:0x8faf7aa20f7fd05
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xfeaa09df044055fc, 0x8faf7aa20f7fd05, x9, 184, x1)

inst_40:
// rs1_b4_val == -2, rs1_b5_val == 127, rs1_b7_val == 16, rs2_b2_val == -2, rs2_b0_val == -128
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x10807ffe55c00603;  op2val:0xfefe8004fffeaa80
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x10807ffe55c00603, 0xfefe8004fffeaa80, x9, 192, x1)

inst_41:
// rs1_b4_val == 8, rs1_b7_val == 4
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x4070608ffbf05fd;  op2val:0x67ffa007f10eff9
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x4070608ffbf05fd, 0x67ffa007f10eff9, x9, 200, x1)

inst_42:
// rs1_b4_val == 1, rs1_b2_val == 8
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x10058001000807fd;  op2val:0xf9fdf608f808c003
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x10058001000807fd, 0xf9fdf608f808c003, x9, 208, x1)

inst_43:
// rs1_b4_val == 0, rs2_b6_val == 64, rs1_b3_val == 2, rs2_b5_val == 1, rs1_b6_val == 2
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xc002df0002fcf905;  op2val:0x4400120f7bffc20
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xc002df0002fcf905, 0x4400120f7bffc20, x9, 216, x1)

inst_44:
// rs1_b3_val == -86, rs2_b6_val == 16, rs2_b1_val == 127
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x4fa1006aa01aaff;  op2val:0x8103f0501fa7ff9
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x4fa1006aa01aaff, 0x8103f0501fa7ff9, x9, 224, x1)

inst_45:
// rs1_b3_val == 127, rs2_b0_val == 16, rs2_b3_val == 85, rs2_b2_val == -17
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x10fb7fbf7f800806;  op2val:0xfdc0800155eff610
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x10fb7fbf7f800806, 0xfdc0800155eff610, x9, 232, x1)

inst_46:
// rs1_b3_val == -65, rs2_b2_val == -3, rs1_b0_val == 127
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xbff9fe55bf3f407f;  op2val:0x20c0feff06fd04fa
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xbff9fe55bf3f407f, 0x20c0feff06fd04fa, x9, 240, x1)

inst_47:
// rs1_b3_val == 8, rs1_b1_val == -128, rs2_b1_val == 0, rs1_b6_val == 85
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x7f55ef3f080480c0;  op2val:0x8c0dffffe090080
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x7f55ef3f080480c0, 0x8c0dffffe090080, x9, 248, x1)

inst_48:
// rs2_b3_val == -33, rs1_b2_val == -86
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x2f7070307aac000;  op2val:0x20068005df3ffef9
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x2f7070307aac000, 0x20068005df3ffef9, x9, 256, x1)

inst_49:
// rs2_b3_val == -3, rs2_b6_val == 32, rs1_b2_val == 127
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x2040027fbf7f2080;  op2val:0xfe20067ffd20fc10
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x2040027fbf7f2080, 0xfe20067ffd20fc10, x9, 264, x1)

inst_50:
// rs2_b3_val == 8, rs1_b1_val == 16
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa04fffe085510c0;  op2val:0x5f905aa08f7c009
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xfa04fffe085510c0, 0x5f905aa08f7c009, x9, 272, x1)

inst_51:
// rs2_b3_val == 0, rs1_b0_val == -65, rs2_b5_val == 4
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xaafd40f9f8f67fbf;  op2val:0x7f904c000040280
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xaafd40f9f8f67fbf, 0x7f904c000040280, x9, 280, x1)

inst_52:
// rs2_b2_val == -33, 
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x5060305060409fc;  op2val:0x1009f809fcdf0380
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x5060305060409fc, 0x1009f809fcdf0380, x9, 288, x1)

inst_53:
// rs2_b2_val == -128, rs1_b2_val == -17, rs2_b1_val == -128, rs1_b0_val == -5
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8020780ffef10fb;  op2val:0x0707023f808000
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xf8020780ffef10fb, 0x0707023f808000, x9, 296, x1)

inst_54:
// rs2_b2_val == 1, rs1_b2_val == -1
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf905ff80c0ff3ffc;  op2val:0xfcfaf6f6ff01f780
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xf905ff80c0ff3ffc, 0xfcfaf6f6ff01f780, x9, 304, x1)

inst_55:
// rs2_b1_val == 85, rs1_b0_val == 16
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf60510f6c0fbfc10;  op2val:0x2fe03f903aa55df
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xf60510f6c0fbfc10, 0x2fe03f903aa55df, x9, 312, x1)

inst_56:
// rs2_b1_val == -65, rs1_b1_val == 4, rs2_b6_val == -9, rs2_b0_val == 85
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0fb07f7fcf804fa;  op2val:0x80f78002fd55bf55
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xc0fb07f7fcf804fa, 0x80f78002fd55bf55, x9, 320, x1)

inst_57:
// rs2_b1_val == 64, rs2_b5_val == -65
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x2ef0040aa3ffc80;  op2val:0xfb80bf4001074006
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x2ef0040aa3ffc80, 0xfb80bf4001074006, x9, 328, x1)

inst_58:
// rs2_b1_val == 8, rs2_b0_val == -65
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x8040ef40bf087f00;  op2val:0xf705df05ef8008bf
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x8040ef40bf087f00, 0xf705df05ef8008bf, x9, 336, x1)

inst_59:
// rs1_b2_val == 16, rs1_b1_val == 0, rs2_b4_val == -3
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x5aafcbff91000f8;  op2val:0x807ff6fdf709fb05
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x5aafcbff91000f8, 0x807ff6fdf709fb05, x9, 344, x1)

inst_60:
// rs2_b0_val == -9, rs2_b4_val == -33
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x3effc40df0155fa;  op2val:0x6df20dff74010f7
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x3effc40df0155fa, 0x6df20dff74010f7, x9, 352, x1)

inst_61:
// rs1_b2_val == 2, rs2_b5_val == 85
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf609fe3f550207aa;  op2val:0x6fe55ef08df09f9
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xf609fe3f550207aa, 0x6fe55ef08df09f9, x9, 360, x1)

inst_62:
// rs2_b0_val == -3, rs1_b1_val == -1
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x55f608c01003fffb;  op2val:0xfdf907aafd007ffd
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x55f608c01003fffb, 0xfdf907aafd007ffd, x9, 368, x1)

inst_63:
// rs1_b1_val == -65, rs2_b5_val == 8
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x7ffefdc010dfbf09;  op2val:0x3fa0801f7f78020
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x7ffefdc010dfbf09, 0x3fa0801f7f78020, x9, 376, x1)

inst_64:
// rs2_b0_val == 2, rs1_b7_val == 1
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x140fc3f3f10fd40;  op2val:0x7f01f9fa5507bf02
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x140fc3f3f10fd40, 0x7f01f9fa5507bf02, x9, 384, x1)

inst_65:
// rs1_b1_val == -17, rs2_b5_val == 0
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x2020205fafceffe;  op2val:0x72000fb06df0900
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x2020205fafceffe, 0x72000fb06df0900, x9, 392, x1)

inst_66:
// rs2_b0_val == 1, 
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x2fdf9eff97f02fa;  op2val:0x20febf00dff7df01
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x2fdf9eff97f02fa, 0x20febf00dff7df01, x9, 400, x1)

inst_67:
// rs2_b5_val == -5, rs1_b7_val == -33
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xdff7037fc003dfef;  op2val:0x33ffb40effa1003
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xdff7037fc003dfef, 0x33ffb40effa1003, x9, 408, x1)

inst_68:
// rs2_b5_val == -86, rs1_b6_val == 1
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x1001054055bf04f9;  op2val:0xdff7aa200807fefd
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x1001054055bf04f9, 0xdff7aa200807fefd, x9, 416, x1)

inst_69:
// rs2_b5_val == 64, 
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7f8fc10077faa;  op2val:0x70140fc06080001
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xf7f8fc10077faa, 0x70140fc06080001, x9, 424, x1)

inst_70:
// rs1_b7_val == -1, 
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xff10007f3f0304f7;  op2val:0xf9f8ff4020fe20f6
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xff10007f3f0304f7, 0xf9f8ff4020fe20f6, x9, 432, x1)

inst_71:
// rs1_b6_val == -65, 
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x8bff840fd0000fd;  op2val:0x93f55fe080506fd
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x8bff840fd0000fd, 0x93f55fe080506fd, x9, 440, x1)

inst_72:
// rs1_b1_val == -9, 
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf09f73f40eff7f8;  op2val:0x507fe4000dfaafe
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xbf09f73f40eff7f8, 0x507fe4000dfaafe, x9, 448, x1)

inst_73:
// rs2_b4_val == -65, 
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfbfcfb5580fffd3f;  op2val:0x4020f7bfbf05fafe
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xfbfcfb5580fffd3f, 0x4020f7bfbf05fafe, x9, 456, x1)

inst_74:
// rs1_b6_val == 32, 
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x22005040100bfff;  op2val:0xf80401f7fb043fff
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x22005040100bfff, 0xf80401f7fb043fff, x9, 464, x1)

inst_75:
// rs1_b6_val == 8, 
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf0804c00640bfc0;  op2val:0x706bfbf05ffbff6
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xdf0804c00640bfc0, 0x706bfbf05ffbff6, x9, 472, x1)

inst_76:
// rs1_b6_val == -1, 
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x20fffc0320ff3ffb;  op2val:0xfa043ffebffb0155
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x20fffc0320ff3ffb, 0xfa043ffebffb0155, x9, 480, x1)

inst_77:
// rs1_b7_val == -3, 
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd0300faf6095580;  op2val:0x9f610fb40fa55fd
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xfd0300faf6095580, 0x9f610fb40fa55fd, x9, 488, x1)

inst_78:
// rs1_b7_val == 64, rs1_b0_val == 85
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x40080810aaaafa55;  op2val:0xbff808f602c0f740
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x40080810aaaafa55, 0xbff808f602c0f740, x9, 496, x1)

inst_79:
// rs1_b7_val < 0 and rs2_b7_val < 0, rs2_b0_val == -17, rs2_b5_val == 16, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b6_val > 0 and rs2_b6_val < 0, rs2_b3_val == -128, rs2_b1_val == -9, rs1_b6_val == 4, rs2_b7_val == -17, rs2_b6_val == -1, rs1_b3_val > 0 and rs2_b3_val < 0, rs2_b4_val == 1
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0xf904fcf93ff8f603;  op2val:0xefff10018005f7ef
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0xf904fcf93ff8f603, 0xefff10018005f7ef, x9, 504, x1)

inst_80:
// rs2_b7_val == -9, rs1_b5_val == 1, rs2_b0_val == 4, rs2_b3_val == 16, rs1_b6_val == 64, rs1_b3_val == 1, rs2_b5_val == -33
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x4001c001f83fc0;  op2val:0xf7f8dff910c00504
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x4001c001f83fc0, 0xf7f8dff910c00504, x9, 512, x1)

inst_81:
// rs1_b5_val == -3, rs2_b2_val == 16, rs2_b3_val == -2, rs1_b0_val == 1
// opcode: sub8 ; op1:x30; op2:x29; dest:x31; op1val:0x806fdfc3f000601;  op2val:0x5032009fe103f03
TEST_RR_OP(sub8, x31, x30, x29, 0x0000000000000000, 0x806fdfc3f000601, 0x5032009fe103f03, x9, 520, x1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x4_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x4_1:
    .fill 16*(XLEN/32),4,0xdeadbeef


signature_x9_0:
    .fill 66*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
