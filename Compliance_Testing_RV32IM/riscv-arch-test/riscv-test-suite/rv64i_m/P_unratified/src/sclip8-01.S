
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sclip8 instruction of the RISC-V RV64PZicsr extension for the sclip8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sclip8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x11,signature_x11_1)

inst_0:
// rs1 == rd, rs1==x22, rd==x22, rs1_b0_val == -128, imm_val == 4, rs1_b2_val == -86, rs1_b1_val == 4, rs1_b4_val == 1, rs1_b7_val == 8, rs1_b3_val == 85
// opcode: sclip8 ; op1:x22; dest:x22; op1val:0x8faf80155aa0480;  immval:0x4
TEST_PKIMM_OP( sclip8, x22, x22, 0x0000000000000000, 0x8faf80155aa0480, 0x4, x22, x11, 0, x18)

inst_1:
// rs1 != rd, rs1==x17, rd==x5, imm_val == 7, rs1_b7_val == -5, rs1_b6_val == 2, rs1_b0_val == 85, rs1_b2_val == 127
// opcode: sclip8 ; op1:x17; dest:x5; op1val:0xfb0206fc3f7ff955;  immval:0x7
TEST_PKIMM_OP( sclip8, x5, x17, 0x0000000000000000, 0xfb0206fc3f7ff955, 0x7, x17, x11, 16, x18)

inst_2:
// rs1==x4, rd==x7, imm_val == 6, rs1_b3_val == -3, rs1_b5_val == 0, rs1_b1_val == -9, rs1_b6_val == 16, rs1_b7_val == -2
// opcode: sclip8 ; op1:x4; dest:x7; op1val:0xfe1000fcfdaaf703;  immval:0x6
TEST_PKIMM_OP( sclip8, x7, x4, 0x0000000000000000, 0xfe1000fcfdaaf703, 0x6, x4, x11, 32, x18)

inst_3:
// rs1==x16, rd==x29, imm_val == 5, rs1_b4_val == 16, rs1_b5_val == -128, rs1_b3_val == -1, rs1_b1_val == 85
// opcode: sclip8 ; op1:x16; dest:x29; op1val:0xf9028010ff0655fa;  immval:0x5
TEST_PKIMM_OP( sclip8, x29, x16, 0x0000000000000000, 0xf9028010ff0655fa, 0x5, x16, x11, 48, x18)

inst_4:
// rs1==x9, rd==x12, imm_val == 3, rs1_b1_val == -86, rs1_b0_val == 2, rs1_b6_val == 1, rs1_b2_val == 1, rs1_b5_val == 8
// opcode: sclip8 ; op1:x9; dest:x12; op1val:0xf60108f80301aa02;  immval:0x3
TEST_PKIMM_OP( sclip8, x12, x9, 0x0000000000000000, 0xf60108f80301aa02, 0x3, x9, x11, 64, x18)

inst_5:
// rs1==x28, rd==x31, imm_val == 2, rs1_b5_val == -1, rs1_b3_val == 2, rs1_b4_val == -128, rs1_b7_val == 64, rs1_b2_val == 64, rs1_b0_val == -5
// opcode: sclip8 ; op1:x28; dest:x31; op1val:0x40f6ff80024006fb;  immval:0x2
TEST_PKIMM_OP( sclip8, x31, x28, 0x0000000000000000, 0x40f6ff80024006fb, 0x2, x28, x11, 80, x18)

inst_6:
// rs1==x10, rd==x23, imm_val == 1, rs1_b5_val == 4, rs1_b2_val == -1, rs1_b1_val == -128, rs1_b0_val == 127, rs1_b4_val == -1, rs1_b7_val == 1
// opcode: sclip8 ; op1:x10; dest:x23; op1val:0x1fa04ff09ff807f;  immval:0x1
TEST_PKIMM_OP( sclip8, x23, x10, 0x0000000000000000, 0x1fa04ff09ff807f, 0x1, x10, x11, 96, x18)

inst_7:
// rs1==x29, rd==x10, imm_val == 0, rs1_b5_val == -2, rs1_b6_val == -9, rs1_b4_val == -17, rs1_b0_val == 1
// opcode: sclip8 ; op1:x29; dest:x10; op1val:0xf8f7feef02050301;  immval:0x0
TEST_PKIMM_OP( sclip8, x10, x29, 0x0000000000000000, 0xf8f7feef02050301, 0x0, x29, x11, 112, x18)

inst_8:
// rs1==x7, rd==x20, rs1_b7_val == -86, rs1_b6_val == -33, rs1_b3_val == 1, rs1_b1_val == -2
// opcode: sclip8 ; op1:x7; dest:x20; op1val:0xaadffafc013ffefc;  immval:0x1
TEST_PKIMM_OP( sclip8, x20, x7, 0x0000000000000000, 0xaadffafc013ffefc, 0x1, x7, x11, 128, x18)

inst_9:
// rs1==x14, rd==x3, rs1_b7_val == 85, rs1_b2_val == 16, rs1_b0_val == 4, rs1_b3_val == 16
// opcode: sclip8 ; op1:x14; dest:x3; op1val:0x5510fa1010103f04;  immval:0x5
TEST_PKIMM_OP( sclip8, x3, x14, 0x0000000000000000, 0x5510fa1010103f04, 0x5, x14, x11, 144, x18)

inst_10:
// rs1==x26, rd==x8, rs1_b7_val == 127, rs1_b4_val == -5
// opcode: sclip8 ; op1:x26; dest:x8; op1val:0x7f0906fbfcff3f7f;  immval:0x3
TEST_PKIMM_OP( sclip8, x8, x26, 0x0000000000000000, 0x7f0906fbfcff3f7f, 0x3, x26, x11, 160, x18)

inst_11:
// rs1==x6, rd==x14, rs1_b7_val == -65, rs1_b5_val == 1, rs1_b3_val == 32, rs1_b1_val == -17, rs1_b6_val == 64, rs1_b4_val == -3, rs1_b0_val == -33
// opcode: sclip8 ; op1:x6; dest:x14; op1val:0xbf4001fd2005efdf;  immval:0x0
TEST_PKIMM_OP( sclip8, x14, x6, 0x0000000000000000, 0xbf4001fd2005efdf, 0x0, x6, x11, 176, x18)

inst_12:
// rs1==x30, rd==x13, rs1_b7_val == -33, rs1_b1_val == 0
// opcode: sclip8 ; op1:x30; dest:x13; op1val:0xdff803f910f90007;  immval:0x7
TEST_PKIMM_OP( sclip8, x13, x30, 0x0000000000000000, 0xdff803f910f90007, 0x7, x30, x11, 192, x18)

inst_13:
// rs1==x3, rd==x2, rs1_b7_val == -17, rs1_b1_val == 64, rs1_b4_val == 4, rs1_b2_val == 0, rs1_b3_val == -9
// opcode: sclip8 ; op1:x3; dest:x2; op1val:0xefc0fe04f7004004;  immval:0x1
TEST_PKIMM_OP( sclip8, x2, x3, 0x0000000000000000, 0xefc0fe04f7004004, 0x1, x3, x11, 208, x18)

inst_14:
// rs1==x13, rd==x30, rs1_b7_val == -9, rs1_b4_val == 85, rs1_b6_val == -2, rs1_b3_val == -17, rs1_b2_val == 32, rs1_b5_val == 16
// opcode: sclip8 ; op1:x13; dest:x30; op1val:0xf7fe1055ef20f8fc;  immval:0x2
TEST_PKIMM_OP( sclip8, x30, x13, 0x0000000000000000, 0xf7fe1055ef20f8fc, 0x2, x13, x11, 224, x18)

inst_15:
// rs1==x25, rd==x15, rs1_b7_val == -3, rs1_b4_val == 127
// opcode: sclip8 ; op1:x25; dest:x15; op1val:0xfd03f87f037ffa04;  immval:0x2
TEST_PKIMM_OP( sclip8, x15, x25, 0x0000000000000000, 0xfd03f87f037ffa04, 0x2, x25, x11, 240, x18)

inst_16:
// rs1==x15, rd==x6, rs1_b7_val == -128, rs1_b1_val == -1, rs1_b5_val == -65
// opcode: sclip8 ; op1:x15; dest:x6; op1val:0x8002bf10c03ffff8;  immval:0x6
TEST_PKIMM_OP( sclip8, x6, x15, 0x0000000000000000, 0x8002bf10c03ffff8, 0x6, x15, x11, 256, x18)

inst_17:
// rs1==x31, rd==x26, rs1_b7_val == 32, rs1_b2_val == -65, rs1_b5_val == -3, rs1_b1_val == 2, rs1_b3_val == 127
// opcode: sclip8 ; op1:x31; dest:x26; op1val:0x2006fd807fbf0202;  immval:0x5
TEST_PKIMM_OP( sclip8, x26, x31, 0x0000000000000000, 0x2006fd807fbf0202, 0x5, x31, x11, 272, x18)

inst_18:
// rs1==x5, rd==x27, rs1_b7_val == 16, rs1_b4_val == -86
// opcode: sclip8 ; op1:x5; dest:x27; op1val:0x1006bfaa03ff07fc;  immval:0x3
TEST_PKIMM_OP( sclip8, x27, x5, 0x0000000000000000, 0x1006bfaa03ff07fc, 0x3, x5, x11, 288, x18)

inst_19:
// rs1==x21, rd==x25, rs1_b7_val == 4, rs1_b5_val == 127
// opcode: sclip8 ; op1:x21; dest:x25; op1val:0x4027f09fa40f7f8;  immval:0x6
TEST_PKIMM_OP( sclip8, x25, x21, 0x0000000000000000, 0x4027f09fa40f7f8, 0x6, x21, x11, 304, x18)

inst_20:
// rs1==x2, rd==x1, rs1_b7_val == 2, rs1_b2_val == -33, rs1_b6_val == 127
// opcode: sclip8 ; op1:x2; dest:x1; op1val:0x27ff8fa20dffec0;  immval:0x6
TEST_PKIMM_OP( sclip8, x1, x2, 0x0000000000000000, 0x27ff8fa20dffec0, 0x6, x2, x11, 320, x18)

inst_21:
// rs1==x12, rd==x9, rs1_b7_val == 0, rs1_b6_val == -65, rs1_b0_val == 32
// opcode: sclip8 ; op1:x12; dest:x9; op1val:0xbf80aa55ff0720;  immval:0x1
TEST_PKIMM_OP( sclip8, x9, x12, 0x0000000000000000, 0xbf80aa55ff0720, 0x1, x12, x11, 336, x3)

inst_22:
// rs1==x18, rd==x16, rs1_b7_val == -1, rs1_b2_val == 85
// opcode: sclip8 ; op1:x18; dest:x16; op1val:0xffc007fdf65509f9;  immval:0x4
TEST_PKIMM_OP( sclip8, x16, x18, 0x0000000000000000, 0xffc007fdf65509f9, 0x4, x18, x11, 352, x3)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_23:
// rs1==x0, rd==x11, rs1_b6_val == -86, rs1_b0_val == 8, rs1_b1_val == 8
// opcode: sclip8 ; op1:x0; dest:x11; op1val:0x3aafafaeff90808;  immval:0x4
TEST_PKIMM_OP( sclip8, x11, x0, 0x0000000000000000, 0x3aafafaeff90808, 0x4, x0, x2, 0, x3)

inst_24:
// rs1==x23, rd==x17, rs1_b6_val == 85, 
// opcode: sclip8 ; op1:x23; dest:x17; op1val:0x65504047ff80802;  immval:0x3
TEST_PKIMM_OP( sclip8, x17, x23, 0x0000000000000000, 0x65504047ff80802, 0x3, x23, x2, 16, x3)

inst_25:
// rs1==x8, rd==x28, rs1_b6_val == -17, 
// opcode: sclip8 ; op1:x8; dest:x28; op1val:0x80ef7f7ffc554001;  immval:0x0
TEST_PKIMM_OP( sclip8, x28, x8, 0x0000000000000000, 0x80ef7f7ffc554001, 0x0, x8, x2, 32, x3)

inst_26:
// rs1==x11, rd==x24, rs1_b1_val == 127, 
// opcode: sclip8 ; op1:x11; dest:x24; op1val:0xc006553f017ff9;  immval:0x7
TEST_PKIMM_OP( sclip8, x24, x11, 0x0000000000000000, 0xc006553f017ff9, 0x7, x11, x2, 48, x3)

inst_27:
// rs1==x24, rd==x21, rs1_b1_val == -65, rs1_b0_val == -65, rs1_b2_val == -17, rs1_b5_val == -17
// opcode: sclip8 ; op1:x24; dest:x21; op1val:0xfe7feffbf8efbfbf;  immval:0x2
TEST_PKIMM_OP( sclip8, x21, x24, 0x0000000000000000, 0xfe7feffbf8efbfbf, 0x2, x24, x2, 64, x3)

inst_28:
// rs1==x27, rd==x19, rs1_b1_val == -33, rs1_b5_val == 85, rs1_b6_val == -5
// opcode: sclip8 ; op1:x27; dest:x19; op1val:0x7fb55fac0efdf01;  immval:0x3
TEST_PKIMM_OP( sclip8, x19, x27, 0x0000000000000000, 0x7fb55fac0efdf01, 0x3, x27, x2, 80, x3)

inst_29:
// rs1==x19, rd==x4, rs1_b1_val == -5, 
// opcode: sclip8 ; op1:x19; dest:x4; op1val:0xdf10c07f0905fb7f;  immval:0x4
TEST_PKIMM_OP( sclip8, x4, x19, 0x0000000000000000, 0xdf10c07f0905fb7f, 0x4, x19, x2, 96, x3)

inst_30:
// rs1==x1, rd==x18, rs1_b1_val == -3, rs1_b2_val == -2
// opcode: sclip8 ; op1:x1; dest:x18; op1val:0x55023f0755fefddf;  immval:0x6
TEST_PKIMM_OP( sclip8, x18, x1, 0x0000000000000000, 0x55023f0755fefddf, 0x6, x1, x2, 112, x3)

inst_31:
// rs1==x20, rd==x0, rs1_b1_val == 32, rs1_b5_val == -5
// opcode: sclip8 ; op1:x20; dest:x0; op1val:0xfe05fbfd01fc20f6;  immval:0x6
TEST_PKIMM_OP( sclip8, x0, x20, 0x0000000000000000, 0xfe05fbfd01fc20f6, 0x6, x20, x2, 128, x3)

inst_32:
// rs1_b1_val == 16, rs1_b0_val == -17, rs1_b2_val == 4
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0xfd7ffa07ef0410ef;  immval:0x5
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0xfd7ffa07ef0410ef, 0x5, x30, x2, 144, x3)

inst_33:
// rs1_b1_val == 1, rs1_b3_val == -86, rs1_b4_val == 8, rs1_b0_val == 0, rs1_b2_val == -128
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0xdff9fa08aa800100;  immval:0x4
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0xdff9fa08aa800100, 0x4, x30, x2, 160, x3)

inst_34:
// rs1_b0_val == -86, rs1_b5_val == 64
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0x8fe40f60103f7aa;  immval:0x0
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0x8fe40f60103f7aa, 0x0, x30, x2, 176, x3)

inst_35:
// rs1_b0_val == -9, rs1_b4_val == 0
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0xfb3f090007aa7ff7;  immval:0x3
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0xfb3f090007aa7ff7, 0x3, x30, x2, 192, x3)

inst_36:
// rs1_b0_val == -3, rs1_b2_val == -3, rs1_b5_val == -33
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0xefefdff8f9fdaafd;  immval:0x4
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0xefefdff8f9fdaafd, 0x4, x30, x2, 208, x3)

inst_37:
// rs1_b0_val == -2, rs1_b6_val == 0
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0x1000f8557f80fcfe;  immval:0x1
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0x1000f8557f80fcfe, 0x1, x30, x2, 224, x3)

inst_38:
// rs1_b0_val == 64, rs1_b5_val == -86, rs1_b3_val == -65
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0x3f6aa06bfffff40;  immval:0x1
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0x3f6aa06bfffff40, 0x1, x30, x2, 240, x3)

inst_39:
// rs1_b0_val == 16, rs1_b4_val == 32, rs1_b3_val == 64
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0x406ef2040fc0010;  immval:0x3
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0x406ef2040fc0010, 0x3, x30, x2, 256, x3)

inst_40:
// rs1_b5_val == 2, rs1_b4_val == -65
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0x63f02bf4001faf6;  immval:0x3
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0x63f02bf4001faf6, 0x3, x30, x2, 272, x3)

inst_41:
// rs1_b4_val == -33, rs1_b6_val == -3
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0xdffd00df3ffcf7c0;  immval:0x1
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0xdffd00df3ffcf7c0, 0x1, x30, x2, 288, x3)

inst_42:
// rs1_b4_val == -9, 
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0x4f7bff709fafd02;  immval:0x0
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0x4f7bff709fafd02, 0x0, x30, x2, 304, x3)

inst_43:
// rs1_b4_val == -2, rs1_b2_val == -5
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0x107faafe01fb0080;  immval:0x2
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0x107faafe01fb0080, 0x2, x30, x2, 320, x3)

inst_44:
// rs1_b4_val == 64, rs1_b6_val == 32
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0x5520f940fcf9fac0;  immval:0x7
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0x5520f940fcf9fac0, 0x7, x30, x2, 336, x3)

inst_45:
// rs1_b4_val == 2, 
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0x3aa0302f7040455;  immval:0x5
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0x3aa0302f7040455, 0x5, x30, x2, 352, x3)

inst_46:
// rs1_b3_val == -33, 
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0xef0901fcdff610aa;  immval:0x0
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0xef0901fcdff610aa, 0x0, x30, x2, 368, x3)

inst_47:
// rs1_b3_val == -5, rs1_b6_val == -128
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0x28010fdfbbf0080;  immval:0x5
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0x28010fdfbbf0080, 0x5, x30, x2, 384, x3)

inst_48:
// rs1_b3_val == -2, 
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0xf87ffffafeaa7ff9;  immval:0x1
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0xf87ffffafeaa7ff9, 0x1, x30, x2, 400, x3)

inst_49:
// rs1_b3_val == -128, rs1_b6_val == -1
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0xdfffaa0380fe08aa;  immval:0x3
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0xdfffaa0380fe08aa, 0x3, x30, x2, 416, x3)

inst_50:
// rs1_b0_val == -1, rs1_b6_val == 8
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0xf70809dfdf0455ff;  immval:0x7
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0xf70809dfdf0455ff, 0x7, x30, x2, 432, x3)

inst_51:
// rs1_b3_val == 8, 
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0x255efc00809f8df;  immval:0x1
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0x255efc00809f8df, 0x1, x30, x2, 448, x3)

inst_52:
// rs1_b3_val == 4, 
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0xbfdffaef0455fb07;  immval:0x6
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0xbfdffaef0455fb07, 0x6, x30, x2, 464, x3)

inst_53:
// rs1_b2_val == -9, 
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0x2040fdfd40f70301;  immval:0x5
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0x2040fdfd40f70301, 0x5, x30, x2, 480, x3)

inst_54:
// rs1_b2_val == 2, rs1_b3_val == 0
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0xfa0201200002ef7f;  immval:0x7
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0xfa0201200002ef7f, 0x7, x30, x2, 496, x3)

inst_55:
// rs1_b2_val == 8, 
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0xfc55f8f8ff0807aa;  immval:0x5
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0xfc55f8f8ff0807aa, 0x5, x30, x2, 512, x3)

inst_56:
// rs1_b6_val == 4, 
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0x10403f702050500;  immval:0x6
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0x10403f702050500, 0x6, x30, x2, 528, x3)

inst_57:
// rs1_b5_val == 32, 
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0xfffe203f05effc09;  immval:0x3
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0xfffe203f05effc09, 0x3, x30, x2, 544, x3)

inst_58:
// rs1_b5_val == -9, 
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0xfdf8f708ffbf20f8;  immval:0x2
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0xfdf8f708ffbf20f8, 0x2, x30, x2, 560, x3)

inst_59:
// rs1_b6_val == -86, rs1_b0_val == 8, rs1_b1_val == 8
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0x3aafafaeff90808;  immval:0x4
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0x3aafafaeff90808, 0x4, x30, x2, 576, x3)

inst_60:
// rs1_b1_val == 32, rs1_b5_val == -5
// opcode: sclip8 ; op1:x30; dest:x31; op1val:0xfe05fbfd01fc20f6;  immval:0x6
TEST_PKIMM_OP( sclip8, x31, x30, 0x0000000000000000, 0xfe05fbfd01fc20f6, 0x6, x30, x2, 592, x3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x11_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x11_1:
    .fill 46*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 76*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
