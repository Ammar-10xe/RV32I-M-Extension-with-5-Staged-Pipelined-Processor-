
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the srai16.u instruction of the RISC-V RV64PZicsr extension for the srai16.u covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",srai16.u)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rd, rs1==x30, rd==x30, rs1_h0_val == -32768, rs1_h2_val == 8192, imm_val == 5
// opcode: srai16.u ; op1:x30; dest:x30; op1val:0xfffc2000fff98000;  immval:0x5
TEST_IMM_OP( srai16.u, x30, x30, 0x0000000000000000, 0xfffc2000fff98000, 0x5, x3, 0, x12)

inst_1:
// rs1 != rd, rs1==x19, rd==x7, imm_val == 15, rs1_h1_val == -1025, rs1_h3_val == 64, rs1_h0_val == -21846
// opcode: srai16.u ; op1:x19; dest:x7; op1val:0x400005fbffaaaa;  immval:0xf
TEST_IMM_OP( srai16.u, x7, x19, 0x0000000000000000, 0x400005fbffaaaa, 0xf, x3, 8, x12)

inst_2:
// rs1==x14, rd==x25, imm_val == 14, rs1_h0_val == 8192, rs1_h1_val == -16385
// opcode: srai16.u ; op1:x14; dest:x25; op1val:0x09fff8bfff2000;  immval:0xe
TEST_IMM_OP( srai16.u, x25, x14, 0x0000000000000000, 0x09fff8bfff2000, 0xe, x3, 16, x12)

inst_3:
// rs1==x20, rd==x31, imm_val == 13, rs1_h0_val == -5, rs1_h2_val == -513, rs1_h3_val == 4096
// opcode: srai16.u ; op1:x20; dest:x31; op1val:0x1000fdfffff9fffb;  immval:0xd
TEST_IMM_OP( srai16.u, x31, x20, 0x0000000000000000, 0x1000fdfffff9fffb, 0xd, x3, 24, x12)

inst_4:
// rs1==x22, rd==x10, imm_val == 12, rs1_h1_val == 128, rs1_h3_val == 128, rs1_h0_val == 4, rs1_h2_val == -32768
// opcode: srai16.u ; op1:x22; dest:x10; op1val:0x80800000800004;  immval:0xc
TEST_IMM_OP( srai16.u, x10, x22, 0x0000000000000000, 0x80800000800004, 0xc, x3, 32, x12)

inst_5:
// rs1==x6, rd==x16, imm_val == 11, rs1_h3_val == 4, rs1_h0_val == 512, rs1_h2_val == 1024, rs1_h1_val == -5
// opcode: srai16.u ; op1:x6; dest:x16; op1val:0x040400fffb0200;  immval:0xb
TEST_IMM_OP( srai16.u, x16, x6, 0x0000000000000000, 0x040400fffb0200, 0xb, x3, 40, x12)

inst_6:
// rs1==x0, rd==x15, imm_val == 10, rs1_h1_val == -65, rs1_h2_val == -8193, rs1_h3_val == 16384
// opcode: srai16.u ; op1:x0; dest:x15; op1val:0x4000dfffffbffffa;  immval:0xa
TEST_IMM_OP( srai16.u, x15, x0, 0x0000000000000000, 0x4000dfffffbffffa, 0xa, x3, 48, x12)

inst_7:
// rs1==x4, rd==x29, imm_val == 9, rs1_h1_val == 4096, rs1_h3_val == 8
// opcode: srai16.u ; op1:x4; dest:x29; op1val:0x08fff910008000;  immval:0x9
TEST_IMM_OP( srai16.u, x29, x4, 0x0000000000000000, 0x08fff910008000, 0x9, x3, 56, x12)

inst_8:
// rs1==x1, rd==x6, imm_val == 8, rs1_h2_val == 32, rs1_h0_val == 1
// opcode: srai16.u ; op1:x1; dest:x6; op1val:0xc0000020fffb0001;  immval:0x8
TEST_IMM_OP( srai16.u, x6, x1, 0x0000000000000000, 0xc0000020fffb0001, 0x8, x3, 64, x12)

inst_9:
// rs1==x11, rd==x18, imm_val == 7, rs1_h1_val == -513, rs1_h2_val == -2049, rs1_h3_val == 16, rs1_h0_val == 16384
// opcode: srai16.u ; op1:x11; dest:x18; op1val:0x10f7fffdff4000;  immval:0x7
TEST_IMM_OP( srai16.u, x18, x11, 0x0000000000000000, 0x10f7fffdff4000, 0x7, x3, 72, x12)

inst_10:
// rs1==x8, rd==x13, imm_val == 6, 
// opcode: srai16.u ; op1:x8; dest:x13; op1val:0xfff80006fff60005;  immval:0x6
TEST_IMM_OP( srai16.u, x13, x8, 0x0000000000000000, 0xfff80006fff60005, 0x6, x3, 80, x12)

inst_11:
// rs1==x21, rd==x4, imm_val == 4, rs1_h3_val == 512, rs1_h1_val == -33
// opcode: srai16.u ; op1:x21; dest:x4; op1val:0x2000003ffdf0009;  immval:0x4
TEST_IMM_OP( srai16.u, x4, x21, 0x0000000000000000, 0x2000003ffdf0009, 0x4, x3, 88, x12)

inst_12:
// rs1==x27, rd==x2, imm_val == 3, rs1_h3_val == -129
// opcode: srai16.u ; op1:x27; dest:x2; op1val:0xff7ffff800064000;  immval:0x3
TEST_IMM_OP( srai16.u, x2, x27, 0x0000000000000000, 0xff7ffff800064000, 0x3, x3, 96, x12)

inst_13:
// rs1==x13, rd==x28, imm_val == 2, rs1_h2_val == -1025
// opcode: srai16.u ; op1:x13; dest:x28; op1val:0x200fbff00050006;  immval:0x2
TEST_IMM_OP( srai16.u, x28, x13, 0x0000000000000000, 0x200fbff00050006, 0x2, x3, 104, x12)

inst_14:
// rs1==x18, rd==x1, imm_val == 1, rs1_h2_val == 512
// opcode: srai16.u ; op1:x18; dest:x1; op1val:0xfffa0200c000fff6;  immval:0x1
TEST_IMM_OP( srai16.u, x1, x18, 0x0000000000000000, 0xfffa0200c000fff6, 0x1, x3, 112, x12)

inst_15:
// rs1==x31, rd==x20, imm_val == 0, rs1_h1_val == -32768, rs1_h0_val == -1025
// opcode: srai16.u ; op1:x31; dest:x20; op1val:0x400000068000fbff;  immval:0x0
TEST_IMM_OP( srai16.u, x20, x31, 0x0000000000000000, 0x400000068000fbff, 0x0, x3, 120, x12)

inst_16:
// rs1==x26, rd==x17, rs1_h3_val == -21846, 
// opcode: srai16.u ; op1:x26; dest:x17; op1val:0xaaaac0000003aaaa;  immval:0x0
TEST_IMM_OP( srai16.u, x17, x26, 0x0000000000000000, 0xaaaac0000003aaaa, 0x0, x3, 128, x12)

inst_17:
// rs1==x9, rd==x8, rs1_h3_val == 21845, rs1_h0_val == 16, rs1_h1_val == 2048
// opcode: srai16.u ; op1:x9; dest:x8; op1val:0x5555000308000010;  immval:0x5
TEST_IMM_OP( srai16.u, x8, x9, 0x0000000000000000, 0x5555000308000010, 0x5, x3, 136, x12)

inst_18:
// rs1==x29, rd==x5, rs1_h3_val == 32767, rs1_h0_val == 8, rs1_h1_val == -1
// opcode: srai16.u ; op1:x29; dest:x5; op1val:0x7fff2000ffff0008;  immval:0x0
TEST_IMM_OP( srai16.u, x5, x29, 0x0000000000000000, 0x7fff2000ffff0008, 0x0, x3, 144, x12)

inst_19:
// rs1==x15, rd==x24, rs1_h3_val == -16385, rs1_h2_val == 16384, rs1_h1_val == 32
// opcode: srai16.u ; op1:x15; dest:x24; op1val:0xbfff400000200007;  immval:0x7
TEST_IMM_OP( srai16.u, x24, x15, 0x0000000000000000, 0xbfff400000200007, 0x7, x3, 152, x4)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_20:
// rs1==x10, rd==x23, rs1_h3_val == -8193, rs1_h2_val == -1, rs1_h1_val == 1
// opcode: srai16.u ; op1:x10; dest:x23; op1val:0xdfffffff00010200;  immval:0x3
TEST_IMM_OP( srai16.u, x23, x10, 0x0000000000000000, 0xdfffffff00010200, 0x3, x1, 0, x4)

inst_21:
// rs1==x17, rd==x19, rs1_h3_val == -4097, rs1_h0_val == -2, rs1_h2_val == 0
// opcode: srai16.u ; op1:x17; dest:x19; op1val:0xefff0000fffbfffe;  immval:0x5
TEST_IMM_OP( srai16.u, x19, x17, 0x0000000000000000, 0xefff0000fffbfffe, 0x5, x1, 8, x4)

inst_22:
// rs1==x28, rd==x14, rs1_h3_val == -2049, rs1_h0_val == -129
// opcode: srai16.u ; op1:x28; dest:x14; op1val:0xf7fffffc1000ff7f;  immval:0x1
TEST_IMM_OP( srai16.u, x14, x28, 0x0000000000000000, 0xf7fffffc1000ff7f, 0x1, x1, 16, x4)

inst_23:
// rs1==x3, rd==x11, rs1_h3_val == -1025, rs1_h2_val == 2
// opcode: srai16.u ; op1:x3; dest:x11; op1val:0xfbff000200068000;  immval:0xd
TEST_IMM_OP( srai16.u, x11, x3, 0x0000000000000000, 0xfbff000200068000, 0xd, x1, 24, x4)

inst_24:
// rs1==x23, rd==x0, rs1_h3_val == -513, rs1_h0_val == 64, rs1_h2_val == -129
// opcode: srai16.u ; op1:x23; dest:x0; op1val:0xfdffff7ffff60040;  immval:0x7
TEST_IMM_OP( srai16.u, x0, x23, 0x0000000000000000, 0xfdffff7ffff60040, 0x7, x1, 32, x4)

inst_25:
// rs1==x2, rd==x12, rs1_h3_val == -257, rs1_h0_val == 1024
// opcode: srai16.u ; op1:x2; dest:x12; op1val:0xfeff000200090400;  immval:0x8
TEST_IMM_OP( srai16.u, x12, x2, 0x0000000000000000, 0xfeff000200090400, 0x8, x1, 40, x4)

inst_26:
// rs1==x24, rd==x9, rs1_h3_val == -65, rs1_h0_val == -2049, rs1_h2_val == -3, rs1_h1_val == 16
// opcode: srai16.u ; op1:x24; dest:x9; op1val:0xffbffffd0010f7ff;  immval:0xe
TEST_IMM_OP( srai16.u, x9, x24, 0x0000000000000000, 0xffbffffd0010f7ff, 0xe, x1, 48, x4)

inst_27:
// rs1==x25, rd==x21, rs1_h3_val == -33, rs1_h2_val == -17
// opcode: srai16.u ; op1:x25; dest:x21; op1val:0xffdfffef10000003;  immval:0xd
TEST_IMM_OP( srai16.u, x21, x25, 0x0000000000000000, 0xffdfffef10000003, 0xd, x1, 56, x4)

inst_28:
// rs1==x7, rd==x3, rs1_h3_val == -17, rs1_h1_val == 4, rs1_h0_val == 2048
// opcode: srai16.u ; op1:x7; dest:x3; op1val:0xffef000500040800;  immval:0x8
TEST_IMM_OP( srai16.u, x3, x7, 0x0000000000000000, 0xffef000500040800, 0x8, x1, 64, x4)

inst_29:
// rs1==x12, rd==x26, rs1_h3_val == -9, rs1_h0_val == 32, rs1_h1_val == 256
// opcode: srai16.u ; op1:x12; dest:x26; op1val:0xfff7000901000020;  immval:0x6
TEST_IMM_OP( srai16.u, x26, x12, 0x0000000000000000, 0xfff7000901000020, 0x6, x1, 72, x4)

inst_30:
// rs1==x16, rd==x22, rs1_h3_val == -5, rs1_h2_val == -2
// opcode: srai16.u ; op1:x16; dest:x22; op1val:0xfffbfffe00090005;  immval:0xa
TEST_IMM_OP( srai16.u, x22, x16, 0x0000000000000000, 0xfffbfffe00090005, 0xa, x1, 80, x4)

inst_31:
// rs1==x5, rd==x27, rs1_h3_val == -3, rs1_h1_val == 1024, rs1_h0_val == 2
// opcode: srai16.u ; op1:x5; dest:x27; op1val:0xfffd000704000002;  immval:0x8
TEST_IMM_OP( srai16.u, x27, x5, 0x0000000000000000, 0xfffd000704000002, 0x8, x1, 88, x4)

inst_32:
// rs1_h3_val == -2, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xfffe20000080fff6;  immval:0x0
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xfffe20000080fff6, 0x0, x1, 96, x4)

inst_33:
// rs1_h3_val == -32768, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x8000dfff00010040;  immval:0x3
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x8000dfff00010040, 0x3, x1, 104, x4)

inst_34:
// rs1_h3_val == 8192, rs1_h1_val == 16384
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x2000000740000006;  immval:0x1
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x2000000740000006, 0x1, x1, 112, x4)

inst_35:
// rs1_h0_val == -16385, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xfffa40000010bfff;  immval:0x9
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xfffa40000010bfff, 0x9, x1, 120, x4)

inst_36:
// rs1_h0_val == -8193, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xfffdfbff0007dfff;  immval:0x3
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xfffdfbff0007dfff, 0x3, x1, 128, x4)

inst_37:
// rs1_h0_val == -4097, rs1_h2_val == -21846
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x3fffaaaa8000efff;  immval:0x6
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x3fffaaaa8000efff, 0x6, x1, 136, x4)

inst_38:
// rs1_h0_val == -513, rs1_h2_val == 2048
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xfbff08000007fdff;  immval:0x6
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xfbff08000007fdff, 0x6, x1, 144, x4)

inst_39:
// rs1_h0_val == -257, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xbffffdff0001feff;  immval:0x1
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xbffffdff0001feff, 0x1, x1, 152, x4)

inst_40:
// rs1_h0_val == -65, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xfff900020800ffbf;  immval:0x8
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xfff900020800ffbf, 0x8, x1, 160, x4)

inst_41:
// rs1_h0_val == -33, rs1_h3_val == 1024, rs1_h1_val == 64
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x400fff90040ffdf;  immval:0x3
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x400fff90040ffdf, 0x3, x1, 168, x4)

inst_42:
// rs1_h0_val == -17, rs1_h1_val == -257
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x40000005feffffef;  immval:0x6
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x40000005feffffef, 0x6, x1, 176, x4)

inst_43:
// rs1_h0_val == -9, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x8000fffdfff8fff7;  immval:0x2
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x8000fffdfff8fff7, 0x2, x1, 184, x4)

inst_44:
// rs1_h0_val == -3, rs1_h1_val == 512, rs1_h2_val == 256
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xfff801000200fffd;  immval:0xa
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xfff801000200fffd, 0xa, x1, 192, x4)

inst_45:
// rs1_h0_val == 4096, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x08fffc02001000;  immval:0xa
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x08fffc02001000, 0xa, x1, 200, x4)

inst_46:
// rs1_h0_val == 256, rs1_h1_val == -17
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xffbf0020ffef0100;  immval:0xb
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xffbf0020ffef0100, 0xb, x1, 208, x4)

inst_47:
// rs1_h0_val == 128, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xfffcfdfffff90080;  immval:0xb
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xfffcfdfffff90080, 0xb, x1, 216, x4)

inst_48:
// rs1_h0_val == 0, rs1_h2_val == 16
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x10001001000000;  immval:0xa
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x10001001000000, 0xa, x1, 224, x4)

inst_49:
// rs1_h0_val == -1, rs1_h2_val == -33
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x10ffdf0400ffff;  immval:0x4
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x10ffdf0400ffff, 0x4, x1, 232, x4)

inst_50:
// rs1_h3_val == 2048, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x8000006fff6fffe;  immval:0x2
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x8000006fff6fffe, 0x2, x1, 240, x4)

inst_51:
// rs1_h3_val == 256, rs1_h1_val == 32767
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x100fbff7fffc000;  immval:0x8
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x100fbff7fffc000, 0x8, x1, 248, x4)

inst_52:
// rs1_h3_val == 32, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x20ffff0040ffff;  immval:0xa
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x20ffff0040ffff, 0xa, x1, 256, x4)

inst_53:
// rs1_h3_val == 2, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x0280007ffff7ff;  immval:0x9
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x0280007ffff7ff, 0x9, x1, 264, x4)

inst_54:
// rs1_h3_val == 1, rs1_h1_val == -129
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x010200ff7f0200;  immval:0xd
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x010200ff7f0200, 0xd, x1, 272, x4)

inst_55:
// rs1_h2_val == -65, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xfbffffbfc0000004;  immval:0x7
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xfbffffbfc0000004, 0x7, x1, 280, x4)

inst_56:
// rs1_h2_val == -9, rs1_h1_val == -21846
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xff7ffff7aaaafffd;  immval:0xa
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xff7ffff7aaaafffd, 0xa, x1, 288, x4)

inst_57:
// rs1_h2_val == -5, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xfffefffb0001efff;  immval:0xf
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xfffefffb0001efff, 0xf, x1, 296, x4)

inst_58:
// rs1_h2_val == 4096, rs1_h3_val == 0
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x0010000005bfff;  immval:0x2
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x0010000005bfff, 0x2, x1, 304, x4)

inst_59:
// rs1_h2_val == 128, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xbfff0080fffafffd;  immval:0xe
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xbfff0080fffafffd, 0xe, x1, 312, x4)

inst_60:
// rs1_h2_val == 64, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x10000040fff6fff6;  immval:0xf
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x10000040fff6fff6, 0xf, x1, 320, x4)

inst_61:
// rs1_h2_val == 8, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x100008aaaa0040;  immval:0x6
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x100008aaaa0040, 0x6, x1, 328, x4)

inst_62:
// rs1_h2_val == 4, rs1_h1_val == 21845
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xffbf00045555feff;  immval:0x0
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xffbf00045555feff, 0x0, x1, 336, x4)

inst_63:
// rs1_h2_val == 1, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xaaaa00010800fbff;  immval:0x3
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xaaaa00010800fbff, 0x3, x1, 344, x4)

inst_64:
// rs1_h2_val == 32767, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x027fff00100009;  immval:0x6
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x027fff00100009, 0x6, x1, 352, x4)

inst_65:
// rs1_h1_val == -8193, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x090003dfffdfff;  immval:0x0
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x090003dfffdfff, 0x0, x1, 360, x4)

inst_66:
// rs1_h2_val == -257, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xfffdfeff0100ffff;  immval:0x6
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xfffdfeff0100ffff, 0x6, x1, 368, x4)

inst_67:
// rs1_h0_val == 21845, rs1_h1_val == -2049
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x2000fffbf7ff5555;  immval:0x0
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x2000fffbf7ff5555, 0x0, x1, 376, x4)

inst_68:
// rs1_h1_val == -9, rs1_h3_val == -1
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xffff1000fff7fff6;  immval:0xf
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xffff1000fff7fff6, 0xf, x1, 384, x4)

inst_69:
// rs1_h1_val == -3, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xbfff0006fffdffdf;  immval:0x0
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xbfff0006fffdffdf, 0x0, x1, 392, x4)

inst_70:
// rs1_h1_val == -2, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x050400fffefff6;  immval:0xa
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x050400fffefff6, 0xa, x1, 400, x4)

inst_71:
// rs1_h1_val == 8192, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x0900012000ffff;  immval:0xc
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x0900012000ffff, 0xc, x1, 408, x4)

inst_72:
// rs1_h2_val == 21845, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xffbf55550100ffbf;  immval:0xb
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xffbf55550100ffbf, 0xb, x1, 416, x4)

inst_73:
// rs1_h1_val == 8, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xfff7800000082000;  immval:0x1
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xfff7800000082000, 0x1, x1, 424, x4)

inst_74:
// rs1_h2_val == -16385, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x04bfff00080000;  immval:0xe
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x04bfff00080000, 0xe, x1, 432, x4)

inst_75:
// rs1_h1_val == 2, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x1000060002feff;  immval:0x2
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x1000060002feff, 0x2, x1, 440, x4)

inst_76:
// rs1_h2_val == -4097, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xfffaefff0800fffd;  immval:0xd
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xfffaefff0800fffd, 0xd, x1, 448, x4)

inst_77:
// rs1_h1_val == 0, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x01200000000200;  immval:0xf
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x01200000000200, 0xf, x1, 456, x4)

inst_78:
// rs1_h1_val == -4097, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x201000efff0000;  immval:0x0
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x201000efff0000, 0x0, x1, 464, x4)

inst_79:
// rs1_h0_val == 32767, 
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x800effffff67fff;  immval:0xe
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x800effffff67fff, 0xe, x1, 472, x4)

inst_80:
// imm_val == 10, rs1_h1_val == -65, rs1_h2_val == -8193, rs1_h3_val == 16384
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0x4000dfffffbffffa;  immval:0xa
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0x4000dfffffbffffa, 0xa, x1, 480, x4)

inst_81:
// rs1_h3_val == -513, rs1_h0_val == 64, rs1_h2_val == -129
// opcode: srai16.u ; op1:x30; dest:x31; op1val:0xfdffff7ffff60040;  immval:0x7
TEST_IMM_OP( srai16.u, x31, x30, 0x0000000000000000, 0xfdffff7ffff60040, 0x7, x1, 488, x4)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 62*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
