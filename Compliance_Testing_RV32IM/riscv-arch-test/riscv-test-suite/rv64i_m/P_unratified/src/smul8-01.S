
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the smul8 instruction of the RISC-V RV64PZicsr extension for the smul8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",smul8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x7,signature_x7_1)

inst_0:
// rs1 == rd != rs2, rs1==x4, rs2==x11, rd==x4, rs1_b0_val == -128, rs1_b7_val != rs2_b7_val, rs1_b5_val == 32, rs1_b7_val > 0 and rs2_b7_val > 0, rs1_b6_val != rs2_b6_val, rs1_b6_val > 0 and rs2_b6_val < 0, rs2_b3_val == 64, rs1_b5_val != rs2_b5_val, rs1_b5_val > 0 and rs2_b5_val < 0, rs1_b4_val != rs2_b4_val, rs1_b4_val < 0 and rs2_b4_val > 0, rs1_b4_val == -128, rs1_b3_val != rs2_b3_val, rs1_b3_val > 0 and rs2_b3_val > 0, rs1_b2_val != rs2_b2_val, rs1_b2_val > 0 and rs2_b2_val > 0, rs1_b1_val != rs2_b1_val, rs2_b2_val == 4, rs1_b1_val < 0 and rs2_b1_val > 0, rs1_b0_val != rs2_b0_val, rs1_b0_val < 0 and rs2_b0_val > 0, rs2_b7_val == 127, rs2_b0_val == 32, rs1_b1_val == -65, rs1_b7_val == 8, rs2_b5_val == -5, rs2_b4_val == 85
// opcode: smul8 ; op1:x4; op2:x11; dest:x4; op1val:0x080320800906bf80;  op2val:0x7ff9fb5540040720
TEST_P64_PNN_OP(smul8, x4, $rd_hi, x4, x11, 0x0000000000000000, $correctval_hi, 0x080320800906bf80, 0x7ff9fb5540040720, x7, 0, x17)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x10, rs2==x22, rd==x6, rs1_b7_val == rs2_b7_val, rs1_b4_val == -1, rs1_b1_val == rs2_b1_val, rs2_b2_val == 0, rs1_b6_val == -65, rs1_b5_val == 16, rs1_b6_val < 0 and rs2_b6_val < 0, rs1_b1_val > 0 and rs2_b1_val > 0, rs2_b1_val == 127, rs1_b1_val == 127, rs1_b0_val > 0 and rs2_b0_val > 0, rs2_b3_val == -1, rs1_b4_val < 0 and rs2_b4_val < 0, rs1_b3_val < 0 and rs2_b3_val < 0, rs1_b7_val == 16, rs2_b7_val == 16, rs1_b0_val == 127
// opcode: smul8 ; op1:x10; op2:x22; dest:x6; op1val:0x10bf10fffa067f7f;  op2val:0x10faf9c0ff007f09
TEST_P64_PNN_OP(smul8, x6, $rd_hi, x10, x22, 0x0000000000000000, $correctval_hi, 0x10bf10fffa067f7f, 0x10faf9c0ff007f09, x7, 16, x17)

inst_2:
// rs1 == rs2 != rd, rs1==x14, rs2==x14, rd==x26, rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b2_val == 32, rs2_b2_val == 8, rs1_b5_val == 4, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b0_val == 32, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b6_val == 64, rs2_b3_val == 2, rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b7_val == 85, rs1_b1_val == 64, rs1_b4_val > 0 and rs2_b4_val < 0
// opcode: smul8 ; op1:x14; op2:x14; dest:x26; op1val:0xf8f9040303204020;  op2val:0x554005f902087ff6
TEST_P64_PNN_OP(smul8, x26, $rd_hi, x14, x14, 0x0000000000000000, $correctval_hi, 0xf8f9040303204020, 0x554005f902087ff6, x7, 32, x17)

inst_3:
// rs1 == rs2 == rd, rs1==x12, rs2==x12, rd==x12, rs1_b7_val < 0 and rs2_b7_val < 0, rs2_b2_val == 16, rs1_b5_val == -128, rs2_b6_val == 127, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b4_val == 85, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b1_val == -9, rs1_b3_val == 0, rs1_b2_val == 85, rs1_b6_val == 0, rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b7_val == -2, rs1_b7_val == -128, rs2_b4_val == 4
// opcode: smul8 ; op1:x12; op2:x12; dest:x12; op1val:0x800080550055f7fa;  op2val:0xfe7f09043f10fc20
TEST_P64_PNN_OP(smul8, x12, $rd_hi, x12, x12, 0x0000000000000000, $correctval_hi, 0x800080550055f7fa, 0xfe7f09043f10fc20, x7, 48, x17)

inst_4:
// rs2 == rd != rs1, rs1==x13, rs2==x28, rd==x28, rs1_b7_val > 0 and rs2_b7_val < 0, rs1_b2_val > 0 and rs2_b2_val < 0, rs2_b5_val == 32, rs1_b6_val > 0 and rs2_b6_val > 0, rs2_b0_val == 2, rs2_b6_val == 8, rs2_b4_val == -3, rs2_b2_val == -17, rs1_b3_val < 0 and rs2_b3_val > 0, rs1_b7_val == 32
// opcode: smul8 ; op1:x13; op2:x28; dest:x28; op1val:0x20060307f903fc05;  op2val:0xf80820fd03ef7f02
TEST_P64_PNN_OP(smul8, x28, $rd_hi, x13, x28, 0x0000000000000000, $correctval_hi, 0x20060307f903fc05, 0xf80820fd03ef7f02, x7, 64, x17)

inst_5:
// rs1==x18, rs2==x27, rd==x24, rs1_b6_val == rs2_b6_val, rs1_b2_val < 0 and rs2_b2_val < 0, rs2_b7_val == 1, rs2_b0_val == -5, rs1_b3_val == 127, rs1_b0_val == -17, rs1_b0_val < 0 and rs2_b0_val < 0, rs2_b3_val == 16, rs1_b5_val < 0 and rs2_b5_val < 0, rs1_b2_val == -5, rs2_b5_val == -65
// opcode: smul8 ; op1:x18; op2:x27; dest:x24; op1val:0x80c080f87ffbf7ef;  op2val:0x01c0bf0410f97ffb
TEST_P64_PNN_OP(smul8, x24, $rd_hi, x18, x27, 0x0000000000000000, $correctval_hi, 0x80c080f87ffbf7ef, 0x01c0bf0410f97ffb, x7, 80, x17)

inst_6:
// rs1==x29, rs2==x10, rd==x16, rs1_b5_val == rs2_b5_val, rs2_b0_val == -33, rs1_b3_val == -65, rs1_b0_val == 2, rs2_b1_val == -17, rs1_b4_val == 127, rs1_b6_val == 16, rs2_b6_val == 0, rs2_b2_val == -65, rs2_b7_val == 64, rs2_b4_val == 2
// opcode: smul8 ; op1:x29; op2:x10; dest:x16; op1val:0x0510067fbf03fc02;  op2val:0x4000060202bfefdf
TEST_P64_PNN_OP(smul8, x16, $rd_hi, x29, x10, 0x0000000000000000, $correctval_hi, 0x0510067fbf03fc02, 0x4000060202bfefdf, x7, 96, x17)

inst_7:
// rs1==x21, rs2==x24, rd==x18, rs1_b4_val == rs2_b4_val, rs1_b2_val < 0 and rs2_b2_val > 0, rs1_b2_val == -65, rs1_b6_val == -86, rs2_b1_val == -86, rs2_b5_val == 1, rs2_b6_val == -9, rs1_b1_val == -33, rs1_b3_val == 2, rs2_b7_val == -5, rs1_b7_val == -3, rs1_b3_val > 0 and rs2_b3_val < 0
// opcode: smul8 ; op1:x21; op2:x24; dest:x18; op1val:0xfdaa095502bfdf02;  op2val:0xfbf70155c006aa05
TEST_P64_PNN_OP(smul8, x18, $rd_hi, x21, x24, 0x0000000000000000, $correctval_hi, 0xfdaa095502bfdf02, 0xfbf70155c006aa05, x7, 112, x17)

inst_8:
// rs1==x23, rs2==x13, rd==x22, rs1_b3_val == rs2_b3_val, rs1_b5_val == -5, rs1_b7_val == 0, rs1_b0_val == 4, rs2_b1_val == -9, rs2_b4_val == 127, rs1_b4_val == -2, rs1_b2_val == -9
// opcode: smul8 ; op1:x23; op2:x13; dest:x22; op1val:0x00fafbfefcf7df04;  op2val:0xf807207ffc3ff7fc
TEST_P64_PNN_OP(smul8, x22, $rd_hi, x23, x13, 0x0000000000000000, $correctval_hi, 0x00fafbfefcf7df04, 0xf807207ffc3ff7fc, x7, 128, x17)

inst_9:
// rs1==x9, rs2==x15, rd==x30, rs1_b2_val == rs2_b2_val, rs1_b0_val == -65, rs2_b0_val == -9, rs1_b7_val == -1, rs2_b4_val == 16, rs2_b3_val == -2, rs1_b6_val == 2, rs2_b7_val == -3, rs2_b1_val == 1, rs2_b2_val == -9, rs1_b4_val == 4
// opcode: smul8 ; op1:x9; op2:x15; dest:x30; op1val:0xff02fa043ff740bf;  op2val:0xfdf7fc10fef701f7
TEST_P64_PNN_OP(smul8, x30, $rd_hi, x9, x15, 0x0000000000000000, $correctval_hi, 0xff02fa043ff740bf, 0xfdf7fc10fef701f7, x7, 144, x17)

inst_10:
// rs1==x26, rs2==x8, rd==x2, rs1_b1_val > 0 and rs2_b1_val < 0, rs2_b5_val == 64, rs2_b3_val == -3, rs2_b0_val == 0, rs1_b6_val == 64, rs2_b7_val == -17, rs1_b4_val == 64, rs2_b2_val == -128
// opcode: smul8 ; op1:x26; op2:x8; dest:x2; op1val:0xf840c040c0f80903;  op2val:0xefc04009fd80f600
TEST_P64_PNN_OP(smul8, x2, $rd_hi, x26, x8, 0x0000000000000000, $correctval_hi, 0xf840c040c0f80903, 0xefc04009fd80f600, x7, 160, x17)

inst_11:
// rs1==x22, rs2==x5, rd==x8, rs1_b0_val == rs2_b0_val, rs2_b6_val == 32, rs1_b3_val == -2, rs2_b3_val == 127, rs1_b1_val == -2
// opcode: smul8 ; op1:x22; op2:x5; dest:x8; op1val:0x0810fb07fefafefc;  op2val:0x062006c07f0403fc
TEST_P64_PNN_OP(smul8, x8, $rd_hi, x22, x5, 0x0000000000000000, $correctval_hi, 0x0810fb07fefafefc, 0x062006c07f0403fc, x7, 176, x17)

inst_12:
// rs1==x0, rs2==x2, rd==x10, rs2_b7_val == -86, rs1_b5_val == 64, rs1_b3_val == -3, rs2_b0_val == 4, rs1_b4_val == -5, rs2_b2_val == -86, rs1_b6_val == -1, rs2_b4_val == 1
// opcode: smul8 ; op1:x0; op2:x2; dest:x10; op1val:0x05ff40fbfdf7faf8;  op2val:0xaa200601f6aaaa04
TEST_P64_PNN_OP(smul8, x10, $rd_hi, x0, x2, 0x0000000000000000, $correctval_hi, 0x05ff40fbfdf7faf8, 0xaa200601f6aaaa04, x7, 192, x17)

inst_13:
// rs1==x27, rs2==x30, rd==x20, rs2_b7_val == -65, rs2_b2_val == 64, rs1_b7_val == 2, rs1_b0_val == 85, rs1_b6_val == -33, rs1_b1_val == -17, rs2_b1_val == 32, rs2_b6_val == 1, rs1_b2_val == -2
// opcode: smul8 ; op1:x27; op2:x30; dest:x20; op1val:0x02dff609bffeef55;  op2val:0xbf0105553f402002
TEST_P64_PNN_OP(smul8, x20, $rd_hi, x27, x30, 0x0000000000000000, $correctval_hi, 0x02dff609bffeef55, 0xbf0105553f402002, x7, 208, x17)

inst_14:
// rs1==x3, rs2==x0, rd==x14, rs2_b7_val == -33, rs1_b2_val == 64, rs2_b5_val == -3, rs2_b2_val == 32, rs1_b0_val == -9, rs2_b3_val == -9, rs1_b5_val == -1, rs2_b4_val == -65, rs1_b1_val == 16, rs2_b6_val == -1
// opcode: smul8 ; op1:x3; op2:x0; dest:x14; op1val:0xc0c0ff05fe4010f7;  op2val:0xdffffdbff7203f09
TEST_P64_PNN_OP(smul8, x14, $rd_hi, x3, x0, 0x0000000000000000, $correctval_hi, 0xc0c0ff05fe4010f7, 0xdffffdbff7203f09, x7, 224, x17)

inst_15:
// rs1==x1, rs2==x19, rs2_b7_val == -9, rs1_b3_val == -9, rs1_b1_val == 2, rs1_b5_val == 0, rs2_b0_val == 8, rs1_b2_val == -33, rs1_b4_val == 8, rs2_b1_val == -1, rs2_b5_val == -9
// opcode: smul8 ; op1:x1; op2:x19; dest:x26; op1val:0xf8df0008f7df02c0;  op2val:0xf709f705fa05ff08
TEST_P64_PNN_OP(smul8, x26, $rd_hi, x1, x19, 0x0000000000000000, $correctval_hi, 0xf8df0008f7df02c0, 0xf709f705fa05ff08, x7, 240, x17)
RVTEST_SIGBASE(x10,signature_x10_0)

inst_16:
// rs1==x28, rs2==x16, rs2_b7_val == -128, rs2_b6_val == -65, rs2_b1_val == -33, rs1_b6_val == -128, rs1_b1_val == 1, rs1_b4_val == 1
// opcode: smul8 ; op1:x28; op2:x16; dest:x31; op1val:0x1080fa013ff601fc;  op2val:0x80bffbfcfdaadfdf
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x28, x16, 0x0000000000000000, $correctval_hi, 0x1080fa013ff601fc, 0x80bffbfcfdaadfdf, x10, 0, x12)

inst_17:
// rs1==x15, rs2==x17, rs2_b7_val == 32, rs1_b2_val == 2, rs2_b6_val == -2, rs2_b3_val == 8, rs2_b4_val == -2, rs1_b5_val == -17
// opcode: smul8 ; op1:x15; op2:x17; dest:x30; op1val:0x1007ef7f05027fef;  op2val:0x20fec0fe08f809fa
TEST_P64_PNN_OP(smul8, x30, $rd_hi, x15, x17, 0x0000000000000000, $correctval_hi, 0x1007ef7f05027fef, 0x20fec0fe08f809fa, x10, 16, x12)

inst_18:
// rs1==x8, rs2==x6, rs2_b7_val == 8, rs1_b7_val == 1, rs1_b3_val == -128, rs1_b0_val == 0, rs2_b6_val == -128, rs2_b3_val == 1, rs1_b2_val == -17
// opcode: smul8 ; op1:x8; op2:x6; dest:x30; op1val:0x01bf40f980eff800;  op2val:0x0880faf8013ff800
TEST_P64_PNN_OP(smul8, x30, $rd_hi, x8, x6, 0x0000000000000000, $correctval_hi, 0x01bf40f980eff800, 0x0880faf8013ff800, x10, 32, x12)

inst_19:
// rs1==x17, rs2==x1, rs2_b7_val == 4, rs2_b6_val == -86, rs2_b0_val == 64, rs1_b1_val == -86, rs1_b7_val == 85, rs2_b1_val == 8, rs2_b4_val == 0
// opcode: smul8 ; op1:x17; op2:x1; dest:x9; op1val:0x558080010709aaf8;  op2val:0x04aaf900f93f0840
TEST_P64_PNN_OP(smul8, x9, $rd_hi, x17, x1, 0x0000000000000000, $correctval_hi, 0x558080010709aaf8, 0x04aaf900f93f0840, x10, 48, x12)

inst_20:
// rs1==x31, rs2==x3, rs2_b7_val == 2, rs2_b0_val == -3, rs1_b7_val == -17, rs2_b6_val == 2, rs2_b5_val == 16
// opcode: smul8 ; op1:x31; op2:x3; dest:x5; op1val:0xeffff8fa0003ef3f;  op2val:0x02021001ff8020fd
TEST_P64_PNN_OP(smul8, x5, $rd_hi, x31, x3, 0x0000000000000000, $correctval_hi, 0xeffff8fa0003ef3f, 0x02021001ff8020fd, x10, 64, x12)

inst_21:
// rs1==x25, rs2==x4, rs2_b7_val == 0, rs2_b2_val == -33, rs1_b1_val == -1, rs1_b6_val == 32, rs2_b0_val == -2
// opcode: smul8 ; op1:x25; op2:x4; dest:x18; op1val:0xf92040f8f620fff8;  op2val:0x00f7f8fcf8dffafe
TEST_P64_PNN_OP(smul8, x18, $rd_hi, x25, x4, 0x0000000000000000, $correctval_hi, 0xf92040f8f620fff8, 0x00f7f8fcf8dffafe, x10, 80, x12)

inst_22:
// rs1==x7, rs2==x21, rs2_b7_val == -1, rs2_b3_val == -33, rs2_b6_val == 85, rs1_b0_val == 64, rs2_b2_val == -1, rs2_b5_val == -1, rs1_b7_val == 127
// opcode: smul8 ; op1:x7; op2:x21; dest:x4; op1val:0x7ffc040900020140;  op2val:0xff55fffddfff09df
TEST_P64_PNN_OP(smul8, x4, $rd_hi, x7, x21, 0x0000000000000000, $correctval_hi, 0x7ffc040900020140, 0xff55fffddfff09df, x10, 96, x12)

inst_23:
// rs1==x30, rs2==x9, rs2_b6_val == -33, rs1_b6_val == -17, rs1_b1_val == 0, rs1_b2_val == 16
// opcode: smul8 ; op1:x30; op2:x9; dest:x23; op1val:0xfaefc006bf1000f6;  op2val:0x3fdf1003fa3f0620
TEST_P64_PNN_OP(smul8, x23, $rd_hi, x30, x9, 0x0000000000000000, $correctval_hi, 0xfaefc006bf1000f6, 0x3fdf1003fa3f0620, x10, 112, x12)

inst_24:
// rs1==x19, rs2==x18, rs2_b6_val == -17, rs2_b0_val == -17, rs1_b2_val == 4, rs1_b5_val == 2, rs2_b1_val == 64, rs2_b5_val == -86
// opcode: smul8 ; op1:x19; op2:x18; dest:x2; op1val:0x013f02c03f04023f;  op2val:0x01efaabffeff40ef
TEST_P64_PNN_OP(smul8, x2, $rd_hi, x19, x18, 0x0000000000000000, $correctval_hi, 0x013f02c03f04023f, 0x01efaabffeff40ef, x10, 128, x12)

inst_25:
// rs1==x5, rs2==x23, rs2_b6_val == -5, rs2_b5_val == -128, rs2_b3_val == -17, rs1_b3_val == 8, rs1_b6_val == 4, rs2_b0_val == -86
// opcode: smul8 ; op1:x5; op2:x23; dest:x22; op1val:0x0004eff9080540f8;  op2val:0x09fb8055ef063faa
TEST_P64_PNN_OP(smul8, x22, $rd_hi, x5, x23, 0x0000000000000000, $correctval_hi, 0x0004eff9080540f8, 0x09fb8055ef063faa, x10, 144, x12)

inst_26:
// rs1==x2, rs2==x31, rs2_b6_val == -3, rs2_b5_val == 127, rs1_b1_val == 32, rs1_b6_val == 85
// opcode: smul8 ; op1:x2; op2:x31; dest:x26; op1val:0x09552080faf920f9;  op2val:0xf9fd7ffd06f6ff00
TEST_P64_PNN_OP(smul8, x26, $rd_hi, x2, x31, 0x0000000000000000, $correctval_hi, 0x09552080faf920f9, 0xf9fd7ffd06f6ff00, x10, 160, x12)

inst_27:
// rs1==x24, rs2==x20, rs1_b5_val == -3, rs1_b4_val == -65, rs1_b0_val == 16, rs2_b5_val == 8
// opcode: smul8 ; op1:x24; op2:x20; dest:x25; op1val:0xfc40fdbff6107f10;  op2val:0xf80508047f090603
TEST_P64_PNN_OP(smul8, x25, $rd_hi, x24, x20, 0x0000000000000000, $correctval_hi, 0xfc40fdbff6107f10, 0xf80508047f090603, x10, 176, x12)

inst_28:
// rs1==x11, rs2==x25, rs1_b5_val == -2, rs2_b3_val == -65, rs2_b0_val == -128, rs2_b1_val == 85, rs1_b4_val == -33, rs2_b4_val == 64
// opcode: smul8 ; op1:x11; op2:x25; dest:x18; op1val:0x0102fedf00f90007;  op2val:0xfd3f0540bfdf5580
TEST_P64_PNN_OP(smul8, x18, $rd_hi, x11, x25, 0x0000000000000000, $correctval_hi, 0x0102fedf00f90007, 0xfd3f0540bfdf5580, x10, 192, x12)

inst_29:
// rs1==x16, rs2==x29, rs1_b5_val == 8, rs1_b1_val == -3, rs2_b3_val == 85, rs1_b2_val == -86
// opcode: smul8 ; op1:x16; op2:x29; dest:x27; op1val:0x084008c009aafd40;  op2val:0x04ef400055c0f8aa
TEST_P64_PNN_OP(smul8, x27, $rd_hi, x16, x29, 0x0000000000000000, $correctval_hi, 0x084008c009aafd40, 0x04ef400055c0f8aa, x10, 208, x12)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_30:
// rs1==x20, rs2==x7, rs1_b5_val == 1, rs2_b5_val == 4, rs1_b4_val == -3
// opcode: smul8 ; op1:x20; op2:x7; dest:x10; op1val:0x03df01fdc05509fc;  op2val:0x09c004f909dfc0fe
TEST_P64_PNN_OP(smul8, x10, $rd_hi, x20, x7, 0x0000000000000000, $correctval_hi, 0x03df01fdc05509fc, 0x09c004f909dfc0fe, x1, 0, x2)

inst_31:
// rs1==x6, rs2==x26, rs1_b4_val == -86, rs1_b3_val == -86, rs2_b3_val == -128, rs2_b0_val == 1, rs2_b4_val == -128, rs1_b5_val == 85, rs2_b2_val == -5
// opcode: smul8 ; op1:x6; op2:x26; dest:x28; op1val:0xc0f655aaaa0706c0;  op2val:0x20fafb8080fbfa01
TEST_P64_PNN_OP(smul8, x28, $rd_hi, x6, x26, 0x0000000000000000, $correctval_hi, 0xc0f655aaaa0706c0, 0x20fafb8080fbfa01, x1, 16, x2)

inst_32:
// rs1_b4_val == -17, rs2_b5_val == 2, rs1_b3_val == 64
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x2003fdef403f007f;  op2val:0xc0fa02f802fa4080
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2003fdef403f007f, 0xc0fa02f802fa4080, x1, 32, x2)

inst_33:
// rs1_b4_val == -9, rs2_b4_val == -33, rs2_b1_val == -65, rs1_b3_val == 32, rs1_b0_val == -1
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xf83feff7200606ff;  op2val:0x3ff720df01f8bff6
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf83feff7200606ff, 0x3ff720df01f8bff6, x1, 48, x2)

inst_34:
// rs1_b4_val == 32, 
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x3f02fa200709f802;  op2val:0x8003013f0307fa01
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3f02fa200709f802, 0x8003013f0307fa01, x1, 64, x2)

inst_35:
// rs1_b4_val == 16, rs2_b1_val == 4, rs2_b4_val == 8, rs1_b0_val == -86
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xfff6f610f6fc20aa;  op2val:0x03f7040810f60407
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfff6f610f6fc20aa, 0x03f7040810f60407, x1, 80, x2)

inst_36:
// rs1_b4_val == 2, rs2_b0_val == -65, rs1_b7_val == 4, rs1_b6_val == 8, rs1_b0_val == -5
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x04084002f6aadffb;  op2val:0xfb3f0102ef8055bf
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x04084002f6aadffb, 0xfb3f0102ef8055bf, x1, 96, x2)

inst_37:
// rs1_b4_val == 0, rs1_b0_val == -33, rs1_b3_val == 16, rs2_b1_val == 16, rs1_b7_val == 64, rs1_b5_val == -33
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x40f8df00100509df;  op2val:0x40fdbff806c010bf
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x40f8df00100509df, 0x40fdbff806c010bf, x1, 112, x2)

inst_38:
// rs1_b3_val == 85, rs2_b0_val == -1, rs2_b5_val == -17, rs1_b1_val == 8
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x0005c0fd55f60805;  op2val:0xc003ef02fa0401ff
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0005c0fd55f60805, 0xc003ef02fa0401ff, x1, 128, x2)

inst_39:
// rs1_b3_val == -33, rs1_b1_val == -5, rs2_b6_val == 16, rs2_b4_val == -5, rs1_b7_val == -2, rs2_b0_val == 127
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe03df01df04fbc0;  op2val:0xfe1040fb06aa3f7f
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfe03df01df04fbc0, 0xfe1040fb06aa3f7f, x1, 144, x2)

inst_40:
// rs1_b3_val == -17, rs2_b1_val == 0, rs1_b1_val == -128, rs2_b2_val == 2
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x20080355ef068010;  op2val:0xfdf73ff8fd02003f
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x20080355ef068010, 0xfdf73ff8fd02003f, x1, 160, x2)

inst_41:
// rs2_b4_val == -1, rs2_b5_val == -33
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x08f8c03f3f04ff3f;  op2val:0xf680dffff980aafb
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x08f8c03f3f04ff3f, 0xf680dffff980aafb, x1, 176, x2)

inst_42:
// rs2_b3_val == -86, rs1_b5_val == 127
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x7fff7f02400602ff;  op2val:0xff0307fcaa060906
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x7fff7f02400602ff, 0xff0307fcaa060906, x1, 192, x2)

inst_43:
// rs2_b3_val == -5, 
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x030203090302f702;  op2val:0xf60709f6fbf6c0ff
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x030203090302f702, 0xf60709f6fbf6c0ff, x1, 208, x2)

inst_44:
// rs2_b3_val == 32, rs2_b2_val == -2
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xef04023f20eff804;  op2val:0x100902fb20fefaf9
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xef04023f20eff804, 0x100902fb20fefaf9, x1, 224, x2)

inst_45:
// rs2_b3_val == 4, rs1_b2_val == -3
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xf604ef00f8fd03c0;  op2val:0xfa4020fb04000309
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf604ef00f8fd03c0, 0xfa4020fb04000309, x1, 240, x2)

inst_46:
// rs2_b3_val == 0, 
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8f9fcfa3f06f8fb;  op2val:0xfffef802000408c0
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf8f9fcfa3f06f8fb, 0xfffef802000408c0, x1, 256, x2)

inst_47:
// rs2_b2_val == 85, rs2_b1_val == -2
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x3faa0908405510df;  op2val:0x04ff40fe0755fe20
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x3faa0908405510df, 0x04ff40fe0755fe20, x1, 272, x2)

inst_48:
// rs2_b2_val == 127, rs2_b1_val == -3
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x4005c00905effaaa;  op2val:0xf7bf0804fb7ffdf6
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x4005c00905effaaa, 0xf7bf0804fb7ffdf6, x1, 288, x2)

inst_49:
// rs2_b2_val == -3, rs2_b5_val == 0
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x03bf0409dff707fc;  op2val:0xdff6000200fd10fa
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x03bf0409dff707fc, 0xdff6000200fd10fa, x1, 304, x2)

inst_50:
// rs2_b2_val == 1, rs2_b4_val == -86, rs1_b6_val == 127
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xfa7f01dffc0308ef;  op2val:0x087f09aa0401fe04
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfa7f01dffc0308ef, 0x087f09aa0401fe04, x1, 320, x2)

inst_51:
// rs1_b3_val == -5, rs2_b4_val == 32
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x551000f9fb200707;  op2val:0xfdaaef20dffdfd06
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x551000f9fb200707, 0xfdaaef20dffdfd06, x1, 336, x2)

inst_52:
// rs1_b3_val == 4, 
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x1010010804070707;  op2val:0xaa3ffdf6c0ef2004
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x1010010804070707, 0xaa3ffdf6c0ef2004, x1, 352, x2)

inst_53:
// rs2_b1_val == -5, rs1_b1_val == 85, rs1_b0_val == 1, rs1_b2_val == 127
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0fa2004087f5501;  op2val:0x06f80220ef07fb08
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xc0fa2004087f5501, 0x06f80220ef07fb08, x1, 368, x2)

inst_54:
// rs1_b3_val == 1, 
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe4007c0013fbfdf;  op2val:0x05fffdbfff80aaff
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfe4007c0013fbfdf, 0x05fffdbfff80aaff, x1, 384, x2)

inst_55:
// rs2_b1_val == -128, rs1_b7_val == -86, rs1_b5_val == -9
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa40f7fffef7f8f8;  op2val:0xfcaaf8043f20807f
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaa40f7fffef7f8f8, 0xfcaaf8043f20807f, x1, 400, x2)

inst_56:
// rs1_b2_val == 8, 
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xff3ffa04f9080602;  op2val:0x02020705feeffc20
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff3ffa04f9080602, 0x02020705feeffc20, x1, 416, x2)

inst_57:
// rs1_b2_val == 1, rs2_b4_val == -9, rs1_b7_val == -33
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xdf060155090108ff;  op2val:0xfd40f7f7f709c0fe
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xdf060155090108ff, 0xfd40f7f7f709c0fe, x1, 432, x2)

inst_58:
// rs1_b2_val == 0, rs2_b0_val == 16, rs1_b0_val == -2
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xfcc080098000fafe;  op2val:0xfb4020407fbf5510
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfcc080098000fafe, 0xfb4020407fbf5510, x1, 448, x2)

inst_59:
// rs1_b2_val == -1, rs2_b1_val == 2
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x0640100008ff0909;  op2val:0xfafb093f7f0902f8
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0640100008ff0909, 0xfafb093f7f0902f8, x1, 464, x2)

inst_60:
// rs2_b6_val == 4, rs1_b7_val == -9
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7ff55c005df0303;  op2val:0x0904080380feaafb
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf7ff55c005df0303, 0x0904080380feaafb, x1, 480, x2)

inst_61:
// rs1_b7_val == -65, 
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf03ef057fc0faf9;  op2val:0xfc80effddf08fe06
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbf03ef057fc0faf9, 0xfc80effddf08fe06, x1, 496, x2)

inst_62:
// rs1_b1_val == 4, 
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xaa07faefbf060480;  op2val:0x00f60203bf03f7ef
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xaa07faefbf060480, 0x00f60203bf03f7ef, x1, 512, x2)

inst_63:
// rs1_b7_val == -5, 
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb0206fbfafa02f9;  op2val:0x7ff8fa063f200503
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfb0206fbfafa02f9, 0x7ff8fa063f200503, x1, 528, x2)

inst_64:
// rs2_b5_val == -2, 
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x00fffd07f7f9fbdf;  op2val:0xfdf8fefbbfdf04fb
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x00fffd07f7f9fbdf, 0xfdf8fefbbfdf04fb, x1, 544, x2)

inst_65:
// rs1_b0_val == -3, rs1_b6_val == -3
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdfd7faa031055fd;  op2val:0xf8f9f9aa55f8fa04
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xfdfd7faa031055fd, 0xf8f9f9aa55f8fa04, x1, 560, x2)

inst_66:
// rs1_b0_val == 8, rs2_b4_val == -17
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xff0602f6007f5508;  op2val:0x07fd04efc0ffdffd
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xff0602f6007f5508, 0x07fd04efc0ffdffd, x1, 576, x2)

inst_67:
// rs1_b6_val == -9, rs2_b5_val == 85
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x03f708ef09fa0600;  op2val:0x06f85507f6f90806
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x03f708ef09fa0600, 0x06f85507f6f90806, x1, 592, x2)

inst_68:
// rs1_b6_val == -5, rs2_b0_val == 85
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x09fbff200910fadf;  op2val:0xfd3ff910dffefd55
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x09fbff200910fadf, 0xfd3ff910dffefd55, x1, 608, x2)

inst_69:
// rs1_b6_val == -2, 
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xeffe0880dfefdf07;  op2val:0xf6ef09ff020301df
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xeffe0880dfefdf07, 0xf6ef09ff020301df, x1, 624, x2)

inst_70:
// rs1_b3_val == -1, 
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf041007fffa807f;  op2val:0x0620040900ef1020
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbf041007fffa807f, 0x0620040900ef1020, x1, 640, x2)

inst_71:
// rs1_b5_val == -86, 
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x2000aa00ff07fcf6;  op2val:0x40f7012010f980fb
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2000aa00ff07fcf6, 0x40f7012010f980fb, x1, 656, x2)

inst_72:
// rs1_b5_val == -65, 
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x2006bffd06037fef;  op2val:0xf80380fc0706aa55
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x2006bffd06037fef, 0xf80380fc0706aa55, x1, 672, x2)

inst_73:
// rs1_b6_val == 1, 
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf01df7f5540fd09;  op2val:0x0805fe040855fe40
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xbf01df7f5540fd09, 0x0805fe040855fe40, x1, 688, x2)

inst_74:
// rs1_b2_val == -128, 
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x0620aa40f980f955;  op2val:0x3f8003fc05f7c0f9
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x0620aa40f980f955, 0x3f8003fc05f7c0f9, x1, 704, x2)

inst_75:
// rs1_b7_val < 0 and rs2_b7_val > 0, rs1_b2_val == 32, rs2_b2_val == 8, rs1_b5_val == 4, rs1_b6_val < 0 and rs2_b6_val > 0, rs1_b0_val == 32, rs1_b0_val > 0 and rs2_b0_val < 0, rs2_b6_val == 64, rs2_b3_val == 2, rs1_b5_val > 0 and rs2_b5_val > 0, rs2_b7_val == 85, rs1_b1_val == 64, rs1_b4_val > 0 and rs2_b4_val < 0
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xf8f9040303204020;  op2val:0x554005f902087ff6
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xf8f9040303204020, 0x554005f902087ff6, x1, 720, x2)

inst_76:
// rs1_b7_val < 0 and rs2_b7_val < 0, rs2_b2_val == 16, rs1_b5_val == -128, rs2_b6_val == 127, rs1_b1_val < 0 and rs2_b1_val < 0, rs1_b4_val == 85, rs1_b5_val < 0 and rs2_b5_val > 0, rs1_b1_val == -9, rs1_b3_val == 0, rs1_b2_val == 85, rs1_b6_val == 0, rs1_b4_val > 0 and rs2_b4_val > 0, rs2_b7_val == -2, rs1_b7_val == -128, rs2_b4_val == 4
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x800080550055f7fa;  op2val:0xfe7f09043f10fc20
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x800080550055f7fa, 0xfe7f09043f10fc20, x1, 736, x2)

inst_77:
// rs2_b7_val == -86, rs1_b5_val == 64, rs1_b3_val == -3, rs2_b0_val == 4, rs1_b4_val == -5, rs2_b2_val == -86, rs1_b6_val == -1, rs2_b4_val == 1
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0x05ff40fbfdf7faf8;  op2val:0xaa200601f6aaaa04
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0x05ff40fbfdf7faf8, 0xaa200601f6aaaa04, x1, 752, x2)

inst_78:
// rs2_b7_val == -33, rs1_b2_val == 64, rs2_b5_val == -3, rs2_b2_val == 32, rs1_b0_val == -9, rs2_b3_val == -9, rs1_b5_val == -1, rs2_b4_val == -65, rs1_b1_val == 16, rs2_b6_val == -1
// opcode: smul8 ; op1:x30; op2:x29; dest:x31; op1val:0xc0c0ff05fe4010f7;  op2val:0xdffffdbff7203f09
TEST_P64_PNN_OP(smul8, x31, $rd_hi, x30, x29, 0x0000000000000000, $correctval_hi, 0xc0c0ff05fe4010f7, 0xdffffdbff7203f09, x1, 768, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x7_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 32*(XLEN/32),4,0xdeadbeef


signature_x10_0:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 98*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
