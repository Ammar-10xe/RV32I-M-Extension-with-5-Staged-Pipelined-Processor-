
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.6.3
// timestamp : Sat Apr 23 14:55:55 2022 GMT
// usage     : riscv_ctg \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv32ip.cgf \
//                  --cgf /scratch/git-repo/github/riscv_ctg/sample_cgfs/rv64ip.cgf \
//                  --xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sll8 instruction of the RISC-V RV64PZicsr extension for the sll8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IPZicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*P.*Zicsr.*);def TEST_CASE_1=True;",sll8)

RVTEST_VXSAT_ENABLE()
RVTEST_SIGBASE(x3,signature_x3_1)

inst_0:
// rs1 == rd != rs2, rs1==x26, rs2==x4, rd==x26, rs2_val == 5, rs1_b3_val == 8, rs1_b1_val == 128, rs1_b2_val == 170, rs1_b5_val == 247, rs1_b0_val == 128
// opcode: sll8 ; op1:x26; op2:x4; dest:x26; op1val:0x706f70308aa8080;  op2val:0x5
TEST_RR_OP(sll8, x26, x26, x4, 0x0000000000000000, 0x706f70308aa8080, 0x5, x3, 0, x8)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x20, rd==x2, rs2_val == 3, rs1_b2_val == 255, rs1_b6_val == 2, rs1_b7_val == 247, rs1_b5_val == 253
// opcode: sll8 ; op1:x28; op2:x20; dest:x2; op1val:0xf702fd0c11ff0611;  op2val:0x3
TEST_RR_OP(sll8, x2, x28, x20, 0x0000000000000000, 0xf702fd0c11ff0611, 0x3, x3, 8, x8)

inst_2:
// rs1 == rs2 != rd, rs1==x13, rs2==x13, rd==x1, rs2_val == 6, rs1_b5_val == 255, rs1_b4_val == 4, rs1_b7_val == 8, rs1_b1_val == 253
// opcode: sll8 ; op1:x13; op2:x13; dest:x1; op1val:0x80eff040c12fd0f;  op2val:0x6
TEST_RR_OP(sll8, x1, x13, x13, 0x0000000000000000, 0x80eff040c12fd0f, 0x6, x3, 16, x8)

inst_3:
// rs1 == rs2 == rd, rs1==x24, rs2==x24, rd==x24, rs2_val == 4, rs1_b4_val == 251, rs1_b3_val == 32, rs1_b5_val == 16, rs1_b1_val == 223
// opcode: sll8 ; op1:x24; op2:x24; dest:x24; op1val:0x120d10fb200cdf12;  op2val:0x4
TEST_RR_OP(sll8, x24, x24, x24, 0x0000000000000000, 0x120d10fb200cdf12, 0x4, x3, 24, x8)

inst_4:
// rs2 == rd != rs1, rs1==x4, rs2==x31, rd==x31, rs2_val == 2, rs1_b2_val == 0, rs1_b6_val == 32
// opcode: sll8 ; op1:x4; op2:x31; dest:x31; op1val:0xd200a0506000705;  op2val:0x2
TEST_RR_OP(sll8, x31, x4, x31, 0x0000000000000000, 0xd200a0506000705, 0x2, x3, 32, x8)

inst_5:
// rs1==x9, rs2==x27, rd==x28, rs2_val == 1, rs1_b2_val == 2, rs1_b1_val == 85, rs1_b0_val == 223, rs1_b4_val == 239
// opcode: sll8 ; op1:x9; op2:x27; dest:x28; op1val:0xf0905ef0a0255df;  op2val:0x1
TEST_RR_OP(sll8, x28, x9, x27, 0x0000000000000000, 0xf0905ef0a0255df, 0x1, x3, 40, x8)

inst_6:
// rs1==x17, rs2==x14, rd==x6, rs1_b7_val == 170, rs1_b5_val == 191
// opcode: sll8 ; op1:x17; op2:x14; dest:x6; op1val:0xaa0bbf0d0e0cdf0f;  op2val:0x12
TEST_RR_OP(sll8, x6, x17, x14, 0x0000000000000000, 0xaa0bbf0d0e0cdf0f, 0x12, x3, 48, x8)

inst_7:
// rs1==x25, rs2==x11, rd==x7, rs1_b7_val == 85, rs1_b1_val == 239, rs1_b4_val == 253, rs1_b2_val == 127, rs1_b5_val == 239, rs1_b6_val == 223
// opcode: sll8 ; op1:x25; op2:x11; dest:x7; op1val:0x55dfeffd087fef06;  op2val:0x4
TEST_RR_OP(sll8, x7, x25, x11, 0x0000000000000000, 0x55dfeffd087fef06, 0x4, x3, 56, x8)

inst_8:
// rs1==x5, rs2==x19, rd==x10, rs1_b7_val == 127, rs1_b4_val == 247, rs1_b5_val == 251, rs1_b2_val == 32, rs1_b3_val == 239, rs1_b0_val == 16
// opcode: sll8 ; op1:x5; op2:x19; dest:x10; op1val:0x7f06fbf7ef20df10;  op2val:0x5
TEST_RR_OP(sll8, x10, x5, x19, 0x0000000000000000, 0x7f06fbf7ef20df10, 0x5, x3, 64, x8)

inst_9:
// rs1==x21, rs2==x15, rd==x12, rs1_b7_val == 191, rs1_b4_val == 8
// opcode: sll8 ; op1:x21; op2:x15; dest:x12; op1val:0xbf0203080d0b8012;  op2val:0x2
TEST_RR_OP(sll8, x12, x21, x15, 0x0000000000000000, 0xbf0203080d0b8012, 0x2, x3, 72, x8)

inst_10:
// rs1==x7, rs2==x18, rd==x15, rs1_b7_val == 223, rs1_b0_val == 4, rs1_b3_val == 85
// opcode: sll8 ; op1:x7; op2:x18; dest:x15; op1val:0xdf0aef0f5500fd04;  op2val:0xe
TEST_RR_OP(sll8, x15, x7, x18, 0x0000000000000000, 0xdf0aef0f5500fd04, 0xe, x3, 80, x8)

inst_11:
// rs1==x31, rs2==x28, rd==x27, rs1_b7_val == 239, rs1_b0_val == 255, rs1_b6_val == 0, rs1_b5_val == 127, rs1_b2_val == 8, rs1_b1_val == 170
// opcode: sll8 ; op1:x31; op2:x28; dest:x27; op1val:0xef007f0d1308aaff;  op2val:0x7
TEST_RR_OP(sll8, x27, x31, x28, 0x0000000000000000, 0xef007f0d1308aaff, 0x7, x3, 88, x8)

inst_12:
// rs1==x27, rs2==x21, rd==x0, rs1_b7_val == 251, rs1_b3_val == 191, rs1_b4_val == 255, rs1_b2_val == 251, rs1_b5_val == 254
// opcode: sll8 ; op1:x27; op2:x21; dest:x0; op1val:0xfb0cfeffbffbef12;  op2val:0x0
TEST_RR_OP(sll8, x0, x27, x21, 0x0000000000000000, 0xfb0cfeffbffbef12, 0x0, x3, 96, x8)

inst_13:
// rs1==x23, rs2==x17, rd==x4, rs1_b7_val == 253, rs1_b6_val == 4, rs1_b2_val == 16
// opcode: sll8 ; op1:x23; op2:x17; dest:x4; op1val:0xfd04070706100d13;  op2val:0x11
TEST_RR_OP(sll8, x4, x23, x17, 0x0000000000000000, 0xfd04070706100d13, 0x11, x3, 104, x8)

inst_14:
// rs1==x12, rs2==x0, rd==x30, rs1_b7_val == 254, rs1_b5_val == 170
// opcode: sll8 ; op1:x12; op2:x0; dest:x30; op1val:0xfe0eaafd0908fddf;  op2val:0x0
TEST_RR_OP(sll8, x30, x12, x0, 0x0000000000000000, 0xfe0eaafd0908fddf, 0x0, x3, 112, x8)

inst_15:
// rs1==x6, rs2==x7, rd==x17, rs1_b7_val == 128, rs1_b6_val == 251, rs1_b3_val == 251, rs1_b4_val == 32, rs1_b1_val == 254
// opcode: sll8 ; op1:x6; op2:x7; dest:x17; op1val:0x80fbf720fb02feff;  op2val:0xc
TEST_RR_OP(sll8, x17, x6, x7, 0x0000000000000000, 0x80fbf720fb02feff, 0xc, x3, 120, x24)

inst_16:
// rs1==x11, rs2==x29, rd==x19, rs1_b7_val == 64, rs1_b5_val == 4
// opcode: sll8 ; op1:x11; op2:x29; dest:x19; op1val:0x400e04200e0d5511;  op2val:0xb
TEST_RR_OP(sll8, x19, x11, x29, 0x0000000000000000, 0x400e04200e0d5511, 0xb, x3, 128, x24)
RVTEST_SIGBASE(x4,signature_x4_0)

inst_17:
// rs1==x2, rs2==x1, rd==x20, rs1_b7_val == 32, 
// opcode: sll8 ; op1:x2; op2:x1; dest:x20; op1val:0x2005ef050305df04;  op2val:0x3
TEST_RR_OP(sll8, x20, x2, x1, 0x0000000000000000, 0x2005ef050305df04, 0x3, x4, 0, x24)

inst_18:
// rs1==x14, rs2==x12, rd==x16, rs1_b7_val == 16, rs1_b3_val == 128, rs1_b2_val == 85, rs1_b6_val == 128, rs1_b0_val == 191
// opcode: sll8 ; op1:x14; op2:x12; dest:x16; op1val:0x1080fd20805513bf;  op2val:0xb
TEST_RR_OP(sll8, x16, x14, x12, 0x0000000000000000, 0x1080fd20805513bf, 0xb, x4, 8, x24)

inst_19:
// rs1==x18, rs2==x8, rd==x9, rs1_b7_val == 4, rs1_b2_val == 253, rs1_b0_val == 64, rs1_b6_val == 16
// opcode: sll8 ; op1:x18; op2:x8; dest:x9; op1val:0x4100406bffd0a40;  op2val:0x10
TEST_RR_OP(sll8, x9, x18, x8, 0x0000000000000000, 0x4100406bffd0a40, 0x10, x4, 16, x24)

inst_20:
// rs1==x0, rs2==x26, rd==x21, rs1_b7_val == 2, rs1_b2_val == 247
// opcode: sll8 ; op1:x0; op2:x26; dest:x21; op1val:0x2800b0a80f7fe07;  op2val:0xf
TEST_RR_OP(sll8, x21, x0, x26, 0x0000000000000000, 0x2800b0a80f7fe07, 0xf, x4, 24, x24)

inst_21:
// rs1==x22, rs2==x5, rd==x23, rs1_b7_val == 1, rs1_b0_val == 170, rs1_b2_val == 64
// opcode: sll8 ; op1:x22; op2:x5; dest:x23; op1val:0x10f050cbf400baa;  op2val:0x3
TEST_RR_OP(sll8, x23, x22, x5, 0x0000000000000000, 0x10f050cbf400baa, 0x3, x4, 32, x24)

inst_22:
// rs1==x19, rs2==x23, rd==x3, rs1_b7_val == 255, rs1_b0_val == 253, rs1_b1_val == 8
// opcode: sll8 ; op1:x19; op2:x23; dest:x3; op1val:0xff05060aef0c08fd;  op2val:0x8
TEST_RR_OP(sll8, x3, x19, x23, 0x0000000000000000, 0xff05060aef0c08fd, 0x8, x4, 40, x24)

inst_23:
// rs1==x20, rs2==x16, rd==x22, rs1_b7_val == 0, rs1_b1_val == 64, rs1_b4_val == 1, rs1_b0_val == 0
// opcode: sll8 ; op1:x20; op2:x16; dest:x22; op1val:0x100301fbff4000;  op2val:0x8
TEST_RR_OP(sll8, x22, x20, x16, 0x0000000000000000, 0x100301fbff4000, 0x8, x4, 48, x24)

inst_24:
// rs1==x8, rs2==x10, rd==x14, rs1_b6_val == 170, 
// opcode: sll8 ; op1:x8; op2:x10; dest:x14; op1val:0xaaf7ff0307df03;  op2val:0x11
TEST_RR_OP(sll8, x14, x8, x10, 0x0000000000000000, 0xaaf7ff0307df03, 0x11, x4, 56, x24)

inst_25:
// rs1==x15, rs2==x6, rd==x13, rs1_b6_val == 85, rs1_b0_val == 251, rs1_b4_val == 128, rs1_b2_val == 191
// opcode: sll8 ; op1:x15; op2:x6; dest:x13; op1val:0x555068020bf11fb;  op2val:0xf
TEST_RR_OP(sll8, x13, x15, x6, 0x0000000000000000, 0x555068020bf11fb, 0xf, x4, 64, x24)

inst_26:
// rs1==x29, rs2==x25, rd==x11, rs1_b6_val == 127, 
// opcode: sll8 ; op1:x29; op2:x25; dest:x11; op1val:0xa7f0e0e0809df10;  op2val:0x1
TEST_RR_OP(sll8, x11, x29, x25, 0x0000000000000000, 0xa7f0e0e0809df10, 0x1, x4, 72, x24)

inst_27:
// rs1==x16, rs2==x22, rd==x8, rs1_b6_val == 191, rs1_b3_val == 127, rs1_b2_val == 1, rs1_b1_val == 2
// opcode: sll8 ; op1:x16; op2:x22; dest:x8; op1val:0x6bfaa0e7f0102ff;  op2val:0x11
TEST_RR_OP(sll8, x8, x16, x22, 0x0000000000000000, 0x6bfaa0e7f0102ff, 0x11, x4, 80, x24)

inst_28:
// rs1==x30, rs2==x9, rd==x18, rs1_b6_val == 239, rs1_b5_val == 0, rs1_b4_val == 2, rs1_b1_val == 191, rs1_b3_val == 247
// opcode: sll8 ; op1:x30; op2:x9; dest:x18; op1val:0x13ef0002f7bfbfff;  op2val:0x6
TEST_RR_OP(sll8, x18, x30, x9, 0x0000000000000000, 0x13ef0002f7bfbfff, 0x6, x4, 88, x24)

inst_29:
// rs1==x1, rs2==x3, rd==x25, rs1_b1_val == 127, rs1_b2_val == 4, rs1_b3_val == 254
// opcode: sll8 ; op1:x1; op2:x3; dest:x25; op1val:0xaa0affeffe047f10;  op2val:0x8
TEST_RR_OP(sll8, x25, x1, x3, 0x0000000000000000, 0xaa0affeffe047f10, 0x8, x4, 96, x6)

inst_30:
// rs1==x10, rs2==x30, rd==x5, rs1_b1_val == 247, rs1_b0_val == 85
// opcode: sll8 ; op1:x10; op2:x30; dest:x5; op1val:0x10dffe02070ef755;  op2val:0x11
TEST_RR_OP(sll8, x5, x10, x30, 0x0000000000000000, 0x10dffe02070ef755, 0x11, x4, 104, x6)

inst_31:
// rs1==x3, rs2==x2, rd==x29, rs1_b1_val == 251, rs1_b3_val == 255, rs1_b4_val == 170, rs1_b6_val == 255
// opcode: sll8 ; op1:x3; op2:x2; dest:x29; op1val:0xaff05aafff7fb0a;  op2val:0x13
TEST_RR_OP(sll8, x29, x3, x2, 0x0000000000000000, 0xaff05aafff7fb0a, 0x13, x4, 112, x6)

inst_32:
// rs1_b1_val == 32, rs1_b5_val == 85
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x800e550c0a082055;  op2val:0xd
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x800e550c0a082055, 0xd, x4, 120, x6)

inst_33:
// rs1_b1_val == 16, rs1_b4_val == 85, rs1_b6_val == 254, rs1_b0_val == 239
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xefe1355090d10ef;  op2val:0x3
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0xefe1355090d10ef, 0x3, x4, 128, x6)

inst_34:
// rs1_b1_val == 4, rs1_b4_val == 0
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xfdef0f000b0104aa;  op2val:0x0
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0xfdef0f000b0104aa, 0x0, x4, 136, x6)

inst_35:
// rs1_b1_val == 1, rs1_b3_val == 223
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x120caa0adf000110;  op2val:0x2
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x120caa0adf000110, 0x2, x4, 144, x6)

inst_36:
// rs1_b1_val == 255, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xfd0afffb0909ff04;  op2val:0x11
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0xfd0afffb0909ff04, 0x11, x4, 152, x6)

inst_37:
// rs1_b1_val == 0, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x211030b0f0b0003;  op2val:0x3
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x211030b0f0b0003, 0x3, x4, 160, x6)

inst_38:
// rs1_b0_val == 127, rs1_b6_val == 8
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xe080aef1209f77f;  op2val:0x1
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0xe080aef1209f77f, 0x1, x4, 168, x6)

inst_39:
// rs1_b0_val == 247, rs1_b2_val == 128
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7050d0e2080fdf7;  op2val:0x13
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0xf7050d0e2080fdf7, 0x13, x4, 176, x6)

inst_40:
// rs1_b0_val == 254, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xfaa0a050d0308fe;  op2val:0x12
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0xfaa0a050d0308fe, 0x12, x4, 184, x6)

inst_41:
// rs1_b0_val == 32, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x70307800b080c20;  op2val:0x10
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x70307800b080c20, 0x10, x4, 192, x6)

inst_42:
// rs1_b4_val == 127, rs1_b5_val == 8
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x80e087f0a077faa;  op2val:0xe
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x80e087f0a077faa, 0xe, x4, 200, x6)

inst_43:
// rs1_b4_val == 191, rs1_b5_val == 223, rs1_b6_val == 64
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf40dfbff7f70d0b;  op2val:0x0
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0xbf40dfbff7f70d0b, 0x0, x4, 208, x6)

inst_44:
// rs1_b4_val == 223, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x8012bfdf125500ef;  op2val:0x0
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x8012bfdf125500ef, 0x0, x4, 216, x6)

inst_45:
// rs1_b4_val == 254, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf1312fefb0ffb04;  op2val:0x11
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0xbf1312fefb0ffb04, 0x11, x4, 224, x6)

inst_46:
// rs1_b4_val == 64, rs1_b5_val == 1
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x2fb01400e801105;  op2val:0xa
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x2fb01400e801105, 0xa, x4, 232, x6)

inst_47:
// rs1_b4_val == 16, rs1_b5_val == 128
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x551180107f08fe04;  op2val:0xb
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x551180107f08fe04, 0xb, x4, 240, x6)

inst_48:
// rs1_b3_val == 170, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x2550b0daa118004;  op2val:0x6
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x2550b0daa118004, 0x6, x4, 248, x6)

inst_49:
// rs1_b3_val == 253, rs1_b6_val == 253
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x80fdaabffdaabff7;  op2val:0xf
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x80fdaabffdaabff7, 0xf, x4, 256, x6)

inst_50:
// rs1_b6_val == 247, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xaf704ffbffffd55;  op2val:0x1
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0xaf704ffbffffd55, 0x1, x4, 264, x6)

inst_51:
// rs1_b0_val == 8, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x800907fd0d070b08;  op2val:0x2
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x800907fd0d070b08, 0x2, x4, 272, x6)

inst_52:
// rs1_b3_val == 64, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xc7f060540fdfe0c;  op2val:0xb
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0xc7f060540fdfe0c, 0xb, x4, 280, x6)

inst_53:
// rs1_b0_val == 2, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x740fbaabf0d0f02;  op2val:0x3
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x740fbaabf0d0f02, 0x3, x4, 288, x6)

inst_54:
// rs1_b0_val == 1, rs1_b3_val == 4
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x200fd040409f701;  op2val:0x7
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x200fd040409f701, 0x7, x4, 296, x6)

inst_55:
// rs1_b3_val == 16, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x201310fb100b0907;  op2val:0x3
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x201310fb100b0907, 0x3, x4, 304, x6)

inst_56:
// rs1_b3_val == 2, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xc40df1102050d0b;  op2val:0xb
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0xc40df1102050d0b, 0xb, x4, 312, x6)

inst_57:
// rs1_b3_val == 1, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x12ef7f7f0113800a;  op2val:0xf
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x12ef7f7f0113800a, 0xf, x4, 320, x6)

inst_58:
// rs1_b3_val == 0, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xf7f090400405502;  op2val:0x10
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0xf7f090400405502, 0x10, x4, 328, x6)

inst_59:
// rs1_b2_val == 254, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x4009f707fe0e00;  op2val:0x12
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x4009f707fe0e00, 0x12, x4, 336, x6)

inst_60:
// rs1_b2_val == 223, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x551205efefdfff40;  op2val:0x9
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x551205efefdfff40, 0x9, x4, 344, x6)

inst_61:
// rs1_b5_val == 64, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x80bf400900fe13fe;  op2val:0xa
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x80bf400900fe13fe, 0xa, x4, 352, x6)

inst_62:
// rs1_b5_val == 32, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xa1120ef0a070cef;  op2val:0x3
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0xa1120ef0a070cef, 0x3, x4, 360, x6)

inst_63:
// rs1_b6_val == 1, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0x70105f713800aff;  op2val:0x8
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0x70105f713800aff, 0x8, x4, 368, x6)

inst_64:
// rs1_b5_val == 2, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf0a020f800b8004;  op2val:0x13
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0xbf0a020f800b8004, 0x13, x4, 376, x6)

inst_65:
// rs1_b2_val == 239, 
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xbf020c04efef0a04;  op2val:0x0
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0xbf020c04efef0a04, 0x0, x4, 384, x6)

inst_66:
// rs1_b7_val == 251, rs1_b3_val == 191, rs1_b4_val == 255, rs1_b2_val == 251, rs1_b5_val == 254
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xfb0cfeffbffbef12;  op2val:0x0
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0xfb0cfeffbffbef12, 0x0, x4, 392, x6)

inst_67:
// rs1_b7_val == 254, rs1_b5_val == 170
// opcode: sll8 ; op1:x30; op2:x29; dest:x31; op1val:0xfe0eaafd0908fddf;  op2val:0xc
TEST_RR_OP(sll8, x31, x30, x29, 0x0000000000000000, 0xfe0eaafd0908fddf, 0xc, x4, 400, x6)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x3_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x3_1:
    .fill 17*(XLEN/32),4,0xdeadbeef


signature_x4_0:
    .fill 51*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
