
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Sun Aug  7 18:12:45 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/anku/work2/bcrypto/64/dataset.yaml \
//                  --cgf /home/anku/work2/bcrypto/64/rv64ik.yaml \
 \
//                  -- xlen 64  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sm4ks instruction of the RISC-V RV64Zks,RV64Zksed extension for the sm4ks covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IZks,RV64IZksed")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*Zks.*);def TEST_CASE_1=True;",sm4ks)

RVTEST_CASE(1,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*Zksed.*);def TEST_CASE_1=True;",sm4ks)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1, rs1==x30, rs2==x31, rd==x31, 
// opcode: sm4ks; rd:x31; op1:x30; op2:x31; op1val:0x706050403020100; op2val:0xb0a090807060504; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x31, 0x0, 0x0000000000000000, 0x706050403020100, 0xb0a090807060504, x1, 0, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x29, rd==x30, 
// opcode: sm4ks; rd:x30; op1:x31; op2:x29; op1val:0xbc36b151aeb006fc; op2val:0x2cab43d86576923c; immval:0x3
TEST_RRI_OP(sm4ks, x30, x31, x29, 0x3, 0x0000000000000000, 0xbc36b151aeb006fc, 0x2cab43d86576923c, x1, 8, x2)

inst_2:
// rs1 == rs2 != rd, rs1==x28, rs2==x28, rd==x29, 
// opcode: sm4ks; rd:x29; op1:x28; op2:x28; op1val:0x156fe482f9fcd292; op2val:0x156fe482f9fcd292; immval:0x0
TEST_RRI_OP(sm4ks, x29, x28, x28, 0x0, 0x0000000000000000, 0x156fe482f9fcd292, 0x156fe482f9fcd292, x1, 16, x2)

inst_3:
// rs1 == rs2 == rd, rs1==x27, rs2==x27, rd==x27, 
// opcode: sm4ks; rd:x27; op1:x27; op2:x27; op1val:0xa757e91e027e5943; op2val:0xa757e91e027e5943; immval:0x2
TEST_RRI_OP(sm4ks, x27, x27, x27, 0x2, 0x0000000000000000, 0xa757e91e027e5943, 0xa757e91e027e5943, x1, 24, x2)

inst_4:
// rs1 == rd != rs2, rs1==x26, rs2==x30, rd==x26, 
// opcode: sm4ks; rd:x26; op1:x26; op2:x30; op1val:0xf452cbd863fa921d; op2val:0x4b6587d88ef464d1; immval:0x3
TEST_RRI_OP(sm4ks, x26, x26, x30, 0x3, 0x0000000000000000, 0xf452cbd863fa921d, 0x4b6587d88ef464d1, x1, 32, x2)

inst_5:
// rs1==x29, rs2==x26, rd==x28, 
// opcode: sm4ks; rd:x28; op1:x29; op2:x26; op1val:0xd40f46a4356c1dcc; op2val:0x30c33d97184e0f23; immval:0x0
TEST_RRI_OP(sm4ks, x28, x29, x26, 0x0, 0x0000000000000000, 0xd40f46a4356c1dcc, 0x30c33d97184e0f23, x1, 40, x2)

inst_6:
// rs1==x24, rs2==x23, rd==x25, 
// opcode: sm4ks; rd:x25; op1:x24; op2:x23; op1val:0x6d23c0488a6019c1; op2val:0x860bdaad7447a088; immval:0x2
TEST_RRI_OP(sm4ks, x25, x24, x23, 0x2, 0x0000000000000000, 0x6d23c0488a6019c1, 0x860bdaad7447a088, x1, 48, x2)

inst_7:
// rs1==x23, rs2==x25, rd==x24, 
// opcode: sm4ks; rd:x24; op1:x23; op2:x25; op1val:0x17168ab3a4351379; op2val:0xbbb4f560f222070c; immval:0x0
TEST_RRI_OP(sm4ks, x24, x23, x25, 0x0, 0x0000000000000000, 0x17168ab3a4351379, 0xbbb4f560f222070c, x1, 56, x2)

inst_8:
// rs1==x25, rs2==x24, rd==x23, 
// opcode: sm4ks; rd:x23; op1:x25; op2:x24; op1val:0x3fb0fe60ef1d54db; op2val:0x9ff42451826a804; immval:0x1
TEST_RRI_OP(sm4ks, x23, x25, x24, 0x1, 0x0000000000000000, 0x3fb0fe60ef1d54db, 0x9ff42451826a804, x1, 64, x2)

inst_9:
// rs1==x21, rs2==x20, rd==x22, 
// opcode: sm4ks; rd:x22; op1:x21; op2:x20; op1val:0xcc7b22010ca3ef52; op2val:0xc150f4d3df74d068; immval:0x1
TEST_RRI_OP(sm4ks, x22, x21, x20, 0x1, 0x0000000000000000, 0xcc7b22010ca3ef52, 0xc150f4d3df74d068, x1, 72, x2)

inst_10:
// rs1==x20, rs2==x22, rd==x21, 
// opcode: sm4ks; rd:x21; op1:x20; op2:x22; op1val:0x358a9235987daa20; op2val:0xb369e10209f393d7; immval:0x1
TEST_RRI_OP(sm4ks, x21, x20, x22, 0x1, 0x0000000000000000, 0x358a9235987daa20, 0xb369e10209f393d7, x1, 80, x2)

inst_11:
// rs1==x22, rs2==x21, rd==x20, 
// opcode: sm4ks; rd:x20; op1:x22; op2:x21; op1val:0x91766f62ba2be4d3; op2val:0x74a813d25570084b; immval:0x0
TEST_RRI_OP(sm4ks, x20, x22, x21, 0x0, 0x0000000000000000, 0x91766f62ba2be4d3, 0x74a813d25570084b, x1, 88, x2)

inst_12:
// rs1==x18, rs2==x17, rd==x19, 
// opcode: sm4ks; rd:x19; op1:x18; op2:x17; op1val:0xb7c1fc5f1efa1095; op2val:0xe2cbb9ab3819fe4d; immval:0x1
TEST_RRI_OP(sm4ks, x19, x18, x17, 0x1, 0x0000000000000000, 0xb7c1fc5f1efa1095, 0xe2cbb9ab3819fe4d, x1, 96, x2)

inst_13:
// rs1==x17, rs2==x19, rd==x18, 
// opcode: sm4ks; rd:x18; op1:x17; op2:x19; op1val:0xa6c9253a4cc6382e; op2val:0x25ae27ee4113ee60; immval:0x2
TEST_RRI_OP(sm4ks, x18, x17, x19, 0x2, 0x0000000000000000, 0xa6c9253a4cc6382e, 0x25ae27ee4113ee60, x1, 104, x2)

inst_14:
// rs1==x19, rs2==x18, rd==x17, 
// opcode: sm4ks; rd:x17; op1:x19; op2:x18; op1val:0xf17f6920daaafe5c; op2val:0x7bcad7c4ff9a1b80; immval:0x0
TEST_RRI_OP(sm4ks, x17, x19, x18, 0x0, 0x0000000000000000, 0xf17f6920daaafe5c, 0x7bcad7c4ff9a1b80, x1, 112, x2)

inst_15:
// rs1==x15, rs2==x14, rd==x16, 
// opcode: sm4ks; rd:x16; op1:x15; op2:x14; op1val:0x3150e5fa299c3bcf; op2val:0xe6fff3d9ec1ce9d2; immval:0x1
TEST_RRI_OP(sm4ks, x16, x15, x14, 0x1, 0x0000000000000000, 0x3150e5fa299c3bcf, 0xe6fff3d9ec1ce9d2, x1, 120, x2)

inst_16:
// rs1==x14, rs2==x16, rd==x15, 
// opcode: sm4ks; rd:x15; op1:x14; op2:x16; op1val:0x1fc493caa371db42; op2val:0x9a4e9ef10171f4df; immval:0x1
TEST_RRI_OP(sm4ks, x15, x14, x16, 0x1, 0x0000000000000000, 0x1fc493caa371db42, 0x9a4e9ef10171f4df, x1, 128, x2)

inst_17:
// rs1==x16, rs2==x15, rd==x14, 
// opcode: sm4ks; rd:x14; op1:x16; op2:x15; op1val:0xf5faf2073430cb17; op2val:0x8e2eac2a760b3c5e; immval:0x3
TEST_RRI_OP(sm4ks, x14, x16, x15, 0x3, 0x0000000000000000, 0xf5faf2073430cb17, 0x8e2eac2a760b3c5e, x1, 136, x2)

inst_18:
// rs1==x12, rs2==x11, rd==x13, 
// opcode: sm4ks; rd:x13; op1:x12; op2:x11; op1val:0xbc991c531484f407; op2val:0x55d98c6e3459294e; immval:0x2
TEST_RRI_OP(sm4ks, x13, x12, x11, 0x2, 0x0000000000000000, 0xbc991c531484f407, 0x55d98c6e3459294e, x1, 144, x2)

inst_19:
// rs1==x11, rs2==x13, rd==x12, 
// opcode: sm4ks; rd:x12; op1:x11; op2:x13; op1val:0x59885afcbb61a9cd; op2val:0xccce240c81c1e7ff; immval:0x0
TEST_RRI_OP(sm4ks, x12, x11, x13, 0x0, 0x0000000000000000, 0x59885afcbb61a9cd, 0xccce240c81c1e7ff, x1, 152, x2)

inst_20:
// rs1==x13, rs2==x12, rd==x11, 
// opcode: sm4ks; rd:x11; op1:x13; op2:x12; op1val:0x75a3adb3254a9493; op2val:0xc5521660f3a3c571; immval:0x3
TEST_RRI_OP(sm4ks, x11, x13, x12, 0x3, 0x0000000000000000, 0x75a3adb3254a9493, 0xc5521660f3a3c571, x1, 160, x2)

inst_21:
// rs1==x9, rs2==x8, rd==x10, 
// opcode: sm4ks; rd:x10; op1:x9; op2:x8; op1val:0x3020100fffefdfc; op2val:0xfffefdfcfbfaf9f8; immval:0x3
TEST_RRI_OP(sm4ks, x10, x9, x8, 0x3, 0x0000000000000000, 0x3020100fffefdfc, 0xfffefdfcfbfaf9f8, x1, 168, x2)

inst_22:
// rs1==x8, rs2==x10, rd==x9, 
// opcode: sm4ks; rd:x9; op1:x8; op2:x10; op1val:0x3020100fffefdfc; op2val:0xfffefdfcfbfaf9f8; immval:0x2
TEST_RRI_OP(sm4ks, x9, x8, x10, 0x2, 0x0000000000000000, 0x3020100fffefdfc, 0xfffefdfcfbfaf9f8, x1, 176, x2)

inst_23:
// rs1==x10, rs2==x9, rd==x8, 
// opcode: sm4ks; rd:x8; op1:x10; op2:x9; op1val:0x3020100fffefdfc; op2val:0xfffefdfcfbfaf9f8; immval:0x1
TEST_RRI_OP(sm4ks, x8, x10, x9, 0x1, 0x0000000000000000, 0x3020100fffefdfc, 0xfffefdfcfbfaf9f8, x1, 184, x2)

inst_24:
// rs1==x6, rs2==x5, rd==x7, 
// opcode: sm4ks; rd:x7; op1:x6; op2:x5; op1val:0x3020100fffefdfc; op2val:0xfffefdfcfbfaf9f8; immval:0x0
TEST_RRI_OP(sm4ks, x7, x6, x5, 0x0, 0x0000000000000000, 0x3020100fffefdfc, 0xfffefdfcfbfaf9f8, x1, 192, x2)
RVTEST_SIGBASE(x8,signature_x8_0)

inst_25:
// rs1==x5, rs2==x7, rd==x6, 
// opcode: sm4ks; rd:x6; op1:x5; op2:x7; op1val:0xfffefdfcfbfaf9f8; op2val:0x3020100fffefdfc; immval:0x3
TEST_RRI_OP(sm4ks, x6, x5, x7, 0x3, 0x0000000000000000, 0xfffefdfcfbfaf9f8, 0x3020100fffefdfc, x8, 0, x9)

inst_26:
// rs1==x7, rs2==x6, rd==x5, 
// opcode: sm4ks; rd:x5; op1:x7; op2:x6; op1val:0xfffefdfcfbfaf9f8; op2val:0x3020100fffefdfc; immval:0x2
TEST_RRI_OP(sm4ks, x5, x7, x6, 0x2, 0x0000000000000000, 0xfffefdfcfbfaf9f8, 0x3020100fffefdfc, x8, 8, x9)

inst_27:
// rs1==x3, rs2==x2, rd==x4, 
// opcode: sm4ks; rd:x4; op1:x3; op2:x2; op1val:0xfffefdfcfbfaf9f8; op2val:0x3020100fffefdfc; immval:0x1
TEST_RRI_OP(sm4ks, x4, x3, x2, 0x1, 0x0000000000000000, 0xfffefdfcfbfaf9f8, 0x3020100fffefdfc, x8, 16, x9)

inst_28:
// rs1==x2, rs2==x4, rd==x3, 
// opcode: sm4ks; rd:x3; op1:x2; op2:x4; op1val:0xfffefdfcfbfaf9f8; op2val:0x3020100fffefdfc; immval:0x0
TEST_RRI_OP(sm4ks, x3, x2, x4, 0x0, 0x0000000000000000, 0xfffefdfcfbfaf9f8, 0x3020100fffefdfc, x8, 24, x9)

inst_29:
// rs1==x4, rs2==x3, rd==x2, 
// opcode: sm4ks; rd:x2; op1:x4; op2:x3; op1val:0xfbfaf9f8f7f6f5f4; op2val:0xf7f6f5f4f3f2f1f0; immval:0x3
TEST_RRI_OP(sm4ks, x2, x4, x3, 0x3, 0x0000000000000000, 0xfbfaf9f8f7f6f5f4, 0xf7f6f5f4f3f2f1f0, x8, 32, x9)

inst_30:
// rs1==x1, 
// opcode: sm4ks; rd:x31; op1:x1; op2:x30; op1val:0xfbfaf9f8f7f6f5f4; op2val:0xf7f6f5f4f3f2f1f0; immval:0x2
TEST_RRI_OP(sm4ks, x31, x1, x30, 0x2, 0x0000000000000000, 0xfbfaf9f8f7f6f5f4, 0xf7f6f5f4f3f2f1f0, x8, 40, x9)

inst_31:
// rs1==x0, 
// opcode: sm4ks; rd:x31; op1:x0; op2:x30; op1val:0x0; op2val:0xf7f6f5f4f3f2f1f0; immval:0x1
TEST_RRI_OP(sm4ks, x31, x0, x30, 0x1, 0x0000000000000000, 0x0, 0xf7f6f5f4f3f2f1f0, x8, 48, x9)

inst_32:
// rs2==x1, 
// opcode: sm4ks; rd:x31; op1:x30; op2:x1; op1val:0xfbfaf9f8f7f6f5f4; op2val:0xf7f6f5f4f3f2f1f0; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x1, 0x0, 0x0000000000000000, 0xfbfaf9f8f7f6f5f4, 0xf7f6f5f4f3f2f1f0, x8, 56, x9)

inst_33:
// rs2==x0, 
// opcode: sm4ks; rd:x31; op1:x30; op2:x0; op1val:0xf7f6f5f4f3f2f1f0; op2val:0x0; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x0, 0x3, 0x0000000000000000, 0xf7f6f5f4f3f2f1f0, 0x0, x8, 64, x9)

inst_34:
// rd==x1, 
// opcode: sm4ks; rd:x1; op1:x31; op2:x30; op1val:0xf7f6f5f4f3f2f1f0; op2val:0xfbfaf9f8f7f6f5f4; immval:0x2
TEST_RRI_OP(sm4ks, x1, x31, x30, 0x2, 0x0000000000000000, 0xf7f6f5f4f3f2f1f0, 0xfbfaf9f8f7f6f5f4, x8, 72, x9)

inst_35:
// rd==x0, 
// opcode: sm4ks; rd:x0; op1:x31; op2:x30; op1val:0xf7f6f5f4f3f2f1f0; op2val:0xfbfaf9f8f7f6f5f4; immval:0x1
TEST_RRI_OP(sm4ks, x0, x31, x30, 0x1, 0x0000000000000000, 0xf7f6f5f4f3f2f1f0, 0xfbfaf9f8f7f6f5f4, x8, 80, x9)

inst_36:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xf7f6f5f4f3f2f1f0; op2val:0xfbfaf9f8f7f6f5f4; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xf7f6f5f4f3f2f1f0, 0xfbfaf9f8f7f6f5f4, x8, 88, x9)

inst_37:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xf3f2f1f0efeeedec; op2val:0xefeeedecebeae9e8; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xf3f2f1f0efeeedec, 0xefeeedecebeae9e8, x8, 96, x9)

inst_38:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xf3f2f1f0efeeedec; op2val:0xefeeedecebeae9e8; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xf3f2f1f0efeeedec, 0xefeeedecebeae9e8, x8, 104, x9)

inst_39:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xf3f2f1f0efeeedec; op2val:0xefeeedecebeae9e8; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xf3f2f1f0efeeedec, 0xefeeedecebeae9e8, x8, 112, x9)

inst_40:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xf3f2f1f0efeeedec; op2val:0xefeeedecebeae9e8; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xf3f2f1f0efeeedec, 0xefeeedecebeae9e8, x8, 120, x9)

inst_41:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xefeeedecebeae9e8; op2val:0xf3f2f1f0efeeedec; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xefeeedecebeae9e8, 0xf3f2f1f0efeeedec, x8, 128, x9)

inst_42:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xefeeedecebeae9e8; op2val:0xf3f2f1f0efeeedec; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xefeeedecebeae9e8, 0xf3f2f1f0efeeedec, x8, 136, x9)

inst_43:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xefeeedecebeae9e8; op2val:0xf3f2f1f0efeeedec; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xefeeedecebeae9e8, 0xf3f2f1f0efeeedec, x8, 144, x9)

inst_44:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xefeeedecebeae9e8; op2val:0xf3f2f1f0efeeedec; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xefeeedecebeae9e8, 0xf3f2f1f0efeeedec, x8, 152, x9)

inst_45:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xebeae9e8e7e6e5e4; op2val:0xe7e6e5e4e3e2e1e0; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xebeae9e8e7e6e5e4, 0xe7e6e5e4e3e2e1e0, x8, 160, x9)

inst_46:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xebeae9e8e7e6e5e4; op2val:0xe7e6e5e4e3e2e1e0; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xebeae9e8e7e6e5e4, 0xe7e6e5e4e3e2e1e0, x8, 168, x9)

inst_47:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xebeae9e8e7e6e5e4; op2val:0xe7e6e5e4e3e2e1e0; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xebeae9e8e7e6e5e4, 0xe7e6e5e4e3e2e1e0, x8, 176, x9)

inst_48:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xebeae9e8e7e6e5e4; op2val:0xe7e6e5e4e3e2e1e0; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xebeae9e8e7e6e5e4, 0xe7e6e5e4e3e2e1e0, x8, 184, x9)

inst_49:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xe7e6e5e4e3e2e1e0; op2val:0xebeae9e8e7e6e5e4; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xe7e6e5e4e3e2e1e0, 0xebeae9e8e7e6e5e4, x8, 192, x9)

inst_50:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xe7e6e5e4e3e2e1e0; op2val:0xebeae9e8e7e6e5e4; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xe7e6e5e4e3e2e1e0, 0xebeae9e8e7e6e5e4, x8, 200, x9)

inst_51:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xe7e6e5e4e3e2e1e0; op2val:0xebeae9e8e7e6e5e4; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xe7e6e5e4e3e2e1e0, 0xebeae9e8e7e6e5e4, x8, 208, x9)

inst_52:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xe7e6e5e4e3e2e1e0; op2val:0xebeae9e8e7e6e5e4; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xe7e6e5e4e3e2e1e0, 0xebeae9e8e7e6e5e4, x8, 216, x9)

inst_53:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xe3e2e1e0dfdedddc; op2val:0xdfdedddcdbdad9d8; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xe3e2e1e0dfdedddc, 0xdfdedddcdbdad9d8, x8, 224, x9)

inst_54:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xe3e2e1e0dfdedddc; op2val:0xdfdedddcdbdad9d8; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xe3e2e1e0dfdedddc, 0xdfdedddcdbdad9d8, x8, 232, x9)

inst_55:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xe3e2e1e0dfdedddc; op2val:0xdfdedddcdbdad9d8; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xe3e2e1e0dfdedddc, 0xdfdedddcdbdad9d8, x8, 240, x9)

inst_56:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xe3e2e1e0dfdedddc; op2val:0xdfdedddcdbdad9d8; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xe3e2e1e0dfdedddc, 0xdfdedddcdbdad9d8, x8, 248, x9)

inst_57:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xdfdedddcdbdad9d8; op2val:0xe3e2e1e0dfdedddc; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xdfdedddcdbdad9d8, 0xe3e2e1e0dfdedddc, x8, 256, x9)

inst_58:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xdfdedddcdbdad9d8; op2val:0xe3e2e1e0dfdedddc; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xdfdedddcdbdad9d8, 0xe3e2e1e0dfdedddc, x8, 264, x9)

inst_59:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xdfdedddcdbdad9d8; op2val:0xe3e2e1e0dfdedddc; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xdfdedddcdbdad9d8, 0xe3e2e1e0dfdedddc, x8, 272, x9)

inst_60:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xdfdedddcdbdad9d8; op2val:0xe3e2e1e0dfdedddc; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xdfdedddcdbdad9d8, 0xe3e2e1e0dfdedddc, x8, 280, x9)

inst_61:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xdbdad9d8d7d6d5d4; op2val:0xd7d6d5d4d3d2d1d0; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xdbdad9d8d7d6d5d4, 0xd7d6d5d4d3d2d1d0, x8, 288, x9)

inst_62:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xdbdad9d8d7d6d5d4; op2val:0xd7d6d5d4d3d2d1d0; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xdbdad9d8d7d6d5d4, 0xd7d6d5d4d3d2d1d0, x8, 296, x9)

inst_63:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xdbdad9d8d7d6d5d4; op2val:0xd7d6d5d4d3d2d1d0; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xdbdad9d8d7d6d5d4, 0xd7d6d5d4d3d2d1d0, x8, 304, x9)

inst_64:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xdbdad9d8d7d6d5d4; op2val:0xd7d6d5d4d3d2d1d0; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xdbdad9d8d7d6d5d4, 0xd7d6d5d4d3d2d1d0, x8, 312, x9)

inst_65:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xd7d6d5d4d3d2d1d0; op2val:0xdbdad9d8d7d6d5d4; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xd7d6d5d4d3d2d1d0, 0xdbdad9d8d7d6d5d4, x8, 320, x9)

inst_66:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xd7d6d5d4d3d2d1d0; op2val:0xdbdad9d8d7d6d5d4; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xd7d6d5d4d3d2d1d0, 0xdbdad9d8d7d6d5d4, x8, 328, x9)

inst_67:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xd7d6d5d4d3d2d1d0; op2val:0xdbdad9d8d7d6d5d4; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xd7d6d5d4d3d2d1d0, 0xdbdad9d8d7d6d5d4, x8, 336, x9)

inst_68:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xd7d6d5d4d3d2d1d0; op2val:0xdbdad9d8d7d6d5d4; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xd7d6d5d4d3d2d1d0, 0xdbdad9d8d7d6d5d4, x8, 344, x9)

inst_69:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xd3d2d1d0cfcecdcc; op2val:0xcfcecdcccbcac9c8; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xd3d2d1d0cfcecdcc, 0xcfcecdcccbcac9c8, x8, 352, x9)

inst_70:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xd3d2d1d0cfcecdcc; op2val:0xcfcecdcccbcac9c8; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xd3d2d1d0cfcecdcc, 0xcfcecdcccbcac9c8, x8, 360, x9)

inst_71:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xd3d2d1d0cfcecdcc; op2val:0xcfcecdcccbcac9c8; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xd3d2d1d0cfcecdcc, 0xcfcecdcccbcac9c8, x8, 368, x9)

inst_72:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xd3d2d1d0cfcecdcc; op2val:0xcfcecdcccbcac9c8; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xd3d2d1d0cfcecdcc, 0xcfcecdcccbcac9c8, x8, 376, x9)

inst_73:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xcfcecdcccbcac9c8; op2val:0xd3d2d1d0cfcecdcc; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xcfcecdcccbcac9c8, 0xd3d2d1d0cfcecdcc, x8, 384, x9)

inst_74:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xcfcecdcccbcac9c8; op2val:0xd3d2d1d0cfcecdcc; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xcfcecdcccbcac9c8, 0xd3d2d1d0cfcecdcc, x8, 392, x9)

inst_75:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xcfcecdcccbcac9c8; op2val:0xd3d2d1d0cfcecdcc; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xcfcecdcccbcac9c8, 0xd3d2d1d0cfcecdcc, x8, 400, x9)

inst_76:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xcfcecdcccbcac9c8; op2val:0xd3d2d1d0cfcecdcc; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xcfcecdcccbcac9c8, 0xd3d2d1d0cfcecdcc, x8, 408, x9)

inst_77:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xcbcac9c8c7c6c5c4; op2val:0xc7c6c5c4c3c2c1c0; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xcbcac9c8c7c6c5c4, 0xc7c6c5c4c3c2c1c0, x8, 416, x9)

inst_78:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xcbcac9c8c7c6c5c4; op2val:0xc7c6c5c4c3c2c1c0; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xcbcac9c8c7c6c5c4, 0xc7c6c5c4c3c2c1c0, x8, 424, x9)

inst_79:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xcbcac9c8c7c6c5c4; op2val:0xc7c6c5c4c3c2c1c0; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xcbcac9c8c7c6c5c4, 0xc7c6c5c4c3c2c1c0, x8, 432, x9)

inst_80:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xcbcac9c8c7c6c5c4; op2val:0xc7c6c5c4c3c2c1c0; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xcbcac9c8c7c6c5c4, 0xc7c6c5c4c3c2c1c0, x8, 440, x9)

inst_81:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xc7c6c5c4c3c2c1c0; op2val:0xcbcac9c8c7c6c5c4; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xc7c6c5c4c3c2c1c0, 0xcbcac9c8c7c6c5c4, x8, 448, x9)

inst_82:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xc7c6c5c4c3c2c1c0; op2val:0xcbcac9c8c7c6c5c4; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xc7c6c5c4c3c2c1c0, 0xcbcac9c8c7c6c5c4, x8, 456, x9)

inst_83:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xc7c6c5c4c3c2c1c0; op2val:0xcbcac9c8c7c6c5c4; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xc7c6c5c4c3c2c1c0, 0xcbcac9c8c7c6c5c4, x8, 464, x9)

inst_84:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xc7c6c5c4c3c2c1c0; op2val:0xcbcac9c8c7c6c5c4; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xc7c6c5c4c3c2c1c0, 0xcbcac9c8c7c6c5c4, x8, 472, x9)

inst_85:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xc3c2c1c0bfbebdbc; op2val:0xbfbebdbcbbbab9b8; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xc3c2c1c0bfbebdbc, 0xbfbebdbcbbbab9b8, x8, 480, x9)

inst_86:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xc3c2c1c0bfbebdbc; op2val:0xbfbebdbcbbbab9b8; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xc3c2c1c0bfbebdbc, 0xbfbebdbcbbbab9b8, x8, 488, x9)

inst_87:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xc3c2c1c0bfbebdbc; op2val:0xbfbebdbcbbbab9b8; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xc3c2c1c0bfbebdbc, 0xbfbebdbcbbbab9b8, x8, 496, x9)

inst_88:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xc3c2c1c0bfbebdbc; op2val:0xbfbebdbcbbbab9b8; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xc3c2c1c0bfbebdbc, 0xbfbebdbcbbbab9b8, x8, 504, x9)

inst_89:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xbfbebdbcbbbab9b8; op2val:0xc3c2c1c0bfbebdbc; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xbfbebdbcbbbab9b8, 0xc3c2c1c0bfbebdbc, x8, 512, x9)

inst_90:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xbfbebdbcbbbab9b8; op2val:0xc3c2c1c0bfbebdbc; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xbfbebdbcbbbab9b8, 0xc3c2c1c0bfbebdbc, x8, 520, x9)

inst_91:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xbfbebdbcbbbab9b8; op2val:0xc3c2c1c0bfbebdbc; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xbfbebdbcbbbab9b8, 0xc3c2c1c0bfbebdbc, x8, 528, x9)

inst_92:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xbfbebdbcbbbab9b8; op2val:0xc3c2c1c0bfbebdbc; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xbfbebdbcbbbab9b8, 0xc3c2c1c0bfbebdbc, x8, 536, x9)

inst_93:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xbbbab9b8b7b6b5b4; op2val:0xb7b6b5b4b3b2b1b0; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xbbbab9b8b7b6b5b4, 0xb7b6b5b4b3b2b1b0, x8, 544, x9)

inst_94:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xbbbab9b8b7b6b5b4; op2val:0xb7b6b5b4b3b2b1b0; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xbbbab9b8b7b6b5b4, 0xb7b6b5b4b3b2b1b0, x8, 552, x9)

inst_95:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xbbbab9b8b7b6b5b4; op2val:0xb7b6b5b4b3b2b1b0; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xbbbab9b8b7b6b5b4, 0xb7b6b5b4b3b2b1b0, x8, 560, x9)

inst_96:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xbbbab9b8b7b6b5b4; op2val:0xb7b6b5b4b3b2b1b0; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xbbbab9b8b7b6b5b4, 0xb7b6b5b4b3b2b1b0, x8, 568, x9)

inst_97:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xb7b6b5b4b3b2b1b0; op2val:0xbbbab9b8b7b6b5b4; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xb7b6b5b4b3b2b1b0, 0xbbbab9b8b7b6b5b4, x8, 576, x9)

inst_98:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xb7b6b5b4b3b2b1b0; op2val:0xbbbab9b8b7b6b5b4; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xb7b6b5b4b3b2b1b0, 0xbbbab9b8b7b6b5b4, x8, 584, x9)

inst_99:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xb7b6b5b4b3b2b1b0; op2val:0xbbbab9b8b7b6b5b4; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xb7b6b5b4b3b2b1b0, 0xbbbab9b8b7b6b5b4, x8, 592, x9)

inst_100:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xb7b6b5b4b3b2b1b0; op2val:0xbbbab9b8b7b6b5b4; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xb7b6b5b4b3b2b1b0, 0xbbbab9b8b7b6b5b4, x8, 600, x9)

inst_101:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xb3b2b1b0afaeadac; op2val:0xafaeadacabaaa9a8; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xb3b2b1b0afaeadac, 0xafaeadacabaaa9a8, x8, 608, x9)

inst_102:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xb3b2b1b0afaeadac; op2val:0xafaeadacabaaa9a8; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xb3b2b1b0afaeadac, 0xafaeadacabaaa9a8, x8, 616, x9)

inst_103:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xb3b2b1b0afaeadac; op2val:0xafaeadacabaaa9a8; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xb3b2b1b0afaeadac, 0xafaeadacabaaa9a8, x8, 624, x9)

inst_104:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xb3b2b1b0afaeadac; op2val:0xafaeadacabaaa9a8; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xb3b2b1b0afaeadac, 0xafaeadacabaaa9a8, x8, 632, x9)

inst_105:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xafaeadacabaaa9a8; op2val:0xb3b2b1b0afaeadac; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xafaeadacabaaa9a8, 0xb3b2b1b0afaeadac, x8, 640, x9)

inst_106:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xafaeadacabaaa9a8; op2val:0xb3b2b1b0afaeadac; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xafaeadacabaaa9a8, 0xb3b2b1b0afaeadac, x8, 648, x9)

inst_107:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xafaeadacabaaa9a8; op2val:0xb3b2b1b0afaeadac; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xafaeadacabaaa9a8, 0xb3b2b1b0afaeadac, x8, 656, x9)

inst_108:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xafaeadacabaaa9a8; op2val:0xb3b2b1b0afaeadac; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xafaeadacabaaa9a8, 0xb3b2b1b0afaeadac, x8, 664, x9)

inst_109:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xabaaa9a8a7a6a5a4; op2val:0xa7a6a5a4a3a2a1a0; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xabaaa9a8a7a6a5a4, 0xa7a6a5a4a3a2a1a0, x8, 672, x9)

inst_110:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xabaaa9a8a7a6a5a4; op2val:0xa7a6a5a4a3a2a1a0; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xabaaa9a8a7a6a5a4, 0xa7a6a5a4a3a2a1a0, x8, 680, x9)

inst_111:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xabaaa9a8a7a6a5a4; op2val:0xa7a6a5a4a3a2a1a0; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xabaaa9a8a7a6a5a4, 0xa7a6a5a4a3a2a1a0, x8, 688, x9)

inst_112:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xabaaa9a8a7a6a5a4; op2val:0xa7a6a5a4a3a2a1a0; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xabaaa9a8a7a6a5a4, 0xa7a6a5a4a3a2a1a0, x8, 696, x9)

inst_113:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xa7a6a5a4a3a2a1a0; op2val:0xabaaa9a8a7a6a5a4; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xa7a6a5a4a3a2a1a0, 0xabaaa9a8a7a6a5a4, x8, 704, x9)

inst_114:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xa7a6a5a4a3a2a1a0; op2val:0xabaaa9a8a7a6a5a4; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xa7a6a5a4a3a2a1a0, 0xabaaa9a8a7a6a5a4, x8, 712, x9)

inst_115:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xa7a6a5a4a3a2a1a0; op2val:0xabaaa9a8a7a6a5a4; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xa7a6a5a4a3a2a1a0, 0xabaaa9a8a7a6a5a4, x8, 720, x9)

inst_116:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xa7a6a5a4a3a2a1a0; op2val:0xabaaa9a8a7a6a5a4; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xa7a6a5a4a3a2a1a0, 0xabaaa9a8a7a6a5a4, x8, 728, x9)

inst_117:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xa3a2a1a09f9e9d9c; op2val:0x9f9e9d9c9b9a9998; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xa3a2a1a09f9e9d9c, 0x9f9e9d9c9b9a9998, x8, 736, x9)

inst_118:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xa3a2a1a09f9e9d9c; op2val:0x9f9e9d9c9b9a9998; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xa3a2a1a09f9e9d9c, 0x9f9e9d9c9b9a9998, x8, 744, x9)

inst_119:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xa3a2a1a09f9e9d9c; op2val:0x9f9e9d9c9b9a9998; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xa3a2a1a09f9e9d9c, 0x9f9e9d9c9b9a9998, x8, 752, x9)

inst_120:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xa3a2a1a09f9e9d9c; op2val:0x9f9e9d9c9b9a9998; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xa3a2a1a09f9e9d9c, 0x9f9e9d9c9b9a9998, x8, 760, x9)

inst_121:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x9f9e9d9c9b9a9998; op2val:0xa3a2a1a09f9e9d9c; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x9f9e9d9c9b9a9998, 0xa3a2a1a09f9e9d9c, x8, 768, x9)

inst_122:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x9f9e9d9c9b9a9998; op2val:0xa3a2a1a09f9e9d9c; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x9f9e9d9c9b9a9998, 0xa3a2a1a09f9e9d9c, x8, 776, x9)

inst_123:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x9f9e9d9c9b9a9998; op2val:0xa3a2a1a09f9e9d9c; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x9f9e9d9c9b9a9998, 0xa3a2a1a09f9e9d9c, x8, 784, x9)

inst_124:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x9f9e9d9c9b9a9998; op2val:0xa3a2a1a09f9e9d9c; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x9f9e9d9c9b9a9998, 0xa3a2a1a09f9e9d9c, x8, 792, x9)

inst_125:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x9b9a999897969594; op2val:0x9796959493929190; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x9b9a999897969594, 0x9796959493929190, x8, 800, x9)

inst_126:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x9b9a999897969594; op2val:0x9796959493929190; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x9b9a999897969594, 0x9796959493929190, x8, 808, x9)

inst_127:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x9b9a999897969594; op2val:0x9796959493929190; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x9b9a999897969594, 0x9796959493929190, x8, 816, x9)

inst_128:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x9b9a999897969594; op2val:0x9796959493929190; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x9b9a999897969594, 0x9796959493929190, x8, 824, x9)

inst_129:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x9796959493929190; op2val:0x9b9a999897969594; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x9796959493929190, 0x9b9a999897969594, x8, 832, x9)

inst_130:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x9796959493929190; op2val:0x9b9a999897969594; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x9796959493929190, 0x9b9a999897969594, x8, 840, x9)

inst_131:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x9796959493929190; op2val:0x9b9a999897969594; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x9796959493929190, 0x9b9a999897969594, x8, 848, x9)

inst_132:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x9796959493929190; op2val:0x9b9a999897969594; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x9796959493929190, 0x9b9a999897969594, x8, 856, x9)

inst_133:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x939291908f8e8d8c; op2val:0x8f8e8d8c8b8a8988; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x939291908f8e8d8c, 0x8f8e8d8c8b8a8988, x8, 864, x9)

inst_134:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x939291908f8e8d8c; op2val:0x8f8e8d8c8b8a8988; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x939291908f8e8d8c, 0x8f8e8d8c8b8a8988, x8, 872, x9)

inst_135:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x939291908f8e8d8c; op2val:0x8f8e8d8c8b8a8988; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x939291908f8e8d8c, 0x8f8e8d8c8b8a8988, x8, 880, x9)

inst_136:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x939291908f8e8d8c; op2val:0x8f8e8d8c8b8a8988; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x939291908f8e8d8c, 0x8f8e8d8c8b8a8988, x8, 888, x9)

inst_137:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x8f8e8d8c8b8a8988; op2val:0x939291908f8e8d8c; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x8f8e8d8c8b8a8988, 0x939291908f8e8d8c, x8, 896, x9)

inst_138:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x8f8e8d8c8b8a8988; op2val:0x939291908f8e8d8c; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x8f8e8d8c8b8a8988, 0x939291908f8e8d8c, x8, 904, x9)

inst_139:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x8f8e8d8c8b8a8988; op2val:0x939291908f8e8d8c; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x8f8e8d8c8b8a8988, 0x939291908f8e8d8c, x8, 912, x9)

inst_140:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x8f8e8d8c8b8a8988; op2val:0x939291908f8e8d8c; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x8f8e8d8c8b8a8988, 0x939291908f8e8d8c, x8, 920, x9)

inst_141:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x8b8a898887868584; op2val:0x8786858483828180; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x8b8a898887868584, 0x8786858483828180, x8, 928, x9)

inst_142:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x8b8a898887868584; op2val:0x8786858483828180; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x8b8a898887868584, 0x8786858483828180, x8, 936, x9)

inst_143:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x8b8a898887868584; op2val:0x8786858483828180; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x8b8a898887868584, 0x8786858483828180, x8, 944, x9)

inst_144:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x8b8a898887868584; op2val:0x8786858483828180; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x8b8a898887868584, 0x8786858483828180, x8, 952, x9)

inst_145:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x8786858483828180; op2val:0x8b8a898887868584; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x8786858483828180, 0x8b8a898887868584, x8, 960, x9)

inst_146:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x8786858483828180; op2val:0x8b8a898887868584; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x8786858483828180, 0x8b8a898887868584, x8, 968, x9)

inst_147:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x8786858483828180; op2val:0x8b8a898887868584; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x8786858483828180, 0x8b8a898887868584, x8, 976, x9)

inst_148:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x8786858483828180; op2val:0x8b8a898887868584; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x8786858483828180, 0x8b8a898887868584, x8, 984, x9)

inst_149:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x838281807f7e7d7c; op2val:0x7f7e7d7c7b7a7978; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x838281807f7e7d7c, 0x7f7e7d7c7b7a7978, x8, 992, x9)

inst_150:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x838281807f7e7d7c; op2val:0x7f7e7d7c7b7a7978; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x838281807f7e7d7c, 0x7f7e7d7c7b7a7978, x8, 1000, x9)

inst_151:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x838281807f7e7d7c; op2val:0x7f7e7d7c7b7a7978; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x838281807f7e7d7c, 0x7f7e7d7c7b7a7978, x8, 1008, x9)

inst_152:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x838281807f7e7d7c; op2val:0x7f7e7d7c7b7a7978; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x838281807f7e7d7c, 0x7f7e7d7c7b7a7978, x8, 1016, x9)

inst_153:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x7f7e7d7c7b7a7978; op2val:0x838281807f7e7d7c; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x7f7e7d7c7b7a7978, 0x838281807f7e7d7c, x8, 1024, x9)

inst_154:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x7f7e7d7c7b7a7978; op2val:0x838281807f7e7d7c; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x7f7e7d7c7b7a7978, 0x838281807f7e7d7c, x8, 1032, x9)

inst_155:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x7f7e7d7c7b7a7978; op2val:0x838281807f7e7d7c; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x7f7e7d7c7b7a7978, 0x838281807f7e7d7c, x8, 1040, x9)

inst_156:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x7f7e7d7c7b7a7978; op2val:0x838281807f7e7d7c; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x7f7e7d7c7b7a7978, 0x838281807f7e7d7c, x8, 1048, x9)

inst_157:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x7b7a797877767574; op2val:0x7776757473727170; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x7b7a797877767574, 0x7776757473727170, x8, 1056, x9)

inst_158:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x7b7a797877767574; op2val:0x7776757473727170; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x7b7a797877767574, 0x7776757473727170, x8, 1064, x9)

inst_159:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x7b7a797877767574; op2val:0x7776757473727170; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x7b7a797877767574, 0x7776757473727170, x8, 1072, x9)

inst_160:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x7b7a797877767574; op2val:0x7776757473727170; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x7b7a797877767574, 0x7776757473727170, x8, 1080, x9)

inst_161:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x7776757473727170; op2val:0x7b7a797877767574; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x7776757473727170, 0x7b7a797877767574, x8, 1088, x9)

inst_162:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x7776757473727170; op2val:0x7b7a797877767574; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x7776757473727170, 0x7b7a797877767574, x8, 1096, x9)

inst_163:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x7776757473727170; op2val:0x7b7a797877767574; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x7776757473727170, 0x7b7a797877767574, x8, 1104, x9)

inst_164:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x7776757473727170; op2val:0x7b7a797877767574; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x7776757473727170, 0x7b7a797877767574, x8, 1112, x9)

inst_165:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x737271706f6e6d6c; op2val:0x6f6e6d6c6b6a6968; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x737271706f6e6d6c, 0x6f6e6d6c6b6a6968, x8, 1120, x9)

inst_166:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x737271706f6e6d6c; op2val:0x6f6e6d6c6b6a6968; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x737271706f6e6d6c, 0x6f6e6d6c6b6a6968, x8, 1128, x9)

inst_167:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x737271706f6e6d6c; op2val:0x6f6e6d6c6b6a6968; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x737271706f6e6d6c, 0x6f6e6d6c6b6a6968, x8, 1136, x9)

inst_168:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x737271706f6e6d6c; op2val:0x6f6e6d6c6b6a6968; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x737271706f6e6d6c, 0x6f6e6d6c6b6a6968, x8, 1144, x9)

inst_169:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x6f6e6d6c6b6a6968; op2val:0x737271706f6e6d6c; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x6f6e6d6c6b6a6968, 0x737271706f6e6d6c, x8, 1152, x9)

inst_170:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x6f6e6d6c6b6a6968; op2val:0x737271706f6e6d6c; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x6f6e6d6c6b6a6968, 0x737271706f6e6d6c, x8, 1160, x9)

inst_171:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x6f6e6d6c6b6a6968; op2val:0x737271706f6e6d6c; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x6f6e6d6c6b6a6968, 0x737271706f6e6d6c, x8, 1168, x9)

inst_172:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x6f6e6d6c6b6a6968; op2val:0x737271706f6e6d6c; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x6f6e6d6c6b6a6968, 0x737271706f6e6d6c, x8, 1176, x9)

inst_173:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x6b6a696867666564; op2val:0x6766656463626160; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x6b6a696867666564, 0x6766656463626160, x8, 1184, x9)

inst_174:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x6b6a696867666564; op2val:0x6766656463626160; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x6b6a696867666564, 0x6766656463626160, x8, 1192, x9)

inst_175:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x6b6a696867666564; op2val:0x6766656463626160; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x6b6a696867666564, 0x6766656463626160, x8, 1200, x9)

inst_176:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x6b6a696867666564; op2val:0x6766656463626160; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x6b6a696867666564, 0x6766656463626160, x8, 1208, x9)

inst_177:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x6766656463626160; op2val:0x6b6a696867666564; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x6766656463626160, 0x6b6a696867666564, x8, 1216, x9)

inst_178:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x6766656463626160; op2val:0x6b6a696867666564; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x6766656463626160, 0x6b6a696867666564, x8, 1224, x9)

inst_179:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x6766656463626160; op2val:0x6b6a696867666564; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x6766656463626160, 0x6b6a696867666564, x8, 1232, x9)

inst_180:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x6766656463626160; op2val:0x6b6a696867666564; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x6766656463626160, 0x6b6a696867666564, x8, 1240, x9)

inst_181:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x636261605f5e5d5c; op2val:0x5f5e5d5c5b5a5958; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x636261605f5e5d5c, 0x5f5e5d5c5b5a5958, x8, 1248, x9)

inst_182:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x636261605f5e5d5c; op2val:0x5f5e5d5c5b5a5958; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x636261605f5e5d5c, 0x5f5e5d5c5b5a5958, x8, 1256, x9)

inst_183:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x636261605f5e5d5c; op2val:0x5f5e5d5c5b5a5958; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x636261605f5e5d5c, 0x5f5e5d5c5b5a5958, x8, 1264, x9)

inst_184:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x636261605f5e5d5c; op2val:0x5f5e5d5c5b5a5958; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x636261605f5e5d5c, 0x5f5e5d5c5b5a5958, x8, 1272, x9)

inst_185:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x5f5e5d5c5b5a5958; op2val:0x636261605f5e5d5c; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x5f5e5d5c5b5a5958, 0x636261605f5e5d5c, x8, 1280, x9)

inst_186:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x5f5e5d5c5b5a5958; op2val:0x636261605f5e5d5c; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x5f5e5d5c5b5a5958, 0x636261605f5e5d5c, x8, 1288, x9)

inst_187:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x5f5e5d5c5b5a5958; op2val:0x636261605f5e5d5c; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x5f5e5d5c5b5a5958, 0x636261605f5e5d5c, x8, 1296, x9)

inst_188:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x5f5e5d5c5b5a5958; op2val:0x636261605f5e5d5c; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x5f5e5d5c5b5a5958, 0x636261605f5e5d5c, x8, 1304, x9)

inst_189:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x5b5a595857565554; op2val:0x5756555453525150; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x5b5a595857565554, 0x5756555453525150, x8, 1312, x9)

inst_190:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x5b5a595857565554; op2val:0x5756555453525150; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x5b5a595857565554, 0x5756555453525150, x8, 1320, x9)

inst_191:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x5b5a595857565554; op2val:0x5756555453525150; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x5b5a595857565554, 0x5756555453525150, x8, 1328, x9)

inst_192:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x5b5a595857565554; op2val:0x5756555453525150; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x5b5a595857565554, 0x5756555453525150, x8, 1336, x9)

inst_193:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x5756555453525150; op2val:0x5b5a595857565554; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x5756555453525150, 0x5b5a595857565554, x8, 1344, x9)

inst_194:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x5756555453525150; op2val:0x5b5a595857565554; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x5756555453525150, 0x5b5a595857565554, x8, 1352, x9)

inst_195:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x5756555453525150; op2val:0x5b5a595857565554; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x5756555453525150, 0x5b5a595857565554, x8, 1360, x9)

inst_196:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x5756555453525150; op2val:0x5b5a595857565554; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x5756555453525150, 0x5b5a595857565554, x8, 1368, x9)

inst_197:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x535251504f4e4d4c; op2val:0x4f4e4d4c4b4a4948; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x535251504f4e4d4c, 0x4f4e4d4c4b4a4948, x8, 1376, x9)

inst_198:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x535251504f4e4d4c; op2val:0x4f4e4d4c4b4a4948; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x535251504f4e4d4c, 0x4f4e4d4c4b4a4948, x8, 1384, x9)

inst_199:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x535251504f4e4d4c; op2val:0x4f4e4d4c4b4a4948; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x535251504f4e4d4c, 0x4f4e4d4c4b4a4948, x8, 1392, x9)

inst_200:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x535251504f4e4d4c; op2val:0x4f4e4d4c4b4a4948; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x535251504f4e4d4c, 0x4f4e4d4c4b4a4948, x8, 1400, x9)

inst_201:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x4f4e4d4c4b4a4948; op2val:0x535251504f4e4d4c; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x4f4e4d4c4b4a4948, 0x535251504f4e4d4c, x8, 1408, x9)

inst_202:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x4f4e4d4c4b4a4948; op2val:0x535251504f4e4d4c; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x4f4e4d4c4b4a4948, 0x535251504f4e4d4c, x8, 1416, x9)

inst_203:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x4f4e4d4c4b4a4948; op2val:0x535251504f4e4d4c; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x4f4e4d4c4b4a4948, 0x535251504f4e4d4c, x8, 1424, x9)

inst_204:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x4f4e4d4c4b4a4948; op2val:0x535251504f4e4d4c; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x4f4e4d4c4b4a4948, 0x535251504f4e4d4c, x8, 1432, x9)

inst_205:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x4b4a494847464544; op2val:0x4746454443424140; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x4b4a494847464544, 0x4746454443424140, x8, 1440, x9)

inst_206:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x4b4a494847464544; op2val:0x4746454443424140; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x4b4a494847464544, 0x4746454443424140, x8, 1448, x9)

inst_207:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x4b4a494847464544; op2val:0x4746454443424140; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x4b4a494847464544, 0x4746454443424140, x8, 1456, x9)

inst_208:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x4b4a494847464544; op2val:0x4746454443424140; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x4b4a494847464544, 0x4746454443424140, x8, 1464, x9)

inst_209:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x4746454443424140; op2val:0x4b4a494847464544; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x4746454443424140, 0x4b4a494847464544, x8, 1472, x9)

inst_210:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x4746454443424140; op2val:0x4b4a494847464544; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x4746454443424140, 0x4b4a494847464544, x8, 1480, x9)

inst_211:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x4746454443424140; op2val:0x4b4a494847464544; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x4746454443424140, 0x4b4a494847464544, x8, 1488, x9)

inst_212:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x4746454443424140; op2val:0x4b4a494847464544; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x4746454443424140, 0x4b4a494847464544, x8, 1496, x9)

inst_213:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x434241403f3e3d3c; op2val:0x3f3e3d3c3b3a3938; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x434241403f3e3d3c, 0x3f3e3d3c3b3a3938, x8, 1504, x9)

inst_214:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x434241403f3e3d3c; op2val:0x3f3e3d3c3b3a3938; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x434241403f3e3d3c, 0x3f3e3d3c3b3a3938, x8, 1512, x9)

inst_215:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x434241403f3e3d3c; op2val:0x3f3e3d3c3b3a3938; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x434241403f3e3d3c, 0x3f3e3d3c3b3a3938, x8, 1520, x9)

inst_216:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x434241403f3e3d3c; op2val:0x3f3e3d3c3b3a3938; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x434241403f3e3d3c, 0x3f3e3d3c3b3a3938, x8, 1528, x9)

inst_217:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x3f3e3d3c3b3a3938; op2val:0x434241403f3e3d3c; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x3f3e3d3c3b3a3938, 0x434241403f3e3d3c, x8, 1536, x9)

inst_218:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x3f3e3d3c3b3a3938; op2val:0x434241403f3e3d3c; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x3f3e3d3c3b3a3938, 0x434241403f3e3d3c, x8, 1544, x9)

inst_219:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x3f3e3d3c3b3a3938; op2val:0x434241403f3e3d3c; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x3f3e3d3c3b3a3938, 0x434241403f3e3d3c, x8, 1552, x9)

inst_220:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x3f3e3d3c3b3a3938; op2val:0x434241403f3e3d3c; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x3f3e3d3c3b3a3938, 0x434241403f3e3d3c, x8, 1560, x9)

inst_221:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x3b3a393837363534; op2val:0x3736353433323130; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x3b3a393837363534, 0x3736353433323130, x8, 1568, x9)

inst_222:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x3b3a393837363534; op2val:0x3736353433323130; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x3b3a393837363534, 0x3736353433323130, x8, 1576, x9)

inst_223:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x3b3a393837363534; op2val:0x3736353433323130; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x3b3a393837363534, 0x3736353433323130, x8, 1584, x9)

inst_224:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x3b3a393837363534; op2val:0x3736353433323130; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x3b3a393837363534, 0x3736353433323130, x8, 1592, x9)

inst_225:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x3736353433323130; op2val:0x3b3a393837363534; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x3736353433323130, 0x3b3a393837363534, x8, 1600, x9)

inst_226:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x3736353433323130; op2val:0x3b3a393837363534; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x3736353433323130, 0x3b3a393837363534, x8, 1608, x9)

inst_227:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x3736353433323130; op2val:0x3b3a393837363534; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x3736353433323130, 0x3b3a393837363534, x8, 1616, x9)

inst_228:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x3736353433323130; op2val:0x3b3a393837363534; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x3736353433323130, 0x3b3a393837363534, x8, 1624, x9)

inst_229:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x333231302f2e2d2c; op2val:0x2f2e2d2c2b2a2928; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x333231302f2e2d2c, 0x2f2e2d2c2b2a2928, x8, 1632, x9)

inst_230:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x333231302f2e2d2c; op2val:0x2f2e2d2c2b2a2928; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x333231302f2e2d2c, 0x2f2e2d2c2b2a2928, x8, 1640, x9)

inst_231:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x333231302f2e2d2c; op2val:0x2f2e2d2c2b2a2928; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x333231302f2e2d2c, 0x2f2e2d2c2b2a2928, x8, 1648, x9)

inst_232:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x333231302f2e2d2c; op2val:0x2f2e2d2c2b2a2928; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x333231302f2e2d2c, 0x2f2e2d2c2b2a2928, x8, 1656, x9)

inst_233:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x2f2e2d2c2b2a2928; op2val:0x333231302f2e2d2c; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x2f2e2d2c2b2a2928, 0x333231302f2e2d2c, x8, 1664, x9)

inst_234:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x2f2e2d2c2b2a2928; op2val:0x333231302f2e2d2c; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x2f2e2d2c2b2a2928, 0x333231302f2e2d2c, x8, 1672, x9)

inst_235:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x2f2e2d2c2b2a2928; op2val:0x333231302f2e2d2c; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x2f2e2d2c2b2a2928, 0x333231302f2e2d2c, x8, 1680, x9)

inst_236:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x2f2e2d2c2b2a2928; op2val:0x333231302f2e2d2c; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x2f2e2d2c2b2a2928, 0x333231302f2e2d2c, x8, 1688, x9)

inst_237:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x2b2a292827262524; op2val:0x2726252423222120; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x2b2a292827262524, 0x2726252423222120, x8, 1696, x9)

inst_238:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x2b2a292827262524; op2val:0x2726252423222120; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x2b2a292827262524, 0x2726252423222120, x8, 1704, x9)

inst_239:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x2b2a292827262524; op2val:0x2726252423222120; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x2b2a292827262524, 0x2726252423222120, x8, 1712, x9)

inst_240:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x2b2a292827262524; op2val:0x2726252423222120; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x2b2a292827262524, 0x2726252423222120, x8, 1720, x9)

inst_241:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x2726252423222120; op2val:0x2b2a292827262524; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x2726252423222120, 0x2b2a292827262524, x8, 1728, x9)

inst_242:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x2726252423222120; op2val:0x2b2a292827262524; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x2726252423222120, 0x2b2a292827262524, x8, 1736, x9)

inst_243:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x2726252423222120; op2val:0x2b2a292827262524; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x2726252423222120, 0x2b2a292827262524, x8, 1744, x9)

inst_244:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x2726252423222120; op2val:0x2b2a292827262524; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x2726252423222120, 0x2b2a292827262524, x8, 1752, x9)

inst_245:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x232221201f1e1d1c; op2val:0x1f1e1d1c1b1a1918; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x232221201f1e1d1c, 0x1f1e1d1c1b1a1918, x8, 1760, x9)

inst_246:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x232221201f1e1d1c; op2val:0x1f1e1d1c1b1a1918; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x232221201f1e1d1c, 0x1f1e1d1c1b1a1918, x8, 1768, x9)

inst_247:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x232221201f1e1d1c; op2val:0x1f1e1d1c1b1a1918; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x232221201f1e1d1c, 0x1f1e1d1c1b1a1918, x8, 1776, x9)

inst_248:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x232221201f1e1d1c; op2val:0x1f1e1d1c1b1a1918; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x232221201f1e1d1c, 0x1f1e1d1c1b1a1918, x8, 1784, x9)

inst_249:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x1f1e1d1c1b1a1918; op2val:0x232221201f1e1d1c; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x1f1e1d1c1b1a1918, 0x232221201f1e1d1c, x8, 1792, x9)

inst_250:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x1f1e1d1c1b1a1918; op2val:0x232221201f1e1d1c; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x1f1e1d1c1b1a1918, 0x232221201f1e1d1c, x8, 1800, x9)

inst_251:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x1f1e1d1c1b1a1918; op2val:0x232221201f1e1d1c; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x1f1e1d1c1b1a1918, 0x232221201f1e1d1c, x8, 1808, x9)

inst_252:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x1f1e1d1c1b1a1918; op2val:0x232221201f1e1d1c; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x1f1e1d1c1b1a1918, 0x232221201f1e1d1c, x8, 1816, x9)

inst_253:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x1b1a191817161514; op2val:0x1716151413121110; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x1b1a191817161514, 0x1716151413121110, x8, 1824, x9)

inst_254:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x1b1a191817161514; op2val:0x1716151413121110; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x1b1a191817161514, 0x1716151413121110, x8, 1832, x9)

inst_255:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x1b1a191817161514; op2val:0x1716151413121110; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x1b1a191817161514, 0x1716151413121110, x8, 1840, x9)

inst_256:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x1b1a191817161514; op2val:0x1716151413121110; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x1b1a191817161514, 0x1716151413121110, x8, 1848, x9)

inst_257:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x1716151413121110; op2val:0x1b1a191817161514; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x1716151413121110, 0x1b1a191817161514, x8, 1856, x9)

inst_258:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x1716151413121110; op2val:0x1b1a191817161514; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x1716151413121110, 0x1b1a191817161514, x8, 1864, x9)

inst_259:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x1716151413121110; op2val:0x1b1a191817161514; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x1716151413121110, 0x1b1a191817161514, x8, 1872, x9)

inst_260:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x1716151413121110; op2val:0x1b1a191817161514; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x1716151413121110, 0x1b1a191817161514, x8, 1880, x9)

inst_261:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x131211100f0e0d0c; op2val:0xf0e0d0c0b0a0908; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x131211100f0e0d0c, 0xf0e0d0c0b0a0908, x8, 1888, x9)

inst_262:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x131211100f0e0d0c; op2val:0xf0e0d0c0b0a0908; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x131211100f0e0d0c, 0xf0e0d0c0b0a0908, x8, 1896, x9)

inst_263:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x131211100f0e0d0c; op2val:0xf0e0d0c0b0a0908; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x131211100f0e0d0c, 0xf0e0d0c0b0a0908, x8, 1904, x9)

inst_264:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x131211100f0e0d0c; op2val:0xf0e0d0c0b0a0908; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x131211100f0e0d0c, 0xf0e0d0c0b0a0908, x8, 1912, x9)

inst_265:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xf0e0d0c0b0a0908; op2val:0x131211100f0e0d0c; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xf0e0d0c0b0a0908, 0x131211100f0e0d0c, x8, 1920, x9)

inst_266:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xf0e0d0c0b0a0908; op2val:0x131211100f0e0d0c; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xf0e0d0c0b0a0908, 0x131211100f0e0d0c, x8, 1928, x9)

inst_267:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xf0e0d0c0b0a0908; op2val:0x131211100f0e0d0c; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xf0e0d0c0b0a0908, 0x131211100f0e0d0c, x8, 1936, x9)

inst_268:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xf0e0d0c0b0a0908; op2val:0x131211100f0e0d0c; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xf0e0d0c0b0a0908, 0x131211100f0e0d0c, x8, 1944, x9)

inst_269:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xb0a090807060504; op2val:0x706050403020100; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xb0a090807060504, 0x706050403020100, x8, 1952, x9)

inst_270:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xb0a090807060504; op2val:0x706050403020100; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xb0a090807060504, 0x706050403020100, x8, 1960, x9)

inst_271:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xb0a090807060504; op2val:0x706050403020100; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xb0a090807060504, 0x706050403020100, x8, 1968, x9)

inst_272:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xb0a090807060504; op2val:0x706050403020100; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0xb0a090807060504, 0x706050403020100, x8, 1976, x9)

inst_273:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x706050403020100; op2val:0xb0a090807060504; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0x706050403020100, 0xb0a090807060504, x8, 1984, x9)

inst_274:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x706050403020100; op2val:0xb0a090807060504; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0x706050403020100, 0xb0a090807060504, x8, 1992, x9)

inst_275:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x706050403020100; op2val:0xb0a090807060504; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0x706050403020100, 0xb0a090807060504, x8, 2000, x9)

inst_276:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0x156fe482f9fcd292; op2val:0x24c6435c8dca0621; immval:0x0
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x0, 0x0000000000000000, 0x156fe482f9fcd292, 0x24c6435c8dca0621, x8, 2008, x9)

inst_277:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xa757e91e027e5943; op2val:0xda73ec2605e6750f; immval:0x2
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x2, 0x0000000000000000, 0xa757e91e027e5943, 0xda73ec2605e6750f, x8, 2016, x9)

inst_278:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xfbfaf9f8f7f6f5f4; op2val:0xf7f6f5f4f3f2f1f0; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xfbfaf9f8f7f6f5f4, 0xf7f6f5f4f3f2f1f0, x8, 2024, x9)

inst_279:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xf7f6f5f4f3f2f1f0; op2val:0xfbfaf9f8f7f6f5f4; immval:0x3
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x3, 0x0000000000000000, 0xf7f6f5f4f3f2f1f0, 0xfbfaf9f8f7f6f5f4, x8, 2032, x9)

inst_280:
// 
// opcode: sm4ks; rd:x31; op1:x30; op2:x29; op1val:0xf7f6f5f4f3f2f1f0; op2val:0xfbfaf9f8f7f6f5f4; immval:0x1
TEST_RRI_OP(sm4ks, x31, x30, x29, 0x1, 0x0000000000000000, 0xf7f6f5f4f3f2f1f0, 0xfbfaf9f8f7f6f5f4, x8, 2040, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 25*(XLEN/32),4,0xdeadbeef


signature_x8_0:
    .fill 256*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
