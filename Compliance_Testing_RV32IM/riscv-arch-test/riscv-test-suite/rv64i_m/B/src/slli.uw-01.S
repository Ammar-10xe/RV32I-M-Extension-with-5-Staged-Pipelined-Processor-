
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Sun Aug  7 17:10:46 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/anku/work2/bmanip/64/dataset.yaml \
//                  --cgf /home/anku/work2/bmanip/64/rv64ib.yaml \
 \
//                  -- xlen 64  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the slli.uw instruction of the RISC-V RV64Zba extension for the slli.uw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IZba")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*Zba.*);def TEST_CASE_1=True;",slli.uw)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rd, rs1==x30, rd==x31, 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffffff;  immval:0x15
TEST_IMM_OP( slli.uw, x31, x30, -0x200000, 0xffffffffffffffff, 0x15, x1, 0, x2)

inst_1:
// rs1 == rd, rs1==x29, rd==x29, 
// opcode: slli.uw ; op1:x29; dest:x29; op1val:0x7fffffffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x29, x29, -0x80000000, 0x7fffffffffffffff, 0x1f, x1, 8, x2)

inst_2:
// rs1==x31, rd==x30, 
// opcode: slli.uw ; op1:x31; dest:x30; op1val:0xbfffffffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x30, x31, -0x80000000, 0xbfffffffffffffff, 0x1f, x1, 16, x2)

inst_3:
// rs1==x27, rd==x28, 
// opcode: slli.uw ; op1:x27; dest:x28; op1val:0xdfffffffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x28, x27, -0x80000000, 0xdfffffffffffffff, 0x1f, x1, 24, x2)

inst_4:
// rs1==x28, rd==x27, 
// opcode: slli.uw ; op1:x28; dest:x27; op1val:0xefffffffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x27, x28, -0x80000000, 0xefffffffffffffff, 0x1f, x1, 32, x2)

inst_5:
// rs1==x25, rd==x26, 
// opcode: slli.uw ; op1:x25; dest:x26; op1val:0xf7ffffffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x26, x25, -0x80000000, 0xf7ffffffffffffff, 0x1f, x1, 40, x2)

inst_6:
// rs1==x26, rd==x25, 
// opcode: slli.uw ; op1:x26; dest:x25; op1val:0xfbffffffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x25, x26, -0x80000000, 0xfbffffffffffffff, 0x1f, x1, 48, x2)

inst_7:
// rs1==x23, rd==x24, 
// opcode: slli.uw ; op1:x23; dest:x24; op1val:0xfdffffffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x24, x23, -0x80000000, 0xfdffffffffffffff, 0x1f, x1, 56, x2)

inst_8:
// rs1==x24, rd==x23, 
// opcode: slli.uw ; op1:x24; dest:x23; op1val:0xfeffffffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x23, x24, -0x80000000, 0xfeffffffffffffff, 0x1f, x1, 64, x2)

inst_9:
// rs1==x21, rd==x22, 
// opcode: slli.uw ; op1:x21; dest:x22; op1val:0xff7fffffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x22, x21, -0x80000000, 0xff7fffffffffffff, 0x1f, x1, 72, x2)

inst_10:
// rs1==x22, rd==x21, 
// opcode: slli.uw ; op1:x22; dest:x21; op1val:0xffbfffffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x21, x22, -0x80000000, 0xffbfffffffffffff, 0x1f, x1, 80, x2)

inst_11:
// rs1==x19, rd==x20, 
// opcode: slli.uw ; op1:x19; dest:x20; op1val:0xffdfffffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x20, x19, -0x80000000, 0xffdfffffffffffff, 0x1f, x1, 88, x2)

inst_12:
// rs1==x20, rd==x19, 
// opcode: slli.uw ; op1:x20; dest:x19; op1val:0xffefffffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x19, x20, -0x80000000, 0xffefffffffffffff, 0x1f, x1, 96, x2)

inst_13:
// rs1==x17, rd==x18, 
// opcode: slli.uw ; op1:x17; dest:x18; op1val:0xfff7ffffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x18, x17, -0x80000000, 0xfff7ffffffffffff, 0x1f, x1, 104, x2)

inst_14:
// rs1==x18, rd==x17, 
// opcode: slli.uw ; op1:x18; dest:x17; op1val:0xfffbffffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x17, x18, -0x80000000, 0xfffbffffffffffff, 0x1f, x1, 112, x2)

inst_15:
// rs1==x15, rd==x16, 
// opcode: slli.uw ; op1:x15; dest:x16; op1val:0xfffdffffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x16, x15, -0x80000000, 0xfffdffffffffffff, 0x1f, x1, 120, x2)

inst_16:
// rs1==x16, rd==x15, 
// opcode: slli.uw ; op1:x16; dest:x15; op1val:0xfffeffffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x15, x16, -0x80000000, 0xfffeffffffffffff, 0x1f, x1, 128, x2)

inst_17:
// rs1==x13, rd==x14, 
// opcode: slli.uw ; op1:x13; dest:x14; op1val:0xffff7fffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x14, x13, -0x80000000, 0xffff7fffffffffff, 0x1f, x1, 136, x2)

inst_18:
// rs1==x14, rd==x13, 
// opcode: slli.uw ; op1:x14; dest:x13; op1val:0xffffbfffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x13, x14, -0x80000000, 0xffffbfffffffffff, 0x1f, x1, 144, x2)

inst_19:
// rs1==x11, rd==x12, 
// opcode: slli.uw ; op1:x11; dest:x12; op1val:0xffffdfffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x12, x11, -0x80000000, 0xffffdfffffffffff, 0x1f, x1, 152, x2)

inst_20:
// rs1==x12, rd==x11, 
// opcode: slli.uw ; op1:x12; dest:x11; op1val:0xffffefffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x11, x12, -0x80000000, 0xffffefffffffffff, 0x1f, x1, 160, x2)

inst_21:
// rs1==x9, rd==x10, 
// opcode: slli.uw ; op1:x9; dest:x10; op1val:0xfffff7ffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x10, x9, -0x80000000, 0xfffff7ffffffffff, 0x1f, x1, 168, x2)

inst_22:
// rs1==x10, rd==x9, 
// opcode: slli.uw ; op1:x10; dest:x9; op1val:0xfffffbffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x9, x10, -0x80000000, 0xfffffbffffffffff, 0x1f, x1, 176, x2)

inst_23:
// rs1==x7, rd==x8, 
// opcode: slli.uw ; op1:x7; dest:x8; op1val:0xfffffdffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x8, x7, -0x80000000, 0xfffffdffffffffff, 0x1f, x1, 184, x2)

inst_24:
// rs1==x8, rd==x7, 
// opcode: slli.uw ; op1:x8; dest:x7; op1val:0xfffffeffffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x7, x8, -0x80000000, 0xfffffeffffffffff, 0x1f, x1, 192, x2)

inst_25:
// rs1==x5, rd==x6, 
// opcode: slli.uw ; op1:x5; dest:x6; op1val:0xffffff7fffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x6, x5, -0x80000000, 0xffffff7fffffffff, 0x1f, x1, 200, x2)

inst_26:
// rs1==x6, rd==x5, 
// opcode: slli.uw ; op1:x6; dest:x5; op1val:0xffffffbfffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x5, x6, -0x80000000, 0xffffffbfffffffff, 0x1f, x1, 208, x7)

inst_27:
// rs1==x3, rd==x4, 
// opcode: slli.uw ; op1:x3; dest:x4; op1val:0xffffffdfffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x4, x3, -0x80000000, 0xffffffdfffffffff, 0x1f, x1, 216, x7)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_28:
// rs1==x4, rd==x3, 
// opcode: slli.uw ; op1:x4; dest:x3; op1val:0xffffffefffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x3, x4, -0x80000000, 0xffffffefffffffff, 0x1f, x5, 0, x7)

inst_29:
// rs1==x1, rd==x2, 
// opcode: slli.uw ; op1:x1; dest:x2; op1val:0xfffffff7ffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x2, x1, -0x80000000, 0xfffffff7ffffffff, 0x1f, x5, 8, x7)

inst_30:
// rs1==x2, rd==x1, 
// opcode: slli.uw ; op1:x2; dest:x1; op1val:0xfffffffbffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x1, x2, -0x80000000, 0xfffffffbffffffff, 0x1f, x5, 16, x7)

inst_31:
// rs1==x0, 
// opcode: slli.uw ; op1:x0; dest:x31; op1val:0x0;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x0, 0x0, 0x0, 0x1f, x5, 24, x7)

inst_32:
// rd==x0, 
// opcode: slli.uw ; op1:x31; dest:x0; op1val:0xfffffffeffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x0, x31, 0, 0xfffffffeffffffff, 0x1f, x5, 32, x7)

inst_33:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffff7fffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xffffffff7fffffff, 0x1f, x5, 40, x7)

inst_34:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffbfffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xffffffffbfffffff, 0x1f, x5, 48, x7)

inst_35:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffdfffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xffffffffdfffffff, 0x1f, x5, 56, x7)

inst_36:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffefffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xffffffffefffffff, 0x1f, x5, 64, x7)

inst_37:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffff7ffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xfffffffff7ffffff, 0x1f, x5, 72, x7)

inst_38:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffffbffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xfffffffffbffffff, 0x1f, x5, 80, x7)

inst_39:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffffdffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xfffffffffdffffff, 0x1f, x5, 88, x7)

inst_40:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffffeffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xfffffffffeffffff, 0x1f, x5, 96, x7)

inst_41:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffff7fffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xffffffffff7fffff, 0x1f, x5, 104, x7)

inst_42:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffbfffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xffffffffffbfffff, 0x1f, x5, 112, x7)

inst_43:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffdfffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xffffffffffdfffff, 0x1f, x5, 120, x7)

inst_44:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffefffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xffffffffffefffff, 0x1f, x5, 128, x7)

inst_45:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffffff7ffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xfffffffffff7ffff, 0x1f, x5, 136, x7)

inst_46:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffffffbffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xfffffffffffbffff, 0x1f, x5, 144, x7)

inst_47:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffffffdffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xfffffffffffdffff, 0x1f, x5, 152, x7)

inst_48:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffffffeffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xfffffffffffeffff, 0x1f, x5, 160, x7)

inst_49:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffff7fff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xffffffffffff7fff, 0x1f, x5, 168, x7)

inst_50:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffbfff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xffffffffffffbfff, 0x1f, x5, 176, x7)

inst_51:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffdfff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xffffffffffffdfff, 0x1f, x5, 184, x7)

inst_52:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffefff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xffffffffffffefff, 0x1f, x5, 192, x7)

inst_53:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffffffff7ff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xfffffffffffff7ff, 0x1f, x5, 200, x7)

inst_54:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffffffffbff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xfffffffffffffbff, 0x1f, x5, 208, x7)

inst_55:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffffffffdff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xfffffffffffffdff, 0x1f, x5, 216, x7)

inst_56:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffffffffeff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xfffffffffffffeff, 0x1f, x5, 224, x7)

inst_57:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffff7f;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xffffffffffffff7f, 0x1f, x5, 232, x7)

inst_58:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffffbf;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xffffffffffffffbf, 0x1f, x5, 240, x7)

inst_59:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffffdf;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xffffffffffffffdf, 0x1f, x5, 248, x7)

inst_60:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffffef;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xffffffffffffffef, 0x1f, x5, 256, x7)

inst_61:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffffffffff7;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xfffffffffffffff7, 0x1f, x5, 264, x7)

inst_62:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffffffffffb;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xfffffffffffffffb, 0x1f, x5, 272, x7)

inst_63:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffffffffffd;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xfffffffffffffffd, 0x1f, x5, 280, x7)

inst_64:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffffffffffe;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0xfffffffffffffffe, 0x1f, x5, 288, x7)

inst_65:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffffff;  immval:0xf
TEST_IMM_OP( slli.uw, x31, x30, -0x8000, 0xffffffffffffffff, 0xf, x5, 296, x7)

inst_66:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffffff;  immval:0x17
TEST_IMM_OP( slli.uw, x31, x30, -0x800000, 0xffffffffffffffff, 0x17, x5, 304, x7)

inst_67:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffffff;  immval:0x1b
TEST_IMM_OP( slli.uw, x31, x30, -0x8000000, 0xffffffffffffffff, 0x1b, x5, 312, x7)

inst_68:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffffff;  immval:0x1d
TEST_IMM_OP( slli.uw, x31, x30, -0x20000000, 0xffffffffffffffff, 0x1d, x5, 320, x7)

inst_69:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffffff;  immval:0x1e
TEST_IMM_OP( slli.uw, x31, x30, -0x40000000, 0xffffffffffffffff, 0x1e, x5, 328, x7)

inst_70:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x8000000000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x8000000000000000, 0x1f, x5, 336, x7)

inst_71:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x4000000000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x4000000000000000, 0x1f, x5, 344, x7)

inst_72:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x2000000000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x2000000000000000, 0x1f, x5, 352, x7)

inst_73:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x1000000000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x1000000000000000, 0x1f, x5, 360, x7)

inst_74:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x800000000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x800000000000000, 0x1f, x5, 368, x7)

inst_75:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x400000000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x400000000000000, 0x1f, x5, 376, x7)

inst_76:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x200000000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x200000000000000, 0x1f, x5, 384, x7)

inst_77:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x100000000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x100000000000000, 0x1f, x5, 392, x7)

inst_78:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x80000000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x80000000000000, 0x1f, x5, 400, x7)

inst_79:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x40000000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x40000000000000, 0x1f, x5, 408, x7)

inst_80:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x20000000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x20000000000000, 0x1f, x5, 416, x7)

inst_81:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x10000000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x10000000000000, 0x1f, x5, 424, x7)

inst_82:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x8000000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x8000000000000, 0x1f, x5, 432, x7)

inst_83:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x4000000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x4000000000000, 0x1f, x5, 440, x7)

inst_84:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x2000000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x2000000000000, 0x1f, x5, 448, x7)

inst_85:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x1000000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x1000000000000, 0x1f, x5, 456, x7)

inst_86:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x800000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x800000000000, 0x1f, x5, 464, x7)

inst_87:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x400000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x400000000000, 0x1f, x5, 472, x7)

inst_88:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x200000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x200000000000, 0x1f, x5, 480, x7)

inst_89:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x100000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x100000000000, 0x1f, x5, 488, x7)

inst_90:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x80000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x80000000000, 0x1f, x5, 496, x7)

inst_91:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x40000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x40000000000, 0x1f, x5, 504, x7)

inst_92:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x20000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x20000000000, 0x1f, x5, 512, x7)

inst_93:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x10000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x10000000000, 0x1f, x5, 520, x7)

inst_94:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x8000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x8000000000, 0x1f, x5, 528, x7)

inst_95:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x4000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x4000000000, 0x1f, x5, 536, x7)

inst_96:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x2000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x2000000000, 0x1f, x5, 544, x7)

inst_97:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x1000000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x1000000000, 0x1f, x5, 552, x7)

inst_98:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x800000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x800000000, 0x1f, x5, 560, x7)

inst_99:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x20;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x20, 0x1f, x5, 568, x7)

inst_100:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x10;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x10, 0x1f, x5, 576, x7)

inst_101:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x8;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x8, 0x1f, x5, 584, x7)

inst_102:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x4;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x4, 0x1f, x5, 592, x7)

inst_103:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x2;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x2, 0x1f, x5, 600, x7)

inst_104:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x1;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0x1, 0x1f, x5, 608, x7)

inst_105:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffffff;  immval:0x10
TEST_IMM_OP( slli.uw, x31, x30, -0x10000, 0xffffffffffffffff, 0x10, x5, 616, x7)

inst_106:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffffff;  immval:0x8
TEST_IMM_OP( slli.uw, x31, x30, -0x100, 0xffffffffffffffff, 0x8, x5, 624, x7)

inst_107:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffffff;  immval:0x4
TEST_IMM_OP( slli.uw, x31, x30, -0x10, 0xffffffffffffffff, 0x4, x5, 632, x7)

inst_108:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffffff;  immval:0x2
TEST_IMM_OP( slli.uw, x31, x30, -0x4, 0xffffffffffffffff, 0x2, x5, 640, x7)

inst_109:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffffff;  immval:0x1
TEST_IMM_OP( slli.uw, x31, x30, -0x2, 0xffffffffffffffff, 0x1, x5, 648, x7)

inst_110:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x0;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x0, 0x1f, x5, 656, x7)

inst_111:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x999999999999999a;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x999999999999999a, 0x1f, x5, 664, x7)

inst_112:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x6666666666666667;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0x6666666666666667, 0x1f, x5, 672, x7)

inst_113:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xcccccccccccccccd;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xcccccccccccccccd, 0x1f, x5, 680, x7)

inst_114:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x3333333333333334;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x3333333333333334, 0x1f, x5, 688, x7)

inst_115:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xaaaaaaaaaaaaaaab, 0x1f, x5, 696, x7)

inst_116:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x5555555555555556;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x5555555555555556, 0x1f, x5, 704, x7)

inst_117:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x9999999999999998;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x9999999999999998, 0x1f, x5, 712, x7)

inst_118:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x6666666666666665;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0x6666666666666665, 0x1f, x5, 720, x7)

inst_119:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xcccccccccccccccb;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xcccccccccccccccb, 0x1f, x5, 728, x7)

inst_120:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x3333333333333332;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x3333333333333332, 0x1f, x5, 736, x7)

inst_121:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xaaaaaaaaaaaaaaa9, 0x1f, x5, 744, x7)

inst_122:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x5555555555555554;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x5555555555555554, 0x1f, x5, 752, x7)

inst_123:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x9999999999999999;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0x9999999999999999, 0x1f, x5, 760, x7)

inst_124:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x6666666666666666;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x6666666666666666, 0x1f, x5, 768, x7)

inst_125:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xcccccccccccccccc;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0xcccccccccccccccc, 0x1f, x5, 776, x7)

inst_126:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x3333333333333333;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0x3333333333333333, 0x1f, x5, 784, x7)

inst_127:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0xaaaaaaaaaaaaaaaa, 0x1f, x5, 792, x7)

inst_128:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x5555555555555555;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0x5555555555555555, 0x1f, x5, 800, x7)

inst_129:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xffffffffffffffff;  immval:0xa
TEST_IMM_OP( slli.uw, x31, x30, -0x400, 0xffffffffffffffff, 0xa, x5, 808, x7)

inst_130:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x400000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x400000000, 0x1f, x5, 816, x7)

inst_131:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x200000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x200000000, 0x1f, x5, 824, x7)

inst_132:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x100000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x100000000, 0x1f, x5, 832, x7)

inst_133:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x80000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x80000000, 0x1f, x5, 840, x7)

inst_134:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x40000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x40000000, 0x1f, x5, 848, x7)

inst_135:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x20000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x20000000, 0x1f, x5, 856, x7)

inst_136:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x10000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x10000000, 0x1f, x5, 864, x7)

inst_137:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x8000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x8000000, 0x1f, x5, 872, x7)

inst_138:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x4000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x4000000, 0x1f, x5, 880, x7)

inst_139:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x2000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x2000000, 0x1f, x5, 888, x7)

inst_140:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x1000000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x1000000, 0x1f, x5, 896, x7)

inst_141:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x800000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x800000, 0x1f, x5, 904, x7)

inst_142:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x400000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x400000, 0x1f, x5, 912, x7)

inst_143:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x200000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x200000, 0x1f, x5, 920, x7)

inst_144:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x100000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x100000, 0x1f, x5, 928, x7)

inst_145:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x80000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x80000, 0x1f, x5, 936, x7)

inst_146:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x40000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x40000, 0x1f, x5, 944, x7)

inst_147:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x20000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x20000, 0x1f, x5, 952, x7)

inst_148:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x10000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x10000, 0x1f, x5, 960, x7)

inst_149:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x8000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x8000, 0x1f, x5, 968, x7)

inst_150:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x4000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x4000, 0x1f, x5, 976, x7)

inst_151:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x2000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x2000, 0x1f, x5, 984, x7)

inst_152:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x1000;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x1000, 0x1f, x5, 992, x7)

inst_153:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x800;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x800, 0x1f, x5, 1000, x7)

inst_154:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x400;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x400, 0x1f, x5, 1008, x7)

inst_155:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x200;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x200, 0x1f, x5, 1016, x7)

inst_156:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x100;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x100, 0x1f, x5, 1024, x7)

inst_157:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x80;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x80, 0x1f, x5, 1032, x7)

inst_158:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0x40;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, 0x0, 0x40, 0x1f, x5, 1040, x7)

inst_159:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffdffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xfffffffdffffffff, 0x1f, x5, 1048, x7)

inst_160:
// 
// opcode: slli.uw ; op1:x30; dest:x31; op1val:0xfffffffeffffffff;  immval:0x1f
TEST_IMM_OP( slli.uw, x31, x30, -0x80000000, 0xfffffffeffffffff, 0x1f, x5, 1056, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 133*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
