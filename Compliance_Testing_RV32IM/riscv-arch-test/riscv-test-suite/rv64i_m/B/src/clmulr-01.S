
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Sun Aug  7 17:10:46 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/anku/work2/bmanip/64/dataset.yaml \
//                  --cgf /home/anku/work2/bmanip/64/rv64ib.yaml \
 \
//                  -- xlen 64  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the clmulr instruction of the RISC-V RV64Zbc extension for the clmulr covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IZbc")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*Zbc.*);def TEST_CASE_1=True;",clmulr)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1, rs1==x30, rs2==x31, rd==x31, 
// opcode: clmulr ; op1:x30; op2:x31; dest:x31; op1val:0x0;  op2val:0x0
TEST_RR_OP(clmulr, x31, x30, x31, 0x0000000000000000, 0x0, 0x0, x1, 0, x2)

inst_1:
// rs1 == rd != rs2, rs1==x29, rs2==x30, rd==x29, 
// opcode: clmulr ; op1:x29; op2:x30; dest:x29; op1val:0xfffffffffffffbff;  op2val:0x7fffffffffffffff
TEST_RR_OP(clmulr, x29, x29, x30, 0x0000000000000000, 0xfffffffffffffbff, 0x7fffffffffffffff, x1, 8, x2)

inst_2:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x29, rd==x30, 
// opcode: clmulr ; op1:x31; op2:x29; dest:x30; op1val:0xfffffffffffffbff;  op2val:0xbfffffffffffffff
TEST_RR_OP(clmulr, x30, x31, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xbfffffffffffffff, x1, 16, x2)

inst_3:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, 
// opcode: clmulr ; op1:x28; op2:x28; dest:x28; op1val:0xfffffffffffffbff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x28, x28, x28, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffffffffbff, x1, 24, x2)

inst_4:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x27, 
// opcode: clmulr ; op1:x26; op2:x26; dest:x27; op1val:0xfffffffffffffbff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x27, x26, x26, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffffffffbff, x1, 32, x2)

inst_5:
// rs1==x27, rs2==x25, rd==x26, 
// opcode: clmulr ; op1:x27; op2:x25; dest:x26; op1val:0xfffffffffffffbff;  op2val:0xf7ffffffffffffff
TEST_RR_OP(clmulr, x26, x27, x25, 0x0000000000000000, 0xfffffffffffffbff, 0xf7ffffffffffffff, x1, 40, x2)

inst_6:
// rs1==x24, rs2==x27, rd==x25, 
// opcode: clmulr ; op1:x24; op2:x27; dest:x25; op1val:0xfffffffffffffbff;  op2val:0xfbffffffffffffff
TEST_RR_OP(clmulr, x25, x24, x27, 0x0000000000000000, 0xfffffffffffffbff, 0xfbffffffffffffff, x1, 48, x2)

inst_7:
// rs1==x25, rs2==x23, rd==x24, 
// opcode: clmulr ; op1:x25; op2:x23; dest:x24; op1val:0xfffffffffffffbff;  op2val:0xfdffffffffffffff
TEST_RR_OP(clmulr, x24, x25, x23, 0x0000000000000000, 0xfffffffffffffbff, 0xfdffffffffffffff, x1, 56, x2)

inst_8:
// rs1==x22, rs2==x24, rd==x23, 
// opcode: clmulr ; op1:x22; op2:x24; dest:x23; op1val:0xfffffffffffffbff;  op2val:0xfeffffffffffffff
TEST_RR_OP(clmulr, x23, x22, x24, 0x0000000000000000, 0xfffffffffffffbff, 0xfeffffffffffffff, x1, 64, x2)

inst_9:
// rs1==x23, rs2==x21, rd==x22, 
// opcode: clmulr ; op1:x23; op2:x21; dest:x22; op1val:0xfffffffffffffbff;  op2val:0xff7fffffffffffff
TEST_RR_OP(clmulr, x22, x23, x21, 0x0000000000000000, 0xfffffffffffffbff, 0xff7fffffffffffff, x1, 72, x2)

inst_10:
// rs1==x20, rs2==x22, rd==x21, 
// opcode: clmulr ; op1:x20; op2:x22; dest:x21; op1val:0xfffffffffffffbff;  op2val:0xffbfffffffffffff
TEST_RR_OP(clmulr, x21, x20, x22, 0x0000000000000000, 0xfffffffffffffbff, 0xffbfffffffffffff, x1, 80, x2)

inst_11:
// rs1==x21, rs2==x19, rd==x20, 
// opcode: clmulr ; op1:x21; op2:x19; dest:x20; op1val:0xfffffffffffffbff;  op2val:0xffdfffffffffffff
TEST_RR_OP(clmulr, x20, x21, x19, 0x0000000000000000, 0xfffffffffffffbff, 0xffdfffffffffffff, x1, 88, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19, 
// opcode: clmulr ; op1:x18; op2:x20; dest:x19; op1val:0xfffffffffffffbff;  op2val:0xffefffffffffffff
TEST_RR_OP(clmulr, x19, x18, x20, 0x0000000000000000, 0xfffffffffffffbff, 0xffefffffffffffff, x1, 96, x2)

inst_13:
// rs1==x19, rs2==x17, rd==x18, 
// opcode: clmulr ; op1:x19; op2:x17; dest:x18; op1val:0xfffffffffffffbff;  op2val:0xfff7ffffffffffff
TEST_RR_OP(clmulr, x18, x19, x17, 0x0000000000000000, 0xfffffffffffffbff, 0xfff7ffffffffffff, x1, 104, x2)

inst_14:
// rs1==x16, rs2==x18, rd==x17, 
// opcode: clmulr ; op1:x16; op2:x18; dest:x17; op1val:0xfffffffffffffbff;  op2val:0xfffbffffffffffff
TEST_RR_OP(clmulr, x17, x16, x18, 0x0000000000000000, 0xfffffffffffffbff, 0xfffbffffffffffff, x1, 112, x2)

inst_15:
// rs1==x17, rs2==x15, rd==x16, 
// opcode: clmulr ; op1:x17; op2:x15; dest:x16; op1val:0xfffffffffffffbff;  op2val:0xfffdffffffffffff
TEST_RR_OP(clmulr, x16, x17, x15, 0x0000000000000000, 0xfffffffffffffbff, 0xfffdffffffffffff, x1, 120, x2)

inst_16:
// rs1==x14, rs2==x16, rd==x15, 
// opcode: clmulr ; op1:x14; op2:x16; dest:x15; op1val:0xfffffffffffffbff;  op2val:0xfffeffffffffffff
TEST_RR_OP(clmulr, x15, x14, x16, 0x0000000000000000, 0xfffffffffffffbff, 0xfffeffffffffffff, x1, 128, x2)

inst_17:
// rs1==x15, rs2==x13, rd==x14, 
// opcode: clmulr ; op1:x15; op2:x13; dest:x14; op1val:0xfffffffffffffbff;  op2val:0xffff7fffffffffff
TEST_RR_OP(clmulr, x14, x15, x13, 0x0000000000000000, 0xfffffffffffffbff, 0xffff7fffffffffff, x1, 136, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13, 
// opcode: clmulr ; op1:x12; op2:x14; dest:x13; op1val:0xfffffffffffffbff;  op2val:0xffffbfffffffffff
TEST_RR_OP(clmulr, x13, x12, x14, 0x0000000000000000, 0xfffffffffffffbff, 0xffffbfffffffffff, x1, 144, x2)

inst_19:
// rs1==x13, rs2==x11, rd==x12, 
// opcode: clmulr ; op1:x13; op2:x11; dest:x12; op1val:0xfffffffffffffbff;  op2val:0xffffdfffffffffff
TEST_RR_OP(clmulr, x12, x13, x11, 0x0000000000000000, 0xfffffffffffffbff, 0xffffdfffffffffff, x1, 152, x2)

inst_20:
// rs1==x10, rs2==x12, rd==x11, 
// opcode: clmulr ; op1:x10; op2:x12; dest:x11; op1val:0xfffffffffffffbff;  op2val:0xffffefffffffffff
TEST_RR_OP(clmulr, x11, x10, x12, 0x0000000000000000, 0xfffffffffffffbff, 0xffffefffffffffff, x1, 160, x2)

inst_21:
// rs1==x11, rs2==x9, rd==x10, 
// opcode: clmulr ; op1:x11; op2:x9; dest:x10; op1val:0xfffffffffffffbff;  op2val:0xfffff7ffffffffff
TEST_RR_OP(clmulr, x10, x11, x9, 0x0000000000000000, 0xfffffffffffffbff, 0xfffff7ffffffffff, x1, 168, x2)

inst_22:
// rs1==x8, rs2==x10, rd==x9, 
// opcode: clmulr ; op1:x8; op2:x10; dest:x9; op1val:0xfffffffffffffbff;  op2val:0xfffffbffffffffff
TEST_RR_OP(clmulr, x9, x8, x10, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffbffffffffff, x1, 176, x2)

inst_23:
// rs1==x9, rs2==x7, rd==x8, 
// opcode: clmulr ; op1:x9; op2:x7; dest:x8; op1val:0xfffffffffffffbff;  op2val:0xfffffdffffffffff
TEST_RR_OP(clmulr, x8, x9, x7, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffdffffffffff, x1, 184, x2)

inst_24:
// rs1==x6, rs2==x8, rd==x7, 
// opcode: clmulr ; op1:x6; op2:x8; dest:x7; op1val:0xfffffffffffffbff;  op2val:0xfffffeffffffffff
TEST_RR_OP(clmulr, x7, x6, x8, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffeffffffffff, x1, 192, x2)

inst_25:
// rs1==x7, rs2==x5, rd==x6, 
// opcode: clmulr ; op1:x7; op2:x5; dest:x6; op1val:0xfffffffffffffbff;  op2val:0xffffff7fffffffff
TEST_RR_OP(clmulr, x6, x7, x5, 0x0000000000000000, 0xfffffffffffffbff, 0xffffff7fffffffff, x1, 200, x8)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_26:
// rs1==x4, rs2==x6, rd==x5, 
// opcode: clmulr ; op1:x4; op2:x6; dest:x5; op1val:0xfffffffffffffbff;  op2val:0xffffffbfffffffff
TEST_RR_OP(clmulr, x5, x4, x6, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffbfffffffff, x7, 0, x8)

inst_27:
// rs1==x5, rs2==x3, rd==x4, 
// opcode: clmulr ; op1:x5; op2:x3; dest:x4; op1val:0xfffffffffffffbff;  op2val:0xffffffdfffffffff
TEST_RR_OP(clmulr, x4, x5, x3, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffdfffffffff, x7, 8, x8)

inst_28:
// rs1==x2, rs2==x4, rd==x3, 
// opcode: clmulr ; op1:x2; op2:x4; dest:x3; op1val:0xfffffffffffffbff;  op2val:0xffffffefffffffff
TEST_RR_OP(clmulr, x3, x2, x4, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffefffffffff, x7, 16, x8)

inst_29:
// rs1==x3, rs2==x1, rd==x2, 
// opcode: clmulr ; op1:x3; op2:x1; dest:x2; op1val:0xfffffffffffffbff;  op2val:0xfffffff7ffffffff
TEST_RR_OP(clmulr, x2, x3, x1, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffff7ffffffff, x7, 24, x8)

inst_30:
// rs1==x0, rs2==x2, rd==x1, 
// opcode: clmulr ; op1:x0; op2:x2; dest:x1; op1val:0x0;  op2val:0xfffffffbffffffff
TEST_RR_OP(clmulr, x1, x0, x2, 0x0000000000000000, 0x0, 0xfffffffbffffffff, x7, 32, x8)

inst_31:
// rs1==x1, 
// opcode: clmulr ; op1:x1; op2:x30; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffdffffffff
TEST_RR_OP(clmulr, x31, x1, x30, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffdffffffff, x7, 40, x8)

inst_32:
// rs2==x0, 
// opcode: clmulr ; op1:x30; op2:x0; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x0
TEST_RR_OP(clmulr, x31, x30, x0, 0x0000000000000000, 0xfffffffffffffbff, 0x0, x7, 48, x8)

inst_33:
// rd==x0, 
// opcode: clmulr ; op1:x31; op2:x30; dest:x0; op1val:0xfffffffffffffbff;  op2val:0xffffffff7fffffff
TEST_RR_OP(clmulr, x0, x31, x30, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffff7fffffff, x7, 56, x8)

inst_34:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xffffffffbfffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffffbfffffff, x7, 64, x8)

inst_35:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xffffffffdfffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffffdfffffff, x7, 72, x8)

inst_36:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xffffffffefffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffffefffffff, x7, 80, x8)

inst_37:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffff7ffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffff7ffffff, x7, 88, x8)

inst_38:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffffbffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffffbffffff, x7, 96, x8)

inst_39:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffffdffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffffdffffff, x7, 104, x8)

inst_40:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffffeffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffffeffffff, x7, 112, x8)

inst_41:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xffffffffff7fffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffffff7fffff, x7, 120, x8)

inst_42:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xffffffffffbfffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffffffbfffff, x7, 128, x8)

inst_43:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xffffffffffdfffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffffffdfffff, x7, 136, x8)

inst_44:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xffffffffffefffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffffffefffff, x7, 144, x8)

inst_45:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffffff7ffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffffff7ffff, x7, 152, x8)

inst_46:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffffffbffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffffffbffff, x7, 160, x8)

inst_47:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffffffdffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffffffdffff, x7, 168, x8)

inst_48:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffffffeffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffffffeffff, x7, 176, x8)

inst_49:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xffffffffffff7fff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffffffff7fff, x7, 184, x8)

inst_50:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xffffffffffffbfff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffffffffbfff, x7, 192, x8)

inst_51:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xffffffffffffdfff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffffffffdfff, x7, 200, x8)

inst_52:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xffffffffffffefff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffffffffefff, x7, 208, x8)

inst_53:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffffffff7ff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffffffff7ff, x7, 216, x8)

inst_54:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffffffffbff, x7, 224, x8)

inst_55:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffffffffdff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffffffffdff, x7, 232, x8)

inst_56:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffffffffeff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffffffffeff, x7, 240, x8)

inst_57:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xffffffffffffff7f
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffffffffff7f, x7, 248, x8)

inst_58:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xffffffffffffffbf
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffffffffffbf, x7, 256, x8)

inst_59:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xffffffffffffffdf
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffffffffffdf, x7, 264, x8)

inst_60:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xffffffffffffffef
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffffffffffef, x7, 272, x8)

inst_61:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffffffffff7
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffffffffff7, x7, 280, x8)

inst_62:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffffffffffb
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffffffffffb, x7, 288, x8)

inst_63:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffffffffffd
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffffffffffd, x7, 296, x8)

inst_64:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffffffffffe
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffffffffffe, x7, 304, x8)

inst_65:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffffff, 0xfffffffffffffbff, x7, 312, x8)

inst_66:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffffff, 0xfffffffffffffbff, x7, 320, x8)

inst_67:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffffff, 0xfffffffffffffbff, x7, 328, x8)

inst_68:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xefffffffffffffff, 0xfffffffffffffbff, x7, 336, x8)

inst_69:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xf7ffffffffffffff, 0xfffffffffffffbff, x7, 344, x8)

inst_70:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfbffffffffffffff, 0xfffffffffffffbff, x7, 352, x8)

inst_71:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfdffffffffffffff, 0xfffffffffffffbff, x7, 360, x8)

inst_72:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfeffffffffffffff, 0xfffffffffffffbff, x7, 368, x8)

inst_73:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xff7fffffffffffff, 0xfffffffffffffbff, x7, 376, x8)

inst_74:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffbfffffffffffff, 0xfffffffffffffbff, x7, 384, x8)

inst_75:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffdfffffffffffff, 0xfffffffffffffbff, x7, 392, x8)

inst_76:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffefffffffffffff, 0xfffffffffffffbff, x7, 400, x8)

inst_77:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfff7ffffffffffff, 0xfffffffffffffbff, x7, 408, x8)

inst_78:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffbffffffffffff, 0xfffffffffffffbff, x7, 416, x8)

inst_79:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffdffffffffffff, 0xfffffffffffffbff, x7, 424, x8)

inst_80:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffeffffffffffff, 0xfffffffffffffbff, x7, 432, x8)

inst_81:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffff7fffffffffff, 0xfffffffffffffbff, x7, 440, x8)

inst_82:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffbfffffffffff, 0xfffffffffffffbff, x7, 448, x8)

inst_83:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffdfffffffffff, 0xfffffffffffffbff, x7, 456, x8)

inst_84:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffefffffffffff, 0xfffffffffffffbff, x7, 464, x8)

inst_85:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffff7ffffffffff, 0xfffffffffffffbff, x7, 472, x8)

inst_86:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffbffffffffff, 0xfffffffffffffbff, x7, 480, x8)

inst_87:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffdffffffffff, 0xfffffffffffffbff, x7, 488, x8)

inst_88:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffeffffffffff, 0xfffffffffffffbff, x7, 496, x8)

inst_89:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffff7fffffffff, 0xfffffffffffffbff, x7, 504, x8)

inst_90:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffbfffffffff, 0xfffffffffffffbff, x7, 512, x8)

inst_91:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffdfffffffff, 0xfffffffffffffbff, x7, 520, x8)

inst_92:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffefffffffff, 0xfffffffffffffbff, x7, 528, x8)

inst_93:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffff7ffffffff, 0xfffffffffffffbff, x7, 536, x8)

inst_94:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffbffffffff, 0xfffffffffffffbff, x7, 544, x8)

inst_95:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffdffffffff, 0xfffffffffffffbff, x7, 552, x8)

inst_96:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffeffffffff, 0xfffffffffffffbff, x7, 560, x8)

inst_97:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff7fffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffff7fffffff, 0xfffffffffffffbff, x7, 568, x8)

inst_98:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffbfffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffffbfffffff, 0xfffffffffffffbff, x7, 576, x8)

inst_99:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffdfffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffffdfffffff, 0xfffffffffffffbff, x7, 584, x8)

inst_100:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffefffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffffefffffff, 0xfffffffffffffbff, x7, 592, x8)

inst_101:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffff7ffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffff7ffffff, 0xfffffffffffffbff, x7, 600, x8)

inst_102:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffbffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffbffffff, 0xfffffffffffffbff, x7, 608, x8)

inst_103:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffdffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffdffffff, 0xfffffffffffffbff, x7, 616, x8)

inst_104:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffeffffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffeffffff, 0xfffffffffffffbff, x7, 624, x8)

inst_105:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffff7fffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffffff7fffff, 0xfffffffffffffbff, x7, 632, x8)

inst_106:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffbfffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffffffbfffff, 0xfffffffffffffbff, x7, 640, x8)

inst_107:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffdfffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffffffdfffff, 0xfffffffffffffbff, x7, 648, x8)

inst_108:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffefffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffffffefffff, 0xfffffffffffffbff, x7, 656, x8)

inst_109:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffff7ffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffff7ffff, 0xfffffffffffffbff, x7, 664, x8)

inst_110:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffbffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffbffff, 0xfffffffffffffbff, x7, 672, x8)

inst_111:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffdffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffdffff, 0xfffffffffffffbff, x7, 680, x8)

inst_112:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffeffff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffeffff, 0xfffffffffffffbff, x7, 688, x8)

inst_113:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffff7fff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffffffff7fff, 0xfffffffffffffbff, x7, 696, x8)

inst_114:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffbfff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffffffffbfff, 0xfffffffffffffbff, x7, 704, x8)

inst_115:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffdfff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffffffffdfff, 0xfffffffffffffbff, x7, 712, x8)

inst_116:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffefff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffffffffefff, 0xfffffffffffffbff, x7, 720, x8)

inst_117:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffff7ff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffff7ff, 0xfffffffffffffbff, x7, 728, x8)

inst_118:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffdff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffdff, 0xfffffffffffffbff, x7, 736, x8)

inst_119:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffeff;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffeff, 0xfffffffffffffbff, x7, 744, x8)

inst_120:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffff7f;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffffffffff7f, 0xfffffffffffffbff, x7, 752, x8)

inst_121:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffbf;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffbf, 0xfffffffffffffbff, x7, 760, x8)

inst_122:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffdf;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffdf, 0xfffffffffffffbff, x7, 768, x8)

inst_123:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffef;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffef, 0xfffffffffffffbff, x7, 776, x8)

inst_124:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffff7;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffff7, 0xfffffffffffffbff, x7, 784, x8)

inst_125:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffb;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffffb, 0xfffffffffffffbff, x7, 792, x8)

inst_126:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffd;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffffd, 0xfffffffffffffbff, x7, 800, x8)

inst_127:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffe;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffffe, 0xfffffffffffffbff, x7, 808, x8)

inst_128:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x8000000000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x8000000000000000, x7, 816, x8)

inst_129:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x4000000000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x4000000000000000, x7, 824, x8)

inst_130:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x2000000000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x2000000000000000, x7, 832, x8)

inst_131:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x1000000000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x1000000000000000, x7, 840, x8)

inst_132:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x800000000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x800000000000000, x7, 848, x8)

inst_133:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x400000000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x400000000000000, x7, 856, x8)

inst_134:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x200000000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x200000000000000, x7, 864, x8)

inst_135:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x100000000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x100000000000000, x7, 872, x8)

inst_136:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x80000000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x80000000000000, x7, 880, x8)

inst_137:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x40000000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x40000000000000, x7, 888, x8)

inst_138:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x20000000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x20000000000000, x7, 896, x8)

inst_139:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x10000000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x10000000000000, x7, 904, x8)

inst_140:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x8000000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x8000000000000, x7, 912, x8)

inst_141:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x4000000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x4000000000000, x7, 920, x8)

inst_142:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x2000000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x2000000000000, x7, 928, x8)

inst_143:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x1000000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x1000000000000, x7, 936, x8)

inst_144:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x800000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x800000000000, x7, 944, x8)

inst_145:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x400000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x400000000000, x7, 952, x8)

inst_146:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x200000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x200000000000, x7, 960, x8)

inst_147:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x100000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x100000000000, x7, 968, x8)

inst_148:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x80000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x80000000000, x7, 976, x8)

inst_149:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x40000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x40000000000, x7, 984, x8)

inst_150:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x20000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x20000000000, x7, 992, x8)

inst_151:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x10000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x10000000000, x7, 1000, x8)

inst_152:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x8000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x8000000000, x7, 1008, x8)

inst_153:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x4000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x4000000000, x7, 1016, x8)

inst_154:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x2000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x2000000000, x7, 1024, x8)

inst_155:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x1000000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x1000000000, x7, 1032, x8)

inst_156:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x800000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x800000000, x7, 1040, x8)

inst_157:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x400000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x400000000, x7, 1048, x8)

inst_158:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x1, 0xfffffffffffffbff, x7, 1056, x8)

inst_159:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x6af29145404fd8ed;  op2val:0x990e75eafff569c2
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x6af29145404fd8ed, 0x990e75eafff569c2, x7, 1064, x8)

inst_160:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x6d23c0488a6019c1;  op2val:0x860bdaad7447a088
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x6d23c0488a6019c1, 0x860bdaad7447a088, x7, 1072, x8)

inst_161:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x1f7d946f17168ab3;  op2val:0x66eae3d9bbb4f560
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x1f7d946f17168ab3, 0x66eae3d9bbb4f560, x7, 1080, x8)

inst_162:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xef1d54db32b81f27;  op2val:0x1826a804284fe16c
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xef1d54db32b81f27, 0x1826a804284fe16c, x7, 1088, x8)

inst_163:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xb694de26ad9e5431;  op2val:0x293f9f6071fad878
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xb694de26ad9e5431, 0x293f9f6071fad878, x7, 1096, x8)

inst_164:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x987daa20b858e304;  op2val:0x1aa1beebefb902cb
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x987daa20b858e304, 0x1aa1beebefb902cb, x7, 1104, x8)

inst_165:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x79bb7c341d3110bc;  op2val:0x8678f5e3d272e229
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x79bb7c341d3110bc, 0x8678f5e3d272e229, x7, 1112, x8)

inst_166:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xe2eaf4a09869be8c;  op2val:0x5b730cad91766f62
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xe2eaf4a09869be8c, 0x5b730cad91766f62, x7, 1120, x8)

inst_167:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xc0fe15dd0df9564b;  op2val:0xb22bbf7eb4c858fb
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xc0fe15dd0df9564b, 0xb22bbf7eb4c858fb, x7, 1128, x8)

inst_168:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x4113ee60952acffe;  op2val:0x53a66ed1dc80d916
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x4113ee60952acffe, 0x53a66ed1dc80d916, x7, 1136, x8)

inst_169:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x40a5ff526f38a9c7;  op2val:0xb6f9706fb4f741aa
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x40a5ff526f38a9c7, 0xb6f9706fb4f741aa, x7, 1144, x8)

inst_170:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x9bedfe390d6ddd9d;  op2val:0xd05668ae0fdb82bc
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x9bedfe390d6ddd9d, 0xd05668ae0fdb82bc, x7, 1152, x8)

inst_171:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xd75739f82ac177c6;  op2val:0xaa6bb2bde9ed477d
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xd75739f82ac177c6, 0xaa6bb2bde9ed477d, x7, 1160, x8)

inst_172:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x9a4e9ef10171f4df;  op2val:0x299c3bcf90efb625
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x9a4e9ef10171f4df, 0x299c3bcf90efb625, x7, 1168, x8)

inst_173:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xd169a3f8cad5e297;  op2val:0x1fc493caa371db42
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xd169a3f8cad5e297, 0x1fc493caa371db42, x7, 1176, x8)

inst_174:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xd5b9fe5cf69bdcf3;  op2val:0xf4c30307672f666d
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xd5b9fe5cf69bdcf3, 0xf4c30307672f666d, x7, 1184, x8)

inst_175:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xe4921bf73047c198;  op2val:0xa0569d765ebc64cb
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xe4921bf73047c198, 0xa0569d765ebc64cb, x7, 1192, x8)

inst_176:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfcc1b543c49cd65b;  op2val:0x2daf9ac7f5faf207
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfcc1b543c49cd65b, 0x2daf9ac7f5faf207, x7, 1200, x8)

inst_177:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x436f40f274b8de87;  op2val:0x3459294ef273b44c
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x436f40f274b8de87, 0x3459294ef273b44c, x7, 1208, x8)

inst_178:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x75a3adb3254a9493;  op2val:0xc5521660f3a3c571
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x75a3adb3254a9493, 0xc5521660f3a3c571, x7, 1216, x8)

inst_179:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xaaaaaaaaaaaaaaaa, x7, 1224, x8)

inst_180:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x5555555555555555
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x5555555555555555, x7, 1232, x8)

inst_181:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xaaaaaaaaaaaaaaaa, 0xfffffffffffffbff, x7, 1240, x8)

inst_182:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0xfffffffffffffbff, x7, 1248, x8)

inst_183:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x1000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x0, 0x1000, x7, 1256, x8)

inst_184:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x1
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x0, 0x1, x7, 1264, x8)

inst_185:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x0
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x1, 0x0, x7, 1272, x8)

inst_186:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x1000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x1, 0x1000, x7, 1280, x8)

inst_187:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x1
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x1, 0x1, x7, 1288, x8)

inst_188:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x200000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x200000000, x7, 1296, x8)

inst_189:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x100000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x100000000, x7, 1304, x8)

inst_190:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x80000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x80000000, x7, 1312, x8)

inst_191:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x40000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x40000000, x7, 1320, x8)

inst_192:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x20000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x20000000, x7, 1328, x8)

inst_193:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x10000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x10000000, x7, 1336, x8)

inst_194:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x8000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x8000000, x7, 1344, x8)

inst_195:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x4000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x4000000, x7, 1352, x8)

inst_196:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x2000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x2000000, x7, 1360, x8)

inst_197:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x1000000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x1000000, x7, 1368, x8)

inst_198:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x800000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x800000, x7, 1376, x8)

inst_199:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x400000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x400000, x7, 1384, x8)

inst_200:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x200000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x200000, x7, 1392, x8)

inst_201:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x100000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x100000, x7, 1400, x8)

inst_202:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x80000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x80000, x7, 1408, x8)

inst_203:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x40000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x40000, x7, 1416, x8)

inst_204:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x20000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x20000, x7, 1424, x8)

inst_205:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x10000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x10000, x7, 1432, x8)

inst_206:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x8000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x8000, x7, 1440, x8)

inst_207:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x4000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x4000, x7, 1448, x8)

inst_208:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x2000
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x2000, x7, 1456, x8)

inst_209:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x800
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x800, x7, 1464, x8)

inst_210:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x400
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x400, x7, 1472, x8)

inst_211:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x200
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x200, x7, 1480, x8)

inst_212:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x100
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x100, x7, 1488, x8)

inst_213:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x80
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x80, x7, 1496, x8)

inst_214:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x40
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x40, x7, 1504, x8)

inst_215:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x20
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x20, x7, 1512, x8)

inst_216:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x10
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x10, x7, 1520, x8)

inst_217:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x8
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x8, x7, 1528, x8)

inst_218:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x4
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x4, x7, 1536, x8)

inst_219:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x2
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0x2, x7, 1544, x8)

inst_220:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x8000000000000000, 0xfffffffffffffbff, x7, 1552, x8)

inst_221:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x4000000000000000, 0xfffffffffffffbff, x7, 1560, x8)

inst_222:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x2000000000000000, 0xfffffffffffffbff, x7, 1568, x8)

inst_223:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x1000000000000000, 0xfffffffffffffbff, x7, 1576, x8)

inst_224:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x800000000000000, 0xfffffffffffffbff, x7, 1584, x8)

inst_225:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x400000000000000, 0xfffffffffffffbff, x7, 1592, x8)

inst_226:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x200000000000000, 0xfffffffffffffbff, x7, 1600, x8)

inst_227:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x100000000000000, 0xfffffffffffffbff, x7, 1608, x8)

inst_228:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x80000000000000, 0xfffffffffffffbff, x7, 1616, x8)

inst_229:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x40000000000000, 0xfffffffffffffbff, x7, 1624, x8)

inst_230:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x20000000000000, 0xfffffffffffffbff, x7, 1632, x8)

inst_231:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x10000000000000, 0xfffffffffffffbff, x7, 1640, x8)

inst_232:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x8000000000000, 0xfffffffffffffbff, x7, 1648, x8)

inst_233:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x4000000000000, 0xfffffffffffffbff, x7, 1656, x8)

inst_234:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x2000000000000, 0xfffffffffffffbff, x7, 1664, x8)

inst_235:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x1000000000000, 0xfffffffffffffbff, x7, 1672, x8)

inst_236:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x800000000000, 0xfffffffffffffbff, x7, 1680, x8)

inst_237:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x400000000000, 0xfffffffffffffbff, x7, 1688, x8)

inst_238:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x200000000000, 0xfffffffffffffbff, x7, 1696, x8)

inst_239:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x100000000000, 0xfffffffffffffbff, x7, 1704, x8)

inst_240:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x80000000000, 0xfffffffffffffbff, x7, 1712, x8)

inst_241:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x40000000000, 0xfffffffffffffbff, x7, 1720, x8)

inst_242:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x20000000000, 0xfffffffffffffbff, x7, 1728, x8)

inst_243:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x10000000000, 0xfffffffffffffbff, x7, 1736, x8)

inst_244:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x8000000000, 0xfffffffffffffbff, x7, 1744, x8)

inst_245:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x4000000000, 0xfffffffffffffbff, x7, 1752, x8)

inst_246:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x2000000000, 0xfffffffffffffbff, x7, 1760, x8)

inst_247:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x1000000000, 0xfffffffffffffbff, x7, 1768, x8)

inst_248:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x800000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x800000000, 0xfffffffffffffbff, x7, 1776, x8)

inst_249:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x400000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x400000000, 0xfffffffffffffbff, x7, 1784, x8)

inst_250:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x200000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x200000000, 0xfffffffffffffbff, x7, 1792, x8)

inst_251:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x100000000, 0xfffffffffffffbff, x7, 1800, x8)

inst_252:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x80000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x80000000, 0xfffffffffffffbff, x7, 1808, x8)

inst_253:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x40000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x40000000, 0xfffffffffffffbff, x7, 1816, x8)

inst_254:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x20000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x20000000, 0xfffffffffffffbff, x7, 1824, x8)

inst_255:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x10000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x10000000, 0xfffffffffffffbff, x7, 1832, x8)

inst_256:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x8000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x8000000, 0xfffffffffffffbff, x7, 1840, x8)

inst_257:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x4000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x4000000, 0xfffffffffffffbff, x7, 1848, x8)

inst_258:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x2000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x2000000, 0xfffffffffffffbff, x7, 1856, x8)

inst_259:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x1000000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x1000000, 0xfffffffffffffbff, x7, 1864, x8)

inst_260:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x800000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x800000, 0xfffffffffffffbff, x7, 1872, x8)

inst_261:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x400000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x400000, 0xfffffffffffffbff, x7, 1880, x8)

inst_262:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x200000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x200000, 0xfffffffffffffbff, x7, 1888, x8)

inst_263:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x100000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x100000, 0xfffffffffffffbff, x7, 1896, x8)

inst_264:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x80000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x80000, 0xfffffffffffffbff, x7, 1904, x8)

inst_265:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x40000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x40000, 0xfffffffffffffbff, x7, 1912, x8)

inst_266:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x20000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x20000, 0xfffffffffffffbff, x7, 1920, x8)

inst_267:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x10000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x10000, 0xfffffffffffffbff, x7, 1928, x8)

inst_268:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x8000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x8000, 0xfffffffffffffbff, x7, 1936, x8)

inst_269:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x4000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x4000, 0xfffffffffffffbff, x7, 1944, x8)

inst_270:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x2000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x2000, 0xfffffffffffffbff, x7, 1952, x8)

inst_271:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x1000;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x1000, 0xfffffffffffffbff, x7, 1960, x8)

inst_272:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x800;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x800, 0xfffffffffffffbff, x7, 1968, x8)

inst_273:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x400;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x400, 0xfffffffffffffbff, x7, 1976, x8)

inst_274:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x200;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x200, 0xfffffffffffffbff, x7, 1984, x8)

inst_275:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x100;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x100, 0xfffffffffffffbff, x7, 1992, x8)

inst_276:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x80;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x80, 0xfffffffffffffbff, x7, 2000, x8)

inst_277:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x40;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x40, 0xfffffffffffffbff, x7, 2008, x8)

inst_278:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x20;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x20, 0xfffffffffffffbff, x7, 2016, x8)

inst_279:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x10;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x10, 0xfffffffffffffbff, x7, 2024, x8)

inst_280:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x8;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x8, 0xfffffffffffffbff, x7, 2032, x8)

inst_281:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x4, 0xfffffffffffffbff, x7, 2040, x8)
RVTEST_SIGBASE(x7,signature_x7_1)

inst_282:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0xfffffffffffffbff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0x2, 0xfffffffffffffbff, x7, 0, x8)
RVTEST_SIGBASE(x7,signature_x7_2)

inst_283:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xdfffffffffffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xdfffffffffffffff, x7, 0, x8)

inst_284:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xefffffffffffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xefffffffffffffff, x7, 8, x8)

inst_285:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffbffffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffbffffffff, x7, 16, x8)

inst_286:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xfffffffeffffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xfffffffeffffffff, x7, 24, x8)

inst_287:
// 
// opcode: clmulr ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0xffffffff7fffffff
TEST_RR_OP(clmulr, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffbff, 0xffffffff7fffffff, x7, 32, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 1*(XLEN/32),4,0xdeadbeef


signature_x7_2:
    .fill 5*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
