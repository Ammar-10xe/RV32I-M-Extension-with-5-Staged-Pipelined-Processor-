
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Sun Aug  7 17:10:46 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/anku/work2/bmanip/64/dataset.yaml \
//                  --cgf /home/anku/work2/bmanip/64/rv64ib.yaml \
 \
//                  -- xlen 64  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the rolw instruction of the RISC-V RV64Zbb,RV64Zbkb,RV64Zk,RV64Zkn,RV64Zks extension for the rolw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IZbb,RV64IZbkb,RV64IZk,RV64IZkn,RV64IZks")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*Zbb.*);def TEST_CASE_1=True;",rolw)

RVTEST_CASE(1,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*Zbkb.*);def TEST_CASE_1=True;",rolw)

RVTEST_CASE(2,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*Zk.*);def TEST_CASE_1=True;",rolw)

RVTEST_CASE(3,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*Zkn.*);def TEST_CASE_1=True;",rolw)

RVTEST_CASE(4,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*Zks.*);def TEST_CASE_1=True;",rolw)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1, rs1==x30, rs2==x31, rd==x31, 
// opcode: rolw ; op1:x30; op2:x31; dest:x31; op1val:0xffffffffffffffff;  op2val:0x34c2da8003cc0f27
TEST_RR_OP(rolw, x31, x30, x31, 0x0000000000000000, 0xffffffffffffffff, 0x34c2da8003cc0f27, x1, 0, x2)

inst_1:
// rs1 == rd != rs2, rs1==x29, rs2==x30, rd==x29, 
// opcode: rolw ; op1:x29; op2:x30; dest:x29; op1val:0x5ba2c7dd5ae10604;  op2val:0x0
TEST_RR_OP(rolw, x29, x29, x30, 0x0000000000000000, 0x5ba2c7dd5ae10604, 0x0, x1, 8, x2)

inst_2:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x29, rd==x30, 
// opcode: rolw ; op1:x31; op2:x29; dest:x30; op1val:0x6f061d6dc38671b6;  op2val:0x8000000000000000
TEST_RR_OP(rolw, x30, x31, x29, 0x0000000000000000, 0x6f061d6dc38671b6, 0x8000000000000000, x1, 16, x2)

inst_3:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, 
// opcode: rolw ; op1:x28; op2:x28; dest:x28; op1val:0xd2eeeb1c2af42d39;  op2val:0xd2eeeb1c2af42d39
TEST_RR_OP(rolw, x28, x28, x28, 0x0000000000000000, 0xd2eeeb1c2af42d39, 0xd2eeeb1c2af42d39, x1, 24, x2)

inst_4:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x27, 
// opcode: rolw ; op1:x26; op2:x26; dest:x27; op1val:0x485246bf2502307f;  op2val:0x485246bf2502307f
TEST_RR_OP(rolw, x27, x26, x26, 0x0000000000000000, 0x485246bf2502307f, 0x485246bf2502307f, x1, 32, x2)

inst_5:
// rs1==x27, rs2==x25, rd==x26, 
// opcode: rolw ; op1:x27; op2:x25; dest:x26; op1val:0xd50bd94a392e6fa3;  op2val:0x3000000000000000
TEST_RR_OP(rolw, x26, x27, x25, 0x0000000000000000, 0xd50bd94a392e6fa3, 0x3000000000000000, x1, 40, x2)

inst_6:
// rs1==x24, rs2==x27, rd==x25, 
// opcode: rolw ; op1:x24; op2:x27; dest:x25; op1val:0x8862749480e4d23b;  op2val:0x3800000000000000
TEST_RR_OP(rolw, x25, x24, x27, 0x0000000000000000, 0x8862749480e4d23b, 0x3800000000000000, x1, 48, x2)

inst_7:
// rs1==x25, rs2==x23, rd==x24, 
// opcode: rolw ; op1:x25; op2:x23; dest:x24; op1val:0x2405b307cec7313a;  op2val:0x4c00000000000000
TEST_RR_OP(rolw, x24, x25, x23, 0x0000000000000000, 0x2405b307cec7313a, 0x4c00000000000000, x1, 56, x2)

inst_8:
// rs1==x22, rs2==x24, rd==x23, 
// opcode: rolw ; op1:x22; op2:x24; dest:x23; op1val:0xb1410cba5d003e38;  op2val:0x8200000000000000
TEST_RR_OP(rolw, x23, x22, x24, 0x0000000000000000, 0xb1410cba5d003e38, 0x8200000000000000, x1, 64, x2)

inst_9:
// rs1==x23, rs2==x21, rd==x22, 
// opcode: rolw ; op1:x23; op2:x21; dest:x22; op1val:0xde81bcad0b815ef0;  op2val:0x6900000000000000
TEST_RR_OP(rolw, x22, x23, x21, 0x0000000000000000, 0xde81bcad0b815ef0, 0x6900000000000000, x1, 72, x2)

inst_10:
// rs1==x20, rs2==x22, rd==x21, 
// opcode: rolw ; op1:x20; op2:x22; dest:x21; op1val:0xbf28804a83e2ba3a;  op2val:0xcc80000000000000
TEST_RR_OP(rolw, x21, x20, x22, 0x0000000000000000, 0xbf28804a83e2ba3a, 0xcc80000000000000, x1, 80, x2)

inst_11:
// rs1==x21, rs2==x19, rd==x20, 
// opcode: rolw ; op1:x21; op2:x19; dest:x20; op1val:0xfd8bf41246e4abd8;  op2val:0x1940000000000000
TEST_RR_OP(rolw, x20, x21, x19, 0x0000000000000000, 0xfd8bf41246e4abd8, 0x1940000000000000, x1, 88, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19, 
// opcode: rolw ; op1:x18; op2:x20; dest:x19; op1val:0x63bf2da242d8cef;  op2val:0x20a0000000000000
TEST_RR_OP(rolw, x19, x18, x20, 0x0000000000000000, 0x63bf2da242d8cef, 0x20a0000000000000, x1, 96, x2)

inst_13:
// rs1==x19, rs2==x17, rd==x18, 
// opcode: rolw ; op1:x19; op2:x17; dest:x18; op1val:0x811d9484d8d8dd47;  op2val:0x5c50000000000000
TEST_RR_OP(rolw, x18, x19, x17, 0x0000000000000000, 0x811d9484d8d8dd47, 0x5c50000000000000, x1, 104, x2)

inst_14:
// rs1==x16, rs2==x18, rd==x17, 
// opcode: rolw ; op1:x16; op2:x18; dest:x17; op1val:0x8cb7ed4fc1f36fae;  op2val:0xcd28000000000000
TEST_RR_OP(rolw, x17, x16, x18, 0x0000000000000000, 0x8cb7ed4fc1f36fae, 0xcd28000000000000, x1, 112, x2)

inst_15:
// rs1==x17, rs2==x15, rd==x16, 
// opcode: rolw ; op1:x17; op2:x15; dest:x16; op1val:0x666fafe7d7704260;  op2val:0xeb24000000000000
TEST_RR_OP(rolw, x16, x17, x15, 0x0000000000000000, 0x666fafe7d7704260, 0xeb24000000000000, x1, 120, x2)

inst_16:
// rs1==x14, rs2==x16, rd==x15, 
// opcode: rolw ; op1:x14; op2:x16; dest:x15; op1val:0xfdb7038b058160e6;  op2val:0xcfb6000000000000
TEST_RR_OP(rolw, x15, x14, x16, 0x0000000000000000, 0xfdb7038b058160e6, 0xcfb6000000000000, x1, 128, x2)

inst_17:
// rs1==x15, rs2==x13, rd==x14, 
// opcode: rolw ; op1:x15; op2:x13; dest:x14; op1val:0xa4e23852d8bca4df;  op2val:0x118f000000000000
TEST_RR_OP(rolw, x14, x15, x13, 0x0000000000000000, 0xa4e23852d8bca4df, 0x118f000000000000, x1, 136, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13, 
// opcode: rolw ; op1:x12; op2:x14; dest:x13; op1val:0x718e177de812dd49;  op2val:0x3b0b800000000000
TEST_RR_OP(rolw, x13, x12, x14, 0x0000000000000000, 0x718e177de812dd49, 0x3b0b800000000000, x1, 144, x2)

inst_19:
// rs1==x13, rs2==x11, rd==x12, 
// opcode: rolw ; op1:x13; op2:x11; dest:x12; op1val:0x42bea7753d32d01e;  op2val:0x3da8400000000000
TEST_RR_OP(rolw, x12, x13, x11, 0x0000000000000000, 0x42bea7753d32d01e, 0x3da8400000000000, x1, 152, x2)

inst_20:
// rs1==x10, rs2==x12, rd==x11, 
// opcode: rolw ; op1:x10; op2:x12; dest:x11; op1val:0xe91ede432037e34e;  op2val:0xa742a00000000000
TEST_RR_OP(rolw, x11, x10, x12, 0x0000000000000000, 0xe91ede432037e34e, 0xa742a00000000000, x1, 160, x2)

inst_21:
// rs1==x11, rs2==x9, rd==x10, 
// opcode: rolw ; op1:x11; op2:x9; dest:x10; op1val:0xd2039372874434d3;  op2val:0xa3def00000000000
TEST_RR_OP(rolw, x10, x11, x9, 0x0000000000000000, 0xd2039372874434d3, 0xa3def00000000000, x1, 168, x2)

inst_22:
// rs1==x8, rs2==x10, rd==x9, 
// opcode: rolw ; op1:x8; op2:x10; dest:x9; op1val:0xe8dec4b7875e9bf5;  op2val:0x3af3780000000000
TEST_RR_OP(rolw, x9, x8, x10, 0x0000000000000000, 0xe8dec4b7875e9bf5, 0x3af3780000000000, x1, 176, x2)

inst_23:
// rs1==x9, rs2==x7, rd==x8, 
// opcode: rolw ; op1:x9; op2:x7; dest:x8; op1val:0xeed7c61c17d8a217;  op2val:0x4d64cc0000000000
TEST_RR_OP(rolw, x8, x9, x7, 0x0000000000000000, 0xeed7c61c17d8a217, 0x4d64cc0000000000, x1, 184, x2)

inst_24:
// rs1==x6, rs2==x8, rd==x7, 
// opcode: rolw ; op1:x6; op2:x8; dest:x7; op1val:0x4eab740b87f996d6;  op2val:0xf37b4e0000000000
TEST_RR_OP(rolw, x7, x6, x8, 0x0000000000000000, 0x4eab740b87f996d6, 0xf37b4e0000000000, x1, 192, x2)

inst_25:
// rs1==x7, rs2==x5, rd==x6, 
// opcode: rolw ; op1:x7; op2:x5; dest:x6; op1val:0x2466b4600d42ea01;  op2val:0xefe7490000000000
TEST_RR_OP(rolw, x6, x7, x5, 0x0000000000000000, 0x2466b4600d42ea01, 0xefe7490000000000, x1, 200, x8)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_26:
// rs1==x4, rs2==x6, rd==x5, 
// opcode: rolw ; op1:x4; op2:x6; dest:x5; op1val:0x4256f18f2de4eb20;  op2val:0xe077678000000000
TEST_RR_OP(rolw, x5, x4, x6, 0x0000000000000000, 0x4256f18f2de4eb20, 0xe077678000000000, x7, 0, x8)

inst_27:
// rs1==x5, rs2==x3, rd==x4, 
// opcode: rolw ; op1:x5; op2:x3; dest:x4; op1val:0x8533dc75d6308385;  op2val:0xfa56aa4000000000
TEST_RR_OP(rolw, x4, x5, x3, 0x0000000000000000, 0x8533dc75d6308385, 0xfa56aa4000000000, x7, 8, x8)

inst_28:
// rs1==x2, rs2==x4, rd==x3, 
// opcode: rolw ; op1:x2; op2:x4; dest:x3; op1val:0xca355a09ab72f99f;  op2val:0x60c9f22000000000
TEST_RR_OP(rolw, x3, x2, x4, 0x0000000000000000, 0xca355a09ab72f99f, 0x60c9f22000000000, x7, 16, x8)

inst_29:
// rs1==x3, rs2==x1, rd==x2, 
// opcode: rolw ; op1:x3; op2:x1; dest:x2; op1val:0x22fed7db4e7b7359;  op2val:0xaf36f11000000000
TEST_RR_OP(rolw, x2, x3, x1, 0x0000000000000000, 0x22fed7db4e7b7359, 0xaf36f11000000000, x7, 24, x8)

inst_30:
// rs1==x0, rs2==x2, rd==x1, 
// opcode: rolw ; op1:x0; op2:x2; dest:x1; op1val:0x0;  op2val:0x333990800000000
TEST_RR_OP(rolw, x1, x0, x2, 0x0000000000000000, 0x0, 0x333990800000000, x7, 32, x8)

inst_31:
// rs1==x1, 
// opcode: rolw ; op1:x1; op2:x30; dest:x31; op1val:0xb9fbd369c8cdf63e;  op2val:0x5c67c8fc00000000
TEST_RR_OP(rolw, x31, x1, x30, 0x0000000000000000, 0xb9fbd369c8cdf63e, 0x5c67c8fc00000000, x7, 40, x8)

inst_32:
// rs2==x0, 
// opcode: rolw ; op1:x30; op2:x0; dest:x31; op1val:0x324c464bc06209fb;  op2val:0x0
TEST_RR_OP(rolw, x31, x30, x0, 0x0000000000000000, 0x324c464bc06209fb, 0x0, x7, 48, x8)

inst_33:
// rd==x0, 
// opcode: rolw ; op1:x31; op2:x30; dest:x0; op1val:0x70fd0c20644918a7;  op2val:0xefe091e300000000
TEST_RR_OP(rolw, x0, x31, x30, 0x0000000000000000, 0x70fd0c20644918a7, 0xefe091e300000000, x7, 56, x8)

inst_34:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x755cd0bf4f63879f;  op2val:0xcb7cdda380000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x755cd0bf4f63879f, 0xcb7cdda380000000, x7, 64, x8)

inst_35:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa31e74cf1f3c1ad7;  op2val:0x51885e99c0000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa31e74cf1f3c1ad7, 0x51885e99c0000000, x7, 72, x8)

inst_36:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x300d9b713bb3e347;  op2val:0x87503d9d20000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x300d9b713bb3e347, 0x87503d9d20000000, x7, 80, x8)

inst_37:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xcb0acb582bedcfc5;  op2val:0x1ac7983c70000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xcb0acb582bedcfc5, 0x1ac7983c70000000, x7, 88, x8)

inst_38:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfd5324a47c496066;  op2val:0x1857bc0ae8000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfd5324a47c496066, 0x1857bc0ae8000000, x7, 96, x8)

inst_39:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa46ee1f1a8552f4b;  op2val:0xb9545b9124000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa46ee1f1a8552f4b, 0xb9545b9124000000, x7, 104, x8)

inst_40:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4bff93c124507198;  op2val:0xffe1759c3a000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4bff93c124507198, 0xffe1759c3a000000, x7, 112, x8)

inst_41:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe3ac03436656b0e2;  op2val:0xd12c4a6dfd000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe3ac03436656b0e2, 0xd12c4a6dfd000000, x7, 120, x8)

inst_42:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x75bd36c79929dfeb;  op2val:0x4978c51702800000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x75bd36c79929dfeb, 0x4978c51702800000, x7, 128, x8)

inst_43:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xea894c29ff6036ed;  op2val:0xec557c3c4d400000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xea894c29ff6036ed, 0xec557c3c4d400000, x7, 136, x8)

inst_44:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x46b7549d93c22130;  op2val:0x7fab9b0810a00000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x46b7549d93c22130, 0x7fab9b0810a00000, x7, 144, x8)

inst_45:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7e107814a1c1c528;  op2val:0xaf8fda6198900000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7e107814a1c1c528, 0xaf8fda6198900000, x7, 152, x8)

inst_46:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x57e9f6c2408b97cd;  op2val:0x707df5a4a8f80000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x57e9f6c2408b97cd, 0x707df5a4a8f80000, x7, 160, x8)

inst_47:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf3c9fbedaa8dc392;  op2val:0x924d5d8cdb8c0000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf3c9fbedaa8dc392, 0x924d5d8cdb8c0000, x7, 168, x8)

inst_48:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1078e5395c962250;  op2val:0x200dc7628c620000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1078e5395c962250, 0x200dc7628c620000, x7, 176, x8)

inst_49:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x57b0d4c17c2890b1;  op2val:0x415dc3e7526b0000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x57b0d4c17c2890b1, 0x415dc3e7526b0000, x7, 184, x8)

inst_50:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9812a13456f646e8;  op2val:0x448e60ef28288000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9812a13456f646e8, 0x448e60ef28288000, x7, 192, x8)

inst_51:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd367d9f15710b7ae;  op2val:0xad881be63aaf4000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd367d9f15710b7ae, 0xad881be63aaf4000, x7, 200, x8)

inst_52:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1f8b62c23a810bd9;  op2val:0xd3262066ba452000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1f8b62c23a810bd9, 0xd3262066ba452000, x7, 208, x8)

inst_53:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xab4a4d5c22feb755;  op2val:0x955964c554c37000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xab4a4d5c22feb755, 0x955964c554c37000, x7, 216, x8)

inst_54:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5cbaf664fcd220d7;  op2val:0xb66a6669d416800
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5cbaf664fcd220d7, 0xb66a6669d416800, x7, 224, x8)

inst_55:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd497855d8b082833;  op2val:0x610ea25929454400
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd497855d8b082833, 0x610ea25929454400, x7, 232, x8)

inst_56:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x97db1001072f6ac9;  op2val:0xc19961ddb6c00600
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x97db1001072f6ac9, 0xc19961ddb6c00600, x7, 240, x8)

inst_57:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd63ef4de0e724556;  op2val:0x4c41441591107f00
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd63ef4de0e724556, 0x4c41441591107f00, x7, 248, x8)

inst_58:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1baf44cf3b50c99d;  op2val:0xfc44172c98dfbd80
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1baf44cf3b50c99d, 0xfc44172c98dfbd80, x7, 256, x8)

inst_59:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xeab762a9d6cbf3ae;  op2val:0x985875b03f6a4d40
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xeab762a9d6cbf3ae, 0x985875b03f6a4d40, x7, 264, x8)

inst_60:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9b90f7caf66fa51d;  op2val:0xfcd876518f8264e0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9b90f7caf66fa51d, 0xfcd876518f8264e0, x7, 272, x8)

inst_61:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xcbd297d6aeb522fc;  op2val:0x443a809e48b4be70
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xcbd297d6aeb522fc, 0x443a809e48b4be70, x7, 280, x8)

inst_62:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xda53e66763735e07;  op2val:0xb914351d12915378
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xda53e66763735e07, 0xb914351d12915378, x7, 288, x8)

inst_63:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x77a061ba4b1d37e9;  op2val:0x922ec2bf33ecd4fc
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x77a061ba4b1d37e9, 0x922ec2bf33ecd4fc, x7, 296, x8)

inst_64:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa6c873830196f0c0;  op2val:0xe1db424323e7f5e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa6c873830196f0c0, 0xe1db424323e7f5e, x7, 304, x8)

inst_65:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x33439fc489476e6e;  op2val:0x7f8c74b1af5bc16d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x33439fc489476e6e, 0x7f8c74b1af5bc16d, x7, 312, x8)

inst_66:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x1a323609e92a6130
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x0, 0x1a323609e92a6130, x7, 320, x8)

inst_67:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000000;  op2val:0xed4eced74bed2975
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8000000000000000, 0xed4eced74bed2975, x7, 328, x8)

inst_68:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000000;  op2val:0x29cb52af3206b471
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4000000000000000, 0x29cb52af3206b471, x7, 336, x8)

inst_69:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000000;  op2val:0xae5de174ef43b6f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2000000000000000, 0xae5de174ef43b6f, x7, 344, x8)

inst_70:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd000000000000000;  op2val:0xb725f591d236cded
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd000000000000000, 0xb725f591d236cded, x7, 352, x8)

inst_71:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5800000000000000;  op2val:0xd5f381d63480c0ad
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5800000000000000, 0xd5f381d63480c0ad, x7, 360, x8)

inst_72:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfc00000000000000;  op2val:0x56ffe58d4360fec9
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfc00000000000000, 0x56ffe58d4360fec9, x7, 368, x8)

inst_73:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4200000000000000;  op2val:0x699492c960e011eb
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4200000000000000, 0x699492c960e011eb, x7, 376, x8)

inst_74:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7700000000000000;  op2val:0x25f013ba522ae822
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7700000000000000, 0x25f013ba522ae822, x7, 384, x8)

inst_75:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6580000000000000;  op2val:0x48659245994a555f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6580000000000000, 0x48659245994a555f, x7, 392, x8)

inst_76:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x46c0000000000000;  op2val:0x491f1b5a5d62953f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x46c0000000000000, 0x491f1b5a5d62953f, x7, 400, x8)

inst_77:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x56e0000000000000;  op2val:0x8b57454acd07888b
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x56e0000000000000, 0x8b57454acd07888b, x7, 408, x8)

inst_78:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x56b0000000000000;  op2val:0x2b9c75b64ea4788d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x56b0000000000000, 0x2b9c75b64ea4788d, x7, 416, x8)

inst_79:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4738000000000000;  op2val:0x45abe77bb75156a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4738000000000000, 0x45abe77bb75156a, x7, 424, x8)

inst_80:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3544000000000000;  op2val:0xa9cc49b7709e60f1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3544000000000000, 0xa9cc49b7709e60f1, x7, 432, x8)

inst_81:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x932000000000000;  op2val:0x75cdcd803ff7e48d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x932000000000000, 0x75cdcd803ff7e48d, x7, 440, x8)

inst_82:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xcd55000000000000;  op2val:0xb2b64c4be716713f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xcd55000000000000, 0xb2b64c4be716713f, x7, 448, x8)

inst_83:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfd42800000000000;  op2val:0x6eb5568bb03ff489
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfd42800000000000, 0x6eb5568bb03ff489, x7, 456, x8)

inst_84:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8e8a400000000000;  op2val:0x5dd1ee295c3d56e7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8e8a400000000000, 0x5dd1ee295c3d56e7, x7, 464, x8)

inst_85:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1370a00000000000;  op2val:0xf19c9fda18ccd7f7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1370a00000000000, 0xf19c9fda18ccd7f7, x7, 472, x8)

inst_86:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1408b00000000000;  op2val:0x74fb05dc575d258e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1408b00000000000, 0x74fb05dc575d258e, x7, 480, x8)

inst_87:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe87af80000000000;  op2val:0x9f7c62bb7ce1f4b3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe87af80000000000, 0x9f7c62bb7ce1f4b3, x7, 488, x8)

inst_88:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xdba9040000000000;  op2val:0x5d98418d6f9f34b2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xdba9040000000000, 0x5d98418d6f9f34b2, x7, 496, x8)

inst_89:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1d61e0000000000;  op2val:0xb21e137c4f832ec8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1d61e0000000000, 0xb21e137c4f832ec8, x7, 504, x8)

inst_90:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6e90570000000000;  op2val:0xafc08ace244d9206
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6e90570000000000, 0xafc08ace244d9206, x7, 512, x8)

inst_91:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2e84d28000000000;  op2val:0x52d700ac5b130474
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2e84d28000000000, 0x52d700ac5b130474, x7, 520, x8)

inst_92:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc70a28c000000000;  op2val:0x94a7a5ea64e77961
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc70a28c000000000, 0x94a7a5ea64e77961, x7, 528, x8)

inst_93:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xbaa4f32000000000;  op2val:0x4fe6a6f6305e3f80
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xbaa4f32000000000, 0x4fe6a6f6305e3f80, x7, 536, x8)

inst_94:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5c106a3000000000;  op2val:0xcadb5bec61250888
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5c106a3000000000, 0xcadb5bec61250888, x7, 544, x8)

inst_95:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x230b9f8800000000;  op2val:0xcc381e1007e8bf65
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x230b9f8800000000, 0xcc381e1007e8bf65, x7, 552, x8)

inst_96:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8d60807c00000000;  op2val:0x903636cf6291f0e2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8d60807c00000000, 0x903636cf6291f0e2, x7, 560, x8)

inst_97:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2d47691a00000000;  op2val:0xfae216dc58f45328
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2d47691a00000000, 0xfae216dc58f45328, x7, 568, x8)

inst_98:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfabf0a7b00000000;  op2val:0x6aeb7dbd0a095049
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfabf0a7b00000000, 0x6aeb7dbd0a095049, x7, 576, x8)

inst_99:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x11b6621f80000000;  op2val:0x6f6e71b73344cbb0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x11b6621f80000000, 0x6f6e71b73344cbb0, x7, 584, x8)

inst_100:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x486e4b47c0000000;  op2val:0x440d8382e2ed8971
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x486e4b47c0000000, 0x440d8382e2ed8971, x7, 592, x8)

inst_101:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x60e99d0e60000000;  op2val:0xb1b0d8fe00f1f68e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x60e99d0e60000000, 0xb1b0d8fe00f1f68e, x7, 600, x8)

inst_102:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf547af48f0000000;  op2val:0x855efa7448f71cb0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf547af48f0000000, 0x855efa7448f71cb0, x7, 608, x8)

inst_103:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9254a04d98000000;  op2val:0xbc66a8adf880b11
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9254a04d98000000, 0xbc66a8adf880b11, x7, 616, x8)

inst_104:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xadf58064ec000000;  op2val:0x29828207bd230058
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xadf58064ec000000, 0x29828207bd230058, x7, 624, x8)

inst_105:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1dae23576000000;  op2val:0x80904b4c86f90255
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1dae23576000000, 0x80904b4c86f90255, x7, 632, x8)

inst_106:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb1ff9d608b000000;  op2val:0x27a1689480ebe557
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb1ff9d608b000000, 0x27a1689480ebe557, x7, 640, x8)

inst_107:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x179fafe7fb800000;  op2val:0xfbdb4de81db6027c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x179fafe7fb800000, 0xfbdb4de81db6027c, x7, 648, x8)

inst_108:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfbcf76282c400000;  op2val:0x805c2f63023590f7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfbcf76282c400000, 0x805c2f63023590f7, x7, 656, x8)

inst_109:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe9fd4b63c2200000;  op2val:0x577f8847cd26ce1c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe9fd4b63c2200000, 0x577f8847cd26ce1c, x7, 664, x8)

inst_110:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x42dc43547b700000;  op2val:0xf29c583101b56748
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x42dc43547b700000, 0xf29c583101b56748, x7, 672, x8)

inst_111:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xed4764dd0cc80000;  op2val:0x2e9115b65d3bbce0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xed4764dd0cc80000, 0x2e9115b65d3bbce0, x7, 680, x8)

inst_112:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x51b0f5ab96fc0000;  op2val:0x2ae568bafd1032e8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x51b0f5ab96fc0000, 0x2ae568bafd1032e8, x7, 688, x8)

inst_113:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa544ade7dde60000;  op2val:0xdb04a838f57083ef
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa544ade7dde60000, 0xdb04a838f57083ef, x7, 696, x8)

inst_114:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x925c46cbd3570000;  op2val:0x5e4945ed75923260
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x925c46cbd3570000, 0x5e4945ed75923260, x7, 704, x8)

inst_115:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1ae589fb47f98000;  op2val:0x96ebec44616e73d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1ae589fb47f98000, 0x96ebec44616e73d, x7, 712, x8)

inst_116:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1d2acd14f9c74000;  op2val:0x387be8b88ccaec71
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1d2acd14f9c74000, 0x387be8b88ccaec71, x7, 720, x8)

inst_117:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9c9d5a527952a000;  op2val:0xb21bbba6d5fcd18
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9c9d5a527952a000, 0xb21bbba6d5fcd18, x7, 728, x8)

inst_118:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2b20055d1ce93000;  op2val:0x73465b82dedb6a7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2b20055d1ce93000, 0x73465b82dedb6a7, x7, 736, x8)

inst_119:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xae39ed63e301e800;  op2val:0x409bd3051d241ed6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xae39ed63e301e800, 0x409bd3051d241ed6, x7, 744, x8)

inst_120:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd7f893c3ac86ac00;  op2val:0xb0ab577addbad0b1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd7f893c3ac86ac00, 0xb0ab577addbad0b1, x7, 752, x8)

inst_121:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x19b3bff3de167a00;  op2val:0x42f5d75ea9e16e27
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x19b3bff3de167a00, 0x42f5d75ea9e16e27, x7, 760, x8)

inst_122:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf09825a406bf0d00;  op2val:0xf7ab62a81529755d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf09825a406bf0d00, 0xf7ab62a81529755d, x7, 768, x8)

inst_123:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1555a450e079180;  op2val:0x8a88c0676273ed06
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1555a450e079180, 0x8a88c0676273ed06, x7, 776, x8)

inst_124:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x532e2cc5d2955440;  op2val:0xf8a885186c5744bc
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x532e2cc5d2955440, 0xf8a885186c5744bc, x7, 784, x8)

inst_125:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfb7523b06ec13320;  op2val:0x8248f803a97bcc25
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfb7523b06ec13320, 0x8248f803a97bcc25, x7, 792, x8)

inst_126:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x382cc710f0f1c6b0;  op2val:0x331b2fb3d19e3224
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x382cc710f0f1c6b0, 0x331b2fb3d19e3224, x7, 800, x8)

inst_127:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4c52cfc2f0f54bc8;  op2val:0xe7edd86756f547ab
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4c52cfc2f0f54bc8, 0xe7edd86756f547ab, x7, 808, x8)

inst_128:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3dcbe16292d9be34;  op2val:0xfa60dbd625329041
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3dcbe16292d9be34, 0xfa60dbd625329041, x7, 816, x8)

inst_129:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfe4544f6058f7fe6;  op2val:0x7b87a9e25fefe911
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfe4544f6058f7fe6, 0x7b87a9e25fefe911, x7, 824, x8)

inst_130:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x44dcda6a797d76df;  op2val:0x248174e5598b88db
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x44dcda6a797d76df, 0x248174e5598b88db, x7, 832, x8)

inst_131:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x33bfb0e80aab4e37;  op2val:0x7af0702b7727bd62
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x33bfb0e80aab4e37, 0x7af0702b7727bd62, x7, 840, x8)

inst_132:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xdedbf20a8f64b9bc;  op2val:0xef6855edb3aa58e5
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xdedbf20a8f64b9bc, 0xef6855edb3aa58e5, x7, 848, x8)

inst_133:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x70202441d19df81;  op2val:0xb93ac7ee3d56ac8b
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x70202441d19df81, 0xb93ac7ee3d56ac8b, x7, 856, x8)

inst_134:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa3a304857d3aed38;  op2val:0xcc31d1dcb5ff09a7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa3a304857d3aed38, 0xcc31d1dcb5ff09a7, x7, 864, x8)

inst_135:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x368a58382283aee;  op2val:0xef900fb814d5348f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x368a58382283aee, 0xef900fb814d5348f, x7, 872, x8)

inst_136:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa0fa6a24963ab5d7;  op2val:0x7d572379f81a1e9f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa0fa6a24963ab5d7, 0x7d572379f81a1e9f, x7, 880, x8)

inst_137:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1606f8cc740e023d;  op2val:0xf5858bccdd9329bf
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1606f8cc740e023d, 0xf5858bccdd9329bf, x7, 888, x8)

inst_138:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x81294a71dfe4c7a5;  op2val:0xea7bd40266eef97f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x81294a71dfe4c7a5, 0xea7bd40266eef97f, x7, 896, x8)

inst_139:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9ca99acfaf698a52;  op2val:0xb95bf2e9865292ff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9ca99acfaf698a52, 0xb95bf2e9865292ff, x7, 904, x8)

inst_140:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x440ea57b2fe4fc2;  op2val:0x97ceae809fc3dff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x440ea57b2fe4fc2, 0x97ceae809fc3dff, x7, 912, x8)

inst_141:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6c456bfce10e43d4;  op2val:0x67212b9d64092bff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6c456bfce10e43d4, 0x67212b9d64092bff, x7, 920, x8)

inst_142:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x64ad8cd4914aad80;  op2val:0x9da9065dd92f97ff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x64ad8cd4914aad80, 0x9da9065dd92f97ff, x7, 928, x8)

inst_143:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x757e5228e88130ba;  op2val:0xbd7a505430d04fff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x757e5228e88130ba, 0xbd7a505430d04fff, x7, 936, x8)

inst_144:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc6592aad0ae95557;  op2val:0x6cb1be29e6371fff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc6592aad0ae95557, 0x6cb1be29e6371fff, x7, 944, x8)

inst_145:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7fb1ac680b72bb91;  op2val:0x6f3b6fa6f8dd3fff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7fb1ac680b72bb91, 0x6f3b6fa6f8dd3fff, x7, 952, x8)

inst_146:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6e1dd67303ca1d0;  op2val:0x249808d0be5f7fff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6e1dd67303ca1d0, 0x249808d0be5f7fff, x7, 960, x8)

inst_147:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb8f66a4f832cbaff;  op2val:0x1a5b9ccd70c2ffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb8f66a4f832cbaff, 0x1a5b9ccd70c2ffff, x7, 968, x8)

inst_148:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc8738f370c99c902;  op2val:0xf4ee2270d581ffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc8738f370c99c902, 0xf4ee2270d581ffff, x7, 976, x8)

inst_149:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x66a4e1f83e0ad875;  op2val:0x8e2b5c7e1493ffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x66a4e1f83e0ad875, 0x8e2b5c7e1493ffff, x7, 984, x8)

inst_150:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6673663c6dd54cb4;  op2val:0x355695e68d37ffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6673663c6dd54cb4, 0x355695e68d37ffff, x7, 992, x8)

inst_151:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7de7f4261f893d02;  op2val:0xf4f31a2bcc6fffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7de7f4261f893d02, 0xf4f31a2bcc6fffff, x7, 1000, x8)

inst_152:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf17dc31d6d64e7ad;  op2val:0x28f20e42bddfffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf17dc31d6d64e7ad, 0x28f20e42bddfffff, x7, 1008, x8)

inst_153:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1b607a8d3161b010;  op2val:0x5415a0435cbfffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1b607a8d3161b010, 0x5415a0435cbfffff, x7, 1016, x8)

inst_154:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4ef06236fb0f1c0;  op2val:0x590c01c43e7fffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4ef06236fb0f1c0, 0x590c01c43e7fffff, x7, 1024, x8)

inst_155:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x853ed27fa1d02d4d;  op2val:0x4fb0b2b4ffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x853ed27fa1d02d4d, 0x4fb0b2b4ffffff, x7, 1032, x8)

inst_156:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xeb9a53986be07552;  op2val:0x3eb3f6c71ffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xeb9a53986be07552, 0x3eb3f6c71ffffff, x7, 1040, x8)

inst_157:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd183808adb0bba39;  op2val:0xe30aa425b3ffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd183808adb0bba39, 0xe30aa425b3ffffff, x7, 1048, x8)

inst_158:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1ff934cb5d1139a4;  op2val:0xd756c0f057ffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1ff934cb5d1139a4, 0xd756c0f057ffffff, x7, 1056, x8)

inst_159:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3bbc81ce7a44c8ad;  op2val:0xb5bb3b242fffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3bbc81ce7a44c8ad, 0xb5bb3b242fffffff, x7, 1064, x8)

inst_160:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8b89800093547e48;  op2val:0xe52fb0819fffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8b89800093547e48, 0xe52fb0819fffffff, x7, 1072, x8)

inst_161:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1ab5ffe4994902ca;  op2val:0x710733fe3fffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1ab5ffe4994902ca, 0x710733fe3fffffff, x7, 1080, x8)

inst_162:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x19a55fa94e2e7447;  op2val:0xcee6c9487fffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x19a55fa94e2e7447, 0xcee6c9487fffffff, x7, 1088, x8)

inst_163:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc0a83d81f7192179;  op2val:0x1e903ad2ffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc0a83d81f7192179, 0x1e903ad2ffffffff, x7, 1096, x8)

inst_164:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x292268c615a03321;  op2val:0xa6e915bdffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x292268c615a03321, 0xa6e915bdffffffff, x7, 1104, x8)

inst_165:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x36370fccb733640c;  op2val:0xbe4349e3ffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x36370fccb733640c, 0xbe4349e3ffffffff, x7, 1112, x8)

inst_166:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe820ba0f6aede476;  op2val:0x3ea485f7ffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe820ba0f6aede476, 0x3ea485f7ffffffff, x7, 1120, x8)

inst_167:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4e0aa5616d2db9e3;  op2val:0xc680322fffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4e0aa5616d2db9e3, 0xc680322fffffffff, x7, 1128, x8)

inst_168:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2c9aaa4cbffb6c5c;  op2val:0x9ef4ce9fffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2c9aaa4cbffb6c5c, 0x9ef4ce9fffffffff, x7, 1136, x8)

inst_169:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1c8073cf27b012a3;  op2val:0x83653ebfffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1c8073cf27b012a3, 0x83653ebfffffffff, x7, 1144, x8)

inst_170:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xcc11f70e14a7dd83;  op2val:0x6ffd7d7fffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xcc11f70e14a7dd83, 0x6ffd7d7fffffffff, x7, 1152, x8)

inst_171:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc9dc3ec2f6aa770;  op2val:0x365ee0ffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc9dc3ec2f6aa770, 0x365ee0ffffffffff, x7, 1160, x8)

inst_172:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8df80a8d112154cc;  op2val:0x1ce551ffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8df80a8d112154cc, 0x1ce551ffffffffff, x7, 1168, x8)

inst_173:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe05474e1f96eaffa;  op2val:0xa10263ffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe05474e1f96eaffa, 0xa10263ffffffffff, x7, 1176, x8)

inst_174:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4b6ae0ab8fbff9ba;  op2val:0x4cc607ffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4b6ae0ab8fbff9ba, 0x4cc607ffffffffff, x7, 1184, x8)

inst_175:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x884a2af82552fbf9;  op2val:0xd36fffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x884a2af82552fbf9, 0xd36fffffffffff, x7, 1192, x8)

inst_176:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1475d76c0f99d8bc;  op2val:0x7b40dfffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1475d76c0f99d8bc, 0x7b40dfffffffffff, x7, 1200, x8)

inst_177:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x729d8fd2b68c8fce;  op2val:0x6a0f3fffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x729d8fd2b68c8fce, 0x6a0f3fffffffffff, x7, 1208, x8)

inst_178:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc407e2a913e5cf6b;  op2val:0x1fe47fffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc407e2a913e5cf6b, 0x1fe47fffffffffff, x7, 1216, x8)

inst_179:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5697ebd547cd73ed;  op2val:0xdbeeffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5697ebd547cd73ed, 0xdbeeffffffffffff, x7, 1224, x8)

inst_180:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x69f35da38364a709;  op2val:0x9269ffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x69f35da38364a709, 0x9269ffffffffffff, x7, 1232, x8)

inst_181:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9230a15ad0917142;  op2val:0x93fbffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9230a15ad0917142, 0x93fbffffffffffff, x7, 1240, x8)

inst_182:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe057776c76427709;  op2val:0x1ab7ffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe057776c76427709, 0x1ab7ffffffffffff, x7, 1248, x8)

inst_183:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb9e861c820176dbe;  op2val:0x222fffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb9e861c820176dbe, 0x222fffffffffffff, x7, 1256, x8)

inst_184:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x17c5da8e9738bfb9;  op2val:0x489fffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x17c5da8e9738bfb9, 0x489fffffffffffff, x7, 1264, x8)

inst_185:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb888d0205843990b;  op2val:0x5a3fffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb888d0205843990b, 0x5a3fffffffffffff, x7, 1272, x8)

inst_186:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xee8eb1b125fb16b4;  op2val:0xea7fffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xee8eb1b125fb16b4, 0xea7fffffffffffff, x7, 1280, x8)

inst_187:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x341ea23bd94509c;  op2val:0x82ffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x341ea23bd94509c, 0x82ffffffffffffff, x7, 1288, x8)

inst_188:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6d5c2871fe183d04;  op2val:0xb1ffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6d5c2871fe183d04, 0xb1ffffffffffffff, x7, 1296, x8)

inst_189:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9bae401e386ef954;  op2val:0xc3ffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9bae401e386ef954, 0xc3ffffffffffffff, x7, 1304, x8)

inst_190:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9241b7ed0274846b;  op2val:0x87ffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9241b7ed0274846b, 0x87ffffffffffffff, x7, 1312, x8)

inst_191:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3e610134180c5db5;  op2val:0x8fffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3e610134180c5db5, 0x8fffffffffffffff, x7, 1320, x8)

inst_192:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x39c88ec041e5a5de;  op2val:0x9fffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x39c88ec041e5a5de, 0x9fffffffffffffff, x7, 1328, x8)

inst_193:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa67ce511275bbf80;  op2val:0xbfffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa67ce511275bbf80, 0xbfffffffffffffff, x7, 1336, x8)

inst_194:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x24b6b671ae5fdcbb;  op2val:0x7fffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x24b6b671ae5fdcbb, 0x7fffffffffffffff, x7, 1344, x8)

inst_195:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6dae4547b0f94bb3;  op2val:0xffffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6dae4547b0f94bb3, 0xffffffffffffffff, x7, 1352, x8)

inst_196:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x168ef241a5632e0;  op2val:0x220746cc96c03042
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x168ef241a5632e0, 0x220746cc96c03042, x7, 1360, x8)

inst_197:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x30d2ec9fd4d686cd;  op2val:0x2dc04d358033ada7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x30d2ec9fd4d686cd, 0x2dc04d358033ada7, x7, 1368, x8)

inst_198:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc42a14b631a3cf7b;  op2val:0xb6cf3de46025666d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc42a14b631a3cf7b, 0xb6cf3de46025666d, x7, 1376, x8)

inst_199:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x27b2bdda42ee9aa7;  op2val:0x8964663cf541ab61
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x27b2bdda42ee9aa7, 0x8964663cf541ab61, x7, 1384, x8)

inst_200:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2815a9156a8877cf;  op2val:0x7bea8a85cd09e875
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2815a9156a8877cf, 0x7bea8a85cd09e875, x7, 1392, x8)

inst_201:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfe0022c2efeffc5f;  op2val:0xda80ddeff3d107a2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfe0022c2efeffc5f, 0xda80ddeff3d107a2, x7, 1400, x8)

inst_202:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x424f6311883ead3f;  op2val:0x54fad64046b88c5e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x424f6311883ead3f, 0x54fad64046b88c5e, x7, 1408, x8)

inst_203:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4d0957fb733f597f;  op2val:0x86bddb7c00f0a572
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4d0957fb733f597f, 0x86bddb7c00f0a572, x7, 1416, x8)

inst_204:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x448bfe1163dd2cff;  op2val:0xc8ea69a8269e1925
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x448bfe1163dd2cff, 0xc8ea69a8269e1925, x7, 1424, x8)

inst_205:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x67dfca774ef73dff;  op2val:0x633f9e36ff03170e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x67dfca774ef73dff, 0x633f9e36ff03170e, x7, 1432, x8)

inst_206:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc312e040eb1873ff;  op2val:0x1c0290060a710087
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc312e040eb1873ff, 0x1c0290060a710087, x7, 1440, x8)

inst_207:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9f440f98291917ff;  op2val:0xb36964f8b74d1614
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9f440f98291917ff, 0xb36964f8b74d1614, x7, 1448, x8)

inst_208:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5569dab7ffe78fff;  op2val:0xa09c74e3cf1ec7ba
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5569dab7ffe78fff, 0xa09c74e3cf1ec7ba, x7, 1456, x8)

inst_209:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3fd3b8cba185fff;  op2val:0xddc89919457288a2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3fd3b8cba185fff, 0xddc89919457288a2, x7, 1464, x8)

inst_210:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd5574b45f67bfff;  op2val:0x7c8adbbee84a991
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd5574b45f67bfff, 0x7c8adbbee84a991, x7, 1472, x8)

inst_211:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8ba43677f63c7fff;  op2val:0x42c1be6c4c4006c3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8ba43677f63c7fff, 0x42c1be6c4c4006c3, x7, 1480, x8)

inst_212:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x231d058c9d02ffff;  op2val:0x4cace19165844c17
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x231d058c9d02ffff, 0x4cace19165844c17, x7, 1488, x8)

inst_213:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8c0f5cbfd6f1ffff;  op2val:0xd4c58abe5c7946a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8c0f5cbfd6f1ffff, 0xd4c58abe5c7946a, x7, 1496, x8)

inst_214:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb7e7669e0c03ffff;  op2val:0x9edfcc1b64a14081
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb7e7669e0c03ffff, 0x9edfcc1b64a14081, x7, 1504, x8)

inst_215:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4399ec2a5857ffff;  op2val:0xd24f0724cd41cad2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4399ec2a5857ffff, 0xd24f0724cd41cad2, x7, 1512, x8)

inst_216:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7a9ac0a716efffff;  op2val:0x5f249e4dee8f948a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7a9ac0a716efffff, 0x5f249e4dee8f948a, x7, 1520, x8)

inst_217:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x143ac65e6dfffff;  op2val:0xae7c7ae4de38d7e2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x143ac65e6dfffff, 0xae7c7ae4de38d7e2, x7, 1528, x8)

inst_218:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe31f9713e4bfffff;  op2val:0xbd5a3c088b9f8591
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe31f9713e4bfffff, 0xbd5a3c088b9f8591, x7, 1536, x8)

inst_219:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xcdbd527df77fffff;  op2val:0x529d62b60c96a183
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xcdbd527df77fffff, 0x529d62b60c96a183, x7, 1544, x8)

inst_220:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x59dde3310affffff;  op2val:0x4ba4996688f931f4
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x59dde3310affffff, 0x4ba4996688f931f4, x7, 1552, x8)

inst_221:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe05e8c5f95ffffff;  op2val:0xfd670591955235a4
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe05e8c5f95ffffff, 0xfd670591955235a4, x7, 1560, x8)

inst_222:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x19835a0d23ffffff;  op2val:0x7dabb7005c6c32a5
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x19835a0d23ffffff, 0x7dabb7005c6c32a5, x7, 1568, x8)

inst_223:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x636a75e397ffffff;  op2val:0x88b3e9e4a7a5c05
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x636a75e397ffffff, 0x88b3e9e4a7a5c05, x7, 1576, x8)

inst_224:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x280088dbcfffffff;  op2val:0x4ed6242837e0de00
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x280088dbcfffffff, 0x4ed6242837e0de00, x7, 1584, x8)

inst_225:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4a18738a1fffffff;  op2val:0x1ca7bd1f0d770f3c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4a18738a1fffffff, 0x1ca7bd1f0d770f3c, x7, 1592, x8)

inst_226:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfdd2cb403fffffff;  op2val:0x63c2504c8dfc2307
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfdd2cb403fffffff, 0x63c2504c8dfc2307, x7, 1600, x8)

inst_227:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc61b1fbf7fffffff;  op2val:0x30bff1924e6ee408
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc61b1fbf7fffffff, 0x30bff1924e6ee408, x7, 1608, x8)

inst_228:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xbacfc76ffffffff;  op2val:0xebda5a4f998d1525
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xbacfc76ffffffff, 0xebda5a4f998d1525, x7, 1616, x8)

inst_229:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x65cb60bdffffffff;  op2val:0x1635b51a75ee935f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x65cb60bdffffffff, 0x1635b51a75ee935f, x7, 1624, x8)

inst_230:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa4053173ffffffff;  op2val:0x6ce859bb59cf4bb2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa4053173ffffffff, 0x6ce859bb59cf4bb2, x7, 1632, x8)

inst_231:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3e87b427ffffffff;  op2val:0x499006c897933e6c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3e87b427ffffffff, 0x499006c897933e6c, x7, 1640, x8)

inst_232:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6cc30f6fffffffff;  op2val:0x3c5b3eee9687f28f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6cc30f6fffffffff, 0x3c5b3eee9687f28f, x7, 1648, x8)

inst_233:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x25784f5fffffffff;  op2val:0xd95fd86ad2fe2e7e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x25784f5fffffffff, 0xd95fd86ad2fe2e7e, x7, 1656, x8)

inst_234:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x27b23dbfffffffff;  op2val:0xe91014a0b6d75e84
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x27b23dbfffffffff, 0xe91014a0b6d75e84, x7, 1664, x8)

inst_235:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd5a2037fffffffff;  op2val:0x1769a3c092936e8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd5a2037fffffffff, 0x1769a3c092936e8, x7, 1672, x8)

inst_236:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe81fdcffffffffff;  op2val:0x85a300e0784abebb
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe81fdcffffffffff, 0x85a300e0784abebb, x7, 1680, x8)

inst_237:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xff7745ffffffffff;  op2val:0x1f1baf6a4f829b65
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xff7745ffffffffff, 0x1f1baf6a4f829b65, x7, 1688, x8)

inst_238:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x708903ffffffffff;  op2val:0x86ce51bd17b8b123
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x708903ffffffffff, 0x86ce51bd17b8b123, x7, 1696, x8)

inst_239:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa4be27ffffffffff;  op2val:0xb1f5d8538b16bb0d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa4be27ffffffffff, 0xb1f5d8538b16bb0d, x7, 1704, x8)

inst_240:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x31602fffffffffff;  op2val:0x2ad6072539be2172
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x31602fffffffffff, 0x2ad6072539be2172, x7, 1712, x8)

inst_241:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xba4a1fffffffffff;  op2val:0x5761a86691e42acb
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xba4a1fffffffffff, 0x5761a86691e42acb, x7, 1720, x8)

inst_242:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7f103fffffffffff;  op2val:0x9e4d1f4975a8550
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7f103fffffffffff, 0x9e4d1f4975a8550, x7, 1728, x8)

inst_243:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf8a77fffffffffff;  op2val:0x9a7ef9e4b432d4f7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf8a77fffffffffff, 0x9a7ef9e4b432d4f7, x7, 1736, x8)

inst_244:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xda88ffffffffffff;  op2val:0xa827f5a3b76d454d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xda88ffffffffffff, 0xa827f5a3b76d454d, x7, 1744, x8)

inst_245:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2449ffffffffffff;  op2val:0x59c05bb9cd9cb03a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2449ffffffffffff, 0x59c05bb9cd9cb03a, x7, 1752, x8)

inst_246:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6c9bffffffffffff;  op2val:0xde14bff2eed7a24a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6c9bffffffffffff, 0xde14bff2eed7a24a, x7, 1760, x8)

inst_247:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6e27ffffffffffff;  op2val:0x63c2a48f76b1fd3d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6e27ffffffffffff, 0x63c2a48f76b1fd3d, x7, 1768, x8)

inst_248:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x31cfffffffffffff;  op2val:0x5dcf019db3988b52
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x31cfffffffffffff, 0x5dcf019db3988b52, x7, 1776, x8)

inst_249:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x215fffffffffffff;  op2val:0x90bb34803c464110
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x215fffffffffffff, 0x90bb34803c464110, x7, 1784, x8)

inst_250:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x433fffffffffffff;  op2val:0x47b7097b9b01f7cc
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x433fffffffffffff, 0x47b7097b9b01f7cc, x7, 1792, x8)

inst_251:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x857fffffffffffff;  op2val:0x40d90a1e5b331999
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x857fffffffffffff, 0x40d90a1e5b331999, x7, 1800, x8)

inst_252:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xacffffffffffffff;  op2val:0x4b1634e12d37de81
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xacffffffffffffff, 0x4b1634e12d37de81, x7, 1808, x8)

inst_253:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6dffffffffffffff;  op2val:0xfcb627afbf97e520
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6dffffffffffffff, 0xfcb627afbf97e520, x7, 1816, x8)

inst_254:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3bffffffffffffff;  op2val:0xabb4da1c6df8ccf6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3bffffffffffffff, 0xabb4da1c6df8ccf6, x7, 1824, x8)

inst_255:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x67ffffffffffffff;  op2val:0x41b79d35e08409f0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x67ffffffffffffff, 0x41b79d35e08409f0, x7, 1832, x8)

inst_256:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2fffffffffffffff;  op2val:0xd38cadcd432ff218
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2fffffffffffffff, 0xd38cadcd432ff218, x7, 1840, x8)

inst_257:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffffff;  op2val:0xfe339eca03b1d74b
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xdfffffffffffffff, 0xfe339eca03b1d74b, x7, 1848, x8)

inst_258:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffffff;  op2val:0x7ac5fed4b6ea010
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xbfffffffffffffff, 0x7ac5fed4b6ea010, x7, 1856, x8)

inst_259:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffffff;  op2val:0x2ff7c0fcbbe8f88d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffffff, 0x2ff7c0fcbbe8f88d, x7, 1864, x8)

inst_260:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0xa6ea1c0d2f8b9e9d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffff, 0xa6ea1c0d2f8b9e9d, x7, 1872, x8)

inst_261:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8138093c66cc59ee;  op2val:0xf192d0d741b2bb9a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8138093c66cc59ee, 0xf192d0d741b2bb9a, x7, 1880, x8)

inst_262:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xbd21a9561ba9a6b5;  op2val:0x5d8a9ea91d617a4d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xbd21a9561ba9a6b5, 0x5d8a9ea91d617a4d, x7, 1888, x8)

inst_263:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x932d823ffae6f67d;  op2val:0x2537437fc3015fa0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x932d823ffae6f67d, 0x2537437fc3015fa0, x7, 1896, x8)

inst_264:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb3852a64369580ff;  op2val:0x17f8388ba8e61cb6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb3852a64369580ff, 0x17f8388ba8e61cb6, x7, 1904, x8)

inst_265:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x567b159a4c8281a2;  op2val:0xde1b9523b6b6093
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x567b159a4c8281a2, 0xde1b9523b6b6093, x7, 1912, x8)

inst_266:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9fbfcb0ae717a666;  op2val:0x7571fe602b653e5
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9fbfcb0ae717a666, 0x7571fe602b653e5, x7, 1920, x8)

inst_267:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7805ec944d3b8462;  op2val:0x37adfd3cc1e0438
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7805ec944d3b8462, 0x37adfd3cc1e0438, x7, 1928, x8)

inst_268:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2f5031f8b8fe90a6;  op2val:0x1f2bae567def006
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2f5031f8b8fe90a6, 0x1f2bae567def006, x7, 1936, x8)

inst_269:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc3e60e906e803472;  op2val:0xc42276e94ae4a8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc3e60e906e803472, 0xc42276e94ae4a8, x7, 1944, x8)

inst_270:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x421d9b0ac32c4da8;  op2val:0x7fb91691d6cedd
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x421d9b0ac32c4da8, 0x7fb91691d6cedd, x7, 1952, x8)

inst_271:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf088bed0a11f7657;  op2val:0x37193ee4a7c5ba
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf088bed0a11f7657, 0x37193ee4a7c5ba, x7, 1960, x8)

inst_272:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3f26964cad764c4;  op2val:0x172f2a1844ebd2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3f26964cad764c4, 0x172f2a1844ebd2, x7, 1968, x8)

inst_273:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9ad8e8b131f3c57c;  op2val:0xfcb682e67a854
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9ad8e8b131f3c57c, 0xfcb682e67a854, x7, 1976, x8)

inst_274:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd8219c9d0a76f50a;  op2val:0x7044699d68912
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd8219c9d0a76f50a, 0x7044699d68912, x7, 1984, x8)

inst_275:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6e19ce135ac51cc8;  op2val:0x3db776d2b6540
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6e19ce135ac51cc8, 0x3db776d2b6540, x7, 1992, x8)

inst_276:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6410ff8753aaf3b7;  op2val:0x13ef0c3c4b8a1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6410ff8753aaf3b7, 0x13ef0c3c4b8a1, x7, 2000, x8)

inst_277:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x764a44b4ae53c374;  op2val:0xac0b226b5502
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x764a44b4ae53c374, 0xac0b226b5502, x7, 2008, x8)

inst_278:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x946c61bc186211cb;  op2val:0x67a5ed48d09e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x946c61bc186211cb, 0x67a5ed48d09e, x7, 2016, x8)

inst_279:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfd8464202874799a;  op2val:0x28a12c2869b7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfd8464202874799a, 0x28a12c2869b7, x7, 2024, x8)

inst_280:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1d6d2a932f3dc554;  op2val:0x1bf925849de3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1d6d2a932f3dc554, 0x1bf925849de3, x7, 2032, x8)

inst_281:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9199165ce7b4b57e;  op2val:0xf99099565a3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9199165ce7b4b57e, 0xf99099565a3, x7, 2040, x8)
RVTEST_SIGBASE(x7,signature_x7_1)

inst_282:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1b2e2cd77b692cda;  op2val:0x44ecd872ab5
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1b2e2cd77b692cda, 0x44ecd872ab5, x7, 0, x8)
RVTEST_SIGBASE(x7,signature_x7_2)

inst_283:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd53c269baf88e590;  op2val:0x21380b68be6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd53c269baf88e590, 0x21380b68be6, x7, 0, x8)

inst_284:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc21668aaa2792e75;  op2val:0x112b467fb8b
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc21668aaa2792e75, 0x112b467fb8b, x7, 8, x8)

inst_285:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5c7fb02df7e7a342;  op2val:0xa4e94fbd21
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5c7fb02df7e7a342, 0xa4e94fbd21, x7, 16, x8)

inst_286:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xaeb0a94c91e4f834;  op2val:0x7518972e45
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xaeb0a94c91e4f834, 0x7518972e45, x7, 24, x8)

inst_287:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xcc81f272af6a3e68;  op2val:0x2d671c82fc
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xcc81f272af6a3e68, 0x2d671c82fc, x7, 32, x8)

inst_288:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2041c033b47053de;  op2val:0x118b142f97
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2041c033b47053de, 0x118b142f97, x7, 40, x8)

inst_289:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf0f1d8dbd508ff34;  op2val:0x818d6084e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf0f1d8dbd508ff34, 0x818d6084e, x7, 48, x8)

inst_290:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x426e6ddf1690a1f7;  op2val:0x650dd1af1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x426e6ddf1690a1f7, 0x650dd1af1, x7, 56, x8)

inst_291:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe715dfe558fc0a18;  op2val:0x23b8f801d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe715dfe558fc0a18, 0x23b8f801d, x7, 64, x8)

inst_292:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xdb54e659962e5835;  op2val:0x187951cb6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xdb54e659962e5835, 0x187951cb6, x7, 72, x8)

inst_293:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa372959988b48922;  op2val:0xe0303f46
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa372959988b48922, 0xe0303f46, x7, 80, x8)

inst_294:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6fd08d91e0f48d2f;  op2val:0x7b1bda5e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6fd08d91e0f48d2f, 0x7b1bda5e, x7, 88, x8)

inst_295:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1ad9c6d87fb2d83b;  op2val:0x31b0f86a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1ad9c6d87fb2d83b, 0x31b0f86a, x7, 96, x8)

inst_296:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5d54cb2fa2f0afd;  op2val:0x1cde8a08
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5d54cb2fa2f0afd, 0x1cde8a08, x7, 104, x8)

inst_297:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9e2e5be56b66ec95;  op2val:0xbce1a9c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9e2e5be56b66ec95, 0xbce1a9c, x7, 112, x8)

inst_298:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x866534cd79fe0c5f;  op2val:0x6a1096c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x866534cd79fe0c5f, 0x6a1096c, x7, 120, x8)

inst_299:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x56f552452080f2ac;  op2val:0x3211cb3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x56f552452080f2ac, 0x3211cb3, x7, 128, x8)

inst_300:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x44eb31e46776fd34;  op2val:0x1e48237
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x44eb31e46776fd34, 0x1e48237, x7, 136, x8)

inst_301:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7db4d3b51f36ddf8;  op2val:0xb0fbce
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7db4d3b51f36ddf8, 0xb0fbce, x7, 144, x8)

inst_302:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3372969f7f65d54d;  op2val:0x5516a9
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3372969f7f65d54d, 0x5516a9, x7, 152, x8)

inst_303:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa38d0f398fc0819e;  op2val:0x21bf99
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa38d0f398fc0819e, 0x21bf99, x7, 160, x8)

inst_304:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb06670aaf2fbc7f9;  op2val:0x1f99de
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb06670aaf2fbc7f9, 0x1f99de, x7, 168, x8)

inst_305:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x23f7d227ea7f7301;  op2val:0xbeec1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x23f7d227ea7f7301, 0xbeec1, x7, 176, x8)

inst_306:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x887aae6a2c42eeac;  op2val:0x79dd3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x887aae6a2c42eeac, 0x79dd3, x7, 184, x8)

inst_307:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x106607dcde17b009;  op2val:0x35bc3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x106607dcde17b009, 0x35bc3, x7, 192, x8)

inst_308:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc4aaf35a6be1fcde;  op2val:0x1db50
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc4aaf35a6be1fcde, 0x1db50, x7, 200, x8)

inst_309:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x981abb61530959b;  op2val:0xc1f1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x981abb61530959b, 0xc1f1, x7, 208, x8)

inst_310:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xdb14a009b7e06d03;  op2val:0x4632
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xdb14a009b7e06d03, 0x4632, x7, 216, x8)

inst_311:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xeea93b6fca71067b;  op2val:0x3cdc
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xeea93b6fca71067b, 0x3cdc, x7, 224, x8)

inst_312:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfa342b15167cd62e;  op2val:0x1ad8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfa342b15167cd62e, 0x1ad8, x7, 232, x8)

inst_313:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb7b8b1a0ec9a5dc8;  op2val:0xe5e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb7b8b1a0ec9a5dc8, 0xe5e, x7, 240, x8)

inst_314:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3473f51ffb7a3b3b;  op2val:0x456
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3473f51ffb7a3b3b, 0x456, x7, 248, x8)

inst_315:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x57d53e43f1bae498;  op2val:0x216
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x57d53e43f1bae498, 0x216, x7, 256, x8)

inst_316:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2141c6d163522556;  op2val:0x14d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2141c6d163522556, 0x14d, x7, 264, x8)

inst_317:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe7ff25b9b3257dda;  op2val:0xad
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe7ff25b9b3257dda, 0xad, x7, 272, x8)

inst_318:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x28c0d4aec196c5c2;  op2val:0x42
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x28c0d4aec196c5c2, 0x42, x7, 280, x8)

inst_319:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x942c3fbb6d3e879;  op2val:0x32
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x942c3fbb6d3e879, 0x32, x7, 288, x8)

inst_320:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x418bfbb079a2ed17;  op2val:0x1e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x418bfbb079a2ed17, 0x1e, x7, 296, x8)

inst_321:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xaf3aeaa313f5bc90;  op2val:0xd
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xaf3aeaa313f5bc90, 0xd, x7, 304, x8)

inst_322:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1d849e2ba111f5fb;  op2val:0x4
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1d849e2ba111f5fb, 0x4, x7, 312, x8)

inst_323:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x44339c10d4652689;  op2val:0x3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x44339c10d4652689, 0x3, x7, 320, x8)

inst_324:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x746fe5b967ba7848;  op2val:0x1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x746fe5b967ba7848, 0x1, x7, 328, x8)

inst_325:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9064dbd9caa0a141;  op2val:0x0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9064dbd9caa0a141, 0x0, x7, 336, x8)

inst_326:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x880f73bbd42779f6;  op2val:0x9211a8d847f439f3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x880f73bbd42779f6, 0x9211a8d847f439f3, x7, 344, x8)

inst_327:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6030130961eeac38;  op2val:0x520235bc73d58e1c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6030130961eeac38, 0x520235bc73d58e1c, x7, 352, x8)

inst_328:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2cfcc3964671120e;  op2val:0xd4b59c0536cdf8a1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2cfcc3964671120e, 0xd4b59c0536cdf8a1, x7, 360, x8)

inst_329:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1b4c0859d26542ef;  op2val:0x735dc3271ce262d6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1b4c0859d26542ef, 0x735dc3271ce262d6, x7, 368, x8)

inst_330:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x86b6a04b6125e0d;  op2val:0xfaf8dfcdf33335b6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x86b6a04b6125e0d, 0xfaf8dfcdf33335b6, x7, 376, x8)

inst_331:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6720c5422dc73ac;  op2val:0xd945bbf3e5498256
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6720c5422dc73ac, 0xd945bbf3e5498256, x7, 384, x8)

inst_332:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2d51bffe1594dc5;  op2val:0x51054839ebb9c596
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2d51bffe1594dc5, 0x51054839ebb9c596, x7, 392, x8)

inst_333:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1554174cdc02ece;  op2val:0xea0a668ac12f694d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1554174cdc02ece, 0xea0a668ac12f694d, x7, 400, x8)

inst_334:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa746a4aa785c62;  op2val:0xa2592b9d32d1464e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa746a4aa785c62, 0xa2592b9d32d1464e, x7, 408, x8)

inst_335:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5a629624aa1735;  op2val:0x53b3b0ff3dd1e044
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5a629624aa1735, 0x53b3b0ff3dd1e044, x7, 416, x8)

inst_336:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x260fddf517e383;  op2val:0x5e320f4a02e50777
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x260fddf517e383, 0x5e320f4a02e50777, x7, 424, x8)

inst_337:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x159ecb99edd4d2;  op2val:0x5b4d7567b1ffc6a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x159ecb99edd4d2, 0x5b4d7567b1ffc6a, x7, 432, x8)

inst_338:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xdc63d84c955f2;  op2val:0x7a04e6483b852d7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xdc63d84c955f2, 0x7a04e6483b852d7, x7, 440, x8)

inst_339:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6690070c61509;  op2val:0x8a8f7aefd69f6b16
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6690070c61509, 0x8a8f7aefd69f6b16, x7, 448, x8)

inst_340:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2b3dbba6bc77d;  op2val:0x94b953edb1b43d07
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2b3dbba6bc77d, 0x94b953edb1b43d07, x7, 456, x8)

inst_341:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1bc4414881edd;  op2val:0xe13a099641d812cd
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1bc4414881edd, 0xe13a099641d812cd, x7, 464, x8)

inst_342:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf1b26111b4b6;  op2val:0x9bdeb398032fbce3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf1b26111b4b6, 0x9bdeb398032fbce3, x7, 472, x8)

inst_343:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x676692a38329;  op2val:0xa98a372e9ffd6a18
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x676692a38329, 0xa98a372e9ffd6a18, x7, 480, x8)

inst_344:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x239d5a11cca6;  op2val:0xdd0c8b9407bfc096
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x239d5a11cca6, 0xdd0c8b9407bfc096, x7, 488, x8)

inst_345:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1fa08bcce7ce;  op2val:0xea3d9be7f6a00758
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1fa08bcce7ce, 0xea3d9be7f6a00758, x7, 496, x8)

inst_346:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc1fbb01ea76;  op2val:0x13446df8128ae84a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc1fbb01ea76, 0x13446df8128ae84a, x7, 504, x8)

inst_347:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6e3f6782942;  op2val:0x7b73ccf813284c79
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6e3f6782942, 0x7b73ccf813284c79, x7, 512, x8)

inst_348:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2fa798c06ff;  op2val:0xb372c56b5b8349ce
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2fa798c06ff, 0xb372c56b5b8349ce, x7, 520, x8)

inst_349:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x12ba82cb2ce;  op2val:0xec7038c908fb09a0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x12ba82cb2ce, 0xec7038c908fb09a0, x7, 528, x8)

inst_350:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xaa236eba20;  op2val:0xfb019df47349dbc4
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xaa236eba20, 0xfb019df47349dbc4, x7, 536, x8)

inst_351:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4a482ea761;  op2val:0x1799e72821af214a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4a482ea761, 0x1799e72821af214a, x7, 544, x8)

inst_352:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x287219c1db;  op2val:0xbeddb070f7a0443
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x287219c1db, 0xbeddb070f7a0443, x7, 552, x8)

inst_353:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x15bfbd7d15;  op2val:0x44e9e4a511b41900
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x15bfbd7d15, 0x44e9e4a511b41900, x7, 560, x8)

inst_354:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe47bc7549;  op2val:0xea3a0683ead81dcd
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe47bc7549, 0xea3a0683ead81dcd, x7, 568, x8)

inst_355:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x63a782ebc;  op2val:0x9d42f6709da9b14d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x63a782ebc, 0x9d42f6709da9b14d, x7, 576, x8)

inst_356:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x24b1e943f;  op2val:0x119b4fe5fa285a0d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x24b1e943f, 0x119b4fe5fa285a0d, x7, 584, x8)

inst_357:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x16bba8d22;  op2val:0x98b20411e7a28cbd
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x16bba8d22, 0x98b20411e7a28cbd, x7, 592, x8)

inst_358:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xbd0840fc;  op2val:0x64409ddbb45f51c3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xbd0840fc, 0x64409ddbb45f51c3, x7, 600, x8)

inst_359:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5bea8594;  op2val:0xf6724ba08329c05b
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5bea8594, 0xf6724ba08329c05b, x7, 608, x8)

inst_360:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3a8137ea;  op2val:0xc2282666be49ee7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3a8137ea, 0xc2282666be49ee7, x7, 616, x8)

inst_361:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1891dd3d;  op2val:0xe1d7300f6361b9f8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1891dd3d, 0xe1d7300f6361b9f8, x7, 624, x8)

inst_362:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xbf8670e;  op2val:0xb9b338eb3fdf2348
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xbf8670e, 0xb9b338eb3fdf2348, x7, 632, x8)

inst_363:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x711eb58;  op2val:0xa2f7647a952e1b8b
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x711eb58, 0xa2f7647a952e1b8b, x7, 640, x8)

inst_364:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x28dd9f4;  op2val:0x12ca3f7062dc08d6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x28dd9f4, 0x12ca3f7062dc08d6, x7, 648, x8)

inst_365:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x11e7a61;  op2val:0x9c3ecb54c5cefdd8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x11e7a61, 0x9c3ecb54c5cefdd8, x7, 656, x8)

inst_366:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc793f6;  op2val:0x36971e1b2577c1ec
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc793f6, 0x36971e1b2577c1ec, x7, 664, x8)

inst_367:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x736008;  op2val:0x93b3a3d9a44f576a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x736008, 0x93b3a3d9a44f576a, x7, 672, x8)

inst_368:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x34106a;  op2val:0x50684bfe286852c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x34106a, 0x50684bfe286852c, x7, 680, x8)

inst_369:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1a83b3;  op2val:0x65151c401dd377bf
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1a83b3, 0x65151c401dd377bf, x7, 688, x8)

inst_370:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x99a1f;  op2val:0x21870f0bc4ff64de
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x99a1f, 0x21870f0bc4ff64de, x7, 696, x8)

inst_371:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x700af;  op2val:0xf552c9402cdf2af
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x700af, 0xf552c9402cdf2af, x7, 704, x8)

inst_372:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2f165;  op2val:0x2274ea181e34b3f1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2f165, 0x2274ea181e34b3f1, x7, 712, x8)

inst_373:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x16f3f;  op2val:0xf6cdb2f803e0d681
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x16f3f, 0xf6cdb2f803e0d681, x7, 720, x8)

inst_374:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb80f;  op2val:0x563e9bed45100358
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb80f, 0x563e9bed45100358, x7, 728, x8)

inst_375:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x4daa;  op2val:0x6b77730f65bd9acb
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x4daa, 0x6b77730f65bd9acb, x7, 736, x8)

inst_376:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2242;  op2val:0x785116080d650372
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2242, 0x785116080d650372, x7, 744, x8)

inst_377:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1aab;  op2val:0x36a80bdf0023b682
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1aab, 0x36a80bdf0023b682, x7, 752, x8)

inst_378:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa12;  op2val:0x4a789cb3d8b9b45c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa12, 0x4a789cb3d8b9b45c, x7, 760, x8)

inst_379:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x65b;  op2val:0xc42b7170902a174f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x65b, 0xc42b7170902a174f, x7, 768, x8)

inst_380:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3fd;  op2val:0x834c687a3acb6266
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3fd, 0x834c687a3acb6266, x7, 776, x8)

inst_381:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x191;  op2val:0xb53302fc154cd2aa
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x191, 0xb53302fc154cd2aa, x7, 784, x8)

inst_382:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xaa;  op2val:0x15c1d2dfa9964aef
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xaa, 0x15c1d2dfa9964aef, x7, 792, x8)

inst_383:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x79;  op2val:0xa3ea284d3bd03346
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x79, 0xa3ea284d3bd03346, x7, 800, x8)

inst_384:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x26;  op2val:0x76c468aec7321cc0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x26, 0x76c468aec7321cc0, x7, 808, x8)

inst_385:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x14;  op2val:0xe12b2b8f30b17d0b
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x14, 0xe12b2b8f30b17d0b, x7, 816, x8)

inst_386:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf;  op2val:0x8743feb6d4ea65d0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf, 0x8743feb6d4ea65d0, x7, 824, x8)

inst_387:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7;  op2val:0xa66b0d389d95847e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7, 0xa66b0d389d95847e, x7, 832, x8)

inst_388:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x2fa91425cb008853
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2, 0x2fa91425cb008853, x7, 840, x8)

inst_389:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x309d6b79965eda32
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1, 0x309d6b79965eda32, x7, 848, x8)

inst_390:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x7734d7c1c7fde805
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x0, 0x7734d7c1c7fde805, x7, 856, x8)

inst_391:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2bb9daa6aa01e126;  op2val:0x2dc86f6d7443f200
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2bb9daa6aa01e126, 0x2dc86f6d7443f200, x7, 864, x8)

inst_392:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf01528ec3591db10;  op2val:0xb2de7072dab0001e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf01528ec3591db10, 0xb2de7072dab0001e, x7, 872, x8)

inst_393:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x74a8eaec656224e9;  op2val:0xdabfc6d78901096d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x74a8eaec656224e9, 0xdabfc6d78901096d, x7, 880, x8)

inst_394:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfcc1650f30d268bd;  op2val:0xe3ff5ec4dcf0c656
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfcc1650f30d268bd, 0xe3ff5ec4dcf0c656, x7, 888, x8)

inst_395:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x61d4c262d69f32e6;  op2val:0xf7fe676eb828fd34
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x61d4c262d69f32e6, 0xf7fe676eb828fd34, x7, 896, x8)

inst_396:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xbee2ee6ef38e735f;  op2val:0xfbde6f8e2d79e311
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xbee2ee6ef38e735f, 0xfbde6f8e2d79e311, x7, 904, x8)

inst_397:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6d80feee74bc1570;  op2val:0xfd5d359f1a5928f7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6d80feee74bc1570, 0xfd5d359f1a5928f7, x7, 912, x8)

inst_398:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xefb5b593b918b7fa;  op2val:0xfeb171e36f6da856
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xefb5b593b918b7fa, 0xfeb171e36f6da856, x7, 920, x8)

inst_399:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xee412da70282f24d;  op2val:0xff4f4d100880b668
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xee412da70282f24d, 0xff4f4d100880b668, x7, 928, x8)

inst_400:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9322235b8b00cb6;  op2val:0xffa80c91e9e678bb
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9322235b8b00cb6, 0xffa80c91e9e678bb, x7, 936, x8)

inst_401:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc9763989eb74f8bb;  op2val:0xffdb13919c23bdb8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc9763989eb74f8bb, 0xffdb13919c23bdb8, x7, 944, x8)

inst_402:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc64d280859b4c3f;  op2val:0xffe25182f83106c9
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc64d280859b4c3f, 0xffe25182f83106c9, x7, 952, x8)

inst_403:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xac79fc270da5f55f;  op2val:0xfff0ffc40e22c1e0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xac79fc270da5f55f, 0xfff0ffc40e22c1e0, x7, 960, x8)

inst_404:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x513ee651f044106f;  op2val:0xfff8e49ce41ba01b
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x513ee651f044106f, 0xfff8e49ce41ba01b, x7, 968, x8)

inst_405:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x612faf5e8e73758e;  op2val:0xfffcd94d8514f49d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x612faf5e8e73758e, 0xfffcd94d8514f49d, x7, 976, x8)

inst_406:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x36334245fb566e3e;  op2val:0xfffee5ceb3b2fa55
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x36334245fb566e3e, 0xfffee5ceb3b2fa55, x7, 984, x8)

inst_407:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2a9cc14f63adcdbb;  op2val:0xffff34a37d61ce76
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2a9cc14f63adcdbb, 0xffff34a37d61ce76, x7, 992, x8)

inst_408:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x279ee9737825d0f4;  op2val:0xffffb7e981b4d2d8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x279ee9737825d0f4, 0xffffb7e981b4d2d8, x7, 1000, x8)

inst_409:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2dd60261c5f0a710;  op2val:0xffffc1b69bfa3293
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2dd60261c5f0a710, 0xffffc1b69bfa3293, x7, 1008, x8)

inst_410:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x71c80a02407e26d;  op2val:0xffffeb07e778555d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x71c80a02407e26d, 0xffffeb07e778555d, x7, 1016, x8)

inst_411:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x76b4a3ddd9e0e7fe;  op2val:0xfffff54d4cae8b6c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x76b4a3ddd9e0e7fe, 0xfffff54d4cae8b6c, x7, 1024, x8)

inst_412:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1d95cdb0b5c06c9d;  op2val:0xfffff905dbc1f2b1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1d95cdb0b5c06c9d, 0xfffff905dbc1f2b1, x7, 1032, x8)

inst_413:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6b3d9c59d788d65b;  op2val:0xfffffcc036c35dc6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6b3d9c59d788d65b, 0xfffffcc036c35dc6, x7, 1040, x8)

inst_414:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x891b827336015d9b;  op2val:0xfffffe5ba2465d2a
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x891b827336015d9b, 0xfffffe5ba2465d2a, x7, 1048, x8)

inst_415:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb68a272a255c09e0;  op2val:0xffffff0fcf4c7d09
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb68a272a255c09e0, 0xffffff0fcf4c7d09, x7, 1056, x8)

inst_416:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xce80f7b19e49c4a1;  op2val:0xffffff8d49aae370
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xce80f7b19e49c4a1, 0xffffff8d49aae370, x7, 1064, x8)

inst_417:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x897d9fc51ac24829;  op2val:0xffffffdf2752aa64
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x897d9fc51ac24829, 0xffffffdf2752aa64, x7, 1072, x8)

inst_418:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x75f32b5017550d1c;  op2val:0xffffffee40d0e5e8
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x75f32b5017550d1c, 0xffffffee40d0e5e8, x7, 1080, x8)

inst_419:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x239853f9120ff957;  op2val:0xfffffff3a0a1c6f0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x239853f9120ff957, 0xfffffff3a0a1c6f0, x7, 1088, x8)

inst_420:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x8d6920b2f8d1335;  op2val:0xfffffffa748ca591
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x8d6920b2f8d1335, 0xfffffffa748ca591, x7, 1096, x8)

inst_421:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x94038f336056f5e8;  op2val:0xfffffffc9fc745d1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x94038f336056f5e8, 0xfffffffc9fc745d1, x7, 1104, x8)

inst_422:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa9632e3dbd0070ae;  op2val:0xfffffffea97cbf85
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa9632e3dbd0070ae, 0xfffffffea97cbf85, x7, 1112, x8)

inst_423:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1141b67f62a12347;  op2val:0xffffffff1fe84ebd
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1141b67f62a12347, 0xffffffff1fe84ebd, x7, 1120, x8)

inst_424:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfaa97965c478ef2d;  op2val:0xffffffffaf8957f9
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfaa97965c478ef2d, 0xffffffffaf8957f9, x7, 1128, x8)

inst_425:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd6ac851f07155a89;  op2val:0xffffffffc165f0f1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd6ac851f07155a89, 0xffffffffc165f0f1, x7, 1136, x8)

inst_426:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x7f5e51dc2cc1d38;  op2val:0xffffffffefadea82
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x7f5e51dc2cc1d38, 0xffffffffefadea82, x7, 1144, x8)

inst_427:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9875bad195a6bea9;  op2val:0xfffffffff7fcc18c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9875bad195a6bea9, 0xfffffffff7fcc18c, x7, 1152, x8)

inst_428:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x339863c4d216eea8;  op2val:0xfffffffff8d3e5f5
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x339863c4d216eea8, 0xfffffffff8d3e5f5, x7, 1160, x8)

inst_429:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc988a7ccfc9a02b1;  op2val:0xfffffffffc15b0f7
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc988a7ccfc9a02b1, 0xfffffffffc15b0f7, x7, 1168, x8)

inst_430:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5bc1c3660c20b9ee;  op2val:0xfffffffffeac3217
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5bc1c3660c20b9ee, 0xfffffffffeac3217, x7, 1176, x8)

inst_431:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x132a717606aec150;  op2val:0xffffffffff5ba80c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x132a717606aec150, 0xffffffffff5ba80c, x7, 1184, x8)

inst_432:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x498db88f37c4c6b9;  op2val:0xffffffffff87984f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x498db88f37c4c6b9, 0xffffffffff87984f, x7, 1192, x8)

inst_433:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xc313bc1fa311d81e;  op2val:0xffffffffffce1bbc
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xc313bc1fa311d81e, 0xffffffffffce1bbc, x7, 1200, x8)

inst_434:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb183406662ebf954;  op2val:0xffffffffffef1d76
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb183406662ebf954, 0xffffffffffef1d76, x7, 1208, x8)

inst_435:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xaa467bbe0320df72;  op2val:0xfffffffffff3ae62
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xaa467bbe0320df72, 0xfffffffffff3ae62, x7, 1216, x8)

inst_436:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9b9aaad179a6551f;  op2val:0xfffffffffff81475
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9b9aaad179a6551f, 0xfffffffffff81475, x7, 1224, x8)

inst_437:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe4367ccad9716f2c;  op2val:0xfffffffffffce9a5
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe4367ccad9716f2c, 0xfffffffffffce9a5, x7, 1232, x8)

inst_438:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x3c2c0e921e4e0fad;  op2val:0xfffffffffffe5770
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x3c2c0e921e4e0fad, 0xfffffffffffe5770, x7, 1240, x8)

inst_439:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb264d045e3d4dd27;  op2val:0xffffffffffff4877
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb264d045e3d4dd27, 0xffffffffffff4877, x7, 1248, x8)

inst_440:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x6baeea37b4c8839b;  op2val:0xffffffffffffb0b3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x6baeea37b4c8839b, 0xffffffffffffb0b3, x7, 1256, x8)

inst_441:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe0f003e954084572;  op2val:0xffffffffffffdd0f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe0f003e954084572, 0xffffffffffffdd0f, x7, 1264, x8)

inst_442:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf69b0ae6c099bc4c;  op2val:0xffffffffffffe1e2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf69b0ae6c099bc4c, 0xffffffffffffe1e2, x7, 1272, x8)

inst_443:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x29ade05f7dddcc72;  op2val:0xfffffffffffff4e3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x29ade05f7dddcc72, 0xfffffffffffff4e3, x7, 1280, x8)

inst_444:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x13e6d9036dc3ccee;  op2val:0xfffffffffffffb86
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x13e6d9036dc3ccee, 0xfffffffffffffb86, x7, 1288, x8)

inst_445:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xaf2ee97d9adf5d6;  op2val:0xfffffffffffffdc4
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xaf2ee97d9adf5d6, 0xfffffffffffffdc4, x7, 1296, x8)

inst_446:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x2a5dc0a00d453cdf;  op2val:0xfffffffffffffec3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x2a5dc0a00d453cdf, 0xfffffffffffffec3, x7, 1304, x8)

inst_447:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe6a4d5cacb293ebd;  op2val:0xffffffffffffff3f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe6a4d5cacb293ebd, 0xffffffffffffff3f, x7, 1312, x8)

inst_448:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xa422af666ed26006;  op2val:0xffffffffffffffb1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xa422af666ed26006, 0xffffffffffffffb1, x7, 1320, x8)

inst_449:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x755961a98347ddf5;  op2val:0xffffffffffffffd6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x755961a98347ddf5, 0xffffffffffffffd6, x7, 1328, x8)

inst_450:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9aaacd63fc6c3192;  op2val:0xffffffffffffffef
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9aaacd63fc6c3192, 0xffffffffffffffef, x7, 1336, x8)

inst_451:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x9c1f741f7886e3eb;  op2val:0xfffffffffffffff4
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x9c1f741f7886e3eb, 0xfffffffffffffff4, x7, 1344, x8)

inst_452:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x5902a9dbe1832ab6;  op2val:0xfffffffffffffffb
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x5902a9dbe1832ab6, 0xfffffffffffffffb, x7, 1352, x8)

inst_453:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x1694bd33596f5f89;  op2val:0xfffffffffffffffc
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x1694bd33596f5f89, 0xfffffffffffffffc, x7, 1360, x8)

inst_454:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xdd4ec4d8ca11073d;  op2val:0xfffffffffffffffe
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xdd4ec4d8ca11073d, 0xfffffffffffffffe, x7, 1368, x8)

inst_455:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xef677106dc17ae6e;  op2val:0xffffffffffffffff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xef677106dc17ae6e, 0xffffffffffffffff, x7, 1376, x8)

inst_456:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x313971c0a85ab567;  op2val:0xcd5d8e29408ad7d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x313971c0a85ab567, 0xcd5d8e29408ad7d, x7, 1384, x8)

inst_457:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xaec1527485d77c9b;  op2val:0xdec85b0d53a27ee1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xaec1527485d77c9b, 0xdec85b0d53a27ee1, x7, 1392, x8)

inst_458:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd9157bee56df45de;  op2val:0x93017690e356529c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd9157bee56df45de, 0x93017690e356529c, x7, 1400, x8)

inst_459:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xe9907c4bea37dc21;  op2val:0x647981b7041bbaab
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xe9907c4bea37dc21, 0x647981b7041bbaab, x7, 1408, x8)

inst_460:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xf1ccaecf31150919;  op2val:0xfbdf8f979267acb5
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xf1ccaecf31150919, 0xfbdf8f979267acb5, x7, 1416, x8)

inst_461:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfab2993a91ed6c94;  op2val:0xf37e27a312ea67e4
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfab2993a91ed6c94, 0xf37e27a312ea67e4, x7, 1424, x8)

inst_462:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfc6f9f6b4ec6f18c;  op2val:0xda64fcfef8c60c0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfc6f9f6b4ec6f18c, 0xda64fcfef8c60c0, x7, 1432, x8)

inst_463:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfe11d383484641f6;  op2val:0x3da82c982fb5a758
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfe11d383484641f6, 0x3da82c982fb5a758, x7, 1440, x8)

inst_464:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xff0d9d6012e91176;  op2val:0x9c3d087c65835bdf
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xff0d9d6012e91176, 0x9c3d087c65835bdf, x7, 1448, x8)

inst_465:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffbe66b1042d678a;  op2val:0xa6c5e21453e1e6bc
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffbe66b1042d678a, 0xa6c5e21453e1e6bc, x7, 1456, x8)

inst_466:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffd1f3aab87ce2a6;  op2val:0xd6220b4fbbc9df37
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffd1f3aab87ce2a6, 0xd6220b4fbbc9df37, x7, 1464, x8)

inst_467:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffeb78cc9651ee66;  op2val:0xfe0a9c6c9a592829
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffeb78cc9651ee66, 0xfe0a9c6c9a592829, x7, 1472, x8)

inst_468:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfff6f2fc7b8b7233;  op2val:0xda70525a725f3a8f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfff6f2fc7b8b7233, 0xda70525a725f3a8f, x7, 1480, x8)

inst_469:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffa3d4fa3b633ac;  op2val:0xb9fef1d65956b39d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffa3d4fa3b633ac, 0xb9fef1d65956b39d, x7, 1488, x8)

inst_470:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffd116081ed75e8;  op2val:0x67913217437cbc41
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffd116081ed75e8, 0x67913217437cbc41, x7, 1496, x8)

inst_471:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffeb3bea0fbc248;  op2val:0x81aa70ac4b43ad85
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffeb3bea0fbc248, 0x81aa70ac4b43ad85, x7, 1504, x8)

inst_472:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffff2dd55c37849b;  op2val:0xc26801926c967b0e
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffff2dd55c37849b, 0xc26801926c967b0e, x7, 1512, x8)

inst_473:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffae62c5b3e01c;  op2val:0x5916d2810e24d9cc
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffae62c5b3e01c, 0x5916d2810e24d9cc, x7, 1520, x8)

inst_474:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffc75235a7efc1;  op2val:0x3322358ca6faba7b
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffc75235a7efc1, 0x3322358ca6faba7b, x7, 1528, x8)

inst_475:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffe41c44115b05;  op2val:0xa08b84f3c86342c2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffe41c44115b05, 0xa08b84f3c86342c2, x7, 1536, x8)

inst_476:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffff59572976012;  op2val:0x8e368ce0be5265f3
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffff59572976012, 0x8e368ce0be5265f3, x7, 1544, x8)

inst_477:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffff9e2e3356cc4;  op2val:0xb8f4169f85bf95c0
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffff9e2e3356cc4, 0xb8f4169f85bf95c0, x7, 1552, x8)

inst_478:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffc47fc7c6d0b;  op2val:0xffec35feaf334e15
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffc47fc7c6d0b, 0xffec35feaf334e15, x7, 1560, x8)

inst_479:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffe96fc6113a4;  op2val:0x6d3f408b31d4ff08
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffe96fc6113a4, 0x6d3f408b31d4ff08, x7, 1568, x8)

inst_480:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffff3f985a9ef1;  op2val:0xc96efdc4eb6992d5
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffff3f985a9ef1, 0xc96efdc4eb6992d5, x7, 1576, x8)

inst_481:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffa4fb37bec9;  op2val:0x242a809b7a3209fe
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffa4fb37bec9, 0x242a809b7a3209fe, x7, 1584, x8)

inst_482:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffc50bd61d6d;  op2val:0xf65e7737fbd2570d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffc50bd61d6d, 0xf65e7737fbd2570d, x7, 1592, x8)

inst_483:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffe96f738905;  op2val:0xe380a1764a104e66
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffe96f738905, 0xe380a1764a104e66, x7, 1600, x8)

inst_484:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff1afe08a14;  op2val:0xf65cf3f31dcacf74
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffff1afe08a14, 0xf65cf3f31dcacf74, x7, 1608, x8)

inst_485:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbbd59213f;  op2val:0x9e7e1fc352b42eff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffbbd59213f, 0x9e7e1fc352b42eff, x7, 1616, x8)

inst_486:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffda6478a56;  op2val:0x85fcd601e8d7a714
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffda6478a56, 0x85fcd601e8d7a714, x7, 1624, x8)

inst_487:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeb9e93d53;  op2val:0x6c5e1578754f9b96
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffeb9e93d53, 0x6c5e1578754f9b96, x7, 1632, x8)

inst_488:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff75697302;  op2val:0x72745307ec325eec
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffff75697302, 0x72745307ec325eec, x7, 1640, x8)

inst_489:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff955d1ce8;  op2val:0x7c2c966dccadb61f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffff955d1ce8, 0x7c2c966dccadb61f, x7, 1648, x8)

inst_490:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffd7be0830;  op2val:0x9bb4752d1bd775c5
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffd7be0830, 0x9bb4752d1bd775c5, x7, 1656, x8)

inst_491:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffe046ab61;  op2val:0xcf25923109ff475
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffe046ab61, 0xcf25923109ff475, x7, 1664, x8)

inst_492:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffff14135a5;  op2val:0xdf3c45b4090a96c9
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffff14135a5, 0xdf3c45b4090a96c9, x7, 1672, x8)

inst_493:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffba1a6cb;  op2val:0x8f0846a22a71a2ad
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffba1a6cb, 0x8f0846a22a71a2ad, x7, 1680, x8)

inst_494:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffc9e9033;  op2val:0x66b072b9e5e290be
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffc9e9033, 0x66b072b9e5e290be, x7, 1688, x8)

inst_495:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffe238b6b;  op2val:0x2a933ad31011eeb4
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffe238b6b, 0x2a933ad31011eeb4, x7, 1696, x8)

inst_496:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffff7d8180;  op2val:0x8525e8a8458da5ef
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffff7d8180, 0x8525e8a8458da5ef, x7, 1704, x8)

inst_497:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffff832e3f;  op2val:0x9535971c67a07b54
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffff832e3f, 0x9535971c67a07b54, x7, 1712, x8)

inst_498:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffc77cdc;  op2val:0x3e1c852151c5b8b2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffc77cdc, 0x3e1c852151c5b8b2, x7, 1720, x8)

inst_499:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffe22746;  op2val:0xb66b32848b7b5378
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffe22746, 0xb66b32848b7b5378, x7, 1728, x8)

inst_500:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffff20599;  op2val:0x53fbff6c58fa6e1c
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffff20599, 0x53fbff6c58fa6e1c, x7, 1736, x8)

inst_501:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffbe2c6;  op2val:0xc70afc922c9f7296
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffbe2c6, 0xc70afc922c9f7296, x7, 1744, x8)

inst_502:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffc39a2;  op2val:0xdd68f2012daf94c1
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffc39a2, 0xdd68f2012daf94c1, x7, 1752, x8)

inst_503:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffed06b;  op2val:0x7213516d6a013380
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffed06b, 0x7213516d6a013380, x7, 1760, x8)

inst_504:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffff5ea2;  op2val:0x18bb28e9c5ec6148
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffff5ea2, 0x18bb28e9c5ec6148, x7, 1768, x8)

inst_505:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffff8647;  op2val:0x265039f699ef1857
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffff8647, 0x265039f699ef1857, x7, 1776, x8)

inst_506:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffc823;  op2val:0x14b91c79dae98554
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffffc823, 0x14b91c79dae98554, x7, 1784, x8)

inst_507:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffedb9;  op2val:0x973e89c3d061437
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffffedb9, 0x973e89c3d061437, x7, 1792, x8)

inst_508:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffff576;  op2val:0xd798c9cf280b11fd
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffff576, 0xd798c9cf280b11fd, x7, 1800, x8)

inst_509:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffadf;  op2val:0x95a4d257a7298c66
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffadf, 0x95a4d257a7298c66, x7, 1808, x8)

inst_510:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffd7f;  op2val:0x735c076b8c8a18b2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffd7f, 0x735c076b8c8a18b2, x7, 1816, x8)

inst_511:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffee4;  op2val:0x894deab44d88450f
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffee4, 0x894deab44d88450f, x7, 1824, x8)

inst_512:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffff11;  op2val:0x953b00b00b54aa22
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffffff11, 0x953b00b00b54aa22, x7, 1832, x8)

inst_513:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffff8b;  op2val:0xf829d29f3d4806c2
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffffff8b, 0xf829d29f3d4806c2, x7, 1840, x8)

inst_514:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffcd;  op2val:0xa96ec2b34d984bff
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffcd, 0xa96ec2b34d984bff, x7, 1848, x8)

inst_515:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffe0;  op2val:0x432779eeacca7f0d
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xffffffffffffffe0, 0x432779eeacca7f0d, x7, 1856, x8)

inst_516:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffff5;  op2val:0x61b0ee095ae6a228
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffff5, 0x61b0ee095ae6a228, x7, 1864, x8)

inst_517:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffb;  op2val:0xff1e5befbedc25e6
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffffb, 0xff1e5befbedc25e6, x7, 1872, x8)

inst_518:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffc;  op2val:0x137a977753e8eb43
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffffc, 0x137a977753e8eb43, x7, 1880, x8)

inst_519:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffe;  op2val:0x2904cdefcf84b683
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xfffffffffffffffe, 0x2904cdefcf84b683, x7, 1888, x8)

inst_520:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xd2eeeb1c2af42d39;  op2val:0x4000000000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xd2eeeb1c2af42d39, 0x4000000000000000, x7, 1896, x8)

inst_521:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x485246bf2502307f;  op2val:0xa000000000000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x485246bf2502307f, 0xa000000000000000, x7, 1904, x8)

inst_522:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0xb6de8bcfd96429c9;  op2val:0x333990800000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0xb6de8bcfd96429c9, 0x333990800000000, x7, 1912, x8)

inst_523:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x324c464bc06209fb;  op2val:0xc706e0c200000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x324c464bc06209fb, 0xc706e0c200000000, x7, 1920, x8)

inst_524:
// 
// opcode: rolw ; op1:x30; op2:x29; dest:x31; op1val:0x70fd0c20644918a7;  op2val:0xefe091e300000000
TEST_RR_OP(rolw, x31, x30, x29, 0x0000000000000000, 0x70fd0c20644918a7, 0xefe091e300000000, x7, 1928, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 1*(XLEN/32),4,0xdeadbeef


signature_x7_2:
    .fill 242*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
