
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Sun Aug  7 17:10:46 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/anku/work2/bmanip/64/dataset.yaml \
//                  --cgf /home/anku/work2/bmanip/64/rv64ib.yaml \
 \
//                  -- xlen 64  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sh2add instruction of the RISC-V RV64Zba extension for the sh2add covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IZba")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*Zba.*);def TEST_CASE_1=True;",sh2add)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1, rs1==x30, rs2==x31, rd==x31, 
// opcode: sh2add ; op1:x30; op2:x31; dest:x31; op1val:-0x1;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x31, 0x0000000000000000, -0x1, 0x1, x1, 0, x2)

inst_1:
// rs1 == rd != rs2, rs1==x29, rs2==x30, rd==x29, 
// opcode: sh2add ; op1:x29; op2:x30; dest:x29; op1val:-0x1;  op2val:0x7fffffffffffffff
TEST_RR_OP(sh2add, x29, x29, x30, 0x0000000000000000, -0x1, 0x7fffffffffffffff, x1, 8, x2)

inst_2:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x29, rd==x30, 
// opcode: sh2add ; op1:x31; op2:x29; dest:x30; op1val:-0x1;  op2val:-0x4000000000000001
TEST_RR_OP(sh2add, x30, x31, x29, 0x0000000000000000, -0x1, -0x4000000000000001, x1, 16, x2)

inst_3:
// rs1 == rs2 == rd, rs1==x28, rs2==x28, rd==x28, 
// opcode: sh2add ; op1:x28; op2:x28; dest:x28; op1val:-0x1;  op2val:-0x1
TEST_RR_OP(sh2add, x28, x28, x28, 0x0000000000000000, -0x1, -0x1, x1, 24, x2)

inst_4:
// rs1 == rs2 != rd, rs1==x26, rs2==x26, rd==x27, 
// opcode: sh2add ; op1:x26; op2:x26; dest:x27; op1val:-0x1;  op2val:-0x1
TEST_RR_OP(sh2add, x27, x26, x26, 0x0000000000000000, -0x1, -0x1, x1, 32, x2)

inst_5:
// rs1==x27, rs2==x25, rd==x26, 
// opcode: sh2add ; op1:x27; op2:x25; dest:x26; op1val:-0x1;  op2val:-0x800000000000001
TEST_RR_OP(sh2add, x26, x27, x25, 0x0000000000000000, -0x1, -0x800000000000001, x1, 40, x2)

inst_6:
// rs1==x24, rs2==x27, rd==x25, 
// opcode: sh2add ; op1:x24; op2:x27; dest:x25; op1val:-0x1;  op2val:-0x400000000000001
TEST_RR_OP(sh2add, x25, x24, x27, 0x0000000000000000, -0x1, -0x400000000000001, x1, 48, x2)

inst_7:
// rs1==x25, rs2==x23, rd==x24, 
// opcode: sh2add ; op1:x25; op2:x23; dest:x24; op1val:-0x1;  op2val:-0x200000000000001
TEST_RR_OP(sh2add, x24, x25, x23, 0x0000000000000000, -0x1, -0x200000000000001, x1, 56, x2)

inst_8:
// rs1==x22, rs2==x24, rd==x23, 
// opcode: sh2add ; op1:x22; op2:x24; dest:x23; op1val:-0x1;  op2val:-0x100000000000001
TEST_RR_OP(sh2add, x23, x22, x24, 0x0000000000000000, -0x1, -0x100000000000001, x1, 64, x2)

inst_9:
// rs1==x23, rs2==x21, rd==x22, 
// opcode: sh2add ; op1:x23; op2:x21; dest:x22; op1val:-0x1;  op2val:-0x80000000000001
TEST_RR_OP(sh2add, x22, x23, x21, 0x0000000000000000, -0x1, -0x80000000000001, x1, 72, x2)

inst_10:
// rs1==x20, rs2==x22, rd==x21, 
// opcode: sh2add ; op1:x20; op2:x22; dest:x21; op1val:-0x1;  op2val:-0x40000000000001
TEST_RR_OP(sh2add, x21, x20, x22, 0x0000000000000000, -0x1, -0x40000000000001, x1, 80, x2)

inst_11:
// rs1==x21, rs2==x19, rd==x20, 
// opcode: sh2add ; op1:x21; op2:x19; dest:x20; op1val:-0x1;  op2val:-0x20000000000001
TEST_RR_OP(sh2add, x20, x21, x19, 0x0000000000000000, -0x1, -0x20000000000001, x1, 88, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19, 
// opcode: sh2add ; op1:x18; op2:x20; dest:x19; op1val:-0x1;  op2val:-0x10000000000001
TEST_RR_OP(sh2add, x19, x18, x20, 0x0000000000000000, -0x1, -0x10000000000001, x1, 96, x2)

inst_13:
// rs1==x19, rs2==x17, rd==x18, 
// opcode: sh2add ; op1:x19; op2:x17; dest:x18; op1val:-0x1;  op2val:-0x8000000000001
TEST_RR_OP(sh2add, x18, x19, x17, 0x0000000000000000, -0x1, -0x8000000000001, x1, 104, x2)

inst_14:
// rs1==x16, rs2==x18, rd==x17, 
// opcode: sh2add ; op1:x16; op2:x18; dest:x17; op1val:-0x1;  op2val:-0x4000000000001
TEST_RR_OP(sh2add, x17, x16, x18, 0x0000000000000000, -0x1, -0x4000000000001, x1, 112, x2)

inst_15:
// rs1==x17, rs2==x15, rd==x16, 
// opcode: sh2add ; op1:x17; op2:x15; dest:x16; op1val:-0x1;  op2val:-0x2000000000001
TEST_RR_OP(sh2add, x16, x17, x15, 0x0000000000000000, -0x1, -0x2000000000001, x1, 120, x2)

inst_16:
// rs1==x14, rs2==x16, rd==x15, 
// opcode: sh2add ; op1:x14; op2:x16; dest:x15; op1val:-0x1;  op2val:-0x1000000000001
TEST_RR_OP(sh2add, x15, x14, x16, 0x0000000000000000, -0x1, -0x1000000000001, x1, 128, x2)

inst_17:
// rs1==x15, rs2==x13, rd==x14, 
// opcode: sh2add ; op1:x15; op2:x13; dest:x14; op1val:-0x1;  op2val:-0x800000000001
TEST_RR_OP(sh2add, x14, x15, x13, 0x0000000000000000, -0x1, -0x800000000001, x1, 136, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13, 
// opcode: sh2add ; op1:x12; op2:x14; dest:x13; op1val:-0x1;  op2val:-0x400000000001
TEST_RR_OP(sh2add, x13, x12, x14, 0x0000000000000000, -0x1, -0x400000000001, x1, 144, x2)

inst_19:
// rs1==x13, rs2==x11, rd==x12, 
// opcode: sh2add ; op1:x13; op2:x11; dest:x12; op1val:-0x1;  op2val:-0x200000000001
TEST_RR_OP(sh2add, x12, x13, x11, 0x0000000000000000, -0x1, -0x200000000001, x1, 152, x2)

inst_20:
// rs1==x10, rs2==x12, rd==x11, 
// opcode: sh2add ; op1:x10; op2:x12; dest:x11; op1val:-0x1;  op2val:-0x100000000001
TEST_RR_OP(sh2add, x11, x10, x12, 0x0000000000000000, -0x1, -0x100000000001, x1, 160, x2)

inst_21:
// rs1==x11, rs2==x9, rd==x10, 
// opcode: sh2add ; op1:x11; op2:x9; dest:x10; op1val:-0x1;  op2val:-0x80000000001
TEST_RR_OP(sh2add, x10, x11, x9, 0x0000000000000000, -0x1, -0x80000000001, x1, 168, x2)

inst_22:
// rs1==x8, rs2==x10, rd==x9, 
// opcode: sh2add ; op1:x8; op2:x10; dest:x9; op1val:-0x1;  op2val:-0x40000000001
TEST_RR_OP(sh2add, x9, x8, x10, 0x0000000000000000, -0x1, -0x40000000001, x1, 176, x2)

inst_23:
// rs1==x9, rs2==x7, rd==x8, 
// opcode: sh2add ; op1:x9; op2:x7; dest:x8; op1val:-0x1;  op2val:-0x20000000001
TEST_RR_OP(sh2add, x8, x9, x7, 0x0000000000000000, -0x1, -0x20000000001, x1, 184, x2)

inst_24:
// rs1==x6, rs2==x8, rd==x7, 
// opcode: sh2add ; op1:x6; op2:x8; dest:x7; op1val:-0x1;  op2val:-0x10000000001
TEST_RR_OP(sh2add, x7, x6, x8, 0x0000000000000000, -0x1, -0x10000000001, x1, 192, x2)

inst_25:
// rs1==x7, rs2==x5, rd==x6, 
// opcode: sh2add ; op1:x7; op2:x5; dest:x6; op1val:-0x1;  op2val:-0x8000000001
TEST_RR_OP(sh2add, x6, x7, x5, 0x0000000000000000, -0x1, -0x8000000001, x1, 200, x8)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_26:
// rs1==x4, rs2==x6, rd==x5, 
// opcode: sh2add ; op1:x4; op2:x6; dest:x5; op1val:-0x1;  op2val:-0x4000000001
TEST_RR_OP(sh2add, x5, x4, x6, 0x0000000000000000, -0x1, -0x4000000001, x7, 0, x8)

inst_27:
// rs1==x5, rs2==x3, rd==x4, 
// opcode: sh2add ; op1:x5; op2:x3; dest:x4; op1val:-0x1;  op2val:-0x2000000001
TEST_RR_OP(sh2add, x4, x5, x3, 0x0000000000000000, -0x1, -0x2000000001, x7, 8, x8)

inst_28:
// rs1==x2, rs2==x4, rd==x3, 
// opcode: sh2add ; op1:x2; op2:x4; dest:x3; op1val:-0x1;  op2val:-0x1000000001
TEST_RR_OP(sh2add, x3, x2, x4, 0x0000000000000000, -0x1, -0x1000000001, x7, 16, x8)

inst_29:
// rs1==x3, rs2==x1, rd==x2, 
// opcode: sh2add ; op1:x3; op2:x1; dest:x2; op1val:-0x1;  op2val:-0x800000001
TEST_RR_OP(sh2add, x2, x3, x1, 0x0000000000000000, -0x1, -0x800000001, x7, 24, x8)

inst_30:
// rs1==x0, rs2==x2, rd==x1, 
// opcode: sh2add ; op1:x0; op2:x2; dest:x1; op1val:0x0;  op2val:-0x400000001
TEST_RR_OP(sh2add, x1, x0, x2, 0x0000000000000000, 0x0, -0x400000001, x7, 32, x8)

inst_31:
// rs1==x1, 
// opcode: sh2add ; op1:x1; op2:x30; dest:x31; op1val:-0x1;  op2val:-0x200000001
TEST_RR_OP(sh2add, x31, x1, x30, 0x0000000000000000, -0x1, -0x200000001, x7, 40, x8)

inst_32:
// rs2==x0, 
// opcode: sh2add ; op1:x30; op2:x0; dest:x31; op1val:-0x1;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x0, 0x0000000000000000, -0x1, 0x0, x7, 48, x8)

inst_33:
// rd==x0, 
// opcode: sh2add ; op1:x31; op2:x30; dest:x0; op1val:-0x1;  op2val:-0x80000001
TEST_RR_OP(sh2add, x0, x31, x30, 0x0000000000000000, -0x1, -0x80000001, x7, 56, x8)

inst_34:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x40000001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x40000001, x7, 64, x8)

inst_35:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x20000001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x20000001, x7, 72, x8)

inst_36:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x10000001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x10000001, x7, 80, x8)

inst_37:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x8000001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x8000001, x7, 88, x8)

inst_38:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x4000001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x4000001, x7, 96, x8)

inst_39:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x2000001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x2000001, x7, 104, x8)

inst_40:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x1000001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x1000001, x7, 112, x8)

inst_41:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x800001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x800001, x7, 120, x8)

inst_42:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x400001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x400001, x7, 128, x8)

inst_43:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x200001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x200001, x7, 136, x8)

inst_44:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x100001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x100001, x7, 144, x8)

inst_45:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x80001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x80001, x7, 152, x8)

inst_46:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x40001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x40001, x7, 160, x8)

inst_47:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x20001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x20001, x7, 168, x8)

inst_48:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x10001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x10001, x7, 176, x8)

inst_49:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x8001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x8001, x7, 184, x8)

inst_50:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x4001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x4001, x7, 192, x8)

inst_51:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x2001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x2001, x7, 200, x8)

inst_52:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x1001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x1001, x7, 208, x8)

inst_53:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x801
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x801, x7, 216, x8)

inst_54:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x401
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x401, x7, 224, x8)

inst_55:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x201
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x201, x7, 232, x8)

inst_56:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x101
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x101, x7, 240, x8)

inst_57:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x81
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x81, x7, 248, x8)

inst_58:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x41
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x41, x7, 256, x8)

inst_59:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x21
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x21, x7, 264, x8)

inst_60:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x11
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x11, x7, 272, x8)

inst_61:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x9
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x9, x7, 280, x8)

inst_62:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x5
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x5, x7, 288, x8)

inst_63:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x3
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x3, x7, 296, x8)

inst_64:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x2
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x2, x7, 304, x8)

inst_65:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffffff;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x7fffffffffffffff, -0x1, x7, 312, x8)

inst_66:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x4000000000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x4000000000000001, -0x1, x7, 320, x8)

inst_67:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x2000000000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x2000000000000001, -0x1, x7, 328, x8)

inst_68:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1000000000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1000000000000001, -0x1, x7, 336, x8)

inst_69:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x800000000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x800000000000001, -0x1, x7, 344, x8)

inst_70:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x400000000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x400000000000001, -0x1, x7, 352, x8)

inst_71:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x200000000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x200000000000001, -0x1, x7, 360, x8)

inst_72:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x100000000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x100000000000001, -0x1, x7, 368, x8)

inst_73:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x80000000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x80000000000001, -0x1, x7, 376, x8)

inst_74:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x40000000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x40000000000001, -0x1, x7, 384, x8)

inst_75:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x20000000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x20000000000001, -0x1, x7, 392, x8)

inst_76:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x10000000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x10000000000001, -0x1, x7, 400, x8)

inst_77:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x8000000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x8000000000001, -0x1, x7, 408, x8)

inst_78:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x4000000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x4000000000001, -0x1, x7, 416, x8)

inst_79:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x2000000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x2000000000001, -0x1, x7, 424, x8)

inst_80:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1000000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1000000000001, -0x1, x7, 432, x8)

inst_81:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x800000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x800000000001, -0x1, x7, 440, x8)

inst_82:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x400000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x400000000001, -0x1, x7, 448, x8)

inst_83:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x200000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x200000000001, -0x1, x7, 456, x8)

inst_84:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x100000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x100000000001, -0x1, x7, 464, x8)

inst_85:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x80000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x80000000001, -0x1, x7, 472, x8)

inst_86:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x40000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x40000000001, -0x1, x7, 480, x8)

inst_87:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x20000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x20000000001, -0x1, x7, 488, x8)

inst_88:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x10000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x10000000001, -0x1, x7, 496, x8)

inst_89:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x8000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x8000000001, -0x1, x7, 504, x8)

inst_90:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x4000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x4000000001, -0x1, x7, 512, x8)

inst_91:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x2000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x2000000001, -0x1, x7, 520, x8)

inst_92:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1000000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1000000001, -0x1, x7, 528, x8)

inst_93:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x800000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x800000001, -0x1, x7, 536, x8)

inst_94:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x400000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x400000001, -0x1, x7, 544, x8)

inst_95:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x200000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x200000001, -0x1, x7, 552, x8)

inst_96:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x100000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x100000001, -0x1, x7, 560, x8)

inst_97:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x80000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x80000001, -0x1, x7, 568, x8)

inst_98:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x40000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x40000001, -0x1, x7, 576, x8)

inst_99:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x20000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x20000001, -0x1, x7, 584, x8)

inst_100:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x10000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x10000001, -0x1, x7, 592, x8)

inst_101:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x8000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x8000001, -0x1, x7, 600, x8)

inst_102:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x4000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x4000001, -0x1, x7, 608, x8)

inst_103:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x2000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x2000001, -0x1, x7, 616, x8)

inst_104:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1000001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1000001, -0x1, x7, 624, x8)

inst_105:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x800001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x800001, -0x1, x7, 632, x8)

inst_106:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x400001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x400001, -0x1, x7, 640, x8)

inst_107:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x200001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x200001, -0x1, x7, 648, x8)

inst_108:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x100001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x100001, -0x1, x7, 656, x8)

inst_109:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x80001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x80001, -0x1, x7, 664, x8)

inst_110:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x40001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x40001, -0x1, x7, 672, x8)

inst_111:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x20001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x20001, -0x1, x7, 680, x8)

inst_112:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x10001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x10001, -0x1, x7, 688, x8)

inst_113:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x8001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x8001, -0x1, x7, 696, x8)

inst_114:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x4001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x4001, -0x1, x7, 704, x8)

inst_115:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x2001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x2001, -0x1, x7, 712, x8)

inst_116:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1001;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1001, -0x1, x7, 720, x8)

inst_117:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x801;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x801, -0x1, x7, 728, x8)

inst_118:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x401;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x401, -0x1, x7, 736, x8)

inst_119:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x201;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x201, -0x1, x7, 744, x8)

inst_120:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x101;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x101, -0x1, x7, 752, x8)

inst_121:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x81;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x81, -0x1, x7, 760, x8)

inst_122:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x41;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x41, -0x1, x7, 768, x8)

inst_123:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x21;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x21, -0x1, x7, 776, x8)

inst_124:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x11;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x11, -0x1, x7, 784, x8)

inst_125:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x9;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x9, -0x1, x7, 792, x8)

inst_126:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5, -0x1, x7, 800, x8)

inst_127:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3, -0x1, x7, 808, x8)

inst_128:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x2;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x2, -0x1, x7, 816, x8)

inst_129:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x8000000000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x8000000000000000, x7, 824, x8)

inst_130:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x4000000000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x4000000000000000, x7, 832, x8)

inst_131:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x2000000000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x2000000000000000, x7, 840, x8)

inst_132:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x1000000000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x1000000000000000, x7, 848, x8)

inst_133:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x800000000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x800000000000000, x7, 856, x8)

inst_134:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x400000000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x400000000000000, x7, 864, x8)

inst_135:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x200000000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x200000000000000, x7, 872, x8)

inst_136:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x100000000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x100000000000000, x7, 880, x8)

inst_137:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x80000000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x80000000000000, x7, 888, x8)

inst_138:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x40000000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x40000000000000, x7, 896, x8)

inst_139:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x20000000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x20000000000000, x7, 904, x8)

inst_140:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x10000000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x10000000000000, x7, 912, x8)

inst_141:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x8000000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x8000000000000, x7, 920, x8)

inst_142:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x4000000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x4000000000000, x7, 928, x8)

inst_143:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x2000000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x2000000000000, x7, 936, x8)

inst_144:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x1000000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x1000000000000, x7, 944, x8)

inst_145:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x800000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x800000000000, x7, 952, x8)

inst_146:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x400000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x400000000000, x7, 960, x8)

inst_147:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x200000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x200000000000, x7, 968, x8)

inst_148:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x100000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x100000000000, x7, 976, x8)

inst_149:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x80000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x80000000000, x7, 984, x8)

inst_150:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x40000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x40000000000, x7, 992, x8)

inst_151:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x20000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x20000000000, x7, 1000, x8)

inst_152:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x10000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x10000000000, x7, 1008, x8)

inst_153:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x8000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x8000000000, x7, 1016, x8)

inst_154:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x4000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x4000000000, x7, 1024, x8)

inst_155:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x2000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x2000000000, x7, 1032, x8)

inst_156:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x1000000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x1000000000, x7, 1040, x8)

inst_157:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x800000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x800000000, x7, 1048, x8)

inst_158:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x400000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x400000000, x7, 1056, x8)

inst_159:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x200000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x200000000, x7, 1064, x8)

inst_160:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x100000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x100000000, x7, 1072, x8)

inst_161:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x80000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x80000000, x7, 1080, x8)

inst_162:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x40000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x40000000, x7, 1088, x8)

inst_163:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x20000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x20000000, x7, 1096, x8)

inst_164:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x10000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x10000000, x7, 1104, x8)

inst_165:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x8000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x8000000, x7, 1112, x8)

inst_166:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x4000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x4000000, x7, 1120, x8)

inst_167:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x2000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x2000000, x7, 1128, x8)

inst_168:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x1000000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x1000000, x7, 1136, x8)

inst_169:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x800000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x800000, x7, 1144, x8)

inst_170:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x400000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x400000, x7, 1152, x8)

inst_171:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x200000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x200000, x7, 1160, x8)

inst_172:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x100000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x100000, x7, 1168, x8)

inst_173:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x80000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x80000, x7, 1176, x8)

inst_174:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x40000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x40000, x7, 1184, x8)

inst_175:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x20000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x20000, x7, 1192, x8)

inst_176:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x10000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x10000, x7, 1200, x8)

inst_177:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x8000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x8000, x7, 1208, x8)

inst_178:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x4000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x4000, x7, 1216, x8)

inst_179:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x2000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x2000, x7, 1224, x8)

inst_180:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x1000
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x1000, x7, 1232, x8)

inst_181:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x800
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x800, x7, 1240, x8)

inst_182:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x400
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x400, x7, 1248, x8)

inst_183:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x200
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x200, x7, 1256, x8)

inst_184:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x100
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x100, x7, 1264, x8)

inst_185:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x80
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x80, x7, 1272, x8)

inst_186:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x40
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x40, x7, 1280, x8)

inst_187:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x20
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x20, x7, 1288, x8)

inst_188:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x10
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x10, x7, 1296, x8)

inst_189:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x8
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x8, x7, 1304, x8)

inst_190:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x4
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x4, x7, 1312, x8)

inst_191:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x2
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x2, x7, 1320, x8)

inst_192:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x8000000000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x8000000000000000, -0x1, x7, 1328, x8)

inst_193:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x4000000000000000, -0x1, x7, 1336, x8)

inst_194:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x2000000000000000, -0x1, x7, 1344, x8)

inst_195:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1000000000000000, -0x1, x7, 1352, x8)

inst_196:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x800000000000000, -0x1, x7, 1360, x8)

inst_197:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x400000000000000, -0x1, x7, 1368, x8)

inst_198:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x200000000000000, -0x1, x7, 1376, x8)

inst_199:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x100000000000000, -0x1, x7, 1384, x8)

inst_200:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x80000000000000, -0x1, x7, 1392, x8)

inst_201:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x40000000000000, -0x1, x7, 1400, x8)

inst_202:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x20000000000000, -0x1, x7, 1408, x8)

inst_203:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x10000000000000, -0x1, x7, 1416, x8)

inst_204:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x8000000000000, -0x1, x7, 1424, x8)

inst_205:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x4000000000000, -0x1, x7, 1432, x8)

inst_206:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x2000000000000, -0x1, x7, 1440, x8)

inst_207:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1000000000000, -0x1, x7, 1448, x8)

inst_208:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x800000000000, -0x1, x7, 1456, x8)

inst_209:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x400000000000, -0x1, x7, 1464, x8)

inst_210:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x200000000000, -0x1, x7, 1472, x8)

inst_211:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x100000000000, -0x1, x7, 1480, x8)

inst_212:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x80000000000, -0x1, x7, 1488, x8)

inst_213:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x40000000000, -0x1, x7, 1496, x8)

inst_214:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x20000000000, -0x1, x7, 1504, x8)

inst_215:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x10000000000, -0x1, x7, 1512, x8)

inst_216:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x8000000000, -0x1, x7, 1520, x8)

inst_217:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x4000000000, -0x1, x7, 1528, x8)

inst_218:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x2000000000, -0x1, x7, 1536, x8)

inst_219:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1000000000, -0x1, x7, 1544, x8)

inst_220:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x800000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x800000000, -0x1, x7, 1552, x8)

inst_221:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x400000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x400000000, -0x1, x7, 1560, x8)

inst_222:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x200000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x200000000, -0x1, x7, 1568, x8)

inst_223:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x100000000, -0x1, x7, 1576, x8)

inst_224:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x80000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x80000000, -0x1, x7, 1584, x8)

inst_225:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x40000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x40000000, -0x1, x7, 1592, x8)

inst_226:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x20000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x20000000, -0x1, x7, 1600, x8)

inst_227:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x10000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x10000000, -0x1, x7, 1608, x8)

inst_228:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x8000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x8000000, -0x1, x7, 1616, x8)

inst_229:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x4000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x4000000, -0x1, x7, 1624, x8)

inst_230:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x2000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x2000000, -0x1, x7, 1632, x8)

inst_231:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1000000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1000000, -0x1, x7, 1640, x8)

inst_232:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x800000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x800000, -0x1, x7, 1648, x8)

inst_233:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x400000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x400000, -0x1, x7, 1656, x8)

inst_234:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x200000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x200000, -0x1, x7, 1664, x8)

inst_235:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x100000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x100000, -0x1, x7, 1672, x8)

inst_236:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x80000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x80000, -0x1, x7, 1680, x8)

inst_237:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x40000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x40000, -0x1, x7, 1688, x8)

inst_238:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x20000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x20000, -0x1, x7, 1696, x8)

inst_239:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x10000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x10000, -0x1, x7, 1704, x8)

inst_240:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x8000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x8000, -0x1, x7, 1712, x8)

inst_241:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x4000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x4000, -0x1, x7, 1720, x8)

inst_242:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x2000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x2000, -0x1, x7, 1728, x8)

inst_243:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1000;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1000, -0x1, x7, 1736, x8)

inst_244:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x800;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x800, -0x1, x7, 1744, x8)

inst_245:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x400;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x400, -0x1, x7, 1752, x8)

inst_246:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x200;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x200, -0x1, x7, 1760, x8)

inst_247:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x100;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x100, -0x1, x7, 1768, x8)

inst_248:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x80;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x80, -0x1, x7, 1776, x8)

inst_249:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x40;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x40, -0x1, x7, 1784, x8)

inst_250:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x20;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x20, -0x1, x7, 1792, x8)

inst_251:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x10;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x10, -0x1, x7, 1800, x8)

inst_252:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x8;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x8, -0x1, x7, 1808, x8)

inst_253:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x4, -0x1, x7, 1816, x8)

inst_254:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x2, -0x1, x7, 1824, x8)

inst_255:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, -0x1, x7, 1832, x8)

inst_256:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x1, x7, 1840, x8)

inst_257:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x0, x7, 1848, x8)

inst_258:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x6666666666666666, x7, 1856, x8)

inst_259:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x6666666666666667, x7, 1864, x8)

inst_260:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x3333333333333333, x7, 1872, x8)

inst_261:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x3333333333333334, x7, 1880, x8)

inst_262:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x5555555555555555, x7, 1888, x8)

inst_263:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x5555555555555556, x7, 1896, x8)

inst_264:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x6666666666666668, x7, 1904, x8)

inst_265:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x6666666666666665, x7, 1912, x8)

inst_266:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x3333333333333335, x7, 1920, x8)

inst_267:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x3333333333333332, x7, 1928, x8)

inst_268:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x5555555555555557, x7, 1936, x8)

inst_269:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x5555555555555554, x7, 1944, x8)

inst_270:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x6666666666666667, x7, 1952, x8)

inst_271:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x6666666666666666, x7, 1960, x8)

inst_272:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x3333333333333334, x7, 1968, x8)

inst_273:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x3333333333333333, x7, 1976, x8)

inst_274:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x5555555555555556, x7, 1984, x8)

inst_275:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, 0x5555555555555555, x7, 1992, x8)

inst_276:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, 0x1, x7, 2000, x8)

inst_277:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, 0x0, x7, 2008, x8)

inst_278:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, -0x6666666666666666, x7, 2016, x8)

inst_279:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, 0x6666666666666667, x7, 2024, x8)

inst_280:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, -0x3333333333333333, x7, 2032, x8)

inst_281:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, 0x3333333333333334, x7, 2040, x8)
RVTEST_SIGBASE(x7,signature_x7_1)

inst_282:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, -0x5555555555555555, x7, 0, x8)
RVTEST_SIGBASE(x7,signature_x7_2)

inst_283:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, 0x5555555555555556, x7, 0, x8)

inst_284:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, -0x6666666666666668, x7, 8, x8)

inst_285:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, 0x6666666666666665, x7, 16, x8)

inst_286:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, -0x3333333333333335, x7, 24, x8)

inst_287:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, 0x3333333333333332, x7, 32, x8)

inst_288:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, -0x5555555555555557, x7, 40, x8)

inst_289:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, 0x5555555555555554, x7, 48, x8)

inst_290:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, -0x6666666666666667, x7, 56, x8)

inst_291:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, 0x6666666666666666, x7, 64, x8)

inst_292:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, -0x3333333333333334, x7, 72, x8)

inst_293:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, 0x3333333333333333, x7, 80, x8)

inst_294:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, -0x5555555555555556, x7, 88, x8)

inst_295:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x1, 0x5555555555555555, x7, 96, x8)

inst_296:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, -0x1, x7, 104, x8)

inst_297:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, 0x1, x7, 112, x8)

inst_298:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, 0x0, x7, 120, x8)

inst_299:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, -0x6666666666666666, x7, 128, x8)

inst_300:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, 0x6666666666666667, x7, 136, x8)

inst_301:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, -0x3333333333333333, x7, 144, x8)

inst_302:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, 0x3333333333333334, x7, 152, x8)

inst_303:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, -0x5555555555555555, x7, 160, x8)

inst_304:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, 0x5555555555555556, x7, 168, x8)

inst_305:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, -0x6666666666666668, x7, 176, x8)

inst_306:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, 0x6666666666666665, x7, 184, x8)

inst_307:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, -0x3333333333333335, x7, 192, x8)

inst_308:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, 0x3333333333333332, x7, 200, x8)

inst_309:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, -0x5555555555555557, x7, 208, x8)

inst_310:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, 0x5555555555555554, x7, 216, x8)

inst_311:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, -0x6666666666666667, x7, 224, x8)

inst_312:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, 0x6666666666666666, x7, 232, x8)

inst_313:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, -0x3333333333333334, x7, 240, x8)

inst_314:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, 0x3333333333333333, x7, 248, x8)

inst_315:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, -0x5555555555555556, x7, 256, x8)

inst_316:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x0, 0x5555555555555555, x7, 264, x8)

inst_317:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, -0x1, x7, 272, x8)

inst_318:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, 0x1, x7, 280, x8)

inst_319:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, 0x0, x7, 288, x8)

inst_320:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, -0x6666666666666666, x7, 296, x8)

inst_321:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, 0x6666666666666667, x7, 304, x8)

inst_322:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, -0x3333333333333333, x7, 312, x8)

inst_323:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, 0x3333333333333334, x7, 320, x8)

inst_324:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, -0x5555555555555555, x7, 328, x8)

inst_325:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, 0x5555555555555556, x7, 336, x8)

inst_326:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, -0x6666666666666668, x7, 344, x8)

inst_327:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, 0x6666666666666665, x7, 352, x8)

inst_328:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, -0x3333333333333335, x7, 360, x8)

inst_329:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, 0x3333333333333332, x7, 368, x8)

inst_330:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, -0x5555555555555557, x7, 376, x8)

inst_331:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, 0x5555555555555554, x7, 384, x8)

inst_332:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, -0x6666666666666667, x7, 392, x8)

inst_333:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, 0x6666666666666666, x7, 400, x8)

inst_334:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, -0x3333333333333334, x7, 408, x8)

inst_335:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, 0x3333333333333333, x7, 416, x8)

inst_336:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, -0x5555555555555556, x7, 424, x8)

inst_337:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666666;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666666, 0x5555555555555555, x7, 432, x8)

inst_338:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, -0x1, x7, 440, x8)

inst_339:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x1, x7, 448, x8)

inst_340:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x0, x7, 456, x8)

inst_341:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, -0x6666666666666666, x7, 464, x8)

inst_342:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x6666666666666667, x7, 472, x8)

inst_343:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, -0x3333333333333333, x7, 480, x8)

inst_344:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x3333333333333334, x7, 488, x8)

inst_345:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, -0x5555555555555555, x7, 496, x8)

inst_346:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x5555555555555556, x7, 504, x8)

inst_347:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, -0x6666666666666668, x7, 512, x8)

inst_348:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x6666666666666665, x7, 520, x8)

inst_349:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, -0x3333333333333335, x7, 528, x8)

inst_350:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x3333333333333332, x7, 536, x8)

inst_351:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, -0x5555555555555557, x7, 544, x8)

inst_352:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x5555555555555554, x7, 552, x8)

inst_353:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, -0x6666666666666667, x7, 560, x8)

inst_354:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x6666666666666666, x7, 568, x8)

inst_355:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, -0x3333333333333334, x7, 576, x8)

inst_356:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x3333333333333333, x7, 584, x8)

inst_357:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, -0x5555555555555556, x7, 592, x8)

inst_358:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666667, 0x5555555555555555, x7, 600, x8)

inst_359:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, -0x1, x7, 608, x8)

inst_360:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, 0x1, x7, 616, x8)

inst_361:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, 0x0, x7, 624, x8)

inst_362:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, -0x6666666666666666, x7, 632, x8)

inst_363:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, 0x6666666666666667, x7, 640, x8)

inst_364:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, -0x3333333333333333, x7, 648, x8)

inst_365:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, 0x3333333333333334, x7, 656, x8)

inst_366:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, -0x5555555555555555, x7, 664, x8)

inst_367:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, 0x5555555555555556, x7, 672, x8)

inst_368:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, -0x6666666666666668, x7, 680, x8)

inst_369:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, 0x6666666666666665, x7, 688, x8)

inst_370:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, -0x3333333333333335, x7, 696, x8)

inst_371:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, 0x3333333333333332, x7, 704, x8)

inst_372:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, -0x5555555555555557, x7, 712, x8)

inst_373:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, 0x5555555555555554, x7, 720, x8)

inst_374:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, -0x6666666666666667, x7, 728, x8)

inst_375:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, 0x6666666666666666, x7, 736, x8)

inst_376:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, -0x3333333333333334, x7, 744, x8)

inst_377:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, 0x3333333333333333, x7, 752, x8)

inst_378:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, -0x5555555555555556, x7, 760, x8)

inst_379:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333333;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333333, 0x5555555555555555, x7, 768, x8)

inst_380:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, -0x1, x7, 776, x8)

inst_381:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x1, x7, 784, x8)

inst_382:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x0, x7, 792, x8)

inst_383:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, -0x6666666666666666, x7, 800, x8)

inst_384:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x6666666666666667, x7, 808, x8)

inst_385:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, -0x3333333333333333, x7, 816, x8)

inst_386:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x3333333333333334, x7, 824, x8)

inst_387:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, -0x5555555555555555, x7, 832, x8)

inst_388:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x5555555555555556, x7, 840, x8)

inst_389:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, -0x6666666666666668, x7, 848, x8)

inst_390:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x6666666666666665, x7, 856, x8)

inst_391:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, -0x3333333333333335, x7, 864, x8)

inst_392:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x3333333333333332, x7, 872, x8)

inst_393:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, -0x5555555555555557, x7, 880, x8)

inst_394:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x5555555555555554, x7, 888, x8)

inst_395:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, -0x6666666666666667, x7, 896, x8)

inst_396:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x6666666666666666, x7, 904, x8)

inst_397:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, -0x3333333333333334, x7, 912, x8)

inst_398:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x3333333333333333, x7, 920, x8)

inst_399:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, -0x5555555555555556, x7, 928, x8)

inst_400:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333334, 0x5555555555555555, x7, 936, x8)

inst_401:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, -0x1, x7, 944, x8)

inst_402:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, 0x1, x7, 952, x8)

inst_403:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, 0x0, x7, 960, x8)

inst_404:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, -0x6666666666666666, x7, 968, x8)

inst_405:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, 0x6666666666666667, x7, 976, x8)

inst_406:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, -0x3333333333333333, x7, 984, x8)

inst_407:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, 0x3333333333333334, x7, 992, x8)

inst_408:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, -0x5555555555555555, x7, 1000, x8)

inst_409:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, 0x5555555555555556, x7, 1008, x8)

inst_410:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, -0x6666666666666668, x7, 1016, x8)

inst_411:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, 0x6666666666666665, x7, 1024, x8)

inst_412:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, -0x3333333333333335, x7, 1032, x8)

inst_413:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, 0x3333333333333332, x7, 1040, x8)

inst_414:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, -0x5555555555555557, x7, 1048, x8)

inst_415:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, 0x5555555555555554, x7, 1056, x8)

inst_416:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, -0x6666666666666667, x7, 1064, x8)

inst_417:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, 0x6666666666666666, x7, 1072, x8)

inst_418:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, -0x3333333333333334, x7, 1080, x8)

inst_419:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, 0x3333333333333333, x7, 1088, x8)

inst_420:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, -0x5555555555555556, x7, 1096, x8)

inst_421:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555555;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555555, 0x5555555555555555, x7, 1104, x8)

inst_422:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, -0x1, x7, 1112, x8)

inst_423:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x1, x7, 1120, x8)

inst_424:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x0, x7, 1128, x8)

inst_425:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, -0x6666666666666666, x7, 1136, x8)

inst_426:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x6666666666666667, x7, 1144, x8)

inst_427:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, -0x3333333333333333, x7, 1152, x8)

inst_428:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x3333333333333334, x7, 1160, x8)

inst_429:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, -0x5555555555555555, x7, 1168, x8)

inst_430:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x5555555555555556, x7, 1176, x8)

inst_431:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, -0x6666666666666668, x7, 1184, x8)

inst_432:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x6666666666666665, x7, 1192, x8)

inst_433:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, -0x3333333333333335, x7, 1200, x8)

inst_434:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x3333333333333332, x7, 1208, x8)

inst_435:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, -0x5555555555555557, x7, 1216, x8)

inst_436:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x5555555555555554, x7, 1224, x8)

inst_437:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, -0x6666666666666667, x7, 1232, x8)

inst_438:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x6666666666666666, x7, 1240, x8)

inst_439:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, -0x3333333333333334, x7, 1248, x8)

inst_440:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x3333333333333333, x7, 1256, x8)

inst_441:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, -0x5555555555555556, x7, 1264, x8)

inst_442:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, -0x6666666666666666, x7, 1272, x8)

inst_443:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x6666666666666667, x7, 1280, x8)

inst_444:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, -0x3333333333333333, x7, 1288, x8)

inst_445:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x3333333333333334, x7, 1296, x8)

inst_446:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, -0x5555555555555555, x7, 1304, x8)

inst_447:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x5555555555555556, x7, 1312, x8)

inst_448:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, -0x6666666666666668, x7, 1320, x8)

inst_449:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x6666666666666665, x7, 1328, x8)

inst_450:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, -0x3333333333333335, x7, 1336, x8)

inst_451:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x3333333333333332, x7, 1344, x8)

inst_452:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, -0x5555555555555557, x7, 1352, x8)

inst_453:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x5555555555555554, x7, 1360, x8)

inst_454:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, -0x6666666666666667, x7, 1368, x8)

inst_455:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x6666666666666666, x7, 1376, x8)

inst_456:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, -0x3333333333333334, x7, 1384, x8)

inst_457:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x3333333333333333, x7, 1392, x8)

inst_458:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, -0x5555555555555556, x7, 1400, x8)

inst_459:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x5555555555555555, x7, 1408, x8)

inst_460:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, -0x1, x7, 1416, x8)

inst_461:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, 0x1, x7, 1424, x8)

inst_462:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, 0x0, x7, 1432, x8)

inst_463:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, -0x6666666666666666, x7, 1440, x8)

inst_464:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, 0x6666666666666667, x7, 1448, x8)

inst_465:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, -0x3333333333333333, x7, 1456, x8)

inst_466:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, 0x3333333333333334, x7, 1464, x8)

inst_467:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, -0x5555555555555555, x7, 1472, x8)

inst_468:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, 0x5555555555555556, x7, 1480, x8)

inst_469:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, -0x6666666666666668, x7, 1488, x8)

inst_470:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, 0x6666666666666665, x7, 1496, x8)

inst_471:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, -0x3333333333333335, x7, 1504, x8)

inst_472:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, 0x3333333333333332, x7, 1512, x8)

inst_473:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, -0x5555555555555557, x7, 1520, x8)

inst_474:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, 0x5555555555555554, x7, 1528, x8)

inst_475:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, -0x6666666666666667, x7, 1536, x8)

inst_476:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, 0x6666666666666666, x7, 1544, x8)

inst_477:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, -0x3333333333333334, x7, 1552, x8)

inst_478:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, 0x3333333333333333, x7, 1560, x8)

inst_479:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, -0x5555555555555556, x7, 1568, x8)

inst_480:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555557;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555557, 0x5555555555555555, x7, 1576, x8)

inst_481:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, -0x1, x7, 1584, x8)

inst_482:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x1, x7, 1592, x8)

inst_483:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x0, x7, 1600, x8)

inst_484:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, -0x6666666666666666, x7, 1608, x8)

inst_485:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x6666666666666667, x7, 1616, x8)

inst_486:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, -0x3333333333333333, x7, 1624, x8)

inst_487:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x3333333333333334, x7, 1632, x8)

inst_488:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, -0x5555555555555555, x7, 1640, x8)

inst_489:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x5555555555555556, x7, 1648, x8)

inst_490:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, -0x6666666666666668, x7, 1656, x8)

inst_491:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x6666666666666665, x7, 1664, x8)

inst_492:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, -0x3333333333333335, x7, 1672, x8)

inst_493:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x3333333333333332, x7, 1680, x8)

inst_494:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, -0x5555555555555557, x7, 1688, x8)

inst_495:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x5555555555555554, x7, 1696, x8)

inst_496:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, -0x6666666666666667, x7, 1704, x8)

inst_497:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x6666666666666666, x7, 1712, x8)

inst_498:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, -0x3333333333333334, x7, 1720, x8)

inst_499:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x3333333333333333, x7, 1728, x8)

inst_500:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, -0x5555555555555556, x7, 1736, x8)

inst_501:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555554, 0x5555555555555555, x7, 1744, x8)

inst_502:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, -0x1, x7, 1752, x8)

inst_503:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, 0x1, x7, 1760, x8)

inst_504:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, 0x0, x7, 1768, x8)

inst_505:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, -0x6666666666666666, x7, 1776, x8)

inst_506:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, 0x6666666666666667, x7, 1784, x8)

inst_507:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, -0x3333333333333333, x7, 1792, x8)

inst_508:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, 0x3333333333333334, x7, 1800, x8)

inst_509:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, -0x5555555555555555, x7, 1808, x8)

inst_510:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, 0x5555555555555556, x7, 1816, x8)

inst_511:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, -0x6666666666666668, x7, 1824, x8)

inst_512:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, 0x6666666666666665, x7, 1832, x8)

inst_513:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, -0x3333333333333335, x7, 1840, x8)

inst_514:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, 0x3333333333333332, x7, 1848, x8)

inst_515:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, -0x5555555555555557, x7, 1856, x8)

inst_516:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, 0x5555555555555554, x7, 1864, x8)

inst_517:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, -0x6666666666666667, x7, 1872, x8)

inst_518:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, 0x6666666666666666, x7, 1880, x8)

inst_519:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, -0x3333333333333334, x7, 1888, x8)

inst_520:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, 0x3333333333333333, x7, 1896, x8)

inst_521:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, -0x5555555555555556, x7, 1904, x8)

inst_522:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666667;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666667, 0x5555555555555555, x7, 1912, x8)

inst_523:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, -0x1, x7, 1920, x8)

inst_524:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x1, x7, 1928, x8)

inst_525:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x0, x7, 1936, x8)

inst_526:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, -0x6666666666666666, x7, 1944, x8)

inst_527:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x6666666666666667, x7, 1952, x8)

inst_528:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, -0x3333333333333333, x7, 1960, x8)

inst_529:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x3333333333333334, x7, 1968, x8)

inst_530:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, -0x5555555555555555, x7, 1976, x8)

inst_531:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x5555555555555556, x7, 1984, x8)

inst_532:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, -0x6666666666666668, x7, 1992, x8)

inst_533:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x6666666666666665, x7, 2000, x8)

inst_534:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, -0x3333333333333335, x7, 2008, x8)

inst_535:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x3333333333333332, x7, 2016, x8)

inst_536:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, -0x5555555555555557, x7, 2024, x8)

inst_537:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x5555555555555554, x7, 2032, x8)

inst_538:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, -0x6666666666666667, x7, 2040, x8)
RVTEST_SIGBASE(x7,signature_x7_3)

inst_539:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x6666666666666666, x7, 0, x8)
RVTEST_SIGBASE(x7,signature_x7_4)

inst_540:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, -0x3333333333333334, x7, 0, x8)

inst_541:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x3333333333333333, x7, 8, x8)

inst_542:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, -0x5555555555555556, x7, 16, x8)

inst_543:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666666, 0x5555555555555555, x7, 24, x8)

inst_544:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, -0x1, x7, 32, x8)

inst_545:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, 0x1, x7, 40, x8)

inst_546:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, 0x0, x7, 48, x8)

inst_547:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, -0x6666666666666666, x7, 56, x8)

inst_548:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, 0x6666666666666667, x7, 64, x8)

inst_549:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, -0x3333333333333333, x7, 72, x8)

inst_550:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, 0x3333333333333334, x7, 80, x8)

inst_551:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, -0x5555555555555555, x7, 88, x8)

inst_552:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, 0x5555555555555556, x7, 96, x8)

inst_553:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, -0x6666666666666668, x7, 104, x8)

inst_554:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, 0x6666666666666665, x7, 112, x8)

inst_555:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, -0x3333333333333335, x7, 120, x8)

inst_556:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, 0x3333333333333332, x7, 128, x8)

inst_557:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, -0x5555555555555557, x7, 136, x8)

inst_558:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, 0x5555555555555554, x7, 144, x8)

inst_559:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, -0x6666666666666667, x7, 152, x8)

inst_560:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, 0x6666666666666666, x7, 160, x8)

inst_561:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, -0x3333333333333334, x7, 168, x8)

inst_562:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, 0x3333333333333333, x7, 176, x8)

inst_563:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, -0x5555555555555556, x7, 184, x8)

inst_564:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333334;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333334, 0x5555555555555555, x7, 192, x8)

inst_565:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, -0x1, x7, 200, x8)

inst_566:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x1, x7, 208, x8)

inst_567:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x0, x7, 216, x8)

inst_568:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, -0x6666666666666666, x7, 224, x8)

inst_569:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x6666666666666667, x7, 232, x8)

inst_570:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, -0x6666666666666667, x7, 240, x8)

inst_571:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, -0x3333333333333333, x7, 248, x8)

inst_572:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x3333333333333334, x7, 256, x8)

inst_573:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, -0x5555555555555555, x7, 264, x8)

inst_574:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x5555555555555556, x7, 272, x8)

inst_575:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, -0x6666666666666668, x7, 280, x8)

inst_576:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x6666666666666665, x7, 288, x8)

inst_577:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, -0x3333333333333335, x7, 296, x8)

inst_578:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x3333333333333332, x7, 304, x8)

inst_579:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, -0x5555555555555557, x7, 312, x8)

inst_580:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x5555555555555554, x7, 320, x8)

inst_581:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, -0x6666666666666667, x7, 328, x8)

inst_582:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x6666666666666666, x7, 336, x8)

inst_583:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, -0x3333333333333334, x7, 344, x8)

inst_584:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x3333333333333333, x7, 352, x8)

inst_585:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, -0x5555555555555556, x7, 360, x8)

inst_586:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333333, 0x5555555555555555, x7, 368, x8)

inst_587:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, -0x1, x7, 376, x8)

inst_588:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, 0x1, x7, 384, x8)

inst_589:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, 0x0, x7, 392, x8)

inst_590:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, -0x6666666666666666, x7, 400, x8)

inst_591:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, 0x6666666666666667, x7, 408, x8)

inst_592:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, -0x3333333333333333, x7, 416, x8)

inst_593:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, 0x3333333333333334, x7, 424, x8)

inst_594:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, -0x5555555555555555, x7, 432, x8)

inst_595:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, 0x5555555555555556, x7, 440, x8)

inst_596:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, -0x6666666666666668, x7, 448, x8)

inst_597:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, 0x6666666666666665, x7, 456, x8)

inst_598:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, -0x3333333333333335, x7, 464, x8)

inst_599:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, 0x3333333333333332, x7, 472, x8)

inst_600:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, -0x5555555555555557, x7, 480, x8)

inst_601:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, 0x5555555555555554, x7, 488, x8)

inst_602:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, -0x6666666666666667, x7, 496, x8)

inst_603:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, 0x6666666666666666, x7, 504, x8)

inst_604:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, -0x3333333333333334, x7, 512, x8)

inst_605:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, 0x3333333333333333, x7, 520, x8)

inst_606:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, -0x5555555555555556, x7, 528, x8)

inst_607:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x5555555555555556;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x5555555555555556, 0x5555555555555555, x7, 536, x8)

inst_608:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, -0x1, x7, 544, x8)

inst_609:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x1, x7, 552, x8)

inst_610:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x0, x7, 560, x8)

inst_611:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, -0x6666666666666666, x7, 568, x8)

inst_612:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x6666666666666667, x7, 576, x8)

inst_613:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, -0x3333333333333333, x7, 584, x8)

inst_614:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x3333333333333334, x7, 592, x8)

inst_615:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, -0x5555555555555555, x7, 600, x8)

inst_616:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x5555555555555556, x7, 608, x8)

inst_617:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, -0x6666666666666668, x7, 616, x8)

inst_618:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x6666666666666665, x7, 624, x8)

inst_619:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, -0x3333333333333335, x7, 632, x8)

inst_620:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x3333333333333332, x7, 640, x8)

inst_621:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, -0x5555555555555557, x7, 648, x8)

inst_622:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x5555555555555554, x7, 656, x8)

inst_623:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, -0x6666666666666667, x7, 664, x8)

inst_624:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x6666666666666666, x7, 672, x8)

inst_625:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, -0x3333333333333334, x7, 680, x8)

inst_626:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x3333333333333333, x7, 688, x8)

inst_627:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, -0x5555555555555556, x7, 696, x8)

inst_628:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555555, 0x5555555555555555, x7, 704, x8)

inst_629:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x5555555555555556, 0x5555555555555555, x7, 712, x8)

inst_630:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, -0x1, x7, 720, x8)

inst_631:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, 0x1, x7, 728, x8)

inst_632:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, 0x0, x7, 736, x8)

inst_633:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, -0x6666666666666666, x7, 744, x8)

inst_634:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, 0x6666666666666667, x7, 752, x8)

inst_635:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, -0x3333333333333333, x7, 760, x8)

inst_636:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, 0x3333333333333334, x7, 768, x8)

inst_637:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, -0x5555555555555555, x7, 776, x8)

inst_638:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, 0x5555555555555556, x7, 784, x8)

inst_639:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, -0x6666666666666668, x7, 792, x8)

inst_640:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, 0x6666666666666665, x7, 800, x8)

inst_641:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, -0x3333333333333335, x7, 808, x8)

inst_642:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, 0x3333333333333332, x7, 816, x8)

inst_643:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, -0x5555555555555557, x7, 824, x8)

inst_644:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, 0x5555555555555554, x7, 832, x8)

inst_645:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, -0x6666666666666667, x7, 840, x8)

inst_646:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, 0x6666666666666666, x7, 848, x8)

inst_647:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, -0x3333333333333334, x7, 856, x8)

inst_648:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, 0x3333333333333333, x7, 864, x8)

inst_649:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, -0x5555555555555556, x7, 872, x8)

inst_650:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x6666666666666668;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x6666666666666668, 0x5555555555555555, x7, 880, x8)

inst_651:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, -0x1, x7, 888, x8)

inst_652:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x1, x7, 896, x8)

inst_653:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x0, x7, 904, x8)

inst_654:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, -0x6666666666666666, x7, 912, x8)

inst_655:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x6666666666666667, x7, 920, x8)

inst_656:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, -0x3333333333333333, x7, 928, x8)

inst_657:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x3333333333333334, x7, 936, x8)

inst_658:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, -0x5555555555555555, x7, 944, x8)

inst_659:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x5555555555555556, x7, 952, x8)

inst_660:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, -0x6666666666666668, x7, 960, x8)

inst_661:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x6666666666666665, x7, 968, x8)

inst_662:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, -0x3333333333333335, x7, 976, x8)

inst_663:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x3333333333333332, x7, 984, x8)

inst_664:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, -0x5555555555555557, x7, 992, x8)

inst_665:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x5555555555555554, x7, 1000, x8)

inst_666:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:-0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, -0x6666666666666667, x7, 1008, x8)

inst_667:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x6666666666666666, x7, 1016, x8)

inst_668:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, -0x3333333333333334, x7, 1024, x8)

inst_669:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x3333333333333333, x7, 1032, x8)

inst_670:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, -0x5555555555555556, x7, 1040, x8)

inst_671:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x6666666666666665, 0x5555555555555555, x7, 1048, x8)

inst_672:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, -0x1, x7, 1056, x8)

inst_673:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, 0x1, x7, 1064, x8)

inst_674:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, 0x0, x7, 1072, x8)

inst_675:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:-0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, -0x6666666666666666, x7, 1080, x8)

inst_676:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:0x6666666666666667
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, 0x6666666666666667, x7, 1088, x8)

inst_677:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:-0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, -0x3333333333333333, x7, 1096, x8)

inst_678:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, 0x3333333333333334, x7, 1104, x8)

inst_679:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:-0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, -0x5555555555555555, x7, 1112, x8)

inst_680:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, 0x5555555555555556, x7, 1120, x8)

inst_681:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:-0x6666666666666668
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, -0x6666666666666668, x7, 1128, x8)

inst_682:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:0x6666666666666665
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, 0x6666666666666665, x7, 1136, x8)

inst_683:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:-0x3333333333333335
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, -0x3333333333333335, x7, 1144, x8)

inst_684:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:0x3333333333333332
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, 0x3333333333333332, x7, 1152, x8)

inst_685:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:-0x5555555555555557
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, -0x5555555555555557, x7, 1160, x8)

inst_686:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:0x5555555555555554
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, 0x5555555555555554, x7, 1168, x8)

inst_687:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:0x6666666666666666
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, 0x6666666666666666, x7, 1176, x8)

inst_688:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:-0x3333333333333334
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, -0x3333333333333334, x7, 1184, x8)

inst_689:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:0x3333333333333333
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, 0x3333333333333333, x7, 1192, x8)

inst_690:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:-0x5555555555555556
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, -0x5555555555555556, x7, 1200, x8)

inst_691:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x3333333333333335;  op2val:0x5555555555555555
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x3333333333333335, 0x5555555555555555, x7, 1208, x8)

inst_692:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:-0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, -0x1, x7, 1216, x8)

inst_693:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x1
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x1, x7, 1224, x8)

inst_694:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x0
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, 0x3333333333333332, 0x0, x7, 1232, x8)

inst_695:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x2000000000000001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x2000000000000001, x7, 1240, x8)

inst_696:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x1000000000000001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x1000000000000001, x7, 1248, x8)

inst_697:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x400000001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x400000001, x7, 1256, x8)

inst_698:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x100000001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x100000001, x7, 1264, x8)

inst_699:
// 
// opcode: sh2add ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x80000001
TEST_RR_OP(sh2add, x31, x30, x29, 0x0000000000000000, -0x1, -0x80000001, x7, 1272, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 1*(XLEN/32),4,0xdeadbeef


signature_x7_2:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x7_3:
    .fill 1*(XLEN/32),4,0xdeadbeef


signature_x7_4:
    .fill 160*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
