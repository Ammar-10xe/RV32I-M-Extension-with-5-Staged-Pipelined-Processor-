
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Mon Aug  8 15:50:32 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/sharder/git/riscv/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/sharder/git/riscv/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32F/flw-align.cgf \
//                  --cgf /home/sharder/git/riscv/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32F/fsw-align.cgf \
//                  --cgf /home/sharder/git/riscv/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32D/fsd-align.cgf \
//                  --cgf /home/sharder/git/riscv/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32D/fld-align.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fld instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fld-align covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*D.*);def TEST_CASE_1=True;",fld-align)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x7,test_dataset_0)
RVTEST_SIGBASE(x16,signature_x16_1)

inst_0:// rs1==x28, rd==f27,ea_align == 0 and (imm_val % 8) == 0 and fcsr == 0, imm_val < 0  and fcsr == 0
// opcode:fld op1:x28; dest:f27; immval:-0x400; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x28,f27,-0x400,fld,0,x21)

inst_1:// rs1==x9, rd==f12,ea_align == 0 and (imm_val % 8) == 1 and fcsr == 0, imm_val > 0  and fcsr == 0
// opcode:fld op1:x9; dest:f12; immval:0x1; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x9,f12,0x1,fld,0,x21)

inst_2:// rs1==x13, rd==f15,ea_align == 0 and (imm_val % 8) == 2 and fcsr == 0, 
// opcode:fld op1:x13; dest:f15; immval:-0x6; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x13,f15,-0x6,fld,0,x21)

inst_3:// rs1==x17, rd==f4,ea_align == 0 and (imm_val % 8) == 3 and fcsr == 0, 
// opcode:fld op1:x17; dest:f4; immval:-0x5; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x17,f4,-0x5,fld,0,x21)

inst_4:// rs1==x31, rd==f14,ea_align == 0 and (imm_val % 8) == 4 and fcsr == 0, 
// opcode:fld op1:x31; dest:f14; immval:0x4; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x31,f14,0x4,fld,0,x21)

inst_5:// rs1==x14, rd==f6,imm_val == 0 and fcsr == 0, 
// opcode:fld op1:x14; dest:f6; immval:0x0; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x14,f6,0x0,fld,0,x21)

inst_6:// rs1==x11, rd==f0,ea_align == 0 and (imm_val % 8) == 5 and fcsr == 0, 
// opcode:fld op1:x11; dest:f0; immval:-0x3; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x11,f0,-0x3,fld,0,x21)

inst_7:// rs1==x3, rd==f28,ea_align == 0 and (imm_val % 8) == 6 and fcsr == 0, 
// opcode:fld op1:x3; dest:f28; immval:-0x2; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x3,f28,-0x2,fld,0,x21)

inst_8:// rs1==x5, rd==f29,ea_align == 0 and (imm_val % 8) == 7 and fcsr == 0, 
// opcode:fld op1:x5; dest:f29; immval:-0x81; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x5,f29,-0x81,fld,0,x21)

inst_9:// rs1==x4, rd==f19,
// opcode:fld op1:x4; dest:f19; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x4,f19,-0x800,fld,0,x21)

inst_10:// rs1==x22, rd==f5,
// opcode:fld op1:x22; dest:f5; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x22,f5,-0x800,fld,0,x21)

inst_11:// rs1==x2, rd==f10,
// opcode:fld op1:x2; dest:f10; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x2,f10,-0x800,fld,0,x21)

inst_12:// rs1==x10, rd==f16,
// opcode:fld op1:x10; dest:f16; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x10,f16,-0x800,fld,0,x21)

inst_13:// rs1==x23, rd==f13,
// opcode:fld op1:x23; dest:f13; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x23,f13,-0x800,fld,0,x21)

inst_14:// rs1==x29, rd==f22,
// opcode:fld op1:x29; dest:f22; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x29,f22,-0x800,fld,0,x21)

inst_15:// rs1==x12, rd==f1,
// opcode:fld op1:x12; dest:f1; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x12,f1,-0x800,fld,0,x21)

inst_16:// rs1==x26, rd==f2,
// opcode:fld op1:x26; dest:f2; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x26,f2,-0x800,fld,0,x21)

inst_17:// rs1==x20, rd==f24,
// opcode:fld op1:x20; dest:f24; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x20,f24,-0x800,fld,0,x21)

inst_18:// rs1==x6, rd==f26,
// opcode:fld op1:x6; dest:f26; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x6,f26,-0x800,fld,0,x21)

inst_19:// rs1==x15, rd==f17,
// opcode:fld op1:x15; dest:f17; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x15,f17,-0x800,fld,0,x21)

inst_20:// rs1==x25, rd==f7,
// opcode:fld op1:x25; dest:f7; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x25,f7,-0x800,fld,0,x21)

inst_21:// rs1==x8, rd==f30,
// opcode:fld op1:x8; dest:f30; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x8,f30,-0x800,fld,0,x21)

inst_22:// rs1==x19, rd==f31,
// opcode:fld op1:x19; dest:f31; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x19,f31,-0x800,fld,0,x21)

inst_23:// rs1==x1, rd==f11,
// opcode:fld op1:x1; dest:f11; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x1,f11,-0x800,fld,0,x21)
RVTEST_VALBASEUPD(x4,test_dataset_1)

inst_24:// rs1==x7, rd==f3,
// opcode:fld op1:x7; dest:f3; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x7,f3,-0x800,fld,0,x5)

inst_25:// rs1==x30, rd==f18,
// opcode:fld op1:x30; dest:f18; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x18,0,x30,f18,-0x800,fld,0,x5)

inst_26:// rs1==x27, rd==f20,
// opcode:fld op1:x27; dest:f20; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x16,x3,0,x27,f20,-0x800,fld,0,x5)
RVTEST_SIGBASE(x2,signature_x2_0)

inst_27:// rs1==x21, rd==f8,
// opcode:fld op1:x21; dest:f8; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x2,x3,0,x21,f8,-0x800,fld,0,x5)

inst_28:// rs1==x18, rd==f21,
// opcode:fld op1:x18; dest:f21; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x2,x3,0,x18,f21,-0x800,fld,0,x5)

inst_29:// rs1==x24, rd==f23,
// opcode:fld op1:x24; dest:f23; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x2,x3,0,x24,f23,-0x800,fld,0,x5)

inst_30:// rs1==x16, rd==f9,
// opcode:fld op1:x16; dest:f9; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x2,x3,0,x16,f9,-0x800,fld,0,x5)

inst_31:// rd==f25,
// opcode:fld op1:x1; dest:f25; immval:-0x800; align:0; flagreg:$flag_reg
TEST_LOAD_F(x2,x3,0,x1,f25,-0x800,fld,0,x5)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
























test_dataset_1:








RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x16_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x16_1:
    .fill 54*((SIGALIGN)/4),4,0xdeadbeef


signature_x2_0:
    .fill 10*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
